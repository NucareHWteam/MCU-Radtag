
RadTag10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c958  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d64  0801ca18  0801ca18  0001da18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802077c  0802077c  000224c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802077c  0802077c  0002177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020784  08020784  000224c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020784  08020784  00021784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020788  08020788  00021788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c0  20000000  0802078c  00022000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000633c  200004c0  08020c4c  000224c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200067fc  08020c4c  000227fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008a3d6  00000000  00000000  000224e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010ac5  00000000  00000000  000ac8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00021bfd  00000000  00000000  000bd383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e00  00000000  00000000  000def80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000327e  00000000  00000000  000e1d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035758  00000000  00000000  000e4ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006f19a  00000000  00000000  0011a756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efe55  00000000  00000000  001898f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00279745  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086c8  00000000  00000000  00279788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00281e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004c0 	.word	0x200004c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c9ec 	.word	0x0801c9ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c4 	.word	0x200004c4
 8000104:	0801c9ec 	.word	0x0801c9ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f002 f989 	bl	800277c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f002 f8cd 	bl	8002614 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f97b 	bl	800277c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f002 f971 	bl	800277c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f8f7 	bl	800269c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f8ed 	bl	800269c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	0008      	movs	r0, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 fceb 	bl	8000eb4 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fc73 	bl	8000dd4 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fcdd 	bl	8000eb4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fcd3 	bl	8000eb4 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc81 	bl	8000e24 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fc77 	bl	8000e24 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__clzsi2>:
 8000544:	211c      	movs	r1, #28
 8000546:	2301      	movs	r3, #1
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	4298      	cmp	r0, r3
 800054c:	d301      	bcc.n	8000552 <__clzsi2+0xe>
 800054e:	0c00      	lsrs	r0, r0, #16
 8000550:	3910      	subs	r1, #16
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	4298      	cmp	r0, r3
 8000556:	d301      	bcc.n	800055c <__clzsi2+0x18>
 8000558:	0a00      	lsrs	r0, r0, #8
 800055a:	3908      	subs	r1, #8
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	4298      	cmp	r0, r3
 8000560:	d301      	bcc.n	8000566 <__clzsi2+0x22>
 8000562:	0900      	lsrs	r0, r0, #4
 8000564:	3904      	subs	r1, #4
 8000566:	a202      	add	r2, pc, #8	@ (adr r2, 8000570 <__clzsi2+0x2c>)
 8000568:	5c10      	ldrb	r0, [r2, r0]
 800056a:	1840      	adds	r0, r0, r1
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	02020304 	.word	0x02020304
 8000574:	01010101 	.word	0x01010101
	...

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffead 	.word	0xfffffead
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f83c 	bl	800062c <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	@ 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffb2 	bl	8000530 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f001 f88b 	bl	80016ec <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	@ 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fe0b 	bl	80011f8 <__aeabi_fsub>
 80005e2:	f001 f883 	bl	80016ec <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	@ 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff5f 	bl	80004bc <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f003 f839 	bl	800367c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f002 fc06 	bl	8002e24 <__aeabi_dsub>
 8000618:	f003 f830 	bl	800367c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	4657      	mov	r7, sl
 8000630:	464e      	mov	r6, r9
 8000632:	4645      	mov	r5, r8
 8000634:	46de      	mov	lr, fp
 8000636:	b5e0      	push	{r5, r6, r7, lr}
 8000638:	0004      	movs	r4, r0
 800063a:	000d      	movs	r5, r1
 800063c:	4692      	mov	sl, r2
 800063e:	4699      	mov	r9, r3
 8000640:	b083      	sub	sp, #12
 8000642:	428b      	cmp	r3, r1
 8000644:	d830      	bhi.n	80006a8 <__udivmoddi4+0x7c>
 8000646:	d02d      	beq.n	80006a4 <__udivmoddi4+0x78>
 8000648:	4649      	mov	r1, r9
 800064a:	4650      	mov	r0, sl
 800064c:	f003 f96e 	bl	800392c <__clzdi2>
 8000650:	0029      	movs	r1, r5
 8000652:	0006      	movs	r6, r0
 8000654:	0020      	movs	r0, r4
 8000656:	f003 f969 	bl	800392c <__clzdi2>
 800065a:	1a33      	subs	r3, r6, r0
 800065c:	4698      	mov	r8, r3
 800065e:	3b20      	subs	r3, #32
 8000660:	d434      	bmi.n	80006cc <__udivmoddi4+0xa0>
 8000662:	469b      	mov	fp, r3
 8000664:	4653      	mov	r3, sl
 8000666:	465a      	mov	r2, fp
 8000668:	4093      	lsls	r3, r2
 800066a:	4642      	mov	r2, r8
 800066c:	001f      	movs	r7, r3
 800066e:	4653      	mov	r3, sl
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d83b      	bhi.n	80006f0 <__udivmoddi4+0xc4>
 8000678:	42af      	cmp	r7, r5
 800067a:	d100      	bne.n	800067e <__udivmoddi4+0x52>
 800067c:	e079      	b.n	8000772 <__udivmoddi4+0x146>
 800067e:	465b      	mov	r3, fp
 8000680:	1ba4      	subs	r4, r4, r6
 8000682:	41bd      	sbcs	r5, r7
 8000684:	2b00      	cmp	r3, #0
 8000686:	da00      	bge.n	800068a <__udivmoddi4+0x5e>
 8000688:	e076      	b.n	8000778 <__udivmoddi4+0x14c>
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	465a      	mov	r2, fp
 8000696:	4093      	lsls	r3, r2
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	4642      	mov	r2, r8
 800069e:	4093      	lsls	r3, r2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	e029      	b.n	80006f8 <__udivmoddi4+0xcc>
 80006a4:	4282      	cmp	r2, r0
 80006a6:	d9cf      	bls.n	8000648 <__udivmoddi4+0x1c>
 80006a8:	2200      	movs	r2, #0
 80006aa:	2300      	movs	r3, #0
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <__udivmoddi4+0x8e>
 80006b6:	601c      	str	r4, [r3, #0]
 80006b8:	605d      	str	r5, [r3, #4]
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	b003      	add	sp, #12
 80006c0:	bcf0      	pop	{r4, r5, r6, r7}
 80006c2:	46bb      	mov	fp, r7
 80006c4:	46b2      	mov	sl, r6
 80006c6:	46a9      	mov	r9, r5
 80006c8:	46a0      	mov	r8, r4
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	4642      	mov	r2, r8
 80006ce:	469b      	mov	fp, r3
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	4652      	mov	r2, sl
 80006d6:	40da      	lsrs	r2, r3
 80006d8:	4641      	mov	r1, r8
 80006da:	0013      	movs	r3, r2
 80006dc:	464a      	mov	r2, r9
 80006de:	408a      	lsls	r2, r1
 80006e0:	0017      	movs	r7, r2
 80006e2:	4642      	mov	r2, r8
 80006e4:	431f      	orrs	r7, r3
 80006e6:	4653      	mov	r3, sl
 80006e8:	4093      	lsls	r3, r2
 80006ea:	001e      	movs	r6, r3
 80006ec:	42af      	cmp	r7, r5
 80006ee:	d9c3      	bls.n	8000678 <__udivmoddi4+0x4c>
 80006f0:	2200      	movs	r2, #0
 80006f2:	2300      	movs	r3, #0
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	4643      	mov	r3, r8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0d8      	beq.n	80006b0 <__udivmoddi4+0x84>
 80006fe:	07fb      	lsls	r3, r7, #31
 8000700:	0872      	lsrs	r2, r6, #1
 8000702:	431a      	orrs	r2, r3
 8000704:	4646      	mov	r6, r8
 8000706:	087b      	lsrs	r3, r7, #1
 8000708:	e00e      	b.n	8000728 <__udivmoddi4+0xfc>
 800070a:	42ab      	cmp	r3, r5
 800070c:	d101      	bne.n	8000712 <__udivmoddi4+0xe6>
 800070e:	42a2      	cmp	r2, r4
 8000710:	d80c      	bhi.n	800072c <__udivmoddi4+0x100>
 8000712:	1aa4      	subs	r4, r4, r2
 8000714:	419d      	sbcs	r5, r3
 8000716:	2001      	movs	r0, #1
 8000718:	1924      	adds	r4, r4, r4
 800071a:	416d      	adcs	r5, r5
 800071c:	2100      	movs	r1, #0
 800071e:	3e01      	subs	r6, #1
 8000720:	1824      	adds	r4, r4, r0
 8000722:	414d      	adcs	r5, r1
 8000724:	2e00      	cmp	r6, #0
 8000726:	d006      	beq.n	8000736 <__udivmoddi4+0x10a>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d9ee      	bls.n	800070a <__udivmoddi4+0xde>
 800072c:	3e01      	subs	r6, #1
 800072e:	1924      	adds	r4, r4, r4
 8000730:	416d      	adcs	r5, r5
 8000732:	2e00      	cmp	r6, #0
 8000734:	d1f8      	bne.n	8000728 <__udivmoddi4+0xfc>
 8000736:	9800      	ldr	r0, [sp, #0]
 8000738:	9901      	ldr	r1, [sp, #4]
 800073a:	465b      	mov	r3, fp
 800073c:	1900      	adds	r0, r0, r4
 800073e:	4169      	adcs	r1, r5
 8000740:	2b00      	cmp	r3, #0
 8000742:	db24      	blt.n	800078e <__udivmoddi4+0x162>
 8000744:	002b      	movs	r3, r5
 8000746:	465a      	mov	r2, fp
 8000748:	4644      	mov	r4, r8
 800074a:	40d3      	lsrs	r3, r2
 800074c:	002a      	movs	r2, r5
 800074e:	40e2      	lsrs	r2, r4
 8000750:	001c      	movs	r4, r3
 8000752:	465b      	mov	r3, fp
 8000754:	0015      	movs	r5, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	db2a      	blt.n	80007b0 <__udivmoddi4+0x184>
 800075a:	0026      	movs	r6, r4
 800075c:	409e      	lsls	r6, r3
 800075e:	0033      	movs	r3, r6
 8000760:	0026      	movs	r6, r4
 8000762:	4647      	mov	r7, r8
 8000764:	40be      	lsls	r6, r7
 8000766:	0032      	movs	r2, r6
 8000768:	1a80      	subs	r0, r0, r2
 800076a:	4199      	sbcs	r1, r3
 800076c:	9000      	str	r0, [sp, #0]
 800076e:	9101      	str	r1, [sp, #4]
 8000770:	e79e      	b.n	80006b0 <__udivmoddi4+0x84>
 8000772:	42a3      	cmp	r3, r4
 8000774:	d8bc      	bhi.n	80006f0 <__udivmoddi4+0xc4>
 8000776:	e782      	b.n	800067e <__udivmoddi4+0x52>
 8000778:	4642      	mov	r2, r8
 800077a:	2320      	movs	r3, #32
 800077c:	2100      	movs	r1, #0
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	9100      	str	r1, [sp, #0]
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	40da      	lsrs	r2, r3
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	e785      	b.n	800069a <__udivmoddi4+0x6e>
 800078e:	4642      	mov	r2, r8
 8000790:	2320      	movs	r3, #32
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	002a      	movs	r2, r5
 8000796:	4646      	mov	r6, r8
 8000798:	409a      	lsls	r2, r3
 800079a:	0023      	movs	r3, r4
 800079c:	40f3      	lsrs	r3, r6
 800079e:	4644      	mov	r4, r8
 80007a0:	4313      	orrs	r3, r2
 80007a2:	002a      	movs	r2, r5
 80007a4:	40e2      	lsrs	r2, r4
 80007a6:	001c      	movs	r4, r3
 80007a8:	465b      	mov	r3, fp
 80007aa:	0015      	movs	r5, r2
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dad4      	bge.n	800075a <__udivmoddi4+0x12e>
 80007b0:	4642      	mov	r2, r8
 80007b2:	002f      	movs	r7, r5
 80007b4:	2320      	movs	r3, #32
 80007b6:	0026      	movs	r6, r4
 80007b8:	4097      	lsls	r7, r2
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	40de      	lsrs	r6, r3
 80007be:	003b      	movs	r3, r7
 80007c0:	4333      	orrs	r3, r6
 80007c2:	e7cd      	b.n	8000760 <__udivmoddi4+0x134>

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	024b      	lsls	r3, r1, #9
 80007c8:	0a5a      	lsrs	r2, r3, #9
 80007ca:	4694      	mov	ip, r2
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	0fc9      	lsrs	r1, r1, #31
 80007d0:	46ce      	mov	lr, r9
 80007d2:	4647      	mov	r7, r8
 80007d4:	4689      	mov	r9, r1
 80007d6:	0045      	lsls	r5, r0, #1
 80007d8:	0246      	lsls	r6, r0, #9
 80007da:	0e2d      	lsrs	r5, r5, #24
 80007dc:	0e12      	lsrs	r2, r2, #24
 80007de:	b580      	push	{r7, lr}
 80007e0:	0999      	lsrs	r1, r3, #6
 80007e2:	0a77      	lsrs	r7, r6, #9
 80007e4:	0fc4      	lsrs	r4, r0, #31
 80007e6:	09b6      	lsrs	r6, r6, #6
 80007e8:	1aab      	subs	r3, r5, r2
 80007ea:	454c      	cmp	r4, r9
 80007ec:	d020      	beq.n	8000830 <__aeabi_fadd+0x6c>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dd0c      	ble.n	800080c <__aeabi_fadd+0x48>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d134      	bne.n	8000860 <__aeabi_fadd+0x9c>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d02a      	beq.n	8000850 <__aeabi_fadd+0x8c>
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x3e>
 8000800:	e08f      	b.n	8000922 <__aeabi_fadd+0x15e>
 8000802:	2bff      	cmp	r3, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e0cd      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000808:	0013      	movs	r3, r2
 800080a:	e02f      	b.n	800086c <__aeabi_fadd+0xa8>
 800080c:	2b00      	cmp	r3, #0
 800080e:	d060      	beq.n	80008d2 <__aeabi_fadd+0x10e>
 8000810:	1b53      	subs	r3, r2, r5
 8000812:	2d00      	cmp	r5, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x54>
 8000816:	e0ee      	b.n	80009f6 <__aeabi_fadd+0x232>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x5a>
 800081c:	e13e      	b.n	8000a9c <__aeabi_fadd+0x2d8>
 800081e:	1e5c      	subs	r4, r3, #1
 8000820:	2b01      	cmp	r3, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x62>
 8000824:	e16b      	b.n	8000afe <__aeabi_fadd+0x33a>
 8000826:	2bff      	cmp	r3, #255	@ 0xff
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x68>
 800082a:	e0b9      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 800082c:	0023      	movs	r3, r4
 800082e:	e0e7      	b.n	8000a00 <__aeabi_fadd+0x23c>
 8000830:	2b00      	cmp	r3, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_fadd+0x72>
 8000834:	e0a4      	b.n	8000980 <__aeabi_fadd+0x1bc>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d069      	beq.n	800090e <__aeabi_fadd+0x14a>
 800083a:	2dff      	cmp	r5, #255	@ 0xff
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x7c>
 800083e:	e0b1      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	04d2      	lsls	r2, r2, #19
 8000844:	4311      	orrs	r1, r2
 8000846:	2b1b      	cmp	r3, #27
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e0e9      	b.n	8000a20 <__aeabi_fadd+0x25c>
 800084c:	002b      	movs	r3, r5
 800084e:	3605      	adds	r6, #5
 8000850:	08f7      	lsrs	r7, r6, #3
 8000852:	2bff      	cmp	r3, #255	@ 0xff
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x94>
 8000856:	e0a5      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000858:	027a      	lsls	r2, r7, #9
 800085a:	0a52      	lsrs	r2, r2, #9
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	e030      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000860:	2dff      	cmp	r5, #255	@ 0xff
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0xa2>
 8000864:	e09e      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	04d2      	lsls	r2, r2, #19
 800086a:	4311      	orrs	r1, r2
 800086c:	2001      	movs	r0, #1
 800086e:	2b1b      	cmp	r3, #27
 8000870:	dc08      	bgt.n	8000884 <__aeabi_fadd+0xc0>
 8000872:	0008      	movs	r0, r1
 8000874:	2220      	movs	r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4099      	lsls	r1, r3
 800087c:	000b      	movs	r3, r1
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	4318      	orrs	r0, r3
 8000884:	1a36      	subs	r6, r6, r0
 8000886:	0173      	lsls	r3, r6, #5
 8000888:	d400      	bmi.n	800088c <__aeabi_fadd+0xc8>
 800088a:	e071      	b.n	8000970 <__aeabi_fadd+0x1ac>
 800088c:	01b6      	lsls	r6, r6, #6
 800088e:	09b7      	lsrs	r7, r6, #6
 8000890:	0038      	movs	r0, r7
 8000892:	f7ff fe57 	bl	8000544 <__clzsi2>
 8000896:	003b      	movs	r3, r7
 8000898:	3805      	subs	r0, #5
 800089a:	4083      	lsls	r3, r0
 800089c:	4285      	cmp	r5, r0
 800089e:	dd4d      	ble.n	800093c <__aeabi_fadd+0x178>
 80008a0:	4eb4      	ldr	r6, [pc, #720]	@ (8000b74 <__aeabi_fadd+0x3b0>)
 80008a2:	1a2d      	subs	r5, r5, r0
 80008a4:	401e      	ands	r6, r3
 80008a6:	075a      	lsls	r2, r3, #29
 80008a8:	d068      	beq.n	800097c <__aeabi_fadd+0x1b8>
 80008aa:	220f      	movs	r2, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d064      	beq.n	800097c <__aeabi_fadd+0x1b8>
 80008b2:	3604      	adds	r6, #4
 80008b4:	0173      	lsls	r3, r6, #5
 80008b6:	d561      	bpl.n	800097c <__aeabi_fadd+0x1b8>
 80008b8:	1c68      	adds	r0, r5, #1
 80008ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80008bc:	d154      	bne.n	8000968 <__aeabi_fadd+0x1a4>
 80008be:	20ff      	movs	r0, #255	@ 0xff
 80008c0:	2200      	movs	r2, #0
 80008c2:	05c0      	lsls	r0, r0, #23
 80008c4:	4310      	orrs	r0, r2
 80008c6:	07e4      	lsls	r4, r4, #31
 80008c8:	4320      	orrs	r0, r4
 80008ca:	bcc0      	pop	{r6, r7}
 80008cc:	46b9      	mov	r9, r7
 80008ce:	46b0      	mov	r8, r6
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d2:	22fe      	movs	r2, #254	@ 0xfe
 80008d4:	4690      	mov	r8, r2
 80008d6:	1c68      	adds	r0, r5, #1
 80008d8:	0002      	movs	r2, r0
 80008da:	4640      	mov	r0, r8
 80008dc:	4210      	tst	r0, r2
 80008de:	d16b      	bne.n	80009b8 <__aeabi_fadd+0x1f4>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fadd+0x122>
 80008e4:	e0dd      	b.n	8000aa2 <__aeabi_fadd+0x2de>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x128>
 80008ea:	e102      	b.n	8000af2 <__aeabi_fadd+0x32e>
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d0b3      	beq.n	8000858 <__aeabi_fadd+0x94>
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	1a77      	subs	r7, r6, r1
 80008f4:	04d2      	lsls	r2, r2, #19
 80008f6:	4217      	tst	r7, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x138>
 80008fa:	e136      	b.n	8000b6a <__aeabi_fadd+0x3a6>
 80008fc:	464c      	mov	r4, r9
 80008fe:	1b8e      	subs	r6, r1, r6
 8000900:	d061      	beq.n	80009c6 <__aeabi_fadd+0x202>
 8000902:	2001      	movs	r0, #1
 8000904:	4216      	tst	r6, r2
 8000906:	d130      	bne.n	800096a <__aeabi_fadd+0x1a6>
 8000908:	2300      	movs	r3, #0
 800090a:	08f7      	lsrs	r7, r6, #3
 800090c:	e7a4      	b.n	8000858 <__aeabi_fadd+0x94>
 800090e:	2900      	cmp	r1, #0
 8000910:	d09e      	beq.n	8000850 <__aeabi_fadd+0x8c>
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2b01      	cmp	r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x156>
 8000918:	e0ca      	b.n	8000ab0 <__aeabi_fadd+0x2ec>
 800091a:	2bff      	cmp	r3, #255	@ 0xff
 800091c:	d042      	beq.n	80009a4 <__aeabi_fadd+0x1e0>
 800091e:	0013      	movs	r3, r2
 8000920:	e791      	b.n	8000846 <__aeabi_fadd+0x82>
 8000922:	1a71      	subs	r1, r6, r1
 8000924:	014b      	lsls	r3, r1, #5
 8000926:	d400      	bmi.n	800092a <__aeabi_fadd+0x166>
 8000928:	e0d1      	b.n	8000ace <__aeabi_fadd+0x30a>
 800092a:	018f      	lsls	r7, r1, #6
 800092c:	09bf      	lsrs	r7, r7, #6
 800092e:	0038      	movs	r0, r7
 8000930:	f7ff fe08 	bl	8000544 <__clzsi2>
 8000934:	003b      	movs	r3, r7
 8000936:	3805      	subs	r0, #5
 8000938:	4083      	lsls	r3, r0
 800093a:	2501      	movs	r5, #1
 800093c:	2220      	movs	r2, #32
 800093e:	1b40      	subs	r0, r0, r5
 8000940:	3001      	adds	r0, #1
 8000942:	1a12      	subs	r2, r2, r0
 8000944:	001e      	movs	r6, r3
 8000946:	4093      	lsls	r3, r2
 8000948:	40c6      	lsrs	r6, r0
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	4193      	sbcs	r3, r2
 800094e:	431e      	orrs	r6, r3
 8000950:	d039      	beq.n	80009c6 <__aeabi_fadd+0x202>
 8000952:	0773      	lsls	r3, r6, #29
 8000954:	d100      	bne.n	8000958 <__aeabi_fadd+0x194>
 8000956:	e11b      	b.n	8000b90 <__aeabi_fadd+0x3cc>
 8000958:	230f      	movs	r3, #15
 800095a:	2500      	movs	r5, #0
 800095c:	4033      	ands	r3, r6
 800095e:	2b04      	cmp	r3, #4
 8000960:	d1a7      	bne.n	80008b2 <__aeabi_fadd+0xee>
 8000962:	2001      	movs	r0, #1
 8000964:	0172      	lsls	r2, r6, #5
 8000966:	d57c      	bpl.n	8000a62 <__aeabi_fadd+0x29e>
 8000968:	b2c0      	uxtb	r0, r0
 800096a:	01b2      	lsls	r2, r6, #6
 800096c:	0a52      	lsrs	r2, r2, #9
 800096e:	e7a8      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000970:	0773      	lsls	r3, r6, #29
 8000972:	d003      	beq.n	800097c <__aeabi_fadd+0x1b8>
 8000974:	230f      	movs	r3, #15
 8000976:	4033      	ands	r3, r6
 8000978:	2b04      	cmp	r3, #4
 800097a:	d19a      	bne.n	80008b2 <__aeabi_fadd+0xee>
 800097c:	002b      	movs	r3, r5
 800097e:	e767      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <__aeabi_fadd+0x208>
 8000984:	1b53      	subs	r3, r2, r5
 8000986:	2d00      	cmp	r5, #0
 8000988:	d17b      	bne.n	8000a82 <__aeabi_fadd+0x2be>
 800098a:	2e00      	cmp	r6, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x1cc>
 800098e:	e086      	b.n	8000a9e <__aeabi_fadd+0x2da>
 8000990:	1e5d      	subs	r5, r3, #1
 8000992:	2b01      	cmp	r3, #1
 8000994:	d100      	bne.n	8000998 <__aeabi_fadd+0x1d4>
 8000996:	e08b      	b.n	8000ab0 <__aeabi_fadd+0x2ec>
 8000998:	2bff      	cmp	r3, #255	@ 0xff
 800099a:	d002      	beq.n	80009a2 <__aeabi_fadd+0x1de>
 800099c:	002b      	movs	r3, r5
 800099e:	e075      	b.n	8000a8c <__aeabi_fadd+0x2c8>
 80009a0:	464c      	mov	r4, r9
 80009a2:	4667      	mov	r7, ip
 80009a4:	2f00      	cmp	r7, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x1e6>
 80009a8:	e789      	b.n	80008be <__aeabi_fadd+0xfa>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	433a      	orrs	r2, r7
 80009b0:	0252      	lsls	r2, r2, #9
 80009b2:	20ff      	movs	r0, #255	@ 0xff
 80009b4:	0a52      	lsrs	r2, r2, #9
 80009b6:	e784      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009b8:	1a77      	subs	r7, r6, r1
 80009ba:	017b      	lsls	r3, r7, #5
 80009bc:	d46b      	bmi.n	8000a96 <__aeabi_fadd+0x2d2>
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e765      	b.n	8000890 <__aeabi_fadd+0xcc>
 80009c4:	2400      	movs	r4, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	e77a      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009cc:	22fe      	movs	r2, #254	@ 0xfe
 80009ce:	1c6b      	adds	r3, r5, #1
 80009d0:	421a      	tst	r2, r3
 80009d2:	d149      	bne.n	8000a68 <__aeabi_fadd+0x2a4>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d000      	beq.n	80009da <__aeabi_fadd+0x216>
 80009d8:	e09f      	b.n	8000b1a <__aeabi_fadd+0x356>
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x21c>
 80009de:	e0ba      	b.n	8000b56 <__aeabi_fadd+0x392>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x222>
 80009e4:	e0cf      	b.n	8000b86 <__aeabi_fadd+0x3c2>
 80009e6:	1872      	adds	r2, r6, r1
 80009e8:	0153      	lsls	r3, r2, #5
 80009ea:	d400      	bmi.n	80009ee <__aeabi_fadd+0x22a>
 80009ec:	e0cd      	b.n	8000b8a <__aeabi_fadd+0x3c6>
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	2001      	movs	r0, #1
 80009f2:	0a52      	lsrs	r2, r2, #9
 80009f4:	e765      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009f6:	2aff      	cmp	r2, #255	@ 0xff
 80009f8:	d0d2      	beq.n	80009a0 <__aeabi_fadd+0x1dc>
 80009fa:	2080      	movs	r0, #128	@ 0x80
 80009fc:	04c0      	lsls	r0, r0, #19
 80009fe:	4306      	orrs	r6, r0
 8000a00:	2001      	movs	r0, #1
 8000a02:	2b1b      	cmp	r3, #27
 8000a04:	dc08      	bgt.n	8000a18 <__aeabi_fadd+0x254>
 8000a06:	0030      	movs	r0, r6
 8000a08:	2420      	movs	r4, #32
 8000a0a:	40d8      	lsrs	r0, r3
 8000a0c:	1ae3      	subs	r3, r4, r3
 8000a0e:	409e      	lsls	r6, r3
 8000a10:	0033      	movs	r3, r6
 8000a12:	1e5c      	subs	r4, r3, #1
 8000a14:	41a3      	sbcs	r3, r4
 8000a16:	4318      	orrs	r0, r3
 8000a18:	464c      	mov	r4, r9
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	1a0e      	subs	r6, r1, r0
 8000a1e:	e732      	b.n	8000886 <__aeabi_fadd+0xc2>
 8000a20:	0008      	movs	r0, r1
 8000a22:	2220      	movs	r2, #32
 8000a24:	40d8      	lsrs	r0, r3
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	4099      	lsls	r1, r3
 8000a2a:	000b      	movs	r3, r1
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	4303      	orrs	r3, r0
 8000a32:	18f6      	adds	r6, r6, r3
 8000a34:	0173      	lsls	r3, r6, #5
 8000a36:	d59b      	bpl.n	8000970 <__aeabi_fadd+0x1ac>
 8000a38:	3501      	adds	r5, #1
 8000a3a:	2dff      	cmp	r5, #255	@ 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x27c>
 8000a3e:	e73e      	b.n	80008be <__aeabi_fadd+0xfa>
 8000a40:	2301      	movs	r3, #1
 8000a42:	494d      	ldr	r1, [pc, #308]	@ (8000b78 <__aeabi_fadd+0x3b4>)
 8000a44:	0872      	lsrs	r2, r6, #1
 8000a46:	4033      	ands	r3, r6
 8000a48:	400a      	ands	r2, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	0016      	movs	r6, r2
 8000a4e:	0753      	lsls	r3, r2, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fadd+0x298>
 8000a52:	230f      	movs	r3, #15
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fadd+0x298>
 8000a5a:	e72a      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000a5c:	0173      	lsls	r3, r6, #5
 8000a5e:	d500      	bpl.n	8000a62 <__aeabi_fadd+0x29e>
 8000a60:	e72a      	b.n	80008b8 <__aeabi_fadd+0xf4>
 8000a62:	002b      	movs	r3, r5
 8000a64:	08f7      	lsrs	r7, r6, #3
 8000a66:	e6f7      	b.n	8000858 <__aeabi_fadd+0x94>
 8000a68:	2bff      	cmp	r3, #255	@ 0xff
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e727      	b.n	80008be <__aeabi_fadd+0xfa>
 8000a6e:	1871      	adds	r1, r6, r1
 8000a70:	0849      	lsrs	r1, r1, #1
 8000a72:	074a      	lsls	r2, r1, #29
 8000a74:	d02f      	beq.n	8000ad6 <__aeabi_fadd+0x312>
 8000a76:	220f      	movs	r2, #15
 8000a78:	400a      	ands	r2, r1
 8000a7a:	2a04      	cmp	r2, #4
 8000a7c:	d02b      	beq.n	8000ad6 <__aeabi_fadd+0x312>
 8000a7e:	1d0e      	adds	r6, r1, #4
 8000a80:	e6e6      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000a82:	2aff      	cmp	r2, #255	@ 0xff
 8000a84:	d08d      	beq.n	80009a2 <__aeabi_fadd+0x1de>
 8000a86:	2080      	movs	r0, #128	@ 0x80
 8000a88:	04c0      	lsls	r0, r0, #19
 8000a8a:	4306      	orrs	r6, r0
 8000a8c:	2b1b      	cmp	r3, #27
 8000a8e:	dd24      	ble.n	8000ada <__aeabi_fadd+0x316>
 8000a90:	0013      	movs	r3, r2
 8000a92:	1d4e      	adds	r6, r1, #5
 8000a94:	e6dc      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000a96:	464c      	mov	r4, r9
 8000a98:	1b8f      	subs	r7, r1, r6
 8000a9a:	e6f9      	b.n	8000890 <__aeabi_fadd+0xcc>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	000e      	movs	r6, r1
 8000aa0:	e6d6      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d149      	bne.n	8000b3a <__aeabi_fadd+0x376>
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d068      	beq.n	8000b7c <__aeabi_fadd+0x3b8>
 8000aaa:	4667      	mov	r7, ip
 8000aac:	464c      	mov	r4, r9
 8000aae:	e77c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000ab0:	1870      	adds	r0, r6, r1
 8000ab2:	0143      	lsls	r3, r0, #5
 8000ab4:	d574      	bpl.n	8000ba0 <__aeabi_fadd+0x3dc>
 8000ab6:	4930      	ldr	r1, [pc, #192]	@ (8000b78 <__aeabi_fadd+0x3b4>)
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	4001      	ands	r1, r0
 8000abc:	0743      	lsls	r3, r0, #29
 8000abe:	d009      	beq.n	8000ad4 <__aeabi_fadd+0x310>
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4003      	ands	r3, r0
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d005      	beq.n	8000ad4 <__aeabi_fadd+0x310>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	1d0e      	adds	r6, r1, #4
 8000acc:	e6c0      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	08cf      	lsrs	r7, r1, #3
 8000ad2:	e6c1      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	08cf      	lsrs	r7, r1, #3
 8000ad8:	e6be      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ada:	2520      	movs	r5, #32
 8000adc:	0030      	movs	r0, r6
 8000ade:	40d8      	lsrs	r0, r3
 8000ae0:	1aeb      	subs	r3, r5, r3
 8000ae2:	409e      	lsls	r6, r3
 8000ae4:	0033      	movs	r3, r6
 8000ae6:	1e5d      	subs	r5, r3, #1
 8000ae8:	41ab      	sbcs	r3, r5
 8000aea:	4303      	orrs	r3, r0
 8000aec:	0015      	movs	r5, r2
 8000aee:	185e      	adds	r6, r3, r1
 8000af0:	e7a0      	b.n	8000a34 <__aeabi_fadd+0x270>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fadd+0x334>
 8000af6:	e765      	b.n	80009c4 <__aeabi_fadd+0x200>
 8000af8:	464c      	mov	r4, r9
 8000afa:	4667      	mov	r7, ip
 8000afc:	e6ac      	b.n	8000858 <__aeabi_fadd+0x94>
 8000afe:	1b8f      	subs	r7, r1, r6
 8000b00:	017b      	lsls	r3, r7, #5
 8000b02:	d52e      	bpl.n	8000b62 <__aeabi_fadd+0x39e>
 8000b04:	01bf      	lsls	r7, r7, #6
 8000b06:	09bf      	lsrs	r7, r7, #6
 8000b08:	0038      	movs	r0, r7
 8000b0a:	f7ff fd1b 	bl	8000544 <__clzsi2>
 8000b0e:	003b      	movs	r3, r7
 8000b10:	3805      	subs	r0, #5
 8000b12:	4083      	lsls	r3, r0
 8000b14:	464c      	mov	r4, r9
 8000b16:	3501      	adds	r5, #1
 8000b18:	e710      	b.n	800093c <__aeabi_fadd+0x178>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fadd+0x35c>
 8000b1e:	e740      	b.n	80009a2 <__aeabi_fadd+0x1de>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fadd+0x362>
 8000b24:	e741      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	03db      	lsls	r3, r3, #15
 8000b2a:	429f      	cmp	r7, r3
 8000b2c:	d200      	bcs.n	8000b30 <__aeabi_fadd+0x36c>
 8000b2e:	e73c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	d300      	bcc.n	8000b36 <__aeabi_fadd+0x372>
 8000b34:	e739      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b36:	4667      	mov	r7, ip
 8000b38:	e737      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_fadd+0x37c>
 8000b3e:	e734      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	03db      	lsls	r3, r3, #15
 8000b44:	429f      	cmp	r7, r3
 8000b46:	d200      	bcs.n	8000b4a <__aeabi_fadd+0x386>
 8000b48:	e72f      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b4a:	459c      	cmp	ip, r3
 8000b4c:	d300      	bcc.n	8000b50 <__aeabi_fadd+0x38c>
 8000b4e:	e72c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b50:	464c      	mov	r4, r9
 8000b52:	4667      	mov	r7, ip
 8000b54:	e729      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fadd+0x398>
 8000b5a:	e734      	b.n	80009c6 <__aeabi_fadd+0x202>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	08cf      	lsrs	r7, r1, #3
 8000b60:	e67a      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b62:	464c      	mov	r4, r9
 8000b64:	2301      	movs	r3, #1
 8000b66:	08ff      	lsrs	r7, r7, #3
 8000b68:	e676      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fadd+0x3ac>
 8000b6e:	e729      	b.n	80009c4 <__aeabi_fadd+0x200>
 8000b70:	08ff      	lsrs	r7, r7, #3
 8000b72:	e671      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b74:	fbffffff 	.word	0xfbffffff
 8000b78:	7dffffff 	.word	0x7dffffff
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	2400      	movs	r4, #0
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	03d2      	lsls	r2, r2, #15
 8000b84:	e69d      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000b86:	2300      	movs	r3, #0
 8000b88:	e666      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	08d7      	lsrs	r7, r2, #3
 8000b8e:	e663      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b90:	2001      	movs	r0, #1
 8000b92:	0172      	lsls	r2, r6, #5
 8000b94:	d500      	bpl.n	8000b98 <__aeabi_fadd+0x3d4>
 8000b96:	e6e7      	b.n	8000968 <__aeabi_fadd+0x1a4>
 8000b98:	0031      	movs	r1, r6
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	08cf      	lsrs	r7, r1, #3
 8000b9e:	e65b      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	08c7      	lsrs	r7, r0, #3
 8000ba4:	e658      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ba6:	46c0      	nop			@ (mov r8, r8)

08000ba8 <__aeabi_fdiv>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	4646      	mov	r6, r8
 8000bac:	464f      	mov	r7, r9
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	b5c0      	push	{r6, r7, lr}
 8000bb4:	0fc3      	lsrs	r3, r0, #31
 8000bb6:	0047      	lsls	r7, r0, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	1c0e      	adds	r6, r1, #0
 8000bbc:	0a6d      	lsrs	r5, r5, #9
 8000bbe:	0e3f      	lsrs	r7, r7, #24
 8000bc0:	d05b      	beq.n	8000c7a <__aeabi_fdiv+0xd2>
 8000bc2:	2fff      	cmp	r7, #255	@ 0xff
 8000bc4:	d021      	beq.n	8000c0a <__aeabi_fdiv+0x62>
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	00ed      	lsls	r5, r5, #3
 8000bca:	04db      	lsls	r3, r3, #19
 8000bcc:	431d      	orrs	r5, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	3f7f      	subs	r7, #127	@ 0x7f
 8000bd6:	0274      	lsls	r4, r6, #9
 8000bd8:	0073      	lsls	r3, r6, #1
 8000bda:	0a64      	lsrs	r4, r4, #9
 8000bdc:	0e1b      	lsrs	r3, r3, #24
 8000bde:	0ff6      	lsrs	r6, r6, #31
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d020      	beq.n	8000c26 <__aeabi_fdiv+0x7e>
 8000be4:	2bff      	cmp	r3, #255	@ 0xff
 8000be6:	d043      	beq.n	8000c70 <__aeabi_fdiv+0xc8>
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	2000      	movs	r0, #0
 8000bec:	00e4      	lsls	r4, r4, #3
 8000bee:	04d2      	lsls	r2, r2, #19
 8000bf0:	4314      	orrs	r4, r2
 8000bf2:	3b7f      	subs	r3, #127	@ 0x7f
 8000bf4:	4642      	mov	r2, r8
 8000bf6:	1aff      	subs	r7, r7, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4072      	eors	r2, r6
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d900      	bls.n	8000c02 <__aeabi_fdiv+0x5a>
 8000c00:	e09d      	b.n	8000d3e <__aeabi_fdiv+0x196>
 8000c02:	4971      	ldr	r1, [pc, #452]	@ (8000dc8 <__aeabi_fdiv+0x220>)
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	58cb      	ldr	r3, [r1, r3]
 8000c08:	469f      	mov	pc, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d15a      	bne.n	8000cc4 <__aeabi_fdiv+0x11c>
 8000c0e:	2308      	movs	r3, #8
 8000c10:	4699      	mov	r9, r3
 8000c12:	3b06      	subs	r3, #6
 8000c14:	0274      	lsls	r4, r6, #9
 8000c16:	469a      	mov	sl, r3
 8000c18:	0073      	lsls	r3, r6, #1
 8000c1a:	27ff      	movs	r7, #255	@ 0xff
 8000c1c:	0a64      	lsrs	r4, r4, #9
 8000c1e:	0e1b      	lsrs	r3, r3, #24
 8000c20:	0ff6      	lsrs	r6, r6, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1de      	bne.n	8000be4 <__aeabi_fdiv+0x3c>
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	d13b      	bne.n	8000ca2 <__aeabi_fdiv+0xfa>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4072      	eors	r2, r6
 8000c32:	4319      	orrs	r1, r3
 8000c34:	290e      	cmp	r1, #14
 8000c36:	d818      	bhi.n	8000c6a <__aeabi_fdiv+0xc2>
 8000c38:	4864      	ldr	r0, [pc, #400]	@ (8000dcc <__aeabi_fdiv+0x224>)
 8000c3a:	0089      	lsls	r1, r1, #2
 8000c3c:	5841      	ldr	r1, [r0, r1]
 8000c3e:	468f      	mov	pc, r1
 8000c40:	4653      	mov	r3, sl
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fdiv+0xa0>
 8000c46:	e0b8      	b.n	8000dba <__aeabi_fdiv+0x212>
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d06e      	beq.n	8000d2a <__aeabi_fdiv+0x182>
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	002c      	movs	r4, r5
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d140      	bne.n	8000cd6 <__aeabi_fdiv+0x12e>
 8000c54:	2000      	movs	r0, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	05c0      	lsls	r0, r0, #23
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	07d2      	lsls	r2, r2, #31
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	bce0      	pop	{r5, r6, r7}
 8000c62:	46ba      	mov	sl, r7
 8000c64:	46b1      	mov	r9, r6
 8000c66:	46a8      	mov	r8, r5
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	20ff      	movs	r0, #255	@ 0xff
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	e7f3      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d120      	bne.n	8000cb6 <__aeabi_fdiv+0x10e>
 8000c74:	2302      	movs	r3, #2
 8000c76:	3fff      	subs	r7, #255	@ 0xff
 8000c78:	e7d8      	b.n	8000c2c <__aeabi_fdiv+0x84>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d105      	bne.n	8000c8a <__aeabi_fdiv+0xe2>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	4699      	mov	r9, r3
 8000c82:	3b03      	subs	r3, #3
 8000c84:	2700      	movs	r7, #0
 8000c86:	469a      	mov	sl, r3
 8000c88:	e7a5      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000c8a:	0028      	movs	r0, r5
 8000c8c:	f7ff fc5a 	bl	8000544 <__clzsi2>
 8000c90:	2776      	movs	r7, #118	@ 0x76
 8000c92:	1f43      	subs	r3, r0, #5
 8000c94:	409d      	lsls	r5, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	427f      	negs	r7, r7
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	1a3f      	subs	r7, r7, r0
 8000ca0:	e799      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fc4e 	bl	8000544 <__clzsi2>
 8000ca8:	1f43      	subs	r3, r0, #5
 8000caa:	409c      	lsls	r4, r3
 8000cac:	2376      	movs	r3, #118	@ 0x76
 8000cae:	425b      	negs	r3, r3
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e79e      	b.n	8000bf4 <__aeabi_fdiv+0x4c>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	464a      	mov	r2, r9
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	4691      	mov	r9, r2
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	33fc      	adds	r3, #252	@ 0xfc
 8000cc2:	e797      	b.n	8000bf4 <__aeabi_fdiv+0x4c>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	3b09      	subs	r3, #9
 8000cca:	27ff      	movs	r7, #255	@ 0xff
 8000ccc:	469a      	mov	sl, r3
 8000cce:	e782      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000cd0:	2803      	cmp	r0, #3
 8000cd2:	d02c      	beq.n	8000d2e <__aeabi_fdiv+0x186>
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0038      	movs	r0, r7
 8000cd8:	307f      	adds	r0, #127	@ 0x7f
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dd47      	ble.n	8000d6e <__aeabi_fdiv+0x1c6>
 8000cde:	0763      	lsls	r3, r4, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fdiv+0x144>
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4023      	ands	r3, r4
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fdiv+0x144>
 8000cea:	3404      	adds	r4, #4
 8000cec:	0123      	lsls	r3, r4, #4
 8000cee:	d503      	bpl.n	8000cf8 <__aeabi_fdiv+0x150>
 8000cf0:	0038      	movs	r0, r7
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <__aeabi_fdiv+0x228>)
 8000cf4:	3080      	adds	r0, #128	@ 0x80
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	28fe      	cmp	r0, #254	@ 0xfe
 8000cfa:	dcb6      	bgt.n	8000c6a <__aeabi_fdiv+0xc2>
 8000cfc:	01a4      	lsls	r4, r4, #6
 8000cfe:	0a64      	lsrs	r4, r4, #9
 8000d00:	b2c0      	uxtb	r0, r0
 8000d02:	e7a9      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d04:	2480      	movs	r4, #128	@ 0x80
 8000d06:	2200      	movs	r2, #0
 8000d08:	20ff      	movs	r0, #255	@ 0xff
 8000d0a:	03e4      	lsls	r4, r4, #15
 8000d0c:	e7a4      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d0e:	2380      	movs	r3, #128	@ 0x80
 8000d10:	03db      	lsls	r3, r3, #15
 8000d12:	421d      	tst	r5, r3
 8000d14:	d001      	beq.n	8000d1a <__aeabi_fdiv+0x172>
 8000d16:	421c      	tst	r4, r3
 8000d18:	d00b      	beq.n	8000d32 <__aeabi_fdiv+0x18a>
 8000d1a:	2480      	movs	r4, #128	@ 0x80
 8000d1c:	03e4      	lsls	r4, r4, #15
 8000d1e:	432c      	orrs	r4, r5
 8000d20:	0264      	lsls	r4, r4, #9
 8000d22:	4642      	mov	r2, r8
 8000d24:	20ff      	movs	r0, #255	@ 0xff
 8000d26:	0a64      	lsrs	r4, r4, #9
 8000d28:	e796      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d2a:	4646      	mov	r6, r8
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	03db      	lsls	r3, r3, #15
 8000d32:	431c      	orrs	r4, r3
 8000d34:	0264      	lsls	r4, r4, #9
 8000d36:	0032      	movs	r2, r6
 8000d38:	20ff      	movs	r0, #255	@ 0xff
 8000d3a:	0a64      	lsrs	r4, r4, #9
 8000d3c:	e78c      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d3e:	016d      	lsls	r5, r5, #5
 8000d40:	0160      	lsls	r0, r4, #5
 8000d42:	4285      	cmp	r5, r0
 8000d44:	d22d      	bcs.n	8000da2 <__aeabi_fdiv+0x1fa>
 8000d46:	231b      	movs	r3, #27
 8000d48:	2400      	movs	r4, #0
 8000d4a:	3f01      	subs	r7, #1
 8000d4c:	2601      	movs	r6, #1
 8000d4e:	0029      	movs	r1, r5
 8000d50:	0064      	lsls	r4, r4, #1
 8000d52:	006d      	lsls	r5, r5, #1
 8000d54:	2900      	cmp	r1, #0
 8000d56:	db01      	blt.n	8000d5c <__aeabi_fdiv+0x1b4>
 8000d58:	4285      	cmp	r5, r0
 8000d5a:	d301      	bcc.n	8000d60 <__aeabi_fdiv+0x1b8>
 8000d5c:	1a2d      	subs	r5, r5, r0
 8000d5e:	4334      	orrs	r4, r6
 8000d60:	3b01      	subs	r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f3      	bne.n	8000d4e <__aeabi_fdiv+0x1a6>
 8000d66:	1e6b      	subs	r3, r5, #1
 8000d68:	419d      	sbcs	r5, r3
 8000d6a:	432c      	orrs	r4, r5
 8000d6c:	e7b3      	b.n	8000cd6 <__aeabi_fdiv+0x12e>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	1a1b      	subs	r3, r3, r0
 8000d72:	2b1b      	cmp	r3, #27
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_fdiv+0x1d0>
 8000d76:	e76d      	b.n	8000c54 <__aeabi_fdiv+0xac>
 8000d78:	0021      	movs	r1, r4
 8000d7a:	379e      	adds	r7, #158	@ 0x9e
 8000d7c:	40d9      	lsrs	r1, r3
 8000d7e:	40bc      	lsls	r4, r7
 8000d80:	000b      	movs	r3, r1
 8000d82:	1e61      	subs	r1, r4, #1
 8000d84:	418c      	sbcs	r4, r1
 8000d86:	4323      	orrs	r3, r4
 8000d88:	0759      	lsls	r1, r3, #29
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_fdiv+0x1ee>
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	4019      	ands	r1, r3
 8000d90:	2904      	cmp	r1, #4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fdiv+0x1ee>
 8000d94:	3304      	adds	r3, #4
 8000d96:	0159      	lsls	r1, r3, #5
 8000d98:	d413      	bmi.n	8000dc2 <__aeabi_fdiv+0x21a>
 8000d9a:	019b      	lsls	r3, r3, #6
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	0a5c      	lsrs	r4, r3, #9
 8000da0:	e75a      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000da2:	231a      	movs	r3, #26
 8000da4:	2401      	movs	r4, #1
 8000da6:	1a2d      	subs	r5, r5, r0
 8000da8:	e7d0      	b.n	8000d4c <__aeabi_fdiv+0x1a4>
 8000daa:	1e98      	subs	r0, r3, #2
 8000dac:	4243      	negs	r3, r0
 8000dae:	4158      	adcs	r0, r3
 8000db0:	4240      	negs	r0, r0
 8000db2:	0032      	movs	r2, r6
 8000db4:	2400      	movs	r4, #0
 8000db6:	b2c0      	uxtb	r0, r0
 8000db8:	e74e      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dba:	4642      	mov	r2, r8
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	e74a      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	e747      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dc8:	0801ca9c 	.word	0x0801ca9c
 8000dcc:	0801cadc 	.word	0x0801cadc
 8000dd0:	f7ffffff 	.word	0xf7ffffff

08000dd4 <__eqsf2>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	0042      	lsls	r2, r0, #1
 8000dd8:	024e      	lsls	r6, r1, #9
 8000dda:	004c      	lsls	r4, r1, #1
 8000ddc:	0245      	lsls	r5, r0, #9
 8000dde:	0a6d      	lsrs	r5, r5, #9
 8000de0:	0e12      	lsrs	r2, r2, #24
 8000de2:	0fc3      	lsrs	r3, r0, #31
 8000de4:	0a76      	lsrs	r6, r6, #9
 8000de6:	0e24      	lsrs	r4, r4, #24
 8000de8:	0fc9      	lsrs	r1, r1, #31
 8000dea:	2aff      	cmp	r2, #255	@ 0xff
 8000dec:	d010      	beq.n	8000e10 <__eqsf2+0x3c>
 8000dee:	2cff      	cmp	r4, #255	@ 0xff
 8000df0:	d00c      	beq.n	8000e0c <__eqsf2+0x38>
 8000df2:	2001      	movs	r0, #1
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	d10a      	bne.n	8000e0e <__eqsf2+0x3a>
 8000df8:	42b5      	cmp	r5, r6
 8000dfa:	d108      	bne.n	8000e0e <__eqsf2+0x3a>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d00f      	beq.n	8000e20 <__eqsf2+0x4c>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d104      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e04:	0028      	movs	r0, r5
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
 8000e0a:	e000      	b.n	8000e0e <__eqsf2+0x3a>
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	2001      	movs	r0, #1
 8000e12:	2cff      	cmp	r4, #255	@ 0xff
 8000e14:	d1fb      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e16:	4335      	orrs	r5, r6
 8000e18:	d1f9      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e1a:	404b      	eors	r3, r1
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	e7f6      	b.n	8000e0e <__eqsf2+0x3a>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7f4      	b.n	8000e0e <__eqsf2+0x3a>

08000e24 <__gesf2>:
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	0042      	lsls	r2, r0, #1
 8000e28:	0244      	lsls	r4, r0, #9
 8000e2a:	024d      	lsls	r5, r1, #9
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0048      	lsls	r0, r1, #1
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	0a6d      	lsrs	r5, r5, #9
 8000e36:	0e00      	lsrs	r0, r0, #24
 8000e38:	0fc9      	lsrs	r1, r1, #31
 8000e3a:	2aff      	cmp	r2, #255	@ 0xff
 8000e3c:	d018      	beq.n	8000e70 <__gesf2+0x4c>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d00a      	beq.n	8000e58 <__gesf2+0x34>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d11e      	bne.n	8000e84 <__gesf2+0x60>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d10a      	bne.n	8000e60 <__gesf2+0x3c>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d029      	beq.n	8000ea2 <__gesf2+0x7e>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d12d      	bne.n	8000eae <__gesf2+0x8a>
 8000e52:	0048      	lsls	r0, r1, #1
 8000e54:	3801      	subs	r0, #1
 8000e56:	bd30      	pop	{r4, r5, pc}
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d125      	bne.n	8000ea8 <__gesf2+0x84>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d101      	bne.n	8000e64 <__gesf2+0x40>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d0f6      	beq.n	8000e52 <__gesf2+0x2e>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d019      	beq.n	8000e9c <__gesf2+0x78>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	4318      	orrs	r0, r3
 8000e6e:	e7f2      	b.n	8000e56 <__gesf2+0x32>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d119      	bne.n	8000ea8 <__gesf2+0x84>
 8000e74:	28ff      	cmp	r0, #255	@ 0xff
 8000e76:	d1f7      	bne.n	8000e68 <__gesf2+0x44>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d115      	bne.n	8000ea8 <__gesf2+0x84>
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d1f2      	bne.n	8000e68 <__gesf2+0x44>
 8000e82:	e7e8      	b.n	8000e56 <__gesf2+0x32>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d0ef      	beq.n	8000e68 <__gesf2+0x44>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d1ed      	bne.n	8000e68 <__gesf2+0x44>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	dceb      	bgt.n	8000e68 <__gesf2+0x44>
 8000e90:	db04      	blt.n	8000e9c <__gesf2+0x78>
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	d8e8      	bhi.n	8000e68 <__gesf2+0x44>
 8000e96:	2000      	movs	r0, #0
 8000e98:	42ac      	cmp	r4, r5
 8000e9a:	d2dc      	bcs.n	8000e56 <__gesf2+0x32>
 8000e9c:	0058      	lsls	r0, r3, #1
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7d9      	b.n	8000e56 <__gesf2+0x32>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0d7      	beq.n	8000e56 <__gesf2+0x32>
 8000ea6:	e7df      	b.n	8000e68 <__gesf2+0x44>
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	4240      	negs	r0, r0
 8000eac:	e7d3      	b.n	8000e56 <__gesf2+0x32>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d1da      	bne.n	8000e68 <__gesf2+0x44>
 8000eb2:	e7ee      	b.n	8000e92 <__gesf2+0x6e>

08000eb4 <__lesf2>:
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	0042      	lsls	r2, r0, #1
 8000eb8:	0244      	lsls	r4, r0, #9
 8000eba:	024d      	lsls	r5, r1, #9
 8000ebc:	0fc3      	lsrs	r3, r0, #31
 8000ebe:	0048      	lsls	r0, r1, #1
 8000ec0:	0a64      	lsrs	r4, r4, #9
 8000ec2:	0e12      	lsrs	r2, r2, #24
 8000ec4:	0a6d      	lsrs	r5, r5, #9
 8000ec6:	0e00      	lsrs	r0, r0, #24
 8000ec8:	0fc9      	lsrs	r1, r1, #31
 8000eca:	2aff      	cmp	r2, #255	@ 0xff
 8000ecc:	d017      	beq.n	8000efe <__lesf2+0x4a>
 8000ece:	28ff      	cmp	r0, #255	@ 0xff
 8000ed0:	d00a      	beq.n	8000ee8 <__lesf2+0x34>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d11b      	bne.n	8000f0e <__lesf2+0x5a>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d10a      	bne.n	8000ef0 <__lesf2+0x3c>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d01d      	beq.n	8000f1a <__lesf2+0x66>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d12d      	bne.n	8000f3e <__lesf2+0x8a>
 8000ee2:	0048      	lsls	r0, r1, #1
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e011      	b.n	8000f0c <__lesf2+0x58>
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d10e      	bne.n	8000f0a <__lesf2+0x56>
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d101      	bne.n	8000ef4 <__lesf2+0x40>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0f6      	beq.n	8000ee2 <__lesf2+0x2e>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d10c      	bne.n	8000f12 <__lesf2+0x5e>
 8000ef8:	0058      	lsls	r0, r3, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e006      	b.n	8000f0c <__lesf2+0x58>
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d103      	bne.n	8000f0a <__lesf2+0x56>
 8000f02:	28ff      	cmp	r0, #255	@ 0xff
 8000f04:	d105      	bne.n	8000f12 <__lesf2+0x5e>
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d015      	beq.n	8000f36 <__lesf2+0x82>
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	bd30      	pop	{r4, r5, pc}
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d106      	bne.n	8000f20 <__lesf2+0x6c>
 8000f12:	2001      	movs	r0, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	4318      	orrs	r0, r3
 8000f18:	e7f8      	b.n	8000f0c <__lesf2+0x58>
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d0f6      	beq.n	8000f0c <__lesf2+0x58>
 8000f1e:	e7f8      	b.n	8000f12 <__lesf2+0x5e>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d1f6      	bne.n	8000f12 <__lesf2+0x5e>
 8000f24:	4282      	cmp	r2, r0
 8000f26:	dcf4      	bgt.n	8000f12 <__lesf2+0x5e>
 8000f28:	dbe6      	blt.n	8000ef8 <__lesf2+0x44>
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	d8f1      	bhi.n	8000f12 <__lesf2+0x5e>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	42ac      	cmp	r4, r5
 8000f32:	d2eb      	bcs.n	8000f0c <__lesf2+0x58>
 8000f34:	e7e0      	b.n	8000ef8 <__lesf2+0x44>
 8000f36:	2000      	movs	r0, #0
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d1ea      	bne.n	8000f12 <__lesf2+0x5e>
 8000f3c:	e7e6      	b.n	8000f0c <__lesf2+0x58>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d1e7      	bne.n	8000f12 <__lesf2+0x5e>
 8000f42:	e7f2      	b.n	8000f2a <__lesf2+0x76>

08000f44 <__aeabi_fmul>:
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	464f      	mov	r7, r9
 8000f48:	4646      	mov	r6, r8
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	0044      	lsls	r4, r0, #1
 8000f4e:	b5c0      	push	{r6, r7, lr}
 8000f50:	0246      	lsls	r6, r0, #9
 8000f52:	1c0f      	adds	r7, r1, #0
 8000f54:	0a76      	lsrs	r6, r6, #9
 8000f56:	0e24      	lsrs	r4, r4, #24
 8000f58:	0fc5      	lsrs	r5, r0, #31
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fmul+0x1c>
 8000f5e:	e0da      	b.n	8001116 <__aeabi_fmul+0x1d2>
 8000f60:	2cff      	cmp	r4, #255	@ 0xff
 8000f62:	d074      	beq.n	800104e <__aeabi_fmul+0x10a>
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	00f6      	lsls	r6, r6, #3
 8000f68:	04db      	lsls	r3, r3, #19
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4699      	mov	r9, r3
 8000f70:	469a      	mov	sl, r3
 8000f72:	3c7f      	subs	r4, #127	@ 0x7f
 8000f74:	027b      	lsls	r3, r7, #9
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	4698      	mov	r8, r3
 8000f7a:	007b      	lsls	r3, r7, #1
 8000f7c:	0e1b      	lsrs	r3, r3, #24
 8000f7e:	0fff      	lsrs	r7, r7, #31
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d074      	beq.n	800106e <__aeabi_fmul+0x12a>
 8000f84:	2bff      	cmp	r3, #255	@ 0xff
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fmul+0x46>
 8000f88:	e08e      	b.n	80010a8 <__aeabi_fmul+0x164>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	00d2      	lsls	r2, r2, #3
 8000f90:	04c9      	lsls	r1, r1, #19
 8000f92:	4311      	orrs	r1, r2
 8000f94:	3b7f      	subs	r3, #127	@ 0x7f
 8000f96:	002a      	movs	r2, r5
 8000f98:	18e4      	adds	r4, r4, r3
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	407a      	eors	r2, r7
 8000f9e:	4688      	mov	r8, r1
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	dc75      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	2000      	movs	r0, #0
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dd0f      	ble.n	8000fce <__aeabi_fmul+0x8a>
 8000fae:	4649      	mov	r1, r9
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	21a6      	movs	r1, #166	@ 0xa6
 8000fb6:	00c9      	lsls	r1, r1, #3
 8000fb8:	420b      	tst	r3, r1
 8000fba:	d169      	bne.n	8001090 <__aeabi_fmul+0x14c>
 8000fbc:	2190      	movs	r1, #144	@ 0x90
 8000fbe:	0089      	lsls	r1, r1, #2
 8000fc0:	420b      	tst	r3, r1
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0x82>
 8000fc4:	e100      	b.n	80011c8 <__aeabi_fmul+0x284>
 8000fc6:	2188      	movs	r1, #136	@ 0x88
 8000fc8:	4219      	tst	r1, r3
 8000fca:	d000      	beq.n	8000fce <__aeabi_fmul+0x8a>
 8000fcc:	e0f5      	b.n	80011ba <__aeabi_fmul+0x276>
 8000fce:	4641      	mov	r1, r8
 8000fd0:	0409      	lsls	r1, r1, #16
 8000fd2:	0c09      	lsrs	r1, r1, #16
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	0008      	movs	r0, r1
 8000fd8:	0c35      	lsrs	r5, r6, #16
 8000fda:	0436      	lsls	r6, r6, #16
 8000fdc:	0c1b      	lsrs	r3, r3, #16
 8000fde:	0c36      	lsrs	r6, r6, #16
 8000fe0:	4370      	muls	r0, r6
 8000fe2:	4369      	muls	r1, r5
 8000fe4:	435e      	muls	r6, r3
 8000fe6:	435d      	muls	r5, r3
 8000fe8:	1876      	adds	r6, r6, r1
 8000fea:	0c03      	lsrs	r3, r0, #16
 8000fec:	199b      	adds	r3, r3, r6
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d903      	bls.n	8000ffa <__aeabi_fmul+0xb6>
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	0249      	lsls	r1, r1, #9
 8000ff6:	468c      	mov	ip, r1
 8000ff8:	4465      	add	r5, ip
 8000ffa:	0400      	lsls	r0, r0, #16
 8000ffc:	0419      	lsls	r1, r3, #16
 8000ffe:	0c00      	lsrs	r0, r0, #16
 8001000:	1809      	adds	r1, r1, r0
 8001002:	018e      	lsls	r6, r1, #6
 8001004:	1e70      	subs	r0, r6, #1
 8001006:	4186      	sbcs	r6, r0
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	0e89      	lsrs	r1, r1, #26
 800100c:	195b      	adds	r3, r3, r5
 800100e:	430e      	orrs	r6, r1
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	431e      	orrs	r6, r3
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	d46c      	bmi.n	80010f2 <__aeabi_fmul+0x1ae>
 8001018:	0023      	movs	r3, r4
 800101a:	337f      	adds	r3, #127	@ 0x7f
 800101c:	2b00      	cmp	r3, #0
 800101e:	dc00      	bgt.n	8001022 <__aeabi_fmul+0xde>
 8001020:	e0b1      	b.n	8001186 <__aeabi_fmul+0x242>
 8001022:	0015      	movs	r5, r2
 8001024:	0771      	lsls	r1, r6, #29
 8001026:	d00b      	beq.n	8001040 <__aeabi_fmul+0xfc>
 8001028:	200f      	movs	r0, #15
 800102a:	0021      	movs	r1, r4
 800102c:	4030      	ands	r0, r6
 800102e:	2804      	cmp	r0, #4
 8001030:	d006      	beq.n	8001040 <__aeabi_fmul+0xfc>
 8001032:	3604      	adds	r6, #4
 8001034:	0132      	lsls	r2, r6, #4
 8001036:	d503      	bpl.n	8001040 <__aeabi_fmul+0xfc>
 8001038:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <__aeabi_fmul+0x2b0>)
 800103a:	401e      	ands	r6, r3
 800103c:	000b      	movs	r3, r1
 800103e:	3380      	adds	r3, #128	@ 0x80
 8001040:	2bfe      	cmp	r3, #254	@ 0xfe
 8001042:	dd00      	ble.n	8001046 <__aeabi_fmul+0x102>
 8001044:	e0bd      	b.n	80011c2 <__aeabi_fmul+0x27e>
 8001046:	01b2      	lsls	r2, r6, #6
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	b2db      	uxtb	r3, r3
 800104c:	e048      	b.n	80010e0 <__aeabi_fmul+0x19c>
 800104e:	2e00      	cmp	r6, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_fmul+0x110>
 8001052:	e092      	b.n	800117a <__aeabi_fmul+0x236>
 8001054:	2308      	movs	r3, #8
 8001056:	4699      	mov	r9, r3
 8001058:	3b06      	subs	r3, #6
 800105a:	469a      	mov	sl, r3
 800105c:	027b      	lsls	r3, r7, #9
 800105e:	0a5b      	lsrs	r3, r3, #9
 8001060:	4698      	mov	r8, r3
 8001062:	007b      	lsls	r3, r7, #1
 8001064:	24ff      	movs	r4, #255	@ 0xff
 8001066:	0e1b      	lsrs	r3, r3, #24
 8001068:	0fff      	lsrs	r7, r7, #31
 800106a:	2b00      	cmp	r3, #0
 800106c:	d18a      	bne.n	8000f84 <__aeabi_fmul+0x40>
 800106e:	4642      	mov	r2, r8
 8001070:	2a00      	cmp	r2, #0
 8001072:	d164      	bne.n	800113e <__aeabi_fmul+0x1fa>
 8001074:	4649      	mov	r1, r9
 8001076:	3201      	adds	r2, #1
 8001078:	4311      	orrs	r1, r2
 800107a:	4689      	mov	r9, r1
 800107c:	290a      	cmp	r1, #10
 800107e:	dc08      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 8001080:	407d      	eors	r5, r7
 8001082:	2001      	movs	r0, #1
 8001084:	b2ea      	uxtb	r2, r5
 8001086:	2902      	cmp	r1, #2
 8001088:	dc91      	bgt.n	8000fae <__aeabi_fmul+0x6a>
 800108a:	0015      	movs	r5, r2
 800108c:	2200      	movs	r2, #0
 800108e:	e027      	b.n	80010e0 <__aeabi_fmul+0x19c>
 8001090:	0015      	movs	r5, r2
 8001092:	4653      	mov	r3, sl
 8001094:	2b02      	cmp	r3, #2
 8001096:	d100      	bne.n	800109a <__aeabi_fmul+0x156>
 8001098:	e093      	b.n	80011c2 <__aeabi_fmul+0x27e>
 800109a:	2b03      	cmp	r3, #3
 800109c:	d01a      	beq.n	80010d4 <__aeabi_fmul+0x190>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12c      	bne.n	80010fc <__aeabi_fmul+0x1b8>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2200      	movs	r2, #0
 80010a6:	e01b      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80010a8:	4643      	mov	r3, r8
 80010aa:	34ff      	adds	r4, #255	@ 0xff
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d055      	beq.n	800115c <__aeabi_fmul+0x218>
 80010b0:	2103      	movs	r1, #3
 80010b2:	464b      	mov	r3, r9
 80010b4:	430b      	orrs	r3, r1
 80010b6:	0019      	movs	r1, r3
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	dc00      	bgt.n	80010be <__aeabi_fmul+0x17a>
 80010bc:	e092      	b.n	80011e4 <__aeabi_fmul+0x2a0>
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fmul+0x180>
 80010c2:	e08c      	b.n	80011de <__aeabi_fmul+0x29a>
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	03d2      	lsls	r2, r2, #15
 80010c8:	4216      	tst	r6, r2
 80010ca:	d003      	beq.n	80010d4 <__aeabi_fmul+0x190>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4213      	tst	r3, r2
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fmul+0x190>
 80010d2:	e07d      	b.n	80011d0 <__aeabi_fmul+0x28c>
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	03d2      	lsls	r2, r2, #15
 80010d8:	4332      	orrs	r2, r6
 80010da:	0252      	lsls	r2, r2, #9
 80010dc:	0a52      	lsrs	r2, r2, #9
 80010de:	23ff      	movs	r3, #255	@ 0xff
 80010e0:	05d8      	lsls	r0, r3, #23
 80010e2:	07ed      	lsls	r5, r5, #31
 80010e4:	4310      	orrs	r0, r2
 80010e6:	4328      	orrs	r0, r5
 80010e8:	bce0      	pop	{r5, r6, r7}
 80010ea:	46ba      	mov	sl, r7
 80010ec:	46b1      	mov	r9, r6
 80010ee:	46a8      	mov	r8, r5
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f2:	2301      	movs	r3, #1
 80010f4:	0015      	movs	r5, r2
 80010f6:	0871      	lsrs	r1, r6, #1
 80010f8:	401e      	ands	r6, r3
 80010fa:	430e      	orrs	r6, r1
 80010fc:	0023      	movs	r3, r4
 80010fe:	3380      	adds	r3, #128	@ 0x80
 8001100:	1c61      	adds	r1, r4, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	dd41      	ble.n	800118a <__aeabi_fmul+0x246>
 8001106:	0772      	lsls	r2, r6, #29
 8001108:	d094      	beq.n	8001034 <__aeabi_fmul+0xf0>
 800110a:	220f      	movs	r2, #15
 800110c:	4032      	ands	r2, r6
 800110e:	2a04      	cmp	r2, #4
 8001110:	d000      	beq.n	8001114 <__aeabi_fmul+0x1d0>
 8001112:	e78e      	b.n	8001032 <__aeabi_fmul+0xee>
 8001114:	e78e      	b.n	8001034 <__aeabi_fmul+0xf0>
 8001116:	2e00      	cmp	r6, #0
 8001118:	d105      	bne.n	8001126 <__aeabi_fmul+0x1e2>
 800111a:	2304      	movs	r3, #4
 800111c:	4699      	mov	r9, r3
 800111e:	3b03      	subs	r3, #3
 8001120:	2400      	movs	r4, #0
 8001122:	469a      	mov	sl, r3
 8001124:	e726      	b.n	8000f74 <__aeabi_fmul+0x30>
 8001126:	0030      	movs	r0, r6
 8001128:	f7ff fa0c 	bl	8000544 <__clzsi2>
 800112c:	2476      	movs	r4, #118	@ 0x76
 800112e:	1f43      	subs	r3, r0, #5
 8001130:	409e      	lsls	r6, r3
 8001132:	2300      	movs	r3, #0
 8001134:	4264      	negs	r4, r4
 8001136:	4699      	mov	r9, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a24      	subs	r4, r4, r0
 800113c:	e71a      	b.n	8000f74 <__aeabi_fmul+0x30>
 800113e:	4640      	mov	r0, r8
 8001140:	f7ff fa00 	bl	8000544 <__clzsi2>
 8001144:	464b      	mov	r3, r9
 8001146:	1a24      	subs	r4, r4, r0
 8001148:	3c76      	subs	r4, #118	@ 0x76
 800114a:	2b0a      	cmp	r3, #10
 800114c:	dca1      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 800114e:	4643      	mov	r3, r8
 8001150:	3805      	subs	r0, #5
 8001152:	4083      	lsls	r3, r0
 8001154:	407d      	eors	r5, r7
 8001156:	4698      	mov	r8, r3
 8001158:	b2ea      	uxtb	r2, r5
 800115a:	e724      	b.n	8000fa6 <__aeabi_fmul+0x62>
 800115c:	464a      	mov	r2, r9
 800115e:	3302      	adds	r3, #2
 8001160:	4313      	orrs	r3, r2
 8001162:	002a      	movs	r2, r5
 8001164:	407a      	eors	r2, r7
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	2b0a      	cmp	r3, #10
 800116a:	dc92      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 800116c:	4649      	mov	r1, r9
 800116e:	0015      	movs	r5, r2
 8001170:	2900      	cmp	r1, #0
 8001172:	d026      	beq.n	80011c2 <__aeabi_fmul+0x27e>
 8001174:	4699      	mov	r9, r3
 8001176:	2002      	movs	r0, #2
 8001178:	e719      	b.n	8000fae <__aeabi_fmul+0x6a>
 800117a:	230c      	movs	r3, #12
 800117c:	4699      	mov	r9, r3
 800117e:	3b09      	subs	r3, #9
 8001180:	24ff      	movs	r4, #255	@ 0xff
 8001182:	469a      	mov	sl, r3
 8001184:	e6f6      	b.n	8000f74 <__aeabi_fmul+0x30>
 8001186:	0015      	movs	r5, r2
 8001188:	0021      	movs	r1, r4
 800118a:	2201      	movs	r2, #1
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b1b      	cmp	r3, #27
 8001190:	dd00      	ble.n	8001194 <__aeabi_fmul+0x250>
 8001192:	e786      	b.n	80010a2 <__aeabi_fmul+0x15e>
 8001194:	319e      	adds	r1, #158	@ 0x9e
 8001196:	0032      	movs	r2, r6
 8001198:	408e      	lsls	r6, r1
 800119a:	40da      	lsrs	r2, r3
 800119c:	1e73      	subs	r3, r6, #1
 800119e:	419e      	sbcs	r6, r3
 80011a0:	4332      	orrs	r2, r6
 80011a2:	0753      	lsls	r3, r2, #29
 80011a4:	d004      	beq.n	80011b0 <__aeabi_fmul+0x26c>
 80011a6:	230f      	movs	r3, #15
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fmul+0x26c>
 80011ae:	3204      	adds	r2, #4
 80011b0:	0153      	lsls	r3, r2, #5
 80011b2:	d510      	bpl.n	80011d6 <__aeabi_fmul+0x292>
 80011b4:	2301      	movs	r3, #1
 80011b6:	2200      	movs	r2, #0
 80011b8:	e792      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011ba:	003d      	movs	r5, r7
 80011bc:	4646      	mov	r6, r8
 80011be:	4682      	mov	sl, r0
 80011c0:	e767      	b.n	8001092 <__aeabi_fmul+0x14e>
 80011c2:	23ff      	movs	r3, #255	@ 0xff
 80011c4:	2200      	movs	r2, #0
 80011c6:	e78b      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	2500      	movs	r5, #0
 80011cc:	03d2      	lsls	r2, r2, #15
 80011ce:	e786      	b.n	80010de <__aeabi_fmul+0x19a>
 80011d0:	003d      	movs	r5, r7
 80011d2:	431a      	orrs	r2, r3
 80011d4:	e783      	b.n	80010de <__aeabi_fmul+0x19a>
 80011d6:	0192      	lsls	r2, r2, #6
 80011d8:	2300      	movs	r3, #0
 80011da:	0a52      	lsrs	r2, r2, #9
 80011dc:	e780      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011de:	003d      	movs	r5, r7
 80011e0:	4646      	mov	r6, r8
 80011e2:	e777      	b.n	80010d4 <__aeabi_fmul+0x190>
 80011e4:	002a      	movs	r2, r5
 80011e6:	2301      	movs	r3, #1
 80011e8:	407a      	eors	r2, r7
 80011ea:	408b      	lsls	r3, r1
 80011ec:	2003      	movs	r0, #3
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	e6e9      	b.n	8000fc6 <__aeabi_fmul+0x82>
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	f7ffffff 	.word	0xf7ffffff

080011f8 <__aeabi_fsub>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	4647      	mov	r7, r8
 80011fc:	46ce      	mov	lr, r9
 80011fe:	0243      	lsls	r3, r0, #9
 8001200:	b580      	push	{r7, lr}
 8001202:	0a5f      	lsrs	r7, r3, #9
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	0045      	lsls	r5, r0, #1
 8001208:	004a      	lsls	r2, r1, #1
 800120a:	469c      	mov	ip, r3
 800120c:	024b      	lsls	r3, r1, #9
 800120e:	0fc4      	lsrs	r4, r0, #31
 8001210:	0fce      	lsrs	r6, r1, #31
 8001212:	0e2d      	lsrs	r5, r5, #24
 8001214:	0a58      	lsrs	r0, r3, #9
 8001216:	0e12      	lsrs	r2, r2, #24
 8001218:	0999      	lsrs	r1, r3, #6
 800121a:	2aff      	cmp	r2, #255	@ 0xff
 800121c:	d06b      	beq.n	80012f6 <__aeabi_fsub+0xfe>
 800121e:	2301      	movs	r3, #1
 8001220:	405e      	eors	r6, r3
 8001222:	1aab      	subs	r3, r5, r2
 8001224:	42b4      	cmp	r4, r6
 8001226:	d04b      	beq.n	80012c0 <__aeabi_fsub+0xc8>
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_fsub+0x36>
 800122c:	e0ff      	b.n	800142e <__aeabi_fsub+0x236>
 800122e:	2a00      	cmp	r2, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_fsub+0x3c>
 8001232:	e088      	b.n	8001346 <__aeabi_fsub+0x14e>
 8001234:	2dff      	cmp	r5, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x42>
 8001238:	e0ef      	b.n	800141a <__aeabi_fsub+0x222>
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	04d2      	lsls	r2, r2, #19
 800123e:	4311      	orrs	r1, r2
 8001240:	2001      	movs	r0, #1
 8001242:	2b1b      	cmp	r3, #27
 8001244:	dc08      	bgt.n	8001258 <__aeabi_fsub+0x60>
 8001246:	0008      	movs	r0, r1
 8001248:	2220      	movs	r2, #32
 800124a:	40d8      	lsrs	r0, r3
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4099      	lsls	r1, r3
 8001250:	000b      	movs	r3, r1
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	4193      	sbcs	r3, r2
 8001256:	4318      	orrs	r0, r3
 8001258:	4663      	mov	r3, ip
 800125a:	1a1b      	subs	r3, r3, r0
 800125c:	469c      	mov	ip, r3
 800125e:	4663      	mov	r3, ip
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	d400      	bmi.n	8001266 <__aeabi_fsub+0x6e>
 8001264:	e0cd      	b.n	8001402 <__aeabi_fsub+0x20a>
 8001266:	4663      	mov	r3, ip
 8001268:	019f      	lsls	r7, r3, #6
 800126a:	09bf      	lsrs	r7, r7, #6
 800126c:	0038      	movs	r0, r7
 800126e:	f7ff f969 	bl	8000544 <__clzsi2>
 8001272:	003b      	movs	r3, r7
 8001274:	3805      	subs	r0, #5
 8001276:	4083      	lsls	r3, r0
 8001278:	4285      	cmp	r5, r0
 800127a:	dc00      	bgt.n	800127e <__aeabi_fsub+0x86>
 800127c:	e0a2      	b.n	80013c4 <__aeabi_fsub+0x1cc>
 800127e:	4ab7      	ldr	r2, [pc, #732]	@ (800155c <__aeabi_fsub+0x364>)
 8001280:	1a2d      	subs	r5, r5, r0
 8001282:	401a      	ands	r2, r3
 8001284:	4694      	mov	ip, r2
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x94>
 800128a:	e0c3      	b.n	8001414 <__aeabi_fsub+0x21c>
 800128c:	220f      	movs	r2, #15
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x9e>
 8001294:	e0be      	b.n	8001414 <__aeabi_fsub+0x21c>
 8001296:	2304      	movs	r3, #4
 8001298:	4698      	mov	r8, r3
 800129a:	44c4      	add	ip, r8
 800129c:	4663      	mov	r3, ip
 800129e:	015b      	lsls	r3, r3, #5
 80012a0:	d400      	bmi.n	80012a4 <__aeabi_fsub+0xac>
 80012a2:	e0b7      	b.n	8001414 <__aeabi_fsub+0x21c>
 80012a4:	1c68      	adds	r0, r5, #1
 80012a6:	2dfe      	cmp	r5, #254	@ 0xfe
 80012a8:	d000      	beq.n	80012ac <__aeabi_fsub+0xb4>
 80012aa:	e0a5      	b.n	80013f8 <__aeabi_fsub+0x200>
 80012ac:	20ff      	movs	r0, #255	@ 0xff
 80012ae:	2200      	movs	r2, #0
 80012b0:	05c0      	lsls	r0, r0, #23
 80012b2:	4310      	orrs	r0, r2
 80012b4:	07e4      	lsls	r4, r4, #31
 80012b6:	4320      	orrs	r0, r4
 80012b8:	bcc0      	pop	{r6, r7}
 80012ba:	46b9      	mov	r9, r7
 80012bc:	46b0      	mov	r8, r6
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_fsub+0xce>
 80012c4:	e1eb      	b.n	800169e <__aeabi_fsub+0x4a6>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d046      	beq.n	8001358 <__aeabi_fsub+0x160>
 80012ca:	2dff      	cmp	r5, #255	@ 0xff
 80012cc:	d100      	bne.n	80012d0 <__aeabi_fsub+0xd8>
 80012ce:	e0a4      	b.n	800141a <__aeabi_fsub+0x222>
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	04d2      	lsls	r2, r2, #19
 80012d4:	4311      	orrs	r1, r2
 80012d6:	2b1b      	cmp	r3, #27
 80012d8:	dc00      	bgt.n	80012dc <__aeabi_fsub+0xe4>
 80012da:	e0fb      	b.n	80014d4 <__aeabi_fsub+0x2dc>
 80012dc:	2305      	movs	r3, #5
 80012de:	4698      	mov	r8, r3
 80012e0:	002b      	movs	r3, r5
 80012e2:	44c4      	add	ip, r8
 80012e4:	4662      	mov	r2, ip
 80012e6:	08d7      	lsrs	r7, r2, #3
 80012e8:	2bff      	cmp	r3, #255	@ 0xff
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0xf6>
 80012ec:	e095      	b.n	800141a <__aeabi_fsub+0x222>
 80012ee:	027a      	lsls	r2, r7, #9
 80012f0:	0a52      	lsrs	r2, r2, #9
 80012f2:	b2d8      	uxtb	r0, r3
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80012f6:	002b      	movs	r3, r5
 80012f8:	3bff      	subs	r3, #255	@ 0xff
 80012fa:	4699      	mov	r9, r3
 80012fc:	2900      	cmp	r1, #0
 80012fe:	d118      	bne.n	8001332 <__aeabi_fsub+0x13a>
 8001300:	2301      	movs	r3, #1
 8001302:	405e      	eors	r6, r3
 8001304:	42b4      	cmp	r4, r6
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x112>
 8001308:	e0ca      	b.n	80014a0 <__aeabi_fsub+0x2a8>
 800130a:	464b      	mov	r3, r9
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02d      	beq.n	800136c <__aeabi_fsub+0x174>
 8001310:	2d00      	cmp	r5, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_fsub+0x11e>
 8001314:	e13c      	b.n	8001590 <__aeabi_fsub+0x398>
 8001316:	23ff      	movs	r3, #255	@ 0xff
 8001318:	4664      	mov	r4, ip
 800131a:	2c00      	cmp	r4, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x128>
 800131e:	e15f      	b.n	80015e0 <__aeabi_fsub+0x3e8>
 8001320:	1e5d      	subs	r5, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d100      	bne.n	8001328 <__aeabi_fsub+0x130>
 8001326:	e174      	b.n	8001612 <__aeabi_fsub+0x41a>
 8001328:	0034      	movs	r4, r6
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d074      	beq.n	8001418 <__aeabi_fsub+0x220>
 800132e:	002b      	movs	r3, r5
 8001330:	e103      	b.n	800153a <__aeabi_fsub+0x342>
 8001332:	42b4      	cmp	r4, r6
 8001334:	d100      	bne.n	8001338 <__aeabi_fsub+0x140>
 8001336:	e09c      	b.n	8001472 <__aeabi_fsub+0x27a>
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <__aeabi_fsub+0x174>
 800133c:	2d00      	cmp	r5, #0
 800133e:	d0ea      	beq.n	8001316 <__aeabi_fsub+0x11e>
 8001340:	0007      	movs	r7, r0
 8001342:	0034      	movs	r4, r6
 8001344:	e06c      	b.n	8001420 <__aeabi_fsub+0x228>
 8001346:	2900      	cmp	r1, #0
 8001348:	d0cc      	beq.n	80012e4 <__aeabi_fsub+0xec>
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d02b      	beq.n	80013a8 <__aeabi_fsub+0x1b0>
 8001350:	2bff      	cmp	r3, #255	@ 0xff
 8001352:	d062      	beq.n	800141a <__aeabi_fsub+0x222>
 8001354:	0013      	movs	r3, r2
 8001356:	e773      	b.n	8001240 <__aeabi_fsub+0x48>
 8001358:	2900      	cmp	r1, #0
 800135a:	d0c3      	beq.n	80012e4 <__aeabi_fsub+0xec>
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x16c>
 8001362:	e11e      	b.n	80015a2 <__aeabi_fsub+0x3aa>
 8001364:	2bff      	cmp	r3, #255	@ 0xff
 8001366:	d058      	beq.n	800141a <__aeabi_fsub+0x222>
 8001368:	0013      	movs	r3, r2
 800136a:	e7b4      	b.n	80012d6 <__aeabi_fsub+0xde>
 800136c:	22fe      	movs	r2, #254	@ 0xfe
 800136e:	1c6b      	adds	r3, r5, #1
 8001370:	421a      	tst	r2, r3
 8001372:	d10d      	bne.n	8001390 <__aeabi_fsub+0x198>
 8001374:	2d00      	cmp	r5, #0
 8001376:	d060      	beq.n	800143a <__aeabi_fsub+0x242>
 8001378:	4663      	mov	r3, ip
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <__aeabi_fsub+0x188>
 800137e:	e120      	b.n	80015c2 <__aeabi_fsub+0x3ca>
 8001380:	2900      	cmp	r1, #0
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x18e>
 8001384:	e128      	b.n	80015d8 <__aeabi_fsub+0x3e0>
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	2400      	movs	r4, #0
 800138a:	20ff      	movs	r0, #255	@ 0xff
 800138c:	03d2      	lsls	r2, r2, #15
 800138e:	e78f      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001390:	4663      	mov	r3, ip
 8001392:	1a5f      	subs	r7, r3, r1
 8001394:	017b      	lsls	r3, r7, #5
 8001396:	d500      	bpl.n	800139a <__aeabi_fsub+0x1a2>
 8001398:	e0fe      	b.n	8001598 <__aeabi_fsub+0x3a0>
 800139a:	2f00      	cmp	r7, #0
 800139c:	d000      	beq.n	80013a0 <__aeabi_fsub+0x1a8>
 800139e:	e765      	b.n	800126c <__aeabi_fsub+0x74>
 80013a0:	2400      	movs	r4, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	2200      	movs	r2, #0
 80013a6:	e783      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80013a8:	4663      	mov	r3, ip
 80013aa:	1a59      	subs	r1, r3, r1
 80013ac:	014b      	lsls	r3, r1, #5
 80013ae:	d400      	bmi.n	80013b2 <__aeabi_fsub+0x1ba>
 80013b0:	e119      	b.n	80015e6 <__aeabi_fsub+0x3ee>
 80013b2:	018f      	lsls	r7, r1, #6
 80013b4:	09bf      	lsrs	r7, r7, #6
 80013b6:	0038      	movs	r0, r7
 80013b8:	f7ff f8c4 	bl	8000544 <__clzsi2>
 80013bc:	003b      	movs	r3, r7
 80013be:	3805      	subs	r0, #5
 80013c0:	4083      	lsls	r3, r0
 80013c2:	2501      	movs	r5, #1
 80013c4:	2220      	movs	r2, #32
 80013c6:	1b40      	subs	r0, r0, r5
 80013c8:	3001      	adds	r0, #1
 80013ca:	1a12      	subs	r2, r2, r0
 80013cc:	0019      	movs	r1, r3
 80013ce:	4093      	lsls	r3, r2
 80013d0:	40c1      	lsrs	r1, r0
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	4193      	sbcs	r3, r2
 80013d6:	4319      	orrs	r1, r3
 80013d8:	468c      	mov	ip, r1
 80013da:	1e0b      	subs	r3, r1, #0
 80013dc:	d0e1      	beq.n	80013a2 <__aeabi_fsub+0x1aa>
 80013de:	075b      	lsls	r3, r3, #29
 80013e0:	d100      	bne.n	80013e4 <__aeabi_fsub+0x1ec>
 80013e2:	e152      	b.n	800168a <__aeabi_fsub+0x492>
 80013e4:	230f      	movs	r3, #15
 80013e6:	2500      	movs	r5, #0
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d000      	beq.n	80013f0 <__aeabi_fsub+0x1f8>
 80013ee:	e752      	b.n	8001296 <__aeabi_fsub+0x9e>
 80013f0:	2001      	movs	r0, #1
 80013f2:	014a      	lsls	r2, r1, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x200>
 80013f6:	e092      	b.n	800151e <__aeabi_fsub+0x326>
 80013f8:	b2c0      	uxtb	r0, r0
 80013fa:	4663      	mov	r3, ip
 80013fc:	019a      	lsls	r2, r3, #6
 80013fe:	0a52      	lsrs	r2, r2, #9
 8001400:	e756      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001402:	4663      	mov	r3, ip
 8001404:	075b      	lsls	r3, r3, #29
 8001406:	d005      	beq.n	8001414 <__aeabi_fsub+0x21c>
 8001408:	230f      	movs	r3, #15
 800140a:	4662      	mov	r2, ip
 800140c:	4013      	ands	r3, r2
 800140e:	2b04      	cmp	r3, #4
 8001410:	d000      	beq.n	8001414 <__aeabi_fsub+0x21c>
 8001412:	e740      	b.n	8001296 <__aeabi_fsub+0x9e>
 8001414:	002b      	movs	r3, r5
 8001416:	e765      	b.n	80012e4 <__aeabi_fsub+0xec>
 8001418:	0007      	movs	r7, r0
 800141a:	2f00      	cmp	r7, #0
 800141c:	d100      	bne.n	8001420 <__aeabi_fsub+0x228>
 800141e:	e745      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	03d2      	lsls	r2, r2, #15
 8001424:	433a      	orrs	r2, r7
 8001426:	0252      	lsls	r2, r2, #9
 8001428:	20ff      	movs	r0, #255	@ 0xff
 800142a:	0a52      	lsrs	r2, r2, #9
 800142c:	e740      	b.n	80012b0 <__aeabi_fsub+0xb8>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d179      	bne.n	8001526 <__aeabi_fsub+0x32e>
 8001432:	22fe      	movs	r2, #254	@ 0xfe
 8001434:	1c6b      	adds	r3, r5, #1
 8001436:	421a      	tst	r2, r3
 8001438:	d1aa      	bne.n	8001390 <__aeabi_fsub+0x198>
 800143a:	4663      	mov	r3, ip
 800143c:	2b00      	cmp	r3, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x24a>
 8001440:	e0f5      	b.n	800162e <__aeabi_fsub+0x436>
 8001442:	2900      	cmp	r1, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_fsub+0x250>
 8001446:	e0d1      	b.n	80015ec <__aeabi_fsub+0x3f4>
 8001448:	1a5f      	subs	r7, r3, r1
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	04db      	lsls	r3, r3, #19
 800144e:	421f      	tst	r7, r3
 8001450:	d100      	bne.n	8001454 <__aeabi_fsub+0x25c>
 8001452:	e10e      	b.n	8001672 <__aeabi_fsub+0x47a>
 8001454:	4662      	mov	r2, ip
 8001456:	2401      	movs	r4, #1
 8001458:	1a8a      	subs	r2, r1, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2000      	movs	r0, #0
 800145e:	4034      	ands	r4, r6
 8001460:	2a00      	cmp	r2, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x26e>
 8001464:	e724      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001466:	2001      	movs	r0, #1
 8001468:	421a      	tst	r2, r3
 800146a:	d1c6      	bne.n	80013fa <__aeabi_fsub+0x202>
 800146c:	2300      	movs	r3, #0
 800146e:	08d7      	lsrs	r7, r2, #3
 8001470:	e73d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d017      	beq.n	80014a6 <__aeabi_fsub+0x2ae>
 8001476:	2d00      	cmp	r5, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x284>
 800147a:	e0af      	b.n	80015dc <__aeabi_fsub+0x3e4>
 800147c:	23ff      	movs	r3, #255	@ 0xff
 800147e:	4665      	mov	r5, ip
 8001480:	2d00      	cmp	r5, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_fsub+0x28e>
 8001484:	e0ad      	b.n	80015e2 <__aeabi_fsub+0x3ea>
 8001486:	1e5e      	subs	r6, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d100      	bne.n	800148e <__aeabi_fsub+0x296>
 800148c:	e089      	b.n	80015a2 <__aeabi_fsub+0x3aa>
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d0c2      	beq.n	8001418 <__aeabi_fsub+0x220>
 8001492:	2e1b      	cmp	r6, #27
 8001494:	dc00      	bgt.n	8001498 <__aeabi_fsub+0x2a0>
 8001496:	e0ab      	b.n	80015f0 <__aeabi_fsub+0x3f8>
 8001498:	1d4b      	adds	r3, r1, #5
 800149a:	469c      	mov	ip, r3
 800149c:	0013      	movs	r3, r2
 800149e:	e721      	b.n	80012e4 <__aeabi_fsub+0xec>
 80014a0:	464b      	mov	r3, r9
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d170      	bne.n	8001588 <__aeabi_fsub+0x390>
 80014a6:	22fe      	movs	r2, #254	@ 0xfe
 80014a8:	1c6b      	adds	r3, r5, #1
 80014aa:	421a      	tst	r2, r3
 80014ac:	d15e      	bne.n	800156c <__aeabi_fsub+0x374>
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	d000      	beq.n	80014b4 <__aeabi_fsub+0x2bc>
 80014b2:	e0c3      	b.n	800163c <__aeabi_fsub+0x444>
 80014b4:	4663      	mov	r3, ip
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_fsub+0x2c4>
 80014ba:	e0d0      	b.n	800165e <__aeabi_fsub+0x466>
 80014bc:	2900      	cmp	r1, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x2ca>
 80014c0:	e094      	b.n	80015ec <__aeabi_fsub+0x3f4>
 80014c2:	000a      	movs	r2, r1
 80014c4:	4462      	add	r2, ip
 80014c6:	0153      	lsls	r3, r2, #5
 80014c8:	d400      	bmi.n	80014cc <__aeabi_fsub+0x2d4>
 80014ca:	e0d8      	b.n	800167e <__aeabi_fsub+0x486>
 80014cc:	0192      	lsls	r2, r2, #6
 80014ce:	2001      	movs	r0, #1
 80014d0:	0a52      	lsrs	r2, r2, #9
 80014d2:	e6ed      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80014d4:	0008      	movs	r0, r1
 80014d6:	2220      	movs	r2, #32
 80014d8:	40d8      	lsrs	r0, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4099      	lsls	r1, r3
 80014de:	000b      	movs	r3, r1
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	4193      	sbcs	r3, r2
 80014e4:	4303      	orrs	r3, r0
 80014e6:	449c      	add	ip, r3
 80014e8:	4663      	mov	r3, ip
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	d589      	bpl.n	8001402 <__aeabi_fsub+0x20a>
 80014ee:	3501      	adds	r5, #1
 80014f0:	2dff      	cmp	r5, #255	@ 0xff
 80014f2:	d100      	bne.n	80014f6 <__aeabi_fsub+0x2fe>
 80014f4:	e6da      	b.n	80012ac <__aeabi_fsub+0xb4>
 80014f6:	4662      	mov	r2, ip
 80014f8:	2301      	movs	r3, #1
 80014fa:	4919      	ldr	r1, [pc, #100]	@ (8001560 <__aeabi_fsub+0x368>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0852      	lsrs	r2, r2, #1
 8001500:	400a      	ands	r2, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	4694      	mov	ip, r2
 8001508:	075b      	lsls	r3, r3, #29
 800150a:	d004      	beq.n	8001516 <__aeabi_fsub+0x31e>
 800150c:	230f      	movs	r3, #15
 800150e:	4013      	ands	r3, r2
 8001510:	2b04      	cmp	r3, #4
 8001512:	d000      	beq.n	8001516 <__aeabi_fsub+0x31e>
 8001514:	e6bf      	b.n	8001296 <__aeabi_fsub+0x9e>
 8001516:	4663      	mov	r3, ip
 8001518:	015b      	lsls	r3, r3, #5
 800151a:	d500      	bpl.n	800151e <__aeabi_fsub+0x326>
 800151c:	e6c2      	b.n	80012a4 <__aeabi_fsub+0xac>
 800151e:	4663      	mov	r3, ip
 8001520:	08df      	lsrs	r7, r3, #3
 8001522:	002b      	movs	r3, r5
 8001524:	e6e3      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001526:	1b53      	subs	r3, r2, r5
 8001528:	2d00      	cmp	r5, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x336>
 800152c:	e6f4      	b.n	8001318 <__aeabi_fsub+0x120>
 800152e:	2080      	movs	r0, #128	@ 0x80
 8001530:	4664      	mov	r4, ip
 8001532:	04c0      	lsls	r0, r0, #19
 8001534:	4304      	orrs	r4, r0
 8001536:	46a4      	mov	ip, r4
 8001538:	0034      	movs	r4, r6
 800153a:	2001      	movs	r0, #1
 800153c:	2b1b      	cmp	r3, #27
 800153e:	dc09      	bgt.n	8001554 <__aeabi_fsub+0x35c>
 8001540:	2520      	movs	r5, #32
 8001542:	4660      	mov	r0, ip
 8001544:	40d8      	lsrs	r0, r3
 8001546:	1aeb      	subs	r3, r5, r3
 8001548:	4665      	mov	r5, ip
 800154a:	409d      	lsls	r5, r3
 800154c:	002b      	movs	r3, r5
 800154e:	1e5d      	subs	r5, r3, #1
 8001550:	41ab      	sbcs	r3, r5
 8001552:	4318      	orrs	r0, r3
 8001554:	1a0b      	subs	r3, r1, r0
 8001556:	469c      	mov	ip, r3
 8001558:	0015      	movs	r5, r2
 800155a:	e680      	b.n	800125e <__aeabi_fsub+0x66>
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff
 8001564:	22fe      	movs	r2, #254	@ 0xfe
 8001566:	1c6b      	adds	r3, r5, #1
 8001568:	4213      	tst	r3, r2
 800156a:	d0a3      	beq.n	80014b4 <__aeabi_fsub+0x2bc>
 800156c:	2bff      	cmp	r3, #255	@ 0xff
 800156e:	d100      	bne.n	8001572 <__aeabi_fsub+0x37a>
 8001570:	e69c      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001572:	4461      	add	r1, ip
 8001574:	0849      	lsrs	r1, r1, #1
 8001576:	074a      	lsls	r2, r1, #29
 8001578:	d049      	beq.n	800160e <__aeabi_fsub+0x416>
 800157a:	220f      	movs	r2, #15
 800157c:	400a      	ands	r2, r1
 800157e:	2a04      	cmp	r2, #4
 8001580:	d045      	beq.n	800160e <__aeabi_fsub+0x416>
 8001582:	1d0a      	adds	r2, r1, #4
 8001584:	4694      	mov	ip, r2
 8001586:	e6ad      	b.n	80012e4 <__aeabi_fsub+0xec>
 8001588:	2d00      	cmp	r5, #0
 800158a:	d100      	bne.n	800158e <__aeabi_fsub+0x396>
 800158c:	e776      	b.n	800147c <__aeabi_fsub+0x284>
 800158e:	e68d      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001590:	0034      	movs	r4, r6
 8001592:	20ff      	movs	r0, #255	@ 0xff
 8001594:	2200      	movs	r2, #0
 8001596:	e68b      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001598:	4663      	mov	r3, ip
 800159a:	2401      	movs	r4, #1
 800159c:	1acf      	subs	r7, r1, r3
 800159e:	4034      	ands	r4, r6
 80015a0:	e664      	b.n	800126c <__aeabi_fsub+0x74>
 80015a2:	4461      	add	r1, ip
 80015a4:	014b      	lsls	r3, r1, #5
 80015a6:	d56d      	bpl.n	8001684 <__aeabi_fsub+0x48c>
 80015a8:	0848      	lsrs	r0, r1, #1
 80015aa:	4944      	ldr	r1, [pc, #272]	@ (80016bc <__aeabi_fsub+0x4c4>)
 80015ac:	4001      	ands	r1, r0
 80015ae:	0743      	lsls	r3, r0, #29
 80015b0:	d02c      	beq.n	800160c <__aeabi_fsub+0x414>
 80015b2:	230f      	movs	r3, #15
 80015b4:	4003      	ands	r3, r0
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d028      	beq.n	800160c <__aeabi_fsub+0x414>
 80015ba:	1d0b      	adds	r3, r1, #4
 80015bc:	469c      	mov	ip, r3
 80015be:	2302      	movs	r3, #2
 80015c0:	e690      	b.n	80012e4 <__aeabi_fsub+0xec>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d100      	bne.n	80015c8 <__aeabi_fsub+0x3d0>
 80015c6:	e72b      	b.n	8001420 <__aeabi_fsub+0x228>
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	03db      	lsls	r3, r3, #15
 80015cc:	429f      	cmp	r7, r3
 80015ce:	d200      	bcs.n	80015d2 <__aeabi_fsub+0x3da>
 80015d0:	e726      	b.n	8001420 <__aeabi_fsub+0x228>
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d300      	bcc.n	80015d8 <__aeabi_fsub+0x3e0>
 80015d6:	e723      	b.n	8001420 <__aeabi_fsub+0x228>
 80015d8:	2401      	movs	r4, #1
 80015da:	4034      	ands	r4, r6
 80015dc:	0007      	movs	r7, r0
 80015de:	e71f      	b.n	8001420 <__aeabi_fsub+0x228>
 80015e0:	0034      	movs	r4, r6
 80015e2:	468c      	mov	ip, r1
 80015e4:	e67e      	b.n	80012e4 <__aeabi_fsub+0xec>
 80015e6:	2301      	movs	r3, #1
 80015e8:	08cf      	lsrs	r7, r1, #3
 80015ea:	e680      	b.n	80012ee <__aeabi_fsub+0xf6>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e67e      	b.n	80012ee <__aeabi_fsub+0xf6>
 80015f0:	2020      	movs	r0, #32
 80015f2:	4665      	mov	r5, ip
 80015f4:	1b80      	subs	r0, r0, r6
 80015f6:	4085      	lsls	r5, r0
 80015f8:	4663      	mov	r3, ip
 80015fa:	0028      	movs	r0, r5
 80015fc:	40f3      	lsrs	r3, r6
 80015fe:	1e45      	subs	r5, r0, #1
 8001600:	41a8      	sbcs	r0, r5
 8001602:	4303      	orrs	r3, r0
 8001604:	469c      	mov	ip, r3
 8001606:	0015      	movs	r5, r2
 8001608:	448c      	add	ip, r1
 800160a:	e76d      	b.n	80014e8 <__aeabi_fsub+0x2f0>
 800160c:	2302      	movs	r3, #2
 800160e:	08cf      	lsrs	r7, r1, #3
 8001610:	e66d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001612:	1b0f      	subs	r7, r1, r4
 8001614:	017b      	lsls	r3, r7, #5
 8001616:	d528      	bpl.n	800166a <__aeabi_fsub+0x472>
 8001618:	01bf      	lsls	r7, r7, #6
 800161a:	09bf      	lsrs	r7, r7, #6
 800161c:	0038      	movs	r0, r7
 800161e:	f7fe ff91 	bl	8000544 <__clzsi2>
 8001622:	003b      	movs	r3, r7
 8001624:	3805      	subs	r0, #5
 8001626:	4083      	lsls	r3, r0
 8001628:	0034      	movs	r4, r6
 800162a:	2501      	movs	r5, #1
 800162c:	e6ca      	b.n	80013c4 <__aeabi_fsub+0x1cc>
 800162e:	2900      	cmp	r1, #0
 8001630:	d100      	bne.n	8001634 <__aeabi_fsub+0x43c>
 8001632:	e6b5      	b.n	80013a0 <__aeabi_fsub+0x1a8>
 8001634:	2401      	movs	r4, #1
 8001636:	0007      	movs	r7, r0
 8001638:	4034      	ands	r4, r6
 800163a:	e658      	b.n	80012ee <__aeabi_fsub+0xf6>
 800163c:	4663      	mov	r3, ip
 800163e:	2b00      	cmp	r3, #0
 8001640:	d100      	bne.n	8001644 <__aeabi_fsub+0x44c>
 8001642:	e6e9      	b.n	8001418 <__aeabi_fsub+0x220>
 8001644:	2900      	cmp	r1, #0
 8001646:	d100      	bne.n	800164a <__aeabi_fsub+0x452>
 8001648:	e6ea      	b.n	8001420 <__aeabi_fsub+0x228>
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	03db      	lsls	r3, r3, #15
 800164e:	429f      	cmp	r7, r3
 8001650:	d200      	bcs.n	8001654 <__aeabi_fsub+0x45c>
 8001652:	e6e5      	b.n	8001420 <__aeabi_fsub+0x228>
 8001654:	4298      	cmp	r0, r3
 8001656:	d300      	bcc.n	800165a <__aeabi_fsub+0x462>
 8001658:	e6e2      	b.n	8001420 <__aeabi_fsub+0x228>
 800165a:	0007      	movs	r7, r0
 800165c:	e6e0      	b.n	8001420 <__aeabi_fsub+0x228>
 800165e:	2900      	cmp	r1, #0
 8001660:	d100      	bne.n	8001664 <__aeabi_fsub+0x46c>
 8001662:	e69e      	b.n	80013a2 <__aeabi_fsub+0x1aa>
 8001664:	2300      	movs	r3, #0
 8001666:	08cf      	lsrs	r7, r1, #3
 8001668:	e641      	b.n	80012ee <__aeabi_fsub+0xf6>
 800166a:	0034      	movs	r4, r6
 800166c:	2301      	movs	r3, #1
 800166e:	08ff      	lsrs	r7, r7, #3
 8001670:	e63d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001672:	2f00      	cmp	r7, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_fsub+0x480>
 8001676:	e693      	b.n	80013a0 <__aeabi_fsub+0x1a8>
 8001678:	2300      	movs	r3, #0
 800167a:	08ff      	lsrs	r7, r7, #3
 800167c:	e637      	b.n	80012ee <__aeabi_fsub+0xf6>
 800167e:	2300      	movs	r3, #0
 8001680:	08d7      	lsrs	r7, r2, #3
 8001682:	e634      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001684:	2301      	movs	r3, #1
 8001686:	08cf      	lsrs	r7, r1, #3
 8001688:	e631      	b.n	80012ee <__aeabi_fsub+0xf6>
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	000b      	movs	r3, r1
 800168e:	04d2      	lsls	r2, r2, #19
 8001690:	2001      	movs	r0, #1
 8001692:	4013      	ands	r3, r2
 8001694:	4211      	tst	r1, r2
 8001696:	d000      	beq.n	800169a <__aeabi_fsub+0x4a2>
 8001698:	e6ae      	b.n	80013f8 <__aeabi_fsub+0x200>
 800169a:	08cf      	lsrs	r7, r1, #3
 800169c:	e627      	b.n	80012ee <__aeabi_fsub+0xf6>
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <__aeabi_fsub+0x4ac>
 80016a2:	e75f      	b.n	8001564 <__aeabi_fsub+0x36c>
 80016a4:	1b56      	subs	r6, r2, r5
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d101      	bne.n	80016ae <__aeabi_fsub+0x4b6>
 80016aa:	0033      	movs	r3, r6
 80016ac:	e6e7      	b.n	800147e <__aeabi_fsub+0x286>
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	4660      	mov	r0, ip
 80016b2:	04db      	lsls	r3, r3, #19
 80016b4:	4318      	orrs	r0, r3
 80016b6:	4684      	mov	ip, r0
 80016b8:	e6eb      	b.n	8001492 <__aeabi_fsub+0x29a>
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	7dffffff 	.word	0x7dffffff

080016c0 <__aeabi_fcmpun>:
 80016c0:	0243      	lsls	r3, r0, #9
 80016c2:	024a      	lsls	r2, r1, #9
 80016c4:	0040      	lsls	r0, r0, #1
 80016c6:	0049      	lsls	r1, r1, #1
 80016c8:	0a5b      	lsrs	r3, r3, #9
 80016ca:	0a52      	lsrs	r2, r2, #9
 80016cc:	0e09      	lsrs	r1, r1, #24
 80016ce:	0e00      	lsrs	r0, r0, #24
 80016d0:	28ff      	cmp	r0, #255	@ 0xff
 80016d2:	d006      	beq.n	80016e2 <__aeabi_fcmpun+0x22>
 80016d4:	2000      	movs	r0, #0
 80016d6:	29ff      	cmp	r1, #255	@ 0xff
 80016d8:	d102      	bne.n	80016e0 <__aeabi_fcmpun+0x20>
 80016da:	1e53      	subs	r3, r2, #1
 80016dc:	419a      	sbcs	r2, r3
 80016de:	0010      	movs	r0, r2
 80016e0:	4770      	bx	lr
 80016e2:	38fe      	subs	r0, #254	@ 0xfe
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1fb      	bne.n	80016e0 <__aeabi_fcmpun+0x20>
 80016e8:	e7f4      	b.n	80016d4 <__aeabi_fcmpun+0x14>
 80016ea:	46c0      	nop			@ (mov r8, r8)

080016ec <__aeabi_f2iz>:
 80016ec:	0241      	lsls	r1, r0, #9
 80016ee:	0042      	lsls	r2, r0, #1
 80016f0:	0fc3      	lsrs	r3, r0, #31
 80016f2:	0a49      	lsrs	r1, r1, #9
 80016f4:	2000      	movs	r0, #0
 80016f6:	0e12      	lsrs	r2, r2, #24
 80016f8:	2a7e      	cmp	r2, #126	@ 0x7e
 80016fa:	dd03      	ble.n	8001704 <__aeabi_f2iz+0x18>
 80016fc:	2a9d      	cmp	r2, #157	@ 0x9d
 80016fe:	dd02      	ble.n	8001706 <__aeabi_f2iz+0x1a>
 8001700:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <__aeabi_f2iz+0x3c>)
 8001702:	1898      	adds	r0, r3, r2
 8001704:	4770      	bx	lr
 8001706:	2080      	movs	r0, #128	@ 0x80
 8001708:	0400      	lsls	r0, r0, #16
 800170a:	4301      	orrs	r1, r0
 800170c:	2a95      	cmp	r2, #149	@ 0x95
 800170e:	dc07      	bgt.n	8001720 <__aeabi_f2iz+0x34>
 8001710:	2096      	movs	r0, #150	@ 0x96
 8001712:	1a82      	subs	r2, r0, r2
 8001714:	40d1      	lsrs	r1, r2
 8001716:	4248      	negs	r0, r1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f3      	bne.n	8001704 <__aeabi_f2iz+0x18>
 800171c:	0008      	movs	r0, r1
 800171e:	e7f1      	b.n	8001704 <__aeabi_f2iz+0x18>
 8001720:	3a96      	subs	r2, #150	@ 0x96
 8001722:	4091      	lsls	r1, r2
 8001724:	e7f7      	b.n	8001716 <__aeabi_f2iz+0x2a>
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	7fffffff 	.word	0x7fffffff

0800172c <__aeabi_i2f>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2800      	cmp	r0, #0
 8001730:	d012      	beq.n	8001758 <__aeabi_i2f+0x2c>
 8001732:	17c3      	asrs	r3, r0, #31
 8001734:	18c5      	adds	r5, r0, r3
 8001736:	405d      	eors	r5, r3
 8001738:	0fc4      	lsrs	r4, r0, #31
 800173a:	0028      	movs	r0, r5
 800173c:	f7fe ff02 	bl	8000544 <__clzsi2>
 8001740:	239e      	movs	r3, #158	@ 0x9e
 8001742:	1a1b      	subs	r3, r3, r0
 8001744:	2b96      	cmp	r3, #150	@ 0x96
 8001746:	dc0f      	bgt.n	8001768 <__aeabi_i2f+0x3c>
 8001748:	2808      	cmp	r0, #8
 800174a:	d038      	beq.n	80017be <__aeabi_i2f+0x92>
 800174c:	3808      	subs	r0, #8
 800174e:	4085      	lsls	r5, r0
 8001750:	026d      	lsls	r5, r5, #9
 8001752:	0a6d      	lsrs	r5, r5, #9
 8001754:	b2d8      	uxtb	r0, r3
 8001756:	e002      	b.n	800175e <__aeabi_i2f+0x32>
 8001758:	2400      	movs	r4, #0
 800175a:	2000      	movs	r0, #0
 800175c:	2500      	movs	r5, #0
 800175e:	05c0      	lsls	r0, r0, #23
 8001760:	4328      	orrs	r0, r5
 8001762:	07e4      	lsls	r4, r4, #31
 8001764:	4320      	orrs	r0, r4
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	2b99      	cmp	r3, #153	@ 0x99
 800176a:	dc14      	bgt.n	8001796 <__aeabi_i2f+0x6a>
 800176c:	1f42      	subs	r2, r0, #5
 800176e:	4095      	lsls	r5, r2
 8001770:	002a      	movs	r2, r5
 8001772:	4915      	ldr	r1, [pc, #84]	@ (80017c8 <__aeabi_i2f+0x9c>)
 8001774:	4011      	ands	r1, r2
 8001776:	0755      	lsls	r5, r2, #29
 8001778:	d01c      	beq.n	80017b4 <__aeabi_i2f+0x88>
 800177a:	250f      	movs	r5, #15
 800177c:	402a      	ands	r2, r5
 800177e:	2a04      	cmp	r2, #4
 8001780:	d018      	beq.n	80017b4 <__aeabi_i2f+0x88>
 8001782:	3104      	adds	r1, #4
 8001784:	08ca      	lsrs	r2, r1, #3
 8001786:	0149      	lsls	r1, r1, #5
 8001788:	d515      	bpl.n	80017b6 <__aeabi_i2f+0x8a>
 800178a:	239f      	movs	r3, #159	@ 0x9f
 800178c:	0252      	lsls	r2, r2, #9
 800178e:	1a18      	subs	r0, r3, r0
 8001790:	0a55      	lsrs	r5, r2, #9
 8001792:	b2c0      	uxtb	r0, r0
 8001794:	e7e3      	b.n	800175e <__aeabi_i2f+0x32>
 8001796:	2205      	movs	r2, #5
 8001798:	0029      	movs	r1, r5
 800179a:	1a12      	subs	r2, r2, r0
 800179c:	40d1      	lsrs	r1, r2
 800179e:	0002      	movs	r2, r0
 80017a0:	321b      	adds	r2, #27
 80017a2:	4095      	lsls	r5, r2
 80017a4:	002a      	movs	r2, r5
 80017a6:	1e55      	subs	r5, r2, #1
 80017a8:	41aa      	sbcs	r2, r5
 80017aa:	430a      	orrs	r2, r1
 80017ac:	4906      	ldr	r1, [pc, #24]	@ (80017c8 <__aeabi_i2f+0x9c>)
 80017ae:	4011      	ands	r1, r2
 80017b0:	0755      	lsls	r5, r2, #29
 80017b2:	d1e2      	bne.n	800177a <__aeabi_i2f+0x4e>
 80017b4:	08ca      	lsrs	r2, r1, #3
 80017b6:	0252      	lsls	r2, r2, #9
 80017b8:	0a55      	lsrs	r5, r2, #9
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	e7cf      	b.n	800175e <__aeabi_i2f+0x32>
 80017be:	026d      	lsls	r5, r5, #9
 80017c0:	0a6d      	lsrs	r5, r5, #9
 80017c2:	308e      	adds	r0, #142	@ 0x8e
 80017c4:	e7cb      	b.n	800175e <__aeabi_i2f+0x32>
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	fbffffff 	.word	0xfbffffff

080017cc <__aeabi_ui2f>:
 80017cc:	b510      	push	{r4, lr}
 80017ce:	1e04      	subs	r4, r0, #0
 80017d0:	d00d      	beq.n	80017ee <__aeabi_ui2f+0x22>
 80017d2:	f7fe feb7 	bl	8000544 <__clzsi2>
 80017d6:	239e      	movs	r3, #158	@ 0x9e
 80017d8:	1a1b      	subs	r3, r3, r0
 80017da:	2b96      	cmp	r3, #150	@ 0x96
 80017dc:	dc0c      	bgt.n	80017f8 <__aeabi_ui2f+0x2c>
 80017de:	2808      	cmp	r0, #8
 80017e0:	d034      	beq.n	800184c <__aeabi_ui2f+0x80>
 80017e2:	3808      	subs	r0, #8
 80017e4:	4084      	lsls	r4, r0
 80017e6:	0264      	lsls	r4, r4, #9
 80017e8:	0a64      	lsrs	r4, r4, #9
 80017ea:	b2d8      	uxtb	r0, r3
 80017ec:	e001      	b.n	80017f2 <__aeabi_ui2f+0x26>
 80017ee:	2000      	movs	r0, #0
 80017f0:	2400      	movs	r4, #0
 80017f2:	05c0      	lsls	r0, r0, #23
 80017f4:	4320      	orrs	r0, r4
 80017f6:	bd10      	pop	{r4, pc}
 80017f8:	2b99      	cmp	r3, #153	@ 0x99
 80017fa:	dc13      	bgt.n	8001824 <__aeabi_ui2f+0x58>
 80017fc:	1f42      	subs	r2, r0, #5
 80017fe:	4094      	lsls	r4, r2
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <__aeabi_ui2f+0x88>)
 8001802:	4022      	ands	r2, r4
 8001804:	0761      	lsls	r1, r4, #29
 8001806:	d01c      	beq.n	8001842 <__aeabi_ui2f+0x76>
 8001808:	210f      	movs	r1, #15
 800180a:	4021      	ands	r1, r4
 800180c:	2904      	cmp	r1, #4
 800180e:	d018      	beq.n	8001842 <__aeabi_ui2f+0x76>
 8001810:	3204      	adds	r2, #4
 8001812:	08d4      	lsrs	r4, r2, #3
 8001814:	0152      	lsls	r2, r2, #5
 8001816:	d515      	bpl.n	8001844 <__aeabi_ui2f+0x78>
 8001818:	239f      	movs	r3, #159	@ 0x9f
 800181a:	0264      	lsls	r4, r4, #9
 800181c:	1a18      	subs	r0, r3, r0
 800181e:	0a64      	lsrs	r4, r4, #9
 8001820:	b2c0      	uxtb	r0, r0
 8001822:	e7e6      	b.n	80017f2 <__aeabi_ui2f+0x26>
 8001824:	0002      	movs	r2, r0
 8001826:	0021      	movs	r1, r4
 8001828:	321b      	adds	r2, #27
 800182a:	4091      	lsls	r1, r2
 800182c:	000a      	movs	r2, r1
 800182e:	1e51      	subs	r1, r2, #1
 8001830:	418a      	sbcs	r2, r1
 8001832:	2105      	movs	r1, #5
 8001834:	1a09      	subs	r1, r1, r0
 8001836:	40cc      	lsrs	r4, r1
 8001838:	4314      	orrs	r4, r2
 800183a:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <__aeabi_ui2f+0x88>)
 800183c:	4022      	ands	r2, r4
 800183e:	0761      	lsls	r1, r4, #29
 8001840:	d1e2      	bne.n	8001808 <__aeabi_ui2f+0x3c>
 8001842:	08d4      	lsrs	r4, r2, #3
 8001844:	0264      	lsls	r4, r4, #9
 8001846:	0a64      	lsrs	r4, r4, #9
 8001848:	b2d8      	uxtb	r0, r3
 800184a:	e7d2      	b.n	80017f2 <__aeabi_ui2f+0x26>
 800184c:	0264      	lsls	r4, r4, #9
 800184e:	0a64      	lsrs	r4, r4, #9
 8001850:	308e      	adds	r0, #142	@ 0x8e
 8001852:	e7ce      	b.n	80017f2 <__aeabi_ui2f+0x26>
 8001854:	fbffffff 	.word	0xfbffffff

08001858 <__aeabi_dadd>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	464f      	mov	r7, r9
 800185c:	4646      	mov	r6, r8
 800185e:	46d6      	mov	lr, sl
 8001860:	b5c0      	push	{r6, r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	9000      	str	r0, [sp, #0]
 8001866:	9101      	str	r1, [sp, #4]
 8001868:	030e      	lsls	r6, r1, #12
 800186a:	004c      	lsls	r4, r1, #1
 800186c:	0fcd      	lsrs	r5, r1, #31
 800186e:	0a71      	lsrs	r1, r6, #9
 8001870:	9e00      	ldr	r6, [sp, #0]
 8001872:	005f      	lsls	r7, r3, #1
 8001874:	0f76      	lsrs	r6, r6, #29
 8001876:	430e      	orrs	r6, r1
 8001878:	9900      	ldr	r1, [sp, #0]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	4689      	mov	r9, r1
 8001882:	0319      	lsls	r1, r3, #12
 8001884:	0d7b      	lsrs	r3, r7, #21
 8001886:	4698      	mov	r8, r3
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	0a49      	lsrs	r1, r1, #9
 800188c:	0fdb      	lsrs	r3, r3, #31
 800188e:	469c      	mov	ip, r3
 8001890:	9b00      	ldr	r3, [sp, #0]
 8001892:	9a00      	ldr	r2, [sp, #0]
 8001894:	0f5b      	lsrs	r3, r3, #29
 8001896:	430b      	orrs	r3, r1
 8001898:	4641      	mov	r1, r8
 800189a:	0d64      	lsrs	r4, r4, #21
 800189c:	00d2      	lsls	r2, r2, #3
 800189e:	1a61      	subs	r1, r4, r1
 80018a0:	4565      	cmp	r5, ip
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x4e>
 80018a4:	e0a6      	b.n	80019f4 <__aeabi_dadd+0x19c>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	dd72      	ble.n	8001990 <__aeabi_dadd+0x138>
 80018aa:	4647      	mov	r7, r8
 80018ac:	2f00      	cmp	r7, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x5a>
 80018b0:	e0dd      	b.n	8001a6e <__aeabi_dadd+0x216>
 80018b2:	4fcc      	ldr	r7, [pc, #816]	@ (8001be4 <__aeabi_dadd+0x38c>)
 80018b4:	42bc      	cmp	r4, r7
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x62>
 80018b8:	e19a      	b.n	8001bf0 <__aeabi_dadd+0x398>
 80018ba:	2701      	movs	r7, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dc17      	bgt.n	80018f0 <__aeabi_dadd+0x98>
 80018c0:	2780      	movs	r7, #128	@ 0x80
 80018c2:	043f      	lsls	r7, r7, #16
 80018c4:	433b      	orrs	r3, r7
 80018c6:	291f      	cmp	r1, #31
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dadd+0x74>
 80018ca:	e1dd      	b.n	8001c88 <__aeabi_dadd+0x430>
 80018cc:	2720      	movs	r7, #32
 80018ce:	1a78      	subs	r0, r7, r1
 80018d0:	001f      	movs	r7, r3
 80018d2:	4087      	lsls	r7, r0
 80018d4:	46ba      	mov	sl, r7
 80018d6:	0017      	movs	r7, r2
 80018d8:	40cf      	lsrs	r7, r1
 80018da:	4684      	mov	ip, r0
 80018dc:	0038      	movs	r0, r7
 80018de:	4657      	mov	r7, sl
 80018e0:	4307      	orrs	r7, r0
 80018e2:	4660      	mov	r0, ip
 80018e4:	4082      	lsls	r2, r0
 80018e6:	40cb      	lsrs	r3, r1
 80018e8:	1e50      	subs	r0, r2, #1
 80018ea:	4182      	sbcs	r2, r0
 80018ec:	1af6      	subs	r6, r6, r3
 80018ee:	4317      	orrs	r7, r2
 80018f0:	464b      	mov	r3, r9
 80018f2:	1bdf      	subs	r7, r3, r7
 80018f4:	45b9      	cmp	r9, r7
 80018f6:	4180      	sbcs	r0, r0
 80018f8:	4240      	negs	r0, r0
 80018fa:	1a36      	subs	r6, r6, r0
 80018fc:	0233      	lsls	r3, r6, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dadd+0xaa>
 8001900:	e0ff      	b.n	8001b02 <__aeabi_dadd+0x2aa>
 8001902:	0276      	lsls	r6, r6, #9
 8001904:	0a76      	lsrs	r6, r6, #9
 8001906:	2e00      	cmp	r6, #0
 8001908:	d100      	bne.n	800190c <__aeabi_dadd+0xb4>
 800190a:	e13c      	b.n	8001b86 <__aeabi_dadd+0x32e>
 800190c:	0030      	movs	r0, r6
 800190e:	f7fe fe19 	bl	8000544 <__clzsi2>
 8001912:	0003      	movs	r3, r0
 8001914:	3b08      	subs	r3, #8
 8001916:	2120      	movs	r1, #32
 8001918:	0038      	movs	r0, r7
 800191a:	1aca      	subs	r2, r1, r3
 800191c:	40d0      	lsrs	r0, r2
 800191e:	409e      	lsls	r6, r3
 8001920:	0002      	movs	r2, r0
 8001922:	409f      	lsls	r7, r3
 8001924:	4332      	orrs	r2, r6
 8001926:	429c      	cmp	r4, r3
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0xd4>
 800192a:	e1a6      	b.n	8001c7a <__aeabi_dadd+0x422>
 800192c:	1b18      	subs	r0, r3, r4
 800192e:	3001      	adds	r0, #1
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	003e      	movs	r6, r7
 8001934:	408f      	lsls	r7, r1
 8001936:	40c6      	lsrs	r6, r0
 8001938:	1e7b      	subs	r3, r7, #1
 800193a:	419f      	sbcs	r7, r3
 800193c:	0013      	movs	r3, r2
 800193e:	408b      	lsls	r3, r1
 8001940:	4337      	orrs	r7, r6
 8001942:	431f      	orrs	r7, r3
 8001944:	40c2      	lsrs	r2, r0
 8001946:	003b      	movs	r3, r7
 8001948:	0016      	movs	r6, r2
 800194a:	2400      	movs	r4, #0
 800194c:	4313      	orrs	r3, r2
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0xfa>
 8001950:	e1df      	b.n	8001d12 <__aeabi_dadd+0x4ba>
 8001952:	077b      	lsls	r3, r7, #29
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0x100>
 8001956:	e332      	b.n	8001fbe <__aeabi_dadd+0x766>
 8001958:	230f      	movs	r3, #15
 800195a:	003a      	movs	r2, r7
 800195c:	403b      	ands	r3, r7
 800195e:	2b04      	cmp	r3, #4
 8001960:	d004      	beq.n	800196c <__aeabi_dadd+0x114>
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	42ba      	cmp	r2, r7
 8001966:	41bf      	sbcs	r7, r7
 8001968:	427f      	negs	r7, r7
 800196a:	19f6      	adds	r6, r6, r7
 800196c:	0233      	lsls	r3, r6, #8
 800196e:	d400      	bmi.n	8001972 <__aeabi_dadd+0x11a>
 8001970:	e323      	b.n	8001fba <__aeabi_dadd+0x762>
 8001972:	4b9c      	ldr	r3, [pc, #624]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001974:	3401      	adds	r4, #1
 8001976:	429c      	cmp	r4, r3
 8001978:	d100      	bne.n	800197c <__aeabi_dadd+0x124>
 800197a:	e0b4      	b.n	8001ae6 <__aeabi_dadd+0x28e>
 800197c:	4b9a      	ldr	r3, [pc, #616]	@ (8001be8 <__aeabi_dadd+0x390>)
 800197e:	0564      	lsls	r4, r4, #21
 8001980:	401e      	ands	r6, r3
 8001982:	0d64      	lsrs	r4, r4, #21
 8001984:	0777      	lsls	r7, r6, #29
 8001986:	08d2      	lsrs	r2, r2, #3
 8001988:	0276      	lsls	r6, r6, #9
 800198a:	4317      	orrs	r7, r2
 800198c:	0b36      	lsrs	r6, r6, #12
 800198e:	e0ac      	b.n	8001aea <__aeabi_dadd+0x292>
 8001990:	2900      	cmp	r1, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dadd+0x13e>
 8001994:	e07e      	b.n	8001a94 <__aeabi_dadd+0x23c>
 8001996:	4641      	mov	r1, r8
 8001998:	1b09      	subs	r1, r1, r4
 800199a:	2c00      	cmp	r4, #0
 800199c:	d000      	beq.n	80019a0 <__aeabi_dadd+0x148>
 800199e:	e160      	b.n	8001c62 <__aeabi_dadd+0x40a>
 80019a0:	0034      	movs	r4, r6
 80019a2:	4648      	mov	r0, r9
 80019a4:	4304      	orrs	r4, r0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dadd+0x152>
 80019a8:	e1c9      	b.n	8001d3e <__aeabi_dadd+0x4e6>
 80019aa:	1e4c      	subs	r4, r1, #1
 80019ac:	2901      	cmp	r1, #1
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dadd+0x15a>
 80019b0:	e22e      	b.n	8001e10 <__aeabi_dadd+0x5b8>
 80019b2:	4d8c      	ldr	r5, [pc, #560]	@ (8001be4 <__aeabi_dadd+0x38c>)
 80019b4:	42a9      	cmp	r1, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x162>
 80019b8:	e224      	b.n	8001e04 <__aeabi_dadd+0x5ac>
 80019ba:	2701      	movs	r7, #1
 80019bc:	2c38      	cmp	r4, #56	@ 0x38
 80019be:	dc11      	bgt.n	80019e4 <__aeabi_dadd+0x18c>
 80019c0:	0021      	movs	r1, r4
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x170>
 80019c6:	e20b      	b.n	8001de0 <__aeabi_dadd+0x588>
 80019c8:	2420      	movs	r4, #32
 80019ca:	0037      	movs	r7, r6
 80019cc:	4648      	mov	r0, r9
 80019ce:	1a64      	subs	r4, r4, r1
 80019d0:	40a7      	lsls	r7, r4
 80019d2:	40c8      	lsrs	r0, r1
 80019d4:	4307      	orrs	r7, r0
 80019d6:	4648      	mov	r0, r9
 80019d8:	40a0      	lsls	r0, r4
 80019da:	40ce      	lsrs	r6, r1
 80019dc:	1e44      	subs	r4, r0, #1
 80019de:	41a0      	sbcs	r0, r4
 80019e0:	1b9b      	subs	r3, r3, r6
 80019e2:	4307      	orrs	r7, r0
 80019e4:	1bd7      	subs	r7, r2, r7
 80019e6:	42ba      	cmp	r2, r7
 80019e8:	4192      	sbcs	r2, r2
 80019ea:	4252      	negs	r2, r2
 80019ec:	4665      	mov	r5, ip
 80019ee:	4644      	mov	r4, r8
 80019f0:	1a9e      	subs	r6, r3, r2
 80019f2:	e783      	b.n	80018fc <__aeabi_dadd+0xa4>
 80019f4:	2900      	cmp	r1, #0
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dadd+0x1a2>
 80019f8:	e09c      	b.n	8001b34 <__aeabi_dadd+0x2dc>
 80019fa:	4647      	mov	r7, r8
 80019fc:	2f00      	cmp	r7, #0
 80019fe:	d167      	bne.n	8001ad0 <__aeabi_dadd+0x278>
 8001a00:	001f      	movs	r7, r3
 8001a02:	4317      	orrs	r7, r2
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0x1b0>
 8001a06:	e0e4      	b.n	8001bd2 <__aeabi_dadd+0x37a>
 8001a08:	1e48      	subs	r0, r1, #1
 8001a0a:	2901      	cmp	r1, #1
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x1b8>
 8001a0e:	e19b      	b.n	8001d48 <__aeabi_dadd+0x4f0>
 8001a10:	4f74      	ldr	r7, [pc, #464]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a12:	42b9      	cmp	r1, r7
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x1c0>
 8001a16:	e0eb      	b.n	8001bf0 <__aeabi_dadd+0x398>
 8001a18:	2701      	movs	r7, #1
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	2838      	cmp	r0, #56	@ 0x38
 8001a1e:	dc11      	bgt.n	8001a44 <__aeabi_dadd+0x1ec>
 8001a20:	291f      	cmp	r1, #31
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dadd+0x1ce>
 8001a24:	e1c7      	b.n	8001db6 <__aeabi_dadd+0x55e>
 8001a26:	2720      	movs	r7, #32
 8001a28:	1a78      	subs	r0, r7, r1
 8001a2a:	001f      	movs	r7, r3
 8001a2c:	4684      	mov	ip, r0
 8001a2e:	4087      	lsls	r7, r0
 8001a30:	0010      	movs	r0, r2
 8001a32:	40c8      	lsrs	r0, r1
 8001a34:	4307      	orrs	r7, r0
 8001a36:	4660      	mov	r0, ip
 8001a38:	4082      	lsls	r2, r0
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e50      	subs	r0, r2, #1
 8001a3e:	4182      	sbcs	r2, r0
 8001a40:	18f6      	adds	r6, r6, r3
 8001a42:	4317      	orrs	r7, r2
 8001a44:	444f      	add	r7, r9
 8001a46:	454f      	cmp	r7, r9
 8001a48:	4180      	sbcs	r0, r0
 8001a4a:	4240      	negs	r0, r0
 8001a4c:	1836      	adds	r6, r6, r0
 8001a4e:	0233      	lsls	r3, r6, #8
 8001a50:	d557      	bpl.n	8001b02 <__aeabi_dadd+0x2aa>
 8001a52:	4b64      	ldr	r3, [pc, #400]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a54:	3401      	adds	r4, #1
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d045      	beq.n	8001ae6 <__aeabi_dadd+0x28e>
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4b62      	ldr	r3, [pc, #392]	@ (8001be8 <__aeabi_dadd+0x390>)
 8001a5e:	087a      	lsrs	r2, r7, #1
 8001a60:	401e      	ands	r6, r3
 8001a62:	4039      	ands	r1, r7
 8001a64:	430a      	orrs	r2, r1
 8001a66:	07f7      	lsls	r7, r6, #31
 8001a68:	4317      	orrs	r7, r2
 8001a6a:	0876      	lsrs	r6, r6, #1
 8001a6c:	e771      	b.n	8001952 <__aeabi_dadd+0xfa>
 8001a6e:	001f      	movs	r7, r3
 8001a70:	4317      	orrs	r7, r2
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x21e>
 8001a74:	e0ad      	b.n	8001bd2 <__aeabi_dadd+0x37a>
 8001a76:	1e4f      	subs	r7, r1, #1
 8001a78:	46bc      	mov	ip, r7
 8001a7a:	2901      	cmp	r1, #1
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dadd+0x228>
 8001a7e:	e182      	b.n	8001d86 <__aeabi_dadd+0x52e>
 8001a80:	4f58      	ldr	r7, [pc, #352]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a82:	42b9      	cmp	r1, r7
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dadd+0x230>
 8001a86:	e190      	b.n	8001daa <__aeabi_dadd+0x552>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	2701      	movs	r7, #1
 8001a8c:	2938      	cmp	r1, #56	@ 0x38
 8001a8e:	dd00      	ble.n	8001a92 <__aeabi_dadd+0x23a>
 8001a90:	e72e      	b.n	80018f0 <__aeabi_dadd+0x98>
 8001a92:	e718      	b.n	80018c6 <__aeabi_dadd+0x6e>
 8001a94:	4f55      	ldr	r7, [pc, #340]	@ (8001bec <__aeabi_dadd+0x394>)
 8001a96:	1c61      	adds	r1, r4, #1
 8001a98:	4239      	tst	r1, r7
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_dadd+0x246>
 8001a9c:	e0d0      	b.n	8001c40 <__aeabi_dadd+0x3e8>
 8001a9e:	0031      	movs	r1, r6
 8001aa0:	4648      	mov	r0, r9
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	4317      	orrs	r7, r2
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d000      	beq.n	8001aae <__aeabi_dadd+0x256>
 8001aac:	e13d      	b.n	8001d2a <__aeabi_dadd+0x4d2>
 8001aae:	2900      	cmp	r1, #0
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dadd+0x25c>
 8001ab2:	e1bc      	b.n	8001e2e <__aeabi_dadd+0x5d6>
 8001ab4:	2f00      	cmp	r7, #0
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dadd+0x262>
 8001ab8:	e1bf      	b.n	8001e3a <__aeabi_dadd+0x5e2>
 8001aba:	464b      	mov	r3, r9
 8001abc:	2100      	movs	r1, #0
 8001abe:	08d8      	lsrs	r0, r3, #3
 8001ac0:	0777      	lsls	r7, r6, #29
 8001ac2:	4307      	orrs	r7, r0
 8001ac4:	08f0      	lsrs	r0, r6, #3
 8001ac6:	0306      	lsls	r6, r0, #12
 8001ac8:	054c      	lsls	r4, r1, #21
 8001aca:	0b36      	lsrs	r6, r6, #12
 8001acc:	0d64      	lsrs	r4, r4, #21
 8001ace:	e00c      	b.n	8001aea <__aeabi_dadd+0x292>
 8001ad0:	4f44      	ldr	r7, [pc, #272]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001ad2:	42bc      	cmp	r4, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dadd+0x280>
 8001ad6:	e08b      	b.n	8001bf0 <__aeabi_dadd+0x398>
 8001ad8:	2701      	movs	r7, #1
 8001ada:	2938      	cmp	r1, #56	@ 0x38
 8001adc:	dcb2      	bgt.n	8001a44 <__aeabi_dadd+0x1ec>
 8001ade:	2780      	movs	r7, #128	@ 0x80
 8001ae0:	043f      	lsls	r7, r7, #16
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	e79c      	b.n	8001a20 <__aeabi_dadd+0x1c8>
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	2700      	movs	r7, #0
 8001aea:	0524      	lsls	r4, r4, #20
 8001aec:	4334      	orrs	r4, r6
 8001aee:	07ed      	lsls	r5, r5, #31
 8001af0:	432c      	orrs	r4, r5
 8001af2:	0038      	movs	r0, r7
 8001af4:	0021      	movs	r1, r4
 8001af6:	b002      	add	sp, #8
 8001af8:	bce0      	pop	{r5, r6, r7}
 8001afa:	46ba      	mov	sl, r7
 8001afc:	46b1      	mov	r9, r6
 8001afe:	46a8      	mov	r8, r5
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	077b      	lsls	r3, r7, #29
 8001b04:	d004      	beq.n	8001b10 <__aeabi_dadd+0x2b8>
 8001b06:	230f      	movs	r3, #15
 8001b08:	403b      	ands	r3, r7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d000      	beq.n	8001b10 <__aeabi_dadd+0x2b8>
 8001b0e:	e728      	b.n	8001962 <__aeabi_dadd+0x10a>
 8001b10:	08f8      	lsrs	r0, r7, #3
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b14:	0777      	lsls	r7, r6, #29
 8001b16:	4307      	orrs	r7, r0
 8001b18:	08f0      	lsrs	r0, r6, #3
 8001b1a:	429c      	cmp	r4, r3
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dadd+0x2c8>
 8001b1e:	e24a      	b.n	8001fb6 <__aeabi_dadd+0x75e>
 8001b20:	003b      	movs	r3, r7
 8001b22:	4303      	orrs	r3, r0
 8001b24:	d059      	beq.n	8001bda <__aeabi_dadd+0x382>
 8001b26:	2680      	movs	r6, #128	@ 0x80
 8001b28:	0336      	lsls	r6, r6, #12
 8001b2a:	4306      	orrs	r6, r0
 8001b2c:	0336      	lsls	r6, r6, #12
 8001b2e:	4c2d      	ldr	r4, [pc, #180]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b30:	0b36      	lsrs	r6, r6, #12
 8001b32:	e7da      	b.n	8001aea <__aeabi_dadd+0x292>
 8001b34:	2900      	cmp	r1, #0
 8001b36:	d061      	beq.n	8001bfc <__aeabi_dadd+0x3a4>
 8001b38:	4641      	mov	r1, r8
 8001b3a:	1b09      	subs	r1, r1, r4
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dadd+0x2ea>
 8001b40:	e0b9      	b.n	8001cb6 <__aeabi_dadd+0x45e>
 8001b42:	4c28      	ldr	r4, [pc, #160]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b44:	45a0      	cmp	r8, r4
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dadd+0x2f2>
 8001b48:	e1a5      	b.n	8001e96 <__aeabi_dadd+0x63e>
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	2938      	cmp	r1, #56	@ 0x38
 8001b4e:	dc13      	bgt.n	8001b78 <__aeabi_dadd+0x320>
 8001b50:	2480      	movs	r4, #128	@ 0x80
 8001b52:	0424      	lsls	r4, r4, #16
 8001b54:	4326      	orrs	r6, r4
 8001b56:	291f      	cmp	r1, #31
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_dadd+0x304>
 8001b5a:	e1c8      	b.n	8001eee <__aeabi_dadd+0x696>
 8001b5c:	2420      	movs	r4, #32
 8001b5e:	0037      	movs	r7, r6
 8001b60:	4648      	mov	r0, r9
 8001b62:	1a64      	subs	r4, r4, r1
 8001b64:	40a7      	lsls	r7, r4
 8001b66:	40c8      	lsrs	r0, r1
 8001b68:	4307      	orrs	r7, r0
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	40a0      	lsls	r0, r4
 8001b6e:	40ce      	lsrs	r6, r1
 8001b70:	1e44      	subs	r4, r0, #1
 8001b72:	41a0      	sbcs	r0, r4
 8001b74:	199b      	adds	r3, r3, r6
 8001b76:	4307      	orrs	r7, r0
 8001b78:	18bf      	adds	r7, r7, r2
 8001b7a:	4297      	cmp	r7, r2
 8001b7c:	4192      	sbcs	r2, r2
 8001b7e:	4252      	negs	r2, r2
 8001b80:	4644      	mov	r4, r8
 8001b82:	18d6      	adds	r6, r2, r3
 8001b84:	e763      	b.n	8001a4e <__aeabi_dadd+0x1f6>
 8001b86:	0038      	movs	r0, r7
 8001b88:	f7fe fcdc 	bl	8000544 <__clzsi2>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	3318      	adds	r3, #24
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dadd+0x33e>
 8001b94:	e6bf      	b.n	8001916 <__aeabi_dadd+0xbe>
 8001b96:	003a      	movs	r2, r7
 8001b98:	3808      	subs	r0, #8
 8001b9a:	4082      	lsls	r2, r0
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dadd+0x34a>
 8001ba0:	e083      	b.n	8001caa <__aeabi_dadd+0x452>
 8001ba2:	1b1b      	subs	r3, r3, r4
 8001ba4:	1c58      	adds	r0, r3, #1
 8001ba6:	281f      	cmp	r0, #31
 8001ba8:	dc00      	bgt.n	8001bac <__aeabi_dadd+0x354>
 8001baa:	e1b4      	b.n	8001f16 <__aeabi_dadd+0x6be>
 8001bac:	0017      	movs	r7, r2
 8001bae:	3b1f      	subs	r3, #31
 8001bb0:	40df      	lsrs	r7, r3
 8001bb2:	2820      	cmp	r0, #32
 8001bb4:	d005      	beq.n	8001bc2 <__aeabi_dadd+0x36a>
 8001bb6:	2340      	movs	r3, #64	@ 0x40
 8001bb8:	1a1b      	subs	r3, r3, r0
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	1e53      	subs	r3, r2, #1
 8001bbe:	419a      	sbcs	r2, r3
 8001bc0:	4317      	orrs	r7, r2
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2f00      	cmp	r7, #0
 8001bc6:	d00a      	beq.n	8001bde <__aeabi_dadd+0x386>
 8001bc8:	077b      	lsls	r3, r7, #29
 8001bca:	d000      	beq.n	8001bce <__aeabi_dadd+0x376>
 8001bcc:	e6c4      	b.n	8001958 <__aeabi_dadd+0x100>
 8001bce:	0026      	movs	r6, r4
 8001bd0:	e79e      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	000c      	movs	r4, r1
 8001bd6:	08d8      	lsrs	r0, r3, #3
 8001bd8:	e79b      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001bda:	2700      	movs	r7, #0
 8001bdc:	4c01      	ldr	r4, [pc, #4]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001bde:	2600      	movs	r6, #0
 8001be0:	e783      	b.n	8001aea <__aeabi_dadd+0x292>
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	ff7fffff 	.word	0xff7fffff
 8001bec:	000007fe 	.word	0x000007fe
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	0777      	lsls	r7, r6, #29
 8001bf4:	08d8      	lsrs	r0, r3, #3
 8001bf6:	4307      	orrs	r7, r0
 8001bf8:	08f0      	lsrs	r0, r6, #3
 8001bfa:	e791      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001bfc:	4fcd      	ldr	r7, [pc, #820]	@ (8001f34 <__aeabi_dadd+0x6dc>)
 8001bfe:	1c61      	adds	r1, r4, #1
 8001c00:	4239      	tst	r1, r7
 8001c02:	d16b      	bne.n	8001cdc <__aeabi_dadd+0x484>
 8001c04:	0031      	movs	r1, r6
 8001c06:	4648      	mov	r0, r9
 8001c08:	4301      	orrs	r1, r0
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dadd+0x3b8>
 8001c0e:	e14b      	b.n	8001ea8 <__aeabi_dadd+0x650>
 8001c10:	001f      	movs	r7, r3
 8001c12:	4317      	orrs	r7, r2
 8001c14:	2900      	cmp	r1, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dadd+0x3c2>
 8001c18:	e181      	b.n	8001f1e <__aeabi_dadd+0x6c6>
 8001c1a:	2f00      	cmp	r7, #0
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dadd+0x3c8>
 8001c1e:	e74c      	b.n	8001aba <__aeabi_dadd+0x262>
 8001c20:	444a      	add	r2, r9
 8001c22:	454a      	cmp	r2, r9
 8001c24:	4180      	sbcs	r0, r0
 8001c26:	18f6      	adds	r6, r6, r3
 8001c28:	4240      	negs	r0, r0
 8001c2a:	1836      	adds	r6, r6, r0
 8001c2c:	0233      	lsls	r3, r6, #8
 8001c2e:	d500      	bpl.n	8001c32 <__aeabi_dadd+0x3da>
 8001c30:	e1b0      	b.n	8001f94 <__aeabi_dadd+0x73c>
 8001c32:	0017      	movs	r7, r2
 8001c34:	4691      	mov	r9, r2
 8001c36:	4337      	orrs	r7, r6
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dadd+0x3e4>
 8001c3a:	e73e      	b.n	8001aba <__aeabi_dadd+0x262>
 8001c3c:	2600      	movs	r6, #0
 8001c3e:	e754      	b.n	8001aea <__aeabi_dadd+0x292>
 8001c40:	4649      	mov	r1, r9
 8001c42:	1a89      	subs	r1, r1, r2
 8001c44:	4688      	mov	r8, r1
 8001c46:	45c1      	cmp	r9, r8
 8001c48:	41bf      	sbcs	r7, r7
 8001c4a:	1af1      	subs	r1, r6, r3
 8001c4c:	427f      	negs	r7, r7
 8001c4e:	1bc9      	subs	r1, r1, r7
 8001c50:	020f      	lsls	r7, r1, #8
 8001c52:	d461      	bmi.n	8001d18 <__aeabi_dadd+0x4c0>
 8001c54:	4647      	mov	r7, r8
 8001c56:	430f      	orrs	r7, r1
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dadd+0x404>
 8001c5a:	e0bd      	b.n	8001dd8 <__aeabi_dadd+0x580>
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	4647      	mov	r7, r8
 8001c60:	e651      	b.n	8001906 <__aeabi_dadd+0xae>
 8001c62:	4cb5      	ldr	r4, [pc, #724]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001c64:	45a0      	cmp	r8, r4
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dadd+0x412>
 8001c68:	e100      	b.n	8001e6c <__aeabi_dadd+0x614>
 8001c6a:	2701      	movs	r7, #1
 8001c6c:	2938      	cmp	r1, #56	@ 0x38
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dadd+0x41a>
 8001c70:	e6b8      	b.n	80019e4 <__aeabi_dadd+0x18c>
 8001c72:	2480      	movs	r4, #128	@ 0x80
 8001c74:	0424      	lsls	r4, r4, #16
 8001c76:	4326      	orrs	r6, r4
 8001c78:	e6a3      	b.n	80019c2 <__aeabi_dadd+0x16a>
 8001c7a:	4eb0      	ldr	r6, [pc, #704]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001c7c:	1ae4      	subs	r4, r4, r3
 8001c7e:	4016      	ands	r6, r2
 8001c80:	077b      	lsls	r3, r7, #29
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dadd+0x42e>
 8001c84:	e73f      	b.n	8001b06 <__aeabi_dadd+0x2ae>
 8001c86:	e743      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001c88:	000f      	movs	r7, r1
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	3f20      	subs	r7, #32
 8001c8e:	40f8      	lsrs	r0, r7
 8001c90:	4684      	mov	ip, r0
 8001c92:	2920      	cmp	r1, #32
 8001c94:	d003      	beq.n	8001c9e <__aeabi_dadd+0x446>
 8001c96:	2740      	movs	r7, #64	@ 0x40
 8001c98:	1a79      	subs	r1, r7, r1
 8001c9a:	408b      	lsls	r3, r1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	1e53      	subs	r3, r2, #1
 8001ca0:	419a      	sbcs	r2, r3
 8001ca2:	4663      	mov	r3, ip
 8001ca4:	0017      	movs	r7, r2
 8001ca6:	431f      	orrs	r7, r3
 8001ca8:	e622      	b.n	80018f0 <__aeabi_dadd+0x98>
 8001caa:	48a4      	ldr	r0, [pc, #656]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001cac:	1ae1      	subs	r1, r4, r3
 8001cae:	4010      	ands	r0, r2
 8001cb0:	0747      	lsls	r7, r0, #29
 8001cb2:	08c0      	lsrs	r0, r0, #3
 8001cb4:	e707      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001cb6:	0034      	movs	r4, r6
 8001cb8:	4648      	mov	r0, r9
 8001cba:	4304      	orrs	r4, r0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dadd+0x468>
 8001cbe:	e0fa      	b.n	8001eb6 <__aeabi_dadd+0x65e>
 8001cc0:	1e4c      	subs	r4, r1, #1
 8001cc2:	2901      	cmp	r1, #1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dadd+0x470>
 8001cc6:	e0d7      	b.n	8001e78 <__aeabi_dadd+0x620>
 8001cc8:	4f9b      	ldr	r7, [pc, #620]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001cca:	42b9      	cmp	r1, r7
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dadd+0x478>
 8001cce:	e0e2      	b.n	8001e96 <__aeabi_dadd+0x63e>
 8001cd0:	2701      	movs	r7, #1
 8001cd2:	2c38      	cmp	r4, #56	@ 0x38
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_dadd+0x480>
 8001cd6:	e74f      	b.n	8001b78 <__aeabi_dadd+0x320>
 8001cd8:	0021      	movs	r1, r4
 8001cda:	e73c      	b.n	8001b56 <__aeabi_dadd+0x2fe>
 8001cdc:	4c96      	ldr	r4, [pc, #600]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001cde:	42a1      	cmp	r1, r4
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dadd+0x48c>
 8001ce2:	e0dd      	b.n	8001ea0 <__aeabi_dadd+0x648>
 8001ce4:	444a      	add	r2, r9
 8001ce6:	454a      	cmp	r2, r9
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	18f3      	adds	r3, r6, r3
 8001cec:	4240      	negs	r0, r0
 8001cee:	1818      	adds	r0, r3, r0
 8001cf0:	07c7      	lsls	r7, r0, #31
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	0846      	lsrs	r6, r0, #1
 8001cf8:	0752      	lsls	r2, r2, #29
 8001cfa:	d005      	beq.n	8001d08 <__aeabi_dadd+0x4b0>
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	000c      	movs	r4, r1
 8001d00:	403a      	ands	r2, r7
 8001d02:	2a04      	cmp	r2, #4
 8001d04:	d000      	beq.n	8001d08 <__aeabi_dadd+0x4b0>
 8001d06:	e62c      	b.n	8001962 <__aeabi_dadd+0x10a>
 8001d08:	0776      	lsls	r6, r6, #29
 8001d0a:	08ff      	lsrs	r7, r7, #3
 8001d0c:	4337      	orrs	r7, r6
 8001d0e:	0900      	lsrs	r0, r0, #4
 8001d10:	e6d9      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001d12:	2700      	movs	r7, #0
 8001d14:	2600      	movs	r6, #0
 8001d16:	e6e8      	b.n	8001aea <__aeabi_dadd+0x292>
 8001d18:	4649      	mov	r1, r9
 8001d1a:	1a57      	subs	r7, r2, r1
 8001d1c:	42ba      	cmp	r2, r7
 8001d1e:	4192      	sbcs	r2, r2
 8001d20:	1b9e      	subs	r6, r3, r6
 8001d22:	4252      	negs	r2, r2
 8001d24:	4665      	mov	r5, ip
 8001d26:	1ab6      	subs	r6, r6, r2
 8001d28:	e5ed      	b.n	8001906 <__aeabi_dadd+0xae>
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dadd+0x4d8>
 8001d2e:	e0c6      	b.n	8001ebe <__aeabi_dadd+0x666>
 8001d30:	2f00      	cmp	r7, #0
 8001d32:	d167      	bne.n	8001e04 <__aeabi_dadd+0x5ac>
 8001d34:	2680      	movs	r6, #128	@ 0x80
 8001d36:	2500      	movs	r5, #0
 8001d38:	4c7f      	ldr	r4, [pc, #508]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001d3a:	0336      	lsls	r6, r6, #12
 8001d3c:	e6d5      	b.n	8001aea <__aeabi_dadd+0x292>
 8001d3e:	4665      	mov	r5, ip
 8001d40:	000c      	movs	r4, r1
 8001d42:	001e      	movs	r6, r3
 8001d44:	08d0      	lsrs	r0, r2, #3
 8001d46:	e6e4      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001d48:	444a      	add	r2, r9
 8001d4a:	454a      	cmp	r2, r9
 8001d4c:	4180      	sbcs	r0, r0
 8001d4e:	18f3      	adds	r3, r6, r3
 8001d50:	4240      	negs	r0, r0
 8001d52:	1818      	adds	r0, r3, r0
 8001d54:	0011      	movs	r1, r2
 8001d56:	0203      	lsls	r3, r0, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dadd+0x504>
 8001d5a:	e096      	b.n	8001e8a <__aeabi_dadd+0x632>
 8001d5c:	4b77      	ldr	r3, [pc, #476]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001d5e:	0849      	lsrs	r1, r1, #1
 8001d60:	4018      	ands	r0, r3
 8001d62:	07c3      	lsls	r3, r0, #31
 8001d64:	430b      	orrs	r3, r1
 8001d66:	0844      	lsrs	r4, r0, #1
 8001d68:	0749      	lsls	r1, r1, #29
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dadd+0x516>
 8001d6c:	e129      	b.n	8001fc2 <__aeabi_dadd+0x76a>
 8001d6e:	220f      	movs	r2, #15
 8001d70:	401a      	ands	r2, r3
 8001d72:	2a04      	cmp	r2, #4
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dadd+0x520>
 8001d76:	e0ea      	b.n	8001f4e <__aeabi_dadd+0x6f6>
 8001d78:	1d1f      	adds	r7, r3, #4
 8001d7a:	429f      	cmp	r7, r3
 8001d7c:	41b6      	sbcs	r6, r6
 8001d7e:	4276      	negs	r6, r6
 8001d80:	1936      	adds	r6, r6, r4
 8001d82:	2402      	movs	r4, #2
 8001d84:	e6c4      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001d86:	4649      	mov	r1, r9
 8001d88:	1a8f      	subs	r7, r1, r2
 8001d8a:	45b9      	cmp	r9, r7
 8001d8c:	4180      	sbcs	r0, r0
 8001d8e:	1af6      	subs	r6, r6, r3
 8001d90:	4240      	negs	r0, r0
 8001d92:	1a36      	subs	r6, r6, r0
 8001d94:	0233      	lsls	r3, r6, #8
 8001d96:	d406      	bmi.n	8001da6 <__aeabi_dadd+0x54e>
 8001d98:	0773      	lsls	r3, r6, #29
 8001d9a:	08ff      	lsrs	r7, r7, #3
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	431f      	orrs	r7, r3
 8001da0:	08f0      	lsrs	r0, r6, #3
 8001da2:	e690      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001da4:	4665      	mov	r5, ip
 8001da6:	2401      	movs	r4, #1
 8001da8:	e5ab      	b.n	8001902 <__aeabi_dadd+0xaa>
 8001daa:	464b      	mov	r3, r9
 8001dac:	0777      	lsls	r7, r6, #29
 8001dae:	08d8      	lsrs	r0, r3, #3
 8001db0:	4307      	orrs	r7, r0
 8001db2:	08f0      	lsrs	r0, r6, #3
 8001db4:	e6b4      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001db6:	000f      	movs	r7, r1
 8001db8:	0018      	movs	r0, r3
 8001dba:	3f20      	subs	r7, #32
 8001dbc:	40f8      	lsrs	r0, r7
 8001dbe:	4684      	mov	ip, r0
 8001dc0:	2920      	cmp	r1, #32
 8001dc2:	d003      	beq.n	8001dcc <__aeabi_dadd+0x574>
 8001dc4:	2740      	movs	r7, #64	@ 0x40
 8001dc6:	1a79      	subs	r1, r7, r1
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	1e53      	subs	r3, r2, #1
 8001dce:	419a      	sbcs	r2, r3
 8001dd0:	4663      	mov	r3, ip
 8001dd2:	0017      	movs	r7, r2
 8001dd4:	431f      	orrs	r7, r3
 8001dd6:	e635      	b.n	8001a44 <__aeabi_dadd+0x1ec>
 8001dd8:	2500      	movs	r5, #0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2600      	movs	r6, #0
 8001dde:	e684      	b.n	8001aea <__aeabi_dadd+0x292>
 8001de0:	000c      	movs	r4, r1
 8001de2:	0035      	movs	r5, r6
 8001de4:	3c20      	subs	r4, #32
 8001de6:	40e5      	lsrs	r5, r4
 8001de8:	2920      	cmp	r1, #32
 8001dea:	d005      	beq.n	8001df8 <__aeabi_dadd+0x5a0>
 8001dec:	2440      	movs	r4, #64	@ 0x40
 8001dee:	1a61      	subs	r1, r4, r1
 8001df0:	408e      	lsls	r6, r1
 8001df2:	4649      	mov	r1, r9
 8001df4:	4331      	orrs	r1, r6
 8001df6:	4689      	mov	r9, r1
 8001df8:	4648      	mov	r0, r9
 8001dfa:	1e41      	subs	r1, r0, #1
 8001dfc:	4188      	sbcs	r0, r1
 8001dfe:	0007      	movs	r7, r0
 8001e00:	432f      	orrs	r7, r5
 8001e02:	e5ef      	b.n	80019e4 <__aeabi_dadd+0x18c>
 8001e04:	08d2      	lsrs	r2, r2, #3
 8001e06:	075f      	lsls	r7, r3, #29
 8001e08:	4665      	mov	r5, ip
 8001e0a:	4317      	orrs	r7, r2
 8001e0c:	08d8      	lsrs	r0, r3, #3
 8001e0e:	e687      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001e10:	1a17      	subs	r7, r2, r0
 8001e12:	42ba      	cmp	r2, r7
 8001e14:	4192      	sbcs	r2, r2
 8001e16:	1b9e      	subs	r6, r3, r6
 8001e18:	4252      	negs	r2, r2
 8001e1a:	1ab6      	subs	r6, r6, r2
 8001e1c:	0233      	lsls	r3, r6, #8
 8001e1e:	d4c1      	bmi.n	8001da4 <__aeabi_dadd+0x54c>
 8001e20:	0773      	lsls	r3, r6, #29
 8001e22:	08ff      	lsrs	r7, r7, #3
 8001e24:	4665      	mov	r5, ip
 8001e26:	2101      	movs	r1, #1
 8001e28:	431f      	orrs	r7, r3
 8001e2a:	08f0      	lsrs	r0, r6, #3
 8001e2c:	e64b      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001e2e:	2f00      	cmp	r7, #0
 8001e30:	d07b      	beq.n	8001f2a <__aeabi_dadd+0x6d2>
 8001e32:	4665      	mov	r5, ip
 8001e34:	001e      	movs	r6, r3
 8001e36:	4691      	mov	r9, r2
 8001e38:	e63f      	b.n	8001aba <__aeabi_dadd+0x262>
 8001e3a:	1a81      	subs	r1, r0, r2
 8001e3c:	4688      	mov	r8, r1
 8001e3e:	45c1      	cmp	r9, r8
 8001e40:	41a4      	sbcs	r4, r4
 8001e42:	1af1      	subs	r1, r6, r3
 8001e44:	4264      	negs	r4, r4
 8001e46:	1b09      	subs	r1, r1, r4
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	0424      	lsls	r4, r4, #16
 8001e4c:	4221      	tst	r1, r4
 8001e4e:	d077      	beq.n	8001f40 <__aeabi_dadd+0x6e8>
 8001e50:	1a10      	subs	r0, r2, r0
 8001e52:	4282      	cmp	r2, r0
 8001e54:	4192      	sbcs	r2, r2
 8001e56:	0007      	movs	r7, r0
 8001e58:	1b9e      	subs	r6, r3, r6
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	1ab6      	subs	r6, r6, r2
 8001e5e:	4337      	orrs	r7, r6
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dadd+0x60c>
 8001e62:	e0a0      	b.n	8001fa6 <__aeabi_dadd+0x74e>
 8001e64:	4665      	mov	r5, ip
 8001e66:	2400      	movs	r4, #0
 8001e68:	2600      	movs	r6, #0
 8001e6a:	e63e      	b.n	8001aea <__aeabi_dadd+0x292>
 8001e6c:	075f      	lsls	r7, r3, #29
 8001e6e:	08d2      	lsrs	r2, r2, #3
 8001e70:	4665      	mov	r5, ip
 8001e72:	4317      	orrs	r7, r2
 8001e74:	08d8      	lsrs	r0, r3, #3
 8001e76:	e653      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001e78:	1881      	adds	r1, r0, r2
 8001e7a:	4291      	cmp	r1, r2
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	18f0      	adds	r0, r6, r3
 8001e80:	4252      	negs	r2, r2
 8001e82:	1880      	adds	r0, r0, r2
 8001e84:	0203      	lsls	r3, r0, #8
 8001e86:	d500      	bpl.n	8001e8a <__aeabi_dadd+0x632>
 8001e88:	e768      	b.n	8001d5c <__aeabi_dadd+0x504>
 8001e8a:	0747      	lsls	r7, r0, #29
 8001e8c:	08c9      	lsrs	r1, r1, #3
 8001e8e:	430f      	orrs	r7, r1
 8001e90:	08c0      	lsrs	r0, r0, #3
 8001e92:	2101      	movs	r1, #1
 8001e94:	e617      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	075f      	lsls	r7, r3, #29
 8001e9a:	4317      	orrs	r7, r2
 8001e9c:	08d8      	lsrs	r0, r3, #3
 8001e9e:	e63f      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001ea0:	000c      	movs	r4, r1
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	2700      	movs	r7, #0
 8001ea6:	e620      	b.n	8001aea <__aeabi_dadd+0x292>
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d156      	bne.n	8001f5a <__aeabi_dadd+0x702>
 8001eac:	075f      	lsls	r7, r3, #29
 8001eae:	08d2      	lsrs	r2, r2, #3
 8001eb0:	4317      	orrs	r7, r2
 8001eb2:	08d8      	lsrs	r0, r3, #3
 8001eb4:	e634      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001eb6:	000c      	movs	r4, r1
 8001eb8:	001e      	movs	r6, r3
 8001eba:	08d0      	lsrs	r0, r2, #3
 8001ebc:	e629      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001ebe:	08c1      	lsrs	r1, r0, #3
 8001ec0:	0770      	lsls	r0, r6, #29
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	08f0      	lsrs	r0, r6, #3
 8001ec6:	2f00      	cmp	r7, #0
 8001ec8:	d062      	beq.n	8001f90 <__aeabi_dadd+0x738>
 8001eca:	2480      	movs	r4, #128	@ 0x80
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	4220      	tst	r0, r4
 8001ed0:	d007      	beq.n	8001ee2 <__aeabi_dadd+0x68a>
 8001ed2:	08de      	lsrs	r6, r3, #3
 8001ed4:	4226      	tst	r6, r4
 8001ed6:	d104      	bne.n	8001ee2 <__aeabi_dadd+0x68a>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	0030      	movs	r0, r6
 8001edc:	08d1      	lsrs	r1, r2, #3
 8001ede:	075b      	lsls	r3, r3, #29
 8001ee0:	4319      	orrs	r1, r3
 8001ee2:	0f4f      	lsrs	r7, r1, #29
 8001ee4:	00c9      	lsls	r1, r1, #3
 8001ee6:	08c9      	lsrs	r1, r1, #3
 8001ee8:	077f      	lsls	r7, r7, #29
 8001eea:	430f      	orrs	r7, r1
 8001eec:	e618      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001eee:	000c      	movs	r4, r1
 8001ef0:	0030      	movs	r0, r6
 8001ef2:	3c20      	subs	r4, #32
 8001ef4:	40e0      	lsrs	r0, r4
 8001ef6:	4684      	mov	ip, r0
 8001ef8:	2920      	cmp	r1, #32
 8001efa:	d005      	beq.n	8001f08 <__aeabi_dadd+0x6b0>
 8001efc:	2440      	movs	r4, #64	@ 0x40
 8001efe:	1a61      	subs	r1, r4, r1
 8001f00:	408e      	lsls	r6, r1
 8001f02:	4649      	mov	r1, r9
 8001f04:	4331      	orrs	r1, r6
 8001f06:	4689      	mov	r9, r1
 8001f08:	4648      	mov	r0, r9
 8001f0a:	1e41      	subs	r1, r0, #1
 8001f0c:	4188      	sbcs	r0, r1
 8001f0e:	4661      	mov	r1, ip
 8001f10:	0007      	movs	r7, r0
 8001f12:	430f      	orrs	r7, r1
 8001f14:	e630      	b.n	8001b78 <__aeabi_dadd+0x320>
 8001f16:	2120      	movs	r1, #32
 8001f18:	2700      	movs	r7, #0
 8001f1a:	1a09      	subs	r1, r1, r0
 8001f1c:	e50e      	b.n	800193c <__aeabi_dadd+0xe4>
 8001f1e:	001e      	movs	r6, r3
 8001f20:	2f00      	cmp	r7, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dadd+0x6ce>
 8001f24:	e522      	b.n	800196c <__aeabi_dadd+0x114>
 8001f26:	2400      	movs	r4, #0
 8001f28:	e758      	b.n	8001ddc <__aeabi_dadd+0x584>
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e5db      	b.n	8001aea <__aeabi_dadd+0x292>
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	000007fe 	.word	0x000007fe
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	ff7fffff 	.word	0xff7fffff
 8001f40:	4647      	mov	r7, r8
 8001f42:	430f      	orrs	r7, r1
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dadd+0x6f0>
 8001f46:	e747      	b.n	8001dd8 <__aeabi_dadd+0x580>
 8001f48:	000e      	movs	r6, r1
 8001f4a:	46c1      	mov	r9, r8
 8001f4c:	e5b5      	b.n	8001aba <__aeabi_dadd+0x262>
 8001f4e:	08df      	lsrs	r7, r3, #3
 8001f50:	0764      	lsls	r4, r4, #29
 8001f52:	2102      	movs	r1, #2
 8001f54:	4327      	orrs	r7, r4
 8001f56:	0900      	lsrs	r0, r0, #4
 8001f58:	e5b5      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	08c0      	lsrs	r0, r0, #3
 8001f5e:	0777      	lsls	r7, r6, #29
 8001f60:	4307      	orrs	r7, r0
 8001f62:	4311      	orrs	r1, r2
 8001f64:	08f0      	lsrs	r0, r6, #3
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dadd+0x714>
 8001f6a:	e5d9      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f6c:	2180      	movs	r1, #128	@ 0x80
 8001f6e:	0309      	lsls	r1, r1, #12
 8001f70:	4208      	tst	r0, r1
 8001f72:	d007      	beq.n	8001f84 <__aeabi_dadd+0x72c>
 8001f74:	08dc      	lsrs	r4, r3, #3
 8001f76:	420c      	tst	r4, r1
 8001f78:	d104      	bne.n	8001f84 <__aeabi_dadd+0x72c>
 8001f7a:	08d2      	lsrs	r2, r2, #3
 8001f7c:	075b      	lsls	r3, r3, #29
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	0017      	movs	r7, r2
 8001f82:	0020      	movs	r0, r4
 8001f84:	0f7b      	lsrs	r3, r7, #29
 8001f86:	00ff      	lsls	r7, r7, #3
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	075b      	lsls	r3, r3, #29
 8001f8c:	431f      	orrs	r7, r3
 8001f8e:	e5c7      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f90:	000f      	movs	r7, r1
 8001f92:	e5c5      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <__aeabi_dadd+0x788>)
 8001f96:	08d2      	lsrs	r2, r2, #3
 8001f98:	4033      	ands	r3, r6
 8001f9a:	075f      	lsls	r7, r3, #29
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	2401      	movs	r4, #1
 8001fa0:	4317      	orrs	r7, r2
 8001fa2:	0b1e      	lsrs	r6, r3, #12
 8001fa4:	e5a1      	b.n	8001aea <__aeabi_dadd+0x292>
 8001fa6:	4226      	tst	r6, r4
 8001fa8:	d012      	beq.n	8001fd0 <__aeabi_dadd+0x778>
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_dadd+0x788>)
 8001fac:	4665      	mov	r5, ip
 8001fae:	0002      	movs	r2, r0
 8001fb0:	2401      	movs	r4, #1
 8001fb2:	401e      	ands	r6, r3
 8001fb4:	e4e6      	b.n	8001984 <__aeabi_dadd+0x12c>
 8001fb6:	0021      	movs	r1, r4
 8001fb8:	e585      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fba:	0017      	movs	r7, r2
 8001fbc:	e5a8      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	e4d4      	b.n	800196c <__aeabi_dadd+0x114>
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0764      	lsls	r4, r4, #29
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	0027      	movs	r7, r4
 8001fca:	2102      	movs	r1, #2
 8001fcc:	0900      	lsrs	r0, r0, #4
 8001fce:	e57a      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fd0:	08c0      	lsrs	r0, r0, #3
 8001fd2:	0777      	lsls	r7, r6, #29
 8001fd4:	4307      	orrs	r7, r0
 8001fd6:	4665      	mov	r5, ip
 8001fd8:	2100      	movs	r1, #0
 8001fda:	08f0      	lsrs	r0, r6, #3
 8001fdc:	e573      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	ff7fffff 	.word	0xff7fffff

08001fe4 <__aeabi_ddiv>:
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	46de      	mov	lr, fp
 8001fe8:	4645      	mov	r5, r8
 8001fea:	4657      	mov	r7, sl
 8001fec:	464e      	mov	r6, r9
 8001fee:	b5e0      	push	{r5, r6, r7, lr}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	9200      	str	r2, [sp, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	030b      	lsls	r3, r1, #12
 8001ff8:	0b1b      	lsrs	r3, r3, #12
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	0fca      	lsrs	r2, r1, #31
 8001ffe:	004b      	lsls	r3, r1, #1
 8002000:	0004      	movs	r4, r0
 8002002:	4680      	mov	r8, r0
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	d100      	bne.n	800200c <__aeabi_ddiv+0x28>
 800200a:	e098      	b.n	800213e <__aeabi_ddiv+0x15a>
 800200c:	4a7c      	ldr	r2, [pc, #496]	@ (8002200 <__aeabi_ddiv+0x21c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d037      	beq.n	8002082 <__aeabi_ddiv+0x9e>
 8002012:	4659      	mov	r1, fp
 8002014:	0f42      	lsrs	r2, r0, #29
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	0409      	lsls	r1, r1, #16
 800201e:	4311      	orrs	r1, r2
 8002020:	00c2      	lsls	r2, r0, #3
 8002022:	4690      	mov	r8, r2
 8002024:	4a77      	ldr	r2, [pc, #476]	@ (8002204 <__aeabi_ddiv+0x220>)
 8002026:	4689      	mov	r9, r1
 8002028:	4692      	mov	sl, r2
 800202a:	449a      	add	sl, r3
 800202c:	2300      	movs	r3, #0
 800202e:	2400      	movs	r4, #0
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9e00      	ldr	r6, [sp, #0]
 8002034:	9f01      	ldr	r7, [sp, #4]
 8002036:	033b      	lsls	r3, r7, #12
 8002038:	0b1b      	lsrs	r3, r3, #12
 800203a:	469b      	mov	fp, r3
 800203c:	007b      	lsls	r3, r7, #1
 800203e:	0030      	movs	r0, r6
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	0ffd      	lsrs	r5, r7, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d059      	beq.n	80020fc <__aeabi_ddiv+0x118>
 8002048:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <__aeabi_ddiv+0x21c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d048      	beq.n	80020e0 <__aeabi_ddiv+0xfc>
 800204e:	4659      	mov	r1, fp
 8002050:	0f72      	lsrs	r2, r6, #29
 8002052:	00c9      	lsls	r1, r1, #3
 8002054:	430a      	orrs	r2, r1
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	0409      	lsls	r1, r1, #16
 800205a:	4311      	orrs	r1, r2
 800205c:	468b      	mov	fp, r1
 800205e:	4969      	ldr	r1, [pc, #420]	@ (8002204 <__aeabi_ddiv+0x220>)
 8002060:	00f2      	lsls	r2, r6, #3
 8002062:	468c      	mov	ip, r1
 8002064:	4651      	mov	r1, sl
 8002066:	4463      	add	r3, ip
 8002068:	1acb      	subs	r3, r1, r3
 800206a:	469a      	mov	sl, r3
 800206c:	2100      	movs	r1, #0
 800206e:	9e02      	ldr	r6, [sp, #8]
 8002070:	406e      	eors	r6, r5
 8002072:	b2f6      	uxtb	r6, r6
 8002074:	2c0f      	cmp	r4, #15
 8002076:	d900      	bls.n	800207a <__aeabi_ddiv+0x96>
 8002078:	e0ce      	b.n	8002218 <__aeabi_ddiv+0x234>
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <__aeabi_ddiv+0x224>)
 800207c:	00a4      	lsls	r4, r4, #2
 800207e:	591b      	ldr	r3, [r3, r4]
 8002080:	469f      	mov	pc, r3
 8002082:	465a      	mov	r2, fp
 8002084:	4302      	orrs	r2, r0
 8002086:	4691      	mov	r9, r2
 8002088:	d000      	beq.n	800208c <__aeabi_ddiv+0xa8>
 800208a:	e090      	b.n	80021ae <__aeabi_ddiv+0x1ca>
 800208c:	469a      	mov	sl, r3
 800208e:	2302      	movs	r3, #2
 8002090:	4690      	mov	r8, r2
 8002092:	2408      	movs	r4, #8
 8002094:	9303      	str	r3, [sp, #12]
 8002096:	e7cc      	b.n	8002032 <__aeabi_ddiv+0x4e>
 8002098:	46cb      	mov	fp, r9
 800209a:	4642      	mov	r2, r8
 800209c:	9d02      	ldr	r5, [sp, #8]
 800209e:	9903      	ldr	r1, [sp, #12]
 80020a0:	2902      	cmp	r1, #2
 80020a2:	d100      	bne.n	80020a6 <__aeabi_ddiv+0xc2>
 80020a4:	e1de      	b.n	8002464 <__aeabi_ddiv+0x480>
 80020a6:	2903      	cmp	r1, #3
 80020a8:	d100      	bne.n	80020ac <__aeabi_ddiv+0xc8>
 80020aa:	e08d      	b.n	80021c8 <__aeabi_ddiv+0x1e4>
 80020ac:	2901      	cmp	r1, #1
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0xce>
 80020b0:	e179      	b.n	80023a6 <__aeabi_ddiv+0x3c2>
 80020b2:	002e      	movs	r6, r5
 80020b4:	2200      	movs	r2, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	2400      	movs	r4, #0
 80020ba:	4690      	mov	r8, r2
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	4323      	orrs	r3, r4
 80020c0:	07f6      	lsls	r6, r6, #31
 80020c2:	4333      	orrs	r3, r6
 80020c4:	4640      	mov	r0, r8
 80020c6:	0019      	movs	r1, r3
 80020c8:	b007      	add	sp, #28
 80020ca:	bcf0      	pop	{r4, r5, r6, r7}
 80020cc:	46bb      	mov	fp, r7
 80020ce:	46b2      	mov	sl, r6
 80020d0:	46a9      	mov	r9, r5
 80020d2:	46a0      	mov	r8, r4
 80020d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d6:	2200      	movs	r2, #0
 80020d8:	2400      	movs	r4, #0
 80020da:	4690      	mov	r8, r2
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80020de:	e7ed      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80020e0:	465a      	mov	r2, fp
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <__aeabi_ddiv+0x228>)
 80020e8:	469c      	mov	ip, r3
 80020ea:	44e2      	add	sl, ip
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d159      	bne.n	80021a4 <__aeabi_ddiv+0x1c0>
 80020f0:	2302      	movs	r3, #2
 80020f2:	431c      	orrs	r4, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	2102      	movs	r1, #2
 80020f8:	469b      	mov	fp, r3
 80020fa:	e7b8      	b.n	800206e <__aeabi_ddiv+0x8a>
 80020fc:	465a      	mov	r2, fp
 80020fe:	9b00      	ldr	r3, [sp, #0]
 8002100:	431a      	orrs	r2, r3
 8002102:	d049      	beq.n	8002198 <__aeabi_ddiv+0x1b4>
 8002104:	465b      	mov	r3, fp
 8002106:	2b00      	cmp	r3, #0
 8002108:	d100      	bne.n	800210c <__aeabi_ddiv+0x128>
 800210a:	e19c      	b.n	8002446 <__aeabi_ddiv+0x462>
 800210c:	4658      	mov	r0, fp
 800210e:	f7fe fa19 	bl	8000544 <__clzsi2>
 8002112:	0002      	movs	r2, r0
 8002114:	0003      	movs	r3, r0
 8002116:	3a0b      	subs	r2, #11
 8002118:	271d      	movs	r7, #29
 800211a:	9e00      	ldr	r6, [sp, #0]
 800211c:	1aba      	subs	r2, r7, r2
 800211e:	0019      	movs	r1, r3
 8002120:	4658      	mov	r0, fp
 8002122:	40d6      	lsrs	r6, r2
 8002124:	3908      	subs	r1, #8
 8002126:	4088      	lsls	r0, r1
 8002128:	0032      	movs	r2, r6
 800212a:	4302      	orrs	r2, r0
 800212c:	4693      	mov	fp, r2
 800212e:	9a00      	ldr	r2, [sp, #0]
 8002130:	408a      	lsls	r2, r1
 8002132:	4937      	ldr	r1, [pc, #220]	@ (8002210 <__aeabi_ddiv+0x22c>)
 8002134:	4453      	add	r3, sl
 8002136:	468a      	mov	sl, r1
 8002138:	2100      	movs	r1, #0
 800213a:	449a      	add	sl, r3
 800213c:	e797      	b.n	800206e <__aeabi_ddiv+0x8a>
 800213e:	465b      	mov	r3, fp
 8002140:	4303      	orrs	r3, r0
 8002142:	4699      	mov	r9, r3
 8002144:	d021      	beq.n	800218a <__aeabi_ddiv+0x1a6>
 8002146:	465b      	mov	r3, fp
 8002148:	2b00      	cmp	r3, #0
 800214a:	d100      	bne.n	800214e <__aeabi_ddiv+0x16a>
 800214c:	e169      	b.n	8002422 <__aeabi_ddiv+0x43e>
 800214e:	4658      	mov	r0, fp
 8002150:	f7fe f9f8 	bl	8000544 <__clzsi2>
 8002154:	230b      	movs	r3, #11
 8002156:	425b      	negs	r3, r3
 8002158:	469c      	mov	ip, r3
 800215a:	0002      	movs	r2, r0
 800215c:	4484      	add	ip, r0
 800215e:	4666      	mov	r6, ip
 8002160:	231d      	movs	r3, #29
 8002162:	1b9b      	subs	r3, r3, r6
 8002164:	0026      	movs	r6, r4
 8002166:	0011      	movs	r1, r2
 8002168:	4658      	mov	r0, fp
 800216a:	40de      	lsrs	r6, r3
 800216c:	3908      	subs	r1, #8
 800216e:	4088      	lsls	r0, r1
 8002170:	0033      	movs	r3, r6
 8002172:	4303      	orrs	r3, r0
 8002174:	4699      	mov	r9, r3
 8002176:	0023      	movs	r3, r4
 8002178:	408b      	lsls	r3, r1
 800217a:	4698      	mov	r8, r3
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <__aeabi_ddiv+0x230>)
 800217e:	2400      	movs	r4, #0
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	469a      	mov	sl, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9303      	str	r3, [sp, #12]
 8002188:	e753      	b.n	8002032 <__aeabi_ddiv+0x4e>
 800218a:	2300      	movs	r3, #0
 800218c:	4698      	mov	r8, r3
 800218e:	469a      	mov	sl, r3
 8002190:	3301      	adds	r3, #1
 8002192:	2404      	movs	r4, #4
 8002194:	9303      	str	r3, [sp, #12]
 8002196:	e74c      	b.n	8002032 <__aeabi_ddiv+0x4e>
 8002198:	2301      	movs	r3, #1
 800219a:	431c      	orrs	r4, r3
 800219c:	2300      	movs	r3, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	469b      	mov	fp, r3
 80021a2:	e764      	b.n	800206e <__aeabi_ddiv+0x8a>
 80021a4:	2303      	movs	r3, #3
 80021a6:	0032      	movs	r2, r6
 80021a8:	2103      	movs	r1, #3
 80021aa:	431c      	orrs	r4, r3
 80021ac:	e75f      	b.n	800206e <__aeabi_ddiv+0x8a>
 80021ae:	469a      	mov	sl, r3
 80021b0:	2303      	movs	r3, #3
 80021b2:	46d9      	mov	r9, fp
 80021b4:	240c      	movs	r4, #12
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	e73b      	b.n	8002032 <__aeabi_ddiv+0x4e>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2480      	movs	r4, #128	@ 0x80
 80021be:	4698      	mov	r8, r3
 80021c0:	2600      	movs	r6, #0
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	e779      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021c8:	2480      	movs	r4, #128	@ 0x80
 80021ca:	465b      	mov	r3, fp
 80021cc:	0324      	lsls	r4, r4, #12
 80021ce:	431c      	orrs	r4, r3
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	002e      	movs	r6, r5
 80021d4:	4690      	mov	r8, r2
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021d8:	0b24      	lsrs	r4, r4, #12
 80021da:	e76f      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021dc:	2480      	movs	r4, #128	@ 0x80
 80021de:	464b      	mov	r3, r9
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	4223      	tst	r3, r4
 80021e4:	d002      	beq.n	80021ec <__aeabi_ddiv+0x208>
 80021e6:	465b      	mov	r3, fp
 80021e8:	4223      	tst	r3, r4
 80021ea:	d0f0      	beq.n	80021ce <__aeabi_ddiv+0x1ea>
 80021ec:	2480      	movs	r4, #128	@ 0x80
 80021ee:	464b      	mov	r3, r9
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	431c      	orrs	r4, r3
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	9e02      	ldr	r6, [sp, #8]
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	e75e      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	fffffc01 	.word	0xfffffc01
 8002208:	0801cb18 	.word	0x0801cb18
 800220c:	fffff801 	.word	0xfffff801
 8002210:	000003f3 	.word	0x000003f3
 8002214:	fffffc0d 	.word	0xfffffc0d
 8002218:	45cb      	cmp	fp, r9
 800221a:	d200      	bcs.n	800221e <__aeabi_ddiv+0x23a>
 800221c:	e0f8      	b.n	8002410 <__aeabi_ddiv+0x42c>
 800221e:	d100      	bne.n	8002222 <__aeabi_ddiv+0x23e>
 8002220:	e0f3      	b.n	800240a <__aeabi_ddiv+0x426>
 8002222:	2301      	movs	r3, #1
 8002224:	425b      	negs	r3, r3
 8002226:	469c      	mov	ip, r3
 8002228:	4644      	mov	r4, r8
 800222a:	4648      	mov	r0, r9
 800222c:	2500      	movs	r5, #0
 800222e:	44e2      	add	sl, ip
 8002230:	465b      	mov	r3, fp
 8002232:	0e17      	lsrs	r7, r2, #24
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	431f      	orrs	r7, r3
 8002238:	0c19      	lsrs	r1, r3, #16
 800223a:	043b      	lsls	r3, r7, #16
 800223c:	0212      	lsls	r2, r2, #8
 800223e:	9700      	str	r7, [sp, #0]
 8002240:	0c1f      	lsrs	r7, r3, #16
 8002242:	4691      	mov	r9, r2
 8002244:	9102      	str	r1, [sp, #8]
 8002246:	9703      	str	r7, [sp, #12]
 8002248:	f7fe f814 	bl	8000274 <__aeabi_uidivmod>
 800224c:	0002      	movs	r2, r0
 800224e:	437a      	muls	r2, r7
 8002250:	040b      	lsls	r3, r1, #16
 8002252:	0c21      	lsrs	r1, r4, #16
 8002254:	4680      	mov	r8, r0
 8002256:	4319      	orrs	r1, r3
 8002258:	428a      	cmp	r2, r1
 800225a:	d909      	bls.n	8002270 <__aeabi_ddiv+0x28c>
 800225c:	9f00      	ldr	r7, [sp, #0]
 800225e:	2301      	movs	r3, #1
 8002260:	46bc      	mov	ip, r7
 8002262:	425b      	negs	r3, r3
 8002264:	4461      	add	r1, ip
 8002266:	469c      	mov	ip, r3
 8002268:	44e0      	add	r8, ip
 800226a:	428f      	cmp	r7, r1
 800226c:	d800      	bhi.n	8002270 <__aeabi_ddiv+0x28c>
 800226e:	e15c      	b.n	800252a <__aeabi_ddiv+0x546>
 8002270:	1a88      	subs	r0, r1, r2
 8002272:	9902      	ldr	r1, [sp, #8]
 8002274:	f7fd fffe 	bl	8000274 <__aeabi_uidivmod>
 8002278:	9a03      	ldr	r2, [sp, #12]
 800227a:	0424      	lsls	r4, r4, #16
 800227c:	4342      	muls	r2, r0
 800227e:	0409      	lsls	r1, r1, #16
 8002280:	0c24      	lsrs	r4, r4, #16
 8002282:	0003      	movs	r3, r0
 8002284:	430c      	orrs	r4, r1
 8002286:	42a2      	cmp	r2, r4
 8002288:	d906      	bls.n	8002298 <__aeabi_ddiv+0x2b4>
 800228a:	9900      	ldr	r1, [sp, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	468c      	mov	ip, r1
 8002290:	4464      	add	r4, ip
 8002292:	42a1      	cmp	r1, r4
 8002294:	d800      	bhi.n	8002298 <__aeabi_ddiv+0x2b4>
 8002296:	e142      	b.n	800251e <__aeabi_ddiv+0x53a>
 8002298:	1aa0      	subs	r0, r4, r2
 800229a:	4642      	mov	r2, r8
 800229c:	0412      	lsls	r2, r2, #16
 800229e:	431a      	orrs	r2, r3
 80022a0:	4693      	mov	fp, r2
 80022a2:	464b      	mov	r3, r9
 80022a4:	4659      	mov	r1, fp
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	001f      	movs	r7, r3
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	040b      	lsls	r3, r1, #16
 80022ae:	4649      	mov	r1, r9
 80022b0:	0409      	lsls	r1, r1, #16
 80022b2:	0c09      	lsrs	r1, r1, #16
 80022b4:	000c      	movs	r4, r1
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	435c      	muls	r4, r3
 80022ba:	0c12      	lsrs	r2, r2, #16
 80022bc:	437b      	muls	r3, r7
 80022be:	4688      	mov	r8, r1
 80022c0:	4351      	muls	r1, r2
 80022c2:	437a      	muls	r2, r7
 80022c4:	0c27      	lsrs	r7, r4, #16
 80022c6:	46bc      	mov	ip, r7
 80022c8:	185b      	adds	r3, r3, r1
 80022ca:	4463      	add	r3, ip
 80022cc:	4299      	cmp	r1, r3
 80022ce:	d903      	bls.n	80022d8 <__aeabi_ddiv+0x2f4>
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	468c      	mov	ip, r1
 80022d6:	4462      	add	r2, ip
 80022d8:	0c19      	lsrs	r1, r3, #16
 80022da:	0424      	lsls	r4, r4, #16
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	0c24      	lsrs	r4, r4, #16
 80022e0:	188a      	adds	r2, r1, r2
 80022e2:	191c      	adds	r4, r3, r4
 80022e4:	4290      	cmp	r0, r2
 80022e6:	d302      	bcc.n	80022ee <__aeabi_ddiv+0x30a>
 80022e8:	d116      	bne.n	8002318 <__aeabi_ddiv+0x334>
 80022ea:	42a5      	cmp	r5, r4
 80022ec:	d214      	bcs.n	8002318 <__aeabi_ddiv+0x334>
 80022ee:	465b      	mov	r3, fp
 80022f0:	9f00      	ldr	r7, [sp, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	444d      	add	r5, r9
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	454d      	cmp	r5, r9
 80022fa:	419b      	sbcs	r3, r3
 80022fc:	46bc      	mov	ip, r7
 80022fe:	425b      	negs	r3, r3
 8002300:	4463      	add	r3, ip
 8002302:	18c0      	adds	r0, r0, r3
 8002304:	4287      	cmp	r7, r0
 8002306:	d300      	bcc.n	800230a <__aeabi_ddiv+0x326>
 8002308:	e102      	b.n	8002510 <__aeabi_ddiv+0x52c>
 800230a:	4282      	cmp	r2, r0
 800230c:	d900      	bls.n	8002310 <__aeabi_ddiv+0x32c>
 800230e:	e129      	b.n	8002564 <__aeabi_ddiv+0x580>
 8002310:	d100      	bne.n	8002314 <__aeabi_ddiv+0x330>
 8002312:	e124      	b.n	800255e <__aeabi_ddiv+0x57a>
 8002314:	9b05      	ldr	r3, [sp, #20]
 8002316:	469b      	mov	fp, r3
 8002318:	1b2c      	subs	r4, r5, r4
 800231a:	42a5      	cmp	r5, r4
 800231c:	41ad      	sbcs	r5, r5
 800231e:	9b00      	ldr	r3, [sp, #0]
 8002320:	1a80      	subs	r0, r0, r2
 8002322:	426d      	negs	r5, r5
 8002324:	1b40      	subs	r0, r0, r5
 8002326:	4283      	cmp	r3, r0
 8002328:	d100      	bne.n	800232c <__aeabi_ddiv+0x348>
 800232a:	e10f      	b.n	800254c <__aeabi_ddiv+0x568>
 800232c:	9902      	ldr	r1, [sp, #8]
 800232e:	f7fd ffa1 	bl	8000274 <__aeabi_uidivmod>
 8002332:	9a03      	ldr	r2, [sp, #12]
 8002334:	040b      	lsls	r3, r1, #16
 8002336:	4342      	muls	r2, r0
 8002338:	0c21      	lsrs	r1, r4, #16
 800233a:	0005      	movs	r5, r0
 800233c:	4319      	orrs	r1, r3
 800233e:	428a      	cmp	r2, r1
 8002340:	d900      	bls.n	8002344 <__aeabi_ddiv+0x360>
 8002342:	e0cb      	b.n	80024dc <__aeabi_ddiv+0x4f8>
 8002344:	1a88      	subs	r0, r1, r2
 8002346:	9902      	ldr	r1, [sp, #8]
 8002348:	f7fd ff94 	bl	8000274 <__aeabi_uidivmod>
 800234c:	9a03      	ldr	r2, [sp, #12]
 800234e:	0424      	lsls	r4, r4, #16
 8002350:	4342      	muls	r2, r0
 8002352:	0409      	lsls	r1, r1, #16
 8002354:	0c24      	lsrs	r4, r4, #16
 8002356:	0003      	movs	r3, r0
 8002358:	430c      	orrs	r4, r1
 800235a:	42a2      	cmp	r2, r4
 800235c:	d900      	bls.n	8002360 <__aeabi_ddiv+0x37c>
 800235e:	e0ca      	b.n	80024f6 <__aeabi_ddiv+0x512>
 8002360:	4641      	mov	r1, r8
 8002362:	1aa4      	subs	r4, r4, r2
 8002364:	042a      	lsls	r2, r5, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	9f04      	ldr	r7, [sp, #16]
 800236a:	0413      	lsls	r3, r2, #16
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	4359      	muls	r1, r3
 8002370:	4640      	mov	r0, r8
 8002372:	437b      	muls	r3, r7
 8002374:	469c      	mov	ip, r3
 8002376:	0c15      	lsrs	r5, r2, #16
 8002378:	4368      	muls	r0, r5
 800237a:	0c0b      	lsrs	r3, r1, #16
 800237c:	4484      	add	ip, r0
 800237e:	4463      	add	r3, ip
 8002380:	437d      	muls	r5, r7
 8002382:	4298      	cmp	r0, r3
 8002384:	d903      	bls.n	800238e <__aeabi_ddiv+0x3aa>
 8002386:	2080      	movs	r0, #128	@ 0x80
 8002388:	0240      	lsls	r0, r0, #9
 800238a:	4684      	mov	ip, r0
 800238c:	4465      	add	r5, ip
 800238e:	0c18      	lsrs	r0, r3, #16
 8002390:	0409      	lsls	r1, r1, #16
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c09      	lsrs	r1, r1, #16
 8002396:	1940      	adds	r0, r0, r5
 8002398:	185b      	adds	r3, r3, r1
 800239a:	4284      	cmp	r4, r0
 800239c:	d327      	bcc.n	80023ee <__aeabi_ddiv+0x40a>
 800239e:	d023      	beq.n	80023e8 <__aeabi_ddiv+0x404>
 80023a0:	2301      	movs	r3, #1
 80023a2:	0035      	movs	r5, r6
 80023a4:	431a      	orrs	r2, r3
 80023a6:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <__aeabi_ddiv+0x614>)
 80023a8:	4453      	add	r3, sl
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dd60      	ble.n	8002470 <__aeabi_ddiv+0x48c>
 80023ae:	0751      	lsls	r1, r2, #29
 80023b0:	d000      	beq.n	80023b4 <__aeabi_ddiv+0x3d0>
 80023b2:	e086      	b.n	80024c2 <__aeabi_ddiv+0x4de>
 80023b4:	002e      	movs	r6, r5
 80023b6:	08d1      	lsrs	r1, r2, #3
 80023b8:	465a      	mov	r2, fp
 80023ba:	01d2      	lsls	r2, r2, #7
 80023bc:	d506      	bpl.n	80023cc <__aeabi_ddiv+0x3e8>
 80023be:	465a      	mov	r2, fp
 80023c0:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <__aeabi_ddiv+0x618>)
 80023c2:	401a      	ands	r2, r3
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	4693      	mov	fp, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4453      	add	r3, sl
 80023cc:	4a8c      	ldr	r2, [pc, #560]	@ (8002600 <__aeabi_ddiv+0x61c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	dd00      	ble.n	80023d4 <__aeabi_ddiv+0x3f0>
 80023d2:	e680      	b.n	80020d6 <__aeabi_ddiv+0xf2>
 80023d4:	465a      	mov	r2, fp
 80023d6:	0752      	lsls	r2, r2, #29
 80023d8:	430a      	orrs	r2, r1
 80023da:	4690      	mov	r8, r2
 80023dc:	465a      	mov	r2, fp
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	0254      	lsls	r4, r2, #9
 80023e2:	0b24      	lsrs	r4, r4, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e669      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80023e8:	0035      	movs	r5, r6
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0db      	beq.n	80023a6 <__aeabi_ddiv+0x3c2>
 80023ee:	9d00      	ldr	r5, [sp, #0]
 80023f0:	1e51      	subs	r1, r2, #1
 80023f2:	46ac      	mov	ip, r5
 80023f4:	4464      	add	r4, ip
 80023f6:	42ac      	cmp	r4, r5
 80023f8:	d200      	bcs.n	80023fc <__aeabi_ddiv+0x418>
 80023fa:	e09e      	b.n	800253a <__aeabi_ddiv+0x556>
 80023fc:	4284      	cmp	r4, r0
 80023fe:	d200      	bcs.n	8002402 <__aeabi_ddiv+0x41e>
 8002400:	e0e1      	b.n	80025c6 <__aeabi_ddiv+0x5e2>
 8002402:	d100      	bne.n	8002406 <__aeabi_ddiv+0x422>
 8002404:	e0ee      	b.n	80025e4 <__aeabi_ddiv+0x600>
 8002406:	000a      	movs	r2, r1
 8002408:	e7ca      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 800240a:	4542      	cmp	r2, r8
 800240c:	d900      	bls.n	8002410 <__aeabi_ddiv+0x42c>
 800240e:	e708      	b.n	8002222 <__aeabi_ddiv+0x23e>
 8002410:	464b      	mov	r3, r9
 8002412:	07dc      	lsls	r4, r3, #31
 8002414:	0858      	lsrs	r0, r3, #1
 8002416:	4643      	mov	r3, r8
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	431c      	orrs	r4, r3
 800241c:	4643      	mov	r3, r8
 800241e:	07dd      	lsls	r5, r3, #31
 8002420:	e706      	b.n	8002230 <__aeabi_ddiv+0x24c>
 8002422:	f7fe f88f 	bl	8000544 <__clzsi2>
 8002426:	2315      	movs	r3, #21
 8002428:	469c      	mov	ip, r3
 800242a:	4484      	add	ip, r0
 800242c:	0002      	movs	r2, r0
 800242e:	4663      	mov	r3, ip
 8002430:	3220      	adds	r2, #32
 8002432:	2b1c      	cmp	r3, #28
 8002434:	dc00      	bgt.n	8002438 <__aeabi_ddiv+0x454>
 8002436:	e692      	b.n	800215e <__aeabi_ddiv+0x17a>
 8002438:	0023      	movs	r3, r4
 800243a:	3808      	subs	r0, #8
 800243c:	4083      	lsls	r3, r0
 800243e:	4699      	mov	r9, r3
 8002440:	2300      	movs	r3, #0
 8002442:	4698      	mov	r8, r3
 8002444:	e69a      	b.n	800217c <__aeabi_ddiv+0x198>
 8002446:	f7fe f87d 	bl	8000544 <__clzsi2>
 800244a:	0002      	movs	r2, r0
 800244c:	0003      	movs	r3, r0
 800244e:	3215      	adds	r2, #21
 8002450:	3320      	adds	r3, #32
 8002452:	2a1c      	cmp	r2, #28
 8002454:	dc00      	bgt.n	8002458 <__aeabi_ddiv+0x474>
 8002456:	e65f      	b.n	8002118 <__aeabi_ddiv+0x134>
 8002458:	9900      	ldr	r1, [sp, #0]
 800245a:	3808      	subs	r0, #8
 800245c:	4081      	lsls	r1, r0
 800245e:	2200      	movs	r2, #0
 8002460:	468b      	mov	fp, r1
 8002462:	e666      	b.n	8002132 <__aeabi_ddiv+0x14e>
 8002464:	2200      	movs	r2, #0
 8002466:	002e      	movs	r6, r5
 8002468:	2400      	movs	r4, #0
 800246a:	4690      	mov	r8, r2
 800246c:	4b65      	ldr	r3, [pc, #404]	@ (8002604 <__aeabi_ddiv+0x620>)
 800246e:	e625      	b.n	80020bc <__aeabi_ddiv+0xd8>
 8002470:	002e      	movs	r6, r5
 8002472:	2101      	movs	r1, #1
 8002474:	1ac9      	subs	r1, r1, r3
 8002476:	2938      	cmp	r1, #56	@ 0x38
 8002478:	dd00      	ble.n	800247c <__aeabi_ddiv+0x498>
 800247a:	e61b      	b.n	80020b4 <__aeabi_ddiv+0xd0>
 800247c:	291f      	cmp	r1, #31
 800247e:	dc7e      	bgt.n	800257e <__aeabi_ddiv+0x59a>
 8002480:	4861      	ldr	r0, [pc, #388]	@ (8002608 <__aeabi_ddiv+0x624>)
 8002482:	0014      	movs	r4, r2
 8002484:	4450      	add	r0, sl
 8002486:	465b      	mov	r3, fp
 8002488:	4082      	lsls	r2, r0
 800248a:	4083      	lsls	r3, r0
 800248c:	40cc      	lsrs	r4, r1
 800248e:	1e50      	subs	r0, r2, #1
 8002490:	4182      	sbcs	r2, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	431a      	orrs	r2, r3
 8002496:	465b      	mov	r3, fp
 8002498:	40cb      	lsrs	r3, r1
 800249a:	0751      	lsls	r1, r2, #29
 800249c:	d009      	beq.n	80024b2 <__aeabi_ddiv+0x4ce>
 800249e:	210f      	movs	r1, #15
 80024a0:	4011      	ands	r1, r2
 80024a2:	2904      	cmp	r1, #4
 80024a4:	d005      	beq.n	80024b2 <__aeabi_ddiv+0x4ce>
 80024a6:	1d11      	adds	r1, r2, #4
 80024a8:	4291      	cmp	r1, r2
 80024aa:	4192      	sbcs	r2, r2
 80024ac:	4252      	negs	r2, r2
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	0219      	lsls	r1, r3, #8
 80024b4:	d400      	bmi.n	80024b8 <__aeabi_ddiv+0x4d4>
 80024b6:	e09b      	b.n	80025f0 <__aeabi_ddiv+0x60c>
 80024b8:	2200      	movs	r2, #0
 80024ba:	2301      	movs	r3, #1
 80024bc:	2400      	movs	r4, #0
 80024be:	4690      	mov	r8, r2
 80024c0:	e5fc      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80024c2:	210f      	movs	r1, #15
 80024c4:	4011      	ands	r1, r2
 80024c6:	2904      	cmp	r1, #4
 80024c8:	d100      	bne.n	80024cc <__aeabi_ddiv+0x4e8>
 80024ca:	e773      	b.n	80023b4 <__aeabi_ddiv+0x3d0>
 80024cc:	1d11      	adds	r1, r2, #4
 80024ce:	4291      	cmp	r1, r2
 80024d0:	4192      	sbcs	r2, r2
 80024d2:	4252      	negs	r2, r2
 80024d4:	002e      	movs	r6, r5
 80024d6:	08c9      	lsrs	r1, r1, #3
 80024d8:	4493      	add	fp, r2
 80024da:	e76d      	b.n	80023b8 <__aeabi_ddiv+0x3d4>
 80024dc:	9b00      	ldr	r3, [sp, #0]
 80024de:	3d01      	subs	r5, #1
 80024e0:	469c      	mov	ip, r3
 80024e2:	4461      	add	r1, ip
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d900      	bls.n	80024ea <__aeabi_ddiv+0x506>
 80024e8:	e72c      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024ea:	428a      	cmp	r2, r1
 80024ec:	d800      	bhi.n	80024f0 <__aeabi_ddiv+0x50c>
 80024ee:	e729      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024f0:	1e85      	subs	r5, r0, #2
 80024f2:	4461      	add	r1, ip
 80024f4:	e726      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024f6:	9900      	ldr	r1, [sp, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	468c      	mov	ip, r1
 80024fc:	4464      	add	r4, ip
 80024fe:	42a1      	cmp	r1, r4
 8002500:	d900      	bls.n	8002504 <__aeabi_ddiv+0x520>
 8002502:	e72d      	b.n	8002360 <__aeabi_ddiv+0x37c>
 8002504:	42a2      	cmp	r2, r4
 8002506:	d800      	bhi.n	800250a <__aeabi_ddiv+0x526>
 8002508:	e72a      	b.n	8002360 <__aeabi_ddiv+0x37c>
 800250a:	1e83      	subs	r3, r0, #2
 800250c:	4464      	add	r4, ip
 800250e:	e727      	b.n	8002360 <__aeabi_ddiv+0x37c>
 8002510:	4287      	cmp	r7, r0
 8002512:	d000      	beq.n	8002516 <__aeabi_ddiv+0x532>
 8002514:	e6fe      	b.n	8002314 <__aeabi_ddiv+0x330>
 8002516:	45a9      	cmp	r9, r5
 8002518:	d900      	bls.n	800251c <__aeabi_ddiv+0x538>
 800251a:	e6fb      	b.n	8002314 <__aeabi_ddiv+0x330>
 800251c:	e6f5      	b.n	800230a <__aeabi_ddiv+0x326>
 800251e:	42a2      	cmp	r2, r4
 8002520:	d800      	bhi.n	8002524 <__aeabi_ddiv+0x540>
 8002522:	e6b9      	b.n	8002298 <__aeabi_ddiv+0x2b4>
 8002524:	1e83      	subs	r3, r0, #2
 8002526:	4464      	add	r4, ip
 8002528:	e6b6      	b.n	8002298 <__aeabi_ddiv+0x2b4>
 800252a:	428a      	cmp	r2, r1
 800252c:	d800      	bhi.n	8002530 <__aeabi_ddiv+0x54c>
 800252e:	e69f      	b.n	8002270 <__aeabi_ddiv+0x28c>
 8002530:	46bc      	mov	ip, r7
 8002532:	1e83      	subs	r3, r0, #2
 8002534:	4698      	mov	r8, r3
 8002536:	4461      	add	r1, ip
 8002538:	e69a      	b.n	8002270 <__aeabi_ddiv+0x28c>
 800253a:	000a      	movs	r2, r1
 800253c:	4284      	cmp	r4, r0
 800253e:	d000      	beq.n	8002542 <__aeabi_ddiv+0x55e>
 8002540:	e72e      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 8002542:	454b      	cmp	r3, r9
 8002544:	d000      	beq.n	8002548 <__aeabi_ddiv+0x564>
 8002546:	e72b      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 8002548:	0035      	movs	r5, r6
 800254a:	e72c      	b.n	80023a6 <__aeabi_ddiv+0x3c2>
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <__aeabi_ddiv+0x614>)
 800254e:	4a2f      	ldr	r2, [pc, #188]	@ (800260c <__aeabi_ddiv+0x628>)
 8002550:	4453      	add	r3, sl
 8002552:	4592      	cmp	sl, r2
 8002554:	db43      	blt.n	80025de <__aeabi_ddiv+0x5fa>
 8002556:	2201      	movs	r2, #1
 8002558:	2100      	movs	r1, #0
 800255a:	4493      	add	fp, r2
 800255c:	e72c      	b.n	80023b8 <__aeabi_ddiv+0x3d4>
 800255e:	42ac      	cmp	r4, r5
 8002560:	d800      	bhi.n	8002564 <__aeabi_ddiv+0x580>
 8002562:	e6d7      	b.n	8002314 <__aeabi_ddiv+0x330>
 8002564:	2302      	movs	r3, #2
 8002566:	425b      	negs	r3, r3
 8002568:	469c      	mov	ip, r3
 800256a:	9900      	ldr	r1, [sp, #0]
 800256c:	444d      	add	r5, r9
 800256e:	454d      	cmp	r5, r9
 8002570:	419b      	sbcs	r3, r3
 8002572:	44e3      	add	fp, ip
 8002574:	468c      	mov	ip, r1
 8002576:	425b      	negs	r3, r3
 8002578:	4463      	add	r3, ip
 800257a:	18c0      	adds	r0, r0, r3
 800257c:	e6cc      	b.n	8002318 <__aeabi_ddiv+0x334>
 800257e:	201f      	movs	r0, #31
 8002580:	4240      	negs	r0, r0
 8002582:	1ac3      	subs	r3, r0, r3
 8002584:	4658      	mov	r0, fp
 8002586:	40d8      	lsrs	r0, r3
 8002588:	2920      	cmp	r1, #32
 800258a:	d004      	beq.n	8002596 <__aeabi_ddiv+0x5b2>
 800258c:	4659      	mov	r1, fp
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <__aeabi_ddiv+0x62c>)
 8002590:	4453      	add	r3, sl
 8002592:	4099      	lsls	r1, r3
 8002594:	430a      	orrs	r2, r1
 8002596:	1e53      	subs	r3, r2, #1
 8002598:	419a      	sbcs	r2, r3
 800259a:	2307      	movs	r3, #7
 800259c:	0019      	movs	r1, r3
 800259e:	4302      	orrs	r2, r0
 80025a0:	2400      	movs	r4, #0
 80025a2:	4011      	ands	r1, r2
 80025a4:	4213      	tst	r3, r2
 80025a6:	d009      	beq.n	80025bc <__aeabi_ddiv+0x5d8>
 80025a8:	3308      	adds	r3, #8
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d01d      	beq.n	80025ec <__aeabi_ddiv+0x608>
 80025b0:	1d13      	adds	r3, r2, #4
 80025b2:	4293      	cmp	r3, r2
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	001a      	movs	r2, r3
 80025b8:	4249      	negs	r1, r1
 80025ba:	0749      	lsls	r1, r1, #29
 80025bc:	08d2      	lsrs	r2, r2, #3
 80025be:	430a      	orrs	r2, r1
 80025c0:	4690      	mov	r8, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	e57a      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80025c6:	4649      	mov	r1, r9
 80025c8:	9f00      	ldr	r7, [sp, #0]
 80025ca:	004d      	lsls	r5, r1, #1
 80025cc:	454d      	cmp	r5, r9
 80025ce:	4189      	sbcs	r1, r1
 80025d0:	46bc      	mov	ip, r7
 80025d2:	4249      	negs	r1, r1
 80025d4:	4461      	add	r1, ip
 80025d6:	46a9      	mov	r9, r5
 80025d8:	3a02      	subs	r2, #2
 80025da:	1864      	adds	r4, r4, r1
 80025dc:	e7ae      	b.n	800253c <__aeabi_ddiv+0x558>
 80025de:	2201      	movs	r2, #1
 80025e0:	4252      	negs	r2, r2
 80025e2:	e746      	b.n	8002472 <__aeabi_ddiv+0x48e>
 80025e4:	4599      	cmp	r9, r3
 80025e6:	d3ee      	bcc.n	80025c6 <__aeabi_ddiv+0x5e2>
 80025e8:	000a      	movs	r2, r1
 80025ea:	e7aa      	b.n	8002542 <__aeabi_ddiv+0x55e>
 80025ec:	2100      	movs	r1, #0
 80025ee:	e7e5      	b.n	80025bc <__aeabi_ddiv+0x5d8>
 80025f0:	0759      	lsls	r1, r3, #29
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	0b1c      	lsrs	r4, r3, #12
 80025f6:	e7e1      	b.n	80025bc <__aeabi_ddiv+0x5d8>
 80025f8:	000003ff 	.word	0x000003ff
 80025fc:	feffffff 	.word	0xfeffffff
 8002600:	000007fe 	.word	0x000007fe
 8002604:	000007ff 	.word	0x000007ff
 8002608:	0000041e 	.word	0x0000041e
 800260c:	fffffc02 	.word	0xfffffc02
 8002610:	0000043e 	.word	0x0000043e

08002614 <__eqdf2>:
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	4657      	mov	r7, sl
 8002618:	46de      	mov	lr, fp
 800261a:	464e      	mov	r6, r9
 800261c:	4645      	mov	r5, r8
 800261e:	b5e0      	push	{r5, r6, r7, lr}
 8002620:	000d      	movs	r5, r1
 8002622:	0004      	movs	r4, r0
 8002624:	0fe8      	lsrs	r0, r5, #31
 8002626:	4683      	mov	fp, r0
 8002628:	0309      	lsls	r1, r1, #12
 800262a:	0fd8      	lsrs	r0, r3, #31
 800262c:	0b09      	lsrs	r1, r1, #12
 800262e:	4682      	mov	sl, r0
 8002630:	4819      	ldr	r0, [pc, #100]	@ (8002698 <__eqdf2+0x84>)
 8002632:	468c      	mov	ip, r1
 8002634:	031f      	lsls	r7, r3, #12
 8002636:	0069      	lsls	r1, r5, #1
 8002638:	005e      	lsls	r6, r3, #1
 800263a:	0d49      	lsrs	r1, r1, #21
 800263c:	0b3f      	lsrs	r7, r7, #12
 800263e:	0d76      	lsrs	r6, r6, #21
 8002640:	4281      	cmp	r1, r0
 8002642:	d018      	beq.n	8002676 <__eqdf2+0x62>
 8002644:	4286      	cmp	r6, r0
 8002646:	d00f      	beq.n	8002668 <__eqdf2+0x54>
 8002648:	2001      	movs	r0, #1
 800264a:	42b1      	cmp	r1, r6
 800264c:	d10d      	bne.n	800266a <__eqdf2+0x56>
 800264e:	45bc      	cmp	ip, r7
 8002650:	d10b      	bne.n	800266a <__eqdf2+0x56>
 8002652:	4294      	cmp	r4, r2
 8002654:	d109      	bne.n	800266a <__eqdf2+0x56>
 8002656:	45d3      	cmp	fp, sl
 8002658:	d01c      	beq.n	8002694 <__eqdf2+0x80>
 800265a:	2900      	cmp	r1, #0
 800265c:	d105      	bne.n	800266a <__eqdf2+0x56>
 800265e:	4660      	mov	r0, ip
 8002660:	4320      	orrs	r0, r4
 8002662:	1e43      	subs	r3, r0, #1
 8002664:	4198      	sbcs	r0, r3
 8002666:	e000      	b.n	800266a <__eqdf2+0x56>
 8002668:	2001      	movs	r0, #1
 800266a:	bcf0      	pop	{r4, r5, r6, r7}
 800266c:	46bb      	mov	fp, r7
 800266e:	46b2      	mov	sl, r6
 8002670:	46a9      	mov	r9, r5
 8002672:	46a0      	mov	r8, r4
 8002674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002676:	2001      	movs	r0, #1
 8002678:	428e      	cmp	r6, r1
 800267a:	d1f6      	bne.n	800266a <__eqdf2+0x56>
 800267c:	4661      	mov	r1, ip
 800267e:	4339      	orrs	r1, r7
 8002680:	000f      	movs	r7, r1
 8002682:	4317      	orrs	r7, r2
 8002684:	4327      	orrs	r7, r4
 8002686:	d1f0      	bne.n	800266a <__eqdf2+0x56>
 8002688:	465b      	mov	r3, fp
 800268a:	4652      	mov	r2, sl
 800268c:	1a98      	subs	r0, r3, r2
 800268e:	1e43      	subs	r3, r0, #1
 8002690:	4198      	sbcs	r0, r3
 8002692:	e7ea      	b.n	800266a <__eqdf2+0x56>
 8002694:	2000      	movs	r0, #0
 8002696:	e7e8      	b.n	800266a <__eqdf2+0x56>
 8002698:	000007ff 	.word	0x000007ff

0800269c <__gedf2>:
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269e:	4657      	mov	r7, sl
 80026a0:	464e      	mov	r6, r9
 80026a2:	4645      	mov	r5, r8
 80026a4:	46de      	mov	lr, fp
 80026a6:	b5e0      	push	{r5, r6, r7, lr}
 80026a8:	000d      	movs	r5, r1
 80026aa:	030e      	lsls	r6, r1, #12
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	0d49      	lsrs	r1, r1, #21
 80026b0:	468a      	mov	sl, r1
 80026b2:	0fdf      	lsrs	r7, r3, #31
 80026b4:	0fe9      	lsrs	r1, r5, #31
 80026b6:	46bc      	mov	ip, r7
 80026b8:	b083      	sub	sp, #12
 80026ba:	4f2f      	ldr	r7, [pc, #188]	@ (8002778 <__gedf2+0xdc>)
 80026bc:	0004      	movs	r4, r0
 80026be:	4680      	mov	r8, r0
 80026c0:	9101      	str	r1, [sp, #4]
 80026c2:	0058      	lsls	r0, r3, #1
 80026c4:	0319      	lsls	r1, r3, #12
 80026c6:	4691      	mov	r9, r2
 80026c8:	0b36      	lsrs	r6, r6, #12
 80026ca:	0b09      	lsrs	r1, r1, #12
 80026cc:	0d40      	lsrs	r0, r0, #21
 80026ce:	45ba      	cmp	sl, r7
 80026d0:	d01d      	beq.n	800270e <__gedf2+0x72>
 80026d2:	42b8      	cmp	r0, r7
 80026d4:	d00d      	beq.n	80026f2 <__gedf2+0x56>
 80026d6:	4657      	mov	r7, sl
 80026d8:	2f00      	cmp	r7, #0
 80026da:	d12a      	bne.n	8002732 <__gedf2+0x96>
 80026dc:	4334      	orrs	r4, r6
 80026de:	2800      	cmp	r0, #0
 80026e0:	d124      	bne.n	800272c <__gedf2+0x90>
 80026e2:	430a      	orrs	r2, r1
 80026e4:	d036      	beq.n	8002754 <__gedf2+0xb8>
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d141      	bne.n	800276e <__gedf2+0xd2>
 80026ea:	4663      	mov	r3, ip
 80026ec:	0058      	lsls	r0, r3, #1
 80026ee:	3801      	subs	r0, #1
 80026f0:	e015      	b.n	800271e <__gedf2+0x82>
 80026f2:	4311      	orrs	r1, r2
 80026f4:	d138      	bne.n	8002768 <__gedf2+0xcc>
 80026f6:	4653      	mov	r3, sl
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <__gedf2+0x64>
 80026fc:	4326      	orrs	r6, r4
 80026fe:	d0f4      	beq.n	80026ea <__gedf2+0x4e>
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	4563      	cmp	r3, ip
 8002704:	d107      	bne.n	8002716 <__gedf2+0x7a>
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	0058      	lsls	r0, r3, #1
 800270a:	3801      	subs	r0, #1
 800270c:	e007      	b.n	800271e <__gedf2+0x82>
 800270e:	4326      	orrs	r6, r4
 8002710:	d12a      	bne.n	8002768 <__gedf2+0xcc>
 8002712:	4550      	cmp	r0, sl
 8002714:	d021      	beq.n	800275a <__gedf2+0xbe>
 8002716:	2001      	movs	r0, #1
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	425f      	negs	r7, r3
 800271c:	4338      	orrs	r0, r7
 800271e:	b003      	add	sp, #12
 8002720:	bcf0      	pop	{r4, r5, r6, r7}
 8002722:	46bb      	mov	fp, r7
 8002724:	46b2      	mov	sl, r6
 8002726:	46a9      	mov	r9, r5
 8002728:	46a0      	mov	r8, r4
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272c:	2c00      	cmp	r4, #0
 800272e:	d0dc      	beq.n	80026ea <__gedf2+0x4e>
 8002730:	e7e6      	b.n	8002700 <__gedf2+0x64>
 8002732:	2800      	cmp	r0, #0
 8002734:	d0ef      	beq.n	8002716 <__gedf2+0x7a>
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	4563      	cmp	r3, ip
 800273a:	d1ec      	bne.n	8002716 <__gedf2+0x7a>
 800273c:	4582      	cmp	sl, r0
 800273e:	dcea      	bgt.n	8002716 <__gedf2+0x7a>
 8002740:	dbe1      	blt.n	8002706 <__gedf2+0x6a>
 8002742:	428e      	cmp	r6, r1
 8002744:	d8e7      	bhi.n	8002716 <__gedf2+0x7a>
 8002746:	d1de      	bne.n	8002706 <__gedf2+0x6a>
 8002748:	45c8      	cmp	r8, r9
 800274a:	d8e4      	bhi.n	8002716 <__gedf2+0x7a>
 800274c:	2000      	movs	r0, #0
 800274e:	45c8      	cmp	r8, r9
 8002750:	d2e5      	bcs.n	800271e <__gedf2+0x82>
 8002752:	e7d8      	b.n	8002706 <__gedf2+0x6a>
 8002754:	2c00      	cmp	r4, #0
 8002756:	d0e2      	beq.n	800271e <__gedf2+0x82>
 8002758:	e7dd      	b.n	8002716 <__gedf2+0x7a>
 800275a:	4311      	orrs	r1, r2
 800275c:	d104      	bne.n	8002768 <__gedf2+0xcc>
 800275e:	9b01      	ldr	r3, [sp, #4]
 8002760:	4563      	cmp	r3, ip
 8002762:	d1d8      	bne.n	8002716 <__gedf2+0x7a>
 8002764:	2000      	movs	r0, #0
 8002766:	e7da      	b.n	800271e <__gedf2+0x82>
 8002768:	2002      	movs	r0, #2
 800276a:	4240      	negs	r0, r0
 800276c:	e7d7      	b.n	800271e <__gedf2+0x82>
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	4563      	cmp	r3, ip
 8002772:	d0e6      	beq.n	8002742 <__gedf2+0xa6>
 8002774:	e7cf      	b.n	8002716 <__gedf2+0x7a>
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	000007ff 	.word	0x000007ff

0800277c <__ledf2>:
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	4657      	mov	r7, sl
 8002780:	464e      	mov	r6, r9
 8002782:	4645      	mov	r5, r8
 8002784:	46de      	mov	lr, fp
 8002786:	b5e0      	push	{r5, r6, r7, lr}
 8002788:	000d      	movs	r5, r1
 800278a:	030e      	lsls	r6, r1, #12
 800278c:	0049      	lsls	r1, r1, #1
 800278e:	0d49      	lsrs	r1, r1, #21
 8002790:	468a      	mov	sl, r1
 8002792:	0fdf      	lsrs	r7, r3, #31
 8002794:	0fe9      	lsrs	r1, r5, #31
 8002796:	46bc      	mov	ip, r7
 8002798:	b083      	sub	sp, #12
 800279a:	4f2e      	ldr	r7, [pc, #184]	@ (8002854 <__ledf2+0xd8>)
 800279c:	0004      	movs	r4, r0
 800279e:	4680      	mov	r8, r0
 80027a0:	9101      	str	r1, [sp, #4]
 80027a2:	0058      	lsls	r0, r3, #1
 80027a4:	0319      	lsls	r1, r3, #12
 80027a6:	4691      	mov	r9, r2
 80027a8:	0b36      	lsrs	r6, r6, #12
 80027aa:	0b09      	lsrs	r1, r1, #12
 80027ac:	0d40      	lsrs	r0, r0, #21
 80027ae:	45ba      	cmp	sl, r7
 80027b0:	d01e      	beq.n	80027f0 <__ledf2+0x74>
 80027b2:	42b8      	cmp	r0, r7
 80027b4:	d00d      	beq.n	80027d2 <__ledf2+0x56>
 80027b6:	4657      	mov	r7, sl
 80027b8:	2f00      	cmp	r7, #0
 80027ba:	d127      	bne.n	800280c <__ledf2+0x90>
 80027bc:	4334      	orrs	r4, r6
 80027be:	2800      	cmp	r0, #0
 80027c0:	d133      	bne.n	800282a <__ledf2+0xae>
 80027c2:	430a      	orrs	r2, r1
 80027c4:	d034      	beq.n	8002830 <__ledf2+0xb4>
 80027c6:	2c00      	cmp	r4, #0
 80027c8:	d140      	bne.n	800284c <__ledf2+0xd0>
 80027ca:	4663      	mov	r3, ip
 80027cc:	0058      	lsls	r0, r3, #1
 80027ce:	3801      	subs	r0, #1
 80027d0:	e015      	b.n	80027fe <__ledf2+0x82>
 80027d2:	4311      	orrs	r1, r2
 80027d4:	d112      	bne.n	80027fc <__ledf2+0x80>
 80027d6:	4653      	mov	r3, sl
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <__ledf2+0x64>
 80027dc:	4326      	orrs	r6, r4
 80027de:	d0f4      	beq.n	80027ca <__ledf2+0x4e>
 80027e0:	9b01      	ldr	r3, [sp, #4]
 80027e2:	4563      	cmp	r3, ip
 80027e4:	d01d      	beq.n	8002822 <__ledf2+0xa6>
 80027e6:	2001      	movs	r0, #1
 80027e8:	9b01      	ldr	r3, [sp, #4]
 80027ea:	425f      	negs	r7, r3
 80027ec:	4338      	orrs	r0, r7
 80027ee:	e006      	b.n	80027fe <__ledf2+0x82>
 80027f0:	4326      	orrs	r6, r4
 80027f2:	d103      	bne.n	80027fc <__ledf2+0x80>
 80027f4:	4550      	cmp	r0, sl
 80027f6:	d1f6      	bne.n	80027e6 <__ledf2+0x6a>
 80027f8:	4311      	orrs	r1, r2
 80027fa:	d01c      	beq.n	8002836 <__ledf2+0xba>
 80027fc:	2002      	movs	r0, #2
 80027fe:	b003      	add	sp, #12
 8002800:	bcf0      	pop	{r4, r5, r6, r7}
 8002802:	46bb      	mov	fp, r7
 8002804:	46b2      	mov	sl, r6
 8002806:	46a9      	mov	r9, r5
 8002808:	46a0      	mov	r8, r4
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	2800      	cmp	r0, #0
 800280e:	d0ea      	beq.n	80027e6 <__ledf2+0x6a>
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	4563      	cmp	r3, ip
 8002814:	d1e7      	bne.n	80027e6 <__ledf2+0x6a>
 8002816:	4582      	cmp	sl, r0
 8002818:	dce5      	bgt.n	80027e6 <__ledf2+0x6a>
 800281a:	db02      	blt.n	8002822 <__ledf2+0xa6>
 800281c:	428e      	cmp	r6, r1
 800281e:	d8e2      	bhi.n	80027e6 <__ledf2+0x6a>
 8002820:	d00e      	beq.n	8002840 <__ledf2+0xc4>
 8002822:	9b01      	ldr	r3, [sp, #4]
 8002824:	0058      	lsls	r0, r3, #1
 8002826:	3801      	subs	r0, #1
 8002828:	e7e9      	b.n	80027fe <__ledf2+0x82>
 800282a:	2c00      	cmp	r4, #0
 800282c:	d0cd      	beq.n	80027ca <__ledf2+0x4e>
 800282e:	e7d7      	b.n	80027e0 <__ledf2+0x64>
 8002830:	2c00      	cmp	r4, #0
 8002832:	d0e4      	beq.n	80027fe <__ledf2+0x82>
 8002834:	e7d7      	b.n	80027e6 <__ledf2+0x6a>
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	2000      	movs	r0, #0
 800283a:	4563      	cmp	r3, ip
 800283c:	d0df      	beq.n	80027fe <__ledf2+0x82>
 800283e:	e7d2      	b.n	80027e6 <__ledf2+0x6a>
 8002840:	45c8      	cmp	r8, r9
 8002842:	d8d0      	bhi.n	80027e6 <__ledf2+0x6a>
 8002844:	2000      	movs	r0, #0
 8002846:	45c8      	cmp	r8, r9
 8002848:	d2d9      	bcs.n	80027fe <__ledf2+0x82>
 800284a:	e7ea      	b.n	8002822 <__ledf2+0xa6>
 800284c:	9b01      	ldr	r3, [sp, #4]
 800284e:	4563      	cmp	r3, ip
 8002850:	d0e4      	beq.n	800281c <__ledf2+0xa0>
 8002852:	e7c8      	b.n	80027e6 <__ledf2+0x6a>
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dmul>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	46de      	mov	lr, fp
 8002860:	4645      	mov	r5, r8
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	001f      	movs	r7, r3
 8002866:	030b      	lsls	r3, r1, #12
 8002868:	0b1b      	lsrs	r3, r3, #12
 800286a:	0016      	movs	r6, r2
 800286c:	469a      	mov	sl, r3
 800286e:	0fca      	lsrs	r2, r1, #31
 8002870:	004b      	lsls	r3, r1, #1
 8002872:	0004      	movs	r4, r0
 8002874:	4691      	mov	r9, r2
 8002876:	b085      	sub	sp, #20
 8002878:	0d5b      	lsrs	r3, r3, #21
 800287a:	d100      	bne.n	800287e <__aeabi_dmul+0x26>
 800287c:	e1cf      	b.n	8002c1e <__aeabi_dmul+0x3c6>
 800287e:	4acd      	ldr	r2, [pc, #820]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d055      	beq.n	8002930 <__aeabi_dmul+0xd8>
 8002884:	4651      	mov	r1, sl
 8002886:	0f42      	lsrs	r2, r0, #29
 8002888:	00c9      	lsls	r1, r1, #3
 800288a:	430a      	orrs	r2, r1
 800288c:	2180      	movs	r1, #128	@ 0x80
 800288e:	0409      	lsls	r1, r1, #16
 8002890:	4311      	orrs	r1, r2
 8002892:	00c2      	lsls	r2, r0, #3
 8002894:	4690      	mov	r8, r2
 8002896:	4ac8      	ldr	r2, [pc, #800]	@ (8002bb8 <__aeabi_dmul+0x360>)
 8002898:	468a      	mov	sl, r1
 800289a:	4693      	mov	fp, r2
 800289c:	449b      	add	fp, r3
 800289e:	2300      	movs	r3, #0
 80028a0:	2500      	movs	r5, #0
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	033c      	lsls	r4, r7, #12
 80028a6:	007b      	lsls	r3, r7, #1
 80028a8:	0ffa      	lsrs	r2, r7, #31
 80028aa:	9601      	str	r6, [sp, #4]
 80028ac:	0b24      	lsrs	r4, r4, #12
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	9200      	str	r2, [sp, #0]
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x5e>
 80028b4:	e188      	b.n	8002bc8 <__aeabi_dmul+0x370>
 80028b6:	4abf      	ldr	r2, [pc, #764]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x66>
 80028bc:	e092      	b.n	80029e4 <__aeabi_dmul+0x18c>
 80028be:	4abe      	ldr	r2, [pc, #760]	@ (8002bb8 <__aeabi_dmul+0x360>)
 80028c0:	4694      	mov	ip, r2
 80028c2:	4463      	add	r3, ip
 80028c4:	449b      	add	fp, r3
 80028c6:	2d0a      	cmp	r5, #10
 80028c8:	dc42      	bgt.n	8002950 <__aeabi_dmul+0xf8>
 80028ca:	00e4      	lsls	r4, r4, #3
 80028cc:	0f73      	lsrs	r3, r6, #29
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2480      	movs	r4, #128	@ 0x80
 80028d2:	4649      	mov	r1, r9
 80028d4:	0424      	lsls	r4, r4, #16
 80028d6:	431c      	orrs	r4, r3
 80028d8:	00f3      	lsls	r3, r6, #3
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	9b00      	ldr	r3, [sp, #0]
 80028de:	2000      	movs	r0, #0
 80028e0:	4059      	eors	r1, r3
 80028e2:	b2cb      	uxtb	r3, r1
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	2d02      	cmp	r5, #2
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x94>
 80028ea:	e094      	b.n	8002a16 <__aeabi_dmul+0x1be>
 80028ec:	2301      	movs	r3, #1
 80028ee:	40ab      	lsls	r3, r5
 80028f0:	001d      	movs	r5, r3
 80028f2:	23a6      	movs	r3, #166	@ 0xa6
 80028f4:	002a      	movs	r2, r5
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	401a      	ands	r2, r3
 80028fa:	421d      	tst	r5, r3
 80028fc:	d000      	beq.n	8002900 <__aeabi_dmul+0xa8>
 80028fe:	e229      	b.n	8002d54 <__aeabi_dmul+0x4fc>
 8002900:	2390      	movs	r3, #144	@ 0x90
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	421d      	tst	r5, r3
 8002906:	d100      	bne.n	800290a <__aeabi_dmul+0xb2>
 8002908:	e24d      	b.n	8002da6 <__aeabi_dmul+0x54e>
 800290a:	2300      	movs	r3, #0
 800290c:	2480      	movs	r4, #128	@ 0x80
 800290e:	4699      	mov	r9, r3
 8002910:	0324      	lsls	r4, r4, #12
 8002912:	4ba8      	ldr	r3, [pc, #672]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 8002914:	0010      	movs	r0, r2
 8002916:	464a      	mov	r2, r9
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	4323      	orrs	r3, r4
 800291c:	07d2      	lsls	r2, r2, #31
 800291e:	4313      	orrs	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	b005      	add	sp, #20
 8002924:	bcf0      	pop	{r4, r5, r6, r7}
 8002926:	46bb      	mov	fp, r7
 8002928:	46b2      	mov	sl, r6
 800292a:	46a9      	mov	r9, r5
 800292c:	46a0      	mov	r8, r4
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002930:	4652      	mov	r2, sl
 8002932:	4302      	orrs	r2, r0
 8002934:	4690      	mov	r8, r2
 8002936:	d000      	beq.n	800293a <__aeabi_dmul+0xe2>
 8002938:	e1ac      	b.n	8002c94 <__aeabi_dmul+0x43c>
 800293a:	469b      	mov	fp, r3
 800293c:	2302      	movs	r3, #2
 800293e:	4692      	mov	sl, r2
 8002940:	2508      	movs	r5, #8
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	e7ae      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002946:	9b00      	ldr	r3, [sp, #0]
 8002948:	46a2      	mov	sl, r4
 800294a:	4699      	mov	r9, r3
 800294c:	9b01      	ldr	r3, [sp, #4]
 800294e:	4698      	mov	r8, r3
 8002950:	9b02      	ldr	r3, [sp, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d100      	bne.n	8002958 <__aeabi_dmul+0x100>
 8002956:	e1ca      	b.n	8002cee <__aeabi_dmul+0x496>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d100      	bne.n	800295e <__aeabi_dmul+0x106>
 800295c:	e192      	b.n	8002c84 <__aeabi_dmul+0x42c>
 800295e:	2b01      	cmp	r3, #1
 8002960:	d110      	bne.n	8002984 <__aeabi_dmul+0x12c>
 8002962:	2300      	movs	r3, #0
 8002964:	2400      	movs	r4, #0
 8002966:	2200      	movs	r2, #0
 8002968:	e7d4      	b.n	8002914 <__aeabi_dmul+0xbc>
 800296a:	2201      	movs	r2, #1
 800296c:	087b      	lsrs	r3, r7, #1
 800296e:	403a      	ands	r2, r7
 8002970:	4313      	orrs	r3, r2
 8002972:	4652      	mov	r2, sl
 8002974:	07d2      	lsls	r2, r2, #31
 8002976:	4313      	orrs	r3, r2
 8002978:	4698      	mov	r8, r3
 800297a:	4653      	mov	r3, sl
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	469a      	mov	sl, r3
 8002980:	9b03      	ldr	r3, [sp, #12]
 8002982:	4699      	mov	r9, r3
 8002984:	465b      	mov	r3, fp
 8002986:	1c58      	adds	r0, r3, #1
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	445b      	add	r3, fp
 800298e:	2b00      	cmp	r3, #0
 8002990:	dc00      	bgt.n	8002994 <__aeabi_dmul+0x13c>
 8002992:	e1b1      	b.n	8002cf8 <__aeabi_dmul+0x4a0>
 8002994:	4642      	mov	r2, r8
 8002996:	0752      	lsls	r2, r2, #29
 8002998:	d00b      	beq.n	80029b2 <__aeabi_dmul+0x15a>
 800299a:	220f      	movs	r2, #15
 800299c:	4641      	mov	r1, r8
 800299e:	400a      	ands	r2, r1
 80029a0:	2a04      	cmp	r2, #4
 80029a2:	d006      	beq.n	80029b2 <__aeabi_dmul+0x15a>
 80029a4:	4642      	mov	r2, r8
 80029a6:	1d11      	adds	r1, r2, #4
 80029a8:	4541      	cmp	r1, r8
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	4688      	mov	r8, r1
 80029ae:	4252      	negs	r2, r2
 80029b0:	4492      	add	sl, r2
 80029b2:	4652      	mov	r2, sl
 80029b4:	01d2      	lsls	r2, r2, #7
 80029b6:	d506      	bpl.n	80029c6 <__aeabi_dmul+0x16e>
 80029b8:	4652      	mov	r2, sl
 80029ba:	4b80      	ldr	r3, [pc, #512]	@ (8002bbc <__aeabi_dmul+0x364>)
 80029bc:	401a      	ands	r2, r3
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	4692      	mov	sl, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	18c3      	adds	r3, r0, r3
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <__aeabi_dmul+0x368>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dmul+0x176>
 80029cc:	e18f      	b.n	8002cee <__aeabi_dmul+0x496>
 80029ce:	4642      	mov	r2, r8
 80029d0:	08d1      	lsrs	r1, r2, #3
 80029d2:	4652      	mov	r2, sl
 80029d4:	0752      	lsls	r2, r2, #29
 80029d6:	430a      	orrs	r2, r1
 80029d8:	4651      	mov	r1, sl
 80029da:	055b      	lsls	r3, r3, #21
 80029dc:	024c      	lsls	r4, r1, #9
 80029de:	0b24      	lsrs	r4, r4, #12
 80029e0:	0d5b      	lsrs	r3, r3, #21
 80029e2:	e797      	b.n	8002914 <__aeabi_dmul+0xbc>
 80029e4:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 80029e6:	4326      	orrs	r6, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	44e3      	add	fp, ip
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dmul+0x19a>
 80029f0:	e16f      	b.n	8002cd2 <__aeabi_dmul+0x47a>
 80029f2:	2303      	movs	r3, #3
 80029f4:	4649      	mov	r1, r9
 80029f6:	431d      	orrs	r5, r3
 80029f8:	9b00      	ldr	r3, [sp, #0]
 80029fa:	4059      	eors	r1, r3
 80029fc:	b2cb      	uxtb	r3, r1
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	2d0a      	cmp	r5, #10
 8002a02:	dd00      	ble.n	8002a06 <__aeabi_dmul+0x1ae>
 8002a04:	e133      	b.n	8002c6e <__aeabi_dmul+0x416>
 8002a06:	2301      	movs	r3, #1
 8002a08:	40ab      	lsls	r3, r5
 8002a0a:	001d      	movs	r5, r3
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2288      	movs	r2, #136	@ 0x88
 8002a12:	422a      	tst	r2, r5
 8002a14:	d197      	bne.n	8002946 <__aeabi_dmul+0xee>
 8002a16:	4642      	mov	r2, r8
 8002a18:	4643      	mov	r3, r8
 8002a1a:	0412      	lsls	r2, r2, #16
 8002a1c:	0c12      	lsrs	r2, r2, #16
 8002a1e:	0016      	movs	r6, r2
 8002a20:	9801      	ldr	r0, [sp, #4]
 8002a22:	0c1d      	lsrs	r5, r3, #16
 8002a24:	0c03      	lsrs	r3, r0, #16
 8002a26:	0400      	lsls	r0, r0, #16
 8002a28:	0c00      	lsrs	r0, r0, #16
 8002a2a:	4346      	muls	r6, r0
 8002a2c:	46b4      	mov	ip, r6
 8002a2e:	001e      	movs	r6, r3
 8002a30:	436e      	muls	r6, r5
 8002a32:	9600      	str	r6, [sp, #0]
 8002a34:	0016      	movs	r6, r2
 8002a36:	0007      	movs	r7, r0
 8002a38:	435e      	muls	r6, r3
 8002a3a:	4661      	mov	r1, ip
 8002a3c:	46b0      	mov	r8, r6
 8002a3e:	436f      	muls	r7, r5
 8002a40:	0c0e      	lsrs	r6, r1, #16
 8002a42:	44b8      	add	r8, r7
 8002a44:	4446      	add	r6, r8
 8002a46:	42b7      	cmp	r7, r6
 8002a48:	d905      	bls.n	8002a56 <__aeabi_dmul+0x1fe>
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	0249      	lsls	r1, r1, #9
 8002a4e:	4688      	mov	r8, r1
 8002a50:	9f00      	ldr	r7, [sp, #0]
 8002a52:	4447      	add	r7, r8
 8002a54:	9700      	str	r7, [sp, #0]
 8002a56:	4661      	mov	r1, ip
 8002a58:	0409      	lsls	r1, r1, #16
 8002a5a:	0c09      	lsrs	r1, r1, #16
 8002a5c:	0c37      	lsrs	r7, r6, #16
 8002a5e:	0436      	lsls	r6, r6, #16
 8002a60:	468c      	mov	ip, r1
 8002a62:	0031      	movs	r1, r6
 8002a64:	4461      	add	r1, ip
 8002a66:	9101      	str	r1, [sp, #4]
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0c26      	lsrs	r6, r4, #16
 8002a6c:	0424      	lsls	r4, r4, #16
 8002a6e:	0c24      	lsrs	r4, r4, #16
 8002a70:	4361      	muls	r1, r4
 8002a72:	468c      	mov	ip, r1
 8002a74:	0021      	movs	r1, r4
 8002a76:	4369      	muls	r1, r5
 8002a78:	4689      	mov	r9, r1
 8002a7a:	4661      	mov	r1, ip
 8002a7c:	0c09      	lsrs	r1, r1, #16
 8002a7e:	4688      	mov	r8, r1
 8002a80:	4372      	muls	r2, r6
 8002a82:	444a      	add	r2, r9
 8002a84:	4442      	add	r2, r8
 8002a86:	4375      	muls	r5, r6
 8002a88:	4591      	cmp	r9, r2
 8002a8a:	d903      	bls.n	8002a94 <__aeabi_dmul+0x23c>
 8002a8c:	2180      	movs	r1, #128	@ 0x80
 8002a8e:	0249      	lsls	r1, r1, #9
 8002a90:	4688      	mov	r8, r1
 8002a92:	4445      	add	r5, r8
 8002a94:	0c11      	lsrs	r1, r2, #16
 8002a96:	4688      	mov	r8, r1
 8002a98:	4661      	mov	r1, ip
 8002a9a:	0409      	lsls	r1, r1, #16
 8002a9c:	0c09      	lsrs	r1, r1, #16
 8002a9e:	468c      	mov	ip, r1
 8002aa0:	0412      	lsls	r2, r2, #16
 8002aa2:	4462      	add	r2, ip
 8002aa4:	18b9      	adds	r1, r7, r2
 8002aa6:	9102      	str	r1, [sp, #8]
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	0c09      	lsrs	r1, r1, #16
 8002aac:	468c      	mov	ip, r1
 8002aae:	4651      	mov	r1, sl
 8002ab0:	040f      	lsls	r7, r1, #16
 8002ab2:	0c3f      	lsrs	r7, r7, #16
 8002ab4:	0039      	movs	r1, r7
 8002ab6:	4341      	muls	r1, r0
 8002ab8:	4445      	add	r5, r8
 8002aba:	4688      	mov	r8, r1
 8002abc:	4661      	mov	r1, ip
 8002abe:	4341      	muls	r1, r0
 8002ac0:	468a      	mov	sl, r1
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	4660      	mov	r0, ip
 8002ac6:	0c09      	lsrs	r1, r1, #16
 8002ac8:	4689      	mov	r9, r1
 8002aca:	4358      	muls	r0, r3
 8002acc:	437b      	muls	r3, r7
 8002ace:	4453      	add	r3, sl
 8002ad0:	444b      	add	r3, r9
 8002ad2:	459a      	cmp	sl, r3
 8002ad4:	d903      	bls.n	8002ade <__aeabi_dmul+0x286>
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	0249      	lsls	r1, r1, #9
 8002ada:	4689      	mov	r9, r1
 8002adc:	4448      	add	r0, r9
 8002ade:	0c19      	lsrs	r1, r3, #16
 8002ae0:	4689      	mov	r9, r1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	0409      	lsls	r1, r1, #16
 8002ae6:	0c09      	lsrs	r1, r1, #16
 8002ae8:	4688      	mov	r8, r1
 8002aea:	0039      	movs	r1, r7
 8002aec:	4361      	muls	r1, r4
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	4443      	add	r3, r8
 8002af2:	4688      	mov	r8, r1
 8002af4:	4661      	mov	r1, ip
 8002af6:	434c      	muls	r4, r1
 8002af8:	4371      	muls	r1, r6
 8002afa:	468c      	mov	ip, r1
 8002afc:	4641      	mov	r1, r8
 8002afe:	4377      	muls	r7, r6
 8002b00:	0c0e      	lsrs	r6, r1, #16
 8002b02:	193f      	adds	r7, r7, r4
 8002b04:	19f6      	adds	r6, r6, r7
 8002b06:	4448      	add	r0, r9
 8002b08:	42b4      	cmp	r4, r6
 8002b0a:	d903      	bls.n	8002b14 <__aeabi_dmul+0x2bc>
 8002b0c:	2180      	movs	r1, #128	@ 0x80
 8002b0e:	0249      	lsls	r1, r1, #9
 8002b10:	4689      	mov	r9, r1
 8002b12:	44cc      	add	ip, r9
 8002b14:	9902      	ldr	r1, [sp, #8]
 8002b16:	9f00      	ldr	r7, [sp, #0]
 8002b18:	4689      	mov	r9, r1
 8002b1a:	0431      	lsls	r1, r6, #16
 8002b1c:	444f      	add	r7, r9
 8002b1e:	4689      	mov	r9, r1
 8002b20:	4641      	mov	r1, r8
 8002b22:	4297      	cmp	r7, r2
 8002b24:	4192      	sbcs	r2, r2
 8002b26:	040c      	lsls	r4, r1, #16
 8002b28:	0c24      	lsrs	r4, r4, #16
 8002b2a:	444c      	add	r4, r9
 8002b2c:	18ff      	adds	r7, r7, r3
 8002b2e:	4252      	negs	r2, r2
 8002b30:	1964      	adds	r4, r4, r5
 8002b32:	18a1      	adds	r1, r4, r2
 8002b34:	429f      	cmp	r7, r3
 8002b36:	419b      	sbcs	r3, r3
 8002b38:	4688      	mov	r8, r1
 8002b3a:	4682      	mov	sl, r0
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	4699      	mov	r9, r3
 8002b40:	4590      	cmp	r8, r2
 8002b42:	4192      	sbcs	r2, r2
 8002b44:	42ac      	cmp	r4, r5
 8002b46:	41a4      	sbcs	r4, r4
 8002b48:	44c2      	add	sl, r8
 8002b4a:	44d1      	add	r9, sl
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	4264      	negs	r4, r4
 8002b50:	4314      	orrs	r4, r2
 8002b52:	4599      	cmp	r9, r3
 8002b54:	419b      	sbcs	r3, r3
 8002b56:	4582      	cmp	sl, r0
 8002b58:	4192      	sbcs	r2, r2
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	4252      	negs	r2, r2
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	464a      	mov	r2, r9
 8002b62:	0c36      	lsrs	r6, r6, #16
 8002b64:	19a4      	adds	r4, r4, r6
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	4463      	add	r3, ip
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	0dd2      	lsrs	r2, r2, #23
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	9901      	ldr	r1, [sp, #4]
 8002b72:	4692      	mov	sl, r2
 8002b74:	027a      	lsls	r2, r7, #9
 8002b76:	430a      	orrs	r2, r1
 8002b78:	1e50      	subs	r0, r2, #1
 8002b7a:	4182      	sbcs	r2, r0
 8002b7c:	0dff      	lsrs	r7, r7, #23
 8002b7e:	4317      	orrs	r7, r2
 8002b80:	464a      	mov	r2, r9
 8002b82:	0252      	lsls	r2, r2, #9
 8002b84:	4317      	orrs	r7, r2
 8002b86:	46b8      	mov	r8, r7
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	d500      	bpl.n	8002b8e <__aeabi_dmul+0x336>
 8002b8c:	e6ed      	b.n	800296a <__aeabi_dmul+0x112>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <__aeabi_dmul+0x36c>)
 8002b90:	9a03      	ldr	r2, [sp, #12]
 8002b92:	445b      	add	r3, fp
 8002b94:	4691      	mov	r9, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	dc00      	bgt.n	8002b9c <__aeabi_dmul+0x344>
 8002b9a:	e0ac      	b.n	8002cf6 <__aeabi_dmul+0x49e>
 8002b9c:	003a      	movs	r2, r7
 8002b9e:	0752      	lsls	r2, r2, #29
 8002ba0:	d100      	bne.n	8002ba4 <__aeabi_dmul+0x34c>
 8002ba2:	e710      	b.n	80029c6 <__aeabi_dmul+0x16e>
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	4658      	mov	r0, fp
 8002ba8:	403a      	ands	r2, r7
 8002baa:	2a04      	cmp	r2, #4
 8002bac:	d000      	beq.n	8002bb0 <__aeabi_dmul+0x358>
 8002bae:	e6f9      	b.n	80029a4 <__aeabi_dmul+0x14c>
 8002bb0:	e709      	b.n	80029c6 <__aeabi_dmul+0x16e>
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	000007ff 	.word	0x000007ff
 8002bb8:	fffffc01 	.word	0xfffffc01
 8002bbc:	feffffff 	.word	0xfeffffff
 8002bc0:	000007fe 	.word	0x000007fe
 8002bc4:	000003ff 	.word	0x000003ff
 8002bc8:	0022      	movs	r2, r4
 8002bca:	4332      	orrs	r2, r6
 8002bcc:	d06f      	beq.n	8002cae <__aeabi_dmul+0x456>
 8002bce:	2c00      	cmp	r4, #0
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dmul+0x37c>
 8002bd2:	e0c2      	b.n	8002d5a <__aeabi_dmul+0x502>
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f7fd fcb5 	bl	8000544 <__clzsi2>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	0003      	movs	r3, r0
 8002bde:	3a0b      	subs	r2, #11
 8002be0:	201d      	movs	r0, #29
 8002be2:	1a82      	subs	r2, r0, r2
 8002be4:	0030      	movs	r0, r6
 8002be6:	0019      	movs	r1, r3
 8002be8:	40d0      	lsrs	r0, r2
 8002bea:	3908      	subs	r1, #8
 8002bec:	408c      	lsls	r4, r1
 8002bee:	0002      	movs	r2, r0
 8002bf0:	4322      	orrs	r2, r4
 8002bf2:	0034      	movs	r4, r6
 8002bf4:	408c      	lsls	r4, r1
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	1acb      	subs	r3, r1, r3
 8002bfa:	4986      	ldr	r1, [pc, #536]	@ (8002e14 <__aeabi_dmul+0x5bc>)
 8002bfc:	468b      	mov	fp, r1
 8002bfe:	449b      	add	fp, r3
 8002c00:	2d0a      	cmp	r5, #10
 8002c02:	dd00      	ble.n	8002c06 <__aeabi_dmul+0x3ae>
 8002c04:	e6a4      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002c06:	4649      	mov	r1, r9
 8002c08:	9b00      	ldr	r3, [sp, #0]
 8002c0a:	9401      	str	r4, [sp, #4]
 8002c0c:	4059      	eors	r1, r3
 8002c0e:	b2cb      	uxtb	r3, r1
 8002c10:	0014      	movs	r4, r2
 8002c12:	2000      	movs	r0, #0
 8002c14:	9303      	str	r3, [sp, #12]
 8002c16:	2d02      	cmp	r5, #2
 8002c18:	dd00      	ble.n	8002c1c <__aeabi_dmul+0x3c4>
 8002c1a:	e667      	b.n	80028ec <__aeabi_dmul+0x94>
 8002c1c:	e6fb      	b.n	8002a16 <__aeabi_dmul+0x1be>
 8002c1e:	4653      	mov	r3, sl
 8002c20:	4303      	orrs	r3, r0
 8002c22:	4698      	mov	r8, r3
 8002c24:	d03c      	beq.n	8002ca0 <__aeabi_dmul+0x448>
 8002c26:	4653      	mov	r3, sl
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dmul+0x3d6>
 8002c2c:	e0a3      	b.n	8002d76 <__aeabi_dmul+0x51e>
 8002c2e:	4650      	mov	r0, sl
 8002c30:	f7fd fc88 	bl	8000544 <__clzsi2>
 8002c34:	230b      	movs	r3, #11
 8002c36:	425b      	negs	r3, r3
 8002c38:	469c      	mov	ip, r3
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	4484      	add	ip, r0
 8002c3e:	0011      	movs	r1, r2
 8002c40:	4650      	mov	r0, sl
 8002c42:	3908      	subs	r1, #8
 8002c44:	4088      	lsls	r0, r1
 8002c46:	231d      	movs	r3, #29
 8002c48:	4680      	mov	r8, r0
 8002c4a:	4660      	mov	r0, ip
 8002c4c:	1a1b      	subs	r3, r3, r0
 8002c4e:	0020      	movs	r0, r4
 8002c50:	40d8      	lsrs	r0, r3
 8002c52:	0003      	movs	r3, r0
 8002c54:	4640      	mov	r0, r8
 8002c56:	4303      	orrs	r3, r0
 8002c58:	469a      	mov	sl, r3
 8002c5a:	0023      	movs	r3, r4
 8002c5c:	408b      	lsls	r3, r1
 8002c5e:	4698      	mov	r8, r3
 8002c60:	4b6c      	ldr	r3, [pc, #432]	@ (8002e14 <__aeabi_dmul+0x5bc>)
 8002c62:	2500      	movs	r5, #0
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	469b      	mov	fp, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	e61a      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002c6e:	2d0f      	cmp	r5, #15
 8002c70:	d000      	beq.n	8002c74 <__aeabi_dmul+0x41c>
 8002c72:	e0c9      	b.n	8002e08 <__aeabi_dmul+0x5b0>
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	4652      	mov	r2, sl
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	421a      	tst	r2, r3
 8002c7c:	d002      	beq.n	8002c84 <__aeabi_dmul+0x42c>
 8002c7e:	421c      	tst	r4, r3
 8002c80:	d100      	bne.n	8002c84 <__aeabi_dmul+0x42c>
 8002c82:	e092      	b.n	8002daa <__aeabi_dmul+0x552>
 8002c84:	2480      	movs	r4, #128	@ 0x80
 8002c86:	4653      	mov	r3, sl
 8002c88:	0324      	lsls	r4, r4, #12
 8002c8a:	431c      	orrs	r4, r3
 8002c8c:	0324      	lsls	r4, r4, #12
 8002c8e:	4642      	mov	r2, r8
 8002c90:	0b24      	lsrs	r4, r4, #12
 8002c92:	e63e      	b.n	8002912 <__aeabi_dmul+0xba>
 8002c94:	469b      	mov	fp, r3
 8002c96:	2303      	movs	r3, #3
 8002c98:	4680      	mov	r8, r0
 8002c9a:	250c      	movs	r5, #12
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	e601      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	469b      	mov	fp, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	2504      	movs	r5, #4
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	e5fa      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430d      	orrs	r5, r1
 8002cb2:	2d0a      	cmp	r5, #10
 8002cb4:	dd00      	ble.n	8002cb8 <__aeabi_dmul+0x460>
 8002cb6:	e64b      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002cb8:	4649      	mov	r1, r9
 8002cba:	9800      	ldr	r0, [sp, #0]
 8002cbc:	4041      	eors	r1, r0
 8002cbe:	b2c9      	uxtb	r1, r1
 8002cc0:	9103      	str	r1, [sp, #12]
 8002cc2:	2d02      	cmp	r5, #2
 8002cc4:	dc00      	bgt.n	8002cc8 <__aeabi_dmul+0x470>
 8002cc6:	e096      	b.n	8002df6 <__aeabi_dmul+0x59e>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2400      	movs	r4, #0
 8002ccc:	2001      	movs	r0, #1
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	e60c      	b.n	80028ec <__aeabi_dmul+0x94>
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	9a00      	ldr	r2, [sp, #0]
 8002cd8:	432b      	orrs	r3, r5
 8002cda:	4051      	eors	r1, r2
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	9203      	str	r2, [sp, #12]
 8002ce0:	2b0a      	cmp	r3, #10
 8002ce2:	dd00      	ble.n	8002ce6 <__aeabi_dmul+0x48e>
 8002ce4:	e634      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	d157      	bne.n	8002d9a <__aeabi_dmul+0x542>
 8002cea:	9b03      	ldr	r3, [sp, #12]
 8002cec:	4699      	mov	r9, r3
 8002cee:	2400      	movs	r4, #0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <__aeabi_dmul+0x5c0>)
 8002cf4:	e60e      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002cf6:	4658      	mov	r0, fp
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	1ac9      	subs	r1, r1, r3
 8002cfc:	2938      	cmp	r1, #56	@ 0x38
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x4aa>
 8002d00:	e62f      	b.n	8002962 <__aeabi_dmul+0x10a>
 8002d02:	291f      	cmp	r1, #31
 8002d04:	dd56      	ble.n	8002db4 <__aeabi_dmul+0x55c>
 8002d06:	221f      	movs	r2, #31
 8002d08:	4654      	mov	r4, sl
 8002d0a:	4252      	negs	r2, r2
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	40dc      	lsrs	r4, r3
 8002d10:	2920      	cmp	r1, #32
 8002d12:	d007      	beq.n	8002d24 <__aeabi_dmul+0x4cc>
 8002d14:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <__aeabi_dmul+0x5c4>)
 8002d16:	4642      	mov	r2, r8
 8002d18:	469c      	mov	ip, r3
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4460      	add	r0, ip
 8002d1e:	4083      	lsls	r3, r0
 8002d20:	431a      	orrs	r2, r3
 8002d22:	4690      	mov	r8, r2
 8002d24:	4642      	mov	r2, r8
 8002d26:	2107      	movs	r1, #7
 8002d28:	1e53      	subs	r3, r2, #1
 8002d2a:	419a      	sbcs	r2, r3
 8002d2c:	000b      	movs	r3, r1
 8002d2e:	4322      	orrs	r2, r4
 8002d30:	4013      	ands	r3, r2
 8002d32:	2400      	movs	r4, #0
 8002d34:	4211      	tst	r1, r2
 8002d36:	d009      	beq.n	8002d4c <__aeabi_dmul+0x4f4>
 8002d38:	230f      	movs	r3, #15
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d05d      	beq.n	8002dfc <__aeabi_dmul+0x5a4>
 8002d40:	1d11      	adds	r1, r2, #4
 8002d42:	4291      	cmp	r1, r2
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	000a      	movs	r2, r1
 8002d48:	425b      	negs	r3, r3
 8002d4a:	075b      	lsls	r3, r3, #29
 8002d4c:	08d2      	lsrs	r2, r2, #3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	e5df      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	4699      	mov	r9, r3
 8002d58:	e5fa      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002d5a:	9801      	ldr	r0, [sp, #4]
 8002d5c:	f7fd fbf2 	bl	8000544 <__clzsi2>
 8002d60:	0002      	movs	r2, r0
 8002d62:	0003      	movs	r3, r0
 8002d64:	3215      	adds	r2, #21
 8002d66:	3320      	adds	r3, #32
 8002d68:	2a1c      	cmp	r2, #28
 8002d6a:	dc00      	bgt.n	8002d6e <__aeabi_dmul+0x516>
 8002d6c:	e738      	b.n	8002be0 <__aeabi_dmul+0x388>
 8002d6e:	9a01      	ldr	r2, [sp, #4]
 8002d70:	3808      	subs	r0, #8
 8002d72:	4082      	lsls	r2, r0
 8002d74:	e73f      	b.n	8002bf6 <__aeabi_dmul+0x39e>
 8002d76:	f7fd fbe5 	bl	8000544 <__clzsi2>
 8002d7a:	2315      	movs	r3, #21
 8002d7c:	469c      	mov	ip, r3
 8002d7e:	4484      	add	ip, r0
 8002d80:	0002      	movs	r2, r0
 8002d82:	4663      	mov	r3, ip
 8002d84:	3220      	adds	r2, #32
 8002d86:	2b1c      	cmp	r3, #28
 8002d88:	dc00      	bgt.n	8002d8c <__aeabi_dmul+0x534>
 8002d8a:	e758      	b.n	8002c3e <__aeabi_dmul+0x3e6>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4698      	mov	r8, r3
 8002d90:	0023      	movs	r3, r4
 8002d92:	3808      	subs	r0, #8
 8002d94:	4083      	lsls	r3, r0
 8002d96:	469a      	mov	sl, r3
 8002d98:	e762      	b.n	8002c60 <__aeabi_dmul+0x408>
 8002d9a:	001d      	movs	r5, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2400      	movs	r4, #0
 8002da0:	2002      	movs	r0, #2
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	e5a2      	b.n	80028ec <__aeabi_dmul+0x94>
 8002da6:	9002      	str	r0, [sp, #8]
 8002da8:	e632      	b.n	8002a10 <__aeabi_dmul+0x1b8>
 8002daa:	431c      	orrs	r4, r3
 8002dac:	9b00      	ldr	r3, [sp, #0]
 8002dae:	9a01      	ldr	r2, [sp, #4]
 8002db0:	4699      	mov	r9, r3
 8002db2:	e5ae      	b.n	8002912 <__aeabi_dmul+0xba>
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <__aeabi_dmul+0x5c8>)
 8002db6:	4652      	mov	r2, sl
 8002db8:	18c3      	adds	r3, r0, r3
 8002dba:	4640      	mov	r0, r8
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	40c8      	lsrs	r0, r1
 8002dc0:	4302      	orrs	r2, r0
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	4098      	lsls	r0, r3
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	4183      	sbcs	r3, r0
 8002dcc:	4654      	mov	r4, sl
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	40cc      	lsrs	r4, r1
 8002dd2:	0753      	lsls	r3, r2, #29
 8002dd4:	d009      	beq.n	8002dea <__aeabi_dmul+0x592>
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d005      	beq.n	8002dea <__aeabi_dmul+0x592>
 8002dde:	1d13      	adds	r3, r2, #4
 8002de0:	4293      	cmp	r3, r2
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	4252      	negs	r2, r2
 8002de6:	18a4      	adds	r4, r4, r2
 8002de8:	001a      	movs	r2, r3
 8002dea:	0223      	lsls	r3, r4, #8
 8002dec:	d508      	bpl.n	8002e00 <__aeabi_dmul+0x5a8>
 8002dee:	2301      	movs	r3, #1
 8002df0:	2400      	movs	r4, #0
 8002df2:	2200      	movs	r2, #0
 8002df4:	e58e      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002df6:	4689      	mov	r9, r1
 8002df8:	2400      	movs	r4, #0
 8002dfa:	e58b      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e7a5      	b.n	8002d4c <__aeabi_dmul+0x4f4>
 8002e00:	0763      	lsls	r3, r4, #29
 8002e02:	0264      	lsls	r4, r4, #9
 8002e04:	0b24      	lsrs	r4, r4, #12
 8002e06:	e7a1      	b.n	8002d4c <__aeabi_dmul+0x4f4>
 8002e08:	9b00      	ldr	r3, [sp, #0]
 8002e0a:	46a2      	mov	sl, r4
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	9b01      	ldr	r3, [sp, #4]
 8002e10:	4698      	mov	r8, r3
 8002e12:	e737      	b.n	8002c84 <__aeabi_dmul+0x42c>
 8002e14:	fffffc0d 	.word	0xfffffc0d
 8002e18:	000007ff 	.word	0x000007ff
 8002e1c:	0000043e 	.word	0x0000043e
 8002e20:	0000041e 	.word	0x0000041e

08002e24 <__aeabi_dsub>:
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	4657      	mov	r7, sl
 8002e28:	464e      	mov	r6, r9
 8002e2a:	4645      	mov	r5, r8
 8002e2c:	46de      	mov	lr, fp
 8002e2e:	b5e0      	push	{r5, r6, r7, lr}
 8002e30:	b083      	sub	sp, #12
 8002e32:	9000      	str	r0, [sp, #0]
 8002e34:	9101      	str	r1, [sp, #4]
 8002e36:	030c      	lsls	r4, r1, #12
 8002e38:	004d      	lsls	r5, r1, #1
 8002e3a:	0fce      	lsrs	r6, r1, #31
 8002e3c:	0a61      	lsrs	r1, r4, #9
 8002e3e:	9c00      	ldr	r4, [sp, #0]
 8002e40:	005f      	lsls	r7, r3, #1
 8002e42:	0f64      	lsrs	r4, r4, #29
 8002e44:	430c      	orrs	r4, r1
 8002e46:	9900      	ldr	r1, [sp, #0]
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	00c8      	lsls	r0, r1, #3
 8002e4e:	0319      	lsls	r1, r3, #12
 8002e50:	0d7b      	lsrs	r3, r7, #21
 8002e52:	4699      	mov	r9, r3
 8002e54:	9b01      	ldr	r3, [sp, #4]
 8002e56:	4fcc      	ldr	r7, [pc, #816]	@ (8003188 <__aeabi_dsub+0x364>)
 8002e58:	0fdb      	lsrs	r3, r3, #31
 8002e5a:	469c      	mov	ip, r3
 8002e5c:	0a4b      	lsrs	r3, r1, #9
 8002e5e:	9900      	ldr	r1, [sp, #0]
 8002e60:	4680      	mov	r8, r0
 8002e62:	0f49      	lsrs	r1, r1, #29
 8002e64:	4319      	orrs	r1, r3
 8002e66:	9b00      	ldr	r3, [sp, #0]
 8002e68:	468b      	mov	fp, r1
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	4692      	mov	sl, r2
 8002e6e:	0d6d      	lsrs	r5, r5, #21
 8002e70:	45b9      	cmp	r9, r7
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x52>
 8002e74:	e0bf      	b.n	8002ff6 <__aeabi_dsub+0x1d2>
 8002e76:	2301      	movs	r3, #1
 8002e78:	4661      	mov	r1, ip
 8002e7a:	4059      	eors	r1, r3
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	468c      	mov	ip, r1
 8002e80:	1aeb      	subs	r3, r5, r3
 8002e82:	428e      	cmp	r6, r1
 8002e84:	d075      	beq.n	8002f72 <__aeabi_dsub+0x14e>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dc00      	bgt.n	8002e8c <__aeabi_dsub+0x68>
 8002e8a:	e2a3      	b.n	80033d4 <__aeabi_dsub+0x5b0>
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	2900      	cmp	r1, #0
 8002e90:	d100      	bne.n	8002e94 <__aeabi_dsub+0x70>
 8002e92:	e0ce      	b.n	8003032 <__aeabi_dsub+0x20e>
 8002e94:	42bd      	cmp	r5, r7
 8002e96:	d100      	bne.n	8002e9a <__aeabi_dsub+0x76>
 8002e98:	e200      	b.n	800329c <__aeabi_dsub+0x478>
 8002e9a:	2701      	movs	r7, #1
 8002e9c:	2b38      	cmp	r3, #56	@ 0x38
 8002e9e:	dc19      	bgt.n	8002ed4 <__aeabi_dsub+0xb0>
 8002ea0:	2780      	movs	r7, #128	@ 0x80
 8002ea2:	4659      	mov	r1, fp
 8002ea4:	043f      	lsls	r7, r7, #16
 8002ea6:	4339      	orrs	r1, r7
 8002ea8:	468b      	mov	fp, r1
 8002eaa:	2b1f      	cmp	r3, #31
 8002eac:	dd00      	ble.n	8002eb0 <__aeabi_dsub+0x8c>
 8002eae:	e1fa      	b.n	80032a6 <__aeabi_dsub+0x482>
 8002eb0:	2720      	movs	r7, #32
 8002eb2:	1af9      	subs	r1, r7, r3
 8002eb4:	468c      	mov	ip, r1
 8002eb6:	4659      	mov	r1, fp
 8002eb8:	4667      	mov	r7, ip
 8002eba:	40b9      	lsls	r1, r7
 8002ebc:	000f      	movs	r7, r1
 8002ebe:	0011      	movs	r1, r2
 8002ec0:	40d9      	lsrs	r1, r3
 8002ec2:	430f      	orrs	r7, r1
 8002ec4:	4661      	mov	r1, ip
 8002ec6:	408a      	lsls	r2, r1
 8002ec8:	1e51      	subs	r1, r2, #1
 8002eca:	418a      	sbcs	r2, r1
 8002ecc:	4659      	mov	r1, fp
 8002ece:	40d9      	lsrs	r1, r3
 8002ed0:	4317      	orrs	r7, r2
 8002ed2:	1a64      	subs	r4, r4, r1
 8002ed4:	1bc7      	subs	r7, r0, r7
 8002ed6:	42b8      	cmp	r0, r7
 8002ed8:	4180      	sbcs	r0, r0
 8002eda:	4240      	negs	r0, r0
 8002edc:	1a24      	subs	r4, r4, r0
 8002ede:	0223      	lsls	r3, r4, #8
 8002ee0:	d400      	bmi.n	8002ee4 <__aeabi_dsub+0xc0>
 8002ee2:	e140      	b.n	8003166 <__aeabi_dsub+0x342>
 8002ee4:	0264      	lsls	r4, r4, #9
 8002ee6:	0a64      	lsrs	r4, r4, #9
 8002ee8:	2c00      	cmp	r4, #0
 8002eea:	d100      	bne.n	8002eee <__aeabi_dsub+0xca>
 8002eec:	e154      	b.n	8003198 <__aeabi_dsub+0x374>
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7fd fb28 	bl	8000544 <__clzsi2>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	3b08      	subs	r3, #8
 8002ef8:	2120      	movs	r1, #32
 8002efa:	0038      	movs	r0, r7
 8002efc:	1aca      	subs	r2, r1, r3
 8002efe:	40d0      	lsrs	r0, r2
 8002f00:	409c      	lsls	r4, r3
 8002f02:	0002      	movs	r2, r0
 8002f04:	409f      	lsls	r7, r3
 8002f06:	4322      	orrs	r2, r4
 8002f08:	429d      	cmp	r5, r3
 8002f0a:	dd00      	ble.n	8002f0e <__aeabi_dsub+0xea>
 8002f0c:	e1a6      	b.n	800325c <__aeabi_dsub+0x438>
 8002f0e:	1b58      	subs	r0, r3, r5
 8002f10:	3001      	adds	r0, #1
 8002f12:	1a09      	subs	r1, r1, r0
 8002f14:	003c      	movs	r4, r7
 8002f16:	408f      	lsls	r7, r1
 8002f18:	40c4      	lsrs	r4, r0
 8002f1a:	1e7b      	subs	r3, r7, #1
 8002f1c:	419f      	sbcs	r7, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	408b      	lsls	r3, r1
 8002f22:	4327      	orrs	r7, r4
 8002f24:	431f      	orrs	r7, r3
 8002f26:	40c2      	lsrs	r2, r0
 8002f28:	003b      	movs	r3, r7
 8002f2a:	0014      	movs	r4, r2
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	d100      	bne.n	8002f34 <__aeabi_dsub+0x110>
 8002f32:	e1f7      	b.n	8003324 <__aeabi_dsub+0x500>
 8002f34:	077b      	lsls	r3, r7, #29
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0x116>
 8002f38:	e377      	b.n	800362a <__aeabi_dsub+0x806>
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	0038      	movs	r0, r7
 8002f3e:	403b      	ands	r3, r7
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d004      	beq.n	8002f4e <__aeabi_dsub+0x12a>
 8002f44:	1d38      	adds	r0, r7, #4
 8002f46:	42b8      	cmp	r0, r7
 8002f48:	41bf      	sbcs	r7, r7
 8002f4a:	427f      	negs	r7, r7
 8002f4c:	19e4      	adds	r4, r4, r7
 8002f4e:	0223      	lsls	r3, r4, #8
 8002f50:	d400      	bmi.n	8002f54 <__aeabi_dsub+0x130>
 8002f52:	e368      	b.n	8003626 <__aeabi_dsub+0x802>
 8002f54:	4b8c      	ldr	r3, [pc, #560]	@ (8003188 <__aeabi_dsub+0x364>)
 8002f56:	3501      	adds	r5, #1
 8002f58:	429d      	cmp	r5, r3
 8002f5a:	d100      	bne.n	8002f5e <__aeabi_dsub+0x13a>
 8002f5c:	e0f4      	b.n	8003148 <__aeabi_dsub+0x324>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800318c <__aeabi_dsub+0x368>)
 8002f60:	056d      	lsls	r5, r5, #21
 8002f62:	401c      	ands	r4, r3
 8002f64:	0d6d      	lsrs	r5, r5, #21
 8002f66:	0767      	lsls	r7, r4, #29
 8002f68:	08c0      	lsrs	r0, r0, #3
 8002f6a:	0264      	lsls	r4, r4, #9
 8002f6c:	4307      	orrs	r7, r0
 8002f6e:	0b24      	lsrs	r4, r4, #12
 8002f70:	e0ec      	b.n	800314c <__aeabi_dsub+0x328>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dc00      	bgt.n	8002f78 <__aeabi_dsub+0x154>
 8002f76:	e329      	b.n	80035cc <__aeabi_dsub+0x7a8>
 8002f78:	4649      	mov	r1, r9
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d000      	beq.n	8002f80 <__aeabi_dsub+0x15c>
 8002f7e:	e0d6      	b.n	800312e <__aeabi_dsub+0x30a>
 8002f80:	4659      	mov	r1, fp
 8002f82:	4311      	orrs	r1, r2
 8002f84:	d100      	bne.n	8002f88 <__aeabi_dsub+0x164>
 8002f86:	e12e      	b.n	80031e6 <__aeabi_dsub+0x3c2>
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x16c>
 8002f8e:	e1e6      	b.n	800335e <__aeabi_dsub+0x53a>
 8002f90:	42bb      	cmp	r3, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x172>
 8002f94:	e182      	b.n	800329c <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	000b      	movs	r3, r1
 8002f9a:	2938      	cmp	r1, #56	@ 0x38
 8002f9c:	dc14      	bgt.n	8002fc8 <__aeabi_dsub+0x1a4>
 8002f9e:	2b1f      	cmp	r3, #31
 8002fa0:	dd00      	ble.n	8002fa4 <__aeabi_dsub+0x180>
 8002fa2:	e23c      	b.n	800341e <__aeabi_dsub+0x5fa>
 8002fa4:	2720      	movs	r7, #32
 8002fa6:	1af9      	subs	r1, r7, r3
 8002fa8:	468c      	mov	ip, r1
 8002faa:	4659      	mov	r1, fp
 8002fac:	4667      	mov	r7, ip
 8002fae:	40b9      	lsls	r1, r7
 8002fb0:	000f      	movs	r7, r1
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	40d9      	lsrs	r1, r3
 8002fb6:	430f      	orrs	r7, r1
 8002fb8:	4661      	mov	r1, ip
 8002fba:	408a      	lsls	r2, r1
 8002fbc:	1e51      	subs	r1, r2, #1
 8002fbe:	418a      	sbcs	r2, r1
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	40d9      	lsrs	r1, r3
 8002fc4:	4317      	orrs	r7, r2
 8002fc6:	1864      	adds	r4, r4, r1
 8002fc8:	183f      	adds	r7, r7, r0
 8002fca:	4287      	cmp	r7, r0
 8002fcc:	4180      	sbcs	r0, r0
 8002fce:	4240      	negs	r0, r0
 8002fd0:	1824      	adds	r4, r4, r0
 8002fd2:	0223      	lsls	r3, r4, #8
 8002fd4:	d400      	bmi.n	8002fd8 <__aeabi_dsub+0x1b4>
 8002fd6:	e0c6      	b.n	8003166 <__aeabi_dsub+0x342>
 8002fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003188 <__aeabi_dsub+0x364>)
 8002fda:	3501      	adds	r5, #1
 8002fdc:	429d      	cmp	r5, r3
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x1be>
 8002fe0:	e0b2      	b.n	8003148 <__aeabi_dsub+0x324>
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4b69      	ldr	r3, [pc, #420]	@ (800318c <__aeabi_dsub+0x368>)
 8002fe6:	087a      	lsrs	r2, r7, #1
 8002fe8:	401c      	ands	r4, r3
 8002fea:	4039      	ands	r1, r7
 8002fec:	430a      	orrs	r2, r1
 8002fee:	07e7      	lsls	r7, r4, #31
 8002ff0:	4317      	orrs	r7, r2
 8002ff2:	0864      	lsrs	r4, r4, #1
 8002ff4:	e79e      	b.n	8002f34 <__aeabi_dsub+0x110>
 8002ff6:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <__aeabi_dsub+0x36c>)
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	468a      	mov	sl, r1
 8002ffc:	18eb      	adds	r3, r5, r3
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d028      	beq.n	8003054 <__aeabi_dsub+0x230>
 8003002:	4566      	cmp	r6, ip
 8003004:	d02c      	beq.n	8003060 <__aeabi_dsub+0x23c>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d05b      	beq.n	80030c2 <__aeabi_dsub+0x29e>
 800300a:	2d00      	cmp	r5, #0
 800300c:	d100      	bne.n	8003010 <__aeabi_dsub+0x1ec>
 800300e:	e12c      	b.n	800326a <__aeabi_dsub+0x446>
 8003010:	465b      	mov	r3, fp
 8003012:	4666      	mov	r6, ip
 8003014:	075f      	lsls	r7, r3, #29
 8003016:	08d2      	lsrs	r2, r2, #3
 8003018:	4317      	orrs	r7, r2
 800301a:	08dd      	lsrs	r5, r3, #3
 800301c:	003b      	movs	r3, r7
 800301e:	432b      	orrs	r3, r5
 8003020:	d100      	bne.n	8003024 <__aeabi_dsub+0x200>
 8003022:	e0e2      	b.n	80031ea <__aeabi_dsub+0x3c6>
 8003024:	2480      	movs	r4, #128	@ 0x80
 8003026:	0324      	lsls	r4, r4, #12
 8003028:	432c      	orrs	r4, r5
 800302a:	0324      	lsls	r4, r4, #12
 800302c:	4d56      	ldr	r5, [pc, #344]	@ (8003188 <__aeabi_dsub+0x364>)
 800302e:	0b24      	lsrs	r4, r4, #12
 8003030:	e08c      	b.n	800314c <__aeabi_dsub+0x328>
 8003032:	4659      	mov	r1, fp
 8003034:	4311      	orrs	r1, r2
 8003036:	d100      	bne.n	800303a <__aeabi_dsub+0x216>
 8003038:	e0d5      	b.n	80031e6 <__aeabi_dsub+0x3c2>
 800303a:	1e59      	subs	r1, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d100      	bne.n	8003042 <__aeabi_dsub+0x21e>
 8003040:	e1b9      	b.n	80033b6 <__aeabi_dsub+0x592>
 8003042:	42bb      	cmp	r3, r7
 8003044:	d100      	bne.n	8003048 <__aeabi_dsub+0x224>
 8003046:	e1b1      	b.n	80033ac <__aeabi_dsub+0x588>
 8003048:	2701      	movs	r7, #1
 800304a:	000b      	movs	r3, r1
 800304c:	2938      	cmp	r1, #56	@ 0x38
 800304e:	dd00      	ble.n	8003052 <__aeabi_dsub+0x22e>
 8003050:	e740      	b.n	8002ed4 <__aeabi_dsub+0xb0>
 8003052:	e72a      	b.n	8002eaa <__aeabi_dsub+0x86>
 8003054:	4661      	mov	r1, ip
 8003056:	2701      	movs	r7, #1
 8003058:	4079      	eors	r1, r7
 800305a:	468c      	mov	ip, r1
 800305c:	4566      	cmp	r6, ip
 800305e:	d1d2      	bne.n	8003006 <__aeabi_dsub+0x1e2>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d100      	bne.n	8003066 <__aeabi_dsub+0x242>
 8003064:	e0c5      	b.n	80031f2 <__aeabi_dsub+0x3ce>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d000      	beq.n	800306c <__aeabi_dsub+0x248>
 800306a:	e155      	b.n	8003318 <__aeabi_dsub+0x4f4>
 800306c:	464b      	mov	r3, r9
 800306e:	0025      	movs	r5, r4
 8003070:	4305      	orrs	r5, r0
 8003072:	d100      	bne.n	8003076 <__aeabi_dsub+0x252>
 8003074:	e212      	b.n	800349c <__aeabi_dsub+0x678>
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	468c      	mov	ip, r1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d100      	bne.n	8003080 <__aeabi_dsub+0x25c>
 800307e:	e249      	b.n	8003514 <__aeabi_dsub+0x6f0>
 8003080:	4d41      	ldr	r5, [pc, #260]	@ (8003188 <__aeabi_dsub+0x364>)
 8003082:	42ab      	cmp	r3, r5
 8003084:	d100      	bne.n	8003088 <__aeabi_dsub+0x264>
 8003086:	e28f      	b.n	80035a8 <__aeabi_dsub+0x784>
 8003088:	2701      	movs	r7, #1
 800308a:	2938      	cmp	r1, #56	@ 0x38
 800308c:	dc11      	bgt.n	80030b2 <__aeabi_dsub+0x28e>
 800308e:	4663      	mov	r3, ip
 8003090:	2b1f      	cmp	r3, #31
 8003092:	dd00      	ble.n	8003096 <__aeabi_dsub+0x272>
 8003094:	e25b      	b.n	800354e <__aeabi_dsub+0x72a>
 8003096:	4661      	mov	r1, ip
 8003098:	2320      	movs	r3, #32
 800309a:	0027      	movs	r7, r4
 800309c:	1a5b      	subs	r3, r3, r1
 800309e:	0005      	movs	r5, r0
 80030a0:	4098      	lsls	r0, r3
 80030a2:	409f      	lsls	r7, r3
 80030a4:	40cd      	lsrs	r5, r1
 80030a6:	1e43      	subs	r3, r0, #1
 80030a8:	4198      	sbcs	r0, r3
 80030aa:	40cc      	lsrs	r4, r1
 80030ac:	432f      	orrs	r7, r5
 80030ae:	4307      	orrs	r7, r0
 80030b0:	44a3      	add	fp, r4
 80030b2:	18bf      	adds	r7, r7, r2
 80030b4:	4297      	cmp	r7, r2
 80030b6:	4192      	sbcs	r2, r2
 80030b8:	4252      	negs	r2, r2
 80030ba:	445a      	add	r2, fp
 80030bc:	0014      	movs	r4, r2
 80030be:	464d      	mov	r5, r9
 80030c0:	e787      	b.n	8002fd2 <__aeabi_dsub+0x1ae>
 80030c2:	4f34      	ldr	r7, [pc, #208]	@ (8003194 <__aeabi_dsub+0x370>)
 80030c4:	1c6b      	adds	r3, r5, #1
 80030c6:	423b      	tst	r3, r7
 80030c8:	d000      	beq.n	80030cc <__aeabi_dsub+0x2a8>
 80030ca:	e0b6      	b.n	800323a <__aeabi_dsub+0x416>
 80030cc:	4659      	mov	r1, fp
 80030ce:	0023      	movs	r3, r4
 80030d0:	4311      	orrs	r1, r2
 80030d2:	000f      	movs	r7, r1
 80030d4:	4303      	orrs	r3, r0
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	d000      	beq.n	80030dc <__aeabi_dsub+0x2b8>
 80030da:	e126      	b.n	800332a <__aeabi_dsub+0x506>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x2be>
 80030e0:	e1c0      	b.n	8003464 <__aeabi_dsub+0x640>
 80030e2:	2900      	cmp	r1, #0
 80030e4:	d100      	bne.n	80030e8 <__aeabi_dsub+0x2c4>
 80030e6:	e0a1      	b.n	800322c <__aeabi_dsub+0x408>
 80030e8:	1a83      	subs	r3, r0, r2
 80030ea:	4698      	mov	r8, r3
 80030ec:	465b      	mov	r3, fp
 80030ee:	4540      	cmp	r0, r8
 80030f0:	41ad      	sbcs	r5, r5
 80030f2:	1ae3      	subs	r3, r4, r3
 80030f4:	426d      	negs	r5, r5
 80030f6:	1b5b      	subs	r3, r3, r5
 80030f8:	2580      	movs	r5, #128	@ 0x80
 80030fa:	042d      	lsls	r5, r5, #16
 80030fc:	422b      	tst	r3, r5
 80030fe:	d100      	bne.n	8003102 <__aeabi_dsub+0x2de>
 8003100:	e14b      	b.n	800339a <__aeabi_dsub+0x576>
 8003102:	465b      	mov	r3, fp
 8003104:	1a10      	subs	r0, r2, r0
 8003106:	4282      	cmp	r2, r0
 8003108:	4192      	sbcs	r2, r2
 800310a:	1b1c      	subs	r4, r3, r4
 800310c:	0007      	movs	r7, r0
 800310e:	2601      	movs	r6, #1
 8003110:	4663      	mov	r3, ip
 8003112:	4252      	negs	r2, r2
 8003114:	1aa4      	subs	r4, r4, r2
 8003116:	4327      	orrs	r7, r4
 8003118:	401e      	ands	r6, r3
 800311a:	2f00      	cmp	r7, #0
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x2fc>
 800311e:	e142      	b.n	80033a6 <__aeabi_dsub+0x582>
 8003120:	422c      	tst	r4, r5
 8003122:	d100      	bne.n	8003126 <__aeabi_dsub+0x302>
 8003124:	e26d      	b.n	8003602 <__aeabi_dsub+0x7de>
 8003126:	4b19      	ldr	r3, [pc, #100]	@ (800318c <__aeabi_dsub+0x368>)
 8003128:	2501      	movs	r5, #1
 800312a:	401c      	ands	r4, r3
 800312c:	e71b      	b.n	8002f66 <__aeabi_dsub+0x142>
 800312e:	42bd      	cmp	r5, r7
 8003130:	d100      	bne.n	8003134 <__aeabi_dsub+0x310>
 8003132:	e13b      	b.n	80033ac <__aeabi_dsub+0x588>
 8003134:	2701      	movs	r7, #1
 8003136:	2b38      	cmp	r3, #56	@ 0x38
 8003138:	dd00      	ble.n	800313c <__aeabi_dsub+0x318>
 800313a:	e745      	b.n	8002fc8 <__aeabi_dsub+0x1a4>
 800313c:	2780      	movs	r7, #128	@ 0x80
 800313e:	4659      	mov	r1, fp
 8003140:	043f      	lsls	r7, r7, #16
 8003142:	4339      	orrs	r1, r7
 8003144:	468b      	mov	fp, r1
 8003146:	e72a      	b.n	8002f9e <__aeabi_dsub+0x17a>
 8003148:	2400      	movs	r4, #0
 800314a:	2700      	movs	r7, #0
 800314c:	052d      	lsls	r5, r5, #20
 800314e:	4325      	orrs	r5, r4
 8003150:	07f6      	lsls	r6, r6, #31
 8003152:	4335      	orrs	r5, r6
 8003154:	0038      	movs	r0, r7
 8003156:	0029      	movs	r1, r5
 8003158:	b003      	add	sp, #12
 800315a:	bcf0      	pop	{r4, r5, r6, r7}
 800315c:	46bb      	mov	fp, r7
 800315e:	46b2      	mov	sl, r6
 8003160:	46a9      	mov	r9, r5
 8003162:	46a0      	mov	r8, r4
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003166:	077b      	lsls	r3, r7, #29
 8003168:	d004      	beq.n	8003174 <__aeabi_dsub+0x350>
 800316a:	230f      	movs	r3, #15
 800316c:	403b      	ands	r3, r7
 800316e:	2b04      	cmp	r3, #4
 8003170:	d000      	beq.n	8003174 <__aeabi_dsub+0x350>
 8003172:	e6e7      	b.n	8002f44 <__aeabi_dsub+0x120>
 8003174:	002b      	movs	r3, r5
 8003176:	08f8      	lsrs	r0, r7, #3
 8003178:	4a03      	ldr	r2, [pc, #12]	@ (8003188 <__aeabi_dsub+0x364>)
 800317a:	0767      	lsls	r7, r4, #29
 800317c:	4307      	orrs	r7, r0
 800317e:	08e5      	lsrs	r5, r4, #3
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x362>
 8003184:	e74a      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003186:	e0a5      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003188:	000007ff 	.word	0x000007ff
 800318c:	ff7fffff 	.word	0xff7fffff
 8003190:	fffff801 	.word	0xfffff801
 8003194:	000007fe 	.word	0x000007fe
 8003198:	0038      	movs	r0, r7
 800319a:	f7fd f9d3 	bl	8000544 <__clzsi2>
 800319e:	0003      	movs	r3, r0
 80031a0:	3318      	adds	r3, #24
 80031a2:	2b1f      	cmp	r3, #31
 80031a4:	dc00      	bgt.n	80031a8 <__aeabi_dsub+0x384>
 80031a6:	e6a7      	b.n	8002ef8 <__aeabi_dsub+0xd4>
 80031a8:	003a      	movs	r2, r7
 80031aa:	3808      	subs	r0, #8
 80031ac:	4082      	lsls	r2, r0
 80031ae:	429d      	cmp	r5, r3
 80031b0:	dd00      	ble.n	80031b4 <__aeabi_dsub+0x390>
 80031b2:	e08a      	b.n	80032ca <__aeabi_dsub+0x4a6>
 80031b4:	1b5b      	subs	r3, r3, r5
 80031b6:	1c58      	adds	r0, r3, #1
 80031b8:	281f      	cmp	r0, #31
 80031ba:	dc00      	bgt.n	80031be <__aeabi_dsub+0x39a>
 80031bc:	e1d8      	b.n	8003570 <__aeabi_dsub+0x74c>
 80031be:	0017      	movs	r7, r2
 80031c0:	3b1f      	subs	r3, #31
 80031c2:	40df      	lsrs	r7, r3
 80031c4:	2820      	cmp	r0, #32
 80031c6:	d005      	beq.n	80031d4 <__aeabi_dsub+0x3b0>
 80031c8:	2340      	movs	r3, #64	@ 0x40
 80031ca:	1a1b      	subs	r3, r3, r0
 80031cc:	409a      	lsls	r2, r3
 80031ce:	1e53      	subs	r3, r2, #1
 80031d0:	419a      	sbcs	r2, r3
 80031d2:	4317      	orrs	r7, r2
 80031d4:	2500      	movs	r5, #0
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d100      	bne.n	80031dc <__aeabi_dsub+0x3b8>
 80031da:	e0e5      	b.n	80033a8 <__aeabi_dsub+0x584>
 80031dc:	077b      	lsls	r3, r7, #29
 80031de:	d000      	beq.n	80031e2 <__aeabi_dsub+0x3be>
 80031e0:	e6ab      	b.n	8002f3a <__aeabi_dsub+0x116>
 80031e2:	002c      	movs	r4, r5
 80031e4:	e7c6      	b.n	8003174 <__aeabi_dsub+0x350>
 80031e6:	08c0      	lsrs	r0, r0, #3
 80031e8:	e7c6      	b.n	8003178 <__aeabi_dsub+0x354>
 80031ea:	2700      	movs	r7, #0
 80031ec:	2400      	movs	r4, #0
 80031ee:	4dd1      	ldr	r5, [pc, #836]	@ (8003534 <__aeabi_dsub+0x710>)
 80031f0:	e7ac      	b.n	800314c <__aeabi_dsub+0x328>
 80031f2:	4fd1      	ldr	r7, [pc, #836]	@ (8003538 <__aeabi_dsub+0x714>)
 80031f4:	1c6b      	adds	r3, r5, #1
 80031f6:	423b      	tst	r3, r7
 80031f8:	d171      	bne.n	80032de <__aeabi_dsub+0x4ba>
 80031fa:	0023      	movs	r3, r4
 80031fc:	4303      	orrs	r3, r0
 80031fe:	2d00      	cmp	r5, #0
 8003200:	d000      	beq.n	8003204 <__aeabi_dsub+0x3e0>
 8003202:	e14e      	b.n	80034a2 <__aeabi_dsub+0x67e>
 8003204:	4657      	mov	r7, sl
 8003206:	2b00      	cmp	r3, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x3e8>
 800320a:	e1b5      	b.n	8003578 <__aeabi_dsub+0x754>
 800320c:	2f00      	cmp	r7, #0
 800320e:	d00d      	beq.n	800322c <__aeabi_dsub+0x408>
 8003210:	1883      	adds	r3, r0, r2
 8003212:	4283      	cmp	r3, r0
 8003214:	4180      	sbcs	r0, r0
 8003216:	445c      	add	r4, fp
 8003218:	4240      	negs	r0, r0
 800321a:	1824      	adds	r4, r4, r0
 800321c:	0222      	lsls	r2, r4, #8
 800321e:	d500      	bpl.n	8003222 <__aeabi_dsub+0x3fe>
 8003220:	e1c8      	b.n	80035b4 <__aeabi_dsub+0x790>
 8003222:	001f      	movs	r7, r3
 8003224:	4698      	mov	r8, r3
 8003226:	4327      	orrs	r7, r4
 8003228:	d100      	bne.n	800322c <__aeabi_dsub+0x408>
 800322a:	e0bc      	b.n	80033a6 <__aeabi_dsub+0x582>
 800322c:	4643      	mov	r3, r8
 800322e:	0767      	lsls	r7, r4, #29
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	431f      	orrs	r7, r3
 8003234:	08e5      	lsrs	r5, r4, #3
 8003236:	2300      	movs	r3, #0
 8003238:	e04c      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 800323a:	1a83      	subs	r3, r0, r2
 800323c:	4698      	mov	r8, r3
 800323e:	465b      	mov	r3, fp
 8003240:	4540      	cmp	r0, r8
 8003242:	41bf      	sbcs	r7, r7
 8003244:	1ae3      	subs	r3, r4, r3
 8003246:	427f      	negs	r7, r7
 8003248:	1bdb      	subs	r3, r3, r7
 800324a:	021f      	lsls	r7, r3, #8
 800324c:	d47c      	bmi.n	8003348 <__aeabi_dsub+0x524>
 800324e:	4647      	mov	r7, r8
 8003250:	431f      	orrs	r7, r3
 8003252:	d100      	bne.n	8003256 <__aeabi_dsub+0x432>
 8003254:	e0a6      	b.n	80033a4 <__aeabi_dsub+0x580>
 8003256:	001c      	movs	r4, r3
 8003258:	4647      	mov	r7, r8
 800325a:	e645      	b.n	8002ee8 <__aeabi_dsub+0xc4>
 800325c:	4cb7      	ldr	r4, [pc, #732]	@ (800353c <__aeabi_dsub+0x718>)
 800325e:	1aed      	subs	r5, r5, r3
 8003260:	4014      	ands	r4, r2
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d000      	beq.n	8003268 <__aeabi_dsub+0x444>
 8003266:	e780      	b.n	800316a <__aeabi_dsub+0x346>
 8003268:	e784      	b.n	8003174 <__aeabi_dsub+0x350>
 800326a:	464b      	mov	r3, r9
 800326c:	0025      	movs	r5, r4
 800326e:	4305      	orrs	r5, r0
 8003270:	d066      	beq.n	8003340 <__aeabi_dsub+0x51c>
 8003272:	1e5f      	subs	r7, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d100      	bne.n	800327a <__aeabi_dsub+0x456>
 8003278:	e0fc      	b.n	8003474 <__aeabi_dsub+0x650>
 800327a:	4dae      	ldr	r5, [pc, #696]	@ (8003534 <__aeabi_dsub+0x710>)
 800327c:	42ab      	cmp	r3, r5
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x45e>
 8003280:	e15e      	b.n	8003540 <__aeabi_dsub+0x71c>
 8003282:	4666      	mov	r6, ip
 8003284:	2f38      	cmp	r7, #56	@ 0x38
 8003286:	dc00      	bgt.n	800328a <__aeabi_dsub+0x466>
 8003288:	e0b4      	b.n	80033f4 <__aeabi_dsub+0x5d0>
 800328a:	2001      	movs	r0, #1
 800328c:	1a17      	subs	r7, r2, r0
 800328e:	42ba      	cmp	r2, r7
 8003290:	4192      	sbcs	r2, r2
 8003292:	465b      	mov	r3, fp
 8003294:	4252      	negs	r2, r2
 8003296:	464d      	mov	r5, r9
 8003298:	1a9c      	subs	r4, r3, r2
 800329a:	e620      	b.n	8002ede <__aeabi_dsub+0xba>
 800329c:	0767      	lsls	r7, r4, #29
 800329e:	08c0      	lsrs	r0, r0, #3
 80032a0:	4307      	orrs	r7, r0
 80032a2:	08e5      	lsrs	r5, r4, #3
 80032a4:	e6ba      	b.n	800301c <__aeabi_dsub+0x1f8>
 80032a6:	001f      	movs	r7, r3
 80032a8:	4659      	mov	r1, fp
 80032aa:	3f20      	subs	r7, #32
 80032ac:	40f9      	lsrs	r1, r7
 80032ae:	000f      	movs	r7, r1
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d005      	beq.n	80032c0 <__aeabi_dsub+0x49c>
 80032b4:	2140      	movs	r1, #64	@ 0x40
 80032b6:	1acb      	subs	r3, r1, r3
 80032b8:	4659      	mov	r1, fp
 80032ba:	4099      	lsls	r1, r3
 80032bc:	430a      	orrs	r2, r1
 80032be:	4692      	mov	sl, r2
 80032c0:	4653      	mov	r3, sl
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	4193      	sbcs	r3, r2
 80032c6:	431f      	orrs	r7, r3
 80032c8:	e604      	b.n	8002ed4 <__aeabi_dsub+0xb0>
 80032ca:	1aeb      	subs	r3, r5, r3
 80032cc:	4d9b      	ldr	r5, [pc, #620]	@ (800353c <__aeabi_dsub+0x718>)
 80032ce:	4015      	ands	r5, r2
 80032d0:	076f      	lsls	r7, r5, #29
 80032d2:	08ed      	lsrs	r5, r5, #3
 80032d4:	032c      	lsls	r4, r5, #12
 80032d6:	055d      	lsls	r5, r3, #21
 80032d8:	0b24      	lsrs	r4, r4, #12
 80032da:	0d6d      	lsrs	r5, r5, #21
 80032dc:	e736      	b.n	800314c <__aeabi_dsub+0x328>
 80032de:	4d95      	ldr	r5, [pc, #596]	@ (8003534 <__aeabi_dsub+0x710>)
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x4c2>
 80032e4:	e0d6      	b.n	8003494 <__aeabi_dsub+0x670>
 80032e6:	1882      	adds	r2, r0, r2
 80032e8:	0021      	movs	r1, r4
 80032ea:	4282      	cmp	r2, r0
 80032ec:	4180      	sbcs	r0, r0
 80032ee:	4459      	add	r1, fp
 80032f0:	4240      	negs	r0, r0
 80032f2:	1808      	adds	r0, r1, r0
 80032f4:	07c7      	lsls	r7, r0, #31
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	4317      	orrs	r7, r2
 80032fa:	0844      	lsrs	r4, r0, #1
 80032fc:	0752      	lsls	r2, r2, #29
 80032fe:	d400      	bmi.n	8003302 <__aeabi_dsub+0x4de>
 8003300:	e185      	b.n	800360e <__aeabi_dsub+0x7ea>
 8003302:	220f      	movs	r2, #15
 8003304:	001d      	movs	r5, r3
 8003306:	403a      	ands	r2, r7
 8003308:	2a04      	cmp	r2, #4
 800330a:	d000      	beq.n	800330e <__aeabi_dsub+0x4ea>
 800330c:	e61a      	b.n	8002f44 <__aeabi_dsub+0x120>
 800330e:	08ff      	lsrs	r7, r7, #3
 8003310:	0764      	lsls	r4, r4, #29
 8003312:	4327      	orrs	r7, r4
 8003314:	0905      	lsrs	r5, r0, #4
 8003316:	e7dd      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003318:	465b      	mov	r3, fp
 800331a:	08d2      	lsrs	r2, r2, #3
 800331c:	075f      	lsls	r7, r3, #29
 800331e:	4317      	orrs	r7, r2
 8003320:	08dd      	lsrs	r5, r3, #3
 8003322:	e67b      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003324:	2700      	movs	r7, #0
 8003326:	2400      	movs	r4, #0
 8003328:	e710      	b.n	800314c <__aeabi_dsub+0x328>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d000      	beq.n	8003330 <__aeabi_dsub+0x50c>
 800332e:	e0d6      	b.n	80034de <__aeabi_dsub+0x6ba>
 8003330:	2900      	cmp	r1, #0
 8003332:	d000      	beq.n	8003336 <__aeabi_dsub+0x512>
 8003334:	e12f      	b.n	8003596 <__aeabi_dsub+0x772>
 8003336:	2480      	movs	r4, #128	@ 0x80
 8003338:	2600      	movs	r6, #0
 800333a:	4d7e      	ldr	r5, [pc, #504]	@ (8003534 <__aeabi_dsub+0x710>)
 800333c:	0324      	lsls	r4, r4, #12
 800333e:	e705      	b.n	800314c <__aeabi_dsub+0x328>
 8003340:	4666      	mov	r6, ip
 8003342:	465c      	mov	r4, fp
 8003344:	08d0      	lsrs	r0, r2, #3
 8003346:	e717      	b.n	8003178 <__aeabi_dsub+0x354>
 8003348:	465b      	mov	r3, fp
 800334a:	1a17      	subs	r7, r2, r0
 800334c:	42ba      	cmp	r2, r7
 800334e:	4192      	sbcs	r2, r2
 8003350:	1b1c      	subs	r4, r3, r4
 8003352:	2601      	movs	r6, #1
 8003354:	4663      	mov	r3, ip
 8003356:	4252      	negs	r2, r2
 8003358:	1aa4      	subs	r4, r4, r2
 800335a:	401e      	ands	r6, r3
 800335c:	e5c4      	b.n	8002ee8 <__aeabi_dsub+0xc4>
 800335e:	1883      	adds	r3, r0, r2
 8003360:	4283      	cmp	r3, r0
 8003362:	4180      	sbcs	r0, r0
 8003364:	445c      	add	r4, fp
 8003366:	4240      	negs	r0, r0
 8003368:	1825      	adds	r5, r4, r0
 800336a:	022a      	lsls	r2, r5, #8
 800336c:	d400      	bmi.n	8003370 <__aeabi_dsub+0x54c>
 800336e:	e0da      	b.n	8003526 <__aeabi_dsub+0x702>
 8003370:	4a72      	ldr	r2, [pc, #456]	@ (800353c <__aeabi_dsub+0x718>)
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	4015      	ands	r5, r2
 8003376:	07ea      	lsls	r2, r5, #31
 8003378:	431a      	orrs	r2, r3
 800337a:	0869      	lsrs	r1, r5, #1
 800337c:	075b      	lsls	r3, r3, #29
 800337e:	d400      	bmi.n	8003382 <__aeabi_dsub+0x55e>
 8003380:	e14a      	b.n	8003618 <__aeabi_dsub+0x7f4>
 8003382:	230f      	movs	r3, #15
 8003384:	4013      	ands	r3, r2
 8003386:	2b04      	cmp	r3, #4
 8003388:	d100      	bne.n	800338c <__aeabi_dsub+0x568>
 800338a:	e0fc      	b.n	8003586 <__aeabi_dsub+0x762>
 800338c:	1d17      	adds	r7, r2, #4
 800338e:	4297      	cmp	r7, r2
 8003390:	41a4      	sbcs	r4, r4
 8003392:	4264      	negs	r4, r4
 8003394:	2502      	movs	r5, #2
 8003396:	1864      	adds	r4, r4, r1
 8003398:	e6ec      	b.n	8003174 <__aeabi_dsub+0x350>
 800339a:	4647      	mov	r7, r8
 800339c:	001c      	movs	r4, r3
 800339e:	431f      	orrs	r7, r3
 80033a0:	d000      	beq.n	80033a4 <__aeabi_dsub+0x580>
 80033a2:	e743      	b.n	800322c <__aeabi_dsub+0x408>
 80033a4:	2600      	movs	r6, #0
 80033a6:	2500      	movs	r5, #0
 80033a8:	2400      	movs	r4, #0
 80033aa:	e6cf      	b.n	800314c <__aeabi_dsub+0x328>
 80033ac:	08c0      	lsrs	r0, r0, #3
 80033ae:	0767      	lsls	r7, r4, #29
 80033b0:	4307      	orrs	r7, r0
 80033b2:	08e5      	lsrs	r5, r4, #3
 80033b4:	e632      	b.n	800301c <__aeabi_dsub+0x1f8>
 80033b6:	1a87      	subs	r7, r0, r2
 80033b8:	465b      	mov	r3, fp
 80033ba:	42b8      	cmp	r0, r7
 80033bc:	4180      	sbcs	r0, r0
 80033be:	1ae4      	subs	r4, r4, r3
 80033c0:	4240      	negs	r0, r0
 80033c2:	1a24      	subs	r4, r4, r0
 80033c4:	0223      	lsls	r3, r4, #8
 80033c6:	d428      	bmi.n	800341a <__aeabi_dsub+0x5f6>
 80033c8:	0763      	lsls	r3, r4, #29
 80033ca:	08ff      	lsrs	r7, r7, #3
 80033cc:	431f      	orrs	r7, r3
 80033ce:	08e5      	lsrs	r5, r4, #3
 80033d0:	2301      	movs	r3, #1
 80033d2:	e77f      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <__aeabi_dsub+0x5b6>
 80033d8:	e673      	b.n	80030c2 <__aeabi_dsub+0x29e>
 80033da:	464b      	mov	r3, r9
 80033dc:	1b5f      	subs	r7, r3, r5
 80033de:	003b      	movs	r3, r7
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	d100      	bne.n	80033e6 <__aeabi_dsub+0x5c2>
 80033e4:	e742      	b.n	800326c <__aeabi_dsub+0x448>
 80033e6:	2f38      	cmp	r7, #56	@ 0x38
 80033e8:	dd00      	ble.n	80033ec <__aeabi_dsub+0x5c8>
 80033ea:	e0ec      	b.n	80035c6 <__aeabi_dsub+0x7a2>
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	000e      	movs	r6, r1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431c      	orrs	r4, r3
 80033f4:	2f1f      	cmp	r7, #31
 80033f6:	dc25      	bgt.n	8003444 <__aeabi_dsub+0x620>
 80033f8:	2520      	movs	r5, #32
 80033fa:	0023      	movs	r3, r4
 80033fc:	1bed      	subs	r5, r5, r7
 80033fe:	0001      	movs	r1, r0
 8003400:	40a8      	lsls	r0, r5
 8003402:	40ab      	lsls	r3, r5
 8003404:	40f9      	lsrs	r1, r7
 8003406:	1e45      	subs	r5, r0, #1
 8003408:	41a8      	sbcs	r0, r5
 800340a:	430b      	orrs	r3, r1
 800340c:	40fc      	lsrs	r4, r7
 800340e:	4318      	orrs	r0, r3
 8003410:	465b      	mov	r3, fp
 8003412:	1b1b      	subs	r3, r3, r4
 8003414:	469b      	mov	fp, r3
 8003416:	e739      	b.n	800328c <__aeabi_dsub+0x468>
 8003418:	4666      	mov	r6, ip
 800341a:	2501      	movs	r5, #1
 800341c:	e562      	b.n	8002ee4 <__aeabi_dsub+0xc0>
 800341e:	001f      	movs	r7, r3
 8003420:	4659      	mov	r1, fp
 8003422:	3f20      	subs	r7, #32
 8003424:	40f9      	lsrs	r1, r7
 8003426:	468c      	mov	ip, r1
 8003428:	2b20      	cmp	r3, #32
 800342a:	d005      	beq.n	8003438 <__aeabi_dsub+0x614>
 800342c:	2740      	movs	r7, #64	@ 0x40
 800342e:	4659      	mov	r1, fp
 8003430:	1afb      	subs	r3, r7, r3
 8003432:	4099      	lsls	r1, r3
 8003434:	430a      	orrs	r2, r1
 8003436:	4692      	mov	sl, r2
 8003438:	4657      	mov	r7, sl
 800343a:	1e7b      	subs	r3, r7, #1
 800343c:	419f      	sbcs	r7, r3
 800343e:	4663      	mov	r3, ip
 8003440:	431f      	orrs	r7, r3
 8003442:	e5c1      	b.n	8002fc8 <__aeabi_dsub+0x1a4>
 8003444:	003b      	movs	r3, r7
 8003446:	0025      	movs	r5, r4
 8003448:	3b20      	subs	r3, #32
 800344a:	40dd      	lsrs	r5, r3
 800344c:	2f20      	cmp	r7, #32
 800344e:	d004      	beq.n	800345a <__aeabi_dsub+0x636>
 8003450:	2340      	movs	r3, #64	@ 0x40
 8003452:	1bdb      	subs	r3, r3, r7
 8003454:	409c      	lsls	r4, r3
 8003456:	4320      	orrs	r0, r4
 8003458:	4680      	mov	r8, r0
 800345a:	4640      	mov	r0, r8
 800345c:	1e43      	subs	r3, r0, #1
 800345e:	4198      	sbcs	r0, r3
 8003460:	4328      	orrs	r0, r5
 8003462:	e713      	b.n	800328c <__aeabi_dsub+0x468>
 8003464:	2900      	cmp	r1, #0
 8003466:	d09d      	beq.n	80033a4 <__aeabi_dsub+0x580>
 8003468:	2601      	movs	r6, #1
 800346a:	4663      	mov	r3, ip
 800346c:	465c      	mov	r4, fp
 800346e:	4690      	mov	r8, r2
 8003470:	401e      	ands	r6, r3
 8003472:	e6db      	b.n	800322c <__aeabi_dsub+0x408>
 8003474:	1a17      	subs	r7, r2, r0
 8003476:	465b      	mov	r3, fp
 8003478:	42ba      	cmp	r2, r7
 800347a:	4192      	sbcs	r2, r2
 800347c:	1b1c      	subs	r4, r3, r4
 800347e:	4252      	negs	r2, r2
 8003480:	1aa4      	subs	r4, r4, r2
 8003482:	0223      	lsls	r3, r4, #8
 8003484:	d4c8      	bmi.n	8003418 <__aeabi_dsub+0x5f4>
 8003486:	0763      	lsls	r3, r4, #29
 8003488:	08ff      	lsrs	r7, r7, #3
 800348a:	431f      	orrs	r7, r3
 800348c:	4666      	mov	r6, ip
 800348e:	2301      	movs	r3, #1
 8003490:	08e5      	lsrs	r5, r4, #3
 8003492:	e71f      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003494:	001d      	movs	r5, r3
 8003496:	2400      	movs	r4, #0
 8003498:	2700      	movs	r7, #0
 800349a:	e657      	b.n	800314c <__aeabi_dsub+0x328>
 800349c:	465c      	mov	r4, fp
 800349e:	08d0      	lsrs	r0, r2, #3
 80034a0:	e66a      	b.n	8003178 <__aeabi_dsub+0x354>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <__aeabi_dsub+0x684>
 80034a6:	e737      	b.n	8003318 <__aeabi_dsub+0x4f4>
 80034a8:	4653      	mov	r3, sl
 80034aa:	08c0      	lsrs	r0, r0, #3
 80034ac:	0767      	lsls	r7, r4, #29
 80034ae:	4307      	orrs	r7, r0
 80034b0:	08e5      	lsrs	r5, r4, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d100      	bne.n	80034b8 <__aeabi_dsub+0x694>
 80034b6:	e5b1      	b.n	800301c <__aeabi_dsub+0x1f8>
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	031b      	lsls	r3, r3, #12
 80034bc:	421d      	tst	r5, r3
 80034be:	d008      	beq.n	80034d2 <__aeabi_dsub+0x6ae>
 80034c0:	4659      	mov	r1, fp
 80034c2:	08c8      	lsrs	r0, r1, #3
 80034c4:	4218      	tst	r0, r3
 80034c6:	d104      	bne.n	80034d2 <__aeabi_dsub+0x6ae>
 80034c8:	08d2      	lsrs	r2, r2, #3
 80034ca:	0749      	lsls	r1, r1, #29
 80034cc:	430a      	orrs	r2, r1
 80034ce:	0017      	movs	r7, r2
 80034d0:	0005      	movs	r5, r0
 80034d2:	0f7b      	lsrs	r3, r7, #29
 80034d4:	00ff      	lsls	r7, r7, #3
 80034d6:	08ff      	lsrs	r7, r7, #3
 80034d8:	075b      	lsls	r3, r3, #29
 80034da:	431f      	orrs	r7, r3
 80034dc:	e59e      	b.n	800301c <__aeabi_dsub+0x1f8>
 80034de:	08c0      	lsrs	r0, r0, #3
 80034e0:	0763      	lsls	r3, r4, #29
 80034e2:	4318      	orrs	r0, r3
 80034e4:	08e5      	lsrs	r5, r4, #3
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d053      	beq.n	8003592 <__aeabi_dsub+0x76e>
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	421d      	tst	r5, r3
 80034f0:	d00a      	beq.n	8003508 <__aeabi_dsub+0x6e4>
 80034f2:	4659      	mov	r1, fp
 80034f4:	08cc      	lsrs	r4, r1, #3
 80034f6:	421c      	tst	r4, r3
 80034f8:	d106      	bne.n	8003508 <__aeabi_dsub+0x6e4>
 80034fa:	2601      	movs	r6, #1
 80034fc:	4663      	mov	r3, ip
 80034fe:	0025      	movs	r5, r4
 8003500:	08d0      	lsrs	r0, r2, #3
 8003502:	0749      	lsls	r1, r1, #29
 8003504:	4308      	orrs	r0, r1
 8003506:	401e      	ands	r6, r3
 8003508:	0f47      	lsrs	r7, r0, #29
 800350a:	00c0      	lsls	r0, r0, #3
 800350c:	08c0      	lsrs	r0, r0, #3
 800350e:	077f      	lsls	r7, r7, #29
 8003510:	4307      	orrs	r7, r0
 8003512:	e583      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003514:	1883      	adds	r3, r0, r2
 8003516:	4293      	cmp	r3, r2
 8003518:	4192      	sbcs	r2, r2
 800351a:	445c      	add	r4, fp
 800351c:	4252      	negs	r2, r2
 800351e:	18a5      	adds	r5, r4, r2
 8003520:	022a      	lsls	r2, r5, #8
 8003522:	d500      	bpl.n	8003526 <__aeabi_dsub+0x702>
 8003524:	e724      	b.n	8003370 <__aeabi_dsub+0x54c>
 8003526:	076f      	lsls	r7, r5, #29
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	431f      	orrs	r7, r3
 800352c:	08ed      	lsrs	r5, r5, #3
 800352e:	2301      	movs	r3, #1
 8003530:	e6d0      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	000007ff 	.word	0x000007ff
 8003538:	000007fe 	.word	0x000007fe
 800353c:	ff7fffff 	.word	0xff7fffff
 8003540:	465b      	mov	r3, fp
 8003542:	08d2      	lsrs	r2, r2, #3
 8003544:	075f      	lsls	r7, r3, #29
 8003546:	4666      	mov	r6, ip
 8003548:	4317      	orrs	r7, r2
 800354a:	08dd      	lsrs	r5, r3, #3
 800354c:	e566      	b.n	800301c <__aeabi_dsub+0x1f8>
 800354e:	0025      	movs	r5, r4
 8003550:	3b20      	subs	r3, #32
 8003552:	40dd      	lsrs	r5, r3
 8003554:	4663      	mov	r3, ip
 8003556:	2b20      	cmp	r3, #32
 8003558:	d005      	beq.n	8003566 <__aeabi_dsub+0x742>
 800355a:	2340      	movs	r3, #64	@ 0x40
 800355c:	4661      	mov	r1, ip
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	409c      	lsls	r4, r3
 8003562:	4320      	orrs	r0, r4
 8003564:	4680      	mov	r8, r0
 8003566:	4647      	mov	r7, r8
 8003568:	1e7b      	subs	r3, r7, #1
 800356a:	419f      	sbcs	r7, r3
 800356c:	432f      	orrs	r7, r5
 800356e:	e5a0      	b.n	80030b2 <__aeabi_dsub+0x28e>
 8003570:	2120      	movs	r1, #32
 8003572:	2700      	movs	r7, #0
 8003574:	1a09      	subs	r1, r1, r0
 8003576:	e4d2      	b.n	8002f1e <__aeabi_dsub+0xfa>
 8003578:	2f00      	cmp	r7, #0
 800357a:	d100      	bne.n	800357e <__aeabi_dsub+0x75a>
 800357c:	e713      	b.n	80033a6 <__aeabi_dsub+0x582>
 800357e:	465c      	mov	r4, fp
 8003580:	0017      	movs	r7, r2
 8003582:	2500      	movs	r5, #0
 8003584:	e5f6      	b.n	8003174 <__aeabi_dsub+0x350>
 8003586:	08d7      	lsrs	r7, r2, #3
 8003588:	0749      	lsls	r1, r1, #29
 800358a:	2302      	movs	r3, #2
 800358c:	430f      	orrs	r7, r1
 800358e:	092d      	lsrs	r5, r5, #4
 8003590:	e6a0      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003592:	0007      	movs	r7, r0
 8003594:	e542      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003596:	465b      	mov	r3, fp
 8003598:	2601      	movs	r6, #1
 800359a:	075f      	lsls	r7, r3, #29
 800359c:	08dd      	lsrs	r5, r3, #3
 800359e:	4663      	mov	r3, ip
 80035a0:	08d2      	lsrs	r2, r2, #3
 80035a2:	4317      	orrs	r7, r2
 80035a4:	401e      	ands	r6, r3
 80035a6:	e539      	b.n	800301c <__aeabi_dsub+0x1f8>
 80035a8:	465b      	mov	r3, fp
 80035aa:	08d2      	lsrs	r2, r2, #3
 80035ac:	075f      	lsls	r7, r3, #29
 80035ae:	4317      	orrs	r7, r2
 80035b0:	08dd      	lsrs	r5, r3, #3
 80035b2:	e533      	b.n	800301c <__aeabi_dsub+0x1f8>
 80035b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <__aeabi_dsub+0x80c>)
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	4022      	ands	r2, r4
 80035ba:	0757      	lsls	r7, r2, #29
 80035bc:	0252      	lsls	r2, r2, #9
 80035be:	2501      	movs	r5, #1
 80035c0:	431f      	orrs	r7, r3
 80035c2:	0b14      	lsrs	r4, r2, #12
 80035c4:	e5c2      	b.n	800314c <__aeabi_dsub+0x328>
 80035c6:	000e      	movs	r6, r1
 80035c8:	2001      	movs	r0, #1
 80035ca:	e65f      	b.n	800328c <__aeabi_dsub+0x468>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <__aeabi_dsub+0x7c8>
 80035d0:	464b      	mov	r3, r9
 80035d2:	1b5b      	subs	r3, r3, r5
 80035d4:	469c      	mov	ip, r3
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	d100      	bne.n	80035dc <__aeabi_dsub+0x7b8>
 80035da:	e548      	b.n	800306e <__aeabi_dsub+0x24a>
 80035dc:	2701      	movs	r7, #1
 80035de:	2b38      	cmp	r3, #56	@ 0x38
 80035e0:	dd00      	ble.n	80035e4 <__aeabi_dsub+0x7c0>
 80035e2:	e566      	b.n	80030b2 <__aeabi_dsub+0x28e>
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431c      	orrs	r4, r3
 80035ea:	e550      	b.n	800308e <__aeabi_dsub+0x26a>
 80035ec:	1c6b      	adds	r3, r5, #1
 80035ee:	4d11      	ldr	r5, [pc, #68]	@ (8003634 <__aeabi_dsub+0x810>)
 80035f0:	422b      	tst	r3, r5
 80035f2:	d000      	beq.n	80035f6 <__aeabi_dsub+0x7d2>
 80035f4:	e673      	b.n	80032de <__aeabi_dsub+0x4ba>
 80035f6:	4659      	mov	r1, fp
 80035f8:	0023      	movs	r3, r4
 80035fa:	4311      	orrs	r1, r2
 80035fc:	468a      	mov	sl, r1
 80035fe:	4303      	orrs	r3, r0
 8003600:	e600      	b.n	8003204 <__aeabi_dsub+0x3e0>
 8003602:	0767      	lsls	r7, r4, #29
 8003604:	08c0      	lsrs	r0, r0, #3
 8003606:	2300      	movs	r3, #0
 8003608:	4307      	orrs	r7, r0
 800360a:	08e5      	lsrs	r5, r4, #3
 800360c:	e662      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 800360e:	0764      	lsls	r4, r4, #29
 8003610:	08ff      	lsrs	r7, r7, #3
 8003612:	4327      	orrs	r7, r4
 8003614:	0905      	lsrs	r5, r0, #4
 8003616:	e65d      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003618:	08d2      	lsrs	r2, r2, #3
 800361a:	0749      	lsls	r1, r1, #29
 800361c:	4311      	orrs	r1, r2
 800361e:	000f      	movs	r7, r1
 8003620:	2302      	movs	r3, #2
 8003622:	092d      	lsrs	r5, r5, #4
 8003624:	e656      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003626:	0007      	movs	r7, r0
 8003628:	e5a4      	b.n	8003174 <__aeabi_dsub+0x350>
 800362a:	0038      	movs	r0, r7
 800362c:	e48f      	b.n	8002f4e <__aeabi_dsub+0x12a>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	ff7fffff 	.word	0xff7fffff
 8003634:	000007fe 	.word	0x000007fe

08003638 <__aeabi_dcmpun>:
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	46c6      	mov	lr, r8
 800363c:	031e      	lsls	r6, r3, #12
 800363e:	0b36      	lsrs	r6, r6, #12
 8003640:	46b0      	mov	r8, r6
 8003642:	4e0d      	ldr	r6, [pc, #52]	@ (8003678 <__aeabi_dcmpun+0x40>)
 8003644:	030c      	lsls	r4, r1, #12
 8003646:	004d      	lsls	r5, r1, #1
 8003648:	005f      	lsls	r7, r3, #1
 800364a:	b500      	push	{lr}
 800364c:	0b24      	lsrs	r4, r4, #12
 800364e:	0d6d      	lsrs	r5, r5, #21
 8003650:	0d7f      	lsrs	r7, r7, #21
 8003652:	42b5      	cmp	r5, r6
 8003654:	d00b      	beq.n	800366e <__aeabi_dcmpun+0x36>
 8003656:	4908      	ldr	r1, [pc, #32]	@ (8003678 <__aeabi_dcmpun+0x40>)
 8003658:	2000      	movs	r0, #0
 800365a:	428f      	cmp	r7, r1
 800365c:	d104      	bne.n	8003668 <__aeabi_dcmpun+0x30>
 800365e:	4646      	mov	r6, r8
 8003660:	4316      	orrs	r6, r2
 8003662:	0030      	movs	r0, r6
 8003664:	1e43      	subs	r3, r0, #1
 8003666:	4198      	sbcs	r0, r3
 8003668:	bc80      	pop	{r7}
 800366a:	46b8      	mov	r8, r7
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366e:	4304      	orrs	r4, r0
 8003670:	2001      	movs	r0, #1
 8003672:	2c00      	cmp	r4, #0
 8003674:	d1f8      	bne.n	8003668 <__aeabi_dcmpun+0x30>
 8003676:	e7ee      	b.n	8003656 <__aeabi_dcmpun+0x1e>
 8003678:	000007ff 	.word	0x000007ff

0800367c <__aeabi_d2iz>:
 800367c:	000b      	movs	r3, r1
 800367e:	0002      	movs	r2, r0
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4d16      	ldr	r5, [pc, #88]	@ (80036dc <__aeabi_d2iz+0x60>)
 8003684:	030c      	lsls	r4, r1, #12
 8003686:	b082      	sub	sp, #8
 8003688:	0049      	lsls	r1, r1, #1
 800368a:	2000      	movs	r0, #0
 800368c:	9200      	str	r2, [sp, #0]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	0b24      	lsrs	r4, r4, #12
 8003692:	0d49      	lsrs	r1, r1, #21
 8003694:	0fde      	lsrs	r6, r3, #31
 8003696:	42a9      	cmp	r1, r5
 8003698:	dd04      	ble.n	80036a4 <__aeabi_d2iz+0x28>
 800369a:	4811      	ldr	r0, [pc, #68]	@ (80036e0 <__aeabi_d2iz+0x64>)
 800369c:	4281      	cmp	r1, r0
 800369e:	dd03      	ble.n	80036a8 <__aeabi_d2iz+0x2c>
 80036a0:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <__aeabi_d2iz+0x68>)
 80036a2:	18f0      	adds	r0, r6, r3
 80036a4:	b002      	add	sp, #8
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	2080      	movs	r0, #128	@ 0x80
 80036aa:	0340      	lsls	r0, r0, #13
 80036ac:	4320      	orrs	r0, r4
 80036ae:	4c0e      	ldr	r4, [pc, #56]	@ (80036e8 <__aeabi_d2iz+0x6c>)
 80036b0:	1a64      	subs	r4, r4, r1
 80036b2:	2c1f      	cmp	r4, #31
 80036b4:	dd08      	ble.n	80036c8 <__aeabi_d2iz+0x4c>
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <__aeabi_d2iz+0x70>)
 80036b8:	1a5b      	subs	r3, r3, r1
 80036ba:	40d8      	lsrs	r0, r3
 80036bc:	0003      	movs	r3, r0
 80036be:	4258      	negs	r0, r3
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	d1ef      	bne.n	80036a4 <__aeabi_d2iz+0x28>
 80036c4:	0018      	movs	r0, r3
 80036c6:	e7ed      	b.n	80036a4 <__aeabi_d2iz+0x28>
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <__aeabi_d2iz+0x74>)
 80036ca:	9a00      	ldr	r2, [sp, #0]
 80036cc:	469c      	mov	ip, r3
 80036ce:	0003      	movs	r3, r0
 80036d0:	4461      	add	r1, ip
 80036d2:	408b      	lsls	r3, r1
 80036d4:	40e2      	lsrs	r2, r4
 80036d6:	4313      	orrs	r3, r2
 80036d8:	e7f1      	b.n	80036be <__aeabi_d2iz+0x42>
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	000003fe 	.word	0x000003fe
 80036e0:	0000041d 	.word	0x0000041d
 80036e4:	7fffffff 	.word	0x7fffffff
 80036e8:	00000433 	.word	0x00000433
 80036ec:	00000413 	.word	0x00000413
 80036f0:	fffffbed 	.word	0xfffffbed

080036f4 <__aeabi_i2d>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d016      	beq.n	8003728 <__aeabi_i2d+0x34>
 80036fa:	17c3      	asrs	r3, r0, #31
 80036fc:	18c5      	adds	r5, r0, r3
 80036fe:	405d      	eors	r5, r3
 8003700:	0fc4      	lsrs	r4, r0, #31
 8003702:	0028      	movs	r0, r5
 8003704:	f7fc ff1e 	bl	8000544 <__clzsi2>
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <__aeabi_i2d+0x58>)
 800370a:	1a1b      	subs	r3, r3, r0
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	0d5b      	lsrs	r3, r3, #21
 8003710:	280a      	cmp	r0, #10
 8003712:	dc14      	bgt.n	800373e <__aeabi_i2d+0x4a>
 8003714:	0002      	movs	r2, r0
 8003716:	002e      	movs	r6, r5
 8003718:	3215      	adds	r2, #21
 800371a:	4096      	lsls	r6, r2
 800371c:	220b      	movs	r2, #11
 800371e:	1a12      	subs	r2, r2, r0
 8003720:	40d5      	lsrs	r5, r2
 8003722:	032d      	lsls	r5, r5, #12
 8003724:	0b2d      	lsrs	r5, r5, #12
 8003726:	e003      	b.n	8003730 <__aeabi_i2d+0x3c>
 8003728:	2400      	movs	r4, #0
 800372a:	2300      	movs	r3, #0
 800372c:	2500      	movs	r5, #0
 800372e:	2600      	movs	r6, #0
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	432b      	orrs	r3, r5
 8003734:	07e4      	lsls	r4, r4, #31
 8003736:	4323      	orrs	r3, r4
 8003738:	0030      	movs	r0, r6
 800373a:	0019      	movs	r1, r3
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	380b      	subs	r0, #11
 8003740:	4085      	lsls	r5, r0
 8003742:	032d      	lsls	r5, r5, #12
 8003744:	2600      	movs	r6, #0
 8003746:	0b2d      	lsrs	r5, r5, #12
 8003748:	e7f2      	b.n	8003730 <__aeabi_i2d+0x3c>
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	0000041e 	.word	0x0000041e

08003750 <__aeabi_ui2d>:
 8003750:	b510      	push	{r4, lr}
 8003752:	1e04      	subs	r4, r0, #0
 8003754:	d010      	beq.n	8003778 <__aeabi_ui2d+0x28>
 8003756:	f7fc fef5 	bl	8000544 <__clzsi2>
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <__aeabi_ui2d+0x44>)
 800375c:	1a1b      	subs	r3, r3, r0
 800375e:	055b      	lsls	r3, r3, #21
 8003760:	0d5b      	lsrs	r3, r3, #21
 8003762:	280a      	cmp	r0, #10
 8003764:	dc0f      	bgt.n	8003786 <__aeabi_ui2d+0x36>
 8003766:	220b      	movs	r2, #11
 8003768:	0021      	movs	r1, r4
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	40d1      	lsrs	r1, r2
 800376e:	3015      	adds	r0, #21
 8003770:	030a      	lsls	r2, r1, #12
 8003772:	4084      	lsls	r4, r0
 8003774:	0b12      	lsrs	r2, r2, #12
 8003776:	e001      	b.n	800377c <__aeabi_ui2d+0x2c>
 8003778:	2300      	movs	r3, #0
 800377a:	2200      	movs	r2, #0
 800377c:	051b      	lsls	r3, r3, #20
 800377e:	4313      	orrs	r3, r2
 8003780:	0020      	movs	r0, r4
 8003782:	0019      	movs	r1, r3
 8003784:	bd10      	pop	{r4, pc}
 8003786:	0022      	movs	r2, r4
 8003788:	380b      	subs	r0, #11
 800378a:	4082      	lsls	r2, r0
 800378c:	0312      	lsls	r2, r2, #12
 800378e:	2400      	movs	r4, #0
 8003790:	0b12      	lsrs	r2, r2, #12
 8003792:	e7f3      	b.n	800377c <__aeabi_ui2d+0x2c>
 8003794:	0000041e 	.word	0x0000041e

08003798 <__aeabi_f2d>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	0242      	lsls	r2, r0, #9
 800379c:	0043      	lsls	r3, r0, #1
 800379e:	0fc4      	lsrs	r4, r0, #31
 80037a0:	20fe      	movs	r0, #254	@ 0xfe
 80037a2:	0e1b      	lsrs	r3, r3, #24
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	0a55      	lsrs	r5, r2, #9
 80037a8:	4208      	tst	r0, r1
 80037aa:	d00c      	beq.n	80037c6 <__aeabi_f2d+0x2e>
 80037ac:	21e0      	movs	r1, #224	@ 0xe0
 80037ae:	0089      	lsls	r1, r1, #2
 80037b0:	468c      	mov	ip, r1
 80037b2:	076d      	lsls	r5, r5, #29
 80037b4:	0b12      	lsrs	r2, r2, #12
 80037b6:	4463      	add	r3, ip
 80037b8:	051b      	lsls	r3, r3, #20
 80037ba:	4313      	orrs	r3, r2
 80037bc:	07e4      	lsls	r4, r4, #31
 80037be:	4323      	orrs	r3, r4
 80037c0:	0028      	movs	r0, r5
 80037c2:	0019      	movs	r1, r3
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <__aeabi_f2d+0x5c>
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	d01b      	beq.n	8003806 <__aeabi_f2d+0x6e>
 80037ce:	0028      	movs	r0, r5
 80037d0:	f7fc feb8 	bl	8000544 <__clzsi2>
 80037d4:	280a      	cmp	r0, #10
 80037d6:	dc1c      	bgt.n	8003812 <__aeabi_f2d+0x7a>
 80037d8:	230b      	movs	r3, #11
 80037da:	002a      	movs	r2, r5
 80037dc:	1a1b      	subs	r3, r3, r0
 80037de:	40da      	lsrs	r2, r3
 80037e0:	0003      	movs	r3, r0
 80037e2:	3315      	adds	r3, #21
 80037e4:	409d      	lsls	r5, r3
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <__aeabi_f2d+0x88>)
 80037e8:	0312      	lsls	r2, r2, #12
 80037ea:	1a1b      	subs	r3, r3, r0
 80037ec:	055b      	lsls	r3, r3, #21
 80037ee:	0b12      	lsrs	r2, r2, #12
 80037f0:	0d5b      	lsrs	r3, r3, #21
 80037f2:	e7e1      	b.n	80037b8 <__aeabi_f2d+0x20>
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	d009      	beq.n	800380c <__aeabi_f2d+0x74>
 80037f8:	0b13      	lsrs	r3, r2, #12
 80037fa:	2280      	movs	r2, #128	@ 0x80
 80037fc:	0312      	lsls	r2, r2, #12
 80037fe:	431a      	orrs	r2, r3
 8003800:	076d      	lsls	r5, r5, #29
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <__aeabi_f2d+0x8c>)
 8003804:	e7d8      	b.n	80037b8 <__aeabi_f2d+0x20>
 8003806:	2300      	movs	r3, #0
 8003808:	2200      	movs	r2, #0
 800380a:	e7d5      	b.n	80037b8 <__aeabi_f2d+0x20>
 800380c:	2200      	movs	r2, #0
 800380e:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <__aeabi_f2d+0x8c>)
 8003810:	e7d2      	b.n	80037b8 <__aeabi_f2d+0x20>
 8003812:	0003      	movs	r3, r0
 8003814:	002a      	movs	r2, r5
 8003816:	3b0b      	subs	r3, #11
 8003818:	409a      	lsls	r2, r3
 800381a:	2500      	movs	r5, #0
 800381c:	e7e3      	b.n	80037e6 <__aeabi_f2d+0x4e>
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	00000389 	.word	0x00000389
 8003824:	000007ff 	.word	0x000007ff

08003828 <__aeabi_d2f>:
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382a:	004b      	lsls	r3, r1, #1
 800382c:	030f      	lsls	r7, r1, #12
 800382e:	0d5b      	lsrs	r3, r3, #21
 8003830:	4c3a      	ldr	r4, [pc, #232]	@ (800391c <__aeabi_d2f+0xf4>)
 8003832:	0f45      	lsrs	r5, r0, #29
 8003834:	b083      	sub	sp, #12
 8003836:	0a7f      	lsrs	r7, r7, #9
 8003838:	1c5e      	adds	r6, r3, #1
 800383a:	432f      	orrs	r7, r5
 800383c:	9000      	str	r0, [sp, #0]
 800383e:	9101      	str	r1, [sp, #4]
 8003840:	0fca      	lsrs	r2, r1, #31
 8003842:	00c5      	lsls	r5, r0, #3
 8003844:	4226      	tst	r6, r4
 8003846:	d00b      	beq.n	8003860 <__aeabi_d2f+0x38>
 8003848:	4935      	ldr	r1, [pc, #212]	@ (8003920 <__aeabi_d2f+0xf8>)
 800384a:	185c      	adds	r4, r3, r1
 800384c:	2cfe      	cmp	r4, #254	@ 0xfe
 800384e:	dd13      	ble.n	8003878 <__aeabi_d2f+0x50>
 8003850:	20ff      	movs	r0, #255	@ 0xff
 8003852:	2300      	movs	r3, #0
 8003854:	05c0      	lsls	r0, r0, #23
 8003856:	4318      	orrs	r0, r3
 8003858:	07d2      	lsls	r2, r2, #31
 800385a:	4310      	orrs	r0, r2
 800385c:	b003      	add	sp, #12
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003860:	433d      	orrs	r5, r7
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <__aeabi_d2f+0x42>
 8003866:	2000      	movs	r0, #0
 8003868:	e7f4      	b.n	8003854 <__aeabi_d2f+0x2c>
 800386a:	2d00      	cmp	r5, #0
 800386c:	d0f0      	beq.n	8003850 <__aeabi_d2f+0x28>
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	03db      	lsls	r3, r3, #15
 8003872:	20ff      	movs	r0, #255	@ 0xff
 8003874:	433b      	orrs	r3, r7
 8003876:	e7ed      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003878:	2c00      	cmp	r4, #0
 800387a:	dd0c      	ble.n	8003896 <__aeabi_d2f+0x6e>
 800387c:	9b00      	ldr	r3, [sp, #0]
 800387e:	00ff      	lsls	r7, r7, #3
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	4183      	sbcs	r3, r0
 8003886:	0f69      	lsrs	r1, r5, #29
 8003888:	433b      	orrs	r3, r7
 800388a:	430b      	orrs	r3, r1
 800388c:	0759      	lsls	r1, r3, #29
 800388e:	d127      	bne.n	80038e0 <__aeabi_d2f+0xb8>
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	b2e0      	uxtb	r0, r4
 8003894:	e7de      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003896:	0021      	movs	r1, r4
 8003898:	3117      	adds	r1, #23
 800389a:	db31      	blt.n	8003900 <__aeabi_d2f+0xd8>
 800389c:	2180      	movs	r1, #128	@ 0x80
 800389e:	201e      	movs	r0, #30
 80038a0:	0409      	lsls	r1, r1, #16
 80038a2:	4339      	orrs	r1, r7
 80038a4:	1b00      	subs	r0, r0, r4
 80038a6:	281f      	cmp	r0, #31
 80038a8:	dd2d      	ble.n	8003906 <__aeabi_d2f+0xde>
 80038aa:	2602      	movs	r6, #2
 80038ac:	4276      	negs	r6, r6
 80038ae:	1b34      	subs	r4, r6, r4
 80038b0:	000e      	movs	r6, r1
 80038b2:	40e6      	lsrs	r6, r4
 80038b4:	0034      	movs	r4, r6
 80038b6:	2820      	cmp	r0, #32
 80038b8:	d004      	beq.n	80038c4 <__aeabi_d2f+0x9c>
 80038ba:	481a      	ldr	r0, [pc, #104]	@ (8003924 <__aeabi_d2f+0xfc>)
 80038bc:	4684      	mov	ip, r0
 80038be:	4463      	add	r3, ip
 80038c0:	4099      	lsls	r1, r3
 80038c2:	430d      	orrs	r5, r1
 80038c4:	002b      	movs	r3, r5
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	418b      	sbcs	r3, r1
 80038ca:	4323      	orrs	r3, r4
 80038cc:	0759      	lsls	r1, r3, #29
 80038ce:	d003      	beq.n	80038d8 <__aeabi_d2f+0xb0>
 80038d0:	210f      	movs	r1, #15
 80038d2:	4019      	ands	r1, r3
 80038d4:	2904      	cmp	r1, #4
 80038d6:	d10b      	bne.n	80038f0 <__aeabi_d2f+0xc8>
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	2000      	movs	r0, #0
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	e7b9      	b.n	8003854 <__aeabi_d2f+0x2c>
 80038e0:	210f      	movs	r1, #15
 80038e2:	4019      	ands	r1, r3
 80038e4:	2904      	cmp	r1, #4
 80038e6:	d104      	bne.n	80038f2 <__aeabi_d2f+0xca>
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	b2e0      	uxtb	r0, r4
 80038ee:	e7b1      	b.n	8003854 <__aeabi_d2f+0x2c>
 80038f0:	2400      	movs	r4, #0
 80038f2:	3304      	adds	r3, #4
 80038f4:	0159      	lsls	r1, r3, #5
 80038f6:	d5f7      	bpl.n	80038e8 <__aeabi_d2f+0xc0>
 80038f8:	3401      	adds	r4, #1
 80038fa:	2300      	movs	r3, #0
 80038fc:	b2e0      	uxtb	r0, r4
 80038fe:	e7a9      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003900:	2000      	movs	r0, #0
 8003902:	2300      	movs	r3, #0
 8003904:	e7a6      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003906:	4c08      	ldr	r4, [pc, #32]	@ (8003928 <__aeabi_d2f+0x100>)
 8003908:	191c      	adds	r4, r3, r4
 800390a:	002b      	movs	r3, r5
 800390c:	40a5      	lsls	r5, r4
 800390e:	40c3      	lsrs	r3, r0
 8003910:	40a1      	lsls	r1, r4
 8003912:	1e68      	subs	r0, r5, #1
 8003914:	4185      	sbcs	r5, r0
 8003916:	4329      	orrs	r1, r5
 8003918:	430b      	orrs	r3, r1
 800391a:	e7d7      	b.n	80038cc <__aeabi_d2f+0xa4>
 800391c:	000007fe 	.word	0x000007fe
 8003920:	fffffc80 	.word	0xfffffc80
 8003924:	fffffca2 	.word	0xfffffca2
 8003928:	fffffc82 	.word	0xfffffc82

0800392c <__clzdi2>:
 800392c:	b510      	push	{r4, lr}
 800392e:	2900      	cmp	r1, #0
 8003930:	d103      	bne.n	800393a <__clzdi2+0xe>
 8003932:	f7fc fe07 	bl	8000544 <__clzsi2>
 8003936:	3020      	adds	r0, #32
 8003938:	e002      	b.n	8003940 <__clzdi2+0x14>
 800393a:	0008      	movs	r0, r1
 800393c:	f7fc fe02 	bl	8000544 <__clzsi2>
 8003940:	bd10      	pop	{r4, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)

08003944 <LCD_Display_Dose_Number>:
    ones      = number % 10;
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
}

void LCD_Display_Dose_Number(uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b095      	sub	sp, #84	@ 0x54
 8003948:	9001      	str	r0, [sp, #4]
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	000f      	movs	r7, r1
	uint32_t Dose_data_tho[4] = {0};
 800394e:	2210      	movs	r2, #16
 8003950:	2100      	movs	r1, #0
 8003952:	a804      	add	r0, sp, #16
	uint32_t Dose_data_hun[4] = {0};
 8003954:	ac08      	add	r4, sp, #32
{
 8003956:	9303      	str	r3, [sp, #12]
	uint32_t Dose_data_ten[4] = {0};
 8003958:	ad0c      	add	r5, sp, #48	@ 0x30
	uint32_t Dose_data_tho[4] = {0};
 800395a:	f016 fdcb 	bl	801a4f4 <memset>
	uint32_t Dose_data_hun[4] = {0};
 800395e:	2210      	movs	r2, #16
 8003960:	2100      	movs	r1, #0
 8003962:	0020      	movs	r0, r4
 8003964:	f016 fdc6 	bl	801a4f4 <memset>
	uint32_t Dose_data_one[4] = {0};
 8003968:	ae10      	add	r6, sp, #64	@ 0x40
	uint32_t Dose_data_ten[4] = {0};
 800396a:	2210      	movs	r2, #16
 800396c:	2100      	movs	r1, #0
 800396e:	0028      	movs	r0, r5
 8003970:	f016 fdc0 	bl	801a4f4 <memset>
	uint32_t Dose_data_one[4] = {0};
 8003974:	2210      	movs	r2, #16
 8003976:	2100      	movs	r1, #0
 8003978:	0030      	movs	r0, r6
 800397a:	f016 fdbb 	bl	801a4f4 <memset>

    switch (thousands)
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	1e58      	subs	r0, r3, #1
 8003982:	2808      	cmp	r0, #8
 8003984:	d850      	bhi.n	8003a28 <LCD_Display_Dose_Number+0xe4>
 8003986:	f7fc fbd1 	bl	800012c <__gnu_thumb1_case_uqi>
 800398a:	1305      	.short	0x1305
 800398c:	3029261e 	.word	0x3029261e
 8003990:	413a      	.short	0x413a
 8003992:	48          	.byte	0x48
 8003993:	00          	.byte	0x00
        	Dose_data_tho[3] = 0x0000000;
            break;

        case 1:
        	Dose_data_tho[0] = 0x0000000;
        	Dose_data_tho[1] = 0x1000000;
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[3] = 0x1000000;
            break;

        case 4:
        	Dose_data_tho[0] = 0x0000000;
        	Dose_data_tho[1] = 0x3000000;
 8003998:	9305      	str	r3, [sp, #20]
            break;

        case 7:
        	Dose_data_tho[0] = 0x1000000;
        	Dose_data_tho[1] = 0x3000000;
        	Dose_data_tho[2] = 0x1000000;
 800399a:	9306      	str	r3, [sp, #24]
        	Dose_data_tho[1] = 0x3000000;
        	Dose_data_tho[2] = 0x3000000;
        	Dose_data_tho[3] = 0x1000000;
            break;
    }
    switch (hundreds)
 800399c:	2f09      	cmp	r7, #9
 800399e:	d85c      	bhi.n	8003a5a <LCD_Display_Dose_Number+0x116>
 80039a0:	0038      	movs	r0, r7
 80039a2:	f7fc fbc3 	bl	800012c <__gnu_thumb1_case_uqi>
 80039a6:	564e      	.short	0x564e
 80039a8:	7a777065 	.word	0x7a777065
 80039ac:	99928b81 	.word	0x99928b81
        	Dose_data_tho[0] = 0x1000000;
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	045b      	lsls	r3, r3, #17
 80039b4:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x1000000;
 80039b6:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x2000000;
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	049b      	lsls	r3, r3, #18
 80039bc:	9306      	str	r3, [sp, #24]
        	Dose_data_tho[3] = 0x3000000;
 80039be:	23c0      	movs	r3, #192	@ 0xc0
 80039c0:	049b      	lsls	r3, r3, #18
        	Dose_data_tho[3] = 0x3000000;
 80039c2:	9307      	str	r3, [sp, #28]
            break;
 80039c4:	e7ea      	b.n	800399c <LCD_Display_Dose_Number+0x58>
        	Dose_data_tho[0] = 0x1000000;
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	045b      	lsls	r3, r3, #17
 80039ca:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x1000000;
 80039cc:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x3000000;
 80039ce:	22c0      	movs	r2, #192	@ 0xc0
 80039d0:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[2] = 0x3000000;
 80039d2:	9206      	str	r2, [sp, #24]
        	Dose_data_tho[3] = 0x1000000;
 80039d4:	e7f5      	b.n	80039c2 <LCD_Display_Dose_Number+0x7e>
        	Dose_data_tho[1] = 0x3000000;
 80039d6:	23c0      	movs	r3, #192	@ 0xc0
 80039d8:	049b      	lsls	r3, r3, #18
 80039da:	e7dd      	b.n	8003998 <LCD_Display_Dose_Number+0x54>
        	Dose_data_tho[0] = 0x1000000;
 80039dc:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x2000000;
 80039de:	2280      	movs	r2, #128	@ 0x80
        	Dose_data_tho[0] = 0x1000000;
 80039e0:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x2000000;
 80039e2:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 80039e4:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x2000000;
 80039e6:	9205      	str	r2, [sp, #20]
 80039e8:	e7f1      	b.n	80039ce <LCD_Display_Dose_Number+0x8a>
        	Dose_data_tho[0] = 0x1000000;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	045b      	lsls	r3, r3, #17
 80039ee:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x2000000;
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	049b      	lsls	r3, r3, #18
 80039f4:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x3000000;
 80039f6:	23c0      	movs	r3, #192	@ 0xc0
 80039f8:	049b      	lsls	r3, r3, #18
        	Dose_data_tho[2] = 0x3000000;
 80039fa:	9306      	str	r3, [sp, #24]
 80039fc:	e7e1      	b.n	80039c2 <LCD_Display_Dose_Number+0x7e>
        	Dose_data_tho[0] = 0x1000000;
 80039fe:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x3000000;
 8003a00:	22c0      	movs	r2, #192	@ 0xc0
        	Dose_data_tho[0] = 0x1000000;
 8003a02:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x3000000;
 8003a04:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 8003a06:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a08:	9205      	str	r2, [sp, #20]
 8003a0a:	e7c6      	b.n	800399a <LCD_Display_Dose_Number+0x56>
        	Dose_data_tho[0] = 0x1000000;
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	045b      	lsls	r3, r3, #17
 8003a10:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a12:	23c0      	movs	r3, #192	@ 0xc0
 8003a14:	049b      	lsls	r3, r3, #18
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	e7ef      	b.n	80039fa <LCD_Display_Dose_Number+0xb6>
        	Dose_data_tho[0] = 0x1000000;
 8003a1a:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x3000000;
 8003a1c:	22c0      	movs	r2, #192	@ 0xc0
        	Dose_data_tho[0] = 0x1000000;
 8003a1e:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x3000000;
 8003a20:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 8003a22:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a24:	9205      	str	r2, [sp, #20]
 8003a26:	e7d4      	b.n	80039d2 <LCD_Display_Dose_Number+0x8e>
    switch (hundreds)
 8003a28:	2f09      	cmp	r7, #9
 8003a2a:	d816      	bhi.n	8003a5a <LCD_Display_Dose_Number+0x116>
 8003a2c:	0038      	movs	r0, r7
 8003a2e:	f7fc fb7d 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a32:	1005      	.short	0x1005
 8003a34:	34312a1f 	.word	0x34312a1f
 8003a38:	534c453b 	.word	0x534c453b
    {
    	case 0:
    		if(thousands != 0)
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <LCD_Display_Dose_Number+0x116>
			{
    			Dose_data_hun[0] = 0x0004000;
 8003a42:	2280      	movs	r2, #128	@ 0x80
    			Dose_data_hun[1] = 0x000C000;
 8003a44:	23c0      	movs	r3, #192	@ 0xc0
    			Dose_data_hun[0] = 0x0004000;
 8003a46:	01d2      	lsls	r2, r2, #7
    			Dose_data_hun[1] = 0x000C000;
 8003a48:	021b      	lsls	r3, r3, #8
    			Dose_data_hun[0] = 0x0004000;
 8003a4a:	9208      	str	r2, [sp, #32]
    			Dose_data_hun[1] = 0x000C000;
 8003a4c:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Dose_data_hun[0] = 0x0004000;
			Dose_data_hun[1] = 0x000C000;
			Dose_data_hun[2] = 0x000C000;
 8003a4e:	60a2      	str	r2, [r4, #8]
 8003a50:	e017      	b.n	8003a82 <LCD_Display_Dose_Number+0x13e>
    		Dose_data_hun[1] = 0x0004000;
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003a56:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003a58:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x0004000;
			break;
    }
    switch (tens)
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d84e      	bhi.n	8003afe <LCD_Display_Dose_Number+0x1ba>
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7fc fb63 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a66:	4840      	.short	0x4840
 8003a68:	6c696257 	.word	0x6c696257
 8003a6c:	8b847d73 	.word	0x8b847d73
			Dose_data_hun[0] = 0x0004000;
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0004000;
 8003a76:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x0008000;
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x000C000;
 8003a7e:	23c0      	movs	r3, #192	@ 0xc0
 8003a80:	021b      	lsls	r3, r3, #8
			Dose_data_hun[3] = 0x0004000;
 8003a82:	60e3      	str	r3, [r4, #12]
			break;
 8003a84:	e7e9      	b.n	8003a5a <LCD_Display_Dose_Number+0x116>
			Dose_data_hun[0] = 0x0004000;
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	01db      	lsls	r3, r3, #7
 8003a8a:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0004000;
 8003a8c:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003a8e:	22c0      	movs	r2, #192	@ 0xc0
 8003a90:	0212      	lsls	r2, r2, #8
 8003a92:	e7dc      	b.n	8003a4e <LCD_Display_Dose_Number+0x10a>
			Dose_data_hun[1] = 0x000C000;
 8003a94:	23c0      	movs	r3, #192	@ 0xc0
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	e7dd      	b.n	8003a56 <LCD_Display_Dose_Number+0x112>
			Dose_data_hun[0] = 0x0004000;
 8003a9a:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x0008000;
 8003a9c:	2280      	movs	r2, #128	@ 0x80
			Dose_data_hun[0] = 0x0004000;
 8003a9e:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x0008000;
 8003aa0:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003aa2:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0008000;
 8003aa4:	6062      	str	r2, [r4, #4]
 8003aa6:	e7f2      	b.n	8003a8e <LCD_Display_Dose_Number+0x14a>
			Dose_data_hun[0] = 0x0004000;
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0008000;
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003ab4:	23c0      	movs	r3, #192	@ 0xc0
 8003ab6:	021b      	lsls	r3, r3, #8
			Dose_data_hun[2] = 0x000C000;
 8003ab8:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x000C000;
 8003aba:	e7e2      	b.n	8003a82 <LCD_Display_Dose_Number+0x13e>
			Dose_data_hun[0] = 0x0004000;
 8003abc:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x000C000;
 8003abe:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_hun[0] = 0x0004000;
 8003ac0:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003ac2:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003ac4:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ac6:	6062      	str	r2, [r4, #4]
			Dose_data_hun[2] = 0x0004000;
 8003ac8:	e7c6      	b.n	8003a58 <LCD_Display_Dose_Number+0x114>
			Dose_data_hun[0] = 0x0004000;
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ad0:	23c0      	movs	r3, #192	@ 0xc0
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	e7ef      	b.n	8003ab8 <LCD_Display_Dose_Number+0x174>
			Dose_data_hun[0] = 0x0004000;
 8003ad8:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x000C000;
 8003ada:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_hun[0] = 0x0004000;
 8003adc:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003ade:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003ae0:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ae2:	6062      	str	r2, [r4, #4]
 8003ae4:	e7b3      	b.n	8003a4e <LCD_Display_Dose_Number+0x10a>
    {
    	case 0:
    		Dose_data_ten[0] = 0x0001000;
 8003ae6:	2280      	movs	r2, #128	@ 0x80
    		Dose_data_ten[1] = 0x0003000;
 8003ae8:	23c0      	movs	r3, #192	@ 0xc0
    		Dose_data_ten[0] = 0x0001000;
 8003aea:	0152      	lsls	r2, r2, #5
    		Dose_data_ten[1] = 0x0003000;
 8003aec:	019b      	lsls	r3, r3, #6
    		Dose_data_ten[0] = 0x0001000;
 8003aee:	920c      	str	r2, [sp, #48]	@ 0x30
    		Dose_data_ten[1] = 0x0003000;
 8003af0:	606b      	str	r3, [r5, #4]
			break;

		case 9:
			Dose_data_ten[0] = 0x0001000;
			Dose_data_ten[1] = 0x0003000;
			Dose_data_ten[2] = 0x0003000;
 8003af2:	60aa      	str	r2, [r5, #8]
 8003af4:	e017      	b.n	8003b26 <LCD_Display_Dose_Number+0x1e2>
    		Dose_data_ten[1] = 0x0001000;
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003afa:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0001000;
 8003afc:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0001000;
			break;
    }
    switch (ones)
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d84b      	bhi.n	8003b9c <LCD_Display_Dose_Number+0x258>
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fc fb11 	bl	800012c <__gnu_thumb1_case_uqi>
 8003b0a:	4640      	.short	0x4640
 8003b0c:	68666159 	.word	0x68666159
 8003b10:	7f7a746d 	.word	0x7f7a746d
			Dose_data_ten[0] = 0x0001000;
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	015b      	lsls	r3, r3, #5
 8003b18:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0001000;
 8003b1a:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0002000;
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0003000;
 8003b22:	23c0      	movs	r3, #192	@ 0xc0
 8003b24:	019b      	lsls	r3, r3, #6
			Dose_data_ten[3] = 0x0001000;
 8003b26:	60eb      	str	r3, [r5, #12]
			break;
 8003b28:	e7e9      	b.n	8003afe <LCD_Display_Dose_Number+0x1ba>
			Dose_data_ten[0] = 0x0001000;
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	015b      	lsls	r3, r3, #5
 8003b2e:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0001000;
 8003b30:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0003000;
 8003b32:	22c0      	movs	r2, #192	@ 0xc0
 8003b34:	0192      	lsls	r2, r2, #6
 8003b36:	e7dc      	b.n	8003af2 <LCD_Display_Dose_Number+0x1ae>
			Dose_data_ten[1] = 0x0003000;
 8003b38:	23c0      	movs	r3, #192	@ 0xc0
 8003b3a:	019b      	lsls	r3, r3, #6
 8003b3c:	e7dd      	b.n	8003afa <LCD_Display_Dose_Number+0x1b6>
			Dose_data_ten[0] = 0x0001000;
 8003b3e:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0002000;
 8003b40:	2280      	movs	r2, #128	@ 0x80
			Dose_data_ten[0] = 0x0001000;
 8003b42:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0002000;
 8003b44:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b46:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0002000;
 8003b48:	606a      	str	r2, [r5, #4]
 8003b4a:	e7f2      	b.n	8003b32 <LCD_Display_Dose_Number+0x1ee>
			Dose_data_ten[0] = 0x0001000;
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0002000;
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0003000;
 8003b58:	23c0      	movs	r3, #192	@ 0xc0
 8003b5a:	019b      	lsls	r3, r3, #6
			Dose_data_ten[2] = 0x0003000;
 8003b5c:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0003000;
 8003b5e:	e7e2      	b.n	8003b26 <LCD_Display_Dose_Number+0x1e2>
			Dose_data_ten[0] = 0x0001000;
 8003b60:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0003000;
 8003b62:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_ten[0] = 0x0001000;
 8003b64:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003b66:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b68:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b6a:	606a      	str	r2, [r5, #4]
 8003b6c:	e7c6      	b.n	8003afc <LCD_Display_Dose_Number+0x1b8>
			Dose_data_ten[0] = 0x0001000;
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	015b      	lsls	r3, r3, #5
 8003b72:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	606b      	str	r3, [r5, #4]
 8003b7a:	e7ef      	b.n	8003b5c <LCD_Display_Dose_Number+0x218>
			Dose_data_ten[0] = 0x0001000;
 8003b7c:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0003000;
 8003b7e:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_ten[0] = 0x0001000;
 8003b80:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003b82:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b84:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b86:	606a      	str	r2, [r5, #4]
 8003b88:	e7b3      	b.n	8003af2 <LCD_Display_Dose_Number+0x1ae>
    {
    	case 0:
        	Dose_data_one[0] = 0x0000040;
 8003b8a:	2240      	movs	r2, #64	@ 0x40
        	Dose_data_one[1] = 0x0000060;
 8003b8c:	2360      	movs	r3, #96	@ 0x60
        	Dose_data_one[0] = 0x0000040;
 8003b8e:	9210      	str	r2, [sp, #64]	@ 0x40
        	Dose_data_one[1] = 0x0000060;
 8003b90:	6073      	str	r3, [r6, #4]
			break;

		case 9:
			Dose_data_one[0] = 0x0000040;
			Dose_data_one[1] = 0x0000060;
			Dose_data_one[2] = 0x0000060;
 8003b92:	60b2      	str	r2, [r6, #8]
 8003b94:	e018      	b.n	8003bc8 <LCD_Display_Dose_Number+0x284>
    		Dose_data_one[1] = 0x0000040;
 8003b96:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003b98:	9311      	str	r3, [sp, #68]	@ 0x44
			Dose_data_one[2] = 0x0000060;
 8003b9a:	9312      	str	r3, [sp, #72]	@ 0x48
{
 8003b9c:	2300      	movs	r3, #0
			Dose_data_one[3] = 0x0000040;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Dose_data_tho[i] | Dose_data_hun[i] | Dose_data_ten[i] | Dose_data_one[i];
 8003b9e:	aa04      	add	r2, sp, #16
 8003ba0:	58e1      	ldr	r1, [r4, r3]
 8003ba2:	58d2      	ldr	r2, [r2, r3]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	58e9      	ldr	r1, [r5, r3]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	58f1      	ldr	r1, [r6, r3]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003bb0:	50ca      	str	r2, [r1, r3]
    for(int i = 0; i<4; i++)
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d1f2      	bne.n	8003b9e <LCD_Display_Dose_Number+0x25a>
    }
}
 8003bb8:	b015      	add	sp, #84	@ 0x54
 8003bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Dose_data_one[0] = 0x0000040;
 8003bbc:	2340      	movs	r3, #64	@ 0x40
 8003bbe:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000040;
 8003bc0:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000020;
 8003bc2:	3b20      	subs	r3, #32
 8003bc4:	60b3      	str	r3, [r6, #8]
			Dose_data_one[3] = 0x0000060;
 8003bc6:	3340      	adds	r3, #64	@ 0x40
			Dose_data_one[3] = 0x0000040;
 8003bc8:	60f3      	str	r3, [r6, #12]
    for(int i = 0; i<4; i++)
 8003bca:	e7e7      	b.n	8003b9c <LCD_Display_Dose_Number+0x258>
			Dose_data_one[0] = 0x0000040;
 8003bcc:	2340      	movs	r3, #64	@ 0x40
 8003bce:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000040;
 8003bd0:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003bd2:	2260      	movs	r2, #96	@ 0x60
 8003bd4:	e7dd      	b.n	8003b92 <LCD_Display_Dose_Number+0x24e>
			Dose_data_one[1] = 0x0000060;
 8003bd6:	2360      	movs	r3, #96	@ 0x60
 8003bd8:	e7de      	b.n	8003b98 <LCD_Display_Dose_Number+0x254>
			Dose_data_one[0] = 0x0000040;
 8003bda:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003bdc:	2220      	movs	r2, #32
			Dose_data_one[0] = 0x0000040;
 8003bde:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003be0:	6072      	str	r2, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003be2:	e7f6      	b.n	8003bd2 <LCD_Display_Dose_Number+0x28e>
			Dose_data_one[0] = 0x0000040;
 8003be4:	2340      	movs	r3, #64	@ 0x40
 8003be6:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003be8:	3b20      	subs	r3, #32
 8003bea:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003bec:	3340      	adds	r3, #64	@ 0x40
			Dose_data_one[2] = 0x0000060;
 8003bee:	60b3      	str	r3, [r6, #8]
			Dose_data_one[3] = 0x0000060;
 8003bf0:	e7ea      	b.n	8003bc8 <LCD_Display_Dose_Number+0x284>
			Dose_data_one[0] = 0x0000040;
 8003bf2:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003bf4:	2260      	movs	r2, #96	@ 0x60
			Dose_data_one[0] = 0x0000040;
 8003bf6:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003bf8:	6072      	str	r2, [r6, #4]
			Dose_data_one[2] = 0x0000040;
 8003bfa:	60b3      	str	r3, [r6, #8]
    for(int i = 0; i<4; i++)
 8003bfc:	e7ce      	b.n	8003b9c <LCD_Display_Dose_Number+0x258>
			Dose_data_one[0] = 0x0000040;
 8003bfe:	2340      	movs	r3, #64	@ 0x40
 8003c00:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c02:	3320      	adds	r3, #32
 8003c04:	6073      	str	r3, [r6, #4]
 8003c06:	e7f2      	b.n	8003bee <LCD_Display_Dose_Number+0x2aa>
			Dose_data_one[0] = 0x0000040;
 8003c08:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c0a:	2260      	movs	r2, #96	@ 0x60
			Dose_data_one[0] = 0x0000040;
 8003c0c:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c0e:	6072      	str	r2, [r6, #4]
 8003c10:	e7bf      	b.n	8003b92 <LCD_Display_Dose_Number+0x24e>

08003c12 <LCD_DigitNumber_Dose_Calculate>:
{
 8003c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c14:	000f      	movs	r7, r1
    number %= 1000;
 8003c16:	21fa      	movs	r1, #250	@ 0xfa
{
 8003c18:	b085      	sub	sp, #20
    number %= 1000;
 8003c1a:	0089      	lsls	r1, r1, #2
{
 8003c1c:	0004      	movs	r4, r0
    number %= 1000;
 8003c1e:	f7fc fb29 	bl	8000274 <__aeabi_uidivmod>
 8003c22:	b28d      	uxth	r5, r1
    number %= 100;
 8003c24:	0028      	movs	r0, r5
 8003c26:	2164      	movs	r1, #100	@ 0x64
 8003c28:	f7fc fb24 	bl	8000274 <__aeabi_uidivmod>
 8003c2c:	b28e      	uxth	r6, r1
    ones      = number % 10;
 8003c2e:	0030      	movs	r0, r6
 8003c30:	210a      	movs	r1, #10
 8003c32:	f7fc fb1f 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 8003c36:	0030      	movs	r0, r6
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c38:	b2cb      	uxtb	r3, r1
    tens      = number / 10;
 8003c3a:	210a      	movs	r1, #10
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c3c:	9303      	str	r3, [sp, #12]
    tens      = number / 10;
 8003c3e:	f7fc fa93 	bl	8000168 <__udivsi3>
    hundreds  = number / 100;
 8003c42:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c44:	b2c6      	uxtb	r6, r0
    hundreds  = number / 100;
 8003c46:	0028      	movs	r0, r5
 8003c48:	f7fc fa8e 	bl	8000168 <__udivsi3>
    thousands = number / 1000;
 8003c4c:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c4e:	b2c5      	uxtb	r5, r0
    thousands = number / 1000;
 8003c50:	0089      	lsls	r1, r1, #2
 8003c52:	0020      	movs	r0, r4
 8003c54:	f7fc fa88 	bl	8000168 <__udivsi3>
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c58:	0032      	movs	r2, r6
 8003c5a:	0029      	movs	r1, r5
 8003c5c:	9b03      	ldr	r3, [sp, #12]
 8003c5e:	b2c0      	uxtb	r0, r0
 8003c60:	9700      	str	r7, [sp, #0]
 8003c62:	f7ff fe6f 	bl	8003944 <LCD_Display_Dose_Number>
}
 8003c66:	b005      	add	sp, #20
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c6c <LCD_Display_Dose>:
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	0015      	movs	r5, r2
 8003c70:	000c      	movs	r4, r1
    dose = dose / 10.0;
 8003c72:	f7ff fd6d 	bl	8003750 <__aeabi_ui2d>
 8003c76:	2200      	movs	r2, #0
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <LCD_Display_Dose+0xe4>)
 8003c7a:	f7fe f9b3 	bl	8001fe4 <__aeabi_ddiv>
 8003c7e:	f7fc fcb7 	bl	80005f0 <__aeabi_d2uiz>
    if (Packet_dose_unit == 0x00) // uSv/h, mSv/h unit
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	d13d      	bne.n	8003d02 <LCD_Display_Dose+0x96>
        if (dose > 9999)
 8003c86:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <LCD_Display_Dose+0xe8>)
 8003c88:	4298      	cmp	r0, r3
 8003c8a:	d912      	bls.n	8003cb2 <LCD_Display_Dose+0x46>
            float mSv_dose = dose / 10000.0f;
 8003c8c:	f7fd fd9e 	bl	80017cc <__aeabi_ui2f>
 8003c90:	4931      	ldr	r1, [pc, #196]	@ (8003d58 <LCD_Display_Dose+0xec>)
 8003c92:	f7fc ff89 	bl	8000ba8 <__aeabi_fdiv>
            dose_int = (int32_t)(mSv_dose * 10.0f);  // mSv * 10
 8003c96:	4931      	ldr	r1, [pc, #196]	@ (8003d5c <LCD_Display_Dose+0xf0>)
 8003c98:	f7fd f954 	bl	8000f44 <__aeabi_fmul>
 8003c9c:	f7fd fd26 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003ca0:	0021      	movs	r1, r4
 8003ca2:	b280      	uxth	r0, r0
 8003ca4:	f7ff ffb5 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[0] |= 0x0000008;  // mSv/h 표시
 8003ca8:	2308      	movs	r3, #8
 8003caa:	6822      	ldr	r2, [r4, #0]
            data[0] |= 0x0800000;  // mR/h 표시
 8003cac:	4313      	orrs	r3, r2
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	e008      	b.n	8003cc4 <LCD_Display_Dose+0x58>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	b280      	uxth	r0, r0
 8003cb6:	f7ff ffac 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[2] |= 0x0800000;  // uSv/h 표시
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	68a2      	ldr	r2, [r4, #8]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60a3      	str	r3, [r4, #8]
    data[3] = data[3] | 0x0800000;
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	68e2      	ldr	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cc8:	4d25      	ldr	r5, [pc, #148]	@ (8003d60 <LCD_Display_Dose+0xf4>)
    data[3] = data[3] | 0x0800000;
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cce:	0028      	movs	r0, r5
    data[3] = data[3] | 0x0800000;
 8003cd0:	60e3      	str	r3, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cd8:	f00b fd96 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8003cdc:	0028      	movs	r0, r5
 8003cde:	6863      	ldr	r3, [r4, #4]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4a20      	ldr	r2, [pc, #128]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003ce4:	f00b fd90 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8003ce8:	0028      	movs	r0, r5
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	2104      	movs	r1, #4
 8003cee:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cf0:	f00b fd8a 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	2106      	movs	r1, #6
 8003cf8:	68e3      	ldr	r3, [r4, #12]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cfc:	f00b fd84 	bl	800f808 <HAL_LCD_Write>
}
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
        float mR_dose = dose * 100.0f;
 8003d02:	f7fd fd63 	bl	80017cc <__aeabi_ui2f>
 8003d06:	4918      	ldr	r1, [pc, #96]	@ (8003d68 <LCD_Display_Dose+0xfc>)
 8003d08:	f7fd f91c 	bl	8000f44 <__aeabi_fmul>
        if (mR_dose > 99999.0f)
 8003d0c:	4917      	ldr	r1, [pc, #92]	@ (8003d6c <LCD_Display_Dose+0x100>)
        float mR_dose = dose * 100.0f;
 8003d0e:	1c05      	adds	r5, r0, #0
        if (mR_dose > 99999.0f)
 8003d10:	f7fc fc04 	bl	800051c <__aeabi_fcmpgt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d00f      	beq.n	8003d38 <LCD_Display_Dose+0xcc>
            float R_dose = mR_dose / 10000.0f;
 8003d18:	490f      	ldr	r1, [pc, #60]	@ (8003d58 <LCD_Display_Dose+0xec>)
 8003d1a:	1c28      	adds	r0, r5, #0
 8003d1c:	f7fc ff44 	bl	8000ba8 <__aeabi_fdiv>
            dose_int = (int32_t)(R_dose);  // R * 10
 8003d20:	f7fd fce4 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003d24:	0021      	movs	r1, r4
 8003d26:	b280      	uxth	r0, r0
 8003d28:	f7ff ff73 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[1] |= 0x0800000;  // R/h 표시
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	4313      	orrs	r3, r2
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	e7c5      	b.n	8003cc4 <LCD_Display_Dose+0x58>
            dose_int = (int32_t)(mR_dose);  // 반올림한 mR 값
 8003d38:	1c28      	adds	r0, r5, #0
 8003d3a:	f7fd fcd7 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003d3e:	0021      	movs	r1, r4
 8003d40:	b280      	uxth	r0, r0
 8003d42:	f7ff ff66 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[0] |= 0x0800000;  // mR/h 표시
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	e7ae      	b.n	8003cac <LCD_Display_Dose+0x40>
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	40240000 	.word	0x40240000
 8003d54:	0000270f 	.word	0x0000270f
 8003d58:	461c4000 	.word	0x461c4000
 8003d5c:	41200000 	.word	0x41200000
 8003d60:	20000a80 	.word	0x20000a80
 8003d64:	f7fffffe 	.word	0xf7fffffe
 8003d68:	42c80000 	.word	0x42c80000
 8003d6c:	47c34f80 	.word	0x47c34f80

08003d70 <LCD_Display_Temp_Number>:
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
	}
}

void LCD_Display_Temp_Number(uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d72:	b095      	sub	sp, #84	@ 0x54
 8003d74:	9001      	str	r0, [sp, #4]
 8003d76:	9202      	str	r2, [sp, #8]
 8003d78:	000f      	movs	r7, r1
	uint32_t Temp_data_tho[4] = {0};
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	a804      	add	r0, sp, #16
	uint32_t Temp_data_hun[4] = {0};
 8003d80:	ac08      	add	r4, sp, #32
{
 8003d82:	9303      	str	r3, [sp, #12]
	uint32_t Temp_data_ten[4] = {0};
 8003d84:	ad0c      	add	r5, sp, #48	@ 0x30
	uint32_t Temp_data_tho[4] = {0};
 8003d86:	f016 fbb5 	bl	801a4f4 <memset>
	uint32_t Temp_data_hun[4] = {0};
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	0020      	movs	r0, r4
 8003d90:	f016 fbb0 	bl	801a4f4 <memset>
	uint32_t Temp_data_one[4] = {0};
 8003d94:	ae10      	add	r6, sp, #64	@ 0x40
	uint32_t Temp_data_ten[4] = {0};
 8003d96:	2210      	movs	r2, #16
 8003d98:	2100      	movs	r1, #0
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	f016 fbaa 	bl	801a4f4 <memset>
	uint32_t Temp_data_one[4] = {0};
 8003da0:	2210      	movs	r2, #16
 8003da2:	2100      	movs	r1, #0
 8003da4:	0030      	movs	r0, r6
 8003da6:	f016 fba5 	bl	801a4f4 <memset>

	switch (thousands)
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	1e58      	subs	r0, r3, #1
 8003dae:	2808      	cmp	r0, #8
 8003db0:	d84c      	bhi.n	8003e4c <LCD_Display_Temp_Number+0xdc>
 8003db2:	f7fc f9bb 	bl	800012c <__gnu_thumb1_case_uqi>
 8003db6:	1305      	.short	0x1305
 8003db8:	2e27251d 	.word	0x2e27251d
 8003dbc:	3e37      	.short	0x3e37
 8003dbe:	44          	.byte	0x44
 8003dbf:	00          	.byte	0x00
	    		Temp_data_tho[3] = 0x0000000;
	    		break;

	    	case 1:
	    		Temp_data_tho[0] = 0x0000000;
	    		Temp_data_tho[1] = 0x0000100;
 8003dc0:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[3] = 0x0000100;
				break;

			case 4:
				Temp_data_tho[0] = 0x0000000;
				Temp_data_tho[1] = 0x0000180;
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	9305      	str	r3, [sp, #20]
				break;

			case 7:
				Temp_data_tho[0] = 0x0000100;
				Temp_data_tho[1] = 0x0000180;
				Temp_data_tho[2] = 0x0000100;
 8003dc6:	9306      	str	r3, [sp, #24]
				Temp_data_tho[2] = 0x0000180;
				Temp_data_tho[3] = 0x0000100;
				break;
	    }

    switch (hundreds)
 8003dc8:	2f09      	cmp	r7, #9
 8003dca:	d857      	bhi.n	8003e7c <LCD_Display_Temp_Number+0x10c>
 8003dcc:	0038      	movs	r0, r7
 8003dce:	f7fc f9ad 	bl	800012c <__gnu_thumb1_case_uqi>
 8003dd2:	514a      	.short	0x514a
 8003dd4:	72706a60 	.word	0x72706a60
 8003dd8:	8e888279 	.word	0x8e888279
				Temp_data_tho[0] = 0x0000100;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000100;
 8003de2:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000080;
 8003de4:	3b80      	subs	r3, #128	@ 0x80
 8003de6:	9306      	str	r3, [sp, #24]
				Temp_data_tho[3] = 0x0000180;
 8003de8:	3301      	adds	r3, #1
 8003dea:	33ff      	adds	r3, #255	@ 0xff
				Temp_data_tho[3] = 0x0000180;
 8003dec:	9307      	str	r3, [sp, #28]
				break;
 8003dee:	e7eb      	b.n	8003dc8 <LCD_Display_Temp_Number+0x58>
				Temp_data_tho[0] = 0x0000100;
 8003df0:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[2] = 0x0000180;
 8003df2:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000100;
 8003df8:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000180;
 8003dfa:	0052      	lsls	r2, r2, #1
				Temp_data_tho[2] = 0x0000180;
 8003dfc:	9206      	str	r2, [sp, #24]
				Temp_data_tho[3] = 0x0000100;
 8003dfe:	e7f5      	b.n	8003dec <LCD_Display_Temp_Number+0x7c>
				Temp_data_tho[1] = 0x0000180;
 8003e00:	23c0      	movs	r3, #192	@ 0xc0
 8003e02:	e7de      	b.n	8003dc2 <LCD_Display_Temp_Number+0x52>
				Temp_data_tho[0] = 0x0000100;
 8003e04:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000080;
 8003e06:	2280      	movs	r2, #128	@ 0x80
				Temp_data_tho[0] = 0x0000100;
 8003e08:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000080;
 8003e0a:	9205      	str	r2, [sp, #20]
				Temp_data_tho[0] = 0x0000100;
 8003e0c:	9304      	str	r3, [sp, #16]
				Temp_data_tho[2] = 0x0000180;
 8003e0e:	18d2      	adds	r2, r2, r3
 8003e10:	e7f4      	b.n	8003dfc <LCD_Display_Temp_Number+0x8c>
				Temp_data_tho[0] = 0x0000100;
 8003e12:	2380      	movs	r3, #128	@ 0x80
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000080;
 8003e18:	3b80      	subs	r3, #128	@ 0x80
 8003e1a:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000180;
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	33ff      	adds	r3, #255	@ 0xff
				Temp_data_tho[2] = 0x0000180;
 8003e20:	9306      	str	r3, [sp, #24]
 8003e22:	e7e3      	b.n	8003dec <LCD_Display_Temp_Number+0x7c>
				Temp_data_tho[0] = 0x0000100;
 8003e24:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000180;
 8003e26:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003e28:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000180;
 8003e2a:	0052      	lsls	r2, r2, #1
				Temp_data_tho[0] = 0x0000100;
 8003e2c:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e2e:	9205      	str	r2, [sp, #20]
 8003e30:	e7c9      	b.n	8003dc6 <LCD_Display_Temp_Number+0x56>
				Temp_data_tho[0] = 0x0000100;
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e38:	3380      	adds	r3, #128	@ 0x80
 8003e3a:	9305      	str	r3, [sp, #20]
 8003e3c:	e7f0      	b.n	8003e20 <LCD_Display_Temp_Number+0xb0>
				Temp_data_tho[0] = 0x0000100;
 8003e3e:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000180;
 8003e40:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003e42:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000180;
 8003e44:	0052      	lsls	r2, r2, #1
				Temp_data_tho[0] = 0x0000100;
 8003e46:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e48:	9205      	str	r2, [sp, #20]
 8003e4a:	e7d7      	b.n	8003dfc <LCD_Display_Temp_Number+0x8c>
    switch (hundreds)
 8003e4c:	2f09      	cmp	r7, #9
 8003e4e:	d815      	bhi.n	8003e7c <LCD_Display_Temp_Number+0x10c>
 8003e50:	0038      	movs	r0, r7
 8003e52:	f7fc f96b 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e56:	0f05      	.short	0x0f05
 8003e58:	302e281e 	.word	0x302e281e
 8003e5c:	4c464037 	.word	0x4c464037
    {
    	case 0:
    		if(thousands == 0)
 8003e60:	9b01      	ldr	r3, [sp, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <LCD_Display_Temp_Number+0x10c>
    			Temp_data_hun[2] = 0x0000000;
    			Temp_data_hun[3] = 0x0000000;
    		}
    		else
    		{
    			Temp_data_hun[0] = 0x0200000;
 8003e66:	2280      	movs	r2, #128	@ 0x80
    			Temp_data_hun[1] = 0x0200200;
 8003e68:	4b6e      	ldr	r3, [pc, #440]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
    			Temp_data_hun[0] = 0x0200000;
 8003e6a:	0392      	lsls	r2, r2, #14
 8003e6c:	9208      	str	r2, [sp, #32]
    			Temp_data_hun[1] = 0x0200200;
 8003e6e:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Temp_data_hun[0] = 0x0200000;
			Temp_data_hun[1] = 0x0200200;
			Temp_data_hun[2] = 0x0200200;
 8003e70:	60a2      	str	r2, [r4, #8]
 8003e72:	e016      	b.n	8003ea2 <LCD_Display_Temp_Number+0x132>
    		Temp_data_hun[1] = 0x0200000;
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	039b      	lsls	r3, r3, #14
			Temp_data_hun[1] = 0x0200200;
 8003e78:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003e7a:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200000;
			break;
    }
    switch (tens)
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	2b09      	cmp	r3, #9
 8003e80:	d847      	bhi.n	8003f12 <LCD_Display_Temp_Number+0x1a2>
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fc f952 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e88:	5b504139 	.word	0x5b504139
 8003e8c:	756b6462 	.word	0x756b6462
 8003e90:	837c      	.short	0x837c
			Temp_data_hun[0] = 0x0200000;
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	039b      	lsls	r3, r3, #14
 8003e96:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200000;
 8003e98:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0000200;
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200200;
 8003ea0:	4b60      	ldr	r3, [pc, #384]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[3] = 0x0200000;
 8003ea2:	60e3      	str	r3, [r4, #12]
			break;
 8003ea4:	e7ea      	b.n	8003e7c <LCD_Display_Temp_Number+0x10c>
			Temp_data_hun[0] = 0x0200000;
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	039b      	lsls	r3, r3, #14
 8003eaa:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200000;
 8003eac:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003eae:	4a5d      	ldr	r2, [pc, #372]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eb0:	e7de      	b.n	8003e70 <LCD_Display_Temp_Number+0x100>
			Temp_data_hun[1] = 0x0200200;
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eb4:	e7e0      	b.n	8003e78 <LCD_Display_Temp_Number+0x108>
			Temp_data_hun[0] = 0x0200000;
 8003eb6:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0000200;
 8003eb8:	2280      	movs	r2, #128	@ 0x80
			Temp_data_hun[0] = 0x0200000;
 8003eba:	039b      	lsls	r3, r3, #14
			Temp_data_hun[1] = 0x0000200;
 8003ebc:	0092      	lsls	r2, r2, #2
			Temp_data_hun[0] = 0x0200000;
 8003ebe:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0000200;
 8003ec0:	6062      	str	r2, [r4, #4]
 8003ec2:	e7f4      	b.n	8003eae <LCD_Display_Temp_Number+0x13e>
			Temp_data_hun[0] = 0x0200000;
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	039b      	lsls	r3, r3, #14
 8003ec8:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0000200;
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003ed0:	4b54      	ldr	r3, [pc, #336]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[2] = 0x0200200;
 8003ed2:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200200;
 8003ed4:	e7e5      	b.n	8003ea2 <LCD_Display_Temp_Number+0x132>
			Temp_data_hun[0] = 0x0200000;
 8003ed6:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0200200;
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[0] = 0x0200000;
 8003eda:	039b      	lsls	r3, r3, #14
 8003edc:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ede:	6062      	str	r2, [r4, #4]
			Temp_data_hun[2] = 0x0200000;
 8003ee0:	e7cb      	b.n	8003e7a <LCD_Display_Temp_Number+0x10a>
			Temp_data_hun[0] = 0x0200000;
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	039b      	lsls	r3, r3, #14
 8003ee6:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eea:	6063      	str	r3, [r4, #4]
 8003eec:	e7f1      	b.n	8003ed2 <LCD_Display_Temp_Number+0x162>
			Temp_data_hun[0] = 0x0200000;
 8003eee:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0200200;
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[0] = 0x0200000;
 8003ef2:	039b      	lsls	r3, r3, #14
 8003ef4:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ef6:	6062      	str	r2, [r4, #4]
 8003ef8:	e7ba      	b.n	8003e70 <LCD_Display_Temp_Number+0x100>
    {
    	case 0:
        	Temp_data_ten[0] = 0x0080000;
 8003efa:	2280      	movs	r2, #128	@ 0x80
        	Temp_data_ten[1] = 0x0090000;
 8003efc:	2390      	movs	r3, #144	@ 0x90
        	Temp_data_ten[0] = 0x0080000;
 8003efe:	0312      	lsls	r2, r2, #12
        	Temp_data_ten[1] = 0x0090000;
 8003f00:	031b      	lsls	r3, r3, #12
        	Temp_data_ten[0] = 0x0080000;
 8003f02:	920c      	str	r2, [sp, #48]	@ 0x30
        	Temp_data_ten[1] = 0x0090000;
 8003f04:	606b      	str	r3, [r5, #4]
			break;

		case 9:
			Temp_data_ten[0] = 0x0080000;
			Temp_data_ten[1] = 0x0090000;
			Temp_data_ten[2] = 0x0090000;
 8003f06:	60aa      	str	r2, [r5, #8]
 8003f08:	e017      	b.n	8003f3a <LCD_Display_Temp_Number+0x1ca>
    		Temp_data_ten[1] = 0x0080000;
 8003f0a:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0080000;
 8003f10:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d84a      	bhi.n	8003fae <LCD_Display_Temp_Number+0x23e>
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fc f907 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f1e:	453f      	.short	0x453f
 8003f20:	67656058 	.word	0x67656058
 8003f24:	7e79736c 	.word	0x7e79736c
			Temp_data_ten[0] = 0x0080000;
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	031b      	lsls	r3, r3, #12
 8003f2c:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0080000;
 8003f2e:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0010000;
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0090000;
 8003f36:	2390      	movs	r3, #144	@ 0x90
 8003f38:	031b      	lsls	r3, r3, #12
			Temp_data_ten[3] = 0x0080000;
 8003f3a:	60eb      	str	r3, [r5, #12]
			break;
 8003f3c:	e7e9      	b.n	8003f12 <LCD_Display_Temp_Number+0x1a2>
			Temp_data_ten[0] = 0x0080000;
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0080000;
 8003f44:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0090000;
 8003f46:	2290      	movs	r2, #144	@ 0x90
 8003f48:	0312      	lsls	r2, r2, #12
 8003f4a:	e7dc      	b.n	8003f06 <LCD_Display_Temp_Number+0x196>
			Temp_data_ten[1] = 0x0090000;
 8003f4c:	2390      	movs	r3, #144	@ 0x90
 8003f4e:	e7dd      	b.n	8003f0c <LCD_Display_Temp_Number+0x19c>
			Temp_data_ten[0] = 0x0080000;
 8003f50:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0010000;
 8003f52:	2280      	movs	r2, #128	@ 0x80
			Temp_data_ten[0] = 0x0080000;
 8003f54:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0010000;
 8003f56:	0252      	lsls	r2, r2, #9
			Temp_data_ten[0] = 0x0080000;
 8003f58:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0010000;
 8003f5a:	606a      	str	r2, [r5, #4]
 8003f5c:	e7f3      	b.n	8003f46 <LCD_Display_Temp_Number+0x1d6>
			Temp_data_ten[0] = 0x0080000;
 8003f5e:	2380      	movs	r3, #128	@ 0x80
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0010000;
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	025b      	lsls	r3, r3, #9
 8003f68:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0090000;
 8003f6a:	2390      	movs	r3, #144	@ 0x90
 8003f6c:	031b      	lsls	r3, r3, #12
			Temp_data_ten[2] = 0x0090000;
 8003f6e:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0090000;
 8003f70:	e7e3      	b.n	8003f3a <LCD_Display_Temp_Number+0x1ca>
			Temp_data_ten[0] = 0x0080000;
 8003f72:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f74:	2290      	movs	r2, #144	@ 0x90
			Temp_data_ten[0] = 0x0080000;
 8003f76:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0090000;
 8003f78:	0312      	lsls	r2, r2, #12
			Temp_data_ten[0] = 0x0080000;
 8003f7a:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f7c:	606a      	str	r2, [r5, #4]
 8003f7e:	e7c7      	b.n	8003f10 <LCD_Display_Temp_Number+0x1a0>
			Temp_data_ten[0] = 0x0080000;
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f86:	2390      	movs	r3, #144	@ 0x90
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	606b      	str	r3, [r5, #4]
 8003f8c:	e7ef      	b.n	8003f6e <LCD_Display_Temp_Number+0x1fe>
			Temp_data_ten[0] = 0x0080000;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f90:	2290      	movs	r2, #144	@ 0x90
			Temp_data_ten[0] = 0x0080000;
 8003f92:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0090000;
 8003f94:	0312      	lsls	r2, r2, #12
			Temp_data_ten[0] = 0x0080000;
 8003f96:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f98:	606a      	str	r2, [r5, #4]
 8003f9a:	e7b4      	b.n	8003f06 <LCD_Display_Temp_Number+0x196>
    {
    	case 0:
        	Temp_data_one[0] = 0x0000002;
 8003f9c:	2202      	movs	r2, #2
        	Temp_data_one[1] = 0x0000003;
 8003f9e:	2303      	movs	r3, #3
        	Temp_data_one[0] = 0x0000002;
 8003fa0:	9210      	str	r2, [sp, #64]	@ 0x40
        	Temp_data_one[1] = 0x0000003;
 8003fa2:	6073      	str	r3, [r6, #4]
			break;

		case 9:
			Temp_data_one[0] = 0x0000002;
			Temp_data_one[1] = 0x0000003;
			Temp_data_one[2] = 0x0000003;
 8003fa4:	60b2      	str	r2, [r6, #8]
 8003fa6:	e018      	b.n	8003fda <LCD_Display_Temp_Number+0x26a>
    		Temp_data_one[1] = 0x0000002;
 8003fa8:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 8003faa:	9311      	str	r3, [sp, #68]	@ 0x44
			Temp_data_one[2] = 0x0000003;
 8003fac:	9312      	str	r3, [sp, #72]	@ 0x48
{
 8003fae:	2300      	movs	r3, #0
			Temp_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Temp_data_tho[i] | Temp_data_hun[i] | Temp_data_ten[i] | Temp_data_one[i];
 8003fb0:	aa04      	add	r2, sp, #16
 8003fb2:	58e1      	ldr	r1, [r4, r3]
 8003fb4:	58d2      	ldr	r2, [r2, r3]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	58e9      	ldr	r1, [r5, r3]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	58f1      	ldr	r1, [r6, r3]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003fc2:	50ca      	str	r2, [r1, r3]
    for(int i = 0; i<4; i++)
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d1f2      	bne.n	8003fb0 <LCD_Display_Temp_Number+0x240>
    }
}
 8003fca:	b015      	add	sp, #84	@ 0x54
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Temp_data_one[0] = 0x0000002;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000002;
 8003fd2:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000001;
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60b3      	str	r3, [r6, #8]
			Temp_data_one[3] = 0x0000003;
 8003fd8:	3302      	adds	r3, #2
			Temp_data_one[3] = 0x0000002;
 8003fda:	60f3      	str	r3, [r6, #12]
    for(int i = 0; i<4; i++)
 8003fdc:	e7e7      	b.n	8003fae <LCD_Display_Temp_Number+0x23e>
			Temp_data_one[0] = 0x0000002;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000002;
 8003fe2:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	e7dd      	b.n	8003fa4 <LCD_Display_Temp_Number+0x234>
			Temp_data_one[1] = 0x0000003;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e7de      	b.n	8003faa <LCD_Display_Temp_Number+0x23a>
			Temp_data_one[0] = 0x0000002;
 8003fec:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000001;
 8003fee:	2201      	movs	r2, #1
			Temp_data_one[0] = 0x0000002;
 8003ff0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000001;
 8003ff2:	6072      	str	r2, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003ff4:	e7f6      	b.n	8003fe4 <LCD_Display_Temp_Number+0x274>
			Temp_data_one[0] = 0x0000002;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000001;
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003ffe:	3302      	adds	r3, #2
			Temp_data_one[2] = 0x0000003;
 8004000:	60b3      	str	r3, [r6, #8]
			Temp_data_one[3] = 0x0000003;
 8004002:	e7ea      	b.n	8003fda <LCD_Display_Temp_Number+0x26a>
			Temp_data_one[0] = 0x0000002;
 8004004:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 8004006:	2203      	movs	r2, #3
			Temp_data_one[0] = 0x0000002;
 8004008:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 800400a:	6072      	str	r2, [r6, #4]
			Temp_data_one[2] = 0x0000002;
 800400c:	60b3      	str	r3, [r6, #8]
    for(int i = 0; i<4; i++)
 800400e:	e7ce      	b.n	8003fae <LCD_Display_Temp_Number+0x23e>
			Temp_data_one[0] = 0x0000002;
 8004010:	2302      	movs	r3, #2
 8004012:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 8004014:	3301      	adds	r3, #1
 8004016:	6073      	str	r3, [r6, #4]
 8004018:	e7f2      	b.n	8004000 <LCD_Display_Temp_Number+0x290>
			Temp_data_one[0] = 0x0000002;
 800401a:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 800401c:	2203      	movs	r2, #3
			Temp_data_one[0] = 0x0000002;
 800401e:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 8004020:	6072      	str	r2, [r6, #4]
 8004022:	e7bf      	b.n	8003fa4 <LCD_Display_Temp_Number+0x234>
 8004024:	00200200 	.word	0x00200200

08004028 <LCD_DigitNumber_Temp_Calculate>:
{
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	0004      	movs	r4, r0
 800402c:	000d      	movs	r5, r1
 800402e:	b087      	sub	sp, #28
	if(number < 0)
 8004030:	2800      	cmp	r0, #0
 8004032:	da34      	bge.n	800409e <LCD_DigitNumber_Temp_Calculate+0x76>
		A = -number;
 8004034:	4246      	negs	r6, r0
 8004036:	b236      	sxth	r6, r6
	A %= 1000;
 8004038:	21fa      	movs	r1, #250	@ 0xfa
 800403a:	0030      	movs	r0, r6
 800403c:	0089      	lsls	r1, r1, #2
 800403e:	f7fc fa03 	bl	8000448 <__aeabi_idivmod>
 8004042:	b20b      	sxth	r3, r1
    A %= 100;
 8004044:	0018      	movs	r0, r3
 8004046:	2164      	movs	r1, #100	@ 0x64
	A %= 1000;
 8004048:	9303      	str	r3, [sp, #12]
    A %= 100;
 800404a:	f7fc f9fd 	bl	8000448 <__aeabi_idivmod>
 800404e:	b20f      	sxth	r7, r1
    ones      = A % 10;
 8004050:	0038      	movs	r0, r7
 8004052:	210a      	movs	r1, #10
 8004054:	f7fc f9f8 	bl	8000448 <__aeabi_idivmod>
    tens      = A / 10;
 8004058:	0038      	movs	r0, r7
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800405a:	b2cb      	uxtb	r3, r1
    tens      = A / 10;
 800405c:	210a      	movs	r1, #10
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800405e:	9304      	str	r3, [sp, #16]
    tens      = A / 10;
 8004060:	f7fc f90c 	bl	800027c <__divsi3>
    hundreds  = A / 100;
 8004064:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 8004066:	b2c3      	uxtb	r3, r0
    hundreds  = A / 100;
 8004068:	9803      	ldr	r0, [sp, #12]
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800406a:	9305      	str	r3, [sp, #20]
    hundreds  = A / 100;
 800406c:	f7fc f906 	bl	800027c <__divsi3>
	thousands = A /1000;
 8004070:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 8004072:	b2c7      	uxtb	r7, r0
	thousands = A /1000;
 8004074:	0089      	lsls	r1, r1, #2
 8004076:	0030      	movs	r0, r6
 8004078:	f7fc f900 	bl	800027c <__divsi3>
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	0039      	movs	r1, r7
 8004080:	9a05      	ldr	r2, [sp, #20]
 8004082:	b2c0      	uxtb	r0, r0
 8004084:	9500      	str	r5, [sp, #0]
 8004086:	f7ff fe73 	bl	8003d70 <LCD_Display_Temp_Number>
	if(number < 0 && number > -100)
 800408a:	0023      	movs	r3, r4
 800408c:	3363      	adds	r3, #99	@ 0x63
 800408e:	d308      	bcc.n	80040a2 <LCD_DigitNumber_Temp_Calculate+0x7a>
		data[2] = data[2] | 0x0000200;  //-부호 on, 8번세그먼트에 표시
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	68aa      	ldr	r2, [r5, #8]
 8004094:	009b      	lsls	r3, r3, #2
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
 8004096:	4313      	orrs	r3, r2
 8004098:	60ab      	str	r3, [r5, #8]
}
 800409a:	b007      	add	sp, #28
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		A = number;
 800409e:	b206      	sxth	r6, r0
 80040a0:	e7ca      	b.n	8004038 <LCD_DigitNumber_Temp_Calculate+0x10>
	else if(number < -99 && number > -1000)
 80040a2:	22e1      	movs	r2, #225	@ 0xe1
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <LCD_DigitNumber_Temp_Calculate+0x9c>)
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	18e3      	adds	r3, r4, r3
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d202      	bcs.n	80040b4 <LCD_DigitNumber_Temp_Calculate+0x8c>
		data[2] = data[2] | 0x0000080;  //-부호 on, 7번세그먼트에 표시
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	68aa      	ldr	r2, [r5, #8]
 80040b2:	e7f0      	b.n	8004096 <LCD_DigitNumber_Temp_Calculate+0x6e>
	else if(number < -999 && number > -10000)
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <LCD_DigitNumber_Temp_Calculate+0xa0>)
 80040b6:	18e4      	adds	r4, r4, r3
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <LCD_DigitNumber_Temp_Calculate+0xa4>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d8ed      	bhi.n	800409a <LCD_DigitNumber_Temp_Calculate+0x72>
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
 80040be:	2304      	movs	r3, #4
 80040c0:	68aa      	ldr	r2, [r5, #8]
 80040c2:	e7e8      	b.n	8004096 <LCD_DigitNumber_Temp_Calculate+0x6e>
 80040c4:	000003e7 	.word	0x000003e7
 80040c8:	0000270f 	.word	0x0000270f
 80040cc:	00002327 	.word	0x00002327

080040d0 <LCD_Display_Temp>:
{
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 80040d4:	4e21      	ldr	r6, [pc, #132]	@ (800415c <LCD_Display_Temp+0x8c>)
{
 80040d6:	1c05      	adds	r5, r0, #0
	HAL_LCD_Clear(&hlcd);
 80040d8:	0030      	movs	r0, r6
{
 80040da:	0017      	movs	r7, r2
	HAL_LCD_Clear(&hlcd);
 80040dc:	f00b fbf5 	bl	800f8ca <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 80040e0:	2204      	movs	r2, #4
 80040e2:	2100      	movs	r1, #0
 80040e4:	0020      	movs	r0, r4
 80040e6:	f016 fa05 	bl	801a4f4 <memset>
    if(Packet_temp_unit == 0x01) // F, C unit
 80040ea:	2f01      	cmp	r7, #1
 80040ec:	d10b      	bne.n	8004106 <LCD_Display_Temp+0x36>
    	Temp = (Temp * 9.0f / 5.0f) + 32.0f;
 80040ee:	491c      	ldr	r1, [pc, #112]	@ (8004160 <LCD_Display_Temp+0x90>)
 80040f0:	1c28      	adds	r0, r5, #0
 80040f2:	f7fc ff27 	bl	8000f44 <__aeabi_fmul>
 80040f6:	491b      	ldr	r1, [pc, #108]	@ (8004164 <LCD_Display_Temp+0x94>)
 80040f8:	f7fc fd56 	bl	8000ba8 <__aeabi_fdiv>
 80040fc:	2184      	movs	r1, #132	@ 0x84
 80040fe:	05c9      	lsls	r1, r1, #23
 8004100:	f7fc fb60 	bl	80007c4 <__aeabi_fadd>
 8004104:	1c05      	adds	r5, r0, #0
    temp_int = (int32_t)(Temp * 10.0f);
 8004106:	4918      	ldr	r1, [pc, #96]	@ (8004168 <LCD_Display_Temp+0x98>)
 8004108:	1c28      	adds	r0, r5, #0
 800410a:	f7fc ff1b 	bl	8000f44 <__aeabi_fmul>
 800410e:	f7fd faed 	bl	80016ec <__aeabi_f2iz>
    LCD_DigitNumber_Temp_Calculate(temp_int, data);
 8004112:	0021      	movs	r1, r4
 8004114:	f7ff ff88 	bl	8004028 <LCD_DigitNumber_Temp_Calculate>
        data[0] = data[0] | 0x0000004;   // F on
 8004118:	2304      	movs	r3, #4
 800411a:	6822      	ldr	r2, [r4, #0]
    if(Packet_temp_unit == 0x01)
 800411c:	2f01      	cmp	r7, #1
 800411e:	d001      	beq.n	8004124 <LCD_Display_Temp+0x54>
        data[0] = data[0] | 0x0000200;   // C on
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	431a      	orrs	r2, r3
    data[0] = data[0] | 0x0000001; // 소수점표시
 8004126:	2301      	movs	r3, #1
 8004128:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800412a:	0030      	movs	r0, r6
    data[0] = data[0] | 0x0000001; // 소수점표시
 800412c:	6023      	str	r3, [r4, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800412e:	2100      	movs	r1, #0
 8004130:	4a0e      	ldr	r2, [pc, #56]	@ (800416c <LCD_Display_Temp+0x9c>)
 8004132:	f00b fb69 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004136:	0030      	movs	r0, r6
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	2102      	movs	r1, #2
 800413c:	4a0b      	ldr	r2, [pc, #44]	@ (800416c <LCD_Display_Temp+0x9c>)
 800413e:	f00b fb63 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004142:	0030      	movs	r0, r6
 8004144:	68a3      	ldr	r3, [r4, #8]
 8004146:	2104      	movs	r1, #4
 8004148:	4a08      	ldr	r2, [pc, #32]	@ (800416c <LCD_Display_Temp+0x9c>)
 800414a:	f00b fb5d 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800414e:	0030      	movs	r0, r6
 8004150:	2106      	movs	r1, #6
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	4a05      	ldr	r2, [pc, #20]	@ (800416c <LCD_Display_Temp+0x9c>)
 8004156:	f00b fb57 	bl	800f808 <HAL_LCD_Write>
}
 800415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415c:	20000a80 	.word	0x20000a80
 8004160:	41100000 	.word	0x41100000
 8004164:	40a00000 	.word	0x40a00000
 8004168:	41200000 	.word	0x41200000
 800416c:	f7fffffe 	.word	0xf7fffffe

08004170 <LCD_Display_Temp_MinMax>:
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 8004174:	4d22      	ldr	r5, [pc, #136]	@ (8004200 <LCD_Display_Temp_MinMax+0x90>)
{
 8004176:	1c07      	adds	r7, r0, #0
	HAL_LCD_Clear(&hlcd);
 8004178:	0028      	movs	r0, r5
{
 800417a:	0016      	movs	r6, r2
	HAL_LCD_Clear(&hlcd);
 800417c:	f00b fba5 	bl	800f8ca <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 8004180:	2100      	movs	r1, #0
 8004182:	2204      	movs	r2, #4
 8004184:	0020      	movs	r0, r4
 8004186:	f016 f9b5 	bl	801a4f4 <memset>
    float temp_float = Temp / 10.0f;
 800418a:	491e      	ldr	r1, [pc, #120]	@ (8004204 <LCD_Display_Temp_MinMax+0x94>)
 800418c:	1c38      	adds	r0, r7, #0
 800418e:	f7fc fd0b 	bl	8000ba8 <__aeabi_fdiv>
    if(Packet_temp_unit == 0x01) // F, C unit
 8004192:	2e01      	cmp	r6, #1
 8004194:	d109      	bne.n	80041aa <LCD_Display_Temp_MinMax+0x3a>
    	temp_float = (temp_float * 9.0f / 5.0f) + 32.0f;
 8004196:	491c      	ldr	r1, [pc, #112]	@ (8004208 <LCD_Display_Temp_MinMax+0x98>)
 8004198:	f7fc fed4 	bl	8000f44 <__aeabi_fmul>
 800419c:	491b      	ldr	r1, [pc, #108]	@ (800420c <LCD_Display_Temp_MinMax+0x9c>)
 800419e:	f7fc fd03 	bl	8000ba8 <__aeabi_fdiv>
 80041a2:	2184      	movs	r1, #132	@ 0x84
 80041a4:	05c9      	lsls	r1, r1, #23
 80041a6:	f7fc fb0d 	bl	80007c4 <__aeabi_fadd>
    temp_int = (int32_t)(temp_float * 10.0f);
 80041aa:	4916      	ldr	r1, [pc, #88]	@ (8004204 <LCD_Display_Temp_MinMax+0x94>)
 80041ac:	f7fc feca 	bl	8000f44 <__aeabi_fmul>
 80041b0:	f7fd fa9c 	bl	80016ec <__aeabi_f2iz>
    LCD_DigitNumber_Temp_Calculate(temp_int, data);
 80041b4:	0021      	movs	r1, r4
 80041b6:	f7ff ff37 	bl	8004028 <LCD_DigitNumber_Temp_Calculate>
        data[0] = data[0] | 0x0000004;   // F on
 80041ba:	2304      	movs	r3, #4
 80041bc:	6822      	ldr	r2, [r4, #0]
    if(Packet_temp_unit == 0x01)
 80041be:	2e01      	cmp	r6, #1
 80041c0:	d001      	beq.n	80041c6 <LCD_Display_Temp_MinMax+0x56>
        data[0] = data[0] | 0x0000200;   // C on
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	431a      	orrs	r2, r3
    data[0] = data[0] | 0x0000001; // 소수점표시
 80041c8:	2301      	movs	r3, #1
 80041ca:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80041cc:	0028      	movs	r0, r5
    data[0] = data[0] | 0x0000001; // 소수점표시
 80041ce:	6023      	str	r3, [r4, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80041d0:	2100      	movs	r1, #0
 80041d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041d4:	f00b fb18 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80041d8:	0028      	movs	r0, r5
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	2102      	movs	r1, #2
 80041de:	4a0c      	ldr	r2, [pc, #48]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041e0:	f00b fb12 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80041e4:	0028      	movs	r0, r5
 80041e6:	68a3      	ldr	r3, [r4, #8]
 80041e8:	2104      	movs	r1, #4
 80041ea:	4a09      	ldr	r2, [pc, #36]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041ec:	f00b fb0c 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80041f0:	0028      	movs	r0, r5
 80041f2:	2106      	movs	r1, #6
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	4a06      	ldr	r2, [pc, #24]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041f8:	f00b fb06 	bl	800f808 <HAL_LCD_Write>
}
 80041fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	20000a80 	.word	0x20000a80
 8004204:	41200000 	.word	0x41200000
 8004208:	41100000 	.word	0x41100000
 800420c:	40a00000 	.word	0x40a00000
 8004210:	f7fffffe 	.word	0xf7fffffe

08004214 <LCD_Display_Year_Hour_Number>:
    ones      = number % 10;
    LCD_Display_Day_Sec_Number(tens, ones, data);
}

void LCD_Display_Year_Hour_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	0005      	movs	r5, r0
 800421a:	000f      	movs	r7, r1
 800421c:	0016      	movs	r6, r2
	uint32_t Year_Hour_data_ten[4] = {0};
 800421e:	2100      	movs	r1, #0
 8004220:	2210      	movs	r2, #16
 8004222:	4668      	mov	r0, sp
	uint32_t Year_Hour_data_one[4] = {0};
 8004224:	ac04      	add	r4, sp, #16
	uint32_t Year_Hour_data_ten[4] = {0};
 8004226:	f016 f965 	bl	801a4f4 <memset>
	uint32_t Year_Hour_data_one[4] = {0};
 800422a:	2210      	movs	r2, #16
 800422c:	2100      	movs	r1, #0
 800422e:	0020      	movs	r0, r4
 8004230:	f016 f960 	bl	801a4f4 <memset>

    switch (tens)
 8004234:	2d09      	cmp	r5, #9
 8004236:	d844      	bhi.n	80042c2 <LCD_Display_Year_Hour_Number+0xae>
 8004238:	0028      	movs	r0, r5
 800423a:	4d5e      	ldr	r5, [pc, #376]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 800423c:	f7fb ff76 	bl	800012c <__gnu_thumb1_case_uqi>
 8004240:	210a3305 	.word	0x210a3305
 8004244:	605b4b2f 	.word	0x605b4b2f
 8004248:	6e6a      	.short	0x6e6a
    {
    	case 0:
        	Year_Hour_data_ten[0] = 0x0000000;
        	Year_Hour_data_ten[1] = 0x0000008;
 800424a:	2308      	movs	r3, #8
 800424c:	9301      	str	r3, [sp, #4]

		case 8:
			Year_Hour_data_ten[0] = 0x0000000;
			Year_Hour_data_ten[1] = 0x0000008;
			Year_Hour_data_ten[2] = 0x0000008;
			Year_Hour_data_ten[3] = 0x0000008;
 800424e:	9303      	str	r3, [sp, #12]
		case 9:
			Year_Hour_data_ten[0] = 0x0000000;
			Year_Hour_data_ten[1] = 0x0000008;
			Year_Hour_data_ten[2] = 0x0000008;
			Year_Hour_data_ten[3] = 0x0000000;
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004250:	4d58      	ldr	r5, [pc, #352]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 8004252:	e018      	b.n	8004286 <LCD_Display_Year_Hour_Number+0x72>
			Year_Hour_data_ten[2] = 0x0000008;
 8004254:	2308      	movs	r3, #8
 8004256:	9302      	str	r3, [sp, #8]
			Year_Hour_data_ten[3] = 0x0000008;
 8004258:	9303      	str	r3, [sp, #12]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	4d55      	ldr	r5, [pc, #340]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	001a      	movs	r2, r3
 8004262:	2101      	movs	r1, #1
 8004264:	0028      	movs	r0, r5
 8004266:	f00b facf 	bl	800f808 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	015b      	lsls	r3, r3, #5
 800426e:	001a      	movs	r2, r3
 8004270:	2103      	movs	r1, #3
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 8004272:	0028      	movs	r0, r5
 8004274:	f00b fac8 	bl	800f808 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	015b      	lsls	r3, r3, #5
 800427c:	001a      	movs	r2, r3
 800427e:	2107      	movs	r1, #7
 8004280:	e01c      	b.n	80042bc <LCD_Display_Year_Hour_Number+0xa8>
			Year_Hour_data_ten[2] = 0x0000008;
 8004282:	2308      	movs	r3, #8
 8004284:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	015b      	lsls	r3, r3, #5
 800428a:	001a      	movs	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	0028      	movs	r0, r5
 8004290:	f00b faba 	bl	800f808 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	015b      	lsls	r3, r3, #5
 8004298:	001a      	movs	r2, r3
 800429a:	2103      	movs	r1, #3
 800429c:	e023      	b.n	80042e6 <LCD_Display_Year_Hour_Number+0xd2>
			Year_Hour_data_ten[1] = 0x0000008;
 800429e:	2308      	movs	r3, #8
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042a0:	4d44      	ldr	r5, [pc, #272]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
			Year_Hour_data_ten[1] = 0x0000008;
 80042a2:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042a4:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	001a      	movs	r2, r3
 80042ac:	2103      	movs	r1, #3
 80042ae:	0028      	movs	r0, r5
 80042b0:	f00b faaa 	bl	800f808 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	001a      	movs	r2, r3
 80042ba:	2105      	movs	r1, #5
        	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 80042bc:	0028      	movs	r0, r5
 80042be:	f00b faa3 	bl	800f808 <HAL_LCD_Write>
			break;
    }
    switch (ones)
 80042c2:	2f09      	cmp	r7, #9
 80042c4:	d839      	bhi.n	800433a <LCD_Display_Year_Hour_Number+0x126>
 80042c6:	0038      	movs	r0, r7
 80042c8:	f7fb ff30 	bl	800012c <__gnu_thumb1_case_uqi>
 80042cc:	4b42332c 	.word	0x4b42332c
 80042d0:	61595351 	.word	0x61595351
 80042d4:	6d67      	.short	0x6d67
			Year_Hour_data_ten[1] = 0x0000008;
 80042d6:	2308      	movs	r3, #8
 80042d8:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042da:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	015b      	lsls	r3, r3, #5
 80042e0:	001a      	movs	r2, r3
 80042e2:	2101      	movs	r1, #1
 80042e4:	4d33      	ldr	r5, [pc, #204]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042e6:	0028      	movs	r0, r5
 80042e8:	f00b fa8e 	bl	800f808 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	001a      	movs	r2, r3
 80042f2:	2105      	movs	r1, #5
 80042f4:	e7bd      	b.n	8004272 <LCD_Display_Year_Hour_Number+0x5e>
			Year_Hour_data_ten[1] = 0x0000008;
 80042f6:	2308      	movs	r3, #8
 80042f8:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042fa:	9302      	str	r3, [sp, #8]
			Year_Hour_data_ten[3] = 0x0000008;
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	e7ed      	b.n	80042dc <LCD_Display_Year_Hour_Number+0xc8>
			Year_Hour_data_ten[1] = 0x0000008;
 8004300:	2308      	movs	r3, #8
 8004302:	9301      	str	r3, [sp, #4]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	001a      	movs	r2, r3
 800430a:	2101      	movs	r1, #1
 800430c:	0028      	movs	r0, r5
 800430e:	f00b fa7b 	bl	800f808 <HAL_LCD_Write>
 8004312:	e7c8      	b.n	80042a6 <LCD_Display_Year_Hour_Number+0x92>
			Year_Hour_data_ten[1] = 0x0000008;
 8004314:	2308      	movs	r3, #8
 8004316:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 8004318:	9302      	str	r3, [sp, #8]
 800431a:	e798      	b.n	800424e <LCD_Display_Year_Hour_Number+0x3a>
			Year_Hour_data_ten[1] = 0x0000008;
 800431c:	2308      	movs	r3, #8
 800431e:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 8004320:	9302      	str	r3, [sp, #8]
 8004322:	e795      	b.n	8004250 <LCD_Display_Year_Hour_Number+0x3c>
    {
    	case 0:
        	Year_Hour_data_one[0] = 0x0020000;
 8004324:	2280      	movs	r2, #128	@ 0x80
        	Year_Hour_data_one[1] = 0x0020004;
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
        	Year_Hour_data_one[0] = 0x0020000;
 8004328:	0292      	lsls	r2, r2, #10
 800432a:	9204      	str	r2, [sp, #16]
        	Year_Hour_data_one[1] = 0x0020004;
 800432c:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Year_Hour_data_one[0] = 0x0020000;
			Year_Hour_data_one[1] = 0x0020004;
			Year_Hour_data_one[2] = 0x0020004;
 800432e:	60a2      	str	r2, [r4, #8]
 8004330:	e015      	b.n	800435e <LCD_Display_Year_Hour_Number+0x14a>
    		Year_Hour_data_one[1] = 0x0020000;
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	029b      	lsls	r3, r3, #10
			Year_Hour_data_one[1] = 0x0020004;
 8004336:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 8004338:	60a3      	str	r3, [r4, #8]
{
 800433a:	2300      	movs	r3, #0
			Year_Hour_data_one[3] = 0x0020000;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Year_Hour_data_ten[i] | Year_Hour_data_one[i];
 800433c:	466a      	mov	r2, sp
 800433e:	58e1      	ldr	r1, [r4, r3]
 8004340:	58d2      	ldr	r2, [r2, r3]
 8004342:	430a      	orrs	r2, r1
 8004344:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 8004346:	3304      	adds	r3, #4
 8004348:	2b10      	cmp	r3, #16
 800434a:	d1f7      	bne.n	800433c <LCD_Display_Year_Hour_Number+0x128>
    }
}
 800434c:	b009      	add	sp, #36	@ 0x24
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Year_Hour_data_one[0] = 0x0020000;
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020000;
 8004356:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0000004;
 8004358:	2304      	movs	r3, #4
 800435a:	60a3      	str	r3, [r4, #8]
			Year_Hour_data_one[3] = 0x0020004;
 800435c:	4b16      	ldr	r3, [pc, #88]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[3] = 0x0020000;
 800435e:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 8004360:	e7eb      	b.n	800433a <LCD_Display_Year_Hour_Number+0x126>
			Year_Hour_data_one[0] = 0x0020000;
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020000;
 8004368:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 800436c:	e7df      	b.n	800432e <LCD_Display_Year_Hour_Number+0x11a>
			Year_Hour_data_one[1] = 0x0020004;
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 8004370:	e7e1      	b.n	8004336 <LCD_Display_Year_Hour_Number+0x122>
			Year_Hour_data_one[0] = 0x0020000;
 8004372:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0000004;
 8004374:	2204      	movs	r2, #4
			Year_Hour_data_one[0] = 0x0020000;
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0000004;
 800437a:	6062      	str	r2, [r4, #4]
 800437c:	e7f5      	b.n	800436a <LCD_Display_Year_Hour_Number+0x156>
			Year_Hour_data_one[0] = 0x0020000;
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0000004;
 8004384:	2304      	movs	r3, #4
 8004386:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[2] = 0x0020004;
 800438a:	60a3      	str	r3, [r4, #8]
			Year_Hour_data_one[3] = 0x0020004;
 800438c:	e7e7      	b.n	800435e <LCD_Display_Year_Hour_Number+0x14a>
			Year_Hour_data_one[0] = 0x0020000;
 800438e:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0020004;
 8004390:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[0] = 0x0020000;
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 8004396:	6062      	str	r2, [r4, #4]
			Year_Hour_data_one[2] = 0x0020000;
 8004398:	e7ce      	b.n	8004338 <LCD_Display_Year_Hour_Number+0x124>
			Year_Hour_data_one[0] = 0x0020000;
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	e7f1      	b.n	800438a <LCD_Display_Year_Hour_Number+0x176>
			Year_Hour_data_one[0] = 0x0020000;
 80043a6:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0020004;
 80043a8:	4a03      	ldr	r2, [pc, #12]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[0] = 0x0020000;
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 80043ae:	6062      	str	r2, [r4, #4]
 80043b0:	e7bd      	b.n	800432e <LCD_Display_Year_Hour_Number+0x11a>
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	20000a80 	.word	0x20000a80
 80043b8:	00020004 	.word	0x00020004

080043bc <LCD_DigitNumber_Year_Hour_Calculate>:
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	000e      	movs	r6, r1
    ones      = number % 10;
 80043c0:	210a      	movs	r1, #10
{
 80043c2:	0004      	movs	r4, r0
    ones      = number % 10;
 80043c4:	f7fb ff56 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 80043c8:	0020      	movs	r0, r4
    LCD_Display_Year_Hour_Number(tens, ones, data);
 80043ca:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 80043cc:	210a      	movs	r1, #10
 80043ce:	f7fb fecb 	bl	8000168 <__udivsi3>
    LCD_Display_Year_Hour_Number(tens, ones, data);
 80043d2:	0032      	movs	r2, r6
 80043d4:	0029      	movs	r1, r5
 80043d6:	b2c0      	uxtb	r0, r0
 80043d8:	f7ff ff1c 	bl	8004214 <LCD_Display_Year_Hour_Number>
}
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e0 <LCD_Display_Month_Min_Number>:

void LCD_Display_Month_Min_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	0007      	movs	r7, r0
 80043e6:	000d      	movs	r5, r1
 80043e8:	0016      	movs	r6, r2
	uint32_t Month_Min_data_ten[4] = {0};
 80043ea:	2100      	movs	r1, #0
 80043ec:	2210      	movs	r2, #16
 80043ee:	4668      	mov	r0, sp
	uint32_t Month_Min_data_one[4] = {0};
 80043f0:	ac04      	add	r4, sp, #16
	uint32_t Month_Min_data_ten[4] = {0};
 80043f2:	f016 f87f 	bl	801a4f4 <memset>
	uint32_t Month_Min_data_one[4] = {0};
 80043f6:	2210      	movs	r2, #16
 80043f8:	2100      	movs	r1, #0
 80043fa:	0020      	movs	r0, r4
 80043fc:	f016 f87a 	bl	801a4f4 <memset>

    switch (tens)
 8004400:	2f09      	cmp	r7, #9
 8004402:	d813      	bhi.n	800442c <LCD_Display_Month_Min_Number+0x4c>
 8004404:	0038      	movs	r0, r7
 8004406:	f7fb fe91 	bl	800012c <__gnu_thumb1_case_uqi>
 800440a:	0d05      	.short	0x0d05
 800440c:	2e2c251b 	.word	0x2e2c251b
 8004410:	4b453e35 	.word	0x4b453e35
    {
    	case 0:
        	Month_Min_data_ten[0] = 0x0000100;
 8004414:	2280      	movs	r2, #128	@ 0x80
        	Month_Min_data_ten[1] = 0x0000180;
 8004416:	23c0      	movs	r3, #192	@ 0xc0
        	Month_Min_data_ten[0] = 0x0000100;
 8004418:	0052      	lsls	r2, r2, #1
        	Month_Min_data_ten[1] = 0x0000180;
 800441a:	005b      	lsls	r3, r3, #1
        	Month_Min_data_ten[0] = 0x0000100;
 800441c:	9200      	str	r2, [sp, #0]
        	Month_Min_data_ten[1] = 0x0000180;
 800441e:	9301      	str	r3, [sp, #4]
			break;

		case 9:
			Month_Min_data_ten[0] = 0x0000100;
			Month_Min_data_ten[1] = 0x0000180;
			Month_Min_data_ten[2] = 0x0000180;
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	e015      	b.n	8004450 <LCD_Display_Month_Min_Number+0x70>
    		Month_Min_data_ten[1] = 0x0000100;
 8004424:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000100;
 800442a:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000100;
			break;
    }
    switch (ones)
 800442c:	2d09      	cmp	r5, #9
 800442e:	d849      	bhi.n	80044c4 <LCD_Display_Month_Min_Number+0xe4>
 8004430:	0028      	movs	r0, r5
 8004432:	f7fb fe7b 	bl	800012c <__gnu_thumb1_case_uqi>
 8004436:	433c      	.short	0x433c
 8004438:	64625c52 	.word	0x64625c52
 800443c:	807a746b 	.word	0x807a746b
			Month_Min_data_ten[0] = 0x0000100;
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000100;
 8004446:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000080;
 8004448:	3b80      	subs	r3, #128	@ 0x80
 800444a:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000180;
 800444c:	3301      	adds	r3, #1
 800444e:	33ff      	adds	r3, #255	@ 0xff
			Month_Min_data_ten[3] = 0x0000100;
 8004450:	9303      	str	r3, [sp, #12]
			break;
 8004452:	e7eb      	b.n	800442c <LCD_Display_Month_Min_Number+0x4c>
			Month_Min_data_ten[0] = 0x0000100;
 8004454:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[2] = 0x0000180;
 8004456:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000100;
 800445c:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000180;
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	e7de      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
			Month_Min_data_ten[1] = 0x0000180;
 8004462:	23c0      	movs	r3, #192	@ 0xc0
 8004464:	e7df      	b.n	8004426 <LCD_Display_Month_Min_Number+0x46>
			Month_Min_data_ten[0] = 0x0000100;
 8004466:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000080;
 8004468:	2280      	movs	r2, #128	@ 0x80
			Month_Min_data_ten[0] = 0x0000100;
 800446a:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000080;
 800446c:	9201      	str	r2, [sp, #4]
			Month_Min_data_ten[0] = 0x0000100;
 800446e:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[2] = 0x0000180;
 8004470:	18d2      	adds	r2, r2, r3
 8004472:	e7d5      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
			Month_Min_data_ten[0] = 0x0000100;
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000080;
 800447a:	3b80      	subs	r3, #128	@ 0x80
 800447c:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000180;
 800447e:	3301      	adds	r3, #1
 8004480:	33ff      	adds	r3, #255	@ 0xff
			Month_Min_data_ten[2] = 0x0000180;
 8004482:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000180;
 8004484:	e7e4      	b.n	8004450 <LCD_Display_Month_Min_Number+0x70>
			Month_Min_data_ten[0] = 0x0000100;
 8004486:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 8004488:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 800448a:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000180;
 800448c:	0052      	lsls	r2, r2, #1
			Month_Min_data_ten[0] = 0x0000100;
 800448e:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 8004490:	9201      	str	r2, [sp, #4]
 8004492:	e7ca      	b.n	800442a <LCD_Display_Month_Min_Number+0x4a>
			Month_Min_data_ten[0] = 0x0000100;
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 800449a:	3380      	adds	r3, #128	@ 0x80
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	e7f0      	b.n	8004482 <LCD_Display_Month_Min_Number+0xa2>
			Month_Min_data_ten[0] = 0x0000100;
 80044a0:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 80044a2:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 80044a4:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000180;
 80044a6:	0052      	lsls	r2, r2, #1
			Month_Min_data_ten[0] = 0x0000100;
 80044a8:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 80044aa:	9201      	str	r2, [sp, #4]
 80044ac:	e7b8      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
    {
    	case 0:
        	Month_Min_data_one[0] = 0x0200000;
 80044ae:	2280      	movs	r2, #128	@ 0x80
        	Month_Min_data_one[1] = 0x0200200;
 80044b0:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
        	Month_Min_data_one[0] = 0x0200000;
 80044b2:	0392      	lsls	r2, r2, #14
 80044b4:	9204      	str	r2, [sp, #16]
        	Month_Min_data_one[1] = 0x0200200;
 80044b6:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Month_Min_data_one[0] = 0x0200000;
			Month_Min_data_one[1] = 0x0200200;
			Month_Min_data_one[2] = 0x0200200;
 80044b8:	60a2      	str	r2, [r4, #8]
 80044ba:	e016      	b.n	80044ea <LCD_Display_Month_Min_Number+0x10a>
    		Month_Min_data_one[1] = 0x0200000;
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	039b      	lsls	r3, r3, #14
			Month_Min_data_one[1] = 0x0200200;
 80044c0:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 80044c2:	60a3      	str	r3, [r4, #8]
{
 80044c4:	2300      	movs	r3, #0
			Month_Min_data_one[3] = 0x0200000;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Month_Min_data_ten[i] | Month_Min_data_one[i];
 80044c6:	466a      	mov	r2, sp
 80044c8:	58e1      	ldr	r1, [r4, r3]
 80044ca:	58d2      	ldr	r2, [r2, r3]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 80044d0:	3304      	adds	r3, #4
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d1f7      	bne.n	80044c6 <LCD_Display_Month_Min_Number+0xe6>
    }
}
 80044d6:	b009      	add	sp, #36	@ 0x24
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Month_Min_data_one[0] = 0x0200000;
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	039b      	lsls	r3, r3, #14
 80044de:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200000;
 80044e0:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0000200;
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	60a3      	str	r3, [r4, #8]
			Month_Min_data_one[3] = 0x0200200;
 80044e8:	4b16      	ldr	r3, [pc, #88]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[3] = 0x0200000;
 80044ea:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 80044ec:	e7ea      	b.n	80044c4 <LCD_Display_Month_Min_Number+0xe4>
			Month_Min_data_one[0] = 0x0200000;
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	039b      	lsls	r3, r3, #14
 80044f2:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200000;
 80044f4:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 80044f6:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 80044f8:	e7de      	b.n	80044b8 <LCD_Display_Month_Min_Number+0xd8>
			Month_Min_data_one[1] = 0x0200200;
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 80044fc:	e7e0      	b.n	80044c0 <LCD_Display_Month_Min_Number+0xe0>
			Month_Min_data_one[0] = 0x0200000;
 80044fe:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0000200;
 8004500:	2280      	movs	r2, #128	@ 0x80
			Month_Min_data_one[0] = 0x0200000;
 8004502:	039b      	lsls	r3, r3, #14
			Month_Min_data_one[1] = 0x0000200;
 8004504:	0092      	lsls	r2, r2, #2
			Month_Min_data_one[0] = 0x0200000;
 8004506:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0000200;
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	e7f4      	b.n	80044f6 <LCD_Display_Month_Min_Number+0x116>
			Month_Min_data_one[0] = 0x0200000;
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	039b      	lsls	r3, r3, #14
 8004510:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0000200;
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[2] = 0x0200200;
 800451a:	60a3      	str	r3, [r4, #8]
			Month_Min_data_one[3] = 0x0200200;
 800451c:	e7e5      	b.n	80044ea <LCD_Display_Month_Min_Number+0x10a>
			Month_Min_data_one[0] = 0x0200000;
 800451e:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0200200;
 8004520:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[0] = 0x0200000;
 8004522:	039b      	lsls	r3, r3, #14
 8004524:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 8004526:	6062      	str	r2, [r4, #4]
			Month_Min_data_one[2] = 0x0200000;
 8004528:	e7cb      	b.n	80044c2 <LCD_Display_Month_Min_Number+0xe2>
			Month_Min_data_one[0] = 0x0200000;
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	039b      	lsls	r3, r3, #14
 800452e:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 8004530:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	e7f1      	b.n	800451a <LCD_Display_Month_Min_Number+0x13a>
			Month_Min_data_one[0] = 0x0200000;
 8004536:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0200200;
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[0] = 0x0200000;
 800453a:	039b      	lsls	r3, r3, #14
 800453c:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 800453e:	6062      	str	r2, [r4, #4]
 8004540:	e7ba      	b.n	80044b8 <LCD_Display_Month_Min_Number+0xd8>
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	00200200 	.word	0x00200200

08004548 <LCD_DigitNumber_Month_Min_Calculate>:
{
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	000e      	movs	r6, r1
    ones      = number % 10;
 800454c:	210a      	movs	r1, #10
{
 800454e:	0004      	movs	r4, r0
    ones      = number % 10;
 8004550:	f7fb fe90 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 8004554:	0020      	movs	r0, r4
    LCD_Display_Month_Min_Number(tens, ones, data);
 8004556:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 8004558:	210a      	movs	r1, #10
 800455a:	f7fb fe05 	bl	8000168 <__udivsi3>
    LCD_Display_Month_Min_Number(tens, ones, data);
 800455e:	0032      	movs	r2, r6
 8004560:	0029      	movs	r1, r5
 8004562:	b2c0      	uxtb	r0, r0
 8004564:	f7ff ff3c 	bl	80043e0 <LCD_Display_Month_Min_Number>
}
 8004568:	bd70      	pop	{r4, r5, r6, pc}

0800456a <LCD_Display_Day_Sec_Number>:

void LCD_Display_Day_Sec_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 800456a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456c:	b089      	sub	sp, #36	@ 0x24
 800456e:	0007      	movs	r7, r0
 8004570:	000d      	movs	r5, r1
 8004572:	0016      	movs	r6, r2
	uint32_t Day_Sec_data_ten[4] = {0};
 8004574:	2100      	movs	r1, #0
 8004576:	2210      	movs	r2, #16
 8004578:	4668      	mov	r0, sp
	uint32_t Day_Sec_data_one[4] = {0};
 800457a:	ac04      	add	r4, sp, #16
	uint32_t Day_Sec_data_ten[4] = {0};
 800457c:	f015 ffba 	bl	801a4f4 <memset>
	uint32_t Day_Sec_data_one[4] = {0};
 8004580:	2210      	movs	r2, #16
 8004582:	2100      	movs	r1, #0
 8004584:	0020      	movs	r0, r4
 8004586:	f015 ffb5 	bl	801a4f4 <memset>

    switch (tens)
 800458a:	2f09      	cmp	r7, #9
 800458c:	d813      	bhi.n	80045b6 <LCD_Display_Day_Sec_Number+0x4c>
 800458e:	0038      	movs	r0, r7
 8004590:	f7fb fdcc 	bl	800012c <__gnu_thumb1_case_uqi>
 8004594:	261b0d05 	.word	0x261b0d05
 8004598:	40362f2d 	.word	0x40362f2d
 800459c:	4e47      	.short	0x4e47
    {
    	case 0:
        	Day_Sec_data_ten[0] = 0x0080000;
 800459e:	2280      	movs	r2, #128	@ 0x80
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a0:	2390      	movs	r3, #144	@ 0x90
        	Day_Sec_data_ten[0] = 0x0080000;
 80045a2:	0312      	lsls	r2, r2, #12
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a4:	031b      	lsls	r3, r3, #12
        	Day_Sec_data_ten[0] = 0x0080000;
 80045a6:	9200      	str	r2, [sp, #0]
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a8:	9301      	str	r3, [sp, #4]
			break;

		case 9:
			Day_Sec_data_ten[0] = 0x0080000;
			Day_Sec_data_ten[1] = 0x0090000;
			Day_Sec_data_ten[2] = 0x0090000;
 80045aa:	9202      	str	r2, [sp, #8]
 80045ac:	e016      	b.n	80045dc <LCD_Display_Day_Sec_Number+0x72>
    		Day_Sec_data_ten[1] = 0x0080000;
 80045ae:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 80045b0:	031b      	lsls	r3, r3, #12
 80045b2:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0080000;
 80045b4:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 80045b6:	2d09      	cmp	r5, #9
 80045b8:	d84a      	bhi.n	8004650 <LCD_Display_Day_Sec_Number+0xe6>
 80045ba:	0028      	movs	r0, r5
 80045bc:	f7fb fdb6 	bl	800012c <__gnu_thumb1_case_uqi>
 80045c0:	5b53453f 	.word	0x5b53453f
 80045c4:	6e676260 	.word	0x6e676260
 80045c8:	7873      	.short	0x7873
			Day_Sec_data_ten[0] = 0x0080000;
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	031b      	lsls	r3, r3, #12
 80045ce:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0080000;
 80045d0:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0010000;
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0090000;
 80045d8:	2390      	movs	r3, #144	@ 0x90
 80045da:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[3] = 0x0080000;
 80045dc:	9303      	str	r3, [sp, #12]
			break;
 80045de:	e7ea      	b.n	80045b6 <LCD_Display_Day_Sec_Number+0x4c>
			Day_Sec_data_ten[0] = 0x0080000;
 80045e0:	2380      	movs	r3, #128	@ 0x80
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0080000;
 80045e6:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0090000;
 80045e8:	2290      	movs	r2, #144	@ 0x90
 80045ea:	0312      	lsls	r2, r2, #12
 80045ec:	e7dd      	b.n	80045aa <LCD_Display_Day_Sec_Number+0x40>
			Day_Sec_data_ten[1] = 0x0090000;
 80045ee:	2390      	movs	r3, #144	@ 0x90
 80045f0:	e7de      	b.n	80045b0 <LCD_Display_Day_Sec_Number+0x46>
			Day_Sec_data_ten[0] = 0x0080000;
 80045f2:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0010000;
 80045f4:	2280      	movs	r2, #128	@ 0x80
			Day_Sec_data_ten[0] = 0x0080000;
 80045f6:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0010000;
 80045f8:	0252      	lsls	r2, r2, #9
			Day_Sec_data_ten[0] = 0x0080000;
 80045fa:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0010000;
 80045fc:	9201      	str	r2, [sp, #4]
 80045fe:	e7f3      	b.n	80045e8 <LCD_Display_Day_Sec_Number+0x7e>
			Day_Sec_data_ten[0] = 0x0080000;
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	031b      	lsls	r3, r3, #12
 8004604:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0010000;
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	025b      	lsls	r3, r3, #9
 800460a:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0090000;
 800460c:	2390      	movs	r3, #144	@ 0x90
 800460e:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[2] = 0x0090000;
 8004610:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0090000;
 8004612:	e7e3      	b.n	80045dc <LCD_Display_Day_Sec_Number+0x72>
			Day_Sec_data_ten[0] = 0x0080000;
 8004614:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 8004616:	2290      	movs	r2, #144	@ 0x90
			Day_Sec_data_ten[0] = 0x0080000;
 8004618:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0090000;
 800461a:	0312      	lsls	r2, r2, #12
			Day_Sec_data_ten[0] = 0x0080000;
 800461c:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 800461e:	9201      	str	r2, [sp, #4]
 8004620:	e7c8      	b.n	80045b4 <LCD_Display_Day_Sec_Number+0x4a>
			Day_Sec_data_ten[0] = 0x0080000;
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 8004628:	2390      	movs	r3, #144	@ 0x90
 800462a:	031b      	lsls	r3, r3, #12
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	e7ef      	b.n	8004610 <LCD_Display_Day_Sec_Number+0xa6>
			Day_Sec_data_ten[0] = 0x0080000;
 8004630:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 8004632:	2290      	movs	r2, #144	@ 0x90
			Day_Sec_data_ten[0] = 0x0080000;
 8004634:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0090000;
 8004636:	0312      	lsls	r2, r2, #12
			Day_Sec_data_ten[0] = 0x0080000;
 8004638:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	e7b5      	b.n	80045aa <LCD_Display_Day_Sec_Number+0x40>
    {
    	case 0:
        	Day_Sec_data_one[0] = 0x0000002;
 800463e:	2202      	movs	r2, #2
        	Day_Sec_data_one[1] = 0x0000003;
 8004640:	2303      	movs	r3, #3
        	Day_Sec_data_one[0] = 0x0000002;
 8004642:	9204      	str	r2, [sp, #16]
        	Day_Sec_data_one[1] = 0x0000003;
 8004644:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Day_Sec_data_one[0] = 0x0000002;
			Day_Sec_data_one[1] = 0x0000003;
			Day_Sec_data_one[2] = 0x0000003;
 8004646:	60a2      	str	r2, [r4, #8]
 8004648:	e013      	b.n	8004672 <LCD_Display_Day_Sec_Number+0x108>
    		Day_Sec_data_one[1] = 0x0000002;
 800464a:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 800464c:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800464e:	60a3      	str	r3, [r4, #8]
{
 8004650:	2300      	movs	r3, #0
			Day_Sec_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Day_Sec_data_ten[i] | Day_Sec_data_one[i];
 8004652:	466a      	mov	r2, sp
 8004654:	58e1      	ldr	r1, [r4, r3]
 8004656:	58d2      	ldr	r2, [r2, r3]
 8004658:	430a      	orrs	r2, r1
 800465a:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 800465c:	3304      	adds	r3, #4
 800465e:	2b10      	cmp	r3, #16
 8004660:	d1f7      	bne.n	8004652 <LCD_Display_Day_Sec_Number+0xe8>
    }
}
 8004662:	b009      	add	sp, #36	@ 0x24
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Day_Sec_data_one[0] = 0x0000002;
 8004666:	2302      	movs	r3, #2
 8004668:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000002;
 800466a:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000001;
 800466c:	3b01      	subs	r3, #1
 800466e:	60a3      	str	r3, [r4, #8]
			Day_Sec_data_one[3] = 0x0000003;
 8004670:	3302      	adds	r3, #2
			Day_Sec_data_one[3] = 0x0000002;
 8004672:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 8004674:	e7ec      	b.n	8004650 <LCD_Display_Day_Sec_Number+0xe6>
			Day_Sec_data_one[0] = 0x0000002;
 8004676:	2302      	movs	r3, #2
 8004678:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000002;
 800467a:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800467c:	2203      	movs	r2, #3
 800467e:	e7e2      	b.n	8004646 <LCD_Display_Day_Sec_Number+0xdc>
			Day_Sec_data_one[1] = 0x0000003;
 8004680:	2303      	movs	r3, #3
 8004682:	e7e3      	b.n	800464c <LCD_Display_Day_Sec_Number+0xe2>
			Day_Sec_data_one[0] = 0x0000002;
 8004684:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000001;
 8004686:	2201      	movs	r2, #1
			Day_Sec_data_one[0] = 0x0000002;
 8004688:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000001;
 800468a:	6062      	str	r2, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800468c:	e7f6      	b.n	800467c <LCD_Display_Day_Sec_Number+0x112>
			Day_Sec_data_one[0] = 0x0000002;
 800468e:	2302      	movs	r3, #2
 8004690:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000001;
 8004692:	3b01      	subs	r3, #1
 8004694:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 8004696:	3302      	adds	r3, #2
			Day_Sec_data_one[2] = 0x0000003;
 8004698:	60a3      	str	r3, [r4, #8]
			Day_Sec_data_one[3] = 0x0000003;
 800469a:	e7ea      	b.n	8004672 <LCD_Display_Day_Sec_Number+0x108>
			Day_Sec_data_one[0] = 0x0000002;
 800469c:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 800469e:	2203      	movs	r2, #3
			Day_Sec_data_one[0] = 0x0000002;
 80046a0:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046a2:	6062      	str	r2, [r4, #4]
			Day_Sec_data_one[2] = 0x0000002;
 80046a4:	e7d3      	b.n	800464e <LCD_Display_Day_Sec_Number+0xe4>
			Day_Sec_data_one[0] = 0x0000002;
 80046a6:	2302      	movs	r3, #2
 80046a8:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046aa:	3301      	adds	r3, #1
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	e7f3      	b.n	8004698 <LCD_Display_Day_Sec_Number+0x12e>
			Day_Sec_data_one[0] = 0x0000002;
 80046b0:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 80046b2:	2203      	movs	r2, #3
			Day_Sec_data_one[0] = 0x0000002;
 80046b4:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046b6:	6062      	str	r2, [r4, #4]
 80046b8:	e7c5      	b.n	8004646 <LCD_Display_Day_Sec_Number+0xdc>

080046ba <LCD_DigitNumber_Day_Sec_Calculate>:
{
 80046ba:	b570      	push	{r4, r5, r6, lr}
 80046bc:	000e      	movs	r6, r1
    ones      = number % 10;
 80046be:	210a      	movs	r1, #10
{
 80046c0:	0004      	movs	r4, r0
    ones      = number % 10;
 80046c2:	f7fb fdd7 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 80046c6:	0020      	movs	r0, r4
    LCD_Display_Day_Sec_Number(tens, ones, data);
 80046c8:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 80046ca:	210a      	movs	r1, #10
 80046cc:	f7fb fd4c 	bl	8000168 <__udivsi3>
    LCD_Display_Day_Sec_Number(tens, ones, data);
 80046d0:	0032      	movs	r2, r6
 80046d2:	0029      	movs	r1, r5
 80046d4:	b2c0      	uxtb	r0, r0
 80046d6:	f7ff ff48 	bl	800456a <LCD_Display_Day_Sec_Number>
}
 80046da:	bd70      	pop	{r4, r5, r6, pc}

080046dc <LCD_Display_date>:
{
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_LCD_Clear(&hlcd);
 80046de:	4e40      	ldr	r6, [pc, #256]	@ (80047e0 <LCD_Display_date+0x104>)
{
 80046e0:	b097      	sub	sp, #92	@ 0x5c
 80046e2:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 80046e4:	0030      	movs	r0, r6
 80046e6:	f00b f8f0 	bl	800f8ca <HAL_LCD_Clear>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80046ea:	4d3e      	ldr	r5, [pc, #248]	@ (80047e4 <LCD_Display_date+0x108>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	0028      	movs	r0, r5
 80046f0:	a911      	add	r1, sp, #68	@ 0x44
 80046f2:	f00d fc41 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80046f6:	0028      	movs	r0, r5
    uint8_t month = BCD2BIN(sDate.Month);
 80046f8:	250a      	movs	r5, #10
 80046fa:	270f      	movs	r7, #15
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80046fc:	2201      	movs	r2, #1
 80046fe:	a904      	add	r1, sp, #16
 8004700:	f00d fc6c 	bl	8011fdc <HAL_RTC_GetDate>
    uint8_t year  = BCD2BIN(sDate.Year);
 8004704:	ab04      	add	r3, sp, #16
 8004706:	78db      	ldrb	r3, [r3, #3]
	uint32_t data_year[4] = {0};
 8004708:	2100      	movs	r1, #0
    uint8_t year  = BCD2BIN(sDate.Year);
 800470a:	9301      	str	r3, [sp, #4]
    uint8_t month = BCD2BIN(sDate.Month);
 800470c:	ab04      	add	r3, sp, #16
 800470e:	785a      	ldrb	r2, [r3, #1]
	uint32_t data_year[4] = {0};
 8004710:	a805      	add	r0, sp, #20
    uint8_t month = BCD2BIN(sDate.Month);
 8004712:	0913      	lsrs	r3, r2, #4
 8004714:	436b      	muls	r3, r5
 8004716:	403a      	ands	r2, r7
 8004718:	189b      	adds	r3, r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	9302      	str	r3, [sp, #8]
    uint8_t day   = BCD2BIN(sDate.Date);
 800471e:	ab04      	add	r3, sp, #16
 8004720:	789a      	ldrb	r2, [r3, #2]
 8004722:	0913      	lsrs	r3, r2, #4
 8004724:	436b      	muls	r3, r5
 8004726:	403a      	ands	r2, r7
 8004728:	189b      	adds	r3, r3, r2
 800472a:	b2db      	uxtb	r3, r3
	uint32_t data_year[4] = {0};
 800472c:	2210      	movs	r2, #16
    uint8_t day   = BCD2BIN(sDate.Date);
 800472e:	9303      	str	r3, [sp, #12]
	uint32_t data_year[4] = {0};
 8004730:	f015 fee0 	bl	801a4f4 <memset>
	uint32_t data_month[4] = {0};
 8004734:	2210      	movs	r2, #16
 8004736:	2100      	movs	r1, #0
 8004738:	a809      	add	r0, sp, #36	@ 0x24
 800473a:	f015 fedb 	bl	801a4f4 <memset>
	uint32_t data_day[4] = {0};
 800473e:	2210      	movs	r2, #16
 8004740:	2100      	movs	r1, #0
 8004742:	a80d      	add	r0, sp, #52	@ 0x34
 8004744:	f015 fed6 	bl	801a4f4 <memset>
    uint8_t year  = BCD2BIN(sDate.Year);
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	9801      	ldr	r0, [sp, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	435d      	muls	r5, r3
 8004750:	4038      	ands	r0, r7
 8004752:	1828      	adds	r0, r5, r0
	LCD_DigitNumber_Year_Hour_Calculate(year, data_year);
 8004754:	b2c0      	uxtb	r0, r0
 8004756:	a905      	add	r1, sp, #20
 8004758:	f7ff fe30 	bl	80043bc <LCD_DigitNumber_Year_Hour_Calculate>
	LCD_DigitNumber_Month_Min_Calculate(month, data_month);
 800475c:	9802      	ldr	r0, [sp, #8]
 800475e:	a909      	add	r1, sp, #36	@ 0x24
 8004760:	f7ff fef2 	bl	8004548 <LCD_DigitNumber_Month_Min_Calculate>
	LCD_DigitNumber_Day_Sec_Calculate(day, data_day);
 8004764:	9803      	ldr	r0, [sp, #12]
 8004766:	a90d      	add	r1, sp, #52	@ 0x34
 8004768:	f7ff ffa7 	bl	80046ba <LCD_DigitNumber_Day_Sec_Calculate>
 800476c:	2300      	movs	r3, #0
		data[i] = data_year[i] | data_month[i] | data_day[i];
 800476e:	2014      	movs	r0, #20
 8004770:	a904      	add	r1, sp, #16
 8004772:	1809      	adds	r1, r1, r0
 8004774:	aa05      	add	r2, sp, #20
 8004776:	58c9      	ldr	r1, [r1, r3]
 8004778:	58d2      	ldr	r2, [r2, r3]
 800477a:	3010      	adds	r0, #16
 800477c:	430a      	orrs	r2, r1
 800477e:	a904      	add	r1, sp, #16
 8004780:	1809      	adds	r1, r1, r0
 8004782:	58c9      	ldr	r1, [r1, r3]
 8004784:	430a      	orrs	r2, r1
 8004786:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i<4; i++)
 8004788:	3304      	adds	r3, #4
 800478a:	2b10      	cmp	r3, #16
 800478c:	d1ef      	bne.n	800476e <LCD_Display_date+0x92>
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <LCD_Display_date+0x10c>)
	data[1] = data[1] | 0x100E020;
 8004792:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 8004794:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x100E020;
 8004796:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <LCD_Display_date+0x110>)
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 8004798:	6023      	str	r3, [r4, #0]
	data[1] = data[1] | 0x100E020;
 800479a:	430a      	orrs	r2, r1
 800479c:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300E020;
 800479e:	68a1      	ldr	r1, [r4, #8]
 80047a0:	4a13      	ldr	r2, [pc, #76]	@ (80047f0 <LCD_Display_date+0x114>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80047a2:	0030      	movs	r0, r6
	data[2] = data[2] | 0x300E020;
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x300B060;
 80047a8:	68e1      	ldr	r1, [r4, #12]
 80047aa:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <LCD_Display_date+0x118>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80047b0:	2100      	movs	r1, #0
 80047b2:	4a11      	ldr	r2, [pc, #68]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047b4:	f00b f828 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80047b8:	6863      	ldr	r3, [r4, #4]
 80047ba:	2102      	movs	r1, #2
 80047bc:	0030      	movs	r0, r6
 80047be:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047c0:	f00b f822 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	2104      	movs	r1, #4
 80047c8:	0030      	movs	r0, r6
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047cc:	f00b f81c 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80047d0:	2106      	movs	r1, #6
 80047d2:	0030      	movs	r0, r6
 80047d4:	68e3      	ldr	r3, [r4, #12]
 80047d6:	4a08      	ldr	r2, [pc, #32]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047d8:	f00b f816 	bl	800f808 <HAL_LCD_Write>
}
 80047dc:	b017      	add	sp, #92	@ 0x5c
 80047de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e0:	20000a80 	.word	0x20000a80
 80047e4:	200009f8 	.word	0x200009f8
 80047e8:	000140c0 	.word	0x000140c0
 80047ec:	0100e020 	.word	0x0100e020
 80047f0:	0300e020 	.word	0x0300e020
 80047f4:	0300b060 	.word	0x0300b060
 80047f8:	f7fffffe 	.word	0xf7fffffe

080047fc <LCD_Display_Time>:
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_LCD_Clear(&hlcd);
 80047fe:	4e3f      	ldr	r6, [pc, #252]	@ (80048fc <LCD_Display_Time+0x100>)
{
 8004800:	b097      	sub	sp, #92	@ 0x5c
 8004802:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004804:	0030      	movs	r0, r6
 8004806:	f00b f860 	bl	800f8ca <HAL_LCD_Clear>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800480a:	4d3d      	ldr	r5, [pc, #244]	@ (8004900 <LCD_Display_Time+0x104>)
 800480c:	af11      	add	r7, sp, #68	@ 0x44
 800480e:	0039      	movs	r1, r7
 8004810:	2201      	movs	r2, #1
 8004812:	0028      	movs	r0, r5
 8004814:	f00d fbb0 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8004818:	0028      	movs	r0, r5
    uint8_t minute = BCD2BIN(sTime.Minutes);
 800481a:	250a      	movs	r5, #10
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800481c:	2201      	movs	r2, #1
 800481e:	a904      	add	r1, sp, #16
 8004820:	f00d fbdc 	bl	8011fdc <HAL_RTC_GetDate>
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8004824:	210f      	movs	r1, #15
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8004826:	783b      	ldrb	r3, [r7, #0]
	uint32_t data_hour[4] = {0};
 8004828:	a805      	add	r0, sp, #20
    uint8_t hour   = BCD2BIN(sTime.Hours);
 800482a:	9301      	str	r3, [sp, #4]
    uint8_t minute = BCD2BIN(sTime.Minutes);
 800482c:	787a      	ldrb	r2, [r7, #1]
 800482e:	0913      	lsrs	r3, r2, #4
 8004830:	436b      	muls	r3, r5
 8004832:	400a      	ands	r2, r1
 8004834:	189b      	adds	r3, r3, r2
 8004836:	b2db      	uxtb	r3, r3
 8004838:	9302      	str	r3, [sp, #8]
    uint8_t second = BCD2BIN(sTime.Seconds);
 800483a:	78ba      	ldrb	r2, [r7, #2]
	uint32_t data_sec[4] = {0};
 800483c:	af0d      	add	r7, sp, #52	@ 0x34
    uint8_t second = BCD2BIN(sTime.Seconds);
 800483e:	0913      	lsrs	r3, r2, #4
 8004840:	436b      	muls	r3, r5
 8004842:	400a      	ands	r2, r1
 8004844:	189b      	adds	r3, r3, r2
 8004846:	b2db      	uxtb	r3, r3
	uint32_t data_hour[4] = {0};
 8004848:	2210      	movs	r2, #16
 800484a:	2100      	movs	r1, #0
    uint8_t second = BCD2BIN(sTime.Seconds);
 800484c:	9303      	str	r3, [sp, #12]
	uint32_t data_hour[4] = {0};
 800484e:	f015 fe51 	bl	801a4f4 <memset>
	uint32_t data_min[4] = {0};
 8004852:	2210      	movs	r2, #16
 8004854:	2100      	movs	r1, #0
 8004856:	a809      	add	r0, sp, #36	@ 0x24
 8004858:	f015 fe4c 	bl	801a4f4 <memset>
	uint32_t data_sec[4] = {0};
 800485c:	2210      	movs	r2, #16
 800485e:	2100      	movs	r1, #0
 8004860:	0038      	movs	r0, r7
 8004862:	f015 fe47 	bl	801a4f4 <memset>
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8004866:	210f      	movs	r1, #15
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	9801      	ldr	r0, [sp, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	435d      	muls	r5, r3
 8004870:	4008      	ands	r0, r1
 8004872:	1828      	adds	r0, r5, r0
	LCD_DigitNumber_Year_Hour_Calculate(hour, data_hour);
 8004874:	b2c0      	uxtb	r0, r0
 8004876:	a905      	add	r1, sp, #20
 8004878:	f7ff fda0 	bl	80043bc <LCD_DigitNumber_Year_Hour_Calculate>
	LCD_DigitNumber_Month_Min_Calculate(minute, data_min);
 800487c:	9802      	ldr	r0, [sp, #8]
 800487e:	a909      	add	r1, sp, #36	@ 0x24
 8004880:	f7ff fe62 	bl	8004548 <LCD_DigitNumber_Month_Min_Calculate>
	LCD_DigitNumber_Day_Sec_Calculate(second, data_sec);
 8004884:	0039      	movs	r1, r7
 8004886:	9803      	ldr	r0, [sp, #12]
 8004888:	f7ff ff17 	bl	80046ba <LCD_DigitNumber_Day_Sec_Calculate>
 800488c:	2300      	movs	r3, #0
		data[i] = data_hour[i] | data_min[i] | data_sec[i];
 800488e:	2014      	movs	r0, #20
 8004890:	a904      	add	r1, sp, #16
 8004892:	aa05      	add	r2, sp, #20
 8004894:	1809      	adds	r1, r1, r0
 8004896:	58c9      	ldr	r1, [r1, r3]
 8004898:	58d2      	ldr	r2, [r2, r3]
 800489a:	430a      	orrs	r2, r1
 800489c:	58f9      	ldr	r1, [r7, r3]
 800489e:	430a      	orrs	r2, r1
 80048a0:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i<4; i++)
 80048a2:	3304      	adds	r3, #4
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d1f2      	bne.n	800488e <LCD_Display_Time+0x92>
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <LCD_Display_Time+0x108>)
	data[1] = data[1] | 0x3000020;
 80048ac:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048ae:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x3000020;
 80048b0:	4a15      	ldr	r2, [pc, #84]	@ (8004908 <LCD_Display_Time+0x10c>)
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048b2:	6023      	str	r3, [r4, #0]
	data[1] = data[1] | 0x3000020;
 80048b4:	430a      	orrs	r2, r1
 80048b6:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300A060;
 80048b8:	68a1      	ldr	r1, [r4, #8]
 80048ba:	4a14      	ldr	r2, [pc, #80]	@ (800490c <LCD_Display_Time+0x110>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80048bc:	0030      	movs	r0, r6
	data[2] = data[2] | 0x300A060;
 80048be:	430a      	orrs	r2, r1
 80048c0:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x2000040;
 80048c2:	68e1      	ldr	r1, [r4, #12]
 80048c4:	4a12      	ldr	r2, [pc, #72]	@ (8004910 <LCD_Display_Time+0x114>)
 80048c6:	430a      	orrs	r2, r1
 80048c8:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80048ca:	2100      	movs	r1, #0
 80048cc:	4a11      	ldr	r2, [pc, #68]	@ (8004914 <LCD_Display_Time+0x118>)
 80048ce:	f00a ff9b 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	2102      	movs	r1, #2
 80048d6:	0030      	movs	r0, r6
 80048d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004914 <LCD_Display_Time+0x118>)
 80048da:	f00a ff95 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	2104      	movs	r1, #4
 80048e2:	0030      	movs	r0, r6
 80048e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004914 <LCD_Display_Time+0x118>)
 80048e6:	f00a ff8f 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80048ea:	2106      	movs	r1, #6
 80048ec:	0030      	movs	r0, r6
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <LCD_Display_Time+0x118>)
 80048f2:	f00a ff89 	bl	800f808 <HAL_LCD_Write>
}
 80048f6:	b017      	add	sp, #92	@ 0x5c
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	20000a80 	.word	0x20000a80
 8004900:	200009f8 	.word	0x200009f8
 8004904:	000100c0 	.word	0x000100c0
 8004908:	03000020 	.word	0x03000020
 800490c:	0300a060 	.word	0x0300a060
 8004910:	02000040 	.word	0x02000040
 8004914:	f7fffffe 	.word	0xf7fffffe

08004918 <LCD_Display_Battery>:
////////////////////////////////////////////배터리//////////////////////////////////////////
void LCD_Display_Battery(uint8_t battery_status, uint32_t *data)
{
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	000c      	movs	r4, r1
	if(battery_status == 0)
	{
		data[0] = data[0] | 0x0000800;
 800491c:	6809      	ldr	r1, [r1, #0]
 800491e:	2803      	cmp	r0, #3
 8004920:	d810      	bhi.n	8004944 <LCD_Display_Battery+0x2c>
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	68e2      	ldr	r2, [r4, #12]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	f7fb fc00 	bl	800012c <__gnu_thumb1_case_uqi>
 800492c:	2a260402 	.word	0x2a260402
 8004930:	4319      	orrs	r1, r3
 8004932:	6021      	str	r1, [r4, #0]
		//배터리 3칸 + 배터리박스 on
	}
	else if(battery_status == 1)
	{
		data[0] = data[0] | 0x0000000;
		data[1] = data[1] | 0x0000800;
 8004934:	6861      	ldr	r1, [r4, #4]
 8004936:	4319      	orrs	r1, r3
 8004938:	6061      	str	r1, [r4, #4]
		data[2] = data[2] | 0x0000800;
 800493a:	68a1      	ldr	r1, [r4, #8]
 800493c:	4319      	orrs	r1, r3
 800493e:	60a1      	str	r1, [r4, #8]
	else if(battery_status == 2)
	{
		data[0] = data[0] | 0x0000000;
		data[1] = data[1] | 0x0000800;
		data[2] = data[2] | 0x0000000;
		data[3] = data[3] | 0x0000800;
 8004940:	431a      	orrs	r2, r3
 8004942:	60e2      	str	r2, [r4, #12]
		data[1] = data[1] | 0x0000000;
		data[2] = data[2] | 0x0000000;
		data[3] = data[3] | 0x0000800;
		//배터리 0칸 + 배터리박스 on
	}
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004944:	4d10      	ldr	r5, [pc, #64]	@ (8004988 <LCD_Display_Battery+0x70>)
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	0028      	movs	r0, r5
 800494a:	2100      	movs	r1, #0
 800494c:	4a0f      	ldr	r2, [pc, #60]	@ (800498c <LCD_Display_Battery+0x74>)
 800494e:	f00a ff5b 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004952:	0028      	movs	r0, r5
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	2102      	movs	r1, #2
 8004958:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <LCD_Display_Battery+0x74>)
 800495a:	f00a ff55 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 800495e:	0028      	movs	r0, r5
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	2104      	movs	r1, #4
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <LCD_Display_Battery+0x74>)
 8004966:	f00a ff4f 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800496a:	0028      	movs	r0, r5
 800496c:	2106      	movs	r1, #6
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	4a06      	ldr	r2, [pc, #24]	@ (800498c <LCD_Display_Battery+0x74>)
 8004972:	f00a ff49 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004976:	bd70      	pop	{r4, r5, r6, pc}
		data[1] = data[1] | 0x0000800;
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	4319      	orrs	r1, r3
 800497c:	6061      	str	r1, [r4, #4]
 800497e:	e7df      	b.n	8004940 <LCD_Display_Battery+0x28>
		data[3] = data[3] | 0x0000800;
 8004980:	4313      	orrs	r3, r2
 8004982:	60e3      	str	r3, [r4, #12]
 8004984:	e7de      	b.n	8004944 <LCD_Display_Battery+0x2c>
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	20000a80 	.word	0x20000a80
 800498c:	f7fffffe 	.word	0xf7fffffe

08004990 <LCD_Display_USB>:

////////////////////////////////////////////usb//////////////////////////////////////////
void LCD_Display_USB(uint32_t *data)
{
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004994:	4d17      	ldr	r5, [pc, #92]	@ (80049f4 <LCD_Display_USB+0x64>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0004000;
	data[1] = data[1] | 0x300A000;
	data[2] = data[2] | 0x100F000;
	data[3] = data[3] | 0x3007000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004996:	4e18      	ldr	r6, [pc, #96]	@ (80049f8 <LCD_Display_USB+0x68>)
	HAL_LCD_Clear(&hlcd);
 8004998:	0028      	movs	r0, r5
 800499a:	f00a ff96 	bl	800f8ca <HAL_LCD_Clear>
	data[0] = data[0] | 0x0004000;
 800499e:	2380      	movs	r3, #128	@ 0x80
	data[1] = data[1] | 0x300A000;
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <LCD_Display_USB+0x6c>)
	data[0] = data[0] | 0x0004000;
 80049a4:	01db      	lsls	r3, r3, #7
	data[1] = data[1] | 0x300A000;
 80049a6:	430a      	orrs	r2, r1
 80049a8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x100F000;
 80049aa:	68a1      	ldr	r1, [r4, #8]
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <LCD_Display_USB+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80049ae:	0028      	movs	r0, r5
	data[2] = data[2] | 0x100F000;
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x3007000;
 80049b4:	68e1      	ldr	r1, [r4, #12]
 80049b6:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <LCD_Display_USB+0x74>)
	data[0] = data[0] | 0x0004000;
 80049b8:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x3007000;
 80049ba:	430a      	orrs	r2, r1
 80049bc:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80049be:	2100      	movs	r1, #0
 80049c0:	0032      	movs	r2, r6
 80049c2:	f00a ff21 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80049c6:	0032      	movs	r2, r6
 80049c8:	0028      	movs	r0, r5
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	2102      	movs	r1, #2
 80049ce:	f00a ff1b 	bl	800f808 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80049d2:	0032      	movs	r2, r6
 80049d4:	0028      	movs	r0, r5
 80049d6:	68a3      	ldr	r3, [r4, #8]
 80049d8:	2104      	movs	r1, #4
 80049da:	f00a ff15 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80049de:	0032      	movs	r2, r6
 80049e0:	2106      	movs	r1, #6
 80049e2:	0028      	movs	r0, r5
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	f00a ff0f 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest(& hlcd);
 80049ea:	0028      	movs	r0, r5
 80049ec:	f00a ff49 	bl	800f882 <HAL_LCD_UpdateDisplayRequest>
	//Usb 글자 on
}
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	20000a80 	.word	0x20000a80
 80049f8:	f7fffffe 	.word	0xf7fffffe
 80049fc:	0300a000 	.word	0x0300a000
 8004a00:	0100f000 	.word	0x0100f000
 8004a04:	03007000 	.word	0x03007000

08004a08 <LCD_Display_USB_Load>:

void LCD_Display_USB_Load(uint32_t *data)
{
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004a0c:	4d1a      	ldr	r5, [pc, #104]	@ (8004a78 <LCD_Display_USB_Load+0x70>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0004100;
	data[1] = data[1] | 0x320A188;
	data[2] = data[2] | 0x122F384;
	data[3] = data[3] | 0x322728C;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a0e:	4e1b      	ldr	r6, [pc, #108]	@ (8004a7c <LCD_Display_USB_Load+0x74>)
	HAL_LCD_Clear(&hlcd);
 8004a10:	0028      	movs	r0, r5
 8004a12:	f00a ff5a 	bl	800f8ca <HAL_LCD_Clear>
	data[0] = data[0] | 0x0004100;
 8004a16:	2382      	movs	r3, #130	@ 0x82
	data[1] = data[1] | 0x320A188;
 8004a18:	6861      	ldr	r1, [r4, #4]
 8004a1a:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <LCD_Display_USB_Load+0x78>)
	data[0] = data[0] | 0x0004100;
 8004a1c:	01db      	lsls	r3, r3, #7
	data[1] = data[1] | 0x320A188;
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x122F384;
 8004a22:	68a1      	ldr	r1, [r4, #8]
 8004a24:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <LCD_Display_USB_Load+0x7c>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a26:	0028      	movs	r0, r5
	data[2] = data[2] | 0x122F384;
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x322728C;
 8004a2c:	68e1      	ldr	r1, [r4, #12]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <LCD_Display_USB_Load+0x80>)
	data[0] = data[0] | 0x0004100;
 8004a30:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x322728C;
 8004a32:	430a      	orrs	r2, r1
 8004a34:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a36:	2100      	movs	r1, #0
 8004a38:	0032      	movs	r2, r6
 8004a3a:	f00a fee5 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004a3e:	0032      	movs	r2, r6
 8004a40:	0028      	movs	r0, r5
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	2102      	movs	r1, #2
 8004a46:	f00a fedf 	bl	800f808 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004a4a:	0032      	movs	r2, r6
 8004a4c:	0028      	movs	r0, r5
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	2104      	movs	r1, #4
 8004a52:	f00a fed9 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004a56:	0032      	movs	r2, r6
 8004a58:	0028      	movs	r0, r5
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	2106      	movs	r1, #6
 8004a5e:	f00a fed3 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	0152      	lsls	r2, r2, #5
 8004a66:	0013      	movs	r3, r2
 8004a68:	2107      	movs	r1, #7
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	f00a fecc 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest(& hlcd);
 8004a70:	0028      	movs	r0, r5
 8004a72:	f00a ff06 	bl	800f882 <HAL_LCD_UpdateDisplayRequest>
	//Usb LoAd글자 on
}
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	20000a80 	.word	0x20000a80
 8004a7c:	f7fffffe 	.word	0xf7fffffe
 8004a80:	0320a188 	.word	0x0320a188
 8004a84:	0122f384 	.word	0x0122f384
 8004a88:	0322728c 	.word	0x0322728c

08004a8c <LCD_Display_Boot>:
////////////////////////////////////////////나머지 글자 및 알람//////////////////////////////////////////
void LCD_Display_Boot(uint32_t *data)
{
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
	memset(data, 0, sizeof(data));
 8004a90:	2704      	movs	r7, #4
	HAL_LCD_Clear(&hlcd);
 8004a92:	4d17      	ldr	r5, [pc, #92]	@ (8004af0 <LCD_Display_Boot+0x64>)
	data[1] = data[1] | 0x2000020;
	data[2] = data[2] | 0x300F020;
	data[3] = data[3] | 0x300F060;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a94:	4e17      	ldr	r6, [pc, #92]	@ (8004af4 <LCD_Display_Boot+0x68>)
	HAL_LCD_Clear(&hlcd);
 8004a96:	0028      	movs	r0, r5
 8004a98:	f00a ff17 	bl	800f8ca <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 8004a9c:	003a      	movs	r2, r7
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	0020      	movs	r0, r4
 8004aa2:	f015 fd27 	bl	801a4f4 <memset>
	data[1] = data[1] | 0x2000020;
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <LCD_Display_Boot+0x6c>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004aaa:	0028      	movs	r0, r5
	data[1] = data[1] | 0x2000020;
 8004aac:	4313      	orrs	r3, r2
 8004aae:	6063      	str	r3, [r4, #4]
	data[2] = data[2] | 0x300F020;
 8004ab0:	68a2      	ldr	r2, [r4, #8]
 8004ab2:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <LCD_Display_Boot+0x70>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60a3      	str	r3, [r4, #8]
	data[3] = data[3] | 0x300F060;
 8004ab8:	68e2      	ldr	r2, [r4, #12]
 8004aba:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <LCD_Display_Boot+0x74>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60e3      	str	r3, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	0032      	movs	r2, r6
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	f00a fe9f 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004aca:	0032      	movs	r2, r6
 8004acc:	0028      	movs	r0, r5
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	f00a fe99 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004ad6:	0032      	movs	r2, r6
 8004ad8:	0039      	movs	r1, r7
 8004ada:	0028      	movs	r0, r5
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	f00a fe93 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004ae2:	0032      	movs	r2, r6
 8004ae4:	0028      	movs	r0, r5
 8004ae6:	2106      	movs	r1, #6
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	f00a fe8d 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//boot 글자 on
}
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af0:	20000a80 	.word	0x20000a80
 8004af4:	f7fffffe 	.word	0xf7fffffe
 8004af8:	02000020 	.word	0x02000020
 8004afc:	0300f020 	.word	0x0300f020
 8004b00:	0300f060 	.word	0x0300f060

08004b04 <Blank_Dose_Display>:

void Blank_Dose_Display(uint32_t *data)
{
 8004b04:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x200A020;
 8004b06:	6882      	ldr	r2, [r0, #8]
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <Blank_Dose_Display+0x18>)
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b0a:	2104      	movs	r1, #4
	data[2] = data[2] | 0x200A020;
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b10:	4a03      	ldr	r2, [pc, #12]	@ (8004b20 <Blank_Dose_Display+0x1c>)
 8004b12:	4804      	ldr	r0, [pc, #16]	@ (8004b24 <Blank_Dose_Display+0x20>)
 8004b14:	f00a fe78 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//dose값 나오기전 '----' 표시
}
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	0200a020 	.word	0x0200a020
 8004b20:	f7fffffe 	.word	0xf7fffffe
 8004b24:	20000a80 	.word	0x20000a80

08004b28 <LCD_Display_StopMode>:
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//start 글자, REC 표시
}

void LCD_Display_StopMode(uint32_t *data)
{
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004b2c:	4d1f      	ldr	r5, [pc, #124]	@ (8004bac <LCD_Display_StopMode+0x84>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0200100;
	data[1] = data[1] | 0x020038C;
	data[2] = data[2] | 0x000031C;
	data[3] = data[3] | 0x0020384;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b2e:	4e20      	ldr	r6, [pc, #128]	@ (8004bb0 <LCD_Display_StopMode+0x88>)
	HAL_LCD_Clear(&hlcd);
 8004b30:	0028      	movs	r0, r5
 8004b32:	f00a feca 	bl	800f8ca <HAL_LCD_Clear>
	data[1] = data[1] | 0x020038C;
 8004b36:	6861      	ldr	r1, [r4, #4]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <LCD_Display_StopMode+0x8c>)
	data[0] = data[0] | 0x0200100;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb8 <LCD_Display_StopMode+0x90>)
	data[1] = data[1] | 0x020038C;
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x000031C;
 8004b40:	22c7      	movs	r2, #199	@ 0xc7
 8004b42:	68a1      	ldr	r1, [r4, #8]
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	430a      	orrs	r2, r1
 8004b48:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x0020384;
 8004b4a:	68e1      	ldr	r1, [r4, #12]
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <LCD_Display_StopMode+0x94>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b4e:	0028      	movs	r0, r5
	data[3] = data[3] | 0x0020384;
 8004b50:	430a      	orrs	r2, r1
	data[0] = data[0] | 0x0200100;
 8004b52:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x0020384;
 8004b54:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b56:	2100      	movs	r1, #0
 8004b58:	0032      	movs	r2, r6
 8004b5a:	f00a fe55 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004b5e:	0032      	movs	r2, r6
 8004b60:	0028      	movs	r0, r5
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	2102      	movs	r1, #2
 8004b66:	f00a fe4f 	bl	800f808 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b6a:	0032      	movs	r2, r6
 8004b6c:	0028      	movs	r0, r5
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	2104      	movs	r1, #4
 8004b72:	f00a fe49 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b76:	68e3      	ldr	r3, [r4, #12]
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b78:	2480      	movs	r4, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b7a:	0032      	movs	r2, r6
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b7c:	0164      	lsls	r4, r4, #5
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b7e:	0028      	movs	r0, r5
 8004b80:	2106      	movs	r1, #6
 8004b82:	f00a fe41 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b86:	0023      	movs	r3, r4
 8004b88:	0022      	movs	r2, r4
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	f00a fe3b 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 8004b92:	0023      	movs	r3, r4
 8004b94:	0022      	movs	r2, r4
 8004b96:	0028      	movs	r0, r5
 8004b98:	2105      	movs	r1, #5
 8004b9a:	f00a fe35 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004b9e:	0028      	movs	r0, r5
 8004ba0:	0023      	movs	r3, r4
 8004ba2:	0022      	movs	r2, r4
 8004ba4:	2107      	movs	r1, #7
 8004ba6:	f00a fe2f 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//stop 글자, stop 표시
}
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	20000a80 	.word	0x20000a80
 8004bb0:	f7fffffe 	.word	0xf7fffffe
 8004bb4:	0020038c 	.word	0x0020038c
 8004bb8:	00200100 	.word	0x00200100
 8004bbc:	00020384 	.word	0x00020384

08004bc0 <LCD_Display_PauseMode>:

void LCD_Display_PauseMode(uint32_t *data)
{
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004bc4:	4d1c      	ldr	r5, [pc, #112]	@ (8004c38 <LCD_Display_PauseMode+0x78>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x02A0000;
	data[1] = data[1] | 0x003038C;
	data[2] = data[2] | 0x023031C;
	data[3] = data[3] | 0x029018C;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bc6:	4e1d      	ldr	r6, [pc, #116]	@ (8004c3c <LCD_Display_PauseMode+0x7c>)
	HAL_LCD_Clear(&hlcd);
 8004bc8:	0028      	movs	r0, r5
 8004bca:	f00a fe7e 	bl	800f8ca <HAL_LCD_Clear>
	data[0] = data[0] | 0x02A0000;
 8004bce:	23a8      	movs	r3, #168	@ 0xa8
	data[1] = data[1] | 0x003038C;
 8004bd0:	6861      	ldr	r1, [r4, #4]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <LCD_Display_PauseMode+0x80>)
	data[0] = data[0] | 0x02A0000;
 8004bd4:	039b      	lsls	r3, r3, #14
	data[1] = data[1] | 0x003038C;
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x023031C;
 8004bda:	68a1      	ldr	r1, [r4, #8]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <LCD_Display_PauseMode+0x84>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bde:	0028      	movs	r0, r5
	data[2] = data[2] | 0x023031C;
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x029018C;
 8004be4:	68e1      	ldr	r1, [r4, #12]
 8004be6:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <LCD_Display_PauseMode+0x88>)
	data[0] = data[0] | 0x02A0000;
 8004be8:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x029018C;
 8004bea:	430a      	orrs	r2, r1
 8004bec:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	0032      	movs	r2, r6
 8004bf2:	f00a fe09 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004bf6:	0032      	movs	r2, r6
 8004bf8:	0028      	movs	r0, r5
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	f00a fe03 	bl	800f808 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c02:	0032      	movs	r2, r6
 8004c04:	0028      	movs	r0, r5
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	2104      	movs	r1, #4
 8004c0a:	f00a fdfd 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c0e:	68e3      	ldr	r3, [r4, #12]
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c10:	2480      	movs	r4, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c12:	0032      	movs	r2, r6
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c14:	0164      	lsls	r4, r4, #5
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c16:	0028      	movs	r0, r5
 8004c18:	2106      	movs	r1, #6
 8004c1a:	f00a fdf5 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c1e:	0023      	movs	r3, r4
 8004c20:	0022      	movs	r2, r4
 8004c22:	0028      	movs	r0, r5
 8004c24:	2101      	movs	r1, #1
 8004c26:	f00a fdef 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	0023      	movs	r3, r4
 8004c2e:	0022      	movs	r2, r4
 8004c30:	2103      	movs	r1, #3
 8004c32:	f00a fde9 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//pause 글자, stop 표시
}
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	20000a80 	.word	0x20000a80
 8004c3c:	f7fffffe 	.word	0xf7fffffe
 8004c40:	0003038c 	.word	0x0003038c
 8004c44:	0023031c 	.word	0x0023031c
 8004c48:	0029018c 	.word	0x0029018c

08004c4c <Small_Stop_Display>:
}


void Small_Stop_Display(uint32_t *data)
{
	data[2] = data[2] | 0x0000010; //Stop on
 8004c4c:	2310      	movs	r3, #16
{
 8004c4e:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x0000010; //Stop on
 8004c50:	6882      	ldr	r2, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c52:	2104      	movs	r1, #4
	data[2] = data[2] | 0x0000010; //Stop on
 8004c54:	4313      	orrs	r3, r2
 8004c56:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c58:	4a02      	ldr	r2, [pc, #8]	@ (8004c64 <Small_Stop_Display+0x18>)
 8004c5a:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <Small_Stop_Display+0x1c>)
 8004c5c:	f00a fdd4 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);

}
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	f7fffffe 	.word	0xf7fffffe
 8004c68:	20000a80 	.word	0x20000a80

08004c6c <Small_Start_Display>:

void Small_Start_Display(uint32_t *data)
{
	data[3] = data[3] | 0x0000010; //Rec on
 8004c6c:	2310      	movs	r3, #16
{
 8004c6e:	b510      	push	{r4, lr}
	data[3] = data[3] | 0x0000010; //Rec on
 8004c70:	68c2      	ldr	r2, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c72:	2106      	movs	r1, #6
	data[3] = data[3] | 0x0000010; //Rec on
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60c3      	str	r3, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c78:	4a02      	ldr	r2, [pc, #8]	@ (8004c84 <Small_Start_Display+0x18>)
 8004c7a:	4803      	ldr	r0, [pc, #12]	@ (8004c88 <Small_Start_Display+0x1c>)
 8004c7c:	f00a fdc4 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	f7fffffe 	.word	0xf7fffffe
 8004c88:	20000a80 	.word	0x20000a80

08004c8c <Mark_Display>:
{
	data[3] = data[3] | 0x4000000; //Delay on
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
void Mark_Display(uint32_t *data){
 8004c8c:	b510      	push	{r4, lr}
	if(device_config.mark == 1) {
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <Mark_Display+0x20>)
 8004c90:	7d1b      	ldrb	r3, [r3, #20]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d109      	bne.n	8004caa <Mark_Display+0x1e>
	data[0] = data[0] | 0x4000000;//Mark
 8004c96:	2380      	movs	r3, #128	@ 0x80
 8004c98:	6802      	ldr	r2, [r0, #0]
 8004c9a:	04db      	lsls	r3, r3, #19
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4803      	ldr	r0, [pc, #12]	@ (8004cb0 <Mark_Display+0x24>)
 8004ca4:	4a03      	ldr	r2, [pc, #12]	@ (8004cb4 <Mark_Display+0x28>)
 8004ca6:	f00a fdaf 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	}
}
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	20000b50 	.word	0x20000b50
 8004cb0:	20000a80 	.word	0x20000a80
 8004cb4:	f7fffffe 	.word	0xf7fffffe

08004cb8 <Max_Display>:
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}

void Max_Display(uint32_t *data){
	data[0] = data[0] | 0x2000000; //MAX
 8004cb8:	2380      	movs	r3, #128	@ 0x80
void Max_Display(uint32_t *data){
 8004cba:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x2000000; //MAX
 8004cbc:	6802      	ldr	r2, [r0, #0]
 8004cbe:	049b      	lsls	r3, r3, #18
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4802      	ldr	r0, [pc, #8]	@ (8004cd0 <Max_Display+0x18>)
 8004cc8:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <Max_Display+0x1c>)
 8004cca:	f00a fd9d 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	20000a80 	.word	0x20000a80
 8004cd4:	f7fffffe 	.word	0xf7fffffe

08004cd8 <Min_Display>:

void Min_Display(uint32_t *data){
	data[0] = data[0] | 0x0000020; //MIN
 8004cd8:	2320      	movs	r3, #32
void Min_Display(uint32_t *data){
 8004cda:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x0000020; //MIN
 8004cdc:	6802      	ldr	r2, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004cde:	2100      	movs	r1, #0
	data[0] = data[0] | 0x0000020; //MIN
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ce4:	4a02      	ldr	r2, [pc, #8]	@ (8004cf0 <Min_Display+0x18>)
 8004ce6:	4803      	ldr	r0, [pc, #12]	@ (8004cf4 <Min_Display+0x1c>)
 8004ce8:	f00a fd8e 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	f7fffffe 	.word	0xf7fffffe
 8004cf4:	20000a80 	.word	0x20000a80

08004cf8 <LCD_Clear_Display>:
void LCD_Clear(void)
{
	HAL_LCD_Clear(&hlcd);
}
void LCD_Clear_Display(uint32_t *data)
{
 8004cf8:	b570      	push	{r4, r5, r6, lr}
	HAL_LCD_Clear(&hlcd);
 8004cfa:	4d13      	ldr	r5, [pc, #76]	@ (8004d48 <LCD_Clear_Display+0x50>)
{
 8004cfc:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004cfe:	0028      	movs	r0, r5
 8004d00:	f00a fde3 	bl	800f8ca <HAL_LCD_Clear>
	data[0] = 0x0000000;
 8004d04:	2100      	movs	r1, #0
	data[1] = 0x0000000;
	data[2] = 0x0000000;
	data[3] = 0x0000000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004d06:	4e11      	ldr	r6, [pc, #68]	@ (8004d4c <LCD_Clear_Display+0x54>)
 8004d08:	000b      	movs	r3, r1
 8004d0a:	0032      	movs	r2, r6
 8004d0c:	0028      	movs	r0, r5
	data[0] = 0x0000000;
 8004d0e:	6021      	str	r1, [r4, #0]
	data[1] = 0x0000000;
 8004d10:	6061      	str	r1, [r4, #4]
	data[2] = 0x0000000;
 8004d12:	60a1      	str	r1, [r4, #8]
	data[3] = 0x0000000;
 8004d14:	60e1      	str	r1, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004d16:	f00a fd77 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004d1a:	0032      	movs	r2, r6
 8004d1c:	0028      	movs	r0, r5
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	2102      	movs	r1, #2
 8004d22:	f00a fd71 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004d26:	0032      	movs	r2, r6
 8004d28:	0028      	movs	r0, r5
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	f00a fd6b 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004d32:	0032      	movs	r2, r6
 8004d34:	2106      	movs	r1, #6
 8004d36:	0028      	movs	r0, r5
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	f00a fd65 	bl	800f808 <HAL_LCD_Write>

	HAL_LCD_UpdateDisplayRequest(& hlcd);
 8004d3e:	0028      	movs	r0, r5
 8004d40:	f00a fd9f 	bl	800f882 <HAL_LCD_UpdateDisplayRequest>
}
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	20000a80 	.word	0x20000a80
 8004d4c:	f7fffffe 	.word	0xf7fffffe

08004d50 <LCD_Display_LP_Number>:
    ones      = number % 10;
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
}

void LCD_Display_LP_Number(uint8_t ten_thousands, uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	0006      	movs	r6, r0
 8004d54:	b097      	sub	sp, #92	@ 0x5c
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	ab1c      	add	r3, sp, #112	@ 0x70
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	000c      	movs	r4, r1
 8004d5e:	0017      	movs	r7, r2
	uint32_t LP_data_tentho[4] = {0};
 8004d60:	2100      	movs	r1, #0
 8004d62:	2210      	movs	r2, #16
 8004d64:	a802      	add	r0, sp, #8
	uint32_t LP_data_tho[4] = {0};
 8004d66:	ad06      	add	r5, sp, #24
{
 8004d68:	9301      	str	r3, [sp, #4]
	uint32_t LP_data_tentho[4] = {0};
 8004d6a:	f015 fbc3 	bl	801a4f4 <memset>
	uint32_t LP_data_tho[4] = {0};
 8004d6e:	2210      	movs	r2, #16
 8004d70:	2100      	movs	r1, #0
 8004d72:	0028      	movs	r0, r5
 8004d74:	f015 fbbe 	bl	801a4f4 <memset>
	uint32_t LP_data_hun[4] = {0};
 8004d78:	2210      	movs	r2, #16
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	a80a      	add	r0, sp, #40	@ 0x28
 8004d7e:	f015 fbb9 	bl	801a4f4 <memset>
	uint32_t LP_data_ten[4] = {0};
 8004d82:	2210      	movs	r2, #16
 8004d84:	2100      	movs	r1, #0
 8004d86:	a80e      	add	r0, sp, #56	@ 0x38
 8004d88:	f015 fbb4 	bl	801a4f4 <memset>
	uint32_t LP_data_one[4] = {0};
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	2100      	movs	r1, #0
 8004d90:	a812      	add	r0, sp, #72	@ 0x48
 8004d92:	f015 fbaf 	bl	801a4f4 <memset>

	switch (ten_thousands)
 8004d96:	1e70      	subs	r0, r6, #1
 8004d98:	2808      	cmp	r0, #8
 8004d9a:	d846      	bhi.n	8004e2a <LCD_Display_LP_Number+0xda>
 8004d9c:	f7fb f9c6 	bl	800012c <__gnu_thumb1_case_uqi>
 8004da0:	231c1305 	.word	0x231c1305
 8004da4:	39332b25 	.word	0x39332b25
 8004da8:	3f          	.byte	0x3f
 8004da9:	00          	.byte	0x00
		    		LP_data_tentho[3] = 0x0000000;
		    		break;

		    	case 1:
		    		LP_data_tentho[0] = 0x0000000;
		    		LP_data_tentho[1] = 0x0020000;
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	029b      	lsls	r3, r3, #10
					LP_data_tentho[3] = 0x0020000;
					break;

				case 4:
					LP_data_tentho[0] = 0x0000000;
					LP_data_tentho[1] = 0x0020004;
 8004dae:	9303      	str	r3, [sp, #12]
					break;

				case 7:
					LP_data_tentho[0] = 0x0020000;
					LP_data_tentho[1] = 0x0020004;
					LP_data_tentho[2] = 0x0020000;
 8004db0:	9304      	str	r3, [sp, #16]
					LP_data_tentho[3] = 0x0020000;
					break;
		    }


	switch (thousands)
 8004db2:	2c09      	cmp	r4, #9
 8004db4:	d849      	bhi.n	8004e4a <LCD_Display_LP_Number+0xfa>
 8004db6:	0020      	movs	r0, r4
 8004db8:	f7fb f9b8 	bl	800012c <__gnu_thumb1_case_uqi>
 8004dbc:	5b514343 	.word	0x5b514343
 8004dc0:	766d6664 	.word	0x766d6664
 8004dc4:	837d      	.short	0x837d
					LP_data_tentho[0] = 0x0020000;
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020000;
 8004dcc:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0000004;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	9304      	str	r3, [sp, #16]
					LP_data_tentho[3] = 0x0020004;
 8004dd2:	4bb5      	ldr	r3, [pc, #724]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[3] = 0x0020004;
 8004dd4:	9305      	str	r3, [sp, #20]
					break;
 8004dd6:	e7ec      	b.n	8004db2 <LCD_Display_LP_Number+0x62>
					LP_data_tentho[0] = 0x0020000;
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020000;
 8004dde:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0020004;
 8004de0:	4ab1      	ldr	r2, [pc, #708]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[2] = 0x0020004;
 8004de2:	9204      	str	r2, [sp, #16]
					LP_data_tentho[3] = 0x0020000;
 8004de4:	e7f6      	b.n	8004dd4 <LCD_Display_LP_Number+0x84>
					LP_data_tentho[1] = 0x0020004;
 8004de6:	4bb0      	ldr	r3, [pc, #704]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
 8004de8:	e7e1      	b.n	8004dae <LCD_Display_LP_Number+0x5e>
					LP_data_tentho[0] = 0x0020000;
 8004dea:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0000004;
 8004dec:	2204      	movs	r2, #4
					LP_data_tentho[0] = 0x0020000;
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0000004;
 8004df2:	9203      	str	r2, [sp, #12]
 8004df4:	e7f4      	b.n	8004de0 <LCD_Display_LP_Number+0x90>
					LP_data_tentho[0] = 0x0020000;
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0000004;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0020004;
 8004e00:	4ba9      	ldr	r3, [pc, #676]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[2] = 0x0020004;
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	e7e6      	b.n	8004dd4 <LCD_Display_LP_Number+0x84>
					LP_data_tentho[0] = 0x0020000;
 8004e06:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0020004;
 8004e08:	4aa7      	ldr	r2, [pc, #668]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[0] = 0x0020000;
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e0e:	9203      	str	r2, [sp, #12]
 8004e10:	e7ce      	b.n	8004db0 <LCD_Display_LP_Number+0x60>
					LP_data_tentho[0] = 0x0020000;
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e18:	4ba3      	ldr	r3, [pc, #652]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	e7f1      	b.n	8004e02 <LCD_Display_LP_Number+0xb2>
					LP_data_tentho[0] = 0x0020000;
 8004e1e:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0020004;
 8004e20:	4aa1      	ldr	r2, [pc, #644]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[0] = 0x0020000;
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	e7db      	b.n	8004de2 <LCD_Display_LP_Number+0x92>
	switch (thousands)
 8004e2a:	2c09      	cmp	r4, #9
 8004e2c:	d80d      	bhi.n	8004e4a <LCD_Display_LP_Number+0xfa>
 8004e2e:	0020      	movs	r0, r4
 8004e30:	f7fb f97c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004e34:	1f150705 	.word	0x1f150705
 8004e38:	3a312a28 	.word	0x3a312a28
 8004e3c:	4741      	.short	0x4741
	    {
			case 0:
				if(ten_thousands == 0)
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d003      	beq.n	8004e4a <LCD_Display_LP_Number+0xfa>
					LP_data_tho[2] = 0x0000100;
					LP_data_tho[3] = 0x0000180;
				}
	    	case 1:
	    		LP_data_tho[0] = 0x0000000;
	    		LP_data_tho[1] = 0x0000100;
 8004e42:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[3] = 0x0000100;
				break;

			case 4:
				LP_data_tho[0] = 0x0000000;
				LP_data_tho[1] = 0x0000180;
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	9307      	str	r3, [sp, #28]
				LP_data_tho[2] = 0x0000180;
 8004e48:	9308      	str	r3, [sp, #32]
				LP_data_tho[2] = 0x0000180;
				LP_data_tho[3] = 0x0000100;
				break;
	    }

    switch (hundreds)
 8004e4a:	2f09      	cmp	r7, #9
 8004e4c:	d84e      	bhi.n	8004eec <LCD_Display_LP_Number+0x19c>
 8004e4e:	0038      	movs	r0, r7
 8004e50:	f7fb f96c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004e54:	6258483e 	.word	0x6258483e
 8004e58:	7a716a68 	.word	0x7a716a68
 8004e5c:	8680      	.short	0x8680
				LP_data_tho[0] = 0x0000100;
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000100;
 8004e64:	606b      	str	r3, [r5, #4]
				LP_data_tho[2] = 0x0000080;
 8004e66:	3b80      	subs	r3, #128	@ 0x80
 8004e68:	60ab      	str	r3, [r5, #8]
				LP_data_tho[3] = 0x0000180;
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	33ff      	adds	r3, #255	@ 0xff
				LP_data_tho[3] = 0x0000180;
 8004e6e:	60eb      	str	r3, [r5, #12]
				break;
 8004e70:	e7eb      	b.n	8004e4a <LCD_Display_LP_Number+0xfa>
				LP_data_tho[0] = 0x0000100;
 8004e72:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[2] = 0x0000180;
 8004e74:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000100;
 8004e7a:	9307      	str	r3, [sp, #28]
				LP_data_tho[2] = 0x0000180;
 8004e7c:	0052      	lsls	r2, r2, #1
				LP_data_tho[2] = 0x0000180;
 8004e7e:	9208      	str	r2, [sp, #32]
				LP_data_tho[3] = 0x0000100;
 8004e80:	9309      	str	r3, [sp, #36]	@ 0x24
				break;
 8004e82:	e7e2      	b.n	8004e4a <LCD_Display_LP_Number+0xfa>
				LP_data_tho[1] = 0x0000180;
 8004e84:	23c0      	movs	r3, #192	@ 0xc0
 8004e86:	e7dd      	b.n	8004e44 <LCD_Display_LP_Number+0xf4>
				LP_data_tho[0] = 0x0000100;
 8004e88:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000080;
 8004e8a:	2280      	movs	r2, #128	@ 0x80
				LP_data_tho[0] = 0x0000100;
 8004e8c:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000080;
 8004e8e:	9207      	str	r2, [sp, #28]
				LP_data_tho[0] = 0x0000100;
 8004e90:	9306      	str	r3, [sp, #24]
				LP_data_tho[2] = 0x0000180;
 8004e92:	18d2      	adds	r2, r2, r3
 8004e94:	e7f3      	b.n	8004e7e <LCD_Display_LP_Number+0x12e>
				LP_data_tho[0] = 0x0000100;
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000080;
 8004e9c:	3b80      	subs	r3, #128	@ 0x80
 8004e9e:	606b      	str	r3, [r5, #4]
				LP_data_tho[2] = 0x0000180;
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	33ff      	adds	r3, #255	@ 0xff
				LP_data_tho[2] = 0x0000180;
 8004ea4:	60ab      	str	r3, [r5, #8]
 8004ea6:	e7e2      	b.n	8004e6e <LCD_Display_LP_Number+0x11e>
				LP_data_tho[0] = 0x0000100;
 8004ea8:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000180;
 8004eaa:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004eac:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000180;
 8004eae:	0052      	lsls	r2, r2, #1
				LP_data_tho[0] = 0x0000100;
 8004eb0:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004eb2:	9207      	str	r2, [sp, #28]
				LP_data_tho[2] = 0x0000100;
 8004eb4:	e7c8      	b.n	8004e48 <LCD_Display_LP_Number+0xf8>
				LP_data_tho[0] = 0x0000100;
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004ebc:	3380      	adds	r3, #128	@ 0x80
 8004ebe:	606b      	str	r3, [r5, #4]
 8004ec0:	e7f0      	b.n	8004ea4 <LCD_Display_LP_Number+0x154>
				LP_data_tho[0] = 0x0000100;
 8004ec2:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000180;
 8004ec4:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004ec6:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000180;
 8004ec8:	0052      	lsls	r2, r2, #1
				LP_data_tho[0] = 0x0000100;
 8004eca:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004ecc:	9207      	str	r2, [sp, #28]
 8004ece:	e7d6      	b.n	8004e7e <LCD_Display_LP_Number+0x12e>
    {
    	case 0:
    		if(ten_thousands == 0 && thousands == 0)
 8004ed0:	0033      	movs	r3, r6
 8004ed2:	4323      	orrs	r3, r4
 8004ed4:	d00a      	beq.n	8004eec <LCD_Display_LP_Number+0x19c>
    			LP_data_hun[2] = 0x0000000;
    			LP_data_hun[3] = 0x0000000;
    		}
    		else
    		{
    			LP_data_hun[0] = 0x0200000;
 8004ed6:	2280      	movs	r2, #128	@ 0x80
    			LP_data_hun[1] = 0x0200200;
 8004ed8:	4b74      	ldr	r3, [pc, #464]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
    			LP_data_hun[0] = 0x0200000;
 8004eda:	0392      	lsls	r2, r2, #14
 8004edc:	920a      	str	r2, [sp, #40]	@ 0x28
    			LP_data_hun[1] = 0x0200200;
 8004ede:	930b      	str	r3, [sp, #44]	@ 0x2c
			break;

		case 9:
			LP_data_hun[0] = 0x0200000;
			LP_data_hun[1] = 0x0200200;
			LP_data_hun[2] = 0x0200200;
 8004ee0:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ee2:	e017      	b.n	8004f14 <LCD_Display_LP_Number+0x1c4>
    		LP_data_hun[1] = 0x0200000;
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	039b      	lsls	r3, r3, #14
			LP_data_hun[1] = 0x0200200;
 8004ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004eea:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200000;
			break;
    }
    switch (tens)
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d84a      	bhi.n	8004f8a <LCD_Display_LP_Number+0x23a>
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fb f919 	bl	800012c <__gnu_thumb1_case_uqi>
 8004efa:	4439      	.short	0x4439
 8004efc:	68665f54 	.word	0x68665f54
 8004f00:	8780796f 	.word	0x8780796f
			LP_data_hun[0] = 0x0200000;
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	039b      	lsls	r3, r3, #14
 8004f08:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200000;
 8004f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0000200;
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200200;
 8004f12:	4b66      	ldr	r3, [pc, #408]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[3] = 0x0200000;
 8004f14:	930d      	str	r3, [sp, #52]	@ 0x34
			break;
 8004f16:	e7e9      	b.n	8004eec <LCD_Display_LP_Number+0x19c>
			LP_data_hun[0] = 0x0200000;
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	039b      	lsls	r3, r3, #14
 8004f1c:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200000;
 8004f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004f20:	4a62      	ldr	r2, [pc, #392]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f22:	e7dd      	b.n	8004ee0 <LCD_Display_LP_Number+0x190>
			LP_data_hun[1] = 0x0200200;
 8004f24:	4b61      	ldr	r3, [pc, #388]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f26:	e7df      	b.n	8004ee8 <LCD_Display_LP_Number+0x198>
			LP_data_hun[0] = 0x0200000;
 8004f28:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0000200;
 8004f2a:	2280      	movs	r2, #128	@ 0x80
			LP_data_hun[0] = 0x0200000;
 8004f2c:	039b      	lsls	r3, r3, #14
			LP_data_hun[1] = 0x0000200;
 8004f2e:	0092      	lsls	r2, r2, #2
			LP_data_hun[0] = 0x0200000;
 8004f30:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0000200;
 8004f32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f34:	e7f4      	b.n	8004f20 <LCD_Display_LP_Number+0x1d0>
			LP_data_hun[0] = 0x0200000;
 8004f36:	2380      	movs	r3, #128	@ 0x80
 8004f38:	039b      	lsls	r3, r3, #14
 8004f3a:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0000200;
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004f42:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[2] = 0x0200200;
 8004f44:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200200;
 8004f46:	e7e5      	b.n	8004f14 <LCD_Display_LP_Number+0x1c4>
			LP_data_hun[0] = 0x0200000;
 8004f48:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0200200;
 8004f4a:	4a58      	ldr	r2, [pc, #352]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[0] = 0x0200000;
 8004f4c:	039b      	lsls	r3, r3, #14
 8004f4e:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f50:	920b      	str	r2, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200000;
 8004f52:	e7ca      	b.n	8004eea <LCD_Display_LP_Number+0x19a>
			LP_data_hun[0] = 0x0200000;
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	039b      	lsls	r3, r3, #14
 8004f58:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f5a:	4b54      	ldr	r3, [pc, #336]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5e:	e7f1      	b.n	8004f44 <LCD_Display_LP_Number+0x1f4>
			LP_data_hun[0] = 0x0200000;
 8004f60:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0200200;
 8004f62:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[0] = 0x0200000;
 8004f64:	039b      	lsls	r3, r3, #14
 8004f66:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f6a:	e7b9      	b.n	8004ee0 <LCD_Display_LP_Number+0x190>
    {
    	case 0:
    		if(ten_thousands == 0 && thousands == 0 && hundreds == 0)
 8004f6c:	433c      	orrs	r4, r7
 8004f6e:	4334      	orrs	r4, r6
 8004f70:	d00b      	beq.n	8004f8a <LCD_Display_LP_Number+0x23a>
    			LP_data_ten[3] = 0x0000000;
    			break;
    		}
    		else
    		{
    			LP_data_ten[0] = 0x0080000;
 8004f72:	2180      	movs	r1, #128	@ 0x80
    			LP_data_ten[1] = 0x0090000;
 8004f74:	2390      	movs	r3, #144	@ 0x90
    			LP_data_ten[0] = 0x0080000;
 8004f76:	0309      	lsls	r1, r1, #12
    			LP_data_ten[1] = 0x0090000;
 8004f78:	031b      	lsls	r3, r3, #12
    			LP_data_ten[0] = 0x0080000;
 8004f7a:	910e      	str	r1, [sp, #56]	@ 0x38
    			LP_data_ten[1] = 0x0090000;
 8004f7c:	6053      	str	r3, [r2, #4]
			break;

		case 9:
			LP_data_ten[0] = 0x0080000;
			LP_data_ten[1] = 0x0090000;
			LP_data_ten[2] = 0x0090000;
 8004f7e:	6091      	str	r1, [r2, #8]
 8004f80:	e018      	b.n	8004fb4 <LCD_Display_LP_Number+0x264>
    		LP_data_ten[1] = 0x0080000;
 8004f82:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0080000;
 8004f88:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 8004f8a:	9901      	ldr	r1, [sp, #4]
 8004f8c:	ab12      	add	r3, sp, #72	@ 0x48
 8004f8e:	2909      	cmp	r1, #9
 8004f90:	d84a      	bhi.n	8005028 <LCD_Display_LP_Number+0x2d8>
 8004f92:	0008      	movs	r0, r1
 8004f94:	f7fb f8ca 	bl	800012c <__gnu_thumb1_case_uqi>
 8004f98:	655d453f 	.word	0x655d453f
 8004f9c:	78716c6a 	.word	0x78716c6a
 8004fa0:	827d      	.short	0x827d
			LP_data_ten[0] = 0x0080000;
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0080000;
 8004fa8:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0010000;
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0090000;
 8004fb0:	2390      	movs	r3, #144	@ 0x90
 8004fb2:	031b      	lsls	r3, r3, #12
			LP_data_ten[3] = 0x0080000;
 8004fb4:	60d3      	str	r3, [r2, #12]
			break;
 8004fb6:	e7e8      	b.n	8004f8a <LCD_Display_LP_Number+0x23a>
			LP_data_ten[0] = 0x0080000;
 8004fb8:	2380      	movs	r3, #128	@ 0x80
 8004fba:	031b      	lsls	r3, r3, #12
 8004fbc:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0080000;
 8004fbe:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0090000;
 8004fc0:	2190      	movs	r1, #144	@ 0x90
 8004fc2:	0309      	lsls	r1, r1, #12
 8004fc4:	e7db      	b.n	8004f7e <LCD_Display_LP_Number+0x22e>
			LP_data_ten[1] = 0x0090000;
 8004fc6:	2390      	movs	r3, #144	@ 0x90
 8004fc8:	e7dc      	b.n	8004f84 <LCD_Display_LP_Number+0x234>
			LP_data_ten[0] = 0x0080000;
 8004fca:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0010000;
 8004fcc:	2180      	movs	r1, #128	@ 0x80
			LP_data_ten[0] = 0x0080000;
 8004fce:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0010000;
 8004fd0:	0249      	lsls	r1, r1, #9
			LP_data_ten[0] = 0x0080000;
 8004fd2:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0010000;
 8004fd4:	6051      	str	r1, [r2, #4]
 8004fd6:	e7f3      	b.n	8004fc0 <LCD_Display_LP_Number+0x270>
			LP_data_ten[0] = 0x0080000;
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	031b      	lsls	r3, r3, #12
 8004fdc:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0010000;
 8004fde:	2380      	movs	r3, #128	@ 0x80
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0090000;
 8004fe4:	2390      	movs	r3, #144	@ 0x90
 8004fe6:	031b      	lsls	r3, r3, #12
			LP_data_ten[2] = 0x0090000;
 8004fe8:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0090000;
 8004fea:	e7e3      	b.n	8004fb4 <LCD_Display_LP_Number+0x264>
			LP_data_ten[0] = 0x0080000;
 8004fec:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 8004fee:	2190      	movs	r1, #144	@ 0x90
			LP_data_ten[0] = 0x0080000;
 8004ff0:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0090000;
 8004ff2:	0309      	lsls	r1, r1, #12
			LP_data_ten[0] = 0x0080000;
 8004ff4:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8004ff6:	6051      	str	r1, [r2, #4]
 8004ff8:	e7c6      	b.n	8004f88 <LCD_Display_LP_Number+0x238>
			LP_data_ten[0] = 0x0080000;
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	031b      	lsls	r3, r3, #12
 8004ffe:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8005000:	2390      	movs	r3, #144	@ 0x90
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	e7ef      	b.n	8004fe8 <LCD_Display_LP_Number+0x298>
			LP_data_ten[0] = 0x0080000;
 8005008:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 800500a:	2190      	movs	r1, #144	@ 0x90
			LP_data_ten[0] = 0x0080000;
 800500c:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0090000;
 800500e:	0309      	lsls	r1, r1, #12
			LP_data_ten[0] = 0x0080000;
 8005010:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8005012:	6051      	str	r1, [r2, #4]
 8005014:	e7b3      	b.n	8004f7e <LCD_Display_LP_Number+0x22e>
    {
    	case 0:
        	LP_data_one[0] = 0x0000002;
 8005016:	2002      	movs	r0, #2
        	LP_data_one[1] = 0x0000003;
 8005018:	2103      	movs	r1, #3
        	LP_data_one[0] = 0x0000002;
 800501a:	9012      	str	r0, [sp, #72]	@ 0x48
        	LP_data_one[1] = 0x0000003;
 800501c:	6059      	str	r1, [r3, #4]
			break;

		case 9:
			LP_data_one[0] = 0x0000002;
			LP_data_one[1] = 0x0000003;
			LP_data_one[2] = 0x0000003;
 800501e:	6098      	str	r0, [r3, #8]
 8005020:	e01d      	b.n	800505e <LCD_Display_LP_Number+0x30e>
    		LP_data_one[1] = 0x0000002;
 8005022:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 8005024:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005026:	6099      	str	r1, [r3, #8]
{
 8005028:	2100      	movs	r1, #0
			LP_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = LP_data_tentho[i] | LP_data_tho[i] | LP_data_hun[i] | LP_data_ten[i] | LP_data_one[i];
 800502a:	2620      	movs	r6, #32
 800502c:	a802      	add	r0, sp, #8
 800502e:	586c      	ldr	r4, [r5, r1]
 8005030:	5840      	ldr	r0, [r0, r1]
 8005032:	4320      	orrs	r0, r4
 8005034:	ac02      	add	r4, sp, #8
 8005036:	19a4      	adds	r4, r4, r6
 8005038:	5864      	ldr	r4, [r4, r1]
 800503a:	4320      	orrs	r0, r4
 800503c:	5854      	ldr	r4, [r2, r1]
 800503e:	4320      	orrs	r0, r4
 8005040:	585c      	ldr	r4, [r3, r1]
 8005042:	4320      	orrs	r0, r4
 8005044:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8005046:	5060      	str	r0, [r4, r1]
    for(int i = 0; i<4; i++)
 8005048:	3104      	adds	r1, #4
 800504a:	2910      	cmp	r1, #16
 800504c:	d1ed      	bne.n	800502a <LCD_Display_LP_Number+0x2da>
    }
}
 800504e:	b017      	add	sp, #92	@ 0x5c
 8005050:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LP_data_one[0] = 0x0000002;
 8005052:	2102      	movs	r1, #2
 8005054:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000002;
 8005056:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000001;
 8005058:	3901      	subs	r1, #1
 800505a:	6099      	str	r1, [r3, #8]
			LP_data_one[3] = 0x0000003;
 800505c:	3102      	adds	r1, #2
			LP_data_one[3] = 0x0000002;
 800505e:	60d9      	str	r1, [r3, #12]
    for(int i = 0; i<4; i++)
 8005060:	e7e2      	b.n	8005028 <LCD_Display_LP_Number+0x2d8>
			LP_data_one[0] = 0x0000002;
 8005062:	2102      	movs	r1, #2
 8005064:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000002;
 8005066:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005068:	2003      	movs	r0, #3
 800506a:	e7d8      	b.n	800501e <LCD_Display_LP_Number+0x2ce>
			LP_data_one[1] = 0x0000003;
 800506c:	2103      	movs	r1, #3
 800506e:	e7d9      	b.n	8005024 <LCD_Display_LP_Number+0x2d4>
			LP_data_one[0] = 0x0000002;
 8005070:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000001;
 8005072:	2001      	movs	r0, #1
			LP_data_one[0] = 0x0000002;
 8005074:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000001;
 8005076:	6058      	str	r0, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005078:	e7f6      	b.n	8005068 <LCD_Display_LP_Number+0x318>
			LP_data_one[0] = 0x0000002;
 800507a:	2102      	movs	r1, #2
 800507c:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000001;
 800507e:	3901      	subs	r1, #1
 8005080:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005082:	3102      	adds	r1, #2
			LP_data_one[2] = 0x0000003;
 8005084:	6099      	str	r1, [r3, #8]
			LP_data_one[3] = 0x0000003;
 8005086:	e7ea      	b.n	800505e <LCD_Display_LP_Number+0x30e>
			LP_data_one[0] = 0x0000002;
 8005088:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 800508a:	2003      	movs	r0, #3
			LP_data_one[0] = 0x0000002;
 800508c:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 800508e:	6058      	str	r0, [r3, #4]
			LP_data_one[2] = 0x0000002;
 8005090:	e7c9      	b.n	8005026 <LCD_Display_LP_Number+0x2d6>
			LP_data_one[0] = 0x0000002;
 8005092:	2102      	movs	r1, #2
 8005094:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 8005096:	3101      	adds	r1, #1
 8005098:	6059      	str	r1, [r3, #4]
 800509a:	e7f3      	b.n	8005084 <LCD_Display_LP_Number+0x334>
			LP_data_one[0] = 0x0000002;
 800509c:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 800509e:	2003      	movs	r0, #3
			LP_data_one[0] = 0x0000002;
 80050a0:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 80050a2:	6058      	str	r0, [r3, #4]
 80050a4:	e7bb      	b.n	800501e <LCD_Display_LP_Number+0x2ce>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	00020004 	.word	0x00020004
 80050ac:	00200200 	.word	0x00200200

080050b0 <LCD_DigitNumber_LP_Calculate>:
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b085      	sub	sp, #20
 80050b4:	9102      	str	r1, [sp, #8]
	number %= 10000;
 80050b6:	491b      	ldr	r1, [pc, #108]	@ (8005124 <LCD_DigitNumber_LP_Calculate+0x74>)
{
 80050b8:	0005      	movs	r5, r0
	number %= 10000;
 80050ba:	f7fb f8db 	bl	8000274 <__aeabi_uidivmod>
 80050be:	b28e      	uxth	r6, r1
    number %= 1000;
 80050c0:	21fa      	movs	r1, #250	@ 0xfa
 80050c2:	0030      	movs	r0, r6
 80050c4:	0089      	lsls	r1, r1, #2
 80050c6:	f7fb f8d5 	bl	8000274 <__aeabi_uidivmod>
 80050ca:	b28f      	uxth	r7, r1
    number %= 100;
 80050cc:	0038      	movs	r0, r7
 80050ce:	2164      	movs	r1, #100	@ 0x64
 80050d0:	f7fb f8d0 	bl	8000274 <__aeabi_uidivmod>
 80050d4:	b28c      	uxth	r4, r1
    tens      = number / 10;
 80050d6:	0020      	movs	r0, r4
 80050d8:	210a      	movs	r1, #10
 80050da:	f7fb f845 	bl	8000168 <__udivsi3>
    hundreds  = number / 100;
 80050de:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050e0:	b2c3      	uxtb	r3, r0
    hundreds  = number / 100;
 80050e2:	0038      	movs	r0, r7
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050e4:	9303      	str	r3, [sp, #12]
    hundreds  = number / 100;
 80050e6:	f7fb f83f 	bl	8000168 <__udivsi3>
    thousands = number / 1000;
 80050ea:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050ec:	b2c7      	uxtb	r7, r0
    thousands = number / 1000;
 80050ee:	0089      	lsls	r1, r1, #2
 80050f0:	0030      	movs	r0, r6
 80050f2:	f7fb f839 	bl	8000168 <__udivsi3>
	ten_thousands = number / 10000;
 80050f6:	490b      	ldr	r1, [pc, #44]	@ (8005124 <LCD_DigitNumber_LP_Calculate+0x74>)
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050f8:	b2c6      	uxtb	r6, r0
	ten_thousands = number / 10000;
 80050fa:	0028      	movs	r0, r5
 80050fc:	f7fb f834 	bl	8000168 <__udivsi3>
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	b2c5      	uxtb	r5, r0
    ones      = number % 10;
 8005104:	210a      	movs	r1, #10
 8005106:	0020      	movs	r0, r4
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 8005108:	9301      	str	r3, [sp, #4]
    ones      = number % 10;
 800510a:	f7fb f8b3 	bl	8000274 <__aeabi_uidivmod>
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 800510e:	b2c9      	uxtb	r1, r1
 8005110:	9100      	str	r1, [sp, #0]
 8005112:	003a      	movs	r2, r7
 8005114:	0031      	movs	r1, r6
 8005116:	0028      	movs	r0, r5
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	f7ff fe19 	bl	8004d50 <LCD_Display_LP_Number>
}
 800511e:	b005      	add	sp, #20
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	00002710 	.word	0x00002710

08005128 <LCD_Display_LP>:
{
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	0007      	movs	r7, r0
 800512c:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 800512e:	4d16      	ldr	r5, [pc, #88]	@ (8005188 <LCD_Display_LP+0x60>)
{
 8005130:	0016      	movs	r6, r2
	HAL_LCD_Clear(&hlcd);
 8005132:	0028      	movs	r0, r5
 8005134:	f00a fbc9 	bl	800f8ca <HAL_LCD_Clear>
	LCD_DigitNumber_LP_Calculate(index, data);
 8005138:	0021      	movs	r1, r4
 800513a:	b2b8      	uxth	r0, r7
 800513c:	f7ff ffb8 	bl	80050b0 <LCD_DigitNumber_LP_Calculate>
	if (Packet_dose_unit)
 8005140:	2310      	movs	r3, #16
 8005142:	2e00      	cmp	r6, #0
 8005144:	d01b      	beq.n	800517e <LCD_Display_LP+0x56>
	data[1] = data[1] | 0x0000010; //L-R on
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	4313      	orrs	r3, r2
 800514a:	6063      	str	r3, [r4, #4]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800514c:	0028      	movs	r0, r5
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	2100      	movs	r1, #0
 8005152:	4a0e      	ldr	r2, [pc, #56]	@ (800518c <LCD_Display_LP+0x64>)
 8005154:	f00a fb58 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005158:	0028      	movs	r0, r5
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	2102      	movs	r1, #2
 800515e:	4a0b      	ldr	r2, [pc, #44]	@ (800518c <LCD_Display_LP+0x64>)
 8005160:	f00a fb52 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005164:	0028      	movs	r0, r5
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	2104      	movs	r1, #4
 800516a:	4a08      	ldr	r2, [pc, #32]	@ (800518c <LCD_Display_LP+0x64>)
 800516c:	f00a fb4c 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005170:	0028      	movs	r0, r5
 8005172:	2106      	movs	r1, #6
 8005174:	68e3      	ldr	r3, [r4, #12]
 8005176:	4a05      	ldr	r2, [pc, #20]	@ (800518c <LCD_Display_LP+0x64>)
 8005178:	f00a fb46 	bl	800f808 <HAL_LCD_Write>
}
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	data[0] = data[0] | 0x0000010; //L-T on
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	e7e2      	b.n	800514c <LCD_Display_LP+0x24>
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	20000a80 	.word	0x20000a80
 800518c:	f7fffffe 	.word	0xf7fffffe

08005190 <LCD_DigitNumber_InTime_Calculate>:
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
void LCD_DigitNumber_InTime_Calculate(uint16_t number, uint32_t *data)
{
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b08f      	sub	sp, #60	@ 0x3c
 8005194:	0004      	movs	r4, r0
	uint8_t s1= 0;
	uint8_t s0= 0;
	uint8_t hours = 0;
	uint8_t minutes = 0;
	uint8_t seconds = 0;
	uint32_t data_hour[4] = {0};
 8005196:	2210      	movs	r2, #16
{
 8005198:	9100      	str	r1, [sp, #0]
	uint32_t data_min[4] = {0};
 800519a:	af06      	add	r7, sp, #24
	uint32_t data_hour[4] = {0};
 800519c:	2100      	movs	r1, #0
 800519e:	a802      	add	r0, sp, #8
 80051a0:	f015 f9a8 	bl	801a4f4 <memset>
	uint32_t data_min[4] = {0};
 80051a4:	2210      	movs	r2, #16
 80051a6:	2100      	movs	r1, #0
 80051a8:	0038      	movs	r0, r7
 80051aa:	f015 f9a3 	bl	801a4f4 <memset>
	uint32_t data_sec[4] = {0};
 80051ae:	2210      	movs	r2, #16
 80051b0:	2100      	movs	r1, #0
 80051b2:	a80a      	add	r0, sp, #40	@ 0x28
 80051b4:	f015 f99e 	bl	801a4f4 <memset>

    hours   = number / 3600;
 80051b8:	21e1      	movs	r1, #225	@ 0xe1
 80051ba:	0020      	movs	r0, r4
 80051bc:	0109      	lsls	r1, r1, #4
 80051be:	f7fa ffd3 	bl	8000168 <__udivsi3>
    number %= 3600;
 80051c2:	21e1      	movs	r1, #225	@ 0xe1
    hours   = number / 3600;
 80051c4:	b2c6      	uxtb	r6, r0
    number %= 3600;
 80051c6:	0109      	lsls	r1, r1, #4
 80051c8:	0020      	movs	r0, r4
 80051ca:	f7fb f853 	bl	8000274 <__aeabi_uidivmod>
 80051ce:	b28c      	uxth	r4, r1
    minutes = number / 60;
 80051d0:	0020      	movs	r0, r4
 80051d2:	213c      	movs	r1, #60	@ 0x3c
 80051d4:	f7fa ffc8 	bl	8000168 <__udivsi3>
    seconds = number % 60;
 80051d8:	213c      	movs	r1, #60	@ 0x3c
    minutes = number / 60;
 80051da:	b2c5      	uxtb	r5, r0
    seconds = number % 60;
 80051dc:	0020      	movs	r0, r4
 80051de:	f7fb f849 	bl	8000274 <__aeabi_uidivmod>

    h1 = hours / 10;
    h0 = hours % 10;
 80051e2:	0030      	movs	r0, r6
    seconds = number % 60;
 80051e4:	b2cc      	uxtb	r4, r1
    h0 = hours % 10;
 80051e6:	210a      	movs	r1, #10
 80051e8:	f7fb f844 	bl	8000274 <__aeabi_uidivmod>
    h1 = hours / 10;
 80051ec:	0030      	movs	r0, r6
    m1 = minutes / 10;
    m0 = minutes % 10;
    s1 = seconds / 10;
    s0 = seconds % 10;

    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051ee:	b2cb      	uxtb	r3, r1
    h1 = hours / 10;
 80051f0:	210a      	movs	r1, #10
    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051f2:	9301      	str	r3, [sp, #4]
    h1 = hours / 10;
 80051f4:	f7fa ffb8 	bl	8000168 <__udivsi3>
    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051f8:	aa02      	add	r2, sp, #8
 80051fa:	9901      	ldr	r1, [sp, #4]
 80051fc:	b2c0      	uxtb	r0, r0
 80051fe:	f7ff f809 	bl	8004214 <LCD_Display_Year_Hour_Number>
    m0 = minutes % 10;
 8005202:	0028      	movs	r0, r5
 8005204:	210a      	movs	r1, #10
 8005206:	f7fb f835 	bl	8000274 <__aeabi_uidivmod>
    m1 = minutes / 10;
 800520a:	0028      	movs	r0, r5
    LCD_Display_Month_Min_Number(m1, m0, data_min);
 800520c:	b2ce      	uxtb	r6, r1
    m1 = minutes / 10;
 800520e:	210a      	movs	r1, #10
 8005210:	f7fa ffaa 	bl	8000168 <__udivsi3>
    LCD_Display_Month_Min_Number(m1, m0, data_min);
 8005214:	003a      	movs	r2, r7
 8005216:	0031      	movs	r1, r6
 8005218:	b2c0      	uxtb	r0, r0
 800521a:	f7ff f8e1 	bl	80043e0 <LCD_Display_Month_Min_Number>
    s0 = seconds % 10;
 800521e:	210a      	movs	r1, #10
 8005220:	0020      	movs	r0, r4
 8005222:	f7fb f827 	bl	8000274 <__aeabi_uidivmod>
    s1 = seconds / 10;
 8005226:	0020      	movs	r0, r4
    LCD_Display_Day_Sec_Number(s1, s0, data_sec);
 8005228:	b2cd      	uxtb	r5, r1
    s1 = seconds / 10;
 800522a:	210a      	movs	r1, #10
 800522c:	f7fa ff9c 	bl	8000168 <__udivsi3>
    LCD_Display_Day_Sec_Number(s1, s0, data_sec);
 8005230:	0029      	movs	r1, r5
 8005232:	b2c0      	uxtb	r0, r0
 8005234:	aa0a      	add	r2, sp, #40	@ 0x28
 8005236:	f7ff f998 	bl	800456a <LCD_Display_Day_Sec_Number>
 800523a:	2300      	movs	r3, #0
    for(int i=0; i<4; i++)
    {
    	data[i] = data_hour[i] | data_min[i] | data_sec[i];
 800523c:	2020      	movs	r0, #32
 800523e:	aa02      	add	r2, sp, #8
 8005240:	58f9      	ldr	r1, [r7, r3]
 8005242:	58d2      	ldr	r2, [r2, r3]
 8005244:	430a      	orrs	r2, r1
 8005246:	a902      	add	r1, sp, #8
 8005248:	1809      	adds	r1, r1, r0
 800524a:	58c9      	ldr	r1, [r1, r3]
 800524c:	430a      	orrs	r2, r1
 800524e:	9900      	ldr	r1, [sp, #0]
 8005250:	50ca      	str	r2, [r1, r3]
    for(int i=0; i<4; i++)
 8005252:	3304      	adds	r3, #4
 8005254:	2b10      	cmp	r3, #16
 8005256:	d1f1      	bne.n	800523c <LCD_DigitNumber_InTime_Calculate+0xac>
    }
}
 8005258:	b00f      	add	sp, #60	@ 0x3c
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800525c <LCD_Display_DelayMode>:
{
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	000c      	movs	r4, r1
	memset(data, 0, sizeof(data));
 8005260:	2704      	movs	r7, #4
{
 8005262:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 8005264:	4d18      	ldr	r5, [pc, #96]	@ (80052c8 <LCD_Display_DelayMode+0x6c>)
 8005266:	0028      	movs	r0, r5
 8005268:	f00a fb2f 	bl	800f8ca <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 800526c:	003a      	movs	r2, r7
 800526e:	2100      	movs	r1, #0
 8005270:	0020      	movs	r0, r4
 8005272:	f015 f93f 	bl	801a4f4 <memset>
	HAL_LCD_Clear(&hlcd);
 8005276:	0028      	movs	r0, r5
 8005278:	f00a fb27 	bl	800f8ca <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 800527c:	0021      	movs	r1, r4
 800527e:	b2b0      	uxth	r0, r6
 8005280:	f7ff ff86 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <LCD_Display_DelayMode+0x70>)
	data[3] = data[3] | 0x4000000;
 8005288:	68e1      	ldr	r1, [r4, #12]
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 800528a:	4313      	orrs	r3, r2
	data[3] = data[3] | 0x4000000;
 800528c:	2280      	movs	r2, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800528e:	4e10      	ldr	r6, [pc, #64]	@ (80052d0 <LCD_Display_DelayMode+0x74>)
	data[3] = data[3] | 0x4000000;
 8005290:	04d2      	lsls	r2, r2, #19
 8005292:	430a      	orrs	r2, r1
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005294:	0028      	movs	r0, r5
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 8005296:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x4000000;
 8005298:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800529a:	2100      	movs	r1, #0
 800529c:	0032      	movs	r2, r6
 800529e:	f00a fab3 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80052a2:	0032      	movs	r2, r6
 80052a4:	0028      	movs	r0, r5
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	2102      	movs	r1, #2
 80052aa:	f00a faad 	bl	800f808 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80052ae:	0032      	movs	r2, r6
 80052b0:	0039      	movs	r1, r7
 80052b2:	0028      	movs	r0, r5
 80052b4:	68a3      	ldr	r3, [r4, #8]
 80052b6:	f00a faa7 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80052ba:	0032      	movs	r2, r6
 80052bc:	0028      	movs	r0, r5
 80052be:	2106      	movs	r1, #6
 80052c0:	68e3      	ldr	r3, [r4, #12]
 80052c2:	f00a faa1 	bl	800f808 <HAL_LCD_Write>
}
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c8:	20000a80 	.word	0x20000a80
 80052cc:	00010080 	.word	0x00010080
 80052d0:	f7fffffe 	.word	0xf7fffffe

080052d4 <LCD_Display_InTime_LT>:
{
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	000c      	movs	r4, r1
 80052d8:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 80052da:	4d18      	ldr	r5, [pc, #96]	@ (800533c <LCD_Display_InTime_LT+0x68>)
 80052dc:	0028      	movs	r0, r5
 80052de:	f00a faf4 	bl	800f8ca <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 80052e2:	0021      	movs	r1, r4
 80052e4:	b2b0      	uxth	r0, r6
 80052e6:	f7ff ff53 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <LCD_Display_InTime_LT+0x6c>)
	data[1] = data[1] | 0x200B000;
 80052ee:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 80052f0:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x200B000;
 80052f2:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <LCD_Display_InTime_LT+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80052f4:	4e14      	ldr	r6, [pc, #80]	@ (8005348 <LCD_Display_InTime_LT+0x74>)
	data[1] = data[1] | 0x200B000;
 80052f6:	430a      	orrs	r2, r1
 80052f8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300B020;
 80052fa:	68a1      	ldr	r1, [r4, #8]
 80052fc:	4a13      	ldr	r2, [pc, #76]	@ (800534c <LCD_Display_InTime_LT+0x78>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80052fe:	0028      	movs	r0, r5
	data[2] = data[2] | 0x300B020;
 8005300:	430a      	orrs	r2, r1
 8005302:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x100E030;
 8005304:	68e1      	ldr	r1, [r4, #12]
 8005306:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <LCD_Display_InTime_LT+0x7c>)
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 8005308:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x100E030;
 800530a:	430a      	orrs	r2, r1
 800530c:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800530e:	2100      	movs	r1, #0
 8005310:	0032      	movs	r2, r6
 8005312:	f00a fa79 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005316:	0032      	movs	r2, r6
 8005318:	0028      	movs	r0, r5
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	2102      	movs	r1, #2
 800531e:	f00a fa73 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005322:	0032      	movs	r2, r6
 8005324:	0028      	movs	r0, r5
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	2104      	movs	r1, #4
 800532a:	f00a fa6d 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800532e:	0032      	movs	r2, r6
 8005330:	0028      	movs	r0, r5
 8005332:	2106      	movs	r1, #6
 8005334:	68e3      	ldr	r3, [r4, #12]
 8005336:	f00a fa67 	bl	800f808 <HAL_LCD_Write>
}
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	20000a80 	.word	0x20000a80
 8005340:	01011090 	.word	0x01011090
 8005344:	0200b000 	.word	0x0200b000
 8005348:	f7fffffe 	.word	0xf7fffffe
 800534c:	0300b020 	.word	0x0300b020
 8005350:	0100e030 	.word	0x0100e030

08005354 <LCD_Display_InTime_LR>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	000c      	movs	r4, r1
 8005358:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 800535a:	4d18      	ldr	r5, [pc, #96]	@ (80053bc <LCD_Display_InTime_LR+0x68>)
 800535c:	0028      	movs	r0, r5
 800535e:	f00a fab4 	bl	800f8ca <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 8005362:	0021      	movs	r1, r4
 8005364:	b2b0      	uxth	r0, r6
 8005366:	f7ff ff13 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <LCD_Display_InTime_LR+0x6c>)
	data[1] = data[1] | 0x200B010;
 800536e:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 8005370:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x200B010;
 8005372:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <LCD_Display_InTime_LR+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005374:	4e14      	ldr	r6, [pc, #80]	@ (80053c8 <LCD_Display_InTime_LR+0x74>)
	data[1] = data[1] | 0x200B010;
 8005376:	430a      	orrs	r2, r1
 8005378:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300B020;
 800537a:	68a1      	ldr	r1, [r4, #8]
 800537c:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <LCD_Display_InTime_LR+0x78>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800537e:	0028      	movs	r0, r5
	data[2] = data[2] | 0x300B020;
 8005380:	430a      	orrs	r2, r1
 8005382:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x100E030;
 8005384:	68e1      	ldr	r1, [r4, #12]
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <LCD_Display_InTime_LR+0x7c>)
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 8005388:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x100E030;
 800538a:	430a      	orrs	r2, r1
 800538c:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800538e:	2100      	movs	r1, #0
 8005390:	0032      	movs	r2, r6
 8005392:	f00a fa39 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005396:	0032      	movs	r2, r6
 8005398:	0028      	movs	r0, r5
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	2102      	movs	r1, #2
 800539e:	f00a fa33 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80053a2:	0032      	movs	r2, r6
 80053a4:	0028      	movs	r0, r5
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	2104      	movs	r1, #4
 80053aa:	f00a fa2d 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80053ae:	0032      	movs	r2, r6
 80053b0:	0028      	movs	r0, r5
 80053b2:	2106      	movs	r1, #6
 80053b4:	68e3      	ldr	r3, [r4, #12]
 80053b6:	f00a fa27 	bl	800f808 <HAL_LCD_Write>
}
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	20000a80 	.word	0x20000a80
 80053c0:	01011080 	.word	0x01011080
 80053c4:	0200b010 	.word	0x0200b010
 80053c8:	f7fffffe 	.word	0xf7fffffe
 80053cc:	0300b020 	.word	0x0300b020
 80053d0:	0100e030 	.word	0x0100e030

080053d4 <LCD_Display_EndMode>:

void LCD_Display_EndMode(uint32_t *data)
{
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 80053d8:	4d15      	ldr	r5, [pc, #84]	@ (8005430 <LCD_Display_EndMode+0x5c>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x1000000; // 'End' 표시
	data[1] = data[1] | 0x2001000;
	data[2] = data[2] | 0x200F000;
	data[3] = data[3] | 0x300B000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80053da:	4e16      	ldr	r6, [pc, #88]	@ (8005434 <LCD_Display_EndMode+0x60>)
	HAL_LCD_Clear(&hlcd);
 80053dc:	0028      	movs	r0, r5
 80053de:	f00a fa74 	bl	800f8ca <HAL_LCD_Clear>
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053e2:	2380      	movs	r3, #128	@ 0x80
	data[1] = data[1] | 0x2001000;
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <LCD_Display_EndMode+0x64>)
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053e8:	045b      	lsls	r3, r3, #17
	data[1] = data[1] | 0x2001000;
 80053ea:	430a      	orrs	r2, r1
 80053ec:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x200F000;
 80053ee:	68a1      	ldr	r1, [r4, #8]
 80053f0:	4a12      	ldr	r2, [pc, #72]	@ (800543c <LCD_Display_EndMode+0x68>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80053f2:	0028      	movs	r0, r5
	data[2] = data[2] | 0x200F000;
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x300B000;
 80053f8:	68e1      	ldr	r1, [r4, #12]
 80053fa:	4a11      	ldr	r2, [pc, #68]	@ (8005440 <LCD_Display_EndMode+0x6c>)
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053fc:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x300B000;
 80053fe:	430a      	orrs	r2, r1
 8005400:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005402:	2100      	movs	r1, #0
 8005404:	0032      	movs	r2, r6
 8005406:	f00a f9ff 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 800540a:	0032      	movs	r2, r6
 800540c:	0028      	movs	r0, r5
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	2102      	movs	r1, #2
 8005412:	f00a f9f9 	bl	800f808 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005416:	0032      	movs	r2, r6
 8005418:	0028      	movs	r0, r5
 800541a:	68a3      	ldr	r3, [r4, #8]
 800541c:	2104      	movs	r1, #4
 800541e:	f00a f9f3 	bl	800f808 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005422:	0032      	movs	r2, r6
 8005424:	0028      	movs	r0, r5
 8005426:	2106      	movs	r1, #6
 8005428:	68e3      	ldr	r3, [r4, #12]
 800542a:	f00a f9ed 	bl	800f808 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//stop 글자, stop 표시
}
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	20000a80 	.word	0x20000a80
 8005434:	f7fffffe 	.word	0xf7fffffe
 8005438:	02001000 	.word	0x02001000
 800543c:	0200f000 	.word	0x0200f000
 8005440:	0300b000 	.word	0x0300b000

08005444 <now_epoch_from_rtc>:
volatile bool RTC_During_Wakeup = 0;
uint32_t start_remaining;
UINT cur_record_num = 0;

static uint32_t now_epoch_from_rtc(void)
{
 8005444:	b570      	push	{r4, r5, r6, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005446:	4e0d      	ldr	r6, [pc, #52]	@ (800547c <now_epoch_from_rtc+0x38>)
{
 8005448:	b088      	sub	sp, #32
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800544a:	ac03      	add	r4, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 800544c:	ad02      	add	r5, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800544e:	0021      	movs	r1, r4
 8005450:	2200      	movs	r2, #0
 8005452:	0030      	movs	r0, r6
 8005454:	f00c fd90 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005458:	0029      	movs	r1, r5
 800545a:	2200      	movs	r2, #0
 800545c:	0030      	movs	r0, r6
 800545e:	f00c fdbd 	bl	8011fdc <HAL_RTC_GetDate>
    return ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8005462:	78aa      	ldrb	r2, [r5, #2]
 8005464:	7869      	ldrb	r1, [r5, #1]
 8005466:	78e8      	ldrb	r0, [r5, #3]
 8005468:	78a5      	ldrb	r5, [r4, #2]
 800546a:	7823      	ldrb	r3, [r4, #0]
 800546c:	9501      	str	r5, [sp, #4]
 800546e:	7864      	ldrb	r4, [r4, #1]
 8005470:	9400      	str	r4, [sp, #0]
 8005472:	f004 fa29 	bl	80098c8 <ymd_to_epoch>
}
 8005476:	b008      	add	sp, #32
 8005478:	bd70      	pop	{r4, r5, r6, pc}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	200009f8 	.word	0x200009f8

08005480 <days_in_month>:

    // --- PWR Wakeup Flag (모든 소스 공통) ---
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
}
static bool is_leap(uint16_t y2000){ uint16_t y=2000+y2000; return ((y%4==0)&& (y%100!=0)) || (y%400==0); }
static uint8_t days_in_month(uint8_t m, uint8_t y2000){
 8005480:	b510      	push	{r4, lr}
    static const uint8_t dim[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 8005482:	2802      	cmp	r0, #2
 8005484:	d116      	bne.n	80054b4 <days_in_month+0x34>
static bool is_leap(uint16_t y2000){ uint16_t y=2000+y2000; return ((y%4==0)&& (y%100!=0)) || (y%400==0); }
 8005486:	23fa      	movs	r3, #250	@ 0xfa
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	18cc      	adds	r4, r1, r3
 800548c:	0789      	lsls	r1, r1, #30
 800548e:	d107      	bne.n	80054a0 <days_in_month+0x20>
 8005490:	2164      	movs	r1, #100	@ 0x64
 8005492:	0020      	movs	r0, r4
 8005494:	f7fa feee 	bl	8000274 <__aeabi_uidivmod>
 8005498:	b289      	uxth	r1, r1
 800549a:	2001      	movs	r0, #1
 800549c:	2900      	cmp	r1, #0
 800549e:	d107      	bne.n	80054b0 <days_in_month+0x30>
 80054a0:	21c8      	movs	r1, #200	@ 0xc8
 80054a2:	0020      	movs	r0, r4
 80054a4:	0049      	lsls	r1, r1, #1
 80054a6:	f7fa fee5 	bl	8000274 <__aeabi_uidivmod>
 80054aa:	b288      	uxth	r0, r1
 80054ac:	4243      	negs	r3, r0
 80054ae:	4158      	adcs	r0, r3
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 80054b0:	301c      	adds	r0, #28
}
 80054b2:	bd10      	pop	{r4, pc}
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 80054b4:	4b01      	ldr	r3, [pc, #4]	@ (80054bc <days_in_month+0x3c>)
 80054b6:	5cc0      	ldrb	r0, [r0, r3]
 80054b8:	e7fb      	b.n	80054b2 <days_in_month+0x32>
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	080203ed 	.word	0x080203ed

080054c0 <read_temperature_steinhart_low>:
{
 80054c0:	b570      	push	{r4, r5, r6, lr}
    r_ntc = RPULLUP_low *((float)adc_value/(4095 - (float)adc_value));
 80054c2:	f7fc f983 	bl	80017cc <__aeabi_ui2f>
 80054c6:	1c04      	adds	r4, r0, #0
 80054c8:	1c01      	adds	r1, r0, #0
 80054ca:	4815      	ldr	r0, [pc, #84]	@ (8005520 <read_temperature_steinhart_low+0x60>)
 80054cc:	f7fb fe94 	bl	80011f8 <__aeabi_fsub>
 80054d0:	1c01      	adds	r1, r0, #0
 80054d2:	1c20      	adds	r0, r4, #0
 80054d4:	f7fb fb68 	bl	8000ba8 <__aeabi_fdiv>
 80054d8:	4912      	ldr	r1, [pc, #72]	@ (8005524 <read_temperature_steinhart_low+0x64>)
 80054da:	f7fb fd33 	bl	8000f44 <__aeabi_fmul>
    ln_r = logf(r_ntc);
 80054de:	f017 f923 	bl	801c728 <logf>
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 80054e2:	4911      	ldr	r1, [pc, #68]	@ (8005528 <read_temperature_steinhart_low+0x68>)
    ln_r = logf(r_ntc);
 80054e4:	1c04      	adds	r4, r0, #0
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 80054e6:	f7fb fd2d 	bl	8000f44 <__aeabi_fmul>
 80054ea:	1c21      	adds	r1, r4, #0
 80054ec:	f7fb fd2a 	bl	8000f44 <__aeabi_fmul>
 80054f0:	1c21      	adds	r1, r4, #0
 80054f2:	f7fb fd27 	bl	8000f44 <__aeabi_fmul>
 80054f6:	490d      	ldr	r1, [pc, #52]	@ (800552c <read_temperature_steinhart_low+0x6c>)
 80054f8:	1c05      	adds	r5, r0, #0
 80054fa:	1c20      	adds	r0, r4, #0
 80054fc:	f7fb fd22 	bl	8000f44 <__aeabi_fmul>
 8005500:	490b      	ldr	r1, [pc, #44]	@ (8005530 <read_temperature_steinhart_low+0x70>)
 8005502:	f7fb f95f 	bl	80007c4 <__aeabi_fadd>
 8005506:	1c01      	adds	r1, r0, #0
 8005508:	1c28      	adds	r0, r5, #0
 800550a:	f7fb f95b 	bl	80007c4 <__aeabi_fadd>
 800550e:	1c01      	adds	r1, r0, #0
    T_K = 1.0f / inv_T;
 8005510:	20fe      	movs	r0, #254	@ 0xfe
 8005512:	0580      	lsls	r0, r0, #22
 8005514:	f7fb fb48 	bl	8000ba8 <__aeabi_fdiv>
    T_C = T_K - 273.15f;
 8005518:	4906      	ldr	r1, [pc, #24]	@ (8005534 <read_temperature_steinhart_low+0x74>)
 800551a:	f7fb fe6d 	bl	80011f8 <__aeabi_fsub>
}
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	457ff000 	.word	0x457ff000
 8005524:	49dbba00 	.word	0x49dbba00
 8005528:	33ba65a6 	.word	0x33ba65a6
 800552c:	3975c4dc 	.word	0x3975c4dc
 8005530:	3a93c6dc 	.word	0x3a93c6dc
 8005534:	43889333 	.word	0x43889333

08005538 <read_temperature_steinhart_middle>:
{
 8005538:	b570      	push	{r4, r5, r6, lr}
    r_ntc = RPULLUP_middle *((float)adc_value/(4095 - (float)adc_value));
 800553a:	f7fc f947 	bl	80017cc <__aeabi_ui2f>
 800553e:	1c04      	adds	r4, r0, #0
 8005540:	1c01      	adds	r1, r0, #0
 8005542:	4815      	ldr	r0, [pc, #84]	@ (8005598 <read_temperature_steinhart_middle+0x60>)
 8005544:	f7fb fe58 	bl	80011f8 <__aeabi_fsub>
 8005548:	1c01      	adds	r1, r0, #0
 800554a:	1c20      	adds	r0, r4, #0
 800554c:	f7fb fb2c 	bl	8000ba8 <__aeabi_fdiv>
 8005550:	4912      	ldr	r1, [pc, #72]	@ (800559c <read_temperature_steinhart_middle+0x64>)
 8005552:	f7fb fcf7 	bl	8000f44 <__aeabi_fmul>
    ln_r = logf(r_ntc);
 8005556:	f017 f8e7 	bl	801c728 <logf>
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 800555a:	4911      	ldr	r1, [pc, #68]	@ (80055a0 <read_temperature_steinhart_middle+0x68>)
    ln_r = logf(r_ntc);
 800555c:	1c04      	adds	r4, r0, #0
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 800555e:	f7fb fcf1 	bl	8000f44 <__aeabi_fmul>
 8005562:	1c21      	adds	r1, r4, #0
 8005564:	f7fb fcee 	bl	8000f44 <__aeabi_fmul>
 8005568:	1c21      	adds	r1, r4, #0
 800556a:	f7fb fceb 	bl	8000f44 <__aeabi_fmul>
 800556e:	490d      	ldr	r1, [pc, #52]	@ (80055a4 <read_temperature_steinhart_middle+0x6c>)
 8005570:	1c05      	adds	r5, r0, #0
 8005572:	1c20      	adds	r0, r4, #0
 8005574:	f7fb fce6 	bl	8000f44 <__aeabi_fmul>
 8005578:	490b      	ldr	r1, [pc, #44]	@ (80055a8 <read_temperature_steinhart_middle+0x70>)
 800557a:	f7fb f923 	bl	80007c4 <__aeabi_fadd>
 800557e:	1c01      	adds	r1, r0, #0
 8005580:	1c28      	adds	r0, r5, #0
 8005582:	f7fb f91f 	bl	80007c4 <__aeabi_fadd>
 8005586:	1c01      	adds	r1, r0, #0
    T_K = 1.0f / inv_T;
 8005588:	20fe      	movs	r0, #254	@ 0xfe
 800558a:	0580      	lsls	r0, r0, #22
 800558c:	f7fb fb0c 	bl	8000ba8 <__aeabi_fdiv>
    T_C = T_K - 273.15f;
 8005590:	4906      	ldr	r1, [pc, #24]	@ (80055ac <read_temperature_steinhart_middle+0x74>)
 8005592:	f7fb fe31 	bl	80011f8 <__aeabi_fsub>
}
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	457ff000 	.word	0x457ff000
 800559c:	484d1400 	.word	0x484d1400
 80055a0:	33a8d38a 	.word	0x33a8d38a
 80055a4:	39590111 	.word	0x39590111
 80055a8:	3a5f3a52 	.word	0x3a5f3a52
 80055ac:	43889333 	.word	0x43889333

080055b0 <compare_temperature>:
{
 80055b0:	b570      	push	{r4, r5, r6, lr}
    if (use_sensor1)
 80055b2:	4e0c      	ldr	r6, [pc, #48]	@ (80055e4 <compare_temperature+0x34>)
{
 80055b4:	1c04      	adds	r4, r0, #0
    if (use_sensor1)
 80055b6:	7833      	ldrb	r3, [r6, #0]
{
 80055b8:	1c0d      	adds	r5, r1, #0
    if (use_sensor1)
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <compare_temperature+0x22>
        if (Temp_Low <= -61.0f)
 80055be:	490a      	ldr	r1, [pc, #40]	@ (80055e8 <compare_temperature+0x38>)
 80055c0:	1c28      	adds	r0, r5, #0
 80055c2:	f7fa ffa1 	bl	8000508 <__aeabi_fcmple>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d00a      	beq.n	80055e0 <compare_temperature+0x30>
            use_sensor1 = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	7033      	strb	r3, [r6, #0]
    return (use_sensor1 ? Temp_Middle : Temp_Low);
 80055ce:	1c2c      	adds	r4, r5, #0
 80055d0:	e006      	b.n	80055e0 <compare_temperature+0x30>
        if (Temp_Middle >= -59.0f)
 80055d2:	4906      	ldr	r1, [pc, #24]	@ (80055ec <compare_temperature+0x3c>)
 80055d4:	f7fa ffac 	bl	8000530 <__aeabi_fcmpge>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d0f8      	beq.n	80055ce <compare_temperature+0x1e>
            use_sensor1 = 1;
 80055dc:	2301      	movs	r3, #1
 80055de:	7033      	strb	r3, [r6, #0]
}
 80055e0:	1c20      	adds	r0, r4, #0
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	20000008 	.word	0x20000008
 80055e8:	c2740000 	.word	0xc2740000
 80055ec:	c26c0000 	.word	0xc26c0000

080055f0 <Read_Temp>:
	temperature1_avg = 0;
 80055f0:	2300      	movs	r3, #0
void Read_Temp(){
 80055f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	temperature2_avg = 0;
 80055f4:	270a      	movs	r7, #10
	temperature1_avg = 0;
 80055f6:	4e2f      	ldr	r6, [pc, #188]	@ (80056b4 <Read_Temp+0xc4>)
	temperature2_avg = 0;
 80055f8:	4d2f      	ldr	r5, [pc, #188]	@ (80056b8 <Read_Temp+0xc8>)
void Read_Temp(){
 80055fa:	b085      	sub	sp, #20
	temperature1_avg = 0;
 80055fc:	6033      	str	r3, [r6, #0]
	temperature2_avg = 0;
 80055fe:	602b      	str	r3, [r5, #0]
		  	 		    sConfig.Channel = ADC_CHANNEL_0;
 8005600:	2301      	movs	r3, #1
 8005602:	9301      	str	r3, [sp, #4]
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 8005604:	2300      	movs	r3, #0
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005606:	4c2d      	ldr	r4, [pc, #180]	@ (80056bc <Read_Temp+0xcc>)
 8005608:	a901      	add	r1, sp, #4
 800560a:	0020      	movs	r0, r4
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 800560c:	9302      	str	r3, [sp, #8]
		  	 		    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800560e:	9303      	str	r3, [sp, #12]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005610:	f009 f898 	bl	800e744 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 8005614:	0020      	movs	r0, r4
 8005616:	f009 fa05 	bl	800ea24 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800561a:	2101      	movs	r1, #1
 800561c:	0020      	movs	r0, r4
 800561e:	4249      	negs	r1, r1
 8005620:	f008 ff58 	bl	800e4d4 <HAL_ADC_PollForConversion>
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 8005624:	0020      	movs	r0, r4
 8005626:	f008 ffb9 	bl	800e59c <HAL_ADC_GetValue>
 800562a:	4b25      	ldr	r3, [pc, #148]	@ (80056c0 <Read_Temp+0xd0>)
	 for(int i=0; i < 10; i++)
 800562c:	3f01      	subs	r7, #1
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 800562e:	8018      	strh	r0, [r3, #0]
		  	 		    temperature1 = read_temperature_steinhart_middle(adc_value1);
 8005630:	b280      	uxth	r0, r0
 8005632:	f7ff ff81 	bl	8005538 <read_temperature_steinhart_middle>
 8005636:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <Read_Temp+0xd4>)
 8005638:	1c01      	adds	r1, r0, #0
 800563a:	6018      	str	r0, [r3, #0]
		  	 		    temperature1_avg = temperature1_avg + temperature1;
 800563c:	6830      	ldr	r0, [r6, #0]
 800563e:	f7fb f8c1 	bl	80007c4 <__aeabi_fadd>
 8005642:	6030      	str	r0, [r6, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 8005644:	0020      	movs	r0, r4
 8005646:	f009 faad 	bl	800eba4 <HAL_ADC_Stop>
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 800564a:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <Read_Temp+0xd8>)
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800564c:	a901      	add	r1, sp, #4
 800564e:	0020      	movs	r0, r4
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 8005650:	9301      	str	r3, [sp, #4]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005652:	f009 f877 	bl	800e744 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 8005656:	0020      	movs	r0, r4
 8005658:	f009 f9e4 	bl	800ea24 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800565c:	2101      	movs	r1, #1
 800565e:	0020      	movs	r0, r4
 8005660:	4249      	negs	r1, r1
 8005662:	f008 ff37 	bl	800e4d4 <HAL_ADC_PollForConversion>
		  	 		    adc_value2 = HAL_ADC_GetValue(&hadc1);
 8005666:	0020      	movs	r0, r4
 8005668:	f008 ff98 	bl	800e59c <HAL_ADC_GetValue>
 800566c:	4b17      	ldr	r3, [pc, #92]	@ (80056cc <Read_Temp+0xdc>)
 800566e:	8018      	strh	r0, [r3, #0]
		  	 		    temperature2 = read_temperature_steinhart_low(adc_value2);
 8005670:	b280      	uxth	r0, r0
 8005672:	f7ff ff25 	bl	80054c0 <read_temperature_steinhart_low>
 8005676:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <Read_Temp+0xe0>)
 8005678:	1c01      	adds	r1, r0, #0
 800567a:	6018      	str	r0, [r3, #0]
		  	 		    temperature2_avg = temperature2_avg + temperature2;
 800567c:	6828      	ldr	r0, [r5, #0]
 800567e:	f7fb f8a1 	bl	80007c4 <__aeabi_fadd>
 8005682:	6028      	str	r0, [r5, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 8005684:	0020      	movs	r0, r4
 8005686:	f009 fa8d 	bl	800eba4 <HAL_ADC_Stop>
	 for(int i=0; i < 10; i++)
 800568a:	2f00      	cmp	r7, #0
 800568c:	d1b8      	bne.n	8005600 <Read_Temp+0x10>
		  	 		    temperature1_avg = temperature1_avg / 10;
 800568e:	6830      	ldr	r0, [r6, #0]
 8005690:	4910      	ldr	r1, [pc, #64]	@ (80056d4 <Read_Temp+0xe4>)
 8005692:	f7fb fa89 	bl	8000ba8 <__aeabi_fdiv>
		  	 		    temperature2_avg = temperature2_avg / 10;
 8005696:	490f      	ldr	r1, [pc, #60]	@ (80056d4 <Read_Temp+0xe4>)
		  	 		    temperature1_avg = temperature1_avg / 10;
 8005698:	1c04      	adds	r4, r0, #0
 800569a:	6030      	str	r0, [r6, #0]
		  	 		    temperature2_avg = temperature2_avg / 10;
 800569c:	6828      	ldr	r0, [r5, #0]
 800569e:	f7fb fa83 	bl	8000ba8 <__aeabi_fdiv>
 80056a2:	1c01      	adds	r1, r0, #0
 80056a4:	6028      	str	r0, [r5, #0]
		  	 		    Display_temperature  = compare_temperature(temperature1_avg, temperature2_avg);
 80056a6:	1c20      	adds	r0, r4, #0
 80056a8:	f7ff ff82 	bl	80055b0 <compare_temperature>
 80056ac:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <Read_Temp+0xe8>)
 80056ae:	6018      	str	r0, [r3, #0]
}
 80056b0:	b005      	add	sp, #20
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b4:	2000054c 	.word	0x2000054c
 80056b8:	20000548 	.word	0x20000548
 80056bc:	20000aec 	.word	0x20000aec
 80056c0:	2000055a 	.word	0x2000055a
 80056c4:	20000554 	.word	0x20000554
 80056c8:	08000004 	.word	0x08000004
 80056cc:	20000558 	.word	0x20000558
 80056d0:	20000550 	.word	0x20000550
 80056d4:	41200000 	.word	0x41200000
 80056d8:	20000544 	.word	0x20000544

080056dc <RTC_Disable_All_Wakeup>:
{
 80056dc:	b570      	push	{r4, r5, r6, lr}
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);          // WUT 카운터 끄기
 80056de:	4c0e      	ldr	r4, [pc, #56]	@ (8005718 <RTC_Disable_All_Wakeup+0x3c>)
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 80056e0:	4d0e      	ldr	r5, [pc, #56]	@ (800571c <RTC_Disable_All_Wakeup+0x40>)
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);          // WUT 카운터 끄기
 80056e2:	0020      	movs	r0, r4
 80056e4:	f00c fc9e 	bl	8012024 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT();         // EXTI line 20 IT 비활성
 80056e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <RTC_Disable_All_Wakeup+0x44>)
 80056ea:	490e      	ldr	r1, [pc, #56]	@ (8005724 <RTC_Disable_All_Wakeup+0x48>)
 80056ec:	1d18      	adds	r0, r3, #4
 80056ee:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056f0:	3308      	adds	r3, #8
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT();         // EXTI line 20 IT 비활성
 80056f2:	400a      	ands	r2, r1
 80056f4:	67c2      	str	r2, [r0, #124]	@ 0x7c
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056f6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80056f8:	0020      	movs	r0, r4
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056fa:	400a      	ands	r2, r1
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80056fc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056fe:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <RTC_Disable_All_Wakeup+0x4c>)
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 8005702:	0049      	lsls	r1, r1, #1
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 8005704:	65eb      	str	r3, [r5, #92]	@ 0x5c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 8005706:	f00c f997 	bl	8011a38 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); // ALRAF 플래그 클리어
 800570a:	2301      	movs	r3, #1
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800570c:	225f      	movs	r2, #95	@ 0x5f
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); // ALRAF 플래그 클리어
 800570e:	65eb      	str	r3, [r5, #92]	@ 0x5c
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8005710:	4b06      	ldr	r3, [pc, #24]	@ (800572c <RTC_Disable_All_Wakeup+0x50>)
 8005712:	619a      	str	r2, [r3, #24]
}
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	200009f8 	.word	0x200009f8
 800571c:	40002800 	.word	0x40002800
 8005720:	40021800 	.word	0x40021800
 8005724:	efffffff 	.word	0xefffffff
 8005728:	00000202 	.word	0x00000202
 800572c:	40007000 	.word	0x40007000

08005730 <RTC_SetAlarmA_SecondsFromNow>:

void RTC_SetAlarmA_SecondsFromNow(uint32_t after_sec)     // 지울예정
{
 8005730:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);

    uint8_t Y=d.Year, M=d.Month, D=d.Date;
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005732:	24e1      	movs	r4, #225	@ 0xe1
{
 8005734:	b097      	sub	sp, #92	@ 0x5c
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005736:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <RTC_SetAlarmA_SecondsFromNow+0xe8>)
 8005738:	ad05      	add	r5, sp, #20
 800573a:	0029      	movs	r1, r5
 800573c:	2200      	movs	r2, #0
{
 800573e:	9003      	str	r0, [sp, #12]
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005740:	0018      	movs	r0, r3
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	f00c fc18 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005748:	2200      	movs	r2, #0
 800574a:	9801      	ldr	r0, [sp, #4]
 800574c:	a904      	add	r1, sp, #16
 800574e:	f00c fc45 	bl	8011fdc <HAL_RTC_GetDate>
    uint8_t Y=d.Year, M=d.Month, D=d.Date;
 8005752:	ab04      	add	r3, sp, #16
 8005754:	78db      	ldrb	r3, [r3, #3]
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005756:	0124      	lsls	r4, r4, #4
    uint8_t Y=d.Year, M=d.Month, D=d.Date;
 8005758:	9302      	str	r3, [sp, #8]
 800575a:	ab04      	add	r3, sp, #16
 800575c:	785f      	ldrb	r7, [r3, #1]
 800575e:	789e      	ldrb	r6, [r3, #2]
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005760:	782b      	ldrb	r3, [r5, #0]
 8005762:	786a      	ldrb	r2, [r5, #1]
 8005764:	435c      	muls	r4, r3
    uint32_t tgt = now + after_sec;
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	18e4      	adds	r4, r4, r3
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 800576a:	78ab      	ldrb	r3, [r5, #2]
    // 날짜 보정
    while (tgt >= 86400u) {
        tgt -= 86400u;
        // ++D, 월말/윤년 처리
//        extern uint8_t days_in_month(uint8_t m, uint16_t y2000);
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 800576c:	2501      	movs	r5, #1
    uint32_t tgt = now + after_sec;
 800576e:	18e4      	adds	r4, r4, r3
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005770:	233c      	movs	r3, #60	@ 0x3c
 8005772:	4353      	muls	r3, r2
    uint32_t tgt = now + after_sec;
 8005774:	18e4      	adds	r4, r4, r3
    while (tgt >= 86400u) {
 8005776:	4b29      	ldr	r3, [pc, #164]	@ (800581c <RTC_SetAlarmA_SecondsFromNow+0xec>)
 8005778:	429c      	cmp	r4, r3
 800577a:	d833      	bhi.n	80057e4 <RTC_SetAlarmA_SecondsFromNow+0xb4>
    }

    // 기존 알람 정리
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800577c:	2780      	movs	r7, #128	@ 0x80
 800577e:	007f      	lsls	r7, r7, #1
 8005780:	0039      	movs	r1, r7
 8005782:	9801      	ldr	r0, [sp, #4]
 8005784:	f00c f958 	bl	8011a38 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005788:	2201      	movs	r2, #1

    RTC_AlarmTypeDef a = {0};
 800578a:	201b      	movs	r0, #27
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800578c:	4b24      	ldr	r3, [pc, #144]	@ (8005820 <RTC_SetAlarmA_SecondsFromNow+0xf0>)
    RTC_AlarmTypeDef a = {0};
 800578e:	2100      	movs	r1, #0
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005790:	65da      	str	r2, [r3, #92]	@ 0x5c
    RTC_AlarmTypeDef a = {0};
 8005792:	ab04      	add	r3, sp, #16
 8005794:	3228      	adds	r2, #40	@ 0x28
 8005796:	18c0      	adds	r0, r0, r3
 8005798:	f014 feac 	bl	801a4f4 <memset>
    a.AlarmTime.Hours   = tgt/3600u;
 800579c:	21e1      	movs	r1, #225	@ 0xe1
 800579e:	0020      	movs	r0, r4
 80057a0:	0109      	lsls	r1, r1, #4
 80057a2:	f7fa fce1 	bl	8000168 <__udivsi3>
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 80057a6:	21e1      	movs	r1, #225	@ 0xe1
    RTC_AlarmTypeDef a = {0};
 80057a8:	ad0a      	add	r5, sp, #40	@ 0x28
    a.AlarmTime.Hours   = tgt/3600u;
 80057aa:	7028      	strb	r0, [r5, #0]
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 80057ac:	0109      	lsls	r1, r1, #4
 80057ae:	0020      	movs	r0, r4
 80057b0:	f7fa fd60 	bl	8000274 <__aeabi_uidivmod>
 80057b4:	0008      	movs	r0, r1
 80057b6:	213c      	movs	r1, #60	@ 0x3c
 80057b8:	f7fa fcd6 	bl	8000168 <__udivsi3>
    a.AlarmTime.Seconds = tgt%60u;
 80057bc:	213c      	movs	r1, #60	@ 0x3c
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 80057be:	7068      	strb	r0, [r5, #1]
    a.AlarmTime.Seconds = tgt%60u;
 80057c0:	0020      	movs	r0, r4
 80057c2:	f7fa fd57 	bl	8000274 <__aeabi_uidivmod>
    a.AlarmMask         = RTC_ALARMMASK_NONE;              // 날짜/시/분/초 모두 비교
    a.AlarmSubSecondMask= RTC_ALARMSUBSECONDMASK_ALL;
    a.Alarm             = RTC_ALARM_A;
    a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;  // 날짜 비교
    a.AlarmDateWeekDay  = D;
 80057c6:	231d      	movs	r3, #29
 80057c8:	aa04      	add	r2, sp, #16
 80057ca:	189b      	adds	r3, r3, r2
    a.AlarmTime.Seconds = tgt%60u;
 80057cc:	70a9      	strb	r1, [r5, #2]

    if (HAL_RTC_SetAlarm_IT(&hrtc, &a, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 80057ce:	2200      	movs	r2, #0
 80057d0:	0029      	movs	r1, r5
 80057d2:	9801      	ldr	r0, [sp, #4]
    a.Alarm             = RTC_ALARM_A;
 80057d4:	9715      	str	r7, [sp, #84]	@ 0x54
    a.AlarmDateWeekDay  = D;
 80057d6:	77de      	strb	r6, [r3, #31]
    if (HAL_RTC_SetAlarm_IT(&hrtc, &a, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 80057d8:	f00c fb10 	bl	8011dfc <HAL_RTC_SetAlarm_IT>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d019      	beq.n	8005814 <RTC_SetAlarmA_SecondsFromNow+0xe4>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057e2:	e7fe      	b.n	80057e2 <RTC_SetAlarmA_SecondsFromNow+0xb2>
        tgt -= 86400u;
 80057e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <RTC_SetAlarmA_SecondsFromNow+0xf4>)
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 80057e6:	3601      	adds	r6, #1
 80057e8:	0038      	movs	r0, r7
 80057ea:	9902      	ldr	r1, [sp, #8]
 80057ec:	b2f6      	uxtb	r6, r6
        tgt -= 86400u;
 80057ee:	18e4      	adds	r4, r4, r3
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 80057f0:	f7ff fe46 	bl	8005480 <days_in_month>
 80057f4:	42b0      	cmp	r0, r6
 80057f6:	d2be      	bcs.n	8005776 <RTC_SetAlarmA_SecondsFromNow+0x46>
 80057f8:	3701      	adds	r7, #1
 80057fa:	b2ff      	uxtb	r7, r7
 80057fc:	002e      	movs	r6, r5
 80057fe:	2f0d      	cmp	r7, #13
 8005800:	d1b9      	bne.n	8005776 <RTC_SetAlarmA_SecondsFromNow+0x46>
 8005802:	9802      	ldr	r0, [sp, #8]
 8005804:	2164      	movs	r1, #100	@ 0x64
 8005806:	3001      	adds	r0, #1
 8005808:	f7fa fe1e 	bl	8000448 <__aeabi_idivmod>
 800580c:	b2cb      	uxtb	r3, r1
 800580e:	002f      	movs	r7, r5
 8005810:	9302      	str	r3, [sp, #8]
 8005812:	e7b0      	b.n	8005776 <RTC_SetAlarmA_SecondsFromNow+0x46>
}
 8005814:	b017      	add	sp, #92	@ 0x5c
 8005816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005818:	200009f8 	.word	0x200009f8
 800581c:	0001517f 	.word	0x0001517f
 8005820:	40002800 	.word	0x40002800
 8005824:	fffeae80 	.word	0xfffeae80

08005828 <Set_StartTargetTime_FromReservation>:
{
 8005828:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_epoch = current_settings.start_reservation_time; // 예약 타깃(epoch)
 800582a:	4d2e      	ldr	r5, [pc, #184]	@ (80058e4 <Set_StartTargetTime_FromReservation+0xbc>)
 800582c:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <Set_StartTargetTime_FromReservation+0xc0>)
 800582e:	002a      	movs	r2, r5
 8005830:	32a6      	adds	r2, #166	@ 0xa6
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	0212      	lsls	r2, r2, #8
 8005838:	431a      	orrs	r2, r3
 800583a:	002b      	movs	r3, r5
 800583c:	33a7      	adds	r3, #167	@ 0xa7
 800583e:	781b      	ldrb	r3, [r3, #0]
{
 8005840:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t target_epoch = current_settings.start_reservation_time; // 예약 타깃(epoch)
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	4313      	orrs	r3, r2
 8005846:	002a      	movs	r2, r5
 8005848:	32a8      	adds	r2, #168	@ 0xa8
 800584a:	7814      	ldrb	r4, [r2, #0]
 800584c:	0624      	lsls	r4, r4, #24
 800584e:	431c      	orrs	r4, r3
    if (target_epoch == 0u) {
 8005850:	d104      	bne.n	800585c <Set_StartTargetTime_FromReservation+0x34>
        printf("[Reserve] start_reservation_time=0 → skip.\r\n");
 8005852:	4826      	ldr	r0, [pc, #152]	@ (80058ec <Set_StartTargetTime_FromReservation+0xc4>)
 8005854:	f014 fcf2 	bl	801a23c <puts>
}
 8005858:	b00b      	add	sp, #44	@ 0x2c
 800585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800585c:	4b24      	ldr	r3, [pc, #144]	@ (80058f0 <Set_StartTargetTime_FromReservation+0xc8>)
 800585e:	ae05      	add	r6, sp, #20
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005860:	af04      	add	r7, sp, #16
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005862:	0031      	movs	r1, r6
 8005864:	0018      	movs	r0, r3
 8005866:	2200      	movs	r2, #0
 8005868:	9303      	str	r3, [sp, #12]
 800586a:	f00c fb85 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 800586e:	0039      	movs	r1, r7
 8005870:	2200      	movs	r2, #0
 8005872:	9803      	ldr	r0, [sp, #12]
 8005874:	f00c fbb2 	bl	8011fdc <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005878:	78ba      	ldrb	r2, [r7, #2]
 800587a:	7879      	ldrb	r1, [r7, #1]
 800587c:	78f8      	ldrb	r0, [r7, #3]
 800587e:	78b7      	ldrb	r7, [r6, #2]
 8005880:	7833      	ldrb	r3, [r6, #0]
 8005882:	9701      	str	r7, [sp, #4]
 8005884:	7876      	ldrb	r6, [r6, #1]
 8005886:	9600      	str	r6, [sp, #0]
 8005888:	f004 f81e 	bl	80098c8 <ymd_to_epoch>
 800588c:	0006      	movs	r6, r0
    if (target_epoch <= now_epoch) {
 800588e:	4284      	cmp	r4, r0
 8005890:	d805      	bhi.n	800589e <Set_StartTargetTime_FromReservation+0x76>
        printf("[Reserve] target(%lu) <= now(%lu) → start immediately.\r\n",
 8005892:	0032      	movs	r2, r6
 8005894:	0021      	movs	r1, r4
 8005896:	4817      	ldr	r0, [pc, #92]	@ (80058f4 <Set_StartTargetTime_FromReservation+0xcc>)
 8005898:	f014 fc60 	bl	801a15c <iprintf>
        return;
 800589c:	e7dc      	b.n	8005858 <Set_StartTargetTime_FromReservation+0x30>
    if (remaining > ALARMA_MAX_CHUNK_SEC) {
 800589e:	4b16      	ldr	r3, [pc, #88]	@ (80058f8 <Set_StartTargetTime_FromReservation+0xd0>)
    uint32_t remaining = target_epoch - now_epoch;
 80058a0:	1a27      	subs	r7, r4, r0
        chunk = ALARMA_MAX_CHUNK_SEC;
 80058a2:	9303      	str	r3, [sp, #12]
    if (remaining > ALARMA_MAX_CHUNK_SEC) {
 80058a4:	429f      	cmp	r7, r3
 80058a6:	d805      	bhi.n	80058b4 <Set_StartTargetTime_FromReservation+0x8c>
        chunk = (remaining > 5u) ? (remaining - 5u) : 1u; // 최소 1초 보정
 80058a8:	003b      	movs	r3, r7
 80058aa:	2f06      	cmp	r7, #6
 80058ac:	d200      	bcs.n	80058b0 <Set_StartTargetTime_FromReservation+0x88>
 80058ae:	2306      	movs	r3, #6
 80058b0:	3b05      	subs	r3, #5
 80058b2:	9303      	str	r3, [sp, #12]
    current_settings.start_target_seconds = target_epoch;   // 타깃은 ‘절대초’로 일원화
 80058b4:	35a1      	adds	r5, #161	@ 0xa1
 80058b6:	0a23      	lsrs	r3, r4, #8
 80058b8:	706b      	strb	r3, [r5, #1]
 80058ba:	0c23      	lsrs	r3, r4, #16
 80058bc:	70ab      	strb	r3, [r5, #2]
 80058be:	0e23      	lsrs	r3, r4, #24
 80058c0:	70eb      	strb	r3, [r5, #3]
 80058c2:	702c      	strb	r4, [r5, #0]
    Save_CurrentSettings();
 80058c4:	f004 f8a8 	bl	8009a18 <Save_CurrentSettings>
    RTC_Disable_All_Wakeup();
 80058c8:	f7ff ff08 	bl	80056dc <RTC_Disable_All_Wakeup>
    RTC_SetAlarmA_SecondsFromNow(chunk);
 80058cc:	9803      	ldr	r0, [sp, #12]
 80058ce:	f7ff ff2f 	bl	8005730 <RTC_SetAlarmA_SecondsFromNow>
    printf("[Reserve] target=%lu, now=%lu, remain=%lu → chunk=%lu sec (AlarmA)\r\n",
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	0032      	movs	r2, r6
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	0021      	movs	r1, r4
 80058da:	003b      	movs	r3, r7
 80058dc:	4807      	ldr	r0, [pc, #28]	@ (80058fc <Set_StartTargetTime_FromReservation+0xd4>)
 80058de:	f014 fc3d 	bl	801a15c <iprintf>
 80058e2:	e7b9      	b.n	8005858 <Set_StartTargetTime_FromReservation+0x30>
 80058e4:	20002bac 	.word	0x20002bac
 80058e8:	20002c51 	.word	0x20002c51
 80058ec:	0801cb58 	.word	0x0801cb58
 80058f0:	200009f8 	.word	0x200009f8
 80058f4:	0801cb86 	.word	0x0801cb86
 80058f8:	0028de80 	.word	0x0028de80
 80058fc:	0801cbc1 	.word	0x0801cbc1

08005900 <Maybe_Rearm_Reservation_OnWake>:
    uint32_t target_epoch = current_settings.start_reservation_time;
 8005900:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <Maybe_Rearm_Reservation_OnWake+0x70>)
{
 8005902:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_epoch = current_settings.start_reservation_time;
 8005904:	0019      	movs	r1, r3
 8005906:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <Maybe_Rearm_Reservation_OnWake+0x74>)
 8005908:	31a6      	adds	r1, #166	@ 0xa6
 800590a:	7809      	ldrb	r1, [r1, #0]
 800590c:	7812      	ldrb	r2, [r2, #0]
 800590e:	0209      	lsls	r1, r1, #8
 8005910:	4311      	orrs	r1, r2
 8005912:	001a      	movs	r2, r3
 8005914:	32a7      	adds	r2, #167	@ 0xa7
 8005916:	7812      	ldrb	r2, [r2, #0]
 8005918:	33a8      	adds	r3, #168	@ 0xa8
 800591a:	781c      	ldrb	r4, [r3, #0]
 800591c:	0412      	lsls	r2, r2, #16
 800591e:	430a      	orrs	r2, r1
 8005920:	0624      	lsls	r4, r4, #24
{
 8005922:	b089      	sub	sp, #36	@ 0x24
    uint32_t target_epoch = current_settings.start_reservation_time;
 8005924:	4314      	orrs	r4, r2
    if (target_epoch == 0u) return;
 8005926:	d01b      	beq.n	8005960 <Maybe_Rearm_Reservation_OnWake+0x60>
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005928:	4f13      	ldr	r7, [pc, #76]	@ (8005978 <Maybe_Rearm_Reservation_OnWake+0x78>)
 800592a:	ad03      	add	r5, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 800592c:	ae02      	add	r6, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800592e:	0029      	movs	r1, r5
 8005930:	2200      	movs	r2, #0
 8005932:	0038      	movs	r0, r7
 8005934:	f00c fb20 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005938:	0031      	movs	r1, r6
 800593a:	2200      	movs	r2, #0
 800593c:	0038      	movs	r0, r7
 800593e:	f00c fb4d 	bl	8011fdc <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005942:	7871      	ldrb	r1, [r6, #1]
 8005944:	78b2      	ldrb	r2, [r6, #2]
 8005946:	78f0      	ldrb	r0, [r6, #3]
 8005948:	78ae      	ldrb	r6, [r5, #2]
 800594a:	782b      	ldrb	r3, [r5, #0]
 800594c:	9601      	str	r6, [sp, #4]
 800594e:	786d      	ldrb	r5, [r5, #1]
 8005950:	9500      	str	r5, [sp, #0]
 8005952:	f003 ffb9 	bl	80098c8 <ymd_to_epoch>
 8005956:	0001      	movs	r1, r0
    if (now_epoch < target_epoch) {
 8005958:	4284      	cmp	r4, r0
 800595a:	d903      	bls.n	8005964 <Maybe_Rearm_Reservation_OnWake+0x64>
        Set_StartTargetTime_FromReservation();
 800595c:	f7ff ff64 	bl	8005828 <Set_StartTargetTime_FromReservation>
}
 8005960:	b009      	add	sp, #36	@ 0x24
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("[Reserve] reached: now=%lu >= target=%lu\r\n",
 8005964:	0022      	movs	r2, r4
 8005966:	4805      	ldr	r0, [pc, #20]	@ (800597c <Maybe_Rearm_Reservation_OnWake+0x7c>)
 8005968:	f014 fbf8 	bl	801a15c <iprintf>
 800596c:	e7f8      	b.n	8005960 <Maybe_Rearm_Reservation_OnWake+0x60>
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	20002bac 	.word	0x20002bac
 8005974:	20002c51 	.word	0x20002c51
 8005978:	200009f8 	.word	0x200009f8
 800597c:	0801cc08 	.word	0x0801cc08

08005980 <Set_EndTarget_FromNow_Days>:
{
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	0004      	movs	r4, r0
 8005984:	b08b      	sub	sp, #44	@ 0x2c
    if (days == 0) {
 8005986:	2800      	cmp	r0, #0
 8005988:	d10b      	bne.n	80059a2 <Set_EndTarget_FromNow_Days+0x22>
        current_settings.end_target_seconds = 0;
 800598a:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <Set_EndTarget_FromNow_Days+0xf0>)
 800598c:	7018      	strb	r0, [r3, #0]
 800598e:	7058      	strb	r0, [r3, #1]
 8005990:	7098      	strb	r0, [r3, #2]
 8005992:	70d8      	strb	r0, [r3, #3]
        Save_CurrentSettings();
 8005994:	f004 f840 	bl	8009a18 <Save_CurrentSettings>
        printf("[EndTarget] cleared (days=0)\r\n");
 8005998:	4836      	ldr	r0, [pc, #216]	@ (8005a74 <Set_EndTarget_FromNow_Days+0xf4>)
 800599a:	f014 fc4f 	bl	801a23c <puts>
}
 800599e:	b00b      	add	sp, #44	@ 0x2c
 80059a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t now = now_epoch_from_rtc();      // 현재 epoch (초)
 80059a2:	f7ff fd4f 	bl	8005444 <now_epoch_from_rtc>
    epoch_to_ymdhms(now, &y, &m, &d, &hh, &mm, &ss);
 80059a6:	271d      	movs	r7, #29
    uint32_t add = (uint32_t)days * 86400u;   // 일 → 초
 80059a8:	4b33      	ldr	r3, [pc, #204]	@ (8005a78 <Set_EndTarget_FromNow_Days+0xf8>)
    uint32_t now = now_epoch_from_rtc();      // 현재 epoch (초)
 80059aa:	0006      	movs	r6, r0
    uint32_t add = (uint32_t)days * 86400u;   // 일 → 초
 80059ac:	4363      	muls	r3, r4
    uint32_t target = now + add;
 80059ae:	18c5      	adds	r5, r0, r3
    uint32_t add = (uint32_t)days * 86400u;   // 일 → 초
 80059b0:	9307      	str	r3, [sp, #28]
    current_settings.end_target_seconds = target;
 80059b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005a70 <Set_EndTarget_FromNow_Days+0xf0>)
 80059b4:	0a2a      	lsrs	r2, r5, #8
 80059b6:	705a      	strb	r2, [r3, #1]
 80059b8:	0c2a      	lsrs	r2, r5, #16
 80059ba:	709a      	strb	r2, [r3, #2]
 80059bc:	0e2a      	lsrs	r2, r5, #24
 80059be:	701d      	strb	r5, [r3, #0]
 80059c0:	70da      	strb	r2, [r3, #3]
    Save_CurrentSettings();
 80059c2:	f004 f829 	bl	8009a18 <Save_CurrentSettings>
    epoch_to_ymdhms(now, &y, &m, &d, &hh, &mm, &ss);
 80059c6:	ab02      	add	r3, sp, #8
 80059c8:	18ff      	adds	r7, r7, r3
 80059ca:	ab09      	add	r3, sp, #36	@ 0x24
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	231b      	movs	r3, #27
 80059d0:	aa02      	add	r2, sp, #8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	231a      	movs	r3, #26
 80059d8:	189b      	adds	r3, r3, r2
 80059da:	2219      	movs	r2, #25
 80059dc:	a902      	add	r1, sp, #8
 80059de:	1852      	adds	r2, r2, r1
 80059e0:	211e      	movs	r1, #30
 80059e2:	a802      	add	r0, sp, #8
 80059e4:	1809      	adds	r1, r1, r0
 80059e6:	9702      	str	r7, [sp, #8]
 80059e8:	0030      	movs	r0, r6
 80059ea:	f003 ffa5 	bl	8009938 <epoch_to_ymdhms>
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 80059ee:	20fa      	movs	r0, #250	@ 0xfa
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 80059f0:	ab02      	add	r3, sp, #8
 80059f2:	aa02      	add	r2, sp, #8
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 80059f4:	a902      	add	r1, sp, #8
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 80059f6:	7e9b      	ldrb	r3, [r3, #26]
 80059f8:	7e52      	ldrb	r2, [r2, #25]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 80059fa:	8bc9      	ldrh	r1, [r1, #30]
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 80059fc:	9603      	str	r6, [sp, #12]
 80059fe:	783e      	ldrb	r6, [r7, #0]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005a00:	00c0      	lsls	r0, r0, #3
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005a02:	9602      	str	r6, [sp, #8]
 8005a04:	ae02      	add	r6, sp, #8
 8005a06:	7f36      	ldrb	r6, [r6, #28]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005a08:	1809      	adds	r1, r1, r0
    printf("[EndTarget] now=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005a0a:	9601      	str	r6, [sp, #4]
 8005a0c:	ae02      	add	r6, sp, #8
 8005a0e:	7ef6      	ldrb	r6, [r6, #27]
 8005a10:	481a      	ldr	r0, [pc, #104]	@ (8005a7c <Set_EndTarget_FromNow_Days+0xfc>)
 8005a12:	9600      	str	r6, [sp, #0]
 8005a14:	f014 fba2 	bl	801a15c <iprintf>
    epoch_to_ymdhms(target, &y, &m, &d, &hh, &mm, &ss);
 8005a18:	ab09      	add	r3, sp, #36	@ 0x24
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	231b      	movs	r3, #27
 8005a1e:	aa02      	add	r2, sp, #8
 8005a20:	189b      	adds	r3, r3, r2
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	231a      	movs	r3, #26
 8005a26:	189b      	adds	r3, r3, r2
 8005a28:	2219      	movs	r2, #25
 8005a2a:	a902      	add	r1, sp, #8
 8005a2c:	1852      	adds	r2, r2, r1
 8005a2e:	211e      	movs	r1, #30
 8005a30:	a802      	add	r0, sp, #8
 8005a32:	1809      	adds	r1, r1, r0
 8005a34:	9702      	str	r7, [sp, #8]
 8005a36:	0028      	movs	r0, r5
 8005a38:	f003 ff7e 	bl	8009938 <epoch_to_ymdhms>
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005a3c:	20fa      	movs	r0, #250	@ 0xfa
 8005a3e:	ab02      	add	r3, sp, #8
 8005a40:	8bdb      	ldrh	r3, [r3, #30]
    printf("[EndTarget] +%lu s (%u days) -> target=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005a42:	9505      	str	r5, [sp, #20]
 8005a44:	783a      	ldrb	r2, [r7, #0]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005a46:	00c0      	lsls	r0, r0, #3
    printf("[EndTarget] +%lu s (%u days) -> target=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005a48:	9204      	str	r2, [sp, #16]
 8005a4a:	aa02      	add	r2, sp, #8
 8005a4c:	7f12      	ldrb	r2, [r2, #28]
           (unsigned)(2000 + y), (unsigned)m, (unsigned)d,
 8005a4e:	181b      	adds	r3, r3, r0
    printf("[EndTarget] +%lu s (%u days) -> target=%04u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\r\n",
 8005a50:	9203      	str	r2, [sp, #12]
 8005a52:	aa02      	add	r2, sp, #8
 8005a54:	7ed2      	ldrb	r2, [r2, #27]
 8005a56:	9907      	ldr	r1, [sp, #28]
 8005a58:	9202      	str	r2, [sp, #8]
 8005a5a:	aa02      	add	r2, sp, #8
 8005a5c:	7e92      	ldrb	r2, [r2, #26]
 8005a5e:	4808      	ldr	r0, [pc, #32]	@ (8005a80 <Set_EndTarget_FromNow_Days+0x100>)
 8005a60:	9201      	str	r2, [sp, #4]
 8005a62:	aa02      	add	r2, sp, #8
 8005a64:	7e52      	ldrb	r2, [r2, #25]
 8005a66:	9200      	str	r2, [sp, #0]
 8005a68:	0022      	movs	r2, r4
 8005a6a:	f014 fb77 	bl	801a15c <iprintf>
 8005a6e:	e796      	b.n	800599e <Set_EndTarget_FromNow_Days+0x1e>
 8005a70:	20002c57 	.word	0x20002c57
 8005a74:	0801cc33 	.word	0x0801cc33
 8005a78:	00015180 	.word	0x00015180
 8005a7c:	0801cc51 	.word	0x0801cc51
 8005a80:	0801cc8d 	.word	0x0801cc8d

08005a84 <Save_Power_Function>:
{
 8005a84:	b530      	push	{r4, r5, lr}
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005a86:	2501      	movs	r5, #1
{
 8005a88:	b087      	sub	sp, #28
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005a8a:	4c1a      	ldr	r4, [pc, #104]	@ (8005af4 <Save_Power_Function+0x70>)
	HAL_PWREx_EnableUltraLowPowerMode();       // ULP 모드 활성화
 8005a8c:	f00b f89c 	bl	8010bc8 <HAL_PWREx_EnableUltraLowPowerMode>
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005a90:	4819      	ldr	r0, [pc, #100]	@ (8005af8 <Save_Power_Function+0x74>)
 8005a92:	f009 f831 	bl	800eaf8 <HAL_ADC_DeInit>
 8005a96:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005a98:	4a18      	ldr	r2, [pc, #96]	@ (8005afc <Save_Power_Function+0x78>)
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005a9a:	4819      	ldr	r0, [pc, #100]	@ (8005b00 <Save_Power_Function+0x7c>)
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	6623      	str	r3, [r4, #96]	@ 0x60
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005aa0:	f009 fa56 	bl	800ef50 <HAL_COMP_DeInit>
 8005aa4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005aa6:	4817      	ldr	r0, [pc, #92]	@ (8005b04 <Save_Power_Function+0x80>)
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005aa8:	43ab      	bics	r3, r5
 8005aaa:	6623      	str	r3, [r4, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005aac:	f009 fe9a 	bl	800f7e4 <HAL_LCD_DeInit>
 8005ab0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ab2:	4a15      	ldr	r2, [pc, #84]	@ (8005b08 <Save_Power_Function+0x84>)
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005ab4:	4815      	ldr	r0, [pc, #84]	@ (8005b0c <Save_Power_Function+0x88>)
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	65a3      	str	r3, [r4, #88]	@ 0x58
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005aba:	f00d fa5b 	bl	8012f74 <HAL_UART_DeInit>
 8005abe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ac0:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <Save_Power_Function+0x8c>)
	GPIO_InitTypeDef g = {0};
 8005ac2:	2100      	movs	r1, #0
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	65a3      	str	r3, [r4, #88]	@ 0x58
	GPIO_InitTypeDef g = {0};
 8005ac8:	220c      	movs	r2, #12
 8005aca:	a803      	add	r0, sp, #12
 8005acc:	f014 fd12 	bl	801a4f4 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005ad0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
	HAL_GPIO_Init(GPIOA, &g);
 8005ad2:	20a0      	movs	r0, #160	@ 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005ad4:	432b      	orrs	r3, r5
 8005ad6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8005ad8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
	HAL_GPIO_Init(GPIOA, &g);
 8005ada:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005adc:	402b      	ands	r3, r5
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	9b00      	ldr	r3, [sp, #0]
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <Save_Power_Function+0x90>)
	HAL_GPIO_Init(GPIOA, &g);
 8005ae4:	05c0      	lsls	r0, r0, #23
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 8005ae6:	9301      	str	r3, [sp, #4]
	g.Mode  = GPIO_MODE_ANALOG;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &g);
 8005aec:	f009 fd1a 	bl	800f524 <HAL_GPIO_Init>
}
 8005af0:	b007      	add	sp, #28
 8005af2:	bd30      	pop	{r4, r5, pc}
 8005af4:	40021000 	.word	0x40021000
 8005af8:	20000aec 	.word	0x20000aec
 8005afc:	ffefffff 	.word	0xffefffff
 8005b00:	20000abc 	.word	0x20000abc
 8005b04:	20000a80 	.word	0x20000a80
 8005b08:	fffffdff 	.word	0xfffffdff
 8005b0c:	20000840 	.word	0x20000840
 8005b10:	fffbffff 	.word	0xfffbffff
 8005b14:	0000fffe 	.word	0x0000fffe

08005b18 <Start_Delay_Timer>:
{
 8005b18:	b510      	push	{r4, lr}
	LCD_Clear_Display(LCD_data);
 8005b1a:	4804      	ldr	r0, [pc, #16]	@ (8005b2c <Start_Delay_Timer+0x14>)
 8005b1c:	f7ff f8ec 	bl	8004cf8 <LCD_Clear_Display>
	RTC_Disable_All_Wakeup();
 8005b20:	f7ff fddc 	bl	80056dc <RTC_Disable_All_Wakeup>
	Set_StartTargetTime_FromRTC();
 8005b24:	f004 f8e0 	bl	8009ce8 <Set_StartTargetTime_FromRTC>
}
 8005b28:	bd10      	pop	{r4, pc}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	20000514 	.word	0x20000514

08005b30 <Get_in_Shutdown>:
void Get_in_Shutdown(){
 8005b30:	b510      	push	{r4, lr}
	printf("Getting on to sleep(Button)\r\n");
 8005b32:	480a      	ldr	r0, [pc, #40]	@ (8005b5c <Get_in_Shutdown+0x2c>)
 8005b34:	f014 fb82 	bl	801a23c <puts>
	Save_Power_Function();
 8005b38:	f7ff ffa4 	bl	8005a84 <Save_Power_Function>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8005b3c:	2081      	movs	r0, #129	@ 0x81
 8005b3e:	f00a ffd3 	bl	8010ae8 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // PC13 핀 High 레벨에서 깨우기
 8005b42:	2002      	movs	r0, #2
 8005b44:	f00a ffd0 	bl	8010ae8 <HAL_PWR_EnableWakeUpPin>
    HAL_SuspendTick(); // SysTick 멈춤
 8005b48:	f008 fba0 	bl	800e28c <HAL_SuspendTick>
    HAL_PWR_EnterSHUTDOWNMode();
 8005b4c:	f00a ffda 	bl	8010b04 <HAL_PWR_EnterSHUTDOWNMode>
  HAL_ResumeTick();
 8005b50:	f008 fba4 	bl	800e29c <HAL_ResumeTick>
    printf("Wake Up!\r\n");
 8005b54:	4802      	ldr	r0, [pc, #8]	@ (8005b60 <Get_in_Shutdown+0x30>)
 8005b56:	f014 fb71 	bl	801a23c <puts>
}
 8005b5a:	bd10      	pop	{r4, pc}
 8005b5c:	0801cce0 	.word	0x0801cce0
 8005b60:	0801ccfd 	.word	0x0801ccfd

08005b64 <Set_RTC_TimeOnly>:
{
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	b08b      	sub	sp, #44	@ 0x2c
 8005b68:	001d      	movs	r5, r3
 8005b6a:	ab10      	add	r3, sp, #64	@ 0x40
 8005b6c:	781f      	ldrb	r7, [r3, #0]
 8005b6e:	ab11      	add	r3, sp, #68	@ 0x44
 8005b70:	781e      	ldrb	r6, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005b72:	ab04      	add	r3, sp, #16
{
 8005b74:	9001      	str	r0, [sp, #4]
 8005b76:	9102      	str	r1, [sp, #8]
 8005b78:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef sTime = {0};
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	2211      	movs	r2, #17
 8005b7e:	1dd8      	adds	r0, r3, #7
 8005b80:	f014 fcb8 	bl	801a4f4 <memset>
    sDate.Year = yy;
 8005b84:	9a01      	ldr	r2, [sp, #4]
 8005b86:	ab04      	add	r3, sp, #16
 8005b88:	70da      	strb	r2, [r3, #3]
    sDate.Month = mm;
 8005b8a:	9a02      	ldr	r2, [sp, #8]
    RTC_TimeTypeDef sTime = {0};
 8005b8c:	ac05      	add	r4, sp, #20
    sDate.Month = mm;
 8005b8e:	705a      	strb	r2, [r3, #1]
    sDate.Date = dd;
 8005b90:	9a03      	ldr	r2, [sp, #12]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005b92:	0021      	movs	r1, r4
    sDate.Date = dd;
 8005b94:	709a      	strb	r2, [r3, #2]
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005b96:	2301      	movs	r3, #1
 8005b98:	aa04      	add	r2, sp, #16
 8005b9a:	7013      	strb	r3, [r2, #0]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005b9c:	4b07      	ldr	r3, [pc, #28]	@ (8005bbc <Set_RTC_TimeOnly+0x58>)
    sTime.Hours = hh;
 8005b9e:	7025      	strb	r5, [r4, #0]
    sTime.Minutes = mi;
 8005ba0:	7067      	strb	r7, [r4, #1]
    sTime.Seconds = ss;
 8005ba2:	70a6      	strb	r6, [r4, #2]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005ba4:	001c      	movs	r4, r3
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f00c f82b 	bl	8011c04 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	0020      	movs	r0, r4
 8005bb2:	a904      	add	r1, sp, #16
 8005bb4:	f00c f8b4 	bl	8011d20 <HAL_RTC_SetDate>
}
 8005bb8:	b00b      	add	sp, #44	@ 0x2c
 8005bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bbc:	200009f8 	.word	0x200009f8

08005bc0 <PrintCurrentRTC>:
{
 8005bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005bc2:	4e20      	ldr	r6, [pc, #128]	@ (8005c44 <PrintCurrentRTC+0x84>)
{
 8005bc4:	b08d      	sub	sp, #52	@ 0x34
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005bc6:	ad07      	add	r5, sp, #28
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8005bc8:	ac06      	add	r4, sp, #24
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005bca:	0029      	movs	r1, r5
 8005bcc:	2201      	movs	r2, #1
 8005bce:	0030      	movs	r0, r6
 8005bd0:	f00c f9d2 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8005bd4:	0021      	movs	r1, r4
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	0030      	movs	r0, r6
 8005bda:	f00c f9ff 	bl	8011fdc <HAL_RTC_GetDate>
    uint8_t day   = BCD2BIN(sDate.Date);
 8005bde:	200a      	movs	r0, #10
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8005be0:	786f      	ldrb	r7, [r5, #1]
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005be2:	78ab      	ldrb	r3, [r5, #2]
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8005be4:	782e      	ldrb	r6, [r5, #0]
    uint8_t day   = BCD2BIN(sDate.Date);
 8005be6:	250f      	movs	r5, #15
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005be8:	469c      	mov	ip, r3
    uint8_t year  = BCD2BIN(sDate.Year);
 8005bea:	78e1      	ldrb	r1, [r4, #3]
    uint8_t month = BCD2BIN(sDate.Month);
 8005bec:	7862      	ldrb	r2, [r4, #1]
    uint8_t day   = BCD2BIN(sDate.Date);
 8005bee:	78a4      	ldrb	r4, [r4, #2]
 8005bf0:	0923      	lsrs	r3, r4, #4
 8005bf2:	4343      	muls	r3, r0
 8005bf4:	402c      	ands	r4, r5
 8005bf6:	191b      	adds	r3, r3, r4
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	9305      	str	r3, [sp, #20]
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005bfc:	4663      	mov	r3, ip
    uint8_t month = BCD2BIN(sDate.Month);
 8005bfe:	0914      	lsrs	r4, r2, #4
 8005c00:	4344      	muls	r4, r0
 8005c02:	402a      	ands	r2, r5
 8005c04:	18a2      	adds	r2, r4, r2
    uint8_t year  = BCD2BIN(sDate.Year);
 8005c06:	090c      	lsrs	r4, r1, #4
 8005c08:	4344      	muls	r4, r0
 8005c0a:	4029      	ands	r1, r5
 8005c0c:	1861      	adds	r1, r4, r1
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005c0e:	091c      	lsrs	r4, r3, #4
 8005c10:	402b      	ands	r3, r5
 8005c12:	469c      	mov	ip, r3
 8005c14:	4344      	muls	r4, r0
 8005c16:	4464      	add	r4, ip
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005c18:	b2e4      	uxtb	r4, r4
 8005c1a:	9402      	str	r4, [sp, #8]
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8005c1c:	093c      	lsrs	r4, r7, #4
 8005c1e:	4344      	muls	r4, r0
 8005c20:	402f      	ands	r7, r5
 8005c22:	19e7      	adds	r7, r4, r7
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8005c24:	0934      	lsrs	r4, r6, #4
 8005c26:	4360      	muls	r0, r4
 8005c28:	402e      	ands	r6, r5
 8005c2a:	1980      	adds	r0, r0, r6
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005c2c:	b2ff      	uxtb	r7, r7
 8005c2e:	b2c0      	uxtb	r0, r0
 8005c30:	9000      	str	r0, [sp, #0]
 8005c32:	9b05      	ldr	r3, [sp, #20]
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	b2c9      	uxtb	r1, r1
 8005c38:	9701      	str	r7, [sp, #4]
 8005c3a:	4803      	ldr	r0, [pc, #12]	@ (8005c48 <PrintCurrentRTC+0x88>)
 8005c3c:	f014 fa8e 	bl	801a15c <iprintf>
}
 8005c40:	b00d      	add	sp, #52	@ 0x34
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c44:	200009f8 	.word	0x200009f8
 8005c48:	0801cd07 	.word	0x0801cd07

08005c4c <Check_And_Save_When_Target_Reached>:
{
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_raw = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005c4e:	4f2b      	ldr	r7, [pc, #172]	@ (8005cfc <Check_And_Save_When_Target_Reached+0xb0>)
 8005c50:	2107      	movs	r1, #7
{
 8005c52:	b089      	sub	sp, #36	@ 0x24
    uint32_t target_raw = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005c54:	0038      	movs	r0, r7
 8005c56:	f00c fa55 	bl	8012104 <HAL_RTCEx_BKUPRead>
 8005c5a:	0005      	movs	r5, r0
    printf("[Check] BKP_WAKEUP_TIME(raw)=%lu (0x%08lX)\r\n",
 8005c5c:	4828      	ldr	r0, [pc, #160]	@ (8005d00 <Check_And_Save_When_Target_Reached+0xb4>)
 8005c5e:	002a      	movs	r2, r5
 8005c60:	0029      	movs	r1, r5
 8005c62:	f014 fa7b 	bl	801a15c <iprintf>
    if (target_raw == 0xFFFFFFFFu) {
 8005c66:	1c6b      	adds	r3, r5, #1
 8005c68:	d10f      	bne.n	8005c8a <Check_And_Save_When_Target_Reached+0x3e>
        bool reached_init = (Tick_Save >= (Measure_Rad_Time - 1));
 8005c6a:	2408      	movs	r4, #8
 8005c6c:	4b25      	ldr	r3, [pc, #148]	@ (8005d04 <Check_And_Save_When_Target_Reached+0xb8>)
        printf("[Check] BKP=0xFFFFFFFF → init mode, Tick_Save=%lu → %s\r\n",
 8005c6e:	4a26      	ldr	r2, [pc, #152]	@ (8005d08 <Check_And_Save_When_Target_Reached+0xbc>)
        bool reached_init = (Tick_Save >= (Measure_Rad_Time - 1));
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	428c      	cmp	r4, r1
 8005c74:	41a4      	sbcs	r4, r4
 8005c76:	4264      	negs	r4, r4
        printf("[Check] BKP=0xFFFFFFFF → init mode, Tick_Save=%lu → %s\r\n",
 8005c78:	2908      	cmp	r1, #8
 8005c7a:	d900      	bls.n	8005c7e <Check_And_Save_When_Target_Reached+0x32>
 8005c7c:	4a23      	ldr	r2, [pc, #140]	@ (8005d0c <Check_And_Save_When_Target_Reached+0xc0>)
 8005c7e:	4824      	ldr	r0, [pc, #144]	@ (8005d10 <Check_And_Save_When_Target_Reached+0xc4>)
 8005c80:	f014 fa6c 	bl	801a15c <iprintf>
}
 8005c84:	0020      	movs	r0, r4
 8005c86:	b009      	add	sp, #36	@ 0x24
 8005c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005c8a:	ae03      	add	r6, sp, #12
 8005c8c:	0031      	movs	r1, r6
 8005c8e:	2200      	movs	r2, #0
 8005c90:	0038      	movs	r0, r7
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005c92:	ac02      	add	r4, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005c94:	f00c f970 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005c98:	2200      	movs	r2, #0
 8005c9a:	0038      	movs	r0, r7
 8005c9c:	0021      	movs	r1, r4
 8005c9e:	f00c f99d 	bl	8011fdc <HAL_RTC_GetDate>
    if (target_raw >= 1000000u) {
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d14 <Check_And_Save_When_Target_Reached+0xc8>)
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005ca4:	7833      	ldrb	r3, [r6, #0]
                       (uint32_t)t.Minutes * 60u +
 8005ca6:	7877      	ldrb	r7, [r6, #1]
                       (uint32_t)t.Seconds;
 8005ca8:	78b6      	ldrb	r6, [r6, #2]
    if (target_raw >= 1000000u) {
 8005caa:	4295      	cmp	r5, r2
 8005cac:	d914      	bls.n	8005cd8 <Check_And_Save_When_Target_Reached+0x8c>
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005cae:	7861      	ldrb	r1, [r4, #1]
 8005cb0:	78a2      	ldrb	r2, [r4, #2]
 8005cb2:	78e0      	ldrb	r0, [r4, #3]
 8005cb4:	9601      	str	r6, [sp, #4]
 8005cb6:	9700      	str	r7, [sp, #0]
 8005cb8:	f003 fe06 	bl	80098c8 <ymd_to_epoch>
        reached = (now_epoch >= target_raw);
 8005cbc:	2400      	movs	r4, #0
 8005cbe:	42a8      	cmp	r0, r5
 8005cc0:	4164      	adcs	r4, r4
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005cc2:	0001      	movs	r1, r0
        printf("[Check][epoch] now=%lu, target=%lu → %s\r\n",
 8005cc4:	4b10      	ldr	r3, [pc, #64]	@ (8005d08 <Check_And_Save_When_Target_Reached+0xbc>)
        reached = (now_epoch >= target_raw);
 8005cc6:	b2e4      	uxtb	r4, r4
        printf("[Check][epoch] now=%lu, target=%lu → %s\r\n",
 8005cc8:	4285      	cmp	r5, r0
 8005cca:	d800      	bhi.n	8005cce <Check_And_Save_When_Target_Reached+0x82>
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <Check_And_Save_When_Target_Reached+0xc0>)
 8005cce:	4812      	ldr	r0, [pc, #72]	@ (8005d18 <Check_And_Save_When_Target_Reached+0xcc>)
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005cd0:	002a      	movs	r2, r5
 8005cd2:	f014 fa43 	bl	801a15c <iprintf>
 8005cd6:	e7d5      	b.n	8005c84 <Check_And_Save_When_Target_Reached+0x38>
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005cd8:	21e1      	movs	r1, #225	@ 0xe1
 8005cda:	0109      	lsls	r1, r1, #4
 8005cdc:	4359      	muls	r1, r3
                       (uint32_t)t.Minutes * 60u +
 8005cde:	233c      	movs	r3, #60	@ 0x3c
        reached = (now_sod >= target_raw);
 8005ce0:	2400      	movs	r4, #0
                       (uint32_t)t.Minutes * 60u +
 8005ce2:	437b      	muls	r3, r7
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005ce4:	18c9      	adds	r1, r1, r3
 8005ce6:	1989      	adds	r1, r1, r6
        reached = (now_sod >= target_raw);
 8005ce8:	42a9      	cmp	r1, r5
 8005cea:	4164      	adcs	r4, r4
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005cec:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <Check_And_Save_When_Target_Reached+0xbc>)
        reached = (now_sod >= target_raw);
 8005cee:	b2e4      	uxtb	r4, r4
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005cf0:	428d      	cmp	r5, r1
 8005cf2:	d800      	bhi.n	8005cf6 <Check_And_Save_When_Target_Reached+0xaa>
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <Check_And_Save_When_Target_Reached+0xc0>)
 8005cf6:	4809      	ldr	r0, [pc, #36]	@ (8005d1c <Check_And_Save_When_Target_Reached+0xd0>)
 8005cf8:	e7ea      	b.n	8005cd0 <Check_And_Save_When_Target_Reached+0x84>
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	200009f8 	.word	0x200009f8
 8005d00:	0801cd3e 	.word	0x0801cd3e
 8005d04:	20000540 	.word	0x20000540
 8005d08:	0801cd36 	.word	0x0801cd36
 8005d0c:	0801cd2e 	.word	0x0801cd2e
 8005d10:	0801cd6b 	.word	0x0801cd6b
 8005d14:	000f423f 	.word	0x000f423f
 8005d18:	0801cda8 	.word	0x0801cda8
 8005d1c:	0801cdd4 	.word	0x0801cdd4

08005d20 <Count_Filter_Kalman>:
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    count_log = comp1_count;
 8005d22:	4b42      	ldr	r3, [pc, #264]	@ (8005e2c <Count_Filter_Kalman+0x10c>)
{
 8005d24:	b08b      	sub	sp, #44	@ 0x2c
    count_log = comp1_count;
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	4b41      	ldr	r3, [pc, #260]	@ (8005e30 <Count_Filter_Kalman+0x110>)
 8005d2a:	6018      	str	r0, [r3, #0]
    double measurement = (double)count_log;
 8005d2c:	f7fd fd10 	bl	8003750 <__aeabi_ui2d>
 8005d30:	000f      	movs	r7, r1
    if (!kalmanInit) {
 8005d32:	4940      	ldr	r1, [pc, #256]	@ (8005e34 <Count_Filter_Kalman+0x114>)
    double measurement = (double)count_log;
 8005d34:	0006      	movs	r6, r0
    if (!kalmanInit) {
 8005d36:	780b      	ldrb	r3, [r1, #0]
 8005d38:	4c3f      	ldr	r4, [pc, #252]	@ (8005e38 <Count_Filter_Kalman+0x118>)
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d113      	bne.n	8005d66 <Count_Filter_Kalman+0x46>
        P = 1.0;
 8005d3e:	2200      	movs	r2, #0
        kalmanInit = true;
 8005d40:	2001      	movs	r0, #1
        x_est = measurement;
 8005d42:	4b3e      	ldr	r3, [pc, #248]	@ (8005e3c <Count_Filter_Kalman+0x11c>)
        kalmanInit = true;
 8005d44:	7008      	strb	r0, [r1, #0]
        x_est = measurement;
 8005d46:	601e      	str	r6, [r3, #0]
 8005d48:	605f      	str	r7, [r3, #4]
        P = 1.0;
 8005d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e40 <Count_Filter_Kalman+0x120>)
        printf("[INIT] Raw=%.0f x_est(Raw)=%.6f P=%.6f\r\n",
 8005d4c:	483d      	ldr	r0, [pc, #244]	@ (8005e44 <Count_Filter_Kalman+0x124>)
        P = 1.0;
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	6063      	str	r3, [r4, #4]
        printf("[INIT] Raw=%.0f x_est(Raw)=%.6f P=%.6f\r\n",
 8005d52:	9202      	str	r2, [sp, #8]
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	9600      	str	r6, [sp, #0]
 8005d58:	9701      	str	r7, [sp, #4]
    printf("Raw=%.0f x_est(Raw)=%.6f Dose=%.4f\r\n",
 8005d5a:	0032      	movs	r2, r6
 8005d5c:	003b      	movs	r3, r7
 8005d5e:	f014 f9fd 	bl	801a15c <iprintf>
}
 8005d62:	b00b      	add	sp, #44	@ 0x2c
 8005d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    double P_pred = P + Q;
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	6861      	ldr	r1, [r4, #4]
 8005d6a:	4a37      	ldr	r2, [pc, #220]	@ (8005e48 <Count_Filter_Kalman+0x128>)
 8005d6c:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <Count_Filter_Kalman+0x12c>)
 8005d6e:	f7fb fd73 	bl	8001858 <__aeabi_dadd>
    double K = P_pred / (P_pred + R);
 8005d72:	4a37      	ldr	r2, [pc, #220]	@ (8005e50 <Count_Filter_Kalman+0x130>)
 8005d74:	4b37      	ldr	r3, [pc, #220]	@ (8005e54 <Count_Filter_Kalman+0x134>)
    double P_pred = P + Q;
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	9107      	str	r1, [sp, #28]
    double K = P_pred / (P_pred + R);
 8005d7a:	f7fb fd6d 	bl	8001858 <__aeabi_dadd>
 8005d7e:	0002      	movs	r2, r0
 8005d80:	000b      	movs	r3, r1
 8005d82:	9806      	ldr	r0, [sp, #24]
 8005d84:	9907      	ldr	r1, [sp, #28]
 8005d86:	f7fc f92d 	bl	8001fe4 <__aeabi_ddiv>
    double delta = measurement - x_est;
 8005d8a:	4d2c      	ldr	r5, [pc, #176]	@ (8005e3c <Count_Filter_Kalman+0x11c>)
    double K = P_pred / (P_pred + R);
 8005d8c:	9008      	str	r0, [sp, #32]
 8005d8e:	9109      	str	r1, [sp, #36]	@ 0x24
    double delta = measurement - x_est;
 8005d90:	682a      	ldr	r2, [r5, #0]
 8005d92:	686b      	ldr	r3, [r5, #4]
 8005d94:	0030      	movs	r0, r6
 8005d96:	0039      	movs	r1, r7
 8005d98:	9204      	str	r2, [sp, #16]
 8005d9a:	9305      	str	r3, [sp, #20]
 8005d9c:	f7fd f842 	bl	8002e24 <__aeabi_dsub>
    x_est = x_est + K * delta;
 8005da0:	9a08      	ldr	r2, [sp, #32]
 8005da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da4:	f7fc fd58 	bl	8002858 <__aeabi_dmul>
 8005da8:	9a04      	ldr	r2, [sp, #16]
 8005daa:	9b05      	ldr	r3, [sp, #20]
 8005dac:	f7fb fd54 	bl	8001858 <__aeabi_dadd>
 8005db0:	0002      	movs	r2, r0
 8005db2:	000b      	movs	r3, r1
 8005db4:	9004      	str	r0, [sp, #16]
 8005db6:	9105      	str	r1, [sp, #20]
 8005db8:	602a      	str	r2, [r5, #0]
 8005dba:	606b      	str	r3, [r5, #4]
    P = (1.0 - K) * P_pred;
 8005dbc:	9a08      	ldr	r2, [sp, #32]
 8005dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	491f      	ldr	r1, [pc, #124]	@ (8005e40 <Count_Filter_Kalman+0x120>)
 8005dc4:	f7fd f82e 	bl	8002e24 <__aeabi_dsub>
 8005dc8:	9a06      	ldr	r2, [sp, #24]
 8005dca:	9b07      	ldr	r3, [sp, #28]
 8005dcc:	f7fc fd44 	bl	8002858 <__aeabi_dmul>
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005dd0:	4a21      	ldr	r2, [pc, #132]	@ (8005e58 <Count_Filter_Kalman+0x138>)
    P = (1.0 - K) * P_pred;
 8005dd2:	6020      	str	r0, [r4, #0]
 8005dd4:	6061      	str	r1, [r4, #4]
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005dd6:	9804      	ldr	r0, [sp, #16]
 8005dd8:	9905      	ldr	r1, [sp, #20]
 8005dda:	4b20      	ldr	r3, [pc, #128]	@ (8005e5c <Count_Filter_Kalman+0x13c>)
 8005ddc:	f7fc fd3c 	bl	8002858 <__aeabi_dmul>
 8005de0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e60 <Count_Filter_Kalman+0x140>)
 8005de2:	4b20      	ldr	r3, [pc, #128]	@ (8005e64 <Count_Filter_Kalman+0x144>)
 8005de4:	f7fd f81e 	bl	8002e24 <__aeabi_dsub>
    if (Cal_dose < 0) Cal_dose = 0;
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005dec:	0004      	movs	r4, r0
 8005dee:	000d      	movs	r5, r1
    if (Cal_dose < 0) Cal_dose = 0;
 8005df0:	f7fa fb46 	bl	8000480 <__aeabi_dcmplt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d001      	beq.n	8005dfc <Count_Filter_Kalman+0xdc>
 8005df8:	2400      	movs	r4, #0
 8005dfa:	2500      	movs	r5, #0
    dose_log = (uint32_t)(Cal_dose * 100.0 + 0.5);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <Count_Filter_Kalman+0x148>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	0020      	movs	r0, r4
 8005e02:	9306      	str	r3, [sp, #24]
 8005e04:	0029      	movs	r1, r5
 8005e06:	4b19      	ldr	r3, [pc, #100]	@ (8005e6c <Count_Filter_Kalman+0x14c>)
 8005e08:	f7fc fd26 	bl	8002858 <__aeabi_dmul>
 8005e0c:	4b18      	ldr	r3, [pc, #96]	@ (8005e70 <Count_Filter_Kalman+0x150>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f7fb fd22 	bl	8001858 <__aeabi_dadd>
 8005e14:	f7fa fbec 	bl	80005f0 <__aeabi_d2uiz>
 8005e18:	9b06      	ldr	r3, [sp, #24]
 8005e1a:	6018      	str	r0, [r3, #0]
    printf("Raw=%.0f x_est(Raw)=%.6f Dose=%.4f\r\n",
 8005e1c:	9402      	str	r4, [sp, #8]
 8005e1e:	9503      	str	r5, [sp, #12]
 8005e20:	9b04      	ldr	r3, [sp, #16]
 8005e22:	9c05      	ldr	r4, [sp, #20]
 8005e24:	4813      	ldr	r0, [pc, #76]	@ (8005e74 <Count_Filter_Kalman+0x154>)
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	9401      	str	r4, [sp, #4]
 8005e2a:	e796      	b.n	8005d5a <Count_Filter_Kalman+0x3a>
 8005e2c:	20000560 	.word	0x20000560
 8005e30:	2000055c 	.word	0x2000055c
 8005e34:	200004f0 	.word	0x200004f0
 8005e38:	20000000 	.word	0x20000000
 8005e3c:	200004e8 	.word	0x200004e8
 8005e40:	3ff00000 	.word	0x3ff00000
 8005e44:	0801ce05 	.word	0x0801ce05
 8005e48:	47ae147b 	.word	0x47ae147b
 8005e4c:	3f747ae1 	.word	0x3f747ae1
 8005e50:	3d70a3d7 	.word	0x3d70a3d7
 8005e54:	3fefd70a 	.word	0x3fefd70a
 8005e58:	78d4fdf4 	.word	0x78d4fdf4
 8005e5c:	4046b6e9 	.word	0x4046b6e9
 8005e60:	8adab9f5 	.word	0x8adab9f5
 8005e64:	401365fd 	.word	0x401365fd
 8005e68:	20000530 	.word	0x20000530
 8005e6c:	40590000 	.word	0x40590000
 8005e70:	3fe00000 	.word	0x3fe00000
 8005e74:	0801ce2e 	.word	0x0801ce2e

08005e78 <Backup_GetMode>:
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005e78:	2101      	movs	r1, #1
{
 8005e7a:	b510      	push	{r4, lr}
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005e7c:	4818      	ldr	r0, [pc, #96]	@ (8005ee0 <Backup_GetMode+0x68>)
 8005e7e:	f00c f941 	bl	8012104 <HAL_RTCEx_BKUPRead>
    if (mode_raw > MODE_End) {
 8005e82:	b283      	uxth	r3, r0
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005e84:	0002      	movs	r2, r0
    if (mode_raw > MODE_End) {
 8005e86:	2b07      	cmp	r3, #7
 8005e88:	d824      	bhi.n	8005ed4 <Backup_GetMode+0x5c>
        mode = (SystemMode)mode_raw;
 8005e8a:	b2c4      	uxtb	r4, r0
    switch (mode) {
 8005e8c:	1e60      	subs	r0, r4, #1
 8005e8e:	2806      	cmp	r0, #6
 8005e90:	d81d      	bhi.n	8005ece <Backup_GetMode+0x56>
 8005e92:	f7fa f94b 	bl	800012c <__gnu_thumb1_case_uqi>
 8005e96:	2204      	.short	0x2204
 8005e98:	16131007 	.word	0x16131007
 8005e9c:	19          	.byte	0x19
 8005e9d:	00          	.byte	0x00
 8005e9e:	2300      	movs	r3, #0
        default:                mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8005ea0:	4910      	ldr	r1, [pc, #64]	@ (8005ee4 <Backup_GetMode+0x6c>)
 8005ea2:	e001      	b.n	8005ea8 <Backup_GetMode+0x30>
        case MODE_Start:        mode_str = "MODE_Start";        Meas_Mode = 2; break;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	4910      	ldr	r1, [pc, #64]	@ (8005ee8 <Backup_GetMode+0x70>)
        case MODE_Boot:         mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8005ea8:	4810      	ldr	r0, [pc, #64]	@ (8005eec <Backup_GetMode+0x74>)
 8005eaa:	7003      	strb	r3, [r0, #0]
    printf("Current Mode: %s (raw=0x%08lX)\r\n", mode_str, val);
 8005eac:	4810      	ldr	r0, [pc, #64]	@ (8005ef0 <Backup_GetMode+0x78>)
 8005eae:	f014 f955 	bl	801a15c <iprintf>
}
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	bd10      	pop	{r4, pc}
        case MODE_Pause:        mode_str = "MODE_Pause";        Meas_Mode = 3; break;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	490e      	ldr	r1, [pc, #56]	@ (8005ef4 <Backup_GetMode+0x7c>)
 8005eba:	e7f5      	b.n	8005ea8 <Backup_GetMode+0x30>
        case MODE_Start_Button: mode_str = "MODE_Start_Button"; Meas_Mode = 4; break;
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	490e      	ldr	r1, [pc, #56]	@ (8005ef8 <Backup_GetMode+0x80>)
 8005ec0:	e7f2      	b.n	8005ea8 <Backup_GetMode+0x30>
        case Mode_Start_Delay:  mode_str = "Mode_Start_Delay" ; Meas_Mode = 5; break;
 8005ec2:	2305      	movs	r3, #5
 8005ec4:	490d      	ldr	r1, [pc, #52]	@ (8005efc <Backup_GetMode+0x84>)
 8005ec6:	e7ef      	b.n	8005ea8 <Backup_GetMode+0x30>
        case MODE_End:          mode_str = "MODE_End";          Meas_Mode = 6; break;
 8005ec8:	2306      	movs	r3, #6
 8005eca:	490d      	ldr	r1, [pc, #52]	@ (8005f00 <Backup_GetMode+0x88>)
 8005ecc:	e7ec      	b.n	8005ea8 <Backup_GetMode+0x30>
        default:                mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	001c      	movs	r4, r3
 8005ed2:	e7e5      	b.n	8005ea0 <Backup_GetMode+0x28>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2401      	movs	r4, #1
 8005ed8:	e7e2      	b.n	8005ea0 <Backup_GetMode+0x28>
    switch (mode) {
 8005eda:	2301      	movs	r3, #1
 8005edc:	4909      	ldr	r1, [pc, #36]	@ (8005f04 <Backup_GetMode+0x8c>)
 8005ede:	e7e3      	b.n	8005ea8 <Backup_GetMode+0x30>
 8005ee0:	200009f8 	.word	0x200009f8
 8005ee4:	0801ce53 	.word	0x0801ce53
 8005ee8:	0801ce67 	.word	0x0801ce67
 8005eec:	20000535 	.word	0x20000535
 8005ef0:	0801cea9 	.word	0x0801cea9
 8005ef4:	0801ce72 	.word	0x0801ce72
 8005ef8:	0801ce7d 	.word	0x0801ce7d
 8005efc:	0801ce8f 	.word	0x0801ce8f
 8005f00:	0801cea0 	.word	0x0801cea0
 8005f04:	0801ce5d 	.word	0x0801ce5d

08005f08 <Backup_SetMode>:
{
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();
 8005f0c:	f00a fde2 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005f10:	4d06      	ldr	r5, [pc, #24]	@ (8005f2c <Backup_SetMode+0x24>)
 8005f12:	2101      	movs	r1, #1
 8005f14:	0028      	movs	r0, r5
 8005f16:	f00c f8f5 	bl	8012104 <HAL_RTCEx_BKUPRead>
    val = (val & 0xFFFF0000) | (mode & 0xFFFF);
 8005f1a:	0c02      	lsrs	r2, r0, #16
 8005f1c:	0412      	lsls	r2, r2, #16
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 8005f1e:	0028      	movs	r0, r5
 8005f20:	2101      	movs	r1, #1
    val = (val & 0xFFFF0000) | (mode & 0xFFFF);
 8005f22:	4322      	orrs	r2, r4
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 8005f24:	f00c f8e6 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
}
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	200009f8 	.word	0x200009f8

08005f30 <Clear_WakeupTime_Backup>:
{
 8005f30:	b510      	push	{r4, lr}
    HAL_PWR_EnableBkUpAccess();
 8005f32:	f00a fdcf 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, 0xFFFFFFFF);
 8005f36:	2201      	movs	r2, #1
 8005f38:	4c07      	ldr	r4, [pc, #28]	@ (8005f58 <Clear_WakeupTime_Backup+0x28>)
 8005f3a:	4252      	negs	r2, r2
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	2107      	movs	r1, #7
 8005f40:	f00c f8d8 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005f44:	2107      	movs	r1, #7
 8005f46:	0020      	movs	r0, r4
 8005f48:	f00c f8dc 	bl	8012104 <HAL_RTCEx_BKUPRead>
    printf("[Clear] BKP_WAKEUP_TIME Write: 0xFFFFFFFF, ReadBack = 0x%08lX\n", check);
 8005f4c:	4b03      	ldr	r3, [pc, #12]	@ (8005f5c <Clear_WakeupTime_Backup+0x2c>)
    uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005f4e:	0001      	movs	r1, r0
    printf("[Clear] BKP_WAKEUP_TIME Write: 0xFFFFFFFF, ReadBack = 0x%08lX\n", check);
 8005f50:	0018      	movs	r0, r3
 8005f52:	f014 f903 	bl	801a15c <iprintf>
}
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	200009f8 	.word	0x200009f8
 8005f5c:	0801ceca 	.word	0x0801ceca

08005f60 <Switch_Backup_reg>:
{
 8005f60:	b510      	push	{r4, lr}
 8005f62:	0004      	movs	r4, r0
    SystemMode prev_mode = Backup_GetMode();
 8005f64:	f7ff ff88 	bl	8005e78 <Backup_GetMode>
    if (prev_mode != new_mode) {
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d004      	beq.n	8005f76 <Switch_Backup_reg+0x16>
        Backup_SetMode(new_mode);
 8005f6c:	0020      	movs	r0, r4
 8005f6e:	f7ff ffcb 	bl	8005f08 <Backup_SetMode>
        Backup_GetMode();
 8005f72:	f7ff ff81 	bl	8005e78 <Backup_GetMode>
    SystemMode cur_mode = Backup_GetMode(); // 이때 Meas_Mode도 자동 세팅됨
 8005f76:	f7ff ff7f 	bl	8005e78 <Backup_GetMode>
    switch (cur_mode) {
 8005f7a:	3802      	subs	r0, #2
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2805      	cmp	r0, #5
 8005f80:	d805      	bhi.n	8005f8e <Switch_Backup_reg+0x2e>
 8005f82:	f7fa f8d3 	bl	800012c <__gnu_thumb1_case_uqi>
 8005f86:	0307      	.short	0x0307
 8005f88:	2318110b 	.word	0x2318110b
 8005f8c:	2302      	movs	r3, #2
        case MODE_Boot:   Meas_Mode = 0; break;
 8005f8e:	4a10      	ldr	r2, [pc, #64]	@ (8005fd0 <Switch_Backup_reg+0x70>)
 8005f90:	7013      	strb	r3, [r2, #0]
}
 8005f92:	bd10      	pop	{r4, pc}
        	RTC_Disable_All_Wakeup();
 8005f94:	f7ff fba2 	bl	80056dc <RTC_Disable_All_Wakeup>
        	break;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f8      	b.n	8005f8e <Switch_Backup_reg+0x2e>
        	Clear_WakeupTime_Backup();
 8005f9c:	f7ff ffc8 	bl	8005f30 <Clear_WakeupTime_Backup>
        	RTC_Disable_All_Wakeup();
 8005fa0:	f7ff fb9c 	bl	80056dc <RTC_Disable_All_Wakeup>
        	break;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e7f2      	b.n	8005f8e <Switch_Backup_reg+0x2e>
        case MODE_Start_Button: Tick_Save = Interval_LCD_Count+2;  Meas_Mode = 4; break;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <Switch_Backup_reg+0x74>)
 8005faa:	4a0b      	ldr	r2, [pc, #44]	@ (8005fd8 <Switch_Backup_reg+0x78>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3302      	adds	r3, #2
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	e7eb      	b.n	8005f8e <Switch_Backup_reg+0x2e>
        	if(current_settings.start_mode == 0x04){
 8005fb6:	4b09      	ldr	r3, [pc, #36]	@ (8005fdc <Switch_Backup_reg+0x7c>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d103      	bne.n	8005fc6 <Switch_Backup_reg+0x66>
        		Set_StartTargetTime_FromReservation();
 8005fbe:	f7ff fc33 	bl	8005828 <Set_StartTargetTime_FromReservation>
        	break;
 8005fc2:	2305      	movs	r3, #5
 8005fc4:	e7e3      	b.n	8005f8e <Switch_Backup_reg+0x2e>
        	Start_Delay_Timer();}
 8005fc6:	f7ff fda7 	bl	8005b18 <Start_Delay_Timer>
 8005fca:	e7fa      	b.n	8005fc2 <Switch_Backup_reg+0x62>
        case MODE_End:    Meas_Mode = 6; break;
 8005fcc:	2306      	movs	r3, #6
 8005fce:	e7de      	b.n	8005f8e <Switch_Backup_reg+0x2e>
 8005fd0:	20000535 	.word	0x20000535
 8005fd4:	2000053c 	.word	0x2000053c
 8005fd8:	20000540 	.word	0x20000540
 8005fdc:	20002c0f 	.word	0x20002c0f

08005fe0 <Get_in_Shutdown_Timer>:
{
 8005fe0:	b510      	push	{r4, lr}
    Switch_Backup_reg(MODE_Start_Button);
 8005fe2:	2005      	movs	r0, #5
 8005fe4:	f7ff ffbc 	bl	8005f60 <Switch_Backup_reg>
    LCD_Clear_Display(LCD_data);
 8005fe8:	4824      	ldr	r0, [pc, #144]	@ (800607c <Get_in_Shutdown_Timer+0x9c>)
 8005fea:	f7fe fe85 	bl	8004cf8 <LCD_Clear_Display>
    printf("Getting on to sleep(Timer)\r\n");
 8005fee:	4824      	ldr	r0, [pc, #144]	@ (8006080 <Get_in_Shutdown_Timer+0xa0>)
 8005ff0:	f014 f924 	bl	801a23c <puts>
    if (rad_interval_count == 0) {
 8005ff4:	4b23      	ldr	r3, [pc, #140]	@ (8006084 <Get_in_Shutdown_Timer+0xa4>)
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	4b23      	ldr	r3, [pc, #140]	@ (8006088 <Get_in_Shutdown_Timer+0xa8>)
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	d129      	bne.n	8006052 <Get_in_Shutdown_Timer+0x72>
        sleep_time = current_settings.temp_interval - 14;
 8005ffe:	0019      	movs	r1, r3
 8006000:	001a      	movs	r2, r3
 8006002:	3176      	adds	r1, #118	@ 0x76
 8006004:	7809      	ldrb	r1, [r1, #0]
 8006006:	3275      	adds	r2, #117	@ 0x75
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	0209      	lsls	r1, r1, #8
 800600c:	4311      	orrs	r1, r2
 800600e:	001a      	movs	r2, r3
 8006010:	3277      	adds	r2, #119	@ 0x77
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	3378      	adds	r3, #120	@ 0x78
 8006016:	781c      	ldrb	r4, [r3, #0]
 8006018:	0412      	lsls	r2, r2, #16
 800601a:	430a      	orrs	r2, r1
 800601c:	0624      	lsls	r4, r4, #24
 800601e:	4314      	orrs	r4, r2
        printf("다음번엔 Rad 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006020:	481a      	ldr	r0, [pc, #104]	@ (800608c <Get_in_Shutdown_Timer+0xac>)
        sleep_time = current_settings.temp_interval - 14;
 8006022:	3c0e      	subs	r4, #14
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006024:	0021      	movs	r1, r4
 8006026:	f014 f899 	bl	801a15c <iprintf>
    RTC_Disable_All_Wakeup();
 800602a:	f7ff fb57 	bl	80056dc <RTC_Disable_All_Wakeup>
    Save_Power_Function();
 800602e:	f7ff fd29 	bl	8005a84 <Save_Power_Function>
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8006032:	2081      	movs	r0, #129	@ 0x81
 8006034:	f00a fd58 	bl	8010ae8 <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
 8006038:	2002      	movs	r0, #2
 800603a:	f00a fd55 	bl	8010ae8 <HAL_PWR_EnableWakeUpPin>
    RTC_SetAlarmA_SecondsFromNow(sleep_time);
 800603e:	0020      	movs	r0, r4
 8006040:	f7ff fb76 	bl	8005730 <RTC_SetAlarmA_SecondsFromNow>
    HAL_SuspendTick();
 8006044:	f008 f922 	bl	800e28c <HAL_SuspendTick>
    HAL_PWR_EnterSHUTDOWNMode();
 8006048:	f00a fd5c 	bl	8010b04 <HAL_PWR_EnterSHUTDOWNMode>
    HAL_ResumeTick();
 800604c:	f008 f926 	bl	800e29c <HAL_ResumeTick>
}
 8006050:	bd10      	pop	{r4, pc}
        sleep_time = current_settings.temp_interval - 5;
 8006052:	0019      	movs	r1, r3
 8006054:	001a      	movs	r2, r3
 8006056:	3176      	adds	r1, #118	@ 0x76
 8006058:	7809      	ldrb	r1, [r1, #0]
 800605a:	3275      	adds	r2, #117	@ 0x75
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	0209      	lsls	r1, r1, #8
 8006060:	4311      	orrs	r1, r2
 8006062:	001a      	movs	r2, r3
 8006064:	3277      	adds	r2, #119	@ 0x77
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	3378      	adds	r3, #120	@ 0x78
 800606a:	781c      	ldrb	r4, [r3, #0]
 800606c:	0412      	lsls	r2, r2, #16
 800606e:	430a      	orrs	r2, r1
 8006070:	0624      	lsls	r4, r4, #24
 8006072:	4314      	orrs	r4, r2
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006074:	4806      	ldr	r0, [pc, #24]	@ (8006090 <Get_in_Shutdown_Timer+0xb0>)
        sleep_time = current_settings.temp_interval - 5;
 8006076:	3c05      	subs	r4, #5
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006078:	e7d4      	b.n	8006024 <Get_in_Shutdown_Timer+0x44>
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	20000514 	.word	0x20000514
 8006080:	0801cf09 	.word	0x0801cf09
 8006084:	200004fd 	.word	0x200004fd
 8006088:	20002bac 	.word	0x20002bac
 800608c:	0801cf25 	.word	0x0801cf25
 8006090:	0801cf55 	.word	0x0801cf55

08006094 <Start_Wake_Timer>:
void Start_Wake_Timer(){
 8006094:	b510      	push	{r4, lr}
	Switch_Backup_reg(MODE_Start_Button);
 8006096:	2005      	movs	r0, #5
 8006098:	f7ff ff62 	bl	8005f60 <Switch_Backup_reg>
	LCD_Clear_Display(LCD_data);
 800609c:	481b      	ldr	r0, [pc, #108]	@ (800610c <Start_Wake_Timer+0x78>)
 800609e:	f7fe fe2b 	bl	8004cf8 <LCD_Clear_Display>
	RTC_Disable_All_Wakeup();
 80060a2:	f7ff fb1b 	bl	80056dc <RTC_Disable_All_Wakeup>
	    if (rad_interval_count == 0) {
 80060a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <Start_Wake_Timer+0x7c>)
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006114 <Start_Wake_Timer+0x80>)
 80060ac:	2a00      	cmp	r2, #0
 80060ae:	d119      	bne.n	80060e4 <Start_Wake_Timer+0x50>
	        sleep_time = current_settings.temp_interval - 14;
 80060b0:	0019      	movs	r1, r3
 80060b2:	001a      	movs	r2, r3
 80060b4:	3176      	adds	r1, #118	@ 0x76
 80060b6:	7809      	ldrb	r1, [r1, #0]
 80060b8:	3275      	adds	r2, #117	@ 0x75
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	0209      	lsls	r1, r1, #8
 80060be:	4311      	orrs	r1, r2
 80060c0:	001a      	movs	r2, r3
 80060c2:	3277      	adds	r2, #119	@ 0x77
 80060c4:	7812      	ldrb	r2, [r2, #0]
 80060c6:	3378      	adds	r3, #120	@ 0x78
 80060c8:	781c      	ldrb	r4, [r3, #0]
 80060ca:	0412      	lsls	r2, r2, #16
 80060cc:	430a      	orrs	r2, r1
 80060ce:	0624      	lsls	r4, r4, #24
 80060d0:	4314      	orrs	r4, r2
	        printf("다음번엔 Rad 측정, Sleep Time = %lu sec\r\n", sleep_time);
 80060d2:	4811      	ldr	r0, [pc, #68]	@ (8006118 <Start_Wake_Timer+0x84>)
	        sleep_time = current_settings.temp_interval - 14;
 80060d4:	3c0e      	subs	r4, #14
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 80060d6:	0021      	movs	r1, r4
 80060d8:	f014 f840 	bl	801a15c <iprintf>
	    RTC_SetAlarmA_SecondsFromNow(sleep_time);
 80060dc:	0020      	movs	r0, r4
 80060de:	f7ff fb27 	bl	8005730 <RTC_SetAlarmA_SecondsFromNow>
}
 80060e2:	bd10      	pop	{r4, pc}
	        sleep_time = current_settings.temp_interval - 5;
 80060e4:	0019      	movs	r1, r3
 80060e6:	001a      	movs	r2, r3
 80060e8:	3176      	adds	r1, #118	@ 0x76
 80060ea:	7809      	ldrb	r1, [r1, #0]
 80060ec:	3275      	adds	r2, #117	@ 0x75
 80060ee:	7812      	ldrb	r2, [r2, #0]
 80060f0:	0209      	lsls	r1, r1, #8
 80060f2:	4311      	orrs	r1, r2
 80060f4:	001a      	movs	r2, r3
 80060f6:	3277      	adds	r2, #119	@ 0x77
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	3378      	adds	r3, #120	@ 0x78
 80060fc:	781c      	ldrb	r4, [r3, #0]
 80060fe:	0412      	lsls	r2, r2, #16
 8006100:	430a      	orrs	r2, r1
 8006102:	0624      	lsls	r4, r4, #24
 8006104:	4314      	orrs	r4, r2
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8006106:	4805      	ldr	r0, [pc, #20]	@ (800611c <Start_Wake_Timer+0x88>)
	        sleep_time = current_settings.temp_interval - 5;
 8006108:	3c05      	subs	r4, #5
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 800610a:	e7e4      	b.n	80060d6 <Start_Wake_Timer+0x42>
 800610c:	20000514 	.word	0x20000514
 8006110:	200004fd 	.word	0x200004fd
 8006114:	20002bac 	.word	0x20002bac
 8006118:	0801cf25 	.word	0x0801cf25
 800611c:	0801cf55 	.word	0x0801cf55

08006120 <Save_IndexNum_To_Backup>:
void Save_IndexNum_To_Backup(uint16_t idx) {
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();
 8006124:	f00a fcd6 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8006128:	4d06      	ldr	r5, [pc, #24]	@ (8006144 <Save_IndexNum_To_Backup+0x24>)
 800612a:	2101      	movs	r1, #1
 800612c:	0028      	movs	r0, r5
 800612e:	f00b ffe9 	bl	8012104 <HAL_RTCEx_BKUPRead>
    val = (val & 0x0000FFFF) | (((uint32_t)idx) << 16);
 8006132:	0422      	lsls	r2, r4, #16
 8006134:	b280      	uxth	r0, r0
 8006136:	4302      	orrs	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 8006138:	2101      	movs	r1, #1
 800613a:	0028      	movs	r0, r5
 800613c:	f00b ffda 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
}
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	200009f8 	.word	0x200009f8

08006148 <Save_Dose_To_Backup>:
{
 8006148:	b510      	push	{r4, lr}
 800614a:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX, cfg->dose_max);
 800614c:	6862      	ldr	r2, [r4, #4]
 800614e:	2100      	movs	r1, #0
 8006150:	4804      	ldr	r0, [pc, #16]	@ (8006164 <Save_Dose_To_Backup+0x1c>)
 8006152:	f00b ffcf 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Dose Max=%u (Raw: 0x%08lX)\n", cfg->dose_max, (unsigned long)cfg->dose_max);
 8006156:	6861      	ldr	r1, [r4, #4]
 8006158:	4803      	ldr	r0, [pc, #12]	@ (8006168 <Save_Dose_To_Backup+0x20>)
 800615a:	000a      	movs	r2, r1
 800615c:	f013 fffe 	bl	801a15c <iprintf>
}
 8006160:	bd10      	pop	{r4, pc}
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	200009f8 	.word	0x200009f8
 8006168:	0801cf86 	.word	0x0801cf86

0800616c <Save_Temp_To_Backup>:
{
 800616c:	b510      	push	{r4, lr}
 800616e:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_TEMP_MIN_MAX, pack);
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	2102      	movs	r1, #2
 8006174:	4805      	ldr	r0, [pc, #20]	@ (800618c <Save_Temp_To_Backup+0x20>)
 8006176:	f00b ffbd 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Temp Max=%d, Min=%d\n", cfg->temp_max, cfg->temp_min);
 800617a:	2302      	movs	r3, #2
 800617c:	5ee2      	ldrsh	r2, [r4, r3]
 800617e:	2300      	movs	r3, #0
 8006180:	5ee1      	ldrsh	r1, [r4, r3]
 8006182:	4803      	ldr	r0, [pc, #12]	@ (8006190 <Save_Temp_To_Backup+0x24>)
 8006184:	f013 ffea 	bl	801a15c <iprintf>
}
 8006188:	bd10      	pop	{r4, pc}
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	200009f8 	.word	0x200009f8
 8006190:	0801cfb0 	.word	0x0801cfb0

08006194 <Save_Backup_Index>:
void Save_Backup_Index(void) {
 8006194:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t reg3 = ((uint32_t)idx_temp << 16) | (idx_rad & 0xFFFF);
 8006196:	4e10      	ldr	r6, [pc, #64]	@ (80061d8 <Save_Backup_Index+0x44>)
 8006198:	4d10      	ldr	r5, [pc, #64]	@ (80061dc <Save_Backup_Index+0x48>)
 800619a:	8833      	ldrh	r3, [r6, #0]
 800619c:	882a      	ldrh	r2, [r5, #0]
 800619e:	041b      	lsls	r3, r3, #16
void Save_Backup_Index(void) {
 80061a0:	b085      	sub	sp, #20
    uint32_t reg4 = (uint32_t)rad_interval_count;
 80061a2:	4f0f      	ldr	r7, [pc, #60]	@ (80061e0 <Save_Backup_Index+0x4c>)
    uint32_t reg3 = ((uint32_t)idx_temp << 16) | (idx_rad & 0xFFFF);
 80061a4:	4313      	orrs	r3, r2
 80061a6:	9302      	str	r3, [sp, #8]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80061a8:	4b0e      	ldr	r3, [pc, #56]	@ (80061e4 <Save_Backup_Index+0x50>)
    uint32_t reg4 = (uint32_t)rad_interval_count;
 80061aa:	783c      	ldrb	r4, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80061ac:	0018      	movs	r0, r3
 80061ae:	9a02      	ldr	r2, [sp, #8]
 80061b0:	2103      	movs	r1, #3
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	f00b ff9e 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG, reg4);
 80061b8:	0022      	movs	r2, r4
 80061ba:	9803      	ldr	r0, [sp, #12]
 80061bc:	2104      	movs	r1, #4
 80061be:	f00b ff99 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved Backup Index: idx_rad=%u, idx_temp=%u, rad_interval_count=%u "
 80061c2:	783b      	ldrb	r3, [r7, #0]
 80061c4:	8832      	ldrh	r2, [r6, #0]
 80061c6:	8829      	ldrh	r1, [r5, #0]
 80061c8:	9401      	str	r4, [sp, #4]
 80061ca:	9c02      	ldr	r4, [sp, #8]
 80061cc:	4806      	ldr	r0, [pc, #24]	@ (80061e8 <Save_Backup_Index+0x54>)
 80061ce:	9400      	str	r4, [sp, #0]
 80061d0:	f013 ffc4 	bl	801a15c <iprintf>
}
 80061d4:	b005      	add	sp, #20
 80061d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d8:	200004fe 	.word	0x200004fe
 80061dc:	20000500 	.word	0x20000500
 80061e0:	200004fd 	.word	0x200004fd
 80061e4:	200009f8 	.word	0x200009f8
 80061e8:	0801cfd3 	.word	0x0801cfd3

080061ec <Clear_Backup_Index>:
void Clear_Backup_Index(void) {
 80061ec:	b570      	push	{r4, r5, r6, lr}
    idx_rad = 0;
 80061ee:	2400      	movs	r4, #0
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <Clear_Backup_Index+0x34>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80061f2:	4d0c      	ldr	r5, [pc, #48]	@ (8006224 <Clear_Backup_Index+0x38>)
    idx_rad = 0;
 80061f4:	801c      	strh	r4, [r3, #0]
    idx_temp = 0;
 80061f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <Clear_Backup_Index+0x3c>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80061f8:	0028      	movs	r0, r5
    idx_temp = 0;
 80061fa:	801c      	strh	r4, [r3, #0]
    rad_interval_count = 0;
 80061fc:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <Clear_Backup_Index+0x40>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80061fe:	0022      	movs	r2, r4
 8006200:	2103      	movs	r1, #3
    rad_interval_count = 0;
 8006202:	701c      	strb	r4, [r3, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 8006204:	f00b ff76 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG, reg4);
 8006208:	0028      	movs	r0, r5
 800620a:	0022      	movs	r2, r4
 800620c:	2104      	movs	r1, #4
 800620e:	f00b ff71 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Clear] Backup Index Cleared: idx_rad=0, idx_temp=0, rad_interval_count=0 "
 8006212:	0022      	movs	r2, r4
 8006214:	0021      	movs	r1, r4
 8006216:	4806      	ldr	r0, [pc, #24]	@ (8006230 <Clear_Backup_Index+0x44>)
 8006218:	f013 ffa0 	bl	801a15c <iprintf>
}
 800621c:	bd70      	pop	{r4, r5, r6, pc}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	20000500 	.word	0x20000500
 8006224:	200009f8 	.word	0x200009f8
 8006228:	200004fe 	.word	0x200004fe
 800622c:	200004fd 	.word	0x200004fd
 8006230:	0801d042 	.word	0x0801d042

08006234 <Save_MarkAndAlarmState_To_Backup>:
{
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	0004      	movs	r4, r0
                 | ((uint32_t)(cfg->alarm_state) << 8);     // 8~19 (6*2bit)
 8006238:	6985      	ldr	r5, [r0, #24]
    uint32_t val = ((uint32_t)(cfg->mark) & 0xFF)           // 0~7
 800623a:	7d03      	ldrb	r3, [r0, #20]
                 | ((uint32_t)(cfg->alarm_state) << 8);     // 8~19 (6*2bit)
 800623c:	022d      	lsls	r5, r5, #8
    uint32_t val = ((uint32_t)(cfg->mark) & 0xFF)           // 0~7
 800623e:	431d      	orrs	r5, r3
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK, val);
 8006240:	002a      	movs	r2, r5
 8006242:	2106      	movs	r1, #6
 8006244:	4804      	ldr	r0, [pc, #16]	@ (8006258 <Save_MarkAndAlarmState_To_Backup+0x24>)
 8006246:	f00b ff55 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved Mark=0x%02X, AlarmState=0x%04X (Packed=0x%08lX)\r\n",
 800624a:	002b      	movs	r3, r5
 800624c:	7d21      	ldrb	r1, [r4, #20]
 800624e:	69a2      	ldr	r2, [r4, #24]
 8006250:	4802      	ldr	r0, [pc, #8]	@ (800625c <Save_MarkAndAlarmState_To_Backup+0x28>)
 8006252:	f013 ff83 	bl	801a15c <iprintf>
}
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	200009f8 	.word	0x200009f8
 800625c:	0801d0b0 	.word	0x0801d0b0

08006260 <Save_IntervalInfo_To_Backup>:
{
 8006260:	b510      	push	{r4, lr}
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_INTERVAL_INFO, info_pack);
 8006262:	4b03      	ldr	r3, [pc, #12]	@ (8006270 <Save_IntervalInfo_To_Backup+0x10>)
 8006264:	69c2      	ldr	r2, [r0, #28]
 8006266:	2108      	movs	r1, #8
 8006268:	0018      	movs	r0, r3
 800626a:	f00b ff43 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
}
 800626e:	bd10      	pop	{r4, pc}
 8006270:	200009f8 	.word	0x200009f8

08006274 <Save_Mark_To_Backup>:
{
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006276:	4f0b      	ldr	r7, [pc, #44]	@ (80062a4 <Save_Mark_To_Backup+0x30>)
{
 8006278:	0004      	movs	r4, r0
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800627a:	0038      	movs	r0, r7
 800627c:	2106      	movs	r1, #6
 800627e:	f00b ff41 	bl	8012104 <HAL_RTCEx_BKUPRead>
    uint32_t alarm_bits = (prev_val & 0xFFFFFF00);  // 상위 alarm_state 보존
 8006282:	23ff      	movs	r3, #255	@ 0xff
 8006284:	0006      	movs	r6, r0
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006286:	0005      	movs	r5, r0
    uint32_t alarm_bits = (prev_val & 0xFFFFFF00);  // 상위 alarm_state 보존
 8006288:	439e      	bics	r6, r3
    uint32_t new_val = (mark & 0xFF) | alarm_bits;
 800628a:	4326      	orrs	r6, r4
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK, new_val);
 800628c:	0032      	movs	r2, r6
 800628e:	0038      	movs	r0, r7
 8006290:	2106      	movs	r1, #6
 8006292:	f00b ff2f 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved ONLY Mark=0x%02X (Prev=0x%08lX → New=0x%08lX)\r\n",
 8006296:	0033      	movs	r3, r6
 8006298:	002a      	movs	r2, r5
 800629a:	0021      	movs	r1, r4
 800629c:	4802      	ldr	r0, [pc, #8]	@ (80062a8 <Save_Mark_To_Backup+0x34>)
 800629e:	f013 ff5d 	bl	801a15c <iprintf>
}
 80062a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062a4:	200009f8 	.word	0x200009f8
 80062a8:	0801d0f0 	.word	0x0801d0f0

080062ac <Save_WakeupTime_To_Backup>:
{
 80062ac:	b570      	push	{r4, r5, r6, lr}
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, target_sec);
 80062ae:	4d0b      	ldr	r5, [pc, #44]	@ (80062dc <Save_WakeupTime_To_Backup+0x30>)
{
 80062b0:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, target_sec);
 80062b2:	0002      	movs	r2, r0
 80062b4:	2107      	movs	r1, #7
 80062b6:	0028      	movs	r0, r5
 80062b8:	f00b ff1c 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    uint32_t verify = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 80062bc:	2107      	movs	r1, #7
 80062be:	0028      	movs	r0, r5
 80062c0:	f00b ff20 	bl	8012104 <HAL_RTCEx_BKUPRead>
 80062c4:	0005      	movs	r5, r0
    printf("[Backup] Save Wakeup Target Time = %lu (Raw: 0x%08lX)\n", target_sec, target_sec);
 80062c6:	0022      	movs	r2, r4
 80062c8:	0021      	movs	r1, r4
 80062ca:	4805      	ldr	r0, [pc, #20]	@ (80062e0 <Save_WakeupTime_To_Backup+0x34>)
 80062cc:	f013 ff46 	bl	801a15c <iprintf>
    printf("[Verify] ReadBack Value = %lu (Raw: 0x%08lX)\n", verify, verify);
 80062d0:	002a      	movs	r2, r5
 80062d2:	0029      	movs	r1, r5
 80062d4:	4803      	ldr	r0, [pc, #12]	@ (80062e4 <Save_WakeupTime_To_Backup+0x38>)
 80062d6:	f013 ff41 	bl	801a15c <iprintf>
}
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	200009f8 	.word	0x200009f8
 80062e0:	0801d130 	.word	0x0801d130
 80062e4:	0801d167 	.word	0x0801d167

080062e8 <Save_Pre_RAD_Value_To_Backup>:
{
 80062e8:	b510      	push	{r4, lr}
 80062ea:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();   // BKUP 영역 쓰기 권한 허용
 80062ec:	f00a fbf2 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE, value);
 80062f0:	0022      	movs	r2, r4
 80062f2:	2105      	movs	r1, #5
 80062f4:	4804      	ldr	r0, [pc, #16]	@ (8006308 <Save_Pre_RAD_Value_To_Backup+0x20>)
 80062f6:	f00b fefd 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Pre_RAD_Value = %lu (Raw: 0x%08lX)\r\n", value, value);
 80062fa:	0022      	movs	r2, r4
 80062fc:	0021      	movs	r1, r4
 80062fe:	4803      	ldr	r0, [pc, #12]	@ (800630c <Save_Pre_RAD_Value_To_Backup+0x24>)
 8006300:	f013 ff2c 	bl	801a15c <iprintf>
}
 8006304:	bd10      	pop	{r4, pc}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	200009f8 	.word	0x200009f8
 800630c:	0801d195 	.word	0x0801d195

08006310 <Save_All_Config_To_BackupRegister>:
{
 8006310:	b510      	push	{r4, lr}
 8006312:	0004      	movs	r4, r0
    Save_Temp_To_Backup(cfg);
 8006314:	f7ff ff2a 	bl	800616c <Save_Temp_To_Backup>
    Save_Dose_To_Backup(cfg);
 8006318:	0020      	movs	r0, r4
 800631a:	f7ff ff15 	bl	8006148 <Save_Dose_To_Backup>
    Save_MarkAndAlarmState_To_Backup(cfg);
 800631e:	0020      	movs	r0, r4
 8006320:	f7ff ff88 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
    Save_IntervalInfo_To_Backup(cfg);
 8006324:	0020      	movs	r0, r4
 8006326:	f7ff ff9b 	bl	8006260 <Save_IntervalInfo_To_Backup>
}
 800632a:	bd10      	pop	{r4, pc}

0800632c <Load_IndexNum_From_Backup>:
{
 800632c:	b510      	push	{r4, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 800632e:	2101      	movs	r1, #1
 8006330:	4802      	ldr	r0, [pc, #8]	@ (800633c <Load_IndexNum_From_Backup+0x10>)
 8006332:	f00b fee7 	bl	8012104 <HAL_RTCEx_BKUPRead>
    return idx;
 8006336:	0c00      	lsrs	r0, r0, #16
}
 8006338:	bd10      	pop	{r4, pc}
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	200009f8 	.word	0x200009f8

08006340 <Load_Temp_From_Backup>:
{
 8006340:	b510      	push	{r4, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_TEMP_MIN_MAX);
 8006342:	2102      	movs	r1, #2
{
 8006344:	0004      	movs	r4, r0
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_TEMP_MIN_MAX);
 8006346:	4805      	ldr	r0, [pc, #20]	@ (800635c <Load_Temp_From_Backup+0x1c>)
 8006348:	f00b fedc 	bl	8012104 <HAL_RTCEx_BKUPRead>
    cfg->temp_max = (int16_t)(val & 0xFFFF);           // 하위 16비트
 800634c:	6020      	str	r0, [r4, #0]
    printf("[Backup] Load Temp Max=%d, Min=%d\n", cfg->temp_max, cfg->temp_min);
 800634e:	1402      	asrs	r2, r0, #16
 8006350:	b201      	sxth	r1, r0
 8006352:	4803      	ldr	r0, [pc, #12]	@ (8006360 <Load_Temp_From_Backup+0x20>)
 8006354:	f013 ff02 	bl	801a15c <iprintf>
}
 8006358:	bd10      	pop	{r4, pc}
 800635a:	46c0      	nop			@ (mov r8, r8)
 800635c:	200009f8 	.word	0x200009f8
 8006360:	0801d1c8 	.word	0x0801d1c8

08006364 <Load_Dose_From_Backup>:
{
 8006364:	b510      	push	{r4, lr}
    cfg->dose_max = HAL_RTCEx_BKUPRead(&hrtc, BKP_DOSE_MAX);
 8006366:	2100      	movs	r1, #0
{
 8006368:	0004      	movs	r4, r0
    cfg->dose_max = HAL_RTCEx_BKUPRead(&hrtc, BKP_DOSE_MAX);
 800636a:	4805      	ldr	r0, [pc, #20]	@ (8006380 <Load_Dose_From_Backup+0x1c>)
 800636c:	f00b feca 	bl	8012104 <HAL_RTCEx_BKUPRead>
 8006370:	0001      	movs	r1, r0
 8006372:	6060      	str	r0, [r4, #4]
    printf("[Backup] Load Dose Max=%u (Raw: 0x%08lX)\n", cfg->dose_max, (unsigned long)cfg->dose_max);
 8006374:	000a      	movs	r2, r1
 8006376:	4803      	ldr	r0, [pc, #12]	@ (8006384 <Load_Dose_From_Backup+0x20>)
 8006378:	f013 fef0 	bl	801a15c <iprintf>
}
 800637c:	bd10      	pop	{r4, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	200009f8 	.word	0x200009f8
 8006384:	0801d1eb 	.word	0x0801d1eb

08006388 <Load_Backup_Index>:
void Load_Backup_Index(void) {
 8006388:	b570      	push	{r4, r5, r6, lr}
    uint32_t reg3 = HAL_RTCEx_BKUPRead(&hrtc, BKP_IDX_REG);
 800638a:	4d29      	ldr	r5, [pc, #164]	@ (8006430 <Load_Backup_Index+0xa8>)
 800638c:	2103      	movs	r1, #3
 800638e:	0028      	movs	r0, r5
 8006390:	f00b feb8 	bl	8012104 <HAL_RTCEx_BKUPRead>
 8006394:	0004      	movs	r4, r0
    uint32_t reg4 = HAL_RTCEx_BKUPRead(&hrtc, BKP_COUNT_REG);
 8006396:	2104      	movs	r1, #4
 8006398:	0028      	movs	r0, r5
 800639a:	f00b feb3 	bl	8012104 <HAL_RTCEx_BKUPRead>
    idx_rad = (uint16_t)(reg3 & 0xFFFF);
 800639e:	4b25      	ldr	r3, [pc, #148]	@ (8006434 <Load_Backup_Index+0xac>)
    rad_interval_count = (uint8_t)(reg4 & 0xFF);
 80063a0:	4d25      	ldr	r5, [pc, #148]	@ (8006438 <Load_Backup_Index+0xb0>)
    idx_rad = (uint16_t)(reg3 & 0xFFFF);
 80063a2:	801c      	strh	r4, [r3, #0]
    idx_temp = (uint16_t)((reg3 >> 16) & 0xFFFF);
 80063a4:	4b25      	ldr	r3, [pc, #148]	@ (800643c <Load_Backup_Index+0xb4>)
 80063a6:	0c22      	lsrs	r2, r4, #16
 80063a8:	801a      	strh	r2, [r3, #0]
    printf("[DEBUG] Load Backup: idx_rad=%u, idx_temp=%u, rad_interval_count=%u\r\n",
 80063aa:	b2a1      	uxth	r1, r4
 80063ac:	b2c3      	uxtb	r3, r0
    rad_interval_count = (uint8_t)(reg4 & 0xFF);
 80063ae:	7028      	strb	r0, [r5, #0]
    printf("[DEBUG] Load Backup: idx_rad=%u, idx_temp=%u, rad_interval_count=%u\r\n",
 80063b0:	4823      	ldr	r0, [pc, #140]	@ (8006440 <Load_Backup_Index+0xb8>)
 80063b2:	f013 fed3 	bl	801a15c <iprintf>
    rad_ratio = current_settings.rad_interval / current_settings.temp_interval;
 80063b6:	4b23      	ldr	r3, [pc, #140]	@ (8006444 <Load_Backup_Index+0xbc>)
 80063b8:	4a23      	ldr	r2, [pc, #140]	@ (8006448 <Load_Backup_Index+0xc0>)
 80063ba:	0019      	movs	r1, r3
 80063bc:	3172      	adds	r1, #114	@ 0x72
 80063be:	7809      	ldrb	r1, [r1, #0]
 80063c0:	7812      	ldrb	r2, [r2, #0]
 80063c2:	0209      	lsls	r1, r1, #8
 80063c4:	4311      	orrs	r1, r2
 80063c6:	001a      	movs	r2, r3
 80063c8:	3273      	adds	r2, #115	@ 0x73
 80063ca:	7812      	ldrb	r2, [r2, #0]
 80063cc:	4c1f      	ldr	r4, [pc, #124]	@ (800644c <Load_Backup_Index+0xc4>)
 80063ce:	0412      	lsls	r2, r2, #16
 80063d0:	430a      	orrs	r2, r1
 80063d2:	0019      	movs	r1, r3
 80063d4:	3174      	adds	r1, #116	@ 0x74
 80063d6:	7808      	ldrb	r0, [r1, #0]
 80063d8:	0019      	movs	r1, r3
 80063da:	0600      	lsls	r0, r0, #24
 80063dc:	4310      	orrs	r0, r2
 80063de:	001a      	movs	r2, r3
 80063e0:	3176      	adds	r1, #118	@ 0x76
 80063e2:	7809      	ldrb	r1, [r1, #0]
 80063e4:	3275      	adds	r2, #117	@ 0x75
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	0209      	lsls	r1, r1, #8
 80063ea:	4311      	orrs	r1, r2
 80063ec:	001a      	movs	r2, r3
 80063ee:	3277      	adds	r2, #119	@ 0x77
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	3378      	adds	r3, #120	@ 0x78
 80063f4:	0412      	lsls	r2, r2, #16
 80063f6:	430a      	orrs	r2, r1
 80063f8:	7819      	ldrb	r1, [r3, #0]
 80063fa:	0609      	lsls	r1, r1, #24
 80063fc:	4311      	orrs	r1, r2
 80063fe:	f7f9 feb3 	bl	8000168 <__udivsi3>
 8006402:	2201      	movs	r2, #1
 8006404:	b281      	uxth	r1, r0
 8006406:	1c13      	adds	r3, r2, #0
 8006408:	428a      	cmp	r2, r1
 800640a:	d200      	bcs.n	800640e <Load_Backup_Index+0x86>
 800640c:	1c03      	adds	r3, r0, #0
    if (rad_interval_count == 0) {
 800640e:	7829      	ldrb	r1, [r5, #0]
    rad_ratio = current_settings.rad_interval / current_settings.temp_interval;
 8006410:	8023      	strh	r3, [r4, #0]
    if (rad_interval_count == 0) {
 8006412:	4b0f      	ldr	r3, [pc, #60]	@ (8006450 <Load_Backup_Index+0xc8>)
 8006414:	2900      	cmp	r1, #0
 8006416:	d105      	bne.n	8006424 <Load_Backup_Index+0x9c>
        measure_Rad_flag = 1;                   // 이번 Interval에서 Rad 측정
 8006418:	2201      	movs	r2, #1
        printf("[DEBUG] Rad + Temp Measurement scheduled\r\n");
 800641a:	480e      	ldr	r0, [pc, #56]	@ (8006454 <Load_Backup_Index+0xcc>)
        measure_Rad_flag = 1;                   // 이번 Interval에서 Rad 측정
 800641c:	701a      	strb	r2, [r3, #0]
        printf("[DEBUG] Rad + Temp Measurement scheduled\r\n");
 800641e:	f013 ff0d 	bl	801a23c <puts>
}
 8006422:	bd70      	pop	{r4, r5, r6, pc}
        measure_Rad_flag = 0;                   // Rad 측정 없음
 8006424:	2200      	movs	r2, #0
        printf("[DEBUG] Temp Only (rad_count=%u)\r\n", rad_interval_count);
 8006426:	480c      	ldr	r0, [pc, #48]	@ (8006458 <Load_Backup_Index+0xd0>)
        measure_Rad_flag = 0;                   // Rad 측정 없음
 8006428:	701a      	strb	r2, [r3, #0]
        printf("[DEBUG] Temp Only (rad_count=%u)\r\n", rad_interval_count);
 800642a:	f013 fe97 	bl	801a15c <iprintf>
}
 800642e:	e7f8      	b.n	8006422 <Load_Backup_Index+0x9a>
 8006430:	200009f8 	.word	0x200009f8
 8006434:	20000500 	.word	0x20000500
 8006438:	200004fd 	.word	0x200004fd
 800643c:	200004fe 	.word	0x200004fe
 8006440:	0801d215 	.word	0x0801d215
 8006444:	20002bac 	.word	0x20002bac
 8006448:	20002c1d 	.word	0x20002c1d
 800644c:	2000000a 	.word	0x2000000a
 8006450:	20000502 	.word	0x20000502
 8006454:	0801d25b 	.word	0x0801d25b
 8006458:	0801d285 	.word	0x0801d285

0800645c <Load_MarkAndAlarmState_From_Backup>:
{
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800645e:	2106      	movs	r1, #6
{
 8006460:	0004      	movs	r4, r0
 8006462:	b089      	sub	sp, #36	@ 0x24
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006464:	4834      	ldr	r0, [pc, #208]	@ (8006538 <Load_MarkAndAlarmState_From_Backup+0xdc>)
 8006466:	f00b fe4d 	bl	8012104 <HAL_RTCEx_BKUPRead>
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800646a:	b2c3      	uxtb	r3, r0
 800646c:	9307      	str	r3, [sp, #28]
 800646e:	23c0      	movs	r3, #192	@ 0xc0
    cfg->alarm_state = (uint32_t)(val >> 8);  // 16비트 전부 사용
 8006470:	0a01      	lsrs	r1, r0, #8
    cfg->mark = (uint8_t)(val & 0xFF);
 8006472:	7520      	strb	r0, [r4, #20]
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006474:	2080      	movs	r0, #128	@ 0x80
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4a30      	ldr	r2, [pc, #192]	@ (800653c <Load_MarkAndAlarmState_From_Backup+0xe0>)
    cfg->alarm_state = (uint32_t)(val >> 8);  // 16비트 전부 사용
 800647a:	61a1      	str	r1, [r4, #24]
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800647c:	400b      	ands	r3, r1
 800647e:	0080      	lsls	r0, r0, #2
 8006480:	4283      	cmp	r3, r0
 8006482:	d005      	beq.n	8006490 <Load_MarkAndAlarmState_From_Backup+0x34>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON      ? "ON"  : "OFF",
 8006484:	3801      	subs	r0, #1
 8006486:	38ff      	subs	r0, #255	@ 0xff
 8006488:	4a2d      	ldr	r2, [pc, #180]	@ (8006540 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 800648a:	4283      	cmp	r3, r0
 800648c:	d100      	bne.n	8006490 <Load_MarkAndAlarmState_From_Backup+0x34>
 800648e:	4a2d      	ldr	r2, [pc, #180]	@ (8006544 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006490:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006492:	2480      	movs	r4, #128	@ 0x80
 8006494:	0100      	lsls	r0, r0, #4
 8006496:	4b29      	ldr	r3, [pc, #164]	@ (800653c <Load_MarkAndAlarmState_From_Backup+0xe0>)
 8006498:	4008      	ands	r0, r1
 800649a:	0124      	lsls	r4, r4, #4
 800649c:	42a0      	cmp	r0, r4
 800649e:	d005      	beq.n	80064ac <Load_MarkAndAlarmState_From_Backup+0x50>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_RH2) == ALARM_ON      ? "ON"  : "OFF",
 80064a0:	2480      	movs	r4, #128	@ 0x80
 80064a2:	4b27      	ldr	r3, [pc, #156]	@ (8006540 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80064a4:	00e4      	lsls	r4, r4, #3
 80064a6:	42a0      	cmp	r0, r4
 80064a8:	d100      	bne.n	80064ac <Load_MarkAndAlarmState_From_Backup+0x50>
 80064aa:	4b26      	ldr	r3, [pc, #152]	@ (8006544 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 80064ac:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80064ae:	2580      	movs	r5, #128	@ 0x80
 80064b0:	0180      	lsls	r0, r0, #6
 80064b2:	4c22      	ldr	r4, [pc, #136]	@ (800653c <Load_MarkAndAlarmState_From_Backup+0xe0>)
 80064b4:	4008      	ands	r0, r1
 80064b6:	01ad      	lsls	r5, r5, #6
 80064b8:	42a8      	cmp	r0, r5
 80064ba:	d005      	beq.n	80064c8 <Load_MarkAndAlarmState_From_Backup+0x6c>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TH1) == ALARM_ON      ? "ON"  : "OFF",
 80064bc:	2580      	movs	r5, #128	@ 0x80
 80064be:	4c20      	ldr	r4, [pc, #128]	@ (8006540 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80064c0:	016d      	lsls	r5, r5, #5
 80064c2:	42a8      	cmp	r0, r5
 80064c4:	d100      	bne.n	80064c8 <Load_MarkAndAlarmState_From_Backup+0x6c>
 80064c6:	4c1f      	ldr	r4, [pc, #124]	@ (8006544 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 80064c8:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80064ca:	2680      	movs	r6, #128	@ 0x80
 80064cc:	0200      	lsls	r0, r0, #8
 80064ce:	4d1b      	ldr	r5, [pc, #108]	@ (800653c <Load_MarkAndAlarmState_From_Backup+0xe0>)
 80064d0:	4008      	ands	r0, r1
 80064d2:	0236      	lsls	r6, r6, #8
 80064d4:	42b0      	cmp	r0, r6
 80064d6:	d005      	beq.n	80064e4 <Load_MarkAndAlarmState_From_Backup+0x88>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TH2) == ALARM_ON      ? "ON"  : "OFF",
 80064d8:	2680      	movs	r6, #128	@ 0x80
 80064da:	4d19      	ldr	r5, [pc, #100]	@ (8006540 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80064dc:	01f6      	lsls	r6, r6, #7
 80064de:	42b0      	cmp	r0, r6
 80064e0:	d100      	bne.n	80064e4 <Load_MarkAndAlarmState_From_Backup+0x88>
 80064e2:	4d18      	ldr	r5, [pc, #96]	@ (8006544 <Load_MarkAndAlarmState_From_Backup+0xe8>)
 80064e4:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80064e6:	2780      	movs	r7, #128	@ 0x80
 80064e8:	0280      	lsls	r0, r0, #10
 80064ea:	4e14      	ldr	r6, [pc, #80]	@ (800653c <Load_MarkAndAlarmState_From_Backup+0xe0>)
 80064ec:	4008      	ands	r0, r1
 80064ee:	02bf      	lsls	r7, r7, #10
 80064f0:	42b8      	cmp	r0, r7
 80064f2:	d005      	beq.n	8006500 <Load_MarkAndAlarmState_From_Backup+0xa4>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TL1) == ALARM_ON      ? "ON"  : "OFF",
 80064f4:	2780      	movs	r7, #128	@ 0x80
 80064f6:	4e12      	ldr	r6, [pc, #72]	@ (8006540 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80064f8:	027f      	lsls	r7, r7, #9
 80064fa:	42b8      	cmp	r0, r7
 80064fc:	d100      	bne.n	8006500 <Load_MarkAndAlarmState_From_Backup+0xa4>
 80064fe:	4e11      	ldr	r6, [pc, #68]	@ (8006544 <Load_MarkAndAlarmState_From_Backup+0xe8>)
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006500:	2780      	movs	r7, #128	@ 0x80
 8006502:	20c0      	movs	r0, #192	@ 0xc0
 8006504:	033f      	lsls	r7, r7, #12
 8006506:	46bc      	mov	ip, r7
 8006508:	0300      	lsls	r0, r0, #12
 800650a:	4f0c      	ldr	r7, [pc, #48]	@ (800653c <Load_MarkAndAlarmState_From_Backup+0xe0>)
 800650c:	4008      	ands	r0, r1
 800650e:	4560      	cmp	r0, ip
 8006510:	d006      	beq.n	8006520 <Load_MarkAndAlarmState_From_Backup+0xc4>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TL2) == ALARM_ON      ? "ON"  : "OFF",
 8006512:	2780      	movs	r7, #128	@ 0x80
 8006514:	02ff      	lsls	r7, r7, #11
 8006516:	46bc      	mov	ip, r7
 8006518:	4f09      	ldr	r7, [pc, #36]	@ (8006540 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 800651a:	4560      	cmp	r0, ip
 800651c:	d100      	bne.n	8006520 <Load_MarkAndAlarmState_From_Backup+0xc4>
 800651e:	4f09      	ldr	r7, [pc, #36]	@ (8006544 <Load_MarkAndAlarmState_From_Backup+0xe8>)
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006520:	9104      	str	r1, [sp, #16]
 8006522:	9703      	str	r7, [sp, #12]
 8006524:	9907      	ldr	r1, [sp, #28]
 8006526:	9602      	str	r6, [sp, #8]
 8006528:	9501      	str	r5, [sp, #4]
 800652a:	9400      	str	r4, [sp, #0]
 800652c:	4806      	ldr	r0, [pc, #24]	@ (8006548 <Load_MarkAndAlarmState_From_Backup+0xec>)
 800652e:	f013 fe15 	bl	801a15c <iprintf>
}
 8006532:	b009      	add	sp, #36	@ 0x24
 8006534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006536:	46c0      	nop			@ (mov r8, r8)
 8006538:	200009f8 	.word	0x200009f8
 800653c:	0801d2ac 	.word	0x0801d2ac
 8006540:	0801d2a8 	.word	0x0801d2a8
 8006544:	0801d2b0 	.word	0x0801d2b0
 8006548:	0801d2b3 	.word	0x0801d2b3

0800654c <Load_IntervalInfo_From_Backup>:
{
 800654c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800654e:	0004      	movs	r4, r0
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_INTERVAL_INFO);
 8006550:	2108      	movs	r1, #8
 8006552:	480f      	ldr	r0, [pc, #60]	@ (8006590 <Load_IntervalInfo_From_Backup+0x44>)
 8006554:	f00b fdd6 	bl	8012104 <HAL_RTCEx_BKUPRead>
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 8006558:	490e      	ldr	r1, [pc, #56]	@ (8006594 <Load_IntervalInfo_From_Backup+0x48>)
    cfg->interval_time = (uint16_t)(val & 0xFFFF);
 800655a:	61e0      	str	r0, [r4, #28]
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 800655c:	4c0e      	ldr	r4, [pc, #56]	@ (8006598 <Load_IntervalInfo_From_Backup+0x4c>)
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_INTERVAL_INFO);
 800655e:	0005      	movs	r5, r0
    cfg->display_dose = (uint8_t)((val >> 24) & 0xFF);
 8006560:	0e03      	lsrs	r3, r0, #24
    cfg->display_temp = (uint8_t)((val >> 16) & 0xFF);
 8006562:	0c02      	lsrs	r2, r0, #16
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 8006564:	7808      	ldrb	r0, [r1, #0]
 8006566:	0021      	movs	r1, r4
 8006568:	3176      	adds	r1, #118	@ 0x76
 800656a:	7809      	ldrb	r1, [r1, #0]
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	0209      	lsls	r1, r1, #8
 8006570:	4301      	orrs	r1, r0
 8006572:	0020      	movs	r0, r4
 8006574:	3077      	adds	r0, #119	@ 0x77
 8006576:	7800      	ldrb	r0, [r0, #0]
 8006578:	3478      	adds	r4, #120	@ 0x78
 800657a:	0400      	lsls	r0, r0, #16
 800657c:	4308      	orrs	r0, r1
 800657e:	7821      	ldrb	r1, [r4, #0]
 8006580:	9500      	str	r5, [sp, #0]
 8006582:	0609      	lsls	r1, r1, #24
 8006584:	4301      	orrs	r1, r0
 8006586:	4805      	ldr	r0, [pc, #20]	@ (800659c <Load_IntervalInfo_From_Backup+0x50>)
 8006588:	f013 fde8 	bl	801a15c <iprintf>
}
 800658c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800658e:	46c0      	nop			@ (mov r8, r8)
 8006590:	200009f8 	.word	0x200009f8
 8006594:	20002c21 	.word	0x20002c21
 8006598:	20002bac 	.word	0x20002bac
 800659c:	0801d303 	.word	0x0801d303

080065a0 <Load_Pre_RAD_Value_From_Backup>:
{
 80065a0:	b510      	push	{r4, lr}
    uint32_t value = HAL_RTCEx_BKUPRead(&hrtc, BKP_PRE_RAD_VALUE);
 80065a2:	2105      	movs	r1, #5
 80065a4:	4805      	ldr	r0, [pc, #20]	@ (80065bc <Load_Pre_RAD_Value_From_Backup+0x1c>)
 80065a6:	f00b fdad 	bl	8012104 <HAL_RTCEx_BKUPRead>
 80065aa:	0004      	movs	r4, r0
    printf("[Backup] Load Pre_RAD_Value = %lu (Raw: 0x%08lX)\r\n", value, value);
 80065ac:	4804      	ldr	r0, [pc, #16]	@ (80065c0 <Load_Pre_RAD_Value_From_Backup+0x20>)
 80065ae:	0022      	movs	r2, r4
 80065b0:	0021      	movs	r1, r4
 80065b2:	f013 fdd3 	bl	801a15c <iprintf>
}
 80065b6:	0020      	movs	r0, r4
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	200009f8 	.word	0x200009f8
 80065c0:	0801d358 	.word	0x0801d358

080065c4 <Load_All_Config_From_BackupRegister>:
{
 80065c4:	b510      	push	{r4, lr}
 80065c6:	0004      	movs	r4, r0
    Load_Temp_From_Backup(cfg);
 80065c8:	f7ff feba 	bl	8006340 <Load_Temp_From_Backup>
    Load_Dose_From_Backup(cfg);
 80065cc:	0020      	movs	r0, r4
 80065ce:	f7ff fec9 	bl	8006364 <Load_Dose_From_Backup>
    Load_Backup_Index();
 80065d2:	f7ff fed9 	bl	8006388 <Load_Backup_Index>
    Load_MarkAndAlarmState_From_Backup(cfg);
 80065d6:	0020      	movs	r0, r4
 80065d8:	f7ff ff40 	bl	800645c <Load_MarkAndAlarmState_From_Backup>
    Load_IntervalInfo_From_Backup(cfg);
 80065dc:	0020      	movs	r0, r4
 80065de:	f7ff ffb5 	bl	800654c <Load_IntervalInfo_From_Backup>
    Index_num = Load_IndexNum_From_Backup();
 80065e2:	f7ff fea3 	bl	800632c <Load_IndexNum_From_Backup>
 80065e6:	4b01      	ldr	r3, [pc, #4]	@ (80065ec <Load_All_Config_From_BackupRegister+0x28>)
 80065e8:	8018      	strh	r0, [r3, #0]
}
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	2000004c 	.word	0x2000004c

080065f0 <Update_TempDose_MinMax>:
{
 80065f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f2:	000e      	movs	r6, r1
    int16_t new_temp = (int16_t)(temp_avg * 10);
 80065f4:	492f      	ldr	r1, [pc, #188]	@ (80066b4 <Update_TempDose_MinMax+0xc4>)
{
 80065f6:	0014      	movs	r4, r2
 80065f8:	9001      	str	r0, [sp, #4]
    int16_t new_temp = (int16_t)(temp_avg * 10);
 80065fa:	f7fa fca3 	bl	8000f44 <__aeabi_fmul>
 80065fe:	f7fb f875 	bl	80016ec <__aeabi_f2iz>
    printf("[Backup][Prev] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 8006602:	2302      	movs	r3, #2
 8006604:	5ee2      	ldrsh	r2, [r4, r3]
 8006606:	2300      	movs	r3, #0
 8006608:	5ee1      	ldrsh	r1, [r4, r3]
    int16_t new_temp = (int16_t)(temp_avg * 10);
 800660a:	b205      	sxth	r5, r0
    printf("[Backup][Prev] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	482a      	ldr	r0, [pc, #168]	@ (80066b8 <Update_TempDose_MinMax+0xc8>)
 8006610:	f013 fda4 	bl	801a15c <iprintf>
    printf("[Backup][New Input] Temp:%d Dose:%u\n", new_temp, new_dose);
 8006614:	0029      	movs	r1, r5
 8006616:	0032      	movs	r2, r6
 8006618:	4828      	ldr	r0, [pc, #160]	@ (80066bc <Update_TempDose_MinMax+0xcc>)
 800661a:	f013 fd9f 	bl	801a15c <iprintf>
    if (cfg->temp_max == INT16_MIN || cfg->temp_min == INT16_MAX || cfg->dose_max == 0xFFFFFFFF) {
 800661e:	2300      	movs	r3, #0
 8006620:	5ee1      	ldrsh	r1, [r4, r3]
 8006622:	4b27      	ldr	r3, [pc, #156]	@ (80066c0 <Update_TempDose_MinMax+0xd0>)
 8006624:	4299      	cmp	r1, r3
 8006626:	d007      	beq.n	8006638 <Update_TempDose_MinMax+0x48>
 8006628:	4b26      	ldr	r3, [pc, #152]	@ (80066c4 <Update_TempDose_MinMax+0xd4>)
 800662a:	2002      	movs	r0, #2
 800662c:	5e22      	ldrsh	r2, [r4, r0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d002      	beq.n	8006638 <Update_TempDose_MinMax+0x48>
 8006632:	6863      	ldr	r3, [r4, #4]
 8006634:	3301      	adds	r3, #1
 8006636:	d103      	bne.n	8006640 <Update_TempDose_MinMax+0x50>
        cfg->temp_max = new_temp;
 8006638:	8025      	strh	r5, [r4, #0]
        cfg->temp_min = new_temp;
 800663a:	8065      	strh	r5, [r4, #2]
            cfg->dose_max = new_dose;
 800663c:	6066      	str	r6, [r4, #4]
    if (update) {
 800663e:	e017      	b.n	8006670 <Update_TempDose_MinMax+0x80>
    bool update = false;
 8006640:	2700      	movs	r7, #0
        if (new_temp >= cfg->temp_max) {
 8006642:	42a9      	cmp	r1, r5
 8006644:	dc05      	bgt.n	8006652 <Update_TempDose_MinMax+0x62>
            printf("  [Update] temp_max: %d -> %d\n", cfg->temp_max, new_temp);
 8006646:	002a      	movs	r2, r5
 8006648:	481f      	ldr	r0, [pc, #124]	@ (80066c8 <Update_TempDose_MinMax+0xd8>)
 800664a:	f013 fd87 	bl	801a15c <iprintf>
            update = true;
 800664e:	3701      	adds	r7, #1
            cfg->temp_max = new_temp;
 8006650:	8025      	strh	r5, [r4, #0]
        if (new_temp < cfg->temp_min) {
 8006652:	2302      	movs	r3, #2
 8006654:	5ee1      	ldrsh	r1, [r4, r3]
 8006656:	42a9      	cmp	r1, r5
 8006658:	dd19      	ble.n	800668e <Update_TempDose_MinMax+0x9e>
            printf("  [Update] temp_min: %d -> %d\n", cfg->temp_min, new_temp);
 800665a:	002a      	movs	r2, r5
 800665c:	481b      	ldr	r0, [pc, #108]	@ (80066cc <Update_TempDose_MinMax+0xdc>)
 800665e:	f013 fd7d 	bl	801a15c <iprintf>
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006662:	491b      	ldr	r1, [pc, #108]	@ (80066d0 <Update_TempDose_MinMax+0xe0>)
 8006664:	9801      	ldr	r0, [sp, #4]
            cfg->temp_min = new_temp;
 8006666:	8065      	strh	r5, [r4, #2]
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006668:	f7f9 ff4e 	bl	8000508 <__aeabi_fcmple>
 800666c:	2800      	cmp	r0, #0
 800666e:	d117      	bne.n	80066a0 <Update_TempDose_MinMax+0xb0>
        Save_Temp_To_Backup(cfg);
 8006670:	0020      	movs	r0, r4
 8006672:	f7ff fd7b 	bl	800616c <Save_Temp_To_Backup>
        Save_Dose_To_Backup(cfg);
 8006676:	0020      	movs	r0, r4
 8006678:	f7ff fd66 	bl	8006148 <Save_Dose_To_Backup>
        printf("[Backup][Updated] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 800667c:	2302      	movs	r3, #2
 800667e:	5ee2      	ldrsh	r2, [r4, r3]
 8006680:	2300      	movs	r3, #0
 8006682:	5ee1      	ldrsh	r1, [r4, r3]
 8006684:	4813      	ldr	r0, [pc, #76]	@ (80066d4 <Update_TempDose_MinMax+0xe4>)
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	f013 fd68 	bl	801a15c <iprintf>
}
 800668c:	e007      	b.n	800669e <Update_TempDose_MinMax+0xae>
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 800668e:	4910      	ldr	r1, [pc, #64]	@ (80066d0 <Update_TempDose_MinMax+0xe0>)
 8006690:	9801      	ldr	r0, [sp, #4]
 8006692:	f7f9 ff39 	bl	8000508 <__aeabi_fcmple>
 8006696:	2800      	cmp	r0, #0
 8006698:	d103      	bne.n	80066a2 <Update_TempDose_MinMax+0xb2>
    if (update) {
 800669a:	2f00      	cmp	r7, #0
 800669c:	d1e8      	bne.n	8006670 <Update_TempDose_MinMax+0x80>
}
 800669e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            update = true;
 80066a0:	2701      	movs	r7, #1
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 80066a2:	6861      	ldr	r1, [r4, #4]
 80066a4:	42b1      	cmp	r1, r6
 80066a6:	d2f8      	bcs.n	800669a <Update_TempDose_MinMax+0xaa>
            printf("  [Update] dose_max: %u -> %u\n", cfg->dose_max, new_dose);
 80066a8:	0032      	movs	r2, r6
 80066aa:	480b      	ldr	r0, [pc, #44]	@ (80066d8 <Update_TempDose_MinMax+0xe8>)
 80066ac:	f013 fd56 	bl	801a15c <iprintf>
 80066b0:	e7c4      	b.n	800663c <Update_TempDose_MinMax+0x4c>
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	41200000 	.word	0x41200000
 80066b8:	0801d38b 	.word	0x0801d38b
 80066bc:	0801d3b3 	.word	0x0801d3b3
 80066c0:	ffff8000 	.word	0xffff8000
 80066c4:	00007fff 	.word	0x00007fff
 80066c8:	0801d3d8 	.word	0x0801d3d8
 80066cc:	0801d3f7 	.word	0x0801d3f7
 80066d0:	42480000 	.word	0x42480000
 80066d4:	0801d435 	.word	0x0801d435
 80066d8:	0801d416 	.word	0x0801d416

080066dc <Set_Wakeup_After_Delay>:
{
 80066dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 80066de:	240a      	movs	r4, #10
 80066e0:	230f      	movs	r3, #15
{
 80066e2:	0005      	movs	r5, r0
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 80066e4:	78d0      	ldrb	r0, [r2, #3]
{
 80066e6:	b08b      	sub	sp, #44	@ 0x2c
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 80066e8:	0906      	lsrs	r6, r0, #4
 80066ea:	4366      	muls	r6, r4
 80066ec:	4018      	ands	r0, r3
 80066ee:	1980      	adds	r0, r0, r6
 80066f0:	9006      	str	r0, [sp, #24]
    uint8_t  mon   = (uint8_t) BCD2BIN(sDate_bcd->Month);
 80066f2:	7856      	ldrb	r6, [r2, #1]
 80066f4:	0930      	lsrs	r0, r6, #4
 80066f6:	4360      	muls	r0, r4
 80066f8:	401e      	ands	r6, r3
 80066fa:	1980      	adds	r0, r0, r6
 80066fc:	b2c0      	uxtb	r0, r0
 80066fe:	9007      	str	r0, [sp, #28]
    uint8_t  day   = (uint8_t) BCD2BIN(sDate_bcd->Date);
 8006700:	7890      	ldrb	r0, [r2, #2]
 8006702:	0902      	lsrs	r2, r0, #4
 8006704:	4362      	muls	r2, r4
 8006706:	4018      	ands	r0, r3
 8006708:	1812      	adds	r2, r2, r0
    uint8_t  hh    = (uint8_t) BCD2BIN(sTime_bcd->Hours);
 800670a:	7808      	ldrb	r0, [r1, #0]
    uint8_t  day   = (uint8_t) BCD2BIN(sDate_bcd->Date);
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	9208      	str	r2, [sp, #32]
    uint8_t  hh    = (uint8_t) BCD2BIN(sTime_bcd->Hours);
 8006710:	0902      	lsrs	r2, r0, #4
 8006712:	4362      	muls	r2, r4
 8006714:	4018      	ands	r0, r3
 8006716:	1812      	adds	r2, r2, r0
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	9209      	str	r2, [sp, #36]	@ 0x24
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 800671c:	784a      	ldrb	r2, [r1, #1]
    uint32_t now_epoch = ymd_to_epoch(y2000, mon, day, hh, mm, ss);
 800671e:	9806      	ldr	r0, [sp, #24]
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 8006720:	0916      	lsrs	r6, r2, #4
 8006722:	4366      	muls	r6, r4
 8006724:	401a      	ands	r2, r3
 8006726:	18b6      	adds	r6, r6, r2
    uint8_t  ss    = (uint8_t) BCD2BIN(sTime_bcd->Seconds);
 8006728:	788a      	ldrb	r2, [r1, #2]
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 800672a:	b2f6      	uxtb	r6, r6
    uint8_t  ss    = (uint8_t) BCD2BIN(sTime_bcd->Seconds);
 800672c:	0911      	lsrs	r1, r2, #4
 800672e:	434c      	muls	r4, r1
 8006730:	401a      	ands	r2, r3
 8006732:	18a4      	adds	r4, r4, r2
 8006734:	b2e4      	uxtb	r4, r4
    uint32_t now_epoch = ymd_to_epoch(y2000, mon, day, hh, mm, ss);
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	9a08      	ldr	r2, [sp, #32]
 800673a:	9907      	ldr	r1, [sp, #28]
 800673c:	9401      	str	r4, [sp, #4]
 800673e:	9600      	str	r6, [sp, #0]
 8006740:	f003 f8c2 	bl	80098c8 <ymd_to_epoch>
    if (delay_sec > max_delay) delay_sec = max_delay;
 8006744:	4b11      	ldr	r3, [pc, #68]	@ (800678c <Set_Wakeup_After_Delay+0xb0>)
 8006746:	429d      	cmp	r5, r3
 8006748:	d91b      	bls.n	8006782 <Set_Wakeup_After_Delay+0xa6>
 800674a:	001d      	movs	r5, r3
    uint32_t target_epoch = now_epoch + delay_sec;
 800674c:	182f      	adds	r7, r5, r0
    Save_WakeupTime_To_Backup(target_epoch);
 800674e:	0038      	movs	r0, r7
 8006750:	f7ff fdac 	bl	80062ac <Save_WakeupTime_To_Backup>
    RTC_Disable_All_Wakeup();
 8006754:	f7fe ffc2 	bl	80056dc <RTC_Disable_All_Wakeup>
    RTC_SetAlarmA_SecondsFromNow(delay_sec);
 8006758:	0028      	movs	r0, r5
 800675a:	f7fe ffe9 	bl	8005730 <RTC_SetAlarmA_SecondsFromNow>
    printf("[Delay] now=%04u-%02u-%02u %02u:%02u:%02u, after=%lu s → target(epoch)=%lu\r\n",
 800675e:	23fa      	movs	r3, #250	@ 0xfa
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	469c      	mov	ip, r3
 8006764:	9906      	ldr	r1, [sp, #24]
 8006766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006768:	9a07      	ldr	r2, [sp, #28]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4461      	add	r1, ip
 800676e:	9b08      	ldr	r3, [sp, #32]
 8006770:	9704      	str	r7, [sp, #16]
 8006772:	9503      	str	r5, [sp, #12]
 8006774:	9402      	str	r4, [sp, #8]
 8006776:	9601      	str	r6, [sp, #4]
 8006778:	4805      	ldr	r0, [pc, #20]	@ (8006790 <Set_Wakeup_After_Delay+0xb4>)
 800677a:	f013 fcef 	bl	801a15c <iprintf>
}
 800677e:	b00b      	add	sp, #44	@ 0x2c
 8006780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006782:	2d00      	cmp	r5, #0
 8006784:	d1e2      	bne.n	800674c <Set_Wakeup_After_Delay+0x70>
 8006786:	3501      	adds	r5, #1
 8006788:	e7e0      	b.n	800674c <Set_Wakeup_After_Delay+0x70>
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	0028de80 	.word	0x0028de80
 8006790:	0801d460 	.word	0x0801d460

08006794 <Write_buffer>:
void Write_buffer(void){
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8006796:	4c4f      	ldr	r4, [pc, #316]	@ (80068d4 <Write_buffer+0x140>)
void Write_buffer(void){
 8006798:	b08f      	sub	sp, #60	@ 0x3c
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800679a:	2201      	movs	r2, #1
 800679c:	0020      	movs	r0, r4
 800679e:	a903      	add	r1, sp, #12
 80067a0:	f00b fbea 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80067a4:	2201      	movs	r2, #1
 80067a6:	0020      	movs	r0, r4
 80067a8:	a902      	add	r1, sp, #8
 80067aa:	f00b fc17 	bl	8011fdc <HAL_RTC_GetDate>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK); // Mark 값 넣기
 80067ae:	2106      	movs	r1, #6
 80067b0:	0020      	movs	r0, r4
 80067b2:	f00b fca7 	bl	8012104 <HAL_RTCEx_BKUPRead>
    device_config.mark = (uint8_t)(val & 0xFF);
 80067b6:	4b48      	ldr	r3, [pc, #288]	@ (80068d8 <Write_buffer+0x144>)
    if (Display_temperature > 50.0f) {
 80067b8:	4948      	ldr	r1, [pc, #288]	@ (80068dc <Write_buffer+0x148>)
    device_config.mark = (uint8_t)(val & 0xFF);
 80067ba:	7518      	strb	r0, [r3, #20]
    uint8_t rad_mark = measure_Rad_flag;
 80067bc:	4b48      	ldr	r3, [pc, #288]	@ (80068e0 <Write_buffer+0x14c>)
 80067be:	781d      	ldrb	r5, [r3, #0]
    if (Display_temperature > 50.0f) {
 80067c0:	4b48      	ldr	r3, [pc, #288]	@ (80068e4 <Write_buffer+0x150>)
    uint8_t rad_mark = measure_Rad_flag;
 80067c2:	b2ed      	uxtb	r5, r5
    if (Display_temperature > 50.0f) {
 80067c4:	681e      	ldr	r6, [r3, #0]
 80067c6:	1c30      	adds	r0, r6, #0
 80067c8:	f7f9 fea8 	bl	800051c <__aeabi_fcmpgt>
 80067cc:	4c46      	ldr	r4, [pc, #280]	@ (80068e8 <Write_buffer+0x154>)
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d100      	bne.n	80067d4 <Write_buffer+0x40>
 80067d2:	e078      	b.n	80068c6 <Write_buffer+0x132>
        printf("[RadMark] 온도 %.2f℃ > 50 → rad_measure_mark = 0 (무효 처리)\r\n", Display_temperature);
 80067d4:	1c30      	adds	r0, r6, #0
 80067d6:	f7fc ffdf 	bl	8003798 <__aeabi_f2d>
 80067da:	0002      	movs	r2, r0
 80067dc:	000b      	movs	r3, r1
 80067de:	4843      	ldr	r0, [pc, #268]	@ (80068ec <Write_buffer+0x158>)
 80067e0:	f013 fcbc 	bl	801a15c <iprintf>
    	dose_log = Load_Pre_RAD_Value_From_Backup();
 80067e4:	f7ff fedc 	bl	80065a0 <Load_Pre_RAD_Value_From_Backup>
 80067e8:	2500      	movs	r5, #0
 80067ea:	6020      	str	r0, [r4, #0]
    log_entry_t entry = {
 80067ec:	4f40      	ldr	r7, [pc, #256]	@ (80068f0 <Write_buffer+0x15c>)
 80067ee:	ac08      	add	r4, sp, #32
 80067f0:	883b      	ldrh	r3, [r7, #0]
        .year              = BCD2BIN(sDate.Year),
 80067f2:	220f      	movs	r2, #15
    log_entry_t entry = {
 80067f4:	8023      	strh	r3, [r4, #0]
        .year              = BCD2BIN(sDate.Year),
 80067f6:	ab02      	add	r3, sp, #8
 80067f8:	78d8      	ldrb	r0, [r3, #3]
 80067fa:	230a      	movs	r3, #10
 80067fc:	0901      	lsrs	r1, r0, #4
 80067fe:	4359      	muls	r1, r3
 8006800:	4010      	ands	r0, r2
 8006802:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 8006804:	70a1      	strb	r1, [r4, #2]
        .month             = BCD2BIN(sDate.Month),
 8006806:	a902      	add	r1, sp, #8
 8006808:	7848      	ldrb	r0, [r1, #1]
        .hour              = BCD2BIN(sTime.Hours),
 800680a:	ae03      	add	r6, sp, #12
        .month             = BCD2BIN(sDate.Month),
 800680c:	0901      	lsrs	r1, r0, #4
 800680e:	4359      	muls	r1, r3
 8006810:	4010      	ands	r0, r2
 8006812:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 8006814:	70e1      	strb	r1, [r4, #3]
        .day               = BCD2BIN(sDate.Date),
 8006816:	a902      	add	r1, sp, #8
 8006818:	7888      	ldrb	r0, [r1, #2]
 800681a:	0901      	lsrs	r1, r0, #4
 800681c:	4359      	muls	r1, r3
 800681e:	4010      	ands	r0, r2
 8006820:	1809      	adds	r1, r1, r0
        .hour              = BCD2BIN(sTime.Hours),
 8006822:	7830      	ldrb	r0, [r6, #0]
    log_entry_t entry = {
 8006824:	7121      	strb	r1, [r4, #4]
        .hour              = BCD2BIN(sTime.Hours),
 8006826:	0901      	lsrs	r1, r0, #4
 8006828:	4359      	muls	r1, r3
 800682a:	4010      	ands	r0, r2
 800682c:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 800682e:	7161      	strb	r1, [r4, #5]
        .minute            = BCD2BIN(sTime.Minutes),
 8006830:	7870      	ldrb	r0, [r6, #1]
 8006832:	0901      	lsrs	r1, r0, #4
 8006834:	4359      	muls	r1, r3
 8006836:	4010      	ands	r0, r2
 8006838:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 800683a:	71a1      	strb	r1, [r4, #6]
        .second            = BCD2BIN(sTime.Seconds),
 800683c:	78b1      	ldrb	r1, [r6, #2]
 800683e:	0908      	lsrs	r0, r1, #4
 8006840:	4343      	muls	r3, r0
 8006842:	4011      	ands	r1, r2
 8006844:	185b      	adds	r3, r3, r1
    log_entry_t entry = {
 8006846:	71e3      	strb	r3, [r4, #7]
 8006848:	4b2a      	ldr	r3, [pc, #168]	@ (80068f4 <Write_buffer+0x160>)
        .temperature       = Display_temperature * 10,   // 예: 39.5℃ → 395
 800684a:	492b      	ldr	r1, [pc, #172]	@ (80068f8 <Write_buffer+0x164>)
    log_entry_t entry = {
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	8123      	strh	r3, [r4, #8]
        .temperature       = Display_temperature * 10,   // 예: 39.5℃ → 395
 8006850:	4b24      	ldr	r3, [pc, #144]	@ (80068e4 <Write_buffer+0x150>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	f7fa fb76 	bl	8000f44 <__aeabi_fmul>
    log_entry_t entry = {
 8006858:	f7fa ff48 	bl	80016ec <__aeabi_f2iz>
 800685c:	4b22      	ldr	r3, [pc, #136]	@ (80068e8 <Write_buffer+0x154>)
 800685e:	8160      	strh	r0, [r4, #10]
 8006860:	681b      	ldr	r3, [r3, #0]
    meas_data_log_write_entry(&entry);
 8006862:	0020      	movs	r0, r4
    log_entry_t entry = {
 8006864:	930b      	str	r3, [sp, #44]	@ 0x2c
        .mark              = device_config.mark,
 8006866:	4b1c      	ldr	r3, [pc, #112]	@ (80068d8 <Write_buffer+0x144>)
 8006868:	9301      	str	r3, [sp, #4]
    log_entry_t entry = {
 800686a:	7d1b      	ldrb	r3, [r3, #20]
 800686c:	7465      	strb	r5, [r4, #17]
 800686e:	2500      	movs	r5, #0
 8006870:	7423      	strb	r3, [r4, #16]
 8006872:	4b22      	ldr	r3, [pc, #136]	@ (80068fc <Write_buffer+0x168>)
 8006874:	8265      	strh	r5, [r4, #18]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	7523      	strb	r3, [r4, #20]
    meas_data_log_write_entry(&entry);
 800687a:	f001 ff45 	bl	8008708 <meas_data_log_write_entry>
    meas_data_log_read_last();
 800687e:	f001 ff6d 	bl	800875c <meas_data_log_read_last>
    Set_Wakeup_After_Delay(current_settings.temp_interval, &sTime, &sDate);
 8006882:	4b1f      	ldr	r3, [pc, #124]	@ (8006900 <Write_buffer+0x16c>)
 8006884:	4a1f      	ldr	r2, [pc, #124]	@ (8006904 <Write_buffer+0x170>)
 8006886:	0019      	movs	r1, r3
 8006888:	3176      	adds	r1, #118	@ 0x76
 800688a:	7809      	ldrb	r1, [r1, #0]
 800688c:	7812      	ldrb	r2, [r2, #0]
 800688e:	0209      	lsls	r1, r1, #8
 8006890:	4311      	orrs	r1, r2
 8006892:	001a      	movs	r2, r3
 8006894:	3277      	adds	r2, #119	@ 0x77
 8006896:	3378      	adds	r3, #120	@ 0x78
 8006898:	7812      	ldrb	r2, [r2, #0]
 800689a:	7818      	ldrb	r0, [r3, #0]
 800689c:	0412      	lsls	r2, r2, #16
 800689e:	430a      	orrs	r2, r1
 80068a0:	0600      	lsls	r0, r0, #24
 80068a2:	0031      	movs	r1, r6
 80068a4:	4310      	orrs	r0, r2
 80068a6:	aa02      	add	r2, sp, #8
 80068a8:	f7ff ff18 	bl	80066dc <Set_Wakeup_After_Delay>
    Index_num++;
 80068ac:	8838      	ldrh	r0, [r7, #0]
 80068ae:	3001      	adds	r0, #1
 80068b0:	b280      	uxth	r0, r0
 80068b2:	8038      	strh	r0, [r7, #0]
    Save_IndexNum_To_Backup(Index_num);
 80068b4:	f7ff fc34 	bl	8006120 <Save_IndexNum_To_Backup>
    cfg->mark = mark_value;
 80068b8:	9b01      	ldr	r3, [sp, #4]
    Save_Mark_To_Backup(cfg->mark);
 80068ba:	0028      	movs	r0, r5
    cfg->mark = mark_value;
 80068bc:	751d      	strb	r5, [r3, #20]
    Save_Mark_To_Backup(cfg->mark);
 80068be:	f7ff fcd9 	bl	8006274 <Save_Mark_To_Backup>
}
 80068c2:	b00f      	add	sp, #60	@ 0x3c
 80068c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!rad_mark){
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	d100      	bne.n	80068cc <Write_buffer+0x138>
 80068ca:	e78b      	b.n	80067e4 <Write_buffer+0x50>
    	Save_Pre_RAD_Value_To_Backup(dose_log);
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	f7ff fd0b 	bl	80062e8 <Save_Pre_RAD_Value_To_Backup>
 80068d2:	e78b      	b.n	80067ec <Write_buffer+0x58>
 80068d4:	200009f8 	.word	0x200009f8
 80068d8:	20000b50 	.word	0x20000b50
 80068dc:	42480000 	.word	0x42480000
 80068e0:	20000502 	.word	0x20000502
 80068e4:	20000544 	.word	0x20000544
 80068e8:	20000530 	.word	0x20000530
 80068ec:	0801d4af 	.word	0x0801d4af
 80068f0:	2000004c 	.word	0x2000004c
 80068f4:	2000055c 	.word	0x2000055c
 80068f8:	41200000 	.word	0x41200000
 80068fc:	0801f3a0 	.word	0x0801f3a0
 8006900:	20002bac 	.word	0x20002bac
 8006904:	20002c21 	.word	0x20002c21

08006908 <Reset_All_Backup_Registers>:
{
 8006908:	b570      	push	{r4, r5, r6, lr}
    HAL_PWR_EnableBkUpAccess();
 800690a:	f00a f8e3 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
    Set_ModeStatus(mode_internal_backup_stop);
 800690e:	2000      	movs	r0, #0
 8006910:	f003 fa6a 	bl	8009de8 <Set_ModeStatus>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX,        0x00000000);
 8006914:	2200      	movs	r2, #0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0xFFFFFFFF);
 8006916:	2501      	movs	r5, #1
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX,        0x00000000);
 8006918:	4c39      	ldr	r4, [pc, #228]	@ (8006a00 <Reset_All_Backup_Registers+0xf8>)
 800691a:	0011      	movs	r1, r2
 800691c:	0020      	movs	r0, r4
 800691e:	f00b fbe9 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG,        0x00000000);
 8006922:	0020      	movs	r0, r4
 8006924:	2200      	movs	r2, #0
 8006926:	2101      	movs	r1, #1
 8006928:	f00b fbe4 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_TEMP_MIN_MAX,    0x00000000);
 800692c:	0020      	movs	r0, r4
 800692e:	2200      	movs	r2, #0
 8006930:	2102      	movs	r1, #2
 8006932:	f00b fbdf 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG,         0x00000000);
 8006936:	0020      	movs	r0, r4
 8006938:	2200      	movs	r2, #0
 800693a:	2103      	movs	r1, #3
 800693c:	f00b fbda 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG,       0x00000000);
 8006940:	0020      	movs	r0, r4
 8006942:	2200      	movs	r2, #0
 8006944:	2104      	movs	r1, #4
 8006946:	f00b fbd5 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0xFFFFFFFF);
 800694a:	426d      	negs	r5, r5
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK,            0x00000000);
 800694c:	0020      	movs	r0, r4
 800694e:	2200      	movs	r2, #0
 8006950:	2106      	movs	r1, #6
 8006952:	f00b fbcf 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0xFFFFFFFF);
 8006956:	002a      	movs	r2, r5
 8006958:	0020      	movs	r0, r4
 800695a:	2107      	movs	r1, #7
 800695c:	f00b fbca 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_INTERVAL_INFO,   0x00000000);
 8006960:	0020      	movs	r0, r4
 8006962:	2200      	movs	r2, #0
 8006964:	2108      	movs	r1, #8
 8006966:	f00b fbc5 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE,   0x00000000);
 800696a:	0020      	movs	r0, r4
    device_config.mark = 0;
 800696c:	2400      	movs	r4, #0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE,   0x00000000);
 800696e:	2105      	movs	r1, #5
 8006970:	2200      	movs	r2, #0
 8006972:	f00b fbbf 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
    device_config.temp_max = INT16_MIN;
 8006976:	4823      	ldr	r0, [pc, #140]	@ (8006a04 <Reset_All_Backup_Registers+0xfc>)
 8006978:	4b23      	ldr	r3, [pc, #140]	@ (8006a08 <Reset_All_Backup_Registers+0x100>)
    device_config.dose_max = 0xFFFFFFFF;
 800697a:	6045      	str	r5, [r0, #4]
    device_config.temp_max = INT16_MIN;
 800697c:	6003      	str	r3, [r0, #0]
    device_config.mark = 0;
 800697e:	7504      	strb	r4, [r0, #20]
    device_config.alarm_state = 0;
 8006980:	6184      	str	r4, [r0, #24]
    Save_All_Config_To_BackupRegister(&device_config);
 8006982:	f7ff fcc5 	bl	8006310 <Save_All_Config_To_BackupRegister>
    Switch_Backup_reg(MODE_Boot);
 8006986:	2001      	movs	r0, #1
 8006988:	f7ff faea 	bl	8005f60 <Switch_Backup_reg>
    idx_rad = 0;
 800698c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a0c <Reset_All_Backup_Registers+0x104>)
    current_settings.start_mode = 0x00;
 800698e:	4a20      	ldr	r2, [pc, #128]	@ (8006a10 <Reset_All_Backup_Registers+0x108>)
    idx_rad = 0;
 8006990:	801c      	strh	r4, [r3, #0]
    idx_temp = 0;
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <Reset_All_Backup_Registers+0x10c>)
    current_settings.start_mode = 0x00;
 8006994:	7014      	strb	r4, [r2, #0]
    idx_temp = 0;
 8006996:	801c      	strh	r4, [r3, #0]
    current_settings.start_mode = 0x00;
 8006998:	4b1f      	ldr	r3, [pc, #124]	@ (8006a18 <Reset_All_Backup_Registers+0x110>)
    current_settings.start_time_info = 0x00;
 800699a:	001a      	movs	r2, r3
 800699c:	326c      	adds	r2, #108	@ 0x6c
 800699e:	7014      	strb	r4, [r2, #0]
 80069a0:	001a      	movs	r2, r3
 80069a2:	326d      	adds	r2, #109	@ 0x6d
 80069a4:	7014      	strb	r4, [r2, #0]
 80069a6:	001a      	movs	r2, r3
 80069a8:	326e      	adds	r2, #110	@ 0x6e
 80069aa:	7014      	strb	r4, [r2, #0]
 80069ac:	001a      	movs	r2, r3
 80069ae:	326f      	adds	r2, #111	@ 0x6f
 80069b0:	7014      	strb	r4, [r2, #0]
    current_settings.start_target_seconds = 0x00;  // start_delay 적용된 RTC 기준 초 시각
 80069b2:	001a      	movs	r2, r3
 80069b4:	32a1      	adds	r2, #161	@ 0xa1
 80069b6:	7014      	strb	r4, [r2, #0]
 80069b8:	7054      	strb	r4, [r2, #1]
 80069ba:	7094      	strb	r4, [r2, #2]
 80069bc:	70d4      	strb	r4, [r2, #3]
    current_settings.start_reservation_time= 0x00;
 80069be:	001a      	movs	r2, r3
 80069c0:	32a5      	adds	r2, #165	@ 0xa5
 80069c2:	7014      	strb	r4, [r2, #0]
 80069c4:	7054      	strb	r4, [r2, #1]
 80069c6:	7094      	strb	r4, [r2, #2]
 80069c8:	70d4      	strb	r4, [r2, #3]
    current_settings.interval_duration_day= 0x00;
 80069ca:	001a      	movs	r2, r3
 80069cc:	32a9      	adds	r2, #169	@ 0xa9
 80069ce:	7014      	strb	r4, [r2, #0]
 80069d0:	7054      	strb	r4, [r2, #1]
    current_settings.end_target_seconds= 0x00;
 80069d2:	001a      	movs	r2, r3
 80069d4:	32ab      	adds	r2, #171	@ 0xab
 80069d6:	7014      	strb	r4, [r2, #0]
 80069d8:	7054      	strb	r4, [r2, #1]
 80069da:	7094      	strb	r4, [r2, #2]
 80069dc:	70d4      	strb	r4, [r2, #3]
    current_settings.start_time_info_for_alarm = 0x00;
 80069de:	001a      	movs	r2, r3
 80069e0:	3268      	adds	r2, #104	@ 0x68
 80069e2:	7014      	strb	r4, [r2, #0]
 80069e4:	001a      	movs	r2, r3
 80069e6:	3269      	adds	r2, #105	@ 0x69
 80069e8:	7014      	strb	r4, [r2, #0]
 80069ea:	001a      	movs	r2, r3
 80069ec:	336b      	adds	r3, #107	@ 0x6b
 80069ee:	326a      	adds	r2, #106	@ 0x6a
 80069f0:	7014      	strb	r4, [r2, #0]
 80069f2:	701c      	strb	r4, [r3, #0]
    Save_CurrentSettings();
 80069f4:	f003 f810 	bl	8009a18 <Save_CurrentSettings>
    printf("[RTC] All Backup Registers RESET (0x00000000)\r\n");
 80069f8:	4808      	ldr	r0, [pc, #32]	@ (8006a1c <Reset_All_Backup_Registers+0x114>)
 80069fa:	f013 fc1f 	bl	801a23c <puts>
}
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	200009f8 	.word	0x200009f8
 8006a04:	20000b50 	.word	0x20000b50
 8006a08:	7fff8000 	.word	0x7fff8000
 8006a0c:	20000500 	.word	0x20000500
 8006a10:	20002c0f 	.word	0x20002c0f
 8006a14:	200004fe 	.word	0x200004fe
 8006a18:	20002bac 	.word	0x20002bac
 8006a1c:	0801d4f8 	.word	0x0801d4f8

08006a20 <Press_Action>:
void Press_Action(void){
 8006a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(button_flag){
 8006a22:	4d93      	ldr	r5, [pc, #588]	@ (8006c70 <Press_Action+0x250>)
 8006a24:	782b      	ldrb	r3, [r5, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d022      	beq.n	8006a70 <Press_Action+0x50>
        if (button_press_count == 2) {
 8006a2a:	4e92      	ldr	r6, [pc, #584]	@ (8006c74 <Press_Action+0x254>)
 8006a2c:	4a92      	ldr	r2, [pc, #584]	@ (8006c78 <Press_Action+0x258>)
 8006a2e:	7833      	ldrb	r3, [r6, #0]
 8006a30:	4c92      	ldr	r4, [pc, #584]	@ (8006c7c <Press_Action+0x25c>)
 8006a32:	b2df      	uxtb	r7, r3
 8006a34:	9200      	str	r2, [sp, #0]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d124      	bne.n	8006a84 <Press_Action+0x64>
            printf("Double Click!\r\n");
 8006a3a:	4891      	ldr	r0, [pc, #580]	@ (8006c80 <Press_Action+0x260>)
 8006a3c:	f013 fbfe 	bl	801a23c <puts>
        	if (Meas_Mode == 2 || Meas_Mode == 4 || Meas_Mode == 3){
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	1e9a      	subs	r2, r3, #2
 8006a46:	2a02      	cmp	r2, #2
 8006a48:	d809      	bhi.n	8006a5e <Press_Action+0x3e>
    cfg->mark = mark_value;
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	4b8d      	ldr	r3, [pc, #564]	@ (8006c84 <Press_Action+0x264>)
 8006a4e:	7518      	strb	r0, [r3, #20]
    Save_Mark_To_Backup(cfg->mark);
 8006a50:	f7ff fc10 	bl	8006274 <Save_Mark_To_Backup>
	  	    if (Meas_Mode != 2){
 8006a54:	9b00      	ldr	r3, [sp, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d102      	bne.n	8006a62 <Press_Action+0x42>
 8006a5c:	e004      	b.n	8006a68 <Press_Action+0x48>
        	else if(Meas_Mode == 5){
 8006a5e:	2b05      	cmp	r3, #5
 8006a60:	d007      	beq.n	8006a72 <Press_Action+0x52>
	  		Tick_Save = 0;}
 8006a62:	2200      	movs	r2, #0
 8006a64:	4b88      	ldr	r3, [pc, #544]	@ (8006c88 <Press_Action+0x268>)
 8006a66:	601a      	str	r2, [r3, #0]
	  	    button_press_count = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	7033      	strb	r3, [r6, #0]
            SW_count = 0; // 원래처럼 리셋, 빼도 됨
 8006a6c:	7023      	strb	r3, [r4, #0]
            button_flag = false;
 8006a6e:	702b      	strb	r3, [r5, #0]
}
 8006a70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        		 Switch_Backup_reg(MODE_Stop);
 8006a72:	0038      	movs	r0, r7
 8006a74:	f7ff fa74 	bl	8005f60 <Switch_Backup_reg>
        		 Tick_Save = 0;
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4b83      	ldr	r3, [pc, #524]	@ (8006c88 <Press_Action+0x268>)
 8006a7c:	601a      	str	r2, [r3, #0]
        		 First_Measure = 0;
 8006a7e:	4b83      	ldr	r3, [pc, #524]	@ (8006c8c <Press_Action+0x26c>)
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e7e7      	b.n	8006a54 <Press_Action+0x34>
        bool button_flag_det = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8006a84:	20a0      	movs	r0, #160	@ 0xa0
 8006a86:	2101      	movs	r1, #1
 8006a88:	05c0      	lsls	r0, r0, #23
 8006a8a:	f008 fe89 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8006a8e:	4f80      	ldr	r7, [pc, #512]	@ (8006c90 <Press_Action+0x270>)
 8006a90:	1e06      	subs	r6, r0, #0
 	  	 if(!button_flag_det)
 8006a92:	d000      	beq.n	8006a96 <Press_Action+0x76>
 8006a94:	e0c9      	b.n	8006c2a <Press_Action+0x20a>
 	  	    SW_count++;
 8006a96:	7821      	ldrb	r1, [r4, #0]
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 8006a98:	783a      	ldrb	r2, [r7, #0]
 	  	    SW_count++;
 8006a9a:	3101      	adds	r1, #1
 8006a9c:	b2c9      	uxtb	r1, r1
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 8006a9e:	487d      	ldr	r0, [pc, #500]	@ (8006c94 <Press_Action+0x274>)
 	  	    SW_count++;
 8006aa0:	7021      	strb	r1, [r4, #0]
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 8006aa2:	f013 fb5b 	bl	801a15c <iprintf>
 	  	 		if (SW_count>=2){
 8006aa6:	7823      	ldrb	r3, [r4, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d90f      	bls.n	8006acc <Press_Action+0xac>
 	  	 		printf("Mode Change\r\n");
 8006aac:	487a      	ldr	r0, [pc, #488]	@ (8006c98 <Press_Action+0x278>)
 8006aae:	f013 fbc5 	bl	801a23c <puts>
 	  	 			if(Meas_Mode == 0){ // Boot
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	7818      	ldrb	r0, [r3, #0]
 8006ab6:	2805      	cmp	r0, #5
 8006ab8:	d808      	bhi.n	8006acc <Press_Action+0xac>
 8006aba:	4f73      	ldr	r7, [pc, #460]	@ (8006c88 <Press_Action+0x268>)
 8006abc:	f7f9 fb36 	bl	800012c <__gnu_thumb1_case_uqi>
 8006ac0:	93832003 	.word	0x93832003
 8006ac4:	a283      	.short	0xa283
 	  	 			 SW_count = 0;
 8006ac6:	7026      	strb	r6, [r4, #0]
 	  	 			 button_flag = false;
 8006ac8:	702e      	strb	r6, [r5, #0]
 	  	 			Tick_Save = 0;
 8006aca:	603e      	str	r6, [r7, #0]
 	  	 	 if (SW_count>9){
 8006acc:	7823      	ldrb	r3, [r4, #0]
 8006ace:	2b09      	cmp	r3, #9
 8006ad0:	d90b      	bls.n	8006aea <Press_Action+0xca>
 	  	 		if(Meas_Mode == 6) // End Mode
 8006ad2:	9b00      	ldr	r3, [sp, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b06      	cmp	r3, #6
 8006ad8:	d107      	bne.n	8006aea <Press_Action+0xca>
 	  	 		RTC_Disable_All_Wakeup();
 8006ada:	f7fe fdff 	bl	80056dc <RTC_Disable_All_Wakeup>
 	  	 		 Reset_All_Backup_Registers();
 8006ade:	f7ff ff13 	bl	8006908 <Reset_All_Backup_Registers>
 	  	 		 First_Measure = 0;
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4b69      	ldr	r3, [pc, #420]	@ (8006c8c <Press_Action+0x26c>)
 	  	 		SW_count = 0;
 8006ae6:	7022      	strb	r2, [r4, #0]
 	  	 		 First_Measure = 0;
 8006ae8:	701a      	strb	r2, [r3, #0]
	  	    if (Meas_Mode != 2){
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d002      	beq.n	8006af8 <Press_Action+0xd8>
	  		Tick_Save = 0;}
 8006af2:	2200      	movs	r2, #0
 8006af4:	4b64      	ldr	r3, [pc, #400]	@ (8006c88 <Press_Action+0x268>)
 8006af6:	601a      	str	r2, [r3, #0]
        last_button_tick = 0;
 8006af8:	2200      	movs	r2, #0
 8006afa:	4b68      	ldr	r3, [pc, #416]	@ (8006c9c <Press_Action+0x27c>)
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	e7b7      	b.n	8006a70 <Press_Action+0x50>
 	  	 		      if(current_settings.start_mode == 0x00){
 8006b00:	4a67      	ldr	r2, [pc, #412]	@ (8006ca0 <Press_Action+0x280>)
 8006b02:	4b68      	ldr	r3, [pc, #416]	@ (8006ca4 <Press_Action+0x284>)
 8006b04:	7812      	ldrb	r2, [r2, #0]
 8006b06:	9201      	str	r2, [sp, #4]
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	d119      	bne.n	8006b40 <Press_Action+0x120>
 	  	 				if (current_settings.start_delay > 0){
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	001a      	movs	r2, r3
 8006b10:	3165      	adds	r1, #101	@ 0x65
 8006b12:	7809      	ldrb	r1, [r1, #0]
 8006b14:	3264      	adds	r2, #100	@ 0x64
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	0209      	lsls	r1, r1, #8
 8006b1a:	4311      	orrs	r1, r2
 8006b1c:	001a      	movs	r2, r3
 8006b1e:	3266      	adds	r2, #102	@ 0x66
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	3367      	adds	r3, #103	@ 0x67
 8006b24:	781e      	ldrb	r6, [r3, #0]
 8006b26:	0412      	lsls	r2, r2, #16
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	0636      	lsls	r6, r6, #24
 8006b2c:	4316      	orrs	r6, r2
 8006b2e:	d03b      	beq.n	8006ba8 <Press_Action+0x188>
 	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8006b30:	2006      	movs	r0, #6
 8006b32:	f7ff fa15 	bl	8005f60 <Switch_Backup_reg>
	   	  	 		     SW_count = 0;
 8006b36:	9b01      	ldr	r3, [sp, #4]
 		   	  	 		     SW_count = 0;
 8006b38:	7023      	strb	r3, [r4, #0]
 		   	  	 			 button_flag = false;
 8006b3a:	702b      	strb	r3, [r5, #0]
 		   	  	 		     Tick_Save = 0;
 8006b3c:	603b      	str	r3, [r7, #0]
 8006b3e:	e011      	b.n	8006b64 <Press_Action+0x144>
 	  	 			  else if(current_settings.start_mode == 0x01){
 8006b40:	9a01      	ldr	r2, [sp, #4]
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	d119      	bne.n	8006b7a <Press_Action+0x15a>
 	  	 				 AlarmDelay_InitStart_Flash();
 8006b46:	f003 f877 	bl	8009c38 <AlarmDelay_InitStart_Flash>
  	   	  	 			 Switch_Backup_reg(MODE_Start);
 8006b4a:	2003      	movs	r0, #3
 8006b4c:	f7ff fa08 	bl	8005f60 <Switch_Backup_reg>
  	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006b50:	f7ff fbec 	bl	800632c <Load_IndexNum_From_Backup>
 8006b54:	4b54      	ldr	r3, [pc, #336]	@ (8006ca8 <Press_Action+0x288>)
  	   	  	 	         Interval_LCD_Count = 0;
 8006b56:	4a55      	ldr	r2, [pc, #340]	@ (8006cac <Press_Action+0x28c>)
  	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006b58:	8018      	strh	r0, [r3, #0]
  	   	  	 		     SW_count = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	7023      	strb	r3, [r4, #0]
  	   	  	 			 button_flag = false;
 8006b5e:	702b      	strb	r3, [r5, #0]
  	   	  	 	     	 Tick_Save = 0;
 8006b60:	603b      	str	r3, [r7, #0]
  	   	  	 	         Interval_LCD_Count = 0;
 8006b62:	6013      	str	r3, [r2, #0]
                    Set_ModeStatus(mode_internal_backup_start);
 8006b64:	2001      	movs	r0, #1
 8006b66:	f003 f93f 	bl	8009de8 <Set_ModeStatus>
 	  	 			Clear_WakeupTime_Backup();
 8006b6a:	f7ff f9e1 	bl	8005f30 <Clear_WakeupTime_Backup>
 	  	 		    Clear_Backup_Index();
 8006b6e:	f7ff fb3d 	bl	80061ec <Clear_Backup_Index>
 	  	 			First_Measure = 0;
 8006b72:	2200      	movs	r2, #0
 8006b74:	4b45      	ldr	r3, [pc, #276]	@ (8006c8c <Press_Action+0x26c>)
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e7a8      	b.n	8006acc <Press_Action+0xac>
 	 	  	 				if (current_settings.start_delay > 0){
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	001a      	movs	r2, r3
 8006b7e:	3165      	adds	r1, #101	@ 0x65
 8006b80:	7809      	ldrb	r1, [r1, #0]
 8006b82:	3264      	adds	r2, #100	@ 0x64
 8006b84:	7812      	ldrb	r2, [r2, #0]
 8006b86:	0209      	lsls	r1, r1, #8
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	3266      	adds	r2, #102	@ 0x66
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	3367      	adds	r3, #103	@ 0x67
 8006b92:	781e      	ldrb	r6, [r3, #0]
 8006b94:	0412      	lsls	r2, r2, #16
 8006b96:	430a      	orrs	r2, r1
 8006b98:	0636      	lsls	r6, r6, #24
 8006b9a:	4316      	orrs	r6, r2
 8006b9c:	d004      	beq.n	8006ba8 <Press_Action+0x188>
 	 	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8006b9e:	2006      	movs	r0, #6
 8006ba0:	f7ff f9de 	bl	8005f60 <Switch_Backup_reg>
 		   	  	 		     SW_count = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e7c7      	b.n	8006b38 <Press_Action+0x118>
 	 	  	 				 AlarmDelay_InitStart_Flash();
 8006ba8:	f003 f846 	bl	8009c38 <AlarmDelay_InitStart_Flash>
 	 	   	  	 			 Switch_Backup_reg(MODE_Start);
 8006bac:	2003      	movs	r0, #3
 8006bae:	f7ff f9d7 	bl	8005f60 <Switch_Backup_reg>
 	 	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006bb2:	f7ff fbbb 	bl	800632c <Load_IndexNum_From_Backup>
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca8 <Press_Action+0x288>)
 	 	   	  	 		     SW_count = 0;
 8006bb8:	7026      	strb	r6, [r4, #0]
 	 	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006bba:	8018      	strh	r0, [r3, #0]
 	 	   	  	 	         Interval_LCD_Count = 0;
 8006bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8006cac <Press_Action+0x28c>)
 	 	   	  	 			 button_flag = false;
 8006bbe:	702e      	strb	r6, [r5, #0]
 	 	   	  	 	     	 Tick_Save = 0;
 8006bc0:	603e      	str	r6, [r7, #0]
 	 	   	  	 	         Interval_LCD_Count = 0;
 8006bc2:	601e      	str	r6, [r3, #0]
 8006bc4:	e7ce      	b.n	8006b64 <Press_Action+0x144>
 	  	 		     Switch_Backup_reg(MODE_Pause);
 8006bc6:	2004      	movs	r0, #4
 8006bc8:	f7ff f9ca 	bl	8005f60 <Switch_Backup_reg>
 	  	 		     button_flag = false;
 8006bcc:	702e      	strb	r6, [r5, #0]
 	  	 		    RTC_Disable_All_Wakeup();
 8006bce:	f7fe fd85 	bl	80056dc <RTC_Disable_All_Wakeup>
                    Set_ModeStatus(mode_internal_backup_pause);
 8006bd2:	2002      	movs	r0, #2
 8006bd4:	f003 f908 	bl	8009de8 <Set_ModeStatus>
                    Clear_WakeupTime_Backup();
 8006bd8:	f7ff f9aa 	bl	8005f30 <Clear_WakeupTime_Backup>
 	  	 		    First_Measure = 0;
 8006bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8006c8c <Press_Action+0x26c>)
 	  	 		     SW_count = 0;
 8006bde:	7026      	strb	r6, [r4, #0]
 	  	 		    Tick_Save = 0;
 8006be0:	603e      	str	r6, [r7, #0]
 	  	 		    First_Measure = 0;
 8006be2:	701e      	strb	r6, [r3, #0]
 8006be4:	e772      	b.n	8006acc <Press_Action+0xac>
 	  	 			RTC_Disable_All_Wakeup();
 8006be6:	f7fe fd79 	bl	80056dc <RTC_Disable_All_Wakeup>
 	  	 		    Switch_Backup_reg(MODE_End);
 8006bea:	2007      	movs	r0, #7
 8006bec:	f7ff f9b8 	bl	8005f60 <Switch_Backup_reg>
                    Set_ModeStatus(mode_internal_backup_end);
 8006bf0:	2003      	movs	r0, #3
 8006bf2:	f003 f8f9 	bl	8009de8 <Set_ModeStatus>
 	  	 		    Tick_Save = 0;
 8006bf6:	2300      	movs	r3, #0
 	  	 	        First_Measure = 0;
 8006bf8:	4a24      	ldr	r2, [pc, #144]	@ (8006c8c <Press_Action+0x26c>)
 	  	 		    Tick_Save = 0;
 8006bfa:	603b      	str	r3, [r7, #0]
 	  	 		    SW_count = 0;
 8006bfc:	7023      	strb	r3, [r4, #0]
 	  	 	     	button_flag = false;
 8006bfe:	702b      	strb	r3, [r5, #0]
 	  	 	        First_Measure = 0;
 8006c00:	7013      	strb	r3, [r2, #0]
 8006c02:	e763      	b.n	8006acc <Press_Action+0xac>
 	  	 		    AlarmDelay_InitStart_Flash();
 8006c04:	f003 f818 	bl	8009c38 <AlarmDelay_InitStart_Flash>
 	  	 		    Switch_Backup_reg(MODE_Start);
 8006c08:	2003      	movs	r0, #3
 8006c0a:	f7ff f9a9 	bl	8005f60 <Switch_Backup_reg>
 	 	  	 		Index_num = Load_IndexNum_From_Backup();
 8006c0e:	f7ff fb8d 	bl	800632c <Load_IndexNum_From_Backup>
 	 	  	 	    Interval_LCD_Count = 1;
 8006c12:	2201      	movs	r2, #1
 	 	  	 		Index_num = Load_IndexNum_From_Backup();
 8006c14:	4b24      	ldr	r3, [pc, #144]	@ (8006ca8 <Press_Action+0x288>)
 8006c16:	8018      	strh	r0, [r3, #0]
 	 	  	 	    Interval_LCD_Count = 1;
 8006c18:	4b24      	ldr	r3, [pc, #144]	@ (8006cac <Press_Action+0x28c>)
 8006c1a:	601a      	str	r2, [r3, #0]
 	 	  	 		SW_count = 0;
 8006c1c:	2300      	movs	r3, #0
 	 	  	 		First_Measure = 0;
 8006c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006c8c <Press_Action+0x26c>)
 	 	  	 		SW_count = 0;
 8006c20:	7023      	strb	r3, [r4, #0]
 	 	  	 		button_flag = false;
 8006c22:	702b      	strb	r3, [r5, #0]
 	 	  	 		First_Measure = 0;
 8006c24:	7013      	strb	r3, [r2, #0]
 	 	  	 		Tick_Save = 0;
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	e750      	b.n	8006acc <Press_Action+0xac>
        	LCD_mode++;
 8006c2a:	783b      	ldrb	r3, [r7, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	703b      	strb	r3, [r7, #0]
	  	      if(Meas_Mode == 3){
 8006c30:	9b00      	ldr	r3, [sp, #0]
 8006c32:	7818      	ldrb	r0, [r3, #0]
 8006c34:	2803      	cmp	r0, #3
 8006c36:	d104      	bne.n	8006c42 <Press_Action+0x222>
	  	 	  	 Switch_Backup_reg(MODE_Start);
 8006c38:	f7ff f992 	bl	8005f60 <Switch_Backup_reg>
	  	 	     First_Measure = 0;
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4b13      	ldr	r3, [pc, #76]	@ (8006c8c <Press_Action+0x26c>)
 8006c40:	701a      	strb	r2, [r3, #0]
	  	 	if(Meas_Mode == 1 && First_Measure<=1){
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <Press_Action+0x23a>
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8006c8c <Press_Action+0x26c>)
 8006c4e:	5651      	ldrsb	r1, [r2, r1]
 8006c50:	2901      	cmp	r1, #1
 8006c52:	dc02      	bgt.n	8006c5a <Press_Action+0x23a>
	  	 		First_Measure = 2;
 8006c54:	2102      	movs	r1, #2
	  	 		LCD_mode = 1;
 8006c56:	703b      	strb	r3, [r7, #0]
	  	 		First_Measure = 2;
 8006c58:	7011      	strb	r1, [r2, #0]
            button_flag = false;
 8006c5a:	2300      	movs	r3, #0
            Interval_LCD_Count = 1;
 8006c5c:	2201      	movs	r2, #1
            button_flag = false;
 8006c5e:	702b      	strb	r3, [r5, #0]
            SW_count = 0;
 8006c60:	7023      	strb	r3, [r4, #0]
            Interval_LCD_Count = 1;
 8006c62:	4b12      	ldr	r3, [pc, #72]	@ (8006cac <Press_Action+0x28c>)
            printf("Button unpressed \r\n");
 8006c64:	4812      	ldr	r0, [pc, #72]	@ (8006cb0 <Press_Action+0x290>)
            Interval_LCD_Count = 1;
 8006c66:	601a      	str	r2, [r3, #0]
            printf("Button unpressed \r\n");
 8006c68:	f013 fae8 	bl	801a23c <puts>
 8006c6c:	e73d      	b.n	8006aea <Press_Action+0xca>
 8006c6e:	46c0      	nop			@ (mov r8, r8)
 8006c70:	20000538 	.word	0x20000538
 8006c74:	20000524 	.word	0x20000524
 8006c78:	20000535 	.word	0x20000535
 8006c7c:	20000537 	.word	0x20000537
 8006c80:	0801d527 	.word	0x0801d527
 8006c84:	20000b50 	.word	0x20000b50
 8006c88:	20000540 	.word	0x20000540
 8006c8c:	20000534 	.word	0x20000534
 8006c90:	20000503 	.word	0x20000503
 8006c94:	0801d536 	.word	0x0801d536
 8006c98:	0801d555 	.word	0x0801d555
 8006c9c:	20000528 	.word	0x20000528
 8006ca0:	20002c0f 	.word	0x20002c0f
 8006ca4:	20002bac 	.word	0x20002bac
 8006ca8:	2000004c 	.word	0x2000004c
 8006cac:	2000053c 	.word	0x2000053c
 8006cb0:	0801d562 	.word	0x0801d562

08006cb4 <Short_Measure>:
void Short_Measure(void){
 8006cb4:	b510      	push	{r4, lr}
	Count_Filter_Kalman();
 8006cb6:	f7ff f833 	bl	8005d20 <Count_Filter_Kalman>
	Read_Temp();
 8006cba:	f7fe fc99 	bl	80055f0 <Read_Temp>
	if (Tick_Save>7){
 8006cbe:	4c09      	ldr	r4, [pc, #36]	@ (8006ce4 <Short_Measure+0x30>)
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	2b07      	cmp	r3, #7
 8006cc4:	d903      	bls.n	8006cce <Short_Measure+0x1a>
	  Get_in_Shutdown();
 8006cc6:	f7fe ff33 	bl	8005b30 <Get_in_Shutdown>
	  Tick_Save = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6023      	str	r3, [r4, #0]
	printf("Tick_Save : %lu\r\n", Tick_Save);
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	4805      	ldr	r0, [pc, #20]	@ (8006ce8 <Short_Measure+0x34>)
 8006cd2:	f013 fa43 	bl	801a15c <iprintf>
     comp1_count = 0;
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4b04      	ldr	r3, [pc, #16]	@ (8006cec <Short_Measure+0x38>)
 8006cda:	601a      	str	r2, [r3, #0]
	 Tick_Save++;
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	6023      	str	r3, [r4, #0]
}
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	20000540 	.word	0x20000540
 8006ce8:	0801d575 	.word	0x0801d575
 8006cec:	20000560 	.word	0x20000560

08006cf0 <Non_Measure>:
void Non_Measure(void){
 8006cf0:	b510      	push	{r4, lr}
	if (Tick_Save>7){
 8006cf2:	4c09      	ldr	r4, [pc, #36]	@ (8006d18 <Non_Measure+0x28>)
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	2b07      	cmp	r3, #7
 8006cf8:	d903      	bls.n	8006d02 <Non_Measure+0x12>
	  Get_in_Shutdown();
 8006cfa:	f7fe ff19 	bl	8005b30 <Get_in_Shutdown>
	  Tick_Save = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6023      	str	r3, [r4, #0]
	printf("Tick_Save : %lu\r\n", Tick_Save);
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	4805      	ldr	r0, [pc, #20]	@ (8006d1c <Non_Measure+0x2c>)
 8006d06:	f013 fa29 	bl	801a15c <iprintf>
     comp1_count = 0;
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <Non_Measure+0x30>)
 8006d0e:	601a      	str	r2, [r3, #0]
	 Tick_Save++;
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	6023      	str	r3, [r4, #0]
}
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	20000540 	.word	0x20000540
 8006d1c:	0801d575 	.word	0x0801d575
 8006d20:	20000560 	.word	0x20000560

08006d24 <Check_And_Run_Alarms>:
{
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006d26:	4cde      	ldr	r4, [pc, #888]	@ (80070a0 <Check_And_Run_Alarms+0x37c>)
 8006d28:	4bde      	ldr	r3, [pc, #888]	@ (80070a4 <Check_And_Run_Alarms+0x380>)
 8006d2a:	0022      	movs	r2, r4
 8006d2c:	3269      	adds	r2, #105	@ 0x69
 8006d2e:	7812      	ldrb	r2, [r2, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	0212      	lsls	r2, r2, #8
 8006d34:	431a      	orrs	r2, r3
 8006d36:	0023      	movs	r3, r4
 8006d38:	336a      	adds	r3, #106	@ 0x6a
 8006d3a:	781b      	ldrb	r3, [r3, #0]
{
 8006d3c:	b093      	sub	sp, #76	@ 0x4c
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	4313      	orrs	r3, r2
 8006d42:	0022      	movs	r2, r4
 8006d44:	326b      	adds	r2, #107	@ 0x6b
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	0612      	lsls	r2, r2, #24
 8006d4a:	431a      	orrs	r2, r3
    if (start_epoch == 0xFFFFFFFFu) {
 8006d4c:	0013      	movs	r3, r2
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006d4e:	9205      	str	r2, [sp, #20]
    if (start_epoch == 0xFFFFFFFFu) {
 8006d50:	3301      	adds	r3, #1
 8006d52:	d100      	bne.n	8006d56 <Check_And_Run_Alarms+0x32>
 8006d54:	e1f7      	b.n	8007146 <Check_And_Run_Alarms+0x422>
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8006d56:	4fd4      	ldr	r7, [pc, #848]	@ (80070a8 <Check_And_Run_Alarms+0x384>)
 8006d58:	ad0d      	add	r5, sp, #52	@ 0x34
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8006d5a:	ae0c      	add	r6, sp, #48	@ 0x30
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8006d5c:	0029      	movs	r1, r5
 8006d5e:	2200      	movs	r2, #0
 8006d60:	0038      	movs	r0, r7
 8006d62:	f00b f909 	bl	8011f78 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8006d66:	0031      	movs	r1, r6
 8006d68:	2200      	movs	r2, #0
 8006d6a:	0038      	movs	r0, r7
 8006d6c:	f00b f936 	bl	8011fdc <HAL_RTC_GetDate>
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8006d70:	78b2      	ldrb	r2, [r6, #2]
 8006d72:	7871      	ldrb	r1, [r6, #1]
 8006d74:	78f0      	ldrb	r0, [r6, #3]
 8006d76:	78ae      	ldrb	r6, [r5, #2]
 8006d78:	782b      	ldrb	r3, [r5, #0]
 8006d7a:	9601      	str	r6, [sp, #4]
 8006d7c:	786d      	ldrb	r5, [r5, #1]
 8006d7e:	9500      	str	r5, [sp, #0]
 8006d80:	f002 fda2 	bl	80098c8 <ymd_to_epoch>
        uint32_t elapsed = (now_epoch >= start_epoch) ? (now_epoch - start_epoch) : 0u;
 8006d84:	9b05      	ldr	r3, [sp, #20]
 8006d86:	2500      	movs	r5, #0
 8006d88:	4283      	cmp	r3, r0
 8006d8a:	d800      	bhi.n	8006d8e <Check_And_Run_Alarms+0x6a>
 8006d8c:	1ac5      	subs	r5, r0, r3
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006d8e:	0023      	movs	r3, r4
 8006d90:	337a      	adds	r3, #122	@ 0x7a
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	0023      	movs	r3, r4
 8006d96:	337b      	adds	r3, #123	@ 0x7b
 8006d98:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006d9a:	0021      	movs	r1, r4
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	4313      	orrs	r3, r2
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006da0:	0022      	movs	r2, r4
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006da2:	469c      	mov	ip, r3
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006da4:	0023      	movs	r3, r4
 8006da6:	327d      	adds	r2, #125	@ 0x7d
 8006da8:	7812      	ldrb	r2, [r2, #0]
 8006daa:	337c      	adds	r3, #124	@ 0x7c
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	0212      	lsls	r2, r2, #8
 8006db0:	431a      	orrs	r2, r3
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006db2:	0023      	movs	r3, r4
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006db4:	920b      	str	r2, [sp, #44]	@ 0x2c
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006db6:	317f      	adds	r1, #127	@ 0x7f
 8006db8:	780f      	ldrb	r7, [r1, #0]
 8006dba:	337e      	adds	r3, #126	@ 0x7e
 8006dbc:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006dbe:	0021      	movs	r1, r4
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006dc0:	023f      	lsls	r7, r7, #8
 8006dc2:	431f      	orrs	r7, r3
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006dc4:	0023      	movs	r3, r4
 8006dc6:	3181      	adds	r1, #129	@ 0x81
 8006dc8:	780e      	ldrb	r6, [r1, #0]
 8006dca:	3380      	adds	r3, #128	@ 0x80
 8006dcc:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_tl1 = current_settings.alarm_delay_tl1;
 8006dce:	0021      	movs	r1, r4
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006dd0:	0236      	lsls	r6, r6, #8
 8006dd2:	431e      	orrs	r6, r3
        uint16_t d_tl1 = current_settings.alarm_delay_tl1;
 8006dd4:	0023      	movs	r3, r4
 8006dd6:	3183      	adds	r1, #131	@ 0x83
 8006dd8:	7808      	ldrb	r0, [r1, #0]
 8006dda:	3382      	adds	r3, #130	@ 0x82
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	0200      	lsls	r0, r0, #8
 8006de0:	4318      	orrs	r0, r3
        uint16_t d_tl2 = current_settings.alarm_delay_tl2;
 8006de2:	0023      	movs	r3, r4
 8006de4:	3485      	adds	r4, #133	@ 0x85
 8006de6:	7821      	ldrb	r1, [r4, #0]
 8006de8:	3384      	adds	r3, #132	@ 0x84
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	0209      	lsls	r1, r1, #8
 8006dee:	4319      	orrs	r1, r3
        gate_rh1 = (elapsed >= d_rh1);
 8006df0:	2300      	movs	r3, #0
 8006df2:	4662      	mov	r2, ip
 8006df4:	001c      	movs	r4, r3
 8006df6:	4295      	cmp	r5, r2
 8006df8:	415c      	adcs	r4, r3
 8006dfa:	b2e2      	uxtb	r2, r4
        gate_rh2 = (elapsed >= d_rh2);
 8006dfc:	001c      	movs	r4, r3
        gate_rh1 = (elapsed >= d_rh1);
 8006dfe:	9205      	str	r2, [sp, #20]
        gate_rh2 = (elapsed >= d_rh2);
 8006e00:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e02:	4295      	cmp	r5, r2
 8006e04:	415c      	adcs	r4, r3
 8006e06:	b2e2      	uxtb	r2, r4
        gate_th1 = (elapsed >= d_th1);
 8006e08:	001c      	movs	r4, r3
 8006e0a:	42bd      	cmp	r5, r7
 8006e0c:	415c      	adcs	r4, r3
        gate_rh2 = (elapsed >= d_rh2);
 8006e0e:	9206      	str	r2, [sp, #24]
        gate_th1 = (elapsed >= d_th1);
 8006e10:	b2e2      	uxtb	r2, r4
        gate_th2 = (elapsed >= d_th2);
 8006e12:	001c      	movs	r4, r3
 8006e14:	42b5      	cmp	r5, r6
 8006e16:	415c      	adcs	r4, r3
        gate_th1 = (elapsed >= d_th1);
 8006e18:	9207      	str	r2, [sp, #28]
        gate_th2 = (elapsed >= d_th2);
 8006e1a:	b2e2      	uxtb	r2, r4
        gate_tl1 = (elapsed >= d_tl1);
 8006e1c:	001c      	movs	r4, r3
 8006e1e:	4285      	cmp	r5, r0
 8006e20:	415c      	adcs	r4, r3
        gate_tl2 = (elapsed >= d_tl2);
 8006e22:	428d      	cmp	r5, r1
 8006e24:	415b      	adcs	r3, r3
        gate_th2 = (elapsed >= d_th2);
 8006e26:	9208      	str	r2, [sp, #32]
        gate_tl1 = (elapsed >= d_tl1);
 8006e28:	b2e2      	uxtb	r2, r4
 8006e2a:	9209      	str	r2, [sp, #36]	@ 0x24
        if (d_rh2 > dmax) dmax = d_rh2;
 8006e2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        gate_tl2 = (elapsed >= d_tl2);
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	930a      	str	r3, [sp, #40]	@ 0x28
        if (d_rh2 > dmax) dmax = d_rh2;
 8006e32:	4663      	mov	r3, ip
 8006e34:	4594      	cmp	ip, r2
 8006e36:	d201      	bcs.n	8006e3c <Check_And_Run_Alarms+0x118>
 8006e38:	466b      	mov	r3, sp
 8006e3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
        if (d_th1 > dmax) dmax = d_th1;
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	42ba      	cmp	r2, r7
 8006e40:	d200      	bcs.n	8006e44 <Check_And_Run_Alarms+0x120>
 8006e42:	1c3b      	adds	r3, r7, #0
        if (d_th2 > dmax) dmax = d_th2;
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	42b2      	cmp	r2, r6
 8006e48:	d200      	bcs.n	8006e4c <Check_And_Run_Alarms+0x128>
 8006e4a:	1c33      	adds	r3, r6, #0
        if (d_tl1 > dmax) dmax = d_tl1;
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	4282      	cmp	r2, r0
 8006e50:	d200      	bcs.n	8006e54 <Check_And_Run_Alarms+0x130>
 8006e52:	1c03      	adds	r3, r0, #0
        if (d_tl2 > dmax) dmax = d_tl2;
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	428a      	cmp	r2, r1
 8006e58:	d200      	bcs.n	8006e5c <Check_And_Run_Alarms+0x138>
 8006e5a:	1c0b      	adds	r3, r1, #0
 8006e5c:	b29c      	uxth	r4, r3
        if (elapsed >= dmax) {
 8006e5e:	42ac      	cmp	r4, r5
 8006e60:	d900      	bls.n	8006e64 <Check_And_Run_Alarms+0x140>
 8006e62:	e160      	b.n	8007126 <Check_And_Run_Alarms+0x402>
            current_settings.start_time_info_for_alarm = 0xFFFFFFFFu;
 8006e64:	2201      	movs	r2, #1
 8006e66:	4b8e      	ldr	r3, [pc, #568]	@ (80070a0 <Check_And_Run_Alarms+0x37c>)
 8006e68:	498e      	ldr	r1, [pc, #568]	@ (80070a4 <Check_And_Run_Alarms+0x380>)
 8006e6a:	4252      	negs	r2, r2
 8006e6c:	700a      	strb	r2, [r1, #0]
 8006e6e:	0019      	movs	r1, r3
 8006e70:	3169      	adds	r1, #105	@ 0x69
 8006e72:	700a      	strb	r2, [r1, #0]
 8006e74:	0019      	movs	r1, r3
 8006e76:	336b      	adds	r3, #107	@ 0x6b
 8006e78:	316a      	adds	r1, #106	@ 0x6a
 8006e7a:	700a      	strb	r2, [r1, #0]
 8006e7c:	701a      	strb	r2, [r3, #0]
            Save_CurrentSettings(); // 1회 저장
 8006e7e:	f002 fdcb 	bl	8009a18 <Save_CurrentSettings>
            printf("[AlarmDelay] epoch gate done: elapsed=%lu >= %u, sentinel set.\r\n",
 8006e82:	0022      	movs	r2, r4
 8006e84:	0029      	movs	r1, r5
 8006e86:	4889      	ldr	r0, [pc, #548]	@ (80070ac <Check_And_Run_Alarms+0x388>)
 8006e88:	f013 f968 	bl	801a15c <iprintf>
            delay_done_skip = true;
 8006e8c:	2401      	movs	r4, #1
    int16_t  temp_x10 = (int16_t)(Display_temperature * 10.0f);
 8006e8e:	4b88      	ldr	r3, [pc, #544]	@ (80070b0 <Check_And_Run_Alarms+0x38c>)
 8006e90:	4988      	ldr	r1, [pc, #544]	@ (80070b4 <Check_And_Run_Alarms+0x390>)
 8006e92:	681e      	ldr	r6, [r3, #0]
 8006e94:	1c30      	adds	r0, r6, #0
 8006e96:	f7fa f855 	bl	8000f44 <__aeabi_fmul>
 8006e9a:	f7fa fc27 	bl	80016ec <__aeabi_f2iz>
    uint16_t dose_now = dose_log;
 8006e9e:	4b86      	ldr	r3, [pc, #536]	@ (80070b8 <Check_And_Run_Alarms+0x394>)
    int16_t  temp_x10 = (int16_t)(Display_temperature * 10.0f);
 8006ea0:	b205      	sxth	r5, r0
    printf("[Alarm Debug] temp_avg=%.2f (x10=%d), dose=%u\r\n",
 8006ea2:	681f      	ldr	r7, [r3, #0]
 8006ea4:	1c30      	adds	r0, r6, #0
 8006ea6:	b2bb      	uxth	r3, r7
 8006ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eaa:	f7fc fc75 	bl	8003798 <__aeabi_f2d>
 8006eae:	000b      	movs	r3, r1
 8006eb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eb2:	0002      	movs	r2, r0
 8006eb4:	9101      	str	r1, [sp, #4]
 8006eb6:	4881      	ldr	r0, [pc, #516]	@ (80070bc <Check_And_Run_Alarms+0x398>)
 8006eb8:	9500      	str	r5, [sp, #0]
 8006eba:	f013 f94f 	bl	801a15c <iprintf>
    if (delay_done_skip || gate_rh1) {
 8006ebe:	9b05      	ldr	r3, [sp, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <Check_And_Run_Alarms+0x1a6>
 8006ec4:	2c00      	cmp	r4, #0
 8006ec6:	d100      	bne.n	8006eca <Check_And_Run_Alarms+0x1a6>
 8006ec8:	e14f      	b.n	800716a <Check_And_Run_Alarms+0x446>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1);
 8006eca:	487d      	ldr	r0, [pc, #500]	@ (80070c0 <Check_And_Run_Alarms+0x39c>)
 8006ecc:	6982      	ldr	r2, [r0, #24]
 8006ece:	0591      	lsls	r1, r2, #22
 8006ed0:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006ed2:	2902      	cmp	r1, #2
 8006ed4:	d023      	beq.n	8006f1e <Check_And_Run_Alarms+0x1fa>
            if (dose_now >= current_settings.alarm_rh1) {
 8006ed6:	4e7b      	ldr	r6, [pc, #492]	@ (80070c4 <Check_And_Run_Alarms+0x3a0>)
 8006ed8:	4b71      	ldr	r3, [pc, #452]	@ (80070a0 <Check_And_Run_Alarms+0x37c>)
 8006eda:	7836      	ldrb	r6, [r6, #0]
 8006edc:	46b4      	mov	ip, r6
 8006ede:	001e      	movs	r6, r3
 8006ee0:	4667      	mov	r7, ip
 8006ee2:	3692      	adds	r6, #146	@ 0x92
 8006ee4:	7836      	ldrb	r6, [r6, #0]
 8006ee6:	0236      	lsls	r6, r6, #8
 8006ee8:	4337      	orrs	r7, r6
 8006eea:	001e      	movs	r6, r3
 8006eec:	3693      	adds	r6, #147	@ 0x93
 8006eee:	7836      	ldrb	r6, [r6, #0]
 8006ef0:	3394      	adds	r3, #148	@ 0x94
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	0436      	lsls	r6, r6, #16
 8006ef6:	061b      	lsls	r3, r3, #24
 8006ef8:	433e      	orrs	r6, r7
 8006efa:	431e      	orrs	r6, r3
 8006efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006efe:	429e      	cmp	r6, r3
 8006f00:	d900      	bls.n	8006f04 <Check_And_Run_Alarms+0x1e0>
 8006f02:	e128      	b.n	8007156 <Check_And_Run_Alarms+0x432>
                if (st != ALARM_ON) {
 8006f04:	2901      	cmp	r1, #1
 8006f06:	d00a      	beq.n	8006f1e <Check_And_Run_Alarms+0x1fa>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, ALARM_ON);
 8006f08:	4b6f      	ldr	r3, [pc, #444]	@ (80070c8 <Check_And_Run_Alarms+0x3a4>)
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	2380      	movs	r3, #128	@ 0x80
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006f14:	f7ff f98e 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High1 -> ON\r\n");
 8006f18:	486c      	ldr	r0, [pc, #432]	@ (80070cc <Check_And_Run_Alarms+0x3a8>)
        printf("[AlarmDelay] RH1 waiting...\r\n");
 8006f1a:	f013 f98f 	bl	801a23c <puts>
    if (delay_done_skip || gate_rh2) {
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <Check_And_Run_Alarms+0x206>
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	d100      	bne.n	8006f2a <Check_And_Run_Alarms+0x206>
 8006f28:	e12b      	b.n	8007182 <Check_And_Run_Alarms+0x45e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2);
 8006f2a:	4865      	ldr	r0, [pc, #404]	@ (80070c0 <Check_And_Run_Alarms+0x39c>)
 8006f2c:	6982      	ldr	r2, [r0, #24]
 8006f2e:	0511      	lsls	r1, r2, #20
 8006f30:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006f32:	2902      	cmp	r1, #2
 8006f34:	d023      	beq.n	8006f7e <Check_And_Run_Alarms+0x25a>
            if (dose_now >= current_settings.alarm_rh2) {
 8006f36:	4e66      	ldr	r6, [pc, #408]	@ (80070d0 <Check_And_Run_Alarms+0x3ac>)
 8006f38:	4b59      	ldr	r3, [pc, #356]	@ (80070a0 <Check_And_Run_Alarms+0x37c>)
 8006f3a:	7836      	ldrb	r6, [r6, #0]
 8006f3c:	46b4      	mov	ip, r6
 8006f3e:	001e      	movs	r6, r3
 8006f40:	4667      	mov	r7, ip
 8006f42:	369a      	adds	r6, #154	@ 0x9a
 8006f44:	7836      	ldrb	r6, [r6, #0]
 8006f46:	0236      	lsls	r6, r6, #8
 8006f48:	4337      	orrs	r7, r6
 8006f4a:	001e      	movs	r6, r3
 8006f4c:	369b      	adds	r6, #155	@ 0x9b
 8006f4e:	7836      	ldrb	r6, [r6, #0]
 8006f50:	339c      	adds	r3, #156	@ 0x9c
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	0436      	lsls	r6, r6, #16
 8006f56:	061b      	lsls	r3, r3, #24
 8006f58:	433e      	orrs	r6, r7
 8006f5a:	431e      	orrs	r6, r3
 8006f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f5e:	429e      	cmp	r6, r3
 8006f60:	d900      	bls.n	8006f64 <Check_And_Run_Alarms+0x240>
 8006f62:	e104      	b.n	800716e <Check_And_Run_Alarms+0x44a>
                if (st != ALARM_ON) {
 8006f64:	2901      	cmp	r1, #1
 8006f66:	d00a      	beq.n	8006f7e <Check_And_Run_Alarms+0x25a>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, ALARM_ON);
 8006f68:	4b5a      	ldr	r3, [pc, #360]	@ (80070d4 <Check_And_Run_Alarms+0x3b0>)
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	2380      	movs	r3, #128	@ 0x80
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006f74:	f7ff f95e 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High2 -> ON\r\n");
 8006f78:	4857      	ldr	r0, [pc, #348]	@ (80070d8 <Check_And_Run_Alarms+0x3b4>)
        printf("[AlarmDelay] RH2 waiting...\r\n");
 8006f7a:	f013 f95f 	bl	801a23c <puts>
    if (delay_done_skip || gate_th1) {
 8006f7e:	9b07      	ldr	r3, [sp, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <Check_And_Run_Alarms+0x266>
 8006f84:	2c00      	cmp	r4, #0
 8006f86:	d100      	bne.n	8006f8a <Check_And_Run_Alarms+0x266>
 8006f88:	e107      	b.n	800719a <Check_And_Run_Alarms+0x476>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1);
 8006f8a:	484d      	ldr	r0, [pc, #308]	@ (80070c0 <Check_And_Run_Alarms+0x39c>)
 8006f8c:	6982      	ldr	r2, [r0, #24]
 8006f8e:	0491      	lsls	r1, r2, #18
 8006f90:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006f92:	2902      	cmp	r1, #2
 8006f94:	d017      	beq.n	8006fc6 <Check_And_Run_Alarms+0x2a2>
            if (temp_x10 >= current_settings.alarm_th1) {
 8006f96:	4b51      	ldr	r3, [pc, #324]	@ (80070dc <Check_And_Run_Alarms+0x3b8>)
 8006f98:	781e      	ldrb	r6, [r3, #0]
 8006f9a:	4b51      	ldr	r3, [pc, #324]	@ (80070e0 <Check_And_Run_Alarms+0x3bc>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	4333      	orrs	r3, r6
 8006fa2:	041b      	lsls	r3, r3, #16
 8006fa4:	141b      	asrs	r3, r3, #16
 8006fa6:	42ab      	cmp	r3, r5
 8006fa8:	dd00      	ble.n	8006fac <Check_And_Run_Alarms+0x288>
 8006faa:	e0ec      	b.n	8007186 <Check_And_Run_Alarms+0x462>
                if (st != ALARM_ON) {
 8006fac:	2901      	cmp	r1, #1
 8006fae:	d00a      	beq.n	8006fc6 <Check_And_Run_Alarms+0x2a2>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, ALARM_ON);
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80070e4 <Check_And_Run_Alarms+0x3c0>)
 8006fb2:	401a      	ands	r2, r3
 8006fb4:	2380      	movs	r3, #128	@ 0x80
 8006fb6:	015b      	lsls	r3, r3, #5
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006fbc:	f7ff f93a 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High1 -> ON\r\n");
 8006fc0:	4849      	ldr	r0, [pc, #292]	@ (80070e8 <Check_And_Run_Alarms+0x3c4>)
        printf("[AlarmDelay] TH1 waiting...\r\n");
 8006fc2:	f013 f93b 	bl	801a23c <puts>
    if (delay_done_skip || gate_th2) {
 8006fc6:	9b08      	ldr	r3, [sp, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <Check_And_Run_Alarms+0x2ae>
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d100      	bne.n	8006fd2 <Check_And_Run_Alarms+0x2ae>
 8006fd0:	e0ef      	b.n	80071b2 <Check_And_Run_Alarms+0x48e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2);
 8006fd2:	483b      	ldr	r0, [pc, #236]	@ (80070c0 <Check_And_Run_Alarms+0x39c>)
 8006fd4:	6982      	ldr	r2, [r0, #24]
 8006fd6:	0411      	lsls	r1, r2, #16
 8006fd8:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006fda:	2902      	cmp	r1, #2
 8006fdc:	d017      	beq.n	800700e <Check_And_Run_Alarms+0x2ea>
            if (temp_x10 >= current_settings.alarm_th2) {
 8006fde:	4b43      	ldr	r3, [pc, #268]	@ (80070ec <Check_And_Run_Alarms+0x3c8>)
 8006fe0:	781e      	ldrb	r6, [r3, #0]
 8006fe2:	4b43      	ldr	r3, [pc, #268]	@ (80070f0 <Check_And_Run_Alarms+0x3cc>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	4333      	orrs	r3, r6
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	141b      	asrs	r3, r3, #16
 8006fee:	42ab      	cmp	r3, r5
 8006ff0:	dd00      	ble.n	8006ff4 <Check_And_Run_Alarms+0x2d0>
 8006ff2:	e0d4      	b.n	800719e <Check_And_Run_Alarms+0x47a>
                if (st != ALARM_ON) {
 8006ff4:	2901      	cmp	r1, #1
 8006ff6:	d00a      	beq.n	800700e <Check_And_Run_Alarms+0x2ea>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, ALARM_ON);
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80070f4 <Check_And_Run_Alarms+0x3d0>)
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	2380      	movs	r3, #128	@ 0x80
 8006ffe:	01db      	lsls	r3, r3, #7
 8007000:	4313      	orrs	r3, r2
 8007002:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007004:	f7ff f916 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High2 -> ON\r\n");
 8007008:	483b      	ldr	r0, [pc, #236]	@ (80070f8 <Check_And_Run_Alarms+0x3d4>)
        printf("[AlarmDelay] TH2 waiting...\r\n");
 800700a:	f013 f917 	bl	801a23c <puts>
    if (delay_done_skip || gate_tl1) {
 800700e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <Check_And_Run_Alarms+0x2f6>
 8007014:	2c00      	cmp	r4, #0
 8007016:	d100      	bne.n	800701a <Check_And_Run_Alarms+0x2f6>
 8007018:	e0d7      	b.n	80071ca <Check_And_Run_Alarms+0x4a6>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1);
 800701a:	4829      	ldr	r0, [pc, #164]	@ (80070c0 <Check_And_Run_Alarms+0x39c>)
 800701c:	6982      	ldr	r2, [r0, #24]
 800701e:	0391      	lsls	r1, r2, #14
 8007020:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8007022:	2902      	cmp	r1, #2
 8007024:	d017      	beq.n	8007056 <Check_And_Run_Alarms+0x332>
            if (temp_x10 <= current_settings.alarm_tl1) {
 8007026:	4b35      	ldr	r3, [pc, #212]	@ (80070fc <Check_And_Run_Alarms+0x3d8>)
 8007028:	781e      	ldrb	r6, [r3, #0]
 800702a:	4b35      	ldr	r3, [pc, #212]	@ (8007100 <Check_And_Run_Alarms+0x3dc>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	4333      	orrs	r3, r6
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	141b      	asrs	r3, r3, #16
 8007036:	42ab      	cmp	r3, r5
 8007038:	da00      	bge.n	800703c <Check_And_Run_Alarms+0x318>
 800703a:	e0bc      	b.n	80071b6 <Check_And_Run_Alarms+0x492>
                if (st != ALARM_ON) {
 800703c:	2901      	cmp	r1, #1
 800703e:	d00a      	beq.n	8007056 <Check_And_Run_Alarms+0x332>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_ON);
 8007040:	4b30      	ldr	r3, [pc, #192]	@ (8007104 <Check_And_Run_Alarms+0x3e0>)
 8007042:	401a      	ands	r2, r3
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	025b      	lsls	r3, r3, #9
 8007048:	4313      	orrs	r3, r2
 800704a:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 800704c:	f7ff f8f2 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low1 -> ON\r\n");
 8007050:	482d      	ldr	r0, [pc, #180]	@ (8007108 <Check_And_Run_Alarms+0x3e4>)
        printf("[AlarmDelay] TL1 waiting...\r\n");
 8007052:	f013 f8f3 	bl	801a23c <puts>
    if (delay_done_skip || gate_tl2) {
 8007056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <Check_And_Run_Alarms+0x33e>
 800705c:	2c00      	cmp	r4, #0
 800705e:	d100      	bne.n	8007062 <Check_And_Run_Alarms+0x33e>
 8007060:	e0be      	b.n	80071e0 <Check_And_Run_Alarms+0x4bc>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2);
 8007062:	4817      	ldr	r0, [pc, #92]	@ (80070c0 <Check_And_Run_Alarms+0x39c>)
 8007064:	6982      	ldr	r2, [r0, #24]
 8007066:	0311      	lsls	r1, r2, #12
 8007068:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 800706a:	2902      	cmp	r1, #2
 800706c:	d056      	beq.n	800711c <Check_And_Run_Alarms+0x3f8>
            if (temp_x10 <= current_settings.alarm_tl2) {
 800706e:	4b27      	ldr	r3, [pc, #156]	@ (800710c <Check_And_Run_Alarms+0x3e8>)
 8007070:	781c      	ldrb	r4, [r3, #0]
 8007072:	4b27      	ldr	r3, [pc, #156]	@ (8007110 <Check_And_Run_Alarms+0x3ec>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	4323      	orrs	r3, r4
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	141b      	asrs	r3, r3, #16
 800707e:	42ab      	cmp	r3, r5
 8007080:	da00      	bge.n	8007084 <Check_And_Run_Alarms+0x360>
 8007082:	e0a4      	b.n	80071ce <Check_And_Run_Alarms+0x4aa>
                if (st != ALARM_ON) {
 8007084:	2901      	cmp	r1, #1
 8007086:	d049      	beq.n	800711c <Check_And_Run_Alarms+0x3f8>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, ALARM_ON);
 8007088:	4b22      	ldr	r3, [pc, #136]	@ (8007114 <Check_And_Run_Alarms+0x3f0>)
 800708a:	401a      	ands	r2, r3
 800708c:	2380      	movs	r3, #128	@ 0x80
 800708e:	02db      	lsls	r3, r3, #11
 8007090:	4313      	orrs	r3, r2
 8007092:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007094:	f7ff f8ce 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low2 -> ON\r\n");
 8007098:	481f      	ldr	r0, [pc, #124]	@ (8007118 <Check_And_Run_Alarms+0x3f4>)
        printf("[AlarmDelay] TL2 waiting...\r\n");
 800709a:	f013 f8cf 	bl	801a23c <puts>
 800709e:	e03d      	b.n	800711c <Check_And_Run_Alarms+0x3f8>
 80070a0:	20002bac 	.word	0x20002bac
 80070a4:	20002c14 	.word	0x20002c14
 80070a8:	200009f8 	.word	0x200009f8
 80070ac:	0801d587 	.word	0x0801d587
 80070b0:	20000544 	.word	0x20000544
 80070b4:	41200000 	.word	0x41200000
 80070b8:	20000530 	.word	0x20000530
 80070bc:	0801d611 	.word	0x0801d611
 80070c0:	20000b50 	.word	0x20000b50
 80070c4:	20002c3d 	.word	0x20002c3d
 80070c8:	fffffcff 	.word	0xfffffcff
 80070cc:	0801d641 	.word	0x0801d641
 80070d0:	20002c45 	.word	0x20002c45
 80070d4:	fffff3ff 	.word	0xfffff3ff
 80070d8:	0801d69d 	.word	0x0801d69d
 80070dc:	20002c41 	.word	0x20002c41
 80070e0:	20002c42 	.word	0x20002c42
 80070e4:	ffffcfff 	.word	0xffffcfff
 80070e8:	0801d6f9 	.word	0x0801d6f9
 80070ec:	20002c49 	.word	0x20002c49
 80070f0:	20002c4a 	.word	0x20002c4a
 80070f4:	ffff3fff 	.word	0xffff3fff
 80070f8:	0801d74b 	.word	0x0801d74b
 80070fc:	20002c43 	.word	0x20002c43
 8007100:	20002c44 	.word	0x20002c44
 8007104:	fffcffff 	.word	0xfffcffff
 8007108:	0801d79d 	.word	0x0801d79d
 800710c:	20002c4b 	.word	0x20002c4b
 8007110:	20002c4c 	.word	0x20002c4c
 8007114:	fff3ffff 	.word	0xfff3ffff
 8007118:	0801d7ed 	.word	0x0801d7ed
    printf("[Debug] Check_And_Run_Alarms: End\r\n");
 800711c:	4831      	ldr	r0, [pc, #196]	@ (80071e4 <Check_And_Run_Alarms+0x4c0>)
 800711e:	f013 f88d 	bl	801a23c <puts>
}
 8007122:	b013      	add	sp, #76	@ 0x4c
 8007124:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("[AlarmDelay] elapsed=%lu(s)  RH1:%u RH2:%u TH1:%u TH2:%u TL1:%u TL2:%u\r\n",
 8007126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007128:	0029      	movs	r1, r5
 800712a:	9303      	str	r3, [sp, #12]
 800712c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712e:	482e      	ldr	r0, [pc, #184]	@ (80071e8 <Check_And_Run_Alarms+0x4c4>)
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	9a05      	ldr	r2, [sp, #20]
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	9b07      	ldr	r3, [sp, #28]
    bool delay_done_skip = false;
 800713a:	2400      	movs	r4, #0
            printf("[AlarmDelay] elapsed=%lu(s)  RH1:%u RH2:%u TH1:%u TH2:%u TL1:%u TL2:%u\r\n",
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	9b06      	ldr	r3, [sp, #24]
 8007140:	f013 f80c 	bl	801a15c <iprintf>
 8007144:	e6a3      	b.n	8006e8e <Check_And_Run_Alarms+0x16a>
        delay_done_skip = true;
 8007146:	2401      	movs	r4, #1
    bool gate_rh1 = true, gate_rh2 = true, gate_th1 = true, gate_th2 = true, gate_tl1 = true, gate_tl2 = true;
 8007148:	940a      	str	r4, [sp, #40]	@ 0x28
 800714a:	9409      	str	r4, [sp, #36]	@ 0x24
 800714c:	9408      	str	r4, [sp, #32]
 800714e:	9407      	str	r4, [sp, #28]
 8007150:	9406      	str	r4, [sp, #24]
 8007152:	9405      	str	r4, [sp, #20]
 8007154:	e69b      	b.n	8006e8e <Check_And_Run_Alarms+0x16a>
                if (st != ALARM_OFF) {
 8007156:	2900      	cmp	r1, #0
 8007158:	d100      	bne.n	800715c <Check_And_Run_Alarms+0x438>
 800715a:	e6e0      	b.n	8006f1e <Check_And_Run_Alarms+0x1fa>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, ALARM_OFF);
 800715c:	4b23      	ldr	r3, [pc, #140]	@ (80071ec <Check_And_Run_Alarms+0x4c8>)
 800715e:	401a      	ands	r2, r3
 8007160:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007162:	f7ff f867 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High1 -> OFF\r\n");
 8007166:	4822      	ldr	r0, [pc, #136]	@ (80071f0 <Check_And_Run_Alarms+0x4cc>)
 8007168:	e6d7      	b.n	8006f1a <Check_And_Run_Alarms+0x1f6>
        printf("[AlarmDelay] RH1 waiting...\r\n");
 800716a:	4822      	ldr	r0, [pc, #136]	@ (80071f4 <Check_And_Run_Alarms+0x4d0>)
 800716c:	e6d5      	b.n	8006f1a <Check_And_Run_Alarms+0x1f6>
                if (st != ALARM_OFF) {
 800716e:	2900      	cmp	r1, #0
 8007170:	d100      	bne.n	8007174 <Check_And_Run_Alarms+0x450>
 8007172:	e704      	b.n	8006f7e <Check_And_Run_Alarms+0x25a>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, ALARM_OFF);
 8007174:	4b20      	ldr	r3, [pc, #128]	@ (80071f8 <Check_And_Run_Alarms+0x4d4>)
 8007176:	401a      	ands	r2, r3
 8007178:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 800717a:	f7ff f85b 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High2 -> OFF\r\n");
 800717e:	481f      	ldr	r0, [pc, #124]	@ (80071fc <Check_And_Run_Alarms+0x4d8>)
 8007180:	e6fb      	b.n	8006f7a <Check_And_Run_Alarms+0x256>
        printf("[AlarmDelay] RH2 waiting...\r\n");
 8007182:	481f      	ldr	r0, [pc, #124]	@ (8007200 <Check_And_Run_Alarms+0x4dc>)
 8007184:	e6f9      	b.n	8006f7a <Check_And_Run_Alarms+0x256>
                if (st != ALARM_OFF) {
 8007186:	2900      	cmp	r1, #0
 8007188:	d100      	bne.n	800718c <Check_And_Run_Alarms+0x468>
 800718a:	e71c      	b.n	8006fc6 <Check_And_Run_Alarms+0x2a2>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, ALARM_OFF);
 800718c:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <Check_And_Run_Alarms+0x4e0>)
 800718e:	401a      	ands	r2, r3
 8007190:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007192:	f7ff f84f 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High1 -> OFF\r\n");
 8007196:	481c      	ldr	r0, [pc, #112]	@ (8007208 <Check_And_Run_Alarms+0x4e4>)
 8007198:	e713      	b.n	8006fc2 <Check_And_Run_Alarms+0x29e>
        printf("[AlarmDelay] TH1 waiting...\r\n");
 800719a:	481c      	ldr	r0, [pc, #112]	@ (800720c <Check_And_Run_Alarms+0x4e8>)
 800719c:	e711      	b.n	8006fc2 <Check_And_Run_Alarms+0x29e>
                if (st != ALARM_OFF) {
 800719e:	2900      	cmp	r1, #0
 80071a0:	d100      	bne.n	80071a4 <Check_And_Run_Alarms+0x480>
 80071a2:	e734      	b.n	800700e <Check_And_Run_Alarms+0x2ea>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, ALARM_OFF);
 80071a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007210 <Check_And_Run_Alarms+0x4ec>)
 80071a6:	401a      	ands	r2, r3
 80071a8:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 80071aa:	f7ff f843 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High2 -> OFF\r\n");
 80071ae:	4819      	ldr	r0, [pc, #100]	@ (8007214 <Check_And_Run_Alarms+0x4f0>)
 80071b0:	e72b      	b.n	800700a <Check_And_Run_Alarms+0x2e6>
        printf("[AlarmDelay] TH2 waiting...\r\n");
 80071b2:	4819      	ldr	r0, [pc, #100]	@ (8007218 <Check_And_Run_Alarms+0x4f4>)
 80071b4:	e729      	b.n	800700a <Check_And_Run_Alarms+0x2e6>
                if (st != ALARM_OFF) {
 80071b6:	2900      	cmp	r1, #0
 80071b8:	d100      	bne.n	80071bc <Check_And_Run_Alarms+0x498>
 80071ba:	e74c      	b.n	8007056 <Check_And_Run_Alarms+0x332>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_OFF);
 80071bc:	4b17      	ldr	r3, [pc, #92]	@ (800721c <Check_And_Run_Alarms+0x4f8>)
 80071be:	401a      	ands	r2, r3
 80071c0:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 80071c2:	f7ff f837 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low1 -> OFF\r\n");
 80071c6:	4816      	ldr	r0, [pc, #88]	@ (8007220 <Check_And_Run_Alarms+0x4fc>)
 80071c8:	e743      	b.n	8007052 <Check_And_Run_Alarms+0x32e>
        printf("[AlarmDelay] TL1 waiting...\r\n");
 80071ca:	4816      	ldr	r0, [pc, #88]	@ (8007224 <Check_And_Run_Alarms+0x500>)
 80071cc:	e741      	b.n	8007052 <Check_And_Run_Alarms+0x32e>
                if (st != ALARM_OFF) {
 80071ce:	2900      	cmp	r1, #0
 80071d0:	d0a4      	beq.n	800711c <Check_And_Run_Alarms+0x3f8>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, ALARM_OFF);
 80071d2:	4b15      	ldr	r3, [pc, #84]	@ (8007228 <Check_And_Run_Alarms+0x504>)
 80071d4:	401a      	ands	r2, r3
 80071d6:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 80071d8:	f7ff f82c 	bl	8006234 <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low2 -> OFF\r\n");
 80071dc:	4813      	ldr	r0, [pc, #76]	@ (800722c <Check_And_Run_Alarms+0x508>)
 80071de:	e75c      	b.n	800709a <Check_And_Run_Alarms+0x376>
        printf("[AlarmDelay] TL2 waiting...\r\n");
 80071e0:	4813      	ldr	r0, [pc, #76]	@ (8007230 <Check_And_Run_Alarms+0x50c>)
 80071e2:	e75a      	b.n	800709a <Check_And_Run_Alarms+0x376>
 80071e4:	0801d83d 	.word	0x0801d83d
 80071e8:	0801d5c8 	.word	0x0801d5c8
 80071ec:	fffffcff 	.word	0xfffffcff
 80071f0:	0801d660 	.word	0x0801d660
 80071f4:	0801d680 	.word	0x0801d680
 80071f8:	fffff3ff 	.word	0xfffff3ff
 80071fc:	0801d6bc 	.word	0x0801d6bc
 8007200:	0801d6dc 	.word	0x0801d6dc
 8007204:	ffffcfff 	.word	0xffffcfff
 8007208:	0801d713 	.word	0x0801d713
 800720c:	0801d72e 	.word	0x0801d72e
 8007210:	ffff3fff 	.word	0xffff3fff
 8007214:	0801d765 	.word	0x0801d765
 8007218:	0801d780 	.word	0x0801d780
 800721c:	fffcffff 	.word	0xfffcffff
 8007220:	0801d7b6 	.word	0x0801d7b6
 8007224:	0801d7d0 	.word	0x0801d7d0
 8007228:	fff3ffff 	.word	0xfff3ffff
 800722c:	0801d806 	.word	0x0801d806
 8007230:	0801d820 	.word	0x0801d820

08007234 <Interval_Measure>:
void Interval_Measure(void){
 8007234:	b5f0      	push	{r4, r5, r6, r7, lr}
	 if (measure_Rad_flag) {
 8007236:	4b60      	ldr	r3, [pc, #384]	@ (80073b8 <Interval_Measure+0x184>)
void Interval_Measure(void){
 8007238:	b085      	sub	sp, #20
	 if (measure_Rad_flag) {
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	4c5f      	ldr	r4, [pc, #380]	@ (80073bc <Interval_Measure+0x188>)
 800723e:	b2da      	uxtb	r2, r3
 8007240:	9201      	str	r2, [sp, #4]
 8007242:	4a5f      	ldr	r2, [pc, #380]	@ (80073c0 <Interval_Measure+0x18c>)
 8007244:	9202      	str	r2, [sp, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d100      	bne.n	800724c <Interval_Measure+0x18>
 800724a:	e068      	b.n	800731e <Interval_Measure+0xea>
	Count_Filter_Kalman();
 800724c:	f7fe fd68 	bl	8005d20 <Count_Filter_Kalman>
	printf("Tick_Save : %lu, Interval_LCD_Count : %lu\r\n", Tick_Save, Interval_LCD_Count);
 8007250:	4d5c      	ldr	r5, [pc, #368]	@ (80073c4 <Interval_Measure+0x190>)
 8007252:	6821      	ldr	r1, [r4, #0]
 8007254:	682a      	ldr	r2, [r5, #0]
 8007256:	485c      	ldr	r0, [pc, #368]	@ (80073c8 <Interval_Measure+0x194>)
 8007258:	f012 ff80 	bl	801a15c <iprintf>
	if (Check_And_Save_When_Target_Reached() && Interval_LCD_Count == 0){
 800725c:	f7fe fcf6 	bl	8005c4c <Check_And_Save_When_Target_Reached>
 8007260:	2800      	cmp	r0, #0
 8007262:	d02e      	beq.n	80072c2 <Interval_Measure+0x8e>
 8007264:	682f      	ldr	r7, [r5, #0]
 8007266:	2f00      	cmp	r7, #0
 8007268:	d12b      	bne.n	80072c2 <Interval_Measure+0x8e>
		printf("Get in Timer Shut Down\r\n");
 800726a:	4858      	ldr	r0, [pc, #352]	@ (80073cc <Interval_Measure+0x198>)
 800726c:	f012 ffe6 	bl	801a23c <puts>
		Read_Temp();
 8007270:	f7fe f9be 	bl	80055f0 <Read_Temp>
		Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 8007274:	4e56      	ldr	r6, [pc, #344]	@ (80073d0 <Interval_Measure+0x19c>)
 8007276:	4d57      	ldr	r5, [pc, #348]	@ (80073d4 <Interval_Measure+0x1a0>)
 8007278:	4a57      	ldr	r2, [pc, #348]	@ (80073d8 <Interval_Measure+0x1a4>)
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	6828      	ldr	r0, [r5, #0]
 800727e:	f7ff f9b7 	bl	80065f0 <Update_TempDose_MinMax>
		Check_And_Run_Alarms(Display_temperature, dose_log);
 8007282:	6831      	ldr	r1, [r6, #0]
 8007284:	6828      	ldr	r0, [r5, #0]
 8007286:	f7ff fd4d 	bl	8006d24 <Check_And_Run_Alarms>
	    Write_buffer();
 800728a:	f7ff fa83 	bl	8006794 <Write_buffer>
	    rad_interval_count = rad_ratio - 1;     // 카운터 리셋
 800728e:	4a53      	ldr	r2, [pc, #332]	@ (80073dc <Interval_Measure+0x1a8>)
 8007290:	4b53      	ldr	r3, [pc, #332]	@ (80073e0 <Interval_Measure+0x1ac>)
 8007292:	8812      	ldrh	r2, [r2, #0]
 8007294:	3a01      	subs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
	    idx_temp++;
 8007298:	4a52      	ldr	r2, [pc, #328]	@ (80073e4 <Interval_Measure+0x1b0>)
 800729a:	8813      	ldrh	r3, [r2, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	8013      	strh	r3, [r2, #0]
	    idx_rad++;
 80072a0:	4a51      	ldr	r2, [pc, #324]	@ (80073e8 <Interval_Measure+0x1b4>)
 80072a2:	8813      	ldrh	r3, [r2, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	8013      	strh	r3, [r2, #0]
	    Save_Backup_Index();
 80072a8:	f7fe ff74 	bl	8006194 <Save_Backup_Index>
	    Get_in_Shutdown_Timer();
 80072ac:	f7fe fe98 	bl	8005fe0 <Get_in_Shutdown_Timer>
	    Tick_Save = 0;
 80072b0:	6027      	str	r7, [r4, #0]
			 comp1_count = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	9a02      	ldr	r2, [sp, #8]
 80072b6:	6013      	str	r3, [r2, #0]
			 Tick_Save++;
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	3301      	adds	r3, #1
	 Tick_Save++;
 80072bc:	6023      	str	r3, [r4, #0]
}
 80072be:	b005      	add	sp, #20
 80072c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Check_And_Save_When_Target_Reached() && Interval_LCD_Count>0) {
 80072c2:	f7fe fcc3 	bl	8005c4c <Check_And_Save_When_Target_Reached>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d0f3      	beq.n	80072b2 <Interval_Measure+0x7e>
 80072ca:	682b      	ldr	r3, [r5, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <Interval_Measure+0x7e>
		printf("Start Timer & No shutdown\r\n");
 80072d0:	4846      	ldr	r0, [pc, #280]	@ (80073ec <Interval_Measure+0x1b8>)
 80072d2:	f012 ffb3 	bl	801a23c <puts>
		Read_Temp();
 80072d6:	f7fe f98b 	bl	80055f0 <Read_Temp>
		Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 80072da:	4e3d      	ldr	r6, [pc, #244]	@ (80073d0 <Interval_Measure+0x19c>)
 80072dc:	4d3d      	ldr	r5, [pc, #244]	@ (80073d4 <Interval_Measure+0x1a0>)
 80072de:	4a3e      	ldr	r2, [pc, #248]	@ (80073d8 <Interval_Measure+0x1a4>)
 80072e0:	6831      	ldr	r1, [r6, #0]
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	f7ff f984 	bl	80065f0 <Update_TempDose_MinMax>
		Check_And_Run_Alarms(Display_temperature, dose_log);
 80072e8:	6831      	ldr	r1, [r6, #0]
 80072ea:	6828      	ldr	r0, [r5, #0]
 80072ec:	f7ff fd1a 	bl	8006d24 <Check_And_Run_Alarms>
	    Write_buffer();
 80072f0:	f7ff fa50 	bl	8006794 <Write_buffer>
	    rad_interval_count = rad_ratio - 1;     // 카운터 리셋
 80072f4:	4a39      	ldr	r2, [pc, #228]	@ (80073dc <Interval_Measure+0x1a8>)
 80072f6:	4b3a      	ldr	r3, [pc, #232]	@ (80073e0 <Interval_Measure+0x1ac>)
 80072f8:	8812      	ldrh	r2, [r2, #0]
 80072fa:	3a01      	subs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]
	    idx_temp++;
 80072fe:	4a39      	ldr	r2, [pc, #228]	@ (80073e4 <Interval_Measure+0x1b0>)
 8007300:	8813      	ldrh	r3, [r2, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	8013      	strh	r3, [r2, #0]
	    idx_rad++;
 8007306:	4a38      	ldr	r2, [pc, #224]	@ (80073e8 <Interval_Measure+0x1b4>)
			    idx_temp++;
 8007308:	8813      	ldrh	r3, [r2, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	8013      	strh	r3, [r2, #0]
			    Save_Backup_Index();
 800730e:	f7fe ff41 	bl	8006194 <Save_Backup_Index>
				Switch_Backup_reg(MODE_Start_Button);
 8007312:	2005      	movs	r0, #5
 8007314:	f7fe fe24 	bl	8005f60 <Switch_Backup_reg>
				Start_Wake_Timer();
 8007318:	f7fe febc 	bl	8006094 <Start_Wake_Timer>
 800731c:	e7c9      	b.n	80072b2 <Interval_Measure+0x7e>
		 if(Check_And_Save_When_Target_Reached()){
 800731e:	f7fe fc95 	bl	8005c4c <Check_And_Save_When_Target_Reached>
 8007322:	2800      	cmp	r0, #0
 8007324:	d0c5      	beq.n	80072b2 <Interval_Measure+0x7e>
		 Read_Temp();
 8007326:	f7fe f963 	bl	80055f0 <Read_Temp>
		 PrintCurrentRTC();
 800732a:	f7fe fc49 	bl	8005bc0 <PrintCurrentRTC>
		 dose_log = 0x0000;
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	4d27      	ldr	r5, [pc, #156]	@ (80073d0 <Interval_Measure+0x19c>)
		 printf("[Debug] Display_temperature = %.2f°C\n", Display_temperature);
 8007332:	4f28      	ldr	r7, [pc, #160]	@ (80073d4 <Interval_Measure+0x1a0>)
		 dose_log = 0x0000;
 8007334:	602b      	str	r3, [r5, #0]
		 printf("[Debug] Display_temperature = %.2f°C\n", Display_temperature);
 8007336:	6838      	ldr	r0, [r7, #0]
 8007338:	f7fc fa2e 	bl	8003798 <__aeabi_f2d>
 800733c:	000b      	movs	r3, r1
 800733e:	0002      	movs	r2, r0
 8007340:	482b      	ldr	r0, [pc, #172]	@ (80073f0 <Interval_Measure+0x1bc>)
 8007342:	f012 ff0b 	bl	801a15c <iprintf>
		 Check_And_Run_Alarms(Display_temperature, dose_log);
 8007346:	6829      	ldr	r1, [r5, #0]
 8007348:	6838      	ldr	r0, [r7, #0]
 800734a:	f7ff fceb 	bl	8006d24 <Check_And_Run_Alarms>
			if (Interval_LCD_Count == 0){
 800734e:	4b1d      	ldr	r3, [pc, #116]	@ (80073c4 <Interval_Measure+0x190>)
 8007350:	4e23      	ldr	r6, [pc, #140]	@ (80073e0 <Interval_Measure+0x1ac>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	4b20      	ldr	r3, [pc, #128]	@ (80073d8 <Interval_Measure+0x1a4>)
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	9b00      	ldr	r3, [sp, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d119      	bne.n	8007394 <Interval_Measure+0x160>
				printf("Get in Timer Shut Down\r\n");
 8007360:	481a      	ldr	r0, [pc, #104]	@ (80073cc <Interval_Measure+0x198>)
 8007362:	f012 ff6b 	bl	801a23c <puts>
				Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 8007366:	6829      	ldr	r1, [r5, #0]
 8007368:	6838      	ldr	r0, [r7, #0]
 800736a:	9a03      	ldr	r2, [sp, #12]
 800736c:	f7ff f940 	bl	80065f0 <Update_TempDose_MinMax>
				dose_log = 0x0000;
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	602b      	str	r3, [r5, #0]
			    Write_buffer();
 8007374:	f7ff fa0e 	bl	8006794 <Write_buffer>
			    rad_interval_count--;
 8007378:	7833      	ldrb	r3, [r6, #0]
			    idx_temp++;
 800737a:	4a1a      	ldr	r2, [pc, #104]	@ (80073e4 <Interval_Measure+0x1b0>)
			    rad_interval_count--;
 800737c:	3b01      	subs	r3, #1
 800737e:	7033      	strb	r3, [r6, #0]
			    idx_temp++;
 8007380:	8813      	ldrh	r3, [r2, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	8013      	strh	r3, [r2, #0]
			    Save_Backup_Index();
 8007386:	f7fe ff05 	bl	8006194 <Save_Backup_Index>
			    Get_in_Shutdown_Timer();
 800738a:	f7fe fe29 	bl	8005fe0 <Get_in_Shutdown_Timer>
			    Tick_Save = 0;
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	e78e      	b.n	80072b2 <Interval_Measure+0x7e>
				printf("Start Timer & No shutdown\r\n");
 8007394:	4815      	ldr	r0, [pc, #84]	@ (80073ec <Interval_Measure+0x1b8>)
 8007396:	f012 ff51 	bl	801a23c <puts>
				Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 800739a:	9a03      	ldr	r2, [sp, #12]
 800739c:	6829      	ldr	r1, [r5, #0]
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f7ff f926 	bl	80065f0 <Update_TempDose_MinMax>
				dose_log = 0x0000;
 80073a4:	9b01      	ldr	r3, [sp, #4]
 80073a6:	602b      	str	r3, [r5, #0]
				rad_interval_count--;
 80073a8:	7833      	ldrb	r3, [r6, #0]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	7033      	strb	r3, [r6, #0]
			    Write_buffer();
 80073ae:	f7ff f9f1 	bl	8006794 <Write_buffer>
			    idx_temp++;
 80073b2:	4a0c      	ldr	r2, [pc, #48]	@ (80073e4 <Interval_Measure+0x1b0>)
 80073b4:	e7a8      	b.n	8007308 <Interval_Measure+0xd4>
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	20000502 	.word	0x20000502
 80073bc:	20000540 	.word	0x20000540
 80073c0:	20000560 	.word	0x20000560
 80073c4:	2000053c 	.word	0x2000053c
 80073c8:	0801d860 	.word	0x0801d860
 80073cc:	0801d88c 	.word	0x0801d88c
 80073d0:	20000530 	.word	0x20000530
 80073d4:	20000544 	.word	0x20000544
 80073d8:	20000b50 	.word	0x20000b50
 80073dc:	2000000a 	.word	0x2000000a
 80073e0:	200004fd 	.word	0x200004fd
 80073e4:	200004fe 	.word	0x200004fe
 80073e8:	20000500 	.word	0x20000500
 80073ec:	0801d8a4 	.word	0x0801d8a4
 80073f0:	0801d8bf 	.word	0x0801d8bf

080073f4 <__io_putchar>:
{
 80073f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073f6:	4c0b      	ldr	r4, [pc, #44]	@ (8007424 <__io_putchar+0x30>)
 80073f8:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 80073fa:	280a      	cmp	r0, #10
 80073fc:	d108      	bne.n	8007410 <__io_putchar+0x1c>
    uint8_t ret = '\r';
 80073fe:	210f      	movs	r1, #15
 8007400:	230d      	movs	r3, #13
 8007402:	4469      	add	r1, sp
 8007404:	700b      	strb	r3, [r1, #0]
    HAL_UART_Transmit(&huart3, &ret, 1, 0xFFFF);
 8007406:	2201      	movs	r2, #1
 8007408:	0020      	movs	r0, r4
 800740a:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <__io_putchar+0x34>)
 800740c:	f00b ff63 	bl	80132d6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8007410:	2201      	movs	r2, #1
 8007412:	0020      	movs	r0, r4
 8007414:	4b04      	ldr	r3, [pc, #16]	@ (8007428 <__io_putchar+0x34>)
 8007416:	a901      	add	r1, sp, #4
 8007418:	f00b ff5d 	bl	80132d6 <HAL_UART_Transmit>
  return ch;
 800741c:	9801      	ldr	r0, [sp, #4]
}
 800741e:	b004      	add	sp, #16
 8007420:	bd10      	pop	{r4, pc}
 8007422:	46c0      	nop			@ (mov r8, r8)
 8007424:	20000840 	.word	0x20000840
 8007428:	0000ffff 	.word	0x0000ffff

0800742c <SystemClock_Config>:
{
 800742c:	b570      	push	{r4, r5, r6, lr}
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800742e:	2518      	movs	r5, #24
{
 8007430:	b0b0      	sub	sp, #192	@ 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007432:	224c      	movs	r2, #76	@ 0x4c
 8007434:	2100      	movs	r1, #0
 8007436:	a81d      	add	r0, sp, #116	@ 0x74
 8007438:	f013 f85c 	bl	801a4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800743c:	2210      	movs	r2, #16
 800743e:	2100      	movs	r1, #0
 8007440:	a802      	add	r0, sp, #8
 8007442:	f013 f857 	bl	801a4f4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8007446:	002a      	movs	r2, r5
 8007448:	2100      	movs	r1, #0
 800744a:	a806      	add	r0, sp, #24
 800744c:	f013 f852 	bl	801a4f4 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007450:	2080      	movs	r0, #128	@ 0x80
 8007452:	0080      	lsls	r0, r0, #2
 8007454:	f009 fb68 	bl	8010b28 <HAL_PWREx_ControlVoltageScaling>
  HAL_PWR_EnableBkUpAccess();
 8007458:	f009 fb3c 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800745c:	4a26      	ldr	r2, [pc, #152]	@ (80074f8 <SystemClock_Config+0xcc>)
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800745e:	2640      	movs	r6, #64	@ 0x40
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007460:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007462:	a81d      	add	r0, sp, #116	@ 0x74
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007464:	43ab      	bics	r3, r5
 8007466:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI48;
 8007468:	2326      	movs	r3, #38	@ 0x26
 800746a:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800746c:	335b      	adds	r3, #91	@ 0x5b
 800746e:	931f      	str	r3, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007470:	337f      	adds	r3, #127	@ 0x7f
 8007472:	9320      	str	r3, [sp, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // PLL OFF
 8007474:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007476:	3d17      	subs	r5, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007478:	9621      	str	r6, [sp, #132]	@ 0x84
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800747a:	9527      	str	r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // PLL OFF
 800747c:	9328      	str	r3, [sp, #160]	@ 0xa0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800747e:	f009 fc4b 	bl	8010d18 <HAL_RCC_OscConfig>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007482:	4c1e      	ldr	r4, [pc, #120]	@ (80074fc <SystemClock_Config+0xd0>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007484:	1e01      	subs	r1, r0, #0
 8007486:	d001      	beq.n	800748c <SystemClock_Config+0x60>
 8007488:	b672      	cpsid	i
  while (1)
 800748a:	e7fe      	b.n	800748a <SystemClock_Config+0x5e>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800748c:	0032      	movs	r2, r6
 800748e:	a80d      	add	r0, sp, #52	@ 0x34
 8007490:	f013 f830 	bl	801a4f4 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007494:	2380      	movs	r3, #128	@ 0x80
 8007496:	015b      	lsls	r3, r3, #5
 8007498:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800749a:	23c0      	movs	r3, #192	@ 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800749c:	a80c      	add	r0, sp, #48	@ 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800749e:	051b      	lsls	r3, r3, #20
 80074a0:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074a2:	f009 ff77 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 80074a6:	1e01      	subs	r1, r0, #0
 80074a8:	d001      	beq.n	80074ae <SystemClock_Config+0x82>
 80074aa:	b672      	cpsid	i
  while (1)
 80074ac:	e7fe      	b.n	80074ac <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80074ae:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074b0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074b2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80074b4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80074b6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;  // PLL이 아닌 HSI 직접 사용
 80074b8:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80074ba:	f009 fec5 	bl	8011248 <HAL_RCC_ClockConfig>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d001      	beq.n	80074c6 <SystemClock_Config+0x9a>
 80074c2:	b672      	cpsid	i
  while (1)
 80074c4:	e7fe      	b.n	80074c4 <SystemClock_Config+0x98>
  __HAL_RCC_CRS_CLK_ENABLE();
 80074c6:	2280      	movs	r2, #128	@ 0x80
 80074c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074ca:	0252      	lsls	r2, r2, #9
 80074cc:	4313      	orrs	r3, r2
 80074ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 80074d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80074d2:	9006      	str	r0, [sp, #24]
  __HAL_RCC_CRS_CLK_ENABLE();
 80074d4:	4013      	ands	r3, r2
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	9b01      	ldr	r3, [sp, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	055b      	lsls	r3, r3, #21
 80074de:	9307      	str	r3, [sp, #28]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768); // 48MHz 기준
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <SystemClock_Config+0xd4>)
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80074e2:	9008      	str	r0, [sp, #32]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768); // 48MHz 기준
 80074e4:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80074e6:	2322      	movs	r3, #34	@ 0x22
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80074e8:	a806      	add	r0, sp, #24
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80074ea:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80074ec:	3b02      	subs	r3, #2
 80074ee:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80074f0:	f00a fa78 	bl	80119e4 <HAL_RCCEx_CRSConfig>
}
 80074f4:	b030      	add	sp, #192	@ 0xc0
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	40021090 	.word	0x40021090
 80074fc:	40021000 	.word	0x40021000
 8007500:	000005b7 	.word	0x000005b7

08007504 <main>:
{
 8007504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007506:	b0c9      	sub	sp, #292	@ 0x124
   SystemClock_Config();
 8007508:	f7ff ff90 	bl	800742c <SystemClock_Config>
  HAL_Init();
 800750c:	f006 fea0 	bl	800e250 <HAL_Init>
  HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8007510:	2200      	movs	r2, #0
 8007512:	2002      	movs	r0, #2
 8007514:	0011      	movs	r1, r2
 8007516:	f007 fd87 	bl	800f028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800751a:	2002      	movs	r0, #2
 800751c:	f007 fdae 	bl	800f07c <HAL_NVIC_EnableIRQ>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007520:	2214      	movs	r2, #20
 8007522:	2100      	movs	r1, #0
 8007524:	a81c      	add	r0, sp, #112	@ 0x70
 8007526:	f012 ffe5 	bl	801a4f4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800752a:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800752c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800752e:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007530:	4cd4      	ldr	r4, [pc, #848]	@ (8007884 <main+0x380>)
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8007532:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007534:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8007536:	2110      	movs	r1, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007538:	4313      	orrs	r3, r2
 800753a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800753c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 800753e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007540:	4013      	ands	r3, r2
 8007542:	9309      	str	r3, [sp, #36]	@ 0x24
 8007544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007546:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007548:	1892      	adds	r2, r2, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800754a:	432b      	orrs	r3, r5
 800754c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800754e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007550:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007552:	402b      	ands	r3, r5
 8007554:	930a      	str	r3, [sp, #40]	@ 0x28
 8007556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007558:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800755a:	4333      	orrs	r3, r6
 800755c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800755e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007560:	4033      	ands	r3, r6
 8007562:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007566:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007568:	4313      	orrs	r3, r2
 800756a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800756c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800756e:	4013      	ands	r3, r2
 8007570:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8007572:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007574:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8007576:	f008 f919 	bl	800f7ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Regulator_En_Pin|Middle_Temp_GND_Pin, GPIO_PIN_RESET);
 800757a:	2188      	movs	r1, #136	@ 0x88
 800757c:	2200      	movs	r2, #0
 800757e:	48c2      	ldr	r0, [pc, #776]	@ (8007888 <main+0x384>)
 8007580:	00c9      	lsls	r1, r1, #3
 8007582:	f008 f913 	bl	800f7ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, GPIO_PIN_RESET);
 8007586:	2200      	movs	r2, #0
 8007588:	2104      	movs	r1, #4
 800758a:	48c0      	ldr	r0, [pc, #768]	@ (800788c <main+0x388>)
 800758c:	f008 f90e 	bl	800f7ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007590:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007592:	48bf      	ldr	r0, [pc, #764]	@ (8007890 <main+0x38c>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007594:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007596:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007598:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800759a:	971d      	str	r7, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800759c:	961e      	str	r6, [sp, #120]	@ 0x78
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800759e:	f007 ffc1 	bl	800f524 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80075a2:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80075a4:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80075a6:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80075a8:	a91c      	add	r1, sp, #112	@ 0x70
 80075aa:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80075ac:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pin = User_Button_Pin;
 80075ae:	951c      	str	r5, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075b0:	951e      	str	r5, [sp, #120]	@ 0x78
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80075b2:	f007 ffb7 	bl	800f524 <HAL_GPIO_Init>
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 80075b6:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 80075b8:	2310      	movs	r3, #16
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 80075ba:	a91c      	add	r1, sp, #112	@ 0x70
 80075bc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 80075be:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c0:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c2:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80075c4:	961e      	str	r6, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 80075c6:	f007 ffad 	bl	800f524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 80075ca:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 80075cc:	48ae      	ldr	r0, [pc, #696]	@ (8007888 <main+0x384>)
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 80075ce:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 80075d0:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 80075d2:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d4:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075d6:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80075d8:	961e      	str	r6, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 80075da:	f007 ffa3 	bl	800f524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 80075de:	2204      	movs	r2, #4
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 80075e0:	48aa      	ldr	r0, [pc, #680]	@ (800788c <main+0x388>)
 80075e2:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 80075e4:	921c      	str	r2, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e6:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075e8:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075ea:	951e      	str	r5, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 80075ec:	f007 ff9a 	bl	800f524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 80075f0:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 80075f2:	a91c      	add	r1, sp, #112	@ 0x70
 80075f4:	48a4      	ldr	r0, [pc, #656]	@ (8007888 <main+0x384>)
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 80075f6:	931c      	str	r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075f8:	971f      	str	r7, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075fa:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075fc:	951e      	str	r5, [sp, #120]	@ 0x78
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 80075fe:	f007 ff91 	bl	800f524 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8007602:	2005      	movs	r0, #5
 8007604:	f007 fd3a 	bl	800f07c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007608:	2007      	movs	r0, #7
 800760a:	f007 fd37 	bl	800f07c <HAL_NVIC_EnableIRQ>
    Backup_GetMode();
 800760e:	f7fe fc33 	bl	8005e78 <Backup_GetMode>
    if (Meas_Mode == 4 && HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8007612:	4fa0      	ldr	r7, [pc, #640]	@ (8007894 <main+0x390>)
 8007614:	783b      	ldrb	r3, [r7, #0]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d107      	bne.n	800762a <main+0x126>
 800761a:	20a0      	movs	r0, #160	@ 0xa0
 800761c:	0029      	movs	r1, r5
 800761e:	05c0      	lsls	r0, r0, #23
 8007620:	f008 f8be 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8007624:	42a8      	cmp	r0, r5
 8007626:	d100      	bne.n	800762a <main+0x126>
    	Meas_Mode = 2;
 8007628:	703e      	strb	r6, [r7, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800762a:	2701      	movs	r7, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800762c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800762e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007630:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007632:	433b      	orrs	r3, r7
 8007634:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007636:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007638:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800763a:	403b      	ands	r3, r7
 800763c:	9308      	str	r3, [sp, #32]
 800763e:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007640:	f007 fcf2 	bl	800f028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007644:	2009      	movs	r0, #9
 8007646:	f007 fd19 	bl	800f07c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800764a:	2200      	movs	r2, #0
 800764c:	200a      	movs	r0, #10
 800764e:	0011      	movs	r1, r2
 8007650:	f007 fcea 	bl	800f028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007654:	200a      	movs	r0, #10
 8007656:	f007 fd11 	bl	800f07c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800765a:	220c      	movs	r2, #12
 800765c:	2100      	movs	r1, #0
 800765e:	a81c      	add	r0, sp, #112	@ 0x70
 8007660:	f012 ff48 	bl	801a4f4 <memset>
  hadc1.Instance = ADC1;
 8007664:	4e8c      	ldr	r6, [pc, #560]	@ (8007898 <main+0x394>)
 8007666:	4b8d      	ldr	r3, [pc, #564]	@ (800789c <main+0x398>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007668:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 800766a:	6033      	str	r3, [r6, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800766c:	23c0      	movs	r3, #192	@ 0xc0
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	6073      	str	r3, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007672:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007674:	6172      	str	r2, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007676:	19f2      	adds	r2, r6, r7
 8007678:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800767a:	0032      	movs	r2, r6
 800767c:	322c      	adds	r2, #44	@ 0x2c
 800767e:	7013      	strb	r3, [r2, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8007680:	2207      	movs	r2, #7
 8007682:	6372      	str	r2, [r6, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8007684:	63b2      	str	r2, [r6, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8007686:	0032      	movs	r2, r6
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007688:	0030      	movs	r0, r6
  hadc1.Init.OversamplingMode = DISABLE;
 800768a:	323c      	adds	r2, #60	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800768c:	60b3      	str	r3, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800768e:	60f3      	str	r3, [r6, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007690:	6133      	str	r3, [r6, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007692:	8333      	strh	r3, [r6, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007694:	76b3      	strb	r3, [r6, #26]
  hadc1.Init.NbrOfConversion = 1;
 8007696:	61f7      	str	r7, [r6, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007698:	6273      	str	r3, [r6, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800769a:	62b3      	str	r3, [r6, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800769c:	6333      	str	r3, [r6, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 800769e:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80076a0:	64f3      	str	r3, [r6, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80076a2:	f006 fe07 	bl	800e2b4 <HAL_ADC_Init>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d001      	beq.n	80076ae <main+0x1aa>
 80076aa:	b672      	cpsid	i
  while (1)
 80076ac:	e7fe      	b.n	80076ac <main+0x1a8>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80076ae:	901d      	str	r0, [sp, #116]	@ 0x74
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80076b0:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076b2:	a91c      	add	r1, sp, #112	@ 0x70
 80076b4:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 80076b6:	971c      	str	r7, [sp, #112]	@ 0x70
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076b8:	f007 f844 	bl	800e744 <HAL_ADC_ConfigChannel>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d001      	beq.n	80076c4 <main+0x1c0>
 80076c0:	b672      	cpsid	i
  while (1)
 80076c2:	e7fe      	b.n	80076c2 <main+0x1be>
  hlcd.Instance = LCD;
 80076c4:	4c76      	ldr	r4, [pc, #472]	@ (80078a0 <main+0x39c>)
 80076c6:	4b77      	ldr	r3, [pc, #476]	@ (80078a4 <main+0x3a0>)
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80076c8:	6060      	str	r0, [r4, #4]
  hlcd.Instance = LCD;
 80076ca:	6023      	str	r3, [r4, #0]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80076cc:	230c      	movs	r3, #12
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80076ce:	60a0      	str	r0, [r4, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80076d0:	60e3      	str	r3, [r4, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80076d2:	6120      	str	r0, [r4, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80076d4:	6160      	str	r0, [r4, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80076d6:	61a0      	str	r0, [r4, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80076d8:	61e0      	str	r0, [r4, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 80076da:	3304      	adds	r3, #4
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80076dc:	62a0      	str	r0, [r4, #40]	@ 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80076de:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80076e0:	6320      	str	r0, [r4, #48]	@ 0x30
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80076e2:	0020      	movs	r0, r4
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 80076e4:	6223      	str	r3, [r4, #32]
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80076e6:	f008 f93f 	bl	800f968 <HAL_LCD_Init>
 80076ea:	1e05      	subs	r5, r0, #0
 80076ec:	d001      	beq.n	80076f2 <main+0x1ee>
 80076ee:	b672      	cpsid	i
  while (1)
 80076f0:	e7fe      	b.n	80076f0 <main+0x1ec>
  __HAL_LCD_HIGHDRIVER_ENABLE(&hlcd);
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	0020      	movs	r0, r4
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	433a      	orrs	r2, r7
 80076fa:	605a      	str	r2, [r3, #4]
 80076fc:	f008 f91c 	bl	800f938 <LCD_WaitForSynchro>
  hspi3.Instance = SPI3;
 8007700:	4869      	ldr	r0, [pc, #420]	@ (80078a8 <main+0x3a4>)
 8007702:	4b6a      	ldr	r3, [pc, #424]	@ (80078ac <main+0x3a8>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007704:	6085      	str	r5, [r0, #8]
  hspi3.Instance = SPI3;
 8007706:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007708:	2382      	movs	r3, #130	@ 0x82
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800770e:	23e0      	movs	r3, #224	@ 0xe0
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007714:	2380      	movs	r3, #128	@ 0x80
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	6183      	str	r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 800771a:	3bfa      	subs	r3, #250	@ 0xfa
 800771c:	3bff      	subs	r3, #255	@ 0xff
 800771e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007720:	3301      	adds	r3, #1
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007722:	6105      	str	r5, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007724:	6145      	str	r5, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007726:	61c5      	str	r5, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007728:	6205      	str	r5, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800772a:	6245      	str	r5, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800772c:	6285      	str	r5, [r0, #40]	@ 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800772e:	6305      	str	r5, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007730:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007732:	f00a fe17 	bl	8012364 <HAL_SPI_Init>
 8007736:	2800      	cmp	r0, #0
 8007738:	d001      	beq.n	800773e <main+0x23a>
 800773a:	b672      	cpsid	i
  while (1)
 800773c:	e7fe      	b.n	800773c <main+0x238>
  huart3.Instance = USART3;
 800773e:	4c5c      	ldr	r4, [pc, #368]	@ (80078b0 <main+0x3ac>)
 8007740:	4b5c      	ldr	r3, [pc, #368]	@ (80078b4 <main+0x3b0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007742:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 8007744:	6023      	str	r3, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8007746:	23e1      	movs	r3, #225	@ 0xe1
 8007748:	025b      	lsls	r3, r3, #9
 800774a:	6063      	str	r3, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800774c:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800774e:	60e0      	str	r0, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007750:	6120      	str	r0, [r4, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007752:	61a0      	str	r0, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007754:	61e0      	str	r0, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007756:	6220      	str	r0, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007758:	6260      	str	r0, [r4, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800775a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800775c:	0020      	movs	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 800775e:	6163      	str	r3, [r4, #20]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8007760:	f00b fe88 	bl	8013474 <HAL_HalfDuplex_Init>
 8007764:	1e01      	subs	r1, r0, #0
 8007766:	d001      	beq.n	800776c <main+0x268>
 8007768:	b672      	cpsid	i
  while (1)
 800776a:	e7fe      	b.n	800776a <main+0x266>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800776c:	0020      	movs	r0, r4
 800776e:	f00b feff 	bl	8013570 <HAL_UARTEx_SetTxFifoThreshold>
 8007772:	1e01      	subs	r1, r0, #0
 8007774:	d001      	beq.n	800777a <main+0x276>
 8007776:	b672      	cpsid	i
  while (1)
 8007778:	e7fe      	b.n	8007778 <main+0x274>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800777a:	0020      	movs	r0, r4
 800777c:	f00b ff18 	bl	80135b0 <HAL_UARTEx_SetRxFifoThreshold>
 8007780:	2800      	cmp	r0, #0
 8007782:	d001      	beq.n	8007788 <main+0x284>
 8007784:	b672      	cpsid	i
  while (1)
 8007786:	e7fe      	b.n	8007786 <main+0x282>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007788:	0020      	movs	r0, r4
 800778a:	f00b fed3 	bl	8013534 <HAL_UARTEx_DisableFifoMode>
 800778e:	2800      	cmp	r0, #0
 8007790:	d001      	beq.n	8007796 <main+0x292>
 8007792:	b672      	cpsid	i
  while (1)
 8007794:	e7fe      	b.n	8007794 <main+0x290>
  hcomp1.Instance = COMP1;
 8007796:	4d48      	ldr	r5, [pc, #288]	@ (80078b8 <main+0x3b4>)
 8007798:	4b48      	ldr	r3, [pc, #288]	@ (80078bc <main+0x3b8>)
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800779a:	61e8      	str	r0, [r5, #28]
  hcomp1.Instance = COMP1;
 800779c:	602b      	str	r3, [r5, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800779e:	2380      	movs	r3, #128	@ 0x80
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	612b      	str	r3, [r5, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 80077a4:	3bb0      	subs	r3, #176	@ 0xb0
 80077a6:	616b      	str	r3, [r5, #20]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80077a8:	23c0      	movs	r3, #192	@ 0xc0
 80077aa:	029b      	lsls	r3, r3, #10
 80077ac:	61ab      	str	r3, [r5, #24]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 80077ae:	23c0      	movs	r3, #192	@ 0xc0
 80077b0:	031b      	lsls	r3, r3, #12
 80077b2:	60eb      	str	r3, [r5, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 80077b4:	2321      	movs	r3, #33	@ 0x21
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80077b6:	60a8      	str	r0, [r5, #8]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80077b8:	6228      	str	r0, [r5, #32]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80077ba:	6068      	str	r0, [r5, #4]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80077bc:	0028      	movs	r0, r5
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 80077be:	626b      	str	r3, [r5, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80077c0:	f007 faf2 	bl	800eda8 <HAL_COMP_Init>
 80077c4:	1e03      	subs	r3, r0, #0
 80077c6:	d001      	beq.n	80077cc <main+0x2c8>
 80077c8:	b672      	cpsid	i
  while (1)
 80077ca:	e7fe      	b.n	80077ca <main+0x2c6>
  hlptim1.Instance = LPTIM1;
 80077cc:	483c      	ldr	r0, [pc, #240]	@ (80078c0 <main+0x3bc>)
 80077ce:	4a3d      	ldr	r2, [pc, #244]	@ (80078c4 <main+0x3c0>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80077d0:	6043      	str	r3, [r0, #4]
  hlptim1.Instance = LPTIM1;
 80077d2:	6002      	str	r2, [r0, #0]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80077d4:	4a3c      	ldr	r2, [pc, #240]	@ (80078c8 <main+0x3c4>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80077d6:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80077d8:	6142      	str	r2, [r0, #20]
  hlptim1.Init.Period = 32767;
 80077da:	4a3c      	ldr	r2, [pc, #240]	@ (80078cc <main+0x3c8>)
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80077dc:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim1.Init.Period = 32767;
 80077de:	6202      	str	r2, [r0, #32]
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80077e0:	6283      	str	r3, [r0, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80077e2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80077e4:	6303      	str	r3, [r0, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80077e6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80077e8:	f008 f952 	bl	800fa90 <HAL_LPTIM_Init>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d001      	beq.n	80077f4 <main+0x2f0>
 80077f0:	b672      	cpsid	i
  while (1)
 80077f2:	e7fe      	b.n	80077f2 <main+0x2ee>
  LCD_Clear_Display(LCD_data);
 80077f4:	4836      	ldr	r0, [pc, #216]	@ (80078d0 <main+0x3cc>)
 80077f6:	f7fd fa7f 	bl	8004cf8 <LCD_Clear_Display>
  HAL_PWR_EnableBkUpAccess();
 80077fa:	f009 f96b 	bl	8010ad4 <HAL_PWR_EnableBkUpAccess>
  if ( HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG) == 0x0000)
 80077fe:	4c35      	ldr	r4, [pc, #212]	@ (80078d4 <main+0x3d0>)
 8007800:	2101      	movs	r1, #1
 8007802:	0020      	movs	r0, r4
 8007804:	f00a fc7e 	bl	8012104 <HAL_RTCEx_BKUPRead>
 8007808:	1e07      	subs	r7, r0, #0
 800780a:	d000      	beq.n	800780e <main+0x30a>
 800780c:	e09e      	b.n	800794c <main+0x448>
  RTC_TimeTypeDef sTime = {0};
 800780e:	0001      	movs	r1, r0
 8007810:	2214      	movs	r2, #20
 8007812:	a81c      	add	r0, sp, #112	@ 0x70
 8007814:	f012 fe6e 	bl	801a4f4 <memset>
  hrtc.Instance = RTC;
 8007818:	4b2f      	ldr	r3, [pc, #188]	@ (80078d8 <main+0x3d4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800781a:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 800781c:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 800781e:	237f      	movs	r3, #127	@ 0x7f
 8007820:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8007822:	3380      	adds	r3, #128	@ 0x80
 8007824:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007826:	2380      	movs	r3, #128	@ 0x80
 8007828:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 800782a:	970d      	str	r7, [sp, #52]	@ 0x34
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800782c:	6067      	str	r7, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800782e:	6127      	str	r7, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007830:	6167      	str	r7, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007832:	61a7      	str	r7, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007834:	61e3      	str	r3, [r4, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8007836:	6227      	str	r7, [r4, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8007838:	6267      	str	r7, [r4, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800783a:	f00a f97b 	bl	8011b34 <HAL_RTC_Init>
 800783e:	2800      	cmp	r0, #0
 8007840:	d001      	beq.n	8007846 <main+0x342>
 8007842:	b672      	cpsid	i
  while (1)
 8007844:	e7fe      	b.n	8007844 <main+0x340>
  sTime.Hours = 0x0;
 8007846:	2260      	movs	r2, #96	@ 0x60
 8007848:	ab04      	add	r3, sp, #16
 800784a:	189b      	adds	r3, r3, r2
 800784c:	8018      	strh	r0, [r3, #0]
  sTime.Seconds = 0x0;
 800784e:	3202      	adds	r2, #2
 8007850:	ab04      	add	r3, sp, #16
 8007852:	189b      	adds	r3, r3, r2
 8007854:	7018      	strb	r0, [r3, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007856:	3a61      	subs	r2, #97	@ 0x61
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007858:	901f      	str	r0, [sp, #124]	@ 0x7c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800785a:	9020      	str	r0, [sp, #128]	@ 0x80
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800785c:	a91c      	add	r1, sp, #112	@ 0x70
 800785e:	0020      	movs	r0, r4
 8007860:	f00a f9d0 	bl	8011c04 <HAL_RTC_SetTime>
 8007864:	2800      	cmp	r0, #0
 8007866:	d001      	beq.n	800786c <main+0x368>
 8007868:	b672      	cpsid	i
  while (1)
 800786a:	e7fe      	b.n	800786a <main+0x366>
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800786c:	4b1b      	ldr	r3, [pc, #108]	@ (80078dc <main+0x3d8>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800786e:	2201      	movs	r2, #1
 8007870:	0020      	movs	r0, r4
 8007872:	a90d      	add	r1, sp, #52	@ 0x34
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8007874:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007876:	f00a fa53 	bl	8011d20 <HAL_RTC_SetDate>
 800787a:	9005      	str	r0, [sp, #20]
 800787c:	2800      	cmp	r0, #0
 800787e:	d02f      	beq.n	80078e0 <main+0x3dc>
 8007880:	b672      	cpsid	i
  while (1)
 8007882:	e7fe      	b.n	8007882 <main+0x37e>
 8007884:	40021000 	.word	0x40021000
 8007888:	50000400 	.word	0x50000400
 800788c:	50000c00 	.word	0x50000c00
 8007890:	50000800 	.word	0x50000800
 8007894:	20000535 	.word	0x20000535
 8007898:	20000aec 	.word	0x20000aec
 800789c:	40012400 	.word	0x40012400
 80078a0:	20000a80 	.word	0x20000a80
 80078a4:	40002400 	.word	0x40002400
 80078a8:	20000994 	.word	0x20000994
 80078ac:	40003c00 	.word	0x40003c00
 80078b0:	20000840 	.word	0x20000840
 80078b4:	40004800 	.word	0x40004800
 80078b8:	20000abc 	.word	0x20000abc
 80078bc:	40010200 	.word	0x40010200
 80078c0:	20000a28 	.word	0x20000a28
 80078c4:	40007c00 	.word	0x40007c00
 80078c8:	0000ffff 	.word	0x0000ffff
 80078cc:	00007fff 	.word	0x00007fff
 80078d0:	20000514 	.word	0x20000514
 80078d4:	200009f8 	.word	0x200009f8
 80078d8:	40002800 	.word	0x40002800
 80078dc:	25270502 	.word	0x25270502
      device_config.temp_max = INT16_MIN;
 80078e0:	4ae3      	ldr	r2, [pc, #908]	@ (8007c70 <main+0x76c>)
 80078e2:	4be4      	ldr	r3, [pc, #912]	@ (8007c74 <main+0x770>)
 80078e4:	0017      	movs	r7, r2
 80078e6:	6013      	str	r3, [r2, #0]
      device_config.dose_max = 0xFFFFFFFF;
 80078e8:	2301      	movs	r3, #1
 80078ea:	425b      	negs	r3, r3
      SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_DISABLE);
 80078ec:	49e2      	ldr	r1, [pc, #904]	@ (8007c78 <main+0x774>)
      device_config.dose_max = 0xFFFFFFFF;
 80078ee:	6053      	str	r3, [r2, #4]
      device_config.mark = 0;
 80078f0:	9b05      	ldr	r3, [sp, #20]
      printf("[Debug][Set] alarm_state Raw: 0x%08lX\n", device_config.alarm_state);
 80078f2:	48e2      	ldr	r0, [pc, #904]	@ (8007c7c <main+0x778>)
      device_config.mark = 0;
 80078f4:	7513      	strb	r3, [r2, #20]
      SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_DISABLE);
 80078f6:	6191      	str	r1, [r2, #24]
      printf("[Debug][Set] alarm_state Raw: 0x%08lX\n", device_config.alarm_state);
 80078f8:	f012 fc30 	bl	801a15c <iprintf>
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 80078fc:	2003      	movs	r0, #3
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 80078fe:	69ba      	ldr	r2, [r7, #24]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8007900:	0b13      	lsrs	r3, r2, #12
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007902:	4003      	ands	r3, r0
 8007904:	9306      	str	r3, [sp, #24]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8007906:	0a91      	lsrs	r1, r2, #10
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2));
 8007908:	0c93      	lsrs	r3, r2, #18
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 800790a:	4001      	ands	r1, r0
 800790c:	4003      	ands	r3, r0
 800790e:	9107      	str	r1, [sp, #28]
 8007910:	9302      	str	r3, [sp, #8]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8007912:	0a11      	lsrs	r1, r2, #8
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 8007914:	0c13      	lsrs	r3, r2, #16
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8007916:	0b92      	lsrs	r2, r2, #14
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007918:	4003      	ands	r3, r0
 800791a:	4002      	ands	r2, r0
 800791c:	4001      	ands	r1, r0
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	9200      	str	r2, [sp, #0]
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	9a07      	ldr	r2, [sp, #28]
 8007926:	48d6      	ldr	r0, [pc, #856]	@ (8007c80 <main+0x77c>)
 8007928:	f012 fc18 	bl	801a15c <iprintf>
      Save_All_Config_To_BackupRegister(&device_config);
 800792c:	0038      	movs	r0, r7
 800792e:	f7fe fcef 	bl	8006310 <Save_All_Config_To_BackupRegister>
      HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, MODE_Boot);
 8007932:	2201      	movs	r2, #1
 8007934:	0020      	movs	r0, r4
 8007936:	0011      	movs	r1, r2
 8007938:	f00a fbdc 	bl	80120f4 <HAL_RTCEx_BKUPWrite>
      idx_rad = 0;
 800793c:	4bd1      	ldr	r3, [pc, #836]	@ (8007c84 <main+0x780>)
 800793e:	9a05      	ldr	r2, [sp, #20]
      printf("First Boot\r\n");
 8007940:	48d1      	ldr	r0, [pc, #836]	@ (8007c88 <main+0x784>)
      idx_rad = 0;
 8007942:	801a      	strh	r2, [r3, #0]
      printf("First Boot\r\n");
 8007944:	f012 fc7a 	bl	801a23c <puts>
      Load_DefaultSettings();
 8007948:	f002 f872 	bl	8009a30 <Load_DefaultSettings>
  uint32_t pwrmode_bits = (COMP1->CSR & (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0));
 800794c:	22c0      	movs	r2, #192	@ 0xc0
 800794e:	4bcf      	ldr	r3, [pc, #828]	@ (8007c8c <main+0x788>)
 8007950:	0312      	lsls	r2, r2, #12
 8007952:	681b      	ldr	r3, [r3, #0]
	  printf("Low Power OK\r\n");
 8007954:	48ce      	ldr	r0, [pc, #824]	@ (8007c90 <main+0x78c>)
  uint32_t pwrmode_bits = (COMP1->CSR & (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0));
 8007956:	4013      	ands	r3, r2
  if (pwrmode_bits == (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0)) {
 8007958:	4293      	cmp	r3, r2
 800795a:	d000      	beq.n	800795e <main+0x45a>
	  printf( "Low Power non\r\n");
 800795c:	48cd      	ldr	r0, [pc, #820]	@ (8007c94 <main+0x790>)
 800795e:	f012 fc6d 	bl	801a23c <puts>
  SPI_FLASH_Init();
 8007962:	f002 fb2f 	bl	8009fc4 <SPI_FLASH_Init>
  current_settings = cfg;
 8007966:	4fcc      	ldr	r7, [pc, #816]	@ (8007c98 <main+0x794>)
 8007968:	22af      	movs	r2, #175	@ 0xaf
 800796a:	a91c      	add	r1, sp, #112	@ 0x70
 800796c:	0038      	movs	r0, r7
 800796e:	f012 fe8b 	bl	801a688 <memcpy>
  Init_DeviceSettings();
 8007972:	f002 f947 	bl	8009c04 <Init_DeviceSettings>
  printf( "Regulatior On!\r\n");
 8007976:	48c9      	ldr	r0, [pc, #804]	@ (8007c9c <main+0x798>)
 8007978:	f012 fc60 	bl	801a23c <puts>
  HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_SET); // 핀 High 상태로 출력
 800797c:	2180      	movs	r1, #128	@ 0x80
 800797e:	2201      	movs	r2, #1
 8007980:	00c9      	lsls	r1, r1, #3
 8007982:	48c7      	ldr	r0, [pc, #796]	@ (8007ca0 <main+0x79c>)
 8007984:	f007 ff12 	bl	800f7ac <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8007988:	0030      	movs	r0, r6
 800798a:	f007 f929 	bl	800ebe0 <HAL_ADCEx_Calibration_Start>
  uint32_t cal_factor = HAL_ADCEx_Calibration_GetValue(&hadc1);
 800798e:	0030      	movs	r0, r6
 8007990:	f007 f9d6 	bl	800ed40 <HAL_ADCEx_Calibration_GetValue>
 8007994:	0001      	movs	r1, r0
  HAL_ADCEx_Calibration_SetValue(&hadc1, cal_factor);
 8007996:	0030      	movs	r0, r6
 8007998:	f007 f9d8 	bl	800ed4c <HAL_ADCEx_Calibration_SetValue>
  HAL_COMP_Start(&hcomp1);
 800799c:	0028      	movs	r0, r5
 800799e:	f007 faed 	bl	800ef7c <HAL_COMP_Start>
  uint32_t prevTick = HAL_GetTick();
 80079a2:	f006 fc6d 	bl	800e280 <HAL_GetTick>
  Load_All_Config_From_BackupRegister(&device_config);
 80079a6:	4bb2      	ldr	r3, [pc, #712]	@ (8007c70 <main+0x76c>)
  uint32_t prevTick = HAL_GetTick();
 80079a8:	9006      	str	r0, [sp, #24]
  Load_All_Config_From_BackupRegister(&device_config);
 80079aa:	0018      	movs	r0, r3
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	f7fe fe09 	bl	80065c4 <Load_All_Config_From_BackupRegister>
  meas_data_log_fast_init(Index_num);
 80079b2:	4bbc      	ldr	r3, [pc, #752]	@ (8007ca4 <main+0x7a0>)
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 80079b4:	4dbc      	ldr	r5, [pc, #752]	@ (8007ca8 <main+0x7a4>)
  meas_data_log_fast_init(Index_num);
 80079b6:	8818      	ldrh	r0, [r3, #0]
 80079b8:	f000 fe32 	bl	8008620 <meas_data_log_fast_init>
  printf("[DEBUG] rad_interval=%u, temp_interval=%u, rad_ratio=%u\r\n",
 80079bc:	003a      	movs	r2, r7
 80079be:	3275      	adds	r2, #117	@ 0x75
 80079c0:	7811      	ldrb	r1, [r2, #0]
 80079c2:	003a      	movs	r2, r7
 80079c4:	3276      	adds	r2, #118	@ 0x76
 80079c6:	7812      	ldrb	r2, [r2, #0]
 80079c8:	4bb8      	ldr	r3, [pc, #736]	@ (8007cac <main+0x7a8>)
 80079ca:	0212      	lsls	r2, r2, #8
 80079cc:	430a      	orrs	r2, r1
 80079ce:	0039      	movs	r1, r7
 80079d0:	3177      	adds	r1, #119	@ 0x77
 80079d2:	7809      	ldrb	r1, [r1, #0]
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	0409      	lsls	r1, r1, #16
 80079d8:	4311      	orrs	r1, r2
 80079da:	003a      	movs	r2, r7
 80079dc:	3278      	adds	r2, #120	@ 0x78
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	0612      	lsls	r2, r2, #24
 80079e2:	430a      	orrs	r2, r1
 80079e4:	0039      	movs	r1, r7
 80079e6:	3171      	adds	r1, #113	@ 0x71
 80079e8:	7808      	ldrb	r0, [r1, #0]
 80079ea:	0039      	movs	r1, r7
 80079ec:	3172      	adds	r1, #114	@ 0x72
 80079ee:	7809      	ldrb	r1, [r1, #0]
 80079f0:	0209      	lsls	r1, r1, #8
 80079f2:	4301      	orrs	r1, r0
 80079f4:	0038      	movs	r0, r7
 80079f6:	3073      	adds	r0, #115	@ 0x73
 80079f8:	7800      	ldrb	r0, [r0, #0]
 80079fa:	0400      	lsls	r0, r0, #16
 80079fc:	4308      	orrs	r0, r1
 80079fe:	0039      	movs	r1, r7
 8007a00:	3174      	adds	r1, #116	@ 0x74
 8007a02:	7809      	ldrb	r1, [r1, #0]
 8007a04:	0609      	lsls	r1, r1, #24
 8007a06:	4301      	orrs	r1, r0
 8007a08:	48a9      	ldr	r0, [pc, #676]	@ (8007cb0 <main+0x7ac>)
 8007a0a:	f012 fba7 	bl	801a15c <iprintf>
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007a0e:	2180      	movs	r1, #128	@ 0x80
 8007a10:	0028      	movs	r0, r5
 8007a12:	0189      	lsls	r1, r1, #6
 8007a14:	f007 fec4 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8007a18:	1e43      	subs	r3, r0, #1
 8007a1a:	4198      	sbcs	r0, r3
  printf("VBUS HAL_GPIO_ReadPin: %d\r\n", HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin));
 8007a1c:	2180      	movs	r1, #128	@ 0x80
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007a1e:	4ea5      	ldr	r6, [pc, #660]	@ (8007cb4 <main+0x7b0>)
 8007a20:	b2c0      	uxtb	r0, r0
 8007a22:	7030      	strb	r0, [r6, #0]
  printf("VBUS HAL_GPIO_ReadPin: %d\r\n", HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin));
 8007a24:	0189      	lsls	r1, r1, #6
 8007a26:	0028      	movs	r0, r5
 8007a28:	f007 feba 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8007a2c:	4ba2      	ldr	r3, [pc, #648]	@ (8007cb8 <main+0x7b4>)
 8007a2e:	0001      	movs	r1, r0
 8007a30:	0018      	movs	r0, r3
 8007a32:	f012 fb93 	bl	801a15c <iprintf>
  printf("VBUS IDR: %d\r\n", (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) ? 1 : 0);
 8007a36:	6929      	ldr	r1, [r5, #16]
 8007a38:	2501      	movs	r5, #1
 8007a3a:	0b49      	lsrs	r1, r1, #13
 8007a3c:	489f      	ldr	r0, [pc, #636]	@ (8007cbc <main+0x7b8>)
 8007a3e:	4029      	ands	r1, r5
 8007a40:	f012 fb8c 	bl	801a15c <iprintf>
  if (USB_State){ // 전력 상관 없을시 수정
 8007a44:	7833      	ldrb	r3, [r6, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d026      	beq.n	8007a98 <main+0x594>
	  RTC_Disable_All_Wakeup();
 8007a4a:	f7fd fe47 	bl	80056dc <RTC_Disable_All_Wakeup>
		  LCD_Clear_Display(LCD_data);
 8007a4e:	4e9c      	ldr	r6, [pc, #624]	@ (8007cc0 <main+0x7bc>)
 8007a50:	0030      	movs	r0, r6
 8007a52:	f7fd f951 	bl	8004cf8 <LCD_Clear_Display>
		  LCD_Display_USB_Load(LCD_data);// Loading USB화면 // Loading USB화면
 8007a56:	0030      	movs	r0, r6
 8007a58:	f7fc ffd6 	bl	8004a08 <LCD_Display_USB_Load>
		RAD_Fatfs_MountOnly();
 8007a5c:	f001 fee6 	bl	800982c <RAD_Fatfs_MountOnly>
			RAD_USBX_Clean_Vol();
 8007a60:	f001 f83a 	bl	8008ad8 <RAD_USBX_Clean_Vol>
			RAD_USBX_Fatfs_format_disk();
 8007a64:	f000 ffd4 	bl	8008a10 <RAD_USBX_Fatfs_format_disk>
      tmp.mean_kinetic_temp = 0.0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9312      	str	r3, [sp, #72]	@ 0x48
      tmp.start_time = start_time;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a70:	9314      	str	r3, [sp, #80]	@ 0x50
      tmp.stop_time = stop_time;
 8007a72:	9315      	str	r3, [sp, #84]	@ 0x54
      tmp.data_points_temp_count = idx_temp;
 8007a74:	4b93      	ldr	r3, [pc, #588]	@ (8007cc4 <main+0x7c0>)
	 csv_gen_template_file(&current_settings);
 8007a76:	0038      	movs	r0, r7
      tmp.data_points_temp_count = idx_temp;
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	9317      	str	r3, [sp, #92]	@ 0x5c
	 csv_gen_template_file(&current_settings);
 8007a7c:	f003 fe80 	bl	800b780 <csv_gen_template_file>
    pdf_gen_template_file();
 8007a80:	f004 fb86 	bl	800c190 <pdf_gen_template_file>
    pdf_append_all_flash_log_entries();
 8007a84:	f004 fbec 	bl	800c260 <pdf_append_all_flash_log_entries>
    pdf_gen_completed_report(&tmp,&current_settings);
 8007a88:	0039      	movs	r1, r7
 8007a8a:	a80d      	add	r0, sp, #52	@ 0x34
 8007a8c:	f004 fc76 	bl	800c37c <pdf_gen_completed_report>
    RAD_USBX_Device_Init();
 8007a90:	f000 feee 	bl	8008870 <RAD_USBX_Device_Init>
    usb_inited = 1;
 8007a94:	4b8c      	ldr	r3, [pc, #560]	@ (8007cc8 <main+0x7c4>)
 8007a96:	701d      	strb	r5, [r3, #0]
	  if (USB_State){
 8007a98:	4e86      	ldr	r6, [pc, #536]	@ (8007cb4 <main+0x7b0>)
 8007a9a:	7833      	ldrb	r3, [r6, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d05a      	beq.n	8007b56 <main+0x652>
		  if (!usb_inited){
 8007aa0:	4b89      	ldr	r3, [pc, #548]	@ (8007cc8 <main+0x7c4>)
 8007aa2:	4c87      	ldr	r4, [pc, #540]	@ (8007cc0 <main+0x7bc>)
 8007aa4:	781d      	ldrb	r5, [r3, #0]
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	d131      	bne.n	8007b0e <main+0x60a>
			      RTC_Disable_All_Wakeup();
 8007aaa:	f7fd fe17 	bl	80056dc <RTC_Disable_All_Wakeup>
				  LCD_Clear_Display(LCD_data);
 8007aae:	0020      	movs	r0, r4
 8007ab0:	f7fd f922 	bl	8004cf8 <LCD_Clear_Display>
				  LCD_Display_USB_Load(LCD_data);// Loading USB화면// Loading USB화면
 8007ab4:	0020      	movs	r0, r4
 8007ab6:	f7fc ffa7 	bl	8004a08 <LCD_Display_USB_Load>
			if(current_settings.mode_status == 0x03){ // Stop : 0x00  Start : 0x01  pause : 0x02  Over : 0x03
 8007aba:	4b77      	ldr	r3, [pc, #476]	@ (8007c98 <main+0x794>)
 8007abc:	9307      	str	r3, [sp, #28]
 8007abe:	4b83      	ldr	r3, [pc, #524]	@ (8007ccc <main+0x7c8>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d11e      	bne.n	8007b04 <main+0x600>
			RAD_Fatfs_MountOnly();
 8007ac6:	f001 feb1 	bl	800982c <RAD_Fatfs_MountOnly>
			RAD_USBX_Clean_Vol();
 8007aca:	f001 f805 	bl	8008ad8 <RAD_USBX_Clean_Vol>
	        RAD_USBX_Fatfs_format_disk();
 8007ace:	f000 ff9f 	bl	8008a10 <RAD_USBX_Fatfs_format_disk>
	        tmp.mean_kinetic_temp = 0.0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9312      	str	r3, [sp, #72]	@ 0x48
	        tmp.data_points_temp_count  = idx_temp;
 8007ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8007cc4 <main+0x7c0>)
		 csv_gen_template_file(&current_settings);
 8007ad8:	9807      	ldr	r0, [sp, #28]
	        tmp.data_points_temp_count  = idx_temp;
 8007ada:	881b      	ldrh	r3, [r3, #0]
	        tmp.start_time = start_time;
 8007adc:	9513      	str	r5, [sp, #76]	@ 0x4c
	        tmp.data_points_temp_count  = idx_temp;
 8007ade:	9317      	str	r3, [sp, #92]	@ 0x5c
	        tmp.start_time = start_time;
 8007ae0:	9514      	str	r5, [sp, #80]	@ 0x50
	        tmp.stop_time = stop_time;
 8007ae2:	9515      	str	r5, [sp, #84]	@ 0x54
	        tmp.data_points_radiation_count = 0;
 8007ae4:	9518      	str	r5, [sp, #96]	@ 0x60
		 csv_gen_template_file(&current_settings);
 8007ae6:	f003 fe4b 	bl	800b780 <csv_gen_template_file>
	     if(current_settings.report_format != 0x00){
 8007aea:	9b07      	ldr	r3, [sp, #28]
 8007aec:	3379      	adds	r3, #121	@ 0x79
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <main+0x600>
	    pdf_gen_template_file();
 8007af4:	f004 fb4c 	bl	800c190 <pdf_gen_template_file>
	    pdf_append_all_flash_log_entries();
 8007af8:	f004 fbb2 	bl	800c260 <pdf_append_all_flash_log_entries>
	    pdf_gen_completed_report(&tmp,&cfg);
 8007afc:	a91c      	add	r1, sp, #112	@ 0x70
 8007afe:	a80d      	add	r0, sp, #52	@ 0x34
 8007b00:	f004 fc3c 	bl	800c37c <pdf_gen_completed_report>
		  RAD_USBX_Device_Init();
 8007b04:	f000 feb4 	bl	8008870 <RAD_USBX_Device_Init>
		  usb_inited = 1;
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8007cc8 <main+0x7c4>)
 8007b0c:	701a      	strb	r2, [r3, #0]
		  RAD_USBX_Device_Process();
 8007b0e:	f000 fef1 	bl	80088f4 <RAD_USBX_Device_Process>
		  LCD_Clear_Display(LCD_data);
 8007b12:	0020      	movs	r0, r4
 8007b14:	f7fd f8f0 	bl	8004cf8 <LCD_Clear_Display>
		  LCD_Display_USB(LCD_data);
 8007b18:	0020      	movs	r0, r4
 8007b1a:	f7fc ff39 	bl	8004990 <LCD_Display_USB>
		  USB_HID_Receive(USB_rev_buff, &len);
 8007b1e:	496c      	ldr	r1, [pc, #432]	@ (8007cd0 <main+0x7cc>)
 8007b20:	486c      	ldr	r0, [pc, #432]	@ (8007cd4 <main+0x7d0>)
 8007b22:	f000 ffe7 	bl	8008af4 <USB_HID_Receive>
		  if (usbx_host_req_records == 1) {
 8007b26:	4b6c      	ldr	r3, [pc, #432]	@ (8007cd8 <main+0x7d4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d113      	bne.n	8007b56 <main+0x652>
		      if ((HAL_GetTick() - usb_send_record_prevTick) >= USB_HID_SEND_RECORDS_SPEED_MS) {
 8007b2e:	f006 fba7 	bl	800e280 <HAL_GetTick>
 8007b32:	4c6a      	ldr	r4, [pc, #424]	@ (8007cdc <main+0x7d8>)
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	1ac0      	subs	r0, r0, r3
 8007b38:	2802      	cmp	r0, #2
 8007b3a:	d90c      	bls.n	8007b56 <main+0x652>
		          if (USB_HID_Send_Record(cur_record_num) != 0) {
 8007b3c:	4d68      	ldr	r5, [pc, #416]	@ (8007ce0 <main+0x7dc>)
 8007b3e:	6828      	ldr	r0, [r5, #0]
 8007b40:	b280      	uxth	r0, r0
 8007b42:	f000 ff01 	bl	8008948 <USB_HID_Send_Record>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d102      	bne.n	8007b50 <main+0x64c>
		              cur_record_num++;
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	602b      	str	r3, [r5, #0]
		          usb_send_record_prevTick = HAL_GetTick();
 8007b50:	f006 fb96 	bl	800e280 <HAL_GetTick>
 8007b54:	6020      	str	r0, [r4, #0]
	  if (HAL_GetTick() - prevTick >= 1000)
 8007b56:	f006 fb93 	bl	800e280 <HAL_GetTick>
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	1ac0      	subs	r0, r0, r3
 8007b5e:	23fa      	movs	r3, #250	@ 0xfa
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4298      	cmp	r0, r3
 8007b64:	d398      	bcc.n	8007a98 <main+0x594>
		  Press_Action();
 8007b66:	f7fe ff5b 	bl	8006a20 <Press_Action>
		  Read_Temp();
 8007b6a:	f7fd fd41 	bl	80055f0 <Read_Temp>
		  if (USB_State){
 8007b6e:	7833      	ldrb	r3, [r6, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d100      	bne.n	8007b76 <main+0x672>
 8007b74:	e0fc      	b.n	8007d70 <main+0x86c>
			  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007b76:	2180      	movs	r1, #128	@ 0x80
 8007b78:	484b      	ldr	r0, [pc, #300]	@ (8007ca8 <main+0x7a4>)
 8007b7a:	0189      	lsls	r1, r1, #6
 8007b7c:	f007 fe10 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8007b80:	1e43      	subs	r3, r0, #1
 8007b82:	4198      	sbcs	r0, r3
 8007b84:	b2c0      	uxtb	r0, r0
 8007b86:	7030      	strb	r0, [r6, #0]
			  if (!USB_State) {
 8007b88:	7833      	ldrb	r3, [r6, #0]
 8007b8a:	b2dc      	uxtb	r4, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d119      	bne.n	8007bc4 <main+0x6c0>
			     printf("USB non State!\r\n");
 8007b90:	4854      	ldr	r0, [pc, #336]	@ (8007ce4 <main+0x7e0>)
 8007b92:	f012 fb53 	bl	801a23c <puts>
			     Save_CurrentSettings();
 8007b96:	f001 ff3f 	bl	8009a18 <Save_CurrentSettings>
			     LCD_Clear_Display(LCD_data);
 8007b9a:	4849      	ldr	r0, [pc, #292]	@ (8007cc0 <main+0x7bc>)
 8007b9c:	f7fd f8ac 	bl	8004cf8 <LCD_Clear_Display>
			  if(current_settings.start_mode == 0x00 || current_settings.start_mode == 0x01){
 8007ba0:	4d3d      	ldr	r5, [pc, #244]	@ (8007c98 <main+0x794>)
 8007ba2:	4e51      	ldr	r6, [pc, #324]	@ (8007ce8 <main+0x7e4>)
 8007ba4:	002b      	movs	r3, r5
 8007ba6:	7832      	ldrb	r2, [r6, #0]
 8007ba8:	338c      	adds	r3, #140	@ 0x8c
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	d835      	bhi.n	8007c1a <main+0x716>
			     if(current_settings.mode_status == 0x00){
 8007bae:	781d      	ldrb	r5, [r3, #0]
 8007bb0:	2d00      	cmp	r5, #0
 8007bb2:	d119      	bne.n	8007be8 <main+0x6e4>
			    	 printf("Button Start_Stop\r\n");
 8007bb4:	484d      	ldr	r0, [pc, #308]	@ (8007cec <main+0x7e8>)
 8007bb6:	f012 fb41 	bl	801a23c <puts>
 	  	 		     Switch_Backup_reg(MODE_Stop);
 8007bba:	2002      	movs	r0, #2
 8007bbc:	f7fe f9d0 	bl	8005f60 <Switch_Backup_reg>
 	  	 		    First_Measure = 0;
 8007bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8007cf0 <main+0x7ec>)
	   	  	 			 button_flag = false;
 8007bc2:	701d      	strb	r5, [r3, #0]
		  if (!usb_inited)
 8007bc4:	4b40      	ldr	r3, [pc, #256]	@ (8007cc8 <main+0x7c4>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <main+0x6dc>
		  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007bcc:	2180      	movs	r1, #128	@ 0x80
 8007bce:	4836      	ldr	r0, [pc, #216]	@ (8007ca8 <main+0x7a4>)
 8007bd0:	0189      	lsls	r1, r1, #6
 8007bd2:	f007 fde5 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8007bd6:	1e43      	subs	r3, r0, #1
 8007bd8:	4198      	sbcs	r0, r3
 8007bda:	4b36      	ldr	r3, [pc, #216]	@ (8007cb4 <main+0x7b0>)
 8007bdc:	b2c0      	uxtb	r0, r0
 8007bde:	7018      	strb	r0, [r3, #0]
	  	  prevTick = HAL_GetTick();
 8007be0:	f006 fb4e 	bl	800e280 <HAL_GetTick>
 8007be4:	9006      	str	r0, [sp, #24]
 8007be6:	e757      	b.n	8007a98 <main+0x594>
			     else if (current_settings.mode_status == 0x01 || current_settings.mode_status == 0x02){
 8007be8:	1e6b      	subs	r3, r5, #1
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d80b      	bhi.n	8007c06 <main+0x702>
			    	 printf("Return to Pause Mode\r\n");
 8007bee:	4841      	ldr	r0, [pc, #260]	@ (8007cf4 <main+0x7f0>)
 8007bf0:	f012 fb24 	bl	801a23c <puts>
			       Set_ModeStatus(mode_internal_backup_pause);
 8007bf4:	2002      	movs	r0, #2
 8007bf6:	f002 f8f7 	bl	8009de8 <Set_ModeStatus>
	  	 		    Switch_Backup_reg(MODE_Pause);
 8007bfa:	2004      	movs	r0, #4
		  	 		    Switch_Backup_reg(MODE_End);
 8007bfc:	f7fe f9b0 	bl	8005f60 <Switch_Backup_reg>
		  	 		    First_Measure = 0;
 8007c00:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf0 <main+0x7ec>)
	   	  	 			 button_flag = false;
 8007c02:	701c      	strb	r4, [r3, #0]
	   	  	 	     	 Tick_Save = 0;
 8007c04:	e7de      	b.n	8007bc4 <main+0x6c0>
			     else if (current_settings.mode_status == 0x03){
 8007c06:	2d03      	cmp	r5, #3
 8007c08:	d1dc      	bne.n	8007bc4 <main+0x6c0>
			    	 printf("Return to End Mode\r\n");
 8007c0a:	483b      	ldr	r0, [pc, #236]	@ (8007cf8 <main+0x7f4>)
 8007c0c:	f012 fb16 	bl	801a23c <puts>
			    	 Set_ModeStatus(mode_internal_backup_end);
 8007c10:	0028      	movs	r0, r5
 8007c12:	f002 f8e9 	bl	8009de8 <Set_ModeStatus>
		  	 		    Switch_Backup_reg(MODE_End);
 8007c16:	2007      	movs	r0, #7
 8007c18:	e7f0      	b.n	8007bfc <main+0x6f8>
				  if(current_settings.mode_status == 0x00){ // SW Start
 8007c1a:	781c      	ldrb	r4, [r3, #0]
 8007c1c:	2c00      	cmp	r4, #0
 8007c1e:	d1d1      	bne.n	8007bc4 <main+0x6c0>
					  printf("SW Start !!!!\r\n");
 8007c20:	4836      	ldr	r0, [pc, #216]	@ (8007cfc <main+0x7f8>)
 8007c22:	f012 fb0b 	bl	801a23c <puts>
	  	 		      if(current_settings.start_mode == 0x03){
 8007c26:	7836      	ldrb	r6, [r6, #0]
 8007c28:	2e03      	cmp	r6, #3
 8007c2a:	d000      	beq.n	8007c2e <main+0x72a>
 8007c2c:	e082      	b.n	8007d34 <main+0x830>
	  	 		    	printf("SW Delay Mode\r\n");// SW Delay Start 전체
 8007c2e:	4834      	ldr	r0, [pc, #208]	@ (8007d00 <main+0x7fc>)
 8007c30:	f012 fb04 	bl	801a23c <puts>
	  	 				if (current_settings.start_delay > 0){// SW Start Delay
 8007c34:	002a      	movs	r2, r5
 8007c36:	002b      	movs	r3, r5
 8007c38:	3265      	adds	r2, #101	@ 0x65
 8007c3a:	7812      	ldrb	r2, [r2, #0]
 8007c3c:	3364      	adds	r3, #100	@ 0x64
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	0212      	lsls	r2, r2, #8
 8007c42:	431a      	orrs	r2, r3
 8007c44:	002b      	movs	r3, r5
 8007c46:	3366      	adds	r3, #102	@ 0x66
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	3567      	adds	r5, #103	@ 0x67
 8007c4c:	782d      	ldrb	r5, [r5, #0]
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	4313      	orrs	r3, r2
 8007c52:	062d      	lsls	r5, r5, #24
 8007c54:	431d      	orrs	r5, r3
 8007c56:	4b2b      	ldr	r3, [pc, #172]	@ (8007d04 <main+0x800>)
 8007c58:	9306      	str	r3, [sp, #24]
 8007c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8007d08 <main+0x804>)
 8007c5c:	9307      	str	r3, [sp, #28]
 8007c5e:	d055      	beq.n	8007d0c <main+0x808>
	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8007c60:	2006      	movs	r0, #6
 8007c62:	f7fe f97d 	bl	8005f60 <Switch_Backup_reg>
   	  	 		        SW_count = 0;
 8007c66:	9b06      	ldr	r3, [sp, #24]
 8007c68:	701c      	strb	r4, [r3, #0]
   	  	 			    button_flag = false;
 8007c6a:	9b07      	ldr	r3, [sp, #28]
 8007c6c:	e7c9      	b.n	8007c02 <main+0x6fe>
 8007c6e:	46c0      	nop			@ (mov r8, r8)
 8007c70:	20000b50 	.word	0x20000b50
 8007c74:	7fff8000 	.word	0x7fff8000
 8007c78:	00022200 	.word	0x00022200
 8007c7c:	0801d8e6 	.word	0x0801d8e6
 8007c80:	0801d90d 	.word	0x0801d90d
 8007c84:	20000500 	.word	0x20000500
 8007c88:	0801d94a 	.word	0x0801d94a
 8007c8c:	40010200 	.word	0x40010200
 8007c90:	0801d956 	.word	0x0801d956
 8007c94:	0801d964 	.word	0x0801d964
 8007c98:	20002bac 	.word	0x20002bac
 8007c9c:	0801d973 	.word	0x0801d973
 8007ca0:	50000400 	.word	0x50000400
 8007ca4:	2000004c 	.word	0x2000004c
 8007ca8:	50000800 	.word	0x50000800
 8007cac:	2000000a 	.word	0x2000000a
 8007cb0:	0801d983 	.word	0x0801d983
 8007cb4:	20000536 	.word	0x20000536
 8007cb8:	0801d9bd 	.word	0x0801d9bd
 8007cbc:	0801d9d9 	.word	0x0801d9d9
 8007cc0:	20000514 	.word	0x20000514
 8007cc4:	200004fe 	.word	0x200004fe
 8007cc8:	200004e0 	.word	0x200004e0
 8007ccc:	20002c38 	.word	0x20002c38
 8007cd0:	2000052c 	.word	0x2000052c
 8007cd4:	2000000c 	.word	0x2000000c
 8007cd8:	20000b74 	.word	0x20000b74
 8007cdc:	200004dc 	.word	0x200004dc
 8007ce0:	200004f4 	.word	0x200004f4
 8007ce4:	0801d9e8 	.word	0x0801d9e8
 8007ce8:	20002c0f 	.word	0x20002c0f
 8007cec:	0801d9f8 	.word	0x0801d9f8
 8007cf0:	20000534 	.word	0x20000534
 8007cf4:	0801da0b 	.word	0x0801da0b
 8007cf8:	0801da21 	.word	0x0801da21
 8007cfc:	0801da35 	.word	0x0801da35
 8007d00:	0801da44 	.word	0x0801da44
 8007d04:	20000537 	.word	0x20000537
 8007d08:	20000538 	.word	0x20000538
	  	 					printf("SW Delay Mode : Delay is 0\r\n");// SW Delay Start 전체
 8007d0c:	48d4      	ldr	r0, [pc, #848]	@ (8008060 <main+0xb5c>)
 8007d0e:	f012 fa95 	bl	801a23c <puts>
	  	 			     Set_ModeStatus(mode_internal_backup_start);
 8007d12:	2001      	movs	r0, #1
 8007d14:	f002 f868 	bl	8009de8 <Set_ModeStatus>
	   	  	 			 Switch_Backup_reg(MODE_Start);
 8007d18:	0030      	movs	r0, r6
 8007d1a:	f7fe f921 	bl	8005f60 <Switch_Backup_reg>
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007d1e:	f7fe fb05 	bl	800632c <Load_IndexNum_From_Backup>
	   	  	 			 Interval_LCD_Count = 1;
 8007d22:	2201      	movs	r2, #1
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007d24:	4bcf      	ldr	r3, [pc, #828]	@ (8008064 <main+0xb60>)
 8007d26:	8018      	strh	r0, [r3, #0]
	   	  	 			 Interval_LCD_Count = 1;
 8007d28:	4bcf      	ldr	r3, [pc, #828]	@ (8008068 <main+0xb64>)
 8007d2a:	601a      	str	r2, [r3, #0]
	   	  	 		     SW_count = 0;
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	701d      	strb	r5, [r3, #0]
	   	  	 			 button_flag = false;
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	e746      	b.n	8007bc2 <main+0x6be>
	  	 			  else if(current_settings.start_mode == 0x02){
 8007d34:	2e02      	cmp	r6, #2
 8007d36:	d113      	bne.n	8007d60 <main+0x85c>
	  	 				printf("SW Start Mode, Direct start\r\n");// SW Delay Start 전체
 8007d38:	48cc      	ldr	r0, [pc, #816]	@ (800806c <main+0xb68>)
 8007d3a:	f012 fa7f 	bl	801a23c <puts>
	  	 				Set_ModeStatus(mode_internal_backup_start);
 8007d3e:	2001      	movs	r0, #1
 8007d40:	f002 f852 	bl	8009de8 <Set_ModeStatus>
	   	  	 			 Switch_Backup_reg(MODE_Start);
 8007d44:	2003      	movs	r0, #3
	   	  	 			 Switch_Backup_reg(Mode_Start_Delay);
 8007d46:	f7fe f90b 	bl	8005f60 <Switch_Backup_reg>
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007d4a:	f7fe faef 	bl	800632c <Load_IndexNum_From_Backup>
	   	  	 			 Interval_LCD_Count = 1;
 8007d4e:	2201      	movs	r2, #1
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007d50:	4bc4      	ldr	r3, [pc, #784]	@ (8008064 <main+0xb60>)
 8007d52:	8018      	strh	r0, [r3, #0]
	   	  	 			 Interval_LCD_Count = 1;
 8007d54:	4bc4      	ldr	r3, [pc, #784]	@ (8008068 <main+0xb64>)
 8007d56:	601a      	str	r2, [r3, #0]
	   	  	 		     SW_count = 0;
 8007d58:	4bc5      	ldr	r3, [pc, #788]	@ (8008070 <main+0xb6c>)
 8007d5a:	701c      	strb	r4, [r3, #0]
	   	  	 			 button_flag = false;
 8007d5c:	4bc5      	ldr	r3, [pc, #788]	@ (8008074 <main+0xb70>)
 8007d5e:	e750      	b.n	8007c02 <main+0x6fe>
	  	 			  else if(current_settings.start_mode == 0x04){ // Target time start mode
 8007d60:	2e04      	cmp	r6, #4
 8007d62:	d000      	beq.n	8007d66 <main+0x862>
 8007d64:	e72e      	b.n	8007bc4 <main+0x6c0>
	  	 				printf("Target time start\r\n");// SW Delay Start 전체
 8007d66:	48c4      	ldr	r0, [pc, #784]	@ (8008078 <main+0xb74>)
 8007d68:	f012 fa68 	bl	801a23c <puts>
	   	  	 			 Switch_Backup_reg(Mode_Start_Delay);
 8007d6c:	2006      	movs	r0, #6
 8007d6e:	e7ea      	b.n	8007d46 <main+0x842>
			  if (First_Measure>1){
 8007d70:	2200      	movs	r2, #0
 8007d72:	4bc2      	ldr	r3, [pc, #776]	@ (800807c <main+0xb78>)
 8007d74:	9306      	str	r3, [sp, #24]
 8007d76:	569a      	ldrsb	r2, [r3, r2]
 8007d78:	4bc1      	ldr	r3, [pc, #772]	@ (8008080 <main+0xb7c>)
 8007d7a:	2a01      	cmp	r2, #1
 8007d7c:	dc00      	bgt.n	8007d80 <main+0x87c>
 8007d7e:	e22a      	b.n	80081d6 <main+0xcd2>
			  if (Meas_Mode == 0){ // ////////////////////////////////////////Boot
 8007d80:	7818      	ldrb	r0, [r3, #0]
 8007d82:	2806      	cmp	r0, #6
 8007d84:	d819      	bhi.n	8007dba <main+0x8b6>
 8007d86:	f7f8 f9e5 	bl	8000154 <__gnu_thumb1_case_uhi>
 8007d8a:	0007      	.short	0x0007
 8007d8c:	0064001c 	.word	0x0064001c
 8007d90:	00ff00f8 	.word	0x00ff00f8
 8007d94:	01be01b4 	.word	0x01be01b4
				  printf("Boot\r\n");
 8007d98:	48ba      	ldr	r0, [pc, #744]	@ (8008084 <main+0xb80>)
 8007d9a:	f012 fa4f 	bl	801a23c <puts>
				  RTC_Disable_All_Wakeup();
 8007d9e:	f7fd fc9d 	bl	80056dc <RTC_Disable_All_Wakeup>
				  meas_data_log_erase();  // USB Boot
 8007da2:	f000 fc7d 	bl	80086a0 <meas_data_log_erase>
				  RAD_USBX_Clean_Vol();
 8007da6:	f000 fe97 	bl	8008ad8 <RAD_USBX_Clean_Vol>
				  RAD_USBX_Fatfs_format_disk();
 8007daa:	f000 fe31 	bl	8008a10 <RAD_USBX_Fatfs_format_disk>
				  Set_ModeStatus(mode_internal_backup_stop);
 8007dae:	2000      	movs	r0, #0
 8007db0:	f002 f81a 	bl	8009de8 <Set_ModeStatus>
				  Switch_Backup_reg(MODE_Stop);
 8007db4:	2002      	movs	r0, #2
 8007db6:	f7fe f8d3 	bl	8005f60 <Switch_Backup_reg>
			  HAL_LCD_UpdateDisplayRequest(& hlcd);
 8007dba:	48b3      	ldr	r0, [pc, #716]	@ (8008088 <main+0xb84>)
 8007dbc:	f007 fd61 	bl	800f882 <HAL_LCD_UpdateDisplayRequest>
 8007dc0:	e700      	b.n	8007bc4 <main+0x6c0>
				  Short_Measure();
 8007dc2:	f7fe ff77 	bl	8006cb4 <Short_Measure>
				  switch (LCD_mode) {
 8007dc6:	4db1      	ldr	r5, [pc, #708]	@ (800808c <main+0xb88>)
 8007dc8:	4cb1      	ldr	r4, [pc, #708]	@ (8008090 <main+0xb8c>)
 8007dca:	782b      	ldrb	r3, [r5, #0]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d01e      	beq.n	8007e0e <main+0x90a>
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d020      	beq.n	8007e16 <main+0x912>
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d122      	bne.n	8007e1e <main+0x91a>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007dd8:	003b      	movs	r3, r7
 8007dda:	338a      	adds	r3, #138	@ 0x8a
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	4bad      	ldr	r3, [pc, #692]	@ (8008094 <main+0xb90>)
 8007de0:	0021      	movs	r1, r4
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	f7fc f974 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007de8:	003b      	movs	r3, r7
 8007dea:	338b      	adds	r3, #139	@ 0x8b
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	4baa      	ldr	r3, [pc, #680]	@ (8008098 <main+0xb94>)
 8007df0:	49aa      	ldr	r1, [pc, #680]	@ (800809c <main+0xb98>)
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	f7fb ff3a 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007df8:	2000      	movs	r0, #0
 8007dfa:	0021      	movs	r1, r4
 8007dfc:	f7fc fd8c 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Stop_Display(LCD_data);
 8007e00:	0020      	movs	r0, r4
 8007e02:	f7fc ff23 	bl	8004c4c <Small_Stop_Display>
				  printf("Stop\r\n");
 8007e06:	48a6      	ldr	r0, [pc, #664]	@ (80080a0 <main+0xb9c>)
				  printf("Start(Button)\r\n");
 8007e08:	f012 fa18 	bl	801a23c <puts>
 8007e0c:	e7d5      	b.n	8007dba <main+0x8b6>
				        	 LCD_Display_date(LCD_data);
 8007e0e:	0020      	movs	r0, r4
 8007e10:	f7fc fc64 	bl	80046dc <LCD_Display_date>
 8007e14:	e7f0      	b.n	8007df8 <main+0x8f4>
				        	 LCD_Display_Time(LCD_data);
 8007e16:	0020      	movs	r0, r4
 8007e18:	f7fc fcf0 	bl	80047fc <LCD_Display_Time>
				        	 LCD_Display_Battery(0, LCD_data);
 8007e1c:	e7ec      	b.n	8007df8 <main+0x8f4>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007e1e:	003b      	movs	r3, r7
 8007e20:	338a      	adds	r3, #138	@ 0x8a
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	4b9b      	ldr	r3, [pc, #620]	@ (8008094 <main+0xb90>)
 8007e26:	0021      	movs	r1, r4
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	f7fc f951 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007e2e:	003b      	movs	r3, r7
 8007e30:	338b      	adds	r3, #139	@ 0x8b
 8007e32:	781a      	ldrb	r2, [r3, #0]
 8007e34:	4b98      	ldr	r3, [pc, #608]	@ (8008098 <main+0xb94>)
 8007e36:	4999      	ldr	r1, [pc, #612]	@ (800809c <main+0xb98>)
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f7fb ff17 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007e3e:	0021      	movs	r1, r4
 8007e40:	2000      	movs	r0, #0
 8007e42:	f7fc fd69 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Stop_Display(LCD_data);
 8007e46:	0020      	movs	r0, r4
 8007e48:	f7fc ff00 	bl	8004c4c <Small_Stop_Display>
				        	 LCD_mode = 1;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	702b      	strb	r3, [r5, #0]
				        	 break;
 8007e50:	e7d9      	b.n	8007e06 <main+0x902>
				  Interval_Measure();
 8007e52:	f7ff f9ef 	bl	8007234 <Interval_Measure>
				  if (Interval_LCD_Count>0){
 8007e56:	4d84      	ldr	r5, [pc, #528]	@ (8008068 <main+0xb64>)
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d039      	beq.n	8007ed2 <main+0x9ce>
					  if(Interval_LCD_Count<=7 ){
 8007e5e:	2b07      	cmp	r3, #7
 8007e60:	d900      	bls.n	8007e64 <main+0x960>
 8007e62:	e088      	b.n	8007f76 <main+0xa72>
				  switch (LCD_mode) {
 8007e64:	4e89      	ldr	r6, [pc, #548]	@ (800808c <main+0xb88>)
 8007e66:	4c8a      	ldr	r4, [pc, #552]	@ (8008090 <main+0xb8c>)
 8007e68:	7830      	ldrb	r0, [r6, #0]
 8007e6a:	3801      	subs	r0, #1
 8007e6c:	2806      	cmp	r0, #6
 8007e6e:	d865      	bhi.n	8007f3c <main+0xa38>
 8007e70:	f7f8 f95c 	bl	800012c <__gnu_thumb1_case_uqi>
 8007e74:	35311c04 	.word	0x35311c04
 8007e78:	5c4c      	.short	0x5c4c
 8007e7a:	60          	.byte	0x60
 8007e7b:	00          	.byte	0x00
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007e7c:	003b      	movs	r3, r7
 8007e7e:	338a      	adds	r3, #138	@ 0x8a
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	4b84      	ldr	r3, [pc, #528]	@ (8008094 <main+0xb90>)
 8007e84:	0021      	movs	r1, r4
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	f7fc f922 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007e8c:	003b      	movs	r3, r7
 8007e8e:	338b      	adds	r3, #139	@ 0x8b
 8007e90:	781a      	ldrb	r2, [r3, #0]
 8007e92:	4b81      	ldr	r3, [pc, #516]	@ (8008098 <main+0xb94>)
 8007e94:	4981      	ldr	r1, [pc, #516]	@ (800809c <main+0xb98>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	f7fb fee8 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007e9c:	0021      	movs	r1, r4
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f7fc fd3a 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Start_Display(LCD_data);
 8007ea4:	0020      	movs	r0, r4
 8007ea6:	f7fc fee1 	bl	8004c6c <Small_Start_Display>
				        	 Mark_Display(LCD_data);
 8007eaa:	e00c      	b.n	8007ec6 <main+0x9c2>
				        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b7d      	ldr	r3, [pc, #500]	@ (80080a4 <main+0xba0>)
 8007eb0:	8818      	ldrh	r0, [r3, #0]
 8007eb2:	0021      	movs	r1, r4
 8007eb4:	f7fd f938 	bl	8005128 <LCD_Display_LP>
				        	 Small_Start_Display(LCD_data);
 8007eb8:	0020      	movs	r0, r4
 8007eba:	f7fc fed7 	bl	8004c6c <Small_Start_Display>
				        	 LCD_Display_Battery(0, LCD_data);
 8007ebe:	0021      	movs	r1, r4
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f7fc fd29 	bl	8004918 <LCD_Display_Battery>
				        	 Mark_Display(LCD_data);
 8007ec6:	0020      	movs	r0, r4
 8007ec8:	f7fc fee0 	bl	8004c8c <Mark_Display>
				  Interval_LCD_Count++;
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	3301      	adds	r3, #1
						  Interval_LCD_Count = 0;
 8007ed0:	602b      	str	r3, [r5, #0]
				  printf("Start (Interval)\r\n");
 8007ed2:	4875      	ldr	r0, [pc, #468]	@ (80080a8 <main+0xba4>)
 8007ed4:	e798      	b.n	8007e08 <main+0x904>
				        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8007ed6:	4b75      	ldr	r3, [pc, #468]	@ (80080ac <main+0xba8>)
 8007ed8:	2201      	movs	r2, #1
 8007eda:	8818      	ldrh	r0, [r3, #0]
 8007edc:	e7e9      	b.n	8007eb2 <main+0x9ae>
				        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	5e18      	ldrsh	r0, [r3, r0]
 8007ee4:	f7f9 fc22 	bl	800172c <__aeabi_i2f>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	0021      	movs	r1, r4
 8007eec:	f7fc f940 	bl	8004170 <LCD_Display_Temp_MinMax>
				        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 8007ef0:	9b05      	ldr	r3, [sp, #20]
 8007ef2:	4e6a      	ldr	r6, [pc, #424]	@ (800809c <main+0xb98>)
 8007ef4:	6858      	ldr	r0, [r3, #4]
 8007ef6:	210a      	movs	r1, #10
 8007ef8:	f7f8 f936 	bl	8000168 <__udivsi3>
 8007efc:	2200      	movs	r2, #0
 8007efe:	0031      	movs	r1, r6
 8007f00:	f7fb feb4 	bl	8003c6c <LCD_Display_Dose>
				        	 Max_Display(LCD_data);
 8007f04:	0020      	movs	r0, r4
 8007f06:	f7fc fed7 	bl	8004cb8 <Max_Display>
				        	 Small_Start_Display(LCD_data);
 8007f0a:	e7d5      	b.n	8007eb8 <main+0x9b4>
				        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	2002      	movs	r0, #2
 8007f10:	5e18      	ldrsh	r0, [r3, r0]
 8007f12:	f7f9 fc0b 	bl	800172c <__aeabi_i2f>
 8007f16:	2200      	movs	r2, #0
 8007f18:	0021      	movs	r1, r4
 8007f1a:	f7fc f929 	bl	8004170 <LCD_Display_Temp_MinMax>
				        	 Blank_Dose_Display(LCD_data);
 8007f1e:	0020      	movs	r0, r4
 8007f20:	f7fc fdf0 	bl	8004b04 <Blank_Dose_Display>
				        	 Min_Display(LCD_data);
 8007f24:	0020      	movs	r0, r4
 8007f26:	f7fc fed7 	bl	8004cd8 <Min_Display>
				        	 Small_Start_Display(LCD_data);
 8007f2a:	e7c5      	b.n	8007eb8 <main+0x9b4>
				        	 LCD_Display_date(LCD_data);
 8007f2c:	0020      	movs	r0, r4
 8007f2e:	f7fc fbd5 	bl	80046dc <LCD_Display_date>
				        	 LCD_Display_Battery(0, LCD_data);
 8007f32:	e7b3      	b.n	8007e9c <main+0x998>
				        	 LCD_Display_Time(LCD_data);
 8007f34:	0020      	movs	r0, r4
 8007f36:	f7fc fc61 	bl	80047fc <LCD_Display_Time>
 8007f3a:	e7af      	b.n	8007e9c <main+0x998>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007f3c:	003b      	movs	r3, r7
 8007f3e:	338a      	adds	r3, #138	@ 0x8a
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	4b54      	ldr	r3, [pc, #336]	@ (8008094 <main+0xb90>)
 8007f44:	0021      	movs	r1, r4
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	f7fc f8c2 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007f4c:	003b      	movs	r3, r7
 8007f4e:	338b      	adds	r3, #139	@ 0x8b
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	4b51      	ldr	r3, [pc, #324]	@ (8008098 <main+0xb94>)
 8007f54:	4951      	ldr	r1, [pc, #324]	@ (800809c <main+0xb98>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	f7fb fe88 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007f5c:	0021      	movs	r1, r4
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f7fc fcda 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Start_Display(LCD_data);
 8007f64:	0020      	movs	r0, r4
 8007f66:	f7fc fe81 	bl	8004c6c <Small_Start_Display>
				        	 Mark_Display(LCD_data);
 8007f6a:	0020      	movs	r0, r4
 8007f6c:	f7fc fe8e 	bl	8004c8c <Mark_Display>
				        	 LCD_mode = 1;
 8007f70:	2301      	movs	r3, #1
 8007f72:	7033      	strb	r3, [r6, #0]
				        	 break;
 8007f74:	e7aa      	b.n	8007ecc <main+0x9c8>
						  Interval_LCD_Count = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e7aa      	b.n	8007ed0 <main+0x9cc>
				   Short_Measure();
 8007f7a:	f7fe fe9b 	bl	8006cb4 <Short_Measure>
				   LCD_Display_PauseMode(LCD_data);
 8007f7e:	4844      	ldr	r0, [pc, #272]	@ (8008090 <main+0xb8c>)
 8007f80:	f7fc fe1e 	bl	8004bc0 <LCD_Display_PauseMode>
				  printf("Pause\r\n");
 8007f84:	484a      	ldr	r0, [pc, #296]	@ (80080b0 <main+0xbac>)
 8007f86:	e73f      	b.n	8007e08 <main+0x904>
				  Short_Measure();
 8007f88:	f7fe fe94 	bl	8006cb4 <Short_Measure>
				  switch (LCD_mode) {
 8007f8c:	4d3f      	ldr	r5, [pc, #252]	@ (800808c <main+0xb88>)
 8007f8e:	4c40      	ldr	r4, [pc, #256]	@ (8008090 <main+0xb8c>)
 8007f90:	7828      	ldrb	r0, [r5, #0]
 8007f92:	3801      	subs	r0, #1
 8007f94:	2806      	cmp	r0, #6
 8007f96:	d900      	bls.n	8007f9a <main+0xa96>
 8007f98:	e08e      	b.n	80080b8 <main+0xbb4>
 8007f9a:	f7f8 f8c7 	bl	800012c <__gnu_thumb1_case_uqi>
 8007f9e:	1c04      	.short	0x1c04
 8007fa0:	5949322e 	.word	0x5949322e
 8007fa4:	5d          	.byte	0x5d
 8007fa5:	00          	.byte	0x00
			        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007fa6:	003b      	movs	r3, r7
 8007fa8:	338a      	adds	r3, #138	@ 0x8a
 8007faa:	781a      	ldrb	r2, [r3, #0]
 8007fac:	4b39      	ldr	r3, [pc, #228]	@ (8008094 <main+0xb90>)
 8007fae:	0021      	movs	r1, r4
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f7fc f88d 	bl	80040d0 <LCD_Display_Temp>
			        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007fb6:	003b      	movs	r3, r7
 8007fb8:	338b      	adds	r3, #139	@ 0x8b
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	4b36      	ldr	r3, [pc, #216]	@ (8008098 <main+0xb94>)
 8007fbe:	4937      	ldr	r1, [pc, #220]	@ (800809c <main+0xb98>)
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	f7fb fe53 	bl	8003c6c <LCD_Display_Dose>
			        	 LCD_Display_Battery(0, LCD_data);
 8007fc6:	0021      	movs	r1, r4
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7fc fca5 	bl	8004918 <LCD_Display_Battery>
			        	 Small_Start_Display(LCD_data);
 8007fce:	0020      	movs	r0, r4
 8007fd0:	f7fc fe4c 	bl	8004c6c <Small_Start_Display>
			        	 Mark_Display(LCD_data);
 8007fd4:	e00c      	b.n	8007ff0 <main+0xaec>
			        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4b32      	ldr	r3, [pc, #200]	@ (80080a4 <main+0xba0>)
 8007fda:	8818      	ldrh	r0, [r3, #0]
 8007fdc:	0021      	movs	r1, r4
 8007fde:	f7fd f8a3 	bl	8005128 <LCD_Display_LP>
			        	 Small_Start_Display(LCD_data);
 8007fe2:	0020      	movs	r0, r4
 8007fe4:	f7fc fe42 	bl	8004c6c <Small_Start_Display>
			        	 LCD_Display_Battery(0, LCD_data);
 8007fe8:	0021      	movs	r1, r4
 8007fea:	2000      	movs	r0, #0
 8007fec:	f7fc fc94 	bl	8004918 <LCD_Display_Battery>
			        	 Mark_Display(LCD_data);
 8007ff0:	0020      	movs	r0, r4
 8007ff2:	f7fc fe4b 	bl	8004c8c <Mark_Display>
				  printf("Start(Button)\r\n");
 8007ff6:	482f      	ldr	r0, [pc, #188]	@ (80080b4 <main+0xbb0>)
 8007ff8:	e706      	b.n	8007e08 <main+0x904>
			        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8007ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80080ac <main+0xba8>)
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	8818      	ldrh	r0, [r3, #0]
 8008000:	e7ec      	b.n	8007fdc <main+0xad8>
			        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 8008002:	9b05      	ldr	r3, [sp, #20]
 8008004:	2000      	movs	r0, #0
 8008006:	5e18      	ldrsh	r0, [r3, r0]
 8008008:	f7f9 fb90 	bl	800172c <__aeabi_i2f>
 800800c:	2200      	movs	r2, #0
 800800e:	0021      	movs	r1, r4
 8008010:	f7fc f8ae 	bl	8004170 <LCD_Display_Temp_MinMax>
			        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 8008014:	9b05      	ldr	r3, [sp, #20]
 8008016:	4d21      	ldr	r5, [pc, #132]	@ (800809c <main+0xb98>)
 8008018:	6858      	ldr	r0, [r3, #4]
 800801a:	210a      	movs	r1, #10
 800801c:	f7f8 f8a4 	bl	8000168 <__udivsi3>
 8008020:	2200      	movs	r2, #0
 8008022:	0029      	movs	r1, r5
 8008024:	f7fb fe22 	bl	8003c6c <LCD_Display_Dose>
			        	 Max_Display(LCD_data);
 8008028:	0020      	movs	r0, r4
 800802a:	f7fc fe45 	bl	8004cb8 <Max_Display>
			        	 Small_Start_Display(LCD_data);
 800802e:	e7d8      	b.n	8007fe2 <main+0xade>
			        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	2002      	movs	r0, #2
 8008034:	5e18      	ldrsh	r0, [r3, r0]
 8008036:	f7f9 fb79 	bl	800172c <__aeabi_i2f>
 800803a:	2200      	movs	r2, #0
 800803c:	0021      	movs	r1, r4
 800803e:	f7fc f897 	bl	8004170 <LCD_Display_Temp_MinMax>
			        	 Blank_Dose_Display(LCD_data);
 8008042:	0020      	movs	r0, r4
 8008044:	f7fc fd5e 	bl	8004b04 <Blank_Dose_Display>
			        	 Min_Display(LCD_data);
 8008048:	0020      	movs	r0, r4
 800804a:	f7fc fe45 	bl	8004cd8 <Min_Display>
			        	 Small_Start_Display(LCD_data);
 800804e:	e7c8      	b.n	8007fe2 <main+0xade>
			        	 LCD_Display_date(LCD_data);
 8008050:	0020      	movs	r0, r4
 8008052:	f7fc fb43 	bl	80046dc <LCD_Display_date>
			        	 LCD_Display_Battery(0, LCD_data);
 8008056:	e7b6      	b.n	8007fc6 <main+0xac2>
			        	 LCD_Display_Time(LCD_data);
 8008058:	0020      	movs	r0, r4
 800805a:	f7fc fbcf 	bl	80047fc <LCD_Display_Time>
 800805e:	e7b2      	b.n	8007fc6 <main+0xac2>
 8008060:	0801da53 	.word	0x0801da53
 8008064:	2000004c 	.word	0x2000004c
 8008068:	2000053c 	.word	0x2000053c
 800806c:	0801da6f 	.word	0x0801da6f
 8008070:	20000537 	.word	0x20000537
 8008074:	20000538 	.word	0x20000538
 8008078:	0801da8c 	.word	0x0801da8c
 800807c:	20000534 	.word	0x20000534
 8008080:	20000535 	.word	0x20000535
 8008084:	0801d950 	.word	0x0801d950
 8008088:	20000a80 	.word	0x20000a80
 800808c:	20000503 	.word	0x20000503
 8008090:	20000514 	.word	0x20000514
 8008094:	20000544 	.word	0x20000544
 8008098:	20000530 	.word	0x20000530
 800809c:	20000504 	.word	0x20000504
 80080a0:	0801da05 	.word	0x0801da05
 80080a4:	200004fe 	.word	0x200004fe
 80080a8:	0801da9f 	.word	0x0801da9f
 80080ac:	20000500 	.word	0x20000500
 80080b0:	0801dab1 	.word	0x0801dab1
 80080b4:	0801dab8 	.word	0x0801dab8
			        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 80080b8:	003b      	movs	r3, r7
 80080ba:	338a      	adds	r3, #138	@ 0x8a
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	4bcd      	ldr	r3, [pc, #820]	@ (80083f4 <main+0xef0>)
 80080c0:	0021      	movs	r1, r4
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	f7fc f804 	bl	80040d0 <LCD_Display_Temp>
			        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 80080c8:	003b      	movs	r3, r7
 80080ca:	338b      	adds	r3, #139	@ 0x8b
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	4bca      	ldr	r3, [pc, #808]	@ (80083f8 <main+0xef4>)
 80080d0:	49ca      	ldr	r1, [pc, #808]	@ (80083fc <main+0xef8>)
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	f7fb fdca 	bl	8003c6c <LCD_Display_Dose>
			        	 LCD_Display_Battery(0, LCD_data);
 80080d8:	0021      	movs	r1, r4
 80080da:	2000      	movs	r0, #0
 80080dc:	f7fc fc1c 	bl	8004918 <LCD_Display_Battery>
			        	 Small_Start_Display(LCD_data);
 80080e0:	0020      	movs	r0, r4
 80080e2:	f7fc fdc3 	bl	8004c6c <Small_Start_Display>
			        	 Mark_Display(LCD_data);
 80080e6:	0020      	movs	r0, r4
 80080e8:	f7fc fdd0 	bl	8004c8c <Mark_Display>
			        	 LCD_mode = 1;
 80080ec:	2301      	movs	r3, #1
 80080ee:	702b      	strb	r3, [r5, #0]
			        	 break;
 80080f0:	e781      	b.n	8007ff6 <main+0xaf2>
				    Non_Measure();
 80080f2:	f7fe fdfd 	bl	8006cf0 <Non_Measure>
			  		Get_And_Print_Seconds_Left_ToStart();
 80080f6:	f001 fe85 	bl	8009e04 <Get_And_Print_Seconds_Left_ToStart>
			  		LCD_Display_DelayMode(start_remaining, LCD_data);
 80080fa:	4bc1      	ldr	r3, [pc, #772]	@ (8008400 <main+0xefc>)
 80080fc:	49c1      	ldr	r1, [pc, #772]	@ (8008404 <main+0xf00>)
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	f7fd f8ac 	bl	800525c <LCD_Display_DelayMode>
 8008104:	e659      	b.n	8007dba <main+0x8b6>
				  Non_Measure();
 8008106:	f7fe fdf3 	bl	8006cf0 <Non_Measure>
  				  switch (LCD_mode) {
 800810a:	4dbf      	ldr	r5, [pc, #764]	@ (8008408 <main+0xf04>)
 800810c:	4cbd      	ldr	r4, [pc, #756]	@ (8008404 <main+0xf00>)
 800810e:	7828      	ldrb	r0, [r5, #0]
 8008110:	3801      	subs	r0, #1
 8008112:	2805      	cmp	r0, #5
 8008114:	d84c      	bhi.n	80081b0 <main+0xcac>
 8008116:	f7f8 f809 	bl	800012c <__gnu_thumb1_case_uqi>
 800811a:	1503      	.short	0x1503
 800811c:	473c2c19 	.word	0x473c2c19
			        	     LCD_Display_LP(idx_temp, LCD_data, 0);
 8008120:	2200      	movs	r2, #0
 8008122:	4bba      	ldr	r3, [pc, #744]	@ (800840c <main+0xf08>)
 8008124:	8818      	ldrh	r0, [r3, #0]
			        	     LCD_Display_LP(idx_rad, LCD_data, 1);
 8008126:	0021      	movs	r1, r4
 8008128:	f7fc fffe 	bl	8005128 <LCD_Display_LP>
			        	     Small_Stop_Display(LCD_data);
 800812c:	0020      	movs	r0, r4
 800812e:	f7fc fd8d 	bl	8004c4c <Small_Stop_Display>
			        	     LCD_Display_Battery(0, LCD_data);
 8008132:	0021      	movs	r1, r4
 8008134:	2000      	movs	r0, #0
 8008136:	f7fc fbef 	bl	8004918 <LCD_Display_Battery>
			        	     Mark_Display(LCD_data);
 800813a:	0020      	movs	r0, r4
 800813c:	f7fc fda6 	bl	8004c8c <Mark_Display>
				  printf("End\r\n");
 8008140:	48b3      	ldr	r0, [pc, #716]	@ (8008410 <main+0xf0c>)
 8008142:	e661      	b.n	8007e08 <main+0x904>
			        	     LCD_Display_LP(idx_rad, LCD_data, 1);
 8008144:	4bb3      	ldr	r3, [pc, #716]	@ (8008414 <main+0xf10>)
 8008146:	2201      	movs	r2, #1
 8008148:	8818      	ldrh	r0, [r3, #0]
 800814a:	e7ec      	b.n	8008126 <main+0xc22>
  				        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 800814c:	9b05      	ldr	r3, [sp, #20]
 800814e:	2000      	movs	r0, #0
 8008150:	5e18      	ldrsh	r0, [r3, r0]
 8008152:	f7f9 faeb 	bl	800172c <__aeabi_i2f>
 8008156:	0021      	movs	r1, r4
 8008158:	2200      	movs	r2, #0
 800815a:	f7fc f809 	bl	8004170 <LCD_Display_Temp_MinMax>
  				        	 LCD_Display_Dose(device_config.dose_max, LCD_data_dose, 0x00);
 800815e:	9b05      	ldr	r3, [sp, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	6858      	ldr	r0, [r3, #4]
 8008164:	49a5      	ldr	r1, [pc, #660]	@ (80083fc <main+0xef8>)
 8008166:	f7fb fd81 	bl	8003c6c <LCD_Display_Dose>
  				        	 Max_Display(LCD_data);
 800816a:	0020      	movs	r0, r4
 800816c:	f7fc fda4 	bl	8004cb8 <Max_Display>
  				        	 Small_Stop_Display(LCD_data);
 8008170:	e7dc      	b.n	800812c <main+0xc28>
  				        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	2002      	movs	r0, #2
 8008176:	5e18      	ldrsh	r0, [r3, r0]
 8008178:	f7f9 fad8 	bl	800172c <__aeabi_i2f>
 800817c:	2200      	movs	r2, #0
 800817e:	0021      	movs	r1, r4
 8008180:	f7fb fff6 	bl	8004170 <LCD_Display_Temp_MinMax>
  				        	 Blank_Dose_Display(LCD_data);
 8008184:	0020      	movs	r0, r4
 8008186:	f7fc fcbd 	bl	8004b04 <Blank_Dose_Display>
  				        	 Min_Display(LCD_data);
 800818a:	0020      	movs	r0, r4
 800818c:	f7fc fda4 	bl	8004cd8 <Min_Display>
  				        	 Small_Stop_Display(LCD_data);
 8008190:	e7cc      	b.n	800812c <main+0xc28>
  				        	 LCD_Display_date(LCD_data);
 8008192:	0020      	movs	r0, r4
 8008194:	f7fc faa2 	bl	80046dc <LCD_Display_date>
  				        	 LCD_Display_Battery(0, LCD_data);
 8008198:	0021      	movs	r1, r4
 800819a:	2000      	movs	r0, #0
 800819c:	f7fc fbbc 	bl	8004918 <LCD_Display_Battery>
  				        	 Small_Stop_Display(LCD_data);
 80081a0:	0020      	movs	r0, r4
 80081a2:	f7fc fd53 	bl	8004c4c <Small_Stop_Display>
  				        	 Mark_Display(LCD_data);
 80081a6:	e7c8      	b.n	800813a <main+0xc36>
  				        	 LCD_Display_Time(LCD_data);
 80081a8:	0020      	movs	r0, r4
 80081aa:	f7fc fb27 	bl	80047fc <LCD_Display_Time>
 80081ae:	e7f3      	b.n	8008198 <main+0xc94>
			        	     LCD_Display_LP(idx_temp, LCD_data, 0);
 80081b0:	4b96      	ldr	r3, [pc, #600]	@ (800840c <main+0xf08>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	8818      	ldrh	r0, [r3, #0]
 80081b6:	0021      	movs	r1, r4
 80081b8:	f7fc ffb6 	bl	8005128 <LCD_Display_LP>
			        	     Small_Stop_Display(LCD_data);
 80081bc:	0020      	movs	r0, r4
 80081be:	f7fc fd45 	bl	8004c4c <Small_Stop_Display>
			        	     LCD_Display_Battery(0, LCD_data);
 80081c2:	0021      	movs	r1, r4
 80081c4:	2000      	movs	r0, #0
 80081c6:	f7fc fba7 	bl	8004918 <LCD_Display_Battery>
			           	     Mark_Display(LCD_data);
 80081ca:	0020      	movs	r0, r4
 80081cc:	f7fc fd5e 	bl	8004c8c <Mark_Display>
  				        	 LCD_mode = 1;
 80081d0:	2301      	movs	r3, #1
 80081d2:	702b      	strb	r3, [r5, #0]
  				        	 break;
 80081d4:	e7b4      	b.n	8008140 <main+0xc3c>
				  if (First_Measure == 0){
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d137      	bne.n	800824a <main+0xd46>
					  if(Meas_Mode == 2 || Meas_Mode == 4){
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	32fd      	adds	r2, #253	@ 0xfd
 80081de:	3b02      	subs	r3, #2
 80081e0:	001d      	movs	r5, r3
 80081e2:	4015      	ands	r5, r2
 80081e4:	4213      	tst	r3, r2
 80081e6:	d12d      	bne.n	8008244 <main+0xd40>
    if (current_settings.end_target_seconds == 0) return false;   // 미사용
 80081e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008418 <main+0xf14>)
 80081ea:	4e8c      	ldr	r6, [pc, #560]	@ (800841c <main+0xf18>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	7832      	ldrb	r2, [r6, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	4313      	orrs	r3, r2
 80081f4:	4a8a      	ldr	r2, [pc, #552]	@ (8008420 <main+0xf1c>)
 80081f6:	4c8b      	ldr	r4, [pc, #556]	@ (8008424 <main+0xf20>)
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	34ae      	adds	r4, #174	@ 0xae
 80081fc:	0412      	lsls	r2, r2, #16
 80081fe:	431a      	orrs	r2, r3
 8008200:	7823      	ldrb	r3, [r4, #0]
 8008202:	061b      	lsls	r3, r3, #24
 8008204:	4313      	orrs	r3, r2
 8008206:	d01d      	beq.n	8008244 <main+0xd40>
    uint32_t now = now_epoch_from_rtc();
 8008208:	f7fd f91c 	bl	8005444 <now_epoch_from_rtc>
    return now >= current_settings.end_target_seconds;
 800820c:	4b82      	ldr	r3, [pc, #520]	@ (8008418 <main+0xf14>)
 800820e:	7832      	ldrb	r2, [r6, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	4313      	orrs	r3, r2
 8008216:	4a82      	ldr	r2, [pc, #520]	@ (8008420 <main+0xf1c>)
 8008218:	7812      	ldrb	r2, [r2, #0]
 800821a:	0412      	lsls	r2, r2, #16
 800821c:	431a      	orrs	r2, r3
 800821e:	7823      	ldrb	r3, [r4, #0]
 8008220:	061b      	lsls	r3, r3, #24
 8008222:	4313      	orrs	r3, r2
						  if (Has_Logging_Duration_Ended()) {
 8008224:	4298      	cmp	r0, r3
 8008226:	d30d      	bcc.n	8008244 <main+0xd40>
			 	  	 			RTC_Disable_All_Wakeup();
 8008228:	f7fd fa58 	bl	80056dc <RTC_Disable_All_Wakeup>
			 	  	 		    Switch_Backup_reg(MODE_End);
 800822c:	2007      	movs	r0, #7
 800822e:	f7fd fe97 	bl	8005f60 <Switch_Backup_reg>
			                    Set_ModeStatus(mode_internal_backup_end);
 8008232:	2003      	movs	r0, #3
 8008234:	f001 fdd8 	bl	8009de8 <Set_ModeStatus>
			 	  	 		    SW_count = 0;
 8008238:	4b7b      	ldr	r3, [pc, #492]	@ (8008428 <main+0xf24>)
 800823a:	701d      	strb	r5, [r3, #0]
			 	  	 	     	button_flag = false;
 800823c:	4b7b      	ldr	r3, [pc, #492]	@ (800842c <main+0xf28>)
 800823e:	701d      	strb	r5, [r3, #0]
			 	  	 	        First_Measure = 0;
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	701d      	strb	r5, [r3, #0]
					  LCD_Clear_Display(LCD_data);
 8008244:	486f      	ldr	r0, [pc, #444]	@ (8008404 <main+0xf00>)
 8008246:	f7fc fd57 	bl	8004cf8 <LCD_Clear_Display>
			  	  First_Measure++;
 800824a:	4c79      	ldr	r4, [pc, #484]	@ (8008430 <main+0xf2c>)
			  	  printf("First Count : '%u'\r\n", First_Measure);
 800824c:	4879      	ldr	r0, [pc, #484]	@ (8008434 <main+0xf30>)
			  	  First_Measure++;
 800824e:	7821      	ldrb	r1, [r4, #0]
 8008250:	3101      	adds	r1, #1
 8008252:	b249      	sxtb	r1, r1
 8008254:	7021      	strb	r1, [r4, #0]
			  	  printf("First Count : '%u'\r\n", First_Measure);
 8008256:	f011 ff81 	bl	801a15c <iprintf>
			  if (Meas_Mode == 0){ // Boot
 800825a:	4b77      	ldr	r3, [pc, #476]	@ (8008438 <main+0xf34>)
 800825c:	7818      	ldrb	r0, [r3, #0]
 800825e:	2806      	cmp	r0, #6
 8008260:	d80e      	bhi.n	8008280 <main+0xd7c>
 8008262:	f7f7 ff77 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008266:	0007      	.short	0x0007
 8008268:	001b0011 	.word	0x001b0011
 800826c:	00230112 	.word	0x00230112
 8008270:	012a011c 	.word	0x012a011c
				  printf("Boot\r\n");
 8008274:	4871      	ldr	r0, [pc, #452]	@ (800843c <main+0xf38>)
 8008276:	f011 ffe1 	bl	801a23c <puts>
				  LCD_Display_Boot(LCD_data);
 800827a:	4862      	ldr	r0, [pc, #392]	@ (8008404 <main+0xf00>)
 800827c:	f7fc fc06 	bl	8004a8c <LCD_Display_Boot>
			  comp1_count = 0;
 8008280:	2200      	movs	r2, #0
 8008282:	4b6f      	ldr	r3, [pc, #444]	@ (8008440 <main+0xf3c>)
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e598      	b.n	8007dba <main+0x8b6>
				  printf("Stop\r\n");
 8008288:	486e      	ldr	r0, [pc, #440]	@ (8008444 <main+0xf40>)
 800828a:	f011 ffd7 	bl	801a23c <puts>
				  LCD_mode = 1;
 800828e:	2201      	movs	r2, #1
 8008290:	4b5d      	ldr	r3, [pc, #372]	@ (8008408 <main+0xf04>)
				  LCD_Display_StopMode(LCD_data);
 8008292:	485c      	ldr	r0, [pc, #368]	@ (8008404 <main+0xf00>)
				  LCD_mode = 1;
 8008294:	701a      	strb	r2, [r3, #0]
				  LCD_Display_StopMode(LCD_data);
 8008296:	f7fc fc47 	bl	8004b28 <LCD_Display_StopMode>
 800829a:	e7f1      	b.n	8008280 <main+0xd7c>
				  if(!RTC_During_Wakeup)
 800829c:	4b6a      	ldr	r3, [pc, #424]	@ (8008448 <main+0xf44>)
 800829e:	781a      	ldrb	r2, [r3, #0]
					  if(Interval_LCD_Count >=1){
 80082a0:	4b6a      	ldr	r3, [pc, #424]	@ (800844c <main+0xf48>)
 80082a2:	681b      	ldr	r3, [r3, #0]
				  if(!RTC_During_Wakeup)
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	d133      	bne.n	8008310 <main+0xe0c>
					  if(Interval_LCD_Count >=1){
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0e9      	beq.n	8008280 <main+0xd7c>
				      if (First_Measure==1){
 80082ac:	2300      	movs	r3, #0
 80082ae:	56e3      	ldrsb	r3, [r4, r3]
				      LCD_Display_InTime_LT(current_settings.temp_interval, LCD_data);
 80082b0:	4954      	ldr	r1, [pc, #336]	@ (8008404 <main+0xf00>)
				      if (First_Measure==1){
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d114      	bne.n	80082e0 <main+0xddc>
				      LCD_Display_InTime_LT(current_settings.temp_interval, LCD_data);
 80082b6:	003a      	movs	r2, r7
 80082b8:	003b      	movs	r3, r7
 80082ba:	3276      	adds	r2, #118	@ 0x76
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	3375      	adds	r3, #117	@ 0x75
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	0212      	lsls	r2, r2, #8
 80082c4:	431a      	orrs	r2, r3
 80082c6:	003b      	movs	r3, r7
 80082c8:	3377      	adds	r3, #119	@ 0x77
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	4313      	orrs	r3, r2
 80082d0:	003a      	movs	r2, r7
 80082d2:	3278      	adds	r2, #120	@ 0x78
 80082d4:	7810      	ldrb	r0, [r2, #0]
 80082d6:	0600      	lsls	r0, r0, #24
 80082d8:	4318      	orrs	r0, r3
 80082da:	f7fc fffb 	bl	80052d4 <LCD_Display_InTime_LT>
 80082de:	e7cf      	b.n	8008280 <main+0xd7c>
				      LCD_Display_InTime_LR(current_settings.rad_interval, LCD_data);
 80082e0:	003a      	movs	r2, r7
 80082e2:	003b      	movs	r3, r7
 80082e4:	3272      	adds	r2, #114	@ 0x72
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	3371      	adds	r3, #113	@ 0x71
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	0212      	lsls	r2, r2, #8
 80082ee:	431a      	orrs	r2, r3
 80082f0:	003b      	movs	r3, r7
 80082f2:	3373      	adds	r3, #115	@ 0x73
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	4313      	orrs	r3, r2
 80082fa:	003a      	movs	r2, r7
 80082fc:	3274      	adds	r2, #116	@ 0x74
 80082fe:	7810      	ldrb	r0, [r2, #0]
 8008300:	0600      	lsls	r0, r0, #24
 8008302:	4318      	orrs	r0, r3
 8008304:	f7fd f826 	bl	8005354 <LCD_Display_InTime_LR>
				      LCD_mode = 1;
 8008308:	2201      	movs	r2, #1
 800830a:	4b3f      	ldr	r3, [pc, #252]	@ (8008408 <main+0xf04>)
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e7b7      	b.n	8008280 <main+0xd7c>
					  if (Interval_LCD_Count>0){
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0b5      	beq.n	8008280 <main+0xd7c>
					  switch (LCD_mode) {
 8008314:	4d3c      	ldr	r5, [pc, #240]	@ (8008408 <main+0xf04>)
 8008316:	4c3b      	ldr	r4, [pc, #236]	@ (8008404 <main+0xf00>)
 8008318:	7828      	ldrb	r0, [r5, #0]
 800831a:	3801      	subs	r0, #1
 800831c:	2806      	cmp	r0, #6
 800831e:	d900      	bls.n	8008322 <main+0xe1e>
 8008320:	e096      	b.n	8008450 <main+0xf4c>
 8008322:	f7f7 ff03 	bl	800012c <__gnu_thumb1_case_uqi>
 8008326:	1c04      	.short	0x1c04
 8008328:	5e4b312d 	.word	0x5e4b312d
 800832c:	62          	.byte	0x62
 800832d:	00          	.byte	0x00
					        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 800832e:	003b      	movs	r3, r7
 8008330:	338a      	adds	r3, #138	@ 0x8a
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	4b2f      	ldr	r3, [pc, #188]	@ (80083f4 <main+0xef0>)
 8008336:	0021      	movs	r1, r4
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f7fb fec9 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 800833e:	003b      	movs	r3, r7
 8008340:	338b      	adds	r3, #139	@ 0x8b
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	4b2c      	ldr	r3, [pc, #176]	@ (80083f8 <main+0xef4>)
 8008346:	492d      	ldr	r1, [pc, #180]	@ (80083fc <main+0xef8>)
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f7fb fc8f 	bl	8003c6c <LCD_Display_Dose>
					        	 LCD_Display_Battery(0, LCD_data);
 800834e:	0021      	movs	r1, r4
 8008350:	2000      	movs	r0, #0
 8008352:	f7fc fae1 	bl	8004918 <LCD_Display_Battery>
					        	 Small_Start_Display(LCD_data);
 8008356:	0020      	movs	r0, r4
 8008358:	f7fc fc88 	bl	8004c6c <Small_Start_Display>
 800835c:	e00c      	b.n	8008378 <main+0xe74>
					        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 800835e:	2200      	movs	r2, #0
 8008360:	4b2a      	ldr	r3, [pc, #168]	@ (800840c <main+0xf08>)
 8008362:	8818      	ldrh	r0, [r3, #0]
					        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8008364:	0021      	movs	r1, r4
 8008366:	f7fc fedf 	bl	8005128 <LCD_Display_LP>
					        	 Small_Start_Display(LCD_data);
 800836a:	0020      	movs	r0, r4
 800836c:	f7fc fc7e 	bl	8004c6c <Small_Start_Display>
					        	 LCD_Display_Battery(0, LCD_data);
 8008370:	0021      	movs	r1, r4
 8008372:	2000      	movs	r0, #0
 8008374:	f7fc fad0 	bl	8004918 <LCD_Display_Battery>
					        	 Mark_Display(LCD_data);
 8008378:	0020      	movs	r0, r4
 800837a:	f7fc fc87 	bl	8004c8c <Mark_Display>
					        	 break;
 800837e:	e77f      	b.n	8008280 <main+0xd7c>
					        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8008380:	4b24      	ldr	r3, [pc, #144]	@ (8008414 <main+0xf10>)
 8008382:	2201      	movs	r2, #1
 8008384:	8818      	ldrh	r0, [r3, #0]
 8008386:	e7ed      	b.n	8008364 <main+0xe60>
					        	 LCD_Display_Temp((float)device_config.temp_max , LCD_data, current_settings.display_temp_unit);
 8008388:	003b      	movs	r3, r7
 800838a:	338a      	adds	r3, #138	@ 0x8a
 800838c:	781d      	ldrb	r5, [r3, #0]
 800838e:	9b05      	ldr	r3, [sp, #20]
 8008390:	2000      	movs	r0, #0
 8008392:	5e18      	ldrsh	r0, [r3, r0]
 8008394:	f7f9 f9ca 	bl	800172c <__aeabi_i2f>
 8008398:	002a      	movs	r2, r5
 800839a:	0021      	movs	r1, r4
 800839c:	f7fb fe98 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	4d16      	ldr	r5, [pc, #88]	@ (80083fc <main+0xef8>)
 80083a4:	6858      	ldr	r0, [r3, #4]
 80083a6:	210a      	movs	r1, #10
 80083a8:	f7f7 fede 	bl	8000168 <__udivsi3>
 80083ac:	2200      	movs	r2, #0
 80083ae:	0029      	movs	r1, r5
 80083b0:	f7fb fc5c 	bl	8003c6c <LCD_Display_Dose>
					        	 Max_Display(LCD_data);
 80083b4:	0020      	movs	r0, r4
 80083b6:	f7fc fc7f 	bl	8004cb8 <Max_Display>
					        	 Small_Start_Display(LCD_data);
 80083ba:	e7d6      	b.n	800836a <main+0xe66>
					        	 LCD_Display_Temp((float)device_config.temp_min , LCD_data, current_settings.display_temp_unit);
 80083bc:	003b      	movs	r3, r7
 80083be:	338a      	adds	r3, #138	@ 0x8a
 80083c0:	781d      	ldrb	r5, [r3, #0]
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	2002      	movs	r0, #2
 80083c6:	5e18      	ldrsh	r0, [r3, r0]
 80083c8:	f7f9 f9b0 	bl	800172c <__aeabi_i2f>
 80083cc:	002a      	movs	r2, r5
 80083ce:	0021      	movs	r1, r4
 80083d0:	f7fb fe7e 	bl	80040d0 <LCD_Display_Temp>
					        	 Blank_Dose_Display(LCD_data);
 80083d4:	0020      	movs	r0, r4
 80083d6:	f7fc fb95 	bl	8004b04 <Blank_Dose_Display>
					        	 Min_Display(LCD_data);
 80083da:	0020      	movs	r0, r4
 80083dc:	f7fc fc7c 	bl	8004cd8 <Min_Display>
					        	 Small_Start_Display(LCD_data);
 80083e0:	e7c3      	b.n	800836a <main+0xe66>
					        	 LCD_Display_date(LCD_data);
 80083e2:	0020      	movs	r0, r4
 80083e4:	f7fc f97a 	bl	80046dc <LCD_Display_date>
					        	 LCD_Display_Battery(0, LCD_data);
 80083e8:	e7b1      	b.n	800834e <main+0xe4a>
					        	 LCD_Display_Time(LCD_data);
 80083ea:	0020      	movs	r0, r4
 80083ec:	f7fc fa06 	bl	80047fc <LCD_Display_Time>
 80083f0:	e7ad      	b.n	800834e <main+0xe4a>
 80083f2:	46c0      	nop			@ (mov r8, r8)
 80083f4:	20000544 	.word	0x20000544
 80083f8:	20000530 	.word	0x20000530
 80083fc:	20000504 	.word	0x20000504
 8008400:	200004f8 	.word	0x200004f8
 8008404:	20000514 	.word	0x20000514
 8008408:	20000503 	.word	0x20000503
 800840c:	200004fe 	.word	0x200004fe
 8008410:	0801d85b 	.word	0x0801d85b
 8008414:	20000500 	.word	0x20000500
 8008418:	20002c58 	.word	0x20002c58
 800841c:	20002c57 	.word	0x20002c57
 8008420:	20002c59 	.word	0x20002c59
 8008424:	20002bac 	.word	0x20002bac
 8008428:	20000537 	.word	0x20000537
 800842c:	20000538 	.word	0x20000538
 8008430:	20000534 	.word	0x20000534
 8008434:	0801dac7 	.word	0x0801dac7
 8008438:	20000535 	.word	0x20000535
 800843c:	0801d950 	.word	0x0801d950
 8008440:	20000560 	.word	0x20000560
 8008444:	0801da05 	.word	0x0801da05
 8008448:	200004fc 	.word	0x200004fc
 800844c:	2000053c 	.word	0x2000053c
					        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8008450:	003b      	movs	r3, r7
 8008452:	338a      	adds	r3, #138	@ 0x8a
 8008454:	781a      	ldrb	r2, [r3, #0]
 8008456:	4b1b      	ldr	r3, [pc, #108]	@ (80084c4 <main+0xfc0>)
 8008458:	0021      	movs	r1, r4
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	f7fb fe38 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8008460:	003b      	movs	r3, r7
 8008462:	338b      	adds	r3, #139	@ 0x8b
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	4b18      	ldr	r3, [pc, #96]	@ (80084c8 <main+0xfc4>)
 8008468:	4918      	ldr	r1, [pc, #96]	@ (80084cc <main+0xfc8>)
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	f7fb fbfe 	bl	8003c6c <LCD_Display_Dose>
					        	 LCD_Display_Battery(0, LCD_data);
 8008470:	0021      	movs	r1, r4
 8008472:	2000      	movs	r0, #0
 8008474:	f7fc fa50 	bl	8004918 <LCD_Display_Battery>
					        	 Small_Start_Display(LCD_data);
 8008478:	0020      	movs	r0, r4
 800847a:	f7fc fbf7 	bl	8004c6c <Small_Start_Display>
					        	 Mark_Display(LCD_data);
 800847e:	0020      	movs	r0, r4
 8008480:	f7fc fc04 	bl	8004c8c <Mark_Display>
					        	 LCD_mode = 1;
 8008484:	2301      	movs	r3, #1
 8008486:	702b      	strb	r3, [r5, #0]
					        	 break;
 8008488:	e6fa      	b.n	8008280 <main+0xd7c>
				  printf("Pause\r\n");
 800848a:	4811      	ldr	r0, [pc, #68]	@ (80084d0 <main+0xfcc>)
 800848c:	f011 fed6 	bl	801a23c <puts>
				  LCD_mode = 1;
 8008490:	2201      	movs	r2, #1
 8008492:	4b10      	ldr	r3, [pc, #64]	@ (80084d4 <main+0xfd0>)
				  LCD_Display_PauseMode(LCD_data);
 8008494:	4810      	ldr	r0, [pc, #64]	@ (80084d8 <main+0xfd4>)
				  LCD_mode = 1;
 8008496:	701a      	strb	r2, [r3, #0]
				  LCD_Display_PauseMode(LCD_data);
 8008498:	f7fc fb92 	bl	8004bc0 <LCD_Display_PauseMode>
 800849c:	e6f0      	b.n	8008280 <main+0xd7c>
				  if (First_Measure==1){
 800849e:	2300      	movs	r3, #0
 80084a0:	56e3      	ldrsb	r3, [r4, r3]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <main+0xfa6>
					  Maybe_Rearm_Reservation_OnWake();
 80084a6:	f7fd fa2b 	bl	8005900 <Maybe_Rearm_Reservation_OnWake>
			  	  Get_And_Print_Seconds_Left_ToStart();
 80084aa:	f001 fcab 	bl	8009e04 <Get_And_Print_Seconds_Left_ToStart>
			  	  LCD_Display_DelayMode(start_remaining, LCD_data);  // Delay Display 로 교체
 80084ae:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <main+0xfd8>)
 80084b0:	4909      	ldr	r1, [pc, #36]	@ (80084d8 <main+0xfd4>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	f7fc fed2 	bl	800525c <LCD_Display_DelayMode>
 80084b8:	e6e2      	b.n	8008280 <main+0xd7c>
				  LCD_Display_EndMode(LCD_data);
 80084ba:	4807      	ldr	r0, [pc, #28]	@ (80084d8 <main+0xfd4>)
 80084bc:	f7fc ff8a 	bl	80053d4 <LCD_Display_EndMode>
 80084c0:	e6de      	b.n	8008280 <main+0xd7c>
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	20000544 	.word	0x20000544
 80084c8:	20000530 	.word	0x20000530
 80084cc:	20000504 	.word	0x20000504
 80084d0:	0801dab1 	.word	0x0801dab1
 80084d4:	20000503 	.word	0x20000503
 80084d8:	20000514 	.word	0x20000514
 80084dc:	200004f8 	.word	0x200004f8

080084e0 <MX_USB_PCD_Init>:
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80084e0:	4808      	ldr	r0, [pc, #32]	@ (8008504 <MX_USB_PCD_Init+0x24>)
 80084e2:	4b09      	ldr	r3, [pc, #36]	@ (8008508 <MX_USB_PCD_Init+0x28>)
{
 80084e4:	b510      	push	{r4, lr}
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80084e6:	6003      	str	r3, [r0, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80084e8:	2382      	movs	r3, #130	@ 0x82
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	8083      	strh	r3, [r0, #4]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084ee:	2302      	movs	r3, #2
 80084f0:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	6083      	str	r3, [r0, #8]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80084f6:	f007 fcd9 	bl	800feac <HAL_PCD_Init>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d001      	beq.n	8008502 <MX_USB_PCD_Init+0x22>
 80084fe:	b672      	cpsid	i
  while (1)
 8008500:	e7fe      	b.n	8008500 <MX_USB_PCD_Init+0x20>
}
 8008502:	bd10      	pop	{r4, pc}
 8008504:	20000564 	.word	0x20000564
 8008508:	40005c00 	.word	0x40005c00

0800850c <HAL_COMP_TriggerCallback>:
      if (hcomp->Instance == COMP1)
 800850c:	4b04      	ldr	r3, [pc, #16]	@ (8008520 <HAL_COMP_TriggerCallback+0x14>)
 800850e:	6802      	ldr	r2, [r0, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d103      	bne.n	800851c <HAL_COMP_TriggerCallback+0x10>
          comp1_count++;
 8008514:	4a03      	ldr	r2, [pc, #12]	@ (8008524 <HAL_COMP_TriggerCallback+0x18>)
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	6013      	str	r3, [r2, #0]
  }
 800851c:	4770      	bx	lr
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	40010200 	.word	0x40010200
 8008524:	20000560 	.word	0x20000560

08008528 <EXTI0_1_IRQHandler>:
{
 8008528:	b510      	push	{r4, lr}
    HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800852a:	2001      	movs	r0, #1
 800852c:	f007 f946 	bl	800f7bc <HAL_GPIO_EXTI_IRQHandler>
}
 8008530:	bd10      	pop	{r4, pc}
	...

08008534 <HAL_GPIO_EXTI_Falling_Callback>:
{
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	0004      	movs	r4, r0
    if(GPIO_Pin == GPIO_PIN_0)
 8008538:	2801      	cmp	r0, #1
 800853a:	d11e      	bne.n	800857a <HAL_GPIO_EXTI_Falling_Callback+0x46>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) // 0=눌림
 800853c:	0001      	movs	r1, r0
 800853e:	20a0      	movs	r0, #160	@ 0xa0
 8008540:	05c0      	lsls	r0, r0, #23
 8008542:	f007 f92d 	bl	800f7a0 <HAL_GPIO_ReadPin>
 8008546:	2800      	cmp	r0, #0
 8008548:	d117      	bne.n	800857a <HAL_GPIO_EXTI_Falling_Callback+0x46>
            uint32_t now = HAL_GetTick();
 800854a:	f005 fe99 	bl	800e280 <HAL_GetTick>
            if (now - last_button_tick < DOUBLE_CLICK_MS) {
 800854e:	2596      	movs	r5, #150	@ 0x96
 8008550:	490b      	ldr	r1, [pc, #44]	@ (8008580 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8008552:	4a0c      	ldr	r2, [pc, #48]	@ (8008584 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8008554:	680b      	ldr	r3, [r1, #0]
 8008556:	006d      	lsls	r5, r5, #1
 8008558:	1ac3      	subs	r3, r0, r3
 800855a:	42ab      	cmp	r3, r5
 800855c:	d20e      	bcs.n	800857c <HAL_GPIO_EXTI_Falling_Callback+0x48>
                button_press_count++;
 800855e:	7813      	ldrb	r3, [r2, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	b2db      	uxtb	r3, r3
 8008564:	7013      	strb	r3, [r2, #0]
            button_flag = true;
 8008566:	2201      	movs	r2, #1
 8008568:	4b07      	ldr	r3, [pc, #28]	@ (8008588 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
            last_button_tick = now;
 800856a:	6008      	str	r0, [r1, #0]
            button_flag = true;
 800856c:	701a      	strb	r2, [r3, #0]
            if(Meas_Mode == 2){
 800856e:	4b07      	ldr	r3, [pc, #28]	@ (800858c <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d101      	bne.n	800857a <HAL_GPIO_EXTI_Falling_Callback+0x46>
                Interval_LCD_Count = 1;
 8008576:	4b06      	ldr	r3, [pc, #24]	@ (8008590 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bd70      	pop	{r4, r5, r6, pc}
                button_press_count = 1;
 800857c:	7014      	strb	r4, [r2, #0]
 800857e:	e7f2      	b.n	8008566 <HAL_GPIO_EXTI_Falling_Callback+0x32>
 8008580:	20000528 	.word	0x20000528
 8008584:	20000524 	.word	0x20000524
 8008588:	20000538 	.word	0x20000538
 800858c:	20000535 	.word	0x20000535
 8008590:	2000053c 	.word	0x2000053c

08008594 <HAL_RTCEx_WakeUpTimerEventCallback>:
{
 8008594:	b510      	push	{r4, lr}
	printf("Wake Up by RTC Timer!\r\n");
 8008596:	480b      	ldr	r0, [pc, #44]	@ (80085c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8008598:	f011 fe50 	bl	801a23c <puts>
	    if(Meas_Mode != 5){
 800859c:	4b0a      	ldr	r3, [pc, #40]	@ (80085c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	2a05      	cmp	r2, #5
 80085a2:	d00c      	beq.n	80085be <HAL_RTCEx_WakeUpTimerEventCallback+0x2a>
	        Meas_Mode = 2;
 80085a4:	2202      	movs	r2, #2
 80085a6:	701a      	strb	r2, [r3, #0]
	        Tick_Save = 0;
 80085a8:	2200      	movs	r2, #0
 80085aa:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 80085ac:	601a      	str	r2, [r3, #0]
	        First_Measure = -1;
 80085ae:	4b08      	ldr	r3, [pc, #32]	@ (80085d0 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 80085b0:	32ff      	adds	r2, #255	@ 0xff
 80085b2:	701a      	strb	r2, [r3, #0]
	        RTC_During_Wakeup = 1;
 80085b4:	4b07      	ldr	r3, [pc, #28]	@ (80085d4 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 80085b6:	3afe      	subs	r2, #254	@ 0xfe
 80085b8:	701a      	strb	r2, [r3, #0]
	    Load_Backup_Index();}
 80085ba:	f7fd fee5 	bl	8006388 <Load_Backup_Index>
	    RTC_Disable_All_Wakeup();
 80085be:	f7fd f88d 	bl	80056dc <RTC_Disable_All_Wakeup>
}
 80085c2:	bd10      	pop	{r4, pc}
 80085c4:	0801dadc 	.word	0x0801dadc
 80085c8:	20000535 	.word	0x20000535
 80085cc:	20000540 	.word	0x20000540
 80085d0:	20000534 	.word	0x20000534
 80085d4:	200004fc 	.word	0x200004fc

080085d8 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80085d8:	b510      	push	{r4, lr}
	printf("Wake Up by RTC Alarm!\r\n");
 80085da:	480b      	ldr	r0, [pc, #44]	@ (8008608 <HAL_RTC_AlarmAEventCallback+0x30>)
 80085dc:	f011 fe2e 	bl	801a23c <puts>
	    if(Meas_Mode != 5){
 80085e0:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <HAL_RTC_AlarmAEventCallback+0x34>)
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	2a05      	cmp	r2, #5
 80085e6:	d00c      	beq.n	8008602 <HAL_RTC_AlarmAEventCallback+0x2a>
	        Meas_Mode = 2;
 80085e8:	2202      	movs	r2, #2
 80085ea:	701a      	strb	r2, [r3, #0]
	        Tick_Save = 0;
 80085ec:	2200      	movs	r2, #0
 80085ee:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <HAL_RTC_AlarmAEventCallback+0x38>)
 80085f0:	601a      	str	r2, [r3, #0]
	        First_Measure = -1;
 80085f2:	4b08      	ldr	r3, [pc, #32]	@ (8008614 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80085f4:	32ff      	adds	r2, #255	@ 0xff
 80085f6:	701a      	strb	r2, [r3, #0]
	        RTC_During_Wakeup = 1;
 80085f8:	4b07      	ldr	r3, [pc, #28]	@ (8008618 <HAL_RTC_AlarmAEventCallback+0x40>)
 80085fa:	3afe      	subs	r2, #254	@ 0xfe
 80085fc:	701a      	strb	r2, [r3, #0]
	    Load_Backup_Index();}
 80085fe:	f7fd fec3 	bl	8006388 <Load_Backup_Index>
	    RTC_Disable_All_Wakeup();
 8008602:	f7fd f86b 	bl	80056dc <RTC_Disable_All_Wakeup>
}
 8008606:	bd10      	pop	{r4, pc}
 8008608:	0801daf3 	.word	0x0801daf3
 800860c:	20000535 	.word	0x20000535
 8008610:	20000540 	.word	0x20000540
 8008614:	20000534 	.word	0x20000534
 8008618:	200004fc 	.word	0x200004fc

0800861c <Error_Handler>:
 800861c:	b672      	cpsid	i
  while (1)
 800861e:	e7fe      	b.n	800861e <Error_Handler+0x2>

08008620 <meas_data_log_fast_init>:
//            log_write_offset = offset;
//}

void meas_data_log_fast_init(uint16_t index_num)
{
    log_write_offset = index_num * ENTRY_SIZE;
 8008620:	2315      	movs	r3, #21
 8008622:	4358      	muls	r0, r3
    if (log_write_offset > LOG_MAX_SIZE)  // 오버런 방지
 8008624:	2380      	movs	r3, #128	@ 0x80
    log_write_offset = index_num * ENTRY_SIZE;
 8008626:	4a03      	ldr	r2, [pc, #12]	@ (8008634 <meas_data_log_fast_init+0x14>)
    if (log_write_offset > LOG_MAX_SIZE)  // 오버런 방지
 8008628:	035b      	lsls	r3, r3, #13
 800862a:	4298      	cmp	r0, r3
 800862c:	d900      	bls.n	8008630 <meas_data_log_fast_init+0x10>
 800862e:	0018      	movs	r0, r3
    log_write_offset = index_num * ENTRY_SIZE;
 8008630:	6010      	str	r0, [r2, #0]
        log_write_offset = LOG_MAX_SIZE;
}
 8008632:	4770      	bx	lr
 8008634:	20000b70 	.word	0x20000b70

08008638 <meas_data_log_write>:

void meas_data_log_write(const uint8_t *data, size_t len)
{


    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 8008638:	2380      	movs	r3, #128	@ 0x80
{
 800863a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800863c:	000d      	movs	r5, r1
    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 800863e:	4f12      	ldr	r7, [pc, #72]	@ (8008688 <meas_data_log_write+0x50>)
 8008640:	035b      	lsls	r3, r3, #13
 8008642:	683e      	ldr	r6, [r7, #0]
{
 8008644:	9001      	str	r0, [sp, #4]
    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 8008646:	18f6      	adds	r6, r6, r3
    size_t remaining = len;
    const uint8_t *p = data;

    while (remaining) {
 8008648:	2d00      	cmp	r5, #0
 800864a:	d106      	bne.n	800865a <meas_data_log_write+0x22>
        log_write_offset += chunk;

//        printf("[DEBUG] Chunk written: chunk=%lu, next_offset=%lu\r\n", (unsigned long)chunk, (unsigned long)log_write_offset);
    }

    if (log_write_offset >= LOG_MAX_SIZE) {
 800864c:	2380      	movs	r3, #128	@ 0x80
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	035b      	lsls	r3, r3, #13
 8008652:	429a      	cmp	r2, r3
 8008654:	d300      	bcc.n	8008658 <meas_data_log_write+0x20>
//        printf("[WARN] log_write_offset overflow! Reset to 0\r\n");
        log_write_offset = 0;
 8008656:	603d      	str	r5, [r7, #0]
    }
}
 8008658:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        uint32_t off = addr % LOG_PAGE_SIZE;
 800865a:	24ff      	movs	r4, #255	@ 0xff
        uint32_t chunk = LOG_PAGE_SIZE - off;
 800865c:	2380      	movs	r3, #128	@ 0x80
        uint32_t off = addr % LOG_PAGE_SIZE;
 800865e:	4034      	ands	r4, r6
        uint32_t chunk = LOG_PAGE_SIZE - off;
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	1b1c      	subs	r4, r3, r4
        if (chunk > remaining) chunk = remaining;
 8008664:	42ac      	cmp	r4, r5
 8008666:	d900      	bls.n	800866a <meas_data_log_write+0x32>
 8008668:	002c      	movs	r4, r5
        SPI_FLASH_PageProgram(addr, (uint8_t*)p, chunk);
 800866a:	0030      	movs	r0, r6
 800866c:	0022      	movs	r2, r4
 800866e:	9901      	ldr	r1, [sp, #4]
 8008670:	f001 fd10 	bl	800a094 <SPI_FLASH_PageProgram>
        p += chunk;
 8008674:	9b01      	ldr	r3, [sp, #4]
        addr += chunk;
 8008676:	1936      	adds	r6, r6, r4
        p += chunk;
 8008678:	191b      	adds	r3, r3, r4
 800867a:	9301      	str	r3, [sp, #4]
        log_write_offset += chunk;
 800867c:	683b      	ldr	r3, [r7, #0]
        remaining -= chunk;
 800867e:	1b2d      	subs	r5, r5, r4
        log_write_offset += chunk;
 8008680:	191b      	adds	r3, r3, r4
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	e7e0      	b.n	8008648 <meas_data_log_write+0x10>
 8008686:	46c0      	nop			@ (mov r8, r8)
 8008688:	20000b70 	.word	0x20000b70

0800868c <meas_data_log_read>:


void meas_data_log_read(uint32_t offset, uint8_t *buf, size_t len)
{
    if (offset + len > LOG_MAX_SIZE) return;
 800868c:	2380      	movs	r3, #128	@ 0x80
{
 800868e:	b510      	push	{r4, lr}
    if (offset + len > LOG_MAX_SIZE) return;
 8008690:	1884      	adds	r4, r0, r2
 8008692:	035b      	lsls	r3, r3, #13
 8008694:	429c      	cmp	r4, r3
 8008696:	d802      	bhi.n	800869e <meas_data_log_read+0x12>
    SPI_FLASH_ReadData(LOG_BASE_ADDR + offset, buf, len);
 8008698:	18c0      	adds	r0, r0, r3
 800869a:	f001 fd41 	bl	800a120 <SPI_FLASH_ReadData>
}
 800869e:	bd10      	pop	{r4, pc}

080086a0 <meas_data_log_erase>:
//
//    log_write_offset = 0;
//    printf("[ERASE] All sectors processed. log_write_offset reset.\r\n");
//}
void meas_data_log_erase(void) // 3번 Check
{
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	4c16      	ldr	r4, [pc, #88]	@ (80086fc <meas_data_log_erase+0x5c>)
        bool erased_ok = false;

        for (int attempt = 0; attempt < 3 && !erased_ok; attempt++)  // 최대 3회 시도
        {
            SPI_FLASH_EraseSector(addr);
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 80086a4:	2680      	movs	r6, #128	@ 0x80
{
 80086a6:	44a5      	add	sp, r4
 80086a8:	2480      	movs	r4, #128	@ 0x80

            erased_ok = true;
 80086aa:	2701      	movs	r7, #1
{
 80086ac:	0364      	lsls	r4, r4, #13
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 80086ae:	0176      	lsls	r6, r6, #5
{
 80086b0:	2503      	movs	r5, #3
            SPI_FLASH_EraseSector(addr);
 80086b2:	0020      	movs	r0, r4
 80086b4:	f001 fcaa 	bl	800a00c <SPI_FLASH_EraseSector>
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 80086b8:	0032      	movs	r2, r6
 80086ba:	4669      	mov	r1, sp
 80086bc:	0020      	movs	r0, r4
 80086be:	f001 fd2f 	bl	800a120 <SPI_FLASH_ReadData>
            for (uint32_t i = 0; i < LOG_SECTOR_SIZE; i++) {
 80086c2:	2300      	movs	r3, #0
                if (buf[i] != 0xFF) {
 80086c4:	466a      	mov	r2, sp
 80086c6:	5cd2      	ldrb	r2, [r2, r3]
 80086c8:	2aff      	cmp	r2, #255	@ 0xff
 80086ca:	d115      	bne.n	80086f8 <meas_data_log_erase+0x58>
            for (uint32_t i = 0; i < LOG_SECTOR_SIZE; i++) {
 80086cc:	3301      	adds	r3, #1
 80086ce:	42b3      	cmp	r3, r6
 80086d0:	d1f8      	bne.n	80086c4 <meas_data_log_erase+0x24>
            erased_ok = true;
 80086d2:	003b      	movs	r3, r7
        for (int attempt = 0; attempt < 3 && !erased_ok; attempt++)  // 최대 3회 시도
 80086d4:	3d01      	subs	r5, #1
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	d001      	beq.n	80086de <meas_data_log_erase+0x3e>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0e9      	beq.n	80086b2 <meas_data_log_erase+0x12>
    for (uint32_t s = 0; s < sectors; s++)
 80086de:	2380      	movs	r3, #128	@ 0x80
 80086e0:	015b      	lsls	r3, r3, #5
 80086e2:	18e4      	adds	r4, r4, r3
 80086e4:	2380      	movs	r3, #128	@ 0x80
 80086e6:	039b      	lsls	r3, r3, #14
 80086e8:	429c      	cmp	r4, r3
 80086ea:	d1e1      	bne.n	80086b0 <meas_data_log_erase+0x10>
            }
        }
        // 출력 부분 제거됨 (OK/FAIL 로그 없음)
    }

    log_write_offset = 0;
 80086ec:	2200      	movs	r2, #0
 80086ee:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <meas_data_log_erase+0x60>)
 80086f0:	601a      	str	r2, [r3, #0]
}
 80086f2:	4b04      	ldr	r3, [pc, #16]	@ (8008704 <meas_data_log_erase+0x64>)
 80086f4:	449d      	add	sp, r3
 80086f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    erased_ok = false;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e7eb      	b.n	80086d4 <meas_data_log_erase+0x34>
 80086fc:	ffffeffc 	.word	0xffffeffc
 8008700:	20000b70 	.word	0x20000b70
 8008704:	00001004 	.word	0x00001004

08008708 <meas_data_log_write_entry>:

/**
 * @brief  log_entry_t 하나를 플래시에 이어쓰기
 */
void meas_data_log_write_entry(const log_entry_t *e)
{
 8008708:	b510      	push	{r4, lr}
    // 체크섬 계산 예시 (간단 sum)
    uint16_t sum = 0;
 800870a:	2400      	movs	r4, #0
{
 800870c:	0001      	movs	r1, r0
 800870e:	0003      	movs	r3, r0
 8008710:	b086      	sub	sp, #24
 8008712:	3013      	adds	r0, #19
    const uint8_t *p = (const uint8_t*)e;
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
        sum += p[i];
 8008714:	781a      	ldrb	r2, [r3, #0]
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 8008716:	3301      	adds	r3, #1
        sum += p[i];
 8008718:	18a4      	adds	r4, r4, r2
 800871a:	b2a4      	uxth	r4, r4
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 800871c:	4283      	cmp	r3, r0
 800871e:	d1f9      	bne.n	8008714 <meas_data_log_write_entry+0xc>
    }
    // 구조체 복사 후 checksum 필드에 기록
    log_entry_t tmp = *e;
 8008720:	2215      	movs	r2, #21
 8008722:	4668      	mov	r0, sp
 8008724:	f011 ffb0 	bl	801a688 <memcpy>
    tmp.checksum    = sum;
 8008728:	466b      	mov	r3, sp

    // ENTRY_SIZE 바이트를 그대로 append
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 800872a:	2115      	movs	r1, #21
 800872c:	4668      	mov	r0, sp
    tmp.checksum    = sum;
 800872e:	825c      	strh	r4, [r3, #18]
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 8008730:	f7ff ff82 	bl	8008638 <meas_data_log_write>
}
 8008734:	b006      	add	sp, #24
 8008736:	bd10      	pop	{r4, pc}

08008738 <meas_data_log_read_entry>:
/**
 * @brief  플래시에 기록된 n번째 엔트리를 읽어옴
 */
void meas_data_log_read_entry(uint32_t index, log_entry_t *e)
{
    uint32_t offset = index * ENTRY_SIZE;
 8008738:	2215      	movs	r2, #21
{
 800873a:	000b      	movs	r3, r1
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 800873c:	2180      	movs	r1, #128	@ 0x80
    uint32_t offset = index * ENTRY_SIZE;
 800873e:	4350      	muls	r0, r2
{
 8008740:	b510      	push	{r4, lr}
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 8008742:	1884      	adds	r4, r0, r2
 8008744:	0349      	lsls	r1, r1, #13
 8008746:	428c      	cmp	r4, r1
 8008748:	d904      	bls.n	8008754 <meas_data_log_read_entry+0x1c>
        // 범위 벗어나면 초기화
        memset(e, 0xFF, ENTRY_SIZE);
 800874a:	21ff      	movs	r1, #255	@ 0xff
 800874c:	0018      	movs	r0, r3
 800874e:	f011 fed1 	bl	801a4f4 <memset>
        return;
    }
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
}
 8008752:	bd10      	pop	{r4, pc}
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
 8008754:	0019      	movs	r1, r3
 8008756:	f7ff ff99 	bl	800868c <meas_data_log_read>
 800875a:	e7fa      	b.n	8008752 <meas_data_log_read_entry+0x1a>

0800875c <meas_data_log_read_last>:


void meas_data_log_read_last(void)
{
 800875c:	b570      	push	{r4, r5, r6, lr}
    if (log_write_offset < ENTRY_SIZE) return;
 800875e:	4b23      	ldr	r3, [pc, #140]	@ (80087ec <meas_data_log_read_last+0x90>)
{
 8008760:	b0b4      	sub	sp, #208	@ 0xd0
    if (log_write_offset < ENTRY_SIZE) return;
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	2814      	cmp	r0, #20
 8008766:	d93e      	bls.n	80087e6 <meas_data_log_read_last+0x8a>
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
    log_entry_t e;
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 8008768:	ac0e      	add	r4, sp, #56	@ 0x38
 800876a:	2215      	movs	r2, #21
 800876c:	0021      	movs	r1, r4
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
 800876e:	3815      	subs	r0, #21
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 8008770:	f7ff ff8c 	bl	800868c <meas_data_log_read>

    // UART 출력 (print_log_entry와 동일)
    char txt[128];
    int year = 2000 + e.year;
    float temp_c = e.temperature / 10.0f;
    int len = snprintf(txt, sizeof(txt),
 8008774:	7c63      	ldrb	r3, [r4, #17]
 8008776:	8826      	ldrh	r6, [r4, #0]
 8008778:	930d      	str	r3, [sp, #52]	@ 0x34
 800877a:	7c23      	ldrb	r3, [r4, #16]
        "Idx:%3u Date:%04d-%02u-%02u %02u:%02u:%02u "
        "Cnt:%3u T:%.1fCC Dose:%.2fmSv/h Mark:0x%02X RadFlag:%d\r\n",
        e.index, year, e.month, e.day, e.hour, e.minute, e.second,
        e.count, temp_c, e.dose/100.0f, e.mark, e.rad_measure_mark
 800877c:	9811      	ldr	r0, [sp, #68]	@ 0x44
    int len = snprintf(txt, sizeof(txt),
 800877e:	930c      	str	r3, [sp, #48]	@ 0x30
        e.count, temp_c, e.dose/100.0f, e.mark, e.rad_measure_mark
 8008780:	f7f9 f824 	bl	80017cc <__aeabi_ui2f>
 8008784:	491a      	ldr	r1, [pc, #104]	@ (80087f0 <meas_data_log_read_last+0x94>)
 8008786:	f7f8 fa0f 	bl	8000ba8 <__aeabi_fdiv>
    int len = snprintf(txt, sizeof(txt),
 800878a:	f7fb f805 	bl	8003798 <__aeabi_f2d>
 800878e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008790:	910b      	str	r1, [sp, #44]	@ 0x2c
    float temp_c = e.temperature / 10.0f;
 8008792:	230a      	movs	r3, #10
 8008794:	5ee0      	ldrsh	r0, [r4, r3]
 8008796:	f7f8 ffc9 	bl	800172c <__aeabi_i2f>
 800879a:	4916      	ldr	r1, [pc, #88]	@ (80087f4 <meas_data_log_read_last+0x98>)
 800879c:	f7f8 fa04 	bl	8000ba8 <__aeabi_fdiv>
    int len = snprintf(txt, sizeof(txt),
 80087a0:	f7fa fffa 	bl	8003798 <__aeabi_f2d>
    int year = 2000 + e.year;
 80087a4:	22fa      	movs	r2, #250	@ 0xfa
    int len = snprintf(txt, sizeof(txt),
 80087a6:	9008      	str	r0, [sp, #32]
 80087a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80087aa:	8923      	ldrh	r3, [r4, #8]
 80087ac:	4d12      	ldr	r5, [pc, #72]	@ (80087f8 <meas_data_log_read_last+0x9c>)
 80087ae:	9306      	str	r3, [sp, #24]
 80087b0:	79e3      	ldrb	r3, [r4, #7]
    int year = 2000 + e.year;
 80087b2:	00d2      	lsls	r2, r2, #3
    int len = snprintf(txt, sizeof(txt),
 80087b4:	9305      	str	r3, [sp, #20]
 80087b6:	79a3      	ldrb	r3, [r4, #6]
 80087b8:	2180      	movs	r1, #128	@ 0x80
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	7963      	ldrb	r3, [r4, #5]
 80087be:	a814      	add	r0, sp, #80	@ 0x50
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	7923      	ldrb	r3, [r4, #4]
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	78e3      	ldrb	r3, [r4, #3]
 80087c8:	9301      	str	r3, [sp, #4]
    int year = 2000 + e.year;
 80087ca:	78a3      	ldrb	r3, [r4, #2]
 80087cc:	189b      	adds	r3, r3, r2
    int len = snprintf(txt, sizeof(txt),
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	002a      	movs	r2, r5
 80087d2:	0033      	movs	r3, r6
 80087d4:	f011 fd3c 	bl	801a250 <sniprintf>
    );
    HAL_UART_Transmit(&huart3, (uint8_t*)txt, len, HAL_MAX_DELAY);
 80087d8:	2301      	movs	r3, #1
 80087da:	b282      	uxth	r2, r0
 80087dc:	425b      	negs	r3, r3
 80087de:	4807      	ldr	r0, [pc, #28]	@ (80087fc <meas_data_log_read_last+0xa0>)
 80087e0:	a914      	add	r1, sp, #80	@ 0x50
 80087e2:	f00a fd78 	bl	80132d6 <HAL_UART_Transmit>
}
 80087e6:	b034      	add	sp, #208	@ 0xd0
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
 80087ea:	46c0      	nop			@ (mov r8, r8)
 80087ec:	20000b70 	.word	0x20000b70
 80087f0:	42c80000 	.word	0x42c80000
 80087f4:	41200000 	.word	0x41200000
 80087f8:	0801db0a 	.word	0x0801db0a
 80087fc:	20000840 	.word	0x20000840

08008800 <crc8_SMBUS_calculate>:
 * @return The 8-bit CRC checksum.
 */
//FIXME: Create crc table for speed up.
uint8_t crc8_SMBUS_calculate(const uint8_t *data, size_t length) {
    uint8_t crc = 0x00;
    for (size_t i = 0; i < length; ++i) {
 8008800:	0003      	movs	r3, r0
uint8_t crc8_SMBUS_calculate(const uint8_t *data, size_t length) {
 8008802:	b530      	push	{r4, r5, lr}
 8008804:	1841      	adds	r1, r0, r1
        crc ^= data[i];
        for (int j = 0; j < 8; ++j) {
            if (crc & 0x80) { // If MSB is 1
                crc = (crc << 1) ^ CRC8_SMBUS_POLYNOMIAL;
 8008806:	2507      	movs	r5, #7
    uint8_t crc = 0x00;
 8008808:	2000      	movs	r0, #0
    for (size_t i = 0; i < length; ++i) {
 800880a:	428b      	cmp	r3, r1
 800880c:	d100      	bne.n	8008810 <crc8_SMBUS_calculate+0x10>
                crc <<= 1;
            }
        }
    }
    return crc;
}
 800880e:	bd30      	pop	{r4, r5, pc}
        crc ^= data[i];
 8008810:	2408      	movs	r4, #8
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	4050      	eors	r0, r2
            if (crc & 0x80) { // If MSB is 1
 8008816:	b242      	sxtb	r2, r0
                crc <<= 1;
 8008818:	0040      	lsls	r0, r0, #1
 800881a:	b2c0      	uxtb	r0, r0
            if (crc & 0x80) { // If MSB is 1
 800881c:	2a00      	cmp	r2, #0
 800881e:	da02      	bge.n	8008826 <crc8_SMBUS_calculate+0x26>
                crc = (crc << 1) ^ CRC8_SMBUS_POLYNOMIAL;
 8008820:	0052      	lsls	r2, r2, #1
 8008822:	406a      	eors	r2, r5
 8008824:	b2d0      	uxtb	r0, r2
        for (int j = 0; j < 8; ++j) {
 8008826:	3c01      	subs	r4, #1
 8008828:	2c00      	cmp	r4, #0
 800882a:	d1f4      	bne.n	8008816 <crc8_SMBUS_calculate+0x16>
    for (size_t i = 0; i < length; ++i) {
 800882c:	3301      	adds	r3, #1
 800882e:	e7ec      	b.n	800880a <crc8_SMBUS_calculate+0xa>

08008830 <Rad_USBX_HID_ACK_response.isra.0>:

static UINT Rad_USBX_HID_ACK_response(const uint8_t cmd_id, const uint8_t parm_id, const uint8_t error_code) {
 8008830:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t tx_buf[64] = {0};
 8008832:	2740      	movs	r7, #64	@ 0x40
static UINT Rad_USBX_HID_ACK_response(const uint8_t cmd_id, const uint8_t parm_id, const uint8_t error_code) {
 8008834:	b091      	sub	sp, #68	@ 0x44
 8008836:	0006      	movs	r6, r0
 8008838:	000d      	movs	r5, r1
 800883a:	0014      	movs	r4, r2
    uint8_t tx_buf[64] = {0};
 800883c:	2100      	movs	r1, #0
 800883e:	003a      	movs	r2, r7
 8008840:	4668      	mov	r0, sp
 8008842:	f011 fe57 	bl	801a4f4 <memset>

    // 1. start
    tx_buf[0] = DEVICE_PACKET_START_0;
 8008846:	4b09      	ldr	r3, [pc, #36]	@ (800886c <Rad_USBX_HID_ACK_response.isra.0+0x3c>)
    // 4. data
    tx_buf[4] = cmd_id; // Command ID
    tx_buf[5] = parm_id; // Parameter ID
    tx_buf[6] = error_code; // Error code
    // 5. checksum
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008848:	2103      	movs	r1, #3
    tx_buf[0] = DEVICE_PACKET_START_0;
 800884a:	9300      	str	r3, [sp, #0]
    tx_buf[4] = cmd_id; // Command ID
 800884c:	466b      	mov	r3, sp
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 800884e:	a801      	add	r0, sp, #4
    tx_buf[4] = cmd_id; // Command ID
 8008850:	711e      	strb	r6, [r3, #4]
    tx_buf[5] = parm_id; // Parameter ID
 8008852:	715d      	strb	r5, [r3, #5]
    tx_buf[6] = error_code; // Error code
 8008854:	719c      	strb	r4, [r3, #6]
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008856:	f7ff ffd3 	bl	8008800 <crc8_SMBUS_calculate>
 800885a:	466b      	mov	r3, sp

    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 800885c:	0039      	movs	r1, r7
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 800885e:	71d8      	strb	r0, [r3, #7]
    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008860:	4668      	mov	r0, sp
 8008862:	f010 fbb1 	bl	8018fc8 <USB_Send_HidReport>
}
 8008866:	b011      	add	sp, #68	@ 0x44
 8008868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886a:	46c0      	nop			@ (mov r8, r8)
 800886c:	03fe5555 	.word	0x03fe5555

08008870 <RAD_USBX_Device_Init>:
static void Rad_USBX_HID_Set_Command(const uint8_t parm_id);
static void Rad_USBX_HID_Get_Parameters(const uint8_t parm_id);
static void Rad_USBX_HID_Get_Records(const uint8_t parm_id);
static void Rad_USBX_HID_Set_Parameters(const uint8_t *data, const uint8_t len);

UINT RAD_USBX_Device_Init(void){
 8008870:	b570      	push	{r4, r5, r6, lr}
	UINT status  = 0;


	//Sometimes it fails to initiate device due to memory insufficient
	// add this flag to ensure initiate device successfully.
	status = MX_USBX_Device_Init();
 8008872:	f010 fadf 	bl	8018e34 <MX_USBX_Device_Init>
 8008876:	1e04      	subs	r4, r0, #0
	if (status != 0) {
 8008878:	d005      	beq.n	8008886 <RAD_USBX_Device_Init+0x16>
//FIXME: add debug level.
#if DEBUG_LOG ==1
		printf("Failed: MX_USBX_Device_Init status %x\n",status);
 800887a:	0021      	movs	r1, r4
 800887c:	481b      	ldr	r0, [pc, #108]	@ (80088ec <RAD_USBX_Device_Init+0x7c>)
 800887e:	f011 fc6d 	bl	801a15c <iprintf>
	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);

	HAL_PCD_Start(&hpcd_USB_DRD_FS);

	return status;
}
 8008882:	0020      	movs	r0, r4
 8008884:	bd70      	pop	{r4, r5, r6, pc}
	MX_USB_PCD_Init();
 8008886:	f7ff fe2b 	bl	80084e0 <MX_USB_PCD_Init>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x40);
 800888a:	4d19      	ldr	r5, [pc, #100]	@ (80088f0 <RAD_USBX_Device_Init+0x80>)
 800888c:	0022      	movs	r2, r4
 800888e:	0021      	movs	r1, r4
 8008890:	2340      	movs	r3, #64	@ 0x40
 8008892:	0028      	movs	r0, r5
 8008894:	f008 f8f1 	bl	8010a7a <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x80);
 8008898:	2380      	movs	r3, #128	@ 0x80
 800889a:	0022      	movs	r2, r4
 800889c:	0019      	movs	r1, r3
 800889e:	0028      	movs	r0, r5
 80088a0:	f008 f8eb 	bl	8010a7a <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x01, PCD_SNG_BUF, 0xC0);
 80088a4:	0022      	movs	r2, r4
 80088a6:	23c0      	movs	r3, #192	@ 0xc0
 80088a8:	2101      	movs	r1, #1
 80088aa:	0028      	movs	r0, r5
 80088ac:	f008 f8e5 	bl	8010a7a <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x100);
 80088b0:	2380      	movs	r3, #128	@ 0x80
 80088b2:	0022      	movs	r2, r4
 80088b4:	2181      	movs	r1, #129	@ 0x81
 80088b6:	0028      	movs	r0, r5
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	f008 f8de 	bl	8010a7a <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x02, PCD_SNG_BUF, 0x140);
 80088be:	23a0      	movs	r3, #160	@ 0xa0
 80088c0:	0022      	movs	r2, r4
 80088c2:	2102      	movs	r1, #2
 80088c4:	0028      	movs	r0, r5
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	f008 f8d7 	bl	8010a7a <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x82, PCD_SNG_BUF, 0x180);
 80088cc:	23c0      	movs	r3, #192	@ 0xc0
 80088ce:	0022      	movs	r2, r4
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	2182      	movs	r1, #130	@ 0x82
 80088d4:	0028      	movs	r0, r5
 80088d6:	f008 f8d0 	bl	8010a7a <HAL_PCDEx_PMAConfig>
	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);
 80088da:	0029      	movs	r1, r5
 80088dc:	0020      	movs	r0, r4
 80088de:	f010 f8cb 	bl	8018a78 <_ux_dcd_stm32_initialize>
	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 80088e2:	0028      	movs	r0, r5
 80088e4:	f007 fb2e 	bl	800ff44 <HAL_PCD_Start>
	return status;
 80088e8:	e7cb      	b.n	8008882 <RAD_USBX_Device_Init+0x12>
 80088ea:	46c0      	nop			@ (mov r8, r8)
 80088ec:	0801db6e 	.word	0x0801db6e
 80088f0:	20000564 	.word	0x20000564

080088f4 <RAD_USBX_Device_Process>:

void RAD_USBX_Device_Process(void){
 80088f4:	b510      	push	{r4, lr}

	 ux_device_stack_tasks_run();
 80088f6:	f00d ffc1 	bl	801687c <_ux_device_stack_tasks_run>

}
 80088fa:	bd10      	pop	{r4, pc}

080088fc <DeviceSetting_Send>:
    for (uint8_t i = 0; i < pkt->len; ++i)
        sum += pkt->data[i];
    return (uint8_t)(sum % 256);
}

int DeviceSetting_Send(const DeviceSettingPacket_t* pkt) {
 80088fc:	b570      	push	{r4, r5, r6, lr}
    uint8_t tx_buf[64] = {0};
 80088fe:	2640      	movs	r6, #64	@ 0x40
int DeviceSetting_Send(const DeviceSettingPacket_t* pkt) {
 8008900:	b090      	sub	sp, #64	@ 0x40
 8008902:	0004      	movs	r4, r0
    uint8_t tx_buf[64] = {0};
 8008904:	0032      	movs	r2, r6
 8008906:	2100      	movs	r1, #0
 8008908:	4668      	mov	r0, sp
 800890a:	f011 fdf3 	bl	801a4f4 <memset>
    size_t idx = 0;

    // 1. start
    tx_buf[idx++] = pkt->start[0];
 800890e:	466a      	mov	r2, sp
 8008910:	7823      	ldrb	r3, [r4, #0]
    // 3. parm_id
    tx_buf[idx++] = pkt->parm_id;
    // 4. len
    tx_buf[idx++] = pkt->len;
    // 5. data
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 8008912:	1d61      	adds	r1, r4, #5
    tx_buf[idx++] = pkt->start[0];
 8008914:	7013      	strb	r3, [r2, #0]
    tx_buf[idx++] = pkt->start[1];
 8008916:	7863      	ldrb	r3, [r4, #1]
 8008918:	7053      	strb	r3, [r2, #1]
    tx_buf[idx++] = pkt->cmd_id;
 800891a:	78a3      	ldrb	r3, [r4, #2]
 800891c:	7093      	strb	r3, [r2, #2]
    tx_buf[idx++] = pkt->parm_id;
 800891e:	78e3      	ldrb	r3, [r4, #3]
 8008920:	70d3      	strb	r3, [r2, #3]
    tx_buf[idx++] = pkt->len;
 8008922:	466b      	mov	r3, sp
 8008924:	7925      	ldrb	r5, [r4, #4]
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 8008926:	1d58      	adds	r0, r3, #5
    tx_buf[idx++] = pkt->len;
 8008928:	7115      	strb	r5, [r2, #4]
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 800892a:	002a      	movs	r2, r5
 800892c:	f011 feac 	bl	801a688 <memcpy>
    // 5. checksum
    tx_buf[idx++] = pkt->checksum;
 8008930:	002b      	movs	r3, r5
 8008932:	343e      	adds	r4, #62	@ 0x3e
 8008934:	7822      	ldrb	r2, [r4, #0]
 8008936:	446b      	add	r3, sp

    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008938:	0031      	movs	r1, r6
 800893a:	4668      	mov	r0, sp
    tx_buf[idx++] = pkt->checksum;
 800893c:	715a      	strb	r2, [r3, #5]
    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 800893e:	f010 fb43 	bl	8018fc8 <USB_Send_HidReport>
}
 8008942:	b010      	add	sp, #64	@ 0x40
 8008944:	bd70      	pop	{r4, r5, r6, pc}
	...

08008948 <USB_HID_Send_Record>:

UINT USB_HID_Send_Record(const uint16_t record_idx)
{
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	0005      	movs	r5, r0
 800894c:	b096      	sub	sp, #88	@ 0x58
    // Read entry
    log_entry_t e = {0};
 800894e:	2215      	movs	r2, #21
 8008950:	2100      	movs	r1, #0
 8008952:	4668      	mov	r0, sp
 8008954:	f011 fdce 	bl	801a4f4 <memset>
    meas_data_log_read_entry(record_idx, &e);
 8008958:	4669      	mov	r1, sp
 800895a:	0028      	movs	r0, r5
 800895c:	f7ff feec 	bl	8008738 <meas_data_log_read_entry>

    if (e.year == 0xFF) {
 8008960:	466b      	mov	r3, sp
 8008962:	789e      	ldrb	r6, [r3, #2]
 8008964:	2eff      	cmp	r6, #255	@ 0xff
 8008966:	d10a      	bne.n	800897e <USB_HID_Send_Record+0x36>
        printf("[USB] Record %u has invalid year (0xFF), stop sending.\r\n", record_idx);
 8008968:	0029      	movs	r1, r5
 800896a:	4826      	ldr	r0, [pc, #152]	@ (8008a04 <USB_HID_Send_Record+0xbc>)
 800896c:	f011 fbf6 	bl	801a15c <iprintf>
        usbx_host_req_records = 0;  // 전송 종료 신호
 8008970:	2000      	movs	r0, #0
 8008972:	4b25      	ldr	r3, [pc, #148]	@ (8008a08 <USB_HID_Send_Record+0xc0>)
 8008974:	6018      	str	r0, [r3, #0]
        cur_record_num = 0;
 8008976:	4b25      	ldr	r3, [pc, #148]	@ (8008a0c <USB_HID_Send_Record+0xc4>)
 8008978:	6018      	str	r0, [r3, #0]

    //FIXME: Change to CRC8_STANDARD func.
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);

    return DeviceSetting_Send(&pkt);
}
 800897a:	b016      	add	sp, #88	@ 0x58
 800897c:	bd70      	pop	{r4, r5, r6, pc}
    DeviceSettingPacket_t pkt = {0};
 800897e:	201b      	movs	r0, #27
 8008980:	223c      	movs	r2, #60	@ 0x3c
 8008982:	2100      	movs	r1, #0
 8008984:	4468      	add	r0, sp
 8008986:	f011 fdb5 	bl	801a4f4 <memset>
    pkt.start[0] = DEVICE_PACKET_START_0;
 800898a:	2355      	movs	r3, #85	@ 0x55
    DeviceSettingPacket_t pkt = {0};
 800898c:	ac06      	add	r4, sp, #24
    pkt.start[0] = DEVICE_PACKET_START_0;
 800898e:	7023      	strb	r3, [r4, #0]
    pkt.start[1] = DEVICE_PACKET_START_1;
 8008990:	7063      	strb	r3, [r4, #1]
    pkt.len      = DEVICE_CID_GET_RECRORDS_RESP_LEN;
 8008992:	2111      	movs	r1, #17
    pkt.cmd_id   = DEVICE_CID_GET_RECRORDS_RESP;
 8008994:	3b43      	subs	r3, #67	@ 0x43
 8008996:	70a3      	strb	r3, [r4, #2]
    pkt.data[3] = e.month;
 8008998:	466b      	mov	r3, sp
    pkt.data[0] = record_idx & 0xFF;
 800899a:	7165      	strb	r5, [r4, #5]
    pkt.data[1] = (record_idx >> 8) & 0xFF;
 800899c:	0a2d      	lsrs	r5, r5, #8
    pkt.len      = DEVICE_CID_GET_RECRORDS_RESP_LEN;
 800899e:	7121      	strb	r1, [r4, #4]
    pkt.data[1] = (record_idx >> 8) & 0xFF;
 80089a0:	71a5      	strb	r5, [r4, #6]
    pkt.data[2] = e.year;
 80089a2:	71e6      	strb	r6, [r4, #7]
    pkt.data[3] = e.month;
 80089a4:	78db      	ldrb	r3, [r3, #3]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 80089a6:	201d      	movs	r0, #29
    pkt.data[3] = e.month;
 80089a8:	7223      	strb	r3, [r4, #8]
    pkt.data[4] = e.day;
 80089aa:	466b      	mov	r3, sp
 80089ac:	791b      	ldrb	r3, [r3, #4]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 80089ae:	4468      	add	r0, sp
    pkt.data[4] = e.day;
 80089b0:	7263      	strb	r3, [r4, #9]
    pkt.data[5] = e.hour;
 80089b2:	466b      	mov	r3, sp
 80089b4:	795b      	ldrb	r3, [r3, #5]
 80089b6:	72a3      	strb	r3, [r4, #10]
    pkt.data[6] = e.minute;
 80089b8:	466b      	mov	r3, sp
 80089ba:	799b      	ldrb	r3, [r3, #6]
 80089bc:	72e3      	strb	r3, [r4, #11]
    pkt.data[7] = e.second;
 80089be:	466b      	mov	r3, sp
 80089c0:	79db      	ldrb	r3, [r3, #7]
 80089c2:	7323      	strb	r3, [r4, #12]
    pkt.data[8]  = e.temperature & 0xFF;
 80089c4:	466b      	mov	r3, sp
 80089c6:	220a      	movs	r2, #10
 80089c8:	5e9b      	ldrsh	r3, [r3, r2]
 80089ca:	7363      	strb	r3, [r4, #13]
    pkt.data[9]  = (e.temperature >> 8) & 0xFF;
 80089cc:	121b      	asrs	r3, r3, #8
 80089ce:	73a3      	strb	r3, [r4, #14]
    pkt.data[10] = e.count & 0xFF;
 80089d0:	466b      	mov	r3, sp
 80089d2:	891b      	ldrh	r3, [r3, #8]
 80089d4:	73e3      	strb	r3, [r4, #15]
    pkt.data[11] = (e.count >> 8) & 0xFF;
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	7423      	strb	r3, [r4, #16]
    pkt.data[12] = e.dose & 0xFF;
 80089da:	9b03      	ldr	r3, [sp, #12]
    pkt.data[13] = (e.dose >> 8) & 0xFF;
 80089dc:	0a1a      	lsrs	r2, r3, #8
    pkt.data[12] = e.dose & 0xFF;
 80089de:	7463      	strb	r3, [r4, #17]
    pkt.data[13] = (e.dose >> 8) & 0xFF;
 80089e0:	74a2      	strb	r2, [r4, #18]
    pkt.data[14] = (e.dose >> 16) & 0xFF;
 80089e2:	0c1a      	lsrs	r2, r3, #16
    pkt.data[15] = (e.dose >> 24) & 0xFF;
 80089e4:	0e1b      	lsrs	r3, r3, #24
 80089e6:	7523      	strb	r3, [r4, #20]
    pkt.data[16] = e.mark;
 80089e8:	466b      	mov	r3, sp
    pkt.data[14] = (e.dose >> 16) & 0xFF;
 80089ea:	74e2      	strb	r2, [r4, #19]
    pkt.data[16] = e.mark;
 80089ec:	7c1b      	ldrb	r3, [r3, #16]
 80089ee:	7563      	strb	r3, [r4, #21]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 80089f0:	f7ff ff06 	bl	8008800 <crc8_SMBUS_calculate>
 80089f4:	2356      	movs	r3, #86	@ 0x56
 80089f6:	446b      	add	r3, sp
 80089f8:	7018      	strb	r0, [r3, #0]
    return DeviceSetting_Send(&pkt);
 80089fa:	0020      	movs	r0, r4
 80089fc:	f7ff ff7e 	bl	80088fc <DeviceSetting_Send>
 8008a00:	e7bb      	b.n	800897a <USB_HID_Send_Record+0x32>
 8008a02:	46c0      	nop			@ (mov r8, r8)
 8008a04:	0801db95 	.word	0x0801db95
 8008a08:	20000b74 	.word	0x20000b74
 8008a0c:	200004f4 	.word	0x200004f4

08008a10 <RAD_USBX_Fatfs_format_disk>:
    memset(data, 0, *len);
    *len = 0;
}


void RAD_USBX_Fatfs_format_disk(void) {
 8008a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a12:	b087      	sub	sp, #28


  MKFS_PARM format_options = {
 8008a14:	ac02      	add	r4, sp, #8
 8008a16:	0022      	movs	r2, r4
 8008a18:	4b23      	ldr	r3, [pc, #140]	@ (8008aa8 <RAD_USBX_Fatfs_format_disk+0x98>)
 8008a1a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8008a1c:	c223      	stmia	r2!, {r0, r1, r5}
      .align = 4,         // Data area alignment (Cluster size in sector unit.)
      .n_root = MEDIA_DIRECTORY_ENTRIES,      // Number of root directory entries
      .au_size = MEDIA_LOGICAL_CLUSTER_SIZE        // Cluster size (0=default, determined by volume size)
  };

  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8008a1e:	4d23      	ldr	r5, [pc, #140]	@ (8008aac <RAD_USBX_Fatfs_format_disk+0x9c>)
  MKFS_PARM format_options = {
 8008a20:	681b      	ldr	r3, [r3, #0]
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8008a22:	0029      	movs	r1, r5
  MKFS_PARM format_options = {
 8008a24:	6013      	str	r3, [r2, #0]
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8008a26:	4822      	ldr	r0, [pc, #136]	@ (8008ab0 <RAD_USBX_Fatfs_format_disk+0xa0>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f00c f91b 	bl	8014c64 <f_mount>
 8008a2e:	4e21      	ldr	r6, [pc, #132]	@ (8008ab4 <RAD_USBX_Fatfs_format_disk+0xa4>)
 8008a30:	7030      	strb	r0, [r6, #0]

  if (res == FR_NO_FILESYSTEM) {
 8008a32:	280d      	cmp	r0, #13
 8008a34:	d118      	bne.n	8008a68 <RAD_USBX_Fatfs_format_disk+0x58>
      LOG_USB_MSC("No filesystem found, formatting...\r\n");
 8008a36:	4b20      	ldr	r3, [pc, #128]	@ (8008ab8 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8008a38:	4f20      	ldr	r7, [pc, #128]	@ (8008abc <RAD_USBX_Fatfs_format_disk+0xac>)
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	4920      	ldr	r1, [pc, #128]	@ (8008ac0 <RAD_USBX_Fatfs_format_disk+0xb0>)
 8008a40:	9a01      	ldr	r2, [sp, #4]
 8008a42:	68d8      	ldr	r0, [r3, #12]
 8008a44:	f011 fb5e 	bl	801a104 <fiprintf>
      res = f_mkfs("", &format_options , work, sizeof(work));
 8008a48:	2380      	movs	r3, #128	@ 0x80
 8008a4a:	0021      	movs	r1, r4
 8008a4c:	015b      	lsls	r3, r3, #5
 8008a4e:	0028      	movs	r0, r5
 8008a50:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac4 <RAD_USBX_Fatfs_format_disk+0xb4>)
 8008a52:	f00c fca1 	bl	8015398 <f_mkfs>
 8008a56:	1e03      	subs	r3, r0, #0
 8008a58:	7030      	strb	r0, [r6, #0]
      if (res != FR_OK) {
 8008a5a:	d005      	beq.n	8008a68 <RAD_USBX_Fatfs_format_disk+0x58>
          LOG_USB_MSC("Error formatting drive! ret:%02x\r\n",res);
 8008a5c:	6838      	ldr	r0, [r7, #0]
 8008a5e:	491a      	ldr	r1, [pc, #104]	@ (8008ac8 <RAD_USBX_Fatfs_format_disk+0xb8>)
 8008a60:	9a01      	ldr	r2, [sp, #4]
 8008a62:	68c0      	ldr	r0, [r0, #12]
 8008a64:	f011 fb4e 	bl	801a104 <fiprintf>
      }
  }
  res = f_mount(&fs, "", 1);
 8008a68:	2201      	movs	r2, #1
 8008a6a:	0029      	movs	r1, r5
 8008a6c:	4810      	ldr	r0, [pc, #64]	@ (8008ab0 <RAD_USBX_Fatfs_format_disk+0xa0>)
 8008a6e:	f00c f8f9 	bl	8014c64 <f_mount>
 8008a72:	4c10      	ldr	r4, [pc, #64]	@ (8008ab4 <RAD_USBX_Fatfs_format_disk+0xa4>)
 8008a74:	1e03      	subs	r3, r0, #0
 8008a76:	7020      	strb	r0, [r4, #0]
  if (res != FR_OK) {
 8008a78:	d006      	beq.n	8008a88 <RAD_USBX_Fatfs_format_disk+0x78>
        LOG_USB_MSC("Error mount drive! ret:%02x\r\n",res);
 8008a7a:	4810      	ldr	r0, [pc, #64]	@ (8008abc <RAD_USBX_Fatfs_format_disk+0xac>)
 8008a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8008ab8 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8008a7e:	6800      	ldr	r0, [r0, #0]
 8008a80:	4912      	ldr	r1, [pc, #72]	@ (8008acc <RAD_USBX_Fatfs_format_disk+0xbc>)
 8008a82:	68c0      	ldr	r0, [r0, #12]
 8008a84:	f011 fb3e 	bl	801a104 <fiprintf>
  }
  res = f_setlabel("0:RAD_TAG_LOG");
 8008a88:	4811      	ldr	r0, [pc, #68]	@ (8008ad0 <RAD_USBX_Fatfs_format_disk+0xc0>)
 8008a8a:	f00c fc07 	bl	801529c <f_setlabel>
 8008a8e:	1e03      	subs	r3, r0, #0
 8008a90:	7020      	strb	r0, [r4, #0]
    if (res != FR_OK) {
 8008a92:	d006      	beq.n	8008aa2 <RAD_USBX_Fatfs_format_disk+0x92>
        LOG_USB_MSC("Error setlabel volume! ret:%02x\r\n",res);
 8008a94:	4809      	ldr	r0, [pc, #36]	@ (8008abc <RAD_USBX_Fatfs_format_disk+0xac>)
 8008a96:	4a08      	ldr	r2, [pc, #32]	@ (8008ab8 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8008a98:	6800      	ldr	r0, [r0, #0]
 8008a9a:	490e      	ldr	r1, [pc, #56]	@ (8008ad4 <RAD_USBX_Fatfs_format_disk+0xc4>)
 8008a9c:	68c0      	ldr	r0, [r0, #12]
 8008a9e:	f011 fb31 	bl	801a104 <fiprintf>
  }
}
 8008aa2:	b007      	add	sp, #28
 8008aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	0801ca18 	.word	0x0801ca18
 8008aac:	0801f3a0 	.word	0x0801f3a0
 8008ab0:	20001b7c 	.word	0x20001b7c
 8008ab4:	20001b78 	.word	0x20001b78
 8008ab8:	0801dbce 	.word	0x0801dbce
 8008abc:	200002cc 	.word	0x200002cc
 8008ac0:	0801dbd6 	.word	0x0801dbd6
 8008ac4:	20000b78 	.word	0x20000b78
 8008ac8:	0801dc00 	.word	0x0801dc00
 8008acc:	0801dc28 	.word	0x0801dc28
 8008ad0:	0801dc4b 	.word	0x0801dc4b
 8008ad4:	0801dc59 	.word	0x0801dc59

08008ad8 <RAD_USBX_Clean_Vol>:

void RAD_USBX_Clean_Vol(void) {
 8008ad8:	b570      	push	{r4, r5, r6, lr}
    int num_blk_64k = (NOR_FLASH_TOTAL_SIZE / NOR_FLASH_BLOCK_64K_SIZE);
    uint32_t addr = 0;

    for (int i = 0; i < num_blk_64k; i++)
 8008ada:	2580      	movs	r5, #128	@ 0x80
void RAD_USBX_Clean_Vol(void) {
 8008adc:	2400      	movs	r4, #0
    for (int i = 0; i < num_blk_64k; i++)
 8008ade:	036d      	lsls	r5, r5, #13
    {
        addr = NOR_FLASH_BASE_ADDRESS + (i * NOR_FLASH_BLOCK_64K_SIZE);
        SPI_FLASH_EraseBlock64k(addr);
 8008ae0:	0020      	movs	r0, r4
 8008ae2:	f001 fab5 	bl	800a050 <SPI_FLASH_EraseBlock64k>
    for (int i = 0; i < num_blk_64k; i++)
 8008ae6:	2380      	movs	r3, #128	@ 0x80
 8008ae8:	025b      	lsls	r3, r3, #9
 8008aea:	18e4      	adds	r4, r4, r3
 8008aec:	42ac      	cmp	r4, r5
 8008aee:	d1f7      	bne.n	8008ae0 <RAD_USBX_Clean_Vol+0x8>
    }
}
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008af4 <USB_HID_Receive>:
{
 8008af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af6:	b0a1      	sub	sp, #132	@ 0x84
 8008af8:	0007      	movs	r7, r0
 8008afa:	9106      	str	r1, [sp, #24]
    if (USB_Get_HidReport(data, len) == 1) {
 8008afc:	f010 fa88 	bl	8019010 <USB_Get_HidReport>
 8008b00:	2801      	cmp	r0, #1
 8008b02:	d00c      	beq.n	8008b1e <USB_HID_Receive+0x2a>
    if (*len == 0)  {
 8008b04:	9b06      	ldr	r3, [sp, #24]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d008      	beq.n	8008b1e <USB_HID_Receive+0x2a>
    if (data[0] != 0x55 || data[1] != 0x55) {
 8008b0c:	7839      	ldrb	r1, [r7, #0]
 8008b0e:	787a      	ldrb	r2, [r7, #1]
 8008b10:	2955      	cmp	r1, #85	@ 0x55
 8008b12:	d101      	bne.n	8008b18 <USB_HID_Receive+0x24>
 8008b14:	2a55      	cmp	r2, #85	@ 0x55
 8008b16:	d004      	beq.n	8008b22 <USB_HID_Receive+0x2e>
        printf("[USB] Invalid Start Byte: %02X %02X\n", data[0], data[1]);
 8008b18:	48d3      	ldr	r0, [pc, #844]	@ (8008e68 <USB_HID_Receive+0x374>)
 8008b1a:	f011 fb1f 	bl	801a15c <iprintf>
}
 8008b1e:	b021      	add	sp, #132	@ 0x84
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    parm_id = data[3];
 8008b22:	78fb      	ldrb	r3, [r7, #3]
    checksum = data[5 + payload_len];
 8008b24:	793e      	ldrb	r6, [r7, #4]
    parm_id = data[3];
 8008b26:	9305      	str	r3, [sp, #20]
    checksum = data[5 + payload_len];
 8008b28:	19bb      	adds	r3, r7, r6
 8008b2a:	795b      	ldrb	r3, [r3, #5]
    printf("[USB][RX] ");
 8008b2c:	48cf      	ldr	r0, [pc, #828]	@ (8008e6c <USB_HID_Receive+0x378>)
    cmd_id = data[2];
 8008b2e:	78bd      	ldrb	r5, [r7, #2]
    checksum = data[5 + payload_len];
 8008b30:	9307      	str	r3, [sp, #28]
    for (int i = 0; i < *len; i++)
 8008b32:	2400      	movs	r4, #0
    printf("[USB][RX] ");
 8008b34:	f011 fb12 	bl	801a15c <iprintf>
    for (int i = 0; i < *len; i++)
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d817      	bhi.n	8008b70 <USB_HID_Receive+0x7c>
    printf("\n");
 8008b40:	200a      	movs	r0, #10
 8008b42:	f011 fb1b 	bl	801a17c <putchar>
    printf("[USB][PARSE] cmd_id=0x%02X, len=%u, payload=0x%02X, checksum=0x%02X\n",
 8008b46:	9b07      	ldr	r3, [sp, #28]
 8008b48:	0032      	movs	r2, r6
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	0029      	movs	r1, r5
 8008b4e:	48c8      	ldr	r0, [pc, #800]	@ (8008e70 <USB_HID_Receive+0x37c>)
 8008b50:	9b05      	ldr	r3, [sp, #20]
 8008b52:	f011 fb03 	bl	801a15c <iprintf>
    switch (cmd_id) {
 8008b56:	1e68      	subs	r0, r5, #1
 8008b58:	2805      	cmp	r0, #5
 8008b5a:	d901      	bls.n	8008b60 <USB_HID_Receive+0x6c>
 8008b5c:	f000 fe51 	bl	8009802 <USB_HID_Receive+0xd0e>
 8008b60:	f7f7 faf8 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008b64:	0322000c 	.word	0x0322000c
 8008b68:	05950326 	.word	0x05950326
 8008b6c:	0648062c 	.word	0x0648062c
        printf("%02X ", data[i]);
 8008b70:	5d39      	ldrb	r1, [r7, r4]
 8008b72:	48c0      	ldr	r0, [pc, #768]	@ (8008e74 <USB_HID_Receive+0x380>)
 8008b74:	f011 faf2 	bl	801a15c <iprintf>
    for (int i = 0; i < *len; i++)
 8008b78:	3401      	adds	r4, #1
 8008b7a:	e7dd      	b.n	8008b38 <USB_HID_Receive+0x44>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_SUCCESS);
}


static void Rad_USBX_HID_Get_Parameters(const uint8_t parm_id) {
    DeviceSettingPacket_t response_pkt = {0};
 8008b7c:	ac10      	add	r4, sp, #64	@ 0x40
 8008b7e:	223f      	movs	r2, #63	@ 0x3f
 8008b80:	2100      	movs	r1, #0
 8008b82:	0020      	movs	r0, r4
 8008b84:	f011 fcb6 	bl	801a4f4 <memset>

    printf("[USB][GET_PARAM] parm_id=0x%02X\n", parm_id);
 8008b88:	48bb      	ldr	r0, [pc, #748]	@ (8008e78 <USB_HID_Receive+0x384>)
 8008b8a:	9905      	ldr	r1, [sp, #20]
 8008b8c:	f011 fae6 	bl	801a15c <iprintf>

    switch (parm_id)
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	1e58      	subs	r0, r3, #1
 8008b94:	2819      	cmp	r0, #25
 8008b96:	d900      	bls.n	8008b9a <USB_HID_Receive+0xa6>
 8008b98:	e2fc      	b.n	8009194 <USB_HID_Receive+0x6a0>
 8008b9a:	f7f7 fadb 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008b9e:	001a      	.short	0x001a
 8008ba0:	00540051 	.word	0x00540051
 8008ba4:	00600057 	.word	0x00600057
 8008ba8:	00680064 	.word	0x00680064
 8008bac:	007e007b 	.word	0x007e007b
 8008bb0:	00a90082 	.word	0x00a90082
 8008bb4:	00cb00c7 	.word	0x00cb00c7
 8008bb8:	01300114 	.word	0x01300114
 8008bbc:	015d0159 	.word	0x015d0159
 8008bc0:	01c10161 	.word	0x01c10161
 8008bc4:	023601ff 	.word	0x023601ff
 8008bc8:	02900263 	.word	0x02900263
 8008bcc:	02ea02bd 	.word	0x02ea02bd
 8008bd0:	014c      	.short	0x014c
    {
    case DEVICE_PID_DEVICE_CODE:
        printf("[USB][GET_PARAM] DEVICE_CODE -> %s\n", current_settings.device_code);
 8008bd2:	4daa      	ldr	r5, [pc, #680]	@ (8008e7c <USB_HID_Receive+0x388>)
 8008bd4:	48aa      	ldr	r0, [pc, #680]	@ (8008e80 <USB_HID_Receive+0x38c>)
        memcpy(response_pkt.data, current_settings.device_code, strlen((const char*)current_settings.device_code));
        response_pkt.len = strlen((const char*)current_settings.device_code);
        break;

    case DEVICE_PID_SERIAL_NUMBER:
        printf("[USB][GET_PARAM] SERIAL -> %s\n", current_settings.serial);
 8008bd6:	0029      	movs	r1, r5
 8008bd8:	f011 fac0 	bl	801a15c <iprintf>
        memcpy(response_pkt.data, current_settings.serial, strlen((const char*)current_settings.serial));
 8008bdc:	0028      	movs	r0, r5
 8008bde:	f7f7 fa93 	bl	8000108 <strlen>
 8008be2:	0002      	movs	r2, r0
 8008be4:	202d      	movs	r0, #45	@ 0x2d
 8008be6:	ab06      	add	r3, sp, #24
 8008be8:	0029      	movs	r1, r5
 8008bea:	18c0      	adds	r0, r0, r3
 8008bec:	f011 fd4c 	bl	801a688 <memcpy>
        response_pkt.len = strlen((const char*)current_settings.serial);
 8008bf0:	0028      	movs	r0, r5
 8008bf2:	f7f7 fa89 	bl	8000108 <strlen>
 8008bf6:	7120      	strb	r0, [r4, #4]
        printf("[USB][GET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
        Rad_USBX_HID_ACK_response(DEVICE_CID_GET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
        return;
    }

    response_pkt.start[0] = DEVICE_PACKET_START_0;
 8008bf8:	4ba2      	ldr	r3, [pc, #648]	@ (8008e84 <USB_HID_Receive+0x390>)
 8008bfa:	ac10      	add	r4, sp, #64	@ 0x40
 8008bfc:	8023      	strh	r3, [r4, #0]
    response_pkt.start[1] = DEVICE_PACKET_START_1;
    response_pkt.cmd_id   = DEVICE_CID_GET_PARAMETERS_RESP;
 8008bfe:	2311      	movs	r3, #17
    response_pkt.parm_id  = parm_id;
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008c00:	202d      	movs	r0, #45	@ 0x2d
    response_pkt.cmd_id   = DEVICE_CID_GET_PARAMETERS_RESP;
 8008c02:	70a3      	strb	r3, [r4, #2]
    response_pkt.parm_id  = parm_id;
 8008c04:	9b05      	ldr	r3, [sp, #20]
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008c06:	7925      	ldrb	r5, [r4, #4]
    response_pkt.parm_id  = parm_id;
 8008c08:	70e3      	strb	r3, [r4, #3]
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008c0a:	ab06      	add	r3, sp, #24
 8008c0c:	0029      	movs	r1, r5
 8008c0e:	18c0      	adds	r0, r0, r3
 8008c10:	f7ff fdf6 	bl	8008800 <crc8_SMBUS_calculate>
 8008c14:	2366      	movs	r3, #102	@ 0x66
 8008c16:	a906      	add	r1, sp, #24
 8008c18:	185b      	adds	r3, r3, r1
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	7018      	strb	r0, [r3, #0]

    printf("[USB][GET_PARAM] Sending response (len=%u, checksum=0x%02X)\n",
 8008c1e:	0029      	movs	r1, r5
 8008c20:	4899      	ldr	r0, [pc, #612]	@ (8008e88 <USB_HID_Receive+0x394>)
 8008c22:	f011 fa9b 	bl	801a15c <iprintf>
           response_pkt.len, response_pkt.checksum);

    DeviceSetting_Send(&response_pkt);
 8008c26:	0020      	movs	r0, r4
 8008c28:	f7ff fe68 	bl	80088fc <DeviceSetting_Send>
    memset(data, 0, *len);
 8008c2c:	9b06      	ldr	r3, [sp, #24]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	0038      	movs	r0, r7
 8008c34:	f011 fc5e 	bl	801a4f4 <memset>
    *len = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9a06      	ldr	r2, [sp, #24]
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e76e      	b.n	8008b1e <USB_HID_Receive+0x2a>
        printf("[USB][GET_PARAM] SERIAL -> %s\n", current_settings.serial);
 8008c40:	4d92      	ldr	r5, [pc, #584]	@ (8008e8c <USB_HID_Receive+0x398>)
 8008c42:	4893      	ldr	r0, [pc, #588]	@ (8008e90 <USB_HID_Receive+0x39c>)
 8008c44:	e7c7      	b.n	8008bd6 <USB_HID_Receive+0xe2>
        printf("[USB][GET_PARAM] FW_VER -> %s\n", current_settings.firmware_ver);
 8008c46:	4d93      	ldr	r5, [pc, #588]	@ (8008e94 <USB_HID_Receive+0x3a0>)
 8008c48:	4893      	ldr	r0, [pc, #588]	@ (8008e98 <USB_HID_Receive+0x3a4>)
 8008c4a:	e7c4      	b.n	8008bd6 <USB_HID_Receive+0xe2>
        printf("[USB][GET_PARAM] RECORDING_TYPE -> %u\n", current_settings.sensor_type);
 8008c4c:	4d93      	ldr	r5, [pc, #588]	@ (8008e9c <USB_HID_Receive+0x3a8>)
 8008c4e:	4894      	ldr	r0, [pc, #592]	@ (8008ea0 <USB_HID_Receive+0x3ac>)
 8008c50:	7829      	ldrb	r1, [r5, #0]
        printf("[USB][GET_PARAM] RAD_UNIT -> %u\n", current_settings.display_dose_unit);
 8008c52:	f011 fa83 	bl	801a15c <iprintf>
        response_pkt.data[0] = current_settings.display_dose_unit;
 8008c56:	782b      	ldrb	r3, [r5, #0]
 8008c58:	7163      	strb	r3, [r4, #5]
        response_pkt.len = 1;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e018      	b.n	8008c90 <USB_HID_Receive+0x19c>
        printf("[USB][GET_PARAM] BATTERY_LEVEL not supported\n");
 8008c5e:	4891      	ldr	r0, [pc, #580]	@ (8008ea4 <USB_HID_Receive+0x3b0>)
 8008c60:	f011 faec 	bl	801a23c <puts>
        break;
 8008c64:	e7c8      	b.n	8008bf8 <USB_HID_Receive+0x104>
        printf("[USB][GET_PARAM] DEVICE_STATUS -> %u\n", current_settings.mode_status);
 8008c66:	4d90      	ldr	r5, [pc, #576]	@ (8008ea8 <USB_HID_Receive+0x3b4>)
 8008c68:	4890      	ldr	r0, [pc, #576]	@ (8008eac <USB_HID_Receive+0x3b8>)
 8008c6a:	7829      	ldrb	r1, [r5, #0]
 8008c6c:	e7f1      	b.n	8008c52 <USB_HID_Receive+0x15e>
        printf("[USB][GET_PARAM] TRIP_CODE -> %u\n", current_settings.trip_code);
 8008c6e:	4d90      	ldr	r5, [pc, #576]	@ (8008eb0 <USB_HID_Receive+0x3bc>)
 8008c70:	4e90      	ldr	r6, [pc, #576]	@ (8008eb4 <USB_HID_Receive+0x3c0>)
 8008c72:	7829      	ldrb	r1, [r5, #0]
 8008c74:	7833      	ldrb	r3, [r6, #0]
 8008c76:	0209      	lsls	r1, r1, #8
 8008c78:	4319      	orrs	r1, r3
 8008c7a:	488f      	ldr	r0, [pc, #572]	@ (8008eb8 <USB_HID_Receive+0x3c4>)
 8008c7c:	f011 fa6e 	bl	801a15c <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.trip_code, response_pkt.data[0], response_pkt.data[1]);
 8008c80:	782b      	ldrb	r3, [r5, #0]
 8008c82:	7832      	ldrb	r2, [r6, #0]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	4313      	orrs	r3, r2
 8008c88:	7163      	strb	r3, [r4, #5]
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	71a3      	strb	r3, [r4, #6]
        response_pkt.len = 2;
 8008c8e:	2302      	movs	r3, #2
        response_pkt.len = 4;
 8008c90:	7123      	strb	r3, [r4, #4]
        break;
 8008c92:	e7b1      	b.n	8008bf8 <USB_HID_Receive+0x104>
        printf("[USB][GET_PARAM] TRIP_DESCRIPTION -> %s\n", current_settings.trip_desc);
 8008c94:	4d89      	ldr	r5, [pc, #548]	@ (8008ebc <USB_HID_Receive+0x3c8>)
 8008c96:	488a      	ldr	r0, [pc, #552]	@ (8008ec0 <USB_HID_Receive+0x3cc>)
 8008c98:	e79d      	b.n	8008bd6 <USB_HID_Receive+0xe2>
        printf("[USB][GET_PARAM] START_MODE -> %u\n", current_settings.start_mode);
 8008c9a:	4d8a      	ldr	r5, [pc, #552]	@ (8008ec4 <USB_HID_Receive+0x3d0>)
 8008c9c:	488a      	ldr	r0, [pc, #552]	@ (8008ec8 <USB_HID_Receive+0x3d4>)
 8008c9e:	7829      	ldrb	r1, [r5, #0]
 8008ca0:	e7d7      	b.n	8008c52 <USB_HID_Receive+0x15e>
        printf("[USB][GET_PARAM] START_DELAY -> %u\n", current_settings.start_delay);
 8008ca2:	4c76      	ldr	r4, [pc, #472]	@ (8008e7c <USB_HID_Receive+0x388>)
 8008ca4:	4b89      	ldr	r3, [pc, #548]	@ (8008ecc <USB_HID_Receive+0x3d8>)
 8008ca6:	0026      	movs	r6, r4
 8008ca8:	0025      	movs	r5, r4
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	3665      	adds	r6, #101	@ 0x65
 8008cae:	7832      	ldrb	r2, [r6, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	3566      	adds	r5, #102	@ 0x66
 8008cb4:	0212      	lsls	r2, r2, #8
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	3467      	adds	r4, #103	@ 0x67
 8008cba:	782b      	ldrb	r3, [r5, #0]
 8008cbc:	7821      	ldrb	r1, [r4, #0]
 8008cbe:	041b      	lsls	r3, r3, #16
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	0609      	lsls	r1, r1, #24
 8008cc4:	4319      	orrs	r1, r3
 8008cc6:	4882      	ldr	r0, [pc, #520]	@ (8008ed0 <USB_HID_Receive+0x3dc>)
 8008cc8:	f011 fa48 	bl	801a15c <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.start_delay, response_pkt.data[0], response_pkt.data[1]);
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	7833      	ldrb	r3, [r6, #0]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	782a      	ldrb	r2, [r5, #0]
 8008cd8:	0412      	lsls	r2, r2, #16
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	7823      	ldrb	r3, [r4, #0]
 8008cde:	061b      	lsls	r3, r3, #24
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	aa10      	add	r2, sp, #64	@ 0x40
 8008ce4:	7153      	strb	r3, [r2, #5]
 8008ce6:	0a1b      	lsrs	r3, r3, #8
 8008ce8:	7193      	strb	r3, [r2, #6]
        response_pkt.len = 2;
 8008cea:	2302      	movs	r3, #2
        response_pkt.len = 5;
 8008cec:	7113      	strb	r3, [r2, #4]
        break;
 8008cee:	e783      	b.n	8008bf8 <USB_HID_Receive+0x104>
        uint32_t epoch = current_settings.start_reservation_time;
 8008cf0:	4b62      	ldr	r3, [pc, #392]	@ (8008e7c <USB_HID_Receive+0x388>)
 8008cf2:	4a78      	ldr	r2, [pc, #480]	@ (8008ed4 <USB_HID_Receive+0x3e0>)
 8008cf4:	0019      	movs	r1, r3
 8008cf6:	31a6      	adds	r1, #166	@ 0xa6
 8008cf8:	7809      	ldrb	r1, [r1, #0]
 8008cfa:	7812      	ldrb	r2, [r2, #0]
 8008cfc:	0209      	lsls	r1, r1, #8
 8008cfe:	4311      	orrs	r1, r2
 8008d00:	001a      	movs	r2, r3
 8008d02:	32a7      	adds	r2, #167	@ 0xa7
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	33a8      	adds	r3, #168	@ 0xa8
 8008d08:	0412      	lsls	r2, r2, #16
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] START_TIME -> epoch=%lu\n", (unsigned long)epoch);
 8008d0e:	4872      	ldr	r0, [pc, #456]	@ (8008ed8 <USB_HID_Receive+0x3e4>)
        uint32_t epoch = current_settings.start_reservation_time;
 8008d10:	0609      	lsls	r1, r1, #24
 8008d12:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((epoch >> 8) & 0xFF);
 8008d14:	0a0b      	lsrs	r3, r1, #8
 8008d16:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((epoch >> 16) & 0xFF);
 8008d18:	0c0b      	lsrs	r3, r1, #16
 8008d1a:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((epoch >> 24) & 0xFF);
 8008d1c:	0e0b      	lsrs	r3, r1, #24
 8008d1e:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008d20:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(epoch & 0xFF);
 8008d22:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008d24:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] LOGGING_DURATION -> %u day(s)\n", days);
 8008d26:	f011 fa19 	bl	801a15c <iprintf>
        break;
 8008d2a:	e765      	b.n	8008bf8 <USB_HID_Receive+0x104>
        printf("[USB][GET_PARAM] PAUSE -> %u\n", current_settings.pause_enable);
 8008d2c:	4d6b      	ldr	r5, [pc, #428]	@ (8008edc <USB_HID_Receive+0x3e8>)
 8008d2e:	486c      	ldr	r0, [pc, #432]	@ (8008ee0 <USB_HID_Receive+0x3ec>)
 8008d30:	7829      	ldrb	r1, [r5, #0]
 8008d32:	e78e      	b.n	8008c52 <USB_HID_Receive+0x15e>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8008d34:	4e6b      	ldr	r6, [pc, #428]	@ (8008ee4 <USB_HID_Receive+0x3f0>)
 8008d36:	ac0b      	add	r4, sp, #44	@ 0x2c
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8008d38:	ad0a      	add	r5, sp, #40	@ 0x28
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8008d3a:	0021      	movs	r1, r4
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	0030      	movs	r0, r6
 8008d40:	f009 f91a 	bl	8011f78 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8008d44:	0029      	movs	r1, r5
 8008d46:	2201      	movs	r2, #1
 8008d48:	0030      	movs	r0, r6
 8008d4a:	f009 f947 	bl	8011fdc <HAL_RTC_GetDate>
        response_pkt.data[0] = BCD2BIN(sDate.Year);
 8008d4e:	220a      	movs	r2, #10
 8008d50:	260f      	movs	r6, #15
 8008d52:	78e9      	ldrb	r1, [r5, #3]
 8008d54:	a810      	add	r0, sp, #64	@ 0x40
 8008d56:	090b      	lsrs	r3, r1, #4
 8008d58:	4353      	muls	r3, r2
 8008d5a:	4031      	ands	r1, r6
 8008d5c:	185b      	adds	r3, r3, r1
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	7143      	strb	r3, [r0, #5]
 8008d62:	9307      	str	r3, [sp, #28]
        response_pkt.data[1] = BCD2BIN(sDate.Month);
 8008d64:	7869      	ldrb	r1, [r5, #1]
 8008d66:	090b      	lsrs	r3, r1, #4
 8008d68:	4353      	muls	r3, r2
 8008d6a:	4031      	ands	r1, r6
 8008d6c:	185b      	adds	r3, r3, r1
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	7183      	strb	r3, [r0, #6]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008d72:	78a9      	ldrb	r1, [r5, #2]
        response_pkt.data[1] = BCD2BIN(sDate.Month);
 8008d74:	469c      	mov	ip, r3
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008d76:	090b      	lsrs	r3, r1, #4
 8008d78:	4353      	muls	r3, r2
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008d7a:	7825      	ldrb	r5, [r4, #0]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008d7c:	4031      	ands	r1, r6
 8008d7e:	185b      	adds	r3, r3, r1
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008d80:	0929      	lsrs	r1, r5, #4
 8008d82:	4351      	muls	r1, r2
 8008d84:	4035      	ands	r5, r6
 8008d86:	1949      	adds	r1, r1, r5
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008d88:	b2db      	uxtb	r3, r3
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008d8a:	b2c9      	uxtb	r1, r1
 8008d8c:	7201      	strb	r1, [r0, #8]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008d8e:	71c3      	strb	r3, [r0, #7]
 8008d90:	9308      	str	r3, [sp, #32]
        response_pkt.data[4] = BCD2BIN(sTime.Minutes);
 8008d92:	7863      	ldrb	r3, [r4, #1]
 8008d94:	091d      	lsrs	r5, r3, #4
 8008d96:	4355      	muls	r5, r2
 8008d98:	4033      	ands	r3, r6
 8008d9a:	18ed      	adds	r5, r5, r3
 8008d9c:	b2ed      	uxtb	r5, r5
 8008d9e:	7245      	strb	r5, [r0, #9]
        response_pkt.data[5] = BCD2BIN(sTime.Seconds);
 8008da0:	78a4      	ldrb	r4, [r4, #2]
 8008da2:	0923      	lsrs	r3, r4, #4
 8008da4:	435a      	muls	r2, r3
 8008da6:	4034      	ands	r4, r6
 8008da8:	1912      	adds	r2, r2, r4
        response_pkt.len = 6;
 8008daa:	2406      	movs	r4, #6
        response_pkt.data[5] = BCD2BIN(sTime.Seconds);
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	7282      	strb	r2, [r0, #10]
        response_pkt.len = 6;
 8008db0:	7104      	strb	r4, [r0, #4]
        printf("[USB][GET_PARAM] DEVICE_TIME -> 20%02u-%02u-%02u %02u:%02u:%02u\n",
 8008db2:	9b08      	ldr	r3, [sp, #32]
 8008db4:	9202      	str	r2, [sp, #8]
 8008db6:	9100      	str	r1, [sp, #0]
 8008db8:	4662      	mov	r2, ip
 8008dba:	9907      	ldr	r1, [sp, #28]
 8008dbc:	9501      	str	r5, [sp, #4]
 8008dbe:	484a      	ldr	r0, [pc, #296]	@ (8008ee8 <USB_HID_Receive+0x3f4>)
 8008dc0:	f011 f9cc 	bl	801a15c <iprintf>
        break;
 8008dc4:	e718      	b.n	8008bf8 <USB_HID_Receive+0x104>
        uint32_t v = (uint32_t)current_settings.temp_interval;
 8008dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8008e7c <USB_HID_Receive+0x388>)
 8008dc8:	4a48      	ldr	r2, [pc, #288]	@ (8008eec <USB_HID_Receive+0x3f8>)
 8008dca:	0019      	movs	r1, r3
 8008dcc:	3176      	adds	r1, #118	@ 0x76
 8008dce:	7809      	ldrb	r1, [r1, #0]
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	0209      	lsls	r1, r1, #8
 8008dd4:	4311      	orrs	r1, r2
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	3277      	adds	r2, #119	@ 0x77
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	3378      	adds	r3, #120	@ 0x78
 8008dde:	0412      	lsls	r2, r2, #16
 8008de0:	430a      	orrs	r2, r1
 8008de2:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] TEMP_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008de4:	4842      	ldr	r0, [pc, #264]	@ (8008ef0 <USB_HID_Receive+0x3fc>)
        uint32_t v = (uint32_t)current_settings.temp_interval;
 8008de6:	0609      	lsls	r1, r1, #24
 8008de8:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008dea:	0a0b      	lsrs	r3, r1, #8
 8008dec:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008dee:	0c0b      	lsrs	r3, r1, #16
 8008df0:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008df2:	0e0b      	lsrs	r3, r1, #24
 8008df4:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008df6:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008df8:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008dfa:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] TEMP_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008dfc:	e793      	b.n	8008d26 <USB_HID_Receive+0x232>
        uint32_t v = (uint32_t)current_settings.rad_interval; // 구조체가 u16이면 상위는 0
 8008dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8008e7c <USB_HID_Receive+0x388>)
 8008e00:	4a3c      	ldr	r2, [pc, #240]	@ (8008ef4 <USB_HID_Receive+0x400>)
 8008e02:	0019      	movs	r1, r3
 8008e04:	3172      	adds	r1, #114	@ 0x72
 8008e06:	7809      	ldrb	r1, [r1, #0]
 8008e08:	7812      	ldrb	r2, [r2, #0]
 8008e0a:	0209      	lsls	r1, r1, #8
 8008e0c:	4311      	orrs	r1, r2
 8008e0e:	001a      	movs	r2, r3
 8008e10:	3273      	adds	r2, #115	@ 0x73
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	3374      	adds	r3, #116	@ 0x74
 8008e16:	0412      	lsls	r2, r2, #16
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008e1c:	4836      	ldr	r0, [pc, #216]	@ (8008ef8 <USB_HID_Receive+0x404>)
        uint32_t v = (uint32_t)current_settings.rad_interval; // 구조체가 u16이면 상위는 0
 8008e1e:	0609      	lsls	r1, r1, #24
 8008e20:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008e22:	0a0b      	lsrs	r3, r1, #8
 8008e24:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008e26:	0c0b      	lsrs	r3, r1, #16
 8008e28:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008e2a:	0e0b      	lsrs	r3, r1, #24
 8008e2c:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008e2e:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008e30:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008e32:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008e34:	e777      	b.n	8008d26 <USB_HID_Receive+0x232>
        uint16_t days = current_settings.interval_duration_day;  // 0이면 미설정
 8008e36:	4a31      	ldr	r2, [pc, #196]	@ (8008efc <USB_HID_Receive+0x408>)
 8008e38:	4b31      	ldr	r3, [pc, #196]	@ (8008f00 <USB_HID_Receive+0x40c>)
 8008e3a:	7811      	ldrb	r1, [r2, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	0209      	lsls	r1, r1, #8
 8008e40:	4319      	orrs	r1, r3
        response_pkt.data[1] = (uint8_t)((days >> 8) & 0xFF);
 8008e42:	0a0b      	lsrs	r3, r1, #8
 8008e44:	71a3      	strb	r3, [r4, #6]
        response_pkt.len = 2;
 8008e46:	2302      	movs	r3, #2
        printf("[USB][GET_PARAM] LOGGING_DURATION -> %u day(s)\n", days);
 8008e48:	482e      	ldr	r0, [pc, #184]	@ (8008f04 <USB_HID_Receive+0x410>)
        response_pkt.data[0] = (uint8_t)(days & 0xFF);
 8008e4a:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 2;
 8008e4c:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] LOGGING_DURATION -> %u day(s)\n", days);
 8008e4e:	e76a      	b.n	8008d26 <USB_HID_Receive+0x232>
        printf("[USB][GET_PARAM] REPORT_FORMAT -> %u\n", current_settings.report_format);
 8008e50:	4d2d      	ldr	r5, [pc, #180]	@ (8008f08 <USB_HID_Receive+0x414>)
 8008e52:	482e      	ldr	r0, [pc, #184]	@ (8008f0c <USB_HID_Receive+0x418>)
 8008e54:	7829      	ldrb	r1, [r5, #0]
 8008e56:	e6fc      	b.n	8008c52 <USB_HID_Receive+0x15e>
        printf("[USB][GET_PARAM] TEMP_UNIT -> %u\n", current_settings.display_temp_unit);
 8008e58:	4d2d      	ldr	r5, [pc, #180]	@ (8008f10 <USB_HID_Receive+0x41c>)
 8008e5a:	482e      	ldr	r0, [pc, #184]	@ (8008f14 <USB_HID_Receive+0x420>)
 8008e5c:	7829      	ldrb	r1, [r5, #0]
 8008e5e:	e6f8      	b.n	8008c52 <USB_HID_Receive+0x15e>
        printf("[USB][GET_PARAM] RAD_UNIT -> %u\n", current_settings.display_dose_unit);
 8008e60:	4d2d      	ldr	r5, [pc, #180]	@ (8008f18 <USB_HID_Receive+0x424>)
 8008e62:	482e      	ldr	r0, [pc, #184]	@ (8008f1c <USB_HID_Receive+0x428>)
 8008e64:	7829      	ldrb	r1, [r5, #0]
 8008e66:	e6f4      	b.n	8008c52 <USB_HID_Receive+0x15e>
 8008e68:	0801dc80 	.word	0x0801dc80
 8008e6c:	0801dca5 	.word	0x0801dca5
 8008e70:	0801dcb6 	.word	0x0801dcb6
 8008e74:	0801dcb0 	.word	0x0801dcb0
 8008e78:	0801dcfb 	.word	0x0801dcfb
 8008e7c:	20002bac 	.word	0x20002bac
 8008e80:	0801dd1c 	.word	0x0801dd1c
 8008e84:	00005555 	.word	0x00005555
 8008e88:	0801e201 	.word	0x0801e201
 8008e8c:	20002bcc 	.word	0x20002bcc
 8008e90:	0801dd40 	.word	0x0801dd40
 8008e94:	20002bdd 	.word	0x20002bdd
 8008e98:	0801dd5f 	.word	0x0801dd5f
 8008e9c:	20002bdc 	.word	0x20002bdc
 8008ea0:	0801dd7e 	.word	0x0801dd7e
 8008ea4:	0801dda5 	.word	0x0801dda5
 8008ea8:	20002c38 	.word	0x20002c38
 8008eac:	0801ddd2 	.word	0x0801ddd2
 8008eb0:	20002be6 	.word	0x20002be6
 8008eb4:	20002be5 	.word	0x20002be5
 8008eb8:	0801ddf8 	.word	0x0801ddf8
 8008ebc:	20002be7 	.word	0x20002be7
 8008ec0:	0801de1a 	.word	0x0801de1a
 8008ec4:	20002c0f 	.word	0x20002c0f
 8008ec8:	0801de43 	.word	0x0801de43
 8008ecc:	20002c10 	.word	0x20002c10
 8008ed0:	0801de66 	.word	0x0801de66
 8008ed4:	20002c51 	.word	0x20002c51
 8008ed8:	0801de8a 	.word	0x0801de8a
 8008edc:	20002c1c 	.word	0x20002c1c
 8008ee0:	0801deb4 	.word	0x0801deb4
 8008ee4:	200009f8 	.word	0x200009f8
 8008ee8:	0801ded2 	.word	0x0801ded2
 8008eec:	20002c21 	.word	0x20002c21
 8008ef0:	0801df13 	.word	0x0801df13
 8008ef4:	20002c1d 	.word	0x20002c1d
 8008ef8:	0801df4e 	.word	0x0801df4e
 8008efc:	20002c56 	.word	0x20002c56
 8008f00:	20002c55 	.word	0x20002c55
 8008f04:	0801df88 	.word	0x0801df88
 8008f08:	20002c25 	.word	0x20002c25
 8008f0c:	0801dfb8 	.word	0x0801dfb8
 8008f10:	20002c36 	.word	0x20002c36
 8008f14:	0801dfde 	.word	0x0801dfde
 8008f18:	20002c37 	.word	0x20002c37
 8008f1c:	0801e000 	.word	0x0801e000
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f20:	2503      	movs	r5, #3
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008f22:	4be5      	ldr	r3, [pc, #916]	@ (80092b8 <USB_HID_Receive+0x7c4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f24:	49e5      	ldr	r1, [pc, #916]	@ (80092bc <USB_HID_Receive+0x7c8>)
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	4be5      	ldr	r3, [pc, #916]	@ (80092c0 <USB_HID_Receive+0x7cc>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f2c:	7809      	ldrb	r1, [r1, #0]
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008f2e:	781b      	ldrb	r3, [r3, #0]
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f30:	0209      	lsls	r1, r1, #8
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008f32:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f34:	4313      	orrs	r3, r2
 8008f36:	4ae3      	ldr	r2, [pc, #908]	@ (80092c4 <USB_HID_Receive+0x7d0>)
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008f38:	4ce3      	ldr	r4, [pc, #908]	@ (80092c8 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f3a:	7812      	ldrb	r2, [r2, #0]
 8008f3c:	3494      	adds	r4, #148	@ 0x94
 8008f3e:	4311      	orrs	r1, r2
 8008f40:	4ae2      	ldr	r2, [pc, #904]	@ (80092cc <USB_HID_Receive+0x7d8>)
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8008f42:	4ee3      	ldr	r6, [pc, #908]	@ (80092d0 <USB_HID_Receive+0x7dc>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f44:	7812      	ldrb	r2, [r2, #0]
 8008f46:	48e3      	ldr	r0, [pc, #908]	@ (80092d4 <USB_HID_Receive+0x7e0>)
 8008f48:	0412      	lsls	r2, r2, #16
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	7821      	ldrb	r1, [r4, #0]
 8008f4e:	0609      	lsls	r1, r1, #24
 8008f50:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8008f52:	69b1      	ldr	r1, [r6, #24]
 8008f54:	0a09      	lsrs	r1, r1, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008f56:	4029      	ands	r1, r5
 8008f58:	f011 f900 	bl	801a15c <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1);
 8008f5c:	69b3      	ldr	r3, [r6, #24]
 8008f5e:	aa10      	add	r2, sp, #64	@ 0x40
 8008f60:	0a1b      	lsrs	r3, r3, #8
 8008f62:	402b      	ands	r3, r5
 8008f64:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_rh1, response_pkt.data[1], response_pkt.data[2]);
 8008f66:	4bd7      	ldr	r3, [pc, #860]	@ (80092c4 <USB_HID_Receive+0x7d0>)
 8008f68:	7819      	ldrb	r1, [r3, #0]
 8008f6a:	4bd4      	ldr	r3, [pc, #848]	@ (80092bc <USB_HID_Receive+0x7c8>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	430b      	orrs	r3, r1
 8008f72:	49d6      	ldr	r1, [pc, #856]	@ (80092cc <USB_HID_Receive+0x7d8>)
 8008f74:	7809      	ldrb	r1, [r1, #0]
 8008f76:	0409      	lsls	r1, r1, #16
 8008f78:	4319      	orrs	r1, r3
 8008f7a:	7823      	ldrb	r3, [r4, #0]
 8008f7c:	061b      	lsls	r3, r3, #24
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	7193      	strb	r3, [r2, #6]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_rh1, response_pkt.data[3], response_pkt.data[4]);
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	7819      	ldrb	r1, [r3, #0]
 8008f8a:	4bcd      	ldr	r3, [pc, #820]	@ (80092c0 <USB_HID_Receive+0x7cc>)
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl2, response_pkt.data[3], response_pkt.data[4]);
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	021b      	lsls	r3, r3, #8
 8008f90:	430b      	orrs	r3, r1
 8008f92:	7213      	strb	r3, [r2, #8]
 8008f94:	0a1b      	lsrs	r3, r3, #8
 8008f96:	7253      	strb	r3, [r2, #9]
        response_pkt.len = 5;
 8008f98:	2305      	movs	r3, #5
 8008f9a:	e6a7      	b.n	8008cec <USB_HID_Receive+0x1f8>
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008f9c:	2503      	movs	r5, #3
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008f9e:	4bce      	ldr	r3, [pc, #824]	@ (80092d8 <USB_HID_Receive+0x7e4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fa0:	49ce      	ldr	r1, [pc, #824]	@ (80092dc <USB_HID_Receive+0x7e8>)
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	4bce      	ldr	r3, [pc, #824]	@ (80092e0 <USB_HID_Receive+0x7ec>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fa8:	7809      	ldrb	r1, [r1, #0]
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008faa:	781b      	ldrb	r3, [r3, #0]
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fac:	0209      	lsls	r1, r1, #8
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008fae:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	4acc      	ldr	r2, [pc, #816]	@ (80092e4 <USB_HID_Receive+0x7f0>)
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008fb4:	4cc4      	ldr	r4, [pc, #784]	@ (80092c8 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	349c      	adds	r4, #156	@ 0x9c
 8008fba:	4311      	orrs	r1, r2
 8008fbc:	4aca      	ldr	r2, [pc, #808]	@ (80092e8 <USB_HID_Receive+0x7f4>)
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8008fbe:	4ec4      	ldr	r6, [pc, #784]	@ (80092d0 <USB_HID_Receive+0x7dc>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	48ca      	ldr	r0, [pc, #808]	@ (80092ec <USB_HID_Receive+0x7f8>)
 8008fc4:	0412      	lsls	r2, r2, #16
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	7821      	ldrb	r1, [r4, #0]
 8008fca:	0609      	lsls	r1, r1, #24
 8008fcc:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8008fce:	69b1      	ldr	r1, [r6, #24]
 8008fd0:	0a89      	lsrs	r1, r1, #10
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008fd2:	4029      	ands	r1, r5
 8008fd4:	f011 f8c2 	bl	801a15c <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2);
 8008fd8:	69b3      	ldr	r3, [r6, #24]
 8008fda:	aa10      	add	r2, sp, #64	@ 0x40
 8008fdc:	0a9b      	lsrs	r3, r3, #10
 8008fde:	402b      	ands	r3, r5
 8008fe0:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_rh2, response_pkt.data[1], response_pkt.data[2]);
 8008fe2:	4bc0      	ldr	r3, [pc, #768]	@ (80092e4 <USB_HID_Receive+0x7f0>)
 8008fe4:	7819      	ldrb	r1, [r3, #0]
 8008fe6:	4bbd      	ldr	r3, [pc, #756]	@ (80092dc <USB_HID_Receive+0x7e8>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	430b      	orrs	r3, r1
 8008fee:	49be      	ldr	r1, [pc, #760]	@ (80092e8 <USB_HID_Receive+0x7f4>)
 8008ff0:	7809      	ldrb	r1, [r1, #0]
 8008ff2:	0409      	lsls	r1, r1, #16
 8008ff4:	4319      	orrs	r1, r3
 8008ff6:	7823      	ldrb	r3, [r4, #0]
 8008ff8:	061b      	lsls	r3, r3, #24
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	7193      	strb	r3, [r2, #6]
 8008ffe:	0a1b      	lsrs	r3, r3, #8
 8009000:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_rh2, response_pkt.data[3], response_pkt.data[4]);
 8009002:	9b07      	ldr	r3, [sp, #28]
 8009004:	7819      	ldrb	r1, [r3, #0]
 8009006:	4bb6      	ldr	r3, [pc, #728]	@ (80092e0 <USB_HID_Receive+0x7ec>)
 8009008:	e7c0      	b.n	8008f8c <USB_HID_Receive+0x498>
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 800900a:	4aaf      	ldr	r2, [pc, #700]	@ (80092c8 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 800900c:	2503      	movs	r5, #3
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 800900e:	0014      	movs	r4, r2
 8009010:	4bb7      	ldr	r3, [pc, #732]	@ (80092f0 <USB_HID_Receive+0x7fc>)
 8009012:	3495      	adds	r4, #149	@ 0x95
 8009014:	9307      	str	r3, [sp, #28]
 8009016:	7819      	ldrb	r1, [r3, #0]
 8009018:	4bb6      	ldr	r3, [pc, #728]	@ (80092f4 <USB_HID_Receive+0x800>)
 800901a:	3296      	adds	r2, #150	@ 0x96
 800901c:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 800901e:	4eac      	ldr	r6, [pc, #688]	@ (80092d0 <USB_HID_Receive+0x7dc>)
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8009020:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8009022:	430b      	orrs	r3, r1
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8009024:	7821      	ldrb	r1, [r4, #0]
 8009026:	9208      	str	r2, [sp, #32]
 8009028:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 800902a:	48b3      	ldr	r0, [pc, #716]	@ (80092f8 <USB_HID_Receive+0x804>)
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 800902c:	0212      	lsls	r2, r2, #8
 800902e:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8009030:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8009032:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8009034:	0b09      	lsrs	r1, r1, #12
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8009036:	1412      	asrs	r2, r2, #16
 8009038:	4029      	ands	r1, r5
 800903a:	f011 f88f 	bl	801a15c <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1);
 800903e:	69b3      	ldr	r3, [r6, #24]
 8009040:	aa10      	add	r2, sp, #64	@ 0x40
 8009042:	0b1b      	lsrs	r3, r3, #12
 8009044:	402b      	ands	r3, r5
 8009046:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_th1, response_pkt.data[1], response_pkt.data[2]);
 8009048:	9b08      	ldr	r3, [sp, #32]
 800904a:	7821      	ldrb	r1, [r4, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	430b      	orrs	r3, r1
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	141b      	asrs	r3, r3, #16
 8009056:	7193      	strb	r3, [r2, #6]
 8009058:	121b      	asrs	r3, r3, #8
 800905a:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_th1, response_pkt.data[3], response_pkt.data[4]);
 800905c:	9b07      	ldr	r3, [sp, #28]
 800905e:	7819      	ldrb	r1, [r3, #0]
 8009060:	4ba4      	ldr	r3, [pc, #656]	@ (80092f4 <USB_HID_Receive+0x800>)
 8009062:	e793      	b.n	8008f8c <USB_HID_Receive+0x498>
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009064:	4a98      	ldr	r2, [pc, #608]	@ (80092c8 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009066:	2503      	movs	r5, #3
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009068:	0014      	movs	r4, r2
 800906a:	4ba4      	ldr	r3, [pc, #656]	@ (80092fc <USB_HID_Receive+0x808>)
 800906c:	349d      	adds	r4, #157	@ 0x9d
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	7819      	ldrb	r1, [r3, #0]
 8009072:	4ba3      	ldr	r3, [pc, #652]	@ (8009300 <USB_HID_Receive+0x80c>)
 8009074:	329e      	adds	r2, #158	@ 0x9e
 8009076:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8009078:	4e95      	ldr	r6, [pc, #596]	@ (80092d0 <USB_HID_Receive+0x7dc>)
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 800907a:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 800907c:	430b      	orrs	r3, r1
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 800907e:	7821      	ldrb	r1, [r4, #0]
 8009080:	9208      	str	r2, [sp, #32]
 8009082:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009084:	489f      	ldr	r0, [pc, #636]	@ (8009304 <USB_HID_Receive+0x810>)
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8009086:	0212      	lsls	r2, r2, #8
 8009088:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 800908a:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 800908c:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 800908e:	0b89      	lsrs	r1, r1, #14
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009090:	1412      	asrs	r2, r2, #16
 8009092:	4029      	ands	r1, r5
 8009094:	f011 f862 	bl	801a15c <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2);
 8009098:	69b3      	ldr	r3, [r6, #24]
 800909a:	aa10      	add	r2, sp, #64	@ 0x40
 800909c:	0b9b      	lsrs	r3, r3, #14
 800909e:	402b      	ands	r3, r5
 80090a0:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_th2, response_pkt.data[1], response_pkt.data[2]);
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	7821      	ldrb	r1, [r4, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	430b      	orrs	r3, r1
 80090ac:	041b      	lsls	r3, r3, #16
 80090ae:	141b      	asrs	r3, r3, #16
 80090b0:	7193      	strb	r3, [r2, #6]
 80090b2:	121b      	asrs	r3, r3, #8
 80090b4:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_th2, response_pkt.data[3], response_pkt.data[4]);
 80090b6:	9b07      	ldr	r3, [sp, #28]
 80090b8:	7819      	ldrb	r1, [r3, #0]
 80090ba:	4b91      	ldr	r3, [pc, #580]	@ (8009300 <USB_HID_Receive+0x80c>)
 80090bc:	e766      	b.n	8008f8c <USB_HID_Receive+0x498>
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80090be:	4a82      	ldr	r2, [pc, #520]	@ (80092c8 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80090c0:	2503      	movs	r5, #3
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80090c2:	0014      	movs	r4, r2
 80090c4:	4b90      	ldr	r3, [pc, #576]	@ (8009308 <USB_HID_Receive+0x814>)
 80090c6:	3497      	adds	r4, #151	@ 0x97
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	7819      	ldrb	r1, [r3, #0]
 80090cc:	4b8f      	ldr	r3, [pc, #572]	@ (800930c <USB_HID_Receive+0x818>)
 80090ce:	3298      	adds	r2, #152	@ 0x98
 80090d0:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 80090d2:	4e7f      	ldr	r6, [pc, #508]	@ (80092d0 <USB_HID_Receive+0x7dc>)
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80090d4:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80090d6:	430b      	orrs	r3, r1
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80090d8:	7821      	ldrb	r1, [r4, #0]
 80090da:	9208      	str	r2, [sp, #32]
 80090dc:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80090de:	488c      	ldr	r0, [pc, #560]	@ (8009310 <USB_HID_Receive+0x81c>)
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80090e0:	0212      	lsls	r2, r2, #8
 80090e2:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 80090e4:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 80090e6:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 80090e8:	0c09      	lsrs	r1, r1, #16
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 80090ea:	1412      	asrs	r2, r2, #16
 80090ec:	4029      	ands	r1, r5
 80090ee:	f011 f835 	bl	801a15c <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1);
 80090f2:	69b3      	ldr	r3, [r6, #24]
 80090f4:	aa10      	add	r2, sp, #64	@ 0x40
 80090f6:	0c1b      	lsrs	r3, r3, #16
 80090f8:	402b      	ands	r3, r5
 80090fa:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_tl1, response_pkt.data[1], response_pkt.data[2]);
 80090fc:	9b08      	ldr	r3, [sp, #32]
 80090fe:	7821      	ldrb	r1, [r4, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	430b      	orrs	r3, r1
 8009106:	041b      	lsls	r3, r3, #16
 8009108:	141b      	asrs	r3, r3, #16
 800910a:	7193      	strb	r3, [r2, #6]
 800910c:	121b      	asrs	r3, r3, #8
 800910e:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl1, response_pkt.data[3], response_pkt.data[4]);
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	7819      	ldrb	r1, [r3, #0]
 8009114:	4b7d      	ldr	r3, [pc, #500]	@ (800930c <USB_HID_Receive+0x818>)
 8009116:	e739      	b.n	8008f8c <USB_HID_Receive+0x498>
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8009118:	4a6b      	ldr	r2, [pc, #428]	@ (80092c8 <USB_HID_Receive+0x7d4>)
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 800911a:	2503      	movs	r5, #3
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 800911c:	0014      	movs	r4, r2
 800911e:	4b7d      	ldr	r3, [pc, #500]	@ (8009314 <USB_HID_Receive+0x820>)
 8009120:	349f      	adds	r4, #159	@ 0x9f
 8009122:	9307      	str	r3, [sp, #28]
 8009124:	7819      	ldrb	r1, [r3, #0]
 8009126:	4b7c      	ldr	r3, [pc, #496]	@ (8009318 <USB_HID_Receive+0x824>)
 8009128:	32a0      	adds	r2, #160	@ 0xa0
 800912a:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 800912c:	4e68      	ldr	r6, [pc, #416]	@ (80092d0 <USB_HID_Receive+0x7dc>)
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 800912e:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009130:	430b      	orrs	r3, r1
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8009132:	7821      	ldrb	r1, [r4, #0]
 8009134:	9208      	str	r2, [sp, #32]
 8009136:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009138:	4878      	ldr	r0, [pc, #480]	@ (800931c <USB_HID_Receive+0x828>)
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 800913a:	0212      	lsls	r2, r2, #8
 800913c:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 800913e:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8009140:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 8009142:	0c89      	lsrs	r1, r1, #18
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8009144:	1412      	asrs	r2, r2, #16
 8009146:	4029      	ands	r1, r5
 8009148:	f011 f808 	bl	801a15c <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2);
 800914c:	69b3      	ldr	r3, [r6, #24]
 800914e:	aa10      	add	r2, sp, #64	@ 0x40
 8009150:	0c9b      	lsrs	r3, r3, #18
 8009152:	402b      	ands	r3, r5
 8009154:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_tl2, response_pkt.data[1], response_pkt.data[2]);
 8009156:	9b08      	ldr	r3, [sp, #32]
 8009158:	7821      	ldrb	r1, [r4, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	430b      	orrs	r3, r1
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	141b      	asrs	r3, r3, #16
 8009164:	7193      	strb	r3, [r2, #6]
 8009166:	121b      	asrs	r3, r3, #8
 8009168:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl2, response_pkt.data[3], response_pkt.data[4]);
 800916a:	9b07      	ldr	r3, [sp, #28]
 800916c:	7819      	ldrb	r1, [r3, #0]
 800916e:	4b6a      	ldr	r3, [pc, #424]	@ (8009318 <USB_HID_Receive+0x824>)
 8009170:	e70c      	b.n	8008f8c <USB_HID_Receive+0x498>
        printf("[USB][GET_PARAM] CURRENT_INDEX_READINGS -> temp=%u rad=%u\n", idx_temp, idx_rad);
 8009172:	4d6b      	ldr	r5, [pc, #428]	@ (8009320 <USB_HID_Receive+0x82c>)
 8009174:	4e6b      	ldr	r6, [pc, #428]	@ (8009324 <USB_HID_Receive+0x830>)
 8009176:	882a      	ldrh	r2, [r5, #0]
 8009178:	8831      	ldrh	r1, [r6, #0]
 800917a:	486b      	ldr	r0, [pc, #428]	@ (8009328 <USB_HID_Receive+0x834>)
 800917c:	f010 ffee 	bl	801a15c <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(idx_temp, response_pkt.data[0], response_pkt.data[1]);
 8009180:	8833      	ldrh	r3, [r6, #0]
 8009182:	7163      	strb	r3, [r4, #5]
 8009184:	0a1b      	lsrs	r3, r3, #8
 8009186:	71a3      	strb	r3, [r4, #6]
        U16_TO_LITTLE_ENDIAN_BYTES(idx_rad, response_pkt.data[2], response_pkt.data[3]);
 8009188:	882b      	ldrh	r3, [r5, #0]
 800918a:	71e3      	strb	r3, [r4, #7]
 800918c:	0a1b      	lsrs	r3, r3, #8
 800918e:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8009190:	2304      	movs	r3, #4
 8009192:	e57d      	b.n	8008c90 <USB_HID_Receive+0x19c>
        printf("[USB][GET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
 8009194:	9905      	ldr	r1, [sp, #20]
 8009196:	4865      	ldr	r0, [pc, #404]	@ (800932c <USB_HID_Receive+0x838>)
 8009198:	f010 ffe0 	bl	801a15c <iprintf>
        Rad_USBX_HID_ACK_response(DEVICE_CID_GET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 800919c:	22fe      	movs	r2, #254	@ 0xfe
 800919e:	2001      	movs	r0, #1
 80091a0:	9905      	ldr	r1, [sp, #20]
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 80091a2:	f7ff fb45 	bl	8008830 <Rad_USBX_HID_ACK_response.isra.0>
            return;
 80091a6:	e541      	b.n	8008c2c <USB_HID_Receive+0x138>
}

static void Rad_USBX_HID_Get_Records(const uint8_t parm_id)
{
    UNUSED(parm_id);
    usbx_host_req_records = 1; // Set flag to send all records at main loop
 80091a8:	2201      	movs	r2, #1
 80091aa:	4b61      	ldr	r3, [pc, #388]	@ (8009330 <USB_HID_Receive+0x83c>)
 80091ac:	601a      	str	r2, [r3, #0]
}
 80091ae:	e53d      	b.n	8008c2c <USB_HID_Receive+0x138>
    uint8_t parm_id = data[3];
 80091b0:	78fb      	ldrb	r3, [r7, #3]
    uint8_t payload_len = data[4];
 80091b2:	793d      	ldrb	r5, [r7, #4]
    printf("[USB][SET_PARAM] parm_id=0x%02X, payload_len=%u\n", parm_id, payload_len);
 80091b4:	0019      	movs	r1, r3
 80091b6:	002a      	movs	r2, r5
 80091b8:	485e      	ldr	r0, [pc, #376]	@ (8009334 <USB_HID_Receive+0x840>)
    uint8_t parm_id = data[3];
 80091ba:	9305      	str	r3, [sp, #20]
    printf("[USB][SET_PARAM] parm_id=0x%02X, payload_len=%u\n", parm_id, payload_len);
 80091bc:	f010 ffce 	bl	801a15c <iprintf>
    switch (parm_id)
 80091c0:	9b05      	ldr	r3, [sp, #20]
    uint8_t *payload = (uint8_t *)&data[5];
 80091c2:	1d7c      	adds	r4, r7, #5
    switch (parm_id)
 80091c4:	1e58      	subs	r0, r3, #1
 80091c6:	2819      	cmp	r0, #25
 80091c8:	d900      	bls.n	80091cc <USB_HID_Receive+0x6d8>
 80091ca:	e258      	b.n	800967e <USB_HID_Receive+0xb8a>
 80091cc:	f7f6 ffc2 	bl	8000154 <__gnu_thumb1_case_uhi>
 80091d0:	0032001a 	.word	0x0032001a
 80091d4:	004c003f 	.word	0x004c003f
 80091d8:	02570053 	.word	0x02570053
 80091dc:	00610057 	.word	0x00610057
 80091e0:	00e4006e 	.word	0x00e4006e
 80091e4:	011d00f8 	.word	0x011d00f8
 80091e8:	013d0122 	.word	0x013d0122
 80091ec:	01880165 	.word	0x01880165
 80091f0:	0192018d 	.word	0x0192018d
 80091f4:	01bb0197 	.word	0x01bb0197
 80091f8:	01fc01dd 	.word	0x01fc01dd
 80091fc:	02380219 	.word	0x02380219
 8009200:	00d20257 	.word	0x00d20257
        memset(current_settings.device_code, 0, sizeof(current_settings.device_code));
 8009204:	4e30      	ldr	r6, [pc, #192]	@ (80092c8 <USB_HID_Receive+0x7d4>)
 8009206:	2210      	movs	r2, #16
 8009208:	2100      	movs	r1, #0
 800920a:	0030      	movs	r0, r6
 800920c:	f011 f972 	bl	801a4f4 <memset>
        memcpy(current_settings.device_code, payload, payload_len);
 8009210:	002a      	movs	r2, r5
 8009212:	0021      	movs	r1, r4
 8009214:	0030      	movs	r0, r6
 8009216:	f011 fa37 	bl	801a688 <memcpy>
        printf("[USB][SET_PARAM] DEVICE_CODE <- %.*s\n", payload_len, payload);
 800921a:	4847      	ldr	r0, [pc, #284]	@ (8009338 <USB_HID_Receive+0x844>)
        printf("[USB][SET_PARAM] SERIAL <- %.*s\n", payload_len, payload);
 800921c:	0022      	movs	r2, r4
 800921e:	0029      	movs	r1, r5
 8009220:	f010 ff9c 	bl	801a15c <iprintf>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_SUCCESS);
 8009224:	2003      	movs	r0, #3
 8009226:	9905      	ldr	r1, [sp, #20]
 8009228:	2200      	movs	r2, #0
 800922a:	f7ff fb01 	bl	8008830 <Rad_USBX_HID_ACK_response.isra.0>
    printf("[USB][SET_PARAM] ACK sent for parm_id=0x%02X\n", parm_id);
 800922e:	4843      	ldr	r0, [pc, #268]	@ (800933c <USB_HID_Receive+0x848>)
 8009230:	9905      	ldr	r1, [sp, #20]
 8009232:	e12e      	b.n	8009492 <USB_HID_Receive+0x99e>
        memset(current_settings.serial, 0, sizeof(current_settings.serial));
 8009234:	4e42      	ldr	r6, [pc, #264]	@ (8009340 <USB_HID_Receive+0x84c>)
 8009236:	2210      	movs	r2, #16
 8009238:	2100      	movs	r1, #0
 800923a:	0030      	movs	r0, r6
 800923c:	f011 f95a 	bl	801a4f4 <memset>
        memcpy(current_settings.serial, payload, payload_len);
 8009240:	002a      	movs	r2, r5
 8009242:	0021      	movs	r1, r4
 8009244:	0030      	movs	r0, r6
 8009246:	f011 fa1f 	bl	801a688 <memcpy>
        printf("[USB][SET_PARAM] SERIAL <- %.*s\n", payload_len, payload);
 800924a:	483e      	ldr	r0, [pc, #248]	@ (8009344 <USB_HID_Receive+0x850>)
 800924c:	e7e6      	b.n	800921c <USB_HID_Receive+0x728>
        memset(current_settings.firmware_ver, 0, sizeof(current_settings.firmware_ver));
 800924e:	4e3e      	ldr	r6, [pc, #248]	@ (8009348 <USB_HID_Receive+0x854>)
 8009250:	2208      	movs	r2, #8
 8009252:	2100      	movs	r1, #0
 8009254:	0030      	movs	r0, r6
 8009256:	f011 f94d 	bl	801a4f4 <memset>
        memcpy(current_settings.firmware_ver, payload, payload_len);
 800925a:	002a      	movs	r2, r5
 800925c:	0021      	movs	r1, r4
 800925e:	0030      	movs	r0, r6
 8009260:	f011 fa12 	bl	801a688 <memcpy>
        printf("[USB][SET_PARAM] FIRMWARE_VER <- %.*s\n", payload_len, payload);
 8009264:	4839      	ldr	r0, [pc, #228]	@ (800934c <USB_HID_Receive+0x858>)
 8009266:	e7d9      	b.n	800921c <USB_HID_Receive+0x728>
        current_settings.sensor_type = payload[0];
 8009268:	7979      	ldrb	r1, [r7, #5]
 800926a:	4b39      	ldr	r3, [pc, #228]	@ (8009350 <USB_HID_Receive+0x85c>)
        printf("[USB][SET_PARAM] RECORDING_TYPE <- %u\n", current_settings.sensor_type);
 800926c:	4839      	ldr	r0, [pc, #228]	@ (8009354 <USB_HID_Receive+0x860>)
        current_settings.sensor_type = payload[0];
 800926e:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 8009270:	f010 ff74 	bl	801a15c <iprintf>
        break;
 8009274:	e7d6      	b.n	8009224 <USB_HID_Receive+0x730>
        printf("[USB][SET_PARAM] BATTERY_LEVEL not supported\n");
 8009276:	4838      	ldr	r0, [pc, #224]	@ (8009358 <USB_HID_Receive+0x864>)
 8009278:	f010 ffe0 	bl	801a23c <puts>
        break;
 800927c:	e7d2      	b.n	8009224 <USB_HID_Receive+0x730>
        current_settings.trip_code = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 800927e:	7861      	ldrb	r1, [r4, #1]
 8009280:	797b      	ldrb	r3, [r7, #5]
 8009282:	0209      	lsls	r1, r1, #8
 8009284:	4319      	orrs	r1, r3
 8009286:	4b35      	ldr	r3, [pc, #212]	@ (800935c <USB_HID_Receive+0x868>)
 8009288:	0a0a      	lsrs	r2, r1, #8
        printf("[USB][SET_PARAM] TRIP_CODE <- %u\n", current_settings.trip_code);
 800928a:	4835      	ldr	r0, [pc, #212]	@ (8009360 <USB_HID_Receive+0x86c>)
        current_settings.trip_code = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 800928c:	7019      	strb	r1, [r3, #0]
 800928e:	705a      	strb	r2, [r3, #1]
        printf("[USB][SET_PARAM] TRIP_CODE <- %u\n", current_settings.trip_code);
 8009290:	e7ee      	b.n	8009270 <USB_HID_Receive+0x77c>
        memset(current_settings.trip_desc, 0, sizeof(current_settings.trip_desc));
 8009292:	4e34      	ldr	r6, [pc, #208]	@ (8009364 <USB_HID_Receive+0x870>)
 8009294:	2228      	movs	r2, #40	@ 0x28
 8009296:	2100      	movs	r1, #0
 8009298:	0030      	movs	r0, r6
 800929a:	f011 f92b 	bl	801a4f4 <memset>
        memcpy(current_settings.trip_desc, payload, payload_len);
 800929e:	002a      	movs	r2, r5
 80092a0:	0021      	movs	r1, r4
 80092a2:	0030      	movs	r0, r6
 80092a4:	f011 f9f0 	bl	801a688 <memcpy>
        printf("[USB][SET_PARAM] TRIP_DESCRIPTION <- %.*s\n", payload_len, payload);
 80092a8:	482f      	ldr	r0, [pc, #188]	@ (8009368 <USB_HID_Receive+0x874>)
 80092aa:	e7b7      	b.n	800921c <USB_HID_Receive+0x728>
        current_settings.start_mode = payload[0];
 80092ac:	7979      	ldrb	r1, [r7, #5]
 80092ae:	4b2f      	ldr	r3, [pc, #188]	@ (800936c <USB_HID_Receive+0x878>)
        printf("[USB][SET_PARAM] START_MODE <- %u\n", current_settings.start_mode);
 80092b0:	482f      	ldr	r0, [pc, #188]	@ (8009370 <USB_HID_Receive+0x87c>)
        current_settings.start_mode = payload[0];
 80092b2:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] START_MODE <- %u\n", current_settings.start_mode);
 80092b4:	e7dc      	b.n	8009270 <USB_HID_Receive+0x77c>
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	20002c26 	.word	0x20002c26
 80092bc:	20002c3e 	.word	0x20002c3e
 80092c0:	20002c27 	.word	0x20002c27
 80092c4:	20002c3d 	.word	0x20002c3d
 80092c8:	20002bac 	.word	0x20002bac
 80092cc:	20002c3f 	.word	0x20002c3f
 80092d0:	20000b50 	.word	0x20000b50
 80092d4:	0801e021 	.word	0x0801e021
 80092d8:	20002c28 	.word	0x20002c28
 80092dc:	20002c46 	.word	0x20002c46
 80092e0:	20002c29 	.word	0x20002c29
 80092e4:	20002c45 	.word	0x20002c45
 80092e8:	20002c47 	.word	0x20002c47
 80092ec:	0801e05f 	.word	0x0801e05f
 80092f0:	20002c2a 	.word	0x20002c2a
 80092f4:	20002c2b 	.word	0x20002c2b
 80092f8:	0801e09d 	.word	0x0801e09d
 80092fc:	20002c2c 	.word	0x20002c2c
 8009300:	20002c2d 	.word	0x20002c2d
 8009304:	0801e0dc 	.word	0x0801e0dc
 8009308:	20002c2e 	.word	0x20002c2e
 800930c:	20002c2f 	.word	0x20002c2f
 8009310:	0801e11b 	.word	0x0801e11b
 8009314:	20002c30 	.word	0x20002c30
 8009318:	20002c31 	.word	0x20002c31
 800931c:	0801e159 	.word	0x0801e159
 8009320:	20000500 	.word	0x20000500
 8009324:	200004fe 	.word	0x200004fe
 8009328:	0801e197 	.word	0x0801e197
 800932c:	0801e1d2 	.word	0x0801e1d2
 8009330:	20000b74 	.word	0x20000b74
 8009334:	0801e23e 	.word	0x0801e23e
 8009338:	0801e26f 	.word	0x0801e26f
 800933c:	0801e79c 	.word	0x0801e79c
 8009340:	20002bcc 	.word	0x20002bcc
 8009344:	0801e295 	.word	0x0801e295
 8009348:	20002bdd 	.word	0x20002bdd
 800934c:	0801e2b6 	.word	0x0801e2b6
 8009350:	20002bdc 	.word	0x20002bdc
 8009354:	0801e2dd 	.word	0x0801e2dd
 8009358:	0801e304 	.word	0x0801e304
 800935c:	20002be5 	.word	0x20002be5
 8009360:	0801e331 	.word	0x0801e331
 8009364:	20002be7 	.word	0x20002be7
 8009368:	0801e353 	.word	0x0801e353
 800936c:	20002c0f 	.word	0x20002c0f
 8009370:	0801e37e 	.word	0x0801e37e
        current_settings.interval_duration_day = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009374:	7863      	ldrb	r3, [r4, #1]
 8009376:	797a      	ldrb	r2, [r7, #5]
 8009378:	4dda      	ldr	r5, [pc, #872]	@ (80096e4 <USB_HID_Receive+0xbf0>)
 800937a:	4cdb      	ldr	r4, [pc, #876]	@ (80096e8 <USB_HID_Receive+0xbf4>)
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	4313      	orrs	r3, r2
 8009380:	702b      	strb	r3, [r5, #0]
        printf("[USB][SET_PARAM] LOGGING_DURATION <- %u day(s)\n", current_settings.interval_duration_day);
 8009382:	34aa      	adds	r4, #170	@ 0xaa
        current_settings.interval_duration_day = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009384:	0a1b      	lsrs	r3, r3, #8
 8009386:	706b      	strb	r3, [r5, #1]
        Save_CurrentSettings();
 8009388:	f000 fb46 	bl	8009a18 <Save_CurrentSettings>
        printf("[USB][SET_PARAM] LOGGING_DURATION <- %u day(s)\n", current_settings.interval_duration_day);
 800938c:	7821      	ldrb	r1, [r4, #0]
 800938e:	782b      	ldrb	r3, [r5, #0]
 8009390:	0209      	lsls	r1, r1, #8
 8009392:	48d6      	ldr	r0, [pc, #856]	@ (80096ec <USB_HID_Receive+0xbf8>)
 8009394:	4319      	orrs	r1, r3
 8009396:	e76b      	b.n	8009270 <USB_HID_Receive+0x77c>
        current_settings.start_delay = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009398:	7863      	ldrb	r3, [r4, #1]
 800939a:	7979      	ldrb	r1, [r7, #5]
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	4319      	orrs	r1, r3
 80093a0:	4ad3      	ldr	r2, [pc, #844]	@ (80096f0 <USB_HID_Receive+0xbfc>)
 80093a2:	4bd1      	ldr	r3, [pc, #836]	@ (80096e8 <USB_HID_Receive+0xbf4>)
 80093a4:	7011      	strb	r1, [r2, #0]
 80093a6:	001a      	movs	r2, r3
 80093a8:	0a08      	lsrs	r0, r1, #8
 80093aa:	3265      	adds	r2, #101	@ 0x65
 80093ac:	7010      	strb	r0, [r2, #0]
 80093ae:	001a      	movs	r2, r3
 80093b0:	2000      	movs	r0, #0
 80093b2:	3266      	adds	r2, #102	@ 0x66
 80093b4:	7010      	strb	r0, [r2, #0]
 80093b6:	3367      	adds	r3, #103	@ 0x67
 80093b8:	0e0a      	lsrs	r2, r1, #24
        printf("[USB][SET_PARAM] START_DELAY <- %u\n", current_settings.start_delay);
 80093ba:	48ce      	ldr	r0, [pc, #824]	@ (80096f4 <USB_HID_Receive+0xc00>)
        current_settings.start_delay = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 80093bc:	701a      	strb	r2, [r3, #0]
        printf("[USB][SET_PARAM] START_DELAY <- %u\n", current_settings.start_delay);
 80093be:	e757      	b.n	8009270 <USB_HID_Receive+0x77c>
        uint8_t yy = payload[0];  // 2000년 기준
 80093c0:	797b      	ldrb	r3, [r7, #5]
        uint8_t hh = payload[3];
 80093c2:	7a3c      	ldrb	r4, [r7, #8]
        uint8_t yy = payload[0];  // 2000년 기준
 80093c4:	9307      	str	r3, [sp, #28]
        uint8_t mm = payload[1];
 80093c6:	79bb      	ldrb	r3, [r7, #6]
        uint8_t mi = payload[4];
 80093c8:	7a7d      	ldrb	r5, [r7, #9]
        uint8_t mm = payload[1];
 80093ca:	9308      	str	r3, [sp, #32]
        uint8_t dd = payload[2];
 80093cc:	79fb      	ldrb	r3, [r7, #7]
        uint8_t ss = payload[5];
 80093ce:	7abe      	ldrb	r6, [r7, #10]
        uint8_t dd = payload[2];
 80093d0:	9309      	str	r3, [sp, #36]	@ 0x24
        uint32_t epoch = ymd_to_epoch(yy, mm, dd, hh, mi, ss);
 80093d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d4:	0023      	movs	r3, r4
 80093d6:	9908      	ldr	r1, [sp, #32]
 80093d8:	9807      	ldr	r0, [sp, #28]
 80093da:	9601      	str	r6, [sp, #4]
 80093dc:	9500      	str	r5, [sp, #0]
 80093de:	f000 fa73 	bl	80098c8 <ymd_to_epoch>
 80093e2:	0002      	movs	r2, r0
        current_settings.start_reservation_time = epoch;
 80093e4:	4bc4      	ldr	r3, [pc, #784]	@ (80096f8 <USB_HID_Receive+0xc04>)
 80093e6:	0a01      	lsrs	r1, r0, #8
 80093e8:	7059      	strb	r1, [r3, #1]
 80093ea:	0c01      	lsrs	r1, r0, #16
 80093ec:	7099      	strb	r1, [r3, #2]
 80093ee:	0e01      	lsrs	r1, r0, #24
 80093f0:	7018      	strb	r0, [r3, #0]
 80093f2:	70d9      	strb	r1, [r3, #3]
        printf("[USB][SET_PARAM] START_TIME <- 20%02u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\n",
 80093f4:	48c1      	ldr	r0, [pc, #772]	@ (80096fc <USB_HID_Receive+0xc08>)
 80093f6:	9203      	str	r2, [sp, #12]
 80093f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fa:	9a08      	ldr	r2, [sp, #32]
 80093fc:	9907      	ldr	r1, [sp, #28]
 80093fe:	9602      	str	r6, [sp, #8]
 8009400:	9501      	str	r5, [sp, #4]
 8009402:	9400      	str	r4, [sp, #0]
 8009404:	f010 feaa 	bl	801a15c <iprintf>
        break;
 8009408:	e70c      	b.n	8009224 <USB_HID_Receive+0x730>
        current_settings.pause_enable = payload[0];
 800940a:	7979      	ldrb	r1, [r7, #5]
 800940c:	4bbc      	ldr	r3, [pc, #752]	@ (8009700 <USB_HID_Receive+0xc0c>)
        printf("[USB][SET_PARAM] PAUSE <- %u\n", current_settings.pause_enable);
 800940e:	48bd      	ldr	r0, [pc, #756]	@ (8009704 <USB_HID_Receive+0xc10>)
        current_settings.pause_enable = payload[0];
 8009410:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] PAUSE <- %u\n", current_settings.pause_enable);
 8009412:	e72d      	b.n	8009270 <USB_HID_Receive+0x77c>
        uint8_t yy = payload[0];
 8009414:	797b      	ldrb	r3, [r7, #5]
        uint8_t hh = payload[3];
 8009416:	7a3c      	ldrb	r4, [r7, #8]
        uint8_t yy = payload[0];
 8009418:	9307      	str	r3, [sp, #28]
        uint8_t mm = payload[1];
 800941a:	79bb      	ldrb	r3, [r7, #6]
        uint8_t mi = payload[4];
 800941c:	7a7d      	ldrb	r5, [r7, #9]
        uint8_t mm = payload[1];
 800941e:	9308      	str	r3, [sp, #32]
        uint8_t dd = payload[2];
 8009420:	79fb      	ldrb	r3, [r7, #7]
        uint8_t ss = payload[5];
 8009422:	7abe      	ldrb	r6, [r7, #10]
        uint8_t dd = payload[2];
 8009424:	9309      	str	r3, [sp, #36]	@ 0x24
        Set_RTC_TimeOnly(yy, mm, dd, hh, mi, ss);
 8009426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009428:	0023      	movs	r3, r4
 800942a:	9908      	ldr	r1, [sp, #32]
 800942c:	9807      	ldr	r0, [sp, #28]
 800942e:	9601      	str	r6, [sp, #4]
 8009430:	9500      	str	r5, [sp, #0]
 8009432:	f7fc fb97 	bl	8005b64 <Set_RTC_TimeOnly>
        printf("[USB][SET_PARAM] DEVICE_TIME <- 20%02u-%02u-%02u %02u:%02u:%02u\n",
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	9a08      	ldr	r2, [sp, #32]
 800943a:	9907      	ldr	r1, [sp, #28]
 800943c:	9602      	str	r6, [sp, #8]
 800943e:	9501      	str	r5, [sp, #4]
 8009440:	9400      	str	r4, [sp, #0]
 8009442:	48b1      	ldr	r0, [pc, #708]	@ (8009708 <USB_HID_Receive+0xc14>)
 8009444:	f010 fe8a 	bl	801a15c <iprintf>
        break;
 8009448:	e6ec      	b.n	8009224 <USB_HID_Receive+0x730>
        if (payload_len == 4) {
 800944a:	2d04      	cmp	r5, #4
 800944c:	d114      	bne.n	8009478 <USB_HID_Receive+0x984>
            v32  =  ((uint32_t)payload[0])
 800944e:	7862      	ldrb	r2, [r4, #1]
 8009450:	797b      	ldrb	r3, [r7, #5]
 8009452:	0212      	lsls	r2, r2, #8
 8009454:	431a      	orrs	r2, r3
 8009456:	78a3      	ldrb	r3, [r4, #2]
 8009458:	78e1      	ldrb	r1, [r4, #3]
 800945a:	041b      	lsls	r3, r3, #16
 800945c:	4313      	orrs	r3, r2
 800945e:	0609      	lsls	r1, r1, #24
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009460:	4319      	orrs	r1, r3
        current_settings.temp_interval = (typeof(current_settings.temp_interval))v32;
 8009462:	4baa      	ldr	r3, [pc, #680]	@ (800970c <USB_HID_Receive+0xc18>)
 8009464:	0a0a      	lsrs	r2, r1, #8
 8009466:	705a      	strb	r2, [r3, #1]
 8009468:	0c0a      	lsrs	r2, r1, #16
 800946a:	709a      	strb	r2, [r3, #2]
        printf("[USB][SET_PARAM] TEMP_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 800946c:	48a8      	ldr	r0, [pc, #672]	@ (8009710 <USB_HID_Receive+0xc1c>)
        current_settings.temp_interval = (typeof(current_settings.temp_interval))v32;
 800946e:	0e0a      	lsrs	r2, r1, #24
 8009470:	7019      	strb	r1, [r3, #0]
 8009472:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 8009474:	002a      	movs	r2, r5
 8009476:	e6d3      	b.n	8009220 <USB_HID_Receive+0x72c>
        } else if (payload_len == 2) {
 8009478:	2d02      	cmp	r5, #2
 800947a:	d103      	bne.n	8009484 <USB_HID_Receive+0x990>
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 800947c:	7861      	ldrb	r1, [r4, #1]
 800947e:	797b      	ldrb	r3, [r7, #5]
 8009480:	0209      	lsls	r1, r1, #8
 8009482:	e7ed      	b.n	8009460 <USB_HID_Receive+0x96c>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id,
 8009484:	2003      	movs	r0, #3
 8009486:	22fe      	movs	r2, #254	@ 0xfe
 8009488:	210e      	movs	r1, #14
 800948a:	f7ff f9d1 	bl	8008830 <Rad_USBX_HID_ACK_response.isra.0>
            printf("[USB][SET_PARAM][ERR] TEMP_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 800948e:	48a1      	ldr	r0, [pc, #644]	@ (8009714 <USB_HID_Receive+0xc20>)
            printf("[USB][SET_PARAM][ERR] RAD_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 8009490:	0029      	movs	r1, r5
    printf("[USB][SET_PARAM] ACK sent for parm_id=0x%02X\n", parm_id);
 8009492:	f010 fe63 	bl	801a15c <iprintf>
 8009496:	f7ff fbc9 	bl	8008c2c <USB_HID_Receive+0x138>
        if (payload_len == 4) {
 800949a:	2d04      	cmp	r5, #4
 800949c:	d113      	bne.n	80094c6 <USB_HID_Receive+0x9d2>
            v32  =  ((uint32_t)payload[0])
 800949e:	7862      	ldrb	r2, [r4, #1]
 80094a0:	797b      	ldrb	r3, [r7, #5]
 80094a2:	0212      	lsls	r2, r2, #8
 80094a4:	431a      	orrs	r2, r3
 80094a6:	78a3      	ldrb	r3, [r4, #2]
 80094a8:	78e1      	ldrb	r1, [r4, #3]
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	4313      	orrs	r3, r2
 80094ae:	0609      	lsls	r1, r1, #24
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]); // 하위호환
 80094b0:	4319      	orrs	r1, r3
        current_settings.rad_interval = (typeof(current_settings.rad_interval))v32;
 80094b2:	4b99      	ldr	r3, [pc, #612]	@ (8009718 <USB_HID_Receive+0xc24>)
 80094b4:	0a0a      	lsrs	r2, r1, #8
 80094b6:	705a      	strb	r2, [r3, #1]
 80094b8:	0c0a      	lsrs	r2, r1, #16
 80094ba:	709a      	strb	r2, [r3, #2]
 80094bc:	0e0a      	lsrs	r2, r1, #24
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 80094be:	4897      	ldr	r0, [pc, #604]	@ (800971c <USB_HID_Receive+0xc28>)
        current_settings.rad_interval = (typeof(current_settings.rad_interval))v32;
 80094c0:	7019      	strb	r1, [r3, #0]
 80094c2:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 80094c4:	e7d6      	b.n	8009474 <USB_HID_Receive+0x980>
        } else if (payload_len == 2) {
 80094c6:	2d02      	cmp	r5, #2
 80094c8:	d103      	bne.n	80094d2 <USB_HID_Receive+0x9de>
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]); // 하위호환
 80094ca:	7861      	ldrb	r1, [r4, #1]
 80094cc:	797b      	ldrb	r3, [r7, #5]
 80094ce:	0209      	lsls	r1, r1, #8
 80094d0:	e7ee      	b.n	80094b0 <USB_HID_Receive+0x9bc>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id,
 80094d2:	2003      	movs	r0, #3
 80094d4:	22fe      	movs	r2, #254	@ 0xfe
 80094d6:	210f      	movs	r1, #15
 80094d8:	f7ff f9aa 	bl	8008830 <Rad_USBX_HID_ACK_response.isra.0>
            printf("[USB][SET_PARAM][ERR] RAD_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 80094dc:	4890      	ldr	r0, [pc, #576]	@ (8009720 <USB_HID_Receive+0xc2c>)
 80094de:	e7d7      	b.n	8009490 <USB_HID_Receive+0x99c>
        current_settings.report_format = payload[0];
 80094e0:	7979      	ldrb	r1, [r7, #5]
 80094e2:	4b90      	ldr	r3, [pc, #576]	@ (8009724 <USB_HID_Receive+0xc30>)
        printf("[USB][SET_PARAM] REPORT_FORMAT <- %u\n", current_settings.report_format);
 80094e4:	4890      	ldr	r0, [pc, #576]	@ (8009728 <USB_HID_Receive+0xc34>)
        current_settings.report_format = payload[0];
 80094e6:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] REPORT_FORMAT <- %u\n", current_settings.report_format);
 80094e8:	e6c2      	b.n	8009270 <USB_HID_Receive+0x77c>
        current_settings.display_temp_unit = payload[0];
 80094ea:	7979      	ldrb	r1, [r7, #5]
 80094ec:	4b8f      	ldr	r3, [pc, #572]	@ (800972c <USB_HID_Receive+0xc38>)
        printf("[USB][SET_PARAM] TEMP_UNIT <- %u\n", current_settings.display_temp_unit);
 80094ee:	4890      	ldr	r0, [pc, #576]	@ (8009730 <USB_HID_Receive+0xc3c>)
        current_settings.display_temp_unit = payload[0];
 80094f0:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] TEMP_UNIT <- %u\n", current_settings.display_temp_unit);
 80094f2:	e6bd      	b.n	8009270 <USB_HID_Receive+0x77c>
        current_settings.display_dose_unit = payload[0];
 80094f4:	7979      	ldrb	r1, [r7, #5]
 80094f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009734 <USB_HID_Receive+0xc40>)
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 80094f8:	488f      	ldr	r0, [pc, #572]	@ (8009738 <USB_HID_Receive+0xc44>)
        current_settings.display_dose_unit = payload[0];
 80094fa:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 80094fc:	e6b8      	b.n	8009270 <USB_HID_Receive+0x77c>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, payload[0]);
 80094fe:	22c0      	movs	r2, #192	@ 0xc0
 8009500:	797b      	ldrb	r3, [r7, #5]
 8009502:	498e      	ldr	r1, [pc, #568]	@ (800973c <USB_HID_Receive+0xc48>)
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	021b      	lsls	r3, r3, #8
 8009508:	488d      	ldr	r0, [pc, #564]	@ (8009740 <USB_HID_Receive+0xc4c>)
 800950a:	4013      	ands	r3, r2
 800950c:	698a      	ldr	r2, [r1, #24]
 800950e:	4002      	ands	r2, r0
 8009510:	4313      	orrs	r3, r2
 8009512:	618b      	str	r3, [r1, #24]
        current_settings.alarm_rh1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[1], payload[2]);
 8009514:	79fa      	ldrb	r2, [r7, #7]
 8009516:	79bb      	ldrb	r3, [r7, #6]
 8009518:	0212      	lsls	r2, r2, #8
 800951a:	431a      	orrs	r2, r3
 800951c:	4b89      	ldr	r3, [pc, #548]	@ (8009744 <USB_HID_Receive+0xc50>)
 800951e:	0a11      	lsrs	r1, r2, #8
 8009520:	7059      	strb	r1, [r3, #1]
 8009522:	2100      	movs	r1, #0
 8009524:	7099      	strb	r1, [r3, #2]
 8009526:	0e11      	lsrs	r1, r2, #24
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	70d9      	strb	r1, [r3, #3]
        current_settings.alarm_delay_rh1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 800952c:	7a7b      	ldrb	r3, [r7, #9]
 800952e:	7a39      	ldrb	r1, [r7, #8]
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	430b      	orrs	r3, r1
 8009534:	4984      	ldr	r1, [pc, #528]	@ (8009748 <USB_HID_Receive+0xc54>)
 8009536:	0a18      	lsrs	r0, r3, #8
 8009538:	7048      	strb	r0, [r1, #1]
 800953a:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] RAD_HIGH_ALARM_1 <- state=%u th=%u delay=%u\n",
 800953c:	7979      	ldrb	r1, [r7, #5]
 800953e:	4883      	ldr	r0, [pc, #524]	@ (800974c <USB_HID_Receive+0xc58>)
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_2 <- state=%u th=%d delay=%u\n",
 8009540:	f010 fe0c 	bl	801a15c <iprintf>
        break;
 8009544:	e66e      	b.n	8009224 <USB_HID_Receive+0x730>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, payload[0]);
 8009546:	22c0      	movs	r2, #192	@ 0xc0
 8009548:	797b      	ldrb	r3, [r7, #5]
 800954a:	497c      	ldr	r1, [pc, #496]	@ (800973c <USB_HID_Receive+0xc48>)
 800954c:	0112      	lsls	r2, r2, #4
 800954e:	029b      	lsls	r3, r3, #10
 8009550:	487f      	ldr	r0, [pc, #508]	@ (8009750 <USB_HID_Receive+0xc5c>)
 8009552:	4013      	ands	r3, r2
 8009554:	698a      	ldr	r2, [r1, #24]
 8009556:	4002      	ands	r2, r0
 8009558:	4313      	orrs	r3, r2
 800955a:	618b      	str	r3, [r1, #24]
        current_settings.alarm_rh2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[1], payload[2]);
 800955c:	79fa      	ldrb	r2, [r7, #7]
 800955e:	79bb      	ldrb	r3, [r7, #6]
 8009560:	0212      	lsls	r2, r2, #8
 8009562:	431a      	orrs	r2, r3
 8009564:	4b7b      	ldr	r3, [pc, #492]	@ (8009754 <USB_HID_Receive+0xc60>)
 8009566:	0a11      	lsrs	r1, r2, #8
 8009568:	7059      	strb	r1, [r3, #1]
 800956a:	2100      	movs	r1, #0
 800956c:	7099      	strb	r1, [r3, #2]
 800956e:	0e11      	lsrs	r1, r2, #24
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	70d9      	strb	r1, [r3, #3]
        current_settings.alarm_delay_rh2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 8009574:	7a7b      	ldrb	r3, [r7, #9]
 8009576:	7a39      	ldrb	r1, [r7, #8]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	430b      	orrs	r3, r1
 800957c:	4976      	ldr	r1, [pc, #472]	@ (8009758 <USB_HID_Receive+0xc64>)
 800957e:	0a18      	lsrs	r0, r3, #8
 8009580:	7048      	strb	r0, [r1, #1]
 8009582:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] RAD_HIGH_ALARM_2 <- state=%u th=%u delay=%u\n",
 8009584:	7979      	ldrb	r1, [r7, #5]
 8009586:	4875      	ldr	r0, [pc, #468]	@ (800975c <USB_HID_Receive+0xc68>)
 8009588:	e7da      	b.n	8009540 <USB_HID_Receive+0xa4c>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, payload[0]);
 800958a:	22c0      	movs	r2, #192	@ 0xc0
 800958c:	797b      	ldrb	r3, [r7, #5]
 800958e:	496b      	ldr	r1, [pc, #428]	@ (800973c <USB_HID_Receive+0xc48>)
 8009590:	0192      	lsls	r2, r2, #6
 8009592:	031b      	lsls	r3, r3, #12
 8009594:	4872      	ldr	r0, [pc, #456]	@ (8009760 <USB_HID_Receive+0xc6c>)
 8009596:	4013      	ands	r3, r2
 8009598:	698a      	ldr	r2, [r1, #24]
 800959a:	4002      	ands	r2, r0
 800959c:	4313      	orrs	r3, r2
 800959e:	618b      	str	r3, [r1, #24]
        current_settings.alarm_th1 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	79ba      	ldrb	r2, [r7, #6]
 80095a4:	496f      	ldr	r1, [pc, #444]	@ (8009764 <USB_HID_Receive+0xc70>)
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	4313      	orrs	r3, r2
 80095aa:	700b      	strb	r3, [r1, #0]
 80095ac:	b21a      	sxth	r2, r3
 80095ae:	0a1b      	lsrs	r3, r3, #8
 80095b0:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_th1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3],payload[4]);
 80095b2:	7a7b      	ldrb	r3, [r7, #9]
 80095b4:	7a39      	ldrb	r1, [r7, #8]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	430b      	orrs	r3, r1
 80095ba:	496b      	ldr	r1, [pc, #428]	@ (8009768 <USB_HID_Receive+0xc74>)
 80095bc:	0a18      	lsrs	r0, r3, #8
 80095be:	7048      	strb	r0, [r1, #1]
 80095c0:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_HIGH_ALARM_1 <- state=%u th=%d delay=%u\n",
 80095c2:	7979      	ldrb	r1, [r7, #5]
 80095c4:	4869      	ldr	r0, [pc, #420]	@ (800976c <USB_HID_Receive+0xc78>)
 80095c6:	e7bb      	b.n	8009540 <USB_HID_Receive+0xa4c>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, payload[0]);
 80095c8:	495c      	ldr	r1, [pc, #368]	@ (800973c <USB_HID_Receive+0xc48>)
 80095ca:	797b      	ldrb	r3, [r7, #5]
 80095cc:	698a      	ldr	r2, [r1, #24]
 80095ce:	4868      	ldr	r0, [pc, #416]	@ (8009770 <USB_HID_Receive+0xc7c>)
 80095d0:	079b      	lsls	r3, r3, #30
 80095d2:	4002      	ands	r2, r0
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	4313      	orrs	r3, r2
 80095d8:	618b      	str	r3, [r1, #24]
        current_settings.alarm_th2 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	79ba      	ldrb	r2, [r7, #6]
 80095de:	4965      	ldr	r1, [pc, #404]	@ (8009774 <USB_HID_Receive+0xc80>)
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	4313      	orrs	r3, r2
 80095e4:	700b      	strb	r3, [r1, #0]
 80095e6:	b21a      	sxth	r2, r3
 80095e8:	0a1b      	lsrs	r3, r3, #8
 80095ea:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_th2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3],payload[4]);
 80095ec:	7a7b      	ldrb	r3, [r7, #9]
 80095ee:	7a39      	ldrb	r1, [r7, #8]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	430b      	orrs	r3, r1
 80095f4:	4960      	ldr	r1, [pc, #384]	@ (8009778 <USB_HID_Receive+0xc84>)
 80095f6:	0a18      	lsrs	r0, r3, #8
 80095f8:	7048      	strb	r0, [r1, #1]
 80095fa:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_HIGH_ALARM_2 <- state=%u th=%d delay=%u\n",
 80095fc:	7979      	ldrb	r1, [r7, #5]
 80095fe:	485f      	ldr	r0, [pc, #380]	@ (800977c <USB_HID_Receive+0xc88>)
 8009600:	e79e      	b.n	8009540 <USB_HID_Receive+0xa4c>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, payload[0]);
 8009602:	22c0      	movs	r2, #192	@ 0xc0
 8009604:	797b      	ldrb	r3, [r7, #5]
 8009606:	494d      	ldr	r1, [pc, #308]	@ (800973c <USB_HID_Receive+0xc48>)
 8009608:	0292      	lsls	r2, r2, #10
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	485c      	ldr	r0, [pc, #368]	@ (8009780 <USB_HID_Receive+0xc8c>)
 800960e:	4013      	ands	r3, r2
 8009610:	698a      	ldr	r2, [r1, #24]
 8009612:	4002      	ands	r2, r0
 8009614:	4313      	orrs	r3, r2
 8009616:	618b      	str	r3, [r1, #24]
        current_settings.alarm_tl1 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	79ba      	ldrb	r2, [r7, #6]
 800961c:	4959      	ldr	r1, [pc, #356]	@ (8009784 <USB_HID_Receive+0xc90>)
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	4313      	orrs	r3, r2
 8009622:	700b      	strb	r3, [r1, #0]
 8009624:	b21a      	sxth	r2, r3
 8009626:	0a1b      	lsrs	r3, r3, #8
 8009628:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_tl1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 800962a:	7a7b      	ldrb	r3, [r7, #9]
 800962c:	7a39      	ldrb	r1, [r7, #8]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	430b      	orrs	r3, r1
 8009632:	4955      	ldr	r1, [pc, #340]	@ (8009788 <USB_HID_Receive+0xc94>)
 8009634:	0a18      	lsrs	r0, r3, #8
 8009636:	7048      	strb	r0, [r1, #1]
 8009638:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_1 <- state=%u th=%d delay=%u\n",
 800963a:	7979      	ldrb	r1, [r7, #5]
 800963c:	4853      	ldr	r0, [pc, #332]	@ (800978c <USB_HID_Receive+0xc98>)
 800963e:	e77f      	b.n	8009540 <USB_HID_Receive+0xa4c>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, payload[0]);
 8009640:	22c0      	movs	r2, #192	@ 0xc0
 8009642:	797b      	ldrb	r3, [r7, #5]
 8009644:	493d      	ldr	r1, [pc, #244]	@ (800973c <USB_HID_Receive+0xc48>)
 8009646:	0312      	lsls	r2, r2, #12
 8009648:	049b      	lsls	r3, r3, #18
 800964a:	4851      	ldr	r0, [pc, #324]	@ (8009790 <USB_HID_Receive+0xc9c>)
 800964c:	4013      	ands	r3, r2
 800964e:	698a      	ldr	r2, [r1, #24]
 8009650:	4002      	ands	r2, r0
 8009652:	4313      	orrs	r3, r2
 8009654:	618b      	str	r3, [r1, #24]
        current_settings.alarm_tl2 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	79ba      	ldrb	r2, [r7, #6]
 800965a:	494e      	ldr	r1, [pc, #312]	@ (8009794 <USB_HID_Receive+0xca0>)
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	4313      	orrs	r3, r2
 8009660:	700b      	strb	r3, [r1, #0]
 8009662:	b21a      	sxth	r2, r3
 8009664:	0a1b      	lsrs	r3, r3, #8
 8009666:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_tl2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 8009668:	7a7b      	ldrb	r3, [r7, #9]
 800966a:	7a39      	ldrb	r1, [r7, #8]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	430b      	orrs	r3, r1
 8009670:	4949      	ldr	r1, [pc, #292]	@ (8009798 <USB_HID_Receive+0xca4>)
 8009672:	0a18      	lsrs	r0, r3, #8
 8009674:	7048      	strb	r0, [r1, #1]
 8009676:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_2 <- state=%u th=%d delay=%u\n",
 8009678:	7979      	ldrb	r1, [r7, #5]
 800967a:	4848      	ldr	r0, [pc, #288]	@ (800979c <USB_HID_Receive+0xca8>)
 800967c:	e760      	b.n	8009540 <USB_HID_Receive+0xa4c>
        printf("[USB][SET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
 800967e:	9905      	ldr	r1, [sp, #20]
 8009680:	4847      	ldr	r0, [pc, #284]	@ (80097a0 <USB_HID_Receive+0xcac>)
 8009682:	f010 fd6b 	bl	801a15c <iprintf>
        Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 8009686:	22fe      	movs	r2, #254	@ 0xfe
 8009688:	2003      	movs	r0, #3
 800968a:	9905      	ldr	r1, [sp, #20]
 800968c:	e589      	b.n	80091a2 <USB_HID_Receive+0x6ae>
    switch (command_code) {
 800968e:	9b05      	ldr	r3, [sp, #20]
 8009690:	1e58      	subs	r0, r3, #1
 8009692:	2804      	cmp	r0, #4
 8009694:	d81e      	bhi.n	80096d4 <USB_HID_Receive+0xbe0>
 8009696:	f7f6 fd49 	bl	800012c <__gnu_thumb1_case_uqi>
 800969a:	0803      	.short	0x0803
 800969c:	1510      	.short	0x1510
 800969e:	17          	.byte	0x17
 800969f:	00          	.byte	0x00
            printf("[CMD] Start logging\n");
 80096a0:	4840      	ldr	r0, [pc, #256]	@ (80097a4 <USB_HID_Receive+0xcb0>)
            printf("[CMD] Resume\n");
 80096a2:	f010 fdcb 	bl	801a23c <puts>
            Switch_Backup_reg(MODE_Start);
 80096a6:	2003      	movs	r0, #3
 80096a8:	e003      	b.n	80096b2 <USB_HID_Receive+0xbbe>
            printf("[CMD] Stop logging\n");
 80096aa:	483f      	ldr	r0, [pc, #252]	@ (80097a8 <USB_HID_Receive+0xcb4>)
 80096ac:	f010 fdc6 	bl	801a23c <puts>
            Switch_Backup_reg(MODE_Stop);
 80096b0:	2002      	movs	r0, #2
            Switch_Backup_reg(MODE_Start);
 80096b2:	f7fc fc55 	bl	8005f60 <Switch_Backup_reg>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_SUCCESS);
 80096b6:	2200      	movs	r2, #0
 80096b8:	e011      	b.n	80096de <USB_HID_Receive+0xbea>
            printf("[CMD] Pause\n");
 80096ba:	483c      	ldr	r0, [pc, #240]	@ (80097ac <USB_HID_Receive+0xcb8>)
 80096bc:	f010 fdbe 	bl	801a23c <puts>
            Switch_Backup_reg(MODE_Pause);
 80096c0:	2004      	movs	r0, #4
 80096c2:	e7f6      	b.n	80096b2 <USB_HID_Receive+0xbbe>
            printf("[CMD] Resume\n");
 80096c4:	483a      	ldr	r0, [pc, #232]	@ (80097b0 <USB_HID_Receive+0xcbc>)
 80096c6:	e7ec      	b.n	80096a2 <USB_HID_Receive+0xbae>
            printf("[CMD] Erase Data\n");
 80096c8:	483a      	ldr	r0, [pc, #232]	@ (80097b4 <USB_HID_Receive+0xcc0>)
 80096ca:	f010 fdb7 	bl	801a23c <puts>
            meas_data_log_erase();
 80096ce:	f7fe ffe7 	bl	80086a0 <meas_data_log_erase>
            break;
 80096d2:	e7f0      	b.n	80096b6 <USB_HID_Receive+0xbc2>
            printf("[CMD] Unknown code: 0x%02X\n", command_code);
 80096d4:	4838      	ldr	r0, [pc, #224]	@ (80097b8 <USB_HID_Receive+0xcc4>)
 80096d6:	9905      	ldr	r1, [sp, #20]
 80096d8:	f010 fd40 	bl	801a15c <iprintf>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 80096dc:	22fe      	movs	r2, #254	@ 0xfe
 80096de:	2004      	movs	r0, #4
 80096e0:	9905      	ldr	r1, [sp, #20]
 80096e2:	e55e      	b.n	80091a2 <USB_HID_Receive+0x6ae>
 80096e4:	20002c55 	.word	0x20002c55
 80096e8:	20002bac 	.word	0x20002bac
 80096ec:	0801e3a1 	.word	0x0801e3a1
 80096f0:	20002c10 	.word	0x20002c10
 80096f4:	0801e3d1 	.word	0x0801e3d1
 80096f8:	20002c51 	.word	0x20002c51
 80096fc:	0801e3f5 	.word	0x0801e3f5
 8009700:	20002c1c 	.word	0x20002c1c
 8009704:	0801e441 	.word	0x0801e441
 8009708:	0801e45f 	.word	0x0801e45f
 800970c:	20002c21 	.word	0x20002c21
 8009710:	0801e4dc 	.word	0x0801e4dc
 8009714:	0801e4a0 	.word	0x0801e4a0
 8009718:	20002c1d 	.word	0x20002c1d
 800971c:	0801e553 	.word	0x0801e553
 8009720:	0801e518 	.word	0x0801e518
 8009724:	20002c25 	.word	0x20002c25
 8009728:	0801e58e 	.word	0x0801e58e
 800972c:	20002c36 	.word	0x20002c36
 8009730:	0801e5b4 	.word	0x0801e5b4
 8009734:	20002c37 	.word	0x20002c37
 8009738:	0801e5d6 	.word	0x0801e5d6
 800973c:	20000b50 	.word	0x20000b50
 8009740:	fffffcff 	.word	0xfffffcff
 8009744:	20002c3d 	.word	0x20002c3d
 8009748:	20002c26 	.word	0x20002c26
 800974c:	0801e5f7 	.word	0x0801e5f7
 8009750:	fffff3ff 	.word	0xfffff3ff
 8009754:	20002c45 	.word	0x20002c45
 8009758:	20002c28 	.word	0x20002c28
 800975c:	0801e635 	.word	0x0801e635
 8009760:	ffffcfff 	.word	0xffffcfff
 8009764:	20002c41 	.word	0x20002c41
 8009768:	20002c2a 	.word	0x20002c2a
 800976c:	0801e673 	.word	0x0801e673
 8009770:	ffff3fff 	.word	0xffff3fff
 8009774:	20002c49 	.word	0x20002c49
 8009778:	20002c2c 	.word	0x20002c2c
 800977c:	0801e6b2 	.word	0x0801e6b2
 8009780:	fffcffff 	.word	0xfffcffff
 8009784:	20002c43 	.word	0x20002c43
 8009788:	20002c2e 	.word	0x20002c2e
 800978c:	0801e6f1 	.word	0x0801e6f1
 8009790:	fff3ffff 	.word	0xfff3ffff
 8009794:	20002c4b 	.word	0x20002c4b
 8009798:	20002c30 	.word	0x20002c30
 800979c:	0801e72f 	.word	0x0801e72f
 80097a0:	0801e76d 	.word	0x0801e76d
 80097a4:	0801e7ca 	.word	0x0801e7ca
 80097a8:	0801e7de 	.word	0x0801e7de
 80097ac:	0801e7f1 	.word	0x0801e7f1
 80097b0:	0801e7fd 	.word	0x0801e7fd
 80097b4:	0801e80a 	.word	0x0801e80a
 80097b8:	0801e81b 	.word	0x0801e81b
         uint8_t yy = data[4];
 80097bc:	793b      	ldrb	r3, [r7, #4]
         uint8_t hh = data[7];
 80097be:	79fc      	ldrb	r4, [r7, #7]
         uint8_t yy = data[4];
 80097c0:	9305      	str	r3, [sp, #20]
         uint8_t mm = data[5];
 80097c2:	797b      	ldrb	r3, [r7, #5]
         uint8_t mi = data[8];
 80097c4:	7a3d      	ldrb	r5, [r7, #8]
         uint8_t mm = data[5];
 80097c6:	9307      	str	r3, [sp, #28]
         uint8_t dd = data[6];
 80097c8:	79bb      	ldrb	r3, [r7, #6]
         uint8_t ss = data[9];
 80097ca:	7a7e      	ldrb	r6, [r7, #9]
         uint8_t dd = data[6];
 80097cc:	9308      	str	r3, [sp, #32]
         Set_RTC_TimeOnly(yy, mm, dd, hh, mi, ss);
 80097ce:	9a08      	ldr	r2, [sp, #32]
 80097d0:	0023      	movs	r3, r4
 80097d2:	9907      	ldr	r1, [sp, #28]
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	9601      	str	r6, [sp, #4]
 80097d8:	9500      	str	r5, [sp, #0]
 80097da:	f7fc f9c3 	bl	8005b64 <Set_RTC_TimeOnly>
         printf("[CMD] Set RTC to 20%02u-%02u-%02u %02u:%02u:%02u\n", yy, mm, dd, hh, mi, ss);
 80097de:	9b08      	ldr	r3, [sp, #32]
 80097e0:	9a07      	ldr	r2, [sp, #28]
 80097e2:	9905      	ldr	r1, [sp, #20]
 80097e4:	9602      	str	r6, [sp, #8]
 80097e6:	9501      	str	r5, [sp, #4]
 80097e8:	9400      	str	r4, [sp, #0]
 80097ea:	480b      	ldr	r0, [pc, #44]	@ (8009818 <USB_HID_Receive+0xd24>)
 80097ec:	f010 fcb6 	bl	801a15c <iprintf>
         break;
 80097f0:	f7ff fa1c 	bl	8008c2c <USB_HID_Receive+0x138>
    	 RAD_USBX_Clean_Vol();
 80097f4:	f7ff f970 	bl	8008ad8 <RAD_USBX_Clean_Vol>
    	 printf("Erase CSV & PDF");
 80097f8:	4808      	ldr	r0, [pc, #32]	@ (800981c <USB_HID_Receive+0xd28>)
 80097fa:	f010 fcaf 	bl	801a15c <iprintf>
         break;
 80097fe:	f7ff fa15 	bl	8008c2c <USB_HID_Receive+0x138>
        LOG_APP("[USB] Unknown command ID: 0x%02X\n", cmd_id);
 8009802:	4b07      	ldr	r3, [pc, #28]	@ (8009820 <USB_HID_Receive+0xd2c>)
 8009804:	4a07      	ldr	r2, [pc, #28]	@ (8009824 <USB_HID_Receive+0xd30>)
 8009806:	6818      	ldr	r0, [r3, #0]
 8009808:	4907      	ldr	r1, [pc, #28]	@ (8009828 <USB_HID_Receive+0xd34>)
 800980a:	002b      	movs	r3, r5
 800980c:	68c0      	ldr	r0, [r0, #12]
 800980e:	f010 fc79 	bl	801a104 <fiprintf>
        break;
 8009812:	f7ff fa0b 	bl	8008c2c <USB_HID_Receive+0x138>
 8009816:	46c0      	nop			@ (mov r8, r8)
 8009818:	0801e837 	.word	0x0801e837
 800981c:	0801e869 	.word	0x0801e869
 8009820:	200002cc 	.word	0x200002cc
 8009824:	0801e879 	.word	0x0801e879
 8009828:	0801e87d 	.word	0x0801e87d

0800982c <RAD_Fatfs_MountOnly>:


FRESULT RAD_Fatfs_MountOnly(void)
{
    // 안전하게 언마운트 후 재마운트 (선택)
    f_mount(0, "", 0);
 800982c:	2200      	movs	r2, #0
{
 800982e:	b510      	push	{r4, lr}
    f_mount(0, "", 0);
 8009830:	4c0c      	ldr	r4, [pc, #48]	@ (8009864 <RAD_Fatfs_MountOnly+0x38>)
 8009832:	0010      	movs	r0, r2
 8009834:	0021      	movs	r1, r4
 8009836:	f00b fa15 	bl	8014c64 <f_mount>

    FRESULT r = f_mount(&fs, "", 1);  // 즉시 마운트
 800983a:	0021      	movs	r1, r4
 800983c:	2201      	movs	r2, #1
 800983e:	480a      	ldr	r0, [pc, #40]	@ (8009868 <RAD_Fatfs_MountOnly+0x3c>)
 8009840:	f00b fa10 	bl	8014c64 <f_mount>
 8009844:	1e04      	subs	r4, r0, #0
    if (r == FR_OK) {
        printf("[FATFS] remount OK\r\n");
 8009846:	4809      	ldr	r0, [pc, #36]	@ (800986c <RAD_Fatfs_MountOnly+0x40>)
    if (r == FR_OK) {
 8009848:	d002      	beq.n	8009850 <RAD_Fatfs_MountOnly+0x24>
    } else if (r == FR_NO_FILESYSTEM) {
 800984a:	2c0d      	cmp	r4, #13
 800984c:	d104      	bne.n	8009858 <RAD_Fatfs_MountOnly+0x2c>
        printf("[FATFS] remount FAIL: no filesystem (FR_NO_FILESYSTEM)\r\n");
 800984e:	4808      	ldr	r0, [pc, #32]	@ (8009870 <RAD_Fatfs_MountOnly+0x44>)
 8009850:	f010 fcf4 	bl	801a23c <puts>
        // RAD_USBX_Fatfs_format_disk();
    } else {
        printf("[FATFS] remount FAIL: %d\r\n", r);
    }
    return r;
}
 8009854:	0020      	movs	r0, r4
 8009856:	bd10      	pop	{r4, pc}
        printf("[FATFS] remount FAIL: %d\r\n", r);
 8009858:	0021      	movs	r1, r4
 800985a:	4806      	ldr	r0, [pc, #24]	@ (8009874 <RAD_Fatfs_MountOnly+0x48>)
 800985c:	f010 fc7e 	bl	801a15c <iprintf>
 8009860:	e7f8      	b.n	8009854 <RAD_Fatfs_MountOnly+0x28>
 8009862:	46c0      	nop			@ (mov r8, r8)
 8009864:	0801f3a0 	.word	0x0801f3a0
 8009868:	20001b7c 	.word	0x20001b7c
 800986c:	0801e8a4 	.word	0x0801e8a4
 8009870:	0801e8b8 	.word	0x0801e8b8
 8009874:	0801e8f0 	.word	0x0801e8f0

08009878 <is_leap_u16>:
extern volatile bool RTC_During_Wakeup;


// ==== Epoch(절대초) 유틸: 2000-01-01 00:00:00 기준 ====
bool is_leap_u16(uint16_t y2000){
    uint16_t y = 2000 + y2000;
 8009878:	23fa      	movs	r3, #250	@ 0xfa
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	18c0      	adds	r0, r0, r3
bool is_leap_u16(uint16_t y2000){
 800987e:	b510      	push	{r4, lr}
    uint16_t y = 2000 + y2000;
 8009880:	b284      	uxth	r4, r0
    return ((y%4==0) && (y%100!=0)) || (y%400==0);
 8009882:	0780      	lsls	r0, r0, #30
 8009884:	d107      	bne.n	8009896 <is_leap_u16+0x1e>
 8009886:	2164      	movs	r1, #100	@ 0x64
 8009888:	0020      	movs	r0, r4
 800988a:	f7f6 fcf3 	bl	8000274 <__aeabi_uidivmod>
 800988e:	b289      	uxth	r1, r1
 8009890:	2001      	movs	r0, #1
 8009892:	2900      	cmp	r1, #0
 8009894:	d107      	bne.n	80098a6 <is_leap_u16+0x2e>
 8009896:	21c8      	movs	r1, #200	@ 0xc8
 8009898:	0020      	movs	r0, r4
 800989a:	0049      	lsls	r1, r1, #1
 800989c:	f7f6 fcea 	bl	8000274 <__aeabi_uidivmod>
 80098a0:	b288      	uxth	r0, r1
 80098a2:	4243      	negs	r3, r0
 80098a4:	4158      	adcs	r0, r3
}
 80098a6:	bd10      	pop	{r4, pc}

080098a8 <dim_u16>:
 uint8_t dim_u16(uint8_t m, uint16_t y2000){
 80098a8:	0003      	movs	r3, r0
 80098aa:	b510      	push	{r4, lr}
 80098ac:	0008      	movs	r0, r1
    static const uint8_t dim[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    return (m==2) ? (uint8_t)(dim[1] + (is_leap_u16(y2000)?1:0)) : dim[m-1];
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d104      	bne.n	80098bc <dim_u16+0x14>
 80098b2:	f7ff ffe1 	bl	8009878 <is_leap_u16>
 80098b6:	301c      	adds	r0, #28
 80098b8:	b2c0      	uxtb	r0, r0
}
 80098ba:	bd10      	pop	{r4, pc}
    return (m==2) ? (uint8_t)(dim[1] + (is_leap_u16(y2000)?1:0)) : dim[m-1];
 80098bc:	4a01      	ldr	r2, [pc, #4]	@ (80098c4 <dim_u16+0x1c>)
 80098be:	5c98      	ldrb	r0, [r3, r2]
 80098c0:	e7fb      	b.n	80098ba <dim_u16+0x12>
 80098c2:	46c0      	nop			@ (mov r8, r8)
 80098c4:	080203f9 	.word	0x080203f9

080098c8 <ymd_to_epoch>:
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 80098c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    // days since 2000-01-01
    uint32_t days = 0;
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 80098ca:	2400      	movs	r4, #0
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 80098cc:	0006      	movs	r6, r0
 80098ce:	000f      	movs	r7, r1
    uint32_t days = 0;
 80098d0:	0025      	movs	r5, r4
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 80098d2:	b085      	sub	sp, #20
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	9200      	str	r2, [sp, #0]
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	ab0b      	add	r3, sp, #44	@ 0x2c
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	9303      	str	r3, [sp, #12]
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 80098e4:	42b4      	cmp	r4, r6
 80098e6:	d114      	bne.n	8009912 <ymd_to_epoch+0x4a>
    for(uint8_t im=1; im<m; ++im)  days += dim_u16(im, y2000);
 80098e8:	2401      	movs	r4, #1
 80098ea:	42bc      	cmp	r4, r7
 80098ec:	d31a      	bcc.n	8009924 <ymd_to_epoch+0x5c>
    days += (uint32_t)(d - 1);
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 80098ee:	203c      	movs	r0, #60	@ 0x3c
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	9a01      	ldr	r2, [sp, #4]
 80098f4:	4358      	muls	r0, r3
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	18c0      	adds	r0, r0, r3
 80098fa:	23e1      	movs	r3, #225	@ 0xe1
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	4353      	muls	r3, r2
 8009900:	18c0      	adds	r0, r0, r3
    days += (uint32_t)(d - 1);
 8009902:	9b00      	ldr	r3, [sp, #0]
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 8009904:	4a0b      	ldr	r2, [pc, #44]	@ (8009934 <ymd_to_epoch+0x6c>)
    days += (uint32_t)(d - 1);
 8009906:	3b01      	subs	r3, #1
 8009908:	195b      	adds	r3, r3, r5
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 800990a:	4353      	muls	r3, r2
 800990c:	18c0      	adds	r0, r0, r3
}
 800990e:	b005      	add	sp, #20
 8009910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 8009912:	0020      	movs	r0, r4
 8009914:	f7ff ffb0 	bl	8009878 <is_leap_u16>
 8009918:	306e      	adds	r0, #110	@ 0x6e
 800991a:	30ff      	adds	r0, #255	@ 0xff
 800991c:	3401      	adds	r4, #1
 800991e:	182d      	adds	r5, r5, r0
 8009920:	b2a4      	uxth	r4, r4
 8009922:	e7df      	b.n	80098e4 <ymd_to_epoch+0x1c>
    for(uint8_t im=1; im<m; ++im)  days += dim_u16(im, y2000);
 8009924:	0020      	movs	r0, r4
 8009926:	0031      	movs	r1, r6
 8009928:	f7ff ffbe 	bl	80098a8 <dim_u16>
 800992c:	3401      	adds	r4, #1
 800992e:	182d      	adds	r5, r5, r0
 8009930:	b2e4      	uxtb	r4, r4
 8009932:	e7da      	b.n	80098ea <ymd_to_epoch+0x22>
 8009934:	00015180 	.word	0x00015180

08009938 <epoch_to_ymdhms>:
 void epoch_to_ymdhms(uint32_t epoch, uint16_t *y2000, uint8_t *m, uint8_t *d,
                             uint8_t *hh, uint8_t *mm, uint8_t *ss){
 8009938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800993a:	000e      	movs	r6, r1
    uint32_t days = epoch / 86400u;
 800993c:	4920      	ldr	r1, [pc, #128]	@ (80099c0 <epoch_to_ymdhms+0x88>)
                             uint8_t *hh, uint8_t *mm, uint8_t *ss){
 800993e:	0017      	movs	r7, r2
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	0005      	movs	r5, r0
    uint32_t days = epoch / 86400u;
 8009944:	f7f6 fc10 	bl	8000168 <__udivsi3>
    uint32_t sod  = epoch % 86400u;
 8009948:	491d      	ldr	r1, [pc, #116]	@ (80099c0 <epoch_to_ymdhms+0x88>)
    uint32_t days = epoch / 86400u;
 800994a:	0004      	movs	r4, r0
    uint32_t sod  = epoch % 86400u;
 800994c:	0028      	movs	r0, r5
 800994e:	f7f6 fc91 	bl	8000274 <__aeabi_uidivmod>
 8009952:	000d      	movs	r5, r1
    *hh = (uint8_t)(sod/3600u); sod%=3600u;
 8009954:	21e1      	movs	r1, #225	@ 0xe1
 8009956:	0028      	movs	r0, r5
 8009958:	0109      	lsls	r1, r1, #4
 800995a:	f7f6 fc05 	bl	8000168 <__udivsi3>
 800995e:	21e1      	movs	r1, #225	@ 0xe1
 8009960:	9b08      	ldr	r3, [sp, #32]
 8009962:	0109      	lsls	r1, r1, #4
 8009964:	7018      	strb	r0, [r3, #0]
 8009966:	0028      	movs	r0, r5
 8009968:	f7f6 fc84 	bl	8000274 <__aeabi_uidivmod>
 800996c:	000d      	movs	r5, r1
    *mm = (uint8_t)(sod/60u);
 800996e:	213c      	movs	r1, #60	@ 0x3c
 8009970:	0028      	movs	r0, r5
 8009972:	f7f6 fbf9 	bl	8000168 <__udivsi3>
 8009976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *ss = (uint8_t)(sod%60u);
 8009978:	213c      	movs	r1, #60	@ 0x3c
    *mm = (uint8_t)(sod/60u);
 800997a:	7018      	strb	r0, [r3, #0]
    *ss = (uint8_t)(sod%60u);
 800997c:	0028      	movs	r0, r5
 800997e:	f7f6 fc79 	bl	8000274 <__aeabi_uidivmod>

    uint16_t y = 0;
 8009982:	2500      	movs	r5, #0
    *ss = (uint8_t)(sod%60u);
 8009984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009986:	7019      	strb	r1, [r3, #0]
    while(1){
        uint32_t ydays = 365 + (is_leap_u16(y)?1:0);
 8009988:	0028      	movs	r0, r5
 800998a:	f7ff ff75 	bl	8009878 <is_leap_u16>
 800998e:	306e      	adds	r0, #110	@ 0x6e
 8009990:	30ff      	adds	r0, #255	@ 0xff
        if(days >= ydays){ days -= ydays; ++y; }
 8009992:	42a0      	cmp	r0, r4
 8009994:	d803      	bhi.n	800999e <epoch_to_ymdhms+0x66>
 8009996:	3501      	adds	r5, #1
 8009998:	1a24      	subs	r4, r4, r0
 800999a:	b2ad      	uxth	r5, r5
    while(1){
 800999c:	e7f4      	b.n	8009988 <epoch_to_ymdhms+0x50>
        else break;
    }
    *y2000 = y;
 800999e:	8035      	strh	r5, [r6, #0]

    uint8_t mon=1;
 80099a0:	2601      	movs	r6, #1
    while(1){
        uint8_t mdays = dim_u16(mon, *y2000);
 80099a2:	0029      	movs	r1, r5
 80099a4:	0030      	movs	r0, r6
 80099a6:	f7ff ff7f 	bl	80098a8 <dim_u16>
        if(days >= mdays){ days -= mdays; ++mon; }
 80099aa:	42a0      	cmp	r0, r4
 80099ac:	d803      	bhi.n	80099b6 <epoch_to_ymdhms+0x7e>
 80099ae:	3601      	adds	r6, #1
 80099b0:	1a24      	subs	r4, r4, r0
 80099b2:	b2f6      	uxtb	r6, r6
    while(1){
 80099b4:	e7f5      	b.n	80099a2 <epoch_to_ymdhms+0x6a>
        else break;
    }
    *m = mon;
    *d = (uint8_t)(days+1);
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	3401      	adds	r4, #1
    *m = mon;
 80099ba:	703e      	strb	r6, [r7, #0]
    *d = (uint8_t)(days+1);
 80099bc:	701c      	strb	r4, [r3, #0]
}
 80099be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80099c0:	00015180 	.word	0x00015180

080099c4 <Save_DeviceSettings>:


void Save_DeviceSettings(const DeviceSettings *cfg) {
 80099c4:	b530      	push	{r4, r5, lr}
 80099c6:	b087      	sub	sp, #28
 80099c8:	0005      	movs	r5, r0
    HAL_FLASH_Unlock();
 80099ca:	f005 fccd 	bl	800f368 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase = {
 80099ce:	2300      	movs	r3, #0
 80099d0:	9303      	str	r3, [sp, #12]
 80099d2:	3302      	adds	r3, #2
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	337d      	adds	r3, #125	@ 0x7d
 80099d8:	9304      	str	r3, [sp, #16]
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .Page = (SETTINGS_FLASH_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE,
        .NbPages = 1
    };
    uint32_t err;
    HAL_FLASHEx_Erase(&erase, &err);
 80099da:	a901      	add	r1, sp, #4
    FLASH_EraseInitTypeDef erase = {
 80099dc:	3b7e      	subs	r3, #126	@ 0x7e
    HAL_FLASHEx_Erase(&erase, &err);
 80099de:	a802      	add	r0, sp, #8
    FLASH_EraseInitTypeDef erase = {
 80099e0:	9305      	str	r3, [sp, #20]
    HAL_FLASHEx_Erase(&erase, &err);
 80099e2:	f005 fd57 	bl	800f494 <HAL_FLASHEx_Erase>
 80099e6:	4c09      	ldr	r4, [pc, #36]	@ (8009a0c <Save_DeviceSettings+0x48>)

    const uint64_t *pdata = (const uint64_t*)cfg;
    for (uint32_t i = 0; i < sizeof(DeviceSettings)/8; i++) {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80099e8:	4b09      	ldr	r3, [pc, #36]	@ (8009a10 <Save_DeviceSettings+0x4c>)
 80099ea:	0021      	movs	r1, r4
 80099ec:	18e3      	adds	r3, r4, r3
 80099ee:	18eb      	adds	r3, r5, r3
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	2001      	movs	r0, #1
 80099f6:	f005 fd09 	bl	800f40c <HAL_FLASH_Program>
    for (uint32_t i = 0; i < sizeof(DeviceSettings)/8; i++) {
 80099fa:	4b06      	ldr	r3, [pc, #24]	@ (8009a14 <Save_DeviceSettings+0x50>)
 80099fc:	3408      	adds	r4, #8
 80099fe:	429c      	cmp	r4, r3
 8009a00:	d1f2      	bne.n	80099e8 <Save_DeviceSettings+0x24>
            SETTINGS_FLASH_ADDR + i*8, pdata[i]);
    }
    HAL_FLASH_Lock();
 8009a02:	f005 fcc3 	bl	800f38c <HAL_FLASH_Lock>
}
 8009a06:	b007      	add	sp, #28
 8009a08:	bd30      	pop	{r4, r5, pc}
 8009a0a:	46c0      	nop			@ (mov r8, r8)
 8009a0c:	0803f800 	.word	0x0803f800
 8009a10:	f7fc0800 	.word	0xf7fc0800
 8009a14:	0803f8a8 	.word	0x0803f8a8

08009a18 <Save_CurrentSettings>:
    Save_CurrentSettings();
//    printf("[Debug][Load] Loaded start_target_seconds: %lu\r\n", current_settings.start_target_seconds);
}

void Save_CurrentSettings(void)
{
 8009a18:	b510      	push	{r4, lr}

    Save_DeviceSettings(&current_settings);
 8009a1a:	4803      	ldr	r0, [pc, #12]	@ (8009a28 <Save_CurrentSettings+0x10>)
 8009a1c:	f7ff ffd2 	bl	80099c4 <Save_DeviceSettings>
    printf("[Save] DeviceSettings saved to Flash.\n");
 8009a20:	4802      	ldr	r0, [pc, #8]	@ (8009a2c <Save_CurrentSettings+0x14>)
 8009a22:	f010 fc0b 	bl	801a23c <puts>

}
 8009a26:	bd10      	pop	{r4, pc}
 8009a28:	20002bac 	.word	0x20002bac
 8009a2c:	0801e90b 	.word	0x0801e90b

08009a30 <Load_DefaultSettings>:
void Load_DefaultSettings(void) {
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memcpy(&current_settings, (const void*)SETTINGS_FLASH_ADDR, sizeof(DeviceSettings));
 8009a32:	4d68      	ldr	r5, [pc, #416]	@ (8009bd4 <Load_DefaultSettings+0x1a4>)
 8009a34:	22af      	movs	r2, #175	@ 0xaf
 8009a36:	0028      	movs	r0, r5
 8009a38:	4967      	ldr	r1, [pc, #412]	@ (8009bd8 <Load_DefaultSettings+0x1a8>)
 8009a3a:	f010 fe25 	bl	801a688 <memcpy>
    strncpy(current_settings.device_code, "LogNc 1", sizeof(current_settings.device_code) - 1);
 8009a3e:	220f      	movs	r2, #15
 8009a40:	0028      	movs	r0, r5
 8009a42:	4966      	ldr	r1, [pc, #408]	@ (8009bdc <Load_DefaultSettings+0x1ac>)
 8009a44:	f010 fd79 	bl	801a53a <strncpy>
    strncpy(current_settings.firmware_ver, "12.13", sizeof(current_settings.firmware_ver) - 1);
 8009a48:	2207      	movs	r2, #7
 8009a4a:	4965      	ldr	r1, [pc, #404]	@ (8009be0 <Load_DefaultSettings+0x1b0>)
 8009a4c:	4865      	ldr	r0, [pc, #404]	@ (8009be4 <Load_DefaultSettings+0x1b4>)
 8009a4e:	f010 fd74 	bl	801a53a <strncpy>
    strncpy(current_settings.model, "Test ver", sizeof(current_settings.model) - 1);
 8009a52:	4e65      	ldr	r6, [pc, #404]	@ (8009be8 <Load_DefaultSettings+0x1b8>)
 8009a54:	220f      	movs	r2, #15
 8009a56:	0030      	movs	r0, r6
 8009a58:	4964      	ldr	r1, [pc, #400]	@ (8009bec <Load_DefaultSettings+0x1bc>)
 8009a5a:	f010 fd6e 	bl	801a53a <strncpy>
    strncpy(current_settings.serial, "RT01023", sizeof(current_settings.serial) - 1);
 8009a5e:	220f      	movs	r2, #15
 8009a60:	4963      	ldr	r1, [pc, #396]	@ (8009bf0 <Load_DefaultSettings+0x1c0>)
 8009a62:	4864      	ldr	r0, [pc, #400]	@ (8009bf4 <Load_DefaultSettings+0x1c4>)
 8009a64:	f010 fd69 	bl	801a53a <strncpy>
    strncpy(current_settings.trip_desc, "Temperature and Radioactivity recording", sizeof(current_settings.trip_desc) - 1);
 8009a68:	2227      	movs	r2, #39	@ 0x27
 8009a6a:	4963      	ldr	r1, [pc, #396]	@ (8009bf8 <Load_DefaultSettings+0x1c8>)
 8009a6c:	4863      	ldr	r0, [pc, #396]	@ (8009bfc <Load_DefaultSettings+0x1cc>)
 8009a6e:	f010 fe0b 	bl	801a688 <memcpy>
    current_settings.trip_code = 0x01;
 8009a72:	002b      	movs	r3, r5
 8009a74:	2400      	movs	r4, #0
 8009a76:	2701      	movs	r7, #1
 8009a78:	3339      	adds	r3, #57	@ 0x39
 8009a7a:	701f      	strb	r7, [r3, #0]
 8009a7c:	705c      	strb	r4, [r3, #1]
    current_settings.start_delay = 20;
 8009a7e:	002b      	movs	r3, r5
 8009a80:	2214      	movs	r2, #20
 8009a82:	3364      	adds	r3, #100	@ 0x64
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	002b      	movs	r3, r5
 8009a88:	3365      	adds	r3, #101	@ 0x65
 8009a8a:	701c      	strb	r4, [r3, #0]
 8009a8c:	002b      	movs	r3, r5
 8009a8e:	3366      	adds	r3, #102	@ 0x66
 8009a90:	701c      	strb	r4, [r3, #0]
 8009a92:	002b      	movs	r3, r5
 8009a94:	3367      	adds	r3, #103	@ 0x67
 8009a96:	701c      	strb	r4, [r3, #0]
    current_settings.temp_interval = 600;
 8009a98:	002b      	movs	r3, r5
 8009a9a:	2158      	movs	r1, #88	@ 0x58
 8009a9c:	3375      	adds	r3, #117	@ 0x75
 8009a9e:	3a12      	subs	r2, #18
 8009aa0:	7019      	strb	r1, [r3, #0]
 8009aa2:	705a      	strb	r2, [r3, #1]
 8009aa4:	709c      	strb	r4, [r3, #2]
 8009aa6:	70dc      	strb	r4, [r3, #3]
    current_settings.rad_interval = 600;
 8009aa8:	002b      	movs	r3, r5
 8009aaa:	3371      	adds	r3, #113	@ 0x71
 8009aac:	7019      	strb	r1, [r3, #0]
 8009aae:	705a      	strb	r2, [r3, #1]
 8009ab0:	709c      	strb	r4, [r3, #2]
 8009ab2:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_delay = 0;
 8009ab4:	002b      	movs	r3, r5
 8009ab6:	3386      	adds	r3, #134	@ 0x86
 8009ab8:	701c      	strb	r4, [r3, #0]
 8009aba:	002b      	movs	r3, r5
 8009abc:	3387      	adds	r3, #135	@ 0x87
 8009abe:	701c      	strb	r4, [r3, #0]
 8009ac0:	002b      	movs	r3, r5
 8009ac2:	3388      	adds	r3, #136	@ 0x88
 8009ac4:	701c      	strb	r4, [r3, #0]
 8009ac6:	002b      	movs	r3, r5
 8009ac8:	3389      	adds	r3, #137	@ 0x89
 8009aca:	701c      	strb	r4, [r3, #0]
    current_settings.display_temp_unit = 0;
 8009acc:	002b      	movs	r3, r5
 8009ace:	338a      	adds	r3, #138	@ 0x8a
 8009ad0:	701c      	strb	r4, [r3, #0]
    current_settings.display_dose_unit = 0;
 8009ad2:	002b      	movs	r3, r5
    device_config.display_temp = current_settings.display_temp_unit;
 8009ad4:	484a      	ldr	r0, [pc, #296]	@ (8009c00 <Load_DefaultSettings+0x1d0>)
    current_settings.sensor_type = 1; // 예: 1이면 T&R(interval)로 해석 (CSV는 고정문자열로 처리됨)
 8009ad6:	3620      	adds	r6, #32
    current_settings.display_dose_unit = 0;
 8009ad8:	338b      	adds	r3, #139	@ 0x8b
    current_settings.sensor_type = 1; // 예: 1이면 T&R(interval)로 해석 (CSV는 고정문자열로 처리됨)
 8009ada:	7037      	strb	r7, [r6, #0]
    device_config.display_temp = current_settings.display_temp_unit;
 8009adc:	83c4      	strh	r4, [r0, #30]
    current_settings.display_dose_unit = 0;
 8009ade:	701c      	strb	r4, [r3, #0]
    Save_IntervalInfo_To_Backup(&device_config);
 8009ae0:	f7fc fbbe 	bl	8006260 <Save_IntervalInfo_To_Backup>
    current_settings.alarm_rh1 = 2000; // devide 100 is u/Sv
 8009ae4:	002b      	movs	r3, r5
 8009ae6:	2230      	movs	r2, #48	@ 0x30
 8009ae8:	3391      	adds	r3, #145	@ 0x91
 8009aea:	4252      	negs	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	3237      	adds	r2, #55	@ 0x37
 8009af0:	705a      	strb	r2, [r3, #1]
 8009af2:	709c      	strb	r4, [r3, #2]
 8009af4:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_rh2 = 5000;
 8009af6:	002b      	movs	r3, r5
 8009af8:	3a7f      	subs	r2, #127	@ 0x7f
 8009afa:	3399      	adds	r3, #153	@ 0x99
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	328b      	adds	r2, #139	@ 0x8b
 8009b00:	705a      	strb	r2, [r3, #1]
 8009b02:	709c      	strb	r4, [r3, #2]
 8009b04:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_th1 = 100; // device 10 is 'C
 8009b06:	002b      	movs	r3, r5
 8009b08:	3251      	adds	r2, #81	@ 0x51
 8009b0a:	3395      	adds	r3, #149	@ 0x95
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	705c      	strb	r4, [r3, #1]
    current_settings.alarm_th2 =500;
 8009b10:	002b      	movs	r3, r5
 8009b12:	3a70      	subs	r2, #112	@ 0x70
 8009b14:	339d      	adds	r3, #157	@ 0x9d
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	705f      	strb	r7, [r3, #1]
    current_settings.alarm_tl1 = -200;
 8009b1a:	002b      	movs	r3, r5
 8009b1c:	3244      	adds	r2, #68	@ 0x44
 8009b1e:	3397      	adds	r3, #151	@ 0x97
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	3a39      	subs	r2, #57	@ 0x39
 8009b24:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_tl2 = -300;
 8009b26:	002b      	movs	r3, r5
 8009b28:	3a2b      	subs	r2, #43	@ 0x2b
 8009b2a:	339f      	adds	r3, #159	@ 0x9f
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	322a      	adds	r2, #42	@ 0x2a
 8009b30:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_delay_rh1 = 0;
 8009b32:	002b      	movs	r3, r5
 8009b34:	337a      	adds	r3, #122	@ 0x7a
 8009b36:	701c      	strb	r4, [r3, #0]
 8009b38:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_rh2 = 0;
 8009b3a:	002b      	movs	r3, r5
 8009b3c:	337c      	adds	r3, #124	@ 0x7c
 8009b3e:	701c      	strb	r4, [r3, #0]
 8009b40:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_th1 = 0;
 8009b42:	002b      	movs	r3, r5
 8009b44:	337e      	adds	r3, #126	@ 0x7e
 8009b46:	701c      	strb	r4, [r3, #0]
 8009b48:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_th2 = 0;
 8009b4a:	002b      	movs	r3, r5
 8009b4c:	3380      	adds	r3, #128	@ 0x80
 8009b4e:	701c      	strb	r4, [r3, #0]
 8009b50:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_tl1 = 0;
 8009b52:	002b      	movs	r3, r5
 8009b54:	3382      	adds	r3, #130	@ 0x82
 8009b56:	701c      	strb	r4, [r3, #0]
 8009b58:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_tl2 = 0;
 8009b5a:	002b      	movs	r3, r5
 8009b5c:	3384      	adds	r3, #132	@ 0x84
 8009b5e:	701c      	strb	r4, [r3, #0]
 8009b60:	705c      	strb	r4, [r3, #1]
	current_settings. mode_status = 0x00;
 8009b62:	002b      	movs	r3, r5
 8009b64:	338c      	adds	r3, #140	@ 0x8c
 8009b66:	701c      	strb	r4, [r3, #0]
	current_settings.report_format = 0x01;
 8009b68:	002b      	movs	r3, r5
 8009b6a:	3379      	adds	r3, #121	@ 0x79
 8009b6c:	701f      	strb	r7, [r3, #0]
    current_settings.start_time_info = 0x00;
 8009b6e:	002b      	movs	r3, r5
 8009b70:	336c      	adds	r3, #108	@ 0x6c
 8009b72:	701c      	strb	r4, [r3, #0]
 8009b74:	002b      	movs	r3, r5
 8009b76:	336d      	adds	r3, #109	@ 0x6d
 8009b78:	701c      	strb	r4, [r3, #0]
 8009b7a:	002b      	movs	r3, r5
 8009b7c:	336e      	adds	r3, #110	@ 0x6e
 8009b7e:	701c      	strb	r4, [r3, #0]
 8009b80:	002b      	movs	r3, r5
 8009b82:	336f      	adds	r3, #111	@ 0x6f
 8009b84:	701c      	strb	r4, [r3, #0]
    current_settings.start_reservation_time = 0;
 8009b86:	002b      	movs	r3, r5
 8009b88:	33a5      	adds	r3, #165	@ 0xa5
 8009b8a:	701c      	strb	r4, [r3, #0]
 8009b8c:	705c      	strb	r4, [r3, #1]
 8009b8e:	709c      	strb	r4, [r3, #2]
 8009b90:	70dc      	strb	r4, [r3, #3]
    current_settings.start_mode = 0x00;
 8009b92:	002b      	movs	r3, r5
 8009b94:	3363      	adds	r3, #99	@ 0x63
 8009b96:	701c      	strb	r4, [r3, #0]
    current_settings.start_target_seconds = 0x00;  // start_delay 적용된 RTC 기준 초 시각
 8009b98:	002b      	movs	r3, r5
 8009b9a:	33a1      	adds	r3, #161	@ 0xa1
 8009b9c:	701c      	strb	r4, [r3, #0]
 8009b9e:	705c      	strb	r4, [r3, #1]
 8009ba0:	709c      	strb	r4, [r3, #2]
 8009ba2:	70dc      	strb	r4, [r3, #3]
    current_settings.interval_duration_day= 0x00;
 8009ba4:	002b      	movs	r3, r5
 8009ba6:	33a9      	adds	r3, #169	@ 0xa9
 8009ba8:	701c      	strb	r4, [r3, #0]
 8009baa:	705c      	strb	r4, [r3, #1]
    current_settings.end_target_seconds= 0x00;
 8009bac:	002b      	movs	r3, r5
 8009bae:	33ab      	adds	r3, #171	@ 0xab
 8009bb0:	701c      	strb	r4, [r3, #0]
 8009bb2:	705c      	strb	r4, [r3, #1]
 8009bb4:	709c      	strb	r4, [r3, #2]
 8009bb6:	70dc      	strb	r4, [r3, #3]
    current_settings.start_time_info_for_alarm = 0x00;
 8009bb8:	002b      	movs	r3, r5
 8009bba:	3368      	adds	r3, #104	@ 0x68
 8009bbc:	701c      	strb	r4, [r3, #0]
 8009bbe:	002b      	movs	r3, r5
 8009bc0:	3369      	adds	r3, #105	@ 0x69
 8009bc2:	701c      	strb	r4, [r3, #0]
 8009bc4:	002b      	movs	r3, r5
 8009bc6:	356b      	adds	r5, #107	@ 0x6b
 8009bc8:	336a      	adds	r3, #106	@ 0x6a
 8009bca:	702c      	strb	r4, [r5, #0]
 8009bcc:	701c      	strb	r4, [r3, #0]
    Save_CurrentSettings();
 8009bce:	f7ff ff23 	bl	8009a18 <Save_CurrentSettings>
}
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	20002bac 	.word	0x20002bac
 8009bd8:	0803f800 	.word	0x0803f800
 8009bdc:	0801e931 	.word	0x0801e931
 8009be0:	0801e939 	.word	0x0801e939
 8009be4:	20002bdd 	.word	0x20002bdd
 8009be8:	20002bbc 	.word	0x20002bbc
 8009bec:	0801e93f 	.word	0x0801e93f
 8009bf0:	0801e948 	.word	0x0801e948
 8009bf4:	20002bcc 	.word	0x20002bcc
 8009bf8:	0801e950 	.word	0x0801e950
 8009bfc:	20002be7 	.word	0x20002be7
 8009c00:	20000b50 	.word	0x20000b50

08009c04 <Init_DeviceSettings>:




void Init_DeviceSettings(void) {
 8009c04:	b510      	push	{r4, lr}
	memcpy(&current_settings, (const void*)SETTINGS_FLASH_ADDR, sizeof(DeviceSettings));
 8009c06:	4c09      	ldr	r4, [pc, #36]	@ (8009c2c <Init_DeviceSettings+0x28>)
 8009c08:	22af      	movs	r2, #175	@ 0xaf
 8009c0a:	0020      	movs	r0, r4
 8009c0c:	4908      	ldr	r1, [pc, #32]	@ (8009c30 <Init_DeviceSettings+0x2c>)
 8009c0e:	f010 fd3b 	bl	801a688 <memcpy>

    uint8_t *p = (uint8_t*)&current_settings;
    int empty = 1;
    for (size_t i = 0; i < sizeof(DeviceSettings); i++) {
 8009c12:	2300      	movs	r3, #0
        if (p[i] != 0xFF) {
 8009c14:	5ce2      	ldrb	r2, [r4, r3]
 8009c16:	2aff      	cmp	r2, #255	@ 0xff
 8009c18:	d107      	bne.n	8009c2a <Init_DeviceSettings+0x26>
    for (size_t i = 0; i < sizeof(DeviceSettings); i++) {
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	2baf      	cmp	r3, #175	@ 0xaf
 8009c1e:	d1f9      	bne.n	8009c14 <Init_DeviceSettings+0x10>
            break;
        }
    }
//
    if (empty) {
    	printf("--------------Default Setting call----------------");
 8009c20:	4804      	ldr	r0, [pc, #16]	@ (8009c34 <Init_DeviceSettings+0x30>)
 8009c22:	f010 fa9b 	bl	801a15c <iprintf>
    Load_DefaultSettings();
 8009c26:	f7ff ff03 	bl	8009a30 <Load_DefaultSettings>
    }

}
 8009c2a:	bd10      	pop	{r4, pc}
 8009c2c:	20002bac 	.word	0x20002bac
 8009c30:	0803f800 	.word	0x0803f800
 8009c34:	0801e978 	.word	0x0801e978

08009c38 <AlarmDelay_InitStart_Flash>:
//
//    printf("[AlarmDelay] Start 기준초 저장: %02u:%02u:%02u (%lu)\r\n",
//           t.Hours, t.Minutes, t.Seconds, now_sec);
//}
void AlarmDelay_InitStart_Flash(void)
{
 8009c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009c3a:	4d27      	ldr	r5, [pc, #156]	@ (8009cd8 <AlarmDelay_InitStart_Flash+0xa0>)
{
 8009c3c:	b089      	sub	sp, #36	@ 0x24
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009c3e:	ae03      	add	r6, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009c40:	ac02      	add	r4, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009c42:	0031      	movs	r1, r6
 8009c44:	2200      	movs	r2, #0
 8009c46:	0028      	movs	r0, r5
 8009c48:	f008 f996 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009c4c:	0021      	movs	r1, r4
 8009c4e:	2200      	movs	r2, #0
 8009c50:	0028      	movs	r0, r5
 8009c52:	f008 f9c3 	bl	8011fdc <HAL_RTC_GetDate>

    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8009c56:	78a2      	ldrb	r2, [r4, #2]
 8009c58:	7861      	ldrb	r1, [r4, #1]
 8009c5a:	78e0      	ldrb	r0, [r4, #3]
 8009c5c:	78b4      	ldrb	r4, [r6, #2]
 8009c5e:	7833      	ldrb	r3, [r6, #0]
 8009c60:	9401      	str	r4, [sp, #4]
 8009c62:	7874      	ldrb	r4, [r6, #1]
 8009c64:	9400      	str	r4, [sp, #0]
 8009c66:	f7ff fe2f 	bl	80098c8 <ymd_to_epoch>
                                      t.Hours, t.Minutes, t.Seconds);

    Set_EndTarget_FromNow_Days(current_settings.interval_duration_day);
 8009c6a:	4c1c      	ldr	r4, [pc, #112]	@ (8009cdc <AlarmDelay_InitStart_Flash+0xa4>)
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8009c6c:	0005      	movs	r5, r0
    Set_EndTarget_FromNow_Days(current_settings.interval_duration_day);
 8009c6e:	0022      	movs	r2, r4
 8009c70:	4b1b      	ldr	r3, [pc, #108]	@ (8009ce0 <AlarmDelay_InitStart_Flash+0xa8>)
 8009c72:	32aa      	adds	r2, #170	@ 0xaa
 8009c74:	7810      	ldrb	r0, [r2, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	0200      	lsls	r0, r0, #8
 8009c7a:	4318      	orrs	r0, r3
 8009c7c:	f7fb fe80 	bl	8005980 <Set_EndTarget_FromNow_Days>
    current_settings.start_time_info = now_epoch;
 8009c80:	21ff      	movs	r1, #255	@ 0xff
 8009c82:	0028      	movs	r0, r5
 8009c84:	0023      	movs	r3, r4
 8009c86:	4008      	ands	r0, r1
 8009c88:	336c      	adds	r3, #108	@ 0x6c
 8009c8a:	7018      	strb	r0, [r3, #0]
 8009c8c:	0023      	movs	r3, r4
 8009c8e:	0a2a      	lsrs	r2, r5, #8
 8009c90:	400a      	ands	r2, r1
 8009c92:	336d      	adds	r3, #109	@ 0x6d
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	0c2b      	lsrs	r3, r5, #16
 8009c98:	400b      	ands	r3, r1
 8009c9a:	0021      	movs	r1, r4
 8009c9c:	0027      	movs	r7, r4
 8009c9e:	316e      	adds	r1, #110	@ 0x6e
 8009ca0:	700b      	strb	r3, [r1, #0]
 8009ca2:	376f      	adds	r7, #111	@ 0x6f
 8009ca4:	0e29      	lsrs	r1, r5, #24
 8009ca6:	7039      	strb	r1, [r7, #0]
    current_settings.start_time_info_for_alarm = now_epoch; // ★ 이제 절대초로 저장 (이전에는 SOD 저장)
 8009ca8:	0027      	movs	r7, r4
 8009caa:	3768      	adds	r7, #104	@ 0x68
 8009cac:	7038      	strb	r0, [r7, #0]
 8009cae:	0020      	movs	r0, r4
 8009cb0:	3069      	adds	r0, #105	@ 0x69
 8009cb2:	7002      	strb	r2, [r0, #0]
 8009cb4:	0022      	movs	r2, r4
 8009cb6:	346b      	adds	r4, #107	@ 0x6b
 8009cb8:	326a      	adds	r2, #106	@ 0x6a
 8009cba:	7013      	strb	r3, [r2, #0]
 8009cbc:	7021      	strb	r1, [r4, #0]
    Save_CurrentSettings();
 8009cbe:	f7ff feab 	bl	8009a18 <Save_CurrentSettings>

    printf("[AlarmDelay] Gate start EPOCH=%lu (%02u:%02u:%02u)\r\n",
 8009cc2:	78b1      	ldrb	r1, [r6, #2]
 8009cc4:	7873      	ldrb	r3, [r6, #1]
 8009cc6:	7832      	ldrb	r2, [r6, #0]
 8009cc8:	4806      	ldr	r0, [pc, #24]	@ (8009ce4 <AlarmDelay_InitStart_Flash+0xac>)
 8009cca:	9100      	str	r1, [sp, #0]
 8009ccc:	0029      	movs	r1, r5
 8009cce:	f010 fa45 	bl	801a15c <iprintf>
           (unsigned long)now_epoch, t.Hours, t.Minutes, t.Seconds);
}
 8009cd2:	b009      	add	sp, #36	@ 0x24
 8009cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd6:	46c0      	nop			@ (mov r8, r8)
 8009cd8:	200009f8 	.word	0x200009f8
 8009cdc:	20002bac 	.word	0x20002bac
 8009ce0:	20002c55 	.word	0x20002c55
 8009ce4:	0801e9ab 	.word	0x0801e9ab

08009ce8 <Set_StartTargetTime_FromRTC>:
//    //        elapsed, *g_rh1,*g_rh2,*g_th1,*g_th2,*g_tl1,*g_tl2);
//}

// Delay 타깃을 '절대초'로 저장
void Set_StartTargetTime_FromRTC(void)
{
 8009ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009cea:	4e39      	ldr	r6, [pc, #228]	@ (8009dd0 <Set_StartTargetTime_FromRTC+0xe8>)
{
 8009cec:	b089      	sub	sp, #36	@ 0x24
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009cee:	ac03      	add	r4, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009cf0:	ad02      	add	r5, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009cf2:	0021      	movs	r1, r4
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	0030      	movs	r0, r6
 8009cf8:	f008 f93e 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009cfc:	0029      	movs	r1, r5
 8009cfe:	2200      	movs	r2, #0
 8009d00:	0030      	movs	r0, r6
 8009d02:	f008 f96b 	bl	8011fdc <HAL_RTC_GetDate>

    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8009d06:	78aa      	ldrb	r2, [r5, #2]
 8009d08:	7869      	ldrb	r1, [r5, #1]
 8009d0a:	78e8      	ldrb	r0, [r5, #3]
 8009d0c:	78a5      	ldrb	r5, [r4, #2]
 8009d0e:	7823      	ldrb	r3, [r4, #0]
 8009d10:	9501      	str	r5, [sp, #4]
 8009d12:	7864      	ldrb	r4, [r4, #1]
 8009d14:	9400      	str	r4, [sp, #0]
 8009d16:	f7ff fdd7 	bl	80098c8 <ymd_to_epoch>

//    Load_DefaultSettings();
    // 최대 31일(요구사항), 더 길게 허용하려면 아래 clamp 제거
    uint32_t max_delay = 31u * 86400u;
    if (current_settings.start_delay > max_delay) current_settings.start_delay = max_delay;
 8009d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8009dd4 <Set_StartTargetTime_FromRTC+0xec>)
 8009d1c:	4e2e      	ldr	r6, [pc, #184]	@ (8009dd8 <Set_StartTargetTime_FromRTC+0xf0>)
 8009d1e:	001d      	movs	r5, r3
 8009d20:	3565      	adds	r5, #101	@ 0x65
 8009d22:	001c      	movs	r4, r3
 8009d24:	782a      	ldrb	r2, [r5, #0]
 8009d26:	7831      	ldrb	r1, [r6, #0]
 8009d28:	0212      	lsls	r2, r2, #8
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	0019      	movs	r1, r3
 8009d2e:	3466      	adds	r4, #102	@ 0x66
 8009d30:	7827      	ldrb	r7, [r4, #0]
 8009d32:	3167      	adds	r1, #103	@ 0x67
 8009d34:	043f      	lsls	r7, r7, #16
 8009d36:	4317      	orrs	r7, r2
 8009d38:	780a      	ldrb	r2, [r1, #0]
 8009d3a:	0612      	lsls	r2, r2, #24
 8009d3c:	433a      	orrs	r2, r7
 8009d3e:	4f27      	ldr	r7, [pc, #156]	@ (8009ddc <Set_StartTargetTime_FromRTC+0xf4>)
 8009d40:	42ba      	cmp	r2, r7
 8009d42:	d908      	bls.n	8009d56 <Set_StartTargetTime_FromRTC+0x6e>
 8009d44:	2280      	movs	r2, #128	@ 0x80
 8009d46:	4252      	negs	r2, r2
 8009d48:	7032      	strb	r2, [r6, #0]
 8009d4a:	325e      	adds	r2, #94	@ 0x5e
 8009d4c:	702a      	strb	r2, [r5, #0]
 8009d4e:	324a      	adds	r2, #74	@ 0x4a
 8009d50:	7022      	strb	r2, [r4, #0]
 8009d52:	2200      	movs	r2, #0
 8009d54:	700a      	strb	r2, [r1, #0]

    uint32_t target_epoch = now_epoch + current_settings.start_delay;
 8009d56:	001e      	movs	r6, r3
 8009d58:	001f      	movs	r7, r3
 8009d5a:	001d      	movs	r5, r3
 8009d5c:	3665      	adds	r6, #101	@ 0x65
 8009d5e:	7831      	ldrb	r1, [r6, #0]
 8009d60:	3764      	adds	r7, #100	@ 0x64
 8009d62:	783a      	ldrb	r2, [r7, #0]
 8009d64:	3566      	adds	r5, #102	@ 0x66
 8009d66:	0209      	lsls	r1, r1, #8
 8009d68:	4311      	orrs	r1, r2
 8009d6a:	782a      	ldrb	r2, [r5, #0]
//    current_settings.start_time_info = target_epoch;         // ★ 절대초 저장
    current_settings.start_target_seconds = target_epoch;    // (과거 호환; 의미를 '절대초'로 통일)
 8009d6c:	33a1      	adds	r3, #161	@ 0xa1
    uint32_t target_epoch = now_epoch + current_settings.start_delay;
 8009d6e:	0412      	lsls	r2, r2, #16
 8009d70:	430a      	orrs	r2, r1
 8009d72:	491b      	ldr	r1, [pc, #108]	@ (8009de0 <Set_StartTargetTime_FromRTC+0xf8>)
 8009d74:	780c      	ldrb	r4, [r1, #0]
 8009d76:	0624      	lsls	r4, r4, #24
 8009d78:	4314      	orrs	r4, r2
 8009d7a:	1824      	adds	r4, r4, r0
    current_settings.start_target_seconds = target_epoch;    // (과거 호환; 의미를 '절대초'로 통일)
 8009d7c:	0a22      	lsrs	r2, r4, #8
 8009d7e:	705a      	strb	r2, [r3, #1]
 8009d80:	0c22      	lsrs	r2, r4, #16
 8009d82:	709a      	strb	r2, [r3, #2]
 8009d84:	0e22      	lsrs	r2, r4, #24
 8009d86:	701c      	strb	r4, [r3, #0]
 8009d88:	70da      	strb	r2, [r3, #3]
    Save_CurrentSettings();
 8009d8a:	f7ff fe45 	bl	8009a18 <Save_CurrentSettings>

    // 알람은 정확히 Delay 만큼 뒤로
    RTC_SetAlarmA_SecondsFromNow(current_settings.start_delay -3);
 8009d8e:	7832      	ldrb	r2, [r6, #0]
 8009d90:	783b      	ldrb	r3, [r7, #0]
 8009d92:	0212      	lsls	r2, r2, #8
 8009d94:	431a      	orrs	r2, r3
 8009d96:	782b      	ldrb	r3, [r5, #0]
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	4a10      	ldr	r2, [pc, #64]	@ (8009de0 <Set_StartTargetTime_FromRTC+0xf8>)
 8009d9e:	7810      	ldrb	r0, [r2, #0]
 8009da0:	0600      	lsls	r0, r0, #24
 8009da2:	4318      	orrs	r0, r3
 8009da4:	3803      	subs	r0, #3
 8009da6:	f7fb fcc3 	bl	8005730 <RTC_SetAlarmA_SecondsFromNow>
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009daa:	7832      	ldrb	r2, [r6, #0]
 8009dac:	783b      	ldrb	r3, [r7, #0]
 8009dae:	0212      	lsls	r2, r2, #8
 8009db0:	431a      	orrs	r2, r3
 8009db2:	782b      	ldrb	r3, [r5, #0]
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009db4:	0021      	movs	r1, r4
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	4313      	orrs	r3, r2
 8009dba:	4a09      	ldr	r2, [pc, #36]	@ (8009de0 <Set_StartTargetTime_FromRTC+0xf8>)
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009dbc:	4809      	ldr	r0, [pc, #36]	@ (8009de4 <Set_StartTargetTime_FromRTC+0xfc>)
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	0612      	lsls	r2, r2, #24
 8009dc2:	431a      	orrs	r2, r3
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009dc4:	3a03      	subs	r2, #3
 8009dc6:	f010 f9c9 	bl	801a15c <iprintf>
}
 8009dca:	b009      	add	sp, #36	@ 0x24
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	200009f8 	.word	0x200009f8
 8009dd4:	20002bac 	.word	0x20002bac
 8009dd8:	20002c10 	.word	0x20002c10
 8009ddc:	0028de80 	.word	0x0028de80
 8009de0:	20002c13 	.word	0x20002c13
 8009de4:	0801e9e0 	.word	0x0801e9e0

08009de8 <Set_ModeStatus>:
    }
}


void Set_ModeStatus(uint8_t mode_status)
{
 8009de8:	b510      	push	{r4, lr}
    current_settings.mode_status = mode_status;
 8009dea:	4b04      	ldr	r3, [pc, #16]	@ (8009dfc <Set_ModeStatus+0x14>)
{
 8009dec:	0001      	movs	r1, r0
    current_settings.mode_status = mode_status;
 8009dee:	7018      	strb	r0, [r3, #0]
    printf("[MODE] Set mode_status = %u\r\n", mode_status);
 8009df0:	4803      	ldr	r0, [pc, #12]	@ (8009e00 <Set_ModeStatus+0x18>)
 8009df2:	f010 f9b3 	bl	801a15c <iprintf>
    Save_CurrentSettings();                 // 플래시에 저장
 8009df6:	f7ff fe0f 	bl	8009a18 <Save_CurrentSettings>
}
 8009dfa:	bd10      	pop	{r4, pc}
 8009dfc:	20002c38 	.word	0x20002c38
 8009e00:	0801ea15 	.word	0x0801ea15

08009e04 <Get_And_Print_Seconds_Left_ToStart>:
{
 8009e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009e06:	4b45      	ldr	r3, [pc, #276]	@ (8009f1c <Get_And_Print_Seconds_Left_ToStart+0x118>)
{
 8009e08:	b08b      	sub	sp, #44	@ 0x2c
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009e0a:	ac05      	add	r4, sp, #20
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009e0c:	ad04      	add	r5, sp, #16
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009e0e:	0021      	movs	r1, r4
 8009e10:	0018      	movs	r0, r3
 8009e12:	2200      	movs	r2, #0
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	f008 f8af 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009e1a:	0029      	movs	r1, r5
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	9802      	ldr	r0, [sp, #8]
 8009e20:	f008 f8dc 	bl	8011fdc <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8009e24:	78aa      	ldrb	r2, [r5, #2]
 8009e26:	7869      	ldrb	r1, [r5, #1]
 8009e28:	78e8      	ldrb	r0, [r5, #3]
 8009e2a:	78a5      	ldrb	r5, [r4, #2]
 8009e2c:	7823      	ldrb	r3, [r4, #0]
 8009e2e:	9501      	str	r5, [sp, #4]
 8009e30:	7864      	ldrb	r4, [r4, #1]
 8009e32:	9400      	str	r4, [sp, #0]
 8009e34:	f7ff fd48 	bl	80098c8 <ymd_to_epoch>
    uint32_t target_epoch = current_settings.start_target_seconds;
 8009e38:	4b39      	ldr	r3, [pc, #228]	@ (8009f20 <Get_And_Print_Seconds_Left_ToStart+0x11c>)
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8009e3a:	9003      	str	r0, [sp, #12]
    uint32_t target_epoch = current_settings.start_target_seconds;
 8009e3c:	0019      	movs	r1, r3
 8009e3e:	4d39      	ldr	r5, [pc, #228]	@ (8009f24 <Get_And_Print_Seconds_Left_ToStart+0x120>)
 8009e40:	31a2      	adds	r1, #162	@ 0xa2
 8009e42:	7809      	ldrb	r1, [r1, #0]
 8009e44:	782a      	ldrb	r2, [r5, #0]
 8009e46:	0209      	lsls	r1, r1, #8
 8009e48:	4311      	orrs	r1, r2
 8009e4a:	001a      	movs	r2, r3
 8009e4c:	32a3      	adds	r2, #163	@ 0xa3
 8009e4e:	7812      	ldrb	r2, [r2, #0]
 8009e50:	33a4      	adds	r3, #164	@ 0xa4
 8009e52:	781c      	ldrb	r4, [r3, #0]
 8009e54:	0412      	lsls	r2, r2, #16
 8009e56:	430a      	orrs	r2, r1
 8009e58:	0624      	lsls	r4, r4, #24
 8009e5a:	4314      	orrs	r4, r2
 8009e5c:	1e27      	subs	r7, r4, #0
    if (target_epoch == 0) {
 8009e5e:	4e32      	ldr	r6, [pc, #200]	@ (8009f28 <Get_And_Print_Seconds_Left_ToStart+0x124>)
 8009e60:	d116      	bne.n	8009e90 <Get_And_Print_Seconds_Left_ToStart+0x8c>
        uint32_t bkp = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8009e62:	2107      	movs	r1, #7
 8009e64:	9802      	ldr	r0, [sp, #8]
 8009e66:	f008 f94d 	bl	8012104 <HAL_RTCEx_BKUPRead>
        if (bkp != 0xFFFFFFFFu && bkp >= 86400u) {
 8009e6a:	4b30      	ldr	r3, [pc, #192]	@ (8009f2c <Get_And_Print_Seconds_Left_ToStart+0x128>)
        uint32_t bkp = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8009e6c:	0004      	movs	r4, r0
        if (bkp != 0xFFFFFFFFu && bkp >= 86400u) {
 8009e6e:	18c2      	adds	r2, r0, r3
 8009e70:	4b2f      	ldr	r3, [pc, #188]	@ (8009f30 <Get_And_Print_Seconds_Left_ToStart+0x12c>)
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d811      	bhi.n	8009e9a <Get_And_Print_Seconds_Left_ToStart+0x96>
            current_settings.start_target_seconds = target_epoch;
 8009e76:	0a03      	lsrs	r3, r0, #8
 8009e78:	706b      	strb	r3, [r5, #1]
 8009e7a:	0c03      	lsrs	r3, r0, #16
 8009e7c:	70ab      	strb	r3, [r5, #2]
 8009e7e:	0e03      	lsrs	r3, r0, #24
 8009e80:	7028      	strb	r0, [r5, #0]
 8009e82:	70eb      	strb	r3, [r5, #3]
            Save_CurrentSettings();
 8009e84:	f7ff fdc8 	bl	8009a18 <Save_CurrentSettings>
            printf("[Delay] recovered target from BKP: %lu\r\n", (unsigned long)target_epoch);
 8009e88:	0021      	movs	r1, r4
 8009e8a:	482a      	ldr	r0, [pc, #168]	@ (8009f34 <Get_And_Print_Seconds_Left_ToStart+0x130>)
 8009e8c:	f010 f966 	bl	801a15c <iprintf>
    if (target_epoch <= now_epoch) start_remaining = 0;
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	429c      	cmp	r4, r3
 8009e94:	d91b      	bls.n	8009ece <Get_And_Print_Seconds_Left_ToStart+0xca>
    else                           start_remaining = target_epoch - now_epoch;
 8009e96:	1ae1      	subs	r1, r4, r3
 8009e98:	e01a      	b.n	8009ed0 <Get_And_Print_Seconds_Left_ToStart+0xcc>
            start_remaining = 0;
 8009e9a:	6037      	str	r7, [r6, #0]
            Clear_WakeupTime_Backup();
 8009e9c:	f7fc f848 	bl	8005f30 <Clear_WakeupTime_Backup>
            AlarmDelay_InitStart_Flash();
 8009ea0:	f7ff feca 	bl	8009c38 <AlarmDelay_InitStart_Flash>
            Set_ModeStatus(mode_internal_backup_start);
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	f7ff ff9f 	bl	8009de8 <Set_ModeStatus>
            Switch_Backup_reg(MODE_Start);
 8009eaa:	2003      	movs	r0, #3
 8009eac:	f7fc f858 	bl	8005f60 <Switch_Backup_reg>
            Interval_LCD_Count = 1;
 8009eb0:	2201      	movs	r2, #1
            First_Measure = 0;
 8009eb2:	4b21      	ldr	r3, [pc, #132]	@ (8009f38 <Get_And_Print_Seconds_Left_ToStart+0x134>)
            printf("[Delay] no valid target (epoch empty, BKP invalid). Skip auto-correction.\r\n");
 8009eb4:	4821      	ldr	r0, [pc, #132]	@ (8009f3c <Get_And_Print_Seconds_Left_ToStart+0x138>)
            First_Measure = 0;
 8009eb6:	701f      	strb	r7, [r3, #0]
            Tick_Save = 0;
 8009eb8:	4b21      	ldr	r3, [pc, #132]	@ (8009f40 <Get_And_Print_Seconds_Left_ToStart+0x13c>)
 8009eba:	601f      	str	r7, [r3, #0]
            Interval_LCD_Count = 1;
 8009ebc:	4b21      	ldr	r3, [pc, #132]	@ (8009f44 <Get_And_Print_Seconds_Left_ToStart+0x140>)
 8009ebe:	601a      	str	r2, [r3, #0]
            RTC_During_Wakeup = 0;
 8009ec0:	4b21      	ldr	r3, [pc, #132]	@ (8009f48 <Get_And_Print_Seconds_Left_ToStart+0x144>)
 8009ec2:	701f      	strb	r7, [r3, #0]
            printf("[Delay] no valid target (epoch empty, BKP invalid). Skip auto-correction.\r\n");
 8009ec4:	f010 f9ba 	bl	801a23c <puts>
            printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 8009ec8:	4820      	ldr	r0, [pc, #128]	@ (8009f4c <Get_And_Print_Seconds_Left_ToStart+0x148>)
 8009eca:	f010 f9b7 	bl	801a23c <puts>
    if (target_epoch <= now_epoch) start_remaining = 0;
 8009ece:	2100      	movs	r1, #0
    printf("Start 예정까지 남은 시간: %lu초\r\n", (unsigned long)start_remaining);
 8009ed0:	481f      	ldr	r0, [pc, #124]	@ (8009f50 <Get_And_Print_Seconds_Left_ToStart+0x14c>)
 8009ed2:	6031      	str	r1, [r6, #0]
 8009ed4:	f010 f942 	bl	801a15c <iprintf>
    if (start_remaining == 0) {
 8009ed8:	6834      	ldr	r4, [r6, #0]
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d117      	bne.n	8009f0e <Get_And_Print_Seconds_Left_ToStart+0x10a>
        AlarmDelay_InitStart_Flash();
 8009ede:	f7ff feab 	bl	8009c38 <AlarmDelay_InitStart_Flash>
        Set_ModeStatus(mode_internal_backup_start);
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f7ff ff80 	bl	8009de8 <Set_ModeStatus>
        Clear_WakeupTime_Backup();
 8009ee8:	f7fc f822 	bl	8005f30 <Clear_WakeupTime_Backup>
        Switch_Backup_reg(MODE_Start);
 8009eec:	2003      	movs	r0, #3
 8009eee:	f7fc f837 	bl	8005f60 <Switch_Backup_reg>
        Interval_LCD_Count = 1;
 8009ef2:	2201      	movs	r2, #1
        First_Measure = 0;
 8009ef4:	4b10      	ldr	r3, [pc, #64]	@ (8009f38 <Get_And_Print_Seconds_Left_ToStart+0x134>)
        printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 8009ef6:	4815      	ldr	r0, [pc, #84]	@ (8009f4c <Get_And_Print_Seconds_Left_ToStart+0x148>)
        First_Measure = 0;
 8009ef8:	701c      	strb	r4, [r3, #0]
        Tick_Save = 0;
 8009efa:	4b11      	ldr	r3, [pc, #68]	@ (8009f40 <Get_And_Print_Seconds_Left_ToStart+0x13c>)
 8009efc:	601c      	str	r4, [r3, #0]
        Interval_LCD_Count = 1;
 8009efe:	4b11      	ldr	r3, [pc, #68]	@ (8009f44 <Get_And_Print_Seconds_Left_ToStart+0x140>)
 8009f00:	601a      	str	r2, [r3, #0]
        RTC_During_Wakeup = 0;
 8009f02:	4b11      	ldr	r3, [pc, #68]	@ (8009f48 <Get_And_Print_Seconds_Left_ToStart+0x144>)
 8009f04:	701c      	strb	r4, [r3, #0]
        printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 8009f06:	f010 f999 	bl	801a23c <puts>
}
 8009f0a:	b00b      	add	sp, #44	@ 0x2c
 8009f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (start_remaining <= 7) {
 8009f0e:	2c07      	cmp	r4, #7
 8009f10:	d8fb      	bhi.n	8009f0a <Get_And_Print_Seconds_Left_ToStart+0x106>
        Tick_Save = 0;
 8009f12:	2200      	movs	r2, #0
 8009f14:	4b0a      	ldr	r3, [pc, #40]	@ (8009f40 <Get_And_Print_Seconds_Left_ToStart+0x13c>)
 8009f16:	601a      	str	r2, [r3, #0]
}
 8009f18:	e7f7      	b.n	8009f0a <Get_And_Print_Seconds_Left_ToStart+0x106>
 8009f1a:	46c0      	nop			@ (mov r8, r8)
 8009f1c:	200009f8 	.word	0x200009f8
 8009f20:	20002bac 	.word	0x20002bac
 8009f24:	20002c4d 	.word	0x20002c4d
 8009f28:	200004f8 	.word	0x200004f8
 8009f2c:	fffeae80 	.word	0xfffeae80
 8009f30:	fffeae7e 	.word	0xfffeae7e
 8009f34:	0801ea33 	.word	0x0801ea33
 8009f38:	20000534 	.word	0x20000534
 8009f3c:	0801ea5c 	.word	0x0801ea5c
 8009f40:	20000540 	.word	0x20000540
 8009f44:	2000053c 	.word	0x2000053c
 8009f48:	200004fc 	.word	0x200004fc
 8009f4c:	0801eaa7 	.word	0x0801eaa7
 8009f50:	0801ead4 	.word	0x0801ead4

08009f54 <SPI_FLASH_ReadStatus>:
static volatile uint8_t spi_dma_done = 0;
/**
  * @brief  Reads the flash status register. Uses blocking SPI for speed.
  */
 HAL_StatusTypeDef SPI_FLASH_ReadStatus(uint8_t *status)
{
 8009f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_StatusTypeDef ret;
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 8009f56:	466b      	mov	r3, sp
    FLASH_CS_LOW();
 8009f58:	26a0      	movs	r6, #160	@ 0xa0
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 8009f5a:	1ddc      	adds	r4, r3, #7
 8009f5c:	2305      	movs	r3, #5
    FLASH_CS_LOW();
 8009f5e:	05f6      	lsls	r6, r6, #23
{
 8009f60:	0005      	movs	r5, r0
    FLASH_CS_LOW();
 8009f62:	2200      	movs	r2, #0
 8009f64:	0030      	movs	r0, r6
 8009f66:	2110      	movs	r1, #16
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 8009f68:	7023      	strb	r3, [r4, #0]
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8009f6a:	2701      	movs	r7, #1
    FLASH_CS_LOW();
 8009f6c:	f005 fc1e 	bl	800f7ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8009f70:	480a      	ldr	r0, [pc, #40]	@ (8009f9c <SPI_FLASH_ReadStatus+0x48>)
 8009f72:	0021      	movs	r1, r4
 8009f74:	0004      	movs	r4, r0
 8009f76:	427f      	negs	r7, r7
 8009f78:	003b      	movs	r3, r7
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f008 fa63 	bl	8012446 <HAL_SPI_Transmit>
    ret = HAL_SPI_Receive(&hspi3, status, 1, HAL_MAX_DELAY);
 8009f80:	003b      	movs	r3, r7
 8009f82:	0029      	movs	r1, r5
 8009f84:	2201      	movs	r2, #1
 8009f86:	0020      	movs	r0, r4
 8009f88:	f008 fc2a 	bl	80127e0 <HAL_SPI_Receive>
 8009f8c:	0004      	movs	r4, r0
    FLASH_CS_HIGH();
 8009f8e:	2201      	movs	r2, #1
 8009f90:	0030      	movs	r0, r6
 8009f92:	2110      	movs	r1, #16
 8009f94:	f005 fc0a 	bl	800f7ac <HAL_GPIO_WritePin>
    return ret;
}
 8009f98:	0020      	movs	r0, r4
 8009f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f9c:	20000994 	.word	0x20000994

08009fa0 <SPI_FLASH_WaitForWriteCompletion>:

/**
  * @brief  Waits for the current write or erase operation to complete.
  */
static HAL_StatusTypeDef SPI_FLASH_WaitForWriteCompletion(void)
{
 8009fa0:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	466a      	mov	r2, sp
 8009fa6:	2401      	movs	r4, #1
 8009fa8:	71d3      	strb	r3, [r2, #7]
    HAL_StatusTypeDef ret;
    do
    {
        // This function is now much faster as SPI_FLASH_ReadStatus is blocking
        ret = SPI_FLASH_ReadStatus(&status);
 8009faa:	466b      	mov	r3, sp
 8009fac:	1dd8      	adds	r0, r3, #7
 8009fae:	f7ff ffd1 	bl	8009f54 <SPI_FLASH_ReadStatus>
        if (ret != HAL_OK) {
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d105      	bne.n	8009fc2 <SPI_FLASH_WaitForWriteCompletion+0x22>
            return ret;
        }
        // Could add a small delay here in an RTOS environment
    } while ((status & 0x01) == 0x01); // Wait for WIP (Write-In-Progress) bit to clear
 8009fb6:	466b      	mov	r3, sp
 8009fb8:	79db      	ldrb	r3, [r3, #7]
 8009fba:	0018      	movs	r0, r3
 8009fbc:	4020      	ands	r0, r4
 8009fbe:	4223      	tst	r3, r4
 8009fc0:	d1f3      	bne.n	8009faa <SPI_FLASH_WaitForWriteCompletion+0xa>

    return HAL_OK;
}
 8009fc2:	bd16      	pop	{r1, r2, r4, pc}

08009fc4 <SPI_FLASH_Init>:

void SPI_FLASH_Init(void)
{
    FLASH_CS_HIGH();
 8009fc4:	20a0      	movs	r0, #160	@ 0xa0
{
 8009fc6:	b510      	push	{r4, lr}
    FLASH_CS_HIGH();
 8009fc8:	2201      	movs	r2, #1
 8009fca:	2110      	movs	r1, #16
 8009fcc:	05c0      	lsls	r0, r0, #23
 8009fce:	f005 fbed 	bl	800f7ac <HAL_GPIO_WritePin>
}
 8009fd2:	bd10      	pop	{r4, pc}

08009fd4 <SPI_FLASH_WriteEnable>:

/**
  * @brief  Sends the Write Enable (WREN) command. Uses blocking SPI for speed.
  */
void SPI_FLASH_WriteEnable(void)
{
 8009fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 8009fd6:	466b      	mov	r3, sp
    FLASH_CS_LOW();
 8009fd8:	24a0      	movs	r4, #160	@ 0xa0
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 8009fda:	1ddd      	adds	r5, r3, #7
 8009fdc:	2306      	movs	r3, #6
    FLASH_CS_LOW();
 8009fde:	05e4      	lsls	r4, r4, #23
 8009fe0:	0020      	movs	r0, r4
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2110      	movs	r1, #16
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 8009fe6:	702b      	strb	r3, [r5, #0]
    FLASH_CS_LOW();
 8009fe8:	f005 fbe0 	bl	800f7ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8009fec:	2301      	movs	r3, #1
 8009fee:	0029      	movs	r1, r5
 8009ff0:	425b      	negs	r3, r3
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4804      	ldr	r0, [pc, #16]	@ (800a008 <SPI_FLASH_WriteEnable+0x34>)
 8009ff6:	f008 fa26 	bl	8012446 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	2110      	movs	r1, #16
 8009ffe:	0020      	movs	r0, r4
 800a000:	f005 fbd4 	bl	800f7ac <HAL_GPIO_WritePin>
}
 800a004:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	20000994 	.word	0x20000994

0800a00c <SPI_FLASH_EraseSector>:

/**
  * @brief  Erases a 4KB sector.
  */
HAL_StatusTypeDef SPI_FLASH_EraseSector(uint32_t addr)
{
 800a00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a00e:	2320      	movs	r3, #32
    SPI_FLASH_WriteEnable();
    FLASH_CS_LOW();
 800a010:	25a0      	movs	r5, #160	@ 0xa0
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a012:	ac01      	add	r4, sp, #4
    FLASH_CS_LOW();
 800a014:	05ed      	lsls	r5, r5, #23
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a016:	7023      	strb	r3, [r4, #0]
 800a018:	0c03      	lsrs	r3, r0, #16
 800a01a:	ba40      	rev16	r0, r0
 800a01c:	7063      	strb	r3, [r4, #1]
 800a01e:	8060      	strh	r0, [r4, #2]
    SPI_FLASH_WriteEnable();
 800a020:	f7ff ffd8 	bl	8009fd4 <SPI_FLASH_WriteEnable>
    FLASH_CS_LOW();
 800a024:	0028      	movs	r0, r5
 800a026:	2200      	movs	r2, #0
 800a028:	2110      	movs	r1, #16
 800a02a:	f005 fbbf 	bl	800f7ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY); // Use blocking for small command
 800a02e:	2301      	movs	r3, #1
 800a030:	0021      	movs	r1, r4
 800a032:	425b      	negs	r3, r3
 800a034:	2204      	movs	r2, #4
 800a036:	4805      	ldr	r0, [pc, #20]	@ (800a04c <SPI_FLASH_EraseSector+0x40>)
 800a038:	f008 fa05 	bl	8012446 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 800a03c:	0028      	movs	r0, r5
 800a03e:	2201      	movs	r2, #1
 800a040:	2110      	movs	r1, #16
 800a042:	f005 fbb3 	bl	800f7ac <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 800a046:	f7ff ffab 	bl	8009fa0 <SPI_FLASH_WaitForWriteCompletion>
}
 800a04a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800a04c:	20000994 	.word	0x20000994

0800a050 <SPI_FLASH_EraseBlock64k>:

/**
  * @brief  Erases a 64KB block.
  */
HAL_StatusTypeDef SPI_FLASH_EraseBlock64k(uint32_t addr)
{
 800a050:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a052:	23d8      	movs	r3, #216	@ 0xd8
    SPI_FLASH_WriteEnable();
    FLASH_CS_LOW();
 800a054:	25a0      	movs	r5, #160	@ 0xa0
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a056:	ac01      	add	r4, sp, #4
    FLASH_CS_LOW();
 800a058:	05ed      	lsls	r5, r5, #23
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a05a:	7023      	strb	r3, [r4, #0]
 800a05c:	0c03      	lsrs	r3, r0, #16
 800a05e:	ba40      	rev16	r0, r0
 800a060:	7063      	strb	r3, [r4, #1]
 800a062:	8060      	strh	r0, [r4, #2]
    SPI_FLASH_WriteEnable();
 800a064:	f7ff ffb6 	bl	8009fd4 <SPI_FLASH_WriteEnable>
    FLASH_CS_LOW();
 800a068:	0028      	movs	r0, r5
 800a06a:	2200      	movs	r2, #0
 800a06c:	2110      	movs	r1, #16
 800a06e:	f005 fb9d 	bl	800f7ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY); // Use blocking for small command
 800a072:	2301      	movs	r3, #1
 800a074:	0021      	movs	r1, r4
 800a076:	425b      	negs	r3, r3
 800a078:	2204      	movs	r2, #4
 800a07a:	4805      	ldr	r0, [pc, #20]	@ (800a090 <SPI_FLASH_EraseBlock64k+0x40>)
 800a07c:	f008 f9e3 	bl	8012446 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 800a080:	0028      	movs	r0, r5
 800a082:	2201      	movs	r2, #1
 800a084:	2110      	movs	r1, #16
 800a086:	f005 fb91 	bl	800f7ac <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 800a08a:	f7ff ff89 	bl	8009fa0 <SPI_FLASH_WaitForWriteCompletion>
}
 800a08e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800a090:	20000994 	.word	0x20000994

0800a094 <SPI_FLASH_PageProgram>:
  * Uses blocking SPI for the command and DMA for the data payload.
  */
HAL_StatusTypeDef SPI_FLASH_PageProgram(uint32_t addr, uint8_t *buf, uint32_t len)
{
    HAL_StatusTypeDef ret;
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a094:	2302      	movs	r3, #2
{
 800a096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a098:	ad01      	add	r5, sp, #4
 800a09a:	702b      	strb	r3, [r5, #0]
 800a09c:	0c03      	lsrs	r3, r0, #16
 800a09e:	ba40      	rev16	r0, r0
 800a0a0:	706b      	strb	r3, [r5, #1]
{
 800a0a2:	000e      	movs	r6, r1
 800a0a4:	0014      	movs	r4, r2
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a0a6:	8068      	strh	r0, [r5, #2]

    SPI_FLASH_WriteEnable();
 800a0a8:	f7ff ff94 	bl	8009fd4 <SPI_FLASH_WriteEnable>

    FLASH_CS_LOW();
 800a0ac:	20a0      	movs	r0, #160	@ 0xa0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2110      	movs	r1, #16
 800a0b2:	05c0      	lsls	r0, r0, #23
 800a0b4:	f005 fb7a 	bl	800f7ac <HAL_GPIO_WritePin>

    // 1. Transmit command using blocking SPI (it's small and fast)
    if (HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY) != HAL_OK)
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4f17      	ldr	r7, [pc, #92]	@ (800a118 <SPI_FLASH_PageProgram+0x84>)
 800a0bc:	2204      	movs	r2, #4
 800a0be:	0029      	movs	r1, r5
 800a0c0:	0038      	movs	r0, r7
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	f008 f9bf 	bl	8012446 <HAL_SPI_Transmit>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d008      	beq.n	800a0de <SPI_FLASH_PageProgram+0x4a>
    {
        FLASH_CS_HIGH();
 800a0cc:	20a0      	movs	r0, #160	@ 0xa0
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2110      	movs	r1, #16
 800a0d2:	05c0      	lsls	r0, r0, #23
 800a0d4:	f005 fb6a 	bl	800f7ac <HAL_GPIO_WritePin>
        return HAL_ERROR;
 800a0d8:	2401      	movs	r4, #1

    FLASH_CS_HIGH();

    // 4. Wait for the flash chip's internal write process to complete
    return SPI_FLASH_WaitForWriteCompletion();
}
 800a0da:	0020      	movs	r0, r4
 800a0dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    spi_dma_done = 0;
 800a0de:	4d0f      	ldr	r5, [pc, #60]	@ (800a11c <SPI_FLASH_PageProgram+0x88>)
    ret = HAL_SPI_Transmit_DMA(&hspi3, buf, len);
 800a0e0:	b2a2      	uxth	r2, r4
    spi_dma_done = 0;
 800a0e2:	7028      	strb	r0, [r5, #0]
    ret = HAL_SPI_Transmit_DMA(&hspi3, buf, len);
 800a0e4:	0031      	movs	r1, r6
 800a0e6:	0038      	movs	r0, r7
 800a0e8:	f008 fc3a 	bl	8012960 <HAL_SPI_Transmit_DMA>
 800a0ec:	1e04      	subs	r4, r0, #0
    if (ret != HAL_OK)
 800a0ee:	d006      	beq.n	800a0fe <SPI_FLASH_PageProgram+0x6a>
        FLASH_CS_HIGH();
 800a0f0:	20a0      	movs	r0, #160	@ 0xa0
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	2110      	movs	r1, #16
 800a0f6:	05c0      	lsls	r0, r0, #23
 800a0f8:	f005 fb58 	bl	800f7ac <HAL_GPIO_WritePin>
        return ret;
 800a0fc:	e7ed      	b.n	800a0da <SPI_FLASH_PageProgram+0x46>
    while (spi_dma_done == 0) {}
 800a0fe:	782b      	ldrb	r3, [r5, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0fc      	beq.n	800a0fe <SPI_FLASH_PageProgram+0x6a>
    FLASH_CS_HIGH();
 800a104:	20a0      	movs	r0, #160	@ 0xa0
 800a106:	2201      	movs	r2, #1
 800a108:	2110      	movs	r1, #16
 800a10a:	05c0      	lsls	r0, r0, #23
 800a10c:	f005 fb4e 	bl	800f7ac <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 800a110:	f7ff ff46 	bl	8009fa0 <SPI_FLASH_WaitForWriteCompletion>
 800a114:	0004      	movs	r4, r0
 800a116:	e7e0      	b.n	800a0da <SPI_FLASH_PageProgram+0x46>
 800a118:	20000994 	.word	0x20000994
 800a11c:	20002c5b 	.word	0x20002c5b

0800a120 <SPI_FLASH_ReadData>:
  * Uses blocking SPI for the command and DMA for the data payload.
  */
HAL_StatusTypeDef SPI_FLASH_ReadData(uint32_t addr, uint8_t *buf, uint32_t len)
{
    HAL_StatusTypeDef ret;
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a120:	2303      	movs	r3, #3
{
 800a122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a124:	ad01      	add	r5, sp, #4
 800a126:	702b      	strb	r3, [r5, #0]
 800a128:	0c03      	lsrs	r3, r0, #16
 800a12a:	ba40      	rev16	r0, r0
 800a12c:	8068      	strh	r0, [r5, #2]

    FLASH_CS_LOW();
 800a12e:	20a0      	movs	r0, #160	@ 0xa0
{
 800a130:	000e      	movs	r6, r1
    FLASH_CS_LOW();
 800a132:	05c0      	lsls	r0, r0, #23
 800a134:	2110      	movs	r1, #16
{
 800a136:	0014      	movs	r4, r2
    FLASH_CS_LOW();
 800a138:	2200      	movs	r2, #0
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 800a13a:	706b      	strb	r3, [r5, #1]
    FLASH_CS_LOW();
 800a13c:	f005 fb36 	bl	800f7ac <HAL_GPIO_WritePin>

    // 1. Transmit command using blocking SPI
    if (HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY) != HAL_OK)
 800a140:	2301      	movs	r3, #1
 800a142:	4f13      	ldr	r7, [pc, #76]	@ (800a190 <SPI_FLASH_ReadData+0x70>)
 800a144:	2204      	movs	r2, #4
 800a146:	0029      	movs	r1, r5
 800a148:	0038      	movs	r0, r7
 800a14a:	425b      	negs	r3, r3
 800a14c:	f008 f97b 	bl	8012446 <HAL_SPI_Transmit>
 800a150:	2800      	cmp	r0, #0
 800a152:	d008      	beq.n	800a166 <SPI_FLASH_ReadData+0x46>
    {
        FLASH_CS_HIGH();
 800a154:	20a0      	movs	r0, #160	@ 0xa0
 800a156:	2201      	movs	r2, #1
 800a158:	2110      	movs	r1, #16
 800a15a:	05c0      	lsls	r0, r0, #23
 800a15c:	f005 fb26 	bl	800f7ac <HAL_GPIO_WritePin>
        return HAL_ERROR;
 800a160:	2401      	movs	r4, #1
    while (spi_dma_done == 0) {}

    FLASH_CS_HIGH();

    return ret;
}
 800a162:	0020      	movs	r0, r4
 800a164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    spi_dma_done = 0;
 800a166:	4d0b      	ldr	r5, [pc, #44]	@ (800a194 <SPI_FLASH_ReadData+0x74>)
    ret = HAL_SPI_Receive_DMA(&hspi3, buf, len);
 800a168:	b2a2      	uxth	r2, r4
    spi_dma_done = 0;
 800a16a:	7028      	strb	r0, [r5, #0]
    ret = HAL_SPI_Receive_DMA(&hspi3, buf, len);
 800a16c:	0031      	movs	r1, r6
 800a16e:	0038      	movs	r0, r7
 800a170:	f008 fd54 	bl	8012c1c <HAL_SPI_Receive_DMA>
 800a174:	1e04      	subs	r4, r0, #0
     if (ret != HAL_OK)
 800a176:	d006      	beq.n	800a186 <SPI_FLASH_ReadData+0x66>
    FLASH_CS_HIGH();
 800a178:	20a0      	movs	r0, #160	@ 0xa0
 800a17a:	2201      	movs	r2, #1
 800a17c:	2110      	movs	r1, #16
 800a17e:	05c0      	lsls	r0, r0, #23
 800a180:	f005 fb14 	bl	800f7ac <HAL_GPIO_WritePin>
    return ret;
 800a184:	e7ed      	b.n	800a162 <SPI_FLASH_ReadData+0x42>
    while (spi_dma_done == 0) {}
 800a186:	782b      	ldrb	r3, [r5, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d0fc      	beq.n	800a186 <SPI_FLASH_ReadData+0x66>
 800a18c:	e7f4      	b.n	800a178 <SPI_FLASH_ReadData+0x58>
 800a18e:	46c0      	nop			@ (mov r8, r8)
 800a190:	20000994 	.word	0x20000994
 800a194:	20002c5b 	.word	0x20002c5b

0800a198 <HAL_SPI_TxCpltCallback>:

/* --- HAL DMA Callback Functions --- */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (hspi->Instance == SPI3)
 800a198:	4b03      	ldr	r3, [pc, #12]	@ (800a1a8 <HAL_SPI_TxCpltCallback+0x10>)
 800a19a:	6802      	ldr	r2, [r0, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d102      	bne.n	800a1a6 <HAL_SPI_TxCpltCallback+0xe>
  {
    spi_dma_done = 1;
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	4b02      	ldr	r3, [pc, #8]	@ (800a1ac <HAL_SPI_TxCpltCallback+0x14>)
 800a1a4:	701a      	strb	r2, [r3, #0]
  }
}
 800a1a6:	4770      	bx	lr
 800a1a8:	40003c00 	.word	0x40003c00
 800a1ac:	20002c5b 	.word	0x20002c5b

0800a1b0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	f7ff fff1 	bl	800a198 <HAL_SPI_TxCpltCallback>
 800a1b6:	bd10      	pop	{r4, pc}

0800a1b8 <HAL_SPI_ErrorCallback>:
  * @brief  SPI error callback.
  * @param  hspi: SPI handle
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a1b8:	b510      	push	{r4, lr}
    // Handle or log the error
    Error_Handler();
 800a1ba:	f7fe fa2f 	bl	800861c <Error_Handler>
}
 800a1be:	bd10      	pop	{r4, pc}

0800a1c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1c0:	b507      	push	{r0, r1, r2, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a1c2:	2180      	movs	r1, #128	@ 0x80
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f8 <HAL_MspInit+0x38>)
 800a1c6:	0549      	lsls	r1, r1, #21
 800a1c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a1ca:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	659a      	str	r2, [r3, #88]	@ 0x58
 800a1d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1d2:	400a      	ands	r2, r1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1d4:	2101      	movs	r1, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1d6:	9200      	str	r2, [sp, #0]
 800a1d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	661a      	str	r2, [r3, #96]	@ 0x60
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a1e0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1e4:	400b      	ands	r3, r1
 800a1e6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a1e8:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800a1ec:	f004 ff1c 	bl	800f028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800a1f0:	2004      	movs	r0, #4
 800a1f2:	f004 ff43 	bl	800f07c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1f6:	bd07      	pop	{r0, r1, r2, pc}
 800a1f8:	40021000 	.word	0x40021000

0800a1fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	0004      	movs	r4, r0
 800a200:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a202:	2214      	movs	r2, #20
 800a204:	2100      	movs	r1, #0
 800a206:	a802      	add	r0, sp, #8
 800a208:	f010 f974 	bl	801a4f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a20c:	2244      	movs	r2, #68	@ 0x44
 800a20e:	2100      	movs	r1, #0
 800a210:	a807      	add	r0, sp, #28
 800a212:	f010 f96f 	bl	801a4f4 <memset>
  if(hadc->Instance==ADC1)
 800a216:	4b1a      	ldr	r3, [pc, #104]	@ (800a280 <HAL_ADC_MspInit+0x84>)
 800a218:	6822      	ldr	r2, [r4, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d12d      	bne.n	800a27a <HAL_ADC_MspInit+0x7e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a21e:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a220:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800a222:	01db      	lsls	r3, r3, #7
 800a224:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a226:	f007 f8b5 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d001      	beq.n	800a232 <HAL_ADC_MspInit+0x36>
    {
      Error_Handler();
 800a22e:	f7fe f9f5 	bl	800861c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800a232:	2180      	movs	r1, #128	@ 0x80
 800a234:	4b13      	ldr	r3, [pc, #76]	@ (800a284 <HAL_ADC_MspInit+0x88>)
 800a236:	0349      	lsls	r1, r1, #13
 800a238:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a23a:	2400      	movs	r4, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 800a23c:	430a      	orrs	r2, r1
 800a23e:	661a      	str	r2, [r3, #96]	@ 0x60
 800a240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a242:	4811      	ldr	r0, [pc, #68]	@ (800a288 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800a244:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a246:	2104      	movs	r1, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 800a248:	9200      	str	r2, [sp, #0]
 800a24a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a24c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a24e:	430a      	orrs	r2, r1
 800a250:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a254:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a256:	400b      	ands	r3, r1
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a25c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a25e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a260:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a262:	3b02      	subs	r3, #2
 800a264:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a266:	f005 f95d 	bl	800f524 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 800a26a:	200c      	movs	r0, #12
 800a26c:	0022      	movs	r2, r4
 800a26e:	0021      	movs	r1, r4
 800a270:	f004 feda 	bl	800f028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 800a274:	200c      	movs	r0, #12
 800a276:	f004 ff01 	bl	800f07c <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800a27a:	b018      	add	sp, #96	@ 0x60
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	46c0      	nop			@ (mov r8, r8)
 800a280:	40012400 	.word	0x40012400
 800a284:	40021000 	.word	0x40021000
 800a288:	50000800 	.word	0x50000800

0800a28c <HAL_ADC_MspDeInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800a28c:	4b07      	ldr	r3, [pc, #28]	@ (800a2ac <HAL_ADC_MspDeInit+0x20>)
 800a28e:	6802      	ldr	r2, [r0, #0]
{
 800a290:	b510      	push	{r4, lr}
  if(hadc->Instance==ADC1)
 800a292:	429a      	cmp	r2, r3
 800a294:	d108      	bne.n	800a2a8 <HAL_ADC_MspDeInit+0x1c>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800a296:	4a06      	ldr	r2, [pc, #24]	@ (800a2b0 <HAL_ADC_MspDeInit+0x24>)
 800a298:	4906      	ldr	r1, [pc, #24]	@ (800a2b4 <HAL_ADC_MspDeInit+0x28>)
 800a29a:	6e13      	ldr	r3, [r2, #96]	@ 0x60

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 800a29c:	4806      	ldr	r0, [pc, #24]	@ (800a2b8 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC_CLK_DISABLE();
 800a29e:	400b      	ands	r3, r1
 800a2a0:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 800a2a2:	2105      	movs	r1, #5
 800a2a4:	f005 f9fc 	bl	800f6a0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800a2a8:	bd10      	pop	{r4, pc}
 800a2aa:	46c0      	nop			@ (mov r8, r8)
 800a2ac:	40012400 	.word	0x40012400
 800a2b0:	40021000 	.word	0x40021000
 800a2b4:	ffefffff 	.word	0xffefffff
 800a2b8:	50000800 	.word	0x50000800

0800a2bc <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800a2bc:	b530      	push	{r4, r5, lr}
 800a2be:	0004      	movs	r4, r0
 800a2c0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2c2:	2214      	movs	r2, #20
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	a803      	add	r0, sp, #12
 800a2c8:	f010 f914 	bl	801a4f4 <memset>
  if(hcomp->Instance==COMP1)
 800a2cc:	4b1b      	ldr	r3, [pc, #108]	@ (800a33c <HAL_COMP_MspInit+0x80>)
 800a2ce:	6822      	ldr	r2, [r4, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d130      	bne.n	800a336 <HAL_COMP_MspInit+0x7a>
  {
    /* USER CODE BEGIN COMP1_MspInit 0 */

    /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP_CLK_ENABLE();
 800a2d4:	2101      	movs	r1, #1

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2d6:	2404      	movs	r4, #4
    __HAL_RCC_COMP_CLK_ENABLE();
 800a2d8:	4b19      	ldr	r3, [pc, #100]	@ (800a340 <HAL_COMP_MspInit+0x84>)
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a2da:	2503      	movs	r5, #3
    __HAL_RCC_COMP_CLK_ENABLE();
 800a2dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2de:	4819      	ldr	r0, [pc, #100]	@ (800a344 <HAL_COMP_MspInit+0x88>)
    __HAL_RCC_COMP_CLK_ENABLE();
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a2e6:	400a      	ands	r2, r1
 800a2e8:	9200      	str	r2, [sp, #0]
 800a2ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2ee:	1849      	adds	r1, r1, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2f0:	4322      	orrs	r2, r4
 800a2f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a2f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2f6:	4022      	ands	r2, r4
 800a2f8:	9201      	str	r2, [sp, #4]
 800a2fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2fe:	430a      	orrs	r2, r1
 800a300:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a304:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a306:	400b      	ands	r3, r1
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a30c:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a30e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a310:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a312:	f005 f907 	bl	800f524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a316:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a318:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a31a:	480b      	ldr	r0, [pc, #44]	@ (800a348 <HAL_COMP_MspInit+0x8c>)
 800a31c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a31e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a320:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a322:	f005 f8ff 	bl	800f524 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 800a326:	200c      	movs	r0, #12
 800a328:	0022      	movs	r2, r4
 800a32a:	0021      	movs	r1, r4
 800a32c:	f004 fe7c 	bl	800f028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 800a330:	200c      	movs	r0, #12
 800a332:	f004 fea3 	bl	800f07c <HAL_NVIC_EnableIRQ>

    /* USER CODE END COMP1_MspInit 1 */

  }

}
 800a336:	b009      	add	sp, #36	@ 0x24
 800a338:	bd30      	pop	{r4, r5, pc}
 800a33a:	46c0      	nop			@ (mov r8, r8)
 800a33c:	40010200 	.word	0x40010200
 800a340:	40021000 	.word	0x40021000
 800a344:	50000800 	.word	0x50000800
 800a348:	50000400 	.word	0x50000400

0800a34c <HAL_COMP_MspDeInit>:
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspDeInit(COMP_HandleTypeDef* hcomp)
{
  if(hcomp->Instance==COMP1)
 800a34c:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <HAL_COMP_MspDeInit+0x28>)
 800a34e:	6802      	ldr	r2, [r0, #0]
{
 800a350:	b510      	push	{r4, lr}
  if(hcomp->Instance==COMP1)
 800a352:	429a      	cmp	r2, r3
 800a354:	d10c      	bne.n	800a370 <HAL_COMP_MspDeInit+0x24>
  {
    /* USER CODE BEGIN COMP1_MspDeInit 0 */

    /* USER CODE END COMP1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_COMP_CLK_DISABLE();
 800a356:	2101      	movs	r1, #1
 800a358:	4a07      	ldr	r2, [pc, #28]	@ (800a378 <HAL_COMP_MspDeInit+0x2c>)

    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800a35a:	4808      	ldr	r0, [pc, #32]	@ (800a37c <HAL_COMP_MspDeInit+0x30>)
    __HAL_RCC_COMP_CLK_DISABLE();
 800a35c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800a35e:	438b      	bics	r3, r1
 800a360:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800a362:	310f      	adds	r1, #15
 800a364:	f005 f99c 	bl	800f6a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 800a368:	2104      	movs	r1, #4
 800a36a:	4805      	ldr	r0, [pc, #20]	@ (800a380 <HAL_COMP_MspDeInit+0x34>)
 800a36c:	f005 f998 	bl	800f6a0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN COMP1_MspDeInit 1 */

    /* USER CODE END COMP1_MspDeInit 1 */
  }

}
 800a370:	bd10      	pop	{r4, pc}
 800a372:	46c0      	nop			@ (mov r8, r8)
 800a374:	40010200 	.word	0x40010200
 800a378:	40021000 	.word	0x40021000
 800a37c:	50000800 	.word	0x50000800
 800a380:	50000400 	.word	0x50000400

0800a384 <HAL_LCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	0004      	movs	r4, r0
 800a388:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a38a:	2214      	movs	r2, #20
 800a38c:	2100      	movs	r1, #0
 800a38e:	a804      	add	r0, sp, #16
 800a390:	f010 f8b0 	bl	801a4f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a394:	2244      	movs	r2, #68	@ 0x44
 800a396:	2100      	movs	r1, #0
 800a398:	a809      	add	r0, sp, #36	@ 0x24
 800a39a:	f010 f8ab 	bl	801a4f4 <memset>
  if(hlcd->Instance==LCD)
 800a39e:	4b2b      	ldr	r3, [pc, #172]	@ (800a44c <HAL_LCD_MspInit+0xc8>)
 800a3a0:	6822      	ldr	r2, [r4, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d150      	bne.n	800a448 <HAL_LCD_MspInit+0xc4>

    /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a3a6:	2380      	movs	r3, #128	@ 0x80
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a3ac:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3ae:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3b4:	f006 ffee 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d001      	beq.n	800a3c0 <HAL_LCD_MspInit+0x3c>
    {
      Error_Handler();
 800a3bc:	f7fe f92e 	bl	800861c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800a3c0:	2180      	movs	r1, #128	@ 0x80

    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3c2:	2502      	movs	r5, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 800a3c4:	4b22      	ldr	r3, [pc, #136]	@ (800a450 <HAL_LCD_MspInit+0xcc>)
 800a3c6:	0089      	lsls	r1, r1, #2
 800a3c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ca:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a3cc:	260b      	movs	r6, #11
    __HAL_RCC_LCD_CLK_ENABLE();
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a3d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3d4:	481f      	ldr	r0, [pc, #124]	@ (800a454 <HAL_LCD_MspInit+0xd0>)
    __HAL_RCC_LCD_CLK_ENABLE();
 800a3d6:	400a      	ands	r2, r1
 800a3d8:	9200      	str	r2, [sp, #0]
 800a3da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3dc:	39fd      	subs	r1, #253	@ 0xfd
 800a3de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3e0:	39ff      	subs	r1, #255	@ 0xff
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3e8:	400a      	ands	r2, r1
 800a3ea:	9201      	str	r2, [sp, #4]
 800a3ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3f0:	3903      	subs	r1, #3
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3f8:	400a      	ands	r2, r1
 800a3fa:	9202      	str	r2, [sp, #8]
 800a3fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a400:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a402:	432a      	orrs	r2, r5
 800a404:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a408:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a40a:	402b      	ands	r3, r5
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a410:	4b11      	ldr	r3, [pc, #68]	@ (800a458 <HAL_LCD_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a412:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a414:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a416:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a418:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a41a:	f005 f883 	bl	800f524 <HAL_GPIO_Init>
                          |GPIO_PIN_10|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a41e:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800a420:	4b0e      	ldr	r3, [pc, #56]	@ (800a45c <HAL_LCD_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a422:	a904      	add	r1, sp, #16
 800a424:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800a426:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a428:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a42a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a42c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a42e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a430:	f005 f878 	bl	800f524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a434:	4b0a      	ldr	r3, [pc, #40]	@ (800a460 <HAL_LCD_MspInit+0xdc>)
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a436:	480b      	ldr	r0, [pc, #44]	@ (800a464 <HAL_LCD_MspInit+0xe0>)
 800a438:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a43a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a43c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a440:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800a442:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a444:	f005 f86e 	bl	800f524 <HAL_GPIO_Init>

    /* USER CODE END LCD_MspInit 1 */

  }

}
 800a448:	b01a      	add	sp, #104	@ 0x68
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	40002400 	.word	0x40002400
 800a450:	40021000 	.word	0x40021000
 800a454:	50000800 	.word	0x50000800
 800a458:	000003ea 	.word	0x000003ea
 800a45c:	000087ee 	.word	0x000087ee
 800a460:	0000fabb 	.word	0x0000fabb
 800a464:	50000400 	.word	0x50000400

0800a468 <HAL_LCD_MspDeInit>:
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspDeInit(LCD_HandleTypeDef* hlcd)
{
  if(hlcd->Instance==LCD)
 800a468:	4b0b      	ldr	r3, [pc, #44]	@ (800a498 <HAL_LCD_MspDeInit+0x30>)
 800a46a:	6802      	ldr	r2, [r0, #0]
{
 800a46c:	b510      	push	{r4, lr}
  if(hlcd->Instance==LCD)
 800a46e:	429a      	cmp	r2, r3
 800a470:	d111      	bne.n	800a496 <HAL_LCD_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN LCD_MspDeInit 0 */

    /* USER CODE END LCD_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LCD_CLK_DISABLE();
 800a472:	4a0a      	ldr	r2, [pc, #40]	@ (800a49c <HAL_LCD_MspDeInit+0x34>)
 800a474:	490a      	ldr	r1, [pc, #40]	@ (800a4a0 <HAL_LCD_MspDeInit+0x38>)
 800a476:	6d93      	ldr	r3, [r2, #88]	@ 0x58
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB9     ------> LCD_COM3
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a478:	480a      	ldr	r0, [pc, #40]	@ (800a4a4 <HAL_LCD_MspDeInit+0x3c>)
    __HAL_RCC_LCD_CLK_DISABLE();
 800a47a:	400b      	ands	r3, r1
 800a47c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800a47e:	490a      	ldr	r1, [pc, #40]	@ (800a4a8 <HAL_LCD_MspDeInit+0x40>)
 800a480:	f005 f90e 	bl	800f6a0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800a484:	20a0      	movs	r0, #160	@ 0xa0
 800a486:	4909      	ldr	r1, [pc, #36]	@ (800a4ac <HAL_LCD_MspDeInit+0x44>)
 800a488:	05c0      	lsls	r0, r0, #23
 800a48a:	f005 f909 	bl	800f6a0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a48e:	4908      	ldr	r1, [pc, #32]	@ (800a4b0 <HAL_LCD_MspDeInit+0x48>)
 800a490:	4808      	ldr	r0, [pc, #32]	@ (800a4b4 <HAL_LCD_MspDeInit+0x4c>)
 800a492:	f005 f905 	bl	800f6a0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN LCD_MspDeInit 1 */

    /* USER CODE END LCD_MspDeInit 1 */
  }

}
 800a496:	bd10      	pop	{r4, pc}
 800a498:	40002400 	.word	0x40002400
 800a49c:	40021000 	.word	0x40021000
 800a4a0:	fffffdff 	.word	0xfffffdff
 800a4a4:	50000800 	.word	0x50000800
 800a4a8:	000003ea 	.word	0x000003ea
 800a4ac:	000087ee 	.word	0x000087ee
 800a4b0:	0000fabb 	.word	0x0000fabb
 800a4b4:	50000400 	.word	0x50000400

0800a4b8 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	0004      	movs	r4, r0
 800a4bc:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a4be:	2244      	movs	r2, #68	@ 0x44
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	a801      	add	r0, sp, #4
 800a4c4:	f010 f816 	bl	801a4f4 <memset>
  if(hlptim->Instance==LPTIM1)
 800a4c8:	4b12      	ldr	r3, [pc, #72]	@ (800a514 <HAL_LPTIM_MspInit+0x5c>)
 800a4ca:	6822      	ldr	r2, [r4, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d11e      	bne.n	800a50e <HAL_LPTIM_MspInit+0x56>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800a4d0:	2380      	movs	r3, #128	@ 0x80
 800a4d2:	9301      	str	r3, [sp, #4]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800a4d4:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a4d6:	a801      	add	r0, sp, #4
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800a4d8:	031b      	lsls	r3, r3, #12
 800a4da:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a4dc:	f006 ff5a 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d001      	beq.n	800a4e8 <HAL_LPTIM_MspInit+0x30>
    {
      Error_Handler();
 800a4e4:	f7fe f89a 	bl	800861c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a4e8:	2280      	movs	r2, #128	@ 0x80
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a518 <HAL_LPTIM_MspInit+0x60>)
 800a4ec:	0612      	lsls	r2, r2, #24
 800a4ee:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a4f0:	2011      	movs	r0, #17
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a4f6:	2200      	movs	r2, #0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a4fa:	0011      	movs	r1, r2
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a4fc:	0fdb      	lsrs	r3, r3, #31
 800a4fe:	07db      	lsls	r3, r3, #31
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a504:	f004 fd90 	bl	800f028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800a508:	2011      	movs	r0, #17
 800a50a:	f004 fdb7 	bl	800f07c <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 800a50e:	b012      	add	sp, #72	@ 0x48
 800a510:	bd10      	pop	{r4, pc}
 800a512:	46c0      	nop			@ (mov r8, r8)
 800a514:	40007c00 	.word	0x40007c00
 800a518:	40021000 	.word	0x40021000

0800a51c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a51c:	b510      	push	{r4, lr}
 800a51e:	0004      	movs	r4, r0
 800a520:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a522:	2244      	movs	r2, #68	@ 0x44
 800a524:	2100      	movs	r1, #0
 800a526:	a801      	add	r0, sp, #4
 800a528:	f00f ffe4 	bl	801a4f4 <memset>
  if(hrtc->Instance==RTC)
 800a52c:	4b14      	ldr	r3, [pc, #80]	@ (800a580 <HAL_RTC_MspInit+0x64>)
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d122      	bne.n	800a57a <HAL_RTC_MspInit+0x5e>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a534:	2480      	movs	r4, #128	@ 0x80
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a536:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a538:	0224      	lsls	r4, r4, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a53a:	005b      	lsls	r3, r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a53c:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a53e:	9401      	str	r4, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a540:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a542:	f006 ff27 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 800a546:	2800      	cmp	r0, #0
 800a548:	d001      	beq.n	800a54e <HAL_RTC_MspInit+0x32>
    {
      Error_Handler();
 800a54a:	f7fe f867 	bl	800861c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a54e:	4a0d      	ldr	r2, [pc, #52]	@ (800a584 <HAL_RTC_MspInit+0x68>)
 800a550:	4b0d      	ldr	r3, [pc, #52]	@ (800a588 <HAL_RTC_MspInit+0x6c>)
 800a552:	6811      	ldr	r1, [r2, #0]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a554:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 800a556:	430c      	orrs	r4, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a558:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_RTC_ENABLE();
 800a55a:	6014      	str	r4, [r2, #0]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a55c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a55e:	00c9      	lsls	r1, r1, #3
 800a560:	430a      	orrs	r2, r1
 800a562:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a564:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a568:	400b      	ands	r3, r1
 800a56a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a56c:	0011      	movs	r1, r2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a56e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a570:	f004 fd5a 	bl	800f028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800a574:	2002      	movs	r0, #2
 800a576:	f004 fd81 	bl	800f07c <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800a57a:	b012      	add	sp, #72	@ 0x48
 800a57c:	bd10      	pop	{r4, pc}
 800a57e:	46c0      	nop			@ (mov r8, r8)
 800a580:	40002800 	.word	0x40002800
 800a584:	40021090 	.word	0x40021090
 800a588:	40021000 	.word	0x40021000

0800a58c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a58c:	b530      	push	{r4, r5, lr}
 800a58e:	0005      	movs	r5, r0
 800a590:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a592:	2214      	movs	r2, #20
 800a594:	2100      	movs	r1, #0
 800a596:	a803      	add	r0, sp, #12
 800a598:	f00f ffac 	bl	801a4f4 <memset>
  if(hspi->Instance==SPI3)
 800a59c:	4b28      	ldr	r3, [pc, #160]	@ (800a640 <HAL_SPI_MspInit+0xb4>)
 800a59e:	682a      	ldr	r2, [r5, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d14b      	bne.n	800a63c <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a5a4:	2180      	movs	r1, #128	@ 0x80
 800a5a6:	4b27      	ldr	r3, [pc, #156]	@ (800a644 <HAL_SPI_MspInit+0xb8>)
 800a5a8:	0209      	lsls	r1, r1, #8
 800a5aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5ac:	4826      	ldr	r0, [pc, #152]	@ (800a648 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a5b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a5b4:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5b6:	2104      	movs	r1, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a5b8:	9201      	str	r2, [sp, #4]
 800a5ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a5c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5c4:	400b      	ands	r3, r1
 800a5c6:	9302      	str	r3, [sp, #8]
 800a5c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a5ca:	23e0      	movs	r3, #224	@ 0xe0
 800a5cc:	015b      	lsls	r3, r3, #5
 800a5ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a5d4:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a5d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5da:	f004 ffa3 	bl	800f524 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel1;
 800a5de:	4c1b      	ldr	r4, [pc, #108]	@ (800a64c <HAL_SPI_MspInit+0xc0>)
 800a5e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a650 <HAL_SPI_MspInit+0xc4>)
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a5e2:	2280      	movs	r2, #128	@ 0x80
    hdma_spi3_rx.Instance = DMA1_Channel1;
 800a5e4:	6023      	str	r3, [r4, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800a5e6:	2328      	movs	r3, #40	@ 0x28
 800a5e8:	6063      	str	r3, [r4, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a5ea:	2300      	movs	r3, #0
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800a5ec:	0020      	movs	r0, r4
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a5ee:	60a3      	str	r3, [r4, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a5f0:	60e3      	str	r3, [r4, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a5f2:	6122      	str	r2, [r4, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a5f4:	6163      	str	r3, [r4, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a5f6:	61a3      	str	r3, [r4, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800a5f8:	61e3      	str	r3, [r4, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a5fa:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800a5fc:	f004 fda6 	bl	800f14c <HAL_DMA_Init>
 800a600:	2800      	cmp	r0, #0
 800a602:	d001      	beq.n	800a608 <HAL_SPI_MspInit+0x7c>
    {
      Error_Handler();
 800a604:	f7fe f80a 	bl	800861c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a608:	4b12      	ldr	r3, [pc, #72]	@ (800a654 <HAL_SPI_MspInit+0xc8>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800a60a:	65ac      	str	r4, [r5, #88]	@ 0x58
 800a60c:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a60e:	4c12      	ldr	r4, [pc, #72]	@ (800a658 <HAL_SPI_MspInit+0xcc>)
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a610:	2280      	movs	r2, #128	@ 0x80
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a612:	6023      	str	r3, [r4, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800a614:	2329      	movs	r3, #41	@ 0x29
 800a616:	6063      	str	r3, [r4, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a618:	3b19      	subs	r3, #25
 800a61a:	60a3      	str	r3, [r4, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a61c:	2300      	movs	r3, #0
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a61e:	0020      	movs	r0, r4
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a620:	60e3      	str	r3, [r4, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a622:	6122      	str	r2, [r4, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a624:	6163      	str	r3, [r4, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a626:	61a3      	str	r3, [r4, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800a628:	61e3      	str	r3, [r4, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a62a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a62c:	f004 fd8e 	bl	800f14c <HAL_DMA_Init>
 800a630:	2800      	cmp	r0, #0
 800a632:	d001      	beq.n	800a638 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 800a634:	f7fd fff2 	bl	800861c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800a638:	656c      	str	r4, [r5, #84]	@ 0x54
 800a63a:	62a5      	str	r5, [r4, #40]	@ 0x28

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800a63c:	b009      	add	sp, #36	@ 0x24
 800a63e:	bd30      	pop	{r4, r5, pc}
 800a640:	40003c00 	.word	0x40003c00
 800a644:	40021000 	.word	0x40021000
 800a648:	50000800 	.word	0x50000800
 800a64c:	20000934 	.word	0x20000934
 800a650:	40020008 	.word	0x40020008
 800a654:	4002001c 	.word	0x4002001c
 800a658:	200008d4 	.word	0x200008d4

0800a65c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a65c:	b510      	push	{r4, lr}
 800a65e:	0004      	movs	r4, r0
 800a660:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a662:	2214      	movs	r2, #20
 800a664:	2100      	movs	r1, #0
 800a666:	a802      	add	r0, sp, #8
 800a668:	f00f ff44 	bl	801a4f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a66c:	2244      	movs	r2, #68	@ 0x44
 800a66e:	2100      	movs	r1, #0
 800a670:	a807      	add	r0, sp, #28
 800a672:	f00f ff3f 	bl	801a4f4 <memset>
  if(huart->Instance==USART3)
 800a676:	4b18      	ldr	r3, [pc, #96]	@ (800a6d8 <HAL_UART_MspInit+0x7c>)
 800a678:	6822      	ldr	r2, [r4, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d129      	bne.n	800a6d2 <HAL_UART_MspInit+0x76>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a67e:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a680:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a682:	025b      	lsls	r3, r3, #9
 800a684:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a686:	f006 fe85 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d001      	beq.n	800a692 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800a68e:	f7fd ffc5 	bl	800861c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a692:	2180      	movs	r1, #128	@ 0x80
 800a694:	4b11      	ldr	r3, [pc, #68]	@ (800a6dc <HAL_UART_MspInit+0x80>)
 800a696:	02c9      	lsls	r1, r1, #11
 800a698:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a69a:	4811      	ldr	r0, [pc, #68]	@ (800a6e0 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800a69c:	430a      	orrs	r2, r1
 800a69e:	659a      	str	r2, [r3, #88]	@ 0x58
 800a6a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a6a2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6a4:	2102      	movs	r1, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800a6a6:	9200      	str	r2, [sp, #0]
 800a6a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a6b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6b2:	400b      	ands	r3, r1
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a6b8:	2380      	movs	r3, #128	@ 0x80
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a6be:	3bee      	subs	r3, #238	@ 0xee
 800a6c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c2:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a6ca:	3307      	adds	r3, #7
 800a6cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6ce:	f004 ff29 	bl	800f524 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800a6d2:	b018      	add	sp, #96	@ 0x60
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	46c0      	nop			@ (mov r8, r8)
 800a6d8:	40004800 	.word	0x40004800
 800a6dc:	40021000 	.word	0x40021000
 800a6e0:	50000400 	.word	0x50000400

0800a6e4 <HAL_UART_MspDeInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART3)
 800a6e4:	4b07      	ldr	r3, [pc, #28]	@ (800a704 <HAL_UART_MspDeInit+0x20>)
 800a6e6:	6802      	ldr	r2, [r0, #0]
{
 800a6e8:	b510      	push	{r4, lr}
  if(huart->Instance==USART3)
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d109      	bne.n	800a702 <HAL_UART_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN USART3_MspDeInit 0 */

    /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800a6ee:	4a06      	ldr	r2, [pc, #24]	@ (800a708 <HAL_UART_MspDeInit+0x24>)
 800a6f0:	4906      	ldr	r1, [pc, #24]	@ (800a70c <HAL_UART_MspDeInit+0x28>)
 800a6f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58

    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a6f4:	4806      	ldr	r0, [pc, #24]	@ (800a710 <HAL_UART_MspDeInit+0x2c>)
    __HAL_RCC_USART3_CLK_DISABLE();
 800a6f6:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a6f8:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART3_CLK_DISABLE();
 800a6fa:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a6fc:	0049      	lsls	r1, r1, #1
 800a6fe:	f004 ffcf 	bl	800f6a0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800a702:	bd10      	pop	{r4, pc}
 800a704:	40004800 	.word	0x40004800
 800a708:	40021000 	.word	0x40021000
 800a70c:	fffbffff 	.word	0xfffbffff
 800a710:	50000400 	.word	0x50000400

0800a714 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a714:	b510      	push	{r4, lr}
 800a716:	0004      	movs	r4, r0
 800a718:	b098      	sub	sp, #96	@ 0x60
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a71a:	2244      	movs	r2, #68	@ 0x44
 800a71c:	2100      	movs	r1, #0
 800a71e:	a807      	add	r0, sp, #28
 800a720:	f00f fee8 	bl	801a4f4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800a724:	4b1b      	ldr	r3, [pc, #108]	@ (800a794 <HAL_PCD_MspInit+0x80>)
 800a726:	6822      	ldr	r2, [r4, #0]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d130      	bne.n	800a78e <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a72c:	2380      	movs	r3, #128	@ 0x80
 800a72e:	015b      	lsls	r3, r3, #5
 800a730:	9307      	str	r3, [sp, #28]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a732:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a734:	a807      	add	r0, sp, #28
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a736:	051b      	lsls	r3, r3, #20
 800a738:	9314      	str	r3, [sp, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a73a:	f006 fe2b 	bl	8011394 <HAL_RCCEx_PeriphCLKConfig>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d001      	beq.n	800a746 <HAL_PCD_MspInit+0x32>
    {
      Error_Handler();
 800a742:	f7fd ff6b 	bl	800861c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800a746:	f006 fa35 	bl	8010bb4 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a74a:	2180      	movs	r1, #128	@ 0x80
 800a74c:	4b12      	ldr	r3, [pc, #72]	@ (800a798 <HAL_PCD_MspInit+0x84>)
 800a74e:	0189      	lsls	r1, r1, #6
 800a750:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a752:	2008      	movs	r0, #8
    __HAL_RCC_USB_CLK_ENABLE();
 800a754:	430a      	orrs	r2, r1
 800a756:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a758:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a75c:	400b      	ands	r3, r1
 800a75e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a760:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a762:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a764:	f004 fc60 	bl	800f028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800a768:	2008      	movs	r0, #8
 800a76a:	f004 fc87 	bl	800f07c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a76e:	2300      	movs	r3, #0
 800a770:	9304      	str	r3, [sp, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a772:	23c0      	movs	r3, #192	@ 0xc0
 800a774:	015b      	lsls	r3, r3, #5
 800a776:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a778:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a77a:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a77c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a77e:	3301      	adds	r3, #1
 800a780:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a782:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a784:	3307      	adds	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a786:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a788:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a78a:	f004 fecb 	bl	800f524 <HAL_GPIO_Init>
    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800a78e:	b018      	add	sp, #96	@ 0x60
 800a790:	bd10      	pop	{r4, pc}
 800a792:	46c0      	nop			@ (mov r8, r8)
 800a794:	40005c00 	.word	0x40005c00
 800a798:	40021000 	.word	0x40021000

0800a79c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a79c:	e7fe      	b.n	800a79c <NMI_Handler>

0800a79e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a79e:	e7fe      	b.n	800a79e <HardFault_Handler>

0800a7a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a7a0:	4770      	bx	lr

0800a7a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800a7a2:	4770      	bx	lr

0800a7a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a7a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a7a6:	f003 fd5f 	bl	800e268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a7aa:	bd10      	pop	{r4, pc}

0800a7ac <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800a7ac:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a7ae:	4c0a      	ldr	r4, [pc, #40]	@ (800a7d8 <RTC_TAMP_IRQHandler+0x2c>)
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  // 1) Wake-Up 타이머 EXTI 라인(20) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a7b0:	4d0a      	ldr	r5, [pc, #40]	@ (800a7dc <RTC_TAMP_IRQHandler+0x30>)
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a7b2:	0020      	movs	r0, r4
 800a7b4:	f007 f96e 	bl	8011a94 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a7b8:	0020      	movs	r0, r4
 800a7ba:	f007 fc4d 	bl	8012058 <HAL_RTCEx_WakeUpTimerIRQHandler>
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a7be:	2380      	movs	r3, #128	@ 0x80
 800a7c0:	055b      	lsls	r3, r3, #21
 800a7c2:	60eb      	str	r3, [r5, #12]
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a7c4:	0020      	movs	r0, r4
 800a7c6:	f007 fc47 	bl	8012058 <HAL_RTCEx_WakeUpTimerIRQHandler>

  // 2) Tamper EXTI 라인(21) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_TAMPER_EVENT;
 800a7ca:	2380      	movs	r3, #128	@ 0x80
 800a7cc:	059b      	lsls	r3, r3, #22
 800a7ce:	60eb      	str	r3, [r5, #12]
  HAL_RTCEx_TamperIRQHandler(&hrtc);
 800a7d0:	0020      	movs	r0, r4
 800a7d2:	f007 fc5b 	bl	801208c <HAL_RTCEx_TamperIRQHandler>
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	200009f8 	.word	0x200009f8
 800a7dc:	40021800 	.word	0x40021800

0800a7e0 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 800a7e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800a7e6:	4802      	ldr	r0, [pc, #8]	@ (800a7f0 <USB_DRD_FS_IRQHandler+0xc>)
 800a7e8:	f005 fbe4 	bl	800ffb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	20000564 	.word	0x20000564

0800a7f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a7f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800a7f6:	4802      	ldr	r0, [pc, #8]	@ (800a800 <DMA1_Channel1_IRQHandler+0xc>)
 800a7f8:	f004 fd5e 	bl	800f2b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	46c0      	nop			@ (mov r8, r8)
 800a800:	20000934 	.word	0x20000934

0800a804 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a804:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800a806:	4802      	ldr	r0, [pc, #8]	@ (800a810 <DMA1_Channel2_3_IRQHandler+0xc>)
 800a808:	f004 fd56 	bl	800f2b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	200008d4 	.word	0x200008d4

0800a814 <ADC_COMP1_2_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC_COMP1_2_IRQHandler(void)
{
 800a814:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 0 */

  /* USER CODE END ADC_COMP1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a816:	4803      	ldr	r0, [pc, #12]	@ (800a824 <ADC_COMP1_2_IRQHandler+0x10>)
 800a818:	f003 fec8 	bl	800e5ac <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 800a81c:	4802      	ldr	r0, [pc, #8]	@ (800a828 <ADC_COMP1_2_IRQHandler+0x14>)
 800a81e:	f004 fbd7 	bl	800efd0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 1 */

  /* USER CODE END ADC_COMP1_2_IRQn 1 */
}
 800a822:	bd10      	pop	{r4, pc}
 800a824:	20000aec 	.word	0x20000aec
 800a828:	20000abc 	.word	0x20000abc

0800a82c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800a82c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a82e:	4802      	ldr	r0, [pc, #8]	@ (800a838 <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 800a830:	f005 f9e9 	bl	800fc06 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800a834:	bd10      	pop	{r4, pc}
 800a836:	46c0      	nop			@ (mov r8, r8)
 800a838:	20000a28 	.word	0x20000a28

0800a83c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800a83c:	2001      	movs	r0, #1
 800a83e:	4770      	bx	lr

0800a840 <_kill>:

int _kill(int pid, int sig)
{
 800a840:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a842:	f00f fee1 	bl	801a608 <__errno>
 800a846:	2316      	movs	r3, #22
 800a848:	6003      	str	r3, [r0, #0]
  return -1;
 800a84a:	2001      	movs	r0, #1
}
 800a84c:	4240      	negs	r0, r0
 800a84e:	bd10      	pop	{r4, pc}

0800a850 <_exit>:

void _exit (int status)
{
 800a850:	b510      	push	{r4, lr}
  errno = EINVAL;
 800a852:	f00f fed9 	bl	801a608 <__errno>
 800a856:	2316      	movs	r3, #22
 800a858:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800a85a:	e7fe      	b.n	800a85a <_exit+0xa>

0800a85c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	000e      	movs	r6, r1
 800a860:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a862:	2500      	movs	r5, #0
 800a864:	42a5      	cmp	r5, r4
 800a866:	db01      	blt.n	800a86c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800a868:	0020      	movs	r0, r4
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800a86c:	e000      	b.n	800a870 <_read+0x14>
 800a86e:	bf00      	nop
 800a870:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a872:	3501      	adds	r5, #1
 800a874:	e7f6      	b.n	800a864 <_read+0x8>

0800a876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a876:	b570      	push	{r4, r5, r6, lr}
 800a878:	000e      	movs	r6, r1
 800a87a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a87c:	2500      	movs	r5, #0
 800a87e:	42a5      	cmp	r5, r4
 800a880:	db01      	blt.n	800a886 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800a882:	0020      	movs	r0, r4
 800a884:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800a886:	5d70      	ldrb	r0, [r6, r5]
 800a888:	f7fc fdb4 	bl	80073f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a88c:	3501      	adds	r5, #1
 800a88e:	e7f6      	b.n	800a87e <_write+0x8>

0800a890 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800a890:	2001      	movs	r0, #1
}
 800a892:	4240      	negs	r0, r0
 800a894:	4770      	bx	lr

0800a896 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800a896:	2380      	movs	r3, #128	@ 0x80
 800a898:	019b      	lsls	r3, r3, #6
  return 0;
}
 800a89a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800a89c:	604b      	str	r3, [r1, #4]
}
 800a89e:	4770      	bx	lr

0800a8a0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	4770      	bx	lr

0800a8a4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	4770      	bx	lr

0800a8a8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a8a8:	490b      	ldr	r1, [pc, #44]	@ (800a8d8 <_sbrk+0x30>)
 800a8aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a8dc <_sbrk+0x34>)
{
 800a8ac:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a8ae:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a8b0:	490b      	ldr	r1, [pc, #44]	@ (800a8e0 <_sbrk+0x38>)
{
 800a8b2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800a8b4:	6808      	ldr	r0, [r1, #0]
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d101      	bne.n	800a8be <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800a8ba:	480a      	ldr	r0, [pc, #40]	@ (800a8e4 <_sbrk+0x3c>)
 800a8bc:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a8be:	6808      	ldr	r0, [r1, #0]
 800a8c0:	18c3      	adds	r3, r0, r3
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d906      	bls.n	800a8d4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800a8c6:	f00f fe9f 	bl	801a608 <__errno>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800a8d2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800a8d4:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800a8d6:	e7fc      	b.n	800a8d2 <_sbrk+0x2a>
 800a8d8:	00000400 	.word	0x00000400
 800a8dc:	2000a000 	.word	0x2000a000
 800a8e0:	20002c5c 	.word	0x20002c5c
 800a8e4:	20006800 	.word	0x20006800

0800a8e8 <SystemInit>:
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a8e8:	2280      	movs	r2, #128	@ 0x80
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a914 <SystemInit+0x2c>)
 800a8ec:	0512      	lsls	r2, r2, #20
 800a8ee:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800a8f0:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <SystemInit+0x30>)
 800a8f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a91c <SystemInit+0x34>)
 800a8f4:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
  tmp_optr = FLASH->OPTR;
 800a8f6:	6a13      	ldr	r3, [r2, #32]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800a8f8:	03c9      	lsls	r1, r1, #15
 800a8fa:	d509      	bpl.n	800a910 <SystemInit+0x28>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2bcc      	cmp	r3, #204	@ 0xcc
 800a900:	d006      	beq.n	800a910 <SystemInit+0x28>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800a902:	2baa      	cmp	r3, #170	@ 0xaa
 800a904:	d004      	beq.n	800a910 <SystemInit+0x28>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800a906:	2380      	movs	r3, #128	@ 0x80
 800a908:	6811      	ldr	r1, [r2, #0]
 800a90a:	02db      	lsls	r3, r3, #11
 800a90c:	430b      	orrs	r3, r1
 800a90e:	6013      	str	r3, [r2, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800a910:	4770      	bx	lr
 800a912:	46c0      	nop			@ (mov r8, r8)
 800a914:	e000ed00 	.word	0xe000ed00
 800a918:	40022004 	.word	0x40022004
 800a91c:	40022000 	.word	0x40022000

0800a920 <csv_device_info>:
}

static void csv_device_info(const DeviceSettings *dev_setting) {

	log_csv.device_info.device_code = dev_setting->device_code;
	log_csv.device_info.model_code = dev_setting->model;
 800a920:	0003      	movs	r3, r0
static void csv_device_info(const DeviceSettings *dev_setting) {
 800a922:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a924:	4c3e      	ldr	r4, [pc, #248]	@ (800aa20 <csv_device_info+0x100>)
	log_csv.device_info.model_code = dev_setting->model;
 800a926:	3310      	adds	r3, #16
static void csv_device_info(const DeviceSettings *dev_setting) {
 800a928:	44a5      	add	sp, r4
	log_csv.device_info.device_code = dev_setting->device_code;
 800a92a:	4c3e      	ldr	r4, [pc, #248]	@ (800aa24 <csv_device_info+0x104>)
	log_csv.device_info.model_code = dev_setting->model;
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	60e3      	str	r3, [r4, #12]
	log_csv.device_info.firmware_version = dev_setting->firmware_ver;
 800a930:	3321      	adds	r3, #33	@ 0x21
 800a932:	9306      	str	r3, [sp, #24]
 800a934:	60a3      	str	r3, [r4, #8]
	log_csv.device_info.serial_number = dev_setting->serial;
 800a936:	3b11      	subs	r3, #17
	log_csv.device_info.device_code = dev_setting->device_code;
 800a938:	6020      	str	r0, [r4, #0]
	log_csv.device_info.serial_number = dev_setting->serial;
 800a93a:	9307      	str	r3, [sp, #28]
 800a93c:	6123      	str	r3, [r4, #16]

	// sensor_type 값에 따라 probe_type 문자열 설정
	if (dev_setting->sensor_type == 1)
 800a93e:	3030      	adds	r0, #48	@ 0x30
 800a940:	7802      	ldrb	r2, [r0, #0]
 800a942:	4b39      	ldr	r3, [pc, #228]	@ (800aa28 <csv_device_info+0x108>)
 800a944:	2a01      	cmp	r2, #1
 800a946:	d003      	beq.n	800a950 <csv_device_info+0x30>
	    log_csv.device_info.probe_type = "Temperature and Radiation (interval)";
	else if (dev_setting->sensor_type == 2)
 800a948:	4b38      	ldr	r3, [pc, #224]	@ (800aa2c <csv_device_info+0x10c>)
 800a94a:	2a02      	cmp	r2, #2
 800a94c:	d000      	beq.n	800a950 <csv_device_info+0x30>
 800a94e:	4b38      	ldr	r3, [pc, #224]	@ (800aa30 <csv_device_info+0x110>)
	    log_csv.device_info.probe_type = "Temperature Only";
	else
	    log_csv.device_info.probe_type = "Unknown Sensor Type";

    char tmp_buff[512] = {0};
 800a950:	2680      	movs	r6, #128	@ 0x80
 800a952:	00b6      	lsls	r6, r6, #2
 800a954:	0032      	movs	r2, r6
 800a956:	2100      	movs	r1, #0
 800a958:	a808      	add	r0, sp, #32
	    log_csv.device_info.probe_type = "Temperature and Radiation (interval)";
 800a95a:	6063      	str	r3, [r4, #4]
    char tmp_buff[512] = {0};
 800a95c:	f00f fdca 	bl	801a4f4 <memset>
    const int buffer_size = sizeof(tmp_buff);

    const int label_width = 20;

    // 1. Add the static header to the buffer
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a960:	4934      	ldr	r1, [pc, #208]	@ (800aa34 <csv_device_info+0x114>)
 800a962:	a808      	add	r0, sp, #32
 800a964:	f00f fe7d 	bl	801a662 <strcpy>
                       "Device Information\n"
                       "************************************************\n");

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a968:	2514      	movs	r5, #20
 800a96a:	21de      	movs	r1, #222	@ 0xde
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	4a32      	ldr	r2, [pc, #200]	@ (800aa38 <csv_device_info+0x118>)
 800a970:	9302      	str	r3, [sp, #8]
 800a972:	4b32      	ldr	r3, [pc, #200]	@ (800aa3c <csv_device_info+0x11c>)
 800a974:	9501      	str	r5, [sp, #4]
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	0049      	lsls	r1, r1, #1
 800a97a:	002b      	movs	r3, r5
 800a97c:	a819      	add	r0, sp, #100	@ 0x64
 800a97e:	9204      	str	r2, [sp, #16]
 800a980:	f00f fc66 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Device code", label_width, log_csv.device_info.device_code);

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a984:	ab08      	add	r3, sp, #32
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a986:	3044      	adds	r0, #68	@ 0x44
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a988:	1a31      	subs	r1, r6, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a98a:	0007      	movs	r7, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a98c:	1818      	adds	r0, r3, r0
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	9302      	str	r3, [sp, #8]
 800a994:	2328      	movs	r3, #40	@ 0x28
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	4b29      	ldr	r3, [pc, #164]	@ (800aa40 <csv_device_info+0x120>)
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	002b      	movs	r3, r5
 800a99e:	f00f fc57 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Probe Type", 40, log_csv.device_info.probe_type);

    log_csv.device_info.firmware_version = dev_setting-> firmware_ver;
 800a9a2:	9b06      	ldr	r3, [sp, #24]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a9a4:	183f      	adds	r7, r7, r0
    log_csv.device_info.firmware_version = dev_setting-> firmware_ver;
 800a9a6:	60a3      	str	r3, [r4, #8]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a9a8:	ab08      	add	r3, sp, #32
 800a9aa:	19d8      	adds	r0, r3, r7
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	1bf1      	subs	r1, r6, r7
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	4b24      	ldr	r3, [pc, #144]	@ (800aa44 <csv_device_info+0x124>)
 800a9b4:	9a04      	ldr	r2, [sp, #16]
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	9501      	str	r5, [sp, #4]
 800a9ba:	002b      	movs	r3, r5
 800a9bc:	f00f fc48 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Firmware Version", label_width, log_csv.device_info.firmware_version);

    log_csv.device_info.model_code = dev_setting-> model;
 800a9c0:	9b05      	ldr	r3, [sp, #20]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a9c2:	183f      	adds	r7, r7, r0
    log_csv.device_info.model_code = dev_setting-> model;
 800a9c4:	60e3      	str	r3, [r4, #12]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a9c6:	ab08      	add	r3, sp, #32
 800a9c8:	19d8      	adds	r0, r3, r7
 800a9ca:	9b05      	ldr	r3, [sp, #20]
 800a9cc:	1bf1      	subs	r1, r6, r7
 800a9ce:	9302      	str	r3, [sp, #8]
 800a9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa48 <csv_device_info+0x128>)
 800a9d2:	9a04      	ldr	r2, [sp, #16]
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	9501      	str	r5, [sp, #4]
 800a9d8:	002b      	movs	r3, r5
 800a9da:	f00f fc39 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Model Code", label_width, log_csv.device_info.model_code);

    log_csv.device_info.serial_number = dev_setting-> serial;
 800a9de:	9b07      	ldr	r3, [sp, #28]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a9e0:	183f      	adds	r7, r7, r0
    log_csv.device_info.serial_number = dev_setting-> serial;
 800a9e2:	6123      	str	r3, [r4, #16]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a9e4:	ab08      	add	r3, sp, #32
 800a9e6:	19d8      	adds	r0, r3, r7
 800a9e8:	9b07      	ldr	r3, [sp, #28]
 800a9ea:	1bf1      	subs	r1, r6, r7
 800a9ec:	9302      	str	r3, [sp, #8]
 800a9ee:	4b17      	ldr	r3, [pc, #92]	@ (800aa4c <csv_device_info+0x12c>)
 800a9f0:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <csv_device_info+0x130>)
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	9501      	str	r5, [sp, #4]
 800a9f6:	002b      	movs	r3, r5
 800a9f8:	f00f fc2a 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n\n", label_width, "Serial Number", label_width, log_csv.device_info.serial_number);
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800a9fc:	23c2      	movs	r3, #194	@ 0xc2
 800a9fe:	22c4      	movs	r2, #196	@ 0xc4
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	58e3      	ldr	r3, [r4, r3]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aa04:	183f      	adds	r7, r7, r0
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800aa06:	3301      	adds	r3, #1
 800aa08:	19db      	adds	r3, r3, r7
 800aa0a:	0052      	lsls	r2, r2, #1

    fatfs_write_str(&csv_file, tmp_buff);
 800aa0c:	4911      	ldr	r1, [pc, #68]	@ (800aa54 <csv_device_info+0x134>)
 800aa0e:	a808      	add	r0, sp, #32
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800aa10:	50a3      	str	r3, [r4, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800aa12:	f00b f841 	bl	8015a98 <f_puts>
}
 800aa16:	2389      	movs	r3, #137	@ 0x89
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	449d      	add	sp, r3
 800aa1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa1e:	46c0      	nop			@ (mov r8, r8)
 800aa20:	fffffddc 	.word	0xfffffddc
 800aa24:	20000058 	.word	0x20000058
 800aa28:	0801eaff 	.word	0x0801eaff
 800aa2c:	0801eb24 	.word	0x0801eb24
 800aa30:	0801eb35 	.word	0x0801eb35
 800aa34:	0801eb49 	.word	0x0801eb49
 800aa38:	0801eb8e 	.word	0x0801eb8e
 800aa3c:	0801eb9a 	.word	0x0801eb9a
 800aa40:	0801eba6 	.word	0x0801eba6
 800aa44:	0801ebb1 	.word	0x0801ebb1
 800aa48:	0801ebc2 	.word	0x0801ebc2
 800aa4c:	0801ebda 	.word	0x0801ebda
 800aa50:	0801ebcd 	.word	0x0801ebcd
 800aa54:	20002c60 	.word	0x20002c60

0800aa58 <csv_trip_info>:

static void csv_trip_info(const DeviceSettings *dev_setting) {
 800aa58:	b570      	push	{r4, r5, r6, lr}
	log_csv.trip_info.trip_id = dev_setting->trip_code;
	log_csv.trip_info.description = dev_setting->trip_desc;

    char tmp_buff[256] = {0};
 800aa5a:	2280      	movs	r2, #128	@ 0x80
	log_csv.trip_info.description = dev_setting->trip_desc;
 800aa5c:	0006      	movs	r6, r0
static void csv_trip_info(const DeviceSettings *dev_setting) {
 800aa5e:	0004      	movs	r4, r0
 800aa60:	b0c4      	sub	sp, #272	@ 0x110
	log_csv.trip_info.description = dev_setting->trip_desc;
 800aa62:	4d1b      	ldr	r5, [pc, #108]	@ (800aad0 <csv_trip_info+0x78>)
 800aa64:	363b      	adds	r6, #59	@ 0x3b
    char tmp_buff[256] = {0};
 800aa66:	0052      	lsls	r2, r2, #1
 800aa68:	2100      	movs	r1, #0
 800aa6a:	a804      	add	r0, sp, #16
	log_csv.trip_info.description = dev_setting->trip_desc;
 800aa6c:	61ae      	str	r6, [r5, #24]
    char tmp_buff[256] = {0};
 800aa6e:	f00f fd41 	bl	801a4f4 <memset>
    int offset = 0;
    const int buffer_size = sizeof(tmp_buff);
    const int label_width = 20;

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aa72:	4918      	ldr	r1, [pc, #96]	@ (800aad4 <csv_trip_info+0x7c>)
 800aa74:	a804      	add	r0, sp, #16
 800aa76:	f00f fdf4 	bl	801a662 <strcpy>
                    "Trip Information\n"
                    "************************************************\n");
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800aa7a:	0023      	movs	r3, r4
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aa7c:	2052      	movs	r0, #82	@ 0x52
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800aa7e:	3339      	adds	r3, #57	@ 0x39
 800aa80:	343a      	adds	r4, #58	@ 0x3a
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	7823      	ldrb	r3, [r4, #0]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aa86:	21be      	movs	r1, #190	@ 0xbe
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	616b      	str	r3, [r5, #20]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	4b11      	ldr	r3, [pc, #68]	@ (800aad8 <csv_trip_info+0x80>)
 800aa92:	4a12      	ldr	r2, [pc, #72]	@ (800aadc <csv_trip_info+0x84>)
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	4468      	add	r0, sp
 800aa98:	2314      	movs	r3, #20
 800aa9a:	f00f fbd9 	bl	801a250 <sniprintf>
        "%-*s: %07ld\n", label_width, "Trip Id", log_csv.trip_info.trip_id);

    log_csv.trip_info.description = dev_setting -> trip_desc;
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aa9e:	2314      	movs	r3, #20
 800aaa0:	490f      	ldr	r1, [pc, #60]	@ (800aae0 <csv_trip_info+0x88>)
    log_csv.trip_info.description = dev_setting -> trip_desc;
 800aaa2:	61ae      	str	r6, [r5, #24]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aaa4:	4a0f      	ldr	r2, [pc, #60]	@ (800aae4 <csv_trip_info+0x8c>)
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	9100      	str	r1, [sp, #0]
 800aaaa:	9602      	str	r6, [sp, #8]
 800aaac:	21a0      	movs	r1, #160	@ 0xa0
 800aaae:	a81c      	add	r0, sp, #112	@ 0x70
 800aab0:	f00f fbce 	bl	801a250 <sniprintf>
        "%-*s: %-*s\n", label_width, "Description", label_width, log_csv.trip_info.description);
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800aab4:	23c4      	movs	r3, #196	@ 0xc4
 800aab6:	22c6      	movs	r2, #198	@ 0xc6
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	58eb      	ldr	r3, [r5, r3]
 800aabc:	0052      	lsls	r2, r2, #1
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800aabe:	181b      	adds	r3, r3, r0
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800aac0:	3361      	adds	r3, #97	@ 0x61

    fatfs_write_str(&csv_file, tmp_buff);
 800aac2:	4909      	ldr	r1, [pc, #36]	@ (800aae8 <csv_trip_info+0x90>)
 800aac4:	a804      	add	r0, sp, #16
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800aac6:	50ab      	str	r3, [r5, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800aac8:	f00a ffe6 	bl	8015a98 <f_puts>
}
 800aacc:	b044      	add	sp, #272	@ 0x110
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	20000058 	.word	0x20000058
 800aad4:	0801ebe8 	.word	0x0801ebe8
 800aad8:	0801ec38 	.word	0x0801ec38
 800aadc:	0801ec2b 	.word	0x0801ec2b
 800aae0:	0801ec40 	.word	0x0801ec40
 800aae4:	0801eb8e 	.word	0x0801eb8e
 800aae8:	20002c60 	.word	0x20002c60

0800aaec <seconds_to_hms_string.part.0>:
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaee:	000d      	movs	r5, r1
    uint32_t hours = total_secs / 3600;
 800aaf0:	21e1      	movs	r1, #225	@ 0xe1
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800aaf2:	b085      	sub	sp, #20
    uint32_t hours = total_secs / 3600;
 800aaf4:	0109      	lsls	r1, r1, #4
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800aaf6:	0016      	movs	r6, r2
 800aaf8:	0004      	movs	r4, r0
    uint32_t hours = total_secs / 3600;
 800aafa:	f7f5 fb35 	bl	8000168 <__udivsi3>
    uint32_t seconds = total_secs % 60;
 800aafe:	213c      	movs	r1, #60	@ 0x3c
    uint32_t hours = total_secs / 3600;
 800ab00:	9003      	str	r0, [sp, #12]
    uint32_t seconds = total_secs % 60;
 800ab02:	0020      	movs	r0, r4
 800ab04:	f7f5 fbb6 	bl	8000274 <__aeabi_uidivmod>
    snprintf(buffer, buffer_size, "%02luH %02luM %02luS", hours, minutes, seconds);
 800ab08:	9101      	str	r1, [sp, #4]
    uint32_t minutes = (total_secs % 3600) / 60;
 800ab0a:	21e1      	movs	r1, #225	@ 0xe1
 800ab0c:	0020      	movs	r0, r4
 800ab0e:	0109      	lsls	r1, r1, #4
 800ab10:	f7f5 fbb0 	bl	8000274 <__aeabi_uidivmod>
 800ab14:	0008      	movs	r0, r1
 800ab16:	213c      	movs	r1, #60	@ 0x3c
 800ab18:	f7f5 fb26 	bl	8000168 <__udivsi3>
    snprintf(buffer, buffer_size, "%02luH %02luM %02luS", hours, minutes, seconds);
 800ab1c:	4f04      	ldr	r7, [pc, #16]	@ (800ab30 <seconds_to_hms_string.part.0+0x44>)
 800ab1e:	9000      	str	r0, [sp, #0]
 800ab20:	003a      	movs	r2, r7
 800ab22:	0031      	movs	r1, r6
 800ab24:	0028      	movs	r0, r5
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	f00f fb92 	bl	801a250 <sniprintf>
}
 800ab2c:	b005      	add	sp, #20
 800ab2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab30:	0801ec4c 	.word	0x0801ec4c

0800ab34 <csv_conf_info>:

static void csv_conf_info(const DeviceSettings *dev_setting) {
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ab34:	0003      	movs	r3, r0
static void csv_conf_info(const DeviceSettings *dev_setting) {
 800ab36:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ab38:	3375      	adds	r3, #117	@ 0x75
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	4c62      	ldr	r4, [pc, #392]	@ (800accc <csv_conf_info+0x198>)
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	4313      	orrs	r3, r2
 800ab46:	0002      	movs	r2, r0
 800ab48:	3277      	adds	r2, #119	@ 0x77
 800ab4a:	7812      	ldrb	r2, [r2, #0]
static void csv_conf_info(const DeviceSettings *dev_setting) {
 800ab4c:	b0d1      	sub	sp, #324	@ 0x144
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ab4e:	0412      	lsls	r2, r2, #16
 800ab50:	431a      	orrs	r2, r3
 800ab52:	0003      	movs	r3, r0
 800ab54:	3378      	adds	r3, #120	@ 0x78
 800ab56:	781b      	ldrb	r3, [r3, #0]
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ab58:	0007      	movs	r7, r0
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800ab5a:	061b      	lsls	r3, r3, #24
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	61e3      	str	r3, [r4, #28]
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ab60:	0003      	movs	r3, r0
 800ab62:	3771      	adds	r7, #113	@ 0x71
 800ab64:	3372      	adds	r3, #114	@ 0x72
 800ab66:	783a      	ldrb	r2, [r7, #0]
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
                       "************************************************\n");
    char tmp[16];

    seconds_to_hms_string(log_csv.config_info.temp_interval_sec, tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ab6c:	250f      	movs	r5, #15
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	4313      	orrs	r3, r2
 800ab72:	0002      	movs	r2, r0
 800ab74:	3273      	adds	r2, #115	@ 0x73
 800ab76:	9206      	str	r2, [sp, #24]
 800ab78:	7812      	ldrb	r2, [r2, #0]
    char tmp_buff[256] = {0};
 800ab7a:	2100      	movs	r1, #0
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800ab7c:	0412      	lsls	r2, r2, #16
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	0003      	movs	r3, r0
 800ab82:	3374      	adds	r3, #116	@ 0x74
 800ab84:	9307      	str	r3, [sp, #28]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	061b      	lsls	r3, r3, #24
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	6223      	str	r3, [r4, #32]
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800ab8e:	0003      	movs	r3, r0
 800ab90:	3364      	adds	r3, #100	@ 0x64
 800ab92:	9308      	str	r3, [sp, #32]
 800ab94:	781a      	ldrb	r2, [r3, #0]
 800ab96:	3301      	adds	r3, #1
 800ab98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	0002      	movs	r2, r0
 800aba2:	3266      	adds	r2, #102	@ 0x66
 800aba4:	920a      	str	r2, [sp, #40]	@ 0x28
 800aba6:	7812      	ldrb	r2, [r2, #0]
 800aba8:	3067      	adds	r0, #103	@ 0x67
 800abaa:	900b      	str	r0, [sp, #44]	@ 0x2c
 800abac:	0412      	lsls	r2, r2, #16
 800abae:	431a      	orrs	r2, r3
 800abb0:	7803      	ldrb	r3, [r0, #0]
    char tmp_buff[256] = {0};
 800abb2:	a810      	add	r0, sp, #64	@ 0x40
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800abb4:	061b      	lsls	r3, r3, #24
 800abb6:	4313      	orrs	r3, r2
    char tmp_buff[256] = {0};
 800abb8:	2280      	movs	r2, #128	@ 0x80
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800abba:	62e3      	str	r3, [r4, #44]	@ 0x2c
	log_csv.config_info.start_mode = "Manual";
 800abbc:	4b44      	ldr	r3, [pc, #272]	@ (800acd0 <csv_conf_info+0x19c>)
    char tmp_buff[256] = {0};
 800abbe:	0052      	lsls	r2, r2, #1
	log_csv.config_info.start_mode = "Manual";
 800abc0:	6263      	str	r3, [r4, #36]	@ 0x24
	log_csv.config_info.stop_mode = "Manual & Software";
 800abc2:	4b44      	ldr	r3, [pc, #272]	@ (800acd4 <csv_conf_info+0x1a0>)
 800abc4:	62a3      	str	r3, [r4, #40]	@ 0x28
    char tmp_buff[256] = {0};
 800abc6:	f00f fc95 	bl	801a4f4 <memset>
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800abca:	4943      	ldr	r1, [pc, #268]	@ (800acd8 <csv_conf_info+0x1a4>)
 800abcc:	a810      	add	r0, sp, #64	@ 0x40
 800abce:	f00f fd48 	bl	801a662 <strcpy>
    if (buffer == NULL || buffer_size == 0) {
 800abd2:	69e0      	ldr	r0, [r4, #28]
 800abd4:	a90c      	add	r1, sp, #48	@ 0x30
 800abd6:	2210      	movs	r2, #16
 800abd8:	f7ff ff88 	bl	800aaec <seconds_to_hms_string.part.0>
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800abdc:	ab0c      	add	r3, sp, #48	@ 0x30
 800abde:	4e3f      	ldr	r6, [pc, #252]	@ (800acdc <csv_conf_info+0x1a8>)
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	4b3f      	ldr	r3, [pc, #252]	@ (800ace0 <csv_conf_info+0x1ac>)
 800abe4:	0032      	movs	r2, r6
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	21b4      	movs	r1, #180	@ 0xb4
 800abea:	002b      	movs	r3, r5
 800abec:	9501      	str	r5, [sp, #4]
 800abee:	a823      	add	r0, sp, #140	@ 0x8c
 800abf0:	f00f fb2e 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Temp Log Interval",
                       label_width , tmp);

    log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800abf4:	9a05      	ldr	r2, [sp, #20]
 800abf6:	783b      	ldrb	r3, [r7, #0]
 800abf8:	7812      	ldrb	r2, [r2, #0]
 800abfa:	a90c      	add	r1, sp, #48	@ 0x30
 800abfc:	0212      	lsls	r2, r2, #8
 800abfe:	431a      	orrs	r2, r3
 800ac00:	9b06      	ldr	r3, [sp, #24]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	041b      	lsls	r3, r3, #16
 800ac06:	4313      	orrs	r3, r2
 800ac08:	9a07      	ldr	r2, [sp, #28]
 800ac0a:	7810      	ldrb	r0, [r2, #0]
 800ac0c:	2210      	movs	r2, #16
 800ac0e:	0600      	lsls	r0, r0, #24
 800ac10:	4318      	orrs	r0, r3
 800ac12:	6220      	str	r0, [r4, #32]
    if (buffer == NULL || buffer_size == 0) {
 800ac14:	f7ff ff6a 	bl	800aaec <seconds_to_hms_string.part.0>
    seconds_to_hms_string(log_csv.config_info.rad_interval_sec, tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac18:	208f      	movs	r0, #143	@ 0x8f
 800ac1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac1c:	9302      	str	r3, [sp, #8]
 800ac1e:	4b31      	ldr	r3, [pc, #196]	@ (800ace4 <csv_conf_info+0x1b0>)
 800ac20:	0032      	movs	r2, r6
 800ac22:	ae08      	add	r6, sp, #32
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	2191      	movs	r1, #145	@ 0x91
 800ac28:	002b      	movs	r3, r5
 800ac2a:	9501      	str	r5, [sp, #4]
 800ac2c:	1980      	adds	r0, r0, r6
 800ac2e:	f00f fb0f 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n", label_width, "Rad Log Interval",
                       label_width , tmp);


    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800ac32:	20b1      	movs	r0, #177	@ 0xb1
 800ac34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ac36:	4f2c      	ldr	r7, [pc, #176]	@ (800ace8 <csv_conf_info+0x1b4>)
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	4b2c      	ldr	r3, [pc, #176]	@ (800acec <csv_conf_info+0x1b8>)
 800ac3c:	003a      	movs	r2, r7
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	216f      	movs	r1, #111	@ 0x6f
 800ac42:	002b      	movs	r3, r5
 800ac44:	1980      	adds	r0, r0, r6
 800ac46:	f00f fb03 	bl	801a250 <sniprintf>
                       "%-*s: %-20s\n", label_width, "Start Mode",
                       log_csv.config_info.start_mode);

    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ac4a:	2380      	movs	r3, #128	@ 0x80
    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800ac4c:	3091      	adds	r0, #145	@ 0x91
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	1a19      	subs	r1, r3, r0
 800ac52:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac54:	aa10      	add	r2, sp, #64	@ 0x40
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	4b25      	ldr	r3, [pc, #148]	@ (800acf0 <csv_conf_info+0x1bc>)
    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800ac5a:	0006      	movs	r6, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	1810      	adds	r0, r2, r0
 800ac60:	002b      	movs	r3, r5
 800ac62:	003a      	movs	r2, r7
 800ac64:	f00f faf4 	bl	801a250 <sniprintf>
                       "%-*s: %-20s\n", label_width, "Stop Mode",
                       log_csv.config_info.stop_mode);

    log_csv.config_info.start_delay_sec = (unsigned long)(dev_setting ->start_delay);
 800ac68:	9a08      	ldr	r2, [sp, #32]
 800ac6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac6c:	7813      	ldrb	r3, [r2, #0]
 800ac6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800ac70:	1836      	adds	r6, r6, r0
    log_csv.config_info.start_delay_sec = (unsigned long)(dev_setting ->start_delay);
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	0212      	lsls	r2, r2, #8
 800ac76:	431a      	orrs	r2, r3
 800ac78:	780b      	ldrb	r3, [r1, #0]
 800ac7a:	a90c      	add	r1, sp, #48	@ 0x30
 800ac7c:	041b      	lsls	r3, r3, #16
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac82:	7810      	ldrb	r0, [r2, #0]
 800ac84:	2210      	movs	r2, #16
 800ac86:	0600      	lsls	r0, r0, #24
 800ac88:	4318      	orrs	r0, r3
 800ac8a:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (buffer == NULL || buffer_size == 0) {
 800ac8c:	f7ff ff2e 	bl	800aaec <seconds_to_hms_string.part.0>
    seconds_to_hms_string(log_csv.config_info.start_delay_sec,
                           tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800ac90:	2380      	movs	r3, #128	@ 0x80
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	1b99      	subs	r1, r3, r6
 800ac96:	ab10      	add	r3, sp, #64	@ 0x40
 800ac98:	1998      	adds	r0, r3, r6
 800ac9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	4b15      	ldr	r3, [pc, #84]	@ (800acf4 <csv_conf_info+0x1c0>)
 800aca0:	4a15      	ldr	r2, [pc, #84]	@ (800acf8 <csv_conf_info+0x1c4>)
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	9501      	str	r5, [sp, #4]
 800aca6:	002b      	movs	r3, r5
 800aca8:	f00f fad2 	bl	801a250 <sniprintf>
                       "%-*s: %-*s\n\n", label_width, "Start Delay",
                       label_width, tmp);

    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800acac:	23c6      	movs	r3, #198	@ 0xc6
 800acae:	22c8      	movs	r2, #200	@ 0xc8
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	58e3      	ldr	r3, [r4, r3]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800acb4:	1836      	adds	r6, r6, r0
    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800acb6:	3301      	adds	r3, #1
 800acb8:	199b      	adds	r3, r3, r6
 800acba:	0052      	lsls	r2, r2, #1
    fatfs_write_str(&csv_file, tmp_buff);
 800acbc:	490f      	ldr	r1, [pc, #60]	@ (800acfc <csv_conf_info+0x1c8>)
 800acbe:	a810      	add	r0, sp, #64	@ 0x40
    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800acc0:	50a3      	str	r3, [r4, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800acc2:	f00a fee9 	bl	8015a98 <f_puts>
}
 800acc6:	b051      	add	sp, #324	@ 0x144
 800acc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acca:	46c0      	nop			@ (mov r8, r8)
 800accc:	20000058 	.word	0x20000058
 800acd0:	0801ec61 	.word	0x0801ec61
 800acd4:	0801ec68 	.word	0x0801ec68
 800acd8:	0801ec7a 	.word	0x0801ec7a
 800acdc:	0801eb8e 	.word	0x0801eb8e
 800ace0:	0801ecc7 	.word	0x0801ecc7
 800ace4:	0801ecd9 	.word	0x0801ecd9
 800ace8:	0801ecea 	.word	0x0801ecea
 800acec:	0801ecf7 	.word	0x0801ecf7
 800acf0:	0801ed02 	.word	0x0801ed02
 800acf4:	0801ed0c 	.word	0x0801ed0c
 800acf8:	0801ebcd 	.word	0x0801ebcd
 800acfc:	20002c60 	.word	0x20002c60

0800ad00 <seconds_to_dhms_string_long.part.0>:
void seconds_to_dhms_string_long(uint32_t total_seconds, char *buffer, size_t buffer_size)
 800ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad02:	000d      	movs	r5, r1
 800ad04:	b087      	sub	sp, #28
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800ad06:	4914      	ldr	r1, [pc, #80]	@ (800ad58 <seconds_to_dhms_string_long.part.0+0x58>)
void seconds_to_dhms_string_long(uint32_t total_seconds, char *buffer, size_t buffer_size)
 800ad08:	0016      	movs	r6, r2
 800ad0a:	0004      	movs	r4, r0
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800ad0c:	f7f5 fa2c 	bl	8000168 <__udivsi3>
    unsigned int seconds = total_seconds % 60;                 // 남은 초
 800ad10:	213c      	movs	r1, #60	@ 0x3c
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800ad12:	9005      	str	r0, [sp, #20]
    unsigned int seconds = total_seconds % 60;                 // 남은 초
 800ad14:	0020      	movs	r0, r4
 800ad16:	f7f5 faad 	bl	8000274 <__aeabi_uidivmod>
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800ad1a:	9102      	str	r1, [sp, #8]
    unsigned int minutes = (total_seconds % 3600) / 60;        // 나머지에서 분 추출
 800ad1c:	21e1      	movs	r1, #225	@ 0xe1
 800ad1e:	0020      	movs	r0, r4
 800ad20:	0109      	lsls	r1, r1, #4
 800ad22:	f7f5 faa7 	bl	8000274 <__aeabi_uidivmod>
 800ad26:	0008      	movs	r0, r1
 800ad28:	213c      	movs	r1, #60	@ 0x3c
 800ad2a:	f7f5 fa1d 	bl	8000168 <__udivsi3>
    unsigned int hours   = (total_seconds % 86400) / 3600;     // 나머지에서 시간 추출
 800ad2e:	490a      	ldr	r1, [pc, #40]	@ (800ad58 <seconds_to_dhms_string_long.part.0+0x58>)
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800ad30:	9001      	str	r0, [sp, #4]
    unsigned int hours   = (total_seconds % 86400) / 3600;     // 나머지에서 시간 추출
 800ad32:	0020      	movs	r0, r4
 800ad34:	f7f5 fa9e 	bl	8000274 <__aeabi_uidivmod>
 800ad38:	0008      	movs	r0, r1
 800ad3a:	21e1      	movs	r1, #225	@ 0xe1
 800ad3c:	0109      	lsls	r1, r1, #4
 800ad3e:	f7f5 fa13 	bl	8000168 <__udivsi3>
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800ad42:	4f06      	ldr	r7, [pc, #24]	@ (800ad5c <seconds_to_dhms_string_long.part.0+0x5c>)
 800ad44:	9000      	str	r0, [sp, #0]
 800ad46:	003a      	movs	r2, r7
 800ad48:	0031      	movs	r1, r6
 800ad4a:	0028      	movs	r0, r5
 800ad4c:	9b05      	ldr	r3, [sp, #20]
 800ad4e:	f00f fa7f 	bl	801a250 <sniprintf>
}
 800ad52:	b007      	add	sp, #28
 800ad54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad56:	46c0      	nop			@ (mov r8, r8)
 800ad58:	00015180 	.word	0x00015180
 800ad5c:	0801ed18 	.word	0x0801ed18

0800ad60 <csv_alarm_summary_fill>:
}


static void csv_alarm_summary_fill(const DeviceSettings *dev_setting)
{
    char tmp_buff[768] = {0};
 800ad60:	22c0      	movs	r2, #192	@ 0xc0
{
 800ad62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad64:	4c8f      	ldr	r4, [pc, #572]	@ (800afa4 <csv_alarm_summary_fill+0x244>)
    char tmp_buff[768] = {0};
 800ad66:	2100      	movs	r1, #0
{
 800ad68:	44a5      	add	sp, r4
    char tmp_buff[768] = {0};
 800ad6a:	0092      	lsls	r2, r2, #2
{
 800ad6c:	0005      	movs	r5, r0
    char tmp_buff[768] = {0};
 800ad6e:	a81a      	add	r0, sp, #104	@ 0x68
 800ad70:	f00f fbc0 	bl	801a4f4 <memset>
    int offset = 0;
    const int fixed_block_size = sizeof(tmp_buff);

    printf("[CSV][AlarmFill] 알람 요약 데이터 채우기 시작\r\n");
 800ad74:	488c      	ldr	r0, [pc, #560]	@ (800afa8 <csv_alarm_summary_fill+0x248>)
 800ad76:	f00f fa61 	bl	801a23c <puts>

    // ★ 더 이상 zones[].threshold 에 /10.0f 로 저장하지 않습니다. (표시는 지역변수로 처리)

    // ── 본문(각 Zone 라인)만 tmp_buff에 누적 ──
    for (int i = 0; i < 6; i++) {
 800ad7a:	4b8c      	ldr	r3, [pc, #560]	@ (800afac <csv_alarm_summary_fill+0x24c>)
 800ad7c:	9307      	str	r3, [sp, #28]
 800ad7e:	2300      	movs	r3, #0
    int offset = 0;
 800ad80:	001e      	movs	r6, r3
    for (int i = 0; i < 6; i++) {
 800ad82:	9306      	str	r3, [sp, #24]
        char s_delay[32], s_tot[32];
        uint32_t delay_sec = 0;
        uint32_t violations = 0;

        switch (i) {
 800ad84:	9b06      	ldr	r3, [sp, #24]
            case 0: delay_sec = dev_setting->alarm_delay_rh1; violations = log_csv.logging_summary.RH1_alarm_count; break;
 800ad86:	002a      	movs	r2, r5
        switch (i) {
 800ad88:	1e58      	subs	r0, r3, #1
 800ad8a:	4b89      	ldr	r3, [pc, #548]	@ (800afb0 <csv_alarm_summary_fill+0x250>)
 800ad8c:	2804      	cmp	r0, #4
 800ad8e:	d804      	bhi.n	800ad9a <csv_alarm_summary_fill+0x3a>
 800ad90:	f7f5 f9cc 	bl	800012c <__gnu_thumb1_case_uqi>
 800ad94:	988f867d 	.word	0x988f867d
 800ad98:	a1          	.byte	0xa1
 800ad99:	00          	.byte	0x00
            case 0: delay_sec = dev_setting->alarm_delay_rh1; violations = log_csv.logging_summary.RH1_alarm_count; break;
 800ad9a:	0029      	movs	r1, r5
 800ad9c:	317b      	adds	r1, #123	@ 0x7b
 800ad9e:	780c      	ldrb	r4, [r1, #0]
 800ada0:	327a      	adds	r2, #122	@ 0x7a
 800ada2:	7812      	ldrb	r2, [r2, #0]
 800ada4:	0224      	lsls	r4, r4, #8
 800ada6:	4314      	orrs	r4, r2
 800ada8:	22b8      	movs	r2, #184	@ 0xb8
            case 1: delay_sec = dev_setting->alarm_delay_rh2; violations = log_csv.logging_summary.RH2_alarm_count; break;
            case 2: delay_sec = dev_setting->alarm_delay_th1; violations = log_csv.logging_summary.TH1_alarm_count; break;
            case 3: delay_sec = dev_setting->alarm_delay_th2; violations = log_csv.logging_summary.TH2_alarm_count; break;
            case 4: delay_sec = dev_setting->alarm_delay_tl1; violations = log_csv.logging_summary.TL1_alarm_count; break;
            case 5: delay_sec = dev_setting->alarm_delay_tl2; violations = log_csv.logging_summary.TL2_alarm_count; break;
 800adaa:	0052      	lsls	r2, r2, #1
 800adac:	5a9f      	ldrh	r7, [r3, r2]
    if (buffer == NULL || buffer_size == 0) {
 800adae:	0020      	movs	r0, r4
 800adb0:	2220      	movs	r2, #32
 800adb2:	a90a      	add	r1, sp, #40	@ 0x28
 800adb4:	f7ff ffa4 	bl	800ad00 <seconds_to_dhms_string_long.part.0>
        }

        seconds_to_dhms_string_long(delay_sec, s_delay, sizeof(s_delay));

        // 예시 계산(실제 위반 누적 시간을 따로 관리한다면 그 값을 쓰세요)
        uint32_t tot_violation_sec = 0;
 800adb8:	2200      	movs	r2, #0
        if (log_csv.logging_summary.elapsed_time_sec > delay_sec) {
 800adba:	4b7e      	ldr	r3, [pc, #504]	@ (800afb4 <csv_alarm_summary_fill+0x254>)
        uint32_t tot_violation_sec = 0;
 800adbc:	9208      	str	r2, [sp, #32]
        if (log_csv.logging_summary.elapsed_time_sec > delay_sec) {
 800adbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	d901      	bls.n	800adc8 <csv_alarm_summary_fill+0x68>
            tot_violation_sec = log_csv.logging_summary.elapsed_time_sec - delay_sec;
 800adc4:	1b1b      	subs	r3, r3, r4
 800adc6:	9308      	str	r3, [sp, #32]
    if (buffer == NULL || buffer_size == 0) {
 800adc8:	2220      	movs	r2, #32
 800adca:	9808      	ldr	r0, [sp, #32]
 800adcc:	a912      	add	r1, sp, #72	@ 0x48
 800adce:	f7ff ff97 	bl	800ad00 <seconds_to_dhms_string_long.part.0>
        }
        seconds_to_dhms_string_long(tot_violation_sec, s_tot, sizeof(s_tot));

        const char *status = (violations >= 1) ? "ALARM" : "OK";
 800add2:	4b79      	ldr	r3, [pc, #484]	@ (800afb8 <csv_alarm_summary_fill+0x258>)
 800add4:	9309      	str	r3, [sp, #36]	@ 0x24
 800add6:	2f00      	cmp	r7, #0
 800add8:	d001      	beq.n	800adde <csv_alarm_summary_fill+0x7e>
 800adda:	4b78      	ldr	r3, [pc, #480]	@ (800afbc <csv_alarm_summary_fill+0x25c>)
 800addc:	9309      	str	r3, [sp, #36]	@ 0x24
        log_csv.alarm_summary.zones[i].status = (violations >= 1) ? ALARM_STATUS_ALARM : ALARM_STATUS_OK;
 800adde:	003b      	movs	r3, r7
 800ade0:	1e5a      	subs	r2, r3, #1
 800ade2:	4193      	sbcs	r3, r2
 800ade4:	9a07      	ldr	r2, [sp, #28]
 800ade6:	7513      	strb	r3, [r2, #20]
        log_csv.alarm_summary.zones[i].alarm_delay_sec = delay_sec;
 800ade8:	0013      	movs	r3, r2
 800adea:	6014      	str	r4, [r2, #0]
        log_csv.alarm_summary.zones[i].total_time_in_violation_minutes = tot_violation_sec; // 이름과 달리 sec일 수 있음
 800adec:	001c      	movs	r4, r3
 800adee:	9a08      	ldr	r2, [sp, #32]
        log_csv.alarm_summary.zones[i].violation_count = violations;
 800adf0:	611f      	str	r7, [r3, #16]
        log_csv.alarm_summary.zones[i].total_time_in_violation_minutes = tot_violation_sec; // 이름과 달리 sec일 수 있음
 800adf2:	60da      	str	r2, [r3, #12]

        // ★ 표시용 threshold 계산 & 올바른 포맷으로 출력
        if (i < 2) {
 800adf4:	9b06      	ldr	r3, [sp, #24]
 800adf6:	3c14      	subs	r4, #20
 800adf8:	9408      	str	r4, [sp, #32]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	dd00      	ble.n	800ae00 <csv_alarm_summary_fill+0xa0>
 800adfe:	e083      	b.n	800af08 <csv_alarm_summary_fill+0x1a8>
            // RH1/RH2: 원시단위가 0.01이므로 /10 해서 정수 표시 (예: 200000 → 20000)
            unsigned rh_disp = (i == 0) ? (unsigned)(dev_setting->alarm_rh1 / 10U)
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d000      	beq.n	800ae06 <csv_alarm_summary_fill+0xa6>
 800ae04:	e070      	b.n	800aee8 <csv_alarm_summary_fill+0x188>
            unsigned rh_disp = (i == 0) ? (unsigned)(dev_setting->alarm_rh1 / 10U)
 800ae06:	002a      	movs	r2, r5
 800ae08:	002b      	movs	r3, r5
 800ae0a:	3292      	adds	r2, #146	@ 0x92
 800ae0c:	7812      	ldrb	r2, [r2, #0]
 800ae0e:	3391      	adds	r3, #145	@ 0x91
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	0212      	lsls	r2, r2, #8
 800ae14:	431a      	orrs	r2, r3
 800ae16:	002b      	movs	r3, r5
 800ae18:	3393      	adds	r3, #147	@ 0x93
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	041b      	lsls	r3, r3, #16
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	002a      	movs	r2, r5
 800ae22:	3294      	adds	r2, #148	@ 0x94
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800ae24:	7810      	ldrb	r0, [r2, #0]
 800ae26:	210a      	movs	r1, #10
 800ae28:	0600      	lsls	r0, r0, #24
 800ae2a:	4318      	orrs	r0, r3
 800ae2c:	f7f5 f99c 	bl	8000168 <__udivsi3>
 800ae30:	0003      	movs	r3, r0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800ae32:	4a63      	ldr	r2, [pc, #396]	@ (800afc0 <csv_alarm_summary_fill+0x260>)
            // TH/TL: 원시단위가 0.1이므로 /10 해서 부호 있는 정수 표시 (예: -600 → -60)
            int thtl_disp = (i == 2) ? (int)(dev_setting->alarm_th1 / 10)
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
                                       : (int)(dev_setting->alarm_tl2 / 10);
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800ae34:	21c0      	movs	r1, #192	@ 0xc0
 800ae36:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ae38:	9703      	str	r7, [sp, #12]
 800ae3a:	af12      	add	r7, sp, #72	@ 0x48
 800ae3c:	9702      	str	r7, [sp, #8]
 800ae3e:	0089      	lsls	r1, r1, #2
 800ae40:	a81a      	add	r0, sp, #104	@ 0x68
 800ae42:	af0a      	add	r7, sp, #40	@ 0x28
 800ae44:	1b89      	subs	r1, r1, r6
 800ae46:	1980      	adds	r0, r0, r6
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	9404      	str	r4, [sp, #16]
 800ae4c:	9b08      	ldr	r3, [sp, #32]
 800ae4e:	9701      	str	r7, [sp, #4]
 800ae50:	f00f f9fe 	bl	801a250 <sniprintf>
                               log_csv.alarm_summary.zones[i].zone_name,
                               thtl_disp, s_delay, s_tot,
                               (unsigned long)violations, status);
        }

        if (offset >= fixed_block_size) {
 800ae54:	23c0      	movs	r3, #192	@ 0xc0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800ae56:	1836      	adds	r6, r6, r0
        if (offset >= fixed_block_size) {
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	429e      	cmp	r6, r3
 800ae5c:	da00      	bge.n	800ae60 <csv_alarm_summary_fill+0x100>
 800ae5e:	e07e      	b.n	800af5e <csv_alarm_summary_fill+0x1fe>
            printf("[CSV][AlarmFill][WARN] tmp_buff overflow, truncated\r\n");
            offset = fixed_block_size; // 안전
 800ae60:	26c0      	movs	r6, #192	@ 0xc0
            printf("[CSV][AlarmFill][WARN] tmp_buff overflow, truncated\r\n");
 800ae62:	4858      	ldr	r0, [pc, #352]	@ (800afc4 <csv_alarm_summary_fill+0x264>)
 800ae64:	f00f f9ea 	bl	801a23c <puts>
            offset = fixed_block_size; // 안전
 800ae68:	00b6      	lsls	r6, r6, #2
            break;
        }
    }

    // ── CSV에 덮어쓰기 ──
    FRESULT fr = f_lseek(&csv_file, log_csv.csv_fiels_offset.alarm_summary_fill_offset);
 800ae6a:	24ca      	movs	r4, #202	@ 0xca
 800ae6c:	4d50      	ldr	r5, [pc, #320]	@ (800afb0 <csv_alarm_summary_fill+0x250>)
 800ae6e:	4f56      	ldr	r7, [pc, #344]	@ (800afc8 <csv_alarm_summary_fill+0x268>)
 800ae70:	0064      	lsls	r4, r4, #1
 800ae72:	5929      	ldr	r1, [r5, r4]
 800ae74:	0038      	movs	r0, r7
 800ae76:	f00a f933 	bl	80150e0 <f_lseek>
 800ae7a:	1e01      	subs	r1, r0, #0
    if (fr != FR_OK) {
 800ae7c:	d100      	bne.n	800ae80 <csv_alarm_summary_fill+0x120>
 800ae7e:	e079      	b.n	800af74 <csv_alarm_summary_fill+0x214>
        printf("[CSV][AlarmFill][ERR] f_lseek fail: 0x%02X\r\n", fr);
 800ae80:	4852      	ldr	r0, [pc, #328]	@ (800afcc <csv_alarm_summary_fill+0x26c>)
 800ae82:	f00f f96b 	bl	801a15c <iprintf>
               (unsigned)to_write, (unsigned)ALARM_SUMMARY_PAD_BYTES);
    }

    printf("[CSV][AlarmFill] 알람 요약 데이터 채움 완료: %u bytes at offset %lu\r\n",
           (unsigned)to_write, (unsigned long)log_csv.csv_fiels_offset.alarm_summary_fill_offset);
}
 800ae86:	23db      	movs	r3, #219	@ 0xdb
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	449d      	add	sp, r3
 800ae8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            case 1: delay_sec = dev_setting->alarm_delay_rh2; violations = log_csv.logging_summary.RH2_alarm_count; break;
 800ae8e:	0029      	movs	r1, r5
 800ae90:	317d      	adds	r1, #125	@ 0x7d
 800ae92:	780c      	ldrb	r4, [r1, #0]
 800ae94:	327c      	adds	r2, #124	@ 0x7c
 800ae96:	7812      	ldrb	r2, [r2, #0]
 800ae98:	0224      	lsls	r4, r4, #8
 800ae9a:	4314      	orrs	r4, r2
 800ae9c:	22b9      	movs	r2, #185	@ 0xb9
 800ae9e:	e784      	b.n	800adaa <csv_alarm_summary_fill+0x4a>
            case 2: delay_sec = dev_setting->alarm_delay_th1; violations = log_csv.logging_summary.TH1_alarm_count; break;
 800aea0:	0029      	movs	r1, r5
 800aea2:	317f      	adds	r1, #127	@ 0x7f
 800aea4:	780c      	ldrb	r4, [r1, #0]
 800aea6:	327e      	adds	r2, #126	@ 0x7e
 800aea8:	7812      	ldrb	r2, [r2, #0]
 800aeaa:	0224      	lsls	r4, r4, #8
 800aeac:	4314      	orrs	r4, r2
 800aeae:	22ba      	movs	r2, #186	@ 0xba
 800aeb0:	e77b      	b.n	800adaa <csv_alarm_summary_fill+0x4a>
            case 3: delay_sec = dev_setting->alarm_delay_th2; violations = log_csv.logging_summary.TH2_alarm_count; break;
 800aeb2:	0029      	movs	r1, r5
 800aeb4:	3181      	adds	r1, #129	@ 0x81
 800aeb6:	780c      	ldrb	r4, [r1, #0]
 800aeb8:	3280      	adds	r2, #128	@ 0x80
 800aeba:	7812      	ldrb	r2, [r2, #0]
 800aebc:	0224      	lsls	r4, r4, #8
 800aebe:	4314      	orrs	r4, r2
 800aec0:	22bb      	movs	r2, #187	@ 0xbb
 800aec2:	e772      	b.n	800adaa <csv_alarm_summary_fill+0x4a>
            case 4: delay_sec = dev_setting->alarm_delay_tl1; violations = log_csv.logging_summary.TL1_alarm_count; break;
 800aec4:	0029      	movs	r1, r5
 800aec6:	3183      	adds	r1, #131	@ 0x83
 800aec8:	780c      	ldrb	r4, [r1, #0]
 800aeca:	3282      	adds	r2, #130	@ 0x82
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	0224      	lsls	r4, r4, #8
 800aed0:	4314      	orrs	r4, r2
 800aed2:	22bc      	movs	r2, #188	@ 0xbc
 800aed4:	e769      	b.n	800adaa <csv_alarm_summary_fill+0x4a>
            case 5: delay_sec = dev_setting->alarm_delay_tl2; violations = log_csv.logging_summary.TL2_alarm_count; break;
 800aed6:	0029      	movs	r1, r5
 800aed8:	3185      	adds	r1, #133	@ 0x85
 800aeda:	780c      	ldrb	r4, [r1, #0]
 800aedc:	3284      	adds	r2, #132	@ 0x84
 800aede:	7812      	ldrb	r2, [r2, #0]
 800aee0:	0224      	lsls	r4, r4, #8
 800aee2:	4314      	orrs	r4, r2
 800aee4:	22bd      	movs	r2, #189	@ 0xbd
 800aee6:	e760      	b.n	800adaa <csv_alarm_summary_fill+0x4a>
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800aee8:	002a      	movs	r2, r5
 800aeea:	002b      	movs	r3, r5
 800aeec:	329a      	adds	r2, #154	@ 0x9a
 800aeee:	7812      	ldrb	r2, [r2, #0]
 800aef0:	3399      	adds	r3, #153	@ 0x99
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	0212      	lsls	r2, r2, #8
 800aef6:	431a      	orrs	r2, r3
 800aef8:	002b      	movs	r3, r5
 800aefa:	339b      	adds	r3, #155	@ 0x9b
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	041b      	lsls	r3, r3, #16
 800af00:	4313      	orrs	r3, r2
 800af02:	002a      	movs	r2, r5
 800af04:	329c      	adds	r2, #156	@ 0x9c
 800af06:	e78d      	b.n	800ae24 <csv_alarm_summary_fill+0xc4>
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
 800af08:	9b06      	ldr	r3, [sp, #24]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d10f      	bne.n	800af2e <csv_alarm_summary_fill+0x1ce>
            int thtl_disp = (i == 2) ? (int)(dev_setting->alarm_th1 / 10)
 800af0e:	002b      	movs	r3, r5
 800af10:	002a      	movs	r2, r5
 800af12:	3395      	adds	r3, #149	@ 0x95
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	3296      	adds	r2, #150	@ 0x96
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800af18:	7810      	ldrb	r0, [r2, #0]
 800af1a:	210a      	movs	r1, #10
 800af1c:	0200      	lsls	r0, r0, #8
 800af1e:	4318      	orrs	r0, r3
 800af20:	0400      	lsls	r0, r0, #16
 800af22:	1400      	asrs	r0, r0, #16
 800af24:	f7f5 f9aa 	bl	800027c <__divsi3>
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800af28:	4a29      	ldr	r2, [pc, #164]	@ (800afd0 <csv_alarm_summary_fill+0x270>)
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800af2a:	b203      	sxth	r3, r0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800af2c:	e782      	b.n	800ae34 <csv_alarm_summary_fill+0xd4>
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	2b03      	cmp	r3, #3
 800af32:	d105      	bne.n	800af40 <csv_alarm_summary_fill+0x1e0>
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
 800af34:	002b      	movs	r3, r5
 800af36:	002a      	movs	r2, r5
 800af38:	339d      	adds	r3, #157	@ 0x9d
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	329e      	adds	r2, #158	@ 0x9e
 800af3e:	e7eb      	b.n	800af18 <csv_alarm_summary_fill+0x1b8>
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800af40:	9b06      	ldr	r3, [sp, #24]
 800af42:	2b04      	cmp	r3, #4
 800af44:	d105      	bne.n	800af52 <csv_alarm_summary_fill+0x1f2>
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
 800af46:	002b      	movs	r3, r5
 800af48:	002a      	movs	r2, r5
 800af4a:	3397      	adds	r3, #151	@ 0x97
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	3298      	adds	r2, #152	@ 0x98
 800af50:	e7e2      	b.n	800af18 <csv_alarm_summary_fill+0x1b8>
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800af52:	002b      	movs	r3, r5
 800af54:	002a      	movs	r2, r5
 800af56:	339f      	adds	r3, #159	@ 0x9f
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	32a0      	adds	r2, #160	@ 0xa0
 800af5c:	e7dc      	b.n	800af18 <csv_alarm_summary_fill+0x1b8>
    for (int i = 0; i < 6; i++) {
 800af5e:	9b06      	ldr	r3, [sp, #24]
 800af60:	3301      	adds	r3, #1
 800af62:	9306      	str	r3, [sp, #24]
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	332c      	adds	r3, #44	@ 0x2c
 800af68:	9307      	str	r3, [sp, #28]
 800af6a:	9b06      	ldr	r3, [sp, #24]
 800af6c:	2b06      	cmp	r3, #6
 800af6e:	d000      	beq.n	800af72 <csv_alarm_summary_fill+0x212>
 800af70:	e708      	b.n	800ad84 <csv_alarm_summary_fill+0x24>
 800af72:	e77a      	b.n	800ae6a <csv_alarm_summary_fill+0x10a>
    UINT bw = 0;
 800af74:	9012      	str	r0, [sp, #72]	@ 0x48
    fr = f_write(&csv_file, tmp_buff, to_write, &bw);
 800af76:	a91a      	add	r1, sp, #104	@ 0x68
 800af78:	0032      	movs	r2, r6
 800af7a:	0038      	movs	r0, r7
 800af7c:	ab12      	add	r3, sp, #72	@ 0x48
 800af7e:	f009 ff73 	bl	8014e68 <f_write>
 800af82:	1e01      	subs	r1, r0, #0
    if (fr != FR_OK || bw != to_write) {
 800af84:	d102      	bne.n	800af8c <csv_alarm_summary_fill+0x22c>
 800af86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af88:	42b3      	cmp	r3, r6
 800af8a:	d005      	beq.n	800af98 <csv_alarm_summary_fill+0x238>
        printf("[CSV][AlarmFill][ERR] f_write fail: 0x%02X, bw=%u/%u\r\n", fr, (unsigned)bw, (unsigned)to_write);
 800af8c:	0033      	movs	r3, r6
 800af8e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af90:	4810      	ldr	r0, [pc, #64]	@ (800afd4 <csv_alarm_summary_fill+0x274>)
 800af92:	f00f f8e3 	bl	801a15c <iprintf>
        return;
 800af96:	e776      	b.n	800ae86 <csv_alarm_summary_fill+0x126>
    printf("[CSV][AlarmFill] 알람 요약 데이터 채움 완료: %u bytes at offset %lu\r\n",
 800af98:	0031      	movs	r1, r6
 800af9a:	592a      	ldr	r2, [r5, r4]
 800af9c:	480e      	ldr	r0, [pc, #56]	@ (800afd8 <csv_alarm_summary_fill+0x278>)
 800af9e:	f00f f8dd 	bl	801a15c <iprintf>
 800afa2:	e770      	b.n	800ae86 <csv_alarm_summary_fill+0x126>
 800afa4:	fffffc94 	.word	0xfffffc94
 800afa8:	0801ed39 	.word	0x0801ed39
 800afac:	200000a4 	.word	0x200000a4
 800afb0:	20000058 	.word	0x20000058
 800afb4:	20000154 	.word	0x20000154
 800afb8:	0801ed36 	.word	0x0801ed36
 800afbc:	0801ed30 	.word	0x0801ed30
 800afc0:	0801ed74 	.word	0x0801ed74
 800afc4:	0801edc2 	.word	0x0801edc2
 800afc8:	20002c60 	.word	0x20002c60
 800afcc:	0801edf7 	.word	0x0801edf7
 800afd0:	0801ed9b 	.word	0x0801ed9b
 800afd4:	0801ee24 	.word	0x0801ee24
 800afd8:	0801ee5b 	.word	0x0801ee5b

0800afdc <time_to_dmyhms_string.part.0>:
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	0004      	movs	r4, r0
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800afe0:	7863      	ldrb	r3, [r4, #1]
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800afe2:	0008      	movs	r0, r1
 800afe4:	0011      	movs	r1, r2
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800afe6:	1e5a      	subs	r2, r3, #1
 800afe8:	4d0a      	ldr	r5, [pc, #40]	@ (800b014 <time_to_dmyhms_string.part.0+0x38>)
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800afea:	b086      	sub	sp, #24
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800afec:	2a0b      	cmp	r2, #11
 800afee:	d802      	bhi.n	800aff6 <time_to_dmyhms_string.part.0+0x1a>
 800aff0:	4a09      	ldr	r2, [pc, #36]	@ (800b018 <time_to_dmyhms_string.part.0+0x3c>)
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	589d      	ldr	r5, [r3, r2]
    snprintf(buffer, buffer_size,
 800aff6:	7966      	ldrb	r6, [r4, #5]
 800aff8:	78a3      	ldrb	r3, [r4, #2]
 800affa:	9604      	str	r6, [sp, #16]
 800affc:	7926      	ldrb	r6, [r4, #4]
 800affe:	4a07      	ldr	r2, [pc, #28]	@ (800b01c <time_to_dmyhms_string.part.0+0x40>)
 800b000:	9603      	str	r6, [sp, #12]
 800b002:	78e6      	ldrb	r6, [r4, #3]
 800b004:	9602      	str	r6, [sp, #8]
 800b006:	7824      	ldrb	r4, [r4, #0]
 800b008:	9500      	str	r5, [sp, #0]
 800b00a:	9401      	str	r4, [sp, #4]
 800b00c:	f00f f920 	bl	801a250 <sniprintf>
}
 800b010:	b006      	add	sp, #24
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	0801eeac 	.word	0x0801eeac
 800b018:	08020450 	.word	0x08020450
 800b01c:	0801eeb0 	.word	0x0801eeb0

0800b020 <csv_dump_log_entries_with_summary_seek>:
    // Remainder of the function
    log_csv.csv_fiels_offset.marked_events_offset = log_csv.csv_fiels_offset.logging_summary_offset + offset + 1;
    fatfs_write_str(&csv_file, tmp_buff);
}

static void csv_dump_log_entries_with_summary_seek(void) {
 800b020:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t max_idx = LOG_MAX_SIZE / ENTRY_SIZE;
    double sum_temp = 0.0, sum_dose = 0.0;
    uint32_t valid_count = 0;
    uint32_t valid_rad_count = 0;
    bool rh1_lat = false, rh2_lat = false, th1_lat = false, th2_lat = false, tl1_lat = false, tl2_lat = false;
    log_csv.logging_summary.RH1_alarm_count = 0;
 800b022:	2500      	movs	r5, #0
static void csv_dump_log_entries_with_summary_seek(void) {
 800b024:	4ce7      	ldr	r4, [pc, #924]	@ (800b3c4 <csv_dump_log_entries_with_summary_seek+0x3a4>)
    bool first_found = false;
    char tmp_buff[256];

    extern uint16_t idx_rad;
    extern uint16_t idx_temp;
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800b026:	4fe8      	ldr	r7, [pc, #928]	@ (800b3c8 <csv_dump_log_entries_with_summary_seek+0x3a8>)
static void csv_dump_log_entries_with_summary_seek(void) {
 800b028:	44a5      	add	sp, r4
    log_csv.logging_summary.RH1_alarm_count = 0;
 800b02a:	4ce8      	ldr	r4, [pc, #928]	@ (800b3cc <csv_dump_log_entries_with_summary_seek+0x3ac>)
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800b02c:	2300      	movs	r3, #0
 800b02e:	5ef8      	ldrsh	r0, [r7, r3]
    log_csv.logging_summary.RH1_alarm_count = 0;
 800b030:	6765      	str	r5, [r4, #116]	@ 0x74
    log_csv.logging_summary.TH1_alarm_count = 0;
 800b032:	67a5      	str	r5, [r4, #120]	@ 0x78
    log_csv.logging_summary.TL1_alarm_count = 0;
 800b034:	67e5      	str	r5, [r4, #124]	@ 0x7c
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800b036:	f7f6 fb79 	bl	800172c <__aeabi_i2f>
 800b03a:	49e5      	ldr	r1, [pc, #916]	@ (800b3d0 <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800b03c:	f7f5 fdb4 	bl	8000ba8 <__aeabi_fdiv>
 800b040:	6460      	str	r0, [r4, #68]	@ 0x44
 800b042:	900a      	str	r0, [sp, #40]	@ 0x28
    log_csv.logging_summary.lowest_temp    = device_config.temp_min / 10.0f;
 800b044:	2302      	movs	r3, #2
 800b046:	5ef8      	ldrsh	r0, [r7, r3]
 800b048:	f7f6 fb70 	bl	800172c <__aeabi_i2f>
 800b04c:	49e0      	ldr	r1, [pc, #896]	@ (800b3d0 <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800b04e:	f7f5 fdab 	bl	8000ba8 <__aeabi_fdiv>
 800b052:	1c06      	adds	r6, r0, #0
 800b054:	64a0      	str	r0, [r4, #72]	@ 0x48
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7f6 fbb8 	bl	80017cc <__aeabi_ui2f>
 800b05c:	49dd      	ldr	r1, [pc, #884]	@ (800b3d4 <csv_dump_log_entries_with_summary_seek+0x3b4>)
 800b05e:	f7f5 fda3 	bl	8000ba8 <__aeabi_fdiv>

    // 1. Logging Summary Header 및 자리 확보
    char summary_buff[512] = {0};
 800b062:	2280      	movs	r2, #128	@ 0x80
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800b064:	6520      	str	r0, [r4, #80]	@ 0x50
    char summary_buff[512] = {0};
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	0029      	movs	r1, r5
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800b06a:	1c07      	adds	r7, r0, #0
    char summary_buff[512] = {0};
 800b06c:	a8c8      	add	r0, sp, #800	@ 0x320
 800b06e:	f00f fa41 	bl	801a4f4 <memset>
    int offset = 0;
    offset += snprintf(summary_buff + offset, sizeof(summary_buff) - offset,
 800b072:	1c38      	adds	r0, r7, #0
 800b074:	f7f8 fb90 	bl	8003798 <__aeabi_f2d>
 800b078:	9004      	str	r0, [sp, #16]
 800b07a:	9105      	str	r1, [sp, #20]
 800b07c:	1c30      	adds	r0, r6, #0
 800b07e:	f7f8 fb8b 	bl	8003798 <__aeabi_f2d>
 800b082:	9002      	str	r0, [sp, #8]
 800b084:	9103      	str	r1, [sp, #12]
 800b086:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b088:	f7f8 fb86 	bl	8003798 <__aeabi_f2d>
 800b08c:	9000      	str	r0, [sp, #0]
 800b08e:	9101      	str	r1, [sp, #4]
 800b090:	2180      	movs	r1, #128	@ 0x80
 800b092:	4cd1      	ldr	r4, [pc, #836]	@ (800b3d8 <csv_dump_log_entries_with_summary_seek+0x3b8>)
 800b094:	0089      	lsls	r1, r1, #2
 800b096:	0022      	movs	r2, r4
 800b098:	a8c8      	add	r0, sp, #800	@ 0x320
 800b09a:	f00f f8d9 	bl	801a250 <sniprintf>
        "Highest Radiation Dose:%7.2f\n",
        log_csv.logging_summary.highest_temp,
        log_csv.logging_summary.lowest_temp,
        log_csv.logging_summary.highest_radiation);

    fatfs_write_str(&csv_file, summary_buff);
 800b09e:	4ccf      	ldr	r4, [pc, #828]	@ (800b3dc <csv_dump_log_entries_with_summary_seek+0x3bc>)
 800b0a0:	a8c8      	add	r0, sp, #800	@ 0x320
 800b0a2:	0021      	movs	r1, r4
 800b0a4:	f00a fcf8 	bl	8015a98 <f_puts>
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800b0a8:	22d0      	movs	r2, #208	@ 0xd0

    char summary_padding[512];
    memset(summary_padding, ' ', sizeof(summary_padding));
 800b0aa:	20a4      	movs	r0, #164	@ 0xa4
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800b0ac:	6961      	ldr	r1, [r4, #20]
 800b0ae:	4bcc      	ldr	r3, [pc, #816]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b0b0:	0052      	lsls	r2, r2, #1
    memset(summary_padding, ' ', sizeof(summary_padding));
 800b0b2:	00c0      	lsls	r0, r0, #3
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800b0b4:	5099      	str	r1, [r3, r2]
    memset(summary_padding, ' ', sizeof(summary_padding));
 800b0b6:	4468      	add	r0, sp
 800b0b8:	2120      	movs	r1, #32
 800b0ba:	3260      	adds	r2, #96	@ 0x60
 800b0bc:	f00f fa1a 	bl	801a4f4 <memset>
    f_write(&csv_file, summary_padding, sizeof(summary_padding), NULL);
 800b0c0:	21a4      	movs	r1, #164	@ 0xa4
 800b0c2:	2280      	movs	r2, #128	@ 0x80
 800b0c4:	00c9      	lsls	r1, r1, #3
 800b0c6:	002b      	movs	r3, r5
 800b0c8:	0020      	movs	r0, r4
 800b0ca:	0092      	lsls	r2, r2, #2
 800b0cc:	4469      	add	r1, sp
 800b0ce:	f009 fecb 	bl	8014e68 <f_write>
    // 2. 로그 헤더
    fatfs_write_str(&csv_file,
 800b0d2:	0021      	movs	r1, r4
 800b0d4:	48c3      	ldr	r0, [pc, #780]	@ (800b3e4 <csv_dump_log_entries_with_summary_seek+0x3c4>)
 800b0d6:	f00a fcdf 	bl	8015a98 <f_puts>
    double sum_temp = 0.0, sum_dose = 0.0;
 800b0da:	2400      	movs	r4, #0
 800b0dc:	2300      	movs	r3, #0
    bool first_found = false;
 800b0de:	002e      	movs	r6, r5
    double sum_temp = 0.0, sum_dose = 0.0;
 800b0e0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b0e4:	9314      	str	r3, [sp, #80]	@ 0x50
 800b0e6:	9415      	str	r4, [sp, #84]	@ 0x54
    log_entry_t first = {0}, last = {0};
 800b0e8:	950a      	str	r5, [sp, #40]	@ 0x28
 800b0ea:	9516      	str	r5, [sp, #88]	@ 0x58
 800b0ec:	951f      	str	r5, [sp, #124]	@ 0x7c
 800b0ee:	951e      	str	r5, [sp, #120]	@ 0x78
 800b0f0:	951d      	str	r5, [sp, #116]	@ 0x74
 800b0f2:	951c      	str	r5, [sp, #112]	@ 0x70
 800b0f4:	951b      	str	r5, [sp, #108]	@ 0x6c
    uint32_t valid_rad_count = 0;
 800b0f6:	950e      	str	r5, [sp, #56]	@ 0x38
    log_entry_t first = {0}, last = {0};
 800b0f8:	951a      	str	r5, [sp, #104]	@ 0x68
 800b0fa:	9511      	str	r5, [sp, #68]	@ 0x44
 800b0fc:	9510      	str	r5, [sp, #64]	@ 0x40
 800b0fe:	950d      	str	r5, [sp, #52]	@ 0x34
 800b100:	950f      	str	r5, [sp, #60]	@ 0x3c
        "************************************************\n"
        "Index,Date,Time,Temperature,Rad,Mark\n");

    // 3. Flash 순회
    for (uint32_t i = 0; i < max_idx; i++) {
        meas_data_log_read_entry(i, &entry);
 800b102:	ac2a      	add	r4, sp, #168	@ 0xa8
 800b104:	0021      	movs	r1, r4
 800b106:	0028      	movs	r0, r5
 800b108:	f7fd fb16 	bl	8008738 <meas_data_log_read_entry>
        if (entry.year == 0xFF || entry.index == 0xFFFF || entry.month == 0xFF) break;
 800b10c:	78a3      	ldrb	r3, [r4, #2]
 800b10e:	2bff      	cmp	r3, #255	@ 0xff
 800b110:	d100      	bne.n	800b114 <csv_dump_log_entries_with_summary_seek+0xf4>
 800b112:	e2a6      	b.n	800b662 <csv_dump_log_entries_with_summary_seek+0x642>
 800b114:	8822      	ldrh	r2, [r4, #0]
 800b116:	4bb4      	ldr	r3, [pc, #720]	@ (800b3e8 <csv_dump_log_entries_with_summary_seek+0x3c8>)
 800b118:	429a      	cmp	r2, r3
 800b11a:	d100      	bne.n	800b11e <csv_dump_log_entries_with_summary_seek+0xfe>
 800b11c:	e2a1      	b.n	800b662 <csv_dump_log_entries_with_summary_seek+0x642>
 800b11e:	78e3      	ldrb	r3, [r4, #3]
 800b120:	2bff      	cmp	r3, #255	@ 0xff
 800b122:	d100      	bne.n	800b126 <csv_dump_log_entries_with_summary_seek+0x106>
 800b124:	e29d      	b.n	800b662 <csv_dump_log_entries_with_summary_seek+0x642>

        float temp = entry.temperature / 10.0f;
 800b126:	230a      	movs	r3, #10
 800b128:	5ee0      	ldrsh	r0, [r4, r3]
 800b12a:	f7f6 faff 	bl	800172c <__aeabi_i2f>
 800b12e:	49a8      	ldr	r1, [pc, #672]	@ (800b3d0 <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800b130:	f7f5 fd3a 	bl	8000ba8 <__aeabi_fdiv>
 800b134:	9017      	str	r0, [sp, #92]	@ 0x5c
        float dose = entry.dose / 100.0f;
 800b136:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800b138:	f7f6 fb48 	bl	80017cc <__aeabi_ui2f>
 800b13c:	49a5      	ldr	r1, [pc, #660]	@ (800b3d4 <csv_dump_log_entries_with_summary_seek+0x3b4>)
 800b13e:	f7f5 fd33 	bl	8000ba8 <__aeabi_fdiv>
        char rad_str[16];

        // Rad 미측정 구간이면 "n/a"로
        if (entry.rad_measure_mark == 0) {
 800b142:	7c63      	ldrb	r3, [r4, #17]
        float dose = entry.dose / 100.0f;
 800b144:	1c07      	adds	r7, r0, #0
        if (entry.rad_measure_mark == 0) {
 800b146:	2b00      	cmp	r3, #0
 800b148:	d000      	beq.n	800b14c <csv_dump_log_entries_with_summary_seek+0x12c>
 800b14a:	e25f      	b.n	800b60c <csv_dump_log_entries_with_summary_seek+0x5ec>
            strcpy(rad_str, "n/a");
 800b14c:	49a7      	ldr	r1, [pc, #668]	@ (800b3ec <csv_dump_log_entries_with_summary_seek+0x3cc>)
 800b14e:	a878      	add	r0, sp, #480	@ 0x1e0
 800b150:	f00f fa87 	bl	801a662 <strcpy>
        } else {
            snprintf(rad_str, sizeof(rad_str), "%.2f", dose);
        }

        if (!first_found) {
            first = entry;
 800b154:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b156:	79da      	ldrb	r2, [r3, #7]
 800b158:	920a      	str	r2, [sp, #40]	@ 0x28
 800b15a:	789a      	ldrb	r2, [r3, #2]
 800b15c:	9216      	str	r2, [sp, #88]	@ 0x58
 800b15e:	78da      	ldrb	r2, [r3, #3]
 800b160:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b162:	791a      	ldrb	r2, [r3, #4]
 800b164:	920d      	str	r2, [sp, #52]	@ 0x34
 800b166:	795a      	ldrb	r2, [r3, #5]
 800b168:	9210      	str	r2, [sp, #64]	@ 0x40
 800b16a:	799b      	ldrb	r3, [r3, #6]
 800b16c:	9311      	str	r3, [sp, #68]	@ 0x44
        if (!first_found) {
 800b16e:	2e00      	cmp	r6, #0
 800b170:	d10a      	bne.n	800b188 <csv_dump_log_entries_with_summary_seek+0x168>
            first = entry;
 800b172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b174:	921d      	str	r2, [sp, #116]	@ 0x74
 800b176:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b178:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b17a:	931e      	str	r3, [sp, #120]	@ 0x78
 800b17c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b17e:	931c      	str	r3, [sp, #112]	@ 0x70
 800b180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b182:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b184:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b186:	931a      	str	r3, [sp, #104]	@ 0x68
            first_found = true;
        }
        last = entry;

        sum_temp += temp;
 800b188:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b18a:	f7f8 fb05 	bl	8003798 <__aeabi_f2d>
 800b18e:	000b      	movs	r3, r1
 800b190:	0002      	movs	r2, r0
 800b192:	9018      	str	r0, [sp, #96]	@ 0x60
 800b194:	9119      	str	r1, [sp, #100]	@ 0x64
 800b196:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b198:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b19a:	f7f6 fb5d 	bl	8001858 <__aeabi_dadd>
 800b19e:	9014      	str	r0, [sp, #80]	@ 0x50
 800b1a0:	9115      	str	r1, [sp, #84]	@ 0x54

        if (entry.rad_measure_mark != 0) {
 800b1a2:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b1a4:	7c5c      	ldrb	r4, [r3, #17]
 800b1a6:	2c00      	cmp	r4, #0
 800b1a8:	d00d      	beq.n	800b1c6 <csv_dump_log_entries_with_summary_seek+0x1a6>
            sum_dose += dose;
 800b1aa:	1c38      	adds	r0, r7, #0
 800b1ac:	f7f8 faf4 	bl	8003798 <__aeabi_f2d>
 800b1b0:	000b      	movs	r3, r1
 800b1b2:	0002      	movs	r2, r0
 800b1b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b1b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b1b8:	f7f6 fb4e 	bl	8001858 <__aeabi_dadd>
            // rad valid count 별도
            valid_rad_count++;
 800b1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            sum_dose += dose;
 800b1be:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1c0:	9113      	str	r1, [sp, #76]	@ 0x4c
            valid_rad_count++;
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	930e      	str	r3, [sp, #56]	@ 0x38

        }
        valid_count++;
 800b1c6:	1c6b      	adds	r3, r5, #1
 800b1c8:	9317      	str	r3, [sp, #92]	@ 0x5c

        // --- [추가] 루프 내부, sum/CSV 쓰기 전에 ---
        int16_t  t_x10  = (int16_t)entry.temperature;   // 0.1℃ 단위
 800b1ca:	ab2a      	add	r3, sp, #168	@ 0xa8
 800b1cc:	220a      	movs	r2, #10
 800b1ce:	5e9e      	ldrsh	r6, [r3, r2]
        uint16_t d_x100 = (uint16_t)entry.dose;         // 0.01 단위

        uint32_t interval_sec = current_settings.temp_interval;
 800b1d0:	4987      	ldr	r1, [pc, #540]	@ (800b3f0 <csv_dump_log_entries_with_summary_seek+0x3d0>)
 800b1d2:	4b88      	ldr	r3, [pc, #544]	@ (800b3f4 <csv_dump_log_entries_with_summary_seek+0x3d4>)
 800b1d4:	7808      	ldrb	r0, [r1, #0]
 800b1d6:	0019      	movs	r1, r3
 800b1d8:	3176      	adds	r1, #118	@ 0x76
 800b1da:	7809      	ldrb	r1, [r1, #0]
        uint16_t d_x100 = (uint16_t)entry.dose;         // 0.01 단위
 800b1dc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
        uint32_t interval_sec = current_settings.temp_interval;
 800b1de:	0209      	lsls	r1, r1, #8
 800b1e0:	4301      	orrs	r1, r0
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	3077      	adds	r0, #119	@ 0x77
 800b1e6:	7800      	ldrb	r0, [r0, #0]
 800b1e8:	0400      	lsls	r0, r0, #16
 800b1ea:	4308      	orrs	r0, r1
 800b1ec:	0019      	movs	r1, r3
 800b1ee:	3178      	adds	r1, #120	@ 0x78
 800b1f0:	7809      	ldrb	r1, [r1, #0]
 800b1f2:	0609      	lsls	r1, r1, #24
 800b1f4:	4301      	orrs	r1, r0
        uint32_t elapsed_sec  = (valid_count > 0) ? (valid_count - 1U) * interval_sec : 0U;
 800b1f6:	4369      	muls	r1, r5

        bool gate_rh1 = (elapsed_sec >= current_settings.alarm_delay_rh1);
        bool gate_rh2 = (elapsed_sec >= current_settings.alarm_delay_rh2);
 800b1f8:	001d      	movs	r5, r3
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	357d      	adds	r5, #125	@ 0x7d
 800b1fe:	782f      	ldrb	r7, [r5, #0]
 800b200:	307c      	adds	r0, #124	@ 0x7c
 800b202:	7800      	ldrb	r0, [r0, #0]
 800b204:	023f      	lsls	r7, r7, #8
 800b206:	4307      	orrs	r7, r0
        bool gate_th1 = (elapsed_sec >= current_settings.alarm_delay_th1);
 800b208:	0018      	movs	r0, r3
 800b20a:	307e      	adds	r0, #126	@ 0x7e
 800b20c:	7805      	ldrb	r5, [r0, #0]
 800b20e:	0018      	movs	r0, r3
 800b210:	307f      	adds	r0, #127	@ 0x7f
 800b212:	7800      	ldrb	r0, [r0, #0]
 800b214:	0200      	lsls	r0, r0, #8
 800b216:	4328      	orrs	r0, r5
 800b218:	9020      	str	r0, [sp, #128]	@ 0x80
        bool gate_th2 = (elapsed_sec >= current_settings.alarm_delay_th2);
 800b21a:	0018      	movs	r0, r3
 800b21c:	3080      	adds	r0, #128	@ 0x80
 800b21e:	7805      	ldrb	r5, [r0, #0]
 800b220:	0018      	movs	r0, r3
 800b222:	3081      	adds	r0, #129	@ 0x81
 800b224:	7800      	ldrb	r0, [r0, #0]
 800b226:	0200      	lsls	r0, r0, #8
 800b228:	4328      	orrs	r0, r5
 800b22a:	9021      	str	r0, [sp, #132]	@ 0x84
        bool gate_tl1 = (elapsed_sec >= current_settings.alarm_delay_tl1);
 800b22c:	0018      	movs	r0, r3
 800b22e:	3082      	adds	r0, #130	@ 0x82
 800b230:	7805      	ldrb	r5, [r0, #0]
 800b232:	0018      	movs	r0, r3
 800b234:	3083      	adds	r0, #131	@ 0x83
 800b236:	7800      	ldrb	r0, [r0, #0]
 800b238:	0200      	lsls	r0, r0, #8
 800b23a:	4328      	orrs	r0, r5
 800b23c:	9022      	str	r0, [sp, #136]	@ 0x88
        bool gate_tl2 = (elapsed_sec >= current_settings.alarm_delay_tl2);
 800b23e:	0018      	movs	r0, r3
 800b240:	3084      	adds	r0, #132	@ 0x84
 800b242:	7805      	ldrb	r5, [r0, #0]
 800b244:	0018      	movs	r0, r3
 800b246:	3085      	adds	r0, #133	@ 0x85
 800b248:	7800      	ldrb	r0, [r0, #0]
 800b24a:	0200      	lsls	r0, r0, #8
 800b24c:	4328      	orrs	r0, r5
 800b24e:	9023      	str	r0, [sp, #140]	@ 0x8c
        bool gate_rh1 = (elapsed_sec >= current_settings.alarm_delay_rh1);
 800b250:	0018      	movs	r0, r3
 800b252:	307a      	adds	r0, #122	@ 0x7a
 800b254:	7805      	ldrb	r5, [r0, #0]
 800b256:	0018      	movs	r0, r3
 800b258:	307b      	adds	r0, #123	@ 0x7b
 800b25a:	7800      	ldrb	r0, [r0, #0]
 800b25c:	0200      	lsls	r0, r0, #8
 800b25e:	4328      	orrs	r0, r5

        // 조건(게이트 적용) — RH는 유효 방사선 구간에서만 판정
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b260:	4288      	cmp	r0, r1
 800b262:	d900      	bls.n	800b266 <csv_dump_log_entries_with_summary_seek+0x246>
 800b264:	e1dd      	b.n	800b622 <csv_dump_log_entries_with_summary_seek+0x602>
 800b266:	0025      	movs	r5, r4
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b268:	1e20      	subs	r0, r4, #0
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b26a:	d018      	beq.n	800b29e <csv_dump_log_entries_with_summary_seek+0x27e>
 800b26c:	001c      	movs	r4, r3
 800b26e:	0018      	movs	r0, r3
 800b270:	3492      	adds	r4, #146	@ 0x92
 800b272:	7824      	ldrb	r4, [r4, #0]
 800b274:	3091      	adds	r0, #145	@ 0x91
 800b276:	7800      	ldrb	r0, [r0, #0]
 800b278:	0224      	lsls	r4, r4, #8
 800b27a:	4304      	orrs	r4, r0
 800b27c:	0018      	movs	r0, r3
 800b27e:	3093      	adds	r0, #147	@ 0x93
 800b280:	7800      	ldrb	r0, [r0, #0]
 800b282:	3394      	adds	r3, #148	@ 0x94
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	0400      	lsls	r0, r0, #16
 800b288:	4320      	orrs	r0, r4
 800b28a:	061b      	lsls	r3, r3, #24
 800b28c:	4303      	orrs	r3, r0
 800b28e:	2000      	movs	r0, #0
 800b290:	0005      	movs	r5, r0
 800b292:	b294      	uxth	r4, r2
 800b294:	429c      	cmp	r4, r3
 800b296:	4145      	adcs	r5, r0
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b298:	428f      	cmp	r7, r1
 800b29a:	d800      	bhi.n	800b29e <csv_dump_log_entries_with_summary_seek+0x27e>
 800b29c:	e1cb      	b.n	800b636 <csv_dump_log_entries_with_summary_seek+0x616>
        bool th1_cond = gate_th1 && (t_x10 >= current_settings.alarm_th1);
 800b29e:	2300      	movs	r3, #0
 800b2a0:	469c      	mov	ip, r3
 800b2a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	d80c      	bhi.n	800b2c2 <csv_dump_log_entries_with_summary_seek+0x2a2>
 800b2a8:	4b53      	ldr	r3, [pc, #332]	@ (800b3f8 <csv_dump_log_entries_with_summary_seek+0x3d8>)
 800b2aa:	17f4      	asrs	r4, r6, #31
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	4b53      	ldr	r3, [pc, #332]	@ (800b3fc <csv_dump_log_entries_with_summary_seek+0x3dc>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	041b      	lsls	r3, r3, #16
 800b2b8:	141a      	asrs	r2, r3, #16
 800b2ba:	0fdb      	lsrs	r3, r3, #31
 800b2bc:	4296      	cmp	r6, r2
 800b2be:	4163      	adcs	r3, r4
 800b2c0:	469c      	mov	ip, r3
        bool th2_cond = gate_th2 && (t_x10 >= current_settings.alarm_th2);
 800b2c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2c4:	2400      	movs	r4, #0
 800b2c6:	428b      	cmp	r3, r1
 800b2c8:	d80b      	bhi.n	800b2e2 <csv_dump_log_entries_with_summary_seek+0x2c2>
 800b2ca:	4a4d      	ldr	r2, [pc, #308]	@ (800b400 <csv_dump_log_entries_with_summary_seek+0x3e0>)
 800b2cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b404 <csv_dump_log_entries_with_summary_seek+0x3e4>)
 800b2ce:	7814      	ldrb	r4, [r2, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	0224      	lsls	r4, r4, #8
 800b2d4:	431c      	orrs	r4, r3
 800b2d6:	0424      	lsls	r4, r4, #16
 800b2d8:	1423      	asrs	r3, r4, #16
 800b2da:	17f2      	asrs	r2, r6, #31
 800b2dc:	0fe4      	lsrs	r4, r4, #31
 800b2de:	429e      	cmp	r6, r3
 800b2e0:	4154      	adcs	r4, r2
        bool tl1_cond = gate_tl1 && (t_x10 <= current_settings.alarm_tl1);
 800b2e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	428b      	cmp	r3, r1
 800b2e8:	d80b      	bhi.n	800b302 <csv_dump_log_entries_with_summary_seek+0x2e2>
 800b2ea:	4a47      	ldr	r2, [pc, #284]	@ (800b408 <csv_dump_log_entries_with_summary_seek+0x3e8>)
 800b2ec:	4b47      	ldr	r3, [pc, #284]	@ (800b40c <csv_dump_log_entries_with_summary_seek+0x3ec>)
 800b2ee:	7812      	ldrb	r2, [r2, #0]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	0212      	lsls	r2, r2, #8
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	0412      	lsls	r2, r2, #16
 800b2f8:	1413      	asrs	r3, r2, #16
 800b2fa:	0ff7      	lsrs	r7, r6, #31
 800b2fc:	17d2      	asrs	r2, r2, #31
 800b2fe:	42b3      	cmp	r3, r6
 800b300:	417a      	adcs	r2, r7
        bool tl2_cond = gate_tl2 && (t_x10 <= current_settings.alarm_tl2);
 800b302:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800b304:	2300      	movs	r3, #0
 800b306:	428f      	cmp	r7, r1
 800b308:	d80b      	bhi.n	800b322 <csv_dump_log_entries_with_summary_seek+0x302>
 800b30a:	4b41      	ldr	r3, [pc, #260]	@ (800b410 <csv_dump_log_entries_with_summary_seek+0x3f0>)
 800b30c:	0ff7      	lsrs	r7, r6, #31
 800b30e:	7819      	ldrb	r1, [r3, #0]
 800b310:	4b40      	ldr	r3, [pc, #256]	@ (800b414 <csv_dump_log_entries_with_summary_seek+0x3f4>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	021b      	lsls	r3, r3, #8
 800b316:	430b      	orrs	r3, r1
 800b318:	041b      	lsls	r3, r3, #16
 800b31a:	1419      	asrs	r1, r3, #16
 800b31c:	17db      	asrs	r3, r3, #31
 800b31e:	42b1      	cmp	r1, r6
 800b320:	417b      	adcs	r3, r7

        // 카운트(현재 방식: 조건 만족 샘플 수 기반)
        if (rh1_cond) log_csv.logging_summary.RH1_alarm_count++;
 800b322:	2d00      	cmp	r5, #0
 800b324:	d005      	beq.n	800b332 <csv_dump_log_entries_with_summary_seek+0x312>
 800b326:	26b8      	movs	r6, #184	@ 0xb8
 800b328:	492d      	ldr	r1, [pc, #180]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b32a:	0076      	lsls	r6, r6, #1
 800b32c:	5b8d      	ldrh	r5, [r1, r6]
 800b32e:	3501      	adds	r5, #1
 800b330:	538d      	strh	r5, [r1, r6]
        if (rh2_cond) log_csv.logging_summary.RH2_alarm_count++;
 800b332:	2800      	cmp	r0, #0
 800b334:	d005      	beq.n	800b342 <csv_dump_log_entries_with_summary_seek+0x322>
 800b336:	25b9      	movs	r5, #185	@ 0xb9
 800b338:	4929      	ldr	r1, [pc, #164]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b33a:	006d      	lsls	r5, r5, #1
 800b33c:	5b48      	ldrh	r0, [r1, r5]
 800b33e:	3001      	adds	r0, #1
 800b340:	5348      	strh	r0, [r1, r5]
        if (th1_cond) log_csv.logging_summary.TH1_alarm_count++;
 800b342:	4661      	mov	r1, ip
 800b344:	2900      	cmp	r1, #0
 800b346:	d005      	beq.n	800b354 <csv_dump_log_entries_with_summary_seek+0x334>
 800b348:	25ba      	movs	r5, #186	@ 0xba
 800b34a:	4925      	ldr	r1, [pc, #148]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b34c:	006d      	lsls	r5, r5, #1
 800b34e:	5b48      	ldrh	r0, [r1, r5]
 800b350:	3001      	adds	r0, #1
 800b352:	5348      	strh	r0, [r1, r5]
        if (th2_cond) log_csv.logging_summary.TH2_alarm_count++;
 800b354:	2c00      	cmp	r4, #0
 800b356:	d005      	beq.n	800b364 <csv_dump_log_entries_with_summary_seek+0x344>
 800b358:	24bb      	movs	r4, #187	@ 0xbb
 800b35a:	4921      	ldr	r1, [pc, #132]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b35c:	0064      	lsls	r4, r4, #1
 800b35e:	5b08      	ldrh	r0, [r1, r4]
 800b360:	3001      	adds	r0, #1
 800b362:	5308      	strh	r0, [r1, r4]
        if (tl1_cond) log_csv.logging_summary.TL1_alarm_count++;
 800b364:	2a00      	cmp	r2, #0
 800b366:	d005      	beq.n	800b374 <csv_dump_log_entries_with_summary_seek+0x354>
 800b368:	20bc      	movs	r0, #188	@ 0xbc
 800b36a:	4a1d      	ldr	r2, [pc, #116]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b36c:	0040      	lsls	r0, r0, #1
 800b36e:	5a11      	ldrh	r1, [r2, r0]
 800b370:	3101      	adds	r1, #1
 800b372:	5211      	strh	r1, [r2, r0]
        if (tl2_cond) log_csv.logging_summary.TL2_alarm_count++;
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <csv_dump_log_entries_with_summary_seek+0x364>
 800b378:	21bd      	movs	r1, #189	@ 0xbd
 800b37a:	4b19      	ldr	r3, [pc, #100]	@ (800b3e0 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800b37c:	0049      	lsls	r1, r1, #1
 800b37e:	5a5a      	ldrh	r2, [r3, r1]
 800b380:	3201      	adds	r2, #1
 800b382:	525a      	strh	r2, [r3, r1]
//
//        if (tl2_cond) { if (!tl2_lat) { log_csv.logging_summary.TL2_alarm_count++; tl2_lat = true; } }
//        else          { tl2_lat = false; }


        snprintf(tmp_buff, sizeof(tmp_buff),
 800b384:	2050      	movs	r0, #80	@ 0x50
 800b386:	2240      	movs	r2, #64	@ 0x40
 800b388:	a91a      	add	r1, sp, #104	@ 0x68
 800b38a:	1809      	adds	r1, r1, r0
 800b38c:	7809      	ldrb	r1, [r1, #0]
 800b38e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b390:	189b      	adds	r3, r3, r2
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	9109      	str	r1, [sp, #36]	@ 0x24
 800b396:	a978      	add	r1, sp, #480	@ 0x1e0
 800b398:	9108      	str	r1, [sp, #32]
 800b39a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b39c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800b39e:	9006      	str	r0, [sp, #24]
 800b3a0:	9107      	str	r1, [sp, #28]
 800b3a2:	20fa      	movs	r0, #250	@ 0xfa
 800b3a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b3a6:	00c0      	lsls	r0, r0, #3
 800b3a8:	9105      	str	r1, [sp, #20]
 800b3aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b3ac:	4a1a      	ldr	r2, [pc, #104]	@ (800b418 <csv_dump_log_entries_with_summary_seek+0x3f8>)
 800b3ae:	9104      	str	r1, [sp, #16]
 800b3b0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b3b2:	2601      	movs	r6, #1
 800b3b4:	9103      	str	r1, [sp, #12]
 800b3b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b3b8:	9102      	str	r1, [sp, #8]
 800b3ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b3bc:	9101      	str	r1, [sp, #4]
 800b3be:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b3c0:	1809      	adds	r1, r1, r0
 800b3c2:	e02b      	b.n	800b41c <csv_dump_log_entries_with_summary_seek+0x3fc>
 800b3c4:	fffff8dc 	.word	0xfffff8dc
 800b3c8:	20000b50 	.word	0x20000b50
 800b3cc:	20000154 	.word	0x20000154
 800b3d0:	41200000 	.word	0x41200000
 800b3d4:	42c80000 	.word	0x42c80000
 800b3d8:	0801eecd 	.word	0x0801eecd
 800b3dc:	20002c60 	.word	0x20002c60
 800b3e0:	20000058 	.word	0x20000058
 800b3e4:	0801ef67 	.word	0x0801ef67
 800b3e8:	0000ffff 	.word	0x0000ffff
 800b3ec:	0801f886 	.word	0x0801f886
 800b3f0:	20002c21 	.word	0x20002c21
 800b3f4:	20002bac 	.word	0x20002bac
 800b3f8:	20002c41 	.word	0x20002c41
 800b3fc:	20002c42 	.word	0x20002c42
 800b400:	20002c4a 	.word	0x20002c4a
 800b404:	20002c49 	.word	0x20002c49
 800b408:	20002c44 	.word	0x20002c44
 800b40c:	20002c43 	.word	0x20002c43
 800b410:	20002c4b 	.word	0x20002c4b
 800b414:	20002c4c 	.word	0x20002c4c
 800b418:	0801efd2 	.word	0x0801efd2
 800b41c:	9100      	str	r1, [sp, #0]
 800b41e:	2180      	movs	r1, #128	@ 0x80
 800b420:	a838      	add	r0, sp, #224	@ 0xe0
 800b422:	0049      	lsls	r1, r1, #1
 800b424:	f00e ff14 	bl	801a250 <sniprintf>
            "%u,%04u-%02u-%02u,%02u:%02u:%02u,%.1f,%s,0x%02X\n",
            entry.index,
            2000 + entry.year, entry.month, entry.day,
            entry.hour, entry.minute, entry.second,
            temp, rad_str, entry.mark);
        fatfs_write_str(&csv_file, tmp_buff);
 800b428:	4995      	ldr	r1, [pc, #596]	@ (800b680 <csv_dump_log_entries_with_summary_seek+0x660>)
 800b42a:	a838      	add	r0, sp, #224	@ 0xe0
 800b42c:	f00a fb34 	bl	8015a98 <f_puts>
    for (uint32_t i = 0; i < max_idx; i++) {
 800b430:	4b94      	ldr	r3, [pc, #592]	@ (800b684 <csv_dump_log_entries_with_summary_seek+0x664>)
 800b432:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b434:	429a      	cmp	r2, r3
 800b436:	d000      	beq.n	800b43a <csv_dump_log_entries_with_summary_seek+0x41a>
 800b438:	e0e6      	b.n	800b608 <csv_dump_log_entries_with_summary_seek+0x5e8>
 800b43a:	0015      	movs	r5, r2
        LOG_APP("[ERROR] No valid entries found!\n");
        return;
    }

    // 4. 평균 계산 및 구조체 반영
    float avg_temp = sum_temp / valid_count;
 800b43c:	0028      	movs	r0, r5
 800b43e:	f7f8 f987 	bl	8003750 <__aeabi_ui2d>
 800b442:	000b      	movs	r3, r1
 800b444:	0002      	movs	r2, r0
 800b446:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b448:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b44a:	f7f6 fdcb 	bl	8001fe4 <__aeabi_ddiv>
 800b44e:	f7f8 f9eb 	bl	8003828 <__aeabi_d2f>
    float avg_dose = (valid_rad_count ? (sum_dose / valid_rad_count) : 0.0f);
 800b452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b454:	2600      	movs	r6, #0
    float avg_temp = sum_temp / valid_count;
 800b456:	9014      	str	r0, [sp, #80]	@ 0x50
    float avg_dose = (valid_rad_count ? (sum_dose / valid_rad_count) : 0.0f);
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <csv_dump_log_entries_with_summary_seek+0x454>
 800b45c:	0018      	movs	r0, r3
 800b45e:	f7f8 f977 	bl	8003750 <__aeabi_ui2d>
 800b462:	0002      	movs	r2, r0
 800b464:	000b      	movs	r3, r1
 800b466:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b468:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b46a:	f7f6 fdbb 	bl	8001fe4 <__aeabi_ddiv>
 800b46e:	f7f8 f9db 	bl	8003828 <__aeabi_d2f>
 800b472:	1c06      	adds	r6, r0, #0
    float mkt = avg_temp;

    log_csv.logging_summary.average_temp = avg_temp;
 800b474:	4c84      	ldr	r4, [pc, #528]	@ (800b688 <csv_dump_log_entries_with_summary_seek+0x668>)
 800b476:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b478:	4a84      	ldr	r2, [pc, #528]	@ (800b68c <csv_dump_log_entries_with_summary_seek+0x66c>)
 800b47a:	64e3      	str	r3, [r4, #76]	@ 0x4c
    log_csv.logging_summary.average_radiation = avg_dose;
    log_csv.logging_summary.mean_kinetic_temp = mkt;
 800b47c:	65a3      	str	r3, [r4, #88]	@ 0x58

    log_csv.logging_summary.start_time = (file_log_time_t){
 800b47e:	23ac      	movs	r3, #172	@ 0xac
 800b480:	0017      	movs	r7, r2
 800b482:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	54fa      	strb	r2, [r7, r3]
 800b488:	235a      	movs	r3, #90	@ 0x5a
 800b48a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b48c:	33ff      	adds	r3, #255	@ 0xff
 800b48e:	54fa      	strb	r2, [r7, r3]
 800b490:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b492:	3301      	adds	r3, #1
 800b494:	54fa      	strb	r2, [r7, r3]
 800b496:	235c      	movs	r3, #92	@ 0x5c
 800b498:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b49a:	33ff      	adds	r3, #255	@ 0xff
 800b49c:	54fa      	strb	r2, [r7, r3]
 800b49e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	54fa      	strb	r2, [r7, r3]
 800b4a4:	235e      	movs	r3, #94	@ 0x5e
 800b4a6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800b4a8:	33ff      	adds	r3, #255	@ 0xff
 800b4aa:	54fa      	strb	r2, [r7, r3]
        .year = first.year, .month = first.month, .day = first.day,
        .hour = first.hour, .minute = first.minute, .second = first.second };

    log_csv.logging_summary.stop_time = (file_log_time_t){
 800b4ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	54fa      	strb	r2, [r7, r3]
 800b4b2:	2360      	movs	r3, #96	@ 0x60
 800b4b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b4b6:	33ff      	adds	r3, #255	@ 0xff
 800b4b8:	54fa      	strb	r2, [r7, r3]
 800b4ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4bc:	3301      	adds	r3, #1
 800b4be:	54fa      	strb	r2, [r7, r3]
 800b4c0:	2362      	movs	r3, #98	@ 0x62
 800b4c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b4c4:	33ff      	adds	r3, #255	@ 0xff
 800b4c6:	54fa      	strb	r2, [r7, r3]
 800b4c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	54fa      	strb	r2, [r7, r3]
 800b4ce:	2364      	movs	r3, #100	@ 0x64
 800b4d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4d2:	33ff      	adds	r3, #255	@ 0xff
 800b4d4:	54fa      	strb	r2, [r7, r3]
        .year = last.year, .month = last.month, .day = last.day,
        .hour = last.hour, .minute = last.minute, .second = last.second };

    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b4d6:	4b6e      	ldr	r3, [pc, #440]	@ (800b690 <csv_dump_log_entries_with_summary_seek+0x670>)
 800b4d8:	496e      	ldr	r1, [pc, #440]	@ (800b694 <csv_dump_log_entries_with_summary_seek+0x674>)
 800b4da:	0018      	movs	r0, r3
    log_csv.logging_summary.average_radiation = avg_dose;
 800b4dc:	6566      	str	r6, [r4, #84]	@ 0x54
    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b4de:	3076      	adds	r0, #118	@ 0x76
 800b4e0:	7809      	ldrb	r1, [r1, #0]
 800b4e2:	7800      	ldrb	r0, [r0, #0]
 800b4e4:	1e6a      	subs	r2, r5, #1
 800b4e6:	0200      	lsls	r0, r0, #8
 800b4e8:	4308      	orrs	r0, r1
 800b4ea:	0019      	movs	r1, r3
 800b4ec:	3177      	adds	r1, #119	@ 0x77
 800b4ee:	7809      	ldrb	r1, [r1, #0]
 800b4f0:	3378      	adds	r3, #120	@ 0x78
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	0409      	lsls	r1, r1, #16
 800b4f6:	4301      	orrs	r1, r0
 800b4f8:	061b      	lsls	r3, r3, #24
 800b4fa:	430b      	orrs	r3, r1
 800b4fc:	4353      	muls	r3, r2
    log_csv.logging_summary.data_points_temp_count = idx_temp;
    log_csv.logging_summary.data_points_radiation_count = idx_rad;

    // 5. 평균 정보 문자열 생성 및 덮어쓰기
    char avg_text[320] = {0};
 800b4fe:	22a0      	movs	r2, #160	@ 0xa0
    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b500:	66a3      	str	r3, [r4, #104]	@ 0x68
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b502:	4b65      	ldr	r3, [pc, #404]	@ (800b698 <csv_dump_log_entries_with_summary_seek+0x678>)
    char avg_text[320] = {0};
 800b504:	0052      	lsls	r2, r2, #1
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b506:	930d      	str	r3, [sp, #52]	@ 0x34
 800b508:	881b      	ldrh	r3, [r3, #0]
    char avg_text[320] = {0};
 800b50a:	2100      	movs	r1, #0
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b50c:	66e3      	str	r3, [r4, #108]	@ 0x6c
    log_csv.logging_summary.data_points_radiation_count = idx_rad;
 800b50e:	4b63      	ldr	r3, [pc, #396]	@ (800b69c <csv_dump_log_entries_with_summary_seek+0x67c>)
    char avg_text[320] = {0};
 800b510:	a878      	add	r0, sp, #480	@ 0x1e0
    log_csv.logging_summary.data_points_radiation_count = idx_rad;
 800b512:	930e      	str	r3, [sp, #56]	@ 0x38
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	6723      	str	r3, [r4, #112]	@ 0x70
    char avg_text[320] = {0};
 800b518:	f00e ffec 	bl	801a4f4 <memset>
    int avg_offset = 0;
    char time_str[32], tmp[20];

    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b51c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b51e:	f7f8 f93b 	bl	8003798 <__aeabi_f2d>
 800b522:	900a      	str	r0, [sp, #40]	@ 0x28
 800b524:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b526:	9000      	str	r0, [sp, #0]
 800b528:	9101      	str	r1, [sp, #4]
 800b52a:	21a0      	movs	r1, #160	@ 0xa0
 800b52c:	4a5c      	ldr	r2, [pc, #368]	@ (800b6a0 <csv_dump_log_entries_with_summary_seek+0x680>)
 800b52e:	0049      	lsls	r1, r1, #1
 800b530:	a878      	add	r0, sp, #480	@ 0x1e0
 800b532:	f00e fe8d 	bl	801a250 <sniprintf>
        "Average Temperature:   %6.1f\n", avg_temp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b536:	23a0      	movs	r3, #160	@ 0xa0
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	1a1a      	subs	r2, r3, r0
 800b53c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b53e:	aa78      	add	r2, sp, #480	@ 0x1e0
 800b540:	1812      	adds	r2, r2, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b542:	0005      	movs	r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b544:	1c30      	adds	r0, r6, #0
 800b546:	9210      	str	r2, [sp, #64]	@ 0x40
 800b548:	f7f8 f926 	bl	8003798 <__aeabi_f2d>
 800b54c:	4a55      	ldr	r2, [pc, #340]	@ (800b6a4 <csv_dump_log_entries_with_summary_seek+0x684>)
 800b54e:	9000      	str	r0, [sp, #0]
 800b550:	9101      	str	r1, [sp, #4]
 800b552:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b554:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b556:	f00e fe7b 	bl	801a250 <sniprintf>
        "Average Radiation:     %6.1f\n", avg_dose);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b55a:	26a0      	movs	r6, #160	@ 0xa0
 800b55c:	4b52      	ldr	r3, [pc, #328]	@ (800b6a8 <csv_dump_log_entries_with_summary_seek+0x688>)
 800b55e:	0076      	lsls	r6, r6, #1
 800b560:	930f      	str	r3, [sp, #60]	@ 0x3c
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b562:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b564:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b566:	1b71      	subs	r1, r6, r5
 800b568:	1958      	adds	r0, r3, r5
 800b56a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b56c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b56e:	9200      	str	r2, [sp, #0]
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b574:	f00e fe6c 	bl	801a250 <sniprintf>
 800b578:	a930      	add	r1, sp, #192	@ 0xc0
 800b57a:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b57c:	2220      	movs	r2, #32
 800b57e:	484b      	ldr	r0, [pc, #300]	@ (800b6ac <csv_dump_log_entries_with_summary_seek+0x68c>)
 800b580:	f7ff fd2c 	bl	800afdc <time_to_dmyhms_string.part.0>
        "MKT:                   %6.1f\n", mkt);

    time_to_dmyhms_string(&log_csv.logging_summary.start_time, time_str, sizeof(time_str));
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b584:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b586:	1b71      	subs	r1, r6, r5
 800b588:	1958      	adds	r0, r3, r5
 800b58a:	4a49      	ldr	r2, [pc, #292]	@ (800b6b0 <csv_dump_log_entries_with_summary_seek+0x690>)
 800b58c:	ab30      	add	r3, sp, #192	@ 0xc0
 800b58e:	f00e fe5f 	bl	801a250 <sniprintf>
 800b592:	a930      	add	r1, sp, #192	@ 0xc0
 800b594:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b596:	2220      	movs	r2, #32
 800b598:	4846      	ldr	r0, [pc, #280]	@ (800b6b4 <csv_dump_log_entries_with_summary_seek+0x694>)
 800b59a:	f7ff fd1f 	bl	800afdc <time_to_dmyhms_string.part.0>
        "Start Time:            %s\n", time_str);

    time_to_dmyhms_string(&log_csv.logging_summary.stop_time, time_str, sizeof(time_str));
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b59e:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b5a0:	1b71      	subs	r1, r6, r5
 800b5a2:	1958      	adds	r0, r3, r5
 800b5a4:	4a44      	ldr	r2, [pc, #272]	@ (800b6b8 <csv_dump_log_entries_with_summary_seek+0x698>)
 800b5a6:	ab30      	add	r3, sp, #192	@ 0xc0
 800b5a8:	f00e fe52 	bl	801a250 <sniprintf>
 800b5ac:	a925      	add	r1, sp, #148	@ 0x94
 800b5ae:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0) {
 800b5b0:	2214      	movs	r2, #20
 800b5b2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b5b4:	f7ff fba4 	bl	800ad00 <seconds_to_dhms_string_long.part.0>
        "Stop Time:             %s\n", time_str);

    seconds_to_dhms_string_long(log_csv.logging_summary.elapsed_time_sec, tmp, sizeof(tmp));

    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5b8:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b5ba:	1b71      	subs	r1, r6, r5
 800b5bc:	1958      	adds	r0, r3, r5
 800b5be:	4a3f      	ldr	r2, [pc, #252]	@ (800b6bc <csv_dump_log_entries_with_summary_seek+0x69c>)
 800b5c0:	ab25      	add	r3, sp, #148	@ 0x94
 800b5c2:	f00e fe45 	bl	801a250 <sniprintf>
        "Elapsed Time:          %s\n", tmp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5c8:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5ca:	a878      	add	r0, sp, #480	@ 0x1e0
 800b5cc:	1b71      	subs	r1, r6, r5
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	4a3b      	ldr	r2, [pc, #236]	@ (800b6c0 <csv_dump_log_entries_with_summary_seek+0x6a0>)
 800b5d2:	1940      	adds	r0, r0, r5
 800b5d4:	f00e fe3c 	bl	801a250 <sniprintf>
        "Temp Data Points:      %6u\n", idx_temp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5da:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5dc:	a878      	add	r0, sp, #480	@ 0x1e0
 800b5de:	1b71      	subs	r1, r6, r5
 800b5e0:	4a38      	ldr	r2, [pc, #224]	@ (800b6c4 <csv_dump_log_entries_with_summary_seek+0x6a4>)
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	1940      	adds	r0, r0, r5
 800b5e6:	f00e fe33 	bl	801a250 <sniprintf>
        "Rad Data Points:       %6u\n", idx_rad);

    f_lseek(&csv_file, log_csv.csv_fiels_offset.logging_summary_avg_offset);
 800b5ea:	23d0      	movs	r3, #208	@ 0xd0
 800b5ec:	4c24      	ldr	r4, [pc, #144]	@ (800b680 <csv_dump_log_entries_with_summary_seek+0x660>)
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	58f9      	ldr	r1, [r7, r3]
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b5f2:	182d      	adds	r5, r5, r0
    f_lseek(&csv_file, log_csv.csv_fiels_offset.logging_summary_avg_offset);
 800b5f4:	0020      	movs	r0, r4
 800b5f6:	f009 fd73 	bl	80150e0 <f_lseek>

    f_write(&csv_file, avg_text, avg_offset, NULL);
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	002a      	movs	r2, r5
 800b5fe:	0020      	movs	r0, r4
 800b600:	a978      	add	r1, sp, #480	@ 0x1e0
 800b602:	f009 fc31 	bl	8014e68 <f_write>
 800b606:	e038      	b.n	800b67a <csv_dump_log_entries_with_summary_seek+0x65a>
 800b608:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b60a:	e57a      	b.n	800b102 <csv_dump_log_entries_with_summary_seek+0xe2>
            snprintf(rad_str, sizeof(rad_str), "%.2f", dose);
 800b60c:	f7f8 f8c4 	bl	8003798 <__aeabi_f2d>
 800b610:	4c2d      	ldr	r4, [pc, #180]	@ (800b6c8 <csv_dump_log_entries_with_summary_seek+0x6a8>)
 800b612:	9000      	str	r0, [sp, #0]
 800b614:	9101      	str	r1, [sp, #4]
 800b616:	0022      	movs	r2, r4
 800b618:	2110      	movs	r1, #16
 800b61a:	a878      	add	r0, sp, #480	@ 0x1e0
 800b61c:	f00e fe18 	bl	801a250 <sniprintf>
 800b620:	e598      	b.n	800b154 <csv_dump_log_entries_with_summary_seek+0x134>
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b622:	2500      	movs	r5, #0
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b624:	0028      	movs	r0, r5
 800b626:	428f      	cmp	r7, r1
 800b628:	d900      	bls.n	800b62c <csv_dump_log_entries_with_summary_seek+0x60c>
 800b62a:	e638      	b.n	800b29e <csv_dump_log_entries_with_summary_seek+0x27e>
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b62c:	0025      	movs	r5, r4
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b62e:	1e20      	subs	r0, r4, #0
 800b630:	d100      	bne.n	800b634 <csv_dump_log_entries_with_summary_seek+0x614>
 800b632:	e634      	b.n	800b29e <csv_dump_log_entries_with_summary_seek+0x27e>
 800b634:	2500      	movs	r5, #0
 800b636:	4b16      	ldr	r3, [pc, #88]	@ (800b690 <csv_dump_log_entries_with_summary_seek+0x670>)
 800b638:	4824      	ldr	r0, [pc, #144]	@ (800b6cc <csv_dump_log_entries_with_summary_seek+0x6ac>)
 800b63a:	001c      	movs	r4, r3
 800b63c:	349a      	adds	r4, #154	@ 0x9a
 800b63e:	7824      	ldrb	r4, [r4, #0]
 800b640:	7800      	ldrb	r0, [r0, #0]
 800b642:	0224      	lsls	r4, r4, #8
 800b644:	4304      	orrs	r4, r0
 800b646:	0018      	movs	r0, r3
 800b648:	309b      	adds	r0, #155	@ 0x9b
 800b64a:	7800      	ldrb	r0, [r0, #0]
 800b64c:	339c      	adds	r3, #156	@ 0x9c
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	0400      	lsls	r0, r0, #16
 800b652:	4320      	orrs	r0, r4
 800b654:	061b      	lsls	r3, r3, #24
 800b656:	4303      	orrs	r3, r0
 800b658:	2000      	movs	r0, #0
 800b65a:	b292      	uxth	r2, r2
 800b65c:	429a      	cmp	r2, r3
 800b65e:	4140      	adcs	r0, r0
 800b660:	e61d      	b.n	800b29e <csv_dump_log_entries_with_summary_seek+0x27e>
    if (!first_found || valid_count == 0) {
 800b662:	2e00      	cmp	r6, #0
 800b664:	d002      	beq.n	800b66c <csv_dump_log_entries_with_summary_seek+0x64c>
 800b666:	2d00      	cmp	r5, #0
 800b668:	d000      	beq.n	800b66c <csv_dump_log_entries_with_summary_seek+0x64c>
 800b66a:	e6e7      	b.n	800b43c <csv_dump_log_entries_with_summary_seek+0x41c>
        LOG_APP("[ERROR] No valid entries found!\n");
 800b66c:	4b18      	ldr	r3, [pc, #96]	@ (800b6d0 <csv_dump_log_entries_with_summary_seek+0x6b0>)
 800b66e:	4a19      	ldr	r2, [pc, #100]	@ (800b6d4 <csv_dump_log_entries_with_summary_seek+0x6b4>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4919      	ldr	r1, [pc, #100]	@ (800b6d8 <csv_dump_log_entries_with_summary_seek+0x6b8>)
 800b674:	68d8      	ldr	r0, [r3, #12]
 800b676:	f00e fd45 	bl	801a104 <fiprintf>
}
 800b67a:	4b18      	ldr	r3, [pc, #96]	@ (800b6dc <csv_dump_log_entries_with_summary_seek+0x6bc>)
 800b67c:	449d      	add	sp, r3
 800b67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b680:	20002c60 	.word	0x20002c60
 800b684:	0000c30c 	.word	0x0000c30c
 800b688:	20000154 	.word	0x20000154
 800b68c:	20000058 	.word	0x20000058
 800b690:	20002bac 	.word	0x20002bac
 800b694:	20002c21 	.word	0x20002c21
 800b698:	200004fe 	.word	0x200004fe
 800b69c:	20000500 	.word	0x20000500
 800b6a0:	0801f029 	.word	0x0801f029
 800b6a4:	0801f047 	.word	0x0801f047
 800b6a8:	0801f065 	.word	0x0801f065
 800b6ac:	200001b0 	.word	0x200001b0
 800b6b0:	0801f083 	.word	0x0801f083
 800b6b4:	200001b6 	.word	0x200001b6
 800b6b8:	0801f09e 	.word	0x0801f09e
 800b6bc:	0801f0b9 	.word	0x0801f0b9
 800b6c0:	0801f0d4 	.word	0x0801f0d4
 800b6c4:	0801f0f0 	.word	0x0801f0f0
 800b6c8:	0801efcd 	.word	0x0801efcd
 800b6cc:	20002c45 	.word	0x20002c45
 800b6d0:	200002cc 	.word	0x200002cc
 800b6d4:	0801e879 	.word	0x0801e879
 800b6d8:	0801f003 	.word	0x0801f003
 800b6dc:	00000724 	.word	0x00000724

0800b6e0 <csv_alarm_summary_prealloc.isra.0>:
static void csv_alarm_summary_prealloc(const DeviceSettings *dev)
 800b6e0:	b530      	push	{r4, r5, lr}
 800b6e2:	4c1f      	ldr	r4, [pc, #124]	@ (800b760 <csv_alarm_summary_prealloc.isra.0+0x80>)
    char buf[256] = {0};
 800b6e4:	2100      	movs	r1, #0
static void csv_alarm_summary_prealloc(const DeviceSettings *dev)
 800b6e6:	44a5      	add	sp, r4
    char buf[256] = {0};
 800b6e8:	2480      	movs	r4, #128	@ 0x80
 800b6ea:	0064      	lsls	r4, r4, #1
 800b6ec:	0022      	movs	r2, r4
 800b6ee:	a808      	add	r0, sp, #32
 800b6f0:	f00e ff00 	bl	801a4f4 <memset>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b6f4:	491b      	ldr	r1, [pc, #108]	@ (800b764 <csv_alarm_summary_prealloc.isra.0+0x84>)
 800b6f6:	a808      	add	r0, sp, #32
 800b6f8:	f00e ffb3 	bl	801a662 <strcpy>
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b6fc:	4669      	mov	r1, sp
 800b6fe:	2220      	movs	r2, #32
 800b700:	4819      	ldr	r0, [pc, #100]	@ (800b768 <csv_alarm_summary_prealloc.isra.0+0x88>)
 800b702:	f7ff fc6b 	bl	800afdc <time_to_dmyhms_string.part.0>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b706:	206d      	movs	r0, #109	@ 0x6d
 800b708:	466b      	mov	r3, sp
 800b70a:	21b3      	movs	r1, #179	@ 0xb3
 800b70c:	4a17      	ldr	r2, [pc, #92]	@ (800b76c <csv_alarm_summary_prealloc.isra.0+0x8c>)
 800b70e:	4468      	add	r0, sp
 800b710:	f00e fd9e 	bl	801a250 <sniprintf>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b714:	ab08      	add	r3, sp, #32
    off += snprintf(buf + off, sizeof(buf)-off,
 800b716:	304d      	adds	r0, #77	@ 0x4d
    off += snprintf(buf + off, sizeof(buf)-off,
 800b718:	1a21      	subs	r1, r4, r0
 800b71a:	4a15      	ldr	r2, [pc, #84]	@ (800b770 <csv_alarm_summary_prealloc.isra.0+0x90>)
 800b71c:	1818      	adds	r0, r3, r0
 800b71e:	f00e fd97 	bl	801a250 <sniprintf>
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b722:	23c8      	movs	r3, #200	@ 0xc8
 800b724:	4c13      	ldr	r4, [pc, #76]	@ (800b774 <csv_alarm_summary_prealloc.isra.0+0x94>)
 800b726:	4d14      	ldr	r5, [pc, #80]	@ (800b778 <csv_alarm_summary_prealloc.isra.0+0x98>)
 800b728:	6962      	ldr	r2, [r4, #20]
    fatfs_write_str(&csv_file, buf);
 800b72a:	0021      	movs	r1, r4
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b72c:	005b      	lsls	r3, r3, #1
    fatfs_write_str(&csv_file, buf);
 800b72e:	a808      	add	r0, sp, #32
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b730:	50ea      	str	r2, [r5, r3]
    fatfs_write_str(&csv_file, buf);
 800b732:	f00a f9b1 	bl	8015a98 <f_puts>
    log_csv.csv_fiels_offset.alarm_summary_fill_offset = f_tell(&csv_file);
 800b736:	23ca      	movs	r3, #202	@ 0xca
 800b738:	6962      	ldr	r2, [r4, #20]
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	50ea      	str	r2, [r5, r3]
    memset(pad, ' ', sizeof(pad));
 800b73e:	2580      	movs	r5, #128	@ 0x80
 800b740:	00ed      	lsls	r5, r5, #3
 800b742:	002a      	movs	r2, r5
 800b744:	2120      	movs	r1, #32
 800b746:	a848      	add	r0, sp, #288	@ 0x120
 800b748:	f00e fed4 	bl	801a4f4 <memset>
    f_write(&csv_file, pad, sizeof(pad), NULL);
 800b74c:	2300      	movs	r3, #0
 800b74e:	002a      	movs	r2, r5
 800b750:	0020      	movs	r0, r4
 800b752:	a948      	add	r1, sp, #288	@ 0x120
 800b754:	f009 fb88 	bl	8014e68 <f_write>
}
 800b758:	4b08      	ldr	r3, [pc, #32]	@ (800b77c <csv_alarm_summary_prealloc.isra.0+0x9c>)
 800b75a:	449d      	add	sp, r3
 800b75c:	bd30      	pop	{r4, r5, pc}
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	fffffadc 	.word	0xfffffadc
 800b764:	0801f10c 	.word	0x0801f10c
 800b768:	20000088 	.word	0x20000088
 800b76c:	0801f15a 	.word	0x0801f15a
 800b770:	0801f178 	.word	0x0801f178
 800b774:	20002c60 	.word	0x20002c60
 800b778:	20000058 	.word	0x20000058
 800b77c:	00000524 	.word	0x00000524

0800b780 <csv_gen_template_file>:
UINT csv_gen_template_file(const DeviceSettings *dev_setting) {
 800b780:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = f_stat (csv_file_name,&fno);
 800b782:	4f3c      	ldr	r7, [pc, #240]	@ (800b874 <csv_gen_template_file+0xf4>)
UINT csv_gen_template_file(const DeviceSettings *dev_setting) {
 800b784:	b08f      	sub	sp, #60	@ 0x3c
 800b786:	9000      	str	r0, [sp, #0]
    res = f_stat (csv_file_name,&fno);
 800b788:	a908      	add	r1, sp, #32
 800b78a:	6838      	ldr	r0, [r7, #0]
 800b78c:	f009 fd33 	bl	80151f6 <f_stat>
 800b790:	4d39      	ldr	r5, [pc, #228]	@ (800b878 <csv_gen_template_file+0xf8>)
 800b792:	1e04      	subs	r4, r0, #0
    switch (res)
 800b794:	4e39      	ldr	r6, [pc, #228]	@ (800b87c <csv_gen_template_file+0xfc>)
 800b796:	d009      	beq.n	800b7ac <csv_gen_template_file+0x2c>
 800b798:	2804      	cmp	r0, #4
 800b79a:	d010      	beq.n	800b7be <csv_gen_template_file+0x3e>
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800b79c:	6830      	ldr	r0, [r6, #0]
 800b79e:	0023      	movs	r3, r4
 800b7a0:	002a      	movs	r2, r5
 800b7a2:	4937      	ldr	r1, [pc, #220]	@ (800b880 <csv_gen_template_file+0x100>)
 800b7a4:	68c0      	ldr	r0, [r0, #12]
 800b7a6:	f00e fcad 	bl	801a104 <fiprintf>
        break;
 800b7aa:	e023      	b.n	800b7f4 <csv_gen_template_file+0x74>
        LOG_APP("File '%s' exists \r\n", csv_file_name);
 800b7ac:	6830      	ldr	r0, [r6, #0]
 800b7ae:	002a      	movs	r2, r5
 800b7b0:	4934      	ldr	r1, [pc, #208]	@ (800b884 <csv_gen_template_file+0x104>)
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	68c0      	ldr	r0, [r0, #12]
 800b7b6:	f00e fca5 	bl	801a104 <fiprintf>
    res = f_stat (csv_file_name,&fno);
 800b7ba:	2400      	movs	r4, #0
 800b7bc:	e01a      	b.n	800b7f4 <csv_gen_template_file+0x74>
        LOG_APP("File '%s' not found. Creating new file with header.\n", csv_file_name);
 800b7be:	6830      	ldr	r0, [r6, #0]
 800b7c0:	002a      	movs	r2, r5
 800b7c2:	4931      	ldr	r1, [pc, #196]	@ (800b888 <csv_gen_template_file+0x108>)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	68c0      	ldr	r0, [r0, #12]
 800b7c8:	f00e fc9c 	bl	801a104 <fiprintf>
        res = f_open(&csv_file, csv_file_name, FA_CREATE_NEW | FA_WRITE);
 800b7cc:	4b2f      	ldr	r3, [pc, #188]	@ (800b88c <csv_gen_template_file+0x10c>)
 800b7ce:	2206      	movs	r2, #6
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	f009 fa6f 	bl	8014cb8 <f_open>
 800b7da:	1e04      	subs	r4, r0, #0
        if (res != FR_OK)
 800b7dc:	d00d      	beq.n	800b7fa <csv_gen_template_file+0x7a>
            LOG_APP("Open csv log file failed,Unmount...\r\n");
 800b7de:	6833      	ldr	r3, [r6, #0]
 800b7e0:	002a      	movs	r2, r5
 800b7e2:	492b      	ldr	r1, [pc, #172]	@ (800b890 <csv_gen_template_file+0x110>)
 800b7e4:	68d8      	ldr	r0, [r3, #12]
 800b7e6:	f00e fc8d 	bl	801a104 <fiprintf>
            f_mount(NULL, "", 0);
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4929      	ldr	r1, [pc, #164]	@ (800b894 <csv_gen_template_file+0x114>)
 800b7ee:	0010      	movs	r0, r2
 800b7f0:	f009 fa38 	bl	8014c64 <f_mount>
    return res;
 800b7f4:	0020      	movs	r0, r4
}
 800b7f6:	b00f      	add	sp, #60	@ 0x3c
 800b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const char* header_static[] = {
 800b7fa:	a903      	add	r1, sp, #12
 800b7fc:	000a      	movs	r2, r1
 800b7fe:	4b26      	ldr	r3, [pc, #152]	@ (800b898 <csv_gen_template_file+0x118>)
 800b800:	cb83      	ldmia	r3!, {r0, r1, r7}
 800b802:	c283      	stmia	r2!, {r0, r1, r7}
 800b804:	cb03      	ldmia	r3!, {r0, r1}
 800b806:	c203      	stmia	r2!, {r0, r1}
    log_csv.csv_fiels_offset.device_info_offset = sizeof(header_static) + 1;
 800b808:	22c2      	movs	r2, #194	@ 0xc2
 800b80a:	2115      	movs	r1, #21
 800b80c:	4b23      	ldr	r3, [pc, #140]	@ (800b89c <csv_gen_template_file+0x11c>)
 800b80e:	0052      	lsls	r2, r2, #1
 800b810:	5099      	str	r1, [r3, r2]
        fatfs_write_str(&csv_file, header_static[i]);
 800b812:	00a2      	lsls	r2, r4, #2
 800b814:	ab03      	add	r3, sp, #12
 800b816:	9901      	ldr	r1, [sp, #4]
 800b818:	58d0      	ldr	r0, [r2, r3]
    for (int i = 0; i < sizeof(header_static)/sizeof(header_static[0]); ++i)
 800b81a:	3401      	adds	r4, #1
        fatfs_write_str(&csv_file, header_static[i]);
 800b81c:	f00a f93c 	bl	8015a98 <f_puts>
    for (int i = 0; i < sizeof(header_static)/sizeof(header_static[0]); ++i)
 800b820:	2c05      	cmp	r4, #5
 800b822:	d1f6      	bne.n	800b812 <csv_gen_template_file+0x92>
        csv_device_info(dev_setting);
 800b824:	9800      	ldr	r0, [sp, #0]
 800b826:	f7ff f87b 	bl	800a920 <csv_device_info>
        csv_trip_info(dev_setting);
 800b82a:	9800      	ldr	r0, [sp, #0]
 800b82c:	f7ff f914 	bl	800aa58 <csv_trip_info>
        csv_conf_info(dev_setting);
 800b830:	9800      	ldr	r0, [sp, #0]
 800b832:	f7ff f97f 	bl	800ab34 <csv_conf_info>
        csv_alarm_summary_prealloc(dev_setting);
 800b836:	f7ff ff53 	bl	800b6e0 <csv_alarm_summary_prealloc.isra.0>
        csv_dump_log_entries_with_summary_seek();
 800b83a:	f7ff fbf1 	bl	800b020 <csv_dump_log_entries_with_summary_seek>
        csv_alarm_summary_fill(dev_setting);
 800b83e:	9800      	ldr	r0, [sp, #0]
 800b840:	f7ff fa8e 	bl	800ad60 <csv_alarm_summary_fill>
        LOG_APP("SUCCESS: Created template csv file\r\n");
 800b844:	6833      	ldr	r3, [r6, #0]
 800b846:	002a      	movs	r2, r5
 800b848:	4915      	ldr	r1, [pc, #84]	@ (800b8a0 <csv_gen_template_file+0x120>)
 800b84a:	68d8      	ldr	r0, [r3, #12]
 800b84c:	f00e fc5a 	bl	801a104 <fiprintf>
        LOG_APP("Closing file, Flush...\r\n");
 800b850:	6833      	ldr	r3, [r6, #0]
 800b852:	002a      	movs	r2, r5
 800b854:	4913      	ldr	r1, [pc, #76]	@ (800b8a4 <csv_gen_template_file+0x124>)
 800b856:	68d8      	ldr	r0, [r3, #12]
 800b858:	f00e fc54 	bl	801a104 <fiprintf>
        res = f_close(&csv_file);
 800b85c:	9801      	ldr	r0, [sp, #4]
 800b85e:	f009 fc31 	bl	80150c4 <f_close>
 800b862:	1e04      	subs	r4, r0, #0
        if (res != FR_OK)
 800b864:	d0a9      	beq.n	800b7ba <csv_gen_template_file+0x3a>
            LOG_APP("Close CSV failed\r\n");
 800b866:	6833      	ldr	r3, [r6, #0]
 800b868:	002a      	movs	r2, r5
 800b86a:	490f      	ldr	r1, [pc, #60]	@ (800b8a8 <csv_gen_template_file+0x128>)
 800b86c:	68d8      	ldr	r0, [r3, #12]
 800b86e:	f00e fc49 	bl	801a104 <fiprintf>
            return res;
 800b872:	e7bf      	b.n	800b7f4 <csv_gen_template_file+0x74>
 800b874:	20000054 	.word	0x20000054
 800b878:	0801e879 	.word	0x0801e879
 800b87c:	200002cc 	.word	0x200002cc
 800b880:	0801f2a6 	.word	0x0801f2a6
 800b884:	0801f1c8 	.word	0x0801f1c8
 800b888:	0801f1e1 	.word	0x0801f1e1
 800b88c:	20002c60 	.word	0x20002c60
 800b890:	0801f21b 	.word	0x0801f21b
 800b894:	0801f3a0 	.word	0x0801f3a0
 800b898:	0801ca28 	.word	0x0801ca28
 800b89c:	20000058 	.word	0x20000058
 800b8a0:	0801f246 	.word	0x0801f246
 800b8a4:	0801f270 	.word	0x0801f270
 800b8a8:	0801f28e 	.word	0x0801f28e

0800b8ac <seconds_to_hms_string>:
{
 800b8ac:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0) {
 800b8ae:	2900      	cmp	r1, #0
 800b8b0:	d003      	beq.n	800b8ba <seconds_to_hms_string+0xe>
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	d001      	beq.n	800b8ba <seconds_to_hms_string+0xe>
 800b8b6:	f7ff f919 	bl	800aaec <seconds_to_hms_string.part.0>
}
 800b8ba:	bd10      	pop	{r4, pc}

0800b8bc <seconds_to_dhms_string_long>:
{
 800b8bc:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0) {
 800b8be:	2900      	cmp	r1, #0
 800b8c0:	d003      	beq.n	800b8ca <seconds_to_dhms_string_long+0xe>
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	d001      	beq.n	800b8ca <seconds_to_dhms_string_long+0xe>
 800b8c6:	f7ff fa1b 	bl	800ad00 <seconds_to_dhms_string_long.part.0>
}
 800b8ca:	bd10      	pop	{r4, pc}

0800b8cc <time_to_dmyhms_string>:
{
 800b8cc:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b8ce:	2900      	cmp	r1, #0
 800b8d0:	d004      	beq.n	800b8dc <time_to_dmyhms_string+0x10>
 800b8d2:	2a00      	cmp	r2, #0
 800b8d4:	d002      	beq.n	800b8dc <time_to_dmyhms_string+0x10>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d101      	bne.n	800b8de <time_to_dmyhms_string+0x12>
        if(buffer != NULL && buffer_size > 0) buffer[0] = '\0';
 800b8da:	7008      	strb	r0, [r1, #0]
}
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	f7ff fb7d 	bl	800afdc <time_to_dmyhms_string.part.0>
 800b8e2:	e7fb      	b.n	800b8dc <time_to_dmyhms_string+0x10>

0800b8e4 <convert_month_to_string>:
    return ((month >= 1 && month <= 12) ? months[month] : months[0]);
 800b8e4:	1e42      	subs	r2, r0, #1
{
 800b8e6:	0003      	movs	r3, r0
    return ((month >= 1 && month <= 12) ? months[month] : months[0]);
 800b8e8:	4803      	ldr	r0, [pc, #12]	@ (800b8f8 <convert_month_to_string+0x14>)
 800b8ea:	2a0b      	cmp	r2, #11
 800b8ec:	d802      	bhi.n	800b8f4 <convert_month_to_string+0x10>
 800b8ee:	4a03      	ldr	r2, [pc, #12]	@ (800b8fc <convert_month_to_string+0x18>)
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	5898      	ldr	r0, [r3, r2]
}
 800b8f4:	4770      	bx	lr
 800b8f6:	46c0      	nop			@ (mov r8, r8)
 800b8f8:	0801eeac 	.word	0x0801eeac
 800b8fc:	08020450 	.word	0x08020450

0800b900 <csv_get_logging_summary>:
    fatfs_write_str(&csv_file, tmp_buff);
}

const logging_summary_t* csv_get_logging_summary(void)
{
    return &log_csv.logging_summary;
 800b900:	4800      	ldr	r0, [pc, #0]	@ (800b904 <csv_get_logging_summary+0x4>)
}
 800b902:	4770      	bx	lr
 800b904:	20000198 	.word	0x20000198

0800b908 <generate_pdf_raw_report>:
    sprintf(work_buffer, "startxref\n%lu\n%%EOF\n", (unsigned long)xref_offset);
    fatfs_write_string(&pdf_file, work_buffer);
}


static void generate_pdf_raw_report(void) {
 800b908:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("PDF First Page Make\r\n");
 800b90a:	4892      	ldr	r0, [pc, #584]	@ (800bb54 <generate_pdf_raw_report+0x24c>)
static void generate_pdf_raw_report(void) {
 800b90c:	b0cb      	sub	sp, #300	@ 0x12c
	printf("PDF First Page Make\r\n");
 800b90e:	f00e fc95 	bl	801a23c <puts>
    fatfs_write_string(&pdf_file, TPDF_HEADER);
 800b912:	4c91      	ldr	r4, [pc, #580]	@ (800bb58 <generate_pdf_raw_report+0x250>)
 800b914:	4891      	ldr	r0, [pc, #580]	@ (800bb5c <generate_pdf_raw_report+0x254>)
 800b916:	0021      	movs	r1, r4
 800b918:	f00a f8be 	bl	8015a98 <f_puts>
    sprintf(content_buffer, "<<\n/Type /Catalog\n/Pages %d 0 R >>", TPDF_OBJ_PAGES_KID);
 800b91c:	2203      	movs	r2, #3
 800b91e:	4990      	ldr	r1, [pc, #576]	@ (800bb60 <generate_pdf_raw_report+0x258>)
 800b920:	a80a      	add	r0, sp, #40	@ 0x28
 800b922:	f00e fccb 	bl	801a2bc <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_CATALOG, content_buffer, &pdf_monitor);
 800b926:	4d8f      	ldr	r5, [pc, #572]	@ (800bb64 <generate_pdf_raw_report+0x25c>)
 800b928:	2102      	movs	r1, #2
 800b92a:	002b      	movs	r3, r5
 800b92c:	0020      	movs	r0, r4
 800b92e:	aa0a      	add	r2, sp, #40	@ 0x28
 800b930:	f00d fa1e 	bl	8018d70 <tpdf_add_new_obj>
    sprintf(content_buffer,"<<\n/Type /Font\n/Subtype /TrueType\n/Name /F1\n/BaseFont /%s\n/Encoding /WinAnsiEncoding\n>>",TPDF_FONT);
 800b934:	4a8c      	ldr	r2, [pc, #560]	@ (800bb68 <generate_pdf_raw_report+0x260>)
 800b936:	498d      	ldr	r1, [pc, #564]	@ (800bb6c <generate_pdf_raw_report+0x264>)
 800b938:	a80a      	add	r0, sp, #40	@ 0x28
 800b93a:	f00e fcbf 	bl	801a2bc <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_FONT_ARIAL, content_buffer, &pdf_monitor);
 800b93e:	002b      	movs	r3, r5
 800b940:	2104      	movs	r1, #4
 800b942:	0020      	movs	r0, r4
 800b944:	aa0a      	add	r2, sp, #40	@ 0x28
 800b946:	f00d fa13 	bl	8018d70 <tpdf_add_new_obj>
    sprintf(content_buffer,"<<\n/Type /Font\n/Subtype /TrueType\n/Name /F2\n/BaseFont /%s\n/Encoding /WinAnsiEncoding\n>>",TPDF_FONT_BOLD);
 800b94a:	4a89      	ldr	r2, [pc, #548]	@ (800bb70 <generate_pdf_raw_report+0x268>)
 800b94c:	4989      	ldr	r1, [pc, #548]	@ (800bb74 <generate_pdf_raw_report+0x26c>)
 800b94e:	a80a      	add	r0, sp, #40	@ 0x28
 800b950:	f00e fcb4 	bl	801a2bc <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_FONT_ARIAL_BOLD, content_buffer, &pdf_monitor);
 800b954:	002b      	movs	r3, r5
 800b956:	2105      	movs	r1, #5
 800b958:	0020      	movs	r0, r4
 800b95a:	aa0a      	add	r2, sp, #40	@ 0x28
 800b95c:	f00d fa08 	bl	8018d70 <tpdf_add_new_obj>
    sprintf(content_buffer, "<<\n/Font << /F1 %d 0 R /F2 %d 0 R >>\n/ProcSet [ /PDF /Text ] \n>>",
 800b960:	2305      	movs	r3, #5
 800b962:	2204      	movs	r2, #4
 800b964:	4984      	ldr	r1, [pc, #528]	@ (800bb78 <generate_pdf_raw_report+0x270>)
 800b966:	a80a      	add	r0, sp, #40	@ 0x28
 800b968:	f00e fca8 	bl	801a2bc <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_RESOURCES, content_buffer, &pdf_monitor);
 800b96c:	002b      	movs	r3, r5
 800b96e:	2111      	movs	r1, #17
 800b970:	0020      	movs	r0, r4
 800b972:	aa0a      	add	r2, sp, #40	@ 0x28
 800b974:	f00d f9fc 	bl	8018d70 <tpdf_add_new_obj>
  tpdf_start_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL,TPDF_OBJ_NUM_TABLE_TEMPL + 1, &pdf_monitor);
 800b978:	002b      	movs	r3, r5
 800b97a:	2209      	movs	r2, #9
 800b97c:	2108      	movs	r1, #8
 800b97e:	0020      	movs	r0, r4
 800b980:	f00d fa1c 	bl	8018dbc <tpdf_start_new_stream_obj>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP-20, PDF_PAGE_LEFT, PDF_PAGE_TOP-20, 1.5, 0,0,0);
 800b984:	26ff      	movs	r6, #255	@ 0xff
 800b986:	22c3      	movs	r2, #195	@ 0xc3
 800b988:	2700      	movs	r7, #0
 800b98a:	0092      	lsls	r2, r2, #2
 800b98c:	05b6      	lsls	r6, r6, #22
 800b98e:	2332      	movs	r3, #50	@ 0x32
 800b990:	0020      	movs	r0, r4
 800b992:	497a      	ldr	r1, [pc, #488]	@ (800bb7c <generate_pdf_raw_report+0x274>)
 800b994:	9200      	str	r2, [sp, #0]
 800b996:	9704      	str	r7, [sp, #16]
 800b998:	9703      	str	r7, [sp, #12]
 800b99a:	9702      	str	r7, [sp, #8]
 800b99c:	9601      	str	r6, [sp, #4]
 800b99e:	f00d f97d 	bl	8018c9c <tpdf_draw_line>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800b9a2:	4a77      	ldr	r2, [pc, #476]	@ (800bb80 <generate_pdf_raw_report+0x278>)
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP-20, PDF_PAGE_LEFT, PDF_PAGE_TOP-20, 1.5, 0,0,0);
 800b9a4:	0005      	movs	r5, r0
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800b9a6:	2332      	movs	r3, #50	@ 0x32
 800b9a8:	0020      	movs	r0, r4
 800b9aa:	4974      	ldr	r1, [pc, #464]	@ (800bb7c <generate_pdf_raw_report+0x274>)
 800b9ac:	9200      	str	r2, [sp, #0]
 800b9ae:	9704      	str	r7, [sp, #16]
 800b9b0:	9703      	str	r7, [sp, #12]
 800b9b2:	9702      	str	r7, [sp, #8]
 800b9b4:	9601      	str	r6, [sp, #4]
 800b9b6:	f00d f971 	bl	8018c9c <tpdf_draw_line>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM + 20, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800b9ba:	2346      	movs	r3, #70	@ 0x46
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800b9bc:	182d      	adds	r5, r5, r0
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM + 20, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	0020      	movs	r0, r4
 800b9c2:	2246      	movs	r2, #70	@ 0x46
 800b9c4:	2132      	movs	r1, #50	@ 0x32
 800b9c6:	4b6d      	ldr	r3, [pc, #436]	@ (800bb7c <generate_pdf_raw_report+0x274>)
 800b9c8:	9704      	str	r7, [sp, #16]
 800b9ca:	9703      	str	r7, [sp, #12]
 800b9cc:	9702      	str	r7, [sp, #8]
 800b9ce:	9601      	str	r6, [sp, #4]
 800b9d0:	f00d f964 	bl	8018c9c <tpdf_draw_line>
 800b9d4:	2432      	movs	r4, #50	@ 0x32
 800b9d6:	182d      	adds	r5, r5, r0
    stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + i *99), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + i *99), PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800b9d8:	4b5f      	ldr	r3, [pc, #380]	@ (800bb58 <generate_pdf_raw_report+0x250>)
 800b9da:	22c3      	movs	r2, #195	@ 0xc3
 800b9dc:	9307      	str	r3, [sp, #28]
 800b9de:	23ff      	movs	r3, #255	@ 0xff
 800b9e0:	059b      	lsls	r3, r3, #22
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	2346      	movs	r3, #70	@ 0x46
 800b9e6:	0092      	lsls	r2, r2, #2
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	0021      	movs	r1, r4
 800b9ec:	0023      	movs	r3, r4
 800b9ee:	9807      	ldr	r0, [sp, #28]
 800b9f0:	9704      	str	r7, [sp, #16]
 800b9f2:	9703      	str	r7, [sp, #12]
 800b9f4:	9702      	str	r7, [sp, #8]
 800b9f6:	f00d f951 	bl	8018c9c <tpdf_draw_line>
 800b9fa:	1943      	adds	r3, r0, r5
 800b9fc:	9308      	str	r3, [sp, #32]
    if (i < CHILD_TABLE_NUMS)
 800b9fe:	0023      	movs	r3, r4
 800ba00:	3363      	adds	r3, #99	@ 0x63
 800ba02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba04:	23a1      	movs	r3, #161	@ 0xa1
 800ba06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d152      	bne.n	800bab4 <generate_pdf_raw_report+0x1ac>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800ba0e:	23ff      	movs	r3, #255	@ 0xff
 800ba10:	2432      	movs	r4, #50	@ 0x32
 800ba12:	059b      	lsls	r3, r3, #22
 800ba14:	0022      	movs	r2, r4
 800ba16:	0021      	movs	r1, r4
 800ba18:	9301      	str	r3, [sp, #4]
 800ba1a:	9400      	str	r4, [sp, #0]
 800ba1c:	4b57      	ldr	r3, [pc, #348]	@ (800bb7c <generate_pdf_raw_report+0x274>)
 800ba1e:	9807      	ldr	r0, [sp, #28]
 800ba20:	9704      	str	r7, [sp, #16]
 800ba22:	9703      	str	r7, [sp, #12]
 800ba24:	9702      	str	r7, [sp, #8]
 800ba26:	f00d f939 	bl	8018c9c <tpdf_draw_line>
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800ba2a:	4b56      	ldr	r3, [pc, #344]	@ (800bb84 <generate_pdf_raw_report+0x27c>)
 800ba2c:	2609      	movs	r6, #9
 800ba2e:	9304      	str	r3, [sp, #16]
 800ba30:	23fe      	movs	r3, #254	@ 0xfe
 800ba32:	4d55      	ldr	r5, [pc, #340]	@ (800bb88 <generate_pdf_raw_report+0x280>)
 800ba34:	059b      	lsls	r3, r3, #22
 800ba36:	0021      	movs	r1, r4
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800ba38:	9009      	str	r0, [sp, #36]	@ 0x24
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	2228      	movs	r2, #40	@ 0x28
 800ba3e:	002b      	movs	r3, r5
 800ba40:	9807      	ldr	r0, [sp, #28]
 800ba42:	9702      	str	r7, [sp, #8]
 800ba44:	9701      	str	r7, [sp, #4]
 800ba46:	9600      	str	r6, [sp, #0]
 800ba48:	f00d f8f2 	bl	8018c30 <tpdf_draw_colored_text>
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800ba4c:	4b4f      	ldr	r3, [pc, #316]	@ (800bb8c <generate_pdf_raw_report+0x284>)
 800ba4e:	21fa      	movs	r1, #250	@ 0xfa
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	23fe      	movs	r3, #254	@ 0xfe
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800ba54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800ba56:	059b      	lsls	r3, r3, #22
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800ba58:	1814      	adds	r4, r2, r0
 800ba5a:	9a08      	ldr	r2, [sp, #32]
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800ba5c:	9303      	str	r3, [sp, #12]
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800ba5e:	18a4      	adds	r4, r4, r2
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800ba60:	002b      	movs	r3, r5
 800ba62:	2228      	movs	r2, #40	@ 0x28
 800ba64:	9807      	ldr	r0, [sp, #28]
 800ba66:	9702      	str	r7, [sp, #8]
 800ba68:	9701      	str	r7, [sp, #4]
 800ba6a:	9600      	str	r6, [sp, #0]
 800ba6c:	31ff      	adds	r1, #255	@ 0xff
 800ba6e:	f00d f8df 	bl	8018c30 <tpdf_draw_colored_text>
  tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL + 1,stream_length,&pdf_monitor);
 800ba72:	4d3c      	ldr	r5, [pc, #240]	@ (800bb64 <generate_pdf_raw_report+0x25c>)
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800ba74:	1822      	adds	r2, r4, r0
  tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL + 1,stream_length,&pdf_monitor);
 800ba76:	002b      	movs	r3, r5
 800ba78:	0031      	movs	r1, r6
 800ba7a:	9807      	ldr	r0, [sp, #28]
 800ba7c:	f00d f9ba 	bl	8018df4 <tpdf_end_new_stream_obj>

static void generate_pdf_report_2nd_page(void) {
    // --- Create Object 20: first page
	char content_buffer[128];
    // Ref to table template and start/stop time header (OBJ 6 and 8 )
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R %d 0 R %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800ba80:	2311      	movs	r3, #17
 800ba82:	2416      	movs	r4, #22
 800ba84:	9302      	str	r3, [sp, #8]
 800ba86:	3b09      	subs	r3, #9
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	2203      	movs	r2, #3
 800ba8c:	4940      	ldr	r1, [pc, #256]	@ (800bb90 <generate_pdf_raw_report+0x288>)
 800ba8e:	9401      	str	r4, [sp, #4]
 800ba90:	3b02      	subs	r3, #2
 800ba92:	a80a      	add	r0, sp, #40	@ 0x28
 800ba94:	f00e fc12 	bl	801a2bc <siprintf>
            TPDF_OBJ_NUM_HEADER_TIME_START_STOP,\
            TPDF_OBJ_NUM_TABLE_TEMPL,\
            TPDF_OBJ_NUM_PAGE_2ND +2,\
            TPDF_OBJ_NUM_PAGE_RESOURCES);

    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_2ND, content_buffer, &pdf_monitor);
 800ba98:	002b      	movs	r3, r5
 800ba9a:	aa0a      	add	r2, sp, #40	@ 0x28
 800ba9c:	2114      	movs	r1, #20
 800ba9e:	9807      	ldr	r0, [sp, #28]
 800baa0:	f00d f966 	bl	8018d70 <tpdf_add_new_obj>
    // obj 22: contain data content.
    // obj 24: contain data stream length
    // Open stream for writing:
    tpdf_start_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_2ND + 2, TPDF_OBJ_NUM_PAGE_2ND + 4, &pdf_monitor);
 800baa4:	002b      	movs	r3, r5
 800baa6:	2218      	movs	r2, #24
 800baa8:	0021      	movs	r1, r4
 800baaa:	9807      	ldr	r0, [sp, #28]
 800baac:	f00d f986 	bl	8018dbc <tpdf_start_new_stream_obj>
}
 800bab0:	b04b      	add	sp, #300	@ 0x12c
 800bab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 51 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 51 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bab4:	0021      	movs	r1, r4
 800bab6:	25fc      	movs	r5, #252	@ 0xfc
 800bab8:	2346      	movs	r3, #70	@ 0x46
 800baba:	22c3      	movs	r2, #195	@ 0xc3
 800babc:	05ad      	lsls	r5, r5, #22
 800babe:	3133      	adds	r1, #51	@ 0x33
 800bac0:	9504      	str	r5, [sp, #16]
 800bac2:	9503      	str	r5, [sp, #12]
 800bac4:	9502      	str	r5, [sp, #8]
 800bac6:	9501      	str	r5, [sp, #4]
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	0092      	lsls	r2, r2, #2
 800bacc:	000b      	movs	r3, r1
 800bace:	9807      	ldr	r0, [sp, #28]
 800bad0:	f00d f8e4 	bl	8018c9c <tpdf_draw_line>
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bad4:	0021      	movs	r1, r4
 800bad6:	2346      	movs	r3, #70	@ 0x46
 800bad8:	22c3      	movs	r2, #195	@ 0xc3
 800bada:	3145      	adds	r1, #69	@ 0x45
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 51 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 51 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800badc:	0006      	movs	r6, r0
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bade:	9504      	str	r5, [sp, #16]
 800bae0:	9503      	str	r5, [sp, #12]
 800bae2:	9502      	str	r5, [sp, #8]
 800bae4:	9501      	str	r5, [sp, #4]
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	0092      	lsls	r2, r2, #2
 800baea:	000b      	movs	r3, r1
 800baec:	9807      	ldr	r0, [sp, #28]
 800baee:	f00d f8d5 	bl	8018c9c <tpdf_draw_line>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800baf2:	2506      	movs	r5, #6
 800baf4:	0021      	movs	r1, r4
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800baf6:	9b08      	ldr	r3, [sp, #32]
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800baf8:	4a26      	ldr	r2, [pc, #152]	@ (800bb94 <generate_pdf_raw_report+0x28c>)
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800bafa:	1836      	adds	r6, r6, r0
 800bafc:	18f6      	adds	r6, r6, r3
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800bafe:	4b26      	ldr	r3, [pc, #152]	@ (800bb98 <generate_pdf_raw_report+0x290>)
 800bb00:	310a      	adds	r1, #10
 800bb02:	9204      	str	r2, [sp, #16]
 800bb04:	9500      	str	r5, [sp, #0]
 800bb06:	4a25      	ldr	r2, [pc, #148]	@ (800bb9c <generate_pdf_raw_report+0x294>)
 800bb08:	9807      	ldr	r0, [sp, #28]
 800bb0a:	9703      	str	r7, [sp, #12]
 800bb0c:	9702      	str	r7, [sp, #8]
 800bb0e:	9701      	str	r7, [sp, #4]
 800bb10:	9308      	str	r3, [sp, #32]
 800bb12:	f00d f88d 	bl	8018c30 <tpdf_draw_colored_text>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800bb16:	0021      	movs	r1, r4
 800bb18:	4b21      	ldr	r3, [pc, #132]	@ (800bba0 <generate_pdf_raw_report+0x298>)
 800bb1a:	4a20      	ldr	r2, [pc, #128]	@ (800bb9c <generate_pdf_raw_report+0x294>)
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800bb1c:	1836      	adds	r6, r6, r0
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800bb1e:	3138      	adds	r1, #56	@ 0x38
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	9500      	str	r5, [sp, #0]
 800bb24:	9b08      	ldr	r3, [sp, #32]
 800bb26:	9807      	ldr	r0, [sp, #28]
 800bb28:	9703      	str	r7, [sp, #12]
 800bb2a:	9702      	str	r7, [sp, #8]
 800bb2c:	9701      	str	r7, [sp, #4]
 800bb2e:	f00d f87f 	bl	8018c30 <tpdf_draw_colored_text>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 76 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"uSv/h");
 800bb32:	0021      	movs	r1, r4
 800bb34:	4b1b      	ldr	r3, [pc, #108]	@ (800bba4 <generate_pdf_raw_report+0x29c>)
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800bb36:	1836      	adds	r6, r6, r0
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 76 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"uSv/h");
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	9500      	str	r5, [sp, #0]
 800bb3c:	9b08      	ldr	r3, [sp, #32]
 800bb3e:	4a17      	ldr	r2, [pc, #92]	@ (800bb9c <generate_pdf_raw_report+0x294>)
 800bb40:	9807      	ldr	r0, [sp, #28]
 800bb42:	314c      	adds	r1, #76	@ 0x4c
 800bb44:	9703      	str	r7, [sp, #12]
 800bb46:	9702      	str	r7, [sp, #8]
 800bb48:	9701      	str	r7, [sp, #4]
 800bb4a:	f00d f871 	bl	8018c30 <tpdf_draw_colored_text>
 800bb4e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bb50:	1835      	adds	r5, r6, r0
  for (int i = 0; i<= CHILD_TABLE_NUMS; i++ ) {
 800bb52:	e741      	b.n	800b9d8 <generate_pdf_raw_report+0xd0>
 800bb54:	0801f3da 	.word	0x0801f3da
 800bb58:	20003090 	.word	0x20003090
 800bb5c:	0801f3ef 	.word	0x0801f3ef
 800bb60:	0801f3f9 	.word	0x0801f3f9
 800bb64:	20002c88 	.word	0x20002c88
 800bb68:	0801f41c 	.word	0x0801f41c
 800bb6c:	0801f422 	.word	0x0801f422
 800bb70:	0801f47a 	.word	0x0801f47a
 800bb74:	0801f485 	.word	0x0801f485
 800bb78:	0801f4dd 	.word	0x0801f4dd
 800bb7c:	00000221 	.word	0x00000221
 800bb80:	000002fd 	.word	0x000002fd
 800bb84:	0801f521 	.word	0x0801f521
 800bb88:	0801f51e 	.word	0x0801f51e
 800bb8c:	0801f537 	.word	0x0801f537
 800bb90:	0801f53e 	.word	0x0801f53e
 800bb94:	0801f5a1 	.word	0x0801f5a1
 800bb98:	0801f59e 	.word	0x0801f59e
 800bb9c:	00000302 	.word	0x00000302
 800bba0:	0801dbd4 	.word	0x0801dbd4
 800bba4:	0801f5ab 	.word	0x0801f5ab

0800bba8 <pdf_page_handle_for_new_datapoints>:

}

// Number of report page equal record_nums / (number of data points per page)
static void pdf_page_handle_for_new_datapoints(const UINT current_page) {
 800bba8:	b5f0      	push	{r4, r5, r6, r7, lr}

	char content_buffer[128];
    int stream_length = 0;
    UINT current_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page *10);
 800bbaa:	240a      	movs	r4, #10
 800bbac:	4344      	muls	r4, r0
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;

    // End of stream of previous obj page 
    // FIXME: how to get stream length of current page?
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, stream_length ,&pdf_monitor );
 800bbae:	0021      	movs	r1, r4
 800bbb0:	4e12      	ldr	r6, [pc, #72]	@ (800bbfc <pdf_page_handle_for_new_datapoints+0x54>)
 800bbb2:	4d13      	ldr	r5, [pc, #76]	@ (800bc00 <pdf_page_handle_for_new_datapoints+0x58>)
static void pdf_page_handle_for_new_datapoints(const UINT current_page) {
 800bbb4:	b0a5      	sub	sp, #148	@ 0x94
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, stream_length ,&pdf_monitor );
 800bbb6:	0033      	movs	r3, r6
 800bbb8:	2200      	movs	r2, #0
 800bbba:	0028      	movs	r0, r5
 800bbbc:	3118      	adds	r1, #24
 800bbbe:	f00d f919 	bl	8018df4 <tpdf_end_new_stream_obj>

    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R %d 0 R %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800bbc2:	0027      	movs	r7, r4
 800bbc4:	2311      	movs	r3, #17
 800bbc6:	3720      	adds	r7, #32
 800bbc8:	9302      	str	r3, [sp, #8]
 800bbca:	3b09      	subs	r3, #9
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	2203      	movs	r2, #3
 800bbd0:	490c      	ldr	r1, [pc, #48]	@ (800bc04 <pdf_page_handle_for_new_datapoints+0x5c>)
 800bbd2:	9701      	str	r7, [sp, #4]
 800bbd4:	3b02      	subs	r3, #2
 800bbd6:	a804      	add	r0, sp, #16
 800bbd8:	f00e fb70 	bl	801a2bc <siprintf>
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;
 800bbdc:	0021      	movs	r1, r4
            TPDF_OBJ_NUM_HEADER_TIME_START_STOP,\
            TPDF_OBJ_NUM_TABLE_TEMPL,\
            (next_obj  +2),\
            TPDF_OBJ_NUM_PAGE_RESOURCES);

    tpdf_add_new_obj(&pdf_file, next_obj, content_buffer, &pdf_monitor);
 800bbde:	0033      	movs	r3, r6
 800bbe0:	aa04      	add	r2, sp, #16
 800bbe2:	0028      	movs	r0, r5
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;
 800bbe4:	311e      	adds	r1, #30
    tpdf_add_new_obj(&pdf_file, next_obj, content_buffer, &pdf_monitor);
 800bbe6:	f00d f8c3 	bl	8018d70 <tpdf_add_new_obj>
    // obj x2: contain data content.
    // obj x4: contain data stream length
    // Open stream for writing:
    tpdf_start_new_stream_obj(&pdf_file, next_obj + 2, next_obj + 4, &pdf_monitor);
 800bbea:	0022      	movs	r2, r4
 800bbec:	0033      	movs	r3, r6
 800bbee:	0039      	movs	r1, r7
 800bbf0:	0028      	movs	r0, r5
 800bbf2:	3222      	adds	r2, #34	@ 0x22
 800bbf4:	f00d f8e2 	bl	8018dbc <tpdf_start_new_stream_obj>
}
 800bbf8:	b025      	add	sp, #148	@ 0x94
 800bbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfc:	20002c88 	.word	0x20002c88
 800bc00:	20003090 	.word	0x20003090
 800bc04:	0801f53e 	.word	0x0801f53e

0800bc08 <pdf_alarm_row.constprop.0>:
static int pdf_alarm_row(FIL* file_ptr,
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	0016      	movs	r6, r2
    char row_commands[512] = "";
 800bc0c:	2280      	movs	r2, #128	@ 0x80
static int pdf_alarm_row(FIL* file_ptr,
 800bc0e:	4c5c      	ldr	r4, [pc, #368]	@ (800bd80 <pdf_alarm_row.constprop.0+0x178>)
    char row_commands[512] = "";
 800bc10:	0092      	lsls	r2, r2, #2
static int pdf_alarm_row(FIL* file_ptr,
 800bc12:	44a5      	add	sp, r4
 800bc14:	000d      	movs	r5, r1
 800bc16:	0004      	movs	r4, r0
    char row_commands[512] = "";
 800bc18:	2100      	movs	r1, #0
 800bc1a:	a82c      	add	r0, sp, #176	@ 0xb0
 800bc1c:	f00e fc6a 	bl	801a4f4 <memset>
    const uint8_t state = GET_ALARM_STATE(device_config.alarm_state, alarm_pos);
 800bc20:	4b58      	ldr	r3, [pc, #352]	@ (800bd84 <pdf_alarm_row.constprop.0+0x17c>)
    if (disabled) {
 800bc22:	2203      	movs	r2, #3
    const uint8_t state = GET_ALARM_STATE(device_config.alarm_state, alarm_pos);
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	40f3      	lsrs	r3, r6
    if (disabled) {
 800bc28:	4013      	ands	r3, r2
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d144      	bne.n	800bcb8 <pdf_alarm_row.constprop.0+0xb0>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 55  %d Td () Tj ET\n",
 800bc2e:	0023      	movs	r3, r4
 800bc30:	3205      	adds	r2, #5
 800bc32:	4955      	ldr	r1, [pc, #340]	@ (800bd88 <pdf_alarm_row.constprop.0+0x180>)
 800bc34:	a80c      	add	r0, sp, #48	@ 0x30
 800bc36:	f00e fb41 	bl	801a2bc <siprintf>
        strcat(row_commands, temp_buffer);
 800bc3a:	a90c      	add	r1, sp, #48	@ 0x30
 800bc3c:	a82c      	add	r0, sp, #176	@ 0xb0
 800bc3e:	f00e fc61 	bl	801a504 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 155 %d Td () Tj ET\n",
 800bc42:	0023      	movs	r3, r4
 800bc44:	2208      	movs	r2, #8
 800bc46:	4951      	ldr	r1, [pc, #324]	@ (800bd8c <pdf_alarm_row.constprop.0+0x184>)
 800bc48:	a80c      	add	r0, sp, #48	@ 0x30
 800bc4a:	f00e fb37 	bl	801a2bc <siprintf>
        strcat(row_commands, temp_buffer);
 800bc4e:	a90c      	add	r1, sp, #48	@ 0x30
 800bc50:	a82c      	add	r0, sp, #176	@ 0xb0
 800bc52:	f00e fc57 	bl	801a504 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 245 %d Td () Tj ET\n",
 800bc56:	0023      	movs	r3, r4
 800bc58:	2208      	movs	r2, #8
 800bc5a:	494d      	ldr	r1, [pc, #308]	@ (800bd90 <pdf_alarm_row.constprop.0+0x188>)
 800bc5c:	a80c      	add	r0, sp, #48	@ 0x30
 800bc5e:	f00e fb2d 	bl	801a2bc <siprintf>
        strcat(row_commands, temp_buffer);
 800bc62:	a90c      	add	r1, sp, #48	@ 0x30
 800bc64:	a82c      	add	r0, sp, #176	@ 0xb0
 800bc66:	f00e fc4d 	bl	801a504 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 325 %d Td () Tj ET\n",
 800bc6a:	0023      	movs	r3, r4
 800bc6c:	2208      	movs	r2, #8
 800bc6e:	4949      	ldr	r1, [pc, #292]	@ (800bd94 <pdf_alarm_row.constprop.0+0x18c>)
 800bc70:	a80c      	add	r0, sp, #48	@ 0x30
 800bc72:	f00e fb23 	bl	801a2bc <siprintf>
        strcat(row_commands, temp_buffer);
 800bc76:	a90c      	add	r1, sp, #48	@ 0x30
 800bc78:	a82c      	add	r0, sp, #176	@ 0xb0
 800bc7a:	f00e fc43 	bl	801a504 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 435 %d Td () Tj ET\n",
 800bc7e:	0023      	movs	r3, r4
 800bc80:	2208      	movs	r2, #8
 800bc82:	4945      	ldr	r1, [pc, #276]	@ (800bd98 <pdf_alarm_row.constprop.0+0x190>)
 800bc84:	a80c      	add	r0, sp, #48	@ 0x30
 800bc86:	f00e fb19 	bl	801a2bc <siprintf>
        strcat(row_commands, temp_buffer);
 800bc8a:	a90c      	add	r1, sp, #48	@ 0x30
 800bc8c:	a82c      	add	r0, sp, #176	@ 0xb0
 800bc8e:	f00e fc39 	bl	801a504 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 500 %d Td () Tj ET\n",
 800bc92:	0023      	movs	r3, r4
 800bc94:	2208      	movs	r2, #8
 800bc96:	4941      	ldr	r1, [pc, #260]	@ (800bd9c <pdf_alarm_row.constprop.0+0x194>)
 800bc98:	a80c      	add	r0, sp, #48	@ 0x30
 800bc9a:	f00e fb0f 	bl	801a2bc <siprintf>
        strcat(row_commands, temp_buffer);
 800bc9e:	a90c      	add	r1, sp, #48	@ 0x30
 800bca0:	a82c      	add	r0, sp, #176	@ 0xb0
 800bca2:	f00e fc2f 	bl	801a504 <strcat>
    if (file_ptr) { fatfs_write_string(file_ptr, row_commands); return 0; }
 800bca6:	493e      	ldr	r1, [pc, #248]	@ (800bda0 <pdf_alarm_row.constprop.0+0x198>)
 800bca8:	a82c      	add	r0, sp, #176	@ 0xb0
 800bcaa:	f009 fef5 	bl	8015a98 <f_puts>
}
 800bcae:	2000      	movs	r0, #0
 800bcb0:	23ac      	movs	r3, #172	@ 0xac
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	449d      	add	sp, r3
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
                data->status, SECTION_CONTENT_FONT_SIZE, y_pos,
 800bcb8:	002b      	movs	r3, r5
 800bcba:	3328      	adds	r3, #40	@ 0x28
        sprintf(temp_buffer,
 800bcbc:	781a      	ldrb	r2, [r3, #0]
                data->zone_name, (int16_t)data->threshold);
 800bcbe:	2110      	movs	r1, #16
 800bcc0:	5e6b      	ldrsh	r3, [r5, r1]
    if (data->zone_name[0] == 'T') {
 800bcc2:	7829      	ldrb	r1, [r5, #0]
 800bcc4:	2954      	cmp	r1, #84	@ 0x54
 800bcc6:	d158      	bne.n	800bd7a <pdf_alarm_row.constprop.0+0x172>
        sprintf(temp_buffer,
 800bcc8:	4936      	ldr	r1, [pc, #216]	@ (800bda4 <pdf_alarm_row.constprop.0+0x19c>)
            data->status, SECTION_CONTENT_FONT_SIZE, y_pos, tmp_time_buff);
 800bcca:	002e      	movs	r6, r5
        sprintf(temp_buffer,
 800bccc:	9302      	str	r3, [sp, #8]
 800bcce:	9501      	str	r5, [sp, #4]
 800bcd0:	2308      	movs	r3, #8
 800bcd2:	9400      	str	r4, [sp, #0]
 800bcd4:	a80c      	add	r0, sp, #48	@ 0x30
 800bcd6:	f00e faf1 	bl	801a2bc <siprintf>
    strcat(row_commands, temp_buffer);
 800bcda:	a90c      	add	r1, sp, #48	@ 0x30
 800bcdc:	a82c      	add	r0, sp, #176	@ 0xb0
 800bcde:	f00e fc11 	bl	801a504 <strcat>
    seconds_to_dhms_string_long(data->alarm_delay_sec, tmp_time_buff, sizeof(tmp_time_buff));
 800bce2:	2220      	movs	r2, #32
 800bce4:	6968      	ldr	r0, [r5, #20]
 800bce6:	a904      	add	r1, sp, #16
 800bce8:	f7ff fde8 	bl	800b8bc <seconds_to_dhms_string_long>
            data->status, SECTION_CONTENT_FONT_SIZE, y_pos, tmp_time_buff);
 800bcec:	3628      	adds	r6, #40	@ 0x28
    sprintf(temp_buffer,
 800bcee:	ab04      	add	r3, sp, #16
 800bcf0:	7832      	ldrb	r2, [r6, #0]
 800bcf2:	492d      	ldr	r1, [pc, #180]	@ (800bda8 <pdf_alarm_row.constprop.0+0x1a0>)
 800bcf4:	9301      	str	r3, [sp, #4]
 800bcf6:	9400      	str	r4, [sp, #0]
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	a80c      	add	r0, sp, #48	@ 0x30
 800bcfc:	f00e fade 	bl	801a2bc <siprintf>
    strcat(row_commands, temp_buffer);
 800bd00:	a90c      	add	r1, sp, #48	@ 0x30
 800bd02:	a82c      	add	r0, sp, #176	@ 0xb0
 800bd04:	f00e fbfe 	bl	801a504 <strcat>
    sprintf(temp_buffer,
 800bd08:	002b      	movs	r3, r5
 800bd0a:	3318      	adds	r3, #24
 800bd0c:	2208      	movs	r2, #8
 800bd0e:	4927      	ldr	r1, [pc, #156]	@ (800bdac <pdf_alarm_row.constprop.0+0x1a4>)
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	a80c      	add	r0, sp, #48	@ 0x30
 800bd14:	0023      	movs	r3, r4
 800bd16:	f00e fad1 	bl	801a2bc <siprintf>
    strcat(row_commands, temp_buffer);
 800bd1a:	a90c      	add	r1, sp, #48	@ 0x30
 800bd1c:	a82c      	add	r0, sp, #176	@ 0xb0
 800bd1e:	f00e fbf1 	bl	801a504 <strcat>
    seconds_to_dhms_string_long(data->total_time_in_violation_minutes, tmp_time_buff, sizeof(tmp_time_buff));
 800bd22:	2220      	movs	r2, #32
 800bd24:	6a28      	ldr	r0, [r5, #32]
 800bd26:	a904      	add	r1, sp, #16
 800bd28:	f7ff fdc8 	bl	800b8bc <seconds_to_dhms_string_long>
    sprintf(temp_buffer,
 800bd2c:	ab04      	add	r3, sp, #16
 800bd2e:	7832      	ldrb	r2, [r6, #0]
 800bd30:	491f      	ldr	r1, [pc, #124]	@ (800bdb0 <pdf_alarm_row.constprop.0+0x1a8>)
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	9400      	str	r4, [sp, #0]
 800bd36:	2308      	movs	r3, #8
 800bd38:	a80c      	add	r0, sp, #48	@ 0x30
 800bd3a:	f00e fabf 	bl	801a2bc <siprintf>
    strcat(row_commands, temp_buffer);
 800bd3e:	a90c      	add	r1, sp, #48	@ 0x30
 800bd40:	a82c      	add	r0, sp, #176	@ 0xb0
 800bd42:	f00e fbdf 	bl	801a504 <strcat>
    sprintf(temp_buffer,
 800bd46:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800bd48:	7832      	ldrb	r2, [r6, #0]
 800bd4a:	491a      	ldr	r1, [pc, #104]	@ (800bdb4 <pdf_alarm_row.constprop.0+0x1ac>)
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	9400      	str	r4, [sp, #0]
 800bd50:	2308      	movs	r3, #8
 800bd52:	a80c      	add	r0, sp, #48	@ 0x30
 800bd54:	f00e fab2 	bl	801a2bc <siprintf>
    strcat(row_commands, temp_buffer);
 800bd58:	a90c      	add	r1, sp, #48	@ 0x30
 800bd5a:	a82c      	add	r0, sp, #176	@ 0xb0
 800bd5c:	f00e fbd2 	bl	801a504 <strcat>
        const char *alr_status = (data->status == ALARM_STATUS_ALARM) ? "ALARM" : "OK";
 800bd60:	7832      	ldrb	r2, [r6, #0]
 800bd62:	4b15      	ldr	r3, [pc, #84]	@ (800bdb8 <pdf_alarm_row.constprop.0+0x1b0>)
 800bd64:	2a01      	cmp	r2, #1
 800bd66:	d100      	bne.n	800bd6a <pdf_alarm_row.constprop.0+0x162>
 800bd68:	4b14      	ldr	r3, [pc, #80]	@ (800bdbc <pdf_alarm_row.constprop.0+0x1b4>)
        sprintf(temp_buffer,
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	4914      	ldr	r1, [pc, #80]	@ (800bdc0 <pdf_alarm_row.constprop.0+0x1b8>)
 800bd6e:	2308      	movs	r3, #8
 800bd70:	9400      	str	r4, [sp, #0]
 800bd72:	a80c      	add	r0, sp, #48	@ 0x30
 800bd74:	f00e faa2 	bl	801a2bc <siprintf>
 800bd78:	e791      	b.n	800bc9e <pdf_alarm_row.constprop.0+0x96>
        sprintf(temp_buffer,
 800bd7a:	4912      	ldr	r1, [pc, #72]	@ (800bdc4 <pdf_alarm_row.constprop.0+0x1bc>)
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	e7a4      	b.n	800bcca <pdf_alarm_row.constprop.0+0xc2>
 800bd80:	fffffd50 	.word	0xfffffd50
 800bd84:	20000b50 	.word	0x20000b50
 800bd88:	0801f5b1 	.word	0x0801f5b1
 800bd8c:	0801f5db 	.word	0x0801f5db
 800bd90:	0801f605 	.word	0x0801f605
 800bd94:	0801f62f 	.word	0x0801f62f
 800bd98:	0801f659 	.word	0x0801f659
 800bd9c:	0801f683 	.word	0x0801f683
 800bda0:	20003090 	.word	0x20003090
 800bda4:	0801f6ad 	.word	0x0801f6ad
 800bda8:	0801f717 	.word	0x0801f717
 800bdac:	0801f744 	.word	0x0801f744
 800bdb0:	0801f770 	.word	0x0801f770
 800bdb4:	0801f79d 	.word	0x0801f79d
 800bdb8:	0801ed36 	.word	0x0801ed36
 800bdbc:	0801ed30 	.word	0x0801ed30
 800bdc0:	0801f7ca 	.word	0x0801f7ca
 800bdc4:	0801f6e0 	.word	0x0801f6e0

0800bdc8 <draw_section_title.constprop.0>:
    int len = draw_title_background(file_ptr, y_pos - 12);
 800bdc8:	0002      	movs	r2, r0
static int draw_section_title(FIL* file_ptr, int y_pos, const char* title) {
 800bdca:	b570      	push	{r4, r5, r6, lr}
 800bdcc:	b096      	sub	sp, #88	@ 0x58
 800bdce:	0004      	movs	r4, r0
 800bdd0:	000d      	movs	r5, r1
    int len = draw_title_background(file_ptr, y_pos - 12);
 800bdd2:	3a0c      	subs	r2, #12
    sprintf(temp_buffer, "q\n0.9 0.9 0.9 rg\n50 %d 495 15 re\nf\nQ\n", y_pos);
 800bdd4:	490c      	ldr	r1, [pc, #48]	@ (800be08 <draw_section_title.constprop.0+0x40>)
 800bdd6:	a806      	add	r0, sp, #24
 800bdd8:	f00e fa70 	bl	801a2bc <siprintf>
        fatfs_write_string(file_ptr, temp_buffer);
 800bddc:	4e0b      	ldr	r6, [pc, #44]	@ (800be0c <draw_section_title.constprop.0+0x44>)
 800bdde:	a806      	add	r0, sp, #24
 800bde0:	0031      	movs	r1, r6
 800bde2:	f009 fe59 	bl	8015a98 <f_puts>
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,y_pos-8,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,title);
 800bde6:	2100      	movs	r1, #0
 800bde8:	0022      	movs	r2, r4
 800bdea:	9103      	str	r1, [sp, #12]
 800bdec:	9102      	str	r1, [sp, #8]
 800bdee:	9101      	str	r1, [sp, #4]
 800bdf0:	210a      	movs	r1, #10
 800bdf2:	0030      	movs	r0, r6
 800bdf4:	9100      	str	r1, [sp, #0]
 800bdf6:	4b06      	ldr	r3, [pc, #24]	@ (800be10 <draw_section_title.constprop.0+0x48>)
 800bdf8:	3a08      	subs	r2, #8
 800bdfa:	9504      	str	r5, [sp, #16]
 800bdfc:	312d      	adds	r1, #45	@ 0x2d
 800bdfe:	f00c ff17 	bl	8018c30 <tpdf_draw_colored_text>
}
 800be02:	b016      	add	sp, #88	@ 0x58
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	46c0      	nop			@ (mov r8, r8)
 800be08:	0801f7f7 	.word	0x0801f7f7
 800be0c:	20003090 	.word	0x20003090
 800be10:	0801f59e 	.word	0x0801f59e

0800be14 <draw_key_value_pair.constprop.0>:
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800be14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be16:	000d      	movs	r5, r1
    int written = snprintf(
 800be18:	4915      	ldr	r1, [pc, #84]	@ (800be70 <draw_key_value_pair.constprop.0+0x5c>)
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800be1a:	b0c5      	sub	sp, #276	@ 0x114
    int written = snprintf(
 800be1c:	9202      	str	r2, [sp, #8]
 800be1e:	000a      	movs	r2, r1
 800be20:	2180      	movs	r1, #128	@ 0x80
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800be22:	0004      	movs	r4, r0
 800be24:	001f      	movs	r7, r3
    int written = snprintf(
 800be26:	9000      	str	r0, [sp, #0]
 800be28:	2308      	movs	r3, #8
 800be2a:	9501      	str	r5, [sp, #4]
 800be2c:	0049      	lsls	r1, r1, #1
 800be2e:	a804      	add	r0, sp, #16
 800be30:	f00e fa0e 	bl	801a250 <sniprintf>
    if (written < 0 || written >= (int)sizeof(temp_buffer)) {
 800be34:	28ff      	cmp	r0, #255	@ 0xff
 800be36:	d903      	bls.n	800be40 <draw_key_value_pair.constprop.0+0x2c>
        return -1;
 800be38:	2001      	movs	r0, #1
 800be3a:	4240      	negs	r0, r0
}
 800be3c:	b045      	add	sp, #276	@ 0x114
 800be3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (file_ptr) fatfs_write_string(file_ptr, temp_buffer);
 800be40:	4e0c      	ldr	r6, [pc, #48]	@ (800be74 <draw_key_value_pair.constprop.0+0x60>)
 800be42:	a804      	add	r0, sp, #16
 800be44:	0031      	movs	r1, r6
 800be46:	f009 fe27 	bl	8015a98 <f_puts>
    written = snprintf(
 800be4a:	2180      	movs	r1, #128	@ 0x80
 800be4c:	347d      	adds	r4, #125	@ 0x7d
 800be4e:	2308      	movs	r3, #8
 800be50:	4a09      	ldr	r2, [pc, #36]	@ (800be78 <draw_key_value_pair.constprop.0+0x64>)
 800be52:	9702      	str	r7, [sp, #8]
 800be54:	9501      	str	r5, [sp, #4]
 800be56:	9400      	str	r4, [sp, #0]
 800be58:	0049      	lsls	r1, r1, #1
 800be5a:	a804      	add	r0, sp, #16
 800be5c:	f00e f9f8 	bl	801a250 <sniprintf>
    if (written < 0 || written >= (int)sizeof(temp_buffer)) {
 800be60:	28ff      	cmp	r0, #255	@ 0xff
 800be62:	d8e9      	bhi.n	800be38 <draw_key_value_pair.constprop.0+0x24>
    if (file_ptr) fatfs_write_string(file_ptr, temp_buffer);
 800be64:	0031      	movs	r1, r6
 800be66:	a804      	add	r0, sp, #16
 800be68:	f009 fe16 	bl	8015a98 <f_puts>
    return file_ptr ? 0 : len;
 800be6c:	2000      	movs	r0, #0
 800be6e:	e7e5      	b.n	800be3c <draw_key_value_pair.constprop.0+0x28>
 800be70:	0801f81d 	.word	0x0801f81d
 800be74:	20003090 	.word	0x20003090
 800be78:	0801f848 	.word	0x0801f848

0800be7c <pdf_chart_plot_data.constprop.0>:
static void pdf_chart_plot_data(FIL* file_p, int y_pos, float* data, int start_index, int num_points_in_chunk, int total_points, float r, float g, float b, float data_min, float data_max) {
 800be7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7e:	b08f      	sub	sp, #60	@ 0x3c
 800be80:	000c      	movs	r4, r1
 800be82:	9006      	str	r0, [sp, #24]
    if (num_points_in_chunk < 2) {
 800be84:	2b01      	cmp	r3, #1
 800be86:	d06e      	beq.n	800bf66 <pdf_chart_plot_data.constprop.0+0xea>
    const int chart_y_start = y_pos - FIELD_SPACING;
 800be88:	0001      	movs	r1, r0
 800be8a:	18d3      	adds	r3, r2, r3
 800be8c:	3914      	subs	r1, #20
 800be8e:	9109      	str	r1, [sp, #36]	@ 0x24
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800be90:	1c57      	adds	r7, r2, #1
 800be92:	930a      	str	r3, [sp, #40]	@ 0x28
        float x1 = map_value((float)(start_index + i), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800be94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be96:	1e58      	subs	r0, r3, #1
 800be98:	f7f5 fc48 	bl	800172c <__aeabi_i2f>
 800be9c:	1c06      	adds	r6, r0, #0
        float y1 = map_value(data[i], data_min, data_max, chart_y_start - CHART_HEIGHT, chart_y_start);
 800be9e:	9806      	ldr	r0, [sp, #24]
 800bea0:	380f      	subs	r0, #15
 800bea2:	38ff      	subs	r0, #255	@ 0xff
 800bea4:	f7f5 fc42 	bl	800172c <__aeabi_i2f>
 800bea8:	1c05      	adds	r5, r0, #0
 800beaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beac:	f7f5 fc3e 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800beb0:	1c29      	adds	r1, r5, #0
 800beb2:	f7f5 f9a1 	bl	80011f8 <__aeabi_fsub>
 800beb6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800beb8:	9007      	str	r0, [sp, #28]
 800beba:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800bebc:	f7f5 f99c 	bl	80011f8 <__aeabi_fsub>
 800bec0:	9008      	str	r0, [sp, #32]
        float x2 = map_value((float)(start_index + i + 1), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800bec2:	0038      	movs	r0, r7
 800bec4:	f7f5 fc32 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800bec8:	4928      	ldr	r1, [pc, #160]	@ (800bf6c <pdf_chart_plot_data.constprop.0+0xf0>)
 800beca:	f7f5 f83b 	bl	8000f44 <__aeabi_fmul>
 800bece:	1c31      	adds	r1, r6, #0
 800bed0:	f7f4 fe6a 	bl	8000ba8 <__aeabi_fdiv>
 800bed4:	4926      	ldr	r1, [pc, #152]	@ (800bf70 <pdf_chart_plot_data.constprop.0+0xf4>)
 800bed6:	f7f4 fc75 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800beda:	f7f5 fc07 	bl	80016ec <__aeabi_f2iz>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800bede:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800bee0:	900b      	str	r0, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800bee2:	6820      	ldr	r0, [r4, #0]
 800bee4:	f7f5 f988 	bl	80011f8 <__aeabi_fsub>
 800bee8:	9907      	ldr	r1, [sp, #28]
 800beea:	f7f5 f82b 	bl	8000f44 <__aeabi_fmul>
 800beee:	9908      	ldr	r1, [sp, #32]
 800bef0:	f7f4 fe5a 	bl	8000ba8 <__aeabi_fdiv>
 800bef4:	1c29      	adds	r1, r5, #0
 800bef6:	f7f4 fc65 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800befa:	f7f5 fbf7 	bl	80016ec <__aeabi_f2iz>
 800befe:	900c      	str	r0, [sp, #48]	@ 0x30
        float x1 = map_value((float)(start_index + i), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800bf00:	1e78      	subs	r0, r7, #1
 800bf02:	f7f5 fc13 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800bf06:	4919      	ldr	r1, [pc, #100]	@ (800bf6c <pdf_chart_plot_data.constprop.0+0xf0>)
 800bf08:	f7f5 f81c 	bl	8000f44 <__aeabi_fmul>
 800bf0c:	1c31      	adds	r1, r6, #0
 800bf0e:	f7f4 fe4b 	bl	8000ba8 <__aeabi_fdiv>
 800bf12:	4917      	ldr	r1, [pc, #92]	@ (800bf70 <pdf_chart_plot_data.constprop.0+0xf4>)
 800bf14:	f7f4 fc56 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800bf18:	f7f5 fbe8 	bl	80016ec <__aeabi_f2iz>
 800bf1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf1e:	4e15      	ldr	r6, [pc, #84]	@ (800bf74 <pdf_chart_plot_data.constprop.0+0xf8>)
 800bf20:	900d      	str	r0, [sp, #52]	@ 0x34
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	2300      	movs	r3, #0
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800bf2a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800bf2c:	9302      	str	r3, [sp, #8]
 800bf2e:	4b12      	ldr	r3, [pc, #72]	@ (800bf78 <pdf_chart_plot_data.constprop.0+0xfc>)
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800bf30:	3701      	adds	r7, #1
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800bf32:	9301      	str	r3, [sp, #4]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800bf34:	6860      	ldr	r0, [r4, #4]
 800bf36:	f7f5 f95f 	bl	80011f8 <__aeabi_fsub>
 800bf3a:	9907      	ldr	r1, [sp, #28]
 800bf3c:	f7f5 f802 	bl	8000f44 <__aeabi_fmul>
 800bf40:	9908      	ldr	r1, [sp, #32]
 800bf42:	f7f4 fe31 	bl	8000ba8 <__aeabi_fdiv>
 800bf46:	1c29      	adds	r1, r5, #0
 800bf48:	f7f4 fc3c 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800bf4c:	f7f5 fbce 	bl	80016ec <__aeabi_f2iz>
 800bf50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf52:	9000      	str	r0, [sp, #0]
 800bf54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bf56:	0030      	movs	r0, r6
 800bf58:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bf5a:	f00c fe9f 	bl	8018c9c <tpdf_draw_line>
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800bf5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf60:	3404      	adds	r4, #4
 800bf62:	42bb      	cmp	r3, r7
 800bf64:	d196      	bne.n	800be94 <pdf_chart_plot_data.constprop.0+0x18>
}
 800bf66:	b00f      	add	sp, #60	@ 0x3c
 800bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6a:	46c0      	nop			@ (mov r8, r8)
 800bf6c:	43e10000 	.word	0x43e10000
 800bf70:	42960000 	.word	0x42960000
 800bf74:	20003090 	.word	0x20003090
 800bf78:	3fa00000 	.word	0x3fa00000

0800bf7c <pdf_insert_datapoint_to_table.constprop.0>:
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bf7e:	4c7b      	ldr	r4, [pc, #492]	@ (800c16c <pdf_insert_datapoint_to_table.constprop.0+0x1f0>)
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800bf80:	1c16      	adds	r6, r2, #0
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bf82:	0022      	movs	r2, r4
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800bf84:	b0bf      	sub	sp, #252	@ 0xfc
 800bf86:	910c      	str	r1, [sp, #48]	@ 0x30
 800bf88:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bf8a:	1c1f      	adds	r7, r3, #0
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bf8c:	3292      	adds	r2, #146	@ 0x92
 800bf8e:	4b78      	ldr	r3, [pc, #480]	@ (800c170 <pdf_insert_datapoint_to_table.constprop.0+0x1f4>)
 800bf90:	7812      	ldrb	r2, [r2, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	0212      	lsls	r2, r2, #8
 800bf96:	431a      	orrs	r2, r3
 800bf98:	0023      	movs	r3, r4
 800bf9a:	3393      	adds	r3, #147	@ 0x93
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	041b      	lsls	r3, r3, #16
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	0022      	movs	r2, r4
 800bfa4:	3294      	adds	r2, #148	@ 0x94
 800bfa6:	7815      	ldrb	r5, [r2, #0]
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800bfa8:	0022      	movs	r2, r4
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bfaa:	062d      	lsls	r5, r5, #24
 800bfac:	431d      	orrs	r5, r3
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800bfae:	0023      	movs	r3, r4
 800bfb0:	329a      	adds	r2, #154	@ 0x9a
 800bfb2:	7812      	ldrb	r2, [r2, #0]
 800bfb4:	3399      	adds	r3, #153	@ 0x99
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	0212      	lsls	r2, r2, #8
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	0023      	movs	r3, r4
 800bfbe:	339b      	adds	r3, #155	@ 0x9b
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	041b      	lsls	r3, r3, #16
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	0022      	movs	r2, r4
 800bfc8:	329c      	adds	r2, #156	@ 0x9c
 800bfca:	7812      	ldrb	r2, [r2, #0]
 800bfcc:	0612      	lsls	r2, r2, #24
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	920d      	str	r2, [sp, #52]	@ 0x34
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800bfd2:	0022      	movs	r2, r4
 800bfd4:	0023      	movs	r3, r4
 800bfd6:	3298      	adds	r2, #152	@ 0x98
 800bfd8:	7810      	ldrb	r0, [r2, #0]
 800bfda:	3397      	adds	r3, #151	@ 0x97
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	0200      	lsls	r0, r0, #8
 800bfe0:	4318      	orrs	r0, r3
 800bfe2:	0400      	lsls	r0, r0, #16
 800bfe4:	1400      	asrs	r0, r0, #16
 800bfe6:	f7f5 fba1 	bl	800172c <__aeabi_i2f>
 800bfea:	4962      	ldr	r1, [pc, #392]	@ (800c174 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800bfec:	f7f4 fddc 	bl	8000ba8 <__aeabi_fdiv>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800bff0:	0023      	movs	r3, r4
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800bff2:	9007      	str	r0, [sp, #28]
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800bff4:	339f      	adds	r3, #159	@ 0x9f
 800bff6:	781a      	ldrb	r2, [r3, #0]
 800bff8:	0023      	movs	r3, r4
 800bffa:	33a0      	adds	r3, #160	@ 0xa0
 800bffc:	781b      	ldrb	r3, [r3, #0]
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800bffe:	2100      	movs	r1, #0
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800c000:	021b      	lsls	r3, r3, #8
 800c002:	4313      	orrs	r3, r2
 800c004:	041b      	lsls	r3, r3, #16
 800c006:	141b      	asrs	r3, r3, #16
 800c008:	9308      	str	r3, [sp, #32]
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800c00a:	0023      	movs	r3, r4
 800c00c:	3395      	adds	r3, #149	@ 0x95
 800c00e:	781a      	ldrb	r2, [r3, #0]
 800c010:	0023      	movs	r3, r4
 800c012:	3396      	adds	r3, #150	@ 0x96
 800c014:	781b      	ldrb	r3, [r3, #0]
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c016:	1c38      	adds	r0, r7, #0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800c018:	021b      	lsls	r3, r3, #8
 800c01a:	4313      	orrs	r3, r2
 800c01c:	041b      	lsls	r3, r3, #16
 800c01e:	141b      	asrs	r3, r3, #16
 800c020:	9309      	str	r3, [sp, #36]	@ 0x24
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800c022:	0023      	movs	r3, r4
 800c024:	349e      	adds	r4, #158	@ 0x9e
 800c026:	339d      	adds	r3, #157	@ 0x9d
 800c028:	781a      	ldrb	r2, [r3, #0]
 800c02a:	7823      	ldrb	r3, [r4, #0]
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	4313      	orrs	r3, r2
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	141b      	asrs	r3, r3, #16
 800c034:	930a      	str	r3, [sp, #40]	@ 0x28
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c036:	f7f4 fa7b 	bl	8000530 <__aeabi_fcmpge>
 800c03a:	1e04      	subs	r4, r0, #0
 800c03c:	d017      	beq.n	800c06e <pdf_insert_datapoint_to_table.constprop.0+0xf2>
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800c03e:	0028      	movs	r0, r5
 800c040:	f7f5 fbc4 	bl	80017cc <__aeabi_ui2f>
 800c044:	494c      	ldr	r1, [pc, #304]	@ (800c178 <pdf_insert_datapoint_to_table.constprop.0+0x1fc>)
 800c046:	f7f4 fdaf 	bl	8000ba8 <__aeabi_fdiv>
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c04a:	1c39      	adds	r1, r7, #0
 800c04c:	f7f4 fa52 	bl	80004f4 <__aeabi_fcmplt>
 800c050:	2401      	movs	r4, #1
 800c052:	2800      	cmp	r0, #0
 800c054:	d10b      	bne.n	800c06e <pdf_insert_datapoint_to_table.constprop.0+0xf2>
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800c056:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c058:	f7f5 fbb8 	bl	80017cc <__aeabi_ui2f>
 800c05c:	4946      	ldr	r1, [pc, #280]	@ (800c178 <pdf_insert_datapoint_to_table.constprop.0+0x1fc>)
 800c05e:	f7f4 fda3 	bl	8000ba8 <__aeabi_fdiv>
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800c062:	1c39      	adds	r1, r7, #0
 800c064:	f7f4 fa46 	bl	80004f4 <__aeabi_fcmplt>
 800c068:	1e43      	subs	r3, r0, #1
 800c06a:	4198      	sbcs	r0, r3
 800c06c:	0004      	movs	r4, r0
                       temperature >= th1 || temperature >= th2);
 800c06e:	9807      	ldr	r0, [sp, #28]
 800c070:	1c31      	adds	r1, r6, #0
 800c072:	f7f4 fa53 	bl	800051c <__aeabi_fcmpgt>
 800c076:	2501      	movs	r5, #1
 800c078:	2800      	cmp	r0, #0
 800c07a:	d121      	bne.n	800c0c0 <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800c07c:	9808      	ldr	r0, [sp, #32]
 800c07e:	f7f5 fb55 	bl	800172c <__aeabi_i2f>
 800c082:	493c      	ldr	r1, [pc, #240]	@ (800c174 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c084:	f7f4 fd90 	bl	8000ba8 <__aeabi_fdiv>
    bool temp_alarm = (temperature < tl1 || temperature < tl2 ||
 800c088:	1c31      	adds	r1, r6, #0
 800c08a:	f7f4 fa47 	bl	800051c <__aeabi_fcmpgt>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d116      	bne.n	800c0c0 <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800c092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c094:	f7f5 fb4a 	bl	800172c <__aeabi_i2f>
 800c098:	4936      	ldr	r1, [pc, #216]	@ (800c174 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c09a:	f7f4 fd85 	bl	8000ba8 <__aeabi_fdiv>
    bool temp_alarm = (temperature < tl1 || temperature < tl2 ||
 800c09e:	1c31      	adds	r1, r6, #0
 800c0a0:	f7f4 fa32 	bl	8000508 <__aeabi_fcmple>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d10b      	bne.n	800c0c0 <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800c0a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0aa:	f7f5 fb3f 	bl	800172c <__aeabi_i2f>
 800c0ae:	4931      	ldr	r1, [pc, #196]	@ (800c174 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800c0b0:	f7f4 fd7a 	bl	8000ba8 <__aeabi_fdiv>
                       temperature >= th1 || temperature >= th2);
 800c0b4:	1c31      	adds	r1, r6, #0
 800c0b6:	f7f4 fa27 	bl	8000508 <__aeabi_fcmple>
 800c0ba:	1e43      	subs	r3, r0, #1
 800c0bc:	4198      	sbcs	r0, r3
 800c0be:	0005      	movs	r5, r0
    time_to_dmyhms_string(time, time_buff, sizeof(time_buff));
 800c0c0:	2240      	movs	r2, #64	@ 0x40
 800c0c2:	432c      	orrs	r4, r5
 800c0c4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800c0c6:	a90e      	add	r1, sp, #56	@ 0x38
 800c0c8:	9407      	str	r4, [sp, #28]
 800c0ca:	f7ff fbff 	bl	800b8cc <time_to_dmyhms_string>
    index = record_num % DATAPOINTS_PER_PAGE;
 800c0ce:	21f0      	movs	r1, #240	@ 0xf0
 800c0d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c0d2:	0049      	lsls	r1, r1, #1
 800c0d4:	f7f4 f8ce 	bl	8000274 <__aeabi_uidivmod>
 800c0d8:	000d      	movs	r5, r1
    child_table_num = (UINT) (index / DATAPOINTS_PER_CHILD_TABLE);
 800c0da:	2160      	movs	r1, #96	@ 0x60
 800c0dc:	0028      	movs	r0, r5
 800c0de:	f7f4 f843 	bl	8000168 <__udivsi3>
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800c0e2:	2463      	movs	r4, #99	@ 0x63
    index_in_child_table = (index % DATAPOINTS_PER_CHILD_TABLE);
 800c0e4:	2160      	movs	r1, #96	@ 0x60
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800c0e6:	4344      	muls	r4, r0
    index_in_child_table = (index % DATAPOINTS_PER_CHILD_TABLE);
 800c0e8:	0028      	movs	r0, r5
 800c0ea:	f7f4 f8c3 	bl	8000274 <__aeabi_uidivmod>
    *y = TEXT_DATAPOINT_Y_POS_START - index_in_child_table * DATAPOINTS_Y_MARGIN;
 800c0ee:	2307      	movs	r3, #7
 800c0f0:	434b      	muls	r3, r1
 800c0f2:	4d22      	ldr	r5, [pc, #136]	@ (800c17c <pdf_insert_datapoint_to_table.constprop.0+0x200>)
    if (radiation < 0.0f)
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	1c38      	adds	r0, r7, #0
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800c0f8:	3434      	adds	r4, #52	@ 0x34
    *y = TEXT_DATAPOINT_Y_POS_START - index_in_child_table * DATAPOINTS_Y_MARGIN;
 800c0fa:	1aed      	subs	r5, r5, r3
    if (radiation < 0.0f)
 800c0fc:	f7f4 f9fa 	bl	80004f4 <__aeabi_fcmplt>
 800c100:	2800      	cmp	r0, #0
 800c102:	d021      	beq.n	800c148 <pdf_insert_datapoint_to_table.constprop.0+0x1cc>
        snprintf(buff, sizeof(buff), "%s     %-5.1f      n/a",     time_buff, temperature);
 800c104:	1c30      	adds	r0, r6, #0
 800c106:	f7f7 fb47 	bl	8003798 <__aeabi_f2d>
 800c10a:	4f1d      	ldr	r7, [pc, #116]	@ (800c180 <pdf_insert_datapoint_to_table.constprop.0+0x204>)
 800c10c:	9000      	str	r0, [sp, #0]
 800c10e:	9101      	str	r1, [sp, #4]
 800c110:	003a      	movs	r2, r7
 800c112:	2180      	movs	r1, #128	@ 0x80
 800c114:	ab0e      	add	r3, sp, #56	@ 0x38
 800c116:	a81e      	add	r0, sp, #120	@ 0x78
 800c118:	f00e f89a 	bl	801a250 <sniprintf>
    float r = is_alarm ? 1.0f : 0.0f, g = 0.0f, b = 0.0f;
 800c11c:	2200      	movs	r2, #0
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	1c11      	adds	r1, r2, #0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <pdf_insert_datapoint_to_table.constprop.0+0x1ae>
 800c126:	21fe      	movs	r1, #254	@ 0xfe
 800c128:	0589      	lsls	r1, r1, #22
    return tpdf_draw_colored_text(&pdf_file, x_pos, y_pos, "F1", TEXT_DATAPOINT_FONT_SIZE, r, g, b, buff);
 800c12a:	9203      	str	r2, [sp, #12]
 800c12c:	9202      	str	r2, [sp, #8]
 800c12e:	2205      	movs	r2, #5
 800c130:	ae1e      	add	r6, sp, #120	@ 0x78
 800c132:	9101      	str	r1, [sp, #4]
 800c134:	9200      	str	r2, [sp, #0]
 800c136:	0021      	movs	r1, r4
 800c138:	002a      	movs	r2, r5
 800c13a:	4b12      	ldr	r3, [pc, #72]	@ (800c184 <pdf_insert_datapoint_to_table.constprop.0+0x208>)
 800c13c:	9604      	str	r6, [sp, #16]
 800c13e:	4812      	ldr	r0, [pc, #72]	@ (800c188 <pdf_insert_datapoint_to_table.constprop.0+0x20c>)
 800c140:	f00c fd76 	bl	8018c30 <tpdf_draw_colored_text>
}
 800c144:	b03f      	add	sp, #252	@ 0xfc
 800c146:	bdf0      	pop	{r4, r5, r6, r7, pc}
        snprintf(buff, sizeof(buff), "%s     %-5.1f      %-6.2f", time_buff, temperature, radiation);
 800c148:	1c38      	adds	r0, r7, #0
 800c14a:	f7f7 fb25 	bl	8003798 <__aeabi_f2d>
 800c14e:	9002      	str	r0, [sp, #8]
 800c150:	9103      	str	r1, [sp, #12]
 800c152:	1c30      	adds	r0, r6, #0
 800c154:	f7f7 fb20 	bl	8003798 <__aeabi_f2d>
 800c158:	4a0c      	ldr	r2, [pc, #48]	@ (800c18c <pdf_insert_datapoint_to_table.constprop.0+0x210>)
 800c15a:	9000      	str	r0, [sp, #0]
 800c15c:	9101      	str	r1, [sp, #4]
 800c15e:	ab0e      	add	r3, sp, #56	@ 0x38
 800c160:	2180      	movs	r1, #128	@ 0x80
 800c162:	a81e      	add	r0, sp, #120	@ 0x78
 800c164:	f00e f874 	bl	801a250 <sniprintf>
 800c168:	e7d8      	b.n	800c11c <pdf_insert_datapoint_to_table.constprop.0+0x1a0>
 800c16a:	46c0      	nop			@ (mov r8, r8)
 800c16c:	20002bac 	.word	0x20002bac
 800c170:	20002c3d 	.word	0x20002c3d
 800c174:	41200000 	.word	0x41200000
 800c178:	42c80000 	.word	0x42c80000
 800c17c:	000002ee 	.word	0x000002ee
 800c180:	0801f873 	.word	0x0801f873
 800c184:	0801f51e 	.word	0x0801f51e
 800c188:	20003090 	.word	0x20003090
 800c18c:	0801f88a 	.word	0x0801f88a

0800c190 <pdf_gen_template_file>:
UINT pdf_gen_template_file(void) {
 800c190:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = f_stat (pdf_file_name,&fno);
 800c192:	4e27      	ldr	r6, [pc, #156]	@ (800c230 <pdf_gen_template_file+0xa0>)
UINT pdf_gen_template_file(void) {
 800c194:	b089      	sub	sp, #36	@ 0x24
    res = f_stat (pdf_file_name,&fno);
 800c196:	6830      	ldr	r0, [r6, #0]
 800c198:	a902      	add	r1, sp, #8
 800c19a:	f009 f82c 	bl	80151f6 <f_stat>
 800c19e:	4c25      	ldr	r4, [pc, #148]	@ (800c234 <pdf_gen_template_file+0xa4>)
 800c1a0:	1e07      	subs	r7, r0, #0
    switch (res)
 800c1a2:	4d25      	ldr	r5, [pc, #148]	@ (800c238 <pdf_gen_template_file+0xa8>)
 800c1a4:	d005      	beq.n	800c1b2 <pdf_gen_template_file+0x22>
 800c1a6:	2804      	cmp	r0, #4
 800c1a8:	d00b      	beq.n	800c1c2 <pdf_gen_template_file+0x32>
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800c1aa:	003b      	movs	r3, r7
 800c1ac:	4923      	ldr	r1, [pc, #140]	@ (800c23c <pdf_gen_template_file+0xac>)
 800c1ae:	6828      	ldr	r0, [r5, #0]
 800c1b0:	e002      	b.n	800c1b8 <pdf_gen_template_file+0x28>
        LOG_APP("File '%s' exists \r\n", pdf_file_name);
 800c1b2:	4923      	ldr	r1, [pc, #140]	@ (800c240 <pdf_gen_template_file+0xb0>)
 800c1b4:	6828      	ldr	r0, [r5, #0]
        LOG_APP("SUCCESS: Created template %s file\r\n",pdf_file_name);
 800c1b6:	6833      	ldr	r3, [r6, #0]
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800c1b8:	0022      	movs	r2, r4
 800c1ba:	68c0      	ldr	r0, [r0, #12]
 800c1bc:	f00d ffa2 	bl	801a104 <fiprintf>
        break;
 800c1c0:	e01a      	b.n	800c1f8 <pdf_gen_template_file+0x68>
        LOG_APP("File '%s' not found. Creating new file with header.\n", pdf_file_name);
 800c1c2:	6828      	ldr	r0, [r5, #0]
 800c1c4:	0022      	movs	r2, r4
 800c1c6:	491f      	ldr	r1, [pc, #124]	@ (800c244 <pdf_gen_template_file+0xb4>)
 800c1c8:	6833      	ldr	r3, [r6, #0]
 800c1ca:	68c0      	ldr	r0, [r0, #12]
 800c1cc:	f00d ff9a 	bl	801a104 <fiprintf>
        res = f_open(&pdf_file, pdf_file_name, FA_CREATE_NEW | FA_WRITE);
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <pdf_gen_template_file+0xb8>)
 800c1d2:	2206      	movs	r2, #6
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	6831      	ldr	r1, [r6, #0]
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	f008 fd6d 	bl	8014cb8 <f_open>
 800c1de:	1e07      	subs	r7, r0, #0
        if (res != FR_OK)
 800c1e0:	d00d      	beq.n	800c1fe <pdf_gen_template_file+0x6e>
            LOG_APP("Open PDF log file failed,Unmount...\r\n");
 800c1e2:	682b      	ldr	r3, [r5, #0]
 800c1e4:	0022      	movs	r2, r4
 800c1e6:	4919      	ldr	r1, [pc, #100]	@ (800c24c <pdf_gen_template_file+0xbc>)
 800c1e8:	68d8      	ldr	r0, [r3, #12]
 800c1ea:	f00d ff8b 	bl	801a104 <fiprintf>
            f_mount(NULL, "", 0);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4917      	ldr	r1, [pc, #92]	@ (800c250 <pdf_gen_template_file+0xc0>)
 800c1f2:	0010      	movs	r0, r2
 800c1f4:	f008 fd36 	bl	8014c64 <f_mount>
    return res;
 800c1f8:	0038      	movs	r0, r7
}
 800c1fa:	b009      	add	sp, #36	@ 0x24
 800c1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        generate_pdf_raw_report();
 800c1fe:	f7ff fb83 	bl	800b908 <generate_pdf_raw_report>
        LOG_APP("Closing file, Flush...\r\n");
 800c202:	682b      	ldr	r3, [r5, #0]
 800c204:	0022      	movs	r2, r4
 800c206:	4913      	ldr	r1, [pc, #76]	@ (800c254 <pdf_gen_template_file+0xc4>)
 800c208:	68d8      	ldr	r0, [r3, #12]
 800c20a:	f00d ff7b 	bl	801a104 <fiprintf>
        res = f_close(&pdf_file);
 800c20e:	9801      	ldr	r0, [sp, #4]
 800c210:	f008 ff58 	bl	80150c4 <f_close>
 800c214:	1e07      	subs	r7, r0, #0
        if (res != FR_OK)
 800c216:	d006      	beq.n	800c226 <pdf_gen_template_file+0x96>
            LOG_APP("f_close pdf file failed, ret=%d\r\n",res);
 800c218:	6828      	ldr	r0, [r5, #0]
 800c21a:	003b      	movs	r3, r7
 800c21c:	0022      	movs	r2, r4
 800c21e:	490e      	ldr	r1, [pc, #56]	@ (800c258 <pdf_gen_template_file+0xc8>)
 800c220:	68c0      	ldr	r0, [r0, #12]
 800c222:	f00d ff6f 	bl	801a104 <fiprintf>
        LOG_APP("SUCCESS: Created template %s file\r\n",pdf_file_name);
 800c226:	4b04      	ldr	r3, [pc, #16]	@ (800c238 <pdf_gen_template_file+0xa8>)
 800c228:	490c      	ldr	r1, [pc, #48]	@ (800c25c <pdf_gen_template_file+0xcc>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	e7c3      	b.n	800c1b6 <pdf_gen_template_file+0x26>
 800c22e:	46c0      	nop			@ (mov r8, r8)
 800c230:	200001fc 	.word	0x200001fc
 800c234:	0801e879 	.word	0x0801e879
 800c238:	200002cc 	.word	0x200002cc
 800c23c:	0801f2a6 	.word	0x0801f2a6
 800c240:	0801f1c8 	.word	0x0801f1c8
 800c244:	0801f1e1 	.word	0x0801f1e1
 800c248:	20003090 	.word	0x20003090
 800c24c:	0801f8a4 	.word	0x0801f8a4
 800c250:	0801f3a0 	.word	0x0801f3a0
 800c254:	0801f270 	.word	0x0801f270
 800c258:	0801f8cf 	.word	0x0801f8cf
 800c25c:	0801f8f6 	.word	0x0801f8f6

0800c260 <pdf_append_all_flash_log_entries>:
{
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 800c262:	4b3a      	ldr	r3, [pc, #232]	@ (800c34c <pdf_append_all_flash_log_entries+0xec>)
 800c264:	4e3a      	ldr	r6, [pc, #232]	@ (800c350 <pdf_append_all_flash_log_entries+0xf0>)
 800c266:	2232      	movs	r2, #50	@ 0x32
 800c268:	0030      	movs	r0, r6
 800c26a:	6819      	ldr	r1, [r3, #0]
{
 800c26c:	b089      	sub	sp, #36	@ 0x24
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 800c26e:	f008 fd23 	bl	8014cb8 <f_open>
 800c272:	1e04      	subs	r4, r0, #0
 800c274:	d008      	beq.n	800c288 <pdf_append_all_flash_log_entries+0x28>
        LOG_APP("FATAL: f_open pdf_file FAILED\r\n");
 800c276:	4b37      	ldr	r3, [pc, #220]	@ (800c354 <pdf_append_all_flash_log_entries+0xf4>)
 800c278:	4a37      	ldr	r2, [pc, #220]	@ (800c358 <pdf_append_all_flash_log_entries+0xf8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4937      	ldr	r1, [pc, #220]	@ (800c35c <pdf_append_all_flash_log_entries+0xfc>)
 800c27e:	68d8      	ldr	r0, [r3, #12]
 800c280:	f00d ff40 	bl	801a104 <fiprintf>
}
 800c284:	b009      	add	sp, #36	@ 0x24
 800c286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(&pdf_file, f_size(&pdf_file));
 800c288:	0030      	movs	r0, r6
 800c28a:	68f1      	ldr	r1, [r6, #12]
 800c28c:	f008 ff28 	bl	80150e0 <f_lseek>
        meas_data_log_read_entry(i, &entry);
 800c290:	ad02      	add	r5, sp, #8
 800c292:	0029      	movs	r1, r5
 800c294:	0020      	movs	r0, r4
 800c296:	f7fc fa4f 	bl	8008738 <meas_data_log_read_entry>
        if (entry.year == 0xFF || entry.index == 0xFFFF || entry.month == 0xFF)
 800c29a:	78aa      	ldrb	r2, [r5, #2]
 800c29c:	2aff      	cmp	r2, #255	@ 0xff
 800c29e:	d02e      	beq.n	800c2fe <pdf_append_all_flash_log_entries+0x9e>
 800c2a0:	8829      	ldrh	r1, [r5, #0]
 800c2a2:	4b2f      	ldr	r3, [pc, #188]	@ (800c360 <pdf_append_all_flash_log_entries+0x100>)
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	d02a      	beq.n	800c2fe <pdf_append_all_flash_log_entries+0x9e>
 800c2a8:	78eb      	ldrb	r3, [r5, #3]
 800c2aa:	2bff      	cmp	r3, #255	@ 0xff
 800c2ac:	d027      	beq.n	800c2fe <pdf_append_all_flash_log_entries+0x9e>
        file_log_time_t time = {
 800c2ae:	4669      	mov	r1, sp
 800c2b0:	704b      	strb	r3, [r1, #1]
 800c2b2:	88ab      	ldrh	r3, [r5, #4]
 800c2b4:	700a      	strb	r2, [r1, #0]
 800c2b6:	804b      	strh	r3, [r1, #2]
 800c2b8:	88eb      	ldrh	r3, [r5, #6]
 800c2ba:	808b      	strh	r3, [r1, #4]
        float temp = entry.temperature / 10.0f;
 800c2bc:	230a      	movs	r3, #10
 800c2be:	5ee8      	ldrsh	r0, [r5, r3]
 800c2c0:	f7f5 fa34 	bl	800172c <__aeabi_i2f>
 800c2c4:	4927      	ldr	r1, [pc, #156]	@ (800c364 <pdf_append_all_flash_log_entries+0x104>)
 800c2c6:	f7f4 fc6f 	bl	8000ba8 <__aeabi_fdiv>
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800c2ca:	7c6b      	ldrb	r3, [r5, #17]
        float temp = entry.temperature / 10.0f;
 800c2cc:	1c07      	adds	r7, r0, #0
        float dose = entry.dose / 100.0f;
 800c2ce:	9805      	ldr	r0, [sp, #20]
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d018      	beq.n	800c306 <pdf_append_all_flash_log_entries+0xa6>
        float dose = entry.dose / 100.0f;
 800c2d4:	f7f5 fa7a 	bl	80017cc <__aeabi_ui2f>
 800c2d8:	4923      	ldr	r1, [pc, #140]	@ (800c368 <pdf_append_all_flash_log_entries+0x108>)
 800c2da:	f7f4 fc65 	bl	8000ba8 <__aeabi_fdiv>
 800c2de:	1c03      	adds	r3, r0, #0
        if (pdf_insert_datapoint_to_table(i, &time, temp, rad_for_print, &current_settings) < 0) {
 800c2e0:	4669      	mov	r1, sp
 800c2e2:	0020      	movs	r0, r4
 800c2e4:	1c3a      	adds	r2, r7, #0
 800c2e6:	f7ff fe49 	bl	800bf7c <pdf_insert_datapoint_to_table.constprop.0>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	da0d      	bge.n	800c30a <pdf_append_all_flash_log_entries+0xaa>
            LOG_APP("PDF: insert failed at %lu\r\n", (unsigned long)i);
 800c2ee:	4b19      	ldr	r3, [pc, #100]	@ (800c354 <pdf_append_all_flash_log_entries+0xf4>)
 800c2f0:	4a19      	ldr	r2, [pc, #100]	@ (800c358 <pdf_append_all_flash_log_entries+0xf8>)
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	491d      	ldr	r1, [pc, #116]	@ (800c36c <pdf_append_all_flash_log_entries+0x10c>)
 800c2f6:	0023      	movs	r3, r4
 800c2f8:	68c0      	ldr	r0, [r0, #12]
 800c2fa:	f00d ff03 	bl	801a104 <fiprintf>
    f_close(&pdf_file);
 800c2fe:	0030      	movs	r0, r6
 800c300:	f008 fee0 	bl	80150c4 <f_close>
 800c304:	e7be      	b.n	800c284 <pdf_append_all_flash_log_entries+0x24>
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800c306:	4b1a      	ldr	r3, [pc, #104]	@ (800c370 <pdf_append_all_flash_log_entries+0x110>)
 800c308:	e7ea      	b.n	800c2e0 <pdf_append_all_flash_log_entries+0x80>
        if ((i % DATAPOINTS_PER_PAGE) == (DATAPOINTS_PER_PAGE - 1)) {
 800c30a:	21f0      	movs	r1, #240	@ 0xf0
 800c30c:	0020      	movs	r0, r4
 800c30e:	0049      	lsls	r1, r1, #1
 800c310:	f7f3 ffb0 	bl	8000274 <__aeabi_uidivmod>
 800c314:	23e0      	movs	r3, #224	@ 0xe0
 800c316:	33ff      	adds	r3, #255	@ 0xff
 800c318:	4299      	cmp	r1, r3
 800c31a:	d106      	bne.n	800c32a <pdf_append_all_flash_log_entries+0xca>
            UINT current_page = (UINT)(i / DATAPOINTS_PER_PAGE);
 800c31c:	21f0      	movs	r1, #240	@ 0xf0
 800c31e:	0020      	movs	r0, r4
 800c320:	0049      	lsls	r1, r1, #1
 800c322:	f7f3 ff21 	bl	8000168 <__udivsi3>
            pdf_page_handle_for_new_datapoints(current_page);
 800c326:	f7ff fc3f 	bl	800bba8 <pdf_page_handle_for_new_datapoints>
        if ((i & 0xFF) == 0) {
 800c32a:	b2e3      	uxtb	r3, r4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d107      	bne.n	800c340 <pdf_append_all_flash_log_entries+0xe0>
            LOG_APP("PDF append progress: %lu\r\n", (unsigned long)i);
 800c330:	4b08      	ldr	r3, [pc, #32]	@ (800c354 <pdf_append_all_flash_log_entries+0xf4>)
 800c332:	4a09      	ldr	r2, [pc, #36]	@ (800c358 <pdf_append_all_flash_log_entries+0xf8>)
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	490f      	ldr	r1, [pc, #60]	@ (800c374 <pdf_append_all_flash_log_entries+0x114>)
 800c338:	0023      	movs	r3, r4
 800c33a:	68c0      	ldr	r0, [r0, #12]
 800c33c:	f00d fee2 	bl	801a104 <fiprintf>
    for (uint32_t i = 0; i < max_idx; i++) {
 800c340:	4b0d      	ldr	r3, [pc, #52]	@ (800c378 <pdf_append_all_flash_log_entries+0x118>)
 800c342:	3401      	adds	r4, #1
 800c344:	429c      	cmp	r4, r3
 800c346:	d1a3      	bne.n	800c290 <pdf_append_all_flash_log_entries+0x30>
 800c348:	e7d9      	b.n	800c2fe <pdf_append_all_flash_log_entries+0x9e>
 800c34a:	46c0      	nop			@ (mov r8, r8)
 800c34c:	200001fc 	.word	0x200001fc
 800c350:	20003090 	.word	0x20003090
 800c354:	200002cc 	.word	0x200002cc
 800c358:	0801e879 	.word	0x0801e879
 800c35c:	0801f91f 	.word	0x0801f91f
 800c360:	0000ffff 	.word	0x0000ffff
 800c364:	41200000 	.word	0x41200000
 800c368:	42c80000 	.word	0x42c80000
 800c36c:	0801f944 	.word	0x0801f944
 800c370:	bf800000 	.word	0xbf800000
 800c374:	0801f965 	.word	0x0801f965
 800c378:	0000c30c 	.word	0x0000c30c

0800c37c <pdf_gen_completed_report>:
                            const DeviceSettings *dev_setting) {
 800c37c:	2300      	movs	r3, #0
 800c37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c380:	4c16      	ldr	r4, [pc, #88]	@ (800c3dc <pdf_gen_completed_report+0x60>)
 800c382:	44a5      	add	sp, r4
 800c384:	0004      	movs	r4, r0
 800c386:	9311      	str	r3, [sp, #68]	@ 0x44
 800c388:	9107      	str	r1, [sp, #28]
	const logging_summary_t *summary = csv_get_logging_summary();
 800c38a:	f7ff fab9 	bl	800b900 <csv_get_logging_summary>
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800c38e:	21f0      	movs	r1, #240	@ 0xf0
	       (unsigned)log->data_points_temp_count, (unsigned)DATAPOINTS_PER_PAGE,
 800c390:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800c392:	0049      	lsls	r1, r1, #1
	const logging_summary_t *summary = csv_get_logging_summary();
 800c394:	0006      	movs	r6, r0
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800c396:	0028      	movs	r0, r5
 800c398:	f7f3 fee6 	bl	8000168 <__udivsi3>
	printf("[DBG][PDF] temp_pts=%u, per_page=%u -> total_pages=%u(+1st)\r\n",
 800c39c:	22f0      	movs	r2, #240	@ 0xf0
 800c39e:	4f10      	ldr	r7, [pc, #64]	@ (800c3e0 <pdf_gen_completed_report+0x64>)
 800c3a0:	0029      	movs	r1, r5
 800c3a2:	1c43      	adds	r3, r0, #1
 800c3a4:	0052      	lsls	r2, r2, #1
 800c3a6:	0038      	movs	r0, r7
 800c3a8:	f00d fed8 	bl	801a15c <iprintf>
	printf("Report PDF File\r\n");
 800c3ac:	480d      	ldr	r0, [pc, #52]	@ (800c3e4 <pdf_gen_completed_report+0x68>)
 800c3ae:	f00d ff45 	bl	801a23c <puts>
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800c3b2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 800c3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e8 <pdf_gen_completed_report+0x6c>)
 800c3b6:	4c0d      	ldr	r4, [pc, #52]	@ (800c3ec <pdf_gen_completed_report+0x70>)
 800c3b8:	2232      	movs	r2, #50	@ 0x32
 800c3ba:	0020      	movs	r0, r4
 800c3bc:	6819      	ldr	r1, [r3, #0]
 800c3be:	f008 fc7b 	bl	8014cb8 <f_open>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d01c      	beq.n	800c400 <pdf_gen_completed_report+0x84>
        LOG_APP("FATAL: f_open pdf FAILED\r\n");
 800c3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <pdf_gen_completed_report+0x74>)
 800c3c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c3f4 <pdf_gen_completed_report+0x78>)
 800c3ca:	490b      	ldr	r1, [pc, #44]	@ (800c3f8 <pdf_gen_completed_report+0x7c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
    LOG_APP("Close PDF log file\r\n");
 800c3ce:	68d8      	ldr	r0, [r3, #12]
 800c3d0:	f00d fe98 	bl	801a104 <fiprintf>
}
 800c3d4:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <pdf_gen_completed_report+0x80>)
 800c3d6:	449d      	add	sp, r3
 800c3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3da:	46c0      	nop			@ (mov r8, r8)
 800c3dc:	ffffef2c 	.word	0xffffef2c
 800c3e0:	0801f98d 	.word	0x0801f98d
 800c3e4:	0801f9cb 	.word	0x0801f9cb
 800c3e8:	200001fc 	.word	0x200001fc
 800c3ec:	20003090 	.word	0x20003090
 800c3f0:	200002cc 	.word	0x200002cc
 800c3f4:	0801e879 	.word	0x0801e879
 800c3f8:	0801f9dc 	.word	0x0801f9dc
 800c3fc:	000010d4 	.word	0x000010d4
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800c400:	21f0      	movs	r1, #240	@ 0xf0
 800c402:	0028      	movs	r0, r5
 800c404:	0049      	lsls	r1, r1, #1
 800c406:	f7f3 feaf 	bl	8000168 <__udivsi3>
    UINT current_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page *10);
 800c40a:	210a      	movs	r1, #10
 800c40c:	4341      	muls	r1, r0
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, 1234 ,&pdf_monitor );
 800c40e:	4dfb      	ldr	r5, [pc, #1004]	@ (800c7fc <pdf_gen_completed_report+0x480>)
 800c410:	4afb      	ldr	r2, [pc, #1004]	@ (800c800 <pdf_gen_completed_report+0x484>)
 800c412:	002b      	movs	r3, r5
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800c414:	900e      	str	r0, [sp, #56]	@ 0x38
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, 1234 ,&pdf_monitor );
 800c416:	3118      	adds	r1, #24
 800c418:	0020      	movs	r0, r4
 800c41a:	f00c fceb 	bl	8018df4 <tpdf_end_new_stream_obj>
    time_to_dmyhms_string(&log->start_time, tmp_start_time, sizeof(tmp_start_time));
 800c41e:	0030      	movs	r0, r6
 800c420:	2220      	movs	r2, #32
 800c422:	3018      	adds	r0, #24
 800c424:	a934      	add	r1, sp, #208	@ 0xd0
 800c426:	f7ff fa51 	bl	800b8cc <time_to_dmyhms_string>
    time_to_dmyhms_string(&log->stop_time, tmp_stop_time, sizeof(tmp_stop_time));
 800c42a:	0030      	movs	r0, r6
 800c42c:	2220      	movs	r2, #32
 800c42e:	301e      	adds	r0, #30
 800c430:	a974      	add	r1, sp, #464	@ 0x1d0
 800c432:	f7ff fa4b 	bl	800b8cc <time_to_dmyhms_string>
    tpdf_start_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, &pdf_monitor);
 800c436:	002b      	movs	r3, r5
 800c438:	2207      	movs	r2, #7
 800c43a:	2106      	movs	r1, #6
 800c43c:	0020      	movs	r0, r4
 800c43e:	f00c fcbd 	bl	8018dbc <tpdf_start_new_stream_obj>
    snprintf(buff, sizeof(buff), "Start time: %s", tmp_start_time);
 800c442:	48f0      	ldr	r0, [pc, #960]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c444:	ae1a      	add	r6, sp, #104	@ 0x68
 800c446:	2140      	movs	r1, #64	@ 0x40
 800c448:	4aef      	ldr	r2, [pc, #956]	@ (800c808 <pdf_gen_completed_report+0x48c>)
 800c44a:	ab34      	add	r3, sp, #208	@ 0xd0
 800c44c:	1980      	adds	r0, r0, r6
 800c44e:	f00d feff 	bl	801a250 <sniprintf>
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c452:	4aec      	ldr	r2, [pc, #944]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c454:	2700      	movs	r7, #0
 800c456:	1992      	adds	r2, r2, r6
 800c458:	9204      	str	r2, [sp, #16]
 800c45a:	2209      	movs	r2, #9
 800c45c:	9200      	str	r2, [sp, #0]
 800c45e:	22c8      	movs	r2, #200	@ 0xc8
 800c460:	4bea      	ldr	r3, [pc, #936]	@ (800c80c <pdf_gen_completed_report+0x490>)
 800c462:	2132      	movs	r1, #50	@ 0x32
 800c464:	0092      	lsls	r2, r2, #2
 800c466:	0020      	movs	r0, r4
 800c468:	9703      	str	r7, [sp, #12]
 800c46a:	9702      	str	r7, [sp, #8]
 800c46c:	9701      	str	r7, [sp, #4]
 800c46e:	9308      	str	r3, [sp, #32]
 800c470:	f00c fbde 	bl	8018c30 <tpdf_draw_colored_text>
 800c474:	9006      	str	r0, [sp, #24]
    snprintf(buff, sizeof(buff), "Stop time: %s", tmp_stop_time);
 800c476:	48e3      	ldr	r0, [pc, #908]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c478:	2140      	movs	r1, #64	@ 0x40
 800c47a:	4ae5      	ldr	r2, [pc, #916]	@ (800c810 <pdf_gen_completed_report+0x494>)
 800c47c:	ab74      	add	r3, sp, #464	@ 0x1d0
 800c47e:	1980      	adds	r0, r0, r6
 800c480:	f00d fee6 	bl	801a250 <sniprintf>
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_RIGHT - 120, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c484:	2209      	movs	r2, #9
 800c486:	21aa      	movs	r1, #170	@ 0xaa
 800c488:	9200      	str	r2, [sp, #0]
 800c48a:	22c8      	movs	r2, #200	@ 0xc8
 800c48c:	4bdd      	ldr	r3, [pc, #884]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	199b      	adds	r3, r3, r6
 800c492:	9304      	str	r3, [sp, #16]
 800c494:	31ff      	adds	r1, #255	@ 0xff
 800c496:	9b08      	ldr	r3, [sp, #32]
 800c498:	0020      	movs	r0, r4
 800c49a:	9703      	str	r7, [sp, #12]
 800c49c:	9702      	str	r7, [sp, #8]
 800c49e:	9701      	str	r7, [sp, #4]
 800c4a0:	f00c fbc6 	bl	8018c30 <tpdf_draw_colored_text>
 800c4a4:	9b06      	ldr	r3, [sp, #24]
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c4a6:	2132      	movs	r1, #50	@ 0x32
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_RIGHT - 120, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c4a8:	181e      	adds	r6, r3, r0
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c4aa:	23ff      	movs	r3, #255	@ 0xff
 800c4ac:	059b      	lsls	r3, r3, #22
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	4bd8      	ldr	r3, [pc, #864]	@ (800c814 <pdf_gen_completed_report+0x498>)
 800c4b2:	4ad8      	ldr	r2, [pc, #864]	@ (800c814 <pdf_gen_completed_report+0x498>)
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	4bd7      	ldr	r3, [pc, #860]	@ (800c818 <pdf_gen_completed_report+0x49c>)
 800c4ba:	9704      	str	r7, [sp, #16]
 800c4bc:	9703      	str	r7, [sp, #12]
 800c4be:	9702      	str	r7, [sp, #8]
 800c4c0:	f00c fbec 	bl	8018c9c <tpdf_draw_line>
    tpdf_end_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, stream_length, &pdf_monitor);
 800c4c4:	002b      	movs	r3, r5
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c4c6:	1832      	adds	r2, r6, r0
    tpdf_end_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, stream_length, &pdf_monitor);
 800c4c8:	2107      	movs	r1, #7
 800c4ca:	0020      	movs	r0, r4
 800c4cc:	f00c fc92 	bl	8018df4 <tpdf_end_new_stream_obj>
        const logging_summary_t *summary = csv_get_logging_summary();
 800c4d0:	f7ff fa16 	bl	800b900 <csv_get_logging_summary>
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800c4d4:	2311      	movs	r3, #17
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	49d0      	ldr	r1, [pc, #832]	@ (800c81c <pdf_gen_completed_report+0x4a0>)
 800c4da:	9300      	str	r3, [sp, #0]
        const logging_summary_t *summary = csv_get_logging_summary();
 800c4dc:	0006      	movs	r6, r0
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800c4de:	3b06      	subs	r3, #6
 800c4e0:	a834      	add	r0, sp, #208	@ 0xd0
 800c4e2:	f00d feeb 	bl	801a2bc <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_1ST, content_buffer, &pdf_monitor);
 800c4e6:	a934      	add	r1, sp, #208	@ 0xd0
 800c4e8:	002b      	movs	r3, r5
 800c4ea:	000a      	movs	r2, r1
 800c4ec:	0020      	movs	r0, r4
 800c4ee:	210a      	movs	r1, #10
 800c4f0:	f00c fc3e 	bl	8018d70 <tpdf_add_new_obj>
    tpdf_start_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,&pdf_monitor);
 800c4f4:	002b      	movs	r3, r5
 800c4f6:	220d      	movs	r2, #13
 800c4f8:	210b      	movs	r1, #11
 800c4fa:	0020      	movs	r0, r4
 800c4fc:	f00c fc5e 	bl	8018dbc <tpdf_start_new_stream_obj>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT,PDF_PAGE_TOP,"F2",24,0,0,1,"DATA LOG");
 800c500:	4bc7      	ldr	r3, [pc, #796]	@ (800c820 <pdf_gen_completed_report+0x4a4>)
 800c502:	21fe      	movs	r1, #254	@ 0xfe
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	22c8      	movs	r2, #200	@ 0xc8
 800c508:	2318      	movs	r3, #24
 800c50a:	4dc6      	ldr	r5, [pc, #792]	@ (800c824 <pdf_gen_completed_report+0x4a8>)
 800c50c:	0589      	lsls	r1, r1, #22
 800c50e:	9103      	str	r1, [sp, #12]
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	2132      	movs	r1, #50	@ 0x32
 800c514:	002b      	movs	r3, r5
 800c516:	0092      	lsls	r2, r2, #2
 800c518:	0020      	movs	r0, r4
 800c51a:	9702      	str	r7, [sp, #8]
 800c51c:	9701      	str	r7, [sp, #4]
 800c51e:	f00c fb87 	bl	8018c30 <tpdf_draw_colored_text>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c522:	4bc1      	ldr	r3, [pc, #772]	@ (800c828 <pdf_gen_completed_report+0x4ac>)
 800c524:	2200      	movs	r2, #0
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT,PDF_PAGE_TOP,"F2",24,0,0,1,"DATA LOG");
 800c526:	900a      	str	r0, [sp, #40]	@ 0x28
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c528:	a921      	add	r1, sp, #132	@ 0x84
 800c52a:	0018      	movs	r0, r3
 800c52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c52e:	f005 fd23 	bl	8011f78 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c532:	2200      	movs	r2, #0
 800c534:	a920      	add	r1, sp, #128	@ 0x80
 800c536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c538:	f005 fd50 	bl	8011fdc <HAL_RTC_GetDate>
    snprintf(created_at, sizeof(created_at), "20%02u-%02u-%02u %02u:%02u:%02u",
 800c53c:	a91a      	add	r1, sp, #104	@ 0x68
 800c53e:	7ecb      	ldrb	r3, [r1, #27]
 800c540:	7f89      	ldrb	r1, [r1, #30]
 800c542:	4aba      	ldr	r2, [pc, #744]	@ (800c82c <pdf_gen_completed_report+0x4b0>)
 800c544:	9104      	str	r1, [sp, #16]
 800c546:	a91a      	add	r1, sp, #104	@ 0x68
 800c548:	7f49      	ldrb	r1, [r1, #29]
 800c54a:	a82c      	add	r0, sp, #176	@ 0xb0
 800c54c:	9103      	str	r1, [sp, #12]
 800c54e:	a91a      	add	r1, sp, #104	@ 0x68
 800c550:	7f09      	ldrb	r1, [r1, #28]
 800c552:	9102      	str	r1, [sp, #8]
 800c554:	a91a      	add	r1, sp, #104	@ 0x68
 800c556:	7e89      	ldrb	r1, [r1, #26]
 800c558:	9101      	str	r1, [sp, #4]
 800c55a:	a91a      	add	r1, sp, #104	@ 0x68
 800c55c:	7e49      	ldrb	r1, [r1, #25]
 800c55e:	9100      	str	r1, [sp, #0]
 800c560:	2120      	movs	r1, #32
 800c562:	f00d fe75 	bl	801a250 <sniprintf>
    stream_len += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT + 130, PDF_PAGE_TOP, "F2", 9, 0,0,0, "File Created At: ");
 800c566:	2209      	movs	r2, #9
 800c568:	9200      	str	r2, [sp, #0]
 800c56a:	22c8      	movs	r2, #200	@ 0xc8
 800c56c:	4bb0      	ldr	r3, [pc, #704]	@ (800c830 <pdf_gen_completed_report+0x4b4>)
 800c56e:	21b4      	movs	r1, #180	@ 0xb4
 800c570:	9304      	str	r3, [sp, #16]
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	002b      	movs	r3, r5
 800c576:	0020      	movs	r0, r4
 800c578:	9703      	str	r7, [sp, #12]
 800c57a:	9702      	str	r7, [sp, #8]
 800c57c:	9701      	str	r7, [sp, #4]
 800c57e:	f00c fb57 	bl	8018c30 <tpdf_draw_colored_text>
    stream_len += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT + 260, PDF_PAGE_TOP, "F1", 9, 0,0,0, created_at);
 800c582:	2209      	movs	r2, #9
 800c584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c586:	9200      	str	r2, [sp, #0]
 800c588:	180d      	adds	r5, r1, r0
 800c58a:	a92c      	add	r1, sp, #176	@ 0xb0
 800c58c:	9104      	str	r1, [sp, #16]
 800c58e:	22c8      	movs	r2, #200	@ 0xc8
 800c590:	219b      	movs	r1, #155	@ 0x9b
 800c592:	9b08      	ldr	r3, [sp, #32]
 800c594:	0092      	lsls	r2, r2, #2
 800c596:	0049      	lsls	r1, r1, #1
 800c598:	0020      	movs	r0, r4
 800c59a:	9703      	str	r7, [sp, #12]
 800c59c:	9702      	str	r7, [sp, #8]
 800c59e:	9701      	str	r7, [sp, #4]
 800c5a0:	f00c fb46 	bl	8018c30 <tpdf_draw_colored_text>
    stream_len += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT,PDF_PAGE_TOP - 5, 2.0, 0,0,0);
 800c5a4:	2380      	movs	r3, #128	@ 0x80
 800c5a6:	05db      	lsls	r3, r3, #23
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	4b9a      	ldr	r3, [pc, #616]	@ (800c814 <pdf_gen_completed_report+0x498>)
 800c5ac:	4a99      	ldr	r2, [pc, #612]	@ (800c814 <pdf_gen_completed_report+0x498>)
 800c5ae:	1945      	adds	r5, r0, r5
 800c5b0:	2132      	movs	r1, #50	@ 0x32
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	0020      	movs	r0, r4
 800c5b6:	4b98      	ldr	r3, [pc, #608]	@ (800c818 <pdf_gen_completed_report+0x49c>)
 800c5b8:	9704      	str	r7, [sp, #16]
 800c5ba:	9703      	str	r7, [sp, #12]
 800c5bc:	9702      	str	r7, [sp, #8]
 800c5be:	f00c fb6d 	bl	8018c9c <tpdf_draw_line>
 800c5c2:	1943      	adds	r3, r0, r5
    int len = draw_section_title(file_ptr, *y_pos, "Device Information");
 800c5c4:	20be      	movs	r0, #190	@ 0xbe
 800c5c6:	499b      	ldr	r1, [pc, #620]	@ (800c834 <pdf_gen_completed_report+0x4b8>)
 800c5c8:	0080      	lsls	r0, r0, #2
 800c5ca:	9308      	str	r3, [sp, #32]
 800c5cc:	f7ff fbfc 	bl	800bdc8 <draw_section_title.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c5d0:	21b9      	movs	r1, #185	@ 0xb9
    int len = draw_section_title(file_ptr, *y_pos, "Device Information");
 800c5d2:	0005      	movs	r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c5d4:	4a98      	ldr	r2, [pc, #608]	@ (800c838 <pdf_gen_completed_report+0x4bc>)
 800c5d6:	9b07      	ldr	r3, [sp, #28]
 800c5d8:	2037      	movs	r0, #55	@ 0x37
 800c5da:	0089      	lsls	r1, r1, #2
 800c5dc:	f7ff fc1a 	bl	800be14 <draw_key_value_pair.constprop.0>
	if (dev_setting->sensor_type == 1)
 800c5e0:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c5e2:	182d      	adds	r5, r5, r0
	if (dev_setting->sensor_type == 1)
 800c5e4:	3330      	adds	r3, #48	@ 0x30
 800c5e6:	781a      	ldrb	r2, [r3, #0]
		probe_type_str = "Temperature and Radiation (interval)";
 800c5e8:	4b94      	ldr	r3, [pc, #592]	@ (800c83c <pdf_gen_completed_report+0x4c0>)
	if (dev_setting->sensor_type == 1)
 800c5ea:	2a01      	cmp	r2, #1
 800c5ec:	d003      	beq.n	800c5f6 <pdf_gen_completed_report+0x27a>
		probe_type_str = "Unknown Sensor Type";
 800c5ee:	4b94      	ldr	r3, [pc, #592]	@ (800c840 <pdf_gen_completed_report+0x4c4>)
	else if (dev_setting->sensor_type == 2)
 800c5f0:	2a02      	cmp	r2, #2
 800c5f2:	d100      	bne.n	800c5f6 <pdf_gen_completed_report+0x27a>
		probe_type_str = "Temperature Only";
 800c5f4:	4b93      	ldr	r3, [pc, #588]	@ (800c844 <pdf_gen_completed_report+0x4c8>)
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Probe Type :", probe_type_str);
 800c5f6:	21b9      	movs	r1, #185	@ 0xb9
 800c5f8:	2096      	movs	r0, #150	@ 0x96
 800c5fa:	4a93      	ldr	r2, [pc, #588]	@ (800c848 <pdf_gen_completed_report+0x4cc>)
 800c5fc:	0089      	lsls	r1, r1, #2
 800c5fe:	0040      	lsls	r0, r0, #1
 800c600:	f7ff fc08 	bl	800be14 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c604:	21b6      	movs	r1, #182	@ 0xb6
 800c606:	9b07      	ldr	r3, [sp, #28]
 800c608:	4a90      	ldr	r2, [pc, #576]	@ (800c84c <pdf_gen_completed_report+0x4d0>)
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Probe Type :", probe_type_str);
 800c60a:	182d      	adds	r5, r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c60c:	3320      	adds	r3, #32
 800c60e:	0089      	lsls	r1, r1, #2
 800c610:	2037      	movs	r0, #55	@ 0x37
 800c612:	f7ff fbff 	bl	800be14 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c616:	21b6      	movs	r1, #182	@ 0xb6
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c618:	182d      	adds	r5, r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c61a:	2096      	movs	r0, #150	@ 0x96
 800c61c:	9b07      	ldr	r3, [sp, #28]
 800c61e:	4a8c      	ldr	r2, [pc, #560]	@ (800c850 <pdf_gen_completed_report+0x4d4>)
 800c620:	3331      	adds	r3, #49	@ 0x31
 800c622:	0089      	lsls	r1, r1, #2
 800c624:	0040      	lsls	r0, r0, #1
 800c626:	f7ff fbf5 	bl	800be14 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c62a:	21b3      	movs	r1, #179	@ 0xb3
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c62c:	182b      	adds	r3, r5, r0
 800c62e:	9309      	str	r3, [sp, #36]	@ 0x24
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c630:	9b07      	ldr	r3, [sp, #28]
 800c632:	4a88      	ldr	r2, [pc, #544]	@ (800c854 <pdf_gen_completed_report+0x4d8>)
 800c634:	3310      	adds	r3, #16
 800c636:	0089      	lsls	r1, r1, #2
 800c638:	2037      	movs	r0, #55	@ 0x37
 800c63a:	f7ff fbeb 	bl	800be14 <draw_key_value_pair.constprop.0>
 800c63e:	0005      	movs	r5, r0
    int len = draw_section_title(file_ptr, *y_pos, "Trip Information");
 800c640:	20ae      	movs	r0, #174	@ 0xae
 800c642:	4985      	ldr	r1, [pc, #532]	@ (800c858 <pdf_gen_completed_report+0x4dc>)
 800c644:	0080      	lsls	r0, r0, #2
 800c646:	f7ff fbbf 	bl	800bdc8 <draw_section_title.constprop.0>
    snprintf(tmp_buff,sizeof(tmp_buff),"%7u",dev_setting->trip_code);
 800c64a:	9b07      	ldr	r3, [sp, #28]
    int len = draw_section_title(file_ptr, *y_pos, "Trip Information");
 800c64c:	9006      	str	r0, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%7u",dev_setting->trip_code);
 800c64e:	3339      	adds	r3, #57	@ 0x39
 800c650:	781a      	ldrb	r2, [r3, #0]
 800c652:	9b07      	ldr	r3, [sp, #28]
 800c654:	486b      	ldr	r0, [pc, #428]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c656:	333a      	adds	r3, #58	@ 0x3a
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	ac1a      	add	r4, sp, #104	@ 0x68
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	4313      	orrs	r3, r2
 800c660:	2110      	movs	r1, #16
 800c662:	4a7e      	ldr	r2, [pc, #504]	@ (800c85c <pdf_gen_completed_report+0x4e0>)
 800c664:	1900      	adds	r0, r0, r4
 800c666:	f00d fdf3 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c66a:	21a9      	movs	r1, #169	@ 0xa9
 800c66c:	4b65      	ldr	r3, [pc, #404]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c66e:	4a7c      	ldr	r2, [pc, #496]	@ (800c860 <pdf_gen_completed_report+0x4e4>)
 800c670:	191b      	adds	r3, r3, r4
 800c672:	0089      	lsls	r1, r1, #2
 800c674:	2037      	movs	r0, #55	@ 0x37
 800c676:	f7ff fbcd 	bl	800be14 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c67a:	21a6      	movs	r1, #166	@ 0xa6
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c67c:	9b06      	ldr	r3, [sp, #24]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c67e:	4a79      	ldr	r2, [pc, #484]	@ (800c864 <pdf_gen_completed_report+0x4e8>)
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c680:	181c      	adds	r4, r3, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c682:	9b07      	ldr	r3, [sp, #28]
 800c684:	2037      	movs	r0, #55	@ 0x37
 800c686:	333b      	adds	r3, #59	@ 0x3b
 800c688:	0089      	lsls	r1, r1, #2
 800c68a:	f7ff fbc3 	bl	800be14 <draw_key_value_pair.constprop.0>
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c68e:	9b08      	ldr	r3, [sp, #32]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c690:	1824      	adds	r4, r4, r0
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c692:	18e4      	adds	r4, r4, r3
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c696:	195b      	adds	r3, r3, r5
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c698:	18e3      	adds	r3, r4, r3
 800c69a:	9308      	str	r3, [sp, #32]
    switch (dev_setting->start_mode) {
 800c69c:	9b07      	ldr	r3, [sp, #28]
 800c69e:	4d72      	ldr	r5, [pc, #456]	@ (800c868 <pdf_gen_completed_report+0x4ec>)
 800c6a0:	3363      	adds	r3, #99	@ 0x63
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d802      	bhi.n	800c6ae <pdf_gen_completed_report+0x332>
 800c6a8:	4a70      	ldr	r2, [pc, #448]	@ (800c86c <pdf_gen_completed_report+0x4f0>)
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	589d      	ldr	r5, [r3, r2]
    int len = draw_section_title(file_ptr, *y_pos, "Configuration Information");
 800c6ae:	20a1      	movs	r0, #161	@ 0xa1
 800c6b0:	496f      	ldr	r1, [pc, #444]	@ (800c870 <pdf_gen_completed_report+0x4f4>)
 800c6b2:	0080      	lsls	r0, r0, #2
 800c6b4:	f7ff fb88 	bl	800bdc8 <draw_section_title.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c6b8:	219c      	movs	r1, #156	@ 0x9c
 800c6ba:	002b      	movs	r3, r5
    int len = draw_section_title(file_ptr, *y_pos, "Configuration Information");
 800c6bc:	0004      	movs	r4, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c6be:	4a6d      	ldr	r2, [pc, #436]	@ (800c874 <pdf_gen_completed_report+0x4f8>)
 800c6c0:	0089      	lsls	r1, r1, #2
 800c6c2:	2037      	movs	r0, #55	@ 0x37
 800c6c4:	f7ff fba6 	bl	800be14 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->temp_interval,tmp,sizeof(tmp));
 800c6c8:	9a07      	ldr	r2, [sp, #28]
 800c6ca:	9b07      	ldr	r3, [sp, #28]
 800c6cc:	3276      	adds	r2, #118	@ 0x76
 800c6ce:	7812      	ldrb	r2, [r2, #0]
 800c6d0:	3375      	adds	r3, #117	@ 0x75
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	0212      	lsls	r2, r2, #8
 800c6d6:	431a      	orrs	r2, r3
 800c6d8:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c6da:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->temp_interval,tmp,sizeof(tmp));
 800c6dc:	3377      	adds	r3, #119	@ 0x77
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	a91a      	add	r1, sp, #104	@ 0x68
 800c6e2:	041b      	lsls	r3, r3, #16
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	9a07      	ldr	r2, [sp, #28]
 800c6e8:	3278      	adds	r2, #120	@ 0x78
 800c6ea:	7810      	ldrb	r0, [r2, #0]
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	0600      	lsls	r0, r0, #24
 800c6f0:	4318      	orrs	r0, r3
 800c6f2:	4b44      	ldr	r3, [pc, #272]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c6f4:	185b      	adds	r3, r3, r1
 800c6f6:	0019      	movs	r1, r3
 800c6f8:	f7ff f8d8 	bl	800b8ac <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Temperature Log Interval :", tmp);
 800c6fc:	4b41      	ldr	r3, [pc, #260]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c6fe:	a91a      	add	r1, sp, #104	@ 0x68
 800c700:	185b      	adds	r3, r3, r1
 800c702:	2096      	movs	r0, #150	@ 0x96
 800c704:	219c      	movs	r1, #156	@ 0x9c
 800c706:	4a5c      	ldr	r2, [pc, #368]	@ (800c878 <pdf_gen_completed_report+0x4fc>)
 800c708:	0089      	lsls	r1, r1, #2
 800c70a:	0040      	lsls	r0, r0, #1
 800c70c:	f7ff fb82 	bl	800be14 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->start_delay,tmp,sizeof(tmp));
 800c710:	9a07      	ldr	r2, [sp, #28]
 800c712:	9b07      	ldr	r3, [sp, #28]
 800c714:	3265      	adds	r2, #101	@ 0x65
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	3364      	adds	r3, #100	@ 0x64
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	0212      	lsls	r2, r2, #8
 800c71e:	431a      	orrs	r2, r3
 800c720:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Temperature Log Interval :", tmp);
 800c722:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->start_delay,tmp,sizeof(tmp));
 800c724:	3366      	adds	r3, #102	@ 0x66
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	a91a      	add	r1, sp, #104	@ 0x68
 800c72a:	041b      	lsls	r3, r3, #16
 800c72c:	4313      	orrs	r3, r2
 800c72e:	9a07      	ldr	r2, [sp, #28]
 800c730:	3267      	adds	r2, #103	@ 0x67
 800c732:	7810      	ldrb	r0, [r2, #0]
 800c734:	2210      	movs	r2, #16
 800c736:	0600      	lsls	r0, r0, #24
 800c738:	4318      	orrs	r0, r3
 800c73a:	4b32      	ldr	r3, [pc, #200]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c73c:	185b      	adds	r3, r3, r1
 800c73e:	0019      	movs	r1, r3
 800c740:	f7ff f8b4 	bl	800b8ac <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Delay :", tmp);
 800c744:	4b2f      	ldr	r3, [pc, #188]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c746:	a91a      	add	r1, sp, #104	@ 0x68
 800c748:	185b      	adds	r3, r3, r1
 800c74a:	2199      	movs	r1, #153	@ 0x99
 800c74c:	4a4b      	ldr	r2, [pc, #300]	@ (800c87c <pdf_gen_completed_report+0x500>)
 800c74e:	0089      	lsls	r1, r1, #2
 800c750:	2037      	movs	r0, #55	@ 0x37
 800c752:	f7ff fb5f 	bl	800be14 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->rad_interval,tmp,sizeof(tmp));
 800c756:	9a07      	ldr	r2, [sp, #28]
 800c758:	9b07      	ldr	r3, [sp, #28]
 800c75a:	3272      	adds	r2, #114	@ 0x72
 800c75c:	7812      	ldrb	r2, [r2, #0]
 800c75e:	3371      	adds	r3, #113	@ 0x71
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	0212      	lsls	r2, r2, #8
 800c764:	431a      	orrs	r2, r3
 800c766:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Delay :", tmp);
 800c768:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->rad_interval,tmp,sizeof(tmp));
 800c76a:	3373      	adds	r3, #115	@ 0x73
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	a91a      	add	r1, sp, #104	@ 0x68
 800c770:	041b      	lsls	r3, r3, #16
 800c772:	4313      	orrs	r3, r2
 800c774:	9a07      	ldr	r2, [sp, #28]
 800c776:	3274      	adds	r2, #116	@ 0x74
 800c778:	7810      	ldrb	r0, [r2, #0]
 800c77a:	2210      	movs	r2, #16
 800c77c:	0600      	lsls	r0, r0, #24
 800c77e:	4318      	orrs	r0, r3
 800c780:	4b20      	ldr	r3, [pc, #128]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c782:	185b      	adds	r3, r3, r1
 800c784:	0019      	movs	r1, r3
 800c786:	f7ff f891 	bl	800b8ac <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Radiation Log Interval :", tmp);
 800c78a:	4b1e      	ldr	r3, [pc, #120]	@ (800c804 <pdf_gen_completed_report+0x488>)
 800c78c:	a91a      	add	r1, sp, #104	@ 0x68
 800c78e:	185b      	adds	r3, r3, r1
 800c790:	2096      	movs	r0, #150	@ 0x96
 800c792:	2199      	movs	r1, #153	@ 0x99
 800c794:	4a3a      	ldr	r2, [pc, #232]	@ (800c880 <pdf_gen_completed_report+0x504>)
 800c796:	0089      	lsls	r1, r1, #2
 800c798:	0040      	lsls	r0, r0, #1
 800c79a:	f7ff fb3b 	bl	800be14 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Stop Mode :", "Manual + Software");
 800c79e:	2196      	movs	r1, #150	@ 0x96
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Radiation Log Interval :", tmp);
 800c7a0:	1824      	adds	r4, r4, r0
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Stop Mode :", "Manual + Software");
 800c7a2:	2096      	movs	r0, #150	@ 0x96
 800c7a4:	4a37      	ldr	r2, [pc, #220]	@ (800c884 <pdf_gen_completed_report+0x508>)
 800c7a6:	4b38      	ldr	r3, [pc, #224]	@ (800c888 <pdf_gen_completed_report+0x50c>)
 800c7a8:	0089      	lsls	r1, r1, #2
 800c7aa:	0040      	lsls	r0, r0, #1
 800c7ac:	f7ff fb32 	bl	800be14 <draw_key_value_pair.constprop.0>
 800c7b0:	1824      	adds	r4, r4, r0
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c7b2:	2091      	movs	r0, #145	@ 0x91
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c7b4:	9b08      	ldr	r3, [sp, #32]
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c7b6:	4935      	ldr	r1, [pc, #212]	@ (800c88c <pdf_gen_completed_report+0x510>)
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c7b8:	18e3      	adds	r3, r4, r3
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c7ba:	0080      	lsls	r0, r0, #2
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c7bc:	931d      	str	r3, [sp, #116]	@ 0x74
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c7be:	f7ff fb03 	bl	800bdc8 <draw_section_title.constprop.0>
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c7c2:	4b33      	ldr	r3, [pc, #204]	@ (800c890 <pdf_gen_completed_report+0x514>)
 800c7c4:	228f      	movs	r2, #143	@ 0x8f
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	230a      	movs	r3, #10
 800c7ca:	4c32      	ldr	r4, [pc, #200]	@ (800c894 <pdf_gen_completed_report+0x518>)
 800c7cc:	4d15      	ldr	r5, [pc, #84]	@ (800c824 <pdf_gen_completed_report+0x4a8>)
 800c7ce:	2137      	movs	r1, #55	@ 0x37
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c7d0:	9009      	str	r0, [sp, #36]	@ 0x24
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	0020      	movs	r0, r4
 800c7d6:	002b      	movs	r3, r5
 800c7d8:	0092      	lsls	r2, r2, #2
 800c7da:	9703      	str	r7, [sp, #12]
 800c7dc:	9702      	str	r7, [sp, #8]
 800c7de:	9701      	str	r7, [sp, #4]
 800c7e0:	f00c fa26 	bl	8018c30 <tpdf_draw_colored_text>
    len += tpdf_draw_colored_text(file_ptr,155,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Delay Time");
 800c7e4:	4b2c      	ldr	r3, [pc, #176]	@ (800c898 <pdf_gen_completed_report+0x51c>)
 800c7e6:	228f      	movs	r2, #143	@ 0x8f
 800c7e8:	9304      	str	r3, [sp, #16]
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	219b      	movs	r1, #155	@ 0x9b
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c7ee:	9008      	str	r0, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,155,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Delay Time");
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	0020      	movs	r0, r4
 800c7f4:	002b      	movs	r3, r5
 800c7f6:	0092      	lsls	r2, r2, #2
 800c7f8:	e050      	b.n	800c89c <pdf_gen_completed_report+0x520>
 800c7fa:	46c0      	nop			@ (mov r8, r8)
 800c7fc:	20002c88 	.word	0x20002c88
 800c800:	000004d2 	.word	0x000004d2
 800c804:	000008e8 	.word	0x000008e8
 800c808:	0801f9fc 	.word	0x0801f9fc
 800c80c:	0801f51e 	.word	0x0801f51e
 800c810:	0801fa0b 	.word	0x0801fa0b
 800c814:	0000031b 	.word	0x0000031b
 800c818:	00000221 	.word	0x00000221
 800c81c:	0801fa19 	.word	0x0801fa19
 800c820:	0801fa6b 	.word	0x0801fa6b
 800c824:	0801f59e 	.word	0x0801f59e
 800c828:	200009f8 	.word	0x200009f8
 800c82c:	0801fa74 	.word	0x0801fa74
 800c830:	0801fa94 	.word	0x0801fa94
 800c834:	0801faa6 	.word	0x0801faa6
 800c838:	0801fab9 	.word	0x0801fab9
 800c83c:	0801eaff 	.word	0x0801eaff
 800c840:	0801eb35 	.word	0x0801eb35
 800c844:	0801eb24 	.word	0x0801eb24
 800c848:	0801fac7 	.word	0x0801fac7
 800c84c:	0801fad4 	.word	0x0801fad4
 800c850:	0801fae4 	.word	0x0801fae4
 800c854:	0801faf7 	.word	0x0801faf7
 800c858:	0801fb03 	.word	0x0801fb03
 800c85c:	0801fb14 	.word	0x0801fb14
 800c860:	0801fb18 	.word	0x0801fb18
 800c864:	0801fb22 	.word	0x0801fb22
 800c868:	0801f985 	.word	0x0801f985
 800c86c:	08020484 	.word	0x08020484
 800c870:	0801fb30 	.word	0x0801fb30
 800c874:	0801fb4a 	.word	0x0801fb4a
 800c878:	0801fb57 	.word	0x0801fb57
 800c87c:	0801fb72 	.word	0x0801fb72
 800c880:	0801fb80 	.word	0x0801fb80
 800c884:	0801fbab 	.word	0x0801fbab
 800c888:	0801fb99 	.word	0x0801fb99
 800c88c:	0801f3a0 	.word	0x0801f3a0
 800c890:	0801fbb7 	.word	0x0801fbb7
 800c894:	20003090 	.word	0x20003090
 800c898:	0801fbc2 	.word	0x0801fbc2
 800c89c:	9703      	str	r7, [sp, #12]
 800c89e:	9702      	str	r7, [sp, #8]
 800c8a0:	9701      	str	r7, [sp, #4]
 800c8a2:	f00c f9c5 	bl	8018c30 <tpdf_draw_colored_text>
 800c8a6:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,245,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Type");
 800c8a8:	4bf5      	ldr	r3, [pc, #980]	@ (800cc80 <pdf_gen_completed_report+0x904>)
 800c8aa:	1812      	adds	r2, r2, r0
 800c8ac:	9208      	str	r2, [sp, #32]
 800c8ae:	9304      	str	r3, [sp, #16]
 800c8b0:	228f      	movs	r2, #143	@ 0x8f
 800c8b2:	230a      	movs	r3, #10
 800c8b4:	21f5      	movs	r1, #245	@ 0xf5
 800c8b6:	0020      	movs	r0, r4
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	0092      	lsls	r2, r2, #2
 800c8bc:	002b      	movs	r3, r5
 800c8be:	9703      	str	r7, [sp, #12]
 800c8c0:	9702      	str	r7, [sp, #8]
 800c8c2:	9701      	str	r7, [sp, #4]
 800c8c4:	f00c f9b4 	bl	8018c30 <tpdf_draw_colored_text>
 800c8c8:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,325,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Total Time");
 800c8ca:	4bee      	ldr	r3, [pc, #952]	@ (800cc84 <pdf_gen_completed_report+0x908>)
 800c8cc:	1882      	adds	r2, r0, r2
 800c8ce:	9208      	str	r2, [sp, #32]
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	228f      	movs	r2, #143	@ 0x8f
 800c8d4:	230a      	movs	r3, #10
 800c8d6:	2146      	movs	r1, #70	@ 0x46
 800c8d8:	0020      	movs	r0, r4
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	0092      	lsls	r2, r2, #2
 800c8de:	002b      	movs	r3, r5
 800c8e0:	31ff      	adds	r1, #255	@ 0xff
 800c8e2:	9703      	str	r7, [sp, #12]
 800c8e4:	9702      	str	r7, [sp, #8]
 800c8e6:	9701      	str	r7, [sp, #4]
 800c8e8:	f00c f9a2 	bl	8018c30 <tpdf_draw_colored_text>
 800c8ec:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,435,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Violations");
 800c8ee:	4be6      	ldr	r3, [pc, #920]	@ (800cc88 <pdf_gen_completed_report+0x90c>)
 800c8f0:	1882      	adds	r2, r0, r2
 800c8f2:	9208      	str	r2, [sp, #32]
 800c8f4:	9304      	str	r3, [sp, #16]
 800c8f6:	228f      	movs	r2, #143	@ 0x8f
 800c8f8:	230a      	movs	r3, #10
 800c8fa:	21b4      	movs	r1, #180	@ 0xb4
 800c8fc:	0020      	movs	r0, r4
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	0092      	lsls	r2, r2, #2
 800c902:	002b      	movs	r3, r5
 800c904:	31ff      	adds	r1, #255	@ 0xff
 800c906:	9703      	str	r7, [sp, #12]
 800c908:	9702      	str	r7, [sp, #8]
 800c90a:	9701      	str	r7, [sp, #4]
 800c90c:	f00c f990 	bl	8018c30 <tpdf_draw_colored_text>
 800c910:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800c912:	4bde      	ldr	r3, [pc, #888]	@ (800cc8c <pdf_gen_completed_report+0x910>)
 800c914:	1882      	adds	r2, r0, r2
 800c916:	9208      	str	r2, [sp, #32]
 800c918:	9304      	str	r3, [sp, #16]
 800c91a:	228f      	movs	r2, #143	@ 0x8f
 800c91c:	230a      	movs	r3, #10
 800c91e:	21fa      	movs	r1, #250	@ 0xfa
 800c920:	0020      	movs	r0, r4
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	0092      	lsls	r2, r2, #2
 800c926:	002b      	movs	r3, r5
 800c928:	0049      	lsls	r1, r1, #1
 800c92a:	9703      	str	r7, [sp, #12]
 800c92c:	9702      	str	r7, [sp, #8]
 800c92e:	9701      	str	r7, [sp, #4]
 800c930:	f00c f97e 	bl	8018c30 <tpdf_draw_colored_text>
 800c934:	9b08      	ldr	r3, [sp, #32]
 800c936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c938:	9907      	ldr	r1, [sp, #28]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800c93a:	181b      	adds	r3, r3, r0
 800c93c:	189b      	adds	r3, r3, r2
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c93e:	9a07      	ldr	r2, [sp, #28]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800c940:	931f      	str	r3, [sp, #124]	@ 0x7c
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c942:	317b      	adds	r1, #123	@ 0x7b
 800c944:	780c      	ldrb	r4, [r1, #0]
 800c946:	327a      	adds	r2, #122	@ 0x7a
 800c948:	7812      	ldrb	r2, [r2, #0]
 800c94a:	0224      	lsls	r4, r4, #8
 800c94c:	4314      	orrs	r4, r2
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh1) : 0UL;
 800c94e:	2200      	movs	r2, #0
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c950:	6a73      	ldr	r3, [r6, #36]	@ 0x24
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh1) : 0UL;
 800c952:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c954:	42a3      	cmp	r3, r4
 800c956:	d901      	bls.n	800c95c <pdf_gen_completed_report+0x5e0>
 800c958:	1b1a      	subs	r2, r3, r4
 800c95a:	9217      	str	r2, [sp, #92]	@ 0x5c
    unsigned long rh2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh2)
 800c95c:	9a07      	ldr	r2, [sp, #28]
 800c95e:	327c      	adds	r2, #124	@ 0x7c
 800c960:	7811      	ldrb	r1, [r2, #0]
 800c962:	9a07      	ldr	r2, [sp, #28]
 800c964:	327d      	adds	r2, #125	@ 0x7d
 800c966:	7812      	ldrb	r2, [r2, #0]
 800c968:	0212      	lsls	r2, r2, #8
 800c96a:	430a      	orrs	r2, r1
 800c96c:	9208      	str	r2, [sp, #32]
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh2) : 0UL;
 800c96e:	2200      	movs	r2, #0
 800c970:	9218      	str	r2, [sp, #96]	@ 0x60
 800c972:	9a08      	ldr	r2, [sp, #32]
 800c974:	4293      	cmp	r3, r2
 800c976:	d901      	bls.n	800c97c <pdf_gen_completed_report+0x600>
 800c978:	1a9a      	subs	r2, r3, r2
 800c97a:	9218      	str	r2, [sp, #96]	@ 0x60
    unsigned long th1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_th1)
 800c97c:	9a07      	ldr	r2, [sp, #28]
 800c97e:	327e      	adds	r2, #126	@ 0x7e
 800c980:	7811      	ldrb	r1, [r2, #0]
 800c982:	9a07      	ldr	r2, [sp, #28]
 800c984:	327f      	adds	r2, #127	@ 0x7f
 800c986:	7812      	ldrb	r2, [r2, #0]
 800c988:	0212      	lsls	r2, r2, #8
 800c98a:	430a      	orrs	r2, r1
 800c98c:	9209      	str	r2, [sp, #36]	@ 0x24
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_th1) : 0UL;
 800c98e:	2200      	movs	r2, #0
 800c990:	9219      	str	r2, [sp, #100]	@ 0x64
 800c992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c994:	4293      	cmp	r3, r2
 800c996:	d901      	bls.n	800c99c <pdf_gen_completed_report+0x620>
 800c998:	1a9a      	subs	r2, r3, r2
 800c99a:	9219      	str	r2, [sp, #100]	@ 0x64
    unsigned long th2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_th2)
 800c99c:	9a07      	ldr	r2, [sp, #28]
 800c99e:	3280      	adds	r2, #128	@ 0x80
 800c9a0:	7811      	ldrb	r1, [r2, #0]
 800c9a2:	9a07      	ldr	r2, [sp, #28]
 800c9a4:	3281      	adds	r2, #129	@ 0x81
 800c9a6:	7812      	ldrb	r2, [r2, #0]
 800c9a8:	0212      	lsls	r2, r2, #8
 800c9aa:	430a      	orrs	r2, r1
 800c9ac:	920a      	str	r2, [sp, #40]	@ 0x28
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_th2) : 0UL;
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	921a      	str	r2, [sp, #104]	@ 0x68
 800c9b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d901      	bls.n	800c9bc <pdf_gen_completed_report+0x640>
 800c9b8:	1a9a      	subs	r2, r3, r2
 800c9ba:	921a      	str	r2, [sp, #104]	@ 0x68
    unsigned long tl1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_tl1)
 800c9bc:	9a07      	ldr	r2, [sp, #28]
 800c9be:	3282      	adds	r2, #130	@ 0x82
 800c9c0:	7811      	ldrb	r1, [r2, #0]
 800c9c2:	9a07      	ldr	r2, [sp, #28]
 800c9c4:	3283      	adds	r2, #131	@ 0x83
 800c9c6:	7812      	ldrb	r2, [r2, #0]
 800c9c8:	0212      	lsls	r2, r2, #8
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	920b      	str	r2, [sp, #44]	@ 0x2c
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_tl1) : 0UL;
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	921b      	str	r2, [sp, #108]	@ 0x6c
 800c9d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d901      	bls.n	800c9dc <pdf_gen_completed_report+0x660>
 800c9d8:	1a9a      	subs	r2, r3, r2
 800c9da:	921b      	str	r2, [sp, #108]	@ 0x6c
    unsigned long tl2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_tl2)
 800c9dc:	9a07      	ldr	r2, [sp, #28]
 800c9de:	3284      	adds	r2, #132	@ 0x84
 800c9e0:	7811      	ldrb	r1, [r2, #0]
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	3285      	adds	r2, #133	@ 0x85
 800c9e6:	7812      	ldrb	r2, [r2, #0]
 800c9e8:	0212      	lsls	r2, r2, #8
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	920c      	str	r2, [sp, #48]	@ 0x30
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_tl2) : 0UL;
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	921c      	str	r2, [sp, #112]	@ 0x70
 800c9f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d901      	bls.n	800c9fc <pdf_gen_completed_report+0x680>
 800c9f8:	1a9b      	subs	r3, r3, r2
 800c9fa:	931c      	str	r3, [sp, #112]	@ 0x70
    const uint16_t c_rh1 = log->RH1_alarm_count;
 800c9fc:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
    alarm_zone_info_t tmp_alrm[6] = {
 800c9fe:	a81a      	add	r0, sp, #104	@ 0x68
    const uint16_t c_rh1 = log->RH1_alarm_count;
 800ca00:	930f      	str	r3, [sp, #60]	@ 0x3c
    const uint16_t c_rh2 = log->RH2_alarm_count;
 800ca02:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
    alarm_zone_info_t tmp_alrm[6] = {
 800ca04:	220a      	movs	r2, #10
    const uint16_t c_rh2 = log->RH2_alarm_count;
 800ca06:	9310      	str	r3, [sp, #64]	@ 0x40
    const uint16_t c_th1 = log->TH1_alarm_count;
 800ca08:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 800ca0a:	9312      	str	r3, [sp, #72]	@ 0x48
    const uint16_t c_th2 = log->TH2_alarm_count;
 800ca0c:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 800ca0e:	9314      	str	r3, [sp, #80]	@ 0x50
    const uint16_t c_tl1 = log->TL1_alarm_count;
 800ca10:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 800ca12:	9315      	str	r3, [sp, #84]	@ 0x54
    const uint16_t c_tl2 = log->TL2_alarm_count;
 800ca14:	8f73      	ldrh	r3, [r6, #58]	@ 0x3a
 800ca16:	9316      	str	r3, [sp, #88]	@ 0x58
    alarm_zone_info_t tmp_alrm[6] = {
 800ca18:	4b9d      	ldr	r3, [pc, #628]	@ (800cc90 <pdf_gen_completed_report+0x914>)
 800ca1a:	001d      	movs	r5, r3
 800ca1c:	0019      	movs	r1, r3
 800ca1e:	4b9d      	ldr	r3, [pc, #628]	@ (800cc94 <pdf_gen_completed_report+0x918>)
 800ca20:	181b      	adds	r3, r3, r0
 800ca22:	0018      	movs	r0, r3
 800ca24:	f00d fe30 	bl	801a688 <memcpy>
 800ca28:	489b      	ldr	r0, [pc, #620]	@ (800cc98 <pdf_gen_completed_report+0x91c>)
 800ca2a:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca2c:	2206      	movs	r2, #6
 800ca2e:	2100      	movs	r1, #0
 800ca30:	18c0      	adds	r0, r0, r3
 800ca32:	f00d fd5f 	bl	801a4f4 <memset>
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800ca36:	9a07      	ldr	r2, [sp, #28]
 800ca38:	9b07      	ldr	r3, [sp, #28]
 800ca3a:	3292      	adds	r2, #146	@ 0x92
 800ca3c:	7812      	ldrb	r2, [r2, #0]
 800ca3e:	3391      	adds	r3, #145	@ 0x91
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	0212      	lsls	r2, r2, #8
 800ca44:	431a      	orrs	r2, r3
 800ca46:	9b07      	ldr	r3, [sp, #28]
 800ca48:	2164      	movs	r1, #100	@ 0x64
 800ca4a:	3393      	adds	r3, #147	@ 0x93
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	041b      	lsls	r3, r3, #16
 800ca50:	4313      	orrs	r3, r2
 800ca52:	9a07      	ldr	r2, [sp, #28]
 800ca54:	3294      	adds	r2, #148	@ 0x94
 800ca56:	7810      	ldrb	r0, [r2, #0]
 800ca58:	0600      	lsls	r0, r0, #24
 800ca5a:	4318      	orrs	r0, r3
 800ca5c:	f7f3 fb84 	bl	8000168 <__udivsi3>
    alarm_zone_info_t tmp_alrm[6] = {
 800ca60:	4a8e      	ldr	r2, [pc, #568]	@ (800cc9c <pdf_gen_completed_report+0x920>)
 800ca62:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca64:	189b      	adds	r3, r3, r2
 800ca66:	8018      	strh	r0, [r3, #0]
 800ca68:	4b8d      	ldr	r3, [pc, #564]	@ (800cca0 <pdf_gen_completed_report+0x924>)
 800ca6a:	aa1a      	add	r2, sp, #104	@ 0x68
 800ca6c:	189b      	adds	r3, r3, r2
 800ca6e:	601c      	str	r4, [r3, #0]
 800ca70:	2390      	movs	r3, #144	@ 0x90
 800ca72:	4c8c      	ldr	r4, [pc, #560]	@ (800cca4 <pdf_gen_completed_report+0x928>)
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	189b      	adds	r3, r3, r2
 800ca78:	4a8b      	ldr	r2, [pc, #556]	@ (800cca8 <pdf_gen_completed_report+0x92c>)
 800ca7a:	601c      	str	r4, [r3, #0]
 800ca7c:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca7e:	18d2      	adds	r2, r2, r3
 800ca80:	2300      	movs	r3, #0
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	4a89      	ldr	r2, [pc, #548]	@ (800ccac <pdf_gen_completed_report+0x930>)
 800ca86:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca88:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ca8a:	18d2      	adds	r2, r2, r3
 800ca8c:	6011      	str	r1, [r2, #0]
 800ca8e:	4a88      	ldr	r2, [pc, #544]	@ (800ccb0 <pdf_gen_completed_report+0x934>)
 800ca90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ca92:	18d2      	adds	r2, r2, r3
 800ca94:	6011      	str	r1, [r2, #0]
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800ca96:	000a      	movs	r2, r1
    alarm_zone_info_t tmp_alrm[6] = {
 800ca98:	2191      	movs	r1, #145	@ 0x91
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800ca9a:	1e53      	subs	r3, r2, #1
 800ca9c:	419a      	sbcs	r2, r3
    alarm_zone_info_t tmp_alrm[6] = {
 800ca9e:	0109      	lsls	r1, r1, #4
 800caa0:	ab1a      	add	r3, sp, #104	@ 0x68
 800caa2:	18c9      	adds	r1, r1, r3
 800caa4:	700a      	strb	r2, [r1, #0]
 800caa6:	0029      	movs	r1, r5
 800caa8:	4882      	ldr	r0, [pc, #520]	@ (800ccb4 <pdf_gen_completed_report+0x938>)
 800caaa:	ab1a      	add	r3, sp, #104	@ 0x68
 800caac:	220a      	movs	r2, #10
 800caae:	3110      	adds	r1, #16
 800cab0:	18c0      	adds	r0, r0, r3
 800cab2:	f00d fde9 	bl	801a688 <memcpy>
 800cab6:	4880      	ldr	r0, [pc, #512]	@ (800ccb8 <pdf_gen_completed_report+0x93c>)
 800cab8:	ab1a      	add	r3, sp, #104	@ 0x68
 800caba:	2206      	movs	r2, #6
 800cabc:	2100      	movs	r1, #0
 800cabe:	18c0      	adds	r0, r0, r3
 800cac0:	f00d fd18 	bl	801a4f4 <memset>
        {"RH2: over",  dev_setting->alarm_rh2/100, dev_setting->alarm_delay_rh2, "Sin", rh2_total, c_rh2, (c_rh2 ? 1 : 0)},
 800cac4:	9a07      	ldr	r2, [sp, #28]
 800cac6:	9907      	ldr	r1, [sp, #28]
 800cac8:	3299      	adds	r2, #153	@ 0x99
 800caca:	7813      	ldrb	r3, [r2, #0]
 800cacc:	9a07      	ldr	r2, [sp, #28]
 800cace:	319b      	adds	r1, #155	@ 0x9b
 800cad0:	329a      	adds	r2, #154	@ 0x9a
 800cad2:	7812      	ldrb	r2, [r2, #0]
 800cad4:	0212      	lsls	r2, r2, #8
 800cad6:	431a      	orrs	r2, r3
 800cad8:	780b      	ldrb	r3, [r1, #0]
 800cada:	2164      	movs	r1, #100	@ 0x64
 800cadc:	041b      	lsls	r3, r3, #16
 800cade:	4313      	orrs	r3, r2
 800cae0:	9a07      	ldr	r2, [sp, #28]
 800cae2:	329c      	adds	r2, #156	@ 0x9c
 800cae4:	7810      	ldrb	r0, [r2, #0]
 800cae6:	0600      	lsls	r0, r0, #24
 800cae8:	4318      	orrs	r0, r3
 800caea:	f7f3 fb3d 	bl	8000168 <__udivsi3>
    alarm_zone_info_t tmp_alrm[6] = {
 800caee:	4973      	ldr	r1, [pc, #460]	@ (800ccbc <pdf_gen_completed_report+0x940>)
 800caf0:	aa1a      	add	r2, sp, #104	@ 0x68
 800caf2:	1852      	adds	r2, r2, r1
 800caf4:	8010      	strh	r0, [r2, #0]
 800caf6:	4a72      	ldr	r2, [pc, #456]	@ (800ccc0 <pdf_gen_completed_report+0x944>)
 800caf8:	ab1a      	add	r3, sp, #104	@ 0x68
 800cafa:	9908      	ldr	r1, [sp, #32]
 800cafc:	18d2      	adds	r2, r2, r3
 800cafe:	6011      	str	r1, [r2, #0]
 800cb00:	4a70      	ldr	r2, [pc, #448]	@ (800ccc4 <pdf_gen_completed_report+0x948>)
 800cb02:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800cb04:	18d2      	adds	r2, r2, r3
 800cb06:	6014      	str	r4, [r2, #0]
 800cb08:	2293      	movs	r2, #147	@ 0x93
 800cb0a:	0112      	lsls	r2, r2, #4
 800cb0c:	18d2      	adds	r2, r2, r3
 800cb0e:	2300      	movs	r3, #0
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	4a6d      	ldr	r2, [pc, #436]	@ (800ccc8 <pdf_gen_completed_report+0x94c>)
 800cb14:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb16:	18d2      	adds	r2, r2, r3
 800cb18:	6011      	str	r1, [r2, #0]
 800cb1a:	4a6c      	ldr	r2, [pc, #432]	@ (800cccc <pdf_gen_completed_report+0x950>)
 800cb1c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800cb1e:	18d2      	adds	r2, r2, r3
 800cb20:	6011      	str	r1, [r2, #0]
        {"RH2: over",  dev_setting->alarm_rh2/100, dev_setting->alarm_delay_rh2, "Sin", rh2_total, c_rh2, (c_rh2 ? 1 : 0)},
 800cb22:	000a      	movs	r2, r1
 800cb24:	1e53      	subs	r3, r2, #1
 800cb26:	419a      	sbcs	r2, r3
    alarm_zone_info_t tmp_alrm[6] = {
 800cb28:	4969      	ldr	r1, [pc, #420]	@ (800ccd0 <pdf_gen_completed_report+0x954>)
 800cb2a:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb2c:	18c9      	adds	r1, r1, r3
 800cb2e:	2094      	movs	r0, #148	@ 0x94
 800cb30:	700a      	strb	r2, [r1, #0]
 800cb32:	0029      	movs	r1, r5
 800cb34:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb36:	0100      	lsls	r0, r0, #4
 800cb38:	220a      	movs	r2, #10
 800cb3a:	3120      	adds	r1, #32
 800cb3c:	18c0      	adds	r0, r0, r3
 800cb3e:	f00d fda3 	bl	801a688 <memcpy>
 800cb42:	4864      	ldr	r0, [pc, #400]	@ (800ccd4 <pdf_gen_completed_report+0x958>)
 800cb44:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb46:	2206      	movs	r2, #6
 800cb48:	2100      	movs	r1, #0
 800cb4a:	18c0      	adds	r0, r0, r3
 800cb4c:	f00d fcd2 	bl	801a4f4 <memset>
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cb50:	9a07      	ldr	r2, [sp, #28]
    alarm_zone_info_t tmp_alrm[6] = {
 800cb52:	210a      	movs	r1, #10
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cb54:	3295      	adds	r2, #149	@ 0x95
 800cb56:	7813      	ldrb	r3, [r2, #0]
 800cb58:	9a07      	ldr	r2, [sp, #28]
 800cb5a:	3296      	adds	r2, #150	@ 0x96
 800cb5c:	7810      	ldrb	r0, [r2, #0]
 800cb5e:	0200      	lsls	r0, r0, #8
 800cb60:	4318      	orrs	r0, r3
 800cb62:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cb64:	1400      	asrs	r0, r0, #16
 800cb66:	f7f3 fb89 	bl	800027c <__divsi3>
 800cb6a:	2295      	movs	r2, #149	@ 0x95
 800cb6c:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb6e:	0112      	lsls	r2, r2, #4
 800cb70:	18d2      	adds	r2, r2, r3
 800cb72:	8010      	strh	r0, [r2, #0]
 800cb74:	4a58      	ldr	r2, [pc, #352]	@ (800ccd8 <pdf_gen_completed_report+0x95c>)
 800cb76:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb7a:	18d2      	adds	r2, r2, r3
 800cb7c:	6011      	str	r1, [r2, #0]
 800cb7e:	4a57      	ldr	r2, [pc, #348]	@ (800ccdc <pdf_gen_completed_report+0x960>)
 800cb80:	4957      	ldr	r1, [pc, #348]	@ (800cce0 <pdf_gen_completed_report+0x964>)
 800cb82:	18d2      	adds	r2, r2, r3
 800cb84:	18c9      	adds	r1, r1, r3
 800cb86:	2300      	movs	r3, #0
 800cb88:	6014      	str	r4, [r2, #0]
 800cb8a:	600b      	str	r3, [r1, #0]
 800cb8c:	2196      	movs	r1, #150	@ 0x96
 800cb8e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb90:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb92:	0109      	lsls	r1, r1, #4
 800cb94:	18c9      	adds	r1, r1, r3
 800cb96:	6008      	str	r0, [r1, #0]
 800cb98:	4952      	ldr	r1, [pc, #328]	@ (800cce4 <pdf_gen_completed_report+0x968>)
 800cb9a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cb9c:	18c9      	adds	r1, r1, r3
 800cb9e:	6008      	str	r0, [r1, #0]
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cba0:	0001      	movs	r1, r0
 800cba2:	1e4a      	subs	r2, r1, #1
 800cba4:	4191      	sbcs	r1, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800cba6:	4a50      	ldr	r2, [pc, #320]	@ (800cce8 <pdf_gen_completed_report+0x96c>)
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800cba8:	000b      	movs	r3, r1
    alarm_zone_info_t tmp_alrm[6] = {
 800cbaa:	a91a      	add	r1, sp, #104	@ 0x68
 800cbac:	1852      	adds	r2, r2, r1
 800cbae:	0029      	movs	r1, r5
 800cbb0:	484e      	ldr	r0, [pc, #312]	@ (800ccec <pdf_gen_completed_report+0x970>)
 800cbb2:	7013      	strb	r3, [r2, #0]
 800cbb4:	ab1a      	add	r3, sp, #104	@ 0x68
 800cbb6:	220a      	movs	r2, #10
 800cbb8:	3130      	adds	r1, #48	@ 0x30
 800cbba:	18c0      	adds	r0, r0, r3
 800cbbc:	f00d fd64 	bl	801a688 <memcpy>
 800cbc0:	484b      	ldr	r0, [pc, #300]	@ (800ccf0 <pdf_gen_completed_report+0x974>)
 800cbc2:	ab1a      	add	r3, sp, #104	@ 0x68
 800cbc4:	2206      	movs	r2, #6
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	18c0      	adds	r0, r0, r3
 800cbca:	f00d fc93 	bl	801a4f4 <memset>
        {"TH2: over",  dev_setting->alarm_th2/10,  dev_setting->alarm_delay_th2, "Sin", th2_total, c_th2, (c_th2 ? 1 : 0)},
 800cbce:	9a07      	ldr	r2, [sp, #28]
 800cbd0:	9907      	ldr	r1, [sp, #28]
 800cbd2:	329e      	adds	r2, #158	@ 0x9e
 800cbd4:	7810      	ldrb	r0, [r2, #0]
 800cbd6:	319d      	adds	r1, #157	@ 0x9d
 800cbd8:	780b      	ldrb	r3, [r1, #0]
 800cbda:	0200      	lsls	r0, r0, #8
 800cbdc:	4318      	orrs	r0, r3
 800cbde:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cbe0:	210a      	movs	r1, #10
 800cbe2:	1400      	asrs	r0, r0, #16
 800cbe4:	f7f3 fb4a 	bl	800027c <__divsi3>
 800cbe8:	4942      	ldr	r1, [pc, #264]	@ (800ccf4 <pdf_gen_completed_report+0x978>)
 800cbea:	ab1a      	add	r3, sp, #104	@ 0x68
 800cbec:	18c9      	adds	r1, r1, r3
 800cbee:	8008      	strh	r0, [r1, #0]
 800cbf0:	2198      	movs	r1, #152	@ 0x98
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	ab1a      	add	r3, sp, #104	@ 0x68
 800cbf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbf8:	0109      	lsls	r1, r1, #4
 800cbfa:	18c9      	adds	r1, r1, r3
 800cbfc:	6008      	str	r0, [r1, #0]
 800cbfe:	493e      	ldr	r1, [pc, #248]	@ (800ccf8 <pdf_gen_completed_report+0x97c>)
 800cc00:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800cc02:	18c9      	adds	r1, r1, r3
 800cc04:	600c      	str	r4, [r1, #0]
 800cc06:	493c      	ldr	r1, [pc, #240]	@ (800ccf8 <pdf_gen_completed_report+0x97c>)
 800cc08:	18c9      	adds	r1, r1, r3
 800cc0a:	604a      	str	r2, [r1, #4]
 800cc0c:	493b      	ldr	r1, [pc, #236]	@ (800ccfc <pdf_gen_completed_report+0x980>)
 800cc0e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc10:	18c9      	adds	r1, r1, r3
 800cc12:	6008      	str	r0, [r1, #0]
 800cc14:	2199      	movs	r1, #153	@ 0x99
 800cc16:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800cc18:	0109      	lsls	r1, r1, #4
 800cc1a:	18c9      	adds	r1, r1, r3
        {"TH2: over",  dev_setting->alarm_th2/10,  dev_setting->alarm_delay_th2, "Sin", th2_total, c_th2, (c_th2 ? 1 : 0)},
 800cc1c:	0003      	movs	r3, r0
 800cc1e:	1e5a      	subs	r2, r3, #1
 800cc20:	4193      	sbcs	r3, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800cc22:	6008      	str	r0, [r1, #0]
 800cc24:	4936      	ldr	r1, [pc, #216]	@ (800cd00 <pdf_gen_completed_report+0x984>)
 800cc26:	aa1a      	add	r2, sp, #104	@ 0x68
 800cc28:	1889      	adds	r1, r1, r2
 800cc2a:	700b      	strb	r3, [r1, #0]
 800cc2c:	0029      	movs	r1, r5
 800cc2e:	4835      	ldr	r0, [pc, #212]	@ (800cd04 <pdf_gen_completed_report+0x988>)
 800cc30:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc32:	220b      	movs	r2, #11
 800cc34:	3140      	adds	r1, #64	@ 0x40
 800cc36:	18c0      	adds	r0, r0, r3
 800cc38:	f00d fd26 	bl	801a688 <memcpy>
 800cc3c:	4832      	ldr	r0, [pc, #200]	@ (800cd08 <pdf_gen_completed_report+0x98c>)
 800cc3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc40:	2205      	movs	r2, #5
 800cc42:	2100      	movs	r1, #0
 800cc44:	18c0      	adds	r0, r0, r3
 800cc46:	f00d fc55 	bl	801a4f4 <memset>
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800cc4a:	9907      	ldr	r1, [sp, #28]
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	3198      	adds	r1, #152	@ 0x98
 800cc50:	7808      	ldrb	r0, [r1, #0]
 800cc52:	3397      	adds	r3, #151	@ 0x97
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	0200      	lsls	r0, r0, #8
 800cc58:	4318      	orrs	r0, r3
 800cc5a:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cc5c:	210a      	movs	r1, #10
 800cc5e:	1400      	asrs	r0, r0, #16
 800cc60:	f7f3 fb0c 	bl	800027c <__divsi3>
 800cc64:	4b29      	ldr	r3, [pc, #164]	@ (800cd0c <pdf_gen_completed_report+0x990>)
 800cc66:	aa1a      	add	r2, sp, #104	@ 0x68
 800cc68:	189b      	adds	r3, r3, r2
 800cc6a:	4929      	ldr	r1, [pc, #164]	@ (800cd10 <pdf_gen_completed_report+0x994>)
 800cc6c:	8018      	strh	r0, [r3, #0]
 800cc6e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cc70:	1889      	adds	r1, r1, r2
 800cc72:	6008      	str	r0, [r1, #0]
 800cc74:	219b      	movs	r1, #155	@ 0x9b
 800cc76:	0109      	lsls	r1, r1, #4
 800cc78:	1889      	adds	r1, r1, r2
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	e04a      	b.n	800cd14 <pdf_gen_completed_report+0x998>
 800cc7e:	46c0      	nop			@ (mov r8, r8)
 800cc80:	0801fbcd 	.word	0x0801fbcd
 800cc84:	0801fbd8 	.word	0x0801fbd8
 800cc88:	0801fbe3 	.word	0x0801fbe3
 800cc8c:	0801fbee 	.word	0x0801fbee
 800cc90:	0801ca3c 	.word	0x0801ca3c
 800cc94:	000008e8 	.word	0x000008e8
 800cc98:	000008f2 	.word	0x000008f2
 800cc9c:	000008f8 	.word	0x000008f8
 800cca0:	000008fc 	.word	0x000008fc
 800cca4:	006e6953 	.word	0x006e6953
 800cca8:	00000904 	.word	0x00000904
 800ccac:	00000908 	.word	0x00000908
 800ccb0:	0000090c 	.word	0x0000090c
 800ccb4:	00000914 	.word	0x00000914
 800ccb8:	0000091e 	.word	0x0000091e
 800ccbc:	00000924 	.word	0x00000924
 800ccc0:	00000928 	.word	0x00000928
 800ccc4:	0000092c 	.word	0x0000092c
 800ccc8:	00000934 	.word	0x00000934
 800cccc:	00000938 	.word	0x00000938
 800ccd0:	0000093c 	.word	0x0000093c
 800ccd4:	0000094a 	.word	0x0000094a
 800ccd8:	00000954 	.word	0x00000954
 800ccdc:	00000958 	.word	0x00000958
 800cce0:	0000095c 	.word	0x0000095c
 800cce4:	00000964 	.word	0x00000964
 800cce8:	00000968 	.word	0x00000968
 800ccec:	0000096c 	.word	0x0000096c
 800ccf0:	00000976 	.word	0x00000976
 800ccf4:	0000097c 	.word	0x0000097c
 800ccf8:	00000984 	.word	0x00000984
 800ccfc:	0000098c 	.word	0x0000098c
 800cd00:	00000994 	.word	0x00000994
 800cd04:	00000998 	.word	0x00000998
 800cd08:	000009a3 	.word	0x000009a3
 800cd0c:	000009a8 	.word	0x000009a8
 800cd10:	000009ac 	.word	0x000009ac
 800cd14:	600c      	str	r4, [r1, #0]
 800cd16:	604a      	str	r2, [r1, #4]
 800cd18:	49fe      	ldr	r1, [pc, #1016]	@ (800d114 <pdf_gen_completed_report+0xd98>)
 800cd1a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800cd1c:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd1e:	18c9      	adds	r1, r1, r3
 800cd20:	6008      	str	r0, [r1, #0]
 800cd22:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800cd24:	49fc      	ldr	r1, [pc, #1008]	@ (800d118 <pdf_gen_completed_report+0xd9c>)
 800cd26:	18c9      	adds	r1, r1, r3
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800cd28:	0003      	movs	r3, r0
    alarm_zone_info_t tmp_alrm[6] = {
 800cd2a:	6008      	str	r0, [r1, #0]
 800cd2c:	219c      	movs	r1, #156	@ 0x9c
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800cd2e:	1e5a      	subs	r2, r3, #1
 800cd30:	4193      	sbcs	r3, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800cd32:	0109      	lsls	r1, r1, #4
 800cd34:	aa1a      	add	r2, sp, #104	@ 0x68
 800cd36:	1889      	adds	r1, r1, r2
 800cd38:	700b      	strb	r3, [r1, #0]
 800cd3a:	0029      	movs	r1, r5
 800cd3c:	48f7      	ldr	r0, [pc, #988]	@ (800d11c <pdf_gen_completed_report+0xda0>)
 800cd3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd40:	220b      	movs	r2, #11
 800cd42:	3150      	adds	r1, #80	@ 0x50
 800cd44:	18c0      	adds	r0, r0, r3
 800cd46:	f00d fc9f 	bl	801a688 <memcpy>
 800cd4a:	48f5      	ldr	r0, [pc, #980]	@ (800d120 <pdf_gen_completed_report+0xda4>)
 800cd4c:	ab1a      	add	r3, sp, #104	@ 0x68
 800cd4e:	2205      	movs	r2, #5
 800cd50:	2100      	movs	r1, #0
 800cd52:	18c0      	adds	r0, r0, r3
 800cd54:	f00d fbce 	bl	801a4f4 <memset>
        {"TL2: below", dev_setting->alarm_tl2/10,  dev_setting->alarm_delay_tl2, "Sin", tl2_total, c_tl2, (c_tl2 ? 1 : 0)},
 800cd58:	9907      	ldr	r1, [sp, #28]
 800cd5a:	9b07      	ldr	r3, [sp, #28]
 800cd5c:	31a0      	adds	r1, #160	@ 0xa0
 800cd5e:	7808      	ldrb	r0, [r1, #0]
 800cd60:	339f      	adds	r3, #159	@ 0x9f
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	0200      	lsls	r0, r0, #8
 800cd66:	4318      	orrs	r0, r3
 800cd68:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800cd6a:	210a      	movs	r1, #10
 800cd6c:	1400      	asrs	r0, r0, #16
 800cd6e:	f7f3 fa85 	bl	800027c <__divsi3>
 800cd72:	4bec      	ldr	r3, [pc, #944]	@ (800d124 <pdf_gen_completed_report+0xda8>)
 800cd74:	aa1a      	add	r2, sp, #104	@ 0x68
 800cd76:	189b      	adds	r3, r3, r2
 800cd78:	49eb      	ldr	r1, [pc, #940]	@ (800d128 <pdf_gen_completed_report+0xdac>)
 800cd7a:	8018      	strh	r0, [r3, #0]
 800cd7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cd7e:	1889      	adds	r1, r1, r2
 800cd80:	6008      	str	r0, [r1, #0]
 800cd82:	49ea      	ldr	r1, [pc, #936]	@ (800d12c <pdf_gen_completed_report+0xdb0>)
 800cd84:	4bea      	ldr	r3, [pc, #936]	@ (800d130 <pdf_gen_completed_report+0xdb4>)
 800cd86:	1889      	adds	r1, r1, r2
 800cd88:	2200      	movs	r2, #0
 800cd8a:	600c      	str	r4, [r1, #0]
 800cd8c:	604a      	str	r2, [r1, #4]
 800cd8e:	aa1a      	add	r2, sp, #104	@ 0x68
 800cd90:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800cd92:	189b      	adds	r3, r3, r2
 800cd94:	6019      	str	r1, [r3, #0]
 800cd96:	4be7      	ldr	r3, [pc, #924]	@ (800d134 <pdf_gen_completed_report+0xdb8>)
 800cd98:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800cd9a:	189b      	adds	r3, r3, r2
 800cd9c:	6019      	str	r1, [r3, #0]
        {"TL2: below", dev_setting->alarm_tl2/10,  dev_setting->alarm_delay_tl2, "Sin", tl2_total, c_tl2, (c_tl2 ? 1 : 0)},
 800cd9e:	000b      	movs	r3, r1
 800cda0:	1e5a      	subs	r2, r3, #1
 800cda2:	4193      	sbcs	r3, r2
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800cda4:	208c      	movs	r0, #140	@ 0x8c
    alarm_zone_info_t tmp_alrm[6] = {
 800cda6:	49e4      	ldr	r1, [pc, #912]	@ (800d138 <pdf_gen_completed_report+0xdbc>)
 800cda8:	aa1a      	add	r2, sp, #104	@ 0x68
 800cdaa:	1889      	adds	r1, r1, r2
 800cdac:	714b      	strb	r3, [r1, #5]
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800cdae:	4be3      	ldr	r3, [pc, #908]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cdb0:	a91a      	add	r1, sp, #104	@ 0x68
 800cdb2:	185b      	adds	r3, r3, r1
 800cdb4:	0019      	movs	r1, r3
 800cdb6:	2208      	movs	r2, #8
 800cdb8:	0080      	lsls	r0, r0, #2
 800cdba:	f7fe ff25 	bl	800bc08 <pdf_alarm_row.constprop.0>
 800cdbe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800cdc0:	a91a      	add	r1, sp, #104	@ 0x68
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800cdc2:	181c      	adds	r4, r3, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800cdc4:	2089      	movs	r0, #137	@ 0x89
 800cdc6:	4bde      	ldr	r3, [pc, #888]	@ (800d140 <pdf_gen_completed_report+0xdc4>)
 800cdc8:	220a      	movs	r2, #10
 800cdca:	185b      	adds	r3, r3, r1
 800cdcc:	0019      	movs	r1, r3
 800cdce:	0080      	lsls	r0, r0, #2
 800cdd0:	f7fe ff1a 	bl	800bc08 <pdf_alarm_row.constprop.0>
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[2], ALARM_STATE_POS_TH1);  *y_pos -= LINE_SPACING;
 800cdd4:	2394      	movs	r3, #148	@ 0x94
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800cdd6:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[2], ALARM_STATE_POS_TH1);  *y_pos -= LINE_SPACING;
 800cdd8:	2086      	movs	r0, #134	@ 0x86
 800cdda:	a91a      	add	r1, sp, #104	@ 0x68
 800cddc:	011b      	lsls	r3, r3, #4
 800cdde:	185b      	adds	r3, r3, r1
 800cde0:	0019      	movs	r1, r3
 800cde2:	220c      	movs	r2, #12
 800cde4:	0080      	lsls	r0, r0, #2
 800cde6:	f7fe ff0f 	bl	800bc08 <pdf_alarm_row.constprop.0>
 800cdea:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[3], ALARM_STATE_POS_TH2);  *y_pos -= LINE_SPACING;
 800cdec:	2083      	movs	r0, #131	@ 0x83
 800cdee:	4bd5      	ldr	r3, [pc, #852]	@ (800d144 <pdf_gen_completed_report+0xdc8>)
 800cdf0:	a91a      	add	r1, sp, #104	@ 0x68
 800cdf2:	185b      	adds	r3, r3, r1
 800cdf4:	0019      	movs	r1, r3
 800cdf6:	220e      	movs	r2, #14
 800cdf8:	0080      	lsls	r0, r0, #2
 800cdfa:	f7fe ff05 	bl	800bc08 <pdf_alarm_row.constprop.0>
 800cdfe:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[4], ALARM_STATE_POS_TL1);  *y_pos -= LINE_SPACING;
 800ce00:	2080      	movs	r0, #128	@ 0x80
 800ce02:	4bd1      	ldr	r3, [pc, #836]	@ (800d148 <pdf_gen_completed_report+0xdcc>)
 800ce04:	a91a      	add	r1, sp, #104	@ 0x68
 800ce06:	185b      	adds	r3, r3, r1
 800ce08:	0019      	movs	r1, r3
 800ce0a:	2210      	movs	r2, #16
 800ce0c:	0080      	lsls	r0, r0, #2
 800ce0e:	f7fe fefb 	bl	800bc08 <pdf_alarm_row.constprop.0>
 800ce12:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[5], ALARM_STATE_POS_TL2);  *y_pos -= LINE_SPACING;
 800ce14:	20fa      	movs	r0, #250	@ 0xfa
 800ce16:	4bc1      	ldr	r3, [pc, #772]	@ (800d11c <pdf_gen_completed_report+0xda0>)
 800ce18:	a91a      	add	r1, sp, #104	@ 0x68
 800ce1a:	185b      	adds	r3, r3, r1
 800ce1c:	2212      	movs	r2, #18
 800ce1e:	0019      	movs	r1, r3
 800ce20:	0040      	lsls	r0, r0, #1
 800ce22:	f7fe fef1 	bl	800bc08 <pdf_alarm_row.constprop.0>
 800ce26:	1824      	adds	r4, r4, r0
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800ce28:	20ea      	movs	r0, #234	@ 0xea
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800ce2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800ce2c:	49c7      	ldr	r1, [pc, #796]	@ (800d14c <pdf_gen_completed_report+0xdd0>)
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800ce2e:	18e3      	adds	r3, r4, r3
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800ce30:	0040      	lsls	r0, r0, #1
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800ce32:	9308      	str	r3, [sp, #32]
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800ce34:	f7fe ffc8 	bl	800bdc8 <draw_section_title.constprop.0>
 800ce38:	0005      	movs	r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->highest_temp);
 800ce3a:	6830      	ldr	r0, [r6, #0]
 800ce3c:	f7f6 fcac 	bl	8003798 <__aeabi_f2d>
 800ce40:	4bbe      	ldr	r3, [pc, #760]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800ce42:	4cc3      	ldr	r4, [pc, #780]	@ (800d150 <pdf_gen_completed_report+0xdd4>)
 800ce44:	9000      	str	r0, [sp, #0]
 800ce46:	9101      	str	r1, [sp, #4]
 800ce48:	a81a      	add	r0, sp, #104	@ 0x68
 800ce4a:	181b      	adds	r3, r3, r0
 800ce4c:	0022      	movs	r2, r4
 800ce4e:	2140      	movs	r1, #64	@ 0x40
 800ce50:	0018      	movs	r0, r3
 800ce52:	f00d f9fd 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Highest Temperature :", tmp_buff);
 800ce56:	4bb9      	ldr	r3, [pc, #740]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800ce58:	a91a      	add	r1, sp, #104	@ 0x68
 800ce5a:	185b      	adds	r3, r3, r1
 800ce5c:	21e0      	movs	r1, #224	@ 0xe0
 800ce5e:	4abd      	ldr	r2, [pc, #756]	@ (800d154 <pdf_gen_completed_report+0xdd8>)
 800ce60:	0049      	lsls	r1, r1, #1
 800ce62:	2037      	movs	r0, #55	@ 0x37
 800ce64:	f7fe ffd6 	bl	800be14 <draw_key_value_pair.constprop.0>
 800ce68:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->lowest_temp);
 800ce6a:	6870      	ldr	r0, [r6, #4]
 800ce6c:	f7f6 fc94 	bl	8003798 <__aeabi_f2d>
 800ce70:	4bb2      	ldr	r3, [pc, #712]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800ce72:	9000      	str	r0, [sp, #0]
 800ce74:	9101      	str	r1, [sp, #4]
 800ce76:	a81a      	add	r0, sp, #104	@ 0x68
 800ce78:	181b      	adds	r3, r3, r0
 800ce7a:	0022      	movs	r2, r4
 800ce7c:	2140      	movs	r1, #64	@ 0x40
 800ce7e:	0018      	movs	r0, r3
 800ce80:	f00d f9e6 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Lowest Temperature :", tmp_buff);
 800ce84:	4bad      	ldr	r3, [pc, #692]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800ce86:	a91a      	add	r1, sp, #104	@ 0x68
 800ce88:	185b      	adds	r3, r3, r1
 800ce8a:	21da      	movs	r1, #218	@ 0xda
 800ce8c:	4ab2      	ldr	r2, [pc, #712]	@ (800d158 <pdf_gen_completed_report+0xddc>)
 800ce8e:	0049      	lsls	r1, r1, #1
 800ce90:	2037      	movs	r0, #55	@ 0x37
 800ce92:	f7fe ffbf 	bl	800be14 <draw_key_value_pair.constprop.0>
 800ce96:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->average_temp);
 800ce98:	68b0      	ldr	r0, [r6, #8]
 800ce9a:	f7f6 fc7d 	bl	8003798 <__aeabi_f2d>
 800ce9e:	4ba7      	ldr	r3, [pc, #668]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cea0:	9000      	str	r0, [sp, #0]
 800cea2:	9101      	str	r1, [sp, #4]
 800cea4:	a81a      	add	r0, sp, #104	@ 0x68
 800cea6:	181b      	adds	r3, r3, r0
 800cea8:	0022      	movs	r2, r4
 800ceaa:	2140      	movs	r1, #64	@ 0x40
 800ceac:	0018      	movs	r0, r3
 800ceae:	f00d f9cf 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Temperature :", tmp_buff);
 800ceb2:	4ba2      	ldr	r3, [pc, #648]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800ceb4:	a91a      	add	r1, sp, #104	@ 0x68
 800ceb6:	185b      	adds	r3, r3, r1
 800ceb8:	21d4      	movs	r1, #212	@ 0xd4
 800ceba:	4aa8      	ldr	r2, [pc, #672]	@ (800d15c <pdf_gen_completed_report+0xde0>)
 800cebc:	0049      	lsls	r1, r1, #1
 800cebe:	2037      	movs	r0, #55	@ 0x37
 800cec0:	f7fe ffa8 	bl	800be14 <draw_key_value_pair.constprop.0>
 800cec4:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->mean_kinetic_temp);
 800cec6:	6970      	ldr	r0, [r6, #20]
 800cec8:	f7f6 fc66 	bl	8003798 <__aeabi_f2d>
 800cecc:	4b9b      	ldr	r3, [pc, #620]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cece:	9000      	str	r0, [sp, #0]
 800ced0:	9101      	str	r1, [sp, #4]
 800ced2:	a81a      	add	r0, sp, #104	@ 0x68
 800ced4:	181b      	adds	r3, r3, r0
 800ced6:	0022      	movs	r2, r4
 800ced8:	2140      	movs	r1, #64	@ 0x40
 800ceda:	0018      	movs	r0, r3
 800cedc:	f00d f9b8 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "MKT :", tmp_buff);
 800cee0:	4b96      	ldr	r3, [pc, #600]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cee2:	a91a      	add	r1, sp, #104	@ 0x68
 800cee4:	185b      	adds	r3, r3, r1
 800cee6:	21ce      	movs	r1, #206	@ 0xce
 800cee8:	4a9d      	ldr	r2, [pc, #628]	@ (800d160 <pdf_gen_completed_report+0xde4>)
 800ceea:	0049      	lsls	r1, r1, #1
 800ceec:	2037      	movs	r0, #55	@ 0x37
 800ceee:	f7fe ff91 	bl	800be14 <draw_key_value_pair.constprop.0>
 800cef2:	182c      	adds	r4, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.2f (uSv/h)",log->highest_radiation);
 800cef4:	68f0      	ldr	r0, [r6, #12]
 800cef6:	f7f6 fc4f 	bl	8003798 <__aeabi_f2d>
 800cefa:	4b90      	ldr	r3, [pc, #576]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cefc:	9000      	str	r0, [sp, #0]
 800cefe:	9101      	str	r1, [sp, #4]
 800cf00:	4d98      	ldr	r5, [pc, #608]	@ (800d164 <pdf_gen_completed_report+0xde8>)
 800cf02:	a81a      	add	r0, sp, #104	@ 0x68
 800cf04:	181b      	adds	r3, r3, r0
 800cf06:	002a      	movs	r2, r5
 800cf08:	2140      	movs	r1, #64	@ 0x40
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f00d f9a0 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Highest Rad :", tmp_buff);
 800cf10:	4b8a      	ldr	r3, [pc, #552]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf12:	a91a      	add	r1, sp, #104	@ 0x68
 800cf14:	185b      	adds	r3, r3, r1
 800cf16:	21c8      	movs	r1, #200	@ 0xc8
 800cf18:	4a93      	ldr	r2, [pc, #588]	@ (800d168 <pdf_gen_completed_report+0xdec>)
 800cf1a:	0049      	lsls	r1, r1, #1
 800cf1c:	2037      	movs	r0, #55	@ 0x37
 800cf1e:	f7fe ff79 	bl	800be14 <draw_key_value_pair.constprop.0>
 800cf22:	1824      	adds	r4, r4, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.2f (uSv/h)",log->average_radiation);
 800cf24:	6930      	ldr	r0, [r6, #16]
 800cf26:	f7f6 fc37 	bl	8003798 <__aeabi_f2d>
 800cf2a:	4b84      	ldr	r3, [pc, #528]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf2c:	9000      	str	r0, [sp, #0]
 800cf2e:	9101      	str	r1, [sp, #4]
 800cf30:	a81a      	add	r0, sp, #104	@ 0x68
 800cf32:	181b      	adds	r3, r3, r0
 800cf34:	002a      	movs	r2, r5
 800cf36:	2140      	movs	r1, #64	@ 0x40
 800cf38:	0018      	movs	r0, r3
 800cf3a:	f00d f989 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Rad :", tmp_buff);
 800cf3e:	4b7f      	ldr	r3, [pc, #508]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf40:	a91a      	add	r1, sp, #104	@ 0x68
 800cf42:	185b      	adds	r3, r3, r1
 800cf44:	21c2      	movs	r1, #194	@ 0xc2
 800cf46:	4a89      	ldr	r2, [pc, #548]	@ (800d16c <pdf_gen_completed_report+0xdf0>)
 800cf48:	0049      	lsls	r1, r1, #1
 800cf4a:	2037      	movs	r0, #55	@ 0x37
 800cf4c:	f7fe ff62 	bl	800be14 <draw_key_value_pair.constprop.0>
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800cf50:	2380      	movs	r3, #128	@ 0x80
 800cf52:	2200      	movs	r2, #0
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	9374      	str	r3, [sp, #464]	@ 0x1d0
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800cf58:	4b78      	ldr	r3, [pc, #480]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf5a:	a91a      	add	r1, sp, #104	@ 0x68
 800cf5c:	185b      	adds	r3, r3, r1
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Rad :", tmp_buff);
 800cf5e:	1824      	adds	r4, r4, r0
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800cf60:	a874      	add	r0, sp, #464	@ 0x1d0
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800cf62:	0019      	movs	r1, r3
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800cf64:	8082      	strh	r2, [r0, #4]
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800cf66:	3240      	adds	r2, #64	@ 0x40
 800cf68:	f7fe fcb0 	bl	800b8cc <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Alarm At(Te) :", tmp_buff);
 800cf6c:	4b73      	ldr	r3, [pc, #460]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf6e:	a91a      	add	r1, sp, #104	@ 0x68
 800cf70:	185b      	adds	r3, r3, r1
 800cf72:	2096      	movs	r0, #150	@ 0x96
 800cf74:	21e0      	movs	r1, #224	@ 0xe0
 800cf76:	4a7e      	ldr	r2, [pc, #504]	@ (800d170 <pdf_gen_completed_report+0xdf4>)
 800cf78:	0049      	lsls	r1, r1, #1
 800cf7a:	0040      	lsls	r0, r0, #1
 800cf7c:	f7fe ff4a 	bl	800be14 <draw_key_value_pair.constprop.0>
 800cf80:	1824      	adds	r4, r4, r0
    time_to_dmyhms_string(&log->start_time,tmp_buff,sizeof(tmp_buff));
 800cf82:	0030      	movs	r0, r6
 800cf84:	4b6d      	ldr	r3, [pc, #436]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf86:	a91a      	add	r1, sp, #104	@ 0x68
 800cf88:	185b      	adds	r3, r3, r1
 800cf8a:	0019      	movs	r1, r3
 800cf8c:	2240      	movs	r2, #64	@ 0x40
 800cf8e:	3018      	adds	r0, #24
 800cf90:	f7fe fc9c 	bl	800b8cc <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Start Time :", tmp_buff);
 800cf94:	4b69      	ldr	r3, [pc, #420]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cf96:	a91a      	add	r1, sp, #104	@ 0x68
 800cf98:	185b      	adds	r3, r3, r1
 800cf9a:	2096      	movs	r0, #150	@ 0x96
 800cf9c:	21da      	movs	r1, #218	@ 0xda
 800cf9e:	4a75      	ldr	r2, [pc, #468]	@ (800d174 <pdf_gen_completed_report+0xdf8>)
 800cfa0:	0049      	lsls	r1, r1, #1
 800cfa2:	0040      	lsls	r0, r0, #1
 800cfa4:	f7fe ff36 	bl	800be14 <draw_key_value_pair.constprop.0>
 800cfa8:	1824      	adds	r4, r4, r0
    time_to_dmyhms_string(&log->stop_time,tmp_buff,sizeof(tmp_buff));
 800cfaa:	0030      	movs	r0, r6
 800cfac:	4b63      	ldr	r3, [pc, #396]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cfae:	a91a      	add	r1, sp, #104	@ 0x68
 800cfb0:	185b      	adds	r3, r3, r1
 800cfb2:	0019      	movs	r1, r3
 800cfb4:	2240      	movs	r2, #64	@ 0x40
 800cfb6:	301e      	adds	r0, #30
 800cfb8:	f7fe fc88 	bl	800b8cc <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Stop Time :", tmp_buff);
 800cfbc:	4b5f      	ldr	r3, [pc, #380]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800cfbe:	a91a      	add	r1, sp, #104	@ 0x68
 800cfc0:	185b      	adds	r3, r3, r1
 800cfc2:	2096      	movs	r0, #150	@ 0x96
 800cfc4:	21d4      	movs	r1, #212	@ 0xd4
 800cfc6:	4a6c      	ldr	r2, [pc, #432]	@ (800d178 <pdf_gen_completed_report+0xdfc>)
 800cfc8:	0049      	lsls	r1, r1, #1
 800cfca:	0040      	lsls	r0, r0, #1
 800cfcc:	f7fe ff22 	bl	800be14 <draw_key_value_pair.constprop.0>
    uint32_t start_sec = log->start_time.hour * 3600 +
 800cfd0:	21e1      	movs	r1, #225	@ 0xe1
                         log->start_time.minute  * 60 +
 800cfd2:	223c      	movs	r2, #60	@ 0x3c
 800cfd4:	7f33      	ldrb	r3, [r6, #28]
    len += draw_key_value_pair(file_ptr, 300, current_y, "Stop Time :", tmp_buff);
 800cfd6:	1824      	adds	r4, r4, r0
    uint32_t start_sec = log->start_time.hour * 3600 +
 800cfd8:	7ef0      	ldrb	r0, [r6, #27]
 800cfda:	0109      	lsls	r1, r1, #4
                         log->start_time.minute  * 60 +
 800cfdc:	4353      	muls	r3, r2
    uint32_t start_sec = log->start_time.hour * 3600 +
 800cfde:	4348      	muls	r0, r1
 800cfe0:	18c0      	adds	r0, r0, r3
                         log->start_time.second;
 800cfe2:	7f73      	ldrb	r3, [r6, #29]
                         log->start_time.minute  * 60 +
 800cfe4:	18c0      	adds	r0, r0, r3
    uint32_t stop_sec  = log->stop_time.hour  * 3600 +
 800cfe6:	1cb3      	adds	r3, r6, #2
 800cfe8:	7fdb      	ldrb	r3, [r3, #31]
 800cfea:	434b      	muls	r3, r1
                         log->stop_time.minute   * 60 +
 800cfec:	1cf1      	adds	r1, r6, #3
 800cfee:	7fc9      	ldrb	r1, [r1, #31]
 800cff0:	434a      	muls	r2, r1
    uint32_t stop_sec  = log->stop_time.hour  * 3600 +
 800cff2:	189b      	adds	r3, r3, r2
                         log->stop_time.second;
 800cff4:	1d32      	adds	r2, r6, #4
 800cff6:	7fd2      	ldrb	r2, [r2, #31]
                         log->stop_time.minute   * 60 +
 800cff8:	189b      	adds	r3, r3, r2
    if (stop_sec >= start_sec) {
 800cffa:	4298      	cmp	r0, r3
 800cffc:	d901      	bls.n	800d002 <pdf_gen_completed_report+0xc86>
 800cffe:	f000 ff7a 	bl	800def6 <pdf_gen_completed_report+0x1b7a>
        elapsed_sec = (86400 - start_sec) + stop_sec;
 800d002:	1a18      	subs	r0, r3, r0
    seconds_to_dhms_string_long(elapsed_sec, tmp_buff, sizeof(tmp_buff));
 800d004:	4b4d      	ldr	r3, [pc, #308]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800d006:	a91a      	add	r1, sp, #104	@ 0x68
 800d008:	185b      	adds	r3, r3, r1
 800d00a:	0019      	movs	r1, r3
 800d00c:	2240      	movs	r2, #64	@ 0x40
 800d00e:	f7fe fc55 	bl	800b8bc <seconds_to_dhms_string_long>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800d012:	4b4a      	ldr	r3, [pc, #296]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800d014:	a91a      	add	r1, sp, #104	@ 0x68
 800d016:	185b      	adds	r3, r3, r1
 800d018:	2096      	movs	r0, #150	@ 0x96
 800d01a:	21ce      	movs	r1, #206	@ 0xce
 800d01c:	4a57      	ldr	r2, [pc, #348]	@ (800d17c <pdf_gen_completed_report+0xe00>)
 800d01e:	0049      	lsls	r1, r1, #1
 800d020:	0040      	lsls	r0, r0, #1
 800d022:	f7fe fef7 	bl	800be14 <draw_key_value_pair.constprop.0>
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800d026:	4d56      	ldr	r5, [pc, #344]	@ (800d180 <pdf_gen_completed_report+0xe04>)
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800d028:	1823      	adds	r3, r4, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800d02a:	4844      	ldr	r0, [pc, #272]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800d02c:	ac1a      	add	r4, sp, #104	@ 0x68
 800d02e:	002a      	movs	r2, r5
 800d030:	2140      	movs	r1, #64	@ 0x40
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800d032:	9306      	str	r3, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800d034:	1900      	adds	r0, r0, r4
 800d036:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800d038:	f00d f90a 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Temperature Data Points :", tmp_buff);
 800d03c:	21c8      	movs	r1, #200	@ 0xc8
 800d03e:	2096      	movs	r0, #150	@ 0x96
 800d040:	4b3e      	ldr	r3, [pc, #248]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800d042:	4a50      	ldr	r2, [pc, #320]	@ (800d184 <pdf_gen_completed_report+0xe08>)
 800d044:	191b      	adds	r3, r3, r4
 800d046:	0049      	lsls	r1, r1, #1
 800d048:	0040      	lsls	r0, r0, #1
 800d04a:	f7fe fee3 	bl	800be14 <draw_key_value_pair.constprop.0>
 800d04e:	9b06      	ldr	r3, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_radiation_count);
 800d050:	002a      	movs	r2, r5
    len += draw_key_value_pair(file_ptr, 300, current_y, "Temperature Data Points :", tmp_buff);
 800d052:	181c      	adds	r4, r3, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_radiation_count);
 800d054:	4839      	ldr	r0, [pc, #228]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800d056:	ad1a      	add	r5, sp, #104	@ 0x68
 800d058:	2140      	movs	r1, #64	@ 0x40
 800d05a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800d05c:	1940      	adds	r0, r0, r5
 800d05e:	f00d f8f7 	bl	801a250 <sniprintf>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Radiation Data Points :", tmp_buff);
 800d062:	21c2      	movs	r1, #194	@ 0xc2
 800d064:	2096      	movs	r0, #150	@ 0x96
 800d066:	4b35      	ldr	r3, [pc, #212]	@ (800d13c <pdf_gen_completed_report+0xdc0>)
 800d068:	4a47      	ldr	r2, [pc, #284]	@ (800d188 <pdf_gen_completed_report+0xe0c>)
 800d06a:	195b      	adds	r3, r3, r5
 800d06c:	0049      	lsls	r1, r1, #1
 800d06e:	0040      	lsls	r0, r0, #1
 800d070:	f7fe fed0 	bl	800be14 <draw_key_value_pair.constprop.0>
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d074:	2182      	movs	r1, #130	@ 0x82
    stream_len += pdf_logging_summary(&pdf_file, &current_y, summary);
 800d076:	9b08      	ldr	r3, [sp, #32]
    len += draw_key_value_pair(file_ptr, 300, current_y, "Radiation Data Points :", tmp_buff);
 800d078:	1824      	adds	r4, r4, r0
    stream_len += pdf_logging_summary(&pdf_file, &current_y, summary);
 800d07a:	18e3      	adds	r3, r4, r3
 800d07c:	9314      	str	r3, [sp, #80]	@ 0x50
     const uint16_t record_nums = log->data_points_temp_count;
 800d07e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d080:	6830      	ldr	r0, [r6, #0]
 800d082:	05c9      	lsls	r1, r1, #23
     const uint16_t record_nums = log->data_points_temp_count;
 800d084:	9315      	str	r3, [sp, #84]	@ 0x54
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d086:	f7f3 fb9d 	bl	80007c4 <__aeabi_fadd>
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800d08a:	4940      	ldr	r1, [pc, #256]	@ (800d18c <pdf_gen_completed_report+0xe10>)
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800d08c:	9008      	str	r0, [sp, #32]
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800d08e:	68f0      	ldr	r0, [r6, #12]
 800d090:	f7f3 fb98 	bl	80007c4 <__aeabi_fadd>
 800d094:	f7f3 fa94 	bl	80005c0 <__aeabi_f2uiz>
    g_temp_axis_min = log->lowest_temp - 10.0f;
 800d098:	493d      	ldr	r1, [pc, #244]	@ (800d190 <pdf_gen_completed_report+0xe14>)
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800d09a:	900a      	str	r0, [sp, #40]	@ 0x28
    g_temp_axis_min = log->lowest_temp - 10.0f;
 800d09c:	6870      	ldr	r0, [r6, #4]
 800d09e:	f7f4 f8ab 	bl	80011f8 <__aeabi_fsub>
 800d0a2:	4b3c      	ldr	r3, [pc, #240]	@ (800d194 <pdf_gen_completed_report+0xe18>)
 800d0a4:	1c01      	adds	r1, r0, #0
 800d0a6:	6018      	str	r0, [r3, #0]
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d0a8:	9808      	ldr	r0, [sp, #32]
 800d0aa:	f7f4 f8a5 	bl	80011f8 <__aeabi_fsub>
 800d0ae:	21fa      	movs	r1, #250	@ 0xfa
 800d0b0:	0589      	lsls	r1, r1, #22
 800d0b2:	f7f3 ff47 	bl	8000f44 <__aeabi_fmul>
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800d0b6:	2106      	movs	r1, #6
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d0b8:	900c      	str	r0, [sp, #48]	@ 0x30
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800d0ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d0bc:	f7f3 f854 	bl	8000168 <__udivsi3>
 800d0c0:	f7f4 fb84 	bl	80017cc <__aeabi_ui2f>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start, 1.5, 0, 0, 0); // Bottom
 800d0c4:	25ff      	movs	r5, #255	@ 0xff
 800d0c6:	23a9      	movs	r3, #169	@ 0xa9
 800d0c8:	22a9      	movs	r2, #169	@ 0xa9
 800d0ca:	4c33      	ldr	r4, [pc, #204]	@ (800d198 <pdf_gen_completed_report+0xe1c>)
 800d0cc:	05ad      	lsls	r5, r5, #22
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	214b      	movs	r1, #75	@ 0x4b
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800d0d2:	900f      	str	r0, [sp, #60]	@ 0x3c
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start, 1.5, 0, 0, 0); // Bottom
 800d0d4:	9501      	str	r5, [sp, #4]
 800d0d6:	0020      	movs	r0, r4
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	0052      	lsls	r2, r2, #1
 800d0dc:	4b2f      	ldr	r3, [pc, #188]	@ (800d19c <pdf_gen_completed_report+0xe20>)
 800d0de:	9704      	str	r7, [sp, #16]
 800d0e0:	9703      	str	r7, [sp, #12]
 800d0e2:	9702      	str	r7, [sp, #8]
 800d0e4:	f00b fdda 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0); // Left
 800d0e8:	234b      	movs	r3, #75	@ 0x4b
 800d0ea:	9501      	str	r5, [sp, #4]
 800d0ec:	22a9      	movs	r2, #169	@ 0xa9
 800d0ee:	2558      	movs	r5, #88	@ 0x58
 800d0f0:	0019      	movs	r1, r3
 800d0f2:	0020      	movs	r0, r4
 800d0f4:	0052      	lsls	r2, r2, #1
 800d0f6:	9704      	str	r7, [sp, #16]
 800d0f8:	9703      	str	r7, [sp, #12]
 800d0fa:	9702      	str	r7, [sp, #8]
 800d0fc:	9500      	str	r5, [sp, #0]
 800d0fe:	f00b fdcd 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START + CHART_WIDTH, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0);// Right
 800d102:	23ff      	movs	r3, #255	@ 0xff
 800d104:	22a9      	movs	r2, #169	@ 0xa9
 800d106:	059b      	lsls	r3, r3, #22
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	4b24      	ldr	r3, [pc, #144]	@ (800d19c <pdf_gen_completed_report+0xe20>)
 800d10c:	0020      	movs	r0, r4
 800d10e:	0019      	movs	r1, r3
 800d110:	e046      	b.n	800d1a0 <pdf_gen_completed_report+0xe24>
 800d112:	46c0      	nop			@ (mov r8, r8)
 800d114:	000009b8 	.word	0x000009b8
 800d118:	000009bc 	.word	0x000009bc
 800d11c:	000009c4 	.word	0x000009c4
 800d120:	000009cf 	.word	0x000009cf
 800d124:	000009d4 	.word	0x000009d4
 800d128:	000009d8 	.word	0x000009d8
 800d12c:	000009dc 	.word	0x000009dc
 800d130:	000009e4 	.word	0x000009e4
 800d134:	000009e8 	.word	0x000009e8
 800d138:	000009e7 	.word	0x000009e7
 800d13c:	000008e8 	.word	0x000008e8
 800d140:	00000914 	.word	0x00000914
 800d144:	0000096c 	.word	0x0000096c
 800d148:	00000998 	.word	0x00000998
 800d14c:	0801fbf5 	.word	0x0801fbf5
 800d150:	0801fc05 	.word	0x0801fc05
 800d154:	0801fc0e 	.word	0x0801fc0e
 800d158:	0801fc24 	.word	0x0801fc24
 800d15c:	0801fc39 	.word	0x0801fc39
 800d160:	0801fc4f 	.word	0x0801fc4f
 800d164:	0801fc55 	.word	0x0801fc55
 800d168:	0801fc62 	.word	0x0801fc62
 800d16c:	0801fc70 	.word	0x0801fc70
 800d170:	0801fc7e 	.word	0x0801fc7e
 800d174:	0801fc8d 	.word	0x0801fc8d
 800d178:	0801fc9a 	.word	0x0801fc9a
 800d17c:	0801fca6 	.word	0x0801fca6
 800d180:	0801fcb5 	.word	0x0801fcb5
 800d184:	0801fcb8 	.word	0x0801fcb8
 800d188:	0801fcd2 	.word	0x0801fcd2
 800d18c:	42c80000 	.word	0x42c80000
 800d190:	41200000 	.word	0x41200000
 800d194:	20000200 	.word	0x20000200
 800d198:	20003090 	.word	0x20003090
 800d19c:	0000020d 	.word	0x0000020d
 800d1a0:	0052      	lsls	r2, r2, #1
 800d1a2:	9704      	str	r7, [sp, #16]
 800d1a4:	9703      	str	r7, [sp, #12]
 800d1a6:	9702      	str	r7, [sp, #8]
 800d1a8:	9500      	str	r5, [sp, #0]
 800d1aa:	f00b fd77 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start - CHART_HEIGHT, CHART_X_START + CHART_WIDTH, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0); // Top
 800d1ae:	23ff      	movs	r3, #255	@ 0xff
 800d1b0:	059b      	lsls	r3, r3, #22
 800d1b2:	002a      	movs	r2, r5
 800d1b4:	214b      	movs	r1, #75	@ 0x4b
 800d1b6:	0020      	movs	r0, r4
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	9704      	str	r7, [sp, #16]
 800d1bc:	4bfa      	ldr	r3, [pc, #1000]	@ (800d5a8 <pdf_gen_completed_report+0x122c>)
 800d1be:	9703      	str	r7, [sp, #12]
 800d1c0:	9702      	str	r7, [sp, #8]
 800d1c2:	9500      	str	r5, [sp, #0]
 800d1c4:	f00b fd6a 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, CHART_X_START - 20, chart_y_start + 15, "F1", 11, 0, 0, 0, "[C]");
 800d1c8:	4af8      	ldr	r2, [pc, #992]	@ (800d5ac <pdf_gen_completed_report+0x1230>)
 800d1ca:	0020      	movs	r0, r4
 800d1cc:	9204      	str	r2, [sp, #16]
 800d1ce:	220b      	movs	r2, #11
 800d1d0:	9200      	str	r2, [sp, #0]
 800d1d2:	2262      	movs	r2, #98	@ 0x62
 800d1d4:	2137      	movs	r1, #55	@ 0x37
 800d1d6:	4bf6      	ldr	r3, [pc, #984]	@ (800d5b0 <pdf_gen_completed_report+0x1234>)
 800d1d8:	9703      	str	r7, [sp, #12]
 800d1da:	9702      	str	r7, [sp, #8]
 800d1dc:	9701      	str	r7, [sp, #4]
 800d1de:	32ff      	adds	r2, #255	@ 0xff
 800d1e0:	f00b fd26 	bl	8018c30 <tpdf_draw_colored_text>
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800d1e4:	2400      	movs	r4, #0
        float temp = (float) (g_temp_axis_min  + i * temper_label_interval);
 800d1e6:	4bf3      	ldr	r3, [pc, #972]	@ (800d5b4 <pdf_gen_completed_report+0x1238>)
 800d1e8:	0020      	movs	r0, r4
 800d1ea:	681b      	ldr	r3, [r3, #0]
        sprintf(label_buffer, "%0.1f", temp);
 800d1ec:	ad1a      	add	r5, sp, #104	@ 0x68
        float temp = (float) (g_temp_axis_min  + i * temper_label_interval);
 800d1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1f0:	f7f4 fa9c 	bl	800172c <__aeabi_i2f>
 800d1f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d1f6:	f7f3 fea5 	bl	8000f44 <__aeabi_fmul>
 800d1fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1fc:	f7f3 fae2 	bl	80007c4 <__aeabi_fadd>
 800d200:	9006      	str	r0, [sp, #24]
        sprintf(label_buffer, "%0.1f", temp);
 800d202:	f7f6 fac9 	bl	8003798 <__aeabi_f2d>
 800d206:	0002      	movs	r2, r0
 800d208:	48eb      	ldr	r0, [pc, #940]	@ (800d5b8 <pdf_gen_completed_report+0x123c>)
 800d20a:	000b      	movs	r3, r1
 800d20c:	1940      	adds	r0, r0, r5
 800d20e:	49eb      	ldr	r1, [pc, #940]	@ (800d5bc <pdf_gen_completed_report+0x1240>)
 800d210:	f00d f854 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d214:	4be6      	ldr	r3, [pc, #920]	@ (800d5b0 <pdf_gen_completed_report+0x1234>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d218:	9806      	ldr	r0, [sp, #24]
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d21a:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d21c:	f7f3 ffec 	bl	80011f8 <__aeabi_fsub>
 800d220:	49e7      	ldr	r1, [pc, #924]	@ (800d5c0 <pdf_gen_completed_report+0x1244>)
 800d222:	f7f3 fe8f 	bl	8000f44 <__aeabi_fmul>
 800d226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d228:	1c05      	adds	r5, r0, #0
 800d22a:	9808      	ldr	r0, [sp, #32]
 800d22c:	f7f3 ffe4 	bl	80011f8 <__aeabi_fsub>
 800d230:	1c01      	adds	r1, r0, #0
 800d232:	1c28      	adds	r0, r5, #0
 800d234:	f7f3 fcb8 	bl	8000ba8 <__aeabi_fdiv>
 800d238:	49e2      	ldr	r1, [pc, #904]	@ (800d5c4 <pdf_gen_completed_report+0x1248>)
 800d23a:	f7f3 fac3 	bl	80007c4 <__aeabi_fadd>
        int y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800d23e:	f7f4 fa55 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d242:	4bdd      	ldr	r3, [pc, #884]	@ (800d5b8 <pdf_gen_completed_report+0x123c>)
 800d244:	a91a      	add	r1, sp, #104	@ 0x68
 800d246:	185b      	adds	r3, r3, r1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	2308      	movs	r3, #8
 800d24c:	4dde      	ldr	r5, [pc, #888]	@ (800d5c8 <pdf_gen_completed_report+0x124c>)
 800d24e:	1ec2      	subs	r2, r0, #3
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	2137      	movs	r1, #55	@ 0x37
 800d254:	0028      	movs	r0, r5
 800d256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d258:	9703      	str	r7, [sp, #12]
 800d25a:	9702      	str	r7, [sp, #8]
 800d25c:	9701      	str	r7, [sp, #4]
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800d25e:	3401      	adds	r4, #1
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d260:	f00b fce6 	bl	8018c30 <tpdf_draw_colored_text>
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800d264:	2c05      	cmp	r4, #5
 800d266:	d1be      	bne.n	800d1e6 <pdf_gen_completed_report+0xe6a>
    tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, chart_y_start + 15, "F1", 11, 0, 0, 0, "[uSv/h]");
 800d268:	4bd8      	ldr	r3, [pc, #864]	@ (800d5cc <pdf_gen_completed_report+0x1250>)
 800d26a:	2262      	movs	r2, #98	@ 0x62
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	230b      	movs	r3, #11
 800d270:	0028      	movs	r0, r5
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	49d6      	ldr	r1, [pc, #856]	@ (800d5d0 <pdf_gen_completed_report+0x1254>)
 800d276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d278:	9703      	str	r7, [sp, #12]
 800d27a:	9702      	str	r7, [sp, #8]
 800d27c:	9701      	str	r7, [sp, #4]
 800d27e:	32ff      	adds	r2, #255	@ 0xff
 800d280:	f00b fcd6 	bl	8018c30 <tpdf_draw_colored_text>
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800d284:	2400      	movs	r4, #0
        float rad = RAD_MIN + i * rad_label_interval;
 800d286:	0020      	movs	r0, r4
 800d288:	f7f4 fa50 	bl	800172c <__aeabi_i2f>
 800d28c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d28e:	f7f3 fe59 	bl	8000f44 <__aeabi_fmul>
 800d292:	2100      	movs	r1, #0
 800d294:	f7f3 fa96 	bl	80007c4 <__aeabi_fadd>
 800d298:	900c      	str	r0, [sp, #48]	@ 0x30
        unsigned int y = (unsigned int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT,chart_y_start );
 800d29a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d29c:	f7f4 fa96 	bl	80017cc <__aeabi_ui2f>
 800d2a0:	9009      	str	r0, [sp, #36]	@ 0x24
        sprintf(label_buffer, "%u", (unsigned int)rad);
 800d2a2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d2a4:	f7f3 f98c 	bl	80005c0 <__aeabi_f2uiz>
 800d2a8:	4dc3      	ldr	r5, [pc, #780]	@ (800d5b8 <pdf_gen_completed_report+0x123c>)
 800d2aa:	ab1a      	add	r3, sp, #104	@ 0x68
 800d2ac:	18ed      	adds	r5, r5, r3
 800d2ae:	0002      	movs	r2, r0
 800d2b0:	49c8      	ldr	r1, [pc, #800]	@ (800d5d4 <pdf_gen_completed_report+0x1258>)
 800d2b2:	0028      	movs	r0, r5
 800d2b4:	f00d f802 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d2b8:	4bbd      	ldr	r3, [pc, #756]	@ (800d5b0 <pdf_gen_completed_report+0x1234>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d2ba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d2bc:	49c0      	ldr	r1, [pc, #768]	@ (800d5c0 <pdf_gen_completed_report+0x1244>)
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d2be:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d2c0:	f7f3 fe40 	bl	8000f44 <__aeabi_fmul>
 800d2c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d2c6:	f7f3 fc6f 	bl	8000ba8 <__aeabi_fdiv>
 800d2ca:	49be      	ldr	r1, [pc, #760]	@ (800d5c4 <pdf_gen_completed_report+0x1248>)
 800d2cc:	f7f3 fa7a 	bl	80007c4 <__aeabi_fadd>
        unsigned int y = (unsigned int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT,chart_y_start );
 800d2d0:	f7f3 f976 	bl	80005c0 <__aeabi_f2uiz>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d2d4:	9504      	str	r5, [sp, #16]
 800d2d6:	2508      	movs	r5, #8
 800d2d8:	4bbb      	ldr	r3, [pc, #748]	@ (800d5c8 <pdf_gen_completed_report+0x124c>)
 800d2da:	1ec2      	subs	r2, r0, #3
 800d2dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2de:	49bc      	ldr	r1, [pc, #752]	@ (800d5d0 <pdf_gen_completed_report+0x1254>)
 800d2e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d2e4:	9703      	str	r7, [sp, #12]
 800d2e6:	9702      	str	r7, [sp, #8]
 800d2e8:	9701      	str	r7, [sp, #4]
 800d2ea:	9500      	str	r5, [sp, #0]
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800d2ec:	3401      	adds	r4, #1
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800d2ee:	f00b fc9f 	bl	8018c30 <tpdf_draw_colored_text>
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800d2f2:	2c07      	cmp	r4, #7
 800d2f4:	d1c7      	bne.n	800d286 <pdf_gen_completed_report+0xf0a>
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800d2f6:	7e70      	ldrb	r0, [r6, #25]
 800d2f8:	7eb4      	ldrb	r4, [r6, #26]
 800d2fa:	f7fe faf3 	bl	800b8e4 <convert_month_to_string>
 800d2fe:	7e33      	ldrb	r3, [r6, #24]
 800d300:	4ab5      	ldr	r2, [pc, #724]	@ (800d5d8 <pdf_gen_completed_report+0x125c>)
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	0023      	movs	r3, r4
            stop_time->day,\
 800d306:	0034      	movs	r4, r6
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800d308:	2110      	movs	r1, #16
 800d30a:	9000      	str	r0, [sp, #0]
 800d30c:	a874      	add	r0, sp, #464	@ 0x1d0
 800d30e:	9210      	str	r2, [sp, #64]	@ 0x40
 800d310:	f00c ff9e 	bl	801a250 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 10, "F1", 8, 0, 0, 0, tmp_time);
 800d314:	ab74      	add	r3, sp, #464	@ 0x1d0
 800d316:	224e      	movs	r2, #78	@ 0x4e
 800d318:	213c      	movs	r1, #60	@ 0x3c
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d320:	9703      	str	r7, [sp, #12]
 800d322:	9702      	str	r7, [sp, #8]
 800d324:	9701      	str	r7, [sp, #4]
 800d326:	9500      	str	r5, [sp, #0]
 800d328:	f00b fc82 	bl	8018c30 <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u:%02u:%02u", \
 800d32c:	7f72      	ldrb	r2, [r6, #29]
 800d32e:	7ef3      	ldrb	r3, [r6, #27]
 800d330:	9201      	str	r2, [sp, #4]
 800d332:	49aa      	ldr	r1, [pc, #680]	@ (800d5dc <pdf_gen_completed_report+0x1260>)
 800d334:	7f32      	ldrb	r2, [r6, #28]
 800d336:	a874      	add	r0, sp, #464	@ 0x1d0
 800d338:	9200      	str	r2, [sp, #0]
 800d33a:	9112      	str	r1, [sp, #72]	@ 0x48
 800d33c:	000a      	movs	r2, r1
 800d33e:	2110      	movs	r1, #16
 800d340:	f00c ff86 	bl	801a250 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800d344:	ab74      	add	r3, sp, #464	@ 0x1d0
            stop_time->day,\
 800d346:	341e      	adds	r4, #30
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800d348:	2246      	movs	r2, #70	@ 0x46
 800d34a:	213c      	movs	r1, #60	@ 0x3c
 800d34c:	9304      	str	r3, [sp, #16]
 800d34e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d352:	9703      	str	r7, [sp, #12]
 800d354:	9702      	str	r7, [sp, #8]
 800d356:	9701      	str	r7, [sp, #4]
 800d358:	9500      	str	r5, [sp, #0]
 800d35a:	f00b fc69 	bl	8018c30 <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800d35e:	78a3      	ldrb	r3, [r4, #2]
 800d360:	9316      	str	r3, [sp, #88]	@ 0x58
 800d362:	7860      	ldrb	r0, [r4, #1]
 800d364:	f7fe fabe 	bl	800b8e4 <convert_month_to_string>
 800d368:	7fb3      	ldrb	r3, [r6, #30]
 800d36a:	2110      	movs	r1, #16
 800d36c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	9000      	str	r0, [sp, #0]
 800d372:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d374:	a874      	add	r0, sp, #464	@ 0x1d0
 800d376:	f00c ff6b 	bl	801a250 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH -15, chart_y_start - CHART_HEIGHT - 10, "F1", 8, 0, 0, 0, tmp_time);
 800d37a:	21ff      	movs	r1, #255	@ 0xff
 800d37c:	ab74      	add	r3, sp, #464	@ 0x1d0
 800d37e:	224e      	movs	r2, #78	@ 0x4e
 800d380:	9304      	str	r3, [sp, #16]
 800d382:	0049      	lsls	r1, r1, #1
 800d384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d386:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d388:	9703      	str	r7, [sp, #12]
 800d38a:	9702      	str	r7, [sp, #8]
 800d38c:	9701      	str	r7, [sp, #4]
 800d38e:	9500      	str	r5, [sp, #0]
 800d390:	f00b fc4e 	bl	8018c30 <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u:%02u:%02u", \
 800d394:	7962      	ldrb	r2, [r4, #5]
 800d396:	78e3      	ldrb	r3, [r4, #3]
 800d398:	9201      	str	r2, [sp, #4]
 800d39a:	7922      	ldrb	r2, [r4, #4]
 800d39c:	2110      	movs	r1, #16
 800d39e:	9200      	str	r2, [sp, #0]
 800d3a0:	a874      	add	r0, sp, #464	@ 0x1d0
 800d3a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d3a4:	f00c ff54 	bl	801a250 <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START+ CHART_WIDTH -15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800d3a8:	21ff      	movs	r1, #255	@ 0xff
 800d3aa:	ab74      	add	r3, sp, #464	@ 0x1d0
 800d3ac:	2246      	movs	r2, #70	@ 0x46
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	0049      	lsls	r1, r1, #1
 800d3b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3b4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d3b6:	9703      	str	r7, [sp, #12]
 800d3b8:	9702      	str	r7, [sp, #8]
 800d3ba:	9701      	str	r7, [sp, #4]
 800d3bc:	9500      	str	r5, [sp, #0]
 800d3be:	f00b fc37 	bl	8018c30 <tpdf_draw_colored_text>
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d3c2:	4b7c      	ldr	r3, [pc, #496]	@ (800d5b4 <pdf_gen_completed_report+0x1238>)
 800d3c4:	9808      	ldr	r0, [sp, #32]
 800d3c6:	6819      	ldr	r1, [r3, #0]
 800d3c8:	f7f3 ff16 	bl	80011f8 <__aeabi_fsub>
 800d3cc:	21fa      	movs	r1, #250	@ 0xfa
 800d3ce:	0589      	lsls	r1, r1, #22
 800d3d0:	f7f3 fdb8 	bl	8000f44 <__aeabi_fmul>
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800d3d4:	2401      	movs	r4, #1
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800d3d6:	900b      	str	r0, [sp, #44]	@ 0x2c
        float temp = (float)(g_temp_axis_min  + i * temper_label_interval);
 800d3d8:	4b76      	ldr	r3, [pc, #472]	@ (800d5b4 <pdf_gen_completed_report+0x1238>)
 800d3da:	0020      	movs	r0, r4
 800d3dc:	681e      	ldr	r6, [r3, #0]
 800d3de:	f7f4 f9a5 	bl	800172c <__aeabi_i2f>
 800d3e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3e4:	f7f3 fdae 	bl	8000f44 <__aeabi_fmul>
 800d3e8:	1c31      	adds	r1, r6, #0
 800d3ea:	f7f3 f9eb 	bl	80007c4 <__aeabi_fadd>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d3ee:	1c31      	adds	r1, r6, #0
 800d3f0:	f7f3 ff02 	bl	80011f8 <__aeabi_fsub>
 800d3f4:	4972      	ldr	r1, [pc, #456]	@ (800d5c0 <pdf_gen_completed_report+0x1244>)
 800d3f6:	f7f3 fda5 	bl	8000f44 <__aeabi_fmul>
 800d3fa:	1c31      	adds	r1, r6, #0
 800d3fc:	1c05      	adds	r5, r0, #0
 800d3fe:	9808      	ldr	r0, [sp, #32]
 800d400:	f7f3 fefa 	bl	80011f8 <__aeabi_fsub>
 800d404:	1c01      	adds	r1, r0, #0
 800d406:	1c28      	adds	r0, r5, #0
 800d408:	f7f3 fbce 	bl	8000ba8 <__aeabi_fdiv>
 800d40c:	496d      	ldr	r1, [pc, #436]	@ (800d5c4 <pdf_gen_completed_report+0x1248>)
 800d40e:	f7f3 f9d9 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up,chart_y_start - CHART_HEIGHT, chart_y_start);
 800d412:	f7f4 f96b 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d416:	2304      	movs	r3, #4
 800d418:	9305      	str	r3, [sp, #20]
 800d41a:	23fc      	movs	r3, #252	@ 0xfc
 800d41c:	4e70      	ldr	r6, [pc, #448]	@ (800d5e0 <pdf_gen_completed_report+0x1264>)
 800d41e:	4d6a      	ldr	r5, [pc, #424]	@ (800d5c8 <pdf_gen_completed_report+0x124c>)
 800d420:	059b      	lsls	r3, r3, #22
        y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up,chart_y_start - CHART_HEIGHT, chart_y_start);
 800d422:	0002      	movs	r2, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	9000      	str	r0, [sp, #0]
 800d428:	214b      	movs	r1, #75	@ 0x4b
 800d42a:	0028      	movs	r0, r5
 800d42c:	4b5e      	ldr	r3, [pc, #376]	@ (800d5a8 <pdf_gen_completed_report+0x122c>)
 800d42e:	9604      	str	r6, [sp, #16]
 800d430:	9603      	str	r6, [sp, #12]
 800d432:	9602      	str	r6, [sp, #8]
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800d434:	3401      	adds	r4, #1
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d436:	f00b fc65 	bl	8018d04 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800d43a:	2c04      	cmp	r4, #4
 800d43c:	d1cc      	bne.n	800d3d8 <pdf_gen_completed_report+0x105c>
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800d43e:	3c03      	subs	r4, #3
        float rad = RAD_MIN + i * rad_label_interval;
 800d440:	0020      	movs	r0, r4
 800d442:	f7f4 f973 	bl	800172c <__aeabi_i2f>
 800d446:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d448:	f7f3 fd7c 	bl	8000f44 <__aeabi_fmul>
 800d44c:	2100      	movs	r1, #0
 800d44e:	f7f3 f9b9 	bl	80007c4 <__aeabi_fadd>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d452:	495b      	ldr	r1, [pc, #364]	@ (800d5c0 <pdf_gen_completed_report+0x1244>)
 800d454:	f7f3 fd76 	bl	8000f44 <__aeabi_fmul>
 800d458:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d45a:	f7f3 fba5 	bl	8000ba8 <__aeabi_fdiv>
 800d45e:	4959      	ldr	r1, [pc, #356]	@ (800d5c4 <pdf_gen_completed_report+0x1248>)
 800d460:	f7f3 f9b0 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800d464:	f7f4 f942 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d468:	2304      	movs	r3, #4
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	23fc      	movs	r3, #252	@ 0xfc
 800d46e:	4d56      	ldr	r5, [pc, #344]	@ (800d5c8 <pdf_gen_completed_report+0x124c>)
 800d470:	059b      	lsls	r3, r3, #22
        y = (int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800d472:	0002      	movs	r2, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	9000      	str	r0, [sp, #0]
 800d478:	214b      	movs	r1, #75	@ 0x4b
 800d47a:	0028      	movs	r0, r5
 800d47c:	4b4a      	ldr	r3, [pc, #296]	@ (800d5a8 <pdf_gen_completed_report+0x122c>)
 800d47e:	9604      	str	r6, [sp, #16]
 800d480:	9603      	str	r6, [sp, #12]
 800d482:	9602      	str	r6, [sp, #8]
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800d484:	3401      	adds	r4, #1
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800d486:	f00b fc3d 	bl	8018d04 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800d48a:	2c06      	cmp	r4, #6
 800d48c:	d1d8      	bne.n	800d440 <pdf_gen_completed_report+0x10c4>
    const int grid_size = ( CHART_HEIGHT / ((int)(rad_highest_scale_up-RAD_MIN)/rad_label_interval) );
 800d48e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d490:	f7f4 f94c 	bl	800172c <__aeabi_i2f>
 800d494:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d496:	f7f3 fb87 	bl	8000ba8 <__aeabi_fdiv>
 800d49a:	1c01      	adds	r1, r0, #0
 800d49c:	4848      	ldr	r0, [pc, #288]	@ (800d5c0 <pdf_gen_completed_report+0x1244>)
 800d49e:	f7f3 fb83 	bl	8000ba8 <__aeabi_fdiv>
 800d4a2:	f7f4 f923 	bl	80016ec <__aeabi_f2iz>
 800d4a6:	0004      	movs	r4, r0
    const int num_grid_col_lines = (int)(CHART_WIDTH / grid_size);
 800d4a8:	0001      	movs	r1, r0
 800d4aa:	20e1      	movs	r0, #225	@ 0xe1
 800d4ac:	0040      	lsls	r0, r0, #1
 800d4ae:	f7f2 fee5 	bl	800027c <__divsi3>
 800d4b2:	0025      	movs	r5, r4
    for (int i = 1; i <= num_grid_col_lines; i++)
 800d4b4:	2301      	movs	r3, #1
    const int num_grid_col_lines = (int)(CHART_WIDTH / grid_size);
 800d4b6:	900c      	str	r0, [sp, #48]	@ 0x30
    for (int i = 1; i <= num_grid_col_lines; i++)
 800d4b8:	354b      	adds	r5, #75	@ 0x4b
 800d4ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	db01      	blt.n	800d4c8 <pdf_gen_completed_report+0x114c>
 800d4c4:	f000 fd1b 	bl	800defe <pdf_gen_completed_report+0x1b82>
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800d4c8:	9a07      	ldr	r2, [sp, #28]
 800d4ca:	9b07      	ldr	r3, [sp, #28]
 800d4cc:	329e      	adds	r2, #158	@ 0x9e
 800d4ce:	7810      	ldrb	r0, [r2, #0]
 800d4d0:	339d      	adds	r3, #157	@ 0x9d
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	0200      	lsls	r0, r0, #8
 800d4d6:	4318      	orrs	r0, r3
 800d4d8:	0400      	lsls	r0, r0, #16
 800d4da:	1400      	asrs	r0, r0, #16
 800d4dc:	f7f4 f926 	bl	800172c <__aeabi_i2f>
 800d4e0:	4940      	ldr	r1, [pc, #256]	@ (800d5e4 <pdf_gen_completed_report+0x1268>)
 800d4e2:	f7f3 fb61 	bl	8000ba8 <__aeabi_fdiv>
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d4e6:	9a07      	ldr	r2, [sp, #28]
 800d4e8:	9b07      	ldr	r3, [sp, #28]
 800d4ea:	3296      	adds	r2, #150	@ 0x96
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800d4ec:	1c06      	adds	r6, r0, #0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d4ee:	3395      	adds	r3, #149	@ 0x95
 800d4f0:	7810      	ldrb	r0, [r2, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	0200      	lsls	r0, r0, #8
 800d4f6:	4318      	orrs	r0, r3
 800d4f8:	0400      	lsls	r0, r0, #16
 800d4fa:	1400      	asrs	r0, r0, #16
 800d4fc:	f7f4 f916 	bl	800172c <__aeabi_i2f>
 800d500:	4938      	ldr	r1, [pc, #224]	@ (800d5e4 <pdf_gen_completed_report+0x1268>)
 800d502:	f7f3 fb51 	bl	8000ba8 <__aeabi_fdiv>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d506:	9a07      	ldr	r2, [sp, #28]
 800d508:	9b07      	ldr	r3, [sp, #28]
 800d50a:	32a0      	adds	r2, #160	@ 0xa0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d50c:	900c      	str	r0, [sp, #48]	@ 0x30
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d50e:	7810      	ldrb	r0, [r2, #0]
 800d510:	339f      	adds	r3, #159	@ 0x9f
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	0200      	lsls	r0, r0, #8
 800d516:	4318      	orrs	r0, r3
 800d518:	0400      	lsls	r0, r0, #16
 800d51a:	1400      	asrs	r0, r0, #16
 800d51c:	f7f4 f906 	bl	800172c <__aeabi_i2f>
 800d520:	4930      	ldr	r1, [pc, #192]	@ (800d5e4 <pdf_gen_completed_report+0x1268>)
 800d522:	f7f3 fb41 	bl	8000ba8 <__aeabi_fdiv>
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d526:	9a07      	ldr	r2, [sp, #28]
 800d528:	9b07      	ldr	r3, [sp, #28]
 800d52a:	3298      	adds	r2, #152	@ 0x98
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d52c:	900f      	str	r0, [sp, #60]	@ 0x3c
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d52e:	7810      	ldrb	r0, [r2, #0]
 800d530:	3397      	adds	r3, #151	@ 0x97
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	0200      	lsls	r0, r0, #8
 800d536:	4318      	orrs	r0, r3
 800d538:	0400      	lsls	r0, r0, #16
 800d53a:	1400      	asrs	r0, r0, #16
 800d53c:	f7f4 f8f6 	bl	800172c <__aeabi_i2f>
 800d540:	4928      	ldr	r1, [pc, #160]	@ (800d5e4 <pdf_gen_completed_report+0x1268>)
 800d542:	f7f3 fb31 	bl	8000ba8 <__aeabi_fdiv>
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d546:	9a07      	ldr	r2, [sp, #28]
 800d548:	9b07      	ldr	r3, [sp, #28]
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d54a:	9010      	str	r0, [sp, #64]	@ 0x40
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d54c:	329a      	adds	r2, #154	@ 0x9a
 800d54e:	7812      	ldrb	r2, [r2, #0]
 800d550:	3399      	adds	r3, #153	@ 0x99
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	0212      	lsls	r2, r2, #8
 800d556:	431a      	orrs	r2, r3
 800d558:	9b07      	ldr	r3, [sp, #28]
 800d55a:	2164      	movs	r1, #100	@ 0x64
 800d55c:	339b      	adds	r3, #155	@ 0x9b
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	041b      	lsls	r3, r3, #16
 800d562:	4313      	orrs	r3, r2
 800d564:	9a07      	ldr	r2, [sp, #28]
 800d566:	329c      	adds	r2, #156	@ 0x9c
 800d568:	7810      	ldrb	r0, [r2, #0]
 800d56a:	0600      	lsls	r0, r0, #24
 800d56c:	4318      	orrs	r0, r3
 800d56e:	f7f2 fdfb 	bl	8000168 <__udivsi3>
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d572:	9b07      	ldr	r3, [sp, #28]
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d574:	900b      	str	r0, [sp, #44]	@ 0x2c
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d576:	3391      	adds	r3, #145	@ 0x91
 800d578:	781a      	ldrb	r2, [r3, #0]
 800d57a:	9b07      	ldr	r3, [sp, #28]
 800d57c:	2164      	movs	r1, #100	@ 0x64
 800d57e:	3392      	adds	r3, #146	@ 0x92
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	4313      	orrs	r3, r2
 800d586:	9a07      	ldr	r2, [sp, #28]
 800d588:	3293      	adds	r2, #147	@ 0x93
 800d58a:	7812      	ldrb	r2, [r2, #0]
 800d58c:	0412      	lsls	r2, r2, #16
 800d58e:	431a      	orrs	r2, r3
 800d590:	9b07      	ldr	r3, [sp, #28]
 800d592:	3394      	adds	r3, #148	@ 0x94
 800d594:	7818      	ldrb	r0, [r3, #0]
 800d596:	0600      	lsls	r0, r0, #24
 800d598:	4310      	orrs	r0, r2
 800d59a:	f7f2 fde5 	bl	8000168 <__udivsi3>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH2) && (temp_highest_scale_up > th2)) {
 800d59e:	4b12      	ldr	r3, [pc, #72]	@ (800d5e8 <pdf_gen_completed_report+0x126c>)
 800d5a0:	2280      	movs	r2, #128	@ 0x80
 800d5a2:	699c      	ldr	r4, [r3, #24]
 800d5a4:	e022      	b.n	800d5ec <pdf_gen_completed_report+0x1270>
 800d5a6:	46c0      	nop			@ (mov r8, r8)
 800d5a8:	0000020d 	.word	0x0000020d
 800d5ac:	0801fcea 	.word	0x0801fcea
 800d5b0:	0801f51e 	.word	0x0801f51e
 800d5b4:	20000200 	.word	0x20000200
 800d5b8:	000008e8 	.word	0x000008e8
 800d5bc:	0801fcee 	.word	0x0801fcee
 800d5c0:	437a0000 	.word	0x437a0000
 800d5c4:	42b00000 	.word	0x42b00000
 800d5c8:	20003090 	.word	0x20003090
 800d5cc:	0801fcf4 	.word	0x0801fcf4
 800d5d0:	00000212 	.word	0x00000212
 800d5d4:	0801fcfc 	.word	0x0801fcfc
 800d5d8:	0801fcff 	.word	0x0801fcff
 800d5dc:	0801fa85 	.word	0x0801fa85
 800d5e0:	3f333333 	.word	0x3f333333
 800d5e4:	41200000 	.word	0x41200000
 800d5e8:	20000b50 	.word	0x20000b50
 800d5ec:	23c0      	movs	r3, #192	@ 0xc0
 800d5ee:	021b      	lsls	r3, r3, #8
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d5f0:	9007      	str	r0, [sp, #28]
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH2) && (temp_highest_scale_up > th2)) {
 800d5f2:	4023      	ands	r3, r4
 800d5f4:	0212      	lsls	r2, r2, #8
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d101      	bne.n	800d5fe <pdf_gen_completed_report+0x1282>
 800d5fa:	f000 fc97 	bl	800df2c <pdf_gen_completed_report+0x1bb0>
 800d5fe:	9808      	ldr	r0, [sp, #32]
 800d600:	1c31      	adds	r1, r6, #0
 800d602:	f7f2 ff8b 	bl	800051c <__aeabi_fcmpgt>
 800d606:	2800      	cmp	r0, #0
 800d608:	d101      	bne.n	800d60e <pdf_gen_completed_report+0x1292>
 800d60a:	f000 fc8f 	bl	800df2c <pdf_gen_completed_report+0x1bb0>
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d60e:	4bf6      	ldr	r3, [pc, #984]	@ (800d9e8 <pdf_gen_completed_report+0x166c>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d610:	1c30      	adds	r0, r6, #0
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d612:	681d      	ldr	r5, [r3, #0]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d614:	1c29      	adds	r1, r5, #0
 800d616:	f7f3 fdef 	bl	80011f8 <__aeabi_fsub>
 800d61a:	49f4      	ldr	r1, [pc, #976]	@ (800d9ec <pdf_gen_completed_report+0x1670>)
 800d61c:	f7f3 fc92 	bl	8000f44 <__aeabi_fmul>
 800d620:	1c29      	adds	r1, r5, #0
 800d622:	1c04      	adds	r4, r0, #0
 800d624:	9808      	ldr	r0, [sp, #32]
 800d626:	f7f3 fde7 	bl	80011f8 <__aeabi_fsub>
 800d62a:	1c01      	adds	r1, r0, #0
 800d62c:	1c20      	adds	r0, r4, #0
 800d62e:	f7f3 fabb 	bl	8000ba8 <__aeabi_fdiv>
 800d632:	49ef      	ldr	r1, [pc, #956]	@ (800d9f0 <pdf_gen_completed_report+0x1674>)
 800d634:	f7f3 f8c6 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d638:	f7f4 f858 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d63c:	2304      	movs	r3, #4
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d63e:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d640:	20ff      	movs	r0, #255	@ 0xff
 800d642:	4dec      	ldr	r5, [pc, #944]	@ (800d9f4 <pdf_gen_completed_report+0x1678>)
 800d644:	4aec      	ldr	r2, [pc, #944]	@ (800d9f8 <pdf_gen_completed_report+0x167c>)
 800d646:	9305      	str	r3, [sp, #20]
 800d648:	4bec      	ldr	r3, [pc, #944]	@ (800d9fc <pdf_gen_completed_report+0x1680>)
 800d64a:	0580      	lsls	r0, r0, #22
 800d64c:	214b      	movs	r1, #75	@ 0x4b
 800d64e:	9303      	str	r3, [sp, #12]
 800d650:	9202      	str	r2, [sp, #8]
 800d652:	4beb      	ldr	r3, [pc, #940]	@ (800da00 <pdf_gen_completed_report+0x1684>)
 800d654:	0022      	movs	r2, r4
 800d656:	9001      	str	r0, [sp, #4]
 800d658:	9704      	str	r7, [sp, #16]
 800d65a:	0028      	movs	r0, r5
 800d65c:	9400      	str	r4, [sp, #0]
 800d65e:	f00b fb51 	bl	8018d04 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", th2);
 800d662:	1c30      	adds	r0, r6, #0
 800d664:	f7f6 f898 	bl	8003798 <__aeabi_f2d>
 800d668:	4ee6      	ldr	r6, [pc, #920]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d66a:	ab1a      	add	r3, sp, #104	@ 0x68
 800d66c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d66e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d670:	18f6      	adds	r6, r6, r3
 800d672:	49e5      	ldr	r1, [pc, #916]	@ (800da08 <pdf_gen_completed_report+0x168c>)
 800d674:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d676:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d678:	0030      	movs	r0, r6
 800d67a:	f00c fe1f 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d67e:	49df      	ldr	r1, [pc, #892]	@ (800d9fc <pdf_gen_completed_report+0x1680>)
 800d680:	4be2      	ldr	r3, [pc, #904]	@ (800da0c <pdf_gen_completed_report+0x1690>)
 800d682:	9102      	str	r1, [sp, #8]
 800d684:	49dc      	ldr	r1, [pc, #880]	@ (800d9f8 <pdf_gen_completed_report+0x167c>)
 800d686:	1ee2      	subs	r2, r4, #3
 800d688:	9101      	str	r1, [sp, #4]
 800d68a:	2108      	movs	r1, #8
 800d68c:	0028      	movs	r0, r5
 800d68e:	9100      	str	r1, [sp, #0]
 800d690:	9604      	str	r6, [sp, #16]
 800d692:	312f      	adds	r1, #47	@ 0x2f
 800d694:	9703      	str	r7, [sp, #12]
 800d696:	f00b facb 	bl	8018c30 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TH2 draw y=%d (%.1f)\r\n", y, th2);
 800d69a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d69e:	0021      	movs	r1, r4
 800d6a0:	48db      	ldr	r0, [pc, #876]	@ (800da10 <pdf_gen_completed_report+0x1694>)
 800d6a2:	f00c fd5b 	bl	801a15c <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH1) && (temp_highest_scale_up > th1)) {
 800d6a6:	4bdb      	ldr	r3, [pc, #876]	@ (800da14 <pdf_gen_completed_report+0x1698>)
 800d6a8:	2280      	movs	r2, #128	@ 0x80
 800d6aa:	699c      	ldr	r4, [r3, #24]
 800d6ac:	23c0      	movs	r3, #192	@ 0xc0
 800d6ae:	019b      	lsls	r3, r3, #6
 800d6b0:	4023      	ands	r3, r4
 800d6b2:	0192      	lsls	r2, r2, #6
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d101      	bne.n	800d6bc <pdf_gen_completed_report+0x1340>
 800d6b8:	f000 fc3f 	bl	800df3a <pdf_gen_completed_report+0x1bbe>
 800d6bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d6be:	9808      	ldr	r0, [sp, #32]
 800d6c0:	f7f2 ff2c 	bl	800051c <__aeabi_fcmpgt>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d101      	bne.n	800d6cc <pdf_gen_completed_report+0x1350>
 800d6c8:	f000 fc37 	bl	800df3a <pdf_gen_completed_report+0x1bbe>
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d6cc:	4bc6      	ldr	r3, [pc, #792]	@ (800d9e8 <pdf_gen_completed_report+0x166c>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d6ce:	980c      	ldr	r0, [sp, #48]	@ 0x30
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d6d0:	681d      	ldr	r5, [r3, #0]
        sprintf(label_buffer, "%0.1f", th1);
 800d6d2:	ae1a      	add	r6, sp, #104	@ 0x68
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d6d4:	1c29      	adds	r1, r5, #0
 800d6d6:	f7f3 fd8f 	bl	80011f8 <__aeabi_fsub>
 800d6da:	49c4      	ldr	r1, [pc, #784]	@ (800d9ec <pdf_gen_completed_report+0x1670>)
 800d6dc:	f7f3 fc32 	bl	8000f44 <__aeabi_fmul>
 800d6e0:	1c29      	adds	r1, r5, #0
 800d6e2:	1c04      	adds	r4, r0, #0
 800d6e4:	9808      	ldr	r0, [sp, #32]
 800d6e6:	f7f3 fd87 	bl	80011f8 <__aeabi_fsub>
 800d6ea:	1c01      	adds	r1, r0, #0
 800d6ec:	1c20      	adds	r0, r4, #0
 800d6ee:	f7f3 fa5b 	bl	8000ba8 <__aeabi_fdiv>
 800d6f2:	49bf      	ldr	r1, [pc, #764]	@ (800d9f0 <pdf_gen_completed_report+0x1674>)
 800d6f4:	f7f3 f866 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d6f8:	f7f3 fff8 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d6fc:	2304      	movs	r3, #4
 800d6fe:	9305      	str	r3, [sp, #20]
 800d700:	23fc      	movs	r3, #252	@ 0xfc
 800d702:	059b      	lsls	r3, r3, #22
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d704:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	22fe      	movs	r2, #254	@ 0xfe
 800d70a:	23fd      	movs	r3, #253	@ 0xfd
 800d70c:	20ff      	movs	r0, #255	@ 0xff
 800d70e:	4db9      	ldr	r5, [pc, #740]	@ (800d9f4 <pdf_gen_completed_report+0x1678>)
 800d710:	059b      	lsls	r3, r3, #22
 800d712:	0592      	lsls	r2, r2, #22
 800d714:	0580      	lsls	r0, r0, #22
 800d716:	214b      	movs	r1, #75	@ 0x4b
 800d718:	9303      	str	r3, [sp, #12]
 800d71a:	9202      	str	r2, [sp, #8]
 800d71c:	4bb8      	ldr	r3, [pc, #736]	@ (800da00 <pdf_gen_completed_report+0x1684>)
 800d71e:	0022      	movs	r2, r4
 800d720:	9001      	str	r0, [sp, #4]
 800d722:	9400      	str	r4, [sp, #0]
 800d724:	0028      	movs	r0, r5
 800d726:	f00b faed 	bl	8018d04 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", th1);
 800d72a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d72c:	f7f6 f834 	bl	8003798 <__aeabi_f2d>
 800d730:	900c      	str	r0, [sp, #48]	@ 0x30
 800d732:	910d      	str	r1, [sp, #52]	@ 0x34
 800d734:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d738:	48b2      	ldr	r0, [pc, #712]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d73a:	49b3      	ldr	r1, [pc, #716]	@ (800da08 <pdf_gen_completed_report+0x168c>)
 800d73c:	1980      	adds	r0, r0, r6
 800d73e:	f00c fdbd 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d742:	21fc      	movs	r1, #252	@ 0xfc
 800d744:	0589      	lsls	r1, r1, #22
 800d746:	9103      	str	r1, [sp, #12]
 800d748:	21fd      	movs	r1, #253	@ 0xfd
 800d74a:	0589      	lsls	r1, r1, #22
 800d74c:	9102      	str	r1, [sp, #8]
 800d74e:	21fe      	movs	r1, #254	@ 0xfe
 800d750:	0589      	lsls	r1, r1, #22
 800d752:	9101      	str	r1, [sp, #4]
 800d754:	2108      	movs	r1, #8
 800d756:	48ab      	ldr	r0, [pc, #684]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d758:	4bac      	ldr	r3, [pc, #688]	@ (800da0c <pdf_gen_completed_report+0x1690>)
 800d75a:	1980      	adds	r0, r0, r6
 800d75c:	1ee2      	subs	r2, r4, #3
 800d75e:	9004      	str	r0, [sp, #16]
 800d760:	9100      	str	r1, [sp, #0]
 800d762:	0028      	movs	r0, r5
 800d764:	312f      	adds	r1, #47	@ 0x2f
 800d766:	f00b fa63 	bl	8018c30 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TH1 draw y=%d (%.1f)\r\n", y, th1);
 800d76a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d76c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d76e:	0021      	movs	r1, r4
 800d770:	48a9      	ldr	r0, [pc, #676]	@ (800da18 <pdf_gen_completed_report+0x169c>)
 800d772:	f00c fcf3 	bl	801a15c <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TL2) && (g_temp_axis_min < tl2)) {
 800d776:	4ba7      	ldr	r3, [pc, #668]	@ (800da14 <pdf_gen_completed_report+0x1698>)
 800d778:	2280      	movs	r2, #128	@ 0x80
 800d77a:	699c      	ldr	r4, [r3, #24]
 800d77c:	23c0      	movs	r3, #192	@ 0xc0
 800d77e:	031b      	lsls	r3, r3, #12
 800d780:	4023      	ands	r3, r4
 800d782:	0312      	lsls	r2, r2, #12
 800d784:	4293      	cmp	r3, r2
 800d786:	d100      	bne.n	800d78a <pdf_gen_completed_report+0x140e>
 800d788:	e3dd      	b.n	800df46 <pdf_gen_completed_report+0x1bca>
 800d78a:	4b97      	ldr	r3, [pc, #604]	@ (800d9e8 <pdf_gen_completed_report+0x166c>)
 800d78c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d78e:	681d      	ldr	r5, [r3, #0]
 800d790:	1c29      	adds	r1, r5, #0
 800d792:	f7f2 fec3 	bl	800051c <__aeabi_fcmpgt>
 800d796:	2800      	cmp	r0, #0
 800d798:	d100      	bne.n	800d79c <pdf_gen_completed_report+0x1420>
 800d79a:	e3d4      	b.n	800df46 <pdf_gen_completed_report+0x1bca>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d79c:	1c29      	adds	r1, r5, #0
 800d79e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d7a0:	f7f3 fd2a 	bl	80011f8 <__aeabi_fsub>
 800d7a4:	4991      	ldr	r1, [pc, #580]	@ (800d9ec <pdf_gen_completed_report+0x1670>)
 800d7a6:	f7f3 fbcd 	bl	8000f44 <__aeabi_fmul>
 800d7aa:	1c29      	adds	r1, r5, #0
 800d7ac:	1c04      	adds	r4, r0, #0
 800d7ae:	9808      	ldr	r0, [sp, #32]
 800d7b0:	f7f3 fd22 	bl	80011f8 <__aeabi_fsub>
 800d7b4:	1c01      	adds	r1, r0, #0
 800d7b6:	1c20      	adds	r0, r4, #0
 800d7b8:	f7f3 f9f6 	bl	8000ba8 <__aeabi_fdiv>
 800d7bc:	498c      	ldr	r1, [pc, #560]	@ (800d9f0 <pdf_gen_completed_report+0x1674>)
 800d7be:	f7f3 f801 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(tl2, g_temp_axis_min, temp_highest_scale_up,
 800d7c2:	f7f3 ff93 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d7c6:	2304      	movs	r3, #4
 800d7c8:	22ff      	movs	r2, #255	@ 0xff
 800d7ca:	4d8a      	ldr	r5, [pc, #552]	@ (800d9f4 <pdf_gen_completed_report+0x1678>)
 800d7cc:	4e93      	ldr	r6, [pc, #588]	@ (800da1c <pdf_gen_completed_report+0x16a0>)
 800d7ce:	9305      	str	r3, [sp, #20]
 800d7d0:	4b89      	ldr	r3, [pc, #548]	@ (800d9f8 <pdf_gen_completed_report+0x167c>)
 800d7d2:	0592      	lsls	r2, r2, #22
        y = (int)map_value(tl2, g_temp_axis_min, temp_highest_scale_up,
 800d7d4:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d7d6:	214b      	movs	r1, #75	@ 0x4b
 800d7d8:	9303      	str	r3, [sp, #12]
 800d7da:	9201      	str	r2, [sp, #4]
 800d7dc:	4b88      	ldr	r3, [pc, #544]	@ (800da00 <pdf_gen_completed_report+0x1684>)
 800d7de:	0002      	movs	r2, r0
 800d7e0:	9000      	str	r0, [sp, #0]
 800d7e2:	9604      	str	r6, [sp, #16]
 800d7e4:	0028      	movs	r0, r5
 800d7e6:	9602      	str	r6, [sp, #8]
 800d7e8:	9506      	str	r5, [sp, #24]
 800d7ea:	f00b fa8b 	bl	8018d04 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", tl2);
 800d7ee:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d7f0:	f7f5 ffd2 	bl	8003798 <__aeabi_f2d>
 800d7f4:	900c      	str	r0, [sp, #48]	@ 0x30
 800d7f6:	910d      	str	r1, [sp, #52]	@ 0x34
 800d7f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7fc:	4881      	ldr	r0, [pc, #516]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d7fe:	ad1a      	add	r5, sp, #104	@ 0x68
 800d800:	4981      	ldr	r1, [pc, #516]	@ (800da08 <pdf_gen_completed_report+0x168c>)
 800d802:	1940      	adds	r0, r0, r5
 800d804:	f00c fd5a 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d808:	497b      	ldr	r1, [pc, #492]	@ (800d9f8 <pdf_gen_completed_report+0x167c>)
 800d80a:	487e      	ldr	r0, [pc, #504]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d80c:	9102      	str	r1, [sp, #8]
 800d80e:	2108      	movs	r1, #8
 800d810:	1940      	adds	r0, r0, r5
 800d812:	4b7e      	ldr	r3, [pc, #504]	@ (800da0c <pdf_gen_completed_report+0x1690>)
 800d814:	1ee2      	subs	r2, r4, #3
 800d816:	9004      	str	r0, [sp, #16]
 800d818:	9100      	str	r1, [sp, #0]
 800d81a:	9806      	ldr	r0, [sp, #24]
 800d81c:	312f      	adds	r1, #47	@ 0x2f
 800d81e:	9603      	str	r6, [sp, #12]
 800d820:	9601      	str	r6, [sp, #4]
 800d822:	f00b fa05 	bl	8018c30 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TL2 draw y=%d (%.1f)\r\n", y, tl2);
 800d826:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d828:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d82a:	0021      	movs	r1, r4
 800d82c:	487c      	ldr	r0, [pc, #496]	@ (800da20 <pdf_gen_completed_report+0x16a4>)
 800d82e:	f00c fc95 	bl	801a15c <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TL1) && (g_temp_axis_min < tl1)) {
 800d832:	4b78      	ldr	r3, [pc, #480]	@ (800da14 <pdf_gen_completed_report+0x1698>)
 800d834:	2280      	movs	r2, #128	@ 0x80
 800d836:	699c      	ldr	r4, [r3, #24]
 800d838:	23c0      	movs	r3, #192	@ 0xc0
 800d83a:	029b      	lsls	r3, r3, #10
 800d83c:	4023      	ands	r3, r4
 800d83e:	0292      	lsls	r2, r2, #10
 800d840:	4293      	cmp	r3, r2
 800d842:	d100      	bne.n	800d846 <pdf_gen_completed_report+0x14ca>
 800d844:	e385      	b.n	800df52 <pdf_gen_completed_report+0x1bd6>
 800d846:	4b68      	ldr	r3, [pc, #416]	@ (800d9e8 <pdf_gen_completed_report+0x166c>)
 800d848:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d84a:	681d      	ldr	r5, [r3, #0]
 800d84c:	1c29      	adds	r1, r5, #0
 800d84e:	f7f2 fe65 	bl	800051c <__aeabi_fcmpgt>
 800d852:	2800      	cmp	r0, #0
 800d854:	d100      	bne.n	800d858 <pdf_gen_completed_report+0x14dc>
 800d856:	e37c      	b.n	800df52 <pdf_gen_completed_report+0x1bd6>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d858:	1c29      	adds	r1, r5, #0
 800d85a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d85c:	f7f3 fccc 	bl	80011f8 <__aeabi_fsub>
 800d860:	4962      	ldr	r1, [pc, #392]	@ (800d9ec <pdf_gen_completed_report+0x1670>)
 800d862:	f7f3 fb6f 	bl	8000f44 <__aeabi_fmul>
 800d866:	1c29      	adds	r1, r5, #0
 800d868:	1c04      	adds	r4, r0, #0
 800d86a:	9808      	ldr	r0, [sp, #32]
 800d86c:	f7f3 fcc4 	bl	80011f8 <__aeabi_fsub>
 800d870:	1c01      	adds	r1, r0, #0
 800d872:	1c20      	adds	r0, r4, #0
 800d874:	f7f3 f998 	bl	8000ba8 <__aeabi_fdiv>
 800d878:	495d      	ldr	r1, [pc, #372]	@ (800d9f0 <pdf_gen_completed_report+0x1674>)
 800d87a:	f7f2 ffa3 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(tl1, g_temp_axis_min, temp_highest_scale_up,
 800d87e:	f7f3 ff35 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d882:	2304      	movs	r3, #4
 800d884:	22ff      	movs	r2, #255	@ 0xff
 800d886:	9305      	str	r3, [sp, #20]
 800d888:	23fc      	movs	r3, #252	@ 0xfc
 800d88a:	4d5a      	ldr	r5, [pc, #360]	@ (800d9f4 <pdf_gen_completed_report+0x1678>)
 800d88c:	4e65      	ldr	r6, [pc, #404]	@ (800da24 <pdf_gen_completed_report+0x16a8>)
 800d88e:	059b      	lsls	r3, r3, #22
 800d890:	0592      	lsls	r2, r2, #22
        y = (int)map_value(tl1, g_temp_axis_min, temp_highest_scale_up,
 800d892:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d894:	214b      	movs	r1, #75	@ 0x4b
 800d896:	9303      	str	r3, [sp, #12]
 800d898:	9201      	str	r2, [sp, #4]
 800d89a:	4b59      	ldr	r3, [pc, #356]	@ (800da00 <pdf_gen_completed_report+0x1684>)
 800d89c:	0002      	movs	r2, r0
 800d89e:	9000      	str	r0, [sp, #0]
 800d8a0:	9604      	str	r6, [sp, #16]
 800d8a2:	0028      	movs	r0, r5
 800d8a4:	9602      	str	r6, [sp, #8]
 800d8a6:	9506      	str	r5, [sp, #24]
 800d8a8:	f00b fa2c 	bl	8018d04 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", tl1);
 800d8ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d8ae:	f7f5 ff73 	bl	8003798 <__aeabi_f2d>
 800d8b2:	900c      	str	r0, [sp, #48]	@ 0x30
 800d8b4:	910d      	str	r1, [sp, #52]	@ 0x34
 800d8b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d8b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8ba:	4852      	ldr	r0, [pc, #328]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d8bc:	ad1a      	add	r5, sp, #104	@ 0x68
 800d8be:	4952      	ldr	r1, [pc, #328]	@ (800da08 <pdf_gen_completed_report+0x168c>)
 800d8c0:	1940      	adds	r0, r0, r5
 800d8c2:	f00c fcfb 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d8c6:	21fc      	movs	r1, #252	@ 0xfc
 800d8c8:	0589      	lsls	r1, r1, #22
 800d8ca:	9102      	str	r1, [sp, #8]
 800d8cc:	2108      	movs	r1, #8
 800d8ce:	484d      	ldr	r0, [pc, #308]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d8d0:	4b4e      	ldr	r3, [pc, #312]	@ (800da0c <pdf_gen_completed_report+0x1690>)
 800d8d2:	1940      	adds	r0, r0, r5
 800d8d4:	1ee2      	subs	r2, r4, #3
 800d8d6:	9004      	str	r0, [sp, #16]
 800d8d8:	9100      	str	r1, [sp, #0]
 800d8da:	9806      	ldr	r0, [sp, #24]
 800d8dc:	312f      	adds	r1, #47	@ 0x2f
 800d8de:	9603      	str	r6, [sp, #12]
 800d8e0:	9601      	str	r6, [sp, #4]
 800d8e2:	f00b f9a5 	bl	8018c30 <tpdf_draw_colored_text>
        printf("[PDF][Chart] TL1 draw y=%d (%.1f)\r\n", y, tl1);
 800d8e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d8e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8ea:	0021      	movs	r1, r4
 800d8ec:	484e      	ldr	r0, [pc, #312]	@ (800da28 <pdf_gen_completed_report+0x16ac>)
 800d8ee:	f00c fc35 	bl	801a15c <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_RH2) && (rad_highest_scale_up > rh2)) {
 800d8f2:	4b48      	ldr	r3, [pc, #288]	@ (800da14 <pdf_gen_completed_report+0x1698>)
 800d8f4:	2280      	movs	r2, #128	@ 0x80
 800d8f6:	6999      	ldr	r1, [r3, #24]
 800d8f8:	23c0      	movs	r3, #192	@ 0xc0
 800d8fa:	011b      	lsls	r3, r3, #4
 800d8fc:	400b      	ands	r3, r1
 800d8fe:	0112      	lsls	r2, r2, #4
 800d900:	4293      	cmp	r3, r2
 800d902:	d100      	bne.n	800d906 <pdf_gen_completed_report+0x158a>
 800d904:	e32b      	b.n	800df5e <pdf_gen_completed_report+0x1be2>
 800d906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d908:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d800      	bhi.n	800d910 <pdf_gen_completed_report+0x1594>
 800d90e:	e326      	b.n	800df5e <pdf_gen_completed_report+0x1be2>
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d910:	0010      	movs	r0, r2
 800d912:	f7f3 ff5b 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d916:	4935      	ldr	r1, [pc, #212]	@ (800d9ec <pdf_gen_completed_report+0x1670>)
 800d918:	f7f3 fb14 	bl	8000f44 <__aeabi_fmul>
 800d91c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d91e:	f7f3 f943 	bl	8000ba8 <__aeabi_fdiv>
 800d922:	4933      	ldr	r1, [pc, #204]	@ (800d9f0 <pdf_gen_completed_report+0x1674>)
 800d924:	f7f2 ff4e 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d928:	f7f3 fee0 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d92c:	2304      	movs	r3, #4
 800d92e:	26fd      	movs	r6, #253	@ 0xfd
 800d930:	9305      	str	r3, [sp, #20]
 800d932:	22ff      	movs	r2, #255	@ 0xff
 800d934:	23fe      	movs	r3, #254	@ 0xfe
 800d936:	4d2f      	ldr	r5, [pc, #188]	@ (800d9f4 <pdf_gen_completed_report+0x1678>)
 800d938:	059b      	lsls	r3, r3, #22
 800d93a:	05b6      	lsls	r6, r6, #22
 800d93c:	0592      	lsls	r2, r2, #22
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d93e:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d940:	214b      	movs	r1, #75	@ 0x4b
 800d942:	9304      	str	r3, [sp, #16]
 800d944:	9201      	str	r2, [sp, #4]
 800d946:	4b2e      	ldr	r3, [pc, #184]	@ (800da00 <pdf_gen_completed_report+0x1684>)
 800d948:	0002      	movs	r2, r0
 800d94a:	9000      	str	r0, [sp, #0]
 800d94c:	9603      	str	r6, [sp, #12]
 800d94e:	0028      	movs	r0, r5
 800d950:	9702      	str	r7, [sp, #8]
 800d952:	f00b f9d7 	bl	8018d04 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%u", rh2);
 800d956:	482b      	ldr	r0, [pc, #172]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d958:	ab1a      	add	r3, sp, #104	@ 0x68
 800d95a:	4934      	ldr	r1, [pc, #208]	@ (800da2c <pdf_gen_completed_report+0x16b0>)
 800d95c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d95e:	18c0      	adds	r0, r0, r3
 800d960:	f00c fcac 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3,
 800d964:	4827      	ldr	r0, [pc, #156]	@ (800da04 <pdf_gen_completed_report+0x1688>)
 800d966:	a91a      	add	r1, sp, #104	@ 0x68
 800d968:	1840      	adds	r0, r0, r1
 800d96a:	21fe      	movs	r1, #254	@ 0xfe
 800d96c:	0589      	lsls	r1, r1, #22
 800d96e:	9103      	str	r1, [sp, #12]
 800d970:	2108      	movs	r1, #8
 800d972:	1ee2      	subs	r2, r4, #3
 800d974:	9004      	str	r0, [sp, #16]
 800d976:	9100      	str	r1, [sp, #0]
 800d978:	0028      	movs	r0, r5
 800d97a:	492d      	ldr	r1, [pc, #180]	@ (800da30 <pdf_gen_completed_report+0x16b4>)
 800d97c:	4b23      	ldr	r3, [pc, #140]	@ (800da0c <pdf_gen_completed_report+0x1690>)
 800d97e:	9602      	str	r6, [sp, #8]
 800d980:	9701      	str	r7, [sp, #4]
 800d982:	f00b f955 	bl	8018c30 <tpdf_draw_colored_text>
        printf("[PDF][Chart] RH2 draw y=%d (%u)\r\n", y, rh2);
 800d986:	0021      	movs	r1, r4
 800d988:	482a      	ldr	r0, [pc, #168]	@ (800da34 <pdf_gen_completed_report+0x16b8>)
 800d98a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d98c:	f00c fbe6 	bl	801a15c <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_RH1) && (rad_highest_scale_up > rh1)) {
 800d990:	4b20      	ldr	r3, [pc, #128]	@ (800da14 <pdf_gen_completed_report+0x1698>)
 800d992:	2280      	movs	r2, #128	@ 0x80
 800d994:	6999      	ldr	r1, [r3, #24]
 800d996:	23c0      	movs	r3, #192	@ 0xc0
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	400b      	ands	r3, r1
 800d99c:	0092      	lsls	r2, r2, #2
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d100      	bne.n	800d9a4 <pdf_gen_completed_report+0x1628>
 800d9a2:	e2e2      	b.n	800df6a <pdf_gen_completed_report+0x1bee>
 800d9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9a6:	9a07      	ldr	r2, [sp, #28]
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d800      	bhi.n	800d9ae <pdf_gen_completed_report+0x1632>
 800d9ac:	e2dd      	b.n	800df6a <pdf_gen_completed_report+0x1bee>
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d9ae:	0010      	movs	r0, r2
 800d9b0:	f7f3 ff0c 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d9b4:	490d      	ldr	r1, [pc, #52]	@ (800d9ec <pdf_gen_completed_report+0x1670>)
 800d9b6:	f7f3 fac5 	bl	8000f44 <__aeabi_fmul>
 800d9ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9bc:	f7f3 f8f4 	bl	8000ba8 <__aeabi_fdiv>
 800d9c0:	490b      	ldr	r1, [pc, #44]	@ (800d9f0 <pdf_gen_completed_report+0x1674>)
 800d9c2:	f7f2 feff 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d9c6:	f7f3 fe91 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d9ca:	2304      	movs	r3, #4
 800d9cc:	22fc      	movs	r2, #252	@ 0xfc
 800d9ce:	9305      	str	r3, [sp, #20]
 800d9d0:	23fe      	movs	r3, #254	@ 0xfe
 800d9d2:	4d08      	ldr	r5, [pc, #32]	@ (800d9f4 <pdf_gen_completed_report+0x1678>)
 800d9d4:	4e18      	ldr	r6, [pc, #96]	@ (800da38 <pdf_gen_completed_report+0x16bc>)
 800d9d6:	059b      	lsls	r3, r3, #22
 800d9d8:	0592      	lsls	r2, r2, #22
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d9da:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d9dc:	214b      	movs	r1, #75	@ 0x4b
 800d9de:	9304      	str	r3, [sp, #16]
 800d9e0:	9202      	str	r2, [sp, #8]
 800d9e2:	9301      	str	r3, [sp, #4]
 800d9e4:	0002      	movs	r2, r0
 800d9e6:	e029      	b.n	800da3c <pdf_gen_completed_report+0x16c0>
 800d9e8:	20000200 	.word	0x20000200
 800d9ec:	437a0000 	.word	0x437a0000
 800d9f0:	42b00000 	.word	0x42b00000
 800d9f4:	20003090 	.word	0x20003090
 800d9f8:	3f666666 	.word	0x3f666666
 800d9fc:	3ecccccd 	.word	0x3ecccccd
 800da00:	0000020d 	.word	0x0000020d
 800da04:	000008e8 	.word	0x000008e8
 800da08:	0801fcee 	.word	0x0801fcee
 800da0c:	0801f59e 	.word	0x0801f59e
 800da10:	0801fd0c 	.word	0x0801fd0c
 800da14:	20000b50 	.word	0x20000b50
 800da18:	0801fd53 	.word	0x0801fd53
 800da1c:	3f19999a 	.word	0x3f19999a
 800da20:	0801fd9a 	.word	0x0801fd9a
 800da24:	3dcccccd 	.word	0x3dcccccd
 800da28:	0801fde1 	.word	0x0801fde1
 800da2c:	0801fcfc 	.word	0x0801fcfc
 800da30:	00000212 	.word	0x00000212
 800da34:	0801fe28 	.word	0x0801fe28
 800da38:	3f4ccccd 	.word	0x3f4ccccd
 800da3c:	4bfa      	ldr	r3, [pc, #1000]	@ (800de28 <pdf_gen_completed_report+0x1aac>)
 800da3e:	9000      	str	r0, [sp, #0]
 800da40:	9603      	str	r6, [sp, #12]
 800da42:	0028      	movs	r0, r5
 800da44:	f00b f95e 	bl	8018d04 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%u", rh1);
 800da48:	48f8      	ldr	r0, [pc, #992]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800da4a:	ab1a      	add	r3, sp, #104	@ 0x68
 800da4c:	49f8      	ldr	r1, [pc, #992]	@ (800de30 <pdf_gen_completed_report+0x1ab4>)
 800da4e:	9a07      	ldr	r2, [sp, #28]
 800da50:	18c0      	adds	r0, r0, r3
 800da52:	f00c fc33 	bl	801a2bc <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3,
 800da56:	48f5      	ldr	r0, [pc, #980]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800da58:	a91a      	add	r1, sp, #104	@ 0x68
 800da5a:	1840      	adds	r0, r0, r1
 800da5c:	21fe      	movs	r1, #254	@ 0xfe
 800da5e:	0589      	lsls	r1, r1, #22
 800da60:	9103      	str	r1, [sp, #12]
 800da62:	21fc      	movs	r1, #252	@ 0xfc
 800da64:	0589      	lsls	r1, r1, #22
 800da66:	9101      	str	r1, [sp, #4]
 800da68:	2108      	movs	r1, #8
 800da6a:	1ee2      	subs	r2, r4, #3
 800da6c:	9004      	str	r0, [sp, #16]
 800da6e:	9100      	str	r1, [sp, #0]
 800da70:	0028      	movs	r0, r5
 800da72:	49f0      	ldr	r1, [pc, #960]	@ (800de34 <pdf_gen_completed_report+0x1ab8>)
 800da74:	4bf0      	ldr	r3, [pc, #960]	@ (800de38 <pdf_gen_completed_report+0x1abc>)
 800da76:	9602      	str	r6, [sp, #8]
 800da78:	f00b f8da 	bl	8018c30 <tpdf_draw_colored_text>
        printf("[PDF][Chart] RH1 draw y=%d (%u)\r\n", y, rh1);
 800da7c:	0021      	movs	r1, r4
 800da7e:	48ef      	ldr	r0, [pc, #956]	@ (800de3c <pdf_gen_completed_report+0x1ac0>)
 800da80:	9a07      	ldr	r2, [sp, #28]
 800da82:	f00c fb6b 	bl	801a15c <iprintf>
    for (int i = 0; i < record_nums; i++) {
 800da86:	2300      	movs	r3, #0
    uint16_t chunk_start_index = 0;
 800da88:	001e      	movs	r6, r3
    uint16_t buffer_count =0;
 800da8a:	001c      	movs	r4, r3
    for (int i = 0; i < record_nums; i++) {
 800da8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800da8e:	2254      	movs	r2, #84	@ 0x54
 800da90:	466b      	mov	r3, sp
 800da92:	189b      	adds	r3, r3, r2
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	9307      	str	r3, [sp, #28]
 800da98:	9a07      	ldr	r2, [sp, #28]
 800da9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da9c:	4293      	cmp	r3, r2
 800da9e:	da00      	bge.n	800daa2 <pdf_gen_completed_report+0x1726>
 800daa0:	e269      	b.n	800df76 <pdf_gen_completed_report+0x1bfa>
    if (buffer_count > 0) {
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	d020      	beq.n	800dae8 <pdf_gen_completed_report+0x176c>
        pdf_chart_plot_data(file_p, *y_pos, tmp_temper, chunk_start_index, buffer_count, record_nums, 1.0f, 0.0f, 0.0f, g_temp_axis_min , temp_highest_scale_up);
 800daa6:	25fe      	movs	r5, #254	@ 0xfe
 800daa8:	20b3      	movs	r0, #179	@ 0xb3
 800daaa:	9b08      	ldr	r3, [sp, #32]
 800daac:	05ad      	lsls	r5, r5, #22
 800daae:	9304      	str	r3, [sp, #16]
 800dab0:	4be3      	ldr	r3, [pc, #908]	@ (800de40 <pdf_gen_completed_report+0x1ac4>)
 800dab2:	a974      	add	r1, sp, #464	@ 0x1d0
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	0040      	lsls	r0, r0, #1
 800dab8:	9303      	str	r3, [sp, #12]
 800daba:	9200      	str	r2, [sp, #0]
 800dabc:	0023      	movs	r3, r4
 800dabe:	0032      	movs	r2, r6
 800dac0:	9702      	str	r7, [sp, #8]
 800dac2:	9501      	str	r5, [sp, #4]
 800dac4:	f7fe f9da 	bl	800be7c <pdf_chart_plot_data.constprop.0>
        pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800dac8:	49d8      	ldr	r1, [pc, #864]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800daca:	a81a      	add	r0, sp, #104	@ 0x68
 800dacc:	1809      	adds	r1, r1, r0
 800dace:	20b3      	movs	r0, #179	@ 0xb3
 800dad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dad2:	0032      	movs	r2, r6
 800dad4:	9304      	str	r3, [sp, #16]
 800dad6:	9b07      	ldr	r3, [sp, #28]
 800dad8:	9703      	str	r7, [sp, #12]
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	9502      	str	r5, [sp, #8]
 800dade:	0023      	movs	r3, r4
 800dae0:	9701      	str	r7, [sp, #4]
 800dae2:	0040      	lsls	r0, r0, #1
 800dae4:	f7fe f9ca 	bl	800be7c <pdf_chart_plot_data.constprop.0>
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800dae8:	2506      	movs	r5, #6
 800daea:	22b1      	movs	r2, #177	@ 0xb1
 800daec:	2196      	movs	r1, #150	@ 0x96
    const UINT total_pages = current_page +1;
 800daee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800daf0:	4cd1      	ldr	r4, [pc, #836]	@ (800de38 <pdf_gen_completed_report+0x1abc>)
    const UINT total_pages = current_page +1;
 800daf2:	3301      	adds	r3, #1
 800daf4:	9308      	str	r3, [sp, #32]
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800daf6:	4bd3      	ldr	r3, [pc, #844]	@ (800de44 <pdf_gen_completed_report+0x1ac8>)
 800daf8:	9500      	str	r5, [sp, #0]
 800dafa:	9307      	str	r3, [sp, #28]
 800dafc:	4bd2      	ldr	r3, [pc, #840]	@ (800de48 <pdf_gen_completed_report+0x1acc>)
 800dafe:	0052      	lsls	r2, r2, #1
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	0049      	lsls	r1, r1, #1
 800db04:	0023      	movs	r3, r4
 800db06:	9807      	ldr	r0, [sp, #28]
 800db08:	9703      	str	r7, [sp, #12]
 800db0a:	9702      	str	r7, [sp, #8]
 800db0c:	9701      	str	r7, [sp, #4]
 800db0e:	f00b f88f 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, (CHART_X_START + CHART_WIDTH /2 + 40),  y + 18, (CHART_X_START + CHART_WIDTH /2 + 40 + 15), y + 18, 1.0, 1.0, 0, 0);
 800db12:	23fe      	movs	r3, #254	@ 0xfe
 800db14:	26b2      	movs	r6, #178	@ 0xb2
 800db16:	059b      	lsls	r3, r3, #22
 800db18:	9302      	str	r3, [sp, #8]
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	21aa      	movs	r1, #170	@ 0xaa
 800db1e:	2364      	movs	r3, #100	@ 0x64
 800db20:	0076      	lsls	r6, r6, #1
 800db22:	0032      	movs	r2, r6
 800db24:	9600      	str	r6, [sp, #0]
 800db26:	33ff      	adds	r3, #255	@ 0xff
 800db28:	0049      	lsls	r1, r1, #1
 800db2a:	9807      	ldr	r0, [sp, #28]
 800db2c:	9704      	str	r7, [sp, #16]
 800db2e:	9703      	str	r7, [sp, #12]
 800db30:	f00b f8b4 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2), y + 8, "F2", 6, 0, 0, 0, "Rad");
 800db34:	22ad      	movs	r2, #173	@ 0xad
 800db36:	2196      	movs	r1, #150	@ 0x96
 800db38:	4bc4      	ldr	r3, [pc, #784]	@ (800de4c <pdf_gen_completed_report+0x1ad0>)
 800db3a:	9500      	str	r5, [sp, #0]
 800db3c:	9304      	str	r3, [sp, #16]
 800db3e:	0052      	lsls	r2, r2, #1
 800db40:	0023      	movs	r3, r4
 800db42:	0049      	lsls	r1, r1, #1
 800db44:	9807      	ldr	r0, [sp, #28]
 800db46:	9703      	str	r7, [sp, #12]
 800db48:	9702      	str	r7, [sp, #8]
 800db4a:	9701      	str	r7, [sp, #4]
 800db4c:	f00b f870 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, (CHART_X_START + CHART_WIDTH /2 + 40),  y + 10, (CHART_X_START + CHART_WIDTH /2 + 40 + 15), y + 10, 1.0, 0, 0, 1.0);
 800db50:	23fe      	movs	r3, #254	@ 0xfe
 800db52:	22ae      	movs	r2, #174	@ 0xae
 800db54:	059b      	lsls	r3, r3, #22
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	21aa      	movs	r1, #170	@ 0xaa
 800db5c:	2364      	movs	r3, #100	@ 0x64
 800db5e:	0052      	lsls	r2, r2, #1
 800db60:	9200      	str	r2, [sp, #0]
 800db62:	33ff      	adds	r3, #255	@ 0xff
 800db64:	0049      	lsls	r1, r1, #1
 800db66:	9807      	ldr	r0, [sp, #28]
 800db68:	9703      	str	r7, [sp, #12]
 800db6a:	9702      	str	r7, [sp, #8]
 800db6c:	f00b f896 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "TH2");
 800db70:	22b1      	movs	r2, #177	@ 0xb1
 800db72:	2178      	movs	r1, #120	@ 0x78
 800db74:	4bb6      	ldr	r3, [pc, #728]	@ (800de50 <pdf_gen_completed_report+0x1ad4>)
 800db76:	9500      	str	r5, [sp, #0]
 800db78:	9304      	str	r3, [sp, #16]
 800db7a:	0052      	lsls	r2, r2, #1
 800db7c:	0023      	movs	r3, r4
 800db7e:	31ff      	adds	r1, #255	@ 0xff
 800db80:	9807      	ldr	r0, [sp, #28]
 800db82:	9703      	str	r7, [sp, #12]
 800db84:	9702      	str	r7, [sp, #8]
 800db86:	9701      	str	r7, [sp, #4]
 800db88:	f00b f852 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.9, 0.4, 0.0);
 800db8c:	4bb1      	ldr	r3, [pc, #708]	@ (800de54 <pdf_gen_completed_report+0x1ad8>)
 800db8e:	49b2      	ldr	r1, [pc, #712]	@ (800de58 <pdf_gen_completed_report+0x1adc>)
 800db90:	9303      	str	r3, [sp, #12]
 800db92:	23fe      	movs	r3, #254	@ 0xfe
 800db94:	059b      	lsls	r3, r3, #22
 800db96:	9102      	str	r1, [sp, #8]
 800db98:	9301      	str	r3, [sp, #4]
 800db9a:	21c3      	movs	r1, #195	@ 0xc3
 800db9c:	2396      	movs	r3, #150	@ 0x96
 800db9e:	0032      	movs	r2, r6
 800dba0:	9600      	str	r6, [sp, #0]
 800dba2:	33ff      	adds	r3, #255	@ 0xff
 800dba4:	0049      	lsls	r1, r1, #1
 800dba6:	9807      	ldr	r0, [sp, #28]
 800dba8:	9704      	str	r7, [sp, #16]
 800dbaa:	f00b f877 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "TH1");
 800dbae:	22ad      	movs	r2, #173	@ 0xad
 800dbb0:	2178      	movs	r1, #120	@ 0x78
 800dbb2:	4baa      	ldr	r3, [pc, #680]	@ (800de5c <pdf_gen_completed_report+0x1ae0>)
 800dbb4:	9500      	str	r5, [sp, #0]
 800dbb6:	9304      	str	r3, [sp, #16]
 800dbb8:	0052      	lsls	r2, r2, #1
 800dbba:	0023      	movs	r3, r4
 800dbbc:	31ff      	adds	r1, #255	@ 0xff
 800dbbe:	9807      	ldr	r0, [sp, #28]
 800dbc0:	9703      	str	r7, [sp, #12]
 800dbc2:	9702      	str	r7, [sp, #8]
 800dbc4:	9701      	str	r7, [sp, #4]
 800dbc6:	f00b f833 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 1.0, 0.75, 0.5);
 800dbca:	21fc      	movs	r1, #252	@ 0xfc
 800dbcc:	23fe      	movs	r3, #254	@ 0xfe
 800dbce:	0589      	lsls	r1, r1, #22
 800dbd0:	059b      	lsls	r3, r3, #22
 800dbd2:	20fd      	movs	r0, #253	@ 0xfd
 800dbd4:	22ae      	movs	r2, #174	@ 0xae
 800dbd6:	9104      	str	r1, [sp, #16]
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	21c3      	movs	r1, #195	@ 0xc3
 800dbde:	2396      	movs	r3, #150	@ 0x96
 800dbe0:	0052      	lsls	r2, r2, #1
 800dbe2:	0580      	lsls	r0, r0, #22
 800dbe4:	9003      	str	r0, [sp, #12]
 800dbe6:	9200      	str	r2, [sp, #0]
 800dbe8:	33ff      	adds	r3, #255	@ 0xff
 800dbea:	0049      	lsls	r1, r1, #1
 800dbec:	9807      	ldr	r0, [sp, #28]
 800dbee:	f00b f855 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "TL2");
 800dbf2:	22b1      	movs	r2, #177	@ 0xb1
 800dbf4:	21aa      	movs	r1, #170	@ 0xaa
 800dbf6:	4b9a      	ldr	r3, [pc, #616]	@ (800de60 <pdf_gen_completed_report+0x1ae4>)
 800dbf8:	9500      	str	r5, [sp, #0]
 800dbfa:	9304      	str	r3, [sp, #16]
 800dbfc:	0052      	lsls	r2, r2, #1
 800dbfe:	0023      	movs	r3, r4
 800dc00:	31ff      	adds	r1, #255	@ 0xff
 800dc02:	9807      	ldr	r0, [sp, #28]
 800dc04:	9703      	str	r7, [sp, #12]
 800dc06:	9702      	str	r7, [sp, #8]
 800dc08:	9701      	str	r7, [sp, #4]
 800dc0a:	f00b f811 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.6,0.9,0.6);
 800dc0e:	4b95      	ldr	r3, [pc, #596]	@ (800de64 <pdf_gen_completed_report+0x1ae8>)
 800dc10:	21dc      	movs	r1, #220	@ 0xdc
 800dc12:	9304      	str	r3, [sp, #16]
 800dc14:	9302      	str	r3, [sp, #8]
 800dc16:	23fe      	movs	r3, #254	@ 0xfe
 800dc18:	059b      	lsls	r3, r3, #22
 800dc1a:	9301      	str	r3, [sp, #4]
 800dc1c:	23c8      	movs	r3, #200	@ 0xc8
 800dc1e:	488e      	ldr	r0, [pc, #568]	@ (800de58 <pdf_gen_completed_report+0x1adc>)
 800dc20:	0032      	movs	r2, r6
 800dc22:	9003      	str	r0, [sp, #12]
 800dc24:	9600      	str	r6, [sp, #0]
 800dc26:	33ff      	adds	r3, #255	@ 0xff
 800dc28:	0049      	lsls	r1, r1, #1
 800dc2a:	9807      	ldr	r0, [sp, #28]
 800dc2c:	f00b f836 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "TL1");
 800dc30:	22ad      	movs	r2, #173	@ 0xad
 800dc32:	21aa      	movs	r1, #170	@ 0xaa
 800dc34:	4b8c      	ldr	r3, [pc, #560]	@ (800de68 <pdf_gen_completed_report+0x1aec>)
 800dc36:	9500      	str	r5, [sp, #0]
 800dc38:	9304      	str	r3, [sp, #16]
 800dc3a:	0052      	lsls	r2, r2, #1
 800dc3c:	0023      	movs	r3, r4
 800dc3e:	31ff      	adds	r1, #255	@ 0xff
 800dc40:	9807      	ldr	r0, [sp, #28]
 800dc42:	9703      	str	r7, [sp, #12]
 800dc44:	9702      	str	r7, [sp, #8]
 800dc46:	9701      	str	r7, [sp, #4]
 800dc48:	f00a fff2 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 0.1,0.5,0.1);
 800dc4c:	4b87      	ldr	r3, [pc, #540]	@ (800de6c <pdf_gen_completed_report+0x1af0>)
 800dc4e:	21fc      	movs	r1, #252	@ 0xfc
 800dc50:	9304      	str	r3, [sp, #16]
 800dc52:	9302      	str	r3, [sp, #8]
 800dc54:	23fe      	movs	r3, #254	@ 0xfe
 800dc56:	0589      	lsls	r1, r1, #22
 800dc58:	059b      	lsls	r3, r3, #22
 800dc5a:	22ae      	movs	r2, #174	@ 0xae
 800dc5c:	9103      	str	r1, [sp, #12]
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	21dc      	movs	r1, #220	@ 0xdc
 800dc62:	23c8      	movs	r3, #200	@ 0xc8
 800dc64:	0052      	lsls	r2, r2, #1
 800dc66:	9200      	str	r2, [sp, #0]
 800dc68:	33ff      	adds	r3, #255	@ 0xff
 800dc6a:	0049      	lsls	r1, r1, #1
 800dc6c:	9807      	ldr	r0, [sp, #28]
 800dc6e:	f00b f815 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "RH2");
 800dc72:	22b1      	movs	r2, #177	@ 0xb1
 800dc74:	21dc      	movs	r1, #220	@ 0xdc
 800dc76:	4b7e      	ldr	r3, [pc, #504]	@ (800de70 <pdf_gen_completed_report+0x1af4>)
 800dc78:	9500      	str	r5, [sp, #0]
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	0052      	lsls	r2, r2, #1
 800dc7e:	0023      	movs	r3, r4
 800dc80:	31ff      	adds	r1, #255	@ 0xff
 800dc82:	9807      	ldr	r0, [sp, #28]
 800dc84:	9703      	str	r7, [sp, #12]
 800dc86:	9702      	str	r7, [sp, #8]
 800dc88:	9701      	str	r7, [sp, #4]
 800dc8a:	f00a ffd1 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.0,0.75,1.0);
 800dc8e:	23fe      	movs	r3, #254	@ 0xfe
 800dc90:	20fd      	movs	r0, #253	@ 0xfd
 800dc92:	059b      	lsls	r3, r3, #22
 800dc94:	9304      	str	r3, [sp, #16]
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	21f5      	movs	r1, #245	@ 0xf5
 800dc9a:	23fa      	movs	r3, #250	@ 0xfa
 800dc9c:	0580      	lsls	r0, r0, #22
 800dc9e:	0032      	movs	r2, r6
 800dca0:	9003      	str	r0, [sp, #12]
 800dca2:	9600      	str	r6, [sp, #0]
 800dca4:	33ff      	adds	r3, #255	@ 0xff
 800dca6:	0049      	lsls	r1, r1, #1
 800dca8:	9807      	ldr	r0, [sp, #28]
 800dcaa:	9702      	str	r7, [sp, #8]
 800dcac:	f00a fff6 	bl	8018c9c <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "RH1");
 800dcb0:	22ad      	movs	r2, #173	@ 0xad
 800dcb2:	21dc      	movs	r1, #220	@ 0xdc
 800dcb4:	4b6f      	ldr	r3, [pc, #444]	@ (800de74 <pdf_gen_completed_report+0x1af8>)
 800dcb6:	9500      	str	r5, [sp, #0]
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	0052      	lsls	r2, r2, #1
 800dcbc:	0023      	movs	r3, r4
 800dcbe:	31ff      	adds	r1, #255	@ 0xff
 800dcc0:	9807      	ldr	r0, [sp, #28]
 800dcc2:	9703      	str	r7, [sp, #12]
 800dcc4:	9702      	str	r7, [sp, #8]
 800dcc6:	9701      	str	r7, [sp, #4]
 800dcc8:	f00a ffb2 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 0.5,0.8,1.0);
 800dccc:	21fc      	movs	r1, #252	@ 0xfc
 800dcce:	4b6a      	ldr	r3, [pc, #424]	@ (800de78 <pdf_gen_completed_report+0x1afc>)
 800dcd0:	0589      	lsls	r1, r1, #22
 800dcd2:	26fe      	movs	r6, #254	@ 0xfe
 800dcd4:	22ae      	movs	r2, #174	@ 0xae
 800dcd6:	9303      	str	r3, [sp, #12]
 800dcd8:	9102      	str	r1, [sp, #8]
 800dcda:	23fa      	movs	r3, #250	@ 0xfa
 800dcdc:	21f5      	movs	r1, #245	@ 0xf5
 800dcde:	05b6      	lsls	r6, r6, #22
 800dce0:	0052      	lsls	r2, r2, #1
 800dce2:	9604      	str	r6, [sp, #16]
 800dce4:	9601      	str	r6, [sp, #4]
 800dce6:	9200      	str	r2, [sp, #0]
 800dce8:	33ff      	adds	r3, #255	@ 0xff
 800dcea:	0049      	lsls	r1, r1, #1
 800dcec:	9807      	ldr	r0, [sp, #28]
 800dcee:	f00a ffd5 	bl	8018c9c <tpdf_draw_line>
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800dcf2:	23ff      	movs	r3, #255	@ 0xff
 800dcf4:	352c      	adds	r5, #44	@ 0x2c
 800dcf6:	059b      	lsls	r3, r3, #22
 800dcf8:	002a      	movs	r2, r5
 800dcfa:	0029      	movs	r1, r5
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	9500      	str	r5, [sp, #0]
 800dd00:	4b5e      	ldr	r3, [pc, #376]	@ (800de7c <pdf_gen_completed_report+0x1b00>)
 800dd02:	9807      	ldr	r0, [sp, #28]
 800dd04:	9704      	str	r7, [sp, #16]
 800dd06:	9703      	str	r7, [sp, #12]
 800dd08:	9702      	str	r7, [sp, #8]
 800dd0a:	f00a ffc7 	bl	8018c9c <tpdf_draw_line>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dd0e:	9603      	str	r6, [sp, #12]
 800dd10:	2609      	movs	r6, #9
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800dd12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dd14:	4c5a      	ldr	r4, [pc, #360]	@ (800de80 <pdf_gen_completed_report+0x1b04>)
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800dd16:	181b      	adds	r3, r3, r0
 800dd18:	9309      	str	r3, [sp, #36]	@ 0x24
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dd1a:	4b5a      	ldr	r3, [pc, #360]	@ (800de84 <pdf_gen_completed_report+0x1b08>)
 800dd1c:	0029      	movs	r1, r5
 800dd1e:	2228      	movs	r2, #40	@ 0x28
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	9600      	str	r6, [sp, #0]
 800dd24:	0023      	movs	r3, r4
 800dd26:	9807      	ldr	r0, [sp, #28]
 800dd28:	9702      	str	r7, [sp, #8]
 800dd2a:	9701      	str	r7, [sp, #4]
 800dd2c:	f00a ff80 	bl	8018c30 <tpdf_draw_colored_text>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800dd30:	4b55      	ldr	r3, [pc, #340]	@ (800de88 <pdf_gen_completed_report+0x1b0c>)
 800dd32:	21fa      	movs	r1, #250	@ 0xfa
 800dd34:	9304      	str	r3, [sp, #16]
 800dd36:	23fe      	movs	r3, #254	@ 0xfe
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dd38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800dd3a:	059b      	lsls	r3, r3, #22
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800dd3c:	1815      	adds	r5, r2, r0
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800dd3e:	9303      	str	r3, [sp, #12]
 800dd40:	2228      	movs	r2, #40	@ 0x28
 800dd42:	0023      	movs	r3, r4
 800dd44:	9600      	str	r6, [sp, #0]
 800dd46:	31ff      	adds	r1, #255	@ 0xff
 800dd48:	9807      	ldr	r0, [sp, #28]
 800dd4a:	9702      	str	r7, [sp, #8]
 800dd4c:	9701      	str	r7, [sp, #4]
 800dd4e:	f00a ff6f 	bl	8018c30 <tpdf_draw_colored_text>
    tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,stream_len,&pdf_monitor);
 800dd52:	4c4e      	ldr	r4, [pc, #312]	@ (800de8c <pdf_gen_completed_report+0x1b10>)
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800dd54:	182a      	adds	r2, r5, r0
    tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,stream_len,&pdf_monitor);
 800dd56:	0023      	movs	r3, r4
 800dd58:	210d      	movs	r1, #13
 800dd5a:	9807      	ldr	r0, [sp, #28]
 800dd5c:	f00b f84a 	bl	8018df4 <tpdf_end_new_stream_obj>
    sprintf(content_buffer, "<<\n/Type /Pages\n/Count %d\n/Kids [ %d 0 R", total_pages +1 ,TPDF_OBJ_NUM_PAGE_1ST);
 800dd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd62:	4832      	ldr	r0, [pc, #200]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800dd64:	ad1a      	add	r5, sp, #104	@ 0x68
 800dd66:	1c9a      	adds	r2, r3, #2
 800dd68:	1940      	adds	r0, r0, r5
 800dd6a:	230a      	movs	r3, #10
 800dd6c:	4948      	ldr	r1, [pc, #288]	@ (800de90 <pdf_gen_completed_report+0x1b14>)
 800dd6e:	f00c faa5 	bl	801a2bc <siprintf>
    for (int i = 0; i < total_pages; i++) {
 800dd72:	2500      	movs	r5, #0
        sprintf(temp_ref, " %d 0 R", page_obj);
 800dd74:	3601      	adds	r6, #1
 800dd76:	0032      	movs	r2, r6
 800dd78:	436a      	muls	r2, r5
 800dd7a:	4946      	ldr	r1, [pc, #280]	@ (800de94 <pdf_gen_completed_report+0x1b18>)
 800dd7c:	3214      	adds	r2, #20
 800dd7e:	a834      	add	r0, sp, #208	@ 0xd0
 800dd80:	f00c fa9c 	bl	801a2bc <siprintf>
        strcat(content_buffer, temp_ref);
 800dd84:	4b29      	ldr	r3, [pc, #164]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800dd86:	aa1a      	add	r2, sp, #104	@ 0x68
 800dd88:	189b      	adds	r3, r3, r2
 800dd8a:	0018      	movs	r0, r3
 800dd8c:	a934      	add	r1, sp, #208	@ 0xd0
 800dd8e:	f00c fbb9 	bl	801a504 <strcat>
    for (int i = 0; i < total_pages; i++) {
 800dd92:	9b08      	ldr	r3, [sp, #32]
 800dd94:	3501      	adds	r5, #1
 800dd96:	42ab      	cmp	r3, r5
 800dd98:	d8ed      	bhi.n	800dd76 <pdf_gen_completed_report+0x19fa>
    sprintf(temp_ref,"]\n/MediaBox [0 0 %d %d]\n>>",PDF_PAGE_WIDTH_A4,PDF_PAGE_HEIGHT_A4);
 800dd9a:	493f      	ldr	r1, [pc, #252]	@ (800de98 <pdf_gen_completed_report+0x1b1c>)
 800dd9c:	4b3f      	ldr	r3, [pc, #252]	@ (800de9c <pdf_gen_completed_report+0x1b20>)
 800dd9e:	4a40      	ldr	r2, [pc, #256]	@ (800dea0 <pdf_gen_completed_report+0x1b24>)
 800dda0:	a834      	add	r0, sp, #208	@ 0xd0
 800dda2:	f00c fa8b 	bl	801a2bc <siprintf>
    strcat(content_buffer, temp_ref);
 800dda6:	4b21      	ldr	r3, [pc, #132]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800dda8:	aa1a      	add	r2, sp, #104	@ 0x68
 800ddaa:	189b      	adds	r3, r3, r2
 800ddac:	0018      	movs	r0, r3
 800ddae:	a934      	add	r1, sp, #208	@ 0xd0
 800ddb0:	f00c fba8 	bl	801a504 <strcat>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_PAGES_KID, content_buffer, &pdf_monitor);
 800ddb4:	4a1d      	ldr	r2, [pc, #116]	@ (800de2c <pdf_gen_completed_report+0x1ab0>)
 800ddb6:	a91a      	add	r1, sp, #104	@ 0x68
 800ddb8:	1852      	adds	r2, r2, r1
 800ddba:	0023      	movs	r3, r4
 800ddbc:	2103      	movs	r1, #3
 800ddbe:	9807      	ldr	r0, [sp, #28]
 800ddc0:	f00a ffd6 	bl	8018d70 <tpdf_add_new_obj>
    ULONG xref_offset = f_size(&pdf_file);
 800ddc4:	9b07      	ldr	r3, [sp, #28]
    sprintf(work_buffer, "0 %u\n", (unsigned)(pdf_monitor.num_objs + 1));
 800ddc6:	4d37      	ldr	r5, [pc, #220]	@ (800dea4 <pdf_gen_completed_report+0x1b28>)
    fatfs_write_string(&pdf_file, "xref\n");
 800ddc8:	0019      	movs	r1, r3
 800ddca:	4837      	ldr	r0, [pc, #220]	@ (800dea8 <pdf_gen_completed_report+0x1b2c>)
    ULONG xref_offset = f_size(&pdf_file);
 800ddcc:	68df      	ldr	r7, [r3, #12]
    fatfs_write_string(&pdf_file, "xref\n");
 800ddce:	f007 fe63 	bl	8015a98 <f_puts>
    sprintf(work_buffer, "0 %u\n", (unsigned)(pdf_monitor.num_objs + 1));
 800ddd2:	5962      	ldr	r2, [r4, r5]
 800ddd4:	4935      	ldr	r1, [pc, #212]	@ (800deac <pdf_gen_completed_report+0x1b30>)
 800ddd6:	3201      	adds	r2, #1
 800ddd8:	a874      	add	r0, sp, #464	@ 0x1d0
 800ddda:	f00c fa6f 	bl	801a2bc <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800ddde:	9907      	ldr	r1, [sp, #28]
 800dde0:	a874      	add	r0, sp, #464	@ 0x1d0
 800dde2:	f007 fe59 	bl	8015a98 <f_puts>
    fatfs_write_string(&pdf_file, "0000000000 65535 f \n");
 800dde6:	4832      	ldr	r0, [pc, #200]	@ (800deb0 <pdf_gen_completed_report+0x1b34>)
 800dde8:	9907      	ldr	r1, [sp, #28]
 800ddea:	f007 fe55 	bl	8015a98 <f_puts>
    for (unsigned i = 0; i < (unsigned)pdf_monitor.num_objs; i++) {
 800ddee:	2600      	movs	r6, #0
 800ddf0:	5963      	ldr	r3, [r4, r5]
 800ddf2:	429e      	cmp	r6, r3
 800ddf4:	d200      	bcs.n	800ddf8 <pdf_gen_completed_report+0x1a7c>
 800ddf6:	e1a6      	b.n	800e146 <pdf_gen_completed_report+0x1dca>
    fatfs_write_string(&pdf_file, "trailer\n");
 800ddf8:	9907      	ldr	r1, [sp, #28]
 800ddfa:	482e      	ldr	r0, [pc, #184]	@ (800deb4 <pdf_gen_completed_report+0x1b38>)
 800ddfc:	f007 fe4c 	bl	8015a98 <f_puts>
    sprintf(work_buffer, "<< /Size %u /Root %u 0 R >>\n",
 800de00:	5962      	ldr	r2, [r4, r5]
 800de02:	2302      	movs	r3, #2
 800de04:	3201      	adds	r2, #1
 800de06:	492c      	ldr	r1, [pc, #176]	@ (800deb8 <pdf_gen_completed_report+0x1b3c>)
 800de08:	a874      	add	r0, sp, #464	@ 0x1d0
 800de0a:	f00c fa57 	bl	801a2bc <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800de0e:	9907      	ldr	r1, [sp, #28]
 800de10:	a874      	add	r0, sp, #464	@ 0x1d0
 800de12:	f007 fe41 	bl	8015a98 <f_puts>
    sprintf(work_buffer, "startxref\n%lu\n%%EOF\n", (unsigned long)xref_offset);
 800de16:	003a      	movs	r2, r7
 800de18:	4928      	ldr	r1, [pc, #160]	@ (800debc <pdf_gen_completed_report+0x1b40>)
 800de1a:	a874      	add	r0, sp, #464	@ 0x1d0
 800de1c:	f00c fa4e 	bl	801a2bc <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800de20:	9907      	ldr	r1, [sp, #28]
 800de22:	a874      	add	r0, sp, #464	@ 0x1d0
 800de24:	e04c      	b.n	800dec0 <pdf_gen_completed_report+0x1b44>
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	0000020d 	.word	0x0000020d
 800de2c:	000008e8 	.word	0x000008e8
 800de30:	0801fcfc 	.word	0x0801fcfc
 800de34:	00000212 	.word	0x00000212
 800de38:	0801f59e 	.word	0x0801f59e
 800de3c:	0801fe6d 	.word	0x0801fe6d
 800de40:	20000200 	.word	0x20000200
 800de44:	20003090 	.word	0x20003090
 800de48:	0801feb2 	.word	0x0801feb2
 800de4c:	0801febe 	.word	0x0801febe
 800de50:	0801fec2 	.word	0x0801fec2
 800de54:	3ecccccd 	.word	0x3ecccccd
 800de58:	3f666666 	.word	0x3f666666
 800de5c:	0801fec6 	.word	0x0801fec6
 800de60:	0801feca 	.word	0x0801feca
 800de64:	3f19999a 	.word	0x3f19999a
 800de68:	0801fece 	.word	0x0801fece
 800de6c:	3dcccccd 	.word	0x3dcccccd
 800de70:	0801fed2 	.word	0x0801fed2
 800de74:	0801fed6 	.word	0x0801fed6
 800de78:	3f4ccccd 	.word	0x3f4ccccd
 800de7c:	00000221 	.word	0x00000221
 800de80:	0801f51e 	.word	0x0801f51e
 800de84:	0801f521 	.word	0x0801f521
 800de88:	0801f537 	.word	0x0801f537
 800de8c:	20002c88 	.word	0x20002c88
 800de90:	0801feda 	.word	0x0801feda
 800de94:	0801fefb 	.word	0x0801fefb
 800de98:	0801ff03 	.word	0x0801ff03
 800de9c:	0000034a 	.word	0x0000034a
 800dea0:	00000253 	.word	0x00000253
 800dea4:	00000404 	.word	0x00000404
 800dea8:	0801ff1e 	.word	0x0801ff1e
 800deac:	0801ff24 	.word	0x0801ff24
 800deb0:	0801ff2a 	.word	0x0801ff2a
 800deb4:	0801ff54 	.word	0x0801ff54
 800deb8:	0801ff5d 	.word	0x0801ff5d
 800debc:	0801ff7a 	.word	0x0801ff7a
 800dec0:	f007 fdea 	bl	8015a98 <f_puts>
    if (f_chmod(pdf_file_name,AM_RDO,AM_RDO) != FR_OK)
 800dec4:	2201      	movs	r2, #1
 800dec6:	4ea3      	ldr	r6, [pc, #652]	@ (800e154 <pdf_gen_completed_report+0x1dd8>)
 800dec8:	0011      	movs	r1, r2
 800deca:	6830      	ldr	r0, [r6, #0]
 800decc:	f007 f9bc 	bl	8015248 <f_chmod>
 800ded0:	4ca1      	ldr	r4, [pc, #644]	@ (800e158 <pdf_gen_completed_report+0x1ddc>)
 800ded2:	4da2      	ldr	r5, [pc, #648]	@ (800e15c <pdf_gen_completed_report+0x1de0>)
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d006      	beq.n	800dee6 <pdf_gen_completed_report+0x1b6a>
        LOG_APP("f_chmod %s failed\r\n",pdf_file_name);
 800ded8:	6828      	ldr	r0, [r5, #0]
 800deda:	0022      	movs	r2, r4
 800dedc:	49a0      	ldr	r1, [pc, #640]	@ (800e160 <pdf_gen_completed_report+0x1de4>)
 800dede:	6833      	ldr	r3, [r6, #0]
 800dee0:	68c0      	ldr	r0, [r0, #12]
 800dee2:	f00c f90f 	bl	801a104 <fiprintf>
    f_close(&pdf_file);
 800dee6:	9807      	ldr	r0, [sp, #28]
 800dee8:	f007 f8ec 	bl	80150c4 <f_close>
    LOG_APP("Close PDF log file\r\n");
 800deec:	0022      	movs	r2, r4
 800deee:	499d      	ldr	r1, [pc, #628]	@ (800e164 <pdf_gen_completed_report+0x1de8>)
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	f7fe fa6c 	bl	800c3ce <pdf_gen_completed_report+0x52>
        elapsed_sec = (86400 - start_sec) + stop_sec;
 800def6:	4a9c      	ldr	r2, [pc, #624]	@ (800e168 <pdf_gen_completed_report+0x1dec>)
 800def8:	189b      	adds	r3, r3, r2
 800defa:	f7ff f882 	bl	800d002 <pdf_gen_completed_report+0xc86>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START + (i*grid_size), chart_y_start , CHART_X_START + (i*grid_size), chart_y_start - CHART_HEIGHT, line_size, light_gray, light_gray, light_gray,4);
 800defe:	2304      	movs	r3, #4
 800df00:	9305      	str	r3, [sp, #20]
 800df02:	23fc      	movs	r3, #252	@ 0xfc
 800df04:	059b      	lsls	r3, r3, #22
 800df06:	9301      	str	r3, [sp, #4]
 800df08:	22a9      	movs	r2, #169	@ 0xa9
 800df0a:	2358      	movs	r3, #88	@ 0x58
 800df0c:	0029      	movs	r1, r5
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	4896      	ldr	r0, [pc, #600]	@ (800e16c <pdf_gen_completed_report+0x1df0>)
 800df12:	002b      	movs	r3, r5
 800df14:	9604      	str	r6, [sp, #16]
 800df16:	9603      	str	r6, [sp, #12]
 800df18:	9602      	str	r6, [sp, #8]
 800df1a:	0052      	lsls	r2, r2, #1
 800df1c:	f00a fef2 	bl	8018d04 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= num_grid_col_lines; i++)
 800df20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df22:	192d      	adds	r5, r5, r4
 800df24:	3301      	adds	r3, #1
 800df26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df28:	f7ff fac8 	bl	800d4bc <pdf_gen_completed_report+0x1140>
        printf("[PDF][Chart] TH2 skip (state=%d)\r\n",
 800df2c:	0421      	lsls	r1, r4, #16
 800df2e:	0f89      	lsrs	r1, r1, #30
 800df30:	488f      	ldr	r0, [pc, #572]	@ (800e170 <pdf_gen_completed_report+0x1df4>)
 800df32:	f00c f913 	bl	801a15c <iprintf>
 800df36:	f7ff fbb6 	bl	800d6a6 <pdf_gen_completed_report+0x132a>
        printf("[PDF][Chart] TH1 skip (state=%d)\r\n",
 800df3a:	04a1      	lsls	r1, r4, #18
 800df3c:	0f89      	lsrs	r1, r1, #30
 800df3e:	488d      	ldr	r0, [pc, #564]	@ (800e174 <pdf_gen_completed_report+0x1df8>)
 800df40:	f00c f90c 	bl	801a15c <iprintf>
 800df44:	e417      	b.n	800d776 <pdf_gen_completed_report+0x13fa>
        printf("[PDF][Chart] TL2 skip (state=%d)\r\n",
 800df46:	0321      	lsls	r1, r4, #12
 800df48:	0f89      	lsrs	r1, r1, #30
 800df4a:	488b      	ldr	r0, [pc, #556]	@ (800e178 <pdf_gen_completed_report+0x1dfc>)
 800df4c:	f00c f906 	bl	801a15c <iprintf>
 800df50:	e46f      	b.n	800d832 <pdf_gen_completed_report+0x14b6>
        printf("[PDF][Chart] TL1 skip (state=%d)\r\n",
 800df52:	03a1      	lsls	r1, r4, #14
 800df54:	0f89      	lsrs	r1, r1, #30
 800df56:	4889      	ldr	r0, [pc, #548]	@ (800e17c <pdf_gen_completed_report+0x1e00>)
 800df58:	f00c f900 	bl	801a15c <iprintf>
 800df5c:	e4c9      	b.n	800d8f2 <pdf_gen_completed_report+0x1576>
        printf("[PDF][Chart] RH2 skip (state=%d)\r\n",
 800df5e:	0509      	lsls	r1, r1, #20
 800df60:	0f89      	lsrs	r1, r1, #30
 800df62:	4887      	ldr	r0, [pc, #540]	@ (800e180 <pdf_gen_completed_report+0x1e04>)
 800df64:	f00c f8fa 	bl	801a15c <iprintf>
 800df68:	e512      	b.n	800d990 <pdf_gen_completed_report+0x1614>
        printf("[PDF][Chart] RH1 skip (state=%d)\r\n",
 800df6a:	0589      	lsls	r1, r1, #22
 800df6c:	0f89      	lsrs	r1, r1, #30
 800df6e:	4885      	ldr	r0, [pc, #532]	@ (800e184 <pdf_gen_completed_report+0x1e08>)
 800df70:	f00c f8f4 	bl	801a15c <iprintf>
 800df74:	e587      	b.n	800da86 <pdf_gen_completed_report+0x170a>
        meas_data_log_read_entry(i, &entry);
 800df76:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df78:	a926      	add	r1, sp, #152	@ 0x98
 800df7a:	f7fa fbdd 	bl	8008738 <meas_data_log_read_entry>
        if (chunk_start_index > 0 && buffer_count == 0) {
 800df7e:	2e00      	cmp	r6, #0
 800df80:	d100      	bne.n	800df84 <pdf_gen_completed_report+0x1c08>
 800df82:	e092      	b.n	800e0aa <pdf_gen_completed_report+0x1d2e>
 800df84:	2c00      	cmp	r4, #0
 800df86:	d000      	beq.n	800df8a <pdf_gen_completed_report+0x1c0e>
 800df88:	e08f      	b.n	800e0aa <pdf_gen_completed_report+0x1d2e>
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800df8a:	9b07      	ldr	r3, [sp, #28]
 800df8c:	1e58      	subs	r0, r3, #1
 800df8e:	f7f3 fbcd 	bl	800172c <__aeabi_i2f>
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800df92:	4b7d      	ldr	r3, [pc, #500]	@ (800e188 <pdf_gen_completed_report+0x1e0c>)
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800df94:	1c05      	adds	r5, r0, #0
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800df96:	681b      	ldr	r3, [r3, #0]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800df98:	9808      	ldr	r0, [sp, #32]
 800df9a:	1c19      	adds	r1, r3, #0
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800df9c:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800df9e:	f7f3 f92b 	bl	80011f8 <__aeabi_fsub>
 800dfa2:	9010      	str	r0, [sp, #64]	@ 0x40
            float prev_dose_y = map_value(last_entry_of_chunk.dose, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800dfa4:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800dfa6:	f7f3 fc11 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dfaa:	4978      	ldr	r1, [pc, #480]	@ (800e18c <pdf_gen_completed_report+0x1e10>)
 800dfac:	f7f2 ffca 	bl	8000f44 <__aeabi_fmul>
 800dfb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfb2:	f7f2 fdf9 	bl	8000ba8 <__aeabi_fdiv>
 800dfb6:	4976      	ldr	r1, [pc, #472]	@ (800e190 <pdf_gen_completed_report+0x1e14>)
 800dfb8:	f7f2 fc04 	bl	80007c4 <__aeabi_fadd>
 800dfbc:	9012      	str	r0, [sp, #72]	@ 0x48
            float curr_dose_y = map_value(entry.dose, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800dfbe:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800dfc0:	f7f3 fc04 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dfc4:	4971      	ldr	r1, [pc, #452]	@ (800e18c <pdf_gen_completed_report+0x1e10>)
 800dfc6:	f7f2 ffbd 	bl	8000f44 <__aeabi_fmul>
 800dfca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfcc:	f7f2 fdec 	bl	8000ba8 <__aeabi_fdiv>
 800dfd0:	496f      	ldr	r1, [pc, #444]	@ (800e190 <pdf_gen_completed_report+0x1e14>)
 800dfd2:	f7f2 fbf7 	bl	80007c4 <__aeabi_fadd>
 800dfd6:	9016      	str	r0, [sp, #88]	@ 0x58
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800dfd8:	1e70      	subs	r0, r6, #1
 800dfda:	f7f3 fba7 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dfde:	496d      	ldr	r1, [pc, #436]	@ (800e194 <pdf_gen_completed_report+0x1e18>)
 800dfe0:	f7f2 ffb0 	bl	8000f44 <__aeabi_fmul>
 800dfe4:	1c29      	adds	r1, r5, #0
 800dfe6:	f7f2 fddf 	bl	8000ba8 <__aeabi_fdiv>
 800dfea:	496b      	ldr	r1, [pc, #428]	@ (800e198 <pdf_gen_completed_report+0x1e1c>)
 800dfec:	f7f2 fbea 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800dff0:	f7f3 fb7c 	bl	80016ec <__aeabi_f2iz>
 800dff4:	900c      	str	r0, [sp, #48]	@ 0x30
            float curr_x = map_value((float)chunk_start_index, 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800dff6:	0030      	movs	r0, r6
 800dff8:	f7f3 fbe8 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dffc:	4965      	ldr	r1, [pc, #404]	@ (800e194 <pdf_gen_completed_report+0x1e18>)
 800dffe:	f7f2 ffa1 	bl	8000f44 <__aeabi_fmul>
 800e002:	1c29      	adds	r1, r5, #0
 800e004:	f7f2 fdd0 	bl	8000ba8 <__aeabi_fdiv>
 800e008:	4963      	ldr	r1, [pc, #396]	@ (800e198 <pdf_gen_completed_report+0x1e1c>)
 800e00a:	f7f2 fbdb 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e00e:	f7f3 fb6d 	bl	80016ec <__aeabi_f2iz>
 800e012:	900f      	str	r0, [sp, #60]	@ 0x3c
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e014:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e016:	f7f3 fb89 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e01a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e01c:	f7f3 f8ec 	bl	80011f8 <__aeabi_fsub>
 800e020:	495a      	ldr	r1, [pc, #360]	@ (800e18c <pdf_gen_completed_report+0x1e10>)
 800e022:	f7f2 ff8f 	bl	8000f44 <__aeabi_fmul>
 800e026:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e028:	f7f2 fdbe 	bl	8000ba8 <__aeabi_fdiv>
 800e02c:	4958      	ldr	r1, [pc, #352]	@ (800e190 <pdf_gen_completed_report+0x1e14>)
 800e02e:	f7f2 fbc9 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e032:	f7f3 fb5b 	bl	80016ec <__aeabi_f2iz>
 800e036:	23fe      	movs	r3, #254	@ 0xfe
 800e038:	22fd      	movs	r2, #253	@ 0xfd
 800e03a:	059b      	lsls	r3, r3, #22
 800e03c:	0592      	lsls	r2, r2, #22
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	9201      	str	r2, [sp, #4]
            float curr_temp_y = map_value(entry.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e042:	a91a      	add	r1, sp, #104	@ 0x68
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e044:	9017      	str	r0, [sp, #92]	@ 0x5c
 800e046:	9704      	str	r7, [sp, #16]
 800e048:	9703      	str	r7, [sp, #12]
            float curr_temp_y = map_value(entry.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800e04a:	203a      	movs	r0, #58	@ 0x3a
 800e04c:	5e08      	ldrsh	r0, [r1, r0]
 800e04e:	f7f3 fb6d 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800e052:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e054:	f7f3 f8d0 	bl	80011f8 <__aeabi_fsub>
 800e058:	494c      	ldr	r1, [pc, #304]	@ (800e18c <pdf_gen_completed_report+0x1e10>)
 800e05a:	f7f2 ff73 	bl	8000f44 <__aeabi_fmul>
 800e05e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e060:	f7f2 fda2 	bl	8000ba8 <__aeabi_fdiv>
 800e064:	494a      	ldr	r1, [pc, #296]	@ (800e190 <pdf_gen_completed_report+0x1e14>)
 800e066:	f7f2 fbad 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800e06a:	f7f3 fb3f 	bl	80016ec <__aeabi_f2iz>
 800e06e:	4d3f      	ldr	r5, [pc, #252]	@ (800e16c <pdf_gen_completed_report+0x1df0>)
 800e070:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e074:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e076:	9000      	str	r0, [sp, #0]
 800e078:	0028      	movs	r0, r5
 800e07a:	f00a fe0f 	bl	8018c9c <tpdf_draw_line>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_dose_y, (int)curr_x, (int)curr_dose_y, 0.75, 0.0f, 0.0f, 1.0f);
 800e07e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e080:	f7f3 fb34 	bl	80016ec <__aeabi_f2iz>
 800e084:	23fe      	movs	r3, #254	@ 0xfe
 800e086:	22fd      	movs	r2, #253	@ 0xfd
 800e088:	059b      	lsls	r3, r3, #22
 800e08a:	0592      	lsls	r2, r2, #22
 800e08c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e08e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e090:	9304      	str	r3, [sp, #16]
 800e092:	9201      	str	r2, [sp, #4]
 800e094:	9703      	str	r7, [sp, #12]
 800e096:	9702      	str	r7, [sp, #8]
 800e098:	f7f3 fb28 	bl	80016ec <__aeabi_f2iz>
 800e09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e09e:	9000      	str	r0, [sp, #0]
 800e0a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e0a2:	0028      	movs	r0, r5
 800e0a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0a6:	f00a fdf9 	bl	8018c9c <tpdf_draw_line>
        tmp_temper[buffer_count] = (float)entry.temperature/ 10.0f;
 800e0aa:	ab1a      	add	r3, sp, #104	@ 0x68
 800e0ac:	203a      	movs	r0, #58	@ 0x3a
 800e0ae:	5e18      	ldrsh	r0, [r3, r0]
 800e0b0:	f7f3 fb3c 	bl	800172c <__aeabi_i2f>
 800e0b4:	4939      	ldr	r1, [pc, #228]	@ (800e19c <pdf_gen_completed_report+0x1e20>)
 800e0b6:	f7f2 fd77 	bl	8000ba8 <__aeabi_fdiv>
 800e0ba:	22b4      	movs	r2, #180	@ 0xb4
 800e0bc:	ab1a      	add	r3, sp, #104	@ 0x68
 800e0be:	0052      	lsls	r2, r2, #1
 800e0c0:	189b      	adds	r3, r3, r2
 800e0c2:	00a5      	lsls	r5, r4, #2
 800e0c4:	5158      	str	r0, [r3, r5]
        tmp_dose[buffer_count] = (float)entry.dose/ 100.0f;
 800e0c6:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800e0c8:	f7f3 fb80 	bl	80017cc <__aeabi_ui2f>
 800e0cc:	4934      	ldr	r1, [pc, #208]	@ (800e1a0 <pdf_gen_completed_report+0x1e24>)
 800e0ce:	f7f2 fd6b 	bl	8000ba8 <__aeabi_fdiv>
 800e0d2:	4a34      	ldr	r2, [pc, #208]	@ (800e1a4 <pdf_gen_completed_report+0x1e28>)
 800e0d4:	ab1a      	add	r3, sp, #104	@ 0x68
 800e0d6:	189b      	adds	r3, r3, r2
 800e0d8:	5158      	str	r0, [r3, r5]
        if (buffer_count == DATAPOINTS_PER_PAGE) {
 800e0da:	23f0      	movs	r3, #240	@ 0xf0
        buffer_count++;
 800e0dc:	3401      	adds	r4, #1
 800e0de:	b2a4      	uxth	r4, r4
        if (buffer_count == DATAPOINTS_PER_PAGE) {
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	429c      	cmp	r4, r3
 800e0e4:	d12b      	bne.n	800e13e <pdf_gen_completed_report+0x1dc2>
            pdf_chart_plot_data(file_p, *y_pos, tmp_temper, chunk_start_index, buffer_count, record_nums, 1.0f, 0.0f, 0.0f, g_temp_axis_min , temp_highest_scale_up);
 800e0e6:	25fe      	movs	r5, #254	@ 0xfe
 800e0e8:	20b3      	movs	r0, #179	@ 0xb3
 800e0ea:	9b08      	ldr	r3, [sp, #32]
 800e0ec:	05ad      	lsls	r5, r5, #22
 800e0ee:	9304      	str	r3, [sp, #16]
 800e0f0:	4b25      	ldr	r3, [pc, #148]	@ (800e188 <pdf_gen_completed_report+0x1e0c>)
 800e0f2:	0032      	movs	r2, r6
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	a974      	add	r1, sp, #464	@ 0x1d0
 800e0f8:	9303      	str	r3, [sp, #12]
 800e0fa:	9b07      	ldr	r3, [sp, #28]
 800e0fc:	0040      	lsls	r0, r0, #1
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	9702      	str	r7, [sp, #8]
 800e102:	0023      	movs	r3, r4
 800e104:	9501      	str	r5, [sp, #4]
 800e106:	f7fd feb9 	bl	800be7c <pdf_chart_plot_data.constprop.0>
            pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800e10a:	4926      	ldr	r1, [pc, #152]	@ (800e1a4 <pdf_gen_completed_report+0x1e28>)
 800e10c:	a81a      	add	r0, sp, #104	@ 0x68
 800e10e:	1809      	adds	r1, r1, r0
 800e110:	20b3      	movs	r0, #179	@ 0xb3
 800e112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e114:	0032      	movs	r2, r6
 800e116:	9304      	str	r3, [sp, #16]
 800e118:	9b07      	ldr	r3, [sp, #28]
 800e11a:	9703      	str	r7, [sp, #12]
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	0023      	movs	r3, r4
            buffer_count = 0;
 800e120:	2400      	movs	r4, #0
            pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800e122:	9502      	str	r5, [sp, #8]
 800e124:	9701      	str	r7, [sp, #4]
 800e126:	0040      	lsls	r0, r0, #1
 800e128:	f7fd fea8 	bl	800be7c <pdf_chart_plot_data.constprop.0>
            last_entry_of_chunk = entry; // Save the last point
 800e12c:	ab1a      	add	r3, sp, #104	@ 0x68
 800e12e:	223a      	movs	r2, #58	@ 0x3a
 800e130:	5e9b      	ldrsh	r3, [r3, r2]
            chunk_start_index += buffer_count;
 800e132:	36e1      	adds	r6, #225	@ 0xe1
            last_entry_of_chunk = entry; // Save the last point
 800e134:	9311      	str	r3, [sp, #68]	@ 0x44
 800e136:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
            chunk_start_index += buffer_count;
 800e138:	36ff      	adds	r6, #255	@ 0xff
            last_entry_of_chunk = entry; // Save the last point
 800e13a:	931e      	str	r3, [sp, #120]	@ 0x78
            chunk_start_index += buffer_count;
 800e13c:	b2b6      	uxth	r6, r6
    for (int i = 0; i < record_nums; i++) {
 800e13e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e140:	3301      	adds	r3, #1
 800e142:	930a      	str	r3, [sp, #40]	@ 0x28
 800e144:	e4a3      	b.n	800da8e <pdf_gen_completed_report+0x1712>
        fatfs_write_string(&pdf_file, "0000000000 00000 n \n");
 800e146:	4818      	ldr	r0, [pc, #96]	@ (800e1a8 <pdf_gen_completed_report+0x1e2c>)
 800e148:	9907      	ldr	r1, [sp, #28]
 800e14a:	f007 fca5 	bl	8015a98 <f_puts>
    for (unsigned i = 0; i < (unsigned)pdf_monitor.num_objs; i++) {
 800e14e:	3601      	adds	r6, #1
 800e150:	e64e      	b.n	800ddf0 <pdf_gen_completed_report+0x1a74>
 800e152:	46c0      	nop			@ (mov r8, r8)
 800e154:	200001fc 	.word	0x200001fc
 800e158:	0801e879 	.word	0x0801e879
 800e15c:	200002cc 	.word	0x200002cc
 800e160:	0801ff8f 	.word	0x0801ff8f
 800e164:	0801ffa8 	.word	0x0801ffa8
 800e168:	00015180 	.word	0x00015180
 800e16c:	20003090 	.word	0x20003090
 800e170:	0801fd30 	.word	0x0801fd30
 800e174:	0801fd77 	.word	0x0801fd77
 800e178:	0801fdbe 	.word	0x0801fdbe
 800e17c:	0801fe05 	.word	0x0801fe05
 800e180:	0801fe4a 	.word	0x0801fe4a
 800e184:	0801fe8f 	.word	0x0801fe8f
 800e188:	20000200 	.word	0x20000200
 800e18c:	437a0000 	.word	0x437a0000
 800e190:	42b00000 	.word	0x42b00000
 800e194:	43e10000 	.word	0x43e10000
 800e198:	42960000 	.word	0x42960000
 800e19c:	41200000 	.word	0x41200000
 800e1a0:	42c80000 	.word	0x42c80000
 800e1a4:	000008e8 	.word	0x000008e8
 800e1a8:	0801ff3f 	.word	0x0801ff3f

0800e1ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e1ac:	480d      	ldr	r0, [pc, #52]	@ (800e1e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e1ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e1b0:	f7fc fb9a 	bl	800a8e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e1b4:	480c      	ldr	r0, [pc, #48]	@ (800e1e8 <LoopForever+0x6>)
  ldr r1, =_edata
 800e1b6:	490d      	ldr	r1, [pc, #52]	@ (800e1ec <LoopForever+0xa>)
  ldr r2, =_sidata
 800e1b8:	4a0d      	ldr	r2, [pc, #52]	@ (800e1f0 <LoopForever+0xe>)
  movs r3, #0
 800e1ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e1bc:	e002      	b.n	800e1c4 <LoopCopyDataInit>

0800e1be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e1be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e1c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e1c2:	3304      	adds	r3, #4

0800e1c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e1c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e1c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e1c8:	d3f9      	bcc.n	800e1be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e1ca:	4a0a      	ldr	r2, [pc, #40]	@ (800e1f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e1cc:	4c0a      	ldr	r4, [pc, #40]	@ (800e1f8 <LoopForever+0x16>)
  movs r3, #0
 800e1ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e1d0:	e001      	b.n	800e1d6 <LoopFillZerobss>

0800e1d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e1d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e1d4:	3204      	adds	r2, #4

0800e1d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e1d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e1d8:	d3fb      	bcc.n	800e1d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e1da:	f00c fa1b 	bl	801a614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e1de:	f7f9 f991 	bl	8007504 <main>

0800e1e2 <LoopForever>:

LoopForever:
  b LoopForever
 800e1e2:	e7fe      	b.n	800e1e2 <LoopForever>
  ldr   r0, =_estack
 800e1e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800e1e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e1ec:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 800e1f0:	0802078c 	.word	0x0802078c
  ldr r2, =_sbss
 800e1f4:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 800e1f8:	200067fc 	.word	0x200067fc

0800e1fc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e1fc:	e7fe      	b.n	800e1fc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>
	...

0800e200 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800e200:	4b10      	ldr	r3, [pc, #64]	@ (800e244 <HAL_InitTick+0x44>)
{
 800e202:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 800e204:	6819      	ldr	r1, [r3, #0]
{
 800e206:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 800e208:	2900      	cmp	r1, #0
 800e20a:	d101      	bne.n	800e210 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800e20c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800e210:	20fa      	movs	r0, #250	@ 0xfa
 800e212:	0080      	lsls	r0, r0, #2
 800e214:	f7f1 ffa8 	bl	8000168 <__udivsi3>
 800e218:	4c0b      	ldr	r4, [pc, #44]	@ (800e248 <HAL_InitTick+0x48>)
 800e21a:	0001      	movs	r1, r0
 800e21c:	6820      	ldr	r0, [r4, #0]
 800e21e:	f7f1 ffa3 	bl	8000168 <__udivsi3>
 800e222:	f000 ff37 	bl	800f094 <HAL_SYSTICK_Config>
 800e226:	1e04      	subs	r4, r0, #0
 800e228:	d1f0      	bne.n	800e20c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e22a:	2d03      	cmp	r5, #3
 800e22c:	d8ee      	bhi.n	800e20c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e22e:	0002      	movs	r2, r0
 800e230:	2001      	movs	r0, #1
 800e232:	0029      	movs	r1, r5
 800e234:	4240      	negs	r0, r0
 800e236:	f000 fef7 	bl	800f028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e23a:	4b04      	ldr	r3, [pc, #16]	@ (800e24c <HAL_InitTick+0x4c>)
 800e23c:	0020      	movs	r0, r4
 800e23e:	601d      	str	r5, [r3, #0]
  return status;
 800e240:	e7e5      	b.n	800e20e <HAL_InitTick+0xe>
 800e242:	46c0      	nop			@ (mov r8, r8)
 800e244:	20000204 	.word	0x20000204
 800e248:	20000050 	.word	0x20000050
 800e24c:	20000208 	.word	0x20000208

0800e250 <HAL_Init>:
{
 800e250:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e252:	2003      	movs	r0, #3
 800e254:	f7ff ffd4 	bl	800e200 <HAL_InitTick>
 800e258:	1e04      	subs	r4, r0, #0
 800e25a:	d103      	bne.n	800e264 <HAL_Init+0x14>
    HAL_MspInit();
 800e25c:	f7fb ffb0 	bl	800a1c0 <HAL_MspInit>
}
 800e260:	0020      	movs	r0, r4
 800e262:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800e264:	2401      	movs	r4, #1
 800e266:	e7fb      	b.n	800e260 <HAL_Init+0x10>

0800e268 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800e268:	4a03      	ldr	r2, [pc, #12]	@ (800e278 <HAL_IncTick+0x10>)
 800e26a:	4904      	ldr	r1, [pc, #16]	@ (800e27c <HAL_IncTick+0x14>)
 800e26c:	6813      	ldr	r3, [r2, #0]
 800e26e:	6809      	ldr	r1, [r1, #0]
 800e270:	185b      	adds	r3, r3, r1
 800e272:	6013      	str	r3, [r2, #0]
}
 800e274:	4770      	bx	lr
 800e276:	46c0      	nop			@ (mov r8, r8)
 800e278:	200030b8 	.word	0x200030b8
 800e27c:	20000204 	.word	0x20000204

0800e280 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e280:	4b01      	ldr	r3, [pc, #4]	@ (800e288 <HAL_GetTick+0x8>)
 800e282:	6818      	ldr	r0, [r3, #0]
}
 800e284:	4770      	bx	lr
 800e286:	46c0      	nop			@ (mov r8, r8)
 800e288:	200030b8 	.word	0x200030b8

0800e28c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800e28c:	2102      	movs	r1, #2
 800e28e:	4a02      	ldr	r2, [pc, #8]	@ (800e298 <HAL_SuspendTick+0xc>)
 800e290:	6813      	ldr	r3, [r2, #0]
 800e292:	438b      	bics	r3, r1
 800e294:	6013      	str	r3, [r2, #0]
}
 800e296:	4770      	bx	lr
 800e298:	e000e010 	.word	0xe000e010

0800e29c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800e29c:	2302      	movs	r3, #2
 800e29e:	4a02      	ldr	r2, [pc, #8]	@ (800e2a8 <HAL_ResumeTick+0xc>)
 800e2a0:	6811      	ldr	r1, [r2, #0]
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	6013      	str	r3, [r2, #0]
}
 800e2a6:	4770      	bx	lr
 800e2a8:	e000e010 	.word	0xe000e010

0800e2ac <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e2ac:	6880      	ldr	r0, [r0, #8]
 800e2ae:	0740      	lsls	r0, r0, #29
 800e2b0:	0fc0      	lsrs	r0, r0, #31
}
 800e2b2:	4770      	bx	lr

0800e2b4 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800e2b4:	2300      	movs	r3, #0
{
 800e2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800e2bc:	9303      	str	r3, [sp, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800e2be:	4298      	cmp	r0, r3
 800e2c0:	d100      	bne.n	800e2c4 <HAL_ADC_Init+0x10>
 800e2c2:	e0f0      	b.n	800e4a6 <HAL_ADC_Init+0x1f2>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e2c4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800e2c6:	429d      	cmp	r5, r3
 800e2c8:	d105      	bne.n	800e2d6 <HAL_ADC_Init+0x22>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e2ca:	f7fb ff97 	bl	800a1fc <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800e2ce:	0023      	movs	r3, r4
 800e2d0:	3354      	adds	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800e2d2:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800e2d4:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800e2d6:	2380      	movs	r3, #128	@ 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e2d8:	6825      	ldr	r5, [r4, #0]
 800e2da:	055b      	lsls	r3, r3, #21
 800e2dc:	68aa      	ldr	r2, [r5, #8]
 800e2de:	421a      	tst	r2, r3
 800e2e0:	d100      	bne.n	800e2e4 <HAL_ADC_Init+0x30>
 800e2e2:	e0a7      	b.n	800e434 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	68ab      	ldr	r3, [r5, #8]
 800e2e8:	9201      	str	r2, [sp, #4]
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	d408      	bmi.n	800e300 <HAL_ADC_Init+0x4c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e2ee:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e2f0:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e2f2:	6da2      	ldr	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800e2f4:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e2fa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e2fc:	4333      	orrs	r3, r6
 800e2fe:	65e3      	str	r3, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e300:	0028      	movs	r0, r5
 800e302:	f7ff ffd3 	bl	800e2ac <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e306:	2210      	movs	r2, #16
 800e308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e30a:	4013      	ands	r3, r2
 800e30c:	4303      	orrs	r3, r0
 800e30e:	d000      	beq.n	800e312 <HAL_ADC_Init+0x5e>
 800e310:	e0cc      	b.n	800e4ac <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e312:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e314:	4b67      	ldr	r3, [pc, #412]	@ (800e4b4 <HAL_ADC_Init+0x200>)
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e316:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 800e318:	401a      	ands	r2, r3
 800e31a:	3306      	adds	r3, #6
 800e31c:	33ff      	adds	r3, #255	@ 0xff
 800e31e:	4313      	orrs	r3, r2
 800e320:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e322:	68ab      	ldr	r3, [r5, #8]
 800e324:	07db      	lsls	r3, r3, #31
 800e326:	d461      	bmi.n	800e3ec <HAL_ADC_Init+0x138>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e328:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800e32a:	68e1      	ldr	r1, [r4, #12]
 800e32c:	1e7b      	subs	r3, r7, #1
 800e32e:	419f      	sbcs	r7, r3
 800e330:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e332:	7ea2      	ldrb	r2, [r4, #26]
 800e334:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e336:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e338:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e33a:	0389      	lsls	r1, r1, #14
 800e33c:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800e33e:	7e61      	ldrb	r1, [r4, #25]
 800e340:	03c9      	lsls	r1, r1, #15
 800e342:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e344:	0351      	lsls	r1, r2, #13
 800e346:	430b      	orrs	r3, r1
 800e348:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e34a:	2800      	cmp	r0, #0
 800e34c:	db00      	blt.n	800e350 <HAL_ADC_Init+0x9c>
 800e34e:	e086      	b.n	800e45e <HAL_ADC_Init+0x1aa>
 800e350:	0041      	lsls	r1, r0, #1
 800e352:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e354:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e356:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e358:	332c      	adds	r3, #44	@ 0x2c
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e35e:	4333      	orrs	r3, r6
 800e360:	433b      	orrs	r3, r7
 800e362:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e364:	1c61      	adds	r1, r4, #1
 800e366:	7fc9      	ldrb	r1, [r1, #31]
 800e368:	2901      	cmp	r1, #1
 800e36a:	d105      	bne.n	800e378 <HAL_ADC_Init+0xc4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800e36c:	2a00      	cmp	r2, #0
 800e36e:	d000      	beq.n	800e372 <HAL_ADC_Init+0xbe>
 800e370:	e078      	b.n	800e464 <HAL_ADC_Init+0x1b0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800e372:	2280      	movs	r2, #128	@ 0x80
 800e374:	0252      	lsls	r2, r2, #9
 800e376:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e378:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e37a:	2a00      	cmp	r2, #0
 800e37c:	d005      	beq.n	800e38a <HAL_ADC_Init+0xd6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800e37e:	21e0      	movs	r1, #224	@ 0xe0
 800e380:	0049      	lsls	r1, r1, #1
 800e382:	400a      	ands	r2, r1
 800e384:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e386:	430a      	orrs	r2, r1
 800e388:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800e38a:	68ea      	ldr	r2, [r5, #12]
 800e38c:	494a      	ldr	r1, [pc, #296]	@ (800e4b8 <HAL_ADC_Init+0x204>)
 800e38e:	400a      	ands	r2, r1
 800e390:	4313      	orrs	r3, r2
 800e392:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800e394:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e396:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 800e398:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e39a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800e39c:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e39e:	0f97      	lsrs	r7, r2, #30
 800e3a0:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 800e3a2:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e3a4:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d108      	bne.n	800e3bc <HAL_ADC_Init+0x108>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800e3aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e3ac:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800e3ae:	4333      	orrs	r3, r6
 800e3b0:	430b      	orrs	r3, r1
 800e3b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e3b4:	430b      	orrs	r3, r1
 800e3b6:	4661      	mov	r1, ip
 800e3b8:	433b      	orrs	r3, r7
 800e3ba:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800e3bc:	692b      	ldr	r3, [r5, #16]
 800e3be:	4f3f      	ldr	r7, [pc, #252]	@ (800e4bc <HAL_ADC_Init+0x208>)
 800e3c0:	403b      	ands	r3, r7
 800e3c2:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e3c4:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 800e3c6:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e3c8:	0053      	lsls	r3, r2, #1
 800e3ca:	085b      	lsrs	r3, r3, #1
 800e3cc:	05c9      	lsls	r1, r1, #23
 800e3ce:	428b      	cmp	r3, r1
 800e3d0:	d00c      	beq.n	800e3ec <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800e3d2:	2380      	movs	r3, #128	@ 0x80
 800e3d4:	061b      	lsls	r3, r3, #24
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d008      	beq.n	800e3ec <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800e3da:	4939      	ldr	r1, [pc, #228]	@ (800e4c0 <HAL_ADC_Init+0x20c>)
 800e3dc:	4f39      	ldr	r7, [pc, #228]	@ (800e4c4 <HAL_ADC_Init+0x210>)
 800e3de:	680b      	ldr	r3, [r1, #0]
 800e3e0:	403b      	ands	r3, r7
 800e3e2:	27f0      	movs	r7, #240	@ 0xf0
 800e3e4:	03bf      	lsls	r7, r7, #14
 800e3e6:	403a      	ands	r2, r7
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 800e3ec:	2107      	movs	r1, #7
 800e3ee:	2770      	movs	r7, #112	@ 0x70
 800e3f0:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800e3f2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e3f4:	438b      	bics	r3, r1
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	616b      	str	r3, [r5, #20]
 800e3fa:	6969      	ldr	r1, [r5, #20]
 800e3fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e3fe:	43b9      	bics	r1, r7
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	430b      	orrs	r3, r1
 800e404:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800e406:	2800      	cmp	r0, #0
 800e408:	d134      	bne.n	800e474 <HAL_ADC_Init+0x1c0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800e40a:	2310      	movs	r3, #16
 800e40c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800e40e:	425b      	negs	r3, r3
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800e410:	430b      	orrs	r3, r1
 800e412:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800e414:	2107      	movs	r1, #7
 800e416:	696b      	ldr	r3, [r5, #20]
 800e418:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d139      	bne.n	800e492 <HAL_ADC_Init+0x1de>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800e41e:	2300      	movs	r3, #0
 800e420:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800e422:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e424:	3303      	adds	r3, #3
 800e426:	439a      	bics	r2, r3
 800e428:	3b02      	subs	r3, #2
 800e42a:	4313      	orrs	r3, r2
 800e42c:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 800e42e:	9801      	ldr	r0, [sp, #4]
 800e430:	b005      	add	sp, #20
 800e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 800e434:	68aa      	ldr	r2, [r5, #8]
 800e436:	4924      	ldr	r1, [pc, #144]	@ (800e4c8 <HAL_ADC_Init+0x214>)
 800e438:	400a      	ands	r2, r1
 800e43a:	4313      	orrs	r3, r2
 800e43c:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e43e:	4b23      	ldr	r3, [pc, #140]	@ (800e4cc <HAL_ADC_Init+0x218>)
 800e440:	4923      	ldr	r1, [pc, #140]	@ (800e4d0 <HAL_ADC_Init+0x21c>)
 800e442:	6818      	ldr	r0, [r3, #0]
 800e444:	f7f1 fe90 	bl	8000168 <__udivsi3>
 800e448:	3001      	adds	r0, #1
 800e44a:	0040      	lsls	r0, r0, #1
 800e44c:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d100      	bne.n	800e456 <HAL_ADC_Init+0x1a2>
 800e454:	e746      	b.n	800e2e4 <HAL_ADC_Init+0x30>
      wait_loop_index--;
 800e456:	9b03      	ldr	r3, [sp, #12]
 800e458:	3b01      	subs	r3, #1
 800e45a:	9303      	str	r3, [sp, #12]
 800e45c:	e7f7      	b.n	800e44e <HAL_ADC_Init+0x19a>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e45e:	2180      	movs	r1, #128	@ 0x80
 800e460:	0389      	lsls	r1, r1, #14
 800e462:	e777      	b.n	800e354 <HAL_ADC_Init+0xa0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e464:	2220      	movs	r2, #32
 800e466:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800e468:	433a      	orrs	r2, r7
 800e46a:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e46c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e46e:	4311      	orrs	r1, r2
 800e470:	65e1      	str	r1, [r4, #92]	@ 0x5c
 800e472:	e781      	b.n	800e378 <HAL_ADC_Init+0xc4>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800e474:	2380      	movs	r3, #128	@ 0x80
 800e476:	039b      	lsls	r3, r3, #14
 800e478:	4298      	cmp	r0, r3
 800e47a:	d1cb      	bne.n	800e414 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 800e47c:	211c      	movs	r1, #28
 800e47e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800e480:	69e3      	ldr	r3, [r4, #28]
 800e482:	3b01      	subs	r3, #1
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	400b      	ands	r3, r1
 800e488:	392c      	subs	r1, #44	@ 0x2c
 800e48a:	4099      	lsls	r1, r3
 800e48c:	000b      	movs	r3, r1
 800e48e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800e490:	e7be      	b.n	800e410 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 800e492:	2312      	movs	r3, #18
 800e494:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e496:	439a      	bics	r2, r3
 800e498:	3b02      	subs	r3, #2
 800e49a:	4313      	orrs	r3, r2
 800e49c:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e49e:	2301      	movs	r3, #1
 800e4a0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	e7c0      	b.n	800e42e <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e4b2:	e7f8      	b.n	800e4a6 <HAL_ADC_Init+0x1f2>
 800e4b4:	fffffefd 	.word	0xfffffefd
 800e4b8:	ffde0201 	.word	0xffde0201
 800e4bc:	1ffffc02 	.word	0x1ffffc02
 800e4c0:	40012708 	.word	0x40012708
 800e4c4:	ffc3ffff 	.word	0xffc3ffff
 800e4c8:	6fffffe8 	.word	0x6fffffe8
 800e4cc:	20000050 	.word	0x20000050
 800e4d0:	00030d40 	.word	0x00030d40

0800e4d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e4d6:	6946      	ldr	r6, [r0, #20]
{
 800e4d8:	0004      	movs	r4, r0
 800e4da:	000f      	movs	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e4dc:	2e08      	cmp	r6, #8
 800e4de:	d00a      	beq.n	800e4f6 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e4e0:	6803      	ldr	r3, [r0, #0]
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800e4e6:	2604      	movs	r6, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e4e8:	4203      	tst	r3, r0
 800e4ea:	d004      	beq.n	800e4f6 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e4ec:	2320      	movs	r3, #32
 800e4ee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 800e4f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800e4f6:	f7ff fec3 	bl	800e280 <HAL_GetTick>
 800e4fa:	9001      	str	r0, [sp, #4]
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e4fc:	6825      	ldr	r5, [r4, #0]
 800e4fe:	682b      	ldr	r3, [r5, #0]
 800e500:	421e      	tst	r6, r3
 800e502:	d024      	beq.n	800e54e <HAL_ADC_PollForConversion+0x7a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e504:	2380      	movs	r3, #128	@ 0x80
 800e506:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4313      	orrs	r3, r2
 800e50c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800e50e:	23c0      	movs	r3, #192	@ 0xc0
 800e510:	68ea      	ldr	r2, [r5, #12]
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	421a      	tst	r2, r3
 800e516:	d115      	bne.n	800e544 <HAL_ADC_PollForConversion+0x70>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800e518:	7ea3      	ldrb	r3, [r4, #26]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d112      	bne.n	800e544 <HAL_ADC_PollForConversion+0x70>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	071b      	lsls	r3, r3, #28
 800e522:	d50f      	bpl.n	800e544 <HAL_ADC_PollForConversion+0x70>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e524:	0028      	movs	r0, r5
 800e526:	f7ff fec1 	bl	800e2ac <LL_ADC_REG_IsConversionOngoing>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d127      	bne.n	800e57e <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e52e:	220c      	movs	r2, #12
 800e530:	686b      	ldr	r3, [r5, #4]
 800e532:	4393      	bics	r3, r2
 800e534:	606b      	str	r3, [r5, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800e536:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e538:	4b17      	ldr	r3, [pc, #92]	@ (800e598 <HAL_ADC_PollForConversion+0xc4>)
 800e53a:	401a      	ands	r2, r3
 800e53c:	3304      	adds	r3, #4
 800e53e:	33ff      	adds	r3, #255	@ 0xff
 800e540:	4313      	orrs	r3, r2
 800e542:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e544:	7e23      	ldrb	r3, [r4, #24]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d022      	beq.n	800e590 <HAL_ADC_PollForConversion+0xbc>
  return HAL_OK;
 800e54a:	2000      	movs	r0, #0
 800e54c:	e7d2      	b.n	800e4f4 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 800e54e:	1c7b      	adds	r3, r7, #1
 800e550:	d0d5      	beq.n	800e4fe <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800e552:	f7ff fe95 	bl	800e280 <HAL_GetTick>
 800e556:	9b01      	ldr	r3, [sp, #4]
 800e558:	1ac0      	subs	r0, r0, r3
 800e55a:	42b8      	cmp	r0, r7
 800e55c:	d801      	bhi.n	800e562 <HAL_ADC_PollForConversion+0x8e>
 800e55e:	2f00      	cmp	r7, #0
 800e560:	d1cc      	bne.n	800e4fc <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e562:	0032      	movs	r2, r6
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	401a      	ands	r2, r3
 800e56a:	421e      	tst	r6, r3
 800e56c:	d1c6      	bne.n	800e4fc <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e56e:	2304      	movs	r3, #4
 800e570:	6da1      	ldr	r1, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800e572:	3454      	adds	r4, #84	@ 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e574:	430b      	orrs	r3, r1
 800e576:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 800e578:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800e57a:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800e57c:	e7ba      	b.n	800e4f4 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e57e:	2320      	movs	r3, #32
 800e580:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e582:	4313      	orrs	r3, r2
 800e584:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e586:	2301      	movs	r3, #1
 800e588:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e58a:	4313      	orrs	r3, r2
 800e58c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e58e:	e7d9      	b.n	800e544 <HAL_ADC_PollForConversion+0x70>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e590:	230c      	movs	r3, #12
 800e592:	602b      	str	r3, [r5, #0]
 800e594:	e7d9      	b.n	800e54a <HAL_ADC_PollForConversion+0x76>
 800e596:	46c0      	nop			@ (mov r8, r8)
 800e598:	fffffefe 	.word	0xfffffefe

0800e59c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e59c:	6803      	ldr	r3, [r0, #0]
 800e59e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800e5a0:	4770      	bx	lr

0800e5a2 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 800e5a2:	4770      	bx	lr

0800e5a4 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 800e5a4:	4770      	bx	lr

0800e5a6 <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800e5a6:	4770      	bx	lr

0800e5a8 <HAL_ADC_CalibrationCpltCallback>:
/**
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
 800e5a8:	4770      	bx	lr

0800e5aa <HAL_ADC_ADCReadyCallback>:
/**
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
 800e5aa:	4770      	bx	lr

0800e5ac <HAL_ADC_IRQHandler>:
{
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800e5ae:	6803      	ldr	r3, [r0, #0]
{
 800e5b0:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800e5b2:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800e5b4:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	421e      	tst	r6, r3
 800e5ba:	d00f      	beq.n	800e5dc <HAL_ADC_IRQHandler+0x30>
 800e5bc:	421d      	tst	r5, r3
 800e5be:	d00d      	beq.n	800e5dc <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e5c0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800e5c2:	06db      	lsls	r3, r3, #27
 800e5c4:	d404      	bmi.n	800e5d0 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800e5c6:	2380      	movs	r3, #128	@ 0x80
 800e5c8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800e5ca:	011b      	lsls	r3, r3, #4
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800e5d0:	0020      	movs	r0, r4
 800e5d2:	f000 fbe7 	bl	800eda4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800e5dc:	2304      	movs	r3, #4
 800e5de:	421e      	tst	r6, r3
 800e5e0:	d001      	beq.n	800e5e6 <HAL_ADC_IRQHandler+0x3a>
 800e5e2:	421d      	tst	r5, r3
 800e5e4:	d104      	bne.n	800e5f0 <HAL_ADC_IRQHandler+0x44>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800e5e6:	2308      	movs	r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800e5e8:	421e      	tst	r6, r3
 800e5ea:	d02c      	beq.n	800e646 <HAL_ADC_IRQHandler+0x9a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800e5ec:	421d      	tst	r5, r3
 800e5ee:	d02a      	beq.n	800e646 <HAL_ADC_IRQHandler+0x9a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e5f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e5f2:	06db      	lsls	r3, r3, #27
 800e5f4:	d404      	bmi.n	800e600 <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e5f6:	2380      	movs	r3, #128	@ 0x80
 800e5f8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e600:	23c0      	movs	r3, #192	@ 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800e602:	6827      	ldr	r7, [r4, #0]
 800e604:	011b      	lsls	r3, r3, #4
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	421a      	tst	r2, r3
 800e60a:	d116      	bne.n	800e63a <HAL_ADC_IRQHandler+0x8e>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800e60c:	7ea3      	ldrb	r3, [r4, #26]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d113      	bne.n	800e63a <HAL_ADC_IRQHandler+0x8e>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	071b      	lsls	r3, r3, #28
 800e616:	d510      	bpl.n	800e63a <HAL_ADC_IRQHandler+0x8e>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e618:	0038      	movs	r0, r7
 800e61a:	f7ff fe47 	bl	800e2ac <LL_ADC_REG_IsConversionOngoing>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d000      	beq.n	800e624 <HAL_ADC_IRQHandler+0x78>
 800e622:	e084      	b.n	800e72e <HAL_ADC_IRQHandler+0x182>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e624:	220c      	movs	r2, #12
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4393      	bics	r3, r2
 800e62a:	607b      	str	r3, [r7, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800e62c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e62e:	4b44      	ldr	r3, [pc, #272]	@ (800e740 <HAL_ADC_IRQHandler+0x194>)
 800e630:	401a      	ands	r2, r3
 800e632:	3304      	adds	r3, #4
 800e634:	33ff      	adds	r3, #255	@ 0xff
 800e636:	4313      	orrs	r3, r2
 800e638:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800e63a:	0020      	movs	r0, r4
 800e63c:	f7ff ffb1 	bl	800e5a2 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e640:	220c      	movs	r2, #12
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800e646:	2780      	movs	r7, #128	@ 0x80
 800e648:	423e      	tst	r6, r7
 800e64a:	d00b      	beq.n	800e664 <HAL_ADC_IRQHandler+0xb8>
 800e64c:	423d      	tst	r5, r7
 800e64e:	d009      	beq.n	800e664 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800e650:	2380      	movs	r3, #128	@ 0x80
 800e652:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e654:	025b      	lsls	r3, r3, #9
 800e656:	4313      	orrs	r3, r2
 800e658:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800e65a:	0020      	movs	r0, r4
 800e65c:	f7ff ffa2 	bl	800e5a4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800e664:	2780      	movs	r7, #128	@ 0x80
 800e666:	007f      	lsls	r7, r7, #1
 800e668:	423e      	tst	r6, r7
 800e66a:	d00b      	beq.n	800e684 <HAL_ADC_IRQHandler+0xd8>
 800e66c:	423d      	tst	r5, r7
 800e66e:	d009      	beq.n	800e684 <HAL_ADC_IRQHandler+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800e670:	2380      	movs	r3, #128	@ 0x80
 800e672:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e674:	029b      	lsls	r3, r3, #10
 800e676:	4313      	orrs	r3, r2
 800e678:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800e67a:	0020      	movs	r0, r4
 800e67c:	f000 fb90 	bl	800eda0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800e684:	2780      	movs	r7, #128	@ 0x80
 800e686:	00bf      	lsls	r7, r7, #2
 800e688:	423e      	tst	r6, r7
 800e68a:	d00b      	beq.n	800e6a4 <HAL_ADC_IRQHandler+0xf8>
 800e68c:	423d      	tst	r5, r7
 800e68e:	d009      	beq.n	800e6a4 <HAL_ADC_IRQHandler+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800e690:	2380      	movs	r3, #128	@ 0x80
 800e692:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e694:	02db      	lsls	r3, r3, #11
 800e696:	4313      	orrs	r3, r2
 800e698:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800e69a:	0020      	movs	r0, r4
 800e69c:	f000 fb81 	bl	800eda2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800e6a0:	6823      	ldr	r3, [r4, #0]
 800e6a2:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800e6a4:	2310      	movs	r3, #16
 800e6a6:	421e      	tst	r6, r3
 800e6a8:	d017      	beq.n	800e6da <HAL_ADC_IRQHandler+0x12e>
 800e6aa:	421d      	tst	r5, r3
 800e6ac:	d015      	beq.n	800e6da <HAL_ADC_IRQHandler+0x12e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800e6ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d003      	beq.n	800e6bc <HAL_ADC_IRQHandler+0x110>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800e6b4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	079b      	lsls	r3, r3, #30
 800e6ba:	d00b      	beq.n	800e6d4 <HAL_ADC_IRQHandler+0x128>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800e6bc:	2380      	movs	r3, #128	@ 0x80
 800e6be:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e6c0:	00db      	lsls	r3, r3, #3
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e6c6:	2302      	movs	r3, #2
 800e6c8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800e6ca:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800e6d0:	f7ff ff69 	bl	800e5a6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e6d4:	2210      	movs	r2, #16
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800e6da:	2301      	movs	r3, #1
 800e6dc:	421e      	tst	r6, r3
 800e6de:	d00f      	beq.n	800e700 <HAL_ADC_IRQHandler+0x154>
 800e6e0:	421d      	tst	r5, r3
 800e6e2:	d00d      	beq.n	800e700 <HAL_ADC_IRQHandler+0x154>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e6e4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e6e6:	06d2      	lsls	r2, r2, #27
 800e6e8:	d402      	bmi.n	800e6f0 <HAL_ADC_IRQHandler+0x144>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e6ea:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e6ec:	4313      	orrs	r3, r2
 800e6ee:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ADCReadyCallback(hadc);
 800e6f0:	0020      	movs	r0, r4
 800e6f2:	f7ff ff5a 	bl	800e5aa <HAL_ADC_ADCReadyCallback>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	6822      	ldr	r2, [r4, #0]
 800e6fa:	6853      	ldr	r3, [r2, #4]
 800e6fc:	438b      	bics	r3, r1
 800e6fe:	6053      	str	r3, [r2, #4]
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 800e700:	2780      	movs	r7, #128	@ 0x80
 800e702:	013f      	lsls	r7, r7, #4
 800e704:	423e      	tst	r6, r7
 800e706:	d006      	beq.n	800e716 <HAL_ADC_IRQHandler+0x16a>
 800e708:	423d      	tst	r5, r7
 800e70a:	d004      	beq.n	800e716 <HAL_ADC_IRQHandler+0x16a>
    HAL_ADC_CalibrationCpltCallback(hadc);
 800e70c:	0020      	movs	r0, r4
 800e70e:	f7ff ff4b 	bl	800e5a8 <HAL_ADC_CalibrationCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800e716:	2780      	movs	r7, #128	@ 0x80
 800e718:	01bf      	lsls	r7, r7, #6
 800e71a:	423e      	tst	r6, r7
 800e71c:	d006      	beq.n	800e72c <HAL_ADC_IRQHandler+0x180>
 800e71e:	423d      	tst	r5, r7
 800e720:	d004      	beq.n	800e72c <HAL_ADC_IRQHandler+0x180>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800e722:	0020      	movs	r0, r4
 800e724:	f000 fb3f 	bl	800eda6 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	601f      	str	r7, [r3, #0]
}
 800e72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e72e:	2320      	movs	r3, #32
 800e730:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e732:	4313      	orrs	r3, r2
 800e734:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e736:	2301      	movs	r3, #1
 800e738:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e73a:	4313      	orrs	r3, r2
 800e73c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e73e:	e77c      	b.n	800e63a <HAL_ADC_IRQHandler+0x8e>
 800e740:	fffffefe 	.word	0xfffffefe

0800e744 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800e744:	2300      	movs	r3, #0
{
 800e746:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e748:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 800e74a:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800e74c:	0003      	movs	r3, r0
{
 800e74e:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hadc);
 800e750:	3354      	adds	r3, #84	@ 0x54
 800e752:	781a      	ldrb	r2, [r3, #0]
{
 800e754:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800e756:	2002      	movs	r0, #2
 800e758:	2a01      	cmp	r2, #1
 800e75a:	d04b      	beq.n	800e7f4 <HAL_ADC_ConfigChannel+0xb0>
 800e75c:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e75e:	692f      	ldr	r7, [r5, #16]
  __HAL_LOCK(hadc);
 800e760:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e762:	682e      	ldr	r6, [r5, #0]
 800e764:	0030      	movs	r0, r6
 800e766:	f7ff fda1 	bl	800e2ac <LL_ADC_REG_IsConversionOngoing>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d000      	beq.n	800e770 <HAL_ADC_ConfigChannel+0x2c>
 800e76e:	e0b6      	b.n	800e8de <HAL_ADC_ConfigChannel+0x19a>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800e770:	9b01      	ldr	r3, [sp, #4]
 800e772:	2280      	movs	r2, #128	@ 0x80
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	0612      	lsls	r2, r2, #24
 800e778:	9300      	str	r3, [sp, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800e77a:	9b01      	ldr	r3, [sp, #4]
 800e77c:	681c      	ldr	r4, [r3, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e77e:	2304      	movs	r3, #4
 800e780:	439f      	bics	r7, r3
    if (pConfig->Rank != ADC_RANK_NONE)
 800e782:	9b00      	ldr	r3, [sp, #0]
 800e784:	2b02      	cmp	r3, #2
 800e786:	d100      	bne.n	800e78a <HAL_ADC_ConfigChannel+0x46>
 800e788:	e081      	b.n	800e88e <HAL_ADC_ConfigChannel+0x14a>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e78a:	0263      	lsls	r3, r4, #9
 800e78c:	0a5b      	lsrs	r3, r3, #9
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e78e:	4297      	cmp	r7, r2
 800e790:	d132      	bne.n	800e7f8 <HAL_ADC_ConfigChannel+0xb4>
 800e792:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 800e794:	4313      	orrs	r3, r2
 800e796:	62b3      	str	r3, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	6971      	ldr	r1, [r6, #20]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	0222      	lsls	r2, r4, #8
 800e7a0:	4852      	ldr	r0, [pc, #328]	@ (800e8ec <HAL_ADC_ConfigChannel+0x1a8>)
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	4003      	ands	r3, r0
 800e7a6:	4391      	bics	r1, r2
 800e7a8:	430b      	orrs	r3, r1
 800e7aa:	6173      	str	r3, [r6, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e7ac:	2c00      	cmp	r4, #0
 800e7ae:	da1d      	bge.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e7b0:	21e0      	movs	r1, #224	@ 0xe0
 800e7b2:	4b4f      	ldr	r3, [pc, #316]	@ (800e8f0 <HAL_ADC_ConfigChannel+0x1ac>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e7b4:	484f      	ldr	r0, [pc, #316]	@ (800e8f4 <HAL_ADC_ConfigChannel+0x1b0>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	0449      	lsls	r1, r1, #17
 800e7ba:	4011      	ands	r1, r2
 800e7bc:	4284      	cmp	r4, r0
 800e7be:	d152      	bne.n	800e866 <HAL_ADC_ConfigChannel+0x122>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e7c0:	2080      	movs	r0, #128	@ 0x80
 800e7c2:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e7c4:	4202      	tst	r2, r0
 800e7c6:	d111      	bne.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	4c4b      	ldr	r4, [pc, #300]	@ (800e8f8 <HAL_ADC_ConfigChannel+0x1b4>)
 800e7cc:	4022      	ands	r2, r4
 800e7ce:	430a      	orrs	r2, r1
 800e7d0:	4310      	orrs	r0, r2
 800e7d2:	6018      	str	r0, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e7d4:	4b49      	ldr	r3, [pc, #292]	@ (800e8fc <HAL_ADC_ConfigChannel+0x1b8>)
 800e7d6:	494a      	ldr	r1, [pc, #296]	@ (800e900 <HAL_ADC_ConfigChannel+0x1bc>)
 800e7d8:	6818      	ldr	r0, [r3, #0]
 800e7da:	f7f1 fcc5 	bl	8000168 <__udivsi3>
 800e7de:	1c43      	adds	r3, r0, #1
 800e7e0:	200c      	movs	r0, #12
 800e7e2:	4358      	muls	r0, r3
 800e7e4:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 800e7e6:	9b05      	ldr	r3, [sp, #20]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d138      	bne.n	800e85e <HAL_ADC_ConfigChannel+0x11a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e7ec:	2000      	movs	r0, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	3554      	adds	r5, #84	@ 0x54
 800e7f2:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 800e7f4:	b007      	add	sp, #28
 800e7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800e7f8:	221f      	movs	r2, #31
 800e7fa:	210f      	movs	r1, #15
 800e7fc:	9f00      	ldr	r7, [sp, #0]
 800e7fe:	4017      	ands	r7, r2
 800e800:	40b9      	lsls	r1, r7
 800e802:	43c8      	mvns	r0, r1
 800e804:	9002      	str	r0, [sp, #8]
 800e806:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 800e808:	4388      	bics	r0, r1
 800e80a:	9003      	str	r0, [sp, #12]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d112      	bne.n	800e836 <HAL_ADC_ConfigChannel+0xf2>
 800e810:	0ea3      	lsrs	r3, r4, #26
 800e812:	4013      	ands	r3, r2
 800e814:	40bb      	lsls	r3, r7
 800e816:	9a03      	ldr	r2, [sp, #12]
 800e818:	4313      	orrs	r3, r2
 800e81a:	662b      	str	r3, [r5, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800e81c:	9b00      	ldr	r3, [sp, #0]
 800e81e:	69ea      	ldr	r2, [r5, #28]
 800e820:	089b      	lsrs	r3, r3, #2
 800e822:	3301      	adds	r3, #1
 800e824:	4293      	cmp	r3, r2
 800e826:	d8b7      	bhi.n	800e798 <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 800e828:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800e82a:	9902      	ldr	r1, [sp, #8]
 800e82c:	00a3      	lsls	r3, r4, #2
 800e82e:	0f1b      	lsrs	r3, r3, #28
 800e830:	40bb      	lsls	r3, r7
 800e832:	400a      	ands	r2, r1
 800e834:	e7ae      	b.n	800e794 <HAL_ADC_ConfigChannel+0x50>
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800e836:	0020      	movs	r0, r4
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800e838:	0013      	movs	r3, r2
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e83a:	0861      	lsrs	r1, r4, #1
 800e83c:	2900      	cmp	r1, #0
 800e83e:	d107      	bne.n	800e850 <HAL_ADC_ConfigChannel+0x10c>
  result <<= s;                        /* shift when v's highest bits are zero */
 800e840:	4098      	lsls	r0, r3
    return 32U;
 800e842:	2320      	movs	r3, #32
  if (value == 0U)
 800e844:	2800      	cmp	r0, #0
 800e846:	d0e5      	beq.n	800e814 <HAL_ADC_ConfigChannel+0xd0>
  return __builtin_clz(value);
 800e848:	f7f1 fe7c 	bl	8000544 <__clzsi2>
 800e84c:	b2c3      	uxtb	r3, r0
 800e84e:	e7e1      	b.n	800e814 <HAL_ADC_ConfigChannel+0xd0>
    result |= value & 1U;
 800e850:	2201      	movs	r2, #1
    result <<= 1U;
 800e852:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 800e854:	400a      	ands	r2, r1
 800e856:	4310      	orrs	r0, r2
    s--;
 800e858:	3b01      	subs	r3, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e85a:	0849      	lsrs	r1, r1, #1
 800e85c:	e7ee      	b.n	800e83c <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 800e85e:	9b05      	ldr	r3, [sp, #20]
 800e860:	3b01      	subs	r3, #1
 800e862:	9305      	str	r3, [sp, #20]
 800e864:	e7bf      	b.n	800e7e6 <HAL_ADC_ConfigChannel+0xa2>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800e866:	4827      	ldr	r0, [pc, #156]	@ (800e904 <HAL_ADC_ConfigChannel+0x1c0>)
 800e868:	4284      	cmp	r4, r0
 800e86a:	d10a      	bne.n	800e882 <HAL_ADC_ConfigChannel+0x13e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e86c:	2080      	movs	r0, #128	@ 0x80
 800e86e:	0440      	lsls	r0, r0, #17
 800e870:	4202      	tst	r2, r0
 800e872:	d1bb      	bne.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4c20      	ldr	r4, [pc, #128]	@ (800e8f8 <HAL_ADC_ConfigChannel+0x1b4>)
 800e878:	4022      	ands	r2, r4
 800e87a:	430a      	orrs	r2, r1
 800e87c:	4310      	orrs	r0, r2
 800e87e:	6018      	str	r0, [r3, #0]
}
 800e880:	e7b4      	b.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800e882:	4821      	ldr	r0, [pc, #132]	@ (800e908 <HAL_ADC_ConfigChannel+0x1c4>)
 800e884:	4284      	cmp	r4, r0
 800e886:	d1b1      	bne.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800e888:	2080      	movs	r0, #128	@ 0x80
 800e88a:	03c0      	lsls	r0, r0, #15
 800e88c:	e7f0      	b.n	800e870 <HAL_ADC_ConfigChannel+0x12c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e88e:	4297      	cmp	r7, r2
 800e890:	d104      	bne.n	800e89c <HAL_ADC_ConfigChannel+0x158>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e892:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800e894:	0262      	lsls	r2, r4, #9
 800e896:	0a52      	lsrs	r2, r2, #9
 800e898:	4393      	bics	r3, r2
 800e89a:	62b3      	str	r3, [r6, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e89c:	2c00      	cmp	r4, #0
 800e89e:	daa5      	bge.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e8a0:	4b13      	ldr	r3, [pc, #76]	@ (800e8f0 <HAL_ADC_ConfigChannel+0x1ac>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e8a2:	4914      	ldr	r1, [pc, #80]	@ (800e8f4 <HAL_ADC_ConfigChannel+0x1b0>)
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	428c      	cmp	r4, r1
 800e8a8:	d108      	bne.n	800e8bc <HAL_ADC_ConfigChannel+0x178>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e8aa:	21a0      	movs	r1, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e8ac:	6818      	ldr	r0, [r3, #0]
 800e8ae:	0449      	lsls	r1, r1, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e8b0:	400a      	ands	r2, r1
 800e8b2:	4911      	ldr	r1, [pc, #68]	@ (800e8f8 <HAL_ADC_ConfigChannel+0x1b4>)
 800e8b4:	4001      	ands	r1, r0
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	601a      	str	r2, [r3, #0]
}
 800e8ba:	e797      	b.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800e8bc:	4911      	ldr	r1, [pc, #68]	@ (800e904 <HAL_ADC_ConfigChannel+0x1c0>)
 800e8be:	428c      	cmp	r4, r1
 800e8c0:	d103      	bne.n	800e8ca <HAL_ADC_ConfigChannel+0x186>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e8c2:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	0409      	lsls	r1, r1, #16
 800e8c8:	e7f2      	b.n	800e8b0 <HAL_ADC_ConfigChannel+0x16c>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800e8ca:	490f      	ldr	r1, [pc, #60]	@ (800e908 <HAL_ADC_ConfigChannel+0x1c4>)
 800e8cc:	428c      	cmp	r4, r1
 800e8ce:	d000      	beq.n	800e8d2 <HAL_ADC_ConfigChannel+0x18e>
 800e8d0:	e78c      	b.n	800e7ec <HAL_ADC_ConfigChannel+0xa8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e8d2:	20c0      	movs	r0, #192	@ 0xc0
 800e8d4:	0440      	lsls	r0, r0, #17
 800e8d6:	4002      	ands	r2, r0
 800e8d8:	6819      	ldr	r1, [r3, #0]
 800e8da:	4807      	ldr	r0, [pc, #28]	@ (800e8f8 <HAL_ADC_ConfigChannel+0x1b4>)
 800e8dc:	e7ea      	b.n	800e8b4 <HAL_ADC_ConfigChannel+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8de:	2320      	movs	r3, #32
 800e8e0:	6daa      	ldr	r2, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e8e2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	65ab      	str	r3, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e8e8:	e781      	b.n	800e7ee <HAL_ADC_ConfigChannel+0xaa>
 800e8ea:	46c0      	nop			@ (mov r8, r8)
 800e8ec:	7fffff00 	.word	0x7fffff00
 800e8f0:	40012708 	.word	0x40012708
 800e8f4:	ac000800 	.word	0xac000800
 800e8f8:	fe3fffff 	.word	0xfe3fffff
 800e8fc:	20000050 	.word	0x20000050
 800e900:	00030d40 	.word	0x00030d40
 800e904:	b4002000 	.word	0xb4002000
 800e908:	b0001000 	.word	0xb0001000

0800e90c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800e90c:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e90e:	6805      	ldr	r5, [r0, #0]
{
 800e910:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e912:	0028      	movs	r0, r5
 800e914:	f7ff fcca 	bl	800e2ac <LL_ADC_REG_IsConversionOngoing>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d101      	bne.n	800e920 <ADC_ConversionStop+0x14>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800e91c:	2000      	movs	r0, #0
}
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800e920:	68ab      	ldr	r3, [r5, #8]
 800e922:	079b      	lsls	r3, r3, #30
 800e924:	d405      	bmi.n	800e932 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800e926:	68aa      	ldr	r2, [r5, #8]
 800e928:	4b0f      	ldr	r3, [pc, #60]	@ (800e968 <ADC_ConversionStop+0x5c>)
 800e92a:	401a      	ands	r2, r3
 800e92c:	2310      	movs	r3, #16
 800e92e:	4313      	orrs	r3, r2
 800e930:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800e932:	f7ff fca5 	bl	800e280 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800e936:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800e938:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	4233      	tst	r3, r6
 800e940:	d0ec      	beq.n	800e91c <ADC_ConversionStop+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800e942:	f7ff fc9d 	bl	800e280 <HAL_GetTick>
 800e946:	1b40      	subs	r0, r0, r5
 800e948:	2802      	cmp	r0, #2
 800e94a:	d9f6      	bls.n	800e93a <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	4233      	tst	r3, r6
 800e952:	d0f2      	beq.n	800e93a <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e954:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e956:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e958:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e95a:	4313      	orrs	r3, r2
 800e95c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e95e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e960:	4303      	orrs	r3, r0
 800e962:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800e964:	e7db      	b.n	800e91e <ADC_ConversionStop+0x12>
 800e966:	46c0      	nop			@ (mov r8, r8)
 800e968:	7fffffe8 	.word	0x7fffffe8

0800e96c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800e96c:	2300      	movs	r3, #0
{
 800e96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e970:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800e972:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e974:	6891      	ldr	r1, [r2, #8]
 800e976:	3301      	adds	r3, #1
{
 800e978:	0004      	movs	r4, r0
 800e97a:	4219      	tst	r1, r3
 800e97c:	d001      	beq.n	800e982 <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e97e:	2000      	movs	r0, #0
}
 800e980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800e982:	6890      	ldr	r0, [r2, #8]
 800e984:	4922      	ldr	r1, [pc, #136]	@ (800ea10 <ADC_Enable+0xa4>)
 800e986:	4208      	tst	r0, r1
 800e988:	d008      	beq.n	800e99c <ADC_Enable+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e98a:	2210      	movs	r2, #16
 800e98c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800e98e:	430a      	orrs	r2, r1
 800e990:	65a2      	str	r2, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e992:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e994:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800e996:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e998:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800e99a:	e7f1      	b.n	800e980 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 800e99c:	6891      	ldr	r1, [r2, #8]
 800e99e:	4f1d      	ldr	r7, [pc, #116]	@ (800ea14 <ADC_Enable+0xa8>)
 800e9a0:	4039      	ands	r1, r7
 800e9a2:	430b      	orrs	r3, r1
 800e9a4:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ea18 <ADC_Enable+0xac>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800e9aa:	021b      	lsls	r3, r3, #8
 800e9ac:	d421      	bmi.n	800e9f2 <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e9ae:	7e63      	ldrb	r3, [r4, #25]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d0e4      	beq.n	800e97e <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800e9b4:	f7ff fc64 	bl	800e280 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e9b8:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 800e9ba:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e9bc:	6822      	ldr	r2, [r4, #0]
 800e9be:	6813      	ldr	r3, [r2, #0]
 800e9c0:	422b      	tst	r3, r5
 800e9c2:	d1dc      	bne.n	800e97e <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e9c4:	6893      	ldr	r3, [r2, #8]
 800e9c6:	422b      	tst	r3, r5
 800e9c8:	d103      	bne.n	800e9d2 <ADC_Enable+0x66>
  MODIFY_REG(ADCx->CR,
 800e9ca:	6893      	ldr	r3, [r2, #8]
 800e9cc:	403b      	ands	r3, r7
 800e9ce:	432b      	orrs	r3, r5
 800e9d0:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e9d2:	f7ff fc55 	bl	800e280 <HAL_GetTick>
 800e9d6:	1b80      	subs	r0, r0, r6
 800e9d8:	2802      	cmp	r0, #2
 800e9da:	d9ef      	bls.n	800e9bc <ADC_Enable+0x50>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	422b      	tst	r3, r5
 800e9e2:	d1eb      	bne.n	800e9bc <ADC_Enable+0x50>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e9e4:	2310      	movs	r3, #16
 800e9e6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e9ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e9ee:	432b      	orrs	r3, r5
 800e9f0:	e7d1      	b.n	800e996 <ADC_Enable+0x2a>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800ea1c <ADC_Enable+0xb0>)
 800e9f4:	490a      	ldr	r1, [pc, #40]	@ (800ea20 <ADC_Enable+0xb4>)
 800e9f6:	6818      	ldr	r0, [r3, #0]
 800e9f8:	f7f1 fbb6 	bl	8000168 <__udivsi3>
 800e9fc:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800e9fe:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800ea00:	9b01      	ldr	r3, [sp, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0d3      	beq.n	800e9ae <ADC_Enable+0x42>
        wait_loop_index--;
 800ea06:	9b01      	ldr	r3, [sp, #4]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	e7f8      	b.n	800ea00 <ADC_Enable+0x94>
 800ea0e:	46c0      	nop			@ (mov r8, r8)
 800ea10:	80000017 	.word	0x80000017
 800ea14:	7fffffe8 	.word	0x7fffffe8
 800ea18:	40012708 	.word	0x40012708
 800ea1c:	20000050 	.word	0x20000050
 800ea20:	00030d40 	.word	0x00030d40

0800ea24 <HAL_ADC_Start>:
{
 800ea24:	b570      	push	{r4, r5, r6, lr}
 800ea26:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ea28:	6800      	ldr	r0, [r0, #0]
 800ea2a:	f7ff fc3f 	bl	800e2ac <LL_ADC_REG_IsConversionOngoing>
 800ea2e:	0006      	movs	r6, r0
    __HAL_LOCK(hadc);
 800ea30:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ea32:	2e00      	cmp	r6, #0
 800ea34:	d11d      	bne.n	800ea72 <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 800ea36:	0025      	movs	r5, r4
 800ea38:	3554      	adds	r5, #84	@ 0x54
 800ea3a:	782b      	ldrb	r3, [r5, #0]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d018      	beq.n	800ea72 <HAL_ADC_Start+0x4e>
 800ea40:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800ea42:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 800ea44:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 800ea46:	f7ff ff91 	bl	800e96c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d112      	bne.n	800ea74 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 800ea4e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ea50:	4b09      	ldr	r3, [pc, #36]	@ (800ea78 <HAL_ADC_Start+0x54>)
 800ea52:	401a      	ands	r2, r3
 800ea54:	2380      	movs	r3, #128	@ 0x80
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ea5a:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800ea5c:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ea5e:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800ea60:	65e0      	str	r0, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ea62:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800ea64:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(ADCx->CR,
 800ea66:	6899      	ldr	r1, [r3, #8]
 800ea68:	4a04      	ldr	r2, [pc, #16]	@ (800ea7c <HAL_ADC_Start+0x58>)
 800ea6a:	4011      	ands	r1, r2
 800ea6c:	2204      	movs	r2, #4
 800ea6e:	430a      	orrs	r2, r1
 800ea70:	609a      	str	r2, [r3, #8]
}
 800ea72:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800ea74:	702e      	strb	r6, [r5, #0]
 800ea76:	e7fc      	b.n	800ea72 <HAL_ADC_Start+0x4e>
 800ea78:	fffff0fe 	.word	0xfffff0fe
 800ea7c:	7fffffe8 	.word	0x7fffffe8

0800ea80 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ea80:	2201      	movs	r2, #1
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ea82:	6803      	ldr	r3, [r0, #0]
{
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ea88:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ea8a:	6899      	ldr	r1, [r3, #8]
 800ea8c:	4211      	tst	r1, r2
 800ea8e:	d101      	bne.n	800ea94 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ea90:	2000      	movs	r0, #0
}
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ea94:	2102      	movs	r1, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 800ea96:	4208      	tst	r0, r1
 800ea98:	d1fa      	bne.n	800ea90 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ea9a:	2005      	movs	r0, #5
 800ea9c:	689d      	ldr	r5, [r3, #8]
 800ea9e:	4005      	ands	r5, r0
 800eaa0:	2d01      	cmp	r5, #1
 800eaa2:	d11e      	bne.n	800eae2 <ADC_Disable+0x62>
  MODIFY_REG(ADCx->CR,
 800eaa4:	689a      	ldr	r2, [r3, #8]
 800eaa6:	4813      	ldr	r0, [pc, #76]	@ (800eaf4 <ADC_Disable+0x74>)
 800eaa8:	4002      	ands	r2, r0
 800eaaa:	4311      	orrs	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800eaac:	2203      	movs	r2, #3
 800eaae:	6099      	str	r1, [r3, #8]
 800eab0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800eab2:	f7ff fbe5 	bl	800e280 <HAL_GetTick>
 800eab6:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	422b      	tst	r3, r5
 800eabe:	d0e7      	beq.n	800ea90 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800eac0:	f7ff fbde 	bl	800e280 <HAL_GetTick>
 800eac4:	1b80      	subs	r0, r0, r6
 800eac6:	2802      	cmp	r0, #2
 800eac8:	d9f6      	bls.n	800eab8 <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	422b      	tst	r3, r5
 800ead0:	d0f2      	beq.n	800eab8 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ead2:	2310      	movs	r3, #16
 800ead4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ead6:	4313      	orrs	r3, r2
 800ead8:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eada:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800eadc:	432b      	orrs	r3, r5
 800eade:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800eae0:	e006      	b.n	800eaf0 <ADC_Disable+0x70>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eae2:	2310      	movs	r3, #16
 800eae4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800eae6:	430b      	orrs	r3, r1
 800eae8:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eaea:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800eaec:	431a      	orrs	r2, r3
 800eaee:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	e7ce      	b.n	800ea92 <ADC_Disable+0x12>
 800eaf4:	7fffffe8 	.word	0x7fffffe8

0800eaf8 <HAL_ADC_DeInit>:
{
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	0004      	movs	r4, r0
    return HAL_ERROR;
 800eafc:	2501      	movs	r5, #1
  if (hadc == NULL)
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d040      	beq.n	800eb84 <HAL_ADC_DeInit+0x8c>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800eb02:	2302      	movs	r3, #2
 800eb04:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800eb06:	4313      	orrs	r3, r2
 800eb08:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800eb0a:	f7ff feff 	bl	800e90c <ADC_ConversionStop>
 800eb0e:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800eb10:	d10b      	bne.n	800eb2a <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800eb12:	0020      	movs	r0, r4
 800eb14:	f7ff ffb4 	bl	800ea80 <ADC_Disable>
 800eb18:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 800eb1a:	d101      	bne.n	800eb20 <HAL_ADC_DeInit+0x28>
      hadc->State = HAL_ADC_STATE_READY;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800eb20:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800eb22:	4919      	ldr	r1, [pc, #100]	@ (800eb88 <HAL_ADC_DeInit+0x90>)
 800eb24:	6893      	ldr	r3, [r2, #8]
 800eb26:	400b      	ands	r3, r1
 800eb28:	6093      	str	r3, [r2, #8]
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	4917      	ldr	r1, [pc, #92]	@ (800eb8c <HAL_ADC_DeInit+0x94>)
 800eb2e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800eb30:	2600      	movs	r6, #0
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800eb32:	400a      	ands	r2, r1
 800eb34:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800eb36:	4a16      	ldr	r2, [pc, #88]	@ (800eb90 <HAL_ADC_DeInit+0x98>)
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800eb38:	4916      	ldr	r1, [pc, #88]	@ (800eb94 <HAL_ADC_DeInit+0x9c>)
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800eb3a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800eb3c:	68da      	ldr	r2, [r3, #12]
  HAL_ADC_MspDeInit(hadc);
 800eb3e:	0020      	movs	r0, r4
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800eb40:	400a      	ands	r2, r1
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800eb42:	2107      	movs	r1, #7
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800eb44:	60da      	str	r2, [r3, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800eb46:	695a      	ldr	r2, [r3, #20]
  __HAL_UNLOCK(hadc);
 800eb48:	3454      	adds	r4, #84	@ 0x54
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800eb4a:	438a      	bics	r2, r1
 800eb4c:	615a      	str	r2, [r3, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800eb4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eb50:	629e      	str	r6, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800eb52:	6a1a      	ldr	r2, [r3, #32]
 800eb54:	4910      	ldr	r1, [pc, #64]	@ (800eb98 <HAL_ADC_DeInit+0xa0>)
 800eb56:	400a      	ands	r2, r1
 800eb58:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800eb5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb5c:	400a      	ands	r2, r1
 800eb5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800eb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb62:	400a      	ands	r2, r1
 800eb64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800eb66:	691a      	ldr	r2, [r3, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800eb68:	490c      	ldr	r1, [pc, #48]	@ (800eb9c <HAL_ADC_DeInit+0xa4>)
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800eb6a:	0092      	lsls	r2, r2, #2
 800eb6c:	0892      	lsrs	r2, r2, #2
 800eb6e:	611a      	str	r2, [r3, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800eb70:	4a0b      	ldr	r2, [pc, #44]	@ (800eba0 <HAL_ADC_DeInit+0xa8>)
 800eb72:	6813      	ldr	r3, [r2, #0]
 800eb74:	400b      	ands	r3, r1
 800eb76:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 800eb78:	f7fb fb88 	bl	800a28c <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 800eb7c:	60a6      	str	r6, [r4, #8]
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800eb7e:	60e6      	str	r6, [r4, #12]
  hadc->State = HAL_ADC_STATE_RESET;
 800eb80:	6066      	str	r6, [r4, #4]
  __HAL_UNLOCK(hadc);
 800eb82:	7026      	strb	r6, [r4, #0]
}
 800eb84:	0028      	movs	r0, r5
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	6fffffe8 	.word	0x6fffffe8
 800eb8c:	fffff460 	.word	0xfffff460
 800eb90:	00000b9f 	.word	0x00000b9f
 800eb94:	831e0200 	.word	0x831e0200
 800eb98:	f000f000 	.word	0xf000f000
 800eb9c:	fe03ffff 	.word	0xfe03ffff
 800eba0:	40012708 	.word	0x40012708

0800eba4 <HAL_ADC_Stop>:
{
 800eba4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800eba6:	0006      	movs	r6, r0
 800eba8:	3654      	adds	r6, #84	@ 0x54
 800ebaa:	7833      	ldrb	r3, [r6, #0]
{
 800ebac:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800ebae:	2002      	movs	r0, #2
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d012      	beq.n	800ebda <HAL_ADC_Stop+0x36>
 800ebb4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ebb6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 800ebb8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ebba:	f7ff fea7 	bl	800e90c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	d109      	bne.n	800ebd6 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800ebc2:	0020      	movs	r0, r4
 800ebc4:	f7ff ff5c 	bl	800ea80 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d104      	bne.n	800ebd6 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800ebcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebce:	4a03      	ldr	r2, [pc, #12]	@ (800ebdc <HAL_ADC_Stop+0x38>)
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	431d      	orrs	r5, r3
 800ebd4:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	7033      	strb	r3, [r6, #0]
}
 800ebda:	bd70      	pop	{r4, r5, r6, pc}
 800ebdc:	fffffefe 	.word	0xfffffefe

0800ebe0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800ebe0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ebe2:	2300      	movs	r3, #0
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ebe4:	0005      	movs	r5, r0
 800ebe6:	2202      	movs	r2, #2
{
 800ebe8:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800ebea:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hadc);
 800ebec:	3554      	adds	r5, #84	@ 0x54
 800ebee:	782b      	ldrb	r3, [r5, #0]
{
 800ebf0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800ebf2:	9200      	str	r2, [sp, #0]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d03e      	beq.n	800ec76 <HAL_ADCEx_Calibration_Start+0x96>
 800ebf8:	2601      	movs	r6, #1
 800ebfa:	702e      	strb	r6, [r5, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800ebfc:	f7ff ff40 	bl	800ea80 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ec00:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 800ec02:	9000      	str	r0, [sp, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ec04:	6899      	ldr	r1, [r3, #8]
 800ec06:	000a      	movs	r2, r1
 800ec08:	4032      	ands	r2, r6
 800ec0a:	4231      	tst	r1, r6
 800ec0c:	d006      	beq.n	800ec1c <HAL_ADCEx_Calibration_Start+0x3c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ec0e:	2310      	movs	r3, #16
 800ec10:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ec12:	4313      	orrs	r3, r2
    ADC_STATE_CLR_SET(hadc->State,
 800ec14:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800ec16:	2300      	movs	r3, #0
 800ec18:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
 800ec1a:	e02c      	b.n	800ec76 <HAL_ADCEx_Calibration_Start+0x96>
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ec1c:	26ae      	movs	r6, #174	@ 0xae
    ADC_STATE_CLR_SET(hadc->State,
 800ec1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec20:	4942      	ldr	r1, [pc, #264]	@ (800ed2c <HAL_ADCEx_Calibration_Start+0x14c>)
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ec22:	02b6      	lsls	r6, r6, #10
    ADC_STATE_CLR_SET(hadc->State,
 800ec24:	4008      	ands	r0, r1
 800ec26:	3106      	adds	r1, #6
 800ec28:	31ff      	adds	r1, #255	@ 0xff
 800ec2a:	4301      	orrs	r1, r0
 800ec2c:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ec2e:	68d8      	ldr	r0, [r3, #12]
 800ec30:	493f      	ldr	r1, [pc, #252]	@ (800ed30 <HAL_ADCEx_Calibration_Start+0x150>)
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ec32:	46b4      	mov	ip, r6
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ec34:	4008      	ands	r0, r1
 800ec36:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ec38:	68d9      	ldr	r1, [r3, #12]
 800ec3a:	483e      	ldr	r0, [pc, #248]	@ (800ed34 <HAL_ADCEx_Calibration_Start+0x154>)
 800ec3c:	4001      	ands	r1, r0
 800ec3e:	2008      	movs	r0, #8
 800ec40:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->CR,
 800ec42:	493d      	ldr	r1, [pc, #244]	@ (800ed38 <HAL_ADCEx_Calibration_Start+0x158>)
 800ec44:	2780      	movs	r7, #128	@ 0x80
 800ec46:	689e      	ldr	r6, [r3, #8]
 800ec48:	063f      	lsls	r7, r7, #24
 800ec4a:	400e      	ands	r6, r1
 800ec4c:	433e      	orrs	r6, r7
 800ec4e:	609e      	str	r6, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ec50:	689e      	ldr	r6, [r3, #8]
 800ec52:	2e00      	cmp	r6, #0
 800ec54:	da12      	bge.n	800ec7c <HAL_ADCEx_Calibration_Start+0x9c>
        wait_loop_index++;
 800ec56:	9e02      	ldr	r6, [sp, #8]
 800ec58:	3601      	adds	r6, #1
 800ec5a:	9602      	str	r6, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ec5c:	9e02      	ldr	r6, [sp, #8]
 800ec5e:	4566      	cmp	r6, ip
 800ec60:	d3f6      	bcc.n	800ec50 <HAL_ADCEx_Calibration_Start+0x70>
          ADC_STATE_CLR_SET(hadc->State,
 800ec62:	2312      	movs	r3, #18
 800ec64:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ec66:	439a      	bics	r2, r3
 800ec68:	3b02      	subs	r3, #2
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800ec6e:	2300      	movs	r3, #0
 800ec70:	702b      	strb	r3, [r5, #0]
          return HAL_ERROR;
 800ec72:	2301      	movs	r3, #1
 800ec74:	9300      	str	r3, [sp, #0]
}
 800ec76:	9800      	ldr	r0, [sp, #0]
 800ec78:	b005      	add	sp, #20
 800ec7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800ec7c:	001e      	movs	r6, r3
 800ec7e:	277f      	movs	r7, #127	@ 0x7f
 800ec80:	36b4      	adds	r6, #180	@ 0xb4
 800ec82:	6836      	ldr	r6, [r6, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ec84:	3801      	subs	r0, #1
 800ec86:	403e      	ands	r6, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800ec88:	1992      	adds	r2, r2, r6
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d1da      	bne.n	800ec44 <HAL_ADCEx_Calibration_Start+0x64>
  MODIFY_REG(ADCx->CR,
 800ec8e:	2601      	movs	r6, #1
 800ec90:	6898      	ldr	r0, [r3, #8]
    calibration_factor_accumulated /= calibration_index;
 800ec92:	08d2      	lsrs	r2, r2, #3
 800ec94:	4008      	ands	r0, r1
 800ec96:	4330      	orrs	r0, r6
 800ec98:	6098      	str	r0, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800ec9a:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800ec9c:	691f      	ldr	r7, [r3, #16]
 800ec9e:	05c0      	lsls	r0, r0, #23
 800eca0:	4287      	cmp	r7, r0
 800eca2:	d31c      	bcc.n	800ecde <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 800eca4:	001e      	movs	r6, r3
 800eca6:	277f      	movs	r7, #127	@ 0x7f
 800eca8:	36b4      	adds	r6, #180	@ 0xb4
 800ecaa:	6830      	ldr	r0, [r6, #0]
 800ecac:	43b8      	bics	r0, r7
 800ecae:	4310      	orrs	r0, r2
 800ecb0:	6030      	str	r0, [r6, #0]
  MODIFY_REG(ADCx->CR,
 800ecb2:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ecb4:	2601      	movs	r6, #1
  MODIFY_REG(ADCx->CR,
 800ecb6:	4011      	ands	r1, r2
 800ecb8:	2202      	movs	r2, #2
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800ecbe:	f7ff fadf 	bl	800e280 <HAL_GetTick>
 800ecc2:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ecc4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ecc6:	689a      	ldr	r2, [r3, #8]
 800ecc8:	4232      	tst	r2, r6
 800ecca:	d11e      	bne.n	800ed0a <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800eccc:	68da      	ldr	r2, [r3, #12]
 800ecce:	9901      	ldr	r1, [sp, #4]
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800ecd4:	2203      	movs	r2, #3
 800ecd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecd8:	4393      	bics	r3, r2
 800ecda:	4333      	orrs	r3, r6
 800ecdc:	e79a      	b.n	800ec14 <HAL_ADCEx_Calibration_Start+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800ecde:	4817      	ldr	r0, [pc, #92]	@ (800ed3c <HAL_ADCEx_Calibration_Start+0x15c>)
 800ece0:	6807      	ldr	r7, [r0, #0]
 800ece2:	20f0      	movs	r0, #240	@ 0xf0
 800ece4:	0380      	lsls	r0, r0, #14
 800ece6:	4038      	ands	r0, r7
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800ece8:	27e0      	movs	r7, #224	@ 0xe0
 800ecea:	037f      	lsls	r7, r7, #13
 800ecec:	42b8      	cmp	r0, r7
 800ecee:	d3d9      	bcc.n	800eca4 <HAL_ADCEx_Calibration_Start+0xc4>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800ecf0:	0c80      	lsrs	r0, r0, #18
 800ecf2:	3803      	subs	r0, #3
 800ecf4:	4086      	lsls	r6, r0
 800ecf6:	9603      	str	r6, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 800ecf8:	9803      	ldr	r0, [sp, #12]
 800ecfa:	0840      	lsrs	r0, r0, #1
          delay_cpu_cycles--;
 800ecfc:	9003      	str	r0, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 800ecfe:	9803      	ldr	r0, [sp, #12]
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d0cf      	beq.n	800eca4 <HAL_ADCEx_Calibration_Start+0xc4>
          delay_cpu_cycles--;
 800ed04:	9803      	ldr	r0, [sp, #12]
 800ed06:	3801      	subs	r0, #1
 800ed08:	e7f8      	b.n	800ecfc <HAL_ADCEx_Calibration_Start+0x11c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ed0a:	f7ff fab9 	bl	800e280 <HAL_GetTick>
 800ed0e:	1bc0      	subs	r0, r0, r7
 800ed10:	2802      	cmp	r0, #2
 800ed12:	d9d7      	bls.n	800ecc4 <HAL_ADCEx_Calibration_Start+0xe4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ed14:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	4233      	tst	r3, r6
 800ed1a:	d0d3      	beq.n	800ecc4 <HAL_ADCEx_Calibration_Start+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ed20:	4313      	orrs	r3, r2
 800ed22:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed24:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800ed26:	4333      	orrs	r3, r6
 800ed28:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800ed2a:	e7a2      	b.n	800ec72 <HAL_ADCEx_Calibration_Start+0x92>
 800ed2c:	fffffefd 	.word	0xfffffefd
 800ed30:	00008003 	.word	0x00008003
 800ed34:	ffff7ffc 	.word	0xffff7ffc
 800ed38:	7fffffe8 	.word	0x7fffffe8
 800ed3c:	40012708 	.word	0x40012708

0800ed40 <HAL_ADCEx_Calibration_GetValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return the selected ADC calibration value */
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 800ed40:	6803      	ldr	r3, [r0, #0]
 800ed42:	33b4      	adds	r3, #180	@ 0xb4
 800ed44:	6818      	ldr	r0, [r3, #0]
 800ed46:	237f      	movs	r3, #127	@ 0x7f
 800ed48:	4018      	ands	r0, r3
}
 800ed4a:	4770      	bx	lr

0800ed4c <HAL_ADCEx_Calibration_SetValue>:
  * @param hadc ADC handle
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t CalibrationFactor)
{
 800ed4c:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  __HAL_LOCK(hadc);
 800ed4e:	0004      	movs	r4, r0
 800ed50:	3454      	adds	r4, #84	@ 0x54
 800ed52:	7822      	ldrb	r2, [r4, #0]
{
 800ed54:	0003      	movs	r3, r0
 800ed56:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800ed58:	2002      	movs	r0, #2
 800ed5a:	2a01      	cmp	r2, #1
 800ed5c:	d016      	beq.n	800ed8c <HAL_ADCEx_Calibration_SetValue+0x40>
 800ed5e:	2101      	movs	r1, #1
 800ed60:	7021      	strb	r1, [r4, #0]

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ed62:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ed64:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ed66:	6890      	ldr	r0, [r2, #8]
 800ed68:	4208      	tst	r0, r1
 800ed6a:	d010      	beq.n	800ed8e <HAL_ADCEx_Calibration_SetValue+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ed6c:	0030      	movs	r0, r6
 800ed6e:	3103      	adds	r1, #3
 800ed70:	4008      	ands	r0, r1

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800ed72:	420e      	tst	r6, r1
 800ed74:	d10b      	bne.n	800ed8e <HAL_ADCEx_Calibration_SetValue+0x42>
     )
  {
    hadc->Instance->CALFACT &= ~ADC_CALFACT_CALFACT;
 800ed76:	0013      	movs	r3, r2
 800ed78:	33b4      	adds	r3, #180	@ 0xb4
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	317b      	adds	r1, #123	@ 0x7b
 800ed7e:	438a      	bics	r2, r1
 800ed80:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT |= CalibrationFactor;
 800ed82:	6819      	ldr	r1, [r3, #0]
 800ed84:	4329      	orrs	r1, r5
 800ed86:	6019      	str	r1, [r3, #0]

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800ed88:	2300      	movs	r3, #0
 800ed8a:	7023      	strb	r3, [r4, #0]

  return tmp_hal_status;
}
 800ed8c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ed8e:	2220      	movs	r2, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed90:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ed92:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800ed94:	430a      	orrs	r2, r1
 800ed96:	659a      	str	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ed9a:	4302      	orrs	r2, r0
 800ed9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 800ed9e:	e7f3      	b.n	800ed88 <HAL_ADCEx_Calibration_SetValue+0x3c>

0800eda0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800eda0:	4770      	bx	lr

0800eda2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 800eda2:	4770      	bx	lr

0800eda4 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 800eda4:	4770      	bx	lr

0800eda6 <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 800eda6:	4770      	bx	lr

0800eda8 <HAL_COMP_Init>:
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800eda8:	2300      	movs	r3, #0
{
 800edaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edac:	b085      	sub	sp, #20
 800edae:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800edb0:	9303      	str	r3, [sp, #12]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800edb2:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800edb4:	429c      	cmp	r4, r3
 800edb6:	d100      	bne.n	800edba <HAL_COMP_Init+0x12>
 800edb8:	e0a8      	b.n	800ef0c <HAL_COMP_Init+0x164>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	da00      	bge.n	800edc4 <HAL_COMP_Init+0x1c>
 800edc2:	e0a3      	b.n	800ef0c <HAL_COMP_Init+0x164>
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800edc4:	0025      	movs	r5, r4
 800edc6:	3529      	adds	r5, #41	@ 0x29
 800edc8:	782a      	ldrb	r2, [r5, #0]
 800edca:	b2d3      	uxtb	r3, r2
 800edcc:	2a00      	cmp	r2, #0
 800edce:	d106      	bne.n	800edde <HAL_COMP_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800edd0:	0022      	movs	r2, r4
 800edd2:	3228      	adds	r2, #40	@ 0x28
 800edd4:	7013      	strb	r3, [r2, #0]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800edd6:	0020      	movs	r0, r4
      COMP_CLEAR_ERRORCODE(hcomp);
 800edd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_COMP_MspInit(hcomp);
 800edda:	f7fb fa6f 	bl	800a2bc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800edde:	6826      	ldr	r6, [r4, #0]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800ede0:	6920      	ldr	r0, [r4, #16]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800ede2:	6833      	ldr	r3, [r6, #0]
               | hcomp->Init.Mode
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800ede4:	6831      	ldr	r1, [r6, #0]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800ede6:	9301      	str	r3, [sp, #4]
               | hcomp->Init.InputPlus
 800ede8:	6963      	ldr	r3, [r4, #20]
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */

#if defined(COMP2)
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800edea:	6867      	ldr	r7, [r4, #4]
               | hcomp->Init.InputPlus
 800edec:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 800edee:	6a20      	ldr	r0, [r4, #32]
 800edf0:	4303      	orrs	r3, r0
               | hcomp->Init.Hysteresis
 800edf2:	69a0      	ldr	r0, [r4, #24]
 800edf4:	4303      	orrs	r3, r0
               | hcomp->Init.OutputPol
 800edf6:	69e0      	ldr	r0, [r4, #28]
 800edf8:	4303      	orrs	r3, r0
    tmp_csr = (hcomp->Init.InputMinus
 800edfa:	68e0      	ldr	r0, [r4, #12]
 800edfc:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 800edfe:	484a      	ldr	r0, [pc, #296]	@ (800ef28 <HAL_COMP_Init+0x180>)
 800ee00:	4001      	ands	r1, r0
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800ee02:	2080      	movs	r0, #128	@ 0x80
    MODIFY_REG(hcomp->Instance->CSR,
 800ee04:	430b      	orrs	r3, r1
 800ee06:	6033      	str	r3, [r6, #0]
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800ee08:	4948      	ldr	r1, [pc, #288]	@ (800ef2c <HAL_COMP_Init+0x184>)
 800ee0a:	4b49      	ldr	r3, [pc, #292]	@ (800ef30 <HAL_COMP_Init+0x188>)
 800ee0c:	0100      	lsls	r0, r0, #4
 800ee0e:	4287      	cmp	r7, r0
 800ee10:	d116      	bne.n	800ee40 <HAL_COMP_Init+0x98>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800ee12:	6818      	ldr	r0, [r3, #0]
 800ee14:	4001      	ands	r1, r0
 800ee16:	6019      	str	r1, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800ee18:	6859      	ldr	r1, [r3, #4]
 800ee1a:	4339      	orrs	r1, r7
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800ee1c:	6059      	str	r1, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800ee1e:	2180      	movs	r1, #128	@ 0x80
 800ee20:	68a0      	ldr	r0, [r4, #8]
 800ee22:	01c9      	lsls	r1, r1, #7
 800ee24:	4288      	cmp	r0, r1
 800ee26:	d018      	beq.n	800ee5a <HAL_COMP_Init+0xb2>
 800ee28:	27a0      	movs	r7, #160	@ 0xa0
 800ee2a:	01ff      	lsls	r7, r7, #7
 800ee2c:	42b8      	cmp	r0, r7
 800ee2e:	d01b      	beq.n	800ee68 <HAL_COMP_Init+0xc0>
 800ee30:	2801      	cmp	r0, #1
 800ee32:	d03a      	beq.n	800eeaa <HAL_COMP_Init+0x102>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
        break;

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800ee34:	6819      	ldr	r1, [r3, #0]
 800ee36:	483f      	ldr	r0, [pc, #252]	@ (800ef34 <HAL_COMP_Init+0x18c>)
 800ee38:	4001      	ands	r1, r0
 800ee3a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800ee3c:	6859      	ldr	r1, [r3, #4]
 800ee3e:	e011      	b.n	800ee64 <HAL_COMP_Init+0xbc>
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800ee40:	22c0      	movs	r2, #192	@ 0xc0
 800ee42:	0152      	lsls	r2, r2, #5
 800ee44:	4297      	cmp	r7, r2
 800ee46:	d105      	bne.n	800ee54 <HAL_COMP_Init+0xac>
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800ee48:	681f      	ldr	r7, [r3, #0]
 800ee4a:	4338      	orrs	r0, r7
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800ee4c:	6018      	str	r0, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800ee4e:	6858      	ldr	r0, [r3, #4]
 800ee50:	4001      	ands	r1, r0
 800ee52:	e7e3      	b.n	800ee1c <HAL_COMP_Init+0x74>
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800ee54:	6818      	ldr	r0, [r3, #0]
 800ee56:	4008      	ands	r0, r1
 800ee58:	e7f8      	b.n	800ee4c <HAL_COMP_Init+0xa4>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800ee5a:	6819      	ldr	r1, [r3, #0]
 800ee5c:	4308      	orrs	r0, r1
 800ee5e:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800ee60:	6859      	ldr	r1, [r3, #4]
 800ee62:	4834      	ldr	r0, [pc, #208]	@ (800ef34 <HAL_COMP_Init+0x18c>)
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800ee64:	4001      	ands	r1, r0
 800ee66:	e005      	b.n	800ee74 <HAL_COMP_Init+0xcc>
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	4f32      	ldr	r7, [pc, #200]	@ (800ef34 <HAL_COMP_Init+0x18c>)
 800ee6c:	4038      	ands	r0, r7
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800ee6e:	6018      	str	r0, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800ee70:	6858      	ldr	r0, [r3, #4]
 800ee72:	4301      	orrs	r1, r0
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800ee74:	6059      	str	r1, [r3, #4]
    }


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800ee76:	2330      	movs	r3, #48	@ 0x30
 800ee78:	6831      	ldr	r1, [r6, #0]
 800ee7a:	4219      	tst	r1, r3
 800ee7c:	d118      	bne.n	800eeb0 <HAL_COMP_Init+0x108>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ee7e:	4b2e      	ldr	r3, [pc, #184]	@ (800ef38 <HAL_COMP_Init+0x190>)

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800ee80:	6a64      	ldr	r4, [r4, #36]	@ 0x24
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ee82:	18f3      	adds	r3, r6, r3
 800ee84:	425a      	negs	r2, r3
 800ee86:	4153      	adcs	r3, r2
 800ee88:	2280      	movs	r2, #128	@ 0x80
 800ee8a:	425b      	negs	r3, r3
 800ee8c:	0c5b      	lsrs	r3, r3, #17
 800ee8e:	045b      	lsls	r3, r3, #17
 800ee90:	02d2      	lsls	r2, r2, #11
 800ee92:	482a      	ldr	r0, [pc, #168]	@ (800ef3c <HAL_COMP_Init+0x194>)
 800ee94:	492a      	ldr	r1, [pc, #168]	@ (800ef40 <HAL_COMP_Init+0x198>)
 800ee96:	189b      	adds	r3, r3, r2
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800ee98:	07a2      	lsls	r2, r4, #30
 800ee9a:	d11c      	bne.n	800eed6 <HAL_COMP_Init+0x12e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ee9c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800ee9e:	439a      	bics	r2, r3
 800eea0:	67c2      	str	r2, [r0, #124]	@ 0x7c
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800eea2:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 800eea4:	439a      	bics	r2, r3
 800eea6:	67ca      	str	r2, [r1, #124]	@ 0x7c
}
 800eea8:	e02c      	b.n	800ef04 <HAL_COMP_Init+0x15c>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	4308      	orrs	r0, r1
 800eeae:	e7de      	b.n	800ee6e <HAL_COMP_Init+0xc6>
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800eeb0:	9a01      	ldr	r2, [sp, #4]
 800eeb2:	421a      	tst	r2, r3
 800eeb4:	d1e3      	bne.n	800ee7e <HAL_COMP_Init+0xd6>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800eeb6:	4b23      	ldr	r3, [pc, #140]	@ (800ef44 <HAL_COMP_Init+0x19c>)
 800eeb8:	4923      	ldr	r1, [pc, #140]	@ (800ef48 <HAL_COMP_Init+0x1a0>)
 800eeba:	6818      	ldr	r0, [r3, #0]
 800eebc:	f7f1 f954 	bl	8000168 <__udivsi3>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	2014      	movs	r0, #20
 800eec4:	4358      	muls	r0, r3
 800eec6:	9003      	str	r0, [sp, #12]
      while (wait_loop_index != 0UL)
 800eec8:	9b03      	ldr	r3, [sp, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d0d7      	beq.n	800ee7e <HAL_COMP_Init+0xd6>
        wait_loop_index--;
 800eece:	9b03      	ldr	r3, [sp, #12]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	9303      	str	r3, [sp, #12]
 800eed4:	e7f8      	b.n	800eec8 <HAL_COMP_Init+0x120>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800eed6:	4a1d      	ldr	r2, [pc, #116]	@ (800ef4c <HAL_COMP_Init+0x1a4>)
 800eed8:	06e6      	lsls	r6, r4, #27
 800eeda:	d519      	bpl.n	800ef10 <HAL_COMP_Init+0x168>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800eedc:	6816      	ldr	r6, [r2, #0]
 800eede:	431e      	orrs	r6, r3
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800eee0:	6016      	str	r6, [r2, #0]
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800eee2:	06a6      	lsls	r6, r4, #26
 800eee4:	d517      	bpl.n	800ef16 <HAL_COMP_Init+0x16e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800eee6:	6856      	ldr	r6, [r2, #4]
 800eee8:	431e      	orrs	r6, r3
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800eeea:	6056      	str	r6, [r2, #4]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800eeec:	60d3      	str	r3, [r2, #12]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800eeee:	6113      	str	r3, [r2, #16]
      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
      LL_EXTI_ClearFallingFlag_0_31(exti_line);

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800eef0:	07a2      	lsls	r2, r4, #30
 800eef2:	d513      	bpl.n	800ef1c <HAL_COMP_Init+0x174>
  SET_BIT(EXTI->EMR1, ExtiLine);
 800eef4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800eef6:	431a      	orrs	r2, r3
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800eef8:	67c2      	str	r2, [r0, #124]	@ 0x7c
  SET_BIT(EXTI->IMR1, ExtiLine);
 800eefa:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800eefc:	07e4      	lsls	r4, r4, #31
 800eefe:	d5d1      	bpl.n	800eea4 <HAL_COMP_Init+0xfc>
 800ef00:	4313      	orrs	r3, r2
 800ef02:	67cb      	str	r3, [r1, #124]	@ 0x7c
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800ef04:	782b      	ldrb	r3, [r5, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00b      	beq.n	800ef22 <HAL_COMP_Init+0x17a>
  HAL_StatusTypeDef status = HAL_OK;
 800ef0a:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800ef0c:	b005      	add	sp, #20
 800ef0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ef10:	6816      	ldr	r6, [r2, #0]
 800ef12:	439e      	bics	r6, r3
 800ef14:	e7e4      	b.n	800eee0 <HAL_COMP_Init+0x138>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ef16:	6856      	ldr	r6, [r2, #4]
 800ef18:	439e      	bics	r6, r3
 800ef1a:	e7e6      	b.n	800eeea <HAL_COMP_Init+0x142>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ef1c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800ef1e:	439a      	bics	r2, r3
 800ef20:	e7ea      	b.n	800eef8 <HAL_COMP_Init+0x150>
      hcomp->State = HAL_COMP_STATE_READY;
 800ef22:	2301      	movs	r3, #1
 800ef24:	702b      	strb	r3, [r5, #0]
 800ef26:	e7f0      	b.n	800ef0a <HAL_COMP_Init+0x162>
 800ef28:	fe00700f 	.word	0xfe00700f
 800ef2c:	fffff7ff 	.word	0xfffff7ff
 800ef30:	40010200 	.word	0x40010200
 800ef34:	ffffbfff 	.word	0xffffbfff
 800ef38:	bffefe00 	.word	0xbffefe00
 800ef3c:	40021808 	.word	0x40021808
 800ef40:	40021804 	.word	0x40021804
 800ef44:	20000050 	.word	0x20000050
 800ef48:	00030d40 	.word	0x00030d40
 800ef4c:	40021800 	.word	0x40021800

0800ef50 <HAL_COMP_DeInit>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_DeInit(COMP_HandleTypeDef *hcomp)
{
 800ef50:	b570      	push	{r4, r5, r6, lr}
 800ef52:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800ef54:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800ef56:	2c00      	cmp	r4, #0
 800ef58:	d00e      	beq.n	800ef78 <HAL_COMP_DeInit+0x28>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800ef5a:	6823      	ldr	r3, [r4, #0]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	2a00      	cmp	r2, #0
 800ef60:	db0a      	blt.n	800ef78 <HAL_COMP_DeInit+0x28>
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Set COMP_CSR register to reset value */
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800ef62:	2500      	movs	r5, #0

    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    hcomp->MspDeInitCallback(hcomp);
#else
    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    HAL_COMP_MspDeInit(hcomp);
 800ef64:	0020      	movs	r0, r4
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800ef66:	601d      	str	r5, [r3, #0]
    HAL_COMP_MspDeInit(hcomp);
 800ef68:	f7fb f9f0 	bl	800a34c <HAL_COMP_MspDeInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Set HAL COMP handle state */
    hcomp->State = HAL_COMP_STATE_RESET;
 800ef6c:	0023      	movs	r3, r4
  HAL_StatusTypeDef status = HAL_OK;
 800ef6e:	0028      	movs	r0, r5
    hcomp->State = HAL_COMP_STATE_RESET;
 800ef70:	3329      	adds	r3, #41	@ 0x29

    /* Release Lock */
    __HAL_UNLOCK(hcomp);
 800ef72:	3428      	adds	r4, #40	@ 0x28
    hcomp->State = HAL_COMP_STATE_RESET;
 800ef74:	701d      	strb	r5, [r3, #0]
    __HAL_UNLOCK(hcomp);
 800ef76:	7025      	strb	r5, [r4, #0]
  }

  return status;
}
 800ef78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef7c <HAL_COMP_Start>:
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
  __IO uint32_t wait_loop_index = 0UL;
 800ef7c:	2200      	movs	r2, #0
{
 800ef7e:	b513      	push	{r0, r1, r4, lr}
 800ef80:	0003      	movs	r3, r0
  __IO uint32_t wait_loop_index = 0UL;
 800ef82:	9201      	str	r2, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800ef84:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d018      	beq.n	800efbc <HAL_COMP_Start+0x40>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	6811      	ldr	r1, [r2, #0]
 800ef8e:	2900      	cmp	r1, #0
 800ef90:	db14      	blt.n	800efbc <HAL_COMP_Start+0x40>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800ef92:	3329      	adds	r3, #41	@ 0x29
 800ef94:	781c      	ldrb	r4, [r3, #0]
 800ef96:	b2e1      	uxtb	r1, r4
 800ef98:	4284      	cmp	r4, r0
 800ef9a:	d10f      	bne.n	800efbc <HAL_COMP_Start+0x40>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800ef9c:	6810      	ldr	r0, [r2, #0]
 800ef9e:	4301      	orrs	r1, r0
 800efa0:	6011      	str	r1, [r2, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800efa2:	2202      	movs	r2, #2
 800efa4:	701a      	strb	r2, [r3, #0]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800efa6:	4b08      	ldr	r3, [pc, #32]	@ (800efc8 <HAL_COMP_Start+0x4c>)
 800efa8:	4908      	ldr	r1, [pc, #32]	@ (800efcc <HAL_COMP_Start+0x50>)
 800efaa:	6818      	ldr	r0, [r3, #0]
 800efac:	f7f1 f8dc 	bl	8000168 <__udivsi3>
 800efb0:	3001      	adds	r0, #1
 800efb2:	00c0      	lsls	r0, r0, #3
 800efb4:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800efb6:	9801      	ldr	r0, [sp, #4]
 800efb8:	2800      	cmp	r0, #0
 800efba:	d100      	bne.n	800efbe <HAL_COMP_Start+0x42>
      status = HAL_ERROR;
    }
  }

  return status;
}
 800efbc:	bd16      	pop	{r1, r2, r4, pc}
        wait_loop_index--;
 800efbe:	9b01      	ldr	r3, [sp, #4]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	e7f7      	b.n	800efb6 <HAL_COMP_Start+0x3a>
 800efc6:	46c0      	nop			@ (mov r8, r8)
 800efc8:	20000050 	.word	0x20000050
 800efcc:	00030d40 	.word	0x00030d40

0800efd0 <HAL_COMP_IRQHandler>:
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800efd0:	4a13      	ldr	r2, [pc, #76]	@ (800f020 <HAL_COMP_IRQHandler+0x50>)
 800efd2:	6803      	ldr	r3, [r0, #0]
{
 800efd4:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d112      	bne.n	800f000 <HAL_COMP_IRQHandler+0x30>
 800efda:	2380      	movs	r3, #128	@ 0x80
 800efdc:	029b      	lsls	r3, r3, #10
#if defined(COMP2)
  uint32_t comparator_window_mode;
  uint32_t comparator_window_exti_lines;

  comparator_window_mode = READ_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800efde:	6811      	ldr	r1, [r2, #0]
  comparator_window_mode |= READ_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800efe0:	6852      	ldr	r2, [r2, #4]
 800efe2:	4311      	orrs	r1, r2
 800efe4:	2280      	movs	r2, #128	@ 0x80
 800efe6:	0112      	lsls	r2, r2, #4
 800efe8:	4011      	ands	r1, r2
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800efea:	4a0e      	ldr	r2, [pc, #56]	@ (800f024 <HAL_COMP_IRQHandler+0x54>)
 800efec:	68d4      	ldr	r4, [r2, #12]
 800efee:	401c      	ands	r4, r3
 800eff0:	42a3      	cmp	r3, r4
 800eff2:	d108      	bne.n	800f006 <HAL_COMP_IRQHandler+0x36>
  /* Check COMP EXTI flag */
  if (LL_EXTI_IsActiveRisingFlag_0_31(exti_line) != 0UL)
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if (comparator_window_mode != 0UL)
 800eff4:	2900      	cmp	r1, #0
 800eff6:	d110      	bne.n	800f01a <HAL_COMP_IRQHandler+0x4a>
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800eff8:	60d3      	str	r3, [r2, #12]

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800effa:	f7f9 fa87 	bl	800850c <HAL_COMP_TriggerCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 800effe:	bd10      	pop	{r4, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800f000:	2380      	movs	r3, #128	@ 0x80
 800f002:	02db      	lsls	r3, r3, #11
 800f004:	e7eb      	b.n	800efde <HAL_COMP_IRQHandler+0xe>
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800f006:	6914      	ldr	r4, [r2, #16]
 800f008:	401c      	ands	r4, r3
 800f00a:	42a3      	cmp	r3, r4
 800f00c:	d1f7      	bne.n	800effe <HAL_COMP_IRQHandler+0x2e>
    if (comparator_window_mode != 0UL)
 800f00e:	2900      	cmp	r1, #0
 800f010:	d001      	beq.n	800f016 <HAL_COMP_IRQHandler+0x46>
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800f012:	23c0      	movs	r3, #192	@ 0xc0
 800f014:	02db      	lsls	r3, r3, #11
 800f016:	6113      	str	r3, [r2, #16]
}
 800f018:	e7ef      	b.n	800effa <HAL_COMP_IRQHandler+0x2a>
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800f01a:	23c0      	movs	r3, #192	@ 0xc0
 800f01c:	02db      	lsls	r3, r3, #11
 800f01e:	e7eb      	b.n	800eff8 <HAL_COMP_IRQHandler+0x28>
 800f020:	40010200 	.word	0x40010200
 800f024:	40021800 	.word	0x40021800

0800f028 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f028:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f02a:	24ff      	movs	r4, #255	@ 0xff
 800f02c:	2203      	movs	r2, #3
 800f02e:	000b      	movs	r3, r1
 800f030:	0021      	movs	r1, r4
 800f032:	4002      	ands	r2, r0
 800f034:	00d2      	lsls	r2, r2, #3
 800f036:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f038:	019b      	lsls	r3, r3, #6
 800f03a:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f03c:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f03e:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800f040:	2800      	cmp	r0, #0
 800f042:	db0a      	blt.n	800f05a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f044:	24c0      	movs	r4, #192	@ 0xc0
 800f046:	4a0b      	ldr	r2, [pc, #44]	@ (800f074 <HAL_NVIC_SetPriority+0x4c>)
 800f048:	0880      	lsrs	r0, r0, #2
 800f04a:	0080      	lsls	r0, r0, #2
 800f04c:	1880      	adds	r0, r0, r2
 800f04e:	00a4      	lsls	r4, r4, #2
 800f050:	5902      	ldr	r2, [r0, r4]
 800f052:	400a      	ands	r2, r1
 800f054:	4313      	orrs	r3, r2
 800f056:	5103      	str	r3, [r0, r4]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800f058:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f05a:	220f      	movs	r2, #15
 800f05c:	4010      	ands	r0, r2
 800f05e:	3808      	subs	r0, #8
 800f060:	4a05      	ldr	r2, [pc, #20]	@ (800f078 <HAL_NVIC_SetPriority+0x50>)
 800f062:	0880      	lsrs	r0, r0, #2
 800f064:	0080      	lsls	r0, r0, #2
 800f066:	1880      	adds	r0, r0, r2
 800f068:	69c2      	ldr	r2, [r0, #28]
 800f06a:	4011      	ands	r1, r2
 800f06c:	4319      	orrs	r1, r3
 800f06e:	61c1      	str	r1, [r0, #28]
 800f070:	e7f2      	b.n	800f058 <HAL_NVIC_SetPriority+0x30>
 800f072:	46c0      	nop			@ (mov r8, r8)
 800f074:	e000e100 	.word	0xe000e100
 800f078:	e000ed00 	.word	0xe000ed00

0800f07c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f07c:	2800      	cmp	r0, #0
 800f07e:	db05      	blt.n	800f08c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f080:	231f      	movs	r3, #31
 800f082:	4018      	ands	r0, r3
 800f084:	3b1e      	subs	r3, #30
 800f086:	4083      	lsls	r3, r0
 800f088:	4a01      	ldr	r2, [pc, #4]	@ (800f090 <HAL_NVIC_EnableIRQ+0x14>)
 800f08a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f08c:	4770      	bx	lr
 800f08e:	46c0      	nop			@ (mov r8, r8)
 800f090:	e000e100 	.word	0xe000e100

0800f094 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f094:	2280      	movs	r2, #128	@ 0x80
 800f096:	1e43      	subs	r3, r0, #1
 800f098:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800f09a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d20d      	bcs.n	800f0bc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f0a0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f0a2:	4a07      	ldr	r2, [pc, #28]	@ (800f0c0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f0a4:	4807      	ldr	r0, [pc, #28]	@ (800f0c4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f0a6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f0a8:	6a03      	ldr	r3, [r0, #32]
 800f0aa:	0609      	lsls	r1, r1, #24
 800f0ac:	021b      	lsls	r3, r3, #8
 800f0ae:	0a1b      	lsrs	r3, r3, #8
 800f0b0:	430b      	orrs	r3, r1
 800f0b2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f0b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f0b6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f0b8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f0ba:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800f0bc:	4770      	bx	lr
 800f0be:	46c0      	nop			@ (mov r8, r8)
 800f0c0:	e000e010 	.word	0xe000e010
 800f0c4:	e000ed00 	.word	0xe000ed00

0800f0c8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f0c8:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f0ca:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800f0cc:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800f0ce:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800f0d0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800f0d2:	2c00      	cmp	r4, #0
 800f0d4:	d002      	beq.n	800f0dc <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f0d6:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 800f0d8:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 800f0da:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f0dc:	241c      	movs	r4, #28
 800f0de:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f0e0:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800f0e2:	4025      	ands	r5, r4
 800f0e4:	3c1b      	subs	r4, #27
 800f0e6:	40ac      	lsls	r4, r5
 800f0e8:	6074      	str	r4, [r6, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f0ea:	6804      	ldr	r4, [r0, #0]
 800f0ec:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f0ee:	6883      	ldr	r3, [r0, #8]
 800f0f0:	2b10      	cmp	r3, #16
 800f0f2:	d102      	bne.n	800f0fa <DMA_SetConfig+0x32>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f0f4:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f0f6:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f0f8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = SrcAddress;
 800f0fa:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800f0fc:	60e2      	str	r2, [r4, #12]
}
 800f0fe:	e7fb      	b.n	800f0f8 <DMA_SetConfig+0x30>

0800f100 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f100:	b570      	push	{r4, r5, r6, lr}
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f102:	6806      	ldr	r6, [r0, #0]
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f104:	6c44      	ldr	r4, [r0, #68]	@ 0x44
{
 800f106:	0005      	movs	r5, r0

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800f108:	b2f0      	uxtb	r0, r6
 800f10a:	2114      	movs	r1, #20
 800f10c:	3808      	subs	r0, #8
 800f10e:	f7f1 f82b 	bl	8000168 <__udivsi3>
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f112:	4b0a      	ldr	r3, [pc, #40]	@ (800f13c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f114:	08a4      	lsrs	r4, r4, #2
 800f116:	00a4      	lsls	r4, r4, #2
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f118:	429e      	cmp	r6, r3
 800f11a:	d80a      	bhi.n	800f132 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f11c:	4b08      	ldr	r3, [pc, #32]	@ (800f140 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 800f11e:	18e4      	adds	r4, r4, r3
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f120:	4b08      	ldr	r3, [pc, #32]	@ (800f144 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800f122:	64ac      	str	r4, [r5, #72]	@ 0x48
 800f124:	64eb      	str	r3, [r5, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800f126:	231f      	movs	r3, #31
 800f128:	4018      	ands	r0, r3
 800f12a:	3b1e      	subs	r3, #30
 800f12c:	4083      	lsls	r3, r0
 800f12e:	652b      	str	r3, [r5, #80]	@ 0x50
}
 800f130:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f132:	4b05      	ldr	r3, [pc, #20]	@ (800f148 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800f134:	3007      	adds	r0, #7
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f136:	18e4      	adds	r4, r4, r3
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800f138:	e7f2      	b.n	800f120 <DMA_CalcDMAMUXChannelBaseAndMask+0x20>
 800f13a:	46c0      	nop			@ (mov r8, r8)
 800f13c:	40020407 	.word	0x40020407
 800f140:	40020800 	.word	0x40020800
 800f144:	40020880 	.word	0x40020880
 800f148:	4002081c 	.word	0x4002081c

0800f14c <HAL_DMA_Init>:
{
 800f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14e:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f150:	2001      	movs	r0, #1
  if (hdma == NULL)
 800f152:	2c00      	cmp	r4, #0
 800f154:	d04a      	beq.n	800f1ec <HAL_DMA_Init+0xa0>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f156:	6825      	ldr	r5, [r4, #0]
 800f158:	4b2b      	ldr	r3, [pc, #172]	@ (800f208 <HAL_DMA_Init+0xbc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f15a:	2114      	movs	r1, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f15c:	429d      	cmp	r5, r3
 800f15e:	d846      	bhi.n	800f1ee <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f160:	4b2a      	ldr	r3, [pc, #168]	@ (800f20c <HAL_DMA_Init+0xc0>)
 800f162:	18e8      	adds	r0, r5, r3
 800f164:	f7f1 f800 	bl	8000168 <__udivsi3>
 800f168:	4b29      	ldr	r3, [pc, #164]	@ (800f210 <HAL_DMA_Init+0xc4>)
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800f16a:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA1;
 800f16c:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800f16e:	2302      	movs	r3, #2
 800f170:	1da6      	adds	r6, r4, #6
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f172:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800f174:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f176:	682b      	ldr	r3, [r5, #0]
 800f178:	4a26      	ldr	r2, [pc, #152]	@ (800f214 <HAL_DMA_Init+0xc8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f17a:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f17c:	4013      	ands	r3, r2
 800f17e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f180:	68e3      	ldr	r3, [r4, #12]
 800f182:	6921      	ldr	r1, [r4, #16]
 800f184:	433b      	orrs	r3, r7
 800f186:	430b      	orrs	r3, r1
 800f188:	6961      	ldr	r1, [r4, #20]
 800f18a:	682a      	ldr	r2, [r5, #0]
 800f18c:	430b      	orrs	r3, r1
 800f18e:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f190:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f192:	430b      	orrs	r3, r1
 800f194:	69e1      	ldr	r1, [r4, #28]
 800f196:	430b      	orrs	r3, r1
 800f198:	6a21      	ldr	r1, [r4, #32]
 800f19a:	430b      	orrs	r3, r1
 800f19c:	4313      	orrs	r3, r2
 800f19e:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f1a0:	f7ff ffae 	bl	800f100 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800f1a4:	2380      	movs	r3, #128	@ 0x80
 800f1a6:	01db      	lsls	r3, r3, #7
 800f1a8:	429f      	cmp	r7, r3
 800f1aa:	d101      	bne.n	800f1b0 <HAL_DMA_Init+0x64>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800f1b0:	6862      	ldr	r2, [r4, #4]
 800f1b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f1b4:	b2d3      	uxtb	r3, r2
 800f1b6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f1b8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800f1ba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f1bc:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f1be:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f1c0:	2a03      	cmp	r2, #3
 800f1c2:	d81b      	bhi.n	800f1fc <HAL_DMA_Init+0xb0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800f1c4:	4a14      	ldr	r2, [pc, #80]	@ (800f218 <HAL_DMA_Init+0xcc>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f1c6:	4815      	ldr	r0, [pc, #84]	@ (800f21c <HAL_DMA_Init+0xd0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800f1c8:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	409a      	lsls	r2, r3
 800f1d0:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800f1d2:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f1d4:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800f1d6:	0089      	lsls	r1, r1, #2
 800f1d8:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f1da:	65a0      	str	r0, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f1dc:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f1de:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f1e0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800f1e2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f1e4:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 800f1e6:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800f1e8:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800f1ea:	77e0      	strb	r0, [r4, #31]
}
 800f1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800f1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f220 <HAL_DMA_Init+0xd4>)
 800f1f0:	18e8      	adds	r0, r5, r3
 800f1f2:	f7f0 ffb9 	bl	8000168 <__udivsi3>
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f224 <HAL_DMA_Init+0xd8>)
 800f1f8:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA2;
 800f1fa:	e7b7      	b.n	800f16c <HAL_DMA_Init+0x20>
    hdma->DMAmuxRequestGen = 0U;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800f200:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800f202:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800f204:	e7ec      	b.n	800f1e0 <HAL_DMA_Init+0x94>
 800f206:	46c0      	nop			@ (mov r8, r8)
 800f208:	40020407 	.word	0x40020407
 800f20c:	bffdfff8 	.word	0xbffdfff8
 800f210:	40020000 	.word	0x40020000
 800f214:	ffff800f 	.word	0xffff800f
 800f218:	1000823f 	.word	0x1000823f
 800f21c:	40020940 	.word	0x40020940
 800f220:	bffdfbf8 	.word	0xbffdfbf8
 800f224:	40020400 	.word	0x40020400

0800f228 <HAL_DMA_Start_IT>:
{
 800f228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800f22a:	1d45      	adds	r5, r0, #5
{
 800f22c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800f22e:	7fee      	ldrb	r6, [r5, #31]
{
 800f230:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800f232:	2002      	movs	r0, #2
 800f234:	2e01      	cmp	r6, #1
 800f236:	d033      	beq.n	800f2a0 <HAL_DMA_Start_IT+0x78>
 800f238:	3801      	subs	r0, #1
 800f23a:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 800f23c:	1da7      	adds	r7, r4, #6
 800f23e:	7ffe      	ldrb	r6, [r7, #31]
 800f240:	46b4      	mov	ip, r6
 800f242:	4663      	mov	r3, ip
 800f244:	b2f6      	uxtb	r6, r6
 800f246:	9600      	str	r6, [sp, #0]
 800f248:	2600      	movs	r6, #0
 800f24a:	4283      	cmp	r3, r0
 800f24c:	d130      	bne.n	800f2b0 <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 800f24e:	3001      	adds	r0, #1
 800f250:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 800f252:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f254:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800f256:	6828      	ldr	r0, [r5, #0]
 800f258:	9b00      	ldr	r3, [sp, #0]
 800f25a:	4398      	bics	r0, r3
 800f25c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f25e:	9b01      	ldr	r3, [sp, #4]
 800f260:	0020      	movs	r0, r4
 800f262:	f7ff ff31 	bl	800f0c8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800f266:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f268:	42b3      	cmp	r3, r6
 800f26a:	d01a      	beq.n	800f2a2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f26c:	230e      	movs	r3, #14
 800f26e:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f270:	4313      	orrs	r3, r2
 800f272:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f274:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	03d2      	lsls	r2, r2, #15
 800f27a:	d504      	bpl.n	800f286 <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f27c:	2280      	movs	r2, #128	@ 0x80
 800f27e:	6819      	ldr	r1, [r3, #0]
 800f280:	0052      	lsls	r2, r2, #1
 800f282:	430a      	orrs	r2, r1
 800f284:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800f286:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d004      	beq.n	800f296 <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f28c:	2280      	movs	r2, #128	@ 0x80
 800f28e:	6819      	ldr	r1, [r3, #0]
 800f290:	0052      	lsls	r2, r2, #1
 800f292:	430a      	orrs	r2, r1
 800f294:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800f296:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800f298:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800f29a:	682a      	ldr	r2, [r5, #0]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	602b      	str	r3, [r5, #0]
}
 800f2a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f2a2:	2204      	movs	r2, #4
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	4393      	bics	r3, r2
 800f2a8:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f2aa:	682a      	ldr	r2, [r5, #0]
 800f2ac:	230a      	movs	r3, #10
 800f2ae:	e7df      	b.n	800f270 <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800f2b0:	2380      	movs	r3, #128	@ 0x80
 800f2b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800f2b4:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 800f2b6:	e7f3      	b.n	800f2a0 <HAL_DMA_Start_IT+0x78>

0800f2b8 <HAL_DMA_IRQHandler>:
{
 800f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f2ba:	261c      	movs	r6, #28
 800f2bc:	2704      	movs	r7, #4
 800f2be:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f2c0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f2c2:	4032      	ands	r2, r6
 800f2c4:	003e      	movs	r6, r7
 800f2c6:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f2c8:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800f2ca:	6803      	ldr	r3, [r0, #0]
 800f2cc:	681c      	ldr	r4, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f2ce:	4235      	tst	r5, r6
 800f2d0:	d00d      	beq.n	800f2ee <HAL_DMA_IRQHandler+0x36>
 800f2d2:	423c      	tst	r4, r7
 800f2d4:	d00b      	beq.n	800f2ee <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	0692      	lsls	r2, r2, #26
 800f2da:	d402      	bmi.n	800f2e2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	43ba      	bics	r2, r7
 800f2e0:	601a      	str	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800f2e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800f2e4:	604e      	str	r6, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d01d      	beq.n	800f326 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800f2ea:	4798      	blx	r3
  return;
 800f2ec:	e01b      	b.n	800f326 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800f2ee:	2702      	movs	r7, #2
 800f2f0:	003e      	movs	r6, r7
 800f2f2:	4096      	lsls	r6, r2
 800f2f4:	4235      	tst	r5, r6
 800f2f6:	d019      	beq.n	800f32c <HAL_DMA_IRQHandler+0x74>
 800f2f8:	423c      	tst	r4, r7
 800f2fa:	d017      	beq.n	800f32c <HAL_DMA_IRQHandler+0x74>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	0692      	lsls	r2, r2, #26
 800f300:	d406      	bmi.n	800f310 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f302:	210a      	movs	r1, #10
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	438a      	bics	r2, r1
 800f308:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800f30a:	3909      	subs	r1, #9
 800f30c:	1d82      	adds	r2, r0, #6
 800f30e:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f310:	4a12      	ldr	r2, [pc, #72]	@ (800f35c <HAL_DMA_IRQHandler+0xa4>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d908      	bls.n	800f328 <HAL_DMA_IRQHandler+0x70>
 800f316:	4b12      	ldr	r3, [pc, #72]	@ (800f360 <HAL_DMA_IRQHandler+0xa8>)
    __HAL_UNLOCK(hdma);
 800f318:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f31a:	605e      	str	r6, [r3, #4]
    __HAL_UNLOCK(hdma);
 800f31c:	1d43      	adds	r3, r0, #5
 800f31e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800f320:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 800f322:	4293      	cmp	r3, r2
 800f324:	d1e1      	bne.n	800f2ea <HAL_DMA_IRQHandler+0x32>
}
 800f326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f328:	4b0e      	ldr	r3, [pc, #56]	@ (800f364 <HAL_DMA_IRQHandler+0xac>)
 800f32a:	e7f5      	b.n	800f318 <HAL_DMA_IRQHandler+0x60>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800f32c:	2608      	movs	r6, #8
 800f32e:	0037      	movs	r7, r6
 800f330:	4097      	lsls	r7, r2
 800f332:	423d      	tst	r5, r7
 800f334:	d0f7      	beq.n	800f326 <HAL_DMA_IRQHandler+0x6e>
 800f336:	4234      	tst	r4, r6
 800f338:	d0f5      	beq.n	800f326 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f33a:	250e      	movs	r5, #14
 800f33c:	681c      	ldr	r4, [r3, #0]
 800f33e:	43ac      	bics	r4, r5
 800f340:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f342:	2301      	movs	r3, #1
 800f344:	001c      	movs	r4, r3
 800f346:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800f348:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f34a:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f34c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800f34e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800f350:	2200      	movs	r2, #0
 800f352:	1d43      	adds	r3, r0, #5
 800f354:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800f356:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f358:	e7e3      	b.n	800f322 <HAL_DMA_IRQHandler+0x6a>
 800f35a:	46c0      	nop			@ (mov r8, r8)
 800f35c:	40020080 	.word	0x40020080
 800f360:	40020400 	.word	0x40020400
 800f364:	40020000 	.word	0x40020000

0800f368 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;
 800f368:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800f36a:	4b05      	ldr	r3, [pc, #20]	@ (800f380 <HAL_FLASH_Unlock+0x18>)
 800f36c:	695a      	ldr	r2, [r3, #20]
 800f36e:	4282      	cmp	r2, r0
 800f370:	da05      	bge.n	800f37e <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f372:	4a04      	ldr	r2, [pc, #16]	@ (800f384 <HAL_FLASH_Unlock+0x1c>)
 800f374:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f376:	4a04      	ldr	r2, [pc, #16]	@ (800f388 <HAL_FLASH_Unlock+0x20>)
 800f378:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800f37a:	6958      	ldr	r0, [r3, #20]
 800f37c:	0fc0      	lsrs	r0, r0, #31
      status = HAL_ERROR;
    }
  }

  return status;
}
 800f37e:	4770      	bx	lr
 800f380:	40022000 	.word	0x40022000
 800f384:	45670123 	.word	0x45670123
 800f388:	cdef89ab 	.word	0xcdef89ab

0800f38c <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800f38c:	2280      	movs	r2, #128	@ 0x80
 800f38e:	4b04      	ldr	r3, [pc, #16]	@ (800f3a0 <HAL_FLASH_Lock+0x14>)
 800f390:	0612      	lsls	r2, r2, #24
 800f392:	6959      	ldr	r1, [r3, #20]
 800f394:	430a      	orrs	r2, r1
 800f396:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800f398:	6958      	ldr	r0, [r3, #20]
 800f39a:	43c0      	mvns	r0, r0
  {
    status = HAL_OK;
  }

  return status;
 800f39c:	0fc0      	lsrs	r0, r0, #31
}
 800f39e:	4770      	bx	lr
 800f3a0:	40022000 	.word	0x40022000

0800f3a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
  error = FLASH_SR_BSY1;
  while ((FLASH->SR & error) != 0x00U)
 800f3a8:	2780      	movs	r7, #128	@ 0x80
  uint32_t timeout = HAL_GetTick() + Timeout;
 800f3aa:	f7fe ff69 	bl	800e280 <HAL_GetTick>
  while ((FLASH->SR & error) != 0x00U)
 800f3ae:	027f      	lsls	r7, r7, #9
  uint32_t timeout = HAL_GetTick() + Timeout;
 800f3b0:	1946      	adds	r6, r0, r5
  while ((FLASH->SR & error) != 0x00U)
 800f3b2:	4c12      	ldr	r4, [pc, #72]	@ (800f3fc <FLASH_WaitForLastOperation+0x58>)
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	423b      	tst	r3, r7
 800f3b8:	d10b      	bne.n	800f3d2 <FLASH_WaitForLastOperation+0x2e>
      return HAL_TIMEOUT;
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800f3ba:	6922      	ldr	r2, [r4, #16]
 800f3bc:	4b10      	ldr	r3, [pc, #64]	@ (800f400 <FLASH_WaitForLastOperation+0x5c>)
 800f3be:	0011      	movs	r1, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800f3c0:	4810      	ldr	r0, [pc, #64]	@ (800f404 <FLASH_WaitForLastOperation+0x60>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800f3c2:	4019      	ands	r1, r3
  FLASH->SR = FLASH_SR_CLEAR;
 800f3c4:	6120      	str	r0, [r4, #16]

  if (error != 0x00U)
 800f3c6:	421a      	tst	r2, r3
 800f3c8:	d009      	beq.n	800f3de <FLASH_WaitForLastOperation+0x3a>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800f3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f408 <FLASH_WaitForLastOperation+0x64>)
    return HAL_ERROR;
 800f3cc:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800f3ce:	6059      	str	r1, [r3, #4]
    return HAL_ERROR;
 800f3d0:	e004      	b.n	800f3dc <FLASH_WaitForLastOperation+0x38>
    if (HAL_GetTick() >= timeout)
 800f3d2:	f7fe ff55 	bl	800e280 <HAL_GetTick>
 800f3d6:	42b0      	cmp	r0, r6
 800f3d8:	d3eb      	bcc.n	800f3b2 <FLASH_WaitForLastOperation+0xe>
      return HAL_TIMEOUT;
 800f3da:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800f3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  timeout = HAL_GetTick() + Timeout;
 800f3de:	f7fe ff4f 	bl	800e280 <HAL_GetTick>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800f3e2:	2680      	movs	r6, #128	@ 0x80
  timeout = HAL_GetTick() + Timeout;
 800f3e4:	1945      	adds	r5, r0, r5
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800f3e6:	02f6      	lsls	r6, r6, #11
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	0018      	movs	r0, r3
 800f3ec:	4030      	ands	r0, r6
 800f3ee:	4233      	tst	r3, r6
 800f3f0:	d0f4      	beq.n	800f3dc <FLASH_WaitForLastOperation+0x38>
    if (HAL_GetTick() >= timeout)
 800f3f2:	f7fe ff45 	bl	800e280 <HAL_GetTick>
 800f3f6:	42a8      	cmp	r0, r5
 800f3f8:	d3f6      	bcc.n	800f3e8 <FLASH_WaitForLastOperation+0x44>
 800f3fa:	e7ee      	b.n	800f3da <FLASH_WaitForLastOperation+0x36>
 800f3fc:	40022000 	.word	0x40022000
 800f400:	000083fa 	.word	0x000083fa
 800f404:	000083fb 	.word	0x000083fb
 800f408:	200030bc 	.word	0x200030bc

0800f40c <HAL_FLASH_Program>:
{
 800f40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800f40e:	4e17      	ldr	r6, [pc, #92]	@ (800f46c <HAL_FLASH_Program+0x60>)
{
 800f410:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 800f412:	7833      	ldrb	r3, [r6, #0]
{
 800f414:	0004      	movs	r4, r0
 800f416:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 800f418:	2002      	movs	r0, #2
{
 800f41a:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(&pFlash);
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d01e      	beq.n	800f45e <HAL_FLASH_Program+0x52>
 800f420:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f422:	20fa      	movs	r0, #250	@ 0xfa
  __HAL_LOCK(&pFlash);
 800f424:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f426:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f428:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f42a:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f42c:	f7ff ffba 	bl	800f3a4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800f430:	2800      	cmp	r0, #0
 800f432:	d112      	bne.n	800f45a <HAL_FLASH_Program+0x4e>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800f434:	4f0e      	ldr	r7, [pc, #56]	@ (800f470 <HAL_FLASH_Program+0x64>)
 800f436:	2c01      	cmp	r4, #1
 800f438:	d112      	bne.n	800f460 <HAL_FLASH_Program+0x54>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	4323      	orrs	r3, r4
 800f43e:	617b      	str	r3, [r7, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800f440:	9b00      	ldr	r3, [sp, #0]
 800f442:	602b      	str	r3, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800f444:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800f448:	9b01      	ldr	r3, [sp, #4]
 800f44a:	606b      	str	r3, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f44c:	20fa      	movs	r0, #250	@ 0xfa
 800f44e:	0080      	lsls	r0, r0, #2
 800f450:	f7ff ffa8 	bl	800f3a4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	43a3      	bics	r3, r4
 800f458:	617b      	str	r3, [r7, #20]
  __HAL_UNLOCK(&pFlash);
 800f45a:	2300      	movs	r3, #0
 800f45c:	7033      	strb	r3, [r6, #0]
}
 800f45e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800f460:	0028      	movs	r0, r5
 800f462:	9900      	ldr	r1, [sp, #0]
 800f464:	f00d fad0 	bl	801ca08 <__FLASH_Program_Fast_veneer>
 800f468:	e7f0      	b.n	800f44c <HAL_FLASH_Program+0x40>
 800f46a:	46c0      	nop			@ (mov r8, r8)
 800f46c:	200030bc 	.word	0x200030bc
 800f470:	40022000 	.word	0x40022000

0800f474 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800f474:	4a04      	ldr	r2, [pc, #16]	@ (800f488 <FLASH_PageErase+0x14>)
 800f476:	4905      	ldr	r1, [pc, #20]	@ (800f48c <FLASH_PageErase+0x18>)
 800f478:	6953      	ldr	r3, [r2, #20]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800f47a:	00c0      	lsls	r0, r0, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800f47c:	400b      	ands	r3, r1
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800f47e:	4318      	orrs	r0, r3
 800f480:	4b03      	ldr	r3, [pc, #12]	@ (800f490 <FLASH_PageErase+0x1c>)
 800f482:	4303      	orrs	r3, r0
 800f484:	6153      	str	r3, [r2, #20]
}
 800f486:	4770      	bx	lr
 800f488:	40022000 	.word	0x40022000
 800f48c:	fffffc07 	.word	0xfffffc07
 800f490:	00010002 	.word	0x00010002

0800f494 <HAL_FLASHEx_Erase>:
{
 800f494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800f496:	4f20      	ldr	r7, [pc, #128]	@ (800f518 <HAL_FLASHEx_Erase+0x84>)
{
 800f498:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 800f49a:	783b      	ldrb	r3, [r7, #0]
 800f49c:	2402      	movs	r4, #2
{
 800f49e:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d019      	beq.n	800f4d8 <HAL_FLASHEx_Erase+0x44>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4a4:	20fa      	movs	r0, #250	@ 0xfa
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f4a6:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 800f4a8:	2601      	movs	r6, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4aa:	0080      	lsls	r0, r0, #2
  __HAL_LOCK(&pFlash);
 800f4ac:	703e      	strb	r6, [r7, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f4ae:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4b0:	f7ff ff78 	bl	800f3a4 <FLASH_WaitForLastOperation>
 800f4b4:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 800f4b6:	d10d      	bne.n	800f4d4 <HAL_FLASHEx_Erase+0x40>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800f4b8:	682b      	ldr	r3, [r5, #0]
    pEraseInit->Banks = FLASH_BANK_1;
 800f4ba:	606e      	str	r6, [r5, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800f4bc:	2b04      	cmp	r3, #4
 800f4be:	d10d      	bne.n	800f4dc <HAL_FLASHEx_Erase+0x48>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4c0:	20fa      	movs	r0, #250	@ 0xfa
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800f4c2:	4a16      	ldr	r2, [pc, #88]	@ (800f51c <HAL_FLASHEx_Erase+0x88>)
 800f4c4:	4b16      	ldr	r3, [pc, #88]	@ (800f520 <HAL_FLASHEx_Erase+0x8c>)
 800f4c6:	6951      	ldr	r1, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4c8:	0080      	lsls	r0, r0, #2
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800f4ca:	430b      	orrs	r3, r1
 800f4cc:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4ce:	f7ff ff69 	bl	800f3a4 <FLASH_WaitForLastOperation>
 800f4d2:	0004      	movs	r4, r0
  __HAL_UNLOCK(&pFlash);
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	703b      	strb	r3, [r7, #0]
}
 800f4d8:	0020      	movs	r0, r4
 800f4da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *PageError = 0xFFFFFFFFU;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	9a01      	ldr	r2, [sp, #4]
 800f4e0:	425b      	negs	r3, r3
 800f4e2:	6013      	str	r3, [r2, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f4e4:	68ae      	ldr	r6, [r5, #8]
 800f4e6:	68ab      	ldr	r3, [r5, #8]
 800f4e8:	68ea      	ldr	r2, [r5, #12]
 800f4ea:	189b      	adds	r3, r3, r2
 800f4ec:	42b3      	cmp	r3, r6
 800f4ee:	d90b      	bls.n	800f508 <HAL_FLASHEx_Erase+0x74>
        FLASH_PageErase(index);
 800f4f0:	0030      	movs	r0, r6
 800f4f2:	f7ff ffbf 	bl	800f474 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4f6:	20fa      	movs	r0, #250	@ 0xfa
 800f4f8:	0080      	lsls	r0, r0, #2
 800f4fa:	f7ff ff53 	bl	800f3a4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d008      	beq.n	800f514 <HAL_FLASHEx_Erase+0x80>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f502:	0004      	movs	r4, r0
          *PageError = index;
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	601e      	str	r6, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f508:	2102      	movs	r1, #2
 800f50a:	4a04      	ldr	r2, [pc, #16]	@ (800f51c <HAL_FLASHEx_Erase+0x88>)
 800f50c:	6953      	ldr	r3, [r2, #20]
 800f50e:	438b      	bics	r3, r1
 800f510:	6153      	str	r3, [r2, #20]
 800f512:	e7df      	b.n	800f4d4 <HAL_FLASHEx_Erase+0x40>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f514:	3601      	adds	r6, #1
 800f516:	e7e6      	b.n	800f4e6 <HAL_FLASHEx_Erase+0x52>
 800f518:	200030bc 	.word	0x200030bc
 800f51c:	40022000 	.word	0x40022000
 800f520:	00010004 	.word	0x00010004

0800f524 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800f524:	2300      	movs	r3, #0
{
 800f526:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f528:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f52a:	680a      	ldr	r2, [r1, #0]
 800f52c:	0014      	movs	r4, r2
 800f52e:	40dc      	lsrs	r4, r3
 800f530:	d101      	bne.n	800f536 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800f532:	b005      	add	sp, #20
 800f534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f536:	2501      	movs	r5, #1
 800f538:	0014      	movs	r4, r2
 800f53a:	409d      	lsls	r5, r3
 800f53c:	402c      	ands	r4, r5
 800f53e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800f540:	422a      	tst	r2, r5
 800f542:	d100      	bne.n	800f546 <HAL_GPIO_Init+0x22>
 800f544:	e099      	b.n	800f67a <HAL_GPIO_Init+0x156>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f546:	684a      	ldr	r2, [r1, #4]
 800f548:	005f      	lsls	r7, r3, #1
 800f54a:	4694      	mov	ip, r2
 800f54c:	2203      	movs	r2, #3
 800f54e:	4664      	mov	r4, ip
 800f550:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f552:	2403      	movs	r4, #3
 800f554:	40bc      	lsls	r4, r7
 800f556:	43e4      	mvns	r4, r4
 800f558:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f55a:	1e54      	subs	r4, r2, #1
 800f55c:	2c01      	cmp	r4, #1
 800f55e:	d82e      	bhi.n	800f5be <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 800f560:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f562:	9c01      	ldr	r4, [sp, #4]
 800f564:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f566:	68cc      	ldr	r4, [r1, #12]
 800f568:	40bc      	lsls	r4, r7
 800f56a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800f56c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800f56e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800f570:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f572:	43ac      	bics	r4, r5
 800f574:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800f576:	4664      	mov	r4, ip
 800f578:	0924      	lsrs	r4, r4, #4
 800f57a:	4034      	ands	r4, r6
 800f57c:	409c      	lsls	r4, r3
 800f57e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800f580:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800f582:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800f584:	9c01      	ldr	r4, [sp, #4]
 800f586:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800f588:	688c      	ldr	r4, [r1, #8]
 800f58a:	40bc      	lsls	r4, r7
 800f58c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800f58e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f590:	2a02      	cmp	r2, #2
 800f592:	d116      	bne.n	800f5c2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f594:	2507      	movs	r5, #7
 800f596:	260f      	movs	r6, #15
 800f598:	401d      	ands	r5, r3
 800f59a:	00ad      	lsls	r5, r5, #2
 800f59c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800f59e:	08dc      	lsrs	r4, r3, #3
 800f5a0:	00a4      	lsls	r4, r4, #2
 800f5a2:	1904      	adds	r4, r0, r4
 800f5a4:	9402      	str	r4, [sp, #8]
 800f5a6:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f5a8:	9603      	str	r6, [sp, #12]
 800f5aa:	0026      	movs	r6, r4
 800f5ac:	9c03      	ldr	r4, [sp, #12]
 800f5ae:	43a6      	bics	r6, r4
 800f5b0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f5b2:	690e      	ldr	r6, [r1, #16]
 800f5b4:	40ae      	lsls	r6, r5
 800f5b6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 800f5b8:	9c02      	ldr	r4, [sp, #8]
 800f5ba:	6226      	str	r6, [r4, #32]
 800f5bc:	e001      	b.n	800f5c2 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f5be:	2a03      	cmp	r2, #3
 800f5c0:	d1df      	bne.n	800f582 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800f5c2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800f5c4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f5c6:	9d01      	ldr	r5, [sp, #4]
 800f5c8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800f5ca:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f5cc:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800f5ce:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f5d0:	4662      	mov	r2, ip
 800f5d2:	02a4      	lsls	r4, r4, #10
 800f5d4:	4222      	tst	r2, r4
 800f5d6:	d050      	beq.n	800f67a <HAL_GPIO_Init+0x156>
        temp = EXTI->EXTICR[position >> 2u];
 800f5d8:	4a29      	ldr	r2, [pc, #164]	@ (800f680 <HAL_GPIO_Init+0x15c>)
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f5da:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 800f5dc:	089c      	lsrs	r4, r3, #2
 800f5de:	00a4      	lsls	r4, r4, #2
 800f5e0:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f5e2:	220f      	movs	r2, #15
 800f5e4:	401d      	ands	r5, r3
 800f5e6:	00ed      	lsls	r5, r5, #3
 800f5e8:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f5ea:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800f5ec:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f5ee:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f5f0:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	42b8      	cmp	r0, r7
 800f5f6:	d014      	beq.n	800f622 <HAL_GPIO_Init+0xfe>
 800f5f8:	4f22      	ldr	r7, [pc, #136]	@ (800f684 <HAL_GPIO_Init+0x160>)
 800f5fa:	3201      	adds	r2, #1
 800f5fc:	42b8      	cmp	r0, r7
 800f5fe:	d010      	beq.n	800f622 <HAL_GPIO_Init+0xfe>
 800f600:	4f21      	ldr	r7, [pc, #132]	@ (800f688 <HAL_GPIO_Init+0x164>)
 800f602:	3201      	adds	r2, #1
 800f604:	42b8      	cmp	r0, r7
 800f606:	d00c      	beq.n	800f622 <HAL_GPIO_Init+0xfe>
 800f608:	4f20      	ldr	r7, [pc, #128]	@ (800f68c <HAL_GPIO_Init+0x168>)
 800f60a:	3201      	adds	r2, #1
 800f60c:	42b8      	cmp	r0, r7
 800f60e:	d008      	beq.n	800f622 <HAL_GPIO_Init+0xfe>
 800f610:	4f1f      	ldr	r7, [pc, #124]	@ (800f690 <HAL_GPIO_Init+0x16c>)
 800f612:	3201      	adds	r2, #1
 800f614:	42b8      	cmp	r0, r7
 800f616:	d004      	beq.n	800f622 <HAL_GPIO_Init+0xfe>
 800f618:	4a1e      	ldr	r2, [pc, #120]	@ (800f694 <HAL_GPIO_Init+0x170>)
 800f61a:	1882      	adds	r2, r0, r2
 800f61c:	1e57      	subs	r7, r2, #1
 800f61e:	41ba      	sbcs	r2, r7
 800f620:	3205      	adds	r2, #5
 800f622:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f624:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f626:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800f628:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800f62a:	4c15      	ldr	r4, [pc, #84]	@ (800f680 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 800f62c:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800f62e:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 800f630:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800f632:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 800f634:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f636:	02ff      	lsls	r7, r7, #11
 800f638:	d401      	bmi.n	800f63e <HAL_GPIO_Init+0x11a>
        temp &= ~(iocurrent);
 800f63a:	0035      	movs	r5, r6
 800f63c:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f63e:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 800f640:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800f642:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800f644:	9d00      	ldr	r5, [sp, #0]
 800f646:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f648:	02bf      	lsls	r7, r7, #10
 800f64a:	d401      	bmi.n	800f650 <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 800f64c:	0035      	movs	r5, r6
 800f64e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f650:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 800f652:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 800f654:	4c10      	ldr	r4, [pc, #64]	@ (800f698 <HAL_GPIO_Init+0x174>)
          temp |= iocurrent;
 800f656:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 800f658:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800f65a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f65c:	03bf      	lsls	r7, r7, #14
 800f65e:	d401      	bmi.n	800f664 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 800f660:	0035      	movs	r5, r6
 800f662:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f664:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800f666:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 800f668:	4c0c      	ldr	r4, [pc, #48]	@ (800f69c <HAL_GPIO_Init+0x178>)
          temp |= iocurrent;
 800f66a:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800f66c:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800f66e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f670:	03ff      	lsls	r7, r7, #15
 800f672:	d401      	bmi.n	800f678 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800f674:	4015      	ands	r5, r2
 800f676:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800f678:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800f67a:	3301      	adds	r3, #1
 800f67c:	e755      	b.n	800f52a <HAL_GPIO_Init+0x6>
 800f67e:	46c0      	nop			@ (mov r8, r8)
 800f680:	40021800 	.word	0x40021800
 800f684:	50000400 	.word	0x50000400
 800f688:	50000800 	.word	0x50000800
 800f68c:	50000c00 	.word	0x50000c00
 800f690:	50001000 	.word	0x50001000
 800f694:	afffec00 	.word	0xafffec00
 800f698:	40021808 	.word	0x40021808
 800f69c:	40021804 	.word	0x40021804

0800f6a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800f6a2:	2200      	movs	r2, #0
{
 800f6a4:	000f      	movs	r7, r1
 800f6a6:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800f6a8:	003b      	movs	r3, r7
 800f6aa:	40d3      	lsrs	r3, r2
 800f6ac:	d101      	bne.n	800f6b2 <HAL_GPIO_DeInit+0x12>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
  }
}
 800f6ae:	b005      	add	sp, #20
 800f6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	4093      	lsls	r3, r2
 800f6b6:	001c      	movs	r4, r3
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	403c      	ands	r4, r7
    if (iocurrent != 0x00u)
 800f6bc:	421f      	tst	r7, r3
 800f6be:	d05c      	beq.n	800f77a <HAL_GPIO_DeInit+0xda>
      tmp = EXTI->EXTICR[position >> 2u];
 800f6c0:	4b2f      	ldr	r3, [pc, #188]	@ (800f780 <HAL_GPIO_DeInit+0xe0>)
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f6c2:	2503      	movs	r5, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800f6c4:	0891      	lsrs	r1, r2, #2
 800f6c6:	0089      	lsls	r1, r1, #2
 800f6c8:	18c9      	adds	r1, r1, r3
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f6ca:	230f      	movs	r3, #15
 800f6cc:	4015      	ands	r5, r2
 800f6ce:	00ed      	lsls	r5, r5, #3
 800f6d0:	40ab      	lsls	r3, r5
      tmp = EXTI->EXTICR[position >> 2u];
 800f6d2:	6e0e      	ldr	r6, [r1, #96]	@ 0x60
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f6d4:	9302      	str	r3, [sp, #8]
 800f6d6:	401e      	ands	r6, r3
 800f6d8:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 800f6da:	26a0      	movs	r6, #160	@ 0xa0
 800f6dc:	2300      	movs	r3, #0
 800f6de:	05f6      	lsls	r6, r6, #23
 800f6e0:	42b0      	cmp	r0, r6
 800f6e2:	d018      	beq.n	800f716 <HAL_GPIO_DeInit+0x76>
 800f6e4:	4b27      	ldr	r3, [pc, #156]	@ (800f784 <HAL_GPIO_DeInit+0xe4>)
 800f6e6:	469c      	mov	ip, r3
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	4560      	cmp	r0, ip
 800f6ec:	d013      	beq.n	800f716 <HAL_GPIO_DeInit+0x76>
 800f6ee:	4b26      	ldr	r3, [pc, #152]	@ (800f788 <HAL_GPIO_DeInit+0xe8>)
 800f6f0:	469c      	mov	ip, r3
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	4560      	cmp	r0, ip
 800f6f6:	d00e      	beq.n	800f716 <HAL_GPIO_DeInit+0x76>
 800f6f8:	4b24      	ldr	r3, [pc, #144]	@ (800f78c <HAL_GPIO_DeInit+0xec>)
 800f6fa:	469c      	mov	ip, r3
 800f6fc:	2303      	movs	r3, #3
 800f6fe:	4560      	cmp	r0, ip
 800f700:	d009      	beq.n	800f716 <HAL_GPIO_DeInit+0x76>
 800f702:	4b23      	ldr	r3, [pc, #140]	@ (800f790 <HAL_GPIO_DeInit+0xf0>)
 800f704:	469c      	mov	ip, r3
 800f706:	2304      	movs	r3, #4
 800f708:	4560      	cmp	r0, ip
 800f70a:	d004      	beq.n	800f716 <HAL_GPIO_DeInit+0x76>
 800f70c:	4b21      	ldr	r3, [pc, #132]	@ (800f794 <HAL_GPIO_DeInit+0xf4>)
 800f70e:	18c3      	adds	r3, r0, r3
 800f710:	1e5e      	subs	r6, r3, #1
 800f712:	41b3      	sbcs	r3, r6
 800f714:	3305      	adds	r3, #5
 800f716:	40ab      	lsls	r3, r5
 800f718:	9d03      	ldr	r5, [sp, #12]
 800f71a:	42ab      	cmp	r3, r5
 800f71c:	d112      	bne.n	800f744 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 800f71e:	4e1e      	ldr	r6, [pc, #120]	@ (800f798 <HAL_GPIO_DeInit+0xf8>)
 800f720:	4b17      	ldr	r3, [pc, #92]	@ (800f780 <HAL_GPIO_DeInit+0xe0>)
 800f722:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800f724:	43a5      	bics	r5, r4
 800f726:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800f728:	4e1c      	ldr	r6, [pc, #112]	@ (800f79c <HAL_GPIO_DeInit+0xfc>)
 800f72a:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800f72c:	43a5      	bics	r5, r4
 800f72e:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->FTSR1 &= ~(iocurrent);
 800f730:	685d      	ldr	r5, [r3, #4]
 800f732:	43a5      	bics	r5, r4
 800f734:	605d      	str	r5, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800f736:	681d      	ldr	r5, [r3, #0]
 800f738:	43a5      	bics	r5, r4
 800f73a:	601d      	str	r5, [r3, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800f73c:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
 800f73e:	9c02      	ldr	r4, [sp, #8]
 800f740:	43a3      	bics	r3, r4
 800f742:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f744:	2403      	movs	r4, #3
 800f746:	0051      	lsls	r1, r2, #1
 800f748:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800f74a:	2107      	movs	r1, #7
 800f74c:	260f      	movs	r6, #15
 800f74e:	4011      	ands	r1, r2
 800f750:	0089      	lsls	r1, r1, #2
 800f752:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f754:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f756:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f758:	4323      	orrs	r3, r4
 800f75a:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800f75c:	08d3      	lsrs	r3, r2, #3
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	18c3      	adds	r3, r0, r3
 800f762:	6a1d      	ldr	r5, [r3, #32]
 800f764:	43b5      	bics	r5, r6
 800f766:	621d      	str	r5, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f768:	6883      	ldr	r3, [r0, #8]
 800f76a:	43a3      	bics	r3, r4
 800f76c:	6083      	str	r3, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f76e:	6843      	ldr	r3, [r0, #4]
 800f770:	438b      	bics	r3, r1
 800f772:	6043      	str	r3, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800f774:	68c3      	ldr	r3, [r0, #12]
 800f776:	43a3      	bics	r3, r4
 800f778:	60c3      	str	r3, [r0, #12]
    position++;
 800f77a:	3201      	adds	r2, #1
 800f77c:	e794      	b.n	800f6a8 <HAL_GPIO_DeInit+0x8>
 800f77e:	46c0      	nop			@ (mov r8, r8)
 800f780:	40021800 	.word	0x40021800
 800f784:	50000400 	.word	0x50000400
 800f788:	50000800 	.word	0x50000800
 800f78c:	50000c00 	.word	0x50000c00
 800f790:	50001000 	.word	0x50001000
 800f794:	afffec00 	.word	0xafffec00
 800f798:	40021804 	.word	0x40021804
 800f79c:	40021808 	.word	0x40021808

0800f7a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f7a0:	6900      	ldr	r0, [r0, #16]
 800f7a2:	4008      	ands	r0, r1
 800f7a4:	1e43      	subs	r3, r0, #1
 800f7a6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800f7a8:	b2c0      	uxtb	r0, r0
}
 800f7aa:	4770      	bx	lr

0800f7ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	d001      	beq.n	800f7b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f7b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f7b2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f7b4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800f7b6:	e7fc      	b.n	800f7b2 <HAL_GPIO_WritePin+0x6>

0800f7b8 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800f7b8:	4770      	bx	lr
	...

0800f7bc <HAL_GPIO_EXTI_IRQHandler>:
{
 800f7bc:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f7be:	4d08      	ldr	r5, [pc, #32]	@ (800f7e0 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 800f7c0:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f7c2:	68eb      	ldr	r3, [r5, #12]
 800f7c4:	4218      	tst	r0, r3
 800f7c6:	d002      	beq.n	800f7ce <HAL_GPIO_EXTI_IRQHandler+0x12>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800f7c8:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800f7ca:	f7ff fff5 	bl	800f7b8 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800f7ce:	692b      	ldr	r3, [r5, #16]
 800f7d0:	4223      	tst	r3, r4
 800f7d2:	d003      	beq.n	800f7dc <HAL_GPIO_EXTI_IRQHandler+0x20>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f7d4:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800f7d6:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f7d8:	f7f8 feac 	bl	8008534 <HAL_GPIO_EXTI_Falling_Callback>
}
 800f7dc:	bd70      	pop	{r4, r5, r6, pc}
 800f7de:	46c0      	nop			@ (mov r8, r8)
 800f7e0:	40021800 	.word	0x40021800

0800f7e4 <HAL_LCD_DeInit>:
  * @brief  DeInitialize the LCD peripheral.
  * @param hlcd LCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LCD_DeInit(LCD_HandleTypeDef *hlcd)
{
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	0004      	movs	r4, r0
  /* Check the LCD handle allocation */
  if (hlcd == NULL)
  {
    return HAL_ERROR;
 800f7e8:	2001      	movs	r0, #1
  if (hlcd == NULL)
 800f7ea:	2c00      	cmp	r4, #0
 800f7ec:	d00b      	beq.n	800f806 <HAL_LCD_DeInit+0x22>
  }

  /* Check the parameters */
  assert_param(IS_LCD_ALL_INSTANCE(hlcd->Instance));

  hlcd->State = HAL_LCD_STATE_BUSY;
 800f7ee:	0025      	movs	r5, r4
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	3535      	adds	r5, #53	@ 0x35

  /* DeInit the low level hardware */
  HAL_LCD_MspDeInit(hlcd);
 800f7f4:	0020      	movs	r0, r4
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f7f6:	702b      	strb	r3, [r5, #0]
  HAL_LCD_MspDeInit(hlcd);
 800f7f8:	f7fa fe36 	bl	800a468 <HAL_LCD_MspDeInit>

  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f7fc:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hlcd);
 800f7fe:	3434      	adds	r4, #52	@ 0x34
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f800:	6060      	str	r0, [r4, #4]
  hlcd->State = HAL_LCD_STATE_RESET;
 800f802:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hlcd);
 800f804:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800f806:	bd70      	pop	{r4, r5, r6, pc}

0800f808 <HAL_LCD_Write>:
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask,
                                uint32_t Data)
{
 800f808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f80a:	b085      	sub	sp, #20
 800f80c:	9303      	str	r3, [sp, #12]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f80e:	0003      	movs	r3, r0
{
 800f810:	0004      	movs	r4, r0

    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 800f812:	2001      	movs	r0, #1
{
 800f814:	9101      	str	r1, [sp, #4]
 800f816:	9202      	str	r2, [sp, #8]
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f818:	3335      	adds	r3, #53	@ 0x35
 800f81a:	781a      	ldrb	r2, [r3, #0]
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800f81c:	3a01      	subs	r2, #1
 800f81e:	4282      	cmp	r2, r0
 800f820:	d80f      	bhi.n	800f842 <HAL_LCD_Write+0x3a>
    if (hlcd->State == HAL_LCD_STATE_READY)
 800f822:	781a      	ldrb	r2, [r3, #0]
 800f824:	b2d1      	uxtb	r1, r2
 800f826:	4282      	cmp	r2, r0
 800f828:	d00d      	beq.n	800f846 <HAL_LCD_Write+0x3e>
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 800f82a:	9b01      	ldr	r3, [sp, #4]
 800f82c:	6822      	ldr	r2, [r4, #0]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	18d2      	adds	r2, r2, r3
 800f832:	6953      	ldr	r3, [r2, #20]
 800f834:	9902      	ldr	r1, [sp, #8]
    return HAL_OK;
 800f836:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 800f838:	4019      	ands	r1, r3
 800f83a:	000b      	movs	r3, r1
 800f83c:	9903      	ldr	r1, [sp, #12]
 800f83e:	430b      	orrs	r3, r1
 800f840:	6153      	str	r3, [r2, #20]
  }
}
 800f842:	b005      	add	sp, #20
 800f844:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_LOCK(hlcd);
 800f846:	0026      	movs	r6, r4
 800f848:	2202      	movs	r2, #2
 800f84a:	3634      	adds	r6, #52	@ 0x34
 800f84c:	7835      	ldrb	r5, [r6, #0]
 800f84e:	0010      	movs	r0, r2
 800f850:	2d01      	cmp	r5, #1
 800f852:	d0f6      	beq.n	800f842 <HAL_LCD_Write+0x3a>
 800f854:	7031      	strb	r1, [r6, #0]
      hlcd->State = HAL_LCD_STATE_BUSY;
 800f856:	701a      	strb	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800f858:	f7fe fd12 	bl	800e280 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f85c:	27fa      	movs	r7, #250	@ 0xfa
      tickstart = HAL_GetTick();
 800f85e:	0005      	movs	r5, r0
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f860:	00bf      	lsls	r7, r7, #2
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800f862:	2204      	movs	r2, #4
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	4213      	tst	r3, r2
 800f86a:	d0de      	beq.n	800f82a <HAL_LCD_Write+0x22>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f86c:	f7fe fd08 	bl	800e280 <HAL_GetTick>
 800f870:	1b40      	subs	r0, r0, r5
 800f872:	42b8      	cmp	r0, r7
 800f874:	d9f5      	bls.n	800f862 <HAL_LCD_Write+0x5a>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800f876:	2302      	movs	r3, #2
 800f878:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hlcd);
 800f87a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800f87c:	2003      	movs	r0, #3
          __HAL_UNLOCK(hlcd);
 800f87e:	7033      	strb	r3, [r6, #0]
          return HAL_TIMEOUT;
 800f880:	e7df      	b.n	800f842 <HAL_LCD_Write+0x3a>

0800f882 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 800f882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800f884:	2608      	movs	r6, #8

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800f886:	2204      	movs	r2, #4
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800f888:	6803      	ldr	r3, [r0, #0]
{
 800f88a:	0004      	movs	r4, r0
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800f88c:	60de      	str	r6, [r3, #12]
  hlcd->Instance->SR |= LCD_SR_UDR;
 800f88e:	6899      	ldr	r1, [r3, #8]
  tickstart = HAL_GetTick();

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f890:	27fa      	movs	r7, #250	@ 0xfa
  hlcd->Instance->SR |= LCD_SR_UDR;
 800f892:	430a      	orrs	r2, r1
 800f894:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800f896:	f7fe fcf3 	bl	800e280 <HAL_GetTick>
 800f89a:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f89c:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	4233      	tst	r3, r6
 800f8a4:	d005      	beq.n	800f8b2 <HAL_LCD_UpdateDisplayRequest+0x30>

      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800f8a6:	0023      	movs	r3, r4
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	3335      	adds	r3, #53	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);

  return HAL_OK;
 800f8ac:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 800f8ae:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 800f8b0:	e007      	b.n	800f8c2 <HAL_LCD_UpdateDisplayRequest+0x40>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f8b2:	f7fe fce5 	bl	800e280 <HAL_GetTick>
 800f8b6:	1b40      	subs	r0, r0, r5
 800f8b8:	42b8      	cmp	r0, r7
 800f8ba:	d9f0      	bls.n	800f89e <HAL_LCD_UpdateDisplayRequest+0x1c>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800f8bc:	2304      	movs	r3, #4
      return HAL_TIMEOUT;
 800f8be:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800f8c0:	63a3      	str	r3, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hlcd);
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	3434      	adds	r4, #52	@ 0x34
 800f8c6:	7023      	strb	r3, [r4, #0]
}
 800f8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8ca <HAL_LCD_Clear>:
{
 800f8ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f8cc:	0002      	movs	r2, r0
{
 800f8ce:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800f8d0:	2001      	movs	r0, #1
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f8d2:	3235      	adds	r2, #53	@ 0x35
 800f8d4:	7813      	ldrb	r3, [r2, #0]
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	4283      	cmp	r3, r0
 800f8da:	d82a      	bhi.n	800f932 <HAL_LCD_Clear+0x68>
    __HAL_LOCK(hlcd);
 800f8dc:	0025      	movs	r5, r4
 800f8de:	3534      	adds	r5, #52	@ 0x34
 800f8e0:	7829      	ldrb	r1, [r5, #0]
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	4281      	cmp	r1, r0
 800f8e6:	d025      	beq.n	800f934 <HAL_LCD_Clear+0x6a>
 800f8e8:	7028      	strb	r0, [r5, #0]
    hlcd->State = HAL_LCD_STATE_BUSY;
 800f8ea:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f8ec:	f7fe fcc8 	bl	800e280 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f8f0:	27fa      	movs	r7, #250	@ 0xfa
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800f8f2:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800f8f4:	9001      	str	r0, [sp, #4]
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f8f6:	00bf      	lsls	r7, r7, #2
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800f8f8:	6821      	ldr	r1, [r4, #0]
 800f8fa:	688a      	ldr	r2, [r1, #8]
 800f8fc:	0013      	movs	r3, r2
 800f8fe:	4033      	ands	r3, r6
 800f900:	4232      	tst	r2, r6
 800f902:	d10b      	bne.n	800f91c <HAL_LCD_Clear+0x52>
      hlcd->Instance->RAM[counter] = 0;
 800f904:	0018      	movs	r0, r3
 800f906:	1d1a      	adds	r2, r3, #4
 800f908:	0092      	lsls	r2, r2, #2
 800f90a:	188a      	adds	r2, r1, r2
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800f90c:	3301      	adds	r3, #1
      hlcd->Instance->RAM[counter] = 0;
 800f90e:	6050      	str	r0, [r2, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800f910:	2b10      	cmp	r3, #16
 800f912:	d1f8      	bne.n	800f906 <HAL_LCD_Clear+0x3c>
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 800f914:	0020      	movs	r0, r4
 800f916:	f7ff ffb4 	bl	800f882 <HAL_LCD_UpdateDisplayRequest>
 800f91a:	e00a      	b.n	800f932 <HAL_LCD_Clear+0x68>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f91c:	f7fe fcb0 	bl	800e280 <HAL_GetTick>
 800f920:	9b01      	ldr	r3, [sp, #4]
 800f922:	1ac0      	subs	r0, r0, r3
 800f924:	42b8      	cmp	r0, r7
 800f926:	d9e7      	bls.n	800f8f8 <HAL_LCD_Clear+0x2e>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800f928:	2302      	movs	r3, #2
 800f92a:	63a3      	str	r3, [r4, #56]	@ 0x38
        __HAL_UNLOCK(hlcd);
 800f92c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800f92e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hlcd);
 800f930:	702b      	strb	r3, [r5, #0]
}
 800f932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hlcd);
 800f934:	0018      	movs	r0, r3
 800f936:	e7fc      	b.n	800f932 <HAL_LCD_Clear+0x68>

0800f938 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800f938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f93a:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800f93c:	f7fe fca0 	bl	800e280 <HAL_GetTick>

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f940:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 800f942:	0005      	movs	r5, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800f944:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f946:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800f948:	6823      	ldr	r3, [r4, #0]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	4233      	tst	r3, r6
 800f94e:	d001      	beq.n	800f954 <LCD_WaitForSynchro+0x1c>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800f950:	2000      	movs	r0, #0
 800f952:	e007      	b.n	800f964 <LCD_WaitForSynchro+0x2c>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f954:	f7fe fc94 	bl	800e280 <HAL_GetTick>
 800f958:	1b40      	subs	r0, r0, r5
 800f95a:	42b8      	cmp	r0, r7
 800f95c:	d9f4      	bls.n	800f948 <LCD_WaitForSynchro+0x10>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800f95e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800f960:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800f962:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800f964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f968 <HAL_LCD_Init>:
{
 800f968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f96a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f96c:	2501      	movs	r5, #1
  if (hlcd == NULL)
 800f96e:	2800      	cmp	r0, #0
 800f970:	d062      	beq.n	800fa38 <HAL_LCD_Init+0xd0>
  if (hlcd->State == HAL_LCD_STATE_RESET)
 800f972:	0006      	movs	r6, r0
 800f974:	3635      	adds	r6, #53	@ 0x35
 800f976:	7833      	ldrb	r3, [r6, #0]
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d104      	bne.n	800f988 <HAL_LCD_Init+0x20>
    hlcd->Lock = HAL_UNLOCKED;
 800f97e:	0003      	movs	r3, r0
 800f980:	3334      	adds	r3, #52	@ 0x34
 800f982:	701a      	strb	r2, [r3, #0]
    HAL_LCD_MspInit(hlcd);
 800f984:	f7fa fcfe 	bl	800a384 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f988:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 800f98a:	2701      	movs	r7, #1
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f98c:	7033      	strb	r3, [r6, #0]
  __HAL_LCD_DISABLE(hlcd);
 800f98e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hlcd->Instance->FCR, \
 800f990:	68a0      	ldr	r0, [r4, #8]
  __HAL_LCD_DISABLE(hlcd);
 800f992:	6813      	ldr	r3, [r2, #0]
 800f994:	43bb      	bics	r3, r7
 800f996:	6013      	str	r3, [r2, #0]
    hlcd->Instance->RAM[counter] = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	6153      	str	r3, [r2, #20]
 800f99c:	6193      	str	r3, [r2, #24]
 800f99e:	61d3      	str	r3, [r2, #28]
 800f9a0:	6213      	str	r3, [r2, #32]
 800f9a2:	6253      	str	r3, [r2, #36]	@ 0x24
 800f9a4:	6293      	str	r3, [r2, #40]	@ 0x28
 800f9a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f9a8:	6313      	str	r3, [r2, #48]	@ 0x30
  MODIFY_REG(hlcd->Instance->FCR, \
 800f9aa:	6863      	ldr	r3, [r4, #4]
 800f9ac:	6851      	ldr	r1, [r2, #4]
 800f9ae:	4303      	orrs	r3, r0
 800f9b0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f9b2:	4303      	orrs	r3, r0
 800f9b4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f9b6:	4303      	orrs	r3, r0
 800f9b8:	69e0      	ldr	r0, [r4, #28]
 800f9ba:	4303      	orrs	r3, r0
 800f9bc:	6a20      	ldr	r0, [r4, #32]
 800f9be:	4303      	orrs	r3, r0
 800f9c0:	69a0      	ldr	r0, [r4, #24]
 800f9c2:	4303      	orrs	r3, r0
 800f9c4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f9c6:	4303      	orrs	r3, r0
 800f9c8:	4821      	ldr	r0, [pc, #132]	@ (800fa50 <HAL_LCD_Init+0xe8>)
 800f9ca:	4001      	ands	r1, r0
 800f9cc:	430b      	orrs	r3, r1
  status = LCD_WaitForSynchro(hlcd);
 800f9ce:	0020      	movs	r0, r4
  MODIFY_REG(hlcd->Instance->FCR, \
 800f9d0:	6053      	str	r3, [r2, #4]
  status = LCD_WaitForSynchro(hlcd);
 800f9d2:	f7ff ffb1 	bl	800f938 <LCD_WaitForSynchro>
 800f9d6:	1e05      	subs	r5, r0, #0
  if (status != HAL_OK)
 800f9d8:	d12e      	bne.n	800fa38 <HAL_LCD_Init+0xd0>
  MODIFY_REG(hlcd->Instance->CR, \
 800f9da:	6920      	ldr	r0, [r4, #16]
 800f9dc:	68e3      	ldr	r3, [r4, #12]
 800f9de:	6822      	ldr	r2, [r4, #0]
 800f9e0:	4303      	orrs	r3, r0
 800f9e2:	6960      	ldr	r0, [r4, #20]
 800f9e4:	6811      	ldr	r1, [r2, #0]
 800f9e6:	4303      	orrs	r3, r0
 800f9e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f9ea:	4303      	orrs	r3, r0
 800f9ec:	20fe      	movs	r0, #254	@ 0xfe
 800f9ee:	4381      	bics	r1, r0
 800f9f0:	430b      	orrs	r3, r1
 800f9f2:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 800f9f4:	6813      	ldr	r3, [r2, #0]
 800f9f6:	433b      	orrs	r3, r7
 800f9f8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f9fa:	f7fe fc41 	bl	800e280 <HAL_GetTick>
 800f9fe:	9001      	str	r0, [sp, #4]
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	423b      	tst	r3, r7
 800fa06:	d00c      	beq.n	800fa22 <HAL_LCD_Init+0xba>
  tickstart = HAL_GetTick();
 800fa08:	f7fe fc3a 	bl	800e280 <HAL_GetTick>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800fa0c:	2710      	movs	r7, #16
  tickstart = HAL_GetTick();
 800fa0e:	9001      	str	r0, [sp, #4]
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	423b      	tst	r3, r7
 800fa16:	d011      	beq.n	800fa3c <HAL_LCD_Init+0xd4>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	7033      	strb	r3, [r6, #0]
  return status;
 800fa20:	e00a      	b.n	800fa38 <HAL_LCD_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa22:	f7fe fc2d 	bl	800e280 <HAL_GetTick>
 800fa26:	9b01      	ldr	r3, [sp, #4]
 800fa28:	1ac0      	subs	r0, r0, r3
 800fa2a:	23fa      	movs	r3, #250	@ 0xfa
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4298      	cmp	r0, r3
 800fa30:	d9e6      	bls.n	800fa00 <HAL_LCD_Init+0x98>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800fa32:	2308      	movs	r3, #8
 800fa34:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800fa36:	2503      	movs	r5, #3
}
 800fa38:	0028      	movs	r0, r5
 800fa3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800fa3c:	f7fe fc20 	bl	800e280 <HAL_GetTick>
 800fa40:	9b01      	ldr	r3, [sp, #4]
 800fa42:	1ac0      	subs	r0, r0, r3
 800fa44:	23fa      	movs	r3, #250	@ 0xfa
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4298      	cmp	r0, r3
 800fa4a:	d9e1      	bls.n	800fa10 <HAL_LCD_Init+0xa8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800fa4c:	63a7      	str	r7, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800fa4e:	e7f2      	b.n	800fa36 <HAL_LCD_Init+0xce>
 800fa50:	fc00000e 	.word	0xfc00000e

0800fa54 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800fa54:	4b0c      	ldr	r3, [pc, #48]	@ (800fa88 <LPTIM_WaitForFlag+0x34>)
{
 800fa56:	b570      	push	{r4, r5, r6, lr}
 800fa58:	0005      	movs	r5, r0
 800fa5a:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800fa5c:	6818      	ldr	r0, [r3, #0]
 800fa5e:	490b      	ldr	r1, [pc, #44]	@ (800fa8c <LPTIM_WaitForFlag+0x38>)
 800fa60:	f7f0 fb82 	bl	8000168 <__udivsi3>
 800fa64:	23fa      	movs	r3, #250	@ 0xfa
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800fa6a:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800fa6c:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800fa6e:	2503      	movs	r5, #3
    count--;
 800fa70:	3b01      	subs	r3, #1
    if (count == 0UL)
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d100      	bne.n	800fa78 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800fa76:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800fa78:	680a      	ldr	r2, [r1, #0]
 800fa7a:	4022      	ands	r2, r4
 800fa7c:	42a2      	cmp	r2, r4
 800fa7e:	d001      	beq.n	800fa84 <LPTIM_WaitForFlag+0x30>
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d1f5      	bne.n	800fa70 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800fa84:	bd70      	pop	{r4, r5, r6, pc}
 800fa86:	46c0      	nop			@ (mov r8, r8)
 800fa88:	20000050 	.word	0x20000050
 800fa8c:	00004e20 	.word	0x00004e20

0800fa90 <HAL_LPTIM_Init>:
{
 800fa90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa92:	0004      	movs	r4, r0
    return HAL_ERROR;
 800fa94:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800fa96:	2c00      	cmp	r4, #0
 800fa98:	d01f      	beq.n	800fada <HAL_LPTIM_Init+0x4a>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800fa9a:	0023      	movs	r3, r4
 800fa9c:	3352      	adds	r3, #82	@ 0x52
 800fa9e:	9301      	str	r3, [sp, #4]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d105      	bne.n	800fab4 <HAL_LPTIM_Init+0x24>
    hlptim->Lock = HAL_UNLOCKED;
 800faa8:	0023      	movs	r3, r4
 800faaa:	3351      	adds	r3, #81	@ 0x51
    HAL_LPTIM_MspInit(hlptim);
 800faac:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 800faae:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 800fab0:	f7fa fd02 	bl	800a4b8 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fab4:	2702      	movs	r7, #2
  __HAL_LPTIM_ENABLE(hlptim);
 800fab6:	2601      	movs	r6, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fab8:	2180      	movs	r1, #128	@ 0x80
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800faba:	9b01      	ldr	r3, [sp, #4]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fabc:	0049      	lsls	r1, r1, #1
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fabe:	701f      	strb	r7, [r3, #0]
  __HAL_LPTIM_ENABLE(hlptim);
 800fac0:	6825      	ldr	r5, [r4, #0]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800fac2:	0020      	movs	r0, r4
  __HAL_LPTIM_ENABLE(hlptim);
 800fac4:	692b      	ldr	r3, [r5, #16]
 800fac6:	4333      	orrs	r3, r6
 800fac8:	612b      	str	r3, [r5, #16]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800faca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800facc:	6069      	str	r1, [r5, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800face:	62ab      	str	r3, [r5, #40]	@ 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800fad0:	f7ff ffc0 	bl	800fa54 <LPTIM_WaitForFlag>
 800fad4:	2803      	cmp	r0, #3
 800fad6:	d101      	bne.n	800fadc <HAL_LPTIM_Init+0x4c>
    return HAL_TIMEOUT;
 800fad8:	2003      	movs	r0, #3
}
 800fada:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fadc:	2110      	movs	r1, #16
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800fade:	6a23      	ldr	r3, [r4, #32]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fae0:	6069      	str	r1, [r5, #4]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800fae2:	0020      	movs	r0, r4
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800fae4:	61ab      	str	r3, [r5, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800fae6:	f7ff ffb5 	bl	800fa54 <LPTIM_WaitForFlag>
 800faea:	2803      	cmp	r0, #3
 800faec:	d0f4      	beq.n	800fad8 <HAL_LPTIM_Init+0x48>
  __HAL_LPTIM_DISABLE(hlptim);
 800faee:	4b3a      	ldr	r3, [pc, #232]	@ (800fbd8 <HAL_LPTIM_Init+0x148>)
 800faf0:	429d      	cmp	r5, r3
 800faf2:	d002      	beq.n	800fafa <HAL_LPTIM_Init+0x6a>
 800faf4:	4b39      	ldr	r3, [pc, #228]	@ (800fbdc <HAL_LPTIM_Init+0x14c>)
 800faf6:	429d      	cmp	r5, r3
 800faf8:	d113      	bne.n	800fb22 <HAL_LPTIM_Init+0x92>
 800fafa:	2202      	movs	r2, #2
 800fafc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fafe:	4213      	tst	r3, r2
 800fb00:	d11b      	bne.n	800fb3a <HAL_LPTIM_Init+0xaa>
 800fb02:	2380      	movs	r3, #128	@ 0x80
 800fb04:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800fb06:	029b      	lsls	r3, r3, #10
 800fb08:	4219      	tst	r1, r3
 800fb0a:	d116      	bne.n	800fb3a <HAL_LPTIM_Init+0xaa>
 800fb0c:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 800fb0e:	4211      	tst	r1, r2
 800fb10:	d113      	bne.n	800fb3a <HAL_LPTIM_Init+0xaa>
 800fb12:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800fb14:	421a      	tst	r2, r3
 800fb16:	d110      	bne.n	800fb3a <HAL_LPTIM_Init+0xaa>
 800fb18:	2201      	movs	r2, #1
 800fb1a:	692b      	ldr	r3, [r5, #16]
 800fb1c:	4393      	bics	r3, r2
 800fb1e:	612b      	str	r3, [r5, #16]
 800fb20:	e00b      	b.n	800fb3a <HAL_LPTIM_Init+0xaa>
 800fb22:	4b2f      	ldr	r3, [pc, #188]	@ (800fbe0 <HAL_LPTIM_Init+0x150>)
 800fb24:	429d      	cmp	r5, r3
 800fb26:	d002      	beq.n	800fb2e <HAL_LPTIM_Init+0x9e>
 800fb28:	692b      	ldr	r3, [r5, #16]
 800fb2a:	43b3      	bics	r3, r6
 800fb2c:	e7f7      	b.n	800fb1e <HAL_LPTIM_Init+0x8e>
 800fb2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fb30:	423b      	tst	r3, r7
 800fb32:	d102      	bne.n	800fb3a <HAL_LPTIM_Init+0xaa>
 800fb34:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fb36:	039b      	lsls	r3, r3, #14
 800fb38:	d5f6      	bpl.n	800fb28 <HAL_LPTIM_Init+0x98>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fb3a:	6860      	ldr	r0, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800fb3c:	68e9      	ldr	r1, [r5, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fb3e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fb40:	2801      	cmp	r0, #1
 800fb42:	d003      	beq.n	800fb4c <HAL_LPTIM_Init+0xbc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fb44:	2380      	movs	r3, #128	@ 0x80
 800fb46:	041b      	lsls	r3, r3, #16
 800fb48:	429e      	cmp	r6, r3
 800fb4a:	d101      	bne.n	800fb50 <HAL_LPTIM_Init+0xc0>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800fb4c:	231e      	movs	r3, #30
 800fb4e:	4399      	bics	r1, r3
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800fb50:	4b24      	ldr	r3, [pc, #144]	@ (800fbe4 <HAL_LPTIM_Init+0x154>)
 800fb52:	6962      	ldr	r2, [r4, #20]
 800fb54:	469c      	mov	ip, r3
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d001      	beq.n	800fb5e <HAL_LPTIM_Init+0xce>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800fb5a:	4b23      	ldr	r3, [pc, #140]	@ (800fbe8 <HAL_LPTIM_Init+0x158>)
 800fb5c:	4019      	ands	r1, r3
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800fb5e:	4b23      	ldr	r3, [pc, #140]	@ (800fbec <HAL_LPTIM_Init+0x15c>)
              hlptim->Init.UpdateMode      |
 800fb60:	68a7      	ldr	r7, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800fb62:	4019      	ands	r1, r3
              hlptim->Init.UpdateMode      |
 800fb64:	0003      	movs	r3, r0
 800fb66:	4333      	orrs	r3, r6
 800fb68:	433b      	orrs	r3, r7
 800fb6a:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800fb6c:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800fb6e:	430b      	orrs	r3, r1
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d125      	bne.n	800fbc0 <HAL_LPTIM_Init+0x130>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800fb74:	69e1      	ldr	r1, [r4, #28]
 800fb76:	6920      	ldr	r0, [r4, #16]
 800fb78:	4301      	orrs	r1, r0
 800fb7a:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fb7c:	2180      	movs	r1, #128	@ 0x80
 800fb7e:	0409      	lsls	r1, r1, #16
 800fb80:	428e      	cmp	r6, r1
 800fb82:	d01f      	beq.n	800fbc4 <HAL_LPTIM_Init+0x134>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800fb84:	4562      	cmp	r2, ip
 800fb86:	d004      	beq.n	800fb92 <HAL_LPTIM_Init+0x102>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800fb88:	69a1      	ldr	r1, [r4, #24]
 800fb8a:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 800fb8c:	69e1      	ldr	r1, [r4, #28]
 800fb8e:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800fb90:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800fb92:	60eb      	str	r3, [r5, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 800fb94:	4b10      	ldr	r3, [pc, #64]	@ (800fbd8 <HAL_LPTIM_Init+0x148>)
 800fb96:	429d      	cmp	r5, r3
 800fb98:	d002      	beq.n	800fba0 <HAL_LPTIM_Init+0x110>
 800fb9a:	4b10      	ldr	r3, [pc, #64]	@ (800fbdc <HAL_LPTIM_Init+0x14c>)
 800fb9c:	429d      	cmp	r5, r3
 800fb9e:	d116      	bne.n	800fbce <HAL_LPTIM_Init+0x13e>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800fba0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fba2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fba4:	4313      	orrs	r3, r2
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800fba6:	626b      	str	r3, [r5, #36]	@ 0x24
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800fba8:	0022      	movs	r2, r4
 800fbaa:	2301      	movs	r3, #1
 800fbac:	3253      	adds	r2, #83	@ 0x53
 800fbae:	7013      	strb	r3, [r2, #0]
 800fbb0:	7053      	strb	r3, [r2, #1]
 800fbb2:	7093      	strb	r3, [r2, #2]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800fbb4:	9a01      	ldr	r2, [sp, #4]
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800fbb6:	3456      	adds	r4, #86	@ 0x56
 800fbb8:	7023      	strb	r3, [r4, #0]
  return HAL_OK;
 800fbba:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800fbbc:	7013      	strb	r3, [r2, #0]
  return HAL_OK;
 800fbbe:	e78c      	b.n	800fada <HAL_LPTIM_Init+0x4a>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fbc0:	2801      	cmp	r0, #1
 800fbc2:	d1db      	bne.n	800fb7c <HAL_LPTIM_Init+0xec>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800fbc4:	68e1      	ldr	r1, [r4, #12]
 800fbc6:	6920      	ldr	r0, [r4, #16]
 800fbc8:	4301      	orrs	r1, r0
 800fbca:	430b      	orrs	r3, r1
 800fbcc:	e7da      	b.n	800fb84 <HAL_LPTIM_Init+0xf4>
    if (hlptim->Instance == LPTIM2)
 800fbce:	4b04      	ldr	r3, [pc, #16]	@ (800fbe0 <HAL_LPTIM_Init+0x150>)
 800fbd0:	429d      	cmp	r5, r3
 800fbd2:	d1e9      	bne.n	800fba8 <HAL_LPTIM_Init+0x118>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800fbd4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fbd6:	e7e6      	b.n	800fba6 <HAL_LPTIM_Init+0x116>
 800fbd8:	40007c00 	.word	0x40007c00
 800fbdc:	40009000 	.word	0x40009000
 800fbe0:	40009400 	.word	0x40009400
 800fbe4:	0000ffff 	.word	0x0000ffff
 800fbe8:	ffff1f3f 	.word	0xffff1f3f
 800fbec:	ff39f1fe 	.word	0xff39f1fe

0800fbf0 <HAL_LPTIM_CompareMatchCallback>:
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
 800fbf0:	4770      	bx	lr

0800fbf2 <HAL_LPTIM_AutoReloadMatchCallback>:
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
 800fbf2:	4770      	bx	lr

0800fbf4 <HAL_LPTIM_TriggerCallback>:
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
 800fbf4:	4770      	bx	lr

0800fbf6 <HAL_LPTIM_CompareWriteCallback>:
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800fbf6:	4770      	bx	lr

0800fbf8 <HAL_LPTIM_AutoReloadWriteCallback>:
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800fbf8:	4770      	bx	lr

0800fbfa <HAL_LPTIM_DirectionUpCallback>:
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
 800fbfa:	4770      	bx	lr

0800fbfc <HAL_LPTIM_DirectionDownCallback>:
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
 800fbfc:	4770      	bx	lr

0800fbfe <HAL_LPTIM_UpdateEventCallback>:
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
 800fbfe:	4770      	bx	lr

0800fc00 <HAL_LPTIM_RepCounterWriteCallback>:
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800fc00:	4770      	bx	lr

0800fc02 <HAL_LPTIM_IC_CaptureCallback>:
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
 800fc02:	4770      	bx	lr

0800fc04 <HAL_LPTIM_IC_OverCaptureCallback>:
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
 800fc04:	4770      	bx	lr

0800fc06 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fc06:	2301      	movs	r3, #1
 800fc08:	6802      	ldr	r2, [r0, #0]
{
 800fc0a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fc0c:	6811      	ldr	r1, [r2, #0]
{
 800fc0e:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fc10:	4219      	tst	r1, r3
 800fc12:	d00e      	beq.n	800fc32 <HAL_LPTIM_IRQHandler+0x2c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800fc14:	6891      	ldr	r1, [r2, #8]
 800fc16:	4219      	tst	r1, r3
 800fc18:	d00b      	beq.n	800fc32 <HAL_LPTIM_IRQHandler+0x2c>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fc1a:	0005      	movs	r5, r0
 800fc1c:	3538      	adds	r5, #56	@ 0x38
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800fc1e:	6053      	str	r3, [r2, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fc20:	702b      	strb	r3, [r5, #0]
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800fc22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fc24:	421a      	tst	r2, r3
 800fc26:	d100      	bne.n	800fc2a <HAL_LPTIM_IRQHandler+0x24>
 800fc28:	e10c      	b.n	800fe44 <HAL_LPTIM_IRQHandler+0x23e>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fc2a:	f7ff ffea 	bl	800fc02 <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800fc32:	2280      	movs	r2, #128	@ 0x80
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	0092      	lsls	r2, r2, #2
 800fc38:	6819      	ldr	r1, [r3, #0]
 800fc3a:	4211      	tst	r1, r2
 800fc3c:	d011      	beq.n	800fc62 <HAL_LPTIM_IRQHandler+0x5c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800fc3e:	6899      	ldr	r1, [r3, #8]
 800fc40:	4211      	tst	r1, r2
 800fc42:	d00e      	beq.n	800fc62 <HAL_LPTIM_IRQHandler+0x5c>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fc44:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800fc46:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fc48:	3aff      	subs	r2, #255	@ 0xff
 800fc4a:	3538      	adds	r5, #56	@ 0x38
 800fc4c:	3aff      	subs	r2, #255	@ 0xff
 800fc4e:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800fc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fc52:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800fc54:	03db      	lsls	r3, r3, #15
 800fc56:	d400      	bmi.n	800fc5a <HAL_LPTIM_IRQHandler+0x54>
 800fc58:	e0f7      	b.n	800fe4a <HAL_LPTIM_IRQHandler+0x244>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fc5a:	f7ff ffd2 	bl	800fc02 <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 800fc62:	2280      	movs	r2, #128	@ 0x80
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	00d2      	lsls	r2, r2, #3
 800fc68:	6819      	ldr	r1, [r3, #0]
 800fc6a:	4211      	tst	r1, r2
 800fc6c:	d010      	beq.n	800fc90 <HAL_LPTIM_IRQHandler+0x8a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 800fc6e:	6899      	ldr	r1, [r3, #8]
 800fc70:	4211      	tst	r1, r2
 800fc72:	d00d      	beq.n	800fc90 <HAL_LPTIM_IRQHandler+0x8a>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fc74:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 800fc76:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fc78:	2204      	movs	r2, #4
 800fc7a:	3538      	adds	r5, #56	@ 0x38
 800fc7c:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 800fc7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fc80:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 800fc82:	07db      	lsls	r3, r3, #31
 800fc84:	d400      	bmi.n	800fc88 <HAL_LPTIM_IRQHandler+0x82>
 800fc86:	e0e3      	b.n	800fe50 <HAL_LPTIM_IRQHandler+0x24a>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fc88:	f7ff ffbb 	bl	800fc02 <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 800fc90:	2280      	movs	r2, #128	@ 0x80
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	0112      	lsls	r2, r2, #4
 800fc96:	6819      	ldr	r1, [r3, #0]
 800fc98:	4211      	tst	r1, r2
 800fc9a:	d010      	beq.n	800fcbe <HAL_LPTIM_IRQHandler+0xb8>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 800fc9c:	6899      	ldr	r1, [r3, #8]
 800fc9e:	4211      	tst	r1, r2
 800fca0:	d00d      	beq.n	800fcbe <HAL_LPTIM_IRQHandler+0xb8>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800fca2:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 800fca4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800fca6:	2208      	movs	r2, #8
 800fca8:	3538      	adds	r5, #56	@ 0x38
 800fcaa:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 800fcac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fcae:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 800fcb0:	03db      	lsls	r3, r3, #15
 800fcb2:	d400      	bmi.n	800fcb6 <HAL_LPTIM_IRQHandler+0xb0>
 800fcb4:	e0cf      	b.n	800fe56 <HAL_LPTIM_IRQHandler+0x250>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800fcb6:	f7ff ffa4 	bl	800fc02 <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800fcbe:	2280      	movs	r2, #128	@ 0x80
 800fcc0:	6823      	ldr	r3, [r4, #0]
 800fcc2:	0152      	lsls	r2, r2, #5
 800fcc4:	6819      	ldr	r1, [r3, #0]
 800fcc6:	4211      	tst	r1, r2
 800fcc8:	d00c      	beq.n	800fce4 <HAL_LPTIM_IRQHandler+0xde>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800fcca:	6899      	ldr	r1, [r3, #8]
 800fccc:	4211      	tst	r1, r2
 800fcce:	d009      	beq.n	800fce4 <HAL_LPTIM_IRQHandler+0xde>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fcd0:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800fcd2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	3538      	adds	r5, #56	@ 0x38
 800fcd8:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fcda:	0020      	movs	r0, r4
 800fcdc:	f7ff ff92 	bl	800fc04 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fce0:	2300      	movs	r3, #0
 800fce2:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800fce4:	2280      	movs	r2, #128	@ 0x80
 800fce6:	6823      	ldr	r3, [r4, #0]
 800fce8:	0192      	lsls	r2, r2, #6
 800fcea:	6819      	ldr	r1, [r3, #0]
 800fcec:	4211      	tst	r1, r2
 800fcee:	d00c      	beq.n	800fd0a <HAL_LPTIM_IRQHandler+0x104>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800fcf0:	6899      	ldr	r1, [r3, #8]
 800fcf2:	4211      	tst	r1, r2
 800fcf4:	d009      	beq.n	800fd0a <HAL_LPTIM_IRQHandler+0x104>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fcf6:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800fcf8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	3538      	adds	r5, #56	@ 0x38
 800fcfe:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fd00:	0020      	movs	r0, r4
 800fd02:	f7ff ff7f 	bl	800fc04 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fd06:	2300      	movs	r3, #0
 800fd08:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800fd0a:	2280      	movs	r2, #128	@ 0x80
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	01d2      	lsls	r2, r2, #7
 800fd10:	6819      	ldr	r1, [r3, #0]
 800fd12:	4211      	tst	r1, r2
 800fd14:	d00c      	beq.n	800fd30 <HAL_LPTIM_IRQHandler+0x12a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800fd16:	6899      	ldr	r1, [r3, #8]
 800fd18:	4211      	tst	r1, r2
 800fd1a:	d009      	beq.n	800fd30 <HAL_LPTIM_IRQHandler+0x12a>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fd1c:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 800fd1e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800fd20:	2304      	movs	r3, #4
 800fd22:	3538      	adds	r5, #56	@ 0x38
 800fd24:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fd26:	0020      	movs	r0, r4
 800fd28:	f7ff ff6c 	bl	800fc04 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800fd30:	2280      	movs	r2, #128	@ 0x80
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	0212      	lsls	r2, r2, #8
 800fd36:	6819      	ldr	r1, [r3, #0]
 800fd38:	4211      	tst	r1, r2
 800fd3a:	d00c      	beq.n	800fd56 <HAL_LPTIM_IRQHandler+0x150>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800fd3c:	6899      	ldr	r1, [r3, #8]
 800fd3e:	4211      	tst	r1, r2
 800fd40:	d009      	beq.n	800fd56 <HAL_LPTIM_IRQHandler+0x150>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800fd42:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 800fd44:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800fd46:	2308      	movs	r3, #8
 800fd48:	3538      	adds	r5, #56	@ 0x38
 800fd4a:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800fd4c:	0020      	movs	r0, r4
 800fd4e:	f7ff ff59 	bl	800fc04 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800fd52:	2300      	movs	r3, #0
 800fd54:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800fd56:	2202      	movs	r2, #2
 800fd58:	6823      	ldr	r3, [r4, #0]
 800fd5a:	6819      	ldr	r1, [r3, #0]
 800fd5c:	4211      	tst	r1, r2
 800fd5e:	d006      	beq.n	800fd6e <HAL_LPTIM_IRQHandler+0x168>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800fd60:	6899      	ldr	r1, [r3, #8]
 800fd62:	4211      	tst	r1, r2
 800fd64:	d003      	beq.n	800fd6e <HAL_LPTIM_IRQHandler+0x168>
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800fd66:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800fd68:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800fd6a:	f7ff ff42 	bl	800fbf2 <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800fd6e:	2204      	movs	r2, #4
 800fd70:	6823      	ldr	r3, [r4, #0]
 800fd72:	6819      	ldr	r1, [r3, #0]
 800fd74:	4211      	tst	r1, r2
 800fd76:	d006      	beq.n	800fd86 <HAL_LPTIM_IRQHandler+0x180>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800fd78:	6899      	ldr	r1, [r3, #8]
 800fd7a:	4211      	tst	r1, r2
 800fd7c:	d003      	beq.n	800fd86 <HAL_LPTIM_IRQHandler+0x180>
      HAL_LPTIM_TriggerCallback(hlptim);
 800fd7e:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800fd80:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800fd82:	f7ff ff37 	bl	800fbf4 <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800fd86:	2208      	movs	r2, #8
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	6819      	ldr	r1, [r3, #0]
 800fd8c:	4211      	tst	r1, r2
 800fd8e:	d00a      	beq.n	800fda6 <HAL_LPTIM_IRQHandler+0x1a0>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800fd90:	6899      	ldr	r1, [r3, #8]
 800fd92:	4211      	tst	r1, r2
 800fd94:	d007      	beq.n	800fda6 <HAL_LPTIM_IRQHandler+0x1a0>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800fd96:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fd98:	0023      	movs	r3, r4
 800fd9a:	3a07      	subs	r2, #7
 800fd9c:	3338      	adds	r3, #56	@ 0x38
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800fd9e:	0020      	movs	r0, r4
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800fda0:	701a      	strb	r2, [r3, #0]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800fda2:	f7ff ff28 	bl	800fbf6 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800fda6:	2280      	movs	r2, #128	@ 0x80
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	0312      	lsls	r2, r2, #12
 800fdac:	6819      	ldr	r1, [r3, #0]
 800fdae:	4211      	tst	r1, r2
 800fdb0:	d00a      	beq.n	800fdc8 <HAL_LPTIM_IRQHandler+0x1c2>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800fdb2:	6899      	ldr	r1, [r3, #8]
 800fdb4:	4211      	tst	r1, r2
 800fdb6:	d007      	beq.n	800fdc8 <HAL_LPTIM_IRQHandler+0x1c2>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800fdb8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fdba:	0023      	movs	r3, r4
 800fdbc:	2202      	movs	r2, #2
 800fdbe:	3338      	adds	r3, #56	@ 0x38
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800fdc0:	0020      	movs	r0, r4
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800fdc2:	701a      	strb	r2, [r3, #0]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800fdc4:	f7ff ff17 	bl	800fbf6 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800fdc8:	2210      	movs	r2, #16
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	6819      	ldr	r1, [r3, #0]
 800fdce:	4211      	tst	r1, r2
 800fdd0:	d006      	beq.n	800fde0 <HAL_LPTIM_IRQHandler+0x1da>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800fdd2:	6899      	ldr	r1, [r3, #8]
 800fdd4:	4211      	tst	r1, r2
 800fdd6:	d003      	beq.n	800fde0 <HAL_LPTIM_IRQHandler+0x1da>
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800fdd8:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fdda:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800fddc:	f7ff ff0c 	bl	800fbf8 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800fde0:	2220      	movs	r2, #32
 800fde2:	6823      	ldr	r3, [r4, #0]
 800fde4:	6819      	ldr	r1, [r3, #0]
 800fde6:	4211      	tst	r1, r2
 800fde8:	d006      	beq.n	800fdf8 <HAL_LPTIM_IRQHandler+0x1f2>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800fdea:	6899      	ldr	r1, [r3, #8]
 800fdec:	4211      	tst	r1, r2
 800fdee:	d003      	beq.n	800fdf8 <HAL_LPTIM_IRQHandler+0x1f2>
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800fdf0:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800fdf2:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800fdf4:	f7ff ff01 	bl	800fbfa <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800fdf8:	2240      	movs	r2, #64	@ 0x40
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	6819      	ldr	r1, [r3, #0]
 800fdfe:	4211      	tst	r1, r2
 800fe00:	d006      	beq.n	800fe10 <HAL_LPTIM_IRQHandler+0x20a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800fe02:	6899      	ldr	r1, [r3, #8]
 800fe04:	4211      	tst	r1, r2
 800fe06:	d003      	beq.n	800fe10 <HAL_LPTIM_IRQHandler+0x20a>
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800fe08:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800fe0a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800fe0c:	f7ff fef6 	bl	800fbfc <HAL_LPTIM_DirectionDownCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800fe10:	2280      	movs	r2, #128	@ 0x80
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	6819      	ldr	r1, [r3, #0]
 800fe16:	4211      	tst	r1, r2
 800fe18:	d006      	beq.n	800fe28 <HAL_LPTIM_IRQHandler+0x222>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800fe1a:	6899      	ldr	r1, [r3, #8]
 800fe1c:	4211      	tst	r1, r2
 800fe1e:	d003      	beq.n	800fe28 <HAL_LPTIM_IRQHandler+0x222>
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800fe20:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800fe22:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800fe24:	f7ff feeb 	bl	800fbfe <HAL_LPTIM_UpdateEventCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800fe28:	2280      	movs	r2, #128	@ 0x80
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	0052      	lsls	r2, r2, #1
 800fe2e:	6819      	ldr	r1, [r3, #0]
 800fe30:	4211      	tst	r1, r2
 800fe32:	d006      	beq.n	800fe42 <HAL_LPTIM_IRQHandler+0x23c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800fe34:	6899      	ldr	r1, [r3, #8]
 800fe36:	4211      	tst	r1, r2
 800fe38:	d003      	beq.n	800fe42 <HAL_LPTIM_IRQHandler+0x23c>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800fe3a:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fe3c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800fe3e:	f7ff fedf 	bl	800fc00 <HAL_LPTIM_RepCounterWriteCallback>
}
 800fe42:	bd70      	pop	{r4, r5, r6, pc}
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800fe44:	f7ff fed4 	bl	800fbf0 <HAL_LPTIM_CompareMatchCallback>
 800fe48:	e6f1      	b.n	800fc2e <HAL_LPTIM_IRQHandler+0x28>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800fe4a:	f7ff fed1 	bl	800fbf0 <HAL_LPTIM_CompareMatchCallback>
 800fe4e:	e706      	b.n	800fc5e <HAL_LPTIM_IRQHandler+0x58>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800fe50:	f7ff fece 	bl	800fbf0 <HAL_LPTIM_CompareMatchCallback>
 800fe54:	e71a      	b.n	800fc8c <HAL_LPTIM_IRQHandler+0x86>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800fe56:	f7ff fecb 	bl	800fbf0 <HAL_LPTIM_CompareMatchCallback>
 800fe5a:	e72e      	b.n	800fcba <HAL_LPTIM_IRQHandler+0xb4>

0800fe5c <PCD_GET_EP_DBUF0_CNT.isra.0>:
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800fe5c:	230a      	movs	r3, #10
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
 800fe5e:	b082      	sub	sp, #8

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
  {
    count--;
 800fe60:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800fe62:	9b01      	ldr	r3, [sp, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d107      	bne.n	800fe78 <PCD_GET_EP_DBUF0_CNT.isra.0+0x1c>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800fe68:	4b05      	ldr	r3, [pc, #20]	@ (800fe80 <PCD_GET_EP_DBUF0_CNT.isra.0+0x24>)
 800fe6a:	00c0      	lsls	r0, r0, #3
 800fe6c:	18c0      	adds	r0, r0, r3
 800fe6e:	6800      	ldr	r0, [r0, #0]
 800fe70:	0180      	lsls	r0, r0, #6
 800fe72:	0d80      	lsrs	r0, r0, #22
}
 800fe74:	b002      	add	sp, #8
 800fe76:	4770      	bx	lr
    count--;
 800fe78:	9b01      	ldr	r3, [sp, #4]
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	e7f0      	b.n	800fe60 <PCD_GET_EP_DBUF0_CNT.isra.0+0x4>
 800fe7e:	46c0      	nop			@ (mov r8, r8)
 800fe80:	40009800 	.word	0x40009800

0800fe84 <PCD_GET_EP_RX_CNT.isra.0>:
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800fe84:	230a      	movs	r3, #10
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
 800fe86:	b082      	sub	sp, #8
    count--;
 800fe88:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800fe8a:	9b01      	ldr	r3, [sp, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d107      	bne.n	800fea0 <PCD_GET_EP_RX_CNT.isra.0+0x1c>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800fe90:	4b05      	ldr	r3, [pc, #20]	@ (800fea8 <PCD_GET_EP_RX_CNT.isra.0+0x24>)
 800fe92:	00c0      	lsls	r0, r0, #3
 800fe94:	18c0      	adds	r0, r0, r3
 800fe96:	6840      	ldr	r0, [r0, #4]
 800fe98:	0180      	lsls	r0, r0, #6
 800fe9a:	0d80      	lsrs	r0, r0, #22
}
 800fe9c:	b002      	add	sp, #8
 800fe9e:	4770      	bx	lr
    count--;
 800fea0:	9b01      	ldr	r3, [sp, #4]
 800fea2:	3b01      	subs	r3, #1
 800fea4:	e7f0      	b.n	800fe88 <PCD_GET_EP_RX_CNT.isra.0+0x4>
 800fea6:	46c0      	nop			@ (mov r8, r8)
 800fea8:	40009800 	.word	0x40009800

0800feac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800feb0:	2001      	movs	r0, #1
  if (hpcd == NULL)
 800feb2:	2c00      	cmp	r4, #0
 800feb4:	d02b      	beq.n	800ff0e <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800feb6:	4d22      	ldr	r5, [pc, #136]	@ (800ff40 <HAL_PCD_Init+0x94>)
 800feb8:	5d63      	ldrb	r3, [r4, r5]
 800feba:	b2da      	uxtb	r2, r3
 800febc:	2b00      	cmp	r3, #0
 800febe:	d105      	bne.n	800fecc <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800fec0:	23a4      	movs	r3, #164	@ 0xa4
 800fec2:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800fec4:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 800fec6:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 800fec8:	f7fa fc24 	bl	800a714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800fecc:	2303      	movs	r3, #3
 800fece:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800fed0:	6820      	ldr	r0, [r4, #0]
 800fed2:	f003 fb97 	bl	8013604 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fed6:	2300      	movs	r3, #0
 800fed8:	0022      	movs	r2, r4
 800feda:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800fedc:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fede:	7920      	ldrb	r0, [r4, #4]
 800fee0:	3210      	adds	r2, #16
 800fee2:	4298      	cmp	r0, r3
 800fee4:	d114      	bne.n	800ff10 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fee6:	2100      	movs	r1, #0
 800fee8:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800feea:	0008      	movs	r0, r1
 800feec:	3251      	adds	r2, #81	@ 0x51
 800feee:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fef0:	428b      	cmp	r3, r1
 800fef2:	d117      	bne.n	800ff24 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800fef4:	6861      	ldr	r1, [r4, #4]
 800fef6:	68a2      	ldr	r2, [r4, #8]
 800fef8:	6820      	ldr	r0, [r4, #0]
 800fefa:	f003 fb8b 	bl	8013614 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800fefe:	2300      	movs	r3, #0
 800ff00:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800ff02:	3301      	adds	r3, #1
 800ff04:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ff06:	7aa3      	ldrb	r3, [r4, #10]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d015      	beq.n	800ff38 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800ff0c:	2000      	movs	r0, #0
}
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 800ff10:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ff12:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 800ff14:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ff16:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ff18:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ff1a:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ff1c:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	3228      	adds	r2, #40	@ 0x28
 800ff22:	e7de      	b.n	800fee2 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 800ff24:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ff26:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800ff28:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ff2a:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ff2c:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ff2e:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ff30:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ff32:	b2c9      	uxtb	r1, r1
 800ff34:	3228      	adds	r2, #40	@ 0x28
 800ff36:	e7db      	b.n	800fef0 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ff38:	0020      	movs	r0, r4
 800ff3a:	f000 fdb6 	bl	8010aaa <HAL_PCDEx_ActivateLPM>
 800ff3e:	e7e5      	b.n	800ff0c <HAL_PCD_Init+0x60>
 800ff40:	00000291 	.word	0x00000291

0800ff44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ff44:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800ff46:	25a4      	movs	r5, #164	@ 0xa4
 800ff48:	00ad      	lsls	r5, r5, #2
 800ff4a:	5d43      	ldrb	r3, [r0, r5]
{
 800ff4c:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800ff4e:	2002      	movs	r0, #2
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d009      	beq.n	800ff68 <HAL_PCD_Start+0x24>
 800ff54:	2301      	movs	r3, #1
 800ff56:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 800ff58:	6820      	ldr	r0, [r4, #0]
 800ff5a:	f003 fb4b 	bl	80135f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ff5e:	6820      	ldr	r0, [r4, #0]
 800ff60:	f003 fdb6 	bl	8013ad0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ff64:	2000      	movs	r0, #0
 800ff66:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800ff68:	bd70      	pop	{r4, r5, r6, pc}

0800ff6a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800ff6a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800ff6c:	25a4      	movs	r5, #164	@ 0xa4
 800ff6e:	00ad      	lsls	r5, r5, #2
 800ff70:	5d43      	ldrb	r3, [r0, r5]
{
 800ff72:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800ff74:	2002      	movs	r0, #2
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d009      	beq.n	800ff8e <HAL_PCD_Stop+0x24>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 800ff7e:	6820      	ldr	r0, [r4, #0]
 800ff80:	f003 fb40 	bl	8013604 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800ff84:	6820      	ldr	r0, [r4, #0]
 800ff86:	f003 fdab 	bl	8013ae0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}

0800ff90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ff90:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800ff92:	25a4      	movs	r5, #164	@ 0xa4
 800ff94:	00ad      	lsls	r5, r5, #2
 800ff96:	5d43      	ldrb	r3, [r0, r5]
{
 800ff98:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800ff9a:	2002      	movs	r0, #2
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d007      	beq.n	800ffb0 <HAL_PCD_SetAddress+0x20>
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ffa4:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 800ffa6:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ffa8:	f003 fd8c 	bl	8013ac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ffac:	2000      	movs	r0, #0
 800ffae:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffb4 <HAL_PCD_IRQHandler>:
{
 800ffb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffb6:	0004      	movs	r4, r0
 800ffb8:	b087      	sub	sp, #28
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800ffba:	6800      	ldr	r0, [r0, #0]
 800ffbc:	f003 fd98 	bl	8013af0 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800ffc0:	2580      	movs	r5, #128	@ 0x80
 800ffc2:	2380      	movs	r3, #128	@ 0x80
 800ffc4:	022d      	lsls	r5, r5, #8
 800ffc6:	021b      	lsls	r3, r3, #8
 800ffc8:	4005      	ands	r5, r0
 800ffca:	4218      	tst	r0, r3
 800ffcc:	d100      	bne.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
 800ffce:	e3a5      	b.n	801071c <HAL_PCD_IRQHandler+0x768>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ffd0:	2280      	movs	r2, #128	@ 0x80
 800ffd2:	6826      	ldr	r6, [r4, #0]
 800ffd4:	0212      	lsls	r2, r2, #8
 800ffd6:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800ffd8:	4213      	tst	r3, r2
 800ffda:	d101      	bne.n	800ffe0 <HAL_PCD_IRQHandler+0x2c>
}
 800ffdc:	b007      	add	sp, #28
 800ffde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800ffe0:	220f      	movs	r2, #15
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800ffe2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800ffe4:	401a      	ands	r2, r3
 800ffe6:	9200      	str	r2, [sp, #0]

    if (epindex == 0U)
 800ffe8:	220f      	movs	r2, #15
 800ffea:	4213      	tst	r3, r2
 800ffec:	d000      	beq.n	800fff0 <HAL_PCD_IRQHandler+0x3c>
 800ffee:	e07e      	b.n	80100ee <HAL_PCD_IRQHandler+0x13a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800fff0:	0019      	movs	r1, r3
 800fff2:	3201      	adds	r2, #1
 800fff4:	4011      	ands	r1, r2
 800fff6:	4213      	tst	r3, r2
 800fff8:	d121      	bne.n	801003e <HAL_PCD_IRQHandler+0x8a>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fffa:	6833      	ldr	r3, [r6, #0]
 800fffc:	4ad3      	ldr	r2, [pc, #844]	@ (801034c <HAL_PCD_IRQHandler+0x398>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800fffe:	0020      	movs	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010000:	4013      	ands	r3, r2
 8010002:	2280      	movs	r2, #128	@ 0x80
 8010004:	0212      	lsls	r2, r2, #8
 8010006:	4313      	orrs	r3, r2
 8010008:	6033      	str	r3, [r6, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801000a:	7c23      	ldrb	r3, [r4, #16]
 801000c:	4ad0      	ldr	r2, [pc, #832]	@ (8010350 <HAL_PCD_IRQHandler+0x39c>)
 801000e:	00db      	lsls	r3, r3, #3
 8010010:	189b      	adds	r3, r3, r2
 8010012:	681b      	ldr	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8010014:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010016:	019b      	lsls	r3, r3, #6
 8010018:	0d9b      	lsrs	r3, r3, #22
 801001a:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 801001c:	18d3      	adds	r3, r2, r3
 801001e:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8010020:	f008 fb5e 	bl	80186e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8010024:	7b23      	ldrb	r3, [r4, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0d2      	beq.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
 801002a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801002c:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801002e:	2a00      	cmp	r2, #0
 8010030:	d1ce      	bne.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8010032:	2080      	movs	r0, #128	@ 0x80
 8010034:	7b23      	ldrb	r3, [r4, #12]
 8010036:	4303      	orrs	r3, r0
 8010038:	64cb      	str	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 801003a:	7322      	strb	r2, [r4, #12]
 801003c:	e7c8      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801003e:	6833      	ldr	r3, [r6, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8010040:	2280      	movs	r2, #128	@ 0x80
 8010042:	001f      	movs	r7, r3
 8010044:	0112      	lsls	r2, r2, #4
 8010046:	4017      	ands	r7, r2
 8010048:	4213      	tst	r3, r2
 801004a:	d01b      	beq.n	8010084 <HAL_PCD_IRQHandler+0xd0>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801004c:	23a8      	movs	r3, #168	@ 0xa8
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	5ce0      	ldrb	r0, [r4, r3]
 8010052:	f7ff ff17 	bl	800fe84 <PCD_GET_EP_RX_CNT.isra.0>
 8010056:	0022      	movs	r2, r4

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010058:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801005a:	3251      	adds	r2, #81	@ 0x51
 801005c:	32ff      	adds	r2, #255	@ 0xff
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801005e:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010060:	0003      	movs	r3, r0
 8010062:	61d0      	str	r0, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010064:	1861      	adds	r1, r4, r1
 8010066:	0030      	movs	r0, r6
 8010068:	88d2      	ldrh	r2, [r2, #6]
 801006a:	f003 fee1 	bl	8013e30 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801006e:	6821      	ldr	r1, [r4, #0]
 8010070:	4bb8      	ldr	r3, [pc, #736]	@ (8010354 <HAL_PCD_IRQHandler+0x3a0>)
 8010072:	680a      	ldr	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8010074:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010076:	401a      	ands	r2, r3
 8010078:	2380      	movs	r3, #128	@ 0x80
 801007a:	4313      	orrs	r3, r2
 801007c:	600b      	str	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 801007e:	f008 fadd 	bl	801863c <HAL_PCD_SetupStageCallback>
 8010082:	e7a5      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8010084:	041b      	lsls	r3, r3, #16
 8010086:	d5a3      	bpl.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010088:	6832      	ldr	r2, [r6, #0]
 801008a:	4bb2      	ldr	r3, [pc, #712]	@ (8010354 <HAL_PCD_IRQHandler+0x3a0>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801008c:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801008e:	401a      	ands	r2, r3
 8010090:	2380      	movs	r3, #128	@ 0x80
 8010092:	4313      	orrs	r3, r2
 8010094:	6033      	str	r3, [r6, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010096:	23a8      	movs	r3, #168	@ 0xa8
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	5ce0      	ldrb	r0, [r4, r3]
 801009c:	f7ff fef2 	bl	800fe84 <PCD_GET_EP_RX_CNT.isra.0>
 80100a0:	3551      	adds	r5, #81	@ 0x51
 80100a2:	35ff      	adds	r5, #255	@ 0xff
 80100a4:	1e03      	subs	r3, r0, #0
 80100a6:	61e8      	str	r0, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80100a8:	d00e      	beq.n	80100c8 <HAL_PCD_IRQHandler+0x114>
 80100aa:	6969      	ldr	r1, [r5, #20]
 80100ac:	2900      	cmp	r1, #0
 80100ae:	d00b      	beq.n	80100c8 <HAL_PCD_IRQHandler+0x114>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80100b0:	0030      	movs	r0, r6
 80100b2:	88ea      	ldrh	r2, [r5, #6]
 80100b4:	f003 febc 	bl	8013e30 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 80100b8:	696b      	ldr	r3, [r5, #20]
 80100ba:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80100bc:	0039      	movs	r1, r7
            ep->xfer_buff += ep->xfer_count;
 80100be:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80100c0:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80100c2:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80100c4:	f008 fb76 	bl	80187b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80100c8:	6821      	ldr	r1, [r4, #0]
 80100ca:	680a      	ldr	r2, [r1, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80100cc:	0513      	lsls	r3, r2, #20
 80100ce:	d500      	bpl.n	80100d2 <HAL_PCD_IRQHandler+0x11e>
 80100d0:	e77e      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
 80100d2:	23c0      	movs	r3, #192	@ 0xc0
 80100d4:	019b      	lsls	r3, r3, #6
 80100d6:	401a      	ands	r2, r3
 80100d8:	429a      	cmp	r2, r3
 80100da:	d100      	bne.n	80100de <HAL_PCD_IRQHandler+0x12a>
 80100dc:	e778      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80100de:	680a      	ldr	r2, [r1, #0]
 80100e0:	489d      	ldr	r0, [pc, #628]	@ (8010358 <HAL_PCD_IRQHandler+0x3a4>)
 80100e2:	4002      	ands	r2, r0
 80100e4:	4053      	eors	r3, r2
 80100e6:	4a9d      	ldr	r2, [pc, #628]	@ (801035c <HAL_PCD_IRQHandler+0x3a8>)
 80100e8:	4313      	orrs	r3, r2
 80100ea:	600b      	str	r3, [r1, #0]
 80100ec:	e770      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80100ee:	9b00      	ldr	r3, [sp, #0]
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	9304      	str	r3, [sp, #16]
 80100f4:	18f3      	adds	r3, r6, r3
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	9203      	str	r2, [sp, #12]
 80100fa:	466a      	mov	r2, sp
 80100fc:	8992      	ldrh	r2, [r2, #12]
 80100fe:	9201      	str	r2, [sp, #4]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8010100:	9a03      	ldr	r2, [sp, #12]
 8010102:	0412      	lsls	r2, r2, #16
 8010104:	d400      	bmi.n	8010108 <HAL_PCD_IRQHandler+0x154>
 8010106:	e082      	b.n	801020e <HAL_PCD_IRQHandler+0x25a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8010108:	6819      	ldr	r1, [r3, #0]
 801010a:	4a92      	ldr	r2, [pc, #584]	@ (8010354 <HAL_PCD_IRQHandler+0x3a0>)
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801010c:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801010e:	4011      	ands	r1, r2
 8010110:	2280      	movs	r2, #128	@ 0x80
 8010112:	430a      	orrs	r2, r1
 8010114:	601a      	str	r2, [r3, #0]
        if (ep->doublebuffer == 0U)
 8010116:	9b00      	ldr	r3, [sp, #0]
 8010118:	435d      	muls	r5, r3
 801011a:	1965      	adds	r5, r4, r5
 801011c:	002b      	movs	r3, r5
 801011e:	002a      	movs	r2, r5
 8010120:	335d      	adds	r3, #93	@ 0x5d
 8010122:	33ff      	adds	r3, #255	@ 0xff
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	3251      	adds	r2, #81	@ 0x51
 8010128:	32ff      	adds	r2, #255	@ 0xff
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10c      	bne.n	8010148 <HAL_PCD_IRQHandler+0x194>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801012e:	7810      	ldrb	r0, [r2, #0]
 8010130:	f7ff fea8 	bl	800fe84 <PCD_GET_EP_RX_CNT.isra.0>
 8010134:	1e07      	subs	r7, r0, #0

          if (count != 0U)
 8010136:	d04f      	beq.n	80101d8 <HAL_PCD_IRQHandler+0x224>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8010138:	002b      	movs	r3, r5
 801013a:	3357      	adds	r3, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801013c:	33ff      	adds	r3, #255	@ 0xff
 801013e:	35fc      	adds	r5, #252	@ 0xfc
 8010140:	881a      	ldrh	r2, [r3, #0]
 8010142:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8010144:	003b      	movs	r3, r7
 8010146:	e044      	b.n	80101d2 <HAL_PCD_IRQHandler+0x21e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010148:	7813      	ldrb	r3, [r2, #0]
 801014a:	9302      	str	r3, [sp, #8]
          if (ep->type == EP_TYPE_BULK)
 801014c:	002b      	movs	r3, r5
 801014e:	3354      	adds	r3, #84	@ 0x54
 8010150:	33ff      	adds	r3, #255	@ 0xff
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	2b02      	cmp	r3, #2
 8010156:	d000      	beq.n	801015a <HAL_PCD_IRQHandler+0x1a6>
 8010158:	e0c7      	b.n	80102ea <HAL_PCD_IRQHandler+0x336>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801015a:	2380      	movs	r3, #128	@ 0x80
 801015c:	9a01      	ldr	r2, [sp, #4]
 801015e:	01db      	lsls	r3, r3, #7
 8010160:	401a      	ands	r2, r3
 8010162:	9205      	str	r2, [sp, #20]
 8010164:	9a01      	ldr	r2, [sp, #4]
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010166:	9802      	ldr	r0, [sp, #8]
 8010168:	35fc      	adds	r5, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801016a:	421a      	tst	r2, r3
 801016c:	d100      	bne.n	8010170 <HAL_PCD_IRQHandler+0x1bc>
 801016e:	e08d      	b.n	801028c <HAL_PCD_IRQHandler+0x2d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010170:	f7ff fe74 	bl	800fe5c <PCD_GET_EP_DBUF0_CNT.isra.0>

    if (ep->xfer_len >= count)
 8010174:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010176:	0003      	movs	r3, r0
 8010178:	0007      	movs	r7, r0
    if (ep->xfer_len >= count)
 801017a:	4282      	cmp	r2, r0
 801017c:	d20e      	bcs.n	801019c <HAL_PCD_IRQHandler+0x1e8>
 801017e:	2200      	movs	r2, #0
 8010180:	66ea      	str	r2, [r5, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010182:	9a02      	ldr	r2, [sp, #8]
 8010184:	4874      	ldr	r0, [pc, #464]	@ (8010358 <HAL_PCD_IRQHandler+0x3a4>)
 8010186:	0092      	lsls	r2, r2, #2
 8010188:	18b2      	adds	r2, r6, r2
 801018a:	6811      	ldr	r1, [r2, #0]
 801018c:	4001      	ands	r1, r0
 801018e:	2080      	movs	r0, #128	@ 0x80
 8010190:	0180      	lsls	r0, r0, #6
 8010192:	4048      	eors	r0, r1
 8010194:	4971      	ldr	r1, [pc, #452]	@ (801035c <HAL_PCD_IRQHandler+0x3a8>)
 8010196:	4301      	orrs	r1, r0
 8010198:	6011      	str	r1, [r2, #0]
 801019a:	e002      	b.n	80101a2 <HAL_PCD_IRQHandler+0x1ee>
      ep->xfer_len -= count;
 801019c:	1a12      	subs	r2, r2, r0
 801019e:	66ea      	str	r2, [r5, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80101a0:	d0ef      	beq.n	8010182 <HAL_PCD_IRQHandler+0x1ce>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80101a2:	9a01      	ldr	r2, [sp, #4]
 80101a4:	0652      	lsls	r2, r2, #25
 80101a6:	d508      	bpl.n	80101ba <HAL_PCD_IRQHandler+0x206>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80101a8:	9a02      	ldr	r2, [sp, #8]
 80101aa:	496d      	ldr	r1, [pc, #436]	@ (8010360 <HAL_PCD_IRQHandler+0x3ac>)
 80101ac:	0092      	lsls	r2, r2, #2
 80101ae:	18b2      	adds	r2, r6, r2
 80101b0:	6810      	ldr	r0, [r2, #0]
 80101b2:	4008      	ands	r0, r1
 80101b4:	496b      	ldr	r1, [pc, #428]	@ (8010364 <HAL_PCD_IRQHandler+0x3b0>)
 80101b6:	4301      	orrs	r1, r0
 80101b8:	6011      	str	r1, [r2, #0]
    }

    if (count != 0U)
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d00c      	beq.n	80101d8 <HAL_PCD_IRQHandler+0x224>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80101be:	2128      	movs	r1, #40	@ 0x28
 80101c0:	9a00      	ldr	r2, [sp, #0]
 80101c2:	4351      	muls	r1, r2
 80101c4:	1861      	adds	r1, r4, r1
 80101c6:	000a      	movs	r2, r1
 80101c8:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80101ca:	32ff      	adds	r2, #255	@ 0xff
 80101cc:	31fc      	adds	r1, #252	@ 0xfc
 80101ce:	8812      	ldrh	r2, [r2, #0]
 80101d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80101d2:	0030      	movs	r0, r6
 80101d4:	f003 fe2c 	bl	8013e30 <USB_ReadPMA>
        ep->xfer_count += count;
 80101d8:	2328      	movs	r3, #40	@ 0x28
 80101da:	9900      	ldr	r1, [sp, #0]
 80101dc:	4359      	muls	r1, r3
 80101de:	1862      	adds	r2, r4, r1
 80101e0:	32fc      	adds	r2, #252	@ 0xfc
 80101e2:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80101e4:	19c0      	adds	r0, r0, r7
 80101e6:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 80101e8:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80101ea:	19c0      	adds	r0, r0, r7
 80101ec:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80101ee:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80101f0:	2800      	cmp	r0, #0
 80101f2:	d003      	beq.n	80101fc <HAL_PCD_IRQHandler+0x248>
 80101f4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80101f6:	4297      	cmp	r7, r2
 80101f8:	d300      	bcc.n	80101fc <HAL_PCD_IRQHandler+0x248>
 80101fa:	e095      	b.n	8010328 <HAL_PCD_IRQHandler+0x374>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80101fc:	9a00      	ldr	r2, [sp, #0]
 80101fe:	0020      	movs	r0, r4
 8010200:	4353      	muls	r3, r2
 8010202:	18e3      	adds	r3, r4, r3
 8010204:	3351      	adds	r3, #81	@ 0x51
 8010206:	33ff      	adds	r3, #255	@ 0xff
 8010208:	7819      	ldrb	r1, [r3, #0]
 801020a:	f008 fad3 	bl	80187b4 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801020e:	6823      	ldr	r3, [r4, #0]
 8010210:	9302      	str	r3, [sp, #8]
      if ((wEPVal & USB_EP_VTTX) != 0U)
 8010212:	9b03      	ldr	r3, [sp, #12]
 8010214:	061b      	lsls	r3, r3, #24
 8010216:	d400      	bmi.n	801021a <HAL_PCD_IRQHandler+0x266>
 8010218:	e6da      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801021a:	9a02      	ldr	r2, [sp, #8]
 801021c:	9b04      	ldr	r3, [sp, #16]
 801021e:	4694      	mov	ip, r2
 8010220:	4463      	add	r3, ip
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	4949      	ldr	r1, [pc, #292]	@ (801034c <HAL_PCD_IRQHandler+0x398>)
 8010226:	400a      	ands	r2, r1
 8010228:	2180      	movs	r1, #128	@ 0x80
 801022a:	0209      	lsls	r1, r1, #8
 801022c:	430a      	orrs	r2, r1
 801022e:	601a      	str	r2, [r3, #0]
        if (ep->type == EP_TYPE_ISOC)
 8010230:	2328      	movs	r3, #40	@ 0x28
 8010232:	9900      	ldr	r1, [sp, #0]
 8010234:	4359      	muls	r1, r3
 8010236:	1866      	adds	r6, r4, r1
 8010238:	7cf2      	ldrb	r2, [r6, #19]
 801023a:	9204      	str	r2, [sp, #16]
 801023c:	2a01      	cmp	r2, #1
 801023e:	d000      	beq.n	8010242 <HAL_PCD_IRQHandler+0x28e>
 8010240:	e0af      	b.n	80103a2 <HAL_PCD_IRQHandler+0x3ee>
          ep->xfer_len = 0U;
 8010242:	9a00      	ldr	r2, [sp, #0]
 8010244:	3201      	adds	r2, #1
 8010246:	4353      	muls	r3, r2
 8010248:	2200      	movs	r2, #0
 801024a:	511a      	str	r2, [r3, r4]
          if (ep->doublebuffer != 0U)
 801024c:	7f33      	ldrb	r3, [r6, #28]
 801024e:	4293      	cmp	r3, r2
 8010250:	d013      	beq.n	801027a <HAL_PCD_IRQHandler+0x2c6>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010252:	9b03      	ldr	r3, [sp, #12]
 8010254:	065b      	lsls	r3, r3, #25
 8010256:	d400      	bmi.n	801025a <HAL_PCD_IRQHandler+0x2a6>
 8010258:	e086      	b.n	8010368 <HAL_PCD_IRQHandler+0x3b4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801025a:	7c73      	ldrb	r3, [r6, #17]
 801025c:	4293      	cmp	r3, r2
 801025e:	d16a      	bne.n	8010336 <HAL_PCD_IRQHandler+0x382>
 8010260:	7c33      	ldrb	r3, [r6, #16]
 8010262:	4a3b      	ldr	r2, [pc, #236]	@ (8010350 <HAL_PCD_IRQHandler+0x39c>)
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	189b      	adds	r3, r3, r2
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	0192      	lsls	r2, r2, #6
 801026c:	0992      	lsrs	r2, r2, #6
 801026e:	601a      	str	r2, [r3, #0]
 8010270:	2280      	movs	r2, #128	@ 0x80
 8010272:	6819      	ldr	r1, [r3, #0]
 8010274:	0612      	lsls	r2, r2, #24
 8010276:	430a      	orrs	r2, r1
 8010278:	601a      	str	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801027a:	2328      	movs	r3, #40	@ 0x28
 801027c:	9a00      	ldr	r2, [sp, #0]
 801027e:	4353      	muls	r3, r2
 8010280:	18e3      	adds	r3, r4, r3
 8010282:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010284:	0020      	movs	r0, r4
 8010286:	f008 fa2b 	bl	80186e0 <HAL_PCD_DataInStageCallback>
 801028a:	e6a1      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801028c:	f7ff fdfa 	bl	800fe84 <PCD_GET_EP_RX_CNT.isra.0>
    if (ep->xfer_len >= count)
 8010290:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010292:	0003      	movs	r3, r0
 8010294:	0007      	movs	r7, r0
    if (ep->xfer_len >= count)
 8010296:	4282      	cmp	r2, r0
 8010298:	d20e      	bcs.n	80102b8 <HAL_PCD_IRQHandler+0x304>
 801029a:	9a05      	ldr	r2, [sp, #20]
 801029c:	66ea      	str	r2, [r5, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801029e:	9a02      	ldr	r2, [sp, #8]
 80102a0:	482d      	ldr	r0, [pc, #180]	@ (8010358 <HAL_PCD_IRQHandler+0x3a4>)
 80102a2:	0092      	lsls	r2, r2, #2
 80102a4:	18b2      	adds	r2, r6, r2
 80102a6:	6811      	ldr	r1, [r2, #0]
 80102a8:	4001      	ands	r1, r0
 80102aa:	2080      	movs	r0, #128	@ 0x80
 80102ac:	0180      	lsls	r0, r0, #6
 80102ae:	4048      	eors	r0, r1
 80102b0:	492a      	ldr	r1, [pc, #168]	@ (801035c <HAL_PCD_IRQHandler+0x3a8>)
 80102b2:	4301      	orrs	r1, r0
 80102b4:	6011      	str	r1, [r2, #0]
 80102b6:	e002      	b.n	80102be <HAL_PCD_IRQHandler+0x30a>
      ep->xfer_len -= count;
 80102b8:	1a12      	subs	r2, r2, r0
 80102ba:	66ea      	str	r2, [r5, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80102bc:	d0ef      	beq.n	801029e <HAL_PCD_IRQHandler+0x2ea>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80102be:	9a01      	ldr	r2, [sp, #4]
 80102c0:	0652      	lsls	r2, r2, #25
 80102c2:	d408      	bmi.n	80102d6 <HAL_PCD_IRQHandler+0x322>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80102c4:	9a02      	ldr	r2, [sp, #8]
 80102c6:	4926      	ldr	r1, [pc, #152]	@ (8010360 <HAL_PCD_IRQHandler+0x3ac>)
 80102c8:	0092      	lsls	r2, r2, #2
 80102ca:	18b2      	adds	r2, r6, r2
 80102cc:	6810      	ldr	r0, [r2, #0]
 80102ce:	4008      	ands	r0, r1
 80102d0:	4924      	ldr	r1, [pc, #144]	@ (8010364 <HAL_PCD_IRQHandler+0x3b0>)
 80102d2:	4301      	orrs	r1, r0
 80102d4:	6011      	str	r1, [r2, #0]
    if (count != 0U)
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d100      	bne.n	80102dc <HAL_PCD_IRQHandler+0x328>
 80102da:	e77d      	b.n	80101d8 <HAL_PCD_IRQHandler+0x224>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80102dc:	2128      	movs	r1, #40	@ 0x28
 80102de:	9a00      	ldr	r2, [sp, #0]
 80102e0:	4351      	muls	r1, r2
 80102e2:	1861      	adds	r1, r4, r1
 80102e4:	000a      	movs	r2, r1
 80102e6:	325b      	adds	r2, #91	@ 0x5b
 80102e8:	e76f      	b.n	80101ca <HAL_PCD_IRQHandler+0x216>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80102ea:	9b02      	ldr	r3, [sp, #8]
 80102ec:	491c      	ldr	r1, [pc, #112]	@ (8010360 <HAL_PCD_IRQHandler+0x3ac>)
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	18f3      	adds	r3, r6, r3
 80102f2:	6818      	ldr	r0, [r3, #0]
 80102f4:	4008      	ands	r0, r1
 80102f6:	491b      	ldr	r1, [pc, #108]	@ (8010364 <HAL_PCD_IRQHandler+0x3b0>)
 80102f8:	4301      	orrs	r1, r0
 80102fa:	6019      	str	r1, [r3, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80102fc:	7810      	ldrb	r0, [r2, #0]
 80102fe:	0083      	lsls	r3, r0, #2
 8010300:	18f3      	adds	r3, r6, r3
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	045b      	lsls	r3, r3, #17
 8010306:	d507      	bpl.n	8010318 <HAL_PCD_IRQHandler+0x364>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010308:	f7ff fda8 	bl	800fe5c <PCD_GET_EP_DBUF0_CNT.isra.0>
 801030c:	1e07      	subs	r7, r0, #0
              if (count != 0U)
 801030e:	d100      	bne.n	8010312 <HAL_PCD_IRQHandler+0x35e>
 8010310:	e762      	b.n	80101d8 <HAL_PCD_IRQHandler+0x224>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010312:	002b      	movs	r3, r5
 8010314:	3359      	adds	r3, #89	@ 0x59
 8010316:	e711      	b.n	801013c <HAL_PCD_IRQHandler+0x188>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010318:	f7ff fdb4 	bl	800fe84 <PCD_GET_EP_RX_CNT.isra.0>
 801031c:	1e07      	subs	r7, r0, #0
              if (count != 0U)
 801031e:	d100      	bne.n	8010322 <HAL_PCD_IRQHandler+0x36e>
 8010320:	e75a      	b.n	80101d8 <HAL_PCD_IRQHandler+0x224>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010322:	002b      	movs	r3, r5
 8010324:	335b      	adds	r3, #91	@ 0x5b
 8010326:	e709      	b.n	801013c <HAL_PCD_IRQHandler+0x188>
        ep = &hpcd->OUT_ep[epindex];
 8010328:	3151      	adds	r1, #81	@ 0x51
 801032a:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801032c:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 801032e:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010330:	f003 fc0e 	bl	8013b50 <USB_EPStartXfer>
 8010334:	e76b      	b.n	801020e <HAL_PCD_IRQHandler+0x25a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010336:	2b01      	cmp	r3, #1
 8010338:	d19f      	bne.n	801027a <HAL_PCD_IRQHandler+0x2c6>
 801033a:	7c33      	ldrb	r3, [r6, #16]
 801033c:	4a04      	ldr	r2, [pc, #16]	@ (8010350 <HAL_PCD_IRQHandler+0x39c>)
 801033e:	00db      	lsls	r3, r3, #3
 8010340:	189b      	adds	r3, r3, r2
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	b292      	uxth	r2, r2
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	e795      	b.n	8010278 <HAL_PCD_IRQHandler+0x2c4>
 801034c:	07ff8f0f 	.word	0x07ff8f0f
 8010350:	40009800 	.word	0x40009800
 8010354:	07ff0f8f 	.word	0x07ff0f8f
 8010358:	07ffbf8f 	.word	0x07ffbf8f
 801035c:	00008080 	.word	0x00008080
 8010360:	07ff8f8f 	.word	0x07ff8f8f
 8010364:	000080c0 	.word	0x000080c0
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010368:	7c73      	ldrb	r3, [r6, #17]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10d      	bne.n	801038a <HAL_PCD_IRQHandler+0x3d6>
 801036e:	7c33      	ldrb	r3, [r6, #16]
 8010370:	4ad5      	ldr	r2, [pc, #852]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 8010372:	00db      	lsls	r3, r3, #3
 8010374:	189b      	adds	r3, r3, r2
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	0192      	lsls	r2, r2, #6
 801037a:	0992      	lsrs	r2, r2, #6
 801037c:	605a      	str	r2, [r3, #4]
 801037e:	2280      	movs	r2, #128	@ 0x80
 8010380:	6859      	ldr	r1, [r3, #4]
 8010382:	0612      	lsls	r2, r2, #24
 8010384:	430a      	orrs	r2, r1
 8010386:	605a      	str	r2, [r3, #4]
 8010388:	e777      	b.n	801027a <HAL_PCD_IRQHandler+0x2c6>
 801038a:	2b01      	cmp	r3, #1
 801038c:	d000      	beq.n	8010390 <HAL_PCD_IRQHandler+0x3dc>
 801038e:	e774      	b.n	801027a <HAL_PCD_IRQHandler+0x2c6>
 8010390:	7c33      	ldrb	r3, [r6, #16]
 8010392:	4acd      	ldr	r2, [pc, #820]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	189b      	adds	r3, r3, r2
 8010398:	685a      	ldr	r2, [r3, #4]
 801039a:	b292      	uxth	r2, r2
 801039c:	605a      	str	r2, [r3, #4]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	e7f1      	b.n	8010386 <HAL_PCD_IRQHandler+0x3d2>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80103a2:	2380      	movs	r3, #128	@ 0x80
 80103a4:	9803      	ldr	r0, [sp, #12]
 80103a6:	9a03      	ldr	r2, [sp, #12]
 80103a8:	005b      	lsls	r3, r3, #1
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80103aa:	7c35      	ldrb	r5, [r6, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80103ac:	4018      	ands	r0, r3
 80103ae:	421a      	tst	r2, r3
 80103b0:	d119      	bne.n	80103e6 <HAL_PCD_IRQHandler+0x432>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80103b2:	4ac5      	ldr	r2, [pc, #788]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 80103b4:	00eb      	lsls	r3, r5, #3
 80103b6:	189b      	adds	r3, r3, r2
 80103b8:	681b      	ldr	r3, [r3, #0]
            if (ep->xfer_len > TxPctSize)
 80103ba:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80103bc:	019b      	lsls	r3, r3, #6
            if (ep->xfer_len > TxPctSize)
 80103be:	0d9b      	lsrs	r3, r3, #22
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d802      	bhi.n	80103ca <HAL_PCD_IRQHandler+0x416>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80103c4:	0029      	movs	r1, r5
 80103c6:	62b0      	str	r0, [r6, #40]	@ 0x28
 80103c8:	e75c      	b.n	8010284 <HAL_PCD_IRQHandler+0x2d0>
              ep->xfer_len -= TxPctSize;
 80103ca:	1ad2      	subs	r2, r2, r3
 80103cc:	62b2      	str	r2, [r6, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 80103ce:	6a72      	ldr	r2, [r6, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 80103d0:	3110      	adds	r1, #16
              ep->xfer_buff += TxPctSize;
 80103d2:	18d2      	adds	r2, r2, r3
 80103d4:	6272      	str	r2, [r6, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80103d6:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80103d8:	9802      	ldr	r0, [sp, #8]
              ep->xfer_count += TxPctSize;
 80103da:	18d3      	adds	r3, r2, r3
 80103dc:	62f3      	str	r3, [r6, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80103de:	1861      	adds	r1, r4, r1
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80103e0:	f003 fbb6 	bl	8013b50 <USB_EPStartXfer>
 80103e4:	e5f4      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80103e6:	2340      	movs	r3, #64	@ 0x40
 80103e8:	9f01      	ldr	r7, [sp, #4]
 80103ea:	9a01      	ldr	r2, [sp, #4]
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80103ec:	0028      	movs	r0, r5
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80103ee:	401f      	ands	r7, r3
 80103f0:	421a      	tst	r2, r3
 80103f2:	d100      	bne.n	80103f6 <HAL_PCD_IRQHandler+0x442>
 80103f4:	e0d2      	b.n	801059c <HAL_PCD_IRQHandler+0x5e8>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80103f6:	f7ff fd31 	bl	800fe5c <PCD_GET_EP_DBUF0_CNT.isra.0>

    if (ep->xfer_len > TxPctSize)
 80103fa:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80103fc:	2300      	movs	r3, #0
    if (ep->xfer_len > TxPctSize)
 80103fe:	4282      	cmp	r2, r0
 8010400:	d900      	bls.n	8010404 <HAL_PCD_IRQHandler+0x450>
      ep->xfer_len -= TxPctSize;
 8010402:	1a13      	subs	r3, r2, r0
 8010404:	2280      	movs	r2, #128	@ 0x80
 8010406:	9f01      	ldr	r7, [sp, #4]
 8010408:	01d2      	lsls	r2, r2, #7
 801040a:	62b3      	str	r3, [r6, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801040c:	4017      	ands	r7, r2
 801040e:	2b00      	cmp	r3, #0
 8010410:	d14d      	bne.n	80104ae <HAL_PCD_IRQHandler+0x4fa>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010412:	9a00      	ldr	r2, [sp, #0]
 8010414:	3328      	adds	r3, #40	@ 0x28
 8010416:	4353      	muls	r3, r2
 8010418:	18e3      	adds	r3, r4, r3
 801041a:	7c5b      	ldrb	r3, [r3, #17]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d136      	bne.n	801048e <HAL_PCD_IRQHandler+0x4da>
 8010420:	2180      	movs	r1, #128	@ 0x80
 8010422:	4aa9      	ldr	r2, [pc, #676]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 8010424:	00eb      	lsls	r3, r5, #3
 8010426:	189b      	adds	r3, r3, r2
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	0609      	lsls	r1, r1, #24
 801042c:	0192      	lsls	r2, r2, #6
 801042e:	0992      	lsrs	r2, r2, #6
 8010430:	601a      	str	r2, [r3, #0]
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	430a      	orrs	r2, r1
 8010436:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010438:	685a      	ldr	r2, [r3, #4]
 801043a:	0192      	lsls	r2, r2, #6
 801043c:	0992      	lsrs	r2, r2, #6
 801043e:	605a      	str	r2, [r3, #4]
 8010440:	685a      	ldr	r2, [r3, #4]
 8010442:	4311      	orrs	r1, r2
 8010444:	6059      	str	r1, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8010446:	9b04      	ldr	r3, [sp, #16]
 8010448:	2b02      	cmp	r3, #2
 801044a:	d10a      	bne.n	8010462 <HAL_PCD_IRQHandler+0x4ae>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 801044c:	9a02      	ldr	r2, [sp, #8]
 801044e:	00ab      	lsls	r3, r5, #2
 8010450:	18d3      	adds	r3, r2, r3
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	499d      	ldr	r1, [pc, #628]	@ (80106cc <HAL_PCD_IRQHandler+0x718>)
 8010456:	400a      	ands	r2, r1
 8010458:	2120      	movs	r1, #32
 801045a:	4051      	eors	r1, r2
 801045c:	4a9c      	ldr	r2, [pc, #624]	@ (80106d0 <HAL_PCD_IRQHandler+0x71c>)
 801045e:	430a      	orrs	r2, r1
 8010460:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010462:	0029      	movs	r1, r5
 8010464:	0020      	movs	r0, r4
 8010466:	f008 f93b 	bl	80186e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801046a:	2f00      	cmp	r7, #0
 801046c:	d100      	bne.n	8010470 <HAL_PCD_IRQHandler+0x4bc>
 801046e:	e5af      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010470:	2328      	movs	r3, #40	@ 0x28
 8010472:	9a00      	ldr	r2, [sp, #0]
 8010474:	4353      	muls	r3, r2
 8010476:	18e3      	adds	r3, r4, r3
 8010478:	7c1a      	ldrb	r2, [r3, #16]
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	0092      	lsls	r2, r2, #2
 801047e:	189b      	adds	r3, r3, r2
 8010480:	6819      	ldr	r1, [r3, #0]
 8010482:	4a94      	ldr	r2, [pc, #592]	@ (80106d4 <HAL_PCD_IRQHandler+0x720>)
 8010484:	4011      	ands	r1, r2
 8010486:	4a94      	ldr	r2, [pc, #592]	@ (80106d8 <HAL_PCD_IRQHandler+0x724>)
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8010488:	430a      	orrs	r2, r1
 801048a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801048c:	e5a0      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801048e:	2b01      	cmp	r3, #1
 8010490:	d1d9      	bne.n	8010446 <HAL_PCD_IRQHandler+0x492>
 8010492:	4a8d      	ldr	r2, [pc, #564]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 8010494:	00eb      	lsls	r3, r5, #3
 8010496:	189b      	adds	r3, r3, r2
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	b292      	uxth	r2, r2
 801049c:	601a      	str	r2, [r3, #0]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80104a2:	685a      	ldr	r2, [r3, #4]
 80104a4:	b292      	uxth	r2, r2
 80104a6:	605a      	str	r2, [r3, #4]
 80104a8:	685a      	ldr	r2, [r3, #4]
 80104aa:	605a      	str	r2, [r3, #4]
 80104ac:	e7cb      	b.n	8010446 <HAL_PCD_IRQHandler+0x492>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80104ae:	2f00      	cmp	r7, #0
 80104b0:	d008      	beq.n	80104c4 <HAL_PCD_IRQHandler+0x510>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80104b2:	9a02      	ldr	r2, [sp, #8]
 80104b4:	00ab      	lsls	r3, r5, #2
 80104b6:	18d3      	adds	r3, r2, r3
 80104b8:	6819      	ldr	r1, [r3, #0]
 80104ba:	4a86      	ldr	r2, [pc, #536]	@ (80106d4 <HAL_PCD_IRQHandler+0x720>)
 80104bc:	4011      	ands	r1, r2
 80104be:	4a86      	ldr	r2, [pc, #536]	@ (80106d8 <HAL_PCD_IRQHandler+0x724>)
 80104c0:	430a      	orrs	r2, r1
 80104c2:	601a      	str	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 80104c4:	2228      	movs	r2, #40	@ 0x28
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	435a      	muls	r2, r3
 80104ca:	18a2      	adds	r2, r4, r2
 80104cc:	0017      	movs	r7, r2
 80104ce:	3734      	adds	r7, #52	@ 0x34
 80104d0:	783b      	ldrb	r3, [r7, #0]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d129      	bne.n	801052a <HAL_PCD_IRQHandler+0x576>
        ep->xfer_buff += TxPctSize;
 80104d6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80104d8:	1809      	adds	r1, r1, r0
 80104da:	6251      	str	r1, [r2, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80104dc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80104de:	181b      	adds	r3, r3, r0
 80104e0:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80104e2:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80104e4:	6a13      	ldr	r3, [r2, #32]
 80104e6:	429e      	cmp	r6, r3
 80104e8:	d32e      	bcc.n	8010548 <HAL_PCD_IRQHandler+0x594>
          ep->xfer_len_db -= len;
 80104ea:	1af6      	subs	r6, r6, r3
 80104ec:	6316      	str	r6, [r2, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80104ee:	2228      	movs	r2, #40	@ 0x28
 80104f0:	9800      	ldr	r0, [sp, #0]
 80104f2:	4342      	muls	r2, r0
 80104f4:	18a2      	adds	r2, r4, r2
 80104f6:	7c52      	ldrb	r2, [r2, #17]
 80104f8:	2a00      	cmp	r2, #0
 80104fa:	d144      	bne.n	8010586 <HAL_PCD_IRQHandler+0x5d2>
 80104fc:	4a72      	ldr	r2, [pc, #456]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 80104fe:	00ed      	lsls	r5, r5, #3
 8010500:	18ad      	adds	r5, r5, r2
 8010502:	682a      	ldr	r2, [r5, #0]
 8010504:	0192      	lsls	r2, r2, #6
 8010506:	0992      	lsrs	r2, r2, #6
 8010508:	602a      	str	r2, [r5, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d126      	bne.n	801055c <HAL_PCD_IRQHandler+0x5a8>
 801050e:	2280      	movs	r2, #128	@ 0x80
 8010510:	6828      	ldr	r0, [r5, #0]
 8010512:	0612      	lsls	r2, r2, #24
 8010514:	4302      	orrs	r2, r0
 8010516:	602a      	str	r2, [r5, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8010518:	2228      	movs	r2, #40	@ 0x28
 801051a:	9800      	ldr	r0, [sp, #0]
 801051c:	b29b      	uxth	r3, r3
 801051e:	4342      	muls	r2, r0
 8010520:	18a2      	adds	r2, r4, r2
 8010522:	8b12      	ldrh	r2, [r2, #24]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010524:	9802      	ldr	r0, [sp, #8]
 8010526:	f003 fae5 	bl	8013af4 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801052a:	2328      	movs	r3, #40	@ 0x28
 801052c:	9a00      	ldr	r2, [sp, #0]
 801052e:	4967      	ldr	r1, [pc, #412]	@ (80106cc <HAL_PCD_IRQHandler+0x718>)
 8010530:	4353      	muls	r3, r2
 8010532:	18e3      	adds	r3, r4, r3
 8010534:	7c1a      	ldrb	r2, [r3, #16]
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	0092      	lsls	r2, r2, #2
 801053a:	189b      	adds	r3, r3, r2
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	400a      	ands	r2, r1
 8010540:	2130      	movs	r1, #48	@ 0x30
 8010542:	4051      	eors	r1, r2
 8010544:	4a62      	ldr	r2, [pc, #392]	@ (80106d0 <HAL_PCD_IRQHandler+0x71c>)
 8010546:	e79f      	b.n	8010488 <HAL_PCD_IRQHandler+0x4d4>
        else if (ep->xfer_len_db == 0U)
 8010548:	2e00      	cmp	r6, #0
 801054a:	d102      	bne.n	8010552 <HAL_PCD_IRQHandler+0x59e>
          len = TxPctSize;
 801054c:	0003      	movs	r3, r0
          ep->xfer_fill_db = 0U;
 801054e:	703e      	strb	r6, [r7, #0]
 8010550:	e7cd      	b.n	80104ee <HAL_PCD_IRQHandler+0x53a>
          ep->xfer_fill_db = 0U;
 8010552:	2300      	movs	r3, #0
 8010554:	703b      	strb	r3, [r7, #0]
          ep->xfer_len_db = 0U;
 8010556:	6313      	str	r3, [r2, #48]	@ 0x30
          len = ep->xfer_len_db;
 8010558:	0033      	movs	r3, r6
 801055a:	e7c8      	b.n	80104ee <HAL_PCD_IRQHandler+0x53a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801055c:	2b3e      	cmp	r3, #62	@ 0x3e
 801055e:	d806      	bhi.n	801056e <HAL_PCD_IRQHandler+0x5ba>
 8010560:	2001      	movs	r0, #1
 8010562:	085a      	lsrs	r2, r3, #1
 8010564:	4018      	ands	r0, r3
 8010566:	1812      	adds	r2, r2, r0
 8010568:	0692      	lsls	r2, r2, #26
 801056a:	6828      	ldr	r0, [r5, #0]
 801056c:	e7d2      	b.n	8010514 <HAL_PCD_IRQHandler+0x560>
 801056e:	201f      	movs	r0, #31
 8010570:	4018      	ands	r0, r3
 8010572:	4246      	negs	r6, r0
 8010574:	4170      	adcs	r0, r6
 8010576:	095a      	lsrs	r2, r3, #5
 8010578:	1a12      	subs	r2, r2, r0
 801057a:	6828      	ldr	r0, [r5, #0]
 801057c:	0692      	lsls	r2, r2, #26
 801057e:	4302      	orrs	r2, r0
 8010580:	2080      	movs	r0, #128	@ 0x80
 8010582:	0600      	lsls	r0, r0, #24
 8010584:	e7c6      	b.n	8010514 <HAL_PCD_IRQHandler+0x560>
 8010586:	2a01      	cmp	r2, #1
 8010588:	d1c6      	bne.n	8010518 <HAL_PCD_IRQHandler+0x564>
 801058a:	4a4f      	ldr	r2, [pc, #316]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 801058c:	00ed      	lsls	r5, r5, #3
 801058e:	18ad      	adds	r5, r5, r2
 8010590:	682a      	ldr	r2, [r5, #0]
 8010592:	b292      	uxth	r2, r2
 8010594:	602a      	str	r2, [r5, #0]
 8010596:	6828      	ldr	r0, [r5, #0]
 8010598:	041a      	lsls	r2, r3, #16
 801059a:	e7bb      	b.n	8010514 <HAL_PCD_IRQHandler+0x560>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801059c:	f7ff fc72 	bl	800fe84 <PCD_GET_EP_RX_CNT.isra.0>
    if (ep->xfer_len >= TxPctSize)
 80105a0:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
      ep->xfer_len = 0U;
 80105a2:	003b      	movs	r3, r7
    if (ep->xfer_len >= TxPctSize)
 80105a4:	4282      	cmp	r2, r0
 80105a6:	d300      	bcc.n	80105aa <HAL_PCD_IRQHandler+0x5f6>
      ep->xfer_len -= TxPctSize;
 80105a8:	1a13      	subs	r3, r2, r0
 80105aa:	2280      	movs	r2, #128	@ 0x80
 80105ac:	9f01      	ldr	r7, [sp, #4]
 80105ae:	01d2      	lsls	r2, r2, #7
 80105b0:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80105b2:	4017      	ands	r7, r2
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d13f      	bne.n	8010638 <HAL_PCD_IRQHandler+0x684>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80105b8:	9a00      	ldr	r2, [sp, #0]
 80105ba:	3328      	adds	r3, #40	@ 0x28
 80105bc:	4353      	muls	r3, r2
 80105be:	18e3      	adds	r3, r4, r3
 80105c0:	7c5b      	ldrb	r3, [r3, #17]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d128      	bne.n	8010618 <HAL_PCD_IRQHandler+0x664>
 80105c6:	2180      	movs	r1, #128	@ 0x80
 80105c8:	4a3f      	ldr	r2, [pc, #252]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 80105ca:	00eb      	lsls	r3, r5, #3
 80105cc:	189b      	adds	r3, r3, r2
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	0609      	lsls	r1, r1, #24
 80105d2:	0192      	lsls	r2, r2, #6
 80105d4:	0992      	lsrs	r2, r2, #6
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	430a      	orrs	r2, r1
 80105dc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80105de:	685a      	ldr	r2, [r3, #4]
 80105e0:	0192      	lsls	r2, r2, #6
 80105e2:	0992      	lsrs	r2, r2, #6
 80105e4:	605a      	str	r2, [r3, #4]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	4311      	orrs	r1, r2
 80105ea:	6059      	str	r1, [r3, #4]
      if (ep->type == EP_TYPE_BULK)
 80105ec:	9b04      	ldr	r3, [sp, #16]
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d10a      	bne.n	8010608 <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80105f2:	9a02      	ldr	r2, [sp, #8]
 80105f4:	00ab      	lsls	r3, r5, #2
 80105f6:	18d3      	adds	r3, r2, r3
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	4934      	ldr	r1, [pc, #208]	@ (80106cc <HAL_PCD_IRQHandler+0x718>)
 80105fc:	400a      	ands	r2, r1
 80105fe:	2120      	movs	r1, #32
 8010600:	4051      	eors	r1, r2
 8010602:	4a33      	ldr	r2, [pc, #204]	@ (80106d0 <HAL_PCD_IRQHandler+0x71c>)
 8010604:	430a      	orrs	r2, r1
 8010606:	601a      	str	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010608:	0029      	movs	r1, r5
 801060a:	0020      	movs	r0, r4
 801060c:	f008 f868 	bl	80186e0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010610:	2f00      	cmp	r7, #0
 8010612:	d000      	beq.n	8010616 <HAL_PCD_IRQHandler+0x662>
 8010614:	e4dc      	b.n	800ffd0 <HAL_PCD_IRQHandler+0x1c>
 8010616:	e72b      	b.n	8010470 <HAL_PCD_IRQHandler+0x4bc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010618:	2b01      	cmp	r3, #1
 801061a:	d1e7      	bne.n	80105ec <HAL_PCD_IRQHandler+0x638>
 801061c:	4a2a      	ldr	r2, [pc, #168]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 801061e:	00eb      	lsls	r3, r5, #3
 8010620:	189b      	adds	r3, r3, r2
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	b292      	uxth	r2, r2
 8010626:	601a      	str	r2, [r3, #0]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801062c:	685a      	ldr	r2, [r3, #4]
 801062e:	b292      	uxth	r2, r2
 8010630:	605a      	str	r2, [r3, #4]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	605a      	str	r2, [r3, #4]
 8010636:	e7d9      	b.n	80105ec <HAL_PCD_IRQHandler+0x638>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010638:	2f00      	cmp	r7, #0
 801063a:	d108      	bne.n	801064e <HAL_PCD_IRQHandler+0x69a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801063c:	9a02      	ldr	r2, [sp, #8]
 801063e:	00ab      	lsls	r3, r5, #2
 8010640:	18d3      	adds	r3, r2, r3
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	4a23      	ldr	r2, [pc, #140]	@ (80106d4 <HAL_PCD_IRQHandler+0x720>)
 8010646:	4011      	ands	r1, r2
 8010648:	4a23      	ldr	r2, [pc, #140]	@ (80106d8 <HAL_PCD_IRQHandler+0x724>)
 801064a:	430a      	orrs	r2, r1
 801064c:	601a      	str	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 801064e:	2228      	movs	r2, #40	@ 0x28
 8010650:	9b00      	ldr	r3, [sp, #0]
 8010652:	435a      	muls	r2, r3
 8010654:	18a2      	adds	r2, r4, r2
 8010656:	0017      	movs	r7, r2
 8010658:	3734      	adds	r7, #52	@ 0x34
 801065a:	783b      	ldrb	r3, [r7, #0]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d000      	beq.n	8010662 <HAL_PCD_IRQHandler+0x6ae>
 8010660:	e763      	b.n	801052a <HAL_PCD_IRQHandler+0x576>
        ep->xfer_buff += TxPctSize;
 8010662:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8010664:	1809      	adds	r1, r1, r0
 8010666:	6251      	str	r1, [r2, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8010668:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 801066a:	181b      	adds	r3, r3, r0
 801066c:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 801066e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8010670:	6a13      	ldr	r3, [r2, #32]
 8010672:	429e      	cmp	r6, r3
 8010674:	d31d      	bcc.n	80106b2 <HAL_PCD_IRQHandler+0x6fe>
          ep->xfer_len_db -= len;
 8010676:	1af6      	subs	r6, r6, r3
 8010678:	6316      	str	r6, [r2, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801067a:	2228      	movs	r2, #40	@ 0x28
 801067c:	9800      	ldr	r0, [sp, #0]
 801067e:	4342      	muls	r2, r0
 8010680:	18a2      	adds	r2, r4, r2
 8010682:	7c52      	ldrb	r2, [r2, #17]
 8010684:	2a00      	cmp	r2, #0
 8010686:	d13e      	bne.n	8010706 <HAL_PCD_IRQHandler+0x752>
 8010688:	4a0f      	ldr	r2, [pc, #60]	@ (80106c8 <HAL_PCD_IRQHandler+0x714>)
 801068a:	00ed      	lsls	r5, r5, #3
 801068c:	18ad      	adds	r5, r5, r2
 801068e:	686a      	ldr	r2, [r5, #4]
 8010690:	0192      	lsls	r2, r2, #6
 8010692:	0992      	lsrs	r2, r2, #6
 8010694:	606a      	str	r2, [r5, #4]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d120      	bne.n	80106dc <HAL_PCD_IRQHandler+0x728>
 801069a:	2280      	movs	r2, #128	@ 0x80
 801069c:	6868      	ldr	r0, [r5, #4]
 801069e:	0612      	lsls	r2, r2, #24
 80106a0:	4302      	orrs	r2, r0
 80106a2:	606a      	str	r2, [r5, #4]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80106a4:	2228      	movs	r2, #40	@ 0x28
 80106a6:	9800      	ldr	r0, [sp, #0]
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	4342      	muls	r2, r0
 80106ac:	18a2      	adds	r2, r4, r2
 80106ae:	8b52      	ldrh	r2, [r2, #26]
 80106b0:	e738      	b.n	8010524 <HAL_PCD_IRQHandler+0x570>
        else if (ep->xfer_len_db == 0U)
 80106b2:	2e00      	cmp	r6, #0
 80106b4:	d102      	bne.n	80106bc <HAL_PCD_IRQHandler+0x708>
          len = TxPctSize;
 80106b6:	0003      	movs	r3, r0
          ep->xfer_fill_db = 0U;
 80106b8:	703e      	strb	r6, [r7, #0]
 80106ba:	e7de      	b.n	801067a <HAL_PCD_IRQHandler+0x6c6>
          ep->xfer_len_db = 0U;
 80106bc:	2300      	movs	r3, #0
 80106be:	6313      	str	r3, [r2, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80106c0:	703b      	strb	r3, [r7, #0]
          len = ep->xfer_len_db;
 80106c2:	0033      	movs	r3, r6
 80106c4:	e7d9      	b.n	801067a <HAL_PCD_IRQHandler+0x6c6>
 80106c6:	46c0      	nop			@ (mov r8, r8)
 80106c8:	40009800 	.word	0x40009800
 80106cc:	07ff8fbf 	.word	0x07ff8fbf
 80106d0:	00008080 	.word	0x00008080
 80106d4:	07ff8f8f 	.word	0x07ff8f8f
 80106d8:	0000c080 	.word	0x0000c080
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80106dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80106de:	d806      	bhi.n	80106ee <HAL_PCD_IRQHandler+0x73a>
 80106e0:	2001      	movs	r0, #1
 80106e2:	085a      	lsrs	r2, r3, #1
 80106e4:	4018      	ands	r0, r3
 80106e6:	1812      	adds	r2, r2, r0
 80106e8:	0692      	lsls	r2, r2, #26
 80106ea:	6868      	ldr	r0, [r5, #4]
 80106ec:	e7d8      	b.n	80106a0 <HAL_PCD_IRQHandler+0x6ec>
 80106ee:	201f      	movs	r0, #31
 80106f0:	4018      	ands	r0, r3
 80106f2:	4246      	negs	r6, r0
 80106f4:	4170      	adcs	r0, r6
 80106f6:	095a      	lsrs	r2, r3, #5
 80106f8:	1a12      	subs	r2, r2, r0
 80106fa:	6868      	ldr	r0, [r5, #4]
 80106fc:	0692      	lsls	r2, r2, #26
 80106fe:	4302      	orrs	r2, r0
 8010700:	2080      	movs	r0, #128	@ 0x80
 8010702:	0600      	lsls	r0, r0, #24
 8010704:	e7cc      	b.n	80106a0 <HAL_PCD_IRQHandler+0x6ec>
 8010706:	2a01      	cmp	r2, #1
 8010708:	d1cc      	bne.n	80106a4 <HAL_PCD_IRQHandler+0x6f0>
 801070a:	4a47      	ldr	r2, [pc, #284]	@ (8010828 <HAL_PCD_IRQHandler+0x874>)
 801070c:	00ed      	lsls	r5, r5, #3
 801070e:	18ad      	adds	r5, r5, r2
 8010710:	686a      	ldr	r2, [r5, #4]
 8010712:	b292      	uxth	r2, r2
 8010714:	606a      	str	r2, [r5, #4]
 8010716:	6868      	ldr	r0, [r5, #4]
 8010718:	041a      	lsls	r2, r3, #16
 801071a:	e7c1      	b.n	80106a0 <HAL_PCD_IRQHandler+0x6ec>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801071c:	0543      	lsls	r3, r0, #21
 801071e:	d50c      	bpl.n	801073a <HAL_PCD_IRQHandler+0x786>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8010720:	6822      	ldr	r2, [r4, #0]
 8010722:	4942      	ldr	r1, [pc, #264]	@ (801082c <HAL_PCD_IRQHandler+0x878>)
 8010724:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8010726:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8010728:	400b      	ands	r3, r1
 801072a:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 801072c:	f008 f888 	bl	8018840 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8010730:	0029      	movs	r1, r5
 8010732:	0020      	movs	r0, r4
 8010734:	f7ff fc2c 	bl	800ff90 <HAL_PCD_SetAddress>
    return;
 8010738:	e450      	b.n	800ffdc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801073a:	0443      	lsls	r3, r0, #17
 801073c:	d505      	bpl.n	801074a <HAL_PCD_IRQHandler+0x796>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801073e:	6822      	ldr	r2, [r4, #0]
 8010740:	493b      	ldr	r1, [pc, #236]	@ (8010830 <HAL_PCD_IRQHandler+0x87c>)
 8010742:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8010744:	400b      	ands	r3, r1
 8010746:	6453      	str	r3, [r2, #68]	@ 0x44
    return;
 8010748:	e448      	b.n	800ffdc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 801074a:	2380      	movs	r3, #128	@ 0x80
 801074c:	0001      	movs	r1, r0
 801074e:	019b      	lsls	r3, r3, #6
 8010750:	4019      	ands	r1, r3
 8010752:	4218      	tst	r0, r3
 8010754:	d003      	beq.n	801075e <HAL_PCD_IRQHandler+0x7aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8010756:	6822      	ldr	r2, [r4, #0]
 8010758:	4936      	ldr	r1, [pc, #216]	@ (8010834 <HAL_PCD_IRQHandler+0x880>)
 801075a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801075c:	e7f2      	b.n	8010744 <HAL_PCD_IRQHandler+0x790>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801075e:	04c3      	lsls	r3, r0, #19
 8010760:	d518      	bpl.n	8010794 <HAL_PCD_IRQHandler+0x7e0>
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8010762:	2004      	movs	r0, #4
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010768:	4382      	bics	r2, r0
 801076a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 801076c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801076e:	1800      	adds	r0, r0, r0
 8010770:	4382      	bics	r2, r0
 8010772:	641a      	str	r2, [r3, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 8010774:	23b2      	movs	r3, #178	@ 0xb2
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	5ce2      	ldrb	r2, [r4, r3]
 801077a:	2a01      	cmp	r2, #1
 801077c:	d103      	bne.n	8010786 <HAL_PCD_IRQHandler+0x7d2>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801077e:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8010780:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010782:	f000 f9a5 	bl	8010ad0 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8010786:	0020      	movs	r0, r4
 8010788:	f008 f87a 	bl	8018880 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801078c:	6822      	ldr	r2, [r4, #0]
 801078e:	492a      	ldr	r1, [pc, #168]	@ (8010838 <HAL_PCD_IRQHandler+0x884>)
 8010790:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8010792:	e7d7      	b.n	8010744 <HAL_PCD_IRQHandler+0x790>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8010794:	0503      	lsls	r3, r0, #20
 8010796:	d511      	bpl.n	80107bc <HAL_PCD_IRQHandler+0x808>
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8010798:	2208      	movs	r2, #8
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801079e:	430a      	orrs	r2, r1
 80107a0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80107a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107a4:	4925      	ldr	r1, [pc, #148]	@ (801083c <HAL_PCD_IRQHandler+0x888>)
 80107a6:	400a      	ands	r2, r1
 80107a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80107aa:	2204      	movs	r2, #4
 80107ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80107ae:	430a      	orrs	r2, r1
 80107b0:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_PCD_SuspendCallback(hpcd);
 80107b2:	0020      	movs	r0, r4
 80107b4:	f008 f858 	bl	8018868 <HAL_PCD_SuspendCallback>
 80107b8:	f7ff fc10 	bl	800ffdc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80107bc:	0603      	lsls	r3, r0, #24
 80107be:	d51f      	bpl.n	8010800 <HAL_PCD_IRQHandler+0x84c>
    if (hpcd->LPM_State == LPM_L0)
 80107c0:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	491e      	ldr	r1, [pc, #120]	@ (8010840 <HAL_PCD_IRQHandler+0x88c>)
 80107c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80107c8:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80107ca:	400a      	ands	r2, r1
 80107cc:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80107ce:	5c22      	ldrb	r2, [r4, r0]
 80107d0:	2a00      	cmp	r2, #0
 80107d2:	d1ee      	bne.n	80107b2 <HAL_PCD_IRQHandler+0x7fe>
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80107d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80107d6:	3204      	adds	r2, #4
 80107d8:	430a      	orrs	r2, r1
 80107da:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80107dc:	2208      	movs	r2, #8
 80107de:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80107e0:	430a      	orrs	r2, r1
      hpcd->LPM_State = LPM_L1;
 80107e2:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80107e4:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80107e6:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 80107e8:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80107ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80107ec:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80107ee:	089b      	lsrs	r3, r3, #2
 80107f0:	4013      	ands	r3, r2
 80107f2:	22b3      	movs	r2, #179	@ 0xb3
 80107f4:	0092      	lsls	r2, r2, #2
 80107f6:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80107f8:	f000 f96a 	bl	8010ad0 <HAL_PCDEx_LPM_Callback>
 80107fc:	f7ff fbee 	bl	800ffdc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8010800:	0583      	lsls	r3, r0, #22
 8010802:	d509      	bpl.n	8010818 <HAL_PCD_IRQHandler+0x864>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8010804:	6822      	ldr	r2, [r4, #0]
 8010806:	490f      	ldr	r1, [pc, #60]	@ (8010844 <HAL_PCD_IRQHandler+0x890>)
 8010808:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 801080a:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801080c:	400b      	ands	r3, r1
 801080e:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8010810:	f008 f842 	bl	8018898 <HAL_PCD_SOFCallback>
    return;
 8010814:	f7ff fbe2 	bl	800ffdc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8010818:	05c0      	lsls	r0, r0, #23
 801081a:	d401      	bmi.n	8010820 <HAL_PCD_IRQHandler+0x86c>
 801081c:	f7ff fbde 	bl	800ffdc <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8010820:	6822      	ldr	r2, [r4, #0]
 8010822:	4909      	ldr	r1, [pc, #36]	@ (8010848 <HAL_PCD_IRQHandler+0x894>)
 8010824:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8010826:	e78d      	b.n	8010744 <HAL_PCD_IRQHandler+0x790>
 8010828:	40009800 	.word	0x40009800
 801082c:	0000fbff 	.word	0x0000fbff
 8010830:	0000bfff 	.word	0x0000bfff
 8010834:	0000dfff 	.word	0x0000dfff
 8010838:	0000efff 	.word	0x0000efff
 801083c:	0000f7ff 	.word	0x0000f7ff
 8010840:	0000ff7f 	.word	0x0000ff7f
 8010844:	0000fdff 	.word	0x0000fdff
 8010848:	0000feff 	.word	0x0000feff

0801084c <HAL_PCD_EP_Open>:
{
 801084c:	b570      	push	{r4, r5, r6, lr}
 801084e:	0004      	movs	r4, r0
 8010850:	2007      	movs	r0, #7
 8010852:	000d      	movs	r5, r1
 8010854:	4008      	ands	r0, r1
 8010856:	2128      	movs	r1, #40	@ 0x28
 8010858:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 801085a:	b26d      	sxtb	r5, r5
 801085c:	1866      	adds	r6, r4, r1
 801085e:	2d00      	cmp	r5, #0
 8010860:	da1a      	bge.n	8010898 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8010862:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010864:	3110      	adds	r1, #16
 8010866:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8010868:	7475      	strb	r5, [r6, #17]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 801086a:	0552      	lsls	r2, r2, #21
 801086c:	0d52      	lsrs	r2, r2, #21
  ep->num = ep_addr & EP_ADDR_MSK;
 801086e:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8010870:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8010872:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8010874:	2b02      	cmp	r3, #2
 8010876:	d101      	bne.n	801087c <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 8010878:	2300      	movs	r3, #0
 801087a:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 801087c:	25a4      	movs	r5, #164	@ 0xa4
 801087e:	00ad      	lsls	r5, r5, #2
 8010880:	5d63      	ldrb	r3, [r4, r5]
 8010882:	2002      	movs	r0, #2
 8010884:	2b01      	cmp	r3, #1
 8010886:	d006      	beq.n	8010896 <HAL_PCD_EP_Open+0x4a>
 8010888:	2301      	movs	r3, #1
 801088a:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801088c:	6820      	ldr	r0, [r4, #0]
 801088e:	f002 fed7 	bl	8013640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010892:	2000      	movs	r0, #0
 8010894:	5560      	strb	r0, [r4, r5]
}
 8010896:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8010898:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801089a:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 801089c:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801089e:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80108a0:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80108a2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80108a4:	7035      	strb	r5, [r6, #0]
 80108a6:	e7e0      	b.n	801086a <HAL_PCD_EP_Open+0x1e>

080108a8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80108a8:	2207      	movs	r2, #7
{
 80108aa:	000b      	movs	r3, r1
 80108ac:	400a      	ands	r2, r1
 80108ae:	2128      	movs	r1, #40	@ 0x28
 80108b0:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 80108b2:	b25b      	sxtb	r3, r3
{
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	0004      	movs	r4, r0
 80108b8:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	da12      	bge.n	80108e4 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 80108be:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80108c0:	3110      	adds	r1, #16
 80108c2:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80108c4:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 80108c6:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 80108c8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80108ca:	00ad      	lsls	r5, r5, #2
 80108cc:	5d63      	ldrb	r3, [r4, r5]
 80108ce:	2002      	movs	r0, #2
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d006      	beq.n	80108e2 <HAL_PCD_EP_Close+0x3a>
 80108d4:	2301      	movs	r3, #1
 80108d6:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80108d8:	6820      	ldr	r0, [r4, #0]
 80108da:	f002 fff9 	bl	80138d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80108de:	2000      	movs	r0, #0
 80108e0:	5560      	strb	r0, [r4, r5]
}
 80108e2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80108e4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80108e6:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80108e8:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80108ea:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80108ec:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80108ee:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80108f0:	7003      	strb	r3, [r0, #0]
 80108f2:	e7e8      	b.n	80108c6 <HAL_PCD_EP_Close+0x1e>

080108f4 <HAL_PCD_EP_Receive>:
{
 80108f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f6:	2407      	movs	r4, #7
}
 80108f8:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80108fa:	3421      	adds	r4, #33	@ 0x21
 80108fc:	434c      	muls	r4, r1
 80108fe:	1906      	adds	r6, r0, r4
 8010900:	0037      	movs	r7, r6
 8010902:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8010904:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8010906:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8010908:	2500      	movs	r5, #0
  ep->is_in = 0U;
 801090a:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 801090c:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801090e:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8010910:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8010912:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010914:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8010916:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8010918:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 801091a:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 801091c:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801091e:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010920:	6800      	ldr	r0, [r0, #0]
 8010922:	f003 f915 	bl	8013b50 <USB_EPStartXfer>
}
 8010926:	0028      	movs	r0, r5
 8010928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801092a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801092a:	2307      	movs	r3, #7
 801092c:	400b      	ands	r3, r1
 801092e:	2128      	movs	r1, #40	@ 0x28
 8010930:	4359      	muls	r1, r3
 8010932:	1840      	adds	r0, r0, r1
 8010934:	30fc      	adds	r0, #252	@ 0xfc
 8010936:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8010938:	4770      	bx	lr

0801093a <HAL_PCD_EP_Transmit>:
{
 801093a:	b570      	push	{r4, r5, r6, lr}
 801093c:	2407      	movs	r4, #7
}
 801093e:	4021      	ands	r1, r4
 8010940:	3421      	adds	r4, #33	@ 0x21
 8010942:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8010944:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8010946:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8010948:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 801094a:	2201      	movs	r2, #1
 801094c:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 801094e:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8010950:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8010952:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010954:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8010956:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8010958:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 801095a:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 801095c:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801095e:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010960:	6800      	ldr	r0, [r0, #0]
 8010962:	f003 f8f5 	bl	8013b50 <USB_EPStartXfer>
}
 8010966:	0028      	movs	r0, r5
 8010968:	bd70      	pop	{r4, r5, r6, pc}

0801096a <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801096a:	2207      	movs	r2, #7
{
 801096c:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801096e:	7903      	ldrb	r3, [r0, #4]
{
 8010970:	0004      	movs	r4, r0
 8010972:	400a      	ands	r2, r1
    return HAL_ERROR;
 8010974:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010976:	4293      	cmp	r3, r2
 8010978:	d319      	bcc.n	80109ae <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 801097a:	b248      	sxtb	r0, r1
 801097c:	2328      	movs	r3, #40	@ 0x28
 801097e:	2800      	cmp	r0, #0
 8010980:	da16      	bge.n	80109b0 <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010982:	4353      	muls	r3, r2
 8010984:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8010986:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010988:	3110      	adds	r1, #16
    ep->is_in = 1U;
 801098a:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801098c:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 801098e:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8010990:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8010992:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8010994:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010996:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8010998:	00ad      	lsls	r5, r5, #2
 801099a:	5d62      	ldrb	r2, [r4, r5]
 801099c:	2002      	movs	r0, #2
 801099e:	429a      	cmp	r2, r3
 80109a0:	d005      	beq.n	80109ae <HAL_PCD_EP_SetStall+0x44>
 80109a2:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80109a4:	6820      	ldr	r0, [r4, #0]
 80109a6:	f003 f803 	bl	80139b0 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80109aa:	2000      	movs	r0, #0
 80109ac:	5560      	strb	r0, [r4, r5]
}
 80109ae:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80109b0:	434b      	muls	r3, r1
 80109b2:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80109b4:	2000      	movs	r0, #0
 80109b6:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80109b8:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80109ba:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 80109bc:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80109be:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 80109c0:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80109c2:	7018      	strb	r0, [r3, #0]
 80109c4:	e7e4      	b.n	8010990 <HAL_PCD_EP_SetStall+0x26>

080109c6 <HAL_PCD_EP_ClrStall>:
{
 80109c6:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80109c8:	220f      	movs	r2, #15
{
 80109ca:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80109cc:	7901      	ldrb	r1, [r0, #4]
{
 80109ce:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80109d0:	401a      	ands	r2, r3
    return HAL_ERROR;
 80109d2:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80109d4:	4291      	cmp	r1, r2
 80109d6:	d31b      	bcc.n	8010a10 <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 80109d8:	2207      	movs	r2, #7
 80109da:	2128      	movs	r1, #40	@ 0x28
 80109dc:	401a      	ands	r2, r3
 80109de:	4351      	muls	r1, r2
 80109e0:	b25b      	sxtb	r3, r3
 80109e2:	1860      	adds	r0, r4, r1
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	da14      	bge.n	8010a12 <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 80109e8:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80109ea:	3110      	adds	r1, #16
 80109ec:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80109ee:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 80109f0:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80109f2:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 80109f4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80109f6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80109f8:	00b6      	lsls	r6, r6, #2
 80109fa:	5da3      	ldrb	r3, [r4, r6]
 80109fc:	2002      	movs	r0, #2
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d006      	beq.n	8010a10 <HAL_PCD_EP_ClrStall+0x4a>
 8010a02:	2301      	movs	r3, #1
 8010a04:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010a06:	6820      	ldr	r0, [r4, #0]
 8010a08:	f002 fff2 	bl	80139f0 <USB_EPClearStall>
  return HAL_OK;
 8010a0c:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8010a0e:	55a5      	strb	r5, [r4, r6]
}
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8010a12:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a14:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010a16:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a18:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010a1a:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a1c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8010a1e:	7003      	strb	r3, [r0, #0]
 8010a20:	e7e6      	b.n	80109f0 <HAL_PCD_EP_ClrStall+0x2a>

08010a22 <HAL_PCD_EP_Abort>:
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a22:	2207      	movs	r2, #7
{
 8010a24:	000b      	movs	r3, r1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a26:	400a      	ands	r2, r1
 8010a28:	2128      	movs	r1, #40	@ 0x28
  if ((0x80U & ep_addr) == 0x80U)
 8010a2a:	b25b      	sxtb	r3, r3
{
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	4351      	muls	r1, r2
  if ((0x80U & ep_addr) == 0x80U)
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	da05      	bge.n	8010a40 <HAL_PCD_EP_Abort+0x1e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a34:	3110      	adds	r1, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a36:	1841      	adds	r1, r0, r1
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8010a38:	6800      	ldr	r0, [r0, #0]
 8010a3a:	f003 f80f 	bl	8013a5c <USB_EPStopXfer>
}
 8010a3e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010a40:	3151      	adds	r1, #81	@ 0x51
 8010a42:	31ff      	adds	r1, #255	@ 0xff
 8010a44:	e7f7      	b.n	8010a36 <HAL_PCD_EP_Abort+0x14>

08010a46 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8010a46:	23a4      	movs	r3, #164	@ 0xa4
{
 8010a48:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	5cc2      	ldrb	r2, [r0, r3]
{
 8010a4e:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8010a50:	2002      	movs	r0, #2
 8010a52:	2a01      	cmp	r2, #1
 8010a54:	d00d      	beq.n	8010a72 <HAL_PCD_EP_Flush+0x2c>
 8010a56:	2201      	movs	r2, #1
 8010a58:	54e2      	strb	r2, [r4, r3]
  if ((ep_addr & 0x80U) == 0x80U)
 8010a5a:	b24b      	sxtb	r3, r1
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8010a5c:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	da08      	bge.n	8010a74 <HAL_PCD_EP_Flush+0x2e>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8010a62:	2307      	movs	r3, #7
 8010a64:	4019      	ands	r1, r3
 8010a66:	f002 fde6 	bl	8013636 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8010a6a:	23a4      	movs	r3, #164	@ 0xa4
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	009b      	lsls	r3, r3, #2
 8010a70:	54e0      	strb	r0, [r4, r3]
}
 8010a72:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 8010a74:	f002 fde1 	bl	801363a <USB_FlushRxFifo>
 8010a78:	e7f7      	b.n	8010a6a <HAL_PCD_EP_Flush+0x24>

08010a7a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8010a7a:	b530      	push	{r4, r5, lr}
 8010a7c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8010a7e:	060d      	lsls	r5, r1, #24
 8010a80:	d50b      	bpl.n	8010a9a <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a82:	2507      	movs	r5, #7
 8010a84:	4029      	ands	r1, r5
 8010a86:	434c      	muls	r4, r1
 8010a88:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010a8a:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8010a8c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8010a8e:	2a00      	cmp	r2, #0
 8010a90:	d107      	bne.n	8010aa2 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8010a92:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8010a94:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8010a96:	2000      	movs	r0, #0
 8010a98:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8010a9a:	434c      	muls	r4, r1
 8010a9c:	3451      	adds	r4, #81	@ 0x51
 8010a9e:	34ff      	adds	r4, #255	@ 0xff
 8010aa0:	e7f3      	b.n	8010a8a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8010aa2:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8010aa4:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8010aa6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8010aa8:	e7f5      	b.n	8010a96 <HAL_PCDEx_PMAConfig+0x1c>

08010aaa <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8010aaa:	6802      	ldr	r2, [r0, #0]
{
 8010aac:	0003      	movs	r3, r0
  hpcd->lpm_active = 1U;
 8010aae:	20b4      	movs	r0, #180	@ 0xb4
 8010ab0:	2101      	movs	r1, #1
{
 8010ab2:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8010ab4:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8010ab6:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8010ab8:	5019      	str	r1, [r3, r0]
  hpcd->LPM_State = LPM_L0;
 8010aba:	2000      	movs	r0, #0
 8010abc:	00a4      	lsls	r4, r4, #2
 8010abe:	5518      	strb	r0, [r3, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010ac0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8010ac2:	4319      	orrs	r1, r3
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010ac4:	2302      	movs	r3, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010ac6:	6551      	str	r1, [r2, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010ac8:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8010aca:	430b      	orrs	r3, r1
 8010acc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8010ace:	bd10      	pop	{r4, pc}

08010ad0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010ad0:	4770      	bx	lr
	...

08010ad4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010ad4:	2380      	movs	r3, #128	@ 0x80
 8010ad6:	4a03      	ldr	r2, [pc, #12]	@ (8010ae4 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010ad8:	005b      	lsls	r3, r3, #1
 8010ada:	6811      	ldr	r1, [r2, #0]
 8010adc:	430b      	orrs	r3, r1
 8010ade:	6013      	str	r3, [r2, #0]
}
 8010ae0:	4770      	bx	lr
 8010ae2:	46c0      	nop			@ (mov r8, r8)
 8010ae4:	40007000 	.word	0x40007000

08010ae8 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_EWUP_Msk & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8010ae8:	235f      	movs	r3, #95	@ 0x5f
 8010aea:	4905      	ldr	r1, [pc, #20]	@ (8010b00 <HAL_PWR_EnableWakeUpPin+0x18>)
 8010aec:	4003      	ands	r3, r0
 8010aee:	68ca      	ldr	r2, [r1, #12]
 8010af0:	09c0      	lsrs	r0, r0, #7
 8010af2:	439a      	bics	r2, r3
 8010af4:	4302      	orrs	r2, r0
 8010af6:	60ca      	str	r2, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_EWUP_Msk & WakeUpPinPolarity));
 8010af8:	688a      	ldr	r2, [r1, #8]
 8010afa:	4313      	orrs	r3, r2
 8010afc:	608b      	str	r3, [r1, #8]
}
 8010afe:	4770      	bx	lr
 8010b00:	40007000 	.word	0x40007000

08010b04 <HAL_PWR_EnterSHUTDOWNMode>:
  */
void HAL_PWR_EnterSHUTDOWNMode(void)
{

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_2);
 8010b04:	2207      	movs	r2, #7
 8010b06:	4906      	ldr	r1, [pc, #24]	@ (8010b20 <HAL_PWR_EnterSHUTDOWNMode+0x1c>)
 8010b08:	680b      	ldr	r3, [r1, #0]
 8010b0a:	4393      	bics	r3, r2
 8010b0c:	3a03      	subs	r2, #3
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	600b      	str	r3, [r1, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010b12:	4b04      	ldr	r3, [pc, #16]	@ (8010b24 <HAL_PWR_EnterSHUTDOWNMode+0x20>)
 8010b14:	6919      	ldr	r1, [r3, #16]
 8010b16:	430a      	orrs	r2, r1
 8010b18:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */
  /* Request Wait For Interrupt */
  __WFI();
 8010b1a:	bf30      	wfi
}
 8010b1c:	4770      	bx	lr
 8010b1e:	46c0      	nop			@ (mov r8, r8)
 8010b20:	40007000 	.word	0x40007000
 8010b24:	e000ed00 	.word	0xe000ed00

08010b28 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010b28:	2380      	movs	r3, #128	@ 0x80
 8010b2a:	21c0      	movs	r1, #192	@ 0xc0
{
 8010b2c:	b510      	push	{r4, lr}
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4c18      	ldr	r4, [pc, #96]	@ (8010b94 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8010b32:	00c9      	lsls	r1, r1, #3
 8010b34:	4298      	cmp	r0, r3
 8010b36:	d11e      	bne.n	8010b76 <HAL_PWREx_ControlVoltageScaling+0x4e>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8010b38:	6823      	ldr	r3, [r4, #0]
 8010b3a:	400b      	ands	r3, r1
 8010b3c:	4283      	cmp	r3, r0
 8010b3e:	d020      	beq.n	8010b82 <HAL_PWREx_ControlVoltageScaling+0x5a>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	4a15      	ldr	r2, [pc, #84]	@ (8010b98 <HAL_PWREx_ControlVoltageScaling+0x70>)
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010b44:	4915      	ldr	r1, [pc, #84]	@ (8010b9c <HAL_PWREx_ControlVoltageScaling+0x74>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010b46:	4013      	ands	r3, r2
 8010b48:	4318      	orrs	r0, r3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010b4a:	4b15      	ldr	r3, [pc, #84]	@ (8010ba0 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010b4c:	6020      	str	r0, [r4, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010b4e:	6818      	ldr	r0, [r3, #0]
 8010b50:	2332      	movs	r3, #50	@ 0x32
 8010b52:	4358      	muls	r0, r3
 8010b54:	f7ef fb08 	bl	8000168 <__udivsi3>
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010b58:	2380      	movs	r3, #128	@ 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010b5a:	3001      	adds	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	6962      	ldr	r2, [r4, #20]
 8010b60:	421a      	tst	r2, r3
 8010b62:	d001      	beq.n	8010b68 <HAL_PWREx_ControlVoltageScaling+0x40>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	d104      	bne.n	8010b72 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010b68:	6962      	ldr	r2, [r4, #20]
      {
        return HAL_TIMEOUT;
 8010b6a:	2003      	movs	r0, #3
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010b6c:	421a      	tst	r2, r3
 8010b6e:	d008      	beq.n	8010b82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
}
 8010b70:	bd10      	pop	{r4, pc}
        wait_loop_index--;
 8010b72:	3801      	subs	r0, #1
 8010b74:	e7f3      	b.n	8010b5e <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8010b76:	2380      	movs	r3, #128	@ 0x80
 8010b78:	6822      	ldr	r2, [r4, #0]
 8010b7a:	00db      	lsls	r3, r3, #3
 8010b7c:	400a      	ands	r2, r1
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d101      	bne.n	8010b86 <HAL_PWREx_ControlVoltageScaling+0x5e>
  return HAL_OK;
 8010b82:	2000      	movs	r0, #0
 8010b84:	e7f4      	b.n	8010b70 <HAL_PWREx_ControlVoltageScaling+0x48>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010b86:	6822      	ldr	r2, [r4, #0]
 8010b88:	4903      	ldr	r1, [pc, #12]	@ (8010b98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010b8a:	400a      	ands	r2, r1
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	e7f7      	b.n	8010b82 <HAL_PWREx_ControlVoltageScaling+0x5a>
 8010b92:	46c0      	nop			@ (mov r8, r8)
 8010b94:	40007000 	.word	0x40007000
 8010b98:	fffff9ff 	.word	0xfffff9ff
 8010b9c:	000f4240 	.word	0x000f4240
 8010ba0:	20000050 	.word	0x20000050

08010ba4 <HAL_PWREx_GetVoltageRange>:
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8010ba4:	4b02      	ldr	r3, [pc, #8]	@ (8010bb0 <HAL_PWREx_GetVoltageRange+0xc>)
 8010ba6:	6818      	ldr	r0, [r3, #0]
 8010ba8:	23c0      	movs	r3, #192	@ 0xc0
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	4018      	ands	r0, r3
}
 8010bae:	4770      	bx	lr
 8010bb0:	40007000 	.word	0x40007000

08010bb4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010bb4:	2380      	movs	r3, #128	@ 0x80
 8010bb6:	4a03      	ldr	r2, [pc, #12]	@ (8010bc4 <HAL_PWREx_EnableVddUSB+0x10>)
 8010bb8:	00db      	lsls	r3, r3, #3
 8010bba:	6851      	ldr	r1, [r2, #4]
 8010bbc:	430b      	orrs	r3, r1
 8010bbe:	6053      	str	r3, [r2, #4]
}
 8010bc0:	4770      	bx	lr
 8010bc2:	46c0      	nop			@ (mov r8, r8)
 8010bc4:	40007000 	.word	0x40007000

08010bc8 <HAL_PWREx_EnableUltraLowPowerMode>:
  * @note  All the other modes are not affected by this bit.
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPowerMode(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_ENULP);
 8010bc8:	2380      	movs	r3, #128	@ 0x80
 8010bca:	4a03      	ldr	r2, [pc, #12]	@ (8010bd8 <HAL_PWREx_EnableUltraLowPowerMode+0x10>)
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	6891      	ldr	r1, [r2, #8]
 8010bd0:	430b      	orrs	r3, r1
 8010bd2:	6093      	str	r3, [r2, #8]
}
 8010bd4:	4770      	bx	lr
 8010bd6:	46c0      	nop			@ (mov r8, r8)
 8010bd8:	40007000 	.word	0x40007000

08010bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010bde:	2280      	movs	r2, #128	@ 0x80
 8010be0:	4d1b      	ldr	r5, [pc, #108]	@ (8010c50 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8010be2:	0552      	lsls	r2, r2, #21
 8010be4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
{
 8010be6:	0004      	movs	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010be8:	4213      	tst	r3, r2
 8010bea:	d01c      	beq.n	8010c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010bec:	f7ff ffda 	bl	8010ba4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010bf0:	2380      	movs	r3, #128	@ 0x80
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	4298      	cmp	r0, r3
 8010bf6:	d124      	bne.n	8010c42 <RCC_SetFlashLatencyFromMSIRange+0x66>
      latency = FLASH_LATENCY_1; /* 1WS */
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8010bf8:	2300      	movs	r3, #0
    if (msirange > RCC_MSIRANGE_8)
 8010bfa:	2c80      	cmp	r4, #128	@ 0x80
 8010bfc:	d906      	bls.n	8010c0c <RCC_SetFlashLatencyFromMSIRange+0x30>
        latency = FLASH_LATENCY_2; /* 2WS */
 8010bfe:	3302      	adds	r3, #2
      if (msirange > RCC_MSIRANGE_11)
 8010c00:	2cb0      	cmp	r4, #176	@ 0xb0
 8010c02:	d803      	bhi.n	8010c0c <RCC_SetFlashLatencyFromMSIRange+0x30>
      else if (msirange > RCC_MSIRANGE_9)
 8010c04:	338e      	adds	r3, #142	@ 0x8e
 8010c06:	42a3      	cmp	r3, r4
 8010c08:	419b      	sbcs	r3, r3
 8010c0a:	425b      	negs	r3, r3
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010c0c:	2407      	movs	r4, #7
 8010c0e:	4911      	ldr	r1, [pc, #68]	@ (8010c54 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8010c10:	680a      	ldr	r2, [r1, #0]
 8010c12:	43a2      	bics	r2, r4
 8010c14:	431a      	orrs	r2, r3
 8010c16:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8010c18:	6808      	ldr	r0, [r1, #0]
 8010c1a:	4020      	ands	r0, r4
 8010c1c:	1ac0      	subs	r0, r0, r3
 8010c1e:	1e43      	subs	r3, r0, #1
 8010c20:	4198      	sbcs	r0, r3
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8010c22:	b2c0      	uxtb	r0, r0
 8010c24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8010c26:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010c2c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010c2e:	4013      	ands	r3, r2
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8010c34:	f7ff ffb6 	bl	8010ba4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8010c38:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010c3a:	4a07      	ldr	r2, [pc, #28]	@ (8010c58 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010c40:	e7d6      	b.n	8010bf0 <RCC_SetFlashLatencyFromMSIRange+0x14>
        latency = FLASH_LATENCY_2; /* 2WS */
 8010c42:	2302      	movs	r3, #2
    if (msirange >= RCC_MSIRANGE_8)
 8010c44:	2c7f      	cmp	r4, #127	@ 0x7f
 8010c46:	d8e1      	bhi.n	8010c0c <RCC_SetFlashLatencyFromMSIRange+0x30>
    else if (msirange == RCC_MSIRANGE_7)
 8010c48:	3c70      	subs	r4, #112	@ 0x70
 8010c4a:	4263      	negs	r3, r4
 8010c4c:	4163      	adcs	r3, r4
 8010c4e:	e7dd      	b.n	8010c0c <RCC_SetFlashLatencyFromMSIRange+0x30>
 8010c50:	40021000 	.word	0x40021000
 8010c54:	40022000 	.word	0x40022000
 8010c58:	efffffff 	.word	0xefffffff

08010c5c <HAL_RCC_GetSysClockFreq>:
{
 8010c5c:	b510      	push	{r4, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010c5e:	4c29      	ldr	r4, [pc, #164]	@ (8010d04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8010c60:	2138      	movs	r1, #56	@ 0x38
 8010c62:	68a0      	ldr	r0, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010c64:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010c66:	0003      	movs	r3, r0
 8010c68:	400b      	ands	r3, r1
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010c6a:	4208      	tst	r0, r1
 8010c6c:	d006      	beq.n	8010c7c <HAL_RCC_GetSysClockFreq+0x20>
 8010c6e:	2b18      	cmp	r3, #24
 8010c70:	d12e      	bne.n	8010cd0 <HAL_RCC_GetSysClockFreq+0x74>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010c72:	3935      	subs	r1, #53	@ 0x35
 8010c74:	2000      	movs	r0, #0
 8010c76:	400a      	ands	r2, r1
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010c78:	2a01      	cmp	r2, #1
 8010c7a:	d10f      	bne.n	8010c9c <HAL_RCC_GetSysClockFreq+0x40>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010c7c:	6821      	ldr	r1, [r4, #0]
 8010c7e:	220f      	movs	r2, #15
 8010c80:	0709      	lsls	r1, r1, #28
 8010c82:	d422      	bmi.n	8010cca <HAL_RCC_GetSysClockFreq+0x6e>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8010c84:	4920      	ldr	r1, [pc, #128]	@ (8010d08 <HAL_RCC_GetSysClockFreq+0xac>)
 8010c86:	6809      	ldr	r1, [r1, #0]
 8010c88:	0a09      	lsrs	r1, r1, #8
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010c8a:	400a      	ands	r2, r1
    if (msirange > 11U)
 8010c8c:	2a0b      	cmp	r2, #11
 8010c8e:	d900      	bls.n	8010c92 <HAL_RCC_GetSysClockFreq+0x36>
      msirange = 0U;
 8010c90:	2200      	movs	r2, #0
    msirange = MSIRangeTable[msirange];
 8010c92:	491e      	ldr	r1, [pc, #120]	@ (8010d0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8010c94:	0092      	lsls	r2, r2, #2
 8010c96:	5850      	ldr	r0, [r2, r1]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d024      	beq.n	8010ce6 <HAL_RCC_GetSysClockFreq+0x8a>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010c9c:	2203      	movs	r2, #3
 8010c9e:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010ca0:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010ca2:	4013      	ands	r3, r2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010ca4:	0649      	lsls	r1, r1, #25
 8010ca6:	0f49      	lsrs	r1, r1, #29
 8010ca8:	3101      	adds	r1, #1
    switch (pllsource)
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d021      	beq.n	8010cf2 <HAL_RCC_GetSysClockFreq+0x96>
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d021      	beq.n	8010cf6 <HAL_RCC_GetSysClockFreq+0x9a>
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8010cb2:	68e3      	ldr	r3, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8010cb4:	68e4      	ldr	r4, [r4, #12]
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8010cb6:	045b      	lsls	r3, r3, #17
 8010cb8:	0e5b      	lsrs	r3, r3, #25
 8010cba:	4358      	muls	r0, r3
 8010cbc:	f7ef fa54 	bl	8000168 <__udivsi3>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8010cc0:	0f61      	lsrs	r1, r4, #29
 8010cc2:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8010cc4:	f7ef fa50 	bl	8000168 <__udivsi3>
 8010cc8:	e00d      	b.n	8010ce6 <HAL_RCC_GetSysClockFreq+0x8a>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010cca:	6821      	ldr	r1, [r4, #0]
 8010ccc:	0909      	lsrs	r1, r1, #4
 8010cce:	e7dc      	b.n	8010c8a <HAL_RCC_GetSysClockFreq+0x2e>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010cd0:	2b20      	cmp	r3, #32
 8010cd2:	d012      	beq.n	8010cfa <HAL_RCC_GetSysClockFreq+0x9e>
 8010cd4:	d808      	bhi.n	8010ce8 <HAL_RCC_GetSysClockFreq+0x8c>
 8010cd6:	2b08      	cmp	r3, #8
 8010cd8:	d012      	beq.n	8010d00 <HAL_RCC_GetSysClockFreq+0xa4>
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010cda:	3b10      	subs	r3, #16
 8010cdc:	425a      	negs	r2, r3
 8010cde:	4153      	adcs	r3, r2
 8010ce0:	480b      	ldr	r0, [pc, #44]	@ (8010d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8010ce2:	425b      	negs	r3, r3
 8010ce4:	4018      	ands	r0, r3
}
 8010ce6:	bd10      	pop	{r4, pc}
 8010ce8:	3b28      	subs	r3, #40	@ 0x28
 8010cea:	425a      	negs	r2, r3
 8010cec:	4153      	adcs	r3, r2
 8010cee:	03d8      	lsls	r0, r3, #15
 8010cf0:	e7f9      	b.n	8010ce6 <HAL_RCC_GetSysClockFreq+0x8a>
        pllsourcefreq = HSI_VALUE;
 8010cf2:	4808      	ldr	r0, [pc, #32]	@ (8010d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8010cf4:	e7dd      	b.n	8010cb2 <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 8010cf6:	4806      	ldr	r0, [pc, #24]	@ (8010d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8010cf8:	e7db      	b.n	8010cb2 <HAL_RCC_GetSysClockFreq+0x56>
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010cfa:	20fa      	movs	r0, #250	@ 0xfa
 8010cfc:	01c0      	lsls	r0, r0, #7
 8010cfe:	e7f2      	b.n	8010ce6 <HAL_RCC_GetSysClockFreq+0x8a>
 8010d00:	4804      	ldr	r0, [pc, #16]	@ (8010d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8010d02:	e7f0      	b.n	8010ce6 <HAL_RCC_GetSysClockFreq+0x8a>
 8010d04:	40021000 	.word	0x40021000
 8010d08:	40021094 	.word	0x40021094
 8010d0c:	08020408 	.word	0x08020408
 8010d10:	003d0900 	.word	0x003d0900
 8010d14:	00f42400 	.word	0x00f42400

08010d18 <HAL_RCC_OscConfig>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010d18:	2338      	movs	r3, #56	@ 0x38
{
 8010d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010d1c:	4cb1      	ldr	r4, [pc, #708]	@ (8010fe4 <HAL_RCC_OscConfig+0x2cc>)
{
 8010d1e:	0005      	movs	r5, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010d20:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010d22:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010d24:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010d26:	3b35      	subs	r3, #53	@ 0x35
 8010d28:	401f      	ands	r7, r3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010d2a:	6803      	ldr	r3, [r0, #0]
{
 8010d2c:	b085      	sub	sp, #20
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010d2e:	06db      	lsls	r3, r3, #27
 8010d30:	d400      	bmi.n	8010d34 <HAL_RCC_OscConfig+0x1c>
 8010d32:	e078      	b.n	8010e26 <HAL_RCC_OscConfig+0x10e>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010d34:	2e00      	cmp	r6, #0
 8010d36:	d003      	beq.n	8010d40 <HAL_RCC_OscConfig+0x28>
 8010d38:	2e18      	cmp	r6, #24
 8010d3a:	d155      	bne.n	8010de8 <HAL_RCC_OscConfig+0xd0>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010d3c:	2f01      	cmp	r7, #1
 8010d3e:	d153      	bne.n	8010de8 <HAL_RCC_OscConfig+0xd0>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	079b      	lsls	r3, r3, #30
 8010d44:	d502      	bpl.n	8010d4c <HAL_RCC_OscConfig+0x34>
 8010d46:	69eb      	ldr	r3, [r5, #28]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d04b      	beq.n	8010de4 <HAL_RCC_OscConfig+0xcc>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010d4c:	6822      	ldr	r2, [r4, #0]
 8010d4e:	23f0      	movs	r3, #240	@ 0xf0
 8010d50:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8010d52:	0712      	lsls	r2, r2, #28
 8010d54:	d52c      	bpl.n	8010db0 <HAL_RCC_OscConfig+0x98>
 8010d56:	6822      	ldr	r2, [r4, #0]
 8010d58:	4013      	ands	r3, r2
 8010d5a:	4298      	cmp	r0, r3
 8010d5c:	d92c      	bls.n	8010db8 <HAL_RCC_OscConfig+0xa0>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010d5e:	f7ff ff3d 	bl	8010bdc <RCC_SetFlashLatencyFromMSIRange>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d13e      	bne.n	8010de4 <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010d66:	2308      	movs	r3, #8
 8010d68:	6822      	ldr	r2, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010d6a:	499f      	ldr	r1, [pc, #636]	@ (8010fe8 <HAL_RCC_OscConfig+0x2d0>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	22f0      	movs	r2, #240	@ 0xf0
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	4393      	bics	r3, r2
 8010d76:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010d7c:	6862      	ldr	r2, [r4, #4]
 8010d7e:	6a2b      	ldr	r3, [r5, #32]
 8010d80:	400a      	ands	r2, r1
 8010d82:	021b      	lsls	r3, r3, #8
 8010d84:	4313      	orrs	r3, r2
 8010d86:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010d88:	f7ff ff68 	bl	8010c5c <HAL_RCC_GetSysClockFreq>
 8010d8c:	68a3      	ldr	r3, [r4, #8]
 8010d8e:	4a97      	ldr	r2, [pc, #604]	@ (8010fec <HAL_RCC_OscConfig+0x2d4>)
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010d90:	051b      	lsls	r3, r3, #20
 8010d92:	0f1b      	lsrs	r3, r3, #28
 8010d94:	5cd3      	ldrb	r3, [r2, r3]
 8010d96:	221f      	movs	r2, #31
 8010d98:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010d9a:	40d8      	lsrs	r0, r3
 8010d9c:	4994      	ldr	r1, [pc, #592]	@ (8010ff0 <HAL_RCC_OscConfig+0x2d8>)
        status = HAL_InitTick(uwTickPrio);
 8010d9e:	4b95      	ldr	r3, [pc, #596]	@ (8010ff4 <HAL_RCC_OscConfig+0x2dc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010da0:	6008      	str	r0, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 8010da2:	6818      	ldr	r0, [r3, #0]
 8010da4:	f7fd fa2c 	bl	800e200 <HAL_InitTick>
        if (status != HAL_OK)
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d03c      	beq.n	8010e26 <HAL_RCC_OscConfig+0x10e>
}
 8010dac:	b005      	add	sp, #20
 8010dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010db0:	4a91      	ldr	r2, [pc, #580]	@ (8010ff8 <HAL_RCC_OscConfig+0x2e0>)
 8010db2:	6812      	ldr	r2, [r2, #0]
 8010db4:	0912      	lsrs	r2, r2, #4
 8010db6:	e7cf      	b.n	8010d58 <HAL_RCC_OscConfig+0x40>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010db8:	2308      	movs	r3, #8
 8010dba:	6822      	ldr	r2, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010dbc:	498a      	ldr	r1, [pc, #552]	@ (8010fe8 <HAL_RCC_OscConfig+0x2d0>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	22f0      	movs	r2, #240	@ 0xf0
 8010dc2:	6023      	str	r3, [r4, #0]
 8010dc4:	6823      	ldr	r3, [r4, #0]
 8010dc6:	4393      	bics	r3, r2
 8010dc8:	4303      	orrs	r3, r0
 8010dca:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010dcc:	6862      	ldr	r2, [r4, #4]
 8010dce:	6a2b      	ldr	r3, [r5, #32]
 8010dd0:	400a      	ands	r2, r1
 8010dd2:	021b      	lsls	r3, r3, #8
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	6063      	str	r3, [r4, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8010dd8:	2e00      	cmp	r6, #0
 8010dda:	d1d5      	bne.n	8010d88 <HAL_RCC_OscConfig+0x70>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010ddc:	f7ff fefe 	bl	8010bdc <RCC_SetFlashLatencyFromMSIRange>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d0d1      	beq.n	8010d88 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8010de4:	2001      	movs	r0, #1
 8010de6:	e7e1      	b.n	8010dac <HAL_RCC_OscConfig+0x94>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010de8:	69ea      	ldr	r2, [r5, #28]
 8010dea:	2301      	movs	r3, #1
 8010dec:	2a00      	cmp	r2, #0
 8010dee:	d03a      	beq.n	8010e66 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_MSI_ENABLE();
 8010df0:	6822      	ldr	r2, [r4, #0]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010df6:	f7fd fa43 	bl	800e280 <HAL_GetTick>
 8010dfa:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010dfc:	2202      	movs	r2, #2
 8010dfe:	6823      	ldr	r3, [r4, #0]
 8010e00:	4213      	tst	r3, r2
 8010e02:	d028      	beq.n	8010e56 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010e04:	2308      	movs	r3, #8
 8010e06:	6822      	ldr	r2, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010e08:	4977      	ldr	r1, [pc, #476]	@ (8010fe8 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	22f0      	movs	r2, #240	@ 0xf0
 8010e0e:	6023      	str	r3, [r4, #0]
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	4393      	bics	r3, r2
 8010e14:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010e16:	4313      	orrs	r3, r2
 8010e18:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010e1a:	6862      	ldr	r2, [r4, #4]
 8010e1c:	6a2b      	ldr	r3, [r5, #32]
 8010e1e:	400a      	ands	r2, r1
 8010e20:	021b      	lsls	r3, r3, #8
 8010e22:	4313      	orrs	r3, r2
 8010e24:	6063      	str	r3, [r4, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e26:	682b      	ldr	r3, [r5, #0]
 8010e28:	07db      	lsls	r3, r3, #31
 8010e2a:	d42d      	bmi.n	8010e88 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010e2c:	682b      	ldr	r3, [r5, #0]
 8010e2e:	079b      	lsls	r3, r3, #30
 8010e30:	d467      	bmi.n	8010f02 <HAL_RCC_OscConfig+0x1ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010e32:	682b      	ldr	r3, [r5, #0]
 8010e34:	071b      	lsls	r3, r3, #28
 8010e36:	d500      	bpl.n	8010e3a <HAL_RCC_OscConfig+0x122>
 8010e38:	e0a1      	b.n	8010f7e <HAL_RCC_OscConfig+0x266>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010e3a:	682b      	ldr	r3, [r5, #0]
 8010e3c:	075b      	lsls	r3, r3, #29
 8010e3e:	d500      	bpl.n	8010e42 <HAL_RCC_OscConfig+0x12a>
 8010e40:	e0e2      	b.n	8011008 <HAL_RCC_OscConfig+0x2f0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010e42:	682b      	ldr	r3, [r5, #0]
 8010e44:	069b      	lsls	r3, r3, #26
 8010e46:	d500      	bpl.n	8010e4a <HAL_RCC_OscConfig+0x132>
 8010e48:	e175      	b.n	8011136 <HAL_RCC_OscConfig+0x41e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010e4a:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	d000      	beq.n	8010e52 <HAL_RCC_OscConfig+0x13a>
 8010e50:	e198      	b.n	8011184 <HAL_RCC_OscConfig+0x46c>
  return HAL_OK;
 8010e52:	2000      	movs	r0, #0
 8010e54:	e7aa      	b.n	8010dac <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8010e56:	f7fd fa13 	bl	800e280 <HAL_GetTick>
 8010e5a:	9b00      	ldr	r3, [sp, #0]
 8010e5c:	1ac0      	subs	r0, r0, r3
 8010e5e:	2802      	cmp	r0, #2
 8010e60:	d9cc      	bls.n	8010dfc <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8010e62:	2003      	movs	r0, #3
 8010e64:	e7a2      	b.n	8010dac <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 8010e66:	6822      	ldr	r2, [r4, #0]
 8010e68:	439a      	bics	r2, r3
 8010e6a:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8010e6c:	f7fd fa08 	bl	800e280 <HAL_GetTick>
 8010e70:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010e72:	2202      	movs	r2, #2
 8010e74:	6823      	ldr	r3, [r4, #0]
 8010e76:	4213      	tst	r3, r2
 8010e78:	d0d5      	beq.n	8010e26 <HAL_RCC_OscConfig+0x10e>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8010e7a:	f7fd fa01 	bl	800e280 <HAL_GetTick>
 8010e7e:	9b00      	ldr	r3, [sp, #0]
 8010e80:	1ac0      	subs	r0, r0, r3
 8010e82:	2802      	cmp	r0, #2
 8010e84:	d9f5      	bls.n	8010e72 <HAL_RCC_OscConfig+0x15a>
 8010e86:	e7ec      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8010e88:	2e10      	cmp	r6, #16
 8010e8a:	d003      	beq.n	8010e94 <HAL_RCC_OscConfig+0x17c>
 8010e8c:	2e18      	cmp	r6, #24
 8010e8e:	d108      	bne.n	8010ea2 <HAL_RCC_OscConfig+0x18a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010e90:	2f03      	cmp	r7, #3
 8010e92:	d106      	bne.n	8010ea2 <HAL_RCC_OscConfig+0x18a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	039b      	lsls	r3, r3, #14
 8010e98:	d5c8      	bpl.n	8010e2c <HAL_RCC_OscConfig+0x114>
 8010e9a:	686b      	ldr	r3, [r5, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1c5      	bne.n	8010e2c <HAL_RCC_OscConfig+0x114>
 8010ea0:	e7a0      	b.n	8010de4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ea2:	2280      	movs	r2, #128	@ 0x80
 8010ea4:	686b      	ldr	r3, [r5, #4]
 8010ea6:	0252      	lsls	r2, r2, #9
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d111      	bne.n	8010ed0 <HAL_RCC_OscConfig+0x1b8>
 8010eac:	6822      	ldr	r2, [r4, #0]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010eb2:	f7fd f9e5 	bl	800e280 <HAL_GetTick>
 8010eb6:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010eb8:	2280      	movs	r2, #128	@ 0x80
 8010eba:	6823      	ldr	r3, [r4, #0]
 8010ebc:	0292      	lsls	r2, r2, #10
 8010ebe:	4213      	tst	r3, r2
 8010ec0:	d1b4      	bne.n	8010e2c <HAL_RCC_OscConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8010ec2:	f7fd f9dd 	bl	800e280 <HAL_GetTick>
 8010ec6:	9b00      	ldr	r3, [sp, #0]
 8010ec8:	1ac0      	subs	r0, r0, r3
 8010eca:	2864      	cmp	r0, #100	@ 0x64
 8010ecc:	d9f4      	bls.n	8010eb8 <HAL_RCC_OscConfig+0x1a0>
 8010ece:	e7c8      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ed0:	22a0      	movs	r2, #160	@ 0xa0
 8010ed2:	02d2      	lsls	r2, r2, #11
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d0e9      	beq.n	8010eac <HAL_RCC_OscConfig+0x194>
 8010ed8:	6822      	ldr	r2, [r4, #0]
 8010eda:	4948      	ldr	r1, [pc, #288]	@ (8010ffc <HAL_RCC_OscConfig+0x2e4>)
 8010edc:	400a      	ands	r2, r1
 8010ede:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1e6      	bne.n	8010eb2 <HAL_RCC_OscConfig+0x19a>
        tickstart = HAL_GetTick();
 8010ee4:	f7fd f9cc 	bl	800e280 <HAL_GetTick>
 8010ee8:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010eea:	2280      	movs	r2, #128	@ 0x80
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	0292      	lsls	r2, r2, #10
 8010ef0:	4213      	tst	r3, r2
 8010ef2:	d09b      	beq.n	8010e2c <HAL_RCC_OscConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8010ef4:	f7fd f9c4 	bl	800e280 <HAL_GetTick>
 8010ef8:	9b00      	ldr	r3, [sp, #0]
 8010efa:	1ac0      	subs	r0, r0, r3
 8010efc:	2864      	cmp	r0, #100	@ 0x64
 8010efe:	d9f4      	bls.n	8010eea <HAL_RCC_OscConfig+0x1d2>
 8010f00:	e7af      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8010f02:	2e08      	cmp	r6, #8
 8010f04:	d003      	beq.n	8010f0e <HAL_RCC_OscConfig+0x1f6>
 8010f06:	2e18      	cmp	r6, #24
 8010f08:	d110      	bne.n	8010f2c <HAL_RCC_OscConfig+0x214>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010f0a:	2f02      	cmp	r7, #2
 8010f0c:	d10e      	bne.n	8010f2c <HAL_RCC_OscConfig+0x214>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	055b      	lsls	r3, r3, #21
 8010f12:	d503      	bpl.n	8010f1c <HAL_RCC_OscConfig+0x204>
 8010f14:	68eb      	ldr	r3, [r5, #12]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d100      	bne.n	8010f1c <HAL_RCC_OscConfig+0x204>
 8010f1a:	e763      	b.n	8010de4 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f1c:	6862      	ldr	r2, [r4, #4]
 8010f1e:	692b      	ldr	r3, [r5, #16]
 8010f20:	4937      	ldr	r1, [pc, #220]	@ (8011000 <HAL_RCC_OscConfig+0x2e8>)
 8010f22:	061b      	lsls	r3, r3, #24
 8010f24:	400a      	ands	r2, r1
 8010f26:	4313      	orrs	r3, r2
 8010f28:	6063      	str	r3, [r4, #4]
 8010f2a:	e782      	b.n	8010e32 <HAL_RCC_OscConfig+0x11a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010f2c:	68eb      	ldr	r3, [r5, #12]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d012      	beq.n	8010f58 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8010f32:	2380      	movs	r3, #128	@ 0x80
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010f3c:	f7fd f9a0 	bl	800e280 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010f40:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8010f42:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010f44:	00ff      	lsls	r7, r7, #3
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	423b      	tst	r3, r7
 8010f4a:	d1e7      	bne.n	8010f1c <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8010f4c:	f7fd f998 	bl	800e280 <HAL_GetTick>
 8010f50:	1b80      	subs	r0, r0, r6
 8010f52:	2802      	cmp	r0, #2
 8010f54:	d9f7      	bls.n	8010f46 <HAL_RCC_OscConfig+0x22e>
 8010f56:	e784      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8010f58:	6823      	ldr	r3, [r4, #0]
 8010f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8011004 <HAL_RCC_OscConfig+0x2ec>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010f5c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8010f5e:	4013      	ands	r3, r2
 8010f60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010f62:	f7fd f98d 	bl	800e280 <HAL_GetTick>
 8010f66:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010f68:	00ff      	lsls	r7, r7, #3
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	423b      	tst	r3, r7
 8010f6e:	d100      	bne.n	8010f72 <HAL_RCC_OscConfig+0x25a>
 8010f70:	e75f      	b.n	8010e32 <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8010f72:	f7fd f985 	bl	800e280 <HAL_GetTick>
 8010f76:	1b80      	subs	r0, r0, r6
 8010f78:	2802      	cmp	r0, #2
 8010f7a:	d9f6      	bls.n	8010f6a <HAL_RCC_OscConfig+0x252>
 8010f7c:	e771      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010f7e:	696b      	ldr	r3, [r5, #20]
 8010f80:	4e1d      	ldr	r6, [pc, #116]	@ (8010ff8 <HAL_RCC_OscConfig+0x2e0>)
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d01c      	beq.n	8010fc0 <HAL_RCC_OscConfig+0x2a8>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8010f86:	69aa      	ldr	r2, [r5, #24]
 8010f88:	2304      	movs	r3, #4
 8010f8a:	2a00      	cmp	r2, #0
 8010f8c:	d114      	bne.n	8010fb8 <HAL_RCC_OscConfig+0x2a0>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8010f8e:	6832      	ldr	r2, [r6, #0]
 8010f90:	439a      	bics	r2, r3
 8010f92:	6032      	str	r2, [r6, #0]
      __HAL_RCC_LSI_ENABLE();
 8010f94:	2301      	movs	r3, #1
 8010f96:	6832      	ldr	r2, [r6, #0]
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010f9c:	f7fd f970 	bl	800e280 <HAL_GetTick>
 8010fa0:	0007      	movs	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010fa2:	2202      	movs	r2, #2
 8010fa4:	6833      	ldr	r3, [r6, #0]
 8010fa6:	4213      	tst	r3, r2
 8010fa8:	d000      	beq.n	8010fac <HAL_RCC_OscConfig+0x294>
 8010faa:	e746      	b.n	8010e3a <HAL_RCC_OscConfig+0x122>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010fac:	f7fd f968 	bl	800e280 <HAL_GetTick>
 8010fb0:	1bc0      	subs	r0, r0, r7
 8010fb2:	2811      	cmp	r0, #17
 8010fb4:	d9f5      	bls.n	8010fa2 <HAL_RCC_OscConfig+0x28a>
 8010fb6:	e754      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8010fb8:	6832      	ldr	r2, [r6, #0]
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	6033      	str	r3, [r6, #0]
 8010fbe:	e7e9      	b.n	8010f94 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSI_DISABLE();
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	6833      	ldr	r3, [r6, #0]
 8010fc4:	4393      	bics	r3, r2
 8010fc6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010fc8:	f7fd f95a 	bl	800e280 <HAL_GetTick>
 8010fcc:	0007      	movs	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010fce:	2202      	movs	r2, #2
 8010fd0:	6833      	ldr	r3, [r6, #0]
 8010fd2:	4213      	tst	r3, r2
 8010fd4:	d100      	bne.n	8010fd8 <HAL_RCC_OscConfig+0x2c0>
 8010fd6:	e730      	b.n	8010e3a <HAL_RCC_OscConfig+0x122>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010fd8:	f7fd f952 	bl	800e280 <HAL_GetTick>
 8010fdc:	1bc0      	subs	r0, r0, r7
 8010fde:	2811      	cmp	r0, #17
 8010fe0:	d9f5      	bls.n	8010fce <HAL_RCC_OscConfig+0x2b6>
 8010fe2:	e73e      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
 8010fe4:	40021000 	.word	0x40021000
 8010fe8:	ffff00ff 	.word	0xffff00ff
 8010fec:	08020440 	.word	0x08020440
 8010ff0:	20000050 	.word	0x20000050
 8010ff4:	20000208 	.word	0x20000208
 8010ff8:	40021094 	.word	0x40021094
 8010ffc:	fffaffff 	.word	0xfffaffff
 8011000:	80ffffff 	.word	0x80ffffff
 8011004:	fffffeff 	.word	0xfffffeff
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8011008:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 801100a:	2100      	movs	r1, #0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 801100c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801100e:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8011010:	9100      	str	r1, [sp, #0]
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8011012:	4213      	tst	r3, r2
 8011014:	d108      	bne.n	8011028 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_PWR_CLK_ENABLE();
 8011016:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011018:	4313      	orrs	r3, r2
 801101a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801101c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801101e:	4013      	ands	r3, r2
 8011020:	9303      	str	r3, [sp, #12]
 8011022:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8011024:	2301      	movs	r3, #1
 8011026:	9300      	str	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011028:	2780      	movs	r7, #128	@ 0x80
 801102a:	4e80      	ldr	r6, [pc, #512]	@ (801122c <HAL_RCC_OscConfig+0x514>)
 801102c:	007f      	lsls	r7, r7, #1
 801102e:	6833      	ldr	r3, [r6, #0]
 8011030:	423b      	tst	r3, r7
 8011032:	d027      	beq.n	8011084 <HAL_RCC_OscConfig+0x36c>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8011034:	2301      	movs	r3, #1
 8011036:	68a9      	ldr	r1, [r5, #8]
 8011038:	4e7d      	ldr	r6, [pc, #500]	@ (8011230 <HAL_RCC_OscConfig+0x518>)
 801103a:	4219      	tst	r1, r3
 801103c:	d132      	bne.n	80110a4 <HAL_RCC_OscConfig+0x38c>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801103e:	6832      	ldr	r2, [r6, #0]
 8011040:	439a      	bics	r2, r3
 8011042:	6032      	str	r2, [r6, #0]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8011044:	2204      	movs	r2, #4
 8011046:	6833      	ldr	r3, [r6, #0]
 8011048:	4393      	bics	r3, r2
 801104a:	6033      	str	r3, [r6, #0]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801104c:	2900      	cmp	r1, #0
 801104e:	d132      	bne.n	80110b6 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8011050:	f7fd f916 	bl	800e280 <HAL_GetTick>
 8011054:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011056:	2202      	movs	r2, #2
 8011058:	6833      	ldr	r3, [r6, #0]
 801105a:	4213      	tst	r3, r2
 801105c:	d164      	bne.n	8011128 <HAL_RCC_OscConfig+0x410>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801105e:	6833      	ldr	r3, [r6, #0]
 8011060:	327e      	adds	r2, #126	@ 0x7e
 8011062:	4213      	tst	r3, r2
 8011064:	d03a      	beq.n	80110dc <HAL_RCC_OscConfig+0x3c4>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8011066:	6833      	ldr	r3, [r6, #0]
 8011068:	4393      	bics	r3, r2
 801106a:	6033      	str	r3, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801106c:	2280      	movs	r2, #128	@ 0x80
 801106e:	6833      	ldr	r3, [r6, #0]
 8011070:	0112      	lsls	r2, r2, #4
 8011072:	4213      	tst	r3, r2
 8011074:	d032      	beq.n	80110dc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011076:	f7fd f903 	bl	800e280 <HAL_GetTick>
 801107a:	4b6e      	ldr	r3, [pc, #440]	@ (8011234 <HAL_RCC_OscConfig+0x51c>)
 801107c:	1bc0      	subs	r0, r0, r7
 801107e:	4298      	cmp	r0, r3
 8011080:	d9f4      	bls.n	801106c <HAL_RCC_OscConfig+0x354>
 8011082:	e6ee      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011084:	6833      	ldr	r3, [r6, #0]
 8011086:	433b      	orrs	r3, r7
 8011088:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 801108a:	f7fd f8f9 	bl	800e280 <HAL_GetTick>
 801108e:	9001      	str	r0, [sp, #4]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011090:	6833      	ldr	r3, [r6, #0]
 8011092:	423b      	tst	r3, r7
 8011094:	d1ce      	bne.n	8011034 <HAL_RCC_OscConfig+0x31c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011096:	f7fd f8f3 	bl	800e280 <HAL_GetTick>
 801109a:	9b01      	ldr	r3, [sp, #4]
 801109c:	1ac0      	subs	r0, r0, r3
 801109e:	2802      	cmp	r0, #2
 80110a0:	d9f6      	bls.n	8011090 <HAL_RCC_OscConfig+0x378>
 80110a2:	e6de      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80110a4:	2204      	movs	r2, #4
 80110a6:	4211      	tst	r1, r2
 80110a8:	d002      	beq.n	80110b0 <HAL_RCC_OscConfig+0x398>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80110aa:	6831      	ldr	r1, [r6, #0]
 80110ac:	430a      	orrs	r2, r1
 80110ae:	6032      	str	r2, [r6, #0]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80110b0:	6832      	ldr	r2, [r6, #0]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80110b6:	f7fd f8e3 	bl	800e280 <HAL_GetTick>
 80110ba:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110bc:	2202      	movs	r2, #2
 80110be:	6833      	ldr	r3, [r6, #0]
 80110c0:	4213      	tst	r3, r2
 80110c2:	d014      	beq.n	80110ee <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80110c4:	2380      	movs	r3, #128	@ 0x80
 80110c6:	68aa      	ldr	r2, [r5, #8]
 80110c8:	421a      	tst	r2, r3
 80110ca:	d01e      	beq.n	801110a <HAL_RCC_OscConfig+0x3f2>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80110cc:	6832      	ldr	r2, [r6, #0]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	6033      	str	r3, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80110d2:	2280      	movs	r2, #128	@ 0x80
 80110d4:	6833      	ldr	r3, [r6, #0]
 80110d6:	0112      	lsls	r2, r2, #4
 80110d8:	4213      	tst	r3, r2
 80110da:	d00f      	beq.n	80110fc <HAL_RCC_OscConfig+0x3e4>
    if (pwrclkchanged == SET)
 80110dc:	9b00      	ldr	r3, [sp, #0]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d000      	beq.n	80110e4 <HAL_RCC_OscConfig+0x3cc>
 80110e2:	e6ae      	b.n	8010e42 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80110e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80110e6:	4a54      	ldr	r2, [pc, #336]	@ (8011238 <HAL_RCC_OscConfig+0x520>)
 80110e8:	4013      	ands	r3, r2
 80110ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80110ec:	e6a9      	b.n	8010e42 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110ee:	f7fd f8c7 	bl	800e280 <HAL_GetTick>
 80110f2:	4b50      	ldr	r3, [pc, #320]	@ (8011234 <HAL_RCC_OscConfig+0x51c>)
 80110f4:	1bc0      	subs	r0, r0, r7
 80110f6:	4298      	cmp	r0, r3
 80110f8:	d9e0      	bls.n	80110bc <HAL_RCC_OscConfig+0x3a4>
 80110fa:	e6b2      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110fc:	f7fd f8c0 	bl	800e280 <HAL_GetTick>
 8011100:	4b4c      	ldr	r3, [pc, #304]	@ (8011234 <HAL_RCC_OscConfig+0x51c>)
 8011102:	1bc0      	subs	r0, r0, r7
 8011104:	4298      	cmp	r0, r3
 8011106:	d9e4      	bls.n	80110d2 <HAL_RCC_OscConfig+0x3ba>
 8011108:	e6ab      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801110a:	6832      	ldr	r2, [r6, #0]
 801110c:	439a      	bics	r2, r3
 801110e:	6032      	str	r2, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8011110:	2280      	movs	r2, #128	@ 0x80
 8011112:	6833      	ldr	r3, [r6, #0]
 8011114:	0112      	lsls	r2, r2, #4
 8011116:	4213      	tst	r3, r2
 8011118:	d0e0      	beq.n	80110dc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801111a:	f7fd f8b1 	bl	800e280 <HAL_GetTick>
 801111e:	4b45      	ldr	r3, [pc, #276]	@ (8011234 <HAL_RCC_OscConfig+0x51c>)
 8011120:	1bc0      	subs	r0, r0, r7
 8011122:	4298      	cmp	r0, r3
 8011124:	d9f4      	bls.n	8011110 <HAL_RCC_OscConfig+0x3f8>
 8011126:	e69c      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011128:	f7fd f8aa 	bl	800e280 <HAL_GetTick>
 801112c:	4b41      	ldr	r3, [pc, #260]	@ (8011234 <HAL_RCC_OscConfig+0x51c>)
 801112e:	1bc0      	subs	r0, r0, r7
 8011130:	4298      	cmp	r0, r3
 8011132:	d990      	bls.n	8011056 <HAL_RCC_OscConfig+0x33e>
 8011134:	e695      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011136:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8011138:	2301      	movs	r3, #1
 801113a:	4e40      	ldr	r6, [pc, #256]	@ (801123c <HAL_RCC_OscConfig+0x524>)
 801113c:	2a00      	cmp	r2, #0
 801113e:	d010      	beq.n	8011162 <HAL_RCC_OscConfig+0x44a>
      __HAL_RCC_HSI48_ENABLE();
 8011140:	6832      	ldr	r2, [r6, #0]
 8011142:	4313      	orrs	r3, r2
 8011144:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8011146:	f7fd f89b 	bl	800e280 <HAL_GetTick>
 801114a:	0007      	movs	r7, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801114c:	2202      	movs	r2, #2
 801114e:	6833      	ldr	r3, [r6, #0]
 8011150:	4213      	tst	r3, r2
 8011152:	d000      	beq.n	8011156 <HAL_RCC_OscConfig+0x43e>
 8011154:	e679      	b.n	8010e4a <HAL_RCC_OscConfig+0x132>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011156:	f7fd f893 	bl	800e280 <HAL_GetTick>
 801115a:	1bc0      	subs	r0, r0, r7
 801115c:	2802      	cmp	r0, #2
 801115e:	d9f5      	bls.n	801114c <HAL_RCC_OscConfig+0x434>
 8011160:	e67f      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSI48_DISABLE();
 8011162:	6832      	ldr	r2, [r6, #0]
 8011164:	439a      	bics	r2, r3
 8011166:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 8011168:	f7fd f88a 	bl	800e280 <HAL_GetTick>
 801116c:	0007      	movs	r7, r0
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 801116e:	2202      	movs	r2, #2
 8011170:	6833      	ldr	r3, [r6, #0]
 8011172:	4213      	tst	r3, r2
 8011174:	d100      	bne.n	8011178 <HAL_RCC_OscConfig+0x460>
 8011176:	e668      	b.n	8010e4a <HAL_RCC_OscConfig+0x132>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011178:	f7fd f882 	bl	800e280 <HAL_GetTick>
 801117c:	1bc0      	subs	r0, r0, r7
 801117e:	2802      	cmp	r0, #2
 8011180:	d9f5      	bls.n	801116e <HAL_RCC_OscConfig+0x456>
 8011182:	e66e      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011184:	2238      	movs	r2, #56	@ 0x38
 8011186:	68a3      	ldr	r3, [r4, #8]
 8011188:	4013      	ands	r3, r2
 801118a:	2b18      	cmp	r3, #24
 801118c:	d100      	bne.n	8011190 <HAL_RCC_OscConfig+0x478>
 801118e:	e629      	b.n	8010de4 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_PLL_DISABLE();
 8011190:	6823      	ldr	r3, [r4, #0]
 8011192:	4a2b      	ldr	r2, [pc, #172]	@ (8011240 <HAL_RCC_OscConfig+0x528>)
 8011194:	4013      	ands	r3, r2
 8011196:	6023      	str	r3, [r4, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8011198:	2902      	cmp	r1, #2
 801119a:	d137      	bne.n	801120c <HAL_RCC_OscConfig+0x4f4>
        tickstart = HAL_GetTick();
 801119c:	f7fd f870 	bl	800e280 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80111a0:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80111a2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80111a4:	04bf      	lsls	r7, r7, #18
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	423b      	tst	r3, r7
 80111aa:	d129      	bne.n	8011200 <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80111ac:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80111ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80111b0:	68e2      	ldr	r2, [r4, #12]
 80111b2:	430b      	orrs	r3, r1
 80111b4:	4923      	ldr	r1, [pc, #140]	@ (8011244 <HAL_RCC_OscConfig+0x52c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80111b6:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80111b8:	400a      	ands	r2, r1
 80111ba:	4313      	orrs	r3, r2
 80111bc:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80111be:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80111c0:	4313      	orrs	r3, r2
 80111c2:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 80111c4:	4313      	orrs	r3, r2
 80111c6:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80111c8:	4313      	orrs	r3, r2
 80111ca:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80111cc:	0212      	lsls	r2, r2, #8
 80111ce:	4313      	orrs	r3, r2
 80111d0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 80111d2:	2380      	movs	r3, #128	@ 0x80
 80111d4:	68e2      	ldr	r2, [r4, #12]
 80111d6:	055b      	lsls	r3, r3, #21
 80111d8:	4313      	orrs	r3, r2
 80111da:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80111dc:	2380      	movs	r3, #128	@ 0x80
 80111de:	6822      	ldr	r2, [r4, #0]
 80111e0:	045b      	lsls	r3, r3, #17
 80111e2:	4313      	orrs	r3, r2
 80111e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80111e6:	f7fd f84b 	bl	800e280 <HAL_GetTick>
 80111ea:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	4233      	tst	r3, r6
 80111f0:	d000      	beq.n	80111f4 <HAL_RCC_OscConfig+0x4dc>
 80111f2:	e62e      	b.n	8010e52 <HAL_RCC_OscConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80111f4:	f7fd f844 	bl	800e280 <HAL_GetTick>
 80111f8:	1b40      	subs	r0, r0, r5
 80111fa:	2802      	cmp	r0, #2
 80111fc:	d9f6      	bls.n	80111ec <HAL_RCC_OscConfig+0x4d4>
 80111fe:	e630      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011200:	f7fd f83e 	bl	800e280 <HAL_GetTick>
 8011204:	1b80      	subs	r0, r0, r6
 8011206:	2802      	cmp	r0, #2
 8011208:	d9cd      	bls.n	80111a6 <HAL_RCC_OscConfig+0x48e>
 801120a:	e62a      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 801120c:	f7fd f838 	bl	800e280 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011210:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8011212:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011214:	04b6      	lsls	r6, r6, #18
 8011216:	6823      	ldr	r3, [r4, #0]
 8011218:	4233      	tst	r3, r6
 801121a:	d100      	bne.n	801121e <HAL_RCC_OscConfig+0x506>
 801121c:	e619      	b.n	8010e52 <HAL_RCC_OscConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801121e:	f7fd f82f 	bl	800e280 <HAL_GetTick>
 8011222:	1b40      	subs	r0, r0, r5
 8011224:	2802      	cmp	r0, #2
 8011226:	d9f6      	bls.n	8011216 <HAL_RCC_OscConfig+0x4fe>
 8011228:	e61b      	b.n	8010e62 <HAL_RCC_OscConfig+0x14a>
 801122a:	46c0      	nop			@ (mov r8, r8)
 801122c:	40007000 	.word	0x40007000
 8011230:	40021090 	.word	0x40021090
 8011234:	00001388 	.word	0x00001388
 8011238:	efffffff 	.word	0xefffffff
 801123c:	40021098 	.word	0x40021098
 8011240:	feffffff 	.word	0xfeffffff
 8011244:	11c1808c 	.word	0x11c1808c

08011248 <HAL_RCC_ClockConfig>:
{
 8011248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801124a:	2207      	movs	r2, #7
 801124c:	4e3f      	ldr	r6, [pc, #252]	@ (801134c <HAL_RCC_ClockConfig+0x104>)
{
 801124e:	0004      	movs	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011250:	6833      	ldr	r3, [r6, #0]
{
 8011252:	000d      	movs	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011254:	4013      	ands	r3, r2
 8011256:	428b      	cmp	r3, r1
 8011258:	d31d      	bcc.n	8011296 <HAL_RCC_ClockConfig+0x4e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	07db      	lsls	r3, r3, #31
 801125e:	d424      	bmi.n	80112aa <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011260:	6822      	ldr	r2, [r4, #0]
 8011262:	0793      	lsls	r3, r2, #30
 8011264:	d459      	bmi.n	801131a <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011266:	2107      	movs	r1, #7
 8011268:	6833      	ldr	r3, [r6, #0]
 801126a:	400b      	ands	r3, r1
 801126c:	42ab      	cmp	r3, r5
 801126e:	d85c      	bhi.n	801132a <HAL_RCC_ClockConfig+0xe2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011270:	4d37      	ldr	r5, [pc, #220]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
 8011272:	0752      	lsls	r2, r2, #29
 8011274:	d462      	bmi.n	801133c <HAL_RCC_ClockConfig+0xf4>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8011276:	f7ff fcf1 	bl	8010c5c <HAL_RCC_GetSysClockFreq>
 801127a:	68ab      	ldr	r3, [r5, #8]
 801127c:	4a35      	ldr	r2, [pc, #212]	@ (8011354 <HAL_RCC_ClockConfig+0x10c>)
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801127e:	051b      	lsls	r3, r3, #20
 8011280:	0f1b      	lsrs	r3, r3, #28
 8011282:	5cd3      	ldrb	r3, [r2, r3]
 8011284:	221f      	movs	r2, #31
 8011286:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8011288:	40d8      	lsrs	r0, r3
 801128a:	4933      	ldr	r1, [pc, #204]	@ (8011358 <HAL_RCC_ClockConfig+0x110>)
 801128c:	6008      	str	r0, [r1, #0]
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 801128e:	2003      	movs	r0, #3
 8011290:	f7fc ffb6 	bl	800e200 <HAL_InitTick>
  return halstatus;
 8011294:	e008      	b.n	80112a8 <HAL_RCC_ClockConfig+0x60>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011296:	6833      	ldr	r3, [r6, #0]
 8011298:	4393      	bics	r3, r2
 801129a:	430b      	orrs	r3, r1
 801129c:	6033      	str	r3, [r6, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801129e:	6833      	ldr	r3, [r6, #0]
 80112a0:	4013      	ands	r3, r2
 80112a2:	428b      	cmp	r3, r1
 80112a4:	d0d9      	beq.n	801125a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80112a6:	2001      	movs	r0, #1
}
 80112a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80112aa:	6860      	ldr	r0, [r4, #4]
 80112ac:	2804      	cmp	r0, #4
 80112ae:	d832      	bhi.n	8011316 <HAL_RCC_ClockConfig+0xce>
 80112b0:	f7ee ff3c 	bl	800012c <__gnu_thumb1_case_uqi>
 80112b4:	03202a25 	.word	0x03202a25
 80112b8:	2f          	.byte	0x2f
 80112b9:	00          	.byte	0x00
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80112ba:	4b25      	ldr	r3, [pc, #148]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	019b      	lsls	r3, r3, #6
 80112c0:	d5f1      	bpl.n	80112a6 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80112c2:	2207      	movs	r2, #7
 80112c4:	4f22      	ldr	r7, [pc, #136]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	4393      	bics	r3, r2
 80112ca:	4303      	orrs	r3, r0
 80112cc:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80112ce:	f7fc ffd7 	bl	800e280 <HAL_GetTick>
 80112d2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80112d4:	2338      	movs	r3, #56	@ 0x38
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	401a      	ands	r2, r3
 80112da:	6863      	ldr	r3, [r4, #4]
 80112dc:	00db      	lsls	r3, r3, #3
 80112de:	429a      	cmp	r2, r3
 80112e0:	d0be      	beq.n	8011260 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80112e2:	f7fc ffcd 	bl	800e280 <HAL_GetTick>
 80112e6:	9b01      	ldr	r3, [sp, #4]
 80112e8:	1ac0      	subs	r0, r0, r3
 80112ea:	4b1c      	ldr	r3, [pc, #112]	@ (801135c <HAL_RCC_ClockConfig+0x114>)
 80112ec:	4298      	cmp	r0, r3
 80112ee:	d9f1      	bls.n	80112d4 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 80112f0:	2003      	movs	r0, #3
 80112f2:	e7d9      	b.n	80112a8 <HAL_RCC_ClockConfig+0x60>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80112f4:	4b16      	ldr	r3, [pc, #88]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	039b      	lsls	r3, r3, #14
 80112fa:	d4e2      	bmi.n	80112c2 <HAL_RCC_ClockConfig+0x7a>
 80112fc:	e7d3      	b.n	80112a6 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80112fe:	4b14      	ldr	r3, [pc, #80]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	079b      	lsls	r3, r3, #30
 8011304:	d4dd      	bmi.n	80112c2 <HAL_RCC_ClockConfig+0x7a>
 8011306:	e7ce      	b.n	80112a6 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011308:	4b11      	ldr	r3, [pc, #68]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	055b      	lsls	r3, r3, #21
 801130e:	d4d8      	bmi.n	80112c2 <HAL_RCC_ClockConfig+0x7a>
 8011310:	e7c9      	b.n	80112a6 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011312:	4b13      	ldr	r3, [pc, #76]	@ (8011360 <HAL_RCC_ClockConfig+0x118>)
 8011314:	e7f4      	b.n	8011300 <HAL_RCC_ClockConfig+0xb8>
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011316:	4b13      	ldr	r3, [pc, #76]	@ (8011364 <HAL_RCC_ClockConfig+0x11c>)
 8011318:	e7f2      	b.n	8011300 <HAL_RCC_ClockConfig+0xb8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801131a:	490d      	ldr	r1, [pc, #52]	@ (8011350 <HAL_RCC_ClockConfig+0x108>)
 801131c:	4812      	ldr	r0, [pc, #72]	@ (8011368 <HAL_RCC_ClockConfig+0x120>)
 801131e:	688b      	ldr	r3, [r1, #8]
 8011320:	4003      	ands	r3, r0
 8011322:	68a0      	ldr	r0, [r4, #8]
 8011324:	4303      	orrs	r3, r0
 8011326:	608b      	str	r3, [r1, #8]
 8011328:	e79d      	b.n	8011266 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801132a:	6833      	ldr	r3, [r6, #0]
 801132c:	438b      	bics	r3, r1
 801132e:	432b      	orrs	r3, r5
 8011330:	6033      	str	r3, [r6, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011332:	6833      	ldr	r3, [r6, #0]
 8011334:	400b      	ands	r3, r1
 8011336:	42ab      	cmp	r3, r5
 8011338:	d1b5      	bne.n	80112a6 <HAL_RCC_ClockConfig+0x5e>
 801133a:	e799      	b.n	8011270 <HAL_RCC_ClockConfig+0x28>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801133c:	68ab      	ldr	r3, [r5, #8]
 801133e:	4a0b      	ldr	r2, [pc, #44]	@ (801136c <HAL_RCC_ClockConfig+0x124>)
 8011340:	4013      	ands	r3, r2
 8011342:	68e2      	ldr	r2, [r4, #12]
 8011344:	4313      	orrs	r3, r2
 8011346:	60ab      	str	r3, [r5, #8]
 8011348:	e795      	b.n	8011276 <HAL_RCC_ClockConfig+0x2e>
 801134a:	46c0      	nop			@ (mov r8, r8)
 801134c:	40022000 	.word	0x40022000
 8011350:	40021000 	.word	0x40021000
 8011354:	08020440 	.word	0x08020440
 8011358:	20000050 	.word	0x20000050
 801135c:	00001388 	.word	0x00001388
 8011360:	40021094 	.word	0x40021094
 8011364:	40021090 	.word	0x40021090
 8011368:	fffff0ff 	.word	0xfffff0ff
 801136c:	ffff8fff 	.word	0xffff8fff

08011370 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8011370:	4b05      	ldr	r3, [pc, #20]	@ (8011388 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011372:	4906      	ldr	r1, [pc, #24]	@ (801138c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011374:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8011376:	4a06      	ldr	r2, [pc, #24]	@ (8011390 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8011378:	045b      	lsls	r3, r3, #17
 801137a:	0f5b      	lsrs	r3, r3, #29
 801137c:	5ccb      	ldrb	r3, [r1, r3]
 801137e:	211f      	movs	r1, #31
 8011380:	6810      	ldr	r0, [r2, #0]
 8011382:	400b      	ands	r3, r1
 8011384:	40d8      	lsrs	r0, r3
}
 8011386:	4770      	bx	lr
 8011388:	40021000 	.word	0x40021000
 801138c:	08020438 	.word	0x08020438
 8011390:	20000050 	.word	0x20000050

08011394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011394:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011396:	6803      	ldr	r3, [r0, #0]
{
 8011398:	0004      	movs	r4, r0
 801139a:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801139c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801139e:	041b      	lsls	r3, r3, #16
 80113a0:	d553      	bpl.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80113a2:	2280      	movs	r2, #128	@ 0x80
 80113a4:	4e8a      	ldr	r6, [pc, #552]	@ (80115d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80113a6:	0552      	lsls	r2, r2, #21
 80113a8:	6db3      	ldr	r3, [r6, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 80113aa:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80113ac:	4213      	tst	r3, r2
 80113ae:	d108      	bne.n	80113c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80113b0:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80113b2:	4313      	orrs	r3, r2
 80113b4:	65b3      	str	r3, [r6, #88]	@ 0x58
 80113b6:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80113b8:	4013      	ands	r3, r2
 80113ba:	9303      	str	r3, [sp, #12]
 80113bc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80113be:	2301      	movs	r3, #1
 80113c0:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80113c2:	2780      	movs	r7, #128	@ 0x80
 80113c4:	4d83      	ldr	r5, [pc, #524]	@ (80115d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80113c6:	007f      	lsls	r7, r7, #1
 80113c8:	682b      	ldr	r3, [r5, #0]
 80113ca:	433b      	orrs	r3, r7
 80113cc:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80113ce:	f7fc ff57 	bl	800e280 <HAL_GetTick>
 80113d2:	9001      	str	r0, [sp, #4]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80113d4:	682b      	ldr	r3, [r5, #0]
 80113d6:	423b      	tst	r3, r7
 80113d8:	d029      	beq.n	801142e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80113da:	4d7f      	ldr	r5, [pc, #508]	@ (80115d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80113dc:	23c0      	movs	r3, #192	@ 0xc0
 80113de:	682a      	ldr	r2, [r5, #0]
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	0010      	movs	r0, r2

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80113e4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80113e6:	4f7d      	ldr	r7, [pc, #500]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80113e8:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80113ea:	421a      	tst	r2, r3
 80113ec:	d018      	beq.n	8011420 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80113ee:	4281      	cmp	r1, r0
 80113f0:	d016      	beq.n	8011420 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80113f2:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80113f4:	682b      	ldr	r3, [r5, #0]
        __HAL_RCC_BACKUPRESET_FORCE();
 80113f6:	6828      	ldr	r0, [r5, #0]
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80113f8:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 80113fa:	0252      	lsls	r2, r2, #9
 80113fc:	4302      	orrs	r2, r0
 80113fe:	602a      	str	r2, [r5, #0]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011400:	682a      	ldr	r2, [r5, #0]
 8011402:	4877      	ldr	r0, [pc, #476]	@ (80115e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011404:	4039      	ands	r1, r7
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011406:	4002      	ands	r2, r0
 8011408:	602a      	str	r2, [r5, #0]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801140a:	6029      	str	r1, [r5, #0]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801140c:	07db      	lsls	r3, r3, #31
 801140e:	d507      	bpl.n	8011420 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011410:	f7fc ff36 	bl	800e280 <HAL_GetTick>
 8011414:	9001      	str	r0, [sp, #4]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011416:	2202      	movs	r2, #2
 8011418:	682b      	ldr	r3, [r5, #0]
 801141a:	4213      	tst	r3, r2
 801141c:	d100      	bne.n	8011420 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 801141e:	e0ce      	b.n	80115be <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011420:	682b      	ldr	r3, [r5, #0]
 8011422:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011424:	403b      	ands	r3, r7
 8011426:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011428:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801142a:	602b      	str	r3, [r5, #0]
 801142c:	e006      	b.n	801143c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801142e:	f7fc ff27 	bl	800e280 <HAL_GetTick>
 8011432:	9b01      	ldr	r3, [sp, #4]
 8011434:	1ac0      	subs	r0, r0, r3
 8011436:	2802      	cmp	r0, #2
 8011438:	d9cc      	bls.n	80113d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801143a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	2b01      	cmp	r3, #1
 8011440:	d103      	bne.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011442:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8011444:	4a67      	ldr	r2, [pc, #412]	@ (80115e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8011446:	4013      	ands	r3, r2
 8011448:	65b3      	str	r3, [r6, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	07da      	lsls	r2, r3, #31
 801144e:	d506      	bpl.n	801145e <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011450:	2503      	movs	r5, #3
 8011452:	4965      	ldr	r1, [pc, #404]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011454:	680a      	ldr	r2, [r1, #0]
 8011456:	43aa      	bics	r2, r5
 8011458:	6865      	ldr	r5, [r4, #4]
 801145a:	432a      	orrs	r2, r5
 801145c:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801145e:	079a      	lsls	r2, r3, #30
 8011460:	d506      	bpl.n	8011470 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011462:	250c      	movs	r5, #12
 8011464:	4960      	ldr	r1, [pc, #384]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011466:	680a      	ldr	r2, [r1, #0]
 8011468:	43aa      	bics	r2, r5
 801146a:	68a5      	ldr	r5, [r4, #8]
 801146c:	432a      	orrs	r2, r5
 801146e:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011470:	06da      	lsls	r2, r3, #27
 8011472:	d506      	bpl.n	8011482 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011474:	495c      	ldr	r1, [pc, #368]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011476:	4d5d      	ldr	r5, [pc, #372]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011478:	680a      	ldr	r2, [r1, #0]
 801147a:	402a      	ands	r2, r5
 801147c:	6965      	ldr	r5, [r4, #20]
 801147e:	432a      	orrs	r2, r5
 8011480:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8011482:	071a      	lsls	r2, r3, #28
 8011484:	d506      	bpl.n	8011494 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8011486:	4958      	ldr	r1, [pc, #352]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011488:	4d54      	ldr	r5, [pc, #336]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 801148a:	680a      	ldr	r2, [r1, #0]
 801148c:	402a      	ands	r2, r5
 801148e:	6925      	ldr	r5, [r4, #16]
 8011490:	432a      	orrs	r2, r5
 8011492:	600a      	str	r2, [r1, #0]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8011494:	075a      	lsls	r2, r3, #29
 8011496:	d506      	bpl.n	80114a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8011498:	25c0      	movs	r5, #192	@ 0xc0
 801149a:	4953      	ldr	r1, [pc, #332]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801149c:	680a      	ldr	r2, [r1, #0]
 801149e:	43aa      	bics	r2, r5
 80114a0:	68e5      	ldr	r5, [r4, #12]
 80114a2:	432a      	orrs	r2, r5
 80114a4:	600a      	str	r2, [r1, #0]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80114a6:	069a      	lsls	r2, r3, #26
 80114a8:	d506      	bpl.n	80114b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80114aa:	494f      	ldr	r1, [pc, #316]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80114ac:	4d50      	ldr	r5, [pc, #320]	@ (80115f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80114ae:	680a      	ldr	r2, [r1, #0]
 80114b0:	402a      	ands	r2, r5
 80114b2:	69a5      	ldr	r5, [r4, #24]
 80114b4:	432a      	orrs	r2, r5
 80114b6:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80114b8:	065a      	lsls	r2, r3, #25
 80114ba:	d506      	bpl.n	80114ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80114bc:	494a      	ldr	r1, [pc, #296]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80114be:	4d4d      	ldr	r5, [pc, #308]	@ (80115f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80114c0:	680a      	ldr	r2, [r1, #0]
 80114c2:	402a      	ands	r2, r5
 80114c4:	69e5      	ldr	r5, [r4, #28]
 80114c6:	432a      	orrs	r2, r5
 80114c8:	600a      	str	r2, [r1, #0]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80114ca:	061a      	lsls	r2, r3, #24
 80114cc:	d506      	bpl.n	80114dc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80114ce:	4946      	ldr	r1, [pc, #280]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80114d0:	4d49      	ldr	r5, [pc, #292]	@ (80115f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80114d2:	680a      	ldr	r2, [r1, #0]
 80114d4:	402a      	ands	r2, r5
 80114d6:	6a25      	ldr	r5, [r4, #32]
 80114d8:	432a      	orrs	r2, r5
 80114da:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80114dc:	05da      	lsls	r2, r3, #23
 80114de:	d506      	bpl.n	80114ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80114e0:	4941      	ldr	r1, [pc, #260]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80114e2:	4d46      	ldr	r5, [pc, #280]	@ (80115fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80114e4:	680a      	ldr	r2, [r1, #0]
 80114e6:	402a      	ands	r2, r5
 80114e8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80114ea:	432a      	orrs	r2, r5
 80114ec:	600a      	str	r2, [r1, #0]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80114ee:	059a      	lsls	r2, r3, #22
 80114f0:	d506      	bpl.n	8011500 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80114f2:	493d      	ldr	r1, [pc, #244]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80114f4:	4d42      	ldr	r5, [pc, #264]	@ (8011600 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80114f6:	680a      	ldr	r2, [r1, #0]
 80114f8:	402a      	ands	r2, r5
 80114fa:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80114fc:	432a      	orrs	r2, r5
 80114fe:	600a      	str	r2, [r1, #0]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011500:	045a      	lsls	r2, r3, #17
 8011502:	d510      	bpl.n	8011526 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8011504:	2280      	movs	r2, #128	@ 0x80
 8011506:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011508:	0552      	lsls	r2, r2, #21
 801150a:	4295      	cmp	r5, r2
 801150c:	d105      	bne.n	801151a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 801150e:	2280      	movs	r2, #128	@ 0x80
 8011510:	492f      	ldr	r1, [pc, #188]	@ (80115d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011512:	0252      	lsls	r2, r2, #9
 8011514:	68ce      	ldr	r6, [r1, #12]
 8011516:	4332      	orrs	r2, r6
 8011518:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801151a:	4933      	ldr	r1, [pc, #204]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801151c:	4e39      	ldr	r6, [pc, #228]	@ (8011604 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 801151e:	680a      	ldr	r2, [r1, #0]
 8011520:	4032      	ands	r2, r6
 8011522:	432a      	orrs	r2, r5
 8011524:	600a      	str	r2, [r1, #0]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011526:	04da      	lsls	r2, r3, #19
 8011528:	d510      	bpl.n	801154c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 801152a:	2280      	movs	r2, #128	@ 0x80
 801152c:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801152e:	0512      	lsls	r2, r2, #20
 8011530:	4295      	cmp	r5, r2
 8011532:	d105      	bne.n	8011540 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8011534:	2280      	movs	r2, #128	@ 0x80
 8011536:	4926      	ldr	r1, [pc, #152]	@ (80115d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011538:	0452      	lsls	r2, r2, #17
 801153a:	68ce      	ldr	r6, [r1, #12]
 801153c:	4332      	orrs	r2, r6
 801153e:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011540:	4929      	ldr	r1, [pc, #164]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011542:	4e31      	ldr	r6, [pc, #196]	@ (8011608 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8011544:	680a      	ldr	r2, [r1, #0]
 8011546:	4032      	ands	r2, r6
 8011548:	432a      	orrs	r2, r5
 801154a:	600a      	str	r2, [r1, #0]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801154c:	049a      	lsls	r2, r3, #18
 801154e:	d510      	bpl.n	8011572 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8011550:	2280      	movs	r2, #128	@ 0x80
 8011552:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8011554:	0512      	lsls	r2, r2, #20
 8011556:	4295      	cmp	r5, r2
 8011558:	d105      	bne.n	8011566 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 801155a:	2280      	movs	r2, #128	@ 0x80
 801155c:	491c      	ldr	r1, [pc, #112]	@ (80115d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 801155e:	0452      	lsls	r2, r2, #17
 8011560:	68ce      	ldr	r6, [r1, #12]
 8011562:	4332      	orrs	r2, r6
 8011564:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011566:	4920      	ldr	r1, [pc, #128]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011568:	4e27      	ldr	r6, [pc, #156]	@ (8011608 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 801156a:	680a      	ldr	r2, [r1, #0]
 801156c:	4032      	ands	r2, r6
 801156e:	432a      	orrs	r2, r5
 8011570:	600a      	str	r2, [r1, #0]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8011572:	055a      	lsls	r2, r3, #21
 8011574:	d50e      	bpl.n	8011594 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8011576:	2280      	movs	r2, #128	@ 0x80
 8011578:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801157a:	0452      	lsls	r2, r2, #17
 801157c:	4291      	cmp	r1, r2
 801157e:	d103      	bne.n	8011588 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8011580:	4d13      	ldr	r5, [pc, #76]	@ (80115d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011582:	68ea      	ldr	r2, [r5, #12]
 8011584:	430a      	orrs	r2, r1
 8011586:	60ea      	str	r2, [r5, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8011588:	4d17      	ldr	r5, [pc, #92]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801158a:	4e20      	ldr	r6, [pc, #128]	@ (801160c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 801158c:	682a      	ldr	r2, [r5, #0]
 801158e:	4032      	ands	r2, r6
 8011590:	430a      	orrs	r2, r1
 8011592:	602a      	str	r2, [r5, #0]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8011594:	051b      	lsls	r3, r3, #20
 8011596:	d510      	bpl.n	80115ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8011598:	2380      	movs	r3, #128	@ 0x80
 801159a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801159c:	049b      	lsls	r3, r3, #18
 801159e:	4299      	cmp	r1, r3
 80115a0:	d105      	bne.n	80115ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80115a2:	2380      	movs	r3, #128	@ 0x80
 80115a4:	4a0a      	ldr	r2, [pc, #40]	@ (80115d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80115a6:	045b      	lsls	r3, r3, #17
 80115a8:	68d4      	ldr	r4, [r2, #12]
 80115aa:	4323      	orrs	r3, r4
 80115ac:	60d3      	str	r3, [r2, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80115ae:	4a0e      	ldr	r2, [pc, #56]	@ (80115e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80115b0:	4c16      	ldr	r4, [pc, #88]	@ (801160c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80115b2:	6813      	ldr	r3, [r2, #0]
 80115b4:	4023      	ands	r3, r4
 80115b6:	430b      	orrs	r3, r1
 80115b8:	6013      	str	r3, [r2, #0]

  }

  return status;
}
 80115ba:	b005      	add	sp, #20
 80115bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80115be:	f7fc fe5f 	bl	800e280 <HAL_GetTick>
 80115c2:	9b01      	ldr	r3, [sp, #4]
 80115c4:	1ac0      	subs	r0, r0, r3
 80115c6:	4b12      	ldr	r3, [pc, #72]	@ (8011610 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80115c8:	4298      	cmp	r0, r3
 80115ca:	d800      	bhi.n	80115ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
 80115cc:	e723      	b.n	8011416 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80115ce:	e734      	b.n	801143a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80115d0:	40021000 	.word	0x40021000
 80115d4:	40007000 	.word	0x40007000
 80115d8:	40021090 	.word	0x40021090
 80115dc:	fffffcff 	.word	0xfffffcff
 80115e0:	fffeffff 	.word	0xfffeffff
 80115e4:	efffffff 	.word	0xefffffff
 80115e8:	40021088 	.word	0x40021088
 80115ec:	fffff3ff 	.word	0xfffff3ff
 80115f0:	ffffcfff 	.word	0xffffcfff
 80115f4:	fffcffff 	.word	0xfffcffff
 80115f8:	fff3ffff 	.word	0xfff3ffff
 80115fc:	ffcfffff 	.word	0xffcfffff
 8011600:	ff3fffff 	.word	0xff3fffff
 8011604:	cfffffff 	.word	0xcfffffff
 8011608:	f3ffffff 	.word	0xf3ffffff
 801160c:	feffffff 	.word	0xfeffffff
 8011610:	00001388 	.word	0x00001388

08011614 <HAL_RCCEx_GetPLLClockFreq>:
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011614:	2303      	movs	r3, #3
{
 8011616:	b5e0      	push	{r5, r6, r7, lr}
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011618:	4d29      	ldr	r5, [pc, #164]	@ (80116c0 <HAL_RCCEx_GetPLLClockFreq+0xac>)
{
 801161a:	0006      	movs	r6, r0
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801161c:	68ef      	ldr	r7, [r5, #12]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801161e:	68ea      	ldr	r2, [r5, #12]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011620:	68e9      	ldr	r1, [r5, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011622:	6828      	ldr	r0, [r5, #0]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011624:	0649      	lsls	r1, r1, #25
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011626:	047f      	lsls	r7, r7, #17
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011628:	0f49      	lsrs	r1, r1, #29
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801162a:	401a      	ands	r2, r3
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801162c:	0e7f      	lsrs	r7, r7, #25
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 801162e:	3101      	adds	r1, #1
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011630:	330c      	adds	r3, #12
 8011632:	0700      	lsls	r0, r0, #28
 8011634:	d508      	bpl.n	8011648 <HAL_RCCEx_GetPLLClockFreq+0x34>
 8011636:	6828      	ldr	r0, [r5, #0]
 8011638:	0900      	lsrs	r0, r0, #4
 801163a:	4003      	ands	r3, r0
  if (msirange > 11U)
  {
    msirange = 11U;
  }
  switch (pllsource)
 801163c:	2a02      	cmp	r2, #2
 801163e:	d007      	beq.n	8011650 <HAL_RCCEx_GetPLLClockFreq+0x3c>
 8011640:	2a03      	cmp	r2, #3
 8011642:	d136      	bne.n	80116b2 <HAL_RCCEx_GetPLLClockFreq+0x9e>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8011644:	481f      	ldr	r0, [pc, #124]	@ (80116c4 <HAL_RCCEx_GetPLLClockFreq+0xb0>)
 8011646:	e004      	b.n	8011652 <HAL_RCCEx_GetPLLClockFreq+0x3e>
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011648:	481f      	ldr	r0, [pc, #124]	@ (80116c8 <HAL_RCCEx_GetPLLClockFreq+0xb4>)
 801164a:	6800      	ldr	r0, [r0, #0]
 801164c:	0a00      	lsrs	r0, r0, #8
 801164e:	e7f4      	b.n	801163a <HAL_RCCEx_GetPLLClockFreq+0x26>
      pllvco = (HSI_VALUE / pllm) * plln;
 8011650:	481e      	ldr	r0, [pc, #120]	@ (80116cc <HAL_RCCEx_GetPLLClockFreq+0xb8>)
      break;

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8011652:	f7ee fd89 	bl	8000168 <__udivsi3>
      break;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8011656:	68ea      	ldr	r2, [r5, #12]
 8011658:	2380      	movs	r3, #128	@ 0x80
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801165a:	4347      	muls	r7, r0
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 801165c:	0010      	movs	r0, r2
 801165e:	025b      	lsls	r3, r3, #9
 8011660:	4018      	ands	r0, r3
 8011662:	421a      	tst	r2, r3
 8011664:	d006      	beq.n	8011674 <HAL_RCCEx_GetPLLClockFreq+0x60>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8011666:	68e9      	ldr	r1, [r5, #12]
 8011668:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 801166a:	0289      	lsls	r1, r1, #10
 801166c:	0ec9      	lsrs	r1, r1, #27
 801166e:	3101      	adds	r1, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8011670:	f7ee fd7a 	bl	8000168 <__udivsi3>
 8011674:	6030      	str	r0, [r6, #0]
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8011676:	68ea      	ldr	r2, [r5, #12]
 8011678:	2380      	movs	r3, #128	@ 0x80
 801167a:	0010      	movs	r0, r2
 801167c:	045b      	lsls	r3, r3, #17
 801167e:	4018      	ands	r0, r3
 8011680:	421a      	tst	r2, r3
 8011682:	d006      	beq.n	8011692 <HAL_RCCEx_GetPLLClockFreq+0x7e>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8011684:	68e9      	ldr	r1, [r5, #12]
 8011686:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8011688:	0109      	lsls	r1, r1, #4
 801168a:	0f49      	lsrs	r1, r1, #29
 801168c:	3101      	adds	r1, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 801168e:	f7ee fd6b 	bl	8000168 <__udivsi3>
 8011692:	6070      	str	r0, [r6, #4]
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8011694:	68ea      	ldr	r2, [r5, #12]
 8011696:	2380      	movs	r3, #128	@ 0x80
 8011698:	0010      	movs	r0, r2
 801169a:	055b      	lsls	r3, r3, #21
 801169c:	4018      	ands	r0, r3
 801169e:	421a      	tst	r2, r3
 80116a0:	d005      	beq.n	80116ae <HAL_RCCEx_GetPLLClockFreq+0x9a>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80116a2:	68e9      	ldr	r1, [r5, #12]
 80116a4:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80116a6:	0f49      	lsrs	r1, r1, #29
 80116a8:	3101      	adds	r1, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80116aa:	f7ee fd5d 	bl	8000168 <__udivsi3>
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80116ae:	60b0      	str	r0, [r6, #8]
 80116b0:	bde0      	pop	{r5, r6, r7, pc}
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80116b2:	4a07      	ldr	r2, [pc, #28]	@ (80116d0 <HAL_RCCEx_GetPLLClockFreq+0xbc>)
  if (msirange > 11U)
 80116b4:	2b0b      	cmp	r3, #11
 80116b6:	d900      	bls.n	80116ba <HAL_RCCEx_GetPLLClockFreq+0xa6>
 80116b8:	230b      	movs	r3, #11
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	5898      	ldr	r0, [r3, r2]
 80116be:	e7c8      	b.n	8011652 <HAL_RCCEx_GetPLLClockFreq+0x3e>
 80116c0:	40021000 	.word	0x40021000
 80116c4:	003d0900 	.word	0x003d0900
 80116c8:	40021094 	.word	0x40021094
 80116cc:	00f42400 	.word	0x00f42400
 80116d0:	08020408 	.word	0x08020408

080116d4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80116d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80116d6:	2380      	movs	r3, #128	@ 0x80
 80116d8:	021b      	lsls	r3, r3, #8
 80116da:	4298      	cmp	r0, r3
 80116dc:	d11d      	bne.n	801171a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80116de:	21c0      	movs	r1, #192	@ 0xc0
    switch (srcclk)
 80116e0:	2080      	movs	r0, #128	@ 0x80
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80116e2:	4a9d      	ldr	r2, [pc, #628]	@ (8011958 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80116e4:	0089      	lsls	r1, r1, #2
 80116e6:	6813      	ldr	r3, [r2, #0]
    switch (srcclk)
 80116e8:	0080      	lsls	r0, r0, #2
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80116ea:	400b      	ands	r3, r1
    switch (srcclk)
 80116ec:	4283      	cmp	r3, r0
 80116ee:	d100      	bne.n	80116f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80116f0:	e0fc      	b.n	80118ec <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80116f2:	428b      	cmp	r3, r1
 80116f4:	d00a      	beq.n	801170c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80116f6:	2180      	movs	r1, #128	@ 0x80
 80116f8:	2000      	movs	r0, #0
 80116fa:	0049      	lsls	r1, r1, #1
 80116fc:	428b      	cmp	r3, r1
 80116fe:	d000      	beq.n	8011702 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8011700:	e07d      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011702:	6810      	ldr	r0, [r2, #0]
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011704:	0780      	lsls	r0, r0, #30
 8011706:	0fc0      	lsrs	r0, r0, #31
 8011708:	03c0      	lsls	r0, r0, #15
 801170a:	e078      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801170c:	4b93      	ldr	r3, [pc, #588]	@ (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801170e:	6818      	ldr	r0, [r3, #0]
 8011710:	4b93      	ldr	r3, [pc, #588]	@ (8011960 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8011712:	0380      	lsls	r0, r0, #14
 8011714:	17c0      	asrs	r0, r0, #31
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011716:	4018      	ands	r0, r3
 8011718:	e071      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    switch (PeriphClk)
 801171a:	2380      	movs	r3, #128	@ 0x80
 801171c:	005b      	lsls	r3, r3, #1
 801171e:	4298      	cmp	r0, r3
 8011720:	d100      	bne.n	8011724 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8011722:	e0f2      	b.n	801190a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8011724:	d819      	bhi.n	801175a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8011726:	2810      	cmp	r0, #16
 8011728:	d100      	bne.n	801172c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 801172a:	e080      	b.n	801182e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 801172c:	d80a      	bhi.n	8011744 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 801172e:	1e43      	subs	r3, r0, #1
 8011730:	2000      	movs	r0, #0
 8011732:	2b07      	cmp	r3, #7
 8011734:	d863      	bhi.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011736:	0018      	movs	r0, r3
 8011738:	f7ee fcf8 	bl	800012c <__gnu_thumb1_case_uqi>
 801173c:	8e0d6955 	.word	0x8e0d6955
 8011740:	860d0d0d 	.word	0x860d0d0d
 8011744:	2840      	cmp	r0, #64	@ 0x40
 8011746:	d100      	bne.n	801174a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8011748:	e0b6      	b.n	80118b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 801174a:	2880      	cmp	r0, #128	@ 0x80
 801174c:	d100      	bne.n	8011750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 801174e:	e0c0      	b.n	80118d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8011750:	2820      	cmp	r0, #32
 8011752:	d100      	bne.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8011754:	e09f      	b.n	8011896 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8011756:	2000      	movs	r0, #0
 8011758:	e051      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 801175a:	2380      	movs	r3, #128	@ 0x80
 801175c:	015b      	lsls	r3, r3, #5
 801175e:	4298      	cmp	r0, r3
 8011760:	d100      	bne.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8011762:	e10b      	b.n	801197c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8011764:	d81a      	bhi.n	801179c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8011766:	2180      	movs	r1, #128	@ 0x80
 8011768:	00c9      	lsls	r1, r1, #3
 801176a:	4288      	cmp	r0, r1
 801176c:	d100      	bne.n	8011770 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 801176e:	e0db      	b.n	8011928 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8011770:	2380      	movs	r3, #128	@ 0x80
 8011772:	011b      	lsls	r3, r3, #4
 8011774:	4298      	cmp	r0, r3
 8011776:	d100      	bne.n	801177a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8011778:	e0e5      	b.n	8011946 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801177a:	2380      	movs	r3, #128	@ 0x80
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4298      	cmp	r0, r3
 8011780:	d1e9      	bne.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8011782:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011784:	2080      	movs	r0, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8011786:	4b77      	ldr	r3, [pc, #476]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011788:	0412      	lsls	r2, r2, #16
 801178a:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 801178c:	0400      	lsls	r0, r0, #16
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 801178e:	4013      	ands	r3, r2
        switch (srcclk)
 8011790:	4283      	cmp	r3, r0
 8011792:	d100      	bne.n	8011796 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8011794:	e0c1      	b.n	801191a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8011796:	d800      	bhi.n	801179a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8011798:	e0a5      	b.n	80118e6 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 801179a:	e052      	b.n	8011842 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    switch (PeriphClk)
 801179c:	2380      	movs	r3, #128	@ 0x80
 801179e:	01db      	lsls	r3, r3, #7
 80117a0:	4298      	cmp	r0, r3
 80117a2:	d063      	beq.n	801186c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80117a4:	d817      	bhi.n	80117d6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 80117a6:	2380      	movs	r3, #128	@ 0x80
 80117a8:	019b      	lsls	r3, r3, #6
 80117aa:	4298      	cmp	r0, r3
 80117ac:	d1d3      	bne.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80117ae:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 80117b0:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80117b2:	4b6c      	ldr	r3, [pc, #432]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80117b4:	0512      	lsls	r2, r2, #20
 80117b6:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 80117b8:	0509      	lsls	r1, r1, #20
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80117ba:	4013      	ands	r3, r2
        switch (srcclk)
 80117bc:	428b      	cmp	r3, r1
 80117be:	d100      	bne.n	80117c2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80117c0:	e0c5      	b.n	801194e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d100      	bne.n	80117c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80117c6:	e101      	b.n	80119cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 80117c8:	2280      	movs	r2, #128	@ 0x80
 80117ca:	2000      	movs	r0, #0
 80117cc:	04d2      	lsls	r2, r2, #19
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d115      	bne.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80117d2:	4a62      	ldr	r2, [pc, #392]	@ (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80117d4:	e0e4      	b.n	80119a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
    switch (PeriphClk)
 80117d6:	4b64      	ldr	r3, [pc, #400]	@ (8011968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117d8:	18c0      	adds	r0, r0, r3
 80117da:	4b64      	ldr	r3, [pc, #400]	@ (801196c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80117dc:	4218      	tst	r0, r3
 80117de:	d1ba      	bne.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
              frequency = HAL_RCC_GetPCLK1Freq();
 80117e0:	f7ff fdc6 	bl	8011370 <HAL_RCC_GetPCLK1Freq>
 80117e4:	e00b      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80117e6:	2203      	movs	r2, #3
 80117e8:	4b5e      	ldr	r3, [pc, #376]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4013      	ands	r3, r2
        switch (srcclk)
 80117ee:	2b02      	cmp	r3, #2
 80117f0:	d007      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d018      	beq.n	8011828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d1f2      	bne.n	80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
            frequency = HAL_RCC_GetSysClockFreq();
 80117fa:	f7ff fa2f 	bl	8010c5c <HAL_RCC_GetSysClockFreq>
}
 80117fe:	b005      	add	sp, #20
 8011800:	bd00      	pop	{pc}
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011802:	4b56      	ldr	r3, [pc, #344]	@ (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011804:	6818      	ldr	r0, [r3, #0]
 8011806:	0540      	lsls	r0, r0, #21
 8011808:	17c0      	asrs	r0, r0, #31
 801180a:	4b59      	ldr	r3, [pc, #356]	@ (8011970 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801180c:	e783      	b.n	8011716 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 801180e:	220c      	movs	r2, #12
 8011810:	4b54      	ldr	r3, [pc, #336]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4013      	ands	r3, r2
        switch (srcclk)
 8011816:	2b08      	cmp	r3, #8
 8011818:	d0f3      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 801181a:	d802      	bhi.n	8011822 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        switch (srcclk)
 801181c:	2b00      	cmp	r3, #0
 801181e:	d1ec      	bne.n	80117fa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011820:	e7de      	b.n	80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        switch (srcclk)
 8011822:	2b0c      	cmp	r3, #12
 8011824:	d000      	beq.n	8011828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011826:	e796      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011828:	4b4b      	ldr	r3, [pc, #300]	@ (8011958 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 801182a:	6818      	ldr	r0, [r3, #0]
 801182c:	e76a      	b.n	8011704 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801182e:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011830:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011832:	4b4c      	ldr	r3, [pc, #304]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011834:	0112      	lsls	r2, r2, #4
 8011836:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011838:	0109      	lsls	r1, r1, #4
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801183a:	4013      	ands	r3, r2
        switch (srcclk)
 801183c:	428b      	cmp	r3, r1
 801183e:	d0e0      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011840:	d9ec      	bls.n	801181c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
        switch (srcclk)
 8011842:	4293      	cmp	r3, r2
 8011844:	d0f0      	beq.n	8011828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011846:	e786      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8011848:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 801184a:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 801184c:	4b45      	ldr	r3, [pc, #276]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801184e:	0092      	lsls	r2, r2, #2
 8011850:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011852:	0089      	lsls	r1, r1, #2
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8011854:	4013      	ands	r3, r2
        switch (srcclk)
 8011856:	e7f1      	b.n	801183c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8011858:	22c0      	movs	r2, #192	@ 0xc0
 801185a:	4b42      	ldr	r3, [pc, #264]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4013      	ands	r3, r2
        switch (srcclk)
 8011860:	2b80      	cmp	r3, #128	@ 0x80
 8011862:	d0ce      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011864:	d9da      	bls.n	801181c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8011866:	2bc0      	cmp	r3, #192	@ 0xc0
 8011868:	d0de      	beq.n	8011828 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 801186a:	e774      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801186c:	22c0      	movs	r2, #192	@ 0xc0
 801186e:	4b3d      	ldr	r3, [pc, #244]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011870:	0592      	lsls	r2, r2, #22
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4013      	ands	r3, r2
        switch (srcclk)
 8011876:	2280      	movs	r2, #128	@ 0x80
 8011878:	0552      	lsls	r2, r2, #21
 801187a:	4293      	cmp	r3, r2
 801187c:	d006      	beq.n	801188c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 801187e:	2280      	movs	r2, #128	@ 0x80
 8011880:	0592      	lsls	r2, r2, #22
 8011882:	4293      	cmp	r3, r2
 8011884:	d0bd      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011886:	2b00      	cmp	r3, #0
 8011888:	d0b7      	beq.n	80117fa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 801188a:	e764      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801188c:	a801      	add	r0, sp, #4
 801188e:	f7ff fec1 	bl	8011614 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8011892:	9801      	ldr	r0, [sp, #4]
            break;
 8011894:	e7b3      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8011896:	22c0      	movs	r2, #192	@ 0xc0
 8011898:	4b32      	ldr	r3, [pc, #200]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801189a:	0192      	lsls	r2, r2, #6
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4013      	ands	r3, r2
        switch (srcclk)
 80118a0:	2280      	movs	r2, #128	@ 0x80
 80118a2:	0152      	lsls	r2, r2, #5
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d0a8      	beq.n	80117fa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80118a8:	2280      	movs	r2, #128	@ 0x80
 80118aa:	0192      	lsls	r2, r2, #6
        switch (srcclk)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d0a8      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d100      	bne.n	80118b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80118b4:	e794      	b.n	80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80118b6:	e74e      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80118b8:	22c0      	movs	r2, #192	@ 0xc0
 80118ba:	4b2a      	ldr	r3, [pc, #168]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80118bc:	0292      	lsls	r2, r2, #10
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4013      	ands	r3, r2
        switch (srcclk)
 80118c2:	2280      	movs	r2, #128	@ 0x80
 80118c4:	0252      	lsls	r2, r2, #9
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d100      	bne.n	80118cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 80118ca:	e796      	b.n	80117fa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80118cc:	2280      	movs	r2, #128	@ 0x80
 80118ce:	0292      	lsls	r2, r2, #10
 80118d0:	e7ec      	b.n	80118ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80118d2:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 80118d4:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80118d6:	4b23      	ldr	r3, [pc, #140]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80118d8:	0312      	lsls	r2, r2, #12
 80118da:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 80118dc:	0309      	lsls	r1, r1, #12
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80118de:	4013      	ands	r3, r2
        switch (srcclk)
 80118e0:	428b      	cmp	r3, r1
 80118e2:	d08e      	beq.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80118e4:	d8ad      	bhi.n	8011842 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        switch (srcclk)
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d100      	bne.n	80118ec <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80118ea:	e779      	b.n	80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80118ec:	4b21      	ldr	r3, [pc, #132]	@ (8011974 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80118ee:	2000      	movs	r0, #0
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	0792      	lsls	r2, r2, #30
 80118f4:	d400      	bmi.n	80118f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80118f6:	e782      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80118f8:	6818      	ldr	r0, [r3, #0]
            frequency = LSI_VALUE;
 80118fa:	4b1f      	ldr	r3, [pc, #124]	@ (8011978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80118fc:	0740      	lsls	r0, r0, #29
            frequency = LSI_VALUE;
 80118fe:	17c0      	asrs	r0, r0, #31
 8011900:	4018      	ands	r0, r3
 8011902:	23fa      	movs	r3, #250	@ 0xfa
 8011904:	01db      	lsls	r3, r3, #7
 8011906:	18c0      	adds	r0, r0, r3
 8011908:	e779      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801190a:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 801190c:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801190e:	4b15      	ldr	r3, [pc, #84]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011910:	0392      	lsls	r2, r2, #14
 8011912:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011914:	0389      	lsls	r1, r1, #14
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011916:	4013      	ands	r3, r2
        switch (srcclk)
 8011918:	e7e2      	b.n	80118e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801191a:	4b10      	ldr	r3, [pc, #64]	@ (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801191c:	6818      	ldr	r0, [r3, #0]
 801191e:	4008      	ands	r0, r1
 8011920:	1e43      	subs	r3, r0, #1
 8011922:	4198      	sbcs	r0, r3
 8011924:	4240      	negs	r0, r0
 8011926:	e770      	b.n	801180a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8011928:	4b0e      	ldr	r3, [pc, #56]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801192a:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 801192c:	01db      	lsls	r3, r3, #7
 801192e:	d40e      	bmi.n	801194e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8011930:	4b0a      	ldr	r3, [pc, #40]	@ (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011932:	689a      	ldr	r2, [r3, #8]
 8011934:	23e0      	movs	r3, #224	@ 0xe0
 8011936:	01db      	lsls	r3, r3, #7
 8011938:	421a      	tst	r2, r3
 801193a:	d100      	bne.n	801193e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801193c:	e750      	b.n	80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 801193e:	f7ff fd17 	bl	8011370 <HAL_RCC_GetPCLK1Freq>
 8011942:	0040      	lsls	r0, r0, #1
 8011944:	e75b      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8011946:	4b07      	ldr	r3, [pc, #28]	@ (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011948:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 801194a:	019b      	lsls	r3, r3, #6
 801194c:	d5f0      	bpl.n	8011930 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801194e:	a801      	add	r0, sp, #4
 8011950:	f7ff fe60 	bl	8011614 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8011954:	9802      	ldr	r0, [sp, #8]
            break;
 8011956:	e752      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011958:	40021090 	.word	0x40021090
 801195c:	40021000 	.word	0x40021000
 8011960:	0001e848 	.word	0x0001e848
 8011964:	40021088 	.word	0x40021088
 8011968:	ffff0000 	.word	0xffff0000
 801196c:	fffeffff 	.word	0xfffeffff
 8011970:	00f42400 	.word	0x00f42400
 8011974:	40021094 	.word	0x40021094
 8011978:	ffff83fa 	.word	0xffff83fa
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 801197c:	21c0      	movs	r1, #192	@ 0xc0
        switch (srcclk)
 801197e:	2080      	movs	r0, #128	@ 0x80
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8011980:	4b13      	ldr	r3, [pc, #76]	@ (80119d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8011982:	0509      	lsls	r1, r1, #20
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a13      	ldr	r2, [pc, #76]	@ (80119d4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8011988:	400b      	ands	r3, r1
        switch (srcclk)
 801198a:	0500      	lsls	r0, r0, #20
 801198c:	4283      	cmp	r3, r0
 801198e:	d0de      	beq.n	801194e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8011990:	428b      	cmp	r3, r1
 8011992:	d01b      	beq.n	80119cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 8011994:	2180      	movs	r1, #128	@ 0x80
 8011996:	2000      	movs	r0, #0
 8011998:	04c9      	lsls	r1, r1, #19
 801199a:	428b      	cmp	r3, r1
 801199c:	d000      	beq.n	80119a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 801199e:	e72e      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80119a0:	6813      	ldr	r3, [r2, #0]
 80119a2:	079b      	lsls	r3, r3, #30
 80119a4:	d400      	bmi.n	80119a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80119a6:	e72a      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80119a8:	6811      	ldr	r1, [r2, #0]
 80119aa:	230f      	movs	r3, #15
 80119ac:	0709      	lsls	r1, r1, #28
 80119ae:	d509      	bpl.n	80119c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80119b0:	6812      	ldr	r2, [r2, #0]
 80119b2:	0912      	lsrs	r2, r2, #4
 80119b4:	4013      	ands	r3, r2
              frequency = MSIRangeTable[msirange];
 80119b6:	4a08      	ldr	r2, [pc, #32]	@ (80119d8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
              if (msirange > 11U)
 80119b8:	2b0b      	cmp	r3, #11
 80119ba:	d900      	bls.n	80119be <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80119bc:	230b      	movs	r3, #11
              frequency = MSIRangeTable[msirange];
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	5898      	ldr	r0, [r3, r2]
 80119c2:	e71c      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80119c4:	4a05      	ldr	r2, [pc, #20]	@ (80119dc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80119c6:	6812      	ldr	r2, [r2, #0]
 80119c8:	0a12      	lsrs	r2, r2, #8
 80119ca:	e7f3      	b.n	80119b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
            frequency = HSI48_VALUE;
 80119cc:	4804      	ldr	r0, [pc, #16]	@ (80119e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80119ce:	e716      	b.n	80117fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80119d0:	40021088 	.word	0x40021088
 80119d4:	40021000 	.word	0x40021000
 80119d8:	08020408 	.word	0x08020408
 80119dc:	40021094 	.word	0x40021094
 80119e0:	02dc6c00 	.word	0x02dc6c00

080119e4 <HAL_RCCEx_CRSConfig>:
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80119e4:	2280      	movs	r2, #128	@ 0x80
 80119e6:	4b10      	ldr	r3, [pc, #64]	@ (8011a28 <HAL_RCCEx_CRSConfig+0x44>)
 80119e8:	0252      	lsls	r2, r2, #9
 80119ea:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80119ec:	430a      	orrs	r2, r1
 80119ee:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80119f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119f2:	490e      	ldr	r1, [pc, #56]	@ (8011a2c <HAL_RCCEx_CRSConfig+0x48>)
 80119f4:	400a      	ands	r2, r1
 80119f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80119f8:	6842      	ldr	r2, [r0, #4]
 80119fa:	6803      	ldr	r3, [r0, #0]
 80119fc:	4313      	orrs	r3, r2
 80119fe:	6882      	ldr	r2, [r0, #8]
 8011a00:	4313      	orrs	r3, r2
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8011a02:	68c2      	ldr	r2, [r0, #12]
 8011a04:	4313      	orrs	r3, r2
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8011a06:	6902      	ldr	r2, [r0, #16]
 8011a08:	0412      	lsls	r2, r2, #16
 8011a0a:	431a      	orrs	r2, r3
  WRITE_REG(CRS->CFGR, value);
 8011a0c:	4b08      	ldr	r3, [pc, #32]	@ (8011a30 <HAL_RCCEx_CRSConfig+0x4c>)
 8011a0e:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8011a10:	6819      	ldr	r1, [r3, #0]
 8011a12:	6942      	ldr	r2, [r0, #20]
 8011a14:	4807      	ldr	r0, [pc, #28]	@ (8011a34 <HAL_RCCEx_CRSConfig+0x50>)
 8011a16:	0212      	lsls	r2, r2, #8
 8011a18:	4001      	ands	r1, r0
 8011a1a:	430a      	orrs	r2, r1
 8011a1c:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8011a1e:	2260      	movs	r2, #96	@ 0x60
 8011a20:	6819      	ldr	r1, [r3, #0]
 8011a22:	430a      	orrs	r2, r1
 8011a24:	601a      	str	r2, [r3, #0]
}
 8011a26:	4770      	bx	lr
 8011a28:	40021000 	.word	0x40021000
 8011a2c:	fffeffff 	.word	0xfffeffff
 8011a30:	40006c00 	.word	0x40006c00
 8011a34:	ffffc0ff 	.word	0xffffc0ff

08011a38 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8011a38:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011a3a:	0004      	movs	r4, r0
 8011a3c:	2202      	movs	r2, #2
 8011a3e:	342c      	adds	r4, #44	@ 0x2c
 8011a40:	7825      	ldrb	r5, [r4, #0]
{
 8011a42:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8011a44:	0010      	movs	r0, r2
 8011a46:	2d01      	cmp	r5, #1
 8011a48:	d014      	beq.n	8011a74 <HAL_RTC_DeactivateAlarm+0x3c>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011a4a:	332d      	adds	r3, #45	@ 0x2d
  __HAL_LOCK(hrtc);
 8011a4c:	3801      	subs	r0, #1
 8011a4e:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011a50:	701a      	strb	r2, [r3, #0]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8011a52:	32fe      	adds	r2, #254	@ 0xfe
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011a54:	0018      	movs	r0, r3
 8011a56:	4b0c      	ldr	r3, [pc, #48]	@ (8011a88 <HAL_RTC_DeactivateAlarm+0x50>)
  if (Alarm == RTC_ALARM_A)
 8011a58:	4291      	cmp	r1, r2
 8011a5a:	d10c      	bne.n	8011a76 <HAL_RTC_DeactivateAlarm+0x3e>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8011a5c:	699a      	ldr	r2, [r3, #24]
 8011a5e:	490b      	ldr	r1, [pc, #44]	@ (8011a8c <HAL_RTC_DeactivateAlarm+0x54>)
 8011a60:	400a      	ands	r2, r1
 8011a62:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8011a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a66:	0052      	lsls	r2, r2, #1
 8011a68:	0852      	lsrs	r2, r2, #1
 8011a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
  }

  hrtc->State = HAL_RTC_STATE_READY;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	7003      	strb	r3, [r0, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011a70:	2000      	movs	r0, #0
 8011a72:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8011a74:	bd30      	pop	{r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011a76:	699a      	ldr	r2, [r3, #24]
 8011a78:	4905      	ldr	r1, [pc, #20]	@ (8011a90 <HAL_RTC_DeactivateAlarm+0x58>)
 8011a7a:	400a      	ands	r2, r1
 8011a7c:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8011a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011a80:	0052      	lsls	r2, r2, #1
 8011a82:	0852      	lsrs	r2, r2, #1
 8011a84:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011a86:	e7f1      	b.n	8011a6c <HAL_RTC_DeactivateAlarm+0x34>
 8011a88:	40002800 	.word	0x40002800
 8011a8c:	ffffeeff 	.word	0xffffeeff
 8011a90:	ffffddff 	.word	0xffffddff

08011a94 <HAL_RTC_AlarmIRQHandler>:
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8011a94:	2301      	movs	r3, #1
{
 8011a96:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = READ_REG(RTC->MISR);
 8011a98:	4d09      	ldr	r5, [pc, #36]	@ (8011ac0 <HAL_RTC_AlarmIRQHandler+0x2c>)
{
 8011a9a:	0004      	movs	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR);
 8011a9c:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8011a9e:	421e      	tst	r6, r3
 8011aa0:	d002      	beq.n	8011aa8 <HAL_RTC_AlarmIRQHandler+0x14>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8011aa2:	65eb      	str	r3, [r5, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8011aa4:	f7f6 fd98 	bl	80085d8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	421e      	tst	r6, r3
 8011aac:	d003      	beq.n	8011ab6 <HAL_RTC_AlarmIRQHandler+0x22>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8011aae:	0020      	movs	r0, r4
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8011ab0:	65eb      	str	r3, [r5, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8011ab2:	f000 fae1 	bl	8012078 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	342d      	adds	r4, #45	@ 0x2d
 8011aba:	7023      	strb	r3, [r4, #0]
}
 8011abc:	bd70      	pop	{r4, r5, r6, pc}
 8011abe:	46c0      	nop			@ (mov r8, r8)
 8011ac0:	40002800 	.word	0x40002800

08011ac4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8011ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011ac6:	2620      	movs	r6, #32
 8011ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8011af4 <HAL_RTC_WaitForSynchro+0x30>)
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011aca:	27fa      	movs	r7, #250	@ 0xfa
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011acc:	68e3      	ldr	r3, [r4, #12]
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ace:	00bf      	lsls	r7, r7, #2
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011ad0:	43b3      	bics	r3, r6
 8011ad2:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 8011ad4:	f7fc fbd4 	bl	800e280 <HAL_GetTick>
 8011ad8:	0005      	movs	r5, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011ada:	68e3      	ldr	r3, [r4, #12]
 8011adc:	4233      	tst	r3, r6
 8011ade:	d001      	beq.n	8011ae4 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8011ae0:	2000      	movs	r0, #0
}
 8011ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ae4:	f7fc fbcc 	bl	800e280 <HAL_GetTick>
 8011ae8:	1b40      	subs	r0, r0, r5
 8011aea:	42b8      	cmp	r0, r7
 8011aec:	d9f5      	bls.n	8011ada <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8011aee:	2003      	movs	r0, #3
 8011af0:	e7f7      	b.n	8011ae2 <HAL_RTC_WaitForSynchro+0x1e>
 8011af2:	46c0      	nop			@ (mov r8, r8)
 8011af4:	40002800 	.word	0x40002800

08011af8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8011af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011afa:	2640      	movs	r6, #64	@ 0x40
 8011afc:	4c0c      	ldr	r4, [pc, #48]	@ (8011b30 <RTC_EnterInitMode+0x38>)
 8011afe:	68e3      	ldr	r3, [r4, #12]
 8011b00:	4233      	tst	r3, r6
 8011b02:	d001      	beq.n	8011b08 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8011b04:	2000      	movs	r0, #0
}
 8011b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011b08:	2380      	movs	r3, #128	@ 0x80
 8011b0a:	68e2      	ldr	r2, [r4, #12]
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011b0c:	27fa      	movs	r7, #250	@ 0xfa
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	60e3      	str	r3, [r4, #12]
    tickstart = HAL_GetTick();
 8011b12:	f7fc fbb5 	bl	800e280 <HAL_GetTick>
 8011b16:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011b18:	00bf      	lsls	r7, r7, #2
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011b1a:	68e3      	ldr	r3, [r4, #12]
 8011b1c:	4233      	tst	r3, r6
 8011b1e:	d1f1      	bne.n	8011b04 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011b20:	f7fc fbae 	bl	800e280 <HAL_GetTick>
 8011b24:	1b40      	subs	r0, r0, r5
 8011b26:	42b8      	cmp	r0, r7
 8011b28:	d9f7      	bls.n	8011b1a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011b2a:	2003      	movs	r0, #3
 8011b2c:	e7eb      	b.n	8011b06 <RTC_EnterInitMode+0xe>
 8011b2e:	46c0      	nop			@ (mov r8, r8)
 8011b30:	40002800 	.word	0x40002800

08011b34 <HAL_RTC_Init>:
{
 8011b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b36:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 8011b38:	d01a      	beq.n	8011b70 <HAL_RTC_Init+0x3c>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011b3a:	0007      	movs	r7, r0
 8011b3c:	372d      	adds	r7, #45	@ 0x2d
 8011b3e:	783b      	ldrb	r3, [r7, #0]
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d104      	bne.n	8011b50 <HAL_RTC_Init+0x1c>
      hrtc->Lock = HAL_UNLOCKED;
 8011b46:	0003      	movs	r3, r0
 8011b48:	332c      	adds	r3, #44	@ 0x2c
 8011b4a:	701a      	strb	r2, [r3, #0]
      HAL_RTC_MspInit(hrtc);
 8011b4c:	f7f8 fce6 	bl	800a51c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011b50:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b52:	4d23      	ldr	r5, [pc, #140]	@ (8011be0 <HAL_RTC_Init+0xac>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011b54:	703b      	strb	r3, [r7, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b56:	33c8      	adds	r3, #200	@ 0xc8
 8011b58:	626b      	str	r3, [r5, #36]	@ 0x24
 8011b5a:	3b77      	subs	r3, #119	@ 0x77
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b5c:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b5e:	626b      	str	r3, [r5, #36]	@ 0x24
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b60:	f7ff ffca 	bl	8011af8 <RTC_EnterInitMode>
 8011b64:	1e06      	subs	r6, r0, #0
 8011b66:	d006      	beq.n	8011b76 <HAL_RTC_Init+0x42>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b68:	23ff      	movs	r3, #255	@ 0xff
 8011b6a:	626b      	str	r3, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8011b6c:	3bfb      	subs	r3, #251	@ 0xfb
 8011b6e:	703b      	strb	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011b70:	2601      	movs	r6, #1
}
 8011b72:	0030      	movs	r0, r6
 8011b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8011b76:	69ab      	ldr	r3, [r5, #24]
 8011b78:	4a1a      	ldr	r2, [pc, #104]	@ (8011be4 <HAL_RTC_Init+0xb0>)
 8011b7a:	4013      	ands	r3, r2
 8011b7c:	61ab      	str	r3, [r5, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8011b7e:	6921      	ldr	r1, [r4, #16]
 8011b80:	6863      	ldr	r3, [r4, #4]
 8011b82:	69aa      	ldr	r2, [r5, #24]
 8011b84:	430b      	orrs	r3, r1
 8011b86:	4313      	orrs	r3, r2
 8011b88:	69a2      	ldr	r2, [r4, #24]
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	61ab      	str	r3, [r5, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8011b8e:	68a3      	ldr	r3, [r4, #8]
 8011b90:	68e2      	ldr	r2, [r4, #12]
 8011b92:	041b      	lsls	r3, r3, #16
 8011b94:	4313      	orrs	r3, r2
 8011b96:	612b      	str	r3, [r5, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011b98:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011b9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011b9c:	68ea      	ldr	r2, [r5, #12]
 8011b9e:	430b      	orrs	r3, r1
 8011ba0:	4911      	ldr	r1, [pc, #68]	@ (8011be8 <HAL_RTC_Init+0xb4>)
 8011ba2:	400a      	ands	r2, r1
 8011ba4:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011ba6:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011ba8:	60eb      	str	r3, [r5, #12]
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011baa:	68eb      	ldr	r3, [r5, #12]
 8011bac:	4393      	bics	r3, r2
 8011bae:	60eb      	str	r3, [r5, #12]
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011bb0:	69ab      	ldr	r3, [r5, #24]
 8011bb2:	069b      	lsls	r3, r3, #26
 8011bb4:	d404      	bmi.n	8011bc0 <HAL_RTC_Init+0x8c>
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bb6:	0020      	movs	r0, r4
 8011bb8:	f7ff ff84 	bl	8011ac4 <HAL_RTC_WaitForSynchro>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d1d3      	bne.n	8011b68 <HAL_RTC_Init+0x34>
        MODIFY_REG(RTC->CR, \
 8011bc0:	69aa      	ldr	r2, [r5, #24]
 8011bc2:	6a23      	ldr	r3, [r4, #32]
 8011bc4:	69e1      	ldr	r1, [r4, #28]
 8011bc6:	00d2      	lsls	r2, r2, #3
 8011bc8:	08d2      	lsrs	r2, r2, #3
 8011bca:	430b      	orrs	r3, r1
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	6962      	ldr	r2, [r4, #20]
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	61ab      	str	r3, [r5, #24]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011bd4:	23ff      	movs	r3, #255	@ 0xff
 8011bd6:	626b      	str	r3, [r5, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8011bd8:	3bfe      	subs	r3, #254	@ 0xfe
 8011bda:	703b      	strb	r3, [r7, #0]
 8011bdc:	e7c9      	b.n	8011b72 <HAL_RTC_Init+0x3e>
 8011bde:	46c0      	nop			@ (mov r8, r8)
 8011be0:	40002800 	.word	0x40002800
 8011be4:	fb8fffbf 	.word	0xfb8fffbf
 8011be8:	ffffe0ff 	.word	0xffffe0ff

08011bec <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8011bec:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8011bee:	2809      	cmp	r0, #9
 8011bf0:	d803      	bhi.n	8011bfa <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    tmp_Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	4318      	orrs	r0, r3
 8011bf6:	b2c0      	uxtb	r0, r0
}
 8011bf8:	4770      	bx	lr
    tmp_Value -= 10U;
 8011bfa:	380a      	subs	r0, #10
    bcdhigh++;
 8011bfc:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8011bfe:	b2c0      	uxtb	r0, r0
 8011c00:	e7f5      	b.n	8011bee <RTC_ByteToBcd2+0x2>
	...

08011c04 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8011c04:	0003      	movs	r3, r0
{
 8011c06:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011c08:	332c      	adds	r3, #44	@ 0x2c
{
 8011c0a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8011c0c:	9300      	str	r3, [sp, #0]
{
 8011c0e:	9001      	str	r0, [sp, #4]
 8011c10:	0017      	movs	r7, r2
  __HAL_LOCK(hrtc);
 8011c12:	781a      	ldrb	r2, [r3, #0]
 8011c14:	2302      	movs	r3, #2
{
 8011c16:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011c18:	001e      	movs	r6, r3
 8011c1a:	2a01      	cmp	r2, #1
 8011c1c:	d019      	beq.n	8011c52 <HAL_RTC_SetTime+0x4e>
 8011c1e:	2201      	movs	r2, #1
 8011c20:	9900      	ldr	r1, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c22:	4c3c      	ldr	r4, [pc, #240]	@ (8011d14 <HAL_RTC_SetTime+0x110>)
  __HAL_LOCK(hrtc);
 8011c24:	700a      	strb	r2, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011c26:	0002      	movs	r2, r0
 8011c28:	322d      	adds	r2, #45	@ 0x2d
 8011c2a:	7013      	strb	r3, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c2c:	33c8      	adds	r3, #200	@ 0xc8
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011c2e:	9202      	str	r2, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c30:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c32:	3b77      	subs	r3, #119	@ 0x77
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c34:	9801      	ldr	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c36:	6263      	str	r3, [r4, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c38:	f7ff ff5e 	bl	8011af8 <RTC_EnterInitMode>
 8011c3c:	1e06      	subs	r6, r0, #0
 8011c3e:	d00b      	beq.n	8011c58 <HAL_RTC_SetTime+0x54>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c40:	23ff      	movs	r3, #255	@ 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011c42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c44:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011c46:	3bfb      	subs	r3, #251	@ 0xfb
 8011c48:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hrtc);
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	9a00      	ldr	r2, [sp, #0]
 8011c4e:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8011c50:	2601      	movs	r6, #1
}
 8011c52:	0030      	movs	r0, r6
 8011c54:	b005      	add	sp, #20
 8011c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011c58:	22c0      	movs	r2, #192	@ 0xc0
 8011c5a:	68e3      	ldr	r3, [r4, #12]
 8011c5c:	0092      	lsls	r2, r2, #2
 8011c5e:	4013      	ands	r3, r2
 8011c60:	2280      	movs	r2, #128	@ 0x80
 8011c62:	0052      	lsls	r2, r2, #1
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d028      	beq.n	8011cba <HAL_RTC_SetTime+0xb6>
      if (Format == RTC_FORMAT_BIN)
 8011c68:	786a      	ldrb	r2, [r5, #1]
 8011c6a:	2340      	movs	r3, #64	@ 0x40
 8011c6c:	9203      	str	r2, [sp, #12]
 8011c6e:	7828      	ldrb	r0, [r5, #0]
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011c70:	69a2      	ldr	r2, [r4, #24]
      if (Format == RTC_FORMAT_BIN)
 8011c72:	2f00      	cmp	r7, #0
 8011c74:	d138      	bne.n	8011ce8 <HAL_RTC_SetTime+0xe4>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011c76:	421a      	tst	r2, r3
 8011c78:	d100      	bne.n	8011c7c <HAL_RTC_SetTime+0x78>
          sTime->TimeFormat = 0x00U;
 8011c7a:	70ee      	strb	r6, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011c7c:	f7ff ffb6 	bl	8011bec <RTC_ByteToBcd2>
 8011c80:	0007      	movs	r7, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c82:	9803      	ldr	r0, [sp, #12]
 8011c84:	f7ff ffb2 	bl	8011bec <RTC_ByteToBcd2>
 8011c88:	9003      	str	r0, [sp, #12]
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011c8a:	78a8      	ldrb	r0, [r5, #2]
 8011c8c:	f7ff ffae 	bl	8011bec <RTC_ByteToBcd2>
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011c90:	78ea      	ldrb	r2, [r5, #3]
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c92:	9b03      	ldr	r3, [sp, #12]
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011c94:	0592      	lsls	r2, r2, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011c96:	4310      	orrs	r0, r2
 8011c98:	043f      	lsls	r7, r7, #16
 8011c9a:	4338      	orrs	r0, r7
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c9c:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011c9e:	4318      	orrs	r0, r3
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8011d18 <HAL_RTC_SetTime+0x114>)
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8011d1c <HAL_RTC_SetTime+0x118>)
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011ca4:	4018      	ands	r0, r3
 8011ca6:	6020      	str	r0, [r4, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011ca8:	69a3      	ldr	r3, [r4, #24]
 8011caa:	4013      	ands	r3, r2
 8011cac:	61a3      	str	r3, [r4, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8011cae:	68eb      	ldr	r3, [r5, #12]
 8011cb0:	6929      	ldr	r1, [r5, #16]
 8011cb2:	69a2      	ldr	r2, [r4, #24]
 8011cb4:	430b      	orrs	r3, r1
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	61a3      	str	r3, [r4, #24]
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011cba:	2280      	movs	r2, #128	@ 0x80
 8011cbc:	68e3      	ldr	r3, [r4, #12]
 8011cbe:	4393      	bics	r3, r2
 8011cc0:	60e3      	str	r3, [r4, #12]
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011cc2:	69a2      	ldr	r2, [r4, #24]
 8011cc4:	2320      	movs	r3, #32
 8011cc6:	0015      	movs	r5, r2
 8011cc8:	401d      	ands	r5, r3
 8011cca:	421a      	tst	r2, r3
 8011ccc:	d118      	bne.n	8011d00 <HAL_RTC_SetTime+0xfc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011cce:	9801      	ldr	r0, [sp, #4]
 8011cd0:	f7ff fef8 	bl	8011ac4 <HAL_RTC_WaitForSynchro>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d013      	beq.n	8011d00 <HAL_RTC_SetTime+0xfc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011cd8:	23ff      	movs	r3, #255	@ 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011cda:	9a02      	ldr	r2, [sp, #8]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011cdc:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011cde:	3bfb      	subs	r3, #251	@ 0xfb
 8011ce0:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hrtc);
 8011ce2:	9b00      	ldr	r3, [sp, #0]
 8011ce4:	701d      	strb	r5, [r3, #0]
        return HAL_ERROR;
 8011ce6:	e7b3      	b.n	8011c50 <HAL_RTC_SetTime+0x4c>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011ce8:	421a      	tst	r2, r3
 8011cea:	d100      	bne.n	8011cee <HAL_RTC_SetTime+0xea>
          sTime->TimeFormat = 0x00U;
 8011cec:	70ee      	strb	r6, [r5, #3]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011cee:	9b03      	ldr	r3, [sp, #12]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011cf0:	0400      	lsls	r0, r0, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011cf2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011cf4:	4318      	orrs	r0, r3
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011cf6:	78ab      	ldrb	r3, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011cf8:	4318      	orrs	r0, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011cfa:	78eb      	ldrb	r3, [r5, #3]
 8011cfc:	059b      	lsls	r3, r3, #22
 8011cfe:	e7ce      	b.n	8011c9e <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011d00:	23ff      	movs	r3, #255	@ 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 8011d02:	9a02      	ldr	r2, [sp, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011d04:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011d06:	3bfe      	subs	r3, #254	@ 0xfe
 8011d08:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hrtc);
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	9a00      	ldr	r2, [sp, #0]
 8011d0e:	7013      	strb	r3, [r2, #0]
    return HAL_OK;
 8011d10:	e79f      	b.n	8011c52 <HAL_RTC_SetTime+0x4e>
 8011d12:	46c0      	nop			@ (mov r8, r8)
 8011d14:	40002800 	.word	0x40002800
 8011d18:	007f7f7f 	.word	0x007f7f7f
 8011d1c:	fffbffff 	.word	0xfffbffff

08011d20 <HAL_RTC_SetDate>:
{
 8011d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011d22:	0007      	movs	r7, r0
 8011d24:	2302      	movs	r3, #2
{
 8011d26:	b085      	sub	sp, #20
 8011d28:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hrtc);
 8011d2a:	372c      	adds	r7, #44	@ 0x2c
{
 8011d2c:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8011d2e:	7839      	ldrb	r1, [r7, #0]
 8011d30:	001d      	movs	r5, r3
 8011d32:	2901      	cmp	r1, #1
 8011d34:	d023      	beq.n	8011d7e <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d36:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 8011d38:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d3a:	362d      	adds	r6, #45	@ 0x2d
  __HAL_LOCK(hrtc);
 8011d3c:	7039      	strb	r1, [r7, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d3e:	7033      	strb	r3, [r6, #0]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011d40:	78a1      	ldrb	r1, [r4, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011d42:	7825      	ldrb	r5, [r4, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011d44:	78e0      	ldrb	r0, [r4, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011d46:	7863      	ldrb	r3, [r4, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011d48:	036d      	lsls	r5, r5, #13
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011d4a:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	d019      	beq.n	8011d84 <HAL_RTC_SetDate+0x64>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011d50:	0400      	lsls	r0, r0, #16
 8011d52:	4328      	orrs	r0, r5
 8011d54:	4308      	orrs	r0, r1
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011d56:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011d58:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d5a:	23ca      	movs	r3, #202	@ 0xca
 8011d5c:	4c25      	ldr	r4, [pc, #148]	@ (8011df4 <HAL_RTC_SetDate+0xd4>)
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011d5e:	9002      	str	r0, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d60:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d62:	3b77      	subs	r3, #119	@ 0x77
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011d64:	9801      	ldr	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d66:	6263      	str	r3, [r4, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011d68:	f7ff fec6 	bl	8011af8 <RTC_EnterInitMode>
 8011d6c:	1e05      	subs	r5, r0, #0
 8011d6e:	d020      	beq.n	8011db2 <HAL_RTC_SetDate+0x92>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011d70:	23ff      	movs	r3, #255	@ 0xff
 8011d72:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011d74:	3bfb      	subs	r3, #251	@ 0xfb
 8011d76:	7033      	strb	r3, [r6, #0]
    __HAL_UNLOCK(hrtc);
 8011d78:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011d7a:	2501      	movs	r5, #1
        __HAL_UNLOCK(hrtc);
 8011d7c:	703b      	strb	r3, [r7, #0]
}
 8011d7e:	0028      	movs	r0, r5
 8011d80:	b005      	add	sp, #20
 8011d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d84:	2210      	movs	r2, #16
 8011d86:	4213      	tst	r3, r2
 8011d88:	d002      	beq.n	8011d90 <HAL_RTC_SetDate+0x70>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011d8a:	4393      	bics	r3, r2
 8011d8c:	330a      	adds	r3, #10
 8011d8e:	7063      	strb	r3, [r4, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011d90:	f7ff ff2c 	bl	8011bec <RTC_ByteToBcd2>
 8011d94:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d96:	7860      	ldrb	r0, [r4, #1]
 8011d98:	f7ff ff28 	bl	8011bec <RTC_ByteToBcd2>
 8011d9c:	0004      	movs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011d9e:	9802      	ldr	r0, [sp, #8]
 8011da0:	f7ff ff24 	bl	8011bec <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011da4:	9b03      	ldr	r3, [sp, #12]
 8011da6:	4328      	orrs	r0, r5
 8011da8:	041b      	lsls	r3, r3, #16
 8011daa:	4318      	orrs	r0, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011dac:	0224      	lsls	r4, r4, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011dae:	4320      	orrs	r0, r4
 8011db0:	e7d3      	b.n	8011d5a <HAL_RTC_SetDate+0x3a>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8011db2:	9a02      	ldr	r2, [sp, #8]
 8011db4:	4b10      	ldr	r3, [pc, #64]	@ (8011df8 <HAL_RTC_SetDate+0xd8>)
 8011db6:	401a      	ands	r2, r3
 8011db8:	6062      	str	r2, [r4, #4]
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011dba:	2280      	movs	r2, #128	@ 0x80
 8011dbc:	68e3      	ldr	r3, [r4, #12]
 8011dbe:	4393      	bics	r3, r2
 8011dc0:	60e3      	str	r3, [r4, #12]
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011dc2:	69a2      	ldr	r2, [r4, #24]
 8011dc4:	2320      	movs	r3, #32
 8011dc6:	0011      	movs	r1, r2
 8011dc8:	4019      	ands	r1, r3
 8011dca:	9102      	str	r1, [sp, #8]
 8011dcc:	421a      	tst	r2, r3
 8011dce:	d10a      	bne.n	8011de6 <HAL_RTC_SetDate+0xc6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011dd0:	9801      	ldr	r0, [sp, #4]
 8011dd2:	f7ff fe77 	bl	8011ac4 <HAL_RTC_WaitForSynchro>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d005      	beq.n	8011de6 <HAL_RTC_SetDate+0xc6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011dda:	23ff      	movs	r3, #255	@ 0xff
 8011ddc:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011dde:	3bfb      	subs	r3, #251	@ 0xfb
 8011de0:	7033      	strb	r3, [r6, #0]
        __HAL_UNLOCK(hrtc);
 8011de2:	9b02      	ldr	r3, [sp, #8]
 8011de4:	e7c9      	b.n	8011d7a <HAL_RTC_SetDate+0x5a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011de6:	23ff      	movs	r3, #255	@ 0xff
 8011de8:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011dea:	3bfe      	subs	r3, #254	@ 0xfe
 8011dec:	7033      	strb	r3, [r6, #0]
    __HAL_UNLOCK(hrtc);
 8011dee:	2300      	movs	r3, #0
 8011df0:	703b      	strb	r3, [r7, #0]
    return HAL_OK;
 8011df2:	e7c4      	b.n	8011d7e <HAL_RTC_SetDate+0x5e>
 8011df4:	40002800 	.word	0x40002800
 8011df8:	00ffff3f 	.word	0x00ffff3f

08011dfc <HAL_RTC_SetAlarm_IT>:
{
 8011dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dfe:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011e00:	0001      	movs	r1, r0
 8011e02:	2302      	movs	r3, #2
 8011e04:	312c      	adds	r1, #44	@ 0x2c
 8011e06:	780c      	ldrb	r4, [r1, #0]
{
 8011e08:	0007      	movs	r7, r0
 8011e0a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8011e0c:	0018      	movs	r0, r3
 8011e0e:	2c01      	cmp	r4, #1
 8011e10:	d060      	beq.n	8011ed4 <HAL_RTC_SetAlarm_IT+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011e12:	704b      	strb	r3, [r1, #1]
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011e14:	23c0      	movs	r3, #192	@ 0xc0
  __HAL_LOCK(hrtc);
 8011e16:	3801      	subs	r0, #1
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011e18:	4c4d      	ldr	r4, [pc, #308]	@ (8011f50 <HAL_RTC_SetAlarm_IT+0x154>)
  __HAL_LOCK(hrtc);
 8011e1a:	7008      	strb	r0, [r1, #0]
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011e1c:	68e1      	ldr	r1, [r4, #12]
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	4019      	ands	r1, r3
  if (binaryMode != RTC_BINARY_ONLY)
 8011e22:	2380      	movs	r3, #128	@ 0x80
  uint32_t tmpreg = 0;
 8011e24:	2000      	movs	r0, #0
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011e26:	9100      	str	r1, [sp, #0]
  if (binaryMode != RTC_BINARY_ONLY)
 8011e28:	005b      	lsls	r3, r3, #1
 8011e2a:	4299      	cmp	r1, r3
 8011e2c:	d02a      	beq.n	8011e84 <HAL_RTC_SetAlarm_IT+0x88>
    if (Format == RTC_FORMAT_BIN)
 8011e2e:	78a9      	ldrb	r1, [r5, #2]
 8011e30:	786e      	ldrb	r6, [r5, #1]
 8011e32:	7828      	ldrb	r0, [r5, #0]
 8011e34:	3bc0      	subs	r3, #192	@ 0xc0
 8011e36:	9101      	str	r1, [sp, #4]
 8011e38:	2a00      	cmp	r2, #0
 8011e3a:	d14d      	bne.n	8011ed8 <HAL_RTC_SetAlarm_IT+0xdc>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011e3c:	69a2      	ldr	r2, [r4, #24]
 8011e3e:	0011      	movs	r1, r2
 8011e40:	4019      	ands	r1, r3
 8011e42:	421a      	tst	r2, r3
 8011e44:	d100      	bne.n	8011e48 <HAL_RTC_SetAlarm_IT+0x4c>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011e46:	70e9      	strb	r1, [r5, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011e48:	f7ff fed0 	bl	8011bec <RTC_ByteToBcd2>
 8011e4c:	9002      	str	r0, [sp, #8]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011e4e:	0030      	movs	r0, r6
 8011e50:	f7ff fecc 	bl	8011bec <RTC_ByteToBcd2>
 8011e54:	9003      	str	r0, [sp, #12]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011e56:	9801      	ldr	r0, [sp, #4]
 8011e58:	f7ff fec8 	bl	8011bec <RTC_ByteToBcd2>
 8011e5c:	0006      	movs	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011e5e:	1d6b      	adds	r3, r5, #5
 8011e60:	7fd8      	ldrb	r0, [r3, #31]
 8011e62:	f7ff fec3 	bl	8011bec <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011e66:	696a      	ldr	r2, [r5, #20]
 8011e68:	6a2b      	ldr	r3, [r5, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011e6a:	0600      	lsls	r0, r0, #24
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011e6c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011e6e:	78ea      	ldrb	r2, [r5, #3]
 8011e70:	0592      	lsls	r2, r2, #22
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011e72:	4313      	orrs	r3, r2
 8011e74:	9a02      	ldr	r2, [sp, #8]
 8011e76:	4333      	orrs	r3, r6
 8011e78:	0412      	lsls	r2, r2, #16
 8011e7a:	4313      	orrs	r3, r2
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011e7c:	9a03      	ldr	r2, [sp, #12]
 8011e7e:	0212      	lsls	r2, r2, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011e80:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011e82:	4318      	orrs	r0, r3
  if (sAlarm->Alarm == RTC_ALARM_A)
 8011e84:	2180      	movs	r1, #128	@ 0x80
 8011e86:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8011e88:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8011e8a:	69a2      	ldr	r2, [r4, #24]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8011e8c:	0049      	lsls	r1, r1, #1
 8011e8e:	428e      	cmp	r6, r1
 8011e90:	d13e      	bne.n	8011f10 <HAL_RTC_SetAlarm_IT+0x114>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8011e92:	4930      	ldr	r1, [pc, #192]	@ (8011f54 <HAL_RTC_SetAlarm_IT+0x158>)
 8011e94:	400a      	ands	r2, r1
 8011e96:	61a2      	str	r2, [r4, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8011e98:	2201      	movs	r2, #1
 8011e9a:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8011e9c:	9a00      	ldr	r2, [sp, #0]
 8011e9e:	42b2      	cmp	r2, r6
 8011ea0:	d130      	bne.n	8011f04 <HAL_RTC_SetAlarm_IT+0x108>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8011ea2:	69ea      	ldr	r2, [r5, #28]
 8011ea4:	4313      	orrs	r3, r2
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8011ea6:	6463      	str	r3, [r4, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8011ea8:	686b      	ldr	r3, [r5, #4]
 8011eaa:	6723      	str	r3, [r4, #112]	@ 0x70
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8011eac:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d12a      	bne.n	8011f08 <HAL_RTC_SetAlarm_IT+0x10c>
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8011eb2:	2380      	movs	r3, #128	@ 0x80
 8011eb4:	69a2      	ldr	r2, [r4, #24]
 8011eb6:	051b      	lsls	r3, r3, #20
 8011eb8:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8011eba:	61a3      	str	r3, [r4, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8011ebc:	2388      	movs	r3, #136	@ 0x88
 8011ebe:	69a2      	ldr	r2, [r4, #24]
 8011ec0:	015b      	lsls	r3, r3, #5
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	61a3      	str	r3, [r4, #24]
  hrtc->State = HAL_RTC_STATE_READY;
 8011ec6:	003b      	movs	r3, r7
 8011ec8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8011eca:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8011ecc:	332d      	adds	r3, #45	@ 0x2d
 8011ece:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8011ed0:	3b01      	subs	r3, #1
 8011ed2:	7018      	strb	r0, [r3, #0]
}
 8011ed4:	b005      	add	sp, #20
 8011ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011ed8:	69a2      	ldr	r2, [r4, #24]
 8011eda:	0011      	movs	r1, r2
 8011edc:	4019      	ands	r1, r3
 8011ede:	421a      	tst	r2, r3
 8011ee0:	d100      	bne.n	8011ee4 <HAL_RTC_SetAlarm_IT+0xe8>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011ee2:	70e9      	strb	r1, [r5, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011ee4:	696a      	ldr	r2, [r5, #20]
 8011ee6:	6a2b      	ldr	r3, [r5, #32]
 8011ee8:	0400      	lsls	r0, r0, #16
 8011eea:	4313      	orrs	r3, r2
 8011eec:	9a01      	ldr	r2, [sp, #4]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011eee:	0236      	lsls	r6, r6, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011ef4:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011ef6:	4330      	orrs	r0, r6
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011ef8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011efa:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011efc:	1d6b      	adds	r3, r5, #5
 8011efe:	7fdb      	ldrb	r3, [r3, #31]
 8011f00:	061b      	lsls	r3, r3, #24
 8011f02:	e7be      	b.n	8011e82 <HAL_RTC_SetAlarm_IT+0x86>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8011f04:	6420      	str	r0, [r4, #64]	@ 0x40
 8011f06:	e7ce      	b.n	8011ea6 <HAL_RTC_SetAlarm_IT+0xaa>
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8011f08:	69a3      	ldr	r3, [r4, #24]
 8011f0a:	4a13      	ldr	r2, [pc, #76]	@ (8011f58 <HAL_RTC_SetAlarm_IT+0x15c>)
 8011f0c:	4013      	ands	r3, r2
 8011f0e:	e7d4      	b.n	8011eba <HAL_RTC_SetAlarm_IT+0xbe>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011f10:	4e12      	ldr	r6, [pc, #72]	@ (8011f5c <HAL_RTC_SetAlarm_IT+0x160>)
 8011f12:	4032      	ands	r2, r6
 8011f14:	61a2      	str	r2, [r4, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8011f16:	2202      	movs	r2, #2
 8011f18:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8011f1a:	9a00      	ldr	r2, [sp, #0]
 8011f1c:	428a      	cmp	r2, r1
 8011f1e:	d110      	bne.n	8011f42 <HAL_RTC_SetAlarm_IT+0x146>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8011f20:	69ea      	ldr	r2, [r5, #28]
 8011f22:	4313      	orrs	r3, r2
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8011f24:	64e3      	str	r3, [r4, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8011f26:	686b      	ldr	r3, [r5, #4]
 8011f28:	6763      	str	r3, [r4, #116]	@ 0x74
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8011f2a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d10a      	bne.n	8011f46 <HAL_RTC_SetAlarm_IT+0x14a>
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8011f30:	2380      	movs	r3, #128	@ 0x80
 8011f32:	69a2      	ldr	r2, [r4, #24]
 8011f34:	055b      	lsls	r3, r3, #21
 8011f36:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8011f38:	61a3      	str	r3, [r4, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011f3a:	2388      	movs	r3, #136	@ 0x88
 8011f3c:	69a2      	ldr	r2, [r4, #24]
 8011f3e:	019b      	lsls	r3, r3, #6
 8011f40:	e7bf      	b.n	8011ec2 <HAL_RTC_SetAlarm_IT+0xc6>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8011f42:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011f44:	e7ee      	b.n	8011f24 <HAL_RTC_SetAlarm_IT+0x128>
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8011f46:	69a3      	ldr	r3, [r4, #24]
 8011f48:	4a05      	ldr	r2, [pc, #20]	@ (8011f60 <HAL_RTC_SetAlarm_IT+0x164>)
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	e7f4      	b.n	8011f38 <HAL_RTC_SetAlarm_IT+0x13c>
 8011f4e:	46c0      	nop			@ (mov r8, r8)
 8011f50:	40002800 	.word	0x40002800
 8011f54:	ffffeeff 	.word	0xffffeeff
 8011f58:	f7ffffff 	.word	0xf7ffffff
 8011f5c:	ffffddff 	.word	0xffffddff
 8011f60:	efffffff 	.word	0xefffffff

08011f64 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8011f64:	0903      	lsrs	r3, r0, #4
{
 8011f66:	0002      	movs	r2, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8011f68:	200a      	movs	r0, #10
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8011f6a:	210f      	movs	r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8011f6c:	4358      	muls	r0, r3
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8011f6e:	400a      	ands	r2, r1
 8011f70:	1880      	adds	r0, r0, r2
 8011f72:	b2c0      	uxtb	r0, r0
}
 8011f74:	4770      	bx	lr
	...

08011f78 <HAL_RTC_GetTime>:
{
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	000c      	movs	r4, r1
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011f7c:	20c0      	movs	r0, #192	@ 0xc0
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8011f7e:	4915      	ldr	r1, [pc, #84]	@ (8011fd4 <HAL_RTC_GetTime+0x5c>)
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011f80:	0080      	lsls	r0, r0, #2
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8011f82:	688b      	ldr	r3, [r1, #8]
 8011f84:	6063      	str	r3, [r4, #4]
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011f86:	68cb      	ldr	r3, [r1, #12]
 8011f88:	4003      	ands	r3, r0
 8011f8a:	2080      	movs	r0, #128	@ 0x80
 8011f8c:	0040      	lsls	r0, r0, #1
 8011f8e:	4283      	cmp	r3, r0
 8011f90:	d01d      	beq.n	8011fce <HAL_RTC_GetTime+0x56>
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8011f92:	690b      	ldr	r3, [r1, #16]
 8011f94:	045b      	lsls	r3, r3, #17
 8011f96:	0c5b      	lsrs	r3, r3, #17
 8011f98:	60a3      	str	r3, [r4, #8]
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8011f9a:	680b      	ldr	r3, [r1, #0]
 8011f9c:	490e      	ldr	r1, [pc, #56]	@ (8011fd8 <HAL_RTC_GetTime+0x60>)
 8011f9e:	400b      	ands	r3, r1
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011fa0:	0298      	lsls	r0, r3, #10
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011fa2:	0a1d      	lsrs	r5, r3, #8
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011fa4:	b2de      	uxtb	r6, r3
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011fa6:	0e80      	lsrs	r0, r0, #26
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011fa8:	b2ed      	uxtb	r5, r5
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011faa:	0d9b      	lsrs	r3, r3, #22
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011fac:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011fae:	7065      	strb	r5, [r4, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011fb0:	70a6      	strb	r6, [r4, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011fb2:	70e3      	strb	r3, [r4, #3]
    if (Format == RTC_FORMAT_BIN)
 8011fb4:	2a00      	cmp	r2, #0
 8011fb6:	d10a      	bne.n	8011fce <HAL_RTC_GetTime+0x56>
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011fb8:	f7ff ffd4 	bl	8011f64 <RTC_Bcd2ToByte>
 8011fbc:	7020      	strb	r0, [r4, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011fbe:	0028      	movs	r0, r5
 8011fc0:	f7ff ffd0 	bl	8011f64 <RTC_Bcd2ToByte>
 8011fc4:	7060      	strb	r0, [r4, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011fc6:	0030      	movs	r0, r6
 8011fc8:	f7ff ffcc 	bl	8011f64 <RTC_Bcd2ToByte>
 8011fcc:	70a0      	strb	r0, [r4, #2]
}
 8011fce:	2000      	movs	r0, #0
 8011fd0:	bd70      	pop	{r4, r5, r6, pc}
 8011fd2:	46c0      	nop			@ (mov r8, r8)
 8011fd4:	40002800 	.word	0x40002800
 8011fd8:	007f7f7f 	.word	0x007f7f7f

08011fdc <HAL_RTC_GetDate>:
{
 8011fdc:	b570      	push	{r4, r5, r6, lr}
 8011fde:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8011fe0:	4b0e      	ldr	r3, [pc, #56]	@ (801201c <HAL_RTC_GetDate+0x40>)
 8011fe2:	490f      	ldr	r1, [pc, #60]	@ (8012020 <HAL_RTC_GetDate+0x44>)
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011fe8:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011fea:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011fec:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011fee:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011ff0:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011ff2:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011ff4:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011ff6:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011ff8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011ffa:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	d10a      	bne.n	8012016 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012000:	f7ff ffb0 	bl	8011f64 <RTC_Bcd2ToByte>
 8012004:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012006:	0028      	movs	r0, r5
 8012008:	f7ff ffac 	bl	8011f64 <RTC_Bcd2ToByte>
 801200c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801200e:	0030      	movs	r0, r6
 8012010:	f7ff ffa8 	bl	8011f64 <RTC_Bcd2ToByte>
 8012014:	70a0      	strb	r0, [r4, #2]
}
 8012016:	2000      	movs	r0, #0
 8012018:	bd70      	pop	{r4, r5, r6, pc}
 801201a:	46c0      	nop			@ (mov r8, r8)
 801201c:	40002800 	.word	0x40002800
 8012020:	00ffff3f 	.word	0x00ffff3f

08012024 <HAL_RTCEx_DeactivateWakeUpTimer>:
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012024:	0001      	movs	r1, r0
 8012026:	2202      	movs	r2, #2
{
 8012028:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 801202a:	312c      	adds	r1, #44	@ 0x2c
 801202c:	780c      	ldrb	r4, [r1, #0]
{
 801202e:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8012030:	0010      	movs	r0, r2
 8012032:	2c01      	cmp	r4, #1
 8012034:	d00a      	beq.n	801204c <HAL_RTCEx_DeactivateWakeUpTimer+0x28>
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8012036:	4806      	ldr	r0, [pc, #24]	@ (8012050 <HAL_RTCEx_DeactivateWakeUpTimer+0x2c>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012038:	332d      	adds	r3, #45	@ 0x2d
 801203a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 801203c:	6982      	ldr	r2, [r0, #24]
 801203e:	4c05      	ldr	r4, [pc, #20]	@ (8012054 <HAL_RTCEx_DeactivateWakeUpTimer+0x30>)
 8012040:	4022      	ands	r2, r4
 8012042:	6182      	str	r2, [r0, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012044:	2201      	movs	r2, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012046:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8012048:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 801204a:	7008      	strb	r0, [r1, #0]

  return HAL_OK;
}
 801204c:	bd10      	pop	{r4, pc}
 801204e:	46c0      	nop			@ (mov r8, r8)
 8012050:	40002800 	.word	0x40002800
 8012054:	ffffbbff 	.word	0xffffbbff

08012058 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8012058:	2204      	movs	r2, #4
 801205a:	4b06      	ldr	r3, [pc, #24]	@ (8012074 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>)
{
 801205c:	b510      	push	{r4, lr}
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 801205e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
{
 8012060:	0004      	movs	r4, r0
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8012062:	4211      	tst	r1, r2
 8012064:	d002      	beq.n	801206c <HAL_RTCEx_WakeUpTimerIRQHandler+0x14>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8012066:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8012068:	f7f6 fa94 	bl	8008594 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801206c:	2301      	movs	r3, #1
 801206e:	342d      	adds	r4, #45	@ 0x2d
 8012070:	7023      	strb	r3, [r4, #0]
}
 8012072:	bd10      	pop	{r4, pc}
 8012074:	40002800 	.word	0x40002800

08012078 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8012078:	4770      	bx	lr

0801207a <HAL_RTCEx_Tamper1EventCallback>:
/**
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
 801207a:	4770      	bx	lr

0801207c <HAL_RTCEx_Tamper2EventCallback>:
/**
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
 801207c:	4770      	bx	lr

0801207e <HAL_RTCEx_Tamper3EventCallback>:
/**
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
 801207e:	4770      	bx	lr

08012080 <HAL_RTCEx_Tamper4EventCallback>:
/**
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
 8012080:	4770      	bx	lr

08012082 <HAL_RTCEx_Tamper5EventCallback>:
/**
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
 8012082:	4770      	bx	lr

08012084 <HAL_RTCEx_InternalTamper3EventCallback>:
/**
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
 8012084:	4770      	bx	lr

08012086 <HAL_RTCEx_InternalTamper4EventCallback>:
/**
  * @brief  Internal Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper4EventCallback(RTC_HandleTypeDef *hrtc)
 8012086:	4770      	bx	lr

08012088 <HAL_RTCEx_InternalTamper5EventCallback>:
/**
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
 8012088:	4770      	bx	lr

0801208a <HAL_RTCEx_InternalTamper6EventCallback>:
/**
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
 801208a:	4770      	bx	lr

0801208c <HAL_RTCEx_TamperIRQHandler>:
  uint32_t tmp = READ_REG(TAMP->MISR);
 801208c:	4b18      	ldr	r3, [pc, #96]	@ (80120f0 <HAL_RTCEx_TamperIRQHandler+0x64>)
{
 801208e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = READ_REG(TAMP->MISR);
 8012090:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
{
 8012092:	0004      	movs	r4, r0
  WRITE_REG(TAMP->SCR, tmp);
 8012094:	63dd      	str	r5, [r3, #60]	@ 0x3c
  if ((tmp & RTC_TAMPER_1) == RTC_TAMPER_1)
 8012096:	07eb      	lsls	r3, r5, #31
 8012098:	d501      	bpl.n	801209e <HAL_RTCEx_TamperIRQHandler+0x12>
    HAL_RTCEx_Tamper1EventCallback(hrtc);
 801209a:	f7ff ffee 	bl	801207a <HAL_RTCEx_Tamper1EventCallback>
  if ((tmp & RTC_TAMPER_2) == RTC_TAMPER_2)
 801209e:	07ab      	lsls	r3, r5, #30
 80120a0:	d502      	bpl.n	80120a8 <HAL_RTCEx_TamperIRQHandler+0x1c>
    HAL_RTCEx_Tamper2EventCallback(hrtc);
 80120a2:	0020      	movs	r0, r4
 80120a4:	f7ff ffea 	bl	801207c <HAL_RTCEx_Tamper2EventCallback>
  if ((tmp & RTC_TAMPER_3) == RTC_TAMPER_3)
 80120a8:	076b      	lsls	r3, r5, #29
 80120aa:	d502      	bpl.n	80120b2 <HAL_RTCEx_TamperIRQHandler+0x26>
    HAL_RTCEx_Tamper3EventCallback(hrtc);
 80120ac:	0020      	movs	r0, r4
 80120ae:	f7ff ffe6 	bl	801207e <HAL_RTCEx_Tamper3EventCallback>
  if ((tmp & RTC_TAMPER_4) == RTC_TAMPER_4)
 80120b2:	072b      	lsls	r3, r5, #28
 80120b4:	d502      	bpl.n	80120bc <HAL_RTCEx_TamperIRQHandler+0x30>
    HAL_RTCEx_Tamper4EventCallback(hrtc);
 80120b6:	0020      	movs	r0, r4
 80120b8:	f7ff ffe2 	bl	8012080 <HAL_RTCEx_Tamper4EventCallback>
  if ((tmp & RTC_TAMPER_5) == RTC_TAMPER_5)
 80120bc:	06eb      	lsls	r3, r5, #27
 80120be:	d502      	bpl.n	80120c6 <HAL_RTCEx_TamperIRQHandler+0x3a>
    HAL_RTCEx_Tamper5EventCallback(hrtc);
 80120c0:	0020      	movs	r0, r4
 80120c2:	f7ff ffde 	bl	8012082 <HAL_RTCEx_Tamper5EventCallback>
  if ((tmp & RTC_INT_TAMPER_3) == RTC_INT_TAMPER_3)
 80120c6:	036b      	lsls	r3, r5, #13
 80120c8:	d502      	bpl.n	80120d0 <HAL_RTCEx_TamperIRQHandler+0x44>
    HAL_RTCEx_InternalTamper3EventCallback(hrtc);
 80120ca:	0020      	movs	r0, r4
 80120cc:	f7ff ffda 	bl	8012084 <HAL_RTCEx_InternalTamper3EventCallback>
  if ((tmp & RTC_INT_TAMPER_4) == RTC_INT_TAMPER_4)
 80120d0:	032b      	lsls	r3, r5, #12
 80120d2:	d502      	bpl.n	80120da <HAL_RTCEx_TamperIRQHandler+0x4e>
    HAL_RTCEx_InternalTamper4EventCallback(hrtc);
 80120d4:	0020      	movs	r0, r4
 80120d6:	f7ff ffd6 	bl	8012086 <HAL_RTCEx_InternalTamper4EventCallback>
  if ((tmp & RTC_INT_TAMPER_5) == RTC_INT_TAMPER_5)
 80120da:	02eb      	lsls	r3, r5, #11
 80120dc:	d502      	bpl.n	80120e4 <HAL_RTCEx_TamperIRQHandler+0x58>
    HAL_RTCEx_InternalTamper5EventCallback(hrtc);
 80120de:	0020      	movs	r0, r4
 80120e0:	f7ff ffd2 	bl	8012088 <HAL_RTCEx_InternalTamper5EventCallback>
  if ((tmp & RTC_INT_TAMPER_6) == RTC_INT_TAMPER_6)
 80120e4:	02ad      	lsls	r5, r5, #10
 80120e6:	d502      	bpl.n	80120ee <HAL_RTCEx_TamperIRQHandler+0x62>
    HAL_RTCEx_InternalTamper6EventCallback(hrtc);
 80120e8:	0020      	movs	r0, r4
 80120ea:	f7ff ffce 	bl	801208a <HAL_RTCEx_InternalTamper6EventCallback>
}
 80120ee:	bd70      	pop	{r4, r5, r6, pc}
 80120f0:	4000b000 	.word	0x4000b000

080120f4 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80120f4:	4b02      	ldr	r3, [pc, #8]	@ (8012100 <HAL_RTCEx_BKUPWrite+0xc>)
 80120f6:	0089      	lsls	r1, r1, #2
 80120f8:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80120fa:	600a      	str	r2, [r1, #0]
}
 80120fc:	4770      	bx	lr
 80120fe:	46c0      	nop			@ (mov r8, r8)
 8012100:	4000b100 	.word	0x4000b100

08012104 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8012104:	4b02      	ldr	r3, [pc, #8]	@ (8012110 <HAL_RTCEx_BKUPRead+0xc>)
 8012106:	0089      	lsls	r1, r1, #2
 8012108:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801210a:	6808      	ldr	r0, [r1, #0]
}
 801210c:	4770      	bx	lr
 801210e:	46c0      	nop			@ (mov r8, r8)
 8012110:	4000b100 	.word	0x4000b100

08012114 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8012114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012116:	000e      	movs	r6, r1
 8012118:	b085      	sub	sp, #20
 801211a:	0015      	movs	r5, r2
 801211c:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801211e:	f7fc f8af 	bl	800e280 <HAL_GetTick>
 8012122:	19ad      	adds	r5, r5, r6
 8012124:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8012126:	f7fc f8ab 	bl	800e280 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801212a:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801212c:	4b25      	ldr	r3, [pc, #148]	@ (80121c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 801212e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	015b      	lsls	r3, r3, #5
 8012134:	0d1b      	lsrs	r3, r3, #20
 8012136:	436b      	muls	r3, r5
 8012138:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801213a:	6822      	ldr	r2, [r4, #0]
 801213c:	6893      	ldr	r3, [r2, #8]
 801213e:	0018      	movs	r0, r3
 8012140:	4038      	ands	r0, r7
 8012142:	423b      	tst	r3, r7
 8012144:	d032      	beq.n	80121ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012146:	1c73      	adds	r3, r6, #1
 8012148:	d0f8      	beq.n	801213c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801214a:	f7fc f899 	bl	800e280 <HAL_GetTick>
 801214e:	9b01      	ldr	r3, [sp, #4]
 8012150:	1ac0      	subs	r0, r0, r3
 8012152:	42a8      	cmp	r0, r5
 8012154:	d32c      	bcc.n	80121b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012156:	21e0      	movs	r1, #224	@ 0xe0
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	685a      	ldr	r2, [r3, #4]
 801215c:	438a      	bics	r2, r1
 801215e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012160:	2282      	movs	r2, #130	@ 0x82
 8012162:	6861      	ldr	r1, [r4, #4]
 8012164:	0052      	lsls	r2, r2, #1
 8012166:	4291      	cmp	r1, r2
 8012168:	d10c      	bne.n	8012184 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 801216a:	2180      	movs	r1, #128	@ 0x80
 801216c:	68a2      	ldr	r2, [r4, #8]
 801216e:	0209      	lsls	r1, r1, #8
 8012170:	428a      	cmp	r2, r1
 8012172:	d003      	beq.n	801217c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012174:	2180      	movs	r1, #128	@ 0x80
 8012176:	00c9      	lsls	r1, r1, #3
 8012178:	428a      	cmp	r2, r1
 801217a:	d103      	bne.n	8012184 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801217c:	2140      	movs	r1, #64	@ 0x40
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	438a      	bics	r2, r1
 8012182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012184:	2180      	movs	r1, #128	@ 0x80
 8012186:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8012188:	0189      	lsls	r1, r1, #6
 801218a:	428a      	cmp	r2, r1
 801218c:	d106      	bne.n	801219c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 801218e:	6819      	ldr	r1, [r3, #0]
 8012190:	480d      	ldr	r0, [pc, #52]	@ (80121c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8012192:	4001      	ands	r1, r0
 8012194:	6019      	str	r1, [r3, #0]
 8012196:	6819      	ldr	r1, [r3, #0]
 8012198:	430a      	orrs	r2, r1
 801219a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801219c:	0023      	movs	r3, r4
 801219e:	2201      	movs	r2, #1
 80121a0:	335d      	adds	r3, #93	@ 0x5d
 80121a2:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80121a4:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 80121a6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80121a8:	345c      	adds	r4, #92	@ 0x5c
 80121aa:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 80121ac:	b005      	add	sp, #20
 80121ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d000      	beq.n	80121b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 80121b6:	002b      	movs	r3, r5
      count--;
 80121b8:	9a03      	ldr	r2, [sp, #12]
 80121ba:	001d      	movs	r5, r3
 80121bc:	3a01      	subs	r2, #1
 80121be:	9203      	str	r2, [sp, #12]
 80121c0:	e7bb      	b.n	801213a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 80121c2:	46c0      	nop			@ (mov r8, r8)
 80121c4:	20000050 	.word	0x20000050
 80121c8:	ffffdfff 	.word	0xffffdfff

080121cc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80121cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ce:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80121d0:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80121d2:	b085      	sub	sp, #20
 80121d4:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 80121d6:	ab02      	add	r3, sp, #8
 80121d8:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80121da:	0004      	movs	r4, r0
 80121dc:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80121de:	f7fc f84f 	bl	800e280 <HAL_GetTick>
 80121e2:	19ed      	adds	r5, r5, r7
 80121e4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80121e6:	f7fc f84b 	bl	800e280 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80121ea:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80121ec:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 80121ee:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80121f0:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80121f2:	4b2a      	ldr	r3, [pc, #168]	@ (801229c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	4353      	muls	r3, r2
 80121f8:	0d1b      	lsrs	r3, r3, #20
 80121fa:	436b      	muls	r3, r5
 80121fc:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80121fe:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8012200:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8012202:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8012204:	688b      	ldr	r3, [r1, #8]
 8012206:	0018      	movs	r0, r3
 8012208:	4030      	ands	r0, r6
 801220a:	4233      	tst	r3, r6
 801220c:	d03b      	beq.n	8012286 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801220e:	23c0      	movs	r3, #192	@ 0xc0
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	429e      	cmp	r6, r3
 8012214:	d104      	bne.n	8012220 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	7b1b      	ldrb	r3, [r3, #12]
 801221a:	b2db      	uxtb	r3, r3
 801221c:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801221e:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012220:	1c7b      	adds	r3, r7, #1
 8012222:	d0ef      	beq.n	8012204 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012224:	f7fc f82c 	bl	800e280 <HAL_GetTick>
 8012228:	9b00      	ldr	r3, [sp, #0]
 801222a:	1ac0      	subs	r0, r0, r3
 801222c:	42a8      	cmp	r0, r5
 801222e:	d32c      	bcc.n	801228a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012230:	21e0      	movs	r1, #224	@ 0xe0
 8012232:	6823      	ldr	r3, [r4, #0]
 8012234:	685a      	ldr	r2, [r3, #4]
 8012236:	438a      	bics	r2, r1
 8012238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801223a:	2282      	movs	r2, #130	@ 0x82
 801223c:	6861      	ldr	r1, [r4, #4]
 801223e:	0052      	lsls	r2, r2, #1
 8012240:	4291      	cmp	r1, r2
 8012242:	d10c      	bne.n	801225e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8012244:	2180      	movs	r1, #128	@ 0x80
 8012246:	68a2      	ldr	r2, [r4, #8]
 8012248:	0209      	lsls	r1, r1, #8
 801224a:	428a      	cmp	r2, r1
 801224c:	d003      	beq.n	8012256 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801224e:	2180      	movs	r1, #128	@ 0x80
 8012250:	00c9      	lsls	r1, r1, #3
 8012252:	428a      	cmp	r2, r1
 8012254:	d103      	bne.n	801225e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012256:	2140      	movs	r1, #64	@ 0x40
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	438a      	bics	r2, r1
 801225c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801225e:	2180      	movs	r1, #128	@ 0x80
 8012260:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8012262:	0189      	lsls	r1, r1, #6
 8012264:	428a      	cmp	r2, r1
 8012266:	d106      	bne.n	8012276 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8012268:	6819      	ldr	r1, [r3, #0]
 801226a:	480d      	ldr	r0, [pc, #52]	@ (80122a0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 801226c:	4001      	ands	r1, r0
 801226e:	6019      	str	r1, [r3, #0]
 8012270:	6819      	ldr	r1, [r3, #0]
 8012272:	430a      	orrs	r2, r1
 8012274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012276:	0023      	movs	r3, r4
 8012278:	2201      	movs	r2, #1
 801227a:	335d      	adds	r3, #93	@ 0x5d
 801227c:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801227e:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8012280:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8012282:	345c      	adds	r4, #92	@ 0x5c
 8012284:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8012286:	b005      	add	sp, #20
 8012288:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 801228a:	9b03      	ldr	r3, [sp, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d000      	beq.n	8012292 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8012290:	002b      	movs	r3, r5
      count--;
 8012292:	9a03      	ldr	r2, [sp, #12]
 8012294:	001d      	movs	r5, r3
 8012296:	3a01      	subs	r2, #1
 8012298:	9203      	str	r2, [sp, #12]
 801229a:	e7b0      	b.n	80121fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 801229c:	20000050 	.word	0x20000050
 80122a0:	ffffdfff 	.word	0xffffdfff

080122a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80122a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122a6:	2382      	movs	r3, #130	@ 0x82
{
 80122a8:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122aa:	6842      	ldr	r2, [r0, #4]
{
 80122ac:	0004      	movs	r4, r0
 80122ae:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122b0:	005b      	lsls	r3, r3, #1
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d10d      	bne.n	80122d2 <SPI_EndRxTransaction+0x2e>
 80122b6:	2280      	movs	r2, #128	@ 0x80
 80122b8:	6883      	ldr	r3, [r0, #8]
 80122ba:	0212      	lsls	r2, r2, #8
 80122bc:	4293      	cmp	r3, r2
 80122be:	d003      	beq.n	80122c8 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80122c0:	2280      	movs	r2, #128	@ 0x80
 80122c2:	00d2      	lsls	r2, r2, #3
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d104      	bne.n	80122d2 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80122c8:	2140      	movs	r1, #64	@ 0x40
 80122ca:	6822      	ldr	r2, [r4, #0]
 80122cc:	6813      	ldr	r3, [r2, #0]
 80122ce:	438b      	bics	r3, r1
 80122d0:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80122d2:	003a      	movs	r2, r7
 80122d4:	0031      	movs	r1, r6
 80122d6:	0020      	movs	r0, r4
 80122d8:	f7ff ff1c 	bl	8012114 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80122dc:	1e05      	subs	r5, r0, #0
 80122de:	d005      	beq.n	80122ec <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122e0:	2320      	movs	r3, #32
 80122e2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80122e4:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122e6:	4313      	orrs	r3, r2
 80122e8:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80122ea:	e016      	b.n	801231a <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122ec:	2382      	movs	r3, #130	@ 0x82
 80122ee:	6862      	ldr	r2, [r4, #4]
 80122f0:	005b      	lsls	r3, r3, #1
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d111      	bne.n	801231a <SPI_EndRxTransaction+0x76>
 80122f6:	2280      	movs	r2, #128	@ 0x80
 80122f8:	68a3      	ldr	r3, [r4, #8]
 80122fa:	0212      	lsls	r2, r2, #8
 80122fc:	4293      	cmp	r3, r2
 80122fe:	d003      	beq.n	8012308 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012300:	2280      	movs	r2, #128	@ 0x80
 8012302:	00d2      	lsls	r2, r2, #3
 8012304:	4293      	cmp	r3, r2
 8012306:	d108      	bne.n	801231a <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012308:	21c0      	movs	r1, #192	@ 0xc0
 801230a:	003b      	movs	r3, r7
 801230c:	0032      	movs	r2, r6
 801230e:	0020      	movs	r0, r4
 8012310:	00c9      	lsls	r1, r1, #3
 8012312:	f7ff ff5b 	bl	80121cc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8012316:	2800      	cmp	r0, #0
 8012318:	d1e2      	bne.n	80122e0 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 801231a:	0028      	movs	r0, r5
 801231c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801231e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801231e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012320:	0013      	movs	r3, r2
{
 8012322:	000d      	movs	r5, r1
 8012324:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012326:	000a      	movs	r2, r1
 8012328:	21c0      	movs	r1, #192	@ 0xc0
 801232a:	0149      	lsls	r1, r1, #5
{
 801232c:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801232e:	f7ff ff4d 	bl	80121cc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8012332:	2800      	cmp	r0, #0
 8012334:	d005      	beq.n	8012342 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012336:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8012338:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801233a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801233c:	4313      	orrs	r3, r2
 801233e:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8012340:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012342:	0032      	movs	r2, r6
 8012344:	0029      	movs	r1, r5
 8012346:	0020      	movs	r0, r4
 8012348:	f7ff fee4 	bl	8012114 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 801234c:	2800      	cmp	r0, #0
 801234e:	d1f2      	bne.n	8012336 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012350:	21c0      	movs	r1, #192	@ 0xc0
 8012352:	0033      	movs	r3, r6
 8012354:	002a      	movs	r2, r5
 8012356:	0020      	movs	r0, r4
 8012358:	00c9      	lsls	r1, r1, #3
 801235a:	f7ff ff37 	bl	80121cc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 801235e:	2800      	cmp	r0, #0
 8012360:	d0ee      	beq.n	8012340 <SPI_EndRxTxTransaction+0x22>
 8012362:	e7e8      	b.n	8012336 <SPI_EndRxTxTransaction+0x18>

08012364 <HAL_SPI_Init>:
{
 8012364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012366:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012368:	2001      	movs	r0, #1
  if (hspi == NULL)
 801236a:	2c00      	cmp	r4, #0
 801236c:	d063      	beq.n	8012436 <HAL_SPI_Init+0xd2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801236e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012370:	2b00      	cmp	r3, #0
 8012372:	d161      	bne.n	8012438 <HAL_SPI_Init+0xd4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012374:	2282      	movs	r2, #130	@ 0x82
 8012376:	6861      	ldr	r1, [r4, #4]
 8012378:	0052      	lsls	r2, r2, #1
 801237a:	4291      	cmp	r1, r2
 801237c:	d000      	beq.n	8012380 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801237e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012380:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8012382:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012384:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8012386:	355d      	adds	r5, #93	@ 0x5d
 8012388:	782b      	ldrb	r3, [r5, #0]
 801238a:	b2da      	uxtb	r2, r3
 801238c:	2b00      	cmp	r3, #0
 801238e:	d105      	bne.n	801239c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8012390:	0023      	movs	r3, r4
 8012392:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8012394:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8012396:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8012398:	f7f8 f8f8 	bl	800a58c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 801239c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 801239e:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80123a0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80123a2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123a4:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80123a6:	680b      	ldr	r3, [r1, #0]
 80123a8:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123aa:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 80123ac:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123ae:	00d2      	lsls	r2, r2, #3
 80123b0:	2300      	movs	r3, #0
 80123b2:	4296      	cmp	r6, r2
 80123b4:	d944      	bls.n	8012440 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80123b6:	22f0      	movs	r2, #240	@ 0xf0
 80123b8:	0018      	movs	r0, r3
 80123ba:	0112      	lsls	r2, r2, #4
 80123bc:	4296      	cmp	r6, r2
 80123be:	d000      	beq.n	80123c2 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80123c0:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80123c2:	2282      	movs	r2, #130	@ 0x82
 80123c4:	2784      	movs	r7, #132	@ 0x84
 80123c6:	6863      	ldr	r3, [r4, #4]
 80123c8:	0052      	lsls	r2, r2, #1
 80123ca:	4013      	ands	r3, r2
 80123cc:	68a2      	ldr	r2, [r4, #8]
 80123ce:	023f      	lsls	r7, r7, #8
 80123d0:	403a      	ands	r2, r7
 80123d2:	2702      	movs	r7, #2
 80123d4:	4313      	orrs	r3, r2
 80123d6:	6922      	ldr	r2, [r4, #16]
 80123d8:	69a5      	ldr	r5, [r4, #24]
 80123da:	403a      	ands	r2, r7
 80123dc:	4313      	orrs	r3, r2
 80123de:	2201      	movs	r2, #1
 80123e0:	6967      	ldr	r7, [r4, #20]
 80123e2:	4017      	ands	r7, r2
 80123e4:	433b      	orrs	r3, r7
 80123e6:	2780      	movs	r7, #128	@ 0x80
 80123e8:	00bf      	lsls	r7, r7, #2
 80123ea:	402f      	ands	r7, r5
 80123ec:	433b      	orrs	r3, r7
 80123ee:	69e7      	ldr	r7, [r4, #28]
 80123f0:	3237      	adds	r2, #55	@ 0x37
 80123f2:	4017      	ands	r7, r2
 80123f4:	433b      	orrs	r3, r7
 80123f6:	6a27      	ldr	r7, [r4, #32]
 80123f8:	3248      	adds	r2, #72	@ 0x48
 80123fa:	4017      	ands	r7, r2
 80123fc:	2280      	movs	r2, #128	@ 0x80
 80123fe:	433b      	orrs	r3, r7
 8012400:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8012402:	0192      	lsls	r2, r2, #6
 8012404:	4017      	ands	r7, r2
 8012406:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012408:	2710      	movs	r7, #16
 801240a:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801240c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801240e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012410:	0c2d      	lsrs	r5, r5, #16
 8012412:	403b      	ands	r3, r7
 8012414:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8012416:	4017      	ands	r7, r2
 8012418:	433b      	orrs	r3, r7
 801241a:	27f0      	movs	r7, #240	@ 0xf0
 801241c:	013f      	lsls	r7, r7, #4
 801241e:	403e      	ands	r6, r7
 8012420:	4333      	orrs	r3, r6
 8012422:	2604      	movs	r6, #4
 8012424:	4035      	ands	r5, r6
 8012426:	432b      	orrs	r3, r5
 8012428:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801242a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801242c:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 801242e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012430:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012432:	345d      	adds	r4, #93	@ 0x5d
 8012434:	7023      	strb	r3, [r4, #0]
}
 8012436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012438:	2300      	movs	r3, #0
 801243a:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801243c:	6163      	str	r3, [r4, #20]
 801243e:	e79f      	b.n	8012380 <HAL_SPI_Init+0x1c>
 8012440:	2080      	movs	r0, #128	@ 0x80
 8012442:	0140      	lsls	r0, r0, #5
 8012444:	e7ba      	b.n	80123bc <HAL_SPI_Init+0x58>

08012446 <HAL_SPI_Transmit>:
{
 8012446:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012448:	b085      	sub	sp, #20
 801244a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 801244c:	0003      	movs	r3, r0
 801244e:	335c      	adds	r3, #92	@ 0x5c
{
 8012450:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8012452:	781a      	ldrb	r2, [r3, #0]
{
 8012454:	0004      	movs	r4, r0
 8012456:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8012458:	2702      	movs	r7, #2
 801245a:	2a01      	cmp	r2, #1
 801245c:	d100      	bne.n	8012460 <HAL_SPI_Transmit+0x1a>
 801245e:	e082      	b.n	8012566 <HAL_SPI_Transmit+0x120>
 8012460:	2201      	movs	r2, #1
 8012462:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8012464:	f7fb ff0c 	bl	800e280 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8012468:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 801246a:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 801246c:	335d      	adds	r3, #93	@ 0x5d
 801246e:	781a      	ldrb	r2, [r3, #0]
 8012470:	b2d7      	uxtb	r7, r2
 8012472:	2a01      	cmp	r2, #1
 8012474:	d000      	beq.n	8012478 <HAL_SPI_Transmit+0x32>
 8012476:	e0a6      	b.n	80125c6 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8012478:	2d00      	cmp	r5, #0
 801247a:	d071      	beq.n	8012560 <HAL_SPI_Transmit+0x11a>
 801247c:	2e00      	cmp	r6, #0
 801247e:	d06f      	beq.n	8012560 <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012480:	3202      	adds	r2, #2
 8012482:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012484:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8012486:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012488:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801248a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801248c:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 801248e:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8012490:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8012492:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8012494:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8012496:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012498:	2280      	movs	r2, #128	@ 0x80
 801249a:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 801249c:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801249e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80124a0:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 80124a2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80124a4:	4291      	cmp	r1, r2
 80124a6:	d108      	bne.n	80124ba <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80124a8:	2140      	movs	r1, #64	@ 0x40
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	438a      	bics	r2, r1
 80124ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80124b0:	2280      	movs	r2, #128	@ 0x80
 80124b2:	6819      	ldr	r1, [r3, #0]
 80124b4:	01d2      	lsls	r2, r2, #7
 80124b6:	430a      	orrs	r2, r1
 80124b8:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80124ba:	2240      	movs	r2, #64	@ 0x40
 80124bc:	6819      	ldr	r1, [r3, #0]
 80124be:	4211      	tst	r1, r2
 80124c0:	d102      	bne.n	80124c8 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80124c2:	6819      	ldr	r1, [r3, #0]
 80124c4:	430a      	orrs	r2, r1
 80124c6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80124c8:	21e0      	movs	r1, #224	@ 0xe0
 80124ca:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124cc:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80124ce:	00c9      	lsls	r1, r1, #3
 80124d0:	4288      	cmp	r0, r1
 80124d2:	d94b      	bls.n	801256c <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124d4:	2a00      	cmp	r2, #0
 80124d6:	d001      	beq.n	80124dc <HAL_SPI_Transmit+0x96>
 80124d8:	2e01      	cmp	r6, #1
 80124da:	d107      	bne.n	80124ec <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80124dc:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80124de:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80124e0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80124e2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80124e4:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80124e6:	3b01      	subs	r3, #1
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80124ec:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80124ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d119      	bne.n	8012528 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80124f4:	0020      	movs	r0, r4
 80124f6:	9a01      	ldr	r2, [sp, #4]
 80124f8:	9900      	ldr	r1, [sp, #0]
 80124fa:	f7ff ff10 	bl	801231e <SPI_EndRxTxTransaction>
 80124fe:	2800      	cmp	r0, #0
 8012500:	d15e      	bne.n	80125c0 <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012502:	68a3      	ldr	r3, [r4, #8]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d106      	bne.n	8012516 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012508:	9303      	str	r3, [sp, #12]
 801250a:	6823      	ldr	r3, [r4, #0]
 801250c:	68da      	ldr	r2, [r3, #12]
 801250e:	9203      	str	r2, [sp, #12]
 8012510:	689b      	ldr	r3, [r3, #8]
 8012512:	9303      	str	r3, [sp, #12]
 8012514:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012516:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012518:	2a00      	cmp	r2, #0
 801251a:	d121      	bne.n	8012560 <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 801251c:	0023      	movs	r3, r4
 801251e:	2101      	movs	r1, #1
 8012520:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012522:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8012524:	7019      	strb	r1, [r3, #0]
 8012526:	e01b      	b.n	8012560 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012528:	6822      	ldr	r2, [r4, #0]
 801252a:	6893      	ldr	r3, [r2, #8]
 801252c:	422b      	tst	r3, r5
 801252e:	d009      	beq.n	8012544 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012530:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012532:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012534:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012536:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012538:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 801253a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801253c:	3b01      	subs	r3, #1
 801253e:	b29b      	uxth	r3, r3
 8012540:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8012542:	e7d4      	b.n	80124ee <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012544:	f7fb fe9c 	bl	800e280 <HAL_GetTick>
 8012548:	9b01      	ldr	r3, [sp, #4]
 801254a:	1ac0      	subs	r0, r0, r3
 801254c:	9b00      	ldr	r3, [sp, #0]
 801254e:	4298      	cmp	r0, r3
 8012550:	d3cd      	bcc.n	80124ee <HAL_SPI_Transmit+0xa8>
 8012552:	3301      	adds	r3, #1
 8012554:	d0cb      	beq.n	80124ee <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8012556:	0023      	movs	r3, r4
 8012558:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 801255a:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 801255c:	335d      	adds	r3, #93	@ 0x5d
 801255e:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8012560:	2300      	movs	r3, #0
 8012562:	345c      	adds	r4, #92	@ 0x5c
 8012564:	7023      	strb	r3, [r4, #0]
}
 8012566:	0038      	movs	r0, r7
 8012568:	b005      	add	sp, #20
 801256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801256c:	2a00      	cmp	r2, #0
 801256e:	d001      	beq.n	8012574 <HAL_SPI_Transmit+0x12e>
 8012570:	2e01      	cmp	r6, #1
 8012572:	d108      	bne.n	8012586 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012574:	782a      	ldrb	r2, [r5, #0]
 8012576:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012578:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801257a:	3301      	adds	r3, #1
 801257c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 801257e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012580:	3b01      	subs	r3, #1
 8012582:	b29b      	uxth	r3, r3
 8012584:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012586:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8012588:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801258a:	2b00      	cmp	r3, #0
 801258c:	d0b2      	beq.n	80124f4 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	689a      	ldr	r2, [r3, #8]
 8012592:	422a      	tst	r2, r5
 8012594:	d00a      	beq.n	80125ac <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012596:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012598:	7812      	ldrb	r2, [r2, #0]
 801259a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801259c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801259e:	3301      	adds	r3, #1
 80125a0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80125a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80125a4:	3b01      	subs	r3, #1
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80125aa:	e7ed      	b.n	8012588 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80125ac:	f7fb fe68 	bl	800e280 <HAL_GetTick>
 80125b0:	9b01      	ldr	r3, [sp, #4]
 80125b2:	1ac0      	subs	r0, r0, r3
 80125b4:	9b00      	ldr	r3, [sp, #0]
 80125b6:	4298      	cmp	r0, r3
 80125b8:	d3e6      	bcc.n	8012588 <HAL_SPI_Transmit+0x142>
 80125ba:	3301      	adds	r3, #1
 80125bc:	d0e4      	beq.n	8012588 <HAL_SPI_Transmit+0x142>
 80125be:	e7ca      	b.n	8012556 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80125c0:	2320      	movs	r3, #32
 80125c2:	6623      	str	r3, [r4, #96]	@ 0x60
 80125c4:	e79d      	b.n	8012502 <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 80125c6:	2702      	movs	r7, #2
 80125c8:	e7ca      	b.n	8012560 <HAL_SPI_Transmit+0x11a>
	...

080125cc <HAL_SPI_TransmitReceive>:
{
 80125cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125ce:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80125d0:	0003      	movs	r3, r0
 80125d2:	335c      	adds	r3, #92	@ 0x5c
{
 80125d4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80125d6:	781a      	ldrb	r2, [r3, #0]
{
 80125d8:	0004      	movs	r4, r0
 80125da:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80125dc:	2002      	movs	r0, #2
 80125de:	2a01      	cmp	r2, #1
 80125e0:	d01b      	beq.n	801261a <HAL_SPI_TransmitReceive+0x4e>
 80125e2:	2201      	movs	r2, #1
 80125e4:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80125e6:	f7fb fe4b 	bl	800e280 <HAL_GetTick>
  tmp_state           = hspi->State;
 80125ea:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80125ec:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80125ee:	335d      	adds	r3, #93	@ 0x5d
 80125f0:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80125f2:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80125f4:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d009      	beq.n	801260e <HAL_SPI_TransmitReceive+0x42>
 80125fa:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 80125fc:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80125fe:	005b      	lsls	r3, r3, #1
 8012600:	4299      	cmp	r1, r3
 8012602:	d107      	bne.n	8012614 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012604:	68a3      	ldr	r3, [r4, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d104      	bne.n	8012614 <HAL_SPI_TransmitReceive+0x48>
 801260a:	2a04      	cmp	r2, #4
 801260c:	d102      	bne.n	8012614 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801260e:	2d00      	cmp	r5, #0
 8012610:	d104      	bne.n	801261c <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8012612:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8012614:	2300      	movs	r3, #0
 8012616:	345c      	adds	r4, #92	@ 0x5c
 8012618:	7023      	strb	r3, [r4, #0]
}
 801261a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801261c:	2f00      	cmp	r7, #0
 801261e:	d0f8      	beq.n	8012612 <HAL_SPI_TransmitReceive+0x46>
 8012620:	2e00      	cmp	r6, #0
 8012622:	d0f6      	beq.n	8012612 <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012624:	0023      	movs	r3, r4
 8012626:	335d      	adds	r3, #93	@ 0x5d
 8012628:	781a      	ldrb	r2, [r3, #0]
 801262a:	2a04      	cmp	r2, #4
 801262c:	d001      	beq.n	8012632 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801262e:	2205      	movs	r2, #5
 8012630:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8012632:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012634:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8012636:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012638:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801263a:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801263c:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801263e:	1da2      	adds	r2, r4, #6
 8012640:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012642:	22e0      	movs	r2, #224	@ 0xe0
 8012644:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8012646:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012648:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801264a:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801264c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 801264e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8012650:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012652:	00d2      	lsls	r2, r2, #3
 8012654:	4290      	cmp	r0, r2
 8012656:	d935      	bls.n	80126c4 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012658:	685a      	ldr	r2, [r3, #4]
 801265a:	4f60      	ldr	r7, [pc, #384]	@ (80127dc <HAL_SPI_TransmitReceive+0x210>)
 801265c:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801265e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012660:	2240      	movs	r2, #64	@ 0x40
 8012662:	681f      	ldr	r7, [r3, #0]
 8012664:	4217      	tst	r7, r2
 8012666:	d102      	bne.n	801266e <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8012668:	681f      	ldr	r7, [r3, #0]
 801266a:	433a      	orrs	r2, r7
 801266c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801266e:	22e0      	movs	r2, #224	@ 0xe0
 8012670:	00d2      	lsls	r2, r2, #3
 8012672:	4290      	cmp	r0, r2
 8012674:	d961      	bls.n	801273a <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012676:	2900      	cmp	r1, #0
 8012678:	d001      	beq.n	801267e <HAL_SPI_TransmitReceive+0xb2>
 801267a:	2e01      	cmp	r6, #1
 801267c:	d107      	bne.n	801268e <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801267e:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012680:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012682:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8012684:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012686:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8012688:	3b01      	subs	r3, #1
 801268a:	b29b      	uxth	r3, r3
 801268c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 801268e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012690:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012692:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012694:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012696:	2b00      	cmp	r3, #0
 8012698:	d119      	bne.n	80126ce <HAL_SPI_TransmitReceive+0x102>
 801269a:	0023      	movs	r3, r4
 801269c:	3308      	adds	r3, #8
 801269e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d114      	bne.n	80126ce <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80126a4:	0020      	movs	r0, r4
 80126a6:	9a01      	ldr	r2, [sp, #4]
 80126a8:	9908      	ldr	r1, [sp, #32]
 80126aa:	f7ff fe38 	bl	801231e <SPI_EndRxTxTransaction>
 80126ae:	2800      	cmp	r0, #0
 80126b0:	d000      	beq.n	80126b4 <HAL_SPI_TransmitReceive+0xe8>
 80126b2:	e08e      	b.n	80127d2 <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80126b4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1ab      	bne.n	8012612 <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 80126ba:	0023      	movs	r3, r4
 80126bc:	2201      	movs	r2, #1
 80126be:	335d      	adds	r3, #93	@ 0x5d
 80126c0:	701a      	strb	r2, [r3, #0]
 80126c2:	e7a7      	b.n	8012614 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80126c4:	2280      	movs	r2, #128	@ 0x80
 80126c6:	685f      	ldr	r7, [r3, #4]
 80126c8:	0152      	lsls	r2, r2, #5
 80126ca:	433a      	orrs	r2, r7
 80126cc:	e7c7      	b.n	801265e <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80126ce:	6820      	ldr	r0, [r4, #0]
 80126d0:	6883      	ldr	r3, [r0, #8]
 80126d2:	423b      	tst	r3, r7
 80126d4:	d00e      	beq.n	80126f4 <HAL_SPI_TransmitReceive+0x128>
 80126d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00b      	beq.n	80126f4 <HAL_SPI_TransmitReceive+0x128>
 80126dc:	2d01      	cmp	r5, #1
 80126de:	d108      	bne.n	80126f2 <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80126e2:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80126e4:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126e6:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80126e8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80126ea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80126ec:	3b01      	subs	r3, #1
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 80126f2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80126f4:	6883      	ldr	r3, [r0, #8]
 80126f6:	0019      	movs	r1, r3
 80126f8:	4031      	ands	r1, r6
 80126fa:	4233      	tst	r3, r6
 80126fc:	d00e      	beq.n	801271c <HAL_SPI_TransmitReceive+0x150>
 80126fe:	0022      	movs	r2, r4
 8012700:	3208      	adds	r2, #8
 8012702:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012704:	2b00      	cmp	r3, #0
 8012706:	d009      	beq.n	801271c <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8012708:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801270a:	68c0      	ldr	r0, [r0, #12]
 801270c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801270e:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012710:	3302      	adds	r3, #2
 8012712:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012714:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012716:	3b01      	subs	r3, #1
 8012718:	b29b      	uxth	r3, r3
 801271a:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801271c:	f7fb fdb0 	bl	800e280 <HAL_GetTick>
 8012720:	9b01      	ldr	r3, [sp, #4]
 8012722:	1ac0      	subs	r0, r0, r3
 8012724:	9b08      	ldr	r3, [sp, #32]
 8012726:	4298      	cmp	r0, r3
 8012728:	d3b4      	bcc.n	8012694 <HAL_SPI_TransmitReceive+0xc8>
 801272a:	3301      	adds	r3, #1
 801272c:	d0b2      	beq.n	8012694 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 801272e:	0023      	movs	r3, r4
 8012730:	2201      	movs	r2, #1
 8012732:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8012734:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8012736:	701a      	strb	r2, [r3, #0]
        goto error;
 8012738:	e76c      	b.n	8012614 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801273a:	2900      	cmp	r1, #0
 801273c:	d001      	beq.n	8012742 <HAL_SPI_TransmitReceive+0x176>
 801273e:	2e01      	cmp	r6, #1
 8012740:	d108      	bne.n	8012754 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012742:	782a      	ldrb	r2, [r5, #0]
 8012744:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012746:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012748:	3301      	adds	r3, #1
 801274a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 801274c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801274e:	3b01      	subs	r3, #1
 8012750:	b29b      	uxth	r3, r3
 8012752:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8012754:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012756:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012758:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801275a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801275c:	2b00      	cmp	r3, #0
 801275e:	d104      	bne.n	801276a <HAL_SPI_TransmitReceive+0x19e>
 8012760:	0023      	movs	r3, r4
 8012762:	3308      	adds	r3, #8
 8012764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012766:	2b00      	cmp	r3, #0
 8012768:	d09c      	beq.n	80126a4 <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	689a      	ldr	r2, [r3, #8]
 801276e:	423a      	tst	r2, r7
 8012770:	d00f      	beq.n	8012792 <HAL_SPI_TransmitReceive+0x1c6>
 8012772:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8012774:	2a00      	cmp	r2, #0
 8012776:	d00c      	beq.n	8012792 <HAL_SPI_TransmitReceive+0x1c6>
 8012778:	2d01      	cmp	r5, #1
 801277a:	d109      	bne.n	8012790 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801277c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801277e:	7812      	ldrb	r2, [r2, #0]
 8012780:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8012782:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012784:	3301      	adds	r3, #1
 8012786:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8012788:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801278a:	3b01      	subs	r3, #1
 801278c:	b29b      	uxth	r3, r3
 801278e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8012790:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012792:	6823      	ldr	r3, [r4, #0]
 8012794:	689a      	ldr	r2, [r3, #8]
 8012796:	0011      	movs	r1, r2
 8012798:	4031      	ands	r1, r6
 801279a:	4232      	tst	r2, r6
 801279c:	d00f      	beq.n	80127be <HAL_SPI_TransmitReceive+0x1f2>
 801279e:	0022      	movs	r2, r4
 80127a0:	3208      	adds	r2, #8
 80127a2:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d00a      	beq.n	80127be <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 80127a8:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80127aa:	7b1b      	ldrb	r3, [r3, #12]
 80127ac:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80127ae:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 80127b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80127b2:	3301      	adds	r3, #1
 80127b4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80127b6:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 80127b8:	3b01      	subs	r3, #1
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80127be:	f7fb fd5f 	bl	800e280 <HAL_GetTick>
 80127c2:	9b01      	ldr	r3, [sp, #4]
 80127c4:	1ac0      	subs	r0, r0, r3
 80127c6:	9b08      	ldr	r3, [sp, #32]
 80127c8:	4298      	cmp	r0, r3
 80127ca:	d3c6      	bcc.n	801275a <HAL_SPI_TransmitReceive+0x18e>
 80127cc:	3301      	adds	r3, #1
 80127ce:	d0c4      	beq.n	801275a <HAL_SPI_TransmitReceive+0x18e>
 80127d0:	e7ad      	b.n	801272e <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80127d2:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80127d4:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80127d6:	6623      	str	r3, [r4, #96]	@ 0x60
 80127d8:	e76c      	b.n	80126b4 <HAL_SPI_TransmitReceive+0xe8>
 80127da:	46c0      	nop			@ (mov r8, r8)
 80127dc:	ffffefff 	.word	0xffffefff

080127e0 <HAL_SPI_Receive>:
{
 80127e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 80127e2:	0006      	movs	r6, r0
{
 80127e4:	b087      	sub	sp, #28
 80127e6:	9104      	str	r1, [sp, #16]
 80127e8:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80127ea:	365d      	adds	r6, #93	@ 0x5d
 80127ec:	7833      	ldrb	r3, [r6, #0]
{
 80127ee:	0004      	movs	r4, r0
 80127f0:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 80127f2:	b2dd      	uxtb	r5, r3
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	d000      	beq.n	80127fa <HAL_SPI_Receive+0x1a>
 80127f8:	e0aa      	b.n	8012950 <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80127fa:	3304      	adds	r3, #4
 80127fc:	6842      	ldr	r2, [r0, #4]
 80127fe:	33ff      	adds	r3, #255	@ 0xff
 8012800:	429a      	cmp	r2, r3
 8012802:	d10e      	bne.n	8012822 <HAL_SPI_Receive+0x42>
 8012804:	6883      	ldr	r3, [r0, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d10b      	bne.n	8012822 <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801280a:	3304      	adds	r3, #4
 801280c:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801280e:	9b03      	ldr	r3, [sp, #12]
 8012810:	000a      	movs	r2, r1
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	003b      	movs	r3, r7
 8012816:	f7ff fed9 	bl	80125cc <HAL_SPI_TransmitReceive>
 801281a:	0005      	movs	r5, r0
}
 801281c:	0028      	movs	r0, r5
 801281e:	b007      	add	sp, #28
 8012820:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8012822:	0023      	movs	r3, r4
 8012824:	335c      	adds	r3, #92	@ 0x5c
 8012826:	781a      	ldrb	r2, [r3, #0]
 8012828:	2a01      	cmp	r2, #1
 801282a:	d100      	bne.n	801282e <HAL_SPI_Receive+0x4e>
 801282c:	e092      	b.n	8012954 <HAL_SPI_Receive+0x174>
 801282e:	2201      	movs	r2, #1
 8012830:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8012832:	f7fb fd25 	bl	800e280 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8012836:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 8012838:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 801283a:	2b00      	cmp	r3, #0
 801283c:	d077      	beq.n	801292e <HAL_SPI_Receive+0x14e>
 801283e:	2f00      	cmp	r7, #0
 8012840:	d075      	beq.n	801292e <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012842:	2304      	movs	r3, #4
 8012844:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012846:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012848:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801284a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801284c:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 801284e:	1da2      	adds	r2, r4, #6
 8012850:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 8012852:	3202      	adds	r2, #2
 8012854:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012856:	22e0      	movs	r2, #224	@ 0xe0
 8012858:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801285a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 801285c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 801285e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8012860:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012862:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012864:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012866:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012868:	4291      	cmp	r1, r2
 801286a:	d92f      	bls.n	80128cc <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801286c:	685a      	ldr	r2, [r3, #4]
 801286e:	483a      	ldr	r0, [pc, #232]	@ (8012958 <HAL_SPI_Receive+0x178>)
 8012870:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012872:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012874:	2280      	movs	r2, #128	@ 0x80
 8012876:	68a0      	ldr	r0, [r4, #8]
 8012878:	0212      	lsls	r2, r2, #8
 801287a:	4290      	cmp	r0, r2
 801287c:	d107      	bne.n	801288e <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 801287e:	2040      	movs	r0, #64	@ 0x40
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	4382      	bics	r2, r0
 8012884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	4834      	ldr	r0, [pc, #208]	@ (801295c <HAL_SPI_Receive+0x17c>)
 801288a:	4002      	ands	r2, r0
 801288c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801288e:	2240      	movs	r2, #64	@ 0x40
 8012890:	6818      	ldr	r0, [r3, #0]
 8012892:	4210      	tst	r0, r2
 8012894:	d102      	bne.n	801289c <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8012896:	6818      	ldr	r0, [r3, #0]
 8012898:	4302      	orrs	r2, r0
 801289a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801289c:	23e0      	movs	r3, #224	@ 0xe0
 801289e:	0027      	movs	r7, r4
 80128a0:	00db      	lsls	r3, r3, #3
 80128a2:	3708      	adds	r7, #8
 80128a4:	4299      	cmp	r1, r3
 80128a6:	d925      	bls.n	80128f4 <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 80128a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d025      	beq.n	80128fa <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80128ae:	2101      	movs	r1, #1
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	689a      	ldr	r2, [r3, #8]
 80128b4:	420a      	tst	r2, r1
 80128b6:	d03e      	beq.n	8012936 <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80128b8:	68da      	ldr	r2, [r3, #12]
 80128ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80128bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80128be:	3302      	adds	r3, #2
 80128c0:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80128c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80128c4:	3b01      	subs	r3, #1
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80128ca:	e7ed      	b.n	80128a8 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80128cc:	2280      	movs	r2, #128	@ 0x80
 80128ce:	6858      	ldr	r0, [r3, #4]
 80128d0:	0152      	lsls	r2, r2, #5
 80128d2:	4302      	orrs	r2, r0
 80128d4:	e7cd      	b.n	8012872 <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80128d6:	2101      	movs	r1, #1
 80128d8:	6823      	ldr	r3, [r4, #0]
 80128da:	689a      	ldr	r2, [r3, #8]
 80128dc:	420a      	tst	r2, r1
 80128de:	d01a      	beq.n	8012916 <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80128e0:	7b1b      	ldrb	r3, [r3, #12]
 80128e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80128e4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80128e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80128e8:	185b      	adds	r3, r3, r1
 80128ea:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80128ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80128ee:	3b01      	subs	r3, #1
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80128f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1ed      	bne.n	80128d6 <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80128fa:	0020      	movs	r0, r4
 80128fc:	9a05      	ldr	r2, [sp, #20]
 80128fe:	9903      	ldr	r1, [sp, #12]
 8012900:	f7ff fcd0 	bl	80122a4 <SPI_EndRxTransaction>
 8012904:	2800      	cmp	r0, #0
 8012906:	d120      	bne.n	801294a <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012908:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801290a:	2b00      	cmp	r3, #0
 801290c:	d10f      	bne.n	801292e <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 801290e:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012910:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 8012912:	7032      	strb	r2, [r6, #0]
 8012914:	e00b      	b.n	801292e <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012916:	f7fb fcb3 	bl	800e280 <HAL_GetTick>
 801291a:	9b05      	ldr	r3, [sp, #20]
 801291c:	1ac0      	subs	r0, r0, r3
 801291e:	9b03      	ldr	r3, [sp, #12]
 8012920:	4298      	cmp	r0, r3
 8012922:	d3e7      	bcc.n	80128f4 <HAL_SPI_Receive+0x114>
 8012924:	3301      	adds	r3, #1
 8012926:	d0e5      	beq.n	80128f4 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8012928:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 801292a:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 801292c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 801292e:	2300      	movs	r3, #0
 8012930:	345c      	adds	r4, #92	@ 0x5c
 8012932:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8012934:	e772      	b.n	801281c <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012936:	f7fb fca3 	bl	800e280 <HAL_GetTick>
 801293a:	9b05      	ldr	r3, [sp, #20]
 801293c:	1ac0      	subs	r0, r0, r3
 801293e:	9b03      	ldr	r3, [sp, #12]
 8012940:	4298      	cmp	r0, r3
 8012942:	d3b1      	bcc.n	80128a8 <HAL_SPI_Receive+0xc8>
 8012944:	3301      	adds	r3, #1
 8012946:	d0af      	beq.n	80128a8 <HAL_SPI_Receive+0xc8>
 8012948:	e7ee      	b.n	8012928 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801294a:	2320      	movs	r3, #32
 801294c:	6623      	str	r3, [r4, #96]	@ 0x60
 801294e:	e7db      	b.n	8012908 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 8012950:	2502      	movs	r5, #2
 8012952:	e7ec      	b.n	801292e <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 8012954:	2502      	movs	r5, #2
 8012956:	e761      	b.n	801281c <HAL_SPI_Receive+0x3c>
 8012958:	ffffefff 	.word	0xffffefff
 801295c:	ffffbfff 	.word	0xffffbfff

08012960 <HAL_SPI_Transmit_DMA>:
{
 8012960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8012962:	0006      	movs	r6, r0
 8012964:	365c      	adds	r6, #92	@ 0x5c
 8012966:	7833      	ldrb	r3, [r6, #0]
{
 8012968:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 801296a:	2502      	movs	r5, #2
 801296c:	2b01      	cmp	r3, #1
 801296e:	d057      	beq.n	8012a20 <HAL_SPI_Transmit_DMA+0xc0>
 8012970:	2301      	movs	r3, #1
 8012972:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8012974:	0003      	movs	r3, r0
 8012976:	335d      	adds	r3, #93	@ 0x5d
 8012978:	7818      	ldrb	r0, [r3, #0]
 801297a:	b2c5      	uxtb	r5, r0
 801297c:	2801      	cmp	r0, #1
 801297e:	d000      	beq.n	8012982 <HAL_SPI_Transmit_DMA+0x22>
 8012980:	e06b      	b.n	8012a5a <HAL_SPI_Transmit_DMA+0xfa>
  if ((pData == NULL) || (Size == 0U))
 8012982:	2900      	cmp	r1, #0
 8012984:	d04a      	beq.n	8012a1c <HAL_SPI_Transmit_DMA+0xbc>
 8012986:	2a00      	cmp	r2, #0
 8012988:	d048      	beq.n	8012a1c <HAL_SPI_Transmit_DMA+0xbc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801298a:	3002      	adds	r0, #2
 801298c:	7018      	strb	r0, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801298e:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8012990:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012992:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8012994:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 8012996:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012998:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801299a:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801299c:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801299e:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 80129a0:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80129a2:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80129a4:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80129a6:	2380      	movs	r3, #128	@ 0x80
 80129a8:	68a0      	ldr	r0, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80129aa:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80129ac:	021b      	lsls	r3, r3, #8
 80129ae:	4298      	cmp	r0, r3
 80129b0:	d108      	bne.n	80129c4 <HAL_SPI_Transmit_DMA+0x64>
    __HAL_SPI_DISABLE(hspi);
 80129b2:	2040      	movs	r0, #64	@ 0x40
 80129b4:	6813      	ldr	r3, [r2, #0]
 80129b6:	4383      	bics	r3, r0
 80129b8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80129ba:	2380      	movs	r3, #128	@ 0x80
 80129bc:	6810      	ldr	r0, [r2, #0]
 80129be:	01db      	lsls	r3, r3, #7
 80129c0:	4303      	orrs	r3, r0
 80129c2:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80129c4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80129c6:	4b26      	ldr	r3, [pc, #152]	@ (8012a60 <HAL_SPI_Transmit_DMA+0x100>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80129c8:	4f26      	ldr	r7, [pc, #152]	@ (8012a64 <HAL_SPI_Transmit_DMA+0x104>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80129ca:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80129cc:	4b26      	ldr	r3, [pc, #152]	@ (8012a68 <HAL_SPI_Transmit_DMA+0x108>)
 80129ce:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80129d0:	4b26      	ldr	r3, [pc, #152]	@ (8012a6c <HAL_SPI_Transmit_DMA+0x10c>)
 80129d2:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 80129d4:	2300      	movs	r3, #0
 80129d6:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80129d8:	6853      	ldr	r3, [r2, #4]
 80129da:	403b      	ands	r3, r7
 80129dc:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80129de:	23e0      	movs	r3, #224	@ 0xe0
 80129e0:	68e7      	ldr	r7, [r4, #12]
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	429f      	cmp	r7, r3
 80129e6:	d80e      	bhi.n	8012a06 <HAL_SPI_Transmit_DMA+0xa6>
 80129e8:	2380      	movs	r3, #128	@ 0x80
 80129ea:	6987      	ldr	r7, [r0, #24]
 80129ec:	00db      	lsls	r3, r3, #3
 80129ee:	429f      	cmp	r7, r3
 80129f0:	d109      	bne.n	8012a06 <HAL_SPI_Transmit_DMA+0xa6>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80129f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80129f4:	07db      	lsls	r3, r3, #31
 80129f6:	d415      	bmi.n	8012a24 <HAL_SPI_Transmit_DMA+0xc4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80129f8:	6853      	ldr	r3, [r2, #4]
 80129fa:	4f1a      	ldr	r7, [pc, #104]	@ (8012a64 <HAL_SPI_Transmit_DMA+0x104>)
 80129fc:	403b      	ands	r3, r7
 80129fe:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8012a00:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012a02:	085b      	lsrs	r3, r3, #1
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012a04:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 8012a06:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012a08:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8012a0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012a0c:	f7fc fc0c 	bl	800f228 <HAL_DMA_Start_IT>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d010      	beq.n	8012a36 <HAL_SPI_Transmit_DMA+0xd6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012a14:	2310      	movs	r3, #16
 8012a16:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012a18:	4313      	orrs	r3, r2
 8012a1a:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	7033      	strb	r3, [r6, #0]
}
 8012a20:	0028      	movs	r0, r5
 8012a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012a24:	2380      	movs	r3, #128	@ 0x80
 8012a26:	6857      	ldr	r7, [r2, #4]
 8012a28:	01db      	lsls	r3, r3, #7
 8012a2a:	433b      	orrs	r3, r7
 8012a2c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012a2e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012a30:	085b      	lsrs	r3, r3, #1
 8012a32:	3301      	adds	r3, #1
 8012a34:	e7e6      	b.n	8012a04 <HAL_SPI_Transmit_DMA+0xa4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012a36:	2240      	movs	r2, #64	@ 0x40
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	6819      	ldr	r1, [r3, #0]
 8012a3c:	4211      	tst	r1, r2
 8012a3e:	d102      	bne.n	8012a46 <HAL_SPI_Transmit_DMA+0xe6>
    __HAL_SPI_ENABLE(hspi);
 8012a40:	6819      	ldr	r1, [r3, #0]
 8012a42:	430a      	orrs	r2, r1
 8012a44:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012a46:	2220      	movs	r2, #32
 8012a48:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012a4a:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012a4c:	430a      	orrs	r2, r1
 8012a4e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012a50:	2202      	movs	r2, #2
 8012a52:	6859      	ldr	r1, [r3, #4]
 8012a54:	430a      	orrs	r2, r1
 8012a56:	605a      	str	r2, [r3, #4]
 8012a58:	e7e0      	b.n	8012a1c <HAL_SPI_Transmit_DMA+0xbc>
    errorcode = HAL_BUSY;
 8012a5a:	2502      	movs	r5, #2
 8012a5c:	e7de      	b.n	8012a1c <HAL_SPI_Transmit_DMA+0xbc>
 8012a5e:	46c0      	nop			@ (mov r8, r8)
 8012a60:	08012d89 	.word	0x08012d89
 8012a64:	ffffbfff 	.word	0xffffbfff
 8012a68:	08012dcf 	.word	0x08012dcf
 8012a6c:	08012dab 	.word	0x08012dab

08012a70 <HAL_SPI_TransmitReceive_DMA>:
{
 8012a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8012a72:	0005      	movs	r5, r0
{
 8012a74:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8012a76:	355c      	adds	r5, #92	@ 0x5c
 8012a78:	782e      	ldrb	r6, [r5, #0]
{
 8012a7a:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8012a7c:	2002      	movs	r0, #2
 8012a7e:	2e01      	cmp	r6, #1
 8012a80:	d057      	beq.n	8012b32 <HAL_SPI_TransmitReceive_DMA+0xc2>
  tmp_state           = hspi->State;
 8012a82:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8012a84:	3801      	subs	r0, #1
 8012a86:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 8012a88:	365d      	adds	r6, #93	@ 0x5d
 8012a8a:	7830      	ldrb	r0, [r6, #0]
 8012a8c:	b2c7      	uxtb	r7, r0
 8012a8e:	003a      	movs	r2, r7
  tmp_mode            = hspi->Init.Mode;
 8012a90:	6867      	ldr	r7, [r4, #4]
 8012a92:	46bc      	mov	ip, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8012a94:	2801      	cmp	r0, #1
 8012a96:	d009      	beq.n	8012aac <HAL_SPI_TransmitReceive_DMA+0x3c>
 8012a98:	2782      	movs	r7, #130	@ 0x82
    errorcode = HAL_BUSY;
 8012a9a:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8012a9c:	007f      	lsls	r7, r7, #1
 8012a9e:	45bc      	cmp	ip, r7
 8012aa0:	d145      	bne.n	8012b2e <HAL_SPI_TransmitReceive_DMA+0xbe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012aa2:	68a7      	ldr	r7, [r4, #8]
 8012aa4:	2f00      	cmp	r7, #0
 8012aa6:	d142      	bne.n	8012b2e <HAL_SPI_TransmitReceive_DMA+0xbe>
 8012aa8:	2a04      	cmp	r2, #4
 8012aaa:	d140      	bne.n	8012b2e <HAL_SPI_TransmitReceive_DMA+0xbe>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012aac:	2900      	cmp	r1, #0
 8012aae:	d03d      	beq.n	8012b2c <HAL_SPI_TransmitReceive_DMA+0xbc>
 8012ab0:	9a01      	ldr	r2, [sp, #4]
 8012ab2:	2a00      	cmp	r2, #0
 8012ab4:	d03a      	beq.n	8012b2c <HAL_SPI_TransmitReceive_DMA+0xbc>
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d038      	beq.n	8012b2c <HAL_SPI_TransmitReceive_DMA+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012aba:	7830      	ldrb	r0, [r6, #0]
 8012abc:	2804      	cmp	r0, #4
 8012abe:	d001      	beq.n	8012ac4 <HAL_SPI_TransmitReceive_DMA+0x54>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012ac0:	2005      	movs	r0, #5
 8012ac2:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ac4:	2000      	movs	r0, #0
  hspi->RxXferCount = Size;
 8012ac6:	0027      	movs	r7, r4
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012ac8:	9a01      	ldr	r2, [sp, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012aca:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012acc:	1da1      	adds	r1, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ace:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012ad0:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8012ad2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8012ad4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012ad6:	3708      	adds	r7, #8
  hspi->RxXferSize  = Size;
 8012ad8:	87cb      	strh	r3, [r1, #62]	@ 0x3e
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012ada:	6821      	ldr	r1, [r4, #0]
  hspi->RxXferCount = Size;
 8012adc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012ade:	4a46      	ldr	r2, [pc, #280]	@ (8012bf8 <HAL_SPI_TransmitReceive_DMA+0x188>)
  hspi->RxISR       = NULL;
 8012ae0:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012ae2:	6520      	str	r0, [r4, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012ae4:	6848      	ldr	r0, [r1, #4]
 8012ae6:	4010      	ands	r0, r2
 8012ae8:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012aea:	20e0      	movs	r0, #224	@ 0xe0
 8012aec:	68e2      	ldr	r2, [r4, #12]
 8012aee:	00c0      	lsls	r0, r0, #3
 8012af0:	4282      	cmp	r2, r0
 8012af2:	d91f      	bls.n	8012b34 <HAL_SPI_TransmitReceive_DMA+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012af4:	684b      	ldr	r3, [r1, #4]
 8012af6:	4841      	ldr	r0, [pc, #260]	@ (8012bfc <HAL_SPI_TransmitReceive_DMA+0x18c>)
 8012af8:	4003      	ands	r3, r0
 8012afa:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012afc:	7833      	ldrb	r3, [r6, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012afe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012b00:	2b04      	cmp	r3, #4
 8012b02:	d052      	beq.n	8012baa <HAL_SPI_TransmitReceive_DMA+0x13a>
 8012b04:	4e3e      	ldr	r6, [pc, #248]	@ (8012c00 <HAL_SPI_TransmitReceive_DMA+0x190>)
 8012b06:	4b3f      	ldr	r3, [pc, #252]	@ (8012c04 <HAL_SPI_TransmitReceive_DMA+0x194>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8012b08:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8012c08 <HAL_SPI_TransmitReceive_DMA+0x198>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012b0c:	6306      	str	r6, [r0, #48]	@ 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012b0e:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8012b10:	2300      	movs	r3, #0
 8012b12:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8012b14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012b16:	9a01      	ldr	r2, [sp, #4]
                                 hspi->RxXferCount))
 8012b18:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012b1a:	310c      	adds	r1, #12
 8012b1c:	f7fc fb84 	bl	800f228 <HAL_DMA_Start_IT>
 8012b20:	1e03      	subs	r3, r0, #0
 8012b22:	d045      	beq.n	8012bb0 <HAL_SPI_TransmitReceive_DMA+0x140>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012b24:	2310      	movs	r3, #16
 8012b26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8012b2c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8012b2e:	2300      	movs	r3, #0
 8012b30:	702b      	strb	r3, [r5, #0]
}
 8012b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012b34:	2080      	movs	r0, #128	@ 0x80
 8012b36:	684a      	ldr	r2, [r1, #4]
 8012b38:	0140      	lsls	r0, r0, #5
 8012b3a:	4310      	orrs	r0, r2
 8012b3c:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012b3e:	2080      	movs	r0, #128	@ 0x80
 8012b40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b42:	00c0      	lsls	r0, r0, #3
 8012b44:	6992      	ldr	r2, [r2, #24]
 8012b46:	4282      	cmp	r2, r0
 8012b48:	d108      	bne.n	8012b5c <HAL_SPI_TransmitReceive_DMA+0xec>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8012b4a:	07db      	lsls	r3, r3, #31
 8012b4c:	d41b      	bmi.n	8012b86 <HAL_SPI_TransmitReceive_DMA+0x116>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012b4e:	684b      	ldr	r3, [r1, #4]
 8012b50:	482e      	ldr	r0, [pc, #184]	@ (8012c0c <HAL_SPI_TransmitReceive_DMA+0x19c>)
 8012b52:	4003      	ands	r3, r0
 8012b54:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8012b56:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012b58:	085b      	lsrs	r3, r3, #1
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012b5a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012b5c:	2380      	movs	r3, #128	@ 0x80
 8012b5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b60:	00db      	lsls	r3, r3, #3
 8012b62:	6980      	ldr	r0, [r0, #24]
 8012b64:	4298      	cmp	r0, r3
 8012b66:	d1c9      	bne.n	8012afc <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012b68:	684b      	ldr	r3, [r1, #4]
 8012b6a:	4824      	ldr	r0, [pc, #144]	@ (8012bfc <HAL_SPI_TransmitReceive_DMA+0x18c>)
 8012b6c:	4003      	ands	r3, r0
 8012b6e:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8012b70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b72:	07db      	lsls	r3, r3, #31
 8012b74:	d410      	bmi.n	8012b98 <HAL_SPI_TransmitReceive_DMA+0x128>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012b76:	684b      	ldr	r3, [r1, #4]
 8012b78:	4825      	ldr	r0, [pc, #148]	@ (8012c10 <HAL_SPI_TransmitReceive_DMA+0x1a0>)
 8012b7a:	4003      	ands	r3, r0
 8012b7c:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8012b7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b80:	085b      	lsrs	r3, r3, #1
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012b82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012b84:	e7ba      	b.n	8012afc <HAL_SPI_TransmitReceive_DMA+0x8c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012b86:	2380      	movs	r3, #128	@ 0x80
 8012b88:	6848      	ldr	r0, [r1, #4]
 8012b8a:	01db      	lsls	r3, r3, #7
 8012b8c:	4303      	orrs	r3, r0
 8012b8e:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012b90:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012b92:	085b      	lsrs	r3, r3, #1
 8012b94:	3301      	adds	r3, #1
 8012b96:	e7e0      	b.n	8012b5a <HAL_SPI_TransmitReceive_DMA+0xea>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012b98:	2380      	movs	r3, #128	@ 0x80
 8012b9a:	6848      	ldr	r0, [r1, #4]
 8012b9c:	019b      	lsls	r3, r3, #6
 8012b9e:	4303      	orrs	r3, r0
 8012ba0:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012ba2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012ba4:	085b      	lsrs	r3, r3, #1
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	e7eb      	b.n	8012b82 <HAL_SPI_TransmitReceive_DMA+0x112>
 8012baa:	4e1a      	ldr	r6, [pc, #104]	@ (8012c14 <HAL_SPI_TransmitReceive_DMA+0x1a4>)
 8012bac:	4b1a      	ldr	r3, [pc, #104]	@ (8012c18 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
 8012bae:	e7ab      	b.n	8012b08 <HAL_SPI_TransmitReceive_DMA+0x98>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	6822      	ldr	r2, [r4, #0]
 8012bb4:	6850      	ldr	r0, [r2, #4]
 8012bb6:	4301      	orrs	r1, r0
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012bb8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012bba:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012bbc:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8012bbe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8012bc0:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8012bc2:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->TxXferCount))
 8012bc4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012bc6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                 hspi->TxXferCount))
 8012bc8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012bca:	320c      	adds	r2, #12
 8012bcc:	f7fc fb2c 	bl	800f228 <HAL_DMA_Start_IT>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d1a7      	bne.n	8012b24 <HAL_SPI_TransmitReceive_DMA+0xb4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012bd4:	2240      	movs	r2, #64	@ 0x40
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	6819      	ldr	r1, [r3, #0]
 8012bda:	4211      	tst	r1, r2
 8012bdc:	d102      	bne.n	8012be4 <HAL_SPI_TransmitReceive_DMA+0x174>
    __HAL_SPI_ENABLE(hspi);
 8012bde:	6819      	ldr	r1, [r3, #0]
 8012be0:	430a      	orrs	r2, r1
 8012be2:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012be4:	2220      	movs	r2, #32
 8012be6:	6859      	ldr	r1, [r3, #4]
 8012be8:	430a      	orrs	r2, r1
 8012bea:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012bec:	2202      	movs	r2, #2
 8012bee:	6859      	ldr	r1, [r3, #4]
 8012bf0:	430a      	orrs	r2, r1
 8012bf2:	605a      	str	r2, [r3, #4]
 8012bf4:	e79b      	b.n	8012b2e <HAL_SPI_TransmitReceive_DMA+0xbe>
 8012bf6:	46c0      	nop			@ (mov r8, r8)
 8012bf8:	ffff9fff 	.word	0xffff9fff
 8012bfc:	ffffefff 	.word	0xffffefff
 8012c00:	08012da1 	.word	0x08012da1
 8012c04:	08012ead 	.word	0x08012ead
 8012c08:	08012dab 	.word	0x08012dab
 8012c0c:	ffffbfff 	.word	0xffffbfff
 8012c10:	ffffdfff 	.word	0xffffdfff
 8012c14:	08012d95 	.word	0x08012d95
 8012c18:	08012e3d 	.word	0x08012e3d

08012c1c <HAL_SPI_Receive_DMA>:
{
 8012c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c1e:	0013      	movs	r3, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8012c20:	0002      	movs	r2, r0
 8012c22:	325d      	adds	r2, #93	@ 0x5d
{
 8012c24:	0004      	movs	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8012c26:	7810      	ldrb	r0, [r2, #0]
 8012c28:	b2c6      	uxtb	r6, r0
 8012c2a:	2801      	cmp	r0, #1
 8012c2c:	d000      	beq.n	8012c30 <HAL_SPI_Receive_DMA+0x14>
 8012c2e:	e099      	b.n	8012d64 <HAL_SPI_Receive_DMA+0x148>
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012c30:	68a0      	ldr	r0, [r4, #8]
 8012c32:	2800      	cmp	r0, #0
 8012c34:	d10d      	bne.n	8012c52 <HAL_SPI_Receive_DMA+0x36>
 8012c36:	2582      	movs	r5, #130	@ 0x82
 8012c38:	6867      	ldr	r7, [r4, #4]
 8012c3a:	006d      	lsls	r5, r5, #1
 8012c3c:	42af      	cmp	r7, r5
 8012c3e:	d108      	bne.n	8012c52 <HAL_SPI_Receive_DMA+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012c40:	3004      	adds	r0, #4
 8012c42:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8012c44:	000a      	movs	r2, r1
 8012c46:	0020      	movs	r0, r4
 8012c48:	f7ff ff12 	bl	8012a70 <HAL_SPI_TransmitReceive_DMA>
 8012c4c:	0006      	movs	r6, r0
}
 8012c4e:	0030      	movs	r0, r6
 8012c50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8012c52:	0025      	movs	r5, r4
 8012c54:	355c      	adds	r5, #92	@ 0x5c
 8012c56:	782f      	ldrb	r7, [r5, #0]
 8012c58:	2f01      	cmp	r7, #1
 8012c5a:	d100      	bne.n	8012c5e <HAL_SPI_Receive_DMA+0x42>
 8012c5c:	e084      	b.n	8012d68 <HAL_SPI_Receive_DMA+0x14c>
 8012c5e:	2701      	movs	r7, #1
 8012c60:	702f      	strb	r7, [r5, #0]
  if ((pData == NULL) || (Size == 0U))
 8012c62:	2900      	cmp	r1, #0
 8012c64:	d042      	beq.n	8012cec <HAL_SPI_Receive_DMA+0xd0>
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d040      	beq.n	8012cec <HAL_SPI_Receive_DMA+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012c6a:	2504      	movs	r5, #4
  hspi->RxXferCount = Size;
 8012c6c:	0027      	movs	r7, r4
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012c6e:	7015      	strb	r5, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012c70:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 8012c72:	1da5      	adds	r5, r4, #6
  hspi->RxXferCount = Size;
 8012c74:	3708      	adds	r7, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012c76:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012c78:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8012c7a:	87eb      	strh	r3, [r5, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 8012c7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c7e:	2380      	movs	r3, #128	@ 0x80
    __HAL_SPI_DISABLE(hspi);
 8012c80:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferCount = Size;
 8012c82:	9701      	str	r7, [sp, #4]
  hspi->RxISR       = NULL;
 8012c84:	64e2      	str	r2, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012c86:	6522      	str	r2, [r4, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8012c88:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8012c8a:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c8c:	021b      	lsls	r3, r3, #8
 8012c8e:	4298      	cmp	r0, r3
 8012c90:	d107      	bne.n	8012ca2 <HAL_SPI_Receive_DMA+0x86>
    __HAL_SPI_DISABLE(hspi);
 8012c92:	682b      	ldr	r3, [r5, #0]
 8012c94:	3240      	adds	r2, #64	@ 0x40
 8012c96:	4393      	bics	r3, r2
 8012c98:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8012c9a:	682b      	ldr	r3, [r5, #0]
 8012c9c:	4a33      	ldr	r2, [pc, #204]	@ (8012d6c <HAL_SPI_Receive_DMA+0x150>)
 8012c9e:	4013      	ands	r3, r2
 8012ca0:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012ca2:	4a33      	ldr	r2, [pc, #204]	@ (8012d70 <HAL_SPI_Receive_DMA+0x154>)
 8012ca4:	686b      	ldr	r3, [r5, #4]
 8012ca6:	4694      	mov	ip, r2
 8012ca8:	4013      	ands	r3, r2
 8012caa:	606b      	str	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012cac:	23e0      	movs	r3, #224	@ 0xe0
 8012cae:	68e2      	ldr	r2, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d91d      	bls.n	8012cf4 <HAL_SPI_Receive_DMA+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012cb8:	686b      	ldr	r3, [r5, #4]
 8012cba:	4a2e      	ldr	r2, [pc, #184]	@ (8012d74 <HAL_SPI_Receive_DMA+0x158>)
 8012cbc:	4013      	ands	r3, r2
 8012cbe:	606b      	str	r3, [r5, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8012d78 <HAL_SPI_Receive_DMA+0x15c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012cc2:	350c      	adds	r5, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012cc4:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8012d7c <HAL_SPI_Receive_DMA+0x160>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012cc8:	000a      	movs	r2, r1
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012cca:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8012d80 <HAL_SPI_Receive_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012cce:	0029      	movs	r1, r5
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012cd0:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8012cd6:	9b01      	ldr	r3, [sp, #4]
 8012cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012cda:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012cdc:	f7fc faa4 	bl	800f228 <HAL_DMA_Start_IT>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d02d      	beq.n	8012d40 <HAL_SPI_Receive_DMA+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012ce4:	2310      	movs	r3, #16
 8012ce6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8012cec:	2300      	movs	r3, #0
 8012cee:	345c      	adds	r4, #92	@ 0x5c
 8012cf0:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8012cf2:	e7ac      	b.n	8012c4e <HAL_SPI_Receive_DMA+0x32>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012cf4:	2380      	movs	r3, #128	@ 0x80
 8012cf6:	686a      	ldr	r2, [r5, #4]
 8012cf8:	015b      	lsls	r3, r3, #5
 8012cfa:	4313      	orrs	r3, r2
 8012cfc:	606b      	str	r3, [r5, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012cfe:	2380      	movs	r3, #128	@ 0x80
 8012d00:	6982      	ldr	r2, [r0, #24]
 8012d02:	00db      	lsls	r3, r3, #3
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d1db      	bne.n	8012cc0 <HAL_SPI_Receive_DMA+0xa4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012d08:	686b      	ldr	r3, [r5, #4]
 8012d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8012d74 <HAL_SPI_Receive_DMA+0x158>)
 8012d0c:	4013      	ands	r3, r2
 8012d0e:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8012d10:	0023      	movs	r3, r4
 8012d12:	3308      	adds	r3, #8
 8012d14:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012d16:	07d2      	lsls	r2, r2, #31
 8012d18:	d407      	bmi.n	8012d2a <HAL_SPI_Receive_DMA+0x10e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012d1a:	4667      	mov	r7, ip
 8012d1c:	686a      	ldr	r2, [r5, #4]
 8012d1e:	403a      	ands	r2, r7
 8012d20:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8012d22:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012d24:	0852      	lsrs	r2, r2, #1
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012d28:	e7ca      	b.n	8012cc0 <HAL_SPI_Receive_DMA+0xa4>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012d2a:	686a      	ldr	r2, [r5, #4]
 8012d2c:	4694      	mov	ip, r2
 8012d2e:	2280      	movs	r2, #128	@ 0x80
 8012d30:	4667      	mov	r7, ip
 8012d32:	0192      	lsls	r2, r2, #6
 8012d34:	433a      	orrs	r2, r7
 8012d36:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012d38:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012d3a:	0852      	lsrs	r2, r2, #1
 8012d3c:	3201      	adds	r2, #1
 8012d3e:	e7f2      	b.n	8012d26 <HAL_SPI_Receive_DMA+0x10a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012d40:	2240      	movs	r2, #64	@ 0x40
 8012d42:	6823      	ldr	r3, [r4, #0]
 8012d44:	6819      	ldr	r1, [r3, #0]
 8012d46:	4211      	tst	r1, r2
 8012d48:	d102      	bne.n	8012d50 <HAL_SPI_Receive_DMA+0x134>
    __HAL_SPI_ENABLE(hspi);
 8012d4a:	6819      	ldr	r1, [r3, #0]
 8012d4c:	430a      	orrs	r2, r1
 8012d4e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012d50:	2220      	movs	r2, #32
 8012d52:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012d54:	2600      	movs	r6, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012d56:	430a      	orrs	r2, r1
 8012d58:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	6859      	ldr	r1, [r3, #4]
 8012d5e:	430a      	orrs	r2, r1
 8012d60:	605a      	str	r2, [r3, #4]
 8012d62:	e7c3      	b.n	8012cec <HAL_SPI_Receive_DMA+0xd0>
    errorcode = HAL_BUSY;
 8012d64:	2602      	movs	r6, #2
 8012d66:	e7c1      	b.n	8012cec <HAL_SPI_Receive_DMA+0xd0>
  __HAL_LOCK(hspi);
 8012d68:	2602      	movs	r6, #2
 8012d6a:	e770      	b.n	8012c4e <HAL_SPI_Receive_DMA+0x32>
 8012d6c:	ffffbfff 	.word	0xffffbfff
 8012d70:	ffffdfff 	.word	0xffffdfff
 8012d74:	ffffefff 	.word	0xffffefff
 8012d78:	08012d95 	.word	0x08012d95
 8012d7c:	08012e3d 	.word	0x08012e3d
 8012d80:	08012dab 	.word	0x08012dab

08012d84 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 8012d84:	4770      	bx	lr

08012d86 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8012d86:	4770      	bx	lr

08012d88 <SPI_DMAHalfTransmitCplt>:
{
 8012d88:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012d8a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012d8c:	f7ff fffb 	bl	8012d86 <HAL_SPI_TxHalfCpltCallback>
}
 8012d90:	bd10      	pop	{r4, pc}

08012d92 <HAL_SPI_RxHalfCpltCallback>:
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8012d92:	4770      	bx	lr

08012d94 <SPI_DMAHalfReceiveCplt>:
{
 8012d94:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012d96:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012d98:	f7ff fffb 	bl	8012d92 <HAL_SPI_RxHalfCpltCallback>
}
 8012d9c:	bd10      	pop	{r4, pc}

08012d9e <HAL_SPI_TxRxHalfCpltCallback>:
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8012d9e:	4770      	bx	lr

08012da0 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8012da0:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8012da2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012da4:	f7ff fffb 	bl	8012d9e <HAL_SPI_TxRxHalfCpltCallback>
}
 8012da8:	bd10      	pop	{r4, pc}

08012daa <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012daa:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012dac:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8012dae:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012db0:	6802      	ldr	r2, [r0, #0]
 8012db2:	6853      	ldr	r3, [r2, #4]
 8012db4:	438b      	bics	r3, r1
 8012db6:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012db8:	2310      	movs	r3, #16
 8012dba:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8012dbc:	4313      	orrs	r3, r2
 8012dbe:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8012dc0:	0003      	movs	r3, r0
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	335d      	adds	r3, #93	@ 0x5d
 8012dc6:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8012dc8:	f7f7 f9f6 	bl	800a1b8 <HAL_SPI_ErrorCallback>
}
 8012dcc:	bd10      	pop	{r4, pc}

08012dce <SPI_DMATransmitCplt>:
{
 8012dce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dd0:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012dd2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8012dd4:	f7fb fa54 	bl	800e280 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	2520      	movs	r5, #32
 8012ddc:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8012dde:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012de0:	422b      	tst	r3, r5
 8012de2:	d127      	bne.n	8012e34 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012de4:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012de6:	6823      	ldr	r3, [r4, #0]
 8012de8:	6859      	ldr	r1, [r3, #4]
 8012dea:	43a9      	bics	r1, r5
 8012dec:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012dee:	6859      	ldr	r1, [r3, #4]
 8012df0:	4381      	bics	r1, r0
 8012df2:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012df4:	0020      	movs	r0, r4
 8012df6:	2164      	movs	r1, #100	@ 0x64
 8012df8:	f7ff fa91 	bl	801231e <SPI_EndRxTxTransaction>
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d002      	beq.n	8012e06 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012e00:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012e02:	431d      	orrs	r5, r3
 8012e04:	6625      	str	r5, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012e06:	68a3      	ldr	r3, [r4, #8]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d106      	bne.n	8012e1a <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012e0c:	9301      	str	r3, [sp, #4]
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	68da      	ldr	r2, [r3, #12]
 8012e12:	9201      	str	r2, [sp, #4]
 8012e14:	689b      	ldr	r3, [r3, #8]
 8012e16:	9301      	str	r3, [sp, #4]
 8012e18:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8012e1e:	0023      	movs	r3, r4
 8012e20:	2201      	movs	r2, #1
 8012e22:	335d      	adds	r3, #93	@ 0x5d
 8012e24:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012e26:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d003      	beq.n	8012e34 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8012e2c:	0020      	movs	r0, r4
 8012e2e:	f7f7 f9c3 	bl	800a1b8 <HAL_SPI_ErrorCallback>
}
 8012e32:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8012e34:	0020      	movs	r0, r4
 8012e36:	f7f7 f9af 	bl	800a198 <HAL_SPI_TxCpltCallback>
 8012e3a:	e7fa      	b.n	8012e32 <SPI_DMATransmitCplt+0x64>

08012e3c <SPI_DMAReceiveCplt>:
{
 8012e3c:	b570      	push	{r4, r5, r6, lr}
 8012e3e:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012e40:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8012e42:	f7fb fa1d 	bl	800e280 <HAL_GetTick>
 8012e46:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012e48:	2020      	movs	r0, #32
 8012e4a:	682b      	ldr	r3, [r5, #0]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4203      	tst	r3, r0
 8012e50:	d128      	bne.n	8012ea4 <SPI_DMAReceiveCplt+0x68>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	6859      	ldr	r1, [r3, #4]
 8012e56:	4381      	bics	r1, r0
 8012e58:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012e5a:	68a1      	ldr	r1, [r4, #8]
 8012e5c:	2900      	cmp	r1, #0
 8012e5e:	d11e      	bne.n	8012e9e <SPI_DMAReceiveCplt+0x62>
 8012e60:	3105      	adds	r1, #5
 8012e62:	6860      	ldr	r0, [r4, #4]
 8012e64:	31ff      	adds	r1, #255	@ 0xff
 8012e66:	4288      	cmp	r0, r1
 8012e68:	d119      	bne.n	8012e9e <SPI_DMAReceiveCplt+0x62>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012e6a:	2003      	movs	r0, #3
 8012e6c:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e6e:	4381      	bics	r1, r0
 8012e70:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012e72:	0020      	movs	r0, r4
 8012e74:	2164      	movs	r1, #100	@ 0x64
 8012e76:	f7ff fa15 	bl	80122a4 <SPI_EndRxTransaction>
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d001      	beq.n	8012e82 <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012e7e:	2320      	movs	r3, #32
 8012e80:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->RxXferCount = 0U;
 8012e82:	0023      	movs	r3, r4
 8012e84:	2200      	movs	r2, #0
 8012e86:	3308      	adds	r3, #8
 8012e88:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8012e8a:	3355      	adds	r3, #85	@ 0x55
 8012e8c:	3201      	adds	r2, #1
 8012e8e:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012e90:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d006      	beq.n	8012ea4 <SPI_DMAReceiveCplt+0x68>
      HAL_SPI_ErrorCallback(hspi);
 8012e96:	0020      	movs	r0, r4
 8012e98:	f7f7 f98e 	bl	800a1b8 <HAL_SPI_ErrorCallback>
}
 8012e9c:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e9e:	2001      	movs	r0, #1
 8012ea0:	6859      	ldr	r1, [r3, #4]
 8012ea2:	e7e4      	b.n	8012e6e <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 8012ea4:	0020      	movs	r0, r4
 8012ea6:	f7f7 f983 	bl	800a1b0 <HAL_SPI_RxCpltCallback>
 8012eaa:	e7f7      	b.n	8012e9c <SPI_DMAReceiveCplt+0x60>

08012eac <SPI_DMATransmitReceiveCplt>:
{
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012eb0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8012eb2:	f7fb f9e5 	bl	800e280 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012eb6:	682b      	ldr	r3, [r5, #0]
 8012eb8:	2520      	movs	r5, #32
 8012eba:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8012ebc:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012ebe:	422b      	tst	r3, r5
 8012ec0:	d121      	bne.n	8012f06 <SPI_DMATransmitReceiveCplt+0x5a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012ec2:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012ec4:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012ec6:	684b      	ldr	r3, [r1, #4]
 8012ec8:	43ab      	bics	r3, r5
 8012eca:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012ecc:	2164      	movs	r1, #100	@ 0x64
 8012ece:	f7ff fa26 	bl	801231e <SPI_EndRxTxTransaction>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d002      	beq.n	8012edc <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ed6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012ed8:	431d      	orrs	r5, r3
 8012eda:	6625      	str	r5, [r4, #96]	@ 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012edc:	2103      	movs	r1, #3
 8012ede:	6822      	ldr	r2, [r4, #0]
 8012ee0:	6853      	ldr	r3, [r2, #4]
 8012ee2:	438b      	bics	r3, r1
 8012ee4:	6053      	str	r3, [r2, #4]
    hspi->RxXferCount = 0U;
 8012ee6:	0022      	movs	r2, r4
    hspi->TxXferCount = 0U;
 8012ee8:	2300      	movs	r3, #0
    hspi->RxXferCount = 0U;
 8012eea:	3208      	adds	r2, #8
    hspi->TxXferCount = 0U;
 8012eec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8012eee:	87d3      	strh	r3, [r2, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8012ef0:	0023      	movs	r3, r4
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	335d      	adds	r3, #93	@ 0x5d
 8012ef6:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012ef8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d003      	beq.n	8012f06 <SPI_DMATransmitReceiveCplt+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8012efe:	0020      	movs	r0, r4
 8012f00:	f7f7 f95a 	bl	800a1b8 <HAL_SPI_ErrorCallback>
}
 8012f04:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8012f06:	0020      	movs	r0, r4
 8012f08:	f7ff ff3c 	bl	8012d84 <HAL_SPI_TxRxCpltCallback>
 8012f0c:	e7fa      	b.n	8012f04 <SPI_DMATransmitReceiveCplt+0x58>
	...

08012f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012f10:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f12:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f16:	2201      	movs	r2, #1
 8012f18:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f1c:	6801      	ldr	r1, [r0, #0]
 8012f1e:	4d13      	ldr	r5, [pc, #76]	@ (8012f6c <UART_EndRxTransfer+0x5c>)
 8012f20:	680b      	ldr	r3, [r1, #0]
 8012f22:	402b      	ands	r3, r5
 8012f24:	600b      	str	r3, [r1, #0]
 8012f26:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f2a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f2e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012f32:	6802      	ldr	r2, [r0, #0]
 8012f34:	4c0e      	ldr	r4, [pc, #56]	@ (8012f70 <UART_EndRxTransfer+0x60>)
 8012f36:	6893      	ldr	r3, [r2, #8]
 8012f38:	4023      	ands	r3, r4
 8012f3a:	6093      	str	r3, [r2, #8]
 8012f3c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f40:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d10a      	bne.n	8012f5c <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f46:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f4a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f4e:	2410      	movs	r4, #16
 8012f50:	6802      	ldr	r2, [r0, #0]
 8012f52:	6813      	ldr	r3, [r2, #0]
 8012f54:	43a3      	bics	r3, r4
 8012f56:	6013      	str	r3, [r2, #0]
 8012f58:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012f5c:	0003      	movs	r3, r0
 8012f5e:	2220      	movs	r2, #32
 8012f60:	338c      	adds	r3, #140	@ 0x8c
 8012f62:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f64:	2300      	movs	r3, #0
 8012f66:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012f68:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8012f6a:	bd30      	pop	{r4, r5, pc}
 8012f6c:	fffffedf 	.word	0xfffffedf
 8012f70:	effffffe 	.word	0xeffffffe

08012f74 <HAL_UART_DeInit>:
{
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	0005      	movs	r5, r0
    return HAL_ERROR;
 8012f78:	2001      	movs	r0, #1
  if (huart == NULL)
 8012f7a:	2d00      	cmp	r5, #0
 8012f7c:	d019      	beq.n	8012fb2 <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 8012f7e:	002e      	movs	r6, r5
 8012f80:	2324      	movs	r3, #36	@ 0x24
  huart->Instance->CR1 = 0x0U;
 8012f82:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8012f84:	3688      	adds	r6, #136	@ 0x88
 8012f86:	6033      	str	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 8012f88:	682b      	ldr	r3, [r5, #0]
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	4382      	bics	r2, r0
 8012f8e:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8012f90:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8012f92:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8012f94:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8012f96:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012f98:	f7f7 fba4 	bl	800a6e4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f9c:	002b      	movs	r3, r5
  return HAL_OK;
 8012f9e:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012fa0:	3390      	adds	r3, #144	@ 0x90
 8012fa2:	601c      	str	r4, [r3, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 8012fa4:	3b04      	subs	r3, #4
  huart->gState = HAL_UART_STATE_RESET;
 8012fa6:	6034      	str	r4, [r6, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 8012fa8:	601c      	str	r4, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012faa:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012fac:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8012fae:	3584      	adds	r5, #132	@ 0x84
 8012fb0:	702c      	strb	r4, [r5, #0]
}
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}

08012fb4 <UART_SetConfig>:
{
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012fb8:	6925      	ldr	r5, [r4, #16]
 8012fba:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8012fbc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012fbe:	432a      	orrs	r2, r5
 8012fc0:	6965      	ldr	r5, [r4, #20]
 8012fc2:	69c1      	ldr	r1, [r0, #28]
 8012fc4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012fc6:	6818      	ldr	r0, [r3, #0]
 8012fc8:	4d5b      	ldr	r5, [pc, #364]	@ (8013138 <UART_SetConfig+0x184>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012fca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012fcc:	4028      	ands	r0, r5
 8012fce:	4302      	orrs	r2, r0
 8012fd0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fd2:	685a      	ldr	r2, [r3, #4]
 8012fd4:	4859      	ldr	r0, [pc, #356]	@ (801313c <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012fd6:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fd8:	4002      	ands	r2, r0
 8012fda:	68e0      	ldr	r0, [r4, #12]
 8012fdc:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012fde:	4858      	ldr	r0, [pc, #352]	@ (8013140 <UART_SetConfig+0x18c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fe0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012fe2:	4283      	cmp	r3, r0
 8012fe4:	d007      	beq.n	8012ff6 <UART_SetConfig+0x42>
 8012fe6:	4a57      	ldr	r2, [pc, #348]	@ (8013144 <UART_SetConfig+0x190>)
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d004      	beq.n	8012ff6 <UART_SetConfig+0x42>
 8012fec:	4a56      	ldr	r2, [pc, #344]	@ (8013148 <UART_SetConfig+0x194>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d001      	beq.n	8012ff6 <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8012ff2:	6a22      	ldr	r2, [r4, #32]
 8012ff4:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012ff6:	689a      	ldr	r2, [r3, #8]
 8012ff8:	4e54      	ldr	r6, [pc, #336]	@ (801314c <UART_SetConfig+0x198>)
 8012ffa:	4032      	ands	r2, r6
 8012ffc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012ffe:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013000:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013004:	43aa      	bics	r2, r5
 8013006:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8013008:	432a      	orrs	r2, r5
 801300a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 801300c:	4a50      	ldr	r2, [pc, #320]	@ (8013150 <UART_SetConfig+0x19c>)
 801300e:	4293      	cmp	r3, r2
 8013010:	d100      	bne.n	8013014 <UART_SetConfig+0x60>
 8013012:	e087      	b.n	8013124 <UART_SetConfig+0x170>
 8013014:	4a4f      	ldr	r2, [pc, #316]	@ (8013154 <UART_SetConfig+0x1a0>)
 8013016:	4293      	cmp	r3, r2
 8013018:	d100      	bne.n	801301c <UART_SetConfig+0x68>
 801301a:	e085      	b.n	8013128 <UART_SetConfig+0x174>
 801301c:	4a4e      	ldr	r2, [pc, #312]	@ (8013158 <UART_SetConfig+0x1a4>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d100      	bne.n	8013024 <UART_SetConfig+0x70>
 8013022:	e083      	b.n	801312c <UART_SetConfig+0x178>
 8013024:	4a4d      	ldr	r2, [pc, #308]	@ (801315c <UART_SetConfig+0x1a8>)
 8013026:	4293      	cmp	r3, r2
 8013028:	d100      	bne.n	801302c <UART_SetConfig+0x78>
 801302a:	e082      	b.n	8013132 <UART_SetConfig+0x17e>
 801302c:	4283      	cmp	r3, r0
 801302e:	d02c      	beq.n	801308a <UART_SetConfig+0xd6>
 8013030:	4a44      	ldr	r2, [pc, #272]	@ (8013144 <UART_SetConfig+0x190>)
 8013032:	4293      	cmp	r3, r2
 8013034:	d041      	beq.n	80130ba <UART_SetConfig+0x106>
  if (UART_INSTANCE_LOWPOWER(huart))
 8013036:	4a44      	ldr	r2, [pc, #272]	@ (8013148 <UART_SetConfig+0x194>)
 8013038:	2004      	movs	r0, #4
 801303a:	4293      	cmp	r3, r2
 801303c:	d026      	beq.n	801308c <UART_SetConfig+0xd8>
 801303e:	2000      	movs	r0, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013040:	2380      	movs	r3, #128	@ 0x80
 8013042:	021b      	lsls	r3, r3, #8
 8013044:	4299      	cmp	r1, r3
 8013046:	d159      	bne.n	80130fc <UART_SetConfig+0x148>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013048:	f7fe fb44 	bl	80116d4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 801304c:	2800      	cmp	r0, #0
 801304e:	d01a      	beq.n	8013086 <UART_SetConfig+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013050:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013052:	4b43      	ldr	r3, [pc, #268]	@ (8013160 <UART_SetConfig+0x1ac>)
 8013054:	0052      	lsls	r2, r2, #1
 8013056:	5ad1      	ldrh	r1, [r2, r3]
 8013058:	f7ed f886 	bl	8000168 <__udivsi3>
 801305c:	6865      	ldr	r5, [r4, #4]
 801305e:	0040      	lsls	r0, r0, #1
 8013060:	086b      	lsrs	r3, r5, #1
 8013062:	18c0      	adds	r0, r0, r3
 8013064:	0029      	movs	r1, r5
 8013066:	f7ed f87f 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801306a:	0002      	movs	r2, r0
 801306c:	4b3d      	ldr	r3, [pc, #244]	@ (8013164 <UART_SetConfig+0x1b0>)
 801306e:	3a10      	subs	r2, #16
 8013070:	429a      	cmp	r2, r3
 8013072:	d81b      	bhi.n	80130ac <UART_SetConfig+0xf8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013074:	230f      	movs	r3, #15
 8013076:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013078:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801307a:	439a      	bics	r2, r3
 801307c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801307e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8013080:	6822      	ldr	r2, [r4, #0]
 8013082:	4303      	orrs	r3, r0
 8013084:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013086:	2000      	movs	r0, #0
 8013088:	e011      	b.n	80130ae <UART_SetConfig+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801308a:	2010      	movs	r0, #16
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801308c:	f7fe fb22 	bl	80116d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8013090:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 8013092:	d0f8      	beq.n	8013086 <UART_SetConfig+0xd2>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013094:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013096:	4b32      	ldr	r3, [pc, #200]	@ (8013160 <UART_SetConfig+0x1ac>)
 8013098:	0052      	lsls	r2, r2, #1
 801309a:	5ad7      	ldrh	r7, [r2, r3]
 801309c:	0039      	movs	r1, r7
 801309e:	f7ed f863 	bl	8000168 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80130a2:	2303      	movs	r3, #3
 80130a4:	6865      	ldr	r5, [r4, #4]
 80130a6:	436b      	muls	r3, r5
 80130a8:	4283      	cmp	r3, r0
 80130aa:	d908      	bls.n	80130be <UART_SetConfig+0x10a>
        ret = HAL_ERROR;
 80130ac:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 80130ae:	4b2e      	ldr	r3, [pc, #184]	@ (8013168 <UART_SetConfig+0x1b4>)
 80130b0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80130b2:	2300      	movs	r3, #0
 80130b4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80130b6:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80130b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80130ba:	2008      	movs	r0, #8
 80130bc:	e7e6      	b.n	801308c <UART_SetConfig+0xd8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80130be:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80130c0:	4283      	cmp	r3, r0
 80130c2:	d3f3      	bcc.n	80130ac <UART_SetConfig+0xf8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80130c4:	2300      	movs	r3, #0
 80130c6:	003a      	movs	r2, r7
 80130c8:	0030      	movs	r0, r6
 80130ca:	0019      	movs	r1, r3
 80130cc:	f7ed fa58 	bl	8000580 <__aeabi_uldivmod>
 80130d0:	2700      	movs	r7, #0
 80130d2:	0e06      	lsrs	r6, r0, #24
 80130d4:	020b      	lsls	r3, r1, #8
 80130d6:	4333      	orrs	r3, r6
 80130d8:	0202      	lsls	r2, r0, #8
 80130da:	086e      	lsrs	r6, r5, #1
 80130dc:	1992      	adds	r2, r2, r6
 80130de:	417b      	adcs	r3, r7
 80130e0:	0010      	movs	r0, r2
 80130e2:	0019      	movs	r1, r3
 80130e4:	002a      	movs	r2, r5
 80130e6:	003b      	movs	r3, r7
 80130e8:	f7ed fa4a 	bl	8000580 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80130ec:	4b1f      	ldr	r3, [pc, #124]	@ (801316c <UART_SetConfig+0x1b8>)
 80130ee:	18c2      	adds	r2, r0, r3
 80130f0:	4b1f      	ldr	r3, [pc, #124]	@ (8013170 <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d8da      	bhi.n	80130ac <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80130f6:	6823      	ldr	r3, [r4, #0]
 80130f8:	60d8      	str	r0, [r3, #12]
 80130fa:	e7c4      	b.n	8013086 <UART_SetConfig+0xd2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80130fc:	f7fe faea 	bl	80116d4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8013100:	2800      	cmp	r0, #0
 8013102:	d0c0      	beq.n	8013086 <UART_SetConfig+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013104:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013106:	4b16      	ldr	r3, [pc, #88]	@ (8013160 <UART_SetConfig+0x1ac>)
 8013108:	0052      	lsls	r2, r2, #1
 801310a:	5ad1      	ldrh	r1, [r2, r3]
 801310c:	f7ed f82c 	bl	8000168 <__udivsi3>
 8013110:	6865      	ldr	r5, [r4, #4]
 8013112:	086b      	lsrs	r3, r5, #1
 8013114:	18c0      	adds	r0, r0, r3
 8013116:	0029      	movs	r1, r5
 8013118:	f7ed f826 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801311c:	0002      	movs	r2, r0
 801311e:	4b11      	ldr	r3, [pc, #68]	@ (8013164 <UART_SetConfig+0x1b0>)
 8013120:	3a10      	subs	r2, #16
 8013122:	e7e6      	b.n	80130f2 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013124:	2001      	movs	r0, #1
 8013126:	e78b      	b.n	8013040 <UART_SetConfig+0x8c>
 8013128:	2002      	movs	r0, #2
 801312a:	e789      	b.n	8013040 <UART_SetConfig+0x8c>
 801312c:	2080      	movs	r0, #128	@ 0x80
 801312e:	0240      	lsls	r0, r0, #9
 8013130:	e786      	b.n	8013040 <UART_SetConfig+0x8c>
 8013132:	2080      	movs	r0, #128	@ 0x80
 8013134:	0280      	lsls	r0, r0, #10
 8013136:	e783      	b.n	8013040 <UART_SetConfig+0x8c>
 8013138:	cfff69f3 	.word	0xcfff69f3
 801313c:	ffffcfff 	.word	0xffffcfff
 8013140:	40008000 	.word	0x40008000
 8013144:	40008400 	.word	0x40008400
 8013148:	40008c00 	.word	0x40008c00
 801314c:	11fff4ff 	.word	0x11fff4ff
 8013150:	40013800 	.word	0x40013800
 8013154:	40004400 	.word	0x40004400
 8013158:	40004800 	.word	0x40004800
 801315c:	40004c00 	.word	0x40004c00
 8013160:	08020490 	.word	0x08020490
 8013164:	0000ffef 	.word	0x0000ffef
 8013168:	00010001 	.word	0x00010001
 801316c:	fffffd00 	.word	0xfffffd00
 8013170:	000ffcff 	.word	0x000ffcff

08013174 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013174:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8013176:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013178:	071a      	lsls	r2, r3, #28
 801317a:	d506      	bpl.n	801318a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801317c:	6801      	ldr	r1, [r0, #0]
 801317e:	4c28      	ldr	r4, [pc, #160]	@ (8013220 <UART_AdvFeatureConfig+0xac>)
 8013180:	684a      	ldr	r2, [r1, #4]
 8013182:	4022      	ands	r2, r4
 8013184:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8013186:	4322      	orrs	r2, r4
 8013188:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801318a:	07da      	lsls	r2, r3, #31
 801318c:	d506      	bpl.n	801319c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801318e:	6801      	ldr	r1, [r0, #0]
 8013190:	4c24      	ldr	r4, [pc, #144]	@ (8013224 <UART_AdvFeatureConfig+0xb0>)
 8013192:	684a      	ldr	r2, [r1, #4]
 8013194:	4022      	ands	r2, r4
 8013196:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8013198:	4322      	orrs	r2, r4
 801319a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801319c:	079a      	lsls	r2, r3, #30
 801319e:	d506      	bpl.n	80131ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80131a0:	6801      	ldr	r1, [r0, #0]
 80131a2:	4c21      	ldr	r4, [pc, #132]	@ (8013228 <UART_AdvFeatureConfig+0xb4>)
 80131a4:	684a      	ldr	r2, [r1, #4]
 80131a6:	4022      	ands	r2, r4
 80131a8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80131aa:	4322      	orrs	r2, r4
 80131ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80131ae:	075a      	lsls	r2, r3, #29
 80131b0:	d506      	bpl.n	80131c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80131b2:	6801      	ldr	r1, [r0, #0]
 80131b4:	4c1d      	ldr	r4, [pc, #116]	@ (801322c <UART_AdvFeatureConfig+0xb8>)
 80131b6:	684a      	ldr	r2, [r1, #4]
 80131b8:	4022      	ands	r2, r4
 80131ba:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80131bc:	4322      	orrs	r2, r4
 80131be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80131c0:	06da      	lsls	r2, r3, #27
 80131c2:	d506      	bpl.n	80131d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80131c4:	6801      	ldr	r1, [r0, #0]
 80131c6:	4c1a      	ldr	r4, [pc, #104]	@ (8013230 <UART_AdvFeatureConfig+0xbc>)
 80131c8:	688a      	ldr	r2, [r1, #8]
 80131ca:	4022      	ands	r2, r4
 80131cc:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80131ce:	4322      	orrs	r2, r4
 80131d0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80131d2:	069a      	lsls	r2, r3, #26
 80131d4:	d506      	bpl.n	80131e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80131d6:	6801      	ldr	r1, [r0, #0]
 80131d8:	4c16      	ldr	r4, [pc, #88]	@ (8013234 <UART_AdvFeatureConfig+0xc0>)
 80131da:	688a      	ldr	r2, [r1, #8]
 80131dc:	4022      	ands	r2, r4
 80131de:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80131e0:	4322      	orrs	r2, r4
 80131e2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80131e4:	065a      	lsls	r2, r3, #25
 80131e6:	d510      	bpl.n	801320a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80131e8:	6801      	ldr	r1, [r0, #0]
 80131ea:	4d13      	ldr	r5, [pc, #76]	@ (8013238 <UART_AdvFeatureConfig+0xc4>)
 80131ec:	684a      	ldr	r2, [r1, #4]
 80131ee:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80131f0:	402a      	ands	r2, r5
 80131f2:	4322      	orrs	r2, r4
 80131f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80131f6:	2280      	movs	r2, #128	@ 0x80
 80131f8:	0352      	lsls	r2, r2, #13
 80131fa:	4294      	cmp	r4, r2
 80131fc:	d105      	bne.n	801320a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80131fe:	684a      	ldr	r2, [r1, #4]
 8013200:	4c0e      	ldr	r4, [pc, #56]	@ (801323c <UART_AdvFeatureConfig+0xc8>)
 8013202:	4022      	ands	r2, r4
 8013204:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8013206:	4322      	orrs	r2, r4
 8013208:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801320a:	061b      	lsls	r3, r3, #24
 801320c:	d506      	bpl.n	801321c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801320e:	6802      	ldr	r2, [r0, #0]
 8013210:	490b      	ldr	r1, [pc, #44]	@ (8013240 <UART_AdvFeatureConfig+0xcc>)
 8013212:	6853      	ldr	r3, [r2, #4]
 8013214:	400b      	ands	r3, r1
 8013216:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013218:	430b      	orrs	r3, r1
 801321a:	6053      	str	r3, [r2, #4]
}
 801321c:	bd30      	pop	{r4, r5, pc}
 801321e:	46c0      	nop			@ (mov r8, r8)
 8013220:	ffff7fff 	.word	0xffff7fff
 8013224:	fffdffff 	.word	0xfffdffff
 8013228:	fffeffff 	.word	0xfffeffff
 801322c:	fffbffff 	.word	0xfffbffff
 8013230:	ffffefff 	.word	0xffffefff
 8013234:	ffffdfff 	.word	0xffffdfff
 8013238:	ffefffff 	.word	0xffefffff
 801323c:	ff9fffff 	.word	0xff9fffff
 8013240:	fff7ffff 	.word	0xfff7ffff

08013244 <UART_WaitOnFlagUntilTimeout>:
{
 8013244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013246:	0004      	movs	r4, r0
 8013248:	000d      	movs	r5, r1
 801324a:	0017      	movs	r7, r2
 801324c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801324e:	6822      	ldr	r2, [r4, #0]
 8013250:	69d3      	ldr	r3, [r2, #28]
 8013252:	402b      	ands	r3, r5
 8013254:	1b5b      	subs	r3, r3, r5
 8013256:	4259      	negs	r1, r3
 8013258:	414b      	adcs	r3, r1
 801325a:	42bb      	cmp	r3, r7
 801325c:	d001      	beq.n	8013262 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801325e:	2000      	movs	r0, #0
 8013260:	e026      	b.n	80132b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8013262:	9b08      	ldr	r3, [sp, #32]
 8013264:	3301      	adds	r3, #1
 8013266:	d0f3      	beq.n	8013250 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013268:	f7fb f80a 	bl	800e280 <HAL_GetTick>
 801326c:	9b00      	ldr	r3, [sp, #0]
 801326e:	1ac0      	subs	r0, r0, r3
 8013270:	9b08      	ldr	r3, [sp, #32]
 8013272:	4298      	cmp	r0, r3
 8013274:	d82d      	bhi.n	80132d2 <UART_WaitOnFlagUntilTimeout+0x8e>
 8013276:	2b00      	cmp	r3, #0
 8013278:	d02b      	beq.n	80132d2 <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801327a:	6823      	ldr	r3, [r4, #0]
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	0752      	lsls	r2, r2, #29
 8013280:	d5e5      	bpl.n	801324e <UART_WaitOnFlagUntilTimeout+0xa>
 8013282:	002a      	movs	r2, r5
 8013284:	2140      	movs	r1, #64	@ 0x40
 8013286:	3a40      	subs	r2, #64	@ 0x40
 8013288:	438a      	bics	r2, r1
 801328a:	d0e0      	beq.n	801324e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801328c:	69da      	ldr	r2, [r3, #28]
 801328e:	2608      	movs	r6, #8
 8013290:	0011      	movs	r1, r2
 8013292:	4031      	ands	r1, r6
 8013294:	9101      	str	r1, [sp, #4]
 8013296:	4232      	tst	r2, r6
 8013298:	d00b      	beq.n	80132b2 <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 801329a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801329c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 801329e:	f7ff fe37 	bl	8012f10 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80132a2:	0023      	movs	r3, r4
 80132a4:	3390      	adds	r3, #144	@ 0x90
 80132a6:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 80132a8:	2300      	movs	r3, #0
          return HAL_ERROR;
 80132aa:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80132ac:	3484      	adds	r4, #132	@ 0x84
 80132ae:	7023      	strb	r3, [r4, #0]
}
 80132b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80132b2:	2280      	movs	r2, #128	@ 0x80
 80132b4:	69d9      	ldr	r1, [r3, #28]
 80132b6:	0112      	lsls	r2, r2, #4
 80132b8:	4211      	tst	r1, r2
 80132ba:	d0c8      	beq.n	801324e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80132bc:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80132be:	0020      	movs	r0, r4
 80132c0:	f7ff fe26 	bl	8012f10 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80132c4:	0023      	movs	r3, r4
 80132c6:	2220      	movs	r2, #32
 80132c8:	3390      	adds	r3, #144	@ 0x90
 80132ca:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 80132cc:	9b01      	ldr	r3, [sp, #4]
 80132ce:	3484      	adds	r4, #132	@ 0x84
 80132d0:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80132d2:	2003      	movs	r0, #3
 80132d4:	e7ec      	b.n	80132b0 <UART_WaitOnFlagUntilTimeout+0x6c>

080132d6 <HAL_UART_Transmit>:
{
 80132d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132d8:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80132da:	0002      	movs	r2, r0
{
 80132dc:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 80132de:	3288      	adds	r2, #136	@ 0x88
{
 80132e0:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80132e2:	6813      	ldr	r3, [r2, #0]
{
 80132e4:	0004      	movs	r4, r0
 80132e6:	000d      	movs	r5, r1
    return HAL_BUSY;
 80132e8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80132ea:	2b20      	cmp	r3, #32
 80132ec:	d139      	bne.n	8013362 <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 80132ee:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80132f0:	2900      	cmp	r1, #0
 80132f2:	d036      	beq.n	8013362 <HAL_UART_Transmit+0x8c>
 80132f4:	2f00      	cmp	r7, #0
 80132f6:	d034      	beq.n	8013362 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80132f8:	2380      	movs	r3, #128	@ 0x80
 80132fa:	68a1      	ldr	r1, [r4, #8]
 80132fc:	015b      	lsls	r3, r3, #5
 80132fe:	4299      	cmp	r1, r3
 8013300:	d104      	bne.n	801330c <HAL_UART_Transmit+0x36>
 8013302:	6923      	ldr	r3, [r4, #16]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d101      	bne.n	801330c <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8013308:	4205      	tst	r5, r0
 801330a:	d12a      	bne.n	8013362 <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801330c:	0023      	movs	r3, r4
 801330e:	2600      	movs	r6, #0
 8013310:	3390      	adds	r3, #144	@ 0x90
 8013312:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013314:	2321      	movs	r3, #33	@ 0x21
 8013316:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8013318:	f7fa ffb2 	bl	800e280 <HAL_GetTick>
    huart->TxXferSize  = Size;
 801331c:	0023      	movs	r3, r4
 801331e:	3354      	adds	r3, #84	@ 0x54
 8013320:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8013322:	3302      	adds	r3, #2
 8013324:	9303      	str	r3, [sp, #12]
 8013326:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013328:	2380      	movs	r3, #128	@ 0x80
 801332a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 801332c:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801332e:	015b      	lsls	r3, r3, #5
 8013330:	429a      	cmp	r2, r3
 8013332:	d104      	bne.n	801333e <HAL_UART_Transmit+0x68>
 8013334:	6923      	ldr	r3, [r4, #16]
 8013336:	42b3      	cmp	r3, r6
 8013338:	d101      	bne.n	801333e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 801333a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 801333c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 801333e:	0023      	movs	r3, r4
 8013340:	3356      	adds	r3, #86	@ 0x56
 8013342:	881b      	ldrh	r3, [r3, #0]
 8013344:	b29a      	uxth	r2, r3
 8013346:	2b00      	cmp	r3, #0
 8013348:	d10d      	bne.n	8013366 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801334a:	9b05      	ldr	r3, [sp, #20]
 801334c:	0020      	movs	r0, r4
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	2140      	movs	r1, #64	@ 0x40
 8013352:	9b04      	ldr	r3, [sp, #16]
 8013354:	f7ff ff76 	bl	8013244 <UART_WaitOnFlagUntilTimeout>
 8013358:	2320      	movs	r3, #32
 801335a:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 801335c:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801335e:	2800      	cmp	r0, #0
 8013360:	d10e      	bne.n	8013380 <HAL_UART_Transmit+0xaa>
}
 8013362:	b007      	add	sp, #28
 8013364:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013366:	9b05      	ldr	r3, [sp, #20]
 8013368:	2200      	movs	r2, #0
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	2180      	movs	r1, #128	@ 0x80
 801336e:	0020      	movs	r0, r4
 8013370:	9b04      	ldr	r3, [sp, #16]
 8013372:	f7ff ff67 	bl	8013244 <UART_WaitOnFlagUntilTimeout>
 8013376:	2800      	cmp	r0, #0
 8013378:	d004      	beq.n	8013384 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 801337a:	2320      	movs	r3, #32
 801337c:	3488      	adds	r4, #136	@ 0x88
 801337e:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 8013380:	2003      	movs	r0, #3
 8013382:	e7ee      	b.n	8013362 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013384:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8013386:	2d00      	cmp	r5, #0
 8013388:	d10b      	bne.n	80133a2 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801338a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 801338c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801338e:	05db      	lsls	r3, r3, #23
 8013390:	0ddb      	lsrs	r3, r3, #23
 8013392:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8013394:	9b03      	ldr	r3, [sp, #12]
 8013396:	9a03      	ldr	r2, [sp, #12]
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	3b01      	subs	r3, #1
 801339c:	b29b      	uxth	r3, r3
 801339e:	8013      	strh	r3, [r2, #0]
 80133a0:	e7cd      	b.n	801333e <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80133a2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80133a4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80133a6:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80133a8:	e7f4      	b.n	8013394 <HAL_UART_Transmit+0xbe>
	...

080133ac <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133ac:	0003      	movs	r3, r0
{
 80133ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133b0:	2600      	movs	r6, #0
{
 80133b2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133b4:	3390      	adds	r3, #144	@ 0x90
 80133b6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 80133b8:	f7fa ff62 	bl	800e280 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80133bc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80133be:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	071b      	lsls	r3, r3, #28
 80133c4:	d51f      	bpl.n	8013406 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80133c6:	2180      	movs	r1, #128	@ 0x80
 80133c8:	4b28      	ldr	r3, [pc, #160]	@ (801346c <UART_CheckIdleState+0xc0>)
 80133ca:	0032      	movs	r2, r6
 80133cc:	9300      	str	r3, [sp, #0]
 80133ce:	0389      	lsls	r1, r1, #14
 80133d0:	0003      	movs	r3, r0
 80133d2:	0020      	movs	r0, r4
 80133d4:	f7ff ff36 	bl	8013244 <UART_WaitOnFlagUntilTimeout>
 80133d8:	42b0      	cmp	r0, r6
 80133da:	d014      	beq.n	8013406 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80133dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133e0:	2301      	movs	r3, #1
 80133e2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80133e6:	2080      	movs	r0, #128	@ 0x80
 80133e8:	6822      	ldr	r2, [r4, #0]
 80133ea:	6813      	ldr	r3, [r2, #0]
 80133ec:	4383      	bics	r3, r0
 80133ee:	6013      	str	r3, [r2, #0]
 80133f0:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80133f4:	0023      	movs	r3, r4
 80133f6:	2220      	movs	r2, #32
 80133f8:	3388      	adds	r3, #136	@ 0x88
 80133fa:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 80133fc:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80133fe:	2300      	movs	r3, #0
 8013400:	3484      	adds	r4, #132	@ 0x84
 8013402:	7023      	strb	r3, [r4, #0]
}
 8013404:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013406:	0026      	movs	r6, r4
 8013408:	6823      	ldr	r3, [r4, #0]
 801340a:	368c      	adds	r6, #140	@ 0x8c
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	075b      	lsls	r3, r3, #29
 8013410:	d523      	bpl.n	801345a <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013412:	2180      	movs	r1, #128	@ 0x80
 8013414:	4b15      	ldr	r3, [pc, #84]	@ (801346c <UART_CheckIdleState+0xc0>)
 8013416:	2200      	movs	r2, #0
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	0020      	movs	r0, r4
 801341c:	002b      	movs	r3, r5
 801341e:	03c9      	lsls	r1, r1, #15
 8013420:	f7ff ff10 	bl	8013244 <UART_WaitOnFlagUntilTimeout>
 8013424:	2800      	cmp	r0, #0
 8013426:	d018      	beq.n	801345a <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013428:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801342c:	2201      	movs	r2, #1
 801342e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013432:	6821      	ldr	r1, [r4, #0]
 8013434:	4d0e      	ldr	r5, [pc, #56]	@ (8013470 <UART_CheckIdleState+0xc4>)
 8013436:	680b      	ldr	r3, [r1, #0]
 8013438:	402b      	ands	r3, r5
 801343a:	600b      	str	r3, [r1, #0]
 801343c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013440:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013444:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013448:	6821      	ldr	r1, [r4, #0]
 801344a:	688b      	ldr	r3, [r1, #8]
 801344c:	4393      	bics	r3, r2
 801344e:	608b      	str	r3, [r1, #8]
 8013450:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8013454:	2320      	movs	r3, #32
 8013456:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8013458:	e7d0      	b.n	80133fc <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 801345a:	0023      	movs	r3, r4
 801345c:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801345e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8013460:	3388      	adds	r3, #136	@ 0x88
 8013462:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8013464:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013466:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013468:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 801346a:	e7c8      	b.n	80133fe <UART_CheckIdleState+0x52>
 801346c:	01ffffff 	.word	0x01ffffff
 8013470:	fffffedf 	.word	0xfffffedf

08013474 <HAL_HalfDuplex_Init>:
{
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8013478:	d101      	bne.n	801347e <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 801347a:	2001      	movs	r0, #1
}
 801347c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 801347e:	0005      	movs	r5, r0
 8013480:	3588      	adds	r5, #136	@ 0x88
 8013482:	682b      	ldr	r3, [r5, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d104      	bne.n	8013492 <HAL_HalfDuplex_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8013488:	0002      	movs	r2, r0
 801348a:	3284      	adds	r2, #132	@ 0x84
 801348c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 801348e:	f7f7 f8e5 	bl	800a65c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8013492:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8013494:	2101      	movs	r1, #1
 8013496:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013498:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 801349a:	6813      	ldr	r3, [r2, #0]
 801349c:	438b      	bics	r3, r1
 801349e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80134a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d002      	beq.n	80134ac <HAL_HalfDuplex_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80134a6:	0020      	movs	r0, r4
 80134a8:	f7ff fe64 	bl	8013174 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80134ac:	0020      	movs	r0, r4
 80134ae:	f7ff fd81 	bl	8012fb4 <UART_SetConfig>
 80134b2:	2801      	cmp	r0, #1
 80134b4:	d0e1      	beq.n	801347a <HAL_HalfDuplex_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80134b6:	6823      	ldr	r3, [r4, #0]
 80134b8:	4909      	ldr	r1, [pc, #36]	@ (80134e0 <HAL_HalfDuplex_Init+0x6c>)
 80134ba:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80134bc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80134be:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80134c0:	2122      	movs	r1, #34	@ 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80134c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80134c4:	689a      	ldr	r2, [r3, #8]
 80134c6:	438a      	bics	r2, r1
 80134c8:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80134ca:	2208      	movs	r2, #8
 80134cc:	6899      	ldr	r1, [r3, #8]
 80134ce:	430a      	orrs	r2, r1
 80134d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80134d2:	2201      	movs	r2, #1
 80134d4:	6819      	ldr	r1, [r3, #0]
 80134d6:	430a      	orrs	r2, r1
 80134d8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80134da:	f7ff ff67 	bl	80133ac <UART_CheckIdleState>
 80134de:	e7cd      	b.n	801347c <HAL_HalfDuplex_Init+0x8>
 80134e0:	ffffb7ff 	.word	0xffffb7ff

080134e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80134e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134e6:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80134e8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80134ea:	0004      	movs	r4, r0
 80134ec:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d104      	bne.n	80134fc <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 80134f2:	2001      	movs	r0, #1
 80134f4:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 80134f6:	3468      	adds	r4, #104	@ 0x68
 80134f8:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80134fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80134fc:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80134fe:	4e0b      	ldr	r6, [pc, #44]	@ (801352c <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013500:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013502:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8013504:	4d0a      	ldr	r5, [pc, #40]	@ (8013530 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013506:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013508:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 801350a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801350c:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801350e:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013510:	f7ec feb4 	bl	800027c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013514:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013516:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013518:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801351a:	0f5b      	lsrs	r3, r3, #29
 801351c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 801351e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013520:	00c0      	lsls	r0, r0, #3
 8013522:	f7ec feab 	bl	800027c <__divsi3>
 8013526:	b280      	uxth	r0, r0
}
 8013528:	e7e5      	b.n	80134f6 <UARTEx_SetNbDataToProcess+0x12>
 801352a:	46c0      	nop			@ (mov r8, r8)
 801352c:	080204b0 	.word	0x080204b0
 8013530:	080204a8 	.word	0x080204a8

08013534 <HAL_UARTEx_DisableFifoMode>:
{
 8013534:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8013536:	0004      	movs	r4, r0
 8013538:	3484      	adds	r4, #132	@ 0x84
 801353a:	7822      	ldrb	r2, [r4, #0]
{
 801353c:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 801353e:	2002      	movs	r0, #2
 8013540:	2a01      	cmp	r2, #1
 8013542:	d011      	beq.n	8013568 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8013544:	001d      	movs	r5, r3
 8013546:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8013548:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 801354a:	3588      	adds	r5, #136	@ 0x88
 801354c:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8013552:	6810      	ldr	r0, [r2, #0]
 8013554:	43b0      	bics	r0, r6
 8013556:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013558:	4804      	ldr	r0, [pc, #16]	@ (801356c <HAL_UARTEx_DisableFifoMode+0x38>)
 801355a:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801355c:	2000      	movs	r0, #0
 801355e:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 8013560:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013562:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013564:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8013566:	7020      	strb	r0, [r4, #0]
}
 8013568:	bd70      	pop	{r4, r5, r6, pc}
 801356a:	46c0      	nop			@ (mov r8, r8)
 801356c:	dfffffff 	.word	0xdfffffff

08013570 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8013570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8013572:	0005      	movs	r5, r0
 8013574:	3584      	adds	r5, #132	@ 0x84
{
 8013576:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8013578:	7829      	ldrb	r1, [r5, #0]
 801357a:	2202      	movs	r2, #2
 801357c:	2901      	cmp	r1, #1
 801357e:	d015      	beq.n	80135ac <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8013580:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8013582:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013584:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013586:	3688      	adds	r6, #136	@ 0x88
 8013588:	3222      	adds	r2, #34	@ 0x22
 801358a:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801358c:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 801358e:	6822      	ldr	r2, [r4, #0]
 8013590:	438a      	bics	r2, r1
 8013592:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013594:	68a1      	ldr	r1, [r4, #8]
 8013596:	00c9      	lsls	r1, r1, #3
 8013598:	08c9      	lsrs	r1, r1, #3
 801359a:	4319      	orrs	r1, r3
 801359c:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 801359e:	f7ff ffa1 	bl	80134e4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80135a2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80135a4:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80135a6:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80135a8:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80135aa:	702a      	strb	r2, [r5, #0]
}
 80135ac:	0010      	movs	r0, r2
 80135ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080135b0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80135b2:	0005      	movs	r5, r0
 80135b4:	3584      	adds	r5, #132	@ 0x84
{
 80135b6:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80135b8:	7829      	ldrb	r1, [r5, #0]
 80135ba:	2302      	movs	r3, #2
 80135bc:	2901      	cmp	r1, #1
 80135be:	d015      	beq.n	80135ec <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 80135c0:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 80135c2:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80135c4:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80135c6:	3688      	adds	r6, #136	@ 0x88
 80135c8:	3322      	adds	r3, #34	@ 0x22
 80135ca:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80135cc:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	438b      	bics	r3, r1
 80135d2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80135d4:	68a1      	ldr	r1, [r4, #8]
 80135d6:	4b06      	ldr	r3, [pc, #24]	@ (80135f0 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 80135d8:	4019      	ands	r1, r3
 80135da:	4311      	orrs	r1, r2
 80135dc:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 80135de:	f7ff ff81 	bl	80134e4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80135e2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80135e4:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80135e6:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80135e8:	2300      	movs	r3, #0
 80135ea:	702b      	strb	r3, [r5, #0]
}
 80135ec:	0018      	movs	r0, r3
 80135ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135f0:	f1ffffff 	.word	0xf1ffffff

080135f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80135f4:	0003      	movs	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80135f6:	2000      	movs	r0, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80135f8:	4a01      	ldr	r2, [pc, #4]	@ (8013600 <USB_EnableGlobalInt+0xc>)
  USBx->ISTR = 0U;
 80135fa:	6458      	str	r0, [r3, #68]	@ 0x44
  USBx->CNTR = winterruptmask;
 80135fc:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80135fe:	4770      	bx	lr
 8013600:	0000bf80 	.word	0x0000bf80

08013604 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8013604:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8013606:	4a02      	ldr	r2, [pc, #8]	@ (8013610 <USB_DisableGlobalInt+0xc>)
 8013608:	4013      	ands	r3, r2
 801360a:	6403      	str	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 801360c:	2000      	movs	r0, #0
 801360e:	4770      	bx	lr
 8013610:	ffff407f 	.word	0xffff407f

08013614 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8013614:	b082      	sub	sp, #8
 8013616:	9100      	str	r1, [sp, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8013618:	2101      	movs	r1, #1
 801361a:	6401      	str	r1, [r0, #64]	@ 0x40
{
 801361c:	9201      	str	r2, [sp, #4]

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 801361e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8013620:	0003      	movs	r3, r0
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8013622:	438a      	bics	r2, r1
 8013624:	6402      	str	r2, [r0, #64]	@ 0x40
    USBx->CNTR &= ~USB_CNTR_HOST;
 8013626:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8013628:	408a      	lsls	r2, r1
 801362a:	40ca      	lsrs	r2, r1
 801362c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801362e:	2000      	movs	r0, #0
 8013630:	6458      	str	r0, [r3, #68]	@ 0x44

  return ret;
}
 8013632:	b002      	add	sp, #8
 8013634:	4770      	bx	lr

08013636 <USB_FlushTxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8013636:	2000      	movs	r0, #0
 8013638:	4770      	bx	lr

0801363a <USB_FlushRxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 801363a:	2000      	movs	r0, #0
 801363c:	4770      	bx	lr
	...

08013640 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8013640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8013642:	2401      	movs	r4, #1
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8013644:	780e      	ldrb	r6, [r1, #0]
 8013646:	00b3      	lsls	r3, r6, #2
 8013648:	18c3      	adds	r3, r0, r3
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	4896      	ldr	r0, [pc, #600]	@ (80138a8 <USB_ActivateEndpoint+0x268>)
 801364e:	4002      	ands	r2, r0
  switch (ep->type)
 8013650:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 8013652:	9400      	str	r4, [sp, #0]
  switch (ep->type)
 8013654:	2803      	cmp	r0, #3
 8013656:	d807      	bhi.n	8013668 <USB_ActivateEndpoint+0x28>
 8013658:	f7ec fd68 	bl	800012c <__gnu_thumb1_case_uqi>
 801365c:	34373a02 	.word	0x34373a02
      wEpRegVal |= USB_EP_CONTROL;
 8013660:	2480      	movs	r4, #128	@ 0x80
 8013662:	00a4      	lsls	r4, r4, #2
 8013664:	4322      	orrs	r2, r4
  HAL_StatusTypeDef ret = HAL_OK;
 8013666:	9000      	str	r0, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8013668:	4c90      	ldr	r4, [pc, #576]	@ (80138ac <USB_ActivateEndpoint+0x26c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801366a:	4d91      	ldr	r5, [pc, #580]	@ (80138b0 <USB_ActivateEndpoint+0x270>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 801366c:	4322      	orrs	r2, r4
 801366e:	601a      	str	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8013670:	681a      	ldr	r2, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013672:	4f90      	ldr	r7, [pc, #576]	@ (80138b4 <USB_ActivateEndpoint+0x274>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8013674:	402a      	ands	r2, r5
 8013676:	4332      	orrs	r2, r6
 8013678:	4322      	orrs	r2, r4
 801367a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801367c:	00f2      	lsls	r2, r6, #3
 801367e:	19d2      	adds	r2, r2, r7
  if (ep->doublebuffer == 0U)
 8013680:	7b0f      	ldrb	r7, [r1, #12]
 8013682:	2f00      	cmp	r7, #0
 8013684:	d166      	bne.n	8013754 <USB_ActivateEndpoint+0x114>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013686:	88cf      	ldrh	r7, [r1, #6]
 8013688:	08bf      	lsrs	r7, r7, #2
 801368a:	00bf      	lsls	r7, r7, #2
 801368c:	9701      	str	r7, [sp, #4]
    if (ep->is_in != 0U)
 801368e:	784f      	ldrb	r7, [r1, #1]
 8013690:	2f00      	cmp	r7, #0
 8013692:	d025      	beq.n	80136e0 <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013694:	6811      	ldr	r1, [r2, #0]
 8013696:	9e01      	ldr	r6, [sp, #4]
 8013698:	0c09      	lsrs	r1, r1, #16
 801369a:	0409      	lsls	r1, r1, #16
 801369c:	6011      	str	r1, [r2, #0]
 801369e:	6811      	ldr	r1, [r2, #0]
 80136a0:	4331      	orrs	r1, r6
 80136a2:	6011      	str	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	0652      	lsls	r2, r2, #25
 80136a8:	d504      	bpl.n	80136b4 <USB_ActivateEndpoint+0x74>
 80136aa:	6819      	ldr	r1, [r3, #0]
 80136ac:	4a82      	ldr	r2, [pc, #520]	@ (80138b8 <USB_ActivateEndpoint+0x278>)
 80136ae:	4029      	ands	r1, r5
 80136b0:	430a      	orrs	r2, r1
 80136b2:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136b4:	4d81      	ldr	r5, [pc, #516]	@ (80138bc <USB_ActivateEndpoint+0x27c>)
 80136b6:	2801      	cmp	r0, #1
 80136b8:	d00c      	beq.n	80136d4 <USB_ActivateEndpoint+0x94>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80136ba:	2220      	movs	r2, #32
 80136bc:	6819      	ldr	r1, [r3, #0]
 80136be:	4029      	ands	r1, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80136c0:	404a      	eors	r2, r1
 80136c2:	e009      	b.n	80136d8 <USB_ActivateEndpoint+0x98>
      wEpRegVal |= USB_EP_INTERRUPT;
 80136c4:	24c0      	movs	r4, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80136c6:	00e4      	lsls	r4, r4, #3
 80136c8:	4322      	orrs	r2, r4
  switch (ep->type)
 80136ca:	2400      	movs	r4, #0
 80136cc:	9400      	str	r4, [sp, #0]
 80136ce:	e7cb      	b.n	8013668 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80136d0:	2480      	movs	r4, #128	@ 0x80
 80136d2:	e7f8      	b.n	80136c6 <USB_ActivateEndpoint+0x86>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	402a      	ands	r2, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80136d8:	4322      	orrs	r2, r4
 80136da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80136dc:	9800      	ldr	r0, [sp, #0]
 80136de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80136e0:	6850      	ldr	r0, [r2, #4]
 80136e2:	9f01      	ldr	r7, [sp, #4]
 80136e4:	0c00      	lsrs	r0, r0, #16
 80136e6:	0400      	lsls	r0, r0, #16
 80136e8:	6050      	str	r0, [r2, #4]
 80136ea:	6850      	ldr	r0, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80136ec:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80136ee:	4338      	orrs	r0, r7
 80136f0:	6050      	str	r0, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80136f2:	6850      	ldr	r0, [r2, #4]
 80136f4:	0180      	lsls	r0, r0, #6
 80136f6:	0980      	lsrs	r0, r0, #6
 80136f8:	6050      	str	r0, [r2, #4]
 80136fa:	2900      	cmp	r1, #0
 80136fc:	d105      	bne.n	801370a <USB_ActivateEndpoint+0xca>
 80136fe:	6850      	ldr	r0, [r2, #4]
 8013700:	2180      	movs	r1, #128	@ 0x80
 8013702:	0609      	lsls	r1, r1, #24
 8013704:	4301      	orrs	r1, r0
 8013706:	6051      	str	r1, [r2, #4]
 8013708:	e009      	b.n	801371e <USB_ActivateEndpoint+0xde>
 801370a:	293e      	cmp	r1, #62	@ 0x3e
 801370c:	d818      	bhi.n	8013740 <USB_ActivateEndpoint+0x100>
 801370e:	2701      	movs	r7, #1
 8013710:	0848      	lsrs	r0, r1, #1
 8013712:	4039      	ands	r1, r7
 8013714:	1840      	adds	r0, r0, r1
 8013716:	6851      	ldr	r1, [r2, #4]
 8013718:	0680      	lsls	r0, r0, #26
 801371a:	4308      	orrs	r0, r1
 801371c:	6050      	str	r0, [r2, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	0452      	lsls	r2, r2, #17
 8013722:	d504      	bpl.n	801372e <USB_ActivateEndpoint+0xee>
 8013724:	6819      	ldr	r1, [r3, #0]
 8013726:	4a66      	ldr	r2, [pc, #408]	@ (80138c0 <USB_ActivateEndpoint+0x280>)
 8013728:	4029      	ands	r1, r5
 801372a:	430a      	orrs	r2, r1
 801372c:	601a      	str	r2, [r3, #0]
      if (ep->num == 0U)
 801372e:	4a65      	ldr	r2, [pc, #404]	@ (80138c4 <USB_ActivateEndpoint+0x284>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013730:	6819      	ldr	r1, [r3, #0]
 8013732:	4011      	ands	r1, r2
 8013734:	22c0      	movs	r2, #192	@ 0xc0
      if (ep->num == 0U)
 8013736:	2e00      	cmp	r6, #0
 8013738:	d000      	beq.n	801373c <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801373a:	2280      	movs	r2, #128	@ 0x80
 801373c:	0192      	lsls	r2, r2, #6
 801373e:	e7bf      	b.n	80136c0 <USB_ActivateEndpoint+0x80>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8013740:	271f      	movs	r7, #31
 8013742:	0948      	lsrs	r0, r1, #5
 8013744:	4039      	ands	r1, r7
 8013746:	424f      	negs	r7, r1
 8013748:	4179      	adcs	r1, r7
 801374a:	1a40      	subs	r0, r0, r1
 801374c:	6851      	ldr	r1, [r2, #4]
 801374e:	0680      	lsls	r0, r0, #26
 8013750:	4308      	orrs	r0, r1
 8013752:	e7d5      	b.n	8013700 <USB_ActivateEndpoint+0xc0>
    if (ep->type == EP_TYPE_BULK)
 8013754:	2802      	cmp	r0, #2
 8013756:	d14a      	bne.n	80137ee <USB_ActivateEndpoint+0x1ae>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013758:	681f      	ldr	r7, [r3, #0]
 801375a:	4e5b      	ldr	r6, [pc, #364]	@ (80138c8 <USB_ActivateEndpoint+0x288>)
 801375c:	402f      	ands	r7, r5
 801375e:	433e      	orrs	r6, r7
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013760:	601e      	str	r6, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8013762:	6816      	ldr	r6, [r2, #0]
 8013764:	0c36      	lsrs	r6, r6, #16
 8013766:	0436      	lsls	r6, r6, #16
 8013768:	6016      	str	r6, [r2, #0]
 801376a:	890e      	ldrh	r6, [r1, #8]
 801376c:	6817      	ldr	r7, [r2, #0]
 801376e:	08b6      	lsrs	r6, r6, #2
 8013770:	00b6      	lsls	r6, r6, #2
 8013772:	433e      	orrs	r6, r7
 8013774:	6016      	str	r6, [r2, #0]
 8013776:	6856      	ldr	r6, [r2, #4]
 8013778:	0c36      	lsrs	r6, r6, #16
 801377a:	0436      	lsls	r6, r6, #16
 801377c:	6056      	str	r6, [r2, #4]
 801377e:	894e      	ldrh	r6, [r1, #10]
 8013780:	6857      	ldr	r7, [r2, #4]
 8013782:	08b6      	lsrs	r6, r6, #2
 8013784:	00b6      	lsls	r6, r6, #2
 8013786:	433e      	orrs	r6, r7
 8013788:	6056      	str	r6, [r2, #4]
    if (ep->is_in == 0U)
 801378a:	784e      	ldrb	r6, [r1, #1]
 801378c:	4f4d      	ldr	r7, [pc, #308]	@ (80138c4 <USB_ActivateEndpoint+0x284>)
 801378e:	9601      	str	r6, [sp, #4]
 8013790:	4e4a      	ldr	r6, [pc, #296]	@ (80138bc <USB_ActivateEndpoint+0x27c>)
 8013792:	46b4      	mov	ip, r6
 8013794:	9e01      	ldr	r6, [sp, #4]
 8013796:	2e00      	cmp	r6, #0
 8013798:	d162      	bne.n	8013860 <USB_ActivateEndpoint+0x220>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801379a:	2680      	movs	r6, #128	@ 0x80
 801379c:	6818      	ldr	r0, [r3, #0]
 801379e:	01f6      	lsls	r6, r6, #7
 80137a0:	4230      	tst	r0, r6
 80137a2:	d004      	beq.n	80137ae <USB_ActivateEndpoint+0x16e>
 80137a4:	681e      	ldr	r6, [r3, #0]
 80137a6:	4846      	ldr	r0, [pc, #280]	@ (80138c0 <USB_ActivateEndpoint+0x280>)
 80137a8:	402e      	ands	r6, r5
 80137aa:	4330      	orrs	r0, r6
 80137ac:	6018      	str	r0, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80137ae:	6818      	ldr	r0, [r3, #0]
 80137b0:	0640      	lsls	r0, r0, #25
 80137b2:	d504      	bpl.n	80137be <USB_ActivateEndpoint+0x17e>
 80137b4:	6818      	ldr	r0, [r3, #0]
 80137b6:	4005      	ands	r5, r0
 80137b8:	483f      	ldr	r0, [pc, #252]	@ (80138b8 <USB_ActivateEndpoint+0x278>)
 80137ba:	4328      	orrs	r0, r5
 80137bc:	6018      	str	r0, [r3, #0]
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80137be:	6810      	ldr	r0, [r2, #0]
 80137c0:	6909      	ldr	r1, [r1, #16]
 80137c2:	0180      	lsls	r0, r0, #6
 80137c4:	0980      	lsrs	r0, r0, #6
 80137c6:	6010      	str	r0, [r2, #0]
 80137c8:	2900      	cmp	r1, #0
 80137ca:	d115      	bne.n	80137f8 <USB_ActivateEndpoint+0x1b8>
 80137cc:	2080      	movs	r0, #128	@ 0x80
 80137ce:	6815      	ldr	r5, [r2, #0]
 80137d0:	0600      	lsls	r0, r0, #24
 80137d2:	4328      	orrs	r0, r5
 80137d4:	6010      	str	r0, [r2, #0]
 80137d6:	6850      	ldr	r0, [r2, #4]
 80137d8:	0180      	lsls	r0, r0, #6
 80137da:	0980      	lsrs	r0, r0, #6
 80137dc:	6050      	str	r0, [r2, #4]
 80137de:	2900      	cmp	r1, #0
 80137e0:	d11f      	bne.n	8013822 <USB_ActivateEndpoint+0x1e2>
 80137e2:	6850      	ldr	r0, [r2, #4]
 80137e4:	2180      	movs	r1, #128	@ 0x80
 80137e6:	0609      	lsls	r1, r1, #24
 80137e8:	4301      	orrs	r1, r0
 80137ea:	6051      	str	r1, [r2, #4]
 80137ec:	e023      	b.n	8013836 <USB_ActivateEndpoint+0x1f6>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80137ee:	681e      	ldr	r6, [r3, #0]
 80137f0:	4f36      	ldr	r7, [pc, #216]	@ (80138cc <USB_ActivateEndpoint+0x28c>)
 80137f2:	403e      	ands	r6, r7
 80137f4:	4326      	orrs	r6, r4
 80137f6:	e7b3      	b.n	8013760 <USB_ActivateEndpoint+0x120>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80137f8:	293e      	cmp	r1, #62	@ 0x3e
 80137fa:	d806      	bhi.n	801380a <USB_ActivateEndpoint+0x1ca>
 80137fc:	2501      	movs	r5, #1
 80137fe:	0848      	lsrs	r0, r1, #1
 8013800:	400d      	ands	r5, r1
 8013802:	1940      	adds	r0, r0, r5
 8013804:	0680      	lsls	r0, r0, #26
 8013806:	6815      	ldr	r5, [r2, #0]
 8013808:	e7e3      	b.n	80137d2 <USB_ActivateEndpoint+0x192>
 801380a:	251f      	movs	r5, #31
 801380c:	400d      	ands	r5, r1
 801380e:	426e      	negs	r6, r5
 8013810:	4175      	adcs	r5, r6
 8013812:	0948      	lsrs	r0, r1, #5
 8013814:	1b40      	subs	r0, r0, r5
 8013816:	6815      	ldr	r5, [r2, #0]
 8013818:	0680      	lsls	r0, r0, #26
 801381a:	4328      	orrs	r0, r5
 801381c:	2580      	movs	r5, #128	@ 0x80
 801381e:	062d      	lsls	r5, r5, #24
 8013820:	e7d7      	b.n	80137d2 <USB_ActivateEndpoint+0x192>
 8013822:	293e      	cmp	r1, #62	@ 0x3e
 8013824:	d812      	bhi.n	801384c <USB_ActivateEndpoint+0x20c>
 8013826:	2501      	movs	r5, #1
 8013828:	0848      	lsrs	r0, r1, #1
 801382a:	4029      	ands	r1, r5
 801382c:	1840      	adds	r0, r0, r1
 801382e:	6851      	ldr	r1, [r2, #4]
 8013830:	0680      	lsls	r0, r0, #26
 8013832:	4308      	orrs	r0, r1
 8013834:	6050      	str	r0, [r2, #4]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013836:	22c0      	movs	r2, #192	@ 0xc0
 8013838:	6819      	ldr	r1, [r3, #0]
 801383a:	0192      	lsls	r2, r2, #6
 801383c:	4039      	ands	r1, r7
 801383e:	404a      	eors	r2, r1
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013840:	4661      	mov	r1, ip
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013842:	4322      	orrs	r2, r4
 8013844:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	400a      	ands	r2, r1
 801384a:	e745      	b.n	80136d8 <USB_ActivateEndpoint+0x98>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801384c:	251f      	movs	r5, #31
 801384e:	0948      	lsrs	r0, r1, #5
 8013850:	4029      	ands	r1, r5
 8013852:	424d      	negs	r5, r1
 8013854:	4169      	adcs	r1, r5
 8013856:	1a40      	subs	r0, r0, r1
 8013858:	6851      	ldr	r1, [r2, #4]
 801385a:	0680      	lsls	r0, r0, #26
 801385c:	4308      	orrs	r0, r1
 801385e:	e7c1      	b.n	80137e4 <USB_ActivateEndpoint+0x1a4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013860:	2180      	movs	r1, #128	@ 0x80
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	01c9      	lsls	r1, r1, #7
 8013866:	420a      	tst	r2, r1
 8013868:	d004      	beq.n	8013874 <USB_ActivateEndpoint+0x234>
 801386a:	6819      	ldr	r1, [r3, #0]
 801386c:	4a14      	ldr	r2, [pc, #80]	@ (80138c0 <USB_ActivateEndpoint+0x280>)
 801386e:	4029      	ands	r1, r5
 8013870:	430a      	orrs	r2, r1
 8013872:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	0652      	lsls	r2, r2, #25
 8013878:	d504      	bpl.n	8013884 <USB_ActivateEndpoint+0x244>
 801387a:	6819      	ldr	r1, [r3, #0]
 801387c:	4a0e      	ldr	r2, [pc, #56]	@ (80138b8 <USB_ActivateEndpoint+0x278>)
 801387e:	4029      	ands	r1, r5
 8013880:	430a      	orrs	r2, r1
 8013882:	601a      	str	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8013884:	2801      	cmp	r0, #1
 8013886:	d00b      	beq.n	80138a0 <USB_ActivateEndpoint+0x260>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013888:	4662      	mov	r2, ip
 801388a:	6819      	ldr	r1, [r3, #0]
 801388c:	4011      	ands	r1, r2
 801388e:	2220      	movs	r2, #32
 8013890:	404a      	eors	r2, r1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013892:	4322      	orrs	r2, r4
 8013894:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	403a      	ands	r2, r7
 801389a:	4314      	orrs	r4, r2
 801389c:	601c      	str	r4, [r3, #0]
 801389e:	e71d      	b.n	80136dc <USB_ActivateEndpoint+0x9c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80138a0:	4661      	mov	r1, ip
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	400a      	ands	r2, r1
 80138a6:	e7f4      	b.n	8013892 <USB_ActivateEndpoint+0x252>
 80138a8:	07ff898f 	.word	0x07ff898f
 80138ac:	00008080 	.word	0x00008080
 80138b0:	07ff8f8f 	.word	0x07ff8f8f
 80138b4:	40009800 	.word	0x40009800
 80138b8:	000080c0 	.word	0x000080c0
 80138bc:	07ff8fbf 	.word	0x07ff8fbf
 80138c0:	0000c080 	.word	0x0000c080
 80138c4:	07ffbf8f 	.word	0x07ffbf8f
 80138c8:	00008180 	.word	0x00008180
 80138cc:	07ff8e8f 	.word	0x07ff8e8f

080138d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80138d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80138d4:	7b0a      	ldrb	r2, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 80138da:	784e      	ldrb	r6, [r1, #1]
 80138dc:	4b2e      	ldr	r3, [pc, #184]	@ (8013998 <USB_DeactivateEndpoint+0xc8>)
  if (ep->doublebuffer == 0U)
 80138de:	2a00      	cmp	r2, #0
 80138e0:	d11c      	bne.n	801391c <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138e2:	6802      	ldr	r2, [r0, #0]
    if (ep->is_in != 0U)
 80138e4:	2e00      	cmp	r6, #0
 80138e6:	d00e      	beq.n	8013906 <USB_DeactivateEndpoint+0x36>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138e8:	0652      	lsls	r2, r2, #25
 80138ea:	d505      	bpl.n	80138f8 <USB_DeactivateEndpoint+0x28>
 80138ec:	6801      	ldr	r1, [r0, #0]
 80138ee:	4a2b      	ldr	r2, [pc, #172]	@ (801399c <USB_DeactivateEndpoint+0xcc>)
 80138f0:	4011      	ands	r1, r2
 80138f2:	4a2b      	ldr	r2, [pc, #172]	@ (80139a0 <USB_DeactivateEndpoint+0xd0>)
 80138f4:	430a      	orrs	r2, r1
 80138f6:	6002      	str	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80138f8:	6802      	ldr	r2, [r0, #0]
 80138fa:	492a      	ldr	r1, [pc, #168]	@ (80139a4 <USB_DeactivateEndpoint+0xd4>)
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80138fc:	400a      	ands	r2, r1
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80138fe:	4313      	orrs	r3, r2
 8013900:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8013902:	2000      	movs	r0, #0
 8013904:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013906:	0452      	lsls	r2, r2, #17
 8013908:	d505      	bpl.n	8013916 <USB_DeactivateEndpoint+0x46>
 801390a:	6801      	ldr	r1, [r0, #0]
 801390c:	4a23      	ldr	r2, [pc, #140]	@ (801399c <USB_DeactivateEndpoint+0xcc>)
 801390e:	4011      	ands	r1, r2
 8013910:	4a25      	ldr	r2, [pc, #148]	@ (80139a8 <USB_DeactivateEndpoint+0xd8>)
 8013912:	430a      	orrs	r2, r1
 8013914:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013916:	6802      	ldr	r2, [r0, #0]
 8013918:	4924      	ldr	r1, [pc, #144]	@ (80139ac <USB_DeactivateEndpoint+0xdc>)
 801391a:	e7ef      	b.n	80138fc <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 801391c:	2180      	movs	r1, #128	@ 0x80
 801391e:	4a1f      	ldr	r2, [pc, #124]	@ (801399c <USB_DeactivateEndpoint+0xcc>)
 8013920:	4d20      	ldr	r5, [pc, #128]	@ (80139a4 <USB_DeactivateEndpoint+0xd4>)
 8013922:	4c22      	ldr	r4, [pc, #136]	@ (80139ac <USB_DeactivateEndpoint+0xdc>)
 8013924:	01c9      	lsls	r1, r1, #7
 8013926:	2e00      	cmp	r6, #0
 8013928:	d11a      	bne.n	8013960 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801392a:	6806      	ldr	r6, [r0, #0]
 801392c:	420e      	tst	r6, r1
 801392e:	d004      	beq.n	801393a <USB_DeactivateEndpoint+0x6a>
 8013930:	6806      	ldr	r6, [r0, #0]
 8013932:	491d      	ldr	r1, [pc, #116]	@ (80139a8 <USB_DeactivateEndpoint+0xd8>)
 8013934:	4016      	ands	r6, r2
 8013936:	4331      	orrs	r1, r6
 8013938:	6001      	str	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801393a:	6801      	ldr	r1, [r0, #0]
 801393c:	4e18      	ldr	r6, [pc, #96]	@ (80139a0 <USB_DeactivateEndpoint+0xd0>)
 801393e:	0649      	lsls	r1, r1, #25
 8013940:	d503      	bpl.n	801394a <USB_DeactivateEndpoint+0x7a>
 8013942:	6801      	ldr	r1, [r0, #0]
 8013944:	4011      	ands	r1, r2
 8013946:	4331      	orrs	r1, r6
 8013948:	6001      	str	r1, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 801394a:	6801      	ldr	r1, [r0, #0]
 801394c:	400a      	ands	r2, r1
 801394e:	4316      	orrs	r6, r2
 8013950:	6006      	str	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013952:	6802      	ldr	r2, [r0, #0]
 8013954:	4022      	ands	r2, r4
 8013956:	431a      	orrs	r2, r3
 8013958:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801395a:	6802      	ldr	r2, [r0, #0]
 801395c:	402a      	ands	r2, r5
 801395e:	e7ce      	b.n	80138fe <USB_DeactivateEndpoint+0x2e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013960:	6807      	ldr	r7, [r0, #0]
 8013962:	4e11      	ldr	r6, [pc, #68]	@ (80139a8 <USB_DeactivateEndpoint+0xd8>)
 8013964:	420f      	tst	r7, r1
 8013966:	d003      	beq.n	8013970 <USB_DeactivateEndpoint+0xa0>
 8013968:	6801      	ldr	r1, [r0, #0]
 801396a:	4011      	ands	r1, r2
 801396c:	4331      	orrs	r1, r6
 801396e:	6001      	str	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013970:	6801      	ldr	r1, [r0, #0]
 8013972:	0649      	lsls	r1, r1, #25
 8013974:	d504      	bpl.n	8013980 <USB_DeactivateEndpoint+0xb0>
 8013976:	6807      	ldr	r7, [r0, #0]
 8013978:	4909      	ldr	r1, [pc, #36]	@ (80139a0 <USB_DeactivateEndpoint+0xd0>)
 801397a:	4017      	ands	r7, r2
 801397c:	4339      	orrs	r1, r7
 801397e:	6001      	str	r1, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013980:	6801      	ldr	r1, [r0, #0]
 8013982:	400a      	ands	r2, r1
 8013984:	4316      	orrs	r6, r2
 8013986:	6006      	str	r6, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013988:	6802      	ldr	r2, [r0, #0]
 801398a:	402a      	ands	r2, r5
 801398c:	431a      	orrs	r2, r3
 801398e:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013990:	6802      	ldr	r2, [r0, #0]
 8013992:	4022      	ands	r2, r4
 8013994:	e7b3      	b.n	80138fe <USB_DeactivateEndpoint+0x2e>
 8013996:	46c0      	nop			@ (mov r8, r8)
 8013998:	00008080 	.word	0x00008080
 801399c:	07ff8f8f 	.word	0x07ff8f8f
 80139a0:	000080c0 	.word	0x000080c0
 80139a4:	07ff8fbf 	.word	0x07ff8fbf
 80139a8:	0000c080 	.word	0x0000c080
 80139ac:	07ffbf8f 	.word	0x07ffbf8f

080139b0 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80139b0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 80139b2:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	4a0b      	ldr	r2, [pc, #44]	@ (80139e4 <USB_EPSetStall+0x34>)
 80139b8:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 80139ba:	2900      	cmp	r1, #0
 80139bc:	d008      	beq.n	80139d0 <USB_EPSetStall+0x20>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80139be:	6801      	ldr	r1, [r0, #0]
 80139c0:	4b09      	ldr	r3, [pc, #36]	@ (80139e8 <USB_EPSetStall+0x38>)
 80139c2:	4019      	ands	r1, r3
 80139c4:	2310      	movs	r3, #16
 80139c6:	404b      	eors	r3, r1
 80139c8:	4313      	orrs	r3, r2
 80139ca:	6003      	str	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80139cc:	2000      	movs	r0, #0
 80139ce:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80139d0:	6801      	ldr	r1, [r0, #0]
 80139d2:	4b06      	ldr	r3, [pc, #24]	@ (80139ec <USB_EPSetStall+0x3c>)
 80139d4:	4019      	ands	r1, r3
 80139d6:	2380      	movs	r3, #128	@ 0x80
 80139d8:	015b      	lsls	r3, r3, #5
 80139da:	404b      	eors	r3, r1
 80139dc:	431a      	orrs	r2, r3
 80139de:	6002      	str	r2, [r0, #0]
 80139e0:	e7f4      	b.n	80139cc <USB_EPSetStall+0x1c>
 80139e2:	46c0      	nop			@ (mov r8, r8)
 80139e4:	00008080 	.word	0x00008080
 80139e8:	07ff8fbf 	.word	0x07ff8fbf
 80139ec:	07ffbf8f 	.word	0x07ffbf8f

080139f0 <USB_EPClearStall>:
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80139f0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 80139f2:	784a      	ldrb	r2, [r1, #1]
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	18c0      	adds	r0, r0, r3
 80139f8:	6803      	ldr	r3, [r0, #0]
  if (ep->is_in != 0U)
 80139fa:	2a00      	cmp	r2, #0
 80139fc:	d014      	beq.n	8013a28 <USB_EPClearStall+0x38>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80139fe:	065b      	lsls	r3, r3, #25
 8013a00:	d505      	bpl.n	8013a0e <USB_EPClearStall+0x1e>
 8013a02:	6802      	ldr	r2, [r0, #0]
 8013a04:	4b0f      	ldr	r3, [pc, #60]	@ (8013a44 <USB_EPClearStall+0x54>)
 8013a06:	401a      	ands	r2, r3
 8013a08:	4b0f      	ldr	r3, [pc, #60]	@ (8013a48 <USB_EPClearStall+0x58>)
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	6003      	str	r3, [r0, #0]

    if (ep->type != EP_TYPE_ISOC)
 8013a0e:	78cb      	ldrb	r3, [r1, #3]
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d007      	beq.n	8013a24 <USB_EPClearStall+0x34>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013a14:	4a0d      	ldr	r2, [pc, #52]	@ (8013a4c <USB_EPClearStall+0x5c>)
 8013a16:	6803      	ldr	r3, [r0, #0]
 8013a18:	4013      	ands	r3, r2
 8013a1a:	2220      	movs	r2, #32
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013a1c:	405a      	eors	r2, r3
 8013a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8013a50 <USB_EPClearStall+0x60>)
 8013a20:	4313      	orrs	r3, r2
 8013a22:	6003      	str	r3, [r0, #0]
  }

  return HAL_OK;
}
 8013a24:	2000      	movs	r0, #0
 8013a26:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013a28:	045b      	lsls	r3, r3, #17
 8013a2a:	d505      	bpl.n	8013a38 <USB_EPClearStall+0x48>
 8013a2c:	6802      	ldr	r2, [r0, #0]
 8013a2e:	4b05      	ldr	r3, [pc, #20]	@ (8013a44 <USB_EPClearStall+0x54>)
 8013a30:	401a      	ands	r2, r3
 8013a32:	4b08      	ldr	r3, [pc, #32]	@ (8013a54 <USB_EPClearStall+0x64>)
 8013a34:	4313      	orrs	r3, r2
 8013a36:	6003      	str	r3, [r0, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013a38:	4a07      	ldr	r2, [pc, #28]	@ (8013a58 <USB_EPClearStall+0x68>)
 8013a3a:	6803      	ldr	r3, [r0, #0]
 8013a3c:	4013      	ands	r3, r2
 8013a3e:	22c0      	movs	r2, #192	@ 0xc0
 8013a40:	0192      	lsls	r2, r2, #6
 8013a42:	e7eb      	b.n	8013a1c <USB_EPClearStall+0x2c>
 8013a44:	07ff8f8f 	.word	0x07ff8f8f
 8013a48:	000080c0 	.word	0x000080c0
 8013a4c:	07ff8fbf 	.word	0x07ff8fbf
 8013a50:	00008080 	.word	0x00008080
 8013a54:	0000c080 	.word	0x0000c080
 8013a58:	07ffbf8f 	.word	0x07ffbf8f

08013a5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8013a5c:	b510      	push	{r4, lr}
  /* IN endpoint */
  if (ep->is_in == 1U)
 8013a5e:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->doublebuffer == 0U)
 8013a60:	7b0b      	ldrb	r3, [r1, #12]
  if (ep->is_in == 1U)
 8013a62:	2a01      	cmp	r2, #1
 8013a64:	d116      	bne.n	8013a94 <USB_EPStopXfer+0x38>
    if (ep->doublebuffer == 0U)
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d112      	bne.n	8013a90 <USB_EPStopXfer+0x34>
    {
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013a6a:	780b      	ldrb	r3, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8013a6c:	78c9      	ldrb	r1, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	4c11      	ldr	r4, [pc, #68]	@ (8013ab8 <USB_EPStopXfer+0x5c>)
 8013a72:	4a12      	ldr	r2, [pc, #72]	@ (8013abc <USB_EPStopXfer+0x60>)
 8013a74:	18c0      	adds	r0, r0, r3
      if (ep->type != EP_TYPE_ISOC)
 8013a76:	2901      	cmp	r1, #1
 8013a78:	d006      	beq.n	8013a88 <USB_EPStopXfer+0x2c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013a7a:	2320      	movs	r3, #32
 8013a7c:	6801      	ldr	r1, [r0, #0]
 8013a7e:	4021      	ands	r1, r4
    if (ep->doublebuffer == 0U)
    {
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013a80:	404b      	eors	r3, r1
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013a82:	4313      	orrs	r3, r2
 8013a84:	6003      	str	r3, [r0, #0]
 8013a86:	e003      	b.n	8013a90 <USB_EPStopXfer+0x34>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013a88:	6803      	ldr	r3, [r0, #0]
 8013a8a:	4023      	ands	r3, r4
 8013a8c:	431a      	orrs	r2, r3
 8013a8e:	6002      	str	r2, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8013a90:	2000      	movs	r0, #0
 8013a92:	bd10      	pop	{r4, pc}
    if (ep->doublebuffer == 0U)
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d1fb      	bne.n	8013a90 <USB_EPStopXfer+0x34>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013a98:	780b      	ldrb	r3, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8013a9a:	78c9      	ldrb	r1, [r1, #3]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	4a07      	ldr	r2, [pc, #28]	@ (8013abc <USB_EPStopXfer+0x60>)
 8013aa0:	4c07      	ldr	r4, [pc, #28]	@ (8013ac0 <USB_EPStopXfer+0x64>)
 8013aa2:	18c0      	adds	r0, r0, r3
      if (ep->type != EP_TYPE_ISOC)
 8013aa4:	2901      	cmp	r1, #1
 8013aa6:	d004      	beq.n	8013ab2 <USB_EPStopXfer+0x56>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013aa8:	2380      	movs	r3, #128	@ 0x80
 8013aaa:	6801      	ldr	r1, [r0, #0]
 8013aac:	019b      	lsls	r3, r3, #6
 8013aae:	4021      	ands	r1, r4
 8013ab0:	e7e6      	b.n	8013a80 <USB_EPStopXfer+0x24>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013ab2:	6803      	ldr	r3, [r0, #0]
 8013ab4:	4023      	ands	r3, r4
 8013ab6:	e7e4      	b.n	8013a82 <USB_EPStopXfer+0x26>
 8013ab8:	07ff8fbf 	.word	0x07ff8fbf
 8013abc:	00008080 	.word	0x00008080
 8013ac0:	07ffbf8f 	.word	0x07ffbf8f

08013ac4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	d101      	bne.n	8013acc <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8013ac8:	2380      	movs	r3, #128	@ 0x80
 8013aca:	64c3      	str	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8013acc:	2000      	movs	r0, #0
 8013ace:	4770      	bx	lr

08013ad0 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8013ad0:	2380      	movs	r3, #128	@ 0x80
 8013ad2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8013ad4:	021b      	lsls	r3, r3, #8
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	6583      	str	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8013ada:	2000      	movs	r0, #0
 8013adc:	4770      	bx	lr
	...

08013ae0 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8013ae0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8013ae2:	4a02      	ldr	r2, [pc, #8]	@ (8013aec <USB_DevDisconnect+0xc>)
 8013ae4:	4013      	ands	r3, r2
 8013ae6:	6583      	str	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8013ae8:	2000      	movs	r0, #0
 8013aea:	4770      	bx	lr
 8013aec:	ffff7fff 	.word	0xffff7fff

08013af0 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013af0:	6c40      	ldr	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8013af2:	4770      	bx	lr

08013af4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013af4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8013af6:	2403      	movs	r4, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013af8:	1cd8      	adds	r0, r3, #3
  uint16_t remaining_bytes = wNBytes % 4U;
 8013afa:	4023      	ands	r3, r4
  uint8_t *pBuf = pbUsrBuf;

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
  {
    NbWords--;
 8013afc:	001c      	movs	r4, r3
 8013afe:	1e65      	subs	r5, r4, #1
 8013b00:	41ac      	sbcs	r4, r5
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013b02:	0880      	lsrs	r0, r0, #2
    NbWords--;
 8013b04:	1b00      	subs	r0, r0, r4
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013b06:	4c11      	ldr	r4, [pc, #68]	@ (8013b4c <USB_WritePMA+0x58>)
 8013b08:	0080      	lsls	r0, r0, #2
 8013b0a:	1912      	adds	r2, r2, r4
 8013b0c:	0016      	movs	r6, r2
 8013b0e:	180d      	adds	r5, r1, r0

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8013b10:	42a9      	cmp	r1, r5
 8013b12:	d10e      	bne.n	8013b32 <USB_WritePMA+0x3e>
    pBuf++;
    pBuf++;
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d00b      	beq.n	8013b30 <USB_WritePMA+0x3c>
 8013b18:	2100      	movs	r1, #0
  {
    WrVal = 0U;
 8013b1a:	000c      	movs	r4, r1

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8013b1c:	5c6e      	ldrb	r6, [r5, r1]
 8013b1e:	00cf      	lsls	r7, r1, #3
 8013b20:	40be      	lsls	r6, r7
      count++;
 8013b22:	3101      	adds	r1, #1
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8013b24:	4334      	orrs	r4, r6
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 8013b26:	b28e      	uxth	r6, r1
 8013b28:	42b3      	cmp	r3, r6
 8013b2a:	d1f7      	bne.n	8013b1c <USB_WritePMA+0x28>

    *pdwVal = WrVal;
 8013b2c:	1812      	adds	r2, r2, r0
 8013b2e:	6014      	str	r4, [r2, #0]
  }
}
 8013b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8013b32:	784c      	ldrb	r4, [r1, #1]
 8013b34:	780f      	ldrb	r7, [r1, #0]
 8013b36:	0224      	lsls	r4, r4, #8
 8013b38:	433c      	orrs	r4, r7
 8013b3a:	788f      	ldrb	r7, [r1, #2]
 8013b3c:	043f      	lsls	r7, r7, #16
 8013b3e:	4327      	orrs	r7, r4
 8013b40:	78cc      	ldrb	r4, [r1, #3]
    pBuf++;
 8013b42:	3104      	adds	r1, #4
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8013b44:	0624      	lsls	r4, r4, #24
 8013b46:	433c      	orrs	r4, r7
 8013b48:	c610      	stmia	r6!, {r4}
  for (count = NbWords; count != 0U; count--)
 8013b4a:	e7e1      	b.n	8013b10 <USB_WritePMA+0x1c>
 8013b4c:	40009800 	.word	0x40009800

08013b50 <USB_EPStartXfer>:
{
 8013b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8013b52:	784a      	ldrb	r2, [r1, #1]
{
 8013b54:	0006      	movs	r6, r0
 8013b56:	000c      	movs	r4, r1
    if (ep->doublebuffer == 0U)
 8013b58:	7b0b      	ldrb	r3, [r1, #12]
{
 8013b5a:	b085      	sub	sp, #20
  if (ep->is_in == 1U)
 8013b5c:	2a01      	cmp	r2, #1
 8013b5e:	d000      	beq.n	8013b62 <USB_EPStartXfer+0x12>
 8013b60:	e10d      	b.n	8013d7e <USB_EPStartXfer+0x22e>
    if (ep->xfer_len > ep->maxpacket)
 8013b62:	690f      	ldr	r7, [r1, #16]
 8013b64:	698d      	ldr	r5, [r1, #24]
 8013b66:	42bd      	cmp	r5, r7
 8013b68:	d900      	bls.n	8013b6c <USB_EPStartXfer+0x1c>
 8013b6a:	003d      	movs	r5, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013b6c:	6962      	ldr	r2, [r4, #20]
 8013b6e:	9201      	str	r2, [sp, #4]
    if (ep->doublebuffer == 0U)
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d11e      	bne.n	8013bb2 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013b74:	b2ab      	uxth	r3, r5
 8013b76:	88e2      	ldrh	r2, [r4, #6]
 8013b78:	0030      	movs	r0, r6
 8013b7a:	9901      	ldr	r1, [sp, #4]
 8013b7c:	f7ff ffba 	bl	8013af4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013b80:	7823      	ldrb	r3, [r4, #0]
 8013b82:	4aa2      	ldr	r2, [pc, #648]	@ (8013e0c <USB_EPStartXfer+0x2bc>)
 8013b84:	00db      	lsls	r3, r3, #3
 8013b86:	189b      	adds	r3, r3, r2
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	042d      	lsls	r5, r5, #16
 8013b8c:	b292      	uxth	r2, r2
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	4315      	orrs	r5, r2
 8013b94:	601d      	str	r5, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8013b96:	7823      	ldrb	r3, [r4, #0]
 8013b98:	4a9d      	ldr	r2, [pc, #628]	@ (8013e10 <USB_EPStartXfer+0x2c0>)
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	18f3      	adds	r3, r6, r3
 8013b9e:	6819      	ldr	r1, [r3, #0]
 8013ba0:	4011      	ands	r1, r2
 8013ba2:	2230      	movs	r2, #48	@ 0x30
 8013ba4:	404a      	eors	r2, r1
 8013ba6:	499b      	ldr	r1, [pc, #620]	@ (8013e14 <USB_EPStartXfer+0x2c4>)
 8013ba8:	430a      	orrs	r2, r1
 8013baa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8013bac:	2000      	movs	r0, #0
}
 8013bae:	b005      	add	sp, #20
 8013bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013bb2:	7820      	ldrb	r0, [r4, #0]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013bb4:	4995      	ldr	r1, [pc, #596]	@ (8013e0c <USB_EPStartXfer+0x2bc>)
 8013bb6:	00c2      	lsls	r2, r0, #3
 8013bb8:	1852      	adds	r2, r2, r1
      if (ep->type == EP_TYPE_BULK)
 8013bba:	78e1      	ldrb	r1, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013bbc:	0080      	lsls	r0, r0, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8013bbe:	6a23      	ldr	r3, [r4, #32]
 8013bc0:	1830      	adds	r0, r6, r0
      if (ep->type == EP_TYPE_BULK)
 8013bc2:	2902      	cmp	r1, #2
 8013bc4:	d000      	beq.n	8013bc8 <USB_EPStartXfer+0x78>
 8013bc6:	e0c3      	b.n	8013d50 <USB_EPStartXfer+0x200>
        if (ep->xfer_len_db > ep->maxpacket)
 8013bc8:	429f      	cmp	r7, r3
 8013bca:	d300      	bcc.n	8013bce <USB_EPStartXfer+0x7e>
 8013bcc:	e0b0      	b.n	8013d30 <USB_EPStartXfer+0x1e0>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013bce:	6807      	ldr	r7, [r0, #0]
 8013bd0:	4b91      	ldr	r3, [pc, #580]	@ (8013e18 <USB_EPStartXfer+0x2c8>)
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013bd2:	0429      	lsls	r1, r5, #16
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013bd4:	401f      	ands	r7, r3
 8013bd6:	4b91      	ldr	r3, [pc, #580]	@ (8013e1c <USB_EPStartXfer+0x2cc>)
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013bd8:	9103      	str	r1, [sp, #12]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013bda:	433b      	orrs	r3, r7
 8013bdc:	6003      	str	r3, [r0, #0]
          ep->xfer_len_db -= len;
 8013bde:	6a23      	ldr	r3, [r4, #32]
 8013be0:	1b5b      	subs	r3, r3, r5
 8013be2:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013be4:	6803      	ldr	r3, [r0, #0]
 8013be6:	2040      	movs	r0, #64	@ 0x40
 8013be8:	469c      	mov	ip, r3
 8013bea:	4661      	mov	r1, ip
 8013bec:	4003      	ands	r3, r0
 8013bee:	9302      	str	r3, [sp, #8]
            ep->xfer_buff += len;
 8013bf0:	9b01      	ldr	r3, [sp, #4]
 8013bf2:	195f      	adds	r7, r3, r5
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013bf4:	b2ab      	uxth	r3, r5
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013bf6:	4201      	tst	r1, r0
 8013bf8:	d04e      	beq.n	8013c98 <USB_EPStartXfer+0x148>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013bfa:	6850      	ldr	r0, [r2, #4]
 8013bfc:	0429      	lsls	r1, r5, #16
 8013bfe:	b280      	uxth	r0, r0
 8013c00:	6050      	str	r0, [r2, #4]
 8013c02:	6850      	ldr	r0, [r2, #4]
 8013c04:	4308      	orrs	r0, r1
 8013c06:	6050      	str	r0, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c08:	8962      	ldrh	r2, [r4, #10]
 8013c0a:	9901      	ldr	r1, [sp, #4]
 8013c0c:	0030      	movs	r0, r6
 8013c0e:	f7ff ff71 	bl	8013af4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8013c12:	6a23      	ldr	r3, [r4, #32]
 8013c14:	6921      	ldr	r1, [r4, #16]
              ep->xfer_len_db = 0U;
 8013c16:	2200      	movs	r2, #0
            ep->xfer_buff += len;
 8013c18:	6167      	str	r7, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8013c1a:	428b      	cmp	r3, r1
 8013c1c:	d901      	bls.n	8013c22 <USB_EPStartXfer+0xd2>
              ep->xfer_len_db -= len;
 8013c1e:	1b5a      	subs	r2, r3, r5
 8013c20:	002b      	movs	r3, r5
 8013c22:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013c24:	7862      	ldrb	r2, [r4, #1]
 8013c26:	2a00      	cmp	r2, #0
 8013c28:	d12a      	bne.n	8013c80 <USB_EPStartXfer+0x130>
 8013c2a:	7822      	ldrb	r2, [r4, #0]
 8013c2c:	4977      	ldr	r1, [pc, #476]	@ (8013e0c <USB_EPStartXfer+0x2bc>)
 8013c2e:	00d2      	lsls	r2, r2, #3
 8013c30:	1852      	adds	r2, r2, r1
 8013c32:	6811      	ldr	r1, [r2, #0]
 8013c34:	0189      	lsls	r1, r1, #6
 8013c36:	0989      	lsrs	r1, r1, #6
 8013c38:	6011      	str	r1, [r2, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d10b      	bne.n	8013c56 <USB_EPStartXfer+0x106>
 8013c3e:	2180      	movs	r1, #128	@ 0x80
 8013c40:	6810      	ldr	r0, [r2, #0]
 8013c42:	0609      	lsls	r1, r1, #24
 8013c44:	4301      	orrs	r1, r0
 8013c46:	6011      	str	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c48:	8922      	ldrh	r2, [r4, #8]
 8013c4a:	b29b      	uxth	r3, r3
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c4c:	0039      	movs	r1, r7
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c4e:	0030      	movs	r0, r6
 8013c50:	f7ff ff50 	bl	8013af4 <USB_WritePMA>
 8013c54:	e79f      	b.n	8013b96 <USB_EPStartXfer+0x46>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8013c58:	d806      	bhi.n	8013c68 <USB_EPStartXfer+0x118>
 8013c5a:	2001      	movs	r0, #1
 8013c5c:	0859      	lsrs	r1, r3, #1
 8013c5e:	4018      	ands	r0, r3
 8013c60:	1809      	adds	r1, r1, r0
 8013c62:	0689      	lsls	r1, r1, #26
 8013c64:	6810      	ldr	r0, [r2, #0]
 8013c66:	e7ed      	b.n	8013c44 <USB_EPStartXfer+0xf4>
 8013c68:	201f      	movs	r0, #31
 8013c6a:	4018      	ands	r0, r3
 8013c6c:	4245      	negs	r5, r0
 8013c6e:	4168      	adcs	r0, r5
 8013c70:	0959      	lsrs	r1, r3, #5
 8013c72:	1a09      	subs	r1, r1, r0
 8013c74:	6810      	ldr	r0, [r2, #0]
 8013c76:	0689      	lsls	r1, r1, #26
 8013c78:	4301      	orrs	r1, r0
 8013c7a:	2080      	movs	r0, #128	@ 0x80
 8013c7c:	0600      	lsls	r0, r0, #24
 8013c7e:	e7e1      	b.n	8013c44 <USB_EPStartXfer+0xf4>
 8013c80:	2a01      	cmp	r2, #1
 8013c82:	d1e1      	bne.n	8013c48 <USB_EPStartXfer+0xf8>
 8013c84:	7822      	ldrb	r2, [r4, #0]
 8013c86:	4961      	ldr	r1, [pc, #388]	@ (8013e0c <USB_EPStartXfer+0x2bc>)
 8013c88:	00d2      	lsls	r2, r2, #3
 8013c8a:	1852      	adds	r2, r2, r1
 8013c8c:	6811      	ldr	r1, [r2, #0]
 8013c8e:	b289      	uxth	r1, r1
 8013c90:	6011      	str	r1, [r2, #0]
 8013c92:	6810      	ldr	r0, [r2, #0]
 8013c94:	0419      	lsls	r1, r3, #16
 8013c96:	e7d5      	b.n	8013c44 <USB_EPStartXfer+0xf4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013c98:	6810      	ldr	r0, [r2, #0]
 8013c9a:	0429      	lsls	r1, r5, #16
 8013c9c:	b280      	uxth	r0, r0
 8013c9e:	6010      	str	r0, [r2, #0]
 8013ca0:	6810      	ldr	r0, [r2, #0]
 8013ca2:	4308      	orrs	r0, r1
 8013ca4:	6010      	str	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ca6:	8922      	ldrh	r2, [r4, #8]
 8013ca8:	0030      	movs	r0, r6
 8013caa:	9901      	ldr	r1, [sp, #4]
 8013cac:	f7ff ff22 	bl	8013af4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8013cb0:	6a23      	ldr	r3, [r4, #32]
 8013cb2:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 8013cb4:	6167      	str	r7, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d902      	bls.n	8013cc0 <USB_EPStartXfer+0x170>
              ep->xfer_len_db -= len;
 8013cba:	1b5b      	subs	r3, r3, r5
 8013cbc:	9302      	str	r3, [sp, #8]
 8013cbe:	002b      	movs	r3, r5
 8013cc0:	9a02      	ldr	r2, [sp, #8]
 8013cc2:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013cc4:	7862      	ldrb	r2, [r4, #1]
 8013cc6:	2a00      	cmp	r2, #0
 8013cc8:	d126      	bne.n	8013d18 <USB_EPStartXfer+0x1c8>
 8013cca:	7822      	ldrb	r2, [r4, #0]
 8013ccc:	494f      	ldr	r1, [pc, #316]	@ (8013e0c <USB_EPStartXfer+0x2bc>)
 8013cce:	00d2      	lsls	r2, r2, #3
 8013cd0:	1852      	adds	r2, r2, r1
 8013cd2:	6851      	ldr	r1, [r2, #4]
 8013cd4:	0189      	lsls	r1, r1, #6
 8013cd6:	0989      	lsrs	r1, r1, #6
 8013cd8:	6051      	str	r1, [r2, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d107      	bne.n	8013cee <USB_EPStartXfer+0x19e>
 8013cde:	2180      	movs	r1, #128	@ 0x80
 8013ce0:	6850      	ldr	r0, [r2, #4]
 8013ce2:	0609      	lsls	r1, r1, #24
 8013ce4:	4301      	orrs	r1, r0
 8013ce6:	6051      	str	r1, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ce8:	8962      	ldrh	r2, [r4, #10]
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	e7ae      	b.n	8013c4c <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013cee:	2b3e      	cmp	r3, #62	@ 0x3e
 8013cf0:	d806      	bhi.n	8013d00 <USB_EPStartXfer+0x1b0>
 8013cf2:	2001      	movs	r0, #1
 8013cf4:	0859      	lsrs	r1, r3, #1
 8013cf6:	4018      	ands	r0, r3
 8013cf8:	1809      	adds	r1, r1, r0
 8013cfa:	0689      	lsls	r1, r1, #26
 8013cfc:	6850      	ldr	r0, [r2, #4]
 8013cfe:	e7f1      	b.n	8013ce4 <USB_EPStartXfer+0x194>
 8013d00:	201f      	movs	r0, #31
 8013d02:	4018      	ands	r0, r3
 8013d04:	4245      	negs	r5, r0
 8013d06:	4168      	adcs	r0, r5
 8013d08:	0959      	lsrs	r1, r3, #5
 8013d0a:	1a09      	subs	r1, r1, r0
 8013d0c:	6850      	ldr	r0, [r2, #4]
 8013d0e:	0689      	lsls	r1, r1, #26
 8013d10:	4301      	orrs	r1, r0
 8013d12:	2080      	movs	r0, #128	@ 0x80
 8013d14:	0600      	lsls	r0, r0, #24
 8013d16:	e7e5      	b.n	8013ce4 <USB_EPStartXfer+0x194>
 8013d18:	2a01      	cmp	r2, #1
 8013d1a:	d1e5      	bne.n	8013ce8 <USB_EPStartXfer+0x198>
 8013d1c:	7822      	ldrb	r2, [r4, #0]
 8013d1e:	493b      	ldr	r1, [pc, #236]	@ (8013e0c <USB_EPStartXfer+0x2bc>)
 8013d20:	00d2      	lsls	r2, r2, #3
 8013d22:	1852      	adds	r2, r2, r1
 8013d24:	6851      	ldr	r1, [r2, #4]
 8013d26:	b289      	uxth	r1, r1
 8013d28:	6051      	str	r1, [r2, #4]
 8013d2a:	6850      	ldr	r0, [r2, #4]
 8013d2c:	0419      	lsls	r1, r3, #16
 8013d2e:	e7d9      	b.n	8013ce4 <USB_EPStartXfer+0x194>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013d30:	6805      	ldr	r5, [r0, #0]
 8013d32:	4f3b      	ldr	r7, [pc, #236]	@ (8013e20 <USB_EPStartXfer+0x2d0>)
 8013d34:	4937      	ldr	r1, [pc, #220]	@ (8013e14 <USB_EPStartXfer+0x2c4>)
 8013d36:	403d      	ands	r5, r7
 8013d38:	430d      	orrs	r5, r1
 8013d3a:	6005      	str	r5, [r0, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013d3c:	6810      	ldr	r0, [r2, #0]
 8013d3e:	b280      	uxth	r0, r0
 8013d40:	6010      	str	r0, [r2, #0]
 8013d42:	6815      	ldr	r5, [r2, #0]
 8013d44:	0418      	lsls	r0, r3, #16
 8013d46:	4328      	orrs	r0, r5
 8013d48:	6010      	str	r0, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d4a:	b29b      	uxth	r3, r3
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d4c:	8922      	ldrh	r2, [r4, #8]
 8013d4e:	e00d      	b.n	8013d6c <USB_EPStartXfer+0x21c>
        ep->xfer_len_db -= len;
 8013d50:	1b5b      	subs	r3, r3, r5
 8013d52:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013d54:	6800      	ldr	r0, [r0, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013d56:	b2ab      	uxth	r3, r5
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013d58:	042f      	lsls	r7, r5, #16
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013d5a:	0640      	lsls	r0, r0, #25
 8013d5c:	d508      	bpl.n	8013d70 <USB_EPStartXfer+0x220>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013d5e:	6850      	ldr	r0, [r2, #4]
 8013d60:	b280      	uxth	r0, r0
 8013d62:	6050      	str	r0, [r2, #4]
 8013d64:	6850      	ldr	r0, [r2, #4]
 8013d66:	4338      	orrs	r0, r7
 8013d68:	6050      	str	r0, [r2, #4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d6a:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d6c:	9901      	ldr	r1, [sp, #4]
 8013d6e:	e76e      	b.n	8013c4e <USB_EPStartXfer+0xfe>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013d70:	6810      	ldr	r0, [r2, #0]
 8013d72:	b280      	uxth	r0, r0
 8013d74:	6010      	str	r0, [r2, #0]
 8013d76:	6815      	ldr	r5, [r2, #0]
 8013d78:	433d      	orrs	r5, r7
 8013d7a:	6015      	str	r5, [r2, #0]
 8013d7c:	e7e6      	b.n	8013d4c <USB_EPStartXfer+0x1fc>
    if (ep->doublebuffer == 0U)
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d126      	bne.n	8013dd0 <USB_EPStartXfer+0x280>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013d82:	780b      	ldrb	r3, [r1, #0]
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8013d84:	698a      	ldr	r2, [r1, #24]
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	18c3      	adds	r3, r0, r3
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8013d8a:	2a00      	cmp	r2, #0
 8013d8c:	d11b      	bne.n	8013dc6 <USB_EPStartXfer+0x276>
 8013d8e:	78ca      	ldrb	r2, [r1, #3]
 8013d90:	2a00      	cmp	r2, #0
 8013d92:	d118      	bne.n	8013dc6 <USB_EPStartXfer+0x276>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013d94:	4a20      	ldr	r2, [pc, #128]	@ (8013e18 <USB_EPStartXfer+0x2c8>)
 8013d96:	6819      	ldr	r1, [r3, #0]
 8013d98:	4011      	ands	r1, r2
 8013d9a:	4a20      	ldr	r2, [pc, #128]	@ (8013e1c <USB_EPStartXfer+0x2cc>)
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8013d9c:	430a      	orrs	r2, r1
 8013d9e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > ep->maxpacket)
 8013da0:	69a3      	ldr	r3, [r4, #24]
 8013da2:	6922      	ldr	r2, [r4, #16]
 8013da4:	4293      	cmp	r3, r2
 8013da6:	d92e      	bls.n	8013e06 <USB_EPStartXfer+0x2b6>
        ep->xfer_len -= ep->maxpacket;
 8013da8:	1a9b      	subs	r3, r3, r2
        ep->xfer_len = 0U;
 8013daa:	61a3      	str	r3, [r4, #24]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013dac:	7823      	ldrb	r3, [r4, #0]
 8013dae:	4a1d      	ldr	r2, [pc, #116]	@ (8013e24 <USB_EPStartXfer+0x2d4>)
 8013db0:	009b      	lsls	r3, r3, #2
 8013db2:	18f6      	adds	r6, r6, r3
 8013db4:	6833      	ldr	r3, [r6, #0]
 8013db6:	4013      	ands	r3, r2
 8013db8:	22c0      	movs	r2, #192	@ 0xc0
 8013dba:	0192      	lsls	r2, r2, #6
 8013dbc:	405a      	eors	r2, r3
 8013dbe:	4b15      	ldr	r3, [pc, #84]	@ (8013e14 <USB_EPStartXfer+0x2c4>)
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	6033      	str	r3, [r6, #0]
 8013dc4:	e6f2      	b.n	8013bac <USB_EPStartXfer+0x5c>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8013dc6:	4a16      	ldr	r2, [pc, #88]	@ (8013e20 <USB_EPStartXfer+0x2d0>)
 8013dc8:	6819      	ldr	r1, [r3, #0]
 8013dca:	4011      	ands	r1, r2
 8013dcc:	4a11      	ldr	r2, [pc, #68]	@ (8013e14 <USB_EPStartXfer+0x2c4>)
 8013dce:	e7e5      	b.n	8013d9c <USB_EPStartXfer+0x24c>
      if (ep->type == EP_TYPE_BULK)
 8013dd0:	78cb      	ldrb	r3, [r1, #3]
 8013dd2:	2b02      	cmp	r3, #2
 8013dd4:	d113      	bne.n	8013dfe <USB_EPStartXfer+0x2ae>
        if (ep->xfer_count != 0U)
 8013dd6:	69cb      	ldr	r3, [r1, #28]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d0e7      	beq.n	8013dac <USB_EPStartXfer+0x25c>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8013ddc:	780b      	ldrb	r3, [r1, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013dde:	4a12      	ldr	r2, [pc, #72]	@ (8013e28 <USB_EPStartXfer+0x2d8>)
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	18c1      	adds	r1, r0, r3
 8013de4:	680b      	ldr	r3, [r1, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013de6:	4013      	ands	r3, r2
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d001      	beq.n	8013df0 <USB_EPStartXfer+0x2a0>
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d1dd      	bne.n	8013dac <USB_EPStartXfer+0x25c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013df0:	680a      	ldr	r2, [r1, #0]
 8013df2:	4b09      	ldr	r3, [pc, #36]	@ (8013e18 <USB_EPStartXfer+0x2c8>)
 8013df4:	401a      	ands	r2, r3
 8013df6:	4b0d      	ldr	r3, [pc, #52]	@ (8013e2c <USB_EPStartXfer+0x2dc>)
 8013df8:	4313      	orrs	r3, r2
 8013dfa:	600b      	str	r3, [r1, #0]
 8013dfc:	e7d6      	b.n	8013dac <USB_EPStartXfer+0x25c>
        return HAL_ERROR;
 8013dfe:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d000      	beq.n	8013e06 <USB_EPStartXfer+0x2b6>
 8013e04:	e6d3      	b.n	8013bae <USB_EPStartXfer+0x5e>
        ep->xfer_len = 0U;
 8013e06:	2300      	movs	r3, #0
 8013e08:	e7cf      	b.n	8013daa <USB_EPStartXfer+0x25a>
 8013e0a:	46c0      	nop			@ (mov r8, r8)
 8013e0c:	40009800 	.word	0x40009800
 8013e10:	07ff8fbf 	.word	0x07ff8fbf
 8013e14:	00008080 	.word	0x00008080
 8013e18:	07ff8f8f 	.word	0x07ff8f8f
 8013e1c:	00008180 	.word	0x00008180
 8013e20:	07ff8e8f 	.word	0x07ff8e8f
 8013e24:	07ffbf8f 	.word	0x07ffbf8f
 8013e28:	00004040 	.word	0x00004040
 8013e2c:	000080c0 	.word	0x000080c0

08013e30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8013e32:	2403      	movs	r4, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013e34:	1cd8      	adds	r0, r3, #3
  uint16_t remaining_bytes = wNBytes % 4U;
 8013e36:	4023      	ands	r3, r4
  uint8_t *pBuf = pbUsrBuf;

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013e38:	4c11      	ldr	r4, [pc, #68]	@ (8013e80 <USB_ReadPMA+0x50>)
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013e3a:	0880      	lsrs	r0, r0, #2
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013e3c:	1912      	adds	r2, r2, r4

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
  {
    NbWords--;
 8013e3e:	001c      	movs	r4, r3
 8013e40:	1e65      	subs	r5, r4, #1
 8013e42:	41ac      	sbcs	r4, r5
{
 8013e44:	0016      	movs	r6, r2
    NbWords--;
 8013e46:	1b00      	subs	r0, r0, r4
 8013e48:	0084      	lsls	r4, r0, #2
 8013e4a:	190d      	adds	r5, r1, r4
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8013e4c:	42a9      	cmp	r1, r5
 8013e4e:	d10d      	bne.n	8013e6c <USB_ReadPMA+0x3c>
    pBuf++;
    pBuf++;
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d00a      	beq.n	8013e6a <USB_ReadPMA+0x3a>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8013e54:	1912      	adds	r2, r2, r4
 8013e56:	6810      	ldr	r0, [r2, #0]
 8013e58:	2200      	movs	r2, #0

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8013e5a:	0004      	movs	r4, r0
 8013e5c:	00d1      	lsls	r1, r2, #3
 8013e5e:	40cc      	lsrs	r4, r1
 8013e60:	54ac      	strb	r4, [r5, r2]
      count++;
 8013e62:	3201      	adds	r2, #1
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 8013e64:	b291      	uxth	r1, r2
 8013e66:	428b      	cmp	r3, r1
 8013e68:	d1f7      	bne.n	8013e5a <USB_ReadPMA+0x2a>
  }
}
 8013e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8013e6c:	ce01      	ldmia	r6!, {r0}
 8013e6e:	0a07      	lsrs	r7, r0, #8
 8013e70:	7008      	strb	r0, [r1, #0]
 8013e72:	704f      	strb	r7, [r1, #1]
 8013e74:	0c07      	lsrs	r7, r0, #16
 8013e76:	0e00      	lsrs	r0, r0, #24
 8013e78:	708f      	strb	r7, [r1, #2]
 8013e7a:	70c8      	strb	r0, [r1, #3]
    pBuf++;
 8013e7c:	3104      	adds	r1, #4
  for (count = NbWords; count != 0U; count--)
 8013e7e:	e7e5      	b.n	8013e4c <USB_ReadPMA+0x1c>
 8013e80:	40009800 	.word	0x40009800

08013e84 <disk_status>:

	// 	return stat;
	// }
	// return STA_NOINIT;
	return 0;
}
 8013e84:	2000      	movs	r0, #0
 8013e86:	4770      	bx	lr

08013e88 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013e88:	b510      	push	{r4, lr}
 8013e8a:	1e04      	subs	r4, r0, #0
	// 	// translate the reslut code here

	// 	return stat;
	// }
	// return STA_NOINIT;
	if(pdrv)
 8013e8c:	d103      	bne.n	8013e96 <disk_initialize+0xe>
		return STA_NOINIT;
	else {
		SPI_FLASH_Init();
 8013e8e:	f7f6 f899 	bl	8009fc4 <SPI_FLASH_Init>
		return  0;
	}
}
 8013e92:	0020      	movs	r0, r4
 8013e94:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
 8013e96:	2401      	movs	r4, #1
 8013e98:	e7fb      	b.n	8013e92 <disk_initialize+0xa>

08013e9a <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UNUSED(pdrv);
	int i;

	for(i=0;i<count;i++)
	{
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 8013e9c:	2780      	movs	r7, #128	@ 0x80
{
 8013e9e:	000d      	movs	r5, r1
 8013ea0:	0014      	movs	r4, r2
 8013ea2:	18d6      	adds	r6, r2, r3
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 8013ea4:	017f      	lsls	r7, r7, #5
	for(i=0;i<count;i++)
 8013ea6:	42b4      	cmp	r4, r6
 8013ea8:	d101      	bne.n	8013eae <disk_read+0x14>
			return RES_ERROR;
		}
		sector ++;
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
	}
	return RES_OK;
 8013eaa:	2000      	movs	r0, #0
}
 8013eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 8013eae:	003a      	movs	r2, r7
 8013eb0:	0029      	movs	r1, r5
 8013eb2:	0320      	lsls	r0, r4, #12
 8013eb4:	f7f6 f934 	bl	800a120 <SPI_FLASH_ReadData>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d104      	bne.n	8013ec6 <disk_read+0x2c>
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8013ebc:	2380      	movs	r3, #128	@ 0x80
 8013ebe:	015b      	lsls	r3, r3, #5
		sector ++;
 8013ec0:	3401      	adds	r4, #1
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8013ec2:	18ed      	adds	r5, r5, r3
	for(i=0;i<count;i++)
 8013ec4:	e7ef      	b.n	8013ea6 <disk_read+0xc>
			return RES_ERROR;
 8013ec6:	2001      	movs	r0, #1
 8013ec8:	e7f0      	b.n	8013eac <disk_read+0x12>

08013eca <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8013eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ecc:	000d      	movs	r5, r1
 8013ece:	0014      	movs	r4, r2
 8013ed0:	18d3      	adds	r3, r2, r3
 8013ed2:	9301      	str	r3, [sp, #4]
    // Use a variable for the address to make it clearer
    uint32_t addr;
    // Use a temporary pointer for the buffer
    const BYTE* current_buff_pos;

	for(i = 0; i < count; i++)
 8013ed4:	9b01      	ldr	r3, [sp, #4]
 8013ed6:	429c      	cmp	r4, r3
 8013ed8:	d101      	bne.n	8013ede <disk_write+0x14>

		sector++;
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
	}

	return RES_OK;
 8013eda:	2000      	movs	r0, #0
}
 8013edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        addr = sector * MEDIA_LOGICAL_SECTOR_SIZE;
 8013ede:	0327      	lsls	r7, r4, #12
		SPI_FLASH_EraseSector(addr);
 8013ee0:	0038      	movs	r0, r7
 8013ee2:	f7f6 f893 	bl	800a00c <SPI_FLASH_EraseSector>
        current_buff_pos = buff;
 8013ee6:	002e      	movs	r6, r5
			if(SPI_FLASH_PageProgram(addr, (uint8_t*)current_buff_pos, NOR_FLASH_PAGE_SIZE) != HAL_OK) {
 8013ee8:	2280      	movs	r2, #128	@ 0x80
 8013eea:	0031      	movs	r1, r6
 8013eec:	0038      	movs	r0, r7
 8013eee:	0052      	lsls	r2, r2, #1
 8013ef0:	f7f6 f8d0 	bl	800a094 <SPI_FLASH_PageProgram>
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d10b      	bne.n	8013f10 <disk_write+0x46>
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013ef8:	2380      	movs	r3, #128	@ 0x80
            current_buff_pos += NOR_FLASH_PAGE_SIZE;
 8013efa:	3601      	adds	r6, #1
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013efc:	015b      	lsls	r3, r3, #5
            addr += NOR_FLASH_PAGE_SIZE;
 8013efe:	3701      	adds	r7, #1
            current_buff_pos += NOR_FLASH_PAGE_SIZE;
 8013f00:	36ff      	adds	r6, #255	@ 0xff
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013f02:	18eb      	adds	r3, r5, r3
            addr += NOR_FLASH_PAGE_SIZE;
 8013f04:	37ff      	adds	r7, #255	@ 0xff
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013f06:	429e      	cmp	r6, r3
 8013f08:	d1ee      	bne.n	8013ee8 <disk_write+0x1e>
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8013f0a:	0035      	movs	r5, r6
		sector++;
 8013f0c:	3401      	adds	r4, #1
	for(i = 0; i < count; i++)
 8013f0e:	e7e1      	b.n	8013ed4 <disk_write+0xa>
				return RES_ERROR;
 8013f10:	2001      	movs	r0, #1
 8013f12:	e7e3      	b.n	8013edc <disk_write+0x12>

08013f14 <disk_ioctl>:
    *(DWORD*)buff = (NOR_FLASH_BLOCK_64K_SIZE/MEDIA_LOGICAL_SECTOR_SIZE);
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8013f14:	2004      	movs	r0, #4
{
 8013f16:	b500      	push	{lr}
  switch (cmd)
 8013f18:	2903      	cmp	r1, #3
 8013f1a:	d808      	bhi.n	8013f2e <disk_ioctl+0x1a>
 8013f1c:	0008      	movs	r0, r1
 8013f1e:	f7ec f905 	bl	800012c <__gnu_thumb1_case_uqi>
 8013f22:	0205      	.short	0x0205
 8013f24:	0b07      	.short	0x0b07
    *(DWORD*)buff = NOR_FLASH_TOTAL_SIZE / MEDIA_LOGICAL_SECTOR_SIZE;
 8013f26:	2380      	movs	r3, #128	@ 0x80
 8013f28:	005b      	lsls	r3, r3, #1
 8013f2a:	6013      	str	r3, [r2, #0]
    res = RES_OK;
 8013f2c:	2000      	movs	r0, #0
  }

  return res;
}
 8013f2e:	bd00      	pop	{pc}
    *(WORD*)buff = MEDIA_LOGICAL_SECTOR_SIZE;
 8013f30:	2380      	movs	r3, #128	@ 0x80
 8013f32:	015b      	lsls	r3, r3, #5
 8013f34:	8013      	strh	r3, [r2, #0]
    break;
 8013f36:	e7f9      	b.n	8013f2c <disk_ioctl+0x18>
    *(DWORD*)buff = (NOR_FLASH_BLOCK_64K_SIZE/MEDIA_LOGICAL_SECTOR_SIZE);
 8013f38:	2310      	movs	r3, #16
 8013f3a:	e7f6      	b.n	8013f2a <disk_ioctl+0x16>

08013f3c <get_fattime>:
         | ((DWORD)7 << 21)             /* Month = July */
         | ((DWORD)23 << 16)            /* Day = 23 */
         | ((DWORD)17 << 11)            /* Hour = 17 */
         | ((DWORD)36 << 5)             /* Minute = 36 */
         | ((DWORD)0 >> 1);             /* Second = 0 */
}
 8013f3c:	4800      	ldr	r0, [pc, #0]	@ (8013f40 <get_fattime+0x4>)
 8013f3e:	4770      	bx	lr
 8013f40:	5af78c80 	.word	0x5af78c80

08013f44 <ld_32>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
 8013f44:	7842      	ldrb	r2, [r0, #1]
 8013f46:	7803      	ldrb	r3, [r0, #0]
 8013f48:	0212      	lsls	r2, r2, #8
 8013f4a:	431a      	orrs	r2, r3
 8013f4c:	7883      	ldrb	r3, [r0, #2]
 8013f4e:	78c0      	ldrb	r0, [r0, #3]
 8013f50:	041b      	lsls	r3, r3, #16
 8013f52:	4313      	orrs	r3, r2
 8013f54:	0600      	lsls	r0, r0, #24
 8013f56:	4318      	orrs	r0, r3
	return rv;
}
 8013f58:	4770      	bx	lr

08013f5a <st_32>:
	*ptr++ = (BYTE)val;
}

static void st_32 (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8013f5a:	0a0b      	lsrs	r3, r1, #8
 8013f5c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013f5e:	7043      	strb	r3, [r0, #1]
 8013f60:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013f62:	0e09      	lsrs	r1, r1, #24
 8013f64:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8013f66:	70c1      	strb	r1, [r0, #3]
}
 8013f68:	4770      	bx	lr

08013f6a <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8013f6a:	6942      	ldr	r2, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 8013f6c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8013f6e:	3a02      	subs	r2, #2
{
 8013f70:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8013f72:	2000      	movs	r0, #0
 8013f74:	428a      	cmp	r2, r1
 8013f76:	d903      	bls.n	8013f80 <clst2sect+0x16>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8013f78:	895a      	ldrh	r2, [r3, #10]
 8013f7a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013f7c:	4351      	muls	r1, r2
 8013f7e:	1808      	adds	r0, r1, r0
}
 8013f80:	4770      	bx	lr

08013f82 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 8013f82:	6803      	ldr	r3, [r0, #0]
	if (!tp) return -1;		/* Invalid path name? */
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d00f      	beq.n	8013fa8 <get_ldnumber+0x26>
 8013f88:	001a      	movs	r2, r3
	do {					/* Find a colon in the path */
		chr = *tt++;
 8013f8a:	7811      	ldrb	r1, [r2, #0]
 8013f8c:	3201      	adds	r2, #1
	} while (!IsTerminator(chr) && chr != ':');
 8013f8e:	2920      	cmp	r1, #32
 8013f90:	d908      	bls.n	8013fa4 <get_ldnumber+0x22>
 8013f92:	293a      	cmp	r1, #58	@ 0x3a
 8013f94:	d1f9      	bne.n	8013f8a <get_ldnumber+0x8>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 8013f96:	7819      	ldrb	r1, [r3, #0]
 8013f98:	2930      	cmp	r1, #48	@ 0x30
 8013f9a:	d105      	bne.n	8013fa8 <get_ldnumber+0x26>
 8013f9c:	3302      	adds	r3, #2
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d102      	bne.n	8013fa8 <get_ldnumber+0x26>
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
		*path = tt;		/* Snip the drive prefix off */
 8013fa2:	6002      	str	r2, [r0, #0]
		return i;		/* Return the found drive number */
 8013fa4:	2000      	movs	r0, #0
#if FF_FS_RPATH
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 8013fa6:	4770      	bx	lr
	if (!tp) return -1;		/* Invalid path name? */
 8013fa8:	2001      	movs	r0, #1
 8013faa:	4240      	negs	r0, r0
 8013fac:	e7fb      	b.n	8013fa6 <get_ldnumber+0x24>

08013fae <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8013fae:	b570      	push	{r4, r5, r6, lr}
 8013fb0:	0004      	movs	r4, r0
 8013fb2:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d104      	bne.n	8013fc2 <validate+0x14>
	FRESULT res = FR_INVALID_OBJECT;
 8013fb8:	2309      	movs	r3, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8013fba:	2200      	movs	r2, #0
	return res;
}
 8013fbc:	0018      	movs	r0, r3
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8013fbe:	602a      	str	r2, [r5, #0]
}
 8013fc0:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013fc2:	6803      	ldr	r3, [r0, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d0f7      	beq.n	8013fb8 <validate+0xa>
 8013fc8:	781a      	ldrb	r2, [r3, #0]
 8013fca:	2a00      	cmp	r2, #0
 8013fcc:	d0f4      	beq.n	8013fb8 <validate+0xa>
 8013fce:	8881      	ldrh	r1, [r0, #4]
 8013fd0:	88da      	ldrh	r2, [r3, #6]
 8013fd2:	4291      	cmp	r1, r2
 8013fd4:	d1f0      	bne.n	8013fb8 <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8013fd6:	7858      	ldrb	r0, [r3, #1]
 8013fd8:	f7ff ff54 	bl	8013e84 <disk_status>
 8013fdc:	2201      	movs	r2, #1
 8013fde:	0003      	movs	r3, r0
 8013fe0:	4013      	ands	r3, r2
 8013fe2:	4210      	tst	r0, r2
 8013fe4:	d1e8      	bne.n	8013fb8 <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8013fe6:	6822      	ldr	r2, [r4, #0]
 8013fe8:	e7e8      	b.n	8013fbc <validate+0xe>

08013fea <sync_window>:
{
 8013fea:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8013fec:	7903      	ldrb	r3, [r0, #4]
{
 8013fee:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d019      	beq.n	8014028 <sync_window+0x3e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8013ff4:	0005      	movs	r5, r0
 8013ff6:	3530      	adds	r5, #48	@ 0x30
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	0029      	movs	r1, r5
 8013ffc:	7840      	ldrb	r0, [r0, #1]
 8013ffe:	69e2      	ldr	r2, [r4, #28]
 8014000:	f7ff ff63 	bl	8013eca <disk_write>
			res = FR_DISK_ERR;
 8014004:	2301      	movs	r3, #1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8014006:	2800      	cmp	r0, #0
 8014008:	d10f      	bne.n	801402a <sync_window+0x40>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 801400a:	69e2      	ldr	r2, [r4, #28]
 801400c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			fs->wflag = 0;	/* Clear window dirty flag */
 801400e:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8014010:	69a0      	ldr	r0, [r4, #24]
 8014012:	1a51      	subs	r1, r2, r1
 8014014:	4281      	cmp	r1, r0
 8014016:	d207      	bcs.n	8014028 <sync_window+0x3e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8014018:	78e1      	ldrb	r1, [r4, #3]
 801401a:	2902      	cmp	r1, #2
 801401c:	d104      	bne.n	8014028 <sync_window+0x3e>
 801401e:	1812      	adds	r2, r2, r0
 8014020:	0029      	movs	r1, r5
 8014022:	7860      	ldrb	r0, [r4, #1]
 8014024:	f7ff ff51 	bl	8013eca <disk_write>
	FRESULT res = FR_OK;
 8014028:	2300      	movs	r3, #0
}
 801402a:	0018      	movs	r0, r3
 801402c:	bd70      	pop	{r4, r5, r6, pc}

0801402e <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 801402e:	b293      	uxth	r3, r2
 8014030:	0a1b      	lsrs	r3, r3, #8
 8014032:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8014034:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8014036:	7803      	ldrb	r3, [r0, #0]
 8014038:	2b03      	cmp	r3, #3
 801403a:	d103      	bne.n	8014044 <st_clust+0x16>
		st_16(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801403c:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801403e:	750a      	strb	r2, [r1, #20]
 8014040:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8014042:	754a      	strb	r2, [r1, #21]
}
 8014044:	4770      	bx	lr

08014046 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
 8014046:	69c3      	ldr	r3, [r0, #28]
{
 8014048:	b570      	push	{r4, r5, r6, lr}
 801404a:	0004      	movs	r4, r0
 801404c:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 801404e:	2000      	movs	r0, #0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8014050:	428b      	cmp	r3, r1
 8014052:	d011      	beq.n	8014078 <move_window+0x32>
		res = sync_window(fs);		/* Flush the window */
 8014054:	0020      	movs	r0, r4
 8014056:	f7ff ffc8 	bl	8013fea <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 801405a:	2800      	cmp	r0, #0
 801405c:	d10c      	bne.n	8014078 <move_window+0x32>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 801405e:	0021      	movs	r1, r4
 8014060:	2301      	movs	r3, #1
 8014062:	002a      	movs	r2, r5
 8014064:	7860      	ldrb	r0, [r4, #1]
 8014066:	3130      	adds	r1, #48	@ 0x30
 8014068:	f7ff ff17 	bl	8013e9a <disk_read>
 801406c:	2800      	cmp	r0, #0
 801406e:	d002      	beq.n	8014076 <move_window+0x30>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8014070:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8014072:	2001      	movs	r0, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8014074:	426d      	negs	r5, r5
			fs->winsect = sect;
 8014076:	61e5      	str	r5, [r4, #28]
}
 8014078:	bd70      	pop	{r4, r5, r6, pc}
	...

0801407c <check_fs>:
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 801407c:	2300      	movs	r3, #0
{
 801407e:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8014080:	7103      	strb	r3, [r0, #4]
 8014082:	3b01      	subs	r3, #1
 8014084:	61c3      	str	r3, [r0, #28]
{
 8014086:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8014088:	f7ff ffdd 	bl	8014046 <move_window>
 801408c:	2304      	movs	r3, #4
 801408e:	2800      	cmp	r0, #0
 8014090:	d162      	bne.n	8014158 <check_fs+0xdc>
	sign = ld_16(fs->win + BS_55AA);
 8014092:	4a32      	ldr	r2, [pc, #200]	@ (801415c <check_fs+0xe0>)
 8014094:	4b31      	ldr	r3, [pc, #196]	@ (801415c <check_fs+0xe0>)
 8014096:	18a2      	adds	r2, r4, r2
 8014098:	7855      	ldrb	r5, [r2, #1]
 801409a:	5ce3      	ldrb	r3, [r4, r3]
 801409c:	022d      	lsls	r5, r5, #8
 801409e:	431d      	orrs	r5, r3
	b = fs->win[BS_JmpBoot];
 80140a0:	0023      	movs	r3, r4
 80140a2:	3330      	adds	r3, #48	@ 0x30
 80140a4:	781b      	ldrb	r3, [r3, #0]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80140a6:	4a2e      	ldr	r2, [pc, #184]	@ (8014160 <check_fs+0xe4>)
 80140a8:	2beb      	cmp	r3, #235	@ 0xeb
 80140aa:	d003      	beq.n	80140b4 <check_fs+0x38>
 80140ac:	3318      	adds	r3, #24
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d84c      	bhi.n	801414e <check_fs+0xd2>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80140b4:	4295      	cmp	r5, r2
 80140b6:	d107      	bne.n	80140c8 <check_fs+0x4c>
 80140b8:	0020      	movs	r0, r4
 80140ba:	2208      	movs	r2, #8
 80140bc:	4929      	ldr	r1, [pc, #164]	@ (8014164 <check_fs+0xe8>)
 80140be:	3082      	adds	r0, #130	@ 0x82
 80140c0:	f006 fa0a 	bl	801a4d8 <memcmp>
			return 0;	/* It is an FAT32 VBR */
 80140c4:	1e03      	subs	r3, r0, #0
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80140c6:	d047      	beq.n	8014158 <check_fs+0xdc>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80140c8:	0023      	movs	r3, r4
 80140ca:	2280      	movs	r2, #128	@ 0x80
 80140cc:	333b      	adds	r3, #59	@ 0x3b
 80140ce:	7819      	ldrb	r1, [r3, #0]
 80140d0:	785b      	ldrb	r3, [r3, #1]
 80140d2:	0152      	lsls	r2, r2, #5
 80140d4:	021b      	lsls	r3, r3, #8
 80140d6:	430b      	orrs	r3, r1
 80140d8:	4293      	cmp	r3, r2
 80140da:	d138      	bne.n	801414e <check_fs+0xd2>
		b = fs->win[BPB_SecPerClus];
 80140dc:	0023      	movs	r3, r4
 80140de:	333d      	adds	r3, #61	@ 0x3d
 80140e0:	781b      	ldrb	r3, [r3, #0]
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d033      	beq.n	801414e <check_fs+0xd2>
 80140e6:	1e5a      	subs	r2, r3, #1
 80140e8:	4213      	tst	r3, r2
 80140ea:	d130      	bne.n	801414e <check_fs+0xd2>
			&& ld_16(fs->win + BPB_RsvdSecCnt) != 0		/* Properness of number of reserved sectors (MNBZ) */
 80140ec:	0023      	movs	r3, r4
 80140ee:	333e      	adds	r3, #62	@ 0x3e
 80140f0:	781a      	ldrb	r2, [r3, #0]
 80140f2:	3301      	adds	r3, #1
 80140f4:	781b      	ldrb	r3, [r3, #0]
 80140f6:	021b      	lsls	r3, r3, #8
 80140f8:	4313      	orrs	r3, r2
 80140fa:	d028      	beq.n	801414e <check_fs+0xd2>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 80140fc:	0023      	movs	r3, r4
 80140fe:	3340      	adds	r3, #64	@ 0x40
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	3b01      	subs	r3, #1
 8014104:	2b01      	cmp	r3, #1
 8014106:	d822      	bhi.n	801414e <check_fs+0xd2>
			&& ld_16(fs->win + BPB_RootEntCnt) != 0		/* Properness of root dir size (MNBZ) */
 8014108:	0023      	movs	r3, r4
 801410a:	3341      	adds	r3, #65	@ 0x41
 801410c:	781a      	ldrb	r2, [r3, #0]
 801410e:	3301      	adds	r3, #1
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	021b      	lsls	r3, r3, #8
 8014114:	4313      	orrs	r3, r2
 8014116:	d01a      	beq.n	801414e <check_fs+0xd2>
			&& (ld_16(fs->win + BPB_TotSec16) >= 128 || ld_32(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 8014118:	0023      	movs	r3, r4
 801411a:	3343      	adds	r3, #67	@ 0x43
 801411c:	781a      	ldrb	r2, [r3, #0]
 801411e:	3301      	adds	r3, #1
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	021b      	lsls	r3, r3, #8
 8014124:	4313      	orrs	r3, r2
 8014126:	2b7f      	cmp	r3, #127	@ 0x7f
 8014128:	d807      	bhi.n	801413a <check_fs+0xbe>
 801412a:	0020      	movs	r0, r4
 801412c:	3050      	adds	r0, #80	@ 0x50
 801412e:	f7ff ff09 	bl	8013f44 <ld_32>
 8014132:	2380      	movs	r3, #128	@ 0x80
 8014134:	025b      	lsls	r3, r3, #9
 8014136:	4298      	cmp	r0, r3
 8014138:	d309      	bcc.n	801414e <check_fs+0xd2>
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 801413a:	0023      	movs	r3, r4
 801413c:	3447      	adds	r4, #71	@ 0x47
 801413e:	7822      	ldrb	r2, [r4, #0]
 8014140:	3346      	adds	r3, #70	@ 0x46
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	0212      	lsls	r2, r2, #8
 8014146:	431a      	orrs	r2, r3
			return 0;	/* It is an FAT32 VBR */
 8014148:	2300      	movs	r3, #0
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 801414a:	429a      	cmp	r2, r3
 801414c:	d104      	bne.n	8014158 <check_fs+0xdc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 801414e:	4b06      	ldr	r3, [pc, #24]	@ (8014168 <check_fs+0xec>)
 8014150:	18eb      	adds	r3, r5, r3
 8014152:	1e5a      	subs	r2, r3, #1
 8014154:	4193      	sbcs	r3, r2
 8014156:	3302      	adds	r3, #2
}
 8014158:	0018      	movs	r0, r3
 801415a:	bd70      	pop	{r4, r5, r6, pc}
 801415c:	0000022e 	.word	0x0000022e
 8014160:	0000aa55 	.word	0x0000aa55
 8014164:	0801fff5 	.word	0x0801fff5
 8014168:	ffff55ab 	.word	0xffff55ab

0801416c <put_fat>:
{
 801416c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801416e:	0007      	movs	r7, r0
 8014170:	000d      	movs	r5, r1
 8014172:	0014      	movs	r4, r2
	FRESULT res = FR_INT_ERR;
 8014174:	2602      	movs	r6, #2
{
 8014176:	b085      	sub	sp, #20
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014178:	2901      	cmp	r1, #1
 801417a:	d945      	bls.n	8014208 <put_fat+0x9c>
 801417c:	6943      	ldr	r3, [r0, #20]
 801417e:	428b      	cmp	r3, r1
 8014180:	d942      	bls.n	8014208 <put_fat+0x9c>
		switch (fs->fs_type) {
 8014182:	7803      	ldrb	r3, [r0, #0]
 8014184:	9300      	str	r3, [sp, #0]
 8014186:	42b3      	cmp	r3, r6
 8014188:	d048      	beq.n	801421c <put_fat+0xb0>
 801418a:	2b03      	cmp	r3, #3
 801418c:	d058      	beq.n	8014240 <put_fat+0xd4>
 801418e:	2b01      	cmp	r3, #1
 8014190:	d13a      	bne.n	8014208 <put_fat+0x9c>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8014192:	084b      	lsrs	r3, r1, #1
 8014194:	185b      	adds	r3, r3, r1
 8014196:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014198:	0b19      	lsrs	r1, r3, #12
 801419a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801419c:	18c9      	adds	r1, r1, r3
 801419e:	f7ff ff52 	bl	8014046 <move_window>
 80141a2:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80141a4:	d130      	bne.n	8014208 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 80141a6:	003b      	movs	r3, r7
 80141a8:	3330      	adds	r3, #48	@ 0x30
 80141aa:	9302      	str	r3, [sp, #8]
 80141ac:	9b01      	ldr	r3, [sp, #4]
 80141ae:	9a02      	ldr	r2, [sp, #8]
 80141b0:	3301      	adds	r3, #1
 80141b2:	9303      	str	r3, [sp, #12]
 80141b4:	9b01      	ldr	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80141b6:	9900      	ldr	r1, [sp, #0]
			p = fs->win + bc++ % SS(fs);
 80141b8:	051b      	lsls	r3, r3, #20
 80141ba:	0d1b      	lsrs	r3, r3, #20
 80141bc:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80141be:	9a00      	ldr	r2, [sp, #0]
 80141c0:	402a      	ands	r2, r5
 80141c2:	9201      	str	r2, [sp, #4]
 80141c4:	b2e2      	uxtb	r2, r4
 80141c6:	420d      	tst	r5, r1
 80141c8:	d005      	beq.n	80141d6 <put_fat+0x6a>
 80141ca:	200f      	movs	r0, #15
 80141cc:	7819      	ldrb	r1, [r3, #0]
 80141ce:	0112      	lsls	r2, r2, #4
 80141d0:	4001      	ands	r1, r0
 80141d2:	430a      	orrs	r2, r1
 80141d4:	b2d2      	uxtb	r2, r2
 80141d6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80141d8:	2301      	movs	r3, #1
 80141da:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80141dc:	9b03      	ldr	r3, [sp, #12]
 80141de:	0038      	movs	r0, r7
 80141e0:	0b19      	lsrs	r1, r3, #12
 80141e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e4:	18c9      	adds	r1, r1, r3
 80141e6:	f7ff ff2e 	bl	8014046 <move_window>
 80141ea:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80141ec:	d10c      	bne.n	8014208 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 80141ee:	9b03      	ldr	r3, [sp, #12]
 80141f0:	9a02      	ldr	r2, [sp, #8]
 80141f2:	051b      	lsls	r3, r3, #20
 80141f4:	0d1b      	lsrs	r3, r3, #20
 80141f6:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80141f8:	9a01      	ldr	r2, [sp, #4]
 80141fa:	2a00      	cmp	r2, #0
 80141fc:	d007      	beq.n	801420e <put_fat+0xa2>
 80141fe:	0924      	lsrs	r4, r4, #4
 8014200:	b2e4      	uxtb	r4, r4
 8014202:	701c      	strb	r4, [r3, #0]
			fs->wflag = 1;
 8014204:	2301      	movs	r3, #1
 8014206:	713b      	strb	r3, [r7, #4]
}
 8014208:	0030      	movs	r0, r6
 801420a:	b005      	add	sp, #20
 801420c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 801420e:	210f      	movs	r1, #15
 8014210:	781a      	ldrb	r2, [r3, #0]
 8014212:	0a24      	lsrs	r4, r4, #8
 8014214:	438a      	bics	r2, r1
 8014216:	400c      	ands	r4, r1
 8014218:	4314      	orrs	r4, r2
 801421a:	e7f2      	b.n	8014202 <put_fat+0x96>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801421c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801421e:	0ac9      	lsrs	r1, r1, #11
 8014220:	18c9      	adds	r1, r1, r3
 8014222:	f7ff ff10 	bl	8014046 <move_window>
 8014226:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8014228:	d1ee      	bne.n	8014208 <put_fat+0x9c>
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 801422a:	003b      	movs	r3, r7
 801422c:	4a11      	ldr	r2, [pc, #68]	@ (8014274 <put_fat+0x108>)
 801422e:	006d      	lsls	r5, r5, #1
 8014230:	3330      	adds	r3, #48	@ 0x30
 8014232:	4015      	ands	r5, r2
 8014234:	195d      	adds	r5, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014236:	702c      	strb	r4, [r5, #0]
 8014238:	b2a4      	uxth	r4, r4
 801423a:	0a24      	lsrs	r4, r4, #8
	*ptr++ = (BYTE)val;
 801423c:	706c      	strb	r4, [r5, #1]
			fs->wflag = 1;
 801423e:	e7e1      	b.n	8014204 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014240:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014242:	0a89      	lsrs	r1, r1, #10
 8014244:	18c9      	adds	r1, r1, r3
 8014246:	f7ff fefe 	bl	8014046 <move_window>
 801424a:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 801424c:	d1dc      	bne.n	8014208 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801424e:	003b      	movs	r3, r7
 8014250:	4a09      	ldr	r2, [pc, #36]	@ (8014278 <put_fat+0x10c>)
 8014252:	00ad      	lsls	r5, r5, #2
 8014254:	3330      	adds	r3, #48	@ 0x30
 8014256:	4015      	ands	r5, r2
 8014258:	195d      	adds	r5, r3, r5
 801425a:	0028      	movs	r0, r5
 801425c:	f7ff fe72 	bl	8013f44 <ld_32>
 8014260:	0121      	lsls	r1, r4, #4
 8014262:	0f00      	lsrs	r0, r0, #28
 8014264:	0700      	lsls	r0, r0, #28
 8014266:	0909      	lsrs	r1, r1, #4
 8014268:	4301      	orrs	r1, r0
			st_32(fs->win + clst * 4 % SS(fs), val);
 801426a:	0028      	movs	r0, r5
 801426c:	f7ff fe75 	bl	8013f5a <st_32>
 8014270:	e7c8      	b.n	8014204 <put_fat+0x98>
 8014272:	46c0      	nop			@ (mov r8, r8)
 8014274:	00000ffe 	.word	0x00000ffe
 8014278:	00000ffc 	.word	0x00000ffc

0801427c <dir_clear>:
{
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	0005      	movs	r5, r0
 8014280:	000e      	movs	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014282:	f7ff feb2 	bl	8013fea <sync_window>
 8014286:	0004      	movs	r4, r0
 8014288:	2001      	movs	r0, #1
 801428a:	2c00      	cmp	r4, #0
 801428c:	d115      	bne.n	80142ba <dir_clear+0x3e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 801428e:	0031      	movs	r1, r6
 8014290:	0028      	movs	r0, r5
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8014292:	002f      	movs	r7, r5
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8014294:	f7ff fe69 	bl	8013f6a <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8014298:	2280      	movs	r2, #128	@ 0x80
 801429a:	3730      	adds	r7, #48	@ 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 801429c:	0006      	movs	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 801429e:	61e8      	str	r0, [r5, #28]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80142a0:	0021      	movs	r1, r4
 80142a2:	0038      	movs	r0, r7
 80142a4:	0152      	lsls	r2, r2, #5
 80142a6:	f006 f925 	bl	801a4f4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80142aa:	896b      	ldrh	r3, [r5, #10]
 80142ac:	429c      	cmp	r4, r3
 80142ae:	d305      	bcc.n	80142bc <dir_clear+0x40>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80142b0:	8968      	ldrh	r0, [r5, #10]
 80142b2:	1b00      	subs	r0, r0, r4
 80142b4:	1e43      	subs	r3, r0, #1
 80142b6:	4198      	sbcs	r0, r3
 80142b8:	b2c0      	uxtb	r0, r0
}
 80142ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80142bc:	2301      	movs	r3, #1
 80142be:	0039      	movs	r1, r7
 80142c0:	7868      	ldrb	r0, [r5, #1]
 80142c2:	1932      	adds	r2, r6, r4
 80142c4:	f7ff fe01 	bl	8013eca <disk_write>
 80142c8:	2800      	cmp	r0, #0
 80142ca:	d1f1      	bne.n	80142b0 <dir_clear+0x34>
 80142cc:	3401      	adds	r4, #1
 80142ce:	e7ec      	b.n	80142aa <dir_clear+0x2e>

080142d0 <sync_fs>:
{
 80142d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d2:	0004      	movs	r4, r0
	res = sync_window(fs);
 80142d4:	f7ff fe89 	bl	8013fea <sync_window>
 80142d8:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 80142da:	d149      	bne.n	8014370 <sync_fs+0xa0>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 80142dc:	7967      	ldrb	r7, [r4, #5]
 80142de:	2f01      	cmp	r7, #1
 80142e0:	d13e      	bne.n	8014360 <sync_fs+0x90>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 80142e2:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 80142e4:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 80142e6:	2b03      	cmp	r3, #3
 80142e8:	d13a      	bne.n	8014360 <sync_fs+0x90>
				memset(fs->win, 0, sizeof fs->win);
 80142ea:	0026      	movs	r6, r4
 80142ec:	2280      	movs	r2, #128	@ 0x80
 80142ee:	3630      	adds	r6, #48	@ 0x30
 80142f0:	0001      	movs	r1, r0
 80142f2:	0152      	lsls	r2, r2, #5
 80142f4:	0030      	movs	r0, r6
 80142f6:	f006 f8fd 	bl	801a4f4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80142fa:	0022      	movs	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80142fc:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 80142fe:	3231      	adds	r2, #49	@ 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8014300:	7033      	strb	r3, [r6, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014302:	7013      	strb	r3, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014304:	0023      	movs	r3, r4
 8014306:	2261      	movs	r2, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8014308:	2141      	movs	r1, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 801430a:	3332      	adds	r3, #50	@ 0x32
	*ptr++ = (BYTE)val; val >>= 8;
 801430c:	2085      	movs	r0, #133	@ 0x85
	*ptr++ = (BYTE)val; val >>= 8;
 801430e:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8014310:	7059      	strb	r1, [r3, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8014312:	2372      	movs	r3, #114	@ 0x72
 8014314:	0080      	lsls	r0, r0, #2
 8014316:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014318:	4816      	ldr	r0, [pc, #88]	@ (8014374 <sync_fs+0xa4>)
 801431a:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 801431c:	4b16      	ldr	r3, [pc, #88]	@ (8014378 <sync_fs+0xa8>)
 801431e:	54e1      	strb	r1, [r4, r3]
	*ptr++ = (BYTE)val;
 8014320:	4b16      	ldr	r3, [pc, #88]	@ (801437c <sync_fs+0xac>)
 8014322:	54e2      	strb	r2, [r4, r3]
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8014324:	3301      	adds	r3, #1
 8014326:	18e0      	adds	r0, r4, r3
 8014328:	6921      	ldr	r1, [r4, #16]
 801432a:	f7ff fe16 	bl	8013f5a <st_32>
				st_32(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 801432e:	2387      	movs	r3, #135	@ 0x87
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	18e0      	adds	r0, r4, r3
 8014334:	68e1      	ldr	r1, [r4, #12]
 8014336:	f7ff fe10 	bl	8013f5a <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 801433a:	238b      	movs	r3, #139	@ 0x8b
	*ptr++ = (BYTE)val; val >>= 8;
 801433c:	2255      	movs	r2, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	54e5      	strb	r5, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8014342:	4b0f      	ldr	r3, [pc, #60]	@ (8014380 <sync_fs+0xb0>)
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8014344:	0031      	movs	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8014346:	54e5      	strb	r5, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8014348:	4b0e      	ldr	r3, [pc, #56]	@ (8014384 <sync_fs+0xb4>)
 801434a:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 801434c:	4b0e      	ldr	r3, [pc, #56]	@ (8014388 <sync_fs+0xb8>)
 801434e:	1892      	adds	r2, r2, r2
 8014350:	54e2      	strb	r2, [r4, r3]
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8014352:	6a22      	ldr	r2, [r4, #32]
 8014354:	003b      	movs	r3, r7
 8014356:	3201      	adds	r2, #1
 8014358:	7860      	ldrb	r0, [r4, #1]
 801435a:	61e2      	str	r2, [r4, #28]
 801435c:	f7ff fdb5 	bl	8013eca <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014360:	2200      	movs	r2, #0
 8014362:	7860      	ldrb	r0, [r4, #1]
 8014364:	0011      	movs	r1, r2
 8014366:	f7ff fdd5 	bl	8013f14 <disk_ioctl>
 801436a:	1e43      	subs	r3, r0, #1
 801436c:	4198      	sbcs	r0, r3
 801436e:	b2c0      	uxtb	r0, r0
}
 8014370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014372:	46c0      	nop			@ (mov r8, r8)
 8014374:	00000215 	.word	0x00000215
 8014378:	00000216 	.word	0x00000216
 801437c:	00000217 	.word	0x00000217
 8014380:	0000022d 	.word	0x0000022d
 8014384:	0000022e 	.word	0x0000022e
 8014388:	0000022f 	.word	0x0000022f

0801438c <mount_volume>:
	*rfs = 0;
 801438c:	2300      	movs	r3, #0
{
 801438e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014390:	b08b      	sub	sp, #44	@ 0x2c
	*rfs = 0;
 8014392:	600b      	str	r3, [r1, #0]
{
 8014394:	000e      	movs	r6, r1
 8014396:	0015      	movs	r5, r2
	vol = get_ldnumber(path);
 8014398:	f7ff fdf3 	bl	8013f82 <get_ldnumber>
 801439c:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 801439e:	200b      	movs	r0, #11
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	db15      	blt.n	80143d0 <mount_volume+0x44>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80143a4:	4a99      	ldr	r2, [pc, #612]	@ (801460c <mount_volume+0x280>)
 80143a6:	009b      	lsls	r3, r3, #2
 80143a8:	589c      	ldr	r4, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80143aa:	3001      	adds	r0, #1
 80143ac:	2c00      	cmp	r4, #0
 80143ae:	d00f      	beq.n	80143d0 <mount_volume+0x44>
	*rfs = fs;							/* Return pointer to the filesystem object */
 80143b0:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80143b2:	2601      	movs	r6, #1
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80143b4:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 80143b6:	7860      	ldrb	r0, [r4, #1]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80143b8:	43b5      	bics	r5, r6
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00c      	beq.n	80143d8 <mount_volume+0x4c>
		stat = disk_status(fs->pdrv);
 80143be:	f7ff fd61 	bl	8013e84 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80143c2:	4230      	tst	r0, r6
 80143c4:	d108      	bne.n	80143d8 <mount_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80143c6:	2d00      	cmp	r5, #0
 80143c8:	d001      	beq.n	80143ce <mount_volume+0x42>
 80143ca:	0740      	lsls	r0, r0, #29
 80143cc:	d402      	bmi.n	80143d4 <mount_volume+0x48>
			return FR_OK;				/* The filesystem object is already valid */
 80143ce:	2000      	movs	r0, #0
}
 80143d0:	b00b      	add	sp, #44	@ 0x2c
 80143d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return FR_WRITE_PROTECTED;
 80143d4:	200a      	movs	r0, #10
 80143d6:	e7fb      	b.n	80143d0 <mount_volume+0x44>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80143d8:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80143da:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80143dc:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80143de:	f7ff fd53 	bl	8013e88 <disk_initialize>
 80143e2:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80143e4:	2003      	movs	r0, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80143e6:	07da      	lsls	r2, r3, #31
 80143e8:	d4f2      	bmi.n	80143d0 <mount_volume+0x44>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80143ea:	2d00      	cmp	r5, #0
 80143ec:	d001      	beq.n	80143f2 <mount_volume+0x66>
 80143ee:	075b      	lsls	r3, r3, #29
 80143f0:	d4f0      	bmi.n	80143d4 <mount_volume+0x48>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80143f2:	2100      	movs	r1, #0
 80143f4:	0020      	movs	r0, r4
 80143f6:	f7ff fe41 	bl	801407c <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80143fa:	2802      	cmp	r0, #2
 80143fc:	d120      	bne.n	8014440 <mount_volume+0xb4>
 80143fe:	0025      	movs	r5, r4
 8014400:	4b83      	ldr	r3, [pc, #524]	@ (8014610 <mount_volume+0x284>)
 8014402:	35f7      	adds	r5, #247	@ 0xf7
 8014404:	35ff      	adds	r5, #255	@ 0xff
 8014406:	ae06      	add	r6, sp, #24
 8014408:	18e7      	adds	r7, r4, r3
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 801440a:	0028      	movs	r0, r5
 801440c:	f7ff fd9a 	bl	8013f44 <ld_32>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8014410:	3510      	adds	r5, #16
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8014412:	c601      	stmia	r6!, {r0}
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8014414:	42bd      	cmp	r5, r7
 8014416:	d1f8      	bne.n	801440a <mount_volume+0x7e>
 8014418:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 801441a:	2603      	movs	r6, #3
 801441c:	00ab      	lsls	r3, r5, #2
 801441e:	aa06      	add	r2, sp, #24
 8014420:	58d1      	ldr	r1, [r2, r3]
 8014422:	0030      	movs	r0, r6
 8014424:	2900      	cmp	r1, #0
 8014426:	d004      	beq.n	8014432 <mount_volume+0xa6>
 8014428:	0020      	movs	r0, r4
 801442a:	f7ff fe27 	bl	801407c <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 801442e:	2801      	cmp	r0, #1
 8014430:	d90c      	bls.n	801444c <mount_volume+0xc0>
 8014432:	3501      	adds	r5, #1
 8014434:	2d04      	cmp	r5, #4
 8014436:	d1f1      	bne.n	801441c <mount_volume+0x90>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8014438:	2804      	cmp	r0, #4
 801443a:	d105      	bne.n	8014448 <mount_volume+0xbc>
 801443c:	2001      	movs	r0, #1
 801443e:	e7c7      	b.n	80143d0 <mount_volume+0x44>
 8014440:	2804      	cmp	r0, #4
 8014442:	d0fb      	beq.n	801443c <mount_volume+0xb0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014444:	2801      	cmp	r0, #1
 8014446:	d901      	bls.n	801444c <mount_volume+0xc0>
 8014448:	200d      	movs	r0, #13
 801444a:	e7c1      	b.n	80143d0 <mount_volume+0x44>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 801444c:	69e3      	ldr	r3, [r4, #28]
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801444e:	2280      	movs	r2, #128	@ 0x80
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8014450:	9302      	str	r3, [sp, #8]
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014452:	0023      	movs	r3, r4
 8014454:	333b      	adds	r3, #59	@ 0x3b
 8014456:	7819      	ldrb	r1, [r3, #0]
 8014458:	785b      	ldrb	r3, [r3, #1]
 801445a:	0152      	lsls	r2, r2, #5
 801445c:	021b      	lsls	r3, r3, #8
 801445e:	430b      	orrs	r3, r1
 8014460:	4293      	cmp	r3, r2
 8014462:	d1f1      	bne.n	8014448 <mount_volume+0xbc>
		fasize = ld_16(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014464:	0023      	movs	r3, r4
 8014466:	3346      	adds	r3, #70	@ 0x46
 8014468:	781a      	ldrb	r2, [r3, #0]
 801446a:	3301      	adds	r3, #1
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	021b      	lsls	r3, r3, #8
 8014470:	4313      	orrs	r3, r2
 8014472:	9301      	str	r3, [sp, #4]
		if (fasize == 0) fasize = ld_32(fs->win + BPB_FATSz32);
 8014474:	d104      	bne.n	8014480 <mount_volume+0xf4>
 8014476:	0020      	movs	r0, r4
 8014478:	3054      	adds	r0, #84	@ 0x54
 801447a:	f7ff fd63 	bl	8013f44 <ld_32>
 801447e:	9001      	str	r0, [sp, #4]
		fs->fsize = fasize;
 8014480:	9b01      	ldr	r3, [sp, #4]
 8014482:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014484:	0023      	movs	r3, r4
 8014486:	3340      	adds	r3, #64	@ 0x40
 8014488:	781d      	ldrb	r5, [r3, #0]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801448a:	1e6b      	subs	r3, r5, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801448c:	70e5      	strb	r5, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801448e:	2b01      	cmp	r3, #1
 8014490:	d8da      	bhi.n	8014448 <mount_volume+0xbc>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014492:	0023      	movs	r3, r4
 8014494:	333d      	adds	r3, #61	@ 0x3d
 8014496:	781e      	ldrb	r6, [r3, #0]
 8014498:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801449a:	2e00      	cmp	r6, #0
 801449c:	d0d4      	beq.n	8014448 <mount_volume+0xbc>
 801449e:	1e73      	subs	r3, r6, #1
 80144a0:	421e      	tst	r6, r3
 80144a2:	d1d1      	bne.n	8014448 <mount_volume+0xbc>
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80144a4:	0022      	movs	r2, r4
 80144a6:	0023      	movs	r3, r4
 80144a8:	3242      	adds	r2, #66	@ 0x42
 80144aa:	7817      	ldrb	r7, [r2, #0]
 80144ac:	3341      	adds	r3, #65	@ 0x41
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	023f      	lsls	r7, r7, #8
 80144b2:	431f      	orrs	r7, r3
 80144b4:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80144b6:	067b      	lsls	r3, r7, #25
 80144b8:	d1c6      	bne.n	8014448 <mount_volume+0xbc>
		tsect = ld_16(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 80144ba:	0023      	movs	r3, r4
 80144bc:	7890      	ldrb	r0, [r2, #2]
 80144be:	3343      	adds	r3, #67	@ 0x43
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	0200      	lsls	r0, r0, #8
 80144c4:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_32(fs->win + BPB_TotSec32);
 80144c6:	d103      	bne.n	80144d0 <mount_volume+0x144>
 80144c8:	0020      	movs	r0, r4
 80144ca:	3050      	adds	r0, #80	@ 0x50
 80144cc:	f7ff fd3a 	bl	8013f44 <ld_32>
		nrsv = ld_16(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80144d0:	0023      	movs	r3, r4
 80144d2:	333e      	adds	r3, #62	@ 0x3e
 80144d4:	781a      	ldrb	r2, [r3, #0]
 80144d6:	3301      	adds	r3, #1
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	021b      	lsls	r3, r3, #8
 80144dc:	4313      	orrs	r3, r2
 80144de:	9303      	str	r3, [sp, #12]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80144e0:	d0b2      	beq.n	8014448 <mount_volume+0xbc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80144e2:	9b01      	ldr	r3, [sp, #4]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80144e4:	9a03      	ldr	r2, [sp, #12]
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80144e6:	436b      	muls	r3, r5
 80144e8:	9305      	str	r3, [sp, #20]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80144ea:	09fb      	lsrs	r3, r7, #7
 80144ec:	189b      	adds	r3, r3, r2
 80144ee:	9a05      	ldr	r2, [sp, #20]
 80144f0:	189b      	adds	r3, r3, r2
 80144f2:	9304      	str	r3, [sp, #16]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80144f4:	4298      	cmp	r0, r3
 80144f6:	d3a7      	bcc.n	8014448 <mount_volume+0xbc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80144f8:	1ac5      	subs	r5, r0, r3
 80144fa:	0031      	movs	r1, r6
 80144fc:	0028      	movs	r0, r5
 80144fe:	f7eb fe33 	bl	8000168 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014502:	42b5      	cmp	r5, r6
 8014504:	d3a0      	bcc.n	8014448 <mount_volume+0xbc>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8014506:	4b43      	ldr	r3, [pc, #268]	@ (8014614 <mount_volume+0x288>)
 8014508:	4298      	cmp	r0, r3
 801450a:	d89d      	bhi.n	8014448 <mount_volume+0xbc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801450c:	4b42      	ldr	r3, [pc, #264]	@ (8014618 <mount_volume+0x28c>)
 801450e:	2603      	movs	r6, #3
 8014510:	4298      	cmp	r0, r3
 8014512:	d804      	bhi.n	801451e <mount_volume+0x192>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014514:	4e41      	ldr	r6, [pc, #260]	@ (801461c <mount_volume+0x290>)
 8014516:	4286      	cmp	r6, r0
 8014518:	41b6      	sbcs	r6, r6
 801451a:	4276      	negs	r6, r6
 801451c:	3601      	adds	r6, #1
		fs->volbase = bsect;							/* Volume start sector */
 801451e:	9b02      	ldr	r3, [sp, #8]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014520:	1c85      	adds	r5, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014522:	469c      	mov	ip, r3
 8014524:	9803      	ldr	r0, [sp, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8014526:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014528:	9b04      	ldr	r3, [sp, #16]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801452a:	4460      	add	r0, ip
		fs->database = bsect + sysect;					/* Data start sector */
 801452c:	4463      	add	r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801452e:	6165      	str	r5, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014530:	6260      	str	r0, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014532:	62e3      	str	r3, [r4, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8014534:	2e03      	cmp	r6, #3
 8014536:	d158      	bne.n	80145ea <mount_volume+0x25e>
			if (ld_16(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014538:	0023      	movs	r3, r4
 801453a:	335a      	adds	r3, #90	@ 0x5a
 801453c:	781a      	ldrb	r2, [r3, #0]
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	021b      	lsls	r3, r3, #8
 8014542:	4313      	orrs	r3, r2
 8014544:	433b      	orrs	r3, r7
 8014546:	d000      	beq.n	801454a <mount_volume+0x1be>
 8014548:	e77e      	b.n	8014448 <mount_volume+0xbc>
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801454a:	0020      	movs	r0, r4
 801454c:	305c      	adds	r0, #92	@ 0x5c
 801454e:	f7ff fcf9 	bl	8013f44 <ld_32>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014552:	00ad      	lsls	r5, r5, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014554:	4b32      	ldr	r3, [pc, #200]	@ (8014620 <mount_volume+0x294>)
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014556:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014558:	18ed      	adds	r5, r5, r3
 801455a:	9b01      	ldr	r3, [sp, #4]
 801455c:	0b2d      	lsrs	r5, r5, #12
 801455e:	429d      	cmp	r5, r3
 8014560:	d900      	bls.n	8014564 <mount_volume+0x1d8>
 8014562:	e771      	b.n	8014448 <mount_volume+0xbc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8014564:	2301      	movs	r3, #1
 8014566:	425b      	negs	r3, r3
 8014568:	6123      	str	r3, [r4, #16]
 801456a:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 801456c:	3381      	adds	r3, #129	@ 0x81
 801456e:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 8014570:	2e03      	cmp	r6, #3
 8014572:	d132      	bne.n	80145da <mount_volume+0x24e>
			&& ld_16(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 8014574:	0023      	movs	r3, r4
 8014576:	3360      	adds	r3, #96	@ 0x60
 8014578:	781a      	ldrb	r2, [r3, #0]
 801457a:	785b      	ldrb	r3, [r3, #1]
 801457c:	021b      	lsls	r3, r3, #8
 801457e:	4313      	orrs	r3, r2
 8014580:	2b01      	cmp	r3, #1
 8014582:	d12a      	bne.n	80145da <mount_volume+0x24e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014584:	9902      	ldr	r1, [sp, #8]
 8014586:	0020      	movs	r0, r4
 8014588:	3101      	adds	r1, #1
 801458a:	f7ff fd5c 	bl	8014046 <move_window>
 801458e:	2800      	cmp	r0, #0
 8014590:	d123      	bne.n	80145da <mount_volume+0x24e>
			fs->fsi_flag = 0;
 8014592:	7160      	strb	r0, [r4, #5]
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 8014594:	0020      	movs	r0, r4
 8014596:	3030      	adds	r0, #48	@ 0x30
 8014598:	f7ff fcd4 	bl	8013f44 <ld_32>
 801459c:	4b21      	ldr	r3, [pc, #132]	@ (8014624 <mount_volume+0x298>)
 801459e:	4298      	cmp	r0, r3
 80145a0:	d11b      	bne.n	80145da <mount_volume+0x24e>
				&& ld_32(fs->win + FSI_StrucSig) == 0x61417272
 80145a2:	2385      	movs	r3, #133	@ 0x85
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	18e0      	adds	r0, r4, r3
 80145a8:	f7ff fccc 	bl	8013f44 <ld_32>
 80145ac:	4b1e      	ldr	r3, [pc, #120]	@ (8014628 <mount_volume+0x29c>)
 80145ae:	4298      	cmp	r0, r3
 80145b0:	d113      	bne.n	80145da <mount_volume+0x24e>
				&& ld_32(fs->win + FSI_TrailSig) == 0xAA550000)
 80145b2:	238b      	movs	r3, #139	@ 0x8b
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	18e0      	adds	r0, r4, r3
 80145b8:	f7ff fcc4 	bl	8013f44 <ld_32>
 80145bc:	4b1b      	ldr	r3, [pc, #108]	@ (801462c <mount_volume+0x2a0>)
 80145be:	4298      	cmp	r0, r3
 80145c0:	d10b      	bne.n	80145da <mount_volume+0x24e>
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 80145c2:	2386      	movs	r3, #134	@ 0x86
 80145c4:	009b      	lsls	r3, r3, #2
 80145c6:	18e0      	adds	r0, r4, r3
 80145c8:	f7ff fcbc 	bl	8013f44 <ld_32>
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 80145cc:	2387      	movs	r3, #135	@ 0x87
 80145ce:	009b      	lsls	r3, r3, #2
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 80145d0:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 80145d2:	18e0      	adds	r0, r4, r3
 80145d4:	f7ff fcb6 	bl	8013f44 <ld_32>
 80145d8:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 80145da:	4a15      	ldr	r2, [pc, #84]	@ (8014630 <mount_volume+0x2a4>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80145dc:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80145de:	8813      	ldrh	r3, [r2, #0]
 80145e0:	3301      	adds	r3, #1
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	8013      	strh	r3, [r2, #0]
 80145e6:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 80145e8:	e6f1      	b.n	80143ce <mount_volume+0x42>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80145ea:	2f00      	cmp	r7, #0
 80145ec:	d100      	bne.n	80145f0 <mount_volume+0x264>
 80145ee:	e72b      	b.n	8014448 <mount_volume+0xbc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80145f0:	9b05      	ldr	r3, [sp, #20]
 80145f2:	18c0      	adds	r0, r0, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80145f4:	2e02      	cmp	r6, #2
 80145f6:	d101      	bne.n	80145fc <mount_volume+0x270>
 80145f8:	006d      	lsls	r5, r5, #1
 80145fa:	e7ab      	b.n	8014554 <mount_volume+0x1c8>
 80145fc:	2303      	movs	r3, #3
 80145fe:	2201      	movs	r2, #1
 8014600:	436b      	muls	r3, r5
 8014602:	4015      	ands	r5, r2
 8014604:	085b      	lsrs	r3, r3, #1
 8014606:	195d      	adds	r5, r3, r5
 8014608:	e7a4      	b.n	8014554 <mount_volume+0x1c8>
 801460a:	46c0      	nop			@ (mov r8, r8)
 801460c:	200030dc 	.word	0x200030dc
 8014610:	00000236 	.word	0x00000236
 8014614:	0ffffff5 	.word	0x0ffffff5
 8014618:	0000fff5 	.word	0x0000fff5
 801461c:	00000ff5 	.word	0x00000ff5
 8014620:	00000fff 	.word	0x00000fff
 8014624:	41615252 	.word	0x41615252
 8014628:	61417272 	.word	0x61417272
 801462c:	aa550000 	.word	0xaa550000
 8014630:	200030d8 	.word	0x200030d8

08014634 <get_fileinfo.part.0.constprop.0.isra.0>:
static void get_fileinfo (
 8014634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8014636:	2300      	movs	r3, #0
static void get_fileinfo (
 8014638:	000c      	movs	r4, r1
	si = di = 0;
 801463a:	001a      	movs	r2, r3
static void get_fileinfo (
 801463c:	0005      	movs	r5, r0
		c = (TCHAR)dp->dir[si++];
 801463e:	3801      	subs	r0, #1
 8014640:	3201      	adds	r2, #1
 8014642:	5c81      	ldrb	r1, [r0, r2]
		if (c == ' ') continue;		/* Skip padding spaces */
 8014644:	2920      	cmp	r1, #32
 8014646:	d00b      	beq.n	8014660 <get_fileinfo.part.0.constprop.0.isra.0+0x2c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8014648:	2905      	cmp	r1, #5
 801464a:	d100      	bne.n	801464e <get_fileinfo.part.0.constprop.0.isra.0+0x1a>
 801464c:	31e0      	adds	r1, #224	@ 0xe0
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 801464e:	2a09      	cmp	r2, #9
 8014650:	d103      	bne.n	801465a <get_fileinfo.part.0.constprop.0.isra.0+0x26>
 8014652:	272e      	movs	r7, #46	@ 0x2e
 8014654:	18e6      	adds	r6, r4, r3
 8014656:	7277      	strb	r7, [r6, #9]
 8014658:	3301      	adds	r3, #1
		fno->fname[di++] = c;
 801465a:	18e6      	adds	r6, r4, r3
 801465c:	7271      	strb	r1, [r6, #9]
 801465e:	3301      	adds	r3, #1
	while (si < 11) {		/* Copy name body and extension */
 8014660:	2a0b      	cmp	r2, #11
 8014662:	d1ed      	bne.n	8014640 <get_fileinfo.part.0.constprop.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 8014664:	2200      	movs	r2, #0
	fno->fsize = ld_32(dp->dir + DIR_FileSize);		/* Size */
 8014666:	0028      	movs	r0, r5
	fno->fname[di] = 0;		/* Terminate the SFN */
 8014668:	18e3      	adds	r3, r4, r3
 801466a:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;		/* Attribute */
 801466c:	7aeb      	ldrb	r3, [r5, #11]
 801466e:	323f      	adds	r2, #63	@ 0x3f
 8014670:	4013      	ands	r3, r2
 8014672:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_32(dp->dir + DIR_FileSize);		/* Size */
 8014674:	301c      	adds	r0, #28
 8014676:	f7ff fc65 	bl	8013f44 <ld_32>
 801467a:	6020      	str	r0, [r4, #0]
	fno->ftime = ld_16(dp->dir + DIR_ModTime + 0);	/* Last modified time */
 801467c:	7deb      	ldrb	r3, [r5, #23]
 801467e:	7daa      	ldrb	r2, [r5, #22]
 8014680:	021b      	lsls	r3, r3, #8
 8014682:	4313      	orrs	r3, r2
 8014684:	80e3      	strh	r3, [r4, #6]
	fno->fdate = ld_16(dp->dir + DIR_ModTime + 2);	/* Last Modified date */
 8014686:	7e6b      	ldrb	r3, [r5, #25]
 8014688:	7e2a      	ldrb	r2, [r5, #24]
 801468a:	021b      	lsls	r3, r3, #8
 801468c:	4313      	orrs	r3, r2
 801468e:	80a3      	strh	r3, [r4, #4]
}
 8014690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014692 <ld_clust.isra.0>:
	cl = ld_16(dir + DIR_FstClusLO);
 8014692:	7ecb      	ldrb	r3, [r1, #27]
static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
 8014694:	0002      	movs	r2, r0
	cl = ld_16(dir + DIR_FstClusLO);
 8014696:	7e88      	ldrb	r0, [r1, #26]
 8014698:	021b      	lsls	r3, r3, #8
 801469a:	4318      	orrs	r0, r3
	if (fs->fs_type == FS_FAT32) {
 801469c:	2a03      	cmp	r2, #3
 801469e:	d105      	bne.n	80146ac <ld_clust.isra.0+0x1a>
		cl |= (DWORD)ld_16(dir + DIR_FstClusHI) << 16;
 80146a0:	7d4b      	ldrb	r3, [r1, #21]
 80146a2:	7d0a      	ldrb	r2, [r1, #20]
 80146a4:	021b      	lsls	r3, r3, #8
 80146a6:	4313      	orrs	r3, r2
 80146a8:	041b      	lsls	r3, r3, #16
 80146aa:	4318      	orrs	r0, r3
}
 80146ac:	4770      	bx	lr
	...

080146b0 <get_fat.isra.0>:
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80146b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 80146b2:	2601      	movs	r6, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80146b4:	0005      	movs	r5, r0
 80146b6:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80146b8:	42b1      	cmp	r1, r6
 80146ba:	d914      	bls.n	80146e6 <get_fat.isra.0+0x36>
 80146bc:	6943      	ldr	r3, [r0, #20]
 80146be:	4299      	cmp	r1, r3
 80146c0:	d211      	bcs.n	80146e6 <get_fat.isra.0+0x36>
		switch (fs->fs_type) {
 80146c2:	7803      	ldrb	r3, [r0, #0]
 80146c4:	2b02      	cmp	r3, #2
 80146c6:	d02e      	beq.n	8014726 <get_fat.isra.0+0x76>
 80146c8:	2b03      	cmp	r3, #3
 80146ca:	d03f      	beq.n	801474c <get_fat.isra.0+0x9c>
 80146cc:	42b3      	cmp	r3, r6
 80146ce:	d10a      	bne.n	80146e6 <get_fat.isra.0+0x36>
			bc = (UINT)clst; bc += bc / 2;
 80146d0:	084f      	lsrs	r7, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 80146d4:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146d6:	0b39      	lsrs	r1, r7, #12
 80146d8:	18c9      	adds	r1, r1, r3
 80146da:	f7ff fcb4 	bl	8014046 <move_window>
 80146de:	2800      	cmp	r0, #0
 80146e0:	d003      	beq.n	80146ea <get_fat.isra.0+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80146e2:	2601      	movs	r6, #1
 80146e4:	4276      	negs	r6, r6
}
 80146e6:	0030      	movs	r0, r6
 80146e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80146ea:	1c7b      	adds	r3, r7, #1
 80146ec:	053f      	lsls	r7, r7, #20
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146ee:	0b19      	lsrs	r1, r3, #12
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80146f0:	9301      	str	r3, [sp, #4]
 80146f2:	0d3f      	lsrs	r7, r7, #20
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146f4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80146f6:	19ef      	adds	r7, r5, r7
 80146f8:	3730      	adds	r7, #48	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146fa:	0028      	movs	r0, r5
 80146fc:	18c9      	adds	r1, r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80146fe:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014700:	f7ff fca1 	bl	8014046 <move_window>
 8014704:	2800      	cmp	r0, #0
 8014706:	d1ec      	bne.n	80146e2 <get_fat.isra.0+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8014708:	9b01      	ldr	r3, [sp, #4]
 801470a:	051b      	lsls	r3, r3, #20
 801470c:	0d1b      	lsrs	r3, r3, #20
 801470e:	18eb      	adds	r3, r5, r3
 8014710:	3330      	adds	r3, #48	@ 0x30
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	021b      	lsls	r3, r3, #8
 8014716:	433b      	orrs	r3, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8014718:	4234      	tst	r4, r6
 801471a:	d001      	beq.n	8014720 <get_fat.isra.0+0x70>
 801471c:	091e      	lsrs	r6, r3, #4
 801471e:	e7e2      	b.n	80146e6 <get_fat.isra.0+0x36>
 8014720:	051b      	lsls	r3, r3, #20
 8014722:	0d1e      	lsrs	r6, r3, #20
 8014724:	e7df      	b.n	80146e6 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014726:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014728:	0ac9      	lsrs	r1, r1, #11
 801472a:	18c9      	adds	r1, r1, r3
 801472c:	f7ff fc8b 	bl	8014046 <move_window>
 8014730:	2800      	cmp	r0, #0
 8014732:	d1d6      	bne.n	80146e2 <get_fat.isra.0+0x32>
			val = ld_16(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8014734:	4b0e      	ldr	r3, [pc, #56]	@ (8014770 <get_fat.isra.0+0xc0>)
 8014736:	0064      	lsls	r4, r4, #1
 8014738:	401c      	ands	r4, r3
 801473a:	192c      	adds	r4, r5, r4
 801473c:	0023      	movs	r3, r4
 801473e:	3431      	adds	r4, #49	@ 0x31
 8014740:	7826      	ldrb	r6, [r4, #0]
 8014742:	3330      	adds	r3, #48	@ 0x30
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	0236      	lsls	r6, r6, #8
 8014748:	431e      	orrs	r6, r3
			break;
 801474a:	e7cc      	b.n	80146e6 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801474c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801474e:	0a89      	lsrs	r1, r1, #10
 8014750:	18c9      	adds	r1, r1, r3
 8014752:	f7ff fc78 	bl	8014046 <move_window>
 8014756:	2800      	cmp	r0, #0
 8014758:	d1c3      	bne.n	80146e2 <get_fat.isra.0+0x32>
			val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 801475a:	4b06      	ldr	r3, [pc, #24]	@ (8014774 <get_fat.isra.0+0xc4>)
 801475c:	00a4      	lsls	r4, r4, #2
 801475e:	401c      	ands	r4, r3
 8014760:	3530      	adds	r5, #48	@ 0x30
 8014762:	1928      	adds	r0, r5, r4
 8014764:	f7ff fbee 	bl	8013f44 <ld_32>
 8014768:	0106      	lsls	r6, r0, #4
 801476a:	0936      	lsrs	r6, r6, #4
			break;
 801476c:	e7bb      	b.n	80146e6 <get_fat.isra.0+0x36>
 801476e:	46c0      	nop			@ (mov r8, r8)
 8014770:	00000ffe 	.word	0x00000ffe
 8014774:	00000ffc 	.word	0x00000ffc

08014778 <dir_sdi.constprop.0>:
	dp->dptr = ofs;				/* Set current offset */
 8014778:	2300      	movs	r3, #0
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 801477a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801477c:	6884      	ldr	r4, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 801477e:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 8014780:	6806      	ldr	r6, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8014782:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014784:	429c      	cmp	r4, r3
 8014786:	d118      	bne.n	80147ba <dir_sdi.constprop.0+0x42>
 8014788:	7833      	ldrb	r3, [r6, #0]
 801478a:	2b02      	cmp	r3, #2
 801478c:	d902      	bls.n	8014794 <dir_sdi.constprop.0+0x1c>
		clst = (DWORD)fs->dirbase;
 801478e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8014790:	2b00      	cmp	r3, #0
 8014792:	d111      	bne.n	80147b8 <dir_sdi.constprop.0+0x40>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8014794:	8933      	ldrh	r3, [r6, #8]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <dir_sdi.constprop.0+0x26>
		return FR_INT_ERR;
 801479a:	2002      	movs	r0, #2
}
 801479c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
 801479e:	2700      	movs	r7, #0
 80147a0:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80147a2:	61a8      	str	r0, [r5, #24]
	dp->clust = clst;					/* Current cluster# */
 80147a4:	616f      	str	r7, [r5, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80147a6:	2800      	cmp	r0, #0
 80147a8:	d0f7      	beq.n	801479a <dir_sdi.constprop.0+0x22>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80147aa:	0b24      	lsrs	r4, r4, #12
 80147ac:	1820      	adds	r0, r4, r0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80147ae:	3630      	adds	r6, #48	@ 0x30
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80147b0:	61a8      	str	r0, [r5, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80147b2:	61ee      	str	r6, [r5, #28]
	return FR_OK;
 80147b4:	2000      	movs	r0, #0
 80147b6:	e7f1      	b.n	801479c <dir_sdi.constprop.0+0x24>
 80147b8:	001c      	movs	r4, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80147ba:	0027      	movs	r7, r4
 80147bc:	2400      	movs	r4, #0
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80147be:	8973      	ldrh	r3, [r6, #10]
 80147c0:	031b      	lsls	r3, r3, #12
 80147c2:	9301      	str	r3, [sp, #4]
		while (ofs >= csz) {				/* Follow cluster chain */
 80147c4:	9b01      	ldr	r3, [sp, #4]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80147c6:	0039      	movs	r1, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 80147c8:	42a3      	cmp	r3, r4
 80147ca:	d903      	bls.n	80147d4 <dir_sdi.constprop.0+0x5c>
		dp->sect = clst2sect(fs, clst);
 80147cc:	0030      	movs	r0, r6
 80147ce:	f7ff fbcc 	bl	8013f6a <clst2sect>
 80147d2:	e7e6      	b.n	80147a2 <dir_sdi.constprop.0+0x2a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80147d4:	6828      	ldr	r0, [r5, #0]
 80147d6:	f7ff ff6b 	bl	80146b0 <get_fat.isra.0>
 80147da:	0007      	movs	r7, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d007      	beq.n	80147f0 <dir_sdi.constprop.0+0x78>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80147e0:	2801      	cmp	r0, #1
 80147e2:	d9da      	bls.n	801479a <dir_sdi.constprop.0+0x22>
 80147e4:	6973      	ldr	r3, [r6, #20]
 80147e6:	4298      	cmp	r0, r3
 80147e8:	d2d7      	bcs.n	801479a <dir_sdi.constprop.0+0x22>
			ofs -= csz;
 80147ea:	9b01      	ldr	r3, [sp, #4]
 80147ec:	1ae4      	subs	r4, r4, r3
 80147ee:	e7e9      	b.n	80147c4 <dir_sdi.constprop.0+0x4c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80147f0:	2001      	movs	r0, #1
 80147f2:	e7d3      	b.n	801479c <dir_sdi.constprop.0+0x24>

080147f4 <remove_chain>:
{
 80147f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f6:	000c      	movs	r4, r1
 80147f8:	0006      	movs	r6, r0
 80147fa:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
 80147fc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80147fe:	2c01      	cmp	r4, #1
 8014800:	d92d      	bls.n	801485e <remove_chain+0x6a>
 8014802:	696b      	ldr	r3, [r5, #20]
 8014804:	42a3      	cmp	r3, r4
 8014806:	d92a      	bls.n	801485e <remove_chain+0x6a>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014808:	2a00      	cmp	r2, #0
 801480a:	d006      	beq.n	801481a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801480c:	2201      	movs	r2, #1
 801480e:	0028      	movs	r0, r5
 8014810:	4252      	negs	r2, r2
 8014812:	f7ff fcab 	bl	801416c <put_fat>
		if (res != FR_OK) return res;
 8014816:	2800      	cmp	r0, #0
 8014818:	d107      	bne.n	801482a <remove_chain+0x36>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801481a:	0021      	movs	r1, r4
 801481c:	6830      	ldr	r0, [r6, #0]
 801481e:	f7ff ff47 	bl	80146b0 <get_fat.isra.0>
 8014822:	0027      	movs	r7, r4
 8014824:	1e04      	subs	r4, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
 8014826:	d101      	bne.n	801482c <remove_chain+0x38>
	return FR_OK;
 8014828:	2000      	movs	r0, #0
}
 801482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801482c:	2801      	cmp	r0, #1
 801482e:	d016      	beq.n	801485e <remove_chain+0x6a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014830:	1c43      	adds	r3, r0, #1
 8014832:	d016      	beq.n	8014862 <remove_chain+0x6e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014834:	2200      	movs	r2, #0
 8014836:	0039      	movs	r1, r7
 8014838:	0028      	movs	r0, r5
 801483a:	f7ff fc97 	bl	801416c <put_fat>
			if (res != FR_OK) return res;
 801483e:	2800      	cmp	r0, #0
 8014840:	d1f3      	bne.n	801482a <remove_chain+0x36>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8014842:	696a      	ldr	r2, [r5, #20]
 8014844:	692b      	ldr	r3, [r5, #16]
 8014846:	1e91      	subs	r1, r2, #2
 8014848:	428b      	cmp	r3, r1
 801484a:	d205      	bcs.n	8014858 <remove_chain+0x64>
			fs->fsi_flag |= 1;
 801484c:	2101      	movs	r1, #1
			fs->free_clst++;
 801484e:	3301      	adds	r3, #1
 8014850:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8014852:	796b      	ldrb	r3, [r5, #5]
 8014854:	430b      	orrs	r3, r1
 8014856:	716b      	strb	r3, [r5, #5]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8014858:	42a2      	cmp	r2, r4
 801485a:	d8de      	bhi.n	801481a <remove_chain+0x26>
 801485c:	e7e4      	b.n	8014828 <remove_chain+0x34>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801485e:	2002      	movs	r0, #2
 8014860:	e7e3      	b.n	801482a <remove_chain+0x36>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014862:	2001      	movs	r0, #1
 8014864:	e7e1      	b.n	801482a <remove_chain+0x36>

08014866 <create_chain>:
{
 8014866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8014868:	6805      	ldr	r5, [r0, #0]
{
 801486a:	9001      	str	r0, [sp, #4]
 801486c:	9100      	str	r1, [sp, #0]
	if (clst == 0) {	/* Create a new chain */
 801486e:	2900      	cmp	r1, #0
 8014870:	d10a      	bne.n	8014888 <create_chain+0x22>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8014872:	68ef      	ldr	r7, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014874:	2f00      	cmp	r7, #0
 8014876:	d018      	beq.n	80148aa <create_chain+0x44>
 8014878:	696b      	ldr	r3, [r5, #20]
 801487a:	42bb      	cmp	r3, r7
 801487c:	d915      	bls.n	80148aa <create_chain+0x44>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 801487e:	692b      	ldr	r3, [r5, #16]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d114      	bne.n	80148ae <create_chain+0x48>
 8014884:	2400      	movs	r4, #0
 8014886:	e007      	b.n	8014898 <create_chain+0x32>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014888:	0028      	movs	r0, r5
 801488a:	9900      	ldr	r1, [sp, #0]
 801488c:	f7ff ff10 	bl	80146b0 <get_fat.isra.0>
 8014890:	0004      	movs	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8014892:	2801      	cmp	r0, #1
 8014894:	d802      	bhi.n	801489c <create_chain+0x36>
 8014896:	2401      	movs	r4, #1
}
 8014898:	0020      	movs	r0, r4
 801489a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 801489c:	1c43      	adds	r3, r0, #1
 801489e:	d05b      	beq.n	8014958 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80148a0:	696b      	ldr	r3, [r5, #20]
		scl = clst;							/* Cluster to start to find */
 80148a2:	9f00      	ldr	r7, [sp, #0]
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80148a4:	4283      	cmp	r3, r0
 80148a6:	d9ea      	bls.n	801487e <create_chain+0x18>
 80148a8:	e7f6      	b.n	8014898 <create_chain+0x32>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80148aa:	2701      	movs	r7, #1
 80148ac:	e7e7      	b.n	801487e <create_chain+0x18>
		if (scl == clst) {						/* Stretching an existing chain? */
 80148ae:	9a00      	ldr	r2, [sp, #0]
			if (ncl >= fs->n_fatent) ncl = 2;
 80148b0:	696b      	ldr	r3, [r5, #20]
		if (scl == clst) {						/* Stretching an existing chain? */
 80148b2:	4297      	cmp	r7, r2
 80148b4:	d114      	bne.n	80148e0 <create_chain+0x7a>
			ncl = scl + 1;						/* Test if next cluster is free */
 80148b6:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 80148b8:	42a3      	cmp	r3, r4
 80148ba:	d800      	bhi.n	80148be <create_chain+0x58>
 80148bc:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80148be:	9b01      	ldr	r3, [sp, #4]
 80148c0:	0021      	movs	r1, r4
 80148c2:	6818      	ldr	r0, [r3, #0]
 80148c4:	f7ff fef4 	bl	80146b0 <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80148c8:	2801      	cmp	r0, #1
 80148ca:	d0e4      	beq.n	8014896 <create_chain+0x30>
 80148cc:	1c43      	adds	r3, r0, #1
 80148ce:	d043      	beq.n	8014958 <create_chain+0xf2>
			if (cs != 0) {						/* Not free? */
 80148d0:	2800      	cmp	r0, #0
 80148d2:	d01c      	beq.n	801490e <create_chain+0xa8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80148d4:	68ee      	ldr	r6, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80148d6:	2e01      	cmp	r6, #1
 80148d8:	d902      	bls.n	80148e0 <create_chain+0x7a>
 80148da:	696b      	ldr	r3, [r5, #20]
 80148dc:	429e      	cmp	r6, r3
 80148de:	d300      	bcc.n	80148e2 <create_chain+0x7c>
			if (ncl >= fs->n_fatent) ncl = 2;
 80148e0:	003e      	movs	r6, r7
			ncl = scl;	/* Start cluster */
 80148e2:	0034      	movs	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80148e4:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 80148e6:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80148e8:	42a3      	cmp	r3, r4
 80148ea:	d802      	bhi.n	80148f2 <create_chain+0x8c>
					if (ncl > scl) return 0;	/* No free cluster found? */
 80148ec:	2e01      	cmp	r6, #1
 80148ee:	d0c9      	beq.n	8014884 <create_chain+0x1e>
					ncl = 2;
 80148f0:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80148f2:	9b01      	ldr	r3, [sp, #4]
 80148f4:	0021      	movs	r1, r4
 80148f6:	6818      	ldr	r0, [r3, #0]
 80148f8:	f7ff feda 	bl	80146b0 <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 80148fc:	2800      	cmp	r0, #0
 80148fe:	d008      	beq.n	8014912 <create_chain+0xac>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8014900:	2801      	cmp	r0, #1
 8014902:	d0c8      	beq.n	8014896 <create_chain+0x30>
 8014904:	3001      	adds	r0, #1
 8014906:	d027      	beq.n	8014958 <create_chain+0xf2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8014908:	42b4      	cmp	r4, r6
 801490a:	d1eb      	bne.n	80148e4 <create_chain+0x7e>
 801490c:	e7ba      	b.n	8014884 <create_chain+0x1e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 801490e:	2c00      	cmp	r4, #0
 8014910:	d0e6      	beq.n	80148e0 <create_chain+0x7a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8014912:	2201      	movs	r2, #1
 8014914:	0021      	movs	r1, r4
 8014916:	0028      	movs	r0, r5
 8014918:	4252      	negs	r2, r2
 801491a:	f7ff fc27 	bl	801416c <put_fat>
		if (res == FR_OK && clst != 0) {
 801491e:	2800      	cmp	r0, #0
 8014920:	d118      	bne.n	8014954 <create_chain+0xee>
 8014922:	9b00      	ldr	r3, [sp, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d10e      	bne.n	8014946 <create_chain+0xe0>
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8014928:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 801492a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 801492c:	2b00      	cmp	r3, #0
 801492e:	d0b3      	beq.n	8014898 <create_chain+0x32>
 8014930:	696a      	ldr	r2, [r5, #20]
 8014932:	3a02      	subs	r2, #2
 8014934:	4293      	cmp	r3, r2
 8014936:	d8af      	bhi.n	8014898 <create_chain+0x32>
			fs->free_clst--;
 8014938:	3b01      	subs	r3, #1
 801493a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 801493c:	2301      	movs	r3, #1
 801493e:	796a      	ldrb	r2, [r5, #5]
 8014940:	4313      	orrs	r3, r2
 8014942:	716b      	strb	r3, [r5, #5]
 8014944:	e7a8      	b.n	8014898 <create_chain+0x32>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8014946:	0022      	movs	r2, r4
 8014948:	0028      	movs	r0, r5
 801494a:	9900      	ldr	r1, [sp, #0]
 801494c:	f7ff fc0e 	bl	801416c <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8014950:	2800      	cmp	r0, #0
 8014952:	d0e9      	beq.n	8014928 <create_chain+0xc2>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014954:	2801      	cmp	r0, #1
 8014956:	d19e      	bne.n	8014896 <create_chain+0x30>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8014958:	2401      	movs	r4, #1
 801495a:	4264      	negs	r4, r4
 801495c:	e79c      	b.n	8014898 <create_chain+0x32>

0801495e <dir_next>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 801495e:	2380      	movs	r3, #128	@ 0x80
{
 8014960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014962:	6907      	ldr	r7, [r0, #16]
{
 8014964:	0004      	movs	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014966:	3720      	adds	r7, #32
	FATFS *fs = dp->obj.fs;
 8014968:	6806      	ldr	r6, [r0, #0]
{
 801496a:	9101      	str	r1, [sp, #4]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 801496c:	039b      	lsls	r3, r3, #14
 801496e:	429f      	cmp	r7, r3
 8014970:	d301      	bcc.n	8014976 <dir_next+0x18>
 8014972:	2300      	movs	r3, #0
 8014974:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8014976:	69a3      	ldr	r3, [r4, #24]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d00f      	beq.n	801499c <dir_next+0x3e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801497c:	053a      	lsls	r2, r7, #20
 801497e:	0d11      	lsrs	r1, r2, #20
 8014980:	9100      	str	r1, [sp, #0]
 8014982:	2a00      	cmp	r2, #0
 8014984:	d13b      	bne.n	80149fe <dir_next+0xa0>
		if (dp->clust == 0) {	/* Static table */
 8014986:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
 8014988:	3301      	adds	r3, #1
 801498a:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
 801498c:	2900      	cmp	r1, #0
 801498e:	d107      	bne.n	80149a0 <dir_next+0x42>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014990:	8932      	ldrh	r2, [r6, #8]
 8014992:	097b      	lsrs	r3, r7, #5
 8014994:	4293      	cmp	r3, r2
 8014996:	d332      	bcc.n	80149fe <dir_next+0xa0>
				dp->sect = 0; return FR_NO_FILE;
 8014998:	2300      	movs	r3, #0
 801499a:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 801499c:	2004      	movs	r0, #4
}
 801499e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80149a0:	8973      	ldrh	r3, [r6, #10]
 80149a2:	0b3a      	lsrs	r2, r7, #12
 80149a4:	3b01      	subs	r3, #1
 80149a6:	421a      	tst	r2, r3
 80149a8:	d129      	bne.n	80149fe <dir_next+0xa0>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80149aa:	0030      	movs	r0, r6
 80149ac:	f7ff fe80 	bl	80146b0 <get_fat.isra.0>
 80149b0:	0005      	movs	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80149b2:	2801      	cmp	r0, #1
 80149b4:	d801      	bhi.n	80149ba <dir_next+0x5c>
 80149b6:	2002      	movs	r0, #2
 80149b8:	e7f1      	b.n	801499e <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d101      	bne.n	80149c2 <dir_next+0x64>
 80149be:	2001      	movs	r0, #1
 80149c0:	e7ed      	b.n	801499e <dir_next+0x40>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80149c2:	6973      	ldr	r3, [r6, #20]
 80149c4:	4283      	cmp	r3, r0
 80149c6:	d814      	bhi.n	80149f2 <dir_next+0x94>
					if (!stretch) {								/* If no stretch, report EOT */
 80149c8:	9b01      	ldr	r3, [sp, #4]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d0e4      	beq.n	8014998 <dir_next+0x3a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80149ce:	0020      	movs	r0, r4
 80149d0:	6961      	ldr	r1, [r4, #20]
 80149d2:	f7ff ff48 	bl	8014866 <create_chain>
 80149d6:	0005      	movs	r5, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80149d8:	2007      	movs	r0, #7
 80149da:	2d00      	cmp	r5, #0
 80149dc:	d0df      	beq.n	801499e <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80149de:	2d01      	cmp	r5, #1
 80149e0:	d0e9      	beq.n	80149b6 <dir_next+0x58>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80149e2:	1c6b      	adds	r3, r5, #1
 80149e4:	d0eb      	beq.n	80149be <dir_next+0x60>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80149e6:	0029      	movs	r1, r5
 80149e8:	0030      	movs	r0, r6
 80149ea:	f7ff fc47 	bl	801427c <dir_clear>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d1e5      	bne.n	80149be <dir_next+0x60>
				dp->sect = clst2sect(fs, clst);
 80149f2:	0029      	movs	r1, r5
 80149f4:	0030      	movs	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 80149f6:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 80149f8:	f7ff fab7 	bl	8013f6a <clst2sect>
 80149fc:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80149fe:	9b00      	ldr	r3, [sp, #0]
 8014a00:	3630      	adds	r6, #48	@ 0x30
 8014a02:	18f6      	adds	r6, r6, r3
	return FR_OK;
 8014a04:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8014a06:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014a08:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8014a0a:	e7c8      	b.n	801499e <dir_next+0x40>

08014a0c <follow_path>:
{
 8014a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a0e:	0005      	movs	r5, r0
 8014a10:	000f      	movs	r7, r1
	FATFS *fs = dp->obj.fs;
 8014a12:	6803      	ldr	r3, [r0, #0]
{
 8014a14:	b087      	sub	sp, #28
	FATFS *fs = dp->obj.fs;
 8014a16:	9304      	str	r3, [sp, #16]
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 8014a18:	783b      	ldrb	r3, [r7, #0]
 8014a1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a1c:	d011      	beq.n	8014a42 <follow_path+0x36>
 8014a1e:	2b5c      	cmp	r3, #92	@ 0x5c
 8014a20:	d00f      	beq.n	8014a42 <follow_path+0x36>
		dp->obj.sclust = 0;					/* Start at the root directory */
 8014a22:	2300      	movs	r3, #0
 8014a24:	60ab      	str	r3, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014a26:	783b      	ldrb	r3, [r7, #0]
 8014a28:	2b1f      	cmp	r3, #31
 8014a2a:	d840      	bhi.n	8014aae <follow_path+0xa2>
		dp->fn[NSFLAG] = NS_NONAME;
 8014a2c:	002b      	movs	r3, r5
 8014a2e:	2280      	movs	r2, #128	@ 0x80
 8014a30:	332b      	adds	r3, #43	@ 0x2b
		res = dir_sdi(dp, 0);
 8014a32:	0028      	movs	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8014a34:	701a      	strb	r2, [r3, #0]
		res = dir_sdi(dp, 0);
 8014a36:	f7ff fe9f 	bl	8014778 <dir_sdi.constprop.0>
 8014a3a:	0004      	movs	r4, r0
}
 8014a3c:	0020      	movs	r0, r4
 8014a3e:	b007      	add	sp, #28
 8014a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 8014a42:	3701      	adds	r7, #1
 8014a44:	e7e8      	b.n	8014a18 <follow_path+0xc>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separators */
 8014a46:	3301      	adds	r3, #1
 8014a48:	e04a      	b.n	8014ae0 <follow_path+0xd4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8014a4a:	9b03      	ldr	r3, [sp, #12]
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8014a4c:	2c2e      	cmp	r4, #46	@ 0x2e
 8014a4e:	d100      	bne.n	8014a52 <follow_path+0x46>
 8014a50:	e093      	b.n	8014b7a <follow_path+0x16e>
 8014a52:	42b3      	cmp	r3, r6
 8014a54:	d800      	bhi.n	8014a58 <follow_path+0x4c>
 8014a56:	e08e      	b.n	8014b76 <follow_path+0x16a>
		if (c >= 0x80) {				/* Is SBC extended character? */
 8014a58:	b263      	sxtb	r3, r4
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	da03      	bge.n	8014a66 <follow_path+0x5a>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8014a5e:	237f      	movs	r3, #127	@ 0x7f
 8014a60:	4a49      	ldr	r2, [pc, #292]	@ (8014b88 <follow_path+0x17c>)
 8014a62:	4023      	ands	r3, r4
 8014a64:	5cd4      	ldrb	r4, [r2, r3]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014a66:	0021      	movs	r1, r4
 8014a68:	4848      	ldr	r0, [pc, #288]	@ (8014b8c <follow_path+0x180>)
 8014a6a:	f005 fd58 	bl	801a51e <strchr>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d000      	beq.n	8014a74 <follow_path+0x68>
 8014a72:	e080      	b.n	8014b76 <follow_path+0x16a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014a74:	0023      	movs	r3, r4
 8014a76:	3b61      	subs	r3, #97	@ 0x61
 8014a78:	2b19      	cmp	r3, #25
 8014a7a:	d801      	bhi.n	8014a80 <follow_path+0x74>
 8014a7c:	3c20      	subs	r4, #32
 8014a7e:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8014a80:	9b02      	ldr	r3, [sp, #8]
 8014a82:	559c      	strb	r4, [r3, r6]
 8014a84:	3601      	adds	r6, #1
 8014a86:	9b01      	ldr	r3, [sp, #4]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	9301      	str	r3, [sp, #4]
 8014a8c:	e01e      	b.n	8014acc <follow_path+0xc0>
			if (ns & NS_LAST) break;		/* If last segment matched, the function completed */
 8014a8e:	2e00      	cmp	r6, #0
 8014a90:	d1d4      	bne.n	8014a3c <follow_path+0x30>
			if (!(dp->obj.attr & AM_DIR)) {
 8014a92:	9b01      	ldr	r3, [sp, #4]
 8014a94:	06db      	lsls	r3, r3, #27
 8014a96:	d56c      	bpl.n	8014b72 <follow_path+0x166>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014a98:	692b      	ldr	r3, [r5, #16]
 8014a9a:	9904      	ldr	r1, [sp, #16]
 8014a9c:	051b      	lsls	r3, r3, #20
 8014a9e:	0d1b      	lsrs	r3, r3, #20
 8014aa0:	3130      	adds	r1, #48	@ 0x30
 8014aa2:	18c9      	adds	r1, r1, r3
 8014aa4:	9b04      	ldr	r3, [sp, #16]
 8014aa6:	7818      	ldrb	r0, [r3, #0]
 8014aa8:	f7ff fdf3 	bl	8014692 <ld_clust.isra.0>
 8014aac:	60a8      	str	r0, [r5, #8]
	p = *path; sfn = dp->fn;
 8014aae:	002b      	movs	r3, r5
 8014ab0:	3320      	adds	r3, #32
	memset(sfn, ' ', 11);
 8014ab2:	0018      	movs	r0, r3
 8014ab4:	220b      	movs	r2, #11
 8014ab6:	2120      	movs	r1, #32
	p = *path; sfn = dp->fn;
 8014ab8:	9302      	str	r3, [sp, #8]
	memset(sfn, ' ', 11);
 8014aba:	f005 fd1b 	bl	801a4f4 <memset>
	si = i = 0; ni = 8;
 8014abe:	2308      	movs	r3, #8
 8014ac0:	2600      	movs	r6, #0
 8014ac2:	9303      	str	r3, [sp, #12]
		c = (BYTE)p[si++];				/* Get a byte */
 8014ac4:	3b07      	subs	r3, #7
 8014ac6:	1bdb      	subs	r3, r3, r7
	memset(sfn, ' ', 11);
 8014ac8:	9701      	str	r7, [sp, #4]
		c = (BYTE)p[si++];				/* Get a byte */
 8014aca:	9305      	str	r3, [sp, #20]
 8014acc:	9a01      	ldr	r2, [sp, #4]
 8014ace:	9b05      	ldr	r3, [sp, #20]
 8014ad0:	7814      	ldrb	r4, [r2, #0]
 8014ad2:	189b      	adds	r3, r3, r2
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014ad4:	2c20      	cmp	r4, #32
 8014ad6:	d908      	bls.n	8014aea <follow_path+0xde>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8014ad8:	2c2f      	cmp	r4, #47	@ 0x2f
 8014ada:	d001      	beq.n	8014ae0 <follow_path+0xd4>
 8014adc:	2c5c      	cmp	r4, #92	@ 0x5c
 8014ade:	d1b4      	bne.n	8014a4a <follow_path+0x3e>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separators */
 8014ae0:	5cfa      	ldrb	r2, [r7, r3]
 8014ae2:	2a2f      	cmp	r2, #47	@ 0x2f
 8014ae4:	d0af      	beq.n	8014a46 <follow_path+0x3a>
 8014ae6:	2a5c      	cmp	r2, #92	@ 0x5c
 8014ae8:	d0ad      	beq.n	8014a46 <follow_path+0x3a>
	*path = &p[si];						/* Return pointer to the next segment */
 8014aea:	18ff      	adds	r7, r7, r3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014aec:	2e00      	cmp	r6, #0
 8014aee:	d042      	beq.n	8014b76 <follow_path+0x16a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014af0:	1c6b      	adds	r3, r5, #1
 8014af2:	7fda      	ldrb	r2, [r3, #31]
 8014af4:	2ae5      	cmp	r2, #229	@ 0xe5
 8014af6:	d101      	bne.n	8014afc <follow_path+0xf0>
 8014af8:	3ae0      	subs	r2, #224	@ 0xe0
 8014afa:	77da      	strb	r2, [r3, #31]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8014afc:	2604      	movs	r6, #4
 8014afe:	2c20      	cmp	r4, #32
 8014b00:	d905      	bls.n	8014b0e <follow_path+0x102>
 8014b02:	2600      	movs	r6, #0
 8014b04:	2220      	movs	r2, #32
 8014b06:	783b      	ldrb	r3, [r7, #0]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	4176      	adcs	r6, r6
 8014b0c:	00b6      	lsls	r6, r6, #2
 8014b0e:	002b      	movs	r3, r5
 8014b10:	332b      	adds	r3, #43	@ 0x2b
 8014b12:	701e      	strb	r6, [r3, #0]
	FATFS *fs = dp->obj.fs;
 8014b14:	682b      	ldr	r3, [r5, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014b16:	0028      	movs	r0, r5
	FATFS *fs = dp->obj.fs;
 8014b18:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014b1a:	f7ff fe2d 	bl	8014778 <dir_sdi.constprop.0>
 8014b1e:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 8014b20:	d120      	bne.n	8014b64 <follow_path+0x158>
		res = move_window(fs, dp->sect);
 8014b22:	69a9      	ldr	r1, [r5, #24]
 8014b24:	9803      	ldr	r0, [sp, #12]
 8014b26:	f7ff fa8e 	bl	8014046 <move_window>
 8014b2a:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
 8014b2c:	d11a      	bne.n	8014b64 <follow_path+0x158>
		et = dp->dir[DIR_Name];		/* Entry type */
 8014b2e:	69e8      	ldr	r0, [r5, #28]
		if (et == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8014b30:	7803      	ldrb	r3, [r0, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d019      	beq.n	8014b6a <follow_path+0x15e>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014b36:	7ac3      	ldrb	r3, [r0, #11]
 8014b38:	3408      	adds	r4, #8
 8014b3a:	9301      	str	r3, [sp, #4]
 8014b3c:	233f      	movs	r3, #63	@ 0x3f
 8014b3e:	9a01      	ldr	r2, [sp, #4]
 8014b40:	4013      	ands	r3, r2
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014b42:	2208      	movs	r2, #8
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014b44:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014b46:	7ac3      	ldrb	r3, [r0, #11]
 8014b48:	401c      	ands	r4, r3
 8014b4a:	4213      	tst	r3, r2
 8014b4c:	d105      	bne.n	8014b5a <follow_path+0x14e>
 8014b4e:	9902      	ldr	r1, [sp, #8]
 8014b50:	3203      	adds	r2, #3
 8014b52:	f005 fcc1 	bl	801a4d8 <memcmp>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	d099      	beq.n	8014a8e <follow_path+0x82>
		res = dir_next(dp, 0);	/* Next entry */
 8014b5a:	2100      	movs	r1, #0
 8014b5c:	0028      	movs	r0, r5
 8014b5e:	f7ff fefe 	bl	801495e <dir_next>
 8014b62:	e7dc      	b.n	8014b1e <follow_path+0x112>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014b64:	2c04      	cmp	r4, #4
 8014b66:	d000      	beq.n	8014b6a <follow_path+0x15e>
 8014b68:	e768      	b.n	8014a3c <follow_path+0x30>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014b6a:	2404      	movs	r4, #4
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014b6c:	2e00      	cmp	r6, #0
 8014b6e:	d000      	beq.n	8014b72 <follow_path+0x166>
 8014b70:	e764      	b.n	8014a3c <follow_path+0x30>
 8014b72:	2405      	movs	r4, #5
 8014b74:	e762      	b.n	8014a3c <follow_path+0x30>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014b76:	2406      	movs	r4, #6
	return res;
 8014b78:	e760      	b.n	8014a3c <follow_path+0x30>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8014b7a:	2b0b      	cmp	r3, #11
 8014b7c:	d0fb      	beq.n	8014b76 <follow_path+0x16a>
			i = 8; ni = 11;				/* Enter file extension field */
 8014b7e:	230b      	movs	r3, #11
 8014b80:	2608      	movs	r6, #8
 8014b82:	9303      	str	r3, [sp, #12]
 8014b84:	e77f      	b.n	8014a86 <follow_path+0x7a>
 8014b86:	46c0      	nop			@ (mov r8, r8)
 8014b88:	080204f6 	.word	0x080204f6
 8014b8c:	0801ffcf 	.word	0x0801ffcf

08014b90 <dir_read>:
{
 8014b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 8014b92:	6803      	ldr	r3, [r0, #0]
{
 8014b94:	0004      	movs	r4, r0
 8014b96:	000d      	movs	r5, r1
	FRESULT res = FR_NO_FILE;
 8014b98:	2004      	movs	r0, #4
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014b9a:	263f      	movs	r6, #63	@ 0x3f
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014b9c:	2720      	movs	r7, #32
	FATFS *fs = dp->obj.fs;
 8014b9e:	9301      	str	r3, [sp, #4]
	while (dp->sect) {
 8014ba0:	69a1      	ldr	r1, [r4, #24]
 8014ba2:	2900      	cmp	r1, #0
 8014ba4:	d103      	bne.n	8014bae <dir_read+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d122      	bne.n	8014bf0 <dir_read+0x60>
 8014baa:	2000      	movs	r0, #0
}
 8014bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		res = move_window(fs, dp->sect);
 8014bae:	9801      	ldr	r0, [sp, #4]
 8014bb0:	f7ff fa49 	bl	8014046 <move_window>
		if (res != FR_OK) break;
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	d118      	bne.n	8014bea <dir_read+0x5a>
		et = dp->dir[DIR_Name];	/* Test for the entry type */
 8014bb8:	69e3      	ldr	r3, [r4, #28]
 8014bba:	781a      	ldrb	r2, [r3, #0]
		if (et == 0) {
 8014bbc:	2a00      	cmp	r2, #0
 8014bbe:	d017      	beq.n	8014bf0 <dir_read+0x60>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014bc0:	7adb      	ldrb	r3, [r3, #11]
 8014bc2:	4033      	ands	r3, r6
 8014bc4:	71a3      	strb	r3, [r4, #6]
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014bc6:	2ae5      	cmp	r2, #229	@ 0xe5
 8014bc8:	d009      	beq.n	8014bde <dir_read+0x4e>
 8014bca:	2a2e      	cmp	r2, #46	@ 0x2e
 8014bcc:	d007      	beq.n	8014bde <dir_read+0x4e>
 8014bce:	2b0f      	cmp	r3, #15
 8014bd0:	d005      	beq.n	8014bde <dir_read+0x4e>
 8014bd2:	43bb      	bics	r3, r7
 8014bd4:	3b08      	subs	r3, #8
 8014bd6:	425a      	negs	r2, r3
 8014bd8:	4153      	adcs	r3, r2
 8014bda:	42ab      	cmp	r3, r5
 8014bdc:	d0e5      	beq.n	8014baa <dir_read+0x1a>
		res = dir_next(dp, 0);		/* Next entry */
 8014bde:	2100      	movs	r1, #0
 8014be0:	0020      	movs	r0, r4
 8014be2:	f7ff febc 	bl	801495e <dir_next>
		if (res != FR_OK) break;
 8014be6:	2800      	cmp	r0, #0
 8014be8:	d0da      	beq.n	8014ba0 <dir_read+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014bea:	2300      	movs	r3, #0
 8014bec:	61a3      	str	r3, [r4, #24]
	return res;
 8014bee:	e7dd      	b.n	8014bac <dir_read+0x1c>
 8014bf0:	2004      	movs	r0, #4
 8014bf2:	e7fa      	b.n	8014bea <dir_read+0x5a>

08014bf4 <dir_alloc.constprop.0>:
static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
 8014bf4:	b570      	push	{r4, r5, r6, lr}
 8014bf6:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 8014bf8:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);
 8014bfa:	f7ff fdbd 	bl	8014778 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8014bfe:	2800      	cmp	r0, #0
 8014c00:	d110      	bne.n	8014c24 <dir_alloc.constprop.0+0x30>
			res = move_window(fs, dp->sect);
 8014c02:	0028      	movs	r0, r5
 8014c04:	69a1      	ldr	r1, [r4, #24]
 8014c06:	f7ff fa1e 	bl	8014046 <move_window>
			if (res != FR_OK) break;
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d10a      	bne.n	8014c24 <dir_alloc.constprop.0+0x30>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8014c0e:	69e3      	ldr	r3, [r4, #28]
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	2be5      	cmp	r3, #229	@ 0xe5
 8014c14:	d009      	beq.n	8014c2a <dir_alloc.constprop.0+0x36>
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d007      	beq.n	8014c2a <dir_alloc.constprop.0+0x36>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8014c1a:	2101      	movs	r1, #1
 8014c1c:	0020      	movs	r0, r4
 8014c1e:	f7ff fe9e 	bl	801495e <dir_next>
		} while (res == FR_OK);
 8014c22:	e7ec      	b.n	8014bfe <dir_alloc.constprop.0+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014c24:	2804      	cmp	r0, #4
 8014c26:	d100      	bne.n	8014c2a <dir_alloc.constprop.0+0x36>
 8014c28:	3003      	adds	r0, #3
}
 8014c2a:	bd70      	pop	{r4, r5, r6, pc}

08014c2c <dir_register>:
{
 8014c2c:	b570      	push	{r4, r5, r6, lr}
 8014c2e:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 8014c30:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8014c32:	f7ff ffdf 	bl	8014bf4 <dir_alloc.constprop.0>
 8014c36:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8014c38:	d112      	bne.n	8014c60 <dir_register+0x34>
		res = move_window(fs, dp->sect);
 8014c3a:	0030      	movs	r0, r6
 8014c3c:	69a1      	ldr	r1, [r4, #24]
 8014c3e:	f7ff fa02 	bl	8014046 <move_window>
 8014c42:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {
 8014c44:	d10c      	bne.n	8014c60 <dir_register+0x34>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014c46:	2220      	movs	r2, #32
 8014c48:	0029      	movs	r1, r5
 8014c4a:	69e0      	ldr	r0, [r4, #28]
 8014c4c:	f005 fc52 	bl	801a4f4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014c50:	0021      	movs	r1, r4
 8014c52:	220b      	movs	r2, #11
 8014c54:	69e0      	ldr	r0, [r4, #28]
 8014c56:	3120      	adds	r1, #32
 8014c58:	f005 fd16 	bl	801a688 <memcpy>
			fs->wflag = 1;
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	7133      	strb	r3, [r6, #4]
}
 8014c60:	0028      	movs	r0, r5
 8014c62:	bd70      	pop	{r4, r5, r6, pc}

08014c64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8014c64:	b530      	push	{r4, r5, lr}
 8014c66:	b085      	sub	sp, #20
 8014c68:	9001      	str	r0, [sp, #4]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8014c6a:	a803      	add	r0, sp, #12
{
 8014c6c:	0014      	movs	r4, r2
 8014c6e:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8014c70:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8014c72:	f7ff f986 	bl	8013f82 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8014c76:	2800      	cmp	r0, #0
 8014c78:	db19      	blt.n	8014cae <f_mount+0x4a>

	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8014c7a:	490e      	ldr	r1, [pc, #56]	@ (8014cb4 <f_mount+0x50>)
 8014c7c:	0082      	lsls	r2, r0, #2
 8014c7e:	5853      	ldr	r3, [r2, r1]
	if (cfs) {					/* Unregister current filesystem object */
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d002      	beq.n	8014c8a <f_mount+0x26>
		FatFs[vol] = 0;
 8014c84:	2500      	movs	r5, #0
 8014c86:	5055      	str	r5, [r2, r1]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8014c88:	701d      	strb	r5, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8014c8a:	9b01      	ldr	r3, [sp, #4]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d003      	beq.n	8014c98 <f_mount+0x34>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8014c90:	7058      	strb	r0, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8014c92:	2000      	movs	r0, #0
		FatFs[vol] = fs;		/* Register it */
 8014c94:	508b      	str	r3, [r1, r2]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8014c96:	7018      	strb	r0, [r3, #0]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8014c98:	2c00      	cmp	r4, #0
 8014c9a:	d005      	beq.n	8014ca8 <f_mount+0x44>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume in this function */
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	4668      	mov	r0, sp
 8014ca0:	a901      	add	r1, sp, #4
 8014ca2:	f7ff fb73 	bl	801438c <mount_volume>
 8014ca6:	0004      	movs	r4, r0
	LEAVE_FF(fs, res);
}
 8014ca8:	0020      	movs	r0, r4
 8014caa:	b005      	add	sp, #20
 8014cac:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8014cae:	240b      	movs	r4, #11
 8014cb0:	e7fa      	b.n	8014ca8 <f_mount+0x44>
 8014cb2:	46c0      	nop			@ (mov r8, r8)
 8014cb4:	200030dc 	.word	0x200030dc

08014cb8 <f_open>:
	DIR dj;
	FATFS *fs;
	DEF_NAMEBUFF


	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8014cb8:	2309      	movs	r3, #9
{
 8014cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cbc:	b091      	sub	sp, #68	@ 0x44
 8014cbe:	0004      	movs	r4, r0
 8014cc0:	0015      	movs	r5, r2
 8014cc2:	9103      	str	r1, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8014cc4:	9302      	str	r3, [sp, #8]
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d100      	bne.n	8014ccc <f_open+0x14>
 8014cca:	e0c0      	b.n	8014e4e <f_open+0x196>

	/* Get logical drive number and mount the volume if needed */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8014ccc:	3336      	adds	r3, #54	@ 0x36
 8014cce:	4013      	ands	r3, r2
	res = mount_volume(&path, &fs, mode);
 8014cd0:	001a      	movs	r2, r3
 8014cd2:	a904      	add	r1, sp, #16
 8014cd4:	a803      	add	r0, sp, #12
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8014cd6:	9301      	str	r3, [sp, #4]
	res = mount_volume(&path, &fs, mode);
 8014cd8:	f7ff fb58 	bl	801438c <mount_volume>
 8014cdc:	9002      	str	r0, [sp, #8]

	if (res == FR_OK) {
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	d000      	beq.n	8014ce4 <f_open+0x2c>
 8014ce2:	e0a4      	b.n	8014e2e <f_open+0x176>
		fp->obj.fs = fs;
 8014ce4:	9e04      	ldr	r6, [sp, #16]
		dj.obj.fs = fs;
		INIT_NAMEBUFF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014ce6:	9903      	ldr	r1, [sp, #12]
		fp->obj.fs = fs;
 8014ce8:	6026      	str	r6, [r4, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014cea:	a805      	add	r0, sp, #20
		dj.obj.fs = fs;
 8014cec:	9605      	str	r6, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014cee:	f7ff fe8d 	bl	8014a0c <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d106      	bne.n	8014d04 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014cf6:	2337      	movs	r3, #55	@ 0x37
 8014cf8:	aa02      	add	r2, sp, #8
 8014cfa:	189b      	adds	r3, r3, r2
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d00:	d900      	bls.n	8014d04 <f_open+0x4c>
				res = FR_INVALID_NAME;
 8014d02:	3006      	adds	r0, #6
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014d04:	231c      	movs	r3, #28
 8014d06:	421d      	tst	r5, r3
 8014d08:	d052      	beq.n	8014db0 <f_open+0xf8>
			if (res != FR_OK) {					/* No file, create new */
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d047      	beq.n	8014d9e <f_open+0xe6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014d0e:	2804      	cmp	r0, #4
 8014d10:	d000      	beq.n	8014d14 <f_open+0x5c>
 8014d12:	e08c      	b.n	8014e2e <f_open+0x176>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8014d14:	a805      	add	r0, sp, #20
 8014d16:	f7ff ff89 	bl	8014c2c <dir_register>
					res = FR_EXIST;				/* Cannot create as new file */
				} else {
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014d1a:	2800      	cmp	r0, #0
 8014d1c:	d000      	beq.n	8014d20 <f_open+0x68>
 8014d1e:	e086      	b.n	8014e2e <f_open+0x176>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014d20:	2308      	movs	r3, #8
 8014d22:	9a01      	ldr	r2, [sp, #4]
 8014d24:	431a      	orrs	r2, r3
 8014d26:	9201      	str	r2, [sp, #4]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014d28:	9b01      	ldr	r3, [sp, #4]
 8014d2a:	071b      	lsls	r3, r3, #28
 8014d2c:	d54a      	bpl.n	8014dc4 <f_open+0x10c>
				DWORD tm = GET_FATTIME();
 8014d2e:	f7ff f905 	bl	8013f3c <get_fattime>
 8014d32:	0005      	movs	r5, r0
				} else
#endif
				{
					DWORD cl;
					/* Set FAT directory entry initial state */
					st_32(dj.dir + DIR_CrtTime, tm);	/* Set created time */
 8014d34:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8014d36:	0029      	movs	r1, r5
 8014d38:	300e      	adds	r0, #14
 8014d3a:	f7ff f90e 	bl	8013f5a <st_32>
					st_32(dj.dir + DIR_ModTime, tm);	/* Set modified time (tmp setting) */
 8014d3e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8014d40:	0029      	movs	r1, r5
 8014d42:	3016      	adds	r0, #22
 8014d44:	f7ff f909 	bl	8013f5a <st_32>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8014d48:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8014d4a:	7830      	ldrb	r0, [r6, #0]
 8014d4c:	0029      	movs	r1, r5
 8014d4e:	f7ff fca0 	bl	8014692 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014d52:	2320      	movs	r3, #32
 8014d54:	72eb      	strb	r3, [r5, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014d56:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8014d58:	0007      	movs	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014d5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014d5c:	0030      	movs	r0, r6
 8014d5e:	f7ff f966 	bl	801402e <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 8014d62:	2200      	movs	r2, #0
					st_32(dj.dir + DIR_FileSize, 0);
 8014d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8014d66:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8014d68:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8014d6a:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8014d6c:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8014d6e:	2301      	movs	r3, #1
 8014d70:	7133      	strb	r3, [r6, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8014d72:	4297      	cmp	r7, r2
 8014d74:	d00e      	beq.n	8014d94 <f_open+0xdc>
						LBA_t sc = fs->winsect;

						res = remove_chain(&dj.obj, cl, 0);
 8014d76:	0039      	movs	r1, r7
 8014d78:	a805      	add	r0, sp, #20
						LBA_t sc = fs->winsect;
 8014d7a:	69f5      	ldr	r5, [r6, #28]
						res = remove_chain(&dj.obj, cl, 0);
 8014d7c:	f7ff fd3a 	bl	80147f4 <remove_chain>
						if (res == FR_OK) {
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d154      	bne.n	8014e2e <f_open+0x176>
							res = move_window(fs, sc);
 8014d84:	0029      	movs	r1, r5
 8014d86:	0030      	movs	r0, r6
 8014d88:	f7ff f95d 	bl	8014046 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014d8c:	3f01      	subs	r7, #1
 8014d8e:	60f7      	str	r7, [r6, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8014d90:	2800      	cmp	r0, #0
 8014d92:	d14c      	bne.n	8014e2e <f_open+0x176>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8014d94:	2340      	movs	r3, #64	@ 0x40
 8014d96:	9a01      	ldr	r2, [sp, #4]
 8014d98:	431a      	orrs	r2, r3
 8014d9a:	9201      	str	r2, [sp, #4]
 8014d9c:	e012      	b.n	8014dc4 <f_open+0x10c>
				if (mode & FA_CREATE_NEW) {
 8014d9e:	076d      	lsls	r5, r5, #29
 8014da0:	d45c      	bmi.n	8014e5c <f_open+0x1a4>
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
 8014da2:	ab02      	add	r3, sp, #8
 8014da4:	7c9a      	ldrb	r2, [r3, #18]
 8014da6:	2311      	movs	r3, #17
 8014da8:	421a      	tst	r2, r3
 8014daa:	d0bd      	beq.n	8014d28 <f_open+0x70>
						res = FR_DENIED;
 8014dac:	2007      	movs	r0, #7
 8014dae:	e03e      	b.n	8014e2e <f_open+0x176>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8014db0:	2800      	cmp	r0, #0
 8014db2:	d13c      	bne.n	8014e2e <f_open+0x176>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8014db4:	ab02      	add	r3, sp, #8
 8014db6:	7c9b      	ldrb	r3, [r3, #18]
 8014db8:	06da      	lsls	r2, r3, #27
 8014dba:	d451      	bmi.n	8014e60 <f_open+0x1a8>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8014dbc:	07ad      	lsls	r5, r5, #30
 8014dbe:	d501      	bpl.n	8014dc4 <f_open+0x10c>
 8014dc0:	07db      	lsls	r3, r3, #31
 8014dc2:	d4f3      	bmi.n	8014dac <f_open+0xf4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014dc4:	69f3      	ldr	r3, [r6, #28]
			fp->dir_ptr = dj.dir;
 8014dc6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014dc8:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 8014dca:	6265      	str	r5, [r4, #36]	@ 0x24
			if (fs->fs_type == FS_EXFAT) {
				init_alloc_info(&fp->obj, &dj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014dcc:	7830      	ldrb	r0, [r6, #0]
 8014dce:	0029      	movs	r1, r5
 8014dd0:	f7ff fc5f 	bl	8014692 <ld_clust.isra.0>
 8014dd4:	60a0      	str	r0, [r4, #8]
 8014dd6:	0007      	movs	r7, r0
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8014dd8:	0028      	movs	r0, r5
 8014dda:	301c      	adds	r0, #28
 8014ddc:	f7ff f8b2 	bl	8013f44 <ld_32>
 8014de0:	60e0      	str	r0, [r4, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 8014de2:	88f3      	ldrh	r3, [r6, #6]
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8014de4:	0005      	movs	r5, r0
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 8014de6:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;	/* Set file access mode */
 8014de8:	9b01      	ldr	r3, [sp, #4]
 8014dea:	7423      	strb	r3, [r4, #16]
			fp->err = 0;		/* Clear error flag */
 8014dec:	2300      	movs	r3, #0
 8014dee:	7463      	strb	r3, [r4, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8014df0:	61e3      	str	r3, [r4, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8014df2:	6163      	str	r3, [r4, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014df4:	9b01      	ldr	r3, [sp, #4]
 8014df6:	069b      	lsls	r3, r3, #26
 8014df8:	d529      	bpl.n	8014e4e <f_open+0x196>
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	d027      	beq.n	8014e4e <f_open+0x196>
				DWORD bcs, clst;
				FSIZE_t ofs;

				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014dfe:	6160      	str	r0, [r4, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014e00:	8973      	ldrh	r3, [r6, #10]
 8014e02:	031b      	lsls	r3, r3, #12
 8014e04:	9301      	str	r3, [sp, #4]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e06:	4298      	cmp	r0, r3
 8014e08:	d915      	bls.n	8014e36 <f_open+0x17e>
					clst = get_fat(&fp->obj, clst);
 8014e0a:	0039      	movs	r1, r7
 8014e0c:	6820      	ldr	r0, [r4, #0]
 8014e0e:	f7ff fc4f 	bl	80146b0 <get_fat.isra.0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e12:	9b01      	ldr	r3, [sp, #4]
					clst = get_fat(&fp->obj, clst);
 8014e14:	0007      	movs	r7, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e16:	1aed      	subs	r5, r5, r3
					if (clst <= 1) res = FR_INT_ERR;
 8014e18:	2801      	cmp	r0, #1
 8014e1a:	d91b      	bls.n	8014e54 <f_open+0x19c>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e1c:	1c43      	adds	r3, r0, #1
 8014e1e:	d01b      	beq.n	8014e58 <f_open+0x1a0>
 8014e20:	9b01      	ldr	r3, [sp, #4]
 8014e22:	42ab      	cmp	r3, r5
 8014e24:	d3f1      	bcc.n	8014e0a <f_open+0x152>
 8014e26:	2000      	movs	r0, #0
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8014e28:	61a7      	str	r7, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d004      	beq.n	8014e38 <f_open+0x180>
		}

		FREE_NAMEBUFF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e2e:	2300      	movs	r3, #0
 8014e30:	9002      	str	r0, [sp, #8]
 8014e32:	6023      	str	r3, [r4, #0]
 8014e34:	e00b      	b.n	8014e4e <f_open+0x196>
				fp->clust = clst;
 8014e36:	61a7      	str	r7, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e38:	052b      	lsls	r3, r5, #20
 8014e3a:	d008      	beq.n	8014e4e <f_open+0x196>
					LBA_t sec = clst2sect(fs, clst);
 8014e3c:	0039      	movs	r1, r7
 8014e3e:	0030      	movs	r0, r6
 8014e40:	f7ff f893 	bl	8013f6a <clst2sect>
					if (sec == 0) {
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d00d      	beq.n	8014e64 <f_open+0x1ac>
						fp->sect = sec + (DWORD)(ofs / SS(fs));
 8014e48:	0b2d      	lsrs	r5, r5, #12
 8014e4a:	1828      	adds	r0, r5, r0
 8014e4c:	61e0      	str	r0, [r4, #28]

	LEAVE_FF(fs, res);
}
 8014e4e:	9802      	ldr	r0, [sp, #8]
 8014e50:	b011      	add	sp, #68	@ 0x44
 8014e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8014e54:	2002      	movs	r0, #2
 8014e56:	e7e7      	b.n	8014e28 <f_open+0x170>
 8014e58:	2001      	movs	r0, #1
 8014e5a:	e7e5      	b.n	8014e28 <f_open+0x170>
					res = FR_EXIST;				/* Cannot create as new file */
 8014e5c:	2008      	movs	r0, #8
 8014e5e:	e7e6      	b.n	8014e2e <f_open+0x176>
					res = FR_NO_FILE;
 8014e60:	2004      	movs	r0, #4
 8014e62:	e7e4      	b.n	8014e2e <f_open+0x176>
						res = FR_INT_ERR;
 8014e64:	2002      	movs	r0, #2
 8014e66:	e7e2      	b.n	8014e2e <f_open+0x176>

08014e68 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8014e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e6a:	b089      	sub	sp, #36	@ 0x24
 8014e6c:	9305      	str	r3, [sp, #20]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8014e6e:	2300      	movs	r3, #0
{
 8014e70:	0017      	movs	r7, r2
	*bw = 0;	/* Clear write byte counter */
 8014e72:	9a05      	ldr	r2, [sp, #20]
{
 8014e74:	9102      	str	r1, [sp, #8]
	*bw = 0;	/* Clear write byte counter */
 8014e76:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014e78:	a907      	add	r1, sp, #28
{
 8014e7a:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014e7c:	f7ff f897 	bl	8013fae <validate>
 8014e80:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d129      	bne.n	8014eda <f_write+0x72>
 8014e86:	7c63      	ldrb	r3, [r4, #17]
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d125      	bne.n	8014eda <f_write+0x72>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014e8e:	7c23      	ldrb	r3, [r4, #16]
 8014e90:	079b      	lsls	r3, r3, #30
 8014e92:	d400      	bmi.n	8014e96 <f_write+0x2e>
 8014e94:	e0a8      	b.n	8014fe8 <f_write+0x180>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014e96:	6963      	ldr	r3, [r4, #20]
 8014e98:	19da      	adds	r2, r3, r7
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d900      	bls.n	8014ea0 <f_write+0x38>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014e9e:	43df      	mvns	r7, r3
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8014ea0:	2f00      	cmp	r7, #0
 8014ea2:	d016      	beq.n	8014ed2 <f_write+0x6a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014ea4:	6962      	ldr	r2, [r4, #20]
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014ea6:	9e07      	ldr	r6, [sp, #28]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014ea8:	0513      	lsls	r3, r2, #20
 8014eaa:	d000      	beq.n	8014eae <f_write+0x46>
 8014eac:	e080      	b.n	8014fb0 <f_write+0x148>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014eae:	0b11      	lsrs	r1, r2, #12
 8014eb0:	0008      	movs	r0, r1
 8014eb2:	8973      	ldrh	r3, [r6, #10]
 8014eb4:	3b01      	subs	r3, #1
 8014eb6:	4018      	ands	r0, r3
 8014eb8:	9004      	str	r0, [sp, #16]
			if (csect == 0) {				/* On the cluster boundary? */
 8014eba:	4219      	tst	r1, r3
 8014ebc:	d121      	bne.n	8014f02 <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014ebe:	2a00      	cmp	r2, #0
 8014ec0:	d10e      	bne.n	8014ee0 <f_write+0x78>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014ec2:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8014ec4:	2900      	cmp	r1, #0
 8014ec6:	d10d      	bne.n	8014ee4 <f_write+0x7c>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014ec8:	0020      	movs	r0, r4
 8014eca:	f7ff fccc 	bl	8014866 <create_chain>
 8014ece:	1e01      	subs	r1, r0, #0
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014ed0:	d108      	bne.n	8014ee4 <f_write+0x7c>
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014ed2:	2340      	movs	r3, #64	@ 0x40
 8014ed4:	7c22      	ldrb	r2, [r4, #16]
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
}
 8014eda:	9801      	ldr	r0, [sp, #4]
 8014edc:	b009      	add	sp, #36	@ 0x24
 8014ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014ee0:	69a1      	ldr	r1, [r4, #24]
 8014ee2:	e7f1      	b.n	8014ec8 <f_write+0x60>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014ee4:	2901      	cmp	r1, #1
 8014ee6:	d103      	bne.n	8014ef0 <f_write+0x88>
 8014ee8:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014eea:	7463      	strb	r3, [r4, #17]
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014eec:	9301      	str	r3, [sp, #4]
 8014eee:	e7f4      	b.n	8014eda <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014ef0:	1c4b      	adds	r3, r1, #1
 8014ef2:	d101      	bne.n	8014ef8 <f_write+0x90>
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e7f8      	b.n	8014eea <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014ef8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8014efa:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d100      	bne.n	8014f02 <f_write+0x9a>
 8014f00:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8014f02:	69f2      	ldr	r2, [r6, #28]
 8014f04:	69e3      	ldr	r3, [r4, #28]
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d104      	bne.n	8014f14 <f_write+0xac>
 8014f0a:	0030      	movs	r0, r6
 8014f0c:	f7ff f86d 	bl	8013fea <sync_window>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d1ef      	bne.n	8014ef4 <f_write+0x8c>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8014f14:	0030      	movs	r0, r6
 8014f16:	69a1      	ldr	r1, [r4, #24]
 8014f18:	f7ff f827 	bl	8013f6a <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d0e3      	beq.n	8014ee8 <f_write+0x80>
			sect += csect;
 8014f20:	9b04      	ldr	r3, [sp, #16]
 8014f22:	181b      	adds	r3, r3, r0
 8014f24:	9303      	str	r3, [sp, #12]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8014f26:	2380      	movs	r3, #128	@ 0x80
 8014f28:	015b      	lsls	r3, r3, #5
 8014f2a:	429f      	cmp	r7, r3
 8014f2c:	d333      	bcc.n	8014f96 <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f2e:	9a04      	ldr	r2, [sp, #16]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014f30:	0b3d      	lsrs	r5, r7, #12
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f32:	8973      	ldrh	r3, [r6, #10]
 8014f34:	1952      	adds	r2, r2, r5
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d901      	bls.n	8014f3e <f_write+0xd6>
					cc = fs->csize - csect;
 8014f3a:	9a04      	ldr	r2, [sp, #16]
 8014f3c:	1a9d      	subs	r5, r3, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f3e:	002b      	movs	r3, r5
 8014f40:	7870      	ldrb	r0, [r6, #1]
 8014f42:	9a03      	ldr	r2, [sp, #12]
 8014f44:	9902      	ldr	r1, [sp, #8]
 8014f46:	f7fe ffc0 	bl	8013eca <disk_write>
 8014f4a:	9004      	str	r0, [sp, #16]
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d1d1      	bne.n	8014ef4 <f_write+0x8c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8014f50:	69f1      	ldr	r1, [r6, #28]
 8014f52:	9b03      	ldr	r3, [sp, #12]
 8014f54:	1ac9      	subs	r1, r1, r3
 8014f56:	42a9      	cmp	r1, r5
 8014f58:	d20a      	bcs.n	8014f70 <f_write+0x108>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 8014f5a:	0030      	movs	r0, r6
 8014f5c:	2280      	movs	r2, #128	@ 0x80
 8014f5e:	9b02      	ldr	r3, [sp, #8]
 8014f60:	0309      	lsls	r1, r1, #12
 8014f62:	1859      	adds	r1, r3, r1
 8014f64:	3030      	adds	r0, #48	@ 0x30
 8014f66:	0152      	lsls	r2, r2, #5
 8014f68:	f005 fb8e 	bl	801a688 <memcpy>
					fs->wflag = 0;
 8014f6c:	9b04      	ldr	r3, [sp, #16]
 8014f6e:	7133      	strb	r3, [r6, #4]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014f70:	032d      	lsls	r5, r5, #12
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8014f72:	9b05      	ldr	r3, [sp, #20]
 8014f74:	9a05      	ldr	r2, [sp, #20]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	1b7f      	subs	r7, r7, r5
 8014f7a:	195b      	adds	r3, r3, r5
 8014f7c:	6013      	str	r3, [r2, #0]
 8014f7e:	9b02      	ldr	r3, [sp, #8]
 8014f80:	195b      	adds	r3, r3, r5
 8014f82:	9302      	str	r3, [sp, #8]
 8014f84:	6963      	ldr	r3, [r4, #20]
 8014f86:	18ed      	adds	r5, r5, r3
 8014f88:	68e3      	ldr	r3, [r4, #12]
 8014f8a:	6165      	str	r5, [r4, #20]
 8014f8c:	42ab      	cmp	r3, r5
 8014f8e:	d200      	bcs.n	8014f92 <f_write+0x12a>
 8014f90:	002b      	movs	r3, r5
 8014f92:	60e3      	str	r3, [r4, #12]
 8014f94:	e784      	b.n	8014ea0 <f_write+0x38>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 8014f96:	6962      	ldr	r2, [r4, #20]
 8014f98:	68e3      	ldr	r3, [r4, #12]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d306      	bcc.n	8014fac <f_write+0x144>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 8014f9e:	0030      	movs	r0, r6
 8014fa0:	f7ff f823 	bl	8013fea <sync_window>
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	d1a5      	bne.n	8014ef4 <f_write+0x8c>
				fs->winsect = sect;
 8014fa8:	9b03      	ldr	r3, [sp, #12]
 8014faa:	61f3      	str	r3, [r6, #28]
			fp->sect = sect;
 8014fac:	9b03      	ldr	r3, [sp, #12]
 8014fae:	61e3      	str	r3, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8014fb0:	2380      	movs	r3, #128	@ 0x80
 8014fb2:	6965      	ldr	r5, [r4, #20]
 8014fb4:	015b      	lsls	r3, r3, #5
 8014fb6:	052d      	lsls	r5, r5, #20
 8014fb8:	0d2d      	lsrs	r5, r5, #20
 8014fba:	1b5d      	subs	r5, r3, r5
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014fbc:	42bd      	cmp	r5, r7
 8014fbe:	d900      	bls.n	8014fc2 <f_write+0x15a>
 8014fc0:	003d      	movs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8014fc2:	0030      	movs	r0, r6
 8014fc4:	69e1      	ldr	r1, [r4, #28]
 8014fc6:	f7ff f83e 	bl	8014046 <move_window>
 8014fca:	2800      	cmp	r0, #0
 8014fcc:	d192      	bne.n	8014ef4 <f_write+0x8c>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014fce:	0030      	movs	r0, r6
 8014fd0:	6963      	ldr	r3, [r4, #20]
 8014fd2:	3030      	adds	r0, #48	@ 0x30
 8014fd4:	051b      	lsls	r3, r3, #20
 8014fd6:	0d1b      	lsrs	r3, r3, #20
 8014fd8:	18c0      	adds	r0, r0, r3
 8014fda:	002a      	movs	r2, r5
 8014fdc:	9902      	ldr	r1, [sp, #8]
 8014fde:	f005 fb53 	bl	801a688 <memcpy>
		fs->wflag = 1;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	7133      	strb	r3, [r6, #4]
 8014fe6:	e7c4      	b.n	8014f72 <f_write+0x10a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014fe8:	2307      	movs	r3, #7
 8014fea:	e77f      	b.n	8014eec <f_write+0x84>

08014fec <putc_bfd>:

	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;			/* Write index of pb->buf[] */
 8014fec:	6843      	ldr	r3, [r0, #4]
{
 8014fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ff0:	0004      	movs	r4, r0
	if (i < 0) return;		/* In write error? */
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	db14      	blt.n	8015020 <putc_bfd+0x34>
	}
	pb->buf[i++] = (BYTE)wc;
#endif

#else							/* ANSI/OEM input (without re-encoding) */
	pb->buf[i++] = (BYTE)c;
 8014ff6:	1c5d      	adds	r5, r3, #1
 8014ff8:	18c3      	adds	r3, r0, r3
	nc = pb->nchr;			/* Write unit counter */
 8014ffa:	6886      	ldr	r6, [r0, #8]
	pb->buf[i++] = (BYTE)c;
 8014ffc:	7319      	strb	r1, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 8014ffe:	2d3b      	cmp	r5, #59	@ 0x3b
 8015000:	dd0b      	ble.n	801501a <putc_bfd+0x2e>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
 8015002:	0001      	movs	r1, r0
 8015004:	002a      	movs	r2, r5
 8015006:	ab01      	add	r3, sp, #4
 8015008:	6800      	ldr	r0, [r0, #0]
 801500a:	310c      	adds	r1, #12
 801500c:	f7ff ff2c 	bl	8014e68 <f_write>
		i = (n == (UINT)i) ? 0 : -1;
 8015010:	9b01      	ldr	r3, [sp, #4]
 8015012:	1b5b      	subs	r3, r3, r5
 8015014:	1e5a      	subs	r2, r3, #1
 8015016:	4193      	sbcs	r3, r2
 8015018:	425d      	negs	r5, r3
	}
	pb->idx = i;
	pb->nchr = nc + 1;
 801501a:	3601      	adds	r6, #1
	pb->idx = i;
 801501c:	6065      	str	r5, [r4, #4]
	pb->nchr = nc + 1;
 801501e:	60a6      	str	r6, [r4, #8]
}
 8015020:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08015022 <putc_flush>:

static int putc_flush (putbuff* pb)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015022:	6842      	ldr	r2, [r0, #4]
{
 8015024:	b513      	push	{r0, r1, r4, lr}
 8015026:	0004      	movs	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015028:	2a00      	cmp	r2, #0
 801502a:	da02      	bge.n	8015032 <putc_flush+0x10>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) {
		return pb->nchr;
	}
	return -1;
 801502c:	2001      	movs	r0, #1
 801502e:	4240      	negs	r0, r0
}
 8015030:	bd16      	pop	{r1, r2, r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8015032:	0001      	movs	r1, r0
 8015034:	ab01      	add	r3, sp, #4
 8015036:	6800      	ldr	r0, [r0, #0]
 8015038:	310c      	adds	r1, #12
 801503a:	f7ff ff15 	bl	8014e68 <f_write>
 801503e:	2800      	cmp	r0, #0
 8015040:	d1f4      	bne.n	801502c <putc_flush+0xa>
		&& (UINT)pb->idx == nw) {
 8015042:	6862      	ldr	r2, [r4, #4]
 8015044:	9b01      	ldr	r3, [sp, #4]
 8015046:	429a      	cmp	r2, r3
 8015048:	d1f0      	bne.n	801502c <putc_flush+0xa>
		return pb->nchr;
 801504a:	68a0      	ldr	r0, [r4, #8]
 801504c:	e7f0      	b.n	8015030 <putc_flush+0xe>

0801504e <f_sync>:
{
 801504e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015050:	b085      	sub	sp, #20
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015052:	a903      	add	r1, sp, #12
{
 8015054:	0005      	movs	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015056:	f7fe ffaa 	bl	8013fae <validate>
 801505a:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 801505c:	d12f      	bne.n	80150be <f_sync+0x70>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801505e:	7c2b      	ldrb	r3, [r5, #16]
 8015060:	2740      	movs	r7, #64	@ 0x40
 8015062:	001c      	movs	r4, r3
 8015064:	403c      	ands	r4, r7
 8015066:	423b      	tst	r3, r7
 8015068:	d029      	beq.n	80150be <f_sync+0x70>
				res = move_window(fs, fp->dir_sect);
 801506a:	9b03      	ldr	r3, [sp, #12]
 801506c:	6a29      	ldr	r1, [r5, #32]
 801506e:	0018      	movs	r0, r3
 8015070:	9301      	str	r3, [sp, #4]
 8015072:	f7fe ffe8 	bl	8014046 <move_window>
 8015076:	1e04      	subs	r4, r0, #0
				if (res == FR_OK) {
 8015078:	d121      	bne.n	80150be <f_sync+0x70>
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 801507a:	2320      	movs	r3, #32
					BYTE *dir = fp->dir_ptr;
 801507c:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 801507e:	7af2      	ldrb	r2, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8015080:	0031      	movs	r1, r6
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8015082:	4313      	orrs	r3, r2
 8015084:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8015086:	68aa      	ldr	r2, [r5, #8]
 8015088:	6828      	ldr	r0, [r5, #0]
 801508a:	f7fe ffd0 	bl	801402e <st_clust>
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801508e:	0030      	movs	r0, r6
 8015090:	68e9      	ldr	r1, [r5, #12]
 8015092:	301c      	adds	r0, #28
 8015094:	f7fe ff61 	bl	8013f5a <st_32>
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
 8015098:	f7fe ff50 	bl	8013f3c <get_fattime>
 801509c:	0001      	movs	r1, r0
 801509e:	0030      	movs	r0, r6
 80150a0:	3016      	adds	r0, #22
 80150a2:	f7fe ff5a 	bl	8013f5a <st_32>
					fs->wflag = 1;
 80150a6:	2301      	movs	r3, #1
 80150a8:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80150aa:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 80150ac:	74f4      	strb	r4, [r6, #19]
					res = sync_fs(fs);							/* Restore it to the directory */
 80150ae:	0010      	movs	r0, r2
					fs->wflag = 1;
 80150b0:	7113      	strb	r3, [r2, #4]
					res = sync_fs(fs);							/* Restore it to the directory */
 80150b2:	f7ff f90d 	bl	80142d0 <sync_fs>
 80150b6:	0004      	movs	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80150b8:	7c2b      	ldrb	r3, [r5, #16]
 80150ba:	43bb      	bics	r3, r7
 80150bc:	742b      	strb	r3, [r5, #16]
}
 80150be:	0020      	movs	r0, r4
 80150c0:	b005      	add	sp, #20
 80150c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150c4 <f_close>:
{
 80150c4:	b513      	push	{r0, r1, r4, lr}
 80150c6:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80150c8:	f7ff ffc1 	bl	801504e <f_sync>
	if (res == FR_OK)
 80150cc:	2800      	cmp	r0, #0
 80150ce:	d106      	bne.n	80150de <f_close+0x1a>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80150d0:	0020      	movs	r0, r4
 80150d2:	a901      	add	r1, sp, #4
 80150d4:	f7fe ff6b 	bl	8013fae <validate>
		if (res == FR_OK) {
 80150d8:	2800      	cmp	r0, #0
 80150da:	d100      	bne.n	80150de <f_close+0x1a>
			fp->obj.fs = 0;	/* Invalidate file object */
 80150dc:	6020      	str	r0, [r4, #0]
}
 80150de:	bd16      	pop	{r1, r2, r4, pc}

080150e0 <f_lseek>:
{
 80150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150e2:	b087      	sub	sp, #28
 80150e4:	000c      	movs	r4, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80150e6:	a905      	add	r1, sp, #20
{
 80150e8:	0005      	movs	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80150ea:	f7fe ff60 	bl	8013fae <validate>
 80150ee:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) res = (FRESULT)fp->err;
 80150f0:	d158      	bne.n	80151a4 <f_lseek+0xc4>
 80150f2:	7c6e      	ldrb	r6, [r5, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80150f4:	2e00      	cmp	r6, #0
 80150f6:	d155      	bne.n	80151a4 <f_lseek+0xc4>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80150f8:	68eb      	ldr	r3, [r5, #12]
 80150fa:	42a3      	cmp	r3, r4
 80150fc:	d203      	bcs.n	8015106 <f_lseek+0x26>
 80150fe:	7c2a      	ldrb	r2, [r5, #16]
 8015100:	0792      	lsls	r2, r2, #30
 8015102:	d400      	bmi.n	8015106 <f_lseek+0x26>
			ofs = fp->obj.objsize;
 8015104:	001c      	movs	r4, r3
		fp->fptr = nsect = 0;
 8015106:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8015108:	696b      	ldr	r3, [r5, #20]
		fp->fptr = nsect = 0;
 801510a:	616a      	str	r2, [r5, #20]
		if (ofs > 0) {
 801510c:	4294      	cmp	r4, r2
 801510e:	d110      	bne.n	8015132 <f_lseek+0x52>
		fp->fptr = nsect = 0;
 8015110:	2000      	movs	r0, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8015112:	696b      	ldr	r3, [r5, #20]
 8015114:	68ea      	ldr	r2, [r5, #12]
 8015116:	4293      	cmp	r3, r2
 8015118:	d904      	bls.n	8015124 <f_lseek+0x44>
			fp->flag |= FA_MODIFIED;
 801511a:	2240      	movs	r2, #64	@ 0x40
 801511c:	7c29      	ldrb	r1, [r5, #16]
			fp->obj.objsize = fp->fptr;
 801511e:	60eb      	str	r3, [r5, #12]
			fp->flag |= FA_MODIFIED;
 8015120:	430a      	orrs	r2, r1
 8015122:	742a      	strb	r2, [r5, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015124:	051b      	lsls	r3, r3, #20
 8015126:	d03d      	beq.n	80151a4 <f_lseek+0xc4>
 8015128:	69eb      	ldr	r3, [r5, #28]
 801512a:	4283      	cmp	r3, r0
 801512c:	d03a      	beq.n	80151a4 <f_lseek+0xc4>
			fp->sect = nsect;
 801512e:	61e8      	str	r0, [r5, #28]
 8015130:	e038      	b.n	80151a4 <f_lseek+0xc4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015132:	9a05      	ldr	r2, [sp, #20]
 8015134:	9201      	str	r2, [sp, #4]
 8015136:	8957      	ldrh	r7, [r2, #10]
 8015138:	033f      	lsls	r7, r7, #12
			if (ifptr > 0 &&
 801513a:	2b00      	cmp	r3, #0
 801513c:	d016      	beq.n	801516c <f_lseek+0x8c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801513e:	3b01      	subs	r3, #1
 8015140:	0039      	movs	r1, r7
 8015142:	1e60      	subs	r0, r4, #1
 8015144:	9302      	str	r3, [sp, #8]
 8015146:	f7eb f80f 	bl	8000168 <__udivsi3>
 801514a:	0039      	movs	r1, r7
 801514c:	9003      	str	r0, [sp, #12]
 801514e:	9802      	ldr	r0, [sp, #8]
 8015150:	f7eb f80a 	bl	8000168 <__udivsi3>
			if (ifptr > 0 &&
 8015154:	9b03      	ldr	r3, [sp, #12]
 8015156:	4283      	cmp	r3, r0
 8015158:	d308      	bcc.n	801516c <f_lseek+0x8c>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801515a:	9a02      	ldr	r2, [sp, #8]
 801515c:	427b      	negs	r3, r7
 801515e:	401a      	ands	r2, r3
				clst = fp->clust;
 8015160:	69a9      	ldr	r1, [r5, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015162:	616a      	str	r2, [r5, #20]
				ofs -= fp->fptr;
 8015164:	1aa4      	subs	r4, r4, r2
			if (clst != 0) {
 8015166:	2900      	cmp	r1, #0
 8015168:	d0d2      	beq.n	8015110 <f_lseek+0x30>
 801516a:	e003      	b.n	8015174 <f_lseek+0x94>
				clst = fp->obj.sclust;					/* start from the first cluster */
 801516c:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801516e:	2900      	cmp	r1, #0
 8015170:	d010      	beq.n	8015194 <f_lseek+0xb4>
				fp->clust = clst;
 8015172:	61a9      	str	r1, [r5, #24]
					ofs -= bcs; fp->fptr += bcs;
 8015174:	696b      	ldr	r3, [r5, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 8015176:	42bc      	cmp	r4, r7
 8015178:	d81e      	bhi.n	80151b8 <f_lseek+0xd8>
				fp->fptr += ofs;
 801517a:	696b      	ldr	r3, [r5, #20]
 801517c:	191b      	adds	r3, r3, r4
 801517e:	616b      	str	r3, [r5, #20]
				if (ofs % SS(fs)) {
 8015180:	0523      	lsls	r3, r4, #20
 8015182:	d0c5      	beq.n	8015110 <f_lseek+0x30>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8015184:	9801      	ldr	r0, [sp, #4]
 8015186:	f7fe fef0 	bl	8013f6a <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 801518a:	2800      	cmp	r0, #0
 801518c:	d008      	beq.n	80151a0 <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 801518e:	0b24      	lsrs	r4, r4, #12
 8015190:	1820      	adds	r0, r4, r0
 8015192:	e7be      	b.n	8015112 <f_lseek+0x32>
					clst = create_chain(&fp->obj, 0);
 8015194:	0028      	movs	r0, r5
 8015196:	f7ff fb66 	bl	8014866 <create_chain>
 801519a:	0001      	movs	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801519c:	2801      	cmp	r0, #1
 801519e:	d104      	bne.n	80151aa <f_lseek+0xca>
 80151a0:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151a2:	746e      	strb	r6, [r5, #17]
}
 80151a4:	0030      	movs	r0, r6
 80151a6:	b007      	add	sp, #28
 80151a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151aa:	1c43      	adds	r3, r0, #1
 80151ac:	d101      	bne.n	80151b2 <f_lseek+0xd2>
 80151ae:	2601      	movs	r6, #1
 80151b0:	e7f7      	b.n	80151a2 <f_lseek+0xc2>
					fp->obj.sclust = clst;
 80151b2:	60a8      	str	r0, [r5, #8]
				fp->clust = clst;
 80151b4:	61a8      	str	r0, [r5, #24]
 80151b6:	e7d6      	b.n	8015166 <f_lseek+0x86>
					ofs -= bcs; fp->fptr += bcs;
 80151b8:	1be2      	subs	r2, r4, r7
 80151ba:	9202      	str	r2, [sp, #8]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80151bc:	2202      	movs	r2, #2
					ofs -= bcs; fp->fptr += bcs;
 80151be:	19db      	adds	r3, r3, r7
 80151c0:	616b      	str	r3, [r5, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80151c2:	7c2b      	ldrb	r3, [r5, #16]
 80151c4:	4213      	tst	r3, r2
 80151c6:	d006      	beq.n	80151d6 <f_lseek+0xf6>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80151c8:	0028      	movs	r0, r5
 80151ca:	f7ff fb4c 	bl	8014866 <create_chain>
 80151ce:	1e04      	subs	r4, r0, #0
						if (clst == 0) {				/* Clip file size in case of disk full */
 80151d0:	d105      	bne.n	80151de <f_lseek+0xfe>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80151d2:	0001      	movs	r1, r0
 80151d4:	e7d1      	b.n	801517a <f_lseek+0x9a>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80151d6:	6828      	ldr	r0, [r5, #0]
 80151d8:	f7ff fa6a 	bl	80146b0 <get_fat.isra.0>
 80151dc:	0004      	movs	r4, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151de:	1c63      	adds	r3, r4, #1
 80151e0:	d0e5      	beq.n	80151ae <f_lseek+0xce>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80151e2:	2c01      	cmp	r4, #1
 80151e4:	d9dc      	bls.n	80151a0 <f_lseek+0xc0>
 80151e6:	9b01      	ldr	r3, [sp, #4]
 80151e8:	695b      	ldr	r3, [r3, #20]
 80151ea:	42a3      	cmp	r3, r4
 80151ec:	d9d8      	bls.n	80151a0 <f_lseek+0xc0>
					fp->clust = clst;
 80151ee:	0021      	movs	r1, r4
 80151f0:	61ac      	str	r4, [r5, #24]
					ofs -= bcs; fp->fptr += bcs;
 80151f2:	9c02      	ldr	r4, [sp, #8]
 80151f4:	e7be      	b.n	8015174 <f_lseek+0x94>

080151f6 <f_stat>:
{
 80151f6:	b530      	push	{r4, r5, lr}
 80151f8:	b08f      	sub	sp, #60	@ 0x3c
 80151fa:	9001      	str	r0, [sp, #4]
 80151fc:	000d      	movs	r5, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
 80151fe:	2200      	movs	r2, #0
 8015200:	a903      	add	r1, sp, #12
 8015202:	a801      	add	r0, sp, #4
 8015204:	f7ff f8c2 	bl	801438c <mount_volume>
 8015208:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 801520a:	d118      	bne.n	801523e <f_stat+0x48>
		res = follow_path(&dj, path);	/* Follow the file path */
 801520c:	9901      	ldr	r1, [sp, #4]
 801520e:	a803      	add	r0, sp, #12
 8015210:	f7ff fbfc 	bl	8014a0c <follow_path>
 8015214:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
 8015216:	d112      	bne.n	801523e <f_stat+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8015218:	2337      	movs	r3, #55	@ 0x37
 801521a:	446b      	add	r3, sp
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015220:	d80c      	bhi.n	801523c <f_stat+0x46>
				if (fno) get_fileinfo(&dj, fno);
 8015222:	2d00      	cmp	r5, #0
 8015224:	d007      	beq.n	8015236 <f_stat+0x40>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8015226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	fno->fname[0] = 0;
 8015228:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 801522a:	2b00      	cmp	r3, #0
 801522c:	d003      	beq.n	8015236 <f_stat+0x40>
 801522e:	0029      	movs	r1, r5
 8015230:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015232:	f7ff f9ff 	bl	8014634 <get_fileinfo.part.0.constprop.0.isra.0>
}
 8015236:	0020      	movs	r0, r4
 8015238:	b00f      	add	sp, #60	@ 0x3c
 801523a:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 801523c:	2406      	movs	r4, #6
	if (fno && res != FR_OK) fno->fname[0] = 0;	/* Invalidate the file information if an error occured */
 801523e:	2d00      	cmp	r5, #0
 8015240:	d0f9      	beq.n	8015236 <f_stat+0x40>
 8015242:	2300      	movs	r3, #0
 8015244:	726b      	strb	r3, [r5, #9]
 8015246:	e7f6      	b.n	8015236 <f_stat+0x40>

08015248 <f_chmod>:
{
 8015248:	b570      	push	{r4, r5, r6, lr}
 801524a:	b08e      	sub	sp, #56	@ 0x38
 801524c:	000c      	movs	r4, r1
 801524e:	0016      	movs	r6, r2
 8015250:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 8015252:	2202      	movs	r2, #2
 8015254:	a902      	add	r1, sp, #8
 8015256:	a801      	add	r0, sp, #4
 8015258:	f7ff f898 	bl	801438c <mount_volume>
	if (res == FR_OK) {
 801525c:	2800      	cmp	r0, #0
 801525e:	d11b      	bne.n	8015298 <f_chmod+0x50>
		dj.obj.fs = fs;
 8015260:	9d02      	ldr	r5, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8015262:	9901      	ldr	r1, [sp, #4]
 8015264:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 8015266:	9503      	str	r5, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8015268:	f7ff fbd0 	bl	8014a0c <follow_path>
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 801526c:	2800      	cmp	r0, #0
 801526e:	d113      	bne.n	8015298 <f_chmod+0x50>
 8015270:	2337      	movs	r3, #55	@ 0x37
 8015272:	225f      	movs	r2, #95	@ 0x5f
 8015274:	446b      	add	r3, sp
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	3006      	adds	r0, #6
 801527a:	4393      	bics	r3, r2
 801527c:	d10c      	bne.n	8015298 <f_chmod+0x50>
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 801527e:	2127      	movs	r1, #39	@ 0x27
 8015280:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
				res = sync_fs(fs);
 8015282:	0028      	movs	r0, r5
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8015284:	7ad3      	ldrb	r3, [r2, #11]
 8015286:	405c      	eors	r4, r3
 8015288:	4034      	ands	r4, r6
 801528a:	400c      	ands	r4, r1
 801528c:	4063      	eors	r3, r4
 801528e:	72d3      	strb	r3, [r2, #11]
				fs->wflag = 1;
 8015290:	2301      	movs	r3, #1
 8015292:	712b      	strb	r3, [r5, #4]
				res = sync_fs(fs);
 8015294:	f7ff f81c 	bl	80142d0 <sync_fs>
}
 8015298:	b00e      	add	sp, #56	@ 0x38
 801529a:	bd70      	pop	{r4, r5, r6, pc}

0801529c <f_setlabel>:
{
 801529c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801529e:	b095      	sub	sp, #84	@ 0x54
 80152a0:	9001      	str	r0, [sp, #4]
	res = mount_volume(&label, &fs, FA_WRITE);
 80152a2:	2202      	movs	r2, #2
 80152a4:	a902      	add	r1, sp, #8
 80152a6:	a801      	add	r0, sp, #4
 80152a8:	f7ff f870 	bl	801438c <mount_volume>
 80152ac:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) LEAVE_FF(fs, res);
 80152ae:	d153      	bne.n	8015358 <f_setlabel+0xbc>
		while ((UINT)*label >= ' ') {	/* Create volume label */
 80152b0:	0025      	movs	r5, r4
		memset(dirvn, ' ', 11);
 80152b2:	220b      	movs	r2, #11
 80152b4:	2120      	movs	r1, #32
 80152b6:	a803      	add	r0, sp, #12
 80152b8:	f005 f91c 	bl	801a4f4 <memset>
			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
 80152bc:	4e34      	ldr	r6, [pc, #208]	@ (8015390 <f_setlabel+0xf4>)
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80152be:	4f35      	ldr	r7, [pc, #212]	@ (8015394 <f_setlabel+0xf8>)
		while ((UINT)*label >= ' ') {	/* Create volume label */
 80152c0:	9b01      	ldr	r3, [sp, #4]
 80152c2:	781a      	ldrb	r2, [r3, #0]
 80152c4:	2a1f      	cmp	r2, #31
 80152c6:	d828      	bhi.n	801531a <f_setlabel+0x7e>
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 80152c8:	466b      	mov	r3, sp
 80152ca:	7b1b      	ldrb	r3, [r3, #12]
 80152cc:	2be5      	cmp	r3, #229	@ 0xe5
 80152ce:	d042      	beq.n	8015356 <f_setlabel+0xba>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 80152d0:	2d00      	cmp	r5, #0
 80152d2:	d006      	beq.n	80152e2 <f_setlabel+0x46>
 80152d4:	466a      	mov	r2, sp
 80152d6:	210c      	movs	r1, #12
 80152d8:	1e6b      	subs	r3, r5, #1
 80152da:	1852      	adds	r2, r2, r1
 80152dc:	5cd2      	ldrb	r2, [r2, r3]
 80152de:	2a20      	cmp	r2, #32
 80152e0:	d03d      	beq.n	801535e <f_setlabel+0xc2>
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 80152e2:	9b02      	ldr	r3, [sp, #8]
	res = dir_sdi(&dj, 0);
 80152e4:	a809      	add	r0, sp, #36	@ 0x24
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 80152e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80152e8:	2300      	movs	r3, #0
 80152ea:	930b      	str	r3, [sp, #44]	@ 0x2c
	res = dir_sdi(&dj, 0);
 80152ec:	f7ff fa44 	bl	8014778 <dir_sdi.constprop.0>
 80152f0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 80152f2:	d131      	bne.n	8015358 <f_setlabel+0xbc>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 80152f4:	2101      	movs	r1, #1
 80152f6:	a809      	add	r0, sp, #36	@ 0x24
 80152f8:	f7ff fc4a 	bl	8014b90 <dir_read>
		if (res == FR_OK) {
 80152fc:	2800      	cmp	r0, #0
 80152fe:	d130      	bne.n	8015362 <f_setlabel+0xc6>
					memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
 8015300:	220b      	movs	r2, #11
 8015302:	9810      	ldr	r0, [sp, #64]	@ 0x40
				if (di != 0) {
 8015304:	2d00      	cmp	r5, #0
 8015306:	d13f      	bne.n	8015388 <f_setlabel+0xec>
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 8015308:	23e5      	movs	r3, #229	@ 0xe5
 801530a:	7003      	strb	r3, [r0, #0]
						fs->wflag = 1;
 801530c:	2301      	movs	r3, #1
 801530e:	9802      	ldr	r0, [sp, #8]
 8015310:	7103      	strb	r3, [r0, #4]
						res = sync_fs(fs);
 8015312:	f7fe ffdd 	bl	80142d0 <sync_fs>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8015316:	0004      	movs	r4, r0
 8015318:	e01e      	b.n	8015358 <f_setlabel+0xbc>
			wc = (BYTE)*label++;
 801531a:	1c5a      	adds	r2, r3, #1
 801531c:	9201      	str	r2, [sp, #4]
 801531e:	781c      	ldrb	r4, [r3, #0]
			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 8015320:	0023      	movs	r3, r4
 8015322:	3b61      	subs	r3, #97	@ 0x61
 8015324:	2b19      	cmp	r3, #25
 8015326:	d80f      	bhi.n	8015348 <f_setlabel+0xac>
 8015328:	3c20      	subs	r4, #32
 801532a:	b2a4      	uxth	r4, r4
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 801532c:	0021      	movs	r1, r4
 801532e:	0038      	movs	r0, r7
 8015330:	f005 f8f5 	bl	801a51e <strchr>
 8015334:	2800      	cmp	r0, #0
 8015336:	d10e      	bne.n	8015356 <f_setlabel+0xba>
 8015338:	2d0b      	cmp	r5, #11
 801533a:	d00c      	beq.n	8015356 <f_setlabel+0xba>
			dirvn[di++] = (BYTE)wc;
 801533c:	466b      	mov	r3, sp
 801533e:	220c      	movs	r2, #12
 8015340:	189b      	adds	r3, r3, r2
 8015342:	555c      	strb	r4, [r3, r5]
 8015344:	3501      	adds	r5, #1
 8015346:	e7bb      	b.n	80152c0 <f_setlabel+0x24>
			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
 8015348:	2c7f      	cmp	r4, #127	@ 0x7f
 801534a:	d902      	bls.n	8015352 <f_setlabel+0xb6>
 801534c:	1934      	adds	r4, r6, r4
 801534e:	3c80      	subs	r4, #128	@ 0x80
 8015350:	7824      	ldrb	r4, [r4, #0]
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 8015352:	2c00      	cmp	r4, #0
 8015354:	d1ea      	bne.n	801532c <f_setlabel+0x90>
				LEAVE_FF(fs, FR_INVALID_NAME);
 8015356:	2406      	movs	r4, #6
}
 8015358:	0020      	movs	r0, r4
 801535a:	b015      	add	sp, #84	@ 0x54
 801535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 801535e:	001d      	movs	r5, r3
 8015360:	e7b6      	b.n	80152d0 <f_setlabel+0x34>
			if (res == FR_NO_FILE) {
 8015362:	2804      	cmp	r0, #4
 8015364:	d1d7      	bne.n	8015316 <f_setlabel+0x7a>
				if (di != 0) {	/* Create a volume label entry */
 8015366:	2d00      	cmp	r5, #0
 8015368:	d0f6      	beq.n	8015358 <f_setlabel+0xbc>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 801536a:	a809      	add	r0, sp, #36	@ 0x24
 801536c:	f7ff fc42 	bl	8014bf4 <dir_alloc.constprop.0>
 8015370:	1e04      	subs	r4, r0, #0
					if (res == FR_OK) {
 8015372:	d1f1      	bne.n	8015358 <f_setlabel+0xbc>
						memset(dj.dir, 0, SZDIRE);	/* Clean the entry */
 8015374:	2220      	movs	r2, #32
 8015376:	0021      	movs	r1, r4
 8015378:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801537a:	f005 f8bb 	bl	801a4f4 <memset>
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 801537e:	2208      	movs	r2, #8
 8015380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015382:	72da      	strb	r2, [r3, #11]
							memcpy(dj.dir, dirvn, 11);
 8015384:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015386:	3203      	adds	r2, #3
 8015388:	a903      	add	r1, sp, #12
 801538a:	f005 f97d 	bl	801a688 <memcpy>
 801538e:	e7bd      	b.n	801530c <f_setlabel+0x70>
 8015390:	080204f6 	.word	0x080204f6
 8015394:	080204e4 	.word	0x080204e4

08015398 <f_mkfs>:
{
 8015398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801539a:	b09b      	sub	sp, #108	@ 0x6c
 801539c:	9013      	str	r0, [sp, #76]	@ 0x4c
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 801539e:	a813      	add	r0, sp, #76	@ 0x4c
{
 80153a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80153a2:	000e      	movs	r6, r1
 80153a4:	0014      	movs	r4, r2
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 80153a6:	f7fe fdec 	bl	8013f82 <get_ldnumber>
 80153aa:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 80153ac:	200b      	movs	r0, #11
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	db6b      	blt.n	801548a <f_mkfs+0xf2>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 80153b2:	4ab7      	ldr	r2, [pc, #732]	@ (8015690 <f_mkfs+0x2f8>)
 80153b4:	0099      	lsls	r1, r3, #2
 80153b6:	588a      	ldr	r2, [r1, r2]
 80153b8:	2a00      	cmp	r2, #0
 80153ba:	d001      	beq.n	80153c0 <f_mkfs+0x28>
 80153bc:	2100      	movs	r1, #0
 80153be:	7011      	strb	r1, [r2, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 80153c0:	b2db      	uxtb	r3, r3
	ds = disk_initialize(pdrv);
 80153c2:	0018      	movs	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 80153c4:	9302      	str	r3, [sp, #8]
	ds = disk_initialize(pdrv);
 80153c6:	f7fe fd5f 	bl	8013e88 <disk_initialize>
 80153ca:	0003      	movs	r3, r0
	if (ds & STA_NOINIT) return FR_NOT_READY;
 80153cc:	2003      	movs	r0, #3
 80153ce:	07da      	lsls	r2, r3, #31
 80153d0:	d45b      	bmi.n	801548a <f_mkfs+0xf2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 80153d2:	3007      	adds	r0, #7
 80153d4:	075b      	lsls	r3, r3, #29
 80153d6:	d458      	bmi.n	801548a <f_mkfs+0xf2>
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 80153d8:	2e00      	cmp	r6, #0
 80153da:	d100      	bne.n	80153de <f_mkfs+0x46>
 80153dc:	4ead      	ldr	r6, [pc, #692]	@ (8015694 <f_mkfs+0x2fc>)
	sz_blk = opt->align;
 80153de:	6873      	ldr	r3, [r6, #4]
 80153e0:	9315      	str	r3, [sp, #84]	@ 0x54
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d104      	bne.n	80153f0 <f_mkfs+0x58>
 80153e6:	2103      	movs	r1, #3
 80153e8:	9802      	ldr	r0, [sp, #8]
 80153ea:	aa15      	add	r2, sp, #84	@ 0x54
 80153ec:	f7fe fd92 	bl	8013f14 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 80153f0:	2180      	movs	r1, #128	@ 0x80
 80153f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80153f4:	0209      	lsls	r1, r1, #8
 80153f6:	1e5a      	subs	r2, r3, #1
 80153f8:	428a      	cmp	r2, r1
 80153fa:	d201      	bcs.n	8015400 <f_mkfs+0x68>
 80153fc:	421a      	tst	r2, r3
 80153fe:	d001      	beq.n	8015404 <f_mkfs+0x6c>
 8015400:	2301      	movs	r3, #1
 8015402:	9315      	str	r3, [sp, #84]	@ 0x54
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8015404:	7873      	ldrb	r3, [r6, #1]
 8015406:	9307      	str	r3, [sp, #28]
 8015408:	3b01      	subs	r3, #1
 801540a:	2b01      	cmp	r3, #1
 801540c:	d901      	bls.n	8015412 <f_mkfs+0x7a>
 801540e:	2301      	movs	r3, #1
 8015410:	9307      	str	r3, [sp, #28]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8015412:	68b3      	ldr	r3, [r6, #8]
 8015414:	9308      	str	r3, [sp, #32]
 8015416:	1e5a      	subs	r2, r3, #1
 8015418:	2380      	movs	r3, #128	@ 0x80
 801541a:	021b      	lsls	r3, r3, #8
 801541c:	429a      	cmp	r2, r3
 801541e:	d202      	bcs.n	8015426 <f_mkfs+0x8e>
 8015420:	9b08      	ldr	r3, [sp, #32]
 8015422:	065b      	lsls	r3, r3, #25
 8015424:	d002      	beq.n	801542c <f_mkfs+0x94>
 8015426:	2380      	movs	r3, #128	@ 0x80
 8015428:	009b      	lsls	r3, r3, #2
 801542a:	9308      	str	r3, [sp, #32]
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 801542c:	2380      	movs	r3, #128	@ 0x80
 801542e:	68f5      	ldr	r5, [r6, #12]
 8015430:	045b      	lsls	r3, r3, #17
 8015432:	429d      	cmp	r5, r3
 8015434:	d82b      	bhi.n	801548e <f_mkfs+0xf6>
 8015436:	1e6b      	subs	r3, r5, #1
 8015438:	402b      	ands	r3, r5
 801543a:	425a      	negs	r2, r3
 801543c:	4153      	adcs	r3, r2
 801543e:	425b      	negs	r3, r3
 8015440:	401d      	ands	r5, r3
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8015442:	2380      	movs	r3, #128	@ 0x80
 8015444:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015446:	2011      	movs	r0, #17
 8015448:	015b      	lsls	r3, r3, #5
 801544a:	429a      	cmp	r2, r3
 801544c:	d31d      	bcc.n	801548a <f_mkfs+0xf2>
	if (!buf) return FR_NOT_ENOUGH_CORE;
 801544e:	2c00      	cmp	r4, #0
 8015450:	d01b      	beq.n	801548a <f_mkfs+0xf2>
	b_vol = sz_vol = 0;
 8015452:	2300      	movs	r3, #0
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015454:	2101      	movs	r1, #1
 8015456:	9802      	ldr	r0, [sp, #8]
 8015458:	aa16      	add	r2, sp, #88	@ 0x58
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 801545a:	7836      	ldrb	r6, [r6, #0]
	b_vol = sz_vol = 0;
 801545c:	9316      	str	r3, [sp, #88]	@ 0x58
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 801545e:	f7fe fd59 	bl	8013f14 <disk_ioctl>
 8015462:	2800      	cmp	r0, #0
 8015464:	d000      	beq.n	8015468 <f_mkfs+0xd0>
 8015466:	e309      	b.n	8015a7c <f_mkfs+0x6e4>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8015468:	2308      	movs	r3, #8
 801546a:	0032      	movs	r2, r6
 801546c:	401a      	ands	r2, r3
 801546e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015470:	421e      	tst	r6, r3
 8015472:	d10e      	bne.n	8015492 <f_mkfs+0xfa>
				if (sz_vol > N_SEC_TRACK) {
 8015474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015476:	2b01      	cmp	r3, #1
 8015478:	d906      	bls.n	8015488 <f_mkfs+0xf0>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 801547a:	3b01      	subs	r3, #1
 801547c:	9316      	str	r3, [sp, #88]	@ 0x58
 801547e:	2301      	movs	r3, #1
 8015480:	9309      	str	r3, [sp, #36]	@ 0x24
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 8015482:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015484:	2b7f      	cmp	r3, #127	@ 0x7f
 8015486:	d806      	bhi.n	8015496 <f_mkfs+0xfe>
 8015488:	200e      	movs	r0, #14
}
 801548a:	b01b      	add	sp, #108	@ 0x6c
 801548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 801548e:	2500      	movs	r5, #0
 8015490:	e7d7      	b.n	8015442 <f_mkfs+0xaa>
	b_vol = sz_vol = 0;
 8015492:	9009      	str	r0, [sp, #36]	@ 0x24
 8015494:	e7f5      	b.n	8015482 <f_mkfs+0xea>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8015496:	2381      	movs	r3, #129	@ 0x81
 8015498:	2780      	movs	r7, #128	@ 0x80
 801549a:	031b      	lsls	r3, r3, #12
 801549c:	429d      	cmp	r5, r3
 801549e:	d200      	bcs.n	80154a2 <f_mkfs+0x10a>
	sz_au /= ss;	/* Byte --> Sector */
 80154a0:	0b2f      	lsrs	r7, r5, #12
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 80154a2:	2502      	movs	r5, #2
 80154a4:	0033      	movs	r3, r6
 80154a6:	402b      	ands	r3, r5
 80154a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80154aa:	2301      	movs	r3, #1
 80154ac:	4033      	ands	r3, r6
 80154ae:	422e      	tst	r6, r5
 80154b0:	d023      	beq.n	80154fa <f_mkfs+0x162>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 80154b2:	3501      	adds	r5, #1
 80154b4:	1aed      	subs	r5, r5, r3
 80154b6:	b2ed      	uxtb	r5, r5
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 80154b8:	f7fe fd40 	bl	8013f3c <get_fattime>
 80154bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80154be:	900f      	str	r0, [sp, #60]	@ 0x3c
 80154c0:	9303      	str	r3, [sp, #12]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 80154c2:	9b08      	ldr	r3, [sp, #32]
 80154c4:	015b      	lsls	r3, r3, #5
 80154c6:	0b1b      	lsrs	r3, r3, #12
 80154c8:	9311      	str	r3, [sp, #68]	@ 0x44
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80154ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80154cc:	1e5a      	subs	r2, r3, #1
 80154ce:	425b      	negs	r3, r3
 80154d0:	9212      	str	r2, [sp, #72]	@ 0x48
 80154d2:	9310      	str	r3, [sp, #64]	@ 0x40
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 80154d4:	2d03      	cmp	r5, #3
 80154d6:	d000      	beq.n	80154da <f_mkfs+0x142>
 80154d8:	e091      	b.n	80155fe <f_mkfs+0x266>
				if (pau == 0) {	/* AU auto-selection */
 80154da:	970a      	str	r7, [sp, #40]	@ 0x28
 80154dc:	2f00      	cmp	r7, #0
 80154de:	d112      	bne.n	8015506 <f_mkfs+0x16e>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80154e0:	2701      	movs	r7, #1
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80154e2:	9b03      	ldr	r3, [sp, #12]
 80154e4:	4a6c      	ldr	r2, [pc, #432]	@ (8015698 <f_mkfs+0x300>)
 80154e6:	0c59      	lsrs	r1, r3, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80154e8:	8813      	ldrh	r3, [r2, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d003      	beq.n	80154f6 <f_mkfs+0x15e>
 80154ee:	3202      	adds	r2, #2
 80154f0:	428b      	cmp	r3, r1
 80154f2:	d956      	bls.n	80155a2 <f_mkfs+0x20a>
 80154f4:	2300      	movs	r3, #0
 80154f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80154f8:	e005      	b.n	8015506 <f_mkfs+0x16e>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80154fa:	2013      	movs	r0, #19
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d1db      	bne.n	80154b8 <f_mkfs+0x120>
 8015500:	e7c3      	b.n	801548a <f_mkfs+0xf2>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015502:	087f      	lsrs	r7, r7, #1
 8015504:	970a      	str	r7, [sp, #40]	@ 0x28
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8015506:	0039      	movs	r1, r7
 8015508:	9803      	ldr	r0, [sp, #12]
 801550a:	f7ea fe2d 	bl	8000168 <__udivsi3>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801550e:	4a63      	ldr	r2, [pc, #396]	@ (801569c <f_mkfs+0x304>)
 8015510:	0083      	lsls	r3, r0, #2
 8015512:	189b      	adds	r3, r3, r2
 8015514:	0b1b      	lsrs	r3, r3, #12
 8015516:	9306      	str	r3, [sp, #24]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8015518:	4b61      	ldr	r3, [pc, #388]	@ (80156a0 <f_mkfs+0x308>)
 801551a:	18c0      	adds	r0, r0, r3
 801551c:	4b61      	ldr	r3, [pc, #388]	@ (80156a4 <f_mkfs+0x30c>)
 801551e:	4298      	cmp	r0, r3
 8015520:	d8b2      	bhi.n	8015488 <f_mkfs+0xf0>
				sz_dir = 0;		/* No static directory */
 8015522:	2300      	movs	r3, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 8015524:	2520      	movs	r5, #32
				sz_dir = 0;		/* No static directory */
 8015526:	9305      	str	r3, [sp, #20]
 8015528:	3303      	adds	r3, #3
 801552a:	9301      	str	r3, [sp, #4]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801552c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 801552e:	9a06      	ldr	r2, [sp, #24]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015530:	18eb      	adds	r3, r5, r3
 8015532:	9304      	str	r3, [sp, #16]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8015534:	9b07      	ldr	r3, [sp, #28]
 8015536:	4353      	muls	r3, r2
 8015538:	9a04      	ldr	r2, [sp, #16]
 801553a:	189b      	adds	r3, r3, r2
 801553c:	9a05      	ldr	r2, [sp, #20]
 801553e:	189b      	adds	r3, r3, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8015540:	9a12      	ldr	r2, [sp, #72]	@ 0x48
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8015542:	930b      	str	r3, [sp, #44]	@ 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8015544:	189e      	adds	r6, r3, r2
 8015546:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015548:	401e      	ands	r6, r3
 801554a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801554c:	1af6      	subs	r6, r6, r3
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 801554e:	9b01      	ldr	r3, [sp, #4]
 8015550:	2b03      	cmp	r3, #3
 8015552:	d131      	bne.n	80155b8 <f_mkfs+0x220>
				sz_rsv += n; b_fat += n;
 8015554:	9b04      	ldr	r3, [sp, #16]
 8015556:	19ad      	adds	r5, r5, r6
 8015558:	199b      	adds	r3, r3, r6
 801555a:	9304      	str	r3, [sp, #16]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 801555c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801555e:	013b      	lsls	r3, r7, #4
 8015560:	1a9b      	subs	r3, r3, r2
 8015562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015564:	189b      	adds	r3, r3, r2
 8015566:	9a03      	ldr	r2, [sp, #12]
 8015568:	429a      	cmp	r2, r3
 801556a:	d200      	bcs.n	801556e <f_mkfs+0x1d6>
 801556c:	e78c      	b.n	8015488 <f_mkfs+0xf0>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 801556e:	0013      	movs	r3, r2
 8015570:	9a05      	ldr	r2, [sp, #20]
 8015572:	0039      	movs	r1, r7
 8015574:	1a98      	subs	r0, r3, r2
 8015576:	9a06      	ldr	r2, [sp, #24]
 8015578:	9b07      	ldr	r3, [sp, #28]
 801557a:	1b40      	subs	r0, r0, r5
 801557c:	4353      	muls	r3, r2
 801557e:	1ac0      	subs	r0, r0, r3
 8015580:	f7ea fdf2 	bl	8000168 <__udivsi3>
			if (fsty == FS_FAT32) {
 8015584:	9b01      	ldr	r3, [sp, #4]
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8015586:	0006      	movs	r6, r0
			if (fsty == FS_FAT32) {
 8015588:	2b03      	cmp	r3, #3
 801558a:	d128      	bne.n	80155de <f_mkfs+0x246>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 801558c:	4b46      	ldr	r3, [pc, #280]	@ (80156a8 <f_mkfs+0x310>)
 801558e:	4298      	cmp	r0, r3
 8015590:	d900      	bls.n	8015594 <f_mkfs+0x1fc>
 8015592:	e208      	b.n	80159a6 <f_mkfs+0x60e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015596:	2b00      	cmp	r3, #0
 8015598:	d000      	beq.n	801559c <f_mkfs+0x204>
 801559a:	e775      	b.n	8015488 <f_mkfs+0xf0>
 801559c:	2f01      	cmp	r7, #1
 801559e:	d8b0      	bhi.n	8015502 <f_mkfs+0x16a>
 80155a0:	e772      	b.n	8015488 <f_mkfs+0xf0>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80155a2:	007f      	lsls	r7, r7, #1
 80155a4:	e7a0      	b.n	80154e8 <f_mkfs+0x150>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80155a6:	006d      	lsls	r5, r5, #1
 80155a8:	e02f      	b.n	801560a <f_mkfs+0x272>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80155aa:	2003      	movs	r0, #3
 80155ac:	4358      	muls	r0, r3
 80155ae:	3001      	adds	r0, #1
 80155b0:	0840      	lsrs	r0, r0, #1
					fsty = FS_FAT12;
 80155b2:	2301      	movs	r3, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80155b4:	3003      	adds	r0, #3
 80155b6:	e039      	b.n	801562c <f_mkfs+0x294>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 80155b8:	0030      	movs	r0, r6
 80155ba:	9907      	ldr	r1, [sp, #28]
 80155bc:	f7ea fe5a 	bl	8000274 <__aeabi_uidivmod>
 80155c0:	2900      	cmp	r1, #0
 80155c2:	d004      	beq.n	80155ce <f_mkfs+0x236>
					n--; sz_rsv++; b_fat++;
 80155c4:	9b04      	ldr	r3, [sp, #16]
 80155c6:	3e01      	subs	r6, #1
 80155c8:	3301      	adds	r3, #1
 80155ca:	3501      	adds	r5, #1
 80155cc:	9304      	str	r3, [sp, #16]
				sz_fat += n / n_fat;
 80155ce:	0030      	movs	r0, r6
 80155d0:	9907      	ldr	r1, [sp, #28]
 80155d2:	f7ea fdc9 	bl	8000168 <__udivsi3>
 80155d6:	9b06      	ldr	r3, [sp, #24]
 80155d8:	181b      	adds	r3, r3, r0
 80155da:	9306      	str	r3, [sp, #24]
 80155dc:	e7be      	b.n	801555c <f_mkfs+0x1c4>
			if (fsty == FS_FAT16) {
 80155de:	9b01      	ldr	r3, [sp, #4]
 80155e0:	2b02      	cmp	r3, #2
 80155e2:	d000      	beq.n	80155e6 <f_mkfs+0x24e>
 80155e4:	e1d9      	b.n	801599a <f_mkfs+0x602>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80155e6:	4b30      	ldr	r3, [pc, #192]	@ (80156a8 <f_mkfs+0x310>)
 80155e8:	4298      	cmp	r0, r3
 80155ea:	d92a      	bls.n	8015642 <f_mkfs+0x2aa>
					if (sz_au == 0 && (pau * 2) <= 64) {
 80155ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d000      	beq.n	80155f4 <f_mkfs+0x25c>
 80155f2:	e1c3      	b.n	801597c <f_mkfs+0x5e4>
 80155f4:	007d      	lsls	r5, r7, #1
 80155f6:	2d40      	cmp	r5, #64	@ 0x40
 80155f8:	d900      	bls.n	80155fc <f_mkfs+0x264>
 80155fa:	e1c5      	b.n	8015988 <f_mkfs+0x5f0>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 80155fc:	002f      	movs	r7, r5
			pau = sz_au;
 80155fe:	1e3d      	subs	r5, r7, #0
				if (pau == 0) {	/* au auto-selection */
 8015600:	d109      	bne.n	8015616 <f_mkfs+0x27e>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015602:	2501      	movs	r5, #1
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015604:	9b03      	ldr	r3, [sp, #12]
 8015606:	0b19      	lsrs	r1, r3, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015608:	4b28      	ldr	r3, [pc, #160]	@ (80156ac <f_mkfs+0x314>)
 801560a:	881a      	ldrh	r2, [r3, #0]
 801560c:	2a00      	cmp	r2, #0
 801560e:	d002      	beq.n	8015616 <f_mkfs+0x27e>
 8015610:	3302      	adds	r3, #2
 8015612:	428a      	cmp	r2, r1
 8015614:	d9c7      	bls.n	80155a6 <f_mkfs+0x20e>
				n_clst = (DWORD)sz_vol / pau;
 8015616:	0029      	movs	r1, r5
 8015618:	9803      	ldr	r0, [sp, #12]
 801561a:	f7ea fda5 	bl	8000168 <__udivsi3>
				if (n_clst > MAX_FAT12) {
 801561e:	4a24      	ldr	r2, [pc, #144]	@ (80156b0 <f_mkfs+0x318>)
				n_clst = (DWORD)sz_vol / pau;
 8015620:	0003      	movs	r3, r0
				if (n_clst > MAX_FAT12) {
 8015622:	4290      	cmp	r0, r2
 8015624:	d9c1      	bls.n	80155aa <f_mkfs+0x212>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015626:	3302      	adds	r3, #2
 8015628:	0058      	lsls	r0, r3, #1
 801562a:	2302      	movs	r3, #2
					fsty = FS_FAT12;
 801562c:	9301      	str	r3, [sp, #4]
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801562e:	4b21      	ldr	r3, [pc, #132]	@ (80156b4 <f_mkfs+0x31c>)
 8015630:	970a      	str	r7, [sp, #40]	@ 0x28
 8015632:	18c0      	adds	r0, r0, r3
 8015634:	0b03      	lsrs	r3, r0, #12
 8015636:	9306      	str	r3, [sp, #24]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8015638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801563a:	002f      	movs	r7, r5
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 801563c:	9305      	str	r3, [sp, #20]
				sz_rsv = 1;						/* Number of reserved sectors */
 801563e:	2501      	movs	r5, #1
 8015640:	e774      	b.n	801552c <f_mkfs+0x194>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015642:	4b1b      	ldr	r3, [pc, #108]	@ (80156b0 <f_mkfs+0x318>)
 8015644:	4298      	cmp	r0, r3
 8015646:	d900      	bls.n	801564a <f_mkfs+0x2b2>
 8015648:	e1ad      	b.n	80159a6 <f_mkfs+0x60e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801564a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801564c:	2b00      	cmp	r3, #0
 801564e:	d000      	beq.n	8015652 <f_mkfs+0x2ba>
 8015650:	e71a      	b.n	8015488 <f_mkfs+0xf0>
 8015652:	007f      	lsls	r7, r7, #1
 8015654:	2f80      	cmp	r7, #128	@ 0x80
 8015656:	d9d2      	bls.n	80155fe <f_mkfs+0x266>
 8015658:	e716      	b.n	8015488 <f_mkfs+0xf0>
			st_32(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 801565a:	0020      	movs	r0, r4
 801565c:	9903      	ldr	r1, [sp, #12]
 801565e:	3020      	adds	r0, #32
 8015660:	f7fe fc7b 	bl	8013f5a <st_32>
 8015664:	e1c9      	b.n	80159fa <f_mkfs+0x662>
			st_32(buf + BS_VolID, vsn);					/* VSN */
 8015666:	3027      	adds	r0, #39	@ 0x27
 8015668:	f7fe fc77 	bl	8013f5a <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 801566c:	9b06      	ldr	r3, [sp, #24]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 801566e:	2280      	movs	r2, #128	@ 0x80
	*ptr++ = (BYTE)val; val >>= 8;
 8015670:	75a3      	strb	r3, [r4, #22]
 8015672:	466b      	mov	r3, sp
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 8015674:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8015676:	8b1b      	ldrh	r3, [r3, #24]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 8015678:	490f      	ldr	r1, [pc, #60]	@ (80156b8 <f_mkfs+0x320>)
	*ptr++ = (BYTE)val; val >>= 8;
 801567a:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 801567c:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 801567e:	1d63      	adds	r3, r4, #5
 8015680:	77da      	strb	r2, [r3, #31]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8015682:	3a57      	subs	r2, #87	@ 0x57
 8015684:	1de3      	adds	r3, r4, #7
 8015686:	77da      	strb	r2, [r3, #31]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 8015688:	302b      	adds	r0, #43	@ 0x2b
 801568a:	3a16      	subs	r2, #22
 801568c:	e1e2      	b.n	8015a54 <f_mkfs+0x6bc>
 801568e:	46c0      	nop			@ (mov r8, r8)
 8015690:	200030dc 	.word	0x200030dc
 8015694:	080204d4 	.word	0x080204d4
 8015698:	080204c6 	.word	0x080204c6
 801569c:	00001007 	.word	0x00001007
 80156a0:	ffff000a 	.word	0xffff000a
 80156a4:	0ffeffff 	.word	0x0ffeffff
 80156a8:	0000fff5 	.word	0x0000fff5
 80156ac:	080204b8 	.word	0x080204b8
 80156b0:	00000ff5 	.word	0x00000ff5
 80156b4:	00000fff 	.word	0x00000fff
 80156b8:	0801fffe 	.word	0x0801fffe
		if (fsty == FS_FAT32) {
 80156bc:	9b01      	ldr	r3, [sp, #4]
 80156be:	2b03      	cmp	r3, #3
 80156c0:	d13d      	bne.n	801573e <f_mkfs+0x3a6>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80156c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156c4:	0021      	movs	r1, r4
 80156c6:	1d9a      	adds	r2, r3, #6
 80156c8:	9802      	ldr	r0, [sp, #8]
 80156ca:	2301      	movs	r3, #1
 80156cc:	f7fe fbfd 	bl	8013eca <disk_write>
			memset(buf, 0, ss);
 80156d0:	2280      	movs	r2, #128	@ 0x80
 80156d2:	9903      	ldr	r1, [sp, #12]
 80156d4:	0152      	lsls	r2, r2, #5
 80156d6:	0020      	movs	r0, r4
 80156d8:	f004 ff0c 	bl	801a4f4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 80156dc:	2352      	movs	r3, #82	@ 0x52
 80156de:	20f2      	movs	r0, #242	@ 0xf2
	*ptr++ = (BYTE)val;
 80156e0:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80156e2:	2172      	movs	r1, #114	@ 0x72
 80156e4:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156e6:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80156e8:	0040      	lsls	r0, r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80156ea:	330f      	adds	r3, #15
 80156ec:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80156ee:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80156f0:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156f2:	20e6      	movs	r0, #230	@ 0xe6
 80156f4:	30ff      	adds	r0, #255	@ 0xff
 80156f6:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156f8:	3175      	adds	r1, #117	@ 0x75
 80156fa:	31ff      	adds	r1, #255	@ 0xff
 80156fc:	5462      	strb	r2, [r4, r1]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80156fe:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val;
 8015700:	22e8      	movs	r2, #232	@ 0xe8
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015702:	30e9      	adds	r0, #233	@ 0xe9
	*ptr++ = (BYTE)val;
 8015704:	32ff      	adds	r2, #255	@ 0xff
 8015706:	54a3      	strb	r3, [r4, r2]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015708:	1e71      	subs	r1, r6, #1
 801570a:	30ff      	adds	r0, #255	@ 0xff
 801570c:	f7fe fc25 	bl	8013f5a <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8015710:	23f6      	movs	r3, #246	@ 0xf6
 8015712:	2202      	movs	r2, #2
 8015714:	005b      	lsls	r3, r3, #1
 8015716:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8015718:	3312      	adds	r3, #18
 801571a:	3253      	adds	r2, #83	@ 0x53
 801571c:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 801571e:	4bd8      	ldr	r3, [pc, #864]	@ (8015a80 <f_mkfs+0x6e8>)
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015720:	0021      	movs	r1, r4
	*ptr++ = (BYTE)val;
 8015722:	54e5      	strb	r5, [r4, r3]
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015726:	9802      	ldr	r0, [sp, #8]
 8015728:	1dda      	adds	r2, r3, #7
 801572a:	2301      	movs	r3, #1
 801572c:	f7fe fbcd 	bl	8013eca <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015732:	0021      	movs	r1, r4
 8015734:	1c5a      	adds	r2, r3, #1
 8015736:	9802      	ldr	r0, [sp, #8]
 8015738:	2301      	movs	r3, #1
 801573a:	f7fe fbc6 	bl	8013eca <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 801573e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		memset(buf, 0, sz_buf * ss);
 8015740:	2100      	movs	r1, #0
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8015742:	0b1d      	lsrs	r5, r3, #12
		memset(buf, 0, sz_buf * ss);
 8015744:	032a      	lsls	r2, r5, #12
 8015746:	0020      	movs	r0, r4
 8015748:	f004 fed4 	bl	801a4f4 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 801574c:	9b01      	ldr	r3, [sp, #4]
 801574e:	3b01      	subs	r3, #1
 8015750:	1e5a      	subs	r2, r3, #1
 8015752:	4193      	sbcs	r3, r2
 8015754:	4acb      	ldr	r2, [pc, #812]	@ (8015a84 <f_mkfs+0x6ec>)
 8015756:	425b      	negs	r3, r3
 8015758:	4694      	mov	ip, r2
 801575a:	0e1b      	lsrs	r3, r3, #24
 801575c:	061b      	lsls	r3, r3, #24
 801575e:	4463      	add	r3, ip
 8015760:	9308      	str	r3, [sp, #32]
 8015762:	2300      	movs	r3, #0
 8015764:	9309      	str	r3, [sp, #36]	@ 0x24
			if (fsty == FS_FAT32) {
 8015766:	9b01      	ldr	r3, [sp, #4]
 8015768:	2b03      	cmp	r3, #3
 801576a:	d000      	beq.n	801576e <f_mkfs+0x3d6>
 801576c:	e0b1      	b.n	80158d2 <f_mkfs+0x53a>
	*ptr++ = (BYTE)val; val >>= 8;
 801576e:	33f5      	adds	r3, #245	@ 0xf5
 8015770:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015772:	3307      	adds	r3, #7
 8015774:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8015776:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8015778:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 801577a:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801577c:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 801577e:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8015780:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015782:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8015784:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8015786:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8015788:	3bf0      	subs	r3, #240	@ 0xf0
 801578a:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 801578c:	9e06      	ldr	r6, [sp, #24]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 801578e:	9603      	str	r6, [sp, #12]
 8015790:	42ae      	cmp	r6, r5
 8015792:	d900      	bls.n	8015796 <f_mkfs+0x3fe>
 8015794:	9503      	str	r5, [sp, #12]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015796:	0021      	movs	r1, r4
 8015798:	9b03      	ldr	r3, [sp, #12]
 801579a:	9a04      	ldr	r2, [sp, #16]
 801579c:	9802      	ldr	r0, [sp, #8]
 801579e:	f7fe fb94 	bl	8013eca <disk_write>
 80157a2:	1e01      	subs	r1, r0, #0
 80157a4:	d000      	beq.n	80157a8 <f_mkfs+0x410>
 80157a6:	e169      	b.n	8015a7c <f_mkfs+0x6e4>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 80157a8:	2280      	movs	r2, #128	@ 0x80
 80157aa:	0020      	movs	r0, r4
 80157ac:	0152      	lsls	r2, r2, #5
 80157ae:	f004 fea1 	bl	801a4f4 <memset>
				sect += n; nsect -= n;
 80157b2:	9a03      	ldr	r2, [sp, #12]
 80157b4:	9b04      	ldr	r3, [sp, #16]
 80157b6:	4694      	mov	ip, r2
 80157b8:	4463      	add	r3, ip
 80157ba:	9304      	str	r3, [sp, #16]
 80157bc:	1ab6      	subs	r6, r6, r2
			} while (nsect);
 80157be:	d1e6      	bne.n	801578e <f_mkfs+0x3f6>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80157c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c2:	425a      	negs	r2, r3
 80157c4:	4153      	adcs	r3, r2
 80157c6:	2201      	movs	r2, #1
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80157cc:	425a      	negs	r2, r3
 80157ce:	4153      	adcs	r3, r2
 80157d0:	9a07      	ldr	r2, [sp, #28]
 80157d2:	3301      	adds	r3, #1
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d8c6      	bhi.n	8015766 <f_mkfs+0x3ce>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80157d8:	9b01      	ldr	r3, [sp, #4]
 80157da:	2b03      	cmp	r3, #3
 80157dc:	d100      	bne.n	80157e0 <f_mkfs+0x448>
 80157de:	9705      	str	r7, [sp, #20]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80157e0:	9e05      	ldr	r6, [sp, #20]
 80157e2:	42ae      	cmp	r6, r5
 80157e4:	d900      	bls.n	80157e8 <f_mkfs+0x450>
 80157e6:	002e      	movs	r6, r5
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80157e8:	0033      	movs	r3, r6
 80157ea:	0021      	movs	r1, r4
 80157ec:	9a04      	ldr	r2, [sp, #16]
 80157ee:	9802      	ldr	r0, [sp, #8]
 80157f0:	f7fe fb6b 	bl	8013eca <disk_write>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d000      	beq.n	80157fa <f_mkfs+0x462>
 80157f8:	e140      	b.n	8015a7c <f_mkfs+0x6e4>
			sect += n; nsect -= n;
 80157fa:	9b04      	ldr	r3, [sp, #16]
 80157fc:	199b      	adds	r3, r3, r6
 80157fe:	9304      	str	r3, [sp, #16]
 8015800:	9b05      	ldr	r3, [sp, #20]
 8015802:	1b9b      	subs	r3, r3, r6
 8015804:	9305      	str	r3, [sp, #20]
		} while (nsect);
 8015806:	d1eb      	bne.n	80157e0 <f_mkfs+0x448>
		sys = 0x0C;		/* FAT32X */
 8015808:	330c      	adds	r3, #12
 801580a:	9304      	str	r3, [sp, #16]
	} else if (fsty == FS_FAT32) {
 801580c:	9b01      	ldr	r3, [sp, #4]
 801580e:	2b03      	cmp	r3, #3
 8015810:	d00d      	beq.n	801582e <f_mkfs+0x496>
	} else if (sz_vol >= 0x10000) {
 8015812:	2380      	movs	r3, #128	@ 0x80
		sys = 0x06;		/* FAT12/16 (large) */
 8015814:	2106      	movs	r1, #6
	} else if (sz_vol >= 0x10000) {
 8015816:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015818:	025b      	lsls	r3, r3, #9
		sys = 0x06;		/* FAT12/16 (large) */
 801581a:	9104      	str	r1, [sp, #16]
	} else if (sz_vol >= 0x10000) {
 801581c:	429a      	cmp	r2, r3
 801581e:	d206      	bcs.n	801582e <f_mkfs+0x496>
		sys = 0x01;		/* FAT12 */
 8015820:	2301      	movs	r3, #1
 8015822:	9304      	str	r3, [sp, #16]
	} else if (fsty == FS_FAT16) {
 8015824:	9b01      	ldr	r3, [sp, #4]
 8015826:	2b02      	cmp	r3, #2
 8015828:	d101      	bne.n	801582e <f_mkfs+0x496>
		sys = 0x04;		/* FAT16 */
 801582a:	3302      	adds	r3, #2
 801582c:	9304      	str	r3, [sp, #16]
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 801582e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015830:	2b00      	cmp	r3, #0
 8015832:	d145      	bne.n	80158c0 <f_mkfs+0x528>
			lba[0] = sz_vol; lba[1] = 0;
 8015834:	9b16      	ldr	r3, [sp, #88]	@ 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015836:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
 8015838:	9318      	str	r3, [sp, #96]	@ 0x60
 801583a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 801583c:	9802      	ldr	r0, [sp, #8]
 801583e:	aa17      	add	r2, sp, #92	@ 0x5c
			lba[0] = sz_vol; lba[1] = 0;
 8015840:	9319      	str	r3, [sp, #100]	@ 0x64
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015842:	f7fe fb67 	bl	8013f14 <disk_ioctl>
 8015846:	2800      	cmp	r0, #0
 8015848:	d000      	beq.n	801584c <f_mkfs+0x4b4>
 801584a:	e117      	b.n	8015a7c <f_mkfs+0x6e4>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 801584c:	2208      	movs	r2, #8
		sz_drv32 = (DWORD)sz_drv;
 801584e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8015850:	9201      	str	r2, [sp, #4]
		sz_drv32 = (DWORD)sz_drv;
 8015852:	9303      	str	r3, [sp, #12]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8015854:	9a03      	ldr	r2, [sp, #12]
 8015856:	4b8c      	ldr	r3, [pc, #560]	@ (8015a88 <f_mkfs+0x6f0>)
 8015858:	429a      	cmp	r2, r3
 801585a:	d914      	bls.n	8015886 <f_mkfs+0x4ee>
 801585c:	2680      	movs	r6, #128	@ 0x80
 801585e:	2505      	movs	r5, #5
 8015860:	00f6      	lsls	r6, r6, #3
 8015862:	9b01      	ldr	r3, [sp, #4]
 8015864:	3d01      	subs	r5, #1
 8015866:	005b      	lsls	r3, r3, #1
 8015868:	b2db      	uxtb	r3, r3
 801586a:	9301      	str	r3, [sp, #4]
 801586c:	2d00      	cmp	r5, #0
 801586e:	d005      	beq.n	801587c <f_mkfs+0x4e4>
 8015870:	0019      	movs	r1, r3
 8015872:	9803      	ldr	r0, [sp, #12]
 8015874:	f7ea fc78 	bl	8000168 <__udivsi3>
 8015878:	42b0      	cmp	r0, r6
 801587a:	d8f2      	bhi.n	8015862 <f_mkfs+0x4ca>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 801587c:	9b01      	ldr	r3, [sp, #4]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d101      	bne.n	8015886 <f_mkfs+0x4ee>
 8015882:	33ff      	adds	r3, #255	@ 0xff
 8015884:	9301      	str	r3, [sp, #4]
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8015886:	2280      	movs	r2, #128	@ 0x80
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8015888:	0025      	movs	r5, r4
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 801588a:	2100      	movs	r1, #0
 801588c:	0020      	movs	r0, r4
 801588e:	0152      	lsls	r2, r2, #5
 8015890:	f004 fe30 	bl	801a4f4 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015894:	9b03      	ldr	r3, [sp, #12]
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8015896:	35bf      	adds	r5, #191	@ 0xbf
 8015898:	35ff      	adds	r5, #255	@ 0xff
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 801589a:	2b01      	cmp	r3, #1
 801589c:	d81e      	bhi.n	80158dc <f_mkfs+0x544>
	*ptr++ = (BYTE)val; val >>= 8;
 801589e:	23ff      	movs	r3, #255	@ 0xff
 80158a0:	2255      	movs	r2, #85	@ 0x55
 80158a2:	005b      	lsls	r3, r3, #1
 80158a4:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 80158a6:	4a76      	ldr	r2, [pc, #472]	@ (8015a80 <f_mkfs+0x6e8>)
 80158a8:	3b55      	subs	r3, #85	@ 0x55
 80158aa:	3bff      	subs	r3, #255	@ 0xff
 80158ac:	54a3      	strb	r3, [r4, r2]
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80158ae:	0021      	movs	r1, r4
 80158b0:	2200      	movs	r2, #0
 80158b2:	9802      	ldr	r0, [sp, #8]
 80158b4:	3ba9      	subs	r3, #169	@ 0xa9
 80158b6:	f7fe fb08 	bl	8013eca <disk_write>
 80158ba:	2800      	cmp	r0, #0
 80158bc:	d000      	beq.n	80158c0 <f_mkfs+0x528>
 80158be:	e0dd      	b.n	8015a7c <f_mkfs+0x6e4>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80158c0:	2200      	movs	r2, #0
 80158c2:	9802      	ldr	r0, [sp, #8]
 80158c4:	0011      	movs	r1, r2
 80158c6:	f7fe fb25 	bl	8013f14 <disk_ioctl>
 80158ca:	1e43      	subs	r3, r0, #1
 80158cc:	4198      	sbcs	r0, r3
 80158ce:	b2c0      	uxtb	r0, r0
 80158d0:	e5db      	b.n	801548a <f_mkfs+0xf2>
				st_32(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 80158d2:	0020      	movs	r0, r4
 80158d4:	9908      	ldr	r1, [sp, #32]
 80158d6:	f7fe fb40 	bl	8013f5a <st_32>
 80158da:	e757      	b.n	801578c <f_mkfs+0x3f4>
 80158dc:	ab18      	add	r3, sp, #96	@ 0x60
 80158de:	9305      	str	r3, [sp, #20]
 80158e0:	0023      	movs	r3, r4
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80158e2:	2601      	movs	r6, #1
 80158e4:	33ff      	adds	r3, #255	@ 0xff
 80158e6:	33ff      	adds	r3, #255	@ 0xff
 80158e8:	9306      	str	r3, [sp, #24]
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 80158ea:	9b05      	ldr	r3, [sp, #20]
 80158ec:	681f      	ldr	r7, [r3, #0]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80158ee:	2f64      	cmp	r7, #100	@ 0x64
 80158f0:	d805      	bhi.n	80158fe <f_mkfs+0x566>
 80158f2:	d03e      	beq.n	8015972 <f_mkfs+0x5da>
 80158f4:	2164      	movs	r1, #100	@ 0x64
 80158f6:	9803      	ldr	r0, [sp, #12]
 80158f8:	f7ea fc36 	bl	8000168 <__udivsi3>
 80158fc:	4347      	muls	r7, r0
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80158fe:	9a03      	ldr	r2, [sp, #12]
 8015900:	19bb      	adds	r3, r7, r6
 8015902:	429a      	cmp	r2, r3
 8015904:	d301      	bcc.n	801590a <f_mkfs+0x572>
 8015906:	42b3      	cmp	r3, r6
 8015908:	d235      	bcs.n	8015976 <f_mkfs+0x5de>
 801590a:	9b03      	ldr	r3, [sp, #12]
 801590c:	1b9f      	subs	r7, r3, r6
			st_32(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 801590e:	0028      	movs	r0, r5
 8015910:	0031      	movs	r1, r6
 8015912:	3008      	adds	r0, #8
 8015914:	f7fe fb21 	bl	8013f5a <st_32>
			st_32(pte + PTE_SizLba, sz_part32);		/* Size of partition [sector] */
 8015918:	0028      	movs	r0, r5
 801591a:	0039      	movs	r1, r7
 801591c:	300c      	adds	r0, #12
 801591e:	f7fe fb1c 	bl	8013f5a <st_32>
			pte[PTE_System] = sys;					/* System type */
 8015922:	9b04      	ldr	r3, [sp, #16]
 8015924:	0030      	movs	r0, r6
 8015926:	712b      	strb	r3, [r5, #4]
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8015928:	9901      	ldr	r1, [sp, #4]
 801592a:	f7ea fca3 	bl	8000274 <__aeabi_uidivmod>
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 801592e:	223f      	movs	r2, #63	@ 0x3f
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 8015930:	7069      	strb	r1, [r5, #1]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015932:	2101      	movs	r1, #1
 8015934:	0883      	lsrs	r3, r0, #2
 8015936:	4393      	bics	r3, r2
 8015938:	430b      	orrs	r3, r1
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 801593a:	19f6      	adds	r6, r6, r7
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 801593c:	70ab      	strb	r3, [r5, #2]
			pte[PTE_StCyl] = (BYTE)cy;
 801593e:	70e8      	strb	r0, [r5, #3]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8015940:	9901      	ldr	r1, [sp, #4]
 8015942:	1e70      	subs	r0, r6, #1
 8015944:	f7ea fc96 	bl	8000274 <__aeabi_uidivmod>
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015948:	223f      	movs	r2, #63	@ 0x3f
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 801594a:	7169      	strb	r1, [r5, #5]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 801594c:	2101      	movs	r1, #1
 801594e:	0883      	lsrs	r3, r0, #2
 8015950:	4393      	bics	r3, r2
 8015952:	430b      	orrs	r3, r1
 8015954:	71ab      	strb	r3, [r5, #6]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8015956:	9b06      	ldr	r3, [sp, #24]
			pte[PTE_EdCyl] = (BYTE)cy;
 8015958:	71e8      	strb	r0, [r5, #7]
			pte += SZ_PTE;		/* Next entry */
 801595a:	3510      	adds	r5, #16
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 801595c:	42ab      	cmp	r3, r5
 801595e:	d09e      	beq.n	801589e <f_mkfs+0x506>
 8015960:	2e00      	cmp	r6, #0
 8015962:	d09c      	beq.n	801589e <f_mkfs+0x506>
 8015964:	9b05      	ldr	r3, [sp, #20]
 8015966:	3304      	adds	r3, #4
 8015968:	9305      	str	r3, [sp, #20]
 801596a:	9b03      	ldr	r3, [sp, #12]
 801596c:	42b3      	cmp	r3, r6
 801596e:	d8bc      	bhi.n	80158ea <f_mkfs+0x552>
 8015970:	e795      	b.n	801589e <f_mkfs+0x506>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8015972:	9f03      	ldr	r7, [sp, #12]
 8015974:	e7c3      	b.n	80158fe <f_mkfs+0x566>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8015976:	2f00      	cmp	r7, #0
 8015978:	d1c9      	bne.n	801590e <f_mkfs+0x576>
 801597a:	e790      	b.n	801589e <f_mkfs+0x506>
					if ((fsopt & FM_FAT32)) {
 801597c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
			pau = sz_au;
 801597e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
					if ((fsopt & FM_FAT32)) {
 8015980:	2b00      	cmp	r3, #0
 8015982:	d000      	beq.n	8015986 <f_mkfs+0x5ee>
 8015984:	e5bf      	b.n	8015506 <f_mkfs+0x16e>
 8015986:	e57f      	b.n	8015488 <f_mkfs+0xf0>
 8015988:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801598a:	2b00      	cmp	r3, #0
 801598c:	d000      	beq.n	8015990 <f_mkfs+0x5f8>
 801598e:	e5a7      	b.n	80154e0 <f_mkfs+0x148>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8015990:	002f      	movs	r7, r5
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015992:	2d80      	cmp	r5, #128	@ 0x80
 8015994:	d800      	bhi.n	8015998 <f_mkfs+0x600>
 8015996:	e63e      	b.n	8015616 <f_mkfs+0x27e>
 8015998:	e576      	b.n	8015488 <f_mkfs+0xf0>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 801599a:	4b3c      	ldr	r3, [pc, #240]	@ (8015a8c <f_mkfs+0x6f4>)
 801599c:	4298      	cmp	r0, r3
 801599e:	d900      	bls.n	80159a2 <f_mkfs+0x60a>
 80159a0:	e572      	b.n	8015488 <f_mkfs+0xf0>
 80159a2:	2301      	movs	r3, #1
 80159a4:	9301      	str	r3, [sp, #4]
		memset(buf, 0, ss);
 80159a6:	2280      	movs	r2, #128	@ 0x80
 80159a8:	2100      	movs	r1, #0
 80159aa:	0152      	lsls	r2, r2, #5
 80159ac:	0020      	movs	r0, r4
 80159ae:	f004 fda1 	bl	801a4f4 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 80159b2:	220b      	movs	r2, #11
 80159b4:	0020      	movs	r0, r4
 80159b6:	4936      	ldr	r1, [pc, #216]	@ (8015a90 <f_mkfs+0x6f8>)
 80159b8:	f004 fe66 	bl	801a688 <memcpy>
	*ptr++ = (BYTE)val;
 80159bc:	2310      	movs	r3, #16
 80159be:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 80159c0:	9b07      	ldr	r3, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80159c2:	73a5      	strb	r5, [r4, #14]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 80159c4:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80159c6:	b2ad      	uxth	r5, r5
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 80159c8:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80159ca:	0a2d      	lsrs	r5, r5, #8
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80159cc:	7367      	strb	r7, [r4, #13]
	*ptr++ = (BYTE)val;
 80159ce:	73e5      	strb	r5, [r4, #15]
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 80159d0:	2b03      	cmp	r3, #3
 80159d2:	d101      	bne.n	80159d8 <f_mkfs+0x640>
 80159d4:	2300      	movs	r3, #0
 80159d6:	9308      	str	r3, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 80159d8:	9b08      	ldr	r3, [sp, #32]
		if (sz_vol < 0x10000) {
 80159da:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80159dc:	7463      	strb	r3, [r4, #17]
 80159de:	466b      	mov	r3, sp
 80159e0:	8c1b      	ldrh	r3, [r3, #32]
 80159e2:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80159e4:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 80159e6:	2380      	movs	r3, #128	@ 0x80
 80159e8:	025b      	lsls	r3, r3, #9
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d300      	bcc.n	80159f0 <f_mkfs+0x658>
 80159ee:	e634      	b.n	801565a <f_mkfs+0x2c2>
	*ptr++ = (BYTE)val; val >>= 8;
 80159f0:	466b      	mov	r3, sp
 80159f2:	899b      	ldrh	r3, [r3, #12]
 80159f4:	74e2      	strb	r2, [r4, #19]
 80159f6:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80159f8:	7523      	strb	r3, [r4, #20]
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 80159fa:	9b03      	ldr	r3, [sp, #12]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 80159fc:	0020      	movs	r0, r4
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 80159fe:	469c      	mov	ip, r3
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015a00:	23f8      	movs	r3, #248	@ 0xf8
 8015a02:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8015a04:	3bb9      	subs	r3, #185	@ 0xb9
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015a06:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8015a08:	7623      	strb	r3, [r4, #24]
 8015a0a:	33c0      	adds	r3, #192	@ 0xc0
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015a0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8015a0e:	76a3      	strb	r3, [r4, #26]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015a10:	301c      	adds	r0, #28
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015a12:	4465      	add	r5, ip
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015a14:	f7fe faa1 	bl	8013f5a <st_32>
		if (fsty == FS_FAT32) {
 8015a18:	9b01      	ldr	r3, [sp, #4]
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8015a1a:	0029      	movs	r1, r5
 8015a1c:	0020      	movs	r0, r4
		if (fsty == FS_FAT32) {
 8015a1e:	2b03      	cmp	r3, #3
 8015a20:	d000      	beq.n	8015a24 <f_mkfs+0x68c>
 8015a22:	e620      	b.n	8015666 <f_mkfs+0x2ce>
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8015a24:	3043      	adds	r0, #67	@ 0x43
 8015a26:	f7fe fa98 	bl	8013f5a <st_32>
			st_32(buf + BPB_FATSz32, sz_fat);			/* FAT size [sector] */
 8015a2a:	0020      	movs	r0, r4
 8015a2c:	9906      	ldr	r1, [sp, #24]
 8015a2e:	3024      	adds	r0, #36	@ 0x24
 8015a30:	f7fe fa93 	bl	8013f5a <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8015a34:	0023      	movs	r3, r4
 8015a36:	2202      	movs	r2, #2
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015a38:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8015a3a:	332c      	adds	r3, #44	@ 0x2c
 8015a3c:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015a3e:	3a01      	subs	r2, #1
 8015a40:	711a      	strb	r2, [r3, #4]
 8015a42:	3205      	adds	r2, #5
 8015a44:	719a      	strb	r2, [r3, #6]
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015a46:	327a      	adds	r2, #122	@ 0x7a
 8015a48:	751a      	strb	r2, [r3, #20]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015a4a:	4912      	ldr	r1, [pc, #72]	@ (8015a94 <f_mkfs+0x6fc>)
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015a4c:	3a57      	subs	r2, #87	@ 0x57
 8015a4e:	759a      	strb	r2, [r3, #22]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015a50:	3047      	adds	r0, #71	@ 0x47
 8015a52:	3a16      	subs	r2, #22
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 8015a54:	f004 fe18 	bl	801a688 <memcpy>
	*ptr++ = (BYTE)val; val >>= 8;
 8015a58:	23ff      	movs	r3, #255	@ 0xff
 8015a5a:	2255      	movs	r2, #85	@ 0x55
	*ptr++ = (BYTE)val;
 8015a5c:	25aa      	movs	r5, #170	@ 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 8015a5e:	005b      	lsls	r3, r3, #1
 8015a60:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 8015a62:	4b07      	ldr	r3, [pc, #28]	@ (8015a80 <f_mkfs+0x6e8>)
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8015a64:	0021      	movs	r1, r4
	*ptr++ = (BYTE)val;
 8015a66:	54e5      	strb	r5, [r4, r3]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8015a68:	3bff      	subs	r3, #255	@ 0xff
 8015a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015a6c:	9802      	ldr	r0, [sp, #8]
 8015a6e:	3bff      	subs	r3, #255	@ 0xff
 8015a70:	f7fe fa2b 	bl	8013eca <disk_write>
 8015a74:	9003      	str	r0, [sp, #12]
 8015a76:	2800      	cmp	r0, #0
 8015a78:	d100      	bne.n	8015a7c <f_mkfs+0x6e4>
 8015a7a:	e61f      	b.n	80156bc <f_mkfs+0x324>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015a7c:	2001      	movs	r0, #1
 8015a7e:	e504      	b.n	801548a <f_mkfs+0xf2>
 8015a80:	000001ff 	.word	0x000001ff
 8015a84:	00fffff8 	.word	0x00fffff8
 8015a88:	00002007 	.word	0x00002007
 8015a8c:	00000ff5 	.word	0x00000ff5
 8015a90:	0801ffde 	.word	0x0801ffde
 8015a94:	0801ffea 	.word	0x0801ffea

08015a98 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8015a98:	b530      	push	{r4, r5, lr}
 8015a9a:	000d      	movs	r5, r1
 8015a9c:	b095      	sub	sp, #84	@ 0x54
 8015a9e:	0004      	movs	r4, r0
	memset(pb, 0, sizeof (putbuff));
 8015aa0:	2248      	movs	r2, #72	@ 0x48
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	a802      	add	r0, sp, #8
 8015aa6:	f004 fd25 	bl	801a4f4 <memset>
	pb->fp = fp;
 8015aaa:	9501      	str	r5, [sp, #4]
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015aac:	7821      	ldrb	r1, [r4, #0]
 8015aae:	2900      	cmp	r1, #0
 8015ab0:	d104      	bne.n	8015abc <f_puts+0x24>
	return putc_flush(&pb);
 8015ab2:	a801      	add	r0, sp, #4
 8015ab4:	f7ff fab5 	bl	8015022 <putc_flush>
}
 8015ab8:	b015      	add	sp, #84	@ 0x54
 8015aba:	bd30      	pop	{r4, r5, pc}
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015abc:	a801      	add	r0, sp, #4
 8015abe:	3401      	adds	r4, #1
 8015ac0:	f7ff fa94 	bl	8014fec <putc_bfd>
 8015ac4:	e7f2      	b.n	8015aac <f_puts+0x14>
	...

08015ac8 <_ux_device_stack_alternate_setting_get>:
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015ac8:	4b11      	ldr	r3, [pc, #68]	@ (8015b10 <_ux_device_stack_alternate_setting_get+0x48>)
{
 8015aca:	0001      	movs	r1, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015acc:	681b      	ldr	r3, [r3, #0]
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8015ace:	20ff      	movs	r0, #255	@ 0xff
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
{
 8015ad2:	b510      	push	{r4, lr}
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015ad4:	2a03      	cmp	r2, #3
 8015ad6:	d117      	bne.n	8015b08 <_ux_device_stack_alternate_setting_get+0x40>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015ad8:	001a      	movs	r2, r3
 8015ada:	32b4      	adds	r2, #180	@ 0xb4
 8015adc:	6812      	ldr	r2, [r2, #0]
        while (interface_ptr != UX_NULL)
 8015ade:	2a00      	cmp	r2, #0
 8015ae0:	d101      	bne.n	8015ae6 <_ux_device_stack_alternate_setting_get+0x1e>
    return(UX_ERROR);
 8015ae2:	20ff      	movs	r0, #255	@ 0xff
 8015ae4:	e010      	b.n	8015b08 <_ux_device_stack_alternate_setting_get+0x40>
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8015ae6:	7b90      	ldrb	r0, [r2, #14]
 8015ae8:	4288      	cmp	r0, r1
 8015aea:	d10e      	bne.n	8015b0a <_ux_device_stack_alternate_setting_get+0x42>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015aec:	6e99      	ldr	r1, [r3, #104]	@ 0x68
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8015aee:	7bd2      	ldrb	r2, [r2, #15]
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015af0:	2003      	movs	r0, #3
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015af2:	700a      	strb	r2, [r1, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8015af4:	2101      	movs	r1, #1
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015af6:	001a      	movs	r2, r3
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8015af8:	6719      	str	r1, [r3, #112]	@ 0x70
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015afa:	3208      	adds	r2, #8
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015afc:	335c      	adds	r3, #92	@ 0x5c
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015afe:	67d0      	str	r0, [r2, #124]	@ 0x7c
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015b00:	0018      	movs	r0, r3
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8015b02:	000a      	movs	r2, r1
 8015b04:	f000 fefe 	bl	8016904 <_ux_device_stack_transfer_request>
}
 8015b08:	bd10      	pop	{r4, pc}
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015b0a:	6992      	ldr	r2, [r2, #24]
 8015b0c:	e7e7      	b.n	8015ade <_ux_device_stack_alternate_setting_get+0x16>
 8015b0e:	46c0      	nop			@ (mov r8, r8)
 8015b10:	200030e0 	.word	0x200030e0

08015b14 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8015b14:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015b16:	4b7d      	ldr	r3, [pc, #500]	@ (8015d0c <_ux_device_stack_alternate_setting_set+0x1f8>)
{
 8015b18:	b097      	sub	sp, #92	@ 0x5c
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015b1a:	681f      	ldr	r7, [r3, #0]
{
 8015b1c:	9002      	str	r0, [sp, #8]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        return(UX_FUNCTION_NOT_SUPPORTED);
 8015b20:	2054      	movs	r0, #84	@ 0x54
{
 8015b22:	9103      	str	r1, [sp, #12]
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015b24:	2b03      	cmp	r3, #3
 8015b26:	d10a      	bne.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8015b28:	003b      	movs	r3, r7
 8015b2a:	33b4      	adds	r3, #180	@ 0xb4
 8015b2c:	681c      	ldr	r4, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 8015b2e:	2c00      	cmp	r4, #0
 8015b30:	d107      	bne.n	8015b42 <_ux_device_stack_alternate_setting_set+0x2e>
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8015b32:	2002      	movs	r0, #2
 8015b34:	2252      	movs	r2, #82	@ 0x52
 8015b36:	2107      	movs	r1, #7
 8015b38:	f000 ff4c 	bl	80169d4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8015b3c:	2052      	movs	r0, #82	@ 0x52
    }

    /* Return error completion.  */
    return(UX_ERROR);
#endif
}
 8015b3e:	b017      	add	sp, #92	@ 0x5c
 8015b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8015b42:	7ba3      	ldrb	r3, [r4, #14]
 8015b44:	9a02      	ldr	r2, [sp, #8]
 8015b46:	4293      	cmp	r3, r2
 8015b48:	d001      	beq.n	8015b4e <_ux_device_stack_alternate_setting_set+0x3a>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015b4a:	69a4      	ldr	r4, [r4, #24]
 8015b4c:	e7ef      	b.n	8015b2e <_ux_device_stack_alternate_setting_set+0x1a>
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015b4e:	7be3      	ldrb	r3, [r4, #15]
 8015b50:	9a03      	ldr	r2, [sp, #12]
        return(UX_SUCCESS);       
 8015b52:	2000      	movs	r0, #0
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015b54:	4293      	cmp	r3, r2
 8015b56:	d0f2      	beq.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015b58:	003b      	movs	r3, r7
 8015b5a:	33cc      	adds	r3, #204	@ 0xcc
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015b5c:	cb60      	ldmia	r3!, {r5, r6}
    while (device_framework_length != 0)
 8015b5e:	2e00      	cmp	r6, #0
 8015b60:	d019      	beq.n	8015b96 <_ux_device_stack_alternate_setting_set+0x82>
        descriptor_length =  (ULONG) *device_framework;
 8015b62:	782b      	ldrb	r3, [r5, #0]
 8015b64:	9301      	str	r3, [sp, #4]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8015b66:	786b      	ldrb	r3, [r5, #1]
 8015b68:	2b02      	cmp	r3, #2
 8015b6a:	d000      	beq.n	8015b6e <_ux_device_stack_alternate_setting_set+0x5a>
 8015b6c:	e0ca      	b.n	8015d04 <_ux_device_stack_alternate_setting_set+0x1f0>
            _ux_utility_descriptor_parse(device_framework,
 8015b6e:	2208      	movs	r2, #8
 8015b70:	ab05      	add	r3, sp, #20
 8015b72:	0028      	movs	r0, r5
 8015b74:	4966      	ldr	r1, [pc, #408]	@ (8015d10 <_ux_device_stack_alternate_setting_set+0x1fc>)
 8015b76:	f000 ff94 	bl	8016aa2 <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 8015b7a:	ab04      	add	r3, sp, #16
 8015b7c:	7a5a      	ldrb	r2, [r3, #9]
 8015b7e:	003b      	movs	r3, r7
 8015b80:	33a4      	adds	r3, #164	@ 0xa4
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d000      	beq.n	8015b8a <_ux_device_stack_alternate_setting_set+0x76>
 8015b88:	e0bc      	b.n	8015d04 <_ux_device_stack_alternate_setting_set+0x1f0>
                device_framework_length = configuration_descriptor.wTotalLength;
 8015b8a:	ab04      	add	r3, sp, #16
 8015b8c:	88db      	ldrh	r3, [r3, #6]
 8015b8e:	9301      	str	r3, [sp, #4]
                while (device_framework_length != 0)
 8015b90:	9b01      	ldr	r3, [sp, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d101      	bne.n	8015b9a <_ux_device_stack_alternate_setting_set+0x86>
    return(UX_ERROR);
 8015b96:	20ff      	movs	r0, #255	@ 0xff
 8015b98:	e7d1      	b.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015b9a:	786b      	ldrb	r3, [r5, #1]
                    descriptor_length =  (ULONG) *device_framework;
 8015b9c:	782e      	ldrb	r6, [r5, #0]
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015b9e:	2b04      	cmp	r3, #4
 8015ba0:	d000      	beq.n	8015ba4 <_ux_device_stack_alternate_setting_set+0x90>
 8015ba2:	e0aa      	b.n	8015cfa <_ux_device_stack_alternate_setting_set+0x1e6>
                        _ux_utility_descriptor_parse(device_framework,
 8015ba4:	2209      	movs	r2, #9
 8015ba6:	ab08      	add	r3, sp, #32
 8015ba8:	0028      	movs	r0, r5
 8015baa:	495a      	ldr	r1, [pc, #360]	@ (8015d14 <_ux_device_stack_alternate_setting_set+0x200>)
 8015bac:	f000 ff79 	bl	8016aa2 <_ux_utility_descriptor_parse>
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8015bb0:	ab04      	add	r3, sp, #16
 8015bb2:	7c9b      	ldrb	r3, [r3, #18]
 8015bb4:	9a02      	ldr	r2, [sp, #8]
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	d000      	beq.n	8015bbc <_ux_device_stack_alternate_setting_set+0xa8>
 8015bba:	e09e      	b.n	8015cfa <_ux_device_stack_alternate_setting_set+0x1e6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015bbc:	ab04      	add	r3, sp, #16
 8015bbe:	7cdb      	ldrb	r3, [r3, #19]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8015bc0:	9a03      	ldr	r2, [sp, #12]
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	d000      	beq.n	8015bc8 <_ux_device_stack_alternate_setting_set+0xb4>
 8015bc6:	e098      	b.n	8015cfa <_ux_device_stack_alternate_setting_set+0x1e6>
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8015bc8:	69e6      	ldr	r6, [r4, #28]
                            while (endpoint != UX_NULL)
 8015bca:	2e00      	cmp	r6, #0
 8015bcc:	d125      	bne.n	8015c1a <_ux_device_stack_alternate_setting_set+0x106>
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015bce:	003b      	movs	r3, r7
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 8015bd0:	61e6      	str	r6, [r4, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015bd2:	3324      	adds	r3, #36	@ 0x24
                            device_framework_length -=  (ULONG) *device_framework;
 8015bd4:	9a01      	ldr	r2, [sp, #4]
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015bd6:	9303      	str	r3, [sp, #12]
                            device_framework_length -=  (ULONG) *device_framework;
 8015bd8:	782b      	ldrb	r3, [r5, #0]
 8015bda:	1ad6      	subs	r6, r2, r3
                            device_framework +=  (ULONG) *device_framework;
 8015bdc:	18eb      	adds	r3, r5, r3
                                device_framework +=  descriptor_length;
 8015bde:	9301      	str	r3, [sp, #4]
                            while (device_framework_length != 0)
 8015be0:	2e00      	cmp	r6, #0
 8015be2:	d12c      	bne.n	8015c3e <_ux_device_stack_alternate_setting_set+0x12a>
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8015be4:	220c      	movs	r2, #12
 8015be6:	a908      	add	r1, sp, #32
 8015be8:	18a0      	adds	r0, r4, r2
 8015bea:	f001 f8a9 	bl	8016d40 <_ux_utility_memory_copy>
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8015bee:	4b47      	ldr	r3, [pc, #284]	@ (8015d0c <_ux_device_stack_alternate_setting_set+0x1f8>)
                                return (UX_NO_CLASS_MATCH);
 8015bf0:	2057      	movs	r0, #87	@ 0x57
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	7ba3      	ldrb	r3, [r4, #14]
 8015bf6:	3340      	adds	r3, #64	@ 0x40
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	18d3      	adds	r3, r2, r3
 8015bfc:	685b      	ldr	r3, [r3, #4]
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d09d      	beq.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
 8015c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015c04:	2a00      	cmp	r2, #0
 8015c06:	d09a      	beq.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8015c08:	2206      	movs	r2, #6
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8015c0a:	9313      	str	r3, [sp, #76]	@ 0x4c
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8015c0c:	661c      	str	r4, [r3, #96]	@ 0x60
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8015c0e:	920b      	str	r2, [sp, #44]	@ 0x2c
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8015c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 8015c12:	940d      	str	r4, [sp, #52]	@ 0x34
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8015c14:	a80b      	add	r0, sp, #44	@ 0x2c
 8015c16:	4798      	blx	r3
                            return(status); 
 8015c18:	e791      	b.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8015c1a:	2126      	movs	r1, #38	@ 0x26
 8015c1c:	0030      	movs	r0, r6
 8015c1e:	f000 fe6b 	bl	80168f8 <_ux_device_stack_transfer_all_request_abort>
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8015c22:	0032      	movs	r2, r6
 8015c24:	69bb      	ldr	r3, [r7, #24]
 8015c26:	210f      	movs	r1, #15
 8015c28:	0038      	movs	r0, r7
 8015c2a:	4798      	blx	r3
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8015c2c:	2300      	movs	r3, #0
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8015c2e:	6972      	ldr	r2, [r6, #20]
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8015c30:	6033      	str	r3, [r6, #0]
                                endpoint -> ux_slave_endpoint_state =  0;
 8015c32:	6073      	str	r3, [r6, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8015c34:	6173      	str	r3, [r6, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8015c36:	61b3      	str	r3, [r6, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8015c38:	61f3      	str	r3, [r6, #28]
                                endpoint =  next_endpoint;
 8015c3a:	0016      	movs	r6, r2
 8015c3c:	e7c5      	b.n	8015bca <_ux_device_stack_alternate_setting_set+0xb6>
                                descriptor_length =  (ULONG) *device_framework;
 8015c3e:	9b01      	ldr	r3, [sp, #4]
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	9302      	str	r3, [sp, #8]
                                descriptor_type =  *(device_framework + 1);
 8015c44:	9b01      	ldr	r3, [sp, #4]
 8015c46:	785b      	ldrb	r3, [r3, #1]
                                switch(descriptor_type)
 8015c48:	2b04      	cmp	r3, #4
 8015c4a:	d003      	beq.n	8015c54 <_ux_device_stack_alternate_setting_set+0x140>
 8015c4c:	2b05      	cmp	r3, #5
 8015c4e:	d003      	beq.n	8015c58 <_ux_device_stack_alternate_setting_set+0x144>
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d145      	bne.n	8015ce0 <_ux_device_stack_alternate_setting_set+0x1cc>
 8015c54:	9e02      	ldr	r6, [sp, #8]
 8015c56:	e043      	b.n	8015ce0 <_ux_device_stack_alternate_setting_set+0x1cc>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 8015c58:	003b      	movs	r3, r7
 8015c5a:	33c0      	adds	r3, #192	@ 0xc0
 8015c5c:	681d      	ldr	r5, [r3, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8015c5e:	3304      	adds	r3, #4
 8015c60:	681b      	ldr	r3, [r3, #0]
                                    while (endpoints_pool_number != 0)
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d101      	bne.n	8015c6a <_ux_device_stack_alternate_setting_set+0x156>
                                        return(UX_MEMORY_INSUFFICIENT);
 8015c66:	2012      	movs	r0, #18
 8015c68:	e769      	b.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8015c6a:	682a      	ldr	r2, [r5, #0]
 8015c6c:	2a00      	cmp	r2, #0
 8015c6e:	d130      	bne.n	8015cd2 <_ux_device_stack_alternate_setting_set+0x1be>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 8015c70:	2301      	movs	r3, #1
 8015c72:	602b      	str	r3, [r5, #0]
                                    _ux_utility_descriptor_parse(device_framework,
 8015c74:	002b      	movs	r3, r5
 8015c76:	4928      	ldr	r1, [pc, #160]	@ (8015d18 <_ux_device_stack_alternate_setting_set+0x204>)
 8015c78:	330c      	adds	r3, #12
 8015c7a:	3206      	adds	r2, #6
 8015c7c:	9801      	ldr	r0, [sp, #4]
 8015c7e:	f000 ff10 	bl	8016aa2 <_ux_utility_descriptor_parse>
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015c82:	4a22      	ldr	r2, [pc, #136]	@ (8015d0c <_ux_device_stack_alternate_setting_set+0x1f8>)
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8015c84:	8a29      	ldrh	r1, [r5, #16]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015c86:	6812      	ldr	r2, [r2, #0]
                                    max_transfer_length =
 8015c88:	054b      	lsls	r3, r1, #21
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015c8a:	32fc      	adds	r2, #252	@ 0xfc
 8015c8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
                                    max_transfer_length =
 8015c8e:	0d5b      	lsrs	r3, r3, #21
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8015c90:	2a02      	cmp	r2, #2
 8015c92:	d10c      	bne.n	8015cae <_ux_device_stack_alternate_setting_set+0x19a>
 8015c94:	2001      	movs	r0, #1
 8015c96:	7bea      	ldrb	r2, [r5, #15]
 8015c98:	4202      	tst	r2, r0
 8015c9a:	d008      	beq.n	8015cae <_ux_device_stack_alternate_setting_set+0x19a>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8015c9c:	20c0      	movs	r0, #192	@ 0xc0
 8015c9e:	000a      	movs	r2, r1
 8015ca0:	0140      	lsls	r0, r0, #5
 8015ca2:	4002      	ands	r2, r0
                                        if (n_trans)
 8015ca4:	4201      	tst	r1, r0
 8015ca6:	d002      	beq.n	8015cae <_ux_device_stack_alternate_setting_set+0x19a>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8015ca8:	0ad2      	lsrs	r2, r2, #11
                                            n_trans ++;
 8015caa:	3201      	adds	r2, #1
                                            max_transfer_length *= n_trans;
 8015cac:	4353      	muls	r3, r2
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8015cae:	642b      	str	r3, [r5, #64]	@ 0x40
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	425b      	negs	r3, r3
 8015cb4:	656b      	str	r3, [r5, #84]	@ 0x54
                                    endpoint -> ux_slave_endpoint_device =  device;
 8015cb6:	9b03      	ldr	r3, [sp, #12]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015cb8:	002a      	movs	r2, r5
                                    endpoint -> ux_slave_endpoint_device =  device;
 8015cba:	61eb      	str	r3, [r5, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015cbc:	210e      	movs	r1, #14
 8015cbe:	0038      	movs	r0, r7
 8015cc0:	69bb      	ldr	r3, [r7, #24]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8015cc2:	62ad      	str	r5, [r5, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8015cc4:	61ac      	str	r4, [r5, #24]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015cc6:	4798      	blx	r3
                                    if (status != UX_SUCCESS)
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	d005      	beq.n	8015cd8 <_ux_device_stack_alternate_setting_set+0x1c4>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	602b      	str	r3, [r5, #0]
                                        return(status);
 8015cd0:	e735      	b.n	8015b3e <_ux_device_stack_alternate_setting_set+0x2a>
                                        endpoint++;
 8015cd2:	3568      	adds	r5, #104	@ 0x68
                                       endpoints_pool_number--; 
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	e7c4      	b.n	8015c62 <_ux_device_stack_alternate_setting_set+0x14e>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8015cd8:	69e3      	ldr	r3, [r4, #28]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d107      	bne.n	8015cee <_ux_device_stack_alternate_setting_set+0x1da>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8015cde:	61e5      	str	r5, [r4, #28]
                                device_framework +=  descriptor_length;
 8015ce0:	9a02      	ldr	r2, [sp, #8]
                                device_framework_length -=  descriptor_length;
 8015ce2:	9b02      	ldr	r3, [sp, #8]
                                device_framework +=  descriptor_length;
 8015ce4:	4694      	mov	ip, r2
                                device_framework_length -=  descriptor_length;
 8015ce6:	1af6      	subs	r6, r6, r3
                                device_framework +=  descriptor_length;
 8015ce8:	9b01      	ldr	r3, [sp, #4]
 8015cea:	4463      	add	r3, ip
 8015cec:	e777      	b.n	8015bde <_ux_device_stack_alternate_setting_set+0xca>
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8015cee:	001a      	movs	r2, r3
 8015cf0:	695b      	ldr	r3, [r3, #20]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d1fb      	bne.n	8015cee <_ux_device_stack_alternate_setting_set+0x1da>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8015cf6:	6155      	str	r5, [r2, #20]
 8015cf8:	e7f2      	b.n	8015ce0 <_ux_device_stack_alternate_setting_set+0x1cc>
                    device_framework_length -=  descriptor_length;
 8015cfa:	9b01      	ldr	r3, [sp, #4]
                    device_framework +=  descriptor_length;
 8015cfc:	19ad      	adds	r5, r5, r6
                    device_framework_length -=  descriptor_length;
 8015cfe:	1b9b      	subs	r3, r3, r6
 8015d00:	9301      	str	r3, [sp, #4]
                    device_framework +=  descriptor_length;
 8015d02:	e745      	b.n	8015b90 <_ux_device_stack_alternate_setting_set+0x7c>
        device_framework_length -=  descriptor_length;
 8015d04:	9b01      	ldr	r3, [sp, #4]
 8015d06:	1af6      	subs	r6, r6, r3
        device_framework +=  descriptor_length;
 8015d08:	18ed      	adds	r5, r5, r3
 8015d0a:	e728      	b.n	8015b5e <_ux_device_stack_alternate_setting_set+0x4a>
 8015d0c:	200030e0 	.word	0x200030e0
 8015d10:	20000243 	.word	0x20000243
 8015d14:	2000023a 	.word	0x2000023a
 8015d18:	20000259 	.word	0x20000259

08015d1c <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8015d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d1e:	001f      	movs	r7, r3

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8015d20:	2300      	movs	r3, #0
{
 8015d22:	b08f      	sub	sp, #60	@ 0x3c
 8015d24:	000e      	movs	r6, r1
 8015d26:	9201      	str	r2, [sp, #4]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8015d28:	a902      	add	r1, sp, #8
 8015d2a:	223f      	movs	r2, #63	@ 0x3f
{
 8015d2c:	0005      	movs	r5, r0
UINT                        class_name_length =  0;
 8015d2e:	9302      	str	r3, [sp, #8]
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8015d30:	f001 f851 	bl	8016dd6 <_ux_utility_string_length_check>
    if (status)
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d121      	bne.n	8015d7c <_ux_device_stack_class_register+0x60>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015d38:	4b13      	ldr	r3, [pc, #76]	@ (8015d88 <_ux_device_stack_class_register+0x6c>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	33fc      	adds	r3, #252	@ 0xfc

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015d3e:	cb18      	ldmia	r3, {r3, r4}
 8015d40:	4283      	cmp	r3, r0
 8015d42:	d101      	bne.n	8015d48 <_ux_device_stack_class_register+0x2c>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 8015d44:	2012      	movs	r0, #18
 8015d46:	e019      	b.n	8015d7c <_ux_device_stack_class_register+0x60>
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8015d48:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015d4a:	2a00      	cmp	r2, #0
 8015d4c:	d118      	bne.n	8015d80 <_ux_device_stack_class_register+0x64>
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8015d4e:	9a02      	ldr	r2, [sp, #8]
 8015d50:	0020      	movs	r0, r4
 8015d52:	0029      	movs	r1, r5
 8015d54:	3201      	adds	r2, #1
 8015d56:	f000 fff3 	bl	8016d40 <_ux_utility_memory_copy>
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8015d5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8015d5c:	6466      	str	r6, [r4, #68]	@ 0x44
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8015d5e:	6563      	str	r3, [r4, #84]	@ 0x54
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8015d60:	9b01      	ldr	r3, [sp, #4]
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8015d62:	65a7      	str	r7, [r4, #88]	@ 0x58
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8015d64:	65e3      	str	r3, [r4, #92]	@ 0x5c
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 8015d66:	2305      	movs	r3, #5
 8015d68:	9303      	str	r3, [sp, #12]
            command.ux_slave_class_command_parameter  =  parameter;
 8015d6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            status = class_entry_function(&command);
 8015d6c:	a803      	add	r0, sp, #12
            command.ux_slave_class_command_parameter  =  parameter;
 8015d6e:	930c      	str	r3, [sp, #48]	@ 0x30
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8015d70:	940b      	str	r4, [sp, #44]	@ 0x2c
            status = class_entry_function(&command);
 8015d72:	47b0      	blx	r6
            if (status != UX_SUCCESS)
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d101      	bne.n	8015d7c <_ux_device_stack_class_register+0x60>
            class_inst -> ux_slave_class_status = UX_USED;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8015d7c:	b00f      	add	sp, #60	@ 0x3c
 8015d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        class_inst ++;
 8015d80:	3464      	adds	r4, #100	@ 0x64
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015d82:	3001      	adds	r0, #1
 8015d84:	e7dc      	b.n	8015d40 <_ux_device_stack_class_register+0x24>
 8015d86:	46c0      	nop			@ (mov r8, r8)
 8015d88:	200030e0 	.word	0x200030e0

08015d8c <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8015d8c:	b570      	push	{r4, r5, r6, lr}
 8015d8e:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d90:	4b17      	ldr	r3, [pc, #92]	@ (8015df0 <_ux_device_stack_clear_feature+0x64>)

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8015d92:	002c      	movs	r4, r5
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d94:	6818      	ldr	r0, [r3, #0]
    switch (request_type & UX_REQUEST_TARGET)
 8015d96:	2303      	movs	r3, #3
 8015d98:	401c      	ands	r4, r3
 8015d9a:	421d      	tst	r5, r3
 8015d9c:	d007      	beq.n	8015dae <_ux_device_stack_clear_feature+0x22>
 8015d9e:	2c02      	cmp	r4, #2
 8015da0:	d010      	beq.n	8015dc4 <_ux_device_stack_clear_feature+0x38>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015da2:	0002      	movs	r2, r0

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015da4:	2114      	movs	r1, #20
 8015da6:	6983      	ldr	r3, [r0, #24]
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015da8:	323c      	adds	r2, #60	@ 0x3c
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015daa:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8015dac:	e008      	b.n	8015dc0 <_ux_device_stack_clear_feature+0x34>
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8015dae:	2901      	cmp	r1, #1
 8015db0:	d106      	bne.n	8015dc0 <_ux_device_stack_clear_feature+0x34>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8015db2:	0003      	movs	r3, r0
 8015db4:	33fc      	adds	r3, #252	@ 0xfc
 8015db6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
                return (UX_FUNCTION_NOT_SUPPORTED);
 8015db8:	2054      	movs	r0, #84	@ 0x54
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8015dba:	2a00      	cmp	r2, #0
 8015dbc:	d001      	beq.n	8015dc2 <_ux_device_stack_clear_feature+0x36>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8015dbe:	655c      	str	r4, [r3, #84]	@ 0x54
                    return(UX_SUCCESS);
 8015dc0:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 8015dc2:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015dc4:	0003      	movs	r3, r0
 8015dc6:	33b4      	adds	r3, #180	@ 0xb4
 8015dc8:	681b      	ldr	r3, [r3, #0]
        while (interface_ptr != UX_NULL)
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d0e9      	beq.n	8015da2 <_ux_device_stack_clear_feature+0x16>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8015dce:	69dc      	ldr	r4, [r3, #28]
            while (endpoint_target != UX_NULL)
 8015dd0:	2c00      	cmp	r4, #0
 8015dd2:	d101      	bne.n	8015dd8 <_ux_device_stack_clear_feature+0x4c>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015dd4:	699b      	ldr	r3, [r3, #24]
 8015dd6:	e7f8      	b.n	8015dca <_ux_device_stack_clear_feature+0x3e>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8015dd8:	7ba1      	ldrb	r1, [r4, #14]
 8015dda:	4291      	cmp	r1, r2
 8015ddc:	d106      	bne.n	8015dec <_ux_device_stack_clear_feature+0x60>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8015dde:	6983      	ldr	r3, [r0, #24]
 8015de0:	0022      	movs	r2, r4
 8015de2:	2110      	movs	r1, #16
 8015de4:	4798      	blx	r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8015de6:	2300      	movs	r3, #0
 8015de8:	6063      	str	r3, [r4, #4]
                    return(UX_SUCCESS);
 8015dea:	e7e9      	b.n	8015dc0 <_ux_device_stack_clear_feature+0x34>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8015dec:	6964      	ldr	r4, [r4, #20]
 8015dee:	e7ef      	b.n	8015dd0 <_ux_device_stack_clear_feature+0x44>
 8015df0:	200030e0 	.word	0x200030e0

08015df4 <_ux_device_stack_configuration_get>:
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015df4:	4b08      	ldr	r3, [pc, #32]	@ (8015e18 <_ux_device_stack_configuration_get+0x24>)
{
 8015df6:	b510      	push	{r4, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015df8:	6818      	ldr	r0, [r3, #0]
    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8015dfa:	0002      	movs	r2, r0
 8015dfc:	32a4      	adds	r2, #164	@ 0xa4
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015dfe:	6e83      	ldr	r3, [r0, #104]	@ 0x68
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8015e00:	6812      	ldr	r2, [r2, #0]
 8015e02:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015e04:	0003      	movs	r3, r0
 8015e06:	2203      	movs	r2, #3
 8015e08:	3308      	adds	r3, #8
 8015e0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8015e0c:	3a02      	subs	r2, #2
 8015e0e:	0011      	movs	r1, r2
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015e10:	305c      	adds	r0, #92	@ 0x5c
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8015e12:	f000 fd77 	bl	8016904 <_ux_device_stack_transfer_request>

    /* Return the function status.  */
    return(status);
}
 8015e16:	bd10      	pop	{r4, pc}
 8015e18:	200030e0 	.word	0x200030e0

08015e1c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8015e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e1e:	b09b      	sub	sp, #108	@ 0x6c
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8015e20:	220c      	movs	r2, #12
{
 8015e22:	9002      	str	r0, [sp, #8]
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8015e24:	2100      	movs	r1, #0
 8015e26:	a809      	add	r0, sp, #36	@ 0x24
 8015e28:	f004 fb64 	bl	801a4f4 <memset>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015e2c:	4b75      	ldr	r3, [pc, #468]	@ (8016004 <_ux_device_stack_configuration_set+0x1e8>)
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8015e2e:	9a02      	ldr	r2, [sp, #8]
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015e30:	681f      	ldr	r7, [r3, #0]
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8015e32:	003b      	movs	r3, r7
 8015e34:	33a4      	adds	r3, #164	@ 0xa4
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	4293      	cmp	r3, r2
 8015e3a:	d059      	beq.n	8015ef0 <_ux_device_stack_configuration_set+0xd4>
        return(UX_SUCCESS);

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8015e3c:	003b      	movs	r3, r7
 8015e3e:	33cc      	adds	r3, #204	@ 0xcc
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	9301      	str	r3, [sp, #4]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015e44:	003b      	movs	r3, r7
 8015e46:	33d0      	adds	r3, #208	@ 0xd0
 8015e48:	681c      	ldr	r4, [r3, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8015e4a:	2c00      	cmp	r4, #0
 8015e4c:	d105      	bne.n	8015e5a <_ux_device_stack_configuration_set+0x3e>
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8015e4e:	9b02      	ldr	r3, [sp, #8]
        return(UX_ERROR);
 8015e50:	20ff      	movs	r0, #255	@ 0xff
    if (device_framework_length == 0 && configuration_value != 0)
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d016      	beq.n	8015e84 <_ux_device_stack_configuration_set+0x68>
    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);

    /* Configuration mounted. */
    return(UX_SUCCESS);
}
 8015e56:	b01b      	add	sp, #108	@ 0x6c
 8015e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        descriptor_length =  (ULONG) *device_framework;
 8015e5a:	9b01      	ldr	r3, [sp, #4]
 8015e5c:	781e      	ldrb	r6, [r3, #0]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8015e5e:	785b      	ldrb	r3, [r3, #1]
 8015e60:	2b02      	cmp	r3, #2
 8015e62:	d004      	beq.n	8015e6e <_ux_device_stack_configuration_set+0x52>
        device_framework += descriptor_length;
 8015e64:	9b01      	ldr	r3, [sp, #4]
        device_framework_length -= descriptor_length;
 8015e66:	1ba4      	subs	r4, r4, r6
        device_framework += descriptor_length;
 8015e68:	199b      	adds	r3, r3, r6
 8015e6a:	9301      	str	r3, [sp, #4]
 8015e6c:	e7ed      	b.n	8015e4a <_ux_device_stack_configuration_set+0x2e>
            _ux_utility_descriptor_parse(device_framework,
 8015e6e:	ad09      	add	r5, sp, #36	@ 0x24
 8015e70:	002b      	movs	r3, r5
 8015e72:	2208      	movs	r2, #8
 8015e74:	4964      	ldr	r1, [pc, #400]	@ (8016008 <_ux_device_stack_configuration_set+0x1ec>)
 8015e76:	9801      	ldr	r0, [sp, #4]
 8015e78:	f000 fe13 	bl	8016aa2 <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8015e7c:	796b      	ldrb	r3, [r5, #5]
 8015e7e:	9a02      	ldr	r2, [sp, #8]
 8015e80:	4293      	cmp	r3, r2
 8015e82:	d1ef      	bne.n	8015e64 <_ux_device_stack_configuration_set+0x48>
    if (device -> ux_slave_device_configuration_selected)
 8015e84:	003d      	movs	r5, r7
 8015e86:	35a4      	adds	r5, #164	@ 0xa4
 8015e88:	682b      	ldr	r3, [r5, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d132      	bne.n	8015ef4 <_ux_device_stack_configuration_set+0xd8>
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8015e8e:	2301      	movs	r3, #1
    device -> ux_slave_device_configuration_selected =  0;
 8015e90:	2400      	movs	r4, #0
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8015e92:	2201      	movs	r2, #1
    device -> ux_slave_device_configuration_selected =  0;
 8015e94:	602c      	str	r4, [r5, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8015e96:	2113      	movs	r1, #19
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8015e98:	627b      	str	r3, [r7, #36]	@ 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8015e9a:	0038      	movs	r0, r7
 8015e9c:	69bb      	ldr	r3, [r7, #24]
 8015e9e:	4798      	blx	r3
    if (configuration_value == 0)
 8015ea0:	9b02      	ldr	r3, [sp, #8]
 8015ea2:	42a3      	cmp	r3, r4
 8015ea4:	d024      	beq.n	8015ef0 <_ux_device_stack_configuration_set+0xd4>
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8015ea6:	9b02      	ldr	r3, [sp, #8]
    _ux_utility_descriptor_parse(device_framework,
 8015ea8:	2208      	movs	r2, #8
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8015eaa:	602b      	str	r3, [r5, #0]
    _ux_utility_descriptor_parse(device_framework,
 8015eac:	003b      	movs	r3, r7
 8015eae:	4956      	ldr	r1, [pc, #344]	@ (8016008 <_ux_device_stack_configuration_set+0x1ec>)
 8015eb0:	33a8      	adds	r3, #168	@ 0xa8
 8015eb2:	9801      	ldr	r0, [sp, #4]
 8015eb4:	f000 fdf5 	bl	8016aa2 <_ux_utility_descriptor_parse>
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8015eb8:	ab08      	add	r3, sp, #32
 8015eba:	7adb      	ldrb	r3, [r3, #11]
 8015ebc:	4951      	ldr	r1, [pc, #324]	@ (8016004 <_ux_device_stack_configuration_set+0x1e8>)
 8015ebe:	065a      	lsls	r2, r3, #25
 8015ec0:	6809      	ldr	r1, [r1, #0]
 8015ec2:	0fd2      	lsrs	r2, r2, #31
 8015ec4:	3201      	adds	r2, #1
 8015ec6:	31fc      	adds	r1, #252	@ 0xfc
 8015ec8:	64ca      	str	r2, [r1, #76]	@ 0x4c
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8015eca:	2201      	movs	r2, #1
    iad_flag =  UX_FALSE;
 8015ecc:	0025      	movs	r5, r4
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8015ece:	115b      	asrs	r3, r3, #5
 8015ed0:	4013      	ands	r3, r2
 8015ed2:	650b      	str	r3, [r1, #80]	@ 0x50
    device_framework_length =  configuration_descriptor.wTotalLength;
 8015ed4:	ab08      	add	r3, sp, #32
 8015ed6:	88db      	ldrh	r3, [r3, #6]
ULONG                           iad_first_interface =  0;
 8015ed8:	9406      	str	r4, [sp, #24]
    device_framework_length =  configuration_descriptor.wTotalLength;
 8015eda:	9303      	str	r3, [sp, #12]
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8015edc:	9404      	str	r4, [sp, #16]
    while (device_framework_length != 0)
 8015ede:	9b03      	ldr	r3, [sp, #12]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d11d      	bne.n	8015f20 <_ux_device_stack_configuration_set+0x104>
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8015ee4:	2203      	movs	r2, #3
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8015ee6:	2113      	movs	r1, #19
 8015ee8:	0038      	movs	r0, r7
 8015eea:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8015eec:	627a      	str	r2, [r7, #36]	@ 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8015eee:	4798      	blx	r3
        return(UX_SUCCESS);
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	e7b0      	b.n	8015e56 <_ux_device_stack_configuration_set+0x3a>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015ef4:	003b      	movs	r3, r7
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8015ef6:	2603      	movs	r6, #3
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015ef8:	33b4      	adds	r3, #180	@ 0xb4
 8015efa:	681c      	ldr	r4, [r3, #0]
        while (interface_ptr != UX_NULL)
 8015efc:	2c00      	cmp	r4, #0
 8015efe:	d0c6      	beq.n	8015e8e <_ux_device_stack_configuration_set+0x72>
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8015f00:	6863      	ldr	r3, [r4, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8015f02:	960f      	str	r6, [sp, #60]	@ 0x3c
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8015f04:	9411      	str	r4, [sp, #68]	@ 0x44
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8015f06:	9317      	str	r3, [sp, #92]	@ 0x5c
            if (class_inst != UX_NULL)
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d002      	beq.n	8015f12 <_ux_device_stack_configuration_set+0xf6>
                class_inst -> ux_slave_class_entry_function(&class_command);
 8015f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f0e:	a80f      	add	r0, sp, #60	@ 0x3c
 8015f10:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8015f12:	69a3      	ldr	r3, [r4, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 8015f14:	0020      	movs	r0, r4
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8015f16:	9303      	str	r3, [sp, #12]
            _ux_device_stack_interface_delete(interface_ptr);
 8015f18:	f000 fb98 	bl	801664c <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 8015f1c:	9c03      	ldr	r4, [sp, #12]
 8015f1e:	e7ed      	b.n	8015efc <_ux_device_stack_configuration_set+0xe0>
        descriptor_length =  (ULONG) *device_framework;
 8015f20:	9b01      	ldr	r3, [sp, #4]
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	9307      	str	r3, [sp, #28]
        descriptor_type =  *(device_framework + 1);
 8015f26:	9b01      	ldr	r3, [sp, #4]
 8015f28:	785b      	ldrb	r3, [r3, #1]
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8015f2a:	2b0b      	cmp	r3, #11
 8015f2c:	d10e      	bne.n	8015f4c <_ux_device_stack_configuration_set+0x130>
            iad_flag = UX_TRUE;
 8015f2e:	2501      	movs	r5, #1
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8015f30:	9b01      	ldr	r3, [sp, #4]
 8015f32:	789b      	ldrb	r3, [r3, #2]
 8015f34:	9306      	str	r3, [sp, #24]
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	78dc      	ldrb	r4, [r3, #3]
        device_framework_length -=  descriptor_length;
 8015f3a:	9a07      	ldr	r2, [sp, #28]
 8015f3c:	9b03      	ldr	r3, [sp, #12]
        device_framework +=  descriptor_length;
 8015f3e:	4694      	mov	ip, r2
        device_framework_length -=  descriptor_length;
 8015f40:	1a9b      	subs	r3, r3, r2
 8015f42:	9303      	str	r3, [sp, #12]
        device_framework +=  descriptor_length;
 8015f44:	9b01      	ldr	r3, [sp, #4]
 8015f46:	4463      	add	r3, ip
 8015f48:	9301      	str	r3, [sp, #4]
 8015f4a:	e7c8      	b.n	8015ede <_ux_device_stack_configuration_set+0xc2>
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015f4c:	2b04      	cmp	r3, #4
 8015f4e:	d1f4      	bne.n	8015f3a <_ux_device_stack_configuration_set+0x11e>
            _ux_utility_descriptor_parse(device_framework,
 8015f50:	492e      	ldr	r1, [pc, #184]	@ (801600c <_ux_device_stack_configuration_set+0x1f0>)
 8015f52:	ab0c      	add	r3, sp, #48	@ 0x30
 8015f54:	2209      	movs	r2, #9
 8015f56:	9801      	ldr	r0, [sp, #4]
 8015f58:	f000 fda3 	bl	8016aa2 <_ux_utility_descriptor_parse>
            if (interface_descriptor.bAlternateSetting == 0)
 8015f5c:	ab08      	add	r3, sp, #32
 8015f5e:	7cd9      	ldrb	r1, [r3, #19]
 8015f60:	2900      	cmp	r1, #0
 8015f62:	d1ea      	bne.n	8015f3a <_ux_device_stack_configuration_set+0x11e>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015f64:	4b27      	ldr	r3, [pc, #156]	@ (8016004 <_ux_device_stack_configuration_set+0x1e8>)
 8015f66:	6818      	ldr	r0, [r3, #0]
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8015f68:	ab08      	add	r3, sp, #32
 8015f6a:	7c9b      	ldrb	r3, [r3, #18]
                if (iad_flag == UX_TRUE)
 8015f6c:	2d01      	cmp	r5, #1
 8015f6e:	d12d      	bne.n	8015fcc <_ux_device_stack_configuration_set+0x1b0>
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8015f70:	9a06      	ldr	r2, [sp, #24]
 8015f72:	4293      	cmp	r3, r2
 8015f74:	d124      	bne.n	8015fc0 <_ux_device_stack_configuration_set+0x1a4>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015f76:	0005      	movs	r5, r0
 8015f78:	35fc      	adds	r5, #252	@ 0xfc
 8015f7a:	686a      	ldr	r2, [r5, #4]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015f7c:	682d      	ldr	r5, [r5, #0]
 8015f7e:	46ac      	mov	ip, r5
 8015f80:	458c      	cmp	ip, r1
 8015f82:	d101      	bne.n	8015f88 <_ux_device_stack_configuration_set+0x16c>
 8015f84:	9a04      	ldr	r2, [sp, #16]
 8015f86:	e00d      	b.n	8015fa4 <_ux_device_stack_configuration_set+0x188>
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8015f88:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8015f8a:	2e01      	cmp	r6, #1
 8015f8c:	d115      	bne.n	8015fba <_ux_device_stack_configuration_set+0x19e>
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8015f8e:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8015f90:	42b3      	cmp	r3, r6
 8015f92:	d112      	bne.n	8015fba <_ux_device_stack_configuration_set+0x19e>
 8015f94:	6dd6      	ldr	r6, [r2, #92]	@ 0x5c
 8015f96:	9d02      	ldr	r5, [sp, #8]
 8015f98:	42ae      	cmp	r6, r5
 8015f9a:	d10e      	bne.n	8015fba <_ux_device_stack_configuration_set+0x19e>
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8015f9c:	3340      	adds	r3, #64	@ 0x40
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	18c3      	adds	r3, r0, r3
 8015fa2:	605a      	str	r2, [r3, #4]
                    iad_number_interfaces--;
 8015fa4:	3c01      	subs	r4, #1
                    if (iad_number_interfaces == 0)
 8015fa6:	0025      	movs	r5, r4
 8015fa8:	1e6b      	subs	r3, r5, #1
 8015faa:	419d      	sbcs	r5, r3
 8015fac:	9204      	str	r2, [sp, #16]
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8015fae:	2200      	movs	r2, #0
 8015fb0:	9903      	ldr	r1, [sp, #12]
 8015fb2:	9801      	ldr	r0, [sp, #4]
 8015fb4:	f000 fb6e 	bl	8016694 <_ux_device_stack_interface_set>
 8015fb8:	e7bf      	b.n	8015f3a <_ux_device_stack_configuration_set+0x11e>
                            class_inst ++;
 8015fba:	3264      	adds	r2, #100	@ 0x64
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015fbc:	3101      	adds	r1, #1
 8015fbe:	e7df      	b.n	8015f80 <_ux_device_stack_configuration_set+0x164>
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8015fc0:	3340      	adds	r3, #64	@ 0x40
 8015fc2:	9a04      	ldr	r2, [sp, #16]
 8015fc4:	009b      	lsls	r3, r3, #2
 8015fc6:	18c3      	adds	r3, r0, r3
 8015fc8:	605a      	str	r2, [r3, #4]
 8015fca:	e7db      	b.n	8015f84 <_ux_device_stack_configuration_set+0x168>
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015fcc:	0001      	movs	r1, r0
 8015fce:	31fc      	adds	r1, #252	@ 0xfc
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015fd0:	c906      	ldmia	r1, {r1, r2}
 8015fd2:	468c      	mov	ip, r1
 8015fd4:	9505      	str	r5, [sp, #20]
 8015fd6:	9905      	ldr	r1, [sp, #20]
 8015fd8:	458c      	cmp	ip, r1
 8015fda:	d0e8      	beq.n	8015fae <_ux_device_stack_configuration_set+0x192>
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8015fdc:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8015fde:	2e01      	cmp	r6, #1
 8015fe0:	d10b      	bne.n	8015ffa <_ux_device_stack_configuration_set+0x1de>
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8015fe2:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8015fe4:	42b3      	cmp	r3, r6
 8015fe6:	d108      	bne.n	8015ffa <_ux_device_stack_configuration_set+0x1de>
 8015fe8:	6dd6      	ldr	r6, [r2, #92]	@ 0x5c
 8015fea:	9902      	ldr	r1, [sp, #8]
 8015fec:	428e      	cmp	r6, r1
 8015fee:	d104      	bne.n	8015ffa <_ux_device_stack_configuration_set+0x1de>
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8015ff0:	3340      	adds	r3, #64	@ 0x40
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	18c3      	adds	r3, r0, r3
 8015ff6:	605a      	str	r2, [r3, #4]
                                break;
 8015ff8:	e7d9      	b.n	8015fae <_ux_device_stack_configuration_set+0x192>
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015ffa:	9905      	ldr	r1, [sp, #20]
                        class_inst ++;
 8015ffc:	3264      	adds	r2, #100	@ 0x64
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015ffe:	3101      	adds	r1, #1
 8016000:	9105      	str	r1, [sp, #20]
 8016002:	e7e8      	b.n	8015fd6 <_ux_device_stack_configuration_set+0x1ba>
 8016004:	200030e0 	.word	0x200030e0
 8016008:	20000243 	.word	0x20000243
 801600c:	2000023a 	.word	0x2000023a

08016010 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8016010:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8016012:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8016014:	b095      	sub	sp, #84	@ 0x54
 8016016:	0004      	movs	r4, r0
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8016018:	9305      	str	r3, [sp, #20]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d000      	beq.n	8016020 <_ux_device_stack_control_request_process+0x10>
 801601e:	e0cc      	b.n	80161ba <_ux_device_stack_control_request_process+0x1aa>
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016020:	4b67      	ldr	r3, [pc, #412]	@ (80161c0 <_ux_device_stack_control_request_process+0x1b0>)
 8016022:	681e      	ldr	r6, [r3, #0]
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8016024:	0003      	movs	r3, r0
 8016026:	333c      	adds	r3, #60	@ 0x3c
 8016028:	781d      	ldrb	r5, [r3, #0]
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801602a:	3301      	adds	r3, #1
 801602c:	781b      	ldrb	r3, [r3, #0]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801602e:	303e      	adds	r0, #62	@ 0x3e
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016030:	9306      	str	r3, [sp, #24]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016032:	f000 febe 	bl	8016db2 <_ux_utility_short_get>
 8016036:	9003      	str	r0, [sp, #12]
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8016038:	0020      	movs	r0, r4
 801603a:	3040      	adds	r0, #64	@ 0x40
 801603c:	f000 feb9 	bl	8016db2 <_ux_utility_short_get>
 8016040:	9004      	str	r0, [sp, #16]
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8016042:	0020      	movs	r0, r4
 8016044:	3042      	adds	r0, #66	@ 0x42
 8016046:	f000 feb4 	bl	8016db2 <_ux_utility_short_get>

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 801604a:	9b06      	ldr	r3, [sp, #24]
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801604c:	9007      	str	r0, [sp, #28]
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 801604e:	1f9a      	subs	r2, r3, #6
 8016050:	2360      	movs	r3, #96	@ 0x60
 8016052:	2a01      	cmp	r2, #1
 8016054:	d83f      	bhi.n	80160d6 <_ux_device_stack_control_request_process+0xc6>
 8016056:	22c0      	movs	r2, #192	@ 0xc0
 8016058:	9903      	ldr	r1, [sp, #12]
 801605a:	01d2      	lsls	r2, r2, #7
 801605c:	4211      	tst	r1, r2
 801605e:	d03a      	beq.n	80160d6 <_ux_device_stack_control_request_process+0xc6>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8016060:	439d      	bics	r5, r3
            request_type |= UX_REQUEST_TYPE_CLASS;
 8016062:	3b40      	subs	r3, #64	@ 0x40
 8016064:	431d      	orrs	r5, r3
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8016066:	2360      	movs	r3, #96	@ 0x60
 8016068:	2220      	movs	r2, #32
 801606a:	402b      	ands	r3, r5
 801606c:	3b20      	subs	r3, #32
 801606e:	4393      	bics	r3, r2
 8016070:	1e1f      	subs	r7, r3, #0
 8016072:	d15c      	bne.n	801612e <_ux_device_stack_control_request_process+0x11e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8016074:	2304      	movs	r3, #4
 8016076:	9309      	str	r3, [sp, #36]	@ 0x24
UINT                        status =  UX_ERROR;
 8016078:	33fb      	adds	r3, #251	@ 0xfb
 801607a:	9305      	str	r3, [sp, #20]
            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 801607c:	003a      	movs	r2, r7
 801607e:	4b50      	ldr	r3, [pc, #320]	@ (80161c0 <_ux_device_stack_control_request_process+0x1b0>)
 8016080:	3240      	adds	r2, #64	@ 0x40
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	0092      	lsls	r2, r2, #2
 8016086:	189b      	adds	r3, r3, r2
 8016088:	685b      	ldr	r3, [r3, #4]

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 801608a:	2b00      	cmp	r3, #0
 801608c:	d018      	beq.n	80160c0 <_ux_device_stack_control_request_process+0xb0>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 801608e:	2203      	movs	r2, #3
 8016090:	402a      	ands	r2, r5
 8016092:	2a01      	cmp	r2, #1
 8016094:	d10d      	bne.n	80160b2 <_ux_device_stack_control_request_process+0xa2>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8016096:	2da1      	cmp	r5, #161	@ 0xa1
 8016098:	d145      	bne.n	8016126 <_ux_device_stack_control_request_process+0x116>
 801609a:	9a06      	ldr	r2, [sp, #24]
 801609c:	2a00      	cmp	r2, #0
 801609e:	d142      	bne.n	8016126 <_ux_device_stack_control_request_process+0x116>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 80160a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
                    if ((request_type == 0xA1) && (request == 0x00) &&
 80160a2:	7c52      	ldrb	r2, [r2, #17]
 80160a4:	2a07      	cmp	r2, #7
 80160a6:	d13e      	bne.n	8016126 <_ux_device_stack_control_request_process+0x116>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 80160a8:	0022      	movs	r2, r4
 80160aa:	3241      	adds	r2, #65	@ 0x41
 80160ac:	7812      	ldrb	r2, [r2, #0]
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 80160ae:	42ba      	cmp	r2, r7
 80160b0:	d106      	bne.n	80160c0 <_ux_device_stack_control_request_process+0xb0>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 80160b2:	9311      	str	r3, [sp, #68]	@ 0x44

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 80160b4:	a809      	add	r0, sp, #36	@ 0x24
 80160b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160b8:	4798      	blx	r3
 80160ba:	9005      	str	r0, [sp, #20]

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 80160bc:	2800      	cmp	r0, #0
 80160be:	d02f      	beq.n	8016120 <_ux_device_stack_control_request_process+0x110>
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 80160c0:	3701      	adds	r7, #1
 80160c2:	2f10      	cmp	r7, #16
 80160c4:	d1da      	bne.n	801607c <_ux_device_stack_control_request_process+0x6c>

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 80160c6:	9b05      	ldr	r3, [sp, #20]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d029      	beq.n	8016120 <_ux_device_stack_control_request_process+0x110>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80160cc:	0030      	movs	r0, r6
 80160ce:	303c      	adds	r0, #60	@ 0x3c
 80160d0:	f000 f99e 	bl	8016410 <_ux_device_stack_endpoint_stall>
 80160d4:	e024      	b.n	8016120 <_ux_device_stack_control_request_process+0x110>
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 80160d6:	402b      	ands	r3, r5
 80160d8:	2b40      	cmp	r3, #64	@ 0x40
 80160da:	d1c4      	bne.n	8016066 <_ux_device_stack_control_request_process+0x56>
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 80160dc:	4b38      	ldr	r3, [pc, #224]	@ (80161c0 <_ux_device_stack_control_request_process+0x1b0>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	33fc      	adds	r3, #252	@ 0xfc
 80160e2:	6f5f      	ldr	r7, [r3, #116]	@ 0x74
 80160e4:	2f00      	cmp	r7, #0
 80160e6:	d0be      	beq.n	8016066 <_ux_device_stack_control_request_process+0x56>
 80160e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160ea:	9a06      	ldr	r2, [sp, #24]
 80160ec:	4293      	cmp	r3, r2
 80160ee:	d1ba      	bne.n	8016066 <_ux_device_stack_control_request_process+0x56>
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 80160f0:	2380      	movs	r3, #128	@ 0x80
 80160f2:	005b      	lsls	r3, r3, #1
 80160f4:	9309      	str	r3, [sp, #36]	@ 0x24
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 80160f6:	ab09      	add	r3, sp, #36	@ 0x24
 80160f8:	9301      	str	r3, [sp, #4]
 80160fa:	68e3      	ldr	r3, [r4, #12]
 80160fc:	9a04      	ldr	r2, [sp, #16]
 80160fe:	9300      	str	r3, [sp, #0]
 8016100:	9903      	ldr	r1, [sp, #12]
 8016102:	9b07      	ldr	r3, [sp, #28]
 8016104:	9806      	ldr	r0, [sp, #24]
 8016106:	47b8      	blx	r7
                if (status == UX_SUCCESS)
 8016108:	2800      	cmp	r0, #0
 801610a:	d1df      	bne.n	80160cc <_ux_device_stack_control_request_process+0xbc>
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801610c:	0033      	movs	r3, r6
 801610e:	2203      	movs	r2, #3
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016110:	0030      	movs	r0, r6
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016112:	3308      	adds	r3, #8
 8016114:	67da      	str	r2, [r3, #124]	@ 0x7c
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8016116:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016118:	9a07      	ldr	r2, [sp, #28]
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801611a:	305c      	adds	r0, #92	@ 0x5c
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 801611c:	f000 fbf2 	bl	8016904 <_ux_device_stack_transfer_request>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
    }

    /* Return the function status.  */
    return(status);
}
 8016120:	9805      	ldr	r0, [sp, #20]
 8016122:	b015      	add	sp, #84	@ 0x54
 8016124:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if ((request_index & 0xFF) != class_index)
 8016126:	21ff      	movs	r1, #255	@ 0xff
 8016128:	9a04      	ldr	r2, [sp, #16]
 801612a:	400a      	ands	r2, r1
 801612c:	e7bf      	b.n	80160ae <_ux_device_stack_control_request_process+0x9e>
        switch (request)
 801612e:	9b06      	ldr	r3, [sp, #24]
 8016130:	2b0c      	cmp	r3, #12
 8016132:	d840      	bhi.n	80161b6 <_ux_device_stack_control_request_process+0x1a6>
 8016134:	0018      	movs	r0, r3
 8016136:	f7e9 ffef 	bl	8000118 <__gnu_thumb1_case_sqi>
 801613a:	1407      	.short	0x1407
 801613c:	203e1a3e 	.word	0x203e1a3e
 8016140:	312e3e28 	.word	0x312e3e28
 8016144:	3935      	.short	0x3935
 8016146:	f3          	.byte	0xf3
 8016147:	00          	.byte	0x00
            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8016148:	0028      	movs	r0, r5
 801614a:	9a07      	ldr	r2, [sp, #28]
 801614c:	9904      	ldr	r1, [sp, #16]
 801614e:	f000 f981 	bl	8016454 <_ux_device_stack_get_status>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8016152:	1e04      	subs	r4, r0, #0
        if (status != UX_SUCCESS)
 8016154:	d0e4      	beq.n	8016120 <_ux_device_stack_control_request_process+0x110>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8016156:	0030      	movs	r0, r6
 8016158:	303c      	adds	r0, #60	@ 0x3c
 801615a:	f000 f959 	bl	8016410 <_ux_device_stack_endpoint_stall>
 801615e:	9405      	str	r4, [sp, #20]
 8016160:	e7de      	b.n	8016120 <_ux_device_stack_control_request_process+0x110>
            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8016162:	0028      	movs	r0, r5
 8016164:	9a04      	ldr	r2, [sp, #16]
 8016166:	9903      	ldr	r1, [sp, #12]
 8016168:	f7ff fe10 	bl	8015d8c <_ux_device_stack_clear_feature>
 801616c:	e7f1      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 801616e:	0028      	movs	r0, r5
 8016170:	9a04      	ldr	r2, [sp, #16]
 8016172:	9903      	ldr	r1, [sp, #12]
 8016174:	f000 fb52 	bl	801681c <_ux_device_stack_set_feature>
 8016178:	e7eb      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            dcd -> ux_slave_dcd_device_address =  request_value;
 801617a:	9b03      	ldr	r3, [sp, #12]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 801617c:	2111      	movs	r1, #17
            dcd -> ux_slave_dcd_device_address =  request_value;
 801617e:	6173      	str	r3, [r6, #20]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8016180:	0030      	movs	r0, r6
 8016182:	69b3      	ldr	r3, [r6, #24]
 8016184:	9a03      	ldr	r2, [sp, #12]
 8016186:	4798      	blx	r3
 8016188:	e7e3      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 801618a:	9a07      	ldr	r2, [sp, #28]
 801618c:	9904      	ldr	r1, [sp, #16]
 801618e:	9803      	ldr	r0, [sp, #12]
 8016190:	f000 f818 	bl	80161c4 <_ux_device_stack_descriptor_send>
 8016194:	e7dd      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_get();
 8016196:	f7ff fe2d 	bl	8015df4 <_ux_device_stack_configuration_get>
 801619a:	e7da      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_set(request_value);
 801619c:	9803      	ldr	r0, [sp, #12]
 801619e:	f7ff fe3d 	bl	8015e1c <_ux_device_stack_configuration_set>
 80161a2:	e7d6      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_get(request_index);
 80161a4:	9804      	ldr	r0, [sp, #16]
 80161a6:	f7ff fc8f 	bl	8015ac8 <_ux_device_stack_alternate_setting_get>
 80161aa:	e7d2      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 80161ac:	9903      	ldr	r1, [sp, #12]
 80161ae:	9804      	ldr	r0, [sp, #16]
 80161b0:	f7ff fcb0 	bl	8015b14 <_ux_device_stack_alternate_setting_set>
 80161b4:	e7cd      	b.n	8016152 <_ux_device_stack_control_request_process+0x142>
        switch (request)
 80161b6:	2454      	movs	r4, #84	@ 0x54
 80161b8:	e7cd      	b.n	8016156 <_ux_device_stack_control_request_process+0x146>
UINT                        status =  UX_ERROR;
 80161ba:	23ff      	movs	r3, #255	@ 0xff
 80161bc:	9305      	str	r3, [sp, #20]
 80161be:	e7af      	b.n	8016120 <_ux_device_stack_control_request_process+0x110>
 80161c0:	200030e0 	.word	0x200030e0

080161c4 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 80161c4:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80161c6:	4e72      	ldr	r6, [pc, #456]	@ (8016390 <_ux_device_stack_descriptor_send+0x1cc>)
{
 80161c8:	0015      	movs	r5, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80161ca:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80161cc:	2203      	movs	r2, #3
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80161ce:	0023      	movs	r3, r4
{
 80161d0:	b08d      	sub	sp, #52	@ 0x34
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80161d2:	333c      	adds	r3, #60	@ 0x3c
 80161d4:	9301      	str	r3, [sp, #4]
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80161d6:	3320      	adds	r3, #32
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80161d8:	629a      	str	r2, [r3, #40]	@ 0x28
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80161da:	9302      	str	r3, [sp, #8]

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 80161dc:	0002      	movs	r2, r0
 80161de:	23ff      	movs	r3, #255	@ 0xff
 80161e0:	401a      	ands	r2, r3
 80161e2:	9203      	str	r2, [sp, #12]

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80161e4:	0a02      	lsrs	r2, r0, #8
 80161e6:	4013      	ands	r3, r2

    /* Default descriptor length is host length.  */
    length =  host_length;

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 80161e8:	1e58      	subs	r0, r3, #1
{
 80161ea:	9105      	str	r1, [sp, #20]
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80161ec:	9204      	str	r2, [sp, #16]
    switch (descriptor_type)
 80161ee:	280e      	cmp	r0, #14
 80161f0:	d900      	bls.n	80161f4 <_ux_device_stack_descriptor_send+0x30>
 80161f2:	e09f      	b.n	8016334 <_ux_device_stack_descriptor_send+0x170>
 80161f4:	f7e9 ff9a 	bl	800012c <__gnu_thumb1_case_uqi>
 80161f8:	9e6d3108 	.word	0x9e6d3108
 80161fc:	9e31169e 	.word	0x9e31169e
 8016200:	9e9e9e1b 	.word	0x9e9e9e1b
 8016204:	9e9e      	.short	0x9e9e
 8016206:	31          	.byte	0x31
 8016207:	00          	.byte	0x00
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8016208:	002e      	movs	r6, r5
 801620a:	2d12      	cmp	r5, #18
 801620c:	d900      	bls.n	8016210 <_ux_device_stack_descriptor_send+0x4c>
 801620e:	2612      	movs	r6, #18
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8016210:	0022      	movs	r2, r4
 8016212:	32cc      	adds	r2, #204	@ 0xcc
 8016214:	6811      	ldr	r1, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8016216:	3204      	adds	r2, #4
        device_framework_end = device_framework + device_framework_length;
 8016218:	6812      	ldr	r2, [r2, #0]
 801621a:	188a      	adds	r2, r1, r2

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 801621c:	4291      	cmp	r1, r2
 801621e:	d30b      	bcc.n	8016238 <_ux_device_stack_descriptor_send+0x74>
            if (string_framework_length == 0)
            {

                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
 8016220:	20ff      	movs	r0, #255	@ 0xff
 8016222:	e016      	b.n	8016252 <_ux_device_stack_descriptor_send+0x8e>
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8016224:	002e      	movs	r6, r5
 8016226:	2d0a      	cmp	r5, #10
 8016228:	d9f2      	bls.n	8016210 <_ux_device_stack_descriptor_send+0x4c>
 801622a:	260a      	movs	r6, #10
 801622c:	e7f0      	b.n	8016210 <_ux_device_stack_descriptor_send+0x4c>
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 801622e:	002e      	movs	r6, r5
 8016230:	2d05      	cmp	r5, #5
 8016232:	d9ed      	bls.n	8016210 <_ux_device_stack_descriptor_send+0x4c>
 8016234:	2605      	movs	r6, #5
 8016236:	e7eb      	b.n	8016210 <_ux_device_stack_descriptor_send+0x4c>
            if (*(device_framework + 1) == descriptor_type)
 8016238:	784f      	ldrb	r7, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 801623a:	7808      	ldrb	r0, [r1, #0]
            if (*(device_framework + 1) == descriptor_type)
 801623c:	429f      	cmp	r7, r3
 801623e:	d10a      	bne.n	8016256 <_ux_device_stack_descriptor_send+0x92>
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8016240:	0032      	movs	r2, r6
 8016242:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8016244:	f000 fd7c 	bl	8016d40 <_ux_utility_memory_copy>
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8016248:	002a      	movs	r2, r5
 801624a:	0031      	movs	r1, r6
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801624c:	9802      	ldr	r0, [sp, #8]
 801624e:	f000 fb59 	bl	8016904 <_ux_device_stack_transfer_request>
        return(UX_ERROR);
    }

    /* Return the status to the caller.  */
    return(status);
}
 8016252:	b00d      	add	sp, #52	@ 0x34
 8016254:	bdf0      	pop	{r4, r5, r6, r7, pc}
            device_framework +=  descriptor_length;
 8016256:	1809      	adds	r1, r1, r0
 8016258:	e7e0      	b.n	801621c <_ux_device_stack_descriptor_send+0x58>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801625a:	0022      	movs	r2, r4
        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 801625c:	2b07      	cmp	r3, #7
 801625e:	d11e      	bne.n	801629e <_ux_device_stack_descriptor_send+0xda>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8016260:	32d4      	adds	r2, #212	@ 0xd4
{
 8016262:	2100      	movs	r1, #0
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8016264:	6816      	ldr	r6, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8016266:	3204      	adds	r2, #4
            device_framework_end = device_framework + device_framework_length;
 8016268:	6812      	ldr	r2, [r2, #0]
 801626a:	18b2      	adds	r2, r6, r2
        while (device_framework < device_framework_end)
 801626c:	4296      	cmp	r6, r2
 801626e:	d2d7      	bcs.n	8016220 <_ux_device_stack_descriptor_send+0x5c>
            descriptor_length =  (ULONG) *device_framework;
 8016270:	7837      	ldrb	r7, [r6, #0]
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8016272:	7870      	ldrb	r0, [r6, #1]
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8016274:	2b0f      	cmp	r3, #15
 8016276:	d114      	bne.n	80162a2 <_ux_device_stack_descriptor_send+0xde>
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8016278:	280f      	cmp	r0, #15
 801627a:	d11d      	bne.n	80162b8 <_ux_device_stack_descriptor_send+0xf4>
                    _ux_utility_descriptor_parse(device_framework,
 801627c:	af07      	add	r7, sp, #28
 801627e:	003b      	movs	r3, r7
 8016280:	2204      	movs	r2, #4
 8016282:	4944      	ldr	r1, [pc, #272]	@ (8016394 <_ux_device_stack_descriptor_send+0x1d0>)
                        _ux_utility_descriptor_parse(device_framework,
 8016284:	0030      	movs	r0, r6
 8016286:	f000 fc0c 	bl	8016aa2 <_ux_utility_descriptor_parse>
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 801628a:	887f      	ldrh	r7, [r7, #2]
            if (target_descriptor_length < host_length)
 801628c:	42af      	cmp	r7, r5
 801628e:	d900      	bls.n	8016292 <_ux_device_stack_descriptor_send+0xce>
 8016290:	002f      	movs	r7, r5
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8016292:	2380      	movs	r3, #128	@ 0x80
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	429f      	cmp	r7, r3
 8016298:	d910      	bls.n	80162bc <_ux_device_stack_descriptor_send+0xf8>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801629a:	2212      	movs	r2, #18
 801629c:	e025      	b.n	80162ea <_ux_device_stack_descriptor_send+0x126>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801629e:	32cc      	adds	r2, #204	@ 0xcc
 80162a0:	e7df      	b.n	8016262 <_ux_device_stack_descriptor_send+0x9e>
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80162a2:	2802      	cmp	r0, #2
 80162a4:	d108      	bne.n	80162b8 <_ux_device_stack_descriptor_send+0xf4>
                    if (parsed_descriptor_index == descriptor_index)
 80162a6:	9803      	ldr	r0, [sp, #12]
 80162a8:	4281      	cmp	r1, r0
 80162aa:	d104      	bne.n	80162b6 <_ux_device_stack_descriptor_send+0xf2>
                        _ux_utility_descriptor_parse(device_framework,
 80162ac:	af09      	add	r7, sp, #36	@ 0x24
 80162ae:	003b      	movs	r3, r7
 80162b0:	2208      	movs	r2, #8
 80162b2:	4939      	ldr	r1, [pc, #228]	@ (8016398 <_ux_device_stack_descriptor_send+0x1d4>)
 80162b4:	e7e6      	b.n	8016284 <_ux_device_stack_descriptor_send+0xc0>
                        parsed_descriptor_index++;
 80162b6:	3101      	adds	r1, #1
            device_framework +=  descriptor_length;
 80162b8:	19f6      	adds	r6, r6, r7
 80162ba:	e7d7      	b.n	801626c <_ux_device_stack_descriptor_send+0xa8>
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80162bc:	003a      	movs	r2, r7
 80162be:	0031      	movs	r1, r6
 80162c0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80162c2:	f000 fd3d 	bl	8016d40 <_ux_utility_memory_copy>
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80162c6:	9a04      	ldr	r2, [sp, #16]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 80162c8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80162ca:	0039      	movs	r1, r7
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80162cc:	705a      	strb	r2, [r3, #1]
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80162ce:	002a      	movs	r2, r5
 80162d0:	e7bc      	b.n	801624c <_ux_device_stack_descriptor_send+0x88>
        if (descriptor_index == 0)
 80162d2:	9b03      	ldr	r3, [sp, #12]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d128      	bne.n	801632a <_ux_device_stack_descriptor_send+0x166>
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80162d8:	0023      	movs	r3, r4
 80162da:	2280      	movs	r2, #128	@ 0x80
 80162dc:	33f0      	adds	r3, #240	@ 0xf0
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	0052      	lsls	r2, r2, #1
 80162e2:	3302      	adds	r3, #2
 80162e4:	4293      	cmp	r3, r2
 80162e6:	d90a      	bls.n	80162fe <_ux_device_stack_descriptor_send+0x13a>
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80162e8:	3aee      	subs	r2, #238	@ 0xee
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 80162ea:	2109      	movs	r1, #9
 80162ec:	2002      	movs	r0, #2
 80162ee:	f000 fb71 	bl	80169d4 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80162f2:	2114      	movs	r1, #20
 80162f4:	0020      	movs	r0, r4
 80162f6:	69a3      	ldr	r3, [r4, #24]
 80162f8:	9a01      	ldr	r2, [sp, #4]
 80162fa:	4798      	blx	r3
            if (string_framework_length == 0)
 80162fc:	e7a9      	b.n	8016252 <_ux_device_stack_descriptor_send+0x8e>
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80162fe:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8016300:	7003      	strb	r3, [r0, #0]
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8016302:	2303      	movs	r3, #3
 8016304:	7043      	strb	r3, [r0, #1]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8016306:	6833      	ldr	r3, [r6, #0]
 8016308:	3002      	adds	r0, #2
 801630a:	001a      	movs	r2, r3
 801630c:	33ec      	adds	r3, #236	@ 0xec
 801630e:	32f0      	adds	r2, #240	@ 0xf0
 8016310:	6819      	ldr	r1, [r3, #0]
 8016312:	6812      	ldr	r2, [r2, #0]
 8016314:	f000 fd14 	bl	8016d40 <_ux_utility_memory_copy>
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8016318:	6833      	ldr	r3, [r6, #0]
 801631a:	33f0      	adds	r3, #240	@ 0xf0
 801631c:	6819      	ldr	r1, [r3, #0]
 801631e:	3102      	adds	r1, #2
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8016320:	42a9      	cmp	r1, r5
 8016322:	d900      	bls.n	8016326 <_ux_device_stack_descriptor_send+0x162>
 8016324:	0029      	movs	r1, r5
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8016326:	002a      	movs	r2, r5
 8016328:	e790      	b.n	801624c <_ux_device_stack_descriptor_send+0x88>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801632a:	0023      	movs	r3, r4
 801632c:	33e4      	adds	r3, #228	@ 0xe4
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 801632e:	cbc0      	ldmia	r3!, {r6, r7}
            while (string_framework_length != 0)
 8016330:	2f00      	cmp	r7, #0
 8016332:	d105      	bne.n	8016340 <_ux_device_stack_descriptor_send+0x17c>
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016334:	2114      	movs	r1, #20
 8016336:	0020      	movs	r0, r4
 8016338:	69a3      	ldr	r3, [r4, #24]
 801633a:	9a01      	ldr	r2, [sp, #4]
 801633c:	4798      	blx	r3
        return(UX_ERROR);
 801633e:	e76f      	b.n	8016220 <_ux_device_stack_descriptor_send+0x5c>
                if (_ux_utility_short_get(string_framework) == request_index)
 8016340:	0030      	movs	r0, r6
 8016342:	f000 fd36 	bl	8016db2 <_ux_utility_short_get>
 8016346:	9a05      	ldr	r2, [sp, #20]
 8016348:	78f3      	ldrb	r3, [r6, #3]
 801634a:	4290      	cmp	r0, r2
 801634c:	d11b      	bne.n	8016386 <_ux_device_stack_descriptor_send+0x1c2>
                    if (*(string_framework + 2) == descriptor_index)
 801634e:	78b2      	ldrb	r2, [r6, #2]
 8016350:	9903      	ldr	r1, [sp, #12]
 8016352:	428a      	cmp	r2, r1
 8016354:	d117      	bne.n	8016386 <_ux_device_stack_descriptor_send+0x1c2>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8016356:	3301      	adds	r3, #1
 8016358:	005a      	lsls	r2, r3, #1
 801635a:	2b80      	cmp	r3, #128	@ 0x80
 801635c:	dc9d      	bgt.n	801629a <_ux_device_stack_descriptor_send+0xd6>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801635e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8016360:	2400      	movs	r4, #0
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8016362:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8016364:	2203      	movs	r2, #3
 8016366:	705a      	strb	r2, [r3, #1]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8016368:	0032      	movs	r2, r6
 801636a:	3302      	adds	r3, #2
 801636c:	78f1      	ldrb	r1, [r6, #3]
 801636e:	1b90      	subs	r0, r2, r6
 8016370:	4281      	cmp	r1, r0
 8016372:	d802      	bhi.n	801637a <_ux_device_stack_descriptor_send+0x1b6>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8016374:	3101      	adds	r1, #1
 8016376:	0049      	lsls	r1, r1, #1
 8016378:	e7d2      	b.n	8016320 <_ux_device_stack_descriptor_send+0x15c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 801637a:	7911      	ldrb	r1, [r2, #4]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 801637c:	705c      	strb	r4, [r3, #1]
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 801637e:	7019      	strb	r1, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8016380:	3201      	adds	r2, #1
 8016382:	3302      	adds	r3, #2
 8016384:	e7f2      	b.n	801636c <_ux_device_stack_descriptor_send+0x1a8>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8016386:	3f04      	subs	r7, #4
 8016388:	1aff      	subs	r7, r7, r3
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 801638a:	3304      	adds	r3, #4
 801638c:	18f6      	adds	r6, r6, r3
 801638e:	e7cf      	b.n	8016330 <_ux_device_stack_descriptor_send+0x16c>
 8016390:	200030e0 	.word	0x200030e0
 8016394:	20000236 	.word	0x20000236
 8016398:	20000243 	.word	0x20000243

0801639c <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 801639c:	b5f0      	push	{r4, r5, r6, r7, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801639e:	4f1b      	ldr	r7, [pc, #108]	@ (801640c <_ux_device_stack_disconnect+0x70>)
{
 80163a0:	b08f      	sub	sp, #60	@ 0x3c
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80163a2:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80163a4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80163a6:	2e03      	cmp	r6, #3
 80163a8:	d11e      	bne.n	80163e8 <_ux_device_stack_disconnect+0x4c>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80163aa:	0023      	movs	r3, r4
 80163ac:	33b4      	adds	r3, #180	@ 0xb4
 80163ae:	681d      	ldr	r5, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 80163b0:	2d00      	cmp	r5, #0
 80163b2:	d109      	bne.n	80163c8 <_ux_device_stack_disconnect+0x2c>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80163b4:	2301      	movs	r3, #1
 80163b6:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 80163b8:	0022      	movs	r2, r4
 80163ba:	210f      	movs	r1, #15
 80163bc:	0020      	movs	r0, r4
 80163be:	69a3      	ldr	r3, [r4, #24]
 80163c0:	323c      	adds	r2, #60	@ 0x3c
 80163c2:	4798      	blx	r3
 80163c4:	0005      	movs	r5, r0
 80163c6:	e012      	b.n	80163ee <_ux_device_stack_disconnect+0x52>
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 80163c8:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80163ca:	9603      	str	r6, [sp, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 80163cc:	9505      	str	r5, [sp, #20]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 80163ce:	930b      	str	r3, [sp, #44]	@ 0x2c
            if (class_ptr != UX_NULL)
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d002      	beq.n	80163da <_ux_device_stack_disconnect+0x3e>
                class_ptr -> ux_slave_class_entry_function(&class_command);
 80163d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163d6:	a803      	add	r0, sp, #12
 80163d8:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 80163da:	69ab      	ldr	r3, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 80163dc:	0028      	movs	r0, r5
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 80163de:	9301      	str	r3, [sp, #4]
            _ux_device_stack_interface_delete(interface_ptr);
 80163e0:	f000 f934 	bl	801664c <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 80163e4:	9d01      	ldr	r5, [sp, #4]
 80163e6:	e7e3      	b.n	80163b0 <_ux_device_stack_disconnect+0x14>
UINT                        status = UX_ERROR;
 80163e8:	25ff      	movs	r5, #255	@ 0xff
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 80163ea:	2e01      	cmp	r6, #1
 80163ec:	d0e4      	beq.n	80163b8 <_ux_device_stack_disconnect+0x1c>
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 80163ee:	0022      	movs	r2, r4
 80163f0:	2300      	movs	r3, #0
 80163f2:	32a4      	adds	r2, #164	@ 0xa4
 80163f4:	6013      	str	r3, [r2, #0]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 80163f6:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	33fc      	adds	r3, #252	@ 0xfc
 80163fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d001      	beq.n	8016406 <_ux_device_stack_disconnect+0x6a>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8016402:	200a      	movs	r0, #10
 8016404:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 8016406:	0028      	movs	r0, r5
 8016408:	b00f      	add	sp, #60	@ 0x3c
 801640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801640c:	200030e0 	.word	0x200030e0

08016410 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8016410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016412:	4d0f      	ldr	r5, [pc, #60]	@ (8016450 <_ux_device_stack_endpoint_stall+0x40>)
{
 8016414:	0004      	movs	r4, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016416:	682f      	ldr	r7, [r5, #0]
       section where interrupts are disabled.  */
    status =  UX_ERROR;

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8016418:	f002 fdca 	bl	8018fb0 <_ux_utility_interrupt_disable>

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801641c:	682b      	ldr	r3, [r5, #0]
    UX_DISABLE
 801641e:	0006      	movs	r6, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8016420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    status =  UX_ERROR;
 8016422:	25ff      	movs	r5, #255	@ 0xff
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8016424:	2b00      	cmp	r3, #0
 8016426:	d00d      	beq.n	8016444 <_ux_device_stack_endpoint_stall+0x34>
 8016428:	6863      	ldr	r3, [r4, #4]
 801642a:	2b02      	cmp	r3, #2
 801642c:	d00a      	beq.n	8016444 <_ux_device_stack_endpoint_stall+0x34>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	0022      	movs	r2, r4
 8016432:	2114      	movs	r1, #20
 8016434:	0038      	movs	r0, r7
 8016436:	4798      	blx	r3

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8016438:	7be3      	ldrb	r3, [r4, #15]
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801643a:	0005      	movs	r5, r0
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 801643c:	079b      	lsls	r3, r3, #30
 801643e:	d001      	beq.n	8016444 <_ux_device_stack_endpoint_stall+0x34>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 8016440:	2302      	movs	r3, #2
 8016442:	6063      	str	r3, [r4, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 8016444:	0030      	movs	r0, r6
 8016446:	f002 fdb7 	bl	8018fb8 <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
}
 801644a:	0028      	movs	r0, r5
 801644c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801644e:	46c0      	nop			@ (mov r8, r8)
 8016450:	200030e0 	.word	0x200030e0

08016454 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8016454:	000a      	movs	r2, r1

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8016456:	2100      	movs	r1, #0
{
 8016458:	b570      	push	{r4, r5, r6, lr}
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801645a:	0006      	movs	r6, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801645c:	4b20      	ldr	r3, [pc, #128]	@ (80164e0 <_ux_device_stack_get_status+0x8c>)
 801645e:	681c      	ldr	r4, [r3, #0]
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8016460:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8016462:	7029      	strb	r1, [r5, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8016464:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8016466:	7069      	strb	r1, [r5, #1]
    switch (request_type & UX_REQUEST_TARGET)
 8016468:	3103      	adds	r1, #3
 801646a:	400e      	ands	r6, r1
 801646c:	4208      	tst	r0, r1
 801646e:	d00a      	beq.n	8016486 <_ux_device_stack_get_status+0x32>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016470:	0025      	movs	r5, r4
 8016472:	69a3      	ldr	r3, [r4, #24]
 8016474:	353c      	adds	r5, #60	@ 0x3c
    switch (request_type & UX_REQUEST_TARGET)
 8016476:	2e02      	cmp	r6, #2
 8016478:	d026      	beq.n	80164c8 <_ux_device_stack_get_status+0x74>
        break;

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801647a:	002a      	movs	r2, r5
 801647c:	2114      	movs	r1, #20
 801647e:	0020      	movs	r0, r4
 8016480:	4798      	blx	r3
            return(UX_SUCCESS);            
 8016482:	2000      	movs	r0, #0
    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);

    /* Return the function status.  */
    return(status);
}
 8016484:	bd70      	pop	{r4, r5, r6, pc}
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8016486:	20f0      	movs	r0, #240	@ 0xf0
            data_length = 1;
 8016488:	2101      	movs	r1, #1
        if (request_index == UX_OTG_STATUS_SELECTOR)
 801648a:	0200      	lsls	r0, r0, #8
 801648c:	4282      	cmp	r2, r0
 801648e:	d011      	beq.n	80164b4 <_ux_device_stack_get_status+0x60>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	32fc      	adds	r2, #252	@ 0xfc
 8016494:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8016496:	2a02      	cmp	r2, #2
 8016498:	d101      	bne.n	801649e <_ux_device_stack_get_status+0x4a>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801649a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801649c:	7011      	strb	r1, [r2, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	33fc      	adds	r3, #252	@ 0xfc
 80164a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d004      	beq.n	80164b2 <_ux_device_stack_get_status+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 80164a8:	2302      	movs	r3, #2
 80164aa:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80164ac:	7811      	ldrb	r1, [r2, #0]
 80164ae:	430b      	orrs	r3, r1
 80164b0:	7013      	strb	r3, [r2, #0]
    data_length = 2;
 80164b2:	2102      	movs	r1, #2
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80164b4:	0023      	movs	r3, r4
 80164b6:	2203      	movs	r2, #3
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80164b8:	0020      	movs	r0, r4
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80164ba:	3308      	adds	r3, #8
 80164bc:	67da      	str	r2, [r3, #124]	@ 0x7c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80164be:	305c      	adds	r0, #92	@ 0x5c
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 80164c0:	000a      	movs	r2, r1
 80164c2:	f000 fa1f 	bl	8016904 <_ux_device_stack_transfer_request>
    return(status);
 80164c6:	e7dd      	b.n	8016484 <_ux_device_stack_get_status+0x30>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 80164c8:	2115      	movs	r1, #21
 80164ca:	0020      	movs	r0, r4
 80164cc:	4798      	blx	r3
        if (status != UX_ERROR)
 80164ce:	28ff      	cmp	r0, #255	@ 0xff
 80164d0:	d004      	beq.n	80164dc <_ux_device_stack_get_status+0x88>
            if (status == UX_TRUE)
 80164d2:	2801      	cmp	r0, #1
 80164d4:	d1ed      	bne.n	80164b2 <_ux_device_stack_get_status+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80164d6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80164d8:	7018      	strb	r0, [r3, #0]
 80164da:	e7ea      	b.n	80164b2 <_ux_device_stack_get_status+0x5e>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80164dc:	69a3      	ldr	r3, [r4, #24]
 80164de:	e7cc      	b.n	801647a <_ux_device_stack_get_status+0x26>
 80164e0:	200030e0 	.word	0x200030e0

080164e4 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 80164e4:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80164e6:	4c58      	ldr	r4, [pc, #352]	@ (8016648 <_ux_device_stack_initialize+0x164>)
{
 80164e8:	b085      	sub	sp, #20
    device =  &_ux_system_slave -> ux_system_slave_device;
 80164ea:	6825      	ldr	r5, [r4, #0]

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 80164ec:	002e      	movs	r6, r5
 80164ee:	36dc      	adds	r6, #220	@ 0xdc
 80164f0:	6030      	str	r0, [r6, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 80164f2:	0028      	movs	r0, r5
 80164f4:	30e0      	adds	r0, #224	@ 0xe0
 80164f6:	6001      	str	r1, [r0, #0]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 80164f8:	0029      	movs	r1, r5
 80164fa:	31d4      	adds	r1, #212	@ 0xd4
 80164fc:	600a      	str	r2, [r1, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 80164fe:	002a      	movs	r2, r5
 8016500:	32d8      	adds	r2, #216	@ 0xd8
 8016502:	6013      	str	r3, [r2, #0]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8016504:	002b      	movs	r3, r5
 8016506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016508:	33e4      	adds	r3, #228	@ 0xe4
 801650a:	601a      	str	r2, [r3, #0]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801650c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801650e:	2100      	movs	r1, #0
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8016510:	605a      	str	r2, [r3, #4]
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 8016512:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016514:	3308      	adds	r3, #8
 8016516:	601a      	str	r2, [r3, #0]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8016518:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801651a:	0008      	movs	r0, r1
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 801651c:	605a      	str	r2, [r3, #4]
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 801651e:	2202      	movs	r2, #2
 8016520:	611a      	str	r2, [r3, #16]
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8016522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    if (memory == UX_NULL)
        return(UX_MEMORY_INSUFFICIENT);
 8016524:	2612      	movs	r6, #18
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8016526:	67da      	str	r2, [r3, #124]	@ 0x7c
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 8016528:	22c8      	movs	r2, #200	@ 0xc8
 801652a:	f000 fb13 	bl	8016b54 <_ux_utility_memory_allocate>
    if (memory == UX_NULL)
 801652e:	2800      	cmp	r0, #0
 8016530:	d100      	bne.n	8016534 <_ux_device_stack_initialize+0x50>
 8016532:	e086      	b.n	8016642 <_ux_device_stack_initialize+0x15e>
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8016534:	2280      	movs	r2, #128	@ 0x80
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8016536:	6823      	ldr	r3, [r4, #0]
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8016538:	2101      	movs	r1, #1
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 801653a:	33fc      	adds	r3, #252	@ 0xfc
 801653c:	6058      	str	r0, [r3, #4]
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 801653e:	0052      	lsls	r2, r2, #1
 8016540:	2000      	movs	r0, #0
 8016542:	f000 fb07 	bl	8016b54 <_ux_utility_memory_allocate>
    transfer_request -> ux_slave_transfer_request_data_pointer =
 8016546:	66a8      	str	r0, [r5, #104]	@ 0x68

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 8016548:	2800      	cmp	r0, #0
 801654a:	d05a      	beq.n	8016602 <_ux_device_stack_initialize+0x11e>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801654c:	6823      	ldr	r3, [r4, #0]
 801654e:	001a      	movs	r2, r3
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8016550:	33d8      	adds	r3, #216	@ 0xd8
 8016552:	681e      	ldr	r6, [r3, #0]

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
        local_endpoints_found              =  0;
        endpoints_in_interface_found       =  0;
 8016554:	2300      	movs	r3, #0
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8016556:	32d4      	adds	r2, #212	@ 0xd4
 8016558:	6811      	ldr	r1, [r2, #0]
        local_endpoints_found              =  0;
 801655a:	0018      	movs	r0, r3
        local_interfaces_found             =  0;
 801655c:	001a      	movs	r2, r3
    endpoints_found                    =  0;
 801655e:	469c      	mov	ip, r3
    interfaces_found                   =  0;
 8016560:	001c      	movs	r4, r3
    max_interface_number               =  0;
 8016562:	9302      	str	r3, [sp, #8]

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 8016564:	2e00      	cmp	r6, #0
 8016566:	d11c      	bne.n	80165a2 <_ux_device_stack_initialize+0xbe>
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 8016568:	4294      	cmp	r4, r2
 801656a:	d342      	bcc.n	80165f2 <_ux_device_stack_initialize+0x10e>
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 801656c:	1e22      	subs	r2, r4, #0
 801656e:	d140      	bne.n	80165f2 <_ux_device_stack_initialize+0x10e>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 8016570:	2103      	movs	r1, #3
 8016572:	2002      	movs	r0, #2
 8016574:	3242      	adds	r2, #66	@ 0x42
 8016576:	f000 fa2d 	bl	80169d4 <_ux_system_error_handler>
 801657a:	3642      	adds	r6, #66	@ 0x42

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 801657c:	002b      	movs	r3, r5
 801657e:	33b8      	adds	r3, #184	@ 0xb8
 8016580:	6818      	ldr	r0, [r3, #0]
 8016582:	2800      	cmp	r0, #0
 8016584:	d001      	beq.n	801658a <_ux_device_stack_initialize+0xa6>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 8016586:	f000 fbe5 	bl	8016d54 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801658a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801658c:	2800      	cmp	r0, #0
 801658e:	d001      	beq.n	8016594 <_ux_device_stack_initialize+0xb0>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8016590:	f000 fbe0 	bl	8016d54 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 8016594:	4b2c      	ldr	r3, [pc, #176]	@ (8016648 <_ux_device_stack_initialize+0x164>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	33fc      	adds	r3, #252	@ 0xfc
 801659a:	6858      	ldr	r0, [r3, #4]
 801659c:	f000 fbda 	bl	8016d54 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 80165a0:	e04f      	b.n	8016642 <_ux_device_stack_initialize+0x15e>
            descriptor_length =  (ULONG) *device_framework;
 80165a2:	780f      	ldrb	r7, [r1, #0]
 80165a4:	9703      	str	r7, [sp, #12]
            descriptor_type =  *(device_framework + 1);
 80165a6:	784f      	ldrb	r7, [r1, #1]
            switch(descriptor_type)
 80165a8:	2f02      	cmp	r7, #2
 80165aa:	d017      	beq.n	80165dc <_ux_device_stack_initialize+0xf8>
 80165ac:	2f04      	cmp	r7, #4
 80165ae:	d10c      	bne.n	80165ca <_ux_device_stack_initialize+0xe6>
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 80165b0:	790f      	ldrb	r7, [r1, #4]
 80165b2:	9701      	str	r7, [sp, #4]
                if (*(device_framework + 3) == 0)
 80165b4:	78cf      	ldrb	r7, [r1, #3]
 80165b6:	2f00      	cmp	r7, #0
 80165b8:	d10b      	bne.n	80165d2 <_ux_device_stack_initialize+0xee>
                    local_endpoints_found += endpoints_in_interface_found;
 80165ba:	18c0      	adds	r0, r0, r3
                    local_interfaces_found++;
 80165bc:	3201      	adds	r2, #1
                if (*(device_framework + 2) > max_interface_number)
 80165be:	788b      	ldrb	r3, [r1, #2]
 80165c0:	9f02      	ldr	r7, [sp, #8]
 80165c2:	429f      	cmp	r7, r3
 80165c4:	d200      	bcs.n	80165c8 <_ux_device_stack_initialize+0xe4>
 80165c6:	9302      	str	r3, [sp, #8]
 80165c8:	9b01      	ldr	r3, [sp, #4]
            device_framework_length -=  descriptor_length;
 80165ca:	9f03      	ldr	r7, [sp, #12]
 80165cc:	1bf6      	subs	r6, r6, r7
            device_framework +=  descriptor_length;
 80165ce:	19c9      	adds	r1, r1, r7
 80165d0:	e7c8      	b.n	8016564 <_ux_device_stack_initialize+0x80>
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 80165d2:	9f01      	ldr	r7, [sp, #4]
 80165d4:	429f      	cmp	r7, r3
 80165d6:	d2f2      	bcs.n	80165be <_ux_device_stack_initialize+0xda>
 80165d8:	9301      	str	r3, [sp, #4]
 80165da:	e7f0      	b.n	80165be <_ux_device_stack_initialize+0xda>
                if (local_interfaces_found > interfaces_found)
 80165dc:	4294      	cmp	r4, r2
 80165de:	d200      	bcs.n	80165e2 <_ux_device_stack_initialize+0xfe>
 80165e0:	0014      	movs	r4, r2
                local_endpoints_found += endpoints_in_interface_found;
 80165e2:	18c3      	adds	r3, r0, r3
                if (local_endpoints_found > endpoints_found)
 80165e4:	459c      	cmp	ip, r3
 80165e6:	d200      	bcs.n	80165ea <_ux_device_stack_initialize+0x106>
 80165e8:	469c      	mov	ip, r3
                endpoints_in_interface_found  =  0;
 80165ea:	2300      	movs	r3, #0
                local_endpoints_found         =  0;
 80165ec:	0018      	movs	r0, r3
                local_interfaces_found =  0;
 80165ee:	001a      	movs	r2, r3
 80165f0:	e7eb      	b.n	80165ca <_ux_device_stack_initialize+0xe6>
        if (status == UX_SUCCESS &&
 80165f2:	9902      	ldr	r1, [sp, #8]
 80165f4:	290f      	cmp	r1, #15
 80165f6:	d906      	bls.n	8016606 <_ux_device_stack_initialize+0x122>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 80165f8:	2212      	movs	r2, #18
 80165fa:	2103      	movs	r1, #3
 80165fc:	2002      	movs	r0, #2
 80165fe:	f000 f9e9 	bl	80169d4 <_ux_system_error_handler>
    if (status == UX_SUCCESS)
 8016602:	2612      	movs	r6, #18
 8016604:	e7ba      	b.n	801657c <_ux_device_stack_initialize+0x98>
        local_endpoints_found += endpoints_in_interface_found;
 8016606:	18c4      	adds	r4, r0, r3
        if (local_endpoints_found > endpoints_found)
 8016608:	4564      	cmp	r4, ip
 801660a:	d200      	bcs.n	801660e <_ux_device_stack_initialize+0x12a>
 801660c:	4664      	mov	r4, ip
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801660e:	002b      	movs	r3, r5
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8016610:	2100      	movs	r1, #0
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8016612:	33bc      	adds	r3, #188	@ 0xbc
 8016614:	601a      	str	r2, [r3, #0]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8016616:	609c      	str	r4, [r3, #8]
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8016618:	0008      	movs	r0, r1
 801661a:	2320      	movs	r3, #32
 801661c:	f000 fb00 	bl	8016c20 <_ux_utility_memory_allocate_mulc_safe>
        if (interfaces_pool == UX_NULL)
 8016620:	2800      	cmp	r0, #0
 8016622:	d0ee      	beq.n	8016602 <_ux_device_stack_initialize+0x11e>
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8016624:	002b      	movs	r3, r5
 8016626:	33b8      	adds	r3, #184	@ 0xb8
 8016628:	6018      	str	r0, [r3, #0]
    if (endpoints_found != 0 && status == UX_SUCCESS)
 801662a:	2c00      	cmp	r4, #0
 801662c:	d009      	beq.n	8016642 <_ux_device_stack_initialize+0x15e>
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 801662e:	2100      	movs	r1, #0
 8016630:	2368      	movs	r3, #104	@ 0x68
 8016632:	0022      	movs	r2, r4
 8016634:	0008      	movs	r0, r1
 8016636:	f000 faf3 	bl	8016c20 <_ux_utility_memory_allocate_mulc_safe>
        if (endpoints_pool == UX_NULL)
 801663a:	2800      	cmp	r0, #0
 801663c:	d0e1      	beq.n	8016602 <_ux_device_stack_initialize+0x11e>
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 801663e:	35c0      	adds	r5, #192	@ 0xc0
 8016640:	6028      	str	r0, [r5, #0]
}
 8016642:	0030      	movs	r0, r6
 8016644:	b005      	add	sp, #20
 8016646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016648:	200030e0 	.word	0x200030e0

0801664c <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 801664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801664e:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016650:	4e0f      	ldr	r6, [pc, #60]	@ (8016690 <_ux_device_stack_interface_delete+0x44>)

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 8016652:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016654:	6833      	ldr	r3, [r6, #0]
 8016656:	9301      	str	r3, [sp, #4]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8016658:	2c00      	cmp	r4, #0
 801665a:	d10a      	bne.n	8016672 <_ux_device_stack_interface_delete+0x26>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 801665c:	9b01      	ldr	r3, [sp, #4]
 801665e:	69aa      	ldr	r2, [r5, #24]
 8016660:	33b4      	adds	r3, #180	@ 0xb4
 8016662:	601a      	str	r2, [r3, #0]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 8016664:	0020      	movs	r0, r4
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 8016666:	606c      	str	r4, [r5, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 8016668:	60ac      	str	r4, [r5, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 801666a:	61ac      	str	r4, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 801666c:	61ec      	str	r4, [r5, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 801666e:	602c      	str	r4, [r5, #0]
}
 8016670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8016672:	6830      	ldr	r0, [r6, #0]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8016674:	0022      	movs	r2, r4
 8016676:	6983      	ldr	r3, [r0, #24]
 8016678:	210f      	movs	r1, #15
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801667a:	6967      	ldr	r7, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 801667c:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801667e:	2300      	movs	r3, #0
 8016680:	6023      	str	r3, [r4, #0]
        endpoint -> ux_slave_endpoint_state =  0;
 8016682:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8016684:	6163      	str	r3, [r4, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8016686:	61a3      	str	r3, [r4, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8016688:	61e3      	str	r3, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801668a:	003c      	movs	r4, r7
 801668c:	e7e4      	b.n	8016658 <_ux_device_stack_interface_delete+0xc>
 801668e:	46c0      	nop			@ (mov r8, r8)
 8016690:	200030e0 	.word	0x200030e0

08016694 <_ux_device_stack_interface_set>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016694:	4b47      	ldr	r3, [pc, #284]	@ (80167b4 <_ux_device_stack_interface_set+0x120>)
{
 8016696:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016698:	681f      	ldr	r7, [r3, #0]
{
 801669a:	0006      	movs	r6, r0
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 801669c:	003b      	movs	r3, r7
{
 801669e:	000c      	movs	r4, r1
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80166a0:	33b8      	adds	r3, #184	@ 0xb8
 80166a2:	681d      	ldr	r5, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 80166a4:	3304      	adds	r3, #4
 80166a6:	681b      	ldr	r3, [r3, #0]
{
 80166a8:	b085      	sub	sp, #20
    while (interfaces_pool_number != 0)
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d102      	bne.n	80166b4 <_ux_device_stack_interface_set+0x20>
        interfaces_pool_number--;
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
        return(UX_MEMORY_INSUFFICIENT);
 80166ae:	2012      	movs	r0, #18
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);

    /* Return the status to the caller.  */
    return(status);
}
 80166b0:	b005      	add	sp, #20
 80166b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 80166b4:	682a      	ldr	r2, [r5, #0]
 80166b6:	2a00      	cmp	r2, #0
 80166b8:	d002      	beq.n	80166c0 <_ux_device_stack_interface_set+0x2c>
        interface_ptr++;
 80166ba:	3520      	adds	r5, #32
        interfaces_pool_number--;
 80166bc:	3b01      	subs	r3, #1
 80166be:	e7f4      	b.n	80166aa <_ux_device_stack_interface_set+0x16>
    interface_ptr -> ux_slave_interface_status = UX_USED;
 80166c0:	2301      	movs	r3, #1
 80166c2:	602b      	str	r3, [r5, #0]
    _ux_utility_descriptor_parse(device_framework,
 80166c4:	002b      	movs	r3, r5
 80166c6:	2209      	movs	r2, #9
 80166c8:	330c      	adds	r3, #12
 80166ca:	0030      	movs	r0, r6
 80166cc:	493a      	ldr	r1, [pc, #232]	@ (80167b8 <_ux_device_stack_interface_set+0x124>)
 80166ce:	f000 f9e8 	bl	8016aa2 <_ux_utility_descriptor_parse>
    if (device -> ux_slave_device_first_interface == UX_NULL)
 80166d2:	003a      	movs	r2, r7
 80166d4:	32b4      	adds	r2, #180	@ 0xb4
 80166d6:	6813      	ldr	r3, [r2, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d117      	bne.n	801670c <_ux_device_stack_interface_set+0x78>
        device -> ux_slave_device_first_interface =  interface_ptr;
 80166dc:	6015      	str	r5, [r2, #0]
    device =  &_ux_system_slave -> ux_system_slave_device;
 80166de:	003b      	movs	r3, r7
 80166e0:	3324      	adds	r3, #36	@ 0x24
 80166e2:	9303      	str	r3, [sp, #12]
    device_framework_length -=  (ULONG) *device_framework;
 80166e4:	7833      	ldrb	r3, [r6, #0]
 80166e6:	1ae2      	subs	r2, r4, r3
 80166e8:	9201      	str	r2, [sp, #4]
        device_framework +=  descriptor_length;
 80166ea:	18f6      	adds	r6, r6, r3
    while (device_framework_length != 0)
 80166ec:	9b01      	ldr	r3, [sp, #4]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d008      	beq.n	8016704 <_ux_device_stack_interface_set+0x70>
        descriptor_length =  (ULONG) *device_framework;
 80166f2:	7833      	ldrb	r3, [r6, #0]
 80166f4:	9302      	str	r3, [sp, #8]
        descriptor_type =  *(device_framework + 1);
 80166f6:	7873      	ldrb	r3, [r6, #1]
        switch(descriptor_type)
 80166f8:	2b04      	cmp	r3, #4
 80166fa:	d003      	beq.n	8016704 <_ux_device_stack_interface_set+0x70>
 80166fc:	2b05      	cmp	r3, #5
 80166fe:	d00b      	beq.n	8016718 <_ux_device_stack_interface_set+0x84>
 8016700:	2b02      	cmp	r3, #2
 8016702:	d14b      	bne.n	801679c <_ux_device_stack_interface_set+0x108>
    status =  _ux_device_stack_interface_start(interface_ptr);
 8016704:	0028      	movs	r0, r5
 8016706:	f000 f85b 	bl	80167c0 <_ux_device_stack_interface_start>
    return(status);
 801670a:	e7d1      	b.n	80166b0 <_ux_device_stack_interface_set+0x1c>
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801670c:	001a      	movs	r2, r3
 801670e:	699b      	ldr	r3, [r3, #24]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d1fb      	bne.n	801670c <_ux_device_stack_interface_set+0x78>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8016714:	6195      	str	r5, [r2, #24]
 8016716:	e7e2      	b.n	80166de <_ux_device_stack_interface_set+0x4a>
            endpoint = device -> ux_slave_device_endpoints_pool;
 8016718:	003b      	movs	r3, r7
 801671a:	33c0      	adds	r3, #192	@ 0xc0
 801671c:	681c      	ldr	r4, [r3, #0]
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801671e:	3304      	adds	r3, #4
 8016720:	681b      	ldr	r3, [r3, #0]
            while (endpoints_pool_number != 0)
 8016722:	2b00      	cmp	r3, #0
 8016724:	d0c3      	beq.n	80166ae <_ux_device_stack_interface_set+0x1a>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8016726:	6822      	ldr	r2, [r4, #0]
 8016728:	2a00      	cmp	r2, #0
 801672a:	d130      	bne.n	801678e <_ux_device_stack_interface_set+0xfa>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801672c:	2301      	movs	r3, #1
 801672e:	6023      	str	r3, [r4, #0]
            _ux_utility_descriptor_parse(device_framework,
 8016730:	0023      	movs	r3, r4
 8016732:	4922      	ldr	r1, [pc, #136]	@ (80167bc <_ux_device_stack_interface_set+0x128>)
 8016734:	330c      	adds	r3, #12
 8016736:	3206      	adds	r2, #6
 8016738:	0030      	movs	r0, r6
 801673a:	f000 f9b2 	bl	8016aa2 <_ux_utility_descriptor_parse>
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801673e:	4a1d      	ldr	r2, [pc, #116]	@ (80167b4 <_ux_device_stack_interface_set+0x120>)
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8016740:	8a21      	ldrh	r1, [r4, #16]
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8016742:	6812      	ldr	r2, [r2, #0]
            max_transfer_length =
 8016744:	054b      	lsls	r3, r1, #21
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8016746:	32fc      	adds	r2, #252	@ 0xfc
 8016748:	6c92      	ldr	r2, [r2, #72]	@ 0x48
            max_transfer_length =
 801674a:	0d5b      	lsrs	r3, r3, #21
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801674c:	2a02      	cmp	r2, #2
 801674e:	d10c      	bne.n	801676a <_ux_device_stack_interface_set+0xd6>
 8016750:	2001      	movs	r0, #1
 8016752:	7be2      	ldrb	r2, [r4, #15]
 8016754:	4202      	tst	r2, r0
 8016756:	d008      	beq.n	801676a <_ux_device_stack_interface_set+0xd6>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8016758:	20c0      	movs	r0, #192	@ 0xc0
 801675a:	000a      	movs	r2, r1
 801675c:	0140      	lsls	r0, r0, #5
 801675e:	4002      	ands	r2, r0
                if (n_trans)
 8016760:	4201      	tst	r1, r0
 8016762:	d002      	beq.n	801676a <_ux_device_stack_interface_set+0xd6>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8016764:	0ad2      	lsrs	r2, r2, #11
                    n_trans ++;
 8016766:	3201      	adds	r2, #1
                    max_transfer_length *= n_trans;
 8016768:	4353      	muls	r3, r2
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801676a:	6423      	str	r3, [r4, #64]	@ 0x40
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801676c:	2301      	movs	r3, #1
 801676e:	425b      	negs	r3, r3
 8016770:	6563      	str	r3, [r4, #84]	@ 0x54
            endpoint -> ux_slave_endpoint_device =  device;
 8016772:	9b03      	ldr	r3, [sp, #12]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8016774:	0022      	movs	r2, r4
            endpoint -> ux_slave_endpoint_device =  device;
 8016776:	61e3      	str	r3, [r4, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8016778:	210e      	movs	r1, #14
 801677a:	0038      	movs	r0, r7
 801677c:	69bb      	ldr	r3, [r7, #24]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801677e:	62a4      	str	r4, [r4, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8016780:	61a5      	str	r5, [r4, #24]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8016782:	4798      	blx	r3
            if (status != UX_SUCCESS)
 8016784:	2800      	cmp	r0, #0
 8016786:	d005      	beq.n	8016794 <_ux_device_stack_interface_set+0x100>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8016788:	2300      	movs	r3, #0
 801678a:	6023      	str	r3, [r4, #0]
                return(status);
 801678c:	e790      	b.n	80166b0 <_ux_device_stack_interface_set+0x1c>
                endpoint++;
 801678e:	3468      	adds	r4, #104	@ 0x68
               endpoints_pool_number--; 
 8016790:	3b01      	subs	r3, #1
 8016792:	e7c6      	b.n	8016722 <_ux_device_stack_interface_set+0x8e>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8016794:	69eb      	ldr	r3, [r5, #28]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d106      	bne.n	80167a8 <_ux_device_stack_interface_set+0x114>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 801679a:	61ec      	str	r4, [r5, #28]
        device_framework_length -=  descriptor_length;
 801679c:	9b01      	ldr	r3, [sp, #4]
 801679e:	9a02      	ldr	r2, [sp, #8]
 80167a0:	1a9b      	subs	r3, r3, r2
 80167a2:	9301      	str	r3, [sp, #4]
        device_framework +=  descriptor_length;
 80167a4:	0013      	movs	r3, r2
 80167a6:	e7a0      	b.n	80166ea <_ux_device_stack_interface_set+0x56>
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80167a8:	001a      	movs	r2, r3
 80167aa:	695b      	ldr	r3, [r3, #20]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d1fb      	bne.n	80167a8 <_ux_device_stack_interface_set+0x114>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80167b0:	6154      	str	r4, [r2, #20]
 80167b2:	e7f3      	b.n	801679c <_ux_device_stack_interface_set+0x108>
 80167b4:	200030e0 	.word	0x200030e0
 80167b8:	2000023a 	.word	0x2000023a
 80167bc:	20000259 	.word	0x20000259

080167c0 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 80167c0:	b530      	push	{r4, r5, lr}
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 80167c2:	4b15      	ldr	r3, [pc, #84]	@ (8016818 <_ux_device_stack_interface_start+0x58>)
{
 80167c4:	0004      	movs	r4, r0
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 80167c6:	681a      	ldr	r2, [r3, #0]
 80167c8:	7b83      	ldrb	r3, [r0, #14]
{
 80167ca:	b08d      	sub	sp, #52	@ 0x34
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 80167cc:	3340      	adds	r3, #64	@ 0x40
 80167ce:	009b      	lsls	r3, r3, #2
 80167d0:	18d3      	adds	r3, r2, r3
 80167d2:	685d      	ldr	r5, [r3, #4]

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 80167d4:	2d00      	cmp	r5, #0
 80167d6:	d102      	bne.n	80167de <_ux_device_stack_interface_start+0x1e>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 80167d8:	2057      	movs	r0, #87	@ 0x57
        return(status); 
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
}
 80167da:	b00d      	add	sp, #52	@ 0x34
 80167dc:	bd30      	pop	{r4, r5, pc}
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 80167de:	2301      	movs	r3, #1
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 80167e0:	9003      	str	r0, [sp, #12]
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 80167e2:	9301      	str	r3, [sp, #4]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 80167e4:	7c43      	ldrb	r3, [r0, #17]
 80167e6:	9306      	str	r3, [sp, #24]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 80167e8:	7c83      	ldrb	r3, [r0, #18]
 80167ea:	9307      	str	r3, [sp, #28]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 80167ec:	7cc3      	ldrb	r3, [r0, #19]
 80167ee:	9308      	str	r3, [sp, #32]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 80167f0:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 80167f2:	9305      	str	r3, [sp, #20]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 80167f4:	8e53      	ldrh	r3, [r2, #50]	@ 0x32
    class_ptr -> ux_slave_class_interface = interface_ptr;
 80167f6:	6628      	str	r0, [r5, #96]	@ 0x60
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 80167f8:	9304      	str	r3, [sp, #16]
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 80167fa:	a801      	add	r0, sp, #4
 80167fc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80167fe:	4798      	blx	r3
    if (status == UX_SUCCESS)
 8016800:	2800      	cmp	r0, #0
 8016802:	d1e9      	bne.n	80167d8 <_ux_device_stack_interface_start+0x18>
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016804:	2302      	movs	r3, #2
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8016806:	9509      	str	r5, [sp, #36]	@ 0x24
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016808:	9301      	str	r3, [sp, #4]
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801680a:	a801      	add	r0, sp, #4
 801680c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801680e:	4798      	blx	r3
        if(status == UX_SUCCESS)
 8016810:	2800      	cmp	r0, #0
 8016812:	d1e2      	bne.n	80167da <_ux_device_stack_interface_start+0x1a>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 8016814:	6065      	str	r5, [r4, #4]
 8016816:	e7e0      	b.n	80167da <_ux_device_stack_interface_start+0x1a>
 8016818:	200030e0 	.word	0x200030e0

0801681c <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 801681c:	b570      	push	{r4, r5, r6, lr}
 801681e:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016820:	4b15      	ldr	r3, [pc, #84]	@ (8016878 <_ux_device_stack_set_feature+0x5c>)
{
 8016822:	0014      	movs	r4, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016824:	6818      	ldr	r0, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8016826:	002a      	movs	r2, r5
 8016828:	2303      	movs	r3, #3
 801682a:	401a      	ands	r2, r3
 801682c:	421d      	tst	r5, r3
 801682e:	d004      	beq.n	801683a <_ux_device_stack_set_feature+0x1e>
 8016830:	2a02      	cmp	r2, #2
 8016832:	d00d      	beq.n	8016850 <_ux_device_stack_set_feature+0x34>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016834:	0002      	movs	r2, r0
 8016836:	323c      	adds	r2, #60	@ 0x3c
 8016838:	e017      	b.n	801686a <_ux_device_stack_set_feature+0x4e>
                return (UX_SUCCESS);
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 801683a:	2354      	movs	r3, #84	@ 0x54
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801683c:	2901      	cmp	r1, #1
 801683e:	d105      	bne.n	801684c <_ux_device_stack_set_feature+0x30>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8016840:	30fc      	adds	r0, #252	@ 0xfc
 8016842:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8016844:	2a00      	cmp	r2, #0
 8016846:	d001      	beq.n	801684c <_ux_device_stack_set_feature+0x30>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8016848:	6541      	str	r1, [r0, #84]	@ 0x54
                return (UX_SUCCESS);
 801684a:	2300      	movs	r3, #0
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
    }
}
 801684c:	0018      	movs	r0, r3
 801684e:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8016850:	0003      	movs	r3, r0
 8016852:	33b4      	adds	r3, #180	@ 0xb4
 8016854:	681b      	ldr	r3, [r3, #0]
        while (interface_ptr != UX_NULL)
 8016856:	2b00      	cmp	r3, #0
 8016858:	d0ec      	beq.n	8016834 <_ux_device_stack_set_feature+0x18>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 801685a:	69da      	ldr	r2, [r3, #28]
            while (endpoint_target != UX_NULL)
 801685c:	2a00      	cmp	r2, #0
 801685e:	d101      	bne.n	8016864 <_ux_device_stack_set_feature+0x48>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8016860:	699b      	ldr	r3, [r3, #24]
 8016862:	e7f8      	b.n	8016856 <_ux_device_stack_set_feature+0x3a>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8016864:	7b91      	ldrb	r1, [r2, #14]
 8016866:	42a1      	cmp	r1, r4
 8016868:	d103      	bne.n	8016872 <_ux_device_stack_set_feature+0x56>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 801686a:	2114      	movs	r1, #20
 801686c:	6983      	ldr	r3, [r0, #24]
 801686e:	4798      	blx	r3
                    return(UX_SUCCESS);
 8016870:	e7eb      	b.n	801684a <_ux_device_stack_set_feature+0x2e>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8016872:	6952      	ldr	r2, [r2, #20]
 8016874:	e7f2      	b.n	801685c <_ux_device_stack_set_feature+0x40>
 8016876:	46c0      	nop			@ (mov r8, r8)
 8016878:	200030e0 	.word	0x200030e0

0801687c <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 801687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UX_SLAVE_CLASS              *class_instance;
ULONG                       class_index;
UINT                        status;


    status = UX_STATE_RESET;
 801687e:	2500      	movs	r5, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8016880:	002e      	movs	r6, r5
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8016882:	4f0e      	ldr	r7, [pc, #56]	@ (80168bc <_ux_device_stack_tasks_run+0x40>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 8016884:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8016886:	6838      	ldr	r0, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 8016888:	2112      	movs	r1, #18
 801688a:	6983      	ldr	r3, [r0, #24]
 801688c:	4798      	blx	r3
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	33fc      	adds	r3, #252	@ 0xfc
 8016892:	685c      	ldr	r4, [r3, #4]
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	33fc      	adds	r3, #252	@ 0xfc
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	42b3      	cmp	r3, r6
 801689c:	d801      	bhi.n	80168a2 <_ux_device_stack_tasks_run+0x26>
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
 801689e:	0028      	movs	r0, r5
 80168a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 80168a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d006      	beq.n	80168b6 <_ux_device_stack_tasks_run+0x3a>
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 80168a8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d003      	beq.n	80168b6 <_ux_device_stack_tasks_run+0x3a>
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 80168ae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80168b0:	4798      	blx	r3
        class_instance ++;
 80168b2:	3464      	adds	r4, #100	@ 0x64
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 80168b4:	4305      	orrs	r5, r0
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80168b6:	3601      	adds	r6, #1
 80168b8:	e7ec      	b.n	8016894 <_ux_device_stack_tasks_run+0x18>
 80168ba:	46c0      	nop			@ (mov r8, r8)
 80168bc:	200030e0 	.word	0x200030e0

080168c0 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 80168c0:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80168c2:	4b0c      	ldr	r3, [pc, #48]	@ (80168f4 <_ux_device_stack_transfer_abort+0x34>)
{
 80168c4:	0004      	movs	r4, r0

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 80168c6:	6241      	str	r1, [r0, #36]	@ 0x24
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80168c8:	681e      	ldr	r6, [r3, #0]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 80168ca:	f002 fb71 	bl	8018fb0 <_ux_utility_interrupt_disable>

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 80168ce:	6823      	ldr	r3, [r4, #0]
    UX_DISABLE
 80168d0:	0005      	movs	r5, r0
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 80168d2:	2b01      	cmp	r3, #1
 80168d4:	d10b      	bne.n	80168ee <_ux_device_stack_transfer_abort+0x2e>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 80168d6:	69b3      	ldr	r3, [r6, #24]
 80168d8:	0022      	movs	r2, r4
 80168da:	210d      	movs	r1, #13
 80168dc:	0030      	movs	r0, r6
 80168de:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 80168e0:	0028      	movs	r0, r5
 80168e2:	f002 fb69 	bl	8018fb8 <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 80168e6:	2304      	movs	r3, #4
 80168e8:	6023      	str	r3, [r4, #0]
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
}
 80168ea:	2000      	movs	r0, #0
 80168ec:	bd70      	pop	{r4, r5, r6, pc}
        UX_RESTORE
 80168ee:	f002 fb63 	bl	8018fb8 <_ux_utility_interrupt_restore>
 80168f2:	e7fa      	b.n	80168ea <_ux_device_stack_transfer_abort+0x2a>
 80168f4:	200030e0 	.word	0x200030e0

080168f8 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 80168f8:	b510      	push	{r4, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80168fa:	3020      	adds	r0, #32
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 80168fc:	f7ff ffe0 	bl	80168c0 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8016900:	2000      	movs	r0, #0
 8016902:	bd10      	pop	{r4, pc}

08016904 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8016904:	b570      	push	{r4, r5, r6, lr}
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8016906:	2500      	movs	r5, #0
 8016908:	6305      	str	r5, [r0, #48]	@ 0x30
{
 801690a:	0004      	movs	r4, r0
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 801690c:	f000 f80a 	bl	8016924 <_ux_device_stack_transfer_run>
 8016910:	0003      	movs	r3, r0
    if (status == UX_STATE_LOCK)
        return(UX_BUSY);
 8016912:	20fe      	movs	r0, #254	@ 0xfe
    if (status == UX_STATE_LOCK)
 8016914:	2b06      	cmp	r3, #6
 8016916:	d003      	beq.n	8016920 <_ux_device_stack_transfer_request+0x1c>
    if (status < UX_STATE_NEXT)
        return(transfer_request -> ux_slave_transfer_request_completion_code);

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 8016918:	0028      	movs	r0, r5
    if (status < UX_STATE_NEXT)
 801691a:	2b03      	cmp	r3, #3
 801691c:	d800      	bhi.n	8016920 <_ux_device_stack_transfer_request+0x1c>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 801691e:	6a60      	ldr	r0, [r4, #36]	@ 0x24

    /* And return the status.  */
    return(status);

#endif
}
 8016920:	bd70      	pop	{r4, r5, r6, pc}
	...

08016924 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 8016924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8016926:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8016928:	0004      	movs	r4, r0
 801692a:	000d      	movs	r5, r1
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 801692c:	2b01      	cmp	r3, #1
 801692e:	d104      	bne.n	801693a <_ux_device_stack_transfer_run+0x16>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8016930:	2300      	movs	r3, #0
 8016932:	6243      	str	r3, [r0, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 8016934:	2004      	movs	r0, #4
 8016936:	6320      	str	r0, [r4, #48]	@ 0x30
        return(UX_STATE_EXIT);
    }

    /* And return the status.  */
    return(status);
}
 8016938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 801693a:	4b25      	ldr	r3, [pc, #148]	@ (80169d0 <_ux_device_stack_transfer_run+0xac>)
 801693c:	681e      	ldr	r6, [r3, #0]
        !(device_state == UX_DEVICE_ADDRESSED) &&
 801693e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8016940:	3b01      	subs	r3, #1
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 8016942:	2b02      	cmp	r3, #2
 8016944:	d905      	bls.n	8016952 <_ux_device_stack_transfer_run+0x2e>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 8016946:	2325      	movs	r3, #37	@ 0x25
 8016948:	6243      	str	r3, [r0, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 801694a:	2300      	movs	r3, #0
        return(UX_STATE_EXIT);
 801694c:	2001      	movs	r0, #1
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 801694e:	6323      	str	r3, [r4, #48]	@ 0x30
        return(UX_STATE_EXIT);
 8016950:	e7f2      	b.n	8016938 <_ux_device_stack_transfer_run+0x14>
    state = transfer_request -> ux_slave_transfer_request_state;
 8016952:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8016954:	6887      	ldr	r7, [r0, #8]
    switch(state)
 8016956:	2920      	cmp	r1, #32
 8016958:	d023      	beq.n	80169a2 <_ux_device_stack_transfer_run+0x7e>
 801695a:	2921      	cmp	r1, #33	@ 0x21
 801695c:	d02a      	beq.n	80169b4 <_ux_device_stack_transfer_run+0x90>
 801695e:	2900      	cmp	r1, #0
 8016960:	d1f3      	bne.n	801694a <_ux_device_stack_transfer_run+0x26>
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8016962:	2303      	movs	r3, #3
 8016964:	7bf8      	ldrb	r0, [r7, #15]
 8016966:	4218      	tst	r0, r3
 8016968:	d02e      	beq.n	80169c8 <_ux_device_stack_transfer_run+0xa4>
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 801696a:	7bb8      	ldrb	r0, [r7, #14]
 801696c:	287f      	cmp	r0, #127	@ 0x7f
 801696e:	d90b      	bls.n	8016988 <_ux_device_stack_transfer_run+0x64>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016970:	62a3      	str	r3, [r4, #40]	@ 0x28
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8016972:	2d00      	cmp	r5, #0
 8016974:	d00a      	beq.n	801698c <_ux_device_stack_transfer_run+0x68>
            (slave_length != 0) && (host_length != slave_length) &&
 8016976:	4295      	cmp	r5, r2
 8016978:	d008      	beq.n	801698c <_ux_device_stack_transfer_run+0x68>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 801697a:	0028      	movs	r0, r5
 801697c:	8a39      	ldrh	r1, [r7, #16]
 801697e:	f7e9 fc79 	bl	8000274 <__aeabi_uidivmod>
            (slave_length != 0) && (host_length != slave_length) &&
 8016982:	424b      	negs	r3, r1
 8016984:	4159      	adcs	r1, r3
 8016986:	e001      	b.n	801698c <_ux_device_stack_transfer_run+0x68>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8016988:	2302      	movs	r3, #2
 801698a:	62a3      	str	r3, [r4, #40]	@ 0x28
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801698c:	2300      	movs	r3, #0
 801698e:	61a3      	str	r3, [r4, #24]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8016990:	68e3      	ldr	r3, [r4, #12]
 8016992:	63a1      	str	r1, [r4, #56]	@ 0x38
 8016994:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8016996:	2301      	movs	r3, #1
 8016998:	6023      	str	r3, [r4, #0]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 801699a:	331f      	adds	r3, #31
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 801699c:	6165      	str	r5, [r4, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 801699e:	61e5      	str	r5, [r4, #28]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 80169a0:	6323      	str	r3, [r4, #48]	@ 0x30
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80169a2:	7bfb      	ldrb	r3, [r7, #15]
 80169a4:	079b      	lsls	r3, r3, #30
 80169a6:	d003      	beq.n	80169b0 <_ux_device_stack_transfer_run+0x8c>
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 80169a8:	687b      	ldr	r3, [r7, #4]
                return(UX_STATE_WAIT);
 80169aa:	2005      	movs	r0, #5
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 80169ac:	2b02      	cmp	r3, #2
 80169ae:	d0c3      	beq.n	8016938 <_ux_device_stack_transfer_run+0x14>
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 80169b0:	2321      	movs	r3, #33	@ 0x21
 80169b2:	6323      	str	r3, [r4, #48]	@ 0x30
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 80169b4:	0022      	movs	r2, r4
 80169b6:	210c      	movs	r1, #12
 80169b8:	0030      	movs	r0, r6
 80169ba:	69b3      	ldr	r3, [r6, #24]
 80169bc:	4798      	blx	r3
        if (status < UX_STATE_WAIT)
 80169be:	2804      	cmp	r0, #4
 80169c0:	d8ba      	bhi.n	8016938 <_ux_device_stack_transfer_run+0x14>
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 80169c2:	2300      	movs	r3, #0
 80169c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80169c6:	e7b7      	b.n	8016938 <_ux_device_stack_transfer_run+0x14>
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 80169c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80169ca:	2b03      	cmp	r3, #3
 80169cc:	d1de      	bne.n	801698c <_ux_device_stack_transfer_run+0x68>
 80169ce:	e7d0      	b.n	8016972 <_ux_device_stack_transfer_run+0x4e>
 80169d0:	200030e0 	.word	0x200030e0

080169d4 <_ux_system_error_handler>:
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 80169d4:	4b05      	ldr	r3, [pc, #20]	@ (80169ec <_ux_system_error_handler+0x18>)
{
 80169d6:	b510      	push	{r4, lr}
    _ux_system -> ux_system_last_error =  error_code;
 80169d8:	681b      	ldr	r3, [r3, #0]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 80169da:	691c      	ldr	r4, [r3, #16]
    _ux_system -> ux_system_last_error =  error_code;
 80169dc:	60da      	str	r2, [r3, #12]
    _ux_system -> ux_system_error_count++;
 80169de:	3401      	adds	r4, #1
 80169e0:	611c      	str	r4, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 80169e2:	695b      	ldr	r3, [r3, #20]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d000      	beq.n	80169ea <_ux_system_error_handler+0x16>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 80169e8:	4798      	blx	r3
    }
}
 80169ea:	bd10      	pop	{r4, pc}
 80169ec:	200030e4 	.word	0x200030e4

080169f0 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80169f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169f2:	0004      	movs	r4, r0
 80169f4:	0015      	movs	r5, r2
 80169f6:	001e      	movs	r6, r3
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
        return(UX_INVALID_PARAMETER);
 80169f8:	20fa      	movs	r0, #250	@ 0xfa
{
 80169fa:	9101      	str	r1, [sp, #4]
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 80169fc:	2c00      	cmp	r4, #0
 80169fe:	d023      	beq.n	8016a48 <_ux_system_initialize+0x58>
 8016a00:	2900      	cmp	r1, #0
 8016a02:	d021      	beq.n	8016a48 <_ux_system_initialize+0x58>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8016a04:	000a      	movs	r2, r1
 8016a06:	0020      	movs	r0, r4
 8016a08:	2100      	movs	r1, #0
 8016a0a:	f000 f9cb 	bl	8016da4 <_ux_utility_memory_set>
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a0e:	0020      	movs	r0, r4
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a10:	0022      	movs	r2, r4
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8016a12:	4f1c      	ldr	r7, [pc, #112]	@ (8016a84 <_ux_system_initialize+0x94>)
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a14:	4b1c      	ldr	r3, [pc, #112]	@ (8016a88 <_ux_system_initialize+0x98>)
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a16:	308d      	adds	r0, #141	@ 0x8d
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a18:	3218      	adds	r2, #24
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a1a:	30ff      	adds	r0, #255	@ 0xff
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8016a1c:	603c      	str	r4, [r7, #0]
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a1e:	601a      	str	r2, [r3, #0]
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a20:	6020      	str	r0, [r4, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8016a22:	2d00      	cmp	r5, #0
 8016a24:	d011      	beq.n	8016a4a <_ux_system_initialize+0x5a>
 8016a26:	2e00      	cmp	r6, #0
 8016a28:	d00f      	beq.n	8016a4a <_ux_system_initialize+0x5a>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a2a:	0023      	movs	r3, r4

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016a2c:	21da      	movs	r1, #218	@ 0xda
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a2e:	33a1      	adds	r3, #161	@ 0xa1
 8016a30:	33ff      	adds	r3, #255	@ 0xff
 8016a32:	6063      	str	r3, [r4, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
    int_memory_pool_start += UX_ALIGN_MIN;
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016a34:	2307      	movs	r3, #7
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016a36:	0049      	lsls	r1, r1, #1
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016a38:	1861      	adds	r1, r4, r1
    int_memory_pool_start += UX_ALIGN_MIN;
 8016a3a:	3107      	adds	r1, #7
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016a3c:	4399      	bics	r1, r3

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8016a3e:	9b01      	ldr	r3, [sp, #4]
 8016a40:	18e4      	adds	r4, r4, r3

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8016a42:	42a1      	cmp	r1, r4
 8016a44:	d304      	bcc.n	8016a50 <_ux_system_initialize+0x60>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8016a46:	2012      	movs	r0, #18
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
}
 8016a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8016a4a:	0003      	movs	r3, r0
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016a4c:	21d0      	movs	r1, #208	@ 0xd0
 8016a4e:	e7f0      	b.n	8016a32 <_ux_system_initialize+0x42>
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8016a50:	1a62      	subs	r2, r4, r1
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 8016a52:	f000 f913 	bl	8016c7c <_ux_utility_memory_byte_pool_create>
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8016a56:	2d00      	cmp	r5, #0
 8016a58:	d011      	beq.n	8016a7e <_ux_system_initialize+0x8e>
 8016a5a:	2e00      	cmp	r6, #0
 8016a5c:	d00f      	beq.n	8016a7e <_ux_system_initialize+0x8e>
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 8016a5e:	2100      	movs	r1, #0
 8016a60:	0028      	movs	r0, r5
 8016a62:	0032      	movs	r2, r6
 8016a64:	f000 f99e 	bl	8016da4 <_ux_utility_memory_set>
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016a68:	2307      	movs	r3, #7
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8016a6a:	1de9      	adds	r1, r5, #7
        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 8016a6c:	19ad      	adds	r5, r5, r6
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016a6e:	4399      	bics	r1, r3
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 8016a70:	42a9      	cmp	r1, r5
 8016a72:	d2e8      	bcs.n	8016a46 <_ux_system_initialize+0x56>
        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8016a74:	683b      	ldr	r3, [r7, #0]
        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 8016a76:	1a6a      	subs	r2, r5, r1
        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8016a78:	6858      	ldr	r0, [r3, #4]
 8016a7a:	f000 f8ff 	bl	8016c7c <_ux_utility_memory_byte_pool_create>
    return(UX_SUCCESS);
 8016a7e:	2000      	movs	r0, #0
 8016a80:	e7e2      	b.n	8016a48 <_ux_system_initialize+0x58>
 8016a82:	46c0      	nop			@ (mov r8, r8)
 8016a84:	200030e4 	.word	0x200030e4
 8016a88:	200030e0 	.word	0x200030e0

08016a8c <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8016a8c:	b510      	push	{r4, lr}
 8016a8e:	0004      	movs	r4, r0
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
            return(UX_INVALID_PARAMETER);
 8016a90:	20fa      	movs	r0, #250	@ 0xfa
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8016a92:	2c00      	cmp	r4, #0
 8016a94:	d004      	beq.n	8016aa0 <_uxe_system_initialize+0x14>
 8016a96:	2900      	cmp	r1, #0
 8016a98:	d002      	beq.n	8016aa0 <_uxe_system_initialize+0x14>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 8016a9a:	0020      	movs	r0, r4
 8016a9c:	f7ff ffa8 	bl	80169f0 <_ux_system_initialize>
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 8016aa0:	bd10      	pop	{r4, pc}

08016aa2 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8016aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016aa4:	0005      	movs	r5, r0

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8016aa6:	000e      	movs	r6, r1
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 8016aa8:	2703      	movs	r7, #3
{
 8016aaa:	001c      	movs	r4, r3
 8016aac:	188b      	adds	r3, r1, r2
 8016aae:	9301      	str	r3, [sp, #4]
    while(descriptor_entries--)
 8016ab0:	9b01      	ldr	r3, [sp, #4]
 8016ab2:	429e      	cmp	r6, r3
 8016ab4:	d100      	bne.n	8016ab8 <_ux_utility_descriptor_parse+0x16>
        }
    }

    /* Return to caller.  */
    return;
}
 8016ab6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        switch(*descriptor_structure++)
 8016ab8:	7833      	ldrb	r3, [r6, #0]
 8016aba:	2b02      	cmp	r3, #2
 8016abc:	d00b      	beq.n	8016ad6 <_ux_utility_descriptor_parse+0x34>
 8016abe:	2b04      	cmp	r3, #4
 8016ac0:	d11a      	bne.n	8016af8 <_ux_utility_descriptor_parse+0x56>
                *descriptor++ =  0;
 8016ac2:	2300      	movs	r3, #0
            while((ALIGN_TYPE) descriptor & 3u)
 8016ac4:	423c      	tst	r4, r7
 8016ac6:	d111      	bne.n	8016aec <_ux_utility_descriptor_parse+0x4a>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8016ac8:	0028      	movs	r0, r5
 8016aca:	f000 f81a 	bl	8016b02 <_ux_utility_long_get>
            raw_descriptor +=  4;
 8016ace:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8016ad0:	c401      	stmia	r4!, {r0}
            break;
 8016ad2:	3601      	adds	r6, #1
 8016ad4:	e7ec      	b.n	8016ab0 <_ux_utility_descriptor_parse+0xe>
                *descriptor++ =  0;
 8016ad6:	2300      	movs	r3, #0
            while((ALIGN_TYPE) descriptor & 1u)
 8016ad8:	2201      	movs	r2, #1
 8016ada:	4214      	tst	r4, r2
 8016adc:	d109      	bne.n	8016af2 <_ux_utility_descriptor_parse+0x50>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8016ade:	0028      	movs	r0, r5
 8016ae0:	f000 f967 	bl	8016db2 <_ux_utility_short_get>
            raw_descriptor += 2;
 8016ae4:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8016ae6:	8020      	strh	r0, [r4, #0]
            descriptor += 2;
 8016ae8:	3402      	adds	r4, #2
            break;
 8016aea:	e7f2      	b.n	8016ad2 <_ux_utility_descriptor_parse+0x30>
                *descriptor++ =  0;
 8016aec:	7023      	strb	r3, [r4, #0]
 8016aee:	3401      	adds	r4, #1
 8016af0:	e7e8      	b.n	8016ac4 <_ux_utility_descriptor_parse+0x22>
                *descriptor++ =  0;
 8016af2:	7023      	strb	r3, [r4, #0]
 8016af4:	3401      	adds	r4, #1
 8016af6:	e7ef      	b.n	8016ad8 <_ux_utility_descriptor_parse+0x36>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8016af8:	782b      	ldrb	r3, [r5, #0]
            raw_descriptor++;
 8016afa:	3501      	adds	r5, #1
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8016afc:	7023      	strb	r3, [r4, #0]
            descriptor ++;
 8016afe:	3401      	adds	r4, #1
 8016b00:	e7e7      	b.n	8016ad2 <_ux_utility_descriptor_parse+0x30>

08016b02 <_ux_utility_long_get>:
    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
    value |=  (ULONG)*address++ << 8;
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;
 8016b02:	7842      	ldrb	r2, [r0, #1]
 8016b04:	7803      	ldrb	r3, [r0, #0]
 8016b06:	0212      	lsls	r2, r2, #8
 8016b08:	431a      	orrs	r2, r3
 8016b0a:	7883      	ldrb	r3, [r0, #2]
 8016b0c:	78c0      	ldrb	r0, [r0, #3]
 8016b0e:	041b      	lsls	r3, r3, #16
 8016b10:	4313      	orrs	r3, r2
 8016b12:	0600      	lsls	r0, r0, #24
 8016b14:	4318      	orrs	r0, r3

    /* Return 32-bit value.  */
    return(value);
}
 8016b16:	4770      	bx	lr

08016b18 <_ux_utility_long_get_big_endian>:


    /* We read a byte at a time from the address.  */
    value =  (ULONG) ((*address++) << 24);
    value |=  (ULONG) ((*address++) << 16);
    value |=  (ULONG) ((*address++) << 8);
 8016b18:	7842      	ldrb	r2, [r0, #1]
 8016b1a:	7803      	ldrb	r3, [r0, #0]
 8016b1c:	0212      	lsls	r2, r2, #8
 8016b1e:	431a      	orrs	r2, r3
 8016b20:	7883      	ldrb	r3, [r0, #2]
 8016b22:	78c0      	ldrb	r0, [r0, #3]
 8016b24:	041b      	lsls	r3, r3, #16
 8016b26:	4313      	orrs	r3, r2
 8016b28:	0600      	lsls	r0, r0, #24
 8016b2a:	4318      	orrs	r0, r3
 8016b2c:	ba00      	rev	r0, r0
    value |=  (ULONG) *address;

    /* Return 32-bit value.  */
    return(value);
}
 8016b2e:	4770      	bx	lr

08016b30 <_ux_utility_long_put>:
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016b30:	0a0b      	lsrs	r3, r1, #8
    *address++ =  (UCHAR) (value & 0xff);
 8016b32:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016b34:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8016b36:	0c0b      	lsrs	r3, r1, #16
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8016b38:	0e09      	lsrs	r1, r1, #24
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8016b3a:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8016b3c:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 8016b3e:	4770      	bx	lr

08016b40 <_ux_utility_long_put_big_endian>:
ULONG   high_word_value;

    /* First we swap the value words.  */
    low_word_value =  value >> 16;
    high_word_value =  value << 16;
    value =  high_word_value | low_word_value;
 8016b40:	2310      	movs	r3, #16
 8016b42:	41d9      	rors	r1, r3

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016b44:	0a0b      	lsrs	r3, r1, #8
 8016b46:	7003      	strb	r3, [r0, #0]
    *address++ =  (UCHAR) (value & 0xff);
 8016b48:	7041      	strb	r1, [r0, #1]
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 8016b4a:	0e0b      	lsrs	r3, r1, #24
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 8016b4c:	0c09      	lsrs	r1, r1, #16
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 8016b4e:	7083      	strb	r3, [r0, #2]
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 8016b50:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 8016b52:	4770      	bx	lr

08016b54 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8016b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b56:	0015      	movs	r5, r2
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 8016b58:	2900      	cmp	r1, #0
 8016b5a:	d121      	bne.n	8016ba0 <_ux_utility_memory_allocate+0x4c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8016b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8016c18 <_ux_utility_memory_allocate+0xc4>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	681c      	ldr	r4, [r3, #0]
    {
        return(UX_NULL);
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 8016b62:	2c00      	cmp	r4, #0
 8016b64:	d019      	beq.n	8016b9a <_ux_utility_memory_allocate+0x46>
    {
        return(UX_NULL);
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 8016b66:	2d00      	cmp	r5, #0
 8016b68:	d017      	beq.n	8016b9a <_ux_utility_memory_allocate+0x46>

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
        memory_alignment =  UX_ALIGN_MIN;
 8016b6a:	2607      	movs	r6, #7
    if (memory_alignment == UX_SAFE_ALIGN)
 8016b6c:	1c43      	adds	r3, r0, #1
 8016b6e:	d003      	beq.n	8016b78 <_ux_utility_memory_allocate+0x24>
    if (memory_alignment < UX_ALIGN_MIN)
 8016b70:	0006      	movs	r6, r0
 8016b72:	2807      	cmp	r0, #7
 8016b74:	d200      	bcs.n	8016b78 <_ux_utility_memory_allocate+0x24>
 8016b76:	2607      	movs	r6, #7
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8016b78:	2307      	movs	r3, #7
 8016b7a:	3507      	adds	r5, #7
 8016b7c:	439d      	bics	r5, r3
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 8016b7e:	0029      	movs	r1, r5
    if (memory_alignment <= UX_ALIGN_MIN)
 8016b80:	429e      	cmp	r6, r3
 8016b82:	d000      	beq.n	8016b86 <_ux_utility_memory_allocate+0x32>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 8016b84:	1971      	adds	r1, r6, r5
 8016b86:	0020      	movs	r0, r4
 8016b88:	f000 f896 	bl	8016cb8 <_ux_utility_memory_byte_pool_search>

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	d10d      	bne.n	8016bac <_ux_utility_memory_allocate+0x58>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8016b90:	2212      	movs	r2, #18
 8016b92:	2108      	movs	r1, #8
 8016b94:	3002      	adds	r0, #2
 8016b96:	f7ff ff1d 	bl	80169d4 <_ux_system_error_handler>
        return(UX_NULL);
 8016b9a:	2400      	movs	r4, #0

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
}
 8016b9c:	0020      	movs	r0, r4
 8016b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 8016ba0:	2901      	cmp	r1, #1
 8016ba2:	d1fa      	bne.n	8016b9a <_ux_utility_memory_allocate+0x46>
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 8016ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8016c18 <_ux_utility_memory_allocate+0xc4>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	685c      	ldr	r4, [r3, #4]
 8016baa:	e7da      	b.n	8016b62 <_ux_utility_memory_allocate+0xe>
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8016bac:	0007      	movs	r7, r0
    next_ptr =             *this_block_link_ptr;
 8016bae:	6801      	ldr	r1, [r0, #0]
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8016bb0:	3708      	adds	r7, #8
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016bb2:	1a0a      	subs	r2, r1, r0
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8016bb4:	3a08      	subs	r2, #8
    if ((int_memory_buffer & memory_alignment) != 0)
 8016bb6:	4237      	tst	r7, r6
 8016bb8:	d00e      	beq.n	8016bd8 <_ux_utility_memory_allocate+0x84>
        int_memory_buffer += memory_alignment;
 8016bba:	0033      	movs	r3, r6
 8016bbc:	3308      	adds	r3, #8
 8016bbe:	19db      	adds	r3, r3, r7
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 8016bc0:	43b3      	bics	r3, r6
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 8016bc2:	3b08      	subs	r3, #8
        *next_block_link_ptr =  *this_block_link_ptr;
 8016bc4:	6019      	str	r1, [r3, #0]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8016bc6:	4915      	ldr	r1, [pc, #84]	@ (8016c1c <_ux_utility_memory_allocate+0xc8>)
 8016bc8:	6059      	str	r1, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 8016bca:	6861      	ldr	r1, [r4, #4]
 8016bcc:	3101      	adds	r1, #1
 8016bce:	6061      	str	r1, [r4, #4]
        *this_block_link_ptr =  next_ptr;
 8016bd0:	6003      	str	r3, [r0, #0]
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016bd2:	1a18      	subs	r0, r3, r0
 8016bd4:	1a12      	subs	r2, r2, r0
        current_ptr = next_ptr;
 8016bd6:	0018      	movs	r0, r3
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 8016bd8:	1b53      	subs	r3, r2, r5
 8016bda:	2b13      	cmp	r3, #19
 8016bdc:	d90b      	bls.n	8016bf6 <_ux_utility_memory_allocate+0xa2>
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8016bde:	002b      	movs	r3, r5
        *next_block_link_ptr =  *this_block_link_ptr;
 8016be0:	6802      	ldr	r2, [r0, #0]
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8016be2:	3308      	adds	r3, #8
 8016be4:	18c3      	adds	r3, r0, r3
        *next_block_link_ptr =  *this_block_link_ptr;
 8016be6:	601a      	str	r2, [r3, #0]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8016be8:	4a0c      	ldr	r2, [pc, #48]	@ (8016c1c <_ux_utility_memory_allocate+0xc8>)
 8016bea:	605a      	str	r2, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 8016bec:	6862      	ldr	r2, [r4, #4]
 8016bee:	3201      	adds	r2, #1
 8016bf0:	6062      	str	r2, [r4, #4]
        available_bytes =  memory_size_requested;
 8016bf2:	002a      	movs	r2, r5
        *this_block_link_ptr =  next_ptr;
 8016bf4:	6003      	str	r3, [r0, #0]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8016bf6:	6823      	ldr	r3, [r4, #0]
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8016bf8:	6044      	str	r4, [r0, #4]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8016bfa:	3b08      	subs	r3, #8
 8016bfc:	1a9b      	subs	r3, r3, r2
 8016bfe:	6023      	str	r3, [r4, #0]
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 8016c00:	68a3      	ldr	r3, [r4, #8]
 8016c02:	4283      	cmp	r3, r0
 8016c04:	d101      	bne.n	8016c0a <_ux_utility_memory_allocate+0xb6>
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 8016c06:	6803      	ldr	r3, [r0, #0]
 8016c08:	60a3      	str	r3, [r4, #8]
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016c0a:	3008      	adds	r0, #8
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8016c0c:	2100      	movs	r1, #0
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016c0e:	0004      	movs	r4, r0
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8016c10:	f000 f8c8 	bl	8016da4 <_ux_utility_memory_set>
    return(work_ptr);
 8016c14:	e7c2      	b.n	8016b9c <_ux_utility_memory_allocate+0x48>
 8016c16:	46c0      	nop			@ (mov r8, r8)
 8016c18:	200030e4 	.word	0x200030e4
 8016c1c:	ffffeeee 	.word	0xffffeeee

08016c20 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8016c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d011      	beq.n	8016c4a <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8016c26:	0c1c      	lsrs	r4, r3, #16
 8016c28:	0c17      	lsrs	r7, r2, #16
 8016c2a:	2c00      	cmp	r4, #0
 8016c2c:	d111      	bne.n	8016c52 <_ux_utility_memory_allocate_mulc_safe+0x32>
 8016c2e:	2f00      	cmp	r7, #0
 8016c30:	d00b      	beq.n	8016c4a <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8016c32:	1c3c      	adds	r4, r7, #0
 8016c34:	1c1e      	adds	r6, r3, #0
 8016c36:	b29f      	uxth	r7, r3
 8016c38:	b295      	uxth	r5, r2
 8016c3a:	437d      	muls	r5, r7
 8016c3c:	b2b6      	uxth	r6, r6
 8016c3e:	b2a4      	uxth	r4, r4
 8016c40:	4374      	muls	r4, r6
 8016c42:	0c2d      	lsrs	r5, r5, #16
 8016c44:	1964      	adds	r4, r4, r5
 8016c46:	0c24      	lsrs	r4, r4, #16
 8016c48:	d107      	bne.n	8016c5a <_ux_utility_memory_allocate_mulc_safe+0x3a>
 8016c4a:	435a      	muls	r2, r3
 8016c4c:	f7ff ff82 	bl	8016b54 <_ux_utility_memory_allocate>
}
 8016c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8016c52:	2f00      	cmp	r7, #0
 8016c54:	d101      	bne.n	8016c5a <_ux_utility_memory_allocate_mulc_safe+0x3a>
 8016c56:	1c16      	adds	r6, r2, #0
 8016c58:	e7ed      	b.n	8016c36 <_ux_utility_memory_allocate_mulc_safe+0x16>
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	e7f8      	b.n	8016c50 <_ux_utility_memory_allocate_mulc_safe+0x30>

08016c5e <_ux_utility_memory_allocate_mulv_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulv_safe(ULONG align,ULONG cache,ULONG size_mul_v0,ULONG size_mul_v1)
{
 8016c5e:	b570      	push	{r4, r5, r6, lr}
 8016c60:	0014      	movs	r4, r2
    return UX_UTILITY_MEMORY_ALLOCATE_MULV_SAFE(align, cache, size_mul_v0, size_mul_v1);
 8016c62:	001a      	movs	r2, r3
{
 8016c64:	0005      	movs	r5, r0
    return UX_UTILITY_MEMORY_ALLOCATE_MULV_SAFE(align, cache, size_mul_v0, size_mul_v1);
 8016c66:	4362      	muls	r2, r4
 8016c68:	429c      	cmp	r4, r3
 8016c6a:	d900      	bls.n	8016c6e <_ux_utility_memory_allocate_mulv_safe+0x10>
 8016c6c:	001c      	movs	r4, r3
 8016c6e:	2000      	movs	r0, #0
 8016c70:	42a2      	cmp	r2, r4
 8016c72:	d302      	bcc.n	8016c7a <_ux_utility_memory_allocate_mulv_safe+0x1c>
 8016c74:	0028      	movs	r0, r5
 8016c76:	f7ff ff6d 	bl	8016b54 <_ux_utility_memory_allocate>
}
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}

08016c7c <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	000c      	movs	r4, r1
 8016c80:	0016      	movs	r6, r2
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 8016c82:	2100      	movs	r1, #0
 8016c84:	2214      	movs	r2, #20
{
 8016c86:	0005      	movs	r5, r0
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 8016c88:	f000 f88c 	bl	8016da4 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8016c8c:	2303      	movs	r3, #3
 8016c8e:	439e      	bics	r6, r3

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8016c90:	0033      	movs	r3, r6
 8016c92:	3b08      	subs	r3, #8
 8016c94:	602b      	str	r3, [r5, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 8016c96:	2302      	movs	r3, #2
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8016c98:	19a2      	adds	r2, r4, r6
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 8016c9a:	606b      	str	r3, [r5, #4]
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
    *block_indirect_ptr =  temp_ptr;
 8016c9c:	1f13      	subs	r3, r2, #4
    pool_ptr -> ux_byte_pool_size =    pool_size;
 8016c9e:	612e      	str	r6, [r5, #16]
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016ca0:	60ec      	str	r4, [r5, #12]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016ca2:	60ac      	str	r4, [r5, #8]
    *block_indirect_ptr =  temp_ptr;
 8016ca4:	601d      	str	r5, [r3, #0]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
    *block_indirect_ptr =  block_ptr;
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8016ca6:	4b03      	ldr	r3, [pc, #12]	@ (8016cb4 <_ux_utility_memory_byte_pool_create+0x38>)
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016ca8:	3a08      	subs	r2, #8
 8016caa:	6014      	str	r4, [r2, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
}
 8016cac:	2000      	movs	r0, #0
    *block_indirect_ptr =  block_ptr;
 8016cae:	6022      	str	r2, [r4, #0]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8016cb0:	6063      	str	r3, [r4, #4]
}
 8016cb2:	bd70      	pop	{r4, r5, r6, pc}
 8016cb4:	ffffeeee 	.word	0xffffeeee

08016cb8 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8016cb8:	0003      	movs	r3, r0
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8016cba:	6842      	ldr	r2, [r0, #4]
{
 8016cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8016cbe:	1e90      	subs	r0, r2, #2
 8016cc0:	681c      	ldr	r4, [r3, #0]
 8016cc2:	00c0      	lsls	r0, r0, #3
 8016cc4:	1900      	adds	r0, r0, r4
    if (memory_size >= total_theoretical_available)
 8016cc6:	4288      	cmp	r0, r1
 8016cc8:	d801      	bhi.n	8016cce <_ux_utility_memory_byte_pool_search+0x16>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 8016cca:	2000      	movs	r0, #0
        return(UX_NULL);
    }

    /* Return the search pointer.  */
    return(current_ptr);
}
 8016ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8016cce:	6898      	ldr	r0, [r3, #8]
 8016cd0:	68dc      	ldr	r4, [r3, #12]
 8016cd2:	42a0      	cmp	r0, r4
 8016cd4:	d3f9      	bcc.n	8016cca <_ux_utility_memory_byte_pool_search+0x12>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 8016cd6:	691d      	ldr	r5, [r3, #16]
 8016cd8:	1964      	adds	r4, r4, r5
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8016cda:	42a0      	cmp	r0, r4
 8016cdc:	d8f5      	bhi.n	8016cca <_ux_utility_memory_byte_pool_search+0x12>
UINT                first_free_block_found =  UX_FALSE;
 8016cde:	2400      	movs	r4, #0
                        examine_blocks--;
 8016ce0:	2701      	movs	r7, #1
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 8016ce2:	3201      	adds	r2, #1
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016ce4:	6845      	ldr	r5, [r0, #4]
 8016ce6:	4e15      	ldr	r6, [pc, #84]	@ (8016d3c <_ux_utility_memory_byte_pool_search+0x84>)
 8016ce8:	42b5      	cmp	r5, r6
 8016cea:	d122      	bne.n	8016d32 <_ux_utility_memory_byte_pool_search+0x7a>
            if (first_free_block_found == UX_FALSE)
 8016cec:	2c00      	cmp	r4, #0
 8016cee:	d100      	bne.n	8016cf2 <_ux_utility_memory_byte_pool_search+0x3a>
                pool_ptr->ux_byte_pool_search =  current_ptr;
 8016cf0:	6098      	str	r0, [r3, #8]
            next_ptr =             *this_block_link_ptr;
 8016cf2:	6805      	ldr	r5, [r0, #0]
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016cf4:	1a2c      	subs	r4, r5, r0
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8016cf6:	3c08      	subs	r4, #8
            if (available_bytes >= memory_size)
 8016cf8:	42a1      	cmp	r1, r4
 8016cfa:	d91c      	bls.n	8016d36 <_ux_utility_memory_byte_pool_search+0x7e>
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016cfc:	686e      	ldr	r6, [r5, #4]
                    *this_block_link_ptr =  *next_block_link_ptr;
 8016cfe:	682c      	ldr	r4, [r5, #0]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016d00:	46b4      	mov	ip, r6
 8016d02:	4e0e      	ldr	r6, [pc, #56]	@ (8016d3c <_ux_utility_memory_byte_pool_search+0x84>)
 8016d04:	45b4      	cmp	ip, r6
 8016d06:	d10f      	bne.n	8016d28 <_ux_utility_memory_byte_pool_search+0x70>
                    *this_block_link_ptr =  *next_block_link_ptr;
 8016d08:	6004      	str	r4, [r0, #0]
                    pool_ptr -> ux_byte_pool_fragments--;
 8016d0a:	685c      	ldr	r4, [r3, #4]
 8016d0c:	3c01      	subs	r4, #1
 8016d0e:	605c      	str	r4, [r3, #4]
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 8016d10:	689c      	ldr	r4, [r3, #8]
 8016d12:	42ac      	cmp	r4, r5
 8016d14:	d006      	beq.n	8016d24 <_ux_utility_memory_byte_pool_search+0x6c>
                        examine_blocks--;
 8016d16:	003c      	movs	r4, r7
        if (examine_blocks != ((UINT) 0))
 8016d18:	2a00      	cmp	r2, #0
 8016d1a:	d0d6      	beq.n	8016cca <_ux_utility_memory_byte_pool_search+0x12>
            examine_blocks--;
 8016d1c:	3a01      	subs	r2, #1
    } while(examine_blocks != ((UINT) 0));
 8016d1e:	2a00      	cmp	r2, #0
 8016d20:	d1e0      	bne.n	8016ce4 <_ux_utility_memory_byte_pool_search+0x2c>
 8016d22:	e7d2      	b.n	8016cca <_ux_utility_memory_byte_pool_search+0x12>
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 8016d24:	6098      	str	r0, [r3, #8]
 8016d26:	e7f6      	b.n	8016d16 <_ux_utility_memory_byte_pool_search+0x5e>
                    if (examine_blocks != ((UINT) 0))
 8016d28:	2a00      	cmp	r2, #0
 8016d2a:	d0ce      	beq.n	8016cca <_ux_utility_memory_byte_pool_search+0x12>
                    current_ptr =  *next_block_link_ptr;
 8016d2c:	0020      	movs	r0, r4
                        examine_blocks--;
 8016d2e:	3a01      	subs	r2, #1
 8016d30:	e7f1      	b.n	8016d16 <_ux_utility_memory_byte_pool_search+0x5e>
            current_ptr =  *this_block_link_ptr;
 8016d32:	6800      	ldr	r0, [r0, #0]
 8016d34:	e7f0      	b.n	8016d18 <_ux_utility_memory_byte_pool_search+0x60>
    if (available_bytes == ((ULONG) 0))
 8016d36:	2c00      	cmp	r4, #0
 8016d38:	d1c8      	bne.n	8016ccc <_ux_utility_memory_byte_pool_search+0x14>
 8016d3a:	e7c6      	b.n	8016cca <_ux_utility_memory_byte_pool_search+0x12>
 8016d3c:	ffffeeee 	.word	0xffffeeee

08016d40 <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
 8016d40:	2300      	movs	r3, #0
{
 8016d42:	b510      	push	{r4, lr}
    while(length--)
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d100      	bne.n	8016d4a <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
 8016d48:	bd10      	pop	{r4, pc}
        *destination++ =  *source++;
 8016d4a:	5ccc      	ldrb	r4, [r1, r3]
 8016d4c:	54c4      	strb	r4, [r0, r3]
 8016d4e:	3301      	adds	r3, #1
 8016d50:	e7f8      	b.n	8016d44 <_ux_utility_memory_copy+0x4>
	...

08016d54 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8016d54:	b570      	push	{r4, r5, r6, lr}
    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
    if (work_ptr != UX_NULL)
 8016d56:	2800      	cmp	r0, #0
 8016d58:	d00e      	beq.n	8016d78 <_ux_utility_memory_free+0x24>
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 8016d5a:	1f02      	subs	r2, r0, #4
 8016d5c:	6813      	ldr	r3, [r2, #0]
 8016d5e:	490f      	ldr	r1, [pc, #60]	@ (8016d9c <_ux_utility_memory_free+0x48>)
 8016d60:	428b      	cmp	r3, r1
 8016d62:	d009      	beq.n	8016d78 <_ux_utility_memory_free+0x24>
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
            pool_ptr = *byte_pool_ptr;

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d007      	beq.n	8016d78 <_ux_utility_memory_free+0x24>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8016d68:	4c0d      	ldr	r4, [pc, #52]	@ (8016da0 <_ux_utility_memory_free+0x4c>)
 8016d6a:	6824      	ldr	r4, [r4, #0]
            if ((pool_ptr == UX_NULL) ||
 8016d6c:	6825      	ldr	r5, [r4, #0]
 8016d6e:	429d      	cmp	r5, r3
 8016d70:	d008      	beq.n	8016d84 <_ux_utility_memory_free+0x30>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8016d72:	6864      	ldr	r4, [r4, #4]
 8016d74:	429c      	cmp	r4, r3
 8016d76:	d005      	beq.n	8016d84 <_ux_utility_memory_free+0x30>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8016d78:	2219      	movs	r2, #25
 8016d7a:	2108      	movs	r1, #8
 8016d7c:	2002      	movs	r0, #2
 8016d7e:	f7ff fe29 	bl	80169d4 <_ux_system_error_handler>
    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
}
 8016d82:	bd70      	pop	{r4, r5, r6, pc}
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016d84:	3808      	subs	r0, #8
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 8016d86:	6011      	str	r1, [r2, #0]
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8016d88:	6801      	ldr	r1, [r0, #0]
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	1a09      	subs	r1, r1, r0
 8016d8e:	1852      	adds	r2, r2, r1
    pool_ptr -> ux_byte_pool_available =
 8016d90:	601a      	str	r2, [r3, #0]
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 8016d92:	689a      	ldr	r2, [r3, #8]
 8016d94:	4282      	cmp	r2, r0
 8016d96:	d9f4      	bls.n	8016d82 <_ux_utility_memory_free+0x2e>
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 8016d98:	6098      	str	r0, [r3, #8]
 8016d9a:	e7f2      	b.n	8016d82 <_ux_utility_memory_free+0x2e>
 8016d9c:	ffffeeee 	.word	0xffffeeee
 8016da0:	200030e4 	.word	0x200030e4

08016da4 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 8016da4:	1882      	adds	r2, r0, r2
 8016da6:	4290      	cmp	r0, r2
 8016da8:	d100      	bne.n	8016dac <_ux_utility_memory_set+0x8>
        *work_ptr++ =  value;
    }

    /* Return to caller.  */
    return; 
}
 8016daa:	4770      	bx	lr
        *work_ptr++ =  value;
 8016dac:	7001      	strb	r1, [r0, #0]
 8016dae:	3001      	adds	r0, #1
 8016db0:	e7f9      	b.n	8016da6 <_ux_utility_memory_set+0x2>

08016db2 <_ux_utility_short_get>:


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);
 8016db2:	7803      	ldrb	r3, [r0, #0]
 8016db4:	7840      	ldrb	r0, [r0, #1]
 8016db6:	0200      	lsls	r0, r0, #8

    /* Return to caller.  */
    return((ULONG) value);
 8016db8:	4318      	orrs	r0, r3
}
 8016dba:	4770      	bx	lr

08016dbc <_ux_utility_short_get_big_endian>:
    /* We read a byte at a time from the address.  */
    value =  (USHORT)((*address++) << 8);
    value =  (USHORT)(value | *address);

    /* Return 16-bit value.  */
    return((ULONG) value);
 8016dbc:	7803      	ldrb	r3, [r0, #0]
 8016dbe:	7840      	ldrb	r0, [r0, #1]
 8016dc0:	0200      	lsls	r0, r0, #8
 8016dc2:	4318      	orrs	r0, r3
 8016dc4:	ba40      	rev16	r0, r0
 8016dc6:	b280      	uxth	r0, r0
}
 8016dc8:	4770      	bx	lr

08016dca <_ux_utility_short_put_big_endian>:

    
    /* First we swap the value bytes. */
    low_byte_value =  value >> 8;
    high_byte_value =  (USHORT)(value<< 8);
    value =  high_byte_value | low_byte_value;
 8016dca:	ba49      	rev16	r1, r1
 8016dcc:	b289      	uxth	r1, r1

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8016dce:	7001      	strb	r1, [r0, #0]
    *address=     (UCHAR) ((value >> 8) & 0xff);
 8016dd0:	0a09      	lsrs	r1, r1, #8
 8016dd2:	7041      	strb	r1, [r0, #1]

    /* Return to caller. */
    return;
}
 8016dd4:	4770      	bx	lr

08016dd6 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8016dd6:	b510      	push	{r4, lr}

UINT    string_length;


    if (string == UX_NULL)
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d00b      	beq.n	8016df4 <_ux_utility_string_length_check+0x1e>
        return(UX_ERROR);

    string_length = 0;
 8016ddc:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 8016dde:	5cc4      	ldrb	r4, [r0, r3]
 8016de0:	2c00      	cmp	r4, #0
 8016de2:	d009      	beq.n	8016df8 <_ux_utility_string_length_check+0x22>
            break;

        string_length++;
 8016de4:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d9f9      	bls.n	8016dde <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8016dea:	22ff      	movs	r2, #255	@ 0xff
 8016dec:	2108      	movs	r1, #8
 8016dee:	2002      	movs	r0, #2
 8016df0:	f7ff fdf0 	bl	80169d4 <_ux_system_error_handler>
        return(UX_ERROR);
 8016df4:	20ff      	movs	r0, #255	@ 0xff
 8016df6:	e002      	b.n	8016dfe <_ux_utility_string_length_check+0x28>

            return(UX_ERROR);
        }
    }

    if (string_length_ptr)
 8016df8:	2900      	cmp	r1, #0
 8016dfa:	d101      	bne.n	8016e00 <_ux_utility_string_length_check+0x2a>
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
 8016dfc:	2000      	movs	r0, #0
}
 8016dfe:	bd10      	pop	{r4, pc}
        *string_length_ptr = string_length;
 8016e00:	600b      	str	r3, [r1, #0]
 8016e02:	e7fb      	b.n	8016dfc <_ux_utility_string_length_check+0x26>

08016e04 <_ux_device_class_hid_activate>:
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
 8016e04:	2200      	movs	r2, #0

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016e06:	6a03      	ldr	r3, [r0, #32]
{
 8016e08:	b570      	push	{r4, r5, r6, lr}
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016e0a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8016e0c:	0015      	movs	r5, r2

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8016e0e:	6883      	ldr	r3, [r0, #8]
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8016e10:	2003      	movs	r0, #3
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 8016e12:	609c      	str	r4, [r3, #8]
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 8016e14:	6023      	str	r3, [r4, #0]
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 8016e16:	69db      	ldr	r3, [r3, #28]
    while (endpoint_interrupt != UX_NULL)
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d103      	bne.n	8016e24 <_ux_device_class_hid_activate+0x20>
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
        return (UX_ERROR);
 8016e1c:	20ff      	movs	r0, #255	@ 0xff
    if (endpoint_in == UX_NULL)
 8016e1e:	2d00      	cmp	r5, #0
 8016e20:	d113      	bne.n	8016e4a <_ux_device_class_hid_activate+0x46>
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8016e22:	bd70      	pop	{r4, r5, r6, pc}
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8016e24:	7bd9      	ldrb	r1, [r3, #15]
 8016e26:	4001      	ands	r1, r0
 8016e28:	2903      	cmp	r1, #3
 8016e2a:	d108      	bne.n	8016e3e <_ux_device_class_hid_activate+0x3a>
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8016e2c:	7b9e      	ldrb	r6, [r3, #14]
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 8016e2e:	68a1      	ldr	r1, [r4, #8]
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8016e30:	2e7f      	cmp	r6, #127	@ 0x7f
 8016e32:	d906      	bls.n	8016e42 <_ux_device_class_hid_activate+0x3e>
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 8016e34:	3108      	adds	r1, #8
                endpoint_in = endpoint_interrupt;
 8016e36:	001d      	movs	r5, r3
                        ux_slave_transfer_request_data_pointer =
 8016e38:	62d9      	str	r1, [r3, #44]	@ 0x2c
                if (endpoint_out != UX_NULL)
 8016e3a:	2a00      	cmp	r2, #0
 8016e3c:	d105      	bne.n	8016e4a <_ux_device_class_hid_activate+0x46>
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 8016e3e:	695b      	ldr	r3, [r3, #20]
 8016e40:	e7ea      	b.n	8016e18 <_ux_device_class_hid_activate+0x14>
                endpoint_out = endpoint_interrupt;
 8016e42:	001a      	movs	r2, r3
                        ux_slave_transfer_request_data_pointer =
 8016e44:	62d9      	str	r1, [r3, #44]	@ 0x2c
                if (endpoint_in != UX_NULL)
 8016e46:	2d00      	cmp	r5, #0
 8016e48:	d0f9      	beq.n	8016e3e <_ux_device_class_hid_activate+0x3a>
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 8016e4a:	2301      	movs	r3, #1
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 8016e4c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 8016e4e:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 8016e50:	6065      	str	r5, [r4, #4]
    hid -> ux_device_class_hid_read_endpoint              = endpoint_out;
 8016e52:	6662      	str	r2, [r4, #100]	@ 0x64
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 8016e54:	2900      	cmp	r1, #0
 8016e56:	d00a      	beq.n	8016e6e <_ux_device_class_hid_activate+0x6a>
 8016e58:	2a00      	cmp	r2, #0
 8016e5a:	d008      	beq.n	8016e6e <_ux_device_class_hid_activate+0x6a>
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 8016e5c:	68cb      	ldr	r3, [r1, #12]
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 8016e5e:	690a      	ldr	r2, [r1, #16]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_save_pos =
 8016e60:	618b      	str	r3, [r1, #24]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_read_pos =
 8016e62:	614b      	str	r3, [r1, #20]
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 8016e64:	2100      	movs	r1, #0
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d810      	bhi.n	8016e8c <_ux_device_class_hid_activate+0x88>
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8016e6a:	2323      	movs	r3, #35	@ 0x23
 8016e6c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    _ux_utility_memory_set((VOID *)&hid -> ux_device_class_hid_event, 0,
 8016e6e:	0020      	movs	r0, r4
 8016e70:	2210      	movs	r2, #16
 8016e72:	2100      	movs	r1, #0
 8016e74:	3034      	adds	r0, #52	@ 0x34
 8016e76:	f7ff ff95 	bl	8016da4 <_ux_utility_memory_set>
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
 8016e7a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8016e7c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 8016e82:	69a3      	ldr	r3, [r4, #24]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d104      	bne.n	8016e92 <_ux_device_class_hid_activate+0x8e>
    return(UX_SUCCESS);
 8016e88:	2000      	movs	r0, #0
 8016e8a:	e7ca      	b.n	8016e22 <_ux_device_class_hid_activate+0x1e>
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 8016e8c:	6019      	str	r1, [r3, #0]
             pos += UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(hid -> ux_device_class_hid_receiver))
 8016e8e:	3308      	adds	r3, #8
 8016e90:	e7e9      	b.n	8016e66 <_ux_device_class_hid_activate+0x62>
        hid -> ux_slave_class_hid_instance_activate(hid);
 8016e92:	0020      	movs	r0, r4
 8016e94:	4798      	blx	r3
 8016e96:	e7f7      	b.n	8016e88 <_ux_device_class_hid_activate+0x84>

08016e98 <_ux_device_class_hid_control_request>:
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016e98:	4b34      	ldr	r3, [pc, #208]	@ (8016f6c <_ux_device_class_hid_control_request+0xd4>)
{
 8016e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016e9c:	681e      	ldr	r6, [r3, #0]
{
 8016e9e:	0004      	movs	r4, r0

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8016ea0:	0033      	movs	r3, r6

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016ea2:	0030      	movs	r0, r6
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8016ea4:	335c      	adds	r3, #92	@ 0x5c
 8016ea6:	9301      	str	r3, [sp, #4]
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016ea8:	333d      	adds	r3, #61	@ 0x3d
 8016eaa:	781b      	ldrb	r3, [r3, #0]
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016eac:	309a      	adds	r0, #154	@ 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016eae:	9300      	str	r3, [sp, #0]
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016eb0:	f7ff ff7f 	bl	8016db2 <_ux_utility_short_get>
 8016eb4:	0005      	movs	r5, r0
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8016eb6:	0030      	movs	r0, r6
 8016eb8:	309c      	adds	r0, #156	@ 0x9c
 8016eba:	f7ff ff7a 	bl	8016db2 <_ux_utility_short_get>
 8016ebe:	0007      	movs	r7, r0
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8016ec0:	0030      	movs	r0, r6
 8016ec2:	309e      	adds	r0, #158	@ 0x9e
 8016ec4:	f7ff ff75 	bl	8016db2 <_ux_utility_short_get>

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016ec8:	0032      	movs	r2, r6
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016eca:	6a21      	ldr	r1, [r4, #32]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8016ecc:	0003      	movs	r3, r0
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016ece:	6c8c      	ldr	r4, [r1, #72]	@ 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8016ed0:	9900      	ldr	r1, [sp, #0]
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016ed2:	329b      	adds	r2, #155	@ 0x9b
    switch (request)
 8016ed4:	1e48      	subs	r0, r1, #1
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016ed6:	7812      	ldrb	r2, [r2, #0]
    switch (request)
 8016ed8:	280a      	cmp	r0, #10
 8016eda:	d844      	bhi.n	8016f66 <_ux_device_class_hid_control_request+0xce>
 8016edc:	f7e9 f926 	bl	800012c <__gnu_thumb1_case_uqi>
 8016ee0:	433e1a06 	.word	0x433e1a06
 8016ee4:	43431443 	.word	0x43431443
 8016ee8:	1a0d      	.short	0x1a0d
 8016eea:	41          	.byte	0x41
 8016eeb:	00          	.byte	0x00
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 8016eec:	003a      	movs	r2, r7
 8016eee:	0029      	movs	r1, r5
 8016ef0:	0020      	movs	r0, r4
 8016ef2:	f000 fa81 	bl	80173f8 <_ux_device_class_hid_report_get>
            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8016ef6:	2000      	movs	r0, #0
}
 8016ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            descriptor_type =  (request_value & 0xff00) >> 8;
 8016efa:	0a29      	lsrs	r1, r5, #8
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8016efc:	003a      	movs	r2, r7
 8016efe:	0020      	movs	r0, r4
            descriptor_type =  (request_value & 0xff00) >> 8;
 8016f00:	b2c9      	uxtb	r1, r1
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8016f02:	f000 fac7 	bl	8017494 <_ux_device_class_hid_report_set>
            break;
 8016f06:	e7f6      	b.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8016f08:	003a      	movs	r2, r7
 8016f0a:	0029      	movs	r1, r5
 8016f0c:	0020      	movs	r0, r4
 8016f0e:	f000 f83d 	bl	8016f8c <_ux_device_class_hid_descriptor_send>
            break;            
 8016f12:	e7f0      	b.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8016f14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8016f16:	9800      	ldr	r0, [sp, #0]
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8016f18:	b2c9      	uxtb	r1, r1
            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8016f1a:	2802      	cmp	r0, #2
 8016f1c:	d107      	bne.n	8016f2e <_ux_device_class_hid_control_request+0x96>
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8016f1e:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8016f20:	7011      	strb	r1, [r2, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8016f22:	9801      	ldr	r0, [sp, #4]
 8016f24:	001a      	movs	r2, r3
 8016f26:	2101      	movs	r1, #1
 8016f28:	f7ff fcec 	bl	8016904 <_ux_device_stack_transfer_request>
            break;
 8016f2c:	e7e3      	b.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8016f2e:	428a      	cmp	r2, r1
 8016f30:	d0e1      	beq.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8016f32:	6462      	str	r2, [r4, #68]	@ 0x44
                    if (duration == 0)
 8016f34:	2a00      	cmp	r2, #0
 8016f36:	d103      	bne.n	8016f40 <_ux_device_class_hid_control_request+0xa8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8016f38:	2301      	movs	r3, #1
 8016f3a:	425b      	negs	r3, r3
 8016f3c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016f3e:	e7da      	b.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8016f40:	20fa      	movs	r0, #250	@ 0xfa
 8016f42:	21fa      	movs	r1, #250	@ 0xfa
 8016f44:	0100      	lsls	r0, r0, #4
 8016f46:	4350      	muls	r0, r2
 8016f48:	0089      	lsls	r1, r1, #2
 8016f4a:	f7e9 f90d 	bl	8000168 <__udivsi3>
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 8016f4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8016f50:	64a0      	str	r0, [r4, #72]	@ 0x48
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 8016f52:	2b05      	cmp	r3, #5
 8016f54:	d0cf      	beq.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
                            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8016f56:	2300      	movs	r3, #0
 8016f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016f5a:	e7cc      	b.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8016f5c:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 8016f5e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8016f60:	e7de      	b.n	8016f20 <_ux_device_class_hid_control_request+0x88>
            hid -> ux_device_class_hid_protocol = request_value;
 8016f62:	64e5      	str	r5, [r4, #76]	@ 0x4c
            break;
 8016f64:	e7c7      	b.n	8016ef6 <_ux_device_class_hid_control_request+0x5e>
    switch (request)
 8016f66:	20ff      	movs	r0, #255	@ 0xff
 8016f68:	e7c6      	b.n	8016ef8 <_ux_device_class_hid_control_request+0x60>
 8016f6a:	46c0      	nop			@ (mov r8, r8)
 8016f6c:	200030e0 	.word	0x200030e0

08016f70 <_ux_device_class_hid_deactivate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016f70:	6a03      	ldr	r3, [r0, #32]
{
 8016f72:	b510      	push	{r4, lr}
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016f74:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 8016f76:	2126      	movs	r1, #38	@ 0x26
 8016f78:	6860      	ldr	r0, [r4, #4]
 8016f7a:	f7ff fcbd 	bl	80168f8 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8016f7e:	69e3      	ldr	r3, [r4, #28]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d001      	beq.n	8016f88 <_ux_device_class_hid_deactivate+0x18>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 8016f84:	0020      	movs	r0, r4
 8016f86:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8016f88:	2000      	movs	r0, #0
 8016f8a:	bd10      	pop	{r4, pc}

08016f8c <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8016f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f8e:	001e      	movs	r6, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016f90:	4b28      	ldr	r3, [pc, #160]	@ (8017034 <_ux_device_class_hid_descriptor_send+0xa8>)

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016f92:	2403      	movs	r4, #3
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016f94:	681d      	ldr	r5, [r3, #0]
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8016f96:	0a09      	lsrs	r1, r1, #8
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016f98:	002b      	movs	r3, r5
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016f9a:	002f      	movs	r7, r5
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016f9c:	335c      	adds	r3, #92	@ 0x5c
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016f9e:	629c      	str	r4, [r3, #40]	@ 0x28
 8016fa0:	34fc      	adds	r4, #252	@ 0xfc
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016fa2:	373c      	adds	r7, #60	@ 0x3c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016fa4:	9301      	str	r3, [sp, #4]
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8016fa6:	4021      	ands	r1, r4

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8016fa8:	2921      	cmp	r1, #33	@ 0x21
 8016faa:	d008      	beq.n	8016fbe <_ux_device_class_hid_descriptor_send+0x32>
 8016fac:	2922      	cmp	r1, #34	@ 0x22
 8016fae:	d02f      	beq.n	8017010 <_ux_device_class_hid_descriptor_send+0x84>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016fb0:	003a      	movs	r2, r7
 8016fb2:	2114      	movs	r1, #20
 8016fb4:	0028      	movs	r0, r5
 8016fb6:	69ab      	ldr	r3, [r5, #24]
 8016fb8:	4798      	blx	r3
        return(UX_ERROR);
 8016fba:	0020      	movs	r0, r4
 8016fbc:	e00e      	b.n	8016fdc <_ux_device_class_hid_descriptor_send+0x50>
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8016fbe:	002b      	movs	r3, r5
 8016fc0:	33cc      	adds	r3, #204	@ 0xcc
 8016fc2:	6819      	ldr	r1, [r3, #0]
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8016fc4:	3304      	adds	r3, #4
 8016fc6:	681b      	ldr	r3, [r3, #0]
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8016fc8:	b2d2      	uxtb	r2, r2
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8016fca:	18cb      	adds	r3, r1, r3
 8016fcc:	469c      	mov	ip, r3
        while (device_framework < device_framework_end)
 8016fce:	4561      	cmp	r1, ip
 8016fd0:	d305      	bcc.n	8016fde <_ux_device_class_hid_descriptor_send+0x52>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016fd2:	003a      	movs	r2, r7
 8016fd4:	2114      	movs	r1, #20
 8016fd6:	0028      	movs	r0, r5
 8016fd8:	69ab      	ldr	r3, [r5, #24]
 8016fda:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 8016fdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            descriptor_type =  *(device_framework + 1);
 8016fde:	7848      	ldrb	r0, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 8016fe0:	780b      	ldrb	r3, [r1, #0]
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8016fe2:	2804      	cmp	r0, #4
 8016fe4:	d102      	bne.n	8016fec <_ux_device_class_hid_descriptor_send+0x60>
                interface_number = *(device_framework + 2);
 8016fe6:	788c      	ldrb	r4, [r1, #2]
            device_framework +=  descriptor_length;
 8016fe8:	18c9      	adds	r1, r1, r3
 8016fea:	e7f0      	b.n	8016fce <_ux_device_class_hid_descriptor_send+0x42>
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8016fec:	2821      	cmp	r0, #33	@ 0x21
 8016fee:	d1fb      	bne.n	8016fe8 <_ux_device_class_hid_descriptor_send+0x5c>
 8016ff0:	42a2      	cmp	r2, r4
 8016ff2:	d1f9      	bne.n	8016fe8 <_ux_device_class_hid_descriptor_send+0x5c>
                if (descriptor_length < host_length)
 8016ff4:	0034      	movs	r4, r6
 8016ff6:	429e      	cmp	r6, r3
 8016ff8:	d900      	bls.n	8016ffc <_ux_device_class_hid_descriptor_send+0x70>
 8016ffa:	001c      	movs	r4, r3
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8016ffc:	0022      	movs	r2, r4
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8016ffe:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8017000:	f7ff fe9e 	bl	8016d40 <_ux_utility_memory_copy>
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8017004:	0032      	movs	r2, r6
 8017006:	0021      	movs	r1, r4
 8017008:	9801      	ldr	r0, [sp, #4]
 801700a:	f7ff fc7b 	bl	8016904 <_ux_device_stack_transfer_request>
        break;
 801700e:	e7e5      	b.n	8016fdc <_ux_device_class_hid_descriptor_send+0x50>
        if (descriptor_length < host_length)
 8017010:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017012:	42b4      	cmp	r4, r6
 8017014:	d900      	bls.n	8017018 <_ux_device_class_hid_descriptor_send+0x8c>
 8017016:	0034      	movs	r4, r6
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017018:	2380      	movs	r3, #128	@ 0x80
 801701a:	005b      	lsls	r3, r3, #1
 801701c:	429c      	cmp	r4, r3
 801701e:	d905      	bls.n	801702c <_ux_device_class_hid_descriptor_send+0xa0>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8017020:	2212      	movs	r2, #18
 8017022:	2107      	movs	r1, #7
 8017024:	2002      	movs	r0, #2
 8017026:	f7ff fcd5 	bl	80169d4 <_ux_system_error_handler>
 801702a:	e7d2      	b.n	8016fd2 <_ux_device_class_hid_descriptor_send+0x46>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 801702c:	0022      	movs	r2, r4
 801702e:	6a01      	ldr	r1, [r0, #32]
 8017030:	e7e5      	b.n	8016ffe <_ux_device_class_hid_descriptor_send+0x72>
 8017032:	46c0      	nop			@ (mov r8, r8)
 8017034:	200030e0 	.word	0x200030e0

08017038 <_ux_device_class_hid_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8017038:	0003      	movs	r3, r0
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 801703a:	6800      	ldr	r0, [r0, #0]
{
 801703c:	b510      	push	{r4, lr}
    switch (command -> ux_slave_class_command_request)
 801703e:	3801      	subs	r0, #1
 8017040:	2806      	cmp	r0, #6
 8017042:	d81f      	bhi.n	8017084 <_ux_device_class_hid_entry+0x4c>
 8017044:	f7e9 f872 	bl	800012c <__gnu_thumb1_case_uqi>
 8017048:	1a16120c 	.word	0x1a16120c
 801704c:	1e04      	.short	0x1e04
 801704e:	08          	.byte	0x08
 801704f:	00          	.byte	0x00

        /* Call the init function of the HID class.  */
#if defined(UX_DEVICE_CLASS_HID_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_hid_initialize(command);
#else
        status =  _ux_device_class_hid_initialize(command);
 8017050:	0018      	movs	r0, r3
 8017052:	f000 f88b 	bl	801716c <_ux_device_class_hid_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 8017056:	bd10      	pop	{r4, pc}
        status =  _ux_device_class_hid_uninitialize(command);
 8017058:	0018      	movs	r0, r3
 801705a:	f000 fa93 	bl	8017584 <_ux_device_class_hid_uninitialize>
        return(status);
 801705e:	e7fa      	b.n	8017056 <_ux_device_class_hid_entry+0x1e>
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8017060:	695b      	ldr	r3, [r3, #20]
            return(UX_NO_CLASS_MATCH);
 8017062:	2057      	movs	r0, #87	@ 0x57
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8017064:	2b03      	cmp	r3, #3
 8017066:	d1f6      	bne.n	8017056 <_ux_device_class_hid_entry+0x1e>
            return(UX_SUCCESS);
 8017068:	2000      	movs	r0, #0
 801706a:	e7f4      	b.n	8017056 <_ux_device_class_hid_entry+0x1e>
        status =  _ux_device_class_hid_activate(command);
 801706c:	0018      	movs	r0, r3
 801706e:	f7ff fec9 	bl	8016e04 <_ux_device_class_hid_activate>
        return(status);
 8017072:	e7f0      	b.n	8017056 <_ux_device_class_hid_entry+0x1e>
        status =  _ux_device_class_hid_deactivate(command);
 8017074:	0018      	movs	r0, r3
 8017076:	f7ff ff7b 	bl	8016f70 <_ux_device_class_hid_deactivate>
        return(status);
 801707a:	e7ec      	b.n	8017056 <_ux_device_class_hid_entry+0x1e>
        status = _ux_device_class_hid_control_request(command);
 801707c:	0018      	movs	r0, r3
 801707e:	f7ff ff0b 	bl	8016e98 <_ux_device_class_hid_control_request>
        return(status);
 8017082:	e7e8      	b.n	8017056 <_ux_device_class_hid_entry+0x1e>
    switch (command -> ux_slave_class_command_request)
 8017084:	2054      	movs	r0, #84	@ 0x54
 8017086:	e7e6      	b.n	8017056 <_ux_device_class_hid_entry+0x1e>

08017088 <_ux_device_class_hid_event_check>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017088:	4a07      	ldr	r2, [pc, #28]	@ (80170a8 <_ux_device_class_hid_event_check+0x20>)
{
 801708a:	0003      	movs	r3, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801708c:	6812      	ldr	r2, [r2, #0]
        return(UX_DEVICE_HANDLE_UNKNOWN);
 801708e:	2050      	movs	r0, #80	@ 0x50
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8017092:	2a03      	cmp	r2, #3
 8017094:	d106      	bne.n	80170a4 <_ux_device_class_hid_event_check+0x1c>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head ==
        hid -> ux_device_class_hid_event_array_tail)
 8017096:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    if (hid -> ux_device_class_hid_event_array_head ==
 8017098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54

        /* No event to report.  */
        return(UX_ERROR);
 801709a:	30af      	adds	r0, #175	@ 0xaf
    if (hid -> ux_device_class_hid_event_array_head ==
 801709c:	4293      	cmp	r3, r2
 801709e:	d001      	beq.n	80170a4 <_ux_device_class_hid_event_check+0x1c>

    /* There is an event to report, get the current pointer to the event.  */
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
    return(UX_SUCCESS);
 80170a0:	2000      	movs	r0, #0
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
 80170a2:	600a      	str	r2, [r1, #0]
}
 80170a4:	4770      	bx	lr
 80170a6:	46c0      	nop			@ (mov r8, r8)
 80170a8:	200030e0 	.word	0x200030e0

080170ac <_ux_device_class_hid_event_free>:
/**************************************************************************/
VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)
{
UCHAR                           *pos;

    pos = (UCHAR *) hid -> ux_device_class_hid_event_array_tail;
 80170ac:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 80170ae:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 80170b0:	3310      	adds	r3, #16
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d800      	bhi.n	80170b8 <_ux_device_class_hid_event_free+0xc>
        pos = (UCHAR *) hid -> ux_device_class_hid_event_array;
 80170b6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
    hid -> ux_device_class_hid_event_array_tail = (UX_DEVICE_CLASS_HID_EVENT *) pos;
 80170b8:	6583      	str	r3, [r0, #88]	@ 0x58
}
 80170ba:	4770      	bx	lr

080170bc <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,
                                     UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80170bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170be:	000c      	movs	r4, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Check and get event pointer.  */
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 80170c0:	a901      	add	r1, sp, #4
{
 80170c2:	0005      	movs	r5, r0
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 80170c4:	f7ff ffe0 	bl	8017088 <_ux_device_class_hid_event_check>
 80170c8:	1e06      	subs	r6, r0, #0
    if (status != UX_SUCCESS)
 80170ca:	d10f      	bne.n	80170ec <_ux_device_class_hid_event_get+0x30>
        return(status);

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 80170cc:	9b01      	ldr	r3, [sp, #4]
 80170ce:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80170d0:	6899      	ldr	r1, [r3, #8]
 80170d2:	4291      	cmp	r1, r2
 80170d4:	d900      	bls.n	80170d8 <_ux_device_class_hid_event_get+0x1c>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid);
 80170d6:	609a      	str	r2, [r3, #8]

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;

    /* Copy the event data into the user buffer.  */
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 80170d8:	0020      	movs	r0, r4
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 80170da:	689a      	ldr	r2, [r3, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 80170dc:	300c      	adds	r0, #12
 80170de:	68d9      	ldr	r1, [r3, #12]
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 80170e0:	60a2      	str	r2, [r4, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 80170e2:	f7ff fe2d 	bl	8016d40 <_ux_utility_memory_copy>
                            UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
                            current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Free the tail event.  */
    _ux_device_class_hid_event_free(hid);
 80170e6:	0028      	movs	r0, r5
 80170e8:	f7ff ffe0 	bl	80170ac <_ux_device_class_hid_event_free>

    /* Return event status to the user.  */
    return(UX_SUCCESS);
}
 80170ec:	0030      	movs	r0, r6
 80170ee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080170f0 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80170f0:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 80170f2:	6d46      	ldr	r6, [r0, #84]	@ 0x54
{
 80170f4:	0004      	movs	r4, r0
 80170f6:	000d      	movs	r5, r1

    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
        return (UX_ERROR);
 80170f8:	20ff      	movs	r0, #255	@ 0xff
    if (current_hid_event == UX_NULL)
 80170fa:	2e00      	cmp	r6, #0
 80170fc:	d018      	beq.n	8017130 <_ux_device_class_hid_event_set+0x40>
    
    /* Calculate the next position.  */
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 80170fe:	0033      	movs	r3, r6
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8017100:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8017102:	3310      	adds	r3, #16
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8017104:	429a      	cmp	r2, r3
 8017106:	d800      	bhi.n	801710a <_ux_device_class_hid_event_set+0x1a>
        next_position = (UCHAR *)hid -> ux_device_class_hid_event_array;
 8017108:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    next_hid_event = (UX_DEVICE_CLASS_HID_EVENT *)next_position;

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 801710a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        return (UX_ERROR);
 801710c:	20ff      	movs	r0, #255	@ 0xff
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 801710e:	429a      	cmp	r2, r3
 8017110:	d00e      	beq.n	8017130 <_ux_device_class_hid_event_set+0x40>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8017112:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017114:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 8017116:	68aa      	ldr	r2, [r5, #8]
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017118:	2b01      	cmp	r3, #1
 801711a:	d120      	bne.n	801715e <_ux_device_class_hid_event_set+0x6e>
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 801711c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801711e:	3201      	adds	r2, #1
 8017120:	429a      	cmp	r2, r3
 8017122:	d906      	bls.n	8017132 <_ux_device_class_hid_event_set+0x42>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8017124:	38fd      	subs	r0, #253	@ 0xfd
 8017126:	2212      	movs	r2, #18
 8017128:	2107      	movs	r1, #7
 801712a:	f7ff fc53 	bl	80169d4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 801712e:	2012      	movs	r0, #18
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
}
 8017130:	bd70      	pop	{r4, r5, r6, pc}
                                hid_event -> ux_device_class_hid_event_buffer,
 8017132:	0029      	movs	r1, r5
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 8017134:	68f3      	ldr	r3, [r6, #12]
 8017136:	682a      	ldr	r2, [r5, #0]
                                hid_event -> ux_device_class_hid_event_buffer,
 8017138:	310c      	adds	r1, #12
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 801713a:	701a      	strb	r2, [r3, #0]
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 801713c:	68f0      	ldr	r0, [r6, #12]
 801713e:	68aa      	ldr	r2, [r5, #8]
 8017140:	3001      	adds	r0, #1
 8017142:	f7ff fdfd 	bl	8016d40 <_ux_utility_memory_copy>
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8017146:	68ab      	ldr	r3, [r5, #8]
 8017148:	3301      	adds	r3, #1
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 801714a:	2204      	movs	r2, #4
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 801714c:	60b3      	str	r3, [r6, #8]
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 801714e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017150:	4393      	bics	r3, r2
 8017152:	2b01      	cmp	r3, #1
 8017154:	d001      	beq.n	801715a <_ux_device_class_hid_event_set+0x6a>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8017156:	2300      	movs	r3, #0
 8017158:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return(UX_SUCCESS);
 801715a:	2000      	movs	r0, #0
 801715c:	e7e8      	b.n	8017130 <_ux_device_class_hid_event_set+0x40>
                                hid_event -> ux_device_class_hid_event_buffer,
 801715e:	0029      	movs	r1, r5
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 8017160:	68f0      	ldr	r0, [r6, #12]
                                hid_event -> ux_device_class_hid_event_buffer,
 8017162:	310c      	adds	r1, #12
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 8017164:	f7ff fdec 	bl	8016d40 <_ux_utility_memory_copy>
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 8017168:	68ab      	ldr	r3, [r5, #8]
 801716a:	e7ee      	b.n	801714a <_ux_device_class_hid_event_set+0x5a>

0801716c <_ux_device_class_hid_initialize>:
/*                                            checked compile options,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801716c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 801716e:	2100      	movs	r1, #0
    hid_parameter =  command -> ux_slave_class_command_parameter;
 8017170:	6a45      	ldr	r5, [r0, #36]	@ 0x24
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8017172:	6a07      	ldr	r7, [r0, #32]
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8017174:	2284      	movs	r2, #132	@ 0x84
 8017176:	0008      	movs	r0, r1
 8017178:	f7ff fcec 	bl	8016b54 <_ux_utility_memory_allocate>
 801717c:	1e04      	subs	r4, r0, #0

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 801717e:	d00b      	beq.n	8017198 <_ux_device_class_hid_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 8017180:	64b8      	str	r0, [r7, #72]	@ 0x48

#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)

    /* Allocate buffer(s) for endpoint(s).  */
    UX_ASSERT(!UX_DEVICE_CLASS_HID_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);
    hid -> ux_device_class_hid_endpoint_buffer = _ux_utility_memory_allocate(
 8017182:	2248      	movs	r2, #72	@ 0x48
 8017184:	2101      	movs	r1, #1
 8017186:	2000      	movs	r0, #0
 8017188:	f7ff fce4 	bl	8016b54 <_ux_utility_memory_allocate>
 801718c:	60a0      	str	r0, [r4, #8]
                            UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
                            UX_DEVICE_CLASS_HID_ENDPOINT_BUFFER_SIZE);
    if (hid -> ux_device_class_hid_endpoint_buffer == UX_NULL)
 801718e:	2800      	cmp	r0, #0
 8017190:	d105      	bne.n	801719e <_ux_device_class_hid_initialize+0x32>
    {
        _ux_utility_memory_free(hid);
 8017192:	0020      	movs	r0, r4
 8017194:	f7ff fdde 	bl	8016d54 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8017198:	2512      	movs	r5, #18
    /* Free HID instance. */
    _ux_utility_memory_free(hid);

    /* Return completion status.  */
    return(status);
}
 801719a:	0028      	movs	r0, r5
 801719c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 801719e:	4b35      	ldr	r3, [pc, #212]	@ (8017274 <_ux_device_class_hid_initialize+0x108>)
                                    UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 80171a0:	3008      	adds	r0, #8
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_buffer =
 80171a2:	6420      	str	r0, [r4, #64]	@ 0x40
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 80171a4:	653b      	str	r3, [r7, #80]	@ 0x50
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 80171a6:	68ab      	ldr	r3, [r5, #8]
 80171a8:	6223      	str	r3, [r4, #32]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 80171aa:	692b      	ldr	r3, [r5, #16]
 80171ac:	62a3      	str	r3, [r4, #40]	@ 0x28
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 80171ae:	68eb      	ldr	r3, [r5, #12]
 80171b0:	6263      	str	r3, [r4, #36]	@ 0x24
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 80171b2:	696b      	ldr	r3, [r5, #20]
 80171b4:	6123      	str	r3, [r4, #16]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 80171b6:	69ab      	ldr	r3, [r5, #24]
 80171b8:	6163      	str	r3, [r4, #20]
        if (UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter) == 0 ||
 80171ba:	6a2b      	ldr	r3, [r5, #32]
 80171bc:	3b01      	subs	r3, #1
 80171be:	2b3f      	cmp	r3, #63	@ 0x3f
 80171c0:	d901      	bls.n	80171c6 <_ux_device_class_hid_initialize+0x5a>
            UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter) = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 80171c2:	2340      	movs	r3, #64	@ 0x40
 80171c4:	622b      	str	r3, [r5, #32]
        if (UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter) < 2 ||
 80171c6:	69eb      	ldr	r3, [r5, #28]
 80171c8:	3b02      	subs	r3, #2
 80171ca:	2b06      	cmp	r3, #6
 80171cc:	d901      	bls.n	80171d2 <_ux_device_class_hid_initialize+0x66>
            UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter) = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 80171ce:	2308      	movs	r3, #8
 80171d0:	61eb      	str	r3, [r5, #28]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 80171d2:	2100      	movs	r1, #0
        UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid) = UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 80171d4:	6a2b      	ldr	r3, [r5, #32]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 80171d6:	0008      	movs	r0, r1
        UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid) = UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 80171d8:	6623      	str	r3, [r4, #96]	@ 0x60
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 80171da:	69eb      	ldr	r3, [r5, #28]
 80171dc:	011b      	lsls	r3, r3, #4
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 80171de:	001a      	movs	r2, r3
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 80171e0:	9301      	str	r3, [sp, #4]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 80171e2:	f7ff fcb7 	bl	8016b54 <_ux_utility_memory_allocate>
            buffer = _ux_utility_memory_allocate_mulv_safe(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 80171e6:	2101      	movs	r1, #1
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 80171e8:	6520      	str	r0, [r4, #80]	@ 0x50
            buffer = _ux_utility_memory_allocate_mulv_safe(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 80171ea:	69eb      	ldr	r3, [r5, #28]
 80171ec:	2000      	movs	r0, #0
 80171ee:	6a2a      	ldr	r2, [r5, #32]
 80171f0:	f7ff fd35 	bl	8016c5e <_ux_utility_memory_allocate_mulv_safe>
 80171f4:	1e06      	subs	r6, r0, #0
            if (buffer == UX_NULL)
 80171f6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80171f8:	d00a      	beq.n	8017210 <_ux_device_class_hid_initialize+0xa4>
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 80171fa:	2300      	movs	r3, #0
 80171fc:	69e9      	ldr	r1, [r5, #28]
 80171fe:	4299      	cmp	r1, r3
 8017200:	d00b      	beq.n	801721a <_ux_device_class_hid_initialize+0xae>
                    hid -> ux_device_class_hid_event_array[i].ux_device_class_hid_event_buffer = buffer;
 8017202:	011a      	lsls	r2, r3, #4
 8017204:	1882      	adds	r2, r0, r2
 8017206:	60d6      	str	r6, [r2, #12]
                    buffer += UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8017208:	6a2a      	ldr	r2, [r5, #32]
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 801720a:	3301      	adds	r3, #1
                    buffer += UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 801720c:	18b6      	adds	r6, r6, r2
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 801720e:	e7f6      	b.n	80171fe <_ux_device_class_hid_initialize+0x92>
                if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8017210:	2800      	cmp	r0, #0
 8017212:	d002      	beq.n	801721a <_ux_device_class_hid_initialize+0xae>
                    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8017214:	f7ff fd9e 	bl	8016d54 <_ux_utility_memory_free>
                    hid -> ux_device_class_hid_event_array = UX_NULL;
 8017218:	6526      	str	r6, [r4, #80]	@ 0x50
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 801721a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801721c:	2b00      	cmp	r3, #0
 801721e:	d027      	beq.n	8017270 <_ux_device_class_hid_initialize+0x104>
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8017220:	9a01      	ldr	r2, [sp, #4]
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8017222:	6563      	str	r3, [r4, #84]	@ 0x54
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8017224:	65a3      	str	r3, [r4, #88]	@ 0x58
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8017226:	189b      	adds	r3, r3, r2
 8017228:	65e3      	str	r3, [r4, #92]	@ 0x5c
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 801722a:	682b      	ldr	r3, [r5, #0]
 801722c:	61a3      	str	r3, [r4, #24]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 801722e:	686b      	ldr	r3, [r5, #4]
 8017230:	61e3      	str	r3, [r4, #28]
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8017232:	2301      	movs	r3, #1
 8017234:	425b      	negs	r3, r3
 8017236:	64a3      	str	r3, [r4, #72]	@ 0x48
                    if (hid_parameter -> ux_device_class_hid_parameter_receiver_initialize)
 8017238:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801723a:	2b00      	cmp	r3, #0
 801723c:	d101      	bne.n	8017242 <_ux_device_class_hid_initialize+0xd6>
                        return(status);
 801723e:	2500      	movs	r5, #0
 8017240:	e7ab      	b.n	801719a <_ux_device_class_hid_initialize+0x2e>
                                                &hid -> ux_device_class_hid_receiver);
 8017242:	0022      	movs	r2, r4
                        status = hid_parameter ->
 8017244:	0029      	movs	r1, r5
 8017246:	0020      	movs	r0, r4
                                                &hid -> ux_device_class_hid_receiver);
 8017248:	3268      	adds	r2, #104	@ 0x68
                        status = hid_parameter ->
 801724a:	4798      	blx	r3
 801724c:	1e05      	subs	r5, r0, #0
                    if (status == UX_SUCCESS)
 801724e:	d0f6      	beq.n	801723e <_ux_device_class_hid_initialize+0xd2>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
 8017250:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017252:	68d8      	ldr	r0, [r3, #12]
 8017254:	f7ff fd7e 	bl	8016d54 <_ux_utility_memory_free>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8017258:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801725a:	f7ff fd7b 	bl	8016d54 <_ux_utility_memory_free>
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
 801725e:	68a0      	ldr	r0, [r4, #8]
 8017260:	f7ff fd78 	bl	8016d54 <_ux_utility_memory_free>
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8017264:	2300      	movs	r3, #0
    _ux_utility_memory_free(hid);
 8017266:	0020      	movs	r0, r4
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8017268:	64bb      	str	r3, [r7, #72]	@ 0x48
    _ux_utility_memory_free(hid);
 801726a:	f7ff fd73 	bl	8016d54 <_ux_utility_memory_free>
    return(status);
 801726e:	e794      	b.n	801719a <_ux_device_class_hid_initialize+0x2e>
            status =  UX_MEMORY_INSUFFICIENT;
 8017270:	2512      	movs	r5, #18
 8017272:	e7f4      	b.n	801725e <_ux_device_class_hid_initialize+0xf2>
 8017274:	080174dd 	.word	0x080174dd

08017278 <_ux_device_class_hid_receiver_event_free>:
UX_DEVICE_CLASS_HID_RECEIVER            *receiver;
UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *pos;
UCHAR                                   *next_pos;

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;
 8017278:	6e83      	ldr	r3, [r0, #104]	@ 0x68
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_RECEIVER_EVENT_FREE, hid, pos, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* If event is not valid, return error.  */
    if (pos -> ux_device_class_hid_received_event_length == 0)
        return(UX_ERROR);
 801727a:	20ff      	movs	r0, #255	@ 0xff
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 801727c:	695a      	ldr	r2, [r3, #20]
    if (pos -> ux_device_class_hid_received_event_length == 0)
 801727e:	6811      	ldr	r1, [r2, #0]
 8017280:	2900      	cmp	r1, #0
 8017282:	d008      	beq.n	8017296 <_ux_device_class_hid_receiver_event_free+0x1e>

    /* Invalidate the event and advance position.  */

    /* Calculate next item address.  */
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8017284:	0011      	movs	r1, r2

    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8017286:	6918      	ldr	r0, [r3, #16]
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8017288:	3108      	adds	r1, #8
    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 801728a:	4288      	cmp	r0, r1
 801728c:	d800      	bhi.n	8017290 <_ux_device_class_hid_receiver_event_free+0x18>
        next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 801728e:	68d9      	ldr	r1, [r3, #12]
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;

    pos -> ux_device_class_hid_received_event_length = 0;
 8017290:	2000      	movs	r0, #0
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 8017292:	6159      	str	r1, [r3, #20]
    pos -> ux_device_class_hid_received_event_length = 0;
 8017294:	6010      	str	r0, [r2, #0]
                                UX_DEVICE_CLASS_HID_RECEIVER_RESTART, UX_OR);

    /* Return event status to the user.  */
    return(UX_SUCCESS);
#endif
}
 8017296:	4770      	bx	lr

08017298 <_ux_device_class_hid_receiver_event_get>:

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;

    /* Get current reading position.  */
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 8017298:	6e83      	ldr	r3, [r0, #104]	@ 0x68
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);

        return(UX_SUCCESS);
    }

    return(UX_ERROR);
 801729a:	20ff      	movs	r0, #255	@ 0xff
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 801729c:	695b      	ldr	r3, [r3, #20]
    if (pos -> ux_device_class_hid_received_event_length != 0)
 801729e:	681a      	ldr	r2, [r3, #0]
 80172a0:	2a00      	cmp	r2, #0
 80172a2:	d003      	beq.n	80172ac <_ux_device_class_hid_receiver_event_get+0x14>
        return(UX_SUCCESS);
 80172a4:	2000      	movs	r0, #0
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 80172a6:	685b      	ldr	r3, [r3, #4]
        event -> ux_device_class_hid_received_event_length = pos -> ux_device_class_hid_received_event_length;
 80172a8:	600a      	str	r2, [r1, #0]
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 80172aa:	604b      	str	r3, [r1, #4]
#endif
}
 80172ac:	4770      	bx	lr
	...

080172b0 <_ux_device_class_hid_receiver_initialize>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_initialize(UX_SLAVE_CLASS_HID *hid,
                                    UX_SLAVE_CLASS_HID_PARAMETER *parameter,
                                    UX_DEVICE_CLASS_HID_RECEIVER **receiver)
{
 80172b0:	b5f0      	push	{r4, r5, r6, r7, lr}

#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Events structs are in regular memory.  */
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT), parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT) * parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 80172b2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
{
 80172b4:	000d      	movs	r5, r1
#endif
    UX_ASSERT(!UX_OVERFLOW_CHECK_ADD_ULONG(memory_size, events_size));
    memory_size += events_size;

    /* Allocate memory.  */
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 80172b6:	2100      	movs	r1, #0
    events_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT) * parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 80172b8:	00db      	lsls	r3, r3, #3
{
 80172ba:	b087      	sub	sp, #28
    memory_size += events_size;
 80172bc:	3320      	adds	r3, #32
{
 80172be:	9003      	str	r0, [sp, #12]
 80172c0:	9204      	str	r2, [sp, #16]
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 80172c2:	0008      	movs	r0, r1
 80172c4:	001a      	movs	r2, r3
    memory_size += events_size;
 80172c6:	9301      	str	r3, [sp, #4]
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 80172c8:	f7ff fc44 	bl	8016b54 <_ux_utility_memory_allocate>
 80172cc:	1e04      	subs	r4, r0, #0
    if (memory_receiver == UX_NULL)
 80172ce:	d02b      	beq.n	8017328 <_ux_device_class_hid_receiver_initialize+0x78>
        return(UX_MEMORY_INSUFFICIENT);
#if !defined(UX_DEVICE_STANDALONE)
    memory_stack = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
    memory_events = memory_stack + UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE;
#else
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 80172d0:	0006      	movs	r6, r0
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Allocate cache safe memory.  */

    /* Total buffer size calculate.  */
    events_size  = parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 80172d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(events_size, parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 80172d4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28

    /* Allocate buffer.  */
    buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, events_size);
 80172d6:	2101      	movs	r1, #1
 80172d8:	2000      	movs	r0, #0
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 80172da:	435a      	muls	r2, r3
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 80172dc:	3620      	adds	r6, #32
    buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, events_size);
 80172de:	f7ff fc39 	bl	8016b54 <_ux_utility_memory_allocate>
    if (buffer == UX_NULL)
 80172e2:	2800      	cmp	r0, #0
 80172e4:	d01d      	beq.n	8017322 <_ux_device_class_hid_receiver_initialize+0x72>
        return(UX_MEMORY_INSUFFICIENT);
    }

    /* Assign events buffers.  */
    events_head = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *) memory_events;
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 80172e6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
    {

        /* Assign event buffer.  */
        events_head -> ux_device_class_hid_received_event_data = buffer;
 80172e8:	0021      	movs	r1, r4
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 80172ea:	9302      	str	r3, [sp, #8]
 80172ec:	2300      	movs	r3, #0
        events_head -> ux_device_class_hid_received_event_data = buffer;
 80172ee:	3124      	adds	r1, #36	@ 0x24

        /* Move to next event and next buffer.  */
        buffer += parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 80172f0:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
        events_head -> ux_device_class_hid_received_event_data = buffer;
 80172f2:	9105      	str	r1, [sp, #20]
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 80172f4:	9902      	ldr	r1, [sp, #8]
 80172f6:	4299      	cmp	r1, r3
 80172f8:	d119      	bne.n	801732e <_ux_device_class_hid_receiver_initialize+0x7e>
        events_head ++;
    }
#endif

    /* Store receiver instance pointer.  */
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 80172fa:	9b04      	ldr	r3, [sp, #16]
    {

#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&((*receiver) -> ux_device_class_hid_receiver_thread), hid)
#else
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 80172fc:	9903      	ldr	r1, [sp, #12]
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 80172fe:	601c      	str	r4, [r3, #0]
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8017300:	2323      	movs	r3, #35	@ 0x23
 8017302:	67cb      	str	r3, [r1, #124]	@ 0x7c
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8017304:	4b0e      	ldr	r3, [pc, #56]	@ (8017340 <_ux_device_class_hid_receiver_initialize+0x90>)
        /* Initialize callback function.  */
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
                    parameter -> ux_device_class_hid_parameter_receiver_event_callback;

        /* Done success.  */
        return(UX_SUCCESS);
 8017306:	2000      	movs	r0, #0
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8017308:	61e3      	str	r3, [r4, #28]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 801730a:	9b01      	ldr	r3, [sp, #4]
        (*receiver) -> ux_device_class_hid_receiver_event_buffer_size =
 801730c:	60a2      	str	r2, [r4, #8]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 801730e:	18e3      	adds	r3, r4, r3
        (*receiver) -> ux_device_class_hid_receiver_events_end =
 8017310:	6123      	str	r3, [r4, #16]
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 8017312:	4b0c      	ldr	r3, [pc, #48]	@ (8017344 <_ux_device_class_hid_receiver_initialize+0x94>)
        (*receiver) -> ux_device_class_hid_receiver_events =
 8017314:	60e6      	str	r6, [r4, #12]
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 8017316:	6023      	str	r3, [r4, #0]
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 8017318:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
        (*receiver) -> ux_device_class_hid_receiver_event_read_pos =
 801731a:	6166      	str	r6, [r4, #20]
        (*receiver) -> ux_device_class_hid_receiver_event_save_pos =
 801731c:	61a6      	str	r6, [r4, #24]
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 801731e:	6063      	str	r3, [r4, #4]
        return(UX_SUCCESS);
 8017320:	e003      	b.n	801732a <_ux_device_class_hid_receiver_initialize+0x7a>
        _ux_utility_memory_free(memory_receiver);
 8017322:	0020      	movs	r0, r4
 8017324:	f7ff fd16 	bl	8016d54 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8017328:	2012      	movs	r0, #18
    (*receiver) =  UX_NULL;

    /* Return completion status.  */
    return(status);
#endif
}
 801732a:	b007      	add	sp, #28
 801732c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        events_head -> ux_device_class_hid_received_event_data = buffer;
 801732e:	00d9      	lsls	r1, r3, #3
 8017330:	468c      	mov	ip, r1
 8017332:	4667      	mov	r7, ip
 8017334:	9905      	ldr	r1, [sp, #20]
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8017336:	3301      	adds	r3, #1
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8017338:	51c8      	str	r0, [r1, r7]
        buffer += parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 801733a:	1880      	adds	r0, r0, r2
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 801733c:	e7da      	b.n	80172f4 <_ux_device_class_hid_receiver_initialize+0x44>
 801733e:	46c0      	nop			@ (mov r8, r8)
 8017340:	08017349 	.word	0x08017349
 8017344:	080173e5 	.word	0x080173e5

08017348 <_ux_device_class_hid_receiver_tasks_run>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017348:	4b25      	ldr	r3, [pc, #148]	@ (80173e0 <_ux_device_class_hid_receiver_tasks_run+0x98>)
{
 801734a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801734c:	681b      	ldr	r3, [r3, #0]
{
 801734e:	0004      	movs	r4, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        return(UX_STATE_EXIT);
 8017352:	2501      	movs	r5, #1
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017354:	9301      	str	r3, [sp, #4]
 8017356:	2b03      	cmp	r3, #3
 8017358:	d11a      	bne.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>

    /* Get receiver instance.  */
    receiver = hid -> ux_device_class_hid_receiver;
 801735a:	6e86      	ldr	r6, [r0, #104]	@ 0x68
    if (receiver == UX_NULL)
 801735c:	2e00      	cmp	r6, #0
 801735e:	d017      	beq.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>
        return(UX_STATE_EXIT);

    /* Get endpoint.  */
    endpoint = hid -> ux_device_class_hid_read_endpoint;
 8017360:	6e47      	ldr	r7, [r0, #100]	@ 0x64
    if (endpoint == UX_NULL)
 8017362:	2f00      	cmp	r7, #0
 8017364:	d014      	beq.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>

    /* Event buffer available, issue request to get data.  */
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;

    /* Run read/receiver states.  */
    switch(hid -> ux_device_class_hid_read_state)
 8017366:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8017368:	2b23      	cmp	r3, #35	@ 0x23
 801736a:	d013      	beq.n	8017394 <_ux_device_class_hid_receiver_tasks_run+0x4c>
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
        if (pos -> ux_device_class_hid_received_event_length != 0)
        {

            /* Buffer is full, keep waiting.  */
            return(UX_STATE_IDLE);
 801736c:	196d      	adds	r5, r5, r5
    switch(hid -> ux_device_class_hid_read_state)
 801736e:	2b24      	cmp	r3, #36	@ 0x24
 8017370:	d10e      	bne.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>

        /* Fall through.  */
    case UX_DEVICE_CLASS_HID_RECEIVER_WAIT:

        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_run(transfer,
 8017372:	0038      	movs	r0, r7
 8017374:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017376:	3020      	adds	r0, #32
 8017378:	000a      	movs	r2, r1
 801737a:	f7ff fad3 	bl	8016924 <_ux_device_stack_transfer_run>
 801737e:	0005      	movs	r5, r0
                            hid -> ux_device_class_hid_read_requested_length,
                            hid -> ux_device_class_hid_read_requested_length);

        /* Error case.  */
        if (status < UX_STATE_NEXT)
 8017380:	2803      	cmp	r0, #3
 8017382:	d813      	bhi.n	80173ac <_ux_device_class_hid_receiver_tasks_run+0x64>
        {

            hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_ERROR;
 8017384:	2325      	movs	r3, #37	@ 0x25
 8017386:	67e3      	str	r3, [r4, #124]	@ 0x7c
            hid -> ux_device_class_hid_read_status =
 8017388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801738a:	3404      	adds	r4, #4
                transfer -> ux_slave_transfer_request_completion_code;
            return(UX_STATE_ERROR);
 801738c:	9d01      	ldr	r5, [sp, #4]
            hid -> ux_device_class_hid_read_status =
 801738e:	67e3      	str	r3, [r4, #124]	@ 0x7c
        break;
    }

    /* Task is idle.  */
    return(UX_STATE_IDLE);
}
 8017390:	0028      	movs	r0, r5
 8017392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 8017394:	69b3      	ldr	r3, [r6, #24]
            return(UX_STATE_IDLE);
 8017396:	2502      	movs	r5, #2
        if (pos -> ux_device_class_hid_received_event_length != 0)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	2a00      	cmp	r2, #0
 801739c:	d1f8      	bne.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>
        transfer -> ux_slave_transfer_request_data_pointer = buffer;
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        hid -> ux_device_class_hid_read_requested_length =
 80173a2:	68b3      	ldr	r3, [r6, #8]
 80173a4:	6703      	str	r3, [r0, #112]	@ 0x70
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_WAIT;
 80173a6:	2324      	movs	r3, #36	@ 0x24
 80173a8:	67c3      	str	r3, [r0, #124]	@ 0x7c
 80173aa:	e7e2      	b.n	8017372 <_ux_device_class_hid_receiver_tasks_run+0x2a>
        if (status == UX_STATE_NEXT)
 80173ac:	2804      	cmp	r0, #4
 80173ae:	d114      	bne.n	80173da <_ux_device_class_hid_receiver_tasks_run+0x92>
            if (transfer -> ux_slave_transfer_request_actual_length == 0)
 80173b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80173b2:	2900      	cmp	r1, #0
 80173b4:	d102      	bne.n	80173bc <_ux_device_class_hid_receiver_tasks_run+0x74>
                hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 80173b6:	2323      	movs	r3, #35	@ 0x23
 80173b8:	67e3      	str	r3, [r4, #124]	@ 0x7c
                return(UX_STATE_NEXT);
 80173ba:	e7e9      	b.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>
            pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 80173bc:	69b2      	ldr	r2, [r6, #24]
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 80173be:	6930      	ldr	r0, [r6, #16]
            next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 80173c0:	0013      	movs	r3, r2
 80173c2:	3308      	adds	r3, #8
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 80173c4:	4298      	cmp	r0, r3
 80173c6:	d800      	bhi.n	80173ca <_ux_device_class_hid_receiver_tasks_run+0x82>
                next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 80173c8:	68f3      	ldr	r3, [r6, #12]
            receiver -> ux_device_class_hid_receiver_event_save_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 80173ca:	61b3      	str	r3, [r6, #24]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 80173cc:	6873      	ldr	r3, [r6, #4]
            pos -> ux_device_class_hid_received_event_length = temp;
 80173ce:	6011      	str	r1, [r2, #0]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d0f0      	beq.n	80173b6 <_ux_device_class_hid_receiver_tasks_run+0x6e>
                receiver -> ux_device_class_hid_receiver_event_callback(hid);
 80173d4:	0020      	movs	r0, r4
 80173d6:	4798      	blx	r3
 80173d8:	e7ed      	b.n	80173b6 <_ux_device_class_hid_receiver_tasks_run+0x6e>
        return(UX_STATE_WAIT);
 80173da:	2505      	movs	r5, #5
 80173dc:	e7d8      	b.n	8017390 <_ux_device_class_hid_receiver_tasks_run+0x48>
 80173de:	46c0      	nop			@ (mov r8, r8)
 80173e0:	200030e0 	.word	0x200030e0

080173e4 <_ux_device_class_hid_receiver_uninitialize>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID _ux_device_class_hid_receiver_uninitialize(UX_DEVICE_CLASS_HID_RECEIVER *receiver)
{
 80173e4:	b510      	push	{r4, lr}
 80173e6:	0004      	movs	r4, r0
#endif

#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Free cache safe event memory.  */
    _ux_utility_memory_free(receiver -> ux_device_class_hid_receiver_events -> ux_device_class_hid_received_event_data);
 80173e8:	68c3      	ldr	r3, [r0, #12]
 80173ea:	6858      	ldr	r0, [r3, #4]
 80173ec:	f7ff fcb2 	bl	8016d54 <_ux_utility_memory_free>
#endif

    /* Free receiver and events memory.  */
    _ux_utility_memory_free(receiver);
 80173f0:	0020      	movs	r0, r4
 80173f2:	f7ff fcaf 	bl	8016d54 <_ux_utility_memory_free>
}
 80173f6:	bd10      	pop	{r4, pc}

080173f8 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80173f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173fa:	001d      	movs	r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80173fc:	4b24      	ldr	r3, [pc, #144]	@ (8017490 <_ux_device_class_hid_report_get+0x98>)
    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80173fe:	2603      	movs	r6, #3
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017400:	681b      	ldr	r3, [r3, #0]
{
 8017402:	b095      	sub	sp, #84	@ 0x54
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8017404:	001a      	movs	r2, r3
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017406:	001c      	movs	r4, r3
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8017408:	329a      	adds	r2, #154	@ 0x9a
 801740a:	7811      	ldrb	r1, [r2, #0]
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801740c:	3408      	adds	r4, #8
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 801740e:	3201      	adds	r2, #1
 8017410:	7812      	ldrb	r2, [r2, #0]
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017412:	001f      	movs	r7, r3
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017414:	67e6      	str	r6, [r4, #124]	@ 0x7c

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8017416:	6e9e      	ldr	r6, [r3, #104]	@ 0x68

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
    hid_event.ux_device_class_hid_event_report_type = report_type;
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017418:	2340      	movs	r3, #64	@ 0x40
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801741a:	375c      	adds	r7, #92	@ 0x5c
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 801741c:	9101      	str	r1, [sp, #4]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 801741e:	9202      	str	r2, [sp, #8]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8017420:	9303      	str	r3, [sp, #12]

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8017422:	2a01      	cmp	r2, #1
 8017424:	d121      	bne.n	801746a <_ux_device_class_hid_report_get+0x72>
 8017426:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017428:	2b01      	cmp	r3, #1
 801742a:	d01e      	beq.n	801746a <_ux_device_class_hid_report_get+0x72>
        hid -> ux_device_class_hid_report_id != UX_TRUE)

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 801742c:	a901      	add	r1, sp, #4
 801742e:	f7ff fe45 	bl	80170bc <_ux_device_class_hid_event_get>
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
    }

    if (status == UX_SUCCESS)
 8017432:	2800      	cmp	r0, #0
 8017434:	d11f      	bne.n	8017476 <_ux_device_class_hid_report_get+0x7e>
        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
            hid_event_length =  host_length;
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017436:	2380      	movs	r3, #128	@ 0x80
 8017438:	9c03      	ldr	r4, [sp, #12]
 801743a:	005b      	lsls	r3, r3, #1
 801743c:	429c      	cmp	r4, r3
 801743e:	d900      	bls.n	8017442 <_ux_device_class_hid_report_get+0x4a>
 8017440:	001c      	movs	r4, r3
 8017442:	42ac      	cmp	r4, r5
 8017444:	d900      	bls.n	8017448 <_ux_device_class_hid_report_get+0x50>
 8017446:	002c      	movs	r4, r5
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8017448:	0022      	movs	r2, r4
 801744a:	2100      	movs	r1, #0
 801744c:	0030      	movs	r0, r6
 801744e:	f7ff fca9 	bl	8016da4 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8017452:	0022      	movs	r2, r4
 8017454:	0030      	movs	r0, r6
 8017456:	a904      	add	r1, sp, #16
 8017458:	f7ff fc72 	bl	8016d40 <_ux_utility_memory_copy>
        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 801745c:	002a      	movs	r2, r5
 801745e:	0021      	movs	r1, r4
 8017460:	0038      	movs	r0, r7
 8017462:	f7ff fa4f 	bl	8016904 <_ux_device_stack_transfer_request>

    /* Return the status to the caller.  */
    return(status);
}
 8017466:	b015      	add	sp, #84	@ 0x54
 8017468:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 801746a:	6943      	ldr	r3, [r0, #20]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d002      	beq.n	8017476 <_ux_device_class_hid_report_get+0x7e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8017470:	a901      	add	r1, sp, #4
 8017472:	4798      	blx	r3
 8017474:	e7dd      	b.n	8017432 <_ux_device_class_hid_report_get+0x3a>
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017476:	2380      	movs	r3, #128	@ 0x80
 8017478:	002c      	movs	r4, r5
 801747a:	005b      	lsls	r3, r3, #1
 801747c:	429d      	cmp	r5, r3
 801747e:	d900      	bls.n	8017482 <_ux_device_class_hid_report_get+0x8a>
 8017480:	001c      	movs	r4, r3
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8017482:	0022      	movs	r2, r4
 8017484:	2100      	movs	r1, #0
 8017486:	0030      	movs	r0, r6
 8017488:	f7ff fc8c 	bl	8016da4 <_ux_utility_memory_set>
 801748c:	e7e6      	b.n	801745c <_ux_device_class_hid_report_get+0x64>
 801748e:	46c0      	nop			@ (mov r8, r8)
 8017490:	200030e0 	.word	0x200030e0

08017494 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8017494:	b510      	push	{r4, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017496:	4b10      	ldr	r3, [pc, #64]	@ (80174d8 <_ux_device_class_hid_report_set+0x44>)
{
 8017498:	0004      	movs	r4, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 801749a:	681b      	ldr	r3, [r3, #0]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 801749c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 801749e:	b094      	sub	sp, #80	@ 0x50
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 80174a0:	9102      	str	r1, [sp, #8]
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80174a2:	2200      	movs	r2, #0
 80174a4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 80174a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 80174a8:	2801      	cmp	r0, #1
 80174aa:	d102      	bne.n	80174b2 <_ux_device_class_hid_report_set+0x1e>
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 80174ac:	780a      	ldrb	r2, [r1, #0]
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 80174ae:	3b01      	subs	r3, #1
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 80174b0:	3101      	adds	r1, #1
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 80174b2:	9201      	str	r2, [sp, #4]
        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 80174b4:	2b40      	cmp	r3, #64	@ 0x40
 80174b6:	d80d      	bhi.n	80174d4 <_ux_device_class_hid_report_set+0x40>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 80174b8:	9303      	str	r3, [sp, #12]
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 80174ba:	9a03      	ldr	r2, [sp, #12]
 80174bc:	a804      	add	r0, sp, #16
 80174be:	f7ff fc3f 	bl	8016d40 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 80174c2:	6923      	ldr	r3, [r4, #16]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d002      	beq.n	80174ce <_ux_device_class_hid_report_set+0x3a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 80174c8:	0020      	movs	r0, r4
 80174ca:	a901      	add	r1, sp, #4
 80174cc:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
}
 80174ce:	2000      	movs	r0, #0
 80174d0:	b014      	add	sp, #80	@ 0x50
 80174d2:	bd10      	pop	{r4, pc}
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 80174d4:	2340      	movs	r3, #64	@ 0x40
 80174d6:	e7ef      	b.n	80174b8 <_ux_device_class_hid_report_set+0x24>
 80174d8:	200030e0 	.word	0x200030e0

080174dc <_ux_device_class_hid_tasks_run>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check if the device is configured.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80174dc:	4b28      	ldr	r3, [pc, #160]	@ (8017580 <_ux_device_class_hid_tasks_run+0xa4>)
{
 80174de:	b513      	push	{r0, r1, r4, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80174e0:	681b      	ldr	r3, [r3, #0]
{
 80174e2:	0004      	movs	r4, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80174e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174e6:	2b03      	cmp	r3, #3
 80174e8:	d004      	beq.n	80174f4 <_ux_device_class_hid_tasks_run+0x18>
    {
        hid -> ux_device_class_hid_event_state = UX_STATE_EXIT;
 80174ea:	2301      	movs	r3, #1
 80174ec:	62c3      	str	r3, [r0, #44]	@ 0x2c
{
 80174ee:	2301      	movs	r3, #1

        /* Just go back to normal state.  */
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
        return(UX_STATE_IDLE);
    }
}
 80174f0:	0018      	movs	r0, r3
 80174f2:	bd16      	pop	{r1, r2, r4, pc}
    if (hid -> ux_device_class_hid_receiver)
 80174f4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d001      	beq.n	80174fe <_ux_device_class_hid_tasks_run+0x22>
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);
 80174fa:	69db      	ldr	r3, [r3, #28]
 80174fc:	4798      	blx	r3
    hid_event = &hid -> ux_device_class_hid_event;
 80174fe:	0023      	movs	r3, r4
    switch(hid -> ux_device_class_hid_event_state)
 8017500:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hid_event = &hid -> ux_device_class_hid_event;
 8017502:	3334      	adds	r3, #52	@ 0x34
 8017504:	9301      	str	r3, [sp, #4]
    switch(hid -> ux_device_class_hid_event_state)
 8017506:	2805      	cmp	r0, #5
 8017508:	d826      	bhi.n	8017558 <_ux_device_class_hid_tasks_run+0x7c>
 801750a:	f7e8 fe05 	bl	8000118 <__gnu_thumb1_case_sqi>
 801750e:	f003      	.short	0xf003
 8017510:	18252508 	.word	0x18252508
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 8017514:	f001 fd53 	bl	8018fbe <_ux_utility_time_get>
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 8017518:	2302      	movs	r3, #2
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 801751a:	6320      	str	r0, [r4, #48]	@ 0x30
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 801751c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        status = _ux_device_class_hid_event_check(hid, &hid_event);
 801751e:	0020      	movs	r0, r4
 8017520:	a901      	add	r1, sp, #4
 8017522:	f7ff fdb1 	bl	8017088 <_ux_device_class_hid_event_check>
        if (status != UX_SUCCESS)
 8017526:	2800      	cmp	r0, #0
 8017528:	d119      	bne.n	801755e <_ux_device_class_hid_tasks_run+0x82>
                                hid_event -> ux_device_class_hid_event_buffer;
 801752a:	9a01      	ldr	r2, [sp, #4]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 801752c:	6863      	ldr	r3, [r4, #4]
        trans -> ux_slave_transfer_request_data_pointer =
 801752e:	68d1      	ldr	r1, [r2, #12]
        trans -> ux_slave_transfer_request_requested_length =
 8017530:	6892      	ldr	r2, [r2, #8]
        trans -> ux_slave_transfer_request_data_pointer =
 8017532:	62d9      	str	r1, [r3, #44]	@ 0x2c
        trans -> ux_slave_transfer_request_requested_length =
 8017534:	635a      	str	r2, [r3, #52]	@ 0x34
        UX_SLAVE_TRANSFER_STATE_RESET(trans);
 8017536:	2200      	movs	r2, #0
 8017538:	651a      	str	r2, [r3, #80]	@ 0x50
        hid -> ux_device_class_hid_event_state = UX_STATE_WAIT;
 801753a:	2305      	movs	r3, #5
 801753c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        status = _ux_device_stack_transfer_run(trans,
 801753e:	9b01      	ldr	r3, [sp, #4]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 8017540:	6860      	ldr	r0, [r4, #4]
        status = _ux_device_stack_transfer_run(trans,
 8017542:	6899      	ldr	r1, [r3, #8]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 8017544:	3020      	adds	r0, #32
        status = _ux_device_stack_transfer_run(trans,
 8017546:	000a      	movs	r2, r1
 8017548:	f7ff f9ec 	bl	8016924 <_ux_device_stack_transfer_run>
        return(UX_STATE_WAIT);
 801754c:	2305      	movs	r3, #5
        if (status <= UX_STATE_NEXT)
 801754e:	2804      	cmp	r0, #4
 8017550:	d8ce      	bhi.n	80174f0 <_ux_device_class_hid_tasks_run+0x14>
            _ux_device_class_hid_event_free(hid);
 8017552:	0020      	movs	r0, r4
 8017554:	f7ff fdaa 	bl	80170ac <_ux_device_class_hid_event_free>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8017558:	2300      	movs	r3, #0
 801755a:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return(UX_STATE_IDLE);
 801755c:	e002      	b.n	8017564 <_ux_device_class_hid_tasks_run+0x88>
            if (hid -> ux_device_class_hid_event_wait_timeout == UX_WAIT_FOREVER)
 801755e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8017560:	3301      	adds	r3, #1
 8017562:	d101      	bne.n	8017568 <_ux_device_class_hid_tasks_run+0x8c>
                return(UX_STATE_IDLE);
 8017564:	2302      	movs	r3, #2
 8017566:	e7c3      	b.n	80174f0 <_ux_device_class_hid_tasks_run+0x14>
            tick = _ux_utility_time_get();
 8017568:	f001 fd29 	bl	8018fbe <_ux_utility_time_get>
            elapsed = _ux_utility_time_elapsed(hid -> ux_device_class_hid_event_wait_start, tick);
 801756c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801756e:	1a1a      	subs	r2, r3, r0
 8017570:	4283      	cmp	r3, r0
 8017572:	d800      	bhi.n	8017576 <_ux_device_class_hid_tasks_run+0x9a>
 8017574:	1ac2      	subs	r2, r0, r3
            if (elapsed < hid -> ux_device_class_hid_event_wait_timeout)
 8017576:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8017578:	4293      	cmp	r3, r2
 801757a:	d9d6      	bls.n	801752a <_ux_device_class_hid_tasks_run+0x4e>
 801757c:	e7f2      	b.n	8017564 <_ux_device_class_hid_tasks_run+0x88>
 801757e:	46c0      	nop			@ (mov r8, r8)
 8017580:	200030e0 	.word	0x200030e0

08017584 <_ux_device_class_hid_uninitialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8017584:	6a03      	ldr	r3, [r0, #32]
{
 8017586:	b510      	push	{r4, lr}
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8017588:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif

    /* Free memory for the array. */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
 801758a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801758c:	68d8      	ldr	r0, [r3, #12]
 801758e:	f7ff fbe1 	bl	8016d54 <_ux_utility_memory_free>
#endif
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8017592:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8017594:	f7ff fbde 	bl	8016d54 <_ux_utility_memory_free>
    /* Free read mutex.  */
    _ux_device_mutex_delete(&hid -> ux_device_class_hid_read_mutex);
#endif

    /* Uninitialize receiver.  */
    if (hid -> ux_device_class_hid_receiver)
 8017598:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801759a:	2800      	cmp	r0, #0
 801759c:	d001      	beq.n	80175a2 <_ux_device_class_hid_uninitialize+0x1e>
        hid -> ux_device_class_hid_receiver ->
 801759e:	6803      	ldr	r3, [r0, #0]
 80175a0:	4798      	blx	r3
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
 80175a2:	68a0      	ldr	r0, [r4, #8]
 80175a4:	f7ff fbd6 	bl	8016d54 <_ux_utility_memory_free>
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 80175a8:	0020      	movs	r0, r4
 80175aa:	f7ff fbd3 	bl	8016d54 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 80175ae:	2000      	movs	r0, #0
 80175b0:	bd10      	pop	{r4, pc}

080175b2 <_ux_device_class_storage_activate>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 80175b2:	0003      	movs	r3, r0

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 80175b4:	6a02      	ldr	r2, [r0, #32]
{
 80175b6:	b570      	push	{r4, r5, r6, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 80175b8:	6c90      	ldr	r0, [r2, #72]	@ 0x48

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 80175ba:	689a      	ldr	r2, [r3, #8]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)storage;
         
    /* Now the opposite, store the interface in the class instance.  */
    storage -> ux_slave_class_storage_interface =  interface_ptr;
 80175bc:	0003      	movs	r3, r0
 80175be:	0004      	movs	r4, r0
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)storage;
 80175c0:	6090      	str	r0, [r2, #8]
    storage -> ux_slave_class_storage_interface =  interface_ptr;
 80175c2:	c304      	stmia	r3!, {r2}

#else

    /* Locate the endpoints.  */
    /* Check the first endpoint direction, if IN we have the correct endpoint.  */
    endpoint = interface_ptr -> ux_slave_interface_first_endpoint;
 80175c4:	69d2      	ldr	r2, [r2, #28]
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80175c6:	3408      	adds	r4, #8
 80175c8:	7b95      	ldrb	r5, [r2, #14]

        /* Wrong direction, we found the OUT endpoint first.  */
        storage -> ux_device_class_storage_ep_out = endpoint;

        /* So the next endpoint has to be the IN endpoint.  */
        storage -> ux_device_class_storage_ep_in = endpoint -> ux_slave_endpoint_next_endpoint;
 80175ca:	6951      	ldr	r1, [r2, #20]
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80175cc:	2d7f      	cmp	r5, #127	@ 0x7f
 80175ce:	d81b      	bhi.n	8017608 <_ux_device_class_storage_activate+0x56>
        storage -> ux_device_class_storage_ep_out = endpoint;
 80175d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        storage -> ux_device_class_storage_ep_in = endpoint -> ux_slave_endpoint_next_endpoint;
 80175d2:	67e1      	str	r1, [r4, #124]	@ 0x7c
    }

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1

    /* Assign endpoint buffers.  */
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
 80175d4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
        ux_slave_transfer_request_data_pointer = UX_DEVICE_CLASS_STORAGE_BULKIN_BUFFER(storage);
 80175d6:	2480      	movs	r4, #128	@ 0x80
 80175d8:	6841      	ldr	r1, [r0, #4]
 80175da:	0164      	lsls	r4, r4, #5
 80175dc:	190c      	adds	r4, r1, r4
 80175de:	62d4      	str	r4, [r2, #44]	@ 0x2c
    storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request.
 80175e0:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
        ux_slave_transfer_request_data_pointer = UX_DEVICE_CLASS_STORAGE_BULKOUT_BUFFER(storage);
 80175e2:	62e1      	str	r1, [r4, #44]	@ 0x2c
#endif

    /* Reset states.  */
    storage -> ux_device_class_storage_buffer[0] = storage -> ux_device_class_storage_ep_out ->
                    ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer;
    storage -> ux_device_class_storage_buffer[1] = storage -> ux_device_class_storage_ep_in ->
 80175e4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
    storage -> ux_device_class_storage_buffer[0] = storage -> ux_device_class_storage_ep_out ->
 80175e6:	6701      	str	r1, [r0, #112]	@ 0x70
                    ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer;
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 80175e8:	0001      	movs	r1, r0
    storage -> ux_device_class_storage_buffer[1] = storage -> ux_device_class_storage_ep_in ->
 80175ea:	6743      	str	r3, [r0, #116]	@ 0x74
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 80175ec:	2300      	movs	r3, #0
 80175ee:	3190      	adds	r1, #144	@ 0x90
 80175f0:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_state = UX_STATE_RESET;
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 80175f2:	3912      	subs	r1, #18
 80175f4:	800b      	strh	r3, [r1, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_IDLE;
 80175f6:	6783      	str	r3, [r0, #120]	@ 0x78
    storage -> ux_device_class_storage_buffer_state[1] = UX_DEVICE_CLASS_STORAGE_BUFFER_IDLE;
    storage -> ux_device_class_storage_buffer_usb = 0;
    storage -> ux_device_class_storage_buffer_disk = 0;
    UX_SLAVE_TRANSFER_STATE_RESET(&storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request);
 80175f8:	6523      	str	r3, [r4, #80]	@ 0x50
    UX_SLAVE_TRANSFER_STATE_RESET(&storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request);
 80175fa:	6513      	str	r3, [r2, #80]	@ 0x50

    status = UX_SUCCESS;
#endif

    /* If there is a activate function call it.  */
    if (storage -> ux_slave_class_storage_instance_activate != UX_NULL)
 80175fc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d000      	beq.n	8017604 <_ux_device_class_storage_activate+0x52>
    {        
        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_activate(storage);
 8017602:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, storage, 0, 0, 0)

    /* Return completion status.  */
    return(status);
}
 8017604:	2000      	movs	r0, #0
 8017606:	bd70      	pop	{r4, r5, r6, pc}
        storage -> ux_device_class_storage_ep_in = endpoint;
 8017608:	67e2      	str	r2, [r4, #124]	@ 0x7c
        storage -> ux_device_class_storage_ep_out = endpoint -> ux_slave_endpoint_next_endpoint;
 801760a:	67d9      	str	r1, [r3, #124]	@ 0x7c
 801760c:	e7e2      	b.n	80175d4 <_ux_device_class_storage_activate+0x22>
	...

08017610 <_ux_device_class_storage_control_request>:
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017610:	4b1e      	ldr	r3, [pc, #120]	@ (801768c <_ux_device_class_storage_control_request+0x7c>)
{
 8017612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017614:	681d      	ldr	r5, [r3, #0]
{
 8017616:	0006      	movs	r6, r0

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
    
    /* Extract the request type from the SETUP packet..   */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017618:	002b      	movs	r3, r5
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801761a:	0028      	movs	r0, r5
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801761c:	335c      	adds	r3, #92	@ 0x5c
 801761e:	9301      	str	r3, [sp, #4]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017620:	309a      	adds	r0, #154	@ 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017622:	333d      	adds	r3, #61	@ 0x3d
 8017624:	781f      	ldrb	r7, [r3, #0]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017626:	f7ff fbc4 	bl	8016db2 <_ux_utility_short_get>
 801762a:	0004      	movs	r4, r0
    request_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801762c:	0028      	movs	r0, r5
 801762e:	309e      	adds	r0, #158	@ 0x9e
 8017630:	f7ff fbbf 	bl	8016db2 <_ux_utility_short_get>

    /* Check if wValue is valid.  */
    if (request_value != 0)
 8017634:	2c00      	cmp	r4, #0
 8017636:	d127      	bne.n	8017688 <_ux_device_class_storage_control_request+0x78>

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
    
    /* Get the storage instance from this class container.  */
    storage =  (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 8017638:	6a33      	ldr	r3, [r6, #32]
 801763a:	6c9e      	ldr	r6, [r3, #72]	@ 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 801763c:	2ffe      	cmp	r7, #254	@ 0xfe
 801763e:	d014      	beq.n	801766a <_ux_device_class_storage_control_request+0x5a>
 8017640:	2fff      	cmp	r7, #255	@ 0xff
 8017642:	d121      	bne.n	8017688 <_ux_device_class_storage_control_request+0x78>
    {

    case UX_SLAVE_CLASS_STORAGE_RESET:

        /* Check if wLength is valid.  */
        if (request_length != 0)
 8017644:	2800      	cmp	r0, #0
 8017646:	d11f      	bne.n	8017688 <_ux_device_class_storage_control_request+0x78>
            return(UX_ERROR);

#if defined(UX_DEVICE_STANDALONE)
        endpoint_in = storage -> ux_device_class_storage_ep_in;
 8017648:	0033      	movs	r3, r6
 801764a:	3308      	adds	r3, #8
 801764c:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
        endpoint_out = storage -> ux_device_class_storage_ep_out;
 801764e:	1d33      	adds	r3, r6, #4
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
        }
#endif

        /* First cancel any transfer on the endpoint OUT, from the host.  */
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8017650:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8017652:	2128      	movs	r1, #40	@ 0x28
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8017654:	3020      	adds	r0, #32
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8017656:	f7ff f933 	bl	80168c0 <_ux_device_stack_transfer_abort>

        /* Then cancel any transfer on the endpoint IN, from the host.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801765a:	0028      	movs	r0, r5
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 801765c:	2128      	movs	r1, #40	@ 0x28
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801765e:	3020      	adds	r0, #32
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8017660:	f7ff f92e 	bl	80168c0 <_ux_device_stack_transfer_abort>

        /* Reset phase error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017664:	6574      	str	r4, [r6, #84]	@ 0x54
        return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
}
 8017666:	0020      	movs	r0, r4
 8017668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (request_length < 1)
 801766a:	2800      	cmp	r0, #0
 801766c:	d00c      	beq.n	8017688 <_ux_device_class_storage_control_request+0x78>
        *transfer_request -> ux_slave_transfer_request_data_pointer =  (UCHAR)(storage -> ux_slave_class_storage_number_lun -1);
 801766e:	68b3      	ldr	r3, [r6, #8]
 8017670:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 8017672:	3b01      	subs	r3, #1
 8017674:	7013      	strb	r3, [r2, #0]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017676:	2303      	movs	r3, #3
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8017678:	2201      	movs	r2, #1
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801767a:	3508      	adds	r5, #8
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801767c:	0011      	movs	r1, r2
 801767e:	9801      	ldr	r0, [sp, #4]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017680:	67eb      	str	r3, [r5, #124]	@ 0x7c
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8017682:	f7ff f93f 	bl	8016904 <_ux_device_stack_transfer_request>
        break;
 8017686:	e7ee      	b.n	8017666 <_ux_device_class_storage_control_request+0x56>
        return(UX_ERROR);
 8017688:	24ff      	movs	r4, #255	@ 0xff
 801768a:	e7ec      	b.n	8017666 <_ux_device_class_storage_control_request+0x56>
 801768c:	200030e0 	.word	0x200030e0

08017690 <_ux_device_class_storage_csw_send>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                UX_SLAVE_ENDPOINT *endpoint_in, UCHAR csw_status)
{
 8017690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(UX_DEVICE_STANDALONE)

    /* Reset transfer request buffer pointers.  */
    storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 8017692:	1d03      	adds	r3, r0, #4
 8017694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
{
 8017696:	0015      	movs	r5, r2
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 8017698:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 801769a:	0004      	movs	r4, r0
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 801769c:	62da      	str	r2, [r3, #44]	@ 0x2c
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[1];
 801769e:	0003      	movs	r3, r0
 80176a0:	3308      	adds	r3, #8
 80176a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80176a4:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80176a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

    /* If CSW skipped, just return.  */
    if (UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status))
 80176a8:	0003      	movs	r3, r0
 80176aa:	3357      	adds	r3, #87	@ 0x57
 80176ac:	781e      	ldrb	r6, [r3, #0]
 80176ae:	2e00      	cmp	r6, #0
 80176b0:	d124      	bne.n	80176fc <_ux_device_class_storage_csw_send+0x6c>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get CSW buffer pointer.  */
    csw_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80176b2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(csw_buffer, 0, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH); /* Use case of memset is verified. */
 80176b4:	220d      	movs	r2, #13
 80176b6:	0031      	movs	r1, r6
 80176b8:	0038      	movs	r0, r7
 80176ba:	f7ff fb73 	bl	8016da4 <_ux_utility_memory_set>

    /* Store the signature of the CSW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE], UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE_MASK);
 80176be:	0038      	movs	r0, r7
 80176c0:	490f      	ldr	r1, [pc, #60]	@ (8017700 <_ux_device_class_storage_csw_send+0x70>)
 80176c2:	f7ff fa35 	bl	8016b30 <_ux_utility_long_put>

    /* Store the SCSI tag from the CBW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_TAG], storage -> ux_slave_class_storage_scsi_tag);
 80176c6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80176c8:	1d38      	adds	r0, r7, #4
 80176ca:	f7ff fa31 	bl	8016b30 <_ux_utility_long_put>

    /* Store the dCSWDataResidue.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_DATA_RESIDUE], storage -> ux_slave_class_storage_csw_residue);
 80176ce:	0038      	movs	r0, r7
 80176d0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80176d2:	3008      	adds	r0, #8
 80176d4:	f7ff fa2c 	bl	8016b30 <_ux_utility_long_put>

    /* Store the status of the previous operation.  */
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 80176d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54

#if defined(UX_DEVICE_STANDALONE)

    /* Next: Transfer (CSW).  */
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 80176da:	2203      	movs	r2, #3
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 80176dc:	733b      	strb	r3, [r7, #12]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 80176de:	0023      	movs	r3, r4
 80176e0:	337d      	adds	r3, #125	@ 0x7d
 80176e2:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 80176e4:	3220      	adds	r2, #32
 80176e6:	709a      	strb	r2, [r3, #2]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80176e8:	3520      	adds	r5, #32
    storage -> ux_device_class_storage_transfer = transfer_request;

    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 80176ea:	0022      	movs	r2, r4
    storage -> ux_device_class_storage_transfer = transfer_request;
 80176ec:	330b      	adds	r3, #11
 80176ee:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 80176f0:	230d      	movs	r3, #13
 80176f2:	328c      	adds	r2, #140	@ 0x8c
    storage -> ux_device_class_storage_data_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
    storage -> ux_device_class_storage_data_count = 0;
 80176f4:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 80176f6:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 80176f8:	6093      	str	r3, [r2, #8]
    storage -> ux_device_class_storage_data_count = 0;
 80176fa:	6026      	str	r6, [r4, #0]
                                    UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);
#endif

    /* Return completion status.  */
    return(status);
}
 80176fc:	2000      	movs	r0, #0
 80176fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017700:	53425355 	.word	0x53425355

08017704 <_ux_device_class_storage_deactivate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017704:	6a03      	ldr	r3, [r0, #32]
{
 8017706:	b570      	push	{r4, r5, r6, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017708:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

#if defined(UX_DEVICE_STANDALONE)

    endpoint_in = storage -> ux_device_class_storage_ep_in;
    endpoint_out = storage -> ux_device_class_storage_ep_out;
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 801770a:	2126      	movs	r1, #38	@ 0x26
    endpoint_in = storage -> ux_device_class_storage_ep_in;
 801770c:	0023      	movs	r3, r4
 801770e:	3308      	adds	r3, #8
 8017710:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
    endpoint_out = storage -> ux_device_class_storage_ep_out;
 8017712:	1d23      	adds	r3, r4, #4
 8017714:	6fde      	ldr	r6, [r3, #124]	@ 0x7c
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8017716:	0028      	movs	r0, r5
 8017718:	f7ff f8ee 	bl	80168f8 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 801771c:	2126      	movs	r1, #38	@ 0x26
 801771e:	0030      	movs	r0, r6
 8017720:	f7ff f8ea 	bl	80168f8 <_ux_device_stack_transfer_all_request_abort>
    endpoint_out -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
 8017724:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017726:	62f3      	str	r3, [r6, #44]	@ 0x2c
                                storage -> ux_device_class_storage_buffer[0];
    endpoint_in -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
 8017728:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801772a:	62eb      	str	r3, [r5, #44]	@ 0x2c
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
#endif

    /* If there is a deactivate function call it.  */
    if (storage -> ux_slave_class_storage_instance_deactivate != UX_NULL)
 801772c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801772e:	2b00      	cmp	r3, #0
 8017730:	d001      	beq.n	8017736 <_ux_device_class_storage_deactivate+0x32>
    {

        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_deactivate(storage);
 8017732:	0020      	movs	r0, r4
 8017734:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(storage);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8017736:	2000      	movs	r0, #0
 8017738:	bd70      	pop	{r4, r5, r6, pc}

0801773a <_ux_device_class_storage_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 801773a:	0003      	movs	r3, r0
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 801773c:	6800      	ldr	r0, [r0, #0]
{
 801773e:	b510      	push	{r4, lr}
    switch (command -> ux_slave_class_command_request)
 8017740:	3801      	subs	r0, #1
 8017742:	2806      	cmp	r0, #6
 8017744:	d81f      	bhi.n	8017786 <_ux_device_class_storage_entry+0x4c>
 8017746:	f7e8 fcf1 	bl	800012c <__gnu_thumb1_case_uqi>
 801774a:	120c      	.short	0x120c
 801774c:	1e041a16 	.word	0x1e041a16
 8017750:	08          	.byte	0x08
 8017751:	00          	.byte	0x00

        /* Call the init function of the Storage class.  */
#if defined(UX_DEVICE_CLASS_STORAGE_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_storage_initialize(command);
#else
        status =  _ux_device_class_storage_initialize(command);
 8017752:	0018      	movs	r0, r3
 8017754:	f000 f82a 	bl	80177ac <_ux_device_class_storage_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 8017758:	bd10      	pop	{r4, pc}
        status =  _ux_device_class_storage_uninitialize(command);
 801775a:	0018      	movs	r0, r3
 801775c:	f000 feb6 	bl	80184cc <_ux_device_class_storage_uninitialize>
        return(status);
 8017760:	e7fa      	b.n	8017758 <_ux_device_class_storage_entry+0x1e>
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 8017762:	695b      	ldr	r3, [r3, #20]
            return(UX_NO_CLASS_MATCH);
 8017764:	2057      	movs	r0, #87	@ 0x57
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 8017766:	2b08      	cmp	r3, #8
 8017768:	d1f6      	bne.n	8017758 <_ux_device_class_storage_entry+0x1e>
            return(UX_SUCCESS);
 801776a:	2000      	movs	r0, #0
 801776c:	e7f4      	b.n	8017758 <_ux_device_class_storage_entry+0x1e>
        status =  _ux_device_class_storage_activate(command);
 801776e:	0018      	movs	r0, r3
 8017770:	f7ff ff1f 	bl	80175b2 <_ux_device_class_storage_activate>
        return(status);
 8017774:	e7f0      	b.n	8017758 <_ux_device_class_storage_entry+0x1e>
        status =  _ux_device_class_storage_deactivate(command);
 8017776:	0018      	movs	r0, r3
 8017778:	f7ff ffc4 	bl	8017704 <_ux_device_class_storage_deactivate>
        return(status);
 801777c:	e7ec      	b.n	8017758 <_ux_device_class_storage_entry+0x1e>
        status = _ux_device_class_storage_control_request(command);
 801777e:	0018      	movs	r0, r3
 8017780:	f7ff ff46 	bl	8017610 <_ux_device_class_storage_control_request>
        return(status);
 8017784:	e7e8      	b.n	8017758 <_ux_device_class_storage_entry+0x1e>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8017786:	2002      	movs	r0, #2
 8017788:	2254      	movs	r2, #84	@ 0x54
 801778a:	2107      	movs	r1, #7
 801778c:	f7ff f922 	bl	80169d4 <_ux_system_error_handler>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8017790:	2054      	movs	r0, #84	@ 0x54
 8017792:	e7e1      	b.n	8017758 <_ux_device_class_storage_entry+0x1e>

08017794 <_ux_device_class_storage_format>:

    UX_PARAMETER_NOT_USED(endpoint_out);
#endif

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017794:	2338      	movs	r3, #56	@ 0x38
 8017796:	4359      	muls	r1, r3
 8017798:	4b03      	ldr	r3, [pc, #12]	@ (80177a8 <_ux_device_class_storage_format+0x14>)
 801779a:	1841      	adds	r1, r0, r1
 801779c:	624b      	str	r3, [r1, #36]	@ 0x24
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801779e:	2301      	movs	r3, #1
 80177a0:	6543      	str	r3, [r0, #84]	@ 0x54
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}
 80177a2:	2054      	movs	r0, #84	@ 0x54
 80177a4:	4770      	bx	lr
 80177a6:	46c0      	nop			@ (mov r8, r8)
 80177a8:	00012605 	.word	0x00012605

080177ac <_ux_device_class_storage_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80177ac:	b570      	push	{r4, r5, r6, lr}
UX_SLAVE_CLASS                          *class_inst;
ULONG                                   lun_index;


    /* Get the pointer to the application parameters for the storage class.  */
    storage_parameter =  command -> ux_slave_class_command_parameter;
 80177ae:	6a45      	ldr	r5, [r0, #36]	@ 0x24
{
 80177b0:	0003      	movs	r3, r0

    /* Ensure the number of LUN declared by the caller does not exceed the
       max number allowed for LUN storage.  */
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 80177b2:	68aa      	ldr	r2, [r5, #8]
        return UX_ERROR;
 80177b4:	20ff      	movs	r0, #255	@ 0xff
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 80177b6:	2a01      	cmp	r2, #1
 80177b8:	d846      	bhi.n	8017848 <_ux_device_class_storage_initialize+0x9c>

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device storage class.  */
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 80177ba:	2100      	movs	r1, #0
 80177bc:	22b4      	movs	r2, #180	@ 0xb4
 80177be:	0008      	movs	r0, r1
    class_inst =  command -> ux_slave_class_command_class_ptr;
 80177c0:	6a1e      	ldr	r6, [r3, #32]
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 80177c2:	f7ff f9c7 	bl	8016b54 <_ux_utility_memory_allocate>
 80177c6:	1e04      	subs	r4, r0, #0

    /* Check for successful allocation.  */
    if (storage == UX_NULL)
 80177c8:	d044      	beq.n	8017854 <_ux_device_class_storage_initialize+0xa8>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1

    /* Allocate bulk endpoint buffer.  */
    UX_ASSERT(!UX_DEVICE_CLASS_STORAGE_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);
    storage -> ux_device_class_storage_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN,
 80177ca:	2280      	movs	r2, #128	@ 0x80
 80177cc:	2101      	movs	r1, #1
 80177ce:	2000      	movs	r0, #0
 80177d0:	0192      	lsls	r2, r2, #6
 80177d2:	f7ff f9bf 	bl	8016b54 <_ux_utility_memory_allocate>
            status = UX_MEMORY_INSUFFICIENT;
    }
#else

    /* Save tasks run entry.  */
    class_inst -> ux_slave_class_task_function = _ux_device_class_storage_tasks_run;
 80177d6:	4b22      	ldr	r3, [pc, #136]	@ (8017860 <_ux_device_class_storage_initialize+0xb4>)
    storage -> ux_device_class_storage_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN,
 80177d8:	6060      	str	r0, [r4, #4]
    class_inst -> ux_slave_class_task_function = _ux_device_class_storage_tasks_run;
 80177da:	6533      	str	r3, [r6, #80]	@ 0x50
    {

        UX_THREAD_EXTENSION_PTR_SET(&(class_inst -> ux_slave_class_thread), class_inst)

        /* Store the number of LUN declared.  */
        storage -> ux_slave_class_storage_number_lun = storage_parameter -> ux_slave_class_storage_parameter_number_lun;
 80177dc:	68ab      	ldr	r3, [r5, #8]
 80177de:	60a3      	str	r3, [r4, #8]

        /* Copy each individual LUN parameters.  */
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d017      	beq.n	8017814 <_ux_device_class_storage_initialize+0x68>
        {

            /* Check block length size. */
            if (storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 80177e4:	2280      	movs	r2, #128	@ 0x80
 80177e6:	692b      	ldr	r3, [r5, #16]
 80177e8:	0152      	lsls	r2, r2, #5
 80177ea:	4293      	cmp	r3, r2
 80177ec:	d82d      	bhi.n	801784a <_ux_device_class_storage_initialize+0x9e>
                status = (UX_MEMORY_INSUFFICIENT);
                break;
            }

            /* Store all the application parameter information about the media.  */
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 80177ee:	68ea      	ldr	r2, [r5, #12]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_block_length   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length;
 80177f0:	6123      	str	r3, [r4, #16]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 80177f2:	696b      	ldr	r3, [r5, #20]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 80177f4:	60e2      	str	r2, [r4, #12]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 80177f6:	6163      	str	r3, [r4, #20]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_removable_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_removable_flag;
 80177f8:	69ab      	ldr	r3, [r5, #24]
 80177fa:	61a3      	str	r3, [r4, #24]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read_only_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read_only_flag;
 80177fc:	69eb      	ldr	r3, [r5, #28]
 80177fe:	61e3      	str	r3, [r4, #28]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read;
 8017800:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017802:	6323      	str	r3, [r4, #48]	@ 0x30
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_flush          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_flush;
 8017804:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8017806:	63a3      	str	r3, [r4, #56]	@ 0x38
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_write          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_write;
 8017808:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801780a:	6363      	str	r3, [r4, #52]	@ 0x34
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_status         = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_status;
 801780c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801780e:	63e3      	str	r3, [r4, #60]	@ 0x3c
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_notification;
 8017810:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8017812:	6423      	str	r3, [r4, #64]	@ 0x40
        /* If it's OK, complete it.  */
        if (status == UX_SUCCESS)
        {

            /* Store the start and stop signals if needed by the application.  */
            storage -> ux_slave_class_storage_instance_activate = storage_parameter -> ux_slave_class_storage_instance_activate;
 8017814:	682b      	ldr	r3, [r5, #0]
 8017816:	65a3      	str	r3, [r4, #88]	@ 0x58
            storage -> ux_slave_class_storage_instance_deactivate = storage_parameter -> ux_slave_class_storage_instance_deactivate;
 8017818:	686b      	ldr	r3, [r5, #4]
 801781a:	65e3      	str	r3, [r4, #92]	@ 0x5c

            /* Store the vendor id, product id, product revision and product serial.  */
            if (storage_parameter -> ux_slave_class_storage_parameter_vendor_id)
 801781c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801781e:	2b00      	cmp	r3, #0
 8017820:	d100      	bne.n	8017824 <_ux_device_class_storage_initialize+0x78>
                storage -> ux_slave_class_storage_vendor_id = storage_parameter -> ux_slave_class_storage_parameter_vendor_id;
            else
                storage -> ux_slave_class_storage_vendor_id = _ux_system_slave_class_storage_vendor_id;
 8017822:	4b10      	ldr	r3, [pc, #64]	@ (8017864 <_ux_device_class_storage_initialize+0xb8>)
 8017824:	6623      	str	r3, [r4, #96]	@ 0x60

            if (storage_parameter -> ux_slave_class_storage_parameter_product_id)
 8017826:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8017828:	2b00      	cmp	r3, #0
 801782a:	d100      	bne.n	801782e <_ux_device_class_storage_initialize+0x82>
                storage -> ux_slave_class_storage_product_id = storage_parameter -> ux_slave_class_storage_parameter_product_id;
            else
                storage -> ux_slave_class_storage_product_id = _ux_system_slave_class_storage_product_id;
 801782c:	4b0e      	ldr	r3, [pc, #56]	@ (8017868 <_ux_device_class_storage_initialize+0xbc>)
 801782e:	6663      	str	r3, [r4, #100]	@ 0x64

            if (storage_parameter -> ux_slave_class_storage_parameter_product_rev)
 8017830:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017832:	2b00      	cmp	r3, #0
 8017834:	d100      	bne.n	8017838 <_ux_device_class_storage_initialize+0x8c>
                storage -> ux_slave_class_storage_product_rev = storage_parameter -> ux_slave_class_storage_parameter_product_rev;
            else
                storage -> ux_slave_class_storage_product_rev = _ux_system_slave_class_storage_product_rev;
 8017836:	4b0d      	ldr	r3, [pc, #52]	@ (801786c <_ux_device_class_storage_initialize+0xc0>)
 8017838:	66a3      	str	r3, [r4, #104]	@ 0x68

            if (storage_parameter -> ux_slave_class_storage_parameter_product_serial)
 801783a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801783c:	2b00      	cmp	r3, #0
 801783e:	d100      	bne.n	8017842 <_ux_device_class_storage_initialize+0x96>
                storage -> ux_slave_class_storage_product_serial = storage_parameter -> ux_slave_class_storage_parameter_product_serial;
            else
                storage -> ux_slave_class_storage_product_serial = _ux_system_slave_class_storage_product_serial;
 8017840:	4b0b      	ldr	r3, [pc, #44]	@ (8017870 <_ux_device_class_storage_initialize+0xc4>)

            /* Save the address of the STORAGE instance inside the STORAGE container.  */
            class_inst -> ux_slave_class_instance = (VOID *) storage;

            return(UX_SUCCESS);
 8017842:	2000      	movs	r0, #0
 8017844:	66e3      	str	r3, [r4, #108]	@ 0x6c
            class_inst -> ux_slave_class_instance = (VOID *) storage;
 8017846:	64b4      	str	r4, [r6, #72]	@ 0x48
    /* Free instance.  */
    _ux_utility_memory_free(storage);

    /* Return completion status.  */
    return(status);
}
 8017848:	bd70      	pop	{r4, r5, r6, pc}
    if (storage -> ux_device_class_storage_endpoint_buffer != UX_NULL)
 801784a:	2800      	cmp	r0, #0
 801784c:	d104      	bne.n	8017858 <_ux_device_class_storage_initialize+0xac>
    _ux_utility_memory_free(storage);
 801784e:	0020      	movs	r0, r4
 8017850:	f7ff fa80 	bl	8016d54 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8017854:	2012      	movs	r0, #18
 8017856:	e7f7      	b.n	8017848 <_ux_device_class_storage_initialize+0x9c>
        _ux_utility_memory_free(storage -> ux_device_class_storage_endpoint_buffer);
 8017858:	f7ff fa7c 	bl	8016d54 <_ux_utility_memory_free>
 801785c:	e7f7      	b.n	801784e <_ux_device_class_storage_initialize+0xa2>
 801785e:	46c0      	nop			@ (mov r8, r8)
 8017860:	08017ce1 	.word	0x08017ce1
 8017864:	2000028a 	.word	0x2000028a
 8017868:	20000279 	.word	0x20000279
 801786c:	20000274 	.word	0x20000274
 8017870:	2000025f 	.word	0x2000025f

08017874 <_ux_device_class_storage_inquiry>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017876:	b085      	sub	sp, #20
        return(UX_ERROR);
    }
#endif

    /* From the SCSI Inquiry payload, get the page code.  */
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 8017878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Obtain inquiry buffer pointer.  */
    inquiry_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 801787a:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 801787c:	789f      	ldrb	r7, [r3, #2]
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 801787e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8017880:	9103      	str	r1, [sp, #12]
 8017882:	0004      	movs	r4, r0
 8017884:	0016      	movs	r6, r2

    /* Ensure the data buffer is cleaned.  */
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017886:	2100      	movs	r1, #0
 8017888:	2224      	movs	r2, #36	@ 0x24
 801788a:	0028      	movs	r0, r5
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 801788c:	9302      	str	r3, [sp, #8]
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 801788e:	f7ff fa89 	bl	8016da4 <_ux_utility_memory_set>

    /* Check for the maximum length to be returned. */
    if (inquiry_length > UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH)
 8017892:	9b02      	ldr	r3, [sp, #8]
 8017894:	9301      	str	r3, [sp, #4]
 8017896:	2b24      	cmp	r3, #36	@ 0x24
 8017898:	d901      	bls.n	801789e <_ux_device_class_storage_inquiry+0x2a>
 801789a:	2324      	movs	r3, #36	@ 0x24
 801789c:	9301      	str	r3, [sp, #4]
        inquiry_length = UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;

    /* Default CSW to passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801789e:	2300      	movs	r3, #0
 80178a0:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Ensure we know about the page code.  */
    switch (inquiry_page_code)
 80178a2:	429f      	cmp	r7, r3
 80178a4:	d00c      	beq.n	80178c0 <_ux_device_class_storage_inquiry+0x4c>
 80178a6:	2f80      	cmp	r7, #128	@ 0x80
 80178a8:	d043      	beq.n	8017932 <_ux_device_class_storage_inquiry+0xbe>
        /* The page code is not supported.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
#endif

        /* And update the REQUEST_SENSE codes.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80178aa:	2338      	movs	r3, #56	@ 0x38
 80178ac:	9a03      	ldr	r2, [sp, #12]

        /* Now we set the CSW with failure.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;

        /* Return error.  */
        status =  UX_ERROR;
 80178ae:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80178b0:	4353      	muls	r3, r2
 80178b2:	4a2a      	ldr	r2, [pc, #168]	@ (801795c <_ux_device_class_storage_inquiry+0xe8>)
 80178b4:	18e3      	adds	r3, r4, r3
 80178b6:	625a      	str	r2, [r3, #36]	@ 0x24
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80178b8:	2301      	movs	r3, #1
 80178ba:	6563      	str	r3, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 80178bc:	b005      	add	sp, #20
 80178be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PERIPHERAL_TYPE] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type;
 80178c0:	2338      	movs	r3, #56	@ 0x38
 80178c2:	9a03      	ldr	r2, [sp, #12]
 80178c4:	435a      	muls	r2, r3
 80178c6:	18a2      	adds	r2, r4, r2
 80178c8:	6951      	ldr	r1, [r2, #20]
 80178ca:	7029      	strb	r1, [r5, #0]
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_REMOVABLE_MEDIA] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_removable_flag;
 80178cc:	6991      	ldr	r1, [r2, #24]
 80178ce:	7069      	strb	r1, [r5, #1]
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type == UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 80178d0:	6952      	ldr	r2, [r2, #20]
 80178d2:	2a05      	cmp	r2, #5
 80178d4:	d100      	bne.n	80178d8 <_ux_device_class_storage_inquiry+0x64>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x32;
 80178d6:	2732      	movs	r7, #50	@ 0x32
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 80178d8:	9a03      	ldr	r2, [sp, #12]
 80178da:	70ef      	strb	r7, [r5, #3]
 80178dc:	4353      	muls	r3, r2
 80178de:	18e3      	adds	r3, r4, r3
 80178e0:	695a      	ldr	r2, [r3, #20]
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH_CD_ROM;
 80178e2:	235b      	movs	r3, #91	@ 0x5b
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 80178e4:	2a05      	cmp	r2, #5
 80178e6:	d000      	beq.n	80178ea <_ux_device_class_storage_inquiry+0x76>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 80178e8:	3b37      	subs	r3, #55	@ 0x37
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 80178ea:	0028      	movs	r0, r5
 80178ec:	712b      	strb	r3, [r5, #4]
 80178ee:	2208      	movs	r2, #8
 80178f0:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80178f2:	3008      	adds	r0, #8
 80178f4:	f7ff fa24 	bl	8016d40 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 80178f8:	0028      	movs	r0, r5
 80178fa:	2210      	movs	r2, #16
 80178fc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80178fe:	3010      	adds	r0, #16
 8017900:	f7ff fa1e 	bl	8016d40 <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 8017904:	0028      	movs	r0, r5
 8017906:	2204      	movs	r2, #4
 8017908:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 801790a:	3020      	adds	r0, #32
 801790c:	f7ff fa18 	bl	8016d40 <_ux_utility_memory_copy>
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017910:	0023      	movs	r3, r4
 8017912:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_data_count = 0;
 8017914:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017916:	337f      	adds	r3, #127	@ 0x7f
 8017918:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 801791a:	3b02      	subs	r3, #2
 801791c:	3a1e      	subs	r2, #30
 801791e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length = inquiry_length;
 8017920:	9a01      	ldr	r2, [sp, #4]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017922:	330b      	adds	r3, #11
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017924:	3620      	adds	r6, #32
    storage -> ux_device_class_storage_data_count = 0;
 8017926:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017928:	601e      	str	r6, [r3, #0]
    storage -> ux_device_class_storage_device_length = inquiry_length;
 801792a:	605a      	str	r2, [r3, #4]
    storage -> ux_device_class_storage_data_length = inquiry_length;
 801792c:	60da      	str	r2, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 801792e:	6020      	str	r0, [r4, #0]
    return(status);
 8017930:	e7c4      	b.n	80178bc <_ux_device_class_storage_inquiry+0x48>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL);
 8017932:	0039      	movs	r1, r7
 8017934:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017936:	f7ff fa48 	bl	8016dca <_ux_utility_short_put_big_endian>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer + 2, 20);
 801793a:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801793c:	2114      	movs	r1, #20
 801793e:	3002      	adds	r0, #2
 8017940:	f7ff fa43 	bl	8016dca <_ux_utility_short_put_big_endian>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer + 4, storage -> ux_slave_class_storage_product_serial, 20); /* Use case of memcpy is verified. */
 8017944:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017946:	2214      	movs	r2, #20
 8017948:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801794a:	3004      	adds	r0, #4
 801794c:	f7ff f9f8 	bl	8016d40 <_ux_utility_memory_copy>
        if (inquiry_length > 24)
 8017950:	9b02      	ldr	r3, [sp, #8]
 8017952:	2b18      	cmp	r3, #24
 8017954:	d9dc      	bls.n	8017910 <_ux_device_class_storage_inquiry+0x9c>
            inquiry_length = 24;
 8017956:	2318      	movs	r3, #24
 8017958:	9301      	str	r3, [sp, #4]
 801795a:	e7d9      	b.n	8017910 <_ux_device_class_storage_inquiry+0x9c>
 801795c:	00012605 	.word	0x00012605

08017960 <_ux_device_class_storage_mode_select>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SELECT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint.  */
    if (storage -> ux_slave_class_storage_host_length)
 8017960:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 8017962:	000b      	movs	r3, r1
 8017964:	b510      	push	{r4, lr}
    if (storage -> ux_slave_class_storage_host_length)
 8017966:	2a00      	cmp	r2, #0
 8017968:	d000      	beq.n	801796c <_ux_device_class_storage_mode_select+0xc>
        _ux_device_stack_endpoint_stall(endpoint_out);
#else
        UX_PARAMETER_NOT_USED(endpoint_out);
#endif

        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 801796a:	6502      	str	r2, [r0, #80]	@ 0x50
    }

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 801796c:	2138      	movs	r1, #56	@ 0x38
 801796e:	4359      	muls	r1, r3
 8017970:	4b05      	ldr	r3, [pc, #20]	@ (8017988 <_ux_device_class_storage_mode_select+0x28>)
 8017972:	1841      	adds	r1, r0, r1
 8017974:	624b      	str	r3, [r1, #36]	@ 0x24
                                            UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017976:	2301      	movs	r3, #1

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8017978:	2254      	movs	r2, #84	@ 0x54
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801797a:	6543      	str	r3, [r0, #84]	@ 0x54
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 801797c:	2107      	movs	r1, #7
 801797e:	2002      	movs	r0, #2
 8017980:	f7ff f828 	bl	80169d4 <_ux_system_error_handler>
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error!  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}    
 8017984:	2054      	movs	r0, #84	@ 0x54
 8017986:	bd10      	pop	{r4, pc}
 8017988:	00012605 	.word	0x00012605

0801798c <_ux_device_class_storage_mode_sense>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SENSE, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801798c:	0013      	movs	r3, r2
{
 801798e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017990:	b087      	sub	sp, #28
 8017992:	0005      	movs	r5, r0
 8017994:	980c      	ldr	r0, [sp, #48]	@ 0x30
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017996:	3320      	adds	r3, #32
 8017998:	9305      	str	r3, [sp, #20]

    /* Get the command format : we have 1a and 5a.  */
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 801799a:	7803      	ldrb	r3, [r0, #0]
{
 801799c:	0016      	movs	r6, r2
    
    /* Extract the notification from the cbwcb.  */
    page_code =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PC_PAGE_CODE);
 801799e:	7887      	ldrb	r7, [r0, #2]
{
 80179a0:	9104      	str	r1, [sp, #16]
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 80179a2:	9303      	str	r3, [sp, #12]

    /* Check the command.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 80179a4:	2b1a      	cmp	r3, #26
 80179a6:	d147      	bne.n	8017a38 <_ux_device_class_storage_mode_sense+0xac>
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 80179a8:	7903      	ldrb	r3, [r0, #4]
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_6;
 80179aa:	2404      	movs	r4, #4
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 80179ac:	9301      	str	r3, [sp, #4]
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
 80179ae:	2302      	movs	r3, #2
 80179b0:	9302      	str	r3, [sp, #8]
    /* Ensure reply not exceed storage buffer.  */
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
        mode_sense_reply_length = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;

    /* Ensure memory buffer cleaned.  */
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length); /* Use case of memset is verified. */
 80179b2:	2100      	movs	r1, #0
 80179b4:	9a01      	ldr	r2, [sp, #4]
 80179b6:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80179b8:	f7ff f9f4 	bl	8016da4 <_ux_utility_memory_set>

    /* Establish READ ONLY flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 80179bc:	2238      	movs	r2, #56	@ 0x38
 80179be:	9b04      	ldr	r3, [sp, #16]
 80179c0:	435a      	muls	r2, r3
 80179c2:	18aa      	adds	r2, r5, r2
 80179c4:	69d3      	ldr	r3, [r2, #28]
        page_pointer += page_length;
    }
#endif

    /* Caching mode page is returned if cache flush callback implemented.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 80179c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 80179c8:	3b01      	subs	r3, #1
 80179ca:	4259      	negs	r1, r3
 80179cc:	414b      	adcs	r3, r1
 80179ce:	01db      	lsls	r3, r3, #7
 80179d0:	9304      	str	r3, [sp, #16]
    page_pointer = transfer_request -> ux_slave_transfer_request_data_pointer + response_header_length;
 80179d2:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80179d4:	191b      	adds	r3, r3, r4
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 80179d6:	2a00      	cmp	r2, #0
 80179d8:	d03b      	beq.n	8017a52 <_ux_device_class_storage_mode_sense+0xc6>
 80179da:	2f08      	cmp	r7, #8
 80179dc:	d001      	beq.n	80179e2 <_ux_device_class_storage_mode_sense+0x56>
        (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE ||
 80179de:	2f3f      	cmp	r7, #63	@ 0x3f
 80179e0:	d143      	bne.n	8017a6a <_ux_device_class_storage_mode_sense+0xde>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL))
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_CACHE_LENGTH;

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 80179e2:	2208      	movs	r2, #8
        /* Store the length of the page data.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_PAGE_LENGTH;

        /* Set the Write Cache Enabled (WCE) bit.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 80179e4:	7899      	ldrb	r1, [r3, #2]
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 80179e6:	701a      	strb	r2, [r3, #0]
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
 80179e8:	320a      	adds	r2, #10
 80179ea:	705a      	strb	r2, [r3, #1]
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 80179ec:	3a0e      	subs	r2, #14
 80179ee:	430a      	orrs	r2, r1
 80179f0:	709a      	strb	r2, [r3, #2]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAG_WCE;

        mode_data_length += page_length;
 80179f2:	3414      	adds	r4, #20
        page_pointer += page_length;
 80179f4:	3314      	adds	r3, #20
    }

    /* Informational Exceptions Control mode page.  */
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 80179f6:	2f3f      	cmp	r7, #63	@ 0x3f
 80179f8:	d02d      	beq.n	8017a56 <_ux_device_class_storage_mode_sense+0xca>

        mode_data_length += page_length;
    }

    /* Put the payload length in the header.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 80179fa:	9b03      	ldr	r3, [sp, #12]
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 80179fc:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 80179fe:	2b1a      	cmp	r3, #26
 8017a00:	d12f      	bne.n	8017a62 <_ux_device_class_storage_mode_sense+0xd6>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 8017a02:	7004      	strb	r4, [r0, #0]
    else
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);

    /* Store the write protection flag.  */
    *(transfer_request -> ux_slave_transfer_request_data_pointer + flags_index) = read_only_flag;
 8017a04:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8017a06:	9a02      	ldr	r2, [sp, #8]
 8017a08:	9904      	ldr	r1, [sp, #16]
 8017a0a:	5499      	strb	r1, [r3, r2]

#if defined(UX_DEVICE_STANDALONE)
    // FIXME: set sense mode is 0 if not hid alway reset.
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length);
 8017a0c:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017a0e:	9a01      	ldr	r2, [sp, #4]
 8017a10:	2100      	movs	r1, #0
 8017a12:	f7ff f9c7 	bl	8016da4 <_ux_utility_memory_set>
    /* Next: Transfer (DATA).  */
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017a16:	002b      	movs	r3, r5
 8017a18:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;

    storage -> ux_device_class_storage_transfer = transfer_request;
    storage -> ux_device_class_storage_device_length = mode_data_length;
    storage -> ux_device_class_storage_data_length = mode_data_length;
    storage -> ux_device_class_storage_data_count = 0;
 8017a1a:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017a1c:	337f      	adds	r3, #127	@ 0x7f
 8017a1e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017a20:	3b02      	subs	r3, #2
 8017a22:	3a1e      	subs	r2, #30
 8017a24:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017a26:	9a05      	ldr	r2, [sp, #20]
 8017a28:	330b      	adds	r3, #11
 8017a2a:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length = mode_data_length;
 8017a2c:	605c      	str	r4, [r3, #4]
    storage -> ux_device_class_storage_data_length = mode_data_length;
 8017a2e:	60dc      	str	r4, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 8017a30:	6118      	str	r0, [r3, #16]
    /* Send a payload with the response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, mode_sense_reply_length, mode_sense_reply_length); 
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017a32:	6568      	str	r0, [r5, #84]	@ 0x54
    status = UX_SUCCESS;

    /* Return completion status.  */
    return(status);
}
 8017a34:	b007      	add	sp, #28
 8017a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 8017a38:	3007      	adds	r0, #7
 8017a3a:	f7ff f9bf 	bl	8016dbc <_ux_utility_short_get_big_endian>
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017a3e:	2380      	movs	r3, #128	@ 0x80
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 8017a40:	9001      	str	r0, [sp, #4]
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017a42:	015b      	lsls	r3, r3, #5
 8017a44:	4298      	cmp	r0, r3
 8017a46:	d900      	bls.n	8017a4a <_ux_device_class_storage_mode_sense+0xbe>
 8017a48:	9301      	str	r3, [sp, #4]
 8017a4a:	2303      	movs	r3, #3
 8017a4c:	2408      	movs	r4, #8
 8017a4e:	9302      	str	r3, [sp, #8]
 8017a50:	e7af      	b.n	80179b2 <_ux_device_class_storage_mode_sense+0x26>
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8017a52:	2f1c      	cmp	r7, #28
 8017a54:	d1cf      	bne.n	80179f6 <_ux_device_class_storage_mode_sense+0x6a>
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC;
 8017a56:	221c      	movs	r2, #28
 8017a58:	701a      	strb	r2, [r3, #0]
        *(page_pointer + 1) = UX_SLAVE_CLASS_STORAGE_IEC_MODE_PAGE_PAGE_LENGTH;
 8017a5a:	3a12      	subs	r2, #18
 8017a5c:	705a      	strb	r2, [r3, #1]
        mode_data_length += page_length;
 8017a5e:	340c      	adds	r4, #12
 8017a60:	e7cb      	b.n	80179fa <_ux_device_class_storage_mode_sense+0x6e>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);
 8017a62:	b2a1      	uxth	r1, r4
 8017a64:	f7ff f9b1 	bl	8016dca <_ux_utility_short_put_big_endian>
 8017a68:	e7cc      	b.n	8017a04 <_ux_device_class_storage_mode_sense+0x78>
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8017a6a:	2f1c      	cmp	r7, #28
 8017a6c:	d0f3      	beq.n	8017a56 <_ux_device_class_storage_mode_sense+0xca>
 8017a6e:	e7c4      	b.n	80179fa <_ux_device_class_storage_mode_sense+0x6e>

08017a70 <_ux_device_class_storage_prevent_allow_media_removal>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_prevent_allow_media_removal(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017a70:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_PREVENT_ALLOW_MEDIA_REMOVAL, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017a72:	2000      	movs	r0, #0
 8017a74:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8017a76:	4770      	bx	lr

08017a78 <_ux_device_class_storage_read>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 8017a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a7a:	b087      	sub	sp, #28
 8017a7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8017a7e:	cb20      	ldmia	r3!, {r5}
 8017a80:	0004      	movs	r4, r0


    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 8017a82:	1ca8      	adds	r0, r5, #2
{
 8017a84:	781f      	ldrb	r7, [r3, #0]
 8017a86:	9100      	str	r1, [sp, #0]
 8017a88:	9203      	str	r2, [sp, #12]
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 8017a8a:	f7ff f845 	bl	8016b18 <_ux_utility_long_get_big_endian>
 8017a8e:	9002      	str	r0, [sp, #8]

    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.  */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_READ16)
 8017a90:	2f28      	cmp	r7, #40	@ 0x28
 8017a92:	d127      	bne.n	8017ae4 <_ux_device_class_storage_read+0x6c>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);
 8017a94:	1de8      	adds	r0, r5, #7
 8017a96:	f7ff f991 	bl	8016dbc <_ux_utility_short_get_big_endian>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8017a9a:	2338      	movs	r3, #56	@ 0x38
 8017a9c:	9d00      	ldr	r5, [sp, #0]
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 8017a9e:	0007      	movs	r7, r0
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8017aa0:	435d      	muls	r5, r3
 8017aa2:	1962      	adds	r2, r4, r5
 8017aa4:	6916      	ldr	r6, [r2, #16]
 8017aa6:	9201      	str	r2, [sp, #4]

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017aa8:	2201      	movs	r2, #1
 8017aaa:	6562      	str	r2, [r4, #84]	@ 0x54

#if defined(UX_DEVICE_STANDALONE)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017aac:	9a00      	ldr	r2, [sp, #0]
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8017aae:	4346      	muls	r6, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017ab0:	3201      	adds	r2, #1
 8017ab2:	4353      	muls	r3, r2
 8017ab4:	18e3      	adds	r3, r4, r3
 8017ab6:	685b      	ldr	r3, [r3, #4]
 8017ab8:	9a01      	ldr	r2, [sp, #4]
 8017aba:	001d      	movs	r5, r3
 8017abc:	6a12      	ldr	r2, [r2, #32]
 8017abe:	ab05      	add	r3, sp, #20
 8017ac0:	0020      	movs	r0, r4
 8017ac2:	9900      	ldr	r1, [sp, #0]
 8017ac4:	47a8      	blx	r5
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017ac6:	9b05      	ldr	r3, [sp, #20]
 8017ac8:	9a01      	ldr	r2, [sp, #4]
 8017aca:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Update the request to use.  */
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017acc:	0022      	movs	r2, r4
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017ace:	9b03      	ldr	r3, [sp, #12]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017ad0:	3288      	adds	r2, #136	@ 0x88
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017ad2:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017ad4:	6013      	str	r3, [r2, #0]

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d008      	beq.n	8017aec <_ux_device_class_storage_read+0x74>

        /* Update residue.  */
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;

        /* Return an error.  */
        return(UX_ERROR);
 8017ada:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 8017adc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017ade:	6523      	str	r3, [r4, #80]	@ 0x50
    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8017ae0:	b007      	add	sp, #28
 8017ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 8017ae4:	1da8      	adds	r0, r5, #6
 8017ae6:	f7ff f817 	bl	8016b18 <_ux_utility_long_get_big_endian>
 8017aea:	e7d6      	b.n	8017a9a <_ux_device_class_storage_read+0x22>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017aec:	0023      	movs	r3, r4
 8017aee:	2205      	movs	r2, #5
 8017af0:	337d      	adds	r3, #125	@ 0x7d
 8017af2:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017af4:	4a0b      	ldr	r2, [pc, #44]	@ (8017b24 <_ux_device_class_storage_read+0xac>)
 8017af6:	3301      	adds	r3, #1
 8017af8:	801a      	strh	r2, [r3, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 8017afa:	4b0b      	ldr	r3, [pc, #44]	@ (8017b28 <_ux_device_class_storage_read+0xb0>)
    storage -> ux_device_class_storage_data_length =
 8017afc:	0022      	movs	r2, r4
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 8017afe:	67a3      	str	r3, [r4, #120]	@ 0x78
    storage -> ux_device_class_storage_device_length = total_length;
 8017b00:	0023      	movs	r3, r4
 8017b02:	338c      	adds	r3, #140	@ 0x8c
 8017b04:	601e      	str	r6, [r3, #0]
        UX_MIN(total_length , storage -> ux_slave_class_storage_host_length);
 8017b06:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    storage -> ux_device_class_storage_data_length =
 8017b08:	3294      	adds	r2, #148	@ 0x94
        UX_MIN(total_length , storage -> ux_slave_class_storage_host_length);
 8017b0a:	42b3      	cmp	r3, r6
 8017b0c:	d900      	bls.n	8017b10 <_ux_device_class_storage_read+0x98>
 8017b0e:	0033      	movs	r3, r6
    storage -> ux_device_class_storage_data_length =
 8017b10:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8017b12:	0022      	movs	r2, r4
 8017b14:	2300      	movs	r3, #0
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017b16:	9902      	ldr	r1, [sp, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8017b18:	3298      	adds	r2, #152	@ 0x98
 8017b1a:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017b1c:	60d1      	str	r1, [r2, #12]
    storage -> ux_device_class_storage_cmd_n_lb = total_number_blocks;
 8017b1e:	6117      	str	r7, [r2, #16]
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017b20:	6563      	str	r3, [r4, #84]	@ 0x54
    return(UX_SUCCESS);
 8017b22:	e7dd      	b.n	8017ae0 <_ux_device_class_storage_read+0x68>
 8017b24:	00002601 	.word	0x00002601
 8017b28:	01010101 	.word	0x01010101

08017b2c <_ux_device_class_storage_read_capacity>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017b2c:	2338      	movs	r3, #56	@ 0x38
{
 8017b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017b30:	001e      	movs	r6, r3
{
 8017b32:	0017      	movs	r7, r2
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017b34:	1c4a      	adds	r2, r1, #1
 8017b36:	434e      	muls	r6, r1
 8017b38:	4353      	muls	r3, r2
{
 8017b3a:	b085      	sub	sp, #20
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017b3c:	1986      	adds	r6, r0, r6
 8017b3e:	18c3      	adds	r3, r0, r3
 8017b40:	685d      	ldr	r5, [r3, #4]
 8017b42:	6a32      	ldr	r2, [r6, #32]
 8017b44:	ab03      	add	r3, sp, #12
{
 8017b46:	0004      	movs	r4, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017b48:	47a8      	blx	r5
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017b4a:	9b03      	ldr	r3, [sp, #12]
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017b4c:	1e05      	subs	r5, r0, #0
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017b4e:	6273      	str	r3, [r6, #36]	@ 0x24

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 8017b50:	d123      	bne.n	8017b9a <_ux_device_class_storage_read_capacity+0x6e>
    
        /* Obtain the pointer to the transfer request.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

        /* Obtain read capacity response buffer.  */
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    
        /* Ensure it is cleaned.  */
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 8017b54:	2208      	movs	r2, #8
 8017b56:	0001      	movs	r1, r0
 8017b58:	0018      	movs	r0, r3
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017b5a:	9301      	str	r3, [sp, #4]
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 8017b5c:	f7ff f922 	bl	8016da4 <_ux_utility_memory_set>
    
        /* Insert the last LBA address in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LAST_LBA],
 8017b60:	68f1      	ldr	r1, [r6, #12]
 8017b62:	9801      	ldr	r0, [sp, #4]
 8017b64:	f7fe ffec 	bl	8016b40 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);
    
        /* Insert the block length in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_BLOCK_SIZE],
 8017b68:	9b01      	ldr	r3, [sp, #4]
 8017b6a:	6931      	ldr	r1, [r6, #16]
 8017b6c:	1d18      	adds	r0, r3, #4
 8017b6e:	f7fe ffe7 	bl	8016b40 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);
    
#if defined(UX_DEVICE_STANDALONE)

        /* Next: Transfer (DATA).  */
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017b72:	0023      	movs	r3, r4
 8017b74:	2223      	movs	r2, #35	@ 0x23
 8017b76:	337f      	adds	r3, #127	@ 0x7f
 8017b78:	701a      	strb	r2, [r3, #0]
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017b7a:	3a1e      	subs	r2, #30
 8017b7c:	3b02      	subs	r3, #2
 8017b7e:	701a      	strb	r2, [r3, #0]
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017b80:	003a      	movs	r2, r7

        storage -> ux_device_class_storage_transfer = transfer_request;
 8017b82:	330b      	adds	r3, #11
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017b84:	3220      	adds	r2, #32
        storage -> ux_device_class_storage_transfer = transfer_request;
 8017b86:	601a      	str	r2, [r3, #0]
        storage -> ux_device_class_storage_device_length =
 8017b88:	2208      	movs	r2, #8
                        UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH;
        storage -> ux_device_class_storage_data_length =
                        UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH;
        storage -> ux_device_class_storage_data_count = 0;
 8017b8a:	611d      	str	r5, [r3, #16]
        storage -> ux_device_class_storage_device_length =
 8017b8c:	605a      	str	r2, [r3, #4]
        storage -> ux_device_class_storage_data_length =
 8017b8e:	60da      	str	r2, [r3, #12]
        UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8017b90:	653d      	str	r5, [r7, #80]	@ 0x50
        status = UX_SUCCESS;
    }
        
    /* Return completion status.  */
    return(status);
}
 8017b92:	2000      	movs	r0, #0
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017b94:	6565      	str	r5, [r4, #84]	@ 0x54
}
 8017b96:	b005      	add	sp, #20
 8017b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b9a:	2501      	movs	r5, #1
 8017b9c:	e7f9      	b.n	8017b92 <_ux_device_class_storage_read_capacity+0x66>

08017b9e <_ux_device_class_storage_read_format_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get read format capacity response buffer.  */
    read_format_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017ba0:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
{
 8017ba2:	0004      	movs	r4, r0
 8017ba4:	0016      	movs	r6, r2

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017ba6:	0038      	movs	r0, r7
 8017ba8:	220c      	movs	r2, #12
{
 8017baa:	000d      	movs	r5, r1
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017bac:	2100      	movs	r1, #0
 8017bae:	f7ff f8f9 	bl	8016da4 <_ux_utility_memory_set>

    /* Insert the size of the response block.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_SIZE], 8);
 8017bb2:	0038      	movs	r0, r7
 8017bb4:	2108      	movs	r1, #8
 8017bb6:	f7fe ffc3 	bl	8016b40 <_ux_utility_long_put_big_endian>

    /* Insert the last LBA address in the response.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LAST_LBA],
 8017bba:	2338      	movs	r3, #56	@ 0x38
 8017bbc:	435d      	muls	r5, r3
 8017bbe:	1965      	adds	r5, r4, r5
 8017bc0:	68e9      	ldr	r1, [r5, #12]
 8017bc2:	1d38      	adds	r0, r7, #4
 8017bc4:	f7fe ffbc 	bl	8016b40 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);

    /* Insert the block length in the response.  This is in 3 bytes. */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_BLOCK_SIZE],
 8017bc8:	0038      	movs	r0, r7
 8017bca:	6929      	ldr	r1, [r5, #16]
 8017bcc:	3008      	adds	r0, #8
 8017bce:	f7fe ffb7 	bl	8016b40 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);

    /* Insert the response code : always 2.  */
    read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_DESC_CODE] =  2;    
 8017bd2:	2302      	movs	r3, #2
 8017bd4:	723b      	strb	r3, [r7, #8]

#if defined(UX_DEVICE_STANDALONE)

    /* Next: Transfer (DATA).  */
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017bd6:	0023      	movs	r3, r4
 8017bd8:	2223      	movs	r2, #35	@ 0x23
 8017bda:	337f      	adds	r3, #127	@ 0x7f
 8017bdc:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017bde:	3b02      	subs	r3, #2
 8017be0:	3a1e      	subs	r2, #30
 8017be2:	701a      	strb	r2, [r3, #0]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017be4:	0032      	movs	r2, r6

    storage -> ux_device_class_storage_transfer = transfer_request;
 8017be6:	330b      	adds	r3, #11
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017be8:	3220      	adds	r2, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017bea:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length =
 8017bec:	0022      	movs	r2, r4
 8017bee:	230c      	movs	r3, #12
 8017bf0:	328c      	adds	r2, #140	@ 0x8c
 8017bf2:	6013      	str	r3, [r2, #0]
                    UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH;
    storage -> ux_device_class_storage_data_length =
 8017bf4:	6093      	str	r3, [r2, #8]
                    UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH;
    storage -> ux_device_class_storage_data_count = 0;
 8017bf6:	0023      	movs	r3, r4
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	3398      	adds	r3, #152	@ 0x98
 8017bfc:	6018      	str	r0, [r3, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8017bfe:	6530      	str	r0, [r6, #80]	@ 0x50
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH,
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017c00:	6560      	str	r0, [r4, #84]	@ 0x54
    status = UX_SUCCESS;

    /* Return completion status.  */
    return(status);
}
 8017c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c04 <_ux_device_class_storage_request_sense>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get length.  */
    sense_length = storage -> ux_slave_class_storage_host_length;
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8017c06:	6c47      	ldr	r7, [r0, #68]	@ 0x44
{
 8017c08:	0004      	movs	r4, r0
 8017c0a:	0015      	movs	r5, r2
 8017c0c:	9101      	str	r1, [sp, #4]
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8017c0e:	2f12      	cmp	r7, #18
 8017c10:	d900      	bls.n	8017c14 <_ux_device_class_storage_request_sense+0x10>
 8017c12:	2712      	movs	r7, #18
        sense_length = UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH;

    /* Obtain sense buffer.  */
    sense_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017c14:	6aee      	ldr	r6, [r5, #44]	@ 0x2c

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(sense_buffer, 0, sense_length); /* Use case of memset is verified. */
 8017c16:	003a      	movs	r2, r7
 8017c18:	0030      	movs	r0, r6
 8017c1a:	2100      	movs	r1, #0
 8017c1c:	f7ff f8c2 	bl	8016da4 <_ux_utility_memory_set>
    
    /* Initialize the response buffer with the error code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 8017c20:	2370      	movs	r3, #112	@ 0x70
                    UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE_VALUE;

    /* Extract sense key, code, qualifier.  */
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017c22:	9a01      	ldr	r2, [sp, #4]
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 8017c24:	7033      	strb	r3, [r6, #0]
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017c26:	3b38      	subs	r3, #56	@ 0x38
 8017c28:	4353      	muls	r3, r2
 8017c2a:	18e3      	adds	r3, r4, r3
 8017c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;

    storage -> ux_device_class_storage_transfer = transfer_request;
    storage -> ux_device_class_storage_device_length = sense_length;
    storage -> ux_device_class_storage_data_length = sense_length;
    storage -> ux_device_class_storage_data_count = 0;
 8017c2e:	2000      	movs	r0, #0
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017c30:	70b3      	strb	r3, [r6, #2]
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 8017c32:	0a1a      	lsrs	r2, r3, #8
    qualifier = UX_DEVICE_CLASS_STORAGE_SENSE_QUALIFIER(storage -> ux_slave_class_storage_lun[lun].
 8017c34:	0c1b      	lsrs	r3, r3, #16
 8017c36:	7373      	strb	r3, [r6, #13]
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ADD_LENGTH] =  10;
 8017c38:	230a      	movs	r3, #10
 8017c3a:	71f3      	strb	r3, [r6, #7]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017c3c:	0023      	movs	r3, r4
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 8017c3e:	7332      	strb	r2, [r6, #12]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017c40:	2223      	movs	r2, #35	@ 0x23
 8017c42:	337f      	adds	r3, #127	@ 0x7f
 8017c44:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017c46:	3b02      	subs	r3, #2
 8017c48:	3a1e      	subs	r2, #30
 8017c4a:	701a      	strb	r2, [r3, #0]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017c4c:	3520      	adds	r5, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017c4e:	330b      	adds	r3, #11
    storage -> ux_device_class_storage_data_count = 0;
 8017c50:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017c52:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_device_length = sense_length;
 8017c54:	605f      	str	r7, [r3, #4]
    storage -> ux_device_class_storage_data_length = sense_length;
 8017c56:	60df      	str	r7, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 8017c58:	6020      	str	r0, [r4, #0]
    }
#endif

    /* Return completion status.  */    
    return(status);
}
 8017c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017c5c <_ux_device_class_storage_start_stop>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_start_stop(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017c5c:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_START_STOP, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017c5e:	2000      	movs	r0, #0
 8017c60:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8017c62:	4770      	bx	lr

08017c64 <_ux_device_class_storage_synchronize_cache>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_synchronize_cache(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                                 UX_SLAVE_ENDPOINT *endpoint_in,
                                                 UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb, UCHAR scsi_command)
{
 8017c64:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* By default status is passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Is there not an implementation?  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017c66:	2738      	movs	r7, #56	@ 0x38
 8017c68:	003d      	movs	r5, r7
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017c6a:	2300      	movs	r3, #0
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017c6c:	434d      	muls	r5, r1
 8017c6e:	1945      	adds	r5, r0, r5
{
 8017c70:	b085      	sub	sp, #20
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8017c72:	6543      	str	r3, [r0, #84]	@ 0x54
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017c74:	6bab      	ldr	r3, [r5, #56]	@ 0x38
{
 8017c76:	0004      	movs	r4, r0
 8017c78:	000e      	movs	r6, r1
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d02c      	beq.n	8017cd8 <_ux_device_class_storage_synchronize_cache+0x74>
        /* Return success.  */
        return(UX_SUCCESS);
    }

    /* Get the LBA and number of blocks from the CBWCB in 16 bits.  */
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 8017c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c80:	1c98      	adds	r0, r3, #2
 8017c82:	f7fe ff49 	bl	8016b18 <_ux_utility_long_get_big_endian>
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8017c86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 8017c88:	9001      	str	r0, [sp, #4]
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8017c8a:	1dd8      	adds	r0, r3, #7
 8017c8c:	f7ff f896 	bl	8016dbc <_ux_utility_short_get_big_endian>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_SYNCHRONIZE_CACHE, storage, lun, lba, number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8017c90:	1c73      	adds	r3, r6, #1
 8017c92:	437b      	muls	r3, r7
 8017c94:	18e3      	adds	r3, r4, r3
 8017c96:	685f      	ldr	r7, [r3, #4]
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8017c98:	9000      	str	r0, [sp, #0]
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8017c9a:	ab03      	add	r3, sp, #12
 8017c9c:	0031      	movs	r1, r6
 8017c9e:	0020      	movs	r0, r4
 8017ca0:	6a2a      	ldr	r2, [r5, #32]
 8017ca2:	47b8      	blx	r7
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017ca4:	9b03      	ldr	r3, [sp, #12]
 8017ca6:	626b      	str	r3, [r5, #36]	@ 0x24

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8017ca8:	0023      	movs	r3, r4
 8017caa:	337d      	adds	r3, #125	@ 0x7d
 8017cac:	2800      	cmp	r0, #0
 8017cae:	d006      	beq.n	8017cbe <_ux_device_class_storage_synchronize_cache+0x5a>
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_in);
#else
        UX_PARAMETER_NOT_USED(endpoint_in);
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
 8017cb0:	2202      	movs	r2, #2
 8017cb2:	701a      	strb	r2, [r3, #0]
#endif

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017cb4:	2301      	movs	r3, #1

        /* We are done here.  */
        return(UX_ERROR);
 8017cb6:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017cb8:	6563      	str	r3, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8017cba:	b005      	add	sp, #20
 8017cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_DISK_OP;
 8017cbe:	2206      	movs	r2, #6
 8017cc0:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017cc2:	0023      	movs	r3, r4
 8017cc4:	4a05      	ldr	r2, [pc, #20]	@ (8017cdc <_ux_device_class_storage_synchronize_cache+0x78>)
 8017cc6:	337e      	adds	r3, #126	@ 0x7e
 8017cc8:	801a      	strh	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017cca:	9a01      	ldr	r2, [sp, #4]
 8017ccc:	3326      	adds	r3, #38	@ 0x26
 8017cce:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_n_lb = number_blocks;
 8017cd0:	466b      	mov	r3, sp
 8017cd2:	881b      	ldrh	r3, [r3, #0]
 8017cd4:	34a8      	adds	r4, #168	@ 0xa8
 8017cd6:	6023      	str	r3, [r4, #0]
        return(UX_SUCCESS);
 8017cd8:	2000      	movs	r0, #0
 8017cda:	e7ee      	b.n	8017cba <_ux_device_class_storage_synchronize_cache+0x56>
 8017cdc:	00002601 	.word	0x00002601

08017ce0 <_ux_device_class_storage_tasks_run>:
/*                                            improved internal logic,    */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_storage_tasks_run(VOID *instance)
{
 8017ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ce2:	0004      	movs	r4, r0
UINT                        status;
INT                         immediate_state = UX_TRUE;


    /* Get pointer to the device.  */
    device = &_ux_system_slave -> ux_system_slave_device;
 8017ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8017fcc <_ux_device_class_storage_tasks_run+0x2ec>)
{
 8017ce6:	b085      	sub	sp, #20
    device = &_ux_system_slave -> ux_system_slave_device;
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	9302      	str	r3, [sp, #8]
    /* Run states once.  */
    while(immediate_state)
    {

        /* General check for MSC ready.  */
        if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED ||
 8017cec:	0026      	movs	r6, r4
 8017cee:	9b02      	ldr	r3, [sp, #8]
 8017cf0:	367f      	adds	r6, #127	@ 0x7f
 8017cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cf4:	2b03      	cmp	r3, #3
 8017cf6:	d108      	bne.n	8017d0a <_ux_device_class_storage_tasks_run+0x2a>
            storage -> ux_device_class_storage_ep_in == UX_NULL ||
 8017cf8:	0027      	movs	r7, r4
 8017cfa:	3708      	adds	r7, #8
 8017cfc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
        if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED ||
 8017cfe:	2a00      	cmp	r2, #0
 8017d00:	d003      	beq.n	8017d0a <_ux_device_class_storage_tasks_run+0x2a>
            storage -> ux_device_class_storage_ep_out == UX_NULL)
 8017d02:	1d25      	adds	r5, r4, #4
 8017d04:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
            storage -> ux_device_class_storage_ep_in == UX_NULL ||
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d110      	bne.n	8017d2c <_ux_device_class_storage_tasks_run+0x4c>
        {
            storage -> ux_device_class_storage_state = UX_STATE_RESET;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	7033      	strb	r3, [r6, #0]
{
 8017d0e:	2701      	movs	r7, #1
    /* Run states once.  */
    while(immediate_state)
    {

        /* Update state.  */
        state = storage -> ux_device_class_storage_disk_state;
 8017d10:	0025      	movs	r5, r4
 8017d12:	357e      	adds	r5, #126	@ 0x7e
        switch(state)
 8017d14:	7828      	ldrb	r0, [r5, #0]
 8017d16:	3801      	subs	r0, #1
 8017d18:	2804      	cmp	r0, #4
 8017d1a:	d900      	bls.n	8017d1e <_ux_device_class_storage_tasks_run+0x3e>
 8017d1c:	e303      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
 8017d1e:	f7e8 fa19 	bl	8000154 <__gnu_thumb1_case_uhi>
 8017d22:	02a7      	.short	0x02a7
 8017d24:	031802c1 	.word	0x031802c1
 8017d28:	039a0302 	.word	0x039a0302
        state = storage -> ux_device_class_storage_state;
 8017d2c:	7830      	ldrb	r0, [r6, #0]
        switch(state)
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	d00e      	beq.n	8017d50 <_ux_device_class_storage_tasks_run+0x70>
 8017d32:	3821      	subs	r0, #33	@ 0x21
 8017d34:	b2c1      	uxtb	r1, r0
 8017d36:	2906      	cmp	r1, #6
 8017d38:	d8e9      	bhi.n	8017d0e <_ux_device_class_storage_tasks_run+0x2e>
 8017d3a:	2806      	cmp	r0, #6
 8017d3c:	d8e7      	bhi.n	8017d0e <_ux_device_class_storage_tasks_run+0x2e>
 8017d3e:	f7e8 f9ff 	bl	8000140 <__gnu_thumb1_case_shi>
 8017d42:	0019      	.short	0x0019
 8017d44:	0028001f 	.word	0x0028001f
 8017d48:	00970053 	.word	0x00970053
 8017d4c:	0275ffe6 	.word	0x0275ffe6
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 8017d50:	0022      	movs	r2, r4
 8017d52:	2101      	movs	r1, #1
 8017d54:	327d      	adds	r2, #125	@ 0x7d
 8017d56:	7011      	strb	r1, [r2, #0]
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017d58:	3213      	adds	r2, #19
 8017d5a:	6010      	str	r0, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017d5c:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_transfer = transfer;
 8017d5e:	0021      	movs	r1, r4
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017d60:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8017d62:	8a1a      	ldrh	r2, [r3, #16]
    storage -> ux_device_class_storage_transfer = transfer;
 8017d64:	3188      	adds	r1, #136	@ 0x88
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 8017d66:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 8017d68:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 8017d6a:	0023      	movs	r3, r4
 8017d6c:	3394      	adds	r3, #148	@ 0x94
 8017d6e:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8017d70:	6058      	str	r0, [r3, #4]
 8017d72:	e7bb      	b.n	8017cec <_ux_device_class_storage_tasks_run+0xc>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017d74:	0010      	movs	r0, r2
 8017d76:	f7fe fb4b 	bl	8016410 <_ux_device_stack_endpoint_stall>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 8017d7a:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8017d7c:	f7fe fb48 	bl	8016410 <_ux_device_stack_endpoint_stall>
    if ((UCHAR)storage -> ux_slave_class_storage_csw_status !=
 8017d80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	2b02      	cmp	r3, #2
 8017d86:	d100      	bne.n	8017d8a <_ux_device_class_storage_tasks_run+0xaa>
 8017d88:	e09c      	b.n	8017ec4 <_ux_device_class_storage_tasks_run+0x1e4>
        storage -> ux_device_class_storage_state = UX_STATE_RESET;
 8017d8a:	2300      	movs	r3, #0
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8017d8c:	7033      	strb	r3, [r6, #0]
            return _ux_device_class_storage_reset_wait(storage);
 8017d8e:	2705      	movs	r7, #5
 8017d90:	e7be      	b.n	8017d10 <_ux_device_class_storage_tasks_run+0x30>
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017d92:	0023      	movs	r3, r4
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017d94:	2180      	movs	r1, #128	@ 0x80
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017d96:	3394      	adds	r3, #148	@ 0x94
 8017d98:	681a      	ldr	r2, [r3, #0]
 8017d9a:	3304      	adds	r3, #4
 8017d9c:	681b      	ldr	r3, [r3, #0]
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017d9e:	0149      	lsls	r1, r1, #5
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017da0:	1ad5      	subs	r5, r2, r3
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017da2:	428d      	cmp	r5, r1
 8017da4:	d900      	bls.n	8017da8 <_ux_device_class_storage_tasks_run+0xc8>
 8017da6:	000d      	movs	r5, r1
    if (storage -> ux_device_class_storage_data_buffer && device_length &&
 8017da8:	0021      	movs	r1, r4
 8017daa:	0020      	movs	r0, r4
 8017dac:	3190      	adds	r1, #144	@ 0x90
 8017dae:	6809      	ldr	r1, [r1, #0]
 8017db0:	3088      	adds	r0, #136	@ 0x88
 8017db2:	9002      	str	r0, [sp, #8]
 8017db4:	2900      	cmp	r1, #0
 8017db6:	d00c      	beq.n	8017dd2 <_ux_device_class_storage_tasks_run+0xf2>
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d00a      	beq.n	8017dd2 <_ux_device_class_storage_tasks_run+0xf2>
        storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_READ)
 8017dbc:	0022      	movs	r2, r4
 8017dbe:	327d      	adds	r2, #125	@ 0x7d
    if (storage -> ux_device_class_storage_data_buffer && device_length &&
 8017dc0:	7812      	ldrb	r2, [r2, #0]
 8017dc2:	2a05      	cmp	r2, #5
 8017dc4:	d105      	bne.n	8017dd2 <_ux_device_class_storage_tasks_run+0xf2>
                                storage -> ux_device_class_storage_data_buffer +
 8017dc6:	18c9      	adds	r1, r1, r3
        _ux_utility_memory_copy(storage -> ux_device_class_storage_transfer ->
 8017dc8:	6803      	ldr	r3, [r0, #0]
 8017dca:	002a      	movs	r2, r5
 8017dcc:	68d8      	ldr	r0, [r3, #12]
 8017dce:	f7fe ffb7 	bl	8016d40 <_ux_utility_memory_copy>
    storage -> ux_device_class_storage_trans_device_length = device_length;
 8017dd2:	0023      	movs	r3, r4
 8017dd4:	33a0      	adds	r3, #160	@ 0xa0
 8017dd6:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_trans_host_length = host_length;
 8017dd8:	3b04      	subs	r3, #4
 8017dda:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_WAIT;
 8017ddc:	2324      	movs	r3, #36	@ 0x24
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8017dde:	2200      	movs	r2, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_WAIT;
 8017de0:	7033      	strb	r3, [r6, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 8017de2:	9b02      	ldr	r3, [sp, #8]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	631a      	str	r2, [r3, #48]	@ 0x30
    return _ux_device_stack_transfer_run(storage -> ux_device_class_storage_transfer,
 8017de8:	0025      	movs	r5, r4
 8017dea:	0023      	movs	r3, r4
 8017dec:	3588      	adds	r5, #136	@ 0x88
 8017dee:	339c      	adds	r3, #156	@ 0x9c
 8017df0:	681a      	ldr	r2, [r3, #0]
 8017df2:	6859      	ldr	r1, [r3, #4]
 8017df4:	6828      	ldr	r0, [r5, #0]
 8017df6:	f7fe fd95 	bl	8016924 <_ux_device_stack_transfer_run>
            if (status < UX_STATE_ERROR)
 8017dfa:	0023      	movs	r3, r4
 8017dfc:	337e      	adds	r3, #126	@ 0x7e
 8017dfe:	9302      	str	r3, [sp, #8]
 8017e00:	2802      	cmp	r0, #2
 8017e02:	d809      	bhi.n	8017e18 <_ux_device_class_storage_tasks_run+0x138>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_IDLE;
 8017e04:	2320      	movs	r3, #32
 8017e06:	7033      	strb	r3, [r6, #0]
                if (storage -> ux_device_class_storage_disk_state !=
 8017e08:	9b02      	ldr	r3, [sp, #8]
 8017e0a:	781b      	ldrb	r3, [r3, #0]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d0be      	beq.n	8017d8e <_ux_device_class_storage_tasks_run+0xae>
                    storage -> ux_device_class_storage_disk_state =
 8017e10:	2305      	movs	r3, #5
 8017e12:	9a02      	ldr	r2, [sp, #8]
 8017e14:	7013      	strb	r3, [r2, #0]
 8017e16:	e7ba      	b.n	8017d8e <_ux_device_class_storage_tasks_run+0xae>
            if (status == UX_STATE_ERROR)
 8017e18:	2803      	cmp	r0, #3
 8017e1a:	d11e      	bne.n	8017e5a <_ux_device_class_storage_tasks_run+0x17a>
UX_SLAVE_ENDPOINT *endp = trans -> ux_slave_transfer_request_endpoint;
 8017e1c:	682b      	ldr	r3, [r5, #0]
    _ux_device_stack_endpoint_stall(endp);
 8017e1e:	6898      	ldr	r0, [r3, #8]
 8017e20:	f7fe faf6 	bl	8016410 <_ux_device_stack_endpoint_stall>
                if (storage -> ux_device_class_storage_disk_state !=
 8017e24:	9b02      	ldr	r3, [sp, #8]
 8017e26:	781b      	ldrb	r3, [r3, #0]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d002      	beq.n	8017e32 <_ux_device_class_storage_tasks_run+0x152>
                    storage -> ux_device_class_storage_disk_state =
 8017e2c:	2305      	movs	r3, #5
 8017e2e:	9a02      	ldr	r2, [sp, #8]
 8017e30:	7013      	strb	r3, [r2, #0]
                        storage -> ux_slave_class_storage_host_length -
 8017e32:	0022      	movs	r2, r4
 8017e34:	3298      	adds	r2, #152	@ 0x98
 8017e36:	6812      	ldr	r2, [r2, #0]
 8017e38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017e3a:	1a9b      	subs	r3, r3, r2
                storage -> ux_slave_class_storage_csw_residue =
 8017e3c:	6523      	str	r3, [r4, #80]	@ 0x50
                    storage -> ux_slave_class_storage_cbw_lun].
 8017e3e:	0023      	movs	r3, r4
 8017e40:	3349      	adds	r3, #73	@ 0x49
 8017e42:	7819      	ldrb	r1, [r3, #0]
                        ux_slave_class_storage_request_sense_status =
 8017e44:	2338      	movs	r3, #56	@ 0x38
 8017e46:	434b      	muls	r3, r1
 8017e48:	4a61      	ldr	r2, [pc, #388]	@ (8017fd0 <_ux_device_class_storage_tasks_run+0x2f0>)
 8017e4a:	18e3      	adds	r3, r4, r3
 8017e4c:	625a      	str	r2, [r3, #36]	@ 0x24
                _ux_device_class_storage_csw_send(storage,
 8017e4e:	2300      	movs	r3, #0
 8017e50:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
        _ux_device_class_storage_csw_send(storage,
 8017e52:	0020      	movs	r0, r4
 8017e54:	f7ff fc1c 	bl	8017690 <_ux_device_class_storage_csw_send>
 8017e58:	e799      	b.n	8017d8e <_ux_device_class_storage_tasks_run+0xae>
            if (status == UX_STATE_NEXT)
 8017e5a:	2804      	cmp	r0, #4
 8017e5c:	d197      	bne.n	8017d8e <_ux_device_class_storage_tasks_run+0xae>
                storage -> ux_device_class_storage_data_count +=
 8017e5e:	0022      	movs	r2, r4
                        storage -> ux_device_class_storage_transfer ->
 8017e60:	682b      	ldr	r3, [r5, #0]
                storage -> ux_device_class_storage_data_count +=
 8017e62:	3298      	adds	r2, #152	@ 0x98
 8017e64:	699b      	ldr	r3, [r3, #24]
 8017e66:	6811      	ldr	r1, [r2, #0]
 8017e68:	185b      	adds	r3, r3, r1
 8017e6a:	6013      	str	r3, [r2, #0]
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_NEXT;
 8017e6c:	2325      	movs	r3, #37	@ 0x25
 8017e6e:	e78d      	b.n	8017d8c <_ux_device_class_storage_tasks_run+0xac>
            if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 8017e70:	0021      	movs	r1, r4
 8017e72:	317d      	adds	r1, #125	@ 0x7d
 8017e74:	9103      	str	r1, [sp, #12]
 8017e76:	7809      	ldrb	r1, [r1, #0]
 8017e78:	2901      	cmp	r1, #1
 8017e7a:	d000      	beq.n	8017e7e <_ux_device_class_storage_tasks_run+0x19e>
 8017e7c:	e137      	b.n	80180ee <_ux_device_class_storage_tasks_run+0x40e>
    cbw_trans = storage -> ux_device_class_storage_transfer;
 8017e7e:	0020      	movs	r0, r4
 8017e80:	3088      	adds	r0, #136	@ 0x88
 8017e82:	6802      	ldr	r2, [r0, #0]
    if (cbw_trans -> ux_slave_transfer_request_completion_code == UX_TRANSFER_STALLED)
 8017e84:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8017e86:	2921      	cmp	r1, #33	@ 0x21
 8017e88:	d10d      	bne.n	8017ea6 <_ux_device_class_storage_tasks_run+0x1c6>
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017e8a:	0022      	movs	r2, r4
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	3290      	adds	r2, #144	@ 0x90
 8017e90:	6011      	str	r1, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017e92:	2223      	movs	r2, #35	@ 0x23
 8017e94:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8017e96:	8a1a      	ldrh	r2, [r3, #16]
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 8017e98:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 8017e9a:	6003      	str	r3, [r0, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 8017e9c:	0023      	movs	r3, r4
 8017e9e:	3394      	adds	r3, #148	@ 0x94
 8017ea0:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8017ea2:	6059      	str	r1, [r3, #4]
}
 8017ea4:	e773      	b.n	8017d8e <_ux_device_class_storage_tasks_run+0xae>
    cbw = cbw_trans -> ux_slave_transfer_request_data_pointer;
 8017ea6:	68d3      	ldr	r3, [r2, #12]
 8017ea8:	9302      	str	r3, [sp, #8]
    if (cbw_length != UX_SLAVE_CLASS_STORAGE_CBW_LENGTH)
 8017eaa:	6993      	ldr	r3, [r2, #24]
 8017eac:	2b1f      	cmp	r3, #31
 8017eae:	d00b      	beq.n	8017ec8 <_ux_device_class_storage_tasks_run+0x1e8>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8017eb0:	2302      	movs	r3, #2
 8017eb2:	6563      	str	r3, [r4, #84]	@ 0x54
    if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 8017eb4:	0025      	movs	r5, r4
 8017eb6:	357d      	adds	r5, #125	@ 0x7d
 8017eb8:	7829      	ldrb	r1, [r5, #0]
 8017eba:	2901      	cmp	r1, #1
 8017ebc:	d000      	beq.n	8017ec0 <_ux_device_class_storage_tasks_run+0x1e0>
 8017ebe:	e0d1      	b.n	8018064 <_ux_device_class_storage_tasks_run+0x384>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8017ec0:	2302      	movs	r3, #2
 8017ec2:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8017ec4:	2321      	movs	r3, #33	@ 0x21
 8017ec6:	e761      	b.n	8017d8c <_ux_device_class_storage_tasks_run+0xac>
    lun = *(cbw + UX_SLAVE_CLASS_STORAGE_CBW_LUN);
 8017ec8:	9b02      	ldr	r3, [sp, #8]
 8017eca:	7b5d      	ldrb	r5, [r3, #13]
    storage -> ux_slave_class_storage_cbw_lun = lun;
 8017ecc:	0023      	movs	r3, r4
 8017ece:	3349      	adds	r3, #73	@ 0x49
 8017ed0:	701d      	strb	r5, [r3, #0]
    storage -> ux_slave_class_storage_cbw_flags = *(cbw + UX_SLAVE_CLASS_STORAGE_CBW_FLAGS);
 8017ed2:	9b02      	ldr	r3, [sp, #8]
 8017ed4:	7b1a      	ldrb	r2, [r3, #12]
 8017ed6:	0023      	movs	r3, r4
 8017ed8:	3348      	adds	r3, #72	@ 0x48
 8017eda:	701a      	strb	r2, [r3, #0]
                    _ux_utility_long_get(cbw + UX_SLAVE_CLASS_STORAGE_CBW_TAG);
 8017edc:	9b02      	ldr	r3, [sp, #8]
 8017ede:	1d18      	adds	r0, r3, #4
 8017ee0:	f7fe fe0f 	bl	8016b02 <_ux_utility_long_get>
    storage -> ux_slave_class_storage_scsi_tag =
 8017ee4:	64e0      	str	r0, [r4, #76]	@ 0x4c
    storage -> ux_slave_class_storage_host_length = _ux_utility_long_get(cbw + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH);
 8017ee6:	9802      	ldr	r0, [sp, #8]
 8017ee8:	3008      	adds	r0, #8
 8017eea:	f7fe fe0a 	bl	8016b02 <_ux_utility_long_get>
 8017eee:	6460      	str	r0, [r4, #68]	@ 0x44
    storage -> ux_slave_class_storage_csw_residue = 0;
 8017ef0:	2000      	movs	r0, #0
    if (lun >= storage -> ux_slave_class_storage_number_lun)
 8017ef2:	68a3      	ldr	r3, [r4, #8]
    storage -> ux_slave_class_storage_csw_residue = 0;
 8017ef4:	6520      	str	r0, [r4, #80]	@ 0x50
    storage -> ux_slave_class_storage_csw_status = 0;
 8017ef6:	6560      	str	r0, [r4, #84]	@ 0x54
    if (lun >= storage -> ux_slave_class_storage_number_lun)
 8017ef8:	429d      	cmp	r5, r3
 8017efa:	d2d9      	bcs.n	8017eb0 <_ux_device_class_storage_tasks_run+0x1d0>
    if (_ux_utility_long_get(cbw) != UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8017efc:	9802      	ldr	r0, [sp, #8]
 8017efe:	f7fe fe00 	bl	8016b02 <_ux_utility_long_get>
 8017f02:	4b34      	ldr	r3, [pc, #208]	@ (8017fd4 <_ux_device_class_storage_tasks_run+0x2f4>)
 8017f04:	4298      	cmp	r0, r3
 8017f06:	d1d3      	bne.n	8017eb0 <_ux_device_class_storage_tasks_run+0x1d0>
    if (cbwcb_length == 0)
 8017f08:	9b02      	ldr	r3, [sp, #8]
 8017f0a:	7b9b      	ldrb	r3, [r3, #14]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d0cf      	beq.n	8017eb0 <_ux_device_class_storage_tasks_run+0x1d0>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017f10:	2103      	movs	r1, #3
    endpoint_in = storage -> ux_device_class_storage_ep_in;
 8017f12:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017f14:	9f03      	ldr	r7, [sp, #12]
    endpoint_out = storage -> ux_device_class_storage_ep_out;
 8017f16:	1d23      	adds	r3, r4, #4
 8017f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017f1a:	7039      	strb	r1, [r7, #0]
    storage -> ux_device_class_storage_device_length = 0;
 8017f1c:	0021      	movs	r1, r4
 8017f1e:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017f20:	0027      	movs	r7, r4
    storage -> ux_device_class_storage_device_length = 0;
 8017f22:	318c      	adds	r1, #140	@ 0x8c
 8017f24:	6008      	str	r0, [r1, #0]
    storage -> ux_device_class_storage_data_length = 0;
 8017f26:	6088      	str	r0, [r1, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8017f28:	60c8      	str	r0, [r1, #12]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017f2a:	390e      	subs	r1, #14
 8017f2c:	7008      	strb	r0, [r1, #0]
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017f2e:	9802      	ldr	r0, [sp, #8]
    cbwcb = cbw + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 8017f30:	9902      	ldr	r1, [sp, #8]
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017f32:	7bc0      	ldrb	r0, [r0, #15]
 8017f34:	377c      	adds	r7, #124	@ 0x7c
    cbwcb = cbw + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 8017f36:	310f      	adds	r1, #15
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017f38:	7038      	strb	r0, [r7, #0]
    switch(storage -> ux_device_class_storage_cmd)
 8017f3a:	282f      	cmp	r0, #47	@ 0x2f
 8017f3c:	d828      	bhi.n	8017f90 <_ux_device_class_storage_tasks_run+0x2b0>
 8017f3e:	2819      	cmp	r0, #25
 8017f40:	d80e      	bhi.n	8017f60 <_ux_device_class_storage_tasks_run+0x280>
 8017f42:	2804      	cmp	r0, #4
 8017f44:	d050      	beq.n	8017fe8 <_ux_device_class_storage_tasks_run+0x308>
 8017f46:	d81b      	bhi.n	8017f80 <_ux_device_class_storage_tasks_run+0x2a0>
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	d039      	beq.n	8017fc0 <_ux_device_class_storage_tasks_run+0x2e0>
 8017f4c:	2803      	cmp	r0, #3
 8017f4e:	d045      	beq.n	8017fdc <_ux_device_class_storage_tasks_run+0x2fc>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017f50:	2301      	movs	r3, #1
 8017f52:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017f54:	3337      	adds	r3, #55	@ 0x37
 8017f56:	436b      	muls	r3, r5
 8017f58:	4a1f      	ldr	r2, [pc, #124]	@ (8017fd8 <_ux_device_class_storage_tasks_run+0x2f8>)
 8017f5a:	18e3      	adds	r3, r4, r3
 8017f5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8017f5e:	e7a9      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 8017f60:	381a      	subs	r0, #26
 8017f62:	2815      	cmp	r0, #21
 8017f64:	d8f4      	bhi.n	8017f50 <_ux_device_class_storage_tasks_run+0x270>
 8017f66:	f7e8 f8d7 	bl	8000118 <__gnu_thumb1_case_sqi>
 8017f6a:	4563      	.short	0x4563
 8017f6c:	f34bf3f3 	.word	0xf34bf3f3
 8017f70:	51f3f3f3 	.word	0x51f3f3f3
 8017f74:	f3f357f3 	.word	0xf3f357f3
 8017f78:	f373f371 	.word	0xf373f371
 8017f7c:	5df3f3f3 	.word	0x5df3f3f3
 8017f80:	2812      	cmp	r0, #18
 8017f82:	d1e5      	bne.n	8017f50 <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_inquiry(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017f84:	9100      	str	r1, [sp, #0]
 8017f86:	0020      	movs	r0, r4
 8017f88:	0029      	movs	r1, r5
 8017f8a:	f7ff fc73 	bl	8017874 <_ux_device_class_storage_inquiry>
        break;
 8017f8e:	e791      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 8017f90:	285a      	cmp	r0, #90	@ 0x5a
 8017f92:	d04d      	beq.n	8018030 <_ux_device_class_storage_tasks_run+0x350>
 8017f94:	d809      	bhi.n	8017faa <_ux_device_class_storage_tasks_run+0x2ca>
 8017f96:	2835      	cmp	r0, #53	@ 0x35
 8017f98:	d05c      	beq.n	8018054 <_ux_device_class_storage_tasks_run+0x374>
 8017f9a:	2855      	cmp	r0, #85	@ 0x55
 8017f9c:	d1d8      	bne.n	8017f50 <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_mode_select(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017f9e:	9100      	str	r1, [sp, #0]
 8017fa0:	0020      	movs	r0, r4
 8017fa2:	0029      	movs	r1, r5
 8017fa4:	f7ff fcdc 	bl	8017960 <_ux_device_class_storage_mode_select>
        break;
 8017fa8:	e784      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 8017faa:	28a8      	cmp	r0, #168	@ 0xa8
 8017fac:	d046      	beq.n	801803c <_ux_device_class_storage_tasks_run+0x35c>
 8017fae:	28aa      	cmp	r0, #170	@ 0xaa
 8017fb0:	d1ce      	bne.n	8017f50 <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8017fb2:	9001      	str	r0, [sp, #4]
 8017fb4:	9100      	str	r1, [sp, #0]
 8017fb6:	0020      	movs	r0, r4
 8017fb8:	0029      	movs	r1, r5
 8017fba:	f000 fa99 	bl	80184f0 <_ux_device_class_storage_write>
        break;
 8017fbe:	e779      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_test_ready(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017fc0:	9100      	str	r1, [sp, #0]
 8017fc2:	0020      	movs	r0, r4
 8017fc4:	0029      	movs	r1, r5
 8017fc6:	f000 fa6d 	bl	80184a4 <_ux_device_class_storage_test_ready>
        break;
 8017fca:	e773      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
 8017fcc:	200030e0 	.word	0x200030e0
 8017fd0:	00005402 	.word	0x00005402
 8017fd4:	43425355 	.word	0x43425355
 8017fd8:	00002005 	.word	0x00002005
        _ux_device_class_storage_request_sense(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017fdc:	9100      	str	r1, [sp, #0]
 8017fde:	0020      	movs	r0, r4
 8017fe0:	0029      	movs	r1, r5
 8017fe2:	f7ff fe0f 	bl	8017c04 <_ux_device_class_storage_request_sense>
        break;
 8017fe6:	e765      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_format(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017fe8:	9100      	str	r1, [sp, #0]
 8017fea:	0020      	movs	r0, r4
 8017fec:	0029      	movs	r1, r5
 8017fee:	f7ff fbd1 	bl	8017794 <_ux_device_class_storage_format>
        break;
 8017ff2:	e75f      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_start_stop(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017ff4:	9100      	str	r1, [sp, #0]
 8017ff6:	0020      	movs	r0, r4
 8017ff8:	0029      	movs	r1, r5
 8017ffa:	f7ff fe2f 	bl	8017c5c <_ux_device_class_storage_start_stop>
        break;
 8017ffe:	e759      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_prevent_allow_media_removal(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018000:	9100      	str	r1, [sp, #0]
 8018002:	0020      	movs	r0, r4
 8018004:	0029      	movs	r1, r5
 8018006:	f7ff fd33 	bl	8017a70 <_ux_device_class_storage_prevent_allow_media_removal>
        break;
 801800a:	e753      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read_format_capacity(storage, lun, endpoint_in, endpoint_out, cbwcb);
 801800c:	9100      	str	r1, [sp, #0]
 801800e:	0020      	movs	r0, r4
 8018010:	0029      	movs	r1, r5
 8018012:	f7ff fdc4 	bl	8017b9e <_ux_device_class_storage_read_format_capacity>
        break;
 8018016:	e74d      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read_capacity(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018018:	9100      	str	r1, [sp, #0]
 801801a:	0020      	movs	r0, r4
 801801c:	0029      	movs	r1, r5
 801801e:	f7ff fd85 	bl	8017b2c <_ux_device_class_storage_read_capacity>
        break;
 8018022:	e747      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_verify(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018024:	9100      	str	r1, [sp, #0]
 8018026:	0020      	movs	r0, r4
 8018028:	0029      	movs	r1, r5
 801802a:	f000 fa5c 	bl	80184e6 <_ux_device_class_storage_verify>
        break;
 801802e:	e741      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_mode_sense(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8018030:	9100      	str	r1, [sp, #0]
 8018032:	0020      	movs	r0, r4
 8018034:	0029      	movs	r1, r5
 8018036:	f7ff fca9 	bl	801798c <_ux_device_class_storage_mode_sense>
        break;
 801803a:	e73b      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 801803c:	20a8      	movs	r0, #168	@ 0xa8
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 801803e:	9001      	str	r0, [sp, #4]
 8018040:	9100      	str	r1, [sp, #0]
 8018042:	0020      	movs	r0, r4
 8018044:	0029      	movs	r1, r5
 8018046:	f7ff fd17 	bl	8017a78 <_ux_device_class_storage_read>
        break;
 801804a:	e733      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 801804c:	2028      	movs	r0, #40	@ 0x28
 801804e:	e7f6      	b.n	801803e <_ux_device_class_storage_tasks_run+0x35e>
        _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8018050:	202a      	movs	r0, #42	@ 0x2a
 8018052:	e7ae      	b.n	8017fb2 <_ux_device_class_storage_tasks_run+0x2d2>
        _ux_device_class_storage_synchronize_cache(storage, lun, endpoint_in, endpoint_out, cbwcb, *(cbwcb));
 8018054:	2035      	movs	r0, #53	@ 0x35
 8018056:	9100      	str	r1, [sp, #0]
 8018058:	9001      	str	r0, [sp, #4]
 801805a:	0029      	movs	r1, r5
 801805c:	0020      	movs	r0, r4
 801805e:	f7ff fe01 	bl	8017c64 <_ux_device_class_storage_synchronize_cache>
        break;
 8018062:	e727      	b.n	8017eb4 <_ux_device_class_storage_tasks_run+0x1d4>
    if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PASSED)
 8018064:	6d63      	ldr	r3, [r4, #84]	@ 0x54
            storage -> ux_slave_class_storage_host_length == 0)
 8018066:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PASSED)
 8018068:	2b00      	cmp	r3, #0
 801806a:	d10a      	bne.n	8018082 <_ux_device_class_storage_tasks_run+0x3a2>
    if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_DIR)
 801806c:	0023      	movs	r3, r4
 801806e:	3348      	adds	r3, #72	@ 0x48
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	2b7f      	cmp	r3, #127	@ 0x7f
 8018074:	d918      	bls.n	80180a8 <_ux_device_class_storage_tasks_run+0x3c8>
        if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_WRITE ||
 8018076:	2904      	cmp	r1, #4
 8018078:	d001      	beq.n	801807e <_ux_device_class_storage_tasks_run+0x39e>
 801807a:	2a00      	cmp	r2, #0
 801807c:	d10a      	bne.n	8018094 <_ux_device_class_storage_tasks_run+0x3b4>
            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801807e:	2302      	movs	r3, #2
            storage -> ux_slave_class_storage_csw_status =
 8018080:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8018082:	0023      	movs	r3, r4
 8018084:	2100      	movs	r1, #0
 8018086:	337e      	adds	r3, #126	@ 0x7e
 8018088:	7019      	strb	r1, [r3, #0]
        if (storage -> ux_slave_class_storage_host_length &&
 801808a:	428a      	cmp	r2, r1
 801808c:	d119      	bne.n	80180c2 <_ux_device_class_storage_tasks_run+0x3e2>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 801808e:	0023      	movs	r3, r4
 8018090:	3308      	adds	r3, #8
 8018092:	e01c      	b.n	80180ce <_ux_device_class_storage_tasks_run+0x3ee>
            storage -> ux_device_class_storage_data_length)
 8018094:	0023      	movs	r3, r4
 8018096:	3394      	adds	r3, #148	@ 0x94
        if (storage -> ux_slave_class_storage_host_length <
 8018098:	6818      	ldr	r0, [r3, #0]
 801809a:	4290      	cmp	r0, r2
 801809c:	d900      	bls.n	80180a0 <_ux_device_class_storage_tasks_run+0x3c0>
            storage -> ux_device_class_storage_data_length =
 801809e:	601a      	str	r2, [r3, #0]
    if (storage -> ux_device_class_storage_cmd_state < UX_DEVICE_CLASS_STORAGE_CMD_WRITE)
 80180a0:	2903      	cmp	r1, #3
 80180a2:	d900      	bls.n	80180a6 <_ux_device_class_storage_tasks_run+0x3c6>
 80180a4:	e673      	b.n	8017d8e <_ux_device_class_storage_tasks_run+0xae>
 80180a6:	e01a      	b.n	80180de <_ux_device_class_storage_tasks_run+0x3fe>
                storage -> ux_device_class_storage_device_length ||
 80180a8:	0023      	movs	r3, r4
 80180aa:	338c      	adds	r3, #140	@ 0x8c
 80180ac:	681b      	ldr	r3, [r3, #0]
        if (storage -> ux_slave_class_storage_host_length <
 80180ae:	4293      	cmp	r3, r2
 80180b0:	d8e5      	bhi.n	801807e <_ux_device_class_storage_tasks_run+0x39e>
                storage -> ux_device_class_storage_device_length ||
 80180b2:	2905      	cmp	r1, #5
 80180b4:	d0e3      	beq.n	801807e <_ux_device_class_storage_tasks_run+0x39e>
        if (storage -> ux_slave_class_storage_host_length !=
 80180b6:	4293      	cmp	r3, r2
 80180b8:	d0f2      	beq.n	80180a0 <_ux_device_class_storage_tasks_run+0x3c0>
                    storage -> ux_slave_class_storage_host_length -
 80180ba:	1ad3      	subs	r3, r2, r3
            storage -> ux_slave_class_storage_csw_residue =
 80180bc:	6523      	str	r3, [r4, #80]	@ 0x50
            storage -> ux_slave_class_storage_csw_status =
 80180be:	2301      	movs	r3, #1
 80180c0:	e7de      	b.n	8018080 <_ux_device_class_storage_tasks_run+0x3a0>
            (storage -> ux_slave_class_storage_cbw_flags &
 80180c2:	0023      	movs	r3, r4
 80180c4:	3348      	adds	r3, #72	@ 0x48
        if (storage -> ux_slave_class_storage_host_length &&
 80180c6:	781b      	ldrb	r3, [r3, #0]
 80180c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80180ca:	d8e0      	bhi.n	801808e <_ux_device_class_storage_tasks_run+0x3ae>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 80180cc:	1d23      	adds	r3, r4, #4
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 80180ce:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80180d0:	f7fe f99e 	bl	8016410 <_ux_device_stack_endpoint_stall>
        if (storage -> ux_device_class_storage_cmd_state != UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 80180d4:	782b      	ldrb	r3, [r5, #0]
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	d001      	beq.n	80180de <_ux_device_class_storage_tasks_run+0x3fe>
            storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
 80180da:	2302      	movs	r3, #2
 80180dc:	702b      	strb	r3, [r5, #0]
                                storage -> ux_slave_class_storage_cbw_lun,
 80180de:	0023      	movs	r3, r4
        _ux_device_class_storage_csw_send(storage,
 80180e0:	0022      	movs	r2, r4
                                storage -> ux_slave_class_storage_cbw_lun,
 80180e2:	3349      	adds	r3, #73	@ 0x49
        _ux_device_class_storage_csw_send(storage,
 80180e4:	3208      	adds	r2, #8
 80180e6:	7819      	ldrb	r1, [r3, #0]
 80180e8:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80180ea:	2300      	movs	r3, #0
 80180ec:	e6b1      	b.n	8017e52 <_ux_device_class_storage_tasks_run+0x172>
            if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CSW)
 80180ee:	2903      	cmp	r1, #3
 80180f0:	d118      	bne.n	8018124 <_ux_device_class_storage_tasks_run+0x444>
                if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 80180f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80180f4:	2a02      	cmp	r2, #2
 80180f6:	d102      	bne.n	80180fe <_ux_device_class_storage_tasks_run+0x41e>
                    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 80180f8:	2321      	movs	r3, #33	@ 0x21
 80180fa:	7033      	strb	r3, [r6, #0]
 80180fc:	e5f6      	b.n	8017cec <_ux_device_class_storage_tasks_run+0xc>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 80180fe:	2201      	movs	r2, #1
 8018100:	9903      	ldr	r1, [sp, #12]
    storage -> ux_device_class_storage_transfer = transfer;
 8018102:	0020      	movs	r0, r4
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 8018104:	700a      	strb	r2, [r1, #0]
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8018106:	0022      	movs	r2, r4
 8018108:	2100      	movs	r1, #0
 801810a:	3290      	adds	r2, #144	@ 0x90
 801810c:	6011      	str	r1, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 801810e:	2223      	movs	r2, #35	@ 0x23
 8018110:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018112:	8a1a      	ldrh	r2, [r3, #16]
    storage -> ux_device_class_storage_transfer = transfer;
 8018114:	3088      	adds	r0, #136	@ 0x88
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 8018116:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 8018118:	6003      	str	r3, [r0, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 801811a:	0023      	movs	r3, r4
 801811c:	3394      	adds	r3, #148	@ 0x94
 801811e:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8018120:	6059      	str	r1, [r3, #4]
}
 8018122:	e5e3      	b.n	8017cec <_ux_device_class_storage_tasks_run+0xc>
    switch(storage -> ux_device_class_storage_cmd)
 8018124:	0023      	movs	r3, r4
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8018126:	0025      	movs	r5, r4
 8018128:	0021      	movs	r1, r4
    switch(storage -> ux_device_class_storage_cmd)
 801812a:	337c      	adds	r3, #124	@ 0x7c
 801812c:	781b      	ldrb	r3, [r3, #0]
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 801812e:	3598      	adds	r5, #152	@ 0x98
 8018130:	6828      	ldr	r0, [r5, #0]
 8018132:	317e      	adds	r1, #126	@ 0x7e
    switch(storage -> ux_device_class_storage_cmd)
 8018134:	2ba8      	cmp	r3, #168	@ 0xa8
 8018136:	d037      	beq.n	80181a8 <_ux_device_class_storage_tasks_run+0x4c8>
 8018138:	d810      	bhi.n	801815c <_ux_device_class_storage_tasks_run+0x47c>
 801813a:	2b28      	cmp	r3, #40	@ 0x28
 801813c:	d034      	beq.n	80181a8 <_ux_device_class_storage_tasks_run+0x4c8>
 801813e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018140:	d00e      	beq.n	8018160 <_ux_device_class_storage_tasks_run+0x480>
        if (storage -> ux_slave_class_storage_host_length >
 8018142:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018144:	4283      	cmp	r3, r0
 8018146:	d940      	bls.n	80181ca <_ux_device_class_storage_tasks_run+0x4ea>
UX_SLAVE_ENDPOINT *endp = trans -> ux_slave_transfer_request_endpoint;
 8018148:	0023      	movs	r3, r4
 801814a:	3388      	adds	r3, #136	@ 0x88
 801814c:	681b      	ldr	r3, [r3, #0]
    _ux_device_stack_endpoint_stall(endp);
 801814e:	6898      	ldr	r0, [r3, #8]
 8018150:	f7fe f95e 	bl	8016410 <_ux_device_stack_endpoint_stall>
                storage -> ux_slave_class_storage_host_length -
 8018154:	0022      	movs	r2, r4
 8018156:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018158:	3294      	adds	r2, #148	@ 0x94
 801815a:	e033      	b.n	80181c4 <_ux_device_class_storage_tasks_run+0x4e4>
    switch(storage -> ux_device_class_storage_cmd)
 801815c:	2baa      	cmp	r3, #170	@ 0xaa
 801815e:	d1f0      	bne.n	8018142 <_ux_device_class_storage_tasks_run+0x462>
                        storage -> ux_device_class_storage_buffer_usb] =
 8018160:	0025      	movs	r5, r4
 8018162:	2702      	movs	r7, #2
 8018164:	357a      	adds	r5, #122	@ 0x7a
 8018166:	782b      	ldrb	r3, [r5, #0]
 8018168:	18e2      	adds	r2, r4, r3
 801816a:	3278      	adds	r2, #120	@ 0x78
 801816c:	7017      	strb	r7, [r2, #0]
        if (storage -> ux_device_class_storage_disk_state ==
 801816e:	780a      	ldrb	r2, [r1, #0]
 8018170:	2a04      	cmp	r2, #4
 8018172:	d101      	bne.n	8018178 <_ux_device_class_storage_tasks_run+0x498>
            storage -> ux_device_class_storage_disk_state =
 8018174:	3a03      	subs	r2, #3
 8018176:	700a      	strb	r2, [r1, #0]
            storage -> ux_device_class_storage_data_length)
 8018178:	0022      	movs	r2, r4
 801817a:	3294      	adds	r2, #148	@ 0x94
        if (storage -> ux_device_class_storage_data_count >=
 801817c:	6812      	ldr	r2, [r2, #0]
 801817e:	4282      	cmp	r2, r0
 8018180:	d910      	bls.n	80181a4 <_ux_device_class_storage_tasks_run+0x4c4>
                                !storage -> ux_device_class_storage_buffer_usb;
 8018182:	425a      	negs	r2, r3
 8018184:	4153      	adcs	r3, r2
                ux_slave_transfer_request_data_pointer =
 8018186:	0022      	movs	r2, r4
                                !storage -> ux_device_class_storage_buffer_usb;
 8018188:	b2db      	uxtb	r3, r3
            storage -> ux_device_class_storage_buffer_usb =
 801818a:	702b      	strb	r3, [r5, #0]
                ux_slave_transfer_request_data_pointer =
 801818c:	3288      	adds	r2, #136	@ 0x88
 801818e:	6811      	ldr	r1, [r2, #0]
                            storage -> ux_device_class_storage_buffer[
 8018190:	001a      	movs	r2, r3
            if (storage -> ux_device_class_storage_buffer_state[
 8018192:	18e3      	adds	r3, r4, r3
                            storage -> ux_device_class_storage_buffer[
 8018194:	321c      	adds	r2, #28
 8018196:	0092      	lsls	r2, r2, #2
            if (storage -> ux_device_class_storage_buffer_state[
 8018198:	3378      	adds	r3, #120	@ 0x78
                ux_slave_transfer_request_data_pointer =
 801819a:	5912      	ldr	r2, [r2, r4]
            if (storage -> ux_device_class_storage_buffer_state[
 801819c:	781b      	ldrb	r3, [r3, #0]
                ux_slave_transfer_request_data_pointer =
 801819e:	60ca      	str	r2, [r1, #12]
            if (storage -> ux_device_class_storage_buffer_state[
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d03f      	beq.n	8018224 <_ux_device_class_storage_tasks_run+0x544>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT;
 80181a4:	2326      	movs	r3, #38	@ 0x26
 80181a6:	e03e      	b.n	8018226 <_ux_device_class_storage_tasks_run+0x546>
            storage -> ux_device_class_storage_data_length)
 80181a8:	0023      	movs	r3, r4
 80181aa:	3394      	adds	r3, #148	@ 0x94
 80181ac:	9302      	str	r3, [sp, #8]
 80181ae:	681b      	ldr	r3, [r3, #0]
        if (storage -> ux_device_class_storage_data_count >=
 80181b0:	4283      	cmp	r3, r0
 80181b2:	d81b      	bhi.n	80181ec <_ux_device_class_storage_tasks_run+0x50c>
            if (storage -> ux_slave_class_storage_host_length >
 80181b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80181b6:	428b      	cmp	r3, r1
 80181b8:	d207      	bcs.n	80181ca <_ux_device_class_storage_tasks_run+0x4ea>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 80181ba:	0010      	movs	r0, r2
 80181bc:	f7fe f928 	bl	8016410 <_ux_device_stack_endpoint_stall>
                    storage -> ux_slave_class_storage_host_length -
 80181c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80181c2:	9a02      	ldr	r2, [sp, #8]
                storage -> ux_slave_class_storage_host_length -
 80181c4:	6812      	ldr	r2, [r2, #0]
 80181c6:	1a9b      	subs	r3, r3, r2
            storage -> ux_slave_class_storage_csw_residue =
 80181c8:	6523      	str	r3, [r4, #80]	@ 0x50
        if (storage -> ux_device_class_storage_device_length >
 80181ca:	0023      	movs	r3, r4
 80181cc:	338c      	adds	r3, #140	@ 0x8c
 80181ce:	681a      	ldr	r2, [r3, #0]
 80181d0:	682b      	ldr	r3, [r5, #0]
 80181d2:	429a      	cmp	r2, r3
 80181d4:	d901      	bls.n	80181da <_ux_device_class_storage_tasks_run+0x4fa>
            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80181d6:	2301      	movs	r3, #1
 80181d8:	6563      	str	r3, [r4, #84]	@ 0x54
                    storage -> ux_slave_class_storage_cbw_lun,
 80181da:	0023      	movs	r3, r4
 80181dc:	3349      	adds	r3, #73	@ 0x49
        _ux_device_class_storage_csw_send(storage,
 80181de:	7819      	ldrb	r1, [r3, #0]
 80181e0:	0020      	movs	r0, r4
 80181e2:	2300      	movs	r3, #0
 80181e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80181e6:	f7ff fa53 	bl	8017690 <_ux_device_class_storage_csw_send>
 80181ea:	e01d      	b.n	8018228 <_ux_device_class_storage_tasks_run+0x548>
            storage -> ux_device_class_storage_buffer_state[storage -> ux_device_class_storage_buffer_usb] =
 80181ec:	0025      	movs	r5, r4
 80181ee:	2001      	movs	r0, #1
 80181f0:	357a      	adds	r5, #122	@ 0x7a
 80181f2:	782b      	ldrb	r3, [r5, #0]
 80181f4:	18e2      	adds	r2, r4, r3
 80181f6:	3278      	adds	r2, #120	@ 0x78
 80181f8:	7010      	strb	r0, [r2, #0]
            storage -> ux_device_class_storage_buffer_usb = !storage -> ux_device_class_storage_buffer_usb;
 80181fa:	425a      	negs	r2, r3
 80181fc:	4153      	adcs	r3, r2
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 80181fe:	0022      	movs	r2, r4
            storage -> ux_device_class_storage_buffer_usb = !storage -> ux_device_class_storage_buffer_usb;
 8018200:	b2db      	uxtb	r3, r3
 8018202:	702b      	strb	r3, [r5, #0]
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 8018204:	3288      	adds	r2, #136	@ 0x88
 8018206:	6815      	ldr	r5, [r2, #0]
                    storage -> ux_device_class_storage_buffer[storage -> ux_device_class_storage_buffer_usb];
 8018208:	001a      	movs	r2, r3
 801820a:	321c      	adds	r2, #28
 801820c:	0092      	lsls	r2, r2, #2
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 801820e:	5912      	ldr	r2, [r2, r4]
 8018210:	60ea      	str	r2, [r5, #12]
            if (storage -> ux_device_class_storage_disk_state == UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT)
 8018212:	780a      	ldrb	r2, [r1, #0]
 8018214:	2a04      	cmp	r2, #4
 8018216:	d100      	bne.n	801821a <_ux_device_class_storage_tasks_run+0x53a>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8018218:	7008      	strb	r0, [r1, #0]
            if (storage -> ux_device_class_storage_buffer_state[storage->ux_device_class_storage_buffer_usb] ==
 801821a:	18e3      	adds	r3, r4, r3
 801821c:	3378      	adds	r3, #120	@ 0x78
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	2b02      	cmp	r3, #2
 8018222:	d1bf      	bne.n	80181a4 <_ux_device_class_storage_tasks_run+0x4c4>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8018224:	2323      	movs	r3, #35	@ 0x23
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT;
 8018226:	7033      	strb	r3, [r6, #0]
            return _ux_device_class_storage_data_next(storage);
 8018228:	2704      	movs	r7, #4
 801822a:	e571      	b.n	8017d10 <_ux_device_class_storage_tasks_run+0x30>
    if (storage -> ux_device_class_storage_data_count < storage -> ux_device_class_storage_data_length)
 801822c:	0025      	movs	r5, r4
 801822e:	0021      	movs	r1, r4
 8018230:	3598      	adds	r5, #152	@ 0x98
 8018232:	3194      	adds	r1, #148	@ 0x94
 8018234:	6828      	ldr	r0, [r5, #0]
 8018236:	6809      	ldr	r1, [r1, #0]
 8018238:	4288      	cmp	r0, r1
 801823a:	d215      	bcs.n	8018268 <_ux_device_class_storage_tasks_run+0x588>
        if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_IN)
 801823c:	0021      	movs	r1, r4
 801823e:	3148      	adds	r1, #72	@ 0x48
 8018240:	7809      	ldrb	r1, [r1, #0]
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8018242:	0010      	movs	r0, r2
        if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_IN)
 8018244:	297f      	cmp	r1, #127	@ 0x7f
 8018246:	d800      	bhi.n	801824a <_ux_device_class_storage_tasks_run+0x56a>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 8018248:	0018      	movs	r0, r3
 801824a:	f7fe f8e1 	bl	8016410 <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_host_length -
 801824e:	682a      	ldr	r2, [r5, #0]
 8018250:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018252:	1a9b      	subs	r3, r3, r2
        storage -> ux_slave_class_storage_csw_residue =
 8018254:	6523      	str	r3, [r4, #80]	@ 0x50
            storage -> ux_slave_class_storage_cbw_lun,
 8018256:	0023      	movs	r3, r4
 8018258:	3349      	adds	r3, #73	@ 0x49
    _ux_device_class_storage_csw_send(storage,
 801825a:	7819      	ldrb	r1, [r3, #0]
 801825c:	0020      	movs	r0, r4
 801825e:	2300      	movs	r3, #0
 8018260:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8018262:	f7ff fa15 	bl	8017690 <_ux_device_class_storage_csw_send>
            continue;
 8018266:	e541      	b.n	8017cec <_ux_device_class_storage_tasks_run+0xc>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8018268:	0010      	movs	r0, r2
 801826a:	f7fe f8d1 	bl	8016410 <_ux_device_stack_endpoint_stall>
}
 801826e:	e7f2      	b.n	8018256 <_ux_device_class_storage_tasks_run+0x576>

    if (storage -> ux_device_class_storage_cmd == UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE)
    {

        /* All things sync in one call.  */
        storage -> ux_device_class_storage_disk_n_lb = storage -> ux_device_class_storage_cmd_n_lb;
 8018270:	0023      	movs	r3, r4
 8018272:	33a8      	adds	r3, #168	@ 0xa8
 8018274:	681e      	ldr	r6, [r3, #0]
    if (storage -> ux_device_class_storage_cmd == UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE)
 8018276:	3b2c      	subs	r3, #44	@ 0x2c
 8018278:	781b      	ldrb	r3, [r3, #0]
 801827a:	2b35      	cmp	r3, #53	@ 0x35
 801827c:	d00d      	beq.n	801829a <_ux_device_class_storage_tasks_run+0x5ba>
    }

    /* Read/write, split the operation by buffer sizes.  */

    /* Max blocks for one buffer.  */
    block_size = storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 801827e:	0023      	movs	r3, r4
 8018280:	3349      	adds	r3, #73	@ 0x49
 8018282:	781a      	ldrb	r2, [r3, #0]
 8018284:	2338      	movs	r3, #56	@ 0x38
                                                        ux_slave_class_storage_media_block_length;
    if (block_size == 0)
        UX_ASSERT(UX_FALSE);
    max_n_blocks = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE / block_size;
 8018286:	2080      	movs	r0, #128	@ 0x80
    block_size = storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8018288:	4353      	muls	r3, r2
 801828a:	18e3      	adds	r3, r4, r3
    max_n_blocks = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE / block_size;
 801828c:	6919      	ldr	r1, [r3, #16]
 801828e:	0140      	lsls	r0, r0, #5
 8018290:	f7e7 ff6a 	bl	8000168 <__udivsi3>

    /* Prepare next disk read.  */
    if (storage -> ux_device_class_storage_cmd_n_lb > max_n_blocks)
 8018294:	4286      	cmp	r6, r0
 8018296:	d900      	bls.n	801829a <_ux_device_class_storage_tasks_run+0x5ba>
 8018298:	0006      	movs	r6, r0
        storage -> ux_device_class_storage_disk_n_lb = storage -> ux_device_class_storage_cmd_n_lb;
 801829a:	0023      	movs	r3, r4
 801829c:	33ac      	adds	r3, #172	@ 0xac
 801829e:	601e      	str	r6, [r3, #0]
            storage -> ux_device_class_storage_disk_state =
 80182a0:	2302      	movs	r3, #2
 80182a2:	702b      	strb	r3, [r5, #0]
// ux_slave_class_storage_media_read, write and others, so do a ugly hack
static inline UINT _ux_device_class_storage_disk_wait(UX_SLAVE_CLASS_STORAGE *storage)
{
    UINT status = UX_SUCCESS;

    switch (storage -> ux_device_class_storage_cmd)
 80182a4:	0023      	movs	r3, r4
 80182a6:	337c      	adds	r3, #124	@ 0x7c
 80182a8:	781b      	ldrb	r3, [r3, #0]
 80182aa:	2b35      	cmp	r3, #53	@ 0x35
 80182ac:	d03e      	beq.n	801832c <_ux_device_class_storage_tasks_run+0x64c>
 80182ae:	d806      	bhi.n	80182be <_ux_device_class_storage_tasks_run+0x5de>
 80182b0:	2b28      	cmp	r3, #40	@ 0x28
 80182b2:	d01c      	beq.n	80182ee <_ux_device_class_storage_tasks_run+0x60e>
 80182b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80182b6:	d006      	beq.n	80182c6 <_ux_device_class_storage_tasks_run+0x5e6>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_NEXT;
 80182b8:	2303      	movs	r3, #3
                    0 /* Not used.  */);
        }
        return;

    default:
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 80182ba:	702b      	strb	r3, [r5, #0]
        break;
 80182bc:	e033      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
    switch (storage -> ux_device_class_storage_cmd)
 80182be:	2ba8      	cmp	r3, #168	@ 0xa8
 80182c0:	d015      	beq.n	80182ee <_ux_device_class_storage_tasks_run+0x60e>
 80182c2:	2baa      	cmp	r3, #170	@ 0xaa
 80182c4:	d1f8      	bne.n	80182b8 <_ux_device_class_storage_tasks_run+0x5d8>
        status= ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80182c6:	0023      	movs	r3, r4
 80182c8:	3349      	adds	r3, #73	@ 0x49
 80182ca:	7819      	ldrb	r1, [r3, #0]
                                storage -> ux_device_class_storage_buffer_disk],
 80182cc:	3332      	adds	r3, #50	@ 0x32
 80182ce:	781a      	ldrb	r2, [r3, #0]
        status= ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80182d0:	0026      	movs	r6, r4
 80182d2:	2338      	movs	r3, #56	@ 0x38
 80182d4:	0020      	movs	r0, r4
 80182d6:	36b0      	adds	r6, #176	@ 0xb0
 80182d8:	434b      	muls	r3, r1
 80182da:	9601      	str	r6, [sp, #4]
 80182dc:	3e0c      	subs	r6, #12
 80182de:	6836      	ldr	r6, [r6, #0]
 80182e0:	321c      	adds	r2, #28
 80182e2:	18e3      	adds	r3, r4, r3
 80182e4:	9600      	str	r6, [sp, #0]
 80182e6:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80182e8:	30ac      	adds	r0, #172	@ 0xac
 80182ea:	0092      	lsls	r2, r2, #2
 80182ec:	e012      	b.n	8018314 <_ux_device_class_storage_tasks_run+0x634>
        status = (storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80182ee:	0023      	movs	r3, r4
 80182f0:	3349      	adds	r3, #73	@ 0x49
 80182f2:	7819      	ldrb	r1, [r3, #0]
                                storage -> ux_device_class_storage_buffer_disk],
 80182f4:	3332      	adds	r3, #50	@ 0x32
 80182f6:	781a      	ldrb	r2, [r3, #0]
        status = (storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 80182f8:	0026      	movs	r6, r4
 80182fa:	2338      	movs	r3, #56	@ 0x38
 80182fc:	0020      	movs	r0, r4
 80182fe:	36b0      	adds	r6, #176	@ 0xb0
 8018300:	434b      	muls	r3, r1
 8018302:	9601      	str	r6, [sp, #4]
 8018304:	3e0c      	subs	r6, #12
 8018306:	6836      	ldr	r6, [r6, #0]
 8018308:	18e3      	adds	r3, r4, r3
 801830a:	9600      	str	r6, [sp, #0]
 801830c:	321c      	adds	r2, #28
 801830e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8018310:	30ac      	adds	r0, #172	@ 0xac
 8018312:	0092      	lsls	r2, r2, #2
 8018314:	6803      	ldr	r3, [r0, #0]
 8018316:	5912      	ldr	r2, [r2, r4]
 8018318:	0020      	movs	r0, r4
 801831a:	47b0      	blx	r6
        return (status == UX_SUCCESS) ? UX_STATE_NEXT : UX_STATE_ERROR;
 801831c:	2800      	cmp	r0, #0
 801831e:	d0cb      	beq.n	80182b8 <_ux_device_class_storage_tasks_run+0x5d8>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8018320:	239c      	movs	r3, #156	@ 0x9c
 8018322:	019b      	lsls	r3, r3, #6
 8018324:	802b      	strh	r3, [r5, #0]
}
 8018326:	0038      	movs	r0, r7
 8018328:	b005      	add	sp, #20
 801832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 801832c:	0023      	movs	r3, r4
 801832e:	3349      	adds	r3, #73	@ 0x49
 8018330:	7819      	ldrb	r1, [r3, #0]
 8018332:	2338      	movs	r3, #56	@ 0x38
 8018334:	0026      	movs	r6, r4
 8018336:	0020      	movs	r0, r4
 8018338:	0022      	movs	r2, r4
 801833a:	434b      	muls	r3, r1
 801833c:	36b0      	adds	r6, #176	@ 0xb0
 801833e:	9600      	str	r6, [sp, #0]
 8018340:	18e3      	adds	r3, r4, r3
 8018342:	30a4      	adds	r0, #164	@ 0xa4
 8018344:	32ac      	adds	r2, #172	@ 0xac
 8018346:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8018348:	6812      	ldr	r2, [r2, #0]
 801834a:	6803      	ldr	r3, [r0, #0]
 801834c:	0020      	movs	r0, r4
 801834e:	47b0      	blx	r6
 8018350:	e7e4      	b.n	801831c <_ux_device_class_storage_tasks_run+0x63c>
    storage -> ux_device_class_storage_cmd_lba += storage -> ux_device_class_storage_disk_n_lb;
 8018352:	0023      	movs	r3, r4
 8018354:	0021      	movs	r1, r4
 8018356:	33ac      	adds	r3, #172	@ 0xac
 8018358:	31a4      	adds	r1, #164	@ 0xa4
 801835a:	681a      	ldr	r2, [r3, #0]
 801835c:	680b      	ldr	r3, [r1, #0]
 801835e:	189b      	adds	r3, r3, r2
 8018360:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_cmd_n_lb -= storage -> ux_device_class_storage_disk_n_lb;
 8018362:	0023      	movs	r3, r4
 8018364:	33a8      	adds	r3, #168	@ 0xa8
 8018366:	6818      	ldr	r0, [r3, #0]
    switch (storage -> ux_device_class_storage_cmd)
 8018368:	3b2c      	subs	r3, #44	@ 0x2c
    storage -> ux_device_class_storage_cmd_n_lb -= storage -> ux_device_class_storage_disk_n_lb;
 801836a:	1a80      	subs	r0, r0, r2
 801836c:	62d8      	str	r0, [r3, #44]	@ 0x2c
    switch (storage -> ux_device_class_storage_cmd)
 801836e:	781a      	ldrb	r2, [r3, #0]
 8018370:	2a35      	cmp	r2, #53	@ 0x35
 8018372:	d064      	beq.n	801843e <_ux_device_class_storage_tasks_run+0x75e>
 8018374:	d805      	bhi.n	8018382 <_ux_device_class_storage_tasks_run+0x6a2>
 8018376:	2a28      	cmp	r2, #40	@ 0x28
 8018378:	d01f      	beq.n	80183ba <_ux_device_class_storage_tasks_run+0x6da>
 801837a:	2a2a      	cmp	r2, #42	@ 0x2a
 801837c:	d005      	beq.n	801838a <_ux_device_class_storage_tasks_run+0x6aa>
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 801837e:	2300      	movs	r3, #0
 8018380:	e79b      	b.n	80182ba <_ux_device_class_storage_tasks_run+0x5da>
    switch (storage -> ux_device_class_storage_cmd)
 8018382:	2aa8      	cmp	r2, #168	@ 0xa8
 8018384:	d019      	beq.n	80183ba <_ux_device_class_storage_tasks_run+0x6da>
 8018386:	2aaa      	cmp	r2, #170	@ 0xaa
 8018388:	d1f9      	bne.n	801837e <_ux_device_class_storage_tasks_run+0x69e>
static inline VOID _ux_device_class_storage_disk_write_next(UX_SLAVE_CLASS_STORAGE *storage)
{

    /* Update buffer state : empty.  */
    storage -> ux_device_class_storage_buffer_state[
            storage -> ux_device_class_storage_buffer_disk] =
 801838a:	0021      	movs	r1, r4
 801838c:	317b      	adds	r1, #123	@ 0x7b
 801838e:	780b      	ldrb	r3, [r1, #0]
 8018390:	18e2      	adds	r2, r4, r3
 8018392:	3278      	adds	r2, #120	@ 0x78
 8018394:	4694      	mov	ip, r2
 8018396:	9302      	str	r3, [sp, #8]
 8018398:	2201      	movs	r2, #1
 801839a:	4663      	mov	r3, ip
 801839c:	701a      	strb	r2, [r3, #0]
                                    UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;

    /* Check if all disk operation is done.  */
    if (storage -> ux_device_class_storage_cmd_n_lb == 0)
 801839e:	2800      	cmp	r0, #0
 80183a0:	d132      	bne.n	8018408 <_ux_device_class_storage_tasks_run+0x728>
        /* Disk is idle now.  */
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;

        /* Issue CSW.  */
        _ux_device_class_storage_csw_send(storage,
                    storage -> ux_slave_class_storage_cbw_lun,
 80183a2:	0023      	movs	r3, r4
        _ux_device_class_storage_csw_send(storage,
 80183a4:	0022      	movs	r2, r4
                    storage -> ux_slave_class_storage_cbw_lun,
 80183a6:	3349      	adds	r3, #73	@ 0x49
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 80183a8:	7028      	strb	r0, [r5, #0]
        _ux_device_class_storage_csw_send(storage,
 80183aa:	7819      	ldrb	r1, [r3, #0]
 80183ac:	0003      	movs	r3, r0
 80183ae:	3208      	adds	r2, #8
            _ux_device_class_storage_csw_send(storage,
 80183b0:	0020      	movs	r0, r4
 80183b2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80183b4:	f7ff f96c 	bl	8017690 <_ux_device_class_storage_csw_send>
 80183b8:	e7b5      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
        storage -> ux_device_class_storage_buffer_disk] =
 80183ba:	0021      	movs	r1, r4
 80183bc:	317b      	adds	r1, #123	@ 0x7b
 80183be:	780b      	ldrb	r3, [r1, #0]
 80183c0:	18e2      	adds	r2, r4, r3
 80183c2:	3278      	adds	r2, #120	@ 0x78
 80183c4:	9302      	str	r3, [sp, #8]
 80183c6:	0013      	movs	r3, r2
 80183c8:	2202      	movs	r2, #2
 80183ca:	701a      	strb	r2, [r3, #0]
    if (storage -> ux_device_class_storage_cmd_n_lb == 0)
 80183cc:	2200      	movs	r2, #0
 80183ce:	4290      	cmp	r0, r2
 80183d0:	d00a      	beq.n	80183e8 <_ux_device_class_storage_tasks_run+0x708>
                            !storage -> ux_device_class_storage_buffer_disk;
 80183d2:	9b02      	ldr	r3, [sp, #8]
 80183d4:	425a      	negs	r2, r3
 80183d6:	4153      	adcs	r3, r2
 80183d8:	b2db      	uxtb	r3, r3
        storage -> ux_device_class_storage_buffer_disk =
 80183da:	700b      	strb	r3, [r1, #0]
            storage -> ux_device_class_storage_buffer_state[
 80183dc:	18e3      	adds	r3, r4, r3
 80183de:	3378      	adds	r3, #120	@ 0x78
 80183e0:	781a      	ldrb	r2, [r3, #0]
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY ==
 80183e2:	2a01      	cmp	r2, #1
 80183e4:	d000      	beq.n	80183e8 <_ux_device_class_storage_tasks_run+0x708>
 80183e6:	2204      	movs	r2, #4
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 80183e8:	702a      	strb	r2, [r5, #0]
    if (storage -> ux_device_class_storage_state ==
 80183ea:	7833      	ldrb	r3, [r6, #0]
 80183ec:	2b26      	cmp	r3, #38	@ 0x26
 80183ee:	d19a      	bne.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
            storage -> ux_device_class_storage_buffer_usb])
 80183f0:	0023      	movs	r3, r4
 80183f2:	337a      	adds	r3, #122	@ 0x7a
 80183f4:	781b      	ldrb	r3, [r3, #0]
        storage -> ux_device_class_storage_buffer_state[
 80183f6:	18e3      	adds	r3, r4, r3
 80183f8:	3378      	adds	r3, #120	@ 0x78
            UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
 80183fa:	781b      	ldrb	r3, [r3, #0]
 80183fc:	2b02      	cmp	r3, #2
 80183fe:	d000      	beq.n	8018402 <_ux_device_class_storage_tasks_run+0x722>
 8018400:	e791      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
        storage -> ux_device_class_storage_state =
 8018402:	2323      	movs	r3, #35	@ 0x23
 8018404:	7033      	strb	r3, [r6, #0]
 8018406:	e78e      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
    else
    {

        /* Update buffer index.  */
        storage -> ux_device_class_storage_buffer_disk =
                             !storage -> ux_device_class_storage_buffer_disk;
 8018408:	9b02      	ldr	r3, [sp, #8]
 801840a:	4258      	negs	r0, r3
 801840c:	4143      	adcs	r3, r0
 801840e:	b2db      	uxtb	r3, r3
        storage -> ux_device_class_storage_buffer_disk =
 8018410:	700b      	strb	r3, [r1, #0]

        /* If buffer is full, start next write.  */
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
            storage -> ux_device_class_storage_buffer_state[
 8018412:	18e3      	adds	r3, r4, r3
 8018414:	3378      	adds	r3, #120	@ 0x78
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
 8018416:	7819      	ldrb	r1, [r3, #0]
        }
        else
        {

            /* Wait until buffer filled by USB.  */
            storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT;
 8018418:	2304      	movs	r3, #4
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
 801841a:	2902      	cmp	r1, #2
 801841c:	d100      	bne.n	8018420 <_ux_device_class_storage_tasks_run+0x740>
            storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 801841e:	0013      	movs	r3, r2
 8018420:	702b      	strb	r3, [r5, #0]
        }

        /* Start USB transfer.  */
        if (storage -> ux_device_class_storage_state ==
 8018422:	7833      	ldrb	r3, [r6, #0]
 8018424:	2b26      	cmp	r3, #38	@ 0x26
 8018426:	d000      	beq.n	801842a <_ux_device_class_storage_tasks_run+0x74a>
 8018428:	e77d      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
                UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
            UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY ==
            storage -> ux_device_class_storage_buffer_state[
                storage -> ux_device_class_storage_buffer_usb])
 801842a:	0023      	movs	r3, r4
 801842c:	337a      	adds	r3, #122	@ 0x7a
 801842e:	781b      	ldrb	r3, [r3, #0]
            storage -> ux_device_class_storage_buffer_state[
 8018430:	18e3      	adds	r3, r4, r3
 8018432:	3378      	adds	r3, #120	@ 0x78
                UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	2b01      	cmp	r3, #1
 8018438:	d000      	beq.n	801843c <_ux_device_class_storage_tasks_run+0x75c>
 801843a:	e774      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
 801843c:	e7e1      	b.n	8018402 <_ux_device_class_storage_tasks_run+0x722>
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 801843e:	2300      	movs	r3, #0
 8018440:	702b      	strb	r3, [r5, #0]
        if (storage -> ux_device_class_storage_state == UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT)
 8018442:	7832      	ldrb	r2, [r6, #0]
 8018444:	2a26      	cmp	r2, #38	@ 0x26
 8018446:	d000      	beq.n	801844a <_ux_device_class_storage_tasks_run+0x76a>
 8018448:	e76d      	b.n	8018326 <_ux_device_class_storage_tasks_run+0x646>
                    storage -> ux_slave_class_storage_cbw_lun,
 801844a:	0021      	movs	r1, r4
            _ux_device_class_storage_csw_send(storage,
 801844c:	0022      	movs	r2, r4
                    storage -> ux_slave_class_storage_cbw_lun,
 801844e:	3149      	adds	r1, #73	@ 0x49
            _ux_device_class_storage_csw_send(storage,
 8018450:	7809      	ldrb	r1, [r1, #0]
 8018452:	3208      	adds	r2, #8
 8018454:	e7ac      	b.n	80183b0 <_ux_device_class_storage_tasks_run+0x6d0>
    }
}
static inline VOID _ux_device_class_storage_disk_error(UX_SLAVE_CLASS_STORAGE *storage)
{
    /* Abort disk operation: read or write with NULL!  */
    switch (storage -> ux_device_class_storage_cmd)
 8018456:	0023      	movs	r3, r4
 8018458:	337c      	adds	r3, #124	@ 0x7c
 801845a:	781b      	ldrb	r3, [r3, #0]
 801845c:	2ba8      	cmp	r3, #168	@ 0xa8
 801845e:	d012      	beq.n	8018486 <_ux_device_class_storage_tasks_run+0x7a6>
 8018460:	d80e      	bhi.n	8018480 <_ux_device_class_storage_tasks_run+0x7a0>
 8018462:	2b28      	cmp	r3, #40	@ 0x28
 8018464:	d00f      	beq.n	8018486 <_ux_device_class_storage_tasks_run+0x7a6>
 8018466:	2b2a      	cmp	r3, #42	@ 0x2a
 8018468:	d189      	bne.n	801837e <_ux_device_class_storage_tasks_run+0x69e>
                ux_slave_class_storage_media_read(storage,
                        storage -> ux_slave_class_storage_cbw_lun, UX_NULL, 0, 0, UX_NULL);
        break;
    case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16:
    case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32:
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 801846a:	0023      	movs	r3, r4
 801846c:	2038      	movs	r0, #56	@ 0x38
 801846e:	2200      	movs	r2, #0
 8018470:	3349      	adds	r3, #73	@ 0x49
 8018472:	7819      	ldrb	r1, [r3, #0]
 8018474:	9201      	str	r2, [sp, #4]
 8018476:	4348      	muls	r0, r1
 8018478:	9200      	str	r2, [sp, #0]
 801847a:	1820      	adds	r0, r4, r0
 801847c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 801847e:	e00c      	b.n	801849a <_ux_device_class_storage_tasks_run+0x7ba>
    switch (storage -> ux_device_class_storage_cmd)
 8018480:	2baa      	cmp	r3, #170	@ 0xaa
 8018482:	d0f2      	beq.n	801846a <_ux_device_class_storage_tasks_run+0x78a>
 8018484:	e77b      	b.n	801837e <_ux_device_class_storage_tasks_run+0x69e>
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8018486:	0023      	movs	r3, r4
 8018488:	2038      	movs	r0, #56	@ 0x38
 801848a:	2200      	movs	r2, #0
 801848c:	3349      	adds	r3, #73	@ 0x49
 801848e:	7819      	ldrb	r1, [r3, #0]
 8018490:	9201      	str	r2, [sp, #4]
 8018492:	4348      	muls	r0, r1
 8018494:	9200      	str	r2, [sp, #0]
 8018496:	1820      	adds	r0, r4, r0
 8018498:	6b06      	ldr	r6, [r0, #48]	@ 0x30
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 801849a:	0013      	movs	r3, r2
 801849c:	0020      	movs	r0, r4
 801849e:	47b0      	blx	r6
                ux_slave_class_storage_media_write(storage,
                        storage -> ux_slave_class_storage_cbw_lun, UX_NULL, 0, 0, UX_NULL);
        break;
 80184a0:	e76d      	b.n	801837e <_ux_device_class_storage_tasks_run+0x69e>
 80184a2:	46c0      	nop			@ (mov r8, r8)

080184a4 <_ux_device_class_storage_test_ready>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_TEST_READY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80184a4:	2338      	movs	r3, #56	@ 0x38
{
 80184a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80184a8:	001d      	movs	r5, r3
 80184aa:	1c4a      	adds	r2, r1, #1
 80184ac:	434d      	muls	r5, r1
 80184ae:	4353      	muls	r3, r2
 80184b0:	1945      	adds	r5, r0, r5
 80184b2:	18c3      	adds	r3, r0, r3
 80184b4:	685e      	ldr	r6, [r3, #4]
 80184b6:	6a2a      	ldr	r2, [r5, #32]
 80184b8:	ab01      	add	r3, sp, #4
{
 80184ba:	0004      	movs	r4, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80184bc:	47b0      	blx	r6
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Set the sense/code/qualifier codes for the REQUEST_SENSE command.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80184be:	9b01      	ldr	r3, [sp, #4]
 80184c0:	626b      	str	r3, [r5, #36]	@ 0x24

    /* Return CSW with success/error.  */
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
                            UX_SLAVE_CLASS_STORAGE_CSW_PASSED : UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80184c2:	1e43      	subs	r3, r0, #1
 80184c4:	4198      	sbcs	r0, r3
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
 80184c6:	6560      	str	r0, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 80184c8:	2000      	movs	r0, #0
 80184ca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080184cc <_ux_device_class_storage_uninitialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 80184cc:	6a03      	ldr	r3, [r0, #32]
{
 80184ce:	b510      	push	{r4, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 80184d0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    
    /* Sanity check.  */
    if (storage != UX_NULL)
 80184d2:	2c00      	cmp	r4, #0
 80184d4:	d005      	beq.n	80184e2 <_ux_device_class_storage_uninitialize+0x16>
        /* Remove the thread used by STORAGE.  */
        _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
#endif

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1
        _ux_utility_memory_free(storage -> ux_device_class_storage_endpoint_buffer);
 80184d6:	6860      	ldr	r0, [r4, #4]
 80184d8:	f7fe fc3c 	bl	8016d54 <_ux_utility_memory_free>
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(storage);
 80184dc:	0020      	movs	r0, r4
 80184de:	f7fe fc39 	bl	8016d54 <_ux_utility_memory_free>
    }
    
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 80184e2:	2000      	movs	r0, #0
 80184e4:	bd10      	pop	{r4, pc}

080184e6 <_ux_device_class_storage_verify>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_verify(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                      UX_SLAVE_ENDPOINT *endpoint_in,
                                      UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80184e6:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_VERIFY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80184e8:	2000      	movs	r0, #0
 80184ea:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return success!  */
    return(UX_SUCCESS);
}
 80184ec:	4770      	bx	lr
	...

080184f0 <_ux_device_class_storage_write>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_write(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                    UX_SLAVE_ENDPOINT *endpoint_in,
                                    UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 80184f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184f2:	b085      	sub	sp, #20
 80184f4:	9301      	str	r3, [sp, #4]
 80184f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80184f8:	cb20      	ldmia	r3!, {r5}
 80184fa:	0004      	movs	r4, r0


    UX_PARAMETER_NOT_USED(endpoint_in);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 80184fc:	1ca8      	adds	r0, r5, #2
{
 80184fe:	000e      	movs	r6, r1
 8018500:	781f      	ldrb	r7, [r3, #0]
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 8018502:	f7fe fb09 	bl	8016b18 <_ux_utility_long_get_big_endian>
 8018506:	9000      	str	r0, [sp, #0]
    
    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.   */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16)
 8018508:	2f2a      	cmp	r7, #42	@ 0x2a
 801850a:	d120      	bne.n	801854e <_ux_device_class_storage_write+0x5e>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);
 801850c:	1de8      	adds	r0, r5, #7
 801850e:	f7fe fc55 	bl	8016dbc <_ux_utility_short_get_big_endian>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8018512:	2338      	movs	r3, #56	@ 0x38
 8018514:	1c72      	adds	r2, r6, #1
 8018516:	001d      	movs	r5, r3
 8018518:	4353      	muls	r3, r2
 801851a:	18e3      	adds	r3, r4, r3
 801851c:	685b      	ldr	r3, [r3, #4]
 801851e:	4375      	muls	r5, r6
 8018520:	469c      	mov	ip, r3
 8018522:	1965      	adds	r5, r4, r5
 8018524:	0031      	movs	r1, r6
 8018526:	ab03      	add	r3, sp, #12
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 8018528:	0007      	movs	r7, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 801852a:	4666      	mov	r6, ip
 801852c:	0020      	movs	r0, r4
 801852e:	6a2a      	ldr	r2, [r5, #32]
 8018530:	47b0      	blx	r6
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8018532:	9b03      	ldr	r3, [sp, #12]
 8018534:	626b      	str	r3, [r5, #36]	@ 0x24

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018536:	2301      	movs	r3, #1
 8018538:	6563      	str	r3, [r4, #84]	@ 0x54

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 801853a:	2800      	cmp	r0, #0
 801853c:	d104      	bne.n	8018548 <_ux_device_class_storage_write+0x58>
        /* We are done here.  */
        return(UX_ERROR);
    }

    /* Check Read Only flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 801853e:	69eb      	ldr	r3, [r5, #28]
 8018540:	2b01      	cmp	r3, #1
 8018542:	d108      	bne.n	8018556 <_ux_device_class_storage_write+0x66>
    {

        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8018544:	4b12      	ldr	r3, [pc, #72]	@ (8018590 <_ux_device_class_storage_write+0xa0>)
 8018546:	626b      	str	r3, [r5, #36]	@ 0x24
        return(UX_ERROR);
 8018548:	20ff      	movs	r0, #255	@ 0xff
    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Return completion status.  */
    return(status);
}
 801854a:	b005      	add	sp, #20
 801854c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 801854e:	1da8      	adds	r0, r5, #6
 8018550:	f7fe fae2 	bl	8016b18 <_ux_utility_long_get_big_endian>
 8018554:	e7dd      	b.n	8018512 <_ux_device_class_storage_write+0x22>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_WRITE;
 8018556:	0022      	movs	r2, r4
 8018558:	2104      	movs	r1, #4
 801855a:	327d      	adds	r2, #125	@ 0x7d
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 801855c:	692b      	ldr	r3, [r5, #16]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_WRITE;
 801855e:	7011      	strb	r1, [r2, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT;
 8018560:	490c      	ldr	r1, [pc, #48]	@ (8018594 <_ux_device_class_storage_write+0xa4>)
 8018562:	3201      	adds	r2, #1
 8018564:	8011      	strh	r1, [r2, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 8018566:	2202      	movs	r2, #2
    storage -> ux_device_class_storage_transfer = transfer_request;
 8018568:	0021      	movs	r1, r4
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 801856a:	32ff      	adds	r2, #255	@ 0xff
 801856c:	67a2      	str	r2, [r4, #120]	@ 0x78
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 801856e:	9a01      	ldr	r2, [sp, #4]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8018570:	3188      	adds	r1, #136	@ 0x88
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8018572:	3220      	adds	r2, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8018574:	600a      	str	r2, [r1, #0]
    storage -> ux_device_class_storage_device_length = total_length;
 8018576:	0022      	movs	r2, r4
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8018578:	437b      	muls	r3, r7
    storage -> ux_device_class_storage_device_length = total_length;
 801857a:	328c      	adds	r2, #140	@ 0x8c
 801857c:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_length = total_length;
 801857e:	6093      	str	r3, [r2, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8018580:	0023      	movs	r3, r4
    storage -> ux_device_class_storage_cmd_lba = lba;
 8018582:	9a00      	ldr	r2, [sp, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8018584:	3398      	adds	r3, #152	@ 0x98
 8018586:	6018      	str	r0, [r3, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8018588:	60da      	str	r2, [r3, #12]
    storage -> ux_device_class_storage_cmd_n_lb = total_number_blocks;
 801858a:	611f      	str	r7, [r3, #16]
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801858c:	6560      	str	r0, [r4, #84]	@ 0x54
    return(status);
 801858e:	e7dc      	b.n	801854a <_ux_device_class_storage_write+0x5a>
 8018590:	00002707 	.word	0x00002707
 8018594:	00002304 	.word	0x00002304

08018598 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 8018598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801859a:	0004      	movs	r4, r0

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 801859c:	6847      	ldr	r7, [r0, #4]

    UX_DISABLE
 801859e:	f000 fd07 	bl	8018fb0 <_ux_utility_interrupt_disable>

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 80185a2:	68a3      	ldr	r3, [r4, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 80185a4:	2280      	movs	r2, #128	@ 0x80
 80185a6:	0019      	movs	r1, r3
 80185a8:	00d2      	lsls	r2, r2, #3
 80185aa:	4011      	ands	r1, r2
 80185ac:	9101      	str	r1, [sp, #4]
 80185ae:	4213      	tst	r3, r2
 80185b0:	d002      	beq.n	80185b8 <_ux_dcd_stm32_setup_isr_pending+0x20>

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
    if (ed_status == 0)
    {
        UX_RESTORE
 80185b2:	f000 fd01 	bl	8018fb8 <_ux_utility_interrupt_restore>
        break;
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
}
 80185b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 80185b8:	26c0      	movs	r6, #192	@ 0xc0
 80185ba:	0019      	movs	r1, r3
 80185bc:	00b6      	lsls	r6, r6, #2
 80185be:	4031      	ands	r1, r6
 80185c0:	9100      	str	r1, [sp, #0]
    if (ed_status == 0)
 80185c2:	4233      	tst	r3, r6
 80185c4:	d0f5      	beq.n	80185b2 <_ux_dcd_stm32_setup_isr_pending+0x1a>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 80185c6:	491b      	ldr	r1, [pc, #108]	@ (8018634 <_ux_dcd_stm32_setup_isr_pending+0x9c>)
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80185c8:	003d      	movs	r5, r7
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 80185ca:	400b      	ands	r3, r1
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 80185cc:	431a      	orrs	r2, r3
 80185ce:	60a2      	str	r2, [r4, #8]
    UX_RESTORE
 80185d0:	f000 fcf2 	bl	8018fb8 <_ux_utility_interrupt_restore>
    switch(ed_status)
 80185d4:	2280      	movs	r2, #128	@ 0x80
 80185d6:	9900      	ldr	r1, [sp, #0]
 80185d8:	2380      	movs	r3, #128	@ 0x80
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80185da:	3520      	adds	r5, #32
    switch(ed_status)
 80185dc:	0052      	lsls	r2, r2, #1
 80185de:	4291      	cmp	r1, r2
 80185e0:	d00c      	beq.n	80185fc <_ux_dcd_stm32_setup_isr_pending+0x64>
 80185e2:	0022      	movs	r2, r4
 80185e4:	3294      	adds	r2, #148	@ 0x94
 80185e6:	42b1      	cmp	r1, r6
 80185e8:	d013      	beq.n	8018612 <_ux_dcd_stm32_setup_isr_pending+0x7a>
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 80185ea:	6816      	ldr	r6, [r2, #0]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80185ec:	0028      	movs	r0, r5
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80185ee:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80185f0:	f7fd fd0e 	bl	8016010 <_ux_device_stack_control_request_process>
 80185f4:	1e01      	subs	r1, r0, #0
 80185f6:	d107      	bne.n	8018608 <_ux_dcd_stm32_setup_isr_pending+0x70>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80185f8:	2304      	movs	r3, #4
 80185fa:	e014      	b.n	8018626 <_ux_dcd_stm32_setup_isr_pending+0x8e>
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80185fc:	73a3      	strb	r3, [r4, #14]
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 80185fe:	2301      	movs	r3, #1
    _ux_device_stack_control_request_process(transfer_request);
 8018600:	0028      	movs	r0, r5
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8018602:	7323      	strb	r3, [r4, #12]
    _ux_device_stack_control_request_process(transfer_request);
 8018604:	f7fd fd04 	bl	8016010 <_ux_device_stack_control_request_process>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8018608:	68a3      	ldr	r3, [r4, #8]
 801860a:	4a0b      	ldr	r2, [pc, #44]	@ (8018638 <_ux_dcd_stm32_setup_isr_pending+0xa0>)
 801860c:	4013      	ands	r3, r2
 801860e:	60a3      	str	r3, [r4, #8]
 8018610:	e7d1      	b.n	80185b6 <_ux_dcd_stm32_setup_isr_pending+0x1e>
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 8018612:	6816      	ldr	r6, [r2, #0]
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018614:	9a01      	ldr	r2, [sp, #4]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018616:	0028      	movs	r0, r5
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018618:	647a      	str	r2, [r7, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801861a:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801861c:	f7fd fcf8 	bl	8016010 <_ux_device_stack_control_request_process>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8018620:	2303      	movs	r3, #3
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018622:	1e01      	subs	r1, r0, #0
 8018624:	d1f0      	bne.n	8018608 <_ux_dcd_stm32_setup_isr_pending+0x70>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8018626:	7323      	strb	r3, [r4, #12]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8018628:	000a      	movs	r2, r1
 801862a:	000b      	movs	r3, r1
 801862c:	0030      	movs	r0, r6
 801862e:	f7f8 f984 	bl	801093a <HAL_PCD_EP_Transmit>
 8018632:	e7e9      	b.n	8018608 <_ux_dcd_stm32_setup_isr_pending+0x70>
 8018634:	fffffcff 	.word	0xfffffcff
 8018638:	fffffbff 	.word	0xfffffbff

0801863c <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801863c:	4b27      	ldr	r3, [pc, #156]	@ (80186dc <HAL_PCD_SetupStageCallback+0xa0>)
{
 801863e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018640:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8018642:	2208      	movs	r2, #8
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018644:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8018646:	23a6      	movs	r3, #166	@ 0xa6
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8018648:	686c      	ldr	r4, [r5, #4]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 801864a:	009b      	lsls	r3, r3, #2
 801864c:	0027      	movs	r7, r4
 801864e:	375c      	adds	r7, #92	@ 0x5c
 8018650:	18c1      	adds	r1, r0, r3
{
 8018652:	0006      	movs	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8018654:	0038      	movs	r0, r7
 8018656:	f7fe fb73 	bl	8016d40 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801865a:	2301      	movs	r3, #1

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801865c:	210e      	movs	r1, #14
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801865e:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8018660:	6263      	str	r3, [r4, #36]	@ 0x24
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8018662:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8018664:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8018666:	438b      	bics	r3, r1
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018668:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801866a:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 801866c:	7839      	ldrb	r1, [r7, #0]
 801866e:	297f      	cmp	r1, #127	@ 0x7f
 8018670:	d904      	bls.n	801867c <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 8018672:	3201      	adds	r2, #1
 8018674:	32ff      	adds	r2, #255	@ 0xff

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8018676:	4313      	orrs	r3, r2
 8018678:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
 801867a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 801867c:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801867e:	0022      	movs	r2, r4
 8018680:	3262      	adds	r2, #98	@ 0x62
 8018682:	7812      	ldrb	r2, [r2, #0]
 8018684:	2a00      	cmp	r2, #0
 8018686:	d107      	bne.n	8018698 <HAL_PCD_SetupStageCallback+0x5c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8018688:	0022      	movs	r2, r4
 801868a:	3263      	adds	r2, #99	@ 0x63
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801868c:	7812      	ldrb	r2, [r2, #0]
 801868e:	2a00      	cmp	r2, #0
 8018690:	d102      	bne.n	8018698 <HAL_PCD_SetupStageCallback+0x5c>
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8018692:	2280      	movs	r2, #128	@ 0x80
 8018694:	0092      	lsls	r2, r2, #2
 8018696:	e7ee      	b.n	8018676 <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8018698:	0020      	movs	r0, r4
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801869a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 801869c:	3062      	adds	r0, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801869e:	9301      	str	r3, [sp, #4]
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80186a0:	f7fe fb87 	bl	8016db2 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80186a4:	2280      	movs	r2, #128	@ 0x80
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80186a6:	0003      	movs	r3, r0
 80186a8:	2700      	movs	r7, #0
 80186aa:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80186ac:	0052      	lsls	r2, r2, #1
 80186ae:	4290      	cmp	r0, r2
 80186b0:	d908      	bls.n	80186c4 <HAL_PCD_SetupStageCallback+0x88>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 80186b2:	0028      	movs	r0, r5
 80186b4:	9901      	ldr	r1, [sp, #4]
 80186b6:	f000 f95d 	bl	8018974 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80186ba:	2380      	movs	r3, #128	@ 0x80
 80186bc:	68aa      	ldr	r2, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80186be:	732f      	strb	r7, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80186c0:	009b      	lsls	r3, r3, #2
 80186c2:	e7d8      	b.n	8018676 <HAL_PCD_SetupStageCallback+0x3a>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80186c4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                HAL_PCD_EP_Receive(hpcd,
 80186c6:	9901      	ldr	r1, [sp, #4]
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80186c8:	63a7      	str	r7, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80186ca:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
 80186cc:	0030      	movs	r0, r6
 80186ce:	7b89      	ldrb	r1, [r1, #14]
 80186d0:	f7f8 f910 	bl	80108f4 <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 80186d4:	2302      	movs	r3, #2
 80186d6:	732b      	strb	r3, [r5, #12]
 80186d8:	e7cf      	b.n	801867a <HAL_PCD_SetupStageCallback+0x3e>
 80186da:	46c0      	nop			@ (mov r8, r8)
 80186dc:	200030e0 	.word	0x200030e0

080186e0 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80186e0:	4b33      	ldr	r3, [pc, #204]	@ (80187b0 <HAL_PCD_DataInStageCallback+0xd0>)
{
 80186e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	000a      	movs	r2, r1
 80186e8:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 80186ea:	230f      	movs	r3, #15
{
 80186ec:	0007      	movs	r7, r0
 80186ee:	000d      	movs	r5, r1
 80186f0:	401a      	ands	r2, r3
    if ((epnum & 0xF) != 0)
 80186f2:	4219      	tst	r1, r3
 80186f4:	d012      	beq.n	801871c <HAL_PCD_DataInStageCallback+0x3c>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 80186f6:	3b03      	subs	r3, #3
 80186f8:	4353      	muls	r3, r2
 80186fa:	0019      	movs	r1, r3
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80186fc:	18f3      	adds	r3, r6, r3
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 80186fe:	314c      	adds	r1, #76	@ 0x4c
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018700:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8018702:	1871      	adds	r1, r6, r1
    }
    else
    {

        /* Check if a ZLP should be armed.  */
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8018704:	2200      	movs	r2, #0
 8018706:	6da0      	ldr	r0, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_requested_length)
 8018708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 801870a:	4290      	cmp	r0, r2
 801870c:	d046      	beq.n	801879c <HAL_PCD_DataInStageCallback+0xbc>
 801870e:	4293      	cmp	r3, r2
 8018710:	d044      	beq.n	801879c <HAL_PCD_DataInStageCallback+0xbc>
            /* Reset the ZLP condition.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;

            /* Arm a ZLP packet on IN.  */
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8018712:	0013      	movs	r3, r2
 8018714:	0029      	movs	r1, r5
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8018716:	65a2      	str	r2, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8018718:	63e2      	str	r2, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 801871a:	e039      	b.n	8018790 <HAL_PCD_DataInStageCallback+0xb0>
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801871c:	6874      	ldr	r4, [r6, #4]
    if (epnum == 0U)
 801871e:	2900      	cmp	r1, #0
 8018720:	d13a      	bne.n	8018798 <HAL_PCD_DataInStageCallback+0xb8>
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8018722:	7b33      	ldrb	r3, [r6, #12]
 8018724:	2b01      	cmp	r3, #1
 8018726:	d115      	bne.n	8018754 <HAL_PCD_DataInStageCallback+0x74>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018728:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801872a:	000a      	movs	r2, r1
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801872c:	9301      	str	r3, [sp, #4]
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801872e:	000b      	movs	r3, r1
 8018730:	f7f8 f8e0 	bl	80108f4 <HAL_PCD_EP_Receive>
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8018734:	9b01      	ldr	r3, [sp, #4]
 8018736:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8018738:	8a18      	ldrh	r0, [r3, #16]
 801873a:	4281      	cmp	r1, r0
 801873c:	d81d      	bhi.n	801877a <HAL_PCD_DataInStageCallback+0x9a>
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801873e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018740:	2b01      	cmp	r3, #1
 8018742:	d108      	bne.n	8018756 <HAL_PCD_DataInStageCallback+0x76>
                    HAL_PCD_EP_Transmit(hpcd,
 8018744:	9b01      	ldr	r3, [sp, #4]
 8018746:	002a      	movs	r2, r5
 8018748:	7b99      	ldrb	r1, [r3, #14]
 801874a:	0038      	movs	r0, r7
 801874c:	002b      	movs	r3, r5
 801874e:	f7f8 f8f4 	bl	801093a <HAL_PCD_EP_Transmit>
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8018752:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8018754:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8018756:	2302      	movs	r3, #2
 8018758:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 801875a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801875c:	68b2      	ldr	r2, [r6, #8]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 801875e:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018760:	2308      	movs	r3, #8
 8018762:	4313      	orrs	r3, r2
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018764:	6465      	str	r5, [r4, #68]	@ 0x44
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018766:	60b3      	str	r3, [r6, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8018768:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801876a:	2b00      	cmp	r3, #0
 801876c:	d002      	beq.n	8018774 <HAL_PCD_DataInStageCallback+0x94>
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801876e:	0020      	movs	r0, r4
 8018770:	3020      	adds	r0, #32
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8018772:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8018774:	2304      	movs	r3, #4
 8018776:	7333      	strb	r3, [r6, #12]
 8018778:	e7ec      	b.n	8018754 <HAL_PCD_DataInStageCallback+0x74>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801877a:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801877c:	4283      	cmp	r3, r0
 801877e:	d900      	bls.n	8018782 <HAL_PCD_DataInStageCallback+0xa2>
 8018780:	0003      	movs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018782:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8018784:	1ac9      	subs	r1, r1, r3
 8018786:	63e1      	str	r1, [r4, #60]	@ 0x3c
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018788:	1812      	adds	r2, r2, r0
                HAL_PCD_EP_Transmit(hpcd,
 801878a:	9901      	ldr	r1, [sp, #4]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801878c:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Transmit(hpcd,
 801878e:	7b89      	ldrb	r1, [r1, #14]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8018790:	0038      	movs	r0, r7
 8018792:	f7f8 f8d2 	bl	801093a <HAL_PCD_EP_Transmit>
 8018796:	e7dd      	b.n	8018754 <HAL_PCD_DataInStageCallback+0x74>
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8018798:	1d31      	adds	r1, r6, #4
 801879a:	e7b3      	b.n	8018704 <HAL_PCD_DataInStageCallback+0x24>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801879c:	6462      	str	r2, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801879e:	2202      	movs	r2, #2
            transfer_request -> ux_slave_transfer_request_actual_length =
 80187a0:	63a3      	str	r3, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80187a2:	2308      	movs	r3, #8
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80187a4:	6222      	str	r2, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80187a6:	684a      	ldr	r2, [r1, #4]
 80187a8:	4313      	orrs	r3, r2
 80187aa:	604b      	str	r3, [r1, #4]
}
 80187ac:	e7d2      	b.n	8018754 <HAL_PCD_DataInStageCallback+0x74>
 80187ae:	46c0      	nop			@ (mov r8, r8)
 80187b0:	200030e0 	.word	0x200030e0

080187b4 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80187b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80187b6:	4b21      	ldr	r3, [pc, #132]	@ (801883c <HAL_PCD_DataOutStageCallback+0x88>)
 80187b8:	250c      	movs	r5, #12
 80187ba:	681b      	ldr	r3, [r3, #0]
{
 80187bc:	0007      	movs	r7, r0
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80187be:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80187c0:	230f      	movs	r3, #15
 80187c2:	400b      	ands	r3, r1
 80187c4:	435d      	muls	r5, r3
 80187c6:	1975      	adds	r5, r6, r5
 80187c8:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 80187ca:	2900      	cmp	r1, #0
 80187cc:	d12a      	bne.n	8018824 <HAL_PCD_DataOutStageCallback+0x70>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 80187ce:	7b33      	ldrb	r3, [r6, #12]
 80187d0:	2b02      	cmp	r3, #2
 80187d2:	d111      	bne.n	80187f8 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 80187d4:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 80187d6:	f7f8 f8a8 	bl	801092a <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80187da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
 80187dc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80187de:	18c3      	adds	r3, r0, r3
 80187e0:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80187e2:	4293      	cmp	r3, r2
 80187e4:	d811      	bhi.n	801880a <HAL_PCD_DataOutStageCallback+0x56>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80187e6:	d002      	beq.n	80187ee <HAL_PCD_DataOutStageCallback+0x3a>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 80187e8:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80187ea:	4283      	cmp	r3, r0
 80187ec:	d005      	beq.n	80187fa <HAL_PCD_DataOutStageCallback+0x46>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 80187ee:	23c0      	movs	r3, #192	@ 0xc0
 80187f0:	68b2      	ldr	r2, [r6, #8]
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	4313      	orrs	r3, r2
 80187f6:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 80187f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80187fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
 80187fc:	0038      	movs	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80187fe:	18d2      	adds	r2, r2, r3
 8018800:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
 8018802:	7ba9      	ldrb	r1, [r5, #14]
 8018804:	f7f8 f876 	bl	80108f4 <HAL_PCD_EP_Receive>
 8018808:	e7f6      	b.n	80187f8 <HAL_PCD_DataOutStageCallback+0x44>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801880a:	2327      	movs	r3, #39	@ 0x27
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801880c:	68b2      	ldr	r2, [r6, #8]
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801880e:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018810:	3b1f      	subs	r3, #31
 8018812:	4313      	orrs	r3, r2
 8018814:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8018816:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018818:	2b00      	cmp	r3, #0
 801881a:	d0ed      	beq.n	80187f8 <HAL_PCD_DataOutStageCallback+0x44>
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801881c:	0020      	movs	r0, r4
 801881e:	3020      	adds	r0, #32
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8018820:	4798      	blx	r3
 8018822:	e7e9      	b.n	80187f8 <HAL_PCD_DataOutStageCallback+0x44>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018824:	f7f8 f881 	bl	801092a <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018828:	2300      	movs	r3, #0
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801882a:	68aa      	ldr	r2, [r5, #8]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801882c:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801882e:	3302      	adds	r3, #2
 8018830:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018832:	3306      	adds	r3, #6
 8018834:	4313      	orrs	r3, r2
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018836:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018838:	60ab      	str	r3, [r5, #8]
}
 801883a:	e7dd      	b.n	80187f8 <HAL_PCD_DataOutStageCallback+0x44>
 801883c:	200030e0 	.word	0x200030e0

08018840 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8018840:	b570      	push	{r4, r5, r6, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8018842:	4c08      	ldr	r4, [pc, #32]	@ (8018864 <HAL_PCD_ResetCallback+0x24>)
 8018844:	6823      	ldr	r3, [r4, #0]
 8018846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018848:	2b00      	cmp	r3, #0
 801884a:	d001      	beq.n	8018850 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801884c:	f7fd fda6 	bl	801639c <_ux_device_stack_disconnect>
        break;

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8018850:	2501      	movs	r5, #1
 8018852:	6823      	ldr	r3, [r4, #0]
 8018854:	33fc      	adds	r3, #252	@ 0xfc
 8018856:	649d      	str	r5, [r3, #72]	@ 0x48
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8018858:	f000 f92c 	bl	8018ab4 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801885c:	6823      	ldr	r3, [r4, #0]
 801885e:	625d      	str	r5, [r3, #36]	@ 0x24
}
 8018860:	bd70      	pop	{r4, r5, r6, pc}
 8018862:	46c0      	nop			@ (mov r8, r8)
 8018864:	200030e0 	.word	0x200030e0

08018868 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018868:	4b04      	ldr	r3, [pc, #16]	@ (801887c <HAL_PCD_SuspendCallback+0x14>)
{
 801886a:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	33fc      	adds	r3, #252	@ 0xfc
 8018870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018872:	2b00      	cmp	r3, #0
 8018874:	d001      	beq.n	801887a <HAL_PCD_SuspendCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8018876:	20f4      	movs	r0, #244	@ 0xf4
 8018878:	4798      	blx	r3
    }
}
 801887a:	bd10      	pop	{r4, pc}
 801887c:	200030e0 	.word	0x200030e0

08018880 <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018880:	4b04      	ldr	r3, [pc, #16]	@ (8018894 <HAL_PCD_ResumeCallback+0x14>)
{
 8018882:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	33fc      	adds	r3, #252	@ 0xfc
 8018888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801888a:	2b00      	cmp	r3, #0
 801888c:	d001      	beq.n	8018892 <HAL_PCD_ResumeCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 801888e:	20f3      	movs	r0, #243	@ 0xf3
 8018890:	4798      	blx	r3
    }
}
 8018892:	bd10      	pop	{r4, pc}
 8018894:	200030e0 	.word	0x200030e0

08018898 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018898:	4b04      	ldr	r3, [pc, #16]	@ (80188ac <HAL_PCD_SOFCallback+0x14>)
{
 801889a:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	33fc      	adds	r3, #252	@ 0xfc
 80188a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d001      	beq.n	80188aa <HAL_PCD_SOFCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 80188a6:	20f0      	movs	r0, #240	@ 0xf0
 80188a8:	4798      	blx	r3
    }
}
 80188aa:	bd10      	pop	{r4, pc}
 80188ac:	200030e0 	.word	0x200030e0

080188b0 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80188b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188b2:	267f      	movs	r6, #127	@ 0x7f
 80188b4:	000a      	movs	r2, r1
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80188b6:	7b89      	ldrb	r1, [r1, #14]
{
 80188b8:	0005      	movs	r5, r0

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);

    if (ed == UX_NULL)
        return(UX_NO_ED_AVAILABLE);
 80188ba:	2414      	movs	r4, #20
 80188bc:	400e      	ands	r6, r1
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80188be:	2e05      	cmp	r6, #5
 80188c0:	d829      	bhi.n	8018916 <_ux_dcd_stm32_endpoint_create+0x66>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80188c2:	0003      	movs	r3, r0
 80188c4:	3394      	adds	r3, #148	@ 0x94
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	469c      	mov	ip, r3
 80188ca:	791b      	ldrb	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80188cc:	429e      	cmp	r6, r3
 80188ce:	d222      	bcs.n	8018916 <_ux_dcd_stm32_endpoint_create+0x66>
        return(UX_NULL);

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 80188d0:	230c      	movs	r3, #12
 80188d2:	b24c      	sxtb	r4, r1
 80188d4:	4373      	muls	r3, r6
 80188d6:	2c00      	cmp	r4, #0
 80188d8:	da1f      	bge.n	801891a <_ux_dcd_stm32_endpoint_create+0x6a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80188da:	334c      	adds	r3, #76	@ 0x4c
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 80188dc:	18eb      	adds	r3, r5, r3

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80188de:	685e      	ldr	r6, [r3, #4]
 80188e0:	2501      	movs	r5, #1
 80188e2:	0034      	movs	r4, r6
 80188e4:	402c      	ands	r4, r5
 80188e6:	422e      	tst	r6, r5
 80188e8:	d119      	bne.n	801891e <_ux_dcd_stm32_endpoint_create+0x6e>
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80188ea:	2780      	movs	r7, #128	@ 0x80
 80188ec:	0008      	movs	r0, r1
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 80188ee:	4335      	orrs	r5, r6
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80188f0:	43b8      	bics	r0, r7
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 80188f2:	605d      	str	r5, [r3, #4]
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80188f4:	0007      	movs	r7, r0

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 80188f6:	6093      	str	r3, [r2, #8]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 80188f8:	257f      	movs	r5, #127	@ 0x7f
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 80188fa:	7258      	strb	r0, [r3, #9]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 80188fc:	0008      	movs	r0, r1
 80188fe:	43a8      	bics	r0, r5
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8018900:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018902:	7298      	strb	r0, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8018904:	2f00      	cmp	r7, #0
 8018906:	d006      	beq.n	8018916 <_ux_dcd_stm32_endpoint_create+0x66>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8018908:	2503      	movs	r5, #3
 801890a:	7bd3      	ldrb	r3, [r2, #15]
 801890c:	4660      	mov	r0, ip
 801890e:	8a12      	ldrh	r2, [r2, #16]
 8018910:	402b      	ands	r3, r5
 8018912:	f7f7 ff9b 	bl	801084c <HAL_PCD_EP_Open>
        return(UX_SUCCESS);
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
}
 8018916:	0020      	movs	r0, r4
 8018918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801891a:	3304      	adds	r3, #4
 801891c:	e7de      	b.n	80188dc <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 801891e:	2414      	movs	r4, #20
 8018920:	e7f9      	b.n	8018916 <_ux_dcd_stm32_endpoint_create+0x66>

08018922 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018922:	b510      	push	{r4, lr}

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8018924:	2400      	movs	r4, #0
 8018926:	688b      	ldr	r3, [r1, #8]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018928:	3094      	adds	r0, #148	@ 0x94
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 801892a:	605c      	str	r4, [r3, #4]
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801892c:	7b89      	ldrb	r1, [r1, #14]
 801892e:	6800      	ldr	r0, [r0, #0]
 8018930:	f7f7 ffba 	bl	80108a8 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8018934:	0020      	movs	r0, r4
 8018936:	bd10      	pop	{r4, pc}

08018938 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801893a:	688e      	ldr	r6, [r1, #8]
{
 801893c:	000c      	movs	r4, r1
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801893e:	2700      	movs	r7, #0
{
 8018940:	0005      	movs	r5, r0
    UX_DISABLE
 8018942:	f000 fb35 	bl	8018fb0 <_ux_utility_interrupt_disable>
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8018946:	6873      	ldr	r3, [r6, #4]
 8018948:	4a09      	ldr	r2, [pc, #36]	@ (8018970 <_ux_dcd_stm32_endpoint_reset+0x38>)
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801894a:	7237      	strb	r7, [r6, #8]
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801894c:	4013      	ands	r3, r2
 801894e:	6073      	str	r3, [r6, #4]
    UX_DISABLE
 8018950:	9001      	str	r0, [sp, #4]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8018952:	3594      	adds	r5, #148	@ 0x94
 8018954:	7ba1      	ldrb	r1, [r4, #14]
 8018956:	6828      	ldr	r0, [r5, #0]
 8018958:	f7f8 f835 	bl	80109c6 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801895c:	7ba1      	ldrb	r1, [r4, #14]
 801895e:	6828      	ldr	r0, [r5, #0]
 8018960:	f7f8 f871 	bl	8010a46 <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 8018964:	9801      	ldr	r0, [sp, #4]
 8018966:	f000 fb27 	bl	8018fb8 <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 801896a:	0038      	movs	r0, r7
 801896c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801896e:	46c0      	nop			@ (mov r8, r8)
 8018970:	fffffcf3 	.word	0xfffffcf3

08018974 <_ux_dcd_stm32_endpoint_stall>:

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8018974:	2204      	movs	r2, #4
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018976:	688b      	ldr	r3, [r1, #8]
{
 8018978:	b510      	push	{r4, lr}
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 801897a:	685c      	ldr	r4, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 801897c:	3094      	adds	r0, #148	@ 0x94
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 801897e:	4322      	orrs	r2, r4
 8018980:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8018982:	7b89      	ldrb	r1, [r1, #14]
 8018984:	7a9b      	ldrb	r3, [r3, #10]
 8018986:	6800      	ldr	r0, [r0, #0]
 8018988:	4319      	orrs	r1, r3
 801898a:	f7f7 ffee 	bl	801096a <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 801898e:	2000      	movs	r0, #0
 8018990:	bd10      	pop	{r4, pc}

08018992 <_ux_dcd_stm32_endpoint_status>:
ULONG ep_num = ep_addr & 0x7Fu;
 8018992:	227f      	movs	r2, #127	@ 0x7f
 8018994:	400a      	ands	r2, r1
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018996:	2a05      	cmp	r2, #5
 8018998:	d815      	bhi.n	80189c6 <_ux_dcd_stm32_endpoint_status+0x34>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801899a:	0003      	movs	r3, r0
 801899c:	3394      	adds	r3, #148	@ 0x94
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	791b      	ldrb	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d20f      	bcs.n	80189c6 <_ux_dcd_stm32_endpoint_status+0x34>
    if (ep_dir)
 80189a6:	230c      	movs	r3, #12
 80189a8:	4353      	muls	r3, r2
 80189aa:	0609      	lsls	r1, r1, #24
 80189ac:	d509      	bpl.n	80189c2 <_ux_dcd_stm32_endpoint_status+0x30>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80189ae:	334c      	adds	r3, #76	@ 0x4c
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 80189b0:	18c0      	adds	r0, r0, r3

    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80189b2:	2301      	movs	r3, #1
 80189b4:	6842      	ldr	r2, [r0, #4]
        return(UX_ERROR);
 80189b6:	20ff      	movs	r0, #255	@ 0xff
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80189b8:	421a      	tst	r2, r3
 80189ba:	d001      	beq.n	80189c0 <_ux_dcd_stm32_endpoint_status+0x2e>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 80189bc:	0890      	lsrs	r0, r2, #2
 80189be:	4018      	ands	r0, r3
        return(UX_FALSE);
    else
        return(UX_TRUE);
}
 80189c0:	4770      	bx	lr
 80189c2:	3304      	adds	r3, #4
 80189c4:	e7f4      	b.n	80189b0 <_ux_dcd_stm32_endpoint_status+0x1e>
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80189c6:	2300      	movs	r3, #0
 80189c8:	685b      	ldr	r3, [r3, #4]
 80189ca:	deff      	udf	#255	@ 0xff

080189cc <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 80189cc:	2000      	movs	r0, #0
 80189ce:	4770      	bx	lr

080189d0 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 80189d0:	0003      	movs	r3, r0
 80189d2:	0008      	movs	r0, r1
 80189d4:	0011      	movs	r1, r2
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 80189d6:	681a      	ldr	r2, [r3, #0]
{
 80189d8:	b510      	push	{r4, lr}
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 80189da:	2a00      	cmp	r2, #0
 80189dc:	d106      	bne.n	80189ec <_ux_dcd_stm32_function+0x1c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 80189de:	2102      	movs	r1, #2
 80189e0:	3255      	adds	r2, #85	@ 0x55
 80189e2:	0008      	movs	r0, r1
 80189e4:	f7fd fff6 	bl	80169d4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 80189e8:	2055      	movs	r0, #85	@ 0x55
        break;
    }

    /* Return completion status.  */
    return(status);
}
 80189ea:	bd10      	pop	{r4, pc}
    switch(function)
 80189ec:	380a      	subs	r0, #10
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80189ee:	69db      	ldr	r3, [r3, #28]
    switch(function)
 80189f0:	280b      	cmp	r0, #11
 80189f2:	d83a      	bhi.n	8018a6a <_ux_dcd_stm32_function+0x9a>
 80189f4:	f7e7 fb9a 	bl	800012c <__gnu_thumb1_case_uqi>
 80189f8:	0e0a3906 	.word	0x0e0a3906
 80189fc:	221a1612 	.word	0x221a1612
 8018a00:	311e2835 	.word	0x311e2835
        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 8018a04:	0018      	movs	r0, r3
 8018a06:	f7ff ffe1 	bl	80189cc <_ux_dcd_stm32_frame_number_get>
        break;
 8018a0a:	e7ee      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8018a0c:	0018      	movs	r0, r3
 8018a0e:	f000 f8cf 	bl	8018bb0 <_ux_dcd_stm32_transfer_run>
        break;
 8018a12:	e7ea      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8018a14:	0018      	movs	r0, r3
 8018a16:	f000 f8bd 	bl	8018b94 <_ux_dcd_stm32_transfer_abort>
        break;
 8018a1a:	e7e6      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8018a1c:	0018      	movs	r0, r3
 8018a1e:	f7ff ff47 	bl	80188b0 <_ux_dcd_stm32_endpoint_create>
        break;
 8018a22:	e7e2      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8018a24:	0018      	movs	r0, r3
 8018a26:	f7ff ff7c 	bl	8018922 <_ux_dcd_stm32_endpoint_destroy>
        break;
 8018a2a:	e7de      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8018a2c:	0018      	movs	r0, r3
 8018a2e:	f7ff ff83 	bl	8018938 <_ux_dcd_stm32_endpoint_reset>
        break;
 8018a32:	e7da      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8018a34:	0018      	movs	r0, r3
 8018a36:	f7ff ff9d 	bl	8018974 <_ux_dcd_stm32_endpoint_stall>
        break;
 8018a3a:	e7d6      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8018a3c:	3394      	adds	r3, #148	@ 0x94
 8018a3e:	6818      	ldr	r0, [r3, #0]
 8018a40:	b2c9      	uxtb	r1, r1
 8018a42:	f7f7 faa5 	bl	800ff90 <HAL_PCD_SetAddress>
        break;
 8018a46:	e7d0      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8018a48:	290b      	cmp	r1, #11
 8018a4a:	d001      	beq.n	8018a50 <_ux_dcd_stm32_function+0x80>
        status = UX_SUCCESS;
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	e7cc      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8018a50:	3394      	adds	r3, #148	@ 0x94
 8018a52:	6818      	ldr	r0, [r3, #0]
 8018a54:	f7f7 fa89 	bl	800ff6a <HAL_PCD_Stop>
 8018a58:	e7c7      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8018a5a:	0018      	movs	r0, r3
 8018a5c:	f7ff ff99 	bl	8018992 <_ux_dcd_stm32_endpoint_status>
        break;
 8018a60:	e7c3      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>
        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 8018a62:	0018      	movs	r0, r3
 8018a64:	f7ff fd98 	bl	8018598 <_ux_dcd_stm32_setup_isr_pending>
        break;
 8018a68:	e7f0      	b.n	8018a4c <_ux_dcd_stm32_function+0x7c>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8018a6a:	2102      	movs	r1, #2
 8018a6c:	2254      	movs	r2, #84	@ 0x54
 8018a6e:	0008      	movs	r0, r1
 8018a70:	f7fd ffb0 	bl	80169d4 <_ux_system_error_handler>
        status =  UX_FUNCTION_NOT_SUPPORTED;
 8018a74:	2054      	movs	r0, #84	@ 0x54
        break;
 8018a76:	e7b8      	b.n	80189ea <_ux_dcd_stm32_function+0x1a>

08018a78 <_ux_dcd_stm32_initialize>:


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018a78:	4b0c      	ldr	r3, [pc, #48]	@ (8018aac <_ux_dcd_stm32_initialize+0x34>)
{
 8018a7a:	b570      	push	{r4, r5, r6, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018a7c:	681c      	ldr	r4, [r3, #0]
{
 8018a7e:	000d      	movs	r5, r1

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8018a80:	2380      	movs	r3, #128	@ 0x80

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8018a82:	2100      	movs	r1, #0
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8018a84:	6063      	str	r3, [r4, #4]
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8018a86:	2298      	movs	r2, #152	@ 0x98
 8018a88:	0008      	movs	r0, r1
 8018a8a:	f7fe f863 	bl	8016b54 <_ux_utility_memory_allocate>
 8018a8e:	0003      	movs	r3, r0

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
        return(UX_MEMORY_INSUFFICIENT);
 8018a90:	2012      	movs	r0, #18
    if(dcd_stm32 == UX_NULL)
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d008      	beq.n	8018aa8 <_ux_dcd_stm32_initialize+0x30>

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8018a96:	4a06      	ldr	r2, [pc, #24]	@ (8018ab0 <_ux_dcd_stm32_initialize+0x38>)
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 8018a98:	61e3      	str	r3, [r4, #28]
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8018a9a:	601c      	str	r4, [r3, #0]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8018a9c:	3394      	adds	r3, #148	@ 0x94
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8018a9e:	61a2      	str	r2, [r4, #24]
    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8018aa0:	601d      	str	r5, [r3, #0]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8018aa2:	2301      	movs	r3, #1

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8018aa4:	2000      	movs	r0, #0
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8018aa6:	6023      	str	r3, [r4, #0]
}
 8018aa8:	bd70      	pop	{r4, r5, r6, pc}
 8018aaa:	46c0      	nop			@ (mov r8, r8)
 8018aac:	200030e0 	.word	0x200030e0
 8018ab0:	080189d1 	.word	0x080189d1

08018ab4 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8018ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018ab6:	4e34      	ldr	r6, [pc, #208]	@ (8018b88 <_ux_dcd_stm32_initialize_complete+0xd4>)
 8018ab8:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018aba:	0023      	movs	r3, r4
 8018abc:	0020      	movs	r0, r4
 8018abe:	33fc      	adds	r3, #252	@ 0xfc
 8018ac0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018ac2:	69e7      	ldr	r7, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018ac4:	30cc      	adds	r0, #204	@ 0xcc
 8018ac6:	2a01      	cmp	r2, #1
 8018ac8:	d14a      	bne.n	8018b60 <_ux_dcd_stm32_initialize_complete+0xac>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8018aca:	3b08      	subs	r3, #8
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	6003      	str	r3, [r0, #0]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8018ad0:	0023      	movs	r3, r4
 8018ad2:	33f8      	adds	r3, #248	@ 0xf8
 8018ad4:	0022      	movs	r2, r4
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8018ad6:	681b      	ldr	r3, [r3, #0]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8018ad8:	32d0      	adds	r2, #208	@ 0xd0
 8018ada:	6013      	str	r3, [r2, #0]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8018adc:	0023      	movs	r3, r4
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8018ade:	3a84      	subs	r2, #132	@ 0x84
    _ux_utility_descriptor_parse(device_framework,
 8018ae0:	492a      	ldr	r1, [pc, #168]	@ (8018b8c <_ux_dcd_stm32_initialize_complete+0xd8>)
 8018ae2:	6800      	ldr	r0, [r0, #0]
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8018ae4:	3328      	adds	r3, #40	@ 0x28
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8018ae6:	9201      	str	r2, [sp, #4]
    _ux_utility_descriptor_parse(device_framework,
 8018ae8:	220e      	movs	r2, #14
 8018aea:	f7fd ffda 	bl	8016aa2 <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8018aee:	0023      	movs	r3, r4
 8018af0:	4a27      	ldr	r2, [pc, #156]	@ (8018b90 <_ux_dcd_stm32_initialize_complete+0xdc>)
 8018af2:	3390      	adds	r3, #144	@ 0x90
 8018af4:	601a      	str	r2, [r3, #0]
    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018af6:	0022      	movs	r2, r4

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018af8:	0025      	movs	r5, r4
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8018afa:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018afc:	323c      	adds	r2, #60	@ 0x3c
 8018afe:	6662      	str	r2, [r4, #100]	@ 0x64
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8018b00:	66e3      	str	r3, [r4, #108]	@ 0x6c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018b02:	352f      	adds	r5, #47	@ 0x2f
 8018b04:	782b      	ldrb	r3, [r5, #0]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018b06:	9901      	ldr	r1, [sp, #4]
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8018b08:	3794      	adds	r7, #148	@ 0x94
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018b0a:	800b      	strh	r3, [r1, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8018b0c:	0020      	movs	r0, r4
 8018b0e:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018b10:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8018b12:	69a3      	ldr	r3, [r4, #24]
 8018b14:	4798      	blx	r3
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8018b16:	2100      	movs	r1, #0
 8018b18:	6838      	ldr	r0, [r7, #0]
 8018b1a:	f7f7 ff94 	bl	8010a46 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8018b1e:	2300      	movs	r3, #0
 8018b20:	782a      	ldrb	r2, [r5, #0]
 8018b22:	0019      	movs	r1, r3
 8018b24:	6838      	ldr	r0, [r7, #0]
 8018b26:	f7f7 fe91 	bl	801084c <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8018b2a:	2180      	movs	r1, #128	@ 0x80
 8018b2c:	6838      	ldr	r0, [r7, #0]
 8018b2e:	f7f7 ff8a 	bl	8010a46 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8018b32:	2300      	movs	r3, #0
 8018b34:	782a      	ldrb	r2, [r5, #0]
 8018b36:	2180      	movs	r1, #128	@ 0x80
 8018b38:	6838      	ldr	r0, [r7, #0]
 8018b3a:	f7f7 fe87 	bl	801084c <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8018b3e:	2300      	movs	r3, #0

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8018b40:	2001      	movs	r0, #1

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8018b42:	2208      	movs	r2, #8
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8018b44:	6423      	str	r3, [r4, #64]	@ 0x40
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8018b46:	6763      	str	r3, [r4, #116]	@ 0x74

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018b48:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8018b4a:	6620      	str	r0, [r4, #96]	@ 0x60
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018b4c:	33fc      	adds	r3, #252	@ 0xfc
 8018b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8018b50:	65e0      	str	r0, [r4, #92]	@ 0x5c
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8018b52:	6722      	str	r2, [r4, #112]	@ 0x70
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8018b54:	67a2      	str	r2, [r4, #120]	@ 0x78
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d000      	beq.n	8018b5c <_ux_dcd_stm32_initialize_complete+0xa8>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8018b5a:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
 8018b5c:	2000      	movs	r0, #0
 8018b5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8018b60:	2200      	movs	r2, #0
 8018b62:	665a      	str	r2, [r3, #100]	@ 0x64
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 8018b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d106      	bne.n	8018b78 <_ux_dcd_stm32_initialize_complete+0xc4>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8018b6a:	0023      	movs	r3, r4
 8018b6c:	33d4      	adds	r3, #212	@ 0xd4
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	6003      	str	r3, [r0, #0]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8018b72:	0023      	movs	r3, r4
 8018b74:	33d8      	adds	r3, #216	@ 0xd8
 8018b76:	e7ad      	b.n	8018ad4 <_ux_dcd_stm32_initialize_complete+0x20>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8018b78:	0023      	movs	r3, r4
 8018b7a:	33dc      	adds	r3, #220	@ 0xdc
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	6003      	str	r3, [r0, #0]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8018b80:	0023      	movs	r3, r4
 8018b82:	33e0      	adds	r3, #224	@ 0xe0
 8018b84:	e7a6      	b.n	8018ad4 <_ux_dcd_stm32_initialize_complete+0x20>
 8018b86:	46c0      	nop			@ (mov r8, r8)
 8018b88:	200030e0 	.word	0x200030e0
 8018b8c:	2000024b 	.word	0x2000024b
 8018b90:	0000fde8 	.word	0x0000fde8

08018b94 <_ux_dcd_stm32_transfer_abort>:


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018b94:	3094      	adds	r0, #148	@ 0x94
{
 8018b96:	b570      	push	{r4, r5, r6, lr}
    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018b98:	0004      	movs	r4, r0
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018b9a:	688d      	ldr	r5, [r1, #8]
    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018b9c:	6800      	ldr	r0, [r0, #0]
 8018b9e:	7ba9      	ldrb	r1, [r5, #14]
 8018ba0:	f7f7 ff3f 	bl	8010a22 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018ba4:	7ba9      	ldrb	r1, [r5, #14]
 8018ba6:	6820      	ldr	r0, [r4, #0]
 8018ba8:	f7f7 ff4d 	bl	8010a46 <HAL_PCD_EP_Flush>
    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
}
 8018bac:	2000      	movs	r0, #0
 8018bae:	bd70      	pop	{r4, r5, r6, pc}

08018bb0 <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8018bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018bb2:	688f      	ldr	r7, [r1, #8]
{
 8018bb4:	000c      	movs	r4, r1

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018bb6:	68be      	ldr	r6, [r7, #8]
{
 8018bb8:	9001      	str	r0, [sp, #4]

    UX_DISABLE
 8018bba:	f000 f9f9 	bl	8018fb0 <_ux_utility_interrupt_disable>

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8018c28 <_ux_dcd_stm32_transfer_run+0x78>)
    UX_DISABLE
 8018bc0:	0005      	movs	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018bc2:	6812      	ldr	r2, [r2, #0]
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8018bc4:	6873      	ldr	r3, [r6, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018bc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8018bc8:	2a00      	cmp	r2, #0
 8018bca:	d105      	bne.n	8018bd8 <_ux_dcd_stm32_transfer_run+0x28>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8018bcc:	2326      	movs	r3, #38	@ 0x26
 8018bce:	6263      	str	r3, [r4, #36]	@ 0x24
        UX_RESTORE
 8018bd0:	f000 f9f2 	bl	8018fb8 <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 8018bd4:	2001      	movs	r0, #1
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
    return(UX_STATE_WAIT);
}
 8018bd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 8018bd8:	075a      	lsls	r2, r3, #29
 8018bda:	d506      	bpl.n	8018bea <_ux_dcd_stm32_transfer_run+0x3a>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 8018bdc:	2321      	movs	r3, #33	@ 0x21
 8018bde:	6263      	str	r3, [r4, #36]	@ 0x24
            UX_RESTORE
 8018be0:	0028      	movs	r0, r5
 8018be2:	f000 f9e9 	bl	8018fb8 <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 8018be6:	2004      	movs	r0, #4
 8018be8:	e7f5      	b.n	8018bd6 <_ux_dcd_stm32_transfer_run+0x26>
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 8018bea:	2202      	movs	r2, #2
 8018bec:	4213      	tst	r3, r2
 8018bee:	d005      	beq.n	8018bfc <_ux_dcd_stm32_transfer_run+0x4c>
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 8018bf0:	071a      	lsls	r2, r3, #28
 8018bf2:	d510      	bpl.n	8018c16 <_ux_dcd_stm32_transfer_run+0x66>
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 8018bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8018c2c <_ux_dcd_stm32_transfer_run+0x7c>)
 8018bf6:	4013      	ands	r3, r2
 8018bf8:	6073      	str	r3, [r6, #4]
 8018bfa:	e7f1      	b.n	8018be0 <_ux_dcd_stm32_transfer_run+0x30>
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8018bfc:	431a      	orrs	r2, r3
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018bfe:	9b01      	ldr	r3, [sp, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8018c00:	6072      	str	r2, [r6, #4]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018c02:	3394      	adds	r3, #148	@ 0x94
 8018c04:	6818      	ldr	r0, [r3, #0]
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8018c06:	68e2      	ldr	r2, [r4, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018c08:	6963      	ldr	r3, [r4, #20]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8018c0a:	6aa4      	ldr	r4, [r4, #40]	@ 0x28
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018c0c:	7bb9      	ldrb	r1, [r7, #14]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8018c0e:	2c03      	cmp	r4, #3
 8018c10:	d106      	bne.n	8018c20 <_ux_dcd_stm32_transfer_run+0x70>
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018c12:	f7f7 fe92 	bl	801093a <HAL_PCD_EP_Transmit>
    UX_RESTORE
 8018c16:	0028      	movs	r0, r5
 8018c18:	f000 f9ce 	bl	8018fb8 <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 8018c1c:	2005      	movs	r0, #5
 8018c1e:	e7da      	b.n	8018bd6 <_ux_dcd_stm32_transfer_run+0x26>
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8018c20:	f7f7 fe68 	bl	80108f4 <HAL_PCD_EP_Receive>
 8018c24:	e7f7      	b.n	8018c16 <_ux_dcd_stm32_transfer_run+0x66>
 8018c26:	46c0      	nop			@ (mov r8, r8)
 8018c28:	200030e0 	.word	0x200030e0
 8018c2c:	00000405 	.word	0x00000405

08018c30 <tpdf_draw_colored_text>:
 * @param g           The green color component (0.0 to 1.0).
 * @param b           The blue color component (0.0 to 1.0).
 * @param text        The text string to write.
 */
UINT tpdf_draw_colored_text(FIL* file_p, int x, int y, const char* font_name, int font_size, \
                            float r, float g, float b, const char* text) {
 8018c30:	b530      	push	{r4, r5, lr}
 8018c32:	4c18      	ldr	r4, [pc, #96]	@ (8018c94 <tpdf_draw_colored_text+0x64>)
 8018c34:	0005      	movs	r5, r0
 8018c36:	44a5      	add	sp, r4
    // Tj = Show Text (draw the string)
    // ET = End Text block
    char buffer[512];
    UINT len =0;

    snprintf(buffer, sizeof(buffer), "BT %.2f %.2f %.2f rg /%s %d Tf %d %d Td (%s) Tj ET\n", \
 8018c38:	9894      	ldr	r0, [sp, #592]	@ 0x250
 8018c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c3c:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 8018c3e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018c40:	9893      	ldr	r0, [sp, #588]	@ 0x24c
 8018c42:	9306      	str	r3, [sp, #24]
 8018c44:	9207      	str	r2, [sp, #28]
 8018c46:	9108      	str	r1, [sp, #32]
 8018c48:	f7ea fda6 	bl	8003798 <__aeabi_f2d>
 8018c4c:	9004      	str	r0, [sp, #16]
 8018c4e:	9105      	str	r1, [sp, #20]
 8018c50:	9892      	ldr	r0, [sp, #584]	@ 0x248
 8018c52:	f7ea fda1 	bl	8003798 <__aeabi_f2d>
 8018c56:	9002      	str	r0, [sp, #8]
 8018c58:	9103      	str	r1, [sp, #12]
 8018c5a:	9891      	ldr	r0, [sp, #580]	@ 0x244
 8018c5c:	f7ea fd9c 	bl	8003798 <__aeabi_f2d>
 8018c60:	9000      	str	r0, [sp, #0]
 8018c62:	9101      	str	r1, [sp, #4]
 8018c64:	2180      	movs	r1, #128	@ 0x80
 8018c66:	4c0c      	ldr	r4, [pc, #48]	@ (8018c98 <tpdf_draw_colored_text+0x68>)
 8018c68:	0089      	lsls	r1, r1, #2
 8018c6a:	0022      	movs	r2, r4
 8018c6c:	a80c      	add	r0, sp, #48	@ 0x30
 8018c6e:	f001 faef 	bl	801a250 <sniprintf>
             r, g, b, font_name, font_size, x, y, text);
    len = strlen(buffer);
 8018c72:	a80c      	add	r0, sp, #48	@ 0x30
 8018c74:	f7e7 fa48 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018c78:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018c7a:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018c7c:	a80c      	add	r0, sp, #48	@ 0x30
 8018c7e:	f7fc ff0b 	bl	8015a98 <f_puts>
 8018c82:	2800      	cmp	r0, #0
 8018c84:	da01      	bge.n	8018c8a <tpdf_draw_colored_text+0x5a>
        return -1;
 8018c86:	2401      	movs	r4, #1
 8018c88:	4264      	negs	r4, r4
    }
    return len;
}
 8018c8a:	0020      	movs	r0, r4
 8018c8c:	238d      	movs	r3, #141	@ 0x8d
 8018c8e:	009b      	lsls	r3, r3, #2
 8018c90:	449d      	add	sp, r3
 8018c92:	bd30      	pop	{r4, r5, pc}
 8018c94:	fffffdcc 	.word	0xfffffdcc
 8018c98:	08020012 	.word	0x08020012

08018c9c <tpdf_draw_line>:

UINT tpdf_draw_line(FIL* file_p, int x1, int y1, int x2, int y2, float line_width, float r, float g, float b){
 8018c9c:	b530      	push	{r4, r5, lr}
 8018c9e:	b0ad      	sub	sp, #180	@ 0xb4
 8018ca0:	0005      	movs	r5, r0
    char buffer[128];
    UINT len = 0;

    snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f RG %.2f w %d %d m %d %d l S\n",r,g,b,line_width, x1, y1, x2, y2);
 8018ca2:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8018ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ca6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018ca8:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8018caa:	9209      	str	r2, [sp, #36]	@ 0x24
 8018cac:	9108      	str	r1, [sp, #32]
 8018cae:	f7ea fd73 	bl	8003798 <__aeabi_f2d>
 8018cb2:	9006      	str	r0, [sp, #24]
 8018cb4:	9107      	str	r1, [sp, #28]
 8018cb6:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8018cb8:	f7ea fd6e 	bl	8003798 <__aeabi_f2d>
 8018cbc:	9004      	str	r0, [sp, #16]
 8018cbe:	9105      	str	r1, [sp, #20]
 8018cc0:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8018cc2:	f7ea fd69 	bl	8003798 <__aeabi_f2d>
 8018cc6:	9002      	str	r0, [sp, #8]
 8018cc8:	9103      	str	r1, [sp, #12]
 8018cca:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8018ccc:	f7ea fd64 	bl	8003798 <__aeabi_f2d>
 8018cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8018d00 <tpdf_draw_line+0x64>)
 8018cd2:	9000      	str	r0, [sp, #0]
 8018cd4:	9101      	str	r1, [sp, #4]
 8018cd6:	0022      	movs	r2, r4
 8018cd8:	2180      	movs	r1, #128	@ 0x80
 8018cda:	a80c      	add	r0, sp, #48	@ 0x30
 8018cdc:	f001 fab8 	bl	801a250 <sniprintf>
    len = strlen(buffer);
 8018ce0:	a80c      	add	r0, sp, #48	@ 0x30
 8018ce2:	f7e7 fa11 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018ce6:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018ce8:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018cea:	a80c      	add	r0, sp, #48	@ 0x30
 8018cec:	f7fc fed4 	bl	8015a98 <f_puts>
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	da01      	bge.n	8018cf8 <tpdf_draw_line+0x5c>
        return -1;
 8018cf4:	2401      	movs	r4, #1
 8018cf6:	4264      	negs	r4, r4
    }

    return len;
}
 8018cf8:	0020      	movs	r0, r4
 8018cfa:	b02d      	add	sp, #180	@ 0xb4
 8018cfc:	bd30      	pop	{r4, r5, pc}
 8018cfe:	46c0      	nop			@ (mov r8, r8)
 8018d00:	08020046 	.word	0x08020046

08018d04 <tpdf_draw_simple_dashed_line>:
 * @param r           The red color component (0.0 to 1.0).
 * @param g           The green color component (0.0 to 1.0).
 * @param b           The blue color component (0.0 to 1.0).
 * @param dash_length The length of both the dash and the gap.
 */
UINT tpdf_draw_simple_dashed_line(FIL* file_p, int x1, int y1, int x2, int y2, float line_width, float r, float g, float b, int dash_length) {
 8018d04:	b570      	push	{r4, r5, r6, lr}
 8018d06:	b0ae      	sub	sp, #184	@ 0xb8
 8018d08:	0005      	movs	r5, r0
 8018d0a:	9837      	ldr	r0, [sp, #220]	@ 0xdc
    char buffer[128];
    UINT len = 0;

    snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f RG %.2f w [%d %d] 0 d %d %d m %d %d l S\n[] 0 d\n",
 8018d0c:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 8018d0e:	9009      	str	r0, [sp, #36]	@ 0x24
 8018d10:	9008      	str	r0, [sp, #32]
 8018d12:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8018d14:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d16:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018d18:	960d      	str	r6, [sp, #52]	@ 0x34
 8018d1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8018d1c:	f7ea fd3c 	bl	8003798 <__aeabi_f2d>
 8018d20:	9006      	str	r0, [sp, #24]
 8018d22:	9107      	str	r1, [sp, #28]
 8018d24:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8018d26:	f7ea fd37 	bl	8003798 <__aeabi_f2d>
 8018d2a:	9004      	str	r0, [sp, #16]
 8018d2c:	9105      	str	r1, [sp, #20]
 8018d2e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8018d30:	f7ea fd32 	bl	8003798 <__aeabi_f2d>
 8018d34:	9002      	str	r0, [sp, #8]
 8018d36:	9103      	str	r1, [sp, #12]
 8018d38:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8018d3a:	f7ea fd2d 	bl	8003798 <__aeabi_f2d>
 8018d3e:	4c0b      	ldr	r4, [pc, #44]	@ (8018d6c <tpdf_draw_simple_dashed_line+0x68>)
 8018d40:	9000      	str	r0, [sp, #0]
 8018d42:	9101      	str	r1, [sp, #4]
 8018d44:	0022      	movs	r2, r4
 8018d46:	2180      	movs	r1, #128	@ 0x80
 8018d48:	a80e      	add	r0, sp, #56	@ 0x38
 8018d4a:	f001 fa81 	bl	801a250 <sniprintf>
                         r, g, b, line_width, dash_length, dash_length, x1, y1, x2, y2);
    len = strlen(buffer);
 8018d4e:	a80e      	add	r0, sp, #56	@ 0x38
 8018d50:	f7e7 f9da 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018d54:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018d56:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018d58:	a80e      	add	r0, sp, #56	@ 0x38
 8018d5a:	f7fc fe9d 	bl	8015a98 <f_puts>
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	da01      	bge.n	8018d66 <tpdf_draw_simple_dashed_line+0x62>
        return -1;
 8018d62:	2401      	movs	r4, #1
 8018d64:	4264      	negs	r4, r4
    }

    return len;
}
 8018d66:	0020      	movs	r0, r4
 8018d68:	b02e      	add	sp, #184	@ 0xb8
 8018d6a:	bd70      	pop	{r4, r5, r6, pc}
 8018d6c:	08020072 	.word	0x08020072

08018d70 <tpdf_add_new_obj>:

uint32_t tpdf_add_new_obj(FIL* file_p, int obj_num, const char* content, pdf_doc_t* pdf_monitor) {
 8018d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d72:	001d      	movs	r5, r3
 8018d74:	000e      	movs	r6, r1
 8018d76:	0004      	movs	r4, r0
 8018d78:	0017      	movs	r7, r2
    char buffer[64];
    UINT status;

    // 1. Store the current file position. This is the object's offset.
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018d7a:	68c2      	ldr	r2, [r0, #12]
uint32_t tpdf_add_new_obj(FIL* file_p, int obj_num, const char* content, pdf_doc_t* pdf_monitor) {
 8018d7c:	b091      	sub	sp, #68	@ 0x44
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018d7e:	008b      	lsls	r3, r1, #2
 8018d80:	515a      	str	r2, [r3, r5]

    // 2. Write the object header (e.g., "1 0 obj\n").
    sprintf(buffer, "%d 0 obj\n", obj_num);
 8018d82:	4668      	mov	r0, sp
 8018d84:	0032      	movs	r2, r6
 8018d86:	490a      	ldr	r1, [pc, #40]	@ (8018db0 <tpdf_add_new_obj+0x40>)
 8018d88:	f001 fa98 	bl	801a2bc <siprintf>
    status = f_puts(buffer,file_p);
 8018d8c:	0021      	movs	r1, r4
 8018d8e:	4668      	mov	r0, sp
 8018d90:	f7fc fe82 	bl	8015a98 <f_puts>
    if (status < 0) return status;

    // 3. Write the main content of the object.
    status = f_puts(content,file_p);
 8018d94:	0021      	movs	r1, r4
 8018d96:	0038      	movs	r0, r7
 8018d98:	f7fc fe7e 	bl	8015a98 <f_puts>
    if (status < 0) return status;

    // 4. Write the object footer.
    status = f_puts("\nendobj\n",file_p);
 8018d9c:	0021      	movs	r1, r4
 8018d9e:	4805      	ldr	r0, [pc, #20]	@ (8018db4 <tpdf_add_new_obj+0x44>)
 8018da0:	f7fc fe7a 	bl	8015a98 <f_puts>
	pdf_monitor->num_objs += 1;
 8018da4:	4a04      	ldr	r2, [pc, #16]	@ (8018db8 <tpdf_add_new_obj+0x48>)
 8018da6:	58ab      	ldr	r3, [r5, r2]
 8018da8:	3301      	adds	r3, #1
 8018daa:	50ab      	str	r3, [r5, r2]

    return status;
}
 8018dac:	b011      	add	sp, #68	@ 0x44
 8018dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018db0:	080200b1 	.word	0x080200b1
 8018db4:	080200e9 	.word	0x080200e9
 8018db8:	00000404 	.word	0x00000404

08018dbc <tpdf_start_new_stream_obj>:

uint32_t tpdf_start_new_stream_obj(FIL* file_p, int obj_num,int obj_length_num, pdf_doc_t* pdf_monitor) {
 8018dbc:	b530      	push	{r4, r5, lr}
 8018dbe:	0005      	movs	r5, r0
 8018dc0:	001c      	movs	r4, r3
 8018dc2:	0008      	movs	r0, r1
    char buffer[64];
    UINT status;

    // 1. Store the current file position. This is the object's offset.
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018dc4:	008b      	lsls	r3, r1, #2
 8018dc6:	68e9      	ldr	r1, [r5, #12]
uint32_t tpdf_start_new_stream_obj(FIL* file_p, int obj_num,int obj_length_num, pdf_doc_t* pdf_monitor) {
 8018dc8:	b091      	sub	sp, #68	@ 0x44
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018dca:	5119      	str	r1, [r3, r4]

    sprintf(buffer, "%d 0 obj\n<</Length %d 0 R\n>>\nstream\n", obj_num, obj_length_num);
 8018dcc:	0013      	movs	r3, r2
 8018dce:	4907      	ldr	r1, [pc, #28]	@ (8018dec <tpdf_start_new_stream_obj+0x30>)
 8018dd0:	0002      	movs	r2, r0
 8018dd2:	4668      	mov	r0, sp
 8018dd4:	f001 fa72 	bl	801a2bc <siprintf>
    status = f_puts(buffer,file_p);
 8018dd8:	0029      	movs	r1, r5
 8018dda:	4668      	mov	r0, sp
 8018ddc:	f7fc fe5c 	bl	8015a98 <f_puts>
    if (status < 0) return status;
    pdf_monitor->num_objs++;
 8018de0:	4a03      	ldr	r2, [pc, #12]	@ (8018df0 <tpdf_start_new_stream_obj+0x34>)
 8018de2:	58a3      	ldr	r3, [r4, r2]
 8018de4:	3301      	adds	r3, #1
 8018de6:	50a3      	str	r3, [r4, r2]

    return status;
}
 8018de8:	b011      	add	sp, #68	@ 0x44
 8018dea:	bd30      	pop	{r4, r5, pc}
 8018dec:	080200bb 	.word	0x080200bb
 8018df0:	00000404 	.word	0x00000404

08018df4 <tpdf_end_new_stream_obj>:

uint32_t tpdf_end_new_stream_obj(FIL* file_p, int obj_length_num, int stream_length, pdf_doc_t* pdf_monitor) {
 8018df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018df6:	0004      	movs	r4, r0
 8018df8:	b08b      	sub	sp, #44	@ 0x2c
 8018dfa:	000e      	movs	r6, r1
    char buffer[32];
    UINT status;
    char * end_stream = "endstream\nendobj\n";
    status = f_puts(end_stream,file_p);
 8018dfc:	480a      	ldr	r0, [pc, #40]	@ (8018e28 <tpdf_end_new_stream_obj+0x34>)
 8018dfe:	0021      	movs	r1, r4
uint32_t tpdf_end_new_stream_obj(FIL* file_p, int obj_length_num, int stream_length, pdf_doc_t* pdf_monitor) {
 8018e00:	9301      	str	r3, [sp, #4]
 8018e02:	0017      	movs	r7, r2
    status = f_puts(end_stream,file_p);
 8018e04:	f7fc fe48 	bl	8015a98 <f_puts>
 8018e08:	0005      	movs	r5, r0
    if (status < 0) return status;
    sprintf(buffer, "%d", stream_length);
 8018e0a:	003a      	movs	r2, r7
 8018e0c:	4907      	ldr	r1, [pc, #28]	@ (8018e2c <tpdf_end_new_stream_obj+0x38>)
 8018e0e:	a802      	add	r0, sp, #8
 8018e10:	f001 fa54 	bl	801a2bc <siprintf>
    tpdf_add_new_obj(file_p,obj_length_num,buffer,pdf_monitor);
 8018e14:	0031      	movs	r1, r6
 8018e16:	0020      	movs	r0, r4
 8018e18:	9b01      	ldr	r3, [sp, #4]
 8018e1a:	aa02      	add	r2, sp, #8
 8018e1c:	f7ff ffa8 	bl	8018d70 <tpdf_add_new_obj>
    return status;
}
 8018e20:	0028      	movs	r0, r5
 8018e22:	b00b      	add	sp, #44	@ 0x2c
 8018e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e26:	46c0      	nop			@ (mov r8, r8)
 8018e28:	080200e0 	.word	0x080200e0
 8018e2c:	0801fcb5 	.word	0x0801fcb5

08018e30 <USBD_ChangeFunction>:
  /* USER CODE BEGIN USBD_ChangeFunction1 */

  /* USER CODE END USBD_ChangeFunction1 */

  return status;
}
 8018e30:	2000      	movs	r0, #0
 8018e32:	4770      	bx	lr

08018e34 <MX_USBX_Device_Init>:
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8018e34:	2300      	movs	r3, #0
 8018e36:	21c0      	movs	r1, #192	@ 0xc0
{
 8018e38:	b570      	push	{r4, r5, r6, lr}
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8018e3a:	001a      	movs	r2, r3
 8018e3c:	4845      	ldr	r0, [pc, #276]	@ (8018f54 <MX_USBX_Device_Init+0x120>)
{
 8018e3e:	b08a      	sub	sp, #40	@ 0x28
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8018e40:	0189      	lsls	r1, r1, #6
 8018e42:	f7fd fe23 	bl	8016a8c <_uxe_system_initialize>
 8018e46:	1e04      	subs	r4, r0, #0
 8018e48:	d002      	beq.n	8018e50 <MX_USBX_Device_Init+0x1c>
    return UX_ERROR;
 8018e4a:	20ff      	movs	r0, #255	@ 0xff
}
 8018e4c:	b00a      	add	sp, #40	@ 0x28
 8018e4e:	bd70      	pop	{r4, r5, r6, pc}
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 8018e50:	a906      	add	r1, sp, #24
 8018e52:	2001      	movs	r0, #1
 8018e54:	f000 fb4c 	bl	80194f0 <USBD_Get_Device_Framework_Speed>
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8018e58:	a907      	add	r1, sp, #28
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 8018e5a:	0005      	movs	r5, r0
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8018e5c:	0020      	movs	r0, r4
 8018e5e:	f000 fb47 	bl	80194f0 <USBD_Get_Device_Framework_Speed>
 8018e62:	0004      	movs	r4, r0
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8018e64:	a808      	add	r0, sp, #32
 8018e66:	f000 fb61 	bl	801952c <USBD_Get_String_Framework>
 8018e6a:	0006      	movs	r6, r0
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 8018e6c:	a809      	add	r0, sp, #36	@ 0x24
 8018e6e:	f000 fbab 	bl	80195c8 <USBD_Get_Language_Id_Framework>
  if (ux_device_stack_initialize(device_framework_high_speed,
 8018e72:	4b39      	ldr	r3, [pc, #228]	@ (8018f58 <MX_USBX_Device_Init+0x124>)
 8018e74:	9002      	str	r0, [sp, #8]
 8018e76:	9304      	str	r3, [sp, #16]
 8018e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e7a:	0028      	movs	r0, r5
 8018e7c:	9303      	str	r3, [sp, #12]
 8018e7e:	9b08      	ldr	r3, [sp, #32]
 8018e80:	0022      	movs	r2, r4
 8018e82:	9301      	str	r3, [sp, #4]
 8018e84:	9906      	ldr	r1, [sp, #24]
 8018e86:	9b07      	ldr	r3, [sp, #28]
 8018e88:	9600      	str	r6, [sp, #0]
 8018e8a:	f7fd fb2b 	bl	80164e4 <_ux_device_stack_initialize>
 8018e8e:	1e05      	subs	r5, r0, #0
 8018e90:	d1db      	bne.n	8018e4a <MX_USBX_Device_Init+0x16>
  custom_hid_parameter.ux_slave_class_hid_instance_activate         = USBD_Custom_HID_Activate;
 8018e92:	4c32      	ldr	r4, [pc, #200]	@ (8018f5c <MX_USBX_Device_Init+0x128>)
 8018e94:	4b32      	ldr	r3, [pc, #200]	@ (8018f60 <MX_USBX_Device_Init+0x12c>)
 8018e96:	6023      	str	r3, [r4, #0]
  custom_hid_parameter.ux_slave_class_hid_instance_deactivate       = USBD_Custom_HID_Deactivate;
 8018e98:	4b32      	ldr	r3, [pc, #200]	@ (8018f64 <MX_USBX_Device_Init+0x130>)
 8018e9a:	6063      	str	r3, [r4, #4]
  custom_hid_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_CUSTOM);
 8018e9c:	f000 fbbc 	bl	8019618 <USBD_HID_ReportDesc>
 8018ea0:	60a0      	str	r0, [r4, #8]
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8018ea2:	0028      	movs	r0, r5
 8018ea4:	f000 fbc2 	bl	801962c <USBD_HID_ReportDesc_length>
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 8018ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8018f68 <MX_USBX_Device_Init+0x134>)
  custom_hid_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8018eaa:	60e5      	str	r5, [r4, #12]
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 8018eac:	6163      	str	r3, [r4, #20]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 8018eae:	4b2f      	ldr	r3, [pc, #188]	@ (8018f6c <MX_USBX_Device_Init+0x138>)
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8018eb0:	6120      	str	r0, [r4, #16]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 8018eb2:	61a3      	str	r3, [r4, #24]
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_initialize       = ux_device_class_hid_receiver_initialize;
 8018eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8018f70 <MX_USBX_Device_Init+0x13c>)
 8018eb6:	6263      	str	r3, [r4, #36]	@ 0x24
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_number = USBD_Custom_HID_EventMaxNumber();
 8018eb8:	f000 f914 	bl	80190e4 <USBD_Custom_HID_EventMaxNumber>
 8018ebc:	62a0      	str	r0, [r4, #40]	@ 0x28
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 8018ebe:	f000 f919 	bl	80190f4 <USBD_Custom_HID_EventMaxLength>
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 8018ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8018f74 <MX_USBX_Device_Init+0x140>)
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ec4:	0029      	movs	r1, r5
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 8018ec6:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ec8:	2001      	movs	r0, #1
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 8018eca:	6323      	str	r3, [r4, #48]	@ 0x30
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ecc:	f000 fba2 	bl	8019614 <USBD_Get_Configuration_Number>
 8018ed0:	4e29      	ldr	r6, [pc, #164]	@ (8018f78 <MX_USBX_Device_Init+0x144>)
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ed2:	0029      	movs	r1, r5
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ed4:	6030      	str	r0, [r6, #0]
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ed6:	2001      	movs	r0, #1
 8018ed8:	f000 fb86 	bl	80195e8 <USBD_Get_Interface_Number>
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8018edc:	4d27      	ldr	r5, [pc, #156]	@ (8018f7c <MX_USBX_Device_Init+0x148>)
 8018ede:	9400      	str	r4, [sp, #0]
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018ee0:	0003      	movs	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8018ee2:	4927      	ldr	r1, [pc, #156]	@ (8018f80 <MX_USBX_Device_Init+0x14c>)
 8018ee4:	0028      	movs	r0, r5
 8018ee6:	6832      	ldr	r2, [r6, #0]
 8018ee8:	f7fc ff18 	bl	8015d1c <_ux_device_stack_class_register>
 8018eec:	1e05      	subs	r5, r0, #0
 8018eee:	d1ac      	bne.n	8018e4a <MX_USBX_Device_Init+0x16>
  storage_parameter.ux_slave_class_storage_instance_activate   = USBD_STORAGE_Activate;
 8018ef0:	4c24      	ldr	r4, [pc, #144]	@ (8018f84 <MX_USBX_Device_Init+0x150>)
 8018ef2:	4b25      	ldr	r3, [pc, #148]	@ (8018f88 <MX_USBX_Device_Init+0x154>)
 8018ef4:	6023      	str	r3, [r4, #0]
  storage_parameter.ux_slave_class_storage_instance_deactivate = USBD_STORAGE_Deactivate;
 8018ef6:	4b25      	ldr	r3, [pc, #148]	@ (8018f8c <MX_USBX_Device_Init+0x158>)
 8018ef8:	6063      	str	r3, [r4, #4]
  storage_parameter.ux_slave_class_storage_parameter_number_lun = STORAGE_NUMBER_LUN;
 8018efa:	2301      	movs	r3, #1
 8018efc:	60a3      	str	r3, [r4, #8]
    ux_slave_class_storage_media_last_lba = USBD_STORAGE_GetMediaLastLba();
 8018efe:	f000 fbd3 	bl	80196a8 <USBD_STORAGE_GetMediaLastLba>
 8018f02:	60e0      	str	r0, [r4, #12]
    ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8018f04:	f000 fbe2 	bl	80196cc <USBD_STORAGE_GetMediaBlocklength>
    ux_slave_class_storage_media_removable_flag = STORAGE_REMOVABLE_FLAG;
 8018f08:	2380      	movs	r3, #128	@ 0x80
 8018f0a:	61a3      	str	r3, [r4, #24]
    ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8018f0c:	4b20      	ldr	r3, [pc, #128]	@ (8018f90 <MX_USBX_Device_Init+0x15c>)
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018f0e:	0029      	movs	r1, r5
    ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8018f10:	6323      	str	r3, [r4, #48]	@ 0x30
    ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8018f12:	4b20      	ldr	r3, [pc, #128]	@ (8018f94 <MX_USBX_Device_Init+0x160>)
    ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8018f14:	6120      	str	r0, [r4, #16]
    ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8018f16:	6363      	str	r3, [r4, #52]	@ 0x34
    ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8018f18:	4b1f      	ldr	r3, [pc, #124]	@ (8018f98 <MX_USBX_Device_Init+0x164>)
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018f1a:	2003      	movs	r0, #3
    ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8018f1c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8018f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8018f9c <MX_USBX_Device_Init+0x168>)
    ux_slave_class_storage_media_type = 0;
 8018f20:	6165      	str	r5, [r4, #20]
    ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8018f22:	63e3      	str	r3, [r4, #60]	@ 0x3c
    ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8018f24:	4b1e      	ldr	r3, [pc, #120]	@ (8018fa0 <MX_USBX_Device_Init+0x16c>)
    ux_slave_class_storage_media_read_only_flag = STORAGE_READ_ONLY;
 8018f26:	61e5      	str	r5, [r4, #28]
    ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8018f28:	6423      	str	r3, [r4, #64]	@ 0x40
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018f2a:	f000 fb73 	bl	8019614 <USBD_Get_Configuration_Number>
 8018f2e:	4e1d      	ldr	r6, [pc, #116]	@ (8018fa4 <MX_USBX_Device_Init+0x170>)
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8018f30:	0029      	movs	r1, r5
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018f32:	6030      	str	r0, [r6, #0]
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8018f34:	2003      	movs	r0, #3
 8018f36:	f000 fb57 	bl	80195e8 <USBD_Get_Interface_Number>
  if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8018f3a:	4d1b      	ldr	r5, [pc, #108]	@ (8018fa8 <MX_USBX_Device_Init+0x174>)
 8018f3c:	9400      	str	r4, [sp, #0]
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8018f3e:	0003      	movs	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8018f40:	491a      	ldr	r1, [pc, #104]	@ (8018fac <MX_USBX_Device_Init+0x178>)
 8018f42:	0028      	movs	r0, r5
 8018f44:	6832      	ldr	r2, [r6, #0]
 8018f46:	f7fc fee9 	bl	8015d1c <_ux_device_stack_class_register>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d100      	bne.n	8018f50 <MX_USBX_Device_Init+0x11c>
 8018f4e:	e77d      	b.n	8018e4c <MX_USBX_Device_Init+0x18>
 8018f50:	e77b      	b.n	8018e4a <MX_USBX_Device_Init+0x16>
 8018f52:	46c0      	nop			@ (mov r8, r8)
 8018f54:	20003178 	.word	0x20003178
 8018f58:	08018e31 	.word	0x08018e31
 8018f5c:	2000313c 	.word	0x2000313c
 8018f60:	08019045 	.word	0x08019045
 8018f64:	0801906d 	.word	0x0801906d
 8018f68:	0801907d 	.word	0x0801907d
 8018f6c:	0801908d 	.word	0x0801908d
 8018f70:	080172b1 	.word	0x080172b1
 8018f74:	0801909d 	.word	0x0801909d
 8018f78:	20003174 	.word	0x20003174
 8018f7c:	2000020c 	.word	0x2000020c
 8018f80:	08017039 	.word	0x08017039
 8018f84:	200030e8 	.word	0x200030e8
 8018f88:	0801963b 	.word	0x0801963b
 8018f8c:	0801963d 	.word	0x0801963d
 8018f90:	08019641 	.word	0x08019641
 8018f94:	08019691 	.word	0x08019691
 8018f98:	08019699 	.word	0x08019699
 8018f9c:	0801969d 	.word	0x0801969d
 8018fa0:	080196a3 	.word	0x080196a3
 8018fa4:	20003170 	.word	0x20003170
 8018fa8:	2000021f 	.word	0x2000021f
 8018fac:	0801773b 	.word	0x0801773b

08018fb0 <_ux_utility_interrupt_disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018fb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8018fb4:	b672      	cpsid	i
}
 8018fb6:	4770      	bx	lr

08018fb8 <_ux_utility_interrupt_restore>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fb8:	f380 8810 	msr	PRIMASK, r0
}
 8018fbc:	4770      	bx	lr

08018fbe <_ux_utility_time_get>:
{
 8018fbe:	b510      	push	{r4, lr}
  time_tick = HAL_GetTick();
 8018fc0:	f7f5 f95e 	bl	800e280 <HAL_GetTick>
}
 8018fc4:	bd10      	pop	{r4, pc}
	...

08018fc8 <USB_Send_HidReport>:
UINT USB_Send_HidReport(uint8_t *report_buffer, ULONG report_len)
{
  UINT status;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8019008 <USB_Send_HidReport+0x40>)
{
 8018fca:	b530      	push	{r4, r5, lr}
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018fcc:	6812      	ldr	r2, [r2, #0]
{
 8018fce:	0003      	movs	r3, r0
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 8018fd2:	000c      	movs	r4, r1
  {
    return UX_ERROR;
 8018fd4:	20ff      	movs	r0, #255	@ 0xff
{
 8018fd6:	b095      	sub	sp, #84	@ 0x54
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018fd8:	2a03      	cmp	r2, #3
 8018fda:	d113      	bne.n	8019004 <USB_Send_HidReport+0x3c>
 8018fdc:	4d0b      	ldr	r5, [pc, #44]	@ (801900c <USB_Send_HidReport+0x44>)
 8018fde:	682a      	ldr	r2, [r5, #0]
 8018fe0:	2a00      	cmp	r2, #0
 8018fe2:	d00f      	beq.n	8019004 <USB_Send_HidReport+0x3c>
  }

  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
  {
    return UX_INVALID_PARAMETER;
 8018fe4:	3805      	subs	r0, #5
  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d00c      	beq.n	8019004 <USB_Send_HidReport+0x3c>
 8018fea:	1e4a      	subs	r2, r1, #1
 8018fec:	2a3f      	cmp	r2, #63	@ 0x3f
 8018fee:	d809      	bhi.n	8019004 <USB_Send_HidReport+0x3c>

  /*
   * Prepare the HID event for sending.
   */
  // 1. Point the event's buffer pointer to YOUR data buffer.
  ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, \
 8018ff0:	000a      	movs	r2, r1
 8018ff2:	a804      	add	r0, sp, #16
 8018ff4:	0019      	movs	r1, r3
 8018ff6:	f7fd fea3 	bl	8016d40 <_ux_utility_memory_copy>

  /*
   * 3. Send the event. This will queue the report for transmission on the
   * Interrupt IN endpoint.
   */
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 8018ffa:	6828      	ldr	r0, [r5, #0]
 8018ffc:	a901      	add	r1, sp, #4
  hid_event.ux_device_class_hid_event_length = report_len;
 8018ffe:	9403      	str	r4, [sp, #12]
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 8019000:	f7fe f876 	bl	80170f0 <_ux_device_class_hid_event_set>

  return status;
}
 8019004:	b015      	add	sp, #84	@ 0x54
 8019006:	bd30      	pop	{r4, r5, pc}
 8019008:	200030e0 	.word	0x200030e0
 801900c:	200061bc 	.word	0x200061bc

08019010 <USB_Get_HidReport>:
//	ux_utility_memory_copy(report_buffer,hid_get_report_buff,UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
//	*report_len = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
//	return UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
//}

UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8019010:	b570      	push	{r4, r5, r6, lr}
    if (hid_data_ready) {
 8019012:	4d09      	ldr	r5, [pc, #36]	@ (8019038 <USB_Get_HidReport+0x28>)
UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8019014:	000c      	movs	r4, r1
    if (hid_data_ready) {
 8019016:	782b      	ldrb	r3, [r5, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d009      	beq.n	8019030 <USB_Get_HidReport+0x20>
        ux_utility_memory_copy(report_buffer, hid_get_report_buff, last_report_len);
 801901c:	4e07      	ldr	r6, [pc, #28]	@ (801903c <USB_Get_HidReport+0x2c>)
 801901e:	4908      	ldr	r1, [pc, #32]	@ (8019040 <USB_Get_HidReport+0x30>)
 8019020:	7832      	ldrb	r2, [r6, #0]
 8019022:	f7fd fe8d 	bl	8016d40 <_ux_utility_memory_copy>
        *report_len = last_report_len;
        hid_data_ready = 0;
 8019026:	2000      	movs	r0, #0
        *report_len = last_report_len;
 8019028:	7833      	ldrb	r3, [r6, #0]
        hid_data_ready = 0;
 801902a:	7028      	strb	r0, [r5, #0]
        *report_len = last_report_len;
 801902c:	6023      	str	r3, [r4, #0]
        return 0; // 0 = Success
    } else {
        *report_len = 0;
        return 1; // No new data
    }
}
 801902e:	bd70      	pop	{r4, r5, r6, pc}
        return 1; // No new data
 8019030:	2001      	movs	r0, #1
        *report_len = 0;
 8019032:	600b      	str	r3, [r1, #0]
        return 1; // No new data
 8019034:	e7fb      	b.n	801902e <USB_Get_HidReport+0x1e>
 8019036:	46c0      	nop			@ (mov r8, r8)
 8019038:	20006179 	.word	0x20006179
 801903c:	20006178 	.word	0x20006178
 8019040:	2000617a 	.word	0x2000617a

08019044 <USBD_Custom_HID_Activate>:
  *         This function is called when insertion of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Activate(VOID *hid_instance)
{
 8019044:	b510      	push	{r4, lr}
 8019046:	0004      	movs	r4, r0
  /* USER CODE BEGIN USBD_Custom_HID_Activate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device activated.\n");
 8019048:	4805      	ldr	r0, [pc, #20]	@ (8019060 <USBD_Custom_HID_Activate+0x1c>)
 801904a:	f001 f8f7 	bl	801a23c <puts>
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 801904e:	4b05      	ldr	r3, [pc, #20]	@ (8019064 <USBD_Custom_HID_Activate+0x20>)
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8019050:	4805      	ldr	r0, [pc, #20]	@ (8019068 <USBD_Custom_HID_Activate+0x24>)
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 8019052:	601c      	str	r4, [r3, #0]
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8019054:	f7f8 ffe6 	bl	8012024 <HAL_RTCEx_DeactivateWakeUpTimer>
  Switch_Backup_reg(MODE_Stop);
 8019058:	2002      	movs	r0, #2
 801905a:	f7ec ff81 	bl	8005f60 <Switch_Backup_reg>
  /* USER CODE END USBD_Custom_HID_Activate */

  return;
}
 801905e:	bd10      	pop	{r4, pc}
 8019060:	080200f2 	.word	0x080200f2
 8019064:	200061bc 	.word	0x200061bc
 8019068:	200009f8 	.word	0x200009f8

0801906c <USBD_Custom_HID_Deactivate>:
  *         This function is called when extraction of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Deactivate(VOID *hid_instance)
{
 801906c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USBD_Custom_HID_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device deactivated.\n");
 801906e:	4802      	ldr	r0, [pc, #8]	@ (8019078 <USBD_Custom_HID_Deactivate+0xc>)
 8019070:	f001 f8e4 	bl	801a23c <puts>
  /* USER CODE END USBD_Custom_HID_Deactivate */

  return;
}
 8019074:	bd10      	pop	{r4, pc}
 8019076:	46c0      	nop			@ (mov r8, r8)
 8019078:	0802010f 	.word	0x0802010f

0801907c <USBD_Custom_HID_SetFeature>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_SetFeature(UX_SLAVE_CLASS_HID *hid_instance,
                                UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 801907c:	b510      	push	{r4, lr}
  UINT status = UX_SUCCESS;

  /* USER CODE BEGIN USBD_Custom_HID_SetFeature */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Set Feature request received.\n");
 801907e:	4802      	ldr	r0, [pc, #8]	@ (8019088 <USBD_Custom_HID_SetFeature+0xc>)
 8019080:	f001 f8dc 	bl	801a23c <puts>
  /* USER CODE END USBD_Custom_HID_SetFeature */

  return status;
}
 8019084:	2000      	movs	r0, #0
 8019086:	bd10      	pop	{r4, pc}
 8019088:	0802012e 	.word	0x0802012e

0801908c <USBD_Custom_HID_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                               UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 801908c:	b510      	push	{r4, lr}
  UINT status = UX_SUCCESS;

  /* USER CODE BEGIN USBD_Custom_HID_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Get Report request received.\n");
 801908e:	4802      	ldr	r0, [pc, #8]	@ (8019098 <USBD_Custom_HID_GetReport+0xc>)
 8019090:	f001 f8d4 	bl	801a23c <puts>
  /* USER CODE END USBD_Custom_HID_GetReport */

  return status;
}
 8019094:	2000      	movs	r0, #0
 8019096:	bd10      	pop	{r4, pc}
 8019098:	08020157 	.word	0x08020157

0801909c <USBD_Custom_HID_SetReport>:
  *         to the application over Endpoint OUT (Set Report).
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_SetReport(struct UX_SLAVE_CLASS_HID_STRUCT *hid_instance)
{
 801909c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN USBD_Custom_HID_SetReport */

  UX_DEVICE_CLASS_HID_RECEIVED_EVENT hid_received_event;

  ux_utility_memory_set(&hid_received_event, 0, sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT));
 801909e:	2208      	movs	r2, #8
 80190a0:	2100      	movs	r1, #0
 80190a2:	4668      	mov	r0, sp
 80190a4:	f7fd fe7e 	bl	8016da4 <_ux_utility_memory_set>

  // FIXME: Add flag to check write event?
  if(ux_device_class_hid_receiver_event_get(hid_instance_global, &hid_received_event) == UX_SUCCESS)
 80190a8:	4c0a      	ldr	r4, [pc, #40]	@ (80190d4 <USBD_Custom_HID_SetReport+0x38>)
 80190aa:	4669      	mov	r1, sp
 80190ac:	6820      	ldr	r0, [r4, #0]
 80190ae:	f7fe f8f3 	bl	8017298 <_ux_device_class_hid_receiver_event_get>
 80190b2:	2800      	cmp	r0, #0
 80190b4:	d10d      	bne.n	80190d2 <USBD_Custom_HID_SetReport+0x36>
  {
	ux_utility_memory_copy(hid_get_report_buff, \
 80190b6:	2240      	movs	r2, #64	@ 0x40
 80190b8:	4807      	ldr	r0, [pc, #28]	@ (80190d8 <USBD_Custom_HID_SetReport+0x3c>)
 80190ba:	9901      	ldr	r1, [sp, #4]
 80190bc:	f7fd fe40 	bl	8016d40 <_ux_utility_memory_copy>
							hid_received_event.ux_device_class_hid_received_event_data, \
							UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
    /* Free hid received event */
    ux_device_class_hid_receiver_event_free(hid_instance_global);
 80190c0:	6820      	ldr	r0, [r4, #0]
 80190c2:	f7fe f8d9 	bl	8017278 <_ux_device_class_hid_receiver_event_free>

    last_report_len = hid_received_event.ux_device_class_hid_received_event_length;
 80190c6:	4b05      	ldr	r3, [pc, #20]	@ (80190dc <USBD_Custom_HID_SetReport+0x40>)
 80190c8:	9a00      	ldr	r2, [sp, #0]
 80190ca:	701a      	strb	r2, [r3, #0]
    hid_data_ready = 1;
 80190cc:	2201      	movs	r2, #1
 80190ce:	4b04      	ldr	r3, [pc, #16]	@ (80190e0 <USBD_Custom_HID_SetReport+0x44>)
 80190d0:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USBD_Custom_HID_SetReport */

  return;
}
 80190d2:	bd13      	pop	{r0, r1, r4, pc}
 80190d4:	200061bc 	.word	0x200061bc
 80190d8:	2000617a 	.word	0x2000617a
 80190dc:	20006178 	.word	0x20006178
 80190e0:	20006179 	.word	0x20006179

080190e4 <USBD_Custom_HID_EventMaxNumber>:
  *         This function to set receiver event max number parameter.
  * @param  none
  * @retval receiver event max number
  */
ULONG USBD_Custom_HID_EventMaxNumber(VOID)
{
 80190e4:	b510      	push	{r4, lr}
  ULONG max_number = 0U;

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxNumber */
  printf("Custom HID Event Max Number requested.\n");
 80190e6:	4802      	ldr	r0, [pc, #8]	@ (80190f0 <USBD_Custom_HID_EventMaxNumber+0xc>)
 80190e8:	f001 f8a8 	bl	801a23c <puts>

  max_number = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
  /* USER CODE END USBD_Custom_HID_EventMaxNumber */

  return max_number;
}
 80190ec:	2008      	movs	r0, #8
 80190ee:	bd10      	pop	{r4, pc}
 80190f0:	0802017f 	.word	0x0802017f

080190f4 <USBD_Custom_HID_EventMaxLength>:
  *         This function to set receiver event max length parameter.
  * @param  none
  * @retval receiver event max length
  */
ULONG USBD_Custom_HID_EventMaxLength(VOID)
{
 80190f4:	b510      	push	{r4, lr}
  ULONG max_length = 0U;

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxLength */
  printf("Custom HID Event Max Length requested.\n");
 80190f6:	4802      	ldr	r0, [pc, #8]	@ (8019100 <USBD_Custom_HID_EventMaxLength+0xc>)
 80190f8:	f001 f8a0 	bl	801a23c <puts>
   max_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
  /* USER CODE END USBD_Custom_HID_EventMaxLength */

  return max_length;
}
 80190fc:	2040      	movs	r0, #64	@ 0x40
 80190fe:	bd10      	pop	{r4, pc}
 8019100:	080201a6 	.word	0x080201a6

08019104 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8019104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019106:	9101      	str	r1, [sp, #4]
  uint32_t idx = 0U;

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8019108:	215c      	movs	r1, #92	@ 0x5c
 801910a:	6845      	ldr	r5, [r0, #4]
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 801910c:	2706      	movs	r7, #6
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801910e:	4369      	muls	r1, r5
 8019110:	1844      	adds	r4, r0, r1
 8019112:	69e4      	ldr	r4, [r4, #28]
 8019114:	3128      	adds	r1, #40	@ 0x28
 8019116:	46a4      	mov	ip, r4
  uint32_t idx = 0U;
 8019118:	2400      	movs	r4, #0
 801911a:	1841      	adds	r1, r0, r1
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801911c:	45a4      	cmp	ip, r4
 801911e:	d10f      	bne.n	8019140 <USBD_FrameWork_AssignEp+0x3c>
    /* Increment the index */
    idx++;
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8019120:	2106      	movs	r1, #6
 8019122:	4361      	muls	r1, r4
 8019124:	245c      	movs	r4, #92	@ 0x5c
 8019126:	436c      	muls	r4, r5
 8019128:	1909      	adds	r1, r1, r4
 801912a:	1841      	adds	r1, r0, r1
 801912c:	9c01      	ldr	r4, [sp, #4]
 801912e:	1d48      	adds	r0, r1, #5
 8019130:	77c4      	strb	r4, [r0, #31]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8019132:	1d88      	adds	r0, r1, #6
 8019134:	77c2      	strb	r2, [r0, #31]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8019136:	84cb      	strh	r3, [r1, #38]	@ 0x26
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8019138:	2301      	movs	r3, #1
 801913a:	3128      	adds	r1, #40	@ 0x28
 801913c:	700b      	strb	r3, [r1, #0]
}
 801913e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8019140:	003e      	movs	r6, r7
 8019142:	4366      	muls	r6, r4
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8019144:	5d8e      	ldrb	r6, [r1, r6]
 8019146:	2e00      	cmp	r6, #0
 8019148:	d0ea      	beq.n	8019120 <USBD_FrameWork_AssignEp+0x1c>
    idx++;
 801914a:	3401      	adds	r4, #1
 801914c:	e7e6      	b.n	801911c <USBD_FrameWork_AssignEp+0x18>

0801914e <USBD_Desc_GetString.part.0>:
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 801914e:	b570      	push	{r4, r5, r6, lr}
 8019150:	0016      	movs	r6, r2
 8019152:	0004      	movs	r4, r0
 8019154:	000d      	movs	r5, r1
  while (*pbuff != (uint8_t)'\0')
 8019156:	f7e6 ffd7 	bl	8000108 <strlen>
 801915a:	2201      	movs	r2, #1
 801915c:	b2c0      	uxtb	r0, r0
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801915e:	8030      	strh	r0, [r6, #0]
  unicode[idx++] = *(uint8_t *)len;
 8019160:	1b12      	subs	r2, r2, r4
 8019162:	7028      	strb	r0, [r5, #0]
  while (*pdesc != (uint8_t)'\0')
 8019164:	7821      	ldrb	r1, [r4, #0]
 8019166:	18a3      	adds	r3, r4, r2
 8019168:	b2db      	uxtb	r3, r3
 801916a:	2900      	cmp	r1, #0
 801916c:	d100      	bne.n	8019170 <USBD_Desc_GetString.part.0+0x22>
}
 801916e:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx++] = *pdesc;
 8019170:	54e9      	strb	r1, [r5, r3]
    pdesc++;
 8019172:	3401      	adds	r4, #1
 8019174:	e7f6      	b.n	8019164 <USBD_Desc_GetString.part.0+0x16>
	...

08019178 <USBD_Device_Framework_Builder.constprop.0.isra.0>:
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 8019178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801917a:	000e      	movs	r6, r1
 801917c:	b089      	sub	sp, #36	@ 0x24
 801917e:	9205      	str	r2, [sp, #20]
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8019180:	4ad6      	ldr	r2, [pc, #856]	@ (80194dc <USBD_Device_Framework_Builder.constprop.0.isra.0+0x364>)
  pdev->CurrConfDescSz = 0U;
 8019182:	0001      	movs	r1, r0
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8019184:	6016      	str	r6, [r2, #0]
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8019186:	2212      	movs	r2, #18
  pdev->CurrConfDescSz = 0U;
 8019188:	2300      	movs	r3, #0
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 801918a:	4694      	mov	ip, r2
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 801918c:	0004      	movs	r4, r0
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 801918e:	2001      	movs	r0, #1
  pDevDesc->idVendor = USBD_VID;
 8019190:	277d      	movs	r7, #125	@ 0x7d
  pdev->CurrConfDescSz = 0U;
 8019192:	31fc      	adds	r1, #252	@ 0xfc
 8019194:	628b      	str	r3, [r1, #40]	@ 0x28
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8019196:	2540      	movs	r5, #64	@ 0x40
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8019198:	7070      	strb	r0, [r6, #1]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 801919a:	73b0      	strb	r0, [r6, #14]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 801919c:	7470      	strb	r0, [r6, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 801919e:	4660      	mov	r0, ip
  pDevDesc->idVendor = USBD_VID;
 80191a0:	427f      	negs	r7, r7
 80191a2:	7237      	strb	r7, [r6, #8]
 80191a4:	3781      	adds	r7, #129	@ 0x81
 80191a6:	7277      	strb	r7, [r6, #9]
  pDevDesc->idProduct = USBD_PID;
 80191a8:	3f84      	subs	r7, #132	@ 0x84
 80191aa:	72b7      	strb	r7, [r6, #10]
 80191ac:	37d1      	adds	r7, #209	@ 0xd1
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 80191ae:	7032      	strb	r2, [r6, #0]
  pDevDesc->idProduct = USBD_PID;
 80191b0:	72f7      	strb	r7, [r6, #11]
  pDevDesc->bcdUSB = USB_BCDUSB;
 80191b2:	3a10      	subs	r2, #16
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 80191b4:	3f4e      	subs	r7, #78	@ 0x4e
  pDevDesc->bcdUSB = USB_BCDUSB;
 80191b6:	70b3      	strb	r3, [r6, #2]
 80191b8:	70f2      	strb	r2, [r6, #3]
  pDevDesc->bDeviceClass = 0x00;
 80191ba:	7133      	strb	r3, [r6, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 80191bc:	7173      	strb	r3, [r6, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 80191be:	71b3      	strb	r3, [r6, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 80191c0:	71f5      	strb	r5, [r6, #7]
  pDevDesc->bcdDevice = 0x0200;
 80191c2:	7333      	strb	r3, [r6, #12]
 80191c4:	7372      	strb	r2, [r6, #13]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 80191c6:	73f2      	strb	r2, [r6, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 80191c8:	7437      	strb	r7, [r6, #16]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 80191ca:	6248      	str	r0, [r1, #36]	@ 0x24
  if (Speed == USBD_HIGH_SPEED)
 80191cc:	9805      	ldr	r0, [sp, #20]
 80191ce:	2801      	cmp	r0, #1
 80191d0:	d110      	bne.n	80191f4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x7c>
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 80191d2:	3009      	adds	r0, #9
 80191d4:	74b0      	strb	r0, [r6, #18]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 80191d6:	0030      	movs	r0, r6
 80191d8:	4460      	add	r0, ip
    pDevQualDesc->bcdDevice = 0x0200;
 80191da:	70c2      	strb	r2, [r0, #3]
    pDevQualDesc->bNumConfigurations = 0x01;
 80191dc:	9a05      	ldr	r2, [sp, #20]
    pDevQualDesc->bcdDevice = 0x0200;
 80191de:	7083      	strb	r3, [r0, #2]
    pDevQualDesc->Class = 0x00;
 80191e0:	7103      	strb	r3, [r0, #4]
    pDevQualDesc->SubClass = 0x00;
 80191e2:	7143      	strb	r3, [r0, #5]
    pDevQualDesc->Protocol = 0x00;
 80191e4:	7183      	strb	r3, [r0, #6]
    pDevQualDesc->bReserved = 0x00;
 80191e6:	7243      	strb	r3, [r0, #9]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 80191e8:	3703      	adds	r7, #3
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 80191ea:	331c      	adds	r3, #28
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 80191ec:	7047      	strb	r7, [r0, #1]
    pDevQualDesc->bMaxPacketSize = 0x40;
 80191ee:	71c5      	strb	r5, [r0, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 80191f0:	7202      	strb	r2, [r0, #8]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 80191f2:	624b      	str	r3, [r1, #36]	@ 0x24
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80191f4:	4bba      	ldr	r3, [pc, #744]	@ (80194e0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x368>)
 80191f6:	9304      	str	r3, [sp, #16]
 80191f8:	4bba      	ldr	r3, [pc, #744]	@ (80194e4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x36c>)
 80191fa:	9307      	str	r3, [sp, #28]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80191fc:	6863      	ldr	r3, [r4, #4]
 80191fe:	9301      	str	r3, [sp, #4]
 8019200:	2b02      	cmp	r3, #2
 8019202:	d818      	bhi.n	8019236 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8019204:	68a3      	ldr	r3, [r4, #8]
 8019206:	9302      	str	r3, [sp, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8019208:	2b02      	cmp	r3, #2
 801920a:	d814      	bhi.n	8019236 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 801920c:	9b04      	ldr	r3, [sp, #16]
 801920e:	7819      	ldrb	r1, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8019210:	2900      	cmp	r1, #0
 8019212:	d010      	beq.n	8019236 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8019214:	0023      	movs	r3, r4
 8019216:	33fc      	adds	r3, #252	@ 0xfc
 8019218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      (pdev->tclasslist[pdev->classId].Active == 0U))
 801921a:	9a01      	ldr	r2, [sp, #4]
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801921c:	469c      	mov	ip, r3
      (pdev->tclasslist[pdev->classId].Active == 0U))
 801921e:	235c      	movs	r3, #92	@ 0x5c
 8019220:	4353      	muls	r3, r2
 8019222:	18e3      	adds	r3, r4, r3
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8019224:	699d      	ldr	r5, [r3, #24]
 8019226:	2d00      	cmp	r5, #0
 8019228:	d017      	beq.n	801925a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xe2>
      pdev->classId ++;
 801922a:	9b01      	ldr	r3, [sp, #4]
 801922c:	3301      	adds	r3, #1
 801922e:	6063      	str	r3, [r4, #4]
      pdev->NumClasses ++;
 8019230:	9b02      	ldr	r3, [sp, #8]
 8019232:	3301      	adds	r3, #1
 8019234:	60a3      	str	r3, [r4, #8]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8019236:	9b04      	ldr	r3, [sp, #16]
 8019238:	9a07      	ldr	r2, [sp, #28]
 801923a:	3301      	adds	r3, #1
 801923c:	9304      	str	r3, [sp, #16]
 801923e:	4293      	cmp	r3, r2
 8019240:	d1dc      	bne.n	80191fc <USBD_Device_Framework_Builder.constprop.0.isra.0+0x84>
  if (pdev->NumClasses > 1)
 8019242:	68a3      	ldr	r3, [r4, #8]
 8019244:	2b01      	cmp	r3, #1
 8019246:	d800      	bhi.n	801924a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xd2>
 8019248:	e13f      	b.n	80194ca <USBD_Device_Framework_Builder.constprop.0.isra.0+0x352>
    pDevDesc->bDeviceClass = 0xEF;
 801924a:	23ef      	movs	r3, #239	@ 0xef
 801924c:	7133      	strb	r3, [r6, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 801924e:	3bed      	subs	r3, #237	@ 0xed
 8019250:	7173      	strb	r3, [r6, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8019252:	3b01      	subs	r3, #1
      pDevDesc->bDeviceProtocol = 0x00;
 8019254:	71b3      	strb	r3, [r6, #6]
}
 8019256:	b009      	add	sp, #36	@ 0x24
 8019258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 801925a:	9a01      	ldr	r2, [sp, #4]
    pdev->tclasslist[pdev->classId].ClassType = class;
 801925c:	7319      	strb	r1, [r3, #12]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 801925e:	611a      	str	r2, [r3, #16]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8019260:	2201      	movs	r2, #1
 8019262:	619a      	str	r2, [r3, #24]
    if (class == CLASS_TYPE_HID)
 8019264:	4291      	cmp	r1, r2
 8019266:	d10a      	bne.n	801927e <USBD_Device_Framework_Builder.constprop.0.isra.0+0x106>
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 8019268:	489f      	ldr	r0, [pc, #636]	@ (80194e8 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x370>)
 801926a:	4fa0      	ldr	r7, [pc, #640]	@ (80194ec <USBD_Device_Framework_Builder.constprop.0.isra.0+0x374>)
 801926c:	7802      	ldrb	r2, [r0, #0]
 801926e:	5cbf      	ldrb	r7, [r7, r2]
      interface_idx++;
 8019270:	3201      	adds	r2, #1
 8019272:	b2d2      	uxtb	r2, r2
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 8019274:	751f      	strb	r7, [r3, #20]
      if (interface_idx == sizeof(UserHIDInterface))
 8019276:	2a01      	cmp	r2, #1
 8019278:	d100      	bne.n	801927c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x104>
 801927a:	e097      	b.n	80193ac <USBD_Device_Framework_Builder.constprop.0.isra.0+0x234>
      interface_idx++;
 801927c:	7002      	strb	r2, [r0, #0]
      (void)USBD_FrameWork_AddClass(pdev,
 801927e:	4663      	mov	r3, ip
 8019280:	18f7      	adds	r7, r6, r3
  pdev->Speed = Speed;
 8019282:	9b05      	ldr	r3, [sp, #20]
 8019284:	7023      	strb	r3, [r4, #0]
  if (pdev->classId == 0U)
 8019286:	9b01      	ldr	r3, [sp, #4]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d114      	bne.n	80192b6 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x13e>
  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 801928c:	3309      	adds	r3, #9
 801928e:	703b      	strb	r3, [r7, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8019290:	3b07      	subs	r3, #7
 8019292:	707b      	strb	r3, [r7, #1]
  ptr->wDescriptorLength = 0U;
 8019294:	9b01      	ldr	r3, [sp, #4]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8019296:	0022      	movs	r2, r4
  ptr->bNumInterfaces = 0U;
 8019298:	713b      	strb	r3, [r7, #4]
  ptr->wDescriptorLength = 0U;
 801929a:	70bb      	strb	r3, [r7, #2]
 801929c:	70fb      	strb	r3, [r7, #3]
  ptr->bConfigurationValue = 1U;
 801929e:	2301      	movs	r3, #1
 80192a0:	717b      	strb	r3, [r7, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 80192a2:	9b01      	ldr	r3, [sp, #4]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 80192a4:	32fc      	adds	r2, #252	@ 0xfc
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 80192a6:	71bb      	strb	r3, [r7, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 80192a8:	23c0      	movs	r3, #192	@ 0xc0
 80192aa:	71fb      	strb	r3, [r7, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 80192ac:	3ba7      	subs	r3, #167	@ 0xa7
 80192ae:	723b      	strb	r3, [r7, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 80192b0:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80192b2:	3309      	adds	r3, #9
 80192b4:	6293      	str	r3, [r2, #40]	@ 0x28
  switch (pdev->tclasslist[pdev->classId].ClassType)
 80192b6:	2901      	cmp	r1, #1
 80192b8:	d07a      	beq.n	80193b0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x238>
 80192ba:	2903      	cmp	r1, #3
 80192bc:	d1b5      	bne.n	801922a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
  uint32_t idx = 0U;
 80192be:	9a02      	ldr	r2, [sp, #8]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80192c0:	1e13      	subs	r3, r2, #0
 80192c2:	d004      	beq.n	80192ce <USBD_Device_Framework_Builder.constprop.0.isra.0+0x156>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80192c4:	6a22      	ldr	r2, [r4, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80192c6:	2b02      	cmp	r3, #2
 80192c8:	d101      	bne.n	80192ce <USBD_Device_Framework_Builder.constprop.0.isra.0+0x156>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80192ca:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80192cc:	18d2      	adds	r2, r2, r3
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 80192ce:	235c      	movs	r3, #92	@ 0x5c
 80192d0:	9901      	ldr	r1, [sp, #4]
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 80192d2:	2502      	movs	r5, #2
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 80192d4:	434b      	muls	r3, r1
 80192d6:	2101      	movs	r1, #1
 80192d8:	18e3      	adds	r3, r4, r3
 80192da:	6219      	str	r1, [r3, #32]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80192dc:	0019      	movs	r1, r3
 80192de:	315a      	adds	r1, #90	@ 0x5a
 80192e0:	700a      	strb	r2, [r1, #0]
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 80192e2:	61dd      	str	r5, [r3, #28]
      if (pdev->Speed == USBD_HIGH_SPEED)
 80192e4:	9b05      	ldr	r3, [sp, #20]
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d000      	beq.n	80192ec <USBD_Device_Framework_Builder.constprop.0.isra.0+0x174>
 80192ea:	e0e6      	b.n	80194ba <USBD_Device_Framework_Builder.constprop.0.isra.0+0x342>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 80192ec:	2380      	movs	r3, #128	@ 0x80
 80192ee:	002a      	movs	r2, r5
 80192f0:	009b      	lsls	r3, r3, #2
 80192f2:	2182      	movs	r1, #130	@ 0x82
 80192f4:	0020      	movs	r0, r4
 80192f6:	f7ff ff05 	bl	8019104 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 80192fa:	2380      	movs	r3, #128	@ 0x80
 80192fc:	009b      	lsls	r3, r3, #2
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 80192fe:	002a      	movs	r2, r5
 8019300:	0029      	movs	r1, r5
{
  USBD_IfDescTypedef       *pIfDesc;
  USBD_EpDescTypedef       *pEpDesc;

  /* Append MSC Interface descriptor */
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8019302:	0025      	movs	r5, r4
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8019304:	0020      	movs	r0, r4
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8019306:	35fc      	adds	r5, #252	@ 0xfc
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8019308:	f7ff fefc 	bl	8019104 <USBD_FrameWork_AssignEp>
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 801930c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801930e:	9901      	ldr	r1, [sp, #4]
 8019310:	18fa      	adds	r2, r7, r3
 8019312:	9303      	str	r3, [sp, #12]
 8019314:	2309      	movs	r3, #9
 8019316:	7013      	strb	r3, [r2, #0]
 8019318:	3b05      	subs	r3, #5
 801931a:	7053      	strb	r3, [r2, #1]
 801931c:	3358      	adds	r3, #88	@ 0x58
 801931e:	434b      	muls	r3, r1
 8019320:	18e3      	adds	r3, r4, r3
 8019322:	0019      	movs	r1, r3
 8019324:	315a      	adds	r1, #90	@ 0x5a
 8019326:	7809      	ldrb	r1, [r1, #0]
                          (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                          (0x08U), (0x06U), (0x50U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8019328:	2005      	movs	r0, #5
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 801932a:	7091      	strb	r1, [r2, #2]
 801932c:	2100      	movs	r1, #0
 801932e:	70d1      	strb	r1, [r2, #3]
 8019330:	468c      	mov	ip, r1
 8019332:	69d9      	ldr	r1, [r3, #28]
 8019334:	7111      	strb	r1, [r2, #4]
 8019336:	2108      	movs	r1, #8
 8019338:	7151      	strb	r1, [r2, #5]
 801933a:	3902      	subs	r1, #2
 801933c:	7191      	strb	r1, [r2, #6]
 801933e:	314a      	adds	r1, #74	@ 0x4a
 8019340:	71d1      	strb	r1, [r2, #7]
 8019342:	4661      	mov	r1, ip
 8019344:	7211      	strb	r1, [r2, #8]
 8019346:	9a03      	ldr	r2, [sp, #12]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8019348:	3107      	adds	r1, #7
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 801934a:	3209      	adds	r2, #9
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 801934c:	19d2      	adds	r2, r2, r7
 801934e:	7011      	strb	r1, [r2, #0]
 8019350:	7050      	strb	r0, [r2, #1]
 8019352:	1819      	adds	r1, r3, r0
 8019354:	7fc9      	ldrb	r1, [r1, #31]
 8019356:	7091      	strb	r1, [r2, #2]
 8019358:	2102      	movs	r1, #2
 801935a:	70d1      	strb	r1, [r2, #3]
 801935c:	0019      	movs	r1, r3
 801935e:	3126      	adds	r1, #38	@ 0x26
 8019360:	9106      	str	r1, [sp, #24]
 8019362:	7809      	ldrb	r1, [r1, #0]
 8019364:	7111      	strb	r1, [r2, #4]
 8019366:	9906      	ldr	r1, [sp, #24]
 8019368:	7849      	ldrb	r1, [r1, #1]
 801936a:	7151      	strb	r1, [r2, #5]
 801936c:	4661      	mov	r1, ip
 801936e:	7191      	strb	r1, [r2, #6]
 8019370:	9a03      	ldr	r2, [sp, #12]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 8019372:	3107      	adds	r1, #7
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8019374:	3210      	adds	r2, #16
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 8019376:	19d2      	adds	r2, r2, r7
 8019378:	7050      	strb	r0, [r2, #1]
 801937a:	0018      	movs	r0, r3
 801937c:	7011      	strb	r1, [r2, #0]
 801937e:	302a      	adds	r0, #42	@ 0x2a
 8019380:	7800      	ldrb	r0, [r0, #0]
 8019382:	3905      	subs	r1, #5
 8019384:	332c      	adds	r3, #44	@ 0x2c
 8019386:	7090      	strb	r0, [r2, #2]
 8019388:	70d1      	strb	r1, [r2, #3]
 801938a:	7819      	ldrb	r1, [r3, #0]
 801938c:	7111      	strb	r1, [r2, #4]
 801938e:	785b      	ldrb	r3, [r3, #1]
 8019390:	7153      	strb	r3, [r2, #5]
 8019392:	4663      	mov	r3, ip
 8019394:	7193      	strb	r3, [r2, #6]
 8019396:	9b03      	ldr	r3, [sp, #12]
 8019398:	3317      	adds	r3, #23
 801939a:	62ab      	str	r3, [r5, #40]	@ 0x28
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 801939c:	793a      	ldrb	r2, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 801939e:	70bb      	strb	r3, [r7, #2]
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 80193a0:	3201      	adds	r2, #1
 80193a2:	713a      	strb	r2, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80193a4:	b29a      	uxth	r2, r3
 80193a6:	0a12      	lsrs	r2, r2, #8
 80193a8:	70fa      	strb	r2, [r7, #3]
}
 80193aa:	e73e      	b.n	801922a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
        interface_idx = 0U;
 80193ac:	7005      	strb	r5, [r0, #0]
 80193ae:	e766      	b.n	801927e <USBD_Device_Framework_Builder.constprop.0.isra.0+0x106>
      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 80193b0:	255c      	movs	r5, #92	@ 0x5c
 80193b2:	9b01      	ldr	r3, [sp, #4]
 80193b4:	436b      	muls	r3, r5
 80193b6:	18e3      	adds	r3, r4, r3
 80193b8:	7d1b      	ldrb	r3, [r3, #20]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d000      	beq.n	80193c0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x248>
 80193be:	e734      	b.n	801922a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
  uint32_t idx = 0U;
 80193c0:	9b02      	ldr	r3, [sp, #8]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80193c2:	1e1a      	subs	r2, r3, #0
 80193c4:	d004      	beq.n	80193d0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x258>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80193c6:	6a23      	ldr	r3, [r4, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80193c8:	2a02      	cmp	r2, #2
 80193ca:	d101      	bne.n	80193d0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x258>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80193cc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80193ce:	189b      	adds	r3, r3, r2
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 80193d0:	9a01      	ldr	r2, [sp, #4]
 80193d2:	2001      	movs	r0, #1
 80193d4:	4355      	muls	r5, r2
 80193d6:	1965      	adds	r5, r4, r5
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80193d8:	002a      	movs	r2, r5
 80193da:	325a      	adds	r2, #90	@ 0x5a
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 80193dc:	6228      	str	r0, [r5, #32]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80193de:	7013      	strb	r3, [r2, #0]
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 80193e0:	2302      	movs	r3, #2
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 80193e2:	2181      	movs	r1, #129	@ 0x81
 80193e4:	0020      	movs	r0, r4
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80193e6:	9206      	str	r2, [sp, #24]
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 80193e8:	61eb      	str	r3, [r5, #28]
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 80193ea:	2203      	movs	r2, #3
 80193ec:	333e      	adds	r3, #62	@ 0x3e
 80193ee:	f7ff fe89 	bl	8019104 <USBD_FrameWork_AssignEp>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPOUT_ADDR,
 80193f2:	2203      	movs	r2, #3
 80193f4:	2340      	movs	r3, #64	@ 0x40
 80193f6:	2101      	movs	r1, #1
 80193f8:	0020      	movs	r0, r4
 80193fa:	f7ff fe83 	bl	8019104 <USBD_FrameWork_AssignEp>
  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 80193fe:	7d2a      	ldrb	r2, [r5, #20]
 8019400:	2a00      	cmp	r2, #0
 8019402:	d14f      	bne.n	80194a4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x32c>
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8019404:	23fc      	movs	r3, #252	@ 0xfc
 8019406:	469c      	mov	ip, r3
 8019408:	44a4      	add	ip, r4
 801940a:	4663      	mov	r3, ip
 801940c:	2004      	movs	r0, #4
 801940e:	2109      	movs	r1, #9
 8019410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019412:	9303      	str	r3, [sp, #12]
 8019414:	18fb      	adds	r3, r7, r3
 8019416:	7058      	strb	r0, [r3, #1]
 8019418:	9806      	ldr	r0, [sp, #24]
 801941a:	7019      	strb	r1, [r3, #0]
 801941c:	7800      	ldrb	r0, [r0, #0]
 801941e:	70da      	strb	r2, [r3, #3]
 8019420:	7098      	strb	r0, [r3, #2]
 8019422:	69e8      	ldr	r0, [r5, #28]
 8019424:	719a      	strb	r2, [r3, #6]
 8019426:	7118      	strb	r0, [r3, #4]
 8019428:	2003      	movs	r0, #3
 801942a:	71da      	strb	r2, [r3, #7]
 801942c:	7158      	strb	r0, [r3, #5]
 801942e:	721a      	strb	r2, [r3, #8]
 8019430:	9b03      	ldr	r3, [sp, #12]
      pHidDesc->bcdHID = 0x0111U;
 8019432:	2011      	movs	r0, #17
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8019434:	185b      	adds	r3, r3, r1
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 8019436:	19db      	adds	r3, r3, r7
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 8019438:	7019      	strb	r1, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 801943a:	3118      	adds	r1, #24
 801943c:	7059      	strb	r1, [r3, #1]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 801943e:	2121      	movs	r1, #33	@ 0x21
      pHidDesc->bcdHID = 0x0111U;
 8019440:	7098      	strb	r0, [r3, #2]
 8019442:	3810      	subs	r0, #16
      pHidDesc->bNumDescriptors = 0x01U;
 8019444:	7158      	strb	r0, [r3, #5]
      pHidDesc->bcdHID = 0x0111U;
 8019446:	70d8      	strb	r0, [r3, #3]
      pHidDesc->bHIDDescriptorType = 0x22U;
 8019448:	3021      	adds	r0, #33	@ 0x21
      pHidDesc->bCountryCode = 0x00U;
 801944a:	711a      	strb	r2, [r3, #4]
      pHidDesc->bHIDDescriptorType = 0x22U;
 801944c:	7198      	strb	r0, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 801944e:	71d9      	strb	r1, [r3, #7]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8019450:	8da9      	ldrh	r1, [r5, #44]	@ 0x2c
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8019452:	721a      	strb	r2, [r3, #8]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8019454:	9106      	str	r1, [sp, #24]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8019456:	2107      	movs	r1, #7
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8019458:	9a03      	ldr	r2, [sp, #12]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801945a:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 801945c:	3212      	adds	r2, #18
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801945e:	19d2      	adds	r2, r2, r7
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8019460:	7011      	strb	r1, [r2, #0]
 8019462:	3902      	subs	r1, #2
 8019464:	7051      	strb	r1, [r2, #1]
 8019466:	1869      	adds	r1, r5, r1
 8019468:	7fc9      	ldrb	r1, [r1, #31]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801946a:	9b03      	ldr	r3, [sp, #12]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801946c:	7091      	strb	r1, [r2, #2]
 801946e:	7110      	strb	r0, [r2, #4]
 8019470:	0a00      	lsrs	r0, r0, #8
 8019472:	7150      	strb	r0, [r2, #5]
 8019474:	2103      	movs	r1, #3
 8019476:	2001      	movs	r0, #1
 8019478:	70d1      	strb	r1, [r2, #3]
 801947a:	7190      	strb	r0, [r2, #6]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 801947c:	2207      	movs	r2, #7
 801947e:	2103      	movs	r1, #3
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8019480:	3319      	adds	r3, #25
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8019482:	19db      	adds	r3, r3, r7
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8019484:	701a      	strb	r2, [r3, #0]
 8019486:	3a02      	subs	r2, #2
 8019488:	705a      	strb	r2, [r3, #1]
 801948a:	352a      	adds	r5, #42	@ 0x2a
 801948c:	782a      	ldrb	r2, [r5, #0]
 801948e:	70d9      	strb	r1, [r3, #3]
 8019490:	709a      	strb	r2, [r3, #2]
 8019492:	9a06      	ldr	r2, [sp, #24]
 8019494:	7198      	strb	r0, [r3, #6]
 8019496:	711a      	strb	r2, [r3, #4]
 8019498:	0a11      	lsrs	r1, r2, #8
 801949a:	4662      	mov	r2, ip
 801949c:	7159      	strb	r1, [r3, #5]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 801949e:	9b03      	ldr	r3, [sp, #12]
 80194a0:	3320      	adds	r3, #32
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 80194a2:	6293      	str	r3, [r2, #40]	@ 0x28
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 80194a4:	793b      	ldrb	r3, [r7, #4]
 80194a6:	3301      	adds	r3, #1
 80194a8:	713b      	strb	r3, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80194aa:	0023      	movs	r3, r4
 80194ac:	33fc      	adds	r3, #252	@ 0xfc
 80194ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80194b0:	b293      	uxth	r3, r2
 80194b2:	0a1b      	lsrs	r3, r3, #8
 80194b4:	70ba      	strb	r2, [r7, #2]
 80194b6:	70fb      	strb	r3, [r7, #3]
}
 80194b8:	e6b7      	b.n	801922a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 80194ba:	2340      	movs	r3, #64	@ 0x40
 80194bc:	002a      	movs	r2, r5
 80194be:	2182      	movs	r1, #130	@ 0x82
 80194c0:	0020      	movs	r0, r4
 80194c2:	f7ff fe1f 	bl	8019104 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 80194c6:	2340      	movs	r3, #64	@ 0x40
 80194c8:	e719      	b.n	80192fe <USBD_Device_Framework_Builder.constprop.0.isra.0+0x186>
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 80194ca:	4b05      	ldr	r3, [pc, #20]	@ (80194e0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x368>)
 80194cc:	781b      	ldrb	r3, [r3, #0]
 80194ce:	2b02      	cmp	r3, #2
 80194d0:	d000      	beq.n	80194d4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x35c>
 80194d2:	e6c0      	b.n	8019256 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xde>
      pDevDesc->bDeviceClass = 0x02;
 80194d4:	7133      	strb	r3, [r6, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 80194d6:	7173      	strb	r3, [r6, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 80194d8:	2300      	movs	r3, #0
 80194da:	e6bb      	b.n	8019254 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xdc>
 80194dc:	200061c4 	.word	0x200061c4
 80194e0:	200002b5 	.word	0x200002b5
 80194e4:	200002b8 	.word	0x200002b8
 80194e8:	200061c0 	.word	0x200061c0
 80194ec:	2000645c 	.word	0x2000645c

080194f0 <USBD_Get_Device_Framework_Speed>:
{
 80194f0:	b570      	push	{r4, r5, r6, lr}
 80194f2:	0002      	movs	r2, r0
 80194f4:	000d      	movs	r5, r1
  if (USBD_FULL_SPEED == Speed)
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d10c      	bne.n	8019514 <USBD_Get_Device_Framework_Speed+0x24>
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 80194fa:	4c08      	ldr	r4, [pc, #32]	@ (801951c <USBD_Get_Device_Framework_Speed+0x2c>)
 80194fc:	4e08      	ldr	r6, [pc, #32]	@ (8019520 <USBD_Get_Device_Framework_Speed+0x30>)
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 80194fe:	0030      	movs	r0, r6
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8019500:	36fc      	adds	r6, #252	@ 0xfc
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8019502:	0021      	movs	r1, r4
 8019504:	f7ff fe38 	bl	8019178 <USBD_Device_Framework_Builder.constprop.0.isra.0>
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8019508:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 801950a:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
    pFrameWork = pDevFrameWorkDesc_HS;
 801950c:	0020      	movs	r0, r4
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801950e:	189b      	adds	r3, r3, r2
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8019510:	602b      	str	r3, [r5, #0]
}
 8019512:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8019514:	4c03      	ldr	r4, [pc, #12]	@ (8019524 <USBD_Get_Device_Framework_Speed+0x34>)
 8019516:	4e04      	ldr	r6, [pc, #16]	@ (8019528 <USBD_Get_Device_Framework_Speed+0x38>)
 8019518:	e7f1      	b.n	80194fe <USBD_Get_Device_Framework_Speed+0xe>
 801951a:	46c0      	nop			@ (mov r8, r8)
 801951c:	20006394 	.word	0x20006394
 8019520:	20006588 	.word	0x20006588
 8019524:	200062cc 	.word	0x200062cc
 8019528:	20006460 	.word	0x20006460

0801952c <USBD_Get_String_Framework>:
{
 801952c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801952e:	4b20      	ldr	r3, [pc, #128]	@ (80195b0 <USBD_Get_String_Framework+0x84>)
 8019530:	4d20      	ldr	r5, [pc, #128]	@ (80195b4 <USBD_Get_String_Framework+0x88>)
{
 8019532:	b085      	sub	sp, #20
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019534:	802b      	strh	r3, [r5, #0]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8019536:	2301      	movs	r3, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019538:	2709      	movs	r7, #9
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801953a:	2604      	movs	r6, #4
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 801953c:	70ab      	strb	r3, [r5, #2]
  if (desc == NULL)
 801953e:	ab02      	add	r3, sp, #8
{
 8019540:	9001      	str	r0, [sp, #4]
 8019542:	1d9a      	adds	r2, r3, #6
 8019544:	491c      	ldr	r1, [pc, #112]	@ (80195b8 <USBD_Get_String_Framework+0x8c>)
 8019546:	481d      	ldr	r0, [pc, #116]	@ (80195bc <USBD_Get_String_Framework+0x90>)
 8019548:	f7ff fe01 	bl	801914e <USBD_Desc_GetString.part.0>
  count += len + 1;
 801954c:	ab02      	add	r3, sp, #8
 801954e:	799b      	ldrb	r3, [r3, #6]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019550:	481b      	ldr	r0, [pc, #108]	@ (80195c0 <USBD_Get_String_Framework+0x94>)
  count += len + 1;
 8019552:	1d1a      	adds	r2, r3, #4
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019554:	b2d2      	uxtb	r2, r2
 8019556:	54af      	strb	r7, [r5, r2]
 8019558:	1d5a      	adds	r2, r3, #5
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801955a:	b2d2      	uxtb	r2, r2
 801955c:	54ae      	strb	r6, [r5, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 801955e:	2202      	movs	r2, #2
 8019560:	1ddc      	adds	r4, r3, #7
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8019562:	3306      	adds	r3, #6
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8019564:	b2db      	uxtb	r3, r3
 8019566:	54ea      	strb	r2, [r5, r3]
 8019568:	b2e4      	uxtb	r4, r4
  if (desc == NULL)
 801956a:	ab02      	add	r3, sp, #8
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 801956c:	1961      	adds	r1, r4, r5
 801956e:	1d9a      	adds	r2, r3, #6
 8019570:	f7ff fded 	bl	801914e <USBD_Desc_GetString.part.0>
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8019574:	2203      	movs	r2, #3
  count += len + 1;
 8019576:	ab02      	add	r3, sp, #8
 8019578:	88db      	ldrh	r3, [r3, #6]
 801957a:	4812      	ldr	r0, [pc, #72]	@ (80195c4 <USBD_Get_String_Framework+0x98>)
 801957c:	18e4      	adds	r4, r4, r3
 801957e:	b2e4      	uxtb	r4, r4
 8019580:	1c63      	adds	r3, r4, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019582:	b2db      	uxtb	r3, r3
 8019584:	54ef      	strb	r7, [r5, r3]
 8019586:	1ca3      	adds	r3, r4, #2
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8019588:	b2db      	uxtb	r3, r3
 801958a:	54ee      	strb	r6, [r5, r3]
 801958c:	1ce3      	adds	r3, r4, #3
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 801958e:	b2db      	uxtb	r3, r3
 8019590:	19a4      	adds	r4, r4, r6
 8019592:	54ea      	strb	r2, [r5, r3]
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8019594:	b2e1      	uxtb	r1, r4
 8019596:	ab02      	add	r3, sp, #8
 8019598:	1d9a      	adds	r2, r3, #6
 801959a:	1949      	adds	r1, r1, r5
 801959c:	f7ff fdd7 	bl	801914e <USBD_Desc_GetString.part.0>
  *Length = strlen((const char *)USBD_string_framework);
 80195a0:	0028      	movs	r0, r5
 80195a2:	f7e6 fdb1 	bl	8000108 <strlen>
 80195a6:	9b01      	ldr	r3, [sp, #4]
 80195a8:	6018      	str	r0, [r3, #0]
}
 80195aa:	0028      	movs	r0, r5
 80195ac:	b005      	add	sp, #20
 80195ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195b0:	00000409 	.word	0x00000409
 80195b4:	200061cc 	.word	0x200061cc
 80195b8:	200061cf 	.word	0x200061cf
 80195bc:	080201cd 	.word	0x080201cd
 80195c0:	080201d4 	.word	0x080201d4
 80195c4:	080201e3 	.word	0x080201e3

080195c8 <USBD_Get_Language_Id_Framework>:
{
 80195c8:	b570      	push	{r4, r5, r6, lr}
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80195ca:	4c05      	ldr	r4, [pc, #20]	@ (80195e0 <USBD_Get_Language_Id_Framework+0x18>)
 80195cc:	4b05      	ldr	r3, [pc, #20]	@ (80195e4 <USBD_Get_Language_Id_Framework+0x1c>)
{
 80195ce:	0005      	movs	r5, r0
  *Length = strlen((const char *)USBD_language_id_framework);
 80195d0:	0020      	movs	r0, r4
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80195d2:	8023      	strh	r3, [r4, #0]
  *Length = strlen((const char *)USBD_language_id_framework);
 80195d4:	f7e6 fd98 	bl	8000108 <strlen>
 80195d8:	6028      	str	r0, [r5, #0]
}
 80195da:	0020      	movs	r0, r4
 80195dc:	bd70      	pop	{r4, r5, r6, pc}
 80195de:	46c0      	nop			@ (mov r8, r8)
 80195e0:	200061c8 	.word	0x200061c8
 80195e4:	00000409 	.word	0x00000409

080195e8 <USBD_Get_Interface_Number>:
{
 80195e8:	b530      	push	{r4, r5, lr}
 80195ea:	2303      	movs	r3, #3
 80195ec:	0004      	movs	r4, r0
  uint8_t itf_num = 0U;
 80195ee:	2000      	movs	r0, #0
 80195f0:	4a07      	ldr	r2, [pc, #28]	@ (8019610 <USBD_Get_Interface_Number+0x28>)
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 80195f2:	7b15      	ldrb	r5, [r2, #12]
 80195f4:	42a5      	cmp	r5, r4
 80195f6:	d105      	bne.n	8019604 <USBD_Get_Interface_Number+0x1c>
 80195f8:	7d15      	ldrb	r5, [r2, #20]
 80195fa:	428d      	cmp	r5, r1
 80195fc:	d102      	bne.n	8019604 <USBD_Get_Interface_Number+0x1c>
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 80195fe:	0010      	movs	r0, r2
 8019600:	305a      	adds	r0, #90	@ 0x5a
 8019602:	7800      	ldrb	r0, [r0, #0]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8019604:	3b01      	subs	r3, #1
 8019606:	b2db      	uxtb	r3, r3
 8019608:	325c      	adds	r2, #92	@ 0x5c
 801960a:	2b00      	cmp	r3, #0
 801960c:	d1f1      	bne.n	80195f2 <USBD_Get_Interface_Number+0xa>
}
 801960e:	bd30      	pop	{r4, r5, pc}
 8019610:	20006588 	.word	0x20006588

08019614 <USBD_Get_Configuration_Number>:
}
 8019614:	2001      	movs	r0, #1
 8019616:	4770      	bx	lr

08019618 <USBD_HID_ReportDesc>:
{
 8019618:	0003      	movs	r3, r0
  uint8_t *pHidReportDesc = NULL;
 801961a:	425a      	negs	r2, r3
 801961c:	4153      	adcs	r3, r2
      pHidReportDesc = USBD_CustomHID_ReportDesc;
 801961e:	4802      	ldr	r0, [pc, #8]	@ (8019628 <USBD_HID_ReportDesc+0x10>)
  uint8_t *pHidReportDesc = NULL;
 8019620:	425b      	negs	r3, r3
 8019622:	4018      	ands	r0, r3
}
 8019624:	4770      	bx	lr
 8019626:	46c0      	nop			@ (mov r8, r8)
 8019628:	20000294 	.word	0x20000294

0801962c <USBD_HID_ReportDesc_length>:
{
 801962c:	0003      	movs	r3, r0
  uint16_t ReportDesc_Size = 0;
 801962e:	425a      	negs	r2, r3
 8019630:	4153      	adcs	r3, r2
      ReportDesc_Size = sizeof(USBD_CustomHID_ReportDesc);
 8019632:	2021      	movs	r0, #33	@ 0x21
  uint16_t ReportDesc_Size = 0;
 8019634:	425b      	negs	r3, r3
 8019636:	4018      	ands	r0, r3
}
 8019638:	4770      	bx	lr

0801963a <USBD_STORAGE_Activate>:
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
}
 801963a:	4770      	bx	lr

0801963c <USBD_STORAGE_Deactivate>:
  * @brief  USBD_STORAGE_Deactivate
  *         This function is called when extraction of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Deactivate(VOID *storage_instance)
 801963c:	4770      	bx	lr
	...

08019640 <USBD_STORAGE_Read>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Read(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                       ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 8019640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN USBD_STORAGE_Read */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);

  while(number_blocks--) {
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 8019642:	2780      	movs	r7, #128	@ 0x80
{
 8019644:	0015      	movs	r5, r2
 8019646:	9c08      	ldr	r4, [sp, #32]
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 8019648:	017f      	lsls	r7, r7, #5
 801964a:	191e      	adds	r6, r3, r4
  while(number_blocks--) {
 801964c:	42b4      	cmp	r4, r6
 801964e:	d10e      	bne.n	801966e <USBD_STORAGE_Read+0x2e>
	  lba ++;
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
  }
  LOG_USB_MSC("--> USBD_STORAGE_Read: lba=%lu, num_blocks=%lu, status:%u\r\n", lba, (number_blocks+1),status);
 8019650:	2500      	movs	r5, #0
 8019652:	4b0c      	ldr	r3, [pc, #48]	@ (8019684 <USBD_STORAGE_Read+0x44>)
 8019654:	4a0c      	ldr	r2, [pc, #48]	@ (8019688 <USBD_STORAGE_Read+0x48>)
 8019656:	6818      	ldr	r0, [r3, #0]
 8019658:	9501      	str	r5, [sp, #4]
 801965a:	9500      	str	r5, [sp, #0]
 801965c:	0023      	movs	r3, r4
 801965e:	490b      	ldr	r1, [pc, #44]	@ (801968c <USBD_STORAGE_Read+0x4c>)
 8019660:	68c0      	ldr	r0, [r0, #12]
 8019662:	f000 fd4f 	bl	801a104 <fiprintf>
    /* Set the media status with the result */
    *media_status = status;
 8019666:	9b09      	ldr	r3, [sp, #36]	@ 0x24

  /* USER CODE END USBD_STORAGE_Read */

  return status;
}
 8019668:	0028      	movs	r0, r5
    *media_status = status;
 801966a:	601d      	str	r5, [r3, #0]
}
 801966c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 801966e:	0029      	movs	r1, r5
 8019670:	0320      	lsls	r0, r4, #12
 8019672:	003a      	movs	r2, r7
 8019674:	f7f0 fd54 	bl	800a120 <SPI_FLASH_ReadData>
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
 8019678:	2380      	movs	r3, #128	@ 0x80
 801967a:	015b      	lsls	r3, r3, #5
	  lba ++;
 801967c:	3401      	adds	r4, #1
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
 801967e:	18ed      	adds	r5, r5, r3
 8019680:	e7e4      	b.n	801964c <USBD_STORAGE_Read+0xc>
 8019682:	46c0      	nop			@ (mov r8, r8)
 8019684:	200002cc 	.word	0x200002cc
 8019688:	0801dbce 	.word	0x0801dbce
 801968c:	080201f0 	.word	0x080201f0

08019690 <USBD_STORAGE_Write>:
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(data_pointer);
  UX_PARAMETER_NOT_USED(number_blocks);
  UX_PARAMETER_NOT_USED(lba);

  *media_status = status;
 8019690:	2000      	movs	r0, #0
 8019692:	9b01      	ldr	r3, [sp, #4]
 8019694:	6018      	str	r0, [r3, #0]
  /* USER CODE END USBD_STORAGE_Write */

  return status;
}
 8019696:	4770      	bx	lr

08019698 <USBD_STORAGE_Flush>:
  UX_PARAMETER_NOT_USED(lba);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Flush */

  return status;
}
 8019698:	2000      	movs	r0, #0
 801969a:	4770      	bx	lr

0801969c <USBD_STORAGE_Status>:
  /* USER CODE BEGIN USBD_STORAGE_Status */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_id);
//  LOG_USB_MSC("USBD_STORAGE_Status\r\n");
  *media_status = UX_SUCCESS ;
 801969c:	2000      	movs	r0, #0
 801969e:	6018      	str	r0, [r3, #0]
  /* USER CODE END USBD_STORAGE_Status */

  return status;
}
 80196a0:	4770      	bx	lr

080196a2 <USBD_STORAGE_Notification>:
  UX_PARAMETER_NOT_USED(media_notification);
  UX_PARAMETER_NOT_USED(media_notification_length);
  /* USER CODE END USBD_STORAGE_Notification */

  return status;
}
 80196a2:	2000      	movs	r0, #0
 80196a4:	4770      	bx	lr
	...

080196a8 <USBD_STORAGE_GetMediaLastLba>:
{
  ULONG LastLba = 0U;

  /* USER CODE BEGIN USBD_STORAGE_GetMediaLastLba */
  LastLba = MSC_TOTAL_SECTORS -1;
  LOG_USB_MSC("USBD_STORAGE_GetMediaLastLba:%d\r\n",(int)LastLba);
 80196a8:	4b05      	ldr	r3, [pc, #20]	@ (80196c0 <USBD_STORAGE_GetMediaLastLba+0x18>)
{
 80196aa:	b510      	push	{r4, lr}
  LOG_USB_MSC("USBD_STORAGE_GetMediaLastLba:%d\r\n",(int)LastLba);
 80196ac:	6818      	ldr	r0, [r3, #0]
 80196ae:	4a05      	ldr	r2, [pc, #20]	@ (80196c4 <USBD_STORAGE_GetMediaLastLba+0x1c>)
 80196b0:	23ff      	movs	r3, #255	@ 0xff
 80196b2:	4905      	ldr	r1, [pc, #20]	@ (80196c8 <USBD_STORAGE_GetMediaLastLba+0x20>)
 80196b4:	68c0      	ldr	r0, [r0, #12]
 80196b6:	f000 fd25 	bl	801a104 <fiprintf>
  /* USER CODE END USBD_STORAGE_GetMediaLastLba */

  return LastLba;
}
 80196ba:	20ff      	movs	r0, #255	@ 0xff
 80196bc:	bd10      	pop	{r4, pc}
 80196be:	46c0      	nop			@ (mov r8, r8)
 80196c0:	200002cc 	.word	0x200002cc
 80196c4:	0801dbce 	.word	0x0801dbce
 80196c8:	08020231 	.word	0x08020231

080196cc <USBD_STORAGE_GetMediaBlocklength>:
  *         Get Media block length.
  * @param  none.
  * @retval block length.
  */
ULONG USBD_STORAGE_GetMediaBlocklength(VOID)
{
 80196cc:	b510      	push	{r4, lr}
  ULONG MediaBlockLen = 0U;

  /* USER CODE BEGIN USBD_STORAGE_GetMediaBlocklength */
  MediaBlockLen = MSC_MEDIA_BLOCK_SIZE;
  LOG_USB_MSC("USBD_STORAGE_GetMediaBlocklength:%d\r\n",(int)MediaBlockLen);
 80196ce:	2480      	movs	r4, #128	@ 0x80
 80196d0:	4b05      	ldr	r3, [pc, #20]	@ (80196e8 <USBD_STORAGE_GetMediaBlocklength+0x1c>)
 80196d2:	0164      	lsls	r4, r4, #5
 80196d4:	6818      	ldr	r0, [r3, #0]
 80196d6:	4a05      	ldr	r2, [pc, #20]	@ (80196ec <USBD_STORAGE_GetMediaBlocklength+0x20>)
 80196d8:	0023      	movs	r3, r4
 80196da:	4905      	ldr	r1, [pc, #20]	@ (80196f0 <USBD_STORAGE_GetMediaBlocklength+0x24>)
 80196dc:	68c0      	ldr	r0, [r0, #12]
 80196de:	f000 fd11 	bl	801a104 <fiprintf>
  /* USER CODE END USBD_STORAGE_GetMediaBlocklength */

  return MediaBlockLen;
}
 80196e2:	0020      	movs	r0, r4
 80196e4:	bd10      	pop	{r4, pc}
 80196e6:	46c0      	nop			@ (mov r8, r8)
 80196e8:	200002cc 	.word	0x200002cc
 80196ec:	0801dbce 	.word	0x0801dbce
 80196f0:	08020258 	.word	0x08020258

080196f4 <__cvt>:
 80196f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196f6:	001f      	movs	r7, r3
 80196f8:	2300      	movs	r3, #0
 80196fa:	0016      	movs	r6, r2
 80196fc:	b08b      	sub	sp, #44	@ 0x2c
 80196fe:	429f      	cmp	r7, r3
 8019700:	da04      	bge.n	801970c <__cvt+0x18>
 8019702:	2180      	movs	r1, #128	@ 0x80
 8019704:	0609      	lsls	r1, r1, #24
 8019706:	187b      	adds	r3, r7, r1
 8019708:	001f      	movs	r7, r3
 801970a:	232d      	movs	r3, #45	@ 0x2d
 801970c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801970e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8019710:	7013      	strb	r3, [r2, #0]
 8019712:	2320      	movs	r3, #32
 8019714:	2203      	movs	r2, #3
 8019716:	439d      	bics	r5, r3
 8019718:	2d46      	cmp	r5, #70	@ 0x46
 801971a:	d007      	beq.n	801972c <__cvt+0x38>
 801971c:	002b      	movs	r3, r5
 801971e:	3b45      	subs	r3, #69	@ 0x45
 8019720:	4259      	negs	r1, r3
 8019722:	414b      	adcs	r3, r1
 8019724:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019726:	3a01      	subs	r2, #1
 8019728:	18cb      	adds	r3, r1, r3
 801972a:	9310      	str	r3, [sp, #64]	@ 0x40
 801972c:	ab09      	add	r3, sp, #36	@ 0x24
 801972e:	9304      	str	r3, [sp, #16]
 8019730:	ab08      	add	r3, sp, #32
 8019732:	9303      	str	r3, [sp, #12]
 8019734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019736:	9200      	str	r2, [sp, #0]
 8019738:	9302      	str	r3, [sp, #8]
 801973a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801973c:	0032      	movs	r2, r6
 801973e:	9301      	str	r3, [sp, #4]
 8019740:	003b      	movs	r3, r7
 8019742:	f001 f82f 	bl	801a7a4 <_dtoa_r>
 8019746:	0004      	movs	r4, r0
 8019748:	2d47      	cmp	r5, #71	@ 0x47
 801974a:	d11b      	bne.n	8019784 <__cvt+0x90>
 801974c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801974e:	07db      	lsls	r3, r3, #31
 8019750:	d511      	bpl.n	8019776 <__cvt+0x82>
 8019752:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019754:	18c3      	adds	r3, r0, r3
 8019756:	9307      	str	r3, [sp, #28]
 8019758:	2200      	movs	r2, #0
 801975a:	2300      	movs	r3, #0
 801975c:	0030      	movs	r0, r6
 801975e:	0039      	movs	r1, r7
 8019760:	f7e6 fe88 	bl	8000474 <__aeabi_dcmpeq>
 8019764:	2800      	cmp	r0, #0
 8019766:	d001      	beq.n	801976c <__cvt+0x78>
 8019768:	9b07      	ldr	r3, [sp, #28]
 801976a:	9309      	str	r3, [sp, #36]	@ 0x24
 801976c:	2230      	movs	r2, #48	@ 0x30
 801976e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019770:	9907      	ldr	r1, [sp, #28]
 8019772:	428b      	cmp	r3, r1
 8019774:	d320      	bcc.n	80197b8 <__cvt+0xc4>
 8019776:	0020      	movs	r0, r4
 8019778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801977a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801977c:	1b1b      	subs	r3, r3, r4
 801977e:	6013      	str	r3, [r2, #0]
 8019780:	b00b      	add	sp, #44	@ 0x2c
 8019782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019784:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019786:	18c3      	adds	r3, r0, r3
 8019788:	9307      	str	r3, [sp, #28]
 801978a:	2d46      	cmp	r5, #70	@ 0x46
 801978c:	d1e4      	bne.n	8019758 <__cvt+0x64>
 801978e:	7803      	ldrb	r3, [r0, #0]
 8019790:	2b30      	cmp	r3, #48	@ 0x30
 8019792:	d10c      	bne.n	80197ae <__cvt+0xba>
 8019794:	2200      	movs	r2, #0
 8019796:	2300      	movs	r3, #0
 8019798:	0030      	movs	r0, r6
 801979a:	0039      	movs	r1, r7
 801979c:	f7e6 fe6a 	bl	8000474 <__aeabi_dcmpeq>
 80197a0:	2800      	cmp	r0, #0
 80197a2:	d104      	bne.n	80197ae <__cvt+0xba>
 80197a4:	2301      	movs	r3, #1
 80197a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80197a8:	1a9b      	subs	r3, r3, r2
 80197aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80197ac:	6013      	str	r3, [r2, #0]
 80197ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80197b0:	9a07      	ldr	r2, [sp, #28]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	18d3      	adds	r3, r2, r3
 80197b6:	e7ce      	b.n	8019756 <__cvt+0x62>
 80197b8:	1c59      	adds	r1, r3, #1
 80197ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80197bc:	701a      	strb	r2, [r3, #0]
 80197be:	e7d6      	b.n	801976e <__cvt+0x7a>

080197c0 <__exponent>:
 80197c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197c2:	232b      	movs	r3, #43	@ 0x2b
 80197c4:	b085      	sub	sp, #20
 80197c6:	0005      	movs	r5, r0
 80197c8:	1e0c      	subs	r4, r1, #0
 80197ca:	7002      	strb	r2, [r0, #0]
 80197cc:	da01      	bge.n	80197d2 <__exponent+0x12>
 80197ce:	424c      	negs	r4, r1
 80197d0:	3302      	adds	r3, #2
 80197d2:	706b      	strb	r3, [r5, #1]
 80197d4:	2c09      	cmp	r4, #9
 80197d6:	dd2c      	ble.n	8019832 <__exponent+0x72>
 80197d8:	ab02      	add	r3, sp, #8
 80197da:	1dde      	adds	r6, r3, #7
 80197dc:	0020      	movs	r0, r4
 80197de:	210a      	movs	r1, #10
 80197e0:	f7e6 fe32 	bl	8000448 <__aeabi_idivmod>
 80197e4:	0037      	movs	r7, r6
 80197e6:	3130      	adds	r1, #48	@ 0x30
 80197e8:	3e01      	subs	r6, #1
 80197ea:	0020      	movs	r0, r4
 80197ec:	7031      	strb	r1, [r6, #0]
 80197ee:	210a      	movs	r1, #10
 80197f0:	9401      	str	r4, [sp, #4]
 80197f2:	f7e6 fd43 	bl	800027c <__divsi3>
 80197f6:	9b01      	ldr	r3, [sp, #4]
 80197f8:	0004      	movs	r4, r0
 80197fa:	2b63      	cmp	r3, #99	@ 0x63
 80197fc:	dcee      	bgt.n	80197dc <__exponent+0x1c>
 80197fe:	1eba      	subs	r2, r7, #2
 8019800:	1ca8      	adds	r0, r5, #2
 8019802:	0001      	movs	r1, r0
 8019804:	0013      	movs	r3, r2
 8019806:	3430      	adds	r4, #48	@ 0x30
 8019808:	7014      	strb	r4, [r2, #0]
 801980a:	ac02      	add	r4, sp, #8
 801980c:	3407      	adds	r4, #7
 801980e:	429c      	cmp	r4, r3
 8019810:	d80a      	bhi.n	8019828 <__exponent+0x68>
 8019812:	2300      	movs	r3, #0
 8019814:	4294      	cmp	r4, r2
 8019816:	d303      	bcc.n	8019820 <__exponent+0x60>
 8019818:	3309      	adds	r3, #9
 801981a:	aa02      	add	r2, sp, #8
 801981c:	189b      	adds	r3, r3, r2
 801981e:	1bdb      	subs	r3, r3, r7
 8019820:	18c0      	adds	r0, r0, r3
 8019822:	1b40      	subs	r0, r0, r5
 8019824:	b005      	add	sp, #20
 8019826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019828:	781c      	ldrb	r4, [r3, #0]
 801982a:	3301      	adds	r3, #1
 801982c:	700c      	strb	r4, [r1, #0]
 801982e:	3101      	adds	r1, #1
 8019830:	e7eb      	b.n	801980a <__exponent+0x4a>
 8019832:	2330      	movs	r3, #48	@ 0x30
 8019834:	18e4      	adds	r4, r4, r3
 8019836:	70ab      	strb	r3, [r5, #2]
 8019838:	1d28      	adds	r0, r5, #4
 801983a:	70ec      	strb	r4, [r5, #3]
 801983c:	e7f1      	b.n	8019822 <__exponent+0x62>
	...

08019840 <_printf_float>:
 8019840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019842:	b097      	sub	sp, #92	@ 0x5c
 8019844:	000d      	movs	r5, r1
 8019846:	920a      	str	r2, [sp, #40]	@ 0x28
 8019848:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801984a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801984c:	9009      	str	r0, [sp, #36]	@ 0x24
 801984e:	f000 fe89 	bl	801a564 <_localeconv_r>
 8019852:	6803      	ldr	r3, [r0, #0]
 8019854:	0018      	movs	r0, r3
 8019856:	930d      	str	r3, [sp, #52]	@ 0x34
 8019858:	f7e6 fc56 	bl	8000108 <strlen>
 801985c:	2300      	movs	r3, #0
 801985e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8019860:	9314      	str	r3, [sp, #80]	@ 0x50
 8019862:	7e2b      	ldrb	r3, [r5, #24]
 8019864:	2207      	movs	r2, #7
 8019866:	930c      	str	r3, [sp, #48]	@ 0x30
 8019868:	682b      	ldr	r3, [r5, #0]
 801986a:	930e      	str	r3, [sp, #56]	@ 0x38
 801986c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801986e:	6823      	ldr	r3, [r4, #0]
 8019870:	05c9      	lsls	r1, r1, #23
 8019872:	d545      	bpl.n	8019900 <_printf_float+0xc0>
 8019874:	189b      	adds	r3, r3, r2
 8019876:	4393      	bics	r3, r2
 8019878:	001a      	movs	r2, r3
 801987a:	3208      	adds	r2, #8
 801987c:	6022      	str	r2, [r4, #0]
 801987e:	2201      	movs	r2, #1
 8019880:	681e      	ldr	r6, [r3, #0]
 8019882:	685f      	ldr	r7, [r3, #4]
 8019884:	007b      	lsls	r3, r7, #1
 8019886:	085b      	lsrs	r3, r3, #1
 8019888:	9311      	str	r3, [sp, #68]	@ 0x44
 801988a:	9610      	str	r6, [sp, #64]	@ 0x40
 801988c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801988e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8019890:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019892:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019894:	4ba7      	ldr	r3, [pc, #668]	@ (8019b34 <_printf_float+0x2f4>)
 8019896:	4252      	negs	r2, r2
 8019898:	f7e9 fece 	bl	8003638 <__aeabi_dcmpun>
 801989c:	2800      	cmp	r0, #0
 801989e:	d131      	bne.n	8019904 <_printf_float+0xc4>
 80198a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80198a2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80198a4:	2201      	movs	r2, #1
 80198a6:	4ba3      	ldr	r3, [pc, #652]	@ (8019b34 <_printf_float+0x2f4>)
 80198a8:	4252      	negs	r2, r2
 80198aa:	f7e6 fdf3 	bl	8000494 <__aeabi_dcmple>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	d128      	bne.n	8019904 <_printf_float+0xc4>
 80198b2:	2200      	movs	r2, #0
 80198b4:	2300      	movs	r3, #0
 80198b6:	0030      	movs	r0, r6
 80198b8:	0039      	movs	r1, r7
 80198ba:	f7e6 fde1 	bl	8000480 <__aeabi_dcmplt>
 80198be:	2800      	cmp	r0, #0
 80198c0:	d003      	beq.n	80198ca <_printf_float+0x8a>
 80198c2:	002b      	movs	r3, r5
 80198c4:	222d      	movs	r2, #45	@ 0x2d
 80198c6:	3343      	adds	r3, #67	@ 0x43
 80198c8:	701a      	strb	r2, [r3, #0]
 80198ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80198cc:	4f9a      	ldr	r7, [pc, #616]	@ (8019b38 <_printf_float+0x2f8>)
 80198ce:	2b47      	cmp	r3, #71	@ 0x47
 80198d0:	d800      	bhi.n	80198d4 <_printf_float+0x94>
 80198d2:	4f9a      	ldr	r7, [pc, #616]	@ (8019b3c <_printf_float+0x2fc>)
 80198d4:	2303      	movs	r3, #3
 80198d6:	2400      	movs	r4, #0
 80198d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80198da:	612b      	str	r3, [r5, #16]
 80198dc:	3301      	adds	r3, #1
 80198de:	439a      	bics	r2, r3
 80198e0:	602a      	str	r2, [r5, #0]
 80198e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80198e4:	0029      	movs	r1, r5
 80198e6:	9300      	str	r3, [sp, #0]
 80198e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80198ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80198ec:	aa15      	add	r2, sp, #84	@ 0x54
 80198ee:	f000 f9e5 	bl	8019cbc <_printf_common>
 80198f2:	3001      	adds	r0, #1
 80198f4:	d000      	beq.n	80198f8 <_printf_float+0xb8>
 80198f6:	e09e      	b.n	8019a36 <_printf_float+0x1f6>
 80198f8:	2001      	movs	r0, #1
 80198fa:	4240      	negs	r0, r0
 80198fc:	b017      	add	sp, #92	@ 0x5c
 80198fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019900:	3307      	adds	r3, #7
 8019902:	e7b8      	b.n	8019876 <_printf_float+0x36>
 8019904:	0032      	movs	r2, r6
 8019906:	003b      	movs	r3, r7
 8019908:	0030      	movs	r0, r6
 801990a:	0039      	movs	r1, r7
 801990c:	f7e9 fe94 	bl	8003638 <__aeabi_dcmpun>
 8019910:	2800      	cmp	r0, #0
 8019912:	d00b      	beq.n	801992c <_printf_float+0xec>
 8019914:	2f00      	cmp	r7, #0
 8019916:	da03      	bge.n	8019920 <_printf_float+0xe0>
 8019918:	002b      	movs	r3, r5
 801991a:	222d      	movs	r2, #45	@ 0x2d
 801991c:	3343      	adds	r3, #67	@ 0x43
 801991e:	701a      	strb	r2, [r3, #0]
 8019920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019922:	4f87      	ldr	r7, [pc, #540]	@ (8019b40 <_printf_float+0x300>)
 8019924:	2b47      	cmp	r3, #71	@ 0x47
 8019926:	d8d5      	bhi.n	80198d4 <_printf_float+0x94>
 8019928:	4f86      	ldr	r7, [pc, #536]	@ (8019b44 <_printf_float+0x304>)
 801992a:	e7d3      	b.n	80198d4 <_printf_float+0x94>
 801992c:	2220      	movs	r2, #32
 801992e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019930:	686b      	ldr	r3, [r5, #4]
 8019932:	4394      	bics	r4, r2
 8019934:	1c5a      	adds	r2, r3, #1
 8019936:	d146      	bne.n	80199c6 <_printf_float+0x186>
 8019938:	3307      	adds	r3, #7
 801993a:	606b      	str	r3, [r5, #4]
 801993c:	2380      	movs	r3, #128	@ 0x80
 801993e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019940:	00db      	lsls	r3, r3, #3
 8019942:	4313      	orrs	r3, r2
 8019944:	2200      	movs	r2, #0
 8019946:	602b      	str	r3, [r5, #0]
 8019948:	9206      	str	r2, [sp, #24]
 801994a:	aa14      	add	r2, sp, #80	@ 0x50
 801994c:	9205      	str	r2, [sp, #20]
 801994e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019950:	a90a      	add	r1, sp, #40	@ 0x28
 8019952:	9204      	str	r2, [sp, #16]
 8019954:	aa13      	add	r2, sp, #76	@ 0x4c
 8019956:	9203      	str	r2, [sp, #12]
 8019958:	2223      	movs	r2, #35	@ 0x23
 801995a:	1852      	adds	r2, r2, r1
 801995c:	9202      	str	r2, [sp, #8]
 801995e:	9301      	str	r3, [sp, #4]
 8019960:	686b      	ldr	r3, [r5, #4]
 8019962:	0032      	movs	r2, r6
 8019964:	9300      	str	r3, [sp, #0]
 8019966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019968:	003b      	movs	r3, r7
 801996a:	f7ff fec3 	bl	80196f4 <__cvt>
 801996e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019970:	0007      	movs	r7, r0
 8019972:	2c47      	cmp	r4, #71	@ 0x47
 8019974:	d12d      	bne.n	80199d2 <_printf_float+0x192>
 8019976:	1cd3      	adds	r3, r2, #3
 8019978:	db02      	blt.n	8019980 <_printf_float+0x140>
 801997a:	686b      	ldr	r3, [r5, #4]
 801997c:	429a      	cmp	r2, r3
 801997e:	dd47      	ble.n	8019a10 <_printf_float+0x1d0>
 8019980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019982:	3b02      	subs	r3, #2
 8019984:	b2db      	uxtb	r3, r3
 8019986:	930c      	str	r3, [sp, #48]	@ 0x30
 8019988:	0028      	movs	r0, r5
 801998a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801998c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801998e:	3901      	subs	r1, #1
 8019990:	3050      	adds	r0, #80	@ 0x50
 8019992:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019994:	f7ff ff14 	bl	80197c0 <__exponent>
 8019998:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801999a:	0004      	movs	r4, r0
 801999c:	1813      	adds	r3, r2, r0
 801999e:	612b      	str	r3, [r5, #16]
 80199a0:	2a01      	cmp	r2, #1
 80199a2:	dc02      	bgt.n	80199aa <_printf_float+0x16a>
 80199a4:	682a      	ldr	r2, [r5, #0]
 80199a6:	07d2      	lsls	r2, r2, #31
 80199a8:	d501      	bpl.n	80199ae <_printf_float+0x16e>
 80199aa:	3301      	adds	r3, #1
 80199ac:	612b      	str	r3, [r5, #16]
 80199ae:	2323      	movs	r3, #35	@ 0x23
 80199b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80199b2:	189b      	adds	r3, r3, r2
 80199b4:	781b      	ldrb	r3, [r3, #0]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d100      	bne.n	80199bc <_printf_float+0x17c>
 80199ba:	e792      	b.n	80198e2 <_printf_float+0xa2>
 80199bc:	002b      	movs	r3, r5
 80199be:	222d      	movs	r2, #45	@ 0x2d
 80199c0:	3343      	adds	r3, #67	@ 0x43
 80199c2:	701a      	strb	r2, [r3, #0]
 80199c4:	e78d      	b.n	80198e2 <_printf_float+0xa2>
 80199c6:	2c47      	cmp	r4, #71	@ 0x47
 80199c8:	d1b8      	bne.n	801993c <_printf_float+0xfc>
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d1b6      	bne.n	801993c <_printf_float+0xfc>
 80199ce:	3301      	adds	r3, #1
 80199d0:	e7b3      	b.n	801993a <_printf_float+0xfa>
 80199d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199d4:	2b65      	cmp	r3, #101	@ 0x65
 80199d6:	d9d7      	bls.n	8019988 <_printf_float+0x148>
 80199d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199da:	2b66      	cmp	r3, #102	@ 0x66
 80199dc:	d11a      	bne.n	8019a14 <_printf_float+0x1d4>
 80199de:	686b      	ldr	r3, [r5, #4]
 80199e0:	2a00      	cmp	r2, #0
 80199e2:	dd09      	ble.n	80199f8 <_printf_float+0x1b8>
 80199e4:	612a      	str	r2, [r5, #16]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d102      	bne.n	80199f0 <_printf_float+0x1b0>
 80199ea:	6829      	ldr	r1, [r5, #0]
 80199ec:	07c9      	lsls	r1, r1, #31
 80199ee:	d50b      	bpl.n	8019a08 <_printf_float+0x1c8>
 80199f0:	3301      	adds	r3, #1
 80199f2:	189b      	adds	r3, r3, r2
 80199f4:	612b      	str	r3, [r5, #16]
 80199f6:	e007      	b.n	8019a08 <_printf_float+0x1c8>
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d103      	bne.n	8019a04 <_printf_float+0x1c4>
 80199fc:	2201      	movs	r2, #1
 80199fe:	6829      	ldr	r1, [r5, #0]
 8019a00:	4211      	tst	r1, r2
 8019a02:	d000      	beq.n	8019a06 <_printf_float+0x1c6>
 8019a04:	1c9a      	adds	r2, r3, #2
 8019a06:	612a      	str	r2, [r5, #16]
 8019a08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019a0a:	2400      	movs	r4, #0
 8019a0c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8019a0e:	e7ce      	b.n	80199ae <_printf_float+0x16e>
 8019a10:	2367      	movs	r3, #103	@ 0x67
 8019a12:	930c      	str	r3, [sp, #48]	@ 0x30
 8019a14:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019a16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019a18:	4299      	cmp	r1, r3
 8019a1a:	db06      	blt.n	8019a2a <_printf_float+0x1ea>
 8019a1c:	682b      	ldr	r3, [r5, #0]
 8019a1e:	6129      	str	r1, [r5, #16]
 8019a20:	07db      	lsls	r3, r3, #31
 8019a22:	d5f1      	bpl.n	8019a08 <_printf_float+0x1c8>
 8019a24:	3101      	adds	r1, #1
 8019a26:	6129      	str	r1, [r5, #16]
 8019a28:	e7ee      	b.n	8019a08 <_printf_float+0x1c8>
 8019a2a:	2201      	movs	r2, #1
 8019a2c:	2900      	cmp	r1, #0
 8019a2e:	dce0      	bgt.n	80199f2 <_printf_float+0x1b2>
 8019a30:	1892      	adds	r2, r2, r2
 8019a32:	1a52      	subs	r2, r2, r1
 8019a34:	e7dd      	b.n	80199f2 <_printf_float+0x1b2>
 8019a36:	682a      	ldr	r2, [r5, #0]
 8019a38:	0553      	lsls	r3, r2, #21
 8019a3a:	d408      	bmi.n	8019a4e <_printf_float+0x20e>
 8019a3c:	692b      	ldr	r3, [r5, #16]
 8019a3e:	003a      	movs	r2, r7
 8019a40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019a46:	47a0      	blx	r4
 8019a48:	3001      	adds	r0, #1
 8019a4a:	d129      	bne.n	8019aa0 <_printf_float+0x260>
 8019a4c:	e754      	b.n	80198f8 <_printf_float+0xb8>
 8019a4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a50:	2b65      	cmp	r3, #101	@ 0x65
 8019a52:	d800      	bhi.n	8019a56 <_printf_float+0x216>
 8019a54:	e0db      	b.n	8019c0e <_printf_float+0x3ce>
 8019a56:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8019a58:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	f7e6 fd09 	bl	8000474 <__aeabi_dcmpeq>
 8019a62:	2800      	cmp	r0, #0
 8019a64:	d033      	beq.n	8019ace <_printf_float+0x28e>
 8019a66:	2301      	movs	r3, #1
 8019a68:	4a37      	ldr	r2, [pc, #220]	@ (8019b48 <_printf_float+0x308>)
 8019a6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019a6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019a70:	47a0      	blx	r4
 8019a72:	3001      	adds	r0, #1
 8019a74:	d100      	bne.n	8019a78 <_printf_float+0x238>
 8019a76:	e73f      	b.n	80198f8 <_printf_float+0xb8>
 8019a78:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019a7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019a7c:	42b3      	cmp	r3, r6
 8019a7e:	db02      	blt.n	8019a86 <_printf_float+0x246>
 8019a80:	682b      	ldr	r3, [r5, #0]
 8019a82:	07db      	lsls	r3, r3, #31
 8019a84:	d50c      	bpl.n	8019aa0 <_printf_float+0x260>
 8019a86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019a8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a90:	47a0      	blx	r4
 8019a92:	2400      	movs	r4, #0
 8019a94:	3001      	adds	r0, #1
 8019a96:	d100      	bne.n	8019a9a <_printf_float+0x25a>
 8019a98:	e72e      	b.n	80198f8 <_printf_float+0xb8>
 8019a9a:	1e73      	subs	r3, r6, #1
 8019a9c:	42a3      	cmp	r3, r4
 8019a9e:	dc0a      	bgt.n	8019ab6 <_printf_float+0x276>
 8019aa0:	682b      	ldr	r3, [r5, #0]
 8019aa2:	079b      	lsls	r3, r3, #30
 8019aa4:	d500      	bpl.n	8019aa8 <_printf_float+0x268>
 8019aa6:	e106      	b.n	8019cb6 <_printf_float+0x476>
 8019aa8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019aaa:	68e8      	ldr	r0, [r5, #12]
 8019aac:	4298      	cmp	r0, r3
 8019aae:	db00      	blt.n	8019ab2 <_printf_float+0x272>
 8019ab0:	e724      	b.n	80198fc <_printf_float+0xbc>
 8019ab2:	0018      	movs	r0, r3
 8019ab4:	e722      	b.n	80198fc <_printf_float+0xbc>
 8019ab6:	002a      	movs	r2, r5
 8019ab8:	2301      	movs	r3, #1
 8019aba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019abc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019abe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019ac0:	321a      	adds	r2, #26
 8019ac2:	47b8      	blx	r7
 8019ac4:	3001      	adds	r0, #1
 8019ac6:	d100      	bne.n	8019aca <_printf_float+0x28a>
 8019ac8:	e716      	b.n	80198f8 <_printf_float+0xb8>
 8019aca:	3401      	adds	r4, #1
 8019acc:	e7e5      	b.n	8019a9a <_printf_float+0x25a>
 8019ace:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	dc3b      	bgt.n	8019b4c <_printf_float+0x30c>
 8019ad4:	2301      	movs	r3, #1
 8019ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8019b48 <_printf_float+0x308>)
 8019ad8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019adc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019ade:	47a0      	blx	r4
 8019ae0:	3001      	adds	r0, #1
 8019ae2:	d100      	bne.n	8019ae6 <_printf_float+0x2a6>
 8019ae4:	e708      	b.n	80198f8 <_printf_float+0xb8>
 8019ae6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019ae8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019aea:	4333      	orrs	r3, r6
 8019aec:	d102      	bne.n	8019af4 <_printf_float+0x2b4>
 8019aee:	682b      	ldr	r3, [r5, #0]
 8019af0:	07db      	lsls	r3, r3, #31
 8019af2:	d5d5      	bpl.n	8019aa0 <_printf_float+0x260>
 8019af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019af6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019af8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019afc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019afe:	47a0      	blx	r4
 8019b00:	2300      	movs	r3, #0
 8019b02:	3001      	adds	r0, #1
 8019b04:	d100      	bne.n	8019b08 <_printf_float+0x2c8>
 8019b06:	e6f7      	b.n	80198f8 <_printf_float+0xb8>
 8019b08:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019b0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019b0e:	425b      	negs	r3, r3
 8019b10:	4293      	cmp	r3, r2
 8019b12:	dc01      	bgt.n	8019b18 <_printf_float+0x2d8>
 8019b14:	0033      	movs	r3, r6
 8019b16:	e792      	b.n	8019a3e <_printf_float+0x1fe>
 8019b18:	002a      	movs	r2, r5
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019b20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019b22:	321a      	adds	r2, #26
 8019b24:	47a0      	blx	r4
 8019b26:	3001      	adds	r0, #1
 8019b28:	d100      	bne.n	8019b2c <_printf_float+0x2ec>
 8019b2a:	e6e5      	b.n	80198f8 <_printf_float+0xb8>
 8019b2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b2e:	3301      	adds	r3, #1
 8019b30:	e7ea      	b.n	8019b08 <_printf_float+0x2c8>
 8019b32:	46c0      	nop			@ (mov r8, r8)
 8019b34:	7fefffff 	.word	0x7fefffff
 8019b38:	08020287 	.word	0x08020287
 8019b3c:	08020283 	.word	0x08020283
 8019b40:	0802028f 	.word	0x0802028f
 8019b44:	0802028b 	.word	0x0802028b
 8019b48:	0801ffe8 	.word	0x0801ffe8
 8019b4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019b4e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8019b50:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b52:	429e      	cmp	r6, r3
 8019b54:	dd00      	ble.n	8019b58 <_printf_float+0x318>
 8019b56:	001e      	movs	r6, r3
 8019b58:	2e00      	cmp	r6, #0
 8019b5a:	dc31      	bgt.n	8019bc0 <_printf_float+0x380>
 8019b5c:	43f3      	mvns	r3, r6
 8019b5e:	2400      	movs	r4, #0
 8019b60:	17db      	asrs	r3, r3, #31
 8019b62:	4033      	ands	r3, r6
 8019b64:	930e      	str	r3, [sp, #56]	@ 0x38
 8019b66:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8019b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b6a:	1af3      	subs	r3, r6, r3
 8019b6c:	42a3      	cmp	r3, r4
 8019b6e:	dc30      	bgt.n	8019bd2 <_printf_float+0x392>
 8019b70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019b72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019b74:	429a      	cmp	r2, r3
 8019b76:	dc38      	bgt.n	8019bea <_printf_float+0x3aa>
 8019b78:	682b      	ldr	r3, [r5, #0]
 8019b7a:	07db      	lsls	r3, r3, #31
 8019b7c:	d435      	bmi.n	8019bea <_printf_float+0x3aa>
 8019b7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019b80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019b84:	1b9b      	subs	r3, r3, r6
 8019b86:	1b14      	subs	r4, r2, r4
 8019b88:	429c      	cmp	r4, r3
 8019b8a:	dd00      	ble.n	8019b8e <_printf_float+0x34e>
 8019b8c:	001c      	movs	r4, r3
 8019b8e:	2c00      	cmp	r4, #0
 8019b90:	dc34      	bgt.n	8019bfc <_printf_float+0x3bc>
 8019b92:	43e3      	mvns	r3, r4
 8019b94:	2600      	movs	r6, #0
 8019b96:	17db      	asrs	r3, r3, #31
 8019b98:	401c      	ands	r4, r3
 8019b9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019b9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019b9e:	1ad3      	subs	r3, r2, r3
 8019ba0:	1b1b      	subs	r3, r3, r4
 8019ba2:	42b3      	cmp	r3, r6
 8019ba4:	dc00      	bgt.n	8019ba8 <_printf_float+0x368>
 8019ba6:	e77b      	b.n	8019aa0 <_printf_float+0x260>
 8019ba8:	002a      	movs	r2, r5
 8019baa:	2301      	movs	r3, #1
 8019bac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bb0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019bb2:	321a      	adds	r2, #26
 8019bb4:	47b8      	blx	r7
 8019bb6:	3001      	adds	r0, #1
 8019bb8:	d100      	bne.n	8019bbc <_printf_float+0x37c>
 8019bba:	e69d      	b.n	80198f8 <_printf_float+0xb8>
 8019bbc:	3601      	adds	r6, #1
 8019bbe:	e7ec      	b.n	8019b9a <_printf_float+0x35a>
 8019bc0:	0033      	movs	r3, r6
 8019bc2:	003a      	movs	r2, r7
 8019bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019bca:	47a0      	blx	r4
 8019bcc:	3001      	adds	r0, #1
 8019bce:	d1c5      	bne.n	8019b5c <_printf_float+0x31c>
 8019bd0:	e692      	b.n	80198f8 <_printf_float+0xb8>
 8019bd2:	002a      	movs	r2, r5
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019bd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bda:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019bdc:	321a      	adds	r2, #26
 8019bde:	47b0      	blx	r6
 8019be0:	3001      	adds	r0, #1
 8019be2:	d100      	bne.n	8019be6 <_printf_float+0x3a6>
 8019be4:	e688      	b.n	80198f8 <_printf_float+0xb8>
 8019be6:	3401      	adds	r4, #1
 8019be8:	e7bd      	b.n	8019b66 <_printf_float+0x326>
 8019bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019bec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019bee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019bf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bf2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019bf4:	47a0      	blx	r4
 8019bf6:	3001      	adds	r0, #1
 8019bf8:	d1c1      	bne.n	8019b7e <_printf_float+0x33e>
 8019bfa:	e67d      	b.n	80198f8 <_printf_float+0xb8>
 8019bfc:	19ba      	adds	r2, r7, r6
 8019bfe:	0023      	movs	r3, r4
 8019c00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019c06:	47b0      	blx	r6
 8019c08:	3001      	adds	r0, #1
 8019c0a:	d1c2      	bne.n	8019b92 <_printf_float+0x352>
 8019c0c:	e674      	b.n	80198f8 <_printf_float+0xb8>
 8019c0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019c10:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c12:	2b01      	cmp	r3, #1
 8019c14:	dc02      	bgt.n	8019c1c <_printf_float+0x3dc>
 8019c16:	2301      	movs	r3, #1
 8019c18:	421a      	tst	r2, r3
 8019c1a:	d039      	beq.n	8019c90 <_printf_float+0x450>
 8019c1c:	2301      	movs	r3, #1
 8019c1e:	003a      	movs	r2, r7
 8019c20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019c26:	47b0      	blx	r6
 8019c28:	3001      	adds	r0, #1
 8019c2a:	d100      	bne.n	8019c2e <_printf_float+0x3ee>
 8019c2c:	e664      	b.n	80198f8 <_printf_float+0xb8>
 8019c2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c36:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019c38:	47b0      	blx	r6
 8019c3a:	3001      	adds	r0, #1
 8019c3c:	d100      	bne.n	8019c40 <_printf_float+0x400>
 8019c3e:	e65b      	b.n	80198f8 <_printf_float+0xb8>
 8019c40:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8019c42:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8019c44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c46:	2200      	movs	r2, #0
 8019c48:	3b01      	subs	r3, #1
 8019c4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	f7e6 fc11 	bl	8000474 <__aeabi_dcmpeq>
 8019c52:	2800      	cmp	r0, #0
 8019c54:	d11a      	bne.n	8019c8c <_printf_float+0x44c>
 8019c56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c58:	1c7a      	adds	r2, r7, #1
 8019c5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019c60:	47b0      	blx	r6
 8019c62:	3001      	adds	r0, #1
 8019c64:	d10e      	bne.n	8019c84 <_printf_float+0x444>
 8019c66:	e647      	b.n	80198f8 <_printf_float+0xb8>
 8019c68:	002a      	movs	r2, r5
 8019c6a:	2301      	movs	r3, #1
 8019c6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019c72:	321a      	adds	r2, #26
 8019c74:	47b8      	blx	r7
 8019c76:	3001      	adds	r0, #1
 8019c78:	d100      	bne.n	8019c7c <_printf_float+0x43c>
 8019c7a:	e63d      	b.n	80198f8 <_printf_float+0xb8>
 8019c7c:	3601      	adds	r6, #1
 8019c7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c80:	429e      	cmp	r6, r3
 8019c82:	dbf1      	blt.n	8019c68 <_printf_float+0x428>
 8019c84:	002a      	movs	r2, r5
 8019c86:	0023      	movs	r3, r4
 8019c88:	3250      	adds	r2, #80	@ 0x50
 8019c8a:	e6d9      	b.n	8019a40 <_printf_float+0x200>
 8019c8c:	2600      	movs	r6, #0
 8019c8e:	e7f6      	b.n	8019c7e <_printf_float+0x43e>
 8019c90:	003a      	movs	r2, r7
 8019c92:	e7e2      	b.n	8019c5a <_printf_float+0x41a>
 8019c94:	002a      	movs	r2, r5
 8019c96:	2301      	movs	r3, #1
 8019c98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019c9e:	3219      	adds	r2, #25
 8019ca0:	47b0      	blx	r6
 8019ca2:	3001      	adds	r0, #1
 8019ca4:	d100      	bne.n	8019ca8 <_printf_float+0x468>
 8019ca6:	e627      	b.n	80198f8 <_printf_float+0xb8>
 8019ca8:	3401      	adds	r4, #1
 8019caa:	68eb      	ldr	r3, [r5, #12]
 8019cac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019cae:	1a9b      	subs	r3, r3, r2
 8019cb0:	42a3      	cmp	r3, r4
 8019cb2:	dcef      	bgt.n	8019c94 <_printf_float+0x454>
 8019cb4:	e6f8      	b.n	8019aa8 <_printf_float+0x268>
 8019cb6:	2400      	movs	r4, #0
 8019cb8:	e7f7      	b.n	8019caa <_printf_float+0x46a>
 8019cba:	46c0      	nop			@ (mov r8, r8)

08019cbc <_printf_common>:
 8019cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cbe:	0016      	movs	r6, r2
 8019cc0:	9301      	str	r3, [sp, #4]
 8019cc2:	688a      	ldr	r2, [r1, #8]
 8019cc4:	690b      	ldr	r3, [r1, #16]
 8019cc6:	000c      	movs	r4, r1
 8019cc8:	9000      	str	r0, [sp, #0]
 8019cca:	4293      	cmp	r3, r2
 8019ccc:	da00      	bge.n	8019cd0 <_printf_common+0x14>
 8019cce:	0013      	movs	r3, r2
 8019cd0:	0022      	movs	r2, r4
 8019cd2:	6033      	str	r3, [r6, #0]
 8019cd4:	3243      	adds	r2, #67	@ 0x43
 8019cd6:	7812      	ldrb	r2, [r2, #0]
 8019cd8:	2a00      	cmp	r2, #0
 8019cda:	d001      	beq.n	8019ce0 <_printf_common+0x24>
 8019cdc:	3301      	adds	r3, #1
 8019cde:	6033      	str	r3, [r6, #0]
 8019ce0:	6823      	ldr	r3, [r4, #0]
 8019ce2:	069b      	lsls	r3, r3, #26
 8019ce4:	d502      	bpl.n	8019cec <_printf_common+0x30>
 8019ce6:	6833      	ldr	r3, [r6, #0]
 8019ce8:	3302      	adds	r3, #2
 8019cea:	6033      	str	r3, [r6, #0]
 8019cec:	6822      	ldr	r2, [r4, #0]
 8019cee:	2306      	movs	r3, #6
 8019cf0:	0015      	movs	r5, r2
 8019cf2:	401d      	ands	r5, r3
 8019cf4:	421a      	tst	r2, r3
 8019cf6:	d027      	beq.n	8019d48 <_printf_common+0x8c>
 8019cf8:	0023      	movs	r3, r4
 8019cfa:	3343      	adds	r3, #67	@ 0x43
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	1e5a      	subs	r2, r3, #1
 8019d00:	4193      	sbcs	r3, r2
 8019d02:	6822      	ldr	r2, [r4, #0]
 8019d04:	0692      	lsls	r2, r2, #26
 8019d06:	d430      	bmi.n	8019d6a <_printf_common+0xae>
 8019d08:	0022      	movs	r2, r4
 8019d0a:	9901      	ldr	r1, [sp, #4]
 8019d0c:	9800      	ldr	r0, [sp, #0]
 8019d0e:	9d08      	ldr	r5, [sp, #32]
 8019d10:	3243      	adds	r2, #67	@ 0x43
 8019d12:	47a8      	blx	r5
 8019d14:	3001      	adds	r0, #1
 8019d16:	d025      	beq.n	8019d64 <_printf_common+0xa8>
 8019d18:	2206      	movs	r2, #6
 8019d1a:	6823      	ldr	r3, [r4, #0]
 8019d1c:	2500      	movs	r5, #0
 8019d1e:	4013      	ands	r3, r2
 8019d20:	2b04      	cmp	r3, #4
 8019d22:	d105      	bne.n	8019d30 <_printf_common+0x74>
 8019d24:	6833      	ldr	r3, [r6, #0]
 8019d26:	68e5      	ldr	r5, [r4, #12]
 8019d28:	1aed      	subs	r5, r5, r3
 8019d2a:	43eb      	mvns	r3, r5
 8019d2c:	17db      	asrs	r3, r3, #31
 8019d2e:	401d      	ands	r5, r3
 8019d30:	68a3      	ldr	r3, [r4, #8]
 8019d32:	6922      	ldr	r2, [r4, #16]
 8019d34:	4293      	cmp	r3, r2
 8019d36:	dd01      	ble.n	8019d3c <_printf_common+0x80>
 8019d38:	1a9b      	subs	r3, r3, r2
 8019d3a:	18ed      	adds	r5, r5, r3
 8019d3c:	2600      	movs	r6, #0
 8019d3e:	42b5      	cmp	r5, r6
 8019d40:	d120      	bne.n	8019d84 <_printf_common+0xc8>
 8019d42:	2000      	movs	r0, #0
 8019d44:	e010      	b.n	8019d68 <_printf_common+0xac>
 8019d46:	3501      	adds	r5, #1
 8019d48:	68e3      	ldr	r3, [r4, #12]
 8019d4a:	6832      	ldr	r2, [r6, #0]
 8019d4c:	1a9b      	subs	r3, r3, r2
 8019d4e:	42ab      	cmp	r3, r5
 8019d50:	ddd2      	ble.n	8019cf8 <_printf_common+0x3c>
 8019d52:	0022      	movs	r2, r4
 8019d54:	2301      	movs	r3, #1
 8019d56:	9901      	ldr	r1, [sp, #4]
 8019d58:	9800      	ldr	r0, [sp, #0]
 8019d5a:	9f08      	ldr	r7, [sp, #32]
 8019d5c:	3219      	adds	r2, #25
 8019d5e:	47b8      	blx	r7
 8019d60:	3001      	adds	r0, #1
 8019d62:	d1f0      	bne.n	8019d46 <_printf_common+0x8a>
 8019d64:	2001      	movs	r0, #1
 8019d66:	4240      	negs	r0, r0
 8019d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019d6a:	2030      	movs	r0, #48	@ 0x30
 8019d6c:	18e1      	adds	r1, r4, r3
 8019d6e:	3143      	adds	r1, #67	@ 0x43
 8019d70:	7008      	strb	r0, [r1, #0]
 8019d72:	0021      	movs	r1, r4
 8019d74:	1c5a      	adds	r2, r3, #1
 8019d76:	3145      	adds	r1, #69	@ 0x45
 8019d78:	7809      	ldrb	r1, [r1, #0]
 8019d7a:	18a2      	adds	r2, r4, r2
 8019d7c:	3243      	adds	r2, #67	@ 0x43
 8019d7e:	3302      	adds	r3, #2
 8019d80:	7011      	strb	r1, [r2, #0]
 8019d82:	e7c1      	b.n	8019d08 <_printf_common+0x4c>
 8019d84:	0022      	movs	r2, r4
 8019d86:	2301      	movs	r3, #1
 8019d88:	9901      	ldr	r1, [sp, #4]
 8019d8a:	9800      	ldr	r0, [sp, #0]
 8019d8c:	9f08      	ldr	r7, [sp, #32]
 8019d8e:	321a      	adds	r2, #26
 8019d90:	47b8      	blx	r7
 8019d92:	3001      	adds	r0, #1
 8019d94:	d0e6      	beq.n	8019d64 <_printf_common+0xa8>
 8019d96:	3601      	adds	r6, #1
 8019d98:	e7d1      	b.n	8019d3e <_printf_common+0x82>
	...

08019d9c <_printf_i>:
 8019d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d9e:	b08b      	sub	sp, #44	@ 0x2c
 8019da0:	9206      	str	r2, [sp, #24]
 8019da2:	000a      	movs	r2, r1
 8019da4:	3243      	adds	r2, #67	@ 0x43
 8019da6:	9307      	str	r3, [sp, #28]
 8019da8:	9005      	str	r0, [sp, #20]
 8019daa:	9203      	str	r2, [sp, #12]
 8019dac:	7e0a      	ldrb	r2, [r1, #24]
 8019dae:	000c      	movs	r4, r1
 8019db0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019db2:	2a78      	cmp	r2, #120	@ 0x78
 8019db4:	d809      	bhi.n	8019dca <_printf_i+0x2e>
 8019db6:	2a62      	cmp	r2, #98	@ 0x62
 8019db8:	d80b      	bhi.n	8019dd2 <_printf_i+0x36>
 8019dba:	2a00      	cmp	r2, #0
 8019dbc:	d100      	bne.n	8019dc0 <_printf_i+0x24>
 8019dbe:	e0ba      	b.n	8019f36 <_printf_i+0x19a>
 8019dc0:	497a      	ldr	r1, [pc, #488]	@ (8019fac <_printf_i+0x210>)
 8019dc2:	9104      	str	r1, [sp, #16]
 8019dc4:	2a58      	cmp	r2, #88	@ 0x58
 8019dc6:	d100      	bne.n	8019dca <_printf_i+0x2e>
 8019dc8:	e08e      	b.n	8019ee8 <_printf_i+0x14c>
 8019dca:	0025      	movs	r5, r4
 8019dcc:	3542      	adds	r5, #66	@ 0x42
 8019dce:	702a      	strb	r2, [r5, #0]
 8019dd0:	e022      	b.n	8019e18 <_printf_i+0x7c>
 8019dd2:	0010      	movs	r0, r2
 8019dd4:	3863      	subs	r0, #99	@ 0x63
 8019dd6:	2815      	cmp	r0, #21
 8019dd8:	d8f7      	bhi.n	8019dca <_printf_i+0x2e>
 8019dda:	f7e6 f9b1 	bl	8000140 <__gnu_thumb1_case_shi>
 8019dde:	0016      	.short	0x0016
 8019de0:	fff6001f 	.word	0xfff6001f
 8019de4:	fff6fff6 	.word	0xfff6fff6
 8019de8:	001ffff6 	.word	0x001ffff6
 8019dec:	fff6fff6 	.word	0xfff6fff6
 8019df0:	fff6fff6 	.word	0xfff6fff6
 8019df4:	0036009f 	.word	0x0036009f
 8019df8:	fff6007e 	.word	0xfff6007e
 8019dfc:	00b0fff6 	.word	0x00b0fff6
 8019e00:	0036fff6 	.word	0x0036fff6
 8019e04:	fff6fff6 	.word	0xfff6fff6
 8019e08:	0082      	.short	0x0082
 8019e0a:	0025      	movs	r5, r4
 8019e0c:	681a      	ldr	r2, [r3, #0]
 8019e0e:	3542      	adds	r5, #66	@ 0x42
 8019e10:	1d11      	adds	r1, r2, #4
 8019e12:	6019      	str	r1, [r3, #0]
 8019e14:	6813      	ldr	r3, [r2, #0]
 8019e16:	702b      	strb	r3, [r5, #0]
 8019e18:	2301      	movs	r3, #1
 8019e1a:	e09e      	b.n	8019f5a <_printf_i+0x1be>
 8019e1c:	6818      	ldr	r0, [r3, #0]
 8019e1e:	6809      	ldr	r1, [r1, #0]
 8019e20:	1d02      	adds	r2, r0, #4
 8019e22:	060d      	lsls	r5, r1, #24
 8019e24:	d50b      	bpl.n	8019e3e <_printf_i+0xa2>
 8019e26:	6806      	ldr	r6, [r0, #0]
 8019e28:	601a      	str	r2, [r3, #0]
 8019e2a:	2e00      	cmp	r6, #0
 8019e2c:	da03      	bge.n	8019e36 <_printf_i+0x9a>
 8019e2e:	232d      	movs	r3, #45	@ 0x2d
 8019e30:	9a03      	ldr	r2, [sp, #12]
 8019e32:	4276      	negs	r6, r6
 8019e34:	7013      	strb	r3, [r2, #0]
 8019e36:	4b5d      	ldr	r3, [pc, #372]	@ (8019fac <_printf_i+0x210>)
 8019e38:	270a      	movs	r7, #10
 8019e3a:	9304      	str	r3, [sp, #16]
 8019e3c:	e018      	b.n	8019e70 <_printf_i+0xd4>
 8019e3e:	6806      	ldr	r6, [r0, #0]
 8019e40:	601a      	str	r2, [r3, #0]
 8019e42:	0649      	lsls	r1, r1, #25
 8019e44:	d5f1      	bpl.n	8019e2a <_printf_i+0x8e>
 8019e46:	b236      	sxth	r6, r6
 8019e48:	e7ef      	b.n	8019e2a <_printf_i+0x8e>
 8019e4a:	6808      	ldr	r0, [r1, #0]
 8019e4c:	6819      	ldr	r1, [r3, #0]
 8019e4e:	c940      	ldmia	r1!, {r6}
 8019e50:	0605      	lsls	r5, r0, #24
 8019e52:	d402      	bmi.n	8019e5a <_printf_i+0xbe>
 8019e54:	0640      	lsls	r0, r0, #25
 8019e56:	d500      	bpl.n	8019e5a <_printf_i+0xbe>
 8019e58:	b2b6      	uxth	r6, r6
 8019e5a:	6019      	str	r1, [r3, #0]
 8019e5c:	4b53      	ldr	r3, [pc, #332]	@ (8019fac <_printf_i+0x210>)
 8019e5e:	270a      	movs	r7, #10
 8019e60:	9304      	str	r3, [sp, #16]
 8019e62:	2a6f      	cmp	r2, #111	@ 0x6f
 8019e64:	d100      	bne.n	8019e68 <_printf_i+0xcc>
 8019e66:	3f02      	subs	r7, #2
 8019e68:	0023      	movs	r3, r4
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	3343      	adds	r3, #67	@ 0x43
 8019e6e:	701a      	strb	r2, [r3, #0]
 8019e70:	6863      	ldr	r3, [r4, #4]
 8019e72:	60a3      	str	r3, [r4, #8]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	db06      	blt.n	8019e86 <_printf_i+0xea>
 8019e78:	2104      	movs	r1, #4
 8019e7a:	6822      	ldr	r2, [r4, #0]
 8019e7c:	9d03      	ldr	r5, [sp, #12]
 8019e7e:	438a      	bics	r2, r1
 8019e80:	6022      	str	r2, [r4, #0]
 8019e82:	4333      	orrs	r3, r6
 8019e84:	d00c      	beq.n	8019ea0 <_printf_i+0x104>
 8019e86:	9d03      	ldr	r5, [sp, #12]
 8019e88:	0030      	movs	r0, r6
 8019e8a:	0039      	movs	r1, r7
 8019e8c:	f7e6 f9f2 	bl	8000274 <__aeabi_uidivmod>
 8019e90:	9b04      	ldr	r3, [sp, #16]
 8019e92:	3d01      	subs	r5, #1
 8019e94:	5c5b      	ldrb	r3, [r3, r1]
 8019e96:	702b      	strb	r3, [r5, #0]
 8019e98:	0033      	movs	r3, r6
 8019e9a:	0006      	movs	r6, r0
 8019e9c:	429f      	cmp	r7, r3
 8019e9e:	d9f3      	bls.n	8019e88 <_printf_i+0xec>
 8019ea0:	2f08      	cmp	r7, #8
 8019ea2:	d109      	bne.n	8019eb8 <_printf_i+0x11c>
 8019ea4:	6823      	ldr	r3, [r4, #0]
 8019ea6:	07db      	lsls	r3, r3, #31
 8019ea8:	d506      	bpl.n	8019eb8 <_printf_i+0x11c>
 8019eaa:	6862      	ldr	r2, [r4, #4]
 8019eac:	6923      	ldr	r3, [r4, #16]
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	dc02      	bgt.n	8019eb8 <_printf_i+0x11c>
 8019eb2:	2330      	movs	r3, #48	@ 0x30
 8019eb4:	3d01      	subs	r5, #1
 8019eb6:	702b      	strb	r3, [r5, #0]
 8019eb8:	9b03      	ldr	r3, [sp, #12]
 8019eba:	1b5b      	subs	r3, r3, r5
 8019ebc:	6123      	str	r3, [r4, #16]
 8019ebe:	9b07      	ldr	r3, [sp, #28]
 8019ec0:	0021      	movs	r1, r4
 8019ec2:	9300      	str	r3, [sp, #0]
 8019ec4:	9805      	ldr	r0, [sp, #20]
 8019ec6:	9b06      	ldr	r3, [sp, #24]
 8019ec8:	aa09      	add	r2, sp, #36	@ 0x24
 8019eca:	f7ff fef7 	bl	8019cbc <_printf_common>
 8019ece:	3001      	adds	r0, #1
 8019ed0:	d148      	bne.n	8019f64 <_printf_i+0x1c8>
 8019ed2:	2001      	movs	r0, #1
 8019ed4:	4240      	negs	r0, r0
 8019ed6:	b00b      	add	sp, #44	@ 0x2c
 8019ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eda:	2220      	movs	r2, #32
 8019edc:	6809      	ldr	r1, [r1, #0]
 8019ede:	430a      	orrs	r2, r1
 8019ee0:	6022      	str	r2, [r4, #0]
 8019ee2:	2278      	movs	r2, #120	@ 0x78
 8019ee4:	4932      	ldr	r1, [pc, #200]	@ (8019fb0 <_printf_i+0x214>)
 8019ee6:	9104      	str	r1, [sp, #16]
 8019ee8:	0021      	movs	r1, r4
 8019eea:	3145      	adds	r1, #69	@ 0x45
 8019eec:	700a      	strb	r2, [r1, #0]
 8019eee:	6819      	ldr	r1, [r3, #0]
 8019ef0:	6822      	ldr	r2, [r4, #0]
 8019ef2:	c940      	ldmia	r1!, {r6}
 8019ef4:	0610      	lsls	r0, r2, #24
 8019ef6:	d402      	bmi.n	8019efe <_printf_i+0x162>
 8019ef8:	0650      	lsls	r0, r2, #25
 8019efa:	d500      	bpl.n	8019efe <_printf_i+0x162>
 8019efc:	b2b6      	uxth	r6, r6
 8019efe:	6019      	str	r1, [r3, #0]
 8019f00:	07d3      	lsls	r3, r2, #31
 8019f02:	d502      	bpl.n	8019f0a <_printf_i+0x16e>
 8019f04:	2320      	movs	r3, #32
 8019f06:	4313      	orrs	r3, r2
 8019f08:	6023      	str	r3, [r4, #0]
 8019f0a:	2e00      	cmp	r6, #0
 8019f0c:	d001      	beq.n	8019f12 <_printf_i+0x176>
 8019f0e:	2710      	movs	r7, #16
 8019f10:	e7aa      	b.n	8019e68 <_printf_i+0xcc>
 8019f12:	2220      	movs	r2, #32
 8019f14:	6823      	ldr	r3, [r4, #0]
 8019f16:	4393      	bics	r3, r2
 8019f18:	6023      	str	r3, [r4, #0]
 8019f1a:	e7f8      	b.n	8019f0e <_printf_i+0x172>
 8019f1c:	681a      	ldr	r2, [r3, #0]
 8019f1e:	680d      	ldr	r5, [r1, #0]
 8019f20:	1d10      	adds	r0, r2, #4
 8019f22:	6949      	ldr	r1, [r1, #20]
 8019f24:	6018      	str	r0, [r3, #0]
 8019f26:	6813      	ldr	r3, [r2, #0]
 8019f28:	062e      	lsls	r6, r5, #24
 8019f2a:	d501      	bpl.n	8019f30 <_printf_i+0x194>
 8019f2c:	6019      	str	r1, [r3, #0]
 8019f2e:	e002      	b.n	8019f36 <_printf_i+0x19a>
 8019f30:	066d      	lsls	r5, r5, #25
 8019f32:	d5fb      	bpl.n	8019f2c <_printf_i+0x190>
 8019f34:	8019      	strh	r1, [r3, #0]
 8019f36:	2300      	movs	r3, #0
 8019f38:	9d03      	ldr	r5, [sp, #12]
 8019f3a:	6123      	str	r3, [r4, #16]
 8019f3c:	e7bf      	b.n	8019ebe <_printf_i+0x122>
 8019f3e:	681a      	ldr	r2, [r3, #0]
 8019f40:	1d11      	adds	r1, r2, #4
 8019f42:	6019      	str	r1, [r3, #0]
 8019f44:	6815      	ldr	r5, [r2, #0]
 8019f46:	2100      	movs	r1, #0
 8019f48:	0028      	movs	r0, r5
 8019f4a:	6862      	ldr	r2, [r4, #4]
 8019f4c:	f000 fb91 	bl	801a672 <memchr>
 8019f50:	2800      	cmp	r0, #0
 8019f52:	d001      	beq.n	8019f58 <_printf_i+0x1bc>
 8019f54:	1b40      	subs	r0, r0, r5
 8019f56:	6060      	str	r0, [r4, #4]
 8019f58:	6863      	ldr	r3, [r4, #4]
 8019f5a:	6123      	str	r3, [r4, #16]
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	9a03      	ldr	r2, [sp, #12]
 8019f60:	7013      	strb	r3, [r2, #0]
 8019f62:	e7ac      	b.n	8019ebe <_printf_i+0x122>
 8019f64:	002a      	movs	r2, r5
 8019f66:	6923      	ldr	r3, [r4, #16]
 8019f68:	9906      	ldr	r1, [sp, #24]
 8019f6a:	9805      	ldr	r0, [sp, #20]
 8019f6c:	9d07      	ldr	r5, [sp, #28]
 8019f6e:	47a8      	blx	r5
 8019f70:	3001      	adds	r0, #1
 8019f72:	d0ae      	beq.n	8019ed2 <_printf_i+0x136>
 8019f74:	6823      	ldr	r3, [r4, #0]
 8019f76:	079b      	lsls	r3, r3, #30
 8019f78:	d415      	bmi.n	8019fa6 <_printf_i+0x20a>
 8019f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f7c:	68e0      	ldr	r0, [r4, #12]
 8019f7e:	4298      	cmp	r0, r3
 8019f80:	daa9      	bge.n	8019ed6 <_printf_i+0x13a>
 8019f82:	0018      	movs	r0, r3
 8019f84:	e7a7      	b.n	8019ed6 <_printf_i+0x13a>
 8019f86:	0022      	movs	r2, r4
 8019f88:	2301      	movs	r3, #1
 8019f8a:	9906      	ldr	r1, [sp, #24]
 8019f8c:	9805      	ldr	r0, [sp, #20]
 8019f8e:	9e07      	ldr	r6, [sp, #28]
 8019f90:	3219      	adds	r2, #25
 8019f92:	47b0      	blx	r6
 8019f94:	3001      	adds	r0, #1
 8019f96:	d09c      	beq.n	8019ed2 <_printf_i+0x136>
 8019f98:	3501      	adds	r5, #1
 8019f9a:	68e3      	ldr	r3, [r4, #12]
 8019f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f9e:	1a9b      	subs	r3, r3, r2
 8019fa0:	42ab      	cmp	r3, r5
 8019fa2:	dcf0      	bgt.n	8019f86 <_printf_i+0x1ea>
 8019fa4:	e7e9      	b.n	8019f7a <_printf_i+0x1de>
 8019fa6:	2500      	movs	r5, #0
 8019fa8:	e7f7      	b.n	8019f9a <_printf_i+0x1fe>
 8019faa:	46c0      	nop			@ (mov r8, r8)
 8019fac:	08020293 	.word	0x08020293
 8019fb0:	080202a4 	.word	0x080202a4

08019fb4 <std>:
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	b510      	push	{r4, lr}
 8019fb8:	0004      	movs	r4, r0
 8019fba:	6003      	str	r3, [r0, #0]
 8019fbc:	6043      	str	r3, [r0, #4]
 8019fbe:	6083      	str	r3, [r0, #8]
 8019fc0:	8181      	strh	r1, [r0, #12]
 8019fc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8019fc4:	81c2      	strh	r2, [r0, #14]
 8019fc6:	6103      	str	r3, [r0, #16]
 8019fc8:	6143      	str	r3, [r0, #20]
 8019fca:	6183      	str	r3, [r0, #24]
 8019fcc:	0019      	movs	r1, r3
 8019fce:	2208      	movs	r2, #8
 8019fd0:	305c      	adds	r0, #92	@ 0x5c
 8019fd2:	f000 fa8f 	bl	801a4f4 <memset>
 8019fd6:	4b0b      	ldr	r3, [pc, #44]	@ (801a004 <std+0x50>)
 8019fd8:	6224      	str	r4, [r4, #32]
 8019fda:	6263      	str	r3, [r4, #36]	@ 0x24
 8019fdc:	4b0a      	ldr	r3, [pc, #40]	@ (801a008 <std+0x54>)
 8019fde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019fe0:	4b0a      	ldr	r3, [pc, #40]	@ (801a00c <std+0x58>)
 8019fe2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019fe4:	4b0a      	ldr	r3, [pc, #40]	@ (801a010 <std+0x5c>)
 8019fe6:	6323      	str	r3, [r4, #48]	@ 0x30
 8019fe8:	4b0a      	ldr	r3, [pc, #40]	@ (801a014 <std+0x60>)
 8019fea:	429c      	cmp	r4, r3
 8019fec:	d005      	beq.n	8019ffa <std+0x46>
 8019fee:	4b0a      	ldr	r3, [pc, #40]	@ (801a018 <std+0x64>)
 8019ff0:	429c      	cmp	r4, r3
 8019ff2:	d002      	beq.n	8019ffa <std+0x46>
 8019ff4:	4b09      	ldr	r3, [pc, #36]	@ (801a01c <std+0x68>)
 8019ff6:	429c      	cmp	r4, r3
 8019ff8:	d103      	bne.n	801a002 <std+0x4e>
 8019ffa:	0020      	movs	r0, r4
 8019ffc:	3058      	adds	r0, #88	@ 0x58
 8019ffe:	f000 fb2d 	bl	801a65c <__retarget_lock_init_recursive>
 801a002:	bd10      	pop	{r4, pc}
 801a004:	0801a301 	.word	0x0801a301
 801a008:	0801a329 	.word	0x0801a329
 801a00c:	0801a361 	.word	0x0801a361
 801a010:	0801a38d 	.word	0x0801a38d
 801a014:	200066b0 	.word	0x200066b0
 801a018:	20006718 	.word	0x20006718
 801a01c:	20006780 	.word	0x20006780

0801a020 <stdio_exit_handler>:
 801a020:	b510      	push	{r4, lr}
 801a022:	4a03      	ldr	r2, [pc, #12]	@ (801a030 <stdio_exit_handler+0x10>)
 801a024:	4903      	ldr	r1, [pc, #12]	@ (801a034 <stdio_exit_handler+0x14>)
 801a026:	4804      	ldr	r0, [pc, #16]	@ (801a038 <stdio_exit_handler+0x18>)
 801a028:	f000 f87c 	bl	801a124 <_fwalk_sglue>
 801a02c:	bd10      	pop	{r4, pc}
 801a02e:	46c0      	nop			@ (mov r8, r8)
 801a030:	200002c0 	.word	0x200002c0
 801a034:	0801c319 	.word	0x0801c319
 801a038:	200002d0 	.word	0x200002d0

0801a03c <cleanup_stdio>:
 801a03c:	6841      	ldr	r1, [r0, #4]
 801a03e:	4b0b      	ldr	r3, [pc, #44]	@ (801a06c <cleanup_stdio+0x30>)
 801a040:	b510      	push	{r4, lr}
 801a042:	0004      	movs	r4, r0
 801a044:	4299      	cmp	r1, r3
 801a046:	d001      	beq.n	801a04c <cleanup_stdio+0x10>
 801a048:	f002 f966 	bl	801c318 <_fflush_r>
 801a04c:	68a1      	ldr	r1, [r4, #8]
 801a04e:	4b08      	ldr	r3, [pc, #32]	@ (801a070 <cleanup_stdio+0x34>)
 801a050:	4299      	cmp	r1, r3
 801a052:	d002      	beq.n	801a05a <cleanup_stdio+0x1e>
 801a054:	0020      	movs	r0, r4
 801a056:	f002 f95f 	bl	801c318 <_fflush_r>
 801a05a:	68e1      	ldr	r1, [r4, #12]
 801a05c:	4b05      	ldr	r3, [pc, #20]	@ (801a074 <cleanup_stdio+0x38>)
 801a05e:	4299      	cmp	r1, r3
 801a060:	d002      	beq.n	801a068 <cleanup_stdio+0x2c>
 801a062:	0020      	movs	r0, r4
 801a064:	f002 f958 	bl	801c318 <_fflush_r>
 801a068:	bd10      	pop	{r4, pc}
 801a06a:	46c0      	nop			@ (mov r8, r8)
 801a06c:	200066b0 	.word	0x200066b0
 801a070:	20006718 	.word	0x20006718
 801a074:	20006780 	.word	0x20006780

0801a078 <global_stdio_init.part.0>:
 801a078:	b510      	push	{r4, lr}
 801a07a:	4b09      	ldr	r3, [pc, #36]	@ (801a0a0 <global_stdio_init.part.0+0x28>)
 801a07c:	4a09      	ldr	r2, [pc, #36]	@ (801a0a4 <global_stdio_init.part.0+0x2c>)
 801a07e:	2104      	movs	r1, #4
 801a080:	601a      	str	r2, [r3, #0]
 801a082:	4809      	ldr	r0, [pc, #36]	@ (801a0a8 <global_stdio_init.part.0+0x30>)
 801a084:	2200      	movs	r2, #0
 801a086:	f7ff ff95 	bl	8019fb4 <std>
 801a08a:	2201      	movs	r2, #1
 801a08c:	2109      	movs	r1, #9
 801a08e:	4807      	ldr	r0, [pc, #28]	@ (801a0ac <global_stdio_init.part.0+0x34>)
 801a090:	f7ff ff90 	bl	8019fb4 <std>
 801a094:	2202      	movs	r2, #2
 801a096:	2112      	movs	r1, #18
 801a098:	4805      	ldr	r0, [pc, #20]	@ (801a0b0 <global_stdio_init.part.0+0x38>)
 801a09a:	f7ff ff8b 	bl	8019fb4 <std>
 801a09e:	bd10      	pop	{r4, pc}
 801a0a0:	200067e8 	.word	0x200067e8
 801a0a4:	0801a021 	.word	0x0801a021
 801a0a8:	200066b0 	.word	0x200066b0
 801a0ac:	20006718 	.word	0x20006718
 801a0b0:	20006780 	.word	0x20006780

0801a0b4 <__sfp_lock_acquire>:
 801a0b4:	b510      	push	{r4, lr}
 801a0b6:	4802      	ldr	r0, [pc, #8]	@ (801a0c0 <__sfp_lock_acquire+0xc>)
 801a0b8:	f000 fad1 	bl	801a65e <__retarget_lock_acquire_recursive>
 801a0bc:	bd10      	pop	{r4, pc}
 801a0be:	46c0      	nop			@ (mov r8, r8)
 801a0c0:	200067f1 	.word	0x200067f1

0801a0c4 <__sfp_lock_release>:
 801a0c4:	b510      	push	{r4, lr}
 801a0c6:	4802      	ldr	r0, [pc, #8]	@ (801a0d0 <__sfp_lock_release+0xc>)
 801a0c8:	f000 faca 	bl	801a660 <__retarget_lock_release_recursive>
 801a0cc:	bd10      	pop	{r4, pc}
 801a0ce:	46c0      	nop			@ (mov r8, r8)
 801a0d0:	200067f1 	.word	0x200067f1

0801a0d4 <__sinit>:
 801a0d4:	b510      	push	{r4, lr}
 801a0d6:	0004      	movs	r4, r0
 801a0d8:	f7ff ffec 	bl	801a0b4 <__sfp_lock_acquire>
 801a0dc:	6a23      	ldr	r3, [r4, #32]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d002      	beq.n	801a0e8 <__sinit+0x14>
 801a0e2:	f7ff ffef 	bl	801a0c4 <__sfp_lock_release>
 801a0e6:	bd10      	pop	{r4, pc}
 801a0e8:	4b04      	ldr	r3, [pc, #16]	@ (801a0fc <__sinit+0x28>)
 801a0ea:	6223      	str	r3, [r4, #32]
 801a0ec:	4b04      	ldr	r3, [pc, #16]	@ (801a100 <__sinit+0x2c>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d1f6      	bne.n	801a0e2 <__sinit+0xe>
 801a0f4:	f7ff ffc0 	bl	801a078 <global_stdio_init.part.0>
 801a0f8:	e7f3      	b.n	801a0e2 <__sinit+0xe>
 801a0fa:	46c0      	nop			@ (mov r8, r8)
 801a0fc:	0801a03d 	.word	0x0801a03d
 801a100:	200067e8 	.word	0x200067e8

0801a104 <fiprintf>:
 801a104:	b40e      	push	{r1, r2, r3}
 801a106:	b517      	push	{r0, r1, r2, r4, lr}
 801a108:	4c05      	ldr	r4, [pc, #20]	@ (801a120 <fiprintf+0x1c>)
 801a10a:	ab05      	add	r3, sp, #20
 801a10c:	cb04      	ldmia	r3!, {r2}
 801a10e:	0001      	movs	r1, r0
 801a110:	6820      	ldr	r0, [r4, #0]
 801a112:	9301      	str	r3, [sp, #4]
 801a114:	f001 ff5e 	bl	801bfd4 <_vfiprintf_r>
 801a118:	bc1e      	pop	{r1, r2, r3, r4}
 801a11a:	bc08      	pop	{r3}
 801a11c:	b003      	add	sp, #12
 801a11e:	4718      	bx	r3
 801a120:	200002cc 	.word	0x200002cc

0801a124 <_fwalk_sglue>:
 801a124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a126:	0014      	movs	r4, r2
 801a128:	2600      	movs	r6, #0
 801a12a:	9000      	str	r0, [sp, #0]
 801a12c:	9101      	str	r1, [sp, #4]
 801a12e:	68a5      	ldr	r5, [r4, #8]
 801a130:	6867      	ldr	r7, [r4, #4]
 801a132:	3f01      	subs	r7, #1
 801a134:	d504      	bpl.n	801a140 <_fwalk_sglue+0x1c>
 801a136:	6824      	ldr	r4, [r4, #0]
 801a138:	2c00      	cmp	r4, #0
 801a13a:	d1f8      	bne.n	801a12e <_fwalk_sglue+0xa>
 801a13c:	0030      	movs	r0, r6
 801a13e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a140:	89ab      	ldrh	r3, [r5, #12]
 801a142:	2b01      	cmp	r3, #1
 801a144:	d908      	bls.n	801a158 <_fwalk_sglue+0x34>
 801a146:	220e      	movs	r2, #14
 801a148:	5eab      	ldrsh	r3, [r5, r2]
 801a14a:	3301      	adds	r3, #1
 801a14c:	d004      	beq.n	801a158 <_fwalk_sglue+0x34>
 801a14e:	0029      	movs	r1, r5
 801a150:	9800      	ldr	r0, [sp, #0]
 801a152:	9b01      	ldr	r3, [sp, #4]
 801a154:	4798      	blx	r3
 801a156:	4306      	orrs	r6, r0
 801a158:	3568      	adds	r5, #104	@ 0x68
 801a15a:	e7ea      	b.n	801a132 <_fwalk_sglue+0xe>

0801a15c <iprintf>:
 801a15c:	b40f      	push	{r0, r1, r2, r3}
 801a15e:	b507      	push	{r0, r1, r2, lr}
 801a160:	4905      	ldr	r1, [pc, #20]	@ (801a178 <iprintf+0x1c>)
 801a162:	ab04      	add	r3, sp, #16
 801a164:	6808      	ldr	r0, [r1, #0]
 801a166:	cb04      	ldmia	r3!, {r2}
 801a168:	6881      	ldr	r1, [r0, #8]
 801a16a:	9301      	str	r3, [sp, #4]
 801a16c:	f001 ff32 	bl	801bfd4 <_vfiprintf_r>
 801a170:	b003      	add	sp, #12
 801a172:	bc08      	pop	{r3}
 801a174:	b004      	add	sp, #16
 801a176:	4718      	bx	r3
 801a178:	200002cc 	.word	0x200002cc

0801a17c <putchar>:
 801a17c:	b510      	push	{r4, lr}
 801a17e:	4b03      	ldr	r3, [pc, #12]	@ (801a18c <putchar+0x10>)
 801a180:	0001      	movs	r1, r0
 801a182:	6818      	ldr	r0, [r3, #0]
 801a184:	6882      	ldr	r2, [r0, #8]
 801a186:	f002 f95e 	bl	801c446 <_putc_r>
 801a18a:	bd10      	pop	{r4, pc}
 801a18c:	200002cc 	.word	0x200002cc

0801a190 <_puts_r>:
 801a190:	6a03      	ldr	r3, [r0, #32]
 801a192:	b570      	push	{r4, r5, r6, lr}
 801a194:	0005      	movs	r5, r0
 801a196:	000e      	movs	r6, r1
 801a198:	6884      	ldr	r4, [r0, #8]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d101      	bne.n	801a1a2 <_puts_r+0x12>
 801a19e:	f7ff ff99 	bl	801a0d4 <__sinit>
 801a1a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a1a4:	07db      	lsls	r3, r3, #31
 801a1a6:	d405      	bmi.n	801a1b4 <_puts_r+0x24>
 801a1a8:	89a3      	ldrh	r3, [r4, #12]
 801a1aa:	059b      	lsls	r3, r3, #22
 801a1ac:	d402      	bmi.n	801a1b4 <_puts_r+0x24>
 801a1ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a1b0:	f000 fa55 	bl	801a65e <__retarget_lock_acquire_recursive>
 801a1b4:	89a3      	ldrh	r3, [r4, #12]
 801a1b6:	071b      	lsls	r3, r3, #28
 801a1b8:	d502      	bpl.n	801a1c0 <_puts_r+0x30>
 801a1ba:	6923      	ldr	r3, [r4, #16]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d11f      	bne.n	801a200 <_puts_r+0x70>
 801a1c0:	0021      	movs	r1, r4
 801a1c2:	0028      	movs	r0, r5
 801a1c4:	f000 f92a 	bl	801a41c <__swsetup_r>
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	d019      	beq.n	801a200 <_puts_r+0x70>
 801a1cc:	2501      	movs	r5, #1
 801a1ce:	426d      	negs	r5, r5
 801a1d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a1d2:	07db      	lsls	r3, r3, #31
 801a1d4:	d405      	bmi.n	801a1e2 <_puts_r+0x52>
 801a1d6:	89a3      	ldrh	r3, [r4, #12]
 801a1d8:	059b      	lsls	r3, r3, #22
 801a1da:	d402      	bmi.n	801a1e2 <_puts_r+0x52>
 801a1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a1de:	f000 fa3f 	bl	801a660 <__retarget_lock_release_recursive>
 801a1e2:	0028      	movs	r0, r5
 801a1e4:	bd70      	pop	{r4, r5, r6, pc}
 801a1e6:	3601      	adds	r6, #1
 801a1e8:	60a3      	str	r3, [r4, #8]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	da04      	bge.n	801a1f8 <_puts_r+0x68>
 801a1ee:	69a2      	ldr	r2, [r4, #24]
 801a1f0:	429a      	cmp	r2, r3
 801a1f2:	dc16      	bgt.n	801a222 <_puts_r+0x92>
 801a1f4:	290a      	cmp	r1, #10
 801a1f6:	d014      	beq.n	801a222 <_puts_r+0x92>
 801a1f8:	6823      	ldr	r3, [r4, #0]
 801a1fa:	1c5a      	adds	r2, r3, #1
 801a1fc:	6022      	str	r2, [r4, #0]
 801a1fe:	7019      	strb	r1, [r3, #0]
 801a200:	68a3      	ldr	r3, [r4, #8]
 801a202:	7831      	ldrb	r1, [r6, #0]
 801a204:	3b01      	subs	r3, #1
 801a206:	2900      	cmp	r1, #0
 801a208:	d1ed      	bne.n	801a1e6 <_puts_r+0x56>
 801a20a:	60a3      	str	r3, [r4, #8]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	da0f      	bge.n	801a230 <_puts_r+0xa0>
 801a210:	0022      	movs	r2, r4
 801a212:	0028      	movs	r0, r5
 801a214:	310a      	adds	r1, #10
 801a216:	f000 f8bf 	bl	801a398 <__swbuf_r>
 801a21a:	3001      	adds	r0, #1
 801a21c:	d0d6      	beq.n	801a1cc <_puts_r+0x3c>
 801a21e:	250a      	movs	r5, #10
 801a220:	e7d6      	b.n	801a1d0 <_puts_r+0x40>
 801a222:	0022      	movs	r2, r4
 801a224:	0028      	movs	r0, r5
 801a226:	f000 f8b7 	bl	801a398 <__swbuf_r>
 801a22a:	3001      	adds	r0, #1
 801a22c:	d1e8      	bne.n	801a200 <_puts_r+0x70>
 801a22e:	e7cd      	b.n	801a1cc <_puts_r+0x3c>
 801a230:	6823      	ldr	r3, [r4, #0]
 801a232:	1c5a      	adds	r2, r3, #1
 801a234:	6022      	str	r2, [r4, #0]
 801a236:	220a      	movs	r2, #10
 801a238:	701a      	strb	r2, [r3, #0]
 801a23a:	e7f0      	b.n	801a21e <_puts_r+0x8e>

0801a23c <puts>:
 801a23c:	b510      	push	{r4, lr}
 801a23e:	4b03      	ldr	r3, [pc, #12]	@ (801a24c <puts+0x10>)
 801a240:	0001      	movs	r1, r0
 801a242:	6818      	ldr	r0, [r3, #0]
 801a244:	f7ff ffa4 	bl	801a190 <_puts_r>
 801a248:	bd10      	pop	{r4, pc}
 801a24a:	46c0      	nop			@ (mov r8, r8)
 801a24c:	200002cc 	.word	0x200002cc

0801a250 <sniprintf>:
 801a250:	b40c      	push	{r2, r3}
 801a252:	b530      	push	{r4, r5, lr}
 801a254:	4b18      	ldr	r3, [pc, #96]	@ (801a2b8 <sniprintf+0x68>)
 801a256:	000c      	movs	r4, r1
 801a258:	681d      	ldr	r5, [r3, #0]
 801a25a:	b09d      	sub	sp, #116	@ 0x74
 801a25c:	2900      	cmp	r1, #0
 801a25e:	da08      	bge.n	801a272 <sniprintf+0x22>
 801a260:	238b      	movs	r3, #139	@ 0x8b
 801a262:	2001      	movs	r0, #1
 801a264:	602b      	str	r3, [r5, #0]
 801a266:	4240      	negs	r0, r0
 801a268:	b01d      	add	sp, #116	@ 0x74
 801a26a:	bc30      	pop	{r4, r5}
 801a26c:	bc08      	pop	{r3}
 801a26e:	b002      	add	sp, #8
 801a270:	4718      	bx	r3
 801a272:	2382      	movs	r3, #130	@ 0x82
 801a274:	466a      	mov	r2, sp
 801a276:	009b      	lsls	r3, r3, #2
 801a278:	8293      	strh	r3, [r2, #20]
 801a27a:	2300      	movs	r3, #0
 801a27c:	9002      	str	r0, [sp, #8]
 801a27e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a280:	9006      	str	r0, [sp, #24]
 801a282:	4299      	cmp	r1, r3
 801a284:	d000      	beq.n	801a288 <sniprintf+0x38>
 801a286:	1e4b      	subs	r3, r1, #1
 801a288:	9304      	str	r3, [sp, #16]
 801a28a:	9307      	str	r3, [sp, #28]
 801a28c:	2301      	movs	r3, #1
 801a28e:	466a      	mov	r2, sp
 801a290:	425b      	negs	r3, r3
 801a292:	82d3      	strh	r3, [r2, #22]
 801a294:	0028      	movs	r0, r5
 801a296:	ab21      	add	r3, sp, #132	@ 0x84
 801a298:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a29a:	a902      	add	r1, sp, #8
 801a29c:	9301      	str	r3, [sp, #4]
 801a29e:	f001 fd73 	bl	801bd88 <_svfiprintf_r>
 801a2a2:	1c43      	adds	r3, r0, #1
 801a2a4:	da01      	bge.n	801a2aa <sniprintf+0x5a>
 801a2a6:	238b      	movs	r3, #139	@ 0x8b
 801a2a8:	602b      	str	r3, [r5, #0]
 801a2aa:	2c00      	cmp	r4, #0
 801a2ac:	d0dc      	beq.n	801a268 <sniprintf+0x18>
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	9b02      	ldr	r3, [sp, #8]
 801a2b2:	701a      	strb	r2, [r3, #0]
 801a2b4:	e7d8      	b.n	801a268 <sniprintf+0x18>
 801a2b6:	46c0      	nop			@ (mov r8, r8)
 801a2b8:	200002cc 	.word	0x200002cc

0801a2bc <siprintf>:
 801a2bc:	b40e      	push	{r1, r2, r3}
 801a2be:	b510      	push	{r4, lr}
 801a2c0:	2400      	movs	r4, #0
 801a2c2:	490c      	ldr	r1, [pc, #48]	@ (801a2f4 <siprintf+0x38>)
 801a2c4:	b09d      	sub	sp, #116	@ 0x74
 801a2c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a2c8:	9002      	str	r0, [sp, #8]
 801a2ca:	9006      	str	r0, [sp, #24]
 801a2cc:	9107      	str	r1, [sp, #28]
 801a2ce:	9104      	str	r1, [sp, #16]
 801a2d0:	4809      	ldr	r0, [pc, #36]	@ (801a2f8 <siprintf+0x3c>)
 801a2d2:	490a      	ldr	r1, [pc, #40]	@ (801a2fc <siprintf+0x40>)
 801a2d4:	cb04      	ldmia	r3!, {r2}
 801a2d6:	9105      	str	r1, [sp, #20]
 801a2d8:	6800      	ldr	r0, [r0, #0]
 801a2da:	a902      	add	r1, sp, #8
 801a2dc:	9301      	str	r3, [sp, #4]
 801a2de:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a2e0:	f001 fd52 	bl	801bd88 <_svfiprintf_r>
 801a2e4:	9b02      	ldr	r3, [sp, #8]
 801a2e6:	701c      	strb	r4, [r3, #0]
 801a2e8:	b01d      	add	sp, #116	@ 0x74
 801a2ea:	bc10      	pop	{r4}
 801a2ec:	bc08      	pop	{r3}
 801a2ee:	b003      	add	sp, #12
 801a2f0:	4718      	bx	r3
 801a2f2:	46c0      	nop			@ (mov r8, r8)
 801a2f4:	7fffffff 	.word	0x7fffffff
 801a2f8:	200002cc 	.word	0x200002cc
 801a2fc:	ffff0208 	.word	0xffff0208

0801a300 <__sread>:
 801a300:	b570      	push	{r4, r5, r6, lr}
 801a302:	000c      	movs	r4, r1
 801a304:	250e      	movs	r5, #14
 801a306:	5f49      	ldrsh	r1, [r1, r5]
 801a308:	f000 f956 	bl	801a5b8 <_read_r>
 801a30c:	2800      	cmp	r0, #0
 801a30e:	db03      	blt.n	801a318 <__sread+0x18>
 801a310:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801a312:	181b      	adds	r3, r3, r0
 801a314:	6563      	str	r3, [r4, #84]	@ 0x54
 801a316:	bd70      	pop	{r4, r5, r6, pc}
 801a318:	89a3      	ldrh	r3, [r4, #12]
 801a31a:	4a02      	ldr	r2, [pc, #8]	@ (801a324 <__sread+0x24>)
 801a31c:	4013      	ands	r3, r2
 801a31e:	81a3      	strh	r3, [r4, #12]
 801a320:	e7f9      	b.n	801a316 <__sread+0x16>
 801a322:	46c0      	nop			@ (mov r8, r8)
 801a324:	ffffefff 	.word	0xffffefff

0801a328 <__swrite>:
 801a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a32a:	001f      	movs	r7, r3
 801a32c:	898b      	ldrh	r3, [r1, #12]
 801a32e:	0005      	movs	r5, r0
 801a330:	000c      	movs	r4, r1
 801a332:	0016      	movs	r6, r2
 801a334:	05db      	lsls	r3, r3, #23
 801a336:	d505      	bpl.n	801a344 <__swrite+0x1c>
 801a338:	230e      	movs	r3, #14
 801a33a:	5ec9      	ldrsh	r1, [r1, r3]
 801a33c:	2200      	movs	r2, #0
 801a33e:	2302      	movs	r3, #2
 801a340:	f000 f926 	bl	801a590 <_lseek_r>
 801a344:	89a3      	ldrh	r3, [r4, #12]
 801a346:	4a05      	ldr	r2, [pc, #20]	@ (801a35c <__swrite+0x34>)
 801a348:	0028      	movs	r0, r5
 801a34a:	4013      	ands	r3, r2
 801a34c:	81a3      	strh	r3, [r4, #12]
 801a34e:	0032      	movs	r2, r6
 801a350:	230e      	movs	r3, #14
 801a352:	5ee1      	ldrsh	r1, [r4, r3]
 801a354:	003b      	movs	r3, r7
 801a356:	f000 f943 	bl	801a5e0 <_write_r>
 801a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a35c:	ffffefff 	.word	0xffffefff

0801a360 <__sseek>:
 801a360:	b570      	push	{r4, r5, r6, lr}
 801a362:	000c      	movs	r4, r1
 801a364:	250e      	movs	r5, #14
 801a366:	5f49      	ldrsh	r1, [r1, r5]
 801a368:	f000 f912 	bl	801a590 <_lseek_r>
 801a36c:	89a3      	ldrh	r3, [r4, #12]
 801a36e:	1c42      	adds	r2, r0, #1
 801a370:	d103      	bne.n	801a37a <__sseek+0x1a>
 801a372:	4a05      	ldr	r2, [pc, #20]	@ (801a388 <__sseek+0x28>)
 801a374:	4013      	ands	r3, r2
 801a376:	81a3      	strh	r3, [r4, #12]
 801a378:	bd70      	pop	{r4, r5, r6, pc}
 801a37a:	2280      	movs	r2, #128	@ 0x80
 801a37c:	0152      	lsls	r2, r2, #5
 801a37e:	4313      	orrs	r3, r2
 801a380:	81a3      	strh	r3, [r4, #12]
 801a382:	6560      	str	r0, [r4, #84]	@ 0x54
 801a384:	e7f8      	b.n	801a378 <__sseek+0x18>
 801a386:	46c0      	nop			@ (mov r8, r8)
 801a388:	ffffefff 	.word	0xffffefff

0801a38c <__sclose>:
 801a38c:	b510      	push	{r4, lr}
 801a38e:	230e      	movs	r3, #14
 801a390:	5ec9      	ldrsh	r1, [r1, r3]
 801a392:	f000 f8eb 	bl	801a56c <_close_r>
 801a396:	bd10      	pop	{r4, pc}

0801a398 <__swbuf_r>:
 801a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a39a:	0006      	movs	r6, r0
 801a39c:	000d      	movs	r5, r1
 801a39e:	0014      	movs	r4, r2
 801a3a0:	2800      	cmp	r0, #0
 801a3a2:	d004      	beq.n	801a3ae <__swbuf_r+0x16>
 801a3a4:	6a03      	ldr	r3, [r0, #32]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d101      	bne.n	801a3ae <__swbuf_r+0x16>
 801a3aa:	f7ff fe93 	bl	801a0d4 <__sinit>
 801a3ae:	69a3      	ldr	r3, [r4, #24]
 801a3b0:	60a3      	str	r3, [r4, #8]
 801a3b2:	89a3      	ldrh	r3, [r4, #12]
 801a3b4:	071b      	lsls	r3, r3, #28
 801a3b6:	d502      	bpl.n	801a3be <__swbuf_r+0x26>
 801a3b8:	6923      	ldr	r3, [r4, #16]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d109      	bne.n	801a3d2 <__swbuf_r+0x3a>
 801a3be:	0021      	movs	r1, r4
 801a3c0:	0030      	movs	r0, r6
 801a3c2:	f000 f82b 	bl	801a41c <__swsetup_r>
 801a3c6:	2800      	cmp	r0, #0
 801a3c8:	d003      	beq.n	801a3d2 <__swbuf_r+0x3a>
 801a3ca:	2501      	movs	r5, #1
 801a3cc:	426d      	negs	r5, r5
 801a3ce:	0028      	movs	r0, r5
 801a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3d2:	6923      	ldr	r3, [r4, #16]
 801a3d4:	6820      	ldr	r0, [r4, #0]
 801a3d6:	b2ef      	uxtb	r7, r5
 801a3d8:	1ac0      	subs	r0, r0, r3
 801a3da:	6963      	ldr	r3, [r4, #20]
 801a3dc:	b2ed      	uxtb	r5, r5
 801a3de:	4283      	cmp	r3, r0
 801a3e0:	dc05      	bgt.n	801a3ee <__swbuf_r+0x56>
 801a3e2:	0021      	movs	r1, r4
 801a3e4:	0030      	movs	r0, r6
 801a3e6:	f001 ff97 	bl	801c318 <_fflush_r>
 801a3ea:	2800      	cmp	r0, #0
 801a3ec:	d1ed      	bne.n	801a3ca <__swbuf_r+0x32>
 801a3ee:	68a3      	ldr	r3, [r4, #8]
 801a3f0:	3001      	adds	r0, #1
 801a3f2:	3b01      	subs	r3, #1
 801a3f4:	60a3      	str	r3, [r4, #8]
 801a3f6:	6823      	ldr	r3, [r4, #0]
 801a3f8:	1c5a      	adds	r2, r3, #1
 801a3fa:	6022      	str	r2, [r4, #0]
 801a3fc:	701f      	strb	r7, [r3, #0]
 801a3fe:	6963      	ldr	r3, [r4, #20]
 801a400:	4283      	cmp	r3, r0
 801a402:	d004      	beq.n	801a40e <__swbuf_r+0x76>
 801a404:	89a3      	ldrh	r3, [r4, #12]
 801a406:	07db      	lsls	r3, r3, #31
 801a408:	d5e1      	bpl.n	801a3ce <__swbuf_r+0x36>
 801a40a:	2d0a      	cmp	r5, #10
 801a40c:	d1df      	bne.n	801a3ce <__swbuf_r+0x36>
 801a40e:	0021      	movs	r1, r4
 801a410:	0030      	movs	r0, r6
 801a412:	f001 ff81 	bl	801c318 <_fflush_r>
 801a416:	2800      	cmp	r0, #0
 801a418:	d0d9      	beq.n	801a3ce <__swbuf_r+0x36>
 801a41a:	e7d6      	b.n	801a3ca <__swbuf_r+0x32>

0801a41c <__swsetup_r>:
 801a41c:	4b2d      	ldr	r3, [pc, #180]	@ (801a4d4 <__swsetup_r+0xb8>)
 801a41e:	b570      	push	{r4, r5, r6, lr}
 801a420:	0005      	movs	r5, r0
 801a422:	6818      	ldr	r0, [r3, #0]
 801a424:	000c      	movs	r4, r1
 801a426:	2800      	cmp	r0, #0
 801a428:	d004      	beq.n	801a434 <__swsetup_r+0x18>
 801a42a:	6a03      	ldr	r3, [r0, #32]
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d101      	bne.n	801a434 <__swsetup_r+0x18>
 801a430:	f7ff fe50 	bl	801a0d4 <__sinit>
 801a434:	220c      	movs	r2, #12
 801a436:	5ea3      	ldrsh	r3, [r4, r2]
 801a438:	071a      	lsls	r2, r3, #28
 801a43a:	d423      	bmi.n	801a484 <__swsetup_r+0x68>
 801a43c:	06da      	lsls	r2, r3, #27
 801a43e:	d407      	bmi.n	801a450 <__swsetup_r+0x34>
 801a440:	2209      	movs	r2, #9
 801a442:	602a      	str	r2, [r5, #0]
 801a444:	2240      	movs	r2, #64	@ 0x40
 801a446:	2001      	movs	r0, #1
 801a448:	4313      	orrs	r3, r2
 801a44a:	81a3      	strh	r3, [r4, #12]
 801a44c:	4240      	negs	r0, r0
 801a44e:	e03a      	b.n	801a4c6 <__swsetup_r+0xaa>
 801a450:	075b      	lsls	r3, r3, #29
 801a452:	d513      	bpl.n	801a47c <__swsetup_r+0x60>
 801a454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a456:	2900      	cmp	r1, #0
 801a458:	d008      	beq.n	801a46c <__swsetup_r+0x50>
 801a45a:	0023      	movs	r3, r4
 801a45c:	3344      	adds	r3, #68	@ 0x44
 801a45e:	4299      	cmp	r1, r3
 801a460:	d002      	beq.n	801a468 <__swsetup_r+0x4c>
 801a462:	0028      	movs	r0, r5
 801a464:	f000 ff8e 	bl	801b384 <_free_r>
 801a468:	2300      	movs	r3, #0
 801a46a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a46c:	2224      	movs	r2, #36	@ 0x24
 801a46e:	89a3      	ldrh	r3, [r4, #12]
 801a470:	4393      	bics	r3, r2
 801a472:	81a3      	strh	r3, [r4, #12]
 801a474:	2300      	movs	r3, #0
 801a476:	6063      	str	r3, [r4, #4]
 801a478:	6923      	ldr	r3, [r4, #16]
 801a47a:	6023      	str	r3, [r4, #0]
 801a47c:	2308      	movs	r3, #8
 801a47e:	89a2      	ldrh	r2, [r4, #12]
 801a480:	4313      	orrs	r3, r2
 801a482:	81a3      	strh	r3, [r4, #12]
 801a484:	6923      	ldr	r3, [r4, #16]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d10b      	bne.n	801a4a2 <__swsetup_r+0x86>
 801a48a:	21a0      	movs	r1, #160	@ 0xa0
 801a48c:	2280      	movs	r2, #128	@ 0x80
 801a48e:	89a3      	ldrh	r3, [r4, #12]
 801a490:	0089      	lsls	r1, r1, #2
 801a492:	0092      	lsls	r2, r2, #2
 801a494:	400b      	ands	r3, r1
 801a496:	4293      	cmp	r3, r2
 801a498:	d003      	beq.n	801a4a2 <__swsetup_r+0x86>
 801a49a:	0021      	movs	r1, r4
 801a49c:	0028      	movs	r0, r5
 801a49e:	f001 ff91 	bl	801c3c4 <__smakebuf_r>
 801a4a2:	220c      	movs	r2, #12
 801a4a4:	5ea3      	ldrsh	r3, [r4, r2]
 801a4a6:	2101      	movs	r1, #1
 801a4a8:	001a      	movs	r2, r3
 801a4aa:	400a      	ands	r2, r1
 801a4ac:	420b      	tst	r3, r1
 801a4ae:	d00b      	beq.n	801a4c8 <__swsetup_r+0xac>
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	60a2      	str	r2, [r4, #8]
 801a4b4:	6962      	ldr	r2, [r4, #20]
 801a4b6:	4252      	negs	r2, r2
 801a4b8:	61a2      	str	r2, [r4, #24]
 801a4ba:	2000      	movs	r0, #0
 801a4bc:	6922      	ldr	r2, [r4, #16]
 801a4be:	4282      	cmp	r2, r0
 801a4c0:	d101      	bne.n	801a4c6 <__swsetup_r+0xaa>
 801a4c2:	061a      	lsls	r2, r3, #24
 801a4c4:	d4be      	bmi.n	801a444 <__swsetup_r+0x28>
 801a4c6:	bd70      	pop	{r4, r5, r6, pc}
 801a4c8:	0799      	lsls	r1, r3, #30
 801a4ca:	d400      	bmi.n	801a4ce <__swsetup_r+0xb2>
 801a4cc:	6962      	ldr	r2, [r4, #20]
 801a4ce:	60a2      	str	r2, [r4, #8]
 801a4d0:	e7f3      	b.n	801a4ba <__swsetup_r+0x9e>
 801a4d2:	46c0      	nop			@ (mov r8, r8)
 801a4d4:	200002cc 	.word	0x200002cc

0801a4d8 <memcmp>:
 801a4d8:	b530      	push	{r4, r5, lr}
 801a4da:	2400      	movs	r4, #0
 801a4dc:	3901      	subs	r1, #1
 801a4de:	42a2      	cmp	r2, r4
 801a4e0:	d101      	bne.n	801a4e6 <memcmp+0xe>
 801a4e2:	2000      	movs	r0, #0
 801a4e4:	e005      	b.n	801a4f2 <memcmp+0x1a>
 801a4e6:	5d03      	ldrb	r3, [r0, r4]
 801a4e8:	3401      	adds	r4, #1
 801a4ea:	5d0d      	ldrb	r5, [r1, r4]
 801a4ec:	42ab      	cmp	r3, r5
 801a4ee:	d0f6      	beq.n	801a4de <memcmp+0x6>
 801a4f0:	1b58      	subs	r0, r3, r5
 801a4f2:	bd30      	pop	{r4, r5, pc}

0801a4f4 <memset>:
 801a4f4:	0003      	movs	r3, r0
 801a4f6:	1882      	adds	r2, r0, r2
 801a4f8:	4293      	cmp	r3, r2
 801a4fa:	d100      	bne.n	801a4fe <memset+0xa>
 801a4fc:	4770      	bx	lr
 801a4fe:	7019      	strb	r1, [r3, #0]
 801a500:	3301      	adds	r3, #1
 801a502:	e7f9      	b.n	801a4f8 <memset+0x4>

0801a504 <strcat>:
 801a504:	0002      	movs	r2, r0
 801a506:	b510      	push	{r4, lr}
 801a508:	7813      	ldrb	r3, [r2, #0]
 801a50a:	0014      	movs	r4, r2
 801a50c:	3201      	adds	r2, #1
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d1fa      	bne.n	801a508 <strcat+0x4>
 801a512:	5cca      	ldrb	r2, [r1, r3]
 801a514:	54e2      	strb	r2, [r4, r3]
 801a516:	3301      	adds	r3, #1
 801a518:	2a00      	cmp	r2, #0
 801a51a:	d1fa      	bne.n	801a512 <strcat+0xe>
 801a51c:	bd10      	pop	{r4, pc}

0801a51e <strchr>:
 801a51e:	b2c9      	uxtb	r1, r1
 801a520:	7803      	ldrb	r3, [r0, #0]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d004      	beq.n	801a530 <strchr+0x12>
 801a526:	428b      	cmp	r3, r1
 801a528:	d100      	bne.n	801a52c <strchr+0xe>
 801a52a:	4770      	bx	lr
 801a52c:	3001      	adds	r0, #1
 801a52e:	e7f7      	b.n	801a520 <strchr+0x2>
 801a530:	424b      	negs	r3, r1
 801a532:	4159      	adcs	r1, r3
 801a534:	4249      	negs	r1, r1
 801a536:	4008      	ands	r0, r1
 801a538:	e7f7      	b.n	801a52a <strchr+0xc>

0801a53a <strncpy>:
 801a53a:	0003      	movs	r3, r0
 801a53c:	b530      	push	{r4, r5, lr}
 801a53e:	001d      	movs	r5, r3
 801a540:	2a00      	cmp	r2, #0
 801a542:	d006      	beq.n	801a552 <strncpy+0x18>
 801a544:	780c      	ldrb	r4, [r1, #0]
 801a546:	3a01      	subs	r2, #1
 801a548:	3301      	adds	r3, #1
 801a54a:	702c      	strb	r4, [r5, #0]
 801a54c:	3101      	adds	r1, #1
 801a54e:	2c00      	cmp	r4, #0
 801a550:	d1f5      	bne.n	801a53e <strncpy+0x4>
 801a552:	2100      	movs	r1, #0
 801a554:	189a      	adds	r2, r3, r2
 801a556:	4293      	cmp	r3, r2
 801a558:	d100      	bne.n	801a55c <strncpy+0x22>
 801a55a:	bd30      	pop	{r4, r5, pc}
 801a55c:	7019      	strb	r1, [r3, #0]
 801a55e:	3301      	adds	r3, #1
 801a560:	e7f9      	b.n	801a556 <strncpy+0x1c>
	...

0801a564 <_localeconv_r>:
 801a564:	4800      	ldr	r0, [pc, #0]	@ (801a568 <_localeconv_r+0x4>)
 801a566:	4770      	bx	lr
 801a568:	2000040c 	.word	0x2000040c

0801a56c <_close_r>:
 801a56c:	2300      	movs	r3, #0
 801a56e:	b570      	push	{r4, r5, r6, lr}
 801a570:	4d06      	ldr	r5, [pc, #24]	@ (801a58c <_close_r+0x20>)
 801a572:	0004      	movs	r4, r0
 801a574:	0008      	movs	r0, r1
 801a576:	602b      	str	r3, [r5, #0]
 801a578:	f7f0 f98a 	bl	800a890 <_close>
 801a57c:	1c43      	adds	r3, r0, #1
 801a57e:	d103      	bne.n	801a588 <_close_r+0x1c>
 801a580:	682b      	ldr	r3, [r5, #0]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d000      	beq.n	801a588 <_close_r+0x1c>
 801a586:	6023      	str	r3, [r4, #0]
 801a588:	bd70      	pop	{r4, r5, r6, pc}
 801a58a:	46c0      	nop			@ (mov r8, r8)
 801a58c:	200067ec 	.word	0x200067ec

0801a590 <_lseek_r>:
 801a590:	b570      	push	{r4, r5, r6, lr}
 801a592:	0004      	movs	r4, r0
 801a594:	0008      	movs	r0, r1
 801a596:	0011      	movs	r1, r2
 801a598:	001a      	movs	r2, r3
 801a59a:	2300      	movs	r3, #0
 801a59c:	4d05      	ldr	r5, [pc, #20]	@ (801a5b4 <_lseek_r+0x24>)
 801a59e:	602b      	str	r3, [r5, #0]
 801a5a0:	f7f0 f980 	bl	800a8a4 <_lseek>
 801a5a4:	1c43      	adds	r3, r0, #1
 801a5a6:	d103      	bne.n	801a5b0 <_lseek_r+0x20>
 801a5a8:	682b      	ldr	r3, [r5, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d000      	beq.n	801a5b0 <_lseek_r+0x20>
 801a5ae:	6023      	str	r3, [r4, #0]
 801a5b0:	bd70      	pop	{r4, r5, r6, pc}
 801a5b2:	46c0      	nop			@ (mov r8, r8)
 801a5b4:	200067ec 	.word	0x200067ec

0801a5b8 <_read_r>:
 801a5b8:	b570      	push	{r4, r5, r6, lr}
 801a5ba:	0004      	movs	r4, r0
 801a5bc:	0008      	movs	r0, r1
 801a5be:	0011      	movs	r1, r2
 801a5c0:	001a      	movs	r2, r3
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	4d05      	ldr	r5, [pc, #20]	@ (801a5dc <_read_r+0x24>)
 801a5c6:	602b      	str	r3, [r5, #0]
 801a5c8:	f7f0 f948 	bl	800a85c <_read>
 801a5cc:	1c43      	adds	r3, r0, #1
 801a5ce:	d103      	bne.n	801a5d8 <_read_r+0x20>
 801a5d0:	682b      	ldr	r3, [r5, #0]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d000      	beq.n	801a5d8 <_read_r+0x20>
 801a5d6:	6023      	str	r3, [r4, #0]
 801a5d8:	bd70      	pop	{r4, r5, r6, pc}
 801a5da:	46c0      	nop			@ (mov r8, r8)
 801a5dc:	200067ec 	.word	0x200067ec

0801a5e0 <_write_r>:
 801a5e0:	b570      	push	{r4, r5, r6, lr}
 801a5e2:	0004      	movs	r4, r0
 801a5e4:	0008      	movs	r0, r1
 801a5e6:	0011      	movs	r1, r2
 801a5e8:	001a      	movs	r2, r3
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	4d05      	ldr	r5, [pc, #20]	@ (801a604 <_write_r+0x24>)
 801a5ee:	602b      	str	r3, [r5, #0]
 801a5f0:	f7f0 f941 	bl	800a876 <_write>
 801a5f4:	1c43      	adds	r3, r0, #1
 801a5f6:	d103      	bne.n	801a600 <_write_r+0x20>
 801a5f8:	682b      	ldr	r3, [r5, #0]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d000      	beq.n	801a600 <_write_r+0x20>
 801a5fe:	6023      	str	r3, [r4, #0]
 801a600:	bd70      	pop	{r4, r5, r6, pc}
 801a602:	46c0      	nop			@ (mov r8, r8)
 801a604:	200067ec 	.word	0x200067ec

0801a608 <__errno>:
 801a608:	4b01      	ldr	r3, [pc, #4]	@ (801a610 <__errno+0x8>)
 801a60a:	6818      	ldr	r0, [r3, #0]
 801a60c:	4770      	bx	lr
 801a60e:	46c0      	nop			@ (mov r8, r8)
 801a610:	200002cc 	.word	0x200002cc

0801a614 <__libc_init_array>:
 801a614:	b570      	push	{r4, r5, r6, lr}
 801a616:	2600      	movs	r6, #0
 801a618:	4c0c      	ldr	r4, [pc, #48]	@ (801a64c <__libc_init_array+0x38>)
 801a61a:	4d0d      	ldr	r5, [pc, #52]	@ (801a650 <__libc_init_array+0x3c>)
 801a61c:	1b64      	subs	r4, r4, r5
 801a61e:	10a4      	asrs	r4, r4, #2
 801a620:	42a6      	cmp	r6, r4
 801a622:	d109      	bne.n	801a638 <__libc_init_array+0x24>
 801a624:	2600      	movs	r6, #0
 801a626:	f002 f9e1 	bl	801c9ec <_init>
 801a62a:	4c0a      	ldr	r4, [pc, #40]	@ (801a654 <__libc_init_array+0x40>)
 801a62c:	4d0a      	ldr	r5, [pc, #40]	@ (801a658 <__libc_init_array+0x44>)
 801a62e:	1b64      	subs	r4, r4, r5
 801a630:	10a4      	asrs	r4, r4, #2
 801a632:	42a6      	cmp	r6, r4
 801a634:	d105      	bne.n	801a642 <__libc_init_array+0x2e>
 801a636:	bd70      	pop	{r4, r5, r6, pc}
 801a638:	00b3      	lsls	r3, r6, #2
 801a63a:	58eb      	ldr	r3, [r5, r3]
 801a63c:	4798      	blx	r3
 801a63e:	3601      	adds	r6, #1
 801a640:	e7ee      	b.n	801a620 <__libc_init_array+0xc>
 801a642:	00b3      	lsls	r3, r6, #2
 801a644:	58eb      	ldr	r3, [r5, r3]
 801a646:	4798      	blx	r3
 801a648:	3601      	adds	r6, #1
 801a64a:	e7f2      	b.n	801a632 <__libc_init_array+0x1e>
 801a64c:	08020784 	.word	0x08020784
 801a650:	08020784 	.word	0x08020784
 801a654:	08020788 	.word	0x08020788
 801a658:	08020784 	.word	0x08020784

0801a65c <__retarget_lock_init_recursive>:
 801a65c:	4770      	bx	lr

0801a65e <__retarget_lock_acquire_recursive>:
 801a65e:	4770      	bx	lr

0801a660 <__retarget_lock_release_recursive>:
 801a660:	4770      	bx	lr

0801a662 <strcpy>:
 801a662:	0003      	movs	r3, r0
 801a664:	780a      	ldrb	r2, [r1, #0]
 801a666:	3101      	adds	r1, #1
 801a668:	701a      	strb	r2, [r3, #0]
 801a66a:	3301      	adds	r3, #1
 801a66c:	2a00      	cmp	r2, #0
 801a66e:	d1f9      	bne.n	801a664 <strcpy+0x2>
 801a670:	4770      	bx	lr

0801a672 <memchr>:
 801a672:	b2c9      	uxtb	r1, r1
 801a674:	1882      	adds	r2, r0, r2
 801a676:	4290      	cmp	r0, r2
 801a678:	d101      	bne.n	801a67e <memchr+0xc>
 801a67a:	2000      	movs	r0, #0
 801a67c:	4770      	bx	lr
 801a67e:	7803      	ldrb	r3, [r0, #0]
 801a680:	428b      	cmp	r3, r1
 801a682:	d0fb      	beq.n	801a67c <memchr+0xa>
 801a684:	3001      	adds	r0, #1
 801a686:	e7f6      	b.n	801a676 <memchr+0x4>

0801a688 <memcpy>:
 801a688:	2300      	movs	r3, #0
 801a68a:	b510      	push	{r4, lr}
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d100      	bne.n	801a692 <memcpy+0xa>
 801a690:	bd10      	pop	{r4, pc}
 801a692:	5ccc      	ldrb	r4, [r1, r3]
 801a694:	54c4      	strb	r4, [r0, r3]
 801a696:	3301      	adds	r3, #1
 801a698:	e7f8      	b.n	801a68c <memcpy+0x4>

0801a69a <quorem>:
 801a69a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a69c:	6903      	ldr	r3, [r0, #16]
 801a69e:	690c      	ldr	r4, [r1, #16]
 801a6a0:	b089      	sub	sp, #36	@ 0x24
 801a6a2:	9003      	str	r0, [sp, #12]
 801a6a4:	9106      	str	r1, [sp, #24]
 801a6a6:	2000      	movs	r0, #0
 801a6a8:	42a3      	cmp	r3, r4
 801a6aa:	db63      	blt.n	801a774 <quorem+0xda>
 801a6ac:	000b      	movs	r3, r1
 801a6ae:	3c01      	subs	r4, #1
 801a6b0:	3314      	adds	r3, #20
 801a6b2:	00a5      	lsls	r5, r4, #2
 801a6b4:	9304      	str	r3, [sp, #16]
 801a6b6:	195b      	adds	r3, r3, r5
 801a6b8:	9305      	str	r3, [sp, #20]
 801a6ba:	9b03      	ldr	r3, [sp, #12]
 801a6bc:	3314      	adds	r3, #20
 801a6be:	9301      	str	r3, [sp, #4]
 801a6c0:	195d      	adds	r5, r3, r5
 801a6c2:	9b05      	ldr	r3, [sp, #20]
 801a6c4:	682f      	ldr	r7, [r5, #0]
 801a6c6:	681e      	ldr	r6, [r3, #0]
 801a6c8:	0038      	movs	r0, r7
 801a6ca:	3601      	adds	r6, #1
 801a6cc:	0031      	movs	r1, r6
 801a6ce:	f7e5 fd4b 	bl	8000168 <__udivsi3>
 801a6d2:	9002      	str	r0, [sp, #8]
 801a6d4:	42b7      	cmp	r7, r6
 801a6d6:	d327      	bcc.n	801a728 <quorem+0x8e>
 801a6d8:	9b04      	ldr	r3, [sp, #16]
 801a6da:	2700      	movs	r7, #0
 801a6dc:	469c      	mov	ip, r3
 801a6de:	9e01      	ldr	r6, [sp, #4]
 801a6e0:	9707      	str	r7, [sp, #28]
 801a6e2:	4662      	mov	r2, ip
 801a6e4:	ca08      	ldmia	r2!, {r3}
 801a6e6:	6830      	ldr	r0, [r6, #0]
 801a6e8:	4694      	mov	ip, r2
 801a6ea:	9a02      	ldr	r2, [sp, #8]
 801a6ec:	b299      	uxth	r1, r3
 801a6ee:	4351      	muls	r1, r2
 801a6f0:	0c1b      	lsrs	r3, r3, #16
 801a6f2:	4353      	muls	r3, r2
 801a6f4:	19c9      	adds	r1, r1, r7
 801a6f6:	0c0a      	lsrs	r2, r1, #16
 801a6f8:	189b      	adds	r3, r3, r2
 801a6fa:	b289      	uxth	r1, r1
 801a6fc:	b282      	uxth	r2, r0
 801a6fe:	1a52      	subs	r2, r2, r1
 801a700:	9907      	ldr	r1, [sp, #28]
 801a702:	0c1f      	lsrs	r7, r3, #16
 801a704:	1852      	adds	r2, r2, r1
 801a706:	0c00      	lsrs	r0, r0, #16
 801a708:	b29b      	uxth	r3, r3
 801a70a:	1411      	asrs	r1, r2, #16
 801a70c:	1ac3      	subs	r3, r0, r3
 801a70e:	185b      	adds	r3, r3, r1
 801a710:	1419      	asrs	r1, r3, #16
 801a712:	b292      	uxth	r2, r2
 801a714:	041b      	lsls	r3, r3, #16
 801a716:	431a      	orrs	r2, r3
 801a718:	9b05      	ldr	r3, [sp, #20]
 801a71a:	9107      	str	r1, [sp, #28]
 801a71c:	c604      	stmia	r6!, {r2}
 801a71e:	4563      	cmp	r3, ip
 801a720:	d2df      	bcs.n	801a6e2 <quorem+0x48>
 801a722:	682b      	ldr	r3, [r5, #0]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d02b      	beq.n	801a780 <quorem+0xe6>
 801a728:	9906      	ldr	r1, [sp, #24]
 801a72a:	9803      	ldr	r0, [sp, #12]
 801a72c:	f001 f9b6 	bl	801ba9c <__mcmp>
 801a730:	2800      	cmp	r0, #0
 801a732:	db1e      	blt.n	801a772 <quorem+0xd8>
 801a734:	2600      	movs	r6, #0
 801a736:	9d01      	ldr	r5, [sp, #4]
 801a738:	9904      	ldr	r1, [sp, #16]
 801a73a:	c901      	ldmia	r1!, {r0}
 801a73c:	682b      	ldr	r3, [r5, #0]
 801a73e:	b287      	uxth	r7, r0
 801a740:	b29a      	uxth	r2, r3
 801a742:	1bd2      	subs	r2, r2, r7
 801a744:	1992      	adds	r2, r2, r6
 801a746:	0c00      	lsrs	r0, r0, #16
 801a748:	0c1b      	lsrs	r3, r3, #16
 801a74a:	1a1b      	subs	r3, r3, r0
 801a74c:	1410      	asrs	r0, r2, #16
 801a74e:	181b      	adds	r3, r3, r0
 801a750:	141e      	asrs	r6, r3, #16
 801a752:	b292      	uxth	r2, r2
 801a754:	041b      	lsls	r3, r3, #16
 801a756:	431a      	orrs	r2, r3
 801a758:	9b05      	ldr	r3, [sp, #20]
 801a75a:	c504      	stmia	r5!, {r2}
 801a75c:	428b      	cmp	r3, r1
 801a75e:	d2ec      	bcs.n	801a73a <quorem+0xa0>
 801a760:	9a01      	ldr	r2, [sp, #4]
 801a762:	00a3      	lsls	r3, r4, #2
 801a764:	18d3      	adds	r3, r2, r3
 801a766:	681a      	ldr	r2, [r3, #0]
 801a768:	2a00      	cmp	r2, #0
 801a76a:	d014      	beq.n	801a796 <quorem+0xfc>
 801a76c:	9b02      	ldr	r3, [sp, #8]
 801a76e:	3301      	adds	r3, #1
 801a770:	9302      	str	r3, [sp, #8]
 801a772:	9802      	ldr	r0, [sp, #8]
 801a774:	b009      	add	sp, #36	@ 0x24
 801a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a778:	682b      	ldr	r3, [r5, #0]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d104      	bne.n	801a788 <quorem+0xee>
 801a77e:	3c01      	subs	r4, #1
 801a780:	9b01      	ldr	r3, [sp, #4]
 801a782:	3d04      	subs	r5, #4
 801a784:	42ab      	cmp	r3, r5
 801a786:	d3f7      	bcc.n	801a778 <quorem+0xde>
 801a788:	9b03      	ldr	r3, [sp, #12]
 801a78a:	611c      	str	r4, [r3, #16]
 801a78c:	e7cc      	b.n	801a728 <quorem+0x8e>
 801a78e:	681a      	ldr	r2, [r3, #0]
 801a790:	2a00      	cmp	r2, #0
 801a792:	d104      	bne.n	801a79e <quorem+0x104>
 801a794:	3c01      	subs	r4, #1
 801a796:	9a01      	ldr	r2, [sp, #4]
 801a798:	3b04      	subs	r3, #4
 801a79a:	429a      	cmp	r2, r3
 801a79c:	d3f7      	bcc.n	801a78e <quorem+0xf4>
 801a79e:	9b03      	ldr	r3, [sp, #12]
 801a7a0:	611c      	str	r4, [r3, #16]
 801a7a2:	e7e3      	b.n	801a76c <quorem+0xd2>

0801a7a4 <_dtoa_r>:
 801a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7a6:	0014      	movs	r4, r2
 801a7a8:	001d      	movs	r5, r3
 801a7aa:	69c6      	ldr	r6, [r0, #28]
 801a7ac:	b09d      	sub	sp, #116	@ 0x74
 801a7ae:	940a      	str	r4, [sp, #40]	@ 0x28
 801a7b0:	950b      	str	r5, [sp, #44]	@ 0x2c
 801a7b2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801a7b4:	9003      	str	r0, [sp, #12]
 801a7b6:	2e00      	cmp	r6, #0
 801a7b8:	d10f      	bne.n	801a7da <_dtoa_r+0x36>
 801a7ba:	2010      	movs	r0, #16
 801a7bc:	f000 fe2c 	bl	801b418 <malloc>
 801a7c0:	9b03      	ldr	r3, [sp, #12]
 801a7c2:	1e02      	subs	r2, r0, #0
 801a7c4:	61d8      	str	r0, [r3, #28]
 801a7c6:	d104      	bne.n	801a7d2 <_dtoa_r+0x2e>
 801a7c8:	21ef      	movs	r1, #239	@ 0xef
 801a7ca:	4bc7      	ldr	r3, [pc, #796]	@ (801aae8 <_dtoa_r+0x344>)
 801a7cc:	48c7      	ldr	r0, [pc, #796]	@ (801aaec <_dtoa_r+0x348>)
 801a7ce:	f001 feb9 	bl	801c544 <__assert_func>
 801a7d2:	6046      	str	r6, [r0, #4]
 801a7d4:	6086      	str	r6, [r0, #8]
 801a7d6:	6006      	str	r6, [r0, #0]
 801a7d8:	60c6      	str	r6, [r0, #12]
 801a7da:	9b03      	ldr	r3, [sp, #12]
 801a7dc:	69db      	ldr	r3, [r3, #28]
 801a7de:	6819      	ldr	r1, [r3, #0]
 801a7e0:	2900      	cmp	r1, #0
 801a7e2:	d00b      	beq.n	801a7fc <_dtoa_r+0x58>
 801a7e4:	685a      	ldr	r2, [r3, #4]
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	4093      	lsls	r3, r2
 801a7ea:	604a      	str	r2, [r1, #4]
 801a7ec:	608b      	str	r3, [r1, #8]
 801a7ee:	9803      	ldr	r0, [sp, #12]
 801a7f0:	f000 ff12 	bl	801b618 <_Bfree>
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	9b03      	ldr	r3, [sp, #12]
 801a7f8:	69db      	ldr	r3, [r3, #28]
 801a7fa:	601a      	str	r2, [r3, #0]
 801a7fc:	2d00      	cmp	r5, #0
 801a7fe:	da1e      	bge.n	801a83e <_dtoa_r+0x9a>
 801a800:	2301      	movs	r3, #1
 801a802:	603b      	str	r3, [r7, #0]
 801a804:	006b      	lsls	r3, r5, #1
 801a806:	085b      	lsrs	r3, r3, #1
 801a808:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a80a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a80c:	4bb8      	ldr	r3, [pc, #736]	@ (801aaf0 <_dtoa_r+0x34c>)
 801a80e:	4ab8      	ldr	r2, [pc, #736]	@ (801aaf0 <_dtoa_r+0x34c>)
 801a810:	403b      	ands	r3, r7
 801a812:	4293      	cmp	r3, r2
 801a814:	d116      	bne.n	801a844 <_dtoa_r+0xa0>
 801a816:	4bb7      	ldr	r3, [pc, #732]	@ (801aaf4 <_dtoa_r+0x350>)
 801a818:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a81a:	6013      	str	r3, [r2, #0]
 801a81c:	033b      	lsls	r3, r7, #12
 801a81e:	0b1b      	lsrs	r3, r3, #12
 801a820:	4323      	orrs	r3, r4
 801a822:	d101      	bne.n	801a828 <_dtoa_r+0x84>
 801a824:	f000 fd80 	bl	801b328 <_dtoa_r+0xb84>
 801a828:	4bb3      	ldr	r3, [pc, #716]	@ (801aaf8 <_dtoa_r+0x354>)
 801a82a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a82c:	9308      	str	r3, [sp, #32]
 801a82e:	2a00      	cmp	r2, #0
 801a830:	d002      	beq.n	801a838 <_dtoa_r+0x94>
 801a832:	4bb2      	ldr	r3, [pc, #712]	@ (801aafc <_dtoa_r+0x358>)
 801a834:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a836:	6013      	str	r3, [r2, #0]
 801a838:	9808      	ldr	r0, [sp, #32]
 801a83a:	b01d      	add	sp, #116	@ 0x74
 801a83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a83e:	2300      	movs	r3, #0
 801a840:	603b      	str	r3, [r7, #0]
 801a842:	e7e2      	b.n	801a80a <_dtoa_r+0x66>
 801a844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a848:	9212      	str	r2, [sp, #72]	@ 0x48
 801a84a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a84c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a84e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a850:	2200      	movs	r2, #0
 801a852:	2300      	movs	r3, #0
 801a854:	f7e5 fe0e 	bl	8000474 <__aeabi_dcmpeq>
 801a858:	1e06      	subs	r6, r0, #0
 801a85a:	d00b      	beq.n	801a874 <_dtoa_r+0xd0>
 801a85c:	2301      	movs	r3, #1
 801a85e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a860:	6013      	str	r3, [r2, #0]
 801a862:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a864:	2b00      	cmp	r3, #0
 801a866:	d002      	beq.n	801a86e <_dtoa_r+0xca>
 801a868:	4ba5      	ldr	r3, [pc, #660]	@ (801ab00 <_dtoa_r+0x35c>)
 801a86a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a86c:	6013      	str	r3, [r2, #0]
 801a86e:	4ba5      	ldr	r3, [pc, #660]	@ (801ab04 <_dtoa_r+0x360>)
 801a870:	9308      	str	r3, [sp, #32]
 801a872:	e7e1      	b.n	801a838 <_dtoa_r+0x94>
 801a874:	ab1a      	add	r3, sp, #104	@ 0x68
 801a876:	9301      	str	r3, [sp, #4]
 801a878:	ab1b      	add	r3, sp, #108	@ 0x6c
 801a87a:	9300      	str	r3, [sp, #0]
 801a87c:	9803      	ldr	r0, [sp, #12]
 801a87e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a880:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a882:	f001 f9c1 	bl	801bc08 <__d2b>
 801a886:	007a      	lsls	r2, r7, #1
 801a888:	9005      	str	r0, [sp, #20]
 801a88a:	0d52      	lsrs	r2, r2, #21
 801a88c:	d100      	bne.n	801a890 <_dtoa_r+0xec>
 801a88e:	e07b      	b.n	801a988 <_dtoa_r+0x1e4>
 801a890:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a892:	9618      	str	r6, [sp, #96]	@ 0x60
 801a894:	0319      	lsls	r1, r3, #12
 801a896:	4b9c      	ldr	r3, [pc, #624]	@ (801ab08 <_dtoa_r+0x364>)
 801a898:	0b09      	lsrs	r1, r1, #12
 801a89a:	430b      	orrs	r3, r1
 801a89c:	499b      	ldr	r1, [pc, #620]	@ (801ab0c <_dtoa_r+0x368>)
 801a89e:	1857      	adds	r7, r2, r1
 801a8a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a8a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a8a4:	0019      	movs	r1, r3
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	4b99      	ldr	r3, [pc, #612]	@ (801ab10 <_dtoa_r+0x36c>)
 801a8aa:	f7e8 fabb 	bl	8002e24 <__aeabi_dsub>
 801a8ae:	4a99      	ldr	r2, [pc, #612]	@ (801ab14 <_dtoa_r+0x370>)
 801a8b0:	4b99      	ldr	r3, [pc, #612]	@ (801ab18 <_dtoa_r+0x374>)
 801a8b2:	f7e7 ffd1 	bl	8002858 <__aeabi_dmul>
 801a8b6:	4a99      	ldr	r2, [pc, #612]	@ (801ab1c <_dtoa_r+0x378>)
 801a8b8:	4b99      	ldr	r3, [pc, #612]	@ (801ab20 <_dtoa_r+0x37c>)
 801a8ba:	f7e6 ffcd 	bl	8001858 <__aeabi_dadd>
 801a8be:	0004      	movs	r4, r0
 801a8c0:	0038      	movs	r0, r7
 801a8c2:	000d      	movs	r5, r1
 801a8c4:	f7e8 ff16 	bl	80036f4 <__aeabi_i2d>
 801a8c8:	4a96      	ldr	r2, [pc, #600]	@ (801ab24 <_dtoa_r+0x380>)
 801a8ca:	4b97      	ldr	r3, [pc, #604]	@ (801ab28 <_dtoa_r+0x384>)
 801a8cc:	f7e7 ffc4 	bl	8002858 <__aeabi_dmul>
 801a8d0:	0002      	movs	r2, r0
 801a8d2:	000b      	movs	r3, r1
 801a8d4:	0020      	movs	r0, r4
 801a8d6:	0029      	movs	r1, r5
 801a8d8:	f7e6 ffbe 	bl	8001858 <__aeabi_dadd>
 801a8dc:	0004      	movs	r4, r0
 801a8de:	000d      	movs	r5, r1
 801a8e0:	f7e8 fecc 	bl	800367c <__aeabi_d2iz>
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	9004      	str	r0, [sp, #16]
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	0020      	movs	r0, r4
 801a8ec:	0029      	movs	r1, r5
 801a8ee:	f7e5 fdc7 	bl	8000480 <__aeabi_dcmplt>
 801a8f2:	2800      	cmp	r0, #0
 801a8f4:	d00b      	beq.n	801a90e <_dtoa_r+0x16a>
 801a8f6:	9804      	ldr	r0, [sp, #16]
 801a8f8:	f7e8 fefc 	bl	80036f4 <__aeabi_i2d>
 801a8fc:	002b      	movs	r3, r5
 801a8fe:	0022      	movs	r2, r4
 801a900:	f7e5 fdb8 	bl	8000474 <__aeabi_dcmpeq>
 801a904:	4243      	negs	r3, r0
 801a906:	4158      	adcs	r0, r3
 801a908:	9b04      	ldr	r3, [sp, #16]
 801a90a:	1a1b      	subs	r3, r3, r0
 801a90c:	9304      	str	r3, [sp, #16]
 801a90e:	2301      	movs	r3, #1
 801a910:	9315      	str	r3, [sp, #84]	@ 0x54
 801a912:	9b04      	ldr	r3, [sp, #16]
 801a914:	2b16      	cmp	r3, #22
 801a916:	d810      	bhi.n	801a93a <_dtoa_r+0x196>
 801a918:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a91a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a91c:	9a04      	ldr	r2, [sp, #16]
 801a91e:	4b83      	ldr	r3, [pc, #524]	@ (801ab2c <_dtoa_r+0x388>)
 801a920:	00d2      	lsls	r2, r2, #3
 801a922:	189b      	adds	r3, r3, r2
 801a924:	681a      	ldr	r2, [r3, #0]
 801a926:	685b      	ldr	r3, [r3, #4]
 801a928:	f7e5 fdaa 	bl	8000480 <__aeabi_dcmplt>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	d047      	beq.n	801a9c0 <_dtoa_r+0x21c>
 801a930:	9b04      	ldr	r3, [sp, #16]
 801a932:	3b01      	subs	r3, #1
 801a934:	9304      	str	r3, [sp, #16]
 801a936:	2300      	movs	r3, #0
 801a938:	9315      	str	r3, [sp, #84]	@ 0x54
 801a93a:	2200      	movs	r2, #0
 801a93c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801a93e:	9206      	str	r2, [sp, #24]
 801a940:	1bdb      	subs	r3, r3, r7
 801a942:	1e5a      	subs	r2, r3, #1
 801a944:	d53e      	bpl.n	801a9c4 <_dtoa_r+0x220>
 801a946:	2201      	movs	r2, #1
 801a948:	1ad3      	subs	r3, r2, r3
 801a94a:	9306      	str	r3, [sp, #24]
 801a94c:	2300      	movs	r3, #0
 801a94e:	930d      	str	r3, [sp, #52]	@ 0x34
 801a950:	9b04      	ldr	r3, [sp, #16]
 801a952:	2b00      	cmp	r3, #0
 801a954:	db38      	blt.n	801a9c8 <_dtoa_r+0x224>
 801a956:	9a04      	ldr	r2, [sp, #16]
 801a958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a95a:	4694      	mov	ip, r2
 801a95c:	4463      	add	r3, ip
 801a95e:	930d      	str	r3, [sp, #52]	@ 0x34
 801a960:	2300      	movs	r3, #0
 801a962:	9214      	str	r2, [sp, #80]	@ 0x50
 801a964:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a966:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a968:	2401      	movs	r4, #1
 801a96a:	2b09      	cmp	r3, #9
 801a96c:	d862      	bhi.n	801aa34 <_dtoa_r+0x290>
 801a96e:	2b05      	cmp	r3, #5
 801a970:	dd02      	ble.n	801a978 <_dtoa_r+0x1d4>
 801a972:	2400      	movs	r4, #0
 801a974:	3b04      	subs	r3, #4
 801a976:	9322      	str	r3, [sp, #136]	@ 0x88
 801a978:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a97a:	1e98      	subs	r0, r3, #2
 801a97c:	2803      	cmp	r0, #3
 801a97e:	d863      	bhi.n	801aa48 <_dtoa_r+0x2a4>
 801a980:	f7e5 fbd4 	bl	800012c <__gnu_thumb1_case_uqi>
 801a984:	2b385654 	.word	0x2b385654
 801a988:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a98a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a98c:	18f6      	adds	r6, r6, r3
 801a98e:	4b68      	ldr	r3, [pc, #416]	@ (801ab30 <_dtoa_r+0x38c>)
 801a990:	18f2      	adds	r2, r6, r3
 801a992:	2a20      	cmp	r2, #32
 801a994:	dd0f      	ble.n	801a9b6 <_dtoa_r+0x212>
 801a996:	2340      	movs	r3, #64	@ 0x40
 801a998:	1a9b      	subs	r3, r3, r2
 801a99a:	409f      	lsls	r7, r3
 801a99c:	4b65      	ldr	r3, [pc, #404]	@ (801ab34 <_dtoa_r+0x390>)
 801a99e:	0038      	movs	r0, r7
 801a9a0:	18f3      	adds	r3, r6, r3
 801a9a2:	40dc      	lsrs	r4, r3
 801a9a4:	4320      	orrs	r0, r4
 801a9a6:	f7e8 fed3 	bl	8003750 <__aeabi_ui2d>
 801a9aa:	2201      	movs	r2, #1
 801a9ac:	4b62      	ldr	r3, [pc, #392]	@ (801ab38 <_dtoa_r+0x394>)
 801a9ae:	1e77      	subs	r7, r6, #1
 801a9b0:	18cb      	adds	r3, r1, r3
 801a9b2:	9218      	str	r2, [sp, #96]	@ 0x60
 801a9b4:	e776      	b.n	801a8a4 <_dtoa_r+0x100>
 801a9b6:	2320      	movs	r3, #32
 801a9b8:	0020      	movs	r0, r4
 801a9ba:	1a9b      	subs	r3, r3, r2
 801a9bc:	4098      	lsls	r0, r3
 801a9be:	e7f2      	b.n	801a9a6 <_dtoa_r+0x202>
 801a9c0:	9015      	str	r0, [sp, #84]	@ 0x54
 801a9c2:	e7ba      	b.n	801a93a <_dtoa_r+0x196>
 801a9c4:	920d      	str	r2, [sp, #52]	@ 0x34
 801a9c6:	e7c3      	b.n	801a950 <_dtoa_r+0x1ac>
 801a9c8:	9b06      	ldr	r3, [sp, #24]
 801a9ca:	9a04      	ldr	r2, [sp, #16]
 801a9cc:	1a9b      	subs	r3, r3, r2
 801a9ce:	9306      	str	r3, [sp, #24]
 801a9d0:	4253      	negs	r3, r2
 801a9d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	9314      	str	r3, [sp, #80]	@ 0x50
 801a9d8:	e7c5      	b.n	801a966 <_dtoa_r+0x1c2>
 801a9da:	2301      	movs	r3, #1
 801a9dc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a9de:	9310      	str	r3, [sp, #64]	@ 0x40
 801a9e0:	4694      	mov	ip, r2
 801a9e2:	9b04      	ldr	r3, [sp, #16]
 801a9e4:	4463      	add	r3, ip
 801a9e6:	930e      	str	r3, [sp, #56]	@ 0x38
 801a9e8:	3301      	adds	r3, #1
 801a9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	dc08      	bgt.n	801aa02 <_dtoa_r+0x25e>
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	e006      	b.n	801aa02 <_dtoa_r+0x25e>
 801a9f4:	2301      	movs	r3, #1
 801a9f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a9f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	dd28      	ble.n	801aa50 <_dtoa_r+0x2ac>
 801a9fe:	930e      	str	r3, [sp, #56]	@ 0x38
 801aa00:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa02:	9a03      	ldr	r2, [sp, #12]
 801aa04:	2100      	movs	r1, #0
 801aa06:	69d0      	ldr	r0, [r2, #28]
 801aa08:	2204      	movs	r2, #4
 801aa0a:	0015      	movs	r5, r2
 801aa0c:	3514      	adds	r5, #20
 801aa0e:	429d      	cmp	r5, r3
 801aa10:	d923      	bls.n	801aa5a <_dtoa_r+0x2b6>
 801aa12:	6041      	str	r1, [r0, #4]
 801aa14:	9803      	ldr	r0, [sp, #12]
 801aa16:	f000 fdbb 	bl	801b590 <_Balloc>
 801aa1a:	9008      	str	r0, [sp, #32]
 801aa1c:	2800      	cmp	r0, #0
 801aa1e:	d11f      	bne.n	801aa60 <_dtoa_r+0x2bc>
 801aa20:	21b0      	movs	r1, #176	@ 0xb0
 801aa22:	4b46      	ldr	r3, [pc, #280]	@ (801ab3c <_dtoa_r+0x398>)
 801aa24:	4831      	ldr	r0, [pc, #196]	@ (801aaec <_dtoa_r+0x348>)
 801aa26:	9a08      	ldr	r2, [sp, #32]
 801aa28:	31ff      	adds	r1, #255	@ 0xff
 801aa2a:	e6d0      	b.n	801a7ce <_dtoa_r+0x2a>
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	e7e2      	b.n	801a9f6 <_dtoa_r+0x252>
 801aa30:	2300      	movs	r3, #0
 801aa32:	e7d3      	b.n	801a9dc <_dtoa_r+0x238>
 801aa34:	2300      	movs	r3, #0
 801aa36:	9410      	str	r4, [sp, #64]	@ 0x40
 801aa38:	9322      	str	r3, [sp, #136]	@ 0x88
 801aa3a:	3b01      	subs	r3, #1
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	930e      	str	r3, [sp, #56]	@ 0x38
 801aa40:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa42:	3313      	adds	r3, #19
 801aa44:	9223      	str	r2, [sp, #140]	@ 0x8c
 801aa46:	e7dc      	b.n	801aa02 <_dtoa_r+0x25e>
 801aa48:	2301      	movs	r3, #1
 801aa4a:	9310      	str	r3, [sp, #64]	@ 0x40
 801aa4c:	3b02      	subs	r3, #2
 801aa4e:	e7f5      	b.n	801aa3c <_dtoa_r+0x298>
 801aa50:	2301      	movs	r3, #1
 801aa52:	001a      	movs	r2, r3
 801aa54:	930e      	str	r3, [sp, #56]	@ 0x38
 801aa56:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa58:	e7f4      	b.n	801aa44 <_dtoa_r+0x2a0>
 801aa5a:	3101      	adds	r1, #1
 801aa5c:	0052      	lsls	r2, r2, #1
 801aa5e:	e7d4      	b.n	801aa0a <_dtoa_r+0x266>
 801aa60:	9b03      	ldr	r3, [sp, #12]
 801aa62:	9a08      	ldr	r2, [sp, #32]
 801aa64:	69db      	ldr	r3, [r3, #28]
 801aa66:	601a      	str	r2, [r3, #0]
 801aa68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa6a:	2b0e      	cmp	r3, #14
 801aa6c:	d900      	bls.n	801aa70 <_dtoa_r+0x2cc>
 801aa6e:	e0d6      	b.n	801ac1e <_dtoa_r+0x47a>
 801aa70:	2c00      	cmp	r4, #0
 801aa72:	d100      	bne.n	801aa76 <_dtoa_r+0x2d2>
 801aa74:	e0d3      	b.n	801ac1e <_dtoa_r+0x47a>
 801aa76:	9b04      	ldr	r3, [sp, #16]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	dd63      	ble.n	801ab44 <_dtoa_r+0x3a0>
 801aa7c:	210f      	movs	r1, #15
 801aa7e:	9a04      	ldr	r2, [sp, #16]
 801aa80:	4b2a      	ldr	r3, [pc, #168]	@ (801ab2c <_dtoa_r+0x388>)
 801aa82:	400a      	ands	r2, r1
 801aa84:	00d2      	lsls	r2, r2, #3
 801aa86:	189b      	adds	r3, r3, r2
 801aa88:	681e      	ldr	r6, [r3, #0]
 801aa8a:	685f      	ldr	r7, [r3, #4]
 801aa8c:	9b04      	ldr	r3, [sp, #16]
 801aa8e:	2402      	movs	r4, #2
 801aa90:	111d      	asrs	r5, r3, #4
 801aa92:	05db      	lsls	r3, r3, #23
 801aa94:	d50a      	bpl.n	801aaac <_dtoa_r+0x308>
 801aa96:	4b2a      	ldr	r3, [pc, #168]	@ (801ab40 <_dtoa_r+0x39c>)
 801aa98:	400d      	ands	r5, r1
 801aa9a:	6a1a      	ldr	r2, [r3, #32]
 801aa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aaa0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801aaa2:	f7e7 fa9f 	bl	8001fe4 <__aeabi_ddiv>
 801aaa6:	900a      	str	r0, [sp, #40]	@ 0x28
 801aaa8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801aaaa:	3401      	adds	r4, #1
 801aaac:	4b24      	ldr	r3, [pc, #144]	@ (801ab40 <_dtoa_r+0x39c>)
 801aaae:	930c      	str	r3, [sp, #48]	@ 0x30
 801aab0:	2d00      	cmp	r5, #0
 801aab2:	d108      	bne.n	801aac6 <_dtoa_r+0x322>
 801aab4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801aab6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801aab8:	0032      	movs	r2, r6
 801aaba:	003b      	movs	r3, r7
 801aabc:	f7e7 fa92 	bl	8001fe4 <__aeabi_ddiv>
 801aac0:	900a      	str	r0, [sp, #40]	@ 0x28
 801aac2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801aac4:	e059      	b.n	801ab7a <_dtoa_r+0x3d6>
 801aac6:	2301      	movs	r3, #1
 801aac8:	421d      	tst	r5, r3
 801aaca:	d009      	beq.n	801aae0 <_dtoa_r+0x33c>
 801aacc:	18e4      	adds	r4, r4, r3
 801aace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aad0:	0030      	movs	r0, r6
 801aad2:	681a      	ldr	r2, [r3, #0]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	0039      	movs	r1, r7
 801aad8:	f7e7 febe 	bl	8002858 <__aeabi_dmul>
 801aadc:	0006      	movs	r6, r0
 801aade:	000f      	movs	r7, r1
 801aae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aae2:	106d      	asrs	r5, r5, #1
 801aae4:	3308      	adds	r3, #8
 801aae6:	e7e2      	b.n	801aaae <_dtoa_r+0x30a>
 801aae8:	080202c2 	.word	0x080202c2
 801aaec:	080202d9 	.word	0x080202d9
 801aaf0:	7ff00000 	.word	0x7ff00000
 801aaf4:	0000270f 	.word	0x0000270f
 801aaf8:	080202be 	.word	0x080202be
 801aafc:	080202c1 	.word	0x080202c1
 801ab00:	0801ffe9 	.word	0x0801ffe9
 801ab04:	0801ffe8 	.word	0x0801ffe8
 801ab08:	3ff00000 	.word	0x3ff00000
 801ab0c:	fffffc01 	.word	0xfffffc01
 801ab10:	3ff80000 	.word	0x3ff80000
 801ab14:	636f4361 	.word	0x636f4361
 801ab18:	3fd287a7 	.word	0x3fd287a7
 801ab1c:	8b60c8b3 	.word	0x8b60c8b3
 801ab20:	3fc68a28 	.word	0x3fc68a28
 801ab24:	509f79fb 	.word	0x509f79fb
 801ab28:	3fd34413 	.word	0x3fd34413
 801ab2c:	080205b0 	.word	0x080205b0
 801ab30:	00000432 	.word	0x00000432
 801ab34:	00000412 	.word	0x00000412
 801ab38:	fe100000 	.word	0xfe100000
 801ab3c:	08020331 	.word	0x08020331
 801ab40:	08020588 	.word	0x08020588
 801ab44:	9b04      	ldr	r3, [sp, #16]
 801ab46:	2402      	movs	r4, #2
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d016      	beq.n	801ab7a <_dtoa_r+0x3d6>
 801ab4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ab4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ab50:	220f      	movs	r2, #15
 801ab52:	425d      	negs	r5, r3
 801ab54:	402a      	ands	r2, r5
 801ab56:	4bd5      	ldr	r3, [pc, #852]	@ (801aeac <_dtoa_r+0x708>)
 801ab58:	00d2      	lsls	r2, r2, #3
 801ab5a:	189b      	adds	r3, r3, r2
 801ab5c:	681a      	ldr	r2, [r3, #0]
 801ab5e:	685b      	ldr	r3, [r3, #4]
 801ab60:	f7e7 fe7a 	bl	8002858 <__aeabi_dmul>
 801ab64:	2701      	movs	r7, #1
 801ab66:	2300      	movs	r3, #0
 801ab68:	900a      	str	r0, [sp, #40]	@ 0x28
 801ab6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ab6c:	4ed0      	ldr	r6, [pc, #832]	@ (801aeb0 <_dtoa_r+0x70c>)
 801ab6e:	112d      	asrs	r5, r5, #4
 801ab70:	2d00      	cmp	r5, #0
 801ab72:	d000      	beq.n	801ab76 <_dtoa_r+0x3d2>
 801ab74:	e095      	b.n	801aca2 <_dtoa_r+0x4fe>
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d1a2      	bne.n	801aac0 <_dtoa_r+0x31c>
 801ab7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ab7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ab7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d100      	bne.n	801ab86 <_dtoa_r+0x3e2>
 801ab84:	e098      	b.n	801acb8 <_dtoa_r+0x514>
 801ab86:	2200      	movs	r2, #0
 801ab88:	0030      	movs	r0, r6
 801ab8a:	0039      	movs	r1, r7
 801ab8c:	4bc9      	ldr	r3, [pc, #804]	@ (801aeb4 <_dtoa_r+0x710>)
 801ab8e:	f7e5 fc77 	bl	8000480 <__aeabi_dcmplt>
 801ab92:	2800      	cmp	r0, #0
 801ab94:	d100      	bne.n	801ab98 <_dtoa_r+0x3f4>
 801ab96:	e08f      	b.n	801acb8 <_dtoa_r+0x514>
 801ab98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d100      	bne.n	801aba0 <_dtoa_r+0x3fc>
 801ab9e:	e08b      	b.n	801acb8 <_dtoa_r+0x514>
 801aba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	dd37      	ble.n	801ac16 <_dtoa_r+0x472>
 801aba6:	9b04      	ldr	r3, [sp, #16]
 801aba8:	2200      	movs	r2, #0
 801abaa:	3b01      	subs	r3, #1
 801abac:	930c      	str	r3, [sp, #48]	@ 0x30
 801abae:	0030      	movs	r0, r6
 801abb0:	4bc1      	ldr	r3, [pc, #772]	@ (801aeb8 <_dtoa_r+0x714>)
 801abb2:	0039      	movs	r1, r7
 801abb4:	f7e7 fe50 	bl	8002858 <__aeabi_dmul>
 801abb8:	900a      	str	r0, [sp, #40]	@ 0x28
 801abba:	910b      	str	r1, [sp, #44]	@ 0x2c
 801abbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abbe:	3401      	adds	r4, #1
 801abc0:	0020      	movs	r0, r4
 801abc2:	9311      	str	r3, [sp, #68]	@ 0x44
 801abc4:	f7e8 fd96 	bl	80036f4 <__aeabi_i2d>
 801abc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801abca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801abcc:	f7e7 fe44 	bl	8002858 <__aeabi_dmul>
 801abd0:	4bba      	ldr	r3, [pc, #744]	@ (801aebc <_dtoa_r+0x718>)
 801abd2:	2200      	movs	r2, #0
 801abd4:	f7e6 fe40 	bl	8001858 <__aeabi_dadd>
 801abd8:	4bb9      	ldr	r3, [pc, #740]	@ (801aec0 <_dtoa_r+0x71c>)
 801abda:	0006      	movs	r6, r0
 801abdc:	18cf      	adds	r7, r1, r3
 801abde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d16d      	bne.n	801acc0 <_dtoa_r+0x51c>
 801abe4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801abe6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801abe8:	2200      	movs	r2, #0
 801abea:	4bb6      	ldr	r3, [pc, #728]	@ (801aec4 <_dtoa_r+0x720>)
 801abec:	f7e8 f91a 	bl	8002e24 <__aeabi_dsub>
 801abf0:	0032      	movs	r2, r6
 801abf2:	003b      	movs	r3, r7
 801abf4:	0004      	movs	r4, r0
 801abf6:	000d      	movs	r5, r1
 801abf8:	f7e5 fc56 	bl	80004a8 <__aeabi_dcmpgt>
 801abfc:	2800      	cmp	r0, #0
 801abfe:	d000      	beq.n	801ac02 <_dtoa_r+0x45e>
 801ac00:	e2b6      	b.n	801b170 <_dtoa_r+0x9cc>
 801ac02:	2180      	movs	r1, #128	@ 0x80
 801ac04:	0609      	lsls	r1, r1, #24
 801ac06:	187b      	adds	r3, r7, r1
 801ac08:	0032      	movs	r2, r6
 801ac0a:	0020      	movs	r0, r4
 801ac0c:	0029      	movs	r1, r5
 801ac0e:	f7e5 fc37 	bl	8000480 <__aeabi_dcmplt>
 801ac12:	2800      	cmp	r0, #0
 801ac14:	d128      	bne.n	801ac68 <_dtoa_r+0x4c4>
 801ac16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ac18:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ac1a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac1c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ac1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	da00      	bge.n	801ac26 <_dtoa_r+0x482>
 801ac24:	e174      	b.n	801af10 <_dtoa_r+0x76c>
 801ac26:	9a04      	ldr	r2, [sp, #16]
 801ac28:	2a0e      	cmp	r2, #14
 801ac2a:	dd00      	ble.n	801ac2e <_dtoa_r+0x48a>
 801ac2c:	e170      	b.n	801af10 <_dtoa_r+0x76c>
 801ac2e:	4b9f      	ldr	r3, [pc, #636]	@ (801aeac <_dtoa_r+0x708>)
 801ac30:	00d2      	lsls	r2, r2, #3
 801ac32:	189b      	adds	r3, r3, r2
 801ac34:	685c      	ldr	r4, [r3, #4]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	9306      	str	r3, [sp, #24]
 801ac3a:	9407      	str	r4, [sp, #28]
 801ac3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	db00      	blt.n	801ac44 <_dtoa_r+0x4a0>
 801ac42:	e0e7      	b.n	801ae14 <_dtoa_r+0x670>
 801ac44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	dd00      	ble.n	801ac4c <_dtoa_r+0x4a8>
 801ac4a:	e0e3      	b.n	801ae14 <_dtoa_r+0x670>
 801ac4c:	d10c      	bne.n	801ac68 <_dtoa_r+0x4c4>
 801ac4e:	9806      	ldr	r0, [sp, #24]
 801ac50:	9907      	ldr	r1, [sp, #28]
 801ac52:	2200      	movs	r2, #0
 801ac54:	4b9b      	ldr	r3, [pc, #620]	@ (801aec4 <_dtoa_r+0x720>)
 801ac56:	f7e7 fdff 	bl	8002858 <__aeabi_dmul>
 801ac5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ac5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac5e:	f7e5 fc2d 	bl	80004bc <__aeabi_dcmpge>
 801ac62:	2800      	cmp	r0, #0
 801ac64:	d100      	bne.n	801ac68 <_dtoa_r+0x4c4>
 801ac66:	e286      	b.n	801b176 <_dtoa_r+0x9d2>
 801ac68:	2600      	movs	r6, #0
 801ac6a:	0037      	movs	r7, r6
 801ac6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ac6e:	9c08      	ldr	r4, [sp, #32]
 801ac70:	43db      	mvns	r3, r3
 801ac72:	930c      	str	r3, [sp, #48]	@ 0x30
 801ac74:	9704      	str	r7, [sp, #16]
 801ac76:	2700      	movs	r7, #0
 801ac78:	0031      	movs	r1, r6
 801ac7a:	9803      	ldr	r0, [sp, #12]
 801ac7c:	f000 fccc 	bl	801b618 <_Bfree>
 801ac80:	9b04      	ldr	r3, [sp, #16]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d100      	bne.n	801ac88 <_dtoa_r+0x4e4>
 801ac86:	e0bb      	b.n	801ae00 <_dtoa_r+0x65c>
 801ac88:	2f00      	cmp	r7, #0
 801ac8a:	d005      	beq.n	801ac98 <_dtoa_r+0x4f4>
 801ac8c:	429f      	cmp	r7, r3
 801ac8e:	d003      	beq.n	801ac98 <_dtoa_r+0x4f4>
 801ac90:	0039      	movs	r1, r7
 801ac92:	9803      	ldr	r0, [sp, #12]
 801ac94:	f000 fcc0 	bl	801b618 <_Bfree>
 801ac98:	9904      	ldr	r1, [sp, #16]
 801ac9a:	9803      	ldr	r0, [sp, #12]
 801ac9c:	f000 fcbc 	bl	801b618 <_Bfree>
 801aca0:	e0ae      	b.n	801ae00 <_dtoa_r+0x65c>
 801aca2:	423d      	tst	r5, r7
 801aca4:	d005      	beq.n	801acb2 <_dtoa_r+0x50e>
 801aca6:	6832      	ldr	r2, [r6, #0]
 801aca8:	6873      	ldr	r3, [r6, #4]
 801acaa:	f7e7 fdd5 	bl	8002858 <__aeabi_dmul>
 801acae:	003b      	movs	r3, r7
 801acb0:	3401      	adds	r4, #1
 801acb2:	106d      	asrs	r5, r5, #1
 801acb4:	3608      	adds	r6, #8
 801acb6:	e75b      	b.n	801ab70 <_dtoa_r+0x3cc>
 801acb8:	9b04      	ldr	r3, [sp, #16]
 801acba:	930c      	str	r3, [sp, #48]	@ 0x30
 801acbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acbe:	e77f      	b.n	801abc0 <_dtoa_r+0x41c>
 801acc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801acc2:	4b7a      	ldr	r3, [pc, #488]	@ (801aeac <_dtoa_r+0x708>)
 801acc4:	3a01      	subs	r2, #1
 801acc6:	00d2      	lsls	r2, r2, #3
 801acc8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801acca:	189b      	adds	r3, r3, r2
 801accc:	681a      	ldr	r2, [r3, #0]
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	2900      	cmp	r1, #0
 801acd2:	d04c      	beq.n	801ad6e <_dtoa_r+0x5ca>
 801acd4:	2000      	movs	r0, #0
 801acd6:	497c      	ldr	r1, [pc, #496]	@ (801aec8 <_dtoa_r+0x724>)
 801acd8:	f7e7 f984 	bl	8001fe4 <__aeabi_ddiv>
 801acdc:	0032      	movs	r2, r6
 801acde:	003b      	movs	r3, r7
 801ace0:	f7e8 f8a0 	bl	8002e24 <__aeabi_dsub>
 801ace4:	9a08      	ldr	r2, [sp, #32]
 801ace6:	0006      	movs	r6, r0
 801ace8:	4694      	mov	ip, r2
 801acea:	000f      	movs	r7, r1
 801acec:	9b08      	ldr	r3, [sp, #32]
 801acee:	9316      	str	r3, [sp, #88]	@ 0x58
 801acf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801acf2:	4463      	add	r3, ip
 801acf4:	9311      	str	r3, [sp, #68]	@ 0x44
 801acf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801acf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801acfa:	f7e8 fcbf 	bl	800367c <__aeabi_d2iz>
 801acfe:	0005      	movs	r5, r0
 801ad00:	f7e8 fcf8 	bl	80036f4 <__aeabi_i2d>
 801ad04:	0002      	movs	r2, r0
 801ad06:	000b      	movs	r3, r1
 801ad08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ad0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad0c:	f7e8 f88a 	bl	8002e24 <__aeabi_dsub>
 801ad10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ad12:	3530      	adds	r5, #48	@ 0x30
 801ad14:	1c5c      	adds	r4, r3, #1
 801ad16:	701d      	strb	r5, [r3, #0]
 801ad18:	0032      	movs	r2, r6
 801ad1a:	003b      	movs	r3, r7
 801ad1c:	900a      	str	r0, [sp, #40]	@ 0x28
 801ad1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ad20:	f7e5 fbae 	bl	8000480 <__aeabi_dcmplt>
 801ad24:	2800      	cmp	r0, #0
 801ad26:	d16b      	bne.n	801ae00 <_dtoa_r+0x65c>
 801ad28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ad2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	4961      	ldr	r1, [pc, #388]	@ (801aeb4 <_dtoa_r+0x710>)
 801ad30:	f7e8 f878 	bl	8002e24 <__aeabi_dsub>
 801ad34:	0032      	movs	r2, r6
 801ad36:	003b      	movs	r3, r7
 801ad38:	f7e5 fba2 	bl	8000480 <__aeabi_dcmplt>
 801ad3c:	2800      	cmp	r0, #0
 801ad3e:	d000      	beq.n	801ad42 <_dtoa_r+0x59e>
 801ad40:	e0c6      	b.n	801aed0 <_dtoa_r+0x72c>
 801ad42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ad44:	42a3      	cmp	r3, r4
 801ad46:	d100      	bne.n	801ad4a <_dtoa_r+0x5a6>
 801ad48:	e765      	b.n	801ac16 <_dtoa_r+0x472>
 801ad4a:	2200      	movs	r2, #0
 801ad4c:	0030      	movs	r0, r6
 801ad4e:	0039      	movs	r1, r7
 801ad50:	4b59      	ldr	r3, [pc, #356]	@ (801aeb8 <_dtoa_r+0x714>)
 801ad52:	f7e7 fd81 	bl	8002858 <__aeabi_dmul>
 801ad56:	2200      	movs	r2, #0
 801ad58:	0006      	movs	r6, r0
 801ad5a:	000f      	movs	r7, r1
 801ad5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ad5e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad60:	4b55      	ldr	r3, [pc, #340]	@ (801aeb8 <_dtoa_r+0x714>)
 801ad62:	f7e7 fd79 	bl	8002858 <__aeabi_dmul>
 801ad66:	9416      	str	r4, [sp, #88]	@ 0x58
 801ad68:	900a      	str	r0, [sp, #40]	@ 0x28
 801ad6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ad6c:	e7c3      	b.n	801acf6 <_dtoa_r+0x552>
 801ad6e:	0030      	movs	r0, r6
 801ad70:	0039      	movs	r1, r7
 801ad72:	f7e7 fd71 	bl	8002858 <__aeabi_dmul>
 801ad76:	9d08      	ldr	r5, [sp, #32]
 801ad78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ad7a:	002b      	movs	r3, r5
 801ad7c:	4694      	mov	ip, r2
 801ad7e:	9016      	str	r0, [sp, #88]	@ 0x58
 801ad80:	9117      	str	r1, [sp, #92]	@ 0x5c
 801ad82:	4463      	add	r3, ip
 801ad84:	9319      	str	r3, [sp, #100]	@ 0x64
 801ad86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ad88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad8a:	f7e8 fc77 	bl	800367c <__aeabi_d2iz>
 801ad8e:	0004      	movs	r4, r0
 801ad90:	f7e8 fcb0 	bl	80036f4 <__aeabi_i2d>
 801ad94:	000b      	movs	r3, r1
 801ad96:	0002      	movs	r2, r0
 801ad98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ad9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad9c:	f7e8 f842 	bl	8002e24 <__aeabi_dsub>
 801ada0:	3430      	adds	r4, #48	@ 0x30
 801ada2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ada4:	702c      	strb	r4, [r5, #0]
 801ada6:	3501      	adds	r5, #1
 801ada8:	0006      	movs	r6, r0
 801adaa:	000f      	movs	r7, r1
 801adac:	42ab      	cmp	r3, r5
 801adae:	d12a      	bne.n	801ae06 <_dtoa_r+0x662>
 801adb0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801adb2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801adb4:	9b08      	ldr	r3, [sp, #32]
 801adb6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801adb8:	469c      	mov	ip, r3
 801adba:	2200      	movs	r2, #0
 801adbc:	4b42      	ldr	r3, [pc, #264]	@ (801aec8 <_dtoa_r+0x724>)
 801adbe:	4464      	add	r4, ip
 801adc0:	f7e6 fd4a 	bl	8001858 <__aeabi_dadd>
 801adc4:	0002      	movs	r2, r0
 801adc6:	000b      	movs	r3, r1
 801adc8:	0030      	movs	r0, r6
 801adca:	0039      	movs	r1, r7
 801adcc:	f7e5 fb6c 	bl	80004a8 <__aeabi_dcmpgt>
 801add0:	2800      	cmp	r0, #0
 801add2:	d000      	beq.n	801add6 <_dtoa_r+0x632>
 801add4:	e07c      	b.n	801aed0 <_dtoa_r+0x72c>
 801add6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801add8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801adda:	2000      	movs	r0, #0
 801addc:	493a      	ldr	r1, [pc, #232]	@ (801aec8 <_dtoa_r+0x724>)
 801adde:	f7e8 f821 	bl	8002e24 <__aeabi_dsub>
 801ade2:	0002      	movs	r2, r0
 801ade4:	000b      	movs	r3, r1
 801ade6:	0030      	movs	r0, r6
 801ade8:	0039      	movs	r1, r7
 801adea:	f7e5 fb49 	bl	8000480 <__aeabi_dcmplt>
 801adee:	2800      	cmp	r0, #0
 801adf0:	d100      	bne.n	801adf4 <_dtoa_r+0x650>
 801adf2:	e710      	b.n	801ac16 <_dtoa_r+0x472>
 801adf4:	0023      	movs	r3, r4
 801adf6:	3c01      	subs	r4, #1
 801adf8:	7822      	ldrb	r2, [r4, #0]
 801adfa:	2a30      	cmp	r2, #48	@ 0x30
 801adfc:	d0fa      	beq.n	801adf4 <_dtoa_r+0x650>
 801adfe:	001c      	movs	r4, r3
 801ae00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ae02:	9304      	str	r3, [sp, #16]
 801ae04:	e042      	b.n	801ae8c <_dtoa_r+0x6e8>
 801ae06:	2200      	movs	r2, #0
 801ae08:	4b2b      	ldr	r3, [pc, #172]	@ (801aeb8 <_dtoa_r+0x714>)
 801ae0a:	f7e7 fd25 	bl	8002858 <__aeabi_dmul>
 801ae0e:	900a      	str	r0, [sp, #40]	@ 0x28
 801ae10:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ae12:	e7b8      	b.n	801ad86 <_dtoa_r+0x5e2>
 801ae14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae16:	9d08      	ldr	r5, [sp, #32]
 801ae18:	3b01      	subs	r3, #1
 801ae1a:	195b      	adds	r3, r3, r5
 801ae1c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ae1e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ae20:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae22:	9a06      	ldr	r2, [sp, #24]
 801ae24:	9b07      	ldr	r3, [sp, #28]
 801ae26:	0030      	movs	r0, r6
 801ae28:	0039      	movs	r1, r7
 801ae2a:	f7e7 f8db 	bl	8001fe4 <__aeabi_ddiv>
 801ae2e:	f7e8 fc25 	bl	800367c <__aeabi_d2iz>
 801ae32:	9009      	str	r0, [sp, #36]	@ 0x24
 801ae34:	f7e8 fc5e 	bl	80036f4 <__aeabi_i2d>
 801ae38:	9a06      	ldr	r2, [sp, #24]
 801ae3a:	9b07      	ldr	r3, [sp, #28]
 801ae3c:	f7e7 fd0c 	bl	8002858 <__aeabi_dmul>
 801ae40:	0002      	movs	r2, r0
 801ae42:	000b      	movs	r3, r1
 801ae44:	0030      	movs	r0, r6
 801ae46:	0039      	movs	r1, r7
 801ae48:	f7e7 ffec 	bl	8002e24 <__aeabi_dsub>
 801ae4c:	002b      	movs	r3, r5
 801ae4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae50:	3501      	adds	r5, #1
 801ae52:	3230      	adds	r2, #48	@ 0x30
 801ae54:	701a      	strb	r2, [r3, #0]
 801ae56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ae58:	002c      	movs	r4, r5
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d14b      	bne.n	801aef6 <_dtoa_r+0x752>
 801ae5e:	0002      	movs	r2, r0
 801ae60:	000b      	movs	r3, r1
 801ae62:	f7e6 fcf9 	bl	8001858 <__aeabi_dadd>
 801ae66:	9a06      	ldr	r2, [sp, #24]
 801ae68:	9b07      	ldr	r3, [sp, #28]
 801ae6a:	0006      	movs	r6, r0
 801ae6c:	000f      	movs	r7, r1
 801ae6e:	f7e5 fb1b 	bl	80004a8 <__aeabi_dcmpgt>
 801ae72:	2800      	cmp	r0, #0
 801ae74:	d12a      	bne.n	801aecc <_dtoa_r+0x728>
 801ae76:	9a06      	ldr	r2, [sp, #24]
 801ae78:	9b07      	ldr	r3, [sp, #28]
 801ae7a:	0030      	movs	r0, r6
 801ae7c:	0039      	movs	r1, r7
 801ae7e:	f7e5 faf9 	bl	8000474 <__aeabi_dcmpeq>
 801ae82:	2800      	cmp	r0, #0
 801ae84:	d002      	beq.n	801ae8c <_dtoa_r+0x6e8>
 801ae86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae88:	07dd      	lsls	r5, r3, #31
 801ae8a:	d41f      	bmi.n	801aecc <_dtoa_r+0x728>
 801ae8c:	9905      	ldr	r1, [sp, #20]
 801ae8e:	9803      	ldr	r0, [sp, #12]
 801ae90:	f000 fbc2 	bl	801b618 <_Bfree>
 801ae94:	2300      	movs	r3, #0
 801ae96:	7023      	strb	r3, [r4, #0]
 801ae98:	9b04      	ldr	r3, [sp, #16]
 801ae9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ae9c:	3301      	adds	r3, #1
 801ae9e:	6013      	str	r3, [r2, #0]
 801aea0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d100      	bne.n	801aea8 <_dtoa_r+0x704>
 801aea6:	e4c7      	b.n	801a838 <_dtoa_r+0x94>
 801aea8:	601c      	str	r4, [r3, #0]
 801aeaa:	e4c5      	b.n	801a838 <_dtoa_r+0x94>
 801aeac:	080205b0 	.word	0x080205b0
 801aeb0:	08020588 	.word	0x08020588
 801aeb4:	3ff00000 	.word	0x3ff00000
 801aeb8:	40240000 	.word	0x40240000
 801aebc:	401c0000 	.word	0x401c0000
 801aec0:	fcc00000 	.word	0xfcc00000
 801aec4:	40140000 	.word	0x40140000
 801aec8:	3fe00000 	.word	0x3fe00000
 801aecc:	9b04      	ldr	r3, [sp, #16]
 801aece:	930c      	str	r3, [sp, #48]	@ 0x30
 801aed0:	0023      	movs	r3, r4
 801aed2:	001c      	movs	r4, r3
 801aed4:	3b01      	subs	r3, #1
 801aed6:	781a      	ldrb	r2, [r3, #0]
 801aed8:	2a39      	cmp	r2, #57	@ 0x39
 801aeda:	d108      	bne.n	801aeee <_dtoa_r+0x74a>
 801aedc:	9a08      	ldr	r2, [sp, #32]
 801aede:	429a      	cmp	r2, r3
 801aee0:	d1f7      	bne.n	801aed2 <_dtoa_r+0x72e>
 801aee2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aee4:	9908      	ldr	r1, [sp, #32]
 801aee6:	3201      	adds	r2, #1
 801aee8:	920c      	str	r2, [sp, #48]	@ 0x30
 801aeea:	2230      	movs	r2, #48	@ 0x30
 801aeec:	700a      	strb	r2, [r1, #0]
 801aeee:	781a      	ldrb	r2, [r3, #0]
 801aef0:	3201      	adds	r2, #1
 801aef2:	701a      	strb	r2, [r3, #0]
 801aef4:	e784      	b.n	801ae00 <_dtoa_r+0x65c>
 801aef6:	2200      	movs	r2, #0
 801aef8:	4bc6      	ldr	r3, [pc, #792]	@ (801b214 <_dtoa_r+0xa70>)
 801aefa:	f7e7 fcad 	bl	8002858 <__aeabi_dmul>
 801aefe:	2200      	movs	r2, #0
 801af00:	2300      	movs	r3, #0
 801af02:	0006      	movs	r6, r0
 801af04:	000f      	movs	r7, r1
 801af06:	f7e5 fab5 	bl	8000474 <__aeabi_dcmpeq>
 801af0a:	2800      	cmp	r0, #0
 801af0c:	d089      	beq.n	801ae22 <_dtoa_r+0x67e>
 801af0e:	e7bd      	b.n	801ae8c <_dtoa_r+0x6e8>
 801af10:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801af12:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801af14:	9c06      	ldr	r4, [sp, #24]
 801af16:	2f00      	cmp	r7, #0
 801af18:	d014      	beq.n	801af44 <_dtoa_r+0x7a0>
 801af1a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801af1c:	2a01      	cmp	r2, #1
 801af1e:	dd00      	ble.n	801af22 <_dtoa_r+0x77e>
 801af20:	e0e4      	b.n	801b0ec <_dtoa_r+0x948>
 801af22:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801af24:	2a00      	cmp	r2, #0
 801af26:	d100      	bne.n	801af2a <_dtoa_r+0x786>
 801af28:	e0da      	b.n	801b0e0 <_dtoa_r+0x93c>
 801af2a:	4abb      	ldr	r2, [pc, #748]	@ (801b218 <_dtoa_r+0xa74>)
 801af2c:	189b      	adds	r3, r3, r2
 801af2e:	9a06      	ldr	r2, [sp, #24]
 801af30:	2101      	movs	r1, #1
 801af32:	18d2      	adds	r2, r2, r3
 801af34:	9206      	str	r2, [sp, #24]
 801af36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801af38:	9803      	ldr	r0, [sp, #12]
 801af3a:	18d3      	adds	r3, r2, r3
 801af3c:	930d      	str	r3, [sp, #52]	@ 0x34
 801af3e:	f000 fc23 	bl	801b788 <__i2b>
 801af42:	0007      	movs	r7, r0
 801af44:	2c00      	cmp	r4, #0
 801af46:	d00e      	beq.n	801af66 <_dtoa_r+0x7c2>
 801af48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	dd0b      	ble.n	801af66 <_dtoa_r+0x7c2>
 801af4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801af50:	0023      	movs	r3, r4
 801af52:	4294      	cmp	r4, r2
 801af54:	dd00      	ble.n	801af58 <_dtoa_r+0x7b4>
 801af56:	0013      	movs	r3, r2
 801af58:	9a06      	ldr	r2, [sp, #24]
 801af5a:	1ae4      	subs	r4, r4, r3
 801af5c:	1ad2      	subs	r2, r2, r3
 801af5e:	9206      	str	r2, [sp, #24]
 801af60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801af62:	1ad3      	subs	r3, r2, r3
 801af64:	930d      	str	r3, [sp, #52]	@ 0x34
 801af66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d021      	beq.n	801afb0 <_dtoa_r+0x80c>
 801af6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d100      	bne.n	801af74 <_dtoa_r+0x7d0>
 801af72:	e0d3      	b.n	801b11c <_dtoa_r+0x978>
 801af74:	9e05      	ldr	r6, [sp, #20]
 801af76:	2d00      	cmp	r5, #0
 801af78:	d014      	beq.n	801afa4 <_dtoa_r+0x800>
 801af7a:	0039      	movs	r1, r7
 801af7c:	002a      	movs	r2, r5
 801af7e:	9803      	ldr	r0, [sp, #12]
 801af80:	f000 fcc4 	bl	801b90c <__pow5mult>
 801af84:	9a05      	ldr	r2, [sp, #20]
 801af86:	0001      	movs	r1, r0
 801af88:	0007      	movs	r7, r0
 801af8a:	9803      	ldr	r0, [sp, #12]
 801af8c:	f000 fc14 	bl	801b7b8 <__multiply>
 801af90:	0006      	movs	r6, r0
 801af92:	9905      	ldr	r1, [sp, #20]
 801af94:	9803      	ldr	r0, [sp, #12]
 801af96:	f000 fb3f 	bl	801b618 <_Bfree>
 801af9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801af9c:	9605      	str	r6, [sp, #20]
 801af9e:	1b5b      	subs	r3, r3, r5
 801afa0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801afa2:	d005      	beq.n	801afb0 <_dtoa_r+0x80c>
 801afa4:	0031      	movs	r1, r6
 801afa6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801afa8:	9803      	ldr	r0, [sp, #12]
 801afaa:	f000 fcaf 	bl	801b90c <__pow5mult>
 801afae:	9005      	str	r0, [sp, #20]
 801afb0:	2101      	movs	r1, #1
 801afb2:	9803      	ldr	r0, [sp, #12]
 801afb4:	f000 fbe8 	bl	801b788 <__i2b>
 801afb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801afba:	0006      	movs	r6, r0
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d100      	bne.n	801afc2 <_dtoa_r+0x81e>
 801afc0:	e1bc      	b.n	801b33c <_dtoa_r+0xb98>
 801afc2:	001a      	movs	r2, r3
 801afc4:	0001      	movs	r1, r0
 801afc6:	9803      	ldr	r0, [sp, #12]
 801afc8:	f000 fca0 	bl	801b90c <__pow5mult>
 801afcc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801afce:	0006      	movs	r6, r0
 801afd0:	2500      	movs	r5, #0
 801afd2:	2b01      	cmp	r3, #1
 801afd4:	dc16      	bgt.n	801b004 <_dtoa_r+0x860>
 801afd6:	2500      	movs	r5, #0
 801afd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801afda:	42ab      	cmp	r3, r5
 801afdc:	d10e      	bne.n	801affc <_dtoa_r+0x858>
 801afde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801afe0:	031b      	lsls	r3, r3, #12
 801afe2:	42ab      	cmp	r3, r5
 801afe4:	d10a      	bne.n	801affc <_dtoa_r+0x858>
 801afe6:	4b8d      	ldr	r3, [pc, #564]	@ (801b21c <_dtoa_r+0xa78>)
 801afe8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801afea:	4213      	tst	r3, r2
 801afec:	d006      	beq.n	801affc <_dtoa_r+0x858>
 801afee:	9b06      	ldr	r3, [sp, #24]
 801aff0:	3501      	adds	r5, #1
 801aff2:	3301      	adds	r3, #1
 801aff4:	9306      	str	r3, [sp, #24]
 801aff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aff8:	3301      	adds	r3, #1
 801affa:	930d      	str	r3, [sp, #52]	@ 0x34
 801affc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801affe:	2001      	movs	r0, #1
 801b000:	2b00      	cmp	r3, #0
 801b002:	d008      	beq.n	801b016 <_dtoa_r+0x872>
 801b004:	6933      	ldr	r3, [r6, #16]
 801b006:	3303      	adds	r3, #3
 801b008:	009b      	lsls	r3, r3, #2
 801b00a:	18f3      	adds	r3, r6, r3
 801b00c:	6858      	ldr	r0, [r3, #4]
 801b00e:	f000 fb6b 	bl	801b6e8 <__hi0bits>
 801b012:	2320      	movs	r3, #32
 801b014:	1a18      	subs	r0, r3, r0
 801b016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b018:	1818      	adds	r0, r3, r0
 801b01a:	0002      	movs	r2, r0
 801b01c:	231f      	movs	r3, #31
 801b01e:	401a      	ands	r2, r3
 801b020:	4218      	tst	r0, r3
 801b022:	d100      	bne.n	801b026 <_dtoa_r+0x882>
 801b024:	e081      	b.n	801b12a <_dtoa_r+0x986>
 801b026:	3301      	adds	r3, #1
 801b028:	1a9b      	subs	r3, r3, r2
 801b02a:	2b04      	cmp	r3, #4
 801b02c:	dd79      	ble.n	801b122 <_dtoa_r+0x97e>
 801b02e:	231c      	movs	r3, #28
 801b030:	1a9b      	subs	r3, r3, r2
 801b032:	9a06      	ldr	r2, [sp, #24]
 801b034:	18e4      	adds	r4, r4, r3
 801b036:	18d2      	adds	r2, r2, r3
 801b038:	9206      	str	r2, [sp, #24]
 801b03a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b03c:	18d3      	adds	r3, r2, r3
 801b03e:	930d      	str	r3, [sp, #52]	@ 0x34
 801b040:	9b06      	ldr	r3, [sp, #24]
 801b042:	2b00      	cmp	r3, #0
 801b044:	dd05      	ble.n	801b052 <_dtoa_r+0x8ae>
 801b046:	001a      	movs	r2, r3
 801b048:	9905      	ldr	r1, [sp, #20]
 801b04a:	9803      	ldr	r0, [sp, #12]
 801b04c:	f000 fcba 	bl	801b9c4 <__lshift>
 801b050:	9005      	str	r0, [sp, #20]
 801b052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b054:	2b00      	cmp	r3, #0
 801b056:	dd05      	ble.n	801b064 <_dtoa_r+0x8c0>
 801b058:	0031      	movs	r1, r6
 801b05a:	001a      	movs	r2, r3
 801b05c:	9803      	ldr	r0, [sp, #12]
 801b05e:	f000 fcb1 	bl	801b9c4 <__lshift>
 801b062:	0006      	movs	r6, r0
 801b064:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b066:	2b00      	cmp	r3, #0
 801b068:	d061      	beq.n	801b12e <_dtoa_r+0x98a>
 801b06a:	0031      	movs	r1, r6
 801b06c:	9805      	ldr	r0, [sp, #20]
 801b06e:	f000 fd15 	bl	801ba9c <__mcmp>
 801b072:	2800      	cmp	r0, #0
 801b074:	da5b      	bge.n	801b12e <_dtoa_r+0x98a>
 801b076:	9b04      	ldr	r3, [sp, #16]
 801b078:	220a      	movs	r2, #10
 801b07a:	3b01      	subs	r3, #1
 801b07c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b07e:	9905      	ldr	r1, [sp, #20]
 801b080:	2300      	movs	r3, #0
 801b082:	9803      	ldr	r0, [sp, #12]
 801b084:	f000 faec 	bl	801b660 <__multadd>
 801b088:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b08a:	9005      	str	r0, [sp, #20]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d100      	bne.n	801b092 <_dtoa_r+0x8ee>
 801b090:	e15b      	b.n	801b34a <_dtoa_r+0xba6>
 801b092:	2300      	movs	r3, #0
 801b094:	0039      	movs	r1, r7
 801b096:	220a      	movs	r2, #10
 801b098:	9803      	ldr	r0, [sp, #12]
 801b09a:	f000 fae1 	bl	801b660 <__multadd>
 801b09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0a0:	0007      	movs	r7, r0
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	dc4d      	bgt.n	801b142 <_dtoa_r+0x99e>
 801b0a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b0a8:	2b02      	cmp	r3, #2
 801b0aa:	dd46      	ble.n	801b13a <_dtoa_r+0x996>
 801b0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d000      	beq.n	801b0b4 <_dtoa_r+0x910>
 801b0b2:	e5db      	b.n	801ac6c <_dtoa_r+0x4c8>
 801b0b4:	0031      	movs	r1, r6
 801b0b6:	2205      	movs	r2, #5
 801b0b8:	9803      	ldr	r0, [sp, #12]
 801b0ba:	f000 fad1 	bl	801b660 <__multadd>
 801b0be:	0006      	movs	r6, r0
 801b0c0:	0001      	movs	r1, r0
 801b0c2:	9805      	ldr	r0, [sp, #20]
 801b0c4:	f000 fcea 	bl	801ba9c <__mcmp>
 801b0c8:	2800      	cmp	r0, #0
 801b0ca:	dc00      	bgt.n	801b0ce <_dtoa_r+0x92a>
 801b0cc:	e5ce      	b.n	801ac6c <_dtoa_r+0x4c8>
 801b0ce:	9b08      	ldr	r3, [sp, #32]
 801b0d0:	9a08      	ldr	r2, [sp, #32]
 801b0d2:	1c5c      	adds	r4, r3, #1
 801b0d4:	2331      	movs	r3, #49	@ 0x31
 801b0d6:	7013      	strb	r3, [r2, #0]
 801b0d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0da:	3301      	adds	r3, #1
 801b0dc:	930c      	str	r3, [sp, #48]	@ 0x30
 801b0de:	e5c9      	b.n	801ac74 <_dtoa_r+0x4d0>
 801b0e0:	2336      	movs	r3, #54	@ 0x36
 801b0e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b0e4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801b0e6:	1a9b      	subs	r3, r3, r2
 801b0e8:	9c06      	ldr	r4, [sp, #24]
 801b0ea:	e720      	b.n	801af2e <_dtoa_r+0x78a>
 801b0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0ee:	1e5d      	subs	r5, r3, #1
 801b0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0f2:	42ab      	cmp	r3, r5
 801b0f4:	db08      	blt.n	801b108 <_dtoa_r+0x964>
 801b0f6:	1b5d      	subs	r5, r3, r5
 801b0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	daf4      	bge.n	801b0e8 <_dtoa_r+0x944>
 801b0fe:	9b06      	ldr	r3, [sp, #24]
 801b100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b102:	1a9c      	subs	r4, r3, r2
 801b104:	2300      	movs	r3, #0
 801b106:	e712      	b.n	801af2e <_dtoa_r+0x78a>
 801b108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b10a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b10c:	1aeb      	subs	r3, r5, r3
 801b10e:	18d3      	adds	r3, r2, r3
 801b110:	9314      	str	r3, [sp, #80]	@ 0x50
 801b112:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b114:	9c06      	ldr	r4, [sp, #24]
 801b116:	2500      	movs	r5, #0
 801b118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b11a:	e708      	b.n	801af2e <_dtoa_r+0x78a>
 801b11c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b11e:	9905      	ldr	r1, [sp, #20]
 801b120:	e742      	b.n	801afa8 <_dtoa_r+0x804>
 801b122:	2b04      	cmp	r3, #4
 801b124:	d08c      	beq.n	801b040 <_dtoa_r+0x89c>
 801b126:	331c      	adds	r3, #28
 801b128:	e783      	b.n	801b032 <_dtoa_r+0x88e>
 801b12a:	0013      	movs	r3, r2
 801b12c:	e7fb      	b.n	801b126 <_dtoa_r+0x982>
 801b12e:	9b04      	ldr	r3, [sp, #16]
 801b130:	930c      	str	r3, [sp, #48]	@ 0x30
 801b132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b134:	930e      	str	r3, [sp, #56]	@ 0x38
 801b136:	2b00      	cmp	r3, #0
 801b138:	ddb5      	ble.n	801b0a6 <_dtoa_r+0x902>
 801b13a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d100      	bne.n	801b142 <_dtoa_r+0x99e>
 801b140:	e107      	b.n	801b352 <_dtoa_r+0xbae>
 801b142:	2c00      	cmp	r4, #0
 801b144:	dd05      	ble.n	801b152 <_dtoa_r+0x9ae>
 801b146:	0039      	movs	r1, r7
 801b148:	0022      	movs	r2, r4
 801b14a:	9803      	ldr	r0, [sp, #12]
 801b14c:	f000 fc3a 	bl	801b9c4 <__lshift>
 801b150:	0007      	movs	r7, r0
 801b152:	9704      	str	r7, [sp, #16]
 801b154:	2d00      	cmp	r5, #0
 801b156:	d020      	beq.n	801b19a <_dtoa_r+0x9f6>
 801b158:	6879      	ldr	r1, [r7, #4]
 801b15a:	9803      	ldr	r0, [sp, #12]
 801b15c:	f000 fa18 	bl	801b590 <_Balloc>
 801b160:	1e04      	subs	r4, r0, #0
 801b162:	d10c      	bne.n	801b17e <_dtoa_r+0x9da>
 801b164:	0022      	movs	r2, r4
 801b166:	4b2e      	ldr	r3, [pc, #184]	@ (801b220 <_dtoa_r+0xa7c>)
 801b168:	482e      	ldr	r0, [pc, #184]	@ (801b224 <_dtoa_r+0xa80>)
 801b16a:	492f      	ldr	r1, [pc, #188]	@ (801b228 <_dtoa_r+0xa84>)
 801b16c:	f7ff fb2f 	bl	801a7ce <_dtoa_r+0x2a>
 801b170:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b172:	0037      	movs	r7, r6
 801b174:	e7ab      	b.n	801b0ce <_dtoa_r+0x92a>
 801b176:	9b04      	ldr	r3, [sp, #16]
 801b178:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b17a:	930c      	str	r3, [sp, #48]	@ 0x30
 801b17c:	e7f9      	b.n	801b172 <_dtoa_r+0x9ce>
 801b17e:	0039      	movs	r1, r7
 801b180:	693a      	ldr	r2, [r7, #16]
 801b182:	310c      	adds	r1, #12
 801b184:	3202      	adds	r2, #2
 801b186:	0092      	lsls	r2, r2, #2
 801b188:	300c      	adds	r0, #12
 801b18a:	f7ff fa7d 	bl	801a688 <memcpy>
 801b18e:	2201      	movs	r2, #1
 801b190:	0021      	movs	r1, r4
 801b192:	9803      	ldr	r0, [sp, #12]
 801b194:	f000 fc16 	bl	801b9c4 <__lshift>
 801b198:	9004      	str	r0, [sp, #16]
 801b19a:	9b08      	ldr	r3, [sp, #32]
 801b19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b19e:	9306      	str	r3, [sp, #24]
 801b1a0:	3b01      	subs	r3, #1
 801b1a2:	189b      	adds	r3, r3, r2
 801b1a4:	2201      	movs	r2, #1
 801b1a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b1aa:	4013      	ands	r3, r2
 801b1ac:	930e      	str	r3, [sp, #56]	@ 0x38
 801b1ae:	0031      	movs	r1, r6
 801b1b0:	9805      	ldr	r0, [sp, #20]
 801b1b2:	f7ff fa72 	bl	801a69a <quorem>
 801b1b6:	0039      	movs	r1, r7
 801b1b8:	0005      	movs	r5, r0
 801b1ba:	900a      	str	r0, [sp, #40]	@ 0x28
 801b1bc:	9805      	ldr	r0, [sp, #20]
 801b1be:	f000 fc6d 	bl	801ba9c <__mcmp>
 801b1c2:	9a04      	ldr	r2, [sp, #16]
 801b1c4:	900d      	str	r0, [sp, #52]	@ 0x34
 801b1c6:	0031      	movs	r1, r6
 801b1c8:	9803      	ldr	r0, [sp, #12]
 801b1ca:	f000 fc83 	bl	801bad4 <__mdiff>
 801b1ce:	2201      	movs	r2, #1
 801b1d0:	68c3      	ldr	r3, [r0, #12]
 801b1d2:	0004      	movs	r4, r0
 801b1d4:	3530      	adds	r5, #48	@ 0x30
 801b1d6:	9209      	str	r2, [sp, #36]	@ 0x24
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d104      	bne.n	801b1e6 <_dtoa_r+0xa42>
 801b1dc:	0001      	movs	r1, r0
 801b1de:	9805      	ldr	r0, [sp, #20]
 801b1e0:	f000 fc5c 	bl	801ba9c <__mcmp>
 801b1e4:	9009      	str	r0, [sp, #36]	@ 0x24
 801b1e6:	0021      	movs	r1, r4
 801b1e8:	9803      	ldr	r0, [sp, #12]
 801b1ea:	f000 fa15 	bl	801b618 <_Bfree>
 801b1ee:	9b06      	ldr	r3, [sp, #24]
 801b1f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801b1f2:	1c5c      	adds	r4, r3, #1
 801b1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1f6:	4313      	orrs	r3, r2
 801b1f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	d116      	bne.n	801b22c <_dtoa_r+0xa88>
 801b1fe:	2d39      	cmp	r5, #57	@ 0x39
 801b200:	d02f      	beq.n	801b262 <_dtoa_r+0xabe>
 801b202:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b204:	2b00      	cmp	r3, #0
 801b206:	dd01      	ble.n	801b20c <_dtoa_r+0xa68>
 801b208:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b20a:	3531      	adds	r5, #49	@ 0x31
 801b20c:	9b06      	ldr	r3, [sp, #24]
 801b20e:	701d      	strb	r5, [r3, #0]
 801b210:	e532      	b.n	801ac78 <_dtoa_r+0x4d4>
 801b212:	46c0      	nop			@ (mov r8, r8)
 801b214:	40240000 	.word	0x40240000
 801b218:	00000433 	.word	0x00000433
 801b21c:	7ff00000 	.word	0x7ff00000
 801b220:	08020331 	.word	0x08020331
 801b224:	080202d9 	.word	0x080202d9
 801b228:	000002ef 	.word	0x000002ef
 801b22c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b22e:	2b00      	cmp	r3, #0
 801b230:	db04      	blt.n	801b23c <_dtoa_r+0xa98>
 801b232:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801b234:	4313      	orrs	r3, r2
 801b236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b238:	4313      	orrs	r3, r2
 801b23a:	d11e      	bne.n	801b27a <_dtoa_r+0xad6>
 801b23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b23e:	2b00      	cmp	r3, #0
 801b240:	dde4      	ble.n	801b20c <_dtoa_r+0xa68>
 801b242:	9905      	ldr	r1, [sp, #20]
 801b244:	2201      	movs	r2, #1
 801b246:	9803      	ldr	r0, [sp, #12]
 801b248:	f000 fbbc 	bl	801b9c4 <__lshift>
 801b24c:	0031      	movs	r1, r6
 801b24e:	9005      	str	r0, [sp, #20]
 801b250:	f000 fc24 	bl	801ba9c <__mcmp>
 801b254:	2800      	cmp	r0, #0
 801b256:	dc02      	bgt.n	801b25e <_dtoa_r+0xaba>
 801b258:	d1d8      	bne.n	801b20c <_dtoa_r+0xa68>
 801b25a:	07eb      	lsls	r3, r5, #31
 801b25c:	d5d6      	bpl.n	801b20c <_dtoa_r+0xa68>
 801b25e:	2d39      	cmp	r5, #57	@ 0x39
 801b260:	d1d2      	bne.n	801b208 <_dtoa_r+0xa64>
 801b262:	2339      	movs	r3, #57	@ 0x39
 801b264:	9a06      	ldr	r2, [sp, #24]
 801b266:	7013      	strb	r3, [r2, #0]
 801b268:	0023      	movs	r3, r4
 801b26a:	001c      	movs	r4, r3
 801b26c:	3b01      	subs	r3, #1
 801b26e:	781a      	ldrb	r2, [r3, #0]
 801b270:	2a39      	cmp	r2, #57	@ 0x39
 801b272:	d050      	beq.n	801b316 <_dtoa_r+0xb72>
 801b274:	3201      	adds	r2, #1
 801b276:	701a      	strb	r2, [r3, #0]
 801b278:	e4fe      	b.n	801ac78 <_dtoa_r+0x4d4>
 801b27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	dd03      	ble.n	801b288 <_dtoa_r+0xae4>
 801b280:	2d39      	cmp	r5, #57	@ 0x39
 801b282:	d0ee      	beq.n	801b262 <_dtoa_r+0xabe>
 801b284:	3501      	adds	r5, #1
 801b286:	e7c1      	b.n	801b20c <_dtoa_r+0xa68>
 801b288:	9b06      	ldr	r3, [sp, #24]
 801b28a:	9a06      	ldr	r2, [sp, #24]
 801b28c:	701d      	strb	r5, [r3, #0]
 801b28e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b290:	4293      	cmp	r3, r2
 801b292:	d02b      	beq.n	801b2ec <_dtoa_r+0xb48>
 801b294:	2300      	movs	r3, #0
 801b296:	220a      	movs	r2, #10
 801b298:	9905      	ldr	r1, [sp, #20]
 801b29a:	9803      	ldr	r0, [sp, #12]
 801b29c:	f000 f9e0 	bl	801b660 <__multadd>
 801b2a0:	9b04      	ldr	r3, [sp, #16]
 801b2a2:	9005      	str	r0, [sp, #20]
 801b2a4:	429f      	cmp	r7, r3
 801b2a6:	d109      	bne.n	801b2bc <_dtoa_r+0xb18>
 801b2a8:	0039      	movs	r1, r7
 801b2aa:	2300      	movs	r3, #0
 801b2ac:	220a      	movs	r2, #10
 801b2ae:	9803      	ldr	r0, [sp, #12]
 801b2b0:	f000 f9d6 	bl	801b660 <__multadd>
 801b2b4:	0007      	movs	r7, r0
 801b2b6:	9004      	str	r0, [sp, #16]
 801b2b8:	9406      	str	r4, [sp, #24]
 801b2ba:	e778      	b.n	801b1ae <_dtoa_r+0xa0a>
 801b2bc:	0039      	movs	r1, r7
 801b2be:	2300      	movs	r3, #0
 801b2c0:	220a      	movs	r2, #10
 801b2c2:	9803      	ldr	r0, [sp, #12]
 801b2c4:	f000 f9cc 	bl	801b660 <__multadd>
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	0007      	movs	r7, r0
 801b2cc:	220a      	movs	r2, #10
 801b2ce:	9904      	ldr	r1, [sp, #16]
 801b2d0:	9803      	ldr	r0, [sp, #12]
 801b2d2:	f000 f9c5 	bl	801b660 <__multadd>
 801b2d6:	9004      	str	r0, [sp, #16]
 801b2d8:	e7ee      	b.n	801b2b8 <_dtoa_r+0xb14>
 801b2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2dc:	2401      	movs	r4, #1
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	dd00      	ble.n	801b2e4 <_dtoa_r+0xb40>
 801b2e2:	001c      	movs	r4, r3
 801b2e4:	9704      	str	r7, [sp, #16]
 801b2e6:	2700      	movs	r7, #0
 801b2e8:	9b08      	ldr	r3, [sp, #32]
 801b2ea:	191c      	adds	r4, r3, r4
 801b2ec:	9905      	ldr	r1, [sp, #20]
 801b2ee:	2201      	movs	r2, #1
 801b2f0:	9803      	ldr	r0, [sp, #12]
 801b2f2:	f000 fb67 	bl	801b9c4 <__lshift>
 801b2f6:	0031      	movs	r1, r6
 801b2f8:	9005      	str	r0, [sp, #20]
 801b2fa:	f000 fbcf 	bl	801ba9c <__mcmp>
 801b2fe:	2800      	cmp	r0, #0
 801b300:	dcb2      	bgt.n	801b268 <_dtoa_r+0xac4>
 801b302:	d101      	bne.n	801b308 <_dtoa_r+0xb64>
 801b304:	07ed      	lsls	r5, r5, #31
 801b306:	d4af      	bmi.n	801b268 <_dtoa_r+0xac4>
 801b308:	0023      	movs	r3, r4
 801b30a:	001c      	movs	r4, r3
 801b30c:	3b01      	subs	r3, #1
 801b30e:	781a      	ldrb	r2, [r3, #0]
 801b310:	2a30      	cmp	r2, #48	@ 0x30
 801b312:	d0fa      	beq.n	801b30a <_dtoa_r+0xb66>
 801b314:	e4b0      	b.n	801ac78 <_dtoa_r+0x4d4>
 801b316:	9a08      	ldr	r2, [sp, #32]
 801b318:	429a      	cmp	r2, r3
 801b31a:	d1a6      	bne.n	801b26a <_dtoa_r+0xac6>
 801b31c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b31e:	3301      	adds	r3, #1
 801b320:	930c      	str	r3, [sp, #48]	@ 0x30
 801b322:	2331      	movs	r3, #49	@ 0x31
 801b324:	7013      	strb	r3, [r2, #0]
 801b326:	e4a7      	b.n	801ac78 <_dtoa_r+0x4d4>
 801b328:	4b14      	ldr	r3, [pc, #80]	@ (801b37c <_dtoa_r+0xbd8>)
 801b32a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801b32c:	9308      	str	r3, [sp, #32]
 801b32e:	4b14      	ldr	r3, [pc, #80]	@ (801b380 <_dtoa_r+0xbdc>)
 801b330:	2a00      	cmp	r2, #0
 801b332:	d001      	beq.n	801b338 <_dtoa_r+0xb94>
 801b334:	f7ff fa7e 	bl	801a834 <_dtoa_r+0x90>
 801b338:	f7ff fa7e 	bl	801a838 <_dtoa_r+0x94>
 801b33c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b33e:	2b01      	cmp	r3, #1
 801b340:	dc00      	bgt.n	801b344 <_dtoa_r+0xba0>
 801b342:	e648      	b.n	801afd6 <_dtoa_r+0x832>
 801b344:	2001      	movs	r0, #1
 801b346:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b348:	e665      	b.n	801b016 <_dtoa_r+0x872>
 801b34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	dc00      	bgt.n	801b352 <_dtoa_r+0xbae>
 801b350:	e6a9      	b.n	801b0a6 <_dtoa_r+0x902>
 801b352:	2400      	movs	r4, #0
 801b354:	0031      	movs	r1, r6
 801b356:	9805      	ldr	r0, [sp, #20]
 801b358:	f7ff f99f 	bl	801a69a <quorem>
 801b35c:	9b08      	ldr	r3, [sp, #32]
 801b35e:	3030      	adds	r0, #48	@ 0x30
 801b360:	5518      	strb	r0, [r3, r4]
 801b362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b364:	3401      	adds	r4, #1
 801b366:	0005      	movs	r5, r0
 801b368:	42a3      	cmp	r3, r4
 801b36a:	ddb6      	ble.n	801b2da <_dtoa_r+0xb36>
 801b36c:	2300      	movs	r3, #0
 801b36e:	220a      	movs	r2, #10
 801b370:	9905      	ldr	r1, [sp, #20]
 801b372:	9803      	ldr	r0, [sp, #12]
 801b374:	f000 f974 	bl	801b660 <__multadd>
 801b378:	9005      	str	r0, [sp, #20]
 801b37a:	e7eb      	b.n	801b354 <_dtoa_r+0xbb0>
 801b37c:	080202b5 	.word	0x080202b5
 801b380:	080202bd 	.word	0x080202bd

0801b384 <_free_r>:
 801b384:	b570      	push	{r4, r5, r6, lr}
 801b386:	0005      	movs	r5, r0
 801b388:	1e0c      	subs	r4, r1, #0
 801b38a:	d010      	beq.n	801b3ae <_free_r+0x2a>
 801b38c:	3c04      	subs	r4, #4
 801b38e:	6823      	ldr	r3, [r4, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	da00      	bge.n	801b396 <_free_r+0x12>
 801b394:	18e4      	adds	r4, r4, r3
 801b396:	0028      	movs	r0, r5
 801b398:	f000 f8ea 	bl	801b570 <__malloc_lock>
 801b39c:	4a1d      	ldr	r2, [pc, #116]	@ (801b414 <_free_r+0x90>)
 801b39e:	6813      	ldr	r3, [r2, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d105      	bne.n	801b3b0 <_free_r+0x2c>
 801b3a4:	6063      	str	r3, [r4, #4]
 801b3a6:	6014      	str	r4, [r2, #0]
 801b3a8:	0028      	movs	r0, r5
 801b3aa:	f000 f8e9 	bl	801b580 <__malloc_unlock>
 801b3ae:	bd70      	pop	{r4, r5, r6, pc}
 801b3b0:	42a3      	cmp	r3, r4
 801b3b2:	d908      	bls.n	801b3c6 <_free_r+0x42>
 801b3b4:	6820      	ldr	r0, [r4, #0]
 801b3b6:	1821      	adds	r1, r4, r0
 801b3b8:	428b      	cmp	r3, r1
 801b3ba:	d1f3      	bne.n	801b3a4 <_free_r+0x20>
 801b3bc:	6819      	ldr	r1, [r3, #0]
 801b3be:	685b      	ldr	r3, [r3, #4]
 801b3c0:	1809      	adds	r1, r1, r0
 801b3c2:	6021      	str	r1, [r4, #0]
 801b3c4:	e7ee      	b.n	801b3a4 <_free_r+0x20>
 801b3c6:	001a      	movs	r2, r3
 801b3c8:	685b      	ldr	r3, [r3, #4]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d001      	beq.n	801b3d2 <_free_r+0x4e>
 801b3ce:	42a3      	cmp	r3, r4
 801b3d0:	d9f9      	bls.n	801b3c6 <_free_r+0x42>
 801b3d2:	6811      	ldr	r1, [r2, #0]
 801b3d4:	1850      	adds	r0, r2, r1
 801b3d6:	42a0      	cmp	r0, r4
 801b3d8:	d10b      	bne.n	801b3f2 <_free_r+0x6e>
 801b3da:	6820      	ldr	r0, [r4, #0]
 801b3dc:	1809      	adds	r1, r1, r0
 801b3de:	1850      	adds	r0, r2, r1
 801b3e0:	6011      	str	r1, [r2, #0]
 801b3e2:	4283      	cmp	r3, r0
 801b3e4:	d1e0      	bne.n	801b3a8 <_free_r+0x24>
 801b3e6:	6818      	ldr	r0, [r3, #0]
 801b3e8:	685b      	ldr	r3, [r3, #4]
 801b3ea:	1841      	adds	r1, r0, r1
 801b3ec:	6011      	str	r1, [r2, #0]
 801b3ee:	6053      	str	r3, [r2, #4]
 801b3f0:	e7da      	b.n	801b3a8 <_free_r+0x24>
 801b3f2:	42a0      	cmp	r0, r4
 801b3f4:	d902      	bls.n	801b3fc <_free_r+0x78>
 801b3f6:	230c      	movs	r3, #12
 801b3f8:	602b      	str	r3, [r5, #0]
 801b3fa:	e7d5      	b.n	801b3a8 <_free_r+0x24>
 801b3fc:	6820      	ldr	r0, [r4, #0]
 801b3fe:	1821      	adds	r1, r4, r0
 801b400:	428b      	cmp	r3, r1
 801b402:	d103      	bne.n	801b40c <_free_r+0x88>
 801b404:	6819      	ldr	r1, [r3, #0]
 801b406:	685b      	ldr	r3, [r3, #4]
 801b408:	1809      	adds	r1, r1, r0
 801b40a:	6021      	str	r1, [r4, #0]
 801b40c:	6063      	str	r3, [r4, #4]
 801b40e:	6054      	str	r4, [r2, #4]
 801b410:	e7ca      	b.n	801b3a8 <_free_r+0x24>
 801b412:	46c0      	nop			@ (mov r8, r8)
 801b414:	200067f8 	.word	0x200067f8

0801b418 <malloc>:
 801b418:	b510      	push	{r4, lr}
 801b41a:	4b03      	ldr	r3, [pc, #12]	@ (801b428 <malloc+0x10>)
 801b41c:	0001      	movs	r1, r0
 801b41e:	6818      	ldr	r0, [r3, #0]
 801b420:	f000 f826 	bl	801b470 <_malloc_r>
 801b424:	bd10      	pop	{r4, pc}
 801b426:	46c0      	nop			@ (mov r8, r8)
 801b428:	200002cc 	.word	0x200002cc

0801b42c <sbrk_aligned>:
 801b42c:	b570      	push	{r4, r5, r6, lr}
 801b42e:	4e0f      	ldr	r6, [pc, #60]	@ (801b46c <sbrk_aligned+0x40>)
 801b430:	000d      	movs	r5, r1
 801b432:	6831      	ldr	r1, [r6, #0]
 801b434:	0004      	movs	r4, r0
 801b436:	2900      	cmp	r1, #0
 801b438:	d102      	bne.n	801b440 <sbrk_aligned+0x14>
 801b43a:	f001 f871 	bl	801c520 <_sbrk_r>
 801b43e:	6030      	str	r0, [r6, #0]
 801b440:	0029      	movs	r1, r5
 801b442:	0020      	movs	r0, r4
 801b444:	f001 f86c 	bl	801c520 <_sbrk_r>
 801b448:	1c43      	adds	r3, r0, #1
 801b44a:	d103      	bne.n	801b454 <sbrk_aligned+0x28>
 801b44c:	2501      	movs	r5, #1
 801b44e:	426d      	negs	r5, r5
 801b450:	0028      	movs	r0, r5
 801b452:	bd70      	pop	{r4, r5, r6, pc}
 801b454:	2303      	movs	r3, #3
 801b456:	1cc5      	adds	r5, r0, #3
 801b458:	439d      	bics	r5, r3
 801b45a:	42a8      	cmp	r0, r5
 801b45c:	d0f8      	beq.n	801b450 <sbrk_aligned+0x24>
 801b45e:	1a29      	subs	r1, r5, r0
 801b460:	0020      	movs	r0, r4
 801b462:	f001 f85d 	bl	801c520 <_sbrk_r>
 801b466:	3001      	adds	r0, #1
 801b468:	d1f2      	bne.n	801b450 <sbrk_aligned+0x24>
 801b46a:	e7ef      	b.n	801b44c <sbrk_aligned+0x20>
 801b46c:	200067f4 	.word	0x200067f4

0801b470 <_malloc_r>:
 801b470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b472:	2203      	movs	r2, #3
 801b474:	1ccb      	adds	r3, r1, #3
 801b476:	4393      	bics	r3, r2
 801b478:	3308      	adds	r3, #8
 801b47a:	0005      	movs	r5, r0
 801b47c:	001f      	movs	r7, r3
 801b47e:	2b0c      	cmp	r3, #12
 801b480:	d234      	bcs.n	801b4ec <_malloc_r+0x7c>
 801b482:	270c      	movs	r7, #12
 801b484:	42b9      	cmp	r1, r7
 801b486:	d833      	bhi.n	801b4f0 <_malloc_r+0x80>
 801b488:	0028      	movs	r0, r5
 801b48a:	f000 f871 	bl	801b570 <__malloc_lock>
 801b48e:	4e37      	ldr	r6, [pc, #220]	@ (801b56c <_malloc_r+0xfc>)
 801b490:	6833      	ldr	r3, [r6, #0]
 801b492:	001c      	movs	r4, r3
 801b494:	2c00      	cmp	r4, #0
 801b496:	d12f      	bne.n	801b4f8 <_malloc_r+0x88>
 801b498:	0039      	movs	r1, r7
 801b49a:	0028      	movs	r0, r5
 801b49c:	f7ff ffc6 	bl	801b42c <sbrk_aligned>
 801b4a0:	0004      	movs	r4, r0
 801b4a2:	1c43      	adds	r3, r0, #1
 801b4a4:	d15f      	bne.n	801b566 <_malloc_r+0xf6>
 801b4a6:	6834      	ldr	r4, [r6, #0]
 801b4a8:	9400      	str	r4, [sp, #0]
 801b4aa:	9b00      	ldr	r3, [sp, #0]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d14a      	bne.n	801b546 <_malloc_r+0xd6>
 801b4b0:	2c00      	cmp	r4, #0
 801b4b2:	d052      	beq.n	801b55a <_malloc_r+0xea>
 801b4b4:	6823      	ldr	r3, [r4, #0]
 801b4b6:	0028      	movs	r0, r5
 801b4b8:	18e3      	adds	r3, r4, r3
 801b4ba:	9900      	ldr	r1, [sp, #0]
 801b4bc:	9301      	str	r3, [sp, #4]
 801b4be:	f001 f82f 	bl	801c520 <_sbrk_r>
 801b4c2:	9b01      	ldr	r3, [sp, #4]
 801b4c4:	4283      	cmp	r3, r0
 801b4c6:	d148      	bne.n	801b55a <_malloc_r+0xea>
 801b4c8:	6823      	ldr	r3, [r4, #0]
 801b4ca:	0028      	movs	r0, r5
 801b4cc:	1aff      	subs	r7, r7, r3
 801b4ce:	0039      	movs	r1, r7
 801b4d0:	f7ff ffac 	bl	801b42c <sbrk_aligned>
 801b4d4:	3001      	adds	r0, #1
 801b4d6:	d040      	beq.n	801b55a <_malloc_r+0xea>
 801b4d8:	6823      	ldr	r3, [r4, #0]
 801b4da:	19db      	adds	r3, r3, r7
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	6833      	ldr	r3, [r6, #0]
 801b4e0:	685a      	ldr	r2, [r3, #4]
 801b4e2:	2a00      	cmp	r2, #0
 801b4e4:	d133      	bne.n	801b54e <_malloc_r+0xde>
 801b4e6:	9b00      	ldr	r3, [sp, #0]
 801b4e8:	6033      	str	r3, [r6, #0]
 801b4ea:	e019      	b.n	801b520 <_malloc_r+0xb0>
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	dac9      	bge.n	801b484 <_malloc_r+0x14>
 801b4f0:	230c      	movs	r3, #12
 801b4f2:	602b      	str	r3, [r5, #0]
 801b4f4:	2000      	movs	r0, #0
 801b4f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b4f8:	6821      	ldr	r1, [r4, #0]
 801b4fa:	1bc9      	subs	r1, r1, r7
 801b4fc:	d420      	bmi.n	801b540 <_malloc_r+0xd0>
 801b4fe:	290b      	cmp	r1, #11
 801b500:	d90a      	bls.n	801b518 <_malloc_r+0xa8>
 801b502:	19e2      	adds	r2, r4, r7
 801b504:	6027      	str	r7, [r4, #0]
 801b506:	42a3      	cmp	r3, r4
 801b508:	d104      	bne.n	801b514 <_malloc_r+0xa4>
 801b50a:	6032      	str	r2, [r6, #0]
 801b50c:	6863      	ldr	r3, [r4, #4]
 801b50e:	6011      	str	r1, [r2, #0]
 801b510:	6053      	str	r3, [r2, #4]
 801b512:	e005      	b.n	801b520 <_malloc_r+0xb0>
 801b514:	605a      	str	r2, [r3, #4]
 801b516:	e7f9      	b.n	801b50c <_malloc_r+0x9c>
 801b518:	6862      	ldr	r2, [r4, #4]
 801b51a:	42a3      	cmp	r3, r4
 801b51c:	d10e      	bne.n	801b53c <_malloc_r+0xcc>
 801b51e:	6032      	str	r2, [r6, #0]
 801b520:	0028      	movs	r0, r5
 801b522:	f000 f82d 	bl	801b580 <__malloc_unlock>
 801b526:	0020      	movs	r0, r4
 801b528:	2207      	movs	r2, #7
 801b52a:	300b      	adds	r0, #11
 801b52c:	1d23      	adds	r3, r4, #4
 801b52e:	4390      	bics	r0, r2
 801b530:	1ac2      	subs	r2, r0, r3
 801b532:	4298      	cmp	r0, r3
 801b534:	d0df      	beq.n	801b4f6 <_malloc_r+0x86>
 801b536:	1a1b      	subs	r3, r3, r0
 801b538:	50a3      	str	r3, [r4, r2]
 801b53a:	e7dc      	b.n	801b4f6 <_malloc_r+0x86>
 801b53c:	605a      	str	r2, [r3, #4]
 801b53e:	e7ef      	b.n	801b520 <_malloc_r+0xb0>
 801b540:	0023      	movs	r3, r4
 801b542:	6864      	ldr	r4, [r4, #4]
 801b544:	e7a6      	b.n	801b494 <_malloc_r+0x24>
 801b546:	9c00      	ldr	r4, [sp, #0]
 801b548:	6863      	ldr	r3, [r4, #4]
 801b54a:	9300      	str	r3, [sp, #0]
 801b54c:	e7ad      	b.n	801b4aa <_malloc_r+0x3a>
 801b54e:	001a      	movs	r2, r3
 801b550:	685b      	ldr	r3, [r3, #4]
 801b552:	42a3      	cmp	r3, r4
 801b554:	d1fb      	bne.n	801b54e <_malloc_r+0xde>
 801b556:	2300      	movs	r3, #0
 801b558:	e7da      	b.n	801b510 <_malloc_r+0xa0>
 801b55a:	230c      	movs	r3, #12
 801b55c:	0028      	movs	r0, r5
 801b55e:	602b      	str	r3, [r5, #0]
 801b560:	f000 f80e 	bl	801b580 <__malloc_unlock>
 801b564:	e7c6      	b.n	801b4f4 <_malloc_r+0x84>
 801b566:	6007      	str	r7, [r0, #0]
 801b568:	e7da      	b.n	801b520 <_malloc_r+0xb0>
 801b56a:	46c0      	nop			@ (mov r8, r8)
 801b56c:	200067f8 	.word	0x200067f8

0801b570 <__malloc_lock>:
 801b570:	b510      	push	{r4, lr}
 801b572:	4802      	ldr	r0, [pc, #8]	@ (801b57c <__malloc_lock+0xc>)
 801b574:	f7ff f873 	bl	801a65e <__retarget_lock_acquire_recursive>
 801b578:	bd10      	pop	{r4, pc}
 801b57a:	46c0      	nop			@ (mov r8, r8)
 801b57c:	200067f0 	.word	0x200067f0

0801b580 <__malloc_unlock>:
 801b580:	b510      	push	{r4, lr}
 801b582:	4802      	ldr	r0, [pc, #8]	@ (801b58c <__malloc_unlock+0xc>)
 801b584:	f7ff f86c 	bl	801a660 <__retarget_lock_release_recursive>
 801b588:	bd10      	pop	{r4, pc}
 801b58a:	46c0      	nop			@ (mov r8, r8)
 801b58c:	200067f0 	.word	0x200067f0

0801b590 <_Balloc>:
 801b590:	b570      	push	{r4, r5, r6, lr}
 801b592:	69c5      	ldr	r5, [r0, #28]
 801b594:	0006      	movs	r6, r0
 801b596:	000c      	movs	r4, r1
 801b598:	2d00      	cmp	r5, #0
 801b59a:	d10e      	bne.n	801b5ba <_Balloc+0x2a>
 801b59c:	2010      	movs	r0, #16
 801b59e:	f7ff ff3b 	bl	801b418 <malloc>
 801b5a2:	1e02      	subs	r2, r0, #0
 801b5a4:	61f0      	str	r0, [r6, #28]
 801b5a6:	d104      	bne.n	801b5b2 <_Balloc+0x22>
 801b5a8:	216b      	movs	r1, #107	@ 0x6b
 801b5aa:	4b19      	ldr	r3, [pc, #100]	@ (801b610 <_Balloc+0x80>)
 801b5ac:	4819      	ldr	r0, [pc, #100]	@ (801b614 <_Balloc+0x84>)
 801b5ae:	f000 ffc9 	bl	801c544 <__assert_func>
 801b5b2:	6045      	str	r5, [r0, #4]
 801b5b4:	6085      	str	r5, [r0, #8]
 801b5b6:	6005      	str	r5, [r0, #0]
 801b5b8:	60c5      	str	r5, [r0, #12]
 801b5ba:	69f5      	ldr	r5, [r6, #28]
 801b5bc:	68eb      	ldr	r3, [r5, #12]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d013      	beq.n	801b5ea <_Balloc+0x5a>
 801b5c2:	69f3      	ldr	r3, [r6, #28]
 801b5c4:	00a2      	lsls	r2, r4, #2
 801b5c6:	68db      	ldr	r3, [r3, #12]
 801b5c8:	189b      	adds	r3, r3, r2
 801b5ca:	6818      	ldr	r0, [r3, #0]
 801b5cc:	2800      	cmp	r0, #0
 801b5ce:	d118      	bne.n	801b602 <_Balloc+0x72>
 801b5d0:	2101      	movs	r1, #1
 801b5d2:	000d      	movs	r5, r1
 801b5d4:	40a5      	lsls	r5, r4
 801b5d6:	1d6a      	adds	r2, r5, #5
 801b5d8:	0030      	movs	r0, r6
 801b5da:	0092      	lsls	r2, r2, #2
 801b5dc:	f000 ffd0 	bl	801c580 <_calloc_r>
 801b5e0:	2800      	cmp	r0, #0
 801b5e2:	d00c      	beq.n	801b5fe <_Balloc+0x6e>
 801b5e4:	6044      	str	r4, [r0, #4]
 801b5e6:	6085      	str	r5, [r0, #8]
 801b5e8:	e00d      	b.n	801b606 <_Balloc+0x76>
 801b5ea:	2221      	movs	r2, #33	@ 0x21
 801b5ec:	2104      	movs	r1, #4
 801b5ee:	0030      	movs	r0, r6
 801b5f0:	f000 ffc6 	bl	801c580 <_calloc_r>
 801b5f4:	69f3      	ldr	r3, [r6, #28]
 801b5f6:	60e8      	str	r0, [r5, #12]
 801b5f8:	68db      	ldr	r3, [r3, #12]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d1e1      	bne.n	801b5c2 <_Balloc+0x32>
 801b5fe:	2000      	movs	r0, #0
 801b600:	bd70      	pop	{r4, r5, r6, pc}
 801b602:	6802      	ldr	r2, [r0, #0]
 801b604:	601a      	str	r2, [r3, #0]
 801b606:	2300      	movs	r3, #0
 801b608:	6103      	str	r3, [r0, #16]
 801b60a:	60c3      	str	r3, [r0, #12]
 801b60c:	e7f8      	b.n	801b600 <_Balloc+0x70>
 801b60e:	46c0      	nop			@ (mov r8, r8)
 801b610:	080202c2 	.word	0x080202c2
 801b614:	08020342 	.word	0x08020342

0801b618 <_Bfree>:
 801b618:	b570      	push	{r4, r5, r6, lr}
 801b61a:	69c6      	ldr	r6, [r0, #28]
 801b61c:	0005      	movs	r5, r0
 801b61e:	000c      	movs	r4, r1
 801b620:	2e00      	cmp	r6, #0
 801b622:	d10e      	bne.n	801b642 <_Bfree+0x2a>
 801b624:	2010      	movs	r0, #16
 801b626:	f7ff fef7 	bl	801b418 <malloc>
 801b62a:	1e02      	subs	r2, r0, #0
 801b62c:	61e8      	str	r0, [r5, #28]
 801b62e:	d104      	bne.n	801b63a <_Bfree+0x22>
 801b630:	218f      	movs	r1, #143	@ 0x8f
 801b632:	4b09      	ldr	r3, [pc, #36]	@ (801b658 <_Bfree+0x40>)
 801b634:	4809      	ldr	r0, [pc, #36]	@ (801b65c <_Bfree+0x44>)
 801b636:	f000 ff85 	bl	801c544 <__assert_func>
 801b63a:	6046      	str	r6, [r0, #4]
 801b63c:	6086      	str	r6, [r0, #8]
 801b63e:	6006      	str	r6, [r0, #0]
 801b640:	60c6      	str	r6, [r0, #12]
 801b642:	2c00      	cmp	r4, #0
 801b644:	d007      	beq.n	801b656 <_Bfree+0x3e>
 801b646:	69eb      	ldr	r3, [r5, #28]
 801b648:	6862      	ldr	r2, [r4, #4]
 801b64a:	68db      	ldr	r3, [r3, #12]
 801b64c:	0092      	lsls	r2, r2, #2
 801b64e:	189b      	adds	r3, r3, r2
 801b650:	681a      	ldr	r2, [r3, #0]
 801b652:	6022      	str	r2, [r4, #0]
 801b654:	601c      	str	r4, [r3, #0]
 801b656:	bd70      	pop	{r4, r5, r6, pc}
 801b658:	080202c2 	.word	0x080202c2
 801b65c:	08020342 	.word	0x08020342

0801b660 <__multadd>:
 801b660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b662:	000f      	movs	r7, r1
 801b664:	9001      	str	r0, [sp, #4]
 801b666:	000c      	movs	r4, r1
 801b668:	001e      	movs	r6, r3
 801b66a:	2000      	movs	r0, #0
 801b66c:	690d      	ldr	r5, [r1, #16]
 801b66e:	3714      	adds	r7, #20
 801b670:	683b      	ldr	r3, [r7, #0]
 801b672:	3001      	adds	r0, #1
 801b674:	b299      	uxth	r1, r3
 801b676:	4351      	muls	r1, r2
 801b678:	0c1b      	lsrs	r3, r3, #16
 801b67a:	4353      	muls	r3, r2
 801b67c:	1989      	adds	r1, r1, r6
 801b67e:	0c0e      	lsrs	r6, r1, #16
 801b680:	199b      	adds	r3, r3, r6
 801b682:	0c1e      	lsrs	r6, r3, #16
 801b684:	b289      	uxth	r1, r1
 801b686:	041b      	lsls	r3, r3, #16
 801b688:	185b      	adds	r3, r3, r1
 801b68a:	c708      	stmia	r7!, {r3}
 801b68c:	4285      	cmp	r5, r0
 801b68e:	dcef      	bgt.n	801b670 <__multadd+0x10>
 801b690:	2e00      	cmp	r6, #0
 801b692:	d022      	beq.n	801b6da <__multadd+0x7a>
 801b694:	68a3      	ldr	r3, [r4, #8]
 801b696:	42ab      	cmp	r3, r5
 801b698:	dc19      	bgt.n	801b6ce <__multadd+0x6e>
 801b69a:	6861      	ldr	r1, [r4, #4]
 801b69c:	9801      	ldr	r0, [sp, #4]
 801b69e:	3101      	adds	r1, #1
 801b6a0:	f7ff ff76 	bl	801b590 <_Balloc>
 801b6a4:	1e07      	subs	r7, r0, #0
 801b6a6:	d105      	bne.n	801b6b4 <__multadd+0x54>
 801b6a8:	003a      	movs	r2, r7
 801b6aa:	21ba      	movs	r1, #186	@ 0xba
 801b6ac:	4b0c      	ldr	r3, [pc, #48]	@ (801b6e0 <__multadd+0x80>)
 801b6ae:	480d      	ldr	r0, [pc, #52]	@ (801b6e4 <__multadd+0x84>)
 801b6b0:	f000 ff48 	bl	801c544 <__assert_func>
 801b6b4:	0021      	movs	r1, r4
 801b6b6:	6922      	ldr	r2, [r4, #16]
 801b6b8:	310c      	adds	r1, #12
 801b6ba:	3202      	adds	r2, #2
 801b6bc:	0092      	lsls	r2, r2, #2
 801b6be:	300c      	adds	r0, #12
 801b6c0:	f7fe ffe2 	bl	801a688 <memcpy>
 801b6c4:	0021      	movs	r1, r4
 801b6c6:	9801      	ldr	r0, [sp, #4]
 801b6c8:	f7ff ffa6 	bl	801b618 <_Bfree>
 801b6cc:	003c      	movs	r4, r7
 801b6ce:	1d2b      	adds	r3, r5, #4
 801b6d0:	009b      	lsls	r3, r3, #2
 801b6d2:	18e3      	adds	r3, r4, r3
 801b6d4:	3501      	adds	r5, #1
 801b6d6:	605e      	str	r6, [r3, #4]
 801b6d8:	6125      	str	r5, [r4, #16]
 801b6da:	0020      	movs	r0, r4
 801b6dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b6de:	46c0      	nop			@ (mov r8, r8)
 801b6e0:	08020331 	.word	0x08020331
 801b6e4:	08020342 	.word	0x08020342

0801b6e8 <__hi0bits>:
 801b6e8:	2280      	movs	r2, #128	@ 0x80
 801b6ea:	0003      	movs	r3, r0
 801b6ec:	0252      	lsls	r2, r2, #9
 801b6ee:	2000      	movs	r0, #0
 801b6f0:	4293      	cmp	r3, r2
 801b6f2:	d201      	bcs.n	801b6f8 <__hi0bits+0x10>
 801b6f4:	041b      	lsls	r3, r3, #16
 801b6f6:	3010      	adds	r0, #16
 801b6f8:	2280      	movs	r2, #128	@ 0x80
 801b6fa:	0452      	lsls	r2, r2, #17
 801b6fc:	4293      	cmp	r3, r2
 801b6fe:	d201      	bcs.n	801b704 <__hi0bits+0x1c>
 801b700:	3008      	adds	r0, #8
 801b702:	021b      	lsls	r3, r3, #8
 801b704:	2280      	movs	r2, #128	@ 0x80
 801b706:	0552      	lsls	r2, r2, #21
 801b708:	4293      	cmp	r3, r2
 801b70a:	d201      	bcs.n	801b710 <__hi0bits+0x28>
 801b70c:	3004      	adds	r0, #4
 801b70e:	011b      	lsls	r3, r3, #4
 801b710:	2280      	movs	r2, #128	@ 0x80
 801b712:	05d2      	lsls	r2, r2, #23
 801b714:	4293      	cmp	r3, r2
 801b716:	d201      	bcs.n	801b71c <__hi0bits+0x34>
 801b718:	3002      	adds	r0, #2
 801b71a:	009b      	lsls	r3, r3, #2
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	db03      	blt.n	801b728 <__hi0bits+0x40>
 801b720:	3001      	adds	r0, #1
 801b722:	4213      	tst	r3, r2
 801b724:	d100      	bne.n	801b728 <__hi0bits+0x40>
 801b726:	2020      	movs	r0, #32
 801b728:	4770      	bx	lr

0801b72a <__lo0bits>:
 801b72a:	6803      	ldr	r3, [r0, #0]
 801b72c:	0001      	movs	r1, r0
 801b72e:	2207      	movs	r2, #7
 801b730:	0018      	movs	r0, r3
 801b732:	4010      	ands	r0, r2
 801b734:	4213      	tst	r3, r2
 801b736:	d00d      	beq.n	801b754 <__lo0bits+0x2a>
 801b738:	3a06      	subs	r2, #6
 801b73a:	2000      	movs	r0, #0
 801b73c:	4213      	tst	r3, r2
 801b73e:	d105      	bne.n	801b74c <__lo0bits+0x22>
 801b740:	3002      	adds	r0, #2
 801b742:	4203      	tst	r3, r0
 801b744:	d003      	beq.n	801b74e <__lo0bits+0x24>
 801b746:	40d3      	lsrs	r3, r2
 801b748:	0010      	movs	r0, r2
 801b74a:	600b      	str	r3, [r1, #0]
 801b74c:	4770      	bx	lr
 801b74e:	089b      	lsrs	r3, r3, #2
 801b750:	600b      	str	r3, [r1, #0]
 801b752:	e7fb      	b.n	801b74c <__lo0bits+0x22>
 801b754:	b29a      	uxth	r2, r3
 801b756:	2a00      	cmp	r2, #0
 801b758:	d101      	bne.n	801b75e <__lo0bits+0x34>
 801b75a:	2010      	movs	r0, #16
 801b75c:	0c1b      	lsrs	r3, r3, #16
 801b75e:	b2da      	uxtb	r2, r3
 801b760:	2a00      	cmp	r2, #0
 801b762:	d101      	bne.n	801b768 <__lo0bits+0x3e>
 801b764:	3008      	adds	r0, #8
 801b766:	0a1b      	lsrs	r3, r3, #8
 801b768:	071a      	lsls	r2, r3, #28
 801b76a:	d101      	bne.n	801b770 <__lo0bits+0x46>
 801b76c:	3004      	adds	r0, #4
 801b76e:	091b      	lsrs	r3, r3, #4
 801b770:	079a      	lsls	r2, r3, #30
 801b772:	d101      	bne.n	801b778 <__lo0bits+0x4e>
 801b774:	3002      	adds	r0, #2
 801b776:	089b      	lsrs	r3, r3, #2
 801b778:	07da      	lsls	r2, r3, #31
 801b77a:	d4e9      	bmi.n	801b750 <__lo0bits+0x26>
 801b77c:	3001      	adds	r0, #1
 801b77e:	085b      	lsrs	r3, r3, #1
 801b780:	d1e6      	bne.n	801b750 <__lo0bits+0x26>
 801b782:	2020      	movs	r0, #32
 801b784:	e7e2      	b.n	801b74c <__lo0bits+0x22>
	...

0801b788 <__i2b>:
 801b788:	b510      	push	{r4, lr}
 801b78a:	000c      	movs	r4, r1
 801b78c:	2101      	movs	r1, #1
 801b78e:	f7ff feff 	bl	801b590 <_Balloc>
 801b792:	2800      	cmp	r0, #0
 801b794:	d107      	bne.n	801b7a6 <__i2b+0x1e>
 801b796:	2146      	movs	r1, #70	@ 0x46
 801b798:	4c05      	ldr	r4, [pc, #20]	@ (801b7b0 <__i2b+0x28>)
 801b79a:	0002      	movs	r2, r0
 801b79c:	4b05      	ldr	r3, [pc, #20]	@ (801b7b4 <__i2b+0x2c>)
 801b79e:	0020      	movs	r0, r4
 801b7a0:	31ff      	adds	r1, #255	@ 0xff
 801b7a2:	f000 fecf 	bl	801c544 <__assert_func>
 801b7a6:	2301      	movs	r3, #1
 801b7a8:	6144      	str	r4, [r0, #20]
 801b7aa:	6103      	str	r3, [r0, #16]
 801b7ac:	bd10      	pop	{r4, pc}
 801b7ae:	46c0      	nop			@ (mov r8, r8)
 801b7b0:	08020342 	.word	0x08020342
 801b7b4:	08020331 	.word	0x08020331

0801b7b8 <__multiply>:
 801b7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ba:	0014      	movs	r4, r2
 801b7bc:	690a      	ldr	r2, [r1, #16]
 801b7be:	6923      	ldr	r3, [r4, #16]
 801b7c0:	000d      	movs	r5, r1
 801b7c2:	b089      	sub	sp, #36	@ 0x24
 801b7c4:	429a      	cmp	r2, r3
 801b7c6:	db02      	blt.n	801b7ce <__multiply+0x16>
 801b7c8:	0023      	movs	r3, r4
 801b7ca:	000c      	movs	r4, r1
 801b7cc:	001d      	movs	r5, r3
 801b7ce:	6927      	ldr	r7, [r4, #16]
 801b7d0:	692e      	ldr	r6, [r5, #16]
 801b7d2:	6861      	ldr	r1, [r4, #4]
 801b7d4:	19bb      	adds	r3, r7, r6
 801b7d6:	9300      	str	r3, [sp, #0]
 801b7d8:	68a3      	ldr	r3, [r4, #8]
 801b7da:	19ba      	adds	r2, r7, r6
 801b7dc:	4293      	cmp	r3, r2
 801b7de:	da00      	bge.n	801b7e2 <__multiply+0x2a>
 801b7e0:	3101      	adds	r1, #1
 801b7e2:	f7ff fed5 	bl	801b590 <_Balloc>
 801b7e6:	4684      	mov	ip, r0
 801b7e8:	2800      	cmp	r0, #0
 801b7ea:	d106      	bne.n	801b7fa <__multiply+0x42>
 801b7ec:	21b1      	movs	r1, #177	@ 0xb1
 801b7ee:	4662      	mov	r2, ip
 801b7f0:	4b44      	ldr	r3, [pc, #272]	@ (801b904 <__multiply+0x14c>)
 801b7f2:	4845      	ldr	r0, [pc, #276]	@ (801b908 <__multiply+0x150>)
 801b7f4:	0049      	lsls	r1, r1, #1
 801b7f6:	f000 fea5 	bl	801c544 <__assert_func>
 801b7fa:	0002      	movs	r2, r0
 801b7fc:	19bb      	adds	r3, r7, r6
 801b7fe:	3214      	adds	r2, #20
 801b800:	009b      	lsls	r3, r3, #2
 801b802:	18d3      	adds	r3, r2, r3
 801b804:	9301      	str	r3, [sp, #4]
 801b806:	2100      	movs	r1, #0
 801b808:	0013      	movs	r3, r2
 801b80a:	9801      	ldr	r0, [sp, #4]
 801b80c:	4283      	cmp	r3, r0
 801b80e:	d328      	bcc.n	801b862 <__multiply+0xaa>
 801b810:	0023      	movs	r3, r4
 801b812:	00bf      	lsls	r7, r7, #2
 801b814:	3314      	adds	r3, #20
 801b816:	9304      	str	r3, [sp, #16]
 801b818:	3514      	adds	r5, #20
 801b81a:	19db      	adds	r3, r3, r7
 801b81c:	00b6      	lsls	r6, r6, #2
 801b81e:	9302      	str	r3, [sp, #8]
 801b820:	19ab      	adds	r3, r5, r6
 801b822:	9307      	str	r3, [sp, #28]
 801b824:	2304      	movs	r3, #4
 801b826:	9305      	str	r3, [sp, #20]
 801b828:	0023      	movs	r3, r4
 801b82a:	9902      	ldr	r1, [sp, #8]
 801b82c:	3315      	adds	r3, #21
 801b82e:	4299      	cmp	r1, r3
 801b830:	d305      	bcc.n	801b83e <__multiply+0x86>
 801b832:	1b0c      	subs	r4, r1, r4
 801b834:	3c15      	subs	r4, #21
 801b836:	08a4      	lsrs	r4, r4, #2
 801b838:	3401      	adds	r4, #1
 801b83a:	00a3      	lsls	r3, r4, #2
 801b83c:	9305      	str	r3, [sp, #20]
 801b83e:	9b07      	ldr	r3, [sp, #28]
 801b840:	429d      	cmp	r5, r3
 801b842:	d310      	bcc.n	801b866 <__multiply+0xae>
 801b844:	9b00      	ldr	r3, [sp, #0]
 801b846:	2b00      	cmp	r3, #0
 801b848:	dd05      	ble.n	801b856 <__multiply+0x9e>
 801b84a:	9b01      	ldr	r3, [sp, #4]
 801b84c:	3b04      	subs	r3, #4
 801b84e:	9301      	str	r3, [sp, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d052      	beq.n	801b8fc <__multiply+0x144>
 801b856:	4663      	mov	r3, ip
 801b858:	4660      	mov	r0, ip
 801b85a:	9a00      	ldr	r2, [sp, #0]
 801b85c:	611a      	str	r2, [r3, #16]
 801b85e:	b009      	add	sp, #36	@ 0x24
 801b860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b862:	c302      	stmia	r3!, {r1}
 801b864:	e7d1      	b.n	801b80a <__multiply+0x52>
 801b866:	682c      	ldr	r4, [r5, #0]
 801b868:	b2a4      	uxth	r4, r4
 801b86a:	2c00      	cmp	r4, #0
 801b86c:	d01f      	beq.n	801b8ae <__multiply+0xf6>
 801b86e:	2300      	movs	r3, #0
 801b870:	0017      	movs	r7, r2
 801b872:	9e04      	ldr	r6, [sp, #16]
 801b874:	9303      	str	r3, [sp, #12]
 801b876:	ce08      	ldmia	r6!, {r3}
 801b878:	6839      	ldr	r1, [r7, #0]
 801b87a:	9306      	str	r3, [sp, #24]
 801b87c:	466b      	mov	r3, sp
 801b87e:	8b1b      	ldrh	r3, [r3, #24]
 801b880:	b288      	uxth	r0, r1
 801b882:	4363      	muls	r3, r4
 801b884:	181b      	adds	r3, r3, r0
 801b886:	9803      	ldr	r0, [sp, #12]
 801b888:	0c09      	lsrs	r1, r1, #16
 801b88a:	181b      	adds	r3, r3, r0
 801b88c:	9806      	ldr	r0, [sp, #24]
 801b88e:	0c00      	lsrs	r0, r0, #16
 801b890:	4360      	muls	r0, r4
 801b892:	1840      	adds	r0, r0, r1
 801b894:	0c19      	lsrs	r1, r3, #16
 801b896:	1841      	adds	r1, r0, r1
 801b898:	0c08      	lsrs	r0, r1, #16
 801b89a:	b29b      	uxth	r3, r3
 801b89c:	0409      	lsls	r1, r1, #16
 801b89e:	4319      	orrs	r1, r3
 801b8a0:	9b02      	ldr	r3, [sp, #8]
 801b8a2:	9003      	str	r0, [sp, #12]
 801b8a4:	c702      	stmia	r7!, {r1}
 801b8a6:	42b3      	cmp	r3, r6
 801b8a8:	d8e5      	bhi.n	801b876 <__multiply+0xbe>
 801b8aa:	9b05      	ldr	r3, [sp, #20]
 801b8ac:	50d0      	str	r0, [r2, r3]
 801b8ae:	682c      	ldr	r4, [r5, #0]
 801b8b0:	0c24      	lsrs	r4, r4, #16
 801b8b2:	d020      	beq.n	801b8f6 <__multiply+0x13e>
 801b8b4:	2100      	movs	r1, #0
 801b8b6:	0010      	movs	r0, r2
 801b8b8:	6813      	ldr	r3, [r2, #0]
 801b8ba:	9e04      	ldr	r6, [sp, #16]
 801b8bc:	9103      	str	r1, [sp, #12]
 801b8be:	6831      	ldr	r1, [r6, #0]
 801b8c0:	6807      	ldr	r7, [r0, #0]
 801b8c2:	b289      	uxth	r1, r1
 801b8c4:	4361      	muls	r1, r4
 801b8c6:	0c3f      	lsrs	r7, r7, #16
 801b8c8:	19c9      	adds	r1, r1, r7
 801b8ca:	9f03      	ldr	r7, [sp, #12]
 801b8cc:	b29b      	uxth	r3, r3
 801b8ce:	19c9      	adds	r1, r1, r7
 801b8d0:	040f      	lsls	r7, r1, #16
 801b8d2:	431f      	orrs	r7, r3
 801b8d4:	6007      	str	r7, [r0, #0]
 801b8d6:	ce80      	ldmia	r6!, {r7}
 801b8d8:	6843      	ldr	r3, [r0, #4]
 801b8da:	0c3f      	lsrs	r7, r7, #16
 801b8dc:	4367      	muls	r7, r4
 801b8de:	b29b      	uxth	r3, r3
 801b8e0:	0c09      	lsrs	r1, r1, #16
 801b8e2:	18fb      	adds	r3, r7, r3
 801b8e4:	185b      	adds	r3, r3, r1
 801b8e6:	0c19      	lsrs	r1, r3, #16
 801b8e8:	9103      	str	r1, [sp, #12]
 801b8ea:	9902      	ldr	r1, [sp, #8]
 801b8ec:	3004      	adds	r0, #4
 801b8ee:	42b1      	cmp	r1, r6
 801b8f0:	d8e5      	bhi.n	801b8be <__multiply+0x106>
 801b8f2:	9905      	ldr	r1, [sp, #20]
 801b8f4:	5053      	str	r3, [r2, r1]
 801b8f6:	3504      	adds	r5, #4
 801b8f8:	3204      	adds	r2, #4
 801b8fa:	e7a0      	b.n	801b83e <__multiply+0x86>
 801b8fc:	9b00      	ldr	r3, [sp, #0]
 801b8fe:	3b01      	subs	r3, #1
 801b900:	9300      	str	r3, [sp, #0]
 801b902:	e79f      	b.n	801b844 <__multiply+0x8c>
 801b904:	08020331 	.word	0x08020331
 801b908:	08020342 	.word	0x08020342

0801b90c <__pow5mult>:
 801b90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b90e:	2303      	movs	r3, #3
 801b910:	0015      	movs	r5, r2
 801b912:	0007      	movs	r7, r0
 801b914:	000e      	movs	r6, r1
 801b916:	401a      	ands	r2, r3
 801b918:	421d      	tst	r5, r3
 801b91a:	d008      	beq.n	801b92e <__pow5mult+0x22>
 801b91c:	4925      	ldr	r1, [pc, #148]	@ (801b9b4 <__pow5mult+0xa8>)
 801b91e:	3a01      	subs	r2, #1
 801b920:	0092      	lsls	r2, r2, #2
 801b922:	5852      	ldr	r2, [r2, r1]
 801b924:	2300      	movs	r3, #0
 801b926:	0031      	movs	r1, r6
 801b928:	f7ff fe9a 	bl	801b660 <__multadd>
 801b92c:	0006      	movs	r6, r0
 801b92e:	10ad      	asrs	r5, r5, #2
 801b930:	d03d      	beq.n	801b9ae <__pow5mult+0xa2>
 801b932:	69fc      	ldr	r4, [r7, #28]
 801b934:	2c00      	cmp	r4, #0
 801b936:	d10f      	bne.n	801b958 <__pow5mult+0x4c>
 801b938:	2010      	movs	r0, #16
 801b93a:	f7ff fd6d 	bl	801b418 <malloc>
 801b93e:	1e02      	subs	r2, r0, #0
 801b940:	61f8      	str	r0, [r7, #28]
 801b942:	d105      	bne.n	801b950 <__pow5mult+0x44>
 801b944:	21b4      	movs	r1, #180	@ 0xb4
 801b946:	4b1c      	ldr	r3, [pc, #112]	@ (801b9b8 <__pow5mult+0xac>)
 801b948:	481c      	ldr	r0, [pc, #112]	@ (801b9bc <__pow5mult+0xb0>)
 801b94a:	31ff      	adds	r1, #255	@ 0xff
 801b94c:	f000 fdfa 	bl	801c544 <__assert_func>
 801b950:	6044      	str	r4, [r0, #4]
 801b952:	6084      	str	r4, [r0, #8]
 801b954:	6004      	str	r4, [r0, #0]
 801b956:	60c4      	str	r4, [r0, #12]
 801b958:	69fb      	ldr	r3, [r7, #28]
 801b95a:	689c      	ldr	r4, [r3, #8]
 801b95c:	9301      	str	r3, [sp, #4]
 801b95e:	2c00      	cmp	r4, #0
 801b960:	d108      	bne.n	801b974 <__pow5mult+0x68>
 801b962:	0038      	movs	r0, r7
 801b964:	4916      	ldr	r1, [pc, #88]	@ (801b9c0 <__pow5mult+0xb4>)
 801b966:	f7ff ff0f 	bl	801b788 <__i2b>
 801b96a:	9b01      	ldr	r3, [sp, #4]
 801b96c:	0004      	movs	r4, r0
 801b96e:	6098      	str	r0, [r3, #8]
 801b970:	2300      	movs	r3, #0
 801b972:	6003      	str	r3, [r0, #0]
 801b974:	2301      	movs	r3, #1
 801b976:	421d      	tst	r5, r3
 801b978:	d00a      	beq.n	801b990 <__pow5mult+0x84>
 801b97a:	0031      	movs	r1, r6
 801b97c:	0022      	movs	r2, r4
 801b97e:	0038      	movs	r0, r7
 801b980:	f7ff ff1a 	bl	801b7b8 <__multiply>
 801b984:	0031      	movs	r1, r6
 801b986:	9001      	str	r0, [sp, #4]
 801b988:	0038      	movs	r0, r7
 801b98a:	f7ff fe45 	bl	801b618 <_Bfree>
 801b98e:	9e01      	ldr	r6, [sp, #4]
 801b990:	106d      	asrs	r5, r5, #1
 801b992:	d00c      	beq.n	801b9ae <__pow5mult+0xa2>
 801b994:	6820      	ldr	r0, [r4, #0]
 801b996:	2800      	cmp	r0, #0
 801b998:	d107      	bne.n	801b9aa <__pow5mult+0x9e>
 801b99a:	0022      	movs	r2, r4
 801b99c:	0021      	movs	r1, r4
 801b99e:	0038      	movs	r0, r7
 801b9a0:	f7ff ff0a 	bl	801b7b8 <__multiply>
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	6020      	str	r0, [r4, #0]
 801b9a8:	6003      	str	r3, [r0, #0]
 801b9aa:	0004      	movs	r4, r0
 801b9ac:	e7e2      	b.n	801b974 <__pow5mult+0x68>
 801b9ae:	0030      	movs	r0, r6
 801b9b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b9b2:	46c0      	nop			@ (mov r8, r8)
 801b9b4:	08020578 	.word	0x08020578
 801b9b8:	080202c2 	.word	0x080202c2
 801b9bc:	08020342 	.word	0x08020342
 801b9c0:	00000271 	.word	0x00000271

0801b9c4 <__lshift>:
 801b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9c6:	000c      	movs	r4, r1
 801b9c8:	0016      	movs	r6, r2
 801b9ca:	6923      	ldr	r3, [r4, #16]
 801b9cc:	1157      	asrs	r7, r2, #5
 801b9ce:	b085      	sub	sp, #20
 801b9d0:	18fb      	adds	r3, r7, r3
 801b9d2:	9301      	str	r3, [sp, #4]
 801b9d4:	3301      	adds	r3, #1
 801b9d6:	9300      	str	r3, [sp, #0]
 801b9d8:	6849      	ldr	r1, [r1, #4]
 801b9da:	68a3      	ldr	r3, [r4, #8]
 801b9dc:	9002      	str	r0, [sp, #8]
 801b9de:	9a00      	ldr	r2, [sp, #0]
 801b9e0:	4293      	cmp	r3, r2
 801b9e2:	db10      	blt.n	801ba06 <__lshift+0x42>
 801b9e4:	9802      	ldr	r0, [sp, #8]
 801b9e6:	f7ff fdd3 	bl	801b590 <_Balloc>
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	0001      	movs	r1, r0
 801b9ee:	0005      	movs	r5, r0
 801b9f0:	001a      	movs	r2, r3
 801b9f2:	3114      	adds	r1, #20
 801b9f4:	4298      	cmp	r0, r3
 801b9f6:	d10c      	bne.n	801ba12 <__lshift+0x4e>
 801b9f8:	21ef      	movs	r1, #239	@ 0xef
 801b9fa:	002a      	movs	r2, r5
 801b9fc:	4b25      	ldr	r3, [pc, #148]	@ (801ba94 <__lshift+0xd0>)
 801b9fe:	4826      	ldr	r0, [pc, #152]	@ (801ba98 <__lshift+0xd4>)
 801ba00:	0049      	lsls	r1, r1, #1
 801ba02:	f000 fd9f 	bl	801c544 <__assert_func>
 801ba06:	3101      	adds	r1, #1
 801ba08:	005b      	lsls	r3, r3, #1
 801ba0a:	e7e8      	b.n	801b9de <__lshift+0x1a>
 801ba0c:	0098      	lsls	r0, r3, #2
 801ba0e:	500a      	str	r2, [r1, r0]
 801ba10:	3301      	adds	r3, #1
 801ba12:	42bb      	cmp	r3, r7
 801ba14:	dbfa      	blt.n	801ba0c <__lshift+0x48>
 801ba16:	43fb      	mvns	r3, r7
 801ba18:	17db      	asrs	r3, r3, #31
 801ba1a:	401f      	ands	r7, r3
 801ba1c:	00bf      	lsls	r7, r7, #2
 801ba1e:	0023      	movs	r3, r4
 801ba20:	201f      	movs	r0, #31
 801ba22:	19c9      	adds	r1, r1, r7
 801ba24:	0037      	movs	r7, r6
 801ba26:	6922      	ldr	r2, [r4, #16]
 801ba28:	3314      	adds	r3, #20
 801ba2a:	0092      	lsls	r2, r2, #2
 801ba2c:	189a      	adds	r2, r3, r2
 801ba2e:	4007      	ands	r7, r0
 801ba30:	4206      	tst	r6, r0
 801ba32:	d029      	beq.n	801ba88 <__lshift+0xc4>
 801ba34:	3001      	adds	r0, #1
 801ba36:	1bc0      	subs	r0, r0, r7
 801ba38:	9003      	str	r0, [sp, #12]
 801ba3a:	468c      	mov	ip, r1
 801ba3c:	2000      	movs	r0, #0
 801ba3e:	681e      	ldr	r6, [r3, #0]
 801ba40:	40be      	lsls	r6, r7
 801ba42:	4306      	orrs	r6, r0
 801ba44:	4660      	mov	r0, ip
 801ba46:	c040      	stmia	r0!, {r6}
 801ba48:	4684      	mov	ip, r0
 801ba4a:	9e03      	ldr	r6, [sp, #12]
 801ba4c:	cb01      	ldmia	r3!, {r0}
 801ba4e:	40f0      	lsrs	r0, r6
 801ba50:	429a      	cmp	r2, r3
 801ba52:	d8f4      	bhi.n	801ba3e <__lshift+0x7a>
 801ba54:	0026      	movs	r6, r4
 801ba56:	3615      	adds	r6, #21
 801ba58:	2304      	movs	r3, #4
 801ba5a:	42b2      	cmp	r2, r6
 801ba5c:	d304      	bcc.n	801ba68 <__lshift+0xa4>
 801ba5e:	1b13      	subs	r3, r2, r4
 801ba60:	3b15      	subs	r3, #21
 801ba62:	089b      	lsrs	r3, r3, #2
 801ba64:	3301      	adds	r3, #1
 801ba66:	009b      	lsls	r3, r3, #2
 801ba68:	50c8      	str	r0, [r1, r3]
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	d002      	beq.n	801ba74 <__lshift+0xb0>
 801ba6e:	9b01      	ldr	r3, [sp, #4]
 801ba70:	3302      	adds	r3, #2
 801ba72:	9300      	str	r3, [sp, #0]
 801ba74:	9b00      	ldr	r3, [sp, #0]
 801ba76:	9802      	ldr	r0, [sp, #8]
 801ba78:	3b01      	subs	r3, #1
 801ba7a:	0021      	movs	r1, r4
 801ba7c:	612b      	str	r3, [r5, #16]
 801ba7e:	f7ff fdcb 	bl	801b618 <_Bfree>
 801ba82:	0028      	movs	r0, r5
 801ba84:	b005      	add	sp, #20
 801ba86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba88:	cb01      	ldmia	r3!, {r0}
 801ba8a:	c101      	stmia	r1!, {r0}
 801ba8c:	429a      	cmp	r2, r3
 801ba8e:	d8fb      	bhi.n	801ba88 <__lshift+0xc4>
 801ba90:	e7f0      	b.n	801ba74 <__lshift+0xb0>
 801ba92:	46c0      	nop			@ (mov r8, r8)
 801ba94:	08020331 	.word	0x08020331
 801ba98:	08020342 	.word	0x08020342

0801ba9c <__mcmp>:
 801ba9c:	b530      	push	{r4, r5, lr}
 801ba9e:	690b      	ldr	r3, [r1, #16]
 801baa0:	6904      	ldr	r4, [r0, #16]
 801baa2:	0002      	movs	r2, r0
 801baa4:	1ae0      	subs	r0, r4, r3
 801baa6:	429c      	cmp	r4, r3
 801baa8:	d10f      	bne.n	801baca <__mcmp+0x2e>
 801baaa:	3214      	adds	r2, #20
 801baac:	009b      	lsls	r3, r3, #2
 801baae:	3114      	adds	r1, #20
 801bab0:	0014      	movs	r4, r2
 801bab2:	18c9      	adds	r1, r1, r3
 801bab4:	18d2      	adds	r2, r2, r3
 801bab6:	3a04      	subs	r2, #4
 801bab8:	3904      	subs	r1, #4
 801baba:	6815      	ldr	r5, [r2, #0]
 801babc:	680b      	ldr	r3, [r1, #0]
 801babe:	429d      	cmp	r5, r3
 801bac0:	d004      	beq.n	801bacc <__mcmp+0x30>
 801bac2:	2001      	movs	r0, #1
 801bac4:	429d      	cmp	r5, r3
 801bac6:	d200      	bcs.n	801baca <__mcmp+0x2e>
 801bac8:	3802      	subs	r0, #2
 801baca:	bd30      	pop	{r4, r5, pc}
 801bacc:	4294      	cmp	r4, r2
 801bace:	d3f2      	bcc.n	801bab6 <__mcmp+0x1a>
 801bad0:	e7fb      	b.n	801baca <__mcmp+0x2e>
	...

0801bad4 <__mdiff>:
 801bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bad6:	000c      	movs	r4, r1
 801bad8:	b087      	sub	sp, #28
 801bada:	9000      	str	r0, [sp, #0]
 801badc:	0011      	movs	r1, r2
 801bade:	0020      	movs	r0, r4
 801bae0:	0017      	movs	r7, r2
 801bae2:	f7ff ffdb 	bl	801ba9c <__mcmp>
 801bae6:	1e05      	subs	r5, r0, #0
 801bae8:	d110      	bne.n	801bb0c <__mdiff+0x38>
 801baea:	0001      	movs	r1, r0
 801baec:	9800      	ldr	r0, [sp, #0]
 801baee:	f7ff fd4f 	bl	801b590 <_Balloc>
 801baf2:	1e02      	subs	r2, r0, #0
 801baf4:	d104      	bne.n	801bb00 <__mdiff+0x2c>
 801baf6:	4b40      	ldr	r3, [pc, #256]	@ (801bbf8 <__mdiff+0x124>)
 801baf8:	4840      	ldr	r0, [pc, #256]	@ (801bbfc <__mdiff+0x128>)
 801bafa:	4941      	ldr	r1, [pc, #260]	@ (801bc00 <__mdiff+0x12c>)
 801bafc:	f000 fd22 	bl	801c544 <__assert_func>
 801bb00:	2301      	movs	r3, #1
 801bb02:	6145      	str	r5, [r0, #20]
 801bb04:	6103      	str	r3, [r0, #16]
 801bb06:	0010      	movs	r0, r2
 801bb08:	b007      	add	sp, #28
 801bb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb0c:	2600      	movs	r6, #0
 801bb0e:	42b0      	cmp	r0, r6
 801bb10:	da03      	bge.n	801bb1a <__mdiff+0x46>
 801bb12:	0023      	movs	r3, r4
 801bb14:	003c      	movs	r4, r7
 801bb16:	001f      	movs	r7, r3
 801bb18:	3601      	adds	r6, #1
 801bb1a:	6861      	ldr	r1, [r4, #4]
 801bb1c:	9800      	ldr	r0, [sp, #0]
 801bb1e:	f7ff fd37 	bl	801b590 <_Balloc>
 801bb22:	1e02      	subs	r2, r0, #0
 801bb24:	d103      	bne.n	801bb2e <__mdiff+0x5a>
 801bb26:	4b34      	ldr	r3, [pc, #208]	@ (801bbf8 <__mdiff+0x124>)
 801bb28:	4834      	ldr	r0, [pc, #208]	@ (801bbfc <__mdiff+0x128>)
 801bb2a:	4936      	ldr	r1, [pc, #216]	@ (801bc04 <__mdiff+0x130>)
 801bb2c:	e7e6      	b.n	801bafc <__mdiff+0x28>
 801bb2e:	6923      	ldr	r3, [r4, #16]
 801bb30:	3414      	adds	r4, #20
 801bb32:	9300      	str	r3, [sp, #0]
 801bb34:	009b      	lsls	r3, r3, #2
 801bb36:	18e3      	adds	r3, r4, r3
 801bb38:	0021      	movs	r1, r4
 801bb3a:	9401      	str	r4, [sp, #4]
 801bb3c:	003c      	movs	r4, r7
 801bb3e:	9302      	str	r3, [sp, #8]
 801bb40:	693b      	ldr	r3, [r7, #16]
 801bb42:	3414      	adds	r4, #20
 801bb44:	009b      	lsls	r3, r3, #2
 801bb46:	18e3      	adds	r3, r4, r3
 801bb48:	9303      	str	r3, [sp, #12]
 801bb4a:	0003      	movs	r3, r0
 801bb4c:	60c6      	str	r6, [r0, #12]
 801bb4e:	468c      	mov	ip, r1
 801bb50:	2000      	movs	r0, #0
 801bb52:	3314      	adds	r3, #20
 801bb54:	9304      	str	r3, [sp, #16]
 801bb56:	9305      	str	r3, [sp, #20]
 801bb58:	4663      	mov	r3, ip
 801bb5a:	cb20      	ldmia	r3!, {r5}
 801bb5c:	b2a9      	uxth	r1, r5
 801bb5e:	000e      	movs	r6, r1
 801bb60:	469c      	mov	ip, r3
 801bb62:	cc08      	ldmia	r4!, {r3}
 801bb64:	0c2d      	lsrs	r5, r5, #16
 801bb66:	b299      	uxth	r1, r3
 801bb68:	1a71      	subs	r1, r6, r1
 801bb6a:	1809      	adds	r1, r1, r0
 801bb6c:	0c1b      	lsrs	r3, r3, #16
 801bb6e:	1408      	asrs	r0, r1, #16
 801bb70:	1aeb      	subs	r3, r5, r3
 801bb72:	181b      	adds	r3, r3, r0
 801bb74:	1418      	asrs	r0, r3, #16
 801bb76:	b289      	uxth	r1, r1
 801bb78:	041b      	lsls	r3, r3, #16
 801bb7a:	4319      	orrs	r1, r3
 801bb7c:	9b05      	ldr	r3, [sp, #20]
 801bb7e:	c302      	stmia	r3!, {r1}
 801bb80:	9305      	str	r3, [sp, #20]
 801bb82:	9b03      	ldr	r3, [sp, #12]
 801bb84:	42a3      	cmp	r3, r4
 801bb86:	d8e7      	bhi.n	801bb58 <__mdiff+0x84>
 801bb88:	0039      	movs	r1, r7
 801bb8a:	9c03      	ldr	r4, [sp, #12]
 801bb8c:	3115      	adds	r1, #21
 801bb8e:	2304      	movs	r3, #4
 801bb90:	428c      	cmp	r4, r1
 801bb92:	d304      	bcc.n	801bb9e <__mdiff+0xca>
 801bb94:	1be3      	subs	r3, r4, r7
 801bb96:	3b15      	subs	r3, #21
 801bb98:	089b      	lsrs	r3, r3, #2
 801bb9a:	3301      	adds	r3, #1
 801bb9c:	009b      	lsls	r3, r3, #2
 801bb9e:	9901      	ldr	r1, [sp, #4]
 801bba0:	18cd      	adds	r5, r1, r3
 801bba2:	9904      	ldr	r1, [sp, #16]
 801bba4:	002e      	movs	r6, r5
 801bba6:	18cb      	adds	r3, r1, r3
 801bba8:	001f      	movs	r7, r3
 801bbaa:	9902      	ldr	r1, [sp, #8]
 801bbac:	428e      	cmp	r6, r1
 801bbae:	d311      	bcc.n	801bbd4 <__mdiff+0x100>
 801bbb0:	9c02      	ldr	r4, [sp, #8]
 801bbb2:	1ee9      	subs	r1, r5, #3
 801bbb4:	2000      	movs	r0, #0
 801bbb6:	428c      	cmp	r4, r1
 801bbb8:	d304      	bcc.n	801bbc4 <__mdiff+0xf0>
 801bbba:	0021      	movs	r1, r4
 801bbbc:	3103      	adds	r1, #3
 801bbbe:	1b49      	subs	r1, r1, r5
 801bbc0:	0889      	lsrs	r1, r1, #2
 801bbc2:	0088      	lsls	r0, r1, #2
 801bbc4:	181b      	adds	r3, r3, r0
 801bbc6:	3b04      	subs	r3, #4
 801bbc8:	6819      	ldr	r1, [r3, #0]
 801bbca:	2900      	cmp	r1, #0
 801bbcc:	d010      	beq.n	801bbf0 <__mdiff+0x11c>
 801bbce:	9b00      	ldr	r3, [sp, #0]
 801bbd0:	6113      	str	r3, [r2, #16]
 801bbd2:	e798      	b.n	801bb06 <__mdiff+0x32>
 801bbd4:	4684      	mov	ip, r0
 801bbd6:	ce02      	ldmia	r6!, {r1}
 801bbd8:	b288      	uxth	r0, r1
 801bbda:	4460      	add	r0, ip
 801bbdc:	1400      	asrs	r0, r0, #16
 801bbde:	0c0c      	lsrs	r4, r1, #16
 801bbe0:	1904      	adds	r4, r0, r4
 801bbe2:	4461      	add	r1, ip
 801bbe4:	1420      	asrs	r0, r4, #16
 801bbe6:	b289      	uxth	r1, r1
 801bbe8:	0424      	lsls	r4, r4, #16
 801bbea:	4321      	orrs	r1, r4
 801bbec:	c702      	stmia	r7!, {r1}
 801bbee:	e7dc      	b.n	801bbaa <__mdiff+0xd6>
 801bbf0:	9900      	ldr	r1, [sp, #0]
 801bbf2:	3901      	subs	r1, #1
 801bbf4:	9100      	str	r1, [sp, #0]
 801bbf6:	e7e6      	b.n	801bbc6 <__mdiff+0xf2>
 801bbf8:	08020331 	.word	0x08020331
 801bbfc:	08020342 	.word	0x08020342
 801bc00:	00000237 	.word	0x00000237
 801bc04:	00000245 	.word	0x00000245

0801bc08 <__d2b>:
 801bc08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc0a:	2101      	movs	r1, #1
 801bc0c:	0016      	movs	r6, r2
 801bc0e:	001f      	movs	r7, r3
 801bc10:	f7ff fcbe 	bl	801b590 <_Balloc>
 801bc14:	1e04      	subs	r4, r0, #0
 801bc16:	d105      	bne.n	801bc24 <__d2b+0x1c>
 801bc18:	0022      	movs	r2, r4
 801bc1a:	4b25      	ldr	r3, [pc, #148]	@ (801bcb0 <__d2b+0xa8>)
 801bc1c:	4825      	ldr	r0, [pc, #148]	@ (801bcb4 <__d2b+0xac>)
 801bc1e:	4926      	ldr	r1, [pc, #152]	@ (801bcb8 <__d2b+0xb0>)
 801bc20:	f000 fc90 	bl	801c544 <__assert_func>
 801bc24:	033b      	lsls	r3, r7, #12
 801bc26:	007d      	lsls	r5, r7, #1
 801bc28:	0b1b      	lsrs	r3, r3, #12
 801bc2a:	0d6d      	lsrs	r5, r5, #21
 801bc2c:	d002      	beq.n	801bc34 <__d2b+0x2c>
 801bc2e:	2280      	movs	r2, #128	@ 0x80
 801bc30:	0352      	lsls	r2, r2, #13
 801bc32:	4313      	orrs	r3, r2
 801bc34:	9301      	str	r3, [sp, #4]
 801bc36:	2e00      	cmp	r6, #0
 801bc38:	d025      	beq.n	801bc86 <__d2b+0x7e>
 801bc3a:	4668      	mov	r0, sp
 801bc3c:	9600      	str	r6, [sp, #0]
 801bc3e:	f7ff fd74 	bl	801b72a <__lo0bits>
 801bc42:	9b01      	ldr	r3, [sp, #4]
 801bc44:	9900      	ldr	r1, [sp, #0]
 801bc46:	2800      	cmp	r0, #0
 801bc48:	d01b      	beq.n	801bc82 <__d2b+0x7a>
 801bc4a:	2220      	movs	r2, #32
 801bc4c:	001e      	movs	r6, r3
 801bc4e:	1a12      	subs	r2, r2, r0
 801bc50:	4096      	lsls	r6, r2
 801bc52:	0032      	movs	r2, r6
 801bc54:	40c3      	lsrs	r3, r0
 801bc56:	430a      	orrs	r2, r1
 801bc58:	6162      	str	r2, [r4, #20]
 801bc5a:	9301      	str	r3, [sp, #4]
 801bc5c:	9e01      	ldr	r6, [sp, #4]
 801bc5e:	61a6      	str	r6, [r4, #24]
 801bc60:	1e73      	subs	r3, r6, #1
 801bc62:	419e      	sbcs	r6, r3
 801bc64:	3601      	adds	r6, #1
 801bc66:	6126      	str	r6, [r4, #16]
 801bc68:	2d00      	cmp	r5, #0
 801bc6a:	d014      	beq.n	801bc96 <__d2b+0x8e>
 801bc6c:	2635      	movs	r6, #53	@ 0x35
 801bc6e:	4b13      	ldr	r3, [pc, #76]	@ (801bcbc <__d2b+0xb4>)
 801bc70:	18ed      	adds	r5, r5, r3
 801bc72:	9b08      	ldr	r3, [sp, #32]
 801bc74:	182d      	adds	r5, r5, r0
 801bc76:	601d      	str	r5, [r3, #0]
 801bc78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc7a:	1a36      	subs	r6, r6, r0
 801bc7c:	601e      	str	r6, [r3, #0]
 801bc7e:	0020      	movs	r0, r4
 801bc80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bc82:	6161      	str	r1, [r4, #20]
 801bc84:	e7ea      	b.n	801bc5c <__d2b+0x54>
 801bc86:	a801      	add	r0, sp, #4
 801bc88:	f7ff fd4f 	bl	801b72a <__lo0bits>
 801bc8c:	9b01      	ldr	r3, [sp, #4]
 801bc8e:	2601      	movs	r6, #1
 801bc90:	6163      	str	r3, [r4, #20]
 801bc92:	3020      	adds	r0, #32
 801bc94:	e7e7      	b.n	801bc66 <__d2b+0x5e>
 801bc96:	4b0a      	ldr	r3, [pc, #40]	@ (801bcc0 <__d2b+0xb8>)
 801bc98:	18c0      	adds	r0, r0, r3
 801bc9a:	9b08      	ldr	r3, [sp, #32]
 801bc9c:	6018      	str	r0, [r3, #0]
 801bc9e:	4b09      	ldr	r3, [pc, #36]	@ (801bcc4 <__d2b+0xbc>)
 801bca0:	18f3      	adds	r3, r6, r3
 801bca2:	009b      	lsls	r3, r3, #2
 801bca4:	18e3      	adds	r3, r4, r3
 801bca6:	6958      	ldr	r0, [r3, #20]
 801bca8:	f7ff fd1e 	bl	801b6e8 <__hi0bits>
 801bcac:	0176      	lsls	r6, r6, #5
 801bcae:	e7e3      	b.n	801bc78 <__d2b+0x70>
 801bcb0:	08020331 	.word	0x08020331
 801bcb4:	08020342 	.word	0x08020342
 801bcb8:	0000030f 	.word	0x0000030f
 801bcbc:	fffffbcd 	.word	0xfffffbcd
 801bcc0:	fffffbce 	.word	0xfffffbce
 801bcc4:	3fffffff 	.word	0x3fffffff

0801bcc8 <__ssputs_r>:
 801bcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcca:	688e      	ldr	r6, [r1, #8]
 801bccc:	b085      	sub	sp, #20
 801bcce:	001f      	movs	r7, r3
 801bcd0:	000c      	movs	r4, r1
 801bcd2:	680b      	ldr	r3, [r1, #0]
 801bcd4:	9002      	str	r0, [sp, #8]
 801bcd6:	9203      	str	r2, [sp, #12]
 801bcd8:	42be      	cmp	r6, r7
 801bcda:	d830      	bhi.n	801bd3e <__ssputs_r+0x76>
 801bcdc:	210c      	movs	r1, #12
 801bcde:	5e62      	ldrsh	r2, [r4, r1]
 801bce0:	2190      	movs	r1, #144	@ 0x90
 801bce2:	00c9      	lsls	r1, r1, #3
 801bce4:	420a      	tst	r2, r1
 801bce6:	d028      	beq.n	801bd3a <__ssputs_r+0x72>
 801bce8:	2003      	movs	r0, #3
 801bcea:	6921      	ldr	r1, [r4, #16]
 801bcec:	1a5b      	subs	r3, r3, r1
 801bcee:	9301      	str	r3, [sp, #4]
 801bcf0:	6963      	ldr	r3, [r4, #20]
 801bcf2:	4343      	muls	r3, r0
 801bcf4:	9801      	ldr	r0, [sp, #4]
 801bcf6:	0fdd      	lsrs	r5, r3, #31
 801bcf8:	18ed      	adds	r5, r5, r3
 801bcfa:	1c7b      	adds	r3, r7, #1
 801bcfc:	181b      	adds	r3, r3, r0
 801bcfe:	106d      	asrs	r5, r5, #1
 801bd00:	42ab      	cmp	r3, r5
 801bd02:	d900      	bls.n	801bd06 <__ssputs_r+0x3e>
 801bd04:	001d      	movs	r5, r3
 801bd06:	0552      	lsls	r2, r2, #21
 801bd08:	d528      	bpl.n	801bd5c <__ssputs_r+0x94>
 801bd0a:	0029      	movs	r1, r5
 801bd0c:	9802      	ldr	r0, [sp, #8]
 801bd0e:	f7ff fbaf 	bl	801b470 <_malloc_r>
 801bd12:	1e06      	subs	r6, r0, #0
 801bd14:	d02c      	beq.n	801bd70 <__ssputs_r+0xa8>
 801bd16:	9a01      	ldr	r2, [sp, #4]
 801bd18:	6921      	ldr	r1, [r4, #16]
 801bd1a:	f7fe fcb5 	bl	801a688 <memcpy>
 801bd1e:	89a2      	ldrh	r2, [r4, #12]
 801bd20:	4b18      	ldr	r3, [pc, #96]	@ (801bd84 <__ssputs_r+0xbc>)
 801bd22:	401a      	ands	r2, r3
 801bd24:	2380      	movs	r3, #128	@ 0x80
 801bd26:	4313      	orrs	r3, r2
 801bd28:	81a3      	strh	r3, [r4, #12]
 801bd2a:	9b01      	ldr	r3, [sp, #4]
 801bd2c:	6126      	str	r6, [r4, #16]
 801bd2e:	18f6      	adds	r6, r6, r3
 801bd30:	6026      	str	r6, [r4, #0]
 801bd32:	003e      	movs	r6, r7
 801bd34:	6165      	str	r5, [r4, #20]
 801bd36:	1aed      	subs	r5, r5, r3
 801bd38:	60a5      	str	r5, [r4, #8]
 801bd3a:	42be      	cmp	r6, r7
 801bd3c:	d900      	bls.n	801bd40 <__ssputs_r+0x78>
 801bd3e:	003e      	movs	r6, r7
 801bd40:	0032      	movs	r2, r6
 801bd42:	9903      	ldr	r1, [sp, #12]
 801bd44:	6820      	ldr	r0, [r4, #0]
 801bd46:	f000 fbb4 	bl	801c4b2 <memmove>
 801bd4a:	2000      	movs	r0, #0
 801bd4c:	68a3      	ldr	r3, [r4, #8]
 801bd4e:	1b9b      	subs	r3, r3, r6
 801bd50:	60a3      	str	r3, [r4, #8]
 801bd52:	6823      	ldr	r3, [r4, #0]
 801bd54:	199b      	adds	r3, r3, r6
 801bd56:	6023      	str	r3, [r4, #0]
 801bd58:	b005      	add	sp, #20
 801bd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd5c:	002a      	movs	r2, r5
 801bd5e:	9802      	ldr	r0, [sp, #8]
 801bd60:	f000 fc4d 	bl	801c5fe <_realloc_r>
 801bd64:	1e06      	subs	r6, r0, #0
 801bd66:	d1e0      	bne.n	801bd2a <__ssputs_r+0x62>
 801bd68:	6921      	ldr	r1, [r4, #16]
 801bd6a:	9802      	ldr	r0, [sp, #8]
 801bd6c:	f7ff fb0a 	bl	801b384 <_free_r>
 801bd70:	230c      	movs	r3, #12
 801bd72:	2001      	movs	r0, #1
 801bd74:	9a02      	ldr	r2, [sp, #8]
 801bd76:	4240      	negs	r0, r0
 801bd78:	6013      	str	r3, [r2, #0]
 801bd7a:	89a2      	ldrh	r2, [r4, #12]
 801bd7c:	3334      	adds	r3, #52	@ 0x34
 801bd7e:	4313      	orrs	r3, r2
 801bd80:	81a3      	strh	r3, [r4, #12]
 801bd82:	e7e9      	b.n	801bd58 <__ssputs_r+0x90>
 801bd84:	fffffb7f 	.word	0xfffffb7f

0801bd88 <_svfiprintf_r>:
 801bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd8a:	b0a1      	sub	sp, #132	@ 0x84
 801bd8c:	9003      	str	r0, [sp, #12]
 801bd8e:	001d      	movs	r5, r3
 801bd90:	898b      	ldrh	r3, [r1, #12]
 801bd92:	000f      	movs	r7, r1
 801bd94:	0016      	movs	r6, r2
 801bd96:	061b      	lsls	r3, r3, #24
 801bd98:	d511      	bpl.n	801bdbe <_svfiprintf_r+0x36>
 801bd9a:	690b      	ldr	r3, [r1, #16]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d10e      	bne.n	801bdbe <_svfiprintf_r+0x36>
 801bda0:	2140      	movs	r1, #64	@ 0x40
 801bda2:	f7ff fb65 	bl	801b470 <_malloc_r>
 801bda6:	6038      	str	r0, [r7, #0]
 801bda8:	6138      	str	r0, [r7, #16]
 801bdaa:	2800      	cmp	r0, #0
 801bdac:	d105      	bne.n	801bdba <_svfiprintf_r+0x32>
 801bdae:	230c      	movs	r3, #12
 801bdb0:	9a03      	ldr	r2, [sp, #12]
 801bdb2:	6013      	str	r3, [r2, #0]
 801bdb4:	2001      	movs	r0, #1
 801bdb6:	4240      	negs	r0, r0
 801bdb8:	e0cf      	b.n	801bf5a <_svfiprintf_r+0x1d2>
 801bdba:	2340      	movs	r3, #64	@ 0x40
 801bdbc:	617b      	str	r3, [r7, #20]
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	ac08      	add	r4, sp, #32
 801bdc2:	6163      	str	r3, [r4, #20]
 801bdc4:	3320      	adds	r3, #32
 801bdc6:	7663      	strb	r3, [r4, #25]
 801bdc8:	3310      	adds	r3, #16
 801bdca:	76a3      	strb	r3, [r4, #26]
 801bdcc:	9507      	str	r5, [sp, #28]
 801bdce:	0035      	movs	r5, r6
 801bdd0:	782b      	ldrb	r3, [r5, #0]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d001      	beq.n	801bdda <_svfiprintf_r+0x52>
 801bdd6:	2b25      	cmp	r3, #37	@ 0x25
 801bdd8:	d148      	bne.n	801be6c <_svfiprintf_r+0xe4>
 801bdda:	1bab      	subs	r3, r5, r6
 801bddc:	9305      	str	r3, [sp, #20]
 801bdde:	42b5      	cmp	r5, r6
 801bde0:	d00b      	beq.n	801bdfa <_svfiprintf_r+0x72>
 801bde2:	0032      	movs	r2, r6
 801bde4:	0039      	movs	r1, r7
 801bde6:	9803      	ldr	r0, [sp, #12]
 801bde8:	f7ff ff6e 	bl	801bcc8 <__ssputs_r>
 801bdec:	3001      	adds	r0, #1
 801bdee:	d100      	bne.n	801bdf2 <_svfiprintf_r+0x6a>
 801bdf0:	e0ae      	b.n	801bf50 <_svfiprintf_r+0x1c8>
 801bdf2:	6963      	ldr	r3, [r4, #20]
 801bdf4:	9a05      	ldr	r2, [sp, #20]
 801bdf6:	189b      	adds	r3, r3, r2
 801bdf8:	6163      	str	r3, [r4, #20]
 801bdfa:	782b      	ldrb	r3, [r5, #0]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d100      	bne.n	801be02 <_svfiprintf_r+0x7a>
 801be00:	e0a6      	b.n	801bf50 <_svfiprintf_r+0x1c8>
 801be02:	2201      	movs	r2, #1
 801be04:	2300      	movs	r3, #0
 801be06:	4252      	negs	r2, r2
 801be08:	6062      	str	r2, [r4, #4]
 801be0a:	a904      	add	r1, sp, #16
 801be0c:	3254      	adds	r2, #84	@ 0x54
 801be0e:	1852      	adds	r2, r2, r1
 801be10:	1c6e      	adds	r6, r5, #1
 801be12:	6023      	str	r3, [r4, #0]
 801be14:	60e3      	str	r3, [r4, #12]
 801be16:	60a3      	str	r3, [r4, #8]
 801be18:	7013      	strb	r3, [r2, #0]
 801be1a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801be1c:	4b54      	ldr	r3, [pc, #336]	@ (801bf70 <_svfiprintf_r+0x1e8>)
 801be1e:	2205      	movs	r2, #5
 801be20:	0018      	movs	r0, r3
 801be22:	7831      	ldrb	r1, [r6, #0]
 801be24:	9305      	str	r3, [sp, #20]
 801be26:	f7fe fc24 	bl	801a672 <memchr>
 801be2a:	1c75      	adds	r5, r6, #1
 801be2c:	2800      	cmp	r0, #0
 801be2e:	d11f      	bne.n	801be70 <_svfiprintf_r+0xe8>
 801be30:	6822      	ldr	r2, [r4, #0]
 801be32:	06d3      	lsls	r3, r2, #27
 801be34:	d504      	bpl.n	801be40 <_svfiprintf_r+0xb8>
 801be36:	2353      	movs	r3, #83	@ 0x53
 801be38:	a904      	add	r1, sp, #16
 801be3a:	185b      	adds	r3, r3, r1
 801be3c:	2120      	movs	r1, #32
 801be3e:	7019      	strb	r1, [r3, #0]
 801be40:	0713      	lsls	r3, r2, #28
 801be42:	d504      	bpl.n	801be4e <_svfiprintf_r+0xc6>
 801be44:	2353      	movs	r3, #83	@ 0x53
 801be46:	a904      	add	r1, sp, #16
 801be48:	185b      	adds	r3, r3, r1
 801be4a:	212b      	movs	r1, #43	@ 0x2b
 801be4c:	7019      	strb	r1, [r3, #0]
 801be4e:	7833      	ldrb	r3, [r6, #0]
 801be50:	2b2a      	cmp	r3, #42	@ 0x2a
 801be52:	d016      	beq.n	801be82 <_svfiprintf_r+0xfa>
 801be54:	0035      	movs	r5, r6
 801be56:	2100      	movs	r1, #0
 801be58:	200a      	movs	r0, #10
 801be5a:	68e3      	ldr	r3, [r4, #12]
 801be5c:	782a      	ldrb	r2, [r5, #0]
 801be5e:	1c6e      	adds	r6, r5, #1
 801be60:	3a30      	subs	r2, #48	@ 0x30
 801be62:	2a09      	cmp	r2, #9
 801be64:	d950      	bls.n	801bf08 <_svfiprintf_r+0x180>
 801be66:	2900      	cmp	r1, #0
 801be68:	d111      	bne.n	801be8e <_svfiprintf_r+0x106>
 801be6a:	e017      	b.n	801be9c <_svfiprintf_r+0x114>
 801be6c:	3501      	adds	r5, #1
 801be6e:	e7af      	b.n	801bdd0 <_svfiprintf_r+0x48>
 801be70:	9b05      	ldr	r3, [sp, #20]
 801be72:	6822      	ldr	r2, [r4, #0]
 801be74:	1ac0      	subs	r0, r0, r3
 801be76:	2301      	movs	r3, #1
 801be78:	4083      	lsls	r3, r0
 801be7a:	4313      	orrs	r3, r2
 801be7c:	002e      	movs	r6, r5
 801be7e:	6023      	str	r3, [r4, #0]
 801be80:	e7cc      	b.n	801be1c <_svfiprintf_r+0x94>
 801be82:	9b07      	ldr	r3, [sp, #28]
 801be84:	1d19      	adds	r1, r3, #4
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	9107      	str	r1, [sp, #28]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	db01      	blt.n	801be92 <_svfiprintf_r+0x10a>
 801be8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be90:	e004      	b.n	801be9c <_svfiprintf_r+0x114>
 801be92:	425b      	negs	r3, r3
 801be94:	60e3      	str	r3, [r4, #12]
 801be96:	2302      	movs	r3, #2
 801be98:	4313      	orrs	r3, r2
 801be9a:	6023      	str	r3, [r4, #0]
 801be9c:	782b      	ldrb	r3, [r5, #0]
 801be9e:	2b2e      	cmp	r3, #46	@ 0x2e
 801bea0:	d10c      	bne.n	801bebc <_svfiprintf_r+0x134>
 801bea2:	786b      	ldrb	r3, [r5, #1]
 801bea4:	2b2a      	cmp	r3, #42	@ 0x2a
 801bea6:	d134      	bne.n	801bf12 <_svfiprintf_r+0x18a>
 801bea8:	9b07      	ldr	r3, [sp, #28]
 801beaa:	3502      	adds	r5, #2
 801beac:	1d1a      	adds	r2, r3, #4
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	9207      	str	r2, [sp, #28]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	da01      	bge.n	801beba <_svfiprintf_r+0x132>
 801beb6:	2301      	movs	r3, #1
 801beb8:	425b      	negs	r3, r3
 801beba:	9309      	str	r3, [sp, #36]	@ 0x24
 801bebc:	4e2d      	ldr	r6, [pc, #180]	@ (801bf74 <_svfiprintf_r+0x1ec>)
 801bebe:	2203      	movs	r2, #3
 801bec0:	0030      	movs	r0, r6
 801bec2:	7829      	ldrb	r1, [r5, #0]
 801bec4:	f7fe fbd5 	bl	801a672 <memchr>
 801bec8:	2800      	cmp	r0, #0
 801beca:	d006      	beq.n	801beda <_svfiprintf_r+0x152>
 801becc:	2340      	movs	r3, #64	@ 0x40
 801bece:	1b80      	subs	r0, r0, r6
 801bed0:	4083      	lsls	r3, r0
 801bed2:	6822      	ldr	r2, [r4, #0]
 801bed4:	3501      	adds	r5, #1
 801bed6:	4313      	orrs	r3, r2
 801bed8:	6023      	str	r3, [r4, #0]
 801beda:	7829      	ldrb	r1, [r5, #0]
 801bedc:	2206      	movs	r2, #6
 801bede:	4826      	ldr	r0, [pc, #152]	@ (801bf78 <_svfiprintf_r+0x1f0>)
 801bee0:	1c6e      	adds	r6, r5, #1
 801bee2:	7621      	strb	r1, [r4, #24]
 801bee4:	f7fe fbc5 	bl	801a672 <memchr>
 801bee8:	2800      	cmp	r0, #0
 801beea:	d038      	beq.n	801bf5e <_svfiprintf_r+0x1d6>
 801beec:	4b23      	ldr	r3, [pc, #140]	@ (801bf7c <_svfiprintf_r+0x1f4>)
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d122      	bne.n	801bf38 <_svfiprintf_r+0x1b0>
 801bef2:	2207      	movs	r2, #7
 801bef4:	9b07      	ldr	r3, [sp, #28]
 801bef6:	3307      	adds	r3, #7
 801bef8:	4393      	bics	r3, r2
 801befa:	3308      	adds	r3, #8
 801befc:	9307      	str	r3, [sp, #28]
 801befe:	6963      	ldr	r3, [r4, #20]
 801bf00:	9a04      	ldr	r2, [sp, #16]
 801bf02:	189b      	adds	r3, r3, r2
 801bf04:	6163      	str	r3, [r4, #20]
 801bf06:	e762      	b.n	801bdce <_svfiprintf_r+0x46>
 801bf08:	4343      	muls	r3, r0
 801bf0a:	0035      	movs	r5, r6
 801bf0c:	2101      	movs	r1, #1
 801bf0e:	189b      	adds	r3, r3, r2
 801bf10:	e7a4      	b.n	801be5c <_svfiprintf_r+0xd4>
 801bf12:	2300      	movs	r3, #0
 801bf14:	200a      	movs	r0, #10
 801bf16:	0019      	movs	r1, r3
 801bf18:	3501      	adds	r5, #1
 801bf1a:	6063      	str	r3, [r4, #4]
 801bf1c:	782a      	ldrb	r2, [r5, #0]
 801bf1e:	1c6e      	adds	r6, r5, #1
 801bf20:	3a30      	subs	r2, #48	@ 0x30
 801bf22:	2a09      	cmp	r2, #9
 801bf24:	d903      	bls.n	801bf2e <_svfiprintf_r+0x1a6>
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d0c8      	beq.n	801bebc <_svfiprintf_r+0x134>
 801bf2a:	9109      	str	r1, [sp, #36]	@ 0x24
 801bf2c:	e7c6      	b.n	801bebc <_svfiprintf_r+0x134>
 801bf2e:	4341      	muls	r1, r0
 801bf30:	0035      	movs	r5, r6
 801bf32:	2301      	movs	r3, #1
 801bf34:	1889      	adds	r1, r1, r2
 801bf36:	e7f1      	b.n	801bf1c <_svfiprintf_r+0x194>
 801bf38:	aa07      	add	r2, sp, #28
 801bf3a:	9200      	str	r2, [sp, #0]
 801bf3c:	0021      	movs	r1, r4
 801bf3e:	003a      	movs	r2, r7
 801bf40:	4b0f      	ldr	r3, [pc, #60]	@ (801bf80 <_svfiprintf_r+0x1f8>)
 801bf42:	9803      	ldr	r0, [sp, #12]
 801bf44:	f7fd fc7c 	bl	8019840 <_printf_float>
 801bf48:	9004      	str	r0, [sp, #16]
 801bf4a:	9b04      	ldr	r3, [sp, #16]
 801bf4c:	3301      	adds	r3, #1
 801bf4e:	d1d6      	bne.n	801befe <_svfiprintf_r+0x176>
 801bf50:	89bb      	ldrh	r3, [r7, #12]
 801bf52:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801bf54:	065b      	lsls	r3, r3, #25
 801bf56:	d500      	bpl.n	801bf5a <_svfiprintf_r+0x1d2>
 801bf58:	e72c      	b.n	801bdb4 <_svfiprintf_r+0x2c>
 801bf5a:	b021      	add	sp, #132	@ 0x84
 801bf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf5e:	aa07      	add	r2, sp, #28
 801bf60:	9200      	str	r2, [sp, #0]
 801bf62:	0021      	movs	r1, r4
 801bf64:	003a      	movs	r2, r7
 801bf66:	4b06      	ldr	r3, [pc, #24]	@ (801bf80 <_svfiprintf_r+0x1f8>)
 801bf68:	9803      	ldr	r0, [sp, #12]
 801bf6a:	f7fd ff17 	bl	8019d9c <_printf_i>
 801bf6e:	e7eb      	b.n	801bf48 <_svfiprintf_r+0x1c0>
 801bf70:	0802039b 	.word	0x0802039b
 801bf74:	080203a1 	.word	0x080203a1
 801bf78:	080203a5 	.word	0x080203a5
 801bf7c:	08019841 	.word	0x08019841
 801bf80:	0801bcc9 	.word	0x0801bcc9

0801bf84 <__sfputc_r>:
 801bf84:	6893      	ldr	r3, [r2, #8]
 801bf86:	b510      	push	{r4, lr}
 801bf88:	3b01      	subs	r3, #1
 801bf8a:	6093      	str	r3, [r2, #8]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	da04      	bge.n	801bf9a <__sfputc_r+0x16>
 801bf90:	6994      	ldr	r4, [r2, #24]
 801bf92:	42a3      	cmp	r3, r4
 801bf94:	db07      	blt.n	801bfa6 <__sfputc_r+0x22>
 801bf96:	290a      	cmp	r1, #10
 801bf98:	d005      	beq.n	801bfa6 <__sfputc_r+0x22>
 801bf9a:	6813      	ldr	r3, [r2, #0]
 801bf9c:	1c58      	adds	r0, r3, #1
 801bf9e:	6010      	str	r0, [r2, #0]
 801bfa0:	7019      	strb	r1, [r3, #0]
 801bfa2:	0008      	movs	r0, r1
 801bfa4:	bd10      	pop	{r4, pc}
 801bfa6:	f7fe f9f7 	bl	801a398 <__swbuf_r>
 801bfaa:	0001      	movs	r1, r0
 801bfac:	e7f9      	b.n	801bfa2 <__sfputc_r+0x1e>

0801bfae <__sfputs_r>:
 801bfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfb0:	0006      	movs	r6, r0
 801bfb2:	000f      	movs	r7, r1
 801bfb4:	0014      	movs	r4, r2
 801bfb6:	18d5      	adds	r5, r2, r3
 801bfb8:	42ac      	cmp	r4, r5
 801bfba:	d101      	bne.n	801bfc0 <__sfputs_r+0x12>
 801bfbc:	2000      	movs	r0, #0
 801bfbe:	e007      	b.n	801bfd0 <__sfputs_r+0x22>
 801bfc0:	7821      	ldrb	r1, [r4, #0]
 801bfc2:	003a      	movs	r2, r7
 801bfc4:	0030      	movs	r0, r6
 801bfc6:	f7ff ffdd 	bl	801bf84 <__sfputc_r>
 801bfca:	3401      	adds	r4, #1
 801bfcc:	1c43      	adds	r3, r0, #1
 801bfce:	d1f3      	bne.n	801bfb8 <__sfputs_r+0xa>
 801bfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bfd4 <_vfiprintf_r>:
 801bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfd6:	b0a1      	sub	sp, #132	@ 0x84
 801bfd8:	000f      	movs	r7, r1
 801bfda:	0015      	movs	r5, r2
 801bfdc:	001e      	movs	r6, r3
 801bfde:	9003      	str	r0, [sp, #12]
 801bfe0:	2800      	cmp	r0, #0
 801bfe2:	d004      	beq.n	801bfee <_vfiprintf_r+0x1a>
 801bfe4:	6a03      	ldr	r3, [r0, #32]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d101      	bne.n	801bfee <_vfiprintf_r+0x1a>
 801bfea:	f7fe f873 	bl	801a0d4 <__sinit>
 801bfee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bff0:	07db      	lsls	r3, r3, #31
 801bff2:	d405      	bmi.n	801c000 <_vfiprintf_r+0x2c>
 801bff4:	89bb      	ldrh	r3, [r7, #12]
 801bff6:	059b      	lsls	r3, r3, #22
 801bff8:	d402      	bmi.n	801c000 <_vfiprintf_r+0x2c>
 801bffa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801bffc:	f7fe fb2f 	bl	801a65e <__retarget_lock_acquire_recursive>
 801c000:	89bb      	ldrh	r3, [r7, #12]
 801c002:	071b      	lsls	r3, r3, #28
 801c004:	d502      	bpl.n	801c00c <_vfiprintf_r+0x38>
 801c006:	693b      	ldr	r3, [r7, #16]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d113      	bne.n	801c034 <_vfiprintf_r+0x60>
 801c00c:	0039      	movs	r1, r7
 801c00e:	9803      	ldr	r0, [sp, #12]
 801c010:	f7fe fa04 	bl	801a41c <__swsetup_r>
 801c014:	2800      	cmp	r0, #0
 801c016:	d00d      	beq.n	801c034 <_vfiprintf_r+0x60>
 801c018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c01a:	07db      	lsls	r3, r3, #31
 801c01c:	d503      	bpl.n	801c026 <_vfiprintf_r+0x52>
 801c01e:	2001      	movs	r0, #1
 801c020:	4240      	negs	r0, r0
 801c022:	b021      	add	sp, #132	@ 0x84
 801c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c026:	89bb      	ldrh	r3, [r7, #12]
 801c028:	059b      	lsls	r3, r3, #22
 801c02a:	d4f8      	bmi.n	801c01e <_vfiprintf_r+0x4a>
 801c02c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c02e:	f7fe fb17 	bl	801a660 <__retarget_lock_release_recursive>
 801c032:	e7f4      	b.n	801c01e <_vfiprintf_r+0x4a>
 801c034:	2300      	movs	r3, #0
 801c036:	ac08      	add	r4, sp, #32
 801c038:	6163      	str	r3, [r4, #20]
 801c03a:	3320      	adds	r3, #32
 801c03c:	7663      	strb	r3, [r4, #25]
 801c03e:	3310      	adds	r3, #16
 801c040:	76a3      	strb	r3, [r4, #26]
 801c042:	9607      	str	r6, [sp, #28]
 801c044:	002e      	movs	r6, r5
 801c046:	7833      	ldrb	r3, [r6, #0]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d001      	beq.n	801c050 <_vfiprintf_r+0x7c>
 801c04c:	2b25      	cmp	r3, #37	@ 0x25
 801c04e:	d148      	bne.n	801c0e2 <_vfiprintf_r+0x10e>
 801c050:	1b73      	subs	r3, r6, r5
 801c052:	9305      	str	r3, [sp, #20]
 801c054:	42ae      	cmp	r6, r5
 801c056:	d00b      	beq.n	801c070 <_vfiprintf_r+0x9c>
 801c058:	002a      	movs	r2, r5
 801c05a:	0039      	movs	r1, r7
 801c05c:	9803      	ldr	r0, [sp, #12]
 801c05e:	f7ff ffa6 	bl	801bfae <__sfputs_r>
 801c062:	3001      	adds	r0, #1
 801c064:	d100      	bne.n	801c068 <_vfiprintf_r+0x94>
 801c066:	e0ae      	b.n	801c1c6 <_vfiprintf_r+0x1f2>
 801c068:	6963      	ldr	r3, [r4, #20]
 801c06a:	9a05      	ldr	r2, [sp, #20]
 801c06c:	189b      	adds	r3, r3, r2
 801c06e:	6163      	str	r3, [r4, #20]
 801c070:	7833      	ldrb	r3, [r6, #0]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d100      	bne.n	801c078 <_vfiprintf_r+0xa4>
 801c076:	e0a6      	b.n	801c1c6 <_vfiprintf_r+0x1f2>
 801c078:	2201      	movs	r2, #1
 801c07a:	2300      	movs	r3, #0
 801c07c:	4252      	negs	r2, r2
 801c07e:	6062      	str	r2, [r4, #4]
 801c080:	a904      	add	r1, sp, #16
 801c082:	3254      	adds	r2, #84	@ 0x54
 801c084:	1852      	adds	r2, r2, r1
 801c086:	1c75      	adds	r5, r6, #1
 801c088:	6023      	str	r3, [r4, #0]
 801c08a:	60e3      	str	r3, [r4, #12]
 801c08c:	60a3      	str	r3, [r4, #8]
 801c08e:	7013      	strb	r3, [r2, #0]
 801c090:	65a3      	str	r3, [r4, #88]	@ 0x58
 801c092:	4b59      	ldr	r3, [pc, #356]	@ (801c1f8 <_vfiprintf_r+0x224>)
 801c094:	2205      	movs	r2, #5
 801c096:	0018      	movs	r0, r3
 801c098:	7829      	ldrb	r1, [r5, #0]
 801c09a:	9305      	str	r3, [sp, #20]
 801c09c:	f7fe fae9 	bl	801a672 <memchr>
 801c0a0:	1c6e      	adds	r6, r5, #1
 801c0a2:	2800      	cmp	r0, #0
 801c0a4:	d11f      	bne.n	801c0e6 <_vfiprintf_r+0x112>
 801c0a6:	6822      	ldr	r2, [r4, #0]
 801c0a8:	06d3      	lsls	r3, r2, #27
 801c0aa:	d504      	bpl.n	801c0b6 <_vfiprintf_r+0xe2>
 801c0ac:	2353      	movs	r3, #83	@ 0x53
 801c0ae:	a904      	add	r1, sp, #16
 801c0b0:	185b      	adds	r3, r3, r1
 801c0b2:	2120      	movs	r1, #32
 801c0b4:	7019      	strb	r1, [r3, #0]
 801c0b6:	0713      	lsls	r3, r2, #28
 801c0b8:	d504      	bpl.n	801c0c4 <_vfiprintf_r+0xf0>
 801c0ba:	2353      	movs	r3, #83	@ 0x53
 801c0bc:	a904      	add	r1, sp, #16
 801c0be:	185b      	adds	r3, r3, r1
 801c0c0:	212b      	movs	r1, #43	@ 0x2b
 801c0c2:	7019      	strb	r1, [r3, #0]
 801c0c4:	782b      	ldrb	r3, [r5, #0]
 801c0c6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c0c8:	d016      	beq.n	801c0f8 <_vfiprintf_r+0x124>
 801c0ca:	002e      	movs	r6, r5
 801c0cc:	2100      	movs	r1, #0
 801c0ce:	200a      	movs	r0, #10
 801c0d0:	68e3      	ldr	r3, [r4, #12]
 801c0d2:	7832      	ldrb	r2, [r6, #0]
 801c0d4:	1c75      	adds	r5, r6, #1
 801c0d6:	3a30      	subs	r2, #48	@ 0x30
 801c0d8:	2a09      	cmp	r2, #9
 801c0da:	d950      	bls.n	801c17e <_vfiprintf_r+0x1aa>
 801c0dc:	2900      	cmp	r1, #0
 801c0de:	d111      	bne.n	801c104 <_vfiprintf_r+0x130>
 801c0e0:	e017      	b.n	801c112 <_vfiprintf_r+0x13e>
 801c0e2:	3601      	adds	r6, #1
 801c0e4:	e7af      	b.n	801c046 <_vfiprintf_r+0x72>
 801c0e6:	9b05      	ldr	r3, [sp, #20]
 801c0e8:	6822      	ldr	r2, [r4, #0]
 801c0ea:	1ac0      	subs	r0, r0, r3
 801c0ec:	2301      	movs	r3, #1
 801c0ee:	4083      	lsls	r3, r0
 801c0f0:	4313      	orrs	r3, r2
 801c0f2:	0035      	movs	r5, r6
 801c0f4:	6023      	str	r3, [r4, #0]
 801c0f6:	e7cc      	b.n	801c092 <_vfiprintf_r+0xbe>
 801c0f8:	9b07      	ldr	r3, [sp, #28]
 801c0fa:	1d19      	adds	r1, r3, #4
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	9107      	str	r1, [sp, #28]
 801c100:	2b00      	cmp	r3, #0
 801c102:	db01      	blt.n	801c108 <_vfiprintf_r+0x134>
 801c104:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c106:	e004      	b.n	801c112 <_vfiprintf_r+0x13e>
 801c108:	425b      	negs	r3, r3
 801c10a:	60e3      	str	r3, [r4, #12]
 801c10c:	2302      	movs	r3, #2
 801c10e:	4313      	orrs	r3, r2
 801c110:	6023      	str	r3, [r4, #0]
 801c112:	7833      	ldrb	r3, [r6, #0]
 801c114:	2b2e      	cmp	r3, #46	@ 0x2e
 801c116:	d10c      	bne.n	801c132 <_vfiprintf_r+0x15e>
 801c118:	7873      	ldrb	r3, [r6, #1]
 801c11a:	2b2a      	cmp	r3, #42	@ 0x2a
 801c11c:	d134      	bne.n	801c188 <_vfiprintf_r+0x1b4>
 801c11e:	9b07      	ldr	r3, [sp, #28]
 801c120:	3602      	adds	r6, #2
 801c122:	1d1a      	adds	r2, r3, #4
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	9207      	str	r2, [sp, #28]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	da01      	bge.n	801c130 <_vfiprintf_r+0x15c>
 801c12c:	2301      	movs	r3, #1
 801c12e:	425b      	negs	r3, r3
 801c130:	9309      	str	r3, [sp, #36]	@ 0x24
 801c132:	4d32      	ldr	r5, [pc, #200]	@ (801c1fc <_vfiprintf_r+0x228>)
 801c134:	2203      	movs	r2, #3
 801c136:	0028      	movs	r0, r5
 801c138:	7831      	ldrb	r1, [r6, #0]
 801c13a:	f7fe fa9a 	bl	801a672 <memchr>
 801c13e:	2800      	cmp	r0, #0
 801c140:	d006      	beq.n	801c150 <_vfiprintf_r+0x17c>
 801c142:	2340      	movs	r3, #64	@ 0x40
 801c144:	1b40      	subs	r0, r0, r5
 801c146:	4083      	lsls	r3, r0
 801c148:	6822      	ldr	r2, [r4, #0]
 801c14a:	3601      	adds	r6, #1
 801c14c:	4313      	orrs	r3, r2
 801c14e:	6023      	str	r3, [r4, #0]
 801c150:	7831      	ldrb	r1, [r6, #0]
 801c152:	2206      	movs	r2, #6
 801c154:	482a      	ldr	r0, [pc, #168]	@ (801c200 <_vfiprintf_r+0x22c>)
 801c156:	1c75      	adds	r5, r6, #1
 801c158:	7621      	strb	r1, [r4, #24]
 801c15a:	f7fe fa8a 	bl	801a672 <memchr>
 801c15e:	2800      	cmp	r0, #0
 801c160:	d040      	beq.n	801c1e4 <_vfiprintf_r+0x210>
 801c162:	4b28      	ldr	r3, [pc, #160]	@ (801c204 <_vfiprintf_r+0x230>)
 801c164:	2b00      	cmp	r3, #0
 801c166:	d122      	bne.n	801c1ae <_vfiprintf_r+0x1da>
 801c168:	2207      	movs	r2, #7
 801c16a:	9b07      	ldr	r3, [sp, #28]
 801c16c:	3307      	adds	r3, #7
 801c16e:	4393      	bics	r3, r2
 801c170:	3308      	adds	r3, #8
 801c172:	9307      	str	r3, [sp, #28]
 801c174:	6963      	ldr	r3, [r4, #20]
 801c176:	9a04      	ldr	r2, [sp, #16]
 801c178:	189b      	adds	r3, r3, r2
 801c17a:	6163      	str	r3, [r4, #20]
 801c17c:	e762      	b.n	801c044 <_vfiprintf_r+0x70>
 801c17e:	4343      	muls	r3, r0
 801c180:	002e      	movs	r6, r5
 801c182:	2101      	movs	r1, #1
 801c184:	189b      	adds	r3, r3, r2
 801c186:	e7a4      	b.n	801c0d2 <_vfiprintf_r+0xfe>
 801c188:	2300      	movs	r3, #0
 801c18a:	200a      	movs	r0, #10
 801c18c:	0019      	movs	r1, r3
 801c18e:	3601      	adds	r6, #1
 801c190:	6063      	str	r3, [r4, #4]
 801c192:	7832      	ldrb	r2, [r6, #0]
 801c194:	1c75      	adds	r5, r6, #1
 801c196:	3a30      	subs	r2, #48	@ 0x30
 801c198:	2a09      	cmp	r2, #9
 801c19a:	d903      	bls.n	801c1a4 <_vfiprintf_r+0x1d0>
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d0c8      	beq.n	801c132 <_vfiprintf_r+0x15e>
 801c1a0:	9109      	str	r1, [sp, #36]	@ 0x24
 801c1a2:	e7c6      	b.n	801c132 <_vfiprintf_r+0x15e>
 801c1a4:	4341      	muls	r1, r0
 801c1a6:	002e      	movs	r6, r5
 801c1a8:	2301      	movs	r3, #1
 801c1aa:	1889      	adds	r1, r1, r2
 801c1ac:	e7f1      	b.n	801c192 <_vfiprintf_r+0x1be>
 801c1ae:	aa07      	add	r2, sp, #28
 801c1b0:	9200      	str	r2, [sp, #0]
 801c1b2:	0021      	movs	r1, r4
 801c1b4:	003a      	movs	r2, r7
 801c1b6:	4b14      	ldr	r3, [pc, #80]	@ (801c208 <_vfiprintf_r+0x234>)
 801c1b8:	9803      	ldr	r0, [sp, #12]
 801c1ba:	f7fd fb41 	bl	8019840 <_printf_float>
 801c1be:	9004      	str	r0, [sp, #16]
 801c1c0:	9b04      	ldr	r3, [sp, #16]
 801c1c2:	3301      	adds	r3, #1
 801c1c4:	d1d6      	bne.n	801c174 <_vfiprintf_r+0x1a0>
 801c1c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c1c8:	07db      	lsls	r3, r3, #31
 801c1ca:	d405      	bmi.n	801c1d8 <_vfiprintf_r+0x204>
 801c1cc:	89bb      	ldrh	r3, [r7, #12]
 801c1ce:	059b      	lsls	r3, r3, #22
 801c1d0:	d402      	bmi.n	801c1d8 <_vfiprintf_r+0x204>
 801c1d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c1d4:	f7fe fa44 	bl	801a660 <__retarget_lock_release_recursive>
 801c1d8:	89bb      	ldrh	r3, [r7, #12]
 801c1da:	065b      	lsls	r3, r3, #25
 801c1dc:	d500      	bpl.n	801c1e0 <_vfiprintf_r+0x20c>
 801c1de:	e71e      	b.n	801c01e <_vfiprintf_r+0x4a>
 801c1e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c1e2:	e71e      	b.n	801c022 <_vfiprintf_r+0x4e>
 801c1e4:	aa07      	add	r2, sp, #28
 801c1e6:	9200      	str	r2, [sp, #0]
 801c1e8:	0021      	movs	r1, r4
 801c1ea:	003a      	movs	r2, r7
 801c1ec:	4b06      	ldr	r3, [pc, #24]	@ (801c208 <_vfiprintf_r+0x234>)
 801c1ee:	9803      	ldr	r0, [sp, #12]
 801c1f0:	f7fd fdd4 	bl	8019d9c <_printf_i>
 801c1f4:	e7e3      	b.n	801c1be <_vfiprintf_r+0x1ea>
 801c1f6:	46c0      	nop			@ (mov r8, r8)
 801c1f8:	0802039b 	.word	0x0802039b
 801c1fc:	080203a1 	.word	0x080203a1
 801c200:	080203a5 	.word	0x080203a5
 801c204:	08019841 	.word	0x08019841
 801c208:	0801bfaf 	.word	0x0801bfaf

0801c20c <__sflush_r>:
 801c20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c20e:	220c      	movs	r2, #12
 801c210:	5e8b      	ldrsh	r3, [r1, r2]
 801c212:	0005      	movs	r5, r0
 801c214:	000c      	movs	r4, r1
 801c216:	071a      	lsls	r2, r3, #28
 801c218:	d456      	bmi.n	801c2c8 <__sflush_r+0xbc>
 801c21a:	684a      	ldr	r2, [r1, #4]
 801c21c:	2a00      	cmp	r2, #0
 801c21e:	dc02      	bgt.n	801c226 <__sflush_r+0x1a>
 801c220:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801c222:	2a00      	cmp	r2, #0
 801c224:	dd4e      	ble.n	801c2c4 <__sflush_r+0xb8>
 801c226:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801c228:	2f00      	cmp	r7, #0
 801c22a:	d04b      	beq.n	801c2c4 <__sflush_r+0xb8>
 801c22c:	2200      	movs	r2, #0
 801c22e:	2080      	movs	r0, #128	@ 0x80
 801c230:	682e      	ldr	r6, [r5, #0]
 801c232:	602a      	str	r2, [r5, #0]
 801c234:	001a      	movs	r2, r3
 801c236:	0140      	lsls	r0, r0, #5
 801c238:	6a21      	ldr	r1, [r4, #32]
 801c23a:	4002      	ands	r2, r0
 801c23c:	4203      	tst	r3, r0
 801c23e:	d033      	beq.n	801c2a8 <__sflush_r+0x9c>
 801c240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c242:	89a3      	ldrh	r3, [r4, #12]
 801c244:	075b      	lsls	r3, r3, #29
 801c246:	d506      	bpl.n	801c256 <__sflush_r+0x4a>
 801c248:	6863      	ldr	r3, [r4, #4]
 801c24a:	1ad2      	subs	r2, r2, r3
 801c24c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d001      	beq.n	801c256 <__sflush_r+0x4a>
 801c252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c254:	1ad2      	subs	r2, r2, r3
 801c256:	2300      	movs	r3, #0
 801c258:	0028      	movs	r0, r5
 801c25a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801c25c:	6a21      	ldr	r1, [r4, #32]
 801c25e:	47b8      	blx	r7
 801c260:	89a2      	ldrh	r2, [r4, #12]
 801c262:	1c43      	adds	r3, r0, #1
 801c264:	d106      	bne.n	801c274 <__sflush_r+0x68>
 801c266:	6829      	ldr	r1, [r5, #0]
 801c268:	291d      	cmp	r1, #29
 801c26a:	d846      	bhi.n	801c2fa <__sflush_r+0xee>
 801c26c:	4b29      	ldr	r3, [pc, #164]	@ (801c314 <__sflush_r+0x108>)
 801c26e:	40cb      	lsrs	r3, r1
 801c270:	07db      	lsls	r3, r3, #31
 801c272:	d542      	bpl.n	801c2fa <__sflush_r+0xee>
 801c274:	2300      	movs	r3, #0
 801c276:	6063      	str	r3, [r4, #4]
 801c278:	6923      	ldr	r3, [r4, #16]
 801c27a:	6023      	str	r3, [r4, #0]
 801c27c:	04d2      	lsls	r2, r2, #19
 801c27e:	d505      	bpl.n	801c28c <__sflush_r+0x80>
 801c280:	1c43      	adds	r3, r0, #1
 801c282:	d102      	bne.n	801c28a <__sflush_r+0x7e>
 801c284:	682b      	ldr	r3, [r5, #0]
 801c286:	2b00      	cmp	r3, #0
 801c288:	d100      	bne.n	801c28c <__sflush_r+0x80>
 801c28a:	6560      	str	r0, [r4, #84]	@ 0x54
 801c28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c28e:	602e      	str	r6, [r5, #0]
 801c290:	2900      	cmp	r1, #0
 801c292:	d017      	beq.n	801c2c4 <__sflush_r+0xb8>
 801c294:	0023      	movs	r3, r4
 801c296:	3344      	adds	r3, #68	@ 0x44
 801c298:	4299      	cmp	r1, r3
 801c29a:	d002      	beq.n	801c2a2 <__sflush_r+0x96>
 801c29c:	0028      	movs	r0, r5
 801c29e:	f7ff f871 	bl	801b384 <_free_r>
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	6363      	str	r3, [r4, #52]	@ 0x34
 801c2a6:	e00d      	b.n	801c2c4 <__sflush_r+0xb8>
 801c2a8:	2301      	movs	r3, #1
 801c2aa:	0028      	movs	r0, r5
 801c2ac:	47b8      	blx	r7
 801c2ae:	0002      	movs	r2, r0
 801c2b0:	1c43      	adds	r3, r0, #1
 801c2b2:	d1c6      	bne.n	801c242 <__sflush_r+0x36>
 801c2b4:	682b      	ldr	r3, [r5, #0]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d0c3      	beq.n	801c242 <__sflush_r+0x36>
 801c2ba:	2b1d      	cmp	r3, #29
 801c2bc:	d001      	beq.n	801c2c2 <__sflush_r+0xb6>
 801c2be:	2b16      	cmp	r3, #22
 801c2c0:	d11a      	bne.n	801c2f8 <__sflush_r+0xec>
 801c2c2:	602e      	str	r6, [r5, #0]
 801c2c4:	2000      	movs	r0, #0
 801c2c6:	e01e      	b.n	801c306 <__sflush_r+0xfa>
 801c2c8:	690e      	ldr	r6, [r1, #16]
 801c2ca:	2e00      	cmp	r6, #0
 801c2cc:	d0fa      	beq.n	801c2c4 <__sflush_r+0xb8>
 801c2ce:	680f      	ldr	r7, [r1, #0]
 801c2d0:	600e      	str	r6, [r1, #0]
 801c2d2:	1bba      	subs	r2, r7, r6
 801c2d4:	9201      	str	r2, [sp, #4]
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	079b      	lsls	r3, r3, #30
 801c2da:	d100      	bne.n	801c2de <__sflush_r+0xd2>
 801c2dc:	694a      	ldr	r2, [r1, #20]
 801c2de:	60a2      	str	r2, [r4, #8]
 801c2e0:	9b01      	ldr	r3, [sp, #4]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	ddee      	ble.n	801c2c4 <__sflush_r+0xb8>
 801c2e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c2e8:	0032      	movs	r2, r6
 801c2ea:	001f      	movs	r7, r3
 801c2ec:	0028      	movs	r0, r5
 801c2ee:	9b01      	ldr	r3, [sp, #4]
 801c2f0:	6a21      	ldr	r1, [r4, #32]
 801c2f2:	47b8      	blx	r7
 801c2f4:	2800      	cmp	r0, #0
 801c2f6:	dc07      	bgt.n	801c308 <__sflush_r+0xfc>
 801c2f8:	89a2      	ldrh	r2, [r4, #12]
 801c2fa:	2340      	movs	r3, #64	@ 0x40
 801c2fc:	2001      	movs	r0, #1
 801c2fe:	4313      	orrs	r3, r2
 801c300:	b21b      	sxth	r3, r3
 801c302:	81a3      	strh	r3, [r4, #12]
 801c304:	4240      	negs	r0, r0
 801c306:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c308:	9b01      	ldr	r3, [sp, #4]
 801c30a:	1836      	adds	r6, r6, r0
 801c30c:	1a1b      	subs	r3, r3, r0
 801c30e:	9301      	str	r3, [sp, #4]
 801c310:	e7e6      	b.n	801c2e0 <__sflush_r+0xd4>
 801c312:	46c0      	nop			@ (mov r8, r8)
 801c314:	20400001 	.word	0x20400001

0801c318 <_fflush_r>:
 801c318:	690b      	ldr	r3, [r1, #16]
 801c31a:	b570      	push	{r4, r5, r6, lr}
 801c31c:	0005      	movs	r5, r0
 801c31e:	000c      	movs	r4, r1
 801c320:	2b00      	cmp	r3, #0
 801c322:	d102      	bne.n	801c32a <_fflush_r+0x12>
 801c324:	2500      	movs	r5, #0
 801c326:	0028      	movs	r0, r5
 801c328:	bd70      	pop	{r4, r5, r6, pc}
 801c32a:	2800      	cmp	r0, #0
 801c32c:	d004      	beq.n	801c338 <_fflush_r+0x20>
 801c32e:	6a03      	ldr	r3, [r0, #32]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d101      	bne.n	801c338 <_fflush_r+0x20>
 801c334:	f7fd fece 	bl	801a0d4 <__sinit>
 801c338:	220c      	movs	r2, #12
 801c33a:	5ea3      	ldrsh	r3, [r4, r2]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d0f1      	beq.n	801c324 <_fflush_r+0xc>
 801c340:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c342:	07d2      	lsls	r2, r2, #31
 801c344:	d404      	bmi.n	801c350 <_fflush_r+0x38>
 801c346:	059b      	lsls	r3, r3, #22
 801c348:	d402      	bmi.n	801c350 <_fflush_r+0x38>
 801c34a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c34c:	f7fe f987 	bl	801a65e <__retarget_lock_acquire_recursive>
 801c350:	0028      	movs	r0, r5
 801c352:	0021      	movs	r1, r4
 801c354:	f7ff ff5a 	bl	801c20c <__sflush_r>
 801c358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c35a:	0005      	movs	r5, r0
 801c35c:	07db      	lsls	r3, r3, #31
 801c35e:	d4e2      	bmi.n	801c326 <_fflush_r+0xe>
 801c360:	89a3      	ldrh	r3, [r4, #12]
 801c362:	059b      	lsls	r3, r3, #22
 801c364:	d4df      	bmi.n	801c326 <_fflush_r+0xe>
 801c366:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c368:	f7fe f97a 	bl	801a660 <__retarget_lock_release_recursive>
 801c36c:	e7db      	b.n	801c326 <_fflush_r+0xe>
	...

0801c370 <__swhatbuf_r>:
 801c370:	b570      	push	{r4, r5, r6, lr}
 801c372:	000e      	movs	r6, r1
 801c374:	001d      	movs	r5, r3
 801c376:	230e      	movs	r3, #14
 801c378:	5ec9      	ldrsh	r1, [r1, r3]
 801c37a:	0014      	movs	r4, r2
 801c37c:	b096      	sub	sp, #88	@ 0x58
 801c37e:	2900      	cmp	r1, #0
 801c380:	da0c      	bge.n	801c39c <__swhatbuf_r+0x2c>
 801c382:	89b2      	ldrh	r2, [r6, #12]
 801c384:	2380      	movs	r3, #128	@ 0x80
 801c386:	0011      	movs	r1, r2
 801c388:	4019      	ands	r1, r3
 801c38a:	421a      	tst	r2, r3
 801c38c:	d114      	bne.n	801c3b8 <__swhatbuf_r+0x48>
 801c38e:	2380      	movs	r3, #128	@ 0x80
 801c390:	00db      	lsls	r3, r3, #3
 801c392:	2000      	movs	r0, #0
 801c394:	6029      	str	r1, [r5, #0]
 801c396:	6023      	str	r3, [r4, #0]
 801c398:	b016      	add	sp, #88	@ 0x58
 801c39a:	bd70      	pop	{r4, r5, r6, pc}
 801c39c:	466a      	mov	r2, sp
 801c39e:	f000 f89b 	bl	801c4d8 <_fstat_r>
 801c3a2:	2800      	cmp	r0, #0
 801c3a4:	dbed      	blt.n	801c382 <__swhatbuf_r+0x12>
 801c3a6:	23f0      	movs	r3, #240	@ 0xf0
 801c3a8:	9901      	ldr	r1, [sp, #4]
 801c3aa:	021b      	lsls	r3, r3, #8
 801c3ac:	4019      	ands	r1, r3
 801c3ae:	4b04      	ldr	r3, [pc, #16]	@ (801c3c0 <__swhatbuf_r+0x50>)
 801c3b0:	18c9      	adds	r1, r1, r3
 801c3b2:	424b      	negs	r3, r1
 801c3b4:	4159      	adcs	r1, r3
 801c3b6:	e7ea      	b.n	801c38e <__swhatbuf_r+0x1e>
 801c3b8:	2100      	movs	r1, #0
 801c3ba:	2340      	movs	r3, #64	@ 0x40
 801c3bc:	e7e9      	b.n	801c392 <__swhatbuf_r+0x22>
 801c3be:	46c0      	nop			@ (mov r8, r8)
 801c3c0:	ffffe000 	.word	0xffffe000

0801c3c4 <__smakebuf_r>:
 801c3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3c6:	2602      	movs	r6, #2
 801c3c8:	898b      	ldrh	r3, [r1, #12]
 801c3ca:	0005      	movs	r5, r0
 801c3cc:	000c      	movs	r4, r1
 801c3ce:	b085      	sub	sp, #20
 801c3d0:	4233      	tst	r3, r6
 801c3d2:	d007      	beq.n	801c3e4 <__smakebuf_r+0x20>
 801c3d4:	0023      	movs	r3, r4
 801c3d6:	3347      	adds	r3, #71	@ 0x47
 801c3d8:	6023      	str	r3, [r4, #0]
 801c3da:	6123      	str	r3, [r4, #16]
 801c3dc:	2301      	movs	r3, #1
 801c3de:	6163      	str	r3, [r4, #20]
 801c3e0:	b005      	add	sp, #20
 801c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3e4:	ab03      	add	r3, sp, #12
 801c3e6:	aa02      	add	r2, sp, #8
 801c3e8:	f7ff ffc2 	bl	801c370 <__swhatbuf_r>
 801c3ec:	9f02      	ldr	r7, [sp, #8]
 801c3ee:	9001      	str	r0, [sp, #4]
 801c3f0:	0039      	movs	r1, r7
 801c3f2:	0028      	movs	r0, r5
 801c3f4:	f7ff f83c 	bl	801b470 <_malloc_r>
 801c3f8:	2800      	cmp	r0, #0
 801c3fa:	d108      	bne.n	801c40e <__smakebuf_r+0x4a>
 801c3fc:	220c      	movs	r2, #12
 801c3fe:	5ea3      	ldrsh	r3, [r4, r2]
 801c400:	059a      	lsls	r2, r3, #22
 801c402:	d4ed      	bmi.n	801c3e0 <__smakebuf_r+0x1c>
 801c404:	2203      	movs	r2, #3
 801c406:	4393      	bics	r3, r2
 801c408:	431e      	orrs	r6, r3
 801c40a:	81a6      	strh	r6, [r4, #12]
 801c40c:	e7e2      	b.n	801c3d4 <__smakebuf_r+0x10>
 801c40e:	2380      	movs	r3, #128	@ 0x80
 801c410:	89a2      	ldrh	r2, [r4, #12]
 801c412:	6020      	str	r0, [r4, #0]
 801c414:	4313      	orrs	r3, r2
 801c416:	81a3      	strh	r3, [r4, #12]
 801c418:	9b03      	ldr	r3, [sp, #12]
 801c41a:	6120      	str	r0, [r4, #16]
 801c41c:	6167      	str	r7, [r4, #20]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d00c      	beq.n	801c43c <__smakebuf_r+0x78>
 801c422:	0028      	movs	r0, r5
 801c424:	230e      	movs	r3, #14
 801c426:	5ee1      	ldrsh	r1, [r4, r3]
 801c428:	f000 f868 	bl	801c4fc <_isatty_r>
 801c42c:	2800      	cmp	r0, #0
 801c42e:	d005      	beq.n	801c43c <__smakebuf_r+0x78>
 801c430:	2303      	movs	r3, #3
 801c432:	89a2      	ldrh	r2, [r4, #12]
 801c434:	439a      	bics	r2, r3
 801c436:	3b02      	subs	r3, #2
 801c438:	4313      	orrs	r3, r2
 801c43a:	81a3      	strh	r3, [r4, #12]
 801c43c:	89a3      	ldrh	r3, [r4, #12]
 801c43e:	9a01      	ldr	r2, [sp, #4]
 801c440:	4313      	orrs	r3, r2
 801c442:	81a3      	strh	r3, [r4, #12]
 801c444:	e7cc      	b.n	801c3e0 <__smakebuf_r+0x1c>

0801c446 <_putc_r>:
 801c446:	b570      	push	{r4, r5, r6, lr}
 801c448:	0006      	movs	r6, r0
 801c44a:	000d      	movs	r5, r1
 801c44c:	0014      	movs	r4, r2
 801c44e:	2800      	cmp	r0, #0
 801c450:	d004      	beq.n	801c45c <_putc_r+0x16>
 801c452:	6a03      	ldr	r3, [r0, #32]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d101      	bne.n	801c45c <_putc_r+0x16>
 801c458:	f7fd fe3c 	bl	801a0d4 <__sinit>
 801c45c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c45e:	07db      	lsls	r3, r3, #31
 801c460:	d405      	bmi.n	801c46e <_putc_r+0x28>
 801c462:	89a3      	ldrh	r3, [r4, #12]
 801c464:	059b      	lsls	r3, r3, #22
 801c466:	d402      	bmi.n	801c46e <_putc_r+0x28>
 801c468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c46a:	f7fe f8f8 	bl	801a65e <__retarget_lock_acquire_recursive>
 801c46e:	68a3      	ldr	r3, [r4, #8]
 801c470:	3b01      	subs	r3, #1
 801c472:	60a3      	str	r3, [r4, #8]
 801c474:	2b00      	cmp	r3, #0
 801c476:	da05      	bge.n	801c484 <_putc_r+0x3e>
 801c478:	69a2      	ldr	r2, [r4, #24]
 801c47a:	4293      	cmp	r3, r2
 801c47c:	db12      	blt.n	801c4a4 <_putc_r+0x5e>
 801c47e:	b2eb      	uxtb	r3, r5
 801c480:	2b0a      	cmp	r3, #10
 801c482:	d00f      	beq.n	801c4a4 <_putc_r+0x5e>
 801c484:	6823      	ldr	r3, [r4, #0]
 801c486:	1c5a      	adds	r2, r3, #1
 801c488:	6022      	str	r2, [r4, #0]
 801c48a:	701d      	strb	r5, [r3, #0]
 801c48c:	b2ed      	uxtb	r5, r5
 801c48e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c490:	07db      	lsls	r3, r3, #31
 801c492:	d405      	bmi.n	801c4a0 <_putc_r+0x5a>
 801c494:	89a3      	ldrh	r3, [r4, #12]
 801c496:	059b      	lsls	r3, r3, #22
 801c498:	d402      	bmi.n	801c4a0 <_putc_r+0x5a>
 801c49a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c49c:	f7fe f8e0 	bl	801a660 <__retarget_lock_release_recursive>
 801c4a0:	0028      	movs	r0, r5
 801c4a2:	bd70      	pop	{r4, r5, r6, pc}
 801c4a4:	0029      	movs	r1, r5
 801c4a6:	0022      	movs	r2, r4
 801c4a8:	0030      	movs	r0, r6
 801c4aa:	f7fd ff75 	bl	801a398 <__swbuf_r>
 801c4ae:	0005      	movs	r5, r0
 801c4b0:	e7ed      	b.n	801c48e <_putc_r+0x48>

0801c4b2 <memmove>:
 801c4b2:	b510      	push	{r4, lr}
 801c4b4:	4288      	cmp	r0, r1
 801c4b6:	d902      	bls.n	801c4be <memmove+0xc>
 801c4b8:	188b      	adds	r3, r1, r2
 801c4ba:	4298      	cmp	r0, r3
 801c4bc:	d308      	bcc.n	801c4d0 <memmove+0x1e>
 801c4be:	2300      	movs	r3, #0
 801c4c0:	429a      	cmp	r2, r3
 801c4c2:	d007      	beq.n	801c4d4 <memmove+0x22>
 801c4c4:	5ccc      	ldrb	r4, [r1, r3]
 801c4c6:	54c4      	strb	r4, [r0, r3]
 801c4c8:	3301      	adds	r3, #1
 801c4ca:	e7f9      	b.n	801c4c0 <memmove+0xe>
 801c4cc:	5c8b      	ldrb	r3, [r1, r2]
 801c4ce:	5483      	strb	r3, [r0, r2]
 801c4d0:	3a01      	subs	r2, #1
 801c4d2:	d2fb      	bcs.n	801c4cc <memmove+0x1a>
 801c4d4:	bd10      	pop	{r4, pc}
	...

0801c4d8 <_fstat_r>:
 801c4d8:	2300      	movs	r3, #0
 801c4da:	b570      	push	{r4, r5, r6, lr}
 801c4dc:	4d06      	ldr	r5, [pc, #24]	@ (801c4f8 <_fstat_r+0x20>)
 801c4de:	0004      	movs	r4, r0
 801c4e0:	0008      	movs	r0, r1
 801c4e2:	0011      	movs	r1, r2
 801c4e4:	602b      	str	r3, [r5, #0]
 801c4e6:	f7ee f9d6 	bl	800a896 <_fstat>
 801c4ea:	1c43      	adds	r3, r0, #1
 801c4ec:	d103      	bne.n	801c4f6 <_fstat_r+0x1e>
 801c4ee:	682b      	ldr	r3, [r5, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d000      	beq.n	801c4f6 <_fstat_r+0x1e>
 801c4f4:	6023      	str	r3, [r4, #0]
 801c4f6:	bd70      	pop	{r4, r5, r6, pc}
 801c4f8:	200067ec 	.word	0x200067ec

0801c4fc <_isatty_r>:
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	b570      	push	{r4, r5, r6, lr}
 801c500:	4d06      	ldr	r5, [pc, #24]	@ (801c51c <_isatty_r+0x20>)
 801c502:	0004      	movs	r4, r0
 801c504:	0008      	movs	r0, r1
 801c506:	602b      	str	r3, [r5, #0]
 801c508:	f7ee f9ca 	bl	800a8a0 <_isatty>
 801c50c:	1c43      	adds	r3, r0, #1
 801c50e:	d103      	bne.n	801c518 <_isatty_r+0x1c>
 801c510:	682b      	ldr	r3, [r5, #0]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d000      	beq.n	801c518 <_isatty_r+0x1c>
 801c516:	6023      	str	r3, [r4, #0]
 801c518:	bd70      	pop	{r4, r5, r6, pc}
 801c51a:	46c0      	nop			@ (mov r8, r8)
 801c51c:	200067ec 	.word	0x200067ec

0801c520 <_sbrk_r>:
 801c520:	2300      	movs	r3, #0
 801c522:	b570      	push	{r4, r5, r6, lr}
 801c524:	4d06      	ldr	r5, [pc, #24]	@ (801c540 <_sbrk_r+0x20>)
 801c526:	0004      	movs	r4, r0
 801c528:	0008      	movs	r0, r1
 801c52a:	602b      	str	r3, [r5, #0]
 801c52c:	f7ee f9bc 	bl	800a8a8 <_sbrk>
 801c530:	1c43      	adds	r3, r0, #1
 801c532:	d103      	bne.n	801c53c <_sbrk_r+0x1c>
 801c534:	682b      	ldr	r3, [r5, #0]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d000      	beq.n	801c53c <_sbrk_r+0x1c>
 801c53a:	6023      	str	r3, [r4, #0]
 801c53c:	bd70      	pop	{r4, r5, r6, pc}
 801c53e:	46c0      	nop			@ (mov r8, r8)
 801c540:	200067ec 	.word	0x200067ec

0801c544 <__assert_func>:
 801c544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c546:	0014      	movs	r4, r2
 801c548:	001a      	movs	r2, r3
 801c54a:	4b09      	ldr	r3, [pc, #36]	@ (801c570 <__assert_func+0x2c>)
 801c54c:	0005      	movs	r5, r0
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	000e      	movs	r6, r1
 801c552:	68d8      	ldr	r0, [r3, #12]
 801c554:	4b07      	ldr	r3, [pc, #28]	@ (801c574 <__assert_func+0x30>)
 801c556:	2c00      	cmp	r4, #0
 801c558:	d101      	bne.n	801c55e <__assert_func+0x1a>
 801c55a:	4b07      	ldr	r3, [pc, #28]	@ (801c578 <__assert_func+0x34>)
 801c55c:	001c      	movs	r4, r3
 801c55e:	4907      	ldr	r1, [pc, #28]	@ (801c57c <__assert_func+0x38>)
 801c560:	9301      	str	r3, [sp, #4]
 801c562:	9402      	str	r4, [sp, #8]
 801c564:	002b      	movs	r3, r5
 801c566:	9600      	str	r6, [sp, #0]
 801c568:	f7fd fdcc 	bl	801a104 <fiprintf>
 801c56c:	f000 f884 	bl	801c678 <abort>
 801c570:	200002cc 	.word	0x200002cc
 801c574:	080203b2 	.word	0x080203b2
 801c578:	0801f3a0 	.word	0x0801f3a0
 801c57c:	080203bf 	.word	0x080203bf

0801c580 <_calloc_r>:
 801c580:	b570      	push	{r4, r5, r6, lr}
 801c582:	0c0b      	lsrs	r3, r1, #16
 801c584:	0c15      	lsrs	r5, r2, #16
 801c586:	2b00      	cmp	r3, #0
 801c588:	d11e      	bne.n	801c5c8 <_calloc_r+0x48>
 801c58a:	2d00      	cmp	r5, #0
 801c58c:	d10c      	bne.n	801c5a8 <_calloc_r+0x28>
 801c58e:	b289      	uxth	r1, r1
 801c590:	b294      	uxth	r4, r2
 801c592:	434c      	muls	r4, r1
 801c594:	0021      	movs	r1, r4
 801c596:	f7fe ff6b 	bl	801b470 <_malloc_r>
 801c59a:	1e05      	subs	r5, r0, #0
 801c59c:	d01b      	beq.n	801c5d6 <_calloc_r+0x56>
 801c59e:	0022      	movs	r2, r4
 801c5a0:	2100      	movs	r1, #0
 801c5a2:	f7fd ffa7 	bl	801a4f4 <memset>
 801c5a6:	e016      	b.n	801c5d6 <_calloc_r+0x56>
 801c5a8:	1c2b      	adds	r3, r5, #0
 801c5aa:	1c0c      	adds	r4, r1, #0
 801c5ac:	b289      	uxth	r1, r1
 801c5ae:	b292      	uxth	r2, r2
 801c5b0:	434a      	muls	r2, r1
 801c5b2:	b29b      	uxth	r3, r3
 801c5b4:	b2a1      	uxth	r1, r4
 801c5b6:	4359      	muls	r1, r3
 801c5b8:	0c14      	lsrs	r4, r2, #16
 801c5ba:	190c      	adds	r4, r1, r4
 801c5bc:	0c23      	lsrs	r3, r4, #16
 801c5be:	d107      	bne.n	801c5d0 <_calloc_r+0x50>
 801c5c0:	0424      	lsls	r4, r4, #16
 801c5c2:	b292      	uxth	r2, r2
 801c5c4:	4314      	orrs	r4, r2
 801c5c6:	e7e5      	b.n	801c594 <_calloc_r+0x14>
 801c5c8:	2d00      	cmp	r5, #0
 801c5ca:	d101      	bne.n	801c5d0 <_calloc_r+0x50>
 801c5cc:	1c14      	adds	r4, r2, #0
 801c5ce:	e7ed      	b.n	801c5ac <_calloc_r+0x2c>
 801c5d0:	230c      	movs	r3, #12
 801c5d2:	2500      	movs	r5, #0
 801c5d4:	6003      	str	r3, [r0, #0]
 801c5d6:	0028      	movs	r0, r5
 801c5d8:	bd70      	pop	{r4, r5, r6, pc}

0801c5da <__ascii_mbtowc>:
 801c5da:	b082      	sub	sp, #8
 801c5dc:	2900      	cmp	r1, #0
 801c5de:	d100      	bne.n	801c5e2 <__ascii_mbtowc+0x8>
 801c5e0:	a901      	add	r1, sp, #4
 801c5e2:	1e10      	subs	r0, r2, #0
 801c5e4:	d006      	beq.n	801c5f4 <__ascii_mbtowc+0x1a>
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d006      	beq.n	801c5f8 <__ascii_mbtowc+0x1e>
 801c5ea:	7813      	ldrb	r3, [r2, #0]
 801c5ec:	600b      	str	r3, [r1, #0]
 801c5ee:	7810      	ldrb	r0, [r2, #0]
 801c5f0:	1e43      	subs	r3, r0, #1
 801c5f2:	4198      	sbcs	r0, r3
 801c5f4:	b002      	add	sp, #8
 801c5f6:	4770      	bx	lr
 801c5f8:	2002      	movs	r0, #2
 801c5fa:	4240      	negs	r0, r0
 801c5fc:	e7fa      	b.n	801c5f4 <__ascii_mbtowc+0x1a>

0801c5fe <_realloc_r>:
 801c5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c600:	0006      	movs	r6, r0
 801c602:	000c      	movs	r4, r1
 801c604:	0015      	movs	r5, r2
 801c606:	2900      	cmp	r1, #0
 801c608:	d105      	bne.n	801c616 <_realloc_r+0x18>
 801c60a:	0011      	movs	r1, r2
 801c60c:	f7fe ff30 	bl	801b470 <_malloc_r>
 801c610:	0004      	movs	r4, r0
 801c612:	0020      	movs	r0, r4
 801c614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c616:	2a00      	cmp	r2, #0
 801c618:	d103      	bne.n	801c622 <_realloc_r+0x24>
 801c61a:	f7fe feb3 	bl	801b384 <_free_r>
 801c61e:	002c      	movs	r4, r5
 801c620:	e7f7      	b.n	801c612 <_realloc_r+0x14>
 801c622:	f000 f830 	bl	801c686 <_malloc_usable_size_r>
 801c626:	0007      	movs	r7, r0
 801c628:	4285      	cmp	r5, r0
 801c62a:	d802      	bhi.n	801c632 <_realloc_r+0x34>
 801c62c:	0843      	lsrs	r3, r0, #1
 801c62e:	42ab      	cmp	r3, r5
 801c630:	d3ef      	bcc.n	801c612 <_realloc_r+0x14>
 801c632:	0029      	movs	r1, r5
 801c634:	0030      	movs	r0, r6
 801c636:	f7fe ff1b 	bl	801b470 <_malloc_r>
 801c63a:	9001      	str	r0, [sp, #4]
 801c63c:	2800      	cmp	r0, #0
 801c63e:	d101      	bne.n	801c644 <_realloc_r+0x46>
 801c640:	9c01      	ldr	r4, [sp, #4]
 801c642:	e7e6      	b.n	801c612 <_realloc_r+0x14>
 801c644:	002a      	movs	r2, r5
 801c646:	42bd      	cmp	r5, r7
 801c648:	d900      	bls.n	801c64c <_realloc_r+0x4e>
 801c64a:	003a      	movs	r2, r7
 801c64c:	0021      	movs	r1, r4
 801c64e:	9801      	ldr	r0, [sp, #4]
 801c650:	f7fe f81a 	bl	801a688 <memcpy>
 801c654:	0021      	movs	r1, r4
 801c656:	0030      	movs	r0, r6
 801c658:	f7fe fe94 	bl	801b384 <_free_r>
 801c65c:	e7f0      	b.n	801c640 <_realloc_r+0x42>

0801c65e <__ascii_wctomb>:
 801c65e:	0003      	movs	r3, r0
 801c660:	1e08      	subs	r0, r1, #0
 801c662:	d005      	beq.n	801c670 <__ascii_wctomb+0x12>
 801c664:	2aff      	cmp	r2, #255	@ 0xff
 801c666:	d904      	bls.n	801c672 <__ascii_wctomb+0x14>
 801c668:	228a      	movs	r2, #138	@ 0x8a
 801c66a:	2001      	movs	r0, #1
 801c66c:	601a      	str	r2, [r3, #0]
 801c66e:	4240      	negs	r0, r0
 801c670:	4770      	bx	lr
 801c672:	2001      	movs	r0, #1
 801c674:	700a      	strb	r2, [r1, #0]
 801c676:	e7fb      	b.n	801c670 <__ascii_wctomb+0x12>

0801c678 <abort>:
 801c678:	2006      	movs	r0, #6
 801c67a:	b510      	push	{r4, lr}
 801c67c:	f000 f834 	bl	801c6e8 <raise>
 801c680:	2001      	movs	r0, #1
 801c682:	f7ee f8e5 	bl	800a850 <_exit>

0801c686 <_malloc_usable_size_r>:
 801c686:	1f0b      	subs	r3, r1, #4
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	1f18      	subs	r0, r3, #4
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	da01      	bge.n	801c694 <_malloc_usable_size_r+0xe>
 801c690:	580b      	ldr	r3, [r1, r0]
 801c692:	18c0      	adds	r0, r0, r3
 801c694:	4770      	bx	lr

0801c696 <_raise_r>:
 801c696:	b570      	push	{r4, r5, r6, lr}
 801c698:	0004      	movs	r4, r0
 801c69a:	000d      	movs	r5, r1
 801c69c:	291f      	cmp	r1, #31
 801c69e:	d904      	bls.n	801c6aa <_raise_r+0x14>
 801c6a0:	2316      	movs	r3, #22
 801c6a2:	6003      	str	r3, [r0, #0]
 801c6a4:	2001      	movs	r0, #1
 801c6a6:	4240      	negs	r0, r0
 801c6a8:	bd70      	pop	{r4, r5, r6, pc}
 801c6aa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d004      	beq.n	801c6ba <_raise_r+0x24>
 801c6b0:	008a      	lsls	r2, r1, #2
 801c6b2:	189b      	adds	r3, r3, r2
 801c6b4:	681a      	ldr	r2, [r3, #0]
 801c6b6:	2a00      	cmp	r2, #0
 801c6b8:	d108      	bne.n	801c6cc <_raise_r+0x36>
 801c6ba:	0020      	movs	r0, r4
 801c6bc:	f000 f830 	bl	801c720 <_getpid_r>
 801c6c0:	002a      	movs	r2, r5
 801c6c2:	0001      	movs	r1, r0
 801c6c4:	0020      	movs	r0, r4
 801c6c6:	f000 f819 	bl	801c6fc <_kill_r>
 801c6ca:	e7ed      	b.n	801c6a8 <_raise_r+0x12>
 801c6cc:	2a01      	cmp	r2, #1
 801c6ce:	d009      	beq.n	801c6e4 <_raise_r+0x4e>
 801c6d0:	1c51      	adds	r1, r2, #1
 801c6d2:	d103      	bne.n	801c6dc <_raise_r+0x46>
 801c6d4:	2316      	movs	r3, #22
 801c6d6:	6003      	str	r3, [r0, #0]
 801c6d8:	2001      	movs	r0, #1
 801c6da:	e7e5      	b.n	801c6a8 <_raise_r+0x12>
 801c6dc:	2100      	movs	r1, #0
 801c6de:	0028      	movs	r0, r5
 801c6e0:	6019      	str	r1, [r3, #0]
 801c6e2:	4790      	blx	r2
 801c6e4:	2000      	movs	r0, #0
 801c6e6:	e7df      	b.n	801c6a8 <_raise_r+0x12>

0801c6e8 <raise>:
 801c6e8:	b510      	push	{r4, lr}
 801c6ea:	4b03      	ldr	r3, [pc, #12]	@ (801c6f8 <raise+0x10>)
 801c6ec:	0001      	movs	r1, r0
 801c6ee:	6818      	ldr	r0, [r3, #0]
 801c6f0:	f7ff ffd1 	bl	801c696 <_raise_r>
 801c6f4:	bd10      	pop	{r4, pc}
 801c6f6:	46c0      	nop			@ (mov r8, r8)
 801c6f8:	200002cc 	.word	0x200002cc

0801c6fc <_kill_r>:
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	b570      	push	{r4, r5, r6, lr}
 801c700:	4d06      	ldr	r5, [pc, #24]	@ (801c71c <_kill_r+0x20>)
 801c702:	0004      	movs	r4, r0
 801c704:	0008      	movs	r0, r1
 801c706:	0011      	movs	r1, r2
 801c708:	602b      	str	r3, [r5, #0]
 801c70a:	f7ee f899 	bl	800a840 <_kill>
 801c70e:	1c43      	adds	r3, r0, #1
 801c710:	d103      	bne.n	801c71a <_kill_r+0x1e>
 801c712:	682b      	ldr	r3, [r5, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d000      	beq.n	801c71a <_kill_r+0x1e>
 801c718:	6023      	str	r3, [r4, #0]
 801c71a:	bd70      	pop	{r4, r5, r6, pc}
 801c71c:	200067ec 	.word	0x200067ec

0801c720 <_getpid_r>:
 801c720:	b510      	push	{r4, lr}
 801c722:	f7ee f88b 	bl	800a83c <_getpid>
 801c726:	bd10      	pop	{r4, pc}

0801c728 <logf>:
 801c728:	b570      	push	{r4, r5, r6, lr}
 801c72a:	1c05      	adds	r5, r0, #0
 801c72c:	f000 f82c 	bl	801c788 <__ieee754_logf>
 801c730:	1c29      	adds	r1, r5, #0
 801c732:	1c04      	adds	r4, r0, #0
 801c734:	1c28      	adds	r0, r5, #0
 801c736:	f7e4 ffc3 	bl	80016c0 <__aeabi_fcmpun>
 801c73a:	2800      	cmp	r0, #0
 801c73c:	d110      	bne.n	801c760 <logf+0x38>
 801c73e:	2100      	movs	r1, #0
 801c740:	1c28      	adds	r0, r5, #0
 801c742:	f7e3 feeb 	bl	800051c <__aeabi_fcmpgt>
 801c746:	2800      	cmp	r0, #0
 801c748:	d10a      	bne.n	801c760 <logf+0x38>
 801c74a:	2100      	movs	r1, #0
 801c74c:	1c28      	adds	r0, r5, #0
 801c74e:	f7e3 fecb 	bl	80004e8 <__aeabi_fcmpeq>
 801c752:	2800      	cmp	r0, #0
 801c754:	d006      	beq.n	801c764 <logf+0x3c>
 801c756:	f7fd ff57 	bl	801a608 <__errno>
 801c75a:	2322      	movs	r3, #34	@ 0x22
 801c75c:	4c06      	ldr	r4, [pc, #24]	@ (801c778 <logf+0x50>)
 801c75e:	6003      	str	r3, [r0, #0]
 801c760:	1c20      	adds	r0, r4, #0
 801c762:	bd70      	pop	{r4, r5, r6, pc}
 801c764:	f7fd ff50 	bl	801a608 <__errno>
 801c768:	2321      	movs	r3, #33	@ 0x21
 801c76a:	6003      	str	r3, [r0, #0]
 801c76c:	4803      	ldr	r0, [pc, #12]	@ (801c77c <logf+0x54>)
 801c76e:	f000 f807 	bl	801c780 <nanf>
 801c772:	1c04      	adds	r4, r0, #0
 801c774:	e7f4      	b.n	801c760 <logf+0x38>
 801c776:	46c0      	nop			@ (mov r8, r8)
 801c778:	ff800000 	.word	0xff800000
 801c77c:	0801f3a0 	.word	0x0801f3a0

0801c780 <nanf>:
 801c780:	4800      	ldr	r0, [pc, #0]	@ (801c784 <nanf+0x4>)
 801c782:	4770      	bx	lr
 801c784:	7fc00000 	.word	0x7fc00000

0801c788 <__ieee754_logf>:
 801c788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c78a:	0043      	lsls	r3, r0, #1
 801c78c:	b085      	sub	sp, #20
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d106      	bne.n	801c7a0 <__ieee754_logf+0x18>
 801c792:	20cc      	movs	r0, #204	@ 0xcc
 801c794:	2100      	movs	r1, #0
 801c796:	0600      	lsls	r0, r0, #24
 801c798:	f7e4 fa06 	bl	8000ba8 <__aeabi_fdiv>
 801c79c:	b005      	add	sp, #20
 801c79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7a0:	1e03      	subs	r3, r0, #0
 801c7a2:	da04      	bge.n	801c7ae <__ieee754_logf+0x26>
 801c7a4:	1c01      	adds	r1, r0, #0
 801c7a6:	f7e4 fd27 	bl	80011f8 <__aeabi_fsub>
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	e7f4      	b.n	801c798 <__ieee754_logf+0x10>
 801c7ae:	21ff      	movs	r1, #255	@ 0xff
 801c7b0:	05c9      	lsls	r1, r1, #23
 801c7b2:	4288      	cmp	r0, r1
 801c7b4:	db03      	blt.n	801c7be <__ieee754_logf+0x36>
 801c7b6:	1c01      	adds	r1, r0, #0
 801c7b8:	f7e4 f804 	bl	80007c4 <__aeabi_fadd>
 801c7bc:	e7ee      	b.n	801c79c <__ieee754_logf+0x14>
 801c7be:	2280      	movs	r2, #128	@ 0x80
 801c7c0:	2100      	movs	r1, #0
 801c7c2:	0412      	lsls	r2, r2, #16
 801c7c4:	4290      	cmp	r0, r2
 801c7c6:	da06      	bge.n	801c7d6 <__ieee754_logf+0x4e>
 801c7c8:	2198      	movs	r1, #152	@ 0x98
 801c7ca:	05c9      	lsls	r1, r1, #23
 801c7cc:	f7e4 fbba 	bl	8000f44 <__aeabi_fmul>
 801c7d0:	2119      	movs	r1, #25
 801c7d2:	0003      	movs	r3, r0
 801c7d4:	4249      	negs	r1, r1
 801c7d6:	15da      	asrs	r2, r3, #23
 801c7d8:	3a7f      	subs	r2, #127	@ 0x7f
 801c7da:	1852      	adds	r2, r2, r1
 801c7dc:	2180      	movs	r1, #128	@ 0x80
 801c7de:	025b      	lsls	r3, r3, #9
 801c7e0:	0a5e      	lsrs	r6, r3, #9
 801c7e2:	4b74      	ldr	r3, [pc, #464]	@ (801c9b4 <__ieee754_logf+0x22c>)
 801c7e4:	20fe      	movs	r0, #254	@ 0xfe
 801c7e6:	0409      	lsls	r1, r1, #16
 801c7e8:	18f3      	adds	r3, r6, r3
 801c7ea:	400b      	ands	r3, r1
 801c7ec:	21fe      	movs	r1, #254	@ 0xfe
 801c7ee:	0580      	lsls	r0, r0, #22
 801c7f0:	4058      	eors	r0, r3
 801c7f2:	15dd      	asrs	r5, r3, #23
 801c7f4:	4330      	orrs	r0, r6
 801c7f6:	0589      	lsls	r1, r1, #22
 801c7f8:	18ad      	adds	r5, r5, r2
 801c7fa:	f7e4 fcfd 	bl	80011f8 <__aeabi_fsub>
 801c7fe:	0032      	movs	r2, r6
 801c800:	4b6d      	ldr	r3, [pc, #436]	@ (801c9b8 <__ieee754_logf+0x230>)
 801c802:	320f      	adds	r2, #15
 801c804:	1c04      	adds	r4, r0, #0
 801c806:	421a      	tst	r2, r3
 801c808:	d145      	bne.n	801c896 <__ieee754_logf+0x10e>
 801c80a:	2100      	movs	r1, #0
 801c80c:	f7e3 fe6c 	bl	80004e8 <__aeabi_fcmpeq>
 801c810:	2800      	cmp	r0, #0
 801c812:	d011      	beq.n	801c838 <__ieee754_logf+0xb0>
 801c814:	2000      	movs	r0, #0
 801c816:	2d00      	cmp	r5, #0
 801c818:	d0c0      	beq.n	801c79c <__ieee754_logf+0x14>
 801c81a:	0028      	movs	r0, r5
 801c81c:	f7e4 ff86 	bl	800172c <__aeabi_i2f>
 801c820:	4966      	ldr	r1, [pc, #408]	@ (801c9bc <__ieee754_logf+0x234>)
 801c822:	1c04      	adds	r4, r0, #0
 801c824:	f7e4 fb8e 	bl	8000f44 <__aeabi_fmul>
 801c828:	4965      	ldr	r1, [pc, #404]	@ (801c9c0 <__ieee754_logf+0x238>)
 801c82a:	1c05      	adds	r5, r0, #0
 801c82c:	1c20      	adds	r0, r4, #0
 801c82e:	f7e4 fb89 	bl	8000f44 <__aeabi_fmul>
 801c832:	1c01      	adds	r1, r0, #0
 801c834:	1c28      	adds	r0, r5, #0
 801c836:	e7bf      	b.n	801c7b8 <__ieee754_logf+0x30>
 801c838:	4962      	ldr	r1, [pc, #392]	@ (801c9c4 <__ieee754_logf+0x23c>)
 801c83a:	1c20      	adds	r0, r4, #0
 801c83c:	f7e4 fb82 	bl	8000f44 <__aeabi_fmul>
 801c840:	1c01      	adds	r1, r0, #0
 801c842:	20fc      	movs	r0, #252	@ 0xfc
 801c844:	0580      	lsls	r0, r0, #22
 801c846:	f7e4 fcd7 	bl	80011f8 <__aeabi_fsub>
 801c84a:	1c21      	adds	r1, r4, #0
 801c84c:	1c06      	adds	r6, r0, #0
 801c84e:	1c20      	adds	r0, r4, #0
 801c850:	f7e4 fb78 	bl	8000f44 <__aeabi_fmul>
 801c854:	1c01      	adds	r1, r0, #0
 801c856:	1c30      	adds	r0, r6, #0
 801c858:	f7e4 fb74 	bl	8000f44 <__aeabi_fmul>
 801c85c:	1c06      	adds	r6, r0, #0
 801c85e:	2d00      	cmp	r5, #0
 801c860:	d101      	bne.n	801c866 <__ieee754_logf+0xde>
 801c862:	1c31      	adds	r1, r6, #0
 801c864:	e079      	b.n	801c95a <__ieee754_logf+0x1d2>
 801c866:	0028      	movs	r0, r5
 801c868:	f7e4 ff60 	bl	800172c <__aeabi_i2f>
 801c86c:	4953      	ldr	r1, [pc, #332]	@ (801c9bc <__ieee754_logf+0x234>)
 801c86e:	1c05      	adds	r5, r0, #0
 801c870:	f7e4 fb68 	bl	8000f44 <__aeabi_fmul>
 801c874:	4952      	ldr	r1, [pc, #328]	@ (801c9c0 <__ieee754_logf+0x238>)
 801c876:	1c07      	adds	r7, r0, #0
 801c878:	1c28      	adds	r0, r5, #0
 801c87a:	f7e4 fb63 	bl	8000f44 <__aeabi_fmul>
 801c87e:	1c01      	adds	r1, r0, #0
 801c880:	1c30      	adds	r0, r6, #0
 801c882:	f7e4 fcb9 	bl	80011f8 <__aeabi_fsub>
 801c886:	1c21      	adds	r1, r4, #0
 801c888:	f7e4 fcb6 	bl	80011f8 <__aeabi_fsub>
 801c88c:	1c01      	adds	r1, r0, #0
 801c88e:	1c38      	adds	r0, r7, #0
 801c890:	f7e4 fcb2 	bl	80011f8 <__aeabi_fsub>
 801c894:	e782      	b.n	801c79c <__ieee754_logf+0x14>
 801c896:	2180      	movs	r1, #128	@ 0x80
 801c898:	05c9      	lsls	r1, r1, #23
 801c89a:	f7e3 ff93 	bl	80007c4 <__aeabi_fadd>
 801c89e:	1c01      	adds	r1, r0, #0
 801c8a0:	1c20      	adds	r0, r4, #0
 801c8a2:	f7e4 f981 	bl	8000ba8 <__aeabi_fdiv>
 801c8a6:	9000      	str	r0, [sp, #0]
 801c8a8:	0028      	movs	r0, r5
 801c8aa:	f7e4 ff3f 	bl	800172c <__aeabi_i2f>
 801c8ae:	9900      	ldr	r1, [sp, #0]
 801c8b0:	9001      	str	r0, [sp, #4]
 801c8b2:	1c08      	adds	r0, r1, #0
 801c8b4:	f7e4 fb46 	bl	8000f44 <__aeabi_fmul>
 801c8b8:	4b43      	ldr	r3, [pc, #268]	@ (801c9c8 <__ieee754_logf+0x240>)
 801c8ba:	1c01      	adds	r1, r0, #0
 801c8bc:	18f3      	adds	r3, r6, r3
 801c8be:	9303      	str	r3, [sp, #12]
 801c8c0:	9002      	str	r0, [sp, #8]
 801c8c2:	f7e4 fb3f 	bl	8000f44 <__aeabi_fmul>
 801c8c6:	4941      	ldr	r1, [pc, #260]	@ (801c9cc <__ieee754_logf+0x244>)
 801c8c8:	1c07      	adds	r7, r0, #0
 801c8ca:	f7e4 fb3b 	bl	8000f44 <__aeabi_fmul>
 801c8ce:	4940      	ldr	r1, [pc, #256]	@ (801c9d0 <__ieee754_logf+0x248>)
 801c8d0:	f7e3 ff78 	bl	80007c4 <__aeabi_fadd>
 801c8d4:	1c39      	adds	r1, r7, #0
 801c8d6:	f7e4 fb35 	bl	8000f44 <__aeabi_fmul>
 801c8da:	493e      	ldr	r1, [pc, #248]	@ (801c9d4 <__ieee754_logf+0x24c>)
 801c8dc:	f7e3 ff72 	bl	80007c4 <__aeabi_fadd>
 801c8e0:	1c39      	adds	r1, r7, #0
 801c8e2:	f7e4 fb2f 	bl	8000f44 <__aeabi_fmul>
 801c8e6:	493c      	ldr	r1, [pc, #240]	@ (801c9d8 <__ieee754_logf+0x250>)
 801c8e8:	f7e3 ff6c 	bl	80007c4 <__aeabi_fadd>
 801c8ec:	9902      	ldr	r1, [sp, #8]
 801c8ee:	f7e4 fb29 	bl	8000f44 <__aeabi_fmul>
 801c8f2:	493a      	ldr	r1, [pc, #232]	@ (801c9dc <__ieee754_logf+0x254>)
 801c8f4:	9002      	str	r0, [sp, #8]
 801c8f6:	1c38      	adds	r0, r7, #0
 801c8f8:	f7e4 fb24 	bl	8000f44 <__aeabi_fmul>
 801c8fc:	4938      	ldr	r1, [pc, #224]	@ (801c9e0 <__ieee754_logf+0x258>)
 801c8fe:	f7e3 ff61 	bl	80007c4 <__aeabi_fadd>
 801c902:	1c39      	adds	r1, r7, #0
 801c904:	f7e4 fb1e 	bl	8000f44 <__aeabi_fmul>
 801c908:	4936      	ldr	r1, [pc, #216]	@ (801c9e4 <__ieee754_logf+0x25c>)
 801c90a:	f7e3 ff5b 	bl	80007c4 <__aeabi_fadd>
 801c90e:	1c39      	adds	r1, r7, #0
 801c910:	f7e4 fb18 	bl	8000f44 <__aeabi_fmul>
 801c914:	1c01      	adds	r1, r0, #0
 801c916:	9802      	ldr	r0, [sp, #8]
 801c918:	f7e3 ff54 	bl	80007c4 <__aeabi_fadd>
 801c91c:	4b32      	ldr	r3, [pc, #200]	@ (801c9e8 <__ieee754_logf+0x260>)
 801c91e:	9a03      	ldr	r2, [sp, #12]
 801c920:	1b9b      	subs	r3, r3, r6
 801c922:	1c07      	adds	r7, r0, #0
 801c924:	4313      	orrs	r3, r2
 801c926:	2b00      	cmp	r3, #0
 801c928:	dd2f      	ble.n	801c98a <__ieee754_logf+0x202>
 801c92a:	21fc      	movs	r1, #252	@ 0xfc
 801c92c:	1c20      	adds	r0, r4, #0
 801c92e:	0589      	lsls	r1, r1, #22
 801c930:	f7e4 fb08 	bl	8000f44 <__aeabi_fmul>
 801c934:	1c21      	adds	r1, r4, #0
 801c936:	f7e4 fb05 	bl	8000f44 <__aeabi_fmul>
 801c93a:	1c01      	adds	r1, r0, #0
 801c93c:	1c06      	adds	r6, r0, #0
 801c93e:	1c38      	adds	r0, r7, #0
 801c940:	f7e3 ff40 	bl	80007c4 <__aeabi_fadd>
 801c944:	9900      	ldr	r1, [sp, #0]
 801c946:	f7e4 fafd 	bl	8000f44 <__aeabi_fmul>
 801c94a:	1c07      	adds	r7, r0, #0
 801c94c:	2d00      	cmp	r5, #0
 801c94e:	d106      	bne.n	801c95e <__ieee754_logf+0x1d6>
 801c950:	1c01      	adds	r1, r0, #0
 801c952:	1c30      	adds	r0, r6, #0
 801c954:	f7e4 fc50 	bl	80011f8 <__aeabi_fsub>
 801c958:	1c01      	adds	r1, r0, #0
 801c95a:	1c20      	adds	r0, r4, #0
 801c95c:	e798      	b.n	801c890 <__ieee754_logf+0x108>
 801c95e:	4917      	ldr	r1, [pc, #92]	@ (801c9bc <__ieee754_logf+0x234>)
 801c960:	9801      	ldr	r0, [sp, #4]
 801c962:	f7e4 faef 	bl	8000f44 <__aeabi_fmul>
 801c966:	4916      	ldr	r1, [pc, #88]	@ (801c9c0 <__ieee754_logf+0x238>)
 801c968:	1c05      	adds	r5, r0, #0
 801c96a:	9801      	ldr	r0, [sp, #4]
 801c96c:	f7e4 faea 	bl	8000f44 <__aeabi_fmul>
 801c970:	1c39      	adds	r1, r7, #0
 801c972:	f7e3 ff27 	bl	80007c4 <__aeabi_fadd>
 801c976:	1c01      	adds	r1, r0, #0
 801c978:	1c30      	adds	r0, r6, #0
 801c97a:	f7e4 fc3d 	bl	80011f8 <__aeabi_fsub>
 801c97e:	1c21      	adds	r1, r4, #0
 801c980:	f7e4 fc3a 	bl	80011f8 <__aeabi_fsub>
 801c984:	1c01      	adds	r1, r0, #0
 801c986:	1c28      	adds	r0, r5, #0
 801c988:	e782      	b.n	801c890 <__ieee754_logf+0x108>
 801c98a:	1c01      	adds	r1, r0, #0
 801c98c:	1c20      	adds	r0, r4, #0
 801c98e:	f7e4 fc33 	bl	80011f8 <__aeabi_fsub>
 801c992:	9900      	ldr	r1, [sp, #0]
 801c994:	f7e4 fad6 	bl	8000f44 <__aeabi_fmul>
 801c998:	1c06      	adds	r6, r0, #0
 801c99a:	2d00      	cmp	r5, #0
 801c99c:	d100      	bne.n	801c9a0 <__ieee754_logf+0x218>
 801c99e:	e760      	b.n	801c862 <__ieee754_logf+0xda>
 801c9a0:	4906      	ldr	r1, [pc, #24]	@ (801c9bc <__ieee754_logf+0x234>)
 801c9a2:	9801      	ldr	r0, [sp, #4]
 801c9a4:	f7e4 face 	bl	8000f44 <__aeabi_fmul>
 801c9a8:	4905      	ldr	r1, [pc, #20]	@ (801c9c0 <__ieee754_logf+0x238>)
 801c9aa:	1c05      	adds	r5, r0, #0
 801c9ac:	9801      	ldr	r0, [sp, #4]
 801c9ae:	f7e4 fac9 	bl	8000f44 <__aeabi_fmul>
 801c9b2:	e7e0      	b.n	801c976 <__ieee754_logf+0x1ee>
 801c9b4:	004afb20 	.word	0x004afb20
 801c9b8:	007ffff0 	.word	0x007ffff0
 801c9bc:	3f317180 	.word	0x3f317180
 801c9c0:	3717f7d1 	.word	0x3717f7d1
 801c9c4:	3eaaaaab 	.word	0x3eaaaaab
 801c9c8:	ffcf5c30 	.word	0xffcf5c30
 801c9cc:	3e178897 	.word	0x3e178897
 801c9d0:	3e3a3325 	.word	0x3e3a3325
 801c9d4:	3e924925 	.word	0x3e924925
 801c9d8:	3f2aaaab 	.word	0x3f2aaaab
 801c9dc:	3e1cd04f 	.word	0x3e1cd04f
 801c9e0:	3e638e29 	.word	0x3e638e29
 801c9e4:	3ecccccd 	.word	0x3ecccccd
 801c9e8:	0035c288 	.word	0x0035c288

0801c9ec <_init>:
 801c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ee:	46c0      	nop			@ (mov r8, r8)
 801c9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9f2:	bc08      	pop	{r3}
 801c9f4:	469e      	mov	lr, r3
 801c9f6:	4770      	bx	lr

0801c9f8 <_fini>:
 801c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9fa:	46c0      	nop			@ (mov r8, r8)
 801c9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9fe:	bc08      	pop	{r3}
 801ca00:	469e      	mov	lr, r3
 801ca02:	4770      	bx	lr
 801ca04:	0000      	movs	r0, r0
	...

0801ca08 <__FLASH_Program_Fast_veneer>:
 801ca08:	b401      	push	{r0}
 801ca0a:	4802      	ldr	r0, [pc, #8]	@ (801ca14 <__FLASH_Program_Fast_veneer+0xc>)
 801ca0c:	4684      	mov	ip, r0
 801ca0e:	bc01      	pop	{r0}
 801ca10:	4760      	bx	ip
 801ca12:	bf00      	nop
 801ca14:	20000489 	.word	0x20000489

Disassembly of section .data:

20000000 <P.2>:
20000000:	00000000 3ff00000                       .......?

20000008 <use_sensor1.6>:
20000008:	                                         ..

2000000a <rad_ratio>:
2000000a:	                                         ..

2000000c <USB_rev_buff>:
2000000c:	000000ff 00000000 00000000 00000000     ................
	...

2000004c <Index_num>:
2000004c:	00000001                                ....

20000050 <SystemCoreClock>:
20000050:	003d0900                                ..=.

20000054 <csv_file_name>:
20000054:	0801f3a1                                ....

20000058 <log_csv>:
20000058:	0801f3ae 0801eaff 08020010 08020010     ................
20000068:	08020010 00000000 0801f3b6 00000000     ................
20000078:	00000000 0801ec61 0801ec68 00000000     ....a...h.......
20000088:	00000100 00000000 00314852 00000000     ........RH1.....
	...
200000b8:	00000001 00324852 00000000 00000000     ....RH2.........
	...
200000e4:	00000001 00314854 00000000 00000000     ....TH1.........
	...
20000110:	00000001 00324854 00000000 00000000     ....TH2.........
	...
2000013c:	00000001 00314c54 00000000 00000000     ....TL1.........
	...
2000016c:	00324c54 00000000 00000000 00000000     TL2.............
	...

200001fc <pdf_file_name>:
200001fc:	0801ffc2                                ....

20000200 <g_temp_axis_min>:
20000200:	c1200000                                .. .

20000204 <uwTickFreq>:
20000204:	00000001                                ....

20000208 <uwTickPrio>:
20000208:	00000004                                ....

2000020c <_ux_system_slave_class_hid_name>:
2000020c:	735f7875 6576616c 616c635f 685f7373     ux_slave_class_h
2000021c:	                                         id.

2000021f <_ux_system_slave_class_storage_name>:
2000021f:	735f7875 6576616c 616c635f 735f7373     ux_slave_class_s
2000022f:	61726f74                                 torage.

20000236 <_ux_system_bos_descriptor_structure>:
20000236:	01020101                                ....

2000023a <_ux_system_interface_descriptor_structure>:
2000023a:	01010101 01010101                        .........

20000243 <_ux_system_configuration_descriptor_structure>:
20000243:	01020101 01010101                       ........

2000024b <_ux_system_device_descriptor_structure>:
2000024b:	01020101 02010101 01010202               ..............

20000259 <_ux_system_endpoint_descriptor_structure>:
20000259:	01010101                                 ......

2000025f <_ux_system_slave_class_storage_product_serial>:
2000025f:	34333231 38373635 32313039 36353433     1234567890123456
2000026f:	30393837                                 7890.

20000274 <_ux_system_slave_class_storage_product_rev>:
20000274:	30303032                                 2000.

20000279 <_ux_system_slave_class_storage_product_id>:
20000279:	58425355 6f747320 65676172 76656420     USBX storage dev
	...

2000028a <_ux_system_slave_class_storage_vendor_id>:
2000028a:	72757a41 4f545265                        AzureRTO..

20000294 <USBD_CustomHID_ReportDesc>:
20000294:	09ff0006 1501a101 00ff2600 40950875     .........&..u..@
200002a4:	02810109 01094095 01950291 02b10109     .....@..........
200002b4:	                                         .

200002b5 <UserClassInstance>:
200002b5:	00000103 00000000                        ...........

200002c0 <__sglue>:
200002c0:	00000000 00000003 200066b0              .........f. 

200002cc <_impure_ptr>:
200002cc:	200002d0                                ... 

200002d0 <_impure_data>:
200002d0:	00000000 200066b0 20006718 20006780     .....f. .g. .g. 
	...

2000031c <__global_locale>:
2000031c:	00000043 00000000 00000000 00000000     C...............
	...
2000033c:	00000043 00000000 00000000 00000000     C...............
	...
2000035c:	00000043 00000000 00000000 00000000     C...............
	...
2000037c:	00000043 00000000 00000000 00000000     C...............
	...
2000039c:	00000043 00000000 00000000 00000000     C...............
	...
200003bc:	00000043 00000000 00000000 00000000     C...............
	...
200003dc:	00000043 00000000 00000000 00000000     C...............
	...
200003fc:	0801c65f 0801c5db 00000000 08020678     _...........x...
2000040c:	0802010d 0801f3a0 0801f3a0 0801f3a0     ................
2000041c:	0801f3a0 0801f3a0 0801f3a0 0801f3a0     ................
2000042c:	0801f3a0 0801f3a0 ffffffff ffffffff     ................
2000043c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000464:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000488 <FLASH_Program_Fast>:
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000488:	2280      	movs	r2, #128	@ 0x80
2000048a:	4b0c      	ldr	r3, [pc, #48]	@ (200004bc <FLASH_Program_Fast+0x34>)
{
2000048c:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048e:	695c      	ldr	r4, [r3, #20]
20000490:	02d2      	lsls	r2, r2, #11
20000492:	4322      	orrs	r2, r4
20000494:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000496:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000049a:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000049c:	1c4c      	adds	r4, r1, #1
2000049e:	34ff      	adds	r4, #255	@ 0xff
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a0:	1a40      	subs	r0, r0, r1
200004a2:	680d      	ldr	r5, [r1, #0]
200004a4:	5045      	str	r5, [r0, r1]
    src += 4U;
200004a6:	3104      	adds	r1, #4
  while (index < 64U)
200004a8:	42a1      	cmp	r1, r4
200004aa:	d1fa      	bne.n	200004a2 <FLASH_Program_Fast+0x1a>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ac:	2180      	movs	r1, #128	@ 0x80
200004ae:	0249      	lsls	r1, r1, #9
200004b0:	6918      	ldr	r0, [r3, #16]
200004b2:	4208      	tst	r0, r1
200004b4:	d1fc      	bne.n	200004b0 <FLASH_Program_Fast+0x28>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004b6:	f382 8810 	msr	PRIMASK, r2
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ba:	bd30      	pop	{r4, r5, pc}
200004bc:	40022000 	.word	0x40022000
