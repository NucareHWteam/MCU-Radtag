
RadTag8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c4b0  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b9c  0801c570  0801c570  0001d570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802010c  0802010c  000224c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802010c  0802010c  0002110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020114  08020114  000224c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020114  08020114  00021114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020118  08020118  00021118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c0  20000000  0802011c  00022000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00006360  200004c0  080205dc  000224c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006820  080205dc  00022820  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00089e78  00000000  00000000  000224e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010a71  00000000  00000000  000ac360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00021a90  00000000  00000000  000bcdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002df0  00000000  00000000  000de868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003271  00000000  00000000  000e1658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035740  00000000  00000000  000e48c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006ef39  00000000  00000000  0011a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efddb  00000000  00000000  00188f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00278d1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008684  00000000  00000000  00278d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  002813e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004c0 	.word	0x200004c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c548 	.word	0x0801c548

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c4 	.word	0x200004c4
 8000104:	0801c548 	.word	0x0801c548

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f002 f989 	bl	800277c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f002 f8cd 	bl	8002614 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f97b 	bl	800277c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f002 f971 	bl	800277c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f8f7 	bl	800269c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f8ed 	bl	800269c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	0008      	movs	r0, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 fceb 	bl	8000eb4 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fc73 	bl	8000dd4 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fcdd 	bl	8000eb4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fcd3 	bl	8000eb4 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc81 	bl	8000e24 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fc77 	bl	8000e24 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__clzsi2>:
 8000544:	211c      	movs	r1, #28
 8000546:	2301      	movs	r3, #1
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	4298      	cmp	r0, r3
 800054c:	d301      	bcc.n	8000552 <__clzsi2+0xe>
 800054e:	0c00      	lsrs	r0, r0, #16
 8000550:	3910      	subs	r1, #16
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	4298      	cmp	r0, r3
 8000556:	d301      	bcc.n	800055c <__clzsi2+0x18>
 8000558:	0a00      	lsrs	r0, r0, #8
 800055a:	3908      	subs	r1, #8
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	4298      	cmp	r0, r3
 8000560:	d301      	bcc.n	8000566 <__clzsi2+0x22>
 8000562:	0900      	lsrs	r0, r0, #4
 8000564:	3904      	subs	r1, #4
 8000566:	a202      	add	r2, pc, #8	@ (adr r2, 8000570 <__clzsi2+0x2c>)
 8000568:	5c10      	ldrb	r0, [r2, r0]
 800056a:	1840      	adds	r0, r0, r1
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	02020304 	.word	0x02020304
 8000574:	01010101 	.word	0x01010101
	...

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffead 	.word	0xfffffead
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f83c 	bl	800062c <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	@ 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffb2 	bl	8000530 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f001 f88b 	bl	80016ec <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	@ 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fe0b 	bl	80011f8 <__aeabi_fsub>
 80005e2:	f001 f883 	bl	80016ec <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	@ 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff5f 	bl	80004bc <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f003 f839 	bl	800367c <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f002 fc06 	bl	8002e24 <__aeabi_dsub>
 8000618:	f003 f830 	bl	800367c <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	4657      	mov	r7, sl
 8000630:	464e      	mov	r6, r9
 8000632:	4645      	mov	r5, r8
 8000634:	46de      	mov	lr, fp
 8000636:	b5e0      	push	{r5, r6, r7, lr}
 8000638:	0004      	movs	r4, r0
 800063a:	000d      	movs	r5, r1
 800063c:	4692      	mov	sl, r2
 800063e:	4699      	mov	r9, r3
 8000640:	b083      	sub	sp, #12
 8000642:	428b      	cmp	r3, r1
 8000644:	d830      	bhi.n	80006a8 <__udivmoddi4+0x7c>
 8000646:	d02d      	beq.n	80006a4 <__udivmoddi4+0x78>
 8000648:	4649      	mov	r1, r9
 800064a:	4650      	mov	r0, sl
 800064c:	f003 f96e 	bl	800392c <__clzdi2>
 8000650:	0029      	movs	r1, r5
 8000652:	0006      	movs	r6, r0
 8000654:	0020      	movs	r0, r4
 8000656:	f003 f969 	bl	800392c <__clzdi2>
 800065a:	1a33      	subs	r3, r6, r0
 800065c:	4698      	mov	r8, r3
 800065e:	3b20      	subs	r3, #32
 8000660:	d434      	bmi.n	80006cc <__udivmoddi4+0xa0>
 8000662:	469b      	mov	fp, r3
 8000664:	4653      	mov	r3, sl
 8000666:	465a      	mov	r2, fp
 8000668:	4093      	lsls	r3, r2
 800066a:	4642      	mov	r2, r8
 800066c:	001f      	movs	r7, r3
 800066e:	4653      	mov	r3, sl
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d83b      	bhi.n	80006f0 <__udivmoddi4+0xc4>
 8000678:	42af      	cmp	r7, r5
 800067a:	d100      	bne.n	800067e <__udivmoddi4+0x52>
 800067c:	e079      	b.n	8000772 <__udivmoddi4+0x146>
 800067e:	465b      	mov	r3, fp
 8000680:	1ba4      	subs	r4, r4, r6
 8000682:	41bd      	sbcs	r5, r7
 8000684:	2b00      	cmp	r3, #0
 8000686:	da00      	bge.n	800068a <__udivmoddi4+0x5e>
 8000688:	e076      	b.n	8000778 <__udivmoddi4+0x14c>
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	465a      	mov	r2, fp
 8000696:	4093      	lsls	r3, r2
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	4642      	mov	r2, r8
 800069e:	4093      	lsls	r3, r2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	e029      	b.n	80006f8 <__udivmoddi4+0xcc>
 80006a4:	4282      	cmp	r2, r0
 80006a6:	d9cf      	bls.n	8000648 <__udivmoddi4+0x1c>
 80006a8:	2200      	movs	r2, #0
 80006aa:	2300      	movs	r3, #0
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <__udivmoddi4+0x8e>
 80006b6:	601c      	str	r4, [r3, #0]
 80006b8:	605d      	str	r5, [r3, #4]
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	b003      	add	sp, #12
 80006c0:	bcf0      	pop	{r4, r5, r6, r7}
 80006c2:	46bb      	mov	fp, r7
 80006c4:	46b2      	mov	sl, r6
 80006c6:	46a9      	mov	r9, r5
 80006c8:	46a0      	mov	r8, r4
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	4642      	mov	r2, r8
 80006ce:	469b      	mov	fp, r3
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	4652      	mov	r2, sl
 80006d6:	40da      	lsrs	r2, r3
 80006d8:	4641      	mov	r1, r8
 80006da:	0013      	movs	r3, r2
 80006dc:	464a      	mov	r2, r9
 80006de:	408a      	lsls	r2, r1
 80006e0:	0017      	movs	r7, r2
 80006e2:	4642      	mov	r2, r8
 80006e4:	431f      	orrs	r7, r3
 80006e6:	4653      	mov	r3, sl
 80006e8:	4093      	lsls	r3, r2
 80006ea:	001e      	movs	r6, r3
 80006ec:	42af      	cmp	r7, r5
 80006ee:	d9c3      	bls.n	8000678 <__udivmoddi4+0x4c>
 80006f0:	2200      	movs	r2, #0
 80006f2:	2300      	movs	r3, #0
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	4643      	mov	r3, r8
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0d8      	beq.n	80006b0 <__udivmoddi4+0x84>
 80006fe:	07fb      	lsls	r3, r7, #31
 8000700:	0872      	lsrs	r2, r6, #1
 8000702:	431a      	orrs	r2, r3
 8000704:	4646      	mov	r6, r8
 8000706:	087b      	lsrs	r3, r7, #1
 8000708:	e00e      	b.n	8000728 <__udivmoddi4+0xfc>
 800070a:	42ab      	cmp	r3, r5
 800070c:	d101      	bne.n	8000712 <__udivmoddi4+0xe6>
 800070e:	42a2      	cmp	r2, r4
 8000710:	d80c      	bhi.n	800072c <__udivmoddi4+0x100>
 8000712:	1aa4      	subs	r4, r4, r2
 8000714:	419d      	sbcs	r5, r3
 8000716:	2001      	movs	r0, #1
 8000718:	1924      	adds	r4, r4, r4
 800071a:	416d      	adcs	r5, r5
 800071c:	2100      	movs	r1, #0
 800071e:	3e01      	subs	r6, #1
 8000720:	1824      	adds	r4, r4, r0
 8000722:	414d      	adcs	r5, r1
 8000724:	2e00      	cmp	r6, #0
 8000726:	d006      	beq.n	8000736 <__udivmoddi4+0x10a>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d9ee      	bls.n	800070a <__udivmoddi4+0xde>
 800072c:	3e01      	subs	r6, #1
 800072e:	1924      	adds	r4, r4, r4
 8000730:	416d      	adcs	r5, r5
 8000732:	2e00      	cmp	r6, #0
 8000734:	d1f8      	bne.n	8000728 <__udivmoddi4+0xfc>
 8000736:	9800      	ldr	r0, [sp, #0]
 8000738:	9901      	ldr	r1, [sp, #4]
 800073a:	465b      	mov	r3, fp
 800073c:	1900      	adds	r0, r0, r4
 800073e:	4169      	adcs	r1, r5
 8000740:	2b00      	cmp	r3, #0
 8000742:	db24      	blt.n	800078e <__udivmoddi4+0x162>
 8000744:	002b      	movs	r3, r5
 8000746:	465a      	mov	r2, fp
 8000748:	4644      	mov	r4, r8
 800074a:	40d3      	lsrs	r3, r2
 800074c:	002a      	movs	r2, r5
 800074e:	40e2      	lsrs	r2, r4
 8000750:	001c      	movs	r4, r3
 8000752:	465b      	mov	r3, fp
 8000754:	0015      	movs	r5, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	db2a      	blt.n	80007b0 <__udivmoddi4+0x184>
 800075a:	0026      	movs	r6, r4
 800075c:	409e      	lsls	r6, r3
 800075e:	0033      	movs	r3, r6
 8000760:	0026      	movs	r6, r4
 8000762:	4647      	mov	r7, r8
 8000764:	40be      	lsls	r6, r7
 8000766:	0032      	movs	r2, r6
 8000768:	1a80      	subs	r0, r0, r2
 800076a:	4199      	sbcs	r1, r3
 800076c:	9000      	str	r0, [sp, #0]
 800076e:	9101      	str	r1, [sp, #4]
 8000770:	e79e      	b.n	80006b0 <__udivmoddi4+0x84>
 8000772:	42a3      	cmp	r3, r4
 8000774:	d8bc      	bhi.n	80006f0 <__udivmoddi4+0xc4>
 8000776:	e782      	b.n	800067e <__udivmoddi4+0x52>
 8000778:	4642      	mov	r2, r8
 800077a:	2320      	movs	r3, #32
 800077c:	2100      	movs	r1, #0
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	9100      	str	r1, [sp, #0]
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	40da      	lsrs	r2, r3
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	e785      	b.n	800069a <__udivmoddi4+0x6e>
 800078e:	4642      	mov	r2, r8
 8000790:	2320      	movs	r3, #32
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	002a      	movs	r2, r5
 8000796:	4646      	mov	r6, r8
 8000798:	409a      	lsls	r2, r3
 800079a:	0023      	movs	r3, r4
 800079c:	40f3      	lsrs	r3, r6
 800079e:	4644      	mov	r4, r8
 80007a0:	4313      	orrs	r3, r2
 80007a2:	002a      	movs	r2, r5
 80007a4:	40e2      	lsrs	r2, r4
 80007a6:	001c      	movs	r4, r3
 80007a8:	465b      	mov	r3, fp
 80007aa:	0015      	movs	r5, r2
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dad4      	bge.n	800075a <__udivmoddi4+0x12e>
 80007b0:	4642      	mov	r2, r8
 80007b2:	002f      	movs	r7, r5
 80007b4:	2320      	movs	r3, #32
 80007b6:	0026      	movs	r6, r4
 80007b8:	4097      	lsls	r7, r2
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	40de      	lsrs	r6, r3
 80007be:	003b      	movs	r3, r7
 80007c0:	4333      	orrs	r3, r6
 80007c2:	e7cd      	b.n	8000760 <__udivmoddi4+0x134>

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	024b      	lsls	r3, r1, #9
 80007c8:	0a5a      	lsrs	r2, r3, #9
 80007ca:	4694      	mov	ip, r2
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	0fc9      	lsrs	r1, r1, #31
 80007d0:	46ce      	mov	lr, r9
 80007d2:	4647      	mov	r7, r8
 80007d4:	4689      	mov	r9, r1
 80007d6:	0045      	lsls	r5, r0, #1
 80007d8:	0246      	lsls	r6, r0, #9
 80007da:	0e2d      	lsrs	r5, r5, #24
 80007dc:	0e12      	lsrs	r2, r2, #24
 80007de:	b580      	push	{r7, lr}
 80007e0:	0999      	lsrs	r1, r3, #6
 80007e2:	0a77      	lsrs	r7, r6, #9
 80007e4:	0fc4      	lsrs	r4, r0, #31
 80007e6:	09b6      	lsrs	r6, r6, #6
 80007e8:	1aab      	subs	r3, r5, r2
 80007ea:	454c      	cmp	r4, r9
 80007ec:	d020      	beq.n	8000830 <__aeabi_fadd+0x6c>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dd0c      	ble.n	800080c <__aeabi_fadd+0x48>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d134      	bne.n	8000860 <__aeabi_fadd+0x9c>
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d02a      	beq.n	8000850 <__aeabi_fadd+0x8c>
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x3e>
 8000800:	e08f      	b.n	8000922 <__aeabi_fadd+0x15e>
 8000802:	2bff      	cmp	r3, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e0cd      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000808:	0013      	movs	r3, r2
 800080a:	e02f      	b.n	800086c <__aeabi_fadd+0xa8>
 800080c:	2b00      	cmp	r3, #0
 800080e:	d060      	beq.n	80008d2 <__aeabi_fadd+0x10e>
 8000810:	1b53      	subs	r3, r2, r5
 8000812:	2d00      	cmp	r5, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x54>
 8000816:	e0ee      	b.n	80009f6 <__aeabi_fadd+0x232>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x5a>
 800081c:	e13e      	b.n	8000a9c <__aeabi_fadd+0x2d8>
 800081e:	1e5c      	subs	r4, r3, #1
 8000820:	2b01      	cmp	r3, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x62>
 8000824:	e16b      	b.n	8000afe <__aeabi_fadd+0x33a>
 8000826:	2bff      	cmp	r3, #255	@ 0xff
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x68>
 800082a:	e0b9      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 800082c:	0023      	movs	r3, r4
 800082e:	e0e7      	b.n	8000a00 <__aeabi_fadd+0x23c>
 8000830:	2b00      	cmp	r3, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_fadd+0x72>
 8000834:	e0a4      	b.n	8000980 <__aeabi_fadd+0x1bc>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d069      	beq.n	800090e <__aeabi_fadd+0x14a>
 800083a:	2dff      	cmp	r5, #255	@ 0xff
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x7c>
 800083e:	e0b1      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	04d2      	lsls	r2, r2, #19
 8000844:	4311      	orrs	r1, r2
 8000846:	2b1b      	cmp	r3, #27
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e0e9      	b.n	8000a20 <__aeabi_fadd+0x25c>
 800084c:	002b      	movs	r3, r5
 800084e:	3605      	adds	r6, #5
 8000850:	08f7      	lsrs	r7, r6, #3
 8000852:	2bff      	cmp	r3, #255	@ 0xff
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x94>
 8000856:	e0a5      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000858:	027a      	lsls	r2, r7, #9
 800085a:	0a52      	lsrs	r2, r2, #9
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	e030      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000860:	2dff      	cmp	r5, #255	@ 0xff
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0xa2>
 8000864:	e09e      	b.n	80009a4 <__aeabi_fadd+0x1e0>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	04d2      	lsls	r2, r2, #19
 800086a:	4311      	orrs	r1, r2
 800086c:	2001      	movs	r0, #1
 800086e:	2b1b      	cmp	r3, #27
 8000870:	dc08      	bgt.n	8000884 <__aeabi_fadd+0xc0>
 8000872:	0008      	movs	r0, r1
 8000874:	2220      	movs	r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4099      	lsls	r1, r3
 800087c:	000b      	movs	r3, r1
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	4318      	orrs	r0, r3
 8000884:	1a36      	subs	r6, r6, r0
 8000886:	0173      	lsls	r3, r6, #5
 8000888:	d400      	bmi.n	800088c <__aeabi_fadd+0xc8>
 800088a:	e071      	b.n	8000970 <__aeabi_fadd+0x1ac>
 800088c:	01b6      	lsls	r6, r6, #6
 800088e:	09b7      	lsrs	r7, r6, #6
 8000890:	0038      	movs	r0, r7
 8000892:	f7ff fe57 	bl	8000544 <__clzsi2>
 8000896:	003b      	movs	r3, r7
 8000898:	3805      	subs	r0, #5
 800089a:	4083      	lsls	r3, r0
 800089c:	4285      	cmp	r5, r0
 800089e:	dd4d      	ble.n	800093c <__aeabi_fadd+0x178>
 80008a0:	4eb4      	ldr	r6, [pc, #720]	@ (8000b74 <__aeabi_fadd+0x3b0>)
 80008a2:	1a2d      	subs	r5, r5, r0
 80008a4:	401e      	ands	r6, r3
 80008a6:	075a      	lsls	r2, r3, #29
 80008a8:	d068      	beq.n	800097c <__aeabi_fadd+0x1b8>
 80008aa:	220f      	movs	r2, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d064      	beq.n	800097c <__aeabi_fadd+0x1b8>
 80008b2:	3604      	adds	r6, #4
 80008b4:	0173      	lsls	r3, r6, #5
 80008b6:	d561      	bpl.n	800097c <__aeabi_fadd+0x1b8>
 80008b8:	1c68      	adds	r0, r5, #1
 80008ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80008bc:	d154      	bne.n	8000968 <__aeabi_fadd+0x1a4>
 80008be:	20ff      	movs	r0, #255	@ 0xff
 80008c0:	2200      	movs	r2, #0
 80008c2:	05c0      	lsls	r0, r0, #23
 80008c4:	4310      	orrs	r0, r2
 80008c6:	07e4      	lsls	r4, r4, #31
 80008c8:	4320      	orrs	r0, r4
 80008ca:	bcc0      	pop	{r6, r7}
 80008cc:	46b9      	mov	r9, r7
 80008ce:	46b0      	mov	r8, r6
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d2:	22fe      	movs	r2, #254	@ 0xfe
 80008d4:	4690      	mov	r8, r2
 80008d6:	1c68      	adds	r0, r5, #1
 80008d8:	0002      	movs	r2, r0
 80008da:	4640      	mov	r0, r8
 80008dc:	4210      	tst	r0, r2
 80008de:	d16b      	bne.n	80009b8 <__aeabi_fadd+0x1f4>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fadd+0x122>
 80008e4:	e0dd      	b.n	8000aa2 <__aeabi_fadd+0x2de>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x128>
 80008ea:	e102      	b.n	8000af2 <__aeabi_fadd+0x32e>
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d0b3      	beq.n	8000858 <__aeabi_fadd+0x94>
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	1a77      	subs	r7, r6, r1
 80008f4:	04d2      	lsls	r2, r2, #19
 80008f6:	4217      	tst	r7, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x138>
 80008fa:	e136      	b.n	8000b6a <__aeabi_fadd+0x3a6>
 80008fc:	464c      	mov	r4, r9
 80008fe:	1b8e      	subs	r6, r1, r6
 8000900:	d061      	beq.n	80009c6 <__aeabi_fadd+0x202>
 8000902:	2001      	movs	r0, #1
 8000904:	4216      	tst	r6, r2
 8000906:	d130      	bne.n	800096a <__aeabi_fadd+0x1a6>
 8000908:	2300      	movs	r3, #0
 800090a:	08f7      	lsrs	r7, r6, #3
 800090c:	e7a4      	b.n	8000858 <__aeabi_fadd+0x94>
 800090e:	2900      	cmp	r1, #0
 8000910:	d09e      	beq.n	8000850 <__aeabi_fadd+0x8c>
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2b01      	cmp	r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x156>
 8000918:	e0ca      	b.n	8000ab0 <__aeabi_fadd+0x2ec>
 800091a:	2bff      	cmp	r3, #255	@ 0xff
 800091c:	d042      	beq.n	80009a4 <__aeabi_fadd+0x1e0>
 800091e:	0013      	movs	r3, r2
 8000920:	e791      	b.n	8000846 <__aeabi_fadd+0x82>
 8000922:	1a71      	subs	r1, r6, r1
 8000924:	014b      	lsls	r3, r1, #5
 8000926:	d400      	bmi.n	800092a <__aeabi_fadd+0x166>
 8000928:	e0d1      	b.n	8000ace <__aeabi_fadd+0x30a>
 800092a:	018f      	lsls	r7, r1, #6
 800092c:	09bf      	lsrs	r7, r7, #6
 800092e:	0038      	movs	r0, r7
 8000930:	f7ff fe08 	bl	8000544 <__clzsi2>
 8000934:	003b      	movs	r3, r7
 8000936:	3805      	subs	r0, #5
 8000938:	4083      	lsls	r3, r0
 800093a:	2501      	movs	r5, #1
 800093c:	2220      	movs	r2, #32
 800093e:	1b40      	subs	r0, r0, r5
 8000940:	3001      	adds	r0, #1
 8000942:	1a12      	subs	r2, r2, r0
 8000944:	001e      	movs	r6, r3
 8000946:	4093      	lsls	r3, r2
 8000948:	40c6      	lsrs	r6, r0
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	4193      	sbcs	r3, r2
 800094e:	431e      	orrs	r6, r3
 8000950:	d039      	beq.n	80009c6 <__aeabi_fadd+0x202>
 8000952:	0773      	lsls	r3, r6, #29
 8000954:	d100      	bne.n	8000958 <__aeabi_fadd+0x194>
 8000956:	e11b      	b.n	8000b90 <__aeabi_fadd+0x3cc>
 8000958:	230f      	movs	r3, #15
 800095a:	2500      	movs	r5, #0
 800095c:	4033      	ands	r3, r6
 800095e:	2b04      	cmp	r3, #4
 8000960:	d1a7      	bne.n	80008b2 <__aeabi_fadd+0xee>
 8000962:	2001      	movs	r0, #1
 8000964:	0172      	lsls	r2, r6, #5
 8000966:	d57c      	bpl.n	8000a62 <__aeabi_fadd+0x29e>
 8000968:	b2c0      	uxtb	r0, r0
 800096a:	01b2      	lsls	r2, r6, #6
 800096c:	0a52      	lsrs	r2, r2, #9
 800096e:	e7a8      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000970:	0773      	lsls	r3, r6, #29
 8000972:	d003      	beq.n	800097c <__aeabi_fadd+0x1b8>
 8000974:	230f      	movs	r3, #15
 8000976:	4033      	ands	r3, r6
 8000978:	2b04      	cmp	r3, #4
 800097a:	d19a      	bne.n	80008b2 <__aeabi_fadd+0xee>
 800097c:	002b      	movs	r3, r5
 800097e:	e767      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <__aeabi_fadd+0x208>
 8000984:	1b53      	subs	r3, r2, r5
 8000986:	2d00      	cmp	r5, #0
 8000988:	d17b      	bne.n	8000a82 <__aeabi_fadd+0x2be>
 800098a:	2e00      	cmp	r6, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x1cc>
 800098e:	e086      	b.n	8000a9e <__aeabi_fadd+0x2da>
 8000990:	1e5d      	subs	r5, r3, #1
 8000992:	2b01      	cmp	r3, #1
 8000994:	d100      	bne.n	8000998 <__aeabi_fadd+0x1d4>
 8000996:	e08b      	b.n	8000ab0 <__aeabi_fadd+0x2ec>
 8000998:	2bff      	cmp	r3, #255	@ 0xff
 800099a:	d002      	beq.n	80009a2 <__aeabi_fadd+0x1de>
 800099c:	002b      	movs	r3, r5
 800099e:	e075      	b.n	8000a8c <__aeabi_fadd+0x2c8>
 80009a0:	464c      	mov	r4, r9
 80009a2:	4667      	mov	r7, ip
 80009a4:	2f00      	cmp	r7, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x1e6>
 80009a8:	e789      	b.n	80008be <__aeabi_fadd+0xfa>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	433a      	orrs	r2, r7
 80009b0:	0252      	lsls	r2, r2, #9
 80009b2:	20ff      	movs	r0, #255	@ 0xff
 80009b4:	0a52      	lsrs	r2, r2, #9
 80009b6:	e784      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009b8:	1a77      	subs	r7, r6, r1
 80009ba:	017b      	lsls	r3, r7, #5
 80009bc:	d46b      	bmi.n	8000a96 <__aeabi_fadd+0x2d2>
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e765      	b.n	8000890 <__aeabi_fadd+0xcc>
 80009c4:	2400      	movs	r4, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	e77a      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009cc:	22fe      	movs	r2, #254	@ 0xfe
 80009ce:	1c6b      	adds	r3, r5, #1
 80009d0:	421a      	tst	r2, r3
 80009d2:	d149      	bne.n	8000a68 <__aeabi_fadd+0x2a4>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d000      	beq.n	80009da <__aeabi_fadd+0x216>
 80009d8:	e09f      	b.n	8000b1a <__aeabi_fadd+0x356>
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x21c>
 80009de:	e0ba      	b.n	8000b56 <__aeabi_fadd+0x392>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x222>
 80009e4:	e0cf      	b.n	8000b86 <__aeabi_fadd+0x3c2>
 80009e6:	1872      	adds	r2, r6, r1
 80009e8:	0153      	lsls	r3, r2, #5
 80009ea:	d400      	bmi.n	80009ee <__aeabi_fadd+0x22a>
 80009ec:	e0cd      	b.n	8000b8a <__aeabi_fadd+0x3c6>
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	2001      	movs	r0, #1
 80009f2:	0a52      	lsrs	r2, r2, #9
 80009f4:	e765      	b.n	80008c2 <__aeabi_fadd+0xfe>
 80009f6:	2aff      	cmp	r2, #255	@ 0xff
 80009f8:	d0d2      	beq.n	80009a0 <__aeabi_fadd+0x1dc>
 80009fa:	2080      	movs	r0, #128	@ 0x80
 80009fc:	04c0      	lsls	r0, r0, #19
 80009fe:	4306      	orrs	r6, r0
 8000a00:	2001      	movs	r0, #1
 8000a02:	2b1b      	cmp	r3, #27
 8000a04:	dc08      	bgt.n	8000a18 <__aeabi_fadd+0x254>
 8000a06:	0030      	movs	r0, r6
 8000a08:	2420      	movs	r4, #32
 8000a0a:	40d8      	lsrs	r0, r3
 8000a0c:	1ae3      	subs	r3, r4, r3
 8000a0e:	409e      	lsls	r6, r3
 8000a10:	0033      	movs	r3, r6
 8000a12:	1e5c      	subs	r4, r3, #1
 8000a14:	41a3      	sbcs	r3, r4
 8000a16:	4318      	orrs	r0, r3
 8000a18:	464c      	mov	r4, r9
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	1a0e      	subs	r6, r1, r0
 8000a1e:	e732      	b.n	8000886 <__aeabi_fadd+0xc2>
 8000a20:	0008      	movs	r0, r1
 8000a22:	2220      	movs	r2, #32
 8000a24:	40d8      	lsrs	r0, r3
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	4099      	lsls	r1, r3
 8000a2a:	000b      	movs	r3, r1
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	4303      	orrs	r3, r0
 8000a32:	18f6      	adds	r6, r6, r3
 8000a34:	0173      	lsls	r3, r6, #5
 8000a36:	d59b      	bpl.n	8000970 <__aeabi_fadd+0x1ac>
 8000a38:	3501      	adds	r5, #1
 8000a3a:	2dff      	cmp	r5, #255	@ 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x27c>
 8000a3e:	e73e      	b.n	80008be <__aeabi_fadd+0xfa>
 8000a40:	2301      	movs	r3, #1
 8000a42:	494d      	ldr	r1, [pc, #308]	@ (8000b78 <__aeabi_fadd+0x3b4>)
 8000a44:	0872      	lsrs	r2, r6, #1
 8000a46:	4033      	ands	r3, r6
 8000a48:	400a      	ands	r2, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	0016      	movs	r6, r2
 8000a4e:	0753      	lsls	r3, r2, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fadd+0x298>
 8000a52:	230f      	movs	r3, #15
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fadd+0x298>
 8000a5a:	e72a      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000a5c:	0173      	lsls	r3, r6, #5
 8000a5e:	d500      	bpl.n	8000a62 <__aeabi_fadd+0x29e>
 8000a60:	e72a      	b.n	80008b8 <__aeabi_fadd+0xf4>
 8000a62:	002b      	movs	r3, r5
 8000a64:	08f7      	lsrs	r7, r6, #3
 8000a66:	e6f7      	b.n	8000858 <__aeabi_fadd+0x94>
 8000a68:	2bff      	cmp	r3, #255	@ 0xff
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e727      	b.n	80008be <__aeabi_fadd+0xfa>
 8000a6e:	1871      	adds	r1, r6, r1
 8000a70:	0849      	lsrs	r1, r1, #1
 8000a72:	074a      	lsls	r2, r1, #29
 8000a74:	d02f      	beq.n	8000ad6 <__aeabi_fadd+0x312>
 8000a76:	220f      	movs	r2, #15
 8000a78:	400a      	ands	r2, r1
 8000a7a:	2a04      	cmp	r2, #4
 8000a7c:	d02b      	beq.n	8000ad6 <__aeabi_fadd+0x312>
 8000a7e:	1d0e      	adds	r6, r1, #4
 8000a80:	e6e6      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000a82:	2aff      	cmp	r2, #255	@ 0xff
 8000a84:	d08d      	beq.n	80009a2 <__aeabi_fadd+0x1de>
 8000a86:	2080      	movs	r0, #128	@ 0x80
 8000a88:	04c0      	lsls	r0, r0, #19
 8000a8a:	4306      	orrs	r6, r0
 8000a8c:	2b1b      	cmp	r3, #27
 8000a8e:	dd24      	ble.n	8000ada <__aeabi_fadd+0x316>
 8000a90:	0013      	movs	r3, r2
 8000a92:	1d4e      	adds	r6, r1, #5
 8000a94:	e6dc      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000a96:	464c      	mov	r4, r9
 8000a98:	1b8f      	subs	r7, r1, r6
 8000a9a:	e6f9      	b.n	8000890 <__aeabi_fadd+0xcc>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	000e      	movs	r6, r1
 8000aa0:	e6d6      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d149      	bne.n	8000b3a <__aeabi_fadd+0x376>
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d068      	beq.n	8000b7c <__aeabi_fadd+0x3b8>
 8000aaa:	4667      	mov	r7, ip
 8000aac:	464c      	mov	r4, r9
 8000aae:	e77c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000ab0:	1870      	adds	r0, r6, r1
 8000ab2:	0143      	lsls	r3, r0, #5
 8000ab4:	d574      	bpl.n	8000ba0 <__aeabi_fadd+0x3dc>
 8000ab6:	4930      	ldr	r1, [pc, #192]	@ (8000b78 <__aeabi_fadd+0x3b4>)
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	4001      	ands	r1, r0
 8000abc:	0743      	lsls	r3, r0, #29
 8000abe:	d009      	beq.n	8000ad4 <__aeabi_fadd+0x310>
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4003      	ands	r3, r0
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d005      	beq.n	8000ad4 <__aeabi_fadd+0x310>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	1d0e      	adds	r6, r1, #4
 8000acc:	e6c0      	b.n	8000850 <__aeabi_fadd+0x8c>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	08cf      	lsrs	r7, r1, #3
 8000ad2:	e6c1      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	08cf      	lsrs	r7, r1, #3
 8000ad8:	e6be      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ada:	2520      	movs	r5, #32
 8000adc:	0030      	movs	r0, r6
 8000ade:	40d8      	lsrs	r0, r3
 8000ae0:	1aeb      	subs	r3, r5, r3
 8000ae2:	409e      	lsls	r6, r3
 8000ae4:	0033      	movs	r3, r6
 8000ae6:	1e5d      	subs	r5, r3, #1
 8000ae8:	41ab      	sbcs	r3, r5
 8000aea:	4303      	orrs	r3, r0
 8000aec:	0015      	movs	r5, r2
 8000aee:	185e      	adds	r6, r3, r1
 8000af0:	e7a0      	b.n	8000a34 <__aeabi_fadd+0x270>
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fadd+0x334>
 8000af6:	e765      	b.n	80009c4 <__aeabi_fadd+0x200>
 8000af8:	464c      	mov	r4, r9
 8000afa:	4667      	mov	r7, ip
 8000afc:	e6ac      	b.n	8000858 <__aeabi_fadd+0x94>
 8000afe:	1b8f      	subs	r7, r1, r6
 8000b00:	017b      	lsls	r3, r7, #5
 8000b02:	d52e      	bpl.n	8000b62 <__aeabi_fadd+0x39e>
 8000b04:	01bf      	lsls	r7, r7, #6
 8000b06:	09bf      	lsrs	r7, r7, #6
 8000b08:	0038      	movs	r0, r7
 8000b0a:	f7ff fd1b 	bl	8000544 <__clzsi2>
 8000b0e:	003b      	movs	r3, r7
 8000b10:	3805      	subs	r0, #5
 8000b12:	4083      	lsls	r3, r0
 8000b14:	464c      	mov	r4, r9
 8000b16:	3501      	adds	r5, #1
 8000b18:	e710      	b.n	800093c <__aeabi_fadd+0x178>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fadd+0x35c>
 8000b1e:	e740      	b.n	80009a2 <__aeabi_fadd+0x1de>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fadd+0x362>
 8000b24:	e741      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	03db      	lsls	r3, r3, #15
 8000b2a:	429f      	cmp	r7, r3
 8000b2c:	d200      	bcs.n	8000b30 <__aeabi_fadd+0x36c>
 8000b2e:	e73c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	d300      	bcc.n	8000b36 <__aeabi_fadd+0x372>
 8000b34:	e739      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b36:	4667      	mov	r7, ip
 8000b38:	e737      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_fadd+0x37c>
 8000b3e:	e734      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	03db      	lsls	r3, r3, #15
 8000b44:	429f      	cmp	r7, r3
 8000b46:	d200      	bcs.n	8000b4a <__aeabi_fadd+0x386>
 8000b48:	e72f      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b4a:	459c      	cmp	ip, r3
 8000b4c:	d300      	bcc.n	8000b50 <__aeabi_fadd+0x38c>
 8000b4e:	e72c      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b50:	464c      	mov	r4, r9
 8000b52:	4667      	mov	r7, ip
 8000b54:	e729      	b.n	80009aa <__aeabi_fadd+0x1e6>
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fadd+0x398>
 8000b5a:	e734      	b.n	80009c6 <__aeabi_fadd+0x202>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	08cf      	lsrs	r7, r1, #3
 8000b60:	e67a      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b62:	464c      	mov	r4, r9
 8000b64:	2301      	movs	r3, #1
 8000b66:	08ff      	lsrs	r7, r7, #3
 8000b68:	e676      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fadd+0x3ac>
 8000b6e:	e729      	b.n	80009c4 <__aeabi_fadd+0x200>
 8000b70:	08ff      	lsrs	r7, r7, #3
 8000b72:	e671      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b74:	fbffffff 	.word	0xfbffffff
 8000b78:	7dffffff 	.word	0x7dffffff
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	2400      	movs	r4, #0
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	03d2      	lsls	r2, r2, #15
 8000b84:	e69d      	b.n	80008c2 <__aeabi_fadd+0xfe>
 8000b86:	2300      	movs	r3, #0
 8000b88:	e666      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	08d7      	lsrs	r7, r2, #3
 8000b8e:	e663      	b.n	8000858 <__aeabi_fadd+0x94>
 8000b90:	2001      	movs	r0, #1
 8000b92:	0172      	lsls	r2, r6, #5
 8000b94:	d500      	bpl.n	8000b98 <__aeabi_fadd+0x3d4>
 8000b96:	e6e7      	b.n	8000968 <__aeabi_fadd+0x1a4>
 8000b98:	0031      	movs	r1, r6
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	08cf      	lsrs	r7, r1, #3
 8000b9e:	e65b      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	08c7      	lsrs	r7, r0, #3
 8000ba4:	e658      	b.n	8000858 <__aeabi_fadd+0x94>
 8000ba6:	46c0      	nop			@ (mov r8, r8)

08000ba8 <__aeabi_fdiv>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	4646      	mov	r6, r8
 8000bac:	464f      	mov	r7, r9
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	b5c0      	push	{r6, r7, lr}
 8000bb4:	0fc3      	lsrs	r3, r0, #31
 8000bb6:	0047      	lsls	r7, r0, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	1c0e      	adds	r6, r1, #0
 8000bbc:	0a6d      	lsrs	r5, r5, #9
 8000bbe:	0e3f      	lsrs	r7, r7, #24
 8000bc0:	d05b      	beq.n	8000c7a <__aeabi_fdiv+0xd2>
 8000bc2:	2fff      	cmp	r7, #255	@ 0xff
 8000bc4:	d021      	beq.n	8000c0a <__aeabi_fdiv+0x62>
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	00ed      	lsls	r5, r5, #3
 8000bca:	04db      	lsls	r3, r3, #19
 8000bcc:	431d      	orrs	r5, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	3f7f      	subs	r7, #127	@ 0x7f
 8000bd6:	0274      	lsls	r4, r6, #9
 8000bd8:	0073      	lsls	r3, r6, #1
 8000bda:	0a64      	lsrs	r4, r4, #9
 8000bdc:	0e1b      	lsrs	r3, r3, #24
 8000bde:	0ff6      	lsrs	r6, r6, #31
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d020      	beq.n	8000c26 <__aeabi_fdiv+0x7e>
 8000be4:	2bff      	cmp	r3, #255	@ 0xff
 8000be6:	d043      	beq.n	8000c70 <__aeabi_fdiv+0xc8>
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	2000      	movs	r0, #0
 8000bec:	00e4      	lsls	r4, r4, #3
 8000bee:	04d2      	lsls	r2, r2, #19
 8000bf0:	4314      	orrs	r4, r2
 8000bf2:	3b7f      	subs	r3, #127	@ 0x7f
 8000bf4:	4642      	mov	r2, r8
 8000bf6:	1aff      	subs	r7, r7, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4072      	eors	r2, r6
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d900      	bls.n	8000c02 <__aeabi_fdiv+0x5a>
 8000c00:	e09d      	b.n	8000d3e <__aeabi_fdiv+0x196>
 8000c02:	4971      	ldr	r1, [pc, #452]	@ (8000dc8 <__aeabi_fdiv+0x220>)
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	58cb      	ldr	r3, [r1, r3]
 8000c08:	469f      	mov	pc, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d15a      	bne.n	8000cc4 <__aeabi_fdiv+0x11c>
 8000c0e:	2308      	movs	r3, #8
 8000c10:	4699      	mov	r9, r3
 8000c12:	3b06      	subs	r3, #6
 8000c14:	0274      	lsls	r4, r6, #9
 8000c16:	469a      	mov	sl, r3
 8000c18:	0073      	lsls	r3, r6, #1
 8000c1a:	27ff      	movs	r7, #255	@ 0xff
 8000c1c:	0a64      	lsrs	r4, r4, #9
 8000c1e:	0e1b      	lsrs	r3, r3, #24
 8000c20:	0ff6      	lsrs	r6, r6, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1de      	bne.n	8000be4 <__aeabi_fdiv+0x3c>
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	d13b      	bne.n	8000ca2 <__aeabi_fdiv+0xfa>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4072      	eors	r2, r6
 8000c32:	4319      	orrs	r1, r3
 8000c34:	290e      	cmp	r1, #14
 8000c36:	d818      	bhi.n	8000c6a <__aeabi_fdiv+0xc2>
 8000c38:	4864      	ldr	r0, [pc, #400]	@ (8000dcc <__aeabi_fdiv+0x224>)
 8000c3a:	0089      	lsls	r1, r1, #2
 8000c3c:	5841      	ldr	r1, [r0, r1]
 8000c3e:	468f      	mov	pc, r1
 8000c40:	4653      	mov	r3, sl
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fdiv+0xa0>
 8000c46:	e0b8      	b.n	8000dba <__aeabi_fdiv+0x212>
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d06e      	beq.n	8000d2a <__aeabi_fdiv+0x182>
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	002c      	movs	r4, r5
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d140      	bne.n	8000cd6 <__aeabi_fdiv+0x12e>
 8000c54:	2000      	movs	r0, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	05c0      	lsls	r0, r0, #23
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	07d2      	lsls	r2, r2, #31
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	bce0      	pop	{r5, r6, r7}
 8000c62:	46ba      	mov	sl, r7
 8000c64:	46b1      	mov	r9, r6
 8000c66:	46a8      	mov	r8, r5
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	20ff      	movs	r0, #255	@ 0xff
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	e7f3      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d120      	bne.n	8000cb6 <__aeabi_fdiv+0x10e>
 8000c74:	2302      	movs	r3, #2
 8000c76:	3fff      	subs	r7, #255	@ 0xff
 8000c78:	e7d8      	b.n	8000c2c <__aeabi_fdiv+0x84>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d105      	bne.n	8000c8a <__aeabi_fdiv+0xe2>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	4699      	mov	r9, r3
 8000c82:	3b03      	subs	r3, #3
 8000c84:	2700      	movs	r7, #0
 8000c86:	469a      	mov	sl, r3
 8000c88:	e7a5      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000c8a:	0028      	movs	r0, r5
 8000c8c:	f7ff fc5a 	bl	8000544 <__clzsi2>
 8000c90:	2776      	movs	r7, #118	@ 0x76
 8000c92:	1f43      	subs	r3, r0, #5
 8000c94:	409d      	lsls	r5, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	427f      	negs	r7, r7
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	1a3f      	subs	r7, r7, r0
 8000ca0:	e799      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fc4e 	bl	8000544 <__clzsi2>
 8000ca8:	1f43      	subs	r3, r0, #5
 8000caa:	409c      	lsls	r4, r3
 8000cac:	2376      	movs	r3, #118	@ 0x76
 8000cae:	425b      	negs	r3, r3
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e79e      	b.n	8000bf4 <__aeabi_fdiv+0x4c>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	464a      	mov	r2, r9
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	4691      	mov	r9, r2
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	33fc      	adds	r3, #252	@ 0xfc
 8000cc2:	e797      	b.n	8000bf4 <__aeabi_fdiv+0x4c>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	3b09      	subs	r3, #9
 8000cca:	27ff      	movs	r7, #255	@ 0xff
 8000ccc:	469a      	mov	sl, r3
 8000cce:	e782      	b.n	8000bd6 <__aeabi_fdiv+0x2e>
 8000cd0:	2803      	cmp	r0, #3
 8000cd2:	d02c      	beq.n	8000d2e <__aeabi_fdiv+0x186>
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0038      	movs	r0, r7
 8000cd8:	307f      	adds	r0, #127	@ 0x7f
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dd47      	ble.n	8000d6e <__aeabi_fdiv+0x1c6>
 8000cde:	0763      	lsls	r3, r4, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fdiv+0x144>
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4023      	ands	r3, r4
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fdiv+0x144>
 8000cea:	3404      	adds	r4, #4
 8000cec:	0123      	lsls	r3, r4, #4
 8000cee:	d503      	bpl.n	8000cf8 <__aeabi_fdiv+0x150>
 8000cf0:	0038      	movs	r0, r7
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <__aeabi_fdiv+0x228>)
 8000cf4:	3080      	adds	r0, #128	@ 0x80
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	28fe      	cmp	r0, #254	@ 0xfe
 8000cfa:	dcb6      	bgt.n	8000c6a <__aeabi_fdiv+0xc2>
 8000cfc:	01a4      	lsls	r4, r4, #6
 8000cfe:	0a64      	lsrs	r4, r4, #9
 8000d00:	b2c0      	uxtb	r0, r0
 8000d02:	e7a9      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d04:	2480      	movs	r4, #128	@ 0x80
 8000d06:	2200      	movs	r2, #0
 8000d08:	20ff      	movs	r0, #255	@ 0xff
 8000d0a:	03e4      	lsls	r4, r4, #15
 8000d0c:	e7a4      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d0e:	2380      	movs	r3, #128	@ 0x80
 8000d10:	03db      	lsls	r3, r3, #15
 8000d12:	421d      	tst	r5, r3
 8000d14:	d001      	beq.n	8000d1a <__aeabi_fdiv+0x172>
 8000d16:	421c      	tst	r4, r3
 8000d18:	d00b      	beq.n	8000d32 <__aeabi_fdiv+0x18a>
 8000d1a:	2480      	movs	r4, #128	@ 0x80
 8000d1c:	03e4      	lsls	r4, r4, #15
 8000d1e:	432c      	orrs	r4, r5
 8000d20:	0264      	lsls	r4, r4, #9
 8000d22:	4642      	mov	r2, r8
 8000d24:	20ff      	movs	r0, #255	@ 0xff
 8000d26:	0a64      	lsrs	r4, r4, #9
 8000d28:	e796      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d2a:	4646      	mov	r6, r8
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	03db      	lsls	r3, r3, #15
 8000d32:	431c      	orrs	r4, r3
 8000d34:	0264      	lsls	r4, r4, #9
 8000d36:	0032      	movs	r2, r6
 8000d38:	20ff      	movs	r0, #255	@ 0xff
 8000d3a:	0a64      	lsrs	r4, r4, #9
 8000d3c:	e78c      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000d3e:	016d      	lsls	r5, r5, #5
 8000d40:	0160      	lsls	r0, r4, #5
 8000d42:	4285      	cmp	r5, r0
 8000d44:	d22d      	bcs.n	8000da2 <__aeabi_fdiv+0x1fa>
 8000d46:	231b      	movs	r3, #27
 8000d48:	2400      	movs	r4, #0
 8000d4a:	3f01      	subs	r7, #1
 8000d4c:	2601      	movs	r6, #1
 8000d4e:	0029      	movs	r1, r5
 8000d50:	0064      	lsls	r4, r4, #1
 8000d52:	006d      	lsls	r5, r5, #1
 8000d54:	2900      	cmp	r1, #0
 8000d56:	db01      	blt.n	8000d5c <__aeabi_fdiv+0x1b4>
 8000d58:	4285      	cmp	r5, r0
 8000d5a:	d301      	bcc.n	8000d60 <__aeabi_fdiv+0x1b8>
 8000d5c:	1a2d      	subs	r5, r5, r0
 8000d5e:	4334      	orrs	r4, r6
 8000d60:	3b01      	subs	r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f3      	bne.n	8000d4e <__aeabi_fdiv+0x1a6>
 8000d66:	1e6b      	subs	r3, r5, #1
 8000d68:	419d      	sbcs	r5, r3
 8000d6a:	432c      	orrs	r4, r5
 8000d6c:	e7b3      	b.n	8000cd6 <__aeabi_fdiv+0x12e>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	1a1b      	subs	r3, r3, r0
 8000d72:	2b1b      	cmp	r3, #27
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_fdiv+0x1d0>
 8000d76:	e76d      	b.n	8000c54 <__aeabi_fdiv+0xac>
 8000d78:	0021      	movs	r1, r4
 8000d7a:	379e      	adds	r7, #158	@ 0x9e
 8000d7c:	40d9      	lsrs	r1, r3
 8000d7e:	40bc      	lsls	r4, r7
 8000d80:	000b      	movs	r3, r1
 8000d82:	1e61      	subs	r1, r4, #1
 8000d84:	418c      	sbcs	r4, r1
 8000d86:	4323      	orrs	r3, r4
 8000d88:	0759      	lsls	r1, r3, #29
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_fdiv+0x1ee>
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	4019      	ands	r1, r3
 8000d90:	2904      	cmp	r1, #4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fdiv+0x1ee>
 8000d94:	3304      	adds	r3, #4
 8000d96:	0159      	lsls	r1, r3, #5
 8000d98:	d413      	bmi.n	8000dc2 <__aeabi_fdiv+0x21a>
 8000d9a:	019b      	lsls	r3, r3, #6
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	0a5c      	lsrs	r4, r3, #9
 8000da0:	e75a      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000da2:	231a      	movs	r3, #26
 8000da4:	2401      	movs	r4, #1
 8000da6:	1a2d      	subs	r5, r5, r0
 8000da8:	e7d0      	b.n	8000d4c <__aeabi_fdiv+0x1a4>
 8000daa:	1e98      	subs	r0, r3, #2
 8000dac:	4243      	negs	r3, r0
 8000dae:	4158      	adcs	r0, r3
 8000db0:	4240      	negs	r0, r0
 8000db2:	0032      	movs	r2, r6
 8000db4:	2400      	movs	r4, #0
 8000db6:	b2c0      	uxtb	r0, r0
 8000db8:	e74e      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dba:	4642      	mov	r2, r8
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	e74a      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	e747      	b.n	8000c58 <__aeabi_fdiv+0xb0>
 8000dc8:	0801c5f4 	.word	0x0801c5f4
 8000dcc:	0801c634 	.word	0x0801c634
 8000dd0:	f7ffffff 	.word	0xf7ffffff

08000dd4 <__eqsf2>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	0042      	lsls	r2, r0, #1
 8000dd8:	024e      	lsls	r6, r1, #9
 8000dda:	004c      	lsls	r4, r1, #1
 8000ddc:	0245      	lsls	r5, r0, #9
 8000dde:	0a6d      	lsrs	r5, r5, #9
 8000de0:	0e12      	lsrs	r2, r2, #24
 8000de2:	0fc3      	lsrs	r3, r0, #31
 8000de4:	0a76      	lsrs	r6, r6, #9
 8000de6:	0e24      	lsrs	r4, r4, #24
 8000de8:	0fc9      	lsrs	r1, r1, #31
 8000dea:	2aff      	cmp	r2, #255	@ 0xff
 8000dec:	d010      	beq.n	8000e10 <__eqsf2+0x3c>
 8000dee:	2cff      	cmp	r4, #255	@ 0xff
 8000df0:	d00c      	beq.n	8000e0c <__eqsf2+0x38>
 8000df2:	2001      	movs	r0, #1
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	d10a      	bne.n	8000e0e <__eqsf2+0x3a>
 8000df8:	42b5      	cmp	r5, r6
 8000dfa:	d108      	bne.n	8000e0e <__eqsf2+0x3a>
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d00f      	beq.n	8000e20 <__eqsf2+0x4c>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d104      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e04:	0028      	movs	r0, r5
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
 8000e0a:	e000      	b.n	8000e0e <__eqsf2+0x3a>
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	2001      	movs	r0, #1
 8000e12:	2cff      	cmp	r4, #255	@ 0xff
 8000e14:	d1fb      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e16:	4335      	orrs	r5, r6
 8000e18:	d1f9      	bne.n	8000e0e <__eqsf2+0x3a>
 8000e1a:	404b      	eors	r3, r1
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	e7f6      	b.n	8000e0e <__eqsf2+0x3a>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7f4      	b.n	8000e0e <__eqsf2+0x3a>

08000e24 <__gesf2>:
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	0042      	lsls	r2, r0, #1
 8000e28:	0244      	lsls	r4, r0, #9
 8000e2a:	024d      	lsls	r5, r1, #9
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0048      	lsls	r0, r1, #1
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	0a6d      	lsrs	r5, r5, #9
 8000e36:	0e00      	lsrs	r0, r0, #24
 8000e38:	0fc9      	lsrs	r1, r1, #31
 8000e3a:	2aff      	cmp	r2, #255	@ 0xff
 8000e3c:	d018      	beq.n	8000e70 <__gesf2+0x4c>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d00a      	beq.n	8000e58 <__gesf2+0x34>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d11e      	bne.n	8000e84 <__gesf2+0x60>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d10a      	bne.n	8000e60 <__gesf2+0x3c>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d029      	beq.n	8000ea2 <__gesf2+0x7e>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d12d      	bne.n	8000eae <__gesf2+0x8a>
 8000e52:	0048      	lsls	r0, r1, #1
 8000e54:	3801      	subs	r0, #1
 8000e56:	bd30      	pop	{r4, r5, pc}
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d125      	bne.n	8000ea8 <__gesf2+0x84>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d101      	bne.n	8000e64 <__gesf2+0x40>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d0f6      	beq.n	8000e52 <__gesf2+0x2e>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d019      	beq.n	8000e9c <__gesf2+0x78>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	4318      	orrs	r0, r3
 8000e6e:	e7f2      	b.n	8000e56 <__gesf2+0x32>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d119      	bne.n	8000ea8 <__gesf2+0x84>
 8000e74:	28ff      	cmp	r0, #255	@ 0xff
 8000e76:	d1f7      	bne.n	8000e68 <__gesf2+0x44>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d115      	bne.n	8000ea8 <__gesf2+0x84>
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d1f2      	bne.n	8000e68 <__gesf2+0x44>
 8000e82:	e7e8      	b.n	8000e56 <__gesf2+0x32>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d0ef      	beq.n	8000e68 <__gesf2+0x44>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d1ed      	bne.n	8000e68 <__gesf2+0x44>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	dceb      	bgt.n	8000e68 <__gesf2+0x44>
 8000e90:	db04      	blt.n	8000e9c <__gesf2+0x78>
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	d8e8      	bhi.n	8000e68 <__gesf2+0x44>
 8000e96:	2000      	movs	r0, #0
 8000e98:	42ac      	cmp	r4, r5
 8000e9a:	d2dc      	bcs.n	8000e56 <__gesf2+0x32>
 8000e9c:	0058      	lsls	r0, r3, #1
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7d9      	b.n	8000e56 <__gesf2+0x32>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0d7      	beq.n	8000e56 <__gesf2+0x32>
 8000ea6:	e7df      	b.n	8000e68 <__gesf2+0x44>
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	4240      	negs	r0, r0
 8000eac:	e7d3      	b.n	8000e56 <__gesf2+0x32>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d1da      	bne.n	8000e68 <__gesf2+0x44>
 8000eb2:	e7ee      	b.n	8000e92 <__gesf2+0x6e>

08000eb4 <__lesf2>:
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	0042      	lsls	r2, r0, #1
 8000eb8:	0244      	lsls	r4, r0, #9
 8000eba:	024d      	lsls	r5, r1, #9
 8000ebc:	0fc3      	lsrs	r3, r0, #31
 8000ebe:	0048      	lsls	r0, r1, #1
 8000ec0:	0a64      	lsrs	r4, r4, #9
 8000ec2:	0e12      	lsrs	r2, r2, #24
 8000ec4:	0a6d      	lsrs	r5, r5, #9
 8000ec6:	0e00      	lsrs	r0, r0, #24
 8000ec8:	0fc9      	lsrs	r1, r1, #31
 8000eca:	2aff      	cmp	r2, #255	@ 0xff
 8000ecc:	d017      	beq.n	8000efe <__lesf2+0x4a>
 8000ece:	28ff      	cmp	r0, #255	@ 0xff
 8000ed0:	d00a      	beq.n	8000ee8 <__lesf2+0x34>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d11b      	bne.n	8000f0e <__lesf2+0x5a>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d10a      	bne.n	8000ef0 <__lesf2+0x3c>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d01d      	beq.n	8000f1a <__lesf2+0x66>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d12d      	bne.n	8000f3e <__lesf2+0x8a>
 8000ee2:	0048      	lsls	r0, r1, #1
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e011      	b.n	8000f0c <__lesf2+0x58>
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d10e      	bne.n	8000f0a <__lesf2+0x56>
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d101      	bne.n	8000ef4 <__lesf2+0x40>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d0f6      	beq.n	8000ee2 <__lesf2+0x2e>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d10c      	bne.n	8000f12 <__lesf2+0x5e>
 8000ef8:	0058      	lsls	r0, r3, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e006      	b.n	8000f0c <__lesf2+0x58>
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d103      	bne.n	8000f0a <__lesf2+0x56>
 8000f02:	28ff      	cmp	r0, #255	@ 0xff
 8000f04:	d105      	bne.n	8000f12 <__lesf2+0x5e>
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d015      	beq.n	8000f36 <__lesf2+0x82>
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	bd30      	pop	{r4, r5, pc}
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d106      	bne.n	8000f20 <__lesf2+0x6c>
 8000f12:	2001      	movs	r0, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	4318      	orrs	r0, r3
 8000f18:	e7f8      	b.n	8000f0c <__lesf2+0x58>
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d0f6      	beq.n	8000f0c <__lesf2+0x58>
 8000f1e:	e7f8      	b.n	8000f12 <__lesf2+0x5e>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d1f6      	bne.n	8000f12 <__lesf2+0x5e>
 8000f24:	4282      	cmp	r2, r0
 8000f26:	dcf4      	bgt.n	8000f12 <__lesf2+0x5e>
 8000f28:	dbe6      	blt.n	8000ef8 <__lesf2+0x44>
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	d8f1      	bhi.n	8000f12 <__lesf2+0x5e>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	42ac      	cmp	r4, r5
 8000f32:	d2eb      	bcs.n	8000f0c <__lesf2+0x58>
 8000f34:	e7e0      	b.n	8000ef8 <__lesf2+0x44>
 8000f36:	2000      	movs	r0, #0
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d1ea      	bne.n	8000f12 <__lesf2+0x5e>
 8000f3c:	e7e6      	b.n	8000f0c <__lesf2+0x58>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d1e7      	bne.n	8000f12 <__lesf2+0x5e>
 8000f42:	e7f2      	b.n	8000f2a <__lesf2+0x76>

08000f44 <__aeabi_fmul>:
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	464f      	mov	r7, r9
 8000f48:	4646      	mov	r6, r8
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	0044      	lsls	r4, r0, #1
 8000f4e:	b5c0      	push	{r6, r7, lr}
 8000f50:	0246      	lsls	r6, r0, #9
 8000f52:	1c0f      	adds	r7, r1, #0
 8000f54:	0a76      	lsrs	r6, r6, #9
 8000f56:	0e24      	lsrs	r4, r4, #24
 8000f58:	0fc5      	lsrs	r5, r0, #31
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fmul+0x1c>
 8000f5e:	e0da      	b.n	8001116 <__aeabi_fmul+0x1d2>
 8000f60:	2cff      	cmp	r4, #255	@ 0xff
 8000f62:	d074      	beq.n	800104e <__aeabi_fmul+0x10a>
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	00f6      	lsls	r6, r6, #3
 8000f68:	04db      	lsls	r3, r3, #19
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4699      	mov	r9, r3
 8000f70:	469a      	mov	sl, r3
 8000f72:	3c7f      	subs	r4, #127	@ 0x7f
 8000f74:	027b      	lsls	r3, r7, #9
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	4698      	mov	r8, r3
 8000f7a:	007b      	lsls	r3, r7, #1
 8000f7c:	0e1b      	lsrs	r3, r3, #24
 8000f7e:	0fff      	lsrs	r7, r7, #31
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d074      	beq.n	800106e <__aeabi_fmul+0x12a>
 8000f84:	2bff      	cmp	r3, #255	@ 0xff
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fmul+0x46>
 8000f88:	e08e      	b.n	80010a8 <__aeabi_fmul+0x164>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	00d2      	lsls	r2, r2, #3
 8000f90:	04c9      	lsls	r1, r1, #19
 8000f92:	4311      	orrs	r1, r2
 8000f94:	3b7f      	subs	r3, #127	@ 0x7f
 8000f96:	002a      	movs	r2, r5
 8000f98:	18e4      	adds	r4, r4, r3
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	407a      	eors	r2, r7
 8000f9e:	4688      	mov	r8, r1
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	dc75      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	2000      	movs	r0, #0
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dd0f      	ble.n	8000fce <__aeabi_fmul+0x8a>
 8000fae:	4649      	mov	r1, r9
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	21a6      	movs	r1, #166	@ 0xa6
 8000fb6:	00c9      	lsls	r1, r1, #3
 8000fb8:	420b      	tst	r3, r1
 8000fba:	d169      	bne.n	8001090 <__aeabi_fmul+0x14c>
 8000fbc:	2190      	movs	r1, #144	@ 0x90
 8000fbe:	0089      	lsls	r1, r1, #2
 8000fc0:	420b      	tst	r3, r1
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0x82>
 8000fc4:	e100      	b.n	80011c8 <__aeabi_fmul+0x284>
 8000fc6:	2188      	movs	r1, #136	@ 0x88
 8000fc8:	4219      	tst	r1, r3
 8000fca:	d000      	beq.n	8000fce <__aeabi_fmul+0x8a>
 8000fcc:	e0f5      	b.n	80011ba <__aeabi_fmul+0x276>
 8000fce:	4641      	mov	r1, r8
 8000fd0:	0409      	lsls	r1, r1, #16
 8000fd2:	0c09      	lsrs	r1, r1, #16
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	0008      	movs	r0, r1
 8000fd8:	0c35      	lsrs	r5, r6, #16
 8000fda:	0436      	lsls	r6, r6, #16
 8000fdc:	0c1b      	lsrs	r3, r3, #16
 8000fde:	0c36      	lsrs	r6, r6, #16
 8000fe0:	4370      	muls	r0, r6
 8000fe2:	4369      	muls	r1, r5
 8000fe4:	435e      	muls	r6, r3
 8000fe6:	435d      	muls	r5, r3
 8000fe8:	1876      	adds	r6, r6, r1
 8000fea:	0c03      	lsrs	r3, r0, #16
 8000fec:	199b      	adds	r3, r3, r6
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d903      	bls.n	8000ffa <__aeabi_fmul+0xb6>
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	0249      	lsls	r1, r1, #9
 8000ff6:	468c      	mov	ip, r1
 8000ff8:	4465      	add	r5, ip
 8000ffa:	0400      	lsls	r0, r0, #16
 8000ffc:	0419      	lsls	r1, r3, #16
 8000ffe:	0c00      	lsrs	r0, r0, #16
 8001000:	1809      	adds	r1, r1, r0
 8001002:	018e      	lsls	r6, r1, #6
 8001004:	1e70      	subs	r0, r6, #1
 8001006:	4186      	sbcs	r6, r0
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	0e89      	lsrs	r1, r1, #26
 800100c:	195b      	adds	r3, r3, r5
 800100e:	430e      	orrs	r6, r1
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	431e      	orrs	r6, r3
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	d46c      	bmi.n	80010f2 <__aeabi_fmul+0x1ae>
 8001018:	0023      	movs	r3, r4
 800101a:	337f      	adds	r3, #127	@ 0x7f
 800101c:	2b00      	cmp	r3, #0
 800101e:	dc00      	bgt.n	8001022 <__aeabi_fmul+0xde>
 8001020:	e0b1      	b.n	8001186 <__aeabi_fmul+0x242>
 8001022:	0015      	movs	r5, r2
 8001024:	0771      	lsls	r1, r6, #29
 8001026:	d00b      	beq.n	8001040 <__aeabi_fmul+0xfc>
 8001028:	200f      	movs	r0, #15
 800102a:	0021      	movs	r1, r4
 800102c:	4030      	ands	r0, r6
 800102e:	2804      	cmp	r0, #4
 8001030:	d006      	beq.n	8001040 <__aeabi_fmul+0xfc>
 8001032:	3604      	adds	r6, #4
 8001034:	0132      	lsls	r2, r6, #4
 8001036:	d503      	bpl.n	8001040 <__aeabi_fmul+0xfc>
 8001038:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <__aeabi_fmul+0x2b0>)
 800103a:	401e      	ands	r6, r3
 800103c:	000b      	movs	r3, r1
 800103e:	3380      	adds	r3, #128	@ 0x80
 8001040:	2bfe      	cmp	r3, #254	@ 0xfe
 8001042:	dd00      	ble.n	8001046 <__aeabi_fmul+0x102>
 8001044:	e0bd      	b.n	80011c2 <__aeabi_fmul+0x27e>
 8001046:	01b2      	lsls	r2, r6, #6
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	b2db      	uxtb	r3, r3
 800104c:	e048      	b.n	80010e0 <__aeabi_fmul+0x19c>
 800104e:	2e00      	cmp	r6, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_fmul+0x110>
 8001052:	e092      	b.n	800117a <__aeabi_fmul+0x236>
 8001054:	2308      	movs	r3, #8
 8001056:	4699      	mov	r9, r3
 8001058:	3b06      	subs	r3, #6
 800105a:	469a      	mov	sl, r3
 800105c:	027b      	lsls	r3, r7, #9
 800105e:	0a5b      	lsrs	r3, r3, #9
 8001060:	4698      	mov	r8, r3
 8001062:	007b      	lsls	r3, r7, #1
 8001064:	24ff      	movs	r4, #255	@ 0xff
 8001066:	0e1b      	lsrs	r3, r3, #24
 8001068:	0fff      	lsrs	r7, r7, #31
 800106a:	2b00      	cmp	r3, #0
 800106c:	d18a      	bne.n	8000f84 <__aeabi_fmul+0x40>
 800106e:	4642      	mov	r2, r8
 8001070:	2a00      	cmp	r2, #0
 8001072:	d164      	bne.n	800113e <__aeabi_fmul+0x1fa>
 8001074:	4649      	mov	r1, r9
 8001076:	3201      	adds	r2, #1
 8001078:	4311      	orrs	r1, r2
 800107a:	4689      	mov	r9, r1
 800107c:	290a      	cmp	r1, #10
 800107e:	dc08      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 8001080:	407d      	eors	r5, r7
 8001082:	2001      	movs	r0, #1
 8001084:	b2ea      	uxtb	r2, r5
 8001086:	2902      	cmp	r1, #2
 8001088:	dc91      	bgt.n	8000fae <__aeabi_fmul+0x6a>
 800108a:	0015      	movs	r5, r2
 800108c:	2200      	movs	r2, #0
 800108e:	e027      	b.n	80010e0 <__aeabi_fmul+0x19c>
 8001090:	0015      	movs	r5, r2
 8001092:	4653      	mov	r3, sl
 8001094:	2b02      	cmp	r3, #2
 8001096:	d100      	bne.n	800109a <__aeabi_fmul+0x156>
 8001098:	e093      	b.n	80011c2 <__aeabi_fmul+0x27e>
 800109a:	2b03      	cmp	r3, #3
 800109c:	d01a      	beq.n	80010d4 <__aeabi_fmul+0x190>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12c      	bne.n	80010fc <__aeabi_fmul+0x1b8>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2200      	movs	r2, #0
 80010a6:	e01b      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80010a8:	4643      	mov	r3, r8
 80010aa:	34ff      	adds	r4, #255	@ 0xff
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d055      	beq.n	800115c <__aeabi_fmul+0x218>
 80010b0:	2103      	movs	r1, #3
 80010b2:	464b      	mov	r3, r9
 80010b4:	430b      	orrs	r3, r1
 80010b6:	0019      	movs	r1, r3
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	dc00      	bgt.n	80010be <__aeabi_fmul+0x17a>
 80010bc:	e092      	b.n	80011e4 <__aeabi_fmul+0x2a0>
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fmul+0x180>
 80010c2:	e08c      	b.n	80011de <__aeabi_fmul+0x29a>
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	03d2      	lsls	r2, r2, #15
 80010c8:	4216      	tst	r6, r2
 80010ca:	d003      	beq.n	80010d4 <__aeabi_fmul+0x190>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4213      	tst	r3, r2
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fmul+0x190>
 80010d2:	e07d      	b.n	80011d0 <__aeabi_fmul+0x28c>
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	03d2      	lsls	r2, r2, #15
 80010d8:	4332      	orrs	r2, r6
 80010da:	0252      	lsls	r2, r2, #9
 80010dc:	0a52      	lsrs	r2, r2, #9
 80010de:	23ff      	movs	r3, #255	@ 0xff
 80010e0:	05d8      	lsls	r0, r3, #23
 80010e2:	07ed      	lsls	r5, r5, #31
 80010e4:	4310      	orrs	r0, r2
 80010e6:	4328      	orrs	r0, r5
 80010e8:	bce0      	pop	{r5, r6, r7}
 80010ea:	46ba      	mov	sl, r7
 80010ec:	46b1      	mov	r9, r6
 80010ee:	46a8      	mov	r8, r5
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f2:	2301      	movs	r3, #1
 80010f4:	0015      	movs	r5, r2
 80010f6:	0871      	lsrs	r1, r6, #1
 80010f8:	401e      	ands	r6, r3
 80010fa:	430e      	orrs	r6, r1
 80010fc:	0023      	movs	r3, r4
 80010fe:	3380      	adds	r3, #128	@ 0x80
 8001100:	1c61      	adds	r1, r4, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	dd41      	ble.n	800118a <__aeabi_fmul+0x246>
 8001106:	0772      	lsls	r2, r6, #29
 8001108:	d094      	beq.n	8001034 <__aeabi_fmul+0xf0>
 800110a:	220f      	movs	r2, #15
 800110c:	4032      	ands	r2, r6
 800110e:	2a04      	cmp	r2, #4
 8001110:	d000      	beq.n	8001114 <__aeabi_fmul+0x1d0>
 8001112:	e78e      	b.n	8001032 <__aeabi_fmul+0xee>
 8001114:	e78e      	b.n	8001034 <__aeabi_fmul+0xf0>
 8001116:	2e00      	cmp	r6, #0
 8001118:	d105      	bne.n	8001126 <__aeabi_fmul+0x1e2>
 800111a:	2304      	movs	r3, #4
 800111c:	4699      	mov	r9, r3
 800111e:	3b03      	subs	r3, #3
 8001120:	2400      	movs	r4, #0
 8001122:	469a      	mov	sl, r3
 8001124:	e726      	b.n	8000f74 <__aeabi_fmul+0x30>
 8001126:	0030      	movs	r0, r6
 8001128:	f7ff fa0c 	bl	8000544 <__clzsi2>
 800112c:	2476      	movs	r4, #118	@ 0x76
 800112e:	1f43      	subs	r3, r0, #5
 8001130:	409e      	lsls	r6, r3
 8001132:	2300      	movs	r3, #0
 8001134:	4264      	negs	r4, r4
 8001136:	4699      	mov	r9, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a24      	subs	r4, r4, r0
 800113c:	e71a      	b.n	8000f74 <__aeabi_fmul+0x30>
 800113e:	4640      	mov	r0, r8
 8001140:	f7ff fa00 	bl	8000544 <__clzsi2>
 8001144:	464b      	mov	r3, r9
 8001146:	1a24      	subs	r4, r4, r0
 8001148:	3c76      	subs	r4, #118	@ 0x76
 800114a:	2b0a      	cmp	r3, #10
 800114c:	dca1      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 800114e:	4643      	mov	r3, r8
 8001150:	3805      	subs	r0, #5
 8001152:	4083      	lsls	r3, r0
 8001154:	407d      	eors	r5, r7
 8001156:	4698      	mov	r8, r3
 8001158:	b2ea      	uxtb	r2, r5
 800115a:	e724      	b.n	8000fa6 <__aeabi_fmul+0x62>
 800115c:	464a      	mov	r2, r9
 800115e:	3302      	adds	r3, #2
 8001160:	4313      	orrs	r3, r2
 8001162:	002a      	movs	r2, r5
 8001164:	407a      	eors	r2, r7
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	2b0a      	cmp	r3, #10
 800116a:	dc92      	bgt.n	8001092 <__aeabi_fmul+0x14e>
 800116c:	4649      	mov	r1, r9
 800116e:	0015      	movs	r5, r2
 8001170:	2900      	cmp	r1, #0
 8001172:	d026      	beq.n	80011c2 <__aeabi_fmul+0x27e>
 8001174:	4699      	mov	r9, r3
 8001176:	2002      	movs	r0, #2
 8001178:	e719      	b.n	8000fae <__aeabi_fmul+0x6a>
 800117a:	230c      	movs	r3, #12
 800117c:	4699      	mov	r9, r3
 800117e:	3b09      	subs	r3, #9
 8001180:	24ff      	movs	r4, #255	@ 0xff
 8001182:	469a      	mov	sl, r3
 8001184:	e6f6      	b.n	8000f74 <__aeabi_fmul+0x30>
 8001186:	0015      	movs	r5, r2
 8001188:	0021      	movs	r1, r4
 800118a:	2201      	movs	r2, #1
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b1b      	cmp	r3, #27
 8001190:	dd00      	ble.n	8001194 <__aeabi_fmul+0x250>
 8001192:	e786      	b.n	80010a2 <__aeabi_fmul+0x15e>
 8001194:	319e      	adds	r1, #158	@ 0x9e
 8001196:	0032      	movs	r2, r6
 8001198:	408e      	lsls	r6, r1
 800119a:	40da      	lsrs	r2, r3
 800119c:	1e73      	subs	r3, r6, #1
 800119e:	419e      	sbcs	r6, r3
 80011a0:	4332      	orrs	r2, r6
 80011a2:	0753      	lsls	r3, r2, #29
 80011a4:	d004      	beq.n	80011b0 <__aeabi_fmul+0x26c>
 80011a6:	230f      	movs	r3, #15
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fmul+0x26c>
 80011ae:	3204      	adds	r2, #4
 80011b0:	0153      	lsls	r3, r2, #5
 80011b2:	d510      	bpl.n	80011d6 <__aeabi_fmul+0x292>
 80011b4:	2301      	movs	r3, #1
 80011b6:	2200      	movs	r2, #0
 80011b8:	e792      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011ba:	003d      	movs	r5, r7
 80011bc:	4646      	mov	r6, r8
 80011be:	4682      	mov	sl, r0
 80011c0:	e767      	b.n	8001092 <__aeabi_fmul+0x14e>
 80011c2:	23ff      	movs	r3, #255	@ 0xff
 80011c4:	2200      	movs	r2, #0
 80011c6:	e78b      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	2500      	movs	r5, #0
 80011cc:	03d2      	lsls	r2, r2, #15
 80011ce:	e786      	b.n	80010de <__aeabi_fmul+0x19a>
 80011d0:	003d      	movs	r5, r7
 80011d2:	431a      	orrs	r2, r3
 80011d4:	e783      	b.n	80010de <__aeabi_fmul+0x19a>
 80011d6:	0192      	lsls	r2, r2, #6
 80011d8:	2300      	movs	r3, #0
 80011da:	0a52      	lsrs	r2, r2, #9
 80011dc:	e780      	b.n	80010e0 <__aeabi_fmul+0x19c>
 80011de:	003d      	movs	r5, r7
 80011e0:	4646      	mov	r6, r8
 80011e2:	e777      	b.n	80010d4 <__aeabi_fmul+0x190>
 80011e4:	002a      	movs	r2, r5
 80011e6:	2301      	movs	r3, #1
 80011e8:	407a      	eors	r2, r7
 80011ea:	408b      	lsls	r3, r1
 80011ec:	2003      	movs	r0, #3
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	e6e9      	b.n	8000fc6 <__aeabi_fmul+0x82>
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	f7ffffff 	.word	0xf7ffffff

080011f8 <__aeabi_fsub>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	4647      	mov	r7, r8
 80011fc:	46ce      	mov	lr, r9
 80011fe:	0243      	lsls	r3, r0, #9
 8001200:	b580      	push	{r7, lr}
 8001202:	0a5f      	lsrs	r7, r3, #9
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	0045      	lsls	r5, r0, #1
 8001208:	004a      	lsls	r2, r1, #1
 800120a:	469c      	mov	ip, r3
 800120c:	024b      	lsls	r3, r1, #9
 800120e:	0fc4      	lsrs	r4, r0, #31
 8001210:	0fce      	lsrs	r6, r1, #31
 8001212:	0e2d      	lsrs	r5, r5, #24
 8001214:	0a58      	lsrs	r0, r3, #9
 8001216:	0e12      	lsrs	r2, r2, #24
 8001218:	0999      	lsrs	r1, r3, #6
 800121a:	2aff      	cmp	r2, #255	@ 0xff
 800121c:	d06b      	beq.n	80012f6 <__aeabi_fsub+0xfe>
 800121e:	2301      	movs	r3, #1
 8001220:	405e      	eors	r6, r3
 8001222:	1aab      	subs	r3, r5, r2
 8001224:	42b4      	cmp	r4, r6
 8001226:	d04b      	beq.n	80012c0 <__aeabi_fsub+0xc8>
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_fsub+0x36>
 800122c:	e0ff      	b.n	800142e <__aeabi_fsub+0x236>
 800122e:	2a00      	cmp	r2, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_fsub+0x3c>
 8001232:	e088      	b.n	8001346 <__aeabi_fsub+0x14e>
 8001234:	2dff      	cmp	r5, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x42>
 8001238:	e0ef      	b.n	800141a <__aeabi_fsub+0x222>
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	04d2      	lsls	r2, r2, #19
 800123e:	4311      	orrs	r1, r2
 8001240:	2001      	movs	r0, #1
 8001242:	2b1b      	cmp	r3, #27
 8001244:	dc08      	bgt.n	8001258 <__aeabi_fsub+0x60>
 8001246:	0008      	movs	r0, r1
 8001248:	2220      	movs	r2, #32
 800124a:	40d8      	lsrs	r0, r3
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4099      	lsls	r1, r3
 8001250:	000b      	movs	r3, r1
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	4193      	sbcs	r3, r2
 8001256:	4318      	orrs	r0, r3
 8001258:	4663      	mov	r3, ip
 800125a:	1a1b      	subs	r3, r3, r0
 800125c:	469c      	mov	ip, r3
 800125e:	4663      	mov	r3, ip
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	d400      	bmi.n	8001266 <__aeabi_fsub+0x6e>
 8001264:	e0cd      	b.n	8001402 <__aeabi_fsub+0x20a>
 8001266:	4663      	mov	r3, ip
 8001268:	019f      	lsls	r7, r3, #6
 800126a:	09bf      	lsrs	r7, r7, #6
 800126c:	0038      	movs	r0, r7
 800126e:	f7ff f969 	bl	8000544 <__clzsi2>
 8001272:	003b      	movs	r3, r7
 8001274:	3805      	subs	r0, #5
 8001276:	4083      	lsls	r3, r0
 8001278:	4285      	cmp	r5, r0
 800127a:	dc00      	bgt.n	800127e <__aeabi_fsub+0x86>
 800127c:	e0a2      	b.n	80013c4 <__aeabi_fsub+0x1cc>
 800127e:	4ab7      	ldr	r2, [pc, #732]	@ (800155c <__aeabi_fsub+0x364>)
 8001280:	1a2d      	subs	r5, r5, r0
 8001282:	401a      	ands	r2, r3
 8001284:	4694      	mov	ip, r2
 8001286:	075a      	lsls	r2, r3, #29
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x94>
 800128a:	e0c3      	b.n	8001414 <__aeabi_fsub+0x21c>
 800128c:	220f      	movs	r2, #15
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x9e>
 8001294:	e0be      	b.n	8001414 <__aeabi_fsub+0x21c>
 8001296:	2304      	movs	r3, #4
 8001298:	4698      	mov	r8, r3
 800129a:	44c4      	add	ip, r8
 800129c:	4663      	mov	r3, ip
 800129e:	015b      	lsls	r3, r3, #5
 80012a0:	d400      	bmi.n	80012a4 <__aeabi_fsub+0xac>
 80012a2:	e0b7      	b.n	8001414 <__aeabi_fsub+0x21c>
 80012a4:	1c68      	adds	r0, r5, #1
 80012a6:	2dfe      	cmp	r5, #254	@ 0xfe
 80012a8:	d000      	beq.n	80012ac <__aeabi_fsub+0xb4>
 80012aa:	e0a5      	b.n	80013f8 <__aeabi_fsub+0x200>
 80012ac:	20ff      	movs	r0, #255	@ 0xff
 80012ae:	2200      	movs	r2, #0
 80012b0:	05c0      	lsls	r0, r0, #23
 80012b2:	4310      	orrs	r0, r2
 80012b4:	07e4      	lsls	r4, r4, #31
 80012b6:	4320      	orrs	r0, r4
 80012b8:	bcc0      	pop	{r6, r7}
 80012ba:	46b9      	mov	r9, r7
 80012bc:	46b0      	mov	r8, r6
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_fsub+0xce>
 80012c4:	e1eb      	b.n	800169e <__aeabi_fsub+0x4a6>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d046      	beq.n	8001358 <__aeabi_fsub+0x160>
 80012ca:	2dff      	cmp	r5, #255	@ 0xff
 80012cc:	d100      	bne.n	80012d0 <__aeabi_fsub+0xd8>
 80012ce:	e0a4      	b.n	800141a <__aeabi_fsub+0x222>
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	04d2      	lsls	r2, r2, #19
 80012d4:	4311      	orrs	r1, r2
 80012d6:	2b1b      	cmp	r3, #27
 80012d8:	dc00      	bgt.n	80012dc <__aeabi_fsub+0xe4>
 80012da:	e0fb      	b.n	80014d4 <__aeabi_fsub+0x2dc>
 80012dc:	2305      	movs	r3, #5
 80012de:	4698      	mov	r8, r3
 80012e0:	002b      	movs	r3, r5
 80012e2:	44c4      	add	ip, r8
 80012e4:	4662      	mov	r2, ip
 80012e6:	08d7      	lsrs	r7, r2, #3
 80012e8:	2bff      	cmp	r3, #255	@ 0xff
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0xf6>
 80012ec:	e095      	b.n	800141a <__aeabi_fsub+0x222>
 80012ee:	027a      	lsls	r2, r7, #9
 80012f0:	0a52      	lsrs	r2, r2, #9
 80012f2:	b2d8      	uxtb	r0, r3
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80012f6:	002b      	movs	r3, r5
 80012f8:	3bff      	subs	r3, #255	@ 0xff
 80012fa:	4699      	mov	r9, r3
 80012fc:	2900      	cmp	r1, #0
 80012fe:	d118      	bne.n	8001332 <__aeabi_fsub+0x13a>
 8001300:	2301      	movs	r3, #1
 8001302:	405e      	eors	r6, r3
 8001304:	42b4      	cmp	r4, r6
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x112>
 8001308:	e0ca      	b.n	80014a0 <__aeabi_fsub+0x2a8>
 800130a:	464b      	mov	r3, r9
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02d      	beq.n	800136c <__aeabi_fsub+0x174>
 8001310:	2d00      	cmp	r5, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_fsub+0x11e>
 8001314:	e13c      	b.n	8001590 <__aeabi_fsub+0x398>
 8001316:	23ff      	movs	r3, #255	@ 0xff
 8001318:	4664      	mov	r4, ip
 800131a:	2c00      	cmp	r4, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x128>
 800131e:	e15f      	b.n	80015e0 <__aeabi_fsub+0x3e8>
 8001320:	1e5d      	subs	r5, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d100      	bne.n	8001328 <__aeabi_fsub+0x130>
 8001326:	e174      	b.n	8001612 <__aeabi_fsub+0x41a>
 8001328:	0034      	movs	r4, r6
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d074      	beq.n	8001418 <__aeabi_fsub+0x220>
 800132e:	002b      	movs	r3, r5
 8001330:	e103      	b.n	800153a <__aeabi_fsub+0x342>
 8001332:	42b4      	cmp	r4, r6
 8001334:	d100      	bne.n	8001338 <__aeabi_fsub+0x140>
 8001336:	e09c      	b.n	8001472 <__aeabi_fsub+0x27a>
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <__aeabi_fsub+0x174>
 800133c:	2d00      	cmp	r5, #0
 800133e:	d0ea      	beq.n	8001316 <__aeabi_fsub+0x11e>
 8001340:	0007      	movs	r7, r0
 8001342:	0034      	movs	r4, r6
 8001344:	e06c      	b.n	8001420 <__aeabi_fsub+0x228>
 8001346:	2900      	cmp	r1, #0
 8001348:	d0cc      	beq.n	80012e4 <__aeabi_fsub+0xec>
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d02b      	beq.n	80013a8 <__aeabi_fsub+0x1b0>
 8001350:	2bff      	cmp	r3, #255	@ 0xff
 8001352:	d062      	beq.n	800141a <__aeabi_fsub+0x222>
 8001354:	0013      	movs	r3, r2
 8001356:	e773      	b.n	8001240 <__aeabi_fsub+0x48>
 8001358:	2900      	cmp	r1, #0
 800135a:	d0c3      	beq.n	80012e4 <__aeabi_fsub+0xec>
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x16c>
 8001362:	e11e      	b.n	80015a2 <__aeabi_fsub+0x3aa>
 8001364:	2bff      	cmp	r3, #255	@ 0xff
 8001366:	d058      	beq.n	800141a <__aeabi_fsub+0x222>
 8001368:	0013      	movs	r3, r2
 800136a:	e7b4      	b.n	80012d6 <__aeabi_fsub+0xde>
 800136c:	22fe      	movs	r2, #254	@ 0xfe
 800136e:	1c6b      	adds	r3, r5, #1
 8001370:	421a      	tst	r2, r3
 8001372:	d10d      	bne.n	8001390 <__aeabi_fsub+0x198>
 8001374:	2d00      	cmp	r5, #0
 8001376:	d060      	beq.n	800143a <__aeabi_fsub+0x242>
 8001378:	4663      	mov	r3, ip
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <__aeabi_fsub+0x188>
 800137e:	e120      	b.n	80015c2 <__aeabi_fsub+0x3ca>
 8001380:	2900      	cmp	r1, #0
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x18e>
 8001384:	e128      	b.n	80015d8 <__aeabi_fsub+0x3e0>
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	2400      	movs	r4, #0
 800138a:	20ff      	movs	r0, #255	@ 0xff
 800138c:	03d2      	lsls	r2, r2, #15
 800138e:	e78f      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001390:	4663      	mov	r3, ip
 8001392:	1a5f      	subs	r7, r3, r1
 8001394:	017b      	lsls	r3, r7, #5
 8001396:	d500      	bpl.n	800139a <__aeabi_fsub+0x1a2>
 8001398:	e0fe      	b.n	8001598 <__aeabi_fsub+0x3a0>
 800139a:	2f00      	cmp	r7, #0
 800139c:	d000      	beq.n	80013a0 <__aeabi_fsub+0x1a8>
 800139e:	e765      	b.n	800126c <__aeabi_fsub+0x74>
 80013a0:	2400      	movs	r4, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	2200      	movs	r2, #0
 80013a6:	e783      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80013a8:	4663      	mov	r3, ip
 80013aa:	1a59      	subs	r1, r3, r1
 80013ac:	014b      	lsls	r3, r1, #5
 80013ae:	d400      	bmi.n	80013b2 <__aeabi_fsub+0x1ba>
 80013b0:	e119      	b.n	80015e6 <__aeabi_fsub+0x3ee>
 80013b2:	018f      	lsls	r7, r1, #6
 80013b4:	09bf      	lsrs	r7, r7, #6
 80013b6:	0038      	movs	r0, r7
 80013b8:	f7ff f8c4 	bl	8000544 <__clzsi2>
 80013bc:	003b      	movs	r3, r7
 80013be:	3805      	subs	r0, #5
 80013c0:	4083      	lsls	r3, r0
 80013c2:	2501      	movs	r5, #1
 80013c4:	2220      	movs	r2, #32
 80013c6:	1b40      	subs	r0, r0, r5
 80013c8:	3001      	adds	r0, #1
 80013ca:	1a12      	subs	r2, r2, r0
 80013cc:	0019      	movs	r1, r3
 80013ce:	4093      	lsls	r3, r2
 80013d0:	40c1      	lsrs	r1, r0
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	4193      	sbcs	r3, r2
 80013d6:	4319      	orrs	r1, r3
 80013d8:	468c      	mov	ip, r1
 80013da:	1e0b      	subs	r3, r1, #0
 80013dc:	d0e1      	beq.n	80013a2 <__aeabi_fsub+0x1aa>
 80013de:	075b      	lsls	r3, r3, #29
 80013e0:	d100      	bne.n	80013e4 <__aeabi_fsub+0x1ec>
 80013e2:	e152      	b.n	800168a <__aeabi_fsub+0x492>
 80013e4:	230f      	movs	r3, #15
 80013e6:	2500      	movs	r5, #0
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d000      	beq.n	80013f0 <__aeabi_fsub+0x1f8>
 80013ee:	e752      	b.n	8001296 <__aeabi_fsub+0x9e>
 80013f0:	2001      	movs	r0, #1
 80013f2:	014a      	lsls	r2, r1, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x200>
 80013f6:	e092      	b.n	800151e <__aeabi_fsub+0x326>
 80013f8:	b2c0      	uxtb	r0, r0
 80013fa:	4663      	mov	r3, ip
 80013fc:	019a      	lsls	r2, r3, #6
 80013fe:	0a52      	lsrs	r2, r2, #9
 8001400:	e756      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001402:	4663      	mov	r3, ip
 8001404:	075b      	lsls	r3, r3, #29
 8001406:	d005      	beq.n	8001414 <__aeabi_fsub+0x21c>
 8001408:	230f      	movs	r3, #15
 800140a:	4662      	mov	r2, ip
 800140c:	4013      	ands	r3, r2
 800140e:	2b04      	cmp	r3, #4
 8001410:	d000      	beq.n	8001414 <__aeabi_fsub+0x21c>
 8001412:	e740      	b.n	8001296 <__aeabi_fsub+0x9e>
 8001414:	002b      	movs	r3, r5
 8001416:	e765      	b.n	80012e4 <__aeabi_fsub+0xec>
 8001418:	0007      	movs	r7, r0
 800141a:	2f00      	cmp	r7, #0
 800141c:	d100      	bne.n	8001420 <__aeabi_fsub+0x228>
 800141e:	e745      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	03d2      	lsls	r2, r2, #15
 8001424:	433a      	orrs	r2, r7
 8001426:	0252      	lsls	r2, r2, #9
 8001428:	20ff      	movs	r0, #255	@ 0xff
 800142a:	0a52      	lsrs	r2, r2, #9
 800142c:	e740      	b.n	80012b0 <__aeabi_fsub+0xb8>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d179      	bne.n	8001526 <__aeabi_fsub+0x32e>
 8001432:	22fe      	movs	r2, #254	@ 0xfe
 8001434:	1c6b      	adds	r3, r5, #1
 8001436:	421a      	tst	r2, r3
 8001438:	d1aa      	bne.n	8001390 <__aeabi_fsub+0x198>
 800143a:	4663      	mov	r3, ip
 800143c:	2b00      	cmp	r3, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x24a>
 8001440:	e0f5      	b.n	800162e <__aeabi_fsub+0x436>
 8001442:	2900      	cmp	r1, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_fsub+0x250>
 8001446:	e0d1      	b.n	80015ec <__aeabi_fsub+0x3f4>
 8001448:	1a5f      	subs	r7, r3, r1
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	04db      	lsls	r3, r3, #19
 800144e:	421f      	tst	r7, r3
 8001450:	d100      	bne.n	8001454 <__aeabi_fsub+0x25c>
 8001452:	e10e      	b.n	8001672 <__aeabi_fsub+0x47a>
 8001454:	4662      	mov	r2, ip
 8001456:	2401      	movs	r4, #1
 8001458:	1a8a      	subs	r2, r1, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2000      	movs	r0, #0
 800145e:	4034      	ands	r4, r6
 8001460:	2a00      	cmp	r2, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x26e>
 8001464:	e724      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001466:	2001      	movs	r0, #1
 8001468:	421a      	tst	r2, r3
 800146a:	d1c6      	bne.n	80013fa <__aeabi_fsub+0x202>
 800146c:	2300      	movs	r3, #0
 800146e:	08d7      	lsrs	r7, r2, #3
 8001470:	e73d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d017      	beq.n	80014a6 <__aeabi_fsub+0x2ae>
 8001476:	2d00      	cmp	r5, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x284>
 800147a:	e0af      	b.n	80015dc <__aeabi_fsub+0x3e4>
 800147c:	23ff      	movs	r3, #255	@ 0xff
 800147e:	4665      	mov	r5, ip
 8001480:	2d00      	cmp	r5, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_fsub+0x28e>
 8001484:	e0ad      	b.n	80015e2 <__aeabi_fsub+0x3ea>
 8001486:	1e5e      	subs	r6, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d100      	bne.n	800148e <__aeabi_fsub+0x296>
 800148c:	e089      	b.n	80015a2 <__aeabi_fsub+0x3aa>
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d0c2      	beq.n	8001418 <__aeabi_fsub+0x220>
 8001492:	2e1b      	cmp	r6, #27
 8001494:	dc00      	bgt.n	8001498 <__aeabi_fsub+0x2a0>
 8001496:	e0ab      	b.n	80015f0 <__aeabi_fsub+0x3f8>
 8001498:	1d4b      	adds	r3, r1, #5
 800149a:	469c      	mov	ip, r3
 800149c:	0013      	movs	r3, r2
 800149e:	e721      	b.n	80012e4 <__aeabi_fsub+0xec>
 80014a0:	464b      	mov	r3, r9
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d170      	bne.n	8001588 <__aeabi_fsub+0x390>
 80014a6:	22fe      	movs	r2, #254	@ 0xfe
 80014a8:	1c6b      	adds	r3, r5, #1
 80014aa:	421a      	tst	r2, r3
 80014ac:	d15e      	bne.n	800156c <__aeabi_fsub+0x374>
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	d000      	beq.n	80014b4 <__aeabi_fsub+0x2bc>
 80014b2:	e0c3      	b.n	800163c <__aeabi_fsub+0x444>
 80014b4:	4663      	mov	r3, ip
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_fsub+0x2c4>
 80014ba:	e0d0      	b.n	800165e <__aeabi_fsub+0x466>
 80014bc:	2900      	cmp	r1, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x2ca>
 80014c0:	e094      	b.n	80015ec <__aeabi_fsub+0x3f4>
 80014c2:	000a      	movs	r2, r1
 80014c4:	4462      	add	r2, ip
 80014c6:	0153      	lsls	r3, r2, #5
 80014c8:	d400      	bmi.n	80014cc <__aeabi_fsub+0x2d4>
 80014ca:	e0d8      	b.n	800167e <__aeabi_fsub+0x486>
 80014cc:	0192      	lsls	r2, r2, #6
 80014ce:	2001      	movs	r0, #1
 80014d0:	0a52      	lsrs	r2, r2, #9
 80014d2:	e6ed      	b.n	80012b0 <__aeabi_fsub+0xb8>
 80014d4:	0008      	movs	r0, r1
 80014d6:	2220      	movs	r2, #32
 80014d8:	40d8      	lsrs	r0, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4099      	lsls	r1, r3
 80014de:	000b      	movs	r3, r1
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	4193      	sbcs	r3, r2
 80014e4:	4303      	orrs	r3, r0
 80014e6:	449c      	add	ip, r3
 80014e8:	4663      	mov	r3, ip
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	d589      	bpl.n	8001402 <__aeabi_fsub+0x20a>
 80014ee:	3501      	adds	r5, #1
 80014f0:	2dff      	cmp	r5, #255	@ 0xff
 80014f2:	d100      	bne.n	80014f6 <__aeabi_fsub+0x2fe>
 80014f4:	e6da      	b.n	80012ac <__aeabi_fsub+0xb4>
 80014f6:	4662      	mov	r2, ip
 80014f8:	2301      	movs	r3, #1
 80014fa:	4919      	ldr	r1, [pc, #100]	@ (8001560 <__aeabi_fsub+0x368>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0852      	lsrs	r2, r2, #1
 8001500:	400a      	ands	r2, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	4694      	mov	ip, r2
 8001508:	075b      	lsls	r3, r3, #29
 800150a:	d004      	beq.n	8001516 <__aeabi_fsub+0x31e>
 800150c:	230f      	movs	r3, #15
 800150e:	4013      	ands	r3, r2
 8001510:	2b04      	cmp	r3, #4
 8001512:	d000      	beq.n	8001516 <__aeabi_fsub+0x31e>
 8001514:	e6bf      	b.n	8001296 <__aeabi_fsub+0x9e>
 8001516:	4663      	mov	r3, ip
 8001518:	015b      	lsls	r3, r3, #5
 800151a:	d500      	bpl.n	800151e <__aeabi_fsub+0x326>
 800151c:	e6c2      	b.n	80012a4 <__aeabi_fsub+0xac>
 800151e:	4663      	mov	r3, ip
 8001520:	08df      	lsrs	r7, r3, #3
 8001522:	002b      	movs	r3, r5
 8001524:	e6e3      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001526:	1b53      	subs	r3, r2, r5
 8001528:	2d00      	cmp	r5, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x336>
 800152c:	e6f4      	b.n	8001318 <__aeabi_fsub+0x120>
 800152e:	2080      	movs	r0, #128	@ 0x80
 8001530:	4664      	mov	r4, ip
 8001532:	04c0      	lsls	r0, r0, #19
 8001534:	4304      	orrs	r4, r0
 8001536:	46a4      	mov	ip, r4
 8001538:	0034      	movs	r4, r6
 800153a:	2001      	movs	r0, #1
 800153c:	2b1b      	cmp	r3, #27
 800153e:	dc09      	bgt.n	8001554 <__aeabi_fsub+0x35c>
 8001540:	2520      	movs	r5, #32
 8001542:	4660      	mov	r0, ip
 8001544:	40d8      	lsrs	r0, r3
 8001546:	1aeb      	subs	r3, r5, r3
 8001548:	4665      	mov	r5, ip
 800154a:	409d      	lsls	r5, r3
 800154c:	002b      	movs	r3, r5
 800154e:	1e5d      	subs	r5, r3, #1
 8001550:	41ab      	sbcs	r3, r5
 8001552:	4318      	orrs	r0, r3
 8001554:	1a0b      	subs	r3, r1, r0
 8001556:	469c      	mov	ip, r3
 8001558:	0015      	movs	r5, r2
 800155a:	e680      	b.n	800125e <__aeabi_fsub+0x66>
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff
 8001564:	22fe      	movs	r2, #254	@ 0xfe
 8001566:	1c6b      	adds	r3, r5, #1
 8001568:	4213      	tst	r3, r2
 800156a:	d0a3      	beq.n	80014b4 <__aeabi_fsub+0x2bc>
 800156c:	2bff      	cmp	r3, #255	@ 0xff
 800156e:	d100      	bne.n	8001572 <__aeabi_fsub+0x37a>
 8001570:	e69c      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001572:	4461      	add	r1, ip
 8001574:	0849      	lsrs	r1, r1, #1
 8001576:	074a      	lsls	r2, r1, #29
 8001578:	d049      	beq.n	800160e <__aeabi_fsub+0x416>
 800157a:	220f      	movs	r2, #15
 800157c:	400a      	ands	r2, r1
 800157e:	2a04      	cmp	r2, #4
 8001580:	d045      	beq.n	800160e <__aeabi_fsub+0x416>
 8001582:	1d0a      	adds	r2, r1, #4
 8001584:	4694      	mov	ip, r2
 8001586:	e6ad      	b.n	80012e4 <__aeabi_fsub+0xec>
 8001588:	2d00      	cmp	r5, #0
 800158a:	d100      	bne.n	800158e <__aeabi_fsub+0x396>
 800158c:	e776      	b.n	800147c <__aeabi_fsub+0x284>
 800158e:	e68d      	b.n	80012ac <__aeabi_fsub+0xb4>
 8001590:	0034      	movs	r4, r6
 8001592:	20ff      	movs	r0, #255	@ 0xff
 8001594:	2200      	movs	r2, #0
 8001596:	e68b      	b.n	80012b0 <__aeabi_fsub+0xb8>
 8001598:	4663      	mov	r3, ip
 800159a:	2401      	movs	r4, #1
 800159c:	1acf      	subs	r7, r1, r3
 800159e:	4034      	ands	r4, r6
 80015a0:	e664      	b.n	800126c <__aeabi_fsub+0x74>
 80015a2:	4461      	add	r1, ip
 80015a4:	014b      	lsls	r3, r1, #5
 80015a6:	d56d      	bpl.n	8001684 <__aeabi_fsub+0x48c>
 80015a8:	0848      	lsrs	r0, r1, #1
 80015aa:	4944      	ldr	r1, [pc, #272]	@ (80016bc <__aeabi_fsub+0x4c4>)
 80015ac:	4001      	ands	r1, r0
 80015ae:	0743      	lsls	r3, r0, #29
 80015b0:	d02c      	beq.n	800160c <__aeabi_fsub+0x414>
 80015b2:	230f      	movs	r3, #15
 80015b4:	4003      	ands	r3, r0
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d028      	beq.n	800160c <__aeabi_fsub+0x414>
 80015ba:	1d0b      	adds	r3, r1, #4
 80015bc:	469c      	mov	ip, r3
 80015be:	2302      	movs	r3, #2
 80015c0:	e690      	b.n	80012e4 <__aeabi_fsub+0xec>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d100      	bne.n	80015c8 <__aeabi_fsub+0x3d0>
 80015c6:	e72b      	b.n	8001420 <__aeabi_fsub+0x228>
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	03db      	lsls	r3, r3, #15
 80015cc:	429f      	cmp	r7, r3
 80015ce:	d200      	bcs.n	80015d2 <__aeabi_fsub+0x3da>
 80015d0:	e726      	b.n	8001420 <__aeabi_fsub+0x228>
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d300      	bcc.n	80015d8 <__aeabi_fsub+0x3e0>
 80015d6:	e723      	b.n	8001420 <__aeabi_fsub+0x228>
 80015d8:	2401      	movs	r4, #1
 80015da:	4034      	ands	r4, r6
 80015dc:	0007      	movs	r7, r0
 80015de:	e71f      	b.n	8001420 <__aeabi_fsub+0x228>
 80015e0:	0034      	movs	r4, r6
 80015e2:	468c      	mov	ip, r1
 80015e4:	e67e      	b.n	80012e4 <__aeabi_fsub+0xec>
 80015e6:	2301      	movs	r3, #1
 80015e8:	08cf      	lsrs	r7, r1, #3
 80015ea:	e680      	b.n	80012ee <__aeabi_fsub+0xf6>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e67e      	b.n	80012ee <__aeabi_fsub+0xf6>
 80015f0:	2020      	movs	r0, #32
 80015f2:	4665      	mov	r5, ip
 80015f4:	1b80      	subs	r0, r0, r6
 80015f6:	4085      	lsls	r5, r0
 80015f8:	4663      	mov	r3, ip
 80015fa:	0028      	movs	r0, r5
 80015fc:	40f3      	lsrs	r3, r6
 80015fe:	1e45      	subs	r5, r0, #1
 8001600:	41a8      	sbcs	r0, r5
 8001602:	4303      	orrs	r3, r0
 8001604:	469c      	mov	ip, r3
 8001606:	0015      	movs	r5, r2
 8001608:	448c      	add	ip, r1
 800160a:	e76d      	b.n	80014e8 <__aeabi_fsub+0x2f0>
 800160c:	2302      	movs	r3, #2
 800160e:	08cf      	lsrs	r7, r1, #3
 8001610:	e66d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001612:	1b0f      	subs	r7, r1, r4
 8001614:	017b      	lsls	r3, r7, #5
 8001616:	d528      	bpl.n	800166a <__aeabi_fsub+0x472>
 8001618:	01bf      	lsls	r7, r7, #6
 800161a:	09bf      	lsrs	r7, r7, #6
 800161c:	0038      	movs	r0, r7
 800161e:	f7fe ff91 	bl	8000544 <__clzsi2>
 8001622:	003b      	movs	r3, r7
 8001624:	3805      	subs	r0, #5
 8001626:	4083      	lsls	r3, r0
 8001628:	0034      	movs	r4, r6
 800162a:	2501      	movs	r5, #1
 800162c:	e6ca      	b.n	80013c4 <__aeabi_fsub+0x1cc>
 800162e:	2900      	cmp	r1, #0
 8001630:	d100      	bne.n	8001634 <__aeabi_fsub+0x43c>
 8001632:	e6b5      	b.n	80013a0 <__aeabi_fsub+0x1a8>
 8001634:	2401      	movs	r4, #1
 8001636:	0007      	movs	r7, r0
 8001638:	4034      	ands	r4, r6
 800163a:	e658      	b.n	80012ee <__aeabi_fsub+0xf6>
 800163c:	4663      	mov	r3, ip
 800163e:	2b00      	cmp	r3, #0
 8001640:	d100      	bne.n	8001644 <__aeabi_fsub+0x44c>
 8001642:	e6e9      	b.n	8001418 <__aeabi_fsub+0x220>
 8001644:	2900      	cmp	r1, #0
 8001646:	d100      	bne.n	800164a <__aeabi_fsub+0x452>
 8001648:	e6ea      	b.n	8001420 <__aeabi_fsub+0x228>
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	03db      	lsls	r3, r3, #15
 800164e:	429f      	cmp	r7, r3
 8001650:	d200      	bcs.n	8001654 <__aeabi_fsub+0x45c>
 8001652:	e6e5      	b.n	8001420 <__aeabi_fsub+0x228>
 8001654:	4298      	cmp	r0, r3
 8001656:	d300      	bcc.n	800165a <__aeabi_fsub+0x462>
 8001658:	e6e2      	b.n	8001420 <__aeabi_fsub+0x228>
 800165a:	0007      	movs	r7, r0
 800165c:	e6e0      	b.n	8001420 <__aeabi_fsub+0x228>
 800165e:	2900      	cmp	r1, #0
 8001660:	d100      	bne.n	8001664 <__aeabi_fsub+0x46c>
 8001662:	e69e      	b.n	80013a2 <__aeabi_fsub+0x1aa>
 8001664:	2300      	movs	r3, #0
 8001666:	08cf      	lsrs	r7, r1, #3
 8001668:	e641      	b.n	80012ee <__aeabi_fsub+0xf6>
 800166a:	0034      	movs	r4, r6
 800166c:	2301      	movs	r3, #1
 800166e:	08ff      	lsrs	r7, r7, #3
 8001670:	e63d      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001672:	2f00      	cmp	r7, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_fsub+0x480>
 8001676:	e693      	b.n	80013a0 <__aeabi_fsub+0x1a8>
 8001678:	2300      	movs	r3, #0
 800167a:	08ff      	lsrs	r7, r7, #3
 800167c:	e637      	b.n	80012ee <__aeabi_fsub+0xf6>
 800167e:	2300      	movs	r3, #0
 8001680:	08d7      	lsrs	r7, r2, #3
 8001682:	e634      	b.n	80012ee <__aeabi_fsub+0xf6>
 8001684:	2301      	movs	r3, #1
 8001686:	08cf      	lsrs	r7, r1, #3
 8001688:	e631      	b.n	80012ee <__aeabi_fsub+0xf6>
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	000b      	movs	r3, r1
 800168e:	04d2      	lsls	r2, r2, #19
 8001690:	2001      	movs	r0, #1
 8001692:	4013      	ands	r3, r2
 8001694:	4211      	tst	r1, r2
 8001696:	d000      	beq.n	800169a <__aeabi_fsub+0x4a2>
 8001698:	e6ae      	b.n	80013f8 <__aeabi_fsub+0x200>
 800169a:	08cf      	lsrs	r7, r1, #3
 800169c:	e627      	b.n	80012ee <__aeabi_fsub+0xf6>
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <__aeabi_fsub+0x4ac>
 80016a2:	e75f      	b.n	8001564 <__aeabi_fsub+0x36c>
 80016a4:	1b56      	subs	r6, r2, r5
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d101      	bne.n	80016ae <__aeabi_fsub+0x4b6>
 80016aa:	0033      	movs	r3, r6
 80016ac:	e6e7      	b.n	800147e <__aeabi_fsub+0x286>
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	4660      	mov	r0, ip
 80016b2:	04db      	lsls	r3, r3, #19
 80016b4:	4318      	orrs	r0, r3
 80016b6:	4684      	mov	ip, r0
 80016b8:	e6eb      	b.n	8001492 <__aeabi_fsub+0x29a>
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	7dffffff 	.word	0x7dffffff

080016c0 <__aeabi_fcmpun>:
 80016c0:	0243      	lsls	r3, r0, #9
 80016c2:	024a      	lsls	r2, r1, #9
 80016c4:	0040      	lsls	r0, r0, #1
 80016c6:	0049      	lsls	r1, r1, #1
 80016c8:	0a5b      	lsrs	r3, r3, #9
 80016ca:	0a52      	lsrs	r2, r2, #9
 80016cc:	0e09      	lsrs	r1, r1, #24
 80016ce:	0e00      	lsrs	r0, r0, #24
 80016d0:	28ff      	cmp	r0, #255	@ 0xff
 80016d2:	d006      	beq.n	80016e2 <__aeabi_fcmpun+0x22>
 80016d4:	2000      	movs	r0, #0
 80016d6:	29ff      	cmp	r1, #255	@ 0xff
 80016d8:	d102      	bne.n	80016e0 <__aeabi_fcmpun+0x20>
 80016da:	1e53      	subs	r3, r2, #1
 80016dc:	419a      	sbcs	r2, r3
 80016de:	0010      	movs	r0, r2
 80016e0:	4770      	bx	lr
 80016e2:	38fe      	subs	r0, #254	@ 0xfe
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1fb      	bne.n	80016e0 <__aeabi_fcmpun+0x20>
 80016e8:	e7f4      	b.n	80016d4 <__aeabi_fcmpun+0x14>
 80016ea:	46c0      	nop			@ (mov r8, r8)

080016ec <__aeabi_f2iz>:
 80016ec:	0241      	lsls	r1, r0, #9
 80016ee:	0042      	lsls	r2, r0, #1
 80016f0:	0fc3      	lsrs	r3, r0, #31
 80016f2:	0a49      	lsrs	r1, r1, #9
 80016f4:	2000      	movs	r0, #0
 80016f6:	0e12      	lsrs	r2, r2, #24
 80016f8:	2a7e      	cmp	r2, #126	@ 0x7e
 80016fa:	dd03      	ble.n	8001704 <__aeabi_f2iz+0x18>
 80016fc:	2a9d      	cmp	r2, #157	@ 0x9d
 80016fe:	dd02      	ble.n	8001706 <__aeabi_f2iz+0x1a>
 8001700:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <__aeabi_f2iz+0x3c>)
 8001702:	1898      	adds	r0, r3, r2
 8001704:	4770      	bx	lr
 8001706:	2080      	movs	r0, #128	@ 0x80
 8001708:	0400      	lsls	r0, r0, #16
 800170a:	4301      	orrs	r1, r0
 800170c:	2a95      	cmp	r2, #149	@ 0x95
 800170e:	dc07      	bgt.n	8001720 <__aeabi_f2iz+0x34>
 8001710:	2096      	movs	r0, #150	@ 0x96
 8001712:	1a82      	subs	r2, r0, r2
 8001714:	40d1      	lsrs	r1, r2
 8001716:	4248      	negs	r0, r1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f3      	bne.n	8001704 <__aeabi_f2iz+0x18>
 800171c:	0008      	movs	r0, r1
 800171e:	e7f1      	b.n	8001704 <__aeabi_f2iz+0x18>
 8001720:	3a96      	subs	r2, #150	@ 0x96
 8001722:	4091      	lsls	r1, r2
 8001724:	e7f7      	b.n	8001716 <__aeabi_f2iz+0x2a>
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	7fffffff 	.word	0x7fffffff

0800172c <__aeabi_i2f>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2800      	cmp	r0, #0
 8001730:	d012      	beq.n	8001758 <__aeabi_i2f+0x2c>
 8001732:	17c3      	asrs	r3, r0, #31
 8001734:	18c5      	adds	r5, r0, r3
 8001736:	405d      	eors	r5, r3
 8001738:	0fc4      	lsrs	r4, r0, #31
 800173a:	0028      	movs	r0, r5
 800173c:	f7fe ff02 	bl	8000544 <__clzsi2>
 8001740:	239e      	movs	r3, #158	@ 0x9e
 8001742:	1a1b      	subs	r3, r3, r0
 8001744:	2b96      	cmp	r3, #150	@ 0x96
 8001746:	dc0f      	bgt.n	8001768 <__aeabi_i2f+0x3c>
 8001748:	2808      	cmp	r0, #8
 800174a:	d038      	beq.n	80017be <__aeabi_i2f+0x92>
 800174c:	3808      	subs	r0, #8
 800174e:	4085      	lsls	r5, r0
 8001750:	026d      	lsls	r5, r5, #9
 8001752:	0a6d      	lsrs	r5, r5, #9
 8001754:	b2d8      	uxtb	r0, r3
 8001756:	e002      	b.n	800175e <__aeabi_i2f+0x32>
 8001758:	2400      	movs	r4, #0
 800175a:	2000      	movs	r0, #0
 800175c:	2500      	movs	r5, #0
 800175e:	05c0      	lsls	r0, r0, #23
 8001760:	4328      	orrs	r0, r5
 8001762:	07e4      	lsls	r4, r4, #31
 8001764:	4320      	orrs	r0, r4
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	2b99      	cmp	r3, #153	@ 0x99
 800176a:	dc14      	bgt.n	8001796 <__aeabi_i2f+0x6a>
 800176c:	1f42      	subs	r2, r0, #5
 800176e:	4095      	lsls	r5, r2
 8001770:	002a      	movs	r2, r5
 8001772:	4915      	ldr	r1, [pc, #84]	@ (80017c8 <__aeabi_i2f+0x9c>)
 8001774:	4011      	ands	r1, r2
 8001776:	0755      	lsls	r5, r2, #29
 8001778:	d01c      	beq.n	80017b4 <__aeabi_i2f+0x88>
 800177a:	250f      	movs	r5, #15
 800177c:	402a      	ands	r2, r5
 800177e:	2a04      	cmp	r2, #4
 8001780:	d018      	beq.n	80017b4 <__aeabi_i2f+0x88>
 8001782:	3104      	adds	r1, #4
 8001784:	08ca      	lsrs	r2, r1, #3
 8001786:	0149      	lsls	r1, r1, #5
 8001788:	d515      	bpl.n	80017b6 <__aeabi_i2f+0x8a>
 800178a:	239f      	movs	r3, #159	@ 0x9f
 800178c:	0252      	lsls	r2, r2, #9
 800178e:	1a18      	subs	r0, r3, r0
 8001790:	0a55      	lsrs	r5, r2, #9
 8001792:	b2c0      	uxtb	r0, r0
 8001794:	e7e3      	b.n	800175e <__aeabi_i2f+0x32>
 8001796:	2205      	movs	r2, #5
 8001798:	0029      	movs	r1, r5
 800179a:	1a12      	subs	r2, r2, r0
 800179c:	40d1      	lsrs	r1, r2
 800179e:	0002      	movs	r2, r0
 80017a0:	321b      	adds	r2, #27
 80017a2:	4095      	lsls	r5, r2
 80017a4:	002a      	movs	r2, r5
 80017a6:	1e55      	subs	r5, r2, #1
 80017a8:	41aa      	sbcs	r2, r5
 80017aa:	430a      	orrs	r2, r1
 80017ac:	4906      	ldr	r1, [pc, #24]	@ (80017c8 <__aeabi_i2f+0x9c>)
 80017ae:	4011      	ands	r1, r2
 80017b0:	0755      	lsls	r5, r2, #29
 80017b2:	d1e2      	bne.n	800177a <__aeabi_i2f+0x4e>
 80017b4:	08ca      	lsrs	r2, r1, #3
 80017b6:	0252      	lsls	r2, r2, #9
 80017b8:	0a55      	lsrs	r5, r2, #9
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	e7cf      	b.n	800175e <__aeabi_i2f+0x32>
 80017be:	026d      	lsls	r5, r5, #9
 80017c0:	0a6d      	lsrs	r5, r5, #9
 80017c2:	308e      	adds	r0, #142	@ 0x8e
 80017c4:	e7cb      	b.n	800175e <__aeabi_i2f+0x32>
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	fbffffff 	.word	0xfbffffff

080017cc <__aeabi_ui2f>:
 80017cc:	b510      	push	{r4, lr}
 80017ce:	1e04      	subs	r4, r0, #0
 80017d0:	d00d      	beq.n	80017ee <__aeabi_ui2f+0x22>
 80017d2:	f7fe feb7 	bl	8000544 <__clzsi2>
 80017d6:	239e      	movs	r3, #158	@ 0x9e
 80017d8:	1a1b      	subs	r3, r3, r0
 80017da:	2b96      	cmp	r3, #150	@ 0x96
 80017dc:	dc0c      	bgt.n	80017f8 <__aeabi_ui2f+0x2c>
 80017de:	2808      	cmp	r0, #8
 80017e0:	d034      	beq.n	800184c <__aeabi_ui2f+0x80>
 80017e2:	3808      	subs	r0, #8
 80017e4:	4084      	lsls	r4, r0
 80017e6:	0264      	lsls	r4, r4, #9
 80017e8:	0a64      	lsrs	r4, r4, #9
 80017ea:	b2d8      	uxtb	r0, r3
 80017ec:	e001      	b.n	80017f2 <__aeabi_ui2f+0x26>
 80017ee:	2000      	movs	r0, #0
 80017f0:	2400      	movs	r4, #0
 80017f2:	05c0      	lsls	r0, r0, #23
 80017f4:	4320      	orrs	r0, r4
 80017f6:	bd10      	pop	{r4, pc}
 80017f8:	2b99      	cmp	r3, #153	@ 0x99
 80017fa:	dc13      	bgt.n	8001824 <__aeabi_ui2f+0x58>
 80017fc:	1f42      	subs	r2, r0, #5
 80017fe:	4094      	lsls	r4, r2
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <__aeabi_ui2f+0x88>)
 8001802:	4022      	ands	r2, r4
 8001804:	0761      	lsls	r1, r4, #29
 8001806:	d01c      	beq.n	8001842 <__aeabi_ui2f+0x76>
 8001808:	210f      	movs	r1, #15
 800180a:	4021      	ands	r1, r4
 800180c:	2904      	cmp	r1, #4
 800180e:	d018      	beq.n	8001842 <__aeabi_ui2f+0x76>
 8001810:	3204      	adds	r2, #4
 8001812:	08d4      	lsrs	r4, r2, #3
 8001814:	0152      	lsls	r2, r2, #5
 8001816:	d515      	bpl.n	8001844 <__aeabi_ui2f+0x78>
 8001818:	239f      	movs	r3, #159	@ 0x9f
 800181a:	0264      	lsls	r4, r4, #9
 800181c:	1a18      	subs	r0, r3, r0
 800181e:	0a64      	lsrs	r4, r4, #9
 8001820:	b2c0      	uxtb	r0, r0
 8001822:	e7e6      	b.n	80017f2 <__aeabi_ui2f+0x26>
 8001824:	0002      	movs	r2, r0
 8001826:	0021      	movs	r1, r4
 8001828:	321b      	adds	r2, #27
 800182a:	4091      	lsls	r1, r2
 800182c:	000a      	movs	r2, r1
 800182e:	1e51      	subs	r1, r2, #1
 8001830:	418a      	sbcs	r2, r1
 8001832:	2105      	movs	r1, #5
 8001834:	1a09      	subs	r1, r1, r0
 8001836:	40cc      	lsrs	r4, r1
 8001838:	4314      	orrs	r4, r2
 800183a:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <__aeabi_ui2f+0x88>)
 800183c:	4022      	ands	r2, r4
 800183e:	0761      	lsls	r1, r4, #29
 8001840:	d1e2      	bne.n	8001808 <__aeabi_ui2f+0x3c>
 8001842:	08d4      	lsrs	r4, r2, #3
 8001844:	0264      	lsls	r4, r4, #9
 8001846:	0a64      	lsrs	r4, r4, #9
 8001848:	b2d8      	uxtb	r0, r3
 800184a:	e7d2      	b.n	80017f2 <__aeabi_ui2f+0x26>
 800184c:	0264      	lsls	r4, r4, #9
 800184e:	0a64      	lsrs	r4, r4, #9
 8001850:	308e      	adds	r0, #142	@ 0x8e
 8001852:	e7ce      	b.n	80017f2 <__aeabi_ui2f+0x26>
 8001854:	fbffffff 	.word	0xfbffffff

08001858 <__aeabi_dadd>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	464f      	mov	r7, r9
 800185c:	4646      	mov	r6, r8
 800185e:	46d6      	mov	lr, sl
 8001860:	b5c0      	push	{r6, r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	9000      	str	r0, [sp, #0]
 8001866:	9101      	str	r1, [sp, #4]
 8001868:	030e      	lsls	r6, r1, #12
 800186a:	004c      	lsls	r4, r1, #1
 800186c:	0fcd      	lsrs	r5, r1, #31
 800186e:	0a71      	lsrs	r1, r6, #9
 8001870:	9e00      	ldr	r6, [sp, #0]
 8001872:	005f      	lsls	r7, r3, #1
 8001874:	0f76      	lsrs	r6, r6, #29
 8001876:	430e      	orrs	r6, r1
 8001878:	9900      	ldr	r1, [sp, #0]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	4689      	mov	r9, r1
 8001882:	0319      	lsls	r1, r3, #12
 8001884:	0d7b      	lsrs	r3, r7, #21
 8001886:	4698      	mov	r8, r3
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	0a49      	lsrs	r1, r1, #9
 800188c:	0fdb      	lsrs	r3, r3, #31
 800188e:	469c      	mov	ip, r3
 8001890:	9b00      	ldr	r3, [sp, #0]
 8001892:	9a00      	ldr	r2, [sp, #0]
 8001894:	0f5b      	lsrs	r3, r3, #29
 8001896:	430b      	orrs	r3, r1
 8001898:	4641      	mov	r1, r8
 800189a:	0d64      	lsrs	r4, r4, #21
 800189c:	00d2      	lsls	r2, r2, #3
 800189e:	1a61      	subs	r1, r4, r1
 80018a0:	4565      	cmp	r5, ip
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x4e>
 80018a4:	e0a6      	b.n	80019f4 <__aeabi_dadd+0x19c>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	dd72      	ble.n	8001990 <__aeabi_dadd+0x138>
 80018aa:	4647      	mov	r7, r8
 80018ac:	2f00      	cmp	r7, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x5a>
 80018b0:	e0dd      	b.n	8001a6e <__aeabi_dadd+0x216>
 80018b2:	4fcc      	ldr	r7, [pc, #816]	@ (8001be4 <__aeabi_dadd+0x38c>)
 80018b4:	42bc      	cmp	r4, r7
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x62>
 80018b8:	e19a      	b.n	8001bf0 <__aeabi_dadd+0x398>
 80018ba:	2701      	movs	r7, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dc17      	bgt.n	80018f0 <__aeabi_dadd+0x98>
 80018c0:	2780      	movs	r7, #128	@ 0x80
 80018c2:	043f      	lsls	r7, r7, #16
 80018c4:	433b      	orrs	r3, r7
 80018c6:	291f      	cmp	r1, #31
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dadd+0x74>
 80018ca:	e1dd      	b.n	8001c88 <__aeabi_dadd+0x430>
 80018cc:	2720      	movs	r7, #32
 80018ce:	1a78      	subs	r0, r7, r1
 80018d0:	001f      	movs	r7, r3
 80018d2:	4087      	lsls	r7, r0
 80018d4:	46ba      	mov	sl, r7
 80018d6:	0017      	movs	r7, r2
 80018d8:	40cf      	lsrs	r7, r1
 80018da:	4684      	mov	ip, r0
 80018dc:	0038      	movs	r0, r7
 80018de:	4657      	mov	r7, sl
 80018e0:	4307      	orrs	r7, r0
 80018e2:	4660      	mov	r0, ip
 80018e4:	4082      	lsls	r2, r0
 80018e6:	40cb      	lsrs	r3, r1
 80018e8:	1e50      	subs	r0, r2, #1
 80018ea:	4182      	sbcs	r2, r0
 80018ec:	1af6      	subs	r6, r6, r3
 80018ee:	4317      	orrs	r7, r2
 80018f0:	464b      	mov	r3, r9
 80018f2:	1bdf      	subs	r7, r3, r7
 80018f4:	45b9      	cmp	r9, r7
 80018f6:	4180      	sbcs	r0, r0
 80018f8:	4240      	negs	r0, r0
 80018fa:	1a36      	subs	r6, r6, r0
 80018fc:	0233      	lsls	r3, r6, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dadd+0xaa>
 8001900:	e0ff      	b.n	8001b02 <__aeabi_dadd+0x2aa>
 8001902:	0276      	lsls	r6, r6, #9
 8001904:	0a76      	lsrs	r6, r6, #9
 8001906:	2e00      	cmp	r6, #0
 8001908:	d100      	bne.n	800190c <__aeabi_dadd+0xb4>
 800190a:	e13c      	b.n	8001b86 <__aeabi_dadd+0x32e>
 800190c:	0030      	movs	r0, r6
 800190e:	f7fe fe19 	bl	8000544 <__clzsi2>
 8001912:	0003      	movs	r3, r0
 8001914:	3b08      	subs	r3, #8
 8001916:	2120      	movs	r1, #32
 8001918:	0038      	movs	r0, r7
 800191a:	1aca      	subs	r2, r1, r3
 800191c:	40d0      	lsrs	r0, r2
 800191e:	409e      	lsls	r6, r3
 8001920:	0002      	movs	r2, r0
 8001922:	409f      	lsls	r7, r3
 8001924:	4332      	orrs	r2, r6
 8001926:	429c      	cmp	r4, r3
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0xd4>
 800192a:	e1a6      	b.n	8001c7a <__aeabi_dadd+0x422>
 800192c:	1b18      	subs	r0, r3, r4
 800192e:	3001      	adds	r0, #1
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	003e      	movs	r6, r7
 8001934:	408f      	lsls	r7, r1
 8001936:	40c6      	lsrs	r6, r0
 8001938:	1e7b      	subs	r3, r7, #1
 800193a:	419f      	sbcs	r7, r3
 800193c:	0013      	movs	r3, r2
 800193e:	408b      	lsls	r3, r1
 8001940:	4337      	orrs	r7, r6
 8001942:	431f      	orrs	r7, r3
 8001944:	40c2      	lsrs	r2, r0
 8001946:	003b      	movs	r3, r7
 8001948:	0016      	movs	r6, r2
 800194a:	2400      	movs	r4, #0
 800194c:	4313      	orrs	r3, r2
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0xfa>
 8001950:	e1df      	b.n	8001d12 <__aeabi_dadd+0x4ba>
 8001952:	077b      	lsls	r3, r7, #29
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0x100>
 8001956:	e332      	b.n	8001fbe <__aeabi_dadd+0x766>
 8001958:	230f      	movs	r3, #15
 800195a:	003a      	movs	r2, r7
 800195c:	403b      	ands	r3, r7
 800195e:	2b04      	cmp	r3, #4
 8001960:	d004      	beq.n	800196c <__aeabi_dadd+0x114>
 8001962:	1d3a      	adds	r2, r7, #4
 8001964:	42ba      	cmp	r2, r7
 8001966:	41bf      	sbcs	r7, r7
 8001968:	427f      	negs	r7, r7
 800196a:	19f6      	adds	r6, r6, r7
 800196c:	0233      	lsls	r3, r6, #8
 800196e:	d400      	bmi.n	8001972 <__aeabi_dadd+0x11a>
 8001970:	e323      	b.n	8001fba <__aeabi_dadd+0x762>
 8001972:	4b9c      	ldr	r3, [pc, #624]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001974:	3401      	adds	r4, #1
 8001976:	429c      	cmp	r4, r3
 8001978:	d100      	bne.n	800197c <__aeabi_dadd+0x124>
 800197a:	e0b4      	b.n	8001ae6 <__aeabi_dadd+0x28e>
 800197c:	4b9a      	ldr	r3, [pc, #616]	@ (8001be8 <__aeabi_dadd+0x390>)
 800197e:	0564      	lsls	r4, r4, #21
 8001980:	401e      	ands	r6, r3
 8001982:	0d64      	lsrs	r4, r4, #21
 8001984:	0777      	lsls	r7, r6, #29
 8001986:	08d2      	lsrs	r2, r2, #3
 8001988:	0276      	lsls	r6, r6, #9
 800198a:	4317      	orrs	r7, r2
 800198c:	0b36      	lsrs	r6, r6, #12
 800198e:	e0ac      	b.n	8001aea <__aeabi_dadd+0x292>
 8001990:	2900      	cmp	r1, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dadd+0x13e>
 8001994:	e07e      	b.n	8001a94 <__aeabi_dadd+0x23c>
 8001996:	4641      	mov	r1, r8
 8001998:	1b09      	subs	r1, r1, r4
 800199a:	2c00      	cmp	r4, #0
 800199c:	d000      	beq.n	80019a0 <__aeabi_dadd+0x148>
 800199e:	e160      	b.n	8001c62 <__aeabi_dadd+0x40a>
 80019a0:	0034      	movs	r4, r6
 80019a2:	4648      	mov	r0, r9
 80019a4:	4304      	orrs	r4, r0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dadd+0x152>
 80019a8:	e1c9      	b.n	8001d3e <__aeabi_dadd+0x4e6>
 80019aa:	1e4c      	subs	r4, r1, #1
 80019ac:	2901      	cmp	r1, #1
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dadd+0x15a>
 80019b0:	e22e      	b.n	8001e10 <__aeabi_dadd+0x5b8>
 80019b2:	4d8c      	ldr	r5, [pc, #560]	@ (8001be4 <__aeabi_dadd+0x38c>)
 80019b4:	42a9      	cmp	r1, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x162>
 80019b8:	e224      	b.n	8001e04 <__aeabi_dadd+0x5ac>
 80019ba:	2701      	movs	r7, #1
 80019bc:	2c38      	cmp	r4, #56	@ 0x38
 80019be:	dc11      	bgt.n	80019e4 <__aeabi_dadd+0x18c>
 80019c0:	0021      	movs	r1, r4
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x170>
 80019c6:	e20b      	b.n	8001de0 <__aeabi_dadd+0x588>
 80019c8:	2420      	movs	r4, #32
 80019ca:	0037      	movs	r7, r6
 80019cc:	4648      	mov	r0, r9
 80019ce:	1a64      	subs	r4, r4, r1
 80019d0:	40a7      	lsls	r7, r4
 80019d2:	40c8      	lsrs	r0, r1
 80019d4:	4307      	orrs	r7, r0
 80019d6:	4648      	mov	r0, r9
 80019d8:	40a0      	lsls	r0, r4
 80019da:	40ce      	lsrs	r6, r1
 80019dc:	1e44      	subs	r4, r0, #1
 80019de:	41a0      	sbcs	r0, r4
 80019e0:	1b9b      	subs	r3, r3, r6
 80019e2:	4307      	orrs	r7, r0
 80019e4:	1bd7      	subs	r7, r2, r7
 80019e6:	42ba      	cmp	r2, r7
 80019e8:	4192      	sbcs	r2, r2
 80019ea:	4252      	negs	r2, r2
 80019ec:	4665      	mov	r5, ip
 80019ee:	4644      	mov	r4, r8
 80019f0:	1a9e      	subs	r6, r3, r2
 80019f2:	e783      	b.n	80018fc <__aeabi_dadd+0xa4>
 80019f4:	2900      	cmp	r1, #0
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dadd+0x1a2>
 80019f8:	e09c      	b.n	8001b34 <__aeabi_dadd+0x2dc>
 80019fa:	4647      	mov	r7, r8
 80019fc:	2f00      	cmp	r7, #0
 80019fe:	d167      	bne.n	8001ad0 <__aeabi_dadd+0x278>
 8001a00:	001f      	movs	r7, r3
 8001a02:	4317      	orrs	r7, r2
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0x1b0>
 8001a06:	e0e4      	b.n	8001bd2 <__aeabi_dadd+0x37a>
 8001a08:	1e48      	subs	r0, r1, #1
 8001a0a:	2901      	cmp	r1, #1
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x1b8>
 8001a0e:	e19b      	b.n	8001d48 <__aeabi_dadd+0x4f0>
 8001a10:	4f74      	ldr	r7, [pc, #464]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a12:	42b9      	cmp	r1, r7
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x1c0>
 8001a16:	e0eb      	b.n	8001bf0 <__aeabi_dadd+0x398>
 8001a18:	2701      	movs	r7, #1
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	2838      	cmp	r0, #56	@ 0x38
 8001a1e:	dc11      	bgt.n	8001a44 <__aeabi_dadd+0x1ec>
 8001a20:	291f      	cmp	r1, #31
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dadd+0x1ce>
 8001a24:	e1c7      	b.n	8001db6 <__aeabi_dadd+0x55e>
 8001a26:	2720      	movs	r7, #32
 8001a28:	1a78      	subs	r0, r7, r1
 8001a2a:	001f      	movs	r7, r3
 8001a2c:	4684      	mov	ip, r0
 8001a2e:	4087      	lsls	r7, r0
 8001a30:	0010      	movs	r0, r2
 8001a32:	40c8      	lsrs	r0, r1
 8001a34:	4307      	orrs	r7, r0
 8001a36:	4660      	mov	r0, ip
 8001a38:	4082      	lsls	r2, r0
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e50      	subs	r0, r2, #1
 8001a3e:	4182      	sbcs	r2, r0
 8001a40:	18f6      	adds	r6, r6, r3
 8001a42:	4317      	orrs	r7, r2
 8001a44:	444f      	add	r7, r9
 8001a46:	454f      	cmp	r7, r9
 8001a48:	4180      	sbcs	r0, r0
 8001a4a:	4240      	negs	r0, r0
 8001a4c:	1836      	adds	r6, r6, r0
 8001a4e:	0233      	lsls	r3, r6, #8
 8001a50:	d557      	bpl.n	8001b02 <__aeabi_dadd+0x2aa>
 8001a52:	4b64      	ldr	r3, [pc, #400]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a54:	3401      	adds	r4, #1
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d045      	beq.n	8001ae6 <__aeabi_dadd+0x28e>
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4b62      	ldr	r3, [pc, #392]	@ (8001be8 <__aeabi_dadd+0x390>)
 8001a5e:	087a      	lsrs	r2, r7, #1
 8001a60:	401e      	ands	r6, r3
 8001a62:	4039      	ands	r1, r7
 8001a64:	430a      	orrs	r2, r1
 8001a66:	07f7      	lsls	r7, r6, #31
 8001a68:	4317      	orrs	r7, r2
 8001a6a:	0876      	lsrs	r6, r6, #1
 8001a6c:	e771      	b.n	8001952 <__aeabi_dadd+0xfa>
 8001a6e:	001f      	movs	r7, r3
 8001a70:	4317      	orrs	r7, r2
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x21e>
 8001a74:	e0ad      	b.n	8001bd2 <__aeabi_dadd+0x37a>
 8001a76:	1e4f      	subs	r7, r1, #1
 8001a78:	46bc      	mov	ip, r7
 8001a7a:	2901      	cmp	r1, #1
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dadd+0x228>
 8001a7e:	e182      	b.n	8001d86 <__aeabi_dadd+0x52e>
 8001a80:	4f58      	ldr	r7, [pc, #352]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001a82:	42b9      	cmp	r1, r7
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dadd+0x230>
 8001a86:	e190      	b.n	8001daa <__aeabi_dadd+0x552>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	2701      	movs	r7, #1
 8001a8c:	2938      	cmp	r1, #56	@ 0x38
 8001a8e:	dd00      	ble.n	8001a92 <__aeabi_dadd+0x23a>
 8001a90:	e72e      	b.n	80018f0 <__aeabi_dadd+0x98>
 8001a92:	e718      	b.n	80018c6 <__aeabi_dadd+0x6e>
 8001a94:	4f55      	ldr	r7, [pc, #340]	@ (8001bec <__aeabi_dadd+0x394>)
 8001a96:	1c61      	adds	r1, r4, #1
 8001a98:	4239      	tst	r1, r7
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_dadd+0x246>
 8001a9c:	e0d0      	b.n	8001c40 <__aeabi_dadd+0x3e8>
 8001a9e:	0031      	movs	r1, r6
 8001aa0:	4648      	mov	r0, r9
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	4317      	orrs	r7, r2
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d000      	beq.n	8001aae <__aeabi_dadd+0x256>
 8001aac:	e13d      	b.n	8001d2a <__aeabi_dadd+0x4d2>
 8001aae:	2900      	cmp	r1, #0
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dadd+0x25c>
 8001ab2:	e1bc      	b.n	8001e2e <__aeabi_dadd+0x5d6>
 8001ab4:	2f00      	cmp	r7, #0
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dadd+0x262>
 8001ab8:	e1bf      	b.n	8001e3a <__aeabi_dadd+0x5e2>
 8001aba:	464b      	mov	r3, r9
 8001abc:	2100      	movs	r1, #0
 8001abe:	08d8      	lsrs	r0, r3, #3
 8001ac0:	0777      	lsls	r7, r6, #29
 8001ac2:	4307      	orrs	r7, r0
 8001ac4:	08f0      	lsrs	r0, r6, #3
 8001ac6:	0306      	lsls	r6, r0, #12
 8001ac8:	054c      	lsls	r4, r1, #21
 8001aca:	0b36      	lsrs	r6, r6, #12
 8001acc:	0d64      	lsrs	r4, r4, #21
 8001ace:	e00c      	b.n	8001aea <__aeabi_dadd+0x292>
 8001ad0:	4f44      	ldr	r7, [pc, #272]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001ad2:	42bc      	cmp	r4, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dadd+0x280>
 8001ad6:	e08b      	b.n	8001bf0 <__aeabi_dadd+0x398>
 8001ad8:	2701      	movs	r7, #1
 8001ada:	2938      	cmp	r1, #56	@ 0x38
 8001adc:	dcb2      	bgt.n	8001a44 <__aeabi_dadd+0x1ec>
 8001ade:	2780      	movs	r7, #128	@ 0x80
 8001ae0:	043f      	lsls	r7, r7, #16
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	e79c      	b.n	8001a20 <__aeabi_dadd+0x1c8>
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	2700      	movs	r7, #0
 8001aea:	0524      	lsls	r4, r4, #20
 8001aec:	4334      	orrs	r4, r6
 8001aee:	07ed      	lsls	r5, r5, #31
 8001af0:	432c      	orrs	r4, r5
 8001af2:	0038      	movs	r0, r7
 8001af4:	0021      	movs	r1, r4
 8001af6:	b002      	add	sp, #8
 8001af8:	bce0      	pop	{r5, r6, r7}
 8001afa:	46ba      	mov	sl, r7
 8001afc:	46b1      	mov	r9, r6
 8001afe:	46a8      	mov	r8, r5
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	077b      	lsls	r3, r7, #29
 8001b04:	d004      	beq.n	8001b10 <__aeabi_dadd+0x2b8>
 8001b06:	230f      	movs	r3, #15
 8001b08:	403b      	ands	r3, r7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d000      	beq.n	8001b10 <__aeabi_dadd+0x2b8>
 8001b0e:	e728      	b.n	8001962 <__aeabi_dadd+0x10a>
 8001b10:	08f8      	lsrs	r0, r7, #3
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b14:	0777      	lsls	r7, r6, #29
 8001b16:	4307      	orrs	r7, r0
 8001b18:	08f0      	lsrs	r0, r6, #3
 8001b1a:	429c      	cmp	r4, r3
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dadd+0x2c8>
 8001b1e:	e24a      	b.n	8001fb6 <__aeabi_dadd+0x75e>
 8001b20:	003b      	movs	r3, r7
 8001b22:	4303      	orrs	r3, r0
 8001b24:	d059      	beq.n	8001bda <__aeabi_dadd+0x382>
 8001b26:	2680      	movs	r6, #128	@ 0x80
 8001b28:	0336      	lsls	r6, r6, #12
 8001b2a:	4306      	orrs	r6, r0
 8001b2c:	0336      	lsls	r6, r6, #12
 8001b2e:	4c2d      	ldr	r4, [pc, #180]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b30:	0b36      	lsrs	r6, r6, #12
 8001b32:	e7da      	b.n	8001aea <__aeabi_dadd+0x292>
 8001b34:	2900      	cmp	r1, #0
 8001b36:	d061      	beq.n	8001bfc <__aeabi_dadd+0x3a4>
 8001b38:	4641      	mov	r1, r8
 8001b3a:	1b09      	subs	r1, r1, r4
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dadd+0x2ea>
 8001b40:	e0b9      	b.n	8001cb6 <__aeabi_dadd+0x45e>
 8001b42:	4c28      	ldr	r4, [pc, #160]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001b44:	45a0      	cmp	r8, r4
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dadd+0x2f2>
 8001b48:	e1a5      	b.n	8001e96 <__aeabi_dadd+0x63e>
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	2938      	cmp	r1, #56	@ 0x38
 8001b4e:	dc13      	bgt.n	8001b78 <__aeabi_dadd+0x320>
 8001b50:	2480      	movs	r4, #128	@ 0x80
 8001b52:	0424      	lsls	r4, r4, #16
 8001b54:	4326      	orrs	r6, r4
 8001b56:	291f      	cmp	r1, #31
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_dadd+0x304>
 8001b5a:	e1c8      	b.n	8001eee <__aeabi_dadd+0x696>
 8001b5c:	2420      	movs	r4, #32
 8001b5e:	0037      	movs	r7, r6
 8001b60:	4648      	mov	r0, r9
 8001b62:	1a64      	subs	r4, r4, r1
 8001b64:	40a7      	lsls	r7, r4
 8001b66:	40c8      	lsrs	r0, r1
 8001b68:	4307      	orrs	r7, r0
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	40a0      	lsls	r0, r4
 8001b6e:	40ce      	lsrs	r6, r1
 8001b70:	1e44      	subs	r4, r0, #1
 8001b72:	41a0      	sbcs	r0, r4
 8001b74:	199b      	adds	r3, r3, r6
 8001b76:	4307      	orrs	r7, r0
 8001b78:	18bf      	adds	r7, r7, r2
 8001b7a:	4297      	cmp	r7, r2
 8001b7c:	4192      	sbcs	r2, r2
 8001b7e:	4252      	negs	r2, r2
 8001b80:	4644      	mov	r4, r8
 8001b82:	18d6      	adds	r6, r2, r3
 8001b84:	e763      	b.n	8001a4e <__aeabi_dadd+0x1f6>
 8001b86:	0038      	movs	r0, r7
 8001b88:	f7fe fcdc 	bl	8000544 <__clzsi2>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	3318      	adds	r3, #24
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dadd+0x33e>
 8001b94:	e6bf      	b.n	8001916 <__aeabi_dadd+0xbe>
 8001b96:	003a      	movs	r2, r7
 8001b98:	3808      	subs	r0, #8
 8001b9a:	4082      	lsls	r2, r0
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dadd+0x34a>
 8001ba0:	e083      	b.n	8001caa <__aeabi_dadd+0x452>
 8001ba2:	1b1b      	subs	r3, r3, r4
 8001ba4:	1c58      	adds	r0, r3, #1
 8001ba6:	281f      	cmp	r0, #31
 8001ba8:	dc00      	bgt.n	8001bac <__aeabi_dadd+0x354>
 8001baa:	e1b4      	b.n	8001f16 <__aeabi_dadd+0x6be>
 8001bac:	0017      	movs	r7, r2
 8001bae:	3b1f      	subs	r3, #31
 8001bb0:	40df      	lsrs	r7, r3
 8001bb2:	2820      	cmp	r0, #32
 8001bb4:	d005      	beq.n	8001bc2 <__aeabi_dadd+0x36a>
 8001bb6:	2340      	movs	r3, #64	@ 0x40
 8001bb8:	1a1b      	subs	r3, r3, r0
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	1e53      	subs	r3, r2, #1
 8001bbe:	419a      	sbcs	r2, r3
 8001bc0:	4317      	orrs	r7, r2
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2f00      	cmp	r7, #0
 8001bc6:	d00a      	beq.n	8001bde <__aeabi_dadd+0x386>
 8001bc8:	077b      	lsls	r3, r7, #29
 8001bca:	d000      	beq.n	8001bce <__aeabi_dadd+0x376>
 8001bcc:	e6c4      	b.n	8001958 <__aeabi_dadd+0x100>
 8001bce:	0026      	movs	r6, r4
 8001bd0:	e79e      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	000c      	movs	r4, r1
 8001bd6:	08d8      	lsrs	r0, r3, #3
 8001bd8:	e79b      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001bda:	2700      	movs	r7, #0
 8001bdc:	4c01      	ldr	r4, [pc, #4]	@ (8001be4 <__aeabi_dadd+0x38c>)
 8001bde:	2600      	movs	r6, #0
 8001be0:	e783      	b.n	8001aea <__aeabi_dadd+0x292>
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	ff7fffff 	.word	0xff7fffff
 8001bec:	000007fe 	.word	0x000007fe
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	0777      	lsls	r7, r6, #29
 8001bf4:	08d8      	lsrs	r0, r3, #3
 8001bf6:	4307      	orrs	r7, r0
 8001bf8:	08f0      	lsrs	r0, r6, #3
 8001bfa:	e791      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001bfc:	4fcd      	ldr	r7, [pc, #820]	@ (8001f34 <__aeabi_dadd+0x6dc>)
 8001bfe:	1c61      	adds	r1, r4, #1
 8001c00:	4239      	tst	r1, r7
 8001c02:	d16b      	bne.n	8001cdc <__aeabi_dadd+0x484>
 8001c04:	0031      	movs	r1, r6
 8001c06:	4648      	mov	r0, r9
 8001c08:	4301      	orrs	r1, r0
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dadd+0x3b8>
 8001c0e:	e14b      	b.n	8001ea8 <__aeabi_dadd+0x650>
 8001c10:	001f      	movs	r7, r3
 8001c12:	4317      	orrs	r7, r2
 8001c14:	2900      	cmp	r1, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dadd+0x3c2>
 8001c18:	e181      	b.n	8001f1e <__aeabi_dadd+0x6c6>
 8001c1a:	2f00      	cmp	r7, #0
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dadd+0x3c8>
 8001c1e:	e74c      	b.n	8001aba <__aeabi_dadd+0x262>
 8001c20:	444a      	add	r2, r9
 8001c22:	454a      	cmp	r2, r9
 8001c24:	4180      	sbcs	r0, r0
 8001c26:	18f6      	adds	r6, r6, r3
 8001c28:	4240      	negs	r0, r0
 8001c2a:	1836      	adds	r6, r6, r0
 8001c2c:	0233      	lsls	r3, r6, #8
 8001c2e:	d500      	bpl.n	8001c32 <__aeabi_dadd+0x3da>
 8001c30:	e1b0      	b.n	8001f94 <__aeabi_dadd+0x73c>
 8001c32:	0017      	movs	r7, r2
 8001c34:	4691      	mov	r9, r2
 8001c36:	4337      	orrs	r7, r6
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dadd+0x3e4>
 8001c3a:	e73e      	b.n	8001aba <__aeabi_dadd+0x262>
 8001c3c:	2600      	movs	r6, #0
 8001c3e:	e754      	b.n	8001aea <__aeabi_dadd+0x292>
 8001c40:	4649      	mov	r1, r9
 8001c42:	1a89      	subs	r1, r1, r2
 8001c44:	4688      	mov	r8, r1
 8001c46:	45c1      	cmp	r9, r8
 8001c48:	41bf      	sbcs	r7, r7
 8001c4a:	1af1      	subs	r1, r6, r3
 8001c4c:	427f      	negs	r7, r7
 8001c4e:	1bc9      	subs	r1, r1, r7
 8001c50:	020f      	lsls	r7, r1, #8
 8001c52:	d461      	bmi.n	8001d18 <__aeabi_dadd+0x4c0>
 8001c54:	4647      	mov	r7, r8
 8001c56:	430f      	orrs	r7, r1
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dadd+0x404>
 8001c5a:	e0bd      	b.n	8001dd8 <__aeabi_dadd+0x580>
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	4647      	mov	r7, r8
 8001c60:	e651      	b.n	8001906 <__aeabi_dadd+0xae>
 8001c62:	4cb5      	ldr	r4, [pc, #724]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001c64:	45a0      	cmp	r8, r4
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dadd+0x412>
 8001c68:	e100      	b.n	8001e6c <__aeabi_dadd+0x614>
 8001c6a:	2701      	movs	r7, #1
 8001c6c:	2938      	cmp	r1, #56	@ 0x38
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dadd+0x41a>
 8001c70:	e6b8      	b.n	80019e4 <__aeabi_dadd+0x18c>
 8001c72:	2480      	movs	r4, #128	@ 0x80
 8001c74:	0424      	lsls	r4, r4, #16
 8001c76:	4326      	orrs	r6, r4
 8001c78:	e6a3      	b.n	80019c2 <__aeabi_dadd+0x16a>
 8001c7a:	4eb0      	ldr	r6, [pc, #704]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001c7c:	1ae4      	subs	r4, r4, r3
 8001c7e:	4016      	ands	r6, r2
 8001c80:	077b      	lsls	r3, r7, #29
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dadd+0x42e>
 8001c84:	e73f      	b.n	8001b06 <__aeabi_dadd+0x2ae>
 8001c86:	e743      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001c88:	000f      	movs	r7, r1
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	3f20      	subs	r7, #32
 8001c8e:	40f8      	lsrs	r0, r7
 8001c90:	4684      	mov	ip, r0
 8001c92:	2920      	cmp	r1, #32
 8001c94:	d003      	beq.n	8001c9e <__aeabi_dadd+0x446>
 8001c96:	2740      	movs	r7, #64	@ 0x40
 8001c98:	1a79      	subs	r1, r7, r1
 8001c9a:	408b      	lsls	r3, r1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	1e53      	subs	r3, r2, #1
 8001ca0:	419a      	sbcs	r2, r3
 8001ca2:	4663      	mov	r3, ip
 8001ca4:	0017      	movs	r7, r2
 8001ca6:	431f      	orrs	r7, r3
 8001ca8:	e622      	b.n	80018f0 <__aeabi_dadd+0x98>
 8001caa:	48a4      	ldr	r0, [pc, #656]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001cac:	1ae1      	subs	r1, r4, r3
 8001cae:	4010      	ands	r0, r2
 8001cb0:	0747      	lsls	r7, r0, #29
 8001cb2:	08c0      	lsrs	r0, r0, #3
 8001cb4:	e707      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001cb6:	0034      	movs	r4, r6
 8001cb8:	4648      	mov	r0, r9
 8001cba:	4304      	orrs	r4, r0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dadd+0x468>
 8001cbe:	e0fa      	b.n	8001eb6 <__aeabi_dadd+0x65e>
 8001cc0:	1e4c      	subs	r4, r1, #1
 8001cc2:	2901      	cmp	r1, #1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dadd+0x470>
 8001cc6:	e0d7      	b.n	8001e78 <__aeabi_dadd+0x620>
 8001cc8:	4f9b      	ldr	r7, [pc, #620]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001cca:	42b9      	cmp	r1, r7
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dadd+0x478>
 8001cce:	e0e2      	b.n	8001e96 <__aeabi_dadd+0x63e>
 8001cd0:	2701      	movs	r7, #1
 8001cd2:	2c38      	cmp	r4, #56	@ 0x38
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_dadd+0x480>
 8001cd6:	e74f      	b.n	8001b78 <__aeabi_dadd+0x320>
 8001cd8:	0021      	movs	r1, r4
 8001cda:	e73c      	b.n	8001b56 <__aeabi_dadd+0x2fe>
 8001cdc:	4c96      	ldr	r4, [pc, #600]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001cde:	42a1      	cmp	r1, r4
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dadd+0x48c>
 8001ce2:	e0dd      	b.n	8001ea0 <__aeabi_dadd+0x648>
 8001ce4:	444a      	add	r2, r9
 8001ce6:	454a      	cmp	r2, r9
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	18f3      	adds	r3, r6, r3
 8001cec:	4240      	negs	r0, r0
 8001cee:	1818      	adds	r0, r3, r0
 8001cf0:	07c7      	lsls	r7, r0, #31
 8001cf2:	0852      	lsrs	r2, r2, #1
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	0846      	lsrs	r6, r0, #1
 8001cf8:	0752      	lsls	r2, r2, #29
 8001cfa:	d005      	beq.n	8001d08 <__aeabi_dadd+0x4b0>
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	000c      	movs	r4, r1
 8001d00:	403a      	ands	r2, r7
 8001d02:	2a04      	cmp	r2, #4
 8001d04:	d000      	beq.n	8001d08 <__aeabi_dadd+0x4b0>
 8001d06:	e62c      	b.n	8001962 <__aeabi_dadd+0x10a>
 8001d08:	0776      	lsls	r6, r6, #29
 8001d0a:	08ff      	lsrs	r7, r7, #3
 8001d0c:	4337      	orrs	r7, r6
 8001d0e:	0900      	lsrs	r0, r0, #4
 8001d10:	e6d9      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001d12:	2700      	movs	r7, #0
 8001d14:	2600      	movs	r6, #0
 8001d16:	e6e8      	b.n	8001aea <__aeabi_dadd+0x292>
 8001d18:	4649      	mov	r1, r9
 8001d1a:	1a57      	subs	r7, r2, r1
 8001d1c:	42ba      	cmp	r2, r7
 8001d1e:	4192      	sbcs	r2, r2
 8001d20:	1b9e      	subs	r6, r3, r6
 8001d22:	4252      	negs	r2, r2
 8001d24:	4665      	mov	r5, ip
 8001d26:	1ab6      	subs	r6, r6, r2
 8001d28:	e5ed      	b.n	8001906 <__aeabi_dadd+0xae>
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dadd+0x4d8>
 8001d2e:	e0c6      	b.n	8001ebe <__aeabi_dadd+0x666>
 8001d30:	2f00      	cmp	r7, #0
 8001d32:	d167      	bne.n	8001e04 <__aeabi_dadd+0x5ac>
 8001d34:	2680      	movs	r6, #128	@ 0x80
 8001d36:	2500      	movs	r5, #0
 8001d38:	4c7f      	ldr	r4, [pc, #508]	@ (8001f38 <__aeabi_dadd+0x6e0>)
 8001d3a:	0336      	lsls	r6, r6, #12
 8001d3c:	e6d5      	b.n	8001aea <__aeabi_dadd+0x292>
 8001d3e:	4665      	mov	r5, ip
 8001d40:	000c      	movs	r4, r1
 8001d42:	001e      	movs	r6, r3
 8001d44:	08d0      	lsrs	r0, r2, #3
 8001d46:	e6e4      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001d48:	444a      	add	r2, r9
 8001d4a:	454a      	cmp	r2, r9
 8001d4c:	4180      	sbcs	r0, r0
 8001d4e:	18f3      	adds	r3, r6, r3
 8001d50:	4240      	negs	r0, r0
 8001d52:	1818      	adds	r0, r3, r0
 8001d54:	0011      	movs	r1, r2
 8001d56:	0203      	lsls	r3, r0, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dadd+0x504>
 8001d5a:	e096      	b.n	8001e8a <__aeabi_dadd+0x632>
 8001d5c:	4b77      	ldr	r3, [pc, #476]	@ (8001f3c <__aeabi_dadd+0x6e4>)
 8001d5e:	0849      	lsrs	r1, r1, #1
 8001d60:	4018      	ands	r0, r3
 8001d62:	07c3      	lsls	r3, r0, #31
 8001d64:	430b      	orrs	r3, r1
 8001d66:	0844      	lsrs	r4, r0, #1
 8001d68:	0749      	lsls	r1, r1, #29
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dadd+0x516>
 8001d6c:	e129      	b.n	8001fc2 <__aeabi_dadd+0x76a>
 8001d6e:	220f      	movs	r2, #15
 8001d70:	401a      	ands	r2, r3
 8001d72:	2a04      	cmp	r2, #4
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dadd+0x520>
 8001d76:	e0ea      	b.n	8001f4e <__aeabi_dadd+0x6f6>
 8001d78:	1d1f      	adds	r7, r3, #4
 8001d7a:	429f      	cmp	r7, r3
 8001d7c:	41b6      	sbcs	r6, r6
 8001d7e:	4276      	negs	r6, r6
 8001d80:	1936      	adds	r6, r6, r4
 8001d82:	2402      	movs	r4, #2
 8001d84:	e6c4      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001d86:	4649      	mov	r1, r9
 8001d88:	1a8f      	subs	r7, r1, r2
 8001d8a:	45b9      	cmp	r9, r7
 8001d8c:	4180      	sbcs	r0, r0
 8001d8e:	1af6      	subs	r6, r6, r3
 8001d90:	4240      	negs	r0, r0
 8001d92:	1a36      	subs	r6, r6, r0
 8001d94:	0233      	lsls	r3, r6, #8
 8001d96:	d406      	bmi.n	8001da6 <__aeabi_dadd+0x54e>
 8001d98:	0773      	lsls	r3, r6, #29
 8001d9a:	08ff      	lsrs	r7, r7, #3
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	431f      	orrs	r7, r3
 8001da0:	08f0      	lsrs	r0, r6, #3
 8001da2:	e690      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001da4:	4665      	mov	r5, ip
 8001da6:	2401      	movs	r4, #1
 8001da8:	e5ab      	b.n	8001902 <__aeabi_dadd+0xaa>
 8001daa:	464b      	mov	r3, r9
 8001dac:	0777      	lsls	r7, r6, #29
 8001dae:	08d8      	lsrs	r0, r3, #3
 8001db0:	4307      	orrs	r7, r0
 8001db2:	08f0      	lsrs	r0, r6, #3
 8001db4:	e6b4      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001db6:	000f      	movs	r7, r1
 8001db8:	0018      	movs	r0, r3
 8001dba:	3f20      	subs	r7, #32
 8001dbc:	40f8      	lsrs	r0, r7
 8001dbe:	4684      	mov	ip, r0
 8001dc0:	2920      	cmp	r1, #32
 8001dc2:	d003      	beq.n	8001dcc <__aeabi_dadd+0x574>
 8001dc4:	2740      	movs	r7, #64	@ 0x40
 8001dc6:	1a79      	subs	r1, r7, r1
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	1e53      	subs	r3, r2, #1
 8001dce:	419a      	sbcs	r2, r3
 8001dd0:	4663      	mov	r3, ip
 8001dd2:	0017      	movs	r7, r2
 8001dd4:	431f      	orrs	r7, r3
 8001dd6:	e635      	b.n	8001a44 <__aeabi_dadd+0x1ec>
 8001dd8:	2500      	movs	r5, #0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2600      	movs	r6, #0
 8001dde:	e684      	b.n	8001aea <__aeabi_dadd+0x292>
 8001de0:	000c      	movs	r4, r1
 8001de2:	0035      	movs	r5, r6
 8001de4:	3c20      	subs	r4, #32
 8001de6:	40e5      	lsrs	r5, r4
 8001de8:	2920      	cmp	r1, #32
 8001dea:	d005      	beq.n	8001df8 <__aeabi_dadd+0x5a0>
 8001dec:	2440      	movs	r4, #64	@ 0x40
 8001dee:	1a61      	subs	r1, r4, r1
 8001df0:	408e      	lsls	r6, r1
 8001df2:	4649      	mov	r1, r9
 8001df4:	4331      	orrs	r1, r6
 8001df6:	4689      	mov	r9, r1
 8001df8:	4648      	mov	r0, r9
 8001dfa:	1e41      	subs	r1, r0, #1
 8001dfc:	4188      	sbcs	r0, r1
 8001dfe:	0007      	movs	r7, r0
 8001e00:	432f      	orrs	r7, r5
 8001e02:	e5ef      	b.n	80019e4 <__aeabi_dadd+0x18c>
 8001e04:	08d2      	lsrs	r2, r2, #3
 8001e06:	075f      	lsls	r7, r3, #29
 8001e08:	4665      	mov	r5, ip
 8001e0a:	4317      	orrs	r7, r2
 8001e0c:	08d8      	lsrs	r0, r3, #3
 8001e0e:	e687      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001e10:	1a17      	subs	r7, r2, r0
 8001e12:	42ba      	cmp	r2, r7
 8001e14:	4192      	sbcs	r2, r2
 8001e16:	1b9e      	subs	r6, r3, r6
 8001e18:	4252      	negs	r2, r2
 8001e1a:	1ab6      	subs	r6, r6, r2
 8001e1c:	0233      	lsls	r3, r6, #8
 8001e1e:	d4c1      	bmi.n	8001da4 <__aeabi_dadd+0x54c>
 8001e20:	0773      	lsls	r3, r6, #29
 8001e22:	08ff      	lsrs	r7, r7, #3
 8001e24:	4665      	mov	r5, ip
 8001e26:	2101      	movs	r1, #1
 8001e28:	431f      	orrs	r7, r3
 8001e2a:	08f0      	lsrs	r0, r6, #3
 8001e2c:	e64b      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001e2e:	2f00      	cmp	r7, #0
 8001e30:	d07b      	beq.n	8001f2a <__aeabi_dadd+0x6d2>
 8001e32:	4665      	mov	r5, ip
 8001e34:	001e      	movs	r6, r3
 8001e36:	4691      	mov	r9, r2
 8001e38:	e63f      	b.n	8001aba <__aeabi_dadd+0x262>
 8001e3a:	1a81      	subs	r1, r0, r2
 8001e3c:	4688      	mov	r8, r1
 8001e3e:	45c1      	cmp	r9, r8
 8001e40:	41a4      	sbcs	r4, r4
 8001e42:	1af1      	subs	r1, r6, r3
 8001e44:	4264      	negs	r4, r4
 8001e46:	1b09      	subs	r1, r1, r4
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	0424      	lsls	r4, r4, #16
 8001e4c:	4221      	tst	r1, r4
 8001e4e:	d077      	beq.n	8001f40 <__aeabi_dadd+0x6e8>
 8001e50:	1a10      	subs	r0, r2, r0
 8001e52:	4282      	cmp	r2, r0
 8001e54:	4192      	sbcs	r2, r2
 8001e56:	0007      	movs	r7, r0
 8001e58:	1b9e      	subs	r6, r3, r6
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	1ab6      	subs	r6, r6, r2
 8001e5e:	4337      	orrs	r7, r6
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dadd+0x60c>
 8001e62:	e0a0      	b.n	8001fa6 <__aeabi_dadd+0x74e>
 8001e64:	4665      	mov	r5, ip
 8001e66:	2400      	movs	r4, #0
 8001e68:	2600      	movs	r6, #0
 8001e6a:	e63e      	b.n	8001aea <__aeabi_dadd+0x292>
 8001e6c:	075f      	lsls	r7, r3, #29
 8001e6e:	08d2      	lsrs	r2, r2, #3
 8001e70:	4665      	mov	r5, ip
 8001e72:	4317      	orrs	r7, r2
 8001e74:	08d8      	lsrs	r0, r3, #3
 8001e76:	e653      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001e78:	1881      	adds	r1, r0, r2
 8001e7a:	4291      	cmp	r1, r2
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	18f0      	adds	r0, r6, r3
 8001e80:	4252      	negs	r2, r2
 8001e82:	1880      	adds	r0, r0, r2
 8001e84:	0203      	lsls	r3, r0, #8
 8001e86:	d500      	bpl.n	8001e8a <__aeabi_dadd+0x632>
 8001e88:	e768      	b.n	8001d5c <__aeabi_dadd+0x504>
 8001e8a:	0747      	lsls	r7, r0, #29
 8001e8c:	08c9      	lsrs	r1, r1, #3
 8001e8e:	430f      	orrs	r7, r1
 8001e90:	08c0      	lsrs	r0, r0, #3
 8001e92:	2101      	movs	r1, #1
 8001e94:	e617      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	075f      	lsls	r7, r3, #29
 8001e9a:	4317      	orrs	r7, r2
 8001e9c:	08d8      	lsrs	r0, r3, #3
 8001e9e:	e63f      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001ea0:	000c      	movs	r4, r1
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	2700      	movs	r7, #0
 8001ea6:	e620      	b.n	8001aea <__aeabi_dadd+0x292>
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d156      	bne.n	8001f5a <__aeabi_dadd+0x702>
 8001eac:	075f      	lsls	r7, r3, #29
 8001eae:	08d2      	lsrs	r2, r2, #3
 8001eb0:	4317      	orrs	r7, r2
 8001eb2:	08d8      	lsrs	r0, r3, #3
 8001eb4:	e634      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001eb6:	000c      	movs	r4, r1
 8001eb8:	001e      	movs	r6, r3
 8001eba:	08d0      	lsrs	r0, r2, #3
 8001ebc:	e629      	b.n	8001b12 <__aeabi_dadd+0x2ba>
 8001ebe:	08c1      	lsrs	r1, r0, #3
 8001ec0:	0770      	lsls	r0, r6, #29
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	08f0      	lsrs	r0, r6, #3
 8001ec6:	2f00      	cmp	r7, #0
 8001ec8:	d062      	beq.n	8001f90 <__aeabi_dadd+0x738>
 8001eca:	2480      	movs	r4, #128	@ 0x80
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	4220      	tst	r0, r4
 8001ed0:	d007      	beq.n	8001ee2 <__aeabi_dadd+0x68a>
 8001ed2:	08de      	lsrs	r6, r3, #3
 8001ed4:	4226      	tst	r6, r4
 8001ed6:	d104      	bne.n	8001ee2 <__aeabi_dadd+0x68a>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	0030      	movs	r0, r6
 8001edc:	08d1      	lsrs	r1, r2, #3
 8001ede:	075b      	lsls	r3, r3, #29
 8001ee0:	4319      	orrs	r1, r3
 8001ee2:	0f4f      	lsrs	r7, r1, #29
 8001ee4:	00c9      	lsls	r1, r1, #3
 8001ee6:	08c9      	lsrs	r1, r1, #3
 8001ee8:	077f      	lsls	r7, r7, #29
 8001eea:	430f      	orrs	r7, r1
 8001eec:	e618      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001eee:	000c      	movs	r4, r1
 8001ef0:	0030      	movs	r0, r6
 8001ef2:	3c20      	subs	r4, #32
 8001ef4:	40e0      	lsrs	r0, r4
 8001ef6:	4684      	mov	ip, r0
 8001ef8:	2920      	cmp	r1, #32
 8001efa:	d005      	beq.n	8001f08 <__aeabi_dadd+0x6b0>
 8001efc:	2440      	movs	r4, #64	@ 0x40
 8001efe:	1a61      	subs	r1, r4, r1
 8001f00:	408e      	lsls	r6, r1
 8001f02:	4649      	mov	r1, r9
 8001f04:	4331      	orrs	r1, r6
 8001f06:	4689      	mov	r9, r1
 8001f08:	4648      	mov	r0, r9
 8001f0a:	1e41      	subs	r1, r0, #1
 8001f0c:	4188      	sbcs	r0, r1
 8001f0e:	4661      	mov	r1, ip
 8001f10:	0007      	movs	r7, r0
 8001f12:	430f      	orrs	r7, r1
 8001f14:	e630      	b.n	8001b78 <__aeabi_dadd+0x320>
 8001f16:	2120      	movs	r1, #32
 8001f18:	2700      	movs	r7, #0
 8001f1a:	1a09      	subs	r1, r1, r0
 8001f1c:	e50e      	b.n	800193c <__aeabi_dadd+0xe4>
 8001f1e:	001e      	movs	r6, r3
 8001f20:	2f00      	cmp	r7, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dadd+0x6ce>
 8001f24:	e522      	b.n	800196c <__aeabi_dadd+0x114>
 8001f26:	2400      	movs	r4, #0
 8001f28:	e758      	b.n	8001ddc <__aeabi_dadd+0x584>
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	2600      	movs	r6, #0
 8001f30:	e5db      	b.n	8001aea <__aeabi_dadd+0x292>
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	000007fe 	.word	0x000007fe
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	ff7fffff 	.word	0xff7fffff
 8001f40:	4647      	mov	r7, r8
 8001f42:	430f      	orrs	r7, r1
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dadd+0x6f0>
 8001f46:	e747      	b.n	8001dd8 <__aeabi_dadd+0x580>
 8001f48:	000e      	movs	r6, r1
 8001f4a:	46c1      	mov	r9, r8
 8001f4c:	e5b5      	b.n	8001aba <__aeabi_dadd+0x262>
 8001f4e:	08df      	lsrs	r7, r3, #3
 8001f50:	0764      	lsls	r4, r4, #29
 8001f52:	2102      	movs	r1, #2
 8001f54:	4327      	orrs	r7, r4
 8001f56:	0900      	lsrs	r0, r0, #4
 8001f58:	e5b5      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	08c0      	lsrs	r0, r0, #3
 8001f5e:	0777      	lsls	r7, r6, #29
 8001f60:	4307      	orrs	r7, r0
 8001f62:	4311      	orrs	r1, r2
 8001f64:	08f0      	lsrs	r0, r6, #3
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dadd+0x714>
 8001f6a:	e5d9      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f6c:	2180      	movs	r1, #128	@ 0x80
 8001f6e:	0309      	lsls	r1, r1, #12
 8001f70:	4208      	tst	r0, r1
 8001f72:	d007      	beq.n	8001f84 <__aeabi_dadd+0x72c>
 8001f74:	08dc      	lsrs	r4, r3, #3
 8001f76:	420c      	tst	r4, r1
 8001f78:	d104      	bne.n	8001f84 <__aeabi_dadd+0x72c>
 8001f7a:	08d2      	lsrs	r2, r2, #3
 8001f7c:	075b      	lsls	r3, r3, #29
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	0017      	movs	r7, r2
 8001f82:	0020      	movs	r0, r4
 8001f84:	0f7b      	lsrs	r3, r7, #29
 8001f86:	00ff      	lsls	r7, r7, #3
 8001f88:	08ff      	lsrs	r7, r7, #3
 8001f8a:	075b      	lsls	r3, r3, #29
 8001f8c:	431f      	orrs	r7, r3
 8001f8e:	e5c7      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f90:	000f      	movs	r7, r1
 8001f92:	e5c5      	b.n	8001b20 <__aeabi_dadd+0x2c8>
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <__aeabi_dadd+0x788>)
 8001f96:	08d2      	lsrs	r2, r2, #3
 8001f98:	4033      	ands	r3, r6
 8001f9a:	075f      	lsls	r7, r3, #29
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	2401      	movs	r4, #1
 8001fa0:	4317      	orrs	r7, r2
 8001fa2:	0b1e      	lsrs	r6, r3, #12
 8001fa4:	e5a1      	b.n	8001aea <__aeabi_dadd+0x292>
 8001fa6:	4226      	tst	r6, r4
 8001fa8:	d012      	beq.n	8001fd0 <__aeabi_dadd+0x778>
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_dadd+0x788>)
 8001fac:	4665      	mov	r5, ip
 8001fae:	0002      	movs	r2, r0
 8001fb0:	2401      	movs	r4, #1
 8001fb2:	401e      	ands	r6, r3
 8001fb4:	e4e6      	b.n	8001984 <__aeabi_dadd+0x12c>
 8001fb6:	0021      	movs	r1, r4
 8001fb8:	e585      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fba:	0017      	movs	r7, r2
 8001fbc:	e5a8      	b.n	8001b10 <__aeabi_dadd+0x2b8>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	e4d4      	b.n	800196c <__aeabi_dadd+0x114>
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0764      	lsls	r4, r4, #29
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	0027      	movs	r7, r4
 8001fca:	2102      	movs	r1, #2
 8001fcc:	0900      	lsrs	r0, r0, #4
 8001fce:	e57a      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fd0:	08c0      	lsrs	r0, r0, #3
 8001fd2:	0777      	lsls	r7, r6, #29
 8001fd4:	4307      	orrs	r7, r0
 8001fd6:	4665      	mov	r5, ip
 8001fd8:	2100      	movs	r1, #0
 8001fda:	08f0      	lsrs	r0, r6, #3
 8001fdc:	e573      	b.n	8001ac6 <__aeabi_dadd+0x26e>
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	ff7fffff 	.word	0xff7fffff

08001fe4 <__aeabi_ddiv>:
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	46de      	mov	lr, fp
 8001fe8:	4645      	mov	r5, r8
 8001fea:	4657      	mov	r7, sl
 8001fec:	464e      	mov	r6, r9
 8001fee:	b5e0      	push	{r5, r6, r7, lr}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	9200      	str	r2, [sp, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	030b      	lsls	r3, r1, #12
 8001ff8:	0b1b      	lsrs	r3, r3, #12
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	0fca      	lsrs	r2, r1, #31
 8001ffe:	004b      	lsls	r3, r1, #1
 8002000:	0004      	movs	r4, r0
 8002002:	4680      	mov	r8, r0
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	d100      	bne.n	800200c <__aeabi_ddiv+0x28>
 800200a:	e098      	b.n	800213e <__aeabi_ddiv+0x15a>
 800200c:	4a7c      	ldr	r2, [pc, #496]	@ (8002200 <__aeabi_ddiv+0x21c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d037      	beq.n	8002082 <__aeabi_ddiv+0x9e>
 8002012:	4659      	mov	r1, fp
 8002014:	0f42      	lsrs	r2, r0, #29
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	0409      	lsls	r1, r1, #16
 800201e:	4311      	orrs	r1, r2
 8002020:	00c2      	lsls	r2, r0, #3
 8002022:	4690      	mov	r8, r2
 8002024:	4a77      	ldr	r2, [pc, #476]	@ (8002204 <__aeabi_ddiv+0x220>)
 8002026:	4689      	mov	r9, r1
 8002028:	4692      	mov	sl, r2
 800202a:	449a      	add	sl, r3
 800202c:	2300      	movs	r3, #0
 800202e:	2400      	movs	r4, #0
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9e00      	ldr	r6, [sp, #0]
 8002034:	9f01      	ldr	r7, [sp, #4]
 8002036:	033b      	lsls	r3, r7, #12
 8002038:	0b1b      	lsrs	r3, r3, #12
 800203a:	469b      	mov	fp, r3
 800203c:	007b      	lsls	r3, r7, #1
 800203e:	0030      	movs	r0, r6
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	0ffd      	lsrs	r5, r7, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d059      	beq.n	80020fc <__aeabi_ddiv+0x118>
 8002048:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <__aeabi_ddiv+0x21c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d048      	beq.n	80020e0 <__aeabi_ddiv+0xfc>
 800204e:	4659      	mov	r1, fp
 8002050:	0f72      	lsrs	r2, r6, #29
 8002052:	00c9      	lsls	r1, r1, #3
 8002054:	430a      	orrs	r2, r1
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	0409      	lsls	r1, r1, #16
 800205a:	4311      	orrs	r1, r2
 800205c:	468b      	mov	fp, r1
 800205e:	4969      	ldr	r1, [pc, #420]	@ (8002204 <__aeabi_ddiv+0x220>)
 8002060:	00f2      	lsls	r2, r6, #3
 8002062:	468c      	mov	ip, r1
 8002064:	4651      	mov	r1, sl
 8002066:	4463      	add	r3, ip
 8002068:	1acb      	subs	r3, r1, r3
 800206a:	469a      	mov	sl, r3
 800206c:	2100      	movs	r1, #0
 800206e:	9e02      	ldr	r6, [sp, #8]
 8002070:	406e      	eors	r6, r5
 8002072:	b2f6      	uxtb	r6, r6
 8002074:	2c0f      	cmp	r4, #15
 8002076:	d900      	bls.n	800207a <__aeabi_ddiv+0x96>
 8002078:	e0ce      	b.n	8002218 <__aeabi_ddiv+0x234>
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <__aeabi_ddiv+0x224>)
 800207c:	00a4      	lsls	r4, r4, #2
 800207e:	591b      	ldr	r3, [r3, r4]
 8002080:	469f      	mov	pc, r3
 8002082:	465a      	mov	r2, fp
 8002084:	4302      	orrs	r2, r0
 8002086:	4691      	mov	r9, r2
 8002088:	d000      	beq.n	800208c <__aeabi_ddiv+0xa8>
 800208a:	e090      	b.n	80021ae <__aeabi_ddiv+0x1ca>
 800208c:	469a      	mov	sl, r3
 800208e:	2302      	movs	r3, #2
 8002090:	4690      	mov	r8, r2
 8002092:	2408      	movs	r4, #8
 8002094:	9303      	str	r3, [sp, #12]
 8002096:	e7cc      	b.n	8002032 <__aeabi_ddiv+0x4e>
 8002098:	46cb      	mov	fp, r9
 800209a:	4642      	mov	r2, r8
 800209c:	9d02      	ldr	r5, [sp, #8]
 800209e:	9903      	ldr	r1, [sp, #12]
 80020a0:	2902      	cmp	r1, #2
 80020a2:	d100      	bne.n	80020a6 <__aeabi_ddiv+0xc2>
 80020a4:	e1de      	b.n	8002464 <__aeabi_ddiv+0x480>
 80020a6:	2903      	cmp	r1, #3
 80020a8:	d100      	bne.n	80020ac <__aeabi_ddiv+0xc8>
 80020aa:	e08d      	b.n	80021c8 <__aeabi_ddiv+0x1e4>
 80020ac:	2901      	cmp	r1, #1
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0xce>
 80020b0:	e179      	b.n	80023a6 <__aeabi_ddiv+0x3c2>
 80020b2:	002e      	movs	r6, r5
 80020b4:	2200      	movs	r2, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	2400      	movs	r4, #0
 80020ba:	4690      	mov	r8, r2
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	4323      	orrs	r3, r4
 80020c0:	07f6      	lsls	r6, r6, #31
 80020c2:	4333      	orrs	r3, r6
 80020c4:	4640      	mov	r0, r8
 80020c6:	0019      	movs	r1, r3
 80020c8:	b007      	add	sp, #28
 80020ca:	bcf0      	pop	{r4, r5, r6, r7}
 80020cc:	46bb      	mov	fp, r7
 80020ce:	46b2      	mov	sl, r6
 80020d0:	46a9      	mov	r9, r5
 80020d2:	46a0      	mov	r8, r4
 80020d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d6:	2200      	movs	r2, #0
 80020d8:	2400      	movs	r4, #0
 80020da:	4690      	mov	r8, r2
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80020de:	e7ed      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80020e0:	465a      	mov	r2, fp
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <__aeabi_ddiv+0x228>)
 80020e8:	469c      	mov	ip, r3
 80020ea:	44e2      	add	sl, ip
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d159      	bne.n	80021a4 <__aeabi_ddiv+0x1c0>
 80020f0:	2302      	movs	r3, #2
 80020f2:	431c      	orrs	r4, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	2102      	movs	r1, #2
 80020f8:	469b      	mov	fp, r3
 80020fa:	e7b8      	b.n	800206e <__aeabi_ddiv+0x8a>
 80020fc:	465a      	mov	r2, fp
 80020fe:	9b00      	ldr	r3, [sp, #0]
 8002100:	431a      	orrs	r2, r3
 8002102:	d049      	beq.n	8002198 <__aeabi_ddiv+0x1b4>
 8002104:	465b      	mov	r3, fp
 8002106:	2b00      	cmp	r3, #0
 8002108:	d100      	bne.n	800210c <__aeabi_ddiv+0x128>
 800210a:	e19c      	b.n	8002446 <__aeabi_ddiv+0x462>
 800210c:	4658      	mov	r0, fp
 800210e:	f7fe fa19 	bl	8000544 <__clzsi2>
 8002112:	0002      	movs	r2, r0
 8002114:	0003      	movs	r3, r0
 8002116:	3a0b      	subs	r2, #11
 8002118:	271d      	movs	r7, #29
 800211a:	9e00      	ldr	r6, [sp, #0]
 800211c:	1aba      	subs	r2, r7, r2
 800211e:	0019      	movs	r1, r3
 8002120:	4658      	mov	r0, fp
 8002122:	40d6      	lsrs	r6, r2
 8002124:	3908      	subs	r1, #8
 8002126:	4088      	lsls	r0, r1
 8002128:	0032      	movs	r2, r6
 800212a:	4302      	orrs	r2, r0
 800212c:	4693      	mov	fp, r2
 800212e:	9a00      	ldr	r2, [sp, #0]
 8002130:	408a      	lsls	r2, r1
 8002132:	4937      	ldr	r1, [pc, #220]	@ (8002210 <__aeabi_ddiv+0x22c>)
 8002134:	4453      	add	r3, sl
 8002136:	468a      	mov	sl, r1
 8002138:	2100      	movs	r1, #0
 800213a:	449a      	add	sl, r3
 800213c:	e797      	b.n	800206e <__aeabi_ddiv+0x8a>
 800213e:	465b      	mov	r3, fp
 8002140:	4303      	orrs	r3, r0
 8002142:	4699      	mov	r9, r3
 8002144:	d021      	beq.n	800218a <__aeabi_ddiv+0x1a6>
 8002146:	465b      	mov	r3, fp
 8002148:	2b00      	cmp	r3, #0
 800214a:	d100      	bne.n	800214e <__aeabi_ddiv+0x16a>
 800214c:	e169      	b.n	8002422 <__aeabi_ddiv+0x43e>
 800214e:	4658      	mov	r0, fp
 8002150:	f7fe f9f8 	bl	8000544 <__clzsi2>
 8002154:	230b      	movs	r3, #11
 8002156:	425b      	negs	r3, r3
 8002158:	469c      	mov	ip, r3
 800215a:	0002      	movs	r2, r0
 800215c:	4484      	add	ip, r0
 800215e:	4666      	mov	r6, ip
 8002160:	231d      	movs	r3, #29
 8002162:	1b9b      	subs	r3, r3, r6
 8002164:	0026      	movs	r6, r4
 8002166:	0011      	movs	r1, r2
 8002168:	4658      	mov	r0, fp
 800216a:	40de      	lsrs	r6, r3
 800216c:	3908      	subs	r1, #8
 800216e:	4088      	lsls	r0, r1
 8002170:	0033      	movs	r3, r6
 8002172:	4303      	orrs	r3, r0
 8002174:	4699      	mov	r9, r3
 8002176:	0023      	movs	r3, r4
 8002178:	408b      	lsls	r3, r1
 800217a:	4698      	mov	r8, r3
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <__aeabi_ddiv+0x230>)
 800217e:	2400      	movs	r4, #0
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	469a      	mov	sl, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9303      	str	r3, [sp, #12]
 8002188:	e753      	b.n	8002032 <__aeabi_ddiv+0x4e>
 800218a:	2300      	movs	r3, #0
 800218c:	4698      	mov	r8, r3
 800218e:	469a      	mov	sl, r3
 8002190:	3301      	adds	r3, #1
 8002192:	2404      	movs	r4, #4
 8002194:	9303      	str	r3, [sp, #12]
 8002196:	e74c      	b.n	8002032 <__aeabi_ddiv+0x4e>
 8002198:	2301      	movs	r3, #1
 800219a:	431c      	orrs	r4, r3
 800219c:	2300      	movs	r3, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	469b      	mov	fp, r3
 80021a2:	e764      	b.n	800206e <__aeabi_ddiv+0x8a>
 80021a4:	2303      	movs	r3, #3
 80021a6:	0032      	movs	r2, r6
 80021a8:	2103      	movs	r1, #3
 80021aa:	431c      	orrs	r4, r3
 80021ac:	e75f      	b.n	800206e <__aeabi_ddiv+0x8a>
 80021ae:	469a      	mov	sl, r3
 80021b0:	2303      	movs	r3, #3
 80021b2:	46d9      	mov	r9, fp
 80021b4:	240c      	movs	r4, #12
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	e73b      	b.n	8002032 <__aeabi_ddiv+0x4e>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2480      	movs	r4, #128	@ 0x80
 80021be:	4698      	mov	r8, r3
 80021c0:	2600      	movs	r6, #0
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	e779      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021c8:	2480      	movs	r4, #128	@ 0x80
 80021ca:	465b      	mov	r3, fp
 80021cc:	0324      	lsls	r4, r4, #12
 80021ce:	431c      	orrs	r4, r3
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	002e      	movs	r6, r5
 80021d4:	4690      	mov	r8, r2
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021d8:	0b24      	lsrs	r4, r4, #12
 80021da:	e76f      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021dc:	2480      	movs	r4, #128	@ 0x80
 80021de:	464b      	mov	r3, r9
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	4223      	tst	r3, r4
 80021e4:	d002      	beq.n	80021ec <__aeabi_ddiv+0x208>
 80021e6:	465b      	mov	r3, fp
 80021e8:	4223      	tst	r3, r4
 80021ea:	d0f0      	beq.n	80021ce <__aeabi_ddiv+0x1ea>
 80021ec:	2480      	movs	r4, #128	@ 0x80
 80021ee:	464b      	mov	r3, r9
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	431c      	orrs	r4, r3
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	9e02      	ldr	r6, [sp, #8]
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <__aeabi_ddiv+0x21c>)
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	e75e      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	fffffc01 	.word	0xfffffc01
 8002208:	0801c670 	.word	0x0801c670
 800220c:	fffff801 	.word	0xfffff801
 8002210:	000003f3 	.word	0x000003f3
 8002214:	fffffc0d 	.word	0xfffffc0d
 8002218:	45cb      	cmp	fp, r9
 800221a:	d200      	bcs.n	800221e <__aeabi_ddiv+0x23a>
 800221c:	e0f8      	b.n	8002410 <__aeabi_ddiv+0x42c>
 800221e:	d100      	bne.n	8002222 <__aeabi_ddiv+0x23e>
 8002220:	e0f3      	b.n	800240a <__aeabi_ddiv+0x426>
 8002222:	2301      	movs	r3, #1
 8002224:	425b      	negs	r3, r3
 8002226:	469c      	mov	ip, r3
 8002228:	4644      	mov	r4, r8
 800222a:	4648      	mov	r0, r9
 800222c:	2500      	movs	r5, #0
 800222e:	44e2      	add	sl, ip
 8002230:	465b      	mov	r3, fp
 8002232:	0e17      	lsrs	r7, r2, #24
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	431f      	orrs	r7, r3
 8002238:	0c19      	lsrs	r1, r3, #16
 800223a:	043b      	lsls	r3, r7, #16
 800223c:	0212      	lsls	r2, r2, #8
 800223e:	9700      	str	r7, [sp, #0]
 8002240:	0c1f      	lsrs	r7, r3, #16
 8002242:	4691      	mov	r9, r2
 8002244:	9102      	str	r1, [sp, #8]
 8002246:	9703      	str	r7, [sp, #12]
 8002248:	f7fe f814 	bl	8000274 <__aeabi_uidivmod>
 800224c:	0002      	movs	r2, r0
 800224e:	437a      	muls	r2, r7
 8002250:	040b      	lsls	r3, r1, #16
 8002252:	0c21      	lsrs	r1, r4, #16
 8002254:	4680      	mov	r8, r0
 8002256:	4319      	orrs	r1, r3
 8002258:	428a      	cmp	r2, r1
 800225a:	d909      	bls.n	8002270 <__aeabi_ddiv+0x28c>
 800225c:	9f00      	ldr	r7, [sp, #0]
 800225e:	2301      	movs	r3, #1
 8002260:	46bc      	mov	ip, r7
 8002262:	425b      	negs	r3, r3
 8002264:	4461      	add	r1, ip
 8002266:	469c      	mov	ip, r3
 8002268:	44e0      	add	r8, ip
 800226a:	428f      	cmp	r7, r1
 800226c:	d800      	bhi.n	8002270 <__aeabi_ddiv+0x28c>
 800226e:	e15c      	b.n	800252a <__aeabi_ddiv+0x546>
 8002270:	1a88      	subs	r0, r1, r2
 8002272:	9902      	ldr	r1, [sp, #8]
 8002274:	f7fd fffe 	bl	8000274 <__aeabi_uidivmod>
 8002278:	9a03      	ldr	r2, [sp, #12]
 800227a:	0424      	lsls	r4, r4, #16
 800227c:	4342      	muls	r2, r0
 800227e:	0409      	lsls	r1, r1, #16
 8002280:	0c24      	lsrs	r4, r4, #16
 8002282:	0003      	movs	r3, r0
 8002284:	430c      	orrs	r4, r1
 8002286:	42a2      	cmp	r2, r4
 8002288:	d906      	bls.n	8002298 <__aeabi_ddiv+0x2b4>
 800228a:	9900      	ldr	r1, [sp, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	468c      	mov	ip, r1
 8002290:	4464      	add	r4, ip
 8002292:	42a1      	cmp	r1, r4
 8002294:	d800      	bhi.n	8002298 <__aeabi_ddiv+0x2b4>
 8002296:	e142      	b.n	800251e <__aeabi_ddiv+0x53a>
 8002298:	1aa0      	subs	r0, r4, r2
 800229a:	4642      	mov	r2, r8
 800229c:	0412      	lsls	r2, r2, #16
 800229e:	431a      	orrs	r2, r3
 80022a0:	4693      	mov	fp, r2
 80022a2:	464b      	mov	r3, r9
 80022a4:	4659      	mov	r1, fp
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	001f      	movs	r7, r3
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	040b      	lsls	r3, r1, #16
 80022ae:	4649      	mov	r1, r9
 80022b0:	0409      	lsls	r1, r1, #16
 80022b2:	0c09      	lsrs	r1, r1, #16
 80022b4:	000c      	movs	r4, r1
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	435c      	muls	r4, r3
 80022ba:	0c12      	lsrs	r2, r2, #16
 80022bc:	437b      	muls	r3, r7
 80022be:	4688      	mov	r8, r1
 80022c0:	4351      	muls	r1, r2
 80022c2:	437a      	muls	r2, r7
 80022c4:	0c27      	lsrs	r7, r4, #16
 80022c6:	46bc      	mov	ip, r7
 80022c8:	185b      	adds	r3, r3, r1
 80022ca:	4463      	add	r3, ip
 80022cc:	4299      	cmp	r1, r3
 80022ce:	d903      	bls.n	80022d8 <__aeabi_ddiv+0x2f4>
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	468c      	mov	ip, r1
 80022d6:	4462      	add	r2, ip
 80022d8:	0c19      	lsrs	r1, r3, #16
 80022da:	0424      	lsls	r4, r4, #16
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	0c24      	lsrs	r4, r4, #16
 80022e0:	188a      	adds	r2, r1, r2
 80022e2:	191c      	adds	r4, r3, r4
 80022e4:	4290      	cmp	r0, r2
 80022e6:	d302      	bcc.n	80022ee <__aeabi_ddiv+0x30a>
 80022e8:	d116      	bne.n	8002318 <__aeabi_ddiv+0x334>
 80022ea:	42a5      	cmp	r5, r4
 80022ec:	d214      	bcs.n	8002318 <__aeabi_ddiv+0x334>
 80022ee:	465b      	mov	r3, fp
 80022f0:	9f00      	ldr	r7, [sp, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	444d      	add	r5, r9
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	454d      	cmp	r5, r9
 80022fa:	419b      	sbcs	r3, r3
 80022fc:	46bc      	mov	ip, r7
 80022fe:	425b      	negs	r3, r3
 8002300:	4463      	add	r3, ip
 8002302:	18c0      	adds	r0, r0, r3
 8002304:	4287      	cmp	r7, r0
 8002306:	d300      	bcc.n	800230a <__aeabi_ddiv+0x326>
 8002308:	e102      	b.n	8002510 <__aeabi_ddiv+0x52c>
 800230a:	4282      	cmp	r2, r0
 800230c:	d900      	bls.n	8002310 <__aeabi_ddiv+0x32c>
 800230e:	e129      	b.n	8002564 <__aeabi_ddiv+0x580>
 8002310:	d100      	bne.n	8002314 <__aeabi_ddiv+0x330>
 8002312:	e124      	b.n	800255e <__aeabi_ddiv+0x57a>
 8002314:	9b05      	ldr	r3, [sp, #20]
 8002316:	469b      	mov	fp, r3
 8002318:	1b2c      	subs	r4, r5, r4
 800231a:	42a5      	cmp	r5, r4
 800231c:	41ad      	sbcs	r5, r5
 800231e:	9b00      	ldr	r3, [sp, #0]
 8002320:	1a80      	subs	r0, r0, r2
 8002322:	426d      	negs	r5, r5
 8002324:	1b40      	subs	r0, r0, r5
 8002326:	4283      	cmp	r3, r0
 8002328:	d100      	bne.n	800232c <__aeabi_ddiv+0x348>
 800232a:	e10f      	b.n	800254c <__aeabi_ddiv+0x568>
 800232c:	9902      	ldr	r1, [sp, #8]
 800232e:	f7fd ffa1 	bl	8000274 <__aeabi_uidivmod>
 8002332:	9a03      	ldr	r2, [sp, #12]
 8002334:	040b      	lsls	r3, r1, #16
 8002336:	4342      	muls	r2, r0
 8002338:	0c21      	lsrs	r1, r4, #16
 800233a:	0005      	movs	r5, r0
 800233c:	4319      	orrs	r1, r3
 800233e:	428a      	cmp	r2, r1
 8002340:	d900      	bls.n	8002344 <__aeabi_ddiv+0x360>
 8002342:	e0cb      	b.n	80024dc <__aeabi_ddiv+0x4f8>
 8002344:	1a88      	subs	r0, r1, r2
 8002346:	9902      	ldr	r1, [sp, #8]
 8002348:	f7fd ff94 	bl	8000274 <__aeabi_uidivmod>
 800234c:	9a03      	ldr	r2, [sp, #12]
 800234e:	0424      	lsls	r4, r4, #16
 8002350:	4342      	muls	r2, r0
 8002352:	0409      	lsls	r1, r1, #16
 8002354:	0c24      	lsrs	r4, r4, #16
 8002356:	0003      	movs	r3, r0
 8002358:	430c      	orrs	r4, r1
 800235a:	42a2      	cmp	r2, r4
 800235c:	d900      	bls.n	8002360 <__aeabi_ddiv+0x37c>
 800235e:	e0ca      	b.n	80024f6 <__aeabi_ddiv+0x512>
 8002360:	4641      	mov	r1, r8
 8002362:	1aa4      	subs	r4, r4, r2
 8002364:	042a      	lsls	r2, r5, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	9f04      	ldr	r7, [sp, #16]
 800236a:	0413      	lsls	r3, r2, #16
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	4359      	muls	r1, r3
 8002370:	4640      	mov	r0, r8
 8002372:	437b      	muls	r3, r7
 8002374:	469c      	mov	ip, r3
 8002376:	0c15      	lsrs	r5, r2, #16
 8002378:	4368      	muls	r0, r5
 800237a:	0c0b      	lsrs	r3, r1, #16
 800237c:	4484      	add	ip, r0
 800237e:	4463      	add	r3, ip
 8002380:	437d      	muls	r5, r7
 8002382:	4298      	cmp	r0, r3
 8002384:	d903      	bls.n	800238e <__aeabi_ddiv+0x3aa>
 8002386:	2080      	movs	r0, #128	@ 0x80
 8002388:	0240      	lsls	r0, r0, #9
 800238a:	4684      	mov	ip, r0
 800238c:	4465      	add	r5, ip
 800238e:	0c18      	lsrs	r0, r3, #16
 8002390:	0409      	lsls	r1, r1, #16
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c09      	lsrs	r1, r1, #16
 8002396:	1940      	adds	r0, r0, r5
 8002398:	185b      	adds	r3, r3, r1
 800239a:	4284      	cmp	r4, r0
 800239c:	d327      	bcc.n	80023ee <__aeabi_ddiv+0x40a>
 800239e:	d023      	beq.n	80023e8 <__aeabi_ddiv+0x404>
 80023a0:	2301      	movs	r3, #1
 80023a2:	0035      	movs	r5, r6
 80023a4:	431a      	orrs	r2, r3
 80023a6:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <__aeabi_ddiv+0x614>)
 80023a8:	4453      	add	r3, sl
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dd60      	ble.n	8002470 <__aeabi_ddiv+0x48c>
 80023ae:	0751      	lsls	r1, r2, #29
 80023b0:	d000      	beq.n	80023b4 <__aeabi_ddiv+0x3d0>
 80023b2:	e086      	b.n	80024c2 <__aeabi_ddiv+0x4de>
 80023b4:	002e      	movs	r6, r5
 80023b6:	08d1      	lsrs	r1, r2, #3
 80023b8:	465a      	mov	r2, fp
 80023ba:	01d2      	lsls	r2, r2, #7
 80023bc:	d506      	bpl.n	80023cc <__aeabi_ddiv+0x3e8>
 80023be:	465a      	mov	r2, fp
 80023c0:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <__aeabi_ddiv+0x618>)
 80023c2:	401a      	ands	r2, r3
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	4693      	mov	fp, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4453      	add	r3, sl
 80023cc:	4a8c      	ldr	r2, [pc, #560]	@ (8002600 <__aeabi_ddiv+0x61c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	dd00      	ble.n	80023d4 <__aeabi_ddiv+0x3f0>
 80023d2:	e680      	b.n	80020d6 <__aeabi_ddiv+0xf2>
 80023d4:	465a      	mov	r2, fp
 80023d6:	0752      	lsls	r2, r2, #29
 80023d8:	430a      	orrs	r2, r1
 80023da:	4690      	mov	r8, r2
 80023dc:	465a      	mov	r2, fp
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	0254      	lsls	r4, r2, #9
 80023e2:	0b24      	lsrs	r4, r4, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e669      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80023e8:	0035      	movs	r5, r6
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0db      	beq.n	80023a6 <__aeabi_ddiv+0x3c2>
 80023ee:	9d00      	ldr	r5, [sp, #0]
 80023f0:	1e51      	subs	r1, r2, #1
 80023f2:	46ac      	mov	ip, r5
 80023f4:	4464      	add	r4, ip
 80023f6:	42ac      	cmp	r4, r5
 80023f8:	d200      	bcs.n	80023fc <__aeabi_ddiv+0x418>
 80023fa:	e09e      	b.n	800253a <__aeabi_ddiv+0x556>
 80023fc:	4284      	cmp	r4, r0
 80023fe:	d200      	bcs.n	8002402 <__aeabi_ddiv+0x41e>
 8002400:	e0e1      	b.n	80025c6 <__aeabi_ddiv+0x5e2>
 8002402:	d100      	bne.n	8002406 <__aeabi_ddiv+0x422>
 8002404:	e0ee      	b.n	80025e4 <__aeabi_ddiv+0x600>
 8002406:	000a      	movs	r2, r1
 8002408:	e7ca      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 800240a:	4542      	cmp	r2, r8
 800240c:	d900      	bls.n	8002410 <__aeabi_ddiv+0x42c>
 800240e:	e708      	b.n	8002222 <__aeabi_ddiv+0x23e>
 8002410:	464b      	mov	r3, r9
 8002412:	07dc      	lsls	r4, r3, #31
 8002414:	0858      	lsrs	r0, r3, #1
 8002416:	4643      	mov	r3, r8
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	431c      	orrs	r4, r3
 800241c:	4643      	mov	r3, r8
 800241e:	07dd      	lsls	r5, r3, #31
 8002420:	e706      	b.n	8002230 <__aeabi_ddiv+0x24c>
 8002422:	f7fe f88f 	bl	8000544 <__clzsi2>
 8002426:	2315      	movs	r3, #21
 8002428:	469c      	mov	ip, r3
 800242a:	4484      	add	ip, r0
 800242c:	0002      	movs	r2, r0
 800242e:	4663      	mov	r3, ip
 8002430:	3220      	adds	r2, #32
 8002432:	2b1c      	cmp	r3, #28
 8002434:	dc00      	bgt.n	8002438 <__aeabi_ddiv+0x454>
 8002436:	e692      	b.n	800215e <__aeabi_ddiv+0x17a>
 8002438:	0023      	movs	r3, r4
 800243a:	3808      	subs	r0, #8
 800243c:	4083      	lsls	r3, r0
 800243e:	4699      	mov	r9, r3
 8002440:	2300      	movs	r3, #0
 8002442:	4698      	mov	r8, r3
 8002444:	e69a      	b.n	800217c <__aeabi_ddiv+0x198>
 8002446:	f7fe f87d 	bl	8000544 <__clzsi2>
 800244a:	0002      	movs	r2, r0
 800244c:	0003      	movs	r3, r0
 800244e:	3215      	adds	r2, #21
 8002450:	3320      	adds	r3, #32
 8002452:	2a1c      	cmp	r2, #28
 8002454:	dc00      	bgt.n	8002458 <__aeabi_ddiv+0x474>
 8002456:	e65f      	b.n	8002118 <__aeabi_ddiv+0x134>
 8002458:	9900      	ldr	r1, [sp, #0]
 800245a:	3808      	subs	r0, #8
 800245c:	4081      	lsls	r1, r0
 800245e:	2200      	movs	r2, #0
 8002460:	468b      	mov	fp, r1
 8002462:	e666      	b.n	8002132 <__aeabi_ddiv+0x14e>
 8002464:	2200      	movs	r2, #0
 8002466:	002e      	movs	r6, r5
 8002468:	2400      	movs	r4, #0
 800246a:	4690      	mov	r8, r2
 800246c:	4b65      	ldr	r3, [pc, #404]	@ (8002604 <__aeabi_ddiv+0x620>)
 800246e:	e625      	b.n	80020bc <__aeabi_ddiv+0xd8>
 8002470:	002e      	movs	r6, r5
 8002472:	2101      	movs	r1, #1
 8002474:	1ac9      	subs	r1, r1, r3
 8002476:	2938      	cmp	r1, #56	@ 0x38
 8002478:	dd00      	ble.n	800247c <__aeabi_ddiv+0x498>
 800247a:	e61b      	b.n	80020b4 <__aeabi_ddiv+0xd0>
 800247c:	291f      	cmp	r1, #31
 800247e:	dc7e      	bgt.n	800257e <__aeabi_ddiv+0x59a>
 8002480:	4861      	ldr	r0, [pc, #388]	@ (8002608 <__aeabi_ddiv+0x624>)
 8002482:	0014      	movs	r4, r2
 8002484:	4450      	add	r0, sl
 8002486:	465b      	mov	r3, fp
 8002488:	4082      	lsls	r2, r0
 800248a:	4083      	lsls	r3, r0
 800248c:	40cc      	lsrs	r4, r1
 800248e:	1e50      	subs	r0, r2, #1
 8002490:	4182      	sbcs	r2, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	431a      	orrs	r2, r3
 8002496:	465b      	mov	r3, fp
 8002498:	40cb      	lsrs	r3, r1
 800249a:	0751      	lsls	r1, r2, #29
 800249c:	d009      	beq.n	80024b2 <__aeabi_ddiv+0x4ce>
 800249e:	210f      	movs	r1, #15
 80024a0:	4011      	ands	r1, r2
 80024a2:	2904      	cmp	r1, #4
 80024a4:	d005      	beq.n	80024b2 <__aeabi_ddiv+0x4ce>
 80024a6:	1d11      	adds	r1, r2, #4
 80024a8:	4291      	cmp	r1, r2
 80024aa:	4192      	sbcs	r2, r2
 80024ac:	4252      	negs	r2, r2
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	0219      	lsls	r1, r3, #8
 80024b4:	d400      	bmi.n	80024b8 <__aeabi_ddiv+0x4d4>
 80024b6:	e09b      	b.n	80025f0 <__aeabi_ddiv+0x60c>
 80024b8:	2200      	movs	r2, #0
 80024ba:	2301      	movs	r3, #1
 80024bc:	2400      	movs	r4, #0
 80024be:	4690      	mov	r8, r2
 80024c0:	e5fc      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80024c2:	210f      	movs	r1, #15
 80024c4:	4011      	ands	r1, r2
 80024c6:	2904      	cmp	r1, #4
 80024c8:	d100      	bne.n	80024cc <__aeabi_ddiv+0x4e8>
 80024ca:	e773      	b.n	80023b4 <__aeabi_ddiv+0x3d0>
 80024cc:	1d11      	adds	r1, r2, #4
 80024ce:	4291      	cmp	r1, r2
 80024d0:	4192      	sbcs	r2, r2
 80024d2:	4252      	negs	r2, r2
 80024d4:	002e      	movs	r6, r5
 80024d6:	08c9      	lsrs	r1, r1, #3
 80024d8:	4493      	add	fp, r2
 80024da:	e76d      	b.n	80023b8 <__aeabi_ddiv+0x3d4>
 80024dc:	9b00      	ldr	r3, [sp, #0]
 80024de:	3d01      	subs	r5, #1
 80024e0:	469c      	mov	ip, r3
 80024e2:	4461      	add	r1, ip
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d900      	bls.n	80024ea <__aeabi_ddiv+0x506>
 80024e8:	e72c      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024ea:	428a      	cmp	r2, r1
 80024ec:	d800      	bhi.n	80024f0 <__aeabi_ddiv+0x50c>
 80024ee:	e729      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024f0:	1e85      	subs	r5, r0, #2
 80024f2:	4461      	add	r1, ip
 80024f4:	e726      	b.n	8002344 <__aeabi_ddiv+0x360>
 80024f6:	9900      	ldr	r1, [sp, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	468c      	mov	ip, r1
 80024fc:	4464      	add	r4, ip
 80024fe:	42a1      	cmp	r1, r4
 8002500:	d900      	bls.n	8002504 <__aeabi_ddiv+0x520>
 8002502:	e72d      	b.n	8002360 <__aeabi_ddiv+0x37c>
 8002504:	42a2      	cmp	r2, r4
 8002506:	d800      	bhi.n	800250a <__aeabi_ddiv+0x526>
 8002508:	e72a      	b.n	8002360 <__aeabi_ddiv+0x37c>
 800250a:	1e83      	subs	r3, r0, #2
 800250c:	4464      	add	r4, ip
 800250e:	e727      	b.n	8002360 <__aeabi_ddiv+0x37c>
 8002510:	4287      	cmp	r7, r0
 8002512:	d000      	beq.n	8002516 <__aeabi_ddiv+0x532>
 8002514:	e6fe      	b.n	8002314 <__aeabi_ddiv+0x330>
 8002516:	45a9      	cmp	r9, r5
 8002518:	d900      	bls.n	800251c <__aeabi_ddiv+0x538>
 800251a:	e6fb      	b.n	8002314 <__aeabi_ddiv+0x330>
 800251c:	e6f5      	b.n	800230a <__aeabi_ddiv+0x326>
 800251e:	42a2      	cmp	r2, r4
 8002520:	d800      	bhi.n	8002524 <__aeabi_ddiv+0x540>
 8002522:	e6b9      	b.n	8002298 <__aeabi_ddiv+0x2b4>
 8002524:	1e83      	subs	r3, r0, #2
 8002526:	4464      	add	r4, ip
 8002528:	e6b6      	b.n	8002298 <__aeabi_ddiv+0x2b4>
 800252a:	428a      	cmp	r2, r1
 800252c:	d800      	bhi.n	8002530 <__aeabi_ddiv+0x54c>
 800252e:	e69f      	b.n	8002270 <__aeabi_ddiv+0x28c>
 8002530:	46bc      	mov	ip, r7
 8002532:	1e83      	subs	r3, r0, #2
 8002534:	4698      	mov	r8, r3
 8002536:	4461      	add	r1, ip
 8002538:	e69a      	b.n	8002270 <__aeabi_ddiv+0x28c>
 800253a:	000a      	movs	r2, r1
 800253c:	4284      	cmp	r4, r0
 800253e:	d000      	beq.n	8002542 <__aeabi_ddiv+0x55e>
 8002540:	e72e      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 8002542:	454b      	cmp	r3, r9
 8002544:	d000      	beq.n	8002548 <__aeabi_ddiv+0x564>
 8002546:	e72b      	b.n	80023a0 <__aeabi_ddiv+0x3bc>
 8002548:	0035      	movs	r5, r6
 800254a:	e72c      	b.n	80023a6 <__aeabi_ddiv+0x3c2>
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <__aeabi_ddiv+0x614>)
 800254e:	4a2f      	ldr	r2, [pc, #188]	@ (800260c <__aeabi_ddiv+0x628>)
 8002550:	4453      	add	r3, sl
 8002552:	4592      	cmp	sl, r2
 8002554:	db43      	blt.n	80025de <__aeabi_ddiv+0x5fa>
 8002556:	2201      	movs	r2, #1
 8002558:	2100      	movs	r1, #0
 800255a:	4493      	add	fp, r2
 800255c:	e72c      	b.n	80023b8 <__aeabi_ddiv+0x3d4>
 800255e:	42ac      	cmp	r4, r5
 8002560:	d800      	bhi.n	8002564 <__aeabi_ddiv+0x580>
 8002562:	e6d7      	b.n	8002314 <__aeabi_ddiv+0x330>
 8002564:	2302      	movs	r3, #2
 8002566:	425b      	negs	r3, r3
 8002568:	469c      	mov	ip, r3
 800256a:	9900      	ldr	r1, [sp, #0]
 800256c:	444d      	add	r5, r9
 800256e:	454d      	cmp	r5, r9
 8002570:	419b      	sbcs	r3, r3
 8002572:	44e3      	add	fp, ip
 8002574:	468c      	mov	ip, r1
 8002576:	425b      	negs	r3, r3
 8002578:	4463      	add	r3, ip
 800257a:	18c0      	adds	r0, r0, r3
 800257c:	e6cc      	b.n	8002318 <__aeabi_ddiv+0x334>
 800257e:	201f      	movs	r0, #31
 8002580:	4240      	negs	r0, r0
 8002582:	1ac3      	subs	r3, r0, r3
 8002584:	4658      	mov	r0, fp
 8002586:	40d8      	lsrs	r0, r3
 8002588:	2920      	cmp	r1, #32
 800258a:	d004      	beq.n	8002596 <__aeabi_ddiv+0x5b2>
 800258c:	4659      	mov	r1, fp
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <__aeabi_ddiv+0x62c>)
 8002590:	4453      	add	r3, sl
 8002592:	4099      	lsls	r1, r3
 8002594:	430a      	orrs	r2, r1
 8002596:	1e53      	subs	r3, r2, #1
 8002598:	419a      	sbcs	r2, r3
 800259a:	2307      	movs	r3, #7
 800259c:	0019      	movs	r1, r3
 800259e:	4302      	orrs	r2, r0
 80025a0:	2400      	movs	r4, #0
 80025a2:	4011      	ands	r1, r2
 80025a4:	4213      	tst	r3, r2
 80025a6:	d009      	beq.n	80025bc <__aeabi_ddiv+0x5d8>
 80025a8:	3308      	adds	r3, #8
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d01d      	beq.n	80025ec <__aeabi_ddiv+0x608>
 80025b0:	1d13      	adds	r3, r2, #4
 80025b2:	4293      	cmp	r3, r2
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	001a      	movs	r2, r3
 80025b8:	4249      	negs	r1, r1
 80025ba:	0749      	lsls	r1, r1, #29
 80025bc:	08d2      	lsrs	r2, r2, #3
 80025be:	430a      	orrs	r2, r1
 80025c0:	4690      	mov	r8, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	e57a      	b.n	80020bc <__aeabi_ddiv+0xd8>
 80025c6:	4649      	mov	r1, r9
 80025c8:	9f00      	ldr	r7, [sp, #0]
 80025ca:	004d      	lsls	r5, r1, #1
 80025cc:	454d      	cmp	r5, r9
 80025ce:	4189      	sbcs	r1, r1
 80025d0:	46bc      	mov	ip, r7
 80025d2:	4249      	negs	r1, r1
 80025d4:	4461      	add	r1, ip
 80025d6:	46a9      	mov	r9, r5
 80025d8:	3a02      	subs	r2, #2
 80025da:	1864      	adds	r4, r4, r1
 80025dc:	e7ae      	b.n	800253c <__aeabi_ddiv+0x558>
 80025de:	2201      	movs	r2, #1
 80025e0:	4252      	negs	r2, r2
 80025e2:	e746      	b.n	8002472 <__aeabi_ddiv+0x48e>
 80025e4:	4599      	cmp	r9, r3
 80025e6:	d3ee      	bcc.n	80025c6 <__aeabi_ddiv+0x5e2>
 80025e8:	000a      	movs	r2, r1
 80025ea:	e7aa      	b.n	8002542 <__aeabi_ddiv+0x55e>
 80025ec:	2100      	movs	r1, #0
 80025ee:	e7e5      	b.n	80025bc <__aeabi_ddiv+0x5d8>
 80025f0:	0759      	lsls	r1, r3, #29
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	0b1c      	lsrs	r4, r3, #12
 80025f6:	e7e1      	b.n	80025bc <__aeabi_ddiv+0x5d8>
 80025f8:	000003ff 	.word	0x000003ff
 80025fc:	feffffff 	.word	0xfeffffff
 8002600:	000007fe 	.word	0x000007fe
 8002604:	000007ff 	.word	0x000007ff
 8002608:	0000041e 	.word	0x0000041e
 800260c:	fffffc02 	.word	0xfffffc02
 8002610:	0000043e 	.word	0x0000043e

08002614 <__eqdf2>:
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	4657      	mov	r7, sl
 8002618:	46de      	mov	lr, fp
 800261a:	464e      	mov	r6, r9
 800261c:	4645      	mov	r5, r8
 800261e:	b5e0      	push	{r5, r6, r7, lr}
 8002620:	000d      	movs	r5, r1
 8002622:	0004      	movs	r4, r0
 8002624:	0fe8      	lsrs	r0, r5, #31
 8002626:	4683      	mov	fp, r0
 8002628:	0309      	lsls	r1, r1, #12
 800262a:	0fd8      	lsrs	r0, r3, #31
 800262c:	0b09      	lsrs	r1, r1, #12
 800262e:	4682      	mov	sl, r0
 8002630:	4819      	ldr	r0, [pc, #100]	@ (8002698 <__eqdf2+0x84>)
 8002632:	468c      	mov	ip, r1
 8002634:	031f      	lsls	r7, r3, #12
 8002636:	0069      	lsls	r1, r5, #1
 8002638:	005e      	lsls	r6, r3, #1
 800263a:	0d49      	lsrs	r1, r1, #21
 800263c:	0b3f      	lsrs	r7, r7, #12
 800263e:	0d76      	lsrs	r6, r6, #21
 8002640:	4281      	cmp	r1, r0
 8002642:	d018      	beq.n	8002676 <__eqdf2+0x62>
 8002644:	4286      	cmp	r6, r0
 8002646:	d00f      	beq.n	8002668 <__eqdf2+0x54>
 8002648:	2001      	movs	r0, #1
 800264a:	42b1      	cmp	r1, r6
 800264c:	d10d      	bne.n	800266a <__eqdf2+0x56>
 800264e:	45bc      	cmp	ip, r7
 8002650:	d10b      	bne.n	800266a <__eqdf2+0x56>
 8002652:	4294      	cmp	r4, r2
 8002654:	d109      	bne.n	800266a <__eqdf2+0x56>
 8002656:	45d3      	cmp	fp, sl
 8002658:	d01c      	beq.n	8002694 <__eqdf2+0x80>
 800265a:	2900      	cmp	r1, #0
 800265c:	d105      	bne.n	800266a <__eqdf2+0x56>
 800265e:	4660      	mov	r0, ip
 8002660:	4320      	orrs	r0, r4
 8002662:	1e43      	subs	r3, r0, #1
 8002664:	4198      	sbcs	r0, r3
 8002666:	e000      	b.n	800266a <__eqdf2+0x56>
 8002668:	2001      	movs	r0, #1
 800266a:	bcf0      	pop	{r4, r5, r6, r7}
 800266c:	46bb      	mov	fp, r7
 800266e:	46b2      	mov	sl, r6
 8002670:	46a9      	mov	r9, r5
 8002672:	46a0      	mov	r8, r4
 8002674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002676:	2001      	movs	r0, #1
 8002678:	428e      	cmp	r6, r1
 800267a:	d1f6      	bne.n	800266a <__eqdf2+0x56>
 800267c:	4661      	mov	r1, ip
 800267e:	4339      	orrs	r1, r7
 8002680:	000f      	movs	r7, r1
 8002682:	4317      	orrs	r7, r2
 8002684:	4327      	orrs	r7, r4
 8002686:	d1f0      	bne.n	800266a <__eqdf2+0x56>
 8002688:	465b      	mov	r3, fp
 800268a:	4652      	mov	r2, sl
 800268c:	1a98      	subs	r0, r3, r2
 800268e:	1e43      	subs	r3, r0, #1
 8002690:	4198      	sbcs	r0, r3
 8002692:	e7ea      	b.n	800266a <__eqdf2+0x56>
 8002694:	2000      	movs	r0, #0
 8002696:	e7e8      	b.n	800266a <__eqdf2+0x56>
 8002698:	000007ff 	.word	0x000007ff

0800269c <__gedf2>:
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269e:	4657      	mov	r7, sl
 80026a0:	464e      	mov	r6, r9
 80026a2:	4645      	mov	r5, r8
 80026a4:	46de      	mov	lr, fp
 80026a6:	b5e0      	push	{r5, r6, r7, lr}
 80026a8:	000d      	movs	r5, r1
 80026aa:	030e      	lsls	r6, r1, #12
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	0d49      	lsrs	r1, r1, #21
 80026b0:	468a      	mov	sl, r1
 80026b2:	0fdf      	lsrs	r7, r3, #31
 80026b4:	0fe9      	lsrs	r1, r5, #31
 80026b6:	46bc      	mov	ip, r7
 80026b8:	b083      	sub	sp, #12
 80026ba:	4f2f      	ldr	r7, [pc, #188]	@ (8002778 <__gedf2+0xdc>)
 80026bc:	0004      	movs	r4, r0
 80026be:	4680      	mov	r8, r0
 80026c0:	9101      	str	r1, [sp, #4]
 80026c2:	0058      	lsls	r0, r3, #1
 80026c4:	0319      	lsls	r1, r3, #12
 80026c6:	4691      	mov	r9, r2
 80026c8:	0b36      	lsrs	r6, r6, #12
 80026ca:	0b09      	lsrs	r1, r1, #12
 80026cc:	0d40      	lsrs	r0, r0, #21
 80026ce:	45ba      	cmp	sl, r7
 80026d0:	d01d      	beq.n	800270e <__gedf2+0x72>
 80026d2:	42b8      	cmp	r0, r7
 80026d4:	d00d      	beq.n	80026f2 <__gedf2+0x56>
 80026d6:	4657      	mov	r7, sl
 80026d8:	2f00      	cmp	r7, #0
 80026da:	d12a      	bne.n	8002732 <__gedf2+0x96>
 80026dc:	4334      	orrs	r4, r6
 80026de:	2800      	cmp	r0, #0
 80026e0:	d124      	bne.n	800272c <__gedf2+0x90>
 80026e2:	430a      	orrs	r2, r1
 80026e4:	d036      	beq.n	8002754 <__gedf2+0xb8>
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d141      	bne.n	800276e <__gedf2+0xd2>
 80026ea:	4663      	mov	r3, ip
 80026ec:	0058      	lsls	r0, r3, #1
 80026ee:	3801      	subs	r0, #1
 80026f0:	e015      	b.n	800271e <__gedf2+0x82>
 80026f2:	4311      	orrs	r1, r2
 80026f4:	d138      	bne.n	8002768 <__gedf2+0xcc>
 80026f6:	4653      	mov	r3, sl
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <__gedf2+0x64>
 80026fc:	4326      	orrs	r6, r4
 80026fe:	d0f4      	beq.n	80026ea <__gedf2+0x4e>
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	4563      	cmp	r3, ip
 8002704:	d107      	bne.n	8002716 <__gedf2+0x7a>
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	0058      	lsls	r0, r3, #1
 800270a:	3801      	subs	r0, #1
 800270c:	e007      	b.n	800271e <__gedf2+0x82>
 800270e:	4326      	orrs	r6, r4
 8002710:	d12a      	bne.n	8002768 <__gedf2+0xcc>
 8002712:	4550      	cmp	r0, sl
 8002714:	d021      	beq.n	800275a <__gedf2+0xbe>
 8002716:	2001      	movs	r0, #1
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	425f      	negs	r7, r3
 800271c:	4338      	orrs	r0, r7
 800271e:	b003      	add	sp, #12
 8002720:	bcf0      	pop	{r4, r5, r6, r7}
 8002722:	46bb      	mov	fp, r7
 8002724:	46b2      	mov	sl, r6
 8002726:	46a9      	mov	r9, r5
 8002728:	46a0      	mov	r8, r4
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272c:	2c00      	cmp	r4, #0
 800272e:	d0dc      	beq.n	80026ea <__gedf2+0x4e>
 8002730:	e7e6      	b.n	8002700 <__gedf2+0x64>
 8002732:	2800      	cmp	r0, #0
 8002734:	d0ef      	beq.n	8002716 <__gedf2+0x7a>
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	4563      	cmp	r3, ip
 800273a:	d1ec      	bne.n	8002716 <__gedf2+0x7a>
 800273c:	4582      	cmp	sl, r0
 800273e:	dcea      	bgt.n	8002716 <__gedf2+0x7a>
 8002740:	dbe1      	blt.n	8002706 <__gedf2+0x6a>
 8002742:	428e      	cmp	r6, r1
 8002744:	d8e7      	bhi.n	8002716 <__gedf2+0x7a>
 8002746:	d1de      	bne.n	8002706 <__gedf2+0x6a>
 8002748:	45c8      	cmp	r8, r9
 800274a:	d8e4      	bhi.n	8002716 <__gedf2+0x7a>
 800274c:	2000      	movs	r0, #0
 800274e:	45c8      	cmp	r8, r9
 8002750:	d2e5      	bcs.n	800271e <__gedf2+0x82>
 8002752:	e7d8      	b.n	8002706 <__gedf2+0x6a>
 8002754:	2c00      	cmp	r4, #0
 8002756:	d0e2      	beq.n	800271e <__gedf2+0x82>
 8002758:	e7dd      	b.n	8002716 <__gedf2+0x7a>
 800275a:	4311      	orrs	r1, r2
 800275c:	d104      	bne.n	8002768 <__gedf2+0xcc>
 800275e:	9b01      	ldr	r3, [sp, #4]
 8002760:	4563      	cmp	r3, ip
 8002762:	d1d8      	bne.n	8002716 <__gedf2+0x7a>
 8002764:	2000      	movs	r0, #0
 8002766:	e7da      	b.n	800271e <__gedf2+0x82>
 8002768:	2002      	movs	r0, #2
 800276a:	4240      	negs	r0, r0
 800276c:	e7d7      	b.n	800271e <__gedf2+0x82>
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	4563      	cmp	r3, ip
 8002772:	d0e6      	beq.n	8002742 <__gedf2+0xa6>
 8002774:	e7cf      	b.n	8002716 <__gedf2+0x7a>
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	000007ff 	.word	0x000007ff

0800277c <__ledf2>:
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	4657      	mov	r7, sl
 8002780:	464e      	mov	r6, r9
 8002782:	4645      	mov	r5, r8
 8002784:	46de      	mov	lr, fp
 8002786:	b5e0      	push	{r5, r6, r7, lr}
 8002788:	000d      	movs	r5, r1
 800278a:	030e      	lsls	r6, r1, #12
 800278c:	0049      	lsls	r1, r1, #1
 800278e:	0d49      	lsrs	r1, r1, #21
 8002790:	468a      	mov	sl, r1
 8002792:	0fdf      	lsrs	r7, r3, #31
 8002794:	0fe9      	lsrs	r1, r5, #31
 8002796:	46bc      	mov	ip, r7
 8002798:	b083      	sub	sp, #12
 800279a:	4f2e      	ldr	r7, [pc, #184]	@ (8002854 <__ledf2+0xd8>)
 800279c:	0004      	movs	r4, r0
 800279e:	4680      	mov	r8, r0
 80027a0:	9101      	str	r1, [sp, #4]
 80027a2:	0058      	lsls	r0, r3, #1
 80027a4:	0319      	lsls	r1, r3, #12
 80027a6:	4691      	mov	r9, r2
 80027a8:	0b36      	lsrs	r6, r6, #12
 80027aa:	0b09      	lsrs	r1, r1, #12
 80027ac:	0d40      	lsrs	r0, r0, #21
 80027ae:	45ba      	cmp	sl, r7
 80027b0:	d01e      	beq.n	80027f0 <__ledf2+0x74>
 80027b2:	42b8      	cmp	r0, r7
 80027b4:	d00d      	beq.n	80027d2 <__ledf2+0x56>
 80027b6:	4657      	mov	r7, sl
 80027b8:	2f00      	cmp	r7, #0
 80027ba:	d127      	bne.n	800280c <__ledf2+0x90>
 80027bc:	4334      	orrs	r4, r6
 80027be:	2800      	cmp	r0, #0
 80027c0:	d133      	bne.n	800282a <__ledf2+0xae>
 80027c2:	430a      	orrs	r2, r1
 80027c4:	d034      	beq.n	8002830 <__ledf2+0xb4>
 80027c6:	2c00      	cmp	r4, #0
 80027c8:	d140      	bne.n	800284c <__ledf2+0xd0>
 80027ca:	4663      	mov	r3, ip
 80027cc:	0058      	lsls	r0, r3, #1
 80027ce:	3801      	subs	r0, #1
 80027d0:	e015      	b.n	80027fe <__ledf2+0x82>
 80027d2:	4311      	orrs	r1, r2
 80027d4:	d112      	bne.n	80027fc <__ledf2+0x80>
 80027d6:	4653      	mov	r3, sl
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <__ledf2+0x64>
 80027dc:	4326      	orrs	r6, r4
 80027de:	d0f4      	beq.n	80027ca <__ledf2+0x4e>
 80027e0:	9b01      	ldr	r3, [sp, #4]
 80027e2:	4563      	cmp	r3, ip
 80027e4:	d01d      	beq.n	8002822 <__ledf2+0xa6>
 80027e6:	2001      	movs	r0, #1
 80027e8:	9b01      	ldr	r3, [sp, #4]
 80027ea:	425f      	negs	r7, r3
 80027ec:	4338      	orrs	r0, r7
 80027ee:	e006      	b.n	80027fe <__ledf2+0x82>
 80027f0:	4326      	orrs	r6, r4
 80027f2:	d103      	bne.n	80027fc <__ledf2+0x80>
 80027f4:	4550      	cmp	r0, sl
 80027f6:	d1f6      	bne.n	80027e6 <__ledf2+0x6a>
 80027f8:	4311      	orrs	r1, r2
 80027fa:	d01c      	beq.n	8002836 <__ledf2+0xba>
 80027fc:	2002      	movs	r0, #2
 80027fe:	b003      	add	sp, #12
 8002800:	bcf0      	pop	{r4, r5, r6, r7}
 8002802:	46bb      	mov	fp, r7
 8002804:	46b2      	mov	sl, r6
 8002806:	46a9      	mov	r9, r5
 8002808:	46a0      	mov	r8, r4
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	2800      	cmp	r0, #0
 800280e:	d0ea      	beq.n	80027e6 <__ledf2+0x6a>
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	4563      	cmp	r3, ip
 8002814:	d1e7      	bne.n	80027e6 <__ledf2+0x6a>
 8002816:	4582      	cmp	sl, r0
 8002818:	dce5      	bgt.n	80027e6 <__ledf2+0x6a>
 800281a:	db02      	blt.n	8002822 <__ledf2+0xa6>
 800281c:	428e      	cmp	r6, r1
 800281e:	d8e2      	bhi.n	80027e6 <__ledf2+0x6a>
 8002820:	d00e      	beq.n	8002840 <__ledf2+0xc4>
 8002822:	9b01      	ldr	r3, [sp, #4]
 8002824:	0058      	lsls	r0, r3, #1
 8002826:	3801      	subs	r0, #1
 8002828:	e7e9      	b.n	80027fe <__ledf2+0x82>
 800282a:	2c00      	cmp	r4, #0
 800282c:	d0cd      	beq.n	80027ca <__ledf2+0x4e>
 800282e:	e7d7      	b.n	80027e0 <__ledf2+0x64>
 8002830:	2c00      	cmp	r4, #0
 8002832:	d0e4      	beq.n	80027fe <__ledf2+0x82>
 8002834:	e7d7      	b.n	80027e6 <__ledf2+0x6a>
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	2000      	movs	r0, #0
 800283a:	4563      	cmp	r3, ip
 800283c:	d0df      	beq.n	80027fe <__ledf2+0x82>
 800283e:	e7d2      	b.n	80027e6 <__ledf2+0x6a>
 8002840:	45c8      	cmp	r8, r9
 8002842:	d8d0      	bhi.n	80027e6 <__ledf2+0x6a>
 8002844:	2000      	movs	r0, #0
 8002846:	45c8      	cmp	r8, r9
 8002848:	d2d9      	bcs.n	80027fe <__ledf2+0x82>
 800284a:	e7ea      	b.n	8002822 <__ledf2+0xa6>
 800284c:	9b01      	ldr	r3, [sp, #4]
 800284e:	4563      	cmp	r3, ip
 8002850:	d0e4      	beq.n	800281c <__ledf2+0xa0>
 8002852:	e7c8      	b.n	80027e6 <__ledf2+0x6a>
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dmul>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	46de      	mov	lr, fp
 8002860:	4645      	mov	r5, r8
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	001f      	movs	r7, r3
 8002866:	030b      	lsls	r3, r1, #12
 8002868:	0b1b      	lsrs	r3, r3, #12
 800286a:	0016      	movs	r6, r2
 800286c:	469a      	mov	sl, r3
 800286e:	0fca      	lsrs	r2, r1, #31
 8002870:	004b      	lsls	r3, r1, #1
 8002872:	0004      	movs	r4, r0
 8002874:	4691      	mov	r9, r2
 8002876:	b085      	sub	sp, #20
 8002878:	0d5b      	lsrs	r3, r3, #21
 800287a:	d100      	bne.n	800287e <__aeabi_dmul+0x26>
 800287c:	e1cf      	b.n	8002c1e <__aeabi_dmul+0x3c6>
 800287e:	4acd      	ldr	r2, [pc, #820]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d055      	beq.n	8002930 <__aeabi_dmul+0xd8>
 8002884:	4651      	mov	r1, sl
 8002886:	0f42      	lsrs	r2, r0, #29
 8002888:	00c9      	lsls	r1, r1, #3
 800288a:	430a      	orrs	r2, r1
 800288c:	2180      	movs	r1, #128	@ 0x80
 800288e:	0409      	lsls	r1, r1, #16
 8002890:	4311      	orrs	r1, r2
 8002892:	00c2      	lsls	r2, r0, #3
 8002894:	4690      	mov	r8, r2
 8002896:	4ac8      	ldr	r2, [pc, #800]	@ (8002bb8 <__aeabi_dmul+0x360>)
 8002898:	468a      	mov	sl, r1
 800289a:	4693      	mov	fp, r2
 800289c:	449b      	add	fp, r3
 800289e:	2300      	movs	r3, #0
 80028a0:	2500      	movs	r5, #0
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	033c      	lsls	r4, r7, #12
 80028a6:	007b      	lsls	r3, r7, #1
 80028a8:	0ffa      	lsrs	r2, r7, #31
 80028aa:	9601      	str	r6, [sp, #4]
 80028ac:	0b24      	lsrs	r4, r4, #12
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	9200      	str	r2, [sp, #0]
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x5e>
 80028b4:	e188      	b.n	8002bc8 <__aeabi_dmul+0x370>
 80028b6:	4abf      	ldr	r2, [pc, #764]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x66>
 80028bc:	e092      	b.n	80029e4 <__aeabi_dmul+0x18c>
 80028be:	4abe      	ldr	r2, [pc, #760]	@ (8002bb8 <__aeabi_dmul+0x360>)
 80028c0:	4694      	mov	ip, r2
 80028c2:	4463      	add	r3, ip
 80028c4:	449b      	add	fp, r3
 80028c6:	2d0a      	cmp	r5, #10
 80028c8:	dc42      	bgt.n	8002950 <__aeabi_dmul+0xf8>
 80028ca:	00e4      	lsls	r4, r4, #3
 80028cc:	0f73      	lsrs	r3, r6, #29
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2480      	movs	r4, #128	@ 0x80
 80028d2:	4649      	mov	r1, r9
 80028d4:	0424      	lsls	r4, r4, #16
 80028d6:	431c      	orrs	r4, r3
 80028d8:	00f3      	lsls	r3, r6, #3
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	9b00      	ldr	r3, [sp, #0]
 80028de:	2000      	movs	r0, #0
 80028e0:	4059      	eors	r1, r3
 80028e2:	b2cb      	uxtb	r3, r1
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	2d02      	cmp	r5, #2
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x94>
 80028ea:	e094      	b.n	8002a16 <__aeabi_dmul+0x1be>
 80028ec:	2301      	movs	r3, #1
 80028ee:	40ab      	lsls	r3, r5
 80028f0:	001d      	movs	r5, r3
 80028f2:	23a6      	movs	r3, #166	@ 0xa6
 80028f4:	002a      	movs	r2, r5
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	401a      	ands	r2, r3
 80028fa:	421d      	tst	r5, r3
 80028fc:	d000      	beq.n	8002900 <__aeabi_dmul+0xa8>
 80028fe:	e229      	b.n	8002d54 <__aeabi_dmul+0x4fc>
 8002900:	2390      	movs	r3, #144	@ 0x90
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	421d      	tst	r5, r3
 8002906:	d100      	bne.n	800290a <__aeabi_dmul+0xb2>
 8002908:	e24d      	b.n	8002da6 <__aeabi_dmul+0x54e>
 800290a:	2300      	movs	r3, #0
 800290c:	2480      	movs	r4, #128	@ 0x80
 800290e:	4699      	mov	r9, r3
 8002910:	0324      	lsls	r4, r4, #12
 8002912:	4ba8      	ldr	r3, [pc, #672]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 8002914:	0010      	movs	r0, r2
 8002916:	464a      	mov	r2, r9
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	4323      	orrs	r3, r4
 800291c:	07d2      	lsls	r2, r2, #31
 800291e:	4313      	orrs	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	b005      	add	sp, #20
 8002924:	bcf0      	pop	{r4, r5, r6, r7}
 8002926:	46bb      	mov	fp, r7
 8002928:	46b2      	mov	sl, r6
 800292a:	46a9      	mov	r9, r5
 800292c:	46a0      	mov	r8, r4
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002930:	4652      	mov	r2, sl
 8002932:	4302      	orrs	r2, r0
 8002934:	4690      	mov	r8, r2
 8002936:	d000      	beq.n	800293a <__aeabi_dmul+0xe2>
 8002938:	e1ac      	b.n	8002c94 <__aeabi_dmul+0x43c>
 800293a:	469b      	mov	fp, r3
 800293c:	2302      	movs	r3, #2
 800293e:	4692      	mov	sl, r2
 8002940:	2508      	movs	r5, #8
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	e7ae      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002946:	9b00      	ldr	r3, [sp, #0]
 8002948:	46a2      	mov	sl, r4
 800294a:	4699      	mov	r9, r3
 800294c:	9b01      	ldr	r3, [sp, #4]
 800294e:	4698      	mov	r8, r3
 8002950:	9b02      	ldr	r3, [sp, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d100      	bne.n	8002958 <__aeabi_dmul+0x100>
 8002956:	e1ca      	b.n	8002cee <__aeabi_dmul+0x496>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d100      	bne.n	800295e <__aeabi_dmul+0x106>
 800295c:	e192      	b.n	8002c84 <__aeabi_dmul+0x42c>
 800295e:	2b01      	cmp	r3, #1
 8002960:	d110      	bne.n	8002984 <__aeabi_dmul+0x12c>
 8002962:	2300      	movs	r3, #0
 8002964:	2400      	movs	r4, #0
 8002966:	2200      	movs	r2, #0
 8002968:	e7d4      	b.n	8002914 <__aeabi_dmul+0xbc>
 800296a:	2201      	movs	r2, #1
 800296c:	087b      	lsrs	r3, r7, #1
 800296e:	403a      	ands	r2, r7
 8002970:	4313      	orrs	r3, r2
 8002972:	4652      	mov	r2, sl
 8002974:	07d2      	lsls	r2, r2, #31
 8002976:	4313      	orrs	r3, r2
 8002978:	4698      	mov	r8, r3
 800297a:	4653      	mov	r3, sl
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	469a      	mov	sl, r3
 8002980:	9b03      	ldr	r3, [sp, #12]
 8002982:	4699      	mov	r9, r3
 8002984:	465b      	mov	r3, fp
 8002986:	1c58      	adds	r0, r3, #1
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	445b      	add	r3, fp
 800298e:	2b00      	cmp	r3, #0
 8002990:	dc00      	bgt.n	8002994 <__aeabi_dmul+0x13c>
 8002992:	e1b1      	b.n	8002cf8 <__aeabi_dmul+0x4a0>
 8002994:	4642      	mov	r2, r8
 8002996:	0752      	lsls	r2, r2, #29
 8002998:	d00b      	beq.n	80029b2 <__aeabi_dmul+0x15a>
 800299a:	220f      	movs	r2, #15
 800299c:	4641      	mov	r1, r8
 800299e:	400a      	ands	r2, r1
 80029a0:	2a04      	cmp	r2, #4
 80029a2:	d006      	beq.n	80029b2 <__aeabi_dmul+0x15a>
 80029a4:	4642      	mov	r2, r8
 80029a6:	1d11      	adds	r1, r2, #4
 80029a8:	4541      	cmp	r1, r8
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	4688      	mov	r8, r1
 80029ae:	4252      	negs	r2, r2
 80029b0:	4492      	add	sl, r2
 80029b2:	4652      	mov	r2, sl
 80029b4:	01d2      	lsls	r2, r2, #7
 80029b6:	d506      	bpl.n	80029c6 <__aeabi_dmul+0x16e>
 80029b8:	4652      	mov	r2, sl
 80029ba:	4b80      	ldr	r3, [pc, #512]	@ (8002bbc <__aeabi_dmul+0x364>)
 80029bc:	401a      	ands	r2, r3
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	4692      	mov	sl, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	18c3      	adds	r3, r0, r3
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <__aeabi_dmul+0x368>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dmul+0x176>
 80029cc:	e18f      	b.n	8002cee <__aeabi_dmul+0x496>
 80029ce:	4642      	mov	r2, r8
 80029d0:	08d1      	lsrs	r1, r2, #3
 80029d2:	4652      	mov	r2, sl
 80029d4:	0752      	lsls	r2, r2, #29
 80029d6:	430a      	orrs	r2, r1
 80029d8:	4651      	mov	r1, sl
 80029da:	055b      	lsls	r3, r3, #21
 80029dc:	024c      	lsls	r4, r1, #9
 80029de:	0b24      	lsrs	r4, r4, #12
 80029e0:	0d5b      	lsrs	r3, r3, #21
 80029e2:	e797      	b.n	8002914 <__aeabi_dmul+0xbc>
 80029e4:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <__aeabi_dmul+0x35c>)
 80029e6:	4326      	orrs	r6, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	44e3      	add	fp, ip
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dmul+0x19a>
 80029f0:	e16f      	b.n	8002cd2 <__aeabi_dmul+0x47a>
 80029f2:	2303      	movs	r3, #3
 80029f4:	4649      	mov	r1, r9
 80029f6:	431d      	orrs	r5, r3
 80029f8:	9b00      	ldr	r3, [sp, #0]
 80029fa:	4059      	eors	r1, r3
 80029fc:	b2cb      	uxtb	r3, r1
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	2d0a      	cmp	r5, #10
 8002a02:	dd00      	ble.n	8002a06 <__aeabi_dmul+0x1ae>
 8002a04:	e133      	b.n	8002c6e <__aeabi_dmul+0x416>
 8002a06:	2301      	movs	r3, #1
 8002a08:	40ab      	lsls	r3, r5
 8002a0a:	001d      	movs	r5, r3
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2288      	movs	r2, #136	@ 0x88
 8002a12:	422a      	tst	r2, r5
 8002a14:	d197      	bne.n	8002946 <__aeabi_dmul+0xee>
 8002a16:	4642      	mov	r2, r8
 8002a18:	4643      	mov	r3, r8
 8002a1a:	0412      	lsls	r2, r2, #16
 8002a1c:	0c12      	lsrs	r2, r2, #16
 8002a1e:	0016      	movs	r6, r2
 8002a20:	9801      	ldr	r0, [sp, #4]
 8002a22:	0c1d      	lsrs	r5, r3, #16
 8002a24:	0c03      	lsrs	r3, r0, #16
 8002a26:	0400      	lsls	r0, r0, #16
 8002a28:	0c00      	lsrs	r0, r0, #16
 8002a2a:	4346      	muls	r6, r0
 8002a2c:	46b4      	mov	ip, r6
 8002a2e:	001e      	movs	r6, r3
 8002a30:	436e      	muls	r6, r5
 8002a32:	9600      	str	r6, [sp, #0]
 8002a34:	0016      	movs	r6, r2
 8002a36:	0007      	movs	r7, r0
 8002a38:	435e      	muls	r6, r3
 8002a3a:	4661      	mov	r1, ip
 8002a3c:	46b0      	mov	r8, r6
 8002a3e:	436f      	muls	r7, r5
 8002a40:	0c0e      	lsrs	r6, r1, #16
 8002a42:	44b8      	add	r8, r7
 8002a44:	4446      	add	r6, r8
 8002a46:	42b7      	cmp	r7, r6
 8002a48:	d905      	bls.n	8002a56 <__aeabi_dmul+0x1fe>
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	0249      	lsls	r1, r1, #9
 8002a4e:	4688      	mov	r8, r1
 8002a50:	9f00      	ldr	r7, [sp, #0]
 8002a52:	4447      	add	r7, r8
 8002a54:	9700      	str	r7, [sp, #0]
 8002a56:	4661      	mov	r1, ip
 8002a58:	0409      	lsls	r1, r1, #16
 8002a5a:	0c09      	lsrs	r1, r1, #16
 8002a5c:	0c37      	lsrs	r7, r6, #16
 8002a5e:	0436      	lsls	r6, r6, #16
 8002a60:	468c      	mov	ip, r1
 8002a62:	0031      	movs	r1, r6
 8002a64:	4461      	add	r1, ip
 8002a66:	9101      	str	r1, [sp, #4]
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0c26      	lsrs	r6, r4, #16
 8002a6c:	0424      	lsls	r4, r4, #16
 8002a6e:	0c24      	lsrs	r4, r4, #16
 8002a70:	4361      	muls	r1, r4
 8002a72:	468c      	mov	ip, r1
 8002a74:	0021      	movs	r1, r4
 8002a76:	4369      	muls	r1, r5
 8002a78:	4689      	mov	r9, r1
 8002a7a:	4661      	mov	r1, ip
 8002a7c:	0c09      	lsrs	r1, r1, #16
 8002a7e:	4688      	mov	r8, r1
 8002a80:	4372      	muls	r2, r6
 8002a82:	444a      	add	r2, r9
 8002a84:	4442      	add	r2, r8
 8002a86:	4375      	muls	r5, r6
 8002a88:	4591      	cmp	r9, r2
 8002a8a:	d903      	bls.n	8002a94 <__aeabi_dmul+0x23c>
 8002a8c:	2180      	movs	r1, #128	@ 0x80
 8002a8e:	0249      	lsls	r1, r1, #9
 8002a90:	4688      	mov	r8, r1
 8002a92:	4445      	add	r5, r8
 8002a94:	0c11      	lsrs	r1, r2, #16
 8002a96:	4688      	mov	r8, r1
 8002a98:	4661      	mov	r1, ip
 8002a9a:	0409      	lsls	r1, r1, #16
 8002a9c:	0c09      	lsrs	r1, r1, #16
 8002a9e:	468c      	mov	ip, r1
 8002aa0:	0412      	lsls	r2, r2, #16
 8002aa2:	4462      	add	r2, ip
 8002aa4:	18b9      	adds	r1, r7, r2
 8002aa6:	9102      	str	r1, [sp, #8]
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	0c09      	lsrs	r1, r1, #16
 8002aac:	468c      	mov	ip, r1
 8002aae:	4651      	mov	r1, sl
 8002ab0:	040f      	lsls	r7, r1, #16
 8002ab2:	0c3f      	lsrs	r7, r7, #16
 8002ab4:	0039      	movs	r1, r7
 8002ab6:	4341      	muls	r1, r0
 8002ab8:	4445      	add	r5, r8
 8002aba:	4688      	mov	r8, r1
 8002abc:	4661      	mov	r1, ip
 8002abe:	4341      	muls	r1, r0
 8002ac0:	468a      	mov	sl, r1
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	4660      	mov	r0, ip
 8002ac6:	0c09      	lsrs	r1, r1, #16
 8002ac8:	4689      	mov	r9, r1
 8002aca:	4358      	muls	r0, r3
 8002acc:	437b      	muls	r3, r7
 8002ace:	4453      	add	r3, sl
 8002ad0:	444b      	add	r3, r9
 8002ad2:	459a      	cmp	sl, r3
 8002ad4:	d903      	bls.n	8002ade <__aeabi_dmul+0x286>
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	0249      	lsls	r1, r1, #9
 8002ada:	4689      	mov	r9, r1
 8002adc:	4448      	add	r0, r9
 8002ade:	0c19      	lsrs	r1, r3, #16
 8002ae0:	4689      	mov	r9, r1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	0409      	lsls	r1, r1, #16
 8002ae6:	0c09      	lsrs	r1, r1, #16
 8002ae8:	4688      	mov	r8, r1
 8002aea:	0039      	movs	r1, r7
 8002aec:	4361      	muls	r1, r4
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	4443      	add	r3, r8
 8002af2:	4688      	mov	r8, r1
 8002af4:	4661      	mov	r1, ip
 8002af6:	434c      	muls	r4, r1
 8002af8:	4371      	muls	r1, r6
 8002afa:	468c      	mov	ip, r1
 8002afc:	4641      	mov	r1, r8
 8002afe:	4377      	muls	r7, r6
 8002b00:	0c0e      	lsrs	r6, r1, #16
 8002b02:	193f      	adds	r7, r7, r4
 8002b04:	19f6      	adds	r6, r6, r7
 8002b06:	4448      	add	r0, r9
 8002b08:	42b4      	cmp	r4, r6
 8002b0a:	d903      	bls.n	8002b14 <__aeabi_dmul+0x2bc>
 8002b0c:	2180      	movs	r1, #128	@ 0x80
 8002b0e:	0249      	lsls	r1, r1, #9
 8002b10:	4689      	mov	r9, r1
 8002b12:	44cc      	add	ip, r9
 8002b14:	9902      	ldr	r1, [sp, #8]
 8002b16:	9f00      	ldr	r7, [sp, #0]
 8002b18:	4689      	mov	r9, r1
 8002b1a:	0431      	lsls	r1, r6, #16
 8002b1c:	444f      	add	r7, r9
 8002b1e:	4689      	mov	r9, r1
 8002b20:	4641      	mov	r1, r8
 8002b22:	4297      	cmp	r7, r2
 8002b24:	4192      	sbcs	r2, r2
 8002b26:	040c      	lsls	r4, r1, #16
 8002b28:	0c24      	lsrs	r4, r4, #16
 8002b2a:	444c      	add	r4, r9
 8002b2c:	18ff      	adds	r7, r7, r3
 8002b2e:	4252      	negs	r2, r2
 8002b30:	1964      	adds	r4, r4, r5
 8002b32:	18a1      	adds	r1, r4, r2
 8002b34:	429f      	cmp	r7, r3
 8002b36:	419b      	sbcs	r3, r3
 8002b38:	4688      	mov	r8, r1
 8002b3a:	4682      	mov	sl, r0
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	4699      	mov	r9, r3
 8002b40:	4590      	cmp	r8, r2
 8002b42:	4192      	sbcs	r2, r2
 8002b44:	42ac      	cmp	r4, r5
 8002b46:	41a4      	sbcs	r4, r4
 8002b48:	44c2      	add	sl, r8
 8002b4a:	44d1      	add	r9, sl
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	4264      	negs	r4, r4
 8002b50:	4314      	orrs	r4, r2
 8002b52:	4599      	cmp	r9, r3
 8002b54:	419b      	sbcs	r3, r3
 8002b56:	4582      	cmp	sl, r0
 8002b58:	4192      	sbcs	r2, r2
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	4252      	negs	r2, r2
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	464a      	mov	r2, r9
 8002b62:	0c36      	lsrs	r6, r6, #16
 8002b64:	19a4      	adds	r4, r4, r6
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	4463      	add	r3, ip
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	0dd2      	lsrs	r2, r2, #23
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	9901      	ldr	r1, [sp, #4]
 8002b72:	4692      	mov	sl, r2
 8002b74:	027a      	lsls	r2, r7, #9
 8002b76:	430a      	orrs	r2, r1
 8002b78:	1e50      	subs	r0, r2, #1
 8002b7a:	4182      	sbcs	r2, r0
 8002b7c:	0dff      	lsrs	r7, r7, #23
 8002b7e:	4317      	orrs	r7, r2
 8002b80:	464a      	mov	r2, r9
 8002b82:	0252      	lsls	r2, r2, #9
 8002b84:	4317      	orrs	r7, r2
 8002b86:	46b8      	mov	r8, r7
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	d500      	bpl.n	8002b8e <__aeabi_dmul+0x336>
 8002b8c:	e6ed      	b.n	800296a <__aeabi_dmul+0x112>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <__aeabi_dmul+0x36c>)
 8002b90:	9a03      	ldr	r2, [sp, #12]
 8002b92:	445b      	add	r3, fp
 8002b94:	4691      	mov	r9, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	dc00      	bgt.n	8002b9c <__aeabi_dmul+0x344>
 8002b9a:	e0ac      	b.n	8002cf6 <__aeabi_dmul+0x49e>
 8002b9c:	003a      	movs	r2, r7
 8002b9e:	0752      	lsls	r2, r2, #29
 8002ba0:	d100      	bne.n	8002ba4 <__aeabi_dmul+0x34c>
 8002ba2:	e710      	b.n	80029c6 <__aeabi_dmul+0x16e>
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	4658      	mov	r0, fp
 8002ba8:	403a      	ands	r2, r7
 8002baa:	2a04      	cmp	r2, #4
 8002bac:	d000      	beq.n	8002bb0 <__aeabi_dmul+0x358>
 8002bae:	e6f9      	b.n	80029a4 <__aeabi_dmul+0x14c>
 8002bb0:	e709      	b.n	80029c6 <__aeabi_dmul+0x16e>
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	000007ff 	.word	0x000007ff
 8002bb8:	fffffc01 	.word	0xfffffc01
 8002bbc:	feffffff 	.word	0xfeffffff
 8002bc0:	000007fe 	.word	0x000007fe
 8002bc4:	000003ff 	.word	0x000003ff
 8002bc8:	0022      	movs	r2, r4
 8002bca:	4332      	orrs	r2, r6
 8002bcc:	d06f      	beq.n	8002cae <__aeabi_dmul+0x456>
 8002bce:	2c00      	cmp	r4, #0
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dmul+0x37c>
 8002bd2:	e0c2      	b.n	8002d5a <__aeabi_dmul+0x502>
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f7fd fcb5 	bl	8000544 <__clzsi2>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	0003      	movs	r3, r0
 8002bde:	3a0b      	subs	r2, #11
 8002be0:	201d      	movs	r0, #29
 8002be2:	1a82      	subs	r2, r0, r2
 8002be4:	0030      	movs	r0, r6
 8002be6:	0019      	movs	r1, r3
 8002be8:	40d0      	lsrs	r0, r2
 8002bea:	3908      	subs	r1, #8
 8002bec:	408c      	lsls	r4, r1
 8002bee:	0002      	movs	r2, r0
 8002bf0:	4322      	orrs	r2, r4
 8002bf2:	0034      	movs	r4, r6
 8002bf4:	408c      	lsls	r4, r1
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	1acb      	subs	r3, r1, r3
 8002bfa:	4986      	ldr	r1, [pc, #536]	@ (8002e14 <__aeabi_dmul+0x5bc>)
 8002bfc:	468b      	mov	fp, r1
 8002bfe:	449b      	add	fp, r3
 8002c00:	2d0a      	cmp	r5, #10
 8002c02:	dd00      	ble.n	8002c06 <__aeabi_dmul+0x3ae>
 8002c04:	e6a4      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002c06:	4649      	mov	r1, r9
 8002c08:	9b00      	ldr	r3, [sp, #0]
 8002c0a:	9401      	str	r4, [sp, #4]
 8002c0c:	4059      	eors	r1, r3
 8002c0e:	b2cb      	uxtb	r3, r1
 8002c10:	0014      	movs	r4, r2
 8002c12:	2000      	movs	r0, #0
 8002c14:	9303      	str	r3, [sp, #12]
 8002c16:	2d02      	cmp	r5, #2
 8002c18:	dd00      	ble.n	8002c1c <__aeabi_dmul+0x3c4>
 8002c1a:	e667      	b.n	80028ec <__aeabi_dmul+0x94>
 8002c1c:	e6fb      	b.n	8002a16 <__aeabi_dmul+0x1be>
 8002c1e:	4653      	mov	r3, sl
 8002c20:	4303      	orrs	r3, r0
 8002c22:	4698      	mov	r8, r3
 8002c24:	d03c      	beq.n	8002ca0 <__aeabi_dmul+0x448>
 8002c26:	4653      	mov	r3, sl
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dmul+0x3d6>
 8002c2c:	e0a3      	b.n	8002d76 <__aeabi_dmul+0x51e>
 8002c2e:	4650      	mov	r0, sl
 8002c30:	f7fd fc88 	bl	8000544 <__clzsi2>
 8002c34:	230b      	movs	r3, #11
 8002c36:	425b      	negs	r3, r3
 8002c38:	469c      	mov	ip, r3
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	4484      	add	ip, r0
 8002c3e:	0011      	movs	r1, r2
 8002c40:	4650      	mov	r0, sl
 8002c42:	3908      	subs	r1, #8
 8002c44:	4088      	lsls	r0, r1
 8002c46:	231d      	movs	r3, #29
 8002c48:	4680      	mov	r8, r0
 8002c4a:	4660      	mov	r0, ip
 8002c4c:	1a1b      	subs	r3, r3, r0
 8002c4e:	0020      	movs	r0, r4
 8002c50:	40d8      	lsrs	r0, r3
 8002c52:	0003      	movs	r3, r0
 8002c54:	4640      	mov	r0, r8
 8002c56:	4303      	orrs	r3, r0
 8002c58:	469a      	mov	sl, r3
 8002c5a:	0023      	movs	r3, r4
 8002c5c:	408b      	lsls	r3, r1
 8002c5e:	4698      	mov	r8, r3
 8002c60:	4b6c      	ldr	r3, [pc, #432]	@ (8002e14 <__aeabi_dmul+0x5bc>)
 8002c62:	2500      	movs	r5, #0
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	469b      	mov	fp, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	e61a      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002c6e:	2d0f      	cmp	r5, #15
 8002c70:	d000      	beq.n	8002c74 <__aeabi_dmul+0x41c>
 8002c72:	e0c9      	b.n	8002e08 <__aeabi_dmul+0x5b0>
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	4652      	mov	r2, sl
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	421a      	tst	r2, r3
 8002c7c:	d002      	beq.n	8002c84 <__aeabi_dmul+0x42c>
 8002c7e:	421c      	tst	r4, r3
 8002c80:	d100      	bne.n	8002c84 <__aeabi_dmul+0x42c>
 8002c82:	e092      	b.n	8002daa <__aeabi_dmul+0x552>
 8002c84:	2480      	movs	r4, #128	@ 0x80
 8002c86:	4653      	mov	r3, sl
 8002c88:	0324      	lsls	r4, r4, #12
 8002c8a:	431c      	orrs	r4, r3
 8002c8c:	0324      	lsls	r4, r4, #12
 8002c8e:	4642      	mov	r2, r8
 8002c90:	0b24      	lsrs	r4, r4, #12
 8002c92:	e63e      	b.n	8002912 <__aeabi_dmul+0xba>
 8002c94:	469b      	mov	fp, r3
 8002c96:	2303      	movs	r3, #3
 8002c98:	4680      	mov	r8, r0
 8002c9a:	250c      	movs	r5, #12
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	e601      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	469b      	mov	fp, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	2504      	movs	r5, #4
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	e5fa      	b.n	80028a4 <__aeabi_dmul+0x4c>
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430d      	orrs	r5, r1
 8002cb2:	2d0a      	cmp	r5, #10
 8002cb4:	dd00      	ble.n	8002cb8 <__aeabi_dmul+0x460>
 8002cb6:	e64b      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002cb8:	4649      	mov	r1, r9
 8002cba:	9800      	ldr	r0, [sp, #0]
 8002cbc:	4041      	eors	r1, r0
 8002cbe:	b2c9      	uxtb	r1, r1
 8002cc0:	9103      	str	r1, [sp, #12]
 8002cc2:	2d02      	cmp	r5, #2
 8002cc4:	dc00      	bgt.n	8002cc8 <__aeabi_dmul+0x470>
 8002cc6:	e096      	b.n	8002df6 <__aeabi_dmul+0x59e>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2400      	movs	r4, #0
 8002ccc:	2001      	movs	r0, #1
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	e60c      	b.n	80028ec <__aeabi_dmul+0x94>
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	9a00      	ldr	r2, [sp, #0]
 8002cd8:	432b      	orrs	r3, r5
 8002cda:	4051      	eors	r1, r2
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	9203      	str	r2, [sp, #12]
 8002ce0:	2b0a      	cmp	r3, #10
 8002ce2:	dd00      	ble.n	8002ce6 <__aeabi_dmul+0x48e>
 8002ce4:	e634      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	d157      	bne.n	8002d9a <__aeabi_dmul+0x542>
 8002cea:	9b03      	ldr	r3, [sp, #12]
 8002cec:	4699      	mov	r9, r3
 8002cee:	2400      	movs	r4, #0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4b49      	ldr	r3, [pc, #292]	@ (8002e18 <__aeabi_dmul+0x5c0>)
 8002cf4:	e60e      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002cf6:	4658      	mov	r0, fp
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	1ac9      	subs	r1, r1, r3
 8002cfc:	2938      	cmp	r1, #56	@ 0x38
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x4aa>
 8002d00:	e62f      	b.n	8002962 <__aeabi_dmul+0x10a>
 8002d02:	291f      	cmp	r1, #31
 8002d04:	dd56      	ble.n	8002db4 <__aeabi_dmul+0x55c>
 8002d06:	221f      	movs	r2, #31
 8002d08:	4654      	mov	r4, sl
 8002d0a:	4252      	negs	r2, r2
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	40dc      	lsrs	r4, r3
 8002d10:	2920      	cmp	r1, #32
 8002d12:	d007      	beq.n	8002d24 <__aeabi_dmul+0x4cc>
 8002d14:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <__aeabi_dmul+0x5c4>)
 8002d16:	4642      	mov	r2, r8
 8002d18:	469c      	mov	ip, r3
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4460      	add	r0, ip
 8002d1e:	4083      	lsls	r3, r0
 8002d20:	431a      	orrs	r2, r3
 8002d22:	4690      	mov	r8, r2
 8002d24:	4642      	mov	r2, r8
 8002d26:	2107      	movs	r1, #7
 8002d28:	1e53      	subs	r3, r2, #1
 8002d2a:	419a      	sbcs	r2, r3
 8002d2c:	000b      	movs	r3, r1
 8002d2e:	4322      	orrs	r2, r4
 8002d30:	4013      	ands	r3, r2
 8002d32:	2400      	movs	r4, #0
 8002d34:	4211      	tst	r1, r2
 8002d36:	d009      	beq.n	8002d4c <__aeabi_dmul+0x4f4>
 8002d38:	230f      	movs	r3, #15
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d05d      	beq.n	8002dfc <__aeabi_dmul+0x5a4>
 8002d40:	1d11      	adds	r1, r2, #4
 8002d42:	4291      	cmp	r1, r2
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	000a      	movs	r2, r1
 8002d48:	425b      	negs	r3, r3
 8002d4a:	075b      	lsls	r3, r3, #29
 8002d4c:	08d2      	lsrs	r2, r2, #3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	e5df      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	4699      	mov	r9, r3
 8002d58:	e5fa      	b.n	8002950 <__aeabi_dmul+0xf8>
 8002d5a:	9801      	ldr	r0, [sp, #4]
 8002d5c:	f7fd fbf2 	bl	8000544 <__clzsi2>
 8002d60:	0002      	movs	r2, r0
 8002d62:	0003      	movs	r3, r0
 8002d64:	3215      	adds	r2, #21
 8002d66:	3320      	adds	r3, #32
 8002d68:	2a1c      	cmp	r2, #28
 8002d6a:	dc00      	bgt.n	8002d6e <__aeabi_dmul+0x516>
 8002d6c:	e738      	b.n	8002be0 <__aeabi_dmul+0x388>
 8002d6e:	9a01      	ldr	r2, [sp, #4]
 8002d70:	3808      	subs	r0, #8
 8002d72:	4082      	lsls	r2, r0
 8002d74:	e73f      	b.n	8002bf6 <__aeabi_dmul+0x39e>
 8002d76:	f7fd fbe5 	bl	8000544 <__clzsi2>
 8002d7a:	2315      	movs	r3, #21
 8002d7c:	469c      	mov	ip, r3
 8002d7e:	4484      	add	ip, r0
 8002d80:	0002      	movs	r2, r0
 8002d82:	4663      	mov	r3, ip
 8002d84:	3220      	adds	r2, #32
 8002d86:	2b1c      	cmp	r3, #28
 8002d88:	dc00      	bgt.n	8002d8c <__aeabi_dmul+0x534>
 8002d8a:	e758      	b.n	8002c3e <__aeabi_dmul+0x3e6>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4698      	mov	r8, r3
 8002d90:	0023      	movs	r3, r4
 8002d92:	3808      	subs	r0, #8
 8002d94:	4083      	lsls	r3, r0
 8002d96:	469a      	mov	sl, r3
 8002d98:	e762      	b.n	8002c60 <__aeabi_dmul+0x408>
 8002d9a:	001d      	movs	r5, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2400      	movs	r4, #0
 8002da0:	2002      	movs	r0, #2
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	e5a2      	b.n	80028ec <__aeabi_dmul+0x94>
 8002da6:	9002      	str	r0, [sp, #8]
 8002da8:	e632      	b.n	8002a10 <__aeabi_dmul+0x1b8>
 8002daa:	431c      	orrs	r4, r3
 8002dac:	9b00      	ldr	r3, [sp, #0]
 8002dae:	9a01      	ldr	r2, [sp, #4]
 8002db0:	4699      	mov	r9, r3
 8002db2:	e5ae      	b.n	8002912 <__aeabi_dmul+0xba>
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <__aeabi_dmul+0x5c8>)
 8002db6:	4652      	mov	r2, sl
 8002db8:	18c3      	adds	r3, r0, r3
 8002dba:	4640      	mov	r0, r8
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	40c8      	lsrs	r0, r1
 8002dc0:	4302      	orrs	r2, r0
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	4098      	lsls	r0, r3
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	4183      	sbcs	r3, r0
 8002dcc:	4654      	mov	r4, sl
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	40cc      	lsrs	r4, r1
 8002dd2:	0753      	lsls	r3, r2, #29
 8002dd4:	d009      	beq.n	8002dea <__aeabi_dmul+0x592>
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d005      	beq.n	8002dea <__aeabi_dmul+0x592>
 8002dde:	1d13      	adds	r3, r2, #4
 8002de0:	4293      	cmp	r3, r2
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	4252      	negs	r2, r2
 8002de6:	18a4      	adds	r4, r4, r2
 8002de8:	001a      	movs	r2, r3
 8002dea:	0223      	lsls	r3, r4, #8
 8002dec:	d508      	bpl.n	8002e00 <__aeabi_dmul+0x5a8>
 8002dee:	2301      	movs	r3, #1
 8002df0:	2400      	movs	r4, #0
 8002df2:	2200      	movs	r2, #0
 8002df4:	e58e      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002df6:	4689      	mov	r9, r1
 8002df8:	2400      	movs	r4, #0
 8002dfa:	e58b      	b.n	8002914 <__aeabi_dmul+0xbc>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e7a5      	b.n	8002d4c <__aeabi_dmul+0x4f4>
 8002e00:	0763      	lsls	r3, r4, #29
 8002e02:	0264      	lsls	r4, r4, #9
 8002e04:	0b24      	lsrs	r4, r4, #12
 8002e06:	e7a1      	b.n	8002d4c <__aeabi_dmul+0x4f4>
 8002e08:	9b00      	ldr	r3, [sp, #0]
 8002e0a:	46a2      	mov	sl, r4
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	9b01      	ldr	r3, [sp, #4]
 8002e10:	4698      	mov	r8, r3
 8002e12:	e737      	b.n	8002c84 <__aeabi_dmul+0x42c>
 8002e14:	fffffc0d 	.word	0xfffffc0d
 8002e18:	000007ff 	.word	0x000007ff
 8002e1c:	0000043e 	.word	0x0000043e
 8002e20:	0000041e 	.word	0x0000041e

08002e24 <__aeabi_dsub>:
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	4657      	mov	r7, sl
 8002e28:	464e      	mov	r6, r9
 8002e2a:	4645      	mov	r5, r8
 8002e2c:	46de      	mov	lr, fp
 8002e2e:	b5e0      	push	{r5, r6, r7, lr}
 8002e30:	b083      	sub	sp, #12
 8002e32:	9000      	str	r0, [sp, #0]
 8002e34:	9101      	str	r1, [sp, #4]
 8002e36:	030c      	lsls	r4, r1, #12
 8002e38:	004d      	lsls	r5, r1, #1
 8002e3a:	0fce      	lsrs	r6, r1, #31
 8002e3c:	0a61      	lsrs	r1, r4, #9
 8002e3e:	9c00      	ldr	r4, [sp, #0]
 8002e40:	005f      	lsls	r7, r3, #1
 8002e42:	0f64      	lsrs	r4, r4, #29
 8002e44:	430c      	orrs	r4, r1
 8002e46:	9900      	ldr	r1, [sp, #0]
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	00c8      	lsls	r0, r1, #3
 8002e4e:	0319      	lsls	r1, r3, #12
 8002e50:	0d7b      	lsrs	r3, r7, #21
 8002e52:	4699      	mov	r9, r3
 8002e54:	9b01      	ldr	r3, [sp, #4]
 8002e56:	4fcc      	ldr	r7, [pc, #816]	@ (8003188 <__aeabi_dsub+0x364>)
 8002e58:	0fdb      	lsrs	r3, r3, #31
 8002e5a:	469c      	mov	ip, r3
 8002e5c:	0a4b      	lsrs	r3, r1, #9
 8002e5e:	9900      	ldr	r1, [sp, #0]
 8002e60:	4680      	mov	r8, r0
 8002e62:	0f49      	lsrs	r1, r1, #29
 8002e64:	4319      	orrs	r1, r3
 8002e66:	9b00      	ldr	r3, [sp, #0]
 8002e68:	468b      	mov	fp, r1
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	4692      	mov	sl, r2
 8002e6e:	0d6d      	lsrs	r5, r5, #21
 8002e70:	45b9      	cmp	r9, r7
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x52>
 8002e74:	e0bf      	b.n	8002ff6 <__aeabi_dsub+0x1d2>
 8002e76:	2301      	movs	r3, #1
 8002e78:	4661      	mov	r1, ip
 8002e7a:	4059      	eors	r1, r3
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	468c      	mov	ip, r1
 8002e80:	1aeb      	subs	r3, r5, r3
 8002e82:	428e      	cmp	r6, r1
 8002e84:	d075      	beq.n	8002f72 <__aeabi_dsub+0x14e>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dc00      	bgt.n	8002e8c <__aeabi_dsub+0x68>
 8002e8a:	e2a3      	b.n	80033d4 <__aeabi_dsub+0x5b0>
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	2900      	cmp	r1, #0
 8002e90:	d100      	bne.n	8002e94 <__aeabi_dsub+0x70>
 8002e92:	e0ce      	b.n	8003032 <__aeabi_dsub+0x20e>
 8002e94:	42bd      	cmp	r5, r7
 8002e96:	d100      	bne.n	8002e9a <__aeabi_dsub+0x76>
 8002e98:	e200      	b.n	800329c <__aeabi_dsub+0x478>
 8002e9a:	2701      	movs	r7, #1
 8002e9c:	2b38      	cmp	r3, #56	@ 0x38
 8002e9e:	dc19      	bgt.n	8002ed4 <__aeabi_dsub+0xb0>
 8002ea0:	2780      	movs	r7, #128	@ 0x80
 8002ea2:	4659      	mov	r1, fp
 8002ea4:	043f      	lsls	r7, r7, #16
 8002ea6:	4339      	orrs	r1, r7
 8002ea8:	468b      	mov	fp, r1
 8002eaa:	2b1f      	cmp	r3, #31
 8002eac:	dd00      	ble.n	8002eb0 <__aeabi_dsub+0x8c>
 8002eae:	e1fa      	b.n	80032a6 <__aeabi_dsub+0x482>
 8002eb0:	2720      	movs	r7, #32
 8002eb2:	1af9      	subs	r1, r7, r3
 8002eb4:	468c      	mov	ip, r1
 8002eb6:	4659      	mov	r1, fp
 8002eb8:	4667      	mov	r7, ip
 8002eba:	40b9      	lsls	r1, r7
 8002ebc:	000f      	movs	r7, r1
 8002ebe:	0011      	movs	r1, r2
 8002ec0:	40d9      	lsrs	r1, r3
 8002ec2:	430f      	orrs	r7, r1
 8002ec4:	4661      	mov	r1, ip
 8002ec6:	408a      	lsls	r2, r1
 8002ec8:	1e51      	subs	r1, r2, #1
 8002eca:	418a      	sbcs	r2, r1
 8002ecc:	4659      	mov	r1, fp
 8002ece:	40d9      	lsrs	r1, r3
 8002ed0:	4317      	orrs	r7, r2
 8002ed2:	1a64      	subs	r4, r4, r1
 8002ed4:	1bc7      	subs	r7, r0, r7
 8002ed6:	42b8      	cmp	r0, r7
 8002ed8:	4180      	sbcs	r0, r0
 8002eda:	4240      	negs	r0, r0
 8002edc:	1a24      	subs	r4, r4, r0
 8002ede:	0223      	lsls	r3, r4, #8
 8002ee0:	d400      	bmi.n	8002ee4 <__aeabi_dsub+0xc0>
 8002ee2:	e140      	b.n	8003166 <__aeabi_dsub+0x342>
 8002ee4:	0264      	lsls	r4, r4, #9
 8002ee6:	0a64      	lsrs	r4, r4, #9
 8002ee8:	2c00      	cmp	r4, #0
 8002eea:	d100      	bne.n	8002eee <__aeabi_dsub+0xca>
 8002eec:	e154      	b.n	8003198 <__aeabi_dsub+0x374>
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7fd fb28 	bl	8000544 <__clzsi2>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	3b08      	subs	r3, #8
 8002ef8:	2120      	movs	r1, #32
 8002efa:	0038      	movs	r0, r7
 8002efc:	1aca      	subs	r2, r1, r3
 8002efe:	40d0      	lsrs	r0, r2
 8002f00:	409c      	lsls	r4, r3
 8002f02:	0002      	movs	r2, r0
 8002f04:	409f      	lsls	r7, r3
 8002f06:	4322      	orrs	r2, r4
 8002f08:	429d      	cmp	r5, r3
 8002f0a:	dd00      	ble.n	8002f0e <__aeabi_dsub+0xea>
 8002f0c:	e1a6      	b.n	800325c <__aeabi_dsub+0x438>
 8002f0e:	1b58      	subs	r0, r3, r5
 8002f10:	3001      	adds	r0, #1
 8002f12:	1a09      	subs	r1, r1, r0
 8002f14:	003c      	movs	r4, r7
 8002f16:	408f      	lsls	r7, r1
 8002f18:	40c4      	lsrs	r4, r0
 8002f1a:	1e7b      	subs	r3, r7, #1
 8002f1c:	419f      	sbcs	r7, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	408b      	lsls	r3, r1
 8002f22:	4327      	orrs	r7, r4
 8002f24:	431f      	orrs	r7, r3
 8002f26:	40c2      	lsrs	r2, r0
 8002f28:	003b      	movs	r3, r7
 8002f2a:	0014      	movs	r4, r2
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	d100      	bne.n	8002f34 <__aeabi_dsub+0x110>
 8002f32:	e1f7      	b.n	8003324 <__aeabi_dsub+0x500>
 8002f34:	077b      	lsls	r3, r7, #29
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0x116>
 8002f38:	e377      	b.n	800362a <__aeabi_dsub+0x806>
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	0038      	movs	r0, r7
 8002f3e:	403b      	ands	r3, r7
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d004      	beq.n	8002f4e <__aeabi_dsub+0x12a>
 8002f44:	1d38      	adds	r0, r7, #4
 8002f46:	42b8      	cmp	r0, r7
 8002f48:	41bf      	sbcs	r7, r7
 8002f4a:	427f      	negs	r7, r7
 8002f4c:	19e4      	adds	r4, r4, r7
 8002f4e:	0223      	lsls	r3, r4, #8
 8002f50:	d400      	bmi.n	8002f54 <__aeabi_dsub+0x130>
 8002f52:	e368      	b.n	8003626 <__aeabi_dsub+0x802>
 8002f54:	4b8c      	ldr	r3, [pc, #560]	@ (8003188 <__aeabi_dsub+0x364>)
 8002f56:	3501      	adds	r5, #1
 8002f58:	429d      	cmp	r5, r3
 8002f5a:	d100      	bne.n	8002f5e <__aeabi_dsub+0x13a>
 8002f5c:	e0f4      	b.n	8003148 <__aeabi_dsub+0x324>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800318c <__aeabi_dsub+0x368>)
 8002f60:	056d      	lsls	r5, r5, #21
 8002f62:	401c      	ands	r4, r3
 8002f64:	0d6d      	lsrs	r5, r5, #21
 8002f66:	0767      	lsls	r7, r4, #29
 8002f68:	08c0      	lsrs	r0, r0, #3
 8002f6a:	0264      	lsls	r4, r4, #9
 8002f6c:	4307      	orrs	r7, r0
 8002f6e:	0b24      	lsrs	r4, r4, #12
 8002f70:	e0ec      	b.n	800314c <__aeabi_dsub+0x328>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dc00      	bgt.n	8002f78 <__aeabi_dsub+0x154>
 8002f76:	e329      	b.n	80035cc <__aeabi_dsub+0x7a8>
 8002f78:	4649      	mov	r1, r9
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d000      	beq.n	8002f80 <__aeabi_dsub+0x15c>
 8002f7e:	e0d6      	b.n	800312e <__aeabi_dsub+0x30a>
 8002f80:	4659      	mov	r1, fp
 8002f82:	4311      	orrs	r1, r2
 8002f84:	d100      	bne.n	8002f88 <__aeabi_dsub+0x164>
 8002f86:	e12e      	b.n	80031e6 <__aeabi_dsub+0x3c2>
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x16c>
 8002f8e:	e1e6      	b.n	800335e <__aeabi_dsub+0x53a>
 8002f90:	42bb      	cmp	r3, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x172>
 8002f94:	e182      	b.n	800329c <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	000b      	movs	r3, r1
 8002f9a:	2938      	cmp	r1, #56	@ 0x38
 8002f9c:	dc14      	bgt.n	8002fc8 <__aeabi_dsub+0x1a4>
 8002f9e:	2b1f      	cmp	r3, #31
 8002fa0:	dd00      	ble.n	8002fa4 <__aeabi_dsub+0x180>
 8002fa2:	e23c      	b.n	800341e <__aeabi_dsub+0x5fa>
 8002fa4:	2720      	movs	r7, #32
 8002fa6:	1af9      	subs	r1, r7, r3
 8002fa8:	468c      	mov	ip, r1
 8002faa:	4659      	mov	r1, fp
 8002fac:	4667      	mov	r7, ip
 8002fae:	40b9      	lsls	r1, r7
 8002fb0:	000f      	movs	r7, r1
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	40d9      	lsrs	r1, r3
 8002fb6:	430f      	orrs	r7, r1
 8002fb8:	4661      	mov	r1, ip
 8002fba:	408a      	lsls	r2, r1
 8002fbc:	1e51      	subs	r1, r2, #1
 8002fbe:	418a      	sbcs	r2, r1
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	40d9      	lsrs	r1, r3
 8002fc4:	4317      	orrs	r7, r2
 8002fc6:	1864      	adds	r4, r4, r1
 8002fc8:	183f      	adds	r7, r7, r0
 8002fca:	4287      	cmp	r7, r0
 8002fcc:	4180      	sbcs	r0, r0
 8002fce:	4240      	negs	r0, r0
 8002fd0:	1824      	adds	r4, r4, r0
 8002fd2:	0223      	lsls	r3, r4, #8
 8002fd4:	d400      	bmi.n	8002fd8 <__aeabi_dsub+0x1b4>
 8002fd6:	e0c6      	b.n	8003166 <__aeabi_dsub+0x342>
 8002fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003188 <__aeabi_dsub+0x364>)
 8002fda:	3501      	adds	r5, #1
 8002fdc:	429d      	cmp	r5, r3
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x1be>
 8002fe0:	e0b2      	b.n	8003148 <__aeabi_dsub+0x324>
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4b69      	ldr	r3, [pc, #420]	@ (800318c <__aeabi_dsub+0x368>)
 8002fe6:	087a      	lsrs	r2, r7, #1
 8002fe8:	401c      	ands	r4, r3
 8002fea:	4039      	ands	r1, r7
 8002fec:	430a      	orrs	r2, r1
 8002fee:	07e7      	lsls	r7, r4, #31
 8002ff0:	4317      	orrs	r7, r2
 8002ff2:	0864      	lsrs	r4, r4, #1
 8002ff4:	e79e      	b.n	8002f34 <__aeabi_dsub+0x110>
 8002ff6:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <__aeabi_dsub+0x36c>)
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	468a      	mov	sl, r1
 8002ffc:	18eb      	adds	r3, r5, r3
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d028      	beq.n	8003054 <__aeabi_dsub+0x230>
 8003002:	4566      	cmp	r6, ip
 8003004:	d02c      	beq.n	8003060 <__aeabi_dsub+0x23c>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d05b      	beq.n	80030c2 <__aeabi_dsub+0x29e>
 800300a:	2d00      	cmp	r5, #0
 800300c:	d100      	bne.n	8003010 <__aeabi_dsub+0x1ec>
 800300e:	e12c      	b.n	800326a <__aeabi_dsub+0x446>
 8003010:	465b      	mov	r3, fp
 8003012:	4666      	mov	r6, ip
 8003014:	075f      	lsls	r7, r3, #29
 8003016:	08d2      	lsrs	r2, r2, #3
 8003018:	4317      	orrs	r7, r2
 800301a:	08dd      	lsrs	r5, r3, #3
 800301c:	003b      	movs	r3, r7
 800301e:	432b      	orrs	r3, r5
 8003020:	d100      	bne.n	8003024 <__aeabi_dsub+0x200>
 8003022:	e0e2      	b.n	80031ea <__aeabi_dsub+0x3c6>
 8003024:	2480      	movs	r4, #128	@ 0x80
 8003026:	0324      	lsls	r4, r4, #12
 8003028:	432c      	orrs	r4, r5
 800302a:	0324      	lsls	r4, r4, #12
 800302c:	4d56      	ldr	r5, [pc, #344]	@ (8003188 <__aeabi_dsub+0x364>)
 800302e:	0b24      	lsrs	r4, r4, #12
 8003030:	e08c      	b.n	800314c <__aeabi_dsub+0x328>
 8003032:	4659      	mov	r1, fp
 8003034:	4311      	orrs	r1, r2
 8003036:	d100      	bne.n	800303a <__aeabi_dsub+0x216>
 8003038:	e0d5      	b.n	80031e6 <__aeabi_dsub+0x3c2>
 800303a:	1e59      	subs	r1, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d100      	bne.n	8003042 <__aeabi_dsub+0x21e>
 8003040:	e1b9      	b.n	80033b6 <__aeabi_dsub+0x592>
 8003042:	42bb      	cmp	r3, r7
 8003044:	d100      	bne.n	8003048 <__aeabi_dsub+0x224>
 8003046:	e1b1      	b.n	80033ac <__aeabi_dsub+0x588>
 8003048:	2701      	movs	r7, #1
 800304a:	000b      	movs	r3, r1
 800304c:	2938      	cmp	r1, #56	@ 0x38
 800304e:	dd00      	ble.n	8003052 <__aeabi_dsub+0x22e>
 8003050:	e740      	b.n	8002ed4 <__aeabi_dsub+0xb0>
 8003052:	e72a      	b.n	8002eaa <__aeabi_dsub+0x86>
 8003054:	4661      	mov	r1, ip
 8003056:	2701      	movs	r7, #1
 8003058:	4079      	eors	r1, r7
 800305a:	468c      	mov	ip, r1
 800305c:	4566      	cmp	r6, ip
 800305e:	d1d2      	bne.n	8003006 <__aeabi_dsub+0x1e2>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d100      	bne.n	8003066 <__aeabi_dsub+0x242>
 8003064:	e0c5      	b.n	80031f2 <__aeabi_dsub+0x3ce>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d000      	beq.n	800306c <__aeabi_dsub+0x248>
 800306a:	e155      	b.n	8003318 <__aeabi_dsub+0x4f4>
 800306c:	464b      	mov	r3, r9
 800306e:	0025      	movs	r5, r4
 8003070:	4305      	orrs	r5, r0
 8003072:	d100      	bne.n	8003076 <__aeabi_dsub+0x252>
 8003074:	e212      	b.n	800349c <__aeabi_dsub+0x678>
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	468c      	mov	ip, r1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d100      	bne.n	8003080 <__aeabi_dsub+0x25c>
 800307e:	e249      	b.n	8003514 <__aeabi_dsub+0x6f0>
 8003080:	4d41      	ldr	r5, [pc, #260]	@ (8003188 <__aeabi_dsub+0x364>)
 8003082:	42ab      	cmp	r3, r5
 8003084:	d100      	bne.n	8003088 <__aeabi_dsub+0x264>
 8003086:	e28f      	b.n	80035a8 <__aeabi_dsub+0x784>
 8003088:	2701      	movs	r7, #1
 800308a:	2938      	cmp	r1, #56	@ 0x38
 800308c:	dc11      	bgt.n	80030b2 <__aeabi_dsub+0x28e>
 800308e:	4663      	mov	r3, ip
 8003090:	2b1f      	cmp	r3, #31
 8003092:	dd00      	ble.n	8003096 <__aeabi_dsub+0x272>
 8003094:	e25b      	b.n	800354e <__aeabi_dsub+0x72a>
 8003096:	4661      	mov	r1, ip
 8003098:	2320      	movs	r3, #32
 800309a:	0027      	movs	r7, r4
 800309c:	1a5b      	subs	r3, r3, r1
 800309e:	0005      	movs	r5, r0
 80030a0:	4098      	lsls	r0, r3
 80030a2:	409f      	lsls	r7, r3
 80030a4:	40cd      	lsrs	r5, r1
 80030a6:	1e43      	subs	r3, r0, #1
 80030a8:	4198      	sbcs	r0, r3
 80030aa:	40cc      	lsrs	r4, r1
 80030ac:	432f      	orrs	r7, r5
 80030ae:	4307      	orrs	r7, r0
 80030b0:	44a3      	add	fp, r4
 80030b2:	18bf      	adds	r7, r7, r2
 80030b4:	4297      	cmp	r7, r2
 80030b6:	4192      	sbcs	r2, r2
 80030b8:	4252      	negs	r2, r2
 80030ba:	445a      	add	r2, fp
 80030bc:	0014      	movs	r4, r2
 80030be:	464d      	mov	r5, r9
 80030c0:	e787      	b.n	8002fd2 <__aeabi_dsub+0x1ae>
 80030c2:	4f34      	ldr	r7, [pc, #208]	@ (8003194 <__aeabi_dsub+0x370>)
 80030c4:	1c6b      	adds	r3, r5, #1
 80030c6:	423b      	tst	r3, r7
 80030c8:	d000      	beq.n	80030cc <__aeabi_dsub+0x2a8>
 80030ca:	e0b6      	b.n	800323a <__aeabi_dsub+0x416>
 80030cc:	4659      	mov	r1, fp
 80030ce:	0023      	movs	r3, r4
 80030d0:	4311      	orrs	r1, r2
 80030d2:	000f      	movs	r7, r1
 80030d4:	4303      	orrs	r3, r0
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	d000      	beq.n	80030dc <__aeabi_dsub+0x2b8>
 80030da:	e126      	b.n	800332a <__aeabi_dsub+0x506>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x2be>
 80030e0:	e1c0      	b.n	8003464 <__aeabi_dsub+0x640>
 80030e2:	2900      	cmp	r1, #0
 80030e4:	d100      	bne.n	80030e8 <__aeabi_dsub+0x2c4>
 80030e6:	e0a1      	b.n	800322c <__aeabi_dsub+0x408>
 80030e8:	1a83      	subs	r3, r0, r2
 80030ea:	4698      	mov	r8, r3
 80030ec:	465b      	mov	r3, fp
 80030ee:	4540      	cmp	r0, r8
 80030f0:	41ad      	sbcs	r5, r5
 80030f2:	1ae3      	subs	r3, r4, r3
 80030f4:	426d      	negs	r5, r5
 80030f6:	1b5b      	subs	r3, r3, r5
 80030f8:	2580      	movs	r5, #128	@ 0x80
 80030fa:	042d      	lsls	r5, r5, #16
 80030fc:	422b      	tst	r3, r5
 80030fe:	d100      	bne.n	8003102 <__aeabi_dsub+0x2de>
 8003100:	e14b      	b.n	800339a <__aeabi_dsub+0x576>
 8003102:	465b      	mov	r3, fp
 8003104:	1a10      	subs	r0, r2, r0
 8003106:	4282      	cmp	r2, r0
 8003108:	4192      	sbcs	r2, r2
 800310a:	1b1c      	subs	r4, r3, r4
 800310c:	0007      	movs	r7, r0
 800310e:	2601      	movs	r6, #1
 8003110:	4663      	mov	r3, ip
 8003112:	4252      	negs	r2, r2
 8003114:	1aa4      	subs	r4, r4, r2
 8003116:	4327      	orrs	r7, r4
 8003118:	401e      	ands	r6, r3
 800311a:	2f00      	cmp	r7, #0
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x2fc>
 800311e:	e142      	b.n	80033a6 <__aeabi_dsub+0x582>
 8003120:	422c      	tst	r4, r5
 8003122:	d100      	bne.n	8003126 <__aeabi_dsub+0x302>
 8003124:	e26d      	b.n	8003602 <__aeabi_dsub+0x7de>
 8003126:	4b19      	ldr	r3, [pc, #100]	@ (800318c <__aeabi_dsub+0x368>)
 8003128:	2501      	movs	r5, #1
 800312a:	401c      	ands	r4, r3
 800312c:	e71b      	b.n	8002f66 <__aeabi_dsub+0x142>
 800312e:	42bd      	cmp	r5, r7
 8003130:	d100      	bne.n	8003134 <__aeabi_dsub+0x310>
 8003132:	e13b      	b.n	80033ac <__aeabi_dsub+0x588>
 8003134:	2701      	movs	r7, #1
 8003136:	2b38      	cmp	r3, #56	@ 0x38
 8003138:	dd00      	ble.n	800313c <__aeabi_dsub+0x318>
 800313a:	e745      	b.n	8002fc8 <__aeabi_dsub+0x1a4>
 800313c:	2780      	movs	r7, #128	@ 0x80
 800313e:	4659      	mov	r1, fp
 8003140:	043f      	lsls	r7, r7, #16
 8003142:	4339      	orrs	r1, r7
 8003144:	468b      	mov	fp, r1
 8003146:	e72a      	b.n	8002f9e <__aeabi_dsub+0x17a>
 8003148:	2400      	movs	r4, #0
 800314a:	2700      	movs	r7, #0
 800314c:	052d      	lsls	r5, r5, #20
 800314e:	4325      	orrs	r5, r4
 8003150:	07f6      	lsls	r6, r6, #31
 8003152:	4335      	orrs	r5, r6
 8003154:	0038      	movs	r0, r7
 8003156:	0029      	movs	r1, r5
 8003158:	b003      	add	sp, #12
 800315a:	bcf0      	pop	{r4, r5, r6, r7}
 800315c:	46bb      	mov	fp, r7
 800315e:	46b2      	mov	sl, r6
 8003160:	46a9      	mov	r9, r5
 8003162:	46a0      	mov	r8, r4
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003166:	077b      	lsls	r3, r7, #29
 8003168:	d004      	beq.n	8003174 <__aeabi_dsub+0x350>
 800316a:	230f      	movs	r3, #15
 800316c:	403b      	ands	r3, r7
 800316e:	2b04      	cmp	r3, #4
 8003170:	d000      	beq.n	8003174 <__aeabi_dsub+0x350>
 8003172:	e6e7      	b.n	8002f44 <__aeabi_dsub+0x120>
 8003174:	002b      	movs	r3, r5
 8003176:	08f8      	lsrs	r0, r7, #3
 8003178:	4a03      	ldr	r2, [pc, #12]	@ (8003188 <__aeabi_dsub+0x364>)
 800317a:	0767      	lsls	r7, r4, #29
 800317c:	4307      	orrs	r7, r0
 800317e:	08e5      	lsrs	r5, r4, #3
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x362>
 8003184:	e74a      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003186:	e0a5      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003188:	000007ff 	.word	0x000007ff
 800318c:	ff7fffff 	.word	0xff7fffff
 8003190:	fffff801 	.word	0xfffff801
 8003194:	000007fe 	.word	0x000007fe
 8003198:	0038      	movs	r0, r7
 800319a:	f7fd f9d3 	bl	8000544 <__clzsi2>
 800319e:	0003      	movs	r3, r0
 80031a0:	3318      	adds	r3, #24
 80031a2:	2b1f      	cmp	r3, #31
 80031a4:	dc00      	bgt.n	80031a8 <__aeabi_dsub+0x384>
 80031a6:	e6a7      	b.n	8002ef8 <__aeabi_dsub+0xd4>
 80031a8:	003a      	movs	r2, r7
 80031aa:	3808      	subs	r0, #8
 80031ac:	4082      	lsls	r2, r0
 80031ae:	429d      	cmp	r5, r3
 80031b0:	dd00      	ble.n	80031b4 <__aeabi_dsub+0x390>
 80031b2:	e08a      	b.n	80032ca <__aeabi_dsub+0x4a6>
 80031b4:	1b5b      	subs	r3, r3, r5
 80031b6:	1c58      	adds	r0, r3, #1
 80031b8:	281f      	cmp	r0, #31
 80031ba:	dc00      	bgt.n	80031be <__aeabi_dsub+0x39a>
 80031bc:	e1d8      	b.n	8003570 <__aeabi_dsub+0x74c>
 80031be:	0017      	movs	r7, r2
 80031c0:	3b1f      	subs	r3, #31
 80031c2:	40df      	lsrs	r7, r3
 80031c4:	2820      	cmp	r0, #32
 80031c6:	d005      	beq.n	80031d4 <__aeabi_dsub+0x3b0>
 80031c8:	2340      	movs	r3, #64	@ 0x40
 80031ca:	1a1b      	subs	r3, r3, r0
 80031cc:	409a      	lsls	r2, r3
 80031ce:	1e53      	subs	r3, r2, #1
 80031d0:	419a      	sbcs	r2, r3
 80031d2:	4317      	orrs	r7, r2
 80031d4:	2500      	movs	r5, #0
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d100      	bne.n	80031dc <__aeabi_dsub+0x3b8>
 80031da:	e0e5      	b.n	80033a8 <__aeabi_dsub+0x584>
 80031dc:	077b      	lsls	r3, r7, #29
 80031de:	d000      	beq.n	80031e2 <__aeabi_dsub+0x3be>
 80031e0:	e6ab      	b.n	8002f3a <__aeabi_dsub+0x116>
 80031e2:	002c      	movs	r4, r5
 80031e4:	e7c6      	b.n	8003174 <__aeabi_dsub+0x350>
 80031e6:	08c0      	lsrs	r0, r0, #3
 80031e8:	e7c6      	b.n	8003178 <__aeabi_dsub+0x354>
 80031ea:	2700      	movs	r7, #0
 80031ec:	2400      	movs	r4, #0
 80031ee:	4dd1      	ldr	r5, [pc, #836]	@ (8003534 <__aeabi_dsub+0x710>)
 80031f0:	e7ac      	b.n	800314c <__aeabi_dsub+0x328>
 80031f2:	4fd1      	ldr	r7, [pc, #836]	@ (8003538 <__aeabi_dsub+0x714>)
 80031f4:	1c6b      	adds	r3, r5, #1
 80031f6:	423b      	tst	r3, r7
 80031f8:	d171      	bne.n	80032de <__aeabi_dsub+0x4ba>
 80031fa:	0023      	movs	r3, r4
 80031fc:	4303      	orrs	r3, r0
 80031fe:	2d00      	cmp	r5, #0
 8003200:	d000      	beq.n	8003204 <__aeabi_dsub+0x3e0>
 8003202:	e14e      	b.n	80034a2 <__aeabi_dsub+0x67e>
 8003204:	4657      	mov	r7, sl
 8003206:	2b00      	cmp	r3, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x3e8>
 800320a:	e1b5      	b.n	8003578 <__aeabi_dsub+0x754>
 800320c:	2f00      	cmp	r7, #0
 800320e:	d00d      	beq.n	800322c <__aeabi_dsub+0x408>
 8003210:	1883      	adds	r3, r0, r2
 8003212:	4283      	cmp	r3, r0
 8003214:	4180      	sbcs	r0, r0
 8003216:	445c      	add	r4, fp
 8003218:	4240      	negs	r0, r0
 800321a:	1824      	adds	r4, r4, r0
 800321c:	0222      	lsls	r2, r4, #8
 800321e:	d500      	bpl.n	8003222 <__aeabi_dsub+0x3fe>
 8003220:	e1c8      	b.n	80035b4 <__aeabi_dsub+0x790>
 8003222:	001f      	movs	r7, r3
 8003224:	4698      	mov	r8, r3
 8003226:	4327      	orrs	r7, r4
 8003228:	d100      	bne.n	800322c <__aeabi_dsub+0x408>
 800322a:	e0bc      	b.n	80033a6 <__aeabi_dsub+0x582>
 800322c:	4643      	mov	r3, r8
 800322e:	0767      	lsls	r7, r4, #29
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	431f      	orrs	r7, r3
 8003234:	08e5      	lsrs	r5, r4, #3
 8003236:	2300      	movs	r3, #0
 8003238:	e04c      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 800323a:	1a83      	subs	r3, r0, r2
 800323c:	4698      	mov	r8, r3
 800323e:	465b      	mov	r3, fp
 8003240:	4540      	cmp	r0, r8
 8003242:	41bf      	sbcs	r7, r7
 8003244:	1ae3      	subs	r3, r4, r3
 8003246:	427f      	negs	r7, r7
 8003248:	1bdb      	subs	r3, r3, r7
 800324a:	021f      	lsls	r7, r3, #8
 800324c:	d47c      	bmi.n	8003348 <__aeabi_dsub+0x524>
 800324e:	4647      	mov	r7, r8
 8003250:	431f      	orrs	r7, r3
 8003252:	d100      	bne.n	8003256 <__aeabi_dsub+0x432>
 8003254:	e0a6      	b.n	80033a4 <__aeabi_dsub+0x580>
 8003256:	001c      	movs	r4, r3
 8003258:	4647      	mov	r7, r8
 800325a:	e645      	b.n	8002ee8 <__aeabi_dsub+0xc4>
 800325c:	4cb7      	ldr	r4, [pc, #732]	@ (800353c <__aeabi_dsub+0x718>)
 800325e:	1aed      	subs	r5, r5, r3
 8003260:	4014      	ands	r4, r2
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d000      	beq.n	8003268 <__aeabi_dsub+0x444>
 8003266:	e780      	b.n	800316a <__aeabi_dsub+0x346>
 8003268:	e784      	b.n	8003174 <__aeabi_dsub+0x350>
 800326a:	464b      	mov	r3, r9
 800326c:	0025      	movs	r5, r4
 800326e:	4305      	orrs	r5, r0
 8003270:	d066      	beq.n	8003340 <__aeabi_dsub+0x51c>
 8003272:	1e5f      	subs	r7, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d100      	bne.n	800327a <__aeabi_dsub+0x456>
 8003278:	e0fc      	b.n	8003474 <__aeabi_dsub+0x650>
 800327a:	4dae      	ldr	r5, [pc, #696]	@ (8003534 <__aeabi_dsub+0x710>)
 800327c:	42ab      	cmp	r3, r5
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x45e>
 8003280:	e15e      	b.n	8003540 <__aeabi_dsub+0x71c>
 8003282:	4666      	mov	r6, ip
 8003284:	2f38      	cmp	r7, #56	@ 0x38
 8003286:	dc00      	bgt.n	800328a <__aeabi_dsub+0x466>
 8003288:	e0b4      	b.n	80033f4 <__aeabi_dsub+0x5d0>
 800328a:	2001      	movs	r0, #1
 800328c:	1a17      	subs	r7, r2, r0
 800328e:	42ba      	cmp	r2, r7
 8003290:	4192      	sbcs	r2, r2
 8003292:	465b      	mov	r3, fp
 8003294:	4252      	negs	r2, r2
 8003296:	464d      	mov	r5, r9
 8003298:	1a9c      	subs	r4, r3, r2
 800329a:	e620      	b.n	8002ede <__aeabi_dsub+0xba>
 800329c:	0767      	lsls	r7, r4, #29
 800329e:	08c0      	lsrs	r0, r0, #3
 80032a0:	4307      	orrs	r7, r0
 80032a2:	08e5      	lsrs	r5, r4, #3
 80032a4:	e6ba      	b.n	800301c <__aeabi_dsub+0x1f8>
 80032a6:	001f      	movs	r7, r3
 80032a8:	4659      	mov	r1, fp
 80032aa:	3f20      	subs	r7, #32
 80032ac:	40f9      	lsrs	r1, r7
 80032ae:	000f      	movs	r7, r1
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d005      	beq.n	80032c0 <__aeabi_dsub+0x49c>
 80032b4:	2140      	movs	r1, #64	@ 0x40
 80032b6:	1acb      	subs	r3, r1, r3
 80032b8:	4659      	mov	r1, fp
 80032ba:	4099      	lsls	r1, r3
 80032bc:	430a      	orrs	r2, r1
 80032be:	4692      	mov	sl, r2
 80032c0:	4653      	mov	r3, sl
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	4193      	sbcs	r3, r2
 80032c6:	431f      	orrs	r7, r3
 80032c8:	e604      	b.n	8002ed4 <__aeabi_dsub+0xb0>
 80032ca:	1aeb      	subs	r3, r5, r3
 80032cc:	4d9b      	ldr	r5, [pc, #620]	@ (800353c <__aeabi_dsub+0x718>)
 80032ce:	4015      	ands	r5, r2
 80032d0:	076f      	lsls	r7, r5, #29
 80032d2:	08ed      	lsrs	r5, r5, #3
 80032d4:	032c      	lsls	r4, r5, #12
 80032d6:	055d      	lsls	r5, r3, #21
 80032d8:	0b24      	lsrs	r4, r4, #12
 80032da:	0d6d      	lsrs	r5, r5, #21
 80032dc:	e736      	b.n	800314c <__aeabi_dsub+0x328>
 80032de:	4d95      	ldr	r5, [pc, #596]	@ (8003534 <__aeabi_dsub+0x710>)
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x4c2>
 80032e4:	e0d6      	b.n	8003494 <__aeabi_dsub+0x670>
 80032e6:	1882      	adds	r2, r0, r2
 80032e8:	0021      	movs	r1, r4
 80032ea:	4282      	cmp	r2, r0
 80032ec:	4180      	sbcs	r0, r0
 80032ee:	4459      	add	r1, fp
 80032f0:	4240      	negs	r0, r0
 80032f2:	1808      	adds	r0, r1, r0
 80032f4:	07c7      	lsls	r7, r0, #31
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	4317      	orrs	r7, r2
 80032fa:	0844      	lsrs	r4, r0, #1
 80032fc:	0752      	lsls	r2, r2, #29
 80032fe:	d400      	bmi.n	8003302 <__aeabi_dsub+0x4de>
 8003300:	e185      	b.n	800360e <__aeabi_dsub+0x7ea>
 8003302:	220f      	movs	r2, #15
 8003304:	001d      	movs	r5, r3
 8003306:	403a      	ands	r2, r7
 8003308:	2a04      	cmp	r2, #4
 800330a:	d000      	beq.n	800330e <__aeabi_dsub+0x4ea>
 800330c:	e61a      	b.n	8002f44 <__aeabi_dsub+0x120>
 800330e:	08ff      	lsrs	r7, r7, #3
 8003310:	0764      	lsls	r4, r4, #29
 8003312:	4327      	orrs	r7, r4
 8003314:	0905      	lsrs	r5, r0, #4
 8003316:	e7dd      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003318:	465b      	mov	r3, fp
 800331a:	08d2      	lsrs	r2, r2, #3
 800331c:	075f      	lsls	r7, r3, #29
 800331e:	4317      	orrs	r7, r2
 8003320:	08dd      	lsrs	r5, r3, #3
 8003322:	e67b      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003324:	2700      	movs	r7, #0
 8003326:	2400      	movs	r4, #0
 8003328:	e710      	b.n	800314c <__aeabi_dsub+0x328>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d000      	beq.n	8003330 <__aeabi_dsub+0x50c>
 800332e:	e0d6      	b.n	80034de <__aeabi_dsub+0x6ba>
 8003330:	2900      	cmp	r1, #0
 8003332:	d000      	beq.n	8003336 <__aeabi_dsub+0x512>
 8003334:	e12f      	b.n	8003596 <__aeabi_dsub+0x772>
 8003336:	2480      	movs	r4, #128	@ 0x80
 8003338:	2600      	movs	r6, #0
 800333a:	4d7e      	ldr	r5, [pc, #504]	@ (8003534 <__aeabi_dsub+0x710>)
 800333c:	0324      	lsls	r4, r4, #12
 800333e:	e705      	b.n	800314c <__aeabi_dsub+0x328>
 8003340:	4666      	mov	r6, ip
 8003342:	465c      	mov	r4, fp
 8003344:	08d0      	lsrs	r0, r2, #3
 8003346:	e717      	b.n	8003178 <__aeabi_dsub+0x354>
 8003348:	465b      	mov	r3, fp
 800334a:	1a17      	subs	r7, r2, r0
 800334c:	42ba      	cmp	r2, r7
 800334e:	4192      	sbcs	r2, r2
 8003350:	1b1c      	subs	r4, r3, r4
 8003352:	2601      	movs	r6, #1
 8003354:	4663      	mov	r3, ip
 8003356:	4252      	negs	r2, r2
 8003358:	1aa4      	subs	r4, r4, r2
 800335a:	401e      	ands	r6, r3
 800335c:	e5c4      	b.n	8002ee8 <__aeabi_dsub+0xc4>
 800335e:	1883      	adds	r3, r0, r2
 8003360:	4283      	cmp	r3, r0
 8003362:	4180      	sbcs	r0, r0
 8003364:	445c      	add	r4, fp
 8003366:	4240      	negs	r0, r0
 8003368:	1825      	adds	r5, r4, r0
 800336a:	022a      	lsls	r2, r5, #8
 800336c:	d400      	bmi.n	8003370 <__aeabi_dsub+0x54c>
 800336e:	e0da      	b.n	8003526 <__aeabi_dsub+0x702>
 8003370:	4a72      	ldr	r2, [pc, #456]	@ (800353c <__aeabi_dsub+0x718>)
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	4015      	ands	r5, r2
 8003376:	07ea      	lsls	r2, r5, #31
 8003378:	431a      	orrs	r2, r3
 800337a:	0869      	lsrs	r1, r5, #1
 800337c:	075b      	lsls	r3, r3, #29
 800337e:	d400      	bmi.n	8003382 <__aeabi_dsub+0x55e>
 8003380:	e14a      	b.n	8003618 <__aeabi_dsub+0x7f4>
 8003382:	230f      	movs	r3, #15
 8003384:	4013      	ands	r3, r2
 8003386:	2b04      	cmp	r3, #4
 8003388:	d100      	bne.n	800338c <__aeabi_dsub+0x568>
 800338a:	e0fc      	b.n	8003586 <__aeabi_dsub+0x762>
 800338c:	1d17      	adds	r7, r2, #4
 800338e:	4297      	cmp	r7, r2
 8003390:	41a4      	sbcs	r4, r4
 8003392:	4264      	negs	r4, r4
 8003394:	2502      	movs	r5, #2
 8003396:	1864      	adds	r4, r4, r1
 8003398:	e6ec      	b.n	8003174 <__aeabi_dsub+0x350>
 800339a:	4647      	mov	r7, r8
 800339c:	001c      	movs	r4, r3
 800339e:	431f      	orrs	r7, r3
 80033a0:	d000      	beq.n	80033a4 <__aeabi_dsub+0x580>
 80033a2:	e743      	b.n	800322c <__aeabi_dsub+0x408>
 80033a4:	2600      	movs	r6, #0
 80033a6:	2500      	movs	r5, #0
 80033a8:	2400      	movs	r4, #0
 80033aa:	e6cf      	b.n	800314c <__aeabi_dsub+0x328>
 80033ac:	08c0      	lsrs	r0, r0, #3
 80033ae:	0767      	lsls	r7, r4, #29
 80033b0:	4307      	orrs	r7, r0
 80033b2:	08e5      	lsrs	r5, r4, #3
 80033b4:	e632      	b.n	800301c <__aeabi_dsub+0x1f8>
 80033b6:	1a87      	subs	r7, r0, r2
 80033b8:	465b      	mov	r3, fp
 80033ba:	42b8      	cmp	r0, r7
 80033bc:	4180      	sbcs	r0, r0
 80033be:	1ae4      	subs	r4, r4, r3
 80033c0:	4240      	negs	r0, r0
 80033c2:	1a24      	subs	r4, r4, r0
 80033c4:	0223      	lsls	r3, r4, #8
 80033c6:	d428      	bmi.n	800341a <__aeabi_dsub+0x5f6>
 80033c8:	0763      	lsls	r3, r4, #29
 80033ca:	08ff      	lsrs	r7, r7, #3
 80033cc:	431f      	orrs	r7, r3
 80033ce:	08e5      	lsrs	r5, r4, #3
 80033d0:	2301      	movs	r3, #1
 80033d2:	e77f      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <__aeabi_dsub+0x5b6>
 80033d8:	e673      	b.n	80030c2 <__aeabi_dsub+0x29e>
 80033da:	464b      	mov	r3, r9
 80033dc:	1b5f      	subs	r7, r3, r5
 80033de:	003b      	movs	r3, r7
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	d100      	bne.n	80033e6 <__aeabi_dsub+0x5c2>
 80033e4:	e742      	b.n	800326c <__aeabi_dsub+0x448>
 80033e6:	2f38      	cmp	r7, #56	@ 0x38
 80033e8:	dd00      	ble.n	80033ec <__aeabi_dsub+0x5c8>
 80033ea:	e0ec      	b.n	80035c6 <__aeabi_dsub+0x7a2>
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	000e      	movs	r6, r1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431c      	orrs	r4, r3
 80033f4:	2f1f      	cmp	r7, #31
 80033f6:	dc25      	bgt.n	8003444 <__aeabi_dsub+0x620>
 80033f8:	2520      	movs	r5, #32
 80033fa:	0023      	movs	r3, r4
 80033fc:	1bed      	subs	r5, r5, r7
 80033fe:	0001      	movs	r1, r0
 8003400:	40a8      	lsls	r0, r5
 8003402:	40ab      	lsls	r3, r5
 8003404:	40f9      	lsrs	r1, r7
 8003406:	1e45      	subs	r5, r0, #1
 8003408:	41a8      	sbcs	r0, r5
 800340a:	430b      	orrs	r3, r1
 800340c:	40fc      	lsrs	r4, r7
 800340e:	4318      	orrs	r0, r3
 8003410:	465b      	mov	r3, fp
 8003412:	1b1b      	subs	r3, r3, r4
 8003414:	469b      	mov	fp, r3
 8003416:	e739      	b.n	800328c <__aeabi_dsub+0x468>
 8003418:	4666      	mov	r6, ip
 800341a:	2501      	movs	r5, #1
 800341c:	e562      	b.n	8002ee4 <__aeabi_dsub+0xc0>
 800341e:	001f      	movs	r7, r3
 8003420:	4659      	mov	r1, fp
 8003422:	3f20      	subs	r7, #32
 8003424:	40f9      	lsrs	r1, r7
 8003426:	468c      	mov	ip, r1
 8003428:	2b20      	cmp	r3, #32
 800342a:	d005      	beq.n	8003438 <__aeabi_dsub+0x614>
 800342c:	2740      	movs	r7, #64	@ 0x40
 800342e:	4659      	mov	r1, fp
 8003430:	1afb      	subs	r3, r7, r3
 8003432:	4099      	lsls	r1, r3
 8003434:	430a      	orrs	r2, r1
 8003436:	4692      	mov	sl, r2
 8003438:	4657      	mov	r7, sl
 800343a:	1e7b      	subs	r3, r7, #1
 800343c:	419f      	sbcs	r7, r3
 800343e:	4663      	mov	r3, ip
 8003440:	431f      	orrs	r7, r3
 8003442:	e5c1      	b.n	8002fc8 <__aeabi_dsub+0x1a4>
 8003444:	003b      	movs	r3, r7
 8003446:	0025      	movs	r5, r4
 8003448:	3b20      	subs	r3, #32
 800344a:	40dd      	lsrs	r5, r3
 800344c:	2f20      	cmp	r7, #32
 800344e:	d004      	beq.n	800345a <__aeabi_dsub+0x636>
 8003450:	2340      	movs	r3, #64	@ 0x40
 8003452:	1bdb      	subs	r3, r3, r7
 8003454:	409c      	lsls	r4, r3
 8003456:	4320      	orrs	r0, r4
 8003458:	4680      	mov	r8, r0
 800345a:	4640      	mov	r0, r8
 800345c:	1e43      	subs	r3, r0, #1
 800345e:	4198      	sbcs	r0, r3
 8003460:	4328      	orrs	r0, r5
 8003462:	e713      	b.n	800328c <__aeabi_dsub+0x468>
 8003464:	2900      	cmp	r1, #0
 8003466:	d09d      	beq.n	80033a4 <__aeabi_dsub+0x580>
 8003468:	2601      	movs	r6, #1
 800346a:	4663      	mov	r3, ip
 800346c:	465c      	mov	r4, fp
 800346e:	4690      	mov	r8, r2
 8003470:	401e      	ands	r6, r3
 8003472:	e6db      	b.n	800322c <__aeabi_dsub+0x408>
 8003474:	1a17      	subs	r7, r2, r0
 8003476:	465b      	mov	r3, fp
 8003478:	42ba      	cmp	r2, r7
 800347a:	4192      	sbcs	r2, r2
 800347c:	1b1c      	subs	r4, r3, r4
 800347e:	4252      	negs	r2, r2
 8003480:	1aa4      	subs	r4, r4, r2
 8003482:	0223      	lsls	r3, r4, #8
 8003484:	d4c8      	bmi.n	8003418 <__aeabi_dsub+0x5f4>
 8003486:	0763      	lsls	r3, r4, #29
 8003488:	08ff      	lsrs	r7, r7, #3
 800348a:	431f      	orrs	r7, r3
 800348c:	4666      	mov	r6, ip
 800348e:	2301      	movs	r3, #1
 8003490:	08e5      	lsrs	r5, r4, #3
 8003492:	e71f      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003494:	001d      	movs	r5, r3
 8003496:	2400      	movs	r4, #0
 8003498:	2700      	movs	r7, #0
 800349a:	e657      	b.n	800314c <__aeabi_dsub+0x328>
 800349c:	465c      	mov	r4, fp
 800349e:	08d0      	lsrs	r0, r2, #3
 80034a0:	e66a      	b.n	8003178 <__aeabi_dsub+0x354>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <__aeabi_dsub+0x684>
 80034a6:	e737      	b.n	8003318 <__aeabi_dsub+0x4f4>
 80034a8:	4653      	mov	r3, sl
 80034aa:	08c0      	lsrs	r0, r0, #3
 80034ac:	0767      	lsls	r7, r4, #29
 80034ae:	4307      	orrs	r7, r0
 80034b0:	08e5      	lsrs	r5, r4, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d100      	bne.n	80034b8 <__aeabi_dsub+0x694>
 80034b6:	e5b1      	b.n	800301c <__aeabi_dsub+0x1f8>
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	031b      	lsls	r3, r3, #12
 80034bc:	421d      	tst	r5, r3
 80034be:	d008      	beq.n	80034d2 <__aeabi_dsub+0x6ae>
 80034c0:	4659      	mov	r1, fp
 80034c2:	08c8      	lsrs	r0, r1, #3
 80034c4:	4218      	tst	r0, r3
 80034c6:	d104      	bne.n	80034d2 <__aeabi_dsub+0x6ae>
 80034c8:	08d2      	lsrs	r2, r2, #3
 80034ca:	0749      	lsls	r1, r1, #29
 80034cc:	430a      	orrs	r2, r1
 80034ce:	0017      	movs	r7, r2
 80034d0:	0005      	movs	r5, r0
 80034d2:	0f7b      	lsrs	r3, r7, #29
 80034d4:	00ff      	lsls	r7, r7, #3
 80034d6:	08ff      	lsrs	r7, r7, #3
 80034d8:	075b      	lsls	r3, r3, #29
 80034da:	431f      	orrs	r7, r3
 80034dc:	e59e      	b.n	800301c <__aeabi_dsub+0x1f8>
 80034de:	08c0      	lsrs	r0, r0, #3
 80034e0:	0763      	lsls	r3, r4, #29
 80034e2:	4318      	orrs	r0, r3
 80034e4:	08e5      	lsrs	r5, r4, #3
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d053      	beq.n	8003592 <__aeabi_dsub+0x76e>
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	421d      	tst	r5, r3
 80034f0:	d00a      	beq.n	8003508 <__aeabi_dsub+0x6e4>
 80034f2:	4659      	mov	r1, fp
 80034f4:	08cc      	lsrs	r4, r1, #3
 80034f6:	421c      	tst	r4, r3
 80034f8:	d106      	bne.n	8003508 <__aeabi_dsub+0x6e4>
 80034fa:	2601      	movs	r6, #1
 80034fc:	4663      	mov	r3, ip
 80034fe:	0025      	movs	r5, r4
 8003500:	08d0      	lsrs	r0, r2, #3
 8003502:	0749      	lsls	r1, r1, #29
 8003504:	4308      	orrs	r0, r1
 8003506:	401e      	ands	r6, r3
 8003508:	0f47      	lsrs	r7, r0, #29
 800350a:	00c0      	lsls	r0, r0, #3
 800350c:	08c0      	lsrs	r0, r0, #3
 800350e:	077f      	lsls	r7, r7, #29
 8003510:	4307      	orrs	r7, r0
 8003512:	e583      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003514:	1883      	adds	r3, r0, r2
 8003516:	4293      	cmp	r3, r2
 8003518:	4192      	sbcs	r2, r2
 800351a:	445c      	add	r4, fp
 800351c:	4252      	negs	r2, r2
 800351e:	18a5      	adds	r5, r4, r2
 8003520:	022a      	lsls	r2, r5, #8
 8003522:	d500      	bpl.n	8003526 <__aeabi_dsub+0x702>
 8003524:	e724      	b.n	8003370 <__aeabi_dsub+0x54c>
 8003526:	076f      	lsls	r7, r5, #29
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	431f      	orrs	r7, r3
 800352c:	08ed      	lsrs	r5, r5, #3
 800352e:	2301      	movs	r3, #1
 8003530:	e6d0      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	000007ff 	.word	0x000007ff
 8003538:	000007fe 	.word	0x000007fe
 800353c:	ff7fffff 	.word	0xff7fffff
 8003540:	465b      	mov	r3, fp
 8003542:	08d2      	lsrs	r2, r2, #3
 8003544:	075f      	lsls	r7, r3, #29
 8003546:	4666      	mov	r6, ip
 8003548:	4317      	orrs	r7, r2
 800354a:	08dd      	lsrs	r5, r3, #3
 800354c:	e566      	b.n	800301c <__aeabi_dsub+0x1f8>
 800354e:	0025      	movs	r5, r4
 8003550:	3b20      	subs	r3, #32
 8003552:	40dd      	lsrs	r5, r3
 8003554:	4663      	mov	r3, ip
 8003556:	2b20      	cmp	r3, #32
 8003558:	d005      	beq.n	8003566 <__aeabi_dsub+0x742>
 800355a:	2340      	movs	r3, #64	@ 0x40
 800355c:	4661      	mov	r1, ip
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	409c      	lsls	r4, r3
 8003562:	4320      	orrs	r0, r4
 8003564:	4680      	mov	r8, r0
 8003566:	4647      	mov	r7, r8
 8003568:	1e7b      	subs	r3, r7, #1
 800356a:	419f      	sbcs	r7, r3
 800356c:	432f      	orrs	r7, r5
 800356e:	e5a0      	b.n	80030b2 <__aeabi_dsub+0x28e>
 8003570:	2120      	movs	r1, #32
 8003572:	2700      	movs	r7, #0
 8003574:	1a09      	subs	r1, r1, r0
 8003576:	e4d2      	b.n	8002f1e <__aeabi_dsub+0xfa>
 8003578:	2f00      	cmp	r7, #0
 800357a:	d100      	bne.n	800357e <__aeabi_dsub+0x75a>
 800357c:	e713      	b.n	80033a6 <__aeabi_dsub+0x582>
 800357e:	465c      	mov	r4, fp
 8003580:	0017      	movs	r7, r2
 8003582:	2500      	movs	r5, #0
 8003584:	e5f6      	b.n	8003174 <__aeabi_dsub+0x350>
 8003586:	08d7      	lsrs	r7, r2, #3
 8003588:	0749      	lsls	r1, r1, #29
 800358a:	2302      	movs	r3, #2
 800358c:	430f      	orrs	r7, r1
 800358e:	092d      	lsrs	r5, r5, #4
 8003590:	e6a0      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003592:	0007      	movs	r7, r0
 8003594:	e542      	b.n	800301c <__aeabi_dsub+0x1f8>
 8003596:	465b      	mov	r3, fp
 8003598:	2601      	movs	r6, #1
 800359a:	075f      	lsls	r7, r3, #29
 800359c:	08dd      	lsrs	r5, r3, #3
 800359e:	4663      	mov	r3, ip
 80035a0:	08d2      	lsrs	r2, r2, #3
 80035a2:	4317      	orrs	r7, r2
 80035a4:	401e      	ands	r6, r3
 80035a6:	e539      	b.n	800301c <__aeabi_dsub+0x1f8>
 80035a8:	465b      	mov	r3, fp
 80035aa:	08d2      	lsrs	r2, r2, #3
 80035ac:	075f      	lsls	r7, r3, #29
 80035ae:	4317      	orrs	r7, r2
 80035b0:	08dd      	lsrs	r5, r3, #3
 80035b2:	e533      	b.n	800301c <__aeabi_dsub+0x1f8>
 80035b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <__aeabi_dsub+0x80c>)
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	4022      	ands	r2, r4
 80035ba:	0757      	lsls	r7, r2, #29
 80035bc:	0252      	lsls	r2, r2, #9
 80035be:	2501      	movs	r5, #1
 80035c0:	431f      	orrs	r7, r3
 80035c2:	0b14      	lsrs	r4, r2, #12
 80035c4:	e5c2      	b.n	800314c <__aeabi_dsub+0x328>
 80035c6:	000e      	movs	r6, r1
 80035c8:	2001      	movs	r0, #1
 80035ca:	e65f      	b.n	800328c <__aeabi_dsub+0x468>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <__aeabi_dsub+0x7c8>
 80035d0:	464b      	mov	r3, r9
 80035d2:	1b5b      	subs	r3, r3, r5
 80035d4:	469c      	mov	ip, r3
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	d100      	bne.n	80035dc <__aeabi_dsub+0x7b8>
 80035da:	e548      	b.n	800306e <__aeabi_dsub+0x24a>
 80035dc:	2701      	movs	r7, #1
 80035de:	2b38      	cmp	r3, #56	@ 0x38
 80035e0:	dd00      	ble.n	80035e4 <__aeabi_dsub+0x7c0>
 80035e2:	e566      	b.n	80030b2 <__aeabi_dsub+0x28e>
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431c      	orrs	r4, r3
 80035ea:	e550      	b.n	800308e <__aeabi_dsub+0x26a>
 80035ec:	1c6b      	adds	r3, r5, #1
 80035ee:	4d11      	ldr	r5, [pc, #68]	@ (8003634 <__aeabi_dsub+0x810>)
 80035f0:	422b      	tst	r3, r5
 80035f2:	d000      	beq.n	80035f6 <__aeabi_dsub+0x7d2>
 80035f4:	e673      	b.n	80032de <__aeabi_dsub+0x4ba>
 80035f6:	4659      	mov	r1, fp
 80035f8:	0023      	movs	r3, r4
 80035fa:	4311      	orrs	r1, r2
 80035fc:	468a      	mov	sl, r1
 80035fe:	4303      	orrs	r3, r0
 8003600:	e600      	b.n	8003204 <__aeabi_dsub+0x3e0>
 8003602:	0767      	lsls	r7, r4, #29
 8003604:	08c0      	lsrs	r0, r0, #3
 8003606:	2300      	movs	r3, #0
 8003608:	4307      	orrs	r7, r0
 800360a:	08e5      	lsrs	r5, r4, #3
 800360c:	e662      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 800360e:	0764      	lsls	r4, r4, #29
 8003610:	08ff      	lsrs	r7, r7, #3
 8003612:	4327      	orrs	r7, r4
 8003614:	0905      	lsrs	r5, r0, #4
 8003616:	e65d      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003618:	08d2      	lsrs	r2, r2, #3
 800361a:	0749      	lsls	r1, r1, #29
 800361c:	4311      	orrs	r1, r2
 800361e:	000f      	movs	r7, r1
 8003620:	2302      	movs	r3, #2
 8003622:	092d      	lsrs	r5, r5, #4
 8003624:	e656      	b.n	80032d4 <__aeabi_dsub+0x4b0>
 8003626:	0007      	movs	r7, r0
 8003628:	e5a4      	b.n	8003174 <__aeabi_dsub+0x350>
 800362a:	0038      	movs	r0, r7
 800362c:	e48f      	b.n	8002f4e <__aeabi_dsub+0x12a>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	ff7fffff 	.word	0xff7fffff
 8003634:	000007fe 	.word	0x000007fe

08003638 <__aeabi_dcmpun>:
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	46c6      	mov	lr, r8
 800363c:	031e      	lsls	r6, r3, #12
 800363e:	0b36      	lsrs	r6, r6, #12
 8003640:	46b0      	mov	r8, r6
 8003642:	4e0d      	ldr	r6, [pc, #52]	@ (8003678 <__aeabi_dcmpun+0x40>)
 8003644:	030c      	lsls	r4, r1, #12
 8003646:	004d      	lsls	r5, r1, #1
 8003648:	005f      	lsls	r7, r3, #1
 800364a:	b500      	push	{lr}
 800364c:	0b24      	lsrs	r4, r4, #12
 800364e:	0d6d      	lsrs	r5, r5, #21
 8003650:	0d7f      	lsrs	r7, r7, #21
 8003652:	42b5      	cmp	r5, r6
 8003654:	d00b      	beq.n	800366e <__aeabi_dcmpun+0x36>
 8003656:	4908      	ldr	r1, [pc, #32]	@ (8003678 <__aeabi_dcmpun+0x40>)
 8003658:	2000      	movs	r0, #0
 800365a:	428f      	cmp	r7, r1
 800365c:	d104      	bne.n	8003668 <__aeabi_dcmpun+0x30>
 800365e:	4646      	mov	r6, r8
 8003660:	4316      	orrs	r6, r2
 8003662:	0030      	movs	r0, r6
 8003664:	1e43      	subs	r3, r0, #1
 8003666:	4198      	sbcs	r0, r3
 8003668:	bc80      	pop	{r7}
 800366a:	46b8      	mov	r8, r7
 800366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366e:	4304      	orrs	r4, r0
 8003670:	2001      	movs	r0, #1
 8003672:	2c00      	cmp	r4, #0
 8003674:	d1f8      	bne.n	8003668 <__aeabi_dcmpun+0x30>
 8003676:	e7ee      	b.n	8003656 <__aeabi_dcmpun+0x1e>
 8003678:	000007ff 	.word	0x000007ff

0800367c <__aeabi_d2iz>:
 800367c:	000b      	movs	r3, r1
 800367e:	0002      	movs	r2, r0
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4d16      	ldr	r5, [pc, #88]	@ (80036dc <__aeabi_d2iz+0x60>)
 8003684:	030c      	lsls	r4, r1, #12
 8003686:	b082      	sub	sp, #8
 8003688:	0049      	lsls	r1, r1, #1
 800368a:	2000      	movs	r0, #0
 800368c:	9200      	str	r2, [sp, #0]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	0b24      	lsrs	r4, r4, #12
 8003692:	0d49      	lsrs	r1, r1, #21
 8003694:	0fde      	lsrs	r6, r3, #31
 8003696:	42a9      	cmp	r1, r5
 8003698:	dd04      	ble.n	80036a4 <__aeabi_d2iz+0x28>
 800369a:	4811      	ldr	r0, [pc, #68]	@ (80036e0 <__aeabi_d2iz+0x64>)
 800369c:	4281      	cmp	r1, r0
 800369e:	dd03      	ble.n	80036a8 <__aeabi_d2iz+0x2c>
 80036a0:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <__aeabi_d2iz+0x68>)
 80036a2:	18f0      	adds	r0, r6, r3
 80036a4:	b002      	add	sp, #8
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	2080      	movs	r0, #128	@ 0x80
 80036aa:	0340      	lsls	r0, r0, #13
 80036ac:	4320      	orrs	r0, r4
 80036ae:	4c0e      	ldr	r4, [pc, #56]	@ (80036e8 <__aeabi_d2iz+0x6c>)
 80036b0:	1a64      	subs	r4, r4, r1
 80036b2:	2c1f      	cmp	r4, #31
 80036b4:	dd08      	ble.n	80036c8 <__aeabi_d2iz+0x4c>
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <__aeabi_d2iz+0x70>)
 80036b8:	1a5b      	subs	r3, r3, r1
 80036ba:	40d8      	lsrs	r0, r3
 80036bc:	0003      	movs	r3, r0
 80036be:	4258      	negs	r0, r3
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	d1ef      	bne.n	80036a4 <__aeabi_d2iz+0x28>
 80036c4:	0018      	movs	r0, r3
 80036c6:	e7ed      	b.n	80036a4 <__aeabi_d2iz+0x28>
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <__aeabi_d2iz+0x74>)
 80036ca:	9a00      	ldr	r2, [sp, #0]
 80036cc:	469c      	mov	ip, r3
 80036ce:	0003      	movs	r3, r0
 80036d0:	4461      	add	r1, ip
 80036d2:	408b      	lsls	r3, r1
 80036d4:	40e2      	lsrs	r2, r4
 80036d6:	4313      	orrs	r3, r2
 80036d8:	e7f1      	b.n	80036be <__aeabi_d2iz+0x42>
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	000003fe 	.word	0x000003fe
 80036e0:	0000041d 	.word	0x0000041d
 80036e4:	7fffffff 	.word	0x7fffffff
 80036e8:	00000433 	.word	0x00000433
 80036ec:	00000413 	.word	0x00000413
 80036f0:	fffffbed 	.word	0xfffffbed

080036f4 <__aeabi_i2d>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d016      	beq.n	8003728 <__aeabi_i2d+0x34>
 80036fa:	17c3      	asrs	r3, r0, #31
 80036fc:	18c5      	adds	r5, r0, r3
 80036fe:	405d      	eors	r5, r3
 8003700:	0fc4      	lsrs	r4, r0, #31
 8003702:	0028      	movs	r0, r5
 8003704:	f7fc ff1e 	bl	8000544 <__clzsi2>
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <__aeabi_i2d+0x58>)
 800370a:	1a1b      	subs	r3, r3, r0
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	0d5b      	lsrs	r3, r3, #21
 8003710:	280a      	cmp	r0, #10
 8003712:	dc14      	bgt.n	800373e <__aeabi_i2d+0x4a>
 8003714:	0002      	movs	r2, r0
 8003716:	002e      	movs	r6, r5
 8003718:	3215      	adds	r2, #21
 800371a:	4096      	lsls	r6, r2
 800371c:	220b      	movs	r2, #11
 800371e:	1a12      	subs	r2, r2, r0
 8003720:	40d5      	lsrs	r5, r2
 8003722:	032d      	lsls	r5, r5, #12
 8003724:	0b2d      	lsrs	r5, r5, #12
 8003726:	e003      	b.n	8003730 <__aeabi_i2d+0x3c>
 8003728:	2400      	movs	r4, #0
 800372a:	2300      	movs	r3, #0
 800372c:	2500      	movs	r5, #0
 800372e:	2600      	movs	r6, #0
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	432b      	orrs	r3, r5
 8003734:	07e4      	lsls	r4, r4, #31
 8003736:	4323      	orrs	r3, r4
 8003738:	0030      	movs	r0, r6
 800373a:	0019      	movs	r1, r3
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	380b      	subs	r0, #11
 8003740:	4085      	lsls	r5, r0
 8003742:	032d      	lsls	r5, r5, #12
 8003744:	2600      	movs	r6, #0
 8003746:	0b2d      	lsrs	r5, r5, #12
 8003748:	e7f2      	b.n	8003730 <__aeabi_i2d+0x3c>
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	0000041e 	.word	0x0000041e

08003750 <__aeabi_ui2d>:
 8003750:	b510      	push	{r4, lr}
 8003752:	1e04      	subs	r4, r0, #0
 8003754:	d010      	beq.n	8003778 <__aeabi_ui2d+0x28>
 8003756:	f7fc fef5 	bl	8000544 <__clzsi2>
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <__aeabi_ui2d+0x44>)
 800375c:	1a1b      	subs	r3, r3, r0
 800375e:	055b      	lsls	r3, r3, #21
 8003760:	0d5b      	lsrs	r3, r3, #21
 8003762:	280a      	cmp	r0, #10
 8003764:	dc0f      	bgt.n	8003786 <__aeabi_ui2d+0x36>
 8003766:	220b      	movs	r2, #11
 8003768:	0021      	movs	r1, r4
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	40d1      	lsrs	r1, r2
 800376e:	3015      	adds	r0, #21
 8003770:	030a      	lsls	r2, r1, #12
 8003772:	4084      	lsls	r4, r0
 8003774:	0b12      	lsrs	r2, r2, #12
 8003776:	e001      	b.n	800377c <__aeabi_ui2d+0x2c>
 8003778:	2300      	movs	r3, #0
 800377a:	2200      	movs	r2, #0
 800377c:	051b      	lsls	r3, r3, #20
 800377e:	4313      	orrs	r3, r2
 8003780:	0020      	movs	r0, r4
 8003782:	0019      	movs	r1, r3
 8003784:	bd10      	pop	{r4, pc}
 8003786:	0022      	movs	r2, r4
 8003788:	380b      	subs	r0, #11
 800378a:	4082      	lsls	r2, r0
 800378c:	0312      	lsls	r2, r2, #12
 800378e:	2400      	movs	r4, #0
 8003790:	0b12      	lsrs	r2, r2, #12
 8003792:	e7f3      	b.n	800377c <__aeabi_ui2d+0x2c>
 8003794:	0000041e 	.word	0x0000041e

08003798 <__aeabi_f2d>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	0242      	lsls	r2, r0, #9
 800379c:	0043      	lsls	r3, r0, #1
 800379e:	0fc4      	lsrs	r4, r0, #31
 80037a0:	20fe      	movs	r0, #254	@ 0xfe
 80037a2:	0e1b      	lsrs	r3, r3, #24
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	0a55      	lsrs	r5, r2, #9
 80037a8:	4208      	tst	r0, r1
 80037aa:	d00c      	beq.n	80037c6 <__aeabi_f2d+0x2e>
 80037ac:	21e0      	movs	r1, #224	@ 0xe0
 80037ae:	0089      	lsls	r1, r1, #2
 80037b0:	468c      	mov	ip, r1
 80037b2:	076d      	lsls	r5, r5, #29
 80037b4:	0b12      	lsrs	r2, r2, #12
 80037b6:	4463      	add	r3, ip
 80037b8:	051b      	lsls	r3, r3, #20
 80037ba:	4313      	orrs	r3, r2
 80037bc:	07e4      	lsls	r4, r4, #31
 80037be:	4323      	orrs	r3, r4
 80037c0:	0028      	movs	r0, r5
 80037c2:	0019      	movs	r1, r3
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <__aeabi_f2d+0x5c>
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	d01b      	beq.n	8003806 <__aeabi_f2d+0x6e>
 80037ce:	0028      	movs	r0, r5
 80037d0:	f7fc feb8 	bl	8000544 <__clzsi2>
 80037d4:	280a      	cmp	r0, #10
 80037d6:	dc1c      	bgt.n	8003812 <__aeabi_f2d+0x7a>
 80037d8:	230b      	movs	r3, #11
 80037da:	002a      	movs	r2, r5
 80037dc:	1a1b      	subs	r3, r3, r0
 80037de:	40da      	lsrs	r2, r3
 80037e0:	0003      	movs	r3, r0
 80037e2:	3315      	adds	r3, #21
 80037e4:	409d      	lsls	r5, r3
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <__aeabi_f2d+0x88>)
 80037e8:	0312      	lsls	r2, r2, #12
 80037ea:	1a1b      	subs	r3, r3, r0
 80037ec:	055b      	lsls	r3, r3, #21
 80037ee:	0b12      	lsrs	r2, r2, #12
 80037f0:	0d5b      	lsrs	r3, r3, #21
 80037f2:	e7e1      	b.n	80037b8 <__aeabi_f2d+0x20>
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	d009      	beq.n	800380c <__aeabi_f2d+0x74>
 80037f8:	0b13      	lsrs	r3, r2, #12
 80037fa:	2280      	movs	r2, #128	@ 0x80
 80037fc:	0312      	lsls	r2, r2, #12
 80037fe:	431a      	orrs	r2, r3
 8003800:	076d      	lsls	r5, r5, #29
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <__aeabi_f2d+0x8c>)
 8003804:	e7d8      	b.n	80037b8 <__aeabi_f2d+0x20>
 8003806:	2300      	movs	r3, #0
 8003808:	2200      	movs	r2, #0
 800380a:	e7d5      	b.n	80037b8 <__aeabi_f2d+0x20>
 800380c:	2200      	movs	r2, #0
 800380e:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <__aeabi_f2d+0x8c>)
 8003810:	e7d2      	b.n	80037b8 <__aeabi_f2d+0x20>
 8003812:	0003      	movs	r3, r0
 8003814:	002a      	movs	r2, r5
 8003816:	3b0b      	subs	r3, #11
 8003818:	409a      	lsls	r2, r3
 800381a:	2500      	movs	r5, #0
 800381c:	e7e3      	b.n	80037e6 <__aeabi_f2d+0x4e>
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	00000389 	.word	0x00000389
 8003824:	000007ff 	.word	0x000007ff

08003828 <__aeabi_d2f>:
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382a:	004b      	lsls	r3, r1, #1
 800382c:	030f      	lsls	r7, r1, #12
 800382e:	0d5b      	lsrs	r3, r3, #21
 8003830:	4c3a      	ldr	r4, [pc, #232]	@ (800391c <__aeabi_d2f+0xf4>)
 8003832:	0f45      	lsrs	r5, r0, #29
 8003834:	b083      	sub	sp, #12
 8003836:	0a7f      	lsrs	r7, r7, #9
 8003838:	1c5e      	adds	r6, r3, #1
 800383a:	432f      	orrs	r7, r5
 800383c:	9000      	str	r0, [sp, #0]
 800383e:	9101      	str	r1, [sp, #4]
 8003840:	0fca      	lsrs	r2, r1, #31
 8003842:	00c5      	lsls	r5, r0, #3
 8003844:	4226      	tst	r6, r4
 8003846:	d00b      	beq.n	8003860 <__aeabi_d2f+0x38>
 8003848:	4935      	ldr	r1, [pc, #212]	@ (8003920 <__aeabi_d2f+0xf8>)
 800384a:	185c      	adds	r4, r3, r1
 800384c:	2cfe      	cmp	r4, #254	@ 0xfe
 800384e:	dd13      	ble.n	8003878 <__aeabi_d2f+0x50>
 8003850:	20ff      	movs	r0, #255	@ 0xff
 8003852:	2300      	movs	r3, #0
 8003854:	05c0      	lsls	r0, r0, #23
 8003856:	4318      	orrs	r0, r3
 8003858:	07d2      	lsls	r2, r2, #31
 800385a:	4310      	orrs	r0, r2
 800385c:	b003      	add	sp, #12
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003860:	433d      	orrs	r5, r7
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <__aeabi_d2f+0x42>
 8003866:	2000      	movs	r0, #0
 8003868:	e7f4      	b.n	8003854 <__aeabi_d2f+0x2c>
 800386a:	2d00      	cmp	r5, #0
 800386c:	d0f0      	beq.n	8003850 <__aeabi_d2f+0x28>
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	03db      	lsls	r3, r3, #15
 8003872:	20ff      	movs	r0, #255	@ 0xff
 8003874:	433b      	orrs	r3, r7
 8003876:	e7ed      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003878:	2c00      	cmp	r4, #0
 800387a:	dd0c      	ble.n	8003896 <__aeabi_d2f+0x6e>
 800387c:	9b00      	ldr	r3, [sp, #0]
 800387e:	00ff      	lsls	r7, r7, #3
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	4183      	sbcs	r3, r0
 8003886:	0f69      	lsrs	r1, r5, #29
 8003888:	433b      	orrs	r3, r7
 800388a:	430b      	orrs	r3, r1
 800388c:	0759      	lsls	r1, r3, #29
 800388e:	d127      	bne.n	80038e0 <__aeabi_d2f+0xb8>
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	b2e0      	uxtb	r0, r4
 8003894:	e7de      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003896:	0021      	movs	r1, r4
 8003898:	3117      	adds	r1, #23
 800389a:	db31      	blt.n	8003900 <__aeabi_d2f+0xd8>
 800389c:	2180      	movs	r1, #128	@ 0x80
 800389e:	201e      	movs	r0, #30
 80038a0:	0409      	lsls	r1, r1, #16
 80038a2:	4339      	orrs	r1, r7
 80038a4:	1b00      	subs	r0, r0, r4
 80038a6:	281f      	cmp	r0, #31
 80038a8:	dd2d      	ble.n	8003906 <__aeabi_d2f+0xde>
 80038aa:	2602      	movs	r6, #2
 80038ac:	4276      	negs	r6, r6
 80038ae:	1b34      	subs	r4, r6, r4
 80038b0:	000e      	movs	r6, r1
 80038b2:	40e6      	lsrs	r6, r4
 80038b4:	0034      	movs	r4, r6
 80038b6:	2820      	cmp	r0, #32
 80038b8:	d004      	beq.n	80038c4 <__aeabi_d2f+0x9c>
 80038ba:	481a      	ldr	r0, [pc, #104]	@ (8003924 <__aeabi_d2f+0xfc>)
 80038bc:	4684      	mov	ip, r0
 80038be:	4463      	add	r3, ip
 80038c0:	4099      	lsls	r1, r3
 80038c2:	430d      	orrs	r5, r1
 80038c4:	002b      	movs	r3, r5
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	418b      	sbcs	r3, r1
 80038ca:	4323      	orrs	r3, r4
 80038cc:	0759      	lsls	r1, r3, #29
 80038ce:	d003      	beq.n	80038d8 <__aeabi_d2f+0xb0>
 80038d0:	210f      	movs	r1, #15
 80038d2:	4019      	ands	r1, r3
 80038d4:	2904      	cmp	r1, #4
 80038d6:	d10b      	bne.n	80038f0 <__aeabi_d2f+0xc8>
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	2000      	movs	r0, #0
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	e7b9      	b.n	8003854 <__aeabi_d2f+0x2c>
 80038e0:	210f      	movs	r1, #15
 80038e2:	4019      	ands	r1, r3
 80038e4:	2904      	cmp	r1, #4
 80038e6:	d104      	bne.n	80038f2 <__aeabi_d2f+0xca>
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	b2e0      	uxtb	r0, r4
 80038ee:	e7b1      	b.n	8003854 <__aeabi_d2f+0x2c>
 80038f0:	2400      	movs	r4, #0
 80038f2:	3304      	adds	r3, #4
 80038f4:	0159      	lsls	r1, r3, #5
 80038f6:	d5f7      	bpl.n	80038e8 <__aeabi_d2f+0xc0>
 80038f8:	3401      	adds	r4, #1
 80038fa:	2300      	movs	r3, #0
 80038fc:	b2e0      	uxtb	r0, r4
 80038fe:	e7a9      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003900:	2000      	movs	r0, #0
 8003902:	2300      	movs	r3, #0
 8003904:	e7a6      	b.n	8003854 <__aeabi_d2f+0x2c>
 8003906:	4c08      	ldr	r4, [pc, #32]	@ (8003928 <__aeabi_d2f+0x100>)
 8003908:	191c      	adds	r4, r3, r4
 800390a:	002b      	movs	r3, r5
 800390c:	40a5      	lsls	r5, r4
 800390e:	40c3      	lsrs	r3, r0
 8003910:	40a1      	lsls	r1, r4
 8003912:	1e68      	subs	r0, r5, #1
 8003914:	4185      	sbcs	r5, r0
 8003916:	4329      	orrs	r1, r5
 8003918:	430b      	orrs	r3, r1
 800391a:	e7d7      	b.n	80038cc <__aeabi_d2f+0xa4>
 800391c:	000007fe 	.word	0x000007fe
 8003920:	fffffc80 	.word	0xfffffc80
 8003924:	fffffca2 	.word	0xfffffca2
 8003928:	fffffc82 	.word	0xfffffc82

0800392c <__clzdi2>:
 800392c:	b510      	push	{r4, lr}
 800392e:	2900      	cmp	r1, #0
 8003930:	d103      	bne.n	800393a <__clzdi2+0xe>
 8003932:	f7fc fe07 	bl	8000544 <__clzsi2>
 8003936:	3020      	adds	r0, #32
 8003938:	e002      	b.n	8003940 <__clzdi2+0x14>
 800393a:	0008      	movs	r0, r1
 800393c:	f7fc fe02 	bl	8000544 <__clzsi2>
 8003940:	bd10      	pop	{r4, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)

08003944 <LCD_Display_Dose_Number>:
    ones      = number % 10;
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
}

void LCD_Display_Dose_Number(uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b095      	sub	sp, #84	@ 0x54
 8003948:	9001      	str	r0, [sp, #4]
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	000f      	movs	r7, r1
	uint32_t Dose_data_tho[4] = {0};
 800394e:	2210      	movs	r2, #16
 8003950:	2100      	movs	r1, #0
 8003952:	a804      	add	r0, sp, #16
	uint32_t Dose_data_hun[4] = {0};
 8003954:	ac08      	add	r4, sp, #32
{
 8003956:	9303      	str	r3, [sp, #12]
	uint32_t Dose_data_ten[4] = {0};
 8003958:	ad0c      	add	r5, sp, #48	@ 0x30
	uint32_t Dose_data_tho[4] = {0};
 800395a:	f016 fb79 	bl	801a050 <memset>
	uint32_t Dose_data_hun[4] = {0};
 800395e:	2210      	movs	r2, #16
 8003960:	2100      	movs	r1, #0
 8003962:	0020      	movs	r0, r4
 8003964:	f016 fb74 	bl	801a050 <memset>
	uint32_t Dose_data_one[4] = {0};
 8003968:	ae10      	add	r6, sp, #64	@ 0x40
	uint32_t Dose_data_ten[4] = {0};
 800396a:	2210      	movs	r2, #16
 800396c:	2100      	movs	r1, #0
 800396e:	0028      	movs	r0, r5
 8003970:	f016 fb6e 	bl	801a050 <memset>
	uint32_t Dose_data_one[4] = {0};
 8003974:	2210      	movs	r2, #16
 8003976:	2100      	movs	r1, #0
 8003978:	0030      	movs	r0, r6
 800397a:	f016 fb69 	bl	801a050 <memset>

    switch (thousands)
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	1e58      	subs	r0, r3, #1
 8003982:	2808      	cmp	r0, #8
 8003984:	d850      	bhi.n	8003a28 <LCD_Display_Dose_Number+0xe4>
 8003986:	f7fc fbd1 	bl	800012c <__gnu_thumb1_case_uqi>
 800398a:	1305      	.short	0x1305
 800398c:	3029261e 	.word	0x3029261e
 8003990:	413a      	.short	0x413a
 8003992:	48          	.byte	0x48
 8003993:	00          	.byte	0x00
        	Dose_data_tho[3] = 0x0000000;
            break;

        case 1:
        	Dose_data_tho[0] = 0x0000000;
        	Dose_data_tho[1] = 0x1000000;
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[3] = 0x1000000;
            break;

        case 4:
        	Dose_data_tho[0] = 0x0000000;
        	Dose_data_tho[1] = 0x3000000;
 8003998:	9305      	str	r3, [sp, #20]
            break;

        case 7:
        	Dose_data_tho[0] = 0x1000000;
        	Dose_data_tho[1] = 0x3000000;
        	Dose_data_tho[2] = 0x1000000;
 800399a:	9306      	str	r3, [sp, #24]
        	Dose_data_tho[1] = 0x3000000;
        	Dose_data_tho[2] = 0x3000000;
        	Dose_data_tho[3] = 0x1000000;
            break;
    }
    switch (hundreds)
 800399c:	2f09      	cmp	r7, #9
 800399e:	d85c      	bhi.n	8003a5a <LCD_Display_Dose_Number+0x116>
 80039a0:	0038      	movs	r0, r7
 80039a2:	f7fc fbc3 	bl	800012c <__gnu_thumb1_case_uqi>
 80039a6:	564e      	.short	0x564e
 80039a8:	7a777065 	.word	0x7a777065
 80039ac:	99928b81 	.word	0x99928b81
        	Dose_data_tho[0] = 0x1000000;
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	045b      	lsls	r3, r3, #17
 80039b4:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x1000000;
 80039b6:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x2000000;
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	049b      	lsls	r3, r3, #18
 80039bc:	9306      	str	r3, [sp, #24]
        	Dose_data_tho[3] = 0x3000000;
 80039be:	23c0      	movs	r3, #192	@ 0xc0
 80039c0:	049b      	lsls	r3, r3, #18
        	Dose_data_tho[3] = 0x3000000;
 80039c2:	9307      	str	r3, [sp, #28]
            break;
 80039c4:	e7ea      	b.n	800399c <LCD_Display_Dose_Number+0x58>
        	Dose_data_tho[0] = 0x1000000;
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	045b      	lsls	r3, r3, #17
 80039ca:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x1000000;
 80039cc:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x3000000;
 80039ce:	22c0      	movs	r2, #192	@ 0xc0
 80039d0:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[2] = 0x3000000;
 80039d2:	9206      	str	r2, [sp, #24]
        	Dose_data_tho[3] = 0x1000000;
 80039d4:	e7f5      	b.n	80039c2 <LCD_Display_Dose_Number+0x7e>
        	Dose_data_tho[1] = 0x3000000;
 80039d6:	23c0      	movs	r3, #192	@ 0xc0
 80039d8:	049b      	lsls	r3, r3, #18
 80039da:	e7dd      	b.n	8003998 <LCD_Display_Dose_Number+0x54>
        	Dose_data_tho[0] = 0x1000000;
 80039dc:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x2000000;
 80039de:	2280      	movs	r2, #128	@ 0x80
        	Dose_data_tho[0] = 0x1000000;
 80039e0:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x2000000;
 80039e2:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 80039e4:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x2000000;
 80039e6:	9205      	str	r2, [sp, #20]
 80039e8:	e7f1      	b.n	80039ce <LCD_Display_Dose_Number+0x8a>
        	Dose_data_tho[0] = 0x1000000;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	045b      	lsls	r3, r3, #17
 80039ee:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x2000000;
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	049b      	lsls	r3, r3, #18
 80039f4:	9305      	str	r3, [sp, #20]
        	Dose_data_tho[2] = 0x3000000;
 80039f6:	23c0      	movs	r3, #192	@ 0xc0
 80039f8:	049b      	lsls	r3, r3, #18
        	Dose_data_tho[2] = 0x3000000;
 80039fa:	9306      	str	r3, [sp, #24]
 80039fc:	e7e1      	b.n	80039c2 <LCD_Display_Dose_Number+0x7e>
        	Dose_data_tho[0] = 0x1000000;
 80039fe:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x3000000;
 8003a00:	22c0      	movs	r2, #192	@ 0xc0
        	Dose_data_tho[0] = 0x1000000;
 8003a02:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x3000000;
 8003a04:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 8003a06:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a08:	9205      	str	r2, [sp, #20]
 8003a0a:	e7c6      	b.n	800399a <LCD_Display_Dose_Number+0x56>
        	Dose_data_tho[0] = 0x1000000;
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	045b      	lsls	r3, r3, #17
 8003a10:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a12:	23c0      	movs	r3, #192	@ 0xc0
 8003a14:	049b      	lsls	r3, r3, #18
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	e7ef      	b.n	80039fa <LCD_Display_Dose_Number+0xb6>
        	Dose_data_tho[0] = 0x1000000;
 8003a1a:	2380      	movs	r3, #128	@ 0x80
        	Dose_data_tho[1] = 0x3000000;
 8003a1c:	22c0      	movs	r2, #192	@ 0xc0
        	Dose_data_tho[0] = 0x1000000;
 8003a1e:	045b      	lsls	r3, r3, #17
        	Dose_data_tho[1] = 0x3000000;
 8003a20:	0492      	lsls	r2, r2, #18
        	Dose_data_tho[0] = 0x1000000;
 8003a22:	9304      	str	r3, [sp, #16]
        	Dose_data_tho[1] = 0x3000000;
 8003a24:	9205      	str	r2, [sp, #20]
 8003a26:	e7d4      	b.n	80039d2 <LCD_Display_Dose_Number+0x8e>
    switch (hundreds)
 8003a28:	2f09      	cmp	r7, #9
 8003a2a:	d816      	bhi.n	8003a5a <LCD_Display_Dose_Number+0x116>
 8003a2c:	0038      	movs	r0, r7
 8003a2e:	f7fc fb7d 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a32:	1005      	.short	0x1005
 8003a34:	34312a1f 	.word	0x34312a1f
 8003a38:	534c453b 	.word	0x534c453b
    {
    	case 0:
    		if(thousands != 0)
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <LCD_Display_Dose_Number+0x116>
			{
    			Dose_data_hun[0] = 0x0004000;
 8003a42:	2280      	movs	r2, #128	@ 0x80
    			Dose_data_hun[1] = 0x000C000;
 8003a44:	23c0      	movs	r3, #192	@ 0xc0
    			Dose_data_hun[0] = 0x0004000;
 8003a46:	01d2      	lsls	r2, r2, #7
    			Dose_data_hun[1] = 0x000C000;
 8003a48:	021b      	lsls	r3, r3, #8
    			Dose_data_hun[0] = 0x0004000;
 8003a4a:	9208      	str	r2, [sp, #32]
    			Dose_data_hun[1] = 0x000C000;
 8003a4c:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Dose_data_hun[0] = 0x0004000;
			Dose_data_hun[1] = 0x000C000;
			Dose_data_hun[2] = 0x000C000;
 8003a4e:	60a2      	str	r2, [r4, #8]
 8003a50:	e017      	b.n	8003a82 <LCD_Display_Dose_Number+0x13e>
    		Dose_data_hun[1] = 0x0004000;
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003a56:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003a58:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x0004000;
			break;
    }
    switch (tens)
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d84e      	bhi.n	8003afe <LCD_Display_Dose_Number+0x1ba>
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7fc fb63 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a66:	4840      	.short	0x4840
 8003a68:	6c696257 	.word	0x6c696257
 8003a6c:	8b847d73 	.word	0x8b847d73
			Dose_data_hun[0] = 0x0004000;
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0004000;
 8003a76:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x0008000;
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x000C000;
 8003a7e:	23c0      	movs	r3, #192	@ 0xc0
 8003a80:	021b      	lsls	r3, r3, #8
			Dose_data_hun[3] = 0x0004000;
 8003a82:	60e3      	str	r3, [r4, #12]
			break;
 8003a84:	e7e9      	b.n	8003a5a <LCD_Display_Dose_Number+0x116>
			Dose_data_hun[0] = 0x0004000;
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	01db      	lsls	r3, r3, #7
 8003a8a:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0004000;
 8003a8c:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003a8e:	22c0      	movs	r2, #192	@ 0xc0
 8003a90:	0212      	lsls	r2, r2, #8
 8003a92:	e7dc      	b.n	8003a4e <LCD_Display_Dose_Number+0x10a>
			Dose_data_hun[1] = 0x000C000;
 8003a94:	23c0      	movs	r3, #192	@ 0xc0
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	e7dd      	b.n	8003a56 <LCD_Display_Dose_Number+0x112>
			Dose_data_hun[0] = 0x0004000;
 8003a9a:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x0008000;
 8003a9c:	2280      	movs	r2, #128	@ 0x80
			Dose_data_hun[0] = 0x0004000;
 8003a9e:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x0008000;
 8003aa0:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003aa2:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0008000;
 8003aa4:	6062      	str	r2, [r4, #4]
 8003aa6:	e7f2      	b.n	8003a8e <LCD_Display_Dose_Number+0x14a>
			Dose_data_hun[0] = 0x0004000;
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x0008000;
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	6063      	str	r3, [r4, #4]
			Dose_data_hun[2] = 0x000C000;
 8003ab4:	23c0      	movs	r3, #192	@ 0xc0
 8003ab6:	021b      	lsls	r3, r3, #8
			Dose_data_hun[2] = 0x000C000;
 8003ab8:	60a3      	str	r3, [r4, #8]
			Dose_data_hun[3] = 0x000C000;
 8003aba:	e7e2      	b.n	8003a82 <LCD_Display_Dose_Number+0x13e>
			Dose_data_hun[0] = 0x0004000;
 8003abc:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x000C000;
 8003abe:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_hun[0] = 0x0004000;
 8003ac0:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003ac2:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003ac4:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ac6:	6062      	str	r2, [r4, #4]
			Dose_data_hun[2] = 0x0004000;
 8003ac8:	e7c6      	b.n	8003a58 <LCD_Display_Dose_Number+0x114>
			Dose_data_hun[0] = 0x0004000;
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ad0:	23c0      	movs	r3, #192	@ 0xc0
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	e7ef      	b.n	8003ab8 <LCD_Display_Dose_Number+0x174>
			Dose_data_hun[0] = 0x0004000;
 8003ad8:	2380      	movs	r3, #128	@ 0x80
			Dose_data_hun[1] = 0x000C000;
 8003ada:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_hun[0] = 0x0004000;
 8003adc:	01db      	lsls	r3, r3, #7
			Dose_data_hun[1] = 0x000C000;
 8003ade:	0212      	lsls	r2, r2, #8
			Dose_data_hun[0] = 0x0004000;
 8003ae0:	9308      	str	r3, [sp, #32]
			Dose_data_hun[1] = 0x000C000;
 8003ae2:	6062      	str	r2, [r4, #4]
 8003ae4:	e7b3      	b.n	8003a4e <LCD_Display_Dose_Number+0x10a>
    {
    	case 0:
    		Dose_data_ten[0] = 0x0001000;
 8003ae6:	2280      	movs	r2, #128	@ 0x80
    		Dose_data_ten[1] = 0x0003000;
 8003ae8:	23c0      	movs	r3, #192	@ 0xc0
    		Dose_data_ten[0] = 0x0001000;
 8003aea:	0152      	lsls	r2, r2, #5
    		Dose_data_ten[1] = 0x0003000;
 8003aec:	019b      	lsls	r3, r3, #6
    		Dose_data_ten[0] = 0x0001000;
 8003aee:	920c      	str	r2, [sp, #48]	@ 0x30
    		Dose_data_ten[1] = 0x0003000;
 8003af0:	606b      	str	r3, [r5, #4]
			break;

		case 9:
			Dose_data_ten[0] = 0x0001000;
			Dose_data_ten[1] = 0x0003000;
			Dose_data_ten[2] = 0x0003000;
 8003af2:	60aa      	str	r2, [r5, #8]
 8003af4:	e017      	b.n	8003b26 <LCD_Display_Dose_Number+0x1e2>
    		Dose_data_ten[1] = 0x0001000;
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003afa:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0001000;
 8003afc:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0001000;
			break;
    }
    switch (ones)
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d84b      	bhi.n	8003b9c <LCD_Display_Dose_Number+0x258>
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fc fb11 	bl	800012c <__gnu_thumb1_case_uqi>
 8003b0a:	4640      	.short	0x4640
 8003b0c:	68666159 	.word	0x68666159
 8003b10:	7f7a746d 	.word	0x7f7a746d
			Dose_data_ten[0] = 0x0001000;
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	015b      	lsls	r3, r3, #5
 8003b18:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0001000;
 8003b1a:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0002000;
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0003000;
 8003b22:	23c0      	movs	r3, #192	@ 0xc0
 8003b24:	019b      	lsls	r3, r3, #6
			Dose_data_ten[3] = 0x0001000;
 8003b26:	60eb      	str	r3, [r5, #12]
			break;
 8003b28:	e7e9      	b.n	8003afe <LCD_Display_Dose_Number+0x1ba>
			Dose_data_ten[0] = 0x0001000;
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	015b      	lsls	r3, r3, #5
 8003b2e:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0001000;
 8003b30:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0003000;
 8003b32:	22c0      	movs	r2, #192	@ 0xc0
 8003b34:	0192      	lsls	r2, r2, #6
 8003b36:	e7dc      	b.n	8003af2 <LCD_Display_Dose_Number+0x1ae>
			Dose_data_ten[1] = 0x0003000;
 8003b38:	23c0      	movs	r3, #192	@ 0xc0
 8003b3a:	019b      	lsls	r3, r3, #6
 8003b3c:	e7dd      	b.n	8003afa <LCD_Display_Dose_Number+0x1b6>
			Dose_data_ten[0] = 0x0001000;
 8003b3e:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0002000;
 8003b40:	2280      	movs	r2, #128	@ 0x80
			Dose_data_ten[0] = 0x0001000;
 8003b42:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0002000;
 8003b44:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b46:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0002000;
 8003b48:	606a      	str	r2, [r5, #4]
 8003b4a:	e7f2      	b.n	8003b32 <LCD_Display_Dose_Number+0x1ee>
			Dose_data_ten[0] = 0x0001000;
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0002000;
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	606b      	str	r3, [r5, #4]
			Dose_data_ten[2] = 0x0003000;
 8003b58:	23c0      	movs	r3, #192	@ 0xc0
 8003b5a:	019b      	lsls	r3, r3, #6
			Dose_data_ten[2] = 0x0003000;
 8003b5c:	60ab      	str	r3, [r5, #8]
			Dose_data_ten[3] = 0x0003000;
 8003b5e:	e7e2      	b.n	8003b26 <LCD_Display_Dose_Number+0x1e2>
			Dose_data_ten[0] = 0x0001000;
 8003b60:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0003000;
 8003b62:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_ten[0] = 0x0001000;
 8003b64:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003b66:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b68:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b6a:	606a      	str	r2, [r5, #4]
 8003b6c:	e7c6      	b.n	8003afc <LCD_Display_Dose_Number+0x1b8>
			Dose_data_ten[0] = 0x0001000;
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	015b      	lsls	r3, r3, #5
 8003b72:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	606b      	str	r3, [r5, #4]
 8003b7a:	e7ef      	b.n	8003b5c <LCD_Display_Dose_Number+0x218>
			Dose_data_ten[0] = 0x0001000;
 8003b7c:	2380      	movs	r3, #128	@ 0x80
			Dose_data_ten[1] = 0x0003000;
 8003b7e:	22c0      	movs	r2, #192	@ 0xc0
			Dose_data_ten[0] = 0x0001000;
 8003b80:	015b      	lsls	r3, r3, #5
			Dose_data_ten[1] = 0x0003000;
 8003b82:	0192      	lsls	r2, r2, #6
			Dose_data_ten[0] = 0x0001000;
 8003b84:	930c      	str	r3, [sp, #48]	@ 0x30
			Dose_data_ten[1] = 0x0003000;
 8003b86:	606a      	str	r2, [r5, #4]
 8003b88:	e7b3      	b.n	8003af2 <LCD_Display_Dose_Number+0x1ae>
    {
    	case 0:
        	Dose_data_one[0] = 0x0000040;
 8003b8a:	2240      	movs	r2, #64	@ 0x40
        	Dose_data_one[1] = 0x0000060;
 8003b8c:	2360      	movs	r3, #96	@ 0x60
        	Dose_data_one[0] = 0x0000040;
 8003b8e:	9210      	str	r2, [sp, #64]	@ 0x40
        	Dose_data_one[1] = 0x0000060;
 8003b90:	6073      	str	r3, [r6, #4]
			break;

		case 9:
			Dose_data_one[0] = 0x0000040;
			Dose_data_one[1] = 0x0000060;
			Dose_data_one[2] = 0x0000060;
 8003b92:	60b2      	str	r2, [r6, #8]
 8003b94:	e018      	b.n	8003bc8 <LCD_Display_Dose_Number+0x284>
    		Dose_data_one[1] = 0x0000040;
 8003b96:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003b98:	9311      	str	r3, [sp, #68]	@ 0x44
			Dose_data_one[2] = 0x0000060;
 8003b9a:	9312      	str	r3, [sp, #72]	@ 0x48
{
 8003b9c:	2300      	movs	r3, #0
			Dose_data_one[3] = 0x0000040;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Dose_data_tho[i] | Dose_data_hun[i] | Dose_data_ten[i] | Dose_data_one[i];
 8003b9e:	aa04      	add	r2, sp, #16
 8003ba0:	58e1      	ldr	r1, [r4, r3]
 8003ba2:	58d2      	ldr	r2, [r2, r3]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	58e9      	ldr	r1, [r5, r3]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	58f1      	ldr	r1, [r6, r3]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003bb0:	50ca      	str	r2, [r1, r3]
    for(int i = 0; i<4; i++)
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d1f2      	bne.n	8003b9e <LCD_Display_Dose_Number+0x25a>
    }
}
 8003bb8:	b015      	add	sp, #84	@ 0x54
 8003bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Dose_data_one[0] = 0x0000040;
 8003bbc:	2340      	movs	r3, #64	@ 0x40
 8003bbe:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000040;
 8003bc0:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000020;
 8003bc2:	3b20      	subs	r3, #32
 8003bc4:	60b3      	str	r3, [r6, #8]
			Dose_data_one[3] = 0x0000060;
 8003bc6:	3340      	adds	r3, #64	@ 0x40
			Dose_data_one[3] = 0x0000040;
 8003bc8:	60f3      	str	r3, [r6, #12]
    for(int i = 0; i<4; i++)
 8003bca:	e7e7      	b.n	8003b9c <LCD_Display_Dose_Number+0x258>
			Dose_data_one[0] = 0x0000040;
 8003bcc:	2340      	movs	r3, #64	@ 0x40
 8003bce:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000040;
 8003bd0:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003bd2:	2260      	movs	r2, #96	@ 0x60
 8003bd4:	e7dd      	b.n	8003b92 <LCD_Display_Dose_Number+0x24e>
			Dose_data_one[1] = 0x0000060;
 8003bd6:	2360      	movs	r3, #96	@ 0x60
 8003bd8:	e7de      	b.n	8003b98 <LCD_Display_Dose_Number+0x254>
			Dose_data_one[0] = 0x0000040;
 8003bda:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003bdc:	2220      	movs	r2, #32
			Dose_data_one[0] = 0x0000040;
 8003bde:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003be0:	6072      	str	r2, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003be2:	e7f6      	b.n	8003bd2 <LCD_Display_Dose_Number+0x28e>
			Dose_data_one[0] = 0x0000040;
 8003be4:	2340      	movs	r3, #64	@ 0x40
 8003be6:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000020;
 8003be8:	3b20      	subs	r3, #32
 8003bea:	6073      	str	r3, [r6, #4]
			Dose_data_one[2] = 0x0000060;
 8003bec:	3340      	adds	r3, #64	@ 0x40
			Dose_data_one[2] = 0x0000060;
 8003bee:	60b3      	str	r3, [r6, #8]
			Dose_data_one[3] = 0x0000060;
 8003bf0:	e7ea      	b.n	8003bc8 <LCD_Display_Dose_Number+0x284>
			Dose_data_one[0] = 0x0000040;
 8003bf2:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003bf4:	2260      	movs	r2, #96	@ 0x60
			Dose_data_one[0] = 0x0000040;
 8003bf6:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003bf8:	6072      	str	r2, [r6, #4]
			Dose_data_one[2] = 0x0000040;
 8003bfa:	60b3      	str	r3, [r6, #8]
    for(int i = 0; i<4; i++)
 8003bfc:	e7ce      	b.n	8003b9c <LCD_Display_Dose_Number+0x258>
			Dose_data_one[0] = 0x0000040;
 8003bfe:	2340      	movs	r3, #64	@ 0x40
 8003c00:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c02:	3320      	adds	r3, #32
 8003c04:	6073      	str	r3, [r6, #4]
 8003c06:	e7f2      	b.n	8003bee <LCD_Display_Dose_Number+0x2aa>
			Dose_data_one[0] = 0x0000040;
 8003c08:	2340      	movs	r3, #64	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c0a:	2260      	movs	r2, #96	@ 0x60
			Dose_data_one[0] = 0x0000040;
 8003c0c:	9310      	str	r3, [sp, #64]	@ 0x40
			Dose_data_one[1] = 0x0000060;
 8003c0e:	6072      	str	r2, [r6, #4]
 8003c10:	e7bf      	b.n	8003b92 <LCD_Display_Dose_Number+0x24e>

08003c12 <LCD_DigitNumber_Dose_Calculate>:
{
 8003c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c14:	000f      	movs	r7, r1
    number %= 1000;
 8003c16:	21fa      	movs	r1, #250	@ 0xfa
{
 8003c18:	b085      	sub	sp, #20
    number %= 1000;
 8003c1a:	0089      	lsls	r1, r1, #2
{
 8003c1c:	0004      	movs	r4, r0
    number %= 1000;
 8003c1e:	f7fc fb29 	bl	8000274 <__aeabi_uidivmod>
 8003c22:	b28d      	uxth	r5, r1
    number %= 100;
 8003c24:	0028      	movs	r0, r5
 8003c26:	2164      	movs	r1, #100	@ 0x64
 8003c28:	f7fc fb24 	bl	8000274 <__aeabi_uidivmod>
 8003c2c:	b28e      	uxth	r6, r1
    ones      = number % 10;
 8003c2e:	0030      	movs	r0, r6
 8003c30:	210a      	movs	r1, #10
 8003c32:	f7fc fb1f 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 8003c36:	0030      	movs	r0, r6
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c38:	b2cb      	uxtb	r3, r1
    tens      = number / 10;
 8003c3a:	210a      	movs	r1, #10
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c3c:	9303      	str	r3, [sp, #12]
    tens      = number / 10;
 8003c3e:	f7fc fa93 	bl	8000168 <__udivsi3>
    hundreds  = number / 100;
 8003c42:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c44:	b2c6      	uxtb	r6, r0
    hundreds  = number / 100;
 8003c46:	0028      	movs	r0, r5
 8003c48:	f7fc fa8e 	bl	8000168 <__udivsi3>
    thousands = number / 1000;
 8003c4c:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c4e:	b2c5      	uxtb	r5, r0
    thousands = number / 1000;
 8003c50:	0089      	lsls	r1, r1, #2
 8003c52:	0020      	movs	r0, r4
 8003c54:	f7fc fa88 	bl	8000168 <__udivsi3>
    LCD_Display_Dose_Number(thousands, hundreds, tens, ones, data);
 8003c58:	0032      	movs	r2, r6
 8003c5a:	0029      	movs	r1, r5
 8003c5c:	9b03      	ldr	r3, [sp, #12]
 8003c5e:	b2c0      	uxtb	r0, r0
 8003c60:	9700      	str	r7, [sp, #0]
 8003c62:	f7ff fe6f 	bl	8003944 <LCD_Display_Dose_Number>
}
 8003c66:	b005      	add	sp, #20
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c6c <LCD_Display_Dose>:
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	0015      	movs	r5, r2
 8003c70:	000c      	movs	r4, r1
    dose = dose / 10.0;
 8003c72:	f7ff fd6d 	bl	8003750 <__aeabi_ui2d>
 8003c76:	2200      	movs	r2, #0
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <LCD_Display_Dose+0xe4>)
 8003c7a:	f7fe f9b3 	bl	8001fe4 <__aeabi_ddiv>
 8003c7e:	f7fc fcb7 	bl	80005f0 <__aeabi_d2uiz>
    if (Packet_dose_unit == 0x00) // uSv/h, mSv/h unit
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	d13d      	bne.n	8003d02 <LCD_Display_Dose+0x96>
        if (dose > 9999)
 8003c86:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <LCD_Display_Dose+0xe8>)
 8003c88:	4298      	cmp	r0, r3
 8003c8a:	d912      	bls.n	8003cb2 <LCD_Display_Dose+0x46>
            float mSv_dose = dose / 10000.0f;
 8003c8c:	f7fd fd9e 	bl	80017cc <__aeabi_ui2f>
 8003c90:	4931      	ldr	r1, [pc, #196]	@ (8003d58 <LCD_Display_Dose+0xec>)
 8003c92:	f7fc ff89 	bl	8000ba8 <__aeabi_fdiv>
            dose_int = (int32_t)(mSv_dose * 10.0f);  // mSv * 10
 8003c96:	4931      	ldr	r1, [pc, #196]	@ (8003d5c <LCD_Display_Dose+0xf0>)
 8003c98:	f7fd f954 	bl	8000f44 <__aeabi_fmul>
 8003c9c:	f7fd fd26 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003ca0:	0021      	movs	r1, r4
 8003ca2:	b280      	uxth	r0, r0
 8003ca4:	f7ff ffb5 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[0] |= 0x0000008;  // mSv/h 표시
 8003ca8:	2308      	movs	r3, #8
 8003caa:	6822      	ldr	r2, [r4, #0]
            data[0] |= 0x0800000;  // mR/h 표시
 8003cac:	4313      	orrs	r3, r2
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	e008      	b.n	8003cc4 <LCD_Display_Dose+0x58>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	b280      	uxth	r0, r0
 8003cb6:	f7ff ffac 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[2] |= 0x0800000;  // uSv/h 표시
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	68a2      	ldr	r2, [r4, #8]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60a3      	str	r3, [r4, #8]
    data[3] = data[3] | 0x0800000;
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	68e2      	ldr	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cc8:	4d25      	ldr	r5, [pc, #148]	@ (8003d60 <LCD_Display_Dose+0xf4>)
    data[3] = data[3] | 0x0800000;
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cce:	0028      	movs	r0, r5
    data[3] = data[3] | 0x0800000;
 8003cd0:	60e3      	str	r3, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cd8:	f00b fb44 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8003cdc:	0028      	movs	r0, r5
 8003cde:	6863      	ldr	r3, [r4, #4]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4a20      	ldr	r2, [pc, #128]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003ce4:	f00b fb3e 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8003ce8:	0028      	movs	r0, r5
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	2104      	movs	r1, #4
 8003cee:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cf0:	f00b fb38 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	2106      	movs	r1, #6
 8003cf8:	68e3      	ldr	r3, [r4, #12]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <LCD_Display_Dose+0xf8>)
 8003cfc:	f00b fb32 	bl	800f364 <HAL_LCD_Write>
}
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
        float mR_dose = dose * 100.0f;
 8003d02:	f7fd fd63 	bl	80017cc <__aeabi_ui2f>
 8003d06:	4918      	ldr	r1, [pc, #96]	@ (8003d68 <LCD_Display_Dose+0xfc>)
 8003d08:	f7fd f91c 	bl	8000f44 <__aeabi_fmul>
        if (mR_dose > 99999.0f)
 8003d0c:	4917      	ldr	r1, [pc, #92]	@ (8003d6c <LCD_Display_Dose+0x100>)
        float mR_dose = dose * 100.0f;
 8003d0e:	1c05      	adds	r5, r0, #0
        if (mR_dose > 99999.0f)
 8003d10:	f7fc fc04 	bl	800051c <__aeabi_fcmpgt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d00f      	beq.n	8003d38 <LCD_Display_Dose+0xcc>
            float R_dose = mR_dose / 10000.0f;
 8003d18:	490f      	ldr	r1, [pc, #60]	@ (8003d58 <LCD_Display_Dose+0xec>)
 8003d1a:	1c28      	adds	r0, r5, #0
 8003d1c:	f7fc ff44 	bl	8000ba8 <__aeabi_fdiv>
            dose_int = (int32_t)(R_dose);  // R * 10
 8003d20:	f7fd fce4 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003d24:	0021      	movs	r1, r4
 8003d26:	b280      	uxth	r0, r0
 8003d28:	f7ff ff73 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[1] |= 0x0800000;  // R/h 표시
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	4313      	orrs	r3, r2
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	e7c5      	b.n	8003cc4 <LCD_Display_Dose+0x58>
            dose_int = (int32_t)(mR_dose);  // 반올림한 mR 값
 8003d38:	1c28      	adds	r0, r5, #0
 8003d3a:	f7fd fcd7 	bl	80016ec <__aeabi_f2iz>
            LCD_DigitNumber_Dose_Calculate(dose_int, data);
 8003d3e:	0021      	movs	r1, r4
 8003d40:	b280      	uxth	r0, r0
 8003d42:	f7ff ff66 	bl	8003c12 <LCD_DigitNumber_Dose_Calculate>
            data[0] |= 0x0800000;  // mR/h 표시
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	e7ae      	b.n	8003cac <LCD_Display_Dose+0x40>
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	40240000 	.word	0x40240000
 8003d54:	0000270f 	.word	0x0000270f
 8003d58:	461c4000 	.word	0x461c4000
 8003d5c:	41200000 	.word	0x41200000
 8003d60:	20000a80 	.word	0x20000a80
 8003d64:	f7fffffe 	.word	0xf7fffffe
 8003d68:	42c80000 	.word	0x42c80000
 8003d6c:	47c34f80 	.word	0x47c34f80

08003d70 <LCD_Display_Temp_Number>:
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
	}
}

void LCD_Display_Temp_Number(uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d72:	b095      	sub	sp, #84	@ 0x54
 8003d74:	9001      	str	r0, [sp, #4]
 8003d76:	9202      	str	r2, [sp, #8]
 8003d78:	000f      	movs	r7, r1
	uint32_t Temp_data_tho[4] = {0};
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	a804      	add	r0, sp, #16
	uint32_t Temp_data_hun[4] = {0};
 8003d80:	ac08      	add	r4, sp, #32
{
 8003d82:	9303      	str	r3, [sp, #12]
	uint32_t Temp_data_ten[4] = {0};
 8003d84:	ad0c      	add	r5, sp, #48	@ 0x30
	uint32_t Temp_data_tho[4] = {0};
 8003d86:	f016 f963 	bl	801a050 <memset>
	uint32_t Temp_data_hun[4] = {0};
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	0020      	movs	r0, r4
 8003d90:	f016 f95e 	bl	801a050 <memset>
	uint32_t Temp_data_one[4] = {0};
 8003d94:	ae10      	add	r6, sp, #64	@ 0x40
	uint32_t Temp_data_ten[4] = {0};
 8003d96:	2210      	movs	r2, #16
 8003d98:	2100      	movs	r1, #0
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	f016 f958 	bl	801a050 <memset>
	uint32_t Temp_data_one[4] = {0};
 8003da0:	2210      	movs	r2, #16
 8003da2:	2100      	movs	r1, #0
 8003da4:	0030      	movs	r0, r6
 8003da6:	f016 f953 	bl	801a050 <memset>

	switch (thousands)
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	1e58      	subs	r0, r3, #1
 8003dae:	2808      	cmp	r0, #8
 8003db0:	d84c      	bhi.n	8003e4c <LCD_Display_Temp_Number+0xdc>
 8003db2:	f7fc f9bb 	bl	800012c <__gnu_thumb1_case_uqi>
 8003db6:	1305      	.short	0x1305
 8003db8:	2e27251d 	.word	0x2e27251d
 8003dbc:	3e37      	.short	0x3e37
 8003dbe:	44          	.byte	0x44
 8003dbf:	00          	.byte	0x00
	    		Temp_data_tho[3] = 0x0000000;
	    		break;

	    	case 1:
	    		Temp_data_tho[0] = 0x0000000;
	    		Temp_data_tho[1] = 0x0000100;
 8003dc0:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[3] = 0x0000100;
				break;

			case 4:
				Temp_data_tho[0] = 0x0000000;
				Temp_data_tho[1] = 0x0000180;
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	9305      	str	r3, [sp, #20]
				break;

			case 7:
				Temp_data_tho[0] = 0x0000100;
				Temp_data_tho[1] = 0x0000180;
				Temp_data_tho[2] = 0x0000100;
 8003dc6:	9306      	str	r3, [sp, #24]
				Temp_data_tho[2] = 0x0000180;
				Temp_data_tho[3] = 0x0000100;
				break;
	    }

    switch (hundreds)
 8003dc8:	2f09      	cmp	r7, #9
 8003dca:	d857      	bhi.n	8003e7c <LCD_Display_Temp_Number+0x10c>
 8003dcc:	0038      	movs	r0, r7
 8003dce:	f7fc f9ad 	bl	800012c <__gnu_thumb1_case_uqi>
 8003dd2:	514a      	.short	0x514a
 8003dd4:	72706a60 	.word	0x72706a60
 8003dd8:	8e888279 	.word	0x8e888279
				Temp_data_tho[0] = 0x0000100;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000100;
 8003de2:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000080;
 8003de4:	3b80      	subs	r3, #128	@ 0x80
 8003de6:	9306      	str	r3, [sp, #24]
				Temp_data_tho[3] = 0x0000180;
 8003de8:	3301      	adds	r3, #1
 8003dea:	33ff      	adds	r3, #255	@ 0xff
				Temp_data_tho[3] = 0x0000180;
 8003dec:	9307      	str	r3, [sp, #28]
				break;
 8003dee:	e7eb      	b.n	8003dc8 <LCD_Display_Temp_Number+0x58>
				Temp_data_tho[0] = 0x0000100;
 8003df0:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[2] = 0x0000180;
 8003df2:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000100;
 8003df8:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000180;
 8003dfa:	0052      	lsls	r2, r2, #1
				Temp_data_tho[2] = 0x0000180;
 8003dfc:	9206      	str	r2, [sp, #24]
				Temp_data_tho[3] = 0x0000100;
 8003dfe:	e7f5      	b.n	8003dec <LCD_Display_Temp_Number+0x7c>
				Temp_data_tho[1] = 0x0000180;
 8003e00:	23c0      	movs	r3, #192	@ 0xc0
 8003e02:	e7de      	b.n	8003dc2 <LCD_Display_Temp_Number+0x52>
				Temp_data_tho[0] = 0x0000100;
 8003e04:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000080;
 8003e06:	2280      	movs	r2, #128	@ 0x80
				Temp_data_tho[0] = 0x0000100;
 8003e08:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000080;
 8003e0a:	9205      	str	r2, [sp, #20]
				Temp_data_tho[0] = 0x0000100;
 8003e0c:	9304      	str	r3, [sp, #16]
				Temp_data_tho[2] = 0x0000180;
 8003e0e:	18d2      	adds	r2, r2, r3
 8003e10:	e7f4      	b.n	8003dfc <LCD_Display_Temp_Number+0x8c>
				Temp_data_tho[0] = 0x0000100;
 8003e12:	2380      	movs	r3, #128	@ 0x80
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000080;
 8003e18:	3b80      	subs	r3, #128	@ 0x80
 8003e1a:	9305      	str	r3, [sp, #20]
				Temp_data_tho[2] = 0x0000180;
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	33ff      	adds	r3, #255	@ 0xff
				Temp_data_tho[2] = 0x0000180;
 8003e20:	9306      	str	r3, [sp, #24]
 8003e22:	e7e3      	b.n	8003dec <LCD_Display_Temp_Number+0x7c>
				Temp_data_tho[0] = 0x0000100;
 8003e24:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000180;
 8003e26:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003e28:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000180;
 8003e2a:	0052      	lsls	r2, r2, #1
				Temp_data_tho[0] = 0x0000100;
 8003e2c:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e2e:	9205      	str	r2, [sp, #20]
 8003e30:	e7c9      	b.n	8003dc6 <LCD_Display_Temp_Number+0x56>
				Temp_data_tho[0] = 0x0000100;
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e38:	3380      	adds	r3, #128	@ 0x80
 8003e3a:	9305      	str	r3, [sp, #20]
 8003e3c:	e7f0      	b.n	8003e20 <LCD_Display_Temp_Number+0xb0>
				Temp_data_tho[0] = 0x0000100;
 8003e3e:	2380      	movs	r3, #128	@ 0x80
				Temp_data_tho[1] = 0x0000180;
 8003e40:	22c0      	movs	r2, #192	@ 0xc0
				Temp_data_tho[0] = 0x0000100;
 8003e42:	005b      	lsls	r3, r3, #1
				Temp_data_tho[1] = 0x0000180;
 8003e44:	0052      	lsls	r2, r2, #1
				Temp_data_tho[0] = 0x0000100;
 8003e46:	9304      	str	r3, [sp, #16]
				Temp_data_tho[1] = 0x0000180;
 8003e48:	9205      	str	r2, [sp, #20]
 8003e4a:	e7d7      	b.n	8003dfc <LCD_Display_Temp_Number+0x8c>
    switch (hundreds)
 8003e4c:	2f09      	cmp	r7, #9
 8003e4e:	d815      	bhi.n	8003e7c <LCD_Display_Temp_Number+0x10c>
 8003e50:	0038      	movs	r0, r7
 8003e52:	f7fc f96b 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e56:	0f05      	.short	0x0f05
 8003e58:	302e281e 	.word	0x302e281e
 8003e5c:	4c464037 	.word	0x4c464037
    {
    	case 0:
    		if(thousands == 0)
 8003e60:	9b01      	ldr	r3, [sp, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <LCD_Display_Temp_Number+0x10c>
    			Temp_data_hun[2] = 0x0000000;
    			Temp_data_hun[3] = 0x0000000;
    		}
    		else
    		{
    			Temp_data_hun[0] = 0x0200000;
 8003e66:	2280      	movs	r2, #128	@ 0x80
    			Temp_data_hun[1] = 0x0200200;
 8003e68:	4b6e      	ldr	r3, [pc, #440]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
    			Temp_data_hun[0] = 0x0200000;
 8003e6a:	0392      	lsls	r2, r2, #14
 8003e6c:	9208      	str	r2, [sp, #32]
    			Temp_data_hun[1] = 0x0200200;
 8003e6e:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Temp_data_hun[0] = 0x0200000;
			Temp_data_hun[1] = 0x0200200;
			Temp_data_hun[2] = 0x0200200;
 8003e70:	60a2      	str	r2, [r4, #8]
 8003e72:	e016      	b.n	8003ea2 <LCD_Display_Temp_Number+0x132>
    		Temp_data_hun[1] = 0x0200000;
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	039b      	lsls	r3, r3, #14
			Temp_data_hun[1] = 0x0200200;
 8003e78:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003e7a:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200000;
			break;
    }
    switch (tens)
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	2b09      	cmp	r3, #9
 8003e80:	d847      	bhi.n	8003f12 <LCD_Display_Temp_Number+0x1a2>
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fc f952 	bl	800012c <__gnu_thumb1_case_uqi>
 8003e88:	5b504139 	.word	0x5b504139
 8003e8c:	756b6462 	.word	0x756b6462
 8003e90:	837c      	.short	0x837c
			Temp_data_hun[0] = 0x0200000;
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	039b      	lsls	r3, r3, #14
 8003e96:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200000;
 8003e98:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0000200;
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200200;
 8003ea0:	4b60      	ldr	r3, [pc, #384]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[3] = 0x0200000;
 8003ea2:	60e3      	str	r3, [r4, #12]
			break;
 8003ea4:	e7ea      	b.n	8003e7c <LCD_Display_Temp_Number+0x10c>
			Temp_data_hun[0] = 0x0200000;
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	039b      	lsls	r3, r3, #14
 8003eaa:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200000;
 8003eac:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003eae:	4a5d      	ldr	r2, [pc, #372]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eb0:	e7de      	b.n	8003e70 <LCD_Display_Temp_Number+0x100>
			Temp_data_hun[1] = 0x0200200;
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eb4:	e7e0      	b.n	8003e78 <LCD_Display_Temp_Number+0x108>
			Temp_data_hun[0] = 0x0200000;
 8003eb6:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0000200;
 8003eb8:	2280      	movs	r2, #128	@ 0x80
			Temp_data_hun[0] = 0x0200000;
 8003eba:	039b      	lsls	r3, r3, #14
			Temp_data_hun[1] = 0x0000200;
 8003ebc:	0092      	lsls	r2, r2, #2
			Temp_data_hun[0] = 0x0200000;
 8003ebe:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0000200;
 8003ec0:	6062      	str	r2, [r4, #4]
 8003ec2:	e7f4      	b.n	8003eae <LCD_Display_Temp_Number+0x13e>
			Temp_data_hun[0] = 0x0200000;
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	039b      	lsls	r3, r3, #14
 8003ec8:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0000200;
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	6063      	str	r3, [r4, #4]
			Temp_data_hun[2] = 0x0200200;
 8003ed0:	4b54      	ldr	r3, [pc, #336]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[2] = 0x0200200;
 8003ed2:	60a3      	str	r3, [r4, #8]
			Temp_data_hun[3] = 0x0200200;
 8003ed4:	e7e5      	b.n	8003ea2 <LCD_Display_Temp_Number+0x132>
			Temp_data_hun[0] = 0x0200000;
 8003ed6:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0200200;
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[0] = 0x0200000;
 8003eda:	039b      	lsls	r3, r3, #14
 8003edc:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ede:	6062      	str	r2, [r4, #4]
			Temp_data_hun[2] = 0x0200000;
 8003ee0:	e7cb      	b.n	8003e7a <LCD_Display_Temp_Number+0x10a>
			Temp_data_hun[0] = 0x0200000;
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	039b      	lsls	r3, r3, #14
 8003ee6:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
 8003eea:	6063      	str	r3, [r4, #4]
 8003eec:	e7f1      	b.n	8003ed2 <LCD_Display_Temp_Number+0x162>
			Temp_data_hun[0] = 0x0200000;
 8003eee:	2380      	movs	r3, #128	@ 0x80
			Temp_data_hun[1] = 0x0200200;
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <LCD_Display_Temp_Number+0x2b4>)
			Temp_data_hun[0] = 0x0200000;
 8003ef2:	039b      	lsls	r3, r3, #14
 8003ef4:	9308      	str	r3, [sp, #32]
			Temp_data_hun[1] = 0x0200200;
 8003ef6:	6062      	str	r2, [r4, #4]
 8003ef8:	e7ba      	b.n	8003e70 <LCD_Display_Temp_Number+0x100>
    {
    	case 0:
        	Temp_data_ten[0] = 0x0080000;
 8003efa:	2280      	movs	r2, #128	@ 0x80
        	Temp_data_ten[1] = 0x0090000;
 8003efc:	2390      	movs	r3, #144	@ 0x90
        	Temp_data_ten[0] = 0x0080000;
 8003efe:	0312      	lsls	r2, r2, #12
        	Temp_data_ten[1] = 0x0090000;
 8003f00:	031b      	lsls	r3, r3, #12
        	Temp_data_ten[0] = 0x0080000;
 8003f02:	920c      	str	r2, [sp, #48]	@ 0x30
        	Temp_data_ten[1] = 0x0090000;
 8003f04:	606b      	str	r3, [r5, #4]
			break;

		case 9:
			Temp_data_ten[0] = 0x0080000;
			Temp_data_ten[1] = 0x0090000;
			Temp_data_ten[2] = 0x0090000;
 8003f06:	60aa      	str	r2, [r5, #8]
 8003f08:	e017      	b.n	8003f3a <LCD_Display_Temp_Number+0x1ca>
    		Temp_data_ten[1] = 0x0080000;
 8003f0a:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0080000;
 8003f10:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d84a      	bhi.n	8003fae <LCD_Display_Temp_Number+0x23e>
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fc f907 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f1e:	453f      	.short	0x453f
 8003f20:	67656058 	.word	0x67656058
 8003f24:	7e79736c 	.word	0x7e79736c
			Temp_data_ten[0] = 0x0080000;
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	031b      	lsls	r3, r3, #12
 8003f2c:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0080000;
 8003f2e:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0010000;
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0090000;
 8003f36:	2390      	movs	r3, #144	@ 0x90
 8003f38:	031b      	lsls	r3, r3, #12
			Temp_data_ten[3] = 0x0080000;
 8003f3a:	60eb      	str	r3, [r5, #12]
			break;
 8003f3c:	e7e9      	b.n	8003f12 <LCD_Display_Temp_Number+0x1a2>
			Temp_data_ten[0] = 0x0080000;
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0080000;
 8003f44:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0090000;
 8003f46:	2290      	movs	r2, #144	@ 0x90
 8003f48:	0312      	lsls	r2, r2, #12
 8003f4a:	e7dc      	b.n	8003f06 <LCD_Display_Temp_Number+0x196>
			Temp_data_ten[1] = 0x0090000;
 8003f4c:	2390      	movs	r3, #144	@ 0x90
 8003f4e:	e7dd      	b.n	8003f0c <LCD_Display_Temp_Number+0x19c>
			Temp_data_ten[0] = 0x0080000;
 8003f50:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0010000;
 8003f52:	2280      	movs	r2, #128	@ 0x80
			Temp_data_ten[0] = 0x0080000;
 8003f54:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0010000;
 8003f56:	0252      	lsls	r2, r2, #9
			Temp_data_ten[0] = 0x0080000;
 8003f58:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0010000;
 8003f5a:	606a      	str	r2, [r5, #4]
 8003f5c:	e7f3      	b.n	8003f46 <LCD_Display_Temp_Number+0x1d6>
			Temp_data_ten[0] = 0x0080000;
 8003f5e:	2380      	movs	r3, #128	@ 0x80
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0010000;
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	025b      	lsls	r3, r3, #9
 8003f68:	606b      	str	r3, [r5, #4]
			Temp_data_ten[2] = 0x0090000;
 8003f6a:	2390      	movs	r3, #144	@ 0x90
 8003f6c:	031b      	lsls	r3, r3, #12
			Temp_data_ten[2] = 0x0090000;
 8003f6e:	60ab      	str	r3, [r5, #8]
			Temp_data_ten[3] = 0x0090000;
 8003f70:	e7e3      	b.n	8003f3a <LCD_Display_Temp_Number+0x1ca>
			Temp_data_ten[0] = 0x0080000;
 8003f72:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f74:	2290      	movs	r2, #144	@ 0x90
			Temp_data_ten[0] = 0x0080000;
 8003f76:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0090000;
 8003f78:	0312      	lsls	r2, r2, #12
			Temp_data_ten[0] = 0x0080000;
 8003f7a:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f7c:	606a      	str	r2, [r5, #4]
 8003f7e:	e7c7      	b.n	8003f10 <LCD_Display_Temp_Number+0x1a0>
			Temp_data_ten[0] = 0x0080000;
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f86:	2390      	movs	r3, #144	@ 0x90
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	606b      	str	r3, [r5, #4]
 8003f8c:	e7ef      	b.n	8003f6e <LCD_Display_Temp_Number+0x1fe>
			Temp_data_ten[0] = 0x0080000;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
			Temp_data_ten[1] = 0x0090000;
 8003f90:	2290      	movs	r2, #144	@ 0x90
			Temp_data_ten[0] = 0x0080000;
 8003f92:	031b      	lsls	r3, r3, #12
			Temp_data_ten[1] = 0x0090000;
 8003f94:	0312      	lsls	r2, r2, #12
			Temp_data_ten[0] = 0x0080000;
 8003f96:	930c      	str	r3, [sp, #48]	@ 0x30
			Temp_data_ten[1] = 0x0090000;
 8003f98:	606a      	str	r2, [r5, #4]
 8003f9a:	e7b4      	b.n	8003f06 <LCD_Display_Temp_Number+0x196>
    {
    	case 0:
        	Temp_data_one[0] = 0x0000002;
 8003f9c:	2202      	movs	r2, #2
        	Temp_data_one[1] = 0x0000003;
 8003f9e:	2303      	movs	r3, #3
        	Temp_data_one[0] = 0x0000002;
 8003fa0:	9210      	str	r2, [sp, #64]	@ 0x40
        	Temp_data_one[1] = 0x0000003;
 8003fa2:	6073      	str	r3, [r6, #4]
			break;

		case 9:
			Temp_data_one[0] = 0x0000002;
			Temp_data_one[1] = 0x0000003;
			Temp_data_one[2] = 0x0000003;
 8003fa4:	60b2      	str	r2, [r6, #8]
 8003fa6:	e018      	b.n	8003fda <LCD_Display_Temp_Number+0x26a>
    		Temp_data_one[1] = 0x0000002;
 8003fa8:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 8003faa:	9311      	str	r3, [sp, #68]	@ 0x44
			Temp_data_one[2] = 0x0000003;
 8003fac:	9312      	str	r3, [sp, #72]	@ 0x48
{
 8003fae:	2300      	movs	r3, #0
			Temp_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Temp_data_tho[i] | Temp_data_hun[i] | Temp_data_ten[i] | Temp_data_one[i];
 8003fb0:	aa04      	add	r2, sp, #16
 8003fb2:	58e1      	ldr	r1, [r4, r3]
 8003fb4:	58d2      	ldr	r2, [r2, r3]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	58e9      	ldr	r1, [r5, r3]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	58f1      	ldr	r1, [r6, r3]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003fc2:	50ca      	str	r2, [r1, r3]
    for(int i = 0; i<4; i++)
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d1f2      	bne.n	8003fb0 <LCD_Display_Temp_Number+0x240>
    }
}
 8003fca:	b015      	add	sp, #84	@ 0x54
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Temp_data_one[0] = 0x0000002;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000002;
 8003fd2:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000001;
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60b3      	str	r3, [r6, #8]
			Temp_data_one[3] = 0x0000003;
 8003fd8:	3302      	adds	r3, #2
			Temp_data_one[3] = 0x0000002;
 8003fda:	60f3      	str	r3, [r6, #12]
    for(int i = 0; i<4; i++)
 8003fdc:	e7e7      	b.n	8003fae <LCD_Display_Temp_Number+0x23e>
			Temp_data_one[0] = 0x0000002;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000002;
 8003fe2:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	e7dd      	b.n	8003fa4 <LCD_Display_Temp_Number+0x234>
			Temp_data_one[1] = 0x0000003;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e7de      	b.n	8003faa <LCD_Display_Temp_Number+0x23a>
			Temp_data_one[0] = 0x0000002;
 8003fec:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000001;
 8003fee:	2201      	movs	r2, #1
			Temp_data_one[0] = 0x0000002;
 8003ff0:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000001;
 8003ff2:	6072      	str	r2, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003ff4:	e7f6      	b.n	8003fe4 <LCD_Display_Temp_Number+0x274>
			Temp_data_one[0] = 0x0000002;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000001;
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6073      	str	r3, [r6, #4]
			Temp_data_one[2] = 0x0000003;
 8003ffe:	3302      	adds	r3, #2
			Temp_data_one[2] = 0x0000003;
 8004000:	60b3      	str	r3, [r6, #8]
			Temp_data_one[3] = 0x0000003;
 8004002:	e7ea      	b.n	8003fda <LCD_Display_Temp_Number+0x26a>
			Temp_data_one[0] = 0x0000002;
 8004004:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 8004006:	2203      	movs	r2, #3
			Temp_data_one[0] = 0x0000002;
 8004008:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 800400a:	6072      	str	r2, [r6, #4]
			Temp_data_one[2] = 0x0000002;
 800400c:	60b3      	str	r3, [r6, #8]
    for(int i = 0; i<4; i++)
 800400e:	e7ce      	b.n	8003fae <LCD_Display_Temp_Number+0x23e>
			Temp_data_one[0] = 0x0000002;
 8004010:	2302      	movs	r3, #2
 8004012:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 8004014:	3301      	adds	r3, #1
 8004016:	6073      	str	r3, [r6, #4]
 8004018:	e7f2      	b.n	8004000 <LCD_Display_Temp_Number+0x290>
			Temp_data_one[0] = 0x0000002;
 800401a:	2302      	movs	r3, #2
			Temp_data_one[1] = 0x0000003;
 800401c:	2203      	movs	r2, #3
			Temp_data_one[0] = 0x0000002;
 800401e:	9310      	str	r3, [sp, #64]	@ 0x40
			Temp_data_one[1] = 0x0000003;
 8004020:	6072      	str	r2, [r6, #4]
 8004022:	e7bf      	b.n	8003fa4 <LCD_Display_Temp_Number+0x234>
 8004024:	00200200 	.word	0x00200200

08004028 <LCD_DigitNumber_Temp_Calculate>:
{
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	0004      	movs	r4, r0
 800402c:	000d      	movs	r5, r1
 800402e:	b087      	sub	sp, #28
	if(number < 0)
 8004030:	2800      	cmp	r0, #0
 8004032:	da34      	bge.n	800409e <LCD_DigitNumber_Temp_Calculate+0x76>
		A = -number;
 8004034:	4246      	negs	r6, r0
 8004036:	b236      	sxth	r6, r6
	A %= 1000;
 8004038:	21fa      	movs	r1, #250	@ 0xfa
 800403a:	0030      	movs	r0, r6
 800403c:	0089      	lsls	r1, r1, #2
 800403e:	f7fc fa03 	bl	8000448 <__aeabi_idivmod>
 8004042:	b20b      	sxth	r3, r1
    A %= 100;
 8004044:	0018      	movs	r0, r3
 8004046:	2164      	movs	r1, #100	@ 0x64
	A %= 1000;
 8004048:	9303      	str	r3, [sp, #12]
    A %= 100;
 800404a:	f7fc f9fd 	bl	8000448 <__aeabi_idivmod>
 800404e:	b20f      	sxth	r7, r1
    ones      = A % 10;
 8004050:	0038      	movs	r0, r7
 8004052:	210a      	movs	r1, #10
 8004054:	f7fc f9f8 	bl	8000448 <__aeabi_idivmod>
    tens      = A / 10;
 8004058:	0038      	movs	r0, r7
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800405a:	b2cb      	uxtb	r3, r1
    tens      = A / 10;
 800405c:	210a      	movs	r1, #10
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800405e:	9304      	str	r3, [sp, #16]
    tens      = A / 10;
 8004060:	f7fc f90c 	bl	800027c <__divsi3>
    hundreds  = A / 100;
 8004064:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 8004066:	b2c3      	uxtb	r3, r0
    hundreds  = A / 100;
 8004068:	9803      	ldr	r0, [sp, #12]
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800406a:	9305      	str	r3, [sp, #20]
    hundreds  = A / 100;
 800406c:	f7fc f906 	bl	800027c <__divsi3>
	thousands = A /1000;
 8004070:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 8004072:	b2c7      	uxtb	r7, r0
	thousands = A /1000;
 8004074:	0089      	lsls	r1, r1, #2
 8004076:	0030      	movs	r0, r6
 8004078:	f7fc f900 	bl	800027c <__divsi3>
    LCD_Display_Temp_Number(thousands, hundreds, tens, ones, data);
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	0039      	movs	r1, r7
 8004080:	9a05      	ldr	r2, [sp, #20]
 8004082:	b2c0      	uxtb	r0, r0
 8004084:	9500      	str	r5, [sp, #0]
 8004086:	f7ff fe73 	bl	8003d70 <LCD_Display_Temp_Number>
	if(number < 0 && number > -100)
 800408a:	0023      	movs	r3, r4
 800408c:	3363      	adds	r3, #99	@ 0x63
 800408e:	d308      	bcc.n	80040a2 <LCD_DigitNumber_Temp_Calculate+0x7a>
		data[2] = data[2] | 0x0000200;  //-부호 on, 8번세그먼트에 표시
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	68aa      	ldr	r2, [r5, #8]
 8004094:	009b      	lsls	r3, r3, #2
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
 8004096:	4313      	orrs	r3, r2
 8004098:	60ab      	str	r3, [r5, #8]
}
 800409a:	b007      	add	sp, #28
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		A = number;
 800409e:	b206      	sxth	r6, r0
 80040a0:	e7ca      	b.n	8004038 <LCD_DigitNumber_Temp_Calculate+0x10>
	else if(number < -99 && number > -1000)
 80040a2:	22e1      	movs	r2, #225	@ 0xe1
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <LCD_DigitNumber_Temp_Calculate+0x9c>)
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	18e3      	adds	r3, r4, r3
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d202      	bcs.n	80040b4 <LCD_DigitNumber_Temp_Calculate+0x8c>
		data[2] = data[2] | 0x0000080;  //-부호 on, 7번세그먼트에 표시
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	68aa      	ldr	r2, [r5, #8]
 80040b2:	e7f0      	b.n	8004096 <LCD_DigitNumber_Temp_Calculate+0x6e>
	else if(number < -999 && number > -10000)
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <LCD_DigitNumber_Temp_Calculate+0xa0>)
 80040b6:	18e4      	adds	r4, r4, r3
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <LCD_DigitNumber_Temp_Calculate+0xa4>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d8ed      	bhi.n	800409a <LCD_DigitNumber_Temp_Calculate+0x72>
		data[2] = data[2] | 0x0000004;  //-부호 on, 6번세그먼트에 표시
 80040be:	2304      	movs	r3, #4
 80040c0:	68aa      	ldr	r2, [r5, #8]
 80040c2:	e7e8      	b.n	8004096 <LCD_DigitNumber_Temp_Calculate+0x6e>
 80040c4:	000003e7 	.word	0x000003e7
 80040c8:	0000270f 	.word	0x0000270f
 80040cc:	00002327 	.word	0x00002327

080040d0 <LCD_Display_Temp>:
{
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 80040d4:	4e21      	ldr	r6, [pc, #132]	@ (800415c <LCD_Display_Temp+0x8c>)
{
 80040d6:	1c05      	adds	r5, r0, #0
	HAL_LCD_Clear(&hlcd);
 80040d8:	0030      	movs	r0, r6
{
 80040da:	0017      	movs	r7, r2
	HAL_LCD_Clear(&hlcd);
 80040dc:	f00b f9a3 	bl	800f426 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 80040e0:	2204      	movs	r2, #4
 80040e2:	2100      	movs	r1, #0
 80040e4:	0020      	movs	r0, r4
 80040e6:	f015 ffb3 	bl	801a050 <memset>
    if(Packet_temp_unit == 0x01) // F, C unit
 80040ea:	2f01      	cmp	r7, #1
 80040ec:	d10b      	bne.n	8004106 <LCD_Display_Temp+0x36>
    	Temp = (Temp * 9.0f / 5.0f) + 32.0f;
 80040ee:	491c      	ldr	r1, [pc, #112]	@ (8004160 <LCD_Display_Temp+0x90>)
 80040f0:	1c28      	adds	r0, r5, #0
 80040f2:	f7fc ff27 	bl	8000f44 <__aeabi_fmul>
 80040f6:	491b      	ldr	r1, [pc, #108]	@ (8004164 <LCD_Display_Temp+0x94>)
 80040f8:	f7fc fd56 	bl	8000ba8 <__aeabi_fdiv>
 80040fc:	2184      	movs	r1, #132	@ 0x84
 80040fe:	05c9      	lsls	r1, r1, #23
 8004100:	f7fc fb60 	bl	80007c4 <__aeabi_fadd>
 8004104:	1c05      	adds	r5, r0, #0
    temp_int = (int32_t)(Temp * 10.0f);
 8004106:	4918      	ldr	r1, [pc, #96]	@ (8004168 <LCD_Display_Temp+0x98>)
 8004108:	1c28      	adds	r0, r5, #0
 800410a:	f7fc ff1b 	bl	8000f44 <__aeabi_fmul>
 800410e:	f7fd faed 	bl	80016ec <__aeabi_f2iz>
    LCD_DigitNumber_Temp_Calculate(temp_int, data);
 8004112:	0021      	movs	r1, r4
 8004114:	f7ff ff88 	bl	8004028 <LCD_DigitNumber_Temp_Calculate>
        data[0] = data[0] | 0x0000004;   // F on
 8004118:	2304      	movs	r3, #4
 800411a:	6822      	ldr	r2, [r4, #0]
    if(Packet_temp_unit == 0x01)
 800411c:	2f01      	cmp	r7, #1
 800411e:	d001      	beq.n	8004124 <LCD_Display_Temp+0x54>
        data[0] = data[0] | 0x0000200;   // C on
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	431a      	orrs	r2, r3
    data[0] = data[0] | 0x0000001; // 소수점표시
 8004126:	2301      	movs	r3, #1
 8004128:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800412a:	0030      	movs	r0, r6
    data[0] = data[0] | 0x0000001; // 소수점표시
 800412c:	6023      	str	r3, [r4, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800412e:	2100      	movs	r1, #0
 8004130:	4a0e      	ldr	r2, [pc, #56]	@ (800416c <LCD_Display_Temp+0x9c>)
 8004132:	f00b f917 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004136:	0030      	movs	r0, r6
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	2102      	movs	r1, #2
 800413c:	4a0b      	ldr	r2, [pc, #44]	@ (800416c <LCD_Display_Temp+0x9c>)
 800413e:	f00b f911 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004142:	0030      	movs	r0, r6
 8004144:	68a3      	ldr	r3, [r4, #8]
 8004146:	2104      	movs	r1, #4
 8004148:	4a08      	ldr	r2, [pc, #32]	@ (800416c <LCD_Display_Temp+0x9c>)
 800414a:	f00b f90b 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800414e:	0030      	movs	r0, r6
 8004150:	2106      	movs	r1, #6
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	4a05      	ldr	r2, [pc, #20]	@ (800416c <LCD_Display_Temp+0x9c>)
 8004156:	f00b f905 	bl	800f364 <HAL_LCD_Write>
}
 800415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415c:	20000a80 	.word	0x20000a80
 8004160:	41100000 	.word	0x41100000
 8004164:	40a00000 	.word	0x40a00000
 8004168:	41200000 	.word	0x41200000
 800416c:	f7fffffe 	.word	0xf7fffffe

08004170 <LCD_Display_Temp_MinMax>:
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 8004174:	4d22      	ldr	r5, [pc, #136]	@ (8004200 <LCD_Display_Temp_MinMax+0x90>)
{
 8004176:	1c07      	adds	r7, r0, #0
	HAL_LCD_Clear(&hlcd);
 8004178:	0028      	movs	r0, r5
{
 800417a:	0016      	movs	r6, r2
	HAL_LCD_Clear(&hlcd);
 800417c:	f00b f953 	bl	800f426 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 8004180:	2100      	movs	r1, #0
 8004182:	2204      	movs	r2, #4
 8004184:	0020      	movs	r0, r4
 8004186:	f015 ff63 	bl	801a050 <memset>
    float temp_float = Temp / 10.0f;
 800418a:	491e      	ldr	r1, [pc, #120]	@ (8004204 <LCD_Display_Temp_MinMax+0x94>)
 800418c:	1c38      	adds	r0, r7, #0
 800418e:	f7fc fd0b 	bl	8000ba8 <__aeabi_fdiv>
    if(Packet_temp_unit == 0x01) // F, C unit
 8004192:	2e01      	cmp	r6, #1
 8004194:	d109      	bne.n	80041aa <LCD_Display_Temp_MinMax+0x3a>
    	temp_float = (temp_float * 9.0f / 5.0f) + 32.0f;
 8004196:	491c      	ldr	r1, [pc, #112]	@ (8004208 <LCD_Display_Temp_MinMax+0x98>)
 8004198:	f7fc fed4 	bl	8000f44 <__aeabi_fmul>
 800419c:	491b      	ldr	r1, [pc, #108]	@ (800420c <LCD_Display_Temp_MinMax+0x9c>)
 800419e:	f7fc fd03 	bl	8000ba8 <__aeabi_fdiv>
 80041a2:	2184      	movs	r1, #132	@ 0x84
 80041a4:	05c9      	lsls	r1, r1, #23
 80041a6:	f7fc fb0d 	bl	80007c4 <__aeabi_fadd>
    temp_int = (int32_t)(temp_float * 10.0f);
 80041aa:	4916      	ldr	r1, [pc, #88]	@ (8004204 <LCD_Display_Temp_MinMax+0x94>)
 80041ac:	f7fc feca 	bl	8000f44 <__aeabi_fmul>
 80041b0:	f7fd fa9c 	bl	80016ec <__aeabi_f2iz>
    LCD_DigitNumber_Temp_Calculate(temp_int, data);
 80041b4:	0021      	movs	r1, r4
 80041b6:	f7ff ff37 	bl	8004028 <LCD_DigitNumber_Temp_Calculate>
        data[0] = data[0] | 0x0000004;   // F on
 80041ba:	2304      	movs	r3, #4
 80041bc:	6822      	ldr	r2, [r4, #0]
    if(Packet_temp_unit == 0x01)
 80041be:	2e01      	cmp	r6, #1
 80041c0:	d001      	beq.n	80041c6 <LCD_Display_Temp_MinMax+0x56>
        data[0] = data[0] | 0x0000200;   // C on
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	431a      	orrs	r2, r3
    data[0] = data[0] | 0x0000001; // 소수점표시
 80041c8:	2301      	movs	r3, #1
 80041ca:	4313      	orrs	r3, r2
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80041cc:	0028      	movs	r0, r5
    data[0] = data[0] | 0x0000001; // 소수점표시
 80041ce:	6023      	str	r3, [r4, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80041d0:	2100      	movs	r1, #0
 80041d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041d4:	f00b f8c6 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80041d8:	0028      	movs	r0, r5
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	2102      	movs	r1, #2
 80041de:	4a0c      	ldr	r2, [pc, #48]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041e0:	f00b f8c0 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80041e4:	0028      	movs	r0, r5
 80041e6:	68a3      	ldr	r3, [r4, #8]
 80041e8:	2104      	movs	r1, #4
 80041ea:	4a09      	ldr	r2, [pc, #36]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041ec:	f00b f8ba 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80041f0:	0028      	movs	r0, r5
 80041f2:	2106      	movs	r1, #6
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	4a06      	ldr	r2, [pc, #24]	@ (8004210 <LCD_Display_Temp_MinMax+0xa0>)
 80041f8:	f00b f8b4 	bl	800f364 <HAL_LCD_Write>
}
 80041fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	20000a80 	.word	0x20000a80
 8004204:	41200000 	.word	0x41200000
 8004208:	41100000 	.word	0x41100000
 800420c:	40a00000 	.word	0x40a00000
 8004210:	f7fffffe 	.word	0xf7fffffe

08004214 <LCD_Display_Year_Hour_Number>:
    ones      = number % 10;
    LCD_Display_Day_Sec_Number(tens, ones, data);
}

void LCD_Display_Year_Hour_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	0005      	movs	r5, r0
 800421a:	000f      	movs	r7, r1
 800421c:	0016      	movs	r6, r2
	uint32_t Year_Hour_data_ten[4] = {0};
 800421e:	2100      	movs	r1, #0
 8004220:	2210      	movs	r2, #16
 8004222:	4668      	mov	r0, sp
	uint32_t Year_Hour_data_one[4] = {0};
 8004224:	ac04      	add	r4, sp, #16
	uint32_t Year_Hour_data_ten[4] = {0};
 8004226:	f015 ff13 	bl	801a050 <memset>
	uint32_t Year_Hour_data_one[4] = {0};
 800422a:	2210      	movs	r2, #16
 800422c:	2100      	movs	r1, #0
 800422e:	0020      	movs	r0, r4
 8004230:	f015 ff0e 	bl	801a050 <memset>

    switch (tens)
 8004234:	2d09      	cmp	r5, #9
 8004236:	d844      	bhi.n	80042c2 <LCD_Display_Year_Hour_Number+0xae>
 8004238:	0028      	movs	r0, r5
 800423a:	4d5e      	ldr	r5, [pc, #376]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 800423c:	f7fb ff76 	bl	800012c <__gnu_thumb1_case_uqi>
 8004240:	210a3305 	.word	0x210a3305
 8004244:	605b4b2f 	.word	0x605b4b2f
 8004248:	6e6a      	.short	0x6e6a
    {
    	case 0:
        	Year_Hour_data_ten[0] = 0x0000000;
        	Year_Hour_data_ten[1] = 0x0000008;
 800424a:	2308      	movs	r3, #8
 800424c:	9301      	str	r3, [sp, #4]

		case 8:
			Year_Hour_data_ten[0] = 0x0000000;
			Year_Hour_data_ten[1] = 0x0000008;
			Year_Hour_data_ten[2] = 0x0000008;
			Year_Hour_data_ten[3] = 0x0000008;
 800424e:	9303      	str	r3, [sp, #12]
		case 9:
			Year_Hour_data_ten[0] = 0x0000000;
			Year_Hour_data_ten[1] = 0x0000008;
			Year_Hour_data_ten[2] = 0x0000008;
			Year_Hour_data_ten[3] = 0x0000000;
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004250:	4d58      	ldr	r5, [pc, #352]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 8004252:	e018      	b.n	8004286 <LCD_Display_Year_Hour_Number+0x72>
			Year_Hour_data_ten[2] = 0x0000008;
 8004254:	2308      	movs	r3, #8
 8004256:	9302      	str	r3, [sp, #8]
			Year_Hour_data_ten[3] = 0x0000008;
 8004258:	9303      	str	r3, [sp, #12]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	4d55      	ldr	r5, [pc, #340]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	001a      	movs	r2, r3
 8004262:	2101      	movs	r1, #1
 8004264:	0028      	movs	r0, r5
 8004266:	f00b f87d 	bl	800f364 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	015b      	lsls	r3, r3, #5
 800426e:	001a      	movs	r2, r3
 8004270:	2103      	movs	r1, #3
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 8004272:	0028      	movs	r0, r5
 8004274:	f00b f876 	bl	800f364 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	015b      	lsls	r3, r3, #5
 800427c:	001a      	movs	r2, r3
 800427e:	2107      	movs	r1, #7
 8004280:	e01c      	b.n	80042bc <LCD_Display_Year_Hour_Number+0xa8>
			Year_Hour_data_ten[2] = 0x0000008;
 8004282:	2308      	movs	r3, #8
 8004284:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	015b      	lsls	r3, r3, #5
 800428a:	001a      	movs	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	0028      	movs	r0, r5
 8004290:	f00b f868 	bl	800f364 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	015b      	lsls	r3, r3, #5
 8004298:	001a      	movs	r2, r3
 800429a:	2103      	movs	r1, #3
 800429c:	e023      	b.n	80042e6 <LCD_Display_Year_Hour_Number+0xd2>
			Year_Hour_data_ten[1] = 0x0000008;
 800429e:	2308      	movs	r3, #8
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042a0:	4d44      	ldr	r5, [pc, #272]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
			Year_Hour_data_ten[1] = 0x0000008;
 80042a2:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042a4:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	001a      	movs	r2, r3
 80042ac:	2103      	movs	r1, #3
 80042ae:	0028      	movs	r0, r5
 80042b0:	f00b f858 	bl	800f364 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	001a      	movs	r2, r3
 80042ba:	2105      	movs	r1, #5
        	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 80042bc:	0028      	movs	r0, r5
 80042be:	f00b f851 	bl	800f364 <HAL_LCD_Write>
			break;
    }
    switch (ones)
 80042c2:	2f09      	cmp	r7, #9
 80042c4:	d839      	bhi.n	800433a <LCD_Display_Year_Hour_Number+0x126>
 80042c6:	0038      	movs	r0, r7
 80042c8:	f7fb ff30 	bl	800012c <__gnu_thumb1_case_uqi>
 80042cc:	4b42332c 	.word	0x4b42332c
 80042d0:	61595351 	.word	0x61595351
 80042d4:	6d67      	.short	0x6d67
			Year_Hour_data_ten[1] = 0x0000008;
 80042d6:	2308      	movs	r3, #8
 80042d8:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042da:	9302      	str	r3, [sp, #8]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	015b      	lsls	r3, r3, #5
 80042e0:	001a      	movs	r2, r3
 80042e2:	2101      	movs	r1, #1
 80042e4:	4d33      	ldr	r5, [pc, #204]	@ (80043b4 <LCD_Display_Year_Hour_Number+0x1a0>)
        	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 80042e6:	0028      	movs	r0, r5
 80042e8:	f00b f83c 	bl	800f364 <HAL_LCD_Write>
        	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	001a      	movs	r2, r3
 80042f2:	2105      	movs	r1, #5
 80042f4:	e7bd      	b.n	8004272 <LCD_Display_Year_Hour_Number+0x5e>
			Year_Hour_data_ten[1] = 0x0000008;
 80042f6:	2308      	movs	r3, #8
 80042f8:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 80042fa:	9302      	str	r3, [sp, #8]
			Year_Hour_data_ten[3] = 0x0000008;
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	e7ed      	b.n	80042dc <LCD_Display_Year_Hour_Number+0xc8>
			Year_Hour_data_ten[1] = 0x0000008;
 8004300:	2308      	movs	r3, #8
 8004302:	9301      	str	r3, [sp, #4]
        	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	001a      	movs	r2, r3
 800430a:	2101      	movs	r1, #1
 800430c:	0028      	movs	r0, r5
 800430e:	f00b f829 	bl	800f364 <HAL_LCD_Write>
 8004312:	e7c8      	b.n	80042a6 <LCD_Display_Year_Hour_Number+0x92>
			Year_Hour_data_ten[1] = 0x0000008;
 8004314:	2308      	movs	r3, #8
 8004316:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 8004318:	9302      	str	r3, [sp, #8]
 800431a:	e798      	b.n	800424e <LCD_Display_Year_Hour_Number+0x3a>
			Year_Hour_data_ten[1] = 0x0000008;
 800431c:	2308      	movs	r3, #8
 800431e:	9301      	str	r3, [sp, #4]
			Year_Hour_data_ten[2] = 0x0000008;
 8004320:	9302      	str	r3, [sp, #8]
 8004322:	e795      	b.n	8004250 <LCD_Display_Year_Hour_Number+0x3c>
    {
    	case 0:
        	Year_Hour_data_one[0] = 0x0020000;
 8004324:	2280      	movs	r2, #128	@ 0x80
        	Year_Hour_data_one[1] = 0x0020004;
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
        	Year_Hour_data_one[0] = 0x0020000;
 8004328:	0292      	lsls	r2, r2, #10
 800432a:	9204      	str	r2, [sp, #16]
        	Year_Hour_data_one[1] = 0x0020004;
 800432c:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Year_Hour_data_one[0] = 0x0020000;
			Year_Hour_data_one[1] = 0x0020004;
			Year_Hour_data_one[2] = 0x0020004;
 800432e:	60a2      	str	r2, [r4, #8]
 8004330:	e015      	b.n	800435e <LCD_Display_Year_Hour_Number+0x14a>
    		Year_Hour_data_one[1] = 0x0020000;
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	029b      	lsls	r3, r3, #10
			Year_Hour_data_one[1] = 0x0020004;
 8004336:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 8004338:	60a3      	str	r3, [r4, #8]
{
 800433a:	2300      	movs	r3, #0
			Year_Hour_data_one[3] = 0x0020000;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Year_Hour_data_ten[i] | Year_Hour_data_one[i];
 800433c:	466a      	mov	r2, sp
 800433e:	58e1      	ldr	r1, [r4, r3]
 8004340:	58d2      	ldr	r2, [r2, r3]
 8004342:	430a      	orrs	r2, r1
 8004344:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 8004346:	3304      	adds	r3, #4
 8004348:	2b10      	cmp	r3, #16
 800434a:	d1f7      	bne.n	800433c <LCD_Display_Year_Hour_Number+0x128>
    }
}
 800434c:	b009      	add	sp, #36	@ 0x24
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Year_Hour_data_one[0] = 0x0020000;
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020000;
 8004356:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0000004;
 8004358:	2304      	movs	r3, #4
 800435a:	60a3      	str	r3, [r4, #8]
			Year_Hour_data_one[3] = 0x0020004;
 800435c:	4b16      	ldr	r3, [pc, #88]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[3] = 0x0020000;
 800435e:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 8004360:	e7eb      	b.n	800433a <LCD_Display_Year_Hour_Number+0x126>
			Year_Hour_data_one[0] = 0x0020000;
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020000;
 8004368:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 800436c:	e7df      	b.n	800432e <LCD_Display_Year_Hour_Number+0x11a>
			Year_Hour_data_one[1] = 0x0020004;
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 8004370:	e7e1      	b.n	8004336 <LCD_Display_Year_Hour_Number+0x122>
			Year_Hour_data_one[0] = 0x0020000;
 8004372:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0000004;
 8004374:	2204      	movs	r2, #4
			Year_Hour_data_one[0] = 0x0020000;
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0000004;
 800437a:	6062      	str	r2, [r4, #4]
 800437c:	e7f5      	b.n	800436a <LCD_Display_Year_Hour_Number+0x156>
			Year_Hour_data_one[0] = 0x0020000;
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0000004;
 8004384:	2304      	movs	r3, #4
 8004386:	6063      	str	r3, [r4, #4]
			Year_Hour_data_one[2] = 0x0020004;
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[2] = 0x0020004;
 800438a:	60a3      	str	r3, [r4, #8]
			Year_Hour_data_one[3] = 0x0020004;
 800438c:	e7e7      	b.n	800435e <LCD_Display_Year_Hour_Number+0x14a>
			Year_Hour_data_one[0] = 0x0020000;
 800438e:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0020004;
 8004390:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[0] = 0x0020000;
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 8004396:	6062      	str	r2, [r4, #4]
			Year_Hour_data_one[2] = 0x0020000;
 8004398:	e7ce      	b.n	8004338 <LCD_Display_Year_Hour_Number+0x124>
			Year_Hour_data_one[0] = 0x0020000;
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	e7f1      	b.n	800438a <LCD_Display_Year_Hour_Number+0x176>
			Year_Hour_data_one[0] = 0x0020000;
 80043a6:	2380      	movs	r3, #128	@ 0x80
			Year_Hour_data_one[1] = 0x0020004;
 80043a8:	4a03      	ldr	r2, [pc, #12]	@ (80043b8 <LCD_Display_Year_Hour_Number+0x1a4>)
			Year_Hour_data_one[0] = 0x0020000;
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	9304      	str	r3, [sp, #16]
			Year_Hour_data_one[1] = 0x0020004;
 80043ae:	6062      	str	r2, [r4, #4]
 80043b0:	e7bd      	b.n	800432e <LCD_Display_Year_Hour_Number+0x11a>
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	20000a80 	.word	0x20000a80
 80043b8:	00020004 	.word	0x00020004

080043bc <LCD_DigitNumber_Year_Hour_Calculate>:
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	000e      	movs	r6, r1
    ones      = number % 10;
 80043c0:	210a      	movs	r1, #10
{
 80043c2:	0004      	movs	r4, r0
    ones      = number % 10;
 80043c4:	f7fb ff56 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 80043c8:	0020      	movs	r0, r4
    LCD_Display_Year_Hour_Number(tens, ones, data);
 80043ca:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 80043cc:	210a      	movs	r1, #10
 80043ce:	f7fb fecb 	bl	8000168 <__udivsi3>
    LCD_Display_Year_Hour_Number(tens, ones, data);
 80043d2:	0032      	movs	r2, r6
 80043d4:	0029      	movs	r1, r5
 80043d6:	b2c0      	uxtb	r0, r0
 80043d8:	f7ff ff1c 	bl	8004214 <LCD_Display_Year_Hour_Number>
}
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e0 <LCD_Display_Month_Min_Number>:

void LCD_Display_Month_Min_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b089      	sub	sp, #36	@ 0x24
 80043e4:	0007      	movs	r7, r0
 80043e6:	000d      	movs	r5, r1
 80043e8:	0016      	movs	r6, r2
	uint32_t Month_Min_data_ten[4] = {0};
 80043ea:	2100      	movs	r1, #0
 80043ec:	2210      	movs	r2, #16
 80043ee:	4668      	mov	r0, sp
	uint32_t Month_Min_data_one[4] = {0};
 80043f0:	ac04      	add	r4, sp, #16
	uint32_t Month_Min_data_ten[4] = {0};
 80043f2:	f015 fe2d 	bl	801a050 <memset>
	uint32_t Month_Min_data_one[4] = {0};
 80043f6:	2210      	movs	r2, #16
 80043f8:	2100      	movs	r1, #0
 80043fa:	0020      	movs	r0, r4
 80043fc:	f015 fe28 	bl	801a050 <memset>

    switch (tens)
 8004400:	2f09      	cmp	r7, #9
 8004402:	d813      	bhi.n	800442c <LCD_Display_Month_Min_Number+0x4c>
 8004404:	0038      	movs	r0, r7
 8004406:	f7fb fe91 	bl	800012c <__gnu_thumb1_case_uqi>
 800440a:	0d05      	.short	0x0d05
 800440c:	2e2c251b 	.word	0x2e2c251b
 8004410:	4b453e35 	.word	0x4b453e35
    {
    	case 0:
        	Month_Min_data_ten[0] = 0x0000100;
 8004414:	2280      	movs	r2, #128	@ 0x80
        	Month_Min_data_ten[1] = 0x0000180;
 8004416:	23c0      	movs	r3, #192	@ 0xc0
        	Month_Min_data_ten[0] = 0x0000100;
 8004418:	0052      	lsls	r2, r2, #1
        	Month_Min_data_ten[1] = 0x0000180;
 800441a:	005b      	lsls	r3, r3, #1
        	Month_Min_data_ten[0] = 0x0000100;
 800441c:	9200      	str	r2, [sp, #0]
        	Month_Min_data_ten[1] = 0x0000180;
 800441e:	9301      	str	r3, [sp, #4]
			break;

		case 9:
			Month_Min_data_ten[0] = 0x0000100;
			Month_Min_data_ten[1] = 0x0000180;
			Month_Min_data_ten[2] = 0x0000180;
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	e015      	b.n	8004450 <LCD_Display_Month_Min_Number+0x70>
    		Month_Min_data_ten[1] = 0x0000100;
 8004424:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000100;
 800442a:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000100;
			break;
    }
    switch (ones)
 800442c:	2d09      	cmp	r5, #9
 800442e:	d849      	bhi.n	80044c4 <LCD_Display_Month_Min_Number+0xe4>
 8004430:	0028      	movs	r0, r5
 8004432:	f7fb fe7b 	bl	800012c <__gnu_thumb1_case_uqi>
 8004436:	433c      	.short	0x433c
 8004438:	64625c52 	.word	0x64625c52
 800443c:	807a746b 	.word	0x807a746b
			Month_Min_data_ten[0] = 0x0000100;
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000100;
 8004446:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000080;
 8004448:	3b80      	subs	r3, #128	@ 0x80
 800444a:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000180;
 800444c:	3301      	adds	r3, #1
 800444e:	33ff      	adds	r3, #255	@ 0xff
			Month_Min_data_ten[3] = 0x0000100;
 8004450:	9303      	str	r3, [sp, #12]
			break;
 8004452:	e7eb      	b.n	800442c <LCD_Display_Month_Min_Number+0x4c>
			Month_Min_data_ten[0] = 0x0000100;
 8004454:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[2] = 0x0000180;
 8004456:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000100;
 800445c:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000180;
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	e7de      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
			Month_Min_data_ten[1] = 0x0000180;
 8004462:	23c0      	movs	r3, #192	@ 0xc0
 8004464:	e7df      	b.n	8004426 <LCD_Display_Month_Min_Number+0x46>
			Month_Min_data_ten[0] = 0x0000100;
 8004466:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000080;
 8004468:	2280      	movs	r2, #128	@ 0x80
			Month_Min_data_ten[0] = 0x0000100;
 800446a:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000080;
 800446c:	9201      	str	r2, [sp, #4]
			Month_Min_data_ten[0] = 0x0000100;
 800446e:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[2] = 0x0000180;
 8004470:	18d2      	adds	r2, r2, r3
 8004472:	e7d5      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
			Month_Min_data_ten[0] = 0x0000100;
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000080;
 800447a:	3b80      	subs	r3, #128	@ 0x80
 800447c:	9301      	str	r3, [sp, #4]
			Month_Min_data_ten[2] = 0x0000180;
 800447e:	3301      	adds	r3, #1
 8004480:	33ff      	adds	r3, #255	@ 0xff
			Month_Min_data_ten[2] = 0x0000180;
 8004482:	9302      	str	r3, [sp, #8]
			Month_Min_data_ten[3] = 0x0000180;
 8004484:	e7e4      	b.n	8004450 <LCD_Display_Month_Min_Number+0x70>
			Month_Min_data_ten[0] = 0x0000100;
 8004486:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 8004488:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 800448a:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000180;
 800448c:	0052      	lsls	r2, r2, #1
			Month_Min_data_ten[0] = 0x0000100;
 800448e:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 8004490:	9201      	str	r2, [sp, #4]
 8004492:	e7ca      	b.n	800442a <LCD_Display_Month_Min_Number+0x4a>
			Month_Min_data_ten[0] = 0x0000100;
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 800449a:	3380      	adds	r3, #128	@ 0x80
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	e7f0      	b.n	8004482 <LCD_Display_Month_Min_Number+0xa2>
			Month_Min_data_ten[0] = 0x0000100;
 80044a0:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_ten[1] = 0x0000180;
 80044a2:	22c0      	movs	r2, #192	@ 0xc0
			Month_Min_data_ten[0] = 0x0000100;
 80044a4:	005b      	lsls	r3, r3, #1
			Month_Min_data_ten[1] = 0x0000180;
 80044a6:	0052      	lsls	r2, r2, #1
			Month_Min_data_ten[0] = 0x0000100;
 80044a8:	9300      	str	r3, [sp, #0]
			Month_Min_data_ten[1] = 0x0000180;
 80044aa:	9201      	str	r2, [sp, #4]
 80044ac:	e7b8      	b.n	8004420 <LCD_Display_Month_Min_Number+0x40>
    {
    	case 0:
        	Month_Min_data_one[0] = 0x0200000;
 80044ae:	2280      	movs	r2, #128	@ 0x80
        	Month_Min_data_one[1] = 0x0200200;
 80044b0:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
        	Month_Min_data_one[0] = 0x0200000;
 80044b2:	0392      	lsls	r2, r2, #14
 80044b4:	9204      	str	r2, [sp, #16]
        	Month_Min_data_one[1] = 0x0200200;
 80044b6:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Month_Min_data_one[0] = 0x0200000;
			Month_Min_data_one[1] = 0x0200200;
			Month_Min_data_one[2] = 0x0200200;
 80044b8:	60a2      	str	r2, [r4, #8]
 80044ba:	e016      	b.n	80044ea <LCD_Display_Month_Min_Number+0x10a>
    		Month_Min_data_one[1] = 0x0200000;
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	039b      	lsls	r3, r3, #14
			Month_Min_data_one[1] = 0x0200200;
 80044c0:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 80044c2:	60a3      	str	r3, [r4, #8]
{
 80044c4:	2300      	movs	r3, #0
			Month_Min_data_one[3] = 0x0200000;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Month_Min_data_ten[i] | Month_Min_data_one[i];
 80044c6:	466a      	mov	r2, sp
 80044c8:	58e1      	ldr	r1, [r4, r3]
 80044ca:	58d2      	ldr	r2, [r2, r3]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 80044d0:	3304      	adds	r3, #4
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d1f7      	bne.n	80044c6 <LCD_Display_Month_Min_Number+0xe6>
    }
}
 80044d6:	b009      	add	sp, #36	@ 0x24
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Month_Min_data_one[0] = 0x0200000;
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	039b      	lsls	r3, r3, #14
 80044de:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200000;
 80044e0:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0000200;
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	60a3      	str	r3, [r4, #8]
			Month_Min_data_one[3] = 0x0200200;
 80044e8:	4b16      	ldr	r3, [pc, #88]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[3] = 0x0200000;
 80044ea:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 80044ec:	e7ea      	b.n	80044c4 <LCD_Display_Month_Min_Number+0xe4>
			Month_Min_data_one[0] = 0x0200000;
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	039b      	lsls	r3, r3, #14
 80044f2:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200000;
 80044f4:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 80044f6:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 80044f8:	e7de      	b.n	80044b8 <LCD_Display_Month_Min_Number+0xd8>
			Month_Min_data_one[1] = 0x0200200;
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 80044fc:	e7e0      	b.n	80044c0 <LCD_Display_Month_Min_Number+0xe0>
			Month_Min_data_one[0] = 0x0200000;
 80044fe:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0000200;
 8004500:	2280      	movs	r2, #128	@ 0x80
			Month_Min_data_one[0] = 0x0200000;
 8004502:	039b      	lsls	r3, r3, #14
			Month_Min_data_one[1] = 0x0000200;
 8004504:	0092      	lsls	r2, r2, #2
			Month_Min_data_one[0] = 0x0200000;
 8004506:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0000200;
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	e7f4      	b.n	80044f6 <LCD_Display_Month_Min_Number+0x116>
			Month_Min_data_one[0] = 0x0200000;
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	039b      	lsls	r3, r3, #14
 8004510:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0000200;
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	6063      	str	r3, [r4, #4]
			Month_Min_data_one[2] = 0x0200200;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[2] = 0x0200200;
 800451a:	60a3      	str	r3, [r4, #8]
			Month_Min_data_one[3] = 0x0200200;
 800451c:	e7e5      	b.n	80044ea <LCD_Display_Month_Min_Number+0x10a>
			Month_Min_data_one[0] = 0x0200000;
 800451e:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0200200;
 8004520:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[0] = 0x0200000;
 8004522:	039b      	lsls	r3, r3, #14
 8004524:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 8004526:	6062      	str	r2, [r4, #4]
			Month_Min_data_one[2] = 0x0200000;
 8004528:	e7cb      	b.n	80044c2 <LCD_Display_Month_Min_Number+0xe2>
			Month_Min_data_one[0] = 0x0200000;
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	039b      	lsls	r3, r3, #14
 800452e:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 8004530:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	e7f1      	b.n	800451a <LCD_Display_Month_Min_Number+0x13a>
			Month_Min_data_one[0] = 0x0200000;
 8004536:	2380      	movs	r3, #128	@ 0x80
			Month_Min_data_one[1] = 0x0200200;
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <LCD_Display_Month_Min_Number+0x164>)
			Month_Min_data_one[0] = 0x0200000;
 800453a:	039b      	lsls	r3, r3, #14
 800453c:	9304      	str	r3, [sp, #16]
			Month_Min_data_one[1] = 0x0200200;
 800453e:	6062      	str	r2, [r4, #4]
 8004540:	e7ba      	b.n	80044b8 <LCD_Display_Month_Min_Number+0xd8>
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	00200200 	.word	0x00200200

08004548 <LCD_DigitNumber_Month_Min_Calculate>:
{
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	000e      	movs	r6, r1
    ones      = number % 10;
 800454c:	210a      	movs	r1, #10
{
 800454e:	0004      	movs	r4, r0
    ones      = number % 10;
 8004550:	f7fb fe90 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 8004554:	0020      	movs	r0, r4
    LCD_Display_Month_Min_Number(tens, ones, data);
 8004556:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 8004558:	210a      	movs	r1, #10
 800455a:	f7fb fe05 	bl	8000168 <__udivsi3>
    LCD_Display_Month_Min_Number(tens, ones, data);
 800455e:	0032      	movs	r2, r6
 8004560:	0029      	movs	r1, r5
 8004562:	b2c0      	uxtb	r0, r0
 8004564:	f7ff ff3c 	bl	80043e0 <LCD_Display_Month_Min_Number>
}
 8004568:	bd70      	pop	{r4, r5, r6, pc}

0800456a <LCD_Display_Day_Sec_Number>:

void LCD_Display_Day_Sec_Number(uint8_t tens, uint8_t ones, uint32_t *data)
{
 800456a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456c:	b089      	sub	sp, #36	@ 0x24
 800456e:	0007      	movs	r7, r0
 8004570:	000d      	movs	r5, r1
 8004572:	0016      	movs	r6, r2
	uint32_t Day_Sec_data_ten[4] = {0};
 8004574:	2100      	movs	r1, #0
 8004576:	2210      	movs	r2, #16
 8004578:	4668      	mov	r0, sp
	uint32_t Day_Sec_data_one[4] = {0};
 800457a:	ac04      	add	r4, sp, #16
	uint32_t Day_Sec_data_ten[4] = {0};
 800457c:	f015 fd68 	bl	801a050 <memset>
	uint32_t Day_Sec_data_one[4] = {0};
 8004580:	2210      	movs	r2, #16
 8004582:	2100      	movs	r1, #0
 8004584:	0020      	movs	r0, r4
 8004586:	f015 fd63 	bl	801a050 <memset>

    switch (tens)
 800458a:	2f09      	cmp	r7, #9
 800458c:	d813      	bhi.n	80045b6 <LCD_Display_Day_Sec_Number+0x4c>
 800458e:	0038      	movs	r0, r7
 8004590:	f7fb fdcc 	bl	800012c <__gnu_thumb1_case_uqi>
 8004594:	261b0d05 	.word	0x261b0d05
 8004598:	40362f2d 	.word	0x40362f2d
 800459c:	4e47      	.short	0x4e47
    {
    	case 0:
        	Day_Sec_data_ten[0] = 0x0080000;
 800459e:	2280      	movs	r2, #128	@ 0x80
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a0:	2390      	movs	r3, #144	@ 0x90
        	Day_Sec_data_ten[0] = 0x0080000;
 80045a2:	0312      	lsls	r2, r2, #12
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a4:	031b      	lsls	r3, r3, #12
        	Day_Sec_data_ten[0] = 0x0080000;
 80045a6:	9200      	str	r2, [sp, #0]
        	Day_Sec_data_ten[1] = 0x0090000;
 80045a8:	9301      	str	r3, [sp, #4]
			break;

		case 9:
			Day_Sec_data_ten[0] = 0x0080000;
			Day_Sec_data_ten[1] = 0x0090000;
			Day_Sec_data_ten[2] = 0x0090000;
 80045aa:	9202      	str	r2, [sp, #8]
 80045ac:	e016      	b.n	80045dc <LCD_Display_Day_Sec_Number+0x72>
    		Day_Sec_data_ten[1] = 0x0080000;
 80045ae:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 80045b0:	031b      	lsls	r3, r3, #12
 80045b2:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0080000;
 80045b4:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 80045b6:	2d09      	cmp	r5, #9
 80045b8:	d84a      	bhi.n	8004650 <LCD_Display_Day_Sec_Number+0xe6>
 80045ba:	0028      	movs	r0, r5
 80045bc:	f7fb fdb6 	bl	800012c <__gnu_thumb1_case_uqi>
 80045c0:	5b53453f 	.word	0x5b53453f
 80045c4:	6e676260 	.word	0x6e676260
 80045c8:	7873      	.short	0x7873
			Day_Sec_data_ten[0] = 0x0080000;
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	031b      	lsls	r3, r3, #12
 80045ce:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0080000;
 80045d0:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0010000;
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0090000;
 80045d8:	2390      	movs	r3, #144	@ 0x90
 80045da:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[3] = 0x0080000;
 80045dc:	9303      	str	r3, [sp, #12]
			break;
 80045de:	e7ea      	b.n	80045b6 <LCD_Display_Day_Sec_Number+0x4c>
			Day_Sec_data_ten[0] = 0x0080000;
 80045e0:	2380      	movs	r3, #128	@ 0x80
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0080000;
 80045e6:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0090000;
 80045e8:	2290      	movs	r2, #144	@ 0x90
 80045ea:	0312      	lsls	r2, r2, #12
 80045ec:	e7dd      	b.n	80045aa <LCD_Display_Day_Sec_Number+0x40>
			Day_Sec_data_ten[1] = 0x0090000;
 80045ee:	2390      	movs	r3, #144	@ 0x90
 80045f0:	e7de      	b.n	80045b0 <LCD_Display_Day_Sec_Number+0x46>
			Day_Sec_data_ten[0] = 0x0080000;
 80045f2:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0010000;
 80045f4:	2280      	movs	r2, #128	@ 0x80
			Day_Sec_data_ten[0] = 0x0080000;
 80045f6:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0010000;
 80045f8:	0252      	lsls	r2, r2, #9
			Day_Sec_data_ten[0] = 0x0080000;
 80045fa:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0010000;
 80045fc:	9201      	str	r2, [sp, #4]
 80045fe:	e7f3      	b.n	80045e8 <LCD_Display_Day_Sec_Number+0x7e>
			Day_Sec_data_ten[0] = 0x0080000;
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	031b      	lsls	r3, r3, #12
 8004604:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0010000;
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	025b      	lsls	r3, r3, #9
 800460a:	9301      	str	r3, [sp, #4]
			Day_Sec_data_ten[2] = 0x0090000;
 800460c:	2390      	movs	r3, #144	@ 0x90
 800460e:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[2] = 0x0090000;
 8004610:	9302      	str	r3, [sp, #8]
			Day_Sec_data_ten[3] = 0x0090000;
 8004612:	e7e3      	b.n	80045dc <LCD_Display_Day_Sec_Number+0x72>
			Day_Sec_data_ten[0] = 0x0080000;
 8004614:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 8004616:	2290      	movs	r2, #144	@ 0x90
			Day_Sec_data_ten[0] = 0x0080000;
 8004618:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0090000;
 800461a:	0312      	lsls	r2, r2, #12
			Day_Sec_data_ten[0] = 0x0080000;
 800461c:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 800461e:	9201      	str	r2, [sp, #4]
 8004620:	e7c8      	b.n	80045b4 <LCD_Display_Day_Sec_Number+0x4a>
			Day_Sec_data_ten[0] = 0x0080000;
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 8004628:	2390      	movs	r3, #144	@ 0x90
 800462a:	031b      	lsls	r3, r3, #12
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	e7ef      	b.n	8004610 <LCD_Display_Day_Sec_Number+0xa6>
			Day_Sec_data_ten[0] = 0x0080000;
 8004630:	2380      	movs	r3, #128	@ 0x80
			Day_Sec_data_ten[1] = 0x0090000;
 8004632:	2290      	movs	r2, #144	@ 0x90
			Day_Sec_data_ten[0] = 0x0080000;
 8004634:	031b      	lsls	r3, r3, #12
			Day_Sec_data_ten[1] = 0x0090000;
 8004636:	0312      	lsls	r2, r2, #12
			Day_Sec_data_ten[0] = 0x0080000;
 8004638:	9300      	str	r3, [sp, #0]
			Day_Sec_data_ten[1] = 0x0090000;
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	e7b5      	b.n	80045aa <LCD_Display_Day_Sec_Number+0x40>
    {
    	case 0:
        	Day_Sec_data_one[0] = 0x0000002;
 800463e:	2202      	movs	r2, #2
        	Day_Sec_data_one[1] = 0x0000003;
 8004640:	2303      	movs	r3, #3
        	Day_Sec_data_one[0] = 0x0000002;
 8004642:	9204      	str	r2, [sp, #16]
        	Day_Sec_data_one[1] = 0x0000003;
 8004644:	6063      	str	r3, [r4, #4]
			break;

		case 9:
			Day_Sec_data_one[0] = 0x0000002;
			Day_Sec_data_one[1] = 0x0000003;
			Day_Sec_data_one[2] = 0x0000003;
 8004646:	60a2      	str	r2, [r4, #8]
 8004648:	e013      	b.n	8004672 <LCD_Display_Day_Sec_Number+0x108>
    		Day_Sec_data_one[1] = 0x0000002;
 800464a:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 800464c:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800464e:	60a3      	str	r3, [r4, #8]
{
 8004650:	2300      	movs	r3, #0
			Day_Sec_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = Day_Sec_data_ten[i] | Day_Sec_data_one[i];
 8004652:	466a      	mov	r2, sp
 8004654:	58e1      	ldr	r1, [r4, r3]
 8004656:	58d2      	ldr	r2, [r2, r3]
 8004658:	430a      	orrs	r2, r1
 800465a:	50f2      	str	r2, [r6, r3]
    for(int i = 0; i<4; i++)
 800465c:	3304      	adds	r3, #4
 800465e:	2b10      	cmp	r3, #16
 8004660:	d1f7      	bne.n	8004652 <LCD_Display_Day_Sec_Number+0xe8>
    }
}
 8004662:	b009      	add	sp, #36	@ 0x24
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Day_Sec_data_one[0] = 0x0000002;
 8004666:	2302      	movs	r3, #2
 8004668:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000002;
 800466a:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000001;
 800466c:	3b01      	subs	r3, #1
 800466e:	60a3      	str	r3, [r4, #8]
			Day_Sec_data_one[3] = 0x0000003;
 8004670:	3302      	adds	r3, #2
			Day_Sec_data_one[3] = 0x0000002;
 8004672:	60e3      	str	r3, [r4, #12]
    for(int i = 0; i<4; i++)
 8004674:	e7ec      	b.n	8004650 <LCD_Display_Day_Sec_Number+0xe6>
			Day_Sec_data_one[0] = 0x0000002;
 8004676:	2302      	movs	r3, #2
 8004678:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000002;
 800467a:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800467c:	2203      	movs	r2, #3
 800467e:	e7e2      	b.n	8004646 <LCD_Display_Day_Sec_Number+0xdc>
			Day_Sec_data_one[1] = 0x0000003;
 8004680:	2303      	movs	r3, #3
 8004682:	e7e3      	b.n	800464c <LCD_Display_Day_Sec_Number+0xe2>
			Day_Sec_data_one[0] = 0x0000002;
 8004684:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000001;
 8004686:	2201      	movs	r2, #1
			Day_Sec_data_one[0] = 0x0000002;
 8004688:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000001;
 800468a:	6062      	str	r2, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 800468c:	e7f6      	b.n	800467c <LCD_Display_Day_Sec_Number+0x112>
			Day_Sec_data_one[0] = 0x0000002;
 800468e:	2302      	movs	r3, #2
 8004690:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000001;
 8004692:	3b01      	subs	r3, #1
 8004694:	6063      	str	r3, [r4, #4]
			Day_Sec_data_one[2] = 0x0000003;
 8004696:	3302      	adds	r3, #2
			Day_Sec_data_one[2] = 0x0000003;
 8004698:	60a3      	str	r3, [r4, #8]
			Day_Sec_data_one[3] = 0x0000003;
 800469a:	e7ea      	b.n	8004672 <LCD_Display_Day_Sec_Number+0x108>
			Day_Sec_data_one[0] = 0x0000002;
 800469c:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 800469e:	2203      	movs	r2, #3
			Day_Sec_data_one[0] = 0x0000002;
 80046a0:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046a2:	6062      	str	r2, [r4, #4]
			Day_Sec_data_one[2] = 0x0000002;
 80046a4:	e7d3      	b.n	800464e <LCD_Display_Day_Sec_Number+0xe4>
			Day_Sec_data_one[0] = 0x0000002;
 80046a6:	2302      	movs	r3, #2
 80046a8:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046aa:	3301      	adds	r3, #1
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	e7f3      	b.n	8004698 <LCD_Display_Day_Sec_Number+0x12e>
			Day_Sec_data_one[0] = 0x0000002;
 80046b0:	2302      	movs	r3, #2
			Day_Sec_data_one[1] = 0x0000003;
 80046b2:	2203      	movs	r2, #3
			Day_Sec_data_one[0] = 0x0000002;
 80046b4:	9304      	str	r3, [sp, #16]
			Day_Sec_data_one[1] = 0x0000003;
 80046b6:	6062      	str	r2, [r4, #4]
 80046b8:	e7c5      	b.n	8004646 <LCD_Display_Day_Sec_Number+0xdc>

080046ba <LCD_DigitNumber_Day_Sec_Calculate>:
{
 80046ba:	b570      	push	{r4, r5, r6, lr}
 80046bc:	000e      	movs	r6, r1
    ones      = number % 10;
 80046be:	210a      	movs	r1, #10
{
 80046c0:	0004      	movs	r4, r0
    ones      = number % 10;
 80046c2:	f7fb fdd7 	bl	8000274 <__aeabi_uidivmod>
    tens      = number / 10;
 80046c6:	0020      	movs	r0, r4
    LCD_Display_Day_Sec_Number(tens, ones, data);
 80046c8:	b2cd      	uxtb	r5, r1
    tens      = number / 10;
 80046ca:	210a      	movs	r1, #10
 80046cc:	f7fb fd4c 	bl	8000168 <__udivsi3>
    LCD_Display_Day_Sec_Number(tens, ones, data);
 80046d0:	0032      	movs	r2, r6
 80046d2:	0029      	movs	r1, r5
 80046d4:	b2c0      	uxtb	r0, r0
 80046d6:	f7ff ff48 	bl	800456a <LCD_Display_Day_Sec_Number>
}
 80046da:	bd70      	pop	{r4, r5, r6, pc}

080046dc <LCD_Display_date>:
{
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_LCD_Clear(&hlcd);
 80046de:	4e40      	ldr	r6, [pc, #256]	@ (80047e0 <LCD_Display_date+0x104>)
{
 80046e0:	b097      	sub	sp, #92	@ 0x5c
 80046e2:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 80046e4:	0030      	movs	r0, r6
 80046e6:	f00a fe9e 	bl	800f426 <HAL_LCD_Clear>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80046ea:	4d3e      	ldr	r5, [pc, #248]	@ (80047e4 <LCD_Display_date+0x108>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	0028      	movs	r0, r5
 80046f0:	a911      	add	r1, sp, #68	@ 0x44
 80046f2:	f00d f9ef 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80046f6:	0028      	movs	r0, r5
    uint8_t month = BCD2BIN(sDate.Month);
 80046f8:	250a      	movs	r5, #10
 80046fa:	270f      	movs	r7, #15
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80046fc:	2201      	movs	r2, #1
 80046fe:	a904      	add	r1, sp, #16
 8004700:	f00d fa1a 	bl	8011b38 <HAL_RTC_GetDate>
    uint8_t year  = BCD2BIN(sDate.Year);
 8004704:	ab04      	add	r3, sp, #16
 8004706:	78db      	ldrb	r3, [r3, #3]
	uint32_t data_year[4] = {0};
 8004708:	2100      	movs	r1, #0
    uint8_t year  = BCD2BIN(sDate.Year);
 800470a:	9301      	str	r3, [sp, #4]
    uint8_t month = BCD2BIN(sDate.Month);
 800470c:	ab04      	add	r3, sp, #16
 800470e:	785a      	ldrb	r2, [r3, #1]
	uint32_t data_year[4] = {0};
 8004710:	a805      	add	r0, sp, #20
    uint8_t month = BCD2BIN(sDate.Month);
 8004712:	0913      	lsrs	r3, r2, #4
 8004714:	436b      	muls	r3, r5
 8004716:	403a      	ands	r2, r7
 8004718:	189b      	adds	r3, r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	9302      	str	r3, [sp, #8]
    uint8_t day   = BCD2BIN(sDate.Date);
 800471e:	ab04      	add	r3, sp, #16
 8004720:	789a      	ldrb	r2, [r3, #2]
 8004722:	0913      	lsrs	r3, r2, #4
 8004724:	436b      	muls	r3, r5
 8004726:	403a      	ands	r2, r7
 8004728:	189b      	adds	r3, r3, r2
 800472a:	b2db      	uxtb	r3, r3
	uint32_t data_year[4] = {0};
 800472c:	2210      	movs	r2, #16
    uint8_t day   = BCD2BIN(sDate.Date);
 800472e:	9303      	str	r3, [sp, #12]
	uint32_t data_year[4] = {0};
 8004730:	f015 fc8e 	bl	801a050 <memset>
	uint32_t data_month[4] = {0};
 8004734:	2210      	movs	r2, #16
 8004736:	2100      	movs	r1, #0
 8004738:	a809      	add	r0, sp, #36	@ 0x24
 800473a:	f015 fc89 	bl	801a050 <memset>
	uint32_t data_day[4] = {0};
 800473e:	2210      	movs	r2, #16
 8004740:	2100      	movs	r1, #0
 8004742:	a80d      	add	r0, sp, #52	@ 0x34
 8004744:	f015 fc84 	bl	801a050 <memset>
    uint8_t year  = BCD2BIN(sDate.Year);
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	9801      	ldr	r0, [sp, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	435d      	muls	r5, r3
 8004750:	4038      	ands	r0, r7
 8004752:	1828      	adds	r0, r5, r0
	LCD_DigitNumber_Year_Hour_Calculate(year, data_year);
 8004754:	b2c0      	uxtb	r0, r0
 8004756:	a905      	add	r1, sp, #20
 8004758:	f7ff fe30 	bl	80043bc <LCD_DigitNumber_Year_Hour_Calculate>
	LCD_DigitNumber_Month_Min_Calculate(month, data_month);
 800475c:	9802      	ldr	r0, [sp, #8]
 800475e:	a909      	add	r1, sp, #36	@ 0x24
 8004760:	f7ff fef2 	bl	8004548 <LCD_DigitNumber_Month_Min_Calculate>
	LCD_DigitNumber_Day_Sec_Calculate(day, data_day);
 8004764:	9803      	ldr	r0, [sp, #12]
 8004766:	a90d      	add	r1, sp, #52	@ 0x34
 8004768:	f7ff ffa7 	bl	80046ba <LCD_DigitNumber_Day_Sec_Calculate>
 800476c:	2300      	movs	r3, #0
		data[i] = data_year[i] | data_month[i] | data_day[i];
 800476e:	2014      	movs	r0, #20
 8004770:	a904      	add	r1, sp, #16
 8004772:	1809      	adds	r1, r1, r0
 8004774:	aa05      	add	r2, sp, #20
 8004776:	58c9      	ldr	r1, [r1, r3]
 8004778:	58d2      	ldr	r2, [r2, r3]
 800477a:	3010      	adds	r0, #16
 800477c:	430a      	orrs	r2, r1
 800477e:	a904      	add	r1, sp, #16
 8004780:	1809      	adds	r1, r1, r0
 8004782:	58c9      	ldr	r1, [r1, r3]
 8004784:	430a      	orrs	r2, r1
 8004786:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i<4; i++)
 8004788:	3304      	adds	r3, #4
 800478a:	2b10      	cmp	r3, #16
 800478c:	d1ef      	bne.n	800476e <LCD_Display_date+0x92>
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <LCD_Display_date+0x10c>)
	data[1] = data[1] | 0x100E020;
 8004792:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 8004794:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x100E020;
 8004796:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <LCD_Display_date+0x110>)
	data[0] = data[0] | 0x00140C0;	//'date글자, :'표시
 8004798:	6023      	str	r3, [r4, #0]
	data[1] = data[1] | 0x100E020;
 800479a:	430a      	orrs	r2, r1
 800479c:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300E020;
 800479e:	68a1      	ldr	r1, [r4, #8]
 80047a0:	4a13      	ldr	r2, [pc, #76]	@ (80047f0 <LCD_Display_date+0x114>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80047a2:	0030      	movs	r0, r6
	data[2] = data[2] | 0x300E020;
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x300B060;
 80047a8:	68e1      	ldr	r1, [r4, #12]
 80047aa:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <LCD_Display_date+0x118>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80047b0:	2100      	movs	r1, #0
 80047b2:	4a11      	ldr	r2, [pc, #68]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047b4:	f00a fdd6 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80047b8:	6863      	ldr	r3, [r4, #4]
 80047ba:	2102      	movs	r1, #2
 80047bc:	0030      	movs	r0, r6
 80047be:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047c0:	f00a fdd0 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	2104      	movs	r1, #4
 80047c8:	0030      	movs	r0, r6
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047cc:	f00a fdca 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80047d0:	2106      	movs	r1, #6
 80047d2:	0030      	movs	r0, r6
 80047d4:	68e3      	ldr	r3, [r4, #12]
 80047d6:	4a08      	ldr	r2, [pc, #32]	@ (80047f8 <LCD_Display_date+0x11c>)
 80047d8:	f00a fdc4 	bl	800f364 <HAL_LCD_Write>
}
 80047dc:	b017      	add	sp, #92	@ 0x5c
 80047de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e0:	20000a80 	.word	0x20000a80
 80047e4:	200009f8 	.word	0x200009f8
 80047e8:	000140c0 	.word	0x000140c0
 80047ec:	0100e020 	.word	0x0100e020
 80047f0:	0300e020 	.word	0x0300e020
 80047f4:	0300b060 	.word	0x0300b060
 80047f8:	f7fffffe 	.word	0xf7fffffe

080047fc <LCD_Display_Time>:
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_LCD_Clear(&hlcd);
 80047fe:	4e3f      	ldr	r6, [pc, #252]	@ (80048fc <LCD_Display_Time+0x100>)
{
 8004800:	b097      	sub	sp, #92	@ 0x5c
 8004802:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004804:	0030      	movs	r0, r6
 8004806:	f00a fe0e 	bl	800f426 <HAL_LCD_Clear>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800480a:	4d3d      	ldr	r5, [pc, #244]	@ (8004900 <LCD_Display_Time+0x104>)
 800480c:	af11      	add	r7, sp, #68	@ 0x44
 800480e:	0039      	movs	r1, r7
 8004810:	2201      	movs	r2, #1
 8004812:	0028      	movs	r0, r5
 8004814:	f00d f95e 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8004818:	0028      	movs	r0, r5
    uint8_t minute = BCD2BIN(sTime.Minutes);
 800481a:	250a      	movs	r5, #10
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800481c:	2201      	movs	r2, #1
 800481e:	a904      	add	r1, sp, #16
 8004820:	f00d f98a 	bl	8011b38 <HAL_RTC_GetDate>
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8004824:	210f      	movs	r1, #15
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8004826:	783b      	ldrb	r3, [r7, #0]
	uint32_t data_hour[4] = {0};
 8004828:	a805      	add	r0, sp, #20
    uint8_t hour   = BCD2BIN(sTime.Hours);
 800482a:	9301      	str	r3, [sp, #4]
    uint8_t minute = BCD2BIN(sTime.Minutes);
 800482c:	787a      	ldrb	r2, [r7, #1]
 800482e:	0913      	lsrs	r3, r2, #4
 8004830:	436b      	muls	r3, r5
 8004832:	400a      	ands	r2, r1
 8004834:	189b      	adds	r3, r3, r2
 8004836:	b2db      	uxtb	r3, r3
 8004838:	9302      	str	r3, [sp, #8]
    uint8_t second = BCD2BIN(sTime.Seconds);
 800483a:	78ba      	ldrb	r2, [r7, #2]
	uint32_t data_sec[4] = {0};
 800483c:	af0d      	add	r7, sp, #52	@ 0x34
    uint8_t second = BCD2BIN(sTime.Seconds);
 800483e:	0913      	lsrs	r3, r2, #4
 8004840:	436b      	muls	r3, r5
 8004842:	400a      	ands	r2, r1
 8004844:	189b      	adds	r3, r3, r2
 8004846:	b2db      	uxtb	r3, r3
	uint32_t data_hour[4] = {0};
 8004848:	2210      	movs	r2, #16
 800484a:	2100      	movs	r1, #0
    uint8_t second = BCD2BIN(sTime.Seconds);
 800484c:	9303      	str	r3, [sp, #12]
	uint32_t data_hour[4] = {0};
 800484e:	f015 fbff 	bl	801a050 <memset>
	uint32_t data_min[4] = {0};
 8004852:	2210      	movs	r2, #16
 8004854:	2100      	movs	r1, #0
 8004856:	a809      	add	r0, sp, #36	@ 0x24
 8004858:	f015 fbfa 	bl	801a050 <memset>
	uint32_t data_sec[4] = {0};
 800485c:	2210      	movs	r2, #16
 800485e:	2100      	movs	r1, #0
 8004860:	0038      	movs	r0, r7
 8004862:	f015 fbf5 	bl	801a050 <memset>
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8004866:	210f      	movs	r1, #15
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	9801      	ldr	r0, [sp, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	435d      	muls	r5, r3
 8004870:	4008      	ands	r0, r1
 8004872:	1828      	adds	r0, r5, r0
	LCD_DigitNumber_Year_Hour_Calculate(hour, data_hour);
 8004874:	b2c0      	uxtb	r0, r0
 8004876:	a905      	add	r1, sp, #20
 8004878:	f7ff fda0 	bl	80043bc <LCD_DigitNumber_Year_Hour_Calculate>
	LCD_DigitNumber_Month_Min_Calculate(minute, data_min);
 800487c:	9802      	ldr	r0, [sp, #8]
 800487e:	a909      	add	r1, sp, #36	@ 0x24
 8004880:	f7ff fe62 	bl	8004548 <LCD_DigitNumber_Month_Min_Calculate>
	LCD_DigitNumber_Day_Sec_Calculate(second, data_sec);
 8004884:	0039      	movs	r1, r7
 8004886:	9803      	ldr	r0, [sp, #12]
 8004888:	f7ff ff17 	bl	80046ba <LCD_DigitNumber_Day_Sec_Calculate>
 800488c:	2300      	movs	r3, #0
		data[i] = data_hour[i] | data_min[i] | data_sec[i];
 800488e:	2014      	movs	r0, #20
 8004890:	a904      	add	r1, sp, #16
 8004892:	aa05      	add	r2, sp, #20
 8004894:	1809      	adds	r1, r1, r0
 8004896:	58c9      	ldr	r1, [r1, r3]
 8004898:	58d2      	ldr	r2, [r2, r3]
 800489a:	430a      	orrs	r2, r1
 800489c:	58f9      	ldr	r1, [r7, r3]
 800489e:	430a      	orrs	r2, r1
 80048a0:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i<4; i++)
 80048a2:	3304      	adds	r3, #4
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d1f2      	bne.n	800488e <LCD_Display_Time+0x92>
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <LCD_Display_Time+0x108>)
	data[1] = data[1] | 0x3000020;
 80048ac:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048ae:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x3000020;
 80048b0:	4a15      	ldr	r2, [pc, #84]	@ (8004908 <LCD_Display_Time+0x10c>)
	data[0] = data[0] | 0x00100C0;	//'H--S글자, :'표시
 80048b2:	6023      	str	r3, [r4, #0]
	data[1] = data[1] | 0x3000020;
 80048b4:	430a      	orrs	r2, r1
 80048b6:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300A060;
 80048b8:	68a1      	ldr	r1, [r4, #8]
 80048ba:	4a14      	ldr	r2, [pc, #80]	@ (800490c <LCD_Display_Time+0x110>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80048bc:	0030      	movs	r0, r6
	data[2] = data[2] | 0x300A060;
 80048be:	430a      	orrs	r2, r1
 80048c0:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x2000040;
 80048c2:	68e1      	ldr	r1, [r4, #12]
 80048c4:	4a12      	ldr	r2, [pc, #72]	@ (8004910 <LCD_Display_Time+0x114>)
 80048c6:	430a      	orrs	r2, r1
 80048c8:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80048ca:	2100      	movs	r1, #0
 80048cc:	4a11      	ldr	r2, [pc, #68]	@ (8004914 <LCD_Display_Time+0x118>)
 80048ce:	f00a fd49 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	2102      	movs	r1, #2
 80048d6:	0030      	movs	r0, r6
 80048d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004914 <LCD_Display_Time+0x118>)
 80048da:	f00a fd43 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	2104      	movs	r1, #4
 80048e2:	0030      	movs	r0, r6
 80048e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004914 <LCD_Display_Time+0x118>)
 80048e6:	f00a fd3d 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80048ea:	2106      	movs	r1, #6
 80048ec:	0030      	movs	r0, r6
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <LCD_Display_Time+0x118>)
 80048f2:	f00a fd37 	bl	800f364 <HAL_LCD_Write>
}
 80048f6:	b017      	add	sp, #92	@ 0x5c
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	20000a80 	.word	0x20000a80
 8004900:	200009f8 	.word	0x200009f8
 8004904:	000100c0 	.word	0x000100c0
 8004908:	03000020 	.word	0x03000020
 800490c:	0300a060 	.word	0x0300a060
 8004910:	02000040 	.word	0x02000040
 8004914:	f7fffffe 	.word	0xf7fffffe

08004918 <LCD_Display_Battery>:
////////////////////////////////////////////배터리//////////////////////////////////////////
void LCD_Display_Battery(uint8_t battery_status, uint32_t *data)
{
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	000c      	movs	r4, r1
	if(battery_status == 0)
	{
		data[0] = data[0] | 0x0000800;
 800491c:	6809      	ldr	r1, [r1, #0]
 800491e:	2803      	cmp	r0, #3
 8004920:	d810      	bhi.n	8004944 <LCD_Display_Battery+0x2c>
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	68e2      	ldr	r2, [r4, #12]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	f7fb fc00 	bl	800012c <__gnu_thumb1_case_uqi>
 800492c:	2a260402 	.word	0x2a260402
 8004930:	4319      	orrs	r1, r3
 8004932:	6021      	str	r1, [r4, #0]
		//배터리 3칸 + 배터리박스 on
	}
	else if(battery_status == 1)
	{
		data[0] = data[0] | 0x0000000;
		data[1] = data[1] | 0x0000800;
 8004934:	6861      	ldr	r1, [r4, #4]
 8004936:	4319      	orrs	r1, r3
 8004938:	6061      	str	r1, [r4, #4]
		data[2] = data[2] | 0x0000800;
 800493a:	68a1      	ldr	r1, [r4, #8]
 800493c:	4319      	orrs	r1, r3
 800493e:	60a1      	str	r1, [r4, #8]
	else if(battery_status == 2)
	{
		data[0] = data[0] | 0x0000000;
		data[1] = data[1] | 0x0000800;
		data[2] = data[2] | 0x0000000;
		data[3] = data[3] | 0x0000800;
 8004940:	431a      	orrs	r2, r3
 8004942:	60e2      	str	r2, [r4, #12]
		data[1] = data[1] | 0x0000000;
		data[2] = data[2] | 0x0000000;
		data[3] = data[3] | 0x0000800;
		//배터리 0칸 + 배터리박스 on
	}
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004944:	4d10      	ldr	r5, [pc, #64]	@ (8004988 <LCD_Display_Battery+0x70>)
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	0028      	movs	r0, r5
 800494a:	2100      	movs	r1, #0
 800494c:	4a0f      	ldr	r2, [pc, #60]	@ (800498c <LCD_Display_Battery+0x74>)
 800494e:	f00a fd09 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004952:	0028      	movs	r0, r5
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	2102      	movs	r1, #2
 8004958:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <LCD_Display_Battery+0x74>)
 800495a:	f00a fd03 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 800495e:	0028      	movs	r0, r5
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	2104      	movs	r1, #4
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <LCD_Display_Battery+0x74>)
 8004966:	f00a fcfd 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800496a:	0028      	movs	r0, r5
 800496c:	2106      	movs	r1, #6
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	4a06      	ldr	r2, [pc, #24]	@ (800498c <LCD_Display_Battery+0x74>)
 8004972:	f00a fcf7 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004976:	bd70      	pop	{r4, r5, r6, pc}
		data[1] = data[1] | 0x0000800;
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	4319      	orrs	r1, r3
 800497c:	6061      	str	r1, [r4, #4]
 800497e:	e7df      	b.n	8004940 <LCD_Display_Battery+0x28>
		data[3] = data[3] | 0x0000800;
 8004980:	4313      	orrs	r3, r2
 8004982:	60e3      	str	r3, [r4, #12]
 8004984:	e7de      	b.n	8004944 <LCD_Display_Battery+0x2c>
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	20000a80 	.word	0x20000a80
 800498c:	f7fffffe 	.word	0xf7fffffe

08004990 <LCD_Display_USB>:

////////////////////////////////////////////usb//////////////////////////////////////////
void LCD_Display_USB(uint32_t *data)
{
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004994:	4d17      	ldr	r5, [pc, #92]	@ (80049f4 <LCD_Display_USB+0x64>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0004000;
	data[1] = data[1] | 0x300A000;
	data[2] = data[2] | 0x100F000;
	data[3] = data[3] | 0x3007000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004996:	4e18      	ldr	r6, [pc, #96]	@ (80049f8 <LCD_Display_USB+0x68>)
	HAL_LCD_Clear(&hlcd);
 8004998:	0028      	movs	r0, r5
 800499a:	f00a fd44 	bl	800f426 <HAL_LCD_Clear>
	data[0] = data[0] | 0x0004000;
 800499e:	2380      	movs	r3, #128	@ 0x80
	data[1] = data[1] | 0x300A000;
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <LCD_Display_USB+0x6c>)
	data[0] = data[0] | 0x0004000;
 80049a4:	01db      	lsls	r3, r3, #7
	data[1] = data[1] | 0x300A000;
 80049a6:	430a      	orrs	r2, r1
 80049a8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x100F000;
 80049aa:	68a1      	ldr	r1, [r4, #8]
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <LCD_Display_USB+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80049ae:	0028      	movs	r0, r5
	data[2] = data[2] | 0x100F000;
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x3007000;
 80049b4:	68e1      	ldr	r1, [r4, #12]
 80049b6:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <LCD_Display_USB+0x74>)
	data[0] = data[0] | 0x0004000;
 80049b8:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x3007000;
 80049ba:	430a      	orrs	r2, r1
 80049bc:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80049be:	2100      	movs	r1, #0
 80049c0:	0032      	movs	r2, r6
 80049c2:	f00a fccf 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80049c6:	0032      	movs	r2, r6
 80049c8:	0028      	movs	r0, r5
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	2102      	movs	r1, #2
 80049ce:	f00a fcc9 	bl	800f364 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80049d2:	0032      	movs	r2, r6
 80049d4:	0028      	movs	r0, r5
 80049d6:	68a3      	ldr	r3, [r4, #8]
 80049d8:	2104      	movs	r1, #4
 80049da:	f00a fcc3 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80049de:	0032      	movs	r2, r6
 80049e0:	2106      	movs	r1, #6
 80049e2:	0028      	movs	r0, r5
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	f00a fcbd 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest(& hlcd);
 80049ea:	0028      	movs	r0, r5
 80049ec:	f00a fcf7 	bl	800f3de <HAL_LCD_UpdateDisplayRequest>
	//Usb 글자 on
}
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	20000a80 	.word	0x20000a80
 80049f8:	f7fffffe 	.word	0xf7fffffe
 80049fc:	0300a000 	.word	0x0300a000
 8004a00:	0100f000 	.word	0x0100f000
 8004a04:	03007000 	.word	0x03007000

08004a08 <LCD_Display_USB_Load>:

void LCD_Display_USB_Load(uint32_t *data)
{
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004a0c:	4d1a      	ldr	r5, [pc, #104]	@ (8004a78 <LCD_Display_USB_Load+0x70>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0004100;
	data[1] = data[1] | 0x320A188;
	data[2] = data[2] | 0x122F384;
	data[3] = data[3] | 0x322728C;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a0e:	4e1b      	ldr	r6, [pc, #108]	@ (8004a7c <LCD_Display_USB_Load+0x74>)
	HAL_LCD_Clear(&hlcd);
 8004a10:	0028      	movs	r0, r5
 8004a12:	f00a fd08 	bl	800f426 <HAL_LCD_Clear>
	data[0] = data[0] | 0x0004100;
 8004a16:	2382      	movs	r3, #130	@ 0x82
	data[1] = data[1] | 0x320A188;
 8004a18:	6861      	ldr	r1, [r4, #4]
 8004a1a:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <LCD_Display_USB_Load+0x78>)
	data[0] = data[0] | 0x0004100;
 8004a1c:	01db      	lsls	r3, r3, #7
	data[1] = data[1] | 0x320A188;
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x122F384;
 8004a22:	68a1      	ldr	r1, [r4, #8]
 8004a24:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <LCD_Display_USB_Load+0x7c>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a26:	0028      	movs	r0, r5
	data[2] = data[2] | 0x122F384;
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x322728C;
 8004a2c:	68e1      	ldr	r1, [r4, #12]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <LCD_Display_USB_Load+0x80>)
	data[0] = data[0] | 0x0004100;
 8004a30:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x322728C;
 8004a32:	430a      	orrs	r2, r1
 8004a34:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a36:	2100      	movs	r1, #0
 8004a38:	0032      	movs	r2, r6
 8004a3a:	f00a fc93 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004a3e:	0032      	movs	r2, r6
 8004a40:	0028      	movs	r0, r5
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	2102      	movs	r1, #2
 8004a46:	f00a fc8d 	bl	800f364 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004a4a:	0032      	movs	r2, r6
 8004a4c:	0028      	movs	r0, r5
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	2104      	movs	r1, #4
 8004a52:	f00a fc87 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004a56:	0032      	movs	r2, r6
 8004a58:	0028      	movs	r0, r5
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	2106      	movs	r1, #6
 8004a5e:	f00a fc81 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	0152      	lsls	r2, r2, #5
 8004a66:	0013      	movs	r3, r2
 8004a68:	2107      	movs	r1, #7
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	f00a fc7a 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest(& hlcd);
 8004a70:	0028      	movs	r0, r5
 8004a72:	f00a fcb4 	bl	800f3de <HAL_LCD_UpdateDisplayRequest>
	//Usb LoAd글자 on
}
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	20000a80 	.word	0x20000a80
 8004a7c:	f7fffffe 	.word	0xf7fffffe
 8004a80:	0320a188 	.word	0x0320a188
 8004a84:	0122f384 	.word	0x0122f384
 8004a88:	0322728c 	.word	0x0322728c

08004a8c <LCD_Display_Boot>:
////////////////////////////////////////////나머지 글자 및 알람//////////////////////////////////////////
void LCD_Display_Boot(uint32_t *data)
{
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
	memset(data, 0, sizeof(data));
 8004a90:	2704      	movs	r7, #4
	HAL_LCD_Clear(&hlcd);
 8004a92:	4d17      	ldr	r5, [pc, #92]	@ (8004af0 <LCD_Display_Boot+0x64>)
	data[1] = data[1] | 0x2000020;
	data[2] = data[2] | 0x300F020;
	data[3] = data[3] | 0x300F060;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004a94:	4e17      	ldr	r6, [pc, #92]	@ (8004af4 <LCD_Display_Boot+0x68>)
	HAL_LCD_Clear(&hlcd);
 8004a96:	0028      	movs	r0, r5
 8004a98:	f00a fcc5 	bl	800f426 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 8004a9c:	003a      	movs	r2, r7
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	0020      	movs	r0, r4
 8004aa2:	f015 fad5 	bl	801a050 <memset>
	data[1] = data[1] | 0x2000020;
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <LCD_Display_Boot+0x6c>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004aaa:	0028      	movs	r0, r5
	data[1] = data[1] | 0x2000020;
 8004aac:	4313      	orrs	r3, r2
 8004aae:	6063      	str	r3, [r4, #4]
	data[2] = data[2] | 0x300F020;
 8004ab0:	68a2      	ldr	r2, [r4, #8]
 8004ab2:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <LCD_Display_Boot+0x70>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60a3      	str	r3, [r4, #8]
	data[3] = data[3] | 0x300F060;
 8004ab8:	68e2      	ldr	r2, [r4, #12]
 8004aba:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <LCD_Display_Boot+0x74>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60e3      	str	r3, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	0032      	movs	r2, r6
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	f00a fc4d 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004aca:	0032      	movs	r2, r6
 8004acc:	0028      	movs	r0, r5
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	f00a fc47 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004ad6:	0032      	movs	r2, r6
 8004ad8:	0039      	movs	r1, r7
 8004ada:	0028      	movs	r0, r5
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	f00a fc41 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004ae2:	0032      	movs	r2, r6
 8004ae4:	0028      	movs	r0, r5
 8004ae6:	2106      	movs	r1, #6
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	f00a fc3b 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//boot 글자 on
}
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af0:	20000a80 	.word	0x20000a80
 8004af4:	f7fffffe 	.word	0xf7fffffe
 8004af8:	02000020 	.word	0x02000020
 8004afc:	0300f020 	.word	0x0300f020
 8004b00:	0300f060 	.word	0x0300f060

08004b04 <Blank_Dose_Display>:

void Blank_Dose_Display(uint32_t *data)
{
 8004b04:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x200A020;
 8004b06:	6882      	ldr	r2, [r0, #8]
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <Blank_Dose_Display+0x18>)
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b0a:	2104      	movs	r1, #4
	data[2] = data[2] | 0x200A020;
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b10:	4a03      	ldr	r2, [pc, #12]	@ (8004b20 <Blank_Dose_Display+0x1c>)
 8004b12:	4804      	ldr	r0, [pc, #16]	@ (8004b24 <Blank_Dose_Display+0x20>)
 8004b14:	f00a fc26 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//dose값 나오기전 '----' 표시
}
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	0200a020 	.word	0x0200a020
 8004b20:	f7fffffe 	.word	0xf7fffffe
 8004b24:	20000a80 	.word	0x20000a80

08004b28 <LCD_Display_StopMode>:
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//start 글자, REC 표시
}

void LCD_Display_StopMode(uint32_t *data)
{
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004b2c:	4d1f      	ldr	r5, [pc, #124]	@ (8004bac <LCD_Display_StopMode+0x84>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x0200100;
	data[1] = data[1] | 0x020038C;
	data[2] = data[2] | 0x000031C;
	data[3] = data[3] | 0x0020384;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b2e:	4e20      	ldr	r6, [pc, #128]	@ (8004bb0 <LCD_Display_StopMode+0x88>)
	HAL_LCD_Clear(&hlcd);
 8004b30:	0028      	movs	r0, r5
 8004b32:	f00a fc78 	bl	800f426 <HAL_LCD_Clear>
	data[1] = data[1] | 0x020038C;
 8004b36:	6861      	ldr	r1, [r4, #4]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <LCD_Display_StopMode+0x8c>)
	data[0] = data[0] | 0x0200100;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb8 <LCD_Display_StopMode+0x90>)
	data[1] = data[1] | 0x020038C;
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x000031C;
 8004b40:	22c7      	movs	r2, #199	@ 0xc7
 8004b42:	68a1      	ldr	r1, [r4, #8]
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	430a      	orrs	r2, r1
 8004b48:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x0020384;
 8004b4a:	68e1      	ldr	r1, [r4, #12]
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <LCD_Display_StopMode+0x94>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b4e:	0028      	movs	r0, r5
	data[3] = data[3] | 0x0020384;
 8004b50:	430a      	orrs	r2, r1
	data[0] = data[0] | 0x0200100;
 8004b52:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x0020384;
 8004b54:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004b56:	2100      	movs	r1, #0
 8004b58:	0032      	movs	r2, r6
 8004b5a:	f00a fc03 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004b5e:	0032      	movs	r2, r6
 8004b60:	0028      	movs	r0, r5
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	2102      	movs	r1, #2
 8004b66:	f00a fbfd 	bl	800f364 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004b6a:	0032      	movs	r2, r6
 8004b6c:	0028      	movs	r0, r5
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	2104      	movs	r1, #4
 8004b72:	f00a fbf7 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b76:	68e3      	ldr	r3, [r4, #12]
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b78:	2480      	movs	r4, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b7a:	0032      	movs	r2, r6
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b7c:	0164      	lsls	r4, r4, #5
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004b7e:	0028      	movs	r0, r5
 8004b80:	2106      	movs	r1, #6
 8004b82:	f00a fbef 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004b86:	0023      	movs	r3, r4
 8004b88:	0022      	movs	r2, r4
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	f00a fbe9 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM2_1 , LCD_SEG44, LCD_SEG44);
 8004b92:	0023      	movs	r3, r4
 8004b94:	0022      	movs	r2, r4
 8004b96:	0028      	movs	r0, r5
 8004b98:	2105      	movs	r1, #5
 8004b9a:	f00a fbe3 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM3_1 , LCD_SEG44, LCD_SEG44);
 8004b9e:	0028      	movs	r0, r5
 8004ba0:	0023      	movs	r3, r4
 8004ba2:	0022      	movs	r2, r4
 8004ba4:	2107      	movs	r1, #7
 8004ba6:	f00a fbdd 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//stop 글자, stop 표시
}
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	20000a80 	.word	0x20000a80
 8004bb0:	f7fffffe 	.word	0xf7fffffe
 8004bb4:	0020038c 	.word	0x0020038c
 8004bb8:	00200100 	.word	0x00200100
 8004bbc:	00020384 	.word	0x00020384

08004bc0 <LCD_Display_PauseMode>:

void LCD_Display_PauseMode(uint32_t *data)
{
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004bc4:	4d1c      	ldr	r5, [pc, #112]	@ (8004c38 <LCD_Display_PauseMode+0x78>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x02A0000;
	data[1] = data[1] | 0x003038C;
	data[2] = data[2] | 0x023031C;
	data[3] = data[3] | 0x029018C;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bc6:	4e1d      	ldr	r6, [pc, #116]	@ (8004c3c <LCD_Display_PauseMode+0x7c>)
	HAL_LCD_Clear(&hlcd);
 8004bc8:	0028      	movs	r0, r5
 8004bca:	f00a fc2c 	bl	800f426 <HAL_LCD_Clear>
	data[0] = data[0] | 0x02A0000;
 8004bce:	23a8      	movs	r3, #168	@ 0xa8
	data[1] = data[1] | 0x003038C;
 8004bd0:	6861      	ldr	r1, [r4, #4]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <LCD_Display_PauseMode+0x80>)
	data[0] = data[0] | 0x02A0000;
 8004bd4:	039b      	lsls	r3, r3, #14
	data[1] = data[1] | 0x003038C;
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x023031C;
 8004bda:	68a1      	ldr	r1, [r4, #8]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <LCD_Display_PauseMode+0x84>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bde:	0028      	movs	r0, r5
	data[2] = data[2] | 0x023031C;
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x029018C;
 8004be4:	68e1      	ldr	r1, [r4, #12]
 8004be6:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <LCD_Display_PauseMode+0x88>)
	data[0] = data[0] | 0x02A0000;
 8004be8:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x029018C;
 8004bea:	430a      	orrs	r2, r1
 8004bec:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	0032      	movs	r2, r6
 8004bf2:	f00a fbb7 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004bf6:	0032      	movs	r2, r6
 8004bf8:	0028      	movs	r0, r5
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	f00a fbb1 	bl	800f364 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c02:	0032      	movs	r2, r6
 8004c04:	0028      	movs	r0, r5
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	2104      	movs	r1, #4
 8004c0a:	f00a fbab 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c0e:	68e3      	ldr	r3, [r4, #12]
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c10:	2480      	movs	r4, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c12:	0032      	movs	r2, r6
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c14:	0164      	lsls	r4, r4, #5
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c16:	0028      	movs	r0, r5
 8004c18:	2106      	movs	r1, #6
 8004c1a:	f00a fba3 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM0_1 , LCD_SEG44, LCD_SEG44);
 8004c1e:	0023      	movs	r3, r4
 8004c20:	0022      	movs	r2, r4
 8004c22:	0028      	movs	r0, r5
 8004c24:	2101      	movs	r1, #1
 8004c26:	f00a fb9d 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(&hlcd, LCD_COM1_1 , LCD_SEG44, LCD_SEG44);
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	0023      	movs	r3, r4
 8004c2e:	0022      	movs	r2, r4
 8004c30:	2103      	movs	r1, #3
 8004c32:	f00a fb97 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//pause 글자, stop 표시
}
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	20000a80 	.word	0x20000a80
 8004c3c:	f7fffffe 	.word	0xf7fffffe
 8004c40:	0003038c 	.word	0x0003038c
 8004c44:	0023031c 	.word	0x0023031c
 8004c48:	0029018c 	.word	0x0029018c

08004c4c <Small_Stop_Display>:
}


void Small_Stop_Display(uint32_t *data)
{
	data[2] = data[2] | 0x0000010; //Stop on
 8004c4c:	2310      	movs	r3, #16
{
 8004c4e:	b510      	push	{r4, lr}
	data[2] = data[2] | 0x0000010; //Stop on
 8004c50:	6882      	ldr	r2, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c52:	2104      	movs	r1, #4
	data[2] = data[2] | 0x0000010; //Stop on
 8004c54:	4313      	orrs	r3, r2
 8004c56:	6083      	str	r3, [r0, #8]
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004c58:	4a02      	ldr	r2, [pc, #8]	@ (8004c64 <Small_Stop_Display+0x18>)
 8004c5a:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <Small_Stop_Display+0x1c>)
 8004c5c:	f00a fb82 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);

}
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	f7fffffe 	.word	0xf7fffffe
 8004c68:	20000a80 	.word	0x20000a80

08004c6c <Small_Start_Display>:

void Small_Start_Display(uint32_t *data)
{
	data[3] = data[3] | 0x0000010; //Rec on
 8004c6c:	2310      	movs	r3, #16
{
 8004c6e:	b510      	push	{r4, lr}
	data[3] = data[3] | 0x0000010; //Rec on
 8004c70:	68c2      	ldr	r2, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c72:	2106      	movs	r1, #6
	data[3] = data[3] | 0x0000010; //Rec on
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60c3      	str	r3, [r0, #12]
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004c78:	4a02      	ldr	r2, [pc, #8]	@ (8004c84 <Small_Start_Display+0x18>)
 8004c7a:	4803      	ldr	r0, [pc, #12]	@ (8004c88 <Small_Start_Display+0x1c>)
 8004c7c:	f00a fb72 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	f7fffffe 	.word	0xf7fffffe
 8004c88:	20000a80 	.word	0x20000a80

08004c8c <Mark_Display>:
{
	data[3] = data[3] | 0x4000000; //Delay on
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
void Mark_Display(uint32_t *data){
 8004c8c:	b510      	push	{r4, lr}
	if(device_config.mark == 1) {
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <Mark_Display+0x20>)
 8004c90:	7d1b      	ldrb	r3, [r3, #20]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d109      	bne.n	8004caa <Mark_Display+0x1e>
	data[0] = data[0] | 0x4000000;//Mark
 8004c96:	2380      	movs	r3, #128	@ 0x80
 8004c98:	6802      	ldr	r2, [r0, #0]
 8004c9a:	04db      	lsls	r3, r3, #19
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4803      	ldr	r0, [pc, #12]	@ (8004cb0 <Mark_Display+0x24>)
 8004ca4:	4a03      	ldr	r2, [pc, #12]	@ (8004cb4 <Mark_Display+0x28>)
 8004ca6:	f00a fb5d 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	}
}
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	20000b50 	.word	0x20000b50
 8004cb0:	20000a80 	.word	0x20000a80
 8004cb4:	f7fffffe 	.word	0xf7fffffe

08004cb8 <Max_Display>:
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}

void Max_Display(uint32_t *data){
	data[0] = data[0] | 0x2000000; //MAX
 8004cb8:	2380      	movs	r3, #128	@ 0x80
void Max_Display(uint32_t *data){
 8004cba:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x2000000; //MAX
 8004cbc:	6802      	ldr	r2, [r0, #0]
 8004cbe:	049b      	lsls	r3, r3, #18
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4802      	ldr	r0, [pc, #8]	@ (8004cd0 <Max_Display+0x18>)
 8004cc8:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <Max_Display+0x1c>)
 8004cca:	f00a fb4b 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	20000a80 	.word	0x20000a80
 8004cd4:	f7fffffe 	.word	0xf7fffffe

08004cd8 <Min_Display>:

void Min_Display(uint32_t *data){
	data[0] = data[0] | 0x0000020; //MIN
 8004cd8:	2320      	movs	r3, #32
void Min_Display(uint32_t *data){
 8004cda:	b510      	push	{r4, lr}
	data[0] = data[0] | 0x0000020; //MIN
 8004cdc:	6802      	ldr	r2, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004cde:	2100      	movs	r1, #0
	data[0] = data[0] | 0x0000020; //MIN
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	6003      	str	r3, [r0, #0]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004ce4:	4a02      	ldr	r2, [pc, #8]	@ (8004cf0 <Min_Display+0x18>)
 8004ce6:	4803      	ldr	r0, [pc, #12]	@ (8004cf4 <Min_Display+0x1c>)
 8004ce8:	f00a fb3c 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	f7fffffe 	.word	0xf7fffffe
 8004cf4:	20000a80 	.word	0x20000a80

08004cf8 <LCD_Clear_Display>:
void LCD_Clear(void)
{
	HAL_LCD_Clear(&hlcd);
}
void LCD_Clear_Display(uint32_t *data)
{
 8004cf8:	b570      	push	{r4, r5, r6, lr}
	HAL_LCD_Clear(&hlcd);
 8004cfa:	4d13      	ldr	r5, [pc, #76]	@ (8004d48 <LCD_Clear_Display+0x50>)
{
 8004cfc:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 8004cfe:	0028      	movs	r0, r5
 8004d00:	f00a fb91 	bl	800f426 <HAL_LCD_Clear>
	data[0] = 0x0000000;
 8004d04:	2100      	movs	r1, #0
	data[1] = 0x0000000;
	data[2] = 0x0000000;
	data[3] = 0x0000000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004d06:	4e11      	ldr	r6, [pc, #68]	@ (8004d4c <LCD_Clear_Display+0x54>)
 8004d08:	000b      	movs	r3, r1
 8004d0a:	0032      	movs	r2, r6
 8004d0c:	0028      	movs	r0, r5
	data[0] = 0x0000000;
 8004d0e:	6021      	str	r1, [r4, #0]
	data[1] = 0x0000000;
 8004d10:	6061      	str	r1, [r4, #4]
	data[2] = 0x0000000;
 8004d12:	60a1      	str	r1, [r4, #8]
	data[3] = 0x0000000;
 8004d14:	60e1      	str	r1, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8004d16:	f00a fb25 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8004d1a:	0032      	movs	r2, r6
 8004d1c:	0028      	movs	r0, r5
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	2102      	movs	r1, #2
 8004d22:	f00a fb1f 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8004d26:	0032      	movs	r2, r6
 8004d28:	0028      	movs	r0, r5
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	f00a fb19 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8004d32:	0032      	movs	r2, r6
 8004d34:	2106      	movs	r1, #6
 8004d36:	0028      	movs	r0, r5
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	f00a fb13 	bl	800f364 <HAL_LCD_Write>

	HAL_LCD_UpdateDisplayRequest(& hlcd);
 8004d3e:	0028      	movs	r0, r5
 8004d40:	f00a fb4d 	bl	800f3de <HAL_LCD_UpdateDisplayRequest>
}
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	20000a80 	.word	0x20000a80
 8004d4c:	f7fffffe 	.word	0xf7fffffe

08004d50 <LCD_Display_LP_Number>:
    ones      = number % 10;
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
}

void LCD_Display_LP_Number(uint8_t ten_thousands, uint8_t thousands, uint8_t hundreds, uint8_t tens, uint8_t ones, uint32_t *data)
{
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	0006      	movs	r6, r0
 8004d54:	b097      	sub	sp, #92	@ 0x5c
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	ab1c      	add	r3, sp, #112	@ 0x70
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	000c      	movs	r4, r1
 8004d5e:	0017      	movs	r7, r2
	uint32_t LP_data_tentho[4] = {0};
 8004d60:	2100      	movs	r1, #0
 8004d62:	2210      	movs	r2, #16
 8004d64:	a802      	add	r0, sp, #8
	uint32_t LP_data_tho[4] = {0};
 8004d66:	ad06      	add	r5, sp, #24
{
 8004d68:	9301      	str	r3, [sp, #4]
	uint32_t LP_data_tentho[4] = {0};
 8004d6a:	f015 f971 	bl	801a050 <memset>
	uint32_t LP_data_tho[4] = {0};
 8004d6e:	2210      	movs	r2, #16
 8004d70:	2100      	movs	r1, #0
 8004d72:	0028      	movs	r0, r5
 8004d74:	f015 f96c 	bl	801a050 <memset>
	uint32_t LP_data_hun[4] = {0};
 8004d78:	2210      	movs	r2, #16
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	a80a      	add	r0, sp, #40	@ 0x28
 8004d7e:	f015 f967 	bl	801a050 <memset>
	uint32_t LP_data_ten[4] = {0};
 8004d82:	2210      	movs	r2, #16
 8004d84:	2100      	movs	r1, #0
 8004d86:	a80e      	add	r0, sp, #56	@ 0x38
 8004d88:	f015 f962 	bl	801a050 <memset>
	uint32_t LP_data_one[4] = {0};
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	2100      	movs	r1, #0
 8004d90:	a812      	add	r0, sp, #72	@ 0x48
 8004d92:	f015 f95d 	bl	801a050 <memset>

	switch (ten_thousands)
 8004d96:	1e70      	subs	r0, r6, #1
 8004d98:	2808      	cmp	r0, #8
 8004d9a:	d846      	bhi.n	8004e2a <LCD_Display_LP_Number+0xda>
 8004d9c:	f7fb f9c6 	bl	800012c <__gnu_thumb1_case_uqi>
 8004da0:	231c1305 	.word	0x231c1305
 8004da4:	39332b25 	.word	0x39332b25
 8004da8:	3f          	.byte	0x3f
 8004da9:	00          	.byte	0x00
		    		LP_data_tentho[3] = 0x0000000;
		    		break;

		    	case 1:
		    		LP_data_tentho[0] = 0x0000000;
		    		LP_data_tentho[1] = 0x0020000;
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	029b      	lsls	r3, r3, #10
					LP_data_tentho[3] = 0x0020000;
					break;

				case 4:
					LP_data_tentho[0] = 0x0000000;
					LP_data_tentho[1] = 0x0020004;
 8004dae:	9303      	str	r3, [sp, #12]
					break;

				case 7:
					LP_data_tentho[0] = 0x0020000;
					LP_data_tentho[1] = 0x0020004;
					LP_data_tentho[2] = 0x0020000;
 8004db0:	9304      	str	r3, [sp, #16]
					LP_data_tentho[3] = 0x0020000;
					break;
		    }


	switch (thousands)
 8004db2:	2c09      	cmp	r4, #9
 8004db4:	d849      	bhi.n	8004e4a <LCD_Display_LP_Number+0xfa>
 8004db6:	0020      	movs	r0, r4
 8004db8:	f7fb f9b8 	bl	800012c <__gnu_thumb1_case_uqi>
 8004dbc:	5b514343 	.word	0x5b514343
 8004dc0:	766d6664 	.word	0x766d6664
 8004dc4:	837d      	.short	0x837d
					LP_data_tentho[0] = 0x0020000;
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020000;
 8004dcc:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0000004;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	9304      	str	r3, [sp, #16]
					LP_data_tentho[3] = 0x0020004;
 8004dd2:	4bb5      	ldr	r3, [pc, #724]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[3] = 0x0020004;
 8004dd4:	9305      	str	r3, [sp, #20]
					break;
 8004dd6:	e7ec      	b.n	8004db2 <LCD_Display_LP_Number+0x62>
					LP_data_tentho[0] = 0x0020000;
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020000;
 8004dde:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0020004;
 8004de0:	4ab1      	ldr	r2, [pc, #708]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[2] = 0x0020004;
 8004de2:	9204      	str	r2, [sp, #16]
					LP_data_tentho[3] = 0x0020000;
 8004de4:	e7f6      	b.n	8004dd4 <LCD_Display_LP_Number+0x84>
					LP_data_tentho[1] = 0x0020004;
 8004de6:	4bb0      	ldr	r3, [pc, #704]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
 8004de8:	e7e1      	b.n	8004dae <LCD_Display_LP_Number+0x5e>
					LP_data_tentho[0] = 0x0020000;
 8004dea:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0000004;
 8004dec:	2204      	movs	r2, #4
					LP_data_tentho[0] = 0x0020000;
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0000004;
 8004df2:	9203      	str	r2, [sp, #12]
 8004df4:	e7f4      	b.n	8004de0 <LCD_Display_LP_Number+0x90>
					LP_data_tentho[0] = 0x0020000;
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0000004;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	9303      	str	r3, [sp, #12]
					LP_data_tentho[2] = 0x0020004;
 8004e00:	4ba9      	ldr	r3, [pc, #676]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[2] = 0x0020004;
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	e7e6      	b.n	8004dd4 <LCD_Display_LP_Number+0x84>
					LP_data_tentho[0] = 0x0020000;
 8004e06:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0020004;
 8004e08:	4aa7      	ldr	r2, [pc, #668]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[0] = 0x0020000;
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e0e:	9203      	str	r2, [sp, #12]
 8004e10:	e7ce      	b.n	8004db0 <LCD_Display_LP_Number+0x60>
					LP_data_tentho[0] = 0x0020000;
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e18:	4ba3      	ldr	r3, [pc, #652]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	e7f1      	b.n	8004e02 <LCD_Display_LP_Number+0xb2>
					LP_data_tentho[0] = 0x0020000;
 8004e1e:	2380      	movs	r3, #128	@ 0x80
					LP_data_tentho[1] = 0x0020004;
 8004e20:	4aa1      	ldr	r2, [pc, #644]	@ (80050a8 <LCD_Display_LP_Number+0x358>)
					LP_data_tentho[0] = 0x0020000;
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	9302      	str	r3, [sp, #8]
					LP_data_tentho[1] = 0x0020004;
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	e7db      	b.n	8004de2 <LCD_Display_LP_Number+0x92>
	switch (thousands)
 8004e2a:	2c09      	cmp	r4, #9
 8004e2c:	d80d      	bhi.n	8004e4a <LCD_Display_LP_Number+0xfa>
 8004e2e:	0020      	movs	r0, r4
 8004e30:	f7fb f97c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004e34:	1f150705 	.word	0x1f150705
 8004e38:	3a312a28 	.word	0x3a312a28
 8004e3c:	4741      	.short	0x4741
	    {
			case 0:
				if(ten_thousands == 0)
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d003      	beq.n	8004e4a <LCD_Display_LP_Number+0xfa>
					LP_data_tho[2] = 0x0000100;
					LP_data_tho[3] = 0x0000180;
				}
	    	case 1:
	    		LP_data_tho[0] = 0x0000000;
	    		LP_data_tho[1] = 0x0000100;
 8004e42:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[3] = 0x0000100;
				break;

			case 4:
				LP_data_tho[0] = 0x0000000;
				LP_data_tho[1] = 0x0000180;
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	9307      	str	r3, [sp, #28]
				LP_data_tho[2] = 0x0000180;
 8004e48:	9308      	str	r3, [sp, #32]
				LP_data_tho[2] = 0x0000180;
				LP_data_tho[3] = 0x0000100;
				break;
	    }

    switch (hundreds)
 8004e4a:	2f09      	cmp	r7, #9
 8004e4c:	d84e      	bhi.n	8004eec <LCD_Display_LP_Number+0x19c>
 8004e4e:	0038      	movs	r0, r7
 8004e50:	f7fb f96c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004e54:	6258483e 	.word	0x6258483e
 8004e58:	7a716a68 	.word	0x7a716a68
 8004e5c:	8680      	.short	0x8680
				LP_data_tho[0] = 0x0000100;
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000100;
 8004e64:	606b      	str	r3, [r5, #4]
				LP_data_tho[2] = 0x0000080;
 8004e66:	3b80      	subs	r3, #128	@ 0x80
 8004e68:	60ab      	str	r3, [r5, #8]
				LP_data_tho[3] = 0x0000180;
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	33ff      	adds	r3, #255	@ 0xff
				LP_data_tho[3] = 0x0000180;
 8004e6e:	60eb      	str	r3, [r5, #12]
				break;
 8004e70:	e7eb      	b.n	8004e4a <LCD_Display_LP_Number+0xfa>
				LP_data_tho[0] = 0x0000100;
 8004e72:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[2] = 0x0000180;
 8004e74:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000100;
 8004e7a:	9307      	str	r3, [sp, #28]
				LP_data_tho[2] = 0x0000180;
 8004e7c:	0052      	lsls	r2, r2, #1
				LP_data_tho[2] = 0x0000180;
 8004e7e:	9208      	str	r2, [sp, #32]
				LP_data_tho[3] = 0x0000100;
 8004e80:	9309      	str	r3, [sp, #36]	@ 0x24
				break;
 8004e82:	e7e2      	b.n	8004e4a <LCD_Display_LP_Number+0xfa>
				LP_data_tho[1] = 0x0000180;
 8004e84:	23c0      	movs	r3, #192	@ 0xc0
 8004e86:	e7dd      	b.n	8004e44 <LCD_Display_LP_Number+0xf4>
				LP_data_tho[0] = 0x0000100;
 8004e88:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000080;
 8004e8a:	2280      	movs	r2, #128	@ 0x80
				LP_data_tho[0] = 0x0000100;
 8004e8c:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000080;
 8004e8e:	9207      	str	r2, [sp, #28]
				LP_data_tho[0] = 0x0000100;
 8004e90:	9306      	str	r3, [sp, #24]
				LP_data_tho[2] = 0x0000180;
 8004e92:	18d2      	adds	r2, r2, r3
 8004e94:	e7f3      	b.n	8004e7e <LCD_Display_LP_Number+0x12e>
				LP_data_tho[0] = 0x0000100;
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000080;
 8004e9c:	3b80      	subs	r3, #128	@ 0x80
 8004e9e:	606b      	str	r3, [r5, #4]
				LP_data_tho[2] = 0x0000180;
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	33ff      	adds	r3, #255	@ 0xff
				LP_data_tho[2] = 0x0000180;
 8004ea4:	60ab      	str	r3, [r5, #8]
 8004ea6:	e7e2      	b.n	8004e6e <LCD_Display_LP_Number+0x11e>
				LP_data_tho[0] = 0x0000100;
 8004ea8:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000180;
 8004eaa:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004eac:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000180;
 8004eae:	0052      	lsls	r2, r2, #1
				LP_data_tho[0] = 0x0000100;
 8004eb0:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004eb2:	9207      	str	r2, [sp, #28]
				LP_data_tho[2] = 0x0000100;
 8004eb4:	e7c8      	b.n	8004e48 <LCD_Display_LP_Number+0xf8>
				LP_data_tho[0] = 0x0000100;
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004ebc:	3380      	adds	r3, #128	@ 0x80
 8004ebe:	606b      	str	r3, [r5, #4]
 8004ec0:	e7f0      	b.n	8004ea4 <LCD_Display_LP_Number+0x154>
				LP_data_tho[0] = 0x0000100;
 8004ec2:	2380      	movs	r3, #128	@ 0x80
				LP_data_tho[1] = 0x0000180;
 8004ec4:	22c0      	movs	r2, #192	@ 0xc0
				LP_data_tho[0] = 0x0000100;
 8004ec6:	005b      	lsls	r3, r3, #1
				LP_data_tho[1] = 0x0000180;
 8004ec8:	0052      	lsls	r2, r2, #1
				LP_data_tho[0] = 0x0000100;
 8004eca:	9306      	str	r3, [sp, #24]
				LP_data_tho[1] = 0x0000180;
 8004ecc:	9207      	str	r2, [sp, #28]
 8004ece:	e7d6      	b.n	8004e7e <LCD_Display_LP_Number+0x12e>
    {
    	case 0:
    		if(ten_thousands == 0 && thousands == 0)
 8004ed0:	0033      	movs	r3, r6
 8004ed2:	4323      	orrs	r3, r4
 8004ed4:	d00a      	beq.n	8004eec <LCD_Display_LP_Number+0x19c>
    			LP_data_hun[2] = 0x0000000;
    			LP_data_hun[3] = 0x0000000;
    		}
    		else
    		{
    			LP_data_hun[0] = 0x0200000;
 8004ed6:	2280      	movs	r2, #128	@ 0x80
    			LP_data_hun[1] = 0x0200200;
 8004ed8:	4b74      	ldr	r3, [pc, #464]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
    			LP_data_hun[0] = 0x0200000;
 8004eda:	0392      	lsls	r2, r2, #14
 8004edc:	920a      	str	r2, [sp, #40]	@ 0x28
    			LP_data_hun[1] = 0x0200200;
 8004ede:	930b      	str	r3, [sp, #44]	@ 0x2c
			break;

		case 9:
			LP_data_hun[0] = 0x0200000;
			LP_data_hun[1] = 0x0200200;
			LP_data_hun[2] = 0x0200200;
 8004ee0:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ee2:	e017      	b.n	8004f14 <LCD_Display_LP_Number+0x1c4>
    		LP_data_hun[1] = 0x0200000;
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	039b      	lsls	r3, r3, #14
			LP_data_hun[1] = 0x0200200;
 8004ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004eea:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200000;
			break;
    }
    switch (tens)
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d84a      	bhi.n	8004f8a <LCD_Display_LP_Number+0x23a>
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fb f919 	bl	800012c <__gnu_thumb1_case_uqi>
 8004efa:	4439      	.short	0x4439
 8004efc:	68665f54 	.word	0x68665f54
 8004f00:	8780796f 	.word	0x8780796f
			LP_data_hun[0] = 0x0200000;
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	039b      	lsls	r3, r3, #14
 8004f08:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200000;
 8004f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0000200;
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200200;
 8004f12:	4b66      	ldr	r3, [pc, #408]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[3] = 0x0200000;
 8004f14:	930d      	str	r3, [sp, #52]	@ 0x34
			break;
 8004f16:	e7e9      	b.n	8004eec <LCD_Display_LP_Number+0x19c>
			LP_data_hun[0] = 0x0200000;
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	039b      	lsls	r3, r3, #14
 8004f1c:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200000;
 8004f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004f20:	4a62      	ldr	r2, [pc, #392]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f22:	e7dd      	b.n	8004ee0 <LCD_Display_LP_Number+0x190>
			LP_data_hun[1] = 0x0200200;
 8004f24:	4b61      	ldr	r3, [pc, #388]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f26:	e7df      	b.n	8004ee8 <LCD_Display_LP_Number+0x198>
			LP_data_hun[0] = 0x0200000;
 8004f28:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0000200;
 8004f2a:	2280      	movs	r2, #128	@ 0x80
			LP_data_hun[0] = 0x0200000;
 8004f2c:	039b      	lsls	r3, r3, #14
			LP_data_hun[1] = 0x0000200;
 8004f2e:	0092      	lsls	r2, r2, #2
			LP_data_hun[0] = 0x0200000;
 8004f30:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0000200;
 8004f32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f34:	e7f4      	b.n	8004f20 <LCD_Display_LP_Number+0x1d0>
			LP_data_hun[0] = 0x0200000;
 8004f36:	2380      	movs	r3, #128	@ 0x80
 8004f38:	039b      	lsls	r3, r3, #14
 8004f3a:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0000200;
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	930b      	str	r3, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200200;
 8004f42:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[2] = 0x0200200;
 8004f44:	930c      	str	r3, [sp, #48]	@ 0x30
			LP_data_hun[3] = 0x0200200;
 8004f46:	e7e5      	b.n	8004f14 <LCD_Display_LP_Number+0x1c4>
			LP_data_hun[0] = 0x0200000;
 8004f48:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0200200;
 8004f4a:	4a58      	ldr	r2, [pc, #352]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[0] = 0x0200000;
 8004f4c:	039b      	lsls	r3, r3, #14
 8004f4e:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f50:	920b      	str	r2, [sp, #44]	@ 0x2c
			LP_data_hun[2] = 0x0200000;
 8004f52:	e7ca      	b.n	8004eea <LCD_Display_LP_Number+0x19a>
			LP_data_hun[0] = 0x0200000;
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	039b      	lsls	r3, r3, #14
 8004f58:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f5a:	4b54      	ldr	r3, [pc, #336]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
 8004f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5e:	e7f1      	b.n	8004f44 <LCD_Display_LP_Number+0x1f4>
			LP_data_hun[0] = 0x0200000;
 8004f60:	2380      	movs	r3, #128	@ 0x80
			LP_data_hun[1] = 0x0200200;
 8004f62:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <LCD_Display_LP_Number+0x35c>)
			LP_data_hun[0] = 0x0200000;
 8004f64:	039b      	lsls	r3, r3, #14
 8004f66:	930a      	str	r3, [sp, #40]	@ 0x28
			LP_data_hun[1] = 0x0200200;
 8004f68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f6a:	e7b9      	b.n	8004ee0 <LCD_Display_LP_Number+0x190>
    {
    	case 0:
    		if(ten_thousands == 0 && thousands == 0 && hundreds == 0)
 8004f6c:	433c      	orrs	r4, r7
 8004f6e:	4334      	orrs	r4, r6
 8004f70:	d00b      	beq.n	8004f8a <LCD_Display_LP_Number+0x23a>
    			LP_data_ten[3] = 0x0000000;
    			break;
    		}
    		else
    		{
    			LP_data_ten[0] = 0x0080000;
 8004f72:	2180      	movs	r1, #128	@ 0x80
    			LP_data_ten[1] = 0x0090000;
 8004f74:	2390      	movs	r3, #144	@ 0x90
    			LP_data_ten[0] = 0x0080000;
 8004f76:	0309      	lsls	r1, r1, #12
    			LP_data_ten[1] = 0x0090000;
 8004f78:	031b      	lsls	r3, r3, #12
    			LP_data_ten[0] = 0x0080000;
 8004f7a:	910e      	str	r1, [sp, #56]	@ 0x38
    			LP_data_ten[1] = 0x0090000;
 8004f7c:	6053      	str	r3, [r2, #4]
			break;

		case 9:
			LP_data_ten[0] = 0x0080000;
			LP_data_ten[1] = 0x0090000;
			LP_data_ten[2] = 0x0090000;
 8004f7e:	6091      	str	r1, [r2, #8]
 8004f80:	e018      	b.n	8004fb4 <LCD_Display_LP_Number+0x264>
    		LP_data_ten[1] = 0x0080000;
 8004f82:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0080000;
 8004f88:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0080000;
			break;
    }
    switch (ones)
 8004f8a:	9901      	ldr	r1, [sp, #4]
 8004f8c:	ab12      	add	r3, sp, #72	@ 0x48
 8004f8e:	2909      	cmp	r1, #9
 8004f90:	d84a      	bhi.n	8005028 <LCD_Display_LP_Number+0x2d8>
 8004f92:	0008      	movs	r0, r1
 8004f94:	f7fb f8ca 	bl	800012c <__gnu_thumb1_case_uqi>
 8004f98:	655d453f 	.word	0x655d453f
 8004f9c:	78716c6a 	.word	0x78716c6a
 8004fa0:	827d      	.short	0x827d
			LP_data_ten[0] = 0x0080000;
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0080000;
 8004fa8:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0010000;
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0090000;
 8004fb0:	2390      	movs	r3, #144	@ 0x90
 8004fb2:	031b      	lsls	r3, r3, #12
			LP_data_ten[3] = 0x0080000;
 8004fb4:	60d3      	str	r3, [r2, #12]
			break;
 8004fb6:	e7e8      	b.n	8004f8a <LCD_Display_LP_Number+0x23a>
			LP_data_ten[0] = 0x0080000;
 8004fb8:	2380      	movs	r3, #128	@ 0x80
 8004fba:	031b      	lsls	r3, r3, #12
 8004fbc:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0080000;
 8004fbe:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0090000;
 8004fc0:	2190      	movs	r1, #144	@ 0x90
 8004fc2:	0309      	lsls	r1, r1, #12
 8004fc4:	e7db      	b.n	8004f7e <LCD_Display_LP_Number+0x22e>
			LP_data_ten[1] = 0x0090000;
 8004fc6:	2390      	movs	r3, #144	@ 0x90
 8004fc8:	e7dc      	b.n	8004f84 <LCD_Display_LP_Number+0x234>
			LP_data_ten[0] = 0x0080000;
 8004fca:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0010000;
 8004fcc:	2180      	movs	r1, #128	@ 0x80
			LP_data_ten[0] = 0x0080000;
 8004fce:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0010000;
 8004fd0:	0249      	lsls	r1, r1, #9
			LP_data_ten[0] = 0x0080000;
 8004fd2:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0010000;
 8004fd4:	6051      	str	r1, [r2, #4]
 8004fd6:	e7f3      	b.n	8004fc0 <LCD_Display_LP_Number+0x270>
			LP_data_ten[0] = 0x0080000;
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	031b      	lsls	r3, r3, #12
 8004fdc:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0010000;
 8004fde:	2380      	movs	r3, #128	@ 0x80
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	6053      	str	r3, [r2, #4]
			LP_data_ten[2] = 0x0090000;
 8004fe4:	2390      	movs	r3, #144	@ 0x90
 8004fe6:	031b      	lsls	r3, r3, #12
			LP_data_ten[2] = 0x0090000;
 8004fe8:	6093      	str	r3, [r2, #8]
			LP_data_ten[3] = 0x0090000;
 8004fea:	e7e3      	b.n	8004fb4 <LCD_Display_LP_Number+0x264>
			LP_data_ten[0] = 0x0080000;
 8004fec:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 8004fee:	2190      	movs	r1, #144	@ 0x90
			LP_data_ten[0] = 0x0080000;
 8004ff0:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0090000;
 8004ff2:	0309      	lsls	r1, r1, #12
			LP_data_ten[0] = 0x0080000;
 8004ff4:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8004ff6:	6051      	str	r1, [r2, #4]
 8004ff8:	e7c6      	b.n	8004f88 <LCD_Display_LP_Number+0x238>
			LP_data_ten[0] = 0x0080000;
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	031b      	lsls	r3, r3, #12
 8004ffe:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8005000:	2390      	movs	r3, #144	@ 0x90
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	e7ef      	b.n	8004fe8 <LCD_Display_LP_Number+0x298>
			LP_data_ten[0] = 0x0080000;
 8005008:	2380      	movs	r3, #128	@ 0x80
			LP_data_ten[1] = 0x0090000;
 800500a:	2190      	movs	r1, #144	@ 0x90
			LP_data_ten[0] = 0x0080000;
 800500c:	031b      	lsls	r3, r3, #12
			LP_data_ten[1] = 0x0090000;
 800500e:	0309      	lsls	r1, r1, #12
			LP_data_ten[0] = 0x0080000;
 8005010:	930e      	str	r3, [sp, #56]	@ 0x38
			LP_data_ten[1] = 0x0090000;
 8005012:	6051      	str	r1, [r2, #4]
 8005014:	e7b3      	b.n	8004f7e <LCD_Display_LP_Number+0x22e>
    {
    	case 0:
        	LP_data_one[0] = 0x0000002;
 8005016:	2002      	movs	r0, #2
        	LP_data_one[1] = 0x0000003;
 8005018:	2103      	movs	r1, #3
        	LP_data_one[0] = 0x0000002;
 800501a:	9012      	str	r0, [sp, #72]	@ 0x48
        	LP_data_one[1] = 0x0000003;
 800501c:	6059      	str	r1, [r3, #4]
			break;

		case 9:
			LP_data_one[0] = 0x0000002;
			LP_data_one[1] = 0x0000003;
			LP_data_one[2] = 0x0000003;
 800501e:	6098      	str	r0, [r3, #8]
 8005020:	e01d      	b.n	800505e <LCD_Display_LP_Number+0x30e>
    		LP_data_one[1] = 0x0000002;
 8005022:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 8005024:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005026:	6099      	str	r1, [r3, #8]
{
 8005028:	2100      	movs	r1, #0
			LP_data_one[3] = 0x0000002;
			break;
    }
    for(int i = 0; i<4; i++)
    {
    	data[i] = LP_data_tentho[i] | LP_data_tho[i] | LP_data_hun[i] | LP_data_ten[i] | LP_data_one[i];
 800502a:	2620      	movs	r6, #32
 800502c:	a802      	add	r0, sp, #8
 800502e:	586c      	ldr	r4, [r5, r1]
 8005030:	5840      	ldr	r0, [r0, r1]
 8005032:	4320      	orrs	r0, r4
 8005034:	ac02      	add	r4, sp, #8
 8005036:	19a4      	adds	r4, r4, r6
 8005038:	5864      	ldr	r4, [r4, r1]
 800503a:	4320      	orrs	r0, r4
 800503c:	5854      	ldr	r4, [r2, r1]
 800503e:	4320      	orrs	r0, r4
 8005040:	585c      	ldr	r4, [r3, r1]
 8005042:	4320      	orrs	r0, r4
 8005044:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8005046:	5060      	str	r0, [r4, r1]
    for(int i = 0; i<4; i++)
 8005048:	3104      	adds	r1, #4
 800504a:	2910      	cmp	r1, #16
 800504c:	d1ed      	bne.n	800502a <LCD_Display_LP_Number+0x2da>
    }
}
 800504e:	b017      	add	sp, #92	@ 0x5c
 8005050:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LP_data_one[0] = 0x0000002;
 8005052:	2102      	movs	r1, #2
 8005054:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000002;
 8005056:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000001;
 8005058:	3901      	subs	r1, #1
 800505a:	6099      	str	r1, [r3, #8]
			LP_data_one[3] = 0x0000003;
 800505c:	3102      	adds	r1, #2
			LP_data_one[3] = 0x0000002;
 800505e:	60d9      	str	r1, [r3, #12]
    for(int i = 0; i<4; i++)
 8005060:	e7e2      	b.n	8005028 <LCD_Display_LP_Number+0x2d8>
			LP_data_one[0] = 0x0000002;
 8005062:	2102      	movs	r1, #2
 8005064:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000002;
 8005066:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005068:	2003      	movs	r0, #3
 800506a:	e7d8      	b.n	800501e <LCD_Display_LP_Number+0x2ce>
			LP_data_one[1] = 0x0000003;
 800506c:	2103      	movs	r1, #3
 800506e:	e7d9      	b.n	8005024 <LCD_Display_LP_Number+0x2d4>
			LP_data_one[0] = 0x0000002;
 8005070:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000001;
 8005072:	2001      	movs	r0, #1
			LP_data_one[0] = 0x0000002;
 8005074:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000001;
 8005076:	6058      	str	r0, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005078:	e7f6      	b.n	8005068 <LCD_Display_LP_Number+0x318>
			LP_data_one[0] = 0x0000002;
 800507a:	2102      	movs	r1, #2
 800507c:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000001;
 800507e:	3901      	subs	r1, #1
 8005080:	6059      	str	r1, [r3, #4]
			LP_data_one[2] = 0x0000003;
 8005082:	3102      	adds	r1, #2
			LP_data_one[2] = 0x0000003;
 8005084:	6099      	str	r1, [r3, #8]
			LP_data_one[3] = 0x0000003;
 8005086:	e7ea      	b.n	800505e <LCD_Display_LP_Number+0x30e>
			LP_data_one[0] = 0x0000002;
 8005088:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 800508a:	2003      	movs	r0, #3
			LP_data_one[0] = 0x0000002;
 800508c:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 800508e:	6058      	str	r0, [r3, #4]
			LP_data_one[2] = 0x0000002;
 8005090:	e7c9      	b.n	8005026 <LCD_Display_LP_Number+0x2d6>
			LP_data_one[0] = 0x0000002;
 8005092:	2102      	movs	r1, #2
 8005094:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 8005096:	3101      	adds	r1, #1
 8005098:	6059      	str	r1, [r3, #4]
 800509a:	e7f3      	b.n	8005084 <LCD_Display_LP_Number+0x334>
			LP_data_one[0] = 0x0000002;
 800509c:	2102      	movs	r1, #2
			LP_data_one[1] = 0x0000003;
 800509e:	2003      	movs	r0, #3
			LP_data_one[0] = 0x0000002;
 80050a0:	9112      	str	r1, [sp, #72]	@ 0x48
			LP_data_one[1] = 0x0000003;
 80050a2:	6058      	str	r0, [r3, #4]
 80050a4:	e7bb      	b.n	800501e <LCD_Display_LP_Number+0x2ce>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	00020004 	.word	0x00020004
 80050ac:	00200200 	.word	0x00200200

080050b0 <LCD_DigitNumber_LP_Calculate>:
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b085      	sub	sp, #20
 80050b4:	9102      	str	r1, [sp, #8]
	number %= 10000;
 80050b6:	491b      	ldr	r1, [pc, #108]	@ (8005124 <LCD_DigitNumber_LP_Calculate+0x74>)
{
 80050b8:	0005      	movs	r5, r0
	number %= 10000;
 80050ba:	f7fb f8db 	bl	8000274 <__aeabi_uidivmod>
 80050be:	b28e      	uxth	r6, r1
    number %= 1000;
 80050c0:	21fa      	movs	r1, #250	@ 0xfa
 80050c2:	0030      	movs	r0, r6
 80050c4:	0089      	lsls	r1, r1, #2
 80050c6:	f7fb f8d5 	bl	8000274 <__aeabi_uidivmod>
 80050ca:	b28f      	uxth	r7, r1
    number %= 100;
 80050cc:	0038      	movs	r0, r7
 80050ce:	2164      	movs	r1, #100	@ 0x64
 80050d0:	f7fb f8d0 	bl	8000274 <__aeabi_uidivmod>
 80050d4:	b28c      	uxth	r4, r1
    tens      = number / 10;
 80050d6:	0020      	movs	r0, r4
 80050d8:	210a      	movs	r1, #10
 80050da:	f7fb f845 	bl	8000168 <__udivsi3>
    hundreds  = number / 100;
 80050de:	2164      	movs	r1, #100	@ 0x64
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050e0:	b2c3      	uxtb	r3, r0
    hundreds  = number / 100;
 80050e2:	0038      	movs	r0, r7
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050e4:	9303      	str	r3, [sp, #12]
    hundreds  = number / 100;
 80050e6:	f7fb f83f 	bl	8000168 <__udivsi3>
    thousands = number / 1000;
 80050ea:	21fa      	movs	r1, #250	@ 0xfa
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050ec:	b2c7      	uxtb	r7, r0
    thousands = number / 1000;
 80050ee:	0089      	lsls	r1, r1, #2
 80050f0:	0030      	movs	r0, r6
 80050f2:	f7fb f839 	bl	8000168 <__udivsi3>
	ten_thousands = number / 10000;
 80050f6:	490b      	ldr	r1, [pc, #44]	@ (8005124 <LCD_DigitNumber_LP_Calculate+0x74>)
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 80050f8:	b2c6      	uxtb	r6, r0
	ten_thousands = number / 10000;
 80050fa:	0028      	movs	r0, r5
 80050fc:	f7fb f834 	bl	8000168 <__udivsi3>
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 8005100:	9b02      	ldr	r3, [sp, #8]
 8005102:	b2c5      	uxtb	r5, r0
    ones      = number % 10;
 8005104:	210a      	movs	r1, #10
 8005106:	0020      	movs	r0, r4
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 8005108:	9301      	str	r3, [sp, #4]
    ones      = number % 10;
 800510a:	f7fb f8b3 	bl	8000274 <__aeabi_uidivmod>
    LCD_Display_LP_Number(ten_thousands, thousands, hundreds, tens, ones, data);
 800510e:	b2c9      	uxtb	r1, r1
 8005110:	9100      	str	r1, [sp, #0]
 8005112:	003a      	movs	r2, r7
 8005114:	0031      	movs	r1, r6
 8005116:	0028      	movs	r0, r5
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	f7ff fe19 	bl	8004d50 <LCD_Display_LP_Number>
}
 800511e:	b005      	add	sp, #20
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	00002710 	.word	0x00002710

08005128 <LCD_Display_LP>:
{
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	0007      	movs	r7, r0
 800512c:	000c      	movs	r4, r1
	HAL_LCD_Clear(&hlcd);
 800512e:	4d16      	ldr	r5, [pc, #88]	@ (8005188 <LCD_Display_LP+0x60>)
{
 8005130:	0016      	movs	r6, r2
	HAL_LCD_Clear(&hlcd);
 8005132:	0028      	movs	r0, r5
 8005134:	f00a f977 	bl	800f426 <HAL_LCD_Clear>
	LCD_DigitNumber_LP_Calculate(index, data);
 8005138:	0021      	movs	r1, r4
 800513a:	b2b8      	uxth	r0, r7
 800513c:	f7ff ffb8 	bl	80050b0 <LCD_DigitNumber_LP_Calculate>
	if (Packet_dose_unit)
 8005140:	2310      	movs	r3, #16
 8005142:	2e00      	cmp	r6, #0
 8005144:	d01b      	beq.n	800517e <LCD_Display_LP+0x56>
	data[1] = data[1] | 0x0000010; //L-R on
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	4313      	orrs	r3, r2
 800514a:	6063      	str	r3, [r4, #4]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800514c:	0028      	movs	r0, r5
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	2100      	movs	r1, #0
 8005152:	4a0e      	ldr	r2, [pc, #56]	@ (800518c <LCD_Display_LP+0x64>)
 8005154:	f00a f906 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005158:	0028      	movs	r0, r5
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	2102      	movs	r1, #2
 800515e:	4a0b      	ldr	r2, [pc, #44]	@ (800518c <LCD_Display_LP+0x64>)
 8005160:	f00a f900 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005164:	0028      	movs	r0, r5
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	2104      	movs	r1, #4
 800516a:	4a08      	ldr	r2, [pc, #32]	@ (800518c <LCD_Display_LP+0x64>)
 800516c:	f00a f8fa 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005170:	0028      	movs	r0, r5
 8005172:	2106      	movs	r1, #6
 8005174:	68e3      	ldr	r3, [r4, #12]
 8005176:	4a05      	ldr	r2, [pc, #20]	@ (800518c <LCD_Display_LP+0x64>)
 8005178:	f00a f8f4 	bl	800f364 <HAL_LCD_Write>
}
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	data[0] = data[0] | 0x0000010; //L-T on
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	e7e2      	b.n	800514c <LCD_Display_LP+0x24>
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	20000a80 	.word	0x20000a80
 800518c:	f7fffffe 	.word	0xf7fffffe

08005190 <LCD_DigitNumber_InTime_Calculate>:
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
}
void LCD_DigitNumber_InTime_Calculate(uint16_t number, uint32_t *data)
{
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b08f      	sub	sp, #60	@ 0x3c
 8005194:	0004      	movs	r4, r0
	uint8_t s1= 0;
	uint8_t s0= 0;
	uint8_t hours = 0;
	uint8_t minutes = 0;
	uint8_t seconds = 0;
	uint32_t data_hour[4] = {0};
 8005196:	2210      	movs	r2, #16
{
 8005198:	9100      	str	r1, [sp, #0]
	uint32_t data_min[4] = {0};
 800519a:	af06      	add	r7, sp, #24
	uint32_t data_hour[4] = {0};
 800519c:	2100      	movs	r1, #0
 800519e:	a802      	add	r0, sp, #8
 80051a0:	f014 ff56 	bl	801a050 <memset>
	uint32_t data_min[4] = {0};
 80051a4:	2210      	movs	r2, #16
 80051a6:	2100      	movs	r1, #0
 80051a8:	0038      	movs	r0, r7
 80051aa:	f014 ff51 	bl	801a050 <memset>
	uint32_t data_sec[4] = {0};
 80051ae:	2210      	movs	r2, #16
 80051b0:	2100      	movs	r1, #0
 80051b2:	a80a      	add	r0, sp, #40	@ 0x28
 80051b4:	f014 ff4c 	bl	801a050 <memset>

    hours   = number / 3600;
 80051b8:	21e1      	movs	r1, #225	@ 0xe1
 80051ba:	0020      	movs	r0, r4
 80051bc:	0109      	lsls	r1, r1, #4
 80051be:	f7fa ffd3 	bl	8000168 <__udivsi3>
    number %= 3600;
 80051c2:	21e1      	movs	r1, #225	@ 0xe1
    hours   = number / 3600;
 80051c4:	b2c6      	uxtb	r6, r0
    number %= 3600;
 80051c6:	0109      	lsls	r1, r1, #4
 80051c8:	0020      	movs	r0, r4
 80051ca:	f7fb f853 	bl	8000274 <__aeabi_uidivmod>
 80051ce:	b28c      	uxth	r4, r1
    minutes = number / 60;
 80051d0:	0020      	movs	r0, r4
 80051d2:	213c      	movs	r1, #60	@ 0x3c
 80051d4:	f7fa ffc8 	bl	8000168 <__udivsi3>
    seconds = number % 60;
 80051d8:	213c      	movs	r1, #60	@ 0x3c
    minutes = number / 60;
 80051da:	b2c5      	uxtb	r5, r0
    seconds = number % 60;
 80051dc:	0020      	movs	r0, r4
 80051de:	f7fb f849 	bl	8000274 <__aeabi_uidivmod>

    h1 = hours / 10;
    h0 = hours % 10;
 80051e2:	0030      	movs	r0, r6
    seconds = number % 60;
 80051e4:	b2cc      	uxtb	r4, r1
    h0 = hours % 10;
 80051e6:	210a      	movs	r1, #10
 80051e8:	f7fb f844 	bl	8000274 <__aeabi_uidivmod>
    h1 = hours / 10;
 80051ec:	0030      	movs	r0, r6
    m1 = minutes / 10;
    m0 = minutes % 10;
    s1 = seconds / 10;
    s0 = seconds % 10;

    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051ee:	b2cb      	uxtb	r3, r1
    h1 = hours / 10;
 80051f0:	210a      	movs	r1, #10
    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051f2:	9301      	str	r3, [sp, #4]
    h1 = hours / 10;
 80051f4:	f7fa ffb8 	bl	8000168 <__udivsi3>
    LCD_Display_Year_Hour_Number(h1, h0, data_hour);
 80051f8:	aa02      	add	r2, sp, #8
 80051fa:	9901      	ldr	r1, [sp, #4]
 80051fc:	b2c0      	uxtb	r0, r0
 80051fe:	f7ff f809 	bl	8004214 <LCD_Display_Year_Hour_Number>
    m0 = minutes % 10;
 8005202:	0028      	movs	r0, r5
 8005204:	210a      	movs	r1, #10
 8005206:	f7fb f835 	bl	8000274 <__aeabi_uidivmod>
    m1 = minutes / 10;
 800520a:	0028      	movs	r0, r5
    LCD_Display_Month_Min_Number(m1, m0, data_min);
 800520c:	b2ce      	uxtb	r6, r1
    m1 = minutes / 10;
 800520e:	210a      	movs	r1, #10
 8005210:	f7fa ffaa 	bl	8000168 <__udivsi3>
    LCD_Display_Month_Min_Number(m1, m0, data_min);
 8005214:	003a      	movs	r2, r7
 8005216:	0031      	movs	r1, r6
 8005218:	b2c0      	uxtb	r0, r0
 800521a:	f7ff f8e1 	bl	80043e0 <LCD_Display_Month_Min_Number>
    s0 = seconds % 10;
 800521e:	210a      	movs	r1, #10
 8005220:	0020      	movs	r0, r4
 8005222:	f7fb f827 	bl	8000274 <__aeabi_uidivmod>
    s1 = seconds / 10;
 8005226:	0020      	movs	r0, r4
    LCD_Display_Day_Sec_Number(s1, s0, data_sec);
 8005228:	b2cd      	uxtb	r5, r1
    s1 = seconds / 10;
 800522a:	210a      	movs	r1, #10
 800522c:	f7fa ff9c 	bl	8000168 <__udivsi3>
    LCD_Display_Day_Sec_Number(s1, s0, data_sec);
 8005230:	0029      	movs	r1, r5
 8005232:	b2c0      	uxtb	r0, r0
 8005234:	aa0a      	add	r2, sp, #40	@ 0x28
 8005236:	f7ff f998 	bl	800456a <LCD_Display_Day_Sec_Number>
 800523a:	2300      	movs	r3, #0
    for(int i=0; i<4; i++)
    {
    	data[i] = data_hour[i] | data_min[i] | data_sec[i];
 800523c:	2020      	movs	r0, #32
 800523e:	aa02      	add	r2, sp, #8
 8005240:	58f9      	ldr	r1, [r7, r3]
 8005242:	58d2      	ldr	r2, [r2, r3]
 8005244:	430a      	orrs	r2, r1
 8005246:	a902      	add	r1, sp, #8
 8005248:	1809      	adds	r1, r1, r0
 800524a:	58c9      	ldr	r1, [r1, r3]
 800524c:	430a      	orrs	r2, r1
 800524e:	9900      	ldr	r1, [sp, #0]
 8005250:	50ca      	str	r2, [r1, r3]
    for(int i=0; i<4; i++)
 8005252:	3304      	adds	r3, #4
 8005254:	2b10      	cmp	r3, #16
 8005256:	d1f1      	bne.n	800523c <LCD_DigitNumber_InTime_Calculate+0xac>
    }
}
 8005258:	b00f      	add	sp, #60	@ 0x3c
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800525c <LCD_Display_DelayMode>:
{
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	000c      	movs	r4, r1
	memset(data, 0, sizeof(data));
 8005260:	2704      	movs	r7, #4
{
 8005262:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 8005264:	4d18      	ldr	r5, [pc, #96]	@ (80052c8 <LCD_Display_DelayMode+0x6c>)
 8005266:	0028      	movs	r0, r5
 8005268:	f00a f8dd 	bl	800f426 <HAL_LCD_Clear>
	memset(data, 0, sizeof(data));
 800526c:	003a      	movs	r2, r7
 800526e:	2100      	movs	r1, #0
 8005270:	0020      	movs	r0, r4
 8005272:	f014 feed 	bl	801a050 <memset>
	HAL_LCD_Clear(&hlcd);
 8005276:	0028      	movs	r0, r5
 8005278:	f00a f8d5 	bl	800f426 <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 800527c:	0021      	movs	r1, r4
 800527e:	b2b0      	uxth	r0, r6
 8005280:	f7ff ff86 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <LCD_Display_DelayMode+0x70>)
	data[3] = data[3] | 0x4000000;
 8005288:	68e1      	ldr	r1, [r4, #12]
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 800528a:	4313      	orrs	r3, r2
	data[3] = data[3] | 0x4000000;
 800528c:	2280      	movs	r2, #128	@ 0x80
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800528e:	4e10      	ldr	r6, [pc, #64]	@ (80052d0 <LCD_Display_DelayMode+0x74>)
	data[3] = data[3] | 0x4000000;
 8005290:	04d2      	lsls	r2, r2, #19
 8005292:	430a      	orrs	r2, r1
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005294:	0028      	movs	r0, r5
	data[0] = data[0] | 0x0010080; // 'Delay, :' 표시
 8005296:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x4000000;
 8005298:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800529a:	2100      	movs	r1, #0
 800529c:	0032      	movs	r2, r6
 800529e:	f00a f861 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 80052a2:	0032      	movs	r2, r6
 80052a4:	0028      	movs	r0, r5
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	2102      	movs	r1, #2
 80052aa:	f00a f85b 	bl	800f364 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80052ae:	0032      	movs	r2, r6
 80052b0:	0039      	movs	r1, r7
 80052b2:	0028      	movs	r0, r5
 80052b4:	68a3      	ldr	r3, [r4, #8]
 80052b6:	f00a f855 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80052ba:	0032      	movs	r2, r6
 80052bc:	0028      	movs	r0, r5
 80052be:	2106      	movs	r1, #6
 80052c0:	68e3      	ldr	r3, [r4, #12]
 80052c2:	f00a f84f 	bl	800f364 <HAL_LCD_Write>
}
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c8:	20000a80 	.word	0x20000a80
 80052cc:	00010080 	.word	0x00010080
 80052d0:	f7fffffe 	.word	0xf7fffffe

080052d4 <LCD_Display_InTime_LT>:
{
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	000c      	movs	r4, r1
 80052d8:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 80052da:	4d18      	ldr	r5, [pc, #96]	@ (800533c <LCD_Display_InTime_LT+0x68>)
 80052dc:	0028      	movs	r0, r5
 80052de:	f00a f8a2 	bl	800f426 <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 80052e2:	0021      	movs	r1, r4
 80052e4:	b2b0      	uxth	r0, r6
 80052e6:	f7ff ff53 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <LCD_Display_InTime_LT+0x6c>)
	data[1] = data[1] | 0x200B000;
 80052ee:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 80052f0:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x200B000;
 80052f2:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <LCD_Display_InTime_LT+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80052f4:	4e14      	ldr	r6, [pc, #80]	@ (8005348 <LCD_Display_InTime_LT+0x74>)
	data[1] = data[1] | 0x200B000;
 80052f6:	430a      	orrs	r2, r1
 80052f8:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300B020;
 80052fa:	68a1      	ldr	r1, [r4, #8]
 80052fc:	4a13      	ldr	r2, [pc, #76]	@ (800534c <LCD_Display_InTime_LT+0x78>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80052fe:	0028      	movs	r0, r5
	data[2] = data[2] | 0x300B020;
 8005300:	430a      	orrs	r2, r1
 8005302:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x100E030;
 8005304:	68e1      	ldr	r1, [r4, #12]
 8005306:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <LCD_Display_InTime_LT+0x7c>)
	data[0] = data[0] | 0x1011090;//'REC, :, StAr,LT'표시
 8005308:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x100E030;
 800530a:	430a      	orrs	r2, r1
 800530c:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800530e:	2100      	movs	r1, #0
 8005310:	0032      	movs	r2, r6
 8005312:	f00a f827 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005316:	0032      	movs	r2, r6
 8005318:	0028      	movs	r0, r5
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	2102      	movs	r1, #2
 800531e:	f00a f821 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005322:	0032      	movs	r2, r6
 8005324:	0028      	movs	r0, r5
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	2104      	movs	r1, #4
 800532a:	f00a f81b 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 800532e:	0032      	movs	r2, r6
 8005330:	0028      	movs	r0, r5
 8005332:	2106      	movs	r1, #6
 8005334:	68e3      	ldr	r3, [r4, #12]
 8005336:	f00a f815 	bl	800f364 <HAL_LCD_Write>
}
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	20000a80 	.word	0x20000a80
 8005340:	01011090 	.word	0x01011090
 8005344:	0200b000 	.word	0x0200b000
 8005348:	f7fffffe 	.word	0xf7fffffe
 800534c:	0300b020 	.word	0x0300b020
 8005350:	0100e030 	.word	0x0100e030

08005354 <LCD_Display_InTime_LR>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	000c      	movs	r4, r1
 8005358:	0006      	movs	r6, r0
	HAL_LCD_Clear(&hlcd);
 800535a:	4d18      	ldr	r5, [pc, #96]	@ (80053bc <LCD_Display_InTime_LR+0x68>)
 800535c:	0028      	movs	r0, r5
 800535e:	f00a f862 	bl	800f426 <HAL_LCD_Clear>
	LCD_DigitNumber_InTime_Calculate(sec, data);
 8005362:	0021      	movs	r1, r4
 8005364:	b2b0      	uxth	r0, r6
 8005366:	f7ff ff13 	bl	8005190 <LCD_DigitNumber_InTime_Calculate>
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <LCD_Display_InTime_LR+0x6c>)
	data[1] = data[1] | 0x200B010;
 800536e:	6861      	ldr	r1, [r4, #4]
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 8005370:	4313      	orrs	r3, r2
	data[1] = data[1] | 0x200B010;
 8005372:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <LCD_Display_InTime_LR+0x70>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005374:	4e14      	ldr	r6, [pc, #80]	@ (80053c8 <LCD_Display_InTime_LR+0x74>)
	data[1] = data[1] | 0x200B010;
 8005376:	430a      	orrs	r2, r1
 8005378:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x300B020;
 800537a:	68a1      	ldr	r1, [r4, #8]
 800537c:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <LCD_Display_InTime_LR+0x78>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800537e:	0028      	movs	r0, r5
	data[2] = data[2] | 0x300B020;
 8005380:	430a      	orrs	r2, r1
 8005382:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x100E030;
 8005384:	68e1      	ldr	r1, [r4, #12]
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <LCD_Display_InTime_LR+0x7c>)
	data[0] = data[0] | 0x1011080;//'REC, :, StAr,LR'표시
 8005388:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x100E030;
 800538a:	430a      	orrs	r2, r1
 800538c:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 800538e:	2100      	movs	r1, #0
 8005390:	0032      	movs	r2, r6
 8005392:	f009 ffe7 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 8005396:	0032      	movs	r2, r6
 8005398:	0028      	movs	r0, r5
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	2102      	movs	r1, #2
 800539e:	f009 ffe1 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 80053a2:	0032      	movs	r2, r6
 80053a4:	0028      	movs	r0, r5
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	2104      	movs	r1, #4
 80053aa:	f009 ffdb 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 80053ae:	0032      	movs	r2, r6
 80053b0:	0028      	movs	r0, r5
 80053b2:	2106      	movs	r1, #6
 80053b4:	68e3      	ldr	r3, [r4, #12]
 80053b6:	f009 ffd5 	bl	800f364 <HAL_LCD_Write>
}
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	20000a80 	.word	0x20000a80
 80053c0:	01011080 	.word	0x01011080
 80053c4:	0200b010 	.word	0x0200b010
 80053c8:	f7fffffe 	.word	0xf7fffffe
 80053cc:	0300b020 	.word	0x0300b020
 80053d0:	0100e030 	.word	0x0100e030

080053d4 <LCD_Display_EndMode>:

void LCD_Display_EndMode(uint32_t *data)
{
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	0004      	movs	r4, r0
	HAL_LCD_Clear(&hlcd);
 80053d8:	4d15      	ldr	r5, [pc, #84]	@ (8005430 <LCD_Display_EndMode+0x5c>)
	memset(data, 0, sizeof(data));
	data[0] = data[0] | 0x1000000; // 'End' 표시
	data[1] = data[1] | 0x2001000;
	data[2] = data[2] | 0x200F000;
	data[3] = data[3] | 0x300B000;
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80053da:	4e16      	ldr	r6, [pc, #88]	@ (8005434 <LCD_Display_EndMode+0x60>)
	HAL_LCD_Clear(&hlcd);
 80053dc:	0028      	movs	r0, r5
 80053de:	f00a f822 	bl	800f426 <HAL_LCD_Clear>
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053e2:	2380      	movs	r3, #128	@ 0x80
	data[1] = data[1] | 0x2001000;
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <LCD_Display_EndMode+0x64>)
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053e8:	045b      	lsls	r3, r3, #17
	data[1] = data[1] | 0x2001000;
 80053ea:	430a      	orrs	r2, r1
 80053ec:	6062      	str	r2, [r4, #4]
	data[2] = data[2] | 0x200F000;
 80053ee:	68a1      	ldr	r1, [r4, #8]
 80053f0:	4a12      	ldr	r2, [pc, #72]	@ (800543c <LCD_Display_EndMode+0x68>)
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 80053f2:	0028      	movs	r0, r5
	data[2] = data[2] | 0x200F000;
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60a2      	str	r2, [r4, #8]
	data[3] = data[3] | 0x300B000;
 80053f8:	68e1      	ldr	r1, [r4, #12]
 80053fa:	4a11      	ldr	r2, [pc, #68]	@ (8005440 <LCD_Display_EndMode+0x6c>)
	data[0] = data[0] | 0x1000000; // 'End' 표시
 80053fc:	6023      	str	r3, [r4, #0]
	data[3] = data[3] | 0x300B000;
 80053fe:	430a      	orrs	r2, r1
 8005400:	60e2      	str	r2, [r4, #12]
	HAL_LCD_Write(& hlcd, LCD_COM0 , ~(LCD_SEG0 | LCD_SEG27),data[0]);
 8005402:	2100      	movs	r1, #0
 8005404:	0032      	movs	r2, r6
 8005406:	f009 ffad 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM1 , ~(LCD_SEG0 | LCD_SEG27),data[1]);
 800540a:	0032      	movs	r2, r6
 800540c:	0028      	movs	r0, r5
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	2102      	movs	r1, #2
 8005412:	f009 ffa7 	bl	800f364 <HAL_LCD_Write>
    HAL_LCD_Write(& hlcd, LCD_COM2 , ~(LCD_SEG0 | LCD_SEG27),data[2]);
 8005416:	0032      	movs	r2, r6
 8005418:	0028      	movs	r0, r5
 800541a:	68a3      	ldr	r3, [r4, #8]
 800541c:	2104      	movs	r1, #4
 800541e:	f009 ffa1 	bl	800f364 <HAL_LCD_Write>
	HAL_LCD_Write(& hlcd, LCD_COM3 , ~(LCD_SEG0 | LCD_SEG27),data[3]);
 8005422:	0032      	movs	r2, r6
 8005424:	0028      	movs	r0, r5
 8005426:	2106      	movs	r1, #6
 8005428:	68e3      	ldr	r3, [r4, #12]
 800542a:	f009 ff9b 	bl	800f364 <HAL_LCD_Write>
	//HAL_LCD_UpdateDisplayRequest(& hlcd);
	//stop 글자, stop 표시
}
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	20000a80 	.word	0x20000a80
 8005434:	f7fffffe 	.word	0xf7fffffe
 8005438:	02001000 	.word	0x02001000
 800543c:	0200f000 	.word	0x0200f000
 8005440:	0300b000 	.word	0x0300b000

08005444 <days_in_month>:

    // --- PWR Wakeup Flag (모든 소스 공통) ---
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
}
static bool is_leap(uint16_t y2000){ uint16_t y=2000+y2000; return ((y%4==0)&& (y%100!=0)) || (y%400==0); }
static uint8_t days_in_month(uint8_t m, uint8_t y2000){
 8005444:	b510      	push	{r4, lr}
    static const uint8_t dim[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 8005446:	2802      	cmp	r0, #2
 8005448:	d116      	bne.n	8005478 <days_in_month+0x34>
static bool is_leap(uint16_t y2000){ uint16_t y=2000+y2000; return ((y%4==0)&& (y%100!=0)) || (y%400==0); }
 800544a:	23fa      	movs	r3, #250	@ 0xfa
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	18cc      	adds	r4, r1, r3
 8005450:	0789      	lsls	r1, r1, #30
 8005452:	d107      	bne.n	8005464 <days_in_month+0x20>
 8005454:	2164      	movs	r1, #100	@ 0x64
 8005456:	0020      	movs	r0, r4
 8005458:	f7fa ff0c 	bl	8000274 <__aeabi_uidivmod>
 800545c:	b289      	uxth	r1, r1
 800545e:	2001      	movs	r0, #1
 8005460:	2900      	cmp	r1, #0
 8005462:	d107      	bne.n	8005474 <days_in_month+0x30>
 8005464:	21c8      	movs	r1, #200	@ 0xc8
 8005466:	0020      	movs	r0, r4
 8005468:	0049      	lsls	r1, r1, #1
 800546a:	f7fa ff03 	bl	8000274 <__aeabi_uidivmod>
 800546e:	b288      	uxth	r0, r1
 8005470:	4243      	negs	r3, r0
 8005472:	4158      	adcs	r0, r3
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 8005474:	301c      	adds	r0, #28
}
 8005476:	bd10      	pop	{r4, pc}
    return (m==2) ? dim[1] + (is_leap(y2000)?1:0) : dim[m-1];
 8005478:	4b01      	ldr	r3, [pc, #4]	@ (8005480 <days_in_month+0x3c>)
 800547a:	5cc0      	ldrb	r0, [r0, r3]
 800547c:	e7fb      	b.n	8005476 <days_in_month+0x32>
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	0801fd82 	.word	0x0801fd82

08005484 <read_temperature_steinhart_low>:
{
 8005484:	b570      	push	{r4, r5, r6, lr}
    r_ntc = RPULLUP_low *((float)adc_value/(4095 - (float)adc_value));
 8005486:	f7fc f9a1 	bl	80017cc <__aeabi_ui2f>
 800548a:	1c04      	adds	r4, r0, #0
 800548c:	1c01      	adds	r1, r0, #0
 800548e:	4815      	ldr	r0, [pc, #84]	@ (80054e4 <read_temperature_steinhart_low+0x60>)
 8005490:	f7fb feb2 	bl	80011f8 <__aeabi_fsub>
 8005494:	1c01      	adds	r1, r0, #0
 8005496:	1c20      	adds	r0, r4, #0
 8005498:	f7fb fb86 	bl	8000ba8 <__aeabi_fdiv>
 800549c:	4912      	ldr	r1, [pc, #72]	@ (80054e8 <read_temperature_steinhart_low+0x64>)
 800549e:	f7fb fd51 	bl	8000f44 <__aeabi_fmul>
    ln_r = logf(r_ntc);
 80054a2:	f016 feef 	bl	801c284 <logf>
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 80054a6:	4911      	ldr	r1, [pc, #68]	@ (80054ec <read_temperature_steinhart_low+0x68>)
    ln_r = logf(r_ntc);
 80054a8:	1c04      	adds	r4, r0, #0
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 80054aa:	f7fb fd4b 	bl	8000f44 <__aeabi_fmul>
 80054ae:	1c21      	adds	r1, r4, #0
 80054b0:	f7fb fd48 	bl	8000f44 <__aeabi_fmul>
 80054b4:	1c21      	adds	r1, r4, #0
 80054b6:	f7fb fd45 	bl	8000f44 <__aeabi_fmul>
 80054ba:	490d      	ldr	r1, [pc, #52]	@ (80054f0 <read_temperature_steinhart_low+0x6c>)
 80054bc:	1c05      	adds	r5, r0, #0
 80054be:	1c20      	adds	r0, r4, #0
 80054c0:	f7fb fd40 	bl	8000f44 <__aeabi_fmul>
 80054c4:	490b      	ldr	r1, [pc, #44]	@ (80054f4 <read_temperature_steinhart_low+0x70>)
 80054c6:	f7fb f97d 	bl	80007c4 <__aeabi_fadd>
 80054ca:	1c01      	adds	r1, r0, #0
 80054cc:	1c28      	adds	r0, r5, #0
 80054ce:	f7fb f979 	bl	80007c4 <__aeabi_fadd>
 80054d2:	1c01      	adds	r1, r0, #0
    T_K = 1.0f / inv_T;
 80054d4:	20fe      	movs	r0, #254	@ 0xfe
 80054d6:	0580      	lsls	r0, r0, #22
 80054d8:	f7fb fb66 	bl	8000ba8 <__aeabi_fdiv>
    T_C = T_K - 273.15f;
 80054dc:	4906      	ldr	r1, [pc, #24]	@ (80054f8 <read_temperature_steinhart_low+0x74>)
 80054de:	f7fb fe8b 	bl	80011f8 <__aeabi_fsub>
}
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	457ff000 	.word	0x457ff000
 80054e8:	49dbba00 	.word	0x49dbba00
 80054ec:	33ba65a6 	.word	0x33ba65a6
 80054f0:	3975c4dc 	.word	0x3975c4dc
 80054f4:	3a93c6dc 	.word	0x3a93c6dc
 80054f8:	43889333 	.word	0x43889333

080054fc <read_temperature_steinhart_middle>:
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
    r_ntc = RPULLUP_middle *((float)adc_value/(4095 - (float)adc_value));
 80054fe:	f7fc f965 	bl	80017cc <__aeabi_ui2f>
 8005502:	1c04      	adds	r4, r0, #0
 8005504:	1c01      	adds	r1, r0, #0
 8005506:	4815      	ldr	r0, [pc, #84]	@ (800555c <read_temperature_steinhart_middle+0x60>)
 8005508:	f7fb fe76 	bl	80011f8 <__aeabi_fsub>
 800550c:	1c01      	adds	r1, r0, #0
 800550e:	1c20      	adds	r0, r4, #0
 8005510:	f7fb fb4a 	bl	8000ba8 <__aeabi_fdiv>
 8005514:	4912      	ldr	r1, [pc, #72]	@ (8005560 <read_temperature_steinhart_middle+0x64>)
 8005516:	f7fb fd15 	bl	8000f44 <__aeabi_fmul>
    ln_r = logf(r_ntc);
 800551a:	f016 feb3 	bl	801c284 <logf>
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 800551e:	4911      	ldr	r1, [pc, #68]	@ (8005564 <read_temperature_steinhart_middle+0x68>)
    ln_r = logf(r_ntc);
 8005520:	1c04      	adds	r4, r0, #0
    inv_T = A + B * ln_r + C * ln_r * ln_r * ln_r;
 8005522:	f7fb fd0f 	bl	8000f44 <__aeabi_fmul>
 8005526:	1c21      	adds	r1, r4, #0
 8005528:	f7fb fd0c 	bl	8000f44 <__aeabi_fmul>
 800552c:	1c21      	adds	r1, r4, #0
 800552e:	f7fb fd09 	bl	8000f44 <__aeabi_fmul>
 8005532:	490d      	ldr	r1, [pc, #52]	@ (8005568 <read_temperature_steinhart_middle+0x6c>)
 8005534:	1c05      	adds	r5, r0, #0
 8005536:	1c20      	adds	r0, r4, #0
 8005538:	f7fb fd04 	bl	8000f44 <__aeabi_fmul>
 800553c:	490b      	ldr	r1, [pc, #44]	@ (800556c <read_temperature_steinhart_middle+0x70>)
 800553e:	f7fb f941 	bl	80007c4 <__aeabi_fadd>
 8005542:	1c01      	adds	r1, r0, #0
 8005544:	1c28      	adds	r0, r5, #0
 8005546:	f7fb f93d 	bl	80007c4 <__aeabi_fadd>
 800554a:	1c01      	adds	r1, r0, #0
    T_K = 1.0f / inv_T;
 800554c:	20fe      	movs	r0, #254	@ 0xfe
 800554e:	0580      	lsls	r0, r0, #22
 8005550:	f7fb fb2a 	bl	8000ba8 <__aeabi_fdiv>
    T_C = T_K - 273.15f;
 8005554:	4906      	ldr	r1, [pc, #24]	@ (8005570 <read_temperature_steinhart_middle+0x74>)
 8005556:	f7fb fe4f 	bl	80011f8 <__aeabi_fsub>
}
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	457ff000 	.word	0x457ff000
 8005560:	484d1400 	.word	0x484d1400
 8005564:	33a8d38a 	.word	0x33a8d38a
 8005568:	39590111 	.word	0x39590111
 800556c:	3a5f3a52 	.word	0x3a5f3a52
 8005570:	43889333 	.word	0x43889333

08005574 <compare_temperature>:
{
 8005574:	b570      	push	{r4, r5, r6, lr}
    if (use_sensor1)
 8005576:	4e0c      	ldr	r6, [pc, #48]	@ (80055a8 <compare_temperature+0x34>)
{
 8005578:	1c04      	adds	r4, r0, #0
    if (use_sensor1)
 800557a:	7833      	ldrb	r3, [r6, #0]
{
 800557c:	1c0d      	adds	r5, r1, #0
    if (use_sensor1)
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <compare_temperature+0x22>
        if (Temp_Low <= -61.0f)
 8005582:	490a      	ldr	r1, [pc, #40]	@ (80055ac <compare_temperature+0x38>)
 8005584:	1c28      	adds	r0, r5, #0
 8005586:	f7fa ffbf 	bl	8000508 <__aeabi_fcmple>
 800558a:	2800      	cmp	r0, #0
 800558c:	d00a      	beq.n	80055a4 <compare_temperature+0x30>
            use_sensor1 = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	7033      	strb	r3, [r6, #0]
    return (use_sensor1 ? Temp_Middle : Temp_Low);
 8005592:	1c2c      	adds	r4, r5, #0
 8005594:	e006      	b.n	80055a4 <compare_temperature+0x30>
        if (Temp_Middle >= -59.0f)
 8005596:	4906      	ldr	r1, [pc, #24]	@ (80055b0 <compare_temperature+0x3c>)
 8005598:	f7fa ffca 	bl	8000530 <__aeabi_fcmpge>
 800559c:	2800      	cmp	r0, #0
 800559e:	d0f8      	beq.n	8005592 <compare_temperature+0x1e>
            use_sensor1 = 1;
 80055a0:	2301      	movs	r3, #1
 80055a2:	7033      	strb	r3, [r6, #0]
}
 80055a4:	1c20      	adds	r0, r4, #0
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	20000008 	.word	0x20000008
 80055ac:	c2740000 	.word	0xc2740000
 80055b0:	c26c0000 	.word	0xc26c0000

080055b4 <Read_Temp>:
	temperature1_avg = 0;
 80055b4:	2300      	movs	r3, #0
void Read_Temp(){
 80055b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	temperature2_avg = 0;
 80055b8:	270a      	movs	r7, #10
	temperature1_avg = 0;
 80055ba:	4e2f      	ldr	r6, [pc, #188]	@ (8005678 <Read_Temp+0xc4>)
	temperature2_avg = 0;
 80055bc:	4d2f      	ldr	r5, [pc, #188]	@ (800567c <Read_Temp+0xc8>)
void Read_Temp(){
 80055be:	b085      	sub	sp, #20
	temperature1_avg = 0;
 80055c0:	6033      	str	r3, [r6, #0]
	temperature2_avg = 0;
 80055c2:	602b      	str	r3, [r5, #0]
		  	 		    sConfig.Channel = ADC_CHANNEL_0;
 80055c4:	2301      	movs	r3, #1
 80055c6:	9301      	str	r3, [sp, #4]
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 80055c8:	2300      	movs	r3, #0
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80055ca:	4c2d      	ldr	r4, [pc, #180]	@ (8005680 <Read_Temp+0xcc>)
 80055cc:	a901      	add	r1, sp, #4
 80055ce:	0020      	movs	r0, r4
		  	 		    sConfig.Rank = ADC_REGULAR_RANK_1;
 80055d0:	9302      	str	r3, [sp, #8]
		  	 		    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80055d2:	9303      	str	r3, [sp, #12]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80055d4:	f008 fe64 	bl	800e2a0 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 80055d8:	0020      	movs	r0, r4
 80055da:	f008 ffd1 	bl	800e580 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80055de:	2101      	movs	r1, #1
 80055e0:	0020      	movs	r0, r4
 80055e2:	4249      	negs	r1, r1
 80055e4:	f008 fd24 	bl	800e030 <HAL_ADC_PollForConversion>
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 80055e8:	0020      	movs	r0, r4
 80055ea:	f008 fd85 	bl	800e0f8 <HAL_ADC_GetValue>
 80055ee:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <Read_Temp+0xd0>)
	 for(int i=0; i < 10; i++)
 80055f0:	3f01      	subs	r7, #1
		  	 		    adc_value1 = HAL_ADC_GetValue(&hadc1);
 80055f2:	8018      	strh	r0, [r3, #0]
		  	 		    temperature1 = read_temperature_steinhart_middle(adc_value1);
 80055f4:	b280      	uxth	r0, r0
 80055f6:	f7ff ff81 	bl	80054fc <read_temperature_steinhart_middle>
 80055fa:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <Read_Temp+0xd4>)
 80055fc:	1c01      	adds	r1, r0, #0
 80055fe:	6018      	str	r0, [r3, #0]
		  	 		    temperature1_avg = temperature1_avg + temperature1;
 8005600:	6830      	ldr	r0, [r6, #0]
 8005602:	f7fb f8df 	bl	80007c4 <__aeabi_fadd>
 8005606:	6030      	str	r0, [r6, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 8005608:	0020      	movs	r0, r4
 800560a:	f009 f879 	bl	800e700 <HAL_ADC_Stop>
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 800560e:	4b1f      	ldr	r3, [pc, #124]	@ (800568c <Read_Temp+0xd8>)
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005610:	a901      	add	r1, sp, #4
 8005612:	0020      	movs	r0, r4
		  	 		    sConfig.Channel = ADC_CHANNEL_2;
 8005614:	9301      	str	r3, [sp, #4]
		  	 		    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005616:	f008 fe43 	bl	800e2a0 <HAL_ADC_ConfigChannel>
		  	 		    HAL_ADC_Start(&hadc1);
 800561a:	0020      	movs	r0, r4
 800561c:	f008 ffb0 	bl	800e580 <HAL_ADC_Start>
		  	 		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8005620:	2101      	movs	r1, #1
 8005622:	0020      	movs	r0, r4
 8005624:	4249      	negs	r1, r1
 8005626:	f008 fd03 	bl	800e030 <HAL_ADC_PollForConversion>
		  	 		    adc_value2 = HAL_ADC_GetValue(&hadc1);
 800562a:	0020      	movs	r0, r4
 800562c:	f008 fd64 	bl	800e0f8 <HAL_ADC_GetValue>
 8005630:	4b17      	ldr	r3, [pc, #92]	@ (8005690 <Read_Temp+0xdc>)
 8005632:	8018      	strh	r0, [r3, #0]
		  	 		    temperature2 = read_temperature_steinhart_low(adc_value2);
 8005634:	b280      	uxth	r0, r0
 8005636:	f7ff ff25 	bl	8005484 <read_temperature_steinhart_low>
 800563a:	4b16      	ldr	r3, [pc, #88]	@ (8005694 <Read_Temp+0xe0>)
 800563c:	1c01      	adds	r1, r0, #0
 800563e:	6018      	str	r0, [r3, #0]
		  	 		    temperature2_avg = temperature2_avg + temperature2;
 8005640:	6828      	ldr	r0, [r5, #0]
 8005642:	f7fb f8bf 	bl	80007c4 <__aeabi_fadd>
 8005646:	6028      	str	r0, [r5, #0]
		  	 		    HAL_ADC_Stop(&hadc1);
 8005648:	0020      	movs	r0, r4
 800564a:	f009 f859 	bl	800e700 <HAL_ADC_Stop>
	 for(int i=0; i < 10; i++)
 800564e:	2f00      	cmp	r7, #0
 8005650:	d1b8      	bne.n	80055c4 <Read_Temp+0x10>
		  	 		    temperature1_avg = temperature1_avg / 10;
 8005652:	6830      	ldr	r0, [r6, #0]
 8005654:	4910      	ldr	r1, [pc, #64]	@ (8005698 <Read_Temp+0xe4>)
 8005656:	f7fb faa7 	bl	8000ba8 <__aeabi_fdiv>
		  	 		    temperature2_avg = temperature2_avg / 10;
 800565a:	490f      	ldr	r1, [pc, #60]	@ (8005698 <Read_Temp+0xe4>)
		  	 		    temperature1_avg = temperature1_avg / 10;
 800565c:	1c04      	adds	r4, r0, #0
 800565e:	6030      	str	r0, [r6, #0]
		  	 		    temperature2_avg = temperature2_avg / 10;
 8005660:	6828      	ldr	r0, [r5, #0]
 8005662:	f7fb faa1 	bl	8000ba8 <__aeabi_fdiv>
 8005666:	1c01      	adds	r1, r0, #0
 8005668:	6028      	str	r0, [r5, #0]
		  	 		    Display_temperature  = compare_temperature(temperature1_avg, temperature2_avg);
 800566a:	1c20      	adds	r0, r4, #0
 800566c:	f7ff ff82 	bl	8005574 <compare_temperature>
 8005670:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <Read_Temp+0xe8>)
 8005672:	6018      	str	r0, [r3, #0]
}
 8005674:	b005      	add	sp, #20
 8005676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005678:	2000054c 	.word	0x2000054c
 800567c:	20000548 	.word	0x20000548
 8005680:	20000aec 	.word	0x20000aec
 8005684:	2000055a 	.word	0x2000055a
 8005688:	20000554 	.word	0x20000554
 800568c:	08000004 	.word	0x08000004
 8005690:	20000558 	.word	0x20000558
 8005694:	20000550 	.word	0x20000550
 8005698:	41200000 	.word	0x41200000
 800569c:	20000544 	.word	0x20000544

080056a0 <RTC_Disable_All_Wakeup>:
{
 80056a0:	b570      	push	{r4, r5, r6, lr}
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);          // WUT 카운터 끄기
 80056a2:	4c0e      	ldr	r4, [pc, #56]	@ (80056dc <RTC_Disable_All_Wakeup+0x3c>)
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 80056a4:	4d0e      	ldr	r5, [pc, #56]	@ (80056e0 <RTC_Disable_All_Wakeup+0x40>)
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);          // WUT 카운터 끄기
 80056a6:	0020      	movs	r0, r4
 80056a8:	f00c fa6a 	bl	8011b80 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT();         // EXTI line 20 IT 비활성
 80056ac:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <RTC_Disable_All_Wakeup+0x44>)
 80056ae:	490e      	ldr	r1, [pc, #56]	@ (80056e8 <RTC_Disable_All_Wakeup+0x48>)
 80056b0:	1d18      	adds	r0, r3, #4
 80056b2:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056b4:	3308      	adds	r3, #8
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT();         // EXTI line 20 IT 비활성
 80056b6:	400a      	ands	r2, r1
 80056b8:	67c2      	str	r2, [r0, #124]	@ 0x7c
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056ba:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80056bc:	0020      	movs	r0, r4
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056be:	400a      	ands	r2, r1
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80056c0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();      // EXTI line 20 Event 비활성
 80056c2:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 80056c4:	4b09      	ldr	r3, [pc, #36]	@ (80056ec <RTC_Disable_All_Wakeup+0x4c>)
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80056c6:	0049      	lsls	r1, r1, #1
    __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);      // RTC WUT 플래그 클리어
 80056c8:	65eb      	str	r3, [r5, #92]	@ 0x5c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);     // 알람 A 끄기
 80056ca:	f00b ff63 	bl	8011594 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); // ALRAF 플래그 클리어
 80056ce:	2301      	movs	r3, #1
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80056d0:	225f      	movs	r2, #95	@ 0x5f
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF); // ALRAF 플래그 클리어
 80056d2:	65eb      	str	r3, [r5, #92]	@ 0x5c
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80056d4:	4b06      	ldr	r3, [pc, #24]	@ (80056f0 <RTC_Disable_All_Wakeup+0x50>)
 80056d6:	619a      	str	r2, [r3, #24]
}
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	200009f8 	.word	0x200009f8
 80056e0:	40002800 	.word	0x40002800
 80056e4:	40021800 	.word	0x40021800
 80056e8:	efffffff 	.word	0xefffffff
 80056ec:	00000202 	.word	0x00000202
 80056f0:	40007000 	.word	0x40007000

080056f4 <RTC_SetAlarmA_SecondsFromNow>:

void RTC_SetAlarmA_SecondsFromNow(uint32_t after_sec)     // 지울예정
{
 80056f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);

    uint8_t Y=d.Year, M=d.Month, D=d.Date;
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 80056f6:	24e1      	movs	r4, #225	@ 0xe1
{
 80056f8:	b097      	sub	sp, #92	@ 0x5c
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80056fa:	4b38      	ldr	r3, [pc, #224]	@ (80057dc <RTC_SetAlarmA_SecondsFromNow+0xe8>)
 80056fc:	ad05      	add	r5, sp, #20
 80056fe:	0029      	movs	r1, r5
 8005700:	2200      	movs	r2, #0
{
 8005702:	9003      	str	r0, [sp, #12]
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005704:	0018      	movs	r0, r3
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	f00c f9e4 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 800570c:	2200      	movs	r2, #0
 800570e:	9801      	ldr	r0, [sp, #4]
 8005710:	a904      	add	r1, sp, #16
 8005712:	f00c fa11 	bl	8011b38 <HAL_RTC_GetDate>
    uint8_t Y=d.Year, M=d.Month, D=d.Date;
 8005716:	ab04      	add	r3, sp, #16
 8005718:	78db      	ldrb	r3, [r3, #3]
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 800571a:	0124      	lsls	r4, r4, #4
    uint8_t Y=d.Year, M=d.Month, D=d.Date;
 800571c:	9302      	str	r3, [sp, #8]
 800571e:	ab04      	add	r3, sp, #16
 8005720:	785f      	ldrb	r7, [r3, #1]
 8005722:	789e      	ldrb	r6, [r3, #2]
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005724:	782b      	ldrb	r3, [r5, #0]
 8005726:	786a      	ldrb	r2, [r5, #1]
 8005728:	435c      	muls	r4, r3
    uint32_t tgt = now + after_sec;
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	18e4      	adds	r4, r4, r3
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 800572e:	78ab      	ldrb	r3, [r5, #2]
    // 날짜 보정
    while (tgt >= 86400u) {
        tgt -= 86400u;
        // ++D, 월말/윤년 처리
//        extern uint8_t days_in_month(uint8_t m, uint16_t y2000);
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 8005730:	2501      	movs	r5, #1
    uint32_t tgt = now + after_sec;
 8005732:	18e4      	adds	r4, r4, r3
    uint32_t now = t.Hours*3600u + t.Minutes*60u + t.Seconds;
 8005734:	233c      	movs	r3, #60	@ 0x3c
 8005736:	4353      	muls	r3, r2
    uint32_t tgt = now + after_sec;
 8005738:	18e4      	adds	r4, r4, r3
    while (tgt >= 86400u) {
 800573a:	4b29      	ldr	r3, [pc, #164]	@ (80057e0 <RTC_SetAlarmA_SecondsFromNow+0xec>)
 800573c:	429c      	cmp	r4, r3
 800573e:	d833      	bhi.n	80057a8 <RTC_SetAlarmA_SecondsFromNow+0xb4>
    }

    // 기존 알람 정리
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8005740:	2780      	movs	r7, #128	@ 0x80
 8005742:	007f      	lsls	r7, r7, #1
 8005744:	0039      	movs	r1, r7
 8005746:	9801      	ldr	r0, [sp, #4]
 8005748:	f00b ff24 	bl	8011594 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800574c:	2201      	movs	r2, #1

    RTC_AlarmTypeDef a = {0};
 800574e:	201b      	movs	r0, #27
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005750:	4b24      	ldr	r3, [pc, #144]	@ (80057e4 <RTC_SetAlarmA_SecondsFromNow+0xf0>)
    RTC_AlarmTypeDef a = {0};
 8005752:	2100      	movs	r1, #0
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005754:	65da      	str	r2, [r3, #92]	@ 0x5c
    RTC_AlarmTypeDef a = {0};
 8005756:	ab04      	add	r3, sp, #16
 8005758:	3228      	adds	r2, #40	@ 0x28
 800575a:	18c0      	adds	r0, r0, r3
 800575c:	f014 fc78 	bl	801a050 <memset>
    a.AlarmTime.Hours   = tgt/3600u;
 8005760:	21e1      	movs	r1, #225	@ 0xe1
 8005762:	0020      	movs	r0, r4
 8005764:	0109      	lsls	r1, r1, #4
 8005766:	f7fa fcff 	bl	8000168 <__udivsi3>
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 800576a:	21e1      	movs	r1, #225	@ 0xe1
    RTC_AlarmTypeDef a = {0};
 800576c:	ad0a      	add	r5, sp, #40	@ 0x28
    a.AlarmTime.Hours   = tgt/3600u;
 800576e:	7028      	strb	r0, [r5, #0]
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 8005770:	0109      	lsls	r1, r1, #4
 8005772:	0020      	movs	r0, r4
 8005774:	f7fa fd7e 	bl	8000274 <__aeabi_uidivmod>
 8005778:	0008      	movs	r0, r1
 800577a:	213c      	movs	r1, #60	@ 0x3c
 800577c:	f7fa fcf4 	bl	8000168 <__udivsi3>
    a.AlarmTime.Seconds = tgt%60u;
 8005780:	213c      	movs	r1, #60	@ 0x3c
    a.AlarmTime.Minutes = (tgt%3600u)/60u;
 8005782:	7068      	strb	r0, [r5, #1]
    a.AlarmTime.Seconds = tgt%60u;
 8005784:	0020      	movs	r0, r4
 8005786:	f7fa fd75 	bl	8000274 <__aeabi_uidivmod>
    a.AlarmMask         = RTC_ALARMMASK_NONE;              // 날짜/시/분/초 모두 비교
    a.AlarmSubSecondMask= RTC_ALARMSUBSECONDMASK_ALL;
    a.Alarm             = RTC_ALARM_A;
    a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;  // 날짜 비교
    a.AlarmDateWeekDay  = D;
 800578a:	231d      	movs	r3, #29
 800578c:	aa04      	add	r2, sp, #16
 800578e:	189b      	adds	r3, r3, r2
    a.AlarmTime.Seconds = tgt%60u;
 8005790:	70a9      	strb	r1, [r5, #2]

    if (HAL_RTC_SetAlarm_IT(&hrtc, &a, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8005792:	2200      	movs	r2, #0
 8005794:	0029      	movs	r1, r5
 8005796:	9801      	ldr	r0, [sp, #4]
    a.Alarm             = RTC_ALARM_A;
 8005798:	9715      	str	r7, [sp, #84]	@ 0x54
    a.AlarmDateWeekDay  = D;
 800579a:	77de      	strb	r6, [r3, #31]
    if (HAL_RTC_SetAlarm_IT(&hrtc, &a, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 800579c:	f00c f8dc 	bl	8011958 <HAL_RTC_SetAlarm_IT>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d019      	beq.n	80057d8 <RTC_SetAlarmA_SecondsFromNow+0xe4>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057a6:	e7fe      	b.n	80057a6 <RTC_SetAlarmA_SecondsFromNow+0xb2>
        tgt -= 86400u;
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <RTC_SetAlarmA_SecondsFromNow+0xf4>)
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 80057aa:	3601      	adds	r6, #1
 80057ac:	0038      	movs	r0, r7
 80057ae:	9902      	ldr	r1, [sp, #8]
 80057b0:	b2f6      	uxtb	r6, r6
        tgt -= 86400u;
 80057b2:	18e4      	adds	r4, r4, r3
        if (++D > days_in_month(M, Y)) { D = 1; if(++M==13){ M=1; Y=(Y+1)%100; } }
 80057b4:	f7ff fe46 	bl	8005444 <days_in_month>
 80057b8:	42b0      	cmp	r0, r6
 80057ba:	d2be      	bcs.n	800573a <RTC_SetAlarmA_SecondsFromNow+0x46>
 80057bc:	3701      	adds	r7, #1
 80057be:	b2ff      	uxtb	r7, r7
 80057c0:	002e      	movs	r6, r5
 80057c2:	2f0d      	cmp	r7, #13
 80057c4:	d1b9      	bne.n	800573a <RTC_SetAlarmA_SecondsFromNow+0x46>
 80057c6:	9802      	ldr	r0, [sp, #8]
 80057c8:	2164      	movs	r1, #100	@ 0x64
 80057ca:	3001      	adds	r0, #1
 80057cc:	f7fa fe3c 	bl	8000448 <__aeabi_idivmod>
 80057d0:	b2cb      	uxtb	r3, r1
 80057d2:	002f      	movs	r7, r5
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	e7b0      	b.n	800573a <RTC_SetAlarmA_SecondsFromNow+0x46>
}
 80057d8:	b017      	add	sp, #92	@ 0x5c
 80057da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057dc:	200009f8 	.word	0x200009f8
 80057e0:	0001517f 	.word	0x0001517f
 80057e4:	40002800 	.word	0x40002800
 80057e8:	fffeae80 	.word	0xfffeae80

080057ec <Set_StartTargetTime_FromReservation>:
{
 80057ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_epoch = current_settings.start_reservation_time; // 예약 타깃(epoch)
 80057ee:	4d2c      	ldr	r5, [pc, #176]	@ (80058a0 <Set_StartTargetTime_FromReservation+0xb4>)
 80057f0:	4b2c      	ldr	r3, [pc, #176]	@ (80058a4 <Set_StartTargetTime_FromReservation+0xb8>)
 80057f2:	002a      	movs	r2, r5
 80057f4:	32b0      	adds	r2, #176	@ 0xb0
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	0212      	lsls	r2, r2, #8
 80057fc:	431a      	orrs	r2, r3
 80057fe:	002b      	movs	r3, r5
 8005800:	33b1      	adds	r3, #177	@ 0xb1
 8005802:	781b      	ldrb	r3, [r3, #0]
{
 8005804:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t target_epoch = current_settings.start_reservation_time; // 예약 타깃(epoch)
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	4313      	orrs	r3, r2
 800580a:	002a      	movs	r2, r5
 800580c:	32b2      	adds	r2, #178	@ 0xb2
 800580e:	7814      	ldrb	r4, [r2, #0]
 8005810:	0624      	lsls	r4, r4, #24
 8005812:	431c      	orrs	r4, r3
    if (target_epoch == 0u) {
 8005814:	d104      	bne.n	8005820 <Set_StartTargetTime_FromReservation+0x34>
        printf("[Reserve] start_reservation_time=0 → skip.\r\n");
 8005816:	4824      	ldr	r0, [pc, #144]	@ (80058a8 <Set_StartTargetTime_FromReservation+0xbc>)
 8005818:	f014 fabe 	bl	8019d98 <puts>
}
 800581c:	b00b      	add	sp, #44	@ 0x2c
 800581e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005820:	4b22      	ldr	r3, [pc, #136]	@ (80058ac <Set_StartTargetTime_FromReservation+0xc0>)
 8005822:	ae05      	add	r6, sp, #20
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005824:	af04      	add	r7, sp, #16
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005826:	0031      	movs	r1, r6
 8005828:	0018      	movs	r0, r3
 800582a:	2200      	movs	r2, #0
 800582c:	9303      	str	r3, [sp, #12]
 800582e:	f00c f951 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005832:	0039      	movs	r1, r7
 8005834:	2200      	movs	r2, #0
 8005836:	9803      	ldr	r0, [sp, #12]
 8005838:	f00c f97e 	bl	8011b38 <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 800583c:	78ba      	ldrb	r2, [r7, #2]
 800583e:	7879      	ldrb	r1, [r7, #1]
 8005840:	78f8      	ldrb	r0, [r7, #3]
 8005842:	78b7      	ldrb	r7, [r6, #2]
 8005844:	7833      	ldrb	r3, [r6, #0]
 8005846:	9701      	str	r7, [sp, #4]
 8005848:	7876      	ldrb	r6, [r6, #1]
 800584a:	9600      	str	r6, [sp, #0]
 800584c:	f003 fe8e 	bl	800956c <ymd_to_epoch>
 8005850:	0006      	movs	r6, r0
    if (target_epoch <= now_epoch) {
 8005852:	4284      	cmp	r4, r0
 8005854:	d805      	bhi.n	8005862 <Set_StartTargetTime_FromReservation+0x76>
        printf("[Reserve] target(%lu) <= now(%lu) → start immediately.\r\n",
 8005856:	0032      	movs	r2, r6
 8005858:	0021      	movs	r1, r4
 800585a:	4815      	ldr	r0, [pc, #84]	@ (80058b0 <Set_StartTargetTime_FromReservation+0xc4>)
 800585c:	f014 fa2c 	bl	8019cb8 <iprintf>
        return;
 8005860:	e7dc      	b.n	800581c <Set_StartTargetTime_FromReservation+0x30>
    uint32_t remaining = target_epoch - now_epoch;
 8005862:	1a23      	subs	r3, r4, r0
    uint32_t chunk = (remaining > ALARMA_MAX_CHUNK_SEC) ? ALARMA_MAX_CHUNK_SEC : remaining;
 8005864:	001f      	movs	r7, r3
    uint32_t remaining = target_epoch - now_epoch;
 8005866:	9303      	str	r3, [sp, #12]
    uint32_t chunk = (remaining > ALARMA_MAX_CHUNK_SEC) ? ALARMA_MAX_CHUNK_SEC : remaining;
 8005868:	4b12      	ldr	r3, [pc, #72]	@ (80058b4 <Set_StartTargetTime_FromReservation+0xc8>)
 800586a:	429f      	cmp	r7, r3
 800586c:	d900      	bls.n	8005870 <Set_StartTargetTime_FromReservation+0x84>
 800586e:	001f      	movs	r7, r3
    current_settings.start_target_seconds = target_epoch;   // 타깃은 ‘절대초’로 일원화
 8005870:	35ab      	adds	r5, #171	@ 0xab
 8005872:	0a23      	lsrs	r3, r4, #8
 8005874:	706b      	strb	r3, [r5, #1]
 8005876:	0c23      	lsrs	r3, r4, #16
 8005878:	70ab      	strb	r3, [r5, #2]
 800587a:	0e23      	lsrs	r3, r4, #24
 800587c:	70eb      	strb	r3, [r5, #3]
 800587e:	702c      	strb	r4, [r5, #0]
    Save_CurrentSettings();
 8005880:	f003 ffa6 	bl	80097d0 <Save_CurrentSettings>
    RTC_Disable_All_Wakeup();
 8005884:	f7ff ff0c 	bl	80056a0 <RTC_Disable_All_Wakeup>
    RTC_SetAlarmA_SecondsFromNow(chunk);
 8005888:	0038      	movs	r0, r7
 800588a:	f7ff ff33 	bl	80056f4 <RTC_SetAlarmA_SecondsFromNow>
    printf("[Reserve] target=%lu, now=%lu, remain=%lu → chunk=%lu sec (AlarmA)\r\n",
 800588e:	0032      	movs	r2, r6
 8005890:	0021      	movs	r1, r4
 8005892:	9700      	str	r7, [sp, #0]
 8005894:	1ba3      	subs	r3, r4, r6
 8005896:	4808      	ldr	r0, [pc, #32]	@ (80058b8 <Set_StartTargetTime_FromReservation+0xcc>)
 8005898:	f014 fa0e 	bl	8019cb8 <iprintf>
 800589c:	e7be      	b.n	800581c <Set_StartTargetTime_FromReservation+0x30>
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	20002bac 	.word	0x20002bac
 80058a4:	20002c5b 	.word	0x20002c5b
 80058a8:	0801c6b0 	.word	0x0801c6b0
 80058ac:	200009f8 	.word	0x200009f8
 80058b0:	0801c6de 	.word	0x0801c6de
 80058b4:	0028de80 	.word	0x0028de80
 80058b8:	0801c719 	.word	0x0801c719

080058bc <Maybe_Rearm_Reservation_OnWake>:
    uint32_t target_epoch = current_settings.start_reservation_time;
 80058bc:	4b1b      	ldr	r3, [pc, #108]	@ (800592c <Maybe_Rearm_Reservation_OnWake+0x70>)
{
 80058be:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_epoch = current_settings.start_reservation_time;
 80058c0:	0019      	movs	r1, r3
 80058c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <Maybe_Rearm_Reservation_OnWake+0x74>)
 80058c4:	31b0      	adds	r1, #176	@ 0xb0
 80058c6:	7809      	ldrb	r1, [r1, #0]
 80058c8:	7812      	ldrb	r2, [r2, #0]
 80058ca:	0209      	lsls	r1, r1, #8
 80058cc:	4311      	orrs	r1, r2
 80058ce:	001a      	movs	r2, r3
 80058d0:	32b1      	adds	r2, #177	@ 0xb1
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	33b2      	adds	r3, #178	@ 0xb2
 80058d6:	781c      	ldrb	r4, [r3, #0]
 80058d8:	0412      	lsls	r2, r2, #16
 80058da:	430a      	orrs	r2, r1
 80058dc:	0624      	lsls	r4, r4, #24
{
 80058de:	b089      	sub	sp, #36	@ 0x24
    uint32_t target_epoch = current_settings.start_reservation_time;
 80058e0:	4314      	orrs	r4, r2
    if (target_epoch == 0u) return;
 80058e2:	d01b      	beq.n	800591c <Maybe_Rearm_Reservation_OnWake+0x60>
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80058e4:	4f13      	ldr	r7, [pc, #76]	@ (8005934 <Maybe_Rearm_Reservation_OnWake+0x78>)
 80058e6:	ad03      	add	r5, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80058e8:	ae02      	add	r6, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80058ea:	0029      	movs	r1, r5
 80058ec:	2200      	movs	r2, #0
 80058ee:	0038      	movs	r0, r7
 80058f0:	f00c f8f0 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80058f4:	0031      	movs	r1, r6
 80058f6:	2200      	movs	r2, #0
 80058f8:	0038      	movs	r0, r7
 80058fa:	f00c f91d 	bl	8011b38 <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 80058fe:	7871      	ldrb	r1, [r6, #1]
 8005900:	78b2      	ldrb	r2, [r6, #2]
 8005902:	78f0      	ldrb	r0, [r6, #3]
 8005904:	78ae      	ldrb	r6, [r5, #2]
 8005906:	782b      	ldrb	r3, [r5, #0]
 8005908:	9601      	str	r6, [sp, #4]
 800590a:	786d      	ldrb	r5, [r5, #1]
 800590c:	9500      	str	r5, [sp, #0]
 800590e:	f003 fe2d 	bl	800956c <ymd_to_epoch>
 8005912:	0001      	movs	r1, r0
    if (now_epoch < target_epoch) {
 8005914:	4284      	cmp	r4, r0
 8005916:	d903      	bls.n	8005920 <Maybe_Rearm_Reservation_OnWake+0x64>
        Set_StartTargetTime_FromReservation();
 8005918:	f7ff ff68 	bl	80057ec <Set_StartTargetTime_FromReservation>
}
 800591c:	b009      	add	sp, #36	@ 0x24
 800591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("[Reserve] reached: now=%lu >= target=%lu\r\n",
 8005920:	0022      	movs	r2, r4
 8005922:	4805      	ldr	r0, [pc, #20]	@ (8005938 <Maybe_Rearm_Reservation_OnWake+0x7c>)
 8005924:	f014 f9c8 	bl	8019cb8 <iprintf>
 8005928:	e7f8      	b.n	800591c <Maybe_Rearm_Reservation_OnWake+0x60>
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	20002bac 	.word	0x20002bac
 8005930:	20002c5b 	.word	0x20002c5b
 8005934:	200009f8 	.word	0x200009f8
 8005938:	0801c760 	.word	0x0801c760

0800593c <Save_Power_Function>:
{
 800593c:	b530      	push	{r4, r5, lr}
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 800593e:	2501      	movs	r5, #1
{
 8005940:	b087      	sub	sp, #28
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005942:	4c1a      	ldr	r4, [pc, #104]	@ (80059ac <Save_Power_Function+0x70>)
	HAL_PWREx_EnableUltraLowPowerMode();       // ULP 모드 활성화
 8005944:	f00a feee 	bl	8010724 <HAL_PWREx_EnableUltraLowPowerMode>
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005948:	4819      	ldr	r0, [pc, #100]	@ (80059b0 <Save_Power_Function+0x74>)
 800594a:	f008 fe83 	bl	800e654 <HAL_ADC_DeInit>
 800594e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005950:	4a18      	ldr	r2, [pc, #96]	@ (80059b4 <Save_Power_Function+0x78>)
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005952:	4819      	ldr	r0, [pc, #100]	@ (80059b8 <Save_Power_Function+0x7c>)
	HAL_ADC_DeInit(&hadc1);      __HAL_RCC_ADC_CLK_DISABLE();
 8005954:	4013      	ands	r3, r2
 8005956:	6623      	str	r3, [r4, #96]	@ 0x60
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005958:	f009 f8a8 	bl	800eaac <HAL_COMP_DeInit>
 800595c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 800595e:	4817      	ldr	r0, [pc, #92]	@ (80059bc <Save_Power_Function+0x80>)
	HAL_COMP_DeInit(&hcomp1);    __HAL_RCC_COMP_CLK_DISABLE();
 8005960:	43ab      	bics	r3, r5
 8005962:	6623      	str	r3, [r4, #96]	@ 0x60
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 8005964:	f009 fcec 	bl	800f340 <HAL_LCD_DeInit>
 8005968:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800596a:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <Save_Power_Function+0x84>)
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 800596c:	4815      	ldr	r0, [pc, #84]	@ (80059c4 <Save_Power_Function+0x88>)
	HAL_LCD_DeInit(&hlcd);       __HAL_RCC_LCD_CLK_DISABLE();
 800596e:	4013      	ands	r3, r2
 8005970:	65a3      	str	r3, [r4, #88]	@ 0x58
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 8005972:	f00d f8ad 	bl	8012ad0 <HAL_UART_DeInit>
 8005976:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005978:	4a13      	ldr	r2, [pc, #76]	@ (80059c8 <Save_Power_Function+0x8c>)
	GPIO_InitTypeDef g = {0};
 800597a:	2100      	movs	r1, #0
	HAL_UART_DeInit(&huart3);    __HAL_RCC_USART3_CLK_DISABLE();
 800597c:	4013      	ands	r3, r2
 800597e:	65a3      	str	r3, [r4, #88]	@ 0x58
	GPIO_InitTypeDef g = {0};
 8005980:	220c      	movs	r2, #12
 8005982:	a803      	add	r0, sp, #12
 8005984:	f014 fb64 	bl	801a050 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005988:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
	HAL_GPIO_Init(GPIOA, &g);
 800598a:	20a0      	movs	r0, #160	@ 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 800598c:	432b      	orrs	r3, r5
 800598e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8005990:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
	HAL_GPIO_Init(GPIOA, &g);
 8005992:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();  // 코어가 꺼지기 전에
 8005994:	402b      	ands	r3, r5
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	9b00      	ldr	r3, [sp, #0]
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 800599a:	4b0c      	ldr	r3, [pc, #48]	@ (80059cc <Save_Power_Function+0x90>)
	HAL_GPIO_Init(GPIOA, &g);
 800599c:	05c0      	lsls	r0, r0, #23
	g.Pin   = GPIO_PIN_ALL & ~GPIO_PIN_0;  // PA0 제외
 800599e:	9301      	str	r3, [sp, #4]
	g.Mode  = GPIO_MODE_ANALOG;
 80059a0:	2303      	movs	r3, #3
 80059a2:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &g);
 80059a4:	f009 fb6c 	bl	800f080 <HAL_GPIO_Init>
}
 80059a8:	b007      	add	sp, #28
 80059aa:	bd30      	pop	{r4, r5, pc}
 80059ac:	40021000 	.word	0x40021000
 80059b0:	20000aec 	.word	0x20000aec
 80059b4:	ffefffff 	.word	0xffefffff
 80059b8:	20000abc 	.word	0x20000abc
 80059bc:	20000a80 	.word	0x20000a80
 80059c0:	fffffdff 	.word	0xfffffdff
 80059c4:	20000840 	.word	0x20000840
 80059c8:	fffbffff 	.word	0xfffbffff
 80059cc:	0000fffe 	.word	0x0000fffe

080059d0 <Start_Delay_Timer>:
{
 80059d0:	b510      	push	{r4, lr}
	LCD_Clear_Display(LCD_data);
 80059d2:	4804      	ldr	r0, [pc, #16]	@ (80059e4 <Start_Delay_Timer+0x14>)
 80059d4:	f7ff f990 	bl	8004cf8 <LCD_Clear_Display>
	RTC_Disable_All_Wakeup();
 80059d8:	f7ff fe62 	bl	80056a0 <RTC_Disable_All_Wakeup>
	Set_StartTargetTime_FromRTC();
 80059dc:	f003 ff48 	bl	8009870 <Set_StartTargetTime_FromRTC>
}
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	20000514 	.word	0x20000514

080059e8 <Get_in_Shutdown>:
void Get_in_Shutdown(){
 80059e8:	b510      	push	{r4, lr}
	printf("Getting on to sleep(Button)\r\n");
 80059ea:	480a      	ldr	r0, [pc, #40]	@ (8005a14 <Get_in_Shutdown+0x2c>)
 80059ec:	f014 f9d4 	bl	8019d98 <puts>
	Save_Power_Function();
 80059f0:	f7ff ffa4 	bl	800593c <Save_Power_Function>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 80059f4:	2081      	movs	r0, #129	@ 0x81
 80059f6:	f00a fe25 	bl	8010644 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // PC13 핀 High 레벨에서 깨우기
 80059fa:	2002      	movs	r0, #2
 80059fc:	f00a fe22 	bl	8010644 <HAL_PWR_EnableWakeUpPin>
    HAL_SuspendTick(); // SysTick 멈춤
 8005a00:	f008 f9f2 	bl	800dde8 <HAL_SuspendTick>
    HAL_PWR_EnterSHUTDOWNMode();
 8005a04:	f00a fe2c 	bl	8010660 <HAL_PWR_EnterSHUTDOWNMode>
  HAL_ResumeTick();
 8005a08:	f008 f9f6 	bl	800ddf8 <HAL_ResumeTick>
    printf("Wake Up!\r\n");
 8005a0c:	4802      	ldr	r0, [pc, #8]	@ (8005a18 <Get_in_Shutdown+0x30>)
 8005a0e:	f014 f9c3 	bl	8019d98 <puts>
}
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	0801c78b 	.word	0x0801c78b
 8005a18:	0801c7a8 	.word	0x0801c7a8

08005a1c <Set_RTC_TimeOnly>:
{
 8005a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1e:	b08b      	sub	sp, #44	@ 0x2c
 8005a20:	001d      	movs	r5, r3
 8005a22:	ab10      	add	r3, sp, #64	@ 0x40
 8005a24:	781f      	ldrb	r7, [r3, #0]
 8005a26:	ab11      	add	r3, sp, #68	@ 0x44
 8005a28:	781e      	ldrb	r6, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005a2a:	ab04      	add	r3, sp, #16
{
 8005a2c:	9001      	str	r0, [sp, #4]
 8005a2e:	9102      	str	r1, [sp, #8]
 8005a30:	9203      	str	r2, [sp, #12]
    RTC_TimeTypeDef sTime = {0};
 8005a32:	2100      	movs	r1, #0
 8005a34:	2211      	movs	r2, #17
 8005a36:	1dd8      	adds	r0, r3, #7
 8005a38:	f014 fb0a 	bl	801a050 <memset>
    sDate.Year = yy;
 8005a3c:	9a01      	ldr	r2, [sp, #4]
 8005a3e:	ab04      	add	r3, sp, #16
 8005a40:	70da      	strb	r2, [r3, #3]
    sDate.Month = mm;
 8005a42:	9a02      	ldr	r2, [sp, #8]
    RTC_TimeTypeDef sTime = {0};
 8005a44:	ac05      	add	r4, sp, #20
    sDate.Month = mm;
 8005a46:	705a      	strb	r2, [r3, #1]
    sDate.Date = dd;
 8005a48:	9a03      	ldr	r2, [sp, #12]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005a4a:	0021      	movs	r1, r4
    sDate.Date = dd;
 8005a4c:	709a      	strb	r2, [r3, #2]
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	aa04      	add	r2, sp, #16
 8005a52:	7013      	strb	r3, [r2, #0]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005a54:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <Set_RTC_TimeOnly+0x58>)
    sTime.Hours = hh;
 8005a56:	7025      	strb	r5, [r4, #0]
    sTime.Minutes = mi;
 8005a58:	7067      	strb	r7, [r4, #1]
    sTime.Seconds = ss;
 8005a5a:	70a6      	strb	r6, [r4, #2]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005a5c:	001c      	movs	r4, r3
 8005a5e:	0018      	movs	r0, r3
 8005a60:	2200      	movs	r2, #0
 8005a62:	f00b fe7d 	bl	8011760 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005a66:	2200      	movs	r2, #0
 8005a68:	0020      	movs	r0, r4
 8005a6a:	a904      	add	r1, sp, #16
 8005a6c:	f00b ff06 	bl	801187c <HAL_RTC_SetDate>
}
 8005a70:	b00b      	add	sp, #44	@ 0x2c
 8005a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a74:	200009f8 	.word	0x200009f8

08005a78 <PrintCurrentRTC>:
{
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005a7a:	4e20      	ldr	r6, [pc, #128]	@ (8005afc <PrintCurrentRTC+0x84>)
{
 8005a7c:	b08d      	sub	sp, #52	@ 0x34
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005a7e:	ad07      	add	r5, sp, #28
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8005a80:	ac06      	add	r4, sp, #24
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8005a82:	0029      	movs	r1, r5
 8005a84:	2201      	movs	r2, #1
 8005a86:	0030      	movs	r0, r6
 8005a88:	f00c f824 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8005a8c:	0021      	movs	r1, r4
 8005a8e:	2201      	movs	r2, #1
 8005a90:	0030      	movs	r0, r6
 8005a92:	f00c f851 	bl	8011b38 <HAL_RTC_GetDate>
    uint8_t day   = BCD2BIN(sDate.Date);
 8005a96:	200a      	movs	r0, #10
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8005a98:	786f      	ldrb	r7, [r5, #1]
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005a9a:	78ab      	ldrb	r3, [r5, #2]
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8005a9c:	782e      	ldrb	r6, [r5, #0]
    uint8_t day   = BCD2BIN(sDate.Date);
 8005a9e:	250f      	movs	r5, #15
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005aa0:	469c      	mov	ip, r3
    uint8_t year  = BCD2BIN(sDate.Year);
 8005aa2:	78e1      	ldrb	r1, [r4, #3]
    uint8_t month = BCD2BIN(sDate.Month);
 8005aa4:	7862      	ldrb	r2, [r4, #1]
    uint8_t day   = BCD2BIN(sDate.Date);
 8005aa6:	78a4      	ldrb	r4, [r4, #2]
 8005aa8:	0923      	lsrs	r3, r4, #4
 8005aaa:	4343      	muls	r3, r0
 8005aac:	402c      	ands	r4, r5
 8005aae:	191b      	adds	r3, r3, r4
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	9305      	str	r3, [sp, #20]
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005ab4:	4663      	mov	r3, ip
    uint8_t month = BCD2BIN(sDate.Month);
 8005ab6:	0914      	lsrs	r4, r2, #4
 8005ab8:	4344      	muls	r4, r0
 8005aba:	402a      	ands	r2, r5
 8005abc:	18a2      	adds	r2, r4, r2
    uint8_t year  = BCD2BIN(sDate.Year);
 8005abe:	090c      	lsrs	r4, r1, #4
 8005ac0:	4344      	muls	r4, r0
 8005ac2:	4029      	ands	r1, r5
 8005ac4:	1861      	adds	r1, r4, r1
    uint8_t second = BCD2BIN(sTime.Seconds);
 8005ac6:	091c      	lsrs	r4, r3, #4
 8005ac8:	402b      	ands	r3, r5
 8005aca:	469c      	mov	ip, r3
 8005acc:	4344      	muls	r4, r0
 8005ace:	4464      	add	r4, ip
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005ad0:	b2e4      	uxtb	r4, r4
 8005ad2:	9402      	str	r4, [sp, #8]
    uint8_t minute = BCD2BIN(sTime.Minutes);
 8005ad4:	093c      	lsrs	r4, r7, #4
 8005ad6:	4344      	muls	r4, r0
 8005ad8:	402f      	ands	r7, r5
 8005ada:	19e7      	adds	r7, r4, r7
    uint8_t hour   = BCD2BIN(sTime.Hours);
 8005adc:	0934      	lsrs	r4, r6, #4
 8005ade:	4360      	muls	r0, r4
 8005ae0:	402e      	ands	r6, r5
 8005ae2:	1980      	adds	r0, r0, r6
    printf("RTC: 20%02u-%02u-%02u %02u:%02u:%02u\r\n", year, month, day, hour, minute, second);
 8005ae4:	b2ff      	uxtb	r7, r7
 8005ae6:	b2c0      	uxtb	r0, r0
 8005ae8:	9000      	str	r0, [sp, #0]
 8005aea:	9b05      	ldr	r3, [sp, #20]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	b2c9      	uxtb	r1, r1
 8005af0:	9701      	str	r7, [sp, #4]
 8005af2:	4803      	ldr	r0, [pc, #12]	@ (8005b00 <PrintCurrentRTC+0x88>)
 8005af4:	f014 f8e0 	bl	8019cb8 <iprintf>
}
 8005af8:	b00d      	add	sp, #52	@ 0x34
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afc:	200009f8 	.word	0x200009f8
 8005b00:	0801c7b2 	.word	0x0801c7b2

08005b04 <Check_And_Save_When_Target_Reached>:
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t target_raw = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005b06:	4f2b      	ldr	r7, [pc, #172]	@ (8005bb4 <Check_And_Save_When_Target_Reached+0xb0>)
 8005b08:	2107      	movs	r1, #7
{
 8005b0a:	b089      	sub	sp, #36	@ 0x24
    uint32_t target_raw = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005b0c:	0038      	movs	r0, r7
 8005b0e:	f00c f8a7 	bl	8011c60 <HAL_RTCEx_BKUPRead>
 8005b12:	0005      	movs	r5, r0
    printf("[Check] BKP_WAKEUP_TIME(raw)=%lu (0x%08lX)\r\n",
 8005b14:	4828      	ldr	r0, [pc, #160]	@ (8005bb8 <Check_And_Save_When_Target_Reached+0xb4>)
 8005b16:	002a      	movs	r2, r5
 8005b18:	0029      	movs	r1, r5
 8005b1a:	f014 f8cd 	bl	8019cb8 <iprintf>
    if (target_raw == 0xFFFFFFFFu) {
 8005b1e:	1c6b      	adds	r3, r5, #1
 8005b20:	d10f      	bne.n	8005b42 <Check_And_Save_When_Target_Reached+0x3e>
        bool reached_init = (Tick_Save >= (Measure_Rad_Time - 1));
 8005b22:	2408      	movs	r4, #8
 8005b24:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <Check_And_Save_When_Target_Reached+0xb8>)
        printf("[Check] BKP=0xFFFFFFFF → init mode, Tick_Save=%lu → %s\r\n",
 8005b26:	4a26      	ldr	r2, [pc, #152]	@ (8005bc0 <Check_And_Save_When_Target_Reached+0xbc>)
        bool reached_init = (Tick_Save >= (Measure_Rad_Time - 1));
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	428c      	cmp	r4, r1
 8005b2c:	41a4      	sbcs	r4, r4
 8005b2e:	4264      	negs	r4, r4
        printf("[Check] BKP=0xFFFFFFFF → init mode, Tick_Save=%lu → %s\r\n",
 8005b30:	2908      	cmp	r1, #8
 8005b32:	d900      	bls.n	8005b36 <Check_And_Save_When_Target_Reached+0x32>
 8005b34:	4a23      	ldr	r2, [pc, #140]	@ (8005bc4 <Check_And_Save_When_Target_Reached+0xc0>)
 8005b36:	4824      	ldr	r0, [pc, #144]	@ (8005bc8 <Check_And_Save_When_Target_Reached+0xc4>)
 8005b38:	f014 f8be 	bl	8019cb8 <iprintf>
}
 8005b3c:	0020      	movs	r0, r4
 8005b3e:	b009      	add	sp, #36	@ 0x24
 8005b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005b42:	ae03      	add	r6, sp, #12
 8005b44:	0031      	movs	r1, r6
 8005b46:	2200      	movs	r2, #0
 8005b48:	0038      	movs	r0, r7
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005b4a:	ac02      	add	r4, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8005b4c:	f00b ffc2 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8005b50:	2200      	movs	r2, #0
 8005b52:	0038      	movs	r0, r7
 8005b54:	0021      	movs	r1, r4
 8005b56:	f00b ffef 	bl	8011b38 <HAL_RTC_GetDate>
    if (target_raw >= 1000000u) {
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <Check_And_Save_When_Target_Reached+0xc8>)
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005b5c:	7833      	ldrb	r3, [r6, #0]
                       (uint32_t)t.Minutes * 60u +
 8005b5e:	7877      	ldrb	r7, [r6, #1]
                       (uint32_t)t.Seconds;
 8005b60:	78b6      	ldrb	r6, [r6, #2]
    if (target_raw >= 1000000u) {
 8005b62:	4295      	cmp	r5, r2
 8005b64:	d914      	bls.n	8005b90 <Check_And_Save_When_Target_Reached+0x8c>
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005b66:	7861      	ldrb	r1, [r4, #1]
 8005b68:	78a2      	ldrb	r2, [r4, #2]
 8005b6a:	78e0      	ldrb	r0, [r4, #3]
 8005b6c:	9601      	str	r6, [sp, #4]
 8005b6e:	9700      	str	r7, [sp, #0]
 8005b70:	f003 fcfc 	bl	800956c <ymd_to_epoch>
        reached = (now_epoch >= target_raw);
 8005b74:	2400      	movs	r4, #0
 8005b76:	42a8      	cmp	r0, r5
 8005b78:	4164      	adcs	r4, r4
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 8005b7a:	0001      	movs	r1, r0
        printf("[Check][epoch] now=%lu, target=%lu → %s\r\n",
 8005b7c:	4b10      	ldr	r3, [pc, #64]	@ (8005bc0 <Check_And_Save_When_Target_Reached+0xbc>)
        reached = (now_epoch >= target_raw);
 8005b7e:	b2e4      	uxtb	r4, r4
        printf("[Check][epoch] now=%lu, target=%lu → %s\r\n",
 8005b80:	4285      	cmp	r5, r0
 8005b82:	d800      	bhi.n	8005b86 <Check_And_Save_When_Target_Reached+0x82>
 8005b84:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc4 <Check_And_Save_When_Target_Reached+0xc0>)
 8005b86:	4812      	ldr	r0, [pc, #72]	@ (8005bd0 <Check_And_Save_When_Target_Reached+0xcc>)
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005b88:	002a      	movs	r2, r5
 8005b8a:	f014 f895 	bl	8019cb8 <iprintf>
 8005b8e:	e7d5      	b.n	8005b3c <Check_And_Save_When_Target_Reached+0x38>
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005b90:	21e1      	movs	r1, #225	@ 0xe1
 8005b92:	0109      	lsls	r1, r1, #4
 8005b94:	4359      	muls	r1, r3
                       (uint32_t)t.Minutes * 60u +
 8005b96:	233c      	movs	r3, #60	@ 0x3c
        reached = (now_sod >= target_raw);
 8005b98:	2400      	movs	r4, #0
                       (uint32_t)t.Minutes * 60u +
 8005b9a:	437b      	muls	r3, r7
    uint32_t now_sod = (uint32_t)t.Hours * 3600u +
 8005b9c:	18c9      	adds	r1, r1, r3
 8005b9e:	1989      	adds	r1, r1, r6
        reached = (now_sod >= target_raw);
 8005ba0:	42a9      	cmp	r1, r5
 8005ba2:	4164      	adcs	r4, r4
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <Check_And_Save_When_Target_Reached+0xbc>)
        reached = (now_sod >= target_raw);
 8005ba6:	b2e4      	uxtb	r4, r4
        printf("[Check][legacy-sod] now=%lu, target=%lu → %s\r\n",
 8005ba8:	428d      	cmp	r5, r1
 8005baa:	d800      	bhi.n	8005bae <Check_And_Save_When_Target_Reached+0xaa>
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <Check_And_Save_When_Target_Reached+0xc0>)
 8005bae:	4809      	ldr	r0, [pc, #36]	@ (8005bd4 <Check_And_Save_When_Target_Reached+0xd0>)
 8005bb0:	e7ea      	b.n	8005b88 <Check_And_Save_When_Target_Reached+0x84>
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	200009f8 	.word	0x200009f8
 8005bb8:	0801c7e9 	.word	0x0801c7e9
 8005bbc:	20000540 	.word	0x20000540
 8005bc0:	0801c7e1 	.word	0x0801c7e1
 8005bc4:	0801c7d9 	.word	0x0801c7d9
 8005bc8:	0801c816 	.word	0x0801c816
 8005bcc:	000f423f 	.word	0x000f423f
 8005bd0:	0801c853 	.word	0x0801c853
 8005bd4:	0801c87f 	.word	0x0801c87f

08005bd8 <Count_Filter_Kalman>:
{
 8005bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    count_log = comp1_count;
 8005bda:	4b42      	ldr	r3, [pc, #264]	@ (8005ce4 <Count_Filter_Kalman+0x10c>)
{
 8005bdc:	b08b      	sub	sp, #44	@ 0x2c
    count_log = comp1_count;
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	4b41      	ldr	r3, [pc, #260]	@ (8005ce8 <Count_Filter_Kalman+0x110>)
 8005be2:	6018      	str	r0, [r3, #0]
    double measurement = (double)count_log;
 8005be4:	f7fd fdb4 	bl	8003750 <__aeabi_ui2d>
 8005be8:	000f      	movs	r7, r1
    if (!kalmanInit) {
 8005bea:	4940      	ldr	r1, [pc, #256]	@ (8005cec <Count_Filter_Kalman+0x114>)
    double measurement = (double)count_log;
 8005bec:	0006      	movs	r6, r0
    if (!kalmanInit) {
 8005bee:	780b      	ldrb	r3, [r1, #0]
 8005bf0:	4c3f      	ldr	r4, [pc, #252]	@ (8005cf0 <Count_Filter_Kalman+0x118>)
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d113      	bne.n	8005c1e <Count_Filter_Kalman+0x46>
        P = 1.0;
 8005bf6:	2200      	movs	r2, #0
        kalmanInit = true;
 8005bf8:	2001      	movs	r0, #1
        x_est = measurement;
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf4 <Count_Filter_Kalman+0x11c>)
        kalmanInit = true;
 8005bfc:	7008      	strb	r0, [r1, #0]
        x_est = measurement;
 8005bfe:	601e      	str	r6, [r3, #0]
 8005c00:	605f      	str	r7, [r3, #4]
        P = 1.0;
 8005c02:	4b3d      	ldr	r3, [pc, #244]	@ (8005cf8 <Count_Filter_Kalman+0x120>)
        printf("[INIT] Raw=%.0f x_est(Raw)=%.6f P=%.6f\r\n",
 8005c04:	483d      	ldr	r0, [pc, #244]	@ (8005cfc <Count_Filter_Kalman+0x124>)
        P = 1.0;
 8005c06:	6022      	str	r2, [r4, #0]
 8005c08:	6063      	str	r3, [r4, #4]
        printf("[INIT] Raw=%.0f x_est(Raw)=%.6f P=%.6f\r\n",
 8005c0a:	9202      	str	r2, [sp, #8]
 8005c0c:	9303      	str	r3, [sp, #12]
 8005c0e:	9600      	str	r6, [sp, #0]
 8005c10:	9701      	str	r7, [sp, #4]
    printf("Raw=%.0f x_est(Raw)=%.6f Dose=%.4f\r\n",
 8005c12:	0032      	movs	r2, r6
 8005c14:	003b      	movs	r3, r7
 8005c16:	f014 f84f 	bl	8019cb8 <iprintf>
}
 8005c1a:	b00b      	add	sp, #44	@ 0x2c
 8005c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    double P_pred = P + Q;
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	6861      	ldr	r1, [r4, #4]
 8005c22:	4a37      	ldr	r2, [pc, #220]	@ (8005d00 <Count_Filter_Kalman+0x128>)
 8005c24:	4b37      	ldr	r3, [pc, #220]	@ (8005d04 <Count_Filter_Kalman+0x12c>)
 8005c26:	f7fb fe17 	bl	8001858 <__aeabi_dadd>
    double K = P_pred / (P_pred + R);
 8005c2a:	4a37      	ldr	r2, [pc, #220]	@ (8005d08 <Count_Filter_Kalman+0x130>)
 8005c2c:	4b37      	ldr	r3, [pc, #220]	@ (8005d0c <Count_Filter_Kalman+0x134>)
    double P_pred = P + Q;
 8005c2e:	9006      	str	r0, [sp, #24]
 8005c30:	9107      	str	r1, [sp, #28]
    double K = P_pred / (P_pred + R);
 8005c32:	f7fb fe11 	bl	8001858 <__aeabi_dadd>
 8005c36:	0002      	movs	r2, r0
 8005c38:	000b      	movs	r3, r1
 8005c3a:	9806      	ldr	r0, [sp, #24]
 8005c3c:	9907      	ldr	r1, [sp, #28]
 8005c3e:	f7fc f9d1 	bl	8001fe4 <__aeabi_ddiv>
    double delta = measurement - x_est;
 8005c42:	4d2c      	ldr	r5, [pc, #176]	@ (8005cf4 <Count_Filter_Kalman+0x11c>)
    double K = P_pred / (P_pred + R);
 8005c44:	9008      	str	r0, [sp, #32]
 8005c46:	9109      	str	r1, [sp, #36]	@ 0x24
    double delta = measurement - x_est;
 8005c48:	682a      	ldr	r2, [r5, #0]
 8005c4a:	686b      	ldr	r3, [r5, #4]
 8005c4c:	0030      	movs	r0, r6
 8005c4e:	0039      	movs	r1, r7
 8005c50:	9204      	str	r2, [sp, #16]
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f7fd f8e6 	bl	8002e24 <__aeabi_dsub>
    x_est = x_est + K * delta;
 8005c58:	9a08      	ldr	r2, [sp, #32]
 8005c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5c:	f7fc fdfc 	bl	8002858 <__aeabi_dmul>
 8005c60:	9a04      	ldr	r2, [sp, #16]
 8005c62:	9b05      	ldr	r3, [sp, #20]
 8005c64:	f7fb fdf8 	bl	8001858 <__aeabi_dadd>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	000b      	movs	r3, r1
 8005c6c:	9004      	str	r0, [sp, #16]
 8005c6e:	9105      	str	r1, [sp, #20]
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	606b      	str	r3, [r5, #4]
    P = (1.0 - K) * P_pred;
 8005c74:	9a08      	ldr	r2, [sp, #32]
 8005c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c78:	2000      	movs	r0, #0
 8005c7a:	491f      	ldr	r1, [pc, #124]	@ (8005cf8 <Count_Filter_Kalman+0x120>)
 8005c7c:	f7fd f8d2 	bl	8002e24 <__aeabi_dsub>
 8005c80:	9a06      	ldr	r2, [sp, #24]
 8005c82:	9b07      	ldr	r3, [sp, #28]
 8005c84:	f7fc fde8 	bl	8002858 <__aeabi_dmul>
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005c88:	4a21      	ldr	r2, [pc, #132]	@ (8005d10 <Count_Filter_Kalman+0x138>)
    P = (1.0 - K) * P_pred;
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	6061      	str	r1, [r4, #4]
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005c8e:	9804      	ldr	r0, [sp, #16]
 8005c90:	9905      	ldr	r1, [sp, #20]
 8005c92:	4b20      	ldr	r3, [pc, #128]	@ (8005d14 <Count_Filter_Kalman+0x13c>)
 8005c94:	f7fc fde0 	bl	8002858 <__aeabi_dmul>
 8005c98:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <Count_Filter_Kalman+0x140>)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <Count_Filter_Kalman+0x144>)
 8005c9c:	f7fd f8c2 	bl	8002e24 <__aeabi_dsub>
    if (Cal_dose < 0) Cal_dose = 0;
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2300      	movs	r3, #0
    double Cal_dose = 45.429 * x_est + -4.8496;
 8005ca4:	0004      	movs	r4, r0
 8005ca6:	000d      	movs	r5, r1
    if (Cal_dose < 0) Cal_dose = 0;
 8005ca8:	f7fa fbea 	bl	8000480 <__aeabi_dcmplt>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d001      	beq.n	8005cb4 <Count_Filter_Kalman+0xdc>
 8005cb0:	2400      	movs	r4, #0
 8005cb2:	2500      	movs	r5, #0
    dose_log = (uint32_t)(Cal_dose * 100.0 + 0.5);
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d20 <Count_Filter_Kalman+0x148>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	0020      	movs	r0, r4
 8005cba:	9306      	str	r3, [sp, #24]
 8005cbc:	0029      	movs	r1, r5
 8005cbe:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <Count_Filter_Kalman+0x14c>)
 8005cc0:	f7fc fdca 	bl	8002858 <__aeabi_dmul>
 8005cc4:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <Count_Filter_Kalman+0x150>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f7fb fdc6 	bl	8001858 <__aeabi_dadd>
 8005ccc:	f7fa fc90 	bl	80005f0 <__aeabi_d2uiz>
 8005cd0:	9b06      	ldr	r3, [sp, #24]
 8005cd2:	6018      	str	r0, [r3, #0]
    printf("Raw=%.0f x_est(Raw)=%.6f Dose=%.4f\r\n",
 8005cd4:	9402      	str	r4, [sp, #8]
 8005cd6:	9503      	str	r5, [sp, #12]
 8005cd8:	9b04      	ldr	r3, [sp, #16]
 8005cda:	9c05      	ldr	r4, [sp, #20]
 8005cdc:	4813      	ldr	r0, [pc, #76]	@ (8005d2c <Count_Filter_Kalman+0x154>)
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	9401      	str	r4, [sp, #4]
 8005ce2:	e796      	b.n	8005c12 <Count_Filter_Kalman+0x3a>
 8005ce4:	20000560 	.word	0x20000560
 8005ce8:	2000055c 	.word	0x2000055c
 8005cec:	200004f0 	.word	0x200004f0
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	200004e8 	.word	0x200004e8
 8005cf8:	3ff00000 	.word	0x3ff00000
 8005cfc:	0801c8b0 	.word	0x0801c8b0
 8005d00:	47ae147b 	.word	0x47ae147b
 8005d04:	3f747ae1 	.word	0x3f747ae1
 8005d08:	3d70a3d7 	.word	0x3d70a3d7
 8005d0c:	3fefd70a 	.word	0x3fefd70a
 8005d10:	78d4fdf4 	.word	0x78d4fdf4
 8005d14:	4046b6e9 	.word	0x4046b6e9
 8005d18:	8adab9f5 	.word	0x8adab9f5
 8005d1c:	401365fd 	.word	0x401365fd
 8005d20:	20000530 	.word	0x20000530
 8005d24:	40590000 	.word	0x40590000
 8005d28:	3fe00000 	.word	0x3fe00000
 8005d2c:	0801c8d9 	.word	0x0801c8d9

08005d30 <Backup_GetMode>:
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005d30:	2101      	movs	r1, #1
{
 8005d32:	b510      	push	{r4, lr}
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005d34:	4818      	ldr	r0, [pc, #96]	@ (8005d98 <Backup_GetMode+0x68>)
 8005d36:	f00b ff93 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    if (mode_raw > MODE_End) {
 8005d3a:	b283      	uxth	r3, r0
    val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005d3c:	0002      	movs	r2, r0
    if (mode_raw > MODE_End) {
 8005d3e:	2b07      	cmp	r3, #7
 8005d40:	d824      	bhi.n	8005d8c <Backup_GetMode+0x5c>
        mode = (SystemMode)mode_raw;
 8005d42:	b2c4      	uxtb	r4, r0
    switch (mode) {
 8005d44:	1e60      	subs	r0, r4, #1
 8005d46:	2806      	cmp	r0, #6
 8005d48:	d81d      	bhi.n	8005d86 <Backup_GetMode+0x56>
 8005d4a:	f7fa f9ef 	bl	800012c <__gnu_thumb1_case_uqi>
 8005d4e:	2204      	.short	0x2204
 8005d50:	16131007 	.word	0x16131007
 8005d54:	19          	.byte	0x19
 8005d55:	00          	.byte	0x00
 8005d56:	2300      	movs	r3, #0
        default:                mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8005d58:	4910      	ldr	r1, [pc, #64]	@ (8005d9c <Backup_GetMode+0x6c>)
 8005d5a:	e001      	b.n	8005d60 <Backup_GetMode+0x30>
        case MODE_Start:        mode_str = "MODE_Start";        Meas_Mode = 2; break;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	4910      	ldr	r1, [pc, #64]	@ (8005da0 <Backup_GetMode+0x70>)
        case MODE_Boot:         mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8005d60:	4810      	ldr	r0, [pc, #64]	@ (8005da4 <Backup_GetMode+0x74>)
 8005d62:	7003      	strb	r3, [r0, #0]
    printf("Current Mode: %s (raw=0x%08lX)\r\n", mode_str, val);
 8005d64:	4810      	ldr	r0, [pc, #64]	@ (8005da8 <Backup_GetMode+0x78>)
 8005d66:	f013 ffa7 	bl	8019cb8 <iprintf>
}
 8005d6a:	0020      	movs	r0, r4
 8005d6c:	bd10      	pop	{r4, pc}
        case MODE_Pause:        mode_str = "MODE_Pause";        Meas_Mode = 3; break;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	@ (8005dac <Backup_GetMode+0x7c>)
 8005d72:	e7f5      	b.n	8005d60 <Backup_GetMode+0x30>
        case MODE_Start_Button: mode_str = "MODE_Start_Button"; Meas_Mode = 4; break;
 8005d74:	2304      	movs	r3, #4
 8005d76:	490e      	ldr	r1, [pc, #56]	@ (8005db0 <Backup_GetMode+0x80>)
 8005d78:	e7f2      	b.n	8005d60 <Backup_GetMode+0x30>
        case Mode_Start_Delay:  mode_str = "Mode_Start_Delay" ; Meas_Mode = 5; break;
 8005d7a:	2305      	movs	r3, #5
 8005d7c:	490d      	ldr	r1, [pc, #52]	@ (8005db4 <Backup_GetMode+0x84>)
 8005d7e:	e7ef      	b.n	8005d60 <Backup_GetMode+0x30>
        case MODE_End:          mode_str = "MODE_End";          Meas_Mode = 6; break;
 8005d80:	2306      	movs	r3, #6
 8005d82:	490d      	ldr	r1, [pc, #52]	@ (8005db8 <Backup_GetMode+0x88>)
 8005d84:	e7ec      	b.n	8005d60 <Backup_GetMode+0x30>
        default:                mode_str = "MODE_Boot";         Meas_Mode = 0; break;
 8005d86:	2300      	movs	r3, #0
 8005d88:	001c      	movs	r4, r3
 8005d8a:	e7e5      	b.n	8005d58 <Backup_GetMode+0x28>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2401      	movs	r4, #1
 8005d90:	e7e2      	b.n	8005d58 <Backup_GetMode+0x28>
    switch (mode) {
 8005d92:	2301      	movs	r3, #1
 8005d94:	4909      	ldr	r1, [pc, #36]	@ (8005dbc <Backup_GetMode+0x8c>)
 8005d96:	e7e3      	b.n	8005d60 <Backup_GetMode+0x30>
 8005d98:	200009f8 	.word	0x200009f8
 8005d9c:	0801c8fe 	.word	0x0801c8fe
 8005da0:	0801c912 	.word	0x0801c912
 8005da4:	20000535 	.word	0x20000535
 8005da8:	0801c954 	.word	0x0801c954
 8005dac:	0801c91d 	.word	0x0801c91d
 8005db0:	0801c928 	.word	0x0801c928
 8005db4:	0801c93a 	.word	0x0801c93a
 8005db8:	0801c94b 	.word	0x0801c94b
 8005dbc:	0801c908 	.word	0x0801c908

08005dc0 <Backup_SetMode>:
{
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();
 8005dc4:	f00a fc34 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005dc8:	4d06      	ldr	r5, [pc, #24]	@ (8005de4 <Backup_SetMode+0x24>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	0028      	movs	r0, r5
 8005dce:	f00b ff47 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    val = (val & 0xFFFF0000) | (mode & 0xFFFF);
 8005dd2:	0c02      	lsrs	r2, r0, #16
 8005dd4:	0412      	lsls	r2, r2, #16
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 8005dd6:	0028      	movs	r0, r5
 8005dd8:	2101      	movs	r1, #1
    val = (val & 0xFFFF0000) | (mode & 0xFFFF);
 8005dda:	4322      	orrs	r2, r4
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 8005ddc:	f00b ff38 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
}
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	200009f8 	.word	0x200009f8

08005de8 <Clear_WakeupTime_Backup>:
{
 8005de8:	b510      	push	{r4, lr}
    HAL_PWR_EnableBkUpAccess();
 8005dea:	f00a fc21 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, 0xFFFFFFFF);
 8005dee:	2201      	movs	r2, #1
 8005df0:	4c07      	ldr	r4, [pc, #28]	@ (8005e10 <Clear_WakeupTime_Backup+0x28>)
 8005df2:	4252      	negs	r2, r2
 8005df4:	0020      	movs	r0, r4
 8005df6:	2107      	movs	r1, #7
 8005df8:	f00b ff2a 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005dfc:	2107      	movs	r1, #7
 8005dfe:	0020      	movs	r0, r4
 8005e00:	f00b ff2e 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    printf("[Clear] BKP_WAKEUP_TIME Write: 0xFFFFFFFF, ReadBack = 0x%08lX\n", check);
 8005e04:	4b03      	ldr	r3, [pc, #12]	@ (8005e14 <Clear_WakeupTime_Backup+0x2c>)
    uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8005e06:	0001      	movs	r1, r0
    printf("[Clear] BKP_WAKEUP_TIME Write: 0xFFFFFFFF, ReadBack = 0x%08lX\n", check);
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f013 ff55 	bl	8019cb8 <iprintf>
}
 8005e0e:	bd10      	pop	{r4, pc}
 8005e10:	200009f8 	.word	0x200009f8
 8005e14:	0801c975 	.word	0x0801c975

08005e18 <Switch_Backup_reg>:
{
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	0004      	movs	r4, r0
    SystemMode prev_mode = Backup_GetMode();
 8005e1c:	f7ff ff88 	bl	8005d30 <Backup_GetMode>
    if (prev_mode != new_mode) {
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d004      	beq.n	8005e2e <Switch_Backup_reg+0x16>
        Backup_SetMode(new_mode);
 8005e24:	0020      	movs	r0, r4
 8005e26:	f7ff ffcb 	bl	8005dc0 <Backup_SetMode>
        Backup_GetMode();
 8005e2a:	f7ff ff81 	bl	8005d30 <Backup_GetMode>
    SystemMode cur_mode = Backup_GetMode(); // 이때 Meas_Mode도 자동 세팅됨
 8005e2e:	f7ff ff7f 	bl	8005d30 <Backup_GetMode>
    switch (cur_mode) {
 8005e32:	3802      	subs	r0, #2
 8005e34:	2300      	movs	r3, #0
 8005e36:	2805      	cmp	r0, #5
 8005e38:	d805      	bhi.n	8005e46 <Switch_Backup_reg+0x2e>
 8005e3a:	f7fa f977 	bl	800012c <__gnu_thumb1_case_uqi>
 8005e3e:	0307      	.short	0x0307
 8005e40:	2318110b 	.word	0x2318110b
 8005e44:	2302      	movs	r3, #2
        case MODE_Boot:   Meas_Mode = 0; break;
 8005e46:	4a10      	ldr	r2, [pc, #64]	@ (8005e88 <Switch_Backup_reg+0x70>)
 8005e48:	7013      	strb	r3, [r2, #0]
}
 8005e4a:	bd10      	pop	{r4, pc}
        	RTC_Disable_All_Wakeup();
 8005e4c:	f7ff fc28 	bl	80056a0 <RTC_Disable_All_Wakeup>
        	break;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e7f8      	b.n	8005e46 <Switch_Backup_reg+0x2e>
        	Clear_WakeupTime_Backup();
 8005e54:	f7ff ffc8 	bl	8005de8 <Clear_WakeupTime_Backup>
        	RTC_Disable_All_Wakeup();
 8005e58:	f7ff fc22 	bl	80056a0 <RTC_Disable_All_Wakeup>
        	break;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e7f2      	b.n	8005e46 <Switch_Backup_reg+0x2e>
        case MODE_Start_Button: Tick_Save = Interval_LCD_Count+2;  Meas_Mode = 4; break;
 8005e60:	4b0a      	ldr	r3, [pc, #40]	@ (8005e8c <Switch_Backup_reg+0x74>)
 8005e62:	4a0b      	ldr	r2, [pc, #44]	@ (8005e90 <Switch_Backup_reg+0x78>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3302      	adds	r3, #2
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	2304      	movs	r3, #4
 8005e6c:	e7eb      	b.n	8005e46 <Switch_Backup_reg+0x2e>
        	if(current_settings.start_mode == 0x04){
 8005e6e:	4b09      	ldr	r3, [pc, #36]	@ (8005e94 <Switch_Backup_reg+0x7c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d103      	bne.n	8005e7e <Switch_Backup_reg+0x66>
        		Set_StartTargetTime_FromReservation();
 8005e76:	f7ff fcb9 	bl	80057ec <Set_StartTargetTime_FromReservation>
        	break;
 8005e7a:	2305      	movs	r3, #5
 8005e7c:	e7e3      	b.n	8005e46 <Switch_Backup_reg+0x2e>
        	Start_Delay_Timer();}
 8005e7e:	f7ff fda7 	bl	80059d0 <Start_Delay_Timer>
 8005e82:	e7fa      	b.n	8005e7a <Switch_Backup_reg+0x62>
        case MODE_End:    Meas_Mode = 6; break;
 8005e84:	2306      	movs	r3, #6
 8005e86:	e7de      	b.n	8005e46 <Switch_Backup_reg+0x2e>
 8005e88:	20000535 	.word	0x20000535
 8005e8c:	2000053c 	.word	0x2000053c
 8005e90:	20000540 	.word	0x20000540
 8005e94:	20002c19 	.word	0x20002c19

08005e98 <Get_in_Shutdown_Timer>:
{
 8005e98:	b510      	push	{r4, lr}
    Switch_Backup_reg(MODE_Start_Button);
 8005e9a:	2005      	movs	r0, #5
 8005e9c:	f7ff ffbc 	bl	8005e18 <Switch_Backup_reg>
    LCD_Clear_Display(LCD_data);
 8005ea0:	4824      	ldr	r0, [pc, #144]	@ (8005f34 <Get_in_Shutdown_Timer+0x9c>)
 8005ea2:	f7fe ff29 	bl	8004cf8 <LCD_Clear_Display>
    printf("Getting on to sleep(Timer)\r\n");
 8005ea6:	4824      	ldr	r0, [pc, #144]	@ (8005f38 <Get_in_Shutdown_Timer+0xa0>)
 8005ea8:	f013 ff76 	bl	8019d98 <puts>
    if (rad_interval_count == 0) {
 8005eac:	4b23      	ldr	r3, [pc, #140]	@ (8005f3c <Get_in_Shutdown_Timer+0xa4>)
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	4b23      	ldr	r3, [pc, #140]	@ (8005f40 <Get_in_Shutdown_Timer+0xa8>)
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	d129      	bne.n	8005f0a <Get_in_Shutdown_Timer+0x72>
        sleep_time = current_settings.temp_interval - 14;
 8005eb6:	0019      	movs	r1, r3
 8005eb8:	001a      	movs	r2, r3
 8005eba:	3180      	adds	r1, #128	@ 0x80
 8005ebc:	7809      	ldrb	r1, [r1, #0]
 8005ebe:	327f      	adds	r2, #127	@ 0x7f
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	0209      	lsls	r1, r1, #8
 8005ec4:	4311      	orrs	r1, r2
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	3281      	adds	r2, #129	@ 0x81
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	3382      	adds	r3, #130	@ 0x82
 8005ece:	781c      	ldrb	r4, [r3, #0]
 8005ed0:	0412      	lsls	r2, r2, #16
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	0624      	lsls	r4, r4, #24
 8005ed6:	4314      	orrs	r4, r2
        printf("다음번엔 Rad 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005ed8:	481a      	ldr	r0, [pc, #104]	@ (8005f44 <Get_in_Shutdown_Timer+0xac>)
        sleep_time = current_settings.temp_interval - 14;
 8005eda:	3c0e      	subs	r4, #14
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005edc:	0021      	movs	r1, r4
 8005ede:	f013 feeb 	bl	8019cb8 <iprintf>
    RTC_Disable_All_Wakeup();
 8005ee2:	f7ff fbdd 	bl	80056a0 <RTC_Disable_All_Wakeup>
    Save_Power_Function();
 8005ee6:	f7ff fd29 	bl	800593c <Save_Power_Function>
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8005eea:	2081      	movs	r0, #129	@ 0x81
 8005eec:	f00a fbaa 	bl	8010644 <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
 8005ef0:	2002      	movs	r0, #2
 8005ef2:	f00a fba7 	bl	8010644 <HAL_PWR_EnableWakeUpPin>
    RTC_SetAlarmA_SecondsFromNow(sleep_time);
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f7ff fbfc 	bl	80056f4 <RTC_SetAlarmA_SecondsFromNow>
    HAL_SuspendTick();
 8005efc:	f007 ff74 	bl	800dde8 <HAL_SuspendTick>
    HAL_PWR_EnterSHUTDOWNMode();
 8005f00:	f00a fbae 	bl	8010660 <HAL_PWR_EnterSHUTDOWNMode>
    HAL_ResumeTick();
 8005f04:	f007 ff78 	bl	800ddf8 <HAL_ResumeTick>
}
 8005f08:	bd10      	pop	{r4, pc}
        sleep_time = current_settings.temp_interval - 5;
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	3180      	adds	r1, #128	@ 0x80
 8005f10:	7809      	ldrb	r1, [r1, #0]
 8005f12:	327f      	adds	r2, #127	@ 0x7f
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	0209      	lsls	r1, r1, #8
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	001a      	movs	r2, r3
 8005f1c:	3281      	adds	r2, #129	@ 0x81
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	3382      	adds	r3, #130	@ 0x82
 8005f22:	781c      	ldrb	r4, [r3, #0]
 8005f24:	0412      	lsls	r2, r2, #16
 8005f26:	430a      	orrs	r2, r1
 8005f28:	0624      	lsls	r4, r4, #24
 8005f2a:	4314      	orrs	r4, r2
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005f2c:	4806      	ldr	r0, [pc, #24]	@ (8005f48 <Get_in_Shutdown_Timer+0xb0>)
        sleep_time = current_settings.temp_interval - 5;
 8005f2e:	3c05      	subs	r4, #5
         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005f30:	e7d4      	b.n	8005edc <Get_in_Shutdown_Timer+0x44>
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	20000514 	.word	0x20000514
 8005f38:	0801c9b4 	.word	0x0801c9b4
 8005f3c:	200004fd 	.word	0x200004fd
 8005f40:	20002bac 	.word	0x20002bac
 8005f44:	0801c9d0 	.word	0x0801c9d0
 8005f48:	0801ca00 	.word	0x0801ca00

08005f4c <Start_Wake_Timer>:
void Start_Wake_Timer(){
 8005f4c:	b510      	push	{r4, lr}
	Switch_Backup_reg(MODE_Start_Button);
 8005f4e:	2005      	movs	r0, #5
 8005f50:	f7ff ff62 	bl	8005e18 <Switch_Backup_reg>
	LCD_Clear_Display(LCD_data);
 8005f54:	481b      	ldr	r0, [pc, #108]	@ (8005fc4 <Start_Wake_Timer+0x78>)
 8005f56:	f7fe fecf 	bl	8004cf8 <LCD_Clear_Display>
	RTC_Disable_All_Wakeup();
 8005f5a:	f7ff fba1 	bl	80056a0 <RTC_Disable_All_Wakeup>
	    if (rad_interval_count == 0) {
 8005f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc8 <Start_Wake_Timer+0x7c>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <Start_Wake_Timer+0x80>)
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d119      	bne.n	8005f9c <Start_Wake_Timer+0x50>
	        sleep_time = current_settings.temp_interval - 14;
 8005f68:	0019      	movs	r1, r3
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	3180      	adds	r1, #128	@ 0x80
 8005f6e:	7809      	ldrb	r1, [r1, #0]
 8005f70:	327f      	adds	r2, #127	@ 0x7f
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	0209      	lsls	r1, r1, #8
 8005f76:	4311      	orrs	r1, r2
 8005f78:	001a      	movs	r2, r3
 8005f7a:	3281      	adds	r2, #129	@ 0x81
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	3382      	adds	r3, #130	@ 0x82
 8005f80:	781c      	ldrb	r4, [r3, #0]
 8005f82:	0412      	lsls	r2, r2, #16
 8005f84:	430a      	orrs	r2, r1
 8005f86:	0624      	lsls	r4, r4, #24
 8005f88:	4314      	orrs	r4, r2
	        printf("다음번엔 Rad 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005f8a:	4811      	ldr	r0, [pc, #68]	@ (8005fd0 <Start_Wake_Timer+0x84>)
	        sleep_time = current_settings.temp_interval - 14;
 8005f8c:	3c0e      	subs	r4, #14
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005f8e:	0021      	movs	r1, r4
 8005f90:	f013 fe92 	bl	8019cb8 <iprintf>
	    RTC_SetAlarmA_SecondsFromNow(sleep_time);
 8005f94:	0020      	movs	r0, r4
 8005f96:	f7ff fbad 	bl	80056f4 <RTC_SetAlarmA_SecondsFromNow>
}
 8005f9a:	bd10      	pop	{r4, pc}
	        sleep_time = current_settings.temp_interval - 5;
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	3180      	adds	r1, #128	@ 0x80
 8005fa2:	7809      	ldrb	r1, [r1, #0]
 8005fa4:	327f      	adds	r2, #127	@ 0x7f
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	0209      	lsls	r1, r1, #8
 8005faa:	4311      	orrs	r1, r2
 8005fac:	001a      	movs	r2, r3
 8005fae:	3281      	adds	r2, #129	@ 0x81
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	3382      	adds	r3, #130	@ 0x82
 8005fb4:	781c      	ldrb	r4, [r3, #0]
 8005fb6:	0412      	lsls	r2, r2, #16
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	0624      	lsls	r4, r4, #24
 8005fbc:	4314      	orrs	r4, r2
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005fbe:	4805      	ldr	r0, [pc, #20]	@ (8005fd4 <Start_Wake_Timer+0x88>)
	        sleep_time = current_settings.temp_interval - 5;
 8005fc0:	3c05      	subs	r4, #5
	         printf("다음번엔 Temp 측정, Sleep Time = %lu sec\r\n", sleep_time);
 8005fc2:	e7e4      	b.n	8005f8e <Start_Wake_Timer+0x42>
 8005fc4:	20000514 	.word	0x20000514
 8005fc8:	200004fd 	.word	0x200004fd
 8005fcc:	20002bac 	.word	0x20002bac
 8005fd0:	0801c9d0 	.word	0x0801c9d0
 8005fd4:	0801ca00 	.word	0x0801ca00

08005fd8 <Save_IndexNum_To_Backup>:
void Save_IndexNum_To_Backup(uint16_t idx) {
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();
 8005fdc:	f00a fb28 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 8005fe0:	4d06      	ldr	r5, [pc, #24]	@ (8005ffc <Save_IndexNum_To_Backup+0x24>)
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	f00b fe3b 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    val = (val & 0x0000FFFF) | (((uint32_t)idx) << 16);
 8005fea:	0422      	lsls	r2, r4, #16
 8005fec:	b280      	uxth	r0, r0
 8005fee:	4302      	orrs	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, val);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	0028      	movs	r0, r5
 8005ff4:	f00b fe2c 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
}
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	200009f8 	.word	0x200009f8

08006000 <Save_Dose_To_Backup>:
{
 8006000:	b510      	push	{r4, lr}
 8006002:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX, cfg->dose_max);
 8006004:	6862      	ldr	r2, [r4, #4]
 8006006:	2100      	movs	r1, #0
 8006008:	4804      	ldr	r0, [pc, #16]	@ (800601c <Save_Dose_To_Backup+0x1c>)
 800600a:	f00b fe21 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Dose Max=%u (Raw: 0x%08lX)\n", cfg->dose_max, (unsigned long)cfg->dose_max);
 800600e:	6861      	ldr	r1, [r4, #4]
 8006010:	4803      	ldr	r0, [pc, #12]	@ (8006020 <Save_Dose_To_Backup+0x20>)
 8006012:	000a      	movs	r2, r1
 8006014:	f013 fe50 	bl	8019cb8 <iprintf>
}
 8006018:	bd10      	pop	{r4, pc}
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	200009f8 	.word	0x200009f8
 8006020:	0801ca31 	.word	0x0801ca31

08006024 <Save_Temp_To_Backup>:
{
 8006024:	b510      	push	{r4, lr}
 8006026:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_TEMP_MIN_MAX, pack);
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	2102      	movs	r1, #2
 800602c:	4805      	ldr	r0, [pc, #20]	@ (8006044 <Save_Temp_To_Backup+0x20>)
 800602e:	f00b fe0f 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Temp Max=%d, Min=%d\n", cfg->temp_max, cfg->temp_min);
 8006032:	2302      	movs	r3, #2
 8006034:	5ee2      	ldrsh	r2, [r4, r3]
 8006036:	2300      	movs	r3, #0
 8006038:	5ee1      	ldrsh	r1, [r4, r3]
 800603a:	4803      	ldr	r0, [pc, #12]	@ (8006048 <Save_Temp_To_Backup+0x24>)
 800603c:	f013 fe3c 	bl	8019cb8 <iprintf>
}
 8006040:	bd10      	pop	{r4, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	200009f8 	.word	0x200009f8
 8006048:	0801ca5b 	.word	0x0801ca5b

0800604c <Save_Backup_Index>:
void Save_Backup_Index(void) {
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t reg3 = ((uint32_t)idx_temp << 16) | (idx_rad & 0xFFFF);
 800604e:	4e10      	ldr	r6, [pc, #64]	@ (8006090 <Save_Backup_Index+0x44>)
 8006050:	4d10      	ldr	r5, [pc, #64]	@ (8006094 <Save_Backup_Index+0x48>)
 8006052:	8833      	ldrh	r3, [r6, #0]
 8006054:	882a      	ldrh	r2, [r5, #0]
 8006056:	041b      	lsls	r3, r3, #16
void Save_Backup_Index(void) {
 8006058:	b085      	sub	sp, #20
    uint32_t reg4 = (uint32_t)rad_interval_count;
 800605a:	4f0f      	ldr	r7, [pc, #60]	@ (8006098 <Save_Backup_Index+0x4c>)
    uint32_t reg3 = ((uint32_t)idx_temp << 16) | (idx_rad & 0xFFFF);
 800605c:	4313      	orrs	r3, r2
 800605e:	9302      	str	r3, [sp, #8]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 8006060:	4b0e      	ldr	r3, [pc, #56]	@ (800609c <Save_Backup_Index+0x50>)
    uint32_t reg4 = (uint32_t)rad_interval_count;
 8006062:	783c      	ldrb	r4, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 8006064:	0018      	movs	r0, r3
 8006066:	9a02      	ldr	r2, [sp, #8]
 8006068:	2103      	movs	r1, #3
 800606a:	9303      	str	r3, [sp, #12]
 800606c:	f00b fdf0 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG, reg4);
 8006070:	0022      	movs	r2, r4
 8006072:	9803      	ldr	r0, [sp, #12]
 8006074:	2104      	movs	r1, #4
 8006076:	f00b fdeb 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved Backup Index: idx_rad=%u, idx_temp=%u, rad_interval_count=%u "
 800607a:	783b      	ldrb	r3, [r7, #0]
 800607c:	8832      	ldrh	r2, [r6, #0]
 800607e:	8829      	ldrh	r1, [r5, #0]
 8006080:	9401      	str	r4, [sp, #4]
 8006082:	9c02      	ldr	r4, [sp, #8]
 8006084:	4806      	ldr	r0, [pc, #24]	@ (80060a0 <Save_Backup_Index+0x54>)
 8006086:	9400      	str	r4, [sp, #0]
 8006088:	f013 fe16 	bl	8019cb8 <iprintf>
}
 800608c:	b005      	add	sp, #20
 800608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006090:	200004fe 	.word	0x200004fe
 8006094:	20000500 	.word	0x20000500
 8006098:	200004fd 	.word	0x200004fd
 800609c:	200009f8 	.word	0x200009f8
 80060a0:	0801ca7e 	.word	0x0801ca7e

080060a4 <Clear_Backup_Index>:
void Clear_Backup_Index(void) {
 80060a4:	b570      	push	{r4, r5, r6, lr}
    idx_rad = 0;
 80060a6:	2400      	movs	r4, #0
 80060a8:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <Clear_Backup_Index+0x34>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80060aa:	4d0c      	ldr	r5, [pc, #48]	@ (80060dc <Clear_Backup_Index+0x38>)
    idx_rad = 0;
 80060ac:	801c      	strh	r4, [r3, #0]
    idx_temp = 0;
 80060ae:	4b0c      	ldr	r3, [pc, #48]	@ (80060e0 <Clear_Backup_Index+0x3c>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80060b0:	0028      	movs	r0, r5
    idx_temp = 0;
 80060b2:	801c      	strh	r4, [r3, #0]
    rad_interval_count = 0;
 80060b4:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <Clear_Backup_Index+0x40>)
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80060b6:	0022      	movs	r2, r4
 80060b8:	2103      	movs	r1, #3
    rad_interval_count = 0;
 80060ba:	701c      	strb	r4, [r3, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG, reg3);
 80060bc:	f00b fdc8 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG, reg4);
 80060c0:	0028      	movs	r0, r5
 80060c2:	0022      	movs	r2, r4
 80060c4:	2104      	movs	r1, #4
 80060c6:	f00b fdc3 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Clear] Backup Index Cleared: idx_rad=0, idx_temp=0, rad_interval_count=0 "
 80060ca:	0022      	movs	r2, r4
 80060cc:	0021      	movs	r1, r4
 80060ce:	4806      	ldr	r0, [pc, #24]	@ (80060e8 <Clear_Backup_Index+0x44>)
 80060d0:	f013 fdf2 	bl	8019cb8 <iprintf>
}
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	20000500 	.word	0x20000500
 80060dc:	200009f8 	.word	0x200009f8
 80060e0:	200004fe 	.word	0x200004fe
 80060e4:	200004fd 	.word	0x200004fd
 80060e8:	0801caed 	.word	0x0801caed

080060ec <Save_MarkAndAlarmState_To_Backup>:
{
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	0004      	movs	r4, r0
                 | ((uint32_t)(cfg->alarm_state) << 8);     // 8~19 (6*2bit)
 80060f0:	6985      	ldr	r5, [r0, #24]
    uint32_t val = ((uint32_t)(cfg->mark) & 0xFF)           // 0~7
 80060f2:	7d03      	ldrb	r3, [r0, #20]
                 | ((uint32_t)(cfg->alarm_state) << 8);     // 8~19 (6*2bit)
 80060f4:	022d      	lsls	r5, r5, #8
    uint32_t val = ((uint32_t)(cfg->mark) & 0xFF)           // 0~7
 80060f6:	431d      	orrs	r5, r3
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK, val);
 80060f8:	002a      	movs	r2, r5
 80060fa:	2106      	movs	r1, #6
 80060fc:	4804      	ldr	r0, [pc, #16]	@ (8006110 <Save_MarkAndAlarmState_To_Backup+0x24>)
 80060fe:	f00b fda7 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved Mark=0x%02X, AlarmState=0x%04X (Packed=0x%08lX)\r\n",
 8006102:	002b      	movs	r3, r5
 8006104:	7d21      	ldrb	r1, [r4, #20]
 8006106:	69a2      	ldr	r2, [r4, #24]
 8006108:	4802      	ldr	r0, [pc, #8]	@ (8006114 <Save_MarkAndAlarmState_To_Backup+0x28>)
 800610a:	f013 fdd5 	bl	8019cb8 <iprintf>
}
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	200009f8 	.word	0x200009f8
 8006114:	0801cb5b 	.word	0x0801cb5b

08006118 <Save_IntervalInfo_To_Backup>:
{
 8006118:	b510      	push	{r4, lr}
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_INTERVAL_INFO, info_pack);
 800611a:	4b03      	ldr	r3, [pc, #12]	@ (8006128 <Save_IntervalInfo_To_Backup+0x10>)
 800611c:	69c2      	ldr	r2, [r0, #28]
 800611e:	2108      	movs	r1, #8
 8006120:	0018      	movs	r0, r3
 8006122:	f00b fd95 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
}
 8006126:	bd10      	pop	{r4, pc}
 8006128:	200009f8 	.word	0x200009f8

0800612c <Save_Mark_To_Backup>:
{
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800612e:	4f0b      	ldr	r7, [pc, #44]	@ (800615c <Save_Mark_To_Backup+0x30>)
{
 8006130:	0004      	movs	r4, r0
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006132:	0038      	movs	r0, r7
 8006134:	2106      	movs	r1, #6
 8006136:	f00b fd93 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    uint32_t alarm_bits = (prev_val & 0xFFFFFF00);  // 상위 alarm_state 보존
 800613a:	23ff      	movs	r3, #255	@ 0xff
 800613c:	0006      	movs	r6, r0
    uint32_t prev_val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800613e:	0005      	movs	r5, r0
    uint32_t alarm_bits = (prev_val & 0xFFFFFF00);  // 상위 alarm_state 보존
 8006140:	439e      	bics	r6, r3
    uint32_t new_val = (mark & 0xFF) | alarm_bits;
 8006142:	4326      	orrs	r6, r4
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK, new_val);
 8006144:	0032      	movs	r2, r6
 8006146:	0038      	movs	r0, r7
 8006148:	2106      	movs	r1, #6
 800614a:	f00b fd81 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Debug] Saved ONLY Mark=0x%02X (Prev=0x%08lX → New=0x%08lX)\r\n",
 800614e:	0033      	movs	r3, r6
 8006150:	002a      	movs	r2, r5
 8006152:	0021      	movs	r1, r4
 8006154:	4802      	ldr	r0, [pc, #8]	@ (8006160 <Save_Mark_To_Backup+0x34>)
 8006156:	f013 fdaf 	bl	8019cb8 <iprintf>
}
 800615a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615c:	200009f8 	.word	0x200009f8
 8006160:	0801cb9b 	.word	0x0801cb9b

08006164 <Save_WakeupTime_To_Backup>:
{
 8006164:	b570      	push	{r4, r5, r6, lr}
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, target_sec);
 8006166:	4d0b      	ldr	r5, [pc, #44]	@ (8006194 <Save_WakeupTime_To_Backup+0x30>)
{
 8006168:	0004      	movs	r4, r0
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME, target_sec);
 800616a:	0002      	movs	r2, r0
 800616c:	2107      	movs	r1, #7
 800616e:	0028      	movs	r0, r5
 8006170:	f00b fd6e 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    uint32_t verify = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 8006174:	2107      	movs	r1, #7
 8006176:	0028      	movs	r0, r5
 8006178:	f00b fd72 	bl	8011c60 <HAL_RTCEx_BKUPRead>
 800617c:	0005      	movs	r5, r0
    printf("[Backup] Save Wakeup Target Time = %lu (Raw: 0x%08lX)\n", target_sec, target_sec);
 800617e:	0022      	movs	r2, r4
 8006180:	0021      	movs	r1, r4
 8006182:	4805      	ldr	r0, [pc, #20]	@ (8006198 <Save_WakeupTime_To_Backup+0x34>)
 8006184:	f013 fd98 	bl	8019cb8 <iprintf>
    printf("[Verify] ReadBack Value = %lu (Raw: 0x%08lX)\n", verify, verify);
 8006188:	002a      	movs	r2, r5
 800618a:	0029      	movs	r1, r5
 800618c:	4803      	ldr	r0, [pc, #12]	@ (800619c <Save_WakeupTime_To_Backup+0x38>)
 800618e:	f013 fd93 	bl	8019cb8 <iprintf>
}
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	200009f8 	.word	0x200009f8
 8006198:	0801cbdb 	.word	0x0801cbdb
 800619c:	0801cc12 	.word	0x0801cc12

080061a0 <Save_Pre_RAD_Value_To_Backup>:
{
 80061a0:	b510      	push	{r4, lr}
 80061a2:	0004      	movs	r4, r0
    HAL_PWR_EnableBkUpAccess();   // BKUP 영역 쓰기 권한 허용
 80061a4:	f00a fa44 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE, value);
 80061a8:	0022      	movs	r2, r4
 80061aa:	2105      	movs	r1, #5
 80061ac:	4804      	ldr	r0, [pc, #16]	@ (80061c0 <Save_Pre_RAD_Value_To_Backup+0x20>)
 80061ae:	f00b fd4f 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    printf("[Backup] Save Pre_RAD_Value = %lu (Raw: 0x%08lX)\r\n", value, value);
 80061b2:	0022      	movs	r2, r4
 80061b4:	0021      	movs	r1, r4
 80061b6:	4803      	ldr	r0, [pc, #12]	@ (80061c4 <Save_Pre_RAD_Value_To_Backup+0x24>)
 80061b8:	f013 fd7e 	bl	8019cb8 <iprintf>
}
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	200009f8 	.word	0x200009f8
 80061c4:	0801cc40 	.word	0x0801cc40

080061c8 <Save_All_Config_To_BackupRegister>:
{
 80061c8:	b510      	push	{r4, lr}
 80061ca:	0004      	movs	r4, r0
    Save_Temp_To_Backup(cfg);
 80061cc:	f7ff ff2a 	bl	8006024 <Save_Temp_To_Backup>
    Save_Dose_To_Backup(cfg);
 80061d0:	0020      	movs	r0, r4
 80061d2:	f7ff ff15 	bl	8006000 <Save_Dose_To_Backup>
    Save_MarkAndAlarmState_To_Backup(cfg);
 80061d6:	0020      	movs	r0, r4
 80061d8:	f7ff ff88 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
    Save_IntervalInfo_To_Backup(cfg);
 80061dc:	0020      	movs	r0, r4
 80061de:	f7ff ff9b 	bl	8006118 <Save_IntervalInfo_To_Backup>
}
 80061e2:	bd10      	pop	{r4, pc}

080061e4 <Load_IndexNum_From_Backup>:
{
 80061e4:	b510      	push	{r4, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG);
 80061e6:	2101      	movs	r1, #1
 80061e8:	4802      	ldr	r0, [pc, #8]	@ (80061f4 <Load_IndexNum_From_Backup+0x10>)
 80061ea:	f00b fd39 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    return idx;
 80061ee:	0c00      	lsrs	r0, r0, #16
}
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	200009f8 	.word	0x200009f8

080061f8 <Load_Temp_From_Backup>:
{
 80061f8:	b510      	push	{r4, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_TEMP_MIN_MAX);
 80061fa:	2102      	movs	r1, #2
{
 80061fc:	0004      	movs	r4, r0
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_TEMP_MIN_MAX);
 80061fe:	4805      	ldr	r0, [pc, #20]	@ (8006214 <Load_Temp_From_Backup+0x1c>)
 8006200:	f00b fd2e 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    cfg->temp_max = (int16_t)(val & 0xFFFF);           // 하위 16비트
 8006204:	6020      	str	r0, [r4, #0]
    printf("[Backup] Load Temp Max=%d, Min=%d\n", cfg->temp_max, cfg->temp_min);
 8006206:	1402      	asrs	r2, r0, #16
 8006208:	b201      	sxth	r1, r0
 800620a:	4803      	ldr	r0, [pc, #12]	@ (8006218 <Load_Temp_From_Backup+0x20>)
 800620c:	f013 fd54 	bl	8019cb8 <iprintf>
}
 8006210:	bd10      	pop	{r4, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	200009f8 	.word	0x200009f8
 8006218:	0801cc73 	.word	0x0801cc73

0800621c <Load_Dose_From_Backup>:
{
 800621c:	b510      	push	{r4, lr}
    cfg->dose_max = HAL_RTCEx_BKUPRead(&hrtc, BKP_DOSE_MAX);
 800621e:	2100      	movs	r1, #0
{
 8006220:	0004      	movs	r4, r0
    cfg->dose_max = HAL_RTCEx_BKUPRead(&hrtc, BKP_DOSE_MAX);
 8006222:	4805      	ldr	r0, [pc, #20]	@ (8006238 <Load_Dose_From_Backup+0x1c>)
 8006224:	f00b fd1c 	bl	8011c60 <HAL_RTCEx_BKUPRead>
 8006228:	0001      	movs	r1, r0
 800622a:	6060      	str	r0, [r4, #4]
    printf("[Backup] Load Dose Max=%u (Raw: 0x%08lX)\n", cfg->dose_max, (unsigned long)cfg->dose_max);
 800622c:	000a      	movs	r2, r1
 800622e:	4803      	ldr	r0, [pc, #12]	@ (800623c <Load_Dose_From_Backup+0x20>)
 8006230:	f013 fd42 	bl	8019cb8 <iprintf>
}
 8006234:	bd10      	pop	{r4, pc}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	200009f8 	.word	0x200009f8
 800623c:	0801cc96 	.word	0x0801cc96

08006240 <Load_Backup_Index>:
void Load_Backup_Index(void) {
 8006240:	b570      	push	{r4, r5, r6, lr}
    uint32_t reg3 = HAL_RTCEx_BKUPRead(&hrtc, BKP_IDX_REG);
 8006242:	4d29      	ldr	r5, [pc, #164]	@ (80062e8 <Load_Backup_Index+0xa8>)
 8006244:	2103      	movs	r1, #3
 8006246:	0028      	movs	r0, r5
 8006248:	f00b fd0a 	bl	8011c60 <HAL_RTCEx_BKUPRead>
 800624c:	0004      	movs	r4, r0
    uint32_t reg4 = HAL_RTCEx_BKUPRead(&hrtc, BKP_COUNT_REG);
 800624e:	2104      	movs	r1, #4
 8006250:	0028      	movs	r0, r5
 8006252:	f00b fd05 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    idx_rad = (uint16_t)(reg3 & 0xFFFF);
 8006256:	4b25      	ldr	r3, [pc, #148]	@ (80062ec <Load_Backup_Index+0xac>)
    rad_interval_count = (uint8_t)(reg4 & 0xFF);
 8006258:	4d25      	ldr	r5, [pc, #148]	@ (80062f0 <Load_Backup_Index+0xb0>)
    idx_rad = (uint16_t)(reg3 & 0xFFFF);
 800625a:	801c      	strh	r4, [r3, #0]
    idx_temp = (uint16_t)((reg3 >> 16) & 0xFFFF);
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <Load_Backup_Index+0xb4>)
 800625e:	0c22      	lsrs	r2, r4, #16
 8006260:	801a      	strh	r2, [r3, #0]
    printf("[DEBUG] Load Backup: idx_rad=%u, idx_temp=%u, rad_interval_count=%u\r\n",
 8006262:	b2a1      	uxth	r1, r4
 8006264:	b2c3      	uxtb	r3, r0
    rad_interval_count = (uint8_t)(reg4 & 0xFF);
 8006266:	7028      	strb	r0, [r5, #0]
    printf("[DEBUG] Load Backup: idx_rad=%u, idx_temp=%u, rad_interval_count=%u\r\n",
 8006268:	4823      	ldr	r0, [pc, #140]	@ (80062f8 <Load_Backup_Index+0xb8>)
 800626a:	f013 fd25 	bl	8019cb8 <iprintf>
    rad_ratio = current_settings.rad_interval / current_settings.temp_interval;
 800626e:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <Load_Backup_Index+0xbc>)
 8006270:	4a23      	ldr	r2, [pc, #140]	@ (8006300 <Load_Backup_Index+0xc0>)
 8006272:	0019      	movs	r1, r3
 8006274:	317c      	adds	r1, #124	@ 0x7c
 8006276:	7809      	ldrb	r1, [r1, #0]
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	0209      	lsls	r1, r1, #8
 800627c:	4311      	orrs	r1, r2
 800627e:	001a      	movs	r2, r3
 8006280:	327d      	adds	r2, #125	@ 0x7d
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	4c1f      	ldr	r4, [pc, #124]	@ (8006304 <Load_Backup_Index+0xc4>)
 8006286:	0412      	lsls	r2, r2, #16
 8006288:	430a      	orrs	r2, r1
 800628a:	0019      	movs	r1, r3
 800628c:	317e      	adds	r1, #126	@ 0x7e
 800628e:	7808      	ldrb	r0, [r1, #0]
 8006290:	0019      	movs	r1, r3
 8006292:	0600      	lsls	r0, r0, #24
 8006294:	4310      	orrs	r0, r2
 8006296:	001a      	movs	r2, r3
 8006298:	3180      	adds	r1, #128	@ 0x80
 800629a:	7809      	ldrb	r1, [r1, #0]
 800629c:	327f      	adds	r2, #127	@ 0x7f
 800629e:	7812      	ldrb	r2, [r2, #0]
 80062a0:	0209      	lsls	r1, r1, #8
 80062a2:	4311      	orrs	r1, r2
 80062a4:	001a      	movs	r2, r3
 80062a6:	3281      	adds	r2, #129	@ 0x81
 80062a8:	7812      	ldrb	r2, [r2, #0]
 80062aa:	3382      	adds	r3, #130	@ 0x82
 80062ac:	0412      	lsls	r2, r2, #16
 80062ae:	430a      	orrs	r2, r1
 80062b0:	7819      	ldrb	r1, [r3, #0]
 80062b2:	0609      	lsls	r1, r1, #24
 80062b4:	4311      	orrs	r1, r2
 80062b6:	f7f9 ff57 	bl	8000168 <__udivsi3>
 80062ba:	2201      	movs	r2, #1
 80062bc:	b281      	uxth	r1, r0
 80062be:	1c13      	adds	r3, r2, #0
 80062c0:	428a      	cmp	r2, r1
 80062c2:	d200      	bcs.n	80062c6 <Load_Backup_Index+0x86>
 80062c4:	1c03      	adds	r3, r0, #0
    if (rad_interval_count == 0) {
 80062c6:	7829      	ldrb	r1, [r5, #0]
    rad_ratio = current_settings.rad_interval / current_settings.temp_interval;
 80062c8:	8023      	strh	r3, [r4, #0]
    if (rad_interval_count == 0) {
 80062ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <Load_Backup_Index+0xc8>)
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d105      	bne.n	80062dc <Load_Backup_Index+0x9c>
        measure_Rad_flag = 1;                   // 이번 Interval에서 Rad 측정
 80062d0:	2201      	movs	r2, #1
        printf("[DEBUG] Rad + Temp Measurement scheduled\r\n");
 80062d2:	480e      	ldr	r0, [pc, #56]	@ (800630c <Load_Backup_Index+0xcc>)
        measure_Rad_flag = 1;                   // 이번 Interval에서 Rad 측정
 80062d4:	701a      	strb	r2, [r3, #0]
        printf("[DEBUG] Rad + Temp Measurement scheduled\r\n");
 80062d6:	f013 fd5f 	bl	8019d98 <puts>
}
 80062da:	bd70      	pop	{r4, r5, r6, pc}
        measure_Rad_flag = 0;                   // Rad 측정 없음
 80062dc:	2200      	movs	r2, #0
        printf("[DEBUG] Temp Only (rad_count=%u)\r\n", rad_interval_count);
 80062de:	480c      	ldr	r0, [pc, #48]	@ (8006310 <Load_Backup_Index+0xd0>)
        measure_Rad_flag = 0;                   // Rad 측정 없음
 80062e0:	701a      	strb	r2, [r3, #0]
        printf("[DEBUG] Temp Only (rad_count=%u)\r\n", rad_interval_count);
 80062e2:	f013 fce9 	bl	8019cb8 <iprintf>
}
 80062e6:	e7f8      	b.n	80062da <Load_Backup_Index+0x9a>
 80062e8:	200009f8 	.word	0x200009f8
 80062ec:	20000500 	.word	0x20000500
 80062f0:	200004fd 	.word	0x200004fd
 80062f4:	200004fe 	.word	0x200004fe
 80062f8:	0801ccc0 	.word	0x0801ccc0
 80062fc:	20002bac 	.word	0x20002bac
 8006300:	20002c27 	.word	0x20002c27
 8006304:	2000000a 	.word	0x2000000a
 8006308:	20000502 	.word	0x20000502
 800630c:	0801cd06 	.word	0x0801cd06
 8006310:	0801cd30 	.word	0x0801cd30

08006314 <Load_MarkAndAlarmState_From_Backup>:
{
 8006314:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 8006316:	2106      	movs	r1, #6
{
 8006318:	0004      	movs	r4, r0
 800631a:	b089      	sub	sp, #36	@ 0x24
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK);
 800631c:	4834      	ldr	r0, [pc, #208]	@ (80063f0 <Load_MarkAndAlarmState_From_Backup+0xdc>)
 800631e:	f00b fc9f 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006322:	b2c3      	uxtb	r3, r0
 8006324:	9307      	str	r3, [sp, #28]
 8006326:	23c0      	movs	r3, #192	@ 0xc0
    cfg->alarm_state = (uint32_t)(val >> 8);  // 16비트 전부 사용
 8006328:	0a01      	lsrs	r1, r0, #8
    cfg->mark = (uint8_t)(val & 0xFF);
 800632a:	7520      	strb	r0, [r4, #20]
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800632c:	2080      	movs	r0, #128	@ 0x80
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4a30      	ldr	r2, [pc, #192]	@ (80063f4 <Load_MarkAndAlarmState_From_Backup+0xe0>)
    cfg->alarm_state = (uint32_t)(val >> 8);  // 16비트 전부 사용
 8006332:	61a1      	str	r1, [r4, #24]
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006334:	400b      	ands	r3, r1
 8006336:	0080      	lsls	r0, r0, #2
 8006338:	4283      	cmp	r3, r0
 800633a:	d005      	beq.n	8006348 <Load_MarkAndAlarmState_From_Backup+0x34>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_RH1) == ALARM_ON      ? "ON"  : "OFF",
 800633c:	3801      	subs	r0, #1
 800633e:	38ff      	subs	r0, #255	@ 0xff
 8006340:	4a2d      	ldr	r2, [pc, #180]	@ (80063f8 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 8006342:	4283      	cmp	r3, r0
 8006344:	d100      	bne.n	8006348 <Load_MarkAndAlarmState_From_Backup+0x34>
 8006346:	4a2d      	ldr	r2, [pc, #180]	@ (80063fc <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006348:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800634a:	2480      	movs	r4, #128	@ 0x80
 800634c:	0100      	lsls	r0, r0, #4
 800634e:	4b29      	ldr	r3, [pc, #164]	@ (80063f4 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 8006350:	4008      	ands	r0, r1
 8006352:	0124      	lsls	r4, r4, #4
 8006354:	42a0      	cmp	r0, r4
 8006356:	d005      	beq.n	8006364 <Load_MarkAndAlarmState_From_Backup+0x50>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_RH2) == ALARM_ON      ? "ON"  : "OFF",
 8006358:	2480      	movs	r4, #128	@ 0x80
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 800635c:	00e4      	lsls	r4, r4, #3
 800635e:	42a0      	cmp	r0, r4
 8006360:	d100      	bne.n	8006364 <Load_MarkAndAlarmState_From_Backup+0x50>
 8006362:	4b26      	ldr	r3, [pc, #152]	@ (80063fc <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006364:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006366:	2580      	movs	r5, #128	@ 0x80
 8006368:	0180      	lsls	r0, r0, #6
 800636a:	4c22      	ldr	r4, [pc, #136]	@ (80063f4 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 800636c:	4008      	ands	r0, r1
 800636e:	01ad      	lsls	r5, r5, #6
 8006370:	42a8      	cmp	r0, r5
 8006372:	d005      	beq.n	8006380 <Load_MarkAndAlarmState_From_Backup+0x6c>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TH1) == ALARM_ON      ? "ON"  : "OFF",
 8006374:	2580      	movs	r5, #128	@ 0x80
 8006376:	4c20      	ldr	r4, [pc, #128]	@ (80063f8 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 8006378:	016d      	lsls	r5, r5, #5
 800637a:	42a8      	cmp	r0, r5
 800637c:	d100      	bne.n	8006380 <Load_MarkAndAlarmState_From_Backup+0x6c>
 800637e:	4c1f      	ldr	r4, [pc, #124]	@ (80063fc <Load_MarkAndAlarmState_From_Backup+0xe8>)
 8006380:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 8006382:	2680      	movs	r6, #128	@ 0x80
 8006384:	0200      	lsls	r0, r0, #8
 8006386:	4d1b      	ldr	r5, [pc, #108]	@ (80063f4 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 8006388:	4008      	ands	r0, r1
 800638a:	0236      	lsls	r6, r6, #8
 800638c:	42b0      	cmp	r0, r6
 800638e:	d005      	beq.n	800639c <Load_MarkAndAlarmState_From_Backup+0x88>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TH2) == ALARM_ON      ? "ON"  : "OFF",
 8006390:	2680      	movs	r6, #128	@ 0x80
 8006392:	4d19      	ldr	r5, [pc, #100]	@ (80063f8 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 8006394:	01f6      	lsls	r6, r6, #7
 8006396:	42b0      	cmp	r0, r6
 8006398:	d100      	bne.n	800639c <Load_MarkAndAlarmState_From_Backup+0x88>
 800639a:	4d18      	ldr	r5, [pc, #96]	@ (80063fc <Load_MarkAndAlarmState_From_Backup+0xe8>)
 800639c:	20c0      	movs	r0, #192	@ 0xc0
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 800639e:	2780      	movs	r7, #128	@ 0x80
 80063a0:	0280      	lsls	r0, r0, #10
 80063a2:	4e14      	ldr	r6, [pc, #80]	@ (80063f4 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 80063a4:	4008      	ands	r0, r1
 80063a6:	02bf      	lsls	r7, r7, #10
 80063a8:	42b8      	cmp	r0, r7
 80063aa:	d005      	beq.n	80063b8 <Load_MarkAndAlarmState_From_Backup+0xa4>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TL1) == ALARM_ON      ? "ON"  : "OFF",
 80063ac:	2780      	movs	r7, #128	@ 0x80
 80063ae:	4e12      	ldr	r6, [pc, #72]	@ (80063f8 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80063b0:	027f      	lsls	r7, r7, #9
 80063b2:	42b8      	cmp	r0, r7
 80063b4:	d100      	bne.n	80063b8 <Load_MarkAndAlarmState_From_Backup+0xa4>
 80063b6:	4e11      	ldr	r6, [pc, #68]	@ (80063fc <Load_MarkAndAlarmState_From_Backup+0xe8>)
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80063b8:	2780      	movs	r7, #128	@ 0x80
 80063ba:	20c0      	movs	r0, #192	@ 0xc0
 80063bc:	033f      	lsls	r7, r7, #12
 80063be:	46bc      	mov	ip, r7
 80063c0:	0300      	lsls	r0, r0, #12
 80063c2:	4f0c      	ldr	r7, [pc, #48]	@ (80063f4 <Load_MarkAndAlarmState_From_Backup+0xe0>)
 80063c4:	4008      	ands	r0, r1
 80063c6:	4560      	cmp	r0, ip
 80063c8:	d006      	beq.n	80063d8 <Load_MarkAndAlarmState_From_Backup+0xc4>
           GET_ALARM_STATE(cfg->alarm_state, ALARM_STATE_POS_TL2) == ALARM_ON      ? "ON"  : "OFF",
 80063ca:	2780      	movs	r7, #128	@ 0x80
 80063cc:	02ff      	lsls	r7, r7, #11
 80063ce:	46bc      	mov	ip, r7
 80063d0:	4f09      	ldr	r7, [pc, #36]	@ (80063f8 <Load_MarkAndAlarmState_From_Backup+0xe4>)
 80063d2:	4560      	cmp	r0, ip
 80063d4:	d100      	bne.n	80063d8 <Load_MarkAndAlarmState_From_Backup+0xc4>
 80063d6:	4f09      	ldr	r7, [pc, #36]	@ (80063fc <Load_MarkAndAlarmState_From_Backup+0xe8>)
    printf("[Debug] Mark=0x%02X | RH1=%s RH2=%s TH1=%s TH2=%s TL1=%s TL2=%s (Raw:0x%08lX)\r\n",
 80063d8:	9104      	str	r1, [sp, #16]
 80063da:	9703      	str	r7, [sp, #12]
 80063dc:	9907      	ldr	r1, [sp, #28]
 80063de:	9602      	str	r6, [sp, #8]
 80063e0:	9501      	str	r5, [sp, #4]
 80063e2:	9400      	str	r4, [sp, #0]
 80063e4:	4806      	ldr	r0, [pc, #24]	@ (8006400 <Load_MarkAndAlarmState_From_Backup+0xec>)
 80063e6:	f013 fc67 	bl	8019cb8 <iprintf>
}
 80063ea:	b009      	add	sp, #36	@ 0x24
 80063ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	200009f8 	.word	0x200009f8
 80063f4:	0801cd57 	.word	0x0801cd57
 80063f8:	0801cd53 	.word	0x0801cd53
 80063fc:	0801cd5b 	.word	0x0801cd5b
 8006400:	0801cd5e 	.word	0x0801cd5e

08006404 <Load_IntervalInfo_From_Backup>:
{
 8006404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006406:	0004      	movs	r4, r0
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_INTERVAL_INFO);
 8006408:	2108      	movs	r1, #8
 800640a:	480f      	ldr	r0, [pc, #60]	@ (8006448 <Load_IntervalInfo_From_Backup+0x44>)
 800640c:	f00b fc28 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 8006410:	490e      	ldr	r1, [pc, #56]	@ (800644c <Load_IntervalInfo_From_Backup+0x48>)
    cfg->interval_time = (uint16_t)(val & 0xFFFF);
 8006412:	61e0      	str	r0, [r4, #28]
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 8006414:	4c0e      	ldr	r4, [pc, #56]	@ (8006450 <Load_IntervalInfo_From_Backup+0x4c>)
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_INTERVAL_INFO);
 8006416:	0005      	movs	r5, r0
    cfg->display_dose = (uint8_t)((val >> 24) & 0xFF);
 8006418:	0e03      	lsrs	r3, r0, #24
    cfg->display_temp = (uint8_t)((val >> 16) & 0xFF);
 800641a:	0c02      	lsrs	r2, r0, #16
    printf("[Debug] Unpacked IntervalInfo: Interval=%u, DispTemp=%u, DispDose=%u (Raw:0x%08lX)\r\n", current_settings.temp_interval, cfg->display_temp, cfg->display_dose, val);
 800641c:	7808      	ldrb	r0, [r1, #0]
 800641e:	0021      	movs	r1, r4
 8006420:	3180      	adds	r1, #128	@ 0x80
 8006422:	7809      	ldrb	r1, [r1, #0]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	0209      	lsls	r1, r1, #8
 8006428:	4301      	orrs	r1, r0
 800642a:	0020      	movs	r0, r4
 800642c:	3081      	adds	r0, #129	@ 0x81
 800642e:	7800      	ldrb	r0, [r0, #0]
 8006430:	3482      	adds	r4, #130	@ 0x82
 8006432:	0400      	lsls	r0, r0, #16
 8006434:	4308      	orrs	r0, r1
 8006436:	7821      	ldrb	r1, [r4, #0]
 8006438:	9500      	str	r5, [sp, #0]
 800643a:	0609      	lsls	r1, r1, #24
 800643c:	4301      	orrs	r1, r0
 800643e:	4805      	ldr	r0, [pc, #20]	@ (8006454 <Load_IntervalInfo_From_Backup+0x50>)
 8006440:	f013 fc3a 	bl	8019cb8 <iprintf>
}
 8006444:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	200009f8 	.word	0x200009f8
 800644c:	20002c2b 	.word	0x20002c2b
 8006450:	20002bac 	.word	0x20002bac
 8006454:	0801cdae 	.word	0x0801cdae

08006458 <Load_Pre_RAD_Value_From_Backup>:
{
 8006458:	b510      	push	{r4, lr}
    uint32_t value = HAL_RTCEx_BKUPRead(&hrtc, BKP_PRE_RAD_VALUE);
 800645a:	2105      	movs	r1, #5
 800645c:	4805      	ldr	r0, [pc, #20]	@ (8006474 <Load_Pre_RAD_Value_From_Backup+0x1c>)
 800645e:	f00b fbff 	bl	8011c60 <HAL_RTCEx_BKUPRead>
 8006462:	0004      	movs	r4, r0
    printf("[Backup] Load Pre_RAD_Value = %lu (Raw: 0x%08lX)\r\n", value, value);
 8006464:	4804      	ldr	r0, [pc, #16]	@ (8006478 <Load_Pre_RAD_Value_From_Backup+0x20>)
 8006466:	0022      	movs	r2, r4
 8006468:	0021      	movs	r1, r4
 800646a:	f013 fc25 	bl	8019cb8 <iprintf>
}
 800646e:	0020      	movs	r0, r4
 8006470:	bd10      	pop	{r4, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	200009f8 	.word	0x200009f8
 8006478:	0801ce03 	.word	0x0801ce03

0800647c <Load_All_Config_From_BackupRegister>:
{
 800647c:	b510      	push	{r4, lr}
 800647e:	0004      	movs	r4, r0
    Load_Temp_From_Backup(cfg);
 8006480:	f7ff feba 	bl	80061f8 <Load_Temp_From_Backup>
    Load_Dose_From_Backup(cfg);
 8006484:	0020      	movs	r0, r4
 8006486:	f7ff fec9 	bl	800621c <Load_Dose_From_Backup>
    Load_Backup_Index();
 800648a:	f7ff fed9 	bl	8006240 <Load_Backup_Index>
    Load_MarkAndAlarmState_From_Backup(cfg);
 800648e:	0020      	movs	r0, r4
 8006490:	f7ff ff40 	bl	8006314 <Load_MarkAndAlarmState_From_Backup>
    Load_IntervalInfo_From_Backup(cfg);
 8006494:	0020      	movs	r0, r4
 8006496:	f7ff ffb5 	bl	8006404 <Load_IntervalInfo_From_Backup>
    Index_num = Load_IndexNum_From_Backup();
 800649a:	f7ff fea3 	bl	80061e4 <Load_IndexNum_From_Backup>
 800649e:	4b01      	ldr	r3, [pc, #4]	@ (80064a4 <Load_All_Config_From_BackupRegister+0x28>)
 80064a0:	8018      	strh	r0, [r3, #0]
}
 80064a2:	bd10      	pop	{r4, pc}
 80064a4:	2000004c 	.word	0x2000004c

080064a8 <Update_TempDose_MinMax>:
{
 80064a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064aa:	000e      	movs	r6, r1
    int16_t new_temp = (int16_t)(temp_avg * 10);
 80064ac:	492f      	ldr	r1, [pc, #188]	@ (800656c <Update_TempDose_MinMax+0xc4>)
{
 80064ae:	0014      	movs	r4, r2
 80064b0:	9001      	str	r0, [sp, #4]
    int16_t new_temp = (int16_t)(temp_avg * 10);
 80064b2:	f7fa fd47 	bl	8000f44 <__aeabi_fmul>
 80064b6:	f7fb f919 	bl	80016ec <__aeabi_f2iz>
    printf("[Backup][Prev] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 80064ba:	2302      	movs	r3, #2
 80064bc:	5ee2      	ldrsh	r2, [r4, r3]
 80064be:	2300      	movs	r3, #0
 80064c0:	5ee1      	ldrsh	r1, [r4, r3]
    int16_t new_temp = (int16_t)(temp_avg * 10);
 80064c2:	b205      	sxth	r5, r0
    printf("[Backup][Prev] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	482a      	ldr	r0, [pc, #168]	@ (8006570 <Update_TempDose_MinMax+0xc8>)
 80064c8:	f013 fbf6 	bl	8019cb8 <iprintf>
    printf("[Backup][New Input] Temp:%d Dose:%u\n", new_temp, new_dose);
 80064cc:	0029      	movs	r1, r5
 80064ce:	0032      	movs	r2, r6
 80064d0:	4828      	ldr	r0, [pc, #160]	@ (8006574 <Update_TempDose_MinMax+0xcc>)
 80064d2:	f013 fbf1 	bl	8019cb8 <iprintf>
    if (cfg->temp_max == INT16_MIN || cfg->temp_min == INT16_MAX || cfg->dose_max == 0xFFFFFFFF) {
 80064d6:	2300      	movs	r3, #0
 80064d8:	5ee1      	ldrsh	r1, [r4, r3]
 80064da:	4b27      	ldr	r3, [pc, #156]	@ (8006578 <Update_TempDose_MinMax+0xd0>)
 80064dc:	4299      	cmp	r1, r3
 80064de:	d007      	beq.n	80064f0 <Update_TempDose_MinMax+0x48>
 80064e0:	4b26      	ldr	r3, [pc, #152]	@ (800657c <Update_TempDose_MinMax+0xd4>)
 80064e2:	2002      	movs	r0, #2
 80064e4:	5e22      	ldrsh	r2, [r4, r0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d002      	beq.n	80064f0 <Update_TempDose_MinMax+0x48>
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	3301      	adds	r3, #1
 80064ee:	d103      	bne.n	80064f8 <Update_TempDose_MinMax+0x50>
        cfg->temp_max = new_temp;
 80064f0:	8025      	strh	r5, [r4, #0]
        cfg->temp_min = new_temp;
 80064f2:	8065      	strh	r5, [r4, #2]
            cfg->dose_max = new_dose;
 80064f4:	6066      	str	r6, [r4, #4]
    if (update) {
 80064f6:	e017      	b.n	8006528 <Update_TempDose_MinMax+0x80>
    bool update = false;
 80064f8:	2700      	movs	r7, #0
        if (new_temp >= cfg->temp_max) {
 80064fa:	42a9      	cmp	r1, r5
 80064fc:	dc05      	bgt.n	800650a <Update_TempDose_MinMax+0x62>
            printf("  [Update] temp_max: %d -> %d\n", cfg->temp_max, new_temp);
 80064fe:	002a      	movs	r2, r5
 8006500:	481f      	ldr	r0, [pc, #124]	@ (8006580 <Update_TempDose_MinMax+0xd8>)
 8006502:	f013 fbd9 	bl	8019cb8 <iprintf>
            update = true;
 8006506:	3701      	adds	r7, #1
            cfg->temp_max = new_temp;
 8006508:	8025      	strh	r5, [r4, #0]
        if (new_temp < cfg->temp_min) {
 800650a:	2302      	movs	r3, #2
 800650c:	5ee1      	ldrsh	r1, [r4, r3]
 800650e:	42a9      	cmp	r1, r5
 8006510:	dd19      	ble.n	8006546 <Update_TempDose_MinMax+0x9e>
            printf("  [Update] temp_min: %d -> %d\n", cfg->temp_min, new_temp);
 8006512:	002a      	movs	r2, r5
 8006514:	481b      	ldr	r0, [pc, #108]	@ (8006584 <Update_TempDose_MinMax+0xdc>)
 8006516:	f013 fbcf 	bl	8019cb8 <iprintf>
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 800651a:	491b      	ldr	r1, [pc, #108]	@ (8006588 <Update_TempDose_MinMax+0xe0>)
 800651c:	9801      	ldr	r0, [sp, #4]
            cfg->temp_min = new_temp;
 800651e:	8065      	strh	r5, [r4, #2]
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006520:	f7f9 fff2 	bl	8000508 <__aeabi_fcmple>
 8006524:	2800      	cmp	r0, #0
 8006526:	d117      	bne.n	8006558 <Update_TempDose_MinMax+0xb0>
        Save_Temp_To_Backup(cfg);
 8006528:	0020      	movs	r0, r4
 800652a:	f7ff fd7b 	bl	8006024 <Save_Temp_To_Backup>
        Save_Dose_To_Backup(cfg);
 800652e:	0020      	movs	r0, r4
 8006530:	f7ff fd66 	bl	8006000 <Save_Dose_To_Backup>
        printf("[Backup][Updated] Tmax:%d Tmin:%d Dmax:%u\n", cfg->temp_max, cfg->temp_min, cfg->dose_max);
 8006534:	2302      	movs	r3, #2
 8006536:	5ee2      	ldrsh	r2, [r4, r3]
 8006538:	2300      	movs	r3, #0
 800653a:	5ee1      	ldrsh	r1, [r4, r3]
 800653c:	4813      	ldr	r0, [pc, #76]	@ (800658c <Update_TempDose_MinMax+0xe4>)
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	f013 fbba 	bl	8019cb8 <iprintf>
}
 8006544:	e007      	b.n	8006556 <Update_TempDose_MinMax+0xae>
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 8006546:	4910      	ldr	r1, [pc, #64]	@ (8006588 <Update_TempDose_MinMax+0xe0>)
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	f7f9 ffdd 	bl	8000508 <__aeabi_fcmple>
 800654e:	2800      	cmp	r0, #0
 8006550:	d103      	bne.n	800655a <Update_TempDose_MinMax+0xb2>
    if (update) {
 8006552:	2f00      	cmp	r7, #0
 8006554:	d1e8      	bne.n	8006528 <Update_TempDose_MinMax+0x80>
}
 8006556:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            update = true;
 8006558:	2701      	movs	r7, #1
        if (temp_avg <= 50.0f && new_dose > cfg->dose_max) {
 800655a:	6861      	ldr	r1, [r4, #4]
 800655c:	42b1      	cmp	r1, r6
 800655e:	d2f8      	bcs.n	8006552 <Update_TempDose_MinMax+0xaa>
            printf("  [Update] dose_max: %u -> %u\n", cfg->dose_max, new_dose);
 8006560:	0032      	movs	r2, r6
 8006562:	480b      	ldr	r0, [pc, #44]	@ (8006590 <Update_TempDose_MinMax+0xe8>)
 8006564:	f013 fba8 	bl	8019cb8 <iprintf>
 8006568:	e7c4      	b.n	80064f4 <Update_TempDose_MinMax+0x4c>
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	41200000 	.word	0x41200000
 8006570:	0801ce36 	.word	0x0801ce36
 8006574:	0801ce5e 	.word	0x0801ce5e
 8006578:	ffff8000 	.word	0xffff8000
 800657c:	00007fff 	.word	0x00007fff
 8006580:	0801ce83 	.word	0x0801ce83
 8006584:	0801cea2 	.word	0x0801cea2
 8006588:	42480000 	.word	0x42480000
 800658c:	0801cee0 	.word	0x0801cee0
 8006590:	0801cec1 	.word	0x0801cec1

08006594 <Set_Wakeup_After_Delay>:
{
 8006594:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 8006596:	240a      	movs	r4, #10
 8006598:	230f      	movs	r3, #15
{
 800659a:	0005      	movs	r5, r0
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 800659c:	78d0      	ldrb	r0, [r2, #3]
{
 800659e:	b08b      	sub	sp, #44	@ 0x2c
    uint16_t y2000 = (uint16_t)BCD2BIN(sDate_bcd->Year);
 80065a0:	0906      	lsrs	r6, r0, #4
 80065a2:	4366      	muls	r6, r4
 80065a4:	4018      	ands	r0, r3
 80065a6:	1980      	adds	r0, r0, r6
 80065a8:	9006      	str	r0, [sp, #24]
    uint8_t  mon   = (uint8_t) BCD2BIN(sDate_bcd->Month);
 80065aa:	7856      	ldrb	r6, [r2, #1]
 80065ac:	0930      	lsrs	r0, r6, #4
 80065ae:	4360      	muls	r0, r4
 80065b0:	401e      	ands	r6, r3
 80065b2:	1980      	adds	r0, r0, r6
 80065b4:	b2c0      	uxtb	r0, r0
 80065b6:	9007      	str	r0, [sp, #28]
    uint8_t  day   = (uint8_t) BCD2BIN(sDate_bcd->Date);
 80065b8:	7890      	ldrb	r0, [r2, #2]
 80065ba:	0902      	lsrs	r2, r0, #4
 80065bc:	4362      	muls	r2, r4
 80065be:	4018      	ands	r0, r3
 80065c0:	1812      	adds	r2, r2, r0
    uint8_t  hh    = (uint8_t) BCD2BIN(sTime_bcd->Hours);
 80065c2:	7808      	ldrb	r0, [r1, #0]
    uint8_t  day   = (uint8_t) BCD2BIN(sDate_bcd->Date);
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	9208      	str	r2, [sp, #32]
    uint8_t  hh    = (uint8_t) BCD2BIN(sTime_bcd->Hours);
 80065c8:	0902      	lsrs	r2, r0, #4
 80065ca:	4362      	muls	r2, r4
 80065cc:	4018      	ands	r0, r3
 80065ce:	1812      	adds	r2, r2, r0
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	9209      	str	r2, [sp, #36]	@ 0x24
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 80065d4:	784a      	ldrb	r2, [r1, #1]
    uint32_t now_epoch = ymd_to_epoch(y2000, mon, day, hh, mm, ss);
 80065d6:	9806      	ldr	r0, [sp, #24]
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 80065d8:	0916      	lsrs	r6, r2, #4
 80065da:	4366      	muls	r6, r4
 80065dc:	401a      	ands	r2, r3
 80065de:	18b6      	adds	r6, r6, r2
    uint8_t  ss    = (uint8_t) BCD2BIN(sTime_bcd->Seconds);
 80065e0:	788a      	ldrb	r2, [r1, #2]
    uint8_t  mm    = (uint8_t) BCD2BIN(sTime_bcd->Minutes);
 80065e2:	b2f6      	uxtb	r6, r6
    uint8_t  ss    = (uint8_t) BCD2BIN(sTime_bcd->Seconds);
 80065e4:	0911      	lsrs	r1, r2, #4
 80065e6:	434c      	muls	r4, r1
 80065e8:	401a      	ands	r2, r3
 80065ea:	18a4      	adds	r4, r4, r2
 80065ec:	b2e4      	uxtb	r4, r4
    uint32_t now_epoch = ymd_to_epoch(y2000, mon, day, hh, mm, ss);
 80065ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f0:	9a08      	ldr	r2, [sp, #32]
 80065f2:	9907      	ldr	r1, [sp, #28]
 80065f4:	9401      	str	r4, [sp, #4]
 80065f6:	9600      	str	r6, [sp, #0]
 80065f8:	f002 ffb8 	bl	800956c <ymd_to_epoch>
    if (delay_sec > max_delay) delay_sec = max_delay;
 80065fc:	4b11      	ldr	r3, [pc, #68]	@ (8006644 <Set_Wakeup_After_Delay+0xb0>)
 80065fe:	429d      	cmp	r5, r3
 8006600:	d91b      	bls.n	800663a <Set_Wakeup_After_Delay+0xa6>
 8006602:	001d      	movs	r5, r3
    uint32_t target_epoch = now_epoch + delay_sec;
 8006604:	182f      	adds	r7, r5, r0
    Save_WakeupTime_To_Backup(target_epoch);
 8006606:	0038      	movs	r0, r7
 8006608:	f7ff fdac 	bl	8006164 <Save_WakeupTime_To_Backup>
    RTC_Disable_All_Wakeup();
 800660c:	f7ff f848 	bl	80056a0 <RTC_Disable_All_Wakeup>
    RTC_SetAlarmA_SecondsFromNow(delay_sec);
 8006610:	0028      	movs	r0, r5
 8006612:	f7ff f86f 	bl	80056f4 <RTC_SetAlarmA_SecondsFromNow>
    printf("[Delay] now=%04u-%02u-%02u %02u:%02u:%02u, after=%lu s → target(epoch)=%lu\r\n",
 8006616:	23fa      	movs	r3, #250	@ 0xfa
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	469c      	mov	ip, r3
 800661c:	9906      	ldr	r1, [sp, #24]
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	9a07      	ldr	r2, [sp, #28]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4461      	add	r1, ip
 8006626:	9b08      	ldr	r3, [sp, #32]
 8006628:	9704      	str	r7, [sp, #16]
 800662a:	9503      	str	r5, [sp, #12]
 800662c:	9402      	str	r4, [sp, #8]
 800662e:	9601      	str	r6, [sp, #4]
 8006630:	4805      	ldr	r0, [pc, #20]	@ (8006648 <Set_Wakeup_After_Delay+0xb4>)
 8006632:	f013 fb41 	bl	8019cb8 <iprintf>
}
 8006636:	b00b      	add	sp, #44	@ 0x2c
 8006638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663a:	2d00      	cmp	r5, #0
 800663c:	d1e2      	bne.n	8006604 <Set_Wakeup_After_Delay+0x70>
 800663e:	3501      	adds	r5, #1
 8006640:	e7e0      	b.n	8006604 <Set_Wakeup_After_Delay+0x70>
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	0028de80 	.word	0x0028de80
 8006648:	0801cf0b 	.word	0x0801cf0b

0800664c <Write_buffer>:
void Write_buffer(void){
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800664e:	4c4f      	ldr	r4, [pc, #316]	@ (800678c <Write_buffer+0x140>)
void Write_buffer(void){
 8006650:	b08f      	sub	sp, #60	@ 0x3c
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8006652:	2201      	movs	r2, #1
 8006654:	0020      	movs	r0, r4
 8006656:	a903      	add	r1, sp, #12
 8006658:	f00b fa3c 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800665c:	2201      	movs	r2, #1
 800665e:	0020      	movs	r0, r4
 8006660:	a902      	add	r1, sp, #8
 8006662:	f00b fa69 	bl	8011b38 <HAL_RTC_GetDate>
    uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, BKP_MARK); // Mark 값 넣기
 8006666:	2106      	movs	r1, #6
 8006668:	0020      	movs	r0, r4
 800666a:	f00b faf9 	bl	8011c60 <HAL_RTCEx_BKUPRead>
    device_config.mark = (uint8_t)(val & 0xFF);
 800666e:	4b48      	ldr	r3, [pc, #288]	@ (8006790 <Write_buffer+0x144>)
    if (Display_temperature > 50.0f) {
 8006670:	4948      	ldr	r1, [pc, #288]	@ (8006794 <Write_buffer+0x148>)
    device_config.mark = (uint8_t)(val & 0xFF);
 8006672:	7518      	strb	r0, [r3, #20]
    uint8_t rad_mark = measure_Rad_flag;
 8006674:	4b48      	ldr	r3, [pc, #288]	@ (8006798 <Write_buffer+0x14c>)
 8006676:	781d      	ldrb	r5, [r3, #0]
    if (Display_temperature > 50.0f) {
 8006678:	4b48      	ldr	r3, [pc, #288]	@ (800679c <Write_buffer+0x150>)
    uint8_t rad_mark = measure_Rad_flag;
 800667a:	b2ed      	uxtb	r5, r5
    if (Display_temperature > 50.0f) {
 800667c:	681e      	ldr	r6, [r3, #0]
 800667e:	1c30      	adds	r0, r6, #0
 8006680:	f7f9 ff4c 	bl	800051c <__aeabi_fcmpgt>
 8006684:	4c46      	ldr	r4, [pc, #280]	@ (80067a0 <Write_buffer+0x154>)
 8006686:	2800      	cmp	r0, #0
 8006688:	d100      	bne.n	800668c <Write_buffer+0x40>
 800668a:	e078      	b.n	800677e <Write_buffer+0x132>
        printf("[RadMark] 온도 %.2f℃ > 50 → rad_measure_mark = 0 (무효 처리)\r\n", Display_temperature);
 800668c:	1c30      	adds	r0, r6, #0
 800668e:	f7fd f883 	bl	8003798 <__aeabi_f2d>
 8006692:	0002      	movs	r2, r0
 8006694:	000b      	movs	r3, r1
 8006696:	4843      	ldr	r0, [pc, #268]	@ (80067a4 <Write_buffer+0x158>)
 8006698:	f013 fb0e 	bl	8019cb8 <iprintf>
    	dose_log = Load_Pre_RAD_Value_From_Backup();
 800669c:	f7ff fedc 	bl	8006458 <Load_Pre_RAD_Value_From_Backup>
 80066a0:	2500      	movs	r5, #0
 80066a2:	6020      	str	r0, [r4, #0]
    log_entry_t entry = {
 80066a4:	4f40      	ldr	r7, [pc, #256]	@ (80067a8 <Write_buffer+0x15c>)
 80066a6:	ac08      	add	r4, sp, #32
 80066a8:	883b      	ldrh	r3, [r7, #0]
        .year              = BCD2BIN(sDate.Year),
 80066aa:	220f      	movs	r2, #15
    log_entry_t entry = {
 80066ac:	8023      	strh	r3, [r4, #0]
        .year              = BCD2BIN(sDate.Year),
 80066ae:	ab02      	add	r3, sp, #8
 80066b0:	78d8      	ldrb	r0, [r3, #3]
 80066b2:	230a      	movs	r3, #10
 80066b4:	0901      	lsrs	r1, r0, #4
 80066b6:	4359      	muls	r1, r3
 80066b8:	4010      	ands	r0, r2
 80066ba:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80066bc:	70a1      	strb	r1, [r4, #2]
        .month             = BCD2BIN(sDate.Month),
 80066be:	a902      	add	r1, sp, #8
 80066c0:	7848      	ldrb	r0, [r1, #1]
        .hour              = BCD2BIN(sTime.Hours),
 80066c2:	ae03      	add	r6, sp, #12
        .month             = BCD2BIN(sDate.Month),
 80066c4:	0901      	lsrs	r1, r0, #4
 80066c6:	4359      	muls	r1, r3
 80066c8:	4010      	ands	r0, r2
 80066ca:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80066cc:	70e1      	strb	r1, [r4, #3]
        .day               = BCD2BIN(sDate.Date),
 80066ce:	a902      	add	r1, sp, #8
 80066d0:	7888      	ldrb	r0, [r1, #2]
 80066d2:	0901      	lsrs	r1, r0, #4
 80066d4:	4359      	muls	r1, r3
 80066d6:	4010      	ands	r0, r2
 80066d8:	1809      	adds	r1, r1, r0
        .hour              = BCD2BIN(sTime.Hours),
 80066da:	7830      	ldrb	r0, [r6, #0]
    log_entry_t entry = {
 80066dc:	7121      	strb	r1, [r4, #4]
        .hour              = BCD2BIN(sTime.Hours),
 80066de:	0901      	lsrs	r1, r0, #4
 80066e0:	4359      	muls	r1, r3
 80066e2:	4010      	ands	r0, r2
 80066e4:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80066e6:	7161      	strb	r1, [r4, #5]
        .minute            = BCD2BIN(sTime.Minutes),
 80066e8:	7870      	ldrb	r0, [r6, #1]
 80066ea:	0901      	lsrs	r1, r0, #4
 80066ec:	4359      	muls	r1, r3
 80066ee:	4010      	ands	r0, r2
 80066f0:	1809      	adds	r1, r1, r0
    log_entry_t entry = {
 80066f2:	71a1      	strb	r1, [r4, #6]
        .second            = BCD2BIN(sTime.Seconds),
 80066f4:	78b1      	ldrb	r1, [r6, #2]
 80066f6:	0908      	lsrs	r0, r1, #4
 80066f8:	4343      	muls	r3, r0
 80066fa:	4011      	ands	r1, r2
 80066fc:	185b      	adds	r3, r3, r1
    log_entry_t entry = {
 80066fe:	71e3      	strb	r3, [r4, #7]
 8006700:	4b2a      	ldr	r3, [pc, #168]	@ (80067ac <Write_buffer+0x160>)
        .temperature       = Display_temperature * 10,   // 예: 39.5℃ → 395
 8006702:	492b      	ldr	r1, [pc, #172]	@ (80067b0 <Write_buffer+0x164>)
    log_entry_t entry = {
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	8123      	strh	r3, [r4, #8]
        .temperature       = Display_temperature * 10,   // 예: 39.5℃ → 395
 8006708:	4b24      	ldr	r3, [pc, #144]	@ (800679c <Write_buffer+0x150>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	f7fa fc1a 	bl	8000f44 <__aeabi_fmul>
    log_entry_t entry = {
 8006710:	f7fa ffec 	bl	80016ec <__aeabi_f2iz>
 8006714:	4b22      	ldr	r3, [pc, #136]	@ (80067a0 <Write_buffer+0x154>)
 8006716:	8160      	strh	r0, [r4, #10]
 8006718:	681b      	ldr	r3, [r3, #0]
    meas_data_log_write_entry(&entry);
 800671a:	0020      	movs	r0, r4
    log_entry_t entry = {
 800671c:	930b      	str	r3, [sp, #44]	@ 0x2c
        .mark              = device_config.mark,
 800671e:	4b1c      	ldr	r3, [pc, #112]	@ (8006790 <Write_buffer+0x144>)
 8006720:	9301      	str	r3, [sp, #4]
    log_entry_t entry = {
 8006722:	7d1b      	ldrb	r3, [r3, #20]
 8006724:	7465      	strb	r5, [r4, #17]
 8006726:	2500      	movs	r5, #0
 8006728:	7423      	strb	r3, [r4, #16]
 800672a:	4b22      	ldr	r3, [pc, #136]	@ (80067b4 <Write_buffer+0x168>)
 800672c:	8265      	strh	r5, [r4, #18]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	7523      	strb	r3, [r4, #20]
    meas_data_log_write_entry(&entry);
 8006732:	f001 fe63 	bl	80083fc <meas_data_log_write_entry>
    meas_data_log_read_last();
 8006736:	f001 fe8b 	bl	8008450 <meas_data_log_read_last>
    Set_Wakeup_After_Delay(current_settings.temp_interval, &sTime, &sDate);
 800673a:	4b1f      	ldr	r3, [pc, #124]	@ (80067b8 <Write_buffer+0x16c>)
 800673c:	4a1f      	ldr	r2, [pc, #124]	@ (80067bc <Write_buffer+0x170>)
 800673e:	0019      	movs	r1, r3
 8006740:	3180      	adds	r1, #128	@ 0x80
 8006742:	7809      	ldrb	r1, [r1, #0]
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	0209      	lsls	r1, r1, #8
 8006748:	4311      	orrs	r1, r2
 800674a:	001a      	movs	r2, r3
 800674c:	3281      	adds	r2, #129	@ 0x81
 800674e:	3382      	adds	r3, #130	@ 0x82
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	7818      	ldrb	r0, [r3, #0]
 8006754:	0412      	lsls	r2, r2, #16
 8006756:	430a      	orrs	r2, r1
 8006758:	0600      	lsls	r0, r0, #24
 800675a:	0031      	movs	r1, r6
 800675c:	4310      	orrs	r0, r2
 800675e:	aa02      	add	r2, sp, #8
 8006760:	f7ff ff18 	bl	8006594 <Set_Wakeup_After_Delay>
    Index_num++;
 8006764:	8838      	ldrh	r0, [r7, #0]
 8006766:	3001      	adds	r0, #1
 8006768:	b280      	uxth	r0, r0
 800676a:	8038      	strh	r0, [r7, #0]
    Save_IndexNum_To_Backup(Index_num);
 800676c:	f7ff fc34 	bl	8005fd8 <Save_IndexNum_To_Backup>
    cfg->mark = mark_value;
 8006770:	9b01      	ldr	r3, [sp, #4]
    Save_Mark_To_Backup(cfg->mark);
 8006772:	0028      	movs	r0, r5
    cfg->mark = mark_value;
 8006774:	751d      	strb	r5, [r3, #20]
    Save_Mark_To_Backup(cfg->mark);
 8006776:	f7ff fcd9 	bl	800612c <Save_Mark_To_Backup>
}
 800677a:	b00f      	add	sp, #60	@ 0x3c
 800677c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!rad_mark){
 800677e:	2d00      	cmp	r5, #0
 8006780:	d100      	bne.n	8006784 <Write_buffer+0x138>
 8006782:	e78b      	b.n	800669c <Write_buffer+0x50>
    	Save_Pre_RAD_Value_To_Backup(dose_log);
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f7ff fd0b 	bl	80061a0 <Save_Pre_RAD_Value_To_Backup>
 800678a:	e78b      	b.n	80066a4 <Write_buffer+0x58>
 800678c:	200009f8 	.word	0x200009f8
 8006790:	20000b50 	.word	0x20000b50
 8006794:	42480000 	.word	0x42480000
 8006798:	20000502 	.word	0x20000502
 800679c:	20000544 	.word	0x20000544
 80067a0:	20000530 	.word	0x20000530
 80067a4:	0801cf5a 	.word	0x0801cf5a
 80067a8:	2000004c 	.word	0x2000004c
 80067ac:	2000055c 	.word	0x2000055c
 80067b0:	41200000 	.word	0x41200000
 80067b4:	0801ed35 	.word	0x0801ed35
 80067b8:	20002bac 	.word	0x20002bac
 80067bc:	20002c2b 	.word	0x20002c2b

080067c0 <Reset_All_Backup_Registers>:
{
 80067c0:	b510      	push	{r4, lr}
    HAL_PWR_EnableBkUpAccess();
 80067c2:	f009 ff35 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
    Set_ModeStatus(mode_internal_backup_stop);
 80067c6:	2000      	movs	r0, #0
 80067c8:	f003 f970 	bl	8009aac <Set_ModeStatus>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_DOSE_MAX,        0x00000000);
 80067cc:	2200      	movs	r2, #0
 80067ce:	4c22      	ldr	r4, [pc, #136]	@ (8006858 <Reset_All_Backup_Registers+0x98>)
 80067d0:	0011      	movs	r1, r2
 80067d2:	0020      	movs	r0, r4
 80067d4:	f00b fa3c 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG,        0x00000000);
 80067d8:	0020      	movs	r0, r4
 80067da:	2200      	movs	r2, #0
 80067dc:	2101      	movs	r1, #1
 80067de:	f00b fa37 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_TEMP_MIN_MAX,    0x00000000);
 80067e2:	0020      	movs	r0, r4
 80067e4:	2200      	movs	r2, #0
 80067e6:	2102      	movs	r1, #2
 80067e8:	f00b fa32 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_IDX_REG,         0x00000000);
 80067ec:	0020      	movs	r0, r4
 80067ee:	2200      	movs	r2, #0
 80067f0:	2103      	movs	r1, #3
 80067f2:	f00b fa2d 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_COUNT_REG,       0x00000000);
 80067f6:	0020      	movs	r0, r4
 80067f8:	2200      	movs	r2, #0
 80067fa:	2104      	movs	r1, #4
 80067fc:	f00b fa28 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_MARK,            0x00000000);
 8006800:	0020      	movs	r0, r4
 8006802:	2200      	movs	r2, #0
 8006804:	2106      	movs	r1, #6
 8006806:	f00b fa23 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_WAKEUP_TIME,     0x00000000);
 800680a:	0020      	movs	r0, r4
 800680c:	2200      	movs	r2, #0
 800680e:	2107      	movs	r1, #7
 8006810:	f00b fa1e 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_INTERVAL_INFO,   0x00000000);
 8006814:	0020      	movs	r0, r4
 8006816:	2200      	movs	r2, #0
 8006818:	2108      	movs	r1, #8
 800681a:	f00b fa19 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite(&hrtc, BKP_PRE_RAD_VALUE,   0x00000000);
 800681e:	2200      	movs	r2, #0
 8006820:	2105      	movs	r1, #5
 8006822:	0020      	movs	r0, r4
 8006824:	f00b fa14 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
    device_config.temp_max = INT16_MIN;
 8006828:	480c      	ldr	r0, [pc, #48]	@ (800685c <Reset_All_Backup_Registers+0x9c>)
 800682a:	4b0d      	ldr	r3, [pc, #52]	@ (8006860 <Reset_All_Backup_Registers+0xa0>)
    device_config.mark = 0;
 800682c:	2400      	movs	r4, #0
    device_config.temp_max = INT16_MIN;
 800682e:	6003      	str	r3, [r0, #0]
    device_config.dose_max = 0xFFFFFFFF;
 8006830:	2301      	movs	r3, #1
 8006832:	425b      	negs	r3, r3
 8006834:	6043      	str	r3, [r0, #4]
    device_config.mark = 0;
 8006836:	7504      	strb	r4, [r0, #20]
    device_config.alarm_state = 0;
 8006838:	6184      	str	r4, [r0, #24]
    Save_All_Config_To_BackupRegister(&device_config);
 800683a:	f7ff fcc5 	bl	80061c8 <Save_All_Config_To_BackupRegister>
    Switch_Backup_reg(MODE_Boot);
 800683e:	2001      	movs	r0, #1
 8006840:	f7ff faea 	bl	8005e18 <Switch_Backup_reg>
    idx_rad = 0;
 8006844:	4b07      	ldr	r3, [pc, #28]	@ (8006864 <Reset_All_Backup_Registers+0xa4>)
 8006846:	801c      	strh	r4, [r3, #0]
    idx_temp = 0;
 8006848:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <Reset_All_Backup_Registers+0xa8>)
 800684a:	801c      	strh	r4, [r3, #0]
    Init_DeviceSettings();
 800684c:	f002 ffc8 	bl	80097e0 <Init_DeviceSettings>
    printf("[RTC] All Backup Registers RESET (0x00000000)\r\n");
 8006850:	4806      	ldr	r0, [pc, #24]	@ (800686c <Reset_All_Backup_Registers+0xac>)
 8006852:	f013 faa1 	bl	8019d98 <puts>
}
 8006856:	bd10      	pop	{r4, pc}
 8006858:	200009f8 	.word	0x200009f8
 800685c:	20000b50 	.word	0x20000b50
 8006860:	7fff8000 	.word	0x7fff8000
 8006864:	20000500 	.word	0x20000500
 8006868:	200004fe 	.word	0x200004fe
 800686c:	0801cfa3 	.word	0x0801cfa3

08006870 <Press_Action>:
void Press_Action(void){
 8006870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(button_flag){
 8006872:	4d93      	ldr	r5, [pc, #588]	@ (8006ac0 <Press_Action+0x250>)
 8006874:	782b      	ldrb	r3, [r5, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d022      	beq.n	80068c0 <Press_Action+0x50>
        if (button_press_count == 2) {
 800687a:	4e92      	ldr	r6, [pc, #584]	@ (8006ac4 <Press_Action+0x254>)
 800687c:	4a92      	ldr	r2, [pc, #584]	@ (8006ac8 <Press_Action+0x258>)
 800687e:	7833      	ldrb	r3, [r6, #0]
 8006880:	4c92      	ldr	r4, [pc, #584]	@ (8006acc <Press_Action+0x25c>)
 8006882:	b2df      	uxtb	r7, r3
 8006884:	9200      	str	r2, [sp, #0]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d124      	bne.n	80068d4 <Press_Action+0x64>
            printf("Double Click!\r\n");
 800688a:	4891      	ldr	r0, [pc, #580]	@ (8006ad0 <Press_Action+0x260>)
 800688c:	f013 fa84 	bl	8019d98 <puts>
        	if (Meas_Mode == 2 || Meas_Mode == 4 || Meas_Mode == 3){
 8006890:	9b00      	ldr	r3, [sp, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	1e9a      	subs	r2, r3, #2
 8006896:	2a02      	cmp	r2, #2
 8006898:	d809      	bhi.n	80068ae <Press_Action+0x3e>
    cfg->mark = mark_value;
 800689a:	2001      	movs	r0, #1
 800689c:	4b8d      	ldr	r3, [pc, #564]	@ (8006ad4 <Press_Action+0x264>)
 800689e:	7518      	strb	r0, [r3, #20]
    Save_Mark_To_Backup(cfg->mark);
 80068a0:	f7ff fc44 	bl	800612c <Save_Mark_To_Backup>
	  	    if (Meas_Mode != 2){
 80068a4:	9b00      	ldr	r3, [sp, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d102      	bne.n	80068b2 <Press_Action+0x42>
 80068ac:	e004      	b.n	80068b8 <Press_Action+0x48>
        	else if(Meas_Mode == 5){
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d007      	beq.n	80068c2 <Press_Action+0x52>
	  		Tick_Save = 0;}
 80068b2:	2200      	movs	r2, #0
 80068b4:	4b88      	ldr	r3, [pc, #544]	@ (8006ad8 <Press_Action+0x268>)
 80068b6:	601a      	str	r2, [r3, #0]
	  	    button_press_count = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	7033      	strb	r3, [r6, #0]
            SW_count = 0; // 원래처럼 리셋, 빼도 됨
 80068bc:	7023      	strb	r3, [r4, #0]
            button_flag = false;
 80068be:	702b      	strb	r3, [r5, #0]
}
 80068c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        		 Switch_Backup_reg(MODE_Stop);
 80068c2:	0038      	movs	r0, r7
 80068c4:	f7ff faa8 	bl	8005e18 <Switch_Backup_reg>
        		 Tick_Save = 0;
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b83      	ldr	r3, [pc, #524]	@ (8006ad8 <Press_Action+0x268>)
 80068cc:	601a      	str	r2, [r3, #0]
        		 First_Measure = 0;
 80068ce:	4b83      	ldr	r3, [pc, #524]	@ (8006adc <Press_Action+0x26c>)
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e7e7      	b.n	80068a4 <Press_Action+0x34>
        bool button_flag_det = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80068d4:	20a0      	movs	r0, #160	@ 0xa0
 80068d6:	2101      	movs	r1, #1
 80068d8:	05c0      	lsls	r0, r0, #23
 80068da:	f008 fd0f 	bl	800f2fc <HAL_GPIO_ReadPin>
 80068de:	4f80      	ldr	r7, [pc, #512]	@ (8006ae0 <Press_Action+0x270>)
 80068e0:	1e06      	subs	r6, r0, #0
 	  	 if(!button_flag_det)
 80068e2:	d000      	beq.n	80068e6 <Press_Action+0x76>
 80068e4:	e0c9      	b.n	8006a7a <Press_Action+0x20a>
 	  	    SW_count++;
 80068e6:	7821      	ldrb	r1, [r4, #0]
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 80068e8:	783a      	ldrb	r2, [r7, #0]
 	  	    SW_count++;
 80068ea:	3101      	adds	r1, #1
 80068ec:	b2c9      	uxtb	r1, r1
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 80068ee:	487d      	ldr	r0, [pc, #500]	@ (8006ae4 <Press_Action+0x274>)
 	  	    SW_count++;
 80068f0:	7021      	strb	r1, [r4, #0]
 	  	 printf("SW_count : %d, LCD MODE : %d\r\n", SW_count, LCD_mode);
 80068f2:	f013 f9e1 	bl	8019cb8 <iprintf>
 	  	 		if (SW_count>=2){
 80068f6:	7823      	ldrb	r3, [r4, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d90f      	bls.n	800691c <Press_Action+0xac>
 	  	 		printf("Mode Change\r\n");
 80068fc:	487a      	ldr	r0, [pc, #488]	@ (8006ae8 <Press_Action+0x278>)
 80068fe:	f013 fa4b 	bl	8019d98 <puts>
 	  	 			if(Meas_Mode == 0){ // Boot
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	7818      	ldrb	r0, [r3, #0]
 8006906:	2805      	cmp	r0, #5
 8006908:	d808      	bhi.n	800691c <Press_Action+0xac>
 800690a:	4f73      	ldr	r7, [pc, #460]	@ (8006ad8 <Press_Action+0x268>)
 800690c:	f7f9 fc0e 	bl	800012c <__gnu_thumb1_case_uqi>
 8006910:	93832003 	.word	0x93832003
 8006914:	a283      	.short	0xa283
 	  	 			 SW_count = 0;
 8006916:	7026      	strb	r6, [r4, #0]
 	  	 			 button_flag = false;
 8006918:	702e      	strb	r6, [r5, #0]
 	  	 			Tick_Save = 0;
 800691a:	603e      	str	r6, [r7, #0]
 	  	 	 if (SW_count>9){
 800691c:	7823      	ldrb	r3, [r4, #0]
 800691e:	2b09      	cmp	r3, #9
 8006920:	d90b      	bls.n	800693a <Press_Action+0xca>
 	  	 		if(Meas_Mode == 6) // End Mode
 8006922:	9b00      	ldr	r3, [sp, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b06      	cmp	r3, #6
 8006928:	d107      	bne.n	800693a <Press_Action+0xca>
 	  	 		RTC_Disable_All_Wakeup();
 800692a:	f7fe feb9 	bl	80056a0 <RTC_Disable_All_Wakeup>
 	  	 		 Reset_All_Backup_Registers();
 800692e:	f7ff ff47 	bl	80067c0 <Reset_All_Backup_Registers>
 	  	 		 First_Measure = 0;
 8006932:	2200      	movs	r2, #0
 8006934:	4b69      	ldr	r3, [pc, #420]	@ (8006adc <Press_Action+0x26c>)
 	  	 		SW_count = 0;
 8006936:	7022      	strb	r2, [r4, #0]
 	  	 		 First_Measure = 0;
 8006938:	701a      	strb	r2, [r3, #0]
	  	    if (Meas_Mode != 2){
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d002      	beq.n	8006948 <Press_Action+0xd8>
	  		Tick_Save = 0;}
 8006942:	2200      	movs	r2, #0
 8006944:	4b64      	ldr	r3, [pc, #400]	@ (8006ad8 <Press_Action+0x268>)
 8006946:	601a      	str	r2, [r3, #0]
        last_button_tick = 0;
 8006948:	2200      	movs	r2, #0
 800694a:	4b68      	ldr	r3, [pc, #416]	@ (8006aec <Press_Action+0x27c>)
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e7b7      	b.n	80068c0 <Press_Action+0x50>
 	  	 		      if(current_settings.start_mode == 0x00){
 8006950:	4a67      	ldr	r2, [pc, #412]	@ (8006af0 <Press_Action+0x280>)
 8006952:	4b68      	ldr	r3, [pc, #416]	@ (8006af4 <Press_Action+0x284>)
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	2a00      	cmp	r2, #0
 800695a:	d119      	bne.n	8006990 <Press_Action+0x120>
 	  	 				if (current_settings.start_delay > 0){
 800695c:	0019      	movs	r1, r3
 800695e:	001a      	movs	r2, r3
 8006960:	316f      	adds	r1, #111	@ 0x6f
 8006962:	7809      	ldrb	r1, [r1, #0]
 8006964:	326e      	adds	r2, #110	@ 0x6e
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	0209      	lsls	r1, r1, #8
 800696a:	4311      	orrs	r1, r2
 800696c:	001a      	movs	r2, r3
 800696e:	3270      	adds	r2, #112	@ 0x70
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	3371      	adds	r3, #113	@ 0x71
 8006974:	781e      	ldrb	r6, [r3, #0]
 8006976:	0412      	lsls	r2, r2, #16
 8006978:	430a      	orrs	r2, r1
 800697a:	0636      	lsls	r6, r6, #24
 800697c:	4316      	orrs	r6, r2
 800697e:	d03b      	beq.n	80069f8 <Press_Action+0x188>
 	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8006980:	2006      	movs	r0, #6
 8006982:	f7ff fa49 	bl	8005e18 <Switch_Backup_reg>
	   	  	 		     SW_count = 0;
 8006986:	9b01      	ldr	r3, [sp, #4]
 		   	  	 		     SW_count = 0;
 8006988:	7023      	strb	r3, [r4, #0]
 		   	  	 			 button_flag = false;
 800698a:	702b      	strb	r3, [r5, #0]
 		   	  	 		     Tick_Save = 0;
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	e011      	b.n	80069b4 <Press_Action+0x144>
 	  	 			  else if(current_settings.start_mode == 0x01){
 8006990:	9a01      	ldr	r2, [sp, #4]
 8006992:	2a01      	cmp	r2, #1
 8006994:	d119      	bne.n	80069ca <Press_Action+0x15a>
 	  	 				 AlarmDelay_InitStart_Flash();
 8006996:	f002 ff29 	bl	80097ec <AlarmDelay_InitStart_Flash>
  	   	  	 			 Switch_Backup_reg(MODE_Start);
 800699a:	2003      	movs	r0, #3
 800699c:	f7ff fa3c 	bl	8005e18 <Switch_Backup_reg>
  	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 80069a0:	f7ff fc20 	bl	80061e4 <Load_IndexNum_From_Backup>
 80069a4:	4b54      	ldr	r3, [pc, #336]	@ (8006af8 <Press_Action+0x288>)
  	   	  	 	         Interval_LCD_Count = 0;
 80069a6:	4a55      	ldr	r2, [pc, #340]	@ (8006afc <Press_Action+0x28c>)
  	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 80069a8:	8018      	strh	r0, [r3, #0]
  	   	  	 		     SW_count = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	7023      	strb	r3, [r4, #0]
  	   	  	 			 button_flag = false;
 80069ae:	702b      	strb	r3, [r5, #0]
  	   	  	 	     	 Tick_Save = 0;
 80069b0:	603b      	str	r3, [r7, #0]
  	   	  	 	         Interval_LCD_Count = 0;
 80069b2:	6013      	str	r3, [r2, #0]
                    Set_ModeStatus(mode_internal_backup_start);
 80069b4:	2001      	movs	r0, #1
 80069b6:	f003 f879 	bl	8009aac <Set_ModeStatus>
 	  	 			Clear_WakeupTime_Backup();
 80069ba:	f7ff fa15 	bl	8005de8 <Clear_WakeupTime_Backup>
 	  	 		    Clear_Backup_Index();
 80069be:	f7ff fb71 	bl	80060a4 <Clear_Backup_Index>
 	  	 			First_Measure = 0;
 80069c2:	2200      	movs	r2, #0
 80069c4:	4b45      	ldr	r3, [pc, #276]	@ (8006adc <Press_Action+0x26c>)
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e7a8      	b.n	800691c <Press_Action+0xac>
 	 	  	 				if (current_settings.start_delay > 0){
 80069ca:	0019      	movs	r1, r3
 80069cc:	001a      	movs	r2, r3
 80069ce:	316f      	adds	r1, #111	@ 0x6f
 80069d0:	7809      	ldrb	r1, [r1, #0]
 80069d2:	326e      	adds	r2, #110	@ 0x6e
 80069d4:	7812      	ldrb	r2, [r2, #0]
 80069d6:	0209      	lsls	r1, r1, #8
 80069d8:	4311      	orrs	r1, r2
 80069da:	001a      	movs	r2, r3
 80069dc:	3270      	adds	r2, #112	@ 0x70
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	3371      	adds	r3, #113	@ 0x71
 80069e2:	781e      	ldrb	r6, [r3, #0]
 80069e4:	0412      	lsls	r2, r2, #16
 80069e6:	430a      	orrs	r2, r1
 80069e8:	0636      	lsls	r6, r6, #24
 80069ea:	4316      	orrs	r6, r2
 80069ec:	d004      	beq.n	80069f8 <Press_Action+0x188>
 	 	  	 				Switch_Backup_reg(Mode_Start_Delay);
 80069ee:	2006      	movs	r0, #6
 80069f0:	f7ff fa12 	bl	8005e18 <Switch_Backup_reg>
 		   	  	 		     SW_count = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e7c7      	b.n	8006988 <Press_Action+0x118>
 	 	  	 				 AlarmDelay_InitStart_Flash();
 80069f8:	f002 fef8 	bl	80097ec <AlarmDelay_InitStart_Flash>
 	 	   	  	 			 Switch_Backup_reg(MODE_Start);
 80069fc:	2003      	movs	r0, #3
 80069fe:	f7ff fa0b 	bl	8005e18 <Switch_Backup_reg>
 	 	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006a02:	f7ff fbef 	bl	80061e4 <Load_IndexNum_From_Backup>
 8006a06:	4b3c      	ldr	r3, [pc, #240]	@ (8006af8 <Press_Action+0x288>)
 	 	   	  	 		     SW_count = 0;
 8006a08:	7026      	strb	r6, [r4, #0]
 	 	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8006a0a:	8018      	strh	r0, [r3, #0]
 	 	   	  	 	         Interval_LCD_Count = 0;
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006afc <Press_Action+0x28c>)
 	 	   	  	 			 button_flag = false;
 8006a0e:	702e      	strb	r6, [r5, #0]
 	 	   	  	 	     	 Tick_Save = 0;
 8006a10:	603e      	str	r6, [r7, #0]
 	 	   	  	 	         Interval_LCD_Count = 0;
 8006a12:	601e      	str	r6, [r3, #0]
 8006a14:	e7ce      	b.n	80069b4 <Press_Action+0x144>
 	  	 		     Switch_Backup_reg(MODE_Pause);
 8006a16:	2004      	movs	r0, #4
 8006a18:	f7ff f9fe 	bl	8005e18 <Switch_Backup_reg>
 	  	 		     button_flag = false;
 8006a1c:	702e      	strb	r6, [r5, #0]
 	  	 		    RTC_Disable_All_Wakeup();
 8006a1e:	f7fe fe3f 	bl	80056a0 <RTC_Disable_All_Wakeup>
                    Set_ModeStatus(mode_internal_backup_pause);
 8006a22:	2002      	movs	r0, #2
 8006a24:	f003 f842 	bl	8009aac <Set_ModeStatus>
                    Clear_WakeupTime_Backup();
 8006a28:	f7ff f9de 	bl	8005de8 <Clear_WakeupTime_Backup>
 	  	 		    First_Measure = 0;
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006adc <Press_Action+0x26c>)
 	  	 		     SW_count = 0;
 8006a2e:	7026      	strb	r6, [r4, #0]
 	  	 		    Tick_Save = 0;
 8006a30:	603e      	str	r6, [r7, #0]
 	  	 		    First_Measure = 0;
 8006a32:	701e      	strb	r6, [r3, #0]
 8006a34:	e772      	b.n	800691c <Press_Action+0xac>
 	  	 			RTC_Disable_All_Wakeup();
 8006a36:	f7fe fe33 	bl	80056a0 <RTC_Disable_All_Wakeup>
 	  	 		    Switch_Backup_reg(MODE_End);
 8006a3a:	2007      	movs	r0, #7
 8006a3c:	f7ff f9ec 	bl	8005e18 <Switch_Backup_reg>
                    Set_ModeStatus(mode_internal_backup_end);
 8006a40:	2003      	movs	r0, #3
 8006a42:	f003 f833 	bl	8009aac <Set_ModeStatus>
 	  	 		    Tick_Save = 0;
 8006a46:	2300      	movs	r3, #0
 	  	 	        First_Measure = 0;
 8006a48:	4a24      	ldr	r2, [pc, #144]	@ (8006adc <Press_Action+0x26c>)
 	  	 		    Tick_Save = 0;
 8006a4a:	603b      	str	r3, [r7, #0]
 	  	 		    SW_count = 0;
 8006a4c:	7023      	strb	r3, [r4, #0]
 	  	 	     	button_flag = false;
 8006a4e:	702b      	strb	r3, [r5, #0]
 	  	 	        First_Measure = 0;
 8006a50:	7013      	strb	r3, [r2, #0]
 8006a52:	e763      	b.n	800691c <Press_Action+0xac>
 	  	 		    AlarmDelay_InitStart_Flash();
 8006a54:	f002 feca 	bl	80097ec <AlarmDelay_InitStart_Flash>
 	  	 		    Switch_Backup_reg(MODE_Start);
 8006a58:	2003      	movs	r0, #3
 8006a5a:	f7ff f9dd 	bl	8005e18 <Switch_Backup_reg>
 	 	  	 		Index_num = Load_IndexNum_From_Backup();
 8006a5e:	f7ff fbc1 	bl	80061e4 <Load_IndexNum_From_Backup>
 	 	  	 	    Interval_LCD_Count = 1;
 8006a62:	2201      	movs	r2, #1
 	 	  	 		Index_num = Load_IndexNum_From_Backup();
 8006a64:	4b24      	ldr	r3, [pc, #144]	@ (8006af8 <Press_Action+0x288>)
 8006a66:	8018      	strh	r0, [r3, #0]
 	 	  	 	    Interval_LCD_Count = 1;
 8006a68:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <Press_Action+0x28c>)
 8006a6a:	601a      	str	r2, [r3, #0]
 	 	  	 		SW_count = 0;
 8006a6c:	2300      	movs	r3, #0
 	 	  	 		First_Measure = 0;
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006adc <Press_Action+0x26c>)
 	 	  	 		SW_count = 0;
 8006a70:	7023      	strb	r3, [r4, #0]
 	 	  	 		button_flag = false;
 8006a72:	702b      	strb	r3, [r5, #0]
 	 	  	 		First_Measure = 0;
 8006a74:	7013      	strb	r3, [r2, #0]
 	 	  	 		Tick_Save = 0;
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	e750      	b.n	800691c <Press_Action+0xac>
        	LCD_mode++;
 8006a7a:	783b      	ldrb	r3, [r7, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	703b      	strb	r3, [r7, #0]
	  	      if(Meas_Mode == 3){
 8006a80:	9b00      	ldr	r3, [sp, #0]
 8006a82:	7818      	ldrb	r0, [r3, #0]
 8006a84:	2803      	cmp	r0, #3
 8006a86:	d104      	bne.n	8006a92 <Press_Action+0x222>
	  	 	  	 Switch_Backup_reg(MODE_Start);
 8006a88:	f7ff f9c6 	bl	8005e18 <Switch_Backup_reg>
	  	 	     First_Measure = 0;
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <Press_Action+0x26c>)
 8006a90:	701a      	strb	r2, [r3, #0]
	  	 	if(Meas_Mode == 1 && First_Measure<=1){
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d107      	bne.n	8006aaa <Press_Action+0x23a>
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8006adc <Press_Action+0x26c>)
 8006a9e:	5651      	ldrsb	r1, [r2, r1]
 8006aa0:	2901      	cmp	r1, #1
 8006aa2:	dc02      	bgt.n	8006aaa <Press_Action+0x23a>
	  	 		First_Measure = 2;
 8006aa4:	2102      	movs	r1, #2
	  	 		LCD_mode = 1;
 8006aa6:	703b      	strb	r3, [r7, #0]
	  	 		First_Measure = 2;
 8006aa8:	7011      	strb	r1, [r2, #0]
            button_flag = false;
 8006aaa:	2300      	movs	r3, #0
            Interval_LCD_Count = 1;
 8006aac:	2201      	movs	r2, #1
            button_flag = false;
 8006aae:	702b      	strb	r3, [r5, #0]
            SW_count = 0;
 8006ab0:	7023      	strb	r3, [r4, #0]
            Interval_LCD_Count = 1;
 8006ab2:	4b12      	ldr	r3, [pc, #72]	@ (8006afc <Press_Action+0x28c>)
            printf("Button unpressed \r\n");
 8006ab4:	4812      	ldr	r0, [pc, #72]	@ (8006b00 <Press_Action+0x290>)
            Interval_LCD_Count = 1;
 8006ab6:	601a      	str	r2, [r3, #0]
            printf("Button unpressed \r\n");
 8006ab8:	f013 f96e 	bl	8019d98 <puts>
 8006abc:	e73d      	b.n	800693a <Press_Action+0xca>
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	20000538 	.word	0x20000538
 8006ac4:	20000524 	.word	0x20000524
 8006ac8:	20000535 	.word	0x20000535
 8006acc:	20000537 	.word	0x20000537
 8006ad0:	0801cfd2 	.word	0x0801cfd2
 8006ad4:	20000b50 	.word	0x20000b50
 8006ad8:	20000540 	.word	0x20000540
 8006adc:	20000534 	.word	0x20000534
 8006ae0:	20000503 	.word	0x20000503
 8006ae4:	0801cfe1 	.word	0x0801cfe1
 8006ae8:	0801d000 	.word	0x0801d000
 8006aec:	20000528 	.word	0x20000528
 8006af0:	20002c19 	.word	0x20002c19
 8006af4:	20002bac 	.word	0x20002bac
 8006af8:	2000004c 	.word	0x2000004c
 8006afc:	2000053c 	.word	0x2000053c
 8006b00:	0801d00d 	.word	0x0801d00d

08006b04 <Short_Measure>:
void Short_Measure(void){
 8006b04:	b510      	push	{r4, lr}
	Count_Filter_Kalman();
 8006b06:	f7ff f867 	bl	8005bd8 <Count_Filter_Kalman>
	Read_Temp();
 8006b0a:	f7fe fd53 	bl	80055b4 <Read_Temp>
	if (Tick_Save>7){
 8006b0e:	4c09      	ldr	r4, [pc, #36]	@ (8006b34 <Short_Measure+0x30>)
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	2b07      	cmp	r3, #7
 8006b14:	d903      	bls.n	8006b1e <Short_Measure+0x1a>
	  Get_in_Shutdown();
 8006b16:	f7fe ff67 	bl	80059e8 <Get_in_Shutdown>
	  Tick_Save = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6023      	str	r3, [r4, #0]
	printf("Tick_Save : %lu\r\n", Tick_Save);
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <Short_Measure+0x34>)
 8006b22:	f013 f8c9 	bl	8019cb8 <iprintf>
     comp1_count = 0;
 8006b26:	2200      	movs	r2, #0
 8006b28:	4b04      	ldr	r3, [pc, #16]	@ (8006b3c <Short_Measure+0x38>)
 8006b2a:	601a      	str	r2, [r3, #0]
	 Tick_Save++;
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6023      	str	r3, [r4, #0]
}
 8006b32:	bd10      	pop	{r4, pc}
 8006b34:	20000540 	.word	0x20000540
 8006b38:	0801d020 	.word	0x0801d020
 8006b3c:	20000560 	.word	0x20000560

08006b40 <Non_Measure>:
void Non_Measure(void){
 8006b40:	b510      	push	{r4, lr}
	if (Tick_Save>7){
 8006b42:	4c09      	ldr	r4, [pc, #36]	@ (8006b68 <Non_Measure+0x28>)
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	2b07      	cmp	r3, #7
 8006b48:	d903      	bls.n	8006b52 <Non_Measure+0x12>
	  Get_in_Shutdown();
 8006b4a:	f7fe ff4d 	bl	80059e8 <Get_in_Shutdown>
	  Tick_Save = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6023      	str	r3, [r4, #0]
	printf("Tick_Save : %lu\r\n", Tick_Save);
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	4805      	ldr	r0, [pc, #20]	@ (8006b6c <Non_Measure+0x2c>)
 8006b56:	f013 f8af 	bl	8019cb8 <iprintf>
     comp1_count = 0;
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <Non_Measure+0x30>)
 8006b5e:	601a      	str	r2, [r3, #0]
	 Tick_Save++;
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	6023      	str	r3, [r4, #0]
}
 8006b66:	bd10      	pop	{r4, pc}
 8006b68:	20000540 	.word	0x20000540
 8006b6c:	0801d020 	.word	0x0801d020
 8006b70:	20000560 	.word	0x20000560

08006b74 <Check_And_Run_Alarms>:
{
 8006b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006b76:	4cdd      	ldr	r4, [pc, #884]	@ (8006eec <Check_And_Run_Alarms+0x378>)
 8006b78:	4bdd      	ldr	r3, [pc, #884]	@ (8006ef0 <Check_And_Run_Alarms+0x37c>)
 8006b7a:	0022      	movs	r2, r4
 8006b7c:	3273      	adds	r2, #115	@ 0x73
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	0212      	lsls	r2, r2, #8
 8006b84:	431a      	orrs	r2, r3
 8006b86:	0023      	movs	r3, r4
 8006b88:	3374      	adds	r3, #116	@ 0x74
 8006b8a:	781b      	ldrb	r3, [r3, #0]
{
 8006b8c:	b093      	sub	sp, #76	@ 0x4c
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	4313      	orrs	r3, r2
 8006b92:	0022      	movs	r2, r4
 8006b94:	3275      	adds	r2, #117	@ 0x75
 8006b96:	7812      	ldrb	r2, [r2, #0]
 8006b98:	0612      	lsls	r2, r2, #24
 8006b9a:	431a      	orrs	r2, r3
    if (start_epoch == 0xFFFFFFFFu) {
 8006b9c:	0013      	movs	r3, r2
    uint32_t start_epoch = current_settings.start_time_info_for_alarm;
 8006b9e:	9205      	str	r2, [sp, #20]
    if (start_epoch == 0xFFFFFFFFu) {
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	d100      	bne.n	8006ba6 <Check_And_Run_Alarms+0x32>
 8006ba4:	e1f3      	b.n	8006f8e <Check_And_Run_Alarms+0x41a>
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8006ba6:	4fd3      	ldr	r7, [pc, #844]	@ (8006ef4 <Check_And_Run_Alarms+0x380>)
 8006ba8:	ad0d      	add	r5, sp, #52	@ 0x34
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8006baa:	ae0c      	add	r6, sp, #48	@ 0x30
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8006bac:	0029      	movs	r1, r5
 8006bae:	2200      	movs	r2, #0
 8006bb0:	0038      	movs	r0, r7
 8006bb2:	f00a ff8f 	bl	8011ad4 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8006bb6:	0031      	movs	r1, r6
 8006bb8:	2200      	movs	r2, #0
 8006bba:	0038      	movs	r0, r7
 8006bbc:	f00a ffbc 	bl	8011b38 <HAL_RTC_GetDate>
        uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8006bc0:	78b2      	ldrb	r2, [r6, #2]
 8006bc2:	7871      	ldrb	r1, [r6, #1]
 8006bc4:	78f0      	ldrb	r0, [r6, #3]
 8006bc6:	78ae      	ldrb	r6, [r5, #2]
 8006bc8:	782b      	ldrb	r3, [r5, #0]
 8006bca:	9601      	str	r6, [sp, #4]
 8006bcc:	786d      	ldrb	r5, [r5, #1]
 8006bce:	9500      	str	r5, [sp, #0]
 8006bd0:	f002 fccc 	bl	800956c <ymd_to_epoch>
        uint32_t elapsed = (now_epoch >= start_epoch) ? (now_epoch - start_epoch) : 0u;
 8006bd4:	9b05      	ldr	r3, [sp, #20]
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	4283      	cmp	r3, r0
 8006bda:	d800      	bhi.n	8006bde <Check_And_Run_Alarms+0x6a>
 8006bdc:	1ac5      	subs	r5, r0, r3
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006bde:	0023      	movs	r3, r4
 8006be0:	3384      	adds	r3, #132	@ 0x84
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	0023      	movs	r3, r4
 8006be6:	3385      	adds	r3, #133	@ 0x85
 8006be8:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006bea:	0021      	movs	r1, r4
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	4313      	orrs	r3, r2
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006bf0:	0022      	movs	r2, r4
        uint16_t d_rh1 = current_settings.alarm_delay_rh1;
 8006bf2:	469c      	mov	ip, r3
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006bf4:	0023      	movs	r3, r4
 8006bf6:	3287      	adds	r2, #135	@ 0x87
 8006bf8:	7812      	ldrb	r2, [r2, #0]
 8006bfa:	3386      	adds	r3, #134	@ 0x86
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	0212      	lsls	r2, r2, #8
 8006c00:	431a      	orrs	r2, r3
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006c02:	0023      	movs	r3, r4
        uint16_t d_rh2 = current_settings.alarm_delay_rh2;
 8006c04:	920b      	str	r2, [sp, #44]	@ 0x2c
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006c06:	3189      	adds	r1, #137	@ 0x89
 8006c08:	780f      	ldrb	r7, [r1, #0]
 8006c0a:	3388      	adds	r3, #136	@ 0x88
 8006c0c:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006c0e:	0021      	movs	r1, r4
        uint16_t d_th1 = current_settings.alarm_delay_th1;
 8006c10:	023f      	lsls	r7, r7, #8
 8006c12:	431f      	orrs	r7, r3
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006c14:	0023      	movs	r3, r4
 8006c16:	318b      	adds	r1, #139	@ 0x8b
 8006c18:	780e      	ldrb	r6, [r1, #0]
 8006c1a:	338a      	adds	r3, #138	@ 0x8a
 8006c1c:	781b      	ldrb	r3, [r3, #0]
        uint16_t d_tl1 = current_settings.alarm_delay_tl1;
 8006c1e:	0021      	movs	r1, r4
        uint16_t d_th2 = current_settings.alarm_delay_th2;
 8006c20:	0236      	lsls	r6, r6, #8
 8006c22:	431e      	orrs	r6, r3
        uint16_t d_tl1 = current_settings.alarm_delay_tl1;
 8006c24:	0023      	movs	r3, r4
 8006c26:	318d      	adds	r1, #141	@ 0x8d
 8006c28:	7808      	ldrb	r0, [r1, #0]
 8006c2a:	338c      	adds	r3, #140	@ 0x8c
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	0200      	lsls	r0, r0, #8
 8006c30:	4318      	orrs	r0, r3
        uint16_t d_tl2 = current_settings.alarm_delay_tl2;
 8006c32:	0023      	movs	r3, r4
 8006c34:	348f      	adds	r4, #143	@ 0x8f
 8006c36:	7821      	ldrb	r1, [r4, #0]
 8006c38:	338e      	adds	r3, #142	@ 0x8e
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	0209      	lsls	r1, r1, #8
 8006c3e:	4319      	orrs	r1, r3
        gate_rh1 = (elapsed >= d_rh1);
 8006c40:	2300      	movs	r3, #0
 8006c42:	4662      	mov	r2, ip
 8006c44:	001c      	movs	r4, r3
 8006c46:	4295      	cmp	r5, r2
 8006c48:	415c      	adcs	r4, r3
 8006c4a:	b2e2      	uxtb	r2, r4
        gate_rh2 = (elapsed >= d_rh2);
 8006c4c:	001c      	movs	r4, r3
        gate_rh1 = (elapsed >= d_rh1);
 8006c4e:	9205      	str	r2, [sp, #20]
        gate_rh2 = (elapsed >= d_rh2);
 8006c50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c52:	4295      	cmp	r5, r2
 8006c54:	415c      	adcs	r4, r3
 8006c56:	b2e2      	uxtb	r2, r4
        gate_th1 = (elapsed >= d_th1);
 8006c58:	001c      	movs	r4, r3
 8006c5a:	42bd      	cmp	r5, r7
 8006c5c:	415c      	adcs	r4, r3
        gate_rh2 = (elapsed >= d_rh2);
 8006c5e:	9206      	str	r2, [sp, #24]
        gate_th1 = (elapsed >= d_th1);
 8006c60:	b2e2      	uxtb	r2, r4
        gate_th2 = (elapsed >= d_th2);
 8006c62:	001c      	movs	r4, r3
 8006c64:	42b5      	cmp	r5, r6
 8006c66:	415c      	adcs	r4, r3
        gate_th1 = (elapsed >= d_th1);
 8006c68:	9207      	str	r2, [sp, #28]
        gate_th2 = (elapsed >= d_th2);
 8006c6a:	b2e2      	uxtb	r2, r4
        gate_tl1 = (elapsed >= d_tl1);
 8006c6c:	001c      	movs	r4, r3
 8006c6e:	4285      	cmp	r5, r0
 8006c70:	415c      	adcs	r4, r3
        gate_tl2 = (elapsed >= d_tl2);
 8006c72:	428d      	cmp	r5, r1
 8006c74:	415b      	adcs	r3, r3
        gate_th2 = (elapsed >= d_th2);
 8006c76:	9208      	str	r2, [sp, #32]
        gate_tl1 = (elapsed >= d_tl1);
 8006c78:	b2e2      	uxtb	r2, r4
 8006c7a:	9209      	str	r2, [sp, #36]	@ 0x24
        if (d_rh2 > dmax) dmax = d_rh2;
 8006c7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        gate_tl2 = (elapsed >= d_tl2);
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	930a      	str	r3, [sp, #40]	@ 0x28
        if (d_rh2 > dmax) dmax = d_rh2;
 8006c82:	4663      	mov	r3, ip
 8006c84:	4594      	cmp	ip, r2
 8006c86:	d201      	bcs.n	8006c8c <Check_And_Run_Alarms+0x118>
 8006c88:	466b      	mov	r3, sp
 8006c8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
        if (d_th1 > dmax) dmax = d_th1;
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	42ba      	cmp	r2, r7
 8006c90:	d200      	bcs.n	8006c94 <Check_And_Run_Alarms+0x120>
 8006c92:	1c3b      	adds	r3, r7, #0
        if (d_th2 > dmax) dmax = d_th2;
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	42b2      	cmp	r2, r6
 8006c98:	d200      	bcs.n	8006c9c <Check_And_Run_Alarms+0x128>
 8006c9a:	1c33      	adds	r3, r6, #0
        if (d_tl1 > dmax) dmax = d_tl1;
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	4282      	cmp	r2, r0
 8006ca0:	d200      	bcs.n	8006ca4 <Check_And_Run_Alarms+0x130>
 8006ca2:	1c03      	adds	r3, r0, #0
        if (d_tl2 > dmax) dmax = d_tl2;
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	428a      	cmp	r2, r1
 8006ca8:	d200      	bcs.n	8006cac <Check_And_Run_Alarms+0x138>
 8006caa:	1c0b      	adds	r3, r1, #0
 8006cac:	b29c      	uxth	r4, r3
        if (elapsed >= dmax) {
 8006cae:	42ac      	cmp	r4, r5
 8006cb0:	d900      	bls.n	8006cb4 <Check_And_Run_Alarms+0x140>
 8006cb2:	e15c      	b.n	8006f6e <Check_And_Run_Alarms+0x3fa>
            current_settings.start_time_info_for_alarm = 0xFFFFFFFFu;
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	4b8e      	ldr	r3, [pc, #568]	@ (8006ef0 <Check_And_Run_Alarms+0x37c>)
 8006cb8:	4252      	negs	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	705a      	strb	r2, [r3, #1]
 8006cbe:	709a      	strb	r2, [r3, #2]
 8006cc0:	70da      	strb	r2, [r3, #3]
            Save_CurrentSettings(); // 1회 저장
 8006cc2:	f002 fd85 	bl	80097d0 <Save_CurrentSettings>
            printf("[AlarmDelay] epoch gate done: elapsed=%lu >= %u, sentinel set.\r\n",
 8006cc6:	0022      	movs	r2, r4
 8006cc8:	0029      	movs	r1, r5
 8006cca:	488b      	ldr	r0, [pc, #556]	@ (8006ef8 <Check_And_Run_Alarms+0x384>)
 8006ccc:	f012 fff4 	bl	8019cb8 <iprintf>
            delay_done_skip = true;
 8006cd0:	2401      	movs	r4, #1
    int16_t  temp_x10 = (int16_t)(Display_temperature * 10.0f);
 8006cd2:	4b8a      	ldr	r3, [pc, #552]	@ (8006efc <Check_And_Run_Alarms+0x388>)
 8006cd4:	498a      	ldr	r1, [pc, #552]	@ (8006f00 <Check_And_Run_Alarms+0x38c>)
 8006cd6:	681e      	ldr	r6, [r3, #0]
 8006cd8:	1c30      	adds	r0, r6, #0
 8006cda:	f7fa f933 	bl	8000f44 <__aeabi_fmul>
 8006cde:	f7fa fd05 	bl	80016ec <__aeabi_f2iz>
    uint16_t dose_now = dose_log;
 8006ce2:	4b88      	ldr	r3, [pc, #544]	@ (8006f04 <Check_And_Run_Alarms+0x390>)
    int16_t  temp_x10 = (int16_t)(Display_temperature * 10.0f);
 8006ce4:	b205      	sxth	r5, r0
    printf("[Alarm Debug] temp_avg=%.2f (x10=%d), dose=%u\r\n",
 8006ce6:	681f      	ldr	r7, [r3, #0]
 8006ce8:	1c30      	adds	r0, r6, #0
 8006cea:	b2bb      	uxth	r3, r7
 8006cec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cee:	f7fc fd53 	bl	8003798 <__aeabi_f2d>
 8006cf2:	000b      	movs	r3, r1
 8006cf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	9101      	str	r1, [sp, #4]
 8006cfa:	4883      	ldr	r0, [pc, #524]	@ (8006f08 <Check_And_Run_Alarms+0x394>)
 8006cfc:	9500      	str	r5, [sp, #0]
 8006cfe:	f012 ffdb 	bl	8019cb8 <iprintf>
    if (delay_done_skip || gate_rh1) {
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <Check_And_Run_Alarms+0x19a>
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	d100      	bne.n	8006d0e <Check_And_Run_Alarms+0x19a>
 8006d0c:	e151      	b.n	8006fb2 <Check_And_Run_Alarms+0x43e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1);
 8006d0e:	487f      	ldr	r0, [pc, #508]	@ (8006f0c <Check_And_Run_Alarms+0x398>)
 8006d10:	6982      	ldr	r2, [r0, #24]
 8006d12:	0591      	lsls	r1, r2, #22
 8006d14:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006d16:	2902      	cmp	r1, #2
 8006d18:	d023      	beq.n	8006d62 <Check_And_Run_Alarms+0x1ee>
            if (dose_now >= current_settings.alarm_rh1) {
 8006d1a:	4e7d      	ldr	r6, [pc, #500]	@ (8006f10 <Check_And_Run_Alarms+0x39c>)
 8006d1c:	4b73      	ldr	r3, [pc, #460]	@ (8006eec <Check_And_Run_Alarms+0x378>)
 8006d1e:	7836      	ldrb	r6, [r6, #0]
 8006d20:	46b4      	mov	ip, r6
 8006d22:	001e      	movs	r6, r3
 8006d24:	4667      	mov	r7, ip
 8006d26:	369c      	adds	r6, #156	@ 0x9c
 8006d28:	7836      	ldrb	r6, [r6, #0]
 8006d2a:	0236      	lsls	r6, r6, #8
 8006d2c:	4337      	orrs	r7, r6
 8006d2e:	001e      	movs	r6, r3
 8006d30:	369d      	adds	r6, #157	@ 0x9d
 8006d32:	7836      	ldrb	r6, [r6, #0]
 8006d34:	339e      	adds	r3, #158	@ 0x9e
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	0436      	lsls	r6, r6, #16
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	433e      	orrs	r6, r7
 8006d3e:	431e      	orrs	r6, r3
 8006d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d42:	429e      	cmp	r6, r3
 8006d44:	d900      	bls.n	8006d48 <Check_And_Run_Alarms+0x1d4>
 8006d46:	e12a      	b.n	8006f9e <Check_And_Run_Alarms+0x42a>
                if (st != ALARM_ON) {
 8006d48:	2901      	cmp	r1, #1
 8006d4a:	d00a      	beq.n	8006d62 <Check_And_Run_Alarms+0x1ee>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, ALARM_ON);
 8006d4c:	4b71      	ldr	r3, [pc, #452]	@ (8006f14 <Check_And_Run_Alarms+0x3a0>)
 8006d4e:	401a      	ands	r2, r3
 8006d50:	2380      	movs	r3, #128	@ 0x80
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006d58:	f7ff f9c8 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High1 -> ON\r\n");
 8006d5c:	486e      	ldr	r0, [pc, #440]	@ (8006f18 <Check_And_Run_Alarms+0x3a4>)
        printf("[AlarmDelay] RH1 waiting...\r\n");
 8006d5e:	f013 f81b 	bl	8019d98 <puts>
    if (delay_done_skip || gate_rh2) {
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <Check_And_Run_Alarms+0x1fa>
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	d100      	bne.n	8006d6e <Check_And_Run_Alarms+0x1fa>
 8006d6c:	e12d      	b.n	8006fca <Check_And_Run_Alarms+0x456>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2);
 8006d6e:	4867      	ldr	r0, [pc, #412]	@ (8006f0c <Check_And_Run_Alarms+0x398>)
 8006d70:	6982      	ldr	r2, [r0, #24]
 8006d72:	0511      	lsls	r1, r2, #20
 8006d74:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006d76:	2902      	cmp	r1, #2
 8006d78:	d023      	beq.n	8006dc2 <Check_And_Run_Alarms+0x24e>
            if (dose_now >= current_settings.alarm_rh2) {
 8006d7a:	4e68      	ldr	r6, [pc, #416]	@ (8006f1c <Check_And_Run_Alarms+0x3a8>)
 8006d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006eec <Check_And_Run_Alarms+0x378>)
 8006d7e:	7836      	ldrb	r6, [r6, #0]
 8006d80:	46b4      	mov	ip, r6
 8006d82:	001e      	movs	r6, r3
 8006d84:	4667      	mov	r7, ip
 8006d86:	36a4      	adds	r6, #164	@ 0xa4
 8006d88:	7836      	ldrb	r6, [r6, #0]
 8006d8a:	0236      	lsls	r6, r6, #8
 8006d8c:	4337      	orrs	r7, r6
 8006d8e:	001e      	movs	r6, r3
 8006d90:	36a5      	adds	r6, #165	@ 0xa5
 8006d92:	7836      	ldrb	r6, [r6, #0]
 8006d94:	33a6      	adds	r3, #166	@ 0xa6
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	0436      	lsls	r6, r6, #16
 8006d9a:	061b      	lsls	r3, r3, #24
 8006d9c:	433e      	orrs	r6, r7
 8006d9e:	431e      	orrs	r6, r3
 8006da0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006da2:	429e      	cmp	r6, r3
 8006da4:	d900      	bls.n	8006da8 <Check_And_Run_Alarms+0x234>
 8006da6:	e106      	b.n	8006fb6 <Check_And_Run_Alarms+0x442>
                if (st != ALARM_ON) {
 8006da8:	2901      	cmp	r1, #1
 8006daa:	d00a      	beq.n	8006dc2 <Check_And_Run_Alarms+0x24e>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, ALARM_ON);
 8006dac:	4b5c      	ldr	r3, [pc, #368]	@ (8006f20 <Check_And_Run_Alarms+0x3ac>)
 8006dae:	401a      	ands	r2, r3
 8006db0:	2380      	movs	r3, #128	@ 0x80
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006db8:	f7ff f998 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High2 -> ON\r\n");
 8006dbc:	4859      	ldr	r0, [pc, #356]	@ (8006f24 <Check_And_Run_Alarms+0x3b0>)
        printf("[AlarmDelay] RH2 waiting...\r\n");
 8006dbe:	f012 ffeb 	bl	8019d98 <puts>
    if (delay_done_skip || gate_th1) {
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <Check_And_Run_Alarms+0x25a>
 8006dc8:	2c00      	cmp	r4, #0
 8006dca:	d100      	bne.n	8006dce <Check_And_Run_Alarms+0x25a>
 8006dcc:	e109      	b.n	8006fe2 <Check_And_Run_Alarms+0x46e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1);
 8006dce:	484f      	ldr	r0, [pc, #316]	@ (8006f0c <Check_And_Run_Alarms+0x398>)
 8006dd0:	6982      	ldr	r2, [r0, #24]
 8006dd2:	0491      	lsls	r1, r2, #18
 8006dd4:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006dd6:	2902      	cmp	r1, #2
 8006dd8:	d017      	beq.n	8006e0a <Check_And_Run_Alarms+0x296>
            if (temp_x10 >= current_settings.alarm_th1) {
 8006dda:	4b53      	ldr	r3, [pc, #332]	@ (8006f28 <Check_And_Run_Alarms+0x3b4>)
 8006ddc:	781e      	ldrb	r6, [r3, #0]
 8006dde:	4b53      	ldr	r3, [pc, #332]	@ (8006f2c <Check_And_Run_Alarms+0x3b8>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	4333      	orrs	r3, r6
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	141b      	asrs	r3, r3, #16
 8006dea:	42ab      	cmp	r3, r5
 8006dec:	dd00      	ble.n	8006df0 <Check_And_Run_Alarms+0x27c>
 8006dee:	e0ee      	b.n	8006fce <Check_And_Run_Alarms+0x45a>
                if (st != ALARM_ON) {
 8006df0:	2901      	cmp	r1, #1
 8006df2:	d00a      	beq.n	8006e0a <Check_And_Run_Alarms+0x296>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, ALARM_ON);
 8006df4:	4b4e      	ldr	r3, [pc, #312]	@ (8006f30 <Check_And_Run_Alarms+0x3bc>)
 8006df6:	401a      	ands	r2, r3
 8006df8:	2380      	movs	r3, #128	@ 0x80
 8006dfa:	015b      	lsls	r3, r3, #5
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006e00:	f7ff f974 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High1 -> ON\r\n");
 8006e04:	484b      	ldr	r0, [pc, #300]	@ (8006f34 <Check_And_Run_Alarms+0x3c0>)
        printf("[AlarmDelay] TH1 waiting...\r\n");
 8006e06:	f012 ffc7 	bl	8019d98 <puts>
    if (delay_done_skip || gate_th2) {
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <Check_And_Run_Alarms+0x2a2>
 8006e10:	2c00      	cmp	r4, #0
 8006e12:	d100      	bne.n	8006e16 <Check_And_Run_Alarms+0x2a2>
 8006e14:	e0f1      	b.n	8006ffa <Check_And_Run_Alarms+0x486>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2);
 8006e16:	483d      	ldr	r0, [pc, #244]	@ (8006f0c <Check_And_Run_Alarms+0x398>)
 8006e18:	6982      	ldr	r2, [r0, #24]
 8006e1a:	0411      	lsls	r1, r2, #16
 8006e1c:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006e1e:	2902      	cmp	r1, #2
 8006e20:	d017      	beq.n	8006e52 <Check_And_Run_Alarms+0x2de>
            if (temp_x10 >= current_settings.alarm_th2) {
 8006e22:	4b45      	ldr	r3, [pc, #276]	@ (8006f38 <Check_And_Run_Alarms+0x3c4>)
 8006e24:	781e      	ldrb	r6, [r3, #0]
 8006e26:	4b45      	ldr	r3, [pc, #276]	@ (8006f3c <Check_And_Run_Alarms+0x3c8>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	4333      	orrs	r3, r6
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	141b      	asrs	r3, r3, #16
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	dd00      	ble.n	8006e38 <Check_And_Run_Alarms+0x2c4>
 8006e36:	e0d6      	b.n	8006fe6 <Check_And_Run_Alarms+0x472>
                if (st != ALARM_ON) {
 8006e38:	2901      	cmp	r1, #1
 8006e3a:	d00a      	beq.n	8006e52 <Check_And_Run_Alarms+0x2de>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, ALARM_ON);
 8006e3c:	4b40      	ldr	r3, [pc, #256]	@ (8006f40 <Check_And_Run_Alarms+0x3cc>)
 8006e3e:	401a      	ands	r2, r3
 8006e40:	2380      	movs	r3, #128	@ 0x80
 8006e42:	01db      	lsls	r3, r3, #7
 8006e44:	4313      	orrs	r3, r2
 8006e46:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006e48:	f7ff f950 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High2 -> ON\r\n");
 8006e4c:	483d      	ldr	r0, [pc, #244]	@ (8006f44 <Check_And_Run_Alarms+0x3d0>)
        printf("[AlarmDelay] TH2 waiting...\r\n");
 8006e4e:	f012 ffa3 	bl	8019d98 <puts>
    if (delay_done_skip || gate_tl1) {
 8006e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <Check_And_Run_Alarms+0x2ea>
 8006e58:	2c00      	cmp	r4, #0
 8006e5a:	d100      	bne.n	8006e5e <Check_And_Run_Alarms+0x2ea>
 8006e5c:	e0d9      	b.n	8007012 <Check_And_Run_Alarms+0x49e>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1);
 8006e5e:	482b      	ldr	r0, [pc, #172]	@ (8006f0c <Check_And_Run_Alarms+0x398>)
 8006e60:	6982      	ldr	r2, [r0, #24]
 8006e62:	0391      	lsls	r1, r2, #14
 8006e64:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006e66:	2902      	cmp	r1, #2
 8006e68:	d017      	beq.n	8006e9a <Check_And_Run_Alarms+0x326>
            if (temp_x10 <= current_settings.alarm_tl1) {
 8006e6a:	4b37      	ldr	r3, [pc, #220]	@ (8006f48 <Check_And_Run_Alarms+0x3d4>)
 8006e6c:	781e      	ldrb	r6, [r3, #0]
 8006e6e:	4b37      	ldr	r3, [pc, #220]	@ (8006f4c <Check_And_Run_Alarms+0x3d8>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	4333      	orrs	r3, r6
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	141b      	asrs	r3, r3, #16
 8006e7a:	42ab      	cmp	r3, r5
 8006e7c:	da00      	bge.n	8006e80 <Check_And_Run_Alarms+0x30c>
 8006e7e:	e0be      	b.n	8006ffe <Check_And_Run_Alarms+0x48a>
                if (st != ALARM_ON) {
 8006e80:	2901      	cmp	r1, #1
 8006e82:	d00a      	beq.n	8006e9a <Check_And_Run_Alarms+0x326>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_ON);
 8006e84:	4b32      	ldr	r3, [pc, #200]	@ (8006f50 <Check_And_Run_Alarms+0x3dc>)
 8006e86:	401a      	ands	r2, r3
 8006e88:	2380      	movs	r3, #128	@ 0x80
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006e90:	f7ff f92c 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low1 -> ON\r\n");
 8006e94:	482f      	ldr	r0, [pc, #188]	@ (8006f54 <Check_And_Run_Alarms+0x3e0>)
        printf("[AlarmDelay] TL1 waiting...\r\n");
 8006e96:	f012 ff7f 	bl	8019d98 <puts>
    if (delay_done_skip || gate_tl2) {
 8006e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <Check_And_Run_Alarms+0x332>
 8006ea0:	2c00      	cmp	r4, #0
 8006ea2:	d100      	bne.n	8006ea6 <Check_And_Run_Alarms+0x332>
 8006ea4:	e0c1      	b.n	800702a <Check_And_Run_Alarms+0x4b6>
        AlarmState st = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2);
 8006ea6:	4819      	ldr	r0, [pc, #100]	@ (8006f0c <Check_And_Run_Alarms+0x398>)
 8006ea8:	6982      	ldr	r2, [r0, #24]
 8006eaa:	0311      	lsls	r1, r2, #12
 8006eac:	0f89      	lsrs	r1, r1, #30
        if (st != ALARM_DISABLE) {
 8006eae:	2902      	cmp	r1, #2
 8006eb0:	d017      	beq.n	8006ee2 <Check_And_Run_Alarms+0x36e>
            if (temp_x10 <= current_settings.alarm_tl2) {
 8006eb2:	4b29      	ldr	r3, [pc, #164]	@ (8006f58 <Check_And_Run_Alarms+0x3e4>)
 8006eb4:	781c      	ldrb	r4, [r3, #0]
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <Check_And_Run_Alarms+0x3e8>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	4323      	orrs	r3, r4
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	141b      	asrs	r3, r3, #16
 8006ec2:	42ab      	cmp	r3, r5
 8006ec4:	da00      	bge.n	8006ec8 <Check_And_Run_Alarms+0x354>
 8006ec6:	e0a6      	b.n	8007016 <Check_And_Run_Alarms+0x4a2>
                if (st != ALARM_ON) {
 8006ec8:	2901      	cmp	r1, #1
 8006eca:	d00a      	beq.n	8006ee2 <Check_And_Run_Alarms+0x36e>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, ALARM_ON);
 8006ecc:	4b24      	ldr	r3, [pc, #144]	@ (8006f60 <Check_And_Run_Alarms+0x3ec>)
 8006ece:	401a      	ands	r2, r3
 8006ed0:	2380      	movs	r3, #128	@ 0x80
 8006ed2:	02db      	lsls	r3, r3, #11
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	6183      	str	r3, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006ed8:	f7ff f908 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low2 -> ON\r\n");
 8006edc:	4821      	ldr	r0, [pc, #132]	@ (8006f64 <Check_And_Run_Alarms+0x3f0>)
        printf("[AlarmDelay] TL2 waiting...\r\n");
 8006ede:	f012 ff5b 	bl	8019d98 <puts>
    printf("[Debug] Check_And_Run_Alarms: End\r\n");
 8006ee2:	4821      	ldr	r0, [pc, #132]	@ (8006f68 <Check_And_Run_Alarms+0x3f4>)
 8006ee4:	f012 ff58 	bl	8019d98 <puts>
}
 8006ee8:	b013      	add	sp, #76	@ 0x4c
 8006eea:	e03f      	b.n	8006f6c <Check_And_Run_Alarms+0x3f8>
 8006eec:	20002bac 	.word	0x20002bac
 8006ef0:	20002c1e 	.word	0x20002c1e
 8006ef4:	200009f8 	.word	0x200009f8
 8006ef8:	0801d032 	.word	0x0801d032
 8006efc:	20000544 	.word	0x20000544
 8006f00:	41200000 	.word	0x41200000
 8006f04:	20000530 	.word	0x20000530
 8006f08:	0801d0bc 	.word	0x0801d0bc
 8006f0c:	20000b50 	.word	0x20000b50
 8006f10:	20002c47 	.word	0x20002c47
 8006f14:	fffffcff 	.word	0xfffffcff
 8006f18:	0801d0ec 	.word	0x0801d0ec
 8006f1c:	20002c4f 	.word	0x20002c4f
 8006f20:	fffff3ff 	.word	0xfffff3ff
 8006f24:	0801d148 	.word	0x0801d148
 8006f28:	20002c4b 	.word	0x20002c4b
 8006f2c:	20002c4c 	.word	0x20002c4c
 8006f30:	ffffcfff 	.word	0xffffcfff
 8006f34:	0801d1a4 	.word	0x0801d1a4
 8006f38:	20002c53 	.word	0x20002c53
 8006f3c:	20002c54 	.word	0x20002c54
 8006f40:	ffff3fff 	.word	0xffff3fff
 8006f44:	0801d1f6 	.word	0x0801d1f6
 8006f48:	20002c4d 	.word	0x20002c4d
 8006f4c:	20002c4e 	.word	0x20002c4e
 8006f50:	fffcffff 	.word	0xfffcffff
 8006f54:	0801d248 	.word	0x0801d248
 8006f58:	20002c55 	.word	0x20002c55
 8006f5c:	20002c56 	.word	0x20002c56
 8006f60:	fff3ffff 	.word	0xfff3ffff
 8006f64:	0801d298 	.word	0x0801d298
 8006f68:	0801d2e8 	.word	0x0801d2e8
 8006f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("[AlarmDelay] elapsed=%lu(s)  RH1:%u RH2:%u TH1:%u TH2:%u TL1:%u TL2:%u\r\n",
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f70:	0029      	movs	r1, r5
 8006f72:	9303      	str	r3, [sp, #12]
 8006f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f76:	482e      	ldr	r0, [pc, #184]	@ (8007030 <Check_And_Run_Alarms+0x4bc>)
 8006f78:	9302      	str	r3, [sp, #8]
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	9a05      	ldr	r2, [sp, #20]
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	9b07      	ldr	r3, [sp, #28]
    bool delay_done_skip = false;
 8006f82:	2400      	movs	r4, #0
            printf("[AlarmDelay] elapsed=%lu(s)  RH1:%u RH2:%u TH1:%u TH2:%u TL1:%u TL2:%u\r\n",
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	9b06      	ldr	r3, [sp, #24]
 8006f88:	f012 fe96 	bl	8019cb8 <iprintf>
 8006f8c:	e6a1      	b.n	8006cd2 <Check_And_Run_Alarms+0x15e>
        delay_done_skip = true;
 8006f8e:	2401      	movs	r4, #1
    bool gate_rh1 = true, gate_rh2 = true, gate_th1 = true, gate_th2 = true, gate_tl1 = true, gate_tl2 = true;
 8006f90:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f92:	9409      	str	r4, [sp, #36]	@ 0x24
 8006f94:	9408      	str	r4, [sp, #32]
 8006f96:	9407      	str	r4, [sp, #28]
 8006f98:	9406      	str	r4, [sp, #24]
 8006f9a:	9405      	str	r4, [sp, #20]
 8006f9c:	e699      	b.n	8006cd2 <Check_And_Run_Alarms+0x15e>
                if (st != ALARM_OFF) {
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d100      	bne.n	8006fa4 <Check_And_Run_Alarms+0x430>
 8006fa2:	e6de      	b.n	8006d62 <Check_And_Run_Alarms+0x1ee>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, ALARM_OFF);
 8006fa4:	4b23      	ldr	r3, [pc, #140]	@ (8007034 <Check_And_Run_Alarms+0x4c0>)
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006faa:	f7ff f89f 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High1 -> OFF\r\n");
 8006fae:	4822      	ldr	r0, [pc, #136]	@ (8007038 <Check_And_Run_Alarms+0x4c4>)
 8006fb0:	e6d5      	b.n	8006d5e <Check_And_Run_Alarms+0x1ea>
        printf("[AlarmDelay] RH1 waiting...\r\n");
 8006fb2:	4822      	ldr	r0, [pc, #136]	@ (800703c <Check_And_Run_Alarms+0x4c8>)
 8006fb4:	e6d3      	b.n	8006d5e <Check_And_Run_Alarms+0x1ea>
                if (st != ALARM_OFF) {
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	d100      	bne.n	8006fbc <Check_And_Run_Alarms+0x448>
 8006fba:	e702      	b.n	8006dc2 <Check_And_Run_Alarms+0x24e>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, ALARM_OFF);
 8006fbc:	4b20      	ldr	r3, [pc, #128]	@ (8007040 <Check_And_Run_Alarms+0x4cc>)
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006fc2:	f7ff f893 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Radiation High2 -> OFF\r\n");
 8006fc6:	481f      	ldr	r0, [pc, #124]	@ (8007044 <Check_And_Run_Alarms+0x4d0>)
 8006fc8:	e6f9      	b.n	8006dbe <Check_And_Run_Alarms+0x24a>
        printf("[AlarmDelay] RH2 waiting...\r\n");
 8006fca:	481f      	ldr	r0, [pc, #124]	@ (8007048 <Check_And_Run_Alarms+0x4d4>)
 8006fcc:	e6f7      	b.n	8006dbe <Check_And_Run_Alarms+0x24a>
                if (st != ALARM_OFF) {
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	d100      	bne.n	8006fd4 <Check_And_Run_Alarms+0x460>
 8006fd2:	e71a      	b.n	8006e0a <Check_And_Run_Alarms+0x296>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, ALARM_OFF);
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800704c <Check_And_Run_Alarms+0x4d8>)
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006fda:	f7ff f887 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High1 -> OFF\r\n");
 8006fde:	481c      	ldr	r0, [pc, #112]	@ (8007050 <Check_And_Run_Alarms+0x4dc>)
 8006fe0:	e711      	b.n	8006e06 <Check_And_Run_Alarms+0x292>
        printf("[AlarmDelay] TH1 waiting...\r\n");
 8006fe2:	481c      	ldr	r0, [pc, #112]	@ (8007054 <Check_And_Run_Alarms+0x4e0>)
 8006fe4:	e70f      	b.n	8006e06 <Check_And_Run_Alarms+0x292>
                if (st != ALARM_OFF) {
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d100      	bne.n	8006fec <Check_And_Run_Alarms+0x478>
 8006fea:	e732      	b.n	8006e52 <Check_And_Run_Alarms+0x2de>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, ALARM_OFF);
 8006fec:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <Check_And_Run_Alarms+0x4e4>)
 8006fee:	401a      	ands	r2, r3
 8006ff0:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8006ff2:	f7ff f87b 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp High2 -> OFF\r\n");
 8006ff6:	4819      	ldr	r0, [pc, #100]	@ (800705c <Check_And_Run_Alarms+0x4e8>)
 8006ff8:	e729      	b.n	8006e4e <Check_And_Run_Alarms+0x2da>
        printf("[AlarmDelay] TH2 waiting...\r\n");
 8006ffa:	4819      	ldr	r0, [pc, #100]	@ (8007060 <Check_And_Run_Alarms+0x4ec>)
 8006ffc:	e727      	b.n	8006e4e <Check_And_Run_Alarms+0x2da>
                if (st != ALARM_OFF) {
 8006ffe:	2900      	cmp	r1, #0
 8007000:	d100      	bne.n	8007004 <Check_And_Run_Alarms+0x490>
 8007002:	e74a      	b.n	8006e9a <Check_And_Run_Alarms+0x326>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_OFF);
 8007004:	4b17      	ldr	r3, [pc, #92]	@ (8007064 <Check_And_Run_Alarms+0x4f0>)
 8007006:	401a      	ands	r2, r3
 8007008:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 800700a:	f7ff f86f 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low1 -> OFF\r\n");
 800700e:	4816      	ldr	r0, [pc, #88]	@ (8007068 <Check_And_Run_Alarms+0x4f4>)
 8007010:	e741      	b.n	8006e96 <Check_And_Run_Alarms+0x322>
        printf("[AlarmDelay] TL1 waiting...\r\n");
 8007012:	4816      	ldr	r0, [pc, #88]	@ (800706c <Check_And_Run_Alarms+0x4f8>)
 8007014:	e73f      	b.n	8006e96 <Check_And_Run_Alarms+0x322>
                if (st != ALARM_OFF) {
 8007016:	2900      	cmp	r1, #0
 8007018:	d100      	bne.n	800701c <Check_And_Run_Alarms+0x4a8>
 800701a:	e762      	b.n	8006ee2 <Check_And_Run_Alarms+0x36e>
                    SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, ALARM_OFF);
 800701c:	4b14      	ldr	r3, [pc, #80]	@ (8007070 <Check_And_Run_Alarms+0x4fc>)
 800701e:	401a      	ands	r2, r3
 8007020:	6182      	str	r2, [r0, #24]
                    Save_MarkAndAlarmState_To_Backup(&device_config);
 8007022:	f7ff f863 	bl	80060ec <Save_MarkAndAlarmState_To_Backup>
                    printf("[Alarm] Temp Low2 -> OFF\r\n");
 8007026:	4813      	ldr	r0, [pc, #76]	@ (8007074 <Check_And_Run_Alarms+0x500>)
 8007028:	e759      	b.n	8006ede <Check_And_Run_Alarms+0x36a>
        printf("[AlarmDelay] TL2 waiting...\r\n");
 800702a:	4813      	ldr	r0, [pc, #76]	@ (8007078 <Check_And_Run_Alarms+0x504>)
 800702c:	e757      	b.n	8006ede <Check_And_Run_Alarms+0x36a>
 800702e:	46c0      	nop			@ (mov r8, r8)
 8007030:	0801d073 	.word	0x0801d073
 8007034:	fffffcff 	.word	0xfffffcff
 8007038:	0801d10b 	.word	0x0801d10b
 800703c:	0801d12b 	.word	0x0801d12b
 8007040:	fffff3ff 	.word	0xfffff3ff
 8007044:	0801d167 	.word	0x0801d167
 8007048:	0801d187 	.word	0x0801d187
 800704c:	ffffcfff 	.word	0xffffcfff
 8007050:	0801d1be 	.word	0x0801d1be
 8007054:	0801d1d9 	.word	0x0801d1d9
 8007058:	ffff3fff 	.word	0xffff3fff
 800705c:	0801d210 	.word	0x0801d210
 8007060:	0801d22b 	.word	0x0801d22b
 8007064:	fffcffff 	.word	0xfffcffff
 8007068:	0801d261 	.word	0x0801d261
 800706c:	0801d27b 	.word	0x0801d27b
 8007070:	fff3ffff 	.word	0xfff3ffff
 8007074:	0801d2b1 	.word	0x0801d2b1
 8007078:	0801d2cb 	.word	0x0801d2cb

0800707c <Interval_Measure>:
void Interval_Measure(void){
 800707c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 if (measure_Rad_flag) {
 800707e:	4b60      	ldr	r3, [pc, #384]	@ (8007200 <Interval_Measure+0x184>)
void Interval_Measure(void){
 8007080:	b085      	sub	sp, #20
	 if (measure_Rad_flag) {
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	4c5f      	ldr	r4, [pc, #380]	@ (8007204 <Interval_Measure+0x188>)
 8007086:	b2da      	uxtb	r2, r3
 8007088:	9201      	str	r2, [sp, #4]
 800708a:	4a5f      	ldr	r2, [pc, #380]	@ (8007208 <Interval_Measure+0x18c>)
 800708c:	9202      	str	r2, [sp, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d100      	bne.n	8007094 <Interval_Measure+0x18>
 8007092:	e068      	b.n	8007166 <Interval_Measure+0xea>
	Count_Filter_Kalman();
 8007094:	f7fe fda0 	bl	8005bd8 <Count_Filter_Kalman>
	printf("Tick_Save : %lu, Interval_LCD_Count : %lu\r\n", Tick_Save, Interval_LCD_Count);
 8007098:	4d5c      	ldr	r5, [pc, #368]	@ (800720c <Interval_Measure+0x190>)
 800709a:	6821      	ldr	r1, [r4, #0]
 800709c:	682a      	ldr	r2, [r5, #0]
 800709e:	485c      	ldr	r0, [pc, #368]	@ (8007210 <Interval_Measure+0x194>)
 80070a0:	f012 fe0a 	bl	8019cb8 <iprintf>
	if (Check_And_Save_When_Target_Reached() && Interval_LCD_Count == 0){
 80070a4:	f7fe fd2e 	bl	8005b04 <Check_And_Save_When_Target_Reached>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d02e      	beq.n	800710a <Interval_Measure+0x8e>
 80070ac:	682f      	ldr	r7, [r5, #0]
 80070ae:	2f00      	cmp	r7, #0
 80070b0:	d12b      	bne.n	800710a <Interval_Measure+0x8e>
		printf("Get in Timer Shut Down\r\n");
 80070b2:	4858      	ldr	r0, [pc, #352]	@ (8007214 <Interval_Measure+0x198>)
 80070b4:	f012 fe70 	bl	8019d98 <puts>
		Read_Temp();
 80070b8:	f7fe fa7c 	bl	80055b4 <Read_Temp>
		Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 80070bc:	4e56      	ldr	r6, [pc, #344]	@ (8007218 <Interval_Measure+0x19c>)
 80070be:	4d57      	ldr	r5, [pc, #348]	@ (800721c <Interval_Measure+0x1a0>)
 80070c0:	4a57      	ldr	r2, [pc, #348]	@ (8007220 <Interval_Measure+0x1a4>)
 80070c2:	6831      	ldr	r1, [r6, #0]
 80070c4:	6828      	ldr	r0, [r5, #0]
 80070c6:	f7ff f9ef 	bl	80064a8 <Update_TempDose_MinMax>
		Check_And_Run_Alarms(Display_temperature, dose_log);
 80070ca:	6831      	ldr	r1, [r6, #0]
 80070cc:	6828      	ldr	r0, [r5, #0]
 80070ce:	f7ff fd51 	bl	8006b74 <Check_And_Run_Alarms>
	    Write_buffer();
 80070d2:	f7ff fabb 	bl	800664c <Write_buffer>
	    rad_interval_count = rad_ratio - 1;     // 카운터 리셋
 80070d6:	4a53      	ldr	r2, [pc, #332]	@ (8007224 <Interval_Measure+0x1a8>)
 80070d8:	4b53      	ldr	r3, [pc, #332]	@ (8007228 <Interval_Measure+0x1ac>)
 80070da:	8812      	ldrh	r2, [r2, #0]
 80070dc:	3a01      	subs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
	    idx_temp++;
 80070e0:	4a52      	ldr	r2, [pc, #328]	@ (800722c <Interval_Measure+0x1b0>)
 80070e2:	8813      	ldrh	r3, [r2, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	8013      	strh	r3, [r2, #0]
	    idx_rad++;
 80070e8:	4a51      	ldr	r2, [pc, #324]	@ (8007230 <Interval_Measure+0x1b4>)
 80070ea:	8813      	ldrh	r3, [r2, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	8013      	strh	r3, [r2, #0]
	    Save_Backup_Index();
 80070f0:	f7fe ffac 	bl	800604c <Save_Backup_Index>
	    Get_in_Shutdown_Timer();
 80070f4:	f7fe fed0 	bl	8005e98 <Get_in_Shutdown_Timer>
	    Tick_Save = 0;
 80070f8:	6027      	str	r7, [r4, #0]
			 comp1_count = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	9a02      	ldr	r2, [sp, #8]
 80070fe:	6013      	str	r3, [r2, #0]
			 Tick_Save++;
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	3301      	adds	r3, #1
	 Tick_Save++;
 8007104:	6023      	str	r3, [r4, #0]
}
 8007106:	b005      	add	sp, #20
 8007108:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Check_And_Save_When_Target_Reached() && Interval_LCD_Count>0) {
 800710a:	f7fe fcfb 	bl	8005b04 <Check_And_Save_When_Target_Reached>
 800710e:	2800      	cmp	r0, #0
 8007110:	d0f3      	beq.n	80070fa <Interval_Measure+0x7e>
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <Interval_Measure+0x7e>
		printf("Start Timer & No shutdown\r\n");
 8007118:	4846      	ldr	r0, [pc, #280]	@ (8007234 <Interval_Measure+0x1b8>)
 800711a:	f012 fe3d 	bl	8019d98 <puts>
		Read_Temp();
 800711e:	f7fe fa49 	bl	80055b4 <Read_Temp>
		Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 8007122:	4e3d      	ldr	r6, [pc, #244]	@ (8007218 <Interval_Measure+0x19c>)
 8007124:	4d3d      	ldr	r5, [pc, #244]	@ (800721c <Interval_Measure+0x1a0>)
 8007126:	4a3e      	ldr	r2, [pc, #248]	@ (8007220 <Interval_Measure+0x1a4>)
 8007128:	6831      	ldr	r1, [r6, #0]
 800712a:	6828      	ldr	r0, [r5, #0]
 800712c:	f7ff f9bc 	bl	80064a8 <Update_TempDose_MinMax>
		Check_And_Run_Alarms(Display_temperature, dose_log);
 8007130:	6831      	ldr	r1, [r6, #0]
 8007132:	6828      	ldr	r0, [r5, #0]
 8007134:	f7ff fd1e 	bl	8006b74 <Check_And_Run_Alarms>
	    Write_buffer();
 8007138:	f7ff fa88 	bl	800664c <Write_buffer>
	    rad_interval_count = rad_ratio - 1;     // 카운터 리셋
 800713c:	4a39      	ldr	r2, [pc, #228]	@ (8007224 <Interval_Measure+0x1a8>)
 800713e:	4b3a      	ldr	r3, [pc, #232]	@ (8007228 <Interval_Measure+0x1ac>)
 8007140:	8812      	ldrh	r2, [r2, #0]
 8007142:	3a01      	subs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
	    idx_temp++;
 8007146:	4a39      	ldr	r2, [pc, #228]	@ (800722c <Interval_Measure+0x1b0>)
 8007148:	8813      	ldrh	r3, [r2, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	8013      	strh	r3, [r2, #0]
	    idx_rad++;
 800714e:	4a38      	ldr	r2, [pc, #224]	@ (8007230 <Interval_Measure+0x1b4>)
			    idx_temp++;
 8007150:	8813      	ldrh	r3, [r2, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	8013      	strh	r3, [r2, #0]
			    Save_Backup_Index();
 8007156:	f7fe ff79 	bl	800604c <Save_Backup_Index>
				Switch_Backup_reg(MODE_Start_Button);
 800715a:	2005      	movs	r0, #5
 800715c:	f7fe fe5c 	bl	8005e18 <Switch_Backup_reg>
				Start_Wake_Timer();
 8007160:	f7fe fef4 	bl	8005f4c <Start_Wake_Timer>
 8007164:	e7c9      	b.n	80070fa <Interval_Measure+0x7e>
		 if(Check_And_Save_When_Target_Reached()){
 8007166:	f7fe fccd 	bl	8005b04 <Check_And_Save_When_Target_Reached>
 800716a:	2800      	cmp	r0, #0
 800716c:	d0c5      	beq.n	80070fa <Interval_Measure+0x7e>
		 Read_Temp();
 800716e:	f7fe fa21 	bl	80055b4 <Read_Temp>
		 PrintCurrentRTC();
 8007172:	f7fe fc81 	bl	8005a78 <PrintCurrentRTC>
		 dose_log = 0x0000;
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	4d27      	ldr	r5, [pc, #156]	@ (8007218 <Interval_Measure+0x19c>)
		 printf("[Debug] Display_temperature = %.2f°C\n", Display_temperature);
 800717a:	4f28      	ldr	r7, [pc, #160]	@ (800721c <Interval_Measure+0x1a0>)
		 dose_log = 0x0000;
 800717c:	602b      	str	r3, [r5, #0]
		 printf("[Debug] Display_temperature = %.2f°C\n", Display_temperature);
 800717e:	6838      	ldr	r0, [r7, #0]
 8007180:	f7fc fb0a 	bl	8003798 <__aeabi_f2d>
 8007184:	000b      	movs	r3, r1
 8007186:	0002      	movs	r2, r0
 8007188:	482b      	ldr	r0, [pc, #172]	@ (8007238 <Interval_Measure+0x1bc>)
 800718a:	f012 fd95 	bl	8019cb8 <iprintf>
		 Check_And_Run_Alarms(Display_temperature, dose_log);
 800718e:	6829      	ldr	r1, [r5, #0]
 8007190:	6838      	ldr	r0, [r7, #0]
 8007192:	f7ff fcef 	bl	8006b74 <Check_And_Run_Alarms>
			if (Interval_LCD_Count == 0){
 8007196:	4b1d      	ldr	r3, [pc, #116]	@ (800720c <Interval_Measure+0x190>)
 8007198:	4e23      	ldr	r6, [pc, #140]	@ (8007228 <Interval_Measure+0x1ac>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	4b20      	ldr	r3, [pc, #128]	@ (8007220 <Interval_Measure+0x1a4>)
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	9b00      	ldr	r3, [sp, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d119      	bne.n	80071dc <Interval_Measure+0x160>
				printf("Get in Timer Shut Down\r\n");
 80071a8:	481a      	ldr	r0, [pc, #104]	@ (8007214 <Interval_Measure+0x198>)
 80071aa:	f012 fdf5 	bl	8019d98 <puts>
				Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 80071ae:	6829      	ldr	r1, [r5, #0]
 80071b0:	6838      	ldr	r0, [r7, #0]
 80071b2:	9a03      	ldr	r2, [sp, #12]
 80071b4:	f7ff f978 	bl	80064a8 <Update_TempDose_MinMax>
				dose_log = 0x0000;
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	602b      	str	r3, [r5, #0]
			    Write_buffer();
 80071bc:	f7ff fa46 	bl	800664c <Write_buffer>
			    rad_interval_count--;
 80071c0:	7833      	ldrb	r3, [r6, #0]
			    idx_temp++;
 80071c2:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <Interval_Measure+0x1b0>)
			    rad_interval_count--;
 80071c4:	3b01      	subs	r3, #1
 80071c6:	7033      	strb	r3, [r6, #0]
			    idx_temp++;
 80071c8:	8813      	ldrh	r3, [r2, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	8013      	strh	r3, [r2, #0]
			    Save_Backup_Index();
 80071ce:	f7fe ff3d 	bl	800604c <Save_Backup_Index>
			    Get_in_Shutdown_Timer();
 80071d2:	f7fe fe61 	bl	8005e98 <Get_in_Shutdown_Timer>
			    Tick_Save = 0;
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	e78e      	b.n	80070fa <Interval_Measure+0x7e>
				printf("Start Timer & No shutdown\r\n");
 80071dc:	4815      	ldr	r0, [pc, #84]	@ (8007234 <Interval_Measure+0x1b8>)
 80071de:	f012 fddb 	bl	8019d98 <puts>
				Update_TempDose_MinMax(Display_temperature, dose_log, &device_config);
 80071e2:	9a03      	ldr	r2, [sp, #12]
 80071e4:	6829      	ldr	r1, [r5, #0]
 80071e6:	6838      	ldr	r0, [r7, #0]
 80071e8:	f7ff f95e 	bl	80064a8 <Update_TempDose_MinMax>
				dose_log = 0x0000;
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	602b      	str	r3, [r5, #0]
				rad_interval_count--;
 80071f0:	7833      	ldrb	r3, [r6, #0]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	7033      	strb	r3, [r6, #0]
			    Write_buffer();
 80071f6:	f7ff fa29 	bl	800664c <Write_buffer>
			    idx_temp++;
 80071fa:	4a0c      	ldr	r2, [pc, #48]	@ (800722c <Interval_Measure+0x1b0>)
 80071fc:	e7a8      	b.n	8007150 <Interval_Measure+0xd4>
 80071fe:	46c0      	nop			@ (mov r8, r8)
 8007200:	20000502 	.word	0x20000502
 8007204:	20000540 	.word	0x20000540
 8007208:	20000560 	.word	0x20000560
 800720c:	2000053c 	.word	0x2000053c
 8007210:	0801d30b 	.word	0x0801d30b
 8007214:	0801d337 	.word	0x0801d337
 8007218:	20000530 	.word	0x20000530
 800721c:	20000544 	.word	0x20000544
 8007220:	20000b50 	.word	0x20000b50
 8007224:	2000000a 	.word	0x2000000a
 8007228:	200004fd 	.word	0x200004fd
 800722c:	200004fe 	.word	0x200004fe
 8007230:	20000500 	.word	0x20000500
 8007234:	0801d34f 	.word	0x0801d34f
 8007238:	0801d36a 	.word	0x0801d36a

0800723c <__io_putchar>:
{
 800723c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800723e:	4c0b      	ldr	r4, [pc, #44]	@ (800726c <__io_putchar+0x30>)
 8007240:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 8007242:	280a      	cmp	r0, #10
 8007244:	d108      	bne.n	8007258 <__io_putchar+0x1c>
    uint8_t ret = '\r';
 8007246:	210f      	movs	r1, #15
 8007248:	230d      	movs	r3, #13
 800724a:	4469      	add	r1, sp
 800724c:	700b      	strb	r3, [r1, #0]
    HAL_UART_Transmit(&huart3, &ret, 1, 0xFFFF);
 800724e:	2201      	movs	r2, #1
 8007250:	0020      	movs	r0, r4
 8007252:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <__io_putchar+0x34>)
 8007254:	f00b fded 	bl	8012e32 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8007258:	2201      	movs	r2, #1
 800725a:	0020      	movs	r0, r4
 800725c:	4b04      	ldr	r3, [pc, #16]	@ (8007270 <__io_putchar+0x34>)
 800725e:	a901      	add	r1, sp, #4
 8007260:	f00b fde7 	bl	8012e32 <HAL_UART_Transmit>
  return ch;
 8007264:	9801      	ldr	r0, [sp, #4]
}
 8007266:	b004      	add	sp, #16
 8007268:	bd10      	pop	{r4, pc}
 800726a:	46c0      	nop			@ (mov r8, r8)
 800726c:	20000840 	.word	0x20000840
 8007270:	0000ffff 	.word	0x0000ffff

08007274 <SystemClock_Config>:
{
 8007274:	b570      	push	{r4, r5, r6, lr}
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8007276:	2518      	movs	r5, #24
{
 8007278:	b0b0      	sub	sp, #192	@ 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800727a:	224c      	movs	r2, #76	@ 0x4c
 800727c:	2100      	movs	r1, #0
 800727e:	a81d      	add	r0, sp, #116	@ 0x74
 8007280:	f012 fee6 	bl	801a050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007284:	2210      	movs	r2, #16
 8007286:	2100      	movs	r1, #0
 8007288:	a802      	add	r0, sp, #8
 800728a:	f012 fee1 	bl	801a050 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800728e:	002a      	movs	r2, r5
 8007290:	2100      	movs	r1, #0
 8007292:	a806      	add	r0, sp, #24
 8007294:	f012 fedc 	bl	801a050 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007298:	2080      	movs	r0, #128	@ 0x80
 800729a:	0080      	lsls	r0, r0, #2
 800729c:	f009 f9f2 	bl	8010684 <HAL_PWREx_ControlVoltageScaling>
  HAL_PWR_EnableBkUpAccess();
 80072a0:	f009 f9c6 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80072a4:	4a26      	ldr	r2, [pc, #152]	@ (8007340 <SystemClock_Config+0xcc>)
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072a6:	2640      	movs	r6, #64	@ 0x40
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80072a8:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072aa:	a81d      	add	r0, sp, #116	@ 0x74
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80072ac:	43ab      	bics	r3, r5
 80072ae:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI48;
 80072b0:	2326      	movs	r3, #38	@ 0x26
 80072b2:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80072b4:	335b      	adds	r3, #91	@ 0x5b
 80072b6:	931f      	str	r3, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072b8:	337f      	adds	r3, #127	@ 0x7f
 80072ba:	9320      	str	r3, [sp, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // PLL OFF
 80072bc:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80072be:	3d17      	subs	r5, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072c0:	9621      	str	r6, [sp, #132]	@ 0x84
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80072c2:	9527      	str	r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // PLL OFF
 80072c4:	9328      	str	r3, [sp, #160]	@ 0xa0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072c6:	f009 fad5 	bl	8010874 <HAL_RCC_OscConfig>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80072ca:	4c1e      	ldr	r4, [pc, #120]	@ (8007344 <SystemClock_Config+0xd0>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072cc:	1e01      	subs	r1, r0, #0
 80072ce:	d001      	beq.n	80072d4 <SystemClock_Config+0x60>
 80072d0:	b672      	cpsid	i
  while (1)
 80072d2:	e7fe      	b.n	80072d2 <SystemClock_Config+0x5e>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072d4:	0032      	movs	r2, r6
 80072d6:	a80d      	add	r0, sp, #52	@ 0x34
 80072d8:	f012 feba 	bl	801a050 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80072dc:	2380      	movs	r3, #128	@ 0x80
 80072de:	015b      	lsls	r3, r3, #5
 80072e0:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80072e2:	23c0      	movs	r3, #192	@ 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072e4:	a80c      	add	r0, sp, #48	@ 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80072e6:	051b      	lsls	r3, r3, #20
 80072e8:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072ea:	f009 fe01 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 80072ee:	1e01      	subs	r1, r0, #0
 80072f0:	d001      	beq.n	80072f6 <SystemClock_Config+0x82>
 80072f2:	b672      	cpsid	i
  while (1)
 80072f4:	e7fe      	b.n	80072f4 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80072f6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072f8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80072fa:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80072fc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80072fe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;  // PLL이 아닌 HSI 직접 사용
 8007300:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007302:	f009 fd4f 	bl	8010da4 <HAL_RCC_ClockConfig>
 8007306:	2800      	cmp	r0, #0
 8007308:	d001      	beq.n	800730e <SystemClock_Config+0x9a>
 800730a:	b672      	cpsid	i
  while (1)
 800730c:	e7fe      	b.n	800730c <SystemClock_Config+0x98>
  __HAL_RCC_CRS_CLK_ENABLE();
 800730e:	2280      	movs	r2, #128	@ 0x80
 8007310:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007312:	0252      	lsls	r2, r2, #9
 8007314:	4313      	orrs	r3, r2
 8007316:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007318:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800731a:	9006      	str	r0, [sp, #24]
  __HAL_RCC_CRS_CLK_ENABLE();
 800731c:	4013      	ands	r3, r2
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	9b01      	ldr	r3, [sp, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8007322:	2380      	movs	r3, #128	@ 0x80
 8007324:	055b      	lsls	r3, r3, #21
 8007326:	9307      	str	r3, [sp, #28]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768); // 48MHz 기준
 8007328:	4b07      	ldr	r3, [pc, #28]	@ (8007348 <SystemClock_Config+0xd4>)
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800732a:	9008      	str	r0, [sp, #32]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 32768); // 48MHz 기준
 800732c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800732e:	2322      	movs	r3, #34	@ 0x22
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8007330:	a806      	add	r0, sp, #24
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8007332:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8007334:	3b02      	subs	r3, #2
 8007336:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8007338:	f00a f902 	bl	8011540 <HAL_RCCEx_CRSConfig>
}
 800733c:	b030      	add	sp, #192	@ 0xc0
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	40021090 	.word	0x40021090
 8007344:	40021000 	.word	0x40021000
 8007348:	000005b7 	.word	0x000005b7

0800734c <main>:
{
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b0d3      	sub	sp, #332	@ 0x14c
   SystemClock_Config();
 8007350:	f7ff ff90 	bl	8007274 <SystemClock_Config>
  HAL_Init();
 8007354:	f006 fd2a 	bl	800ddac <HAL_Init>
  HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8007358:	2200      	movs	r2, #0
 800735a:	2002      	movs	r0, #2
 800735c:	0011      	movs	r1, r2
 800735e:	f007 fc11 	bl	800eb84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8007362:	2002      	movs	r0, #2
 8007364:	f007 fc38 	bl	800ebd8 <HAL_NVIC_EnableIRQ>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007368:	2214      	movs	r2, #20
 800736a:	2100      	movs	r1, #0
 800736c:	a81d      	add	r0, sp, #116	@ 0x74
 800736e:	f012 fe6f 	bl	801a050 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007372:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007374:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007376:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007378:	4cd4      	ldr	r4, [pc, #848]	@ (80076cc <main+0x380>)
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 800737a:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800737c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 800737e:	2110      	movs	r1, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007380:	4313      	orrs	r3, r2
 8007382:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8007384:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8007386:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007388:	4013      	ands	r3, r2
 800738a:	930a      	str	r3, [sp, #40]	@ 0x28
 800738c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800738e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007390:	1892      	adds	r2, r2, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007392:	432b      	orrs	r3, r5
 8007394:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8007396:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007398:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800739a:	402b      	ands	r3, r5
 800739c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800739e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80073a2:	4333      	orrs	r3, r6
 80073a4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80073a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80073a8:	4033      	ands	r3, r6
 80073aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80073ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80073b0:	4313      	orrs	r3, r2
 80073b2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80073b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80073b6:	4013      	ands	r3, r2
 80073b8:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80073ba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80073be:	f007 ffa3 	bl	800f308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Regulator_En_Pin|Middle_Temp_GND_Pin, GPIO_PIN_RESET);
 80073c2:	2188      	movs	r1, #136	@ 0x88
 80073c4:	2200      	movs	r2, #0
 80073c6:	48c2      	ldr	r0, [pc, #776]	@ (80076d0 <main+0x384>)
 80073c8:	00c9      	lsls	r1, r1, #3
 80073ca:	f007 ff9d 	bl	800f308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, GPIO_PIN_RESET);
 80073ce:	2200      	movs	r2, #0
 80073d0:	2104      	movs	r1, #4
 80073d2:	48c0      	ldr	r0, [pc, #768]	@ (80076d4 <main+0x388>)
 80073d4:	f007 ff98 	bl	800f308 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80073d8:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80073da:	48bf      	ldr	r0, [pc, #764]	@ (80076d8 <main+0x38c>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80073dc:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80073de:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80073e0:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073e2:	971e      	str	r7, [sp, #120]	@ 0x78
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80073e4:	961f      	str	r6, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80073e6:	f007 fe4b 	bl	800f080 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80073ea:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80073ec:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80073ee:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80073f0:	a91d      	add	r1, sp, #116	@ 0x74
 80073f2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80073f4:	931e      	str	r3, [sp, #120]	@ 0x78
  GPIO_InitStruct.Pin = User_Button_Pin;
 80073f6:	951d      	str	r5, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073f8:	951f      	str	r5, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80073fa:	f007 fe41 	bl	800f080 <HAL_GPIO_Init>
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 80073fe:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8007400:	2310      	movs	r3, #16
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 8007402:	a91d      	add	r1, sp, #116	@ 0x74
 8007404:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8007406:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007408:	9720      	str	r7, [sp, #128]	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800740a:	951e      	str	r5, [sp, #120]	@ 0x78
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800740c:	961f      	str	r6, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 800740e:	f007 fe37 	bl	800f080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 8007412:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 8007414:	48ae      	ldr	r0, [pc, #696]	@ (80076d0 <main+0x384>)
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 8007416:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 8007418:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 800741a:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800741c:	9720      	str	r7, [sp, #128]	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800741e:	951e      	str	r5, [sp, #120]	@ 0x78
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007420:	961f      	str	r6, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 8007422:	f007 fe2d 	bl	800f080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 8007426:	2204      	movs	r2, #4
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8007428:	48aa      	ldr	r0, [pc, #680]	@ (80076d4 <main+0x388>)
 800742a:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 800742c:	921d      	str	r2, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800742e:	9720      	str	r7, [sp, #128]	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007430:	951e      	str	r5, [sp, #120]	@ 0x78
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007432:	951f      	str	r5, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8007434:	f007 fe24 	bl	800f080 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 8007438:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 800743a:	a91d      	add	r1, sp, #116	@ 0x74
 800743c:	48a4      	ldr	r0, [pc, #656]	@ (80076d0 <main+0x384>)
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 800743e:	931d      	str	r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007440:	9720      	str	r7, [sp, #128]	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007442:	951e      	str	r5, [sp, #120]	@ 0x78
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007444:	951f      	str	r5, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8007446:	f007 fe1b 	bl	800f080 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800744a:	2005      	movs	r0, #5
 800744c:	f007 fbc4 	bl	800ebd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007450:	2007      	movs	r0, #7
 8007452:	f007 fbc1 	bl	800ebd8 <HAL_NVIC_EnableIRQ>
    Backup_GetMode();
 8007456:	f7fe fc6b 	bl	8005d30 <Backup_GetMode>
    if (Meas_Mode == 4 && HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 800745a:	4fa0      	ldr	r7, [pc, #640]	@ (80076dc <main+0x390>)
 800745c:	783b      	ldrb	r3, [r7, #0]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d107      	bne.n	8007472 <main+0x126>
 8007462:	20a0      	movs	r0, #160	@ 0xa0
 8007464:	0029      	movs	r1, r5
 8007466:	05c0      	lsls	r0, r0, #23
 8007468:	f007 ff48 	bl	800f2fc <HAL_GPIO_ReadPin>
 800746c:	42a8      	cmp	r0, r5
 800746e:	d100      	bne.n	8007472 <main+0x126>
    	Meas_Mode = 2;
 8007470:	703e      	strb	r6, [r7, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007472:	2701      	movs	r7, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007474:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007476:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007478:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800747a:	433b      	orrs	r3, r7
 800747c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800747e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007480:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007482:	403b      	ands	r3, r7
 8007484:	9309      	str	r3, [sp, #36]	@ 0x24
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007488:	f007 fb7c 	bl	800eb84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800748c:	2009      	movs	r0, #9
 800748e:	f007 fba3 	bl	800ebd8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007492:	2200      	movs	r2, #0
 8007494:	200a      	movs	r0, #10
 8007496:	0011      	movs	r1, r2
 8007498:	f007 fb74 	bl	800eb84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800749c:	200a      	movs	r0, #10
 800749e:	f007 fb9b 	bl	800ebd8 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80074a2:	220c      	movs	r2, #12
 80074a4:	2100      	movs	r1, #0
 80074a6:	a81d      	add	r0, sp, #116	@ 0x74
 80074a8:	f012 fdd2 	bl	801a050 <memset>
  hadc1.Instance = ADC1;
 80074ac:	4e8c      	ldr	r6, [pc, #560]	@ (80076e0 <main+0x394>)
 80074ae:	4b8d      	ldr	r3, [pc, #564]	@ (80076e4 <main+0x398>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80074b0:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 80074b2:	6033      	str	r3, [r6, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80074b4:	23c0      	movs	r3, #192	@ 0xc0
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	6073      	str	r3, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80074ba:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80074bc:	6172      	str	r2, [r6, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80074be:	19f2      	adds	r2, r6, r7
 80074c0:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80074c2:	0032      	movs	r2, r6
 80074c4:	322c      	adds	r2, #44	@ 0x2c
 80074c6:	7013      	strb	r3, [r2, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80074c8:	2207      	movs	r2, #7
 80074ca:	6372      	str	r2, [r6, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80074cc:	63b2      	str	r2, [r6, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80074ce:	0032      	movs	r2, r6
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80074d0:	0030      	movs	r0, r6
  hadc1.Init.OversamplingMode = DISABLE;
 80074d2:	323c      	adds	r2, #60	@ 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80074d4:	60b3      	str	r3, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80074d6:	60f3      	str	r3, [r6, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80074d8:	6133      	str	r3, [r6, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80074da:	8333      	strh	r3, [r6, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80074dc:	76b3      	strb	r3, [r6, #26]
  hadc1.Init.NbrOfConversion = 1;
 80074de:	61f7      	str	r7, [r6, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80074e0:	6273      	str	r3, [r6, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80074e2:	62b3      	str	r3, [r6, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80074e4:	6333      	str	r3, [r6, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 80074e6:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80074e8:	64f3      	str	r3, [r6, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80074ea:	f006 fc91 	bl	800de10 <HAL_ADC_Init>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d001      	beq.n	80074f6 <main+0x1aa>
 80074f2:	b672      	cpsid	i
  while (1)
 80074f4:	e7fe      	b.n	80074f4 <main+0x1a8>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80074f6:	901e      	str	r0, [sp, #120]	@ 0x78
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80074f8:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80074fa:	a91d      	add	r1, sp, #116	@ 0x74
 80074fc:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 80074fe:	971d      	str	r7, [sp, #116]	@ 0x74
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007500:	f006 fece 	bl	800e2a0 <HAL_ADC_ConfigChannel>
 8007504:	2800      	cmp	r0, #0
 8007506:	d001      	beq.n	800750c <main+0x1c0>
 8007508:	b672      	cpsid	i
  while (1)
 800750a:	e7fe      	b.n	800750a <main+0x1be>
  hlcd.Instance = LCD;
 800750c:	4c76      	ldr	r4, [pc, #472]	@ (80076e8 <main+0x39c>)
 800750e:	4b77      	ldr	r3, [pc, #476]	@ (80076ec <main+0x3a0>)
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8007510:	6060      	str	r0, [r4, #4]
  hlcd.Instance = LCD;
 8007512:	6023      	str	r3, [r4, #0]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8007514:	230c      	movs	r3, #12
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8007516:	60a0      	str	r0, [r4, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8007518:	60e3      	str	r3, [r4, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800751a:	6120      	str	r0, [r4, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800751c:	6160      	str	r0, [r4, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800751e:	61a0      	str	r0, [r4, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8007520:	61e0      	str	r0, [r4, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 8007522:	3304      	adds	r3, #4
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8007524:	62a0      	str	r0, [r4, #40]	@ 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8007526:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8007528:	6320      	str	r0, [r4, #48]	@ 0x30
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800752a:	0020      	movs	r0, r4
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 800752c:	6223      	str	r3, [r4, #32]
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800752e:	f007 ffc9 	bl	800f4c4 <HAL_LCD_Init>
 8007532:	1e05      	subs	r5, r0, #0
 8007534:	d001      	beq.n	800753a <main+0x1ee>
 8007536:	b672      	cpsid	i
  while (1)
 8007538:	e7fe      	b.n	8007538 <main+0x1ec>
  __HAL_LCD_HIGHDRIVER_ENABLE(&hlcd);
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	0020      	movs	r0, r4
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	433a      	orrs	r2, r7
 8007542:	605a      	str	r2, [r3, #4]
 8007544:	f007 ffa6 	bl	800f494 <LCD_WaitForSynchro>
  hspi3.Instance = SPI3;
 8007548:	4869      	ldr	r0, [pc, #420]	@ (80076f0 <main+0x3a4>)
 800754a:	4b6a      	ldr	r3, [pc, #424]	@ (80076f4 <main+0x3a8>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800754c:	6085      	str	r5, [r0, #8]
  hspi3.Instance = SPI3;
 800754e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007550:	2382      	movs	r3, #130	@ 0x82
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007556:	23e0      	movs	r3, #224	@ 0xe0
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800755c:	2380      	movs	r3, #128	@ 0x80
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	6183      	str	r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8007562:	3bfa      	subs	r3, #250	@ 0xfa
 8007564:	3bff      	subs	r3, #255	@ 0xff
 8007566:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007568:	3301      	adds	r3, #1
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800756a:	6105      	str	r5, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800756c:	6145      	str	r5, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800756e:	61c5      	str	r5, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007570:	6205      	str	r5, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007572:	6245      	str	r5, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007574:	6285      	str	r5, [r0, #40]	@ 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007576:	6305      	str	r5, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007578:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800757a:	f00a fca1 	bl	8011ec0 <HAL_SPI_Init>
 800757e:	2800      	cmp	r0, #0
 8007580:	d001      	beq.n	8007586 <main+0x23a>
 8007582:	b672      	cpsid	i
  while (1)
 8007584:	e7fe      	b.n	8007584 <main+0x238>
  huart3.Instance = USART3;
 8007586:	4c5c      	ldr	r4, [pc, #368]	@ (80076f8 <main+0x3ac>)
 8007588:	4b5c      	ldr	r3, [pc, #368]	@ (80076fc <main+0x3b0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800758a:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 800758c:	6023      	str	r3, [r4, #0]
  huart3.Init.BaudRate = 115200;
 800758e:	23e1      	movs	r3, #225	@ 0xe1
 8007590:	025b      	lsls	r3, r3, #9
 8007592:	6063      	str	r3, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007594:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007596:	60e0      	str	r0, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007598:	6120      	str	r0, [r4, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800759a:	61a0      	str	r0, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800759c:	61e0      	str	r0, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800759e:	6220      	str	r0, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80075a0:	6260      	str	r0, [r4, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075a2:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80075a4:	0020      	movs	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 80075a6:	6163      	str	r3, [r4, #20]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80075a8:	f00b fd12 	bl	8012fd0 <HAL_HalfDuplex_Init>
 80075ac:	1e01      	subs	r1, r0, #0
 80075ae:	d001      	beq.n	80075b4 <main+0x268>
 80075b0:	b672      	cpsid	i
  while (1)
 80075b2:	e7fe      	b.n	80075b2 <main+0x266>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075b4:	0020      	movs	r0, r4
 80075b6:	f00b fd89 	bl	80130cc <HAL_UARTEx_SetTxFifoThreshold>
 80075ba:	1e01      	subs	r1, r0, #0
 80075bc:	d001      	beq.n	80075c2 <main+0x276>
 80075be:	b672      	cpsid	i
  while (1)
 80075c0:	e7fe      	b.n	80075c0 <main+0x274>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075c2:	0020      	movs	r0, r4
 80075c4:	f00b fda2 	bl	801310c <HAL_UARTEx_SetRxFifoThreshold>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d001      	beq.n	80075d0 <main+0x284>
 80075cc:	b672      	cpsid	i
  while (1)
 80075ce:	e7fe      	b.n	80075ce <main+0x282>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80075d0:	0020      	movs	r0, r4
 80075d2:	f00b fd5d 	bl	8013090 <HAL_UARTEx_DisableFifoMode>
 80075d6:	1e03      	subs	r3, r0, #0
 80075d8:	d001      	beq.n	80075de <main+0x292>
 80075da:	b672      	cpsid	i
  while (1)
 80075dc:	e7fe      	b.n	80075dc <main+0x290>
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80075de:	2280      	movs	r2, #128	@ 0x80
  hcomp1.Instance = COMP1;
 80075e0:	4847      	ldr	r0, [pc, #284]	@ (8007700 <main+0x3b4>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80075e2:	0052      	lsls	r2, r2, #1
 80075e4:	6102      	str	r2, [r0, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO1;
 80075e6:	3ab0      	subs	r2, #176	@ 0xb0
 80075e8:	6142      	str	r2, [r0, #20]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80075ea:	22c0      	movs	r2, #192	@ 0xc0
 80075ec:	0292      	lsls	r2, r2, #10
 80075ee:	6182      	str	r2, [r0, #24]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 80075f0:	22c0      	movs	r2, #192	@ 0xc0
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80075f2:	61c3      	str	r3, [r0, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80075f4:	6083      	str	r3, [r0, #8]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80075f6:	6203      	str	r3, [r0, #32]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80075f8:	6043      	str	r3, [r0, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 80075fa:	2321      	movs	r3, #33	@ 0x21
  hcomp1.Instance = COMP1;
 80075fc:	4f41      	ldr	r7, [pc, #260]	@ (8007704 <main+0x3b8>)
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 80075fe:	0312      	lsls	r2, r2, #12
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8007600:	6243      	str	r3, [r0, #36]	@ 0x24
  hcomp1.Instance = COMP1;
 8007602:	6007      	str	r7, [r0, #0]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 8007604:	60c2      	str	r2, [r0, #12]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007606:	f007 f97d 	bl	800e904 <HAL_COMP_Init>
 800760a:	1e03      	subs	r3, r0, #0
 800760c:	d001      	beq.n	8007612 <main+0x2c6>
 800760e:	b672      	cpsid	i
  while (1)
 8007610:	e7fe      	b.n	8007610 <main+0x2c4>
  hlptim1.Instance = LPTIM1;
 8007612:	483d      	ldr	r0, [pc, #244]	@ (8007708 <main+0x3bc>)
 8007614:	4a3d      	ldr	r2, [pc, #244]	@ (800770c <main+0x3c0>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8007616:	6043      	str	r3, [r0, #4]
  hlptim1.Instance = LPTIM1;
 8007618:	6002      	str	r2, [r0, #0]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800761a:	4a3d      	ldr	r2, [pc, #244]	@ (8007710 <main+0x3c4>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800761c:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800761e:	6142      	str	r2, [r0, #20]
  hlptim1.Init.Period = 32767;
 8007620:	4a3c      	ldr	r2, [pc, #240]	@ (8007714 <main+0x3c8>)
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8007622:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim1.Init.Period = 32767;
 8007624:	6202      	str	r2, [r0, #32]
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8007626:	6283      	str	r3, [r0, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8007628:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800762a:	6303      	str	r3, [r0, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 800762c:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800762e:	f007 ffdd 	bl	800f5ec <HAL_LPTIM_Init>
 8007632:	2800      	cmp	r0, #0
 8007634:	d001      	beq.n	800763a <main+0x2ee>
 8007636:	b672      	cpsid	i
  while (1)
 8007638:	e7fe      	b.n	8007638 <main+0x2ec>
  LCD_Clear_Display(LCD_data);
 800763a:	4837      	ldr	r0, [pc, #220]	@ (8007718 <main+0x3cc>)
 800763c:	f7fd fb5c 	bl	8004cf8 <LCD_Clear_Display>
  HAL_PWR_EnableBkUpAccess();
 8007640:	f008 fff6 	bl	8010630 <HAL_PWR_EnableBkUpAccess>
  if ( HAL_RTCEx_BKUPRead(&hrtc, BKP_MODE_REG) == 0x0000)
 8007644:	4c35      	ldr	r4, [pc, #212]	@ (800771c <main+0x3d0>)
 8007646:	2101      	movs	r1, #1
 8007648:	0020      	movs	r0, r4
 800764a:	f00a fb09 	bl	8011c60 <HAL_RTCEx_BKUPRead>
 800764e:	1e05      	subs	r5, r0, #0
 8007650:	d000      	beq.n	8007654 <main+0x308>
 8007652:	e09c      	b.n	800778e <main+0x442>
  RTC_TimeTypeDef sTime = {0};
 8007654:	0001      	movs	r1, r0
 8007656:	2214      	movs	r2, #20
 8007658:	a81d      	add	r0, sp, #116	@ 0x74
 800765a:	f012 fcf9 	bl	801a050 <memset>
  hrtc.Instance = RTC;
 800765e:	4b30      	ldr	r3, [pc, #192]	@ (8007720 <main+0x3d4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007660:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 8007662:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8007664:	237f      	movs	r3, #127	@ 0x7f
 8007666:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8007668:	3380      	adds	r3, #128	@ 0x80
 800766a:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800766c:	2380      	movs	r3, #128	@ 0x80
 800766e:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 8007670:	950e      	str	r5, [sp, #56]	@ 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007672:	6065      	str	r5, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007674:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007676:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007678:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800767a:	61e3      	str	r3, [r4, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800767c:	6225      	str	r5, [r4, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800767e:	6265      	str	r5, [r4, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007680:	f00a f806 	bl	8011690 <HAL_RTC_Init>
 8007684:	2800      	cmp	r0, #0
 8007686:	d001      	beq.n	800768c <main+0x340>
 8007688:	b672      	cpsid	i
  while (1)
 800768a:	e7fe      	b.n	800768a <main+0x33e>
  sTime.Hours = 0x0;
 800768c:	2264      	movs	r2, #100	@ 0x64
 800768e:	ab04      	add	r3, sp, #16
 8007690:	189b      	adds	r3, r3, r2
 8007692:	8018      	strh	r0, [r3, #0]
  sTime.Seconds = 0x0;
 8007694:	3202      	adds	r2, #2
 8007696:	ab04      	add	r3, sp, #16
 8007698:	189b      	adds	r3, r3, r2
 800769a:	7018      	strb	r0, [r3, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800769c:	3a65      	subs	r2, #101	@ 0x65
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800769e:	9020      	str	r0, [sp, #128]	@ 0x80
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80076a0:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80076a2:	a91d      	add	r1, sp, #116	@ 0x74
 80076a4:	0020      	movs	r0, r4
 80076a6:	f00a f85b 	bl	8011760 <HAL_RTC_SetTime>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d001      	beq.n	80076b2 <main+0x366>
 80076ae:	b672      	cpsid	i
  while (1)
 80076b0:	e7fe      	b.n	80076b0 <main+0x364>
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80076b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007724 <main+0x3d8>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80076b4:	2201      	movs	r2, #1
 80076b6:	0020      	movs	r0, r4
 80076b8:	a90e      	add	r1, sp, #56	@ 0x38
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80076ba:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80076bc:	f00a f8de 	bl	801187c <HAL_RTC_SetDate>
 80076c0:	9005      	str	r0, [sp, #20]
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d030      	beq.n	8007728 <main+0x3dc>
 80076c6:	b672      	cpsid	i
  while (1)
 80076c8:	e7fe      	b.n	80076c8 <main+0x37c>
 80076ca:	46c0      	nop			@ (mov r8, r8)
 80076cc:	40021000 	.word	0x40021000
 80076d0:	50000400 	.word	0x50000400
 80076d4:	50000c00 	.word	0x50000c00
 80076d8:	50000800 	.word	0x50000800
 80076dc:	20000535 	.word	0x20000535
 80076e0:	20000aec 	.word	0x20000aec
 80076e4:	40012400 	.word	0x40012400
 80076e8:	20000a80 	.word	0x20000a80
 80076ec:	40002400 	.word	0x40002400
 80076f0:	20000994 	.word	0x20000994
 80076f4:	40003c00 	.word	0x40003c00
 80076f8:	20000840 	.word	0x20000840
 80076fc:	40004800 	.word	0x40004800
 8007700:	20000abc 	.word	0x20000abc
 8007704:	40010200 	.word	0x40010200
 8007708:	20000a28 	.word	0x20000a28
 800770c:	40007c00 	.word	0x40007c00
 8007710:	0000ffff 	.word	0x0000ffff
 8007714:	00007fff 	.word	0x00007fff
 8007718:	20000514 	.word	0x20000514
 800771c:	200009f8 	.word	0x200009f8
 8007720:	40002800 	.word	0x40002800
 8007724:	25270502 	.word	0x25270502
      device_config.temp_max = INT16_MIN;
 8007728:	4de1      	ldr	r5, [pc, #900]	@ (8007ab0 <main+0x764>)
 800772a:	4be2      	ldr	r3, [pc, #904]	@ (8007ab4 <main+0x768>)
      SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_DISABLE);
 800772c:	49e2      	ldr	r1, [pc, #904]	@ (8007ab8 <main+0x76c>)
      device_config.temp_max = INT16_MIN;
 800772e:	602b      	str	r3, [r5, #0]
      device_config.dose_max = 0xFFFFFFFF;
 8007730:	2301      	movs	r3, #1
 8007732:	425b      	negs	r3, r3
 8007734:	606b      	str	r3, [r5, #4]
      device_config.mark = 0;
 8007736:	9b05      	ldr	r3, [sp, #20]
      printf("[Debug][Set] alarm_state Raw: 0x%08lX\n", device_config.alarm_state);
 8007738:	48e0      	ldr	r0, [pc, #896]	@ (8007abc <main+0x770>)
      device_config.mark = 0;
 800773a:	752b      	strb	r3, [r5, #20]
      SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, ALARM_DISABLE);
 800773c:	61a9      	str	r1, [r5, #24]
      printf("[Debug][Set] alarm_state Raw: 0x%08lX\n", device_config.alarm_state);
 800773e:	f012 fabb 	bl	8019cb8 <iprintf>
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007742:	2003      	movs	r0, #3
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8007744:	69aa      	ldr	r2, [r5, #24]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8007746:	0b13      	lsrs	r3, r2, #12
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007748:	4003      	ands	r3, r0
 800774a:	9306      	str	r3, [sp, #24]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 800774c:	0a91      	lsrs	r1, r2, #10
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2));
 800774e:	0c93      	lsrs	r3, r2, #18
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 8007750:	4001      	ands	r1, r0
 8007752:	4003      	ands	r3, r0
 8007754:	9107      	str	r1, [sp, #28]
 8007756:	9302      	str	r3, [sp, #8]
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8007758:	0a11      	lsrs	r1, r2, #8
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 800775a:	0c13      	lsrs	r3, r2, #16
          GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 800775c:	0b92      	lsrs	r2, r2, #14
      printf("[Debug][Set] RH1=%u, RH2=%u, TH1=%u, TH2=%u, TL1=%u, TL2=%u\n",
 800775e:	4003      	ands	r3, r0
 8007760:	4002      	ands	r2, r0
 8007762:	4001      	ands	r1, r0
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9200      	str	r2, [sp, #0]
 8007768:	9b06      	ldr	r3, [sp, #24]
 800776a:	9a07      	ldr	r2, [sp, #28]
 800776c:	48d4      	ldr	r0, [pc, #848]	@ (8007ac0 <main+0x774>)
 800776e:	f012 faa3 	bl	8019cb8 <iprintf>
      Save_All_Config_To_BackupRegister(&device_config);
 8007772:	0028      	movs	r0, r5
 8007774:	f7fe fd28 	bl	80061c8 <Save_All_Config_To_BackupRegister>
      HAL_RTCEx_BKUPWrite(&hrtc, BKP_MODE_REG, MODE_Boot);
 8007778:	2201      	movs	r2, #1
 800777a:	0020      	movs	r0, r4
 800777c:	0011      	movs	r1, r2
 800777e:	f00a fa67 	bl	8011c50 <HAL_RTCEx_BKUPWrite>
      idx_rad = 0;
 8007782:	4bd0      	ldr	r3, [pc, #832]	@ (8007ac4 <main+0x778>)
 8007784:	9a05      	ldr	r2, [sp, #20]
      printf("First Boot\r\n");
 8007786:	48d0      	ldr	r0, [pc, #832]	@ (8007ac8 <main+0x77c>)
      idx_rad = 0;
 8007788:	801a      	strh	r2, [r3, #0]
      printf("First Boot\r\n");
 800778a:	f012 fb05 	bl	8019d98 <puts>
  uint32_t pwrmode_bits = (COMP1->CSR & (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0));
 800778e:	22c0      	movs	r2, #192	@ 0xc0
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	0312      	lsls	r2, r2, #12
	  printf("Low Power OK\r\n");
 8007794:	48cd      	ldr	r0, [pc, #820]	@ (8007acc <main+0x780>)
  uint32_t pwrmode_bits = (COMP1->CSR & (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0));
 8007796:	4013      	ands	r3, r2
  if (pwrmode_bits == (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0)) {
 8007798:	4293      	cmp	r3, r2
 800779a:	d000      	beq.n	800779e <main+0x452>
	  printf( "Low Power non\r\n");
 800779c:	48cc      	ldr	r0, [pc, #816]	@ (8007ad0 <main+0x784>)
 800779e:	f012 fafb 	bl	8019d98 <puts>
  SPI_FLASH_Init();
 80077a2:	f002 f9c9 	bl	8009b38 <SPI_FLASH_Init>
  Load_DeviceSettings(&cfg);
 80077a6:	a81d      	add	r0, sp, #116	@ 0x74
 80077a8:	f001 ff42 	bl	8009630 <Load_DeviceSettings>
  current_settings = cfg;
 80077ac:	4fc9      	ldr	r7, [pc, #804]	@ (8007ad4 <main+0x788>)
 80077ae:	22d3      	movs	r2, #211	@ 0xd3
 80077b0:	a91d      	add	r1, sp, #116	@ 0x74
 80077b2:	0038      	movs	r0, r7
 80077b4:	f012 fd16 	bl	801a1e4 <memcpy>
  Load_CurrentSettings();
 80077b8:	f001 ff42 	bl	8009640 <Load_CurrentSettings>
  Init_DeviceSettings();
 80077bc:	f002 f810 	bl	80097e0 <Init_DeviceSettings>
  printf( "Regulatior On!\r\n");
 80077c0:	48c5      	ldr	r0, [pc, #788]	@ (8007ad8 <main+0x78c>)
 80077c2:	f012 fae9 	bl	8019d98 <puts>
  HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_SET); // 핀 High 상태로 출력
 80077c6:	2180      	movs	r1, #128	@ 0x80
 80077c8:	2201      	movs	r2, #1
 80077ca:	00c9      	lsls	r1, r1, #3
 80077cc:	48c3      	ldr	r0, [pc, #780]	@ (8007adc <main+0x790>)
 80077ce:	f007 fd9b 	bl	800f308 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80077d2:	0030      	movs	r0, r6
 80077d4:	f006 ffb2 	bl	800e73c <HAL_ADCEx_Calibration_Start>
  uint32_t cal_factor = HAL_ADCEx_Calibration_GetValue(&hadc1);
 80077d8:	0030      	movs	r0, r6
 80077da:	f007 f85f 	bl	800e89c <HAL_ADCEx_Calibration_GetValue>
 80077de:	0001      	movs	r1, r0
  HAL_ADCEx_Calibration_SetValue(&hadc1, cal_factor);
 80077e0:	0030      	movs	r0, r6
 80077e2:	f007 f861 	bl	800e8a8 <HAL_ADCEx_Calibration_SetValue>
  HAL_COMP_Start(&hcomp1);
 80077e6:	48be      	ldr	r0, [pc, #760]	@ (8007ae0 <main+0x794>)
 80077e8:	f007 f976 	bl	800ead8 <HAL_COMP_Start>
  uint32_t prevTick = HAL_GetTick();
 80077ec:	f006 faf6 	bl	800dddc <HAL_GetTick>
  Load_All_Config_From_BackupRegister(&device_config);
 80077f0:	4eaf      	ldr	r6, [pc, #700]	@ (8007ab0 <main+0x764>)
  uint32_t prevTick = HAL_GetTick();
 80077f2:	9007      	str	r0, [sp, #28]
  Load_All_Config_From_BackupRegister(&device_config);
 80077f4:	0030      	movs	r0, r6
 80077f6:	f7fe fe41 	bl	800647c <Load_All_Config_From_BackupRegister>
  meas_data_log_fast_init(Index_num);
 80077fa:	4bba      	ldr	r3, [pc, #744]	@ (8007ae4 <main+0x798>)
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 80077fc:	4cba      	ldr	r4, [pc, #744]	@ (8007ae8 <main+0x79c>)
  meas_data_log_fast_init(Index_num);
 80077fe:	8818      	ldrh	r0, [r3, #0]
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	f000 fd87 	bl	8008314 <meas_data_log_fast_init>
  printf("[DEBUG] rad_interval=%u, temp_interval=%u, rad_ratio=%u\r\n",
 8007806:	003a      	movs	r2, r7
 8007808:	327f      	adds	r2, #127	@ 0x7f
 800780a:	7811      	ldrb	r1, [r2, #0]
 800780c:	003a      	movs	r2, r7
 800780e:	3280      	adds	r2, #128	@ 0x80
 8007810:	7812      	ldrb	r2, [r2, #0]
 8007812:	4bb6      	ldr	r3, [pc, #728]	@ (8007aec <main+0x7a0>)
 8007814:	0212      	lsls	r2, r2, #8
 8007816:	430a      	orrs	r2, r1
 8007818:	0039      	movs	r1, r7
 800781a:	3181      	adds	r1, #129	@ 0x81
 800781c:	7809      	ldrb	r1, [r1, #0]
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	0409      	lsls	r1, r1, #16
 8007822:	4311      	orrs	r1, r2
 8007824:	003a      	movs	r2, r7
 8007826:	3282      	adds	r2, #130	@ 0x82
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	0612      	lsls	r2, r2, #24
 800782c:	430a      	orrs	r2, r1
 800782e:	0039      	movs	r1, r7
 8007830:	317b      	adds	r1, #123	@ 0x7b
 8007832:	7808      	ldrb	r0, [r1, #0]
 8007834:	0039      	movs	r1, r7
 8007836:	317c      	adds	r1, #124	@ 0x7c
 8007838:	7809      	ldrb	r1, [r1, #0]
 800783a:	0209      	lsls	r1, r1, #8
 800783c:	4301      	orrs	r1, r0
 800783e:	0038      	movs	r0, r7
 8007840:	307d      	adds	r0, #125	@ 0x7d
 8007842:	7800      	ldrb	r0, [r0, #0]
 8007844:	0400      	lsls	r0, r0, #16
 8007846:	4308      	orrs	r0, r1
 8007848:	0039      	movs	r1, r7
 800784a:	317e      	adds	r1, #126	@ 0x7e
 800784c:	7809      	ldrb	r1, [r1, #0]
 800784e:	0609      	lsls	r1, r1, #24
 8007850:	4301      	orrs	r1, r0
 8007852:	48a7      	ldr	r0, [pc, #668]	@ (8007af0 <main+0x7a4>)
 8007854:	f012 fa30 	bl	8019cb8 <iprintf>
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007858:	2180      	movs	r1, #128	@ 0x80
 800785a:	0020      	movs	r0, r4
 800785c:	0189      	lsls	r1, r1, #6
 800785e:	f007 fd4d 	bl	800f2fc <HAL_GPIO_ReadPin>
 8007862:	1e43      	subs	r3, r0, #1
 8007864:	4198      	sbcs	r0, r3
  printf("VBUS HAL_GPIO_ReadPin: %d\r\n", HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin));
 8007866:	2180      	movs	r1, #128	@ 0x80
  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007868:	4da2      	ldr	r5, [pc, #648]	@ (8007af4 <main+0x7a8>)
 800786a:	b2c0      	uxtb	r0, r0
 800786c:	7028      	strb	r0, [r5, #0]
  printf("VBUS HAL_GPIO_ReadPin: %d\r\n", HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin));
 800786e:	0189      	lsls	r1, r1, #6
 8007870:	0020      	movs	r0, r4
 8007872:	f007 fd43 	bl	800f2fc <HAL_GPIO_ReadPin>
 8007876:	4ba0      	ldr	r3, [pc, #640]	@ (8007af8 <main+0x7ac>)
 8007878:	0001      	movs	r1, r0
 800787a:	0018      	movs	r0, r3
 800787c:	f012 fa1c 	bl	8019cb8 <iprintf>
  printf("VBUS IDR: %d\r\n", (USB_VBUS_GPIO_Port->IDR & USB_VBUS_Pin) ? 1 : 0);
 8007880:	6921      	ldr	r1, [r4, #16]
 8007882:	489e      	ldr	r0, [pc, #632]	@ (8007afc <main+0x7b0>)
 8007884:	0489      	lsls	r1, r1, #18
 8007886:	0fc9      	lsrs	r1, r1, #31
 8007888:	f012 fa16 	bl	8019cb8 <iprintf>
  if (USB_State){ // 전력 상관 없을시 수정
 800788c:	782b      	ldrb	r3, [r5, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d02d      	beq.n	80078ee <main+0x5a2>
	  RTC_Disable_All_Wakeup();
 8007892:	f7fd ff05 	bl	80056a0 <RTC_Disable_All_Wakeup>
		  LCD_Clear_Display(LCD_data);
 8007896:	4c9a      	ldr	r4, [pc, #616]	@ (8007b00 <main+0x7b4>)
 8007898:	0020      	movs	r0, r4
 800789a:	f7fd fa2d 	bl	8004cf8 <LCD_Clear_Display>
		  LCD_Display_USB_Load(LCD_data);// Loading USB화면 // Loading USB화면
 800789e:	0020      	movs	r0, r4
 80078a0:	f7fd f8b2 	bl	8004a08 <LCD_Display_USB_Load>
		if(current_settings.mode_status == 0x03){ // Stop : 0x00  Start : 0x01  pause : 0x02  Over : 0x03
 80078a4:	003b      	movs	r3, r7
 80078a6:	3396      	adds	r3, #150	@ 0x96
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d11a      	bne.n	80078e4 <main+0x598>
		RAD_Fatfs_MountOnly();
 80078ae:	f001 fe0f 	bl	80094d0 <RAD_Fatfs_MountOnly>
      tmp.mean_kinetic_temp = 0.0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	9313      	str	r3, [sp, #76]	@ 0x4c
      tmp.start_time = start_time;
 80078b6:	2300      	movs	r3, #0
 80078b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80078ba:	9315      	str	r3, [sp, #84]	@ 0x54
      tmp.stop_time = stop_time;
 80078bc:	9316      	str	r3, [sp, #88]	@ 0x58
      tmp.data_points_temp_count = idx_temp;
 80078be:	4b91      	ldr	r3, [pc, #580]	@ (8007b04 <main+0x7b8>)
	 csv_gen_template_file(&current_settings);
 80078c0:	0038      	movs	r0, r7
      tmp.data_points_temp_count = idx_temp;
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	9318      	str	r3, [sp, #96]	@ 0x60
	 csv_gen_template_file(&current_settings);
 80078c6:	f003 fd15 	bl	800b2f4 <csv_gen_template_file>
     if(current_settings.report_format != 0x00){
 80078ca:	003b      	movs	r3, r7
 80078cc:	3383      	adds	r3, #131	@ 0x83
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <main+0x598>
    pdf_gen_template_file();
 80078d4:	f004 fa0a 	bl	800bcec <pdf_gen_template_file>
    pdf_append_all_flash_log_entries();
 80078d8:	f004 fa70 	bl	800bdbc <pdf_append_all_flash_log_entries>
    pdf_gen_completed_report(&tmp,&cfg);
 80078dc:	a91d      	add	r1, sp, #116	@ 0x74
 80078de:	a80e      	add	r0, sp, #56	@ 0x38
 80078e0:	f004 fafa 	bl	800bed8 <pdf_gen_completed_report>
    RAD_USBX_Device_Init();
 80078e4:	f000 fe3e 	bl	8008564 <RAD_USBX_Device_Init>
    usb_inited = 1;
 80078e8:	2201      	movs	r2, #1
 80078ea:	4b87      	ldr	r3, [pc, #540]	@ (8007b08 <main+0x7bc>)
 80078ec:	701a      	strb	r2, [r3, #0]
	  if (USB_State){
 80078ee:	4b81      	ldr	r3, [pc, #516]	@ (8007af4 <main+0x7a8>)
 80078f0:	9306      	str	r3, [sp, #24]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d055      	beq.n	80079a4 <main+0x658>
		  if (!usb_inited){
 80078f8:	4b83      	ldr	r3, [pc, #524]	@ (8007b08 <main+0x7bc>)
 80078fa:	4d81      	ldr	r5, [pc, #516]	@ (8007b00 <main+0x7b4>)
 80078fc:	781c      	ldrb	r4, [r3, #0]
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d12c      	bne.n	800795c <main+0x610>
			      RTC_Disable_All_Wakeup();
 8007902:	f7fd fecd 	bl	80056a0 <RTC_Disable_All_Wakeup>
				  LCD_Clear_Display(LCD_data);
 8007906:	0028      	movs	r0, r5
 8007908:	f7fd f9f6 	bl	8004cf8 <LCD_Clear_Display>
				  LCD_Display_USB_Load(LCD_data);// Loading USB화면// Loading USB화면
 800790c:	0028      	movs	r0, r5
 800790e:	f7fd f87b 	bl	8004a08 <LCD_Display_USB_Load>
			if(current_settings.mode_status == 0x03){ // Stop : 0x00  Start : 0x01  pause : 0x02  Over : 0x03
 8007912:	003b      	movs	r3, r7
 8007914:	3396      	adds	r3, #150	@ 0x96
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d11a      	bne.n	8007952 <main+0x606>
			RAD_Fatfs_MountOnly();
 800791c:	f001 fdd8 	bl	80094d0 <RAD_Fatfs_MountOnly>
	        tmp.mean_kinetic_temp = 0.0;
 8007920:	2300      	movs	r3, #0
 8007922:	9313      	str	r3, [sp, #76]	@ 0x4c
	        tmp.data_points_temp_count  = idx_temp;
 8007924:	4b77      	ldr	r3, [pc, #476]	@ (8007b04 <main+0x7b8>)
		 csv_gen_template_file(&current_settings);
 8007926:	0038      	movs	r0, r7
	        tmp.data_points_temp_count  = idx_temp;
 8007928:	881b      	ldrh	r3, [r3, #0]
	        tmp.start_time = start_time;
 800792a:	9414      	str	r4, [sp, #80]	@ 0x50
	        tmp.data_points_temp_count  = idx_temp;
 800792c:	9318      	str	r3, [sp, #96]	@ 0x60
	        tmp.start_time = start_time;
 800792e:	9415      	str	r4, [sp, #84]	@ 0x54
	        tmp.stop_time = stop_time;
 8007930:	9416      	str	r4, [sp, #88]	@ 0x58
	        tmp.data_points_radiation_count = 0;
 8007932:	9419      	str	r4, [sp, #100]	@ 0x64
		 csv_gen_template_file(&current_settings);
 8007934:	f003 fcde 	bl	800b2f4 <csv_gen_template_file>
	     if(current_settings.report_format != 0x00){
 8007938:	003b      	movs	r3, r7
 800793a:	3383      	adds	r3, #131	@ 0x83
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <main+0x606>
	    pdf_gen_template_file();
 8007942:	f004 f9d3 	bl	800bcec <pdf_gen_template_file>
	    pdf_append_all_flash_log_entries();
 8007946:	f004 fa39 	bl	800bdbc <pdf_append_all_flash_log_entries>
	    pdf_gen_completed_report(&tmp,&cfg);
 800794a:	a91d      	add	r1, sp, #116	@ 0x74
 800794c:	a80e      	add	r0, sp, #56	@ 0x38
 800794e:	f004 fac3 	bl	800bed8 <pdf_gen_completed_report>
		  RAD_USBX_Device_Init();
 8007952:	f000 fe07 	bl	8008564 <RAD_USBX_Device_Init>
		  usb_inited = 1;
 8007956:	2201      	movs	r2, #1
 8007958:	4b6b      	ldr	r3, [pc, #428]	@ (8007b08 <main+0x7bc>)
 800795a:	701a      	strb	r2, [r3, #0]
		  RAD_USBX_Device_Process();
 800795c:	f000 fe44 	bl	80085e8 <RAD_USBX_Device_Process>
		  LCD_Clear_Display(LCD_data);
 8007960:	0028      	movs	r0, r5
 8007962:	f7fd f9c9 	bl	8004cf8 <LCD_Clear_Display>
		  LCD_Display_USB(LCD_data);
 8007966:	0028      	movs	r0, r5
 8007968:	f7fd f812 	bl	8004990 <LCD_Display_USB>
		  USB_HID_Receive(USB_rev_buff, &len);
 800796c:	4967      	ldr	r1, [pc, #412]	@ (8007b0c <main+0x7c0>)
 800796e:	4868      	ldr	r0, [pc, #416]	@ (8007b10 <main+0x7c4>)
 8007970:	f000 fec8 	bl	8008704 <USB_HID_Receive>
		  if (usbx_host_req_records == 1) {
 8007974:	4b67      	ldr	r3, [pc, #412]	@ (8007b14 <main+0x7c8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d113      	bne.n	80079a4 <main+0x658>
		      if ((HAL_GetTick() - usb_send_record_prevTick) >= USB_HID_SEND_RECORDS_SPEED_MS) {
 800797c:	f006 fa2e 	bl	800dddc <HAL_GetTick>
 8007980:	4d65      	ldr	r5, [pc, #404]	@ (8007b18 <main+0x7cc>)
 8007982:	682b      	ldr	r3, [r5, #0]
 8007984:	1ac0      	subs	r0, r0, r3
 8007986:	2802      	cmp	r0, #2
 8007988:	d90c      	bls.n	80079a4 <main+0x658>
		          if (USB_HID_Send_Record(cur_record_num) != 0) {
 800798a:	4c64      	ldr	r4, [pc, #400]	@ (8007b1c <main+0x7d0>)
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	b280      	uxth	r0, r0
 8007990:	f000 fe54 	bl	800863c <USB_HID_Send_Record>
 8007994:	2800      	cmp	r0, #0
 8007996:	d102      	bne.n	800799e <main+0x652>
		              cur_record_num++;
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	3301      	adds	r3, #1
 800799c:	6023      	str	r3, [r4, #0]
		          usb_send_record_prevTick = HAL_GetTick();
 800799e:	f006 fa1d 	bl	800dddc <HAL_GetTick>
 80079a2:	6028      	str	r0, [r5, #0]
	  if (HAL_GetTick() - prevTick >= 1000)
 80079a4:	f006 fa1a 	bl	800dddc <HAL_GetTick>
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	1ac0      	subs	r0, r0, r3
 80079ac:	23fa      	movs	r3, #250	@ 0xfa
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4298      	cmp	r0, r3
 80079b2:	d39c      	bcc.n	80078ee <main+0x5a2>
		  Press_Action();
 80079b4:	f7fe ff5c 	bl	8006870 <Press_Action>
		  Read_Temp();
 80079b8:	f7fd fdfc 	bl	80055b4 <Read_Temp>
		  if (USB_State){
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d100      	bne.n	80079c6 <main+0x67a>
 80079c4:	e0cb      	b.n	8007b5e <main+0x812>
			  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 80079c6:	2180      	movs	r1, #128	@ 0x80
 80079c8:	4847      	ldr	r0, [pc, #284]	@ (8007ae8 <main+0x79c>)
 80079ca:	0189      	lsls	r1, r1, #6
 80079cc:	f007 fc96 	bl	800f2fc <HAL_GPIO_ReadPin>
 80079d0:	1e43      	subs	r3, r0, #1
 80079d2:	4198      	sbcs	r0, r3
 80079d4:	9b06      	ldr	r3, [sp, #24]
 80079d6:	b2c0      	uxtb	r0, r0
 80079d8:	7018      	strb	r0, [r3, #0]
			  if (!USB_State) {
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	b2dd      	uxtb	r5, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d114      	bne.n	8007a0c <main+0x6c0>
			     printf("USB non State!\r\n");
 80079e2:	484f      	ldr	r0, [pc, #316]	@ (8007b20 <main+0x7d4>)
 80079e4:	f012 f9d8 	bl	8019d98 <puts>
			     LCD_Clear_Display(LCD_data);
 80079e8:	4845      	ldr	r0, [pc, #276]	@ (8007b00 <main+0x7b4>)
 80079ea:	f7fd f985 	bl	8004cf8 <LCD_Clear_Display>
			  if(current_settings.start_mode == 0x00 || current_settings.start_mode == 0x01){
 80079ee:	003b      	movs	r3, r7
 80079f0:	336d      	adds	r3, #109	@ 0x6d
 80079f2:	7818      	ldrb	r0, [r3, #0]
 80079f4:	003b      	movs	r3, r7
 80079f6:	3396      	adds	r3, #150	@ 0x96
			     if(current_settings.mode_status == 0x00){
 80079f8:	781c      	ldrb	r4, [r3, #0]
			  if(current_settings.start_mode == 0x00 || current_settings.start_mode == 0x01){
 80079fa:	2801      	cmp	r0, #1
 80079fc:	d828      	bhi.n	8007a50 <main+0x704>
			     if(current_settings.mode_status == 0x00){
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	d116      	bne.n	8007a30 <main+0x6e4>
 	  	 		     Switch_Backup_reg(MODE_Stop);
 8007a02:	2002      	movs	r0, #2
 8007a04:	f7fe fa08 	bl	8005e18 <Switch_Backup_reg>
 	  	 		    First_Measure = 0;
 8007a08:	4b46      	ldr	r3, [pc, #280]	@ (8007b24 <main+0x7d8>)
   	  	 			 button_flag = false;
 8007a0a:	701c      	strb	r4, [r3, #0]
		  if (!usb_inited)
 8007a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8007b08 <main+0x7bc>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <main+0x6dc>
		  USB_State = HAL_GPIO_ReadPin(USB_VBUS_GPIO_Port, USB_VBUS_Pin);
 8007a14:	2180      	movs	r1, #128	@ 0x80
 8007a16:	4834      	ldr	r0, [pc, #208]	@ (8007ae8 <main+0x79c>)
 8007a18:	0189      	lsls	r1, r1, #6
 8007a1a:	f007 fc6f 	bl	800f2fc <HAL_GPIO_ReadPin>
 8007a1e:	1e43      	subs	r3, r0, #1
 8007a20:	4198      	sbcs	r0, r3
 8007a22:	4b34      	ldr	r3, [pc, #208]	@ (8007af4 <main+0x7a8>)
 8007a24:	b2c0      	uxtb	r0, r0
 8007a26:	7018      	strb	r0, [r3, #0]
	  	  prevTick = HAL_GetTick();
 8007a28:	f006 f9d8 	bl	800dddc <HAL_GetTick>
 8007a2c:	9007      	str	r0, [sp, #28]
 8007a2e:	e75e      	b.n	80078ee <main+0x5a2>
			     else if (current_settings.mode_status == 0x01 || current_settings.mode_status == 0x02){
 8007a30:	1e63      	subs	r3, r4, #1
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d808      	bhi.n	8007a48 <main+0x6fc>
			       Set_ModeStatus(mode_internal_backup_pause);
 8007a36:	2002      	movs	r0, #2
 8007a38:	f002 f838 	bl	8009aac <Set_ModeStatus>
	  	 		    Switch_Backup_reg(MODE_Pause);
 8007a3c:	2004      	movs	r0, #4
		  	 		    Switch_Backup_reg(MODE_End);
 8007a3e:	f7fe f9eb 	bl	8005e18 <Switch_Backup_reg>
		  	 		    First_Measure = 0;
 8007a42:	4b38      	ldr	r3, [pc, #224]	@ (8007b24 <main+0x7d8>)
	   	  	 			 button_flag = false;
 8007a44:	701d      	strb	r5, [r3, #0]
	   	  	 	     	 Tick_Save = 0;
 8007a46:	e7e1      	b.n	8007a0c <main+0x6c0>
			     else if (current_settings.mode_status == 0x03){
 8007a48:	2c03      	cmp	r4, #3
 8007a4a:	d1df      	bne.n	8007a0c <main+0x6c0>
		  	 		    Switch_Backup_reg(MODE_End);
 8007a4c:	2007      	movs	r0, #7
 8007a4e:	e7f6      	b.n	8007a3e <main+0x6f2>
				  if(current_settings.mode_status == 0x00){ // SW Start
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	d1db      	bne.n	8007a0c <main+0x6c0>
	  	 		      if(current_settings.start_mode == 0x03){ // SW Delay Start 전체
 8007a54:	2803      	cmp	r0, #3
 8007a56:	d16d      	bne.n	8007b34 <main+0x7e8>
	  	 				if (current_settings.start_delay > 0){// SW Start Delay
 8007a58:	003a      	movs	r2, r7
 8007a5a:	003b      	movs	r3, r7
 8007a5c:	326f      	adds	r2, #111	@ 0x6f
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	336e      	adds	r3, #110	@ 0x6e
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	0212      	lsls	r2, r2, #8
 8007a66:	431a      	orrs	r2, r3
 8007a68:	003b      	movs	r3, r7
 8007a6a:	3370      	adds	r3, #112	@ 0x70
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	4313      	orrs	r3, r2
 8007a72:	003a      	movs	r2, r7
 8007a74:	3271      	adds	r2, #113	@ 0x71
 8007a76:	7815      	ldrb	r5, [r2, #0]
 8007a78:	062d      	lsls	r5, r5, #24
 8007a7a:	431d      	orrs	r5, r3
 8007a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007b28 <main+0x7dc>)
 8007a7e:	9306      	str	r3, [sp, #24]
 8007a80:	4b2a      	ldr	r3, [pc, #168]	@ (8007b2c <main+0x7e0>)
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	d006      	beq.n	8007a94 <main+0x748>
	  	 				Switch_Backup_reg(Mode_Start_Delay);
 8007a86:	3003      	adds	r0, #3
 8007a88:	f7fe f9c6 	bl	8005e18 <Switch_Backup_reg>
   	  	 		     SW_count = 0;
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	701c      	strb	r4, [r3, #0]
   	  	 			 button_flag = false;
 8007a90:	9b07      	ldr	r3, [sp, #28]
 8007a92:	e7ba      	b.n	8007a0a <main+0x6be>
	   	  	 			 Switch_Backup_reg(MODE_Start);
 8007a94:	f7fe f9c0 	bl	8005e18 <Switch_Backup_reg>
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007a98:	f7fe fba4 	bl	80061e4 <Load_IndexNum_From_Backup>
	   	  	 			 Interval_LCD_Count = 1;
 8007a9c:	2201      	movs	r2, #1
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007a9e:	9b05      	ldr	r3, [sp, #20]
 8007aa0:	8018      	strh	r0, [r3, #0]
	   	  	 			 Interval_LCD_Count = 1;
 8007aa2:	4b23      	ldr	r3, [pc, #140]	@ (8007b30 <main+0x7e4>)
 8007aa4:	601a      	str	r2, [r3, #0]
	   	  	 		     SW_count = 0;
 8007aa6:	9b06      	ldr	r3, [sp, #24]
 8007aa8:	701d      	strb	r5, [r3, #0]
	   	  	 			 button_flag = false;
 8007aaa:	9b07      	ldr	r3, [sp, #28]
 8007aac:	e7ca      	b.n	8007a44 <main+0x6f8>
 8007aae:	46c0      	nop			@ (mov r8, r8)
 8007ab0:	20000b50 	.word	0x20000b50
 8007ab4:	7fff8000 	.word	0x7fff8000
 8007ab8:	00022200 	.word	0x00022200
 8007abc:	0801d391 	.word	0x0801d391
 8007ac0:	0801d3b8 	.word	0x0801d3b8
 8007ac4:	20000500 	.word	0x20000500
 8007ac8:	0801d3f5 	.word	0x0801d3f5
 8007acc:	0801d401 	.word	0x0801d401
 8007ad0:	0801d40f 	.word	0x0801d40f
 8007ad4:	20002bac 	.word	0x20002bac
 8007ad8:	0801d41e 	.word	0x0801d41e
 8007adc:	50000400 	.word	0x50000400
 8007ae0:	20000abc 	.word	0x20000abc
 8007ae4:	2000004c 	.word	0x2000004c
 8007ae8:	50000800 	.word	0x50000800
 8007aec:	2000000a 	.word	0x2000000a
 8007af0:	0801d42e 	.word	0x0801d42e
 8007af4:	20000536 	.word	0x20000536
 8007af8:	0801d468 	.word	0x0801d468
 8007afc:	0801d484 	.word	0x0801d484
 8007b00:	20000514 	.word	0x20000514
 8007b04:	200004fe 	.word	0x200004fe
 8007b08:	200004e0 	.word	0x200004e0
 8007b0c:	2000052c 	.word	0x2000052c
 8007b10:	2000000c 	.word	0x2000000c
 8007b14:	20000b74 	.word	0x20000b74
 8007b18:	200004dc 	.word	0x200004dc
 8007b1c:	200004f4 	.word	0x200004f4
 8007b20:	0801d493 	.word	0x0801d493
 8007b24:	20000534 	.word	0x20000534
 8007b28:	20000537 	.word	0x20000537
 8007b2c:	20000538 	.word	0x20000538
 8007b30:	2000053c 	.word	0x2000053c
	  	 			  else if(current_settings.start_mode == 0x02){
 8007b34:	2802      	cmp	r0, #2
 8007b36:	d10d      	bne.n	8007b54 <main+0x808>
	   	  	 			 Switch_Backup_reg(MODE_Start);
 8007b38:	3001      	adds	r0, #1
	   	  	 			 Switch_Backup_reg(Mode_Start_Delay);
 8007b3a:	f7fe f96d 	bl	8005e18 <Switch_Backup_reg>
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007b3e:	f7fe fb51 	bl	80061e4 <Load_IndexNum_From_Backup>
	   	  	 			 Interval_LCD_Count = 1;
 8007b42:	2201      	movs	r2, #1
	   	  	 			 Index_num = Load_IndexNum_From_Backup();
 8007b44:	9b05      	ldr	r3, [sp, #20]
 8007b46:	8018      	strh	r0, [r3, #0]
	   	  	 			 Interval_LCD_Count = 1;
 8007b48:	4bd0      	ldr	r3, [pc, #832]	@ (8007e8c <main+0xb40>)
 8007b4a:	601a      	str	r2, [r3, #0]
	   	  	 		     SW_count = 0;
 8007b4c:	4bd0      	ldr	r3, [pc, #832]	@ (8007e90 <main+0xb44>)
 8007b4e:	701c      	strb	r4, [r3, #0]
	   	  	 			 button_flag = false;
 8007b50:	4bd0      	ldr	r3, [pc, #832]	@ (8007e94 <main+0xb48>)
 8007b52:	e75a      	b.n	8007a0a <main+0x6be>
	  	 			  else if(current_settings.start_mode == 0x04){ // Target time start mode
 8007b54:	2804      	cmp	r0, #4
 8007b56:	d000      	beq.n	8007b5a <main+0x80e>
 8007b58:	e758      	b.n	8007a0c <main+0x6c0>
	   	  	 			 Switch_Backup_reg(Mode_Start_Delay);
 8007b5a:	3002      	adds	r0, #2
 8007b5c:	e7ed      	b.n	8007b3a <main+0x7ee>
			  if (First_Measure>1){
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4ccd      	ldr	r4, [pc, #820]	@ (8007e98 <main+0xb4c>)
 8007b62:	4dce      	ldr	r5, [pc, #824]	@ (8007e9c <main+0xb50>)
 8007b64:	56e3      	ldrsb	r3, [r4, r3]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	dc00      	bgt.n	8007b6c <main+0x820>
 8007b6a:	e21a      	b.n	8007fa2 <main+0xc56>
			  if (Meas_Mode == 0){ // ////////////////////////////////////////Boot
 8007b6c:	7828      	ldrb	r0, [r5, #0]
 8007b6e:	2806      	cmp	r0, #6
 8007b70:	d816      	bhi.n	8007ba0 <main+0x854>
 8007b72:	f7f8 faef 	bl	8000154 <__gnu_thumb1_case_uhi>
 8007b76:	0007      	.short	0x0007
 8007b78:	00610019 	.word	0x00610019
 8007b7c:	00fb00f4 	.word	0x00fb00f4
 8007b80:	01b10180 	.word	0x01b10180
				  printf("Boot\r\n");
 8007b84:	48c6      	ldr	r0, [pc, #792]	@ (8007ea0 <main+0xb54>)
 8007b86:	f012 f907 	bl	8019d98 <puts>
				  RTC_Disable_All_Wakeup();
 8007b8a:	f7fd fd89 	bl	80056a0 <RTC_Disable_All_Wakeup>
				  meas_data_log_erase();  // USB Boot
 8007b8e:	f000 fc01 	bl	8008394 <meas_data_log_erase>
				  RAD_USBX_Clean_Vol();
 8007b92:	f001 fc8f 	bl	80094b4 <RAD_USBX_Clean_Vol>
				  RAD_USBX_Fatfs_format_disk();
 8007b96:	f001 fc29 	bl	80093ec <RAD_USBX_Fatfs_format_disk>
				  Switch_Backup_reg(MODE_Stop);
 8007b9a:	2002      	movs	r0, #2
 8007b9c:	f7fe f93c 	bl	8005e18 <Switch_Backup_reg>
			  HAL_LCD_UpdateDisplayRequest(& hlcd);
 8007ba0:	48c0      	ldr	r0, [pc, #768]	@ (8007ea4 <main+0xb58>)
 8007ba2:	f007 fc1c 	bl	800f3de <HAL_LCD_UpdateDisplayRequest>
 8007ba6:	e731      	b.n	8007a0c <main+0x6c0>
				  Short_Measure();
 8007ba8:	f7fe ffac 	bl	8006b04 <Short_Measure>
				  switch (LCD_mode) {
 8007bac:	4dbe      	ldr	r5, [pc, #760]	@ (8007ea8 <main+0xb5c>)
 8007bae:	4cbf      	ldr	r4, [pc, #764]	@ (8007eac <main+0xb60>)
 8007bb0:	782b      	ldrb	r3, [r5, #0]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d01e      	beq.n	8007bf4 <main+0x8a8>
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d020      	beq.n	8007bfc <main+0x8b0>
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d122      	bne.n	8007c04 <main+0x8b8>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007bbe:	003b      	movs	r3, r7
 8007bc0:	3394      	adds	r3, #148	@ 0x94
 8007bc2:	781a      	ldrb	r2, [r3, #0]
 8007bc4:	4bba      	ldr	r3, [pc, #744]	@ (8007eb0 <main+0xb64>)
 8007bc6:	0021      	movs	r1, r4
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f7fc fa81 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007bce:	003b      	movs	r3, r7
 8007bd0:	3395      	adds	r3, #149	@ 0x95
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	4bb7      	ldr	r3, [pc, #732]	@ (8007eb4 <main+0xb68>)
 8007bd6:	49b8      	ldr	r1, [pc, #736]	@ (8007eb8 <main+0xb6c>)
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f7fc f847 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007bde:	2000      	movs	r0, #0
 8007be0:	0021      	movs	r1, r4
 8007be2:	f7fc fe99 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Stop_Display(LCD_data);
 8007be6:	0020      	movs	r0, r4
 8007be8:	f7fd f830 	bl	8004c4c <Small_Stop_Display>
				  printf("Stop\r\n");
 8007bec:	48b3      	ldr	r0, [pc, #716]	@ (8007ebc <main+0xb70>)
				  printf("Start(Button)\r\n");
 8007bee:	f012 f8d3 	bl	8019d98 <puts>
 8007bf2:	e7d5      	b.n	8007ba0 <main+0x854>
				        	 LCD_Display_date(LCD_data);
 8007bf4:	0020      	movs	r0, r4
 8007bf6:	f7fc fd71 	bl	80046dc <LCD_Display_date>
 8007bfa:	e7f0      	b.n	8007bde <main+0x892>
				        	 LCD_Display_Time(LCD_data);
 8007bfc:	0020      	movs	r0, r4
 8007bfe:	f7fc fdfd 	bl	80047fc <LCD_Display_Time>
				        	 LCD_Display_Battery(0, LCD_data);
 8007c02:	e7ec      	b.n	8007bde <main+0x892>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007c04:	003b      	movs	r3, r7
 8007c06:	3394      	adds	r3, #148	@ 0x94
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	4ba9      	ldr	r3, [pc, #676]	@ (8007eb0 <main+0xb64>)
 8007c0c:	0021      	movs	r1, r4
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	f7fc fa5e 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007c14:	003b      	movs	r3, r7
 8007c16:	3395      	adds	r3, #149	@ 0x95
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	4ba6      	ldr	r3, [pc, #664]	@ (8007eb4 <main+0xb68>)
 8007c1c:	49a6      	ldr	r1, [pc, #664]	@ (8007eb8 <main+0xb6c>)
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	f7fc f824 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007c24:	0021      	movs	r1, r4
 8007c26:	2000      	movs	r0, #0
 8007c28:	f7fc fe76 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Stop_Display(LCD_data);
 8007c2c:	0020      	movs	r0, r4
 8007c2e:	f7fd f80d 	bl	8004c4c <Small_Stop_Display>
				        	 LCD_mode = 1;
 8007c32:	2301      	movs	r3, #1
 8007c34:	702b      	strb	r3, [r5, #0]
				        	 break;
 8007c36:	e7d9      	b.n	8007bec <main+0x8a0>
				  Interval_Measure();
 8007c38:	f7ff fa20 	bl	800707c <Interval_Measure>
				  if (Interval_LCD_Count>0){
 8007c3c:	4b93      	ldr	r3, [pc, #588]	@ (8007e8c <main+0xb40>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	d03a      	beq.n	8007cba <main+0x96e>
					  if(Interval_LCD_Count<=7 ){
 8007c44:	2a07      	cmp	r2, #7
 8007c46:	d900      	bls.n	8007c4a <main+0x8fe>
 8007c48:	e086      	b.n	8007d58 <main+0xa0c>
				  switch (LCD_mode) {
 8007c4a:	4d97      	ldr	r5, [pc, #604]	@ (8007ea8 <main+0xb5c>)
 8007c4c:	4c97      	ldr	r4, [pc, #604]	@ (8007eac <main+0xb60>)
 8007c4e:	7828      	ldrb	r0, [r5, #0]
 8007c50:	3801      	subs	r0, #1
 8007c52:	2806      	cmp	r0, #6
 8007c54:	d863      	bhi.n	8007d1e <main+0x9d2>
 8007c56:	f7f8 fa69 	bl	800012c <__gnu_thumb1_case_uqi>
 8007c5a:	1c04      	.short	0x1c04
 8007c5c:	5a4b3632 	.word	0x5a4b3632
 8007c60:	5e          	.byte	0x5e
 8007c61:	00          	.byte	0x00
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007c62:	003b      	movs	r3, r7
 8007c64:	3394      	adds	r3, #148	@ 0x94
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	4b91      	ldr	r3, [pc, #580]	@ (8007eb0 <main+0xb64>)
 8007c6a:	0021      	movs	r1, r4
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f7fc fa2f 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007c72:	003b      	movs	r3, r7
 8007c74:	3395      	adds	r3, #149	@ 0x95
 8007c76:	781a      	ldrb	r2, [r3, #0]
 8007c78:	4b8e      	ldr	r3, [pc, #568]	@ (8007eb4 <main+0xb68>)
 8007c7a:	498f      	ldr	r1, [pc, #572]	@ (8007eb8 <main+0xb6c>)
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	f7fb fff5 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007c82:	0021      	movs	r1, r4
 8007c84:	2000      	movs	r0, #0
 8007c86:	f7fc fe47 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Start_Display(LCD_data);
 8007c8a:	0020      	movs	r0, r4
 8007c8c:	f7fc ffee 	bl	8004c6c <Small_Start_Display>
				        	 Mark_Display(LCD_data);
 8007c90:	e00c      	b.n	8007cac <main+0x960>
				        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b8a      	ldr	r3, [pc, #552]	@ (8007ec0 <main+0xb74>)
 8007c96:	8818      	ldrh	r0, [r3, #0]
 8007c98:	0021      	movs	r1, r4
 8007c9a:	f7fd fa45 	bl	8005128 <LCD_Display_LP>
				        	 Small_Start_Display(LCD_data);
 8007c9e:	0020      	movs	r0, r4
 8007ca0:	f7fc ffe4 	bl	8004c6c <Small_Start_Display>
				        	 LCD_Display_Battery(0, LCD_data);
 8007ca4:	0021      	movs	r1, r4
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f7fc fe36 	bl	8004918 <LCD_Display_Battery>
				        	 Mark_Display(LCD_data);
 8007cac:	0020      	movs	r0, r4
 8007cae:	f7fc ffed 	bl	8004c8c <Mark_Display>
				  Interval_LCD_Count++;
 8007cb2:	4a76      	ldr	r2, [pc, #472]	@ (8007e8c <main+0xb40>)
 8007cb4:	6813      	ldr	r3, [r2, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6013      	str	r3, [r2, #0]
				  printf("Start (Interval)\r\n");
 8007cba:	4882      	ldr	r0, [pc, #520]	@ (8007ec4 <main+0xb78>)
 8007cbc:	e797      	b.n	8007bee <main+0x8a2>
				        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8007cbe:	4b82      	ldr	r3, [pc, #520]	@ (8007ec8 <main+0xb7c>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	8818      	ldrh	r0, [r3, #0]
 8007cc4:	e7e8      	b.n	8007c98 <main+0x94c>
				        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	5ef0      	ldrsh	r0, [r6, r3]
 8007cca:	f7f9 fd2f 	bl	800172c <__aeabi_i2f>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	0021      	movs	r1, r4
 8007cd2:	f7fc fa4d 	bl	8004170 <LCD_Display_Temp_MinMax>
				        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 8007cd6:	4d78      	ldr	r5, [pc, #480]	@ (8007eb8 <main+0xb6c>)
 8007cd8:	6870      	ldr	r0, [r6, #4]
 8007cda:	210a      	movs	r1, #10
 8007cdc:	f7f8 fa44 	bl	8000168 <__udivsi3>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	0029      	movs	r1, r5
 8007ce4:	f7fb ffc2 	bl	8003c6c <LCD_Display_Dose>
				        	 Max_Display(LCD_data);
 8007ce8:	0020      	movs	r0, r4
 8007cea:	f7fc ffe5 	bl	8004cb8 <Max_Display>
				        	 Small_Start_Display(LCD_data);
 8007cee:	e7d6      	b.n	8007c9e <main+0x952>
				        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	5ef0      	ldrsh	r0, [r6, r3]
 8007cf4:	f7f9 fd1a 	bl	800172c <__aeabi_i2f>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	0021      	movs	r1, r4
 8007cfc:	f7fc fa38 	bl	8004170 <LCD_Display_Temp_MinMax>
				        	 Blank_Dose_Display(LCD_data);
 8007d00:	0020      	movs	r0, r4
 8007d02:	f7fc feff 	bl	8004b04 <Blank_Dose_Display>
				        	 Min_Display(LCD_data);
 8007d06:	0020      	movs	r0, r4
 8007d08:	f7fc ffe6 	bl	8004cd8 <Min_Display>
				        	 Small_Start_Display(LCD_data);
 8007d0c:	e7c7      	b.n	8007c9e <main+0x952>
				        	 LCD_Display_date(LCD_data);
 8007d0e:	0020      	movs	r0, r4
 8007d10:	f7fc fce4 	bl	80046dc <LCD_Display_date>
				        	 LCD_Display_Battery(0, LCD_data);
 8007d14:	e7b5      	b.n	8007c82 <main+0x936>
				        	 LCD_Display_Time(LCD_data);
 8007d16:	0020      	movs	r0, r4
 8007d18:	f7fc fd70 	bl	80047fc <LCD_Display_Time>
 8007d1c:	e7b1      	b.n	8007c82 <main+0x936>
				        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007d1e:	003b      	movs	r3, r7
 8007d20:	3394      	adds	r3, #148	@ 0x94
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	4b62      	ldr	r3, [pc, #392]	@ (8007eb0 <main+0xb64>)
 8007d26:	0021      	movs	r1, r4
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	f7fc f9d1 	bl	80040d0 <LCD_Display_Temp>
				        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007d2e:	003b      	movs	r3, r7
 8007d30:	3395      	adds	r3, #149	@ 0x95
 8007d32:	781a      	ldrb	r2, [r3, #0]
 8007d34:	4b5f      	ldr	r3, [pc, #380]	@ (8007eb4 <main+0xb68>)
 8007d36:	4960      	ldr	r1, [pc, #384]	@ (8007eb8 <main+0xb6c>)
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	f7fb ff97 	bl	8003c6c <LCD_Display_Dose>
				        	 LCD_Display_Battery(0, LCD_data);
 8007d3e:	0021      	movs	r1, r4
 8007d40:	2000      	movs	r0, #0
 8007d42:	f7fc fde9 	bl	8004918 <LCD_Display_Battery>
				        	 Small_Start_Display(LCD_data);
 8007d46:	0020      	movs	r0, r4
 8007d48:	f7fc ff90 	bl	8004c6c <Small_Start_Display>
				        	 Mark_Display(LCD_data);
 8007d4c:	0020      	movs	r0, r4
 8007d4e:	f7fc ff9d 	bl	8004c8c <Mark_Display>
				        	 LCD_mode = 1;
 8007d52:	2301      	movs	r3, #1
 8007d54:	702b      	strb	r3, [r5, #0]
				        	 break;
 8007d56:	e7ac      	b.n	8007cb2 <main+0x966>
						  Interval_LCD_Count = 0;
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e7ad      	b.n	8007cba <main+0x96e>
				   Short_Measure();
 8007d5e:	f7fe fed1 	bl	8006b04 <Short_Measure>
				   LCD_Display_PauseMode(LCD_data);
 8007d62:	4852      	ldr	r0, [pc, #328]	@ (8007eac <main+0xb60>)
 8007d64:	f7fc ff2c 	bl	8004bc0 <LCD_Display_PauseMode>
				  printf("Pause\r\n");
 8007d68:	4858      	ldr	r0, [pc, #352]	@ (8007ecc <main+0xb80>)
 8007d6a:	e740      	b.n	8007bee <main+0x8a2>
				  Short_Measure();
 8007d6c:	f7fe feca 	bl	8006b04 <Short_Measure>
				  switch (LCD_mode) {
 8007d70:	4d4d      	ldr	r5, [pc, #308]	@ (8007ea8 <main+0xb5c>)
 8007d72:	4c4e      	ldr	r4, [pc, #312]	@ (8007eac <main+0xb60>)
 8007d74:	7828      	ldrb	r0, [r5, #0]
 8007d76:	3801      	subs	r0, #1
 8007d78:	2806      	cmp	r0, #6
 8007d7a:	d85f      	bhi.n	8007e3c <main+0xaf0>
 8007d7c:	f7f8 f9d6 	bl	800012c <__gnu_thumb1_case_uqi>
 8007d80:	322e1c04 	.word	0x322e1c04
 8007d84:	5647      	.short	0x5647
 8007d86:	5a          	.byte	0x5a
 8007d87:	00          	.byte	0x00
			        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007d88:	003b      	movs	r3, r7
 8007d8a:	3394      	adds	r3, #148	@ 0x94
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	4b48      	ldr	r3, [pc, #288]	@ (8007eb0 <main+0xb64>)
 8007d90:	0021      	movs	r1, r4
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	f7fc f99c 	bl	80040d0 <LCD_Display_Temp>
			        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007d98:	003b      	movs	r3, r7
 8007d9a:	3395      	adds	r3, #149	@ 0x95
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	4b45      	ldr	r3, [pc, #276]	@ (8007eb4 <main+0xb68>)
 8007da0:	4945      	ldr	r1, [pc, #276]	@ (8007eb8 <main+0xb6c>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	f7fb ff62 	bl	8003c6c <LCD_Display_Dose>
			        	 LCD_Display_Battery(0, LCD_data);
 8007da8:	0021      	movs	r1, r4
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7fc fdb4 	bl	8004918 <LCD_Display_Battery>
			        	 Small_Start_Display(LCD_data);
 8007db0:	0020      	movs	r0, r4
 8007db2:	f7fc ff5b 	bl	8004c6c <Small_Start_Display>
			        	 Mark_Display(LCD_data);
 8007db6:	e00c      	b.n	8007dd2 <main+0xa86>
			        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8007db8:	2200      	movs	r2, #0
 8007dba:	4b41      	ldr	r3, [pc, #260]	@ (8007ec0 <main+0xb74>)
 8007dbc:	8818      	ldrh	r0, [r3, #0]
 8007dbe:	0021      	movs	r1, r4
 8007dc0:	f7fd f9b2 	bl	8005128 <LCD_Display_LP>
			        	 Small_Start_Display(LCD_data);
 8007dc4:	0020      	movs	r0, r4
 8007dc6:	f7fc ff51 	bl	8004c6c <Small_Start_Display>
			        	 LCD_Display_Battery(0, LCD_data);
 8007dca:	0021      	movs	r1, r4
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f7fc fda3 	bl	8004918 <LCD_Display_Battery>
			        	 Mark_Display(LCD_data);
 8007dd2:	0020      	movs	r0, r4
 8007dd4:	f7fc ff5a 	bl	8004c8c <Mark_Display>
				  printf("Start(Button)\r\n");
 8007dd8:	483d      	ldr	r0, [pc, #244]	@ (8007ed0 <main+0xb84>)
 8007dda:	e708      	b.n	8007bee <main+0x8a2>
			        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 8007ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8007ec8 <main+0xb7c>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	8818      	ldrh	r0, [r3, #0]
 8007de2:	e7ec      	b.n	8007dbe <main+0xa72>
			        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 8007de4:	2300      	movs	r3, #0
 8007de6:	5ef0      	ldrsh	r0, [r6, r3]
 8007de8:	f7f9 fca0 	bl	800172c <__aeabi_i2f>
 8007dec:	2200      	movs	r2, #0
 8007dee:	0021      	movs	r1, r4
 8007df0:	f7fc f9be 	bl	8004170 <LCD_Display_Temp_MinMax>
			        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 8007df4:	4d30      	ldr	r5, [pc, #192]	@ (8007eb8 <main+0xb6c>)
 8007df6:	6870      	ldr	r0, [r6, #4]
 8007df8:	210a      	movs	r1, #10
 8007dfa:	f7f8 f9b5 	bl	8000168 <__udivsi3>
 8007dfe:	2200      	movs	r2, #0
 8007e00:	0029      	movs	r1, r5
 8007e02:	f7fb ff33 	bl	8003c6c <LCD_Display_Dose>
			        	 Max_Display(LCD_data);
 8007e06:	0020      	movs	r0, r4
 8007e08:	f7fc ff56 	bl	8004cb8 <Max_Display>
			        	 Small_Start_Display(LCD_data);
 8007e0c:	e7da      	b.n	8007dc4 <main+0xa78>
			        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 8007e0e:	2302      	movs	r3, #2
 8007e10:	5ef0      	ldrsh	r0, [r6, r3]
 8007e12:	f7f9 fc8b 	bl	800172c <__aeabi_i2f>
 8007e16:	2200      	movs	r2, #0
 8007e18:	0021      	movs	r1, r4
 8007e1a:	f7fc f9a9 	bl	8004170 <LCD_Display_Temp_MinMax>
			        	 Blank_Dose_Display(LCD_data);
 8007e1e:	0020      	movs	r0, r4
 8007e20:	f7fc fe70 	bl	8004b04 <Blank_Dose_Display>
			        	 Min_Display(LCD_data);
 8007e24:	0020      	movs	r0, r4
 8007e26:	f7fc ff57 	bl	8004cd8 <Min_Display>
			        	 Small_Start_Display(LCD_data);
 8007e2a:	e7cb      	b.n	8007dc4 <main+0xa78>
			        	 LCD_Display_date(LCD_data);
 8007e2c:	0020      	movs	r0, r4
 8007e2e:	f7fc fc55 	bl	80046dc <LCD_Display_date>
			        	 LCD_Display_Battery(0, LCD_data);
 8007e32:	e7b9      	b.n	8007da8 <main+0xa5c>
			        	 LCD_Display_Time(LCD_data);
 8007e34:	0020      	movs	r0, r4
 8007e36:	f7fc fce1 	bl	80047fc <LCD_Display_Time>
 8007e3a:	e7b5      	b.n	8007da8 <main+0xa5c>
			        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8007e3c:	003b      	movs	r3, r7
 8007e3e:	3394      	adds	r3, #148	@ 0x94
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb0 <main+0xb64>)
 8007e44:	0021      	movs	r1, r4
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f7fc f942 	bl	80040d0 <LCD_Display_Temp>
			        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8007e4c:	003b      	movs	r3, r7
 8007e4e:	3395      	adds	r3, #149	@ 0x95
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	4b18      	ldr	r3, [pc, #96]	@ (8007eb4 <main+0xb68>)
 8007e54:	4918      	ldr	r1, [pc, #96]	@ (8007eb8 <main+0xb6c>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	f7fb ff08 	bl	8003c6c <LCD_Display_Dose>
			        	 LCD_Display_Battery(0, LCD_data);
 8007e5c:	0021      	movs	r1, r4
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f7fc fd5a 	bl	8004918 <LCD_Display_Battery>
			        	 Small_Start_Display(LCD_data);
 8007e64:	0020      	movs	r0, r4
 8007e66:	f7fc ff01 	bl	8004c6c <Small_Start_Display>
			        	 Mark_Display(LCD_data);
 8007e6a:	0020      	movs	r0, r4
 8007e6c:	f7fc ff0e 	bl	8004c8c <Mark_Display>
			        	 LCD_mode = 1;
 8007e70:	2301      	movs	r3, #1
 8007e72:	702b      	strb	r3, [r5, #0]
			        	 break;
 8007e74:	e7b0      	b.n	8007dd8 <main+0xa8c>
				    Non_Measure();
 8007e76:	f7fe fe63 	bl	8006b40 <Non_Measure>
			  		Get_And_Print_Seconds_Left_ToStart();
 8007e7a:	f001 fd79 	bl	8009970 <Get_And_Print_Seconds_Left_ToStart>
			  		LCD_Display_DelayMode(start_remaining, LCD_data);
 8007e7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <main+0xb88>)
 8007e80:	490a      	ldr	r1, [pc, #40]	@ (8007eac <main+0xb60>)
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	f7fd f9ea 	bl	800525c <LCD_Display_DelayMode>
 8007e88:	e68a      	b.n	8007ba0 <main+0x854>
 8007e8a:	46c0      	nop			@ (mov r8, r8)
 8007e8c:	2000053c 	.word	0x2000053c
 8007e90:	20000537 	.word	0x20000537
 8007e94:	20000538 	.word	0x20000538
 8007e98:	20000534 	.word	0x20000534
 8007e9c:	20000535 	.word	0x20000535
 8007ea0:	0801d3fb 	.word	0x0801d3fb
 8007ea4:	20000a80 	.word	0x20000a80
 8007ea8:	20000503 	.word	0x20000503
 8007eac:	20000514 	.word	0x20000514
 8007eb0:	20000544 	.word	0x20000544
 8007eb4:	20000530 	.word	0x20000530
 8007eb8:	20000504 	.word	0x20000504
 8007ebc:	0801d4a3 	.word	0x0801d4a3
 8007ec0:	200004fe 	.word	0x200004fe
 8007ec4:	0801d4a9 	.word	0x0801d4a9
 8007ec8:	20000500 	.word	0x20000500
 8007ecc:	0801d4bb 	.word	0x0801d4bb
 8007ed0:	0801d4c2 	.word	0x0801d4c2
 8007ed4:	200004f8 	.word	0x200004f8
				  Non_Measure();
 8007ed8:	f7fe fe32 	bl	8006b40 <Non_Measure>
  				  switch (LCD_mode) {
 8007edc:	4dad      	ldr	r5, [pc, #692]	@ (8008194 <main+0xe48>)
 8007ede:	4cae      	ldr	r4, [pc, #696]	@ (8008198 <main+0xe4c>)
 8007ee0:	7828      	ldrb	r0, [r5, #0]
 8007ee2:	3801      	subs	r0, #1
 8007ee4:	2805      	cmp	r0, #5
 8007ee6:	d849      	bhi.n	8007f7c <main+0xc30>
 8007ee8:	f7f8 f920 	bl	800012c <__gnu_thumb1_case_uqi>
 8007eec:	2a191503 	.word	0x2a191503
 8007ef0:	4439      	.short	0x4439
			        	     LCD_Display_LP(idx_temp, LCD_data, 0);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4ba9      	ldr	r3, [pc, #676]	@ (800819c <main+0xe50>)
 8007ef6:	8818      	ldrh	r0, [r3, #0]
			        	     LCD_Display_LP(idx_rad, LCD_data, 1);
 8007ef8:	0021      	movs	r1, r4
 8007efa:	f7fd f915 	bl	8005128 <LCD_Display_LP>
			        	     Small_Stop_Display(LCD_data);
 8007efe:	0020      	movs	r0, r4
 8007f00:	f7fc fea4 	bl	8004c4c <Small_Stop_Display>
			        	     LCD_Display_Battery(0, LCD_data);
 8007f04:	0021      	movs	r1, r4
 8007f06:	2000      	movs	r0, #0
 8007f08:	f7fc fd06 	bl	8004918 <LCD_Display_Battery>
			        	     Mark_Display(LCD_data);
 8007f0c:	0020      	movs	r0, r4
 8007f0e:	f7fc febd 	bl	8004c8c <Mark_Display>
				  printf("End\r\n");
 8007f12:	48a3      	ldr	r0, [pc, #652]	@ (80081a0 <main+0xe54>)
 8007f14:	e66b      	b.n	8007bee <main+0x8a2>
			        	     LCD_Display_LP(idx_rad, LCD_data, 1);
 8007f16:	4ba3      	ldr	r3, [pc, #652]	@ (80081a4 <main+0xe58>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	8818      	ldrh	r0, [r3, #0]
 8007f1c:	e7ec      	b.n	8007ef8 <main+0xbac>
  				        	 LCD_Display_Temp_MinMax((float)device_config.temp_max , LCD_data, 0x00);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	5ef0      	ldrsh	r0, [r6, r3]
 8007f22:	f7f9 fc03 	bl	800172c <__aeabi_i2f>
 8007f26:	0021      	movs	r1, r4
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f7fc f921 	bl	8004170 <LCD_Display_Temp_MinMax>
  				        	 LCD_Display_Dose(device_config.dose_max, LCD_data_dose, 0x00);
 8007f2e:	6870      	ldr	r0, [r6, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	499d      	ldr	r1, [pc, #628]	@ (80081a8 <main+0xe5c>)
 8007f34:	f7fb fe9a 	bl	8003c6c <LCD_Display_Dose>
  				        	 Max_Display(LCD_data);
 8007f38:	0020      	movs	r0, r4
 8007f3a:	f7fc febd 	bl	8004cb8 <Max_Display>
  				        	 Small_Stop_Display(LCD_data);
 8007f3e:	e7de      	b.n	8007efe <main+0xbb2>
  				        	 LCD_Display_Temp_MinMax((float)device_config.temp_min , LCD_data, 0x00);
 8007f40:	2302      	movs	r3, #2
 8007f42:	5ef0      	ldrsh	r0, [r6, r3]
 8007f44:	f7f9 fbf2 	bl	800172c <__aeabi_i2f>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	0021      	movs	r1, r4
 8007f4c:	f7fc f910 	bl	8004170 <LCD_Display_Temp_MinMax>
  				        	 Blank_Dose_Display(LCD_data);
 8007f50:	0020      	movs	r0, r4
 8007f52:	f7fc fdd7 	bl	8004b04 <Blank_Dose_Display>
  				        	 Min_Display(LCD_data);
 8007f56:	0020      	movs	r0, r4
 8007f58:	f7fc febe 	bl	8004cd8 <Min_Display>
  				        	 Small_Stop_Display(LCD_data);
 8007f5c:	e7cf      	b.n	8007efe <main+0xbb2>
  				        	 LCD_Display_date(LCD_data);
 8007f5e:	0020      	movs	r0, r4
 8007f60:	f7fc fbbc 	bl	80046dc <LCD_Display_date>
  				        	 LCD_Display_Battery(0, LCD_data);
 8007f64:	0021      	movs	r1, r4
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7fc fcd6 	bl	8004918 <LCD_Display_Battery>
  				        	 Small_Stop_Display(LCD_data);
 8007f6c:	0020      	movs	r0, r4
 8007f6e:	f7fc fe6d 	bl	8004c4c <Small_Stop_Display>
  				        	 Mark_Display(LCD_data);
 8007f72:	e7cb      	b.n	8007f0c <main+0xbc0>
  				        	 LCD_Display_Time(LCD_data);
 8007f74:	0020      	movs	r0, r4
 8007f76:	f7fc fc41 	bl	80047fc <LCD_Display_Time>
 8007f7a:	e7f3      	b.n	8007f64 <main+0xc18>
			        	     LCD_Display_LP(idx_temp, LCD_data, 0);
 8007f7c:	4b87      	ldr	r3, [pc, #540]	@ (800819c <main+0xe50>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	8818      	ldrh	r0, [r3, #0]
 8007f82:	0021      	movs	r1, r4
 8007f84:	f7fd f8d0 	bl	8005128 <LCD_Display_LP>
			        	     Small_Stop_Display(LCD_data);
 8007f88:	0020      	movs	r0, r4
 8007f8a:	f7fc fe5f 	bl	8004c4c <Small_Stop_Display>
			        	     LCD_Display_Battery(0, LCD_data);
 8007f8e:	0021      	movs	r1, r4
 8007f90:	2000      	movs	r0, #0
 8007f92:	f7fc fcc1 	bl	8004918 <LCD_Display_Battery>
			           	     Mark_Display(LCD_data);
 8007f96:	0020      	movs	r0, r4
 8007f98:	f7fc fe78 	bl	8004c8c <Mark_Display>
  				        	 LCD_mode = 1;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	702b      	strb	r3, [r5, #0]
  				        	 break;
 8007fa0:	e7b7      	b.n	8007f12 <main+0xbc6>
				  if (First_Measure == 0){
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <main+0xc60>
					  LCD_Clear_Display(LCD_data);
 8007fa6:	487c      	ldr	r0, [pc, #496]	@ (8008198 <main+0xe4c>)
 8007fa8:	f7fc fea6 	bl	8004cf8 <LCD_Clear_Display>
			  	  First_Measure++;
 8007fac:	7821      	ldrb	r1, [r4, #0]
			  	  printf("First Count : '%u'\r\n", First_Measure);
 8007fae:	487f      	ldr	r0, [pc, #508]	@ (80081ac <main+0xe60>)
			  	  First_Measure++;
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	b249      	sxtb	r1, r1
 8007fb4:	7021      	strb	r1, [r4, #0]
			  	  printf("First Count : '%u'\r\n", First_Measure);
 8007fb6:	f011 fe7f 	bl	8019cb8 <iprintf>
			  if (Meas_Mode == 0){ // Boot
 8007fba:	7828      	ldrb	r0, [r5, #0]
 8007fbc:	2806      	cmp	r0, #6
 8007fbe:	d80b      	bhi.n	8007fd8 <main+0xc8c>
 8007fc0:	f7f8 f8b4 	bl	800012c <__gnu_thumb1_case_uqi>
 8007fc4:	c5180e04 	.word	0xc5180e04
 8007fc8:	d520      	.short	0xd520
 8007fca:	e3          	.byte	0xe3
 8007fcb:	00          	.byte	0x00
				  printf("Boot\r\n");
 8007fcc:	4878      	ldr	r0, [pc, #480]	@ (80081b0 <main+0xe64>)
 8007fce:	f011 fee3 	bl	8019d98 <puts>
				  LCD_Display_Boot(LCD_data);
 8007fd2:	4871      	ldr	r0, [pc, #452]	@ (8008198 <main+0xe4c>)
 8007fd4:	f7fc fd5a 	bl	8004a8c <LCD_Display_Boot>
			  comp1_count = 0;
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4b76      	ldr	r3, [pc, #472]	@ (80081b4 <main+0xe68>)
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e5df      	b.n	8007ba0 <main+0x854>
				  printf("Stop\r\n");
 8007fe0:	4875      	ldr	r0, [pc, #468]	@ (80081b8 <main+0xe6c>)
 8007fe2:	f011 fed9 	bl	8019d98 <puts>
				  LCD_mode = 1;
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8008194 <main+0xe48>)
				  LCD_Display_StopMode(LCD_data);
 8007fea:	486b      	ldr	r0, [pc, #428]	@ (8008198 <main+0xe4c>)
				  LCD_mode = 1;
 8007fec:	701a      	strb	r2, [r3, #0]
				  LCD_Display_StopMode(LCD_data);
 8007fee:	f7fc fd9b 	bl	8004b28 <LCD_Display_StopMode>
 8007ff2:	e7f1      	b.n	8007fd8 <main+0xc8c>
				  if(!RTC_During_Wakeup)
 8007ff4:	4b71      	ldr	r3, [pc, #452]	@ (80081bc <main+0xe70>)
 8007ff6:	781a      	ldrb	r2, [r3, #0]
					  if(Interval_LCD_Count >=1){
 8007ff8:	4b71      	ldr	r3, [pc, #452]	@ (80081c0 <main+0xe74>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
				  if(!RTC_During_Wakeup)
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	d11c      	bne.n	800803a <main+0xcee>
					  if(Interval_LCD_Count >=1){
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0e9      	beq.n	8007fd8 <main+0xc8c>
				      LCD_Display_InTime_LT(current_settings.temp_interval, LCD_data);
 8008004:	003a      	movs	r2, r7
 8008006:	003b      	movs	r3, r7
 8008008:	3280      	adds	r2, #128	@ 0x80
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	337f      	adds	r3, #127	@ 0x7f
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	0212      	lsls	r2, r2, #8
 8008012:	431a      	orrs	r2, r3
 8008014:	003b      	movs	r3, r7
 8008016:	3381      	adds	r3, #129	@ 0x81
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	495f      	ldr	r1, [pc, #380]	@ (8008198 <main+0xe4c>)
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	4313      	orrs	r3, r2
 8008020:	003a      	movs	r2, r7
 8008022:	3282      	adds	r2, #130	@ 0x82
 8008024:	7810      	ldrb	r0, [r2, #0]
 8008026:	0600      	lsls	r0, r0, #24
 8008028:	4318      	orrs	r0, r3
				  if (First_Measure==1){
 800802a:	2300      	movs	r3, #0
 800802c:	56e3      	ldrsb	r3, [r4, r3]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d000      	beq.n	8008034 <main+0xce8>
 8008032:	e096      	b.n	8008162 <main+0xe16>
				  LCD_Display_InTime_LT(current_settings.temp_interval, LCD_data);
 8008034:	f7fd f94e 	bl	80052d4 <LCD_Display_InTime_LT>
 8008038:	e7ce      	b.n	8007fd8 <main+0xc8c>
					  if (Interval_LCD_Count>0){
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0cc      	beq.n	8007fd8 <main+0xc8c>
					  switch (LCD_mode) {
 800803e:	4d55      	ldr	r5, [pc, #340]	@ (8008194 <main+0xe48>)
 8008040:	4c55      	ldr	r4, [pc, #340]	@ (8008198 <main+0xe4c>)
 8008042:	7828      	ldrb	r0, [r5, #0]
 8008044:	3801      	subs	r0, #1
 8008046:	2806      	cmp	r0, #6
 8008048:	d864      	bhi.n	8008114 <main+0xdc8>
 800804a:	f7f8 f86f 	bl	800012c <__gnu_thumb1_case_uqi>
 800804e:	1c04      	.short	0x1c04
 8008050:	5b49312d 	.word	0x5b49312d
 8008054:	5f          	.byte	0x5f
 8008055:	00          	.byte	0x00
					        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8008056:	003b      	movs	r3, r7
 8008058:	3394      	adds	r3, #148	@ 0x94
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	4b59      	ldr	r3, [pc, #356]	@ (80081c4 <main+0xe78>)
 800805e:	0021      	movs	r1, r4
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	f7fc f835 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8008066:	003b      	movs	r3, r7
 8008068:	3395      	adds	r3, #149	@ 0x95
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	4b56      	ldr	r3, [pc, #344]	@ (80081c8 <main+0xe7c>)
 800806e:	494e      	ldr	r1, [pc, #312]	@ (80081a8 <main+0xe5c>)
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f7fb fdfb 	bl	8003c6c <LCD_Display_Dose>
					        	 LCD_Display_Battery(0, LCD_data);
 8008076:	0021      	movs	r1, r4
 8008078:	2000      	movs	r0, #0
 800807a:	f7fc fc4d 	bl	8004918 <LCD_Display_Battery>
					        	 Small_Start_Display(LCD_data);
 800807e:	0020      	movs	r0, r4
 8008080:	f7fc fdf4 	bl	8004c6c <Small_Start_Display>
 8008084:	e00c      	b.n	80080a0 <main+0xd54>
					        	 LCD_Display_LP(idx_temp, LCD_data, 0);
 8008086:	2200      	movs	r2, #0
 8008088:	4b44      	ldr	r3, [pc, #272]	@ (800819c <main+0xe50>)
 800808a:	8818      	ldrh	r0, [r3, #0]
					        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 800808c:	0021      	movs	r1, r4
 800808e:	f7fd f84b 	bl	8005128 <LCD_Display_LP>
					        	 Small_Start_Display(LCD_data);
 8008092:	0020      	movs	r0, r4
 8008094:	f7fc fdea 	bl	8004c6c <Small_Start_Display>
					        	 LCD_Display_Battery(0, LCD_data);
 8008098:	0021      	movs	r1, r4
 800809a:	2000      	movs	r0, #0
 800809c:	f7fc fc3c 	bl	8004918 <LCD_Display_Battery>
					        	 Mark_Display(LCD_data);
 80080a0:	0020      	movs	r0, r4
 80080a2:	f7fc fdf3 	bl	8004c8c <Mark_Display>
					        	 break;
 80080a6:	e797      	b.n	8007fd8 <main+0xc8c>
					        	 LCD_Display_LP(idx_rad, LCD_data, 1);
 80080a8:	4b3e      	ldr	r3, [pc, #248]	@ (80081a4 <main+0xe58>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	8818      	ldrh	r0, [r3, #0]
 80080ae:	e7ed      	b.n	800808c <main+0xd40>
					        	 LCD_Display_Temp((float)device_config.temp_max , LCD_data, current_settings.display_temp_unit);
 80080b0:	003b      	movs	r3, r7
 80080b2:	3394      	adds	r3, #148	@ 0x94
 80080b4:	781d      	ldrb	r5, [r3, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	5ef0      	ldrsh	r0, [r6, r3]
 80080ba:	f7f9 fb37 	bl	800172c <__aeabi_i2f>
 80080be:	002a      	movs	r2, r5
 80080c0:	0021      	movs	r1, r4
 80080c2:	f7fc f805 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(device_config.dose_max/10, LCD_data_dose, 0x00);
 80080c6:	4d38      	ldr	r5, [pc, #224]	@ (80081a8 <main+0xe5c>)
 80080c8:	6870      	ldr	r0, [r6, #4]
 80080ca:	210a      	movs	r1, #10
 80080cc:	f7f8 f84c 	bl	8000168 <__udivsi3>
 80080d0:	2200      	movs	r2, #0
 80080d2:	0029      	movs	r1, r5
 80080d4:	f7fb fdca 	bl	8003c6c <LCD_Display_Dose>
					        	 Max_Display(LCD_data);
 80080d8:	0020      	movs	r0, r4
 80080da:	f7fc fded 	bl	8004cb8 <Max_Display>
					        	 Small_Start_Display(LCD_data);
 80080de:	e7d8      	b.n	8008092 <main+0xd46>
					        	 LCD_Display_Temp((float)device_config.temp_min , LCD_data, current_settings.display_temp_unit);
 80080e0:	003b      	movs	r3, r7
 80080e2:	3394      	adds	r3, #148	@ 0x94
 80080e4:	781d      	ldrb	r5, [r3, #0]
 80080e6:	2302      	movs	r3, #2
 80080e8:	5ef0      	ldrsh	r0, [r6, r3]
 80080ea:	f7f9 fb1f 	bl	800172c <__aeabi_i2f>
 80080ee:	002a      	movs	r2, r5
 80080f0:	0021      	movs	r1, r4
 80080f2:	f7fb ffed 	bl	80040d0 <LCD_Display_Temp>
					        	 Blank_Dose_Display(LCD_data);
 80080f6:	0020      	movs	r0, r4
 80080f8:	f7fc fd04 	bl	8004b04 <Blank_Dose_Display>
					        	 Min_Display(LCD_data);
 80080fc:	0020      	movs	r0, r4
 80080fe:	f7fc fdeb 	bl	8004cd8 <Min_Display>
					        	 Small_Start_Display(LCD_data);
 8008102:	e7c6      	b.n	8008092 <main+0xd46>
					        	 LCD_Display_date(LCD_data);
 8008104:	0020      	movs	r0, r4
 8008106:	f7fc fae9 	bl	80046dc <LCD_Display_date>
					        	 LCD_Display_Battery(0, LCD_data);
 800810a:	e7b4      	b.n	8008076 <main+0xd2a>
					        	 LCD_Display_Time(LCD_data);
 800810c:	0020      	movs	r0, r4
 800810e:	f7fc fb75 	bl	80047fc <LCD_Display_Time>
 8008112:	e7b0      	b.n	8008076 <main+0xd2a>
					        	 LCD_Display_Temp(Display_temperature, LCD_data, current_settings.display_temp_unit);
 8008114:	003b      	movs	r3, r7
 8008116:	3394      	adds	r3, #148	@ 0x94
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	4b2a      	ldr	r3, [pc, #168]	@ (80081c4 <main+0xe78>)
 800811c:	0021      	movs	r1, r4
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	f7fb ffd6 	bl	80040d0 <LCD_Display_Temp>
					        	 LCD_Display_Dose(dose_log, LCD_data_dose, current_settings.display_dose_unit);
 8008124:	003b      	movs	r3, r7
 8008126:	3395      	adds	r3, #149	@ 0x95
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	4b27      	ldr	r3, [pc, #156]	@ (80081c8 <main+0xe7c>)
 800812c:	491e      	ldr	r1, [pc, #120]	@ (80081a8 <main+0xe5c>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	f7fb fd9c 	bl	8003c6c <LCD_Display_Dose>
					        	 LCD_Display_Battery(0, LCD_data);
 8008134:	0021      	movs	r1, r4
 8008136:	2000      	movs	r0, #0
 8008138:	f7fc fbee 	bl	8004918 <LCD_Display_Battery>
					        	 Small_Start_Display(LCD_data);
 800813c:	0020      	movs	r0, r4
 800813e:	f7fc fd95 	bl	8004c6c <Small_Start_Display>
					        	 Mark_Display(LCD_data);
 8008142:	0020      	movs	r0, r4
 8008144:	f7fc fda2 	bl	8004c8c <Mark_Display>
					        	 LCD_mode = 1;
 8008148:	2301      	movs	r3, #1
 800814a:	702b      	strb	r3, [r5, #0]
					        	 break;
 800814c:	e744      	b.n	8007fd8 <main+0xc8c>
				  printf("Pause\r\n");
 800814e:	481f      	ldr	r0, [pc, #124]	@ (80081cc <main+0xe80>)
 8008150:	f011 fe22 	bl	8019d98 <puts>
				  LCD_mode = 1;
 8008154:	2201      	movs	r2, #1
 8008156:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <main+0xe48>)
				  LCD_Display_PauseMode(LCD_data);
 8008158:	480f      	ldr	r0, [pc, #60]	@ (8008198 <main+0xe4c>)
				  LCD_mode = 1;
 800815a:	701a      	strb	r2, [r3, #0]
				  LCD_Display_PauseMode(LCD_data);
 800815c:	f7fc fd30 	bl	8004bc0 <LCD_Display_PauseMode>
 8008160:	e73a      	b.n	8007fd8 <main+0xc8c>
				  LCD_Display_InTime_LR(current_settings.temp_interval, LCD_data);
 8008162:	f7fd f8f7 	bl	8005354 <LCD_Display_InTime_LR>
				  LCD_mode = 1;
 8008166:	2201      	movs	r2, #1
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <main+0xe48>)
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e734      	b.n	8007fd8 <main+0xc8c>
				  if (First_Measure==1){
 800816e:	2300      	movs	r3, #0
 8008170:	56e3      	ldrsb	r3, [r4, r3]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <main+0xe2e>
					  Maybe_Rearm_Reservation_OnWake();
 8008176:	f7fd fba1 	bl	80058bc <Maybe_Rearm_Reservation_OnWake>
			  	  Get_And_Print_Seconds_Left_ToStart();
 800817a:	f001 fbf9 	bl	8009970 <Get_And_Print_Seconds_Left_ToStart>
			  	  LCD_Display_DelayMode(start_remaining, LCD_data);  // Delay Display 로 교체
 800817e:	4b14      	ldr	r3, [pc, #80]	@ (80081d0 <main+0xe84>)
 8008180:	4905      	ldr	r1, [pc, #20]	@ (8008198 <main+0xe4c>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	f7fd f86a 	bl	800525c <LCD_Display_DelayMode>
 8008188:	e726      	b.n	8007fd8 <main+0xc8c>
				  LCD_Display_EndMode(LCD_data);
 800818a:	4803      	ldr	r0, [pc, #12]	@ (8008198 <main+0xe4c>)
 800818c:	f7fd f922 	bl	80053d4 <LCD_Display_EndMode>
 8008190:	e722      	b.n	8007fd8 <main+0xc8c>
 8008192:	46c0      	nop			@ (mov r8, r8)
 8008194:	20000503 	.word	0x20000503
 8008198:	20000514 	.word	0x20000514
 800819c:	200004fe 	.word	0x200004fe
 80081a0:	0801d306 	.word	0x0801d306
 80081a4:	20000500 	.word	0x20000500
 80081a8:	20000504 	.word	0x20000504
 80081ac:	0801d4d1 	.word	0x0801d4d1
 80081b0:	0801d3fb 	.word	0x0801d3fb
 80081b4:	20000560 	.word	0x20000560
 80081b8:	0801d4a3 	.word	0x0801d4a3
 80081bc:	200004fc 	.word	0x200004fc
 80081c0:	2000053c 	.word	0x2000053c
 80081c4:	20000544 	.word	0x20000544
 80081c8:	20000530 	.word	0x20000530
 80081cc:	0801d4bb 	.word	0x0801d4bb
 80081d0:	200004f8 	.word	0x200004f8

080081d4 <MX_USB_PCD_Init>:
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80081d4:	4808      	ldr	r0, [pc, #32]	@ (80081f8 <MX_USB_PCD_Init+0x24>)
 80081d6:	4b09      	ldr	r3, [pc, #36]	@ (80081fc <MX_USB_PCD_Init+0x28>)
{
 80081d8:	b510      	push	{r4, lr}
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80081da:	6003      	str	r3, [r0, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80081dc:	2382      	movs	r3, #130	@ 0x82
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	8083      	strh	r3, [r0, #4]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081e2:	2302      	movs	r3, #2
 80081e4:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	6083      	str	r3, [r0, #8]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80081ea:	f007 fc0d 	bl	800fa08 <HAL_PCD_Init>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d001      	beq.n	80081f6 <MX_USB_PCD_Init+0x22>
 80081f2:	b672      	cpsid	i
  while (1)
 80081f4:	e7fe      	b.n	80081f4 <MX_USB_PCD_Init+0x20>
}
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	20000564 	.word	0x20000564
 80081fc:	40005c00 	.word	0x40005c00

08008200 <HAL_COMP_TriggerCallback>:
      if (hcomp->Instance == COMP1)
 8008200:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <HAL_COMP_TriggerCallback+0x14>)
 8008202:	6802      	ldr	r2, [r0, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d103      	bne.n	8008210 <HAL_COMP_TriggerCallback+0x10>
          comp1_count++;
 8008208:	4a03      	ldr	r2, [pc, #12]	@ (8008218 <HAL_COMP_TriggerCallback+0x18>)
 800820a:	6813      	ldr	r3, [r2, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	6013      	str	r3, [r2, #0]
  }
 8008210:	4770      	bx	lr
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	40010200 	.word	0x40010200
 8008218:	20000560 	.word	0x20000560

0800821c <EXTI0_1_IRQHandler>:
{
 800821c:	b510      	push	{r4, lr}
    HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800821e:	2001      	movs	r0, #1
 8008220:	f007 f87a 	bl	800f318 <HAL_GPIO_EXTI_IRQHandler>
}
 8008224:	bd10      	pop	{r4, pc}
	...

08008228 <HAL_GPIO_EXTI_Falling_Callback>:
{
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	0004      	movs	r4, r0
    if(GPIO_Pin == GPIO_PIN_0)
 800822c:	2801      	cmp	r0, #1
 800822e:	d11e      	bne.n	800826e <HAL_GPIO_EXTI_Falling_Callback+0x46>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) // 0=눌림
 8008230:	0001      	movs	r1, r0
 8008232:	20a0      	movs	r0, #160	@ 0xa0
 8008234:	05c0      	lsls	r0, r0, #23
 8008236:	f007 f861 	bl	800f2fc <HAL_GPIO_ReadPin>
 800823a:	2800      	cmp	r0, #0
 800823c:	d117      	bne.n	800826e <HAL_GPIO_EXTI_Falling_Callback+0x46>
            uint32_t now = HAL_GetTick();
 800823e:	f005 fdcd 	bl	800dddc <HAL_GetTick>
            if (now - last_button_tick < DOUBLE_CLICK_MS) {
 8008242:	2596      	movs	r5, #150	@ 0x96
 8008244:	490b      	ldr	r1, [pc, #44]	@ (8008274 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8008246:	4a0c      	ldr	r2, [pc, #48]	@ (8008278 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8008248:	680b      	ldr	r3, [r1, #0]
 800824a:	006d      	lsls	r5, r5, #1
 800824c:	1ac3      	subs	r3, r0, r3
 800824e:	42ab      	cmp	r3, r5
 8008250:	d20e      	bcs.n	8008270 <HAL_GPIO_EXTI_Falling_Callback+0x48>
                button_press_count++;
 8008252:	7813      	ldrb	r3, [r2, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	7013      	strb	r3, [r2, #0]
            button_flag = true;
 800825a:	2201      	movs	r2, #1
 800825c:	4b07      	ldr	r3, [pc, #28]	@ (800827c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
            last_button_tick = now;
 800825e:	6008      	str	r0, [r1, #0]
            button_flag = true;
 8008260:	701a      	strb	r2, [r3, #0]
            if(Meas_Mode == 2){
 8008262:	4b07      	ldr	r3, [pc, #28]	@ (8008280 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d101      	bne.n	800826e <HAL_GPIO_EXTI_Falling_Callback+0x46>
                Interval_LCD_Count = 1;
 800826a:	4b06      	ldr	r3, [pc, #24]	@ (8008284 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800826c:	601a      	str	r2, [r3, #0]
}
 800826e:	bd70      	pop	{r4, r5, r6, pc}
                button_press_count = 1;
 8008270:	7014      	strb	r4, [r2, #0]
 8008272:	e7f2      	b.n	800825a <HAL_GPIO_EXTI_Falling_Callback+0x32>
 8008274:	20000528 	.word	0x20000528
 8008278:	20000524 	.word	0x20000524
 800827c:	20000538 	.word	0x20000538
 8008280:	20000535 	.word	0x20000535
 8008284:	2000053c 	.word	0x2000053c

08008288 <HAL_RTCEx_WakeUpTimerEventCallback>:
{
 8008288:	b510      	push	{r4, lr}
	printf("Wake Up by RTC Timer!\r\n");
 800828a:	480b      	ldr	r0, [pc, #44]	@ (80082b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 800828c:	f011 fd84 	bl	8019d98 <puts>
	    if(Meas_Mode != 5){
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	2a05      	cmp	r2, #5
 8008296:	d00c      	beq.n	80082b2 <HAL_RTCEx_WakeUpTimerEventCallback+0x2a>
	        Meas_Mode = 2;
 8008298:	2202      	movs	r2, #2
 800829a:	701a      	strb	r2, [r3, #0]
	        Tick_Save = 0;
 800829c:	2200      	movs	r2, #0
 800829e:	4b08      	ldr	r3, [pc, #32]	@ (80082c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 80082a0:	601a      	str	r2, [r3, #0]
	        First_Measure = -1;
 80082a2:	4b08      	ldr	r3, [pc, #32]	@ (80082c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 80082a4:	32ff      	adds	r2, #255	@ 0xff
 80082a6:	701a      	strb	r2, [r3, #0]
	        RTC_During_Wakeup = 1;
 80082a8:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 80082aa:	3afe      	subs	r2, #254	@ 0xfe
 80082ac:	701a      	strb	r2, [r3, #0]
	    Load_Backup_Index();}
 80082ae:	f7fd ffc7 	bl	8006240 <Load_Backup_Index>
	    RTC_Disable_All_Wakeup();
 80082b2:	f7fd f9f5 	bl	80056a0 <RTC_Disable_All_Wakeup>
}
 80082b6:	bd10      	pop	{r4, pc}
 80082b8:	0801d4e6 	.word	0x0801d4e6
 80082bc:	20000535 	.word	0x20000535
 80082c0:	20000540 	.word	0x20000540
 80082c4:	20000534 	.word	0x20000534
 80082c8:	200004fc 	.word	0x200004fc

080082cc <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80082cc:	b510      	push	{r4, lr}
	printf("Wake Up by RTC Alarm!\r\n");
 80082ce:	480b      	ldr	r0, [pc, #44]	@ (80082fc <HAL_RTC_AlarmAEventCallback+0x30>)
 80082d0:	f011 fd62 	bl	8019d98 <puts>
	    if(Meas_Mode != 5){
 80082d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <HAL_RTC_AlarmAEventCallback+0x34>)
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	2a05      	cmp	r2, #5
 80082da:	d00c      	beq.n	80082f6 <HAL_RTC_AlarmAEventCallback+0x2a>
	        Meas_Mode = 2;
 80082dc:	2202      	movs	r2, #2
 80082de:	701a      	strb	r2, [r3, #0]
	        Tick_Save = 0;
 80082e0:	2200      	movs	r2, #0
 80082e2:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <HAL_RTC_AlarmAEventCallback+0x38>)
 80082e4:	601a      	str	r2, [r3, #0]
	        First_Measure = -1;
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80082e8:	32ff      	adds	r2, #255	@ 0xff
 80082ea:	701a      	strb	r2, [r3, #0]
	        RTC_During_Wakeup = 1;
 80082ec:	4b07      	ldr	r3, [pc, #28]	@ (800830c <HAL_RTC_AlarmAEventCallback+0x40>)
 80082ee:	3afe      	subs	r2, #254	@ 0xfe
 80082f0:	701a      	strb	r2, [r3, #0]
	    Load_Backup_Index();}
 80082f2:	f7fd ffa5 	bl	8006240 <Load_Backup_Index>
	    RTC_Disable_All_Wakeup();
 80082f6:	f7fd f9d3 	bl	80056a0 <RTC_Disable_All_Wakeup>
}
 80082fa:	bd10      	pop	{r4, pc}
 80082fc:	0801d4fd 	.word	0x0801d4fd
 8008300:	20000535 	.word	0x20000535
 8008304:	20000540 	.word	0x20000540
 8008308:	20000534 	.word	0x20000534
 800830c:	200004fc 	.word	0x200004fc

08008310 <Error_Handler>:
 8008310:	b672      	cpsid	i
  while (1)
 8008312:	e7fe      	b.n	8008312 <Error_Handler+0x2>

08008314 <meas_data_log_fast_init>:
//            log_write_offset = offset;
//}

void meas_data_log_fast_init(uint16_t index_num)
{
    log_write_offset = index_num * ENTRY_SIZE;
 8008314:	2315      	movs	r3, #21
 8008316:	4358      	muls	r0, r3
    if (log_write_offset > LOG_MAX_SIZE)  // 오버런 방지
 8008318:	2380      	movs	r3, #128	@ 0x80
    log_write_offset = index_num * ENTRY_SIZE;
 800831a:	4a03      	ldr	r2, [pc, #12]	@ (8008328 <meas_data_log_fast_init+0x14>)
    if (log_write_offset > LOG_MAX_SIZE)  // 오버런 방지
 800831c:	035b      	lsls	r3, r3, #13
 800831e:	4298      	cmp	r0, r3
 8008320:	d900      	bls.n	8008324 <meas_data_log_fast_init+0x10>
 8008322:	0018      	movs	r0, r3
    log_write_offset = index_num * ENTRY_SIZE;
 8008324:	6010      	str	r0, [r2, #0]
        log_write_offset = LOG_MAX_SIZE;
}
 8008326:	4770      	bx	lr
 8008328:	20000b70 	.word	0x20000b70

0800832c <meas_data_log_write>:

void meas_data_log_write(const uint8_t *data, size_t len)
{


    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 800832c:	2380      	movs	r3, #128	@ 0x80
{
 800832e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008330:	000d      	movs	r5, r1
    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 8008332:	4f12      	ldr	r7, [pc, #72]	@ (800837c <meas_data_log_write+0x50>)
 8008334:	035b      	lsls	r3, r3, #13
 8008336:	683e      	ldr	r6, [r7, #0]
{
 8008338:	9001      	str	r0, [sp, #4]
    uint32_t addr = LOG_BASE_ADDR + log_write_offset;
 800833a:	18f6      	adds	r6, r6, r3
    size_t remaining = len;
    const uint8_t *p = data;

    while (remaining) {
 800833c:	2d00      	cmp	r5, #0
 800833e:	d106      	bne.n	800834e <meas_data_log_write+0x22>
        log_write_offset += chunk;

//        printf("[DEBUG] Chunk written: chunk=%lu, next_offset=%lu\r\n", (unsigned long)chunk, (unsigned long)log_write_offset);
    }

    if (log_write_offset >= LOG_MAX_SIZE) {
 8008340:	2380      	movs	r3, #128	@ 0x80
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	035b      	lsls	r3, r3, #13
 8008346:	429a      	cmp	r2, r3
 8008348:	d300      	bcc.n	800834c <meas_data_log_write+0x20>
//        printf("[WARN] log_write_offset overflow! Reset to 0\r\n");
        log_write_offset = 0;
 800834a:	603d      	str	r5, [r7, #0]
    }
}
 800834c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        uint32_t off = addr % LOG_PAGE_SIZE;
 800834e:	24ff      	movs	r4, #255	@ 0xff
        uint32_t chunk = LOG_PAGE_SIZE - off;
 8008350:	2380      	movs	r3, #128	@ 0x80
        uint32_t off = addr % LOG_PAGE_SIZE;
 8008352:	4034      	ands	r4, r6
        uint32_t chunk = LOG_PAGE_SIZE - off;
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	1b1c      	subs	r4, r3, r4
        if (chunk > remaining) chunk = remaining;
 8008358:	42ac      	cmp	r4, r5
 800835a:	d900      	bls.n	800835e <meas_data_log_write+0x32>
 800835c:	002c      	movs	r4, r5
        SPI_FLASH_PageProgram(addr, (uint8_t*)p, chunk);
 800835e:	0030      	movs	r0, r6
 8008360:	0022      	movs	r2, r4
 8008362:	9901      	ldr	r1, [sp, #4]
 8008364:	f001 fc50 	bl	8009c08 <SPI_FLASH_PageProgram>
        p += chunk;
 8008368:	9b01      	ldr	r3, [sp, #4]
        addr += chunk;
 800836a:	1936      	adds	r6, r6, r4
        p += chunk;
 800836c:	191b      	adds	r3, r3, r4
 800836e:	9301      	str	r3, [sp, #4]
        log_write_offset += chunk;
 8008370:	683b      	ldr	r3, [r7, #0]
        remaining -= chunk;
 8008372:	1b2d      	subs	r5, r5, r4
        log_write_offset += chunk;
 8008374:	191b      	adds	r3, r3, r4
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	e7e0      	b.n	800833c <meas_data_log_write+0x10>
 800837a:	46c0      	nop			@ (mov r8, r8)
 800837c:	20000b70 	.word	0x20000b70

08008380 <meas_data_log_read>:


void meas_data_log_read(uint32_t offset, uint8_t *buf, size_t len)
{
    if (offset + len > LOG_MAX_SIZE) return;
 8008380:	2380      	movs	r3, #128	@ 0x80
{
 8008382:	b510      	push	{r4, lr}
    if (offset + len > LOG_MAX_SIZE) return;
 8008384:	1884      	adds	r4, r0, r2
 8008386:	035b      	lsls	r3, r3, #13
 8008388:	429c      	cmp	r4, r3
 800838a:	d802      	bhi.n	8008392 <meas_data_log_read+0x12>
    SPI_FLASH_ReadData(LOG_BASE_ADDR + offset, buf, len);
 800838c:	18c0      	adds	r0, r0, r3
 800838e:	f001 fc81 	bl	8009c94 <SPI_FLASH_ReadData>
}
 8008392:	bd10      	pop	{r4, pc}

08008394 <meas_data_log_erase>:
//
//    log_write_offset = 0;
//    printf("[ERASE] All sectors processed. log_write_offset reset.\r\n");
//}
void meas_data_log_erase(void) // 3번 Check
{
 8008394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008396:	4c16      	ldr	r4, [pc, #88]	@ (80083f0 <meas_data_log_erase+0x5c>)
        bool erased_ok = false;

        for (int attempt = 0; attempt < 3 && !erased_ok; attempt++)  // 최대 3회 시도
        {
            SPI_FLASH_EraseSector(addr);
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 8008398:	2680      	movs	r6, #128	@ 0x80
{
 800839a:	44a5      	add	sp, r4
 800839c:	2480      	movs	r4, #128	@ 0x80

            erased_ok = true;
 800839e:	2701      	movs	r7, #1
{
 80083a0:	0364      	lsls	r4, r4, #13
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 80083a2:	0176      	lsls	r6, r6, #5
{
 80083a4:	2503      	movs	r5, #3
            SPI_FLASH_EraseSector(addr);
 80083a6:	0020      	movs	r0, r4
 80083a8:	f001 fbea 	bl	8009b80 <SPI_FLASH_EraseSector>
            SPI_FLASH_ReadData(addr, buf, LOG_SECTOR_SIZE);
 80083ac:	0032      	movs	r2, r6
 80083ae:	4669      	mov	r1, sp
 80083b0:	0020      	movs	r0, r4
 80083b2:	f001 fc6f 	bl	8009c94 <SPI_FLASH_ReadData>
            for (uint32_t i = 0; i < LOG_SECTOR_SIZE; i++) {
 80083b6:	2300      	movs	r3, #0
                if (buf[i] != 0xFF) {
 80083b8:	466a      	mov	r2, sp
 80083ba:	5cd2      	ldrb	r2, [r2, r3]
 80083bc:	2aff      	cmp	r2, #255	@ 0xff
 80083be:	d115      	bne.n	80083ec <meas_data_log_erase+0x58>
            for (uint32_t i = 0; i < LOG_SECTOR_SIZE; i++) {
 80083c0:	3301      	adds	r3, #1
 80083c2:	42b3      	cmp	r3, r6
 80083c4:	d1f8      	bne.n	80083b8 <meas_data_log_erase+0x24>
            erased_ok = true;
 80083c6:	003b      	movs	r3, r7
        for (int attempt = 0; attempt < 3 && !erased_ok; attempt++)  // 최대 3회 시도
 80083c8:	3d01      	subs	r5, #1
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	d001      	beq.n	80083d2 <meas_data_log_erase+0x3e>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0e9      	beq.n	80083a6 <meas_data_log_erase+0x12>
    for (uint32_t s = 0; s < sectors; s++)
 80083d2:	2380      	movs	r3, #128	@ 0x80
 80083d4:	015b      	lsls	r3, r3, #5
 80083d6:	18e4      	adds	r4, r4, r3
 80083d8:	2380      	movs	r3, #128	@ 0x80
 80083da:	039b      	lsls	r3, r3, #14
 80083dc:	429c      	cmp	r4, r3
 80083de:	d1e1      	bne.n	80083a4 <meas_data_log_erase+0x10>
            }
        }
        // 출력 부분 제거됨 (OK/FAIL 로그 없음)
    }

    log_write_offset = 0;
 80083e0:	2200      	movs	r2, #0
 80083e2:	4b04      	ldr	r3, [pc, #16]	@ (80083f4 <meas_data_log_erase+0x60>)
 80083e4:	601a      	str	r2, [r3, #0]
}
 80083e6:	4b04      	ldr	r3, [pc, #16]	@ (80083f8 <meas_data_log_erase+0x64>)
 80083e8:	449d      	add	sp, r3
 80083ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    erased_ok = false;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e7eb      	b.n	80083c8 <meas_data_log_erase+0x34>
 80083f0:	ffffeffc 	.word	0xffffeffc
 80083f4:	20000b70 	.word	0x20000b70
 80083f8:	00001004 	.word	0x00001004

080083fc <meas_data_log_write_entry>:

/**
 * @brief  log_entry_t 하나를 플래시에 이어쓰기
 */
void meas_data_log_write_entry(const log_entry_t *e)
{
 80083fc:	b510      	push	{r4, lr}
    // 체크섬 계산 예시 (간단 sum)
    uint16_t sum = 0;
 80083fe:	2400      	movs	r4, #0
{
 8008400:	0001      	movs	r1, r0
 8008402:	0003      	movs	r3, r0
 8008404:	b086      	sub	sp, #24
 8008406:	3013      	adds	r0, #19
    const uint8_t *p = (const uint8_t*)e;
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
        sum += p[i];
 8008408:	781a      	ldrb	r2, [r3, #0]
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 800840a:	3301      	adds	r3, #1
        sum += p[i];
 800840c:	18a4      	adds	r4, r4, r2
 800840e:	b2a4      	uxth	r4, r4
    for (size_t i = 0; i < ENTRY_SIZE - sizeof(e->checksum); i++) {
 8008410:	4283      	cmp	r3, r0
 8008412:	d1f9      	bne.n	8008408 <meas_data_log_write_entry+0xc>
    }
    // 구조체 복사 후 checksum 필드에 기록
    log_entry_t tmp = *e;
 8008414:	2215      	movs	r2, #21
 8008416:	4668      	mov	r0, sp
 8008418:	f011 fee4 	bl	801a1e4 <memcpy>
    tmp.checksum    = sum;
 800841c:	466b      	mov	r3, sp

    // ENTRY_SIZE 바이트를 그대로 append
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 800841e:	2115      	movs	r1, #21
 8008420:	4668      	mov	r0, sp
    tmp.checksum    = sum;
 8008422:	825c      	strh	r4, [r3, #18]
    meas_data_log_write((uint8_t*)&tmp, ENTRY_SIZE);
 8008424:	f7ff ff82 	bl	800832c <meas_data_log_write>
}
 8008428:	b006      	add	sp, #24
 800842a:	bd10      	pop	{r4, pc}

0800842c <meas_data_log_read_entry>:
/**
 * @brief  플래시에 기록된 n번째 엔트리를 읽어옴
 */
void meas_data_log_read_entry(uint32_t index, log_entry_t *e)
{
    uint32_t offset = index * ENTRY_SIZE;
 800842c:	2215      	movs	r2, #21
{
 800842e:	000b      	movs	r3, r1
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 8008430:	2180      	movs	r1, #128	@ 0x80
    uint32_t offset = index * ENTRY_SIZE;
 8008432:	4350      	muls	r0, r2
{
 8008434:	b510      	push	{r4, lr}
    if (offset + ENTRY_SIZE > LOG_MAX_SIZE) {
 8008436:	1884      	adds	r4, r0, r2
 8008438:	0349      	lsls	r1, r1, #13
 800843a:	428c      	cmp	r4, r1
 800843c:	d904      	bls.n	8008448 <meas_data_log_read_entry+0x1c>
        // 범위 벗어나면 초기화
        memset(e, 0xFF, ENTRY_SIZE);
 800843e:	21ff      	movs	r1, #255	@ 0xff
 8008440:	0018      	movs	r0, r3
 8008442:	f011 fe05 	bl	801a050 <memset>
        return;
    }
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
}
 8008446:	bd10      	pop	{r4, pc}
    meas_data_log_read(offset, (uint8_t*)e, ENTRY_SIZE);
 8008448:	0019      	movs	r1, r3
 800844a:	f7ff ff99 	bl	8008380 <meas_data_log_read>
 800844e:	e7fa      	b.n	8008446 <meas_data_log_read_entry+0x1a>

08008450 <meas_data_log_read_last>:


void meas_data_log_read_last(void)
{
 8008450:	b570      	push	{r4, r5, r6, lr}
    if (log_write_offset < ENTRY_SIZE) return;
 8008452:	4b23      	ldr	r3, [pc, #140]	@ (80084e0 <meas_data_log_read_last+0x90>)
{
 8008454:	b0b4      	sub	sp, #208	@ 0xd0
    if (log_write_offset < ENTRY_SIZE) return;
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	2814      	cmp	r0, #20
 800845a:	d93e      	bls.n	80084da <meas_data_log_read_last+0x8a>
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
    log_entry_t e;
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 800845c:	ac0e      	add	r4, sp, #56	@ 0x38
 800845e:	2215      	movs	r2, #21
 8008460:	0021      	movs	r1, r4
    uint32_t read_ofs = log_write_offset - ENTRY_SIZE;
 8008462:	3815      	subs	r0, #21
    meas_data_log_read(read_ofs, (uint8_t*)&e, ENTRY_SIZE);
 8008464:	f7ff ff8c 	bl	8008380 <meas_data_log_read>

    // UART 출력 (print_log_entry와 동일)
    char txt[128];
    int year = 2000 + e.year;
    float temp_c = e.temperature / 10.0f;
    int len = snprintf(txt, sizeof(txt),
 8008468:	7c63      	ldrb	r3, [r4, #17]
 800846a:	8826      	ldrh	r6, [r4, #0]
 800846c:	930d      	str	r3, [sp, #52]	@ 0x34
 800846e:	7c23      	ldrb	r3, [r4, #16]
        "Idx:%3u Date:%04d-%02u-%02u %02u:%02u:%02u "
        "Cnt:%3u T:%.1fCC Dose:%.2fmSv/h Mark:0x%02X RadFlag:%d\r\n",
        e.index, year, e.month, e.day, e.hour, e.minute, e.second,
        e.count, temp_c, e.dose/100.0f, e.mark, e.rad_measure_mark
 8008470:	9811      	ldr	r0, [sp, #68]	@ 0x44
    int len = snprintf(txt, sizeof(txt),
 8008472:	930c      	str	r3, [sp, #48]	@ 0x30
        e.count, temp_c, e.dose/100.0f, e.mark, e.rad_measure_mark
 8008474:	f7f9 f9aa 	bl	80017cc <__aeabi_ui2f>
 8008478:	491a      	ldr	r1, [pc, #104]	@ (80084e4 <meas_data_log_read_last+0x94>)
 800847a:	f7f8 fb95 	bl	8000ba8 <__aeabi_fdiv>
    int len = snprintf(txt, sizeof(txt),
 800847e:	f7fb f98b 	bl	8003798 <__aeabi_f2d>
 8008482:	900a      	str	r0, [sp, #40]	@ 0x28
 8008484:	910b      	str	r1, [sp, #44]	@ 0x2c
    float temp_c = e.temperature / 10.0f;
 8008486:	230a      	movs	r3, #10
 8008488:	5ee0      	ldrsh	r0, [r4, r3]
 800848a:	f7f9 f94f 	bl	800172c <__aeabi_i2f>
 800848e:	4916      	ldr	r1, [pc, #88]	@ (80084e8 <meas_data_log_read_last+0x98>)
 8008490:	f7f8 fb8a 	bl	8000ba8 <__aeabi_fdiv>
    int len = snprintf(txt, sizeof(txt),
 8008494:	f7fb f980 	bl	8003798 <__aeabi_f2d>
    int year = 2000 + e.year;
 8008498:	22fa      	movs	r2, #250	@ 0xfa
    int len = snprintf(txt, sizeof(txt),
 800849a:	9008      	str	r0, [sp, #32]
 800849c:	9109      	str	r1, [sp, #36]	@ 0x24
 800849e:	8923      	ldrh	r3, [r4, #8]
 80084a0:	4d12      	ldr	r5, [pc, #72]	@ (80084ec <meas_data_log_read_last+0x9c>)
 80084a2:	9306      	str	r3, [sp, #24]
 80084a4:	79e3      	ldrb	r3, [r4, #7]
    int year = 2000 + e.year;
 80084a6:	00d2      	lsls	r2, r2, #3
    int len = snprintf(txt, sizeof(txt),
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	79a3      	ldrb	r3, [r4, #6]
 80084ac:	2180      	movs	r1, #128	@ 0x80
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	7963      	ldrb	r3, [r4, #5]
 80084b2:	a814      	add	r0, sp, #80	@ 0x50
 80084b4:	9303      	str	r3, [sp, #12]
 80084b6:	7923      	ldrb	r3, [r4, #4]
 80084b8:	9302      	str	r3, [sp, #8]
 80084ba:	78e3      	ldrb	r3, [r4, #3]
 80084bc:	9301      	str	r3, [sp, #4]
    int year = 2000 + e.year;
 80084be:	78a3      	ldrb	r3, [r4, #2]
 80084c0:	189b      	adds	r3, r3, r2
    int len = snprintf(txt, sizeof(txt),
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	002a      	movs	r2, r5
 80084c6:	0033      	movs	r3, r6
 80084c8:	f011 fc70 	bl	8019dac <sniprintf>
    );
    HAL_UART_Transmit(&huart3, (uint8_t*)txt, len, HAL_MAX_DELAY);
 80084cc:	2301      	movs	r3, #1
 80084ce:	b282      	uxth	r2, r0
 80084d0:	425b      	negs	r3, r3
 80084d2:	4807      	ldr	r0, [pc, #28]	@ (80084f0 <meas_data_log_read_last+0xa0>)
 80084d4:	a914      	add	r1, sp, #80	@ 0x50
 80084d6:	f00a fcac 	bl	8012e32 <HAL_UART_Transmit>
}
 80084da:	b034      	add	sp, #208	@ 0xd0
 80084dc:	bd70      	pop	{r4, r5, r6, pc}
 80084de:	46c0      	nop			@ (mov r8, r8)
 80084e0:	20000b70 	.word	0x20000b70
 80084e4:	42c80000 	.word	0x42c80000
 80084e8:	41200000 	.word	0x41200000
 80084ec:	0801d514 	.word	0x0801d514
 80084f0:	20000840 	.word	0x20000840

080084f4 <crc8_SMBUS_calculate>:
 * @return The 8-bit CRC checksum.
 */
//FIXME: Create crc table for speed up.
uint8_t crc8_SMBUS_calculate(const uint8_t *data, size_t length) {
    uint8_t crc = 0x00;
    for (size_t i = 0; i < length; ++i) {
 80084f4:	0003      	movs	r3, r0
uint8_t crc8_SMBUS_calculate(const uint8_t *data, size_t length) {
 80084f6:	b530      	push	{r4, r5, lr}
 80084f8:	1841      	adds	r1, r0, r1
        crc ^= data[i];
        for (int j = 0; j < 8; ++j) {
            if (crc & 0x80) { // If MSB is 1
                crc = (crc << 1) ^ CRC8_SMBUS_POLYNOMIAL;
 80084fa:	2507      	movs	r5, #7
    uint8_t crc = 0x00;
 80084fc:	2000      	movs	r0, #0
    for (size_t i = 0; i < length; ++i) {
 80084fe:	428b      	cmp	r3, r1
 8008500:	d100      	bne.n	8008504 <crc8_SMBUS_calculate+0x10>
                crc <<= 1;
            }
        }
    }
    return crc;
}
 8008502:	bd30      	pop	{r4, r5, pc}
        crc ^= data[i];
 8008504:	2408      	movs	r4, #8
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	4050      	eors	r0, r2
            if (crc & 0x80) { // If MSB is 1
 800850a:	b242      	sxtb	r2, r0
                crc <<= 1;
 800850c:	0040      	lsls	r0, r0, #1
 800850e:	b2c0      	uxtb	r0, r0
            if (crc & 0x80) { // If MSB is 1
 8008510:	2a00      	cmp	r2, #0
 8008512:	da02      	bge.n	800851a <crc8_SMBUS_calculate+0x26>
                crc = (crc << 1) ^ CRC8_SMBUS_POLYNOMIAL;
 8008514:	0052      	lsls	r2, r2, #1
 8008516:	406a      	eors	r2, r5
 8008518:	b2d0      	uxtb	r0, r2
        for (int j = 0; j < 8; ++j) {
 800851a:	3c01      	subs	r4, #1
 800851c:	2c00      	cmp	r4, #0
 800851e:	d1f4      	bne.n	800850a <crc8_SMBUS_calculate+0x16>
    for (size_t i = 0; i < length; ++i) {
 8008520:	3301      	adds	r3, #1
 8008522:	e7ec      	b.n	80084fe <crc8_SMBUS_calculate+0xa>

08008524 <Rad_USBX_HID_ACK_response.isra.0>:

static UINT Rad_USBX_HID_ACK_response(const uint8_t cmd_id, const uint8_t parm_id, const uint8_t error_code) {
 8008524:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t tx_buf[64] = {0};
 8008526:	2740      	movs	r7, #64	@ 0x40
static UINT Rad_USBX_HID_ACK_response(const uint8_t cmd_id, const uint8_t parm_id, const uint8_t error_code) {
 8008528:	b091      	sub	sp, #68	@ 0x44
 800852a:	0006      	movs	r6, r0
 800852c:	000d      	movs	r5, r1
 800852e:	0014      	movs	r4, r2
    uint8_t tx_buf[64] = {0};
 8008530:	2100      	movs	r1, #0
 8008532:	003a      	movs	r2, r7
 8008534:	4668      	mov	r0, sp
 8008536:	f011 fd8b 	bl	801a050 <memset>

    // 1. start
    tx_buf[0] = DEVICE_PACKET_START_0;
 800853a:	4b09      	ldr	r3, [pc, #36]	@ (8008560 <Rad_USBX_HID_ACK_response.isra.0+0x3c>)
    // 4. data
    tx_buf[4] = cmd_id; // Command ID
    tx_buf[5] = parm_id; // Parameter ID
    tx_buf[6] = error_code; // Error code
    // 5. checksum
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 800853c:	2103      	movs	r1, #3
    tx_buf[0] = DEVICE_PACKET_START_0;
 800853e:	9300      	str	r3, [sp, #0]
    tx_buf[4] = cmd_id; // Command ID
 8008540:	466b      	mov	r3, sp
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008542:	a801      	add	r0, sp, #4
    tx_buf[4] = cmd_id; // Command ID
 8008544:	711e      	strb	r6, [r3, #4]
    tx_buf[5] = parm_id; // Parameter ID
 8008546:	715d      	strb	r5, [r3, #5]
    tx_buf[6] = error_code; // Error code
 8008548:	719c      	strb	r4, [r3, #6]
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 800854a:	f7ff ffd3 	bl	80084f4 <crc8_SMBUS_calculate>
 800854e:	466b      	mov	r3, sp

    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008550:	0039      	movs	r1, r7
    tx_buf[7] = crc8_SMBUS_calculate(&tx_buf[4], DEVICE_PACKET_ACKNOWLEDGE_LEN);
 8008552:	71d8      	strb	r0, [r3, #7]
    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008554:	4668      	mov	r0, sp
 8008556:	f010 fae5 	bl	8018b24 <USB_Send_HidReport>
}
 800855a:	b011      	add	sp, #68	@ 0x44
 800855c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855e:	46c0      	nop			@ (mov r8, r8)
 8008560:	03fe5555 	.word	0x03fe5555

08008564 <RAD_USBX_Device_Init>:
static void Rad_USBX_HID_Set_Command(const uint8_t parm_id);
static void Rad_USBX_HID_Get_Parameters(const uint8_t parm_id);
static void Rad_USBX_HID_Get_Records(const uint8_t parm_id);
static void Rad_USBX_HID_Set_Parameters(const uint8_t *data, const uint8_t len);

UINT RAD_USBX_Device_Init(void){
 8008564:	b570      	push	{r4, r5, r6, lr}
	UINT status  = 0;


	//Sometimes it fails to initiate device due to memory insufficient
	// add this flag to ensure initiate device successfully.
	status = MX_USBX_Device_Init();
 8008566:	f010 fa13 	bl	8018990 <MX_USBX_Device_Init>
 800856a:	1e04      	subs	r4, r0, #0
	if (status != 0) {
 800856c:	d005      	beq.n	800857a <RAD_USBX_Device_Init+0x16>
//FIXME: add debug level.
#if DEBUG_LOG ==1
		printf("Failed: MX_USBX_Device_Init status %x\n",status);
 800856e:	0021      	movs	r1, r4
 8008570:	481b      	ldr	r0, [pc, #108]	@ (80085e0 <RAD_USBX_Device_Init+0x7c>)
 8008572:	f011 fba1 	bl	8019cb8 <iprintf>
	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);

	HAL_PCD_Start(&hpcd_USB_DRD_FS);

	return status;
}
 8008576:	0020      	movs	r0, r4
 8008578:	bd70      	pop	{r4, r5, r6, pc}
	MX_USB_PCD_Init();
 800857a:	f7ff fe2b 	bl	80081d4 <MX_USB_PCD_Init>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x40);
 800857e:	4d19      	ldr	r5, [pc, #100]	@ (80085e4 <RAD_USBX_Device_Init+0x80>)
 8008580:	0022      	movs	r2, r4
 8008582:	0021      	movs	r1, r4
 8008584:	2340      	movs	r3, #64	@ 0x40
 8008586:	0028      	movs	r0, r5
 8008588:	f008 f825 	bl	80105d6 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x80);
 800858c:	2380      	movs	r3, #128	@ 0x80
 800858e:	0022      	movs	r2, r4
 8008590:	0019      	movs	r1, r3
 8008592:	0028      	movs	r0, r5
 8008594:	f008 f81f 	bl	80105d6 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x01, PCD_SNG_BUF, 0xC0);
 8008598:	0022      	movs	r2, r4
 800859a:	23c0      	movs	r3, #192	@ 0xc0
 800859c:	2101      	movs	r1, #1
 800859e:	0028      	movs	r0, r5
 80085a0:	f008 f819 	bl	80105d6 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x100);
 80085a4:	2380      	movs	r3, #128	@ 0x80
 80085a6:	0022      	movs	r2, r4
 80085a8:	2181      	movs	r1, #129	@ 0x81
 80085aa:	0028      	movs	r0, r5
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	f008 f812 	bl	80105d6 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x02, PCD_SNG_BUF, 0x140);
 80085b2:	23a0      	movs	r3, #160	@ 0xa0
 80085b4:	0022      	movs	r2, r4
 80085b6:	2102      	movs	r1, #2
 80085b8:	0028      	movs	r0, r5
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	f008 f80b 	bl	80105d6 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x82, PCD_SNG_BUF, 0x180);
 80085c0:	23c0      	movs	r3, #192	@ 0xc0
 80085c2:	0022      	movs	r2, r4
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	2182      	movs	r1, #130	@ 0x82
 80085c8:	0028      	movs	r0, r5
 80085ca:	f008 f804 	bl	80105d6 <HAL_PCDEx_PMAConfig>
	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);
 80085ce:	0029      	movs	r1, r5
 80085d0:	0020      	movs	r0, r4
 80085d2:	f00f ffff 	bl	80185d4 <_ux_dcd_stm32_initialize>
	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 80085d6:	0028      	movs	r0, r5
 80085d8:	f007 fa62 	bl	800faa0 <HAL_PCD_Start>
	return status;
 80085dc:	e7cb      	b.n	8008576 <RAD_USBX_Device_Init+0x12>
 80085de:	46c0      	nop			@ (mov r8, r8)
 80085e0:	0801d578 	.word	0x0801d578
 80085e4:	20000564 	.word	0x20000564

080085e8 <RAD_USBX_Device_Process>:

void RAD_USBX_Device_Process(void){
 80085e8:	b510      	push	{r4, lr}

	 ux_device_stack_tasks_run();
 80085ea:	f00d fef5 	bl	80163d8 <_ux_device_stack_tasks_run>

}
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <DeviceSetting_Send>:
    for (uint8_t i = 0; i < pkt->len; ++i)
        sum += pkt->data[i];
    return (uint8_t)(sum % 256);
}

int DeviceSetting_Send(const DeviceSettingPacket_t* pkt) {
 80085f0:	b570      	push	{r4, r5, r6, lr}
    uint8_t tx_buf[64] = {0};
 80085f2:	2640      	movs	r6, #64	@ 0x40
int DeviceSetting_Send(const DeviceSettingPacket_t* pkt) {
 80085f4:	b090      	sub	sp, #64	@ 0x40
 80085f6:	0004      	movs	r4, r0
    uint8_t tx_buf[64] = {0};
 80085f8:	0032      	movs	r2, r6
 80085fa:	2100      	movs	r1, #0
 80085fc:	4668      	mov	r0, sp
 80085fe:	f011 fd27 	bl	801a050 <memset>
    size_t idx = 0;

    // 1. start
    tx_buf[idx++] = pkt->start[0];
 8008602:	466a      	mov	r2, sp
 8008604:	7823      	ldrb	r3, [r4, #0]
    // 3. parm_id
    tx_buf[idx++] = pkt->parm_id;
    // 4. len
    tx_buf[idx++] = pkt->len;
    // 5. data
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 8008606:	1d61      	adds	r1, r4, #5
    tx_buf[idx++] = pkt->start[0];
 8008608:	7013      	strb	r3, [r2, #0]
    tx_buf[idx++] = pkt->start[1];
 800860a:	7863      	ldrb	r3, [r4, #1]
 800860c:	7053      	strb	r3, [r2, #1]
    tx_buf[idx++] = pkt->cmd_id;
 800860e:	78a3      	ldrb	r3, [r4, #2]
 8008610:	7093      	strb	r3, [r2, #2]
    tx_buf[idx++] = pkt->parm_id;
 8008612:	78e3      	ldrb	r3, [r4, #3]
 8008614:	70d3      	strb	r3, [r2, #3]
    tx_buf[idx++] = pkt->len;
 8008616:	466b      	mov	r3, sp
 8008618:	7925      	ldrb	r5, [r4, #4]
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 800861a:	1d58      	adds	r0, r3, #5
    tx_buf[idx++] = pkt->len;
 800861c:	7115      	strb	r5, [r2, #4]
    memcpy(&tx_buf[idx], pkt->data, pkt->len); idx += pkt->len;
 800861e:	002a      	movs	r2, r5
 8008620:	f011 fde0 	bl	801a1e4 <memcpy>
    // 5. checksum
    tx_buf[idx++] = pkt->checksum;
 8008624:	002b      	movs	r3, r5
 8008626:	343e      	adds	r4, #62	@ 0x3e
 8008628:	7822      	ldrb	r2, [r4, #0]
 800862a:	446b      	add	r3, sp

    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 800862c:	0031      	movs	r1, r6
 800862e:	4668      	mov	r0, sp
    tx_buf[idx++] = pkt->checksum;
 8008630:	715a      	strb	r2, [r3, #5]
    return USB_Send_HidReport(tx_buf, 64); // HID는 항상 64바이트
 8008632:	f010 fa77 	bl	8018b24 <USB_Send_HidReport>
}
 8008636:	b010      	add	sp, #64	@ 0x40
 8008638:	bd70      	pop	{r4, r5, r6, pc}
	...

0800863c <USB_HID_Send_Record>:

UINT USB_HID_Send_Record(const uint16_t record_idx)
{
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	0005      	movs	r5, r0
 8008640:	b096      	sub	sp, #88	@ 0x58
    // Read entry
    log_entry_t e = {0};
 8008642:	2215      	movs	r2, #21
 8008644:	2100      	movs	r1, #0
 8008646:	4668      	mov	r0, sp
 8008648:	f011 fd02 	bl	801a050 <memset>
    meas_data_log_read_entry(record_idx, &e);
 800864c:	4669      	mov	r1, sp
 800864e:	0028      	movs	r0, r5
 8008650:	f7ff feec 	bl	800842c <meas_data_log_read_entry>

    if (e.year == 0xFF) {
 8008654:	466b      	mov	r3, sp
 8008656:	789e      	ldrb	r6, [r3, #2]
 8008658:	2eff      	cmp	r6, #255	@ 0xff
 800865a:	d10a      	bne.n	8008672 <USB_HID_Send_Record+0x36>
        printf("[USB] Record %u has invalid year (0xFF), stop sending.\r\n", record_idx);
 800865c:	0029      	movs	r1, r5
 800865e:	4826      	ldr	r0, [pc, #152]	@ (80086f8 <USB_HID_Send_Record+0xbc>)
 8008660:	f011 fb2a 	bl	8019cb8 <iprintf>
        usbx_host_req_records = 0;  // 전송 종료 신호
 8008664:	2000      	movs	r0, #0
 8008666:	4b25      	ldr	r3, [pc, #148]	@ (80086fc <USB_HID_Send_Record+0xc0>)
 8008668:	6018      	str	r0, [r3, #0]
        cur_record_num = 0;
 800866a:	4b25      	ldr	r3, [pc, #148]	@ (8008700 <USB_HID_Send_Record+0xc4>)
 800866c:	6018      	str	r0, [r3, #0]

    //FIXME: Change to CRC8_STANDARD func.
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);

    return DeviceSetting_Send(&pkt);
}
 800866e:	b016      	add	sp, #88	@ 0x58
 8008670:	bd70      	pop	{r4, r5, r6, pc}
    DeviceSettingPacket_t pkt = {0};
 8008672:	201b      	movs	r0, #27
 8008674:	223c      	movs	r2, #60	@ 0x3c
 8008676:	2100      	movs	r1, #0
 8008678:	4468      	add	r0, sp
 800867a:	f011 fce9 	bl	801a050 <memset>
    pkt.start[0] = DEVICE_PACKET_START_0;
 800867e:	2355      	movs	r3, #85	@ 0x55
    DeviceSettingPacket_t pkt = {0};
 8008680:	ac06      	add	r4, sp, #24
    pkt.start[0] = DEVICE_PACKET_START_0;
 8008682:	7023      	strb	r3, [r4, #0]
    pkt.start[1] = DEVICE_PACKET_START_1;
 8008684:	7063      	strb	r3, [r4, #1]
    pkt.len      = DEVICE_CID_GET_RECRORDS_RESP_LEN;
 8008686:	2111      	movs	r1, #17
    pkt.cmd_id   = DEVICE_CID_GET_RECRORDS_RESP;
 8008688:	3b43      	subs	r3, #67	@ 0x43
 800868a:	70a3      	strb	r3, [r4, #2]
    pkt.data[3] = e.month;
 800868c:	466b      	mov	r3, sp
    pkt.data[0] = record_idx & 0xFF;
 800868e:	7165      	strb	r5, [r4, #5]
    pkt.data[1] = (record_idx >> 8) & 0xFF;
 8008690:	0a2d      	lsrs	r5, r5, #8
    pkt.len      = DEVICE_CID_GET_RECRORDS_RESP_LEN;
 8008692:	7121      	strb	r1, [r4, #4]
    pkt.data[1] = (record_idx >> 8) & 0xFF;
 8008694:	71a5      	strb	r5, [r4, #6]
    pkt.data[2] = e.year;
 8008696:	71e6      	strb	r6, [r4, #7]
    pkt.data[3] = e.month;
 8008698:	78db      	ldrb	r3, [r3, #3]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 800869a:	201d      	movs	r0, #29
    pkt.data[3] = e.month;
 800869c:	7223      	strb	r3, [r4, #8]
    pkt.data[4] = e.day;
 800869e:	466b      	mov	r3, sp
 80086a0:	791b      	ldrb	r3, [r3, #4]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 80086a2:	4468      	add	r0, sp
    pkt.data[4] = e.day;
 80086a4:	7263      	strb	r3, [r4, #9]
    pkt.data[5] = e.hour;
 80086a6:	466b      	mov	r3, sp
 80086a8:	795b      	ldrb	r3, [r3, #5]
 80086aa:	72a3      	strb	r3, [r4, #10]
    pkt.data[6] = e.minute;
 80086ac:	466b      	mov	r3, sp
 80086ae:	799b      	ldrb	r3, [r3, #6]
 80086b0:	72e3      	strb	r3, [r4, #11]
    pkt.data[7] = e.second;
 80086b2:	466b      	mov	r3, sp
 80086b4:	79db      	ldrb	r3, [r3, #7]
 80086b6:	7323      	strb	r3, [r4, #12]
    pkt.data[8]  = e.temperature & 0xFF;
 80086b8:	466b      	mov	r3, sp
 80086ba:	220a      	movs	r2, #10
 80086bc:	5e9b      	ldrsh	r3, [r3, r2]
 80086be:	7363      	strb	r3, [r4, #13]
    pkt.data[9]  = (e.temperature >> 8) & 0xFF;
 80086c0:	121b      	asrs	r3, r3, #8
 80086c2:	73a3      	strb	r3, [r4, #14]
    pkt.data[10] = e.count & 0xFF;
 80086c4:	466b      	mov	r3, sp
 80086c6:	891b      	ldrh	r3, [r3, #8]
 80086c8:	73e3      	strb	r3, [r4, #15]
    pkt.data[11] = (e.count >> 8) & 0xFF;
 80086ca:	0a1b      	lsrs	r3, r3, #8
 80086cc:	7423      	strb	r3, [r4, #16]
    pkt.data[12] = e.dose & 0xFF;
 80086ce:	9b03      	ldr	r3, [sp, #12]
    pkt.data[13] = (e.dose >> 8) & 0xFF;
 80086d0:	0a1a      	lsrs	r2, r3, #8
    pkt.data[12] = e.dose & 0xFF;
 80086d2:	7463      	strb	r3, [r4, #17]
    pkt.data[13] = (e.dose >> 8) & 0xFF;
 80086d4:	74a2      	strb	r2, [r4, #18]
    pkt.data[14] = (e.dose >> 16) & 0xFF;
 80086d6:	0c1a      	lsrs	r2, r3, #16
    pkt.data[15] = (e.dose >> 24) & 0xFF;
 80086d8:	0e1b      	lsrs	r3, r3, #24
 80086da:	7523      	strb	r3, [r4, #20]
    pkt.data[16] = e.mark;
 80086dc:	466b      	mov	r3, sp
    pkt.data[14] = (e.dose >> 16) & 0xFF;
 80086de:	74e2      	strb	r2, [r4, #19]
    pkt.data[16] = e.mark;
 80086e0:	7c1b      	ldrb	r3, [r3, #16]
 80086e2:	7563      	strb	r3, [r4, #21]
    pkt.checksum = crc8_SMBUS_calculate(pkt.data, pkt.len);
 80086e4:	f7ff ff06 	bl	80084f4 <crc8_SMBUS_calculate>
 80086e8:	2356      	movs	r3, #86	@ 0x56
 80086ea:	446b      	add	r3, sp
 80086ec:	7018      	strb	r0, [r3, #0]
    return DeviceSetting_Send(&pkt);
 80086ee:	0020      	movs	r0, r4
 80086f0:	f7ff ff7e 	bl	80085f0 <DeviceSetting_Send>
 80086f4:	e7bb      	b.n	800866e <USB_HID_Send_Record+0x32>
 80086f6:	46c0      	nop			@ (mov r8, r8)
 80086f8:	0801d59f 	.word	0x0801d59f
 80086fc:	20000b74 	.word	0x20000b74
 8008700:	200004f4 	.word	0x200004f4

08008704 <USB_HID_Receive>:


void USB_HID_Receive(uint8_t* data, ULONG* len)
{
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	b0a1      	sub	sp, #132	@ 0x84
 8008708:	0007      	movs	r7, r0
 800870a:	9106      	str	r1, [sp, #24]
    uint8_t cmd_id =0;
    uint8_t parm_id = 0;
    uint8_t checksum = 0;
    uint8_t payload_len = 0;

    if (USB_Get_HidReport(data, len) == 1) {
 800870c:	f010 fa2e 	bl	8018b6c <USB_Get_HidReport>
 8008710:	2801      	cmp	r0, #1
 8008712:	d00c      	beq.n	800872e <USB_HID_Receive+0x2a>
        // No new data available
        return;
    }
    if (*len == 0)  {
 8008714:	9b06      	ldr	r3, [sp, #24]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <USB_HID_Receive+0x2a>
        // It should never happen, but just in case.
        return;
    }

    if (data[0] != 0x55 || data[1] != 0x55) {
 800871c:	7839      	ldrb	r1, [r7, #0]
 800871e:	787a      	ldrb	r2, [r7, #1]
 8008720:	2955      	cmp	r1, #85	@ 0x55
 8008722:	d101      	bne.n	8008728 <USB_HID_Receive+0x24>
 8008724:	2a55      	cmp	r2, #85	@ 0x55
 8008726:	d004      	beq.n	8008732 <USB_HID_Receive+0x2e>
        printf("[USB] Invalid Start Byte: %02X %02X\n", data[0], data[1]);
 8008728:	48d0      	ldr	r0, [pc, #832]	@ (8008a6c <USB_HID_Receive+0x368>)
 800872a:	f011 fac5 	bl	8019cb8 <iprintf>
        break;
    }

    memset(data, 0, *len);
    *len = 0;
}
 800872e:	b021      	add	sp, #132	@ 0x84
 8008730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    parm_id = data[3];
 8008732:	78fb      	ldrb	r3, [r7, #3]
    checksum = data[5 + payload_len];
 8008734:	793e      	ldrb	r6, [r7, #4]
    parm_id = data[3];
 8008736:	9305      	str	r3, [sp, #20]
    checksum = data[5 + payload_len];
 8008738:	19bb      	adds	r3, r7, r6
 800873a:	795b      	ldrb	r3, [r3, #5]
    printf("[USB][RX] ");
 800873c:	48cc      	ldr	r0, [pc, #816]	@ (8008a70 <USB_HID_Receive+0x36c>)
    cmd_id = data[2];
 800873e:	78bd      	ldrb	r5, [r7, #2]
    checksum = data[5 + payload_len];
 8008740:	9307      	str	r3, [sp, #28]
    for (int i = 0; i < *len; i++)
 8008742:	2400      	movs	r4, #0
    printf("[USB][RX] ");
 8008744:	f011 fab8 	bl	8019cb8 <iprintf>
    for (int i = 0; i < *len; i++)
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	42a3      	cmp	r3, r4
 800874e:	d816      	bhi.n	800877e <USB_HID_Receive+0x7a>
    printf("\n");
 8008750:	200a      	movs	r0, #10
 8008752:	f011 fac1 	bl	8019cd8 <putchar>
    printf("[USB][PARSE] cmd_id=0x%02X, len=%u, payload=0x%02X, checksum=0x%02X\n",
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	0032      	movs	r2, r6
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	0029      	movs	r1, r5
 800875e:	48c5      	ldr	r0, [pc, #788]	@ (8008a74 <USB_HID_Receive+0x370>)
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	f011 faa9 	bl	8019cb8 <iprintf>
    switch (cmd_id) {
 8008766:	1e68      	subs	r0, r5, #1
 8008768:	2804      	cmp	r0, #4
 800876a:	d901      	bls.n	8008770 <USB_HID_Receive+0x6c>
 800876c:	f000 fe2c 	bl	80093c8 <USB_HID_Receive+0xcc4>
 8008770:	f7f7 fcf0 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008774:	0318000b 	.word	0x0318000b
 8008778:	0573031c 	.word	0x0573031c
 800877c:	060e      	.short	0x060e
        printf("%02X ", data[i]);
 800877e:	5d39      	ldrb	r1, [r7, r4]
 8008780:	48bd      	ldr	r0, [pc, #756]	@ (8008a78 <USB_HID_Receive+0x374>)
 8008782:	f011 fa99 	bl	8019cb8 <iprintf>
    for (int i = 0; i < *len; i++)
 8008786:	3401      	adds	r4, #1
 8008788:	e7de      	b.n	8008748 <USB_HID_Receive+0x44>
//    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
//
//    DeviceSetting_Send(&response_pkt);
//}
static void Rad_USBX_HID_Get_Parameters(const uint8_t parm_id) {
    DeviceSettingPacket_t response_pkt = {0};
 800878a:	ac10      	add	r4, sp, #64	@ 0x40
 800878c:	223f      	movs	r2, #63	@ 0x3f
 800878e:	2100      	movs	r1, #0
 8008790:	0020      	movs	r0, r4
 8008792:	f011 fc5d 	bl	801a050 <memset>

    printf("[USB][GET_PARAM] parm_id=0x%02X\n", parm_id);
 8008796:	48b9      	ldr	r0, [pc, #740]	@ (8008a7c <USB_HID_Receive+0x378>)
 8008798:	9905      	ldr	r1, [sp, #20]
 800879a:	f011 fa8d 	bl	8019cb8 <iprintf>

    switch (parm_id)
 800879e:	9b05      	ldr	r3, [sp, #20]
 80087a0:	1e58      	subs	r0, r3, #1
 80087a2:	281f      	cmp	r0, #31
 80087a4:	d900      	bls.n	80087a8 <USB_HID_Receive+0xa4>
 80087a6:	e2f3      	b.n	8008d90 <USB_HID_Receive+0x68c>
 80087a8:	f7f7 fcd4 	bl	8000154 <__gnu_thumb1_case_uhi>
 80087ac:	00570020 	.word	0x00570020
 80087b0:	005d005a 	.word	0x005d005a
 80087b4:	006a0066 	.word	0x006a0066
 80087b8:	0081006e 	.word	0x0081006e
 80087bc:	00880084 	.word	0x00880084
 80087c0:	00cd00af 	.word	0x00cd00af
 80087c4:	011a00d1 	.word	0x011a00d1
 80087c8:	01540136 	.word	0x01540136
 80087cc:	015c0158 	.word	0x015c0158
 80087d0:	01f601b8 	.word	0x01f601b8
 80087d4:	025a022d 	.word	0x025a022d
 80087d8:	02b40287 	.word	0x02b40287
 80087dc:	02f202e1 	.word	0x02f202e1
 80087e0:	02f202f2 	.word	0x02f202f2
 80087e4:	02f202f2 	.word	0x02f202f2
 80087e8:	015202f2 	.word	0x015202f2
    {
    case DEVICE_PID_DEVICE_CODE:
        printf("[USB][GET_PARAM] DEVICE_CODE -> %s\n", current_settings.device_code);
 80087ec:	4da4      	ldr	r5, [pc, #656]	@ (8008a80 <USB_HID_Receive+0x37c>)
 80087ee:	48a5      	ldr	r0, [pc, #660]	@ (8008a84 <USB_HID_Receive+0x380>)
        memcpy(response_pkt.data, current_settings.device_code, strlen((const char*)current_settings.device_code));
        response_pkt.len = strlen((const char*)current_settings.device_code);
        break;

    case DEVICE_PID_SERIAL_NUMBER:
        printf("[USB][GET_PARAM] SERIAL -> %s\n", current_settings.serial);
 80087f0:	0029      	movs	r1, r5
 80087f2:	f011 fa61 	bl	8019cb8 <iprintf>
        memcpy(response_pkt.data, current_settings.serial, strlen((const char*)current_settings.serial));
 80087f6:	0028      	movs	r0, r5
 80087f8:	f7f7 fc86 	bl	8000108 <strlen>
 80087fc:	0002      	movs	r2, r0
 80087fe:	202d      	movs	r0, #45	@ 0x2d
 8008800:	ab06      	add	r3, sp, #24
 8008802:	0029      	movs	r1, r5
 8008804:	18c0      	adds	r0, r0, r3
 8008806:	f011 fced 	bl	801a1e4 <memcpy>
        response_pkt.len = strlen((const char*)current_settings.serial);
 800880a:	0028      	movs	r0, r5
 800880c:	f7f7 fc7c 	bl	8000108 <strlen>
 8008810:	7120      	strb	r0, [r4, #4]
        printf("[USB][GET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
        Rad_USBX_HID_ACK_response(DEVICE_CID_GET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
        return;
    }

    response_pkt.start[0] = DEVICE_PACKET_START_0;
 8008812:	4b9d      	ldr	r3, [pc, #628]	@ (8008a88 <USB_HID_Receive+0x384>)
 8008814:	ac10      	add	r4, sp, #64	@ 0x40
 8008816:	8023      	strh	r3, [r4, #0]
    response_pkt.start[1] = DEVICE_PACKET_START_1;
    response_pkt.cmd_id   = DEVICE_CID_GET_PARAMETERS_RESP;
 8008818:	2311      	movs	r3, #17
    response_pkt.parm_id  = parm_id;
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 800881a:	202d      	movs	r0, #45	@ 0x2d
    response_pkt.cmd_id   = DEVICE_CID_GET_PARAMETERS_RESP;
 800881c:	70a3      	strb	r3, [r4, #2]
    response_pkt.parm_id  = parm_id;
 800881e:	9b05      	ldr	r3, [sp, #20]
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008820:	7925      	ldrb	r5, [r4, #4]
    response_pkt.parm_id  = parm_id;
 8008822:	70e3      	strb	r3, [r4, #3]
    response_pkt.checksum = crc8_SMBUS_calculate(response_pkt.data, response_pkt.len);
 8008824:	ab06      	add	r3, sp, #24
 8008826:	0029      	movs	r1, r5
 8008828:	18c0      	adds	r0, r0, r3
 800882a:	f7ff fe63 	bl	80084f4 <crc8_SMBUS_calculate>
 800882e:	2366      	movs	r3, #102	@ 0x66
 8008830:	a906      	add	r1, sp, #24
 8008832:	185b      	adds	r3, r3, r1
 8008834:	0002      	movs	r2, r0
 8008836:	7018      	strb	r0, [r3, #0]

    printf("[USB][GET_PARAM] Sending response (len=%u, checksum=0x%02X)\n",
 8008838:	0029      	movs	r1, r5
 800883a:	4894      	ldr	r0, [pc, #592]	@ (8008a8c <USB_HID_Receive+0x388>)
 800883c:	f011 fa3c 	bl	8019cb8 <iprintf>
           response_pkt.len, response_pkt.checksum);

    DeviceSetting_Send(&response_pkt);
 8008840:	0020      	movs	r0, r4
 8008842:	f7ff fed5 	bl	80085f0 <DeviceSetting_Send>
    memset(data, 0, *len);
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	2100      	movs	r1, #0
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	0038      	movs	r0, r7
 800884e:	f011 fbff 	bl	801a050 <memset>
    *len = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	9a06      	ldr	r2, [sp, #24]
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	e769      	b.n	800872e <USB_HID_Receive+0x2a>
        printf("[USB][GET_PARAM] SERIAL -> %s\n", current_settings.serial);
 800885a:	4d8d      	ldr	r5, [pc, #564]	@ (8008a90 <USB_HID_Receive+0x38c>)
 800885c:	488d      	ldr	r0, [pc, #564]	@ (8008a94 <USB_HID_Receive+0x390>)
 800885e:	e7c7      	b.n	80087f0 <USB_HID_Receive+0xec>
        printf("[USB][GET_PARAM] FW_VER -> %s\n", current_settings.firmware_ver);
 8008860:	4d8d      	ldr	r5, [pc, #564]	@ (8008a98 <USB_HID_Receive+0x394>)
 8008862:	488e      	ldr	r0, [pc, #568]	@ (8008a9c <USB_HID_Receive+0x398>)
 8008864:	e7c4      	b.n	80087f0 <USB_HID_Receive+0xec>
        printf("[USB][GET_PARAM] RECORDING_TYPE -> %u\n", current_settings.sensor_type);
 8008866:	4d8e      	ldr	r5, [pc, #568]	@ (8008aa0 <USB_HID_Receive+0x39c>)
 8008868:	488e      	ldr	r0, [pc, #568]	@ (8008aa4 <USB_HID_Receive+0x3a0>)
 800886a:	7829      	ldrb	r1, [r5, #0]
        printf("[USB][GET_PARAM] RAD_UNIT -> %u\n", current_settings.display_dose_unit);
 800886c:	f011 fa24 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = current_settings.display_dose_unit;
 8008870:	782b      	ldrb	r3, [r5, #0]
 8008872:	7163      	strb	r3, [r4, #5]
        response_pkt.len = 1;
 8008874:	2301      	movs	r3, #1
 8008876:	e018      	b.n	80088aa <USB_HID_Receive+0x1a6>
        printf("[USB][GET_PARAM] BATTERY_LEVEL not supported\n");
 8008878:	488b      	ldr	r0, [pc, #556]	@ (8008aa8 <USB_HID_Receive+0x3a4>)
        printf("[USB][GET_PARAM] LOGGING_DURATION not supported\n");
 800887a:	f011 fa8d 	bl	8019d98 <puts>
        break;
 800887e:	e7c8      	b.n	8008812 <USB_HID_Receive+0x10e>
        printf("[USB][GET_PARAM] DEVICE_STATUS -> %u\n", current_settings.mode_status);
 8008880:	4d8a      	ldr	r5, [pc, #552]	@ (8008aac <USB_HID_Receive+0x3a8>)
 8008882:	488b      	ldr	r0, [pc, #556]	@ (8008ab0 <USB_HID_Receive+0x3ac>)
 8008884:	7829      	ldrb	r1, [r5, #0]
 8008886:	e7f1      	b.n	800886c <USB_HID_Receive+0x168>
        printf("[USB][GET_PARAM] TRIP_CODE -> %u\n", current_settings.trip_code);
 8008888:	4d8a      	ldr	r5, [pc, #552]	@ (8008ab4 <USB_HID_Receive+0x3b0>)
 800888a:	4e8b      	ldr	r6, [pc, #556]	@ (8008ab8 <USB_HID_Receive+0x3b4>)
 800888c:	7829      	ldrb	r1, [r5, #0]
 800888e:	7833      	ldrb	r3, [r6, #0]
 8008890:	0209      	lsls	r1, r1, #8
 8008892:	4319      	orrs	r1, r3
 8008894:	4889      	ldr	r0, [pc, #548]	@ (8008abc <USB_HID_Receive+0x3b8>)
 8008896:	f011 fa0f 	bl	8019cb8 <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.trip_code, response_pkt.data[0], response_pkt.data[1]);
 800889a:	782b      	ldrb	r3, [r5, #0]
 800889c:	7832      	ldrb	r2, [r6, #0]
 800889e:	021b      	lsls	r3, r3, #8
 80088a0:	4313      	orrs	r3, r2
 80088a2:	7163      	strb	r3, [r4, #5]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	71a3      	strb	r3, [r4, #6]
        response_pkt.len = 2;
 80088a8:	2302      	movs	r3, #2
        response_pkt.len = 4;
 80088aa:	7123      	strb	r3, [r4, #4]
        break;
 80088ac:	e7b1      	b.n	8008812 <USB_HID_Receive+0x10e>
        printf("[USB][GET_PARAM] TRIP_DESCRIPTION -> %s\n", current_settings.trip_desc);
 80088ae:	4d84      	ldr	r5, [pc, #528]	@ (8008ac0 <USB_HID_Receive+0x3bc>)
 80088b0:	4884      	ldr	r0, [pc, #528]	@ (8008ac4 <USB_HID_Receive+0x3c0>)
 80088b2:	e79d      	b.n	80087f0 <USB_HID_Receive+0xec>
        printf("[USB][GET_PARAM] START_MODE -> %u\n", current_settings.start_mode);
 80088b4:	4d84      	ldr	r5, [pc, #528]	@ (8008ac8 <USB_HID_Receive+0x3c4>)
 80088b6:	4885      	ldr	r0, [pc, #532]	@ (8008acc <USB_HID_Receive+0x3c8>)
 80088b8:	7829      	ldrb	r1, [r5, #0]
 80088ba:	e7d7      	b.n	800886c <USB_HID_Receive+0x168>
        printf("[USB][GET_PARAM] START_DELAY -> %u\n", current_settings.start_delay);
 80088bc:	4c70      	ldr	r4, [pc, #448]	@ (8008a80 <USB_HID_Receive+0x37c>)
 80088be:	4b84      	ldr	r3, [pc, #528]	@ (8008ad0 <USB_HID_Receive+0x3cc>)
 80088c0:	0026      	movs	r6, r4
 80088c2:	0025      	movs	r5, r4
 80088c4:	9307      	str	r3, [sp, #28]
 80088c6:	366f      	adds	r6, #111	@ 0x6f
 80088c8:	7832      	ldrb	r2, [r6, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	3570      	adds	r5, #112	@ 0x70
 80088ce:	0212      	lsls	r2, r2, #8
 80088d0:	431a      	orrs	r2, r3
 80088d2:	3471      	adds	r4, #113	@ 0x71
 80088d4:	782b      	ldrb	r3, [r5, #0]
 80088d6:	7821      	ldrb	r1, [r4, #0]
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	4313      	orrs	r3, r2
 80088dc:	0609      	lsls	r1, r1, #24
 80088de:	4319      	orrs	r1, r3
 80088e0:	487c      	ldr	r0, [pc, #496]	@ (8008ad4 <USB_HID_Receive+0x3d0>)
 80088e2:	f011 f9e9 	bl	8019cb8 <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.start_delay, response_pkt.data[0], response_pkt.data[1]);
 80088e6:	9b07      	ldr	r3, [sp, #28]
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	7833      	ldrb	r3, [r6, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	4313      	orrs	r3, r2
 80088f0:	782a      	ldrb	r2, [r5, #0]
 80088f2:	0412      	lsls	r2, r2, #16
 80088f4:	431a      	orrs	r2, r3
 80088f6:	7823      	ldrb	r3, [r4, #0]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	4313      	orrs	r3, r2
 80088fc:	aa10      	add	r2, sp, #64	@ 0x40
 80088fe:	7153      	strb	r3, [r2, #5]
 8008900:	0a1b      	lsrs	r3, r3, #8
 8008902:	7193      	strb	r3, [r2, #6]
        response_pkt.len = 2;
 8008904:	2302      	movs	r3, #2
        response_pkt.len = 5;
 8008906:	7113      	strb	r3, [r2, #4]
        break;
 8008908:	e783      	b.n	8008812 <USB_HID_Receive+0x10e>
        uint32_t epoch = current_settings.start_reservation_time;
 800890a:	4b5d      	ldr	r3, [pc, #372]	@ (8008a80 <USB_HID_Receive+0x37c>)
 800890c:	4a72      	ldr	r2, [pc, #456]	@ (8008ad8 <USB_HID_Receive+0x3d4>)
 800890e:	0019      	movs	r1, r3
 8008910:	31b0      	adds	r1, #176	@ 0xb0
 8008912:	7809      	ldrb	r1, [r1, #0]
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	0209      	lsls	r1, r1, #8
 8008918:	4311      	orrs	r1, r2
 800891a:	001a      	movs	r2, r3
 800891c:	32b1      	adds	r2, #177	@ 0xb1
 800891e:	7812      	ldrb	r2, [r2, #0]
 8008920:	33b2      	adds	r3, #178	@ 0xb2
 8008922:	0412      	lsls	r2, r2, #16
 8008924:	430a      	orrs	r2, r1
 8008926:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] START_TIME -> epoch=%lu\n", (unsigned long)epoch);
 8008928:	486c      	ldr	r0, [pc, #432]	@ (8008adc <USB_HID_Receive+0x3d8>)
        uint32_t epoch = current_settings.start_reservation_time;
 800892a:	0609      	lsls	r1, r1, #24
 800892c:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((epoch >> 8) & 0xFF);
 800892e:	0a0b      	lsrs	r3, r1, #8
 8008930:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((epoch >> 16) & 0xFF);
 8008932:	0c0b      	lsrs	r3, r1, #16
 8008934:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((epoch >> 24) & 0xFF);
 8008936:	0e0b      	lsrs	r3, r1, #24
 8008938:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 800893a:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(epoch & 0xFF);
 800893c:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 800893e:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008940:	f011 f9ba 	bl	8019cb8 <iprintf>
        break;
 8008944:	e765      	b.n	8008812 <USB_HID_Receive+0x10e>
        printf("[USB][GET_PARAM] PAUSE -> %u\n", current_settings.pause_enable);
 8008946:	4d66      	ldr	r5, [pc, #408]	@ (8008ae0 <USB_HID_Receive+0x3dc>)
 8008948:	4866      	ldr	r0, [pc, #408]	@ (8008ae4 <USB_HID_Receive+0x3e0>)
 800894a:	7829      	ldrb	r1, [r5, #0]
 800894c:	e78e      	b.n	800886c <USB_HID_Receive+0x168>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800894e:	4e66      	ldr	r6, [pc, #408]	@ (8008ae8 <USB_HID_Receive+0x3e4>)
 8008950:	ac0b      	add	r4, sp, #44	@ 0x2c
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8008952:	ad0a      	add	r5, sp, #40	@ 0x28
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8008954:	0021      	movs	r1, r4
 8008956:	2201      	movs	r2, #1
 8008958:	0030      	movs	r0, r6
 800895a:	f009 f8bb 	bl	8011ad4 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800895e:	0029      	movs	r1, r5
 8008960:	2201      	movs	r2, #1
 8008962:	0030      	movs	r0, r6
 8008964:	f009 f8e8 	bl	8011b38 <HAL_RTC_GetDate>
        response_pkt.data[0] = BCD2BIN(sDate.Year);
 8008968:	220a      	movs	r2, #10
 800896a:	260f      	movs	r6, #15
 800896c:	78e9      	ldrb	r1, [r5, #3]
 800896e:	a810      	add	r0, sp, #64	@ 0x40
 8008970:	090b      	lsrs	r3, r1, #4
 8008972:	4353      	muls	r3, r2
 8008974:	4031      	ands	r1, r6
 8008976:	185b      	adds	r3, r3, r1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	7143      	strb	r3, [r0, #5]
 800897c:	9307      	str	r3, [sp, #28]
        response_pkt.data[1] = BCD2BIN(sDate.Month);
 800897e:	7869      	ldrb	r1, [r5, #1]
 8008980:	090b      	lsrs	r3, r1, #4
 8008982:	4353      	muls	r3, r2
 8008984:	4031      	ands	r1, r6
 8008986:	185b      	adds	r3, r3, r1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	7183      	strb	r3, [r0, #6]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 800898c:	78a9      	ldrb	r1, [r5, #2]
        response_pkt.data[1] = BCD2BIN(sDate.Month);
 800898e:	469c      	mov	ip, r3
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008990:	090b      	lsrs	r3, r1, #4
 8008992:	4353      	muls	r3, r2
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 8008994:	7825      	ldrb	r5, [r4, #0]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 8008996:	4031      	ands	r1, r6
 8008998:	185b      	adds	r3, r3, r1
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 800899a:	0929      	lsrs	r1, r5, #4
 800899c:	4351      	muls	r1, r2
 800899e:	4035      	ands	r5, r6
 80089a0:	1949      	adds	r1, r1, r5
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 80089a2:	b2db      	uxtb	r3, r3
        response_pkt.data[3] = BCD2BIN(sTime.Hours);
 80089a4:	b2c9      	uxtb	r1, r1
 80089a6:	7201      	strb	r1, [r0, #8]
        response_pkt.data[2] = BCD2BIN(sDate.Date);
 80089a8:	71c3      	strb	r3, [r0, #7]
 80089aa:	9308      	str	r3, [sp, #32]
        response_pkt.data[4] = BCD2BIN(sTime.Minutes);
 80089ac:	7863      	ldrb	r3, [r4, #1]
 80089ae:	091d      	lsrs	r5, r3, #4
 80089b0:	4355      	muls	r5, r2
 80089b2:	4033      	ands	r3, r6
 80089b4:	18ed      	adds	r5, r5, r3
 80089b6:	b2ed      	uxtb	r5, r5
 80089b8:	7245      	strb	r5, [r0, #9]
        response_pkt.data[5] = BCD2BIN(sTime.Seconds);
 80089ba:	78a4      	ldrb	r4, [r4, #2]
 80089bc:	0923      	lsrs	r3, r4, #4
 80089be:	435a      	muls	r2, r3
 80089c0:	4034      	ands	r4, r6
 80089c2:	1912      	adds	r2, r2, r4
        response_pkt.len = 6;
 80089c4:	2406      	movs	r4, #6
        response_pkt.data[5] = BCD2BIN(sTime.Seconds);
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	7282      	strb	r2, [r0, #10]
        response_pkt.len = 6;
 80089ca:	7104      	strb	r4, [r0, #4]
        printf("[USB][GET_PARAM] DEVICE_TIME -> 20%02u-%02u-%02u %02u:%02u:%02u\n",
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	9202      	str	r2, [sp, #8]
 80089d0:	9100      	str	r1, [sp, #0]
 80089d2:	4662      	mov	r2, ip
 80089d4:	9907      	ldr	r1, [sp, #28]
 80089d6:	9501      	str	r5, [sp, #4]
 80089d8:	4844      	ldr	r0, [pc, #272]	@ (8008aec <USB_HID_Receive+0x3e8>)
 80089da:	f011 f96d 	bl	8019cb8 <iprintf>
        break;
 80089de:	e718      	b.n	8008812 <USB_HID_Receive+0x10e>
        uint32_t v = (uint32_t)current_settings.temp_interval;
 80089e0:	4b27      	ldr	r3, [pc, #156]	@ (8008a80 <USB_HID_Receive+0x37c>)
 80089e2:	4a43      	ldr	r2, [pc, #268]	@ (8008af0 <USB_HID_Receive+0x3ec>)
 80089e4:	0019      	movs	r1, r3
 80089e6:	3180      	adds	r1, #128	@ 0x80
 80089e8:	7809      	ldrb	r1, [r1, #0]
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	0209      	lsls	r1, r1, #8
 80089ee:	4311      	orrs	r1, r2
 80089f0:	001a      	movs	r2, r3
 80089f2:	3281      	adds	r2, #129	@ 0x81
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	3382      	adds	r3, #130	@ 0x82
 80089f8:	0412      	lsls	r2, r2, #16
 80089fa:	430a      	orrs	r2, r1
 80089fc:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] TEMP_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 80089fe:	483d      	ldr	r0, [pc, #244]	@ (8008af4 <USB_HID_Receive+0x3f0>)
        uint32_t v = (uint32_t)current_settings.temp_interval;
 8008a00:	0609      	lsls	r1, r1, #24
 8008a02:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008a04:	0a0b      	lsrs	r3, r1, #8
 8008a06:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008a08:	0c0b      	lsrs	r3, r1, #16
 8008a0a:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008a0c:	0e0b      	lsrs	r3, r1, #24
 8008a0e:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008a10:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008a12:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008a14:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] TEMP_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008a16:	e793      	b.n	8008940 <USB_HID_Receive+0x23c>
        uint32_t v = (uint32_t)current_settings.rad_interval; // 구조체가 u16이면 상위는 0
 8008a18:	4b19      	ldr	r3, [pc, #100]	@ (8008a80 <USB_HID_Receive+0x37c>)
 8008a1a:	4a37      	ldr	r2, [pc, #220]	@ (8008af8 <USB_HID_Receive+0x3f4>)
 8008a1c:	0019      	movs	r1, r3
 8008a1e:	317c      	adds	r1, #124	@ 0x7c
 8008a20:	7809      	ldrb	r1, [r1, #0]
 8008a22:	7812      	ldrb	r2, [r2, #0]
 8008a24:	0209      	lsls	r1, r1, #8
 8008a26:	4311      	orrs	r1, r2
 8008a28:	001a      	movs	r2, r3
 8008a2a:	327d      	adds	r2, #125	@ 0x7d
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	337e      	adds	r3, #126	@ 0x7e
 8008a30:	0412      	lsls	r2, r2, #16
 8008a32:	430a      	orrs	r2, r1
 8008a34:	7819      	ldrb	r1, [r3, #0]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008a36:	4831      	ldr	r0, [pc, #196]	@ (8008afc <USB_HID_Receive+0x3f8>)
        uint32_t v = (uint32_t)current_settings.rad_interval; // 구조체가 u16이면 상위는 0
 8008a38:	0609      	lsls	r1, r1, #24
 8008a3a:	4311      	orrs	r1, r2
        response_pkt.data[1] = (uint8_t)((v >> 8) & 0xFF);
 8008a3c:	0a0b      	lsrs	r3, r1, #8
 8008a3e:	71a3      	strb	r3, [r4, #6]
        response_pkt.data[2] = (uint8_t)((v >> 16) & 0xFF);
 8008a40:	0c0b      	lsrs	r3, r1, #16
 8008a42:	71e3      	strb	r3, [r4, #7]
        response_pkt.data[3] = (uint8_t)((v >> 24) & 0xFF);
 8008a44:	0e0b      	lsrs	r3, r1, #24
 8008a46:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008a48:	2304      	movs	r3, #4
        response_pkt.data[0] = (uint8_t)(v & 0xFF);
 8008a4a:	7161      	strb	r1, [r4, #5]
        response_pkt.len = 4;
 8008a4c:	7123      	strb	r3, [r4, #4]
        printf("[USB][GET_PARAM] RAD_LOGGING_INTERVAL -> %lu sec (len=4)\n", (unsigned long)v);
 8008a4e:	e777      	b.n	8008940 <USB_HID_Receive+0x23c>
        printf("[USB][GET_PARAM] LOGGING_DURATION not supported\n");
 8008a50:	482b      	ldr	r0, [pc, #172]	@ (8008b00 <USB_HID_Receive+0x3fc>)
 8008a52:	e712      	b.n	800887a <USB_HID_Receive+0x176>
        printf("[USB][GET_PARAM] REPORT_FORMAT -> %u\n", current_settings.report_format);
 8008a54:	4d2b      	ldr	r5, [pc, #172]	@ (8008b04 <USB_HID_Receive+0x400>)
 8008a56:	482c      	ldr	r0, [pc, #176]	@ (8008b08 <USB_HID_Receive+0x404>)
 8008a58:	7829      	ldrb	r1, [r5, #0]
 8008a5a:	e707      	b.n	800886c <USB_HID_Receive+0x168>
        printf("[USB][GET_PARAM] TEMP_UNIT -> %u\n", current_settings.display_temp_unit);
 8008a5c:	4d2b      	ldr	r5, [pc, #172]	@ (8008b0c <USB_HID_Receive+0x408>)
 8008a5e:	482c      	ldr	r0, [pc, #176]	@ (8008b10 <USB_HID_Receive+0x40c>)
 8008a60:	7829      	ldrb	r1, [r5, #0]
 8008a62:	e703      	b.n	800886c <USB_HID_Receive+0x168>
        printf("[USB][GET_PARAM] RAD_UNIT -> %u\n", current_settings.display_dose_unit);
 8008a64:	4d2b      	ldr	r5, [pc, #172]	@ (8008b14 <USB_HID_Receive+0x410>)
 8008a66:	482c      	ldr	r0, [pc, #176]	@ (8008b18 <USB_HID_Receive+0x414>)
 8008a68:	7829      	ldrb	r1, [r5, #0]
 8008a6a:	e6ff      	b.n	800886c <USB_HID_Receive+0x168>
 8008a6c:	0801d5d8 	.word	0x0801d5d8
 8008a70:	0801d5fd 	.word	0x0801d5fd
 8008a74:	0801d60e 	.word	0x0801d60e
 8008a78:	0801d608 	.word	0x0801d608
 8008a7c:	0801d653 	.word	0x0801d653
 8008a80:	20002bac 	.word	0x20002bac
 8008a84:	0801d674 	.word	0x0801d674
 8008a88:	00005555 	.word	0x00005555
 8008a8c:	0801db59 	.word	0x0801db59
 8008a90:	20002bcc 	.word	0x20002bcc
 8008a94:	0801d698 	.word	0x0801d698
 8008a98:	20002bdd 	.word	0x20002bdd
 8008a9c:	0801d6b7 	.word	0x0801d6b7
 8008aa0:	20002bdc 	.word	0x20002bdc
 8008aa4:	0801d6d6 	.word	0x0801d6d6
 8008aa8:	0801d6fd 	.word	0x0801d6fd
 8008aac:	20002c42 	.word	0x20002c42
 8008ab0:	0801d72a 	.word	0x0801d72a
 8008ab4:	20002be6 	.word	0x20002be6
 8008ab8:	20002be5 	.word	0x20002be5
 8008abc:	0801d750 	.word	0x0801d750
 8008ac0:	20002be7 	.word	0x20002be7
 8008ac4:	0801d772 	.word	0x0801d772
 8008ac8:	20002c19 	.word	0x20002c19
 8008acc:	0801d79b 	.word	0x0801d79b
 8008ad0:	20002c1a 	.word	0x20002c1a
 8008ad4:	0801d7be 	.word	0x0801d7be
 8008ad8:	20002c5b 	.word	0x20002c5b
 8008adc:	0801d7e2 	.word	0x0801d7e2
 8008ae0:	20002c26 	.word	0x20002c26
 8008ae4:	0801d80c 	.word	0x0801d80c
 8008ae8:	200009f8 	.word	0x200009f8
 8008aec:	0801d82a 	.word	0x0801d82a
 8008af0:	20002c2b 	.word	0x20002c2b
 8008af4:	0801d86b 	.word	0x0801d86b
 8008af8:	20002c27 	.word	0x20002c27
 8008afc:	0801d8a6 	.word	0x0801d8a6
 8008b00:	0801d8e0 	.word	0x0801d8e0
 8008b04:	20002c2f 	.word	0x20002c2f
 8008b08:	0801d910 	.word	0x0801d910
 8008b0c:	20002c40 	.word	0x20002c40
 8008b10:	0801d936 	.word	0x0801d936
 8008b14:	20002c41 	.word	0x20002c41
 8008b18:	0801d958 	.word	0x0801d958
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b1c:	2503      	movs	r5, #3
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008b1e:	4bdf      	ldr	r3, [pc, #892]	@ (8008e9c <USB_HID_Receive+0x798>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b20:	49df      	ldr	r1, [pc, #892]	@ (8008ea0 <USB_HID_Receive+0x79c>)
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	4bdf      	ldr	r3, [pc, #892]	@ (8008ea4 <USB_HID_Receive+0x7a0>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b28:	7809      	ldrb	r1, [r1, #0]
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008b2a:	781b      	ldrb	r3, [r3, #0]
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b2c:	0209      	lsls	r1, r1, #8
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008b2e:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b30:	4313      	orrs	r3, r2
 8008b32:	4add      	ldr	r2, [pc, #884]	@ (8008ea8 <USB_HID_Receive+0x7a4>)
               current_settings.alarm_rh1, current_settings.alarm_delay_rh1);
 8008b34:	4cdd      	ldr	r4, [pc, #884]	@ (8008eac <USB_HID_Receive+0x7a8>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	349e      	adds	r4, #158	@ 0x9e
 8008b3a:	4311      	orrs	r1, r2
 8008b3c:	4adc      	ldr	r2, [pc, #880]	@ (8008eb0 <USB_HID_Receive+0x7ac>)
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8008b3e:	4edd      	ldr	r6, [pc, #884]	@ (8008eb4 <USB_HID_Receive+0x7b0>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	48dd      	ldr	r0, [pc, #884]	@ (8008eb8 <USB_HID_Receive+0x7b4>)
 8008b44:	0412      	lsls	r2, r2, #16
 8008b46:	430a      	orrs	r2, r1
 8008b48:	7821      	ldrb	r1, [r4, #0]
 8008b4a:	0609      	lsls	r1, r1, #24
 8008b4c:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1),
 8008b4e:	69b1      	ldr	r1, [r6, #24]
 8008b50:	0a09      	lsrs	r1, r1, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_1 -> state=%u th=%u delay=%u\n",
 8008b52:	4029      	ands	r1, r5
 8008b54:	f011 f8b0 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1);
 8008b58:	69b3      	ldr	r3, [r6, #24]
 8008b5a:	aa10      	add	r2, sp, #64	@ 0x40
 8008b5c:	0a1b      	lsrs	r3, r3, #8
 8008b5e:	402b      	ands	r3, r5
 8008b60:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_rh1, response_pkt.data[1], response_pkt.data[2]);
 8008b62:	4bd1      	ldr	r3, [pc, #836]	@ (8008ea8 <USB_HID_Receive+0x7a4>)
 8008b64:	7819      	ldrb	r1, [r3, #0]
 8008b66:	4bce      	ldr	r3, [pc, #824]	@ (8008ea0 <USB_HID_Receive+0x79c>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	49d0      	ldr	r1, [pc, #832]	@ (8008eb0 <USB_HID_Receive+0x7ac>)
 8008b70:	7809      	ldrb	r1, [r1, #0]
 8008b72:	0409      	lsls	r1, r1, #16
 8008b74:	4319      	orrs	r1, r3
 8008b76:	7823      	ldrb	r3, [r4, #0]
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	7193      	strb	r3, [r2, #6]
 8008b7e:	0a1b      	lsrs	r3, r3, #8
 8008b80:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_rh1, response_pkt.data[3], response_pkt.data[4]);
 8008b82:	9b07      	ldr	r3, [sp, #28]
 8008b84:	7819      	ldrb	r1, [r3, #0]
 8008b86:	4bc7      	ldr	r3, [pc, #796]	@ (8008ea4 <USB_HID_Receive+0x7a0>)
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl2, response_pkt.data[3], response_pkt.data[4]);
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	7213      	strb	r3, [r2, #8]
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	7253      	strb	r3, [r2, #9]
        response_pkt.len = 5;
 8008b94:	2305      	movs	r3, #5
 8008b96:	e6b6      	b.n	8008906 <USB_HID_Receive+0x202>
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008b98:	2503      	movs	r5, #3
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008b9a:	4bc8      	ldr	r3, [pc, #800]	@ (8008ebc <USB_HID_Receive+0x7b8>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008b9c:	49c8      	ldr	r1, [pc, #800]	@ (8008ec0 <USB_HID_Receive+0x7bc>)
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008b9e:	9307      	str	r3, [sp, #28]
 8008ba0:	781a      	ldrb	r2, [r3, #0]
 8008ba2:	4bc8      	ldr	r3, [pc, #800]	@ (8008ec4 <USB_HID_Receive+0x7c0>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008ba4:	7809      	ldrb	r1, [r1, #0]
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008ba6:	781b      	ldrb	r3, [r3, #0]
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008ba8:	0209      	lsls	r1, r1, #8
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008baa:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008bac:	4313      	orrs	r3, r2
 8008bae:	4ac6      	ldr	r2, [pc, #792]	@ (8008ec8 <USB_HID_Receive+0x7c4>)
               current_settings.alarm_rh2, current_settings.alarm_delay_rh2);
 8008bb0:	4cbe      	ldr	r4, [pc, #760]	@ (8008eac <USB_HID_Receive+0x7a8>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	34a6      	adds	r4, #166	@ 0xa6
 8008bb6:	4311      	orrs	r1, r2
 8008bb8:	4ac4      	ldr	r2, [pc, #784]	@ (8008ecc <USB_HID_Receive+0x7c8>)
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8008bba:	4ebe      	ldr	r6, [pc, #760]	@ (8008eb4 <USB_HID_Receive+0x7b0>)
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008bbc:	7812      	ldrb	r2, [r2, #0]
 8008bbe:	48c4      	ldr	r0, [pc, #784]	@ (8008ed0 <USB_HID_Receive+0x7cc>)
 8008bc0:	0412      	lsls	r2, r2, #16
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	7821      	ldrb	r1, [r4, #0]
 8008bc6:	0609      	lsls	r1, r1, #24
 8008bc8:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2),
 8008bca:	69b1      	ldr	r1, [r6, #24]
 8008bcc:	0a89      	lsrs	r1, r1, #10
        printf("[USB][GET_PARAM] RAD_HIGH_ALARM_2 -> state=%u th=%u delay=%u\n",
 8008bce:	4029      	ands	r1, r5
 8008bd0:	f011 f872 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2);
 8008bd4:	69b3      	ldr	r3, [r6, #24]
 8008bd6:	aa10      	add	r2, sp, #64	@ 0x40
 8008bd8:	0a9b      	lsrs	r3, r3, #10
 8008bda:	402b      	ands	r3, r5
 8008bdc:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_rh2, response_pkt.data[1], response_pkt.data[2]);
 8008bde:	4bba      	ldr	r3, [pc, #744]	@ (8008ec8 <USB_HID_Receive+0x7c4>)
 8008be0:	7819      	ldrb	r1, [r3, #0]
 8008be2:	4bb7      	ldr	r3, [pc, #732]	@ (8008ec0 <USB_HID_Receive+0x7bc>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	430b      	orrs	r3, r1
 8008bea:	49b8      	ldr	r1, [pc, #736]	@ (8008ecc <USB_HID_Receive+0x7c8>)
 8008bec:	7809      	ldrb	r1, [r1, #0]
 8008bee:	0409      	lsls	r1, r1, #16
 8008bf0:	4319      	orrs	r1, r3
 8008bf2:	7823      	ldrb	r3, [r4, #0]
 8008bf4:	061b      	lsls	r3, r3, #24
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	7193      	strb	r3, [r2, #6]
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_rh2, response_pkt.data[3], response_pkt.data[4]);
 8008bfe:	9b07      	ldr	r3, [sp, #28]
 8008c00:	7819      	ldrb	r1, [r3, #0]
 8008c02:	4bb0      	ldr	r3, [pc, #704]	@ (8008ec4 <USB_HID_Receive+0x7c0>)
 8008c04:	e7c0      	b.n	8008b88 <USB_HID_Receive+0x484>
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8008c06:	4aa9      	ldr	r2, [pc, #676]	@ (8008eac <USB_HID_Receive+0x7a8>)
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008c08:	2503      	movs	r5, #3
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8008c0a:	0014      	movs	r4, r2
 8008c0c:	4bb1      	ldr	r3, [pc, #708]	@ (8008ed4 <USB_HID_Receive+0x7d0>)
 8008c0e:	349f      	adds	r4, #159	@ 0x9f
 8008c10:	9307      	str	r3, [sp, #28]
 8008c12:	7819      	ldrb	r1, [r3, #0]
 8008c14:	4bb0      	ldr	r3, [pc, #704]	@ (8008ed8 <USB_HID_Receive+0x7d4>)
 8008c16:	32a0      	adds	r2, #160	@ 0xa0
 8008c18:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8008c1a:	4ea6      	ldr	r6, [pc, #664]	@ (8008eb4 <USB_HID_Receive+0x7b0>)
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8008c1c:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008c1e:	430b      	orrs	r3, r1
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8008c20:	7821      	ldrb	r1, [r4, #0]
 8008c22:	9208      	str	r2, [sp, #32]
 8008c24:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008c26:	48ad      	ldr	r0, [pc, #692]	@ (8008edc <USB_HID_Receive+0x7d8>)
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8008c28:	0212      	lsls	r2, r2, #8
 8008c2a:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8008c2c:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_th1, current_settings.alarm_delay_th1);
 8008c2e:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1),
 8008c30:	0b09      	lsrs	r1, r1, #12
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008c32:	1412      	asrs	r2, r2, #16
 8008c34:	4029      	ands	r1, r5
 8008c36:	f011 f83f 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1);
 8008c3a:	69b3      	ldr	r3, [r6, #24]
 8008c3c:	aa10      	add	r2, sp, #64	@ 0x40
 8008c3e:	0b1b      	lsrs	r3, r3, #12
 8008c40:	402b      	ands	r3, r5
 8008c42:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_th1, response_pkt.data[1], response_pkt.data[2]);
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	7821      	ldrb	r1, [r4, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	021b      	lsls	r3, r3, #8
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	141b      	asrs	r3, r3, #16
 8008c52:	7193      	strb	r3, [r2, #6]
 8008c54:	121b      	asrs	r3, r3, #8
 8008c56:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_th1, response_pkt.data[3], response_pkt.data[4]);
 8008c58:	9b07      	ldr	r3, [sp, #28]
 8008c5a:	7819      	ldrb	r1, [r3, #0]
 8008c5c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ed8 <USB_HID_Receive+0x7d4>)
 8008c5e:	e793      	b.n	8008b88 <USB_HID_Receive+0x484>
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8008c60:	4a92      	ldr	r2, [pc, #584]	@ (8008eac <USB_HID_Receive+0x7a8>)
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008c62:	2503      	movs	r5, #3
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8008c64:	0014      	movs	r4, r2
 8008c66:	4b9e      	ldr	r3, [pc, #632]	@ (8008ee0 <USB_HID_Receive+0x7dc>)
 8008c68:	34a7      	adds	r4, #167	@ 0xa7
 8008c6a:	9307      	str	r3, [sp, #28]
 8008c6c:	7819      	ldrb	r1, [r3, #0]
 8008c6e:	4b9d      	ldr	r3, [pc, #628]	@ (8008ee4 <USB_HID_Receive+0x7e0>)
 8008c70:	32a8      	adds	r2, #168	@ 0xa8
 8008c72:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8008c74:	4e8f      	ldr	r6, [pc, #572]	@ (8008eb4 <USB_HID_Receive+0x7b0>)
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8008c76:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008c78:	430b      	orrs	r3, r1
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8008c7a:	7821      	ldrb	r1, [r4, #0]
 8008c7c:	9208      	str	r2, [sp, #32]
 8008c7e:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008c80:	4899      	ldr	r0, [pc, #612]	@ (8008ee8 <USB_HID_Receive+0x7e4>)
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8008c82:	0212      	lsls	r2, r2, #8
 8008c84:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8008c86:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_th2, current_settings.alarm_delay_th2);
 8008c88:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2),
 8008c8a:	0b89      	lsrs	r1, r1, #14
        printf("[USB][GET_PARAM] TEMP_HIGH_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008c8c:	1412      	asrs	r2, r2, #16
 8008c8e:	4029      	ands	r1, r5
 8008c90:	f011 f812 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2);
 8008c94:	69b3      	ldr	r3, [r6, #24]
 8008c96:	aa10      	add	r2, sp, #64	@ 0x40
 8008c98:	0b9b      	lsrs	r3, r3, #14
 8008c9a:	402b      	ands	r3, r5
 8008c9c:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_th2, response_pkt.data[1], response_pkt.data[2]);
 8008c9e:	9b08      	ldr	r3, [sp, #32]
 8008ca0:	7821      	ldrb	r1, [r4, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	430b      	orrs	r3, r1
 8008ca8:	041b      	lsls	r3, r3, #16
 8008caa:	141b      	asrs	r3, r3, #16
 8008cac:	7193      	strb	r3, [r2, #6]
 8008cae:	121b      	asrs	r3, r3, #8
 8008cb0:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_th2, response_pkt.data[3], response_pkt.data[4]);
 8008cb2:	9b07      	ldr	r3, [sp, #28]
 8008cb4:	7819      	ldrb	r1, [r3, #0]
 8008cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8008ee4 <USB_HID_Receive+0x7e0>)
 8008cb8:	e766      	b.n	8008b88 <USB_HID_Receive+0x484>
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8008cba:	4a7c      	ldr	r2, [pc, #496]	@ (8008eac <USB_HID_Receive+0x7a8>)
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008cbc:	2503      	movs	r5, #3
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8008cbe:	0014      	movs	r4, r2
 8008cc0:	4b8a      	ldr	r3, [pc, #552]	@ (8008eec <USB_HID_Receive+0x7e8>)
 8008cc2:	34a1      	adds	r4, #161	@ 0xa1
 8008cc4:	9307      	str	r3, [sp, #28]
 8008cc6:	7819      	ldrb	r1, [r3, #0]
 8008cc8:	4b89      	ldr	r3, [pc, #548]	@ (8008ef0 <USB_HID_Receive+0x7ec>)
 8008cca:	32a2      	adds	r2, #162	@ 0xa2
 8008ccc:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 8008cce:	4e79      	ldr	r6, [pc, #484]	@ (8008eb4 <USB_HID_Receive+0x7b0>)
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8008cd0:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008cd2:	430b      	orrs	r3, r1
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8008cd4:	7821      	ldrb	r1, [r4, #0]
 8008cd6:	9208      	str	r2, [sp, #32]
 8008cd8:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008cda:	4886      	ldr	r0, [pc, #536]	@ (8008ef4 <USB_HID_Receive+0x7f0>)
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8008cdc:	0212      	lsls	r2, r2, #8
 8008cde:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 8008ce0:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_tl1, current_settings.alarm_delay_tl1);
 8008ce2:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1),
 8008ce4:	0c09      	lsrs	r1, r1, #16
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_1 -> state=%u th=%d delay=%u\n",
 8008ce6:	1412      	asrs	r2, r2, #16
 8008ce8:	4029      	ands	r1, r5
 8008cea:	f010 ffe5 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1);
 8008cee:	69b3      	ldr	r3, [r6, #24]
 8008cf0:	aa10      	add	r2, sp, #64	@ 0x40
 8008cf2:	0c1b      	lsrs	r3, r3, #16
 8008cf4:	402b      	ands	r3, r5
 8008cf6:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_tl1, response_pkt.data[1], response_pkt.data[2]);
 8008cf8:	9b08      	ldr	r3, [sp, #32]
 8008cfa:	7821      	ldrb	r1, [r4, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	430b      	orrs	r3, r1
 8008d02:	041b      	lsls	r3, r3, #16
 8008d04:	141b      	asrs	r3, r3, #16
 8008d06:	7193      	strb	r3, [r2, #6]
 8008d08:	121b      	asrs	r3, r3, #8
 8008d0a:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl1, response_pkt.data[3], response_pkt.data[4]);
 8008d0c:	9b07      	ldr	r3, [sp, #28]
 8008d0e:	7819      	ldrb	r1, [r3, #0]
 8008d10:	4b77      	ldr	r3, [pc, #476]	@ (8008ef0 <USB_HID_Receive+0x7ec>)
 8008d12:	e739      	b.n	8008b88 <USB_HID_Receive+0x484>
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8008d14:	4a65      	ldr	r2, [pc, #404]	@ (8008eac <USB_HID_Receive+0x7a8>)
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008d16:	2503      	movs	r5, #3
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8008d18:	0014      	movs	r4, r2
 8008d1a:	4b77      	ldr	r3, [pc, #476]	@ (8008ef8 <USB_HID_Receive+0x7f4>)
 8008d1c:	34a9      	adds	r4, #169	@ 0xa9
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	7819      	ldrb	r1, [r3, #0]
 8008d22:	4b76      	ldr	r3, [pc, #472]	@ (8008efc <USB_HID_Receive+0x7f8>)
 8008d24:	32aa      	adds	r2, #170	@ 0xaa
 8008d26:	781b      	ldrb	r3, [r3, #0]
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 8008d28:	4e62      	ldr	r6, [pc, #392]	@ (8008eb4 <USB_HID_Receive+0x7b0>)
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8008d2a:	021b      	lsls	r3, r3, #8
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008d2c:	430b      	orrs	r3, r1
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8008d2e:	7821      	ldrb	r1, [r4, #0]
 8008d30:	9208      	str	r2, [sp, #32]
 8008d32:	7812      	ldrb	r2, [r2, #0]
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008d34:	4872      	ldr	r0, [pc, #456]	@ (8008f00 <USB_HID_Receive+0x7fc>)
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8008d36:	0212      	lsls	r2, r2, #8
 8008d38:	430a      	orrs	r2, r1
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 8008d3a:	69b1      	ldr	r1, [r6, #24]
               current_settings.alarm_tl2, current_settings.alarm_delay_tl2);
 8008d3c:	0412      	lsls	r2, r2, #16
               GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2),
 8008d3e:	0c89      	lsrs	r1, r1, #18
        printf("[USB][GET_PARAM] TEMP_LOW_ALARM_2 -> state=%u th=%d delay=%u\n",
 8008d40:	1412      	asrs	r2, r2, #16
 8008d42:	4029      	ands	r1, r5
 8008d44:	f010 ffb8 	bl	8019cb8 <iprintf>
        response_pkt.data[0] = GET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2);
 8008d48:	69b3      	ldr	r3, [r6, #24]
 8008d4a:	aa10      	add	r2, sp, #64	@ 0x40
 8008d4c:	0c9b      	lsrs	r3, r3, #18
 8008d4e:	402b      	ands	r3, r5
 8008d50:	7153      	strb	r3, [r2, #5]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_tl2, response_pkt.data[1], response_pkt.data[2]);
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	7821      	ldrb	r1, [r4, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	430b      	orrs	r3, r1
 8008d5c:	041b      	lsls	r3, r3, #16
 8008d5e:	141b      	asrs	r3, r3, #16
 8008d60:	7193      	strb	r3, [r2, #6]
 8008d62:	121b      	asrs	r3, r3, #8
 8008d64:	71d3      	strb	r3, [r2, #7]
        U16_TO_LITTLE_ENDIAN_BYTES(current_settings.alarm_delay_tl2, response_pkt.data[3], response_pkt.data[4]);
 8008d66:	9b07      	ldr	r3, [sp, #28]
 8008d68:	7819      	ldrb	r1, [r3, #0]
 8008d6a:	4b64      	ldr	r3, [pc, #400]	@ (8008efc <USB_HID_Receive+0x7f8>)
 8008d6c:	e70c      	b.n	8008b88 <USB_HID_Receive+0x484>
        printf("[USB][GET_PARAM] CURRENT_INDEX_READINGS -> temp=%u rad=%u\n", idx_temp, idx_rad);
 8008d6e:	4d65      	ldr	r5, [pc, #404]	@ (8008f04 <USB_HID_Receive+0x800>)
 8008d70:	4e65      	ldr	r6, [pc, #404]	@ (8008f08 <USB_HID_Receive+0x804>)
 8008d72:	882a      	ldrh	r2, [r5, #0]
 8008d74:	8831      	ldrh	r1, [r6, #0]
 8008d76:	4865      	ldr	r0, [pc, #404]	@ (8008f0c <USB_HID_Receive+0x808>)
 8008d78:	f010 ff9e 	bl	8019cb8 <iprintf>
        U16_TO_LITTLE_ENDIAN_BYTES(idx_temp, response_pkt.data[0], response_pkt.data[1]);
 8008d7c:	8833      	ldrh	r3, [r6, #0]
 8008d7e:	7163      	strb	r3, [r4, #5]
 8008d80:	0a1b      	lsrs	r3, r3, #8
 8008d82:	71a3      	strb	r3, [r4, #6]
        U16_TO_LITTLE_ENDIAN_BYTES(idx_rad, response_pkt.data[2], response_pkt.data[3]);
 8008d84:	882b      	ldrh	r3, [r5, #0]
 8008d86:	71e3      	strb	r3, [r4, #7]
 8008d88:	0a1b      	lsrs	r3, r3, #8
 8008d8a:	7223      	strb	r3, [r4, #8]
        response_pkt.len = 4;
 8008d8c:	2304      	movs	r3, #4
 8008d8e:	e58c      	b.n	80088aa <USB_HID_Receive+0x1a6>
        printf("[USB][GET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
 8008d90:	9905      	ldr	r1, [sp, #20]
 8008d92:	485f      	ldr	r0, [pc, #380]	@ (8008f10 <USB_HID_Receive+0x80c>)
 8008d94:	f010 ff90 	bl	8019cb8 <iprintf>
        Rad_USBX_HID_ACK_response(DEVICE_CID_GET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 8008d98:	22fe      	movs	r2, #254	@ 0xfe
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	9905      	ldr	r1, [sp, #20]
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 8008d9e:	f7ff fbc1 	bl	8008524 <Rad_USBX_HID_ACK_response.isra.0>
            return;
 8008da2:	e550      	b.n	8008846 <USB_HID_Receive+0x142>
}

static void Rad_USBX_HID_Get_Records(const uint8_t parm_id)
{
    UNUSED(parm_id);
    usbx_host_req_records = 1; // Set flag to send all records at main loop
 8008da4:	2201      	movs	r2, #1
 8008da6:	4b5b      	ldr	r3, [pc, #364]	@ (8008f14 <USB_HID_Receive+0x810>)
 8008da8:	601a      	str	r2, [r3, #0]
}
 8008daa:	e54c      	b.n	8008846 <USB_HID_Receive+0x142>
    uint8_t parm_id = data[3];
 8008dac:	78fb      	ldrb	r3, [r7, #3]
    uint8_t payload_len = data[4];
 8008dae:	793d      	ldrb	r5, [r7, #4]
    printf("[USB][SET_PARAM] parm_id=0x%02X, payload_len=%u\n", parm_id, payload_len);
 8008db0:	0019      	movs	r1, r3
 8008db2:	002a      	movs	r2, r5
 8008db4:	4858      	ldr	r0, [pc, #352]	@ (8008f18 <USB_HID_Receive+0x814>)
    uint8_t parm_id = data[3];
 8008db6:	9305      	str	r3, [sp, #20]
    printf("[USB][SET_PARAM] parm_id=0x%02X, payload_len=%u\n", parm_id, payload_len);
 8008db8:	f010 ff7e 	bl	8019cb8 <iprintf>
    switch (parm_id)
 8008dbc:	9b05      	ldr	r3, [sp, #20]
    uint8_t *payload = (uint8_t *)&data[5];
 8008dbe:	1d7c      	adds	r4, r7, #5
    switch (parm_id)
 8008dc0:	1e58      	subs	r0, r3, #1
 8008dc2:	281f      	cmp	r0, #31
 8008dc4:	d900      	bls.n	8008dc8 <USB_HID_Receive+0x6c4>
 8008dc6:	e240      	b.n	800924a <USB_HID_Receive+0xb46>
 8008dc8:	f7f7 f9c4 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008dcc:	00380020 	.word	0x00380020
 8008dd0:	00520045 	.word	0x00520045
 8008dd4:	023f0059 	.word	0x023f0059
 8008dd8:	00be005d 	.word	0x00be005d
 8008ddc:	00d000cb 	.word	0x00d000cb
 8008de0:	010300de 	.word	0x010300de
 8008de4:	01230108 	.word	0x01230108
 8008de8:	0170014b 	.word	0x0170014b
 8008dec:	017a0175 	.word	0x017a0175
 8008df0:	01a3017f 	.word	0x01a3017f
 8008df4:	01e401c5 	.word	0x01e401c5
 8008df8:	02200201 	.word	0x02200201
 8008dfc:	023f023f 	.word	0x023f023f
 8008e00:	023f023f 	.word	0x023f023f
 8008e04:	023f023f 	.word	0x023f023f
 8008e08:	016e023f 	.word	0x016e023f
        memset(current_settings.device_code, 0, sizeof(current_settings.device_code));
 8008e0c:	4e27      	ldr	r6, [pc, #156]	@ (8008eac <USB_HID_Receive+0x7a8>)
 8008e0e:	2210      	movs	r2, #16
 8008e10:	2100      	movs	r1, #0
 8008e12:	0030      	movs	r0, r6
 8008e14:	f011 f91c 	bl	801a050 <memset>
        memcpy(current_settings.device_code, payload, payload_len);
 8008e18:	002a      	movs	r2, r5
 8008e1a:	0021      	movs	r1, r4
 8008e1c:	0030      	movs	r0, r6
 8008e1e:	f011 f9e1 	bl	801a1e4 <memcpy>
        printf("[USB][SET_PARAM] DEVICE_CODE <- %.*s\n", payload_len, payload);
 8008e22:	483e      	ldr	r0, [pc, #248]	@ (8008f1c <USB_HID_Receive+0x818>)
        printf("[USB][SET_PARAM] SERIAL <- %.*s\n", payload_len, payload);
 8008e24:	0022      	movs	r2, r4
 8008e26:	0029      	movs	r1, r5
 8008e28:	f010 ff46 	bl	8019cb8 <iprintf>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_SUCCESS);
 8008e2c:	2003      	movs	r0, #3
 8008e2e:	9905      	ldr	r1, [sp, #20]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f7ff fb77 	bl	8008524 <Rad_USBX_HID_ACK_response.isra.0>
    printf("[USB][SET_PARAM] ACK sent for parm_id=0x%02X\n", parm_id);
 8008e36:	483a      	ldr	r0, [pc, #232]	@ (8008f20 <USB_HID_Receive+0x81c>)
 8008e38:	9905      	ldr	r1, [sp, #20]
 8008e3a:	e10e      	b.n	800905a <USB_HID_Receive+0x956>
        memset(current_settings.serial, 0, sizeof(current_settings.serial));
 8008e3c:	4e39      	ldr	r6, [pc, #228]	@ (8008f24 <USB_HID_Receive+0x820>)
 8008e3e:	2210      	movs	r2, #16
 8008e40:	2100      	movs	r1, #0
 8008e42:	0030      	movs	r0, r6
 8008e44:	f011 f904 	bl	801a050 <memset>
        memcpy(current_settings.serial, payload, payload_len);
 8008e48:	002a      	movs	r2, r5
 8008e4a:	0021      	movs	r1, r4
 8008e4c:	0030      	movs	r0, r6
 8008e4e:	f011 f9c9 	bl	801a1e4 <memcpy>
        printf("[USB][SET_PARAM] SERIAL <- %.*s\n", payload_len, payload);
 8008e52:	4835      	ldr	r0, [pc, #212]	@ (8008f28 <USB_HID_Receive+0x824>)
 8008e54:	e7e6      	b.n	8008e24 <USB_HID_Receive+0x720>
        memset(current_settings.firmware_ver, 0, sizeof(current_settings.firmware_ver));
 8008e56:	4e35      	ldr	r6, [pc, #212]	@ (8008f2c <USB_HID_Receive+0x828>)
 8008e58:	2208      	movs	r2, #8
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	0030      	movs	r0, r6
 8008e5e:	f011 f8f7 	bl	801a050 <memset>
        memcpy(current_settings.firmware_ver, payload, payload_len);
 8008e62:	002a      	movs	r2, r5
 8008e64:	0021      	movs	r1, r4
 8008e66:	0030      	movs	r0, r6
 8008e68:	f011 f9bc 	bl	801a1e4 <memcpy>
        printf("[USB][SET_PARAM] FIRMWARE_VER <- %.*s\n", payload_len, payload);
 8008e6c:	4830      	ldr	r0, [pc, #192]	@ (8008f30 <USB_HID_Receive+0x82c>)
 8008e6e:	e7d9      	b.n	8008e24 <USB_HID_Receive+0x720>
        current_settings.sensor_type = payload[0];
 8008e70:	7979      	ldrb	r1, [r7, #5]
 8008e72:	4b30      	ldr	r3, [pc, #192]	@ (8008f34 <USB_HID_Receive+0x830>)
        printf("[USB][SET_PARAM] RECORDING_TYPE <- %u\n", current_settings.sensor_type);
 8008e74:	4830      	ldr	r0, [pc, #192]	@ (8008f38 <USB_HID_Receive+0x834>)
        current_settings.sensor_type = payload[0];
 8008e76:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 8008e78:	f010 ff1e 	bl	8019cb8 <iprintf>
        break;
 8008e7c:	e7d6      	b.n	8008e2c <USB_HID_Receive+0x728>
        printf("[USB][SET_PARAM] BATTERY_LEVEL not supported\n");
 8008e7e:	482f      	ldr	r0, [pc, #188]	@ (8008f3c <USB_HID_Receive+0x838>)
        printf("[USB][SET_PARAM] LOGGING_DURATION not supported\n");
 8008e80:	f010 ff8a 	bl	8019d98 <puts>
        break;
 8008e84:	e7d2      	b.n	8008e2c <USB_HID_Receive+0x728>
        current_settings.trip_code = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8008e86:	7861      	ldrb	r1, [r4, #1]
 8008e88:	797b      	ldrb	r3, [r7, #5]
 8008e8a:	0209      	lsls	r1, r1, #8
 8008e8c:	4319      	orrs	r1, r3
 8008e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008f40 <USB_HID_Receive+0x83c>)
 8008e90:	0a0a      	lsrs	r2, r1, #8
        printf("[USB][SET_PARAM] TRIP_CODE <- %u\n", current_settings.trip_code);
 8008e92:	482c      	ldr	r0, [pc, #176]	@ (8008f44 <USB_HID_Receive+0x840>)
        current_settings.trip_code = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8008e94:	7019      	strb	r1, [r3, #0]
 8008e96:	705a      	strb	r2, [r3, #1]
        printf("[USB][SET_PARAM] TRIP_CODE <- %u\n", current_settings.trip_code);
 8008e98:	e7ee      	b.n	8008e78 <USB_HID_Receive+0x774>
 8008e9a:	46c0      	nop			@ (mov r8, r8)
 8008e9c:	20002c30 	.word	0x20002c30
 8008ea0:	20002c48 	.word	0x20002c48
 8008ea4:	20002c31 	.word	0x20002c31
 8008ea8:	20002c47 	.word	0x20002c47
 8008eac:	20002bac 	.word	0x20002bac
 8008eb0:	20002c49 	.word	0x20002c49
 8008eb4:	20000b50 	.word	0x20000b50
 8008eb8:	0801d979 	.word	0x0801d979
 8008ebc:	20002c32 	.word	0x20002c32
 8008ec0:	20002c50 	.word	0x20002c50
 8008ec4:	20002c33 	.word	0x20002c33
 8008ec8:	20002c4f 	.word	0x20002c4f
 8008ecc:	20002c51 	.word	0x20002c51
 8008ed0:	0801d9b7 	.word	0x0801d9b7
 8008ed4:	20002c34 	.word	0x20002c34
 8008ed8:	20002c35 	.word	0x20002c35
 8008edc:	0801d9f5 	.word	0x0801d9f5
 8008ee0:	20002c36 	.word	0x20002c36
 8008ee4:	20002c37 	.word	0x20002c37
 8008ee8:	0801da34 	.word	0x0801da34
 8008eec:	20002c38 	.word	0x20002c38
 8008ef0:	20002c39 	.word	0x20002c39
 8008ef4:	0801da73 	.word	0x0801da73
 8008ef8:	20002c3a 	.word	0x20002c3a
 8008efc:	20002c3b 	.word	0x20002c3b
 8008f00:	0801dab1 	.word	0x0801dab1
 8008f04:	20000500 	.word	0x20000500
 8008f08:	200004fe 	.word	0x200004fe
 8008f0c:	0801daef 	.word	0x0801daef
 8008f10:	0801db2a 	.word	0x0801db2a
 8008f14:	20000b74 	.word	0x20000b74
 8008f18:	0801db96 	.word	0x0801db96
 8008f1c:	0801dbc7 	.word	0x0801dbc7
 8008f20:	0801e0f4 	.word	0x0801e0f4
 8008f24:	20002bcc 	.word	0x20002bcc
 8008f28:	0801dbed 	.word	0x0801dbed
 8008f2c:	20002bdd 	.word	0x20002bdd
 8008f30:	0801dc0e 	.word	0x0801dc0e
 8008f34:	20002bdc 	.word	0x20002bdc
 8008f38:	0801dc35 	.word	0x0801dc35
 8008f3c:	0801dc5c 	.word	0x0801dc5c
 8008f40:	20002be5 	.word	0x20002be5
 8008f44:	0801dc89 	.word	0x0801dc89
        memset(current_settings.trip_desc, 0, sizeof(current_settings.trip_desc));
 8008f48:	4ed9      	ldr	r6, [pc, #868]	@ (80092b0 <USB_HID_Receive+0xbac>)
 8008f4a:	2232      	movs	r2, #50	@ 0x32
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	0030      	movs	r0, r6
 8008f50:	f011 f87e 	bl	801a050 <memset>
        memcpy(current_settings.trip_desc, payload, payload_len);
 8008f54:	002a      	movs	r2, r5
 8008f56:	0021      	movs	r1, r4
 8008f58:	0030      	movs	r0, r6
 8008f5a:	f011 f943 	bl	801a1e4 <memcpy>
        printf("[USB][SET_PARAM] TRIP_DESCRIPTION <- %.*s\n", payload_len, payload);
 8008f5e:	48d5      	ldr	r0, [pc, #852]	@ (80092b4 <USB_HID_Receive+0xbb0>)
 8008f60:	e760      	b.n	8008e24 <USB_HID_Receive+0x720>
        current_settings.start_mode = payload[0];
 8008f62:	7979      	ldrb	r1, [r7, #5]
 8008f64:	4bd4      	ldr	r3, [pc, #848]	@ (80092b8 <USB_HID_Receive+0xbb4>)
        printf("[USB][SET_PARAM] START_MODE <- %u\n", current_settings.start_mode);
 8008f66:	48d5      	ldr	r0, [pc, #852]	@ (80092bc <USB_HID_Receive+0xbb8>)
        current_settings.start_mode = payload[0];
 8008f68:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] START_MODE <- %u\n", current_settings.start_mode);
 8008f6a:	e785      	b.n	8008e78 <USB_HID_Receive+0x774>
        current_settings.start_delay = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8008f6c:	7861      	ldrb	r1, [r4, #1]
 8008f6e:	797b      	ldrb	r3, [r7, #5]
 8008f70:	0209      	lsls	r1, r1, #8
 8008f72:	4319      	orrs	r1, r3
 8008f74:	4bd2      	ldr	r3, [pc, #840]	@ (80092c0 <USB_HID_Receive+0xbbc>)
 8008f76:	0a0a      	lsrs	r2, r1, #8
 8008f78:	705a      	strb	r2, [r3, #1]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	709a      	strb	r2, [r3, #2]
 8008f7e:	0e0a      	lsrs	r2, r1, #24
        printf("[USB][SET_PARAM] START_DELAY <- %u\n", current_settings.start_delay);
 8008f80:	48d0      	ldr	r0, [pc, #832]	@ (80092c4 <USB_HID_Receive+0xbc0>)
        current_settings.start_delay = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8008f82:	7019      	strb	r1, [r3, #0]
 8008f84:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] START_DELAY <- %u\n", current_settings.start_delay);
 8008f86:	e777      	b.n	8008e78 <USB_HID_Receive+0x774>
        uint8_t yy = payload[0];  // 2000년 기준
 8008f88:	797b      	ldrb	r3, [r7, #5]
        uint8_t hh = payload[3];
 8008f8a:	7a3c      	ldrb	r4, [r7, #8]
        uint8_t yy = payload[0];  // 2000년 기준
 8008f8c:	9307      	str	r3, [sp, #28]
        uint8_t mm = payload[1];
 8008f8e:	79bb      	ldrb	r3, [r7, #6]
        uint8_t mi = payload[4];
 8008f90:	7a7d      	ldrb	r5, [r7, #9]
        uint8_t mm = payload[1];
 8008f92:	9308      	str	r3, [sp, #32]
        uint8_t dd = payload[2];
 8008f94:	79fb      	ldrb	r3, [r7, #7]
        uint8_t ss = payload[5];
 8008f96:	7abe      	ldrb	r6, [r7, #10]
        uint8_t dd = payload[2];
 8008f98:	9309      	str	r3, [sp, #36]	@ 0x24
        uint32_t epoch = ymd_to_epoch(yy, mm, dd, hh, mi, ss);
 8008f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f9c:	0023      	movs	r3, r4
 8008f9e:	9908      	ldr	r1, [sp, #32]
 8008fa0:	9807      	ldr	r0, [sp, #28]
 8008fa2:	9601      	str	r6, [sp, #4]
 8008fa4:	9500      	str	r5, [sp, #0]
 8008fa6:	f000 fae1 	bl	800956c <ymd_to_epoch>
 8008faa:	0002      	movs	r2, r0
        current_settings.start_reservation_time = epoch;
 8008fac:	4bc6      	ldr	r3, [pc, #792]	@ (80092c8 <USB_HID_Receive+0xbc4>)
 8008fae:	0a01      	lsrs	r1, r0, #8
 8008fb0:	7059      	strb	r1, [r3, #1]
 8008fb2:	0c01      	lsrs	r1, r0, #16
 8008fb4:	7099      	strb	r1, [r3, #2]
 8008fb6:	0e01      	lsrs	r1, r0, #24
 8008fb8:	7018      	strb	r0, [r3, #0]
 8008fba:	70d9      	strb	r1, [r3, #3]
        printf("[USB][SET_PARAM] START_TIME <- 20%02u-%02u-%02u %02u:%02u:%02u (epoch=%lu)\n",
 8008fbc:	48c3      	ldr	r0, [pc, #780]	@ (80092cc <USB_HID_Receive+0xbc8>)
 8008fbe:	9203      	str	r2, [sp, #12]
 8008fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc2:	9a08      	ldr	r2, [sp, #32]
 8008fc4:	9907      	ldr	r1, [sp, #28]
 8008fc6:	9602      	str	r6, [sp, #8]
 8008fc8:	9501      	str	r5, [sp, #4]
 8008fca:	9400      	str	r4, [sp, #0]
 8008fcc:	f010 fe74 	bl	8019cb8 <iprintf>
        break;
 8008fd0:	e72c      	b.n	8008e2c <USB_HID_Receive+0x728>
        current_settings.pause_enable = payload[0];
 8008fd2:	7979      	ldrb	r1, [r7, #5]
 8008fd4:	4bbe      	ldr	r3, [pc, #760]	@ (80092d0 <USB_HID_Receive+0xbcc>)
        printf("[USB][SET_PARAM] PAUSE <- %u\n", current_settings.pause_enable);
 8008fd6:	48bf      	ldr	r0, [pc, #764]	@ (80092d4 <USB_HID_Receive+0xbd0>)
        current_settings.pause_enable = payload[0];
 8008fd8:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] PAUSE <- %u\n", current_settings.pause_enable);
 8008fda:	e74d      	b.n	8008e78 <USB_HID_Receive+0x774>
        uint8_t yy = payload[0];
 8008fdc:	797b      	ldrb	r3, [r7, #5]
        uint8_t hh = payload[3];
 8008fde:	7a3c      	ldrb	r4, [r7, #8]
        uint8_t yy = payload[0];
 8008fe0:	9307      	str	r3, [sp, #28]
        uint8_t mm = payload[1];
 8008fe2:	79bb      	ldrb	r3, [r7, #6]
        uint8_t mi = payload[4];
 8008fe4:	7a7d      	ldrb	r5, [r7, #9]
        uint8_t mm = payload[1];
 8008fe6:	9308      	str	r3, [sp, #32]
        uint8_t dd = payload[2];
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
        uint8_t ss = payload[5];
 8008fea:	7abe      	ldrb	r6, [r7, #10]
        uint8_t dd = payload[2];
 8008fec:	9309      	str	r3, [sp, #36]	@ 0x24
        Set_RTC_TimeOnly(yy, mm, dd, hh, mi, ss);
 8008fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ff0:	0023      	movs	r3, r4
 8008ff2:	9908      	ldr	r1, [sp, #32]
 8008ff4:	9807      	ldr	r0, [sp, #28]
 8008ff6:	9601      	str	r6, [sp, #4]
 8008ff8:	9500      	str	r5, [sp, #0]
 8008ffa:	f7fc fd0f 	bl	8005a1c <Set_RTC_TimeOnly>
        printf("[USB][SET_PARAM] DEVICE_TIME <- 20%02u-%02u-%02u %02u:%02u:%02u\n",
 8008ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009000:	9a08      	ldr	r2, [sp, #32]
 8009002:	9907      	ldr	r1, [sp, #28]
 8009004:	9602      	str	r6, [sp, #8]
 8009006:	9501      	str	r5, [sp, #4]
 8009008:	9400      	str	r4, [sp, #0]
 800900a:	48b3      	ldr	r0, [pc, #716]	@ (80092d8 <USB_HID_Receive+0xbd4>)
 800900c:	f010 fe54 	bl	8019cb8 <iprintf>
        break;
 8009010:	e70c      	b.n	8008e2c <USB_HID_Receive+0x728>
        if (payload_len == 4) {
 8009012:	2d04      	cmp	r5, #4
 8009014:	d114      	bne.n	8009040 <USB_HID_Receive+0x93c>
            v32  =  ((uint32_t)payload[0])
 8009016:	7862      	ldrb	r2, [r4, #1]
 8009018:	797b      	ldrb	r3, [r7, #5]
 800901a:	0212      	lsls	r2, r2, #8
 800901c:	431a      	orrs	r2, r3
 800901e:	78a3      	ldrb	r3, [r4, #2]
 8009020:	78e1      	ldrb	r1, [r4, #3]
 8009022:	041b      	lsls	r3, r3, #16
 8009024:	4313      	orrs	r3, r2
 8009026:	0609      	lsls	r1, r1, #24
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009028:	4319      	orrs	r1, r3
        current_settings.temp_interval = (typeof(current_settings.temp_interval))v32;
 800902a:	4bac      	ldr	r3, [pc, #688]	@ (80092dc <USB_HID_Receive+0xbd8>)
 800902c:	0a0a      	lsrs	r2, r1, #8
 800902e:	705a      	strb	r2, [r3, #1]
 8009030:	0c0a      	lsrs	r2, r1, #16
 8009032:	709a      	strb	r2, [r3, #2]
        printf("[USB][SET_PARAM] TEMP_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 8009034:	48aa      	ldr	r0, [pc, #680]	@ (80092e0 <USB_HID_Receive+0xbdc>)
        current_settings.temp_interval = (typeof(current_settings.temp_interval))v32;
 8009036:	0e0a      	lsrs	r2, r1, #24
 8009038:	7019      	strb	r1, [r3, #0]
 800903a:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 800903c:	002a      	movs	r2, r5
 800903e:	e6f3      	b.n	8008e28 <USB_HID_Receive+0x724>
        } else if (payload_len == 2) {
 8009040:	2d02      	cmp	r5, #2
 8009042:	d103      	bne.n	800904c <USB_HID_Receive+0x948>
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]);
 8009044:	7861      	ldrb	r1, [r4, #1]
 8009046:	797b      	ldrb	r3, [r7, #5]
 8009048:	0209      	lsls	r1, r1, #8
 800904a:	e7ed      	b.n	8009028 <USB_HID_Receive+0x924>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id,
 800904c:	2003      	movs	r0, #3
 800904e:	22fe      	movs	r2, #254	@ 0xfe
 8009050:	210e      	movs	r1, #14
 8009052:	f7ff fa67 	bl	8008524 <Rad_USBX_HID_ACK_response.isra.0>
            printf("[USB][SET_PARAM][ERR] TEMP_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 8009056:	48a3      	ldr	r0, [pc, #652]	@ (80092e4 <USB_HID_Receive+0xbe0>)
            printf("[USB][SET_PARAM][ERR] RAD_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 8009058:	0029      	movs	r1, r5
    printf("[USB][SET_PARAM] ACK sent for parm_id=0x%02X\n", parm_id);
 800905a:	f010 fe2d 	bl	8019cb8 <iprintf>
 800905e:	f7ff fbf2 	bl	8008846 <USB_HID_Receive+0x142>
        if (payload_len == 4) {
 8009062:	2d04      	cmp	r5, #4
 8009064:	d113      	bne.n	800908e <USB_HID_Receive+0x98a>
            v32  =  ((uint32_t)payload[0])
 8009066:	7862      	ldrb	r2, [r4, #1]
 8009068:	797b      	ldrb	r3, [r7, #5]
 800906a:	0212      	lsls	r2, r2, #8
 800906c:	431a      	orrs	r2, r3
 800906e:	78a3      	ldrb	r3, [r4, #2]
 8009070:	78e1      	ldrb	r1, [r4, #3]
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	4313      	orrs	r3, r2
 8009076:	0609      	lsls	r1, r1, #24
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]); // 하위호환
 8009078:	4319      	orrs	r1, r3
        current_settings.rad_interval = (typeof(current_settings.rad_interval))v32;
 800907a:	4b9b      	ldr	r3, [pc, #620]	@ (80092e8 <USB_HID_Receive+0xbe4>)
 800907c:	0a0a      	lsrs	r2, r1, #8
 800907e:	705a      	strb	r2, [r3, #1]
 8009080:	0c0a      	lsrs	r2, r1, #16
 8009082:	709a      	strb	r2, [r3, #2]
 8009084:	0e0a      	lsrs	r2, r1, #24
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 8009086:	4899      	ldr	r0, [pc, #612]	@ (80092ec <USB_HID_Receive+0xbe8>)
        current_settings.rad_interval = (typeof(current_settings.rad_interval))v32;
 8009088:	7019      	strb	r1, [r3, #0]
 800908a:	70da      	strb	r2, [r3, #3]
        printf("[USB][SET_PARAM] RAD_LOGGING_INTERVAL <- %lu sec (len=%u)\n",
 800908c:	e7d6      	b.n	800903c <USB_HID_Receive+0x938>
        } else if (payload_len == 2) {
 800908e:	2d02      	cmp	r5, #2
 8009090:	d103      	bne.n	800909a <USB_HID_Receive+0x996>
            v32 = LITTLE_ENDIAN_BYTES_TO_U16(payload[0], payload[1]); // 하위호환
 8009092:	7861      	ldrb	r1, [r4, #1]
 8009094:	797b      	ldrb	r3, [r7, #5]
 8009096:	0209      	lsls	r1, r1, #8
 8009098:	e7ee      	b.n	8009078 <USB_HID_Receive+0x974>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id,
 800909a:	2003      	movs	r0, #3
 800909c:	22fe      	movs	r2, #254	@ 0xfe
 800909e:	210f      	movs	r1, #15
 80090a0:	f7ff fa40 	bl	8008524 <Rad_USBX_HID_ACK_response.isra.0>
            printf("[USB][SET_PARAM][ERR] RAD_LOGGING_INTERVAL invalid len=%u\n", payload_len);
 80090a4:	4892      	ldr	r0, [pc, #584]	@ (80092f0 <USB_HID_Receive+0xbec>)
 80090a6:	e7d7      	b.n	8009058 <USB_HID_Receive+0x954>
        printf("[USB][SET_PARAM] LOGGING_DURATION not supported\n");
 80090a8:	4892      	ldr	r0, [pc, #584]	@ (80092f4 <USB_HID_Receive+0xbf0>)
 80090aa:	e6e9      	b.n	8008e80 <USB_HID_Receive+0x77c>
        current_settings.report_format = payload[0];
 80090ac:	7979      	ldrb	r1, [r7, #5]
 80090ae:	4b92      	ldr	r3, [pc, #584]	@ (80092f8 <USB_HID_Receive+0xbf4>)
        printf("[USB][SET_PARAM] REPORT_FORMAT <- %u\n", current_settings.report_format);
 80090b0:	4892      	ldr	r0, [pc, #584]	@ (80092fc <USB_HID_Receive+0xbf8>)
        current_settings.report_format = payload[0];
 80090b2:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] REPORT_FORMAT <- %u\n", current_settings.report_format);
 80090b4:	e6e0      	b.n	8008e78 <USB_HID_Receive+0x774>
        current_settings.display_temp_unit = payload[0];
 80090b6:	7979      	ldrb	r1, [r7, #5]
 80090b8:	4b91      	ldr	r3, [pc, #580]	@ (8009300 <USB_HID_Receive+0xbfc>)
        printf("[USB][SET_PARAM] TEMP_UNIT <- %u\n", current_settings.display_temp_unit);
 80090ba:	4892      	ldr	r0, [pc, #584]	@ (8009304 <USB_HID_Receive+0xc00>)
        current_settings.display_temp_unit = payload[0];
 80090bc:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] TEMP_UNIT <- %u\n", current_settings.display_temp_unit);
 80090be:	e6db      	b.n	8008e78 <USB_HID_Receive+0x774>
        current_settings.display_dose_unit = payload[0];
 80090c0:	7979      	ldrb	r1, [r7, #5]
 80090c2:	4b91      	ldr	r3, [pc, #580]	@ (8009308 <USB_HID_Receive+0xc04>)
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 80090c4:	4891      	ldr	r0, [pc, #580]	@ (800930c <USB_HID_Receive+0xc08>)
        current_settings.display_dose_unit = payload[0];
 80090c6:	7019      	strb	r1, [r3, #0]
        printf("[USB][SET_PARAM] RAD_UNIT <- %u\n", current_settings.display_dose_unit);
 80090c8:	e6d6      	b.n	8008e78 <USB_HID_Receive+0x774>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH1, payload[0]);
 80090ca:	22c0      	movs	r2, #192	@ 0xc0
 80090cc:	797b      	ldrb	r3, [r7, #5]
 80090ce:	4990      	ldr	r1, [pc, #576]	@ (8009310 <USB_HID_Receive+0xc0c>)
 80090d0:	0092      	lsls	r2, r2, #2
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	488f      	ldr	r0, [pc, #572]	@ (8009314 <USB_HID_Receive+0xc10>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	698a      	ldr	r2, [r1, #24]
 80090da:	4002      	ands	r2, r0
 80090dc:	4313      	orrs	r3, r2
 80090de:	618b      	str	r3, [r1, #24]
        current_settings.alarm_rh1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[1], payload[2]);
 80090e0:	79fa      	ldrb	r2, [r7, #7]
 80090e2:	79bb      	ldrb	r3, [r7, #6]
 80090e4:	0212      	lsls	r2, r2, #8
 80090e6:	431a      	orrs	r2, r3
 80090e8:	4b8b      	ldr	r3, [pc, #556]	@ (8009318 <USB_HID_Receive+0xc14>)
 80090ea:	0a11      	lsrs	r1, r2, #8
 80090ec:	7059      	strb	r1, [r3, #1]
 80090ee:	2100      	movs	r1, #0
 80090f0:	7099      	strb	r1, [r3, #2]
 80090f2:	0e11      	lsrs	r1, r2, #24
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	70d9      	strb	r1, [r3, #3]
        current_settings.alarm_delay_rh1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 80090f8:	7a7b      	ldrb	r3, [r7, #9]
 80090fa:	7a39      	ldrb	r1, [r7, #8]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	430b      	orrs	r3, r1
 8009100:	4986      	ldr	r1, [pc, #536]	@ (800931c <USB_HID_Receive+0xc18>)
 8009102:	0a18      	lsrs	r0, r3, #8
 8009104:	7048      	strb	r0, [r1, #1]
 8009106:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] RAD_HIGH_ALARM_1 <- state=%u th=%u delay=%u\n",
 8009108:	7979      	ldrb	r1, [r7, #5]
 800910a:	4885      	ldr	r0, [pc, #532]	@ (8009320 <USB_HID_Receive+0xc1c>)
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_2 <- state=%u th=%d delay=%u\n",
 800910c:	f010 fdd4 	bl	8019cb8 <iprintf>
        break;
 8009110:	e68c      	b.n	8008e2c <USB_HID_Receive+0x728>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_RH2, payload[0]);
 8009112:	22c0      	movs	r2, #192	@ 0xc0
 8009114:	797b      	ldrb	r3, [r7, #5]
 8009116:	497e      	ldr	r1, [pc, #504]	@ (8009310 <USB_HID_Receive+0xc0c>)
 8009118:	0112      	lsls	r2, r2, #4
 800911a:	029b      	lsls	r3, r3, #10
 800911c:	4881      	ldr	r0, [pc, #516]	@ (8009324 <USB_HID_Receive+0xc20>)
 800911e:	4013      	ands	r3, r2
 8009120:	698a      	ldr	r2, [r1, #24]
 8009122:	4002      	ands	r2, r0
 8009124:	4313      	orrs	r3, r2
 8009126:	618b      	str	r3, [r1, #24]
        current_settings.alarm_rh2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[1], payload[2]);
 8009128:	79fa      	ldrb	r2, [r7, #7]
 800912a:	79bb      	ldrb	r3, [r7, #6]
 800912c:	0212      	lsls	r2, r2, #8
 800912e:	431a      	orrs	r2, r3
 8009130:	4b7d      	ldr	r3, [pc, #500]	@ (8009328 <USB_HID_Receive+0xc24>)
 8009132:	0a11      	lsrs	r1, r2, #8
 8009134:	7059      	strb	r1, [r3, #1]
 8009136:	2100      	movs	r1, #0
 8009138:	7099      	strb	r1, [r3, #2]
 800913a:	0e11      	lsrs	r1, r2, #24
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	70d9      	strb	r1, [r3, #3]
        current_settings.alarm_delay_rh2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 8009140:	7a7b      	ldrb	r3, [r7, #9]
 8009142:	7a39      	ldrb	r1, [r7, #8]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	430b      	orrs	r3, r1
 8009148:	4978      	ldr	r1, [pc, #480]	@ (800932c <USB_HID_Receive+0xc28>)
 800914a:	0a18      	lsrs	r0, r3, #8
 800914c:	7048      	strb	r0, [r1, #1]
 800914e:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] RAD_HIGH_ALARM_2 <- state=%u th=%u delay=%u\n",
 8009150:	7979      	ldrb	r1, [r7, #5]
 8009152:	4877      	ldr	r0, [pc, #476]	@ (8009330 <USB_HID_Receive+0xc2c>)
 8009154:	e7da      	b.n	800910c <USB_HID_Receive+0xa08>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH1, payload[0]);
 8009156:	22c0      	movs	r2, #192	@ 0xc0
 8009158:	797b      	ldrb	r3, [r7, #5]
 800915a:	496d      	ldr	r1, [pc, #436]	@ (8009310 <USB_HID_Receive+0xc0c>)
 800915c:	0192      	lsls	r2, r2, #6
 800915e:	031b      	lsls	r3, r3, #12
 8009160:	4874      	ldr	r0, [pc, #464]	@ (8009334 <USB_HID_Receive+0xc30>)
 8009162:	4013      	ands	r3, r2
 8009164:	698a      	ldr	r2, [r1, #24]
 8009166:	4002      	ands	r2, r0
 8009168:	4313      	orrs	r3, r2
 800916a:	618b      	str	r3, [r1, #24]
        current_settings.alarm_th1 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	79ba      	ldrb	r2, [r7, #6]
 8009170:	4971      	ldr	r1, [pc, #452]	@ (8009338 <USB_HID_Receive+0xc34>)
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	4313      	orrs	r3, r2
 8009176:	700b      	strb	r3, [r1, #0]
 8009178:	b21a      	sxth	r2, r3
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_th1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3],payload[4]);
 800917e:	7a7b      	ldrb	r3, [r7, #9]
 8009180:	7a39      	ldrb	r1, [r7, #8]
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	430b      	orrs	r3, r1
 8009186:	496d      	ldr	r1, [pc, #436]	@ (800933c <USB_HID_Receive+0xc38>)
 8009188:	0a18      	lsrs	r0, r3, #8
 800918a:	7048      	strb	r0, [r1, #1]
 800918c:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_HIGH_ALARM_1 <- state=%u th=%d delay=%u\n",
 800918e:	7979      	ldrb	r1, [r7, #5]
 8009190:	486b      	ldr	r0, [pc, #428]	@ (8009340 <USB_HID_Receive+0xc3c>)
 8009192:	e7bb      	b.n	800910c <USB_HID_Receive+0xa08>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TH2, payload[0]);
 8009194:	495e      	ldr	r1, [pc, #376]	@ (8009310 <USB_HID_Receive+0xc0c>)
 8009196:	797b      	ldrb	r3, [r7, #5]
 8009198:	698a      	ldr	r2, [r1, #24]
 800919a:	486a      	ldr	r0, [pc, #424]	@ (8009344 <USB_HID_Receive+0xc40>)
 800919c:	079b      	lsls	r3, r3, #30
 800919e:	4002      	ands	r2, r0
 80091a0:	0c1b      	lsrs	r3, r3, #16
 80091a2:	4313      	orrs	r3, r2
 80091a4:	618b      	str	r3, [r1, #24]
        current_settings.alarm_th2 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	79ba      	ldrb	r2, [r7, #6]
 80091aa:	4967      	ldr	r1, [pc, #412]	@ (8009348 <USB_HID_Receive+0xc44>)
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	4313      	orrs	r3, r2
 80091b0:	700b      	strb	r3, [r1, #0]
 80091b2:	b21a      	sxth	r2, r3
 80091b4:	0a1b      	lsrs	r3, r3, #8
 80091b6:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_th2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3],payload[4]);
 80091b8:	7a7b      	ldrb	r3, [r7, #9]
 80091ba:	7a39      	ldrb	r1, [r7, #8]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	430b      	orrs	r3, r1
 80091c0:	4962      	ldr	r1, [pc, #392]	@ (800934c <USB_HID_Receive+0xc48>)
 80091c2:	0a18      	lsrs	r0, r3, #8
 80091c4:	7048      	strb	r0, [r1, #1]
 80091c6:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_HIGH_ALARM_2 <- state=%u th=%d delay=%u\n",
 80091c8:	7979      	ldrb	r1, [r7, #5]
 80091ca:	4861      	ldr	r0, [pc, #388]	@ (8009350 <USB_HID_Receive+0xc4c>)
 80091cc:	e79e      	b.n	800910c <USB_HID_Receive+0xa08>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL1, payload[0]);
 80091ce:	22c0      	movs	r2, #192	@ 0xc0
 80091d0:	797b      	ldrb	r3, [r7, #5]
 80091d2:	494f      	ldr	r1, [pc, #316]	@ (8009310 <USB_HID_Receive+0xc0c>)
 80091d4:	0292      	lsls	r2, r2, #10
 80091d6:	041b      	lsls	r3, r3, #16
 80091d8:	485e      	ldr	r0, [pc, #376]	@ (8009354 <USB_HID_Receive+0xc50>)
 80091da:	4013      	ands	r3, r2
 80091dc:	698a      	ldr	r2, [r1, #24]
 80091de:	4002      	ands	r2, r0
 80091e0:	4313      	orrs	r3, r2
 80091e2:	618b      	str	r3, [r1, #24]
        current_settings.alarm_tl1 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	79ba      	ldrb	r2, [r7, #6]
 80091e8:	495b      	ldr	r1, [pc, #364]	@ (8009358 <USB_HID_Receive+0xc54>)
 80091ea:	021b      	lsls	r3, r3, #8
 80091ec:	4313      	orrs	r3, r2
 80091ee:	700b      	strb	r3, [r1, #0]
 80091f0:	b21a      	sxth	r2, r3
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_tl1 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 80091f6:	7a7b      	ldrb	r3, [r7, #9]
 80091f8:	7a39      	ldrb	r1, [r7, #8]
 80091fa:	021b      	lsls	r3, r3, #8
 80091fc:	430b      	orrs	r3, r1
 80091fe:	4957      	ldr	r1, [pc, #348]	@ (800935c <USB_HID_Receive+0xc58>)
 8009200:	0a18      	lsrs	r0, r3, #8
 8009202:	7048      	strb	r0, [r1, #1]
 8009204:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_1 <- state=%u th=%d delay=%u\n",
 8009206:	7979      	ldrb	r1, [r7, #5]
 8009208:	4855      	ldr	r0, [pc, #340]	@ (8009360 <USB_HID_Receive+0xc5c>)
 800920a:	e77f      	b.n	800910c <USB_HID_Receive+0xa08>
        SET_ALARM_STATE(device_config.alarm_state, ALARM_STATE_POS_TL2, payload[0]);
 800920c:	22c0      	movs	r2, #192	@ 0xc0
 800920e:	797b      	ldrb	r3, [r7, #5]
 8009210:	493f      	ldr	r1, [pc, #252]	@ (8009310 <USB_HID_Receive+0xc0c>)
 8009212:	0312      	lsls	r2, r2, #12
 8009214:	049b      	lsls	r3, r3, #18
 8009216:	4853      	ldr	r0, [pc, #332]	@ (8009364 <USB_HID_Receive+0xc60>)
 8009218:	4013      	ands	r3, r2
 800921a:	698a      	ldr	r2, [r1, #24]
 800921c:	4002      	ands	r2, r0
 800921e:	4313      	orrs	r3, r2
 8009220:	618b      	str	r3, [r1, #24]
        current_settings.alarm_tl2 = LITTLE_ENDIAN_BYTES_TO_I16(payload[1], payload[2]);
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	79ba      	ldrb	r2, [r7, #6]
 8009226:	4950      	ldr	r1, [pc, #320]	@ (8009368 <USB_HID_Receive+0xc64>)
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	4313      	orrs	r3, r2
 800922c:	700b      	strb	r3, [r1, #0]
 800922e:	b21a      	sxth	r2, r3
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	704b      	strb	r3, [r1, #1]
        current_settings.alarm_delay_tl2 = LITTLE_ENDIAN_BYTES_TO_U16(payload[3], payload[4]);
 8009234:	7a7b      	ldrb	r3, [r7, #9]
 8009236:	7a39      	ldrb	r1, [r7, #8]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	430b      	orrs	r3, r1
 800923c:	494b      	ldr	r1, [pc, #300]	@ (800936c <USB_HID_Receive+0xc68>)
 800923e:	0a18      	lsrs	r0, r3, #8
 8009240:	7048      	strb	r0, [r1, #1]
 8009242:	700b      	strb	r3, [r1, #0]
        printf("[USB][SET_PARAM] TEMP_LOW_ALARM_2 <- state=%u th=%d delay=%u\n",
 8009244:	7979      	ldrb	r1, [r7, #5]
 8009246:	484a      	ldr	r0, [pc, #296]	@ (8009370 <USB_HID_Receive+0xc6c>)
 8009248:	e760      	b.n	800910c <USB_HID_Receive+0xa08>
        printf("[USB][SET_PARAM] Unknown parameter ID: 0x%02X\n", parm_id);
 800924a:	9905      	ldr	r1, [sp, #20]
 800924c:	4849      	ldr	r0, [pc, #292]	@ (8009374 <USB_HID_Receive+0xc70>)
 800924e:	f010 fd33 	bl	8019cb8 <iprintf>
        Rad_USBX_HID_ACK_response(DEVICE_CID_SET_PARAMETERS_REQ, parm_id, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 8009252:	22fe      	movs	r2, #254	@ 0xfe
 8009254:	2003      	movs	r0, #3
 8009256:	9905      	ldr	r1, [sp, #20]
 8009258:	e5a1      	b.n	8008d9e <USB_HID_Receive+0x69a>
    switch (command_code) {
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	1e58      	subs	r0, r3, #1
 800925e:	2804      	cmp	r0, #4
 8009260:	d81e      	bhi.n	80092a0 <USB_HID_Receive+0xb9c>
 8009262:	f7f6 ff63 	bl	800012c <__gnu_thumb1_case_uqi>
 8009266:	0803      	.short	0x0803
 8009268:	1510      	.short	0x1510
 800926a:	17          	.byte	0x17
 800926b:	00          	.byte	0x00
            printf("[CMD] Start logging\n");
 800926c:	4842      	ldr	r0, [pc, #264]	@ (8009378 <USB_HID_Receive+0xc74>)
            printf("[CMD] Resume\n");
 800926e:	f010 fd93 	bl	8019d98 <puts>
            Switch_Backup_reg(MODE_Start);
 8009272:	2003      	movs	r0, #3
 8009274:	e003      	b.n	800927e <USB_HID_Receive+0xb7a>
            printf("[CMD] Stop logging\n");
 8009276:	4841      	ldr	r0, [pc, #260]	@ (800937c <USB_HID_Receive+0xc78>)
 8009278:	f010 fd8e 	bl	8019d98 <puts>
            Switch_Backup_reg(MODE_Stop);
 800927c:	2002      	movs	r0, #2
            Switch_Backup_reg(MODE_Start);
 800927e:	f7fc fdcb 	bl	8005e18 <Switch_Backup_reg>
    Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_SUCCESS);
 8009282:	2200      	movs	r2, #0
 8009284:	e011      	b.n	80092aa <USB_HID_Receive+0xba6>
            printf("[CMD] Pause\n");
 8009286:	483e      	ldr	r0, [pc, #248]	@ (8009380 <USB_HID_Receive+0xc7c>)
 8009288:	f010 fd86 	bl	8019d98 <puts>
            Switch_Backup_reg(MODE_Pause);
 800928c:	2004      	movs	r0, #4
 800928e:	e7f6      	b.n	800927e <USB_HID_Receive+0xb7a>
            printf("[CMD] Resume\n");
 8009290:	483c      	ldr	r0, [pc, #240]	@ (8009384 <USB_HID_Receive+0xc80>)
 8009292:	e7ec      	b.n	800926e <USB_HID_Receive+0xb6a>
            printf("[CMD] Erase Data\n");
 8009294:	483c      	ldr	r0, [pc, #240]	@ (8009388 <USB_HID_Receive+0xc84>)
 8009296:	f010 fd7f 	bl	8019d98 <puts>
            meas_data_log_erase();
 800929a:	f7ff f87b 	bl	8008394 <meas_data_log_erase>
            break;
 800929e:	e7f0      	b.n	8009282 <USB_HID_Receive+0xb7e>
            printf("[CMD] Unknown code: 0x%02X\n", command_code);
 80092a0:	483a      	ldr	r0, [pc, #232]	@ (800938c <USB_HID_Receive+0xc88>)
 80092a2:	9905      	ldr	r1, [sp, #20]
 80092a4:	f010 fd08 	bl	8019cb8 <iprintf>
            Rad_USBX_HID_ACK_response(DEVICE_CID_SET_COMMAND_REQ, command_code, DEVICE_PACKET_PARAMETER_NOT_SUPPORTED);
 80092a8:	22fe      	movs	r2, #254	@ 0xfe
 80092aa:	2004      	movs	r0, #4
 80092ac:	9905      	ldr	r1, [sp, #20]
 80092ae:	e576      	b.n	8008d9e <USB_HID_Receive+0x69a>
 80092b0:	20002be7 	.word	0x20002be7
 80092b4:	0801dcab 	.word	0x0801dcab
 80092b8:	20002c19 	.word	0x20002c19
 80092bc:	0801dcd6 	.word	0x0801dcd6
 80092c0:	20002c1a 	.word	0x20002c1a
 80092c4:	0801dcf9 	.word	0x0801dcf9
 80092c8:	20002c5b 	.word	0x20002c5b
 80092cc:	0801dd1d 	.word	0x0801dd1d
 80092d0:	20002c26 	.word	0x20002c26
 80092d4:	0801dd69 	.word	0x0801dd69
 80092d8:	0801dd87 	.word	0x0801dd87
 80092dc:	20002c2b 	.word	0x20002c2b
 80092e0:	0801de04 	.word	0x0801de04
 80092e4:	0801ddc8 	.word	0x0801ddc8
 80092e8:	20002c27 	.word	0x20002c27
 80092ec:	0801de7b 	.word	0x0801de7b
 80092f0:	0801de40 	.word	0x0801de40
 80092f4:	0801deb6 	.word	0x0801deb6
 80092f8:	20002c2f 	.word	0x20002c2f
 80092fc:	0801dee6 	.word	0x0801dee6
 8009300:	20002c40 	.word	0x20002c40
 8009304:	0801df0c 	.word	0x0801df0c
 8009308:	20002c41 	.word	0x20002c41
 800930c:	0801df2e 	.word	0x0801df2e
 8009310:	20000b50 	.word	0x20000b50
 8009314:	fffffcff 	.word	0xfffffcff
 8009318:	20002c47 	.word	0x20002c47
 800931c:	20002c30 	.word	0x20002c30
 8009320:	0801df4f 	.word	0x0801df4f
 8009324:	fffff3ff 	.word	0xfffff3ff
 8009328:	20002c4f 	.word	0x20002c4f
 800932c:	20002c32 	.word	0x20002c32
 8009330:	0801df8d 	.word	0x0801df8d
 8009334:	ffffcfff 	.word	0xffffcfff
 8009338:	20002c4b 	.word	0x20002c4b
 800933c:	20002c34 	.word	0x20002c34
 8009340:	0801dfcb 	.word	0x0801dfcb
 8009344:	ffff3fff 	.word	0xffff3fff
 8009348:	20002c53 	.word	0x20002c53
 800934c:	20002c36 	.word	0x20002c36
 8009350:	0801e00a 	.word	0x0801e00a
 8009354:	fffcffff 	.word	0xfffcffff
 8009358:	20002c4d 	.word	0x20002c4d
 800935c:	20002c38 	.word	0x20002c38
 8009360:	0801e049 	.word	0x0801e049
 8009364:	fff3ffff 	.word	0xfff3ffff
 8009368:	20002c55 	.word	0x20002c55
 800936c:	20002c3a 	.word	0x20002c3a
 8009370:	0801e087 	.word	0x0801e087
 8009374:	0801e0c5 	.word	0x0801e0c5
 8009378:	0801e122 	.word	0x0801e122
 800937c:	0801e136 	.word	0x0801e136
 8009380:	0801e149 	.word	0x0801e149
 8009384:	0801e155 	.word	0x0801e155
 8009388:	0801e162 	.word	0x0801e162
 800938c:	0801e173 	.word	0x0801e173
         uint8_t yy = data[4];
 8009390:	793b      	ldrb	r3, [r7, #4]
         uint8_t hh = data[7];
 8009392:	79fc      	ldrb	r4, [r7, #7]
         uint8_t yy = data[4];
 8009394:	9305      	str	r3, [sp, #20]
         uint8_t mm = data[5];
 8009396:	797b      	ldrb	r3, [r7, #5]
         uint8_t mi = data[8];
 8009398:	7a3d      	ldrb	r5, [r7, #8]
         uint8_t mm = data[5];
 800939a:	9307      	str	r3, [sp, #28]
         uint8_t dd = data[6];
 800939c:	79bb      	ldrb	r3, [r7, #6]
         uint8_t ss = data[9];
 800939e:	7a7e      	ldrb	r6, [r7, #9]
         uint8_t dd = data[6];
 80093a0:	9308      	str	r3, [sp, #32]
         Set_RTC_TimeOnly(yy, mm, dd, hh, mi, ss);
 80093a2:	9a08      	ldr	r2, [sp, #32]
 80093a4:	0023      	movs	r3, r4
 80093a6:	9907      	ldr	r1, [sp, #28]
 80093a8:	9805      	ldr	r0, [sp, #20]
 80093aa:	9601      	str	r6, [sp, #4]
 80093ac:	9500      	str	r5, [sp, #0]
 80093ae:	f7fc fb35 	bl	8005a1c <Set_RTC_TimeOnly>
         printf("[CMD] Set RTC to 20%02u-%02u-%02u %02u:%02u:%02u\n", yy, mm, dd, hh, mi, ss);
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	9a07      	ldr	r2, [sp, #28]
 80093b6:	9905      	ldr	r1, [sp, #20]
 80093b8:	9602      	str	r6, [sp, #8]
 80093ba:	9501      	str	r5, [sp, #4]
 80093bc:	9400      	str	r4, [sp, #0]
 80093be:	4807      	ldr	r0, [pc, #28]	@ (80093dc <USB_HID_Receive+0xcd8>)
 80093c0:	f010 fc7a 	bl	8019cb8 <iprintf>
         break;
 80093c4:	f7ff fa3f 	bl	8008846 <USB_HID_Receive+0x142>
        LOG_APP("[USB] Unknown command ID: 0x%02X\n", cmd_id);
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <USB_HID_Receive+0xcdc>)
 80093ca:	4a06      	ldr	r2, [pc, #24]	@ (80093e4 <USB_HID_Receive+0xce0>)
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	4906      	ldr	r1, [pc, #24]	@ (80093e8 <USB_HID_Receive+0xce4>)
 80093d0:	002b      	movs	r3, r5
 80093d2:	68c0      	ldr	r0, [r0, #12]
 80093d4:	f010 fc44 	bl	8019c60 <fiprintf>
        break;
 80093d8:	f7ff fa35 	bl	8008846 <USB_HID_Receive+0x142>
 80093dc:	0801e18f 	.word	0x0801e18f
 80093e0:	200002cc 	.word	0x200002cc
 80093e4:	0801e1c1 	.word	0x0801e1c1
 80093e8:	0801e1c5 	.word	0x0801e1c5

080093ec <RAD_USBX_Fatfs_format_disk>:
void RAD_USBX_Fatfs_format_disk(void) {
 80093ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ee:	b087      	sub	sp, #28
  MKFS_PARM format_options = {
 80093f0:	ac02      	add	r4, sp, #8
 80093f2:	0022      	movs	r2, r4
 80093f4:	4b23      	ldr	r3, [pc, #140]	@ (8009484 <RAD_USBX_Fatfs_format_disk+0x98>)
 80093f6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80093f8:	c223      	stmia	r2!, {r0, r1, r5}
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 80093fa:	4d23      	ldr	r5, [pc, #140]	@ (8009488 <RAD_USBX_Fatfs_format_disk+0x9c>)
  MKFS_PARM format_options = {
 80093fc:	681b      	ldr	r3, [r3, #0]
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 80093fe:	0029      	movs	r1, r5
  MKFS_PARM format_options = {
 8009400:	6013      	str	r3, [r2, #0]
  res = f_mount(&fs, "", 1); // The "1" forces mounting now
 8009402:	4822      	ldr	r0, [pc, #136]	@ (800948c <RAD_USBX_Fatfs_format_disk+0xa0>)
 8009404:	2201      	movs	r2, #1
 8009406:	f00b f9db 	bl	80147c0 <f_mount>
 800940a:	4e21      	ldr	r6, [pc, #132]	@ (8009490 <RAD_USBX_Fatfs_format_disk+0xa4>)
 800940c:	7030      	strb	r0, [r6, #0]
  if (res == FR_NO_FILESYSTEM) {
 800940e:	280d      	cmp	r0, #13
 8009410:	d118      	bne.n	8009444 <RAD_USBX_Fatfs_format_disk+0x58>
      LOG_USB_MSC("No filesystem found, formatting...\r\n");
 8009412:	4b20      	ldr	r3, [pc, #128]	@ (8009494 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8009414:	4f20      	ldr	r7, [pc, #128]	@ (8009498 <RAD_USBX_Fatfs_format_disk+0xac>)
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	4920      	ldr	r1, [pc, #128]	@ (800949c <RAD_USBX_Fatfs_format_disk+0xb0>)
 800941c:	9a01      	ldr	r2, [sp, #4]
 800941e:	68d8      	ldr	r0, [r3, #12]
 8009420:	f010 fc1e 	bl	8019c60 <fiprintf>
      res = f_mkfs("", &format_options , work, sizeof(work));
 8009424:	2380      	movs	r3, #128	@ 0x80
 8009426:	0021      	movs	r1, r4
 8009428:	015b      	lsls	r3, r3, #5
 800942a:	0028      	movs	r0, r5
 800942c:	4a1c      	ldr	r2, [pc, #112]	@ (80094a0 <RAD_USBX_Fatfs_format_disk+0xb4>)
 800942e:	f00b fd61 	bl	8014ef4 <f_mkfs>
 8009432:	1e03      	subs	r3, r0, #0
 8009434:	7030      	strb	r0, [r6, #0]
      if (res != FR_OK) {
 8009436:	d005      	beq.n	8009444 <RAD_USBX_Fatfs_format_disk+0x58>
          LOG_USB_MSC("Error formatting drive! ret:%02x\r\n",res);
 8009438:	6838      	ldr	r0, [r7, #0]
 800943a:	491a      	ldr	r1, [pc, #104]	@ (80094a4 <RAD_USBX_Fatfs_format_disk+0xb8>)
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	68c0      	ldr	r0, [r0, #12]
 8009440:	f010 fc0e 	bl	8019c60 <fiprintf>
  res = f_mount(&fs, "", 1);
 8009444:	2201      	movs	r2, #1
 8009446:	0029      	movs	r1, r5
 8009448:	4810      	ldr	r0, [pc, #64]	@ (800948c <RAD_USBX_Fatfs_format_disk+0xa0>)
 800944a:	f00b f9b9 	bl	80147c0 <f_mount>
 800944e:	4c10      	ldr	r4, [pc, #64]	@ (8009490 <RAD_USBX_Fatfs_format_disk+0xa4>)
 8009450:	1e03      	subs	r3, r0, #0
 8009452:	7020      	strb	r0, [r4, #0]
  if (res != FR_OK) {
 8009454:	d006      	beq.n	8009464 <RAD_USBX_Fatfs_format_disk+0x78>
        LOG_USB_MSC("Error mount drive! ret:%02x\r\n",res);
 8009456:	4810      	ldr	r0, [pc, #64]	@ (8009498 <RAD_USBX_Fatfs_format_disk+0xac>)
 8009458:	4a0e      	ldr	r2, [pc, #56]	@ (8009494 <RAD_USBX_Fatfs_format_disk+0xa8>)
 800945a:	6800      	ldr	r0, [r0, #0]
 800945c:	4912      	ldr	r1, [pc, #72]	@ (80094a8 <RAD_USBX_Fatfs_format_disk+0xbc>)
 800945e:	68c0      	ldr	r0, [r0, #12]
 8009460:	f010 fbfe 	bl	8019c60 <fiprintf>
  res = f_setlabel("0:RAD_TAG_LOG");
 8009464:	4811      	ldr	r0, [pc, #68]	@ (80094ac <RAD_USBX_Fatfs_format_disk+0xc0>)
 8009466:	f00b fcc7 	bl	8014df8 <f_setlabel>
 800946a:	1e03      	subs	r3, r0, #0
 800946c:	7020      	strb	r0, [r4, #0]
    if (res != FR_OK) {
 800946e:	d006      	beq.n	800947e <RAD_USBX_Fatfs_format_disk+0x92>
        LOG_USB_MSC("Error setlabel volume! ret:%02x\r\n",res);
 8009470:	4809      	ldr	r0, [pc, #36]	@ (8009498 <RAD_USBX_Fatfs_format_disk+0xac>)
 8009472:	4a08      	ldr	r2, [pc, #32]	@ (8009494 <RAD_USBX_Fatfs_format_disk+0xa8>)
 8009474:	6800      	ldr	r0, [r0, #0]
 8009476:	490e      	ldr	r1, [pc, #56]	@ (80094b0 <RAD_USBX_Fatfs_format_disk+0xc4>)
 8009478:	68c0      	ldr	r0, [r0, #12]
 800947a:	f010 fbf1 	bl	8019c60 <fiprintf>
}
 800947e:	b007      	add	sp, #28
 8009480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	0801c570 	.word	0x0801c570
 8009488:	0801ed35 	.word	0x0801ed35
 800948c:	20001b7c 	.word	0x20001b7c
 8009490:	20001b78 	.word	0x20001b78
 8009494:	0801e1ec 	.word	0x0801e1ec
 8009498:	200002cc 	.word	0x200002cc
 800949c:	0801e1f4 	.word	0x0801e1f4
 80094a0:	20000b78 	.word	0x20000b78
 80094a4:	0801e21e 	.word	0x0801e21e
 80094a8:	0801e246 	.word	0x0801e246
 80094ac:	0801e269 	.word	0x0801e269
 80094b0:	0801e277 	.word	0x0801e277

080094b4 <RAD_USBX_Clean_Vol>:
void RAD_USBX_Clean_Vol(void) {
 80094b4:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < num_blk_64k; i++)
 80094b6:	2580      	movs	r5, #128	@ 0x80
void RAD_USBX_Clean_Vol(void) {
 80094b8:	2400      	movs	r4, #0
    for (int i = 0; i < num_blk_64k; i++)
 80094ba:	036d      	lsls	r5, r5, #13
        SPI_FLASH_EraseBlock64k(addr);
 80094bc:	0020      	movs	r0, r4
 80094be:	f000 fb81 	bl	8009bc4 <SPI_FLASH_EraseBlock64k>
    for (int i = 0; i < num_blk_64k; i++)
 80094c2:	2380      	movs	r3, #128	@ 0x80
 80094c4:	025b      	lsls	r3, r3, #9
 80094c6:	18e4      	adds	r4, r4, r3
 80094c8:	42ac      	cmp	r4, r5
 80094ca:	d1f7      	bne.n	80094bc <RAD_USBX_Clean_Vol+0x8>
}
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080094d0 <RAD_Fatfs_MountOnly>:


FRESULT RAD_Fatfs_MountOnly(void)
{
    // 안전하게 언마운트 후 재마운트 (선택)
    f_mount(0, "", 0);
 80094d0:	2200      	movs	r2, #0
{
 80094d2:	b510      	push	{r4, lr}
    f_mount(0, "", 0);
 80094d4:	4c0c      	ldr	r4, [pc, #48]	@ (8009508 <RAD_Fatfs_MountOnly+0x38>)
 80094d6:	0010      	movs	r0, r2
 80094d8:	0021      	movs	r1, r4
 80094da:	f00b f971 	bl	80147c0 <f_mount>

    FRESULT r = f_mount(&fs, "", 1);  // 즉시 마운트
 80094de:	0021      	movs	r1, r4
 80094e0:	2201      	movs	r2, #1
 80094e2:	480a      	ldr	r0, [pc, #40]	@ (800950c <RAD_Fatfs_MountOnly+0x3c>)
 80094e4:	f00b f96c 	bl	80147c0 <f_mount>
 80094e8:	1e04      	subs	r4, r0, #0
    if (r == FR_OK) {
        printf("[FATFS] remount OK\r\n");
 80094ea:	4809      	ldr	r0, [pc, #36]	@ (8009510 <RAD_Fatfs_MountOnly+0x40>)
    if (r == FR_OK) {
 80094ec:	d002      	beq.n	80094f4 <RAD_Fatfs_MountOnly+0x24>
    } else if (r == FR_NO_FILESYSTEM) {
 80094ee:	2c0d      	cmp	r4, #13
 80094f0:	d104      	bne.n	80094fc <RAD_Fatfs_MountOnly+0x2c>
        printf("[FATFS] remount FAIL: no filesystem (FR_NO_FILESYSTEM)\r\n");
 80094f2:	4808      	ldr	r0, [pc, #32]	@ (8009514 <RAD_Fatfs_MountOnly+0x44>)
 80094f4:	f010 fc50 	bl	8019d98 <puts>
        // RAD_USBX_Fatfs_format_disk();
    } else {
        printf("[FATFS] remount FAIL: %d\r\n", r);
    }
    return r;
}
 80094f8:	0020      	movs	r0, r4
 80094fa:	bd10      	pop	{r4, pc}
        printf("[FATFS] remount FAIL: %d\r\n", r);
 80094fc:	0021      	movs	r1, r4
 80094fe:	4806      	ldr	r0, [pc, #24]	@ (8009518 <RAD_Fatfs_MountOnly+0x48>)
 8009500:	f010 fbda 	bl	8019cb8 <iprintf>
 8009504:	e7f8      	b.n	80094f8 <RAD_Fatfs_MountOnly+0x28>
 8009506:	46c0      	nop			@ (mov r8, r8)
 8009508:	0801ed35 	.word	0x0801ed35
 800950c:	20001b7c 	.word	0x20001b7c
 8009510:	0801e29e 	.word	0x0801e29e
 8009514:	0801e2b2 	.word	0x0801e2b2
 8009518:	0801e2ea 	.word	0x0801e2ea

0800951c <is_leap_u16>:
extern uint32_t Interval_LCD_Count;
extern volatile bool RTC_During_Wakeup;

// ==== Epoch(절대초) 유틸: 2000-01-01 00:00:00 기준 ====
bool is_leap_u16(uint16_t y2000){
    uint16_t y = 2000 + y2000;
 800951c:	23fa      	movs	r3, #250	@ 0xfa
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	18c0      	adds	r0, r0, r3
bool is_leap_u16(uint16_t y2000){
 8009522:	b510      	push	{r4, lr}
    uint16_t y = 2000 + y2000;
 8009524:	b284      	uxth	r4, r0
    return ((y%4==0) && (y%100!=0)) || (y%400==0);
 8009526:	0780      	lsls	r0, r0, #30
 8009528:	d107      	bne.n	800953a <is_leap_u16+0x1e>
 800952a:	2164      	movs	r1, #100	@ 0x64
 800952c:	0020      	movs	r0, r4
 800952e:	f7f6 fea1 	bl	8000274 <__aeabi_uidivmod>
 8009532:	b289      	uxth	r1, r1
 8009534:	2001      	movs	r0, #1
 8009536:	2900      	cmp	r1, #0
 8009538:	d107      	bne.n	800954a <is_leap_u16+0x2e>
 800953a:	21c8      	movs	r1, #200	@ 0xc8
 800953c:	0020      	movs	r0, r4
 800953e:	0049      	lsls	r1, r1, #1
 8009540:	f7f6 fe98 	bl	8000274 <__aeabi_uidivmod>
 8009544:	b288      	uxth	r0, r1
 8009546:	4243      	negs	r3, r0
 8009548:	4158      	adcs	r0, r3
}
 800954a:	bd10      	pop	{r4, pc}

0800954c <dim_u16>:
 uint8_t dim_u16(uint8_t m, uint16_t y2000){
 800954c:	0003      	movs	r3, r0
 800954e:	b510      	push	{r4, lr}
 8009550:	0008      	movs	r0, r1
    static const uint8_t dim[12]={31,28,31,30,31,30,31,31,30,31,30,31};
    return (m==2) ? (uint8_t)(dim[1] + (is_leap_u16(y2000)?1:0)) : dim[m-1];
 8009552:	2b02      	cmp	r3, #2
 8009554:	d104      	bne.n	8009560 <dim_u16+0x14>
 8009556:	f7ff ffe1 	bl	800951c <is_leap_u16>
 800955a:	301c      	adds	r0, #28
 800955c:	b2c0      	uxtb	r0, r0
}
 800955e:	bd10      	pop	{r4, pc}
    return (m==2) ? (uint8_t)(dim[1] + (is_leap_u16(y2000)?1:0)) : dim[m-1];
 8009560:	4a01      	ldr	r2, [pc, #4]	@ (8009568 <dim_u16+0x1c>)
 8009562:	5c98      	ldrb	r0, [r3, r2]
 8009564:	e7fb      	b.n	800955e <dim_u16+0x12>
 8009566:	46c0      	nop			@ (mov r8, r8)
 8009568:	0801fd8e 	.word	0x0801fd8e

0800956c <ymd_to_epoch>:
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 800956c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // days since 2000-01-01
    uint32_t days = 0;
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 800956e:	2400      	movs	r4, #0
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 8009570:	0006      	movs	r6, r0
 8009572:	000f      	movs	r7, r1
    uint32_t days = 0;
 8009574:	0025      	movs	r5, r4
 uint32_t ymd_to_epoch(uint16_t y2000, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
 8009576:	b085      	sub	sp, #20
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	ab0a      	add	r3, sp, #40	@ 0x28
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	9200      	str	r2, [sp, #0]
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	9303      	str	r3, [sp, #12]
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 8009588:	42b4      	cmp	r4, r6
 800958a:	d114      	bne.n	80095b6 <ymd_to_epoch+0x4a>
    for(uint8_t im=1; im<m; ++im)  days += dim_u16(im, y2000);
 800958c:	2401      	movs	r4, #1
 800958e:	42bc      	cmp	r4, r7
 8009590:	d31a      	bcc.n	80095c8 <ymd_to_epoch+0x5c>
    days += (uint32_t)(d - 1);
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 8009592:	203c      	movs	r0, #60	@ 0x3c
 8009594:	9b02      	ldr	r3, [sp, #8]
 8009596:	9a01      	ldr	r2, [sp, #4]
 8009598:	4358      	muls	r0, r3
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	18c0      	adds	r0, r0, r3
 800959e:	23e1      	movs	r3, #225	@ 0xe1
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	4353      	muls	r3, r2
 80095a4:	18c0      	adds	r0, r0, r3
    days += (uint32_t)(d - 1);
 80095a6:	9b00      	ldr	r3, [sp, #0]
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 80095a8:	4a0b      	ldr	r2, [pc, #44]	@ (80095d8 <ymd_to_epoch+0x6c>)
    days += (uint32_t)(d - 1);
 80095aa:	3b01      	subs	r3, #1
 80095ac:	195b      	adds	r3, r3, r5
    return days*86400u + (uint32_t)hh*3600u + (uint32_t)mm*60u + ss;
 80095ae:	4353      	muls	r3, r2
 80095b0:	18c0      	adds	r0, r0, r3
}
 80095b2:	b005      	add	sp, #20
 80095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(uint16_t y=0; y<y2000; ++y) days += (365 + (is_leap_u16(y)?1:0));
 80095b6:	0020      	movs	r0, r4
 80095b8:	f7ff ffb0 	bl	800951c <is_leap_u16>
 80095bc:	306e      	adds	r0, #110	@ 0x6e
 80095be:	30ff      	adds	r0, #255	@ 0xff
 80095c0:	3401      	adds	r4, #1
 80095c2:	182d      	adds	r5, r5, r0
 80095c4:	b2a4      	uxth	r4, r4
 80095c6:	e7df      	b.n	8009588 <ymd_to_epoch+0x1c>
    for(uint8_t im=1; im<m; ++im)  days += dim_u16(im, y2000);
 80095c8:	0020      	movs	r0, r4
 80095ca:	0031      	movs	r1, r6
 80095cc:	f7ff ffbe 	bl	800954c <dim_u16>
 80095d0:	3401      	adds	r4, #1
 80095d2:	182d      	adds	r5, r5, r0
 80095d4:	b2e4      	uxtb	r4, r4
 80095d6:	e7da      	b.n	800958e <ymd_to_epoch+0x22>
 80095d8:	00015180 	.word	0x00015180

080095dc <Save_DeviceSettings>:
    *m = mon;
    *d = (uint8_t)(days+1);
}


void Save_DeviceSettings(const DeviceSettings *cfg) {
 80095dc:	b530      	push	{r4, r5, lr}
 80095de:	b087      	sub	sp, #28
 80095e0:	0005      	movs	r5, r0
    HAL_FLASH_Unlock();
 80095e2:	f005 fc6f 	bl	800eec4 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase = {
 80095e6:	2300      	movs	r3, #0
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	3302      	adds	r3, #2
 80095ec:	9302      	str	r3, [sp, #8]
 80095ee:	337d      	adds	r3, #125	@ 0x7d
 80095f0:	9304      	str	r3, [sp, #16]
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .Page = (SETTINGS_FLASH_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE,
        .NbPages = 1
    };
    uint32_t err;
    HAL_FLASHEx_Erase(&erase, &err);
 80095f2:	a901      	add	r1, sp, #4
    FLASH_EraseInitTypeDef erase = {
 80095f4:	3b7e      	subs	r3, #126	@ 0x7e
    HAL_FLASHEx_Erase(&erase, &err);
 80095f6:	a802      	add	r0, sp, #8
    FLASH_EraseInitTypeDef erase = {
 80095f8:	9305      	str	r3, [sp, #20]
    HAL_FLASHEx_Erase(&erase, &err);
 80095fa:	f005 fcf9 	bl	800eff0 <HAL_FLASHEx_Erase>
 80095fe:	4c09      	ldr	r4, [pc, #36]	@ (8009624 <Save_DeviceSettings+0x48>)

    const uint64_t *pdata = (const uint64_t*)cfg;
    for (uint32_t i = 0; i < sizeof(DeviceSettings)/8; i++) {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8009600:	4b09      	ldr	r3, [pc, #36]	@ (8009628 <Save_DeviceSettings+0x4c>)
 8009602:	0021      	movs	r1, r4
 8009604:	18e3      	adds	r3, r4, r3
 8009606:	18eb      	adds	r3, r5, r3
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2001      	movs	r0, #1
 800960e:	f005 fcab 	bl	800ef68 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < sizeof(DeviceSettings)/8; i++) {
 8009612:	4b06      	ldr	r3, [pc, #24]	@ (800962c <Save_DeviceSettings+0x50>)
 8009614:	3408      	adds	r4, #8
 8009616:	429c      	cmp	r4, r3
 8009618:	d1f2      	bne.n	8009600 <Save_DeviceSettings+0x24>
            SETTINGS_FLASH_ADDR + i*8, pdata[i]);
    }
    HAL_FLASH_Lock();
 800961a:	f005 fc65 	bl	800eee8 <HAL_FLASH_Lock>
}
 800961e:	b007      	add	sp, #28
 8009620:	bd30      	pop	{r4, r5, pc}
 8009622:	46c0      	nop			@ (mov r8, r8)
 8009624:	0803f800 	.word	0x0803f800
 8009628:	f7fc0800 	.word	0xf7fc0800
 800962c:	0803f8d0 	.word	0x0803f8d0

08009630 <Load_DeviceSettings>:

void Load_DeviceSettings(DeviceSettings *cfg) {
 8009630:	b510      	push	{r4, lr}
    memcpy(cfg, (const void*)SETTINGS_FLASH_ADDR, sizeof(DeviceSettings));
 8009632:	22d3      	movs	r2, #211	@ 0xd3
 8009634:	4901      	ldr	r1, [pc, #4]	@ (800963c <Load_DeviceSettings+0xc>)
 8009636:	f010 fdd5 	bl	801a1e4 <memcpy>
}
 800963a:	bd10      	pop	{r4, pc}
 800963c:	0803f800 	.word	0x0803f800

08009640 <Load_CurrentSettings>:

// 내부 로컬 캐시 로드/세이브
void Load_CurrentSettings(void) {
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memcpy(&current_settings, (const void*)SETTINGS_FLASH_ADDR, sizeof(DeviceSettings));
 8009642:	4d57      	ldr	r5, [pc, #348]	@ (80097a0 <Load_CurrentSettings+0x160>)
 8009644:	22d3      	movs	r2, #211	@ 0xd3
 8009646:	0028      	movs	r0, r5
 8009648:	4956      	ldr	r1, [pc, #344]	@ (80097a4 <Load_CurrentSettings+0x164>)
 800964a:	f010 fdcb 	bl	801a1e4 <memcpy>

    // CSV용 주요 설정값
    strncpy(current_settings.device_code, "LogNc 1", sizeof(current_settings.device_code) - 1);
 800964e:	220f      	movs	r2, #15
 8009650:	0028      	movs	r0, r5
 8009652:	4955      	ldr	r1, [pc, #340]	@ (80097a8 <Load_CurrentSettings+0x168>)
 8009654:	f010 fd1f 	bl	801a096 <strncpy>
    strncpy(current_settings.firmware_ver, "12.13", sizeof(current_settings.firmware_ver) - 1);
 8009658:	2207      	movs	r2, #7
 800965a:	4954      	ldr	r1, [pc, #336]	@ (80097ac <Load_CurrentSettings+0x16c>)
 800965c:	4854      	ldr	r0, [pc, #336]	@ (80097b0 <Load_CurrentSettings+0x170>)
 800965e:	f010 fd1a 	bl	801a096 <strncpy>
    strncpy(current_settings.model, "Test ver", sizeof(current_settings.model) - 1);
 8009662:	4e54      	ldr	r6, [pc, #336]	@ (80097b4 <Load_CurrentSettings+0x174>)
 8009664:	220f      	movs	r2, #15
 8009666:	0030      	movs	r0, r6
 8009668:	4953      	ldr	r1, [pc, #332]	@ (80097b8 <Load_CurrentSettings+0x178>)
 800966a:	f010 fd14 	bl	801a096 <strncpy>
    strncpy(current_settings.serial, "RT01023", sizeof(current_settings.serial) - 1);
 800966e:	220f      	movs	r2, #15
 8009670:	4952      	ldr	r1, [pc, #328]	@ (80097bc <Load_CurrentSettings+0x17c>)
 8009672:	4853      	ldr	r0, [pc, #332]	@ (80097c0 <Load_CurrentSettings+0x180>)
 8009674:	f010 fd0f 	bl	801a096 <strncpy>
    strncpy(current_settings.trip_desc, "Temperature and Radioactivity recording", sizeof(current_settings.trip_desc) - 1);
 8009678:	2231      	movs	r2, #49	@ 0x31
 800967a:	4952      	ldr	r1, [pc, #328]	@ (80097c4 <Load_CurrentSettings+0x184>)
 800967c:	4852      	ldr	r0, [pc, #328]	@ (80097c8 <Load_CurrentSettings+0x188>)
 800967e:	f010 fd0a 	bl	801a096 <strncpy>
    current_settings.trip_code = 0x01;
 8009682:	002b      	movs	r3, r5
 8009684:	2400      	movs	r4, #0
 8009686:	2701      	movs	r7, #1
 8009688:	3339      	adds	r3, #57	@ 0x39
 800968a:	701f      	strb	r7, [r3, #0]
 800968c:	705c      	strb	r4, [r3, #1]

    // 센서 타입 (probe_type 용)
    current_settings.sensor_type = 1; // 예: 1이면 T&R(interval)로 해석 (CSV는 고정문자열로 처리됨)
 800968e:	0033      	movs	r3, r6
 8009690:	3320      	adds	r3, #32
 8009692:	701f      	strb	r7, [r3, #0]

    // Config 설정
    current_settings.start_delay = 20;
 8009694:	002b      	movs	r3, r5
 8009696:	2214      	movs	r2, #20
 8009698:	336e      	adds	r3, #110	@ 0x6e
 800969a:	701a      	strb	r2, [r3, #0]
 800969c:	705c      	strb	r4, [r3, #1]
 800969e:	709c      	strb	r4, [r3, #2]
 80096a0:	70dc      	strb	r4, [r3, #3]
    current_settings.temp_interval = 30;
 80096a2:	002b      	movs	r3, r5
 80096a4:	211e      	movs	r1, #30
 80096a6:	337f      	adds	r3, #127	@ 0x7f
 80096a8:	7019      	strb	r1, [r3, #0]
 80096aa:	705c      	strb	r4, [r3, #1]
 80096ac:	709c      	strb	r4, [r3, #2]
 80096ae:	70dc      	strb	r4, [r3, #3]
    //device_config.interval_time = current_settings.temp_interval;//
    current_settings.rad_interval = 60;
 80096b0:	002b      	movs	r3, r5
 80096b2:	203c      	movs	r0, #60	@ 0x3c
 80096b4:	337b      	adds	r3, #123	@ 0x7b
 80096b6:	7018      	strb	r0, [r3, #0]
 80096b8:	705c      	strb	r4, [r3, #1]
 80096ba:	709c      	strb	r4, [r3, #2]
 80096bc:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_delay = 0;

    // Display 설정
    current_settings.display_temp_unit = 0;
 80096be:	002b      	movs	r3, r5
 80096c0:	3394      	adds	r3, #148	@ 0x94
 80096c2:	701c      	strb	r4, [r3, #0]
    current_settings.display_dose_unit = 0;
 80096c4:	002b      	movs	r3, r5
    device_config.display_temp = current_settings.display_temp_unit;
 80096c6:	4841      	ldr	r0, [pc, #260]	@ (80097cc <Load_CurrentSettings+0x18c>)
    current_settings.alarm_delay = 0;
 80096c8:	3680      	adds	r6, #128	@ 0x80
    current_settings.display_dose_unit = 0;
 80096ca:	3395      	adds	r3, #149	@ 0x95
    current_settings.alarm_delay = 0;
 80096cc:	7034      	strb	r4, [r6, #0]
 80096ce:	7074      	strb	r4, [r6, #1]
 80096d0:	70b4      	strb	r4, [r6, #2]
 80096d2:	70f4      	strb	r4, [r6, #3]
    current_settings.display_dose_unit = 0;
 80096d4:	701c      	strb	r4, [r3, #0]
    device_config.display_temp = current_settings.display_temp_unit;
 80096d6:	83c4      	strh	r4, [r0, #30]
    device_config.display_dose = current_settings.display_dose_unit;
    Save_IntervalInfo_To_Backup(&device_config);
 80096d8:	f7fc fd1e 	bl	8006118 <Save_IntervalInfo_To_Backup>

    // 알람 설정값
    current_settings.alarm_rh1 = 200000; // devide 100 is u/Sv
 80096dc:	002b      	movs	r3, r5
 80096de:	2240      	movs	r2, #64	@ 0x40
 80096e0:	339b      	adds	r3, #155	@ 0x9b
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	3a33      	subs	r2, #51	@ 0x33
 80096e6:	705a      	strb	r2, [r3, #1]
 80096e8:	3a0a      	subs	r2, #10
 80096ea:	709a      	strb	r2, [r3, #2]
 80096ec:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_rh2 = 500000;
 80096ee:	002b      	movs	r3, r5
 80096f0:	321d      	adds	r2, #29
 80096f2:	33a3      	adds	r3, #163	@ 0xa3
 80096f4:	701a      	strb	r2, [r3, #0]
 80096f6:	3a7f      	subs	r2, #127	@ 0x7f
 80096f8:	705a      	strb	r2, [r3, #1]
 80096fa:	3266      	adds	r2, #102	@ 0x66
 80096fc:	709a      	strb	r2, [r3, #2]
 80096fe:	70dc      	strb	r4, [r3, #3]
    current_settings.alarm_th1 = -600; // device 10 is 'C
 8009700:	002b      	movs	r3, r5
 8009702:	3a5f      	subs	r2, #95	@ 0x5f
 8009704:	339f      	adds	r3, #159	@ 0x9f
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	3255      	adds	r2, #85	@ 0x55
 800970a:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_th2 =-500;
 800970c:	002b      	movs	r3, r5
 800970e:	320f      	adds	r2, #15
 8009710:	33a7      	adds	r3, #167	@ 0xa7
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	3a0e      	subs	r2, #14
 8009716:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_tl1 = -800;
 8009718:	002b      	movs	r3, r5
 800971a:	3a1e      	subs	r2, #30
 800971c:	33a1      	adds	r3, #161	@ 0xa1
 800971e:	701a      	strb	r2, [r3, #0]
 8009720:	321c      	adds	r2, #28
 8009722:	705a      	strb	r2, [r3, #1]
    current_settings.alarm_tl2 = -900;
 8009724:	002b      	movs	r3, r5
 8009726:	217c      	movs	r1, #124	@ 0x7c
 8009728:	33a9      	adds	r3, #169	@ 0xa9
 800972a:	7019      	strb	r1, [r3, #0]
 800972c:	705a      	strb	r2, [r3, #1]

    current_settings.alarm_delay_rh1 = 10;
 800972e:	002b      	movs	r3, r5
 8009730:	320e      	adds	r2, #14
 8009732:	3384      	adds	r3, #132	@ 0x84
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_rh2 = 20;
 8009738:	002b      	movs	r3, r5
 800973a:	320a      	adds	r2, #10
 800973c:	3386      	adds	r3, #134	@ 0x86
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_th1 = 30;
 8009742:	002b      	movs	r3, r5
 8009744:	395e      	subs	r1, #94	@ 0x5e
 8009746:	3388      	adds	r3, #136	@ 0x88
 8009748:	7019      	strb	r1, [r3, #0]
 800974a:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_th2 = 40;
 800974c:	002b      	movs	r3, r5
 800974e:	2228      	movs	r2, #40	@ 0x28
 8009750:	338a      	adds	r3, #138	@ 0x8a
 8009752:	701a      	strb	r2, [r3, #0]
 8009754:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_tl1 = 50;
 8009756:	002b      	movs	r3, r5
 8009758:	320a      	adds	r2, #10
 800975a:	338c      	adds	r3, #140	@ 0x8c
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	705c      	strb	r4, [r3, #1]
	current_settings.alarm_delay_tl2 = 60;
 8009760:	002b      	movs	r3, r5
 8009762:	203c      	movs	r0, #60	@ 0x3c
 8009764:	338e      	adds	r3, #142	@ 0x8e
 8009766:	7018      	strb	r0, [r3, #0]
 8009768:	705c      	strb	r4, [r3, #1]


	current_settings.report_format = 0x01;
 800976a:	002b      	movs	r3, r5
 800976c:	3383      	adds	r3, #131	@ 0x83
 800976e:	701f      	strb	r7, [r3, #0]
    current_settings.start_mode = 0x00;
 8009770:	002b      	movs	r3, r5
 8009772:	336d      	adds	r3, #109	@ 0x6d
 8009774:	701c      	strb	r4, [r3, #0]
    current_settings.start_time_info = 0x00;
 8009776:	002b      	movs	r3, r5
 8009778:	3376      	adds	r3, #118	@ 0x76
 800977a:	701c      	strb	r4, [r3, #0]
 800977c:	705c      	strb	r4, [r3, #1]
 800977e:	709c      	strb	r4, [r3, #2]
 8009780:	70dc      	strb	r4, [r3, #3]
    current_settings.start_reservation_time = 0;
 8009782:	002b      	movs	r3, r5
 8009784:	33af      	adds	r3, #175	@ 0xaf
 8009786:	701c      	strb	r4, [r3, #0]
 8009788:	705c      	strb	r4, [r3, #1]
 800978a:	709c      	strb	r4, [r3, #2]
 800978c:	70dc      	strb	r4, [r3, #3]
    current_settings.start_time_info_for_alarm = 0xFFFFFFFFUL;
 800978e:	2301      	movs	r3, #1
 8009790:	3572      	adds	r5, #114	@ 0x72
 8009792:	425b      	negs	r3, r3
 8009794:	702b      	strb	r3, [r5, #0]
 8009796:	706b      	strb	r3, [r5, #1]
 8009798:	70ab      	strb	r3, [r5, #2]
 800979a:	70eb      	strb	r3, [r5, #3]

//    printf("[Debug][Load] Loaded start_target_seconds: %lu\r\n", current_settings.start_target_seconds);
}
 800979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979e:	46c0      	nop			@ (mov r8, r8)
 80097a0:	20002bac 	.word	0x20002bac
 80097a4:	0803f800 	.word	0x0803f800
 80097a8:	0801e305 	.word	0x0801e305
 80097ac:	0801e30d 	.word	0x0801e30d
 80097b0:	20002bdd 	.word	0x20002bdd
 80097b4:	20002bbc 	.word	0x20002bbc
 80097b8:	0801e313 	.word	0x0801e313
 80097bc:	0801e31c 	.word	0x0801e31c
 80097c0:	20002bcc 	.word	0x20002bcc
 80097c4:	0801e324 	.word	0x0801e324
 80097c8:	20002be7 	.word	0x20002be7
 80097cc:	20000b50 	.word	0x20000b50

080097d0 <Save_CurrentSettings>:

void Save_CurrentSettings(void)
{
 80097d0:	b510      	push	{r4, lr}
//    printf(" Alarm TL1: %d, TL2: %d\n",
//           current_settings.alarm_tl1, current_settings.alarm_tl2);
//    printf("[Debug][Save] Delay start_target_seconds: %lu\r\n", current_settings.start_target_seconds);


    Save_DeviceSettings(&current_settings);
 80097d2:	4802      	ldr	r0, [pc, #8]	@ (80097dc <Save_CurrentSettings+0xc>)
 80097d4:	f7ff ff02 	bl	80095dc <Save_DeviceSettings>
//    printf("[Save] DeviceSettings saved to Flash.\n");

}
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	46c0      	nop			@ (mov r8, r8)
 80097dc:	20002bac 	.word	0x20002bac

080097e0 <Init_DeviceSettings>:




void Init_DeviceSettings(void) {
 80097e0:	b510      	push	{r4, lr}
    Load_CurrentSettings();
 80097e2:	f7ff ff2d 	bl	8009640 <Load_CurrentSettings>
//        current_settings.alarm_th1 = 400;
//        current_settings.alarm_th2 = 450;
//        current_settings.alarm_tl1 = 50;
//        current_settings.alarm_tl2 = 0;

        Save_CurrentSettings();
 80097e6:	f7ff fff3 	bl	80097d0 <Save_CurrentSettings>
//    }
}
 80097ea:	bd10      	pop	{r4, pc}

080097ec <AlarmDelay_InitStart_Flash>:
//
//    printf("[AlarmDelay] Start 기준초 저장: %02u:%02u:%02u (%lu)\r\n",
//           t.Hours, t.Minutes, t.Seconds, now_sec);
//}
void AlarmDelay_InitStart_Flash(void)
{
 80097ec:	b570      	push	{r4, r5, r6, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80097ee:	4e1c      	ldr	r6, [pc, #112]	@ (8009860 <AlarmDelay_InitStart_Flash+0x74>)
{
 80097f0:	b088      	sub	sp, #32
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80097f2:	ad03      	add	r5, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 80097f4:	ac02      	add	r4, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 80097f6:	0029      	movs	r1, r5
 80097f8:	2200      	movs	r2, #0
 80097fa:	0030      	movs	r0, r6
 80097fc:	f008 f96a 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009800:	0021      	movs	r1, r4
 8009802:	2200      	movs	r2, #0
 8009804:	0030      	movs	r0, r6
 8009806:	f008 f997 	bl	8011b38 <HAL_RTC_GetDate>

    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date,
 800980a:	78a2      	ldrb	r2, [r4, #2]
 800980c:	7861      	ldrb	r1, [r4, #1]
 800980e:	78e0      	ldrb	r0, [r4, #3]
 8009810:	78ac      	ldrb	r4, [r5, #2]
 8009812:	782b      	ldrb	r3, [r5, #0]
 8009814:	9401      	str	r4, [sp, #4]
 8009816:	786c      	ldrb	r4, [r5, #1]
 8009818:	9400      	str	r4, [sp, #0]
 800981a:	f7ff fea7 	bl	800956c <ymd_to_epoch>
 800981e:	0004      	movs	r4, r0
                                      t.Hours, t.Minutes, t.Seconds);

    Load_CurrentSettings();
 8009820:	f7ff ff0e 	bl	8009640 <Load_CurrentSettings>
    current_settings.start_time_info = now_epoch;
 8009824:	0026      	movs	r6, r4
 8009826:	20ff      	movs	r0, #255	@ 0xff
 8009828:	4b0e      	ldr	r3, [pc, #56]	@ (8009864 <AlarmDelay_InitStart_Flash+0x78>)
 800982a:	0a21      	lsrs	r1, r4, #8
 800982c:	0c22      	lsrs	r2, r4, #16
 800982e:	4001      	ands	r1, r0
 8009830:	4002      	ands	r2, r0
 8009832:	4006      	ands	r6, r0
 8009834:	0e20      	lsrs	r0, r4, #24
 8009836:	701e      	strb	r6, [r3, #0]
 8009838:	7059      	strb	r1, [r3, #1]
 800983a:	709a      	strb	r2, [r3, #2]
 800983c:	70d8      	strb	r0, [r3, #3]
    current_settings.start_time_info_for_alarm = now_epoch; // ★ 이제 절대초로 저장 (이전에는 SOD 저장)
 800983e:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <AlarmDelay_InitStart_Flash+0x7c>)
 8009840:	701e      	strb	r6, [r3, #0]
 8009842:	7059      	strb	r1, [r3, #1]
 8009844:	709a      	strb	r2, [r3, #2]
 8009846:	70d8      	strb	r0, [r3, #3]
    Save_CurrentSettings();
 8009848:	f7ff ffc2 	bl	80097d0 <Save_CurrentSettings>

    printf("[AlarmDelay] Gate start EPOCH=%lu (%02u:%02u:%02u)\r\n",
 800984c:	78a9      	ldrb	r1, [r5, #2]
 800984e:	786b      	ldrb	r3, [r5, #1]
 8009850:	782a      	ldrb	r2, [r5, #0]
 8009852:	4806      	ldr	r0, [pc, #24]	@ (800986c <AlarmDelay_InitStart_Flash+0x80>)
 8009854:	9100      	str	r1, [sp, #0]
 8009856:	0021      	movs	r1, r4
 8009858:	f010 fa2e 	bl	8019cb8 <iprintf>
           (unsigned long)now_epoch, t.Hours, t.Minutes, t.Seconds);
}
 800985c:	b008      	add	sp, #32
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	200009f8 	.word	0x200009f8
 8009864:	20002c22 	.word	0x20002c22
 8009868:	20002c1e 	.word	0x20002c1e
 800986c:	0801e34c 	.word	0x0801e34c

08009870 <Set_StartTargetTime_FromRTC>:
//    //        elapsed, *g_rh1,*g_rh2,*g_th1,*g_th2,*g_tl1,*g_tl2);
//}

// Delay 타깃을 '절대초'로 저장
void Set_StartTargetTime_FromRTC(void)
{
 8009870:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef t; RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009872:	4e39      	ldr	r6, [pc, #228]	@ (8009958 <Set_StartTargetTime_FromRTC+0xe8>)
{
 8009874:	b089      	sub	sp, #36	@ 0x24
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009876:	ac03      	add	r4, sp, #12
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009878:	ad02      	add	r5, sp, #8
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800987a:	0021      	movs	r1, r4
 800987c:	2200      	movs	r2, #0
 800987e:	0030      	movs	r0, r6
 8009880:	f008 f928 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009884:	0029      	movs	r1, r5
 8009886:	2200      	movs	r2, #0
 8009888:	0030      	movs	r0, r6
 800988a:	f008 f955 	bl	8011b38 <HAL_RTC_GetDate>

    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 800988e:	78aa      	ldrb	r2, [r5, #2]
 8009890:	7869      	ldrb	r1, [r5, #1]
 8009892:	78e8      	ldrb	r0, [r5, #3]
 8009894:	78a5      	ldrb	r5, [r4, #2]
 8009896:	7823      	ldrb	r3, [r4, #0]
 8009898:	9501      	str	r5, [sp, #4]
 800989a:	7864      	ldrb	r4, [r4, #1]
 800989c:	9400      	str	r4, [sp, #0]
 800989e:	f7ff fe65 	bl	800956c <ymd_to_epoch>

//    Load_CurrentSettings();
    // 최대 31일(요구사항), 더 길게 허용하려면 아래 clamp 제거
    uint32_t max_delay = 31u * 86400u;
    if (current_settings.start_delay > max_delay) current_settings.start_delay = max_delay;
 80098a2:	4b2e      	ldr	r3, [pc, #184]	@ (800995c <Set_StartTargetTime_FromRTC+0xec>)
 80098a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009960 <Set_StartTargetTime_FromRTC+0xf0>)
 80098a6:	0019      	movs	r1, r3
 80098a8:	316f      	adds	r1, #111	@ 0x6f
 80098aa:	7809      	ldrb	r1, [r1, #0]
 80098ac:	7814      	ldrb	r4, [r2, #0]
 80098ae:	0209      	lsls	r1, r1, #8
 80098b0:	4321      	orrs	r1, r4
 80098b2:	001c      	movs	r4, r3
 80098b4:	3470      	adds	r4, #112	@ 0x70
 80098b6:	7824      	ldrb	r4, [r4, #0]
 80098b8:	0424      	lsls	r4, r4, #16
 80098ba:	430c      	orrs	r4, r1
 80098bc:	0019      	movs	r1, r3
 80098be:	3171      	adds	r1, #113	@ 0x71
 80098c0:	7809      	ldrb	r1, [r1, #0]
 80098c2:	0609      	lsls	r1, r1, #24
 80098c4:	4321      	orrs	r1, r4
 80098c6:	4c27      	ldr	r4, [pc, #156]	@ (8009964 <Set_StartTargetTime_FromRTC+0xf4>)
 80098c8:	42a1      	cmp	r1, r4
 80098ca:	d908      	bls.n	80098de <Set_StartTargetTime_FromRTC+0x6e>
 80098cc:	2180      	movs	r1, #128	@ 0x80
 80098ce:	4249      	negs	r1, r1
 80098d0:	7011      	strb	r1, [r2, #0]
 80098d2:	315e      	adds	r1, #94	@ 0x5e
 80098d4:	7051      	strb	r1, [r2, #1]
 80098d6:	314a      	adds	r1, #74	@ 0x4a
 80098d8:	7091      	strb	r1, [r2, #2]
 80098da:	2100      	movs	r1, #0
 80098dc:	70d1      	strb	r1, [r2, #3]

    uint32_t target_epoch = now_epoch + current_settings.start_delay;
 80098de:	001e      	movs	r6, r3
 80098e0:	001f      	movs	r7, r3
 80098e2:	001d      	movs	r5, r3
 80098e4:	366f      	adds	r6, #111	@ 0x6f
 80098e6:	7831      	ldrb	r1, [r6, #0]
 80098e8:	376e      	adds	r7, #110	@ 0x6e
 80098ea:	783a      	ldrb	r2, [r7, #0]
 80098ec:	3570      	adds	r5, #112	@ 0x70
 80098ee:	0209      	lsls	r1, r1, #8
 80098f0:	4311      	orrs	r1, r2
 80098f2:	782a      	ldrb	r2, [r5, #0]
//    current_settings.start_time_info = target_epoch;         // ★ 절대초 저장
    current_settings.start_target_seconds = target_epoch;    // (과거 호환; 의미를 '절대초'로 통일)
 80098f4:	33ab      	adds	r3, #171	@ 0xab
    uint32_t target_epoch = now_epoch + current_settings.start_delay;
 80098f6:	0412      	lsls	r2, r2, #16
 80098f8:	430a      	orrs	r2, r1
 80098fa:	491b      	ldr	r1, [pc, #108]	@ (8009968 <Set_StartTargetTime_FromRTC+0xf8>)
 80098fc:	780c      	ldrb	r4, [r1, #0]
 80098fe:	0624      	lsls	r4, r4, #24
 8009900:	4314      	orrs	r4, r2
 8009902:	1824      	adds	r4, r4, r0
    current_settings.start_target_seconds = target_epoch;    // (과거 호환; 의미를 '절대초'로 통일)
 8009904:	0a22      	lsrs	r2, r4, #8
 8009906:	705a      	strb	r2, [r3, #1]
 8009908:	0c22      	lsrs	r2, r4, #16
 800990a:	709a      	strb	r2, [r3, #2]
 800990c:	0e22      	lsrs	r2, r4, #24
 800990e:	701c      	strb	r4, [r3, #0]
 8009910:	70da      	strb	r2, [r3, #3]
    Save_CurrentSettings();
 8009912:	f7ff ff5d 	bl	80097d0 <Save_CurrentSettings>

    // 알람은 정확히 Delay 만큼 뒤로
    RTC_SetAlarmA_SecondsFromNow(current_settings.start_delay -3);
 8009916:	7832      	ldrb	r2, [r6, #0]
 8009918:	783b      	ldrb	r3, [r7, #0]
 800991a:	0212      	lsls	r2, r2, #8
 800991c:	431a      	orrs	r2, r3
 800991e:	782b      	ldrb	r3, [r5, #0]
 8009920:	041b      	lsls	r3, r3, #16
 8009922:	4313      	orrs	r3, r2
 8009924:	4a10      	ldr	r2, [pc, #64]	@ (8009968 <Set_StartTargetTime_FromRTC+0xf8>)
 8009926:	7810      	ldrb	r0, [r2, #0]
 8009928:	0600      	lsls	r0, r0, #24
 800992a:	4318      	orrs	r0, r3
 800992c:	3803      	subs	r0, #3
 800992e:	f7fb fee1 	bl	80056f4 <RTC_SetAlarmA_SecondsFromNow>
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009932:	7832      	ldrb	r2, [r6, #0]
 8009934:	783b      	ldrb	r3, [r7, #0]
 8009936:	0212      	lsls	r2, r2, #8
 8009938:	431a      	orrs	r2, r3
 800993a:	782b      	ldrb	r3, [r5, #0]
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 800993c:	0021      	movs	r1, r4
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 800993e:	041b      	lsls	r3, r3, #16
 8009940:	4313      	orrs	r3, r2
 8009942:	4a09      	ldr	r2, [pc, #36]	@ (8009968 <Set_StartTargetTime_FromRTC+0xf8>)
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 8009944:	4809      	ldr	r0, [pc, #36]	@ (800996c <Set_StartTargetTime_FromRTC+0xfc>)
           (unsigned long)target_epoch, (unsigned)current_settings.start_delay-3);
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	0612      	lsls	r2, r2, #24
 800994a:	431a      	orrs	r2, r3
    printf("[Delay] target_epoch=%lu, after=%us -> AlarmA set.\r\n",
 800994c:	3a03      	subs	r2, #3
 800994e:	f010 f9b3 	bl	8019cb8 <iprintf>
}
 8009952:	b009      	add	sp, #36	@ 0x24
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	46c0      	nop			@ (mov r8, r8)
 8009958:	200009f8 	.word	0x200009f8
 800995c:	20002bac 	.word	0x20002bac
 8009960:	20002c1a 	.word	0x20002c1a
 8009964:	0028de80 	.word	0x0028de80
 8009968:	20002c1d 	.word	0x20002c1d
 800996c:	0801e381 	.word	0x0801e381

08009970 <Get_And_Print_Seconds_Left_ToStart>:

// 남은 시간 계산을 '절대초' 기준으로

void Get_And_Print_Seconds_Left_ToStart(void)
{
 8009970:	b5f0      	push	{r4, r5, r6, r7, lr}
    // 1) 현재 epoch
    RTC_TimeTypeDef t;
    RTC_DateTypeDef d;
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009972:	4b40      	ldr	r3, [pc, #256]	@ (8009a74 <Get_And_Print_Seconds_Left_ToStart+0x104>)
{
 8009974:	b08b      	sub	sp, #44	@ 0x2c
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8009976:	ac05      	add	r4, sp, #20
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009978:	ad04      	add	r5, sp, #16
    HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 800997a:	0021      	movs	r1, r4
 800997c:	0018      	movs	r0, r3
 800997e:	2200      	movs	r2, #0
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	f008 f8a7 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8009986:	0029      	movs	r1, r5
 8009988:	2200      	movs	r2, #0
 800998a:	9802      	ldr	r0, [sp, #8]
 800998c:	f008 f8d4 	bl	8011b38 <HAL_RTC_GetDate>
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 8009990:	78aa      	ldrb	r2, [r5, #2]
 8009992:	7869      	ldrb	r1, [r5, #1]
 8009994:	78e8      	ldrb	r0, [r5, #3]
 8009996:	78a5      	ldrb	r5, [r4, #2]
 8009998:	7823      	ldrb	r3, [r4, #0]
 800999a:	9501      	str	r5, [sp, #4]
 800999c:	7864      	ldrb	r4, [r4, #1]
 800999e:	9400      	str	r4, [sp, #0]
 80099a0:	f7ff fde4 	bl	800956c <ymd_to_epoch>

    // 2) 타깃 epoch 우선 사용
    uint32_t target_epoch = current_settings.start_target_seconds;
 80099a4:	4b34      	ldr	r3, [pc, #208]	@ (8009a78 <Get_And_Print_Seconds_Left_ToStart+0x108>)
    uint32_t now_epoch = ymd_to_epoch(d.Year, d.Month, d.Date, t.Hours, t.Minutes, t.Seconds);
 80099a6:	9003      	str	r0, [sp, #12]
    uint32_t target_epoch = current_settings.start_target_seconds;
 80099a8:	0019      	movs	r1, r3
 80099aa:	4d34      	ldr	r5, [pc, #208]	@ (8009a7c <Get_And_Print_Seconds_Left_ToStart+0x10c>)
 80099ac:	31ac      	adds	r1, #172	@ 0xac
 80099ae:	7809      	ldrb	r1, [r1, #0]
 80099b0:	782a      	ldrb	r2, [r5, #0]
 80099b2:	0209      	lsls	r1, r1, #8
 80099b4:	4311      	orrs	r1, r2
 80099b6:	001a      	movs	r2, r3
 80099b8:	32ad      	adds	r2, #173	@ 0xad
 80099ba:	7812      	ldrb	r2, [r2, #0]
 80099bc:	33ae      	adds	r3, #174	@ 0xae
 80099be:	781c      	ldrb	r4, [r3, #0]
 80099c0:	0412      	lsls	r2, r2, #16
 80099c2:	430a      	orrs	r2, r1
 80099c4:	0624      	lsls	r4, r4, #24
 80099c6:	4314      	orrs	r4, r2
 80099c8:	1e27      	subs	r7, r4, #0

    // 3) target_epoch가 비어 있으면 BKP에서만 "조심스럽게" 복구
    //    - BKP == 0xFFFFFFFF : 미설정 → 복구 금지
    //    - BKP < 86400       : 당일초(legacy)라 날짜를 알 수 없음 → 복구 금지
    //    - BKP >= 86400      : epoch 후보로 간주하여 복구 (플래시에 동기화)
    if (target_epoch == 0) {
 80099ca:	4e2d      	ldr	r6, [pc, #180]	@ (8009a80 <Get_And_Print_Seconds_Left_ToStart+0x110>)
 80099cc:	d116      	bne.n	80099fc <Get_And_Print_Seconds_Left_ToStart+0x8c>
        uint32_t bkp = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 80099ce:	2107      	movs	r1, #7
 80099d0:	9802      	ldr	r0, [sp, #8]
 80099d2:	f008 f945 	bl	8011c60 <HAL_RTCEx_BKUPRead>
        if (bkp != 0xFFFFFFFFu && bkp >= 86400u) {
 80099d6:	4b2b      	ldr	r3, [pc, #172]	@ (8009a84 <Get_And_Print_Seconds_Left_ToStart+0x114>)
        uint32_t bkp = HAL_RTCEx_BKUPRead(&hrtc, BKP_WAKEUP_TIME);
 80099d8:	0004      	movs	r4, r0
        if (bkp != 0xFFFFFFFFu && bkp >= 86400u) {
 80099da:	18c2      	adds	r2, r0, r3
 80099dc:	4b2a      	ldr	r3, [pc, #168]	@ (8009a88 <Get_And_Print_Seconds_Left_ToStart+0x118>)
 80099de:	429a      	cmp	r2, r3
 80099e0:	d811      	bhi.n	8009a06 <Get_And_Print_Seconds_Left_ToStart+0x96>
            target_epoch = bkp;
            current_settings.start_target_seconds = target_epoch;
 80099e2:	0a03      	lsrs	r3, r0, #8
 80099e4:	706b      	strb	r3, [r5, #1]
 80099e6:	0c03      	lsrs	r3, r0, #16
 80099e8:	70ab      	strb	r3, [r5, #2]
 80099ea:	0e03      	lsrs	r3, r0, #24
 80099ec:	7028      	strb	r0, [r5, #0]
 80099ee:	70eb      	strb	r3, [r5, #3]
            Save_CurrentSettings();
 80099f0:	f7ff feee 	bl	80097d0 <Save_CurrentSettings>
            printf("[Delay] recovered target from BKP: %lu\r\n", (unsigned long)target_epoch);
 80099f4:	0021      	movs	r1, r4
 80099f6:	4825      	ldr	r0, [pc, #148]	@ (8009a8c <Get_And_Print_Seconds_Left_ToStart+0x11c>)
 80099f8:	f010 f95e 	bl	8019cb8 <iprintf>
            printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
        }
    }

    // 4) 남은 시간 계산
    if (target_epoch <= now_epoch) start_remaining = 0;
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	429c      	cmp	r4, r3
 8009a00:	d916      	bls.n	8009a30 <Get_And_Print_Seconds_Left_ToStart+0xc0>
    else                           start_remaining = target_epoch - now_epoch;
 8009a02:	1ae1      	subs	r1, r4, r3
 8009a04:	e015      	b.n	8009a32 <Get_And_Print_Seconds_Left_ToStart+0xc2>
            start_remaining = 0;
 8009a06:	6037      	str	r7, [r6, #0]
            AlarmDelay_InitStart_Flash();
 8009a08:	f7ff fef0 	bl	80097ec <AlarmDelay_InitStart_Flash>
            Switch_Backup_reg(MODE_Start);
 8009a0c:	2003      	movs	r0, #3
 8009a0e:	f7fc fa03 	bl	8005e18 <Switch_Backup_reg>
            Interval_LCD_Count = 1;
 8009a12:	2201      	movs	r2, #1
            First_Measure = 0;
 8009a14:	4b1e      	ldr	r3, [pc, #120]	@ (8009a90 <Get_And_Print_Seconds_Left_ToStart+0x120>)
            printf("[Delay] no valid target (epoch empty, BKP invalid). Skip auto-correction.\r\n");
 8009a16:	481f      	ldr	r0, [pc, #124]	@ (8009a94 <Get_And_Print_Seconds_Left_ToStart+0x124>)
            First_Measure = 0;
 8009a18:	701f      	strb	r7, [r3, #0]
            Tick_Save = 0;
 8009a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009a98 <Get_And_Print_Seconds_Left_ToStart+0x128>)
 8009a1c:	601f      	str	r7, [r3, #0]
            Interval_LCD_Count = 1;
 8009a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8009a9c <Get_And_Print_Seconds_Left_ToStart+0x12c>)
 8009a20:	601a      	str	r2, [r3, #0]
            RTC_During_Wakeup = 0;
 8009a22:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa0 <Get_And_Print_Seconds_Left_ToStart+0x130>)
 8009a24:	701f      	strb	r7, [r3, #0]
            printf("[Delay] no valid target (epoch empty, BKP invalid). Skip auto-correction.\r\n");
 8009a26:	f010 f9b7 	bl	8019d98 <puts>
            printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 8009a2a:	481e      	ldr	r0, [pc, #120]	@ (8009aa4 <Get_And_Print_Seconds_Left_ToStart+0x134>)
 8009a2c:	f010 f9b4 	bl	8019d98 <puts>
    if (target_epoch <= now_epoch) start_remaining = 0;
 8009a30:	2100      	movs	r1, #0

    printf("Start 예정까지 남은 시간: %lu초\r\n", (unsigned long)start_remaining);
 8009a32:	481d      	ldr	r0, [pc, #116]	@ (8009aa8 <Get_And_Print_Seconds_Left_ToStart+0x138>)
 8009a34:	6031      	str	r1, [r6, #0]
 8009a36:	f010 f93f 	bl	8019cb8 <iprintf>

    // 5) 딜레이 종료 → 시작 전환 (AlarmA는 이미 Set_Wakeup...에서 설정됨)
    if (start_remaining == 0) {
 8009a3a:	6834      	ldr	r4, [r6, #0]
 8009a3c:	2c00      	cmp	r4, #0
 8009a3e:	d112      	bne.n	8009a66 <Get_And_Print_Seconds_Left_ToStart+0xf6>
        AlarmDelay_InitStart_Flash();
 8009a40:	f7ff fed4 	bl	80097ec <AlarmDelay_InitStart_Flash>
        Switch_Backup_reg(MODE_Start);
 8009a44:	2003      	movs	r0, #3
 8009a46:	f7fc f9e7 	bl	8005e18 <Switch_Backup_reg>
        First_Measure = 0;
        Tick_Save = 0;
        Interval_LCD_Count = 1;
 8009a4a:	2201      	movs	r2, #1
        First_Measure = 0;
 8009a4c:	4b10      	ldr	r3, [pc, #64]	@ (8009a90 <Get_And_Print_Seconds_Left_ToStart+0x120>)
        RTC_During_Wakeup = 0;
        printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 8009a4e:	4815      	ldr	r0, [pc, #84]	@ (8009aa4 <Get_And_Print_Seconds_Left_ToStart+0x134>)
        First_Measure = 0;
 8009a50:	701c      	strb	r4, [r3, #0]
        Tick_Save = 0;
 8009a52:	4b11      	ldr	r3, [pc, #68]	@ (8009a98 <Get_And_Print_Seconds_Left_ToStart+0x128>)
 8009a54:	601c      	str	r4, [r3, #0]
        Interval_LCD_Count = 1;
 8009a56:	4b11      	ldr	r3, [pc, #68]	@ (8009a9c <Get_And_Print_Seconds_Left_ToStart+0x12c>)
 8009a58:	601a      	str	r2, [r3, #0]
        RTC_During_Wakeup = 0;
 8009a5a:	4b11      	ldr	r3, [pc, #68]	@ (8009aa0 <Get_And_Print_Seconds_Left_ToStart+0x130>)
 8009a5c:	701c      	strb	r4, [r3, #0]
        printf("[Delay->Start] 측정 시작 전환 완료.\r\n");
 8009a5e:	f010 f99b 	bl	8019d98 <puts>
    } else if (start_remaining <= 7) {
        Tick_Save = 0;
    }
}
 8009a62:	b00b      	add	sp, #44	@ 0x2c
 8009a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (start_remaining <= 7) {
 8009a66:	2c07      	cmp	r4, #7
 8009a68:	d8fb      	bhi.n	8009a62 <Get_And_Print_Seconds_Left_ToStart+0xf2>
        Tick_Save = 0;
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <Get_And_Print_Seconds_Left_ToStart+0x128>)
 8009a6e:	601a      	str	r2, [r3, #0]
}
 8009a70:	e7f7      	b.n	8009a62 <Get_And_Print_Seconds_Left_ToStart+0xf2>
 8009a72:	46c0      	nop			@ (mov r8, r8)
 8009a74:	200009f8 	.word	0x200009f8
 8009a78:	20002bac 	.word	0x20002bac
 8009a7c:	20002c57 	.word	0x20002c57
 8009a80:	200004f8 	.word	0x200004f8
 8009a84:	fffeae80 	.word	0xfffeae80
 8009a88:	fffeae7e 	.word	0xfffeae7e
 8009a8c:	0801e3b6 	.word	0x0801e3b6
 8009a90:	20000534 	.word	0x20000534
 8009a94:	0801e3df 	.word	0x0801e3df
 8009a98:	20000540 	.word	0x20000540
 8009a9c:	2000053c 	.word	0x2000053c
 8009aa0:	200004fc 	.word	0x200004fc
 8009aa4:	0801e42a 	.word	0x0801e42a
 8009aa8:	0801e457 	.word	0x0801e457

08009aac <Set_ModeStatus>:


void Set_ModeStatus(uint8_t mode_status)
{
 8009aac:	b510      	push	{r4, lr}
    current_settings.mode_status = mode_status;
 8009aae:	4b04      	ldr	r3, [pc, #16]	@ (8009ac0 <Set_ModeStatus+0x14>)
{
 8009ab0:	0001      	movs	r1, r0
    current_settings.mode_status = mode_status;
 8009ab2:	7018      	strb	r0, [r3, #0]
    printf("[MODE] Set mode_status = %u\r\n", mode_status);
 8009ab4:	4803      	ldr	r0, [pc, #12]	@ (8009ac4 <Set_ModeStatus+0x18>)
 8009ab6:	f010 f8ff 	bl	8019cb8 <iprintf>
    Save_CurrentSettings();                 // 플래시에 저장
 8009aba:	f7ff fe89 	bl	80097d0 <Save_CurrentSettings>
}
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	20002c42 	.word	0x20002c42
 8009ac4:	0801e482 	.word	0x0801e482

08009ac8 <SPI_FLASH_ReadStatus>:
static volatile uint8_t spi_dma_done = 0;
/**
  * @brief  Reads the flash status register. Uses blocking SPI for speed.
  */
 HAL_StatusTypeDef SPI_FLASH_ReadStatus(uint8_t *status)
{
 8009ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_StatusTypeDef ret;
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 8009aca:	466b      	mov	r3, sp
    FLASH_CS_LOW();
 8009acc:	26a0      	movs	r6, #160	@ 0xa0
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 8009ace:	1ddc      	adds	r4, r3, #7
 8009ad0:	2305      	movs	r3, #5
    FLASH_CS_LOW();
 8009ad2:	05f6      	lsls	r6, r6, #23
{
 8009ad4:	0005      	movs	r5, r0
    FLASH_CS_LOW();
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	0030      	movs	r0, r6
 8009ada:	2110      	movs	r1, #16
    uint8_t cmd = MX25V16066M2I02_READ_STATUS_CMD;
 8009adc:	7023      	strb	r3, [r4, #0]
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8009ade:	2701      	movs	r7, #1
    FLASH_CS_LOW();
 8009ae0:	f005 fc12 	bl	800f308 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8009ae4:	480a      	ldr	r0, [pc, #40]	@ (8009b10 <SPI_FLASH_ReadStatus+0x48>)
 8009ae6:	0021      	movs	r1, r4
 8009ae8:	0004      	movs	r4, r0
 8009aea:	427f      	negs	r7, r7
 8009aec:	003b      	movs	r3, r7
 8009aee:	2201      	movs	r2, #1
 8009af0:	f008 fa57 	bl	8011fa2 <HAL_SPI_Transmit>
    ret = HAL_SPI_Receive(&hspi3, status, 1, HAL_MAX_DELAY);
 8009af4:	003b      	movs	r3, r7
 8009af6:	0029      	movs	r1, r5
 8009af8:	2201      	movs	r2, #1
 8009afa:	0020      	movs	r0, r4
 8009afc:	f008 fc1e 	bl	801233c <HAL_SPI_Receive>
 8009b00:	0004      	movs	r4, r0
    FLASH_CS_HIGH();
 8009b02:	2201      	movs	r2, #1
 8009b04:	0030      	movs	r0, r6
 8009b06:	2110      	movs	r1, #16
 8009b08:	f005 fbfe 	bl	800f308 <HAL_GPIO_WritePin>
    return ret;
}
 8009b0c:	0020      	movs	r0, r4
 8009b0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b10:	20000994 	.word	0x20000994

08009b14 <SPI_FLASH_WaitForWriteCompletion>:

/**
  * @brief  Waits for the current write or erase operation to complete.
  */
static HAL_StatusTypeDef SPI_FLASH_WaitForWriteCompletion(void)
{
 8009b14:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	466a      	mov	r2, sp
 8009b1a:	2401      	movs	r4, #1
 8009b1c:	71d3      	strb	r3, [r2, #7]
    HAL_StatusTypeDef ret;
    do
    {
        // This function is now much faster as SPI_FLASH_ReadStatus is blocking
        ret = SPI_FLASH_ReadStatus(&status);
 8009b1e:	466b      	mov	r3, sp
 8009b20:	1dd8      	adds	r0, r3, #7
 8009b22:	f7ff ffd1 	bl	8009ac8 <SPI_FLASH_ReadStatus>
        if (ret != HAL_OK) {
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d105      	bne.n	8009b36 <SPI_FLASH_WaitForWriteCompletion+0x22>
            return ret;
        }
        // Could add a small delay here in an RTOS environment
    } while ((status & 0x01) == 0x01); // Wait for WIP (Write-In-Progress) bit to clear
 8009b2a:	466b      	mov	r3, sp
 8009b2c:	79db      	ldrb	r3, [r3, #7]
 8009b2e:	0018      	movs	r0, r3
 8009b30:	4020      	ands	r0, r4
 8009b32:	4223      	tst	r3, r4
 8009b34:	d1f3      	bne.n	8009b1e <SPI_FLASH_WaitForWriteCompletion+0xa>

    return HAL_OK;
}
 8009b36:	bd16      	pop	{r1, r2, r4, pc}

08009b38 <SPI_FLASH_Init>:

void SPI_FLASH_Init(void)
{
    FLASH_CS_HIGH();
 8009b38:	20a0      	movs	r0, #160	@ 0xa0
{
 8009b3a:	b510      	push	{r4, lr}
    FLASH_CS_HIGH();
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	2110      	movs	r1, #16
 8009b40:	05c0      	lsls	r0, r0, #23
 8009b42:	f005 fbe1 	bl	800f308 <HAL_GPIO_WritePin>
}
 8009b46:	bd10      	pop	{r4, pc}

08009b48 <SPI_FLASH_WriteEnable>:

/**
  * @brief  Sends the Write Enable (WREN) command. Uses blocking SPI for speed.
  */
void SPI_FLASH_WriteEnable(void)
{
 8009b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 8009b4a:	466b      	mov	r3, sp
    FLASH_CS_LOW();
 8009b4c:	24a0      	movs	r4, #160	@ 0xa0
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 8009b4e:	1ddd      	adds	r5, r3, #7
 8009b50:	2306      	movs	r3, #6
    FLASH_CS_LOW();
 8009b52:	05e4      	lsls	r4, r4, #23
 8009b54:	0020      	movs	r0, r4
 8009b56:	2200      	movs	r2, #0
 8009b58:	2110      	movs	r1, #16
    uint8_t cmd = MX25V16066M2I02_WRITE_ENABLE_CMD;
 8009b5a:	702b      	strb	r3, [r5, #0]
    FLASH_CS_LOW();
 8009b5c:	f005 fbd4 	bl	800f308 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8009b60:	2301      	movs	r3, #1
 8009b62:	0029      	movs	r1, r5
 8009b64:	425b      	negs	r3, r3
 8009b66:	2201      	movs	r2, #1
 8009b68:	4804      	ldr	r0, [pc, #16]	@ (8009b7c <SPI_FLASH_WriteEnable+0x34>)
 8009b6a:	f008 fa1a 	bl	8011fa2 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8009b6e:	2201      	movs	r2, #1
 8009b70:	2110      	movs	r1, #16
 8009b72:	0020      	movs	r0, r4
 8009b74:	f005 fbc8 	bl	800f308 <HAL_GPIO_WritePin>
}
 8009b78:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8009b7a:	46c0      	nop			@ (mov r8, r8)
 8009b7c:	20000994 	.word	0x20000994

08009b80 <SPI_FLASH_EraseSector>:

/**
  * @brief  Erases a 4KB sector.
  */
HAL_StatusTypeDef SPI_FLASH_EraseSector(uint32_t addr)
{
 8009b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009b82:	2320      	movs	r3, #32
    SPI_FLASH_WriteEnable();
    FLASH_CS_LOW();
 8009b84:	25a0      	movs	r5, #160	@ 0xa0
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009b86:	ac01      	add	r4, sp, #4
    FLASH_CS_LOW();
 8009b88:	05ed      	lsls	r5, r5, #23
    uint8_t cmd[4] = { MX25V16066M2I02_SECTOR_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009b8a:	7023      	strb	r3, [r4, #0]
 8009b8c:	0c03      	lsrs	r3, r0, #16
 8009b8e:	ba40      	rev16	r0, r0
 8009b90:	7063      	strb	r3, [r4, #1]
 8009b92:	8060      	strh	r0, [r4, #2]
    SPI_FLASH_WriteEnable();
 8009b94:	f7ff ffd8 	bl	8009b48 <SPI_FLASH_WriteEnable>
    FLASH_CS_LOW();
 8009b98:	0028      	movs	r0, r5
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2110      	movs	r1, #16
 8009b9e:	f005 fbb3 	bl	800f308 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY); // Use blocking for small command
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	0021      	movs	r1, r4
 8009ba6:	425b      	negs	r3, r3
 8009ba8:	2204      	movs	r2, #4
 8009baa:	4805      	ldr	r0, [pc, #20]	@ (8009bc0 <SPI_FLASH_EraseSector+0x40>)
 8009bac:	f008 f9f9 	bl	8011fa2 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8009bb0:	0028      	movs	r0, r5
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	2110      	movs	r1, #16
 8009bb6:	f005 fba7 	bl	800f308 <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 8009bba:	f7ff ffab 	bl	8009b14 <SPI_FLASH_WaitForWriteCompletion>
}
 8009bbe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8009bc0:	20000994 	.word	0x20000994

08009bc4 <SPI_FLASH_EraseBlock64k>:

/**
  * @brief  Erases a 64KB block.
  */
HAL_StatusTypeDef SPI_FLASH_EraseBlock64k(uint32_t addr)
{
 8009bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009bc6:	23d8      	movs	r3, #216	@ 0xd8
    SPI_FLASH_WriteEnable();
    FLASH_CS_LOW();
 8009bc8:	25a0      	movs	r5, #160	@ 0xa0
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009bca:	ac01      	add	r4, sp, #4
    FLASH_CS_LOW();
 8009bcc:	05ed      	lsls	r5, r5, #23
    uint8_t cmd[4] = { MX25V16066M2I02_BLOCK_64K_ERASE_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009bce:	7023      	strb	r3, [r4, #0]
 8009bd0:	0c03      	lsrs	r3, r0, #16
 8009bd2:	ba40      	rev16	r0, r0
 8009bd4:	7063      	strb	r3, [r4, #1]
 8009bd6:	8060      	strh	r0, [r4, #2]
    SPI_FLASH_WriteEnable();
 8009bd8:	f7ff ffb6 	bl	8009b48 <SPI_FLASH_WriteEnable>
    FLASH_CS_LOW();
 8009bdc:	0028      	movs	r0, r5
 8009bde:	2200      	movs	r2, #0
 8009be0:	2110      	movs	r1, #16
 8009be2:	f005 fb91 	bl	800f308 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY); // Use blocking for small command
 8009be6:	2301      	movs	r3, #1
 8009be8:	0021      	movs	r1, r4
 8009bea:	425b      	negs	r3, r3
 8009bec:	2204      	movs	r2, #4
 8009bee:	4805      	ldr	r0, [pc, #20]	@ (8009c04 <SPI_FLASH_EraseBlock64k+0x40>)
 8009bf0:	f008 f9d7 	bl	8011fa2 <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 8009bf4:	0028      	movs	r0, r5
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	2110      	movs	r1, #16
 8009bfa:	f005 fb85 	bl	800f308 <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 8009bfe:	f7ff ff89 	bl	8009b14 <SPI_FLASH_WaitForWriteCompletion>
}
 8009c02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8009c04:	20000994 	.word	0x20000994

08009c08 <SPI_FLASH_PageProgram>:
  * Uses blocking SPI for the command and DMA for the data payload.
  */
HAL_StatusTypeDef SPI_FLASH_PageProgram(uint32_t addr, uint8_t *buf, uint32_t len)
{
    HAL_StatusTypeDef ret;
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009c08:	2302      	movs	r3, #2
{
 8009c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009c0c:	ad01      	add	r5, sp, #4
 8009c0e:	702b      	strb	r3, [r5, #0]
 8009c10:	0c03      	lsrs	r3, r0, #16
 8009c12:	ba40      	rev16	r0, r0
 8009c14:	706b      	strb	r3, [r5, #1]
{
 8009c16:	000e      	movs	r6, r1
 8009c18:	0014      	movs	r4, r2
    uint8_t cmd[4] = { MX25V16066M2I02_PAGE_PROGRAM_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009c1a:	8068      	strh	r0, [r5, #2]

    SPI_FLASH_WriteEnable();
 8009c1c:	f7ff ff94 	bl	8009b48 <SPI_FLASH_WriteEnable>

    FLASH_CS_LOW();
 8009c20:	20a0      	movs	r0, #160	@ 0xa0
 8009c22:	2200      	movs	r2, #0
 8009c24:	2110      	movs	r1, #16
 8009c26:	05c0      	lsls	r0, r0, #23
 8009c28:	f005 fb6e 	bl	800f308 <HAL_GPIO_WritePin>

    // 1. Transmit command using blocking SPI (it's small and fast)
    if (HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY) != HAL_OK)
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4f17      	ldr	r7, [pc, #92]	@ (8009c8c <SPI_FLASH_PageProgram+0x84>)
 8009c30:	2204      	movs	r2, #4
 8009c32:	0029      	movs	r1, r5
 8009c34:	0038      	movs	r0, r7
 8009c36:	425b      	negs	r3, r3
 8009c38:	f008 f9b3 	bl	8011fa2 <HAL_SPI_Transmit>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d008      	beq.n	8009c52 <SPI_FLASH_PageProgram+0x4a>
    {
        FLASH_CS_HIGH();
 8009c40:	20a0      	movs	r0, #160	@ 0xa0
 8009c42:	2201      	movs	r2, #1
 8009c44:	2110      	movs	r1, #16
 8009c46:	05c0      	lsls	r0, r0, #23
 8009c48:	f005 fb5e 	bl	800f308 <HAL_GPIO_WritePin>
        return HAL_ERROR;
 8009c4c:	2401      	movs	r4, #1

    FLASH_CS_HIGH();

    // 4. Wait for the flash chip's internal write process to complete
    return SPI_FLASH_WaitForWriteCompletion();
}
 8009c4e:	0020      	movs	r0, r4
 8009c50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    spi_dma_done = 0;
 8009c52:	4d0f      	ldr	r5, [pc, #60]	@ (8009c90 <SPI_FLASH_PageProgram+0x88>)
    ret = HAL_SPI_Transmit_DMA(&hspi3, buf, len);
 8009c54:	b2a2      	uxth	r2, r4
    spi_dma_done = 0;
 8009c56:	7028      	strb	r0, [r5, #0]
    ret = HAL_SPI_Transmit_DMA(&hspi3, buf, len);
 8009c58:	0031      	movs	r1, r6
 8009c5a:	0038      	movs	r0, r7
 8009c5c:	f008 fc2e 	bl	80124bc <HAL_SPI_Transmit_DMA>
 8009c60:	1e04      	subs	r4, r0, #0
    if (ret != HAL_OK)
 8009c62:	d006      	beq.n	8009c72 <SPI_FLASH_PageProgram+0x6a>
        FLASH_CS_HIGH();
 8009c64:	20a0      	movs	r0, #160	@ 0xa0
 8009c66:	2201      	movs	r2, #1
 8009c68:	2110      	movs	r1, #16
 8009c6a:	05c0      	lsls	r0, r0, #23
 8009c6c:	f005 fb4c 	bl	800f308 <HAL_GPIO_WritePin>
        return ret;
 8009c70:	e7ed      	b.n	8009c4e <SPI_FLASH_PageProgram+0x46>
    while (spi_dma_done == 0) {}
 8009c72:	782b      	ldrb	r3, [r5, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0fc      	beq.n	8009c72 <SPI_FLASH_PageProgram+0x6a>
    FLASH_CS_HIGH();
 8009c78:	20a0      	movs	r0, #160	@ 0xa0
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	2110      	movs	r1, #16
 8009c7e:	05c0      	lsls	r0, r0, #23
 8009c80:	f005 fb42 	bl	800f308 <HAL_GPIO_WritePin>
    return SPI_FLASH_WaitForWriteCompletion();
 8009c84:	f7ff ff46 	bl	8009b14 <SPI_FLASH_WaitForWriteCompletion>
 8009c88:	0004      	movs	r4, r0
 8009c8a:	e7e0      	b.n	8009c4e <SPI_FLASH_PageProgram+0x46>
 8009c8c:	20000994 	.word	0x20000994
 8009c90:	20002c7f 	.word	0x20002c7f

08009c94 <SPI_FLASH_ReadData>:
  * Uses blocking SPI for the command and DMA for the data payload.
  */
HAL_StatusTypeDef SPI_FLASH_ReadData(uint32_t addr, uint8_t *buf, uint32_t len)
{
    HAL_StatusTypeDef ret;
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009c94:	2303      	movs	r3, #3
{
 8009c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009c98:	ad01      	add	r5, sp, #4
 8009c9a:	702b      	strb	r3, [r5, #0]
 8009c9c:	0c03      	lsrs	r3, r0, #16
 8009c9e:	ba40      	rev16	r0, r0
 8009ca0:	8068      	strh	r0, [r5, #2]

    FLASH_CS_LOW();
 8009ca2:	20a0      	movs	r0, #160	@ 0xa0
{
 8009ca4:	000e      	movs	r6, r1
    FLASH_CS_LOW();
 8009ca6:	05c0      	lsls	r0, r0, #23
 8009ca8:	2110      	movs	r1, #16
{
 8009caa:	0014      	movs	r4, r2
    FLASH_CS_LOW();
 8009cac:	2200      	movs	r2, #0
    uint8_t cmd[4] = { MX25V16066M2I02_READ_DATA_CMD, (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)addr };
 8009cae:	706b      	strb	r3, [r5, #1]
    FLASH_CS_LOW();
 8009cb0:	f005 fb2a 	bl	800f308 <HAL_GPIO_WritePin>

    // 1. Transmit command using blocking SPI
    if (HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY) != HAL_OK)
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4f13      	ldr	r7, [pc, #76]	@ (8009d04 <SPI_FLASH_ReadData+0x70>)
 8009cb8:	2204      	movs	r2, #4
 8009cba:	0029      	movs	r1, r5
 8009cbc:	0038      	movs	r0, r7
 8009cbe:	425b      	negs	r3, r3
 8009cc0:	f008 f96f 	bl	8011fa2 <HAL_SPI_Transmit>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d008      	beq.n	8009cda <SPI_FLASH_ReadData+0x46>
    {
        FLASH_CS_HIGH();
 8009cc8:	20a0      	movs	r0, #160	@ 0xa0
 8009cca:	2201      	movs	r2, #1
 8009ccc:	2110      	movs	r1, #16
 8009cce:	05c0      	lsls	r0, r0, #23
 8009cd0:	f005 fb1a 	bl	800f308 <HAL_GPIO_WritePin>
        return HAL_ERROR;
 8009cd4:	2401      	movs	r4, #1
    while (spi_dma_done == 0) {}

    FLASH_CS_HIGH();

    return ret;
}
 8009cd6:	0020      	movs	r0, r4
 8009cd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    spi_dma_done = 0;
 8009cda:	4d0b      	ldr	r5, [pc, #44]	@ (8009d08 <SPI_FLASH_ReadData+0x74>)
    ret = HAL_SPI_Receive_DMA(&hspi3, buf, len);
 8009cdc:	b2a2      	uxth	r2, r4
    spi_dma_done = 0;
 8009cde:	7028      	strb	r0, [r5, #0]
    ret = HAL_SPI_Receive_DMA(&hspi3, buf, len);
 8009ce0:	0031      	movs	r1, r6
 8009ce2:	0038      	movs	r0, r7
 8009ce4:	f008 fd48 	bl	8012778 <HAL_SPI_Receive_DMA>
 8009ce8:	1e04      	subs	r4, r0, #0
     if (ret != HAL_OK)
 8009cea:	d006      	beq.n	8009cfa <SPI_FLASH_ReadData+0x66>
    FLASH_CS_HIGH();
 8009cec:	20a0      	movs	r0, #160	@ 0xa0
 8009cee:	2201      	movs	r2, #1
 8009cf0:	2110      	movs	r1, #16
 8009cf2:	05c0      	lsls	r0, r0, #23
 8009cf4:	f005 fb08 	bl	800f308 <HAL_GPIO_WritePin>
    return ret;
 8009cf8:	e7ed      	b.n	8009cd6 <SPI_FLASH_ReadData+0x42>
    while (spi_dma_done == 0) {}
 8009cfa:	782b      	ldrb	r3, [r5, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0fc      	beq.n	8009cfa <SPI_FLASH_ReadData+0x66>
 8009d00:	e7f4      	b.n	8009cec <SPI_FLASH_ReadData+0x58>
 8009d02:	46c0      	nop			@ (mov r8, r8)
 8009d04:	20000994 	.word	0x20000994
 8009d08:	20002c7f 	.word	0x20002c7f

08009d0c <HAL_SPI_TxCpltCallback>:

/* --- HAL DMA Callback Functions --- */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (hspi->Instance == SPI3)
 8009d0c:	4b03      	ldr	r3, [pc, #12]	@ (8009d1c <HAL_SPI_TxCpltCallback+0x10>)
 8009d0e:	6802      	ldr	r2, [r0, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d102      	bne.n	8009d1a <HAL_SPI_TxCpltCallback+0xe>
  {
    spi_dma_done = 1;
 8009d14:	2201      	movs	r2, #1
 8009d16:	4b02      	ldr	r3, [pc, #8]	@ (8009d20 <HAL_SPI_TxCpltCallback+0x14>)
 8009d18:	701a      	strb	r2, [r3, #0]
  }
}
 8009d1a:	4770      	bx	lr
 8009d1c:	40003c00 	.word	0x40003c00
 8009d20:	20002c7f 	.word	0x20002c7f

08009d24 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
 8009d24:	b510      	push	{r4, lr}
 8009d26:	f7ff fff1 	bl	8009d0c <HAL_SPI_TxCpltCallback>
 8009d2a:	bd10      	pop	{r4, pc}

08009d2c <HAL_SPI_ErrorCallback>:
  * @brief  SPI error callback.
  * @param  hspi: SPI handle
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009d2c:	b510      	push	{r4, lr}
    // Handle or log the error
    Error_Handler();
 8009d2e:	f7fe faef 	bl	8008310 <Error_Handler>
}
 8009d32:	bd10      	pop	{r4, pc}

08009d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d34:	b507      	push	{r0, r1, r2, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009d36:	2180      	movs	r1, #128	@ 0x80
 8009d38:	4b0c      	ldr	r3, [pc, #48]	@ (8009d6c <HAL_MspInit+0x38>)
 8009d3a:	0549      	lsls	r1, r1, #21
 8009d3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8009d3e:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d40:	430a      	orrs	r2, r1
 8009d42:	659a      	str	r2, [r3, #88]	@ 0x58
 8009d44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d46:	400a      	ands	r2, r1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d48:	2101      	movs	r1, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d4a:	9200      	str	r2, [sp, #0]
 8009d4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d50:	430a      	orrs	r2, r1
 8009d52:	661a      	str	r2, [r3, #96]	@ 0x60
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8009d54:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d58:	400b      	ands	r3, r1
 8009d5a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8009d5c:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8009d60:	f004 ff10 	bl	800eb84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8009d64:	2004      	movs	r0, #4
 8009d66:	f004 ff37 	bl	800ebd8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d6a:	bd07      	pop	{r0, r1, r2, pc}
 8009d6c:	40021000 	.word	0x40021000

08009d70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009d70:	b510      	push	{r4, lr}
 8009d72:	0004      	movs	r4, r0
 8009d74:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d76:	2214      	movs	r2, #20
 8009d78:	2100      	movs	r1, #0
 8009d7a:	a802      	add	r0, sp, #8
 8009d7c:	f010 f968 	bl	801a050 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d80:	2244      	movs	r2, #68	@ 0x44
 8009d82:	2100      	movs	r1, #0
 8009d84:	a807      	add	r0, sp, #28
 8009d86:	f010 f963 	bl	801a050 <memset>
  if(hadc->Instance==ADC1)
 8009d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8009df4 <HAL_ADC_MspInit+0x84>)
 8009d8c:	6822      	ldr	r2, [r4, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d12d      	bne.n	8009dee <HAL_ADC_MspInit+0x7e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009d92:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d94:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009d96:	01db      	lsls	r3, r3, #7
 8009d98:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d9a:	f007 f8a9 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d001      	beq.n	8009da6 <HAL_ADC_MspInit+0x36>
    {
      Error_Handler();
 8009da2:	f7fe fab5 	bl	8008310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009da6:	2180      	movs	r1, #128	@ 0x80
 8009da8:	4b13      	ldr	r3, [pc, #76]	@ (8009df8 <HAL_ADC_MspInit+0x88>)
 8009daa:	0349      	lsls	r1, r1, #13
 8009dac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dae:	2400      	movs	r4, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8009db0:	430a      	orrs	r2, r1
 8009db2:	661a      	str	r2, [r3, #96]	@ 0x60
 8009db4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009db6:	4811      	ldr	r0, [pc, #68]	@ (8009dfc <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8009db8:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009dba:	2104      	movs	r1, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 8009dbc:	9200      	str	r2, [sp, #0]
 8009dbe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009dc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009dca:	400b      	ands	r3, r1
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8009dd0:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dd2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8009dd4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009dd6:	3b02      	subs	r3, #2
 8009dd8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dda:	f005 f951 	bl	800f080 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 8009dde:	200c      	movs	r0, #12
 8009de0:	0022      	movs	r2, r4
 8009de2:	0021      	movs	r1, r4
 8009de4:	f004 fece 	bl	800eb84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 8009de8:	200c      	movs	r0, #12
 8009dea:	f004 fef5 	bl	800ebd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8009dee:	b018      	add	sp, #96	@ 0x60
 8009df0:	bd10      	pop	{r4, pc}
 8009df2:	46c0      	nop			@ (mov r8, r8)
 8009df4:	40012400 	.word	0x40012400
 8009df8:	40021000 	.word	0x40021000
 8009dfc:	50000800 	.word	0x50000800

08009e00 <HAL_ADC_MspDeInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8009e00:	4b07      	ldr	r3, [pc, #28]	@ (8009e20 <HAL_ADC_MspDeInit+0x20>)
 8009e02:	6802      	ldr	r2, [r0, #0]
{
 8009e04:	b510      	push	{r4, lr}
  if(hadc->Instance==ADC1)
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d108      	bne.n	8009e1c <HAL_ADC_MspDeInit+0x1c>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8009e0a:	4a06      	ldr	r2, [pc, #24]	@ (8009e24 <HAL_ADC_MspDeInit+0x24>)
 8009e0c:	4906      	ldr	r1, [pc, #24]	@ (8009e28 <HAL_ADC_MspDeInit+0x28>)
 8009e0e:	6e13      	ldr	r3, [r2, #96]	@ 0x60

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 8009e10:	4806      	ldr	r0, [pc, #24]	@ (8009e2c <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC_CLK_DISABLE();
 8009e12:	400b      	ands	r3, r1
 8009e14:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2);
 8009e16:	2105      	movs	r1, #5
 8009e18:	f005 f9f0 	bl	800f1fc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	46c0      	nop			@ (mov r8, r8)
 8009e20:	40012400 	.word	0x40012400
 8009e24:	40021000 	.word	0x40021000
 8009e28:	ffefffff 	.word	0xffefffff
 8009e2c:	50000800 	.word	0x50000800

08009e30 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8009e30:	b530      	push	{r4, r5, lr}
 8009e32:	0004      	movs	r4, r0
 8009e34:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e36:	2214      	movs	r2, #20
 8009e38:	2100      	movs	r1, #0
 8009e3a:	a803      	add	r0, sp, #12
 8009e3c:	f010 f908 	bl	801a050 <memset>
  if(hcomp->Instance==COMP1)
 8009e40:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb0 <HAL_COMP_MspInit+0x80>)
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d130      	bne.n	8009eaa <HAL_COMP_MspInit+0x7a>
  {
    /* USER CODE BEGIN COMP1_MspInit 0 */

    /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP_CLK_ENABLE();
 8009e48:	2101      	movs	r1, #1

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e4a:	2404      	movs	r4, #4
    __HAL_RCC_COMP_CLK_ENABLE();
 8009e4c:	4b19      	ldr	r3, [pc, #100]	@ (8009eb4 <HAL_COMP_MspInit+0x84>)
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e4e:	2503      	movs	r5, #3
    __HAL_RCC_COMP_CLK_ENABLE();
 8009e50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e52:	4819      	ldr	r0, [pc, #100]	@ (8009eb8 <HAL_COMP_MspInit+0x88>)
    __HAL_RCC_COMP_CLK_ENABLE();
 8009e54:	430a      	orrs	r2, r1
 8009e56:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e5a:	400a      	ands	r2, r1
 8009e5c:	9200      	str	r2, [sp, #0]
 8009e5e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e62:	1849      	adds	r1, r1, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e64:	4322      	orrs	r2, r4
 8009e66:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009e68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e6a:	4022      	ands	r2, r4
 8009e6c:	9201      	str	r2, [sp, #4]
 8009e6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e72:	430a      	orrs	r2, r1
 8009e74:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e78:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e7a:	400b      	ands	r3, r1
 8009e7c:	9302      	str	r3, [sp, #8]
 8009e7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009e80:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e82:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009e84:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e86:	f005 f8fb 	bl	800f080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009e8a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e8c:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e8e:	480b      	ldr	r0, [pc, #44]	@ (8009ebc <HAL_COMP_MspInit+0x8c>)
 8009e90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e92:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e94:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e96:	f005 f8f3 	bl	800f080 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 8009e9a:	200c      	movs	r0, #12
 8009e9c:	0022      	movs	r2, r4
 8009e9e:	0021      	movs	r1, r4
 8009ea0:	f004 fe70 	bl	800eb84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 8009ea4:	200c      	movs	r0, #12
 8009ea6:	f004 fe97 	bl	800ebd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END COMP1_MspInit 1 */

  }

}
 8009eaa:	b009      	add	sp, #36	@ 0x24
 8009eac:	bd30      	pop	{r4, r5, pc}
 8009eae:	46c0      	nop			@ (mov r8, r8)
 8009eb0:	40010200 	.word	0x40010200
 8009eb4:	40021000 	.word	0x40021000
 8009eb8:	50000800 	.word	0x50000800
 8009ebc:	50000400 	.word	0x50000400

08009ec0 <HAL_COMP_MspDeInit>:
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspDeInit(COMP_HandleTypeDef* hcomp)
{
  if(hcomp->Instance==COMP1)
 8009ec0:	4b09      	ldr	r3, [pc, #36]	@ (8009ee8 <HAL_COMP_MspDeInit+0x28>)
 8009ec2:	6802      	ldr	r2, [r0, #0]
{
 8009ec4:	b510      	push	{r4, lr}
  if(hcomp->Instance==COMP1)
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d10c      	bne.n	8009ee4 <HAL_COMP_MspDeInit+0x24>
  {
    /* USER CODE BEGIN COMP1_MspDeInit 0 */

    /* USER CODE END COMP1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_COMP_CLK_DISABLE();
 8009eca:	2101      	movs	r1, #1
 8009ecc:	4a07      	ldr	r2, [pc, #28]	@ (8009eec <HAL_COMP_MspDeInit+0x2c>)

    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8009ece:	4808      	ldr	r0, [pc, #32]	@ (8009ef0 <HAL_COMP_MspDeInit+0x30>)
    __HAL_RCC_COMP_CLK_DISABLE();
 8009ed0:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8009ed2:	438b      	bics	r3, r1
 8009ed4:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8009ed6:	310f      	adds	r1, #15
 8009ed8:	f005 f990 	bl	800f1fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8009edc:	2104      	movs	r1, #4
 8009ede:	4805      	ldr	r0, [pc, #20]	@ (8009ef4 <HAL_COMP_MspDeInit+0x34>)
 8009ee0:	f005 f98c 	bl	800f1fc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN COMP1_MspDeInit 1 */

    /* USER CODE END COMP1_MspDeInit 1 */
  }

}
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	46c0      	nop			@ (mov r8, r8)
 8009ee8:	40010200 	.word	0x40010200
 8009eec:	40021000 	.word	0x40021000
 8009ef0:	50000800 	.word	0x50000800
 8009ef4:	50000400 	.word	0x50000400

08009ef8 <HAL_LCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	0004      	movs	r4, r0
 8009efc:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009efe:	2214      	movs	r2, #20
 8009f00:	2100      	movs	r1, #0
 8009f02:	a804      	add	r0, sp, #16
 8009f04:	f010 f8a4 	bl	801a050 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f08:	2244      	movs	r2, #68	@ 0x44
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	a809      	add	r0, sp, #36	@ 0x24
 8009f0e:	f010 f89f 	bl	801a050 <memset>
  if(hlcd->Instance==LCD)
 8009f12:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc0 <HAL_LCD_MspInit+0xc8>)
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d150      	bne.n	8009fbc <HAL_LCD_MspInit+0xc4>

    /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009f1a:	2380      	movs	r3, #128	@ 0x80
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009f20:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f22:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f28:	f006 ffe2 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d001      	beq.n	8009f34 <HAL_LCD_MspInit+0x3c>
    {
      Error_Handler();
 8009f30:	f7fe f9ee 	bl	8008310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8009f34:	2180      	movs	r1, #128	@ 0x80

    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f36:	2502      	movs	r5, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 8009f38:	4b22      	ldr	r3, [pc, #136]	@ (8009fc4 <HAL_LCD_MspInit+0xcc>)
 8009f3a:	0089      	lsls	r1, r1, #2
 8009f3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f3e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009f40:	260b      	movs	r6, #11
    __HAL_RCC_LCD_CLK_ENABLE();
 8009f42:	430a      	orrs	r2, r1
 8009f44:	659a      	str	r2, [r3, #88]	@ 0x58
 8009f46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f48:	481f      	ldr	r0, [pc, #124]	@ (8009fc8 <HAL_LCD_MspInit+0xd0>)
    __HAL_RCC_LCD_CLK_ENABLE();
 8009f4a:	400a      	ands	r2, r1
 8009f4c:	9200      	str	r2, [sp, #0]
 8009f4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f50:	39fd      	subs	r1, #253	@ 0xfd
 8009f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f54:	39ff      	subs	r1, #255	@ 0xff
 8009f56:	430a      	orrs	r2, r1
 8009f58:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f5c:	400a      	ands	r2, r1
 8009f5e:	9201      	str	r2, [sp, #4]
 8009f60:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f64:	3903      	subs	r1, #3
 8009f66:	430a      	orrs	r2, r1
 8009f68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009f6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f6c:	400a      	ands	r2, r1
 8009f6e:	9202      	str	r2, [sp, #8]
 8009f70:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f74:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f76:	432a      	orrs	r2, r5
 8009f78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f7c:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f7e:	402b      	ands	r3, r5
 8009f80:	9303      	str	r3, [sp, #12]
 8009f82:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8009f84:	4b11      	ldr	r3, [pc, #68]	@ (8009fcc <HAL_LCD_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f86:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8009f88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f8a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009f8c:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f8e:	f005 f877 	bl	800f080 <HAL_GPIO_Init>
                          |GPIO_PIN_10|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f92:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8009f94:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd0 <HAL_LCD_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f96:	a904      	add	r1, sp, #16
 8009f98:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8009f9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f9e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009fa2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fa4:	f005 f86c 	bl	800f080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd4 <HAL_LCD_MspInit+0xdc>)
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009faa:	480b      	ldr	r0, [pc, #44]	@ (8009fd8 <HAL_LCD_MspInit+0xe0>)
 8009fac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8009fae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fb0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fb4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8009fb6:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fb8:	f005 f862 	bl	800f080 <HAL_GPIO_Init>

    /* USER CODE END LCD_MspInit 1 */

  }

}
 8009fbc:	b01a      	add	sp, #104	@ 0x68
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	40002400 	.word	0x40002400
 8009fc4:	40021000 	.word	0x40021000
 8009fc8:	50000800 	.word	0x50000800
 8009fcc:	000003ea 	.word	0x000003ea
 8009fd0:	000087ee 	.word	0x000087ee
 8009fd4:	0000fabb 	.word	0x0000fabb
 8009fd8:	50000400 	.word	0x50000400

08009fdc <HAL_LCD_MspDeInit>:
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspDeInit(LCD_HandleTypeDef* hlcd)
{
  if(hlcd->Instance==LCD)
 8009fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800a00c <HAL_LCD_MspDeInit+0x30>)
 8009fde:	6802      	ldr	r2, [r0, #0]
{
 8009fe0:	b510      	push	{r4, lr}
  if(hlcd->Instance==LCD)
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d111      	bne.n	800a00a <HAL_LCD_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN LCD_MspDeInit 0 */

    /* USER CODE END LCD_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LCD_CLK_DISABLE();
 8009fe6:	4a0a      	ldr	r2, [pc, #40]	@ (800a010 <HAL_LCD_MspDeInit+0x34>)
 8009fe8:	490a      	ldr	r1, [pc, #40]	@ (800a014 <HAL_LCD_MspDeInit+0x38>)
 8009fea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB9     ------> LCD_COM3
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8009fec:	480a      	ldr	r0, [pc, #40]	@ (800a018 <HAL_LCD_MspDeInit+0x3c>)
    __HAL_RCC_LCD_CLK_DISABLE();
 8009fee:	400b      	ands	r3, r1
 8009ff0:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8009ff2:	490a      	ldr	r1, [pc, #40]	@ (800a01c <HAL_LCD_MspDeInit+0x40>)
 8009ff4:	f005 f902 	bl	800f1fc <HAL_GPIO_DeInit>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8009ff8:	20a0      	movs	r0, #160	@ 0xa0
 8009ffa:	4909      	ldr	r1, [pc, #36]	@ (800a020 <HAL_LCD_MspDeInit+0x44>)
 8009ffc:	05c0      	lsls	r0, r0, #23
 8009ffe:	f005 f8fd 	bl	800f1fc <HAL_GPIO_DeInit>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800a002:	4908      	ldr	r1, [pc, #32]	@ (800a024 <HAL_LCD_MspDeInit+0x48>)
 800a004:	4808      	ldr	r0, [pc, #32]	@ (800a028 <HAL_LCD_MspDeInit+0x4c>)
 800a006:	f005 f8f9 	bl	800f1fc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN LCD_MspDeInit 1 */

    /* USER CODE END LCD_MspDeInit 1 */
  }

}
 800a00a:	bd10      	pop	{r4, pc}
 800a00c:	40002400 	.word	0x40002400
 800a010:	40021000 	.word	0x40021000
 800a014:	fffffdff 	.word	0xfffffdff
 800a018:	50000800 	.word	0x50000800
 800a01c:	000003ea 	.word	0x000003ea
 800a020:	000087ee 	.word	0x000087ee
 800a024:	0000fabb 	.word	0x0000fabb
 800a028:	50000400 	.word	0x50000400

0800a02c <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800a02c:	b510      	push	{r4, lr}
 800a02e:	0004      	movs	r4, r0
 800a030:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a032:	2244      	movs	r2, #68	@ 0x44
 800a034:	2100      	movs	r1, #0
 800a036:	a801      	add	r0, sp, #4
 800a038:	f010 f80a 	bl	801a050 <memset>
  if(hlptim->Instance==LPTIM1)
 800a03c:	4b12      	ldr	r3, [pc, #72]	@ (800a088 <HAL_LPTIM_MspInit+0x5c>)
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d11e      	bne.n	800a082 <HAL_LPTIM_MspInit+0x56>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800a044:	2380      	movs	r3, #128	@ 0x80
 800a046:	9301      	str	r3, [sp, #4]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800a048:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a04a:	a801      	add	r0, sp, #4
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800a04c:	031b      	lsls	r3, r3, #12
 800a04e:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a050:	f006 ff4e 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 800a054:	2800      	cmp	r0, #0
 800a056:	d001      	beq.n	800a05c <HAL_LPTIM_MspInit+0x30>
    {
      Error_Handler();
 800a058:	f7fe f95a 	bl	8008310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a05c:	2280      	movs	r2, #128	@ 0x80
 800a05e:	4b0b      	ldr	r3, [pc, #44]	@ (800a08c <HAL_LPTIM_MspInit+0x60>)
 800a060:	0612      	lsls	r2, r2, #24
 800a062:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a064:	2011      	movs	r0, #17
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a066:	430a      	orrs	r2, r1
 800a068:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a06a:	2200      	movs	r2, #0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a06c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a06e:	0011      	movs	r1, r2
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800a070:	0fdb      	lsrs	r3, r3, #31
 800a072:	07db      	lsls	r3, r3, #31
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a078:	f004 fd84 	bl	800eb84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800a07c:	2011      	movs	r0, #17
 800a07e:	f004 fdab 	bl	800ebd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 800a082:	b012      	add	sp, #72	@ 0x48
 800a084:	bd10      	pop	{r4, pc}
 800a086:	46c0      	nop			@ (mov r8, r8)
 800a088:	40007c00 	.word	0x40007c00
 800a08c:	40021000 	.word	0x40021000

0800a090 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a090:	b510      	push	{r4, lr}
 800a092:	0004      	movs	r4, r0
 800a094:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a096:	2244      	movs	r2, #68	@ 0x44
 800a098:	2100      	movs	r1, #0
 800a09a:	a801      	add	r0, sp, #4
 800a09c:	f00f ffd8 	bl	801a050 <memset>
  if(hrtc->Instance==RTC)
 800a0a0:	4b14      	ldr	r3, [pc, #80]	@ (800a0f4 <HAL_RTC_MspInit+0x64>)
 800a0a2:	6822      	ldr	r2, [r4, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d122      	bne.n	800a0ee <HAL_RTC_MspInit+0x5e>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a0a8:	2480      	movs	r4, #128	@ 0x80
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a0aa:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a0ac:	0224      	lsls	r4, r4, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a0ae:	005b      	lsls	r3, r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0b0:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a0b2:	9401      	str	r4, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a0b4:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0b6:	f006 ff1b 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d001      	beq.n	800a0c2 <HAL_RTC_MspInit+0x32>
    {
      Error_Handler();
 800a0be:	f7fe f927 	bl	8008310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f8 <HAL_RTC_MspInit+0x68>)
 800a0c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a0fc <HAL_RTC_MspInit+0x6c>)
 800a0c6:	6811      	ldr	r1, [r2, #0]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a0c8:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 800a0ca:	430c      	orrs	r4, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a0cc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_RTC_ENABLE();
 800a0ce:	6014      	str	r4, [r2, #0]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a0d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a0d2:	00c9      	lsls	r1, r1, #3
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a0d8:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a0da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0dc:	400b      	ands	r3, r1
 800a0de:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a0e0:	0011      	movs	r1, r2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a0e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a0e4:	f004 fd4e 	bl	800eb84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800a0e8:	2002      	movs	r0, #2
 800a0ea:	f004 fd75 	bl	800ebd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800a0ee:	b012      	add	sp, #72	@ 0x48
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	40002800 	.word	0x40002800
 800a0f8:	40021090 	.word	0x40021090
 800a0fc:	40021000 	.word	0x40021000

0800a100 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a100:	b530      	push	{r4, r5, lr}
 800a102:	0005      	movs	r5, r0
 800a104:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a106:	2214      	movs	r2, #20
 800a108:	2100      	movs	r1, #0
 800a10a:	a803      	add	r0, sp, #12
 800a10c:	f00f ffa0 	bl	801a050 <memset>
  if(hspi->Instance==SPI3)
 800a110:	4b28      	ldr	r3, [pc, #160]	@ (800a1b4 <HAL_SPI_MspInit+0xb4>)
 800a112:	682a      	ldr	r2, [r5, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d14b      	bne.n	800a1b0 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a118:	2180      	movs	r1, #128	@ 0x80
 800a11a:	4b27      	ldr	r3, [pc, #156]	@ (800a1b8 <HAL_SPI_MspInit+0xb8>)
 800a11c:	0209      	lsls	r1, r1, #8
 800a11e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a120:	4826      	ldr	r0, [pc, #152]	@ (800a1bc <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a122:	430a      	orrs	r2, r1
 800a124:	659a      	str	r2, [r3, #88]	@ 0x58
 800a126:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a128:	400a      	ands	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a12a:	2104      	movs	r1, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a12c:	9201      	str	r2, [sp, #4]
 800a12e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a130:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a132:	430a      	orrs	r2, r1
 800a134:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a138:	400b      	ands	r3, r1
 800a13a:	9302      	str	r3, [sp, #8]
 800a13c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a13e:	23e0      	movs	r3, #224	@ 0xe0
 800a140:	015b      	lsls	r3, r3, #5
 800a142:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a144:	2302      	movs	r3, #2
 800a146:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a148:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a14a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a14c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a14e:	f004 ff97 	bl	800f080 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel1;
 800a152:	4c1b      	ldr	r4, [pc, #108]	@ (800a1c0 <HAL_SPI_MspInit+0xc0>)
 800a154:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c4 <HAL_SPI_MspInit+0xc4>)
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a156:	2280      	movs	r2, #128	@ 0x80
    hdma_spi3_rx.Instance = DMA1_Channel1;
 800a158:	6023      	str	r3, [r4, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800a15a:	2328      	movs	r3, #40	@ 0x28
 800a15c:	6063      	str	r3, [r4, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a15e:	2300      	movs	r3, #0
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800a160:	0020      	movs	r0, r4
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a162:	60a3      	str	r3, [r4, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a164:	60e3      	str	r3, [r4, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a166:	6122      	str	r2, [r4, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a168:	6163      	str	r3, [r4, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a16a:	61a3      	str	r3, [r4, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800a16c:	61e3      	str	r3, [r4, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a16e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800a170:	f004 fd9a 	bl	800eca8 <HAL_DMA_Init>
 800a174:	2800      	cmp	r0, #0
 800a176:	d001      	beq.n	800a17c <HAL_SPI_MspInit+0x7c>
    {
      Error_Handler();
 800a178:	f7fe f8ca 	bl	8008310 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a17c:	4b12      	ldr	r3, [pc, #72]	@ (800a1c8 <HAL_SPI_MspInit+0xc8>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800a17e:	65ac      	str	r4, [r5, #88]	@ 0x58
 800a180:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a182:	4c12      	ldr	r4, [pc, #72]	@ (800a1cc <HAL_SPI_MspInit+0xcc>)
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a184:	2280      	movs	r2, #128	@ 0x80
    hdma_spi3_tx.Instance = DMA1_Channel2;
 800a186:	6023      	str	r3, [r4, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800a188:	2329      	movs	r3, #41	@ 0x29
 800a18a:	6063      	str	r3, [r4, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a18c:	3b19      	subs	r3, #25
 800a18e:	60a3      	str	r3, [r4, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a190:	2300      	movs	r3, #0
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a192:	0020      	movs	r0, r4
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a194:	60e3      	str	r3, [r4, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a196:	6122      	str	r2, [r4, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a198:	6163      	str	r3, [r4, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a19a:	61a3      	str	r3, [r4, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800a19c:	61e3      	str	r3, [r4, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a19e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a1a0:	f004 fd82 	bl	800eca8 <HAL_DMA_Init>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d001      	beq.n	800a1ac <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 800a1a8:	f7fe f8b2 	bl	8008310 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800a1ac:	656c      	str	r4, [r5, #84]	@ 0x54
 800a1ae:	62a5      	str	r5, [r4, #40]	@ 0x28

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800a1b0:	b009      	add	sp, #36	@ 0x24
 800a1b2:	bd30      	pop	{r4, r5, pc}
 800a1b4:	40003c00 	.word	0x40003c00
 800a1b8:	40021000 	.word	0x40021000
 800a1bc:	50000800 	.word	0x50000800
 800a1c0:	20000934 	.word	0x20000934
 800a1c4:	40020008 	.word	0x40020008
 800a1c8:	4002001c 	.word	0x4002001c
 800a1cc:	200008d4 	.word	0x200008d4

0800a1d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	0004      	movs	r4, r0
 800a1d4:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1d6:	2214      	movs	r2, #20
 800a1d8:	2100      	movs	r1, #0
 800a1da:	a802      	add	r0, sp, #8
 800a1dc:	f00f ff38 	bl	801a050 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a1e0:	2244      	movs	r2, #68	@ 0x44
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	a807      	add	r0, sp, #28
 800a1e6:	f00f ff33 	bl	801a050 <memset>
  if(huart->Instance==USART3)
 800a1ea:	4b18      	ldr	r3, [pc, #96]	@ (800a24c <HAL_UART_MspInit+0x7c>)
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d129      	bne.n	800a246 <HAL_UART_MspInit+0x76>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a1f2:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1f4:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a1f6:	025b      	lsls	r3, r3, #9
 800a1f8:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1fa:	f006 fe79 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d001      	beq.n	800a206 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800a202:	f7fe f885 	bl	8008310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a206:	2180      	movs	r1, #128	@ 0x80
 800a208:	4b11      	ldr	r3, [pc, #68]	@ (800a250 <HAL_UART_MspInit+0x80>)
 800a20a:	02c9      	lsls	r1, r1, #11
 800a20c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a20e:	4811      	ldr	r0, [pc, #68]	@ (800a254 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800a210:	430a      	orrs	r2, r1
 800a212:	659a      	str	r2, [r3, #88]	@ 0x58
 800a214:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a216:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a218:	2102      	movs	r1, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800a21a:	9200      	str	r2, [sp, #0]
 800a21c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a21e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a220:	430a      	orrs	r2, r1
 800a222:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a226:	400b      	ands	r3, r1
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a22c:	2380      	movs	r3, #128	@ 0x80
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a232:	3bee      	subs	r3, #238	@ 0xee
 800a234:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a236:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a238:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a23a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a23c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a23e:	3307      	adds	r3, #7
 800a240:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a242:	f004 ff1d 	bl	800f080 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800a246:	b018      	add	sp, #96	@ 0x60
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	46c0      	nop			@ (mov r8, r8)
 800a24c:	40004800 	.word	0x40004800
 800a250:	40021000 	.word	0x40021000
 800a254:	50000400 	.word	0x50000400

0800a258 <HAL_UART_MspDeInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART3)
 800a258:	4b07      	ldr	r3, [pc, #28]	@ (800a278 <HAL_UART_MspDeInit+0x20>)
 800a25a:	6802      	ldr	r2, [r0, #0]
{
 800a25c:	b510      	push	{r4, lr}
  if(huart->Instance==USART3)
 800a25e:	429a      	cmp	r2, r3
 800a260:	d109      	bne.n	800a276 <HAL_UART_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN USART3_MspDeInit 0 */

    /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800a262:	4a06      	ldr	r2, [pc, #24]	@ (800a27c <HAL_UART_MspDeInit+0x24>)
 800a264:	4906      	ldr	r1, [pc, #24]	@ (800a280 <HAL_UART_MspDeInit+0x28>)
 800a266:	6d93      	ldr	r3, [r2, #88]	@ 0x58

    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a268:	4806      	ldr	r0, [pc, #24]	@ (800a284 <HAL_UART_MspDeInit+0x2c>)
    __HAL_RCC_USART3_CLK_DISABLE();
 800a26a:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a26c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART3_CLK_DISABLE();
 800a26e:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a270:	0049      	lsls	r1, r1, #1
 800a272:	f004 ffc3 	bl	800f1fc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800a276:	bd10      	pop	{r4, pc}
 800a278:	40004800 	.word	0x40004800
 800a27c:	40021000 	.word	0x40021000
 800a280:	fffbffff 	.word	0xfffbffff
 800a284:	50000400 	.word	0x50000400

0800a288 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a288:	b510      	push	{r4, lr}
 800a28a:	0004      	movs	r4, r0
 800a28c:	b098      	sub	sp, #96	@ 0x60
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a28e:	2244      	movs	r2, #68	@ 0x44
 800a290:	2100      	movs	r1, #0
 800a292:	a807      	add	r0, sp, #28
 800a294:	f00f fedc 	bl	801a050 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800a298:	4b1b      	ldr	r3, [pc, #108]	@ (800a308 <HAL_PCD_MspInit+0x80>)
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d130      	bne.n	800a302 <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a2a0:	2380      	movs	r3, #128	@ 0x80
 800a2a2:	015b      	lsls	r3, r3, #5
 800a2a4:	9307      	str	r3, [sp, #28]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a2a6:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a2a8:	a807      	add	r0, sp, #28
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a2aa:	051b      	lsls	r3, r3, #20
 800a2ac:	9314      	str	r3, [sp, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a2ae:	f006 fe1f 	bl	8010ef0 <HAL_RCCEx_PeriphCLKConfig>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d001      	beq.n	800a2ba <HAL_PCD_MspInit+0x32>
    {
      Error_Handler();
 800a2b6:	f7fe f82b 	bl	8008310 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800a2ba:	f006 fa29 	bl	8010710 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a2be:	2180      	movs	r1, #128	@ 0x80
 800a2c0:	4b12      	ldr	r3, [pc, #72]	@ (800a30c <HAL_PCD_MspInit+0x84>)
 800a2c2:	0189      	lsls	r1, r1, #6
 800a2c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a2c6:	2008      	movs	r0, #8
    __HAL_RCC_USB_CLK_ENABLE();
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a2cc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d0:	400b      	ands	r3, r1
 800a2d2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a2d4:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a2d6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800a2d8:	f004 fc54 	bl	800eb84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800a2dc:	2008      	movs	r0, #8
 800a2de:	f004 fc7b 	bl	800ebd8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9304      	str	r3, [sp, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a2e6:	23c0      	movs	r3, #192	@ 0xc0
 800a2e8:	015b      	lsls	r3, r3, #5
 800a2ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ec:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2ee:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2f6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a2f8:	3307      	adds	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2fa:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a2fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2fe:	f004 febf 	bl	800f080 <HAL_GPIO_Init>
    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800a302:	b018      	add	sp, #96	@ 0x60
 800a304:	bd10      	pop	{r4, pc}
 800a306:	46c0      	nop			@ (mov r8, r8)
 800a308:	40005c00 	.word	0x40005c00
 800a30c:	40021000 	.word	0x40021000

0800a310 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a310:	e7fe      	b.n	800a310 <NMI_Handler>

0800a312 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a312:	e7fe      	b.n	800a312 <HardFault_Handler>

0800a314 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a314:	4770      	bx	lr

0800a316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800a316:	4770      	bx	lr

0800a318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a318:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a31a:	f003 fd53 	bl	800ddc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a31e:	bd10      	pop	{r4, pc}

0800a320 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800a320:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a322:	4c0a      	ldr	r4, [pc, #40]	@ (800a34c <RTC_TAMP_IRQHandler+0x2c>)
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  // 1) Wake-Up 타이머 EXTI 라인(20) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a324:	4d0a      	ldr	r5, [pc, #40]	@ (800a350 <RTC_TAMP_IRQHandler+0x30>)
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a326:	0020      	movs	r0, r4
 800a328:	f007 f962 	bl	80115f0 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a32c:	0020      	movs	r0, r4
 800a32e:	f007 fc41 	bl	8011bb4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a332:	2380      	movs	r3, #128	@ 0x80
 800a334:	055b      	lsls	r3, r3, #21
 800a336:	60eb      	str	r3, [r5, #12]
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a338:	0020      	movs	r0, r4
 800a33a:	f007 fc3b 	bl	8011bb4 <HAL_RTCEx_WakeUpTimerIRQHandler>

  // 2) Tamper EXTI 라인(21) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_TAMPER_EVENT;
 800a33e:	2380      	movs	r3, #128	@ 0x80
 800a340:	059b      	lsls	r3, r3, #22
 800a342:	60eb      	str	r3, [r5, #12]
  HAL_RTCEx_TamperIRQHandler(&hrtc);
 800a344:	0020      	movs	r0, r4
 800a346:	f007 fc4f 	bl	8011be8 <HAL_RTCEx_TamperIRQHandler>
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	200009f8 	.word	0x200009f8
 800a350:	40021800 	.word	0x40021800

0800a354 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
 800a354:	4770      	bx	lr
	...

0800a358 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 800a358:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800a35a:	4802      	ldr	r0, [pc, #8]	@ (800a364 <USB_DRD_FS_IRQHandler+0xc>)
 800a35c:	f005 fbd8 	bl	800fb10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800a360:	bd10      	pop	{r4, pc}
 800a362:	46c0      	nop			@ (mov r8, r8)
 800a364:	20000564 	.word	0x20000564

0800a368 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a368:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800a36a:	4802      	ldr	r0, [pc, #8]	@ (800a374 <DMA1_Channel1_IRQHandler+0xc>)
 800a36c:	f004 fd52 	bl	800ee14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a370:	bd10      	pop	{r4, pc}
 800a372:	46c0      	nop			@ (mov r8, r8)
 800a374:	20000934 	.word	0x20000934

0800a378 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800a378:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800a37a:	4802      	ldr	r0, [pc, #8]	@ (800a384 <DMA1_Channel2_3_IRQHandler+0xc>)
 800a37c:	f004 fd4a 	bl	800ee14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800a380:	bd10      	pop	{r4, pc}
 800a382:	46c0      	nop			@ (mov r8, r8)
 800a384:	200008d4 	.word	0x200008d4

0800a388 <ADC_COMP1_2_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC_COMP1_2_IRQHandler(void)
{
 800a388:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 0 */

  /* USER CODE END ADC_COMP1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a38a:	4803      	ldr	r0, [pc, #12]	@ (800a398 <ADC_COMP1_2_IRQHandler+0x10>)
 800a38c:	f003 febc 	bl	800e108 <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 800a390:	4802      	ldr	r0, [pc, #8]	@ (800a39c <ADC_COMP1_2_IRQHandler+0x14>)
 800a392:	f004 fbcb 	bl	800eb2c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 1 */

  /* USER CODE END ADC_COMP1_2_IRQn 1 */
}
 800a396:	bd10      	pop	{r4, pc}
 800a398:	20000aec 	.word	0x20000aec
 800a39c:	20000abc 	.word	0x20000abc

0800a3a0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800a3a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800a3a2:	4802      	ldr	r0, [pc, #8]	@ (800a3ac <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 800a3a4:	f005 f9dd 	bl	800f762 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800a3a8:	bd10      	pop	{r4, pc}
 800a3aa:	46c0      	nop			@ (mov r8, r8)
 800a3ac:	20000a28 	.word	0x20000a28

0800a3b0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	4770      	bx	lr

0800a3b4 <_kill>:

int _kill(int pid, int sig)
{
 800a3b4:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a3b6:	f00f fed5 	bl	801a164 <__errno>
 800a3ba:	2316      	movs	r3, #22
 800a3bc:	6003      	str	r3, [r0, #0]
  return -1;
 800a3be:	2001      	movs	r0, #1
}
 800a3c0:	4240      	negs	r0, r0
 800a3c2:	bd10      	pop	{r4, pc}

0800a3c4 <_exit>:

void _exit (int status)
{
 800a3c4:	b510      	push	{r4, lr}
  errno = EINVAL;
 800a3c6:	f00f fecd 	bl	801a164 <__errno>
 800a3ca:	2316      	movs	r3, #22
 800a3cc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800a3ce:	e7fe      	b.n	800a3ce <_exit+0xa>

0800a3d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	000e      	movs	r6, r1
 800a3d4:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a3d6:	2500      	movs	r5, #0
 800a3d8:	42a5      	cmp	r5, r4
 800a3da:	db01      	blt.n	800a3e0 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800a3dc:	0020      	movs	r0, r4
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800a3e0:	e000      	b.n	800a3e4 <_read+0x14>
 800a3e2:	bf00      	nop
 800a3e4:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a3e6:	3501      	adds	r5, #1
 800a3e8:	e7f6      	b.n	800a3d8 <_read+0x8>

0800a3ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a3ea:	b570      	push	{r4, r5, r6, lr}
 800a3ec:	000e      	movs	r6, r1
 800a3ee:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	42a5      	cmp	r5, r4
 800a3f4:	db01      	blt.n	800a3fa <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800a3f6:	0020      	movs	r0, r4
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800a3fa:	5d70      	ldrb	r0, [r6, r5]
 800a3fc:	f7fc ff1e 	bl	800723c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a400:	3501      	adds	r5, #1
 800a402:	e7f6      	b.n	800a3f2 <_write+0x8>

0800a404 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800a404:	2001      	movs	r0, #1
}
 800a406:	4240      	negs	r0, r0
 800a408:	4770      	bx	lr

0800a40a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800a40a:	2380      	movs	r3, #128	@ 0x80
 800a40c:	019b      	lsls	r3, r3, #6
  return 0;
}
 800a40e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800a410:	604b      	str	r3, [r1, #4]
}
 800a412:	4770      	bx	lr

0800a414 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800a414:	2001      	movs	r0, #1
 800a416:	4770      	bx	lr

0800a418 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800a418:	2000      	movs	r0, #0
 800a41a:	4770      	bx	lr

0800a41c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a41c:	490b      	ldr	r1, [pc, #44]	@ (800a44c <_sbrk+0x30>)
 800a41e:	4a0c      	ldr	r2, [pc, #48]	@ (800a450 <_sbrk+0x34>)
{
 800a420:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a422:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a424:	490b      	ldr	r1, [pc, #44]	@ (800a454 <_sbrk+0x38>)
{
 800a426:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800a428:	6808      	ldr	r0, [r1, #0]
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d101      	bne.n	800a432 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800a42e:	480a      	ldr	r0, [pc, #40]	@ (800a458 <_sbrk+0x3c>)
 800a430:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a432:	6808      	ldr	r0, [r1, #0]
 800a434:	18c3      	adds	r3, r0, r3
 800a436:	4293      	cmp	r3, r2
 800a438:	d906      	bls.n	800a448 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800a43a:	f00f fe93 	bl	801a164 <__errno>
 800a43e:	230c      	movs	r3, #12
 800a440:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800a442:	2001      	movs	r0, #1
 800a444:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800a446:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800a448:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800a44a:	e7fc      	b.n	800a446 <_sbrk+0x2a>
 800a44c:	00000400 	.word	0x00000400
 800a450:	2000a000 	.word	0x2000a000
 800a454:	20002c80 	.word	0x20002c80
 800a458:	20006820 	.word	0x20006820

0800a45c <SystemInit>:
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a45c:	2280      	movs	r2, #128	@ 0x80
 800a45e:	4b0a      	ldr	r3, [pc, #40]	@ (800a488 <SystemInit+0x2c>)
 800a460:	0512      	lsls	r2, r2, #20
 800a462:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800a464:	4b09      	ldr	r3, [pc, #36]	@ (800a48c <SystemInit+0x30>)
 800a466:	4a0a      	ldr	r2, [pc, #40]	@ (800a490 <SystemInit+0x34>)
 800a468:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
  tmp_optr = FLASH->OPTR;
 800a46a:	6a13      	ldr	r3, [r2, #32]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800a46c:	03c9      	lsls	r1, r1, #15
 800a46e:	d509      	bpl.n	800a484 <SystemInit+0x28>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2bcc      	cmp	r3, #204	@ 0xcc
 800a474:	d006      	beq.n	800a484 <SystemInit+0x28>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800a476:	2baa      	cmp	r3, #170	@ 0xaa
 800a478:	d004      	beq.n	800a484 <SystemInit+0x28>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800a47a:	2380      	movs	r3, #128	@ 0x80
 800a47c:	6811      	ldr	r1, [r2, #0]
 800a47e:	02db      	lsls	r3, r3, #11
 800a480:	430b      	orrs	r3, r1
 800a482:	6013      	str	r3, [r2, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800a484:	4770      	bx	lr
 800a486:	46c0      	nop			@ (mov r8, r8)
 800a488:	e000ed00 	.word	0xe000ed00
 800a48c:	40022004 	.word	0x40022004
 800a490:	40022000 	.word	0x40022000

0800a494 <csv_device_info>:
}

static void csv_device_info(const DeviceSettings *dev_setting) {

	log_csv.device_info.device_code = dev_setting->device_code;
	log_csv.device_info.model_code = dev_setting->model;
 800a494:	0003      	movs	r3, r0
static void csv_device_info(const DeviceSettings *dev_setting) {
 800a496:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a498:	4c3e      	ldr	r4, [pc, #248]	@ (800a594 <csv_device_info+0x100>)
	log_csv.device_info.model_code = dev_setting->model;
 800a49a:	3310      	adds	r3, #16
static void csv_device_info(const DeviceSettings *dev_setting) {
 800a49c:	44a5      	add	sp, r4
	log_csv.device_info.device_code = dev_setting->device_code;
 800a49e:	4c3e      	ldr	r4, [pc, #248]	@ (800a598 <csv_device_info+0x104>)
	log_csv.device_info.model_code = dev_setting->model;
 800a4a0:	9305      	str	r3, [sp, #20]
 800a4a2:	60e3      	str	r3, [r4, #12]
	log_csv.device_info.firmware_version = dev_setting->firmware_ver;
 800a4a4:	3321      	adds	r3, #33	@ 0x21
 800a4a6:	9306      	str	r3, [sp, #24]
 800a4a8:	60a3      	str	r3, [r4, #8]
	log_csv.device_info.serial_number = dev_setting->serial;
 800a4aa:	3b11      	subs	r3, #17
	log_csv.device_info.device_code = dev_setting->device_code;
 800a4ac:	6020      	str	r0, [r4, #0]
	log_csv.device_info.serial_number = dev_setting->serial;
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	6123      	str	r3, [r4, #16]

	// sensor_type 값에 따라 probe_type 문자열 설정
	if (dev_setting->sensor_type == 1)
 800a4b2:	3030      	adds	r0, #48	@ 0x30
 800a4b4:	7802      	ldrb	r2, [r0, #0]
 800a4b6:	4b39      	ldr	r3, [pc, #228]	@ (800a59c <csv_device_info+0x108>)
 800a4b8:	2a01      	cmp	r2, #1
 800a4ba:	d003      	beq.n	800a4c4 <csv_device_info+0x30>
	    log_csv.device_info.probe_type = "Temperature and Radiation (interval)";
	else if (dev_setting->sensor_type == 2)
 800a4bc:	4b38      	ldr	r3, [pc, #224]	@ (800a5a0 <csv_device_info+0x10c>)
 800a4be:	2a02      	cmp	r2, #2
 800a4c0:	d000      	beq.n	800a4c4 <csv_device_info+0x30>
 800a4c2:	4b38      	ldr	r3, [pc, #224]	@ (800a5a4 <csv_device_info+0x110>)
	    log_csv.device_info.probe_type = "Temperature Only";
	else
	    log_csv.device_info.probe_type = "Unknown Sensor Type";

    char tmp_buff[512] = {0};
 800a4c4:	2680      	movs	r6, #128	@ 0x80
 800a4c6:	00b6      	lsls	r6, r6, #2
 800a4c8:	0032      	movs	r2, r6
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	a808      	add	r0, sp, #32
	    log_csv.device_info.probe_type = "Temperature and Radiation (interval)";
 800a4ce:	6063      	str	r3, [r4, #4]
    char tmp_buff[512] = {0};
 800a4d0:	f00f fdbe 	bl	801a050 <memset>
    const int buffer_size = sizeof(tmp_buff);

    const int label_width = 20;

    // 1. Add the static header to the buffer
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a4d4:	4934      	ldr	r1, [pc, #208]	@ (800a5a8 <csv_device_info+0x114>)
 800a4d6:	a808      	add	r0, sp, #32
 800a4d8:	f00f fe71 	bl	801a1be <strcpy>
                       "Device Information\n"
                       "************************************************\n");

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a4dc:	2514      	movs	r5, #20
 800a4de:	21de      	movs	r1, #222	@ 0xde
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	4a32      	ldr	r2, [pc, #200]	@ (800a5ac <csv_device_info+0x118>)
 800a4e4:	9302      	str	r3, [sp, #8]
 800a4e6:	4b32      	ldr	r3, [pc, #200]	@ (800a5b0 <csv_device_info+0x11c>)
 800a4e8:	9501      	str	r5, [sp, #4]
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	0049      	lsls	r1, r1, #1
 800a4ee:	002b      	movs	r3, r5
 800a4f0:	a819      	add	r0, sp, #100	@ 0x64
 800a4f2:	9204      	str	r2, [sp, #16]
 800a4f4:	f00f fc5a 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n", label_width, "Start Delay", label_width, log_csv.device_info.device_code);

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a4f8:	ab08      	add	r3, sp, #32
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a4fa:	3044      	adds	r0, #68	@ 0x44
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a4fc:	1a31      	subs	r1, r6, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a4fe:	0007      	movs	r7, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a500:	1818      	adds	r0, r3, r0
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	9a04      	ldr	r2, [sp, #16]
 800a506:	9302      	str	r3, [sp, #8]
 800a508:	2328      	movs	r3, #40	@ 0x28
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	4b29      	ldr	r3, [pc, #164]	@ (800a5b4 <csv_device_info+0x120>)
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	002b      	movs	r3, r5
 800a512:	f00f fc4b 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n", label_width, "Probe Type", 40, log_csv.device_info.probe_type);

    log_csv.device_info.firmware_version = dev_setting-> firmware_ver;
 800a516:	9b06      	ldr	r3, [sp, #24]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a518:	183f      	adds	r7, r7, r0
    log_csv.device_info.firmware_version = dev_setting-> firmware_ver;
 800a51a:	60a3      	str	r3, [r4, #8]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a51c:	ab08      	add	r3, sp, #32
 800a51e:	19d8      	adds	r0, r3, r7
 800a520:	9b06      	ldr	r3, [sp, #24]
 800a522:	1bf1      	subs	r1, r6, r7
 800a524:	9302      	str	r3, [sp, #8]
 800a526:	4b24      	ldr	r3, [pc, #144]	@ (800a5b8 <csv_device_info+0x124>)
 800a528:	9a04      	ldr	r2, [sp, #16]
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	9501      	str	r5, [sp, #4]
 800a52e:	002b      	movs	r3, r5
 800a530:	f00f fc3c 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n", label_width, "Firmware Version", label_width, log_csv.device_info.firmware_version);

    log_csv.device_info.model_code = dev_setting-> model;
 800a534:	9b05      	ldr	r3, [sp, #20]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a536:	183f      	adds	r7, r7, r0
    log_csv.device_info.model_code = dev_setting-> model;
 800a538:	60e3      	str	r3, [r4, #12]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a53a:	ab08      	add	r3, sp, #32
 800a53c:	19d8      	adds	r0, r3, r7
 800a53e:	9b05      	ldr	r3, [sp, #20]
 800a540:	1bf1      	subs	r1, r6, r7
 800a542:	9302      	str	r3, [sp, #8]
 800a544:	4b1d      	ldr	r3, [pc, #116]	@ (800a5bc <csv_device_info+0x128>)
 800a546:	9a04      	ldr	r2, [sp, #16]
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	9501      	str	r5, [sp, #4]
 800a54c:	002b      	movs	r3, r5
 800a54e:	f00f fc2d 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n", label_width, "Model Code", label_width, log_csv.device_info.model_code);

    log_csv.device_info.serial_number = dev_setting-> serial;
 800a552:	9b07      	ldr	r3, [sp, #28]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a554:	183f      	adds	r7, r7, r0
    log_csv.device_info.serial_number = dev_setting-> serial;
 800a556:	6123      	str	r3, [r4, #16]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a558:	ab08      	add	r3, sp, #32
 800a55a:	19d8      	adds	r0, r3, r7
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	1bf1      	subs	r1, r6, r7
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	4b17      	ldr	r3, [pc, #92]	@ (800a5c0 <csv_device_info+0x12c>)
 800a564:	4a17      	ldr	r2, [pc, #92]	@ (800a5c4 <csv_device_info+0x130>)
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	9501      	str	r5, [sp, #4]
 800a56a:	002b      	movs	r3, r5
 800a56c:	f00f fc1e 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n\n", label_width, "Serial Number", label_width, log_csv.device_info.serial_number);
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800a570:	23c2      	movs	r3, #194	@ 0xc2
 800a572:	22c4      	movs	r2, #196	@ 0xc4
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	58e3      	ldr	r3, [r4, r3]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a578:	183f      	adds	r7, r7, r0
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800a57a:	3301      	adds	r3, #1
 800a57c:	19db      	adds	r3, r3, r7
 800a57e:	0052      	lsls	r2, r2, #1

    fatfs_write_str(&csv_file, tmp_buff);
 800a580:	4911      	ldr	r1, [pc, #68]	@ (800a5c8 <csv_device_info+0x134>)
 800a582:	a808      	add	r0, sp, #32
    log_csv.csv_fiels_offset.trip_info_offset = log_csv.csv_fiels_offset.device_info_offset + offset + 1; // +1 for newline
 800a584:	50a3      	str	r3, [r4, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800a586:	f00b f835 	bl	80155f4 <f_puts>
}
 800a58a:	2389      	movs	r3, #137	@ 0x89
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	449d      	add	sp, r3
 800a590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a592:	46c0      	nop			@ (mov r8, r8)
 800a594:	fffffddc 	.word	0xfffffddc
 800a598:	20000058 	.word	0x20000058
 800a59c:	0801e4a0 	.word	0x0801e4a0
 800a5a0:	0801e4c5 	.word	0x0801e4c5
 800a5a4:	0801e4d6 	.word	0x0801e4d6
 800a5a8:	0801e4ea 	.word	0x0801e4ea
 800a5ac:	0801e52f 	.word	0x0801e52f
 800a5b0:	0801e53b 	.word	0x0801e53b
 800a5b4:	0801e547 	.word	0x0801e547
 800a5b8:	0801e552 	.word	0x0801e552
 800a5bc:	0801e563 	.word	0x0801e563
 800a5c0:	0801e57b 	.word	0x0801e57b
 800a5c4:	0801e56e 	.word	0x0801e56e
 800a5c8:	20002c84 	.word	0x20002c84

0800a5cc <csv_trip_info>:

static void csv_trip_info(const DeviceSettings *dev_setting) {
 800a5cc:	b570      	push	{r4, r5, r6, lr}
	log_csv.trip_info.trip_id = dev_setting->trip_code;
	log_csv.trip_info.description = dev_setting->trip_desc;

    char tmp_buff[256] = {0};
 800a5ce:	2280      	movs	r2, #128	@ 0x80
	log_csv.trip_info.description = dev_setting->trip_desc;
 800a5d0:	0006      	movs	r6, r0
static void csv_trip_info(const DeviceSettings *dev_setting) {
 800a5d2:	0004      	movs	r4, r0
 800a5d4:	b0c4      	sub	sp, #272	@ 0x110
	log_csv.trip_info.description = dev_setting->trip_desc;
 800a5d6:	4d1b      	ldr	r5, [pc, #108]	@ (800a644 <csv_trip_info+0x78>)
 800a5d8:	363b      	adds	r6, #59	@ 0x3b
    char tmp_buff[256] = {0};
 800a5da:	0052      	lsls	r2, r2, #1
 800a5dc:	2100      	movs	r1, #0
 800a5de:	a804      	add	r0, sp, #16
	log_csv.trip_info.description = dev_setting->trip_desc;
 800a5e0:	61ae      	str	r6, [r5, #24]
    char tmp_buff[256] = {0};
 800a5e2:	f00f fd35 	bl	801a050 <memset>
    int offset = 0;
    const int buffer_size = sizeof(tmp_buff);
    const int label_width = 20;

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a5e6:	4918      	ldr	r1, [pc, #96]	@ (800a648 <csv_trip_info+0x7c>)
 800a5e8:	a804      	add	r0, sp, #16
 800a5ea:	f00f fde8 	bl	801a1be <strcpy>
                    "Trip Information\n"
                    "************************************************\n");
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800a5ee:	0023      	movs	r3, r4
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a5f0:	2052      	movs	r0, #82	@ 0x52
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800a5f2:	3339      	adds	r3, #57	@ 0x39
 800a5f4:	343a      	adds	r4, #58	@ 0x3a
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	7823      	ldrb	r3, [r4, #0]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a5fa:	21be      	movs	r1, #190	@ 0xbe
    log_csv.trip_info.trip_id = (unsigned long) (dev_setting -> trip_code);
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	4313      	orrs	r3, r2
 800a600:	616b      	str	r3, [r5, #20]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	4b11      	ldr	r3, [pc, #68]	@ (800a64c <csv_trip_info+0x80>)
 800a606:	4a12      	ldr	r2, [pc, #72]	@ (800a650 <csv_trip_info+0x84>)
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	4468      	add	r0, sp
 800a60c:	2314      	movs	r3, #20
 800a60e:	f00f fbcd 	bl	8019dac <sniprintf>
        "%-*s: %07ld\n", label_width, "Trip Id", log_csv.trip_info.trip_id);

    log_csv.trip_info.description = dev_setting -> trip_desc;
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a612:	2314      	movs	r3, #20
 800a614:	490f      	ldr	r1, [pc, #60]	@ (800a654 <csv_trip_info+0x88>)
    log_csv.trip_info.description = dev_setting -> trip_desc;
 800a616:	61ae      	str	r6, [r5, #24]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a618:	4a0f      	ldr	r2, [pc, #60]	@ (800a658 <csv_trip_info+0x8c>)
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	9100      	str	r1, [sp, #0]
 800a61e:	9602      	str	r6, [sp, #8]
 800a620:	21a0      	movs	r1, #160	@ 0xa0
 800a622:	a81c      	add	r0, sp, #112	@ 0x70
 800a624:	f00f fbc2 	bl	8019dac <sniprintf>
        "%-*s: %-*s\n", label_width, "Description", label_width, log_csv.trip_info.description);
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800a628:	23c4      	movs	r3, #196	@ 0xc4
 800a62a:	22c6      	movs	r2, #198	@ 0xc6
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	58eb      	ldr	r3, [r5, r3]
 800a630:	0052      	lsls	r2, r2, #1
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a632:	181b      	adds	r3, r3, r0
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800a634:	3361      	adds	r3, #97	@ 0x61

    fatfs_write_str(&csv_file, tmp_buff);
 800a636:	4909      	ldr	r1, [pc, #36]	@ (800a65c <csv_trip_info+0x90>)
 800a638:	a804      	add	r0, sp, #16
    log_csv.csv_fiels_offset.config_info_offset = log_csv.csv_fiels_offset.trip_info_offset + offset + 1; // +1 for newline
 800a63a:	50ab      	str	r3, [r5, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800a63c:	f00a ffda 	bl	80155f4 <f_puts>
}
 800a640:	b044      	add	sp, #272	@ 0x110
 800a642:	bd70      	pop	{r4, r5, r6, pc}
 800a644:	20000058 	.word	0x20000058
 800a648:	0801e589 	.word	0x0801e589
 800a64c:	0801e5d9 	.word	0x0801e5d9
 800a650:	0801e5cc 	.word	0x0801e5cc
 800a654:	0801e5e1 	.word	0x0801e5e1
 800a658:	0801e52f 	.word	0x0801e52f
 800a65c:	20002c84 	.word	0x20002c84

0800a660 <seconds_to_hms_string.part.0>:
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800a660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a662:	000d      	movs	r5, r1
    uint32_t hours = total_secs / 3600;
 800a664:	21e1      	movs	r1, #225	@ 0xe1
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800a666:	b085      	sub	sp, #20
    uint32_t hours = total_secs / 3600;
 800a668:	0109      	lsls	r1, r1, #4
void seconds_to_hms_string(uint32_t total_secs, char *buffer, size_t buffer_size)
 800a66a:	0016      	movs	r6, r2
 800a66c:	0004      	movs	r4, r0
    uint32_t hours = total_secs / 3600;
 800a66e:	f7f5 fd7b 	bl	8000168 <__udivsi3>
    uint32_t seconds = total_secs % 60;
 800a672:	213c      	movs	r1, #60	@ 0x3c
    uint32_t hours = total_secs / 3600;
 800a674:	9003      	str	r0, [sp, #12]
    uint32_t seconds = total_secs % 60;
 800a676:	0020      	movs	r0, r4
 800a678:	f7f5 fdfc 	bl	8000274 <__aeabi_uidivmod>
    snprintf(buffer, buffer_size, "%02luH %02luM %02luS", hours, minutes, seconds);
 800a67c:	9101      	str	r1, [sp, #4]
    uint32_t minutes = (total_secs % 3600) / 60;
 800a67e:	21e1      	movs	r1, #225	@ 0xe1
 800a680:	0020      	movs	r0, r4
 800a682:	0109      	lsls	r1, r1, #4
 800a684:	f7f5 fdf6 	bl	8000274 <__aeabi_uidivmod>
 800a688:	0008      	movs	r0, r1
 800a68a:	213c      	movs	r1, #60	@ 0x3c
 800a68c:	f7f5 fd6c 	bl	8000168 <__udivsi3>
    snprintf(buffer, buffer_size, "%02luH %02luM %02luS", hours, minutes, seconds);
 800a690:	4f04      	ldr	r7, [pc, #16]	@ (800a6a4 <seconds_to_hms_string.part.0+0x44>)
 800a692:	9000      	str	r0, [sp, #0]
 800a694:	003a      	movs	r2, r7
 800a696:	0031      	movs	r1, r6
 800a698:	0028      	movs	r0, r5
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	f00f fb86 	bl	8019dac <sniprintf>
}
 800a6a0:	b005      	add	sp, #20
 800a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a4:	0801e5ed 	.word	0x0801e5ed

0800a6a8 <csv_conf_info>:

static void csv_conf_info(const DeviceSettings *dev_setting) {
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800a6a8:	0003      	movs	r3, r0
static void csv_conf_info(const DeviceSettings *dev_setting) {
 800a6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800a6ac:	337f      	adds	r3, #127	@ 0x7f
 800a6ae:	781a      	ldrb	r2, [r3, #0]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	4c62      	ldr	r4, [pc, #392]	@ (800a840 <csv_conf_info+0x198>)
 800a6b6:	021b      	lsls	r3, r3, #8
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	0002      	movs	r2, r0
 800a6bc:	3281      	adds	r2, #129	@ 0x81
 800a6be:	7812      	ldrb	r2, [r2, #0]
static void csv_conf_info(const DeviceSettings *dev_setting) {
 800a6c0:	b0d1      	sub	sp, #324	@ 0x144
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800a6c2:	0412      	lsls	r2, r2, #16
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	0003      	movs	r3, r0
 800a6c8:	3382      	adds	r3, #130	@ 0x82
 800a6ca:	781b      	ldrb	r3, [r3, #0]
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800a6cc:	0007      	movs	r7, r0
	log_csv.config_info.temp_interval_sec = dev_setting->temp_interval;
 800a6ce:	061b      	lsls	r3, r3, #24
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	61e3      	str	r3, [r4, #28]
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800a6d4:	0003      	movs	r3, r0
 800a6d6:	377b      	adds	r7, #123	@ 0x7b
 800a6d8:	337c      	adds	r3, #124	@ 0x7c
 800a6da:	783a      	ldrb	r2, [r7, #0]
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	781b      	ldrb	r3, [r3, #0]
                       "************************************************\n");
    char tmp[16];

    seconds_to_hms_string(log_csv.config_info.temp_interval_sec, tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a6e0:	250f      	movs	r5, #15
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800a6e2:	021b      	lsls	r3, r3, #8
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	0002      	movs	r2, r0
 800a6e8:	327d      	adds	r2, #125	@ 0x7d
 800a6ea:	9206      	str	r2, [sp, #24]
 800a6ec:	7812      	ldrb	r2, [r2, #0]
    char tmp_buff[256] = {0};
 800a6ee:	2100      	movs	r1, #0
	log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800a6f0:	0412      	lsls	r2, r2, #16
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	0003      	movs	r3, r0
 800a6f6:	337e      	adds	r3, #126	@ 0x7e
 800a6f8:	9307      	str	r3, [sp, #28]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	061b      	lsls	r3, r3, #24
 800a6fe:	4313      	orrs	r3, r2
 800a700:	6223      	str	r3, [r4, #32]
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800a702:	0003      	movs	r3, r0
 800a704:	336e      	adds	r3, #110	@ 0x6e
 800a706:	9308      	str	r3, [sp, #32]
 800a708:	781a      	ldrb	r2, [r3, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	021b      	lsls	r3, r3, #8
 800a712:	4313      	orrs	r3, r2
 800a714:	0002      	movs	r2, r0
 800a716:	3270      	adds	r2, #112	@ 0x70
 800a718:	920a      	str	r2, [sp, #40]	@ 0x28
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	3071      	adds	r0, #113	@ 0x71
 800a71e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a720:	0412      	lsls	r2, r2, #16
 800a722:	431a      	orrs	r2, r3
 800a724:	7803      	ldrb	r3, [r0, #0]
    char tmp_buff[256] = {0};
 800a726:	a810      	add	r0, sp, #64	@ 0x40
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800a728:	061b      	lsls	r3, r3, #24
 800a72a:	4313      	orrs	r3, r2
    char tmp_buff[256] = {0};
 800a72c:	2280      	movs	r2, #128	@ 0x80
	log_csv.config_info.start_delay_sec = dev_setting->start_delay;
 800a72e:	62e3      	str	r3, [r4, #44]	@ 0x2c
	log_csv.config_info.start_mode = "Manual";
 800a730:	4b44      	ldr	r3, [pc, #272]	@ (800a844 <csv_conf_info+0x19c>)
    char tmp_buff[256] = {0};
 800a732:	0052      	lsls	r2, r2, #1
	log_csv.config_info.start_mode = "Manual";
 800a734:	6263      	str	r3, [r4, #36]	@ 0x24
	log_csv.config_info.stop_mode = "Manual & Software";
 800a736:	4b44      	ldr	r3, [pc, #272]	@ (800a848 <csv_conf_info+0x1a0>)
 800a738:	62a3      	str	r3, [r4, #40]	@ 0x28
    char tmp_buff[256] = {0};
 800a73a:	f00f fc89 	bl	801a050 <memset>
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a73e:	4943      	ldr	r1, [pc, #268]	@ (800a84c <csv_conf_info+0x1a4>)
 800a740:	a810      	add	r0, sp, #64	@ 0x40
 800a742:	f00f fd3c 	bl	801a1be <strcpy>
    if (buffer == NULL || buffer_size == 0) {
 800a746:	69e0      	ldr	r0, [r4, #28]
 800a748:	a90c      	add	r1, sp, #48	@ 0x30
 800a74a:	2210      	movs	r2, #16
 800a74c:	f7ff ff88 	bl	800a660 <seconds_to_hms_string.part.0>
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a750:	ab0c      	add	r3, sp, #48	@ 0x30
 800a752:	4e3f      	ldr	r6, [pc, #252]	@ (800a850 <csv_conf_info+0x1a8>)
 800a754:	9302      	str	r3, [sp, #8]
 800a756:	4b3f      	ldr	r3, [pc, #252]	@ (800a854 <csv_conf_info+0x1ac>)
 800a758:	0032      	movs	r2, r6
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	21b4      	movs	r1, #180	@ 0xb4
 800a75e:	002b      	movs	r3, r5
 800a760:	9501      	str	r5, [sp, #4]
 800a762:	a823      	add	r0, sp, #140	@ 0x8c
 800a764:	f00f fb22 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n", label_width, "Temp Log Interval",
                       label_width , tmp);

    log_csv.config_info.rad_interval_sec = dev_setting->rad_interval;
 800a768:	9a05      	ldr	r2, [sp, #20]
 800a76a:	783b      	ldrb	r3, [r7, #0]
 800a76c:	7812      	ldrb	r2, [r2, #0]
 800a76e:	a90c      	add	r1, sp, #48	@ 0x30
 800a770:	0212      	lsls	r2, r2, #8
 800a772:	431a      	orrs	r2, r3
 800a774:	9b06      	ldr	r3, [sp, #24]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	041b      	lsls	r3, r3, #16
 800a77a:	4313      	orrs	r3, r2
 800a77c:	9a07      	ldr	r2, [sp, #28]
 800a77e:	7810      	ldrb	r0, [r2, #0]
 800a780:	2210      	movs	r2, #16
 800a782:	0600      	lsls	r0, r0, #24
 800a784:	4318      	orrs	r0, r3
 800a786:	6220      	str	r0, [r4, #32]
    if (buffer == NULL || buffer_size == 0) {
 800a788:	f7ff ff6a 	bl	800a660 <seconds_to_hms_string.part.0>
    seconds_to_hms_string(log_csv.config_info.rad_interval_sec, tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a78c:	208f      	movs	r0, #143	@ 0x8f
 800a78e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a790:	9302      	str	r3, [sp, #8]
 800a792:	4b31      	ldr	r3, [pc, #196]	@ (800a858 <csv_conf_info+0x1b0>)
 800a794:	0032      	movs	r2, r6
 800a796:	ae08      	add	r6, sp, #32
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	2191      	movs	r1, #145	@ 0x91
 800a79c:	002b      	movs	r3, r5
 800a79e:	9501      	str	r5, [sp, #4]
 800a7a0:	1980      	adds	r0, r0, r6
 800a7a2:	f00f fb03 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n", label_width, "Rad Log Interval",
                       label_width , tmp);


    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800a7a6:	20b1      	movs	r0, #177	@ 0xb1
 800a7a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a7aa:	4f2c      	ldr	r7, [pc, #176]	@ (800a85c <csv_conf_info+0x1b4>)
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	4b2c      	ldr	r3, [pc, #176]	@ (800a860 <csv_conf_info+0x1b8>)
 800a7b0:	003a      	movs	r2, r7
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	216f      	movs	r1, #111	@ 0x6f
 800a7b6:	002b      	movs	r3, r5
 800a7b8:	1980      	adds	r0, r0, r6
 800a7ba:	f00f faf7 	bl	8019dac <sniprintf>
                       "%-*s: %-20s\n", label_width, "Start Mode",
                       log_csv.config_info.start_mode);

    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800a7be:	2380      	movs	r3, #128	@ 0x80
    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800a7c0:	3091      	adds	r0, #145	@ 0x91
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	1a19      	subs	r1, r3, r0
 800a7c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a7c8:	aa10      	add	r2, sp, #64	@ 0x40
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	4b25      	ldr	r3, [pc, #148]	@ (800a864 <csv_conf_info+0x1bc>)
    offset += snprintf(tmp_buff + offset, buffer_size - offset, // 추가
 800a7ce:	0006      	movs	r6, r0
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	1810      	adds	r0, r2, r0
 800a7d4:	002b      	movs	r3, r5
 800a7d6:	003a      	movs	r2, r7
 800a7d8:	f00f fae8 	bl	8019dac <sniprintf>
                       "%-*s: %-20s\n", label_width, "Stop Mode",
                       log_csv.config_info.stop_mode);

    log_csv.config_info.start_delay_sec = (unsigned long)(dev_setting ->start_delay);
 800a7dc:	9a08      	ldr	r2, [sp, #32]
 800a7de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7e0:	7813      	ldrb	r3, [r2, #0]
 800a7e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    offset += snprintf(tmp_buff + offset, buffer_size - offset,  // 추가
 800a7e4:	1836      	adds	r6, r6, r0
    log_csv.config_info.start_delay_sec = (unsigned long)(dev_setting ->start_delay);
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	0212      	lsls	r2, r2, #8
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	780b      	ldrb	r3, [r1, #0]
 800a7ee:	a90c      	add	r1, sp, #48	@ 0x30
 800a7f0:	041b      	lsls	r3, r3, #16
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a7f6:	7810      	ldrb	r0, [r2, #0]
 800a7f8:	2210      	movs	r2, #16
 800a7fa:	0600      	lsls	r0, r0, #24
 800a7fc:	4318      	orrs	r0, r3
 800a7fe:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (buffer == NULL || buffer_size == 0) {
 800a800:	f7ff ff2e 	bl	800a660 <seconds_to_hms_string.part.0>
    seconds_to_hms_string(log_csv.config_info.start_delay_sec,
                           tmp, sizeof(tmp));

    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a804:	2380      	movs	r3, #128	@ 0x80
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	1b99      	subs	r1, r3, r6
 800a80a:	ab10      	add	r3, sp, #64	@ 0x40
 800a80c:	1998      	adds	r0, r3, r6
 800a80e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	4b15      	ldr	r3, [pc, #84]	@ (800a868 <csv_conf_info+0x1c0>)
 800a814:	4a15      	ldr	r2, [pc, #84]	@ (800a86c <csv_conf_info+0x1c4>)
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	9501      	str	r5, [sp, #4]
 800a81a:	002b      	movs	r3, r5
 800a81c:	f00f fac6 	bl	8019dac <sniprintf>
                       "%-*s: %-*s\n\n", label_width, "Start Delay",
                       label_width, tmp);

    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800a820:	23c6      	movs	r3, #198	@ 0xc6
 800a822:	22c8      	movs	r2, #200	@ 0xc8
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	58e3      	ldr	r3, [r4, r3]
    offset += snprintf(tmp_buff + offset, buffer_size - offset,
 800a828:	1836      	adds	r6, r6, r0
    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800a82a:	3301      	adds	r3, #1
 800a82c:	199b      	adds	r3, r3, r6
 800a82e:	0052      	lsls	r2, r2, #1
    fatfs_write_str(&csv_file, tmp_buff);
 800a830:	490f      	ldr	r1, [pc, #60]	@ (800a870 <csv_conf_info+0x1c8>)
 800a832:	a810      	add	r0, sp, #64	@ 0x40
    log_csv.csv_fiels_offset.alarm_summary_offset = log_csv.csv_fiels_offset.config_info_offset + offset + 1; // +1 for newline
 800a834:	50a3      	str	r3, [r4, r2]
    fatfs_write_str(&csv_file, tmp_buff);
 800a836:	f00a fedd 	bl	80155f4 <f_puts>
}
 800a83a:	b051      	add	sp, #324	@ 0x144
 800a83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a83e:	46c0      	nop			@ (mov r8, r8)
 800a840:	20000058 	.word	0x20000058
 800a844:	0801e602 	.word	0x0801e602
 800a848:	0801e609 	.word	0x0801e609
 800a84c:	0801e61b 	.word	0x0801e61b
 800a850:	0801e52f 	.word	0x0801e52f
 800a854:	0801e668 	.word	0x0801e668
 800a858:	0801e67a 	.word	0x0801e67a
 800a85c:	0801e68b 	.word	0x0801e68b
 800a860:	0801e698 	.word	0x0801e698
 800a864:	0801e6a3 	.word	0x0801e6a3
 800a868:	0801e53b 	.word	0x0801e53b
 800a86c:	0801e56e 	.word	0x0801e56e
 800a870:	20002c84 	.word	0x20002c84

0800a874 <seconds_to_dhms_string_long.part.0>:
void seconds_to_dhms_string_long(uint32_t total_seconds, char *buffer, size_t buffer_size)
 800a874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a876:	000d      	movs	r5, r1
 800a878:	b087      	sub	sp, #28
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800a87a:	4914      	ldr	r1, [pc, #80]	@ (800a8cc <seconds_to_dhms_string_long.part.0+0x58>)
void seconds_to_dhms_string_long(uint32_t total_seconds, char *buffer, size_t buffer_size)
 800a87c:	0016      	movs	r6, r2
 800a87e:	0004      	movs	r4, r0
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800a880:	f7f5 fc72 	bl	8000168 <__udivsi3>
    unsigned int seconds = total_seconds % 60;                 // 남은 초
 800a884:	213c      	movs	r1, #60	@ 0x3c
    unsigned int days    = total_seconds / 86400;              // 86400초 = 1일
 800a886:	9005      	str	r0, [sp, #20]
    unsigned int seconds = total_seconds % 60;                 // 남은 초
 800a888:	0020      	movs	r0, r4
 800a88a:	f7f5 fcf3 	bl	8000274 <__aeabi_uidivmod>
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800a88e:	9102      	str	r1, [sp, #8]
    unsigned int minutes = (total_seconds % 3600) / 60;        // 나머지에서 분 추출
 800a890:	21e1      	movs	r1, #225	@ 0xe1
 800a892:	0020      	movs	r0, r4
 800a894:	0109      	lsls	r1, r1, #4
 800a896:	f7f5 fced 	bl	8000274 <__aeabi_uidivmod>
 800a89a:	0008      	movs	r0, r1
 800a89c:	213c      	movs	r1, #60	@ 0x3c
 800a89e:	f7f5 fc63 	bl	8000168 <__udivsi3>
    unsigned int hours   = (total_seconds % 86400) / 3600;     // 나머지에서 시간 추출
 800a8a2:	490a      	ldr	r1, [pc, #40]	@ (800a8cc <seconds_to_dhms_string_long.part.0+0x58>)
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800a8a4:	9001      	str	r0, [sp, #4]
    unsigned int hours   = (total_seconds % 86400) / 3600;     // 나머지에서 시간 추출
 800a8a6:	0020      	movs	r0, r4
 800a8a8:	f7f5 fce4 	bl	8000274 <__aeabi_uidivmod>
 800a8ac:	0008      	movs	r0, r1
 800a8ae:	21e1      	movs	r1, #225	@ 0xe1
 800a8b0:	0109      	lsls	r1, r1, #4
 800a8b2:	f7f5 fc59 	bl	8000168 <__udivsi3>
    snprintf(buffer, buffer_size, "%02uD %02uH %02uM %02uS", days, hours, minutes, seconds);
 800a8b6:	4f06      	ldr	r7, [pc, #24]	@ (800a8d0 <seconds_to_dhms_string_long.part.0+0x5c>)
 800a8b8:	9000      	str	r0, [sp, #0]
 800a8ba:	003a      	movs	r2, r7
 800a8bc:	0031      	movs	r1, r6
 800a8be:	0028      	movs	r0, r5
 800a8c0:	9b05      	ldr	r3, [sp, #20]
 800a8c2:	f00f fa73 	bl	8019dac <sniprintf>
}
 800a8c6:	b007      	add	sp, #28
 800a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ca:	46c0      	nop			@ (mov r8, r8)
 800a8cc:	00015180 	.word	0x00015180
 800a8d0:	0801e6ad 	.word	0x0801e6ad

0800a8d4 <csv_alarm_summary_fill>:
}


static void csv_alarm_summary_fill(const DeviceSettings *dev_setting)
{
    char tmp_buff[768] = {0};
 800a8d4:	22c0      	movs	r2, #192	@ 0xc0
{
 800a8d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d8:	4c8f      	ldr	r4, [pc, #572]	@ (800ab18 <csv_alarm_summary_fill+0x244>)
    char tmp_buff[768] = {0};
 800a8da:	2100      	movs	r1, #0
{
 800a8dc:	44a5      	add	sp, r4
    char tmp_buff[768] = {0};
 800a8de:	0092      	lsls	r2, r2, #2
{
 800a8e0:	0005      	movs	r5, r0
    char tmp_buff[768] = {0};
 800a8e2:	a81a      	add	r0, sp, #104	@ 0x68
 800a8e4:	f00f fbb4 	bl	801a050 <memset>
    int offset = 0;
    const int fixed_block_size = sizeof(tmp_buff);

    printf("[CSV][AlarmFill] 알람 요약 데이터 채우기 시작\r\n");
 800a8e8:	488c      	ldr	r0, [pc, #560]	@ (800ab1c <csv_alarm_summary_fill+0x248>)
 800a8ea:	f00f fa55 	bl	8019d98 <puts>

    // ★ 더 이상 zones[].threshold 에 /10.0f 로 저장하지 않습니다. (표시는 지역변수로 처리)

    // ── 본문(각 Zone 라인)만 tmp_buff에 누적 ──
    for (int i = 0; i < 6; i++) {
 800a8ee:	4b8c      	ldr	r3, [pc, #560]	@ (800ab20 <csv_alarm_summary_fill+0x24c>)
 800a8f0:	9307      	str	r3, [sp, #28]
 800a8f2:	2300      	movs	r3, #0
    int offset = 0;
 800a8f4:	001e      	movs	r6, r3
    for (int i = 0; i < 6; i++) {
 800a8f6:	9306      	str	r3, [sp, #24]
        char s_delay[32], s_tot[32];
        uint32_t delay_sec = 0;
        uint32_t violations = 0;

        switch (i) {
 800a8f8:	9b06      	ldr	r3, [sp, #24]
            case 0: delay_sec = dev_setting->alarm_delay_rh1; violations = log_csv.logging_summary.RH1_alarm_count; break;
 800a8fa:	002a      	movs	r2, r5
        switch (i) {
 800a8fc:	1e58      	subs	r0, r3, #1
 800a8fe:	4b89      	ldr	r3, [pc, #548]	@ (800ab24 <csv_alarm_summary_fill+0x250>)
 800a900:	2804      	cmp	r0, #4
 800a902:	d804      	bhi.n	800a90e <csv_alarm_summary_fill+0x3a>
 800a904:	f7f5 fc12 	bl	800012c <__gnu_thumb1_case_uqi>
 800a908:	988f867d 	.word	0x988f867d
 800a90c:	a1          	.byte	0xa1
 800a90d:	00          	.byte	0x00
            case 0: delay_sec = dev_setting->alarm_delay_rh1; violations = log_csv.logging_summary.RH1_alarm_count; break;
 800a90e:	0029      	movs	r1, r5
 800a910:	3185      	adds	r1, #133	@ 0x85
 800a912:	780c      	ldrb	r4, [r1, #0]
 800a914:	3284      	adds	r2, #132	@ 0x84
 800a916:	7812      	ldrb	r2, [r2, #0]
 800a918:	0224      	lsls	r4, r4, #8
 800a91a:	4314      	orrs	r4, r2
 800a91c:	22b8      	movs	r2, #184	@ 0xb8
            case 1: delay_sec = dev_setting->alarm_delay_rh2; violations = log_csv.logging_summary.RH2_alarm_count; break;
            case 2: delay_sec = dev_setting->alarm_delay_th1; violations = log_csv.logging_summary.TH1_alarm_count; break;
            case 3: delay_sec = dev_setting->alarm_delay_th2; violations = log_csv.logging_summary.TH2_alarm_count; break;
            case 4: delay_sec = dev_setting->alarm_delay_tl1; violations = log_csv.logging_summary.TL1_alarm_count; break;
            case 5: delay_sec = dev_setting->alarm_delay_tl2; violations = log_csv.logging_summary.TL2_alarm_count; break;
 800a91e:	0052      	lsls	r2, r2, #1
 800a920:	5a9f      	ldrh	r7, [r3, r2]
    if (buffer == NULL || buffer_size == 0) {
 800a922:	0020      	movs	r0, r4
 800a924:	2220      	movs	r2, #32
 800a926:	a90a      	add	r1, sp, #40	@ 0x28
 800a928:	f7ff ffa4 	bl	800a874 <seconds_to_dhms_string_long.part.0>
        }

        seconds_to_dhms_string_long(delay_sec, s_delay, sizeof(s_delay));

        // 예시 계산(실제 위반 누적 시간을 따로 관리한다면 그 값을 쓰세요)
        uint32_t tot_violation_sec = 0;
 800a92c:	2200      	movs	r2, #0
        if (log_csv.logging_summary.elapsed_time_sec > delay_sec) {
 800a92e:	4b7e      	ldr	r3, [pc, #504]	@ (800ab28 <csv_alarm_summary_fill+0x254>)
        uint32_t tot_violation_sec = 0;
 800a930:	9208      	str	r2, [sp, #32]
        if (log_csv.logging_summary.elapsed_time_sec > delay_sec) {
 800a932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a934:	42a3      	cmp	r3, r4
 800a936:	d901      	bls.n	800a93c <csv_alarm_summary_fill+0x68>
            tot_violation_sec = log_csv.logging_summary.elapsed_time_sec - delay_sec;
 800a938:	1b1b      	subs	r3, r3, r4
 800a93a:	9308      	str	r3, [sp, #32]
    if (buffer == NULL || buffer_size == 0) {
 800a93c:	2220      	movs	r2, #32
 800a93e:	9808      	ldr	r0, [sp, #32]
 800a940:	a912      	add	r1, sp, #72	@ 0x48
 800a942:	f7ff ff97 	bl	800a874 <seconds_to_dhms_string_long.part.0>
        }
        seconds_to_dhms_string_long(tot_violation_sec, s_tot, sizeof(s_tot));

        const char *status = (violations >= 1) ? "ALARM" : "OK";
 800a946:	4b79      	ldr	r3, [pc, #484]	@ (800ab2c <csv_alarm_summary_fill+0x258>)
 800a948:	9309      	str	r3, [sp, #36]	@ 0x24
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	d001      	beq.n	800a952 <csv_alarm_summary_fill+0x7e>
 800a94e:	4b78      	ldr	r3, [pc, #480]	@ (800ab30 <csv_alarm_summary_fill+0x25c>)
 800a950:	9309      	str	r3, [sp, #36]	@ 0x24
        log_csv.alarm_summary.zones[i].status = (violations >= 1) ? ALARM_STATUS_ALARM : ALARM_STATUS_OK;
 800a952:	003b      	movs	r3, r7
 800a954:	1e5a      	subs	r2, r3, #1
 800a956:	4193      	sbcs	r3, r2
 800a958:	9a07      	ldr	r2, [sp, #28]
 800a95a:	7513      	strb	r3, [r2, #20]
        log_csv.alarm_summary.zones[i].alarm_delay_sec = delay_sec;
 800a95c:	0013      	movs	r3, r2
 800a95e:	6014      	str	r4, [r2, #0]
        log_csv.alarm_summary.zones[i].total_time_in_violation_minutes = tot_violation_sec; // 이름과 달리 sec일 수 있음
 800a960:	001c      	movs	r4, r3
 800a962:	9a08      	ldr	r2, [sp, #32]
        log_csv.alarm_summary.zones[i].violation_count = violations;
 800a964:	611f      	str	r7, [r3, #16]
        log_csv.alarm_summary.zones[i].total_time_in_violation_minutes = tot_violation_sec; // 이름과 달리 sec일 수 있음
 800a966:	60da      	str	r2, [r3, #12]

        // ★ 표시용 threshold 계산 & 올바른 포맷으로 출력
        if (i < 2) {
 800a968:	9b06      	ldr	r3, [sp, #24]
 800a96a:	3c14      	subs	r4, #20
 800a96c:	9408      	str	r4, [sp, #32]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	dd00      	ble.n	800a974 <csv_alarm_summary_fill+0xa0>
 800a972:	e083      	b.n	800aa7c <csv_alarm_summary_fill+0x1a8>
            // RH1/RH2: 원시단위가 0.01이므로 /10 해서 정수 표시 (예: 200000 → 20000)
            unsigned rh_disp = (i == 0) ? (unsigned)(dev_setting->alarm_rh1 / 10U)
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800a974:	2b00      	cmp	r3, #0
 800a976:	d000      	beq.n	800a97a <csv_alarm_summary_fill+0xa6>
 800a978:	e070      	b.n	800aa5c <csv_alarm_summary_fill+0x188>
            unsigned rh_disp = (i == 0) ? (unsigned)(dev_setting->alarm_rh1 / 10U)
 800a97a:	002a      	movs	r2, r5
 800a97c:	002b      	movs	r3, r5
 800a97e:	329c      	adds	r2, #156	@ 0x9c
 800a980:	7812      	ldrb	r2, [r2, #0]
 800a982:	339b      	adds	r3, #155	@ 0x9b
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	0212      	lsls	r2, r2, #8
 800a988:	431a      	orrs	r2, r3
 800a98a:	002b      	movs	r3, r5
 800a98c:	339d      	adds	r3, #157	@ 0x9d
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	041b      	lsls	r3, r3, #16
 800a992:	4313      	orrs	r3, r2
 800a994:	002a      	movs	r2, r5
 800a996:	329e      	adds	r2, #158	@ 0x9e
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800a998:	7810      	ldrb	r0, [r2, #0]
 800a99a:	210a      	movs	r1, #10
 800a99c:	0600      	lsls	r0, r0, #24
 800a99e:	4318      	orrs	r0, r3
 800a9a0:	f7f5 fbe2 	bl	8000168 <__udivsi3>
 800a9a4:	0003      	movs	r3, r0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800a9a6:	4a63      	ldr	r2, [pc, #396]	@ (800ab34 <csv_alarm_summary_fill+0x260>)
            // TH/TL: 원시단위가 0.1이므로 /10 해서 부호 있는 정수 표시 (예: -600 → -60)
            int thtl_disp = (i == 2) ? (int)(dev_setting->alarm_th1 / 10)
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
                                       : (int)(dev_setting->alarm_tl2 / 10);
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800a9a8:	21c0      	movs	r1, #192	@ 0xc0
 800a9aa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a9ac:	9703      	str	r7, [sp, #12]
 800a9ae:	af12      	add	r7, sp, #72	@ 0x48
 800a9b0:	9702      	str	r7, [sp, #8]
 800a9b2:	0089      	lsls	r1, r1, #2
 800a9b4:	a81a      	add	r0, sp, #104	@ 0x68
 800a9b6:	af0a      	add	r7, sp, #40	@ 0x28
 800a9b8:	1b89      	subs	r1, r1, r6
 800a9ba:	1980      	adds	r0, r0, r6
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	9404      	str	r4, [sp, #16]
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	9701      	str	r7, [sp, #4]
 800a9c4:	f00f f9f2 	bl	8019dac <sniprintf>
                               log_csv.alarm_summary.zones[i].zone_name,
                               thtl_disp, s_delay, s_tot,
                               (unsigned long)violations, status);
        }

        if (offset >= fixed_block_size) {
 800a9c8:	23c0      	movs	r3, #192	@ 0xc0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800a9ca:	1836      	adds	r6, r6, r0
        if (offset >= fixed_block_size) {
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	429e      	cmp	r6, r3
 800a9d0:	da00      	bge.n	800a9d4 <csv_alarm_summary_fill+0x100>
 800a9d2:	e07e      	b.n	800aad2 <csv_alarm_summary_fill+0x1fe>
            printf("[CSV][AlarmFill][WARN] tmp_buff overflow, truncated\r\n");
            offset = fixed_block_size; // 안전
 800a9d4:	26c0      	movs	r6, #192	@ 0xc0
            printf("[CSV][AlarmFill][WARN] tmp_buff overflow, truncated\r\n");
 800a9d6:	4858      	ldr	r0, [pc, #352]	@ (800ab38 <csv_alarm_summary_fill+0x264>)
 800a9d8:	f00f f9de 	bl	8019d98 <puts>
            offset = fixed_block_size; // 안전
 800a9dc:	00b6      	lsls	r6, r6, #2
            break;
        }
    }

    // ── CSV에 덮어쓰기 ──
    FRESULT fr = f_lseek(&csv_file, log_csv.csv_fiels_offset.alarm_summary_fill_offset);
 800a9de:	24ca      	movs	r4, #202	@ 0xca
 800a9e0:	4d50      	ldr	r5, [pc, #320]	@ (800ab24 <csv_alarm_summary_fill+0x250>)
 800a9e2:	4f56      	ldr	r7, [pc, #344]	@ (800ab3c <csv_alarm_summary_fill+0x268>)
 800a9e4:	0064      	lsls	r4, r4, #1
 800a9e6:	5929      	ldr	r1, [r5, r4]
 800a9e8:	0038      	movs	r0, r7
 800a9ea:	f00a f927 	bl	8014c3c <f_lseek>
 800a9ee:	1e01      	subs	r1, r0, #0
    if (fr != FR_OK) {
 800a9f0:	d100      	bne.n	800a9f4 <csv_alarm_summary_fill+0x120>
 800a9f2:	e079      	b.n	800aae8 <csv_alarm_summary_fill+0x214>
        printf("[CSV][AlarmFill][ERR] f_lseek fail: 0x%02X\r\n", fr);
 800a9f4:	4852      	ldr	r0, [pc, #328]	@ (800ab40 <csv_alarm_summary_fill+0x26c>)
 800a9f6:	f00f f95f 	bl	8019cb8 <iprintf>
               (unsigned)to_write, (unsigned)ALARM_SUMMARY_PAD_BYTES);
    }

    printf("[CSV][AlarmFill] 알람 요약 데이터 채움 완료: %u bytes at offset %lu\r\n",
           (unsigned)to_write, (unsigned long)log_csv.csv_fiels_offset.alarm_summary_fill_offset);
}
 800a9fa:	23db      	movs	r3, #219	@ 0xdb
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	449d      	add	sp, r3
 800aa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            case 1: delay_sec = dev_setting->alarm_delay_rh2; violations = log_csv.logging_summary.RH2_alarm_count; break;
 800aa02:	0029      	movs	r1, r5
 800aa04:	3187      	adds	r1, #135	@ 0x87
 800aa06:	780c      	ldrb	r4, [r1, #0]
 800aa08:	3286      	adds	r2, #134	@ 0x86
 800aa0a:	7812      	ldrb	r2, [r2, #0]
 800aa0c:	0224      	lsls	r4, r4, #8
 800aa0e:	4314      	orrs	r4, r2
 800aa10:	22b9      	movs	r2, #185	@ 0xb9
 800aa12:	e784      	b.n	800a91e <csv_alarm_summary_fill+0x4a>
            case 2: delay_sec = dev_setting->alarm_delay_th1; violations = log_csv.logging_summary.TH1_alarm_count; break;
 800aa14:	0029      	movs	r1, r5
 800aa16:	3189      	adds	r1, #137	@ 0x89
 800aa18:	780c      	ldrb	r4, [r1, #0]
 800aa1a:	3288      	adds	r2, #136	@ 0x88
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	0224      	lsls	r4, r4, #8
 800aa20:	4314      	orrs	r4, r2
 800aa22:	22ba      	movs	r2, #186	@ 0xba
 800aa24:	e77b      	b.n	800a91e <csv_alarm_summary_fill+0x4a>
            case 3: delay_sec = dev_setting->alarm_delay_th2; violations = log_csv.logging_summary.TH2_alarm_count; break;
 800aa26:	0029      	movs	r1, r5
 800aa28:	318b      	adds	r1, #139	@ 0x8b
 800aa2a:	780c      	ldrb	r4, [r1, #0]
 800aa2c:	328a      	adds	r2, #138	@ 0x8a
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	0224      	lsls	r4, r4, #8
 800aa32:	4314      	orrs	r4, r2
 800aa34:	22bb      	movs	r2, #187	@ 0xbb
 800aa36:	e772      	b.n	800a91e <csv_alarm_summary_fill+0x4a>
            case 4: delay_sec = dev_setting->alarm_delay_tl1; violations = log_csv.logging_summary.TL1_alarm_count; break;
 800aa38:	0029      	movs	r1, r5
 800aa3a:	318d      	adds	r1, #141	@ 0x8d
 800aa3c:	780c      	ldrb	r4, [r1, #0]
 800aa3e:	328c      	adds	r2, #140	@ 0x8c
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	0224      	lsls	r4, r4, #8
 800aa44:	4314      	orrs	r4, r2
 800aa46:	22bc      	movs	r2, #188	@ 0xbc
 800aa48:	e769      	b.n	800a91e <csv_alarm_summary_fill+0x4a>
            case 5: delay_sec = dev_setting->alarm_delay_tl2; violations = log_csv.logging_summary.TL2_alarm_count; break;
 800aa4a:	0029      	movs	r1, r5
 800aa4c:	318f      	adds	r1, #143	@ 0x8f
 800aa4e:	780c      	ldrb	r4, [r1, #0]
 800aa50:	328e      	adds	r2, #142	@ 0x8e
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	0224      	lsls	r4, r4, #8
 800aa56:	4314      	orrs	r4, r2
 800aa58:	22bd      	movs	r2, #189	@ 0xbd
 800aa5a:	e760      	b.n	800a91e <csv_alarm_summary_fill+0x4a>
                                        : (unsigned)(dev_setting->alarm_rh2 / 10U);
 800aa5c:	002a      	movs	r2, r5
 800aa5e:	002b      	movs	r3, r5
 800aa60:	32a4      	adds	r2, #164	@ 0xa4
 800aa62:	7812      	ldrb	r2, [r2, #0]
 800aa64:	33a3      	adds	r3, #163	@ 0xa3
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	0212      	lsls	r2, r2, #8
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	002b      	movs	r3, r5
 800aa6e:	33a5      	adds	r3, #165	@ 0xa5
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	041b      	lsls	r3, r3, #16
 800aa74:	4313      	orrs	r3, r2
 800aa76:	002a      	movs	r2, r5
 800aa78:	32a6      	adds	r2, #166	@ 0xa6
 800aa7a:	e78d      	b.n	800a998 <csv_alarm_summary_fill+0xc4>
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
 800aa7c:	9b06      	ldr	r3, [sp, #24]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d10f      	bne.n	800aaa2 <csv_alarm_summary_fill+0x1ce>
            int thtl_disp = (i == 2) ? (int)(dev_setting->alarm_th1 / 10)
 800aa82:	002b      	movs	r3, r5
 800aa84:	002a      	movs	r2, r5
 800aa86:	339f      	adds	r3, #159	@ 0x9f
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	32a0      	adds	r2, #160	@ 0xa0
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800aa8c:	7810      	ldrb	r0, [r2, #0]
 800aa8e:	210a      	movs	r1, #10
 800aa90:	0200      	lsls	r0, r0, #8
 800aa92:	4318      	orrs	r0, r3
 800aa94:	0400      	lsls	r0, r0, #16
 800aa96:	1400      	asrs	r0, r0, #16
 800aa98:	f7f5 fbf0 	bl	800027c <__divsi3>
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800aa9c:	4a29      	ldr	r2, [pc, #164]	@ (800ab44 <csv_alarm_summary_fill+0x270>)
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800aa9e:	b203      	sxth	r3, r0
            offset += snprintf(tmp_buff + offset, fixed_block_size - offset,
 800aaa0:	e782      	b.n	800a9a8 <csv_alarm_summary_fill+0xd4>
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
 800aaa2:	9b06      	ldr	r3, [sp, #24]
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d105      	bne.n	800aab4 <csv_alarm_summary_fill+0x1e0>
                            : (i == 3) ? (int)(dev_setting->alarm_th2 / 10)
 800aaa8:	002b      	movs	r3, r5
 800aaaa:	002a      	movs	r2, r5
 800aaac:	33a7      	adds	r3, #167	@ 0xa7
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	32a8      	adds	r2, #168	@ 0xa8
 800aab2:	e7eb      	b.n	800aa8c <csv_alarm_summary_fill+0x1b8>
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800aab4:	9b06      	ldr	r3, [sp, #24]
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d105      	bne.n	800aac6 <csv_alarm_summary_fill+0x1f2>
                            : (i == 4) ? (int)(dev_setting->alarm_tl1 / 10)
 800aaba:	002b      	movs	r3, r5
 800aabc:	002a      	movs	r2, r5
 800aabe:	33a1      	adds	r3, #161	@ 0xa1
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	32a2      	adds	r2, #162	@ 0xa2
 800aac4:	e7e2      	b.n	800aa8c <csv_alarm_summary_fill+0x1b8>
                                       : (int)(dev_setting->alarm_tl2 / 10);
 800aac6:	002b      	movs	r3, r5
 800aac8:	002a      	movs	r2, r5
 800aaca:	33a9      	adds	r3, #169	@ 0xa9
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	32aa      	adds	r2, #170	@ 0xaa
 800aad0:	e7dc      	b.n	800aa8c <csv_alarm_summary_fill+0x1b8>
    for (int i = 0; i < 6; i++) {
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	3301      	adds	r3, #1
 800aad6:	9306      	str	r3, [sp, #24]
 800aad8:	9b07      	ldr	r3, [sp, #28]
 800aada:	332c      	adds	r3, #44	@ 0x2c
 800aadc:	9307      	str	r3, [sp, #28]
 800aade:	9b06      	ldr	r3, [sp, #24]
 800aae0:	2b06      	cmp	r3, #6
 800aae2:	d000      	beq.n	800aae6 <csv_alarm_summary_fill+0x212>
 800aae4:	e708      	b.n	800a8f8 <csv_alarm_summary_fill+0x24>
 800aae6:	e77a      	b.n	800a9de <csv_alarm_summary_fill+0x10a>
    UINT bw = 0;
 800aae8:	9012      	str	r0, [sp, #72]	@ 0x48
    fr = f_write(&csv_file, tmp_buff, to_write, &bw);
 800aaea:	a91a      	add	r1, sp, #104	@ 0x68
 800aaec:	0032      	movs	r2, r6
 800aaee:	0038      	movs	r0, r7
 800aaf0:	ab12      	add	r3, sp, #72	@ 0x48
 800aaf2:	f009 ff67 	bl	80149c4 <f_write>
 800aaf6:	1e01      	subs	r1, r0, #0
    if (fr != FR_OK || bw != to_write) {
 800aaf8:	d102      	bne.n	800ab00 <csv_alarm_summary_fill+0x22c>
 800aafa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aafc:	42b3      	cmp	r3, r6
 800aafe:	d005      	beq.n	800ab0c <csv_alarm_summary_fill+0x238>
        printf("[CSV][AlarmFill][ERR] f_write fail: 0x%02X, bw=%u/%u\r\n", fr, (unsigned)bw, (unsigned)to_write);
 800ab00:	0033      	movs	r3, r6
 800ab02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab04:	4810      	ldr	r0, [pc, #64]	@ (800ab48 <csv_alarm_summary_fill+0x274>)
 800ab06:	f00f f8d7 	bl	8019cb8 <iprintf>
        return;
 800ab0a:	e776      	b.n	800a9fa <csv_alarm_summary_fill+0x126>
    printf("[CSV][AlarmFill] 알람 요약 데이터 채움 완료: %u bytes at offset %lu\r\n",
 800ab0c:	0031      	movs	r1, r6
 800ab0e:	592a      	ldr	r2, [r5, r4]
 800ab10:	480e      	ldr	r0, [pc, #56]	@ (800ab4c <csv_alarm_summary_fill+0x278>)
 800ab12:	f00f f8d1 	bl	8019cb8 <iprintf>
 800ab16:	e770      	b.n	800a9fa <csv_alarm_summary_fill+0x126>
 800ab18:	fffffc94 	.word	0xfffffc94
 800ab1c:	0801e6ce 	.word	0x0801e6ce
 800ab20:	200000a4 	.word	0x200000a4
 800ab24:	20000058 	.word	0x20000058
 800ab28:	20000154 	.word	0x20000154
 800ab2c:	0801e6cb 	.word	0x0801e6cb
 800ab30:	0801e6c5 	.word	0x0801e6c5
 800ab34:	0801e709 	.word	0x0801e709
 800ab38:	0801e757 	.word	0x0801e757
 800ab3c:	20002c84 	.word	0x20002c84
 800ab40:	0801e78c 	.word	0x0801e78c
 800ab44:	0801e730 	.word	0x0801e730
 800ab48:	0801e7b9 	.word	0x0801e7b9
 800ab4c:	0801e7f0 	.word	0x0801e7f0

0800ab50 <time_to_dmyhms_string.part.0>:
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	0004      	movs	r4, r0
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800ab54:	7863      	ldrb	r3, [r4, #1]
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800ab56:	0008      	movs	r0, r1
 800ab58:	0011      	movs	r1, r2
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800ab5a:	1e5a      	subs	r2, r3, #1
 800ab5c:	4d0a      	ldr	r5, [pc, #40]	@ (800ab88 <time_to_dmyhms_string.part.0+0x38>)
void time_to_dmyhms_string(const file_log_time_t *time, char *buffer, size_t buffer_size)
 800ab5e:	b086      	sub	sp, #24
    const char* month_str = (time->month >= 1 && time->month <= 12) ? months[time->month] : months[0];
 800ab60:	2a0b      	cmp	r2, #11
 800ab62:	d802      	bhi.n	800ab6a <time_to_dmyhms_string.part.0+0x1a>
 800ab64:	4a09      	ldr	r2, [pc, #36]	@ (800ab8c <time_to_dmyhms_string.part.0+0x3c>)
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	589d      	ldr	r5, [r3, r2]
    snprintf(buffer, buffer_size,
 800ab6a:	7966      	ldrb	r6, [r4, #5]
 800ab6c:	78a3      	ldrb	r3, [r4, #2]
 800ab6e:	9604      	str	r6, [sp, #16]
 800ab70:	7926      	ldrb	r6, [r4, #4]
 800ab72:	4a07      	ldr	r2, [pc, #28]	@ (800ab90 <time_to_dmyhms_string.part.0+0x40>)
 800ab74:	9603      	str	r6, [sp, #12]
 800ab76:	78e6      	ldrb	r6, [r4, #3]
 800ab78:	9602      	str	r6, [sp, #8]
 800ab7a:	7824      	ldrb	r4, [r4, #0]
 800ab7c:	9500      	str	r5, [sp, #0]
 800ab7e:	9401      	str	r4, [sp, #4]
 800ab80:	f00f f914 	bl	8019dac <sniprintf>
}
 800ab84:	b006      	add	sp, #24
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	0801e841 	.word	0x0801e841
 800ab8c:	0801fde4 	.word	0x0801fde4
 800ab90:	0801e845 	.word	0x0801e845

0800ab94 <csv_dump_log_entries_with_summary_seek>:
    // Remainder of the function
    log_csv.csv_fiels_offset.marked_events_offset = log_csv.csv_fiels_offset.logging_summary_offset + offset + 1;
    fatfs_write_str(&csv_file, tmp_buff);
}

static void csv_dump_log_entries_with_summary_seek(void) {
 800ab94:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t max_idx = LOG_MAX_SIZE / ENTRY_SIZE;
    double sum_temp = 0.0, sum_dose = 0.0;
    uint32_t valid_count = 0;
    uint32_t valid_rad_count = 0;
    bool rh1_lat = false, rh2_lat = false, th1_lat = false, th2_lat = false, tl1_lat = false, tl2_lat = false;
    log_csv.logging_summary.RH1_alarm_count = 0;
 800ab96:	2500      	movs	r5, #0
static void csv_dump_log_entries_with_summary_seek(void) {
 800ab98:	4ce7      	ldr	r4, [pc, #924]	@ (800af38 <csv_dump_log_entries_with_summary_seek+0x3a4>)
    bool first_found = false;
    char tmp_buff[256];

    extern uint16_t idx_rad;
    extern uint16_t idx_temp;
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800ab9a:	4fe8      	ldr	r7, [pc, #928]	@ (800af3c <csv_dump_log_entries_with_summary_seek+0x3a8>)
static void csv_dump_log_entries_with_summary_seek(void) {
 800ab9c:	44a5      	add	sp, r4
    log_csv.logging_summary.RH1_alarm_count = 0;
 800ab9e:	4ce8      	ldr	r4, [pc, #928]	@ (800af40 <csv_dump_log_entries_with_summary_seek+0x3ac>)
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800aba0:	2300      	movs	r3, #0
 800aba2:	5ef8      	ldrsh	r0, [r7, r3]
    log_csv.logging_summary.RH1_alarm_count = 0;
 800aba4:	6765      	str	r5, [r4, #116]	@ 0x74
    log_csv.logging_summary.TH1_alarm_count = 0;
 800aba6:	67a5      	str	r5, [r4, #120]	@ 0x78
    log_csv.logging_summary.TL1_alarm_count = 0;
 800aba8:	67e5      	str	r5, [r4, #124]	@ 0x7c
    log_csv.logging_summary.highest_temp   = device_config.temp_max / 10.0f;   // ex: 287 → 28.7℃
 800abaa:	f7f6 fdbf 	bl	800172c <__aeabi_i2f>
 800abae:	49e5      	ldr	r1, [pc, #916]	@ (800af44 <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800abb0:	f7f5 fffa 	bl	8000ba8 <__aeabi_fdiv>
 800abb4:	6460      	str	r0, [r4, #68]	@ 0x44
 800abb6:	900a      	str	r0, [sp, #40]	@ 0x28
    log_csv.logging_summary.lowest_temp    = device_config.temp_min / 10.0f;
 800abb8:	2302      	movs	r3, #2
 800abba:	5ef8      	ldrsh	r0, [r7, r3]
 800abbc:	f7f6 fdb6 	bl	800172c <__aeabi_i2f>
 800abc0:	49e0      	ldr	r1, [pc, #896]	@ (800af44 <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800abc2:	f7f5 fff1 	bl	8000ba8 <__aeabi_fdiv>
 800abc6:	1c06      	adds	r6, r0, #0
 800abc8:	64a0      	str	r0, [r4, #72]	@ 0x48
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7f6 fdfe 	bl	80017cc <__aeabi_ui2f>
 800abd0:	49dd      	ldr	r1, [pc, #884]	@ (800af48 <csv_dump_log_entries_with_summary_seek+0x3b4>)
 800abd2:	f7f5 ffe9 	bl	8000ba8 <__aeabi_fdiv>

    // 1. Logging Summary Header 및 자리 확보
    char summary_buff[512] = {0};
 800abd6:	2280      	movs	r2, #128	@ 0x80
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800abd8:	6520      	str	r0, [r4, #80]	@ 0x50
    char summary_buff[512] = {0};
 800abda:	0092      	lsls	r2, r2, #2
 800abdc:	0029      	movs	r1, r5
    log_csv.logging_summary.highest_radiation   = device_config.dose_max / 100.0f;  // ex: 1965 → 19.65uSv/h
 800abde:	1c07      	adds	r7, r0, #0
    char summary_buff[512] = {0};
 800abe0:	a8c8      	add	r0, sp, #800	@ 0x320
 800abe2:	f00f fa35 	bl	801a050 <memset>
    int offset = 0;
    offset += snprintf(summary_buff + offset, sizeof(summary_buff) - offset,
 800abe6:	1c38      	adds	r0, r7, #0
 800abe8:	f7f8 fdd6 	bl	8003798 <__aeabi_f2d>
 800abec:	9004      	str	r0, [sp, #16]
 800abee:	9105      	str	r1, [sp, #20]
 800abf0:	1c30      	adds	r0, r6, #0
 800abf2:	f7f8 fdd1 	bl	8003798 <__aeabi_f2d>
 800abf6:	9002      	str	r0, [sp, #8]
 800abf8:	9103      	str	r1, [sp, #12]
 800abfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abfc:	f7f8 fdcc 	bl	8003798 <__aeabi_f2d>
 800ac00:	9000      	str	r0, [sp, #0]
 800ac02:	9101      	str	r1, [sp, #4]
 800ac04:	2180      	movs	r1, #128	@ 0x80
 800ac06:	4cd1      	ldr	r4, [pc, #836]	@ (800af4c <csv_dump_log_entries_with_summary_seek+0x3b8>)
 800ac08:	0089      	lsls	r1, r1, #2
 800ac0a:	0022      	movs	r2, r4
 800ac0c:	a8c8      	add	r0, sp, #800	@ 0x320
 800ac0e:	f00f f8cd 	bl	8019dac <sniprintf>
        "Highest Radiation Dose:%7.2f\n",
        log_csv.logging_summary.highest_temp,
        log_csv.logging_summary.lowest_temp,
        log_csv.logging_summary.highest_radiation);

    fatfs_write_str(&csv_file, summary_buff);
 800ac12:	4ccf      	ldr	r4, [pc, #828]	@ (800af50 <csv_dump_log_entries_with_summary_seek+0x3bc>)
 800ac14:	a8c8      	add	r0, sp, #800	@ 0x320
 800ac16:	0021      	movs	r1, r4
 800ac18:	f00a fcec 	bl	80155f4 <f_puts>
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800ac1c:	22d0      	movs	r2, #208	@ 0xd0

    char summary_padding[512];
    memset(summary_padding, ' ', sizeof(summary_padding));
 800ac1e:	20a4      	movs	r0, #164	@ 0xa4
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800ac20:	6961      	ldr	r1, [r4, #20]
 800ac22:	4bcc      	ldr	r3, [pc, #816]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800ac24:	0052      	lsls	r2, r2, #1
    memset(summary_padding, ' ', sizeof(summary_padding));
 800ac26:	00c0      	lsls	r0, r0, #3
    log_csv.csv_fiels_offset.logging_summary_avg_offset = f_tell(&csv_file);
 800ac28:	5099      	str	r1, [r3, r2]
    memset(summary_padding, ' ', sizeof(summary_padding));
 800ac2a:	4468      	add	r0, sp
 800ac2c:	2120      	movs	r1, #32
 800ac2e:	3260      	adds	r2, #96	@ 0x60
 800ac30:	f00f fa0e 	bl	801a050 <memset>
    f_write(&csv_file, summary_padding, sizeof(summary_padding), NULL);
 800ac34:	21a4      	movs	r1, #164	@ 0xa4
 800ac36:	2280      	movs	r2, #128	@ 0x80
 800ac38:	00c9      	lsls	r1, r1, #3
 800ac3a:	002b      	movs	r3, r5
 800ac3c:	0020      	movs	r0, r4
 800ac3e:	0092      	lsls	r2, r2, #2
 800ac40:	4469      	add	r1, sp
 800ac42:	f009 febf 	bl	80149c4 <f_write>
    // 2. 로그 헤더
    fatfs_write_str(&csv_file,
 800ac46:	0021      	movs	r1, r4
 800ac48:	48c3      	ldr	r0, [pc, #780]	@ (800af58 <csv_dump_log_entries_with_summary_seek+0x3c4>)
 800ac4a:	f00a fcd3 	bl	80155f4 <f_puts>
    double sum_temp = 0.0, sum_dose = 0.0;
 800ac4e:	2400      	movs	r4, #0
 800ac50:	2300      	movs	r3, #0
    bool first_found = false;
 800ac52:	002e      	movs	r6, r5
    double sum_temp = 0.0, sum_dose = 0.0;
 800ac54:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac56:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac58:	9314      	str	r3, [sp, #80]	@ 0x50
 800ac5a:	9415      	str	r4, [sp, #84]	@ 0x54
    log_entry_t first = {0}, last = {0};
 800ac5c:	950a      	str	r5, [sp, #40]	@ 0x28
 800ac5e:	9516      	str	r5, [sp, #88]	@ 0x58
 800ac60:	951f      	str	r5, [sp, #124]	@ 0x7c
 800ac62:	951e      	str	r5, [sp, #120]	@ 0x78
 800ac64:	951d      	str	r5, [sp, #116]	@ 0x74
 800ac66:	951c      	str	r5, [sp, #112]	@ 0x70
 800ac68:	951b      	str	r5, [sp, #108]	@ 0x6c
    uint32_t valid_rad_count = 0;
 800ac6a:	950e      	str	r5, [sp, #56]	@ 0x38
    log_entry_t first = {0}, last = {0};
 800ac6c:	951a      	str	r5, [sp, #104]	@ 0x68
 800ac6e:	9511      	str	r5, [sp, #68]	@ 0x44
 800ac70:	9510      	str	r5, [sp, #64]	@ 0x40
 800ac72:	950d      	str	r5, [sp, #52]	@ 0x34
 800ac74:	950f      	str	r5, [sp, #60]	@ 0x3c
        "************************************************\n"
        "Index,Date,Time,Temperature,Rad,Mark\n");

    // 3. Flash 순회
    for (uint32_t i = 0; i < max_idx; i++) {
        meas_data_log_read_entry(i, &entry);
 800ac76:	ac2a      	add	r4, sp, #168	@ 0xa8
 800ac78:	0021      	movs	r1, r4
 800ac7a:	0028      	movs	r0, r5
 800ac7c:	f7fd fbd6 	bl	800842c <meas_data_log_read_entry>
        if (entry.year == 0xFF || entry.index == 0xFFFF || entry.month == 0xFF) break;
 800ac80:	78a3      	ldrb	r3, [r4, #2]
 800ac82:	2bff      	cmp	r3, #255	@ 0xff
 800ac84:	d100      	bne.n	800ac88 <csv_dump_log_entries_with_summary_seek+0xf4>
 800ac86:	e2a6      	b.n	800b1d6 <csv_dump_log_entries_with_summary_seek+0x642>
 800ac88:	8822      	ldrh	r2, [r4, #0]
 800ac8a:	4bb4      	ldr	r3, [pc, #720]	@ (800af5c <csv_dump_log_entries_with_summary_seek+0x3c8>)
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d100      	bne.n	800ac92 <csv_dump_log_entries_with_summary_seek+0xfe>
 800ac90:	e2a1      	b.n	800b1d6 <csv_dump_log_entries_with_summary_seek+0x642>
 800ac92:	78e3      	ldrb	r3, [r4, #3]
 800ac94:	2bff      	cmp	r3, #255	@ 0xff
 800ac96:	d100      	bne.n	800ac9a <csv_dump_log_entries_with_summary_seek+0x106>
 800ac98:	e29d      	b.n	800b1d6 <csv_dump_log_entries_with_summary_seek+0x642>

        float temp = entry.temperature / 10.0f;
 800ac9a:	230a      	movs	r3, #10
 800ac9c:	5ee0      	ldrsh	r0, [r4, r3]
 800ac9e:	f7f6 fd45 	bl	800172c <__aeabi_i2f>
 800aca2:	49a8      	ldr	r1, [pc, #672]	@ (800af44 <csv_dump_log_entries_with_summary_seek+0x3b0>)
 800aca4:	f7f5 ff80 	bl	8000ba8 <__aeabi_fdiv>
 800aca8:	9017      	str	r0, [sp, #92]	@ 0x5c
        float dose = entry.dose / 100.0f;
 800acaa:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800acac:	f7f6 fd8e 	bl	80017cc <__aeabi_ui2f>
 800acb0:	49a5      	ldr	r1, [pc, #660]	@ (800af48 <csv_dump_log_entries_with_summary_seek+0x3b4>)
 800acb2:	f7f5 ff79 	bl	8000ba8 <__aeabi_fdiv>
        char rad_str[16];

        // Rad 미측정 구간이면 "n/a"로
        if (entry.rad_measure_mark == 0) {
 800acb6:	7c63      	ldrb	r3, [r4, #17]
        float dose = entry.dose / 100.0f;
 800acb8:	1c07      	adds	r7, r0, #0
        if (entry.rad_measure_mark == 0) {
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d000      	beq.n	800acc0 <csv_dump_log_entries_with_summary_seek+0x12c>
 800acbe:	e25f      	b.n	800b180 <csv_dump_log_entries_with_summary_seek+0x5ec>
            strcpy(rad_str, "n/a");
 800acc0:	49a7      	ldr	r1, [pc, #668]	@ (800af60 <csv_dump_log_entries_with_summary_seek+0x3cc>)
 800acc2:	a878      	add	r0, sp, #480	@ 0x1e0
 800acc4:	f00f fa7b 	bl	801a1be <strcpy>
        } else {
            snprintf(rad_str, sizeof(rad_str), "%.2f", dose);
        }

        if (!first_found) {
            first = entry;
 800acc8:	ab2a      	add	r3, sp, #168	@ 0xa8
 800acca:	79da      	ldrb	r2, [r3, #7]
 800accc:	920a      	str	r2, [sp, #40]	@ 0x28
 800acce:	789a      	ldrb	r2, [r3, #2]
 800acd0:	9216      	str	r2, [sp, #88]	@ 0x58
 800acd2:	78da      	ldrb	r2, [r3, #3]
 800acd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800acd6:	791a      	ldrb	r2, [r3, #4]
 800acd8:	920d      	str	r2, [sp, #52]	@ 0x34
 800acda:	795a      	ldrb	r2, [r3, #5]
 800acdc:	9210      	str	r2, [sp, #64]	@ 0x40
 800acde:	799b      	ldrb	r3, [r3, #6]
 800ace0:	9311      	str	r3, [sp, #68]	@ 0x44
        if (!first_found) {
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d10a      	bne.n	800acfc <csv_dump_log_entries_with_summary_seek+0x168>
            first = entry;
 800ace6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace8:	921d      	str	r2, [sp, #116]	@ 0x74
 800acea:	931f      	str	r3, [sp, #124]	@ 0x7c
 800acec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acee:	931e      	str	r3, [sp, #120]	@ 0x78
 800acf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acf2:	931c      	str	r3, [sp, #112]	@ 0x70
 800acf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acf6:	931b      	str	r3, [sp, #108]	@ 0x6c
 800acf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800acfa:	931a      	str	r3, [sp, #104]	@ 0x68
            first_found = true;
        }
        last = entry;

        sum_temp += temp;
 800acfc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800acfe:	f7f8 fd4b 	bl	8003798 <__aeabi_f2d>
 800ad02:	000b      	movs	r3, r1
 800ad04:	0002      	movs	r2, r0
 800ad06:	9018      	str	r0, [sp, #96]	@ 0x60
 800ad08:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad0a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ad0c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800ad0e:	f7f6 fda3 	bl	8001858 <__aeabi_dadd>
 800ad12:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad14:	9115      	str	r1, [sp, #84]	@ 0x54

        if (entry.rad_measure_mark != 0) {
 800ad16:	ab2a      	add	r3, sp, #168	@ 0xa8
 800ad18:	7c5c      	ldrb	r4, [r3, #17]
 800ad1a:	2c00      	cmp	r4, #0
 800ad1c:	d00d      	beq.n	800ad3a <csv_dump_log_entries_with_summary_seek+0x1a6>
            sum_dose += dose;
 800ad1e:	1c38      	adds	r0, r7, #0
 800ad20:	f7f8 fd3a 	bl	8003798 <__aeabi_f2d>
 800ad24:	000b      	movs	r3, r1
 800ad26:	0002      	movs	r2, r0
 800ad28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ad2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ad2c:	f7f6 fd94 	bl	8001858 <__aeabi_dadd>
            // rad valid count 별도
            valid_rad_count++;
 800ad30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            sum_dose += dose;
 800ad32:	9012      	str	r0, [sp, #72]	@ 0x48
 800ad34:	9113      	str	r1, [sp, #76]	@ 0x4c
            valid_rad_count++;
 800ad36:	3301      	adds	r3, #1
 800ad38:	930e      	str	r3, [sp, #56]	@ 0x38

        }
        valid_count++;
 800ad3a:	1c6b      	adds	r3, r5, #1
 800ad3c:	9317      	str	r3, [sp, #92]	@ 0x5c

        // --- [추가] 루프 내부, sum/CSV 쓰기 전에 ---
        int16_t  t_x10  = (int16_t)entry.temperature;   // 0.1℃ 단위
 800ad3e:	ab2a      	add	r3, sp, #168	@ 0xa8
 800ad40:	220a      	movs	r2, #10
 800ad42:	5e9e      	ldrsh	r6, [r3, r2]
        uint16_t d_x100 = (uint16_t)entry.dose;         // 0.01 단위

        uint32_t interval_sec = current_settings.temp_interval;
 800ad44:	4987      	ldr	r1, [pc, #540]	@ (800af64 <csv_dump_log_entries_with_summary_seek+0x3d0>)
 800ad46:	4b88      	ldr	r3, [pc, #544]	@ (800af68 <csv_dump_log_entries_with_summary_seek+0x3d4>)
 800ad48:	7808      	ldrb	r0, [r1, #0]
 800ad4a:	0019      	movs	r1, r3
 800ad4c:	3180      	adds	r1, #128	@ 0x80
 800ad4e:	7809      	ldrb	r1, [r1, #0]
        uint16_t d_x100 = (uint16_t)entry.dose;         // 0.01 단위
 800ad50:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
        uint32_t interval_sec = current_settings.temp_interval;
 800ad52:	0209      	lsls	r1, r1, #8
 800ad54:	4301      	orrs	r1, r0
 800ad56:	0018      	movs	r0, r3
 800ad58:	3081      	adds	r0, #129	@ 0x81
 800ad5a:	7800      	ldrb	r0, [r0, #0]
 800ad5c:	0400      	lsls	r0, r0, #16
 800ad5e:	4308      	orrs	r0, r1
 800ad60:	0019      	movs	r1, r3
 800ad62:	3182      	adds	r1, #130	@ 0x82
 800ad64:	7809      	ldrb	r1, [r1, #0]
 800ad66:	0609      	lsls	r1, r1, #24
 800ad68:	4301      	orrs	r1, r0
        uint32_t elapsed_sec  = (valid_count > 0) ? (valid_count - 1U) * interval_sec : 0U;
 800ad6a:	4369      	muls	r1, r5

        bool gate_rh1 = (elapsed_sec >= current_settings.alarm_delay_rh1);
        bool gate_rh2 = (elapsed_sec >= current_settings.alarm_delay_rh2);
 800ad6c:	001d      	movs	r5, r3
 800ad6e:	0018      	movs	r0, r3
 800ad70:	3587      	adds	r5, #135	@ 0x87
 800ad72:	782f      	ldrb	r7, [r5, #0]
 800ad74:	3086      	adds	r0, #134	@ 0x86
 800ad76:	7800      	ldrb	r0, [r0, #0]
 800ad78:	023f      	lsls	r7, r7, #8
 800ad7a:	4307      	orrs	r7, r0
        bool gate_th1 = (elapsed_sec >= current_settings.alarm_delay_th1);
 800ad7c:	0018      	movs	r0, r3
 800ad7e:	3088      	adds	r0, #136	@ 0x88
 800ad80:	7805      	ldrb	r5, [r0, #0]
 800ad82:	0018      	movs	r0, r3
 800ad84:	3089      	adds	r0, #137	@ 0x89
 800ad86:	7800      	ldrb	r0, [r0, #0]
 800ad88:	0200      	lsls	r0, r0, #8
 800ad8a:	4328      	orrs	r0, r5
 800ad8c:	9020      	str	r0, [sp, #128]	@ 0x80
        bool gate_th2 = (elapsed_sec >= current_settings.alarm_delay_th2);
 800ad8e:	0018      	movs	r0, r3
 800ad90:	308a      	adds	r0, #138	@ 0x8a
 800ad92:	7805      	ldrb	r5, [r0, #0]
 800ad94:	0018      	movs	r0, r3
 800ad96:	308b      	adds	r0, #139	@ 0x8b
 800ad98:	7800      	ldrb	r0, [r0, #0]
 800ad9a:	0200      	lsls	r0, r0, #8
 800ad9c:	4328      	orrs	r0, r5
 800ad9e:	9021      	str	r0, [sp, #132]	@ 0x84
        bool gate_tl1 = (elapsed_sec >= current_settings.alarm_delay_tl1);
 800ada0:	0018      	movs	r0, r3
 800ada2:	308c      	adds	r0, #140	@ 0x8c
 800ada4:	7805      	ldrb	r5, [r0, #0]
 800ada6:	0018      	movs	r0, r3
 800ada8:	308d      	adds	r0, #141	@ 0x8d
 800adaa:	7800      	ldrb	r0, [r0, #0]
 800adac:	0200      	lsls	r0, r0, #8
 800adae:	4328      	orrs	r0, r5
 800adb0:	9022      	str	r0, [sp, #136]	@ 0x88
        bool gate_tl2 = (elapsed_sec >= current_settings.alarm_delay_tl2);
 800adb2:	0018      	movs	r0, r3
 800adb4:	308e      	adds	r0, #142	@ 0x8e
 800adb6:	7805      	ldrb	r5, [r0, #0]
 800adb8:	0018      	movs	r0, r3
 800adba:	308f      	adds	r0, #143	@ 0x8f
 800adbc:	7800      	ldrb	r0, [r0, #0]
 800adbe:	0200      	lsls	r0, r0, #8
 800adc0:	4328      	orrs	r0, r5
 800adc2:	9023      	str	r0, [sp, #140]	@ 0x8c
        bool gate_rh1 = (elapsed_sec >= current_settings.alarm_delay_rh1);
 800adc4:	0018      	movs	r0, r3
 800adc6:	3084      	adds	r0, #132	@ 0x84
 800adc8:	7805      	ldrb	r5, [r0, #0]
 800adca:	0018      	movs	r0, r3
 800adcc:	3085      	adds	r0, #133	@ 0x85
 800adce:	7800      	ldrb	r0, [r0, #0]
 800add0:	0200      	lsls	r0, r0, #8
 800add2:	4328      	orrs	r0, r5

        // 조건(게이트 적용) — RH는 유효 방사선 구간에서만 판정
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800add4:	4288      	cmp	r0, r1
 800add6:	d900      	bls.n	800adda <csv_dump_log_entries_with_summary_seek+0x246>
 800add8:	e1dd      	b.n	800b196 <csv_dump_log_entries_with_summary_seek+0x602>
 800adda:	0025      	movs	r5, r4
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800addc:	1e20      	subs	r0, r4, #0
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800adde:	d018      	beq.n	800ae12 <csv_dump_log_entries_with_summary_seek+0x27e>
 800ade0:	001c      	movs	r4, r3
 800ade2:	0018      	movs	r0, r3
 800ade4:	349c      	adds	r4, #156	@ 0x9c
 800ade6:	7824      	ldrb	r4, [r4, #0]
 800ade8:	309b      	adds	r0, #155	@ 0x9b
 800adea:	7800      	ldrb	r0, [r0, #0]
 800adec:	0224      	lsls	r4, r4, #8
 800adee:	4304      	orrs	r4, r0
 800adf0:	0018      	movs	r0, r3
 800adf2:	309d      	adds	r0, #157	@ 0x9d
 800adf4:	7800      	ldrb	r0, [r0, #0]
 800adf6:	339e      	adds	r3, #158	@ 0x9e
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	0400      	lsls	r0, r0, #16
 800adfc:	4320      	orrs	r0, r4
 800adfe:	061b      	lsls	r3, r3, #24
 800ae00:	4303      	orrs	r3, r0
 800ae02:	2000      	movs	r0, #0
 800ae04:	0005      	movs	r5, r0
 800ae06:	b294      	uxth	r4, r2
 800ae08:	429c      	cmp	r4, r3
 800ae0a:	4145      	adcs	r5, r0
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800ae0c:	428f      	cmp	r7, r1
 800ae0e:	d800      	bhi.n	800ae12 <csv_dump_log_entries_with_summary_seek+0x27e>
 800ae10:	e1cb      	b.n	800b1aa <csv_dump_log_entries_with_summary_seek+0x616>
        bool th1_cond = gate_th1 && (t_x10 >= current_settings.alarm_th1);
 800ae12:	2300      	movs	r3, #0
 800ae14:	469c      	mov	ip, r3
 800ae16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae18:	428b      	cmp	r3, r1
 800ae1a:	d80c      	bhi.n	800ae36 <csv_dump_log_entries_with_summary_seek+0x2a2>
 800ae1c:	4b53      	ldr	r3, [pc, #332]	@ (800af6c <csv_dump_log_entries_with_summary_seek+0x3d8>)
 800ae1e:	17f4      	asrs	r4, r6, #31
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	4b53      	ldr	r3, [pc, #332]	@ (800af70 <csv_dump_log_entries_with_summary_seek+0x3dc>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	021b      	lsls	r3, r3, #8
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	041b      	lsls	r3, r3, #16
 800ae2c:	141a      	asrs	r2, r3, #16
 800ae2e:	0fdb      	lsrs	r3, r3, #31
 800ae30:	4296      	cmp	r6, r2
 800ae32:	4163      	adcs	r3, r4
 800ae34:	469c      	mov	ip, r3
        bool th2_cond = gate_th2 && (t_x10 >= current_settings.alarm_th2);
 800ae36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae38:	2400      	movs	r4, #0
 800ae3a:	428b      	cmp	r3, r1
 800ae3c:	d80b      	bhi.n	800ae56 <csv_dump_log_entries_with_summary_seek+0x2c2>
 800ae3e:	4a4d      	ldr	r2, [pc, #308]	@ (800af74 <csv_dump_log_entries_with_summary_seek+0x3e0>)
 800ae40:	4b4d      	ldr	r3, [pc, #308]	@ (800af78 <csv_dump_log_entries_with_summary_seek+0x3e4>)
 800ae42:	7814      	ldrb	r4, [r2, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	0224      	lsls	r4, r4, #8
 800ae48:	431c      	orrs	r4, r3
 800ae4a:	0424      	lsls	r4, r4, #16
 800ae4c:	1423      	asrs	r3, r4, #16
 800ae4e:	17f2      	asrs	r2, r6, #31
 800ae50:	0fe4      	lsrs	r4, r4, #31
 800ae52:	429e      	cmp	r6, r3
 800ae54:	4154      	adcs	r4, r2
        bool tl1_cond = gate_tl1 && (t_x10 <= current_settings.alarm_tl1);
 800ae56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ae58:	2200      	movs	r2, #0
 800ae5a:	428b      	cmp	r3, r1
 800ae5c:	d80b      	bhi.n	800ae76 <csv_dump_log_entries_with_summary_seek+0x2e2>
 800ae5e:	4a47      	ldr	r2, [pc, #284]	@ (800af7c <csv_dump_log_entries_with_summary_seek+0x3e8>)
 800ae60:	4b47      	ldr	r3, [pc, #284]	@ (800af80 <csv_dump_log_entries_with_summary_seek+0x3ec>)
 800ae62:	7812      	ldrb	r2, [r2, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	0212      	lsls	r2, r2, #8
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	0412      	lsls	r2, r2, #16
 800ae6c:	1413      	asrs	r3, r2, #16
 800ae6e:	0ff7      	lsrs	r7, r6, #31
 800ae70:	17d2      	asrs	r2, r2, #31
 800ae72:	42b3      	cmp	r3, r6
 800ae74:	417a      	adcs	r2, r7
        bool tl2_cond = gate_tl2 && (t_x10 <= current_settings.alarm_tl2);
 800ae76:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800ae78:	2300      	movs	r3, #0
 800ae7a:	428f      	cmp	r7, r1
 800ae7c:	d80b      	bhi.n	800ae96 <csv_dump_log_entries_with_summary_seek+0x302>
 800ae7e:	4b41      	ldr	r3, [pc, #260]	@ (800af84 <csv_dump_log_entries_with_summary_seek+0x3f0>)
 800ae80:	0ff7      	lsrs	r7, r6, #31
 800ae82:	7819      	ldrb	r1, [r3, #0]
 800ae84:	4b40      	ldr	r3, [pc, #256]	@ (800af88 <csv_dump_log_entries_with_summary_seek+0x3f4>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	021b      	lsls	r3, r3, #8
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	041b      	lsls	r3, r3, #16
 800ae8e:	1419      	asrs	r1, r3, #16
 800ae90:	17db      	asrs	r3, r3, #31
 800ae92:	42b1      	cmp	r1, r6
 800ae94:	417b      	adcs	r3, r7

        // 카운트(현재 방식: 조건 만족 샘플 수 기반)
        if (rh1_cond) log_csv.logging_summary.RH1_alarm_count++;
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	d005      	beq.n	800aea6 <csv_dump_log_entries_with_summary_seek+0x312>
 800ae9a:	26b8      	movs	r6, #184	@ 0xb8
 800ae9c:	492d      	ldr	r1, [pc, #180]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800ae9e:	0076      	lsls	r6, r6, #1
 800aea0:	5b8d      	ldrh	r5, [r1, r6]
 800aea2:	3501      	adds	r5, #1
 800aea4:	538d      	strh	r5, [r1, r6]
        if (rh2_cond) log_csv.logging_summary.RH2_alarm_count++;
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d005      	beq.n	800aeb6 <csv_dump_log_entries_with_summary_seek+0x322>
 800aeaa:	25b9      	movs	r5, #185	@ 0xb9
 800aeac:	4929      	ldr	r1, [pc, #164]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800aeae:	006d      	lsls	r5, r5, #1
 800aeb0:	5b48      	ldrh	r0, [r1, r5]
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	5348      	strh	r0, [r1, r5]
        if (th1_cond) log_csv.logging_summary.TH1_alarm_count++;
 800aeb6:	4661      	mov	r1, ip
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	d005      	beq.n	800aec8 <csv_dump_log_entries_with_summary_seek+0x334>
 800aebc:	25ba      	movs	r5, #186	@ 0xba
 800aebe:	4925      	ldr	r1, [pc, #148]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800aec0:	006d      	lsls	r5, r5, #1
 800aec2:	5b48      	ldrh	r0, [r1, r5]
 800aec4:	3001      	adds	r0, #1
 800aec6:	5348      	strh	r0, [r1, r5]
        if (th2_cond) log_csv.logging_summary.TH2_alarm_count++;
 800aec8:	2c00      	cmp	r4, #0
 800aeca:	d005      	beq.n	800aed8 <csv_dump_log_entries_with_summary_seek+0x344>
 800aecc:	24bb      	movs	r4, #187	@ 0xbb
 800aece:	4921      	ldr	r1, [pc, #132]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800aed0:	0064      	lsls	r4, r4, #1
 800aed2:	5b08      	ldrh	r0, [r1, r4]
 800aed4:	3001      	adds	r0, #1
 800aed6:	5308      	strh	r0, [r1, r4]
        if (tl1_cond) log_csv.logging_summary.TL1_alarm_count++;
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d005      	beq.n	800aee8 <csv_dump_log_entries_with_summary_seek+0x354>
 800aedc:	20bc      	movs	r0, #188	@ 0xbc
 800aede:	4a1d      	ldr	r2, [pc, #116]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800aee0:	0040      	lsls	r0, r0, #1
 800aee2:	5a11      	ldrh	r1, [r2, r0]
 800aee4:	3101      	adds	r1, #1
 800aee6:	5211      	strh	r1, [r2, r0]
        if (tl2_cond) log_csv.logging_summary.TL2_alarm_count++;
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <csv_dump_log_entries_with_summary_seek+0x364>
 800aeec:	21bd      	movs	r1, #189	@ 0xbd
 800aeee:	4b19      	ldr	r3, [pc, #100]	@ (800af54 <csv_dump_log_entries_with_summary_seek+0x3c0>)
 800aef0:	0049      	lsls	r1, r1, #1
 800aef2:	5a5a      	ldrh	r2, [r3, r1]
 800aef4:	3201      	adds	r2, #1
 800aef6:	525a      	strh	r2, [r3, r1]
//
//        if (tl2_cond) { if (!tl2_lat) { log_csv.logging_summary.TL2_alarm_count++; tl2_lat = true; } }
//        else          { tl2_lat = false; }


        snprintf(tmp_buff, sizeof(tmp_buff),
 800aef8:	2050      	movs	r0, #80	@ 0x50
 800aefa:	2240      	movs	r2, #64	@ 0x40
 800aefc:	a91a      	add	r1, sp, #104	@ 0x68
 800aefe:	1809      	adds	r1, r1, r0
 800af00:	7809      	ldrb	r1, [r1, #0]
 800af02:	ab1a      	add	r3, sp, #104	@ 0x68
 800af04:	189b      	adds	r3, r3, r2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	9109      	str	r1, [sp, #36]	@ 0x24
 800af0a:	a978      	add	r1, sp, #480	@ 0x1e0
 800af0c:	9108      	str	r1, [sp, #32]
 800af0e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800af10:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800af12:	9006      	str	r0, [sp, #24]
 800af14:	9107      	str	r1, [sp, #28]
 800af16:	20fa      	movs	r0, #250	@ 0xfa
 800af18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af1a:	00c0      	lsls	r0, r0, #3
 800af1c:	9105      	str	r1, [sp, #20]
 800af1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800af20:	4a1a      	ldr	r2, [pc, #104]	@ (800af8c <csv_dump_log_entries_with_summary_seek+0x3f8>)
 800af22:	9104      	str	r1, [sp, #16]
 800af24:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800af26:	2601      	movs	r6, #1
 800af28:	9103      	str	r1, [sp, #12]
 800af2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800af2c:	9102      	str	r1, [sp, #8]
 800af2e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af30:	9101      	str	r1, [sp, #4]
 800af32:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800af34:	1809      	adds	r1, r1, r0
 800af36:	e02b      	b.n	800af90 <csv_dump_log_entries_with_summary_seek+0x3fc>
 800af38:	fffff8dc 	.word	0xfffff8dc
 800af3c:	20000b50 	.word	0x20000b50
 800af40:	20000154 	.word	0x20000154
 800af44:	41200000 	.word	0x41200000
 800af48:	42c80000 	.word	0x42c80000
 800af4c:	0801e862 	.word	0x0801e862
 800af50:	20002c84 	.word	0x20002c84
 800af54:	20000058 	.word	0x20000058
 800af58:	0801e8fc 	.word	0x0801e8fc
 800af5c:	0000ffff 	.word	0x0000ffff
 800af60:	0801f21b 	.word	0x0801f21b
 800af64:	20002c2b 	.word	0x20002c2b
 800af68:	20002bac 	.word	0x20002bac
 800af6c:	20002c4b 	.word	0x20002c4b
 800af70:	20002c4c 	.word	0x20002c4c
 800af74:	20002c54 	.word	0x20002c54
 800af78:	20002c53 	.word	0x20002c53
 800af7c:	20002c4e 	.word	0x20002c4e
 800af80:	20002c4d 	.word	0x20002c4d
 800af84:	20002c55 	.word	0x20002c55
 800af88:	20002c56 	.word	0x20002c56
 800af8c:	0801e967 	.word	0x0801e967
 800af90:	9100      	str	r1, [sp, #0]
 800af92:	2180      	movs	r1, #128	@ 0x80
 800af94:	a838      	add	r0, sp, #224	@ 0xe0
 800af96:	0049      	lsls	r1, r1, #1
 800af98:	f00e ff08 	bl	8019dac <sniprintf>
            "%u,%04u-%02u-%02u,%02u:%02u:%02u,%.1f,%s,0x%02X\n",
            entry.index,
            2000 + entry.year, entry.month, entry.day,
            entry.hour, entry.minute, entry.second,
            temp, rad_str, entry.mark);
        fatfs_write_str(&csv_file, tmp_buff);
 800af9c:	4995      	ldr	r1, [pc, #596]	@ (800b1f4 <csv_dump_log_entries_with_summary_seek+0x660>)
 800af9e:	a838      	add	r0, sp, #224	@ 0xe0
 800afa0:	f00a fb28 	bl	80155f4 <f_puts>
    for (uint32_t i = 0; i < max_idx; i++) {
 800afa4:	4b94      	ldr	r3, [pc, #592]	@ (800b1f8 <csv_dump_log_entries_with_summary_seek+0x664>)
 800afa6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d000      	beq.n	800afae <csv_dump_log_entries_with_summary_seek+0x41a>
 800afac:	e0e6      	b.n	800b17c <csv_dump_log_entries_with_summary_seek+0x5e8>
 800afae:	0015      	movs	r5, r2
        LOG_APP("[ERROR] No valid entries found!\n");
        return;
    }

    // 4. 평균 계산 및 구조체 반영
    float avg_temp = sum_temp / valid_count;
 800afb0:	0028      	movs	r0, r5
 800afb2:	f7f8 fbcd 	bl	8003750 <__aeabi_ui2d>
 800afb6:	000b      	movs	r3, r1
 800afb8:	0002      	movs	r2, r0
 800afba:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800afbc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800afbe:	f7f7 f811 	bl	8001fe4 <__aeabi_ddiv>
 800afc2:	f7f8 fc31 	bl	8003828 <__aeabi_d2f>
    float avg_dose = (valid_rad_count ? (sum_dose / valid_rad_count) : 0.0f);
 800afc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc8:	2600      	movs	r6, #0
    float avg_temp = sum_temp / valid_count;
 800afca:	9014      	str	r0, [sp, #80]	@ 0x50
    float avg_dose = (valid_rad_count ? (sum_dose / valid_rad_count) : 0.0f);
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <csv_dump_log_entries_with_summary_seek+0x454>
 800afd0:	0018      	movs	r0, r3
 800afd2:	f7f8 fbbd 	bl	8003750 <__aeabi_ui2d>
 800afd6:	0002      	movs	r2, r0
 800afd8:	000b      	movs	r3, r1
 800afda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800afdc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800afde:	f7f7 f801 	bl	8001fe4 <__aeabi_ddiv>
 800afe2:	f7f8 fc21 	bl	8003828 <__aeabi_d2f>
 800afe6:	1c06      	adds	r6, r0, #0
    float mkt = avg_temp;

    log_csv.logging_summary.average_temp = avg_temp;
 800afe8:	4c84      	ldr	r4, [pc, #528]	@ (800b1fc <csv_dump_log_entries_with_summary_seek+0x668>)
 800afea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afec:	4a84      	ldr	r2, [pc, #528]	@ (800b200 <csv_dump_log_entries_with_summary_seek+0x66c>)
 800afee:	64e3      	str	r3, [r4, #76]	@ 0x4c
    log_csv.logging_summary.average_radiation = avg_dose;
    log_csv.logging_summary.mean_kinetic_temp = mkt;
 800aff0:	65a3      	str	r3, [r4, #88]	@ 0x58

    log_csv.logging_summary.start_time = (file_log_time_t){
 800aff2:	23ac      	movs	r3, #172	@ 0xac
 800aff4:	0017      	movs	r7, r2
 800aff6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	54fa      	strb	r2, [r7, r3]
 800affc:	235a      	movs	r3, #90	@ 0x5a
 800affe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b000:	33ff      	adds	r3, #255	@ 0xff
 800b002:	54fa      	strb	r2, [r7, r3]
 800b004:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b006:	3301      	adds	r3, #1
 800b008:	54fa      	strb	r2, [r7, r3]
 800b00a:	235c      	movs	r3, #92	@ 0x5c
 800b00c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b00e:	33ff      	adds	r3, #255	@ 0xff
 800b010:	54fa      	strb	r2, [r7, r3]
 800b012:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b014:	3301      	adds	r3, #1
 800b016:	54fa      	strb	r2, [r7, r3]
 800b018:	235e      	movs	r3, #94	@ 0x5e
 800b01a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800b01c:	33ff      	adds	r3, #255	@ 0xff
 800b01e:	54fa      	strb	r2, [r7, r3]
        .year = first.year, .month = first.month, .day = first.day,
        .hour = first.hour, .minute = first.minute, .second = first.second };

    log_csv.logging_summary.stop_time = (file_log_time_t){
 800b020:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b022:	3301      	adds	r3, #1
 800b024:	54fa      	strb	r2, [r7, r3]
 800b026:	2360      	movs	r3, #96	@ 0x60
 800b028:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b02a:	33ff      	adds	r3, #255	@ 0xff
 800b02c:	54fa      	strb	r2, [r7, r3]
 800b02e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b030:	3301      	adds	r3, #1
 800b032:	54fa      	strb	r2, [r7, r3]
 800b034:	2362      	movs	r3, #98	@ 0x62
 800b036:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b038:	33ff      	adds	r3, #255	@ 0xff
 800b03a:	54fa      	strb	r2, [r7, r3]
 800b03c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b03e:	3301      	adds	r3, #1
 800b040:	54fa      	strb	r2, [r7, r3]
 800b042:	2364      	movs	r3, #100	@ 0x64
 800b044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b046:	33ff      	adds	r3, #255	@ 0xff
 800b048:	54fa      	strb	r2, [r7, r3]
        .year = last.year, .month = last.month, .day = last.day,
        .hour = last.hour, .minute = last.minute, .second = last.second };

    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b04a:	4b6e      	ldr	r3, [pc, #440]	@ (800b204 <csv_dump_log_entries_with_summary_seek+0x670>)
 800b04c:	496e      	ldr	r1, [pc, #440]	@ (800b208 <csv_dump_log_entries_with_summary_seek+0x674>)
 800b04e:	0018      	movs	r0, r3
    log_csv.logging_summary.average_radiation = avg_dose;
 800b050:	6566      	str	r6, [r4, #84]	@ 0x54
    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b052:	3080      	adds	r0, #128	@ 0x80
 800b054:	7809      	ldrb	r1, [r1, #0]
 800b056:	7800      	ldrb	r0, [r0, #0]
 800b058:	1e6a      	subs	r2, r5, #1
 800b05a:	0200      	lsls	r0, r0, #8
 800b05c:	4308      	orrs	r0, r1
 800b05e:	0019      	movs	r1, r3
 800b060:	3181      	adds	r1, #129	@ 0x81
 800b062:	7809      	ldrb	r1, [r1, #0]
 800b064:	3382      	adds	r3, #130	@ 0x82
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	0409      	lsls	r1, r1, #16
 800b06a:	4301      	orrs	r1, r0
 800b06c:	061b      	lsls	r3, r3, #24
 800b06e:	430b      	orrs	r3, r1
 800b070:	4353      	muls	r3, r2
    log_csv.logging_summary.data_points_temp_count = idx_temp;
    log_csv.logging_summary.data_points_radiation_count = idx_rad;

    // 5. 평균 정보 문자열 생성 및 덮어쓰기
    char avg_text[320] = {0};
 800b072:	22a0      	movs	r2, #160	@ 0xa0
    log_csv.logging_summary.elapsed_time_sec = (valid_count-1) * current_settings.temp_interval;
 800b074:	66a3      	str	r3, [r4, #104]	@ 0x68
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b076:	4b65      	ldr	r3, [pc, #404]	@ (800b20c <csv_dump_log_entries_with_summary_seek+0x678>)
    char avg_text[320] = {0};
 800b078:	0052      	lsls	r2, r2, #1
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b07a:	930d      	str	r3, [sp, #52]	@ 0x34
 800b07c:	881b      	ldrh	r3, [r3, #0]
    char avg_text[320] = {0};
 800b07e:	2100      	movs	r1, #0
    log_csv.logging_summary.data_points_temp_count = idx_temp;
 800b080:	66e3      	str	r3, [r4, #108]	@ 0x6c
    log_csv.logging_summary.data_points_radiation_count = idx_rad;
 800b082:	4b63      	ldr	r3, [pc, #396]	@ (800b210 <csv_dump_log_entries_with_summary_seek+0x67c>)
    char avg_text[320] = {0};
 800b084:	a878      	add	r0, sp, #480	@ 0x1e0
    log_csv.logging_summary.data_points_radiation_count = idx_rad;
 800b086:	930e      	str	r3, [sp, #56]	@ 0x38
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	6723      	str	r3, [r4, #112]	@ 0x70
    char avg_text[320] = {0};
 800b08c:	f00e ffe0 	bl	801a050 <memset>
    int avg_offset = 0;
    char time_str[32], tmp[20];

    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b090:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b092:	f7f8 fb81 	bl	8003798 <__aeabi_f2d>
 800b096:	900a      	str	r0, [sp, #40]	@ 0x28
 800b098:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b09a:	9000      	str	r0, [sp, #0]
 800b09c:	9101      	str	r1, [sp, #4]
 800b09e:	21a0      	movs	r1, #160	@ 0xa0
 800b0a0:	4a5c      	ldr	r2, [pc, #368]	@ (800b214 <csv_dump_log_entries_with_summary_seek+0x680>)
 800b0a2:	0049      	lsls	r1, r1, #1
 800b0a4:	a878      	add	r0, sp, #480	@ 0x1e0
 800b0a6:	f00e fe81 	bl	8019dac <sniprintf>
        "Average Temperature:   %6.1f\n", avg_temp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0aa:	23a0      	movs	r3, #160	@ 0xa0
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	1a1a      	subs	r2, r3, r0
 800b0b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b0b2:	aa78      	add	r2, sp, #480	@ 0x1e0
 800b0b4:	1812      	adds	r2, r2, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0b6:	0005      	movs	r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0b8:	1c30      	adds	r0, r6, #0
 800b0ba:	9210      	str	r2, [sp, #64]	@ 0x40
 800b0bc:	f7f8 fb6c 	bl	8003798 <__aeabi_f2d>
 800b0c0:	4a55      	ldr	r2, [pc, #340]	@ (800b218 <csv_dump_log_entries_with_summary_seek+0x684>)
 800b0c2:	9000      	str	r0, [sp, #0]
 800b0c4:	9101      	str	r1, [sp, #4]
 800b0c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b0c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b0ca:	f00e fe6f 	bl	8019dac <sniprintf>
        "Average Radiation:     %6.1f\n", avg_dose);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0ce:	26a0      	movs	r6, #160	@ 0xa0
 800b0d0:	4b52      	ldr	r3, [pc, #328]	@ (800b21c <csv_dump_log_entries_with_summary_seek+0x688>)
 800b0d2:	0076      	lsls	r6, r6, #1
 800b0d4:	930f      	str	r3, [sp, #60]	@ 0x3c
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0d6:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0d8:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b0da:	1b71      	subs	r1, r6, r5
 800b0dc:	1958      	adds	r0, r3, r5
 800b0de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0e2:	9200      	str	r2, [sp, #0]
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0e8:	f00e fe60 	bl	8019dac <sniprintf>
 800b0ec:	a930      	add	r1, sp, #192	@ 0xc0
 800b0ee:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	484b      	ldr	r0, [pc, #300]	@ (800b220 <csv_dump_log_entries_with_summary_seek+0x68c>)
 800b0f4:	f7ff fd2c 	bl	800ab50 <time_to_dmyhms_string.part.0>
        "MKT:                   %6.1f\n", mkt);

    time_to_dmyhms_string(&log_csv.logging_summary.start_time, time_str, sizeof(time_str));
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b0f8:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b0fa:	1b71      	subs	r1, r6, r5
 800b0fc:	1958      	adds	r0, r3, r5
 800b0fe:	4a49      	ldr	r2, [pc, #292]	@ (800b224 <csv_dump_log_entries_with_summary_seek+0x690>)
 800b100:	ab30      	add	r3, sp, #192	@ 0xc0
 800b102:	f00e fe53 	bl	8019dac <sniprintf>
 800b106:	a930      	add	r1, sp, #192	@ 0xc0
 800b108:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b10a:	2220      	movs	r2, #32
 800b10c:	4846      	ldr	r0, [pc, #280]	@ (800b228 <csv_dump_log_entries_with_summary_seek+0x694>)
 800b10e:	f7ff fd1f 	bl	800ab50 <time_to_dmyhms_string.part.0>
        "Start Time:            %s\n", time_str);

    time_to_dmyhms_string(&log_csv.logging_summary.stop_time, time_str, sizeof(time_str));
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b112:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b114:	1b71      	subs	r1, r6, r5
 800b116:	1958      	adds	r0, r3, r5
 800b118:	4a44      	ldr	r2, [pc, #272]	@ (800b22c <csv_dump_log_entries_with_summary_seek+0x698>)
 800b11a:	ab30      	add	r3, sp, #192	@ 0xc0
 800b11c:	f00e fe46 	bl	8019dac <sniprintf>
 800b120:	a925      	add	r1, sp, #148	@ 0x94
 800b122:	182d      	adds	r5, r5, r0
    if (buffer == NULL || buffer_size == 0) {
 800b124:	2214      	movs	r2, #20
 800b126:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b128:	f7ff fba4 	bl	800a874 <seconds_to_dhms_string_long.part.0>
        "Stop Time:             %s\n", time_str);

    seconds_to_dhms_string_long(log_csv.logging_summary.elapsed_time_sec, tmp, sizeof(tmp));

    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b12c:	ab78      	add	r3, sp, #480	@ 0x1e0
 800b12e:	1b71      	subs	r1, r6, r5
 800b130:	1958      	adds	r0, r3, r5
 800b132:	4a3f      	ldr	r2, [pc, #252]	@ (800b230 <csv_dump_log_entries_with_summary_seek+0x69c>)
 800b134:	ab25      	add	r3, sp, #148	@ 0x94
 800b136:	f00e fe39 	bl	8019dac <sniprintf>
        "Elapsed Time:          %s\n", tmp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b13a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b13c:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b13e:	a878      	add	r0, sp, #480	@ 0x1e0
 800b140:	1b71      	subs	r1, r6, r5
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	4a3b      	ldr	r2, [pc, #236]	@ (800b234 <csv_dump_log_entries_with_summary_seek+0x6a0>)
 800b146:	1940      	adds	r0, r0, r5
 800b148:	f00e fe30 	bl	8019dac <sniprintf>
        "Temp Data Points:      %6u\n", idx_temp);
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b14e:	182d      	adds	r5, r5, r0
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b150:	a878      	add	r0, sp, #480	@ 0x1e0
 800b152:	1b71      	subs	r1, r6, r5
 800b154:	4a38      	ldr	r2, [pc, #224]	@ (800b238 <csv_dump_log_entries_with_summary_seek+0x6a4>)
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	1940      	adds	r0, r0, r5
 800b15a:	f00e fe27 	bl	8019dac <sniprintf>
        "Rad Data Points:       %6u\n", idx_rad);

    f_lseek(&csv_file, log_csv.csv_fiels_offset.logging_summary_avg_offset);
 800b15e:	23d0      	movs	r3, #208	@ 0xd0
 800b160:	4c24      	ldr	r4, [pc, #144]	@ (800b1f4 <csv_dump_log_entries_with_summary_seek+0x660>)
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	58f9      	ldr	r1, [r7, r3]
    avg_offset += snprintf(avg_text + avg_offset, sizeof(avg_text) - avg_offset,
 800b166:	182d      	adds	r5, r5, r0
    f_lseek(&csv_file, log_csv.csv_fiels_offset.logging_summary_avg_offset);
 800b168:	0020      	movs	r0, r4
 800b16a:	f009 fd67 	bl	8014c3c <f_lseek>

    f_write(&csv_file, avg_text, avg_offset, NULL);
 800b16e:	2300      	movs	r3, #0
 800b170:	002a      	movs	r2, r5
 800b172:	0020      	movs	r0, r4
 800b174:	a978      	add	r1, sp, #480	@ 0x1e0
 800b176:	f009 fc25 	bl	80149c4 <f_write>
 800b17a:	e038      	b.n	800b1ee <csv_dump_log_entries_with_summary_seek+0x65a>
 800b17c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b17e:	e57a      	b.n	800ac76 <csv_dump_log_entries_with_summary_seek+0xe2>
            snprintf(rad_str, sizeof(rad_str), "%.2f", dose);
 800b180:	f7f8 fb0a 	bl	8003798 <__aeabi_f2d>
 800b184:	4c2d      	ldr	r4, [pc, #180]	@ (800b23c <csv_dump_log_entries_with_summary_seek+0x6a8>)
 800b186:	9000      	str	r0, [sp, #0]
 800b188:	9101      	str	r1, [sp, #4]
 800b18a:	0022      	movs	r2, r4
 800b18c:	2110      	movs	r1, #16
 800b18e:	a878      	add	r0, sp, #480	@ 0x1e0
 800b190:	f00e fe0c 	bl	8019dac <sniprintf>
 800b194:	e598      	b.n	800acc8 <csv_dump_log_entries_with_summary_seek+0x134>
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b196:	2500      	movs	r5, #0
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b198:	0028      	movs	r0, r5
 800b19a:	428f      	cmp	r7, r1
 800b19c:	d900      	bls.n	800b1a0 <csv_dump_log_entries_with_summary_seek+0x60c>
 800b19e:	e638      	b.n	800ae12 <csv_dump_log_entries_with_summary_seek+0x27e>
        bool rh1_cond = gate_rh1 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh1);
 800b1a0:	0025      	movs	r5, r4
        bool rh2_cond = gate_rh2 && (entry.rad_measure_mark != 0) && (d_x100 >= current_settings.alarm_rh2);
 800b1a2:	1e20      	subs	r0, r4, #0
 800b1a4:	d100      	bne.n	800b1a8 <csv_dump_log_entries_with_summary_seek+0x614>
 800b1a6:	e634      	b.n	800ae12 <csv_dump_log_entries_with_summary_seek+0x27e>
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	4b16      	ldr	r3, [pc, #88]	@ (800b204 <csv_dump_log_entries_with_summary_seek+0x670>)
 800b1ac:	4824      	ldr	r0, [pc, #144]	@ (800b240 <csv_dump_log_entries_with_summary_seek+0x6ac>)
 800b1ae:	001c      	movs	r4, r3
 800b1b0:	34a4      	adds	r4, #164	@ 0xa4
 800b1b2:	7824      	ldrb	r4, [r4, #0]
 800b1b4:	7800      	ldrb	r0, [r0, #0]
 800b1b6:	0224      	lsls	r4, r4, #8
 800b1b8:	4304      	orrs	r4, r0
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	30a5      	adds	r0, #165	@ 0xa5
 800b1be:	7800      	ldrb	r0, [r0, #0]
 800b1c0:	33a6      	adds	r3, #166	@ 0xa6
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	0400      	lsls	r0, r0, #16
 800b1c6:	4320      	orrs	r0, r4
 800b1c8:	061b      	lsls	r3, r3, #24
 800b1ca:	4303      	orrs	r3, r0
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	4140      	adcs	r0, r0
 800b1d4:	e61d      	b.n	800ae12 <csv_dump_log_entries_with_summary_seek+0x27e>
    if (!first_found || valid_count == 0) {
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	d002      	beq.n	800b1e0 <csv_dump_log_entries_with_summary_seek+0x64c>
 800b1da:	2d00      	cmp	r5, #0
 800b1dc:	d000      	beq.n	800b1e0 <csv_dump_log_entries_with_summary_seek+0x64c>
 800b1de:	e6e7      	b.n	800afb0 <csv_dump_log_entries_with_summary_seek+0x41c>
        LOG_APP("[ERROR] No valid entries found!\n");
 800b1e0:	4b18      	ldr	r3, [pc, #96]	@ (800b244 <csv_dump_log_entries_with_summary_seek+0x6b0>)
 800b1e2:	4a19      	ldr	r2, [pc, #100]	@ (800b248 <csv_dump_log_entries_with_summary_seek+0x6b4>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4919      	ldr	r1, [pc, #100]	@ (800b24c <csv_dump_log_entries_with_summary_seek+0x6b8>)
 800b1e8:	68d8      	ldr	r0, [r3, #12]
 800b1ea:	f00e fd39 	bl	8019c60 <fiprintf>
}
 800b1ee:	4b18      	ldr	r3, [pc, #96]	@ (800b250 <csv_dump_log_entries_with_summary_seek+0x6bc>)
 800b1f0:	449d      	add	sp, r3
 800b1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1f4:	20002c84 	.word	0x20002c84
 800b1f8:	0000c30c 	.word	0x0000c30c
 800b1fc:	20000154 	.word	0x20000154
 800b200:	20000058 	.word	0x20000058
 800b204:	20002bac 	.word	0x20002bac
 800b208:	20002c2b 	.word	0x20002c2b
 800b20c:	200004fe 	.word	0x200004fe
 800b210:	20000500 	.word	0x20000500
 800b214:	0801e9be 	.word	0x0801e9be
 800b218:	0801e9dc 	.word	0x0801e9dc
 800b21c:	0801e9fa 	.word	0x0801e9fa
 800b220:	200001b0 	.word	0x200001b0
 800b224:	0801ea18 	.word	0x0801ea18
 800b228:	200001b6 	.word	0x200001b6
 800b22c:	0801ea33 	.word	0x0801ea33
 800b230:	0801ea4e 	.word	0x0801ea4e
 800b234:	0801ea69 	.word	0x0801ea69
 800b238:	0801ea85 	.word	0x0801ea85
 800b23c:	0801e962 	.word	0x0801e962
 800b240:	20002c4f 	.word	0x20002c4f
 800b244:	200002cc 	.word	0x200002cc
 800b248:	0801e1c1 	.word	0x0801e1c1
 800b24c:	0801e998 	.word	0x0801e998
 800b250:	00000724 	.word	0x00000724

0800b254 <csv_alarm_summary_prealloc.isra.0>:
static void csv_alarm_summary_prealloc(const DeviceSettings *dev)
 800b254:	b530      	push	{r4, r5, lr}
 800b256:	4c1f      	ldr	r4, [pc, #124]	@ (800b2d4 <csv_alarm_summary_prealloc.isra.0+0x80>)
    char buf[256] = {0};
 800b258:	2100      	movs	r1, #0
static void csv_alarm_summary_prealloc(const DeviceSettings *dev)
 800b25a:	44a5      	add	sp, r4
    char buf[256] = {0};
 800b25c:	2480      	movs	r4, #128	@ 0x80
 800b25e:	0064      	lsls	r4, r4, #1
 800b260:	0022      	movs	r2, r4
 800b262:	a808      	add	r0, sp, #32
 800b264:	f00e fef4 	bl	801a050 <memset>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b268:	491b      	ldr	r1, [pc, #108]	@ (800b2d8 <csv_alarm_summary_prealloc.isra.0+0x84>)
 800b26a:	a808      	add	r0, sp, #32
 800b26c:	f00e ffa7 	bl	801a1be <strcpy>
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b270:	4669      	mov	r1, sp
 800b272:	2220      	movs	r2, #32
 800b274:	4819      	ldr	r0, [pc, #100]	@ (800b2dc <csv_alarm_summary_prealloc.isra.0+0x88>)
 800b276:	f7ff fc6b 	bl	800ab50 <time_to_dmyhms_string.part.0>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b27a:	206d      	movs	r0, #109	@ 0x6d
 800b27c:	466b      	mov	r3, sp
 800b27e:	21b3      	movs	r1, #179	@ 0xb3
 800b280:	4a17      	ldr	r2, [pc, #92]	@ (800b2e0 <csv_alarm_summary_prealloc.isra.0+0x8c>)
 800b282:	4468      	add	r0, sp
 800b284:	f00e fd92 	bl	8019dac <sniprintf>
    off += snprintf(buf + off, sizeof(buf)-off,
 800b288:	ab08      	add	r3, sp, #32
    off += snprintf(buf + off, sizeof(buf)-off,
 800b28a:	304d      	adds	r0, #77	@ 0x4d
    off += snprintf(buf + off, sizeof(buf)-off,
 800b28c:	1a21      	subs	r1, r4, r0
 800b28e:	4a15      	ldr	r2, [pc, #84]	@ (800b2e4 <csv_alarm_summary_prealloc.isra.0+0x90>)
 800b290:	1818      	adds	r0, r3, r0
 800b292:	f00e fd8b 	bl	8019dac <sniprintf>
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b296:	23c8      	movs	r3, #200	@ 0xc8
 800b298:	4c13      	ldr	r4, [pc, #76]	@ (800b2e8 <csv_alarm_summary_prealloc.isra.0+0x94>)
 800b29a:	4d14      	ldr	r5, [pc, #80]	@ (800b2ec <csv_alarm_summary_prealloc.isra.0+0x98>)
 800b29c:	6962      	ldr	r2, [r4, #20]
    fatfs_write_str(&csv_file, buf);
 800b29e:	0021      	movs	r1, r4
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b2a0:	005b      	lsls	r3, r3, #1
    fatfs_write_str(&csv_file, buf);
 800b2a2:	a808      	add	r0, sp, #32
    log_csv.csv_fiels_offset.alarm_summary_offset = f_tell(&csv_file);
 800b2a4:	50ea      	str	r2, [r5, r3]
    fatfs_write_str(&csv_file, buf);
 800b2a6:	f00a f9a5 	bl	80155f4 <f_puts>
    log_csv.csv_fiels_offset.alarm_summary_fill_offset = f_tell(&csv_file);
 800b2aa:	23ca      	movs	r3, #202	@ 0xca
 800b2ac:	6962      	ldr	r2, [r4, #20]
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	50ea      	str	r2, [r5, r3]
    memset(pad, ' ', sizeof(pad));
 800b2b2:	2580      	movs	r5, #128	@ 0x80
 800b2b4:	00ed      	lsls	r5, r5, #3
 800b2b6:	002a      	movs	r2, r5
 800b2b8:	2120      	movs	r1, #32
 800b2ba:	a848      	add	r0, sp, #288	@ 0x120
 800b2bc:	f00e fec8 	bl	801a050 <memset>
    f_write(&csv_file, pad, sizeof(pad), NULL);
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	002a      	movs	r2, r5
 800b2c4:	0020      	movs	r0, r4
 800b2c6:	a948      	add	r1, sp, #288	@ 0x120
 800b2c8:	f009 fb7c 	bl	80149c4 <f_write>
}
 800b2cc:	4b08      	ldr	r3, [pc, #32]	@ (800b2f0 <csv_alarm_summary_prealloc.isra.0+0x9c>)
 800b2ce:	449d      	add	sp, r3
 800b2d0:	bd30      	pop	{r4, r5, pc}
 800b2d2:	46c0      	nop			@ (mov r8, r8)
 800b2d4:	fffffadc 	.word	0xfffffadc
 800b2d8:	0801eaa1 	.word	0x0801eaa1
 800b2dc:	20000088 	.word	0x20000088
 800b2e0:	0801eaef 	.word	0x0801eaef
 800b2e4:	0801eb0d 	.word	0x0801eb0d
 800b2e8:	20002c84 	.word	0x20002c84
 800b2ec:	20000058 	.word	0x20000058
 800b2f0:	00000524 	.word	0x00000524

0800b2f4 <csv_gen_template_file>:
UINT csv_gen_template_file(const DeviceSettings *dev_setting) {
 800b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = f_stat (csv_file_name,&fno);
 800b2f6:	4f3c      	ldr	r7, [pc, #240]	@ (800b3e8 <csv_gen_template_file+0xf4>)
UINT csv_gen_template_file(const DeviceSettings *dev_setting) {
 800b2f8:	b08f      	sub	sp, #60	@ 0x3c
 800b2fa:	9000      	str	r0, [sp, #0]
    res = f_stat (csv_file_name,&fno);
 800b2fc:	a908      	add	r1, sp, #32
 800b2fe:	6838      	ldr	r0, [r7, #0]
 800b300:	f009 fd27 	bl	8014d52 <f_stat>
 800b304:	4d39      	ldr	r5, [pc, #228]	@ (800b3ec <csv_gen_template_file+0xf8>)
 800b306:	1e04      	subs	r4, r0, #0
    switch (res)
 800b308:	4e39      	ldr	r6, [pc, #228]	@ (800b3f0 <csv_gen_template_file+0xfc>)
 800b30a:	d009      	beq.n	800b320 <csv_gen_template_file+0x2c>
 800b30c:	2804      	cmp	r0, #4
 800b30e:	d010      	beq.n	800b332 <csv_gen_template_file+0x3e>
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800b310:	6830      	ldr	r0, [r6, #0]
 800b312:	0023      	movs	r3, r4
 800b314:	002a      	movs	r2, r5
 800b316:	4937      	ldr	r1, [pc, #220]	@ (800b3f4 <csv_gen_template_file+0x100>)
 800b318:	68c0      	ldr	r0, [r0, #12]
 800b31a:	f00e fca1 	bl	8019c60 <fiprintf>
        break;
 800b31e:	e023      	b.n	800b368 <csv_gen_template_file+0x74>
        LOG_APP("File '%s' exists \r\n", csv_file_name);
 800b320:	6830      	ldr	r0, [r6, #0]
 800b322:	002a      	movs	r2, r5
 800b324:	4934      	ldr	r1, [pc, #208]	@ (800b3f8 <csv_gen_template_file+0x104>)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68c0      	ldr	r0, [r0, #12]
 800b32a:	f00e fc99 	bl	8019c60 <fiprintf>
    res = f_stat (csv_file_name,&fno);
 800b32e:	2400      	movs	r4, #0
 800b330:	e01a      	b.n	800b368 <csv_gen_template_file+0x74>
        LOG_APP("File '%s' not found. Creating new file with header.\n", csv_file_name);
 800b332:	6830      	ldr	r0, [r6, #0]
 800b334:	002a      	movs	r2, r5
 800b336:	4931      	ldr	r1, [pc, #196]	@ (800b3fc <csv_gen_template_file+0x108>)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	68c0      	ldr	r0, [r0, #12]
 800b33c:	f00e fc90 	bl	8019c60 <fiprintf>
        res = f_open(&csv_file, csv_file_name, FA_CREATE_NEW | FA_WRITE);
 800b340:	4b2f      	ldr	r3, [pc, #188]	@ (800b400 <csv_gen_template_file+0x10c>)
 800b342:	2206      	movs	r2, #6
 800b344:	0018      	movs	r0, r3
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	9301      	str	r3, [sp, #4]
 800b34a:	f009 fa63 	bl	8014814 <f_open>
 800b34e:	1e04      	subs	r4, r0, #0
        if (res != FR_OK)
 800b350:	d00d      	beq.n	800b36e <csv_gen_template_file+0x7a>
            LOG_APP("Open csv log file failed,Unmount...\r\n");
 800b352:	6833      	ldr	r3, [r6, #0]
 800b354:	002a      	movs	r2, r5
 800b356:	492b      	ldr	r1, [pc, #172]	@ (800b404 <csv_gen_template_file+0x110>)
 800b358:	68d8      	ldr	r0, [r3, #12]
 800b35a:	f00e fc81 	bl	8019c60 <fiprintf>
            f_mount(NULL, "", 0);
 800b35e:	2200      	movs	r2, #0
 800b360:	4929      	ldr	r1, [pc, #164]	@ (800b408 <csv_gen_template_file+0x114>)
 800b362:	0010      	movs	r0, r2
 800b364:	f009 fa2c 	bl	80147c0 <f_mount>
    return res;
 800b368:	0020      	movs	r0, r4
}
 800b36a:	b00f      	add	sp, #60	@ 0x3c
 800b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const char* header_static[] = {
 800b36e:	a903      	add	r1, sp, #12
 800b370:	000a      	movs	r2, r1
 800b372:	4b26      	ldr	r3, [pc, #152]	@ (800b40c <csv_gen_template_file+0x118>)
 800b374:	cb83      	ldmia	r3!, {r0, r1, r7}
 800b376:	c283      	stmia	r2!, {r0, r1, r7}
 800b378:	cb03      	ldmia	r3!, {r0, r1}
 800b37a:	c203      	stmia	r2!, {r0, r1}
    log_csv.csv_fiels_offset.device_info_offset = sizeof(header_static) + 1;
 800b37c:	22c2      	movs	r2, #194	@ 0xc2
 800b37e:	2115      	movs	r1, #21
 800b380:	4b23      	ldr	r3, [pc, #140]	@ (800b410 <csv_gen_template_file+0x11c>)
 800b382:	0052      	lsls	r2, r2, #1
 800b384:	5099      	str	r1, [r3, r2]
        fatfs_write_str(&csv_file, header_static[i]);
 800b386:	00a2      	lsls	r2, r4, #2
 800b388:	ab03      	add	r3, sp, #12
 800b38a:	9901      	ldr	r1, [sp, #4]
 800b38c:	58d0      	ldr	r0, [r2, r3]
    for (int i = 0; i < sizeof(header_static)/sizeof(header_static[0]); ++i)
 800b38e:	3401      	adds	r4, #1
        fatfs_write_str(&csv_file, header_static[i]);
 800b390:	f00a f930 	bl	80155f4 <f_puts>
    for (int i = 0; i < sizeof(header_static)/sizeof(header_static[0]); ++i)
 800b394:	2c05      	cmp	r4, #5
 800b396:	d1f6      	bne.n	800b386 <csv_gen_template_file+0x92>
        csv_device_info(dev_setting);
 800b398:	9800      	ldr	r0, [sp, #0]
 800b39a:	f7ff f87b 	bl	800a494 <csv_device_info>
        csv_trip_info(dev_setting);
 800b39e:	9800      	ldr	r0, [sp, #0]
 800b3a0:	f7ff f914 	bl	800a5cc <csv_trip_info>
        csv_conf_info(dev_setting);
 800b3a4:	9800      	ldr	r0, [sp, #0]
 800b3a6:	f7ff f97f 	bl	800a6a8 <csv_conf_info>
        csv_alarm_summary_prealloc(dev_setting);
 800b3aa:	f7ff ff53 	bl	800b254 <csv_alarm_summary_prealloc.isra.0>
        csv_dump_log_entries_with_summary_seek();
 800b3ae:	f7ff fbf1 	bl	800ab94 <csv_dump_log_entries_with_summary_seek>
        csv_alarm_summary_fill(dev_setting);
 800b3b2:	9800      	ldr	r0, [sp, #0]
 800b3b4:	f7ff fa8e 	bl	800a8d4 <csv_alarm_summary_fill>
        LOG_APP("SUCCESS: Created template csv file\r\n");
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	002a      	movs	r2, r5
 800b3bc:	4915      	ldr	r1, [pc, #84]	@ (800b414 <csv_gen_template_file+0x120>)
 800b3be:	68d8      	ldr	r0, [r3, #12]
 800b3c0:	f00e fc4e 	bl	8019c60 <fiprintf>
        LOG_APP("Closing file, Flush...\r\n");
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	002a      	movs	r2, r5
 800b3c8:	4913      	ldr	r1, [pc, #76]	@ (800b418 <csv_gen_template_file+0x124>)
 800b3ca:	68d8      	ldr	r0, [r3, #12]
 800b3cc:	f00e fc48 	bl	8019c60 <fiprintf>
        res = f_close(&csv_file);
 800b3d0:	9801      	ldr	r0, [sp, #4]
 800b3d2:	f009 fc25 	bl	8014c20 <f_close>
 800b3d6:	1e04      	subs	r4, r0, #0
        if (res != FR_OK)
 800b3d8:	d0a9      	beq.n	800b32e <csv_gen_template_file+0x3a>
            LOG_APP("Close CSV failed\r\n");
 800b3da:	6833      	ldr	r3, [r6, #0]
 800b3dc:	002a      	movs	r2, r5
 800b3de:	490f      	ldr	r1, [pc, #60]	@ (800b41c <csv_gen_template_file+0x128>)
 800b3e0:	68d8      	ldr	r0, [r3, #12]
 800b3e2:	f00e fc3d 	bl	8019c60 <fiprintf>
            return res;
 800b3e6:	e7bf      	b.n	800b368 <csv_gen_template_file+0x74>
 800b3e8:	20000054 	.word	0x20000054
 800b3ec:	0801e1c1 	.word	0x0801e1c1
 800b3f0:	200002cc 	.word	0x200002cc
 800b3f4:	0801ec3b 	.word	0x0801ec3b
 800b3f8:	0801eb5d 	.word	0x0801eb5d
 800b3fc:	0801eb76 	.word	0x0801eb76
 800b400:	20002c84 	.word	0x20002c84
 800b404:	0801ebb0 	.word	0x0801ebb0
 800b408:	0801ed35 	.word	0x0801ed35
 800b40c:	0801c580 	.word	0x0801c580
 800b410:	20000058 	.word	0x20000058
 800b414:	0801ebdb 	.word	0x0801ebdb
 800b418:	0801ec05 	.word	0x0801ec05
 800b41c:	0801ec23 	.word	0x0801ec23

0800b420 <seconds_to_hms_string>:
{
 800b420:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0) {
 800b422:	2900      	cmp	r1, #0
 800b424:	d003      	beq.n	800b42e <seconds_to_hms_string+0xe>
 800b426:	2a00      	cmp	r2, #0
 800b428:	d001      	beq.n	800b42e <seconds_to_hms_string+0xe>
 800b42a:	f7ff f919 	bl	800a660 <seconds_to_hms_string.part.0>
}
 800b42e:	bd10      	pop	{r4, pc}

0800b430 <seconds_to_dhms_string_long>:
{
 800b430:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0) {
 800b432:	2900      	cmp	r1, #0
 800b434:	d003      	beq.n	800b43e <seconds_to_dhms_string_long+0xe>
 800b436:	2a00      	cmp	r2, #0
 800b438:	d001      	beq.n	800b43e <seconds_to_dhms_string_long+0xe>
 800b43a:	f7ff fa1b 	bl	800a874 <seconds_to_dhms_string_long.part.0>
}
 800b43e:	bd10      	pop	{r4, pc}

0800b440 <time_to_dmyhms_string>:
{
 800b440:	b510      	push	{r4, lr}
    if (buffer == NULL || buffer_size == 0 || time == NULL) {
 800b442:	2900      	cmp	r1, #0
 800b444:	d004      	beq.n	800b450 <time_to_dmyhms_string+0x10>
 800b446:	2a00      	cmp	r2, #0
 800b448:	d002      	beq.n	800b450 <time_to_dmyhms_string+0x10>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d101      	bne.n	800b452 <time_to_dmyhms_string+0x12>
        if(buffer != NULL && buffer_size > 0) buffer[0] = '\0';
 800b44e:	7008      	strb	r0, [r1, #0]
}
 800b450:	bd10      	pop	{r4, pc}
 800b452:	f7ff fb7d 	bl	800ab50 <time_to_dmyhms_string.part.0>
 800b456:	e7fb      	b.n	800b450 <time_to_dmyhms_string+0x10>

0800b458 <convert_month_to_string>:
    return ((month >= 1 && month <= 12) ? months[month] : months[0]);
 800b458:	1e42      	subs	r2, r0, #1
{
 800b45a:	0003      	movs	r3, r0
    return ((month >= 1 && month <= 12) ? months[month] : months[0]);
 800b45c:	4803      	ldr	r0, [pc, #12]	@ (800b46c <convert_month_to_string+0x14>)
 800b45e:	2a0b      	cmp	r2, #11
 800b460:	d802      	bhi.n	800b468 <convert_month_to_string+0x10>
 800b462:	4a03      	ldr	r2, [pc, #12]	@ (800b470 <convert_month_to_string+0x18>)
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	5898      	ldr	r0, [r3, r2]
}
 800b468:	4770      	bx	lr
 800b46a:	46c0      	nop			@ (mov r8, r8)
 800b46c:	0801e841 	.word	0x0801e841
 800b470:	0801fde4 	.word	0x0801fde4

0800b474 <csv_get_logging_summary>:
    fatfs_write_str(&csv_file, tmp_buff);
}

const logging_summary_t* csv_get_logging_summary(void)
{
    return &log_csv.logging_summary;
 800b474:	4800      	ldr	r0, [pc, #0]	@ (800b478 <csv_get_logging_summary+0x4>)
}
 800b476:	4770      	bx	lr
 800b478:	20000198 	.word	0x20000198

0800b47c <generate_pdf_raw_report>:
    sprintf(work_buffer, "startxref\n%lu\n%%EOF\n", (unsigned long)xref_offset);
    fatfs_write_string(&pdf_file, work_buffer);
}


static void generate_pdf_raw_report(void) {
 800b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("PDF First Page Make\r\n");
 800b47e:	4892      	ldr	r0, [pc, #584]	@ (800b6c8 <generate_pdf_raw_report+0x24c>)
static void generate_pdf_raw_report(void) {
 800b480:	b0cb      	sub	sp, #300	@ 0x12c
	printf("PDF First Page Make\r\n");
 800b482:	f00e fc89 	bl	8019d98 <puts>
    fatfs_write_string(&pdf_file, TPDF_HEADER);
 800b486:	4c91      	ldr	r4, [pc, #580]	@ (800b6cc <generate_pdf_raw_report+0x250>)
 800b488:	4891      	ldr	r0, [pc, #580]	@ (800b6d0 <generate_pdf_raw_report+0x254>)
 800b48a:	0021      	movs	r1, r4
 800b48c:	f00a f8b2 	bl	80155f4 <f_puts>
    sprintf(content_buffer, "<<\n/Type /Catalog\n/Pages %d 0 R >>", TPDF_OBJ_PAGES_KID);
 800b490:	2203      	movs	r2, #3
 800b492:	4990      	ldr	r1, [pc, #576]	@ (800b6d4 <generate_pdf_raw_report+0x258>)
 800b494:	a80a      	add	r0, sp, #40	@ 0x28
 800b496:	f00e fcbf 	bl	8019e18 <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_CATALOG, content_buffer, &pdf_monitor);
 800b49a:	4d8f      	ldr	r5, [pc, #572]	@ (800b6d8 <generate_pdf_raw_report+0x25c>)
 800b49c:	2102      	movs	r1, #2
 800b49e:	002b      	movs	r3, r5
 800b4a0:	0020      	movs	r0, r4
 800b4a2:	aa0a      	add	r2, sp, #40	@ 0x28
 800b4a4:	f00d fa12 	bl	80188cc <tpdf_add_new_obj>
    sprintf(content_buffer,"<<\n/Type /Font\n/Subtype /TrueType\n/Name /F1\n/BaseFont /%s\n/Encoding /WinAnsiEncoding\n>>",TPDF_FONT);
 800b4a8:	4a8c      	ldr	r2, [pc, #560]	@ (800b6dc <generate_pdf_raw_report+0x260>)
 800b4aa:	498d      	ldr	r1, [pc, #564]	@ (800b6e0 <generate_pdf_raw_report+0x264>)
 800b4ac:	a80a      	add	r0, sp, #40	@ 0x28
 800b4ae:	f00e fcb3 	bl	8019e18 <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_FONT_ARIAL, content_buffer, &pdf_monitor);
 800b4b2:	002b      	movs	r3, r5
 800b4b4:	2104      	movs	r1, #4
 800b4b6:	0020      	movs	r0, r4
 800b4b8:	aa0a      	add	r2, sp, #40	@ 0x28
 800b4ba:	f00d fa07 	bl	80188cc <tpdf_add_new_obj>
    sprintf(content_buffer,"<<\n/Type /Font\n/Subtype /TrueType\n/Name /F2\n/BaseFont /%s\n/Encoding /WinAnsiEncoding\n>>",TPDF_FONT_BOLD);
 800b4be:	4a89      	ldr	r2, [pc, #548]	@ (800b6e4 <generate_pdf_raw_report+0x268>)
 800b4c0:	4989      	ldr	r1, [pc, #548]	@ (800b6e8 <generate_pdf_raw_report+0x26c>)
 800b4c2:	a80a      	add	r0, sp, #40	@ 0x28
 800b4c4:	f00e fca8 	bl	8019e18 <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_FONT_ARIAL_BOLD, content_buffer, &pdf_monitor);
 800b4c8:	002b      	movs	r3, r5
 800b4ca:	2105      	movs	r1, #5
 800b4cc:	0020      	movs	r0, r4
 800b4ce:	aa0a      	add	r2, sp, #40	@ 0x28
 800b4d0:	f00d f9fc 	bl	80188cc <tpdf_add_new_obj>
    sprintf(content_buffer, "<<\n/Font << /F1 %d 0 R /F2 %d 0 R >>\n/ProcSet [ /PDF /Text ] \n>>",
 800b4d4:	2305      	movs	r3, #5
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	4984      	ldr	r1, [pc, #528]	@ (800b6ec <generate_pdf_raw_report+0x270>)
 800b4da:	a80a      	add	r0, sp, #40	@ 0x28
 800b4dc:	f00e fc9c 	bl	8019e18 <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_RESOURCES, content_buffer, &pdf_monitor);
 800b4e0:	002b      	movs	r3, r5
 800b4e2:	2111      	movs	r1, #17
 800b4e4:	0020      	movs	r0, r4
 800b4e6:	aa0a      	add	r2, sp, #40	@ 0x28
 800b4e8:	f00d f9f0 	bl	80188cc <tpdf_add_new_obj>
  tpdf_start_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL,TPDF_OBJ_NUM_TABLE_TEMPL + 1, &pdf_monitor);
 800b4ec:	002b      	movs	r3, r5
 800b4ee:	2209      	movs	r2, #9
 800b4f0:	2108      	movs	r1, #8
 800b4f2:	0020      	movs	r0, r4
 800b4f4:	f00d fa10 	bl	8018918 <tpdf_start_new_stream_obj>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP-20, PDF_PAGE_LEFT, PDF_PAGE_TOP-20, 1.5, 0,0,0);
 800b4f8:	26ff      	movs	r6, #255	@ 0xff
 800b4fa:	22c3      	movs	r2, #195	@ 0xc3
 800b4fc:	2700      	movs	r7, #0
 800b4fe:	0092      	lsls	r2, r2, #2
 800b500:	05b6      	lsls	r6, r6, #22
 800b502:	2332      	movs	r3, #50	@ 0x32
 800b504:	0020      	movs	r0, r4
 800b506:	497a      	ldr	r1, [pc, #488]	@ (800b6f0 <generate_pdf_raw_report+0x274>)
 800b508:	9200      	str	r2, [sp, #0]
 800b50a:	9704      	str	r7, [sp, #16]
 800b50c:	9703      	str	r7, [sp, #12]
 800b50e:	9702      	str	r7, [sp, #8]
 800b510:	9601      	str	r6, [sp, #4]
 800b512:	f00d f971 	bl	80187f8 <tpdf_draw_line>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800b516:	4a77      	ldr	r2, [pc, #476]	@ (800b6f4 <generate_pdf_raw_report+0x278>)
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP-20, PDF_PAGE_LEFT, PDF_PAGE_TOP-20, 1.5, 0,0,0);
 800b518:	0005      	movs	r5, r0
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800b51a:	2332      	movs	r3, #50	@ 0x32
 800b51c:	0020      	movs	r0, r4
 800b51e:	4974      	ldr	r1, [pc, #464]	@ (800b6f0 <generate_pdf_raw_report+0x274>)
 800b520:	9200      	str	r2, [sp, #0]
 800b522:	9704      	str	r7, [sp, #16]
 800b524:	9703      	str	r7, [sp, #12]
 800b526:	9702      	str	r7, [sp, #8]
 800b528:	9601      	str	r6, [sp, #4]
 800b52a:	f00d f965 	bl	80187f8 <tpdf_draw_line>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM + 20, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800b52e:	2346      	movs	r3, #70	@ 0x46
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_RIGHT, PDF_PAGE_TOP - 35, PDF_PAGE_LEFT, PDF_PAGE_TOP - 35, 1.5, 0,0,0);
 800b530:	182d      	adds	r5, r5, r0
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM + 20, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	0020      	movs	r0, r4
 800b536:	2246      	movs	r2, #70	@ 0x46
 800b538:	2132      	movs	r1, #50	@ 0x32
 800b53a:	4b6d      	ldr	r3, [pc, #436]	@ (800b6f0 <generate_pdf_raw_report+0x274>)
 800b53c:	9704      	str	r7, [sp, #16]
 800b53e:	9703      	str	r7, [sp, #12]
 800b540:	9702      	str	r7, [sp, #8]
 800b542:	9601      	str	r6, [sp, #4]
 800b544:	f00d f958 	bl	80187f8 <tpdf_draw_line>
 800b548:	2432      	movs	r4, #50	@ 0x32
 800b54a:	182d      	adds	r5, r5, r0
    stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + i *99), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + i *99), PDF_PAGE_BOTTOM + 20, 1.5, 0,0,0);
 800b54c:	4b5f      	ldr	r3, [pc, #380]	@ (800b6cc <generate_pdf_raw_report+0x250>)
 800b54e:	22c3      	movs	r2, #195	@ 0xc3
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	23ff      	movs	r3, #255	@ 0xff
 800b554:	059b      	lsls	r3, r3, #22
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	2346      	movs	r3, #70	@ 0x46
 800b55a:	0092      	lsls	r2, r2, #2
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	0021      	movs	r1, r4
 800b560:	0023      	movs	r3, r4
 800b562:	9807      	ldr	r0, [sp, #28]
 800b564:	9704      	str	r7, [sp, #16]
 800b566:	9703      	str	r7, [sp, #12]
 800b568:	9702      	str	r7, [sp, #8]
 800b56a:	f00d f945 	bl	80187f8 <tpdf_draw_line>
 800b56e:	1943      	adds	r3, r0, r5
 800b570:	9308      	str	r3, [sp, #32]
    if (i < CHILD_TABLE_NUMS)
 800b572:	0023      	movs	r3, r4
 800b574:	3363      	adds	r3, #99	@ 0x63
 800b576:	9309      	str	r3, [sp, #36]	@ 0x24
 800b578:	23a1      	movs	r3, #161	@ 0xa1
 800b57a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	429a      	cmp	r2, r3
 800b580:	d152      	bne.n	800b628 <generate_pdf_raw_report+0x1ac>
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800b582:	23ff      	movs	r3, #255	@ 0xff
 800b584:	2432      	movs	r4, #50	@ 0x32
 800b586:	059b      	lsls	r3, r3, #22
 800b588:	0022      	movs	r2, r4
 800b58a:	0021      	movs	r1, r4
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	9400      	str	r4, [sp, #0]
 800b590:	4b57      	ldr	r3, [pc, #348]	@ (800b6f0 <generate_pdf_raw_report+0x274>)
 800b592:	9807      	ldr	r0, [sp, #28]
 800b594:	9704      	str	r7, [sp, #16]
 800b596:	9703      	str	r7, [sp, #12]
 800b598:	9702      	str	r7, [sp, #8]
 800b59a:	f00d f92d 	bl	80187f8 <tpdf_draw_line>
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800b59e:	4b56      	ldr	r3, [pc, #344]	@ (800b6f8 <generate_pdf_raw_report+0x27c>)
 800b5a0:	2609      	movs	r6, #9
 800b5a2:	9304      	str	r3, [sp, #16]
 800b5a4:	23fe      	movs	r3, #254	@ 0xfe
 800b5a6:	4d55      	ldr	r5, [pc, #340]	@ (800b6fc <generate_pdf_raw_report+0x280>)
 800b5a8:	059b      	lsls	r3, r3, #22
 800b5aa:	0021      	movs	r1, r4
  stream_length += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800b5ac:	9009      	str	r0, [sp, #36]	@ 0x24
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800b5ae:	9303      	str	r3, [sp, #12]
 800b5b0:	2228      	movs	r2, #40	@ 0x28
 800b5b2:	002b      	movs	r3, r5
 800b5b4:	9807      	ldr	r0, [sp, #28]
 800b5b6:	9702      	str	r7, [sp, #8]
 800b5b8:	9701      	str	r7, [sp, #4]
 800b5ba:	9600      	str	r6, [sp, #0]
 800b5bc:	f00d f8e6 	bl	801878c <tpdf_draw_colored_text>
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800b5c0:	4b4f      	ldr	r3, [pc, #316]	@ (800b700 <generate_pdf_raw_report+0x284>)
 800b5c2:	21fa      	movs	r1, #250	@ 0xfa
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	23fe      	movs	r3, #254	@ 0xfe
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800b5c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800b5ca:	059b      	lsls	r3, r3, #22
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800b5cc:	1814      	adds	r4, r2, r0
 800b5ce:	9a08      	ldr	r2, [sp, #32]
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800b5d0:	9303      	str	r3, [sp, #12]
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800b5d2:	18a4      	adds	r4, r4, r2
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800b5d4:	002b      	movs	r3, r5
 800b5d6:	2228      	movs	r2, #40	@ 0x28
 800b5d8:	9807      	ldr	r0, [sp, #28]
 800b5da:	9702      	str	r7, [sp, #8]
 800b5dc:	9701      	str	r7, [sp, #4]
 800b5de:	9600      	str	r6, [sp, #0]
 800b5e0:	31ff      	adds	r1, #255	@ 0xff
 800b5e2:	f00d f8d3 	bl	801878c <tpdf_draw_colored_text>
  tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL + 1,stream_length,&pdf_monitor);
 800b5e6:	4d3c      	ldr	r5, [pc, #240]	@ (800b6d8 <generate_pdf_raw_report+0x25c>)
  stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800b5e8:	1822      	adds	r2, r4, r0
  tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_TABLE_TEMPL + 1,stream_length,&pdf_monitor);
 800b5ea:	002b      	movs	r3, r5
 800b5ec:	0031      	movs	r1, r6
 800b5ee:	9807      	ldr	r0, [sp, #28]
 800b5f0:	f00d f9ae 	bl	8018950 <tpdf_end_new_stream_obj>

static void generate_pdf_report_2nd_page(void) {
    // --- Create Object 20: first page
	char content_buffer[128];
    // Ref to table template and start/stop time header (OBJ 6 and 8 )
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R %d 0 R %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800b5f4:	2311      	movs	r3, #17
 800b5f6:	2416      	movs	r4, #22
 800b5f8:	9302      	str	r3, [sp, #8]
 800b5fa:	3b09      	subs	r3, #9
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	2203      	movs	r2, #3
 800b600:	4940      	ldr	r1, [pc, #256]	@ (800b704 <generate_pdf_raw_report+0x288>)
 800b602:	9401      	str	r4, [sp, #4]
 800b604:	3b02      	subs	r3, #2
 800b606:	a80a      	add	r0, sp, #40	@ 0x28
 800b608:	f00e fc06 	bl	8019e18 <siprintf>
            TPDF_OBJ_NUM_HEADER_TIME_START_STOP,\
            TPDF_OBJ_NUM_TABLE_TEMPL,\
            TPDF_OBJ_NUM_PAGE_2ND +2,\
            TPDF_OBJ_NUM_PAGE_RESOURCES);

    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_2ND, content_buffer, &pdf_monitor);
 800b60c:	002b      	movs	r3, r5
 800b60e:	aa0a      	add	r2, sp, #40	@ 0x28
 800b610:	2114      	movs	r1, #20
 800b612:	9807      	ldr	r0, [sp, #28]
 800b614:	f00d f95a 	bl	80188cc <tpdf_add_new_obj>
    // obj 22: contain data content.
    // obj 24: contain data stream length
    // Open stream for writing:
    tpdf_start_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_2ND + 2, TPDF_OBJ_NUM_PAGE_2ND + 4, &pdf_monitor);
 800b618:	002b      	movs	r3, r5
 800b61a:	2218      	movs	r2, #24
 800b61c:	0021      	movs	r1, r4
 800b61e:	9807      	ldr	r0, [sp, #28]
 800b620:	f00d f97a 	bl	8018918 <tpdf_start_new_stream_obj>
}
 800b624:	b04b      	add	sp, #300	@ 0x12c
 800b626:	bdf0      	pop	{r4, r5, r6, r7, pc}
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 51 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 51 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800b628:	0021      	movs	r1, r4
 800b62a:	25fc      	movs	r5, #252	@ 0xfc
 800b62c:	2346      	movs	r3, #70	@ 0x46
 800b62e:	22c3      	movs	r2, #195	@ 0xc3
 800b630:	05ad      	lsls	r5, r5, #22
 800b632:	3133      	adds	r1, #51	@ 0x33
 800b634:	9504      	str	r5, [sp, #16]
 800b636:	9503      	str	r5, [sp, #12]
 800b638:	9502      	str	r5, [sp, #8]
 800b63a:	9501      	str	r5, [sp, #4]
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	0092      	lsls	r2, r2, #2
 800b640:	000b      	movs	r3, r1
 800b642:	9807      	ldr	r0, [sp, #28]
 800b644:	f00d f8d8 	bl	80187f8 <tpdf_draw_line>
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800b648:	0021      	movs	r1, r4
 800b64a:	2346      	movs	r3, #70	@ 0x46
 800b64c:	22c3      	movs	r2, #195	@ 0xc3
 800b64e:	3145      	adds	r1, #69	@ 0x45
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 51 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 51 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800b650:	0006      	movs	r6, r0
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800b652:	9504      	str	r5, [sp, #16]
 800b654:	9503      	str	r5, [sp, #12]
 800b656:	9502      	str	r5, [sp, #8]
 800b658:	9501      	str	r5, [sp, #4]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	0092      	lsls	r2, r2, #2
 800b65e:	000b      	movs	r3, r1
 800b660:	9807      	ldr	r0, [sp, #28]
 800b662:	f00d f8c9 	bl	80187f8 <tpdf_draw_line>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800b666:	2506      	movs	r5, #6
 800b668:	0021      	movs	r1, r4
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800b66a:	9b08      	ldr	r3, [sp, #32]
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800b66c:	4a26      	ldr	r2, [pc, #152]	@ (800b708 <generate_pdf_raw_report+0x28c>)
      stream_length += tpdf_draw_line(&pdf_file, (PDF_PAGE_LEFT + 69 + i *CHILD_TABLE_SIZE), PDF_PAGE_TOP-20, (PDF_PAGE_LEFT + 69 + i *99), PDF_PAGE_BOTTOM + 20, 0.5, 0.5,0.5,0.5);
 800b66e:	1836      	adds	r6, r6, r0
 800b670:	18f6      	adds	r6, r6, r3
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800b672:	4b26      	ldr	r3, [pc, #152]	@ (800b70c <generate_pdf_raw_report+0x290>)
 800b674:	310a      	adds	r1, #10
 800b676:	9204      	str	r2, [sp, #16]
 800b678:	9500      	str	r5, [sp, #0]
 800b67a:	4a25      	ldr	r2, [pc, #148]	@ (800b710 <generate_pdf_raw_report+0x294>)
 800b67c:	9807      	ldr	r0, [sp, #28]
 800b67e:	9703      	str	r7, [sp, #12]
 800b680:	9702      	str	r7, [sp, #8]
 800b682:	9701      	str	r7, [sp, #4]
 800b684:	9308      	str	r3, [sp, #32]
 800b686:	f00d f881 	bl	801878c <tpdf_draw_colored_text>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800b68a:	0021      	movs	r1, r4
 800b68c:	4b21      	ldr	r3, [pc, #132]	@ (800b714 <generate_pdf_raw_report+0x298>)
 800b68e:	4a20      	ldr	r2, [pc, #128]	@ (800b710 <generate_pdf_raw_report+0x294>)
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 10 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"Date Time");
 800b690:	1836      	adds	r6, r6, r0
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800b692:	3138      	adds	r1, #56	@ 0x38
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	9500      	str	r5, [sp, #0]
 800b698:	9b08      	ldr	r3, [sp, #32]
 800b69a:	9807      	ldr	r0, [sp, #28]
 800b69c:	9703      	str	r7, [sp, #12]
 800b69e:	9702      	str	r7, [sp, #8]
 800b6a0:	9701      	str	r7, [sp, #4]
 800b6a2:	f00d f873 	bl	801878c <tpdf_draw_colored_text>
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 76 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"uSv/h");
 800b6a6:	0021      	movs	r1, r4
 800b6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b718 <generate_pdf_raw_report+0x29c>)
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 56 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"C");
 800b6aa:	1836      	adds	r6, r6, r0
      stream_length += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT + 76 + i *CHILD_TABLE_SIZE, PDF_PAGE_TOP - 30 ,"F2",6,0,0,0,"uSv/h");
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	9500      	str	r5, [sp, #0]
 800b6b0:	9b08      	ldr	r3, [sp, #32]
 800b6b2:	4a17      	ldr	r2, [pc, #92]	@ (800b710 <generate_pdf_raw_report+0x294>)
 800b6b4:	9807      	ldr	r0, [sp, #28]
 800b6b6:	314c      	adds	r1, #76	@ 0x4c
 800b6b8:	9703      	str	r7, [sp, #12]
 800b6ba:	9702      	str	r7, [sp, #8]
 800b6bc:	9701      	str	r7, [sp, #4]
 800b6be:	f00d f865 	bl	801878c <tpdf_draw_colored_text>
 800b6c2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b6c4:	1835      	adds	r5, r6, r0
  for (int i = 0; i<= CHILD_TABLE_NUMS; i++ ) {
 800b6c6:	e741      	b.n	800b54c <generate_pdf_raw_report+0xd0>
 800b6c8:	0801ed6f 	.word	0x0801ed6f
 800b6cc:	200030b4 	.word	0x200030b4
 800b6d0:	0801ed84 	.word	0x0801ed84
 800b6d4:	0801ed8e 	.word	0x0801ed8e
 800b6d8:	20002cac 	.word	0x20002cac
 800b6dc:	0801edb1 	.word	0x0801edb1
 800b6e0:	0801edb7 	.word	0x0801edb7
 800b6e4:	0801ee0f 	.word	0x0801ee0f
 800b6e8:	0801ee1a 	.word	0x0801ee1a
 800b6ec:	0801ee72 	.word	0x0801ee72
 800b6f0:	00000221 	.word	0x00000221
 800b6f4:	000002fd 	.word	0x000002fd
 800b6f8:	0801eeb6 	.word	0x0801eeb6
 800b6fc:	0801eeb3 	.word	0x0801eeb3
 800b700:	0801eecc 	.word	0x0801eecc
 800b704:	0801eed3 	.word	0x0801eed3
 800b708:	0801ef36 	.word	0x0801ef36
 800b70c:	0801ef33 	.word	0x0801ef33
 800b710:	00000302 	.word	0x00000302
 800b714:	0801e1f2 	.word	0x0801e1f2
 800b718:	0801ef40 	.word	0x0801ef40

0800b71c <pdf_page_handle_for_new_datapoints>:

}

// Number of report page equal record_nums / (number of data points per page)
static void pdf_page_handle_for_new_datapoints(const UINT current_page) {
 800b71c:	b5f0      	push	{r4, r5, r6, r7, lr}

	char content_buffer[128];
    int stream_length = 0;
    UINT current_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page *10);
 800b71e:	240a      	movs	r4, #10
 800b720:	4344      	muls	r4, r0
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;

    // End of stream of previous obj page 
    // FIXME: how to get stream length of current page?
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, stream_length ,&pdf_monitor );
 800b722:	0021      	movs	r1, r4
 800b724:	4e12      	ldr	r6, [pc, #72]	@ (800b770 <pdf_page_handle_for_new_datapoints+0x54>)
 800b726:	4d13      	ldr	r5, [pc, #76]	@ (800b774 <pdf_page_handle_for_new_datapoints+0x58>)
static void pdf_page_handle_for_new_datapoints(const UINT current_page) {
 800b728:	b0a5      	sub	sp, #148	@ 0x94
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, stream_length ,&pdf_monitor );
 800b72a:	0033      	movs	r3, r6
 800b72c:	2200      	movs	r2, #0
 800b72e:	0028      	movs	r0, r5
 800b730:	3118      	adds	r1, #24
 800b732:	f00d f90d 	bl	8018950 <tpdf_end_new_stream_obj>

    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R %d 0 R %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800b736:	0027      	movs	r7, r4
 800b738:	2311      	movs	r3, #17
 800b73a:	3720      	adds	r7, #32
 800b73c:	9302      	str	r3, [sp, #8]
 800b73e:	3b09      	subs	r3, #9
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	2203      	movs	r2, #3
 800b744:	490c      	ldr	r1, [pc, #48]	@ (800b778 <pdf_page_handle_for_new_datapoints+0x5c>)
 800b746:	9701      	str	r7, [sp, #4]
 800b748:	3b02      	subs	r3, #2
 800b74a:	a804      	add	r0, sp, #16
 800b74c:	f00e fb64 	bl	8019e18 <siprintf>
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;
 800b750:	0021      	movs	r1, r4
            TPDF_OBJ_NUM_HEADER_TIME_START_STOP,\
            TPDF_OBJ_NUM_TABLE_TEMPL,\
            (next_obj  +2),\
            TPDF_OBJ_NUM_PAGE_RESOURCES);

    tpdf_add_new_obj(&pdf_file, next_obj, content_buffer, &pdf_monitor);
 800b752:	0033      	movs	r3, r6
 800b754:	aa04      	add	r2, sp, #16
 800b756:	0028      	movs	r0, r5
    UINT next_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page +1) *10;
 800b758:	311e      	adds	r1, #30
    tpdf_add_new_obj(&pdf_file, next_obj, content_buffer, &pdf_monitor);
 800b75a:	f00d f8b7 	bl	80188cc <tpdf_add_new_obj>
    // obj x2: contain data content.
    // obj x4: contain data stream length
    // Open stream for writing:
    tpdf_start_new_stream_obj(&pdf_file, next_obj + 2, next_obj + 4, &pdf_monitor);
 800b75e:	0022      	movs	r2, r4
 800b760:	0033      	movs	r3, r6
 800b762:	0039      	movs	r1, r7
 800b764:	0028      	movs	r0, r5
 800b766:	3222      	adds	r2, #34	@ 0x22
 800b768:	f00d f8d6 	bl	8018918 <tpdf_start_new_stream_obj>
}
 800b76c:	b025      	add	sp, #148	@ 0x94
 800b76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b770:	20002cac 	.word	0x20002cac
 800b774:	200030b4 	.word	0x200030b4
 800b778:	0801eed3 	.word	0x0801eed3

0800b77c <pdf_alarm_row.constprop.0>:
static int pdf_alarm_row(FIL* file_ptr,
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	0016      	movs	r6, r2
    char row_commands[512] = "";
 800b780:	2280      	movs	r2, #128	@ 0x80
static int pdf_alarm_row(FIL* file_ptr,
 800b782:	4c5c      	ldr	r4, [pc, #368]	@ (800b8f4 <pdf_alarm_row.constprop.0+0x178>)
    char row_commands[512] = "";
 800b784:	0092      	lsls	r2, r2, #2
static int pdf_alarm_row(FIL* file_ptr,
 800b786:	44a5      	add	sp, r4
 800b788:	000d      	movs	r5, r1
 800b78a:	0004      	movs	r4, r0
    char row_commands[512] = "";
 800b78c:	2100      	movs	r1, #0
 800b78e:	a82c      	add	r0, sp, #176	@ 0xb0
 800b790:	f00e fc5e 	bl	801a050 <memset>
    const uint8_t state = GET_ALARM_STATE(device_config.alarm_state, alarm_pos);
 800b794:	4b58      	ldr	r3, [pc, #352]	@ (800b8f8 <pdf_alarm_row.constprop.0+0x17c>)
    if (disabled) {
 800b796:	2203      	movs	r2, #3
    const uint8_t state = GET_ALARM_STATE(device_config.alarm_state, alarm_pos);
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	40f3      	lsrs	r3, r6
    if (disabled) {
 800b79c:	4013      	ands	r3, r2
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d144      	bne.n	800b82c <pdf_alarm_row.constprop.0+0xb0>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 55  %d Td () Tj ET\n",
 800b7a2:	0023      	movs	r3, r4
 800b7a4:	3205      	adds	r2, #5
 800b7a6:	4955      	ldr	r1, [pc, #340]	@ (800b8fc <pdf_alarm_row.constprop.0+0x180>)
 800b7a8:	a80c      	add	r0, sp, #48	@ 0x30
 800b7aa:	f00e fb35 	bl	8019e18 <siprintf>
        strcat(row_commands, temp_buffer);
 800b7ae:	a90c      	add	r1, sp, #48	@ 0x30
 800b7b0:	a82c      	add	r0, sp, #176	@ 0xb0
 800b7b2:	f00e fc55 	bl	801a060 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 155 %d Td () Tj ET\n",
 800b7b6:	0023      	movs	r3, r4
 800b7b8:	2208      	movs	r2, #8
 800b7ba:	4951      	ldr	r1, [pc, #324]	@ (800b900 <pdf_alarm_row.constprop.0+0x184>)
 800b7bc:	a80c      	add	r0, sp, #48	@ 0x30
 800b7be:	f00e fb2b 	bl	8019e18 <siprintf>
        strcat(row_commands, temp_buffer);
 800b7c2:	a90c      	add	r1, sp, #48	@ 0x30
 800b7c4:	a82c      	add	r0, sp, #176	@ 0xb0
 800b7c6:	f00e fc4b 	bl	801a060 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 245 %d Td () Tj ET\n",
 800b7ca:	0023      	movs	r3, r4
 800b7cc:	2208      	movs	r2, #8
 800b7ce:	494d      	ldr	r1, [pc, #308]	@ (800b904 <pdf_alarm_row.constprop.0+0x188>)
 800b7d0:	a80c      	add	r0, sp, #48	@ 0x30
 800b7d2:	f00e fb21 	bl	8019e18 <siprintf>
        strcat(row_commands, temp_buffer);
 800b7d6:	a90c      	add	r1, sp, #48	@ 0x30
 800b7d8:	a82c      	add	r0, sp, #176	@ 0xb0
 800b7da:	f00e fc41 	bl	801a060 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 325 %d Td () Tj ET\n",
 800b7de:	0023      	movs	r3, r4
 800b7e0:	2208      	movs	r2, #8
 800b7e2:	4949      	ldr	r1, [pc, #292]	@ (800b908 <pdf_alarm_row.constprop.0+0x18c>)
 800b7e4:	a80c      	add	r0, sp, #48	@ 0x30
 800b7e6:	f00e fb17 	bl	8019e18 <siprintf>
        strcat(row_commands, temp_buffer);
 800b7ea:	a90c      	add	r1, sp, #48	@ 0x30
 800b7ec:	a82c      	add	r0, sp, #176	@ 0xb0
 800b7ee:	f00e fc37 	bl	801a060 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 435 %d Td () Tj ET\n",
 800b7f2:	0023      	movs	r3, r4
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	4945      	ldr	r1, [pc, #276]	@ (800b90c <pdf_alarm_row.constprop.0+0x190>)
 800b7f8:	a80c      	add	r0, sp, #48	@ 0x30
 800b7fa:	f00e fb0d 	bl	8019e18 <siprintf>
        strcat(row_commands, temp_buffer);
 800b7fe:	a90c      	add	r1, sp, #48	@ 0x30
 800b800:	a82c      	add	r0, sp, #176	@ 0xb0
 800b802:	f00e fc2d 	bl	801a060 <strcat>
        sprintf(temp_buffer, "BT 0 0 0 rg /F1 %d Tf 500 %d Td () Tj ET\n",
 800b806:	0023      	movs	r3, r4
 800b808:	2208      	movs	r2, #8
 800b80a:	4941      	ldr	r1, [pc, #260]	@ (800b910 <pdf_alarm_row.constprop.0+0x194>)
 800b80c:	a80c      	add	r0, sp, #48	@ 0x30
 800b80e:	f00e fb03 	bl	8019e18 <siprintf>
        strcat(row_commands, temp_buffer);
 800b812:	a90c      	add	r1, sp, #48	@ 0x30
 800b814:	a82c      	add	r0, sp, #176	@ 0xb0
 800b816:	f00e fc23 	bl	801a060 <strcat>
    if (file_ptr) { fatfs_write_string(file_ptr, row_commands); return 0; }
 800b81a:	493e      	ldr	r1, [pc, #248]	@ (800b914 <pdf_alarm_row.constprop.0+0x198>)
 800b81c:	a82c      	add	r0, sp, #176	@ 0xb0
 800b81e:	f009 fee9 	bl	80155f4 <f_puts>
}
 800b822:	2000      	movs	r0, #0
 800b824:	23ac      	movs	r3, #172	@ 0xac
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	449d      	add	sp, r3
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
                data->status, SECTION_CONTENT_FONT_SIZE, y_pos,
 800b82c:	002b      	movs	r3, r5
 800b82e:	3328      	adds	r3, #40	@ 0x28
        sprintf(temp_buffer,
 800b830:	781a      	ldrb	r2, [r3, #0]
                data->zone_name, (int16_t)data->threshold);
 800b832:	2110      	movs	r1, #16
 800b834:	5e6b      	ldrsh	r3, [r5, r1]
    if (data->zone_name[0] == 'T') {
 800b836:	7829      	ldrb	r1, [r5, #0]
 800b838:	2954      	cmp	r1, #84	@ 0x54
 800b83a:	d158      	bne.n	800b8ee <pdf_alarm_row.constprop.0+0x172>
        sprintf(temp_buffer,
 800b83c:	4936      	ldr	r1, [pc, #216]	@ (800b918 <pdf_alarm_row.constprop.0+0x19c>)
            data->status, SECTION_CONTENT_FONT_SIZE, y_pos, tmp_time_buff);
 800b83e:	002e      	movs	r6, r5
        sprintf(temp_buffer,
 800b840:	9302      	str	r3, [sp, #8]
 800b842:	9501      	str	r5, [sp, #4]
 800b844:	2308      	movs	r3, #8
 800b846:	9400      	str	r4, [sp, #0]
 800b848:	a80c      	add	r0, sp, #48	@ 0x30
 800b84a:	f00e fae5 	bl	8019e18 <siprintf>
    strcat(row_commands, temp_buffer);
 800b84e:	a90c      	add	r1, sp, #48	@ 0x30
 800b850:	a82c      	add	r0, sp, #176	@ 0xb0
 800b852:	f00e fc05 	bl	801a060 <strcat>
    seconds_to_dhms_string_long(data->alarm_delay_sec, tmp_time_buff, sizeof(tmp_time_buff));
 800b856:	2220      	movs	r2, #32
 800b858:	6968      	ldr	r0, [r5, #20]
 800b85a:	a904      	add	r1, sp, #16
 800b85c:	f7ff fde8 	bl	800b430 <seconds_to_dhms_string_long>
            data->status, SECTION_CONTENT_FONT_SIZE, y_pos, tmp_time_buff);
 800b860:	3628      	adds	r6, #40	@ 0x28
    sprintf(temp_buffer,
 800b862:	ab04      	add	r3, sp, #16
 800b864:	7832      	ldrb	r2, [r6, #0]
 800b866:	492d      	ldr	r1, [pc, #180]	@ (800b91c <pdf_alarm_row.constprop.0+0x1a0>)
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	9400      	str	r4, [sp, #0]
 800b86c:	2308      	movs	r3, #8
 800b86e:	a80c      	add	r0, sp, #48	@ 0x30
 800b870:	f00e fad2 	bl	8019e18 <siprintf>
    strcat(row_commands, temp_buffer);
 800b874:	a90c      	add	r1, sp, #48	@ 0x30
 800b876:	a82c      	add	r0, sp, #176	@ 0xb0
 800b878:	f00e fbf2 	bl	801a060 <strcat>
    sprintf(temp_buffer,
 800b87c:	002b      	movs	r3, r5
 800b87e:	3318      	adds	r3, #24
 800b880:	2208      	movs	r2, #8
 800b882:	4927      	ldr	r1, [pc, #156]	@ (800b920 <pdf_alarm_row.constprop.0+0x1a4>)
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	a80c      	add	r0, sp, #48	@ 0x30
 800b888:	0023      	movs	r3, r4
 800b88a:	f00e fac5 	bl	8019e18 <siprintf>
    strcat(row_commands, temp_buffer);
 800b88e:	a90c      	add	r1, sp, #48	@ 0x30
 800b890:	a82c      	add	r0, sp, #176	@ 0xb0
 800b892:	f00e fbe5 	bl	801a060 <strcat>
    seconds_to_dhms_string_long(data->total_time_in_violation_minutes, tmp_time_buff, sizeof(tmp_time_buff));
 800b896:	2220      	movs	r2, #32
 800b898:	6a28      	ldr	r0, [r5, #32]
 800b89a:	a904      	add	r1, sp, #16
 800b89c:	f7ff fdc8 	bl	800b430 <seconds_to_dhms_string_long>
    sprintf(temp_buffer,
 800b8a0:	ab04      	add	r3, sp, #16
 800b8a2:	7832      	ldrb	r2, [r6, #0]
 800b8a4:	491f      	ldr	r1, [pc, #124]	@ (800b924 <pdf_alarm_row.constprop.0+0x1a8>)
 800b8a6:	9301      	str	r3, [sp, #4]
 800b8a8:	9400      	str	r4, [sp, #0]
 800b8aa:	2308      	movs	r3, #8
 800b8ac:	a80c      	add	r0, sp, #48	@ 0x30
 800b8ae:	f00e fab3 	bl	8019e18 <siprintf>
    strcat(row_commands, temp_buffer);
 800b8b2:	a90c      	add	r1, sp, #48	@ 0x30
 800b8b4:	a82c      	add	r0, sp, #176	@ 0xb0
 800b8b6:	f00e fbd3 	bl	801a060 <strcat>
    sprintf(temp_buffer,
 800b8ba:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b8bc:	7832      	ldrb	r2, [r6, #0]
 800b8be:	491a      	ldr	r1, [pc, #104]	@ (800b928 <pdf_alarm_row.constprop.0+0x1ac>)
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	9400      	str	r4, [sp, #0]
 800b8c4:	2308      	movs	r3, #8
 800b8c6:	a80c      	add	r0, sp, #48	@ 0x30
 800b8c8:	f00e faa6 	bl	8019e18 <siprintf>
    strcat(row_commands, temp_buffer);
 800b8cc:	a90c      	add	r1, sp, #48	@ 0x30
 800b8ce:	a82c      	add	r0, sp, #176	@ 0xb0
 800b8d0:	f00e fbc6 	bl	801a060 <strcat>
        const char *alr_status = (data->status == ALARM_STATUS_ALARM) ? "ALARM" : "OK";
 800b8d4:	7832      	ldrb	r2, [r6, #0]
 800b8d6:	4b15      	ldr	r3, [pc, #84]	@ (800b92c <pdf_alarm_row.constprop.0+0x1b0>)
 800b8d8:	2a01      	cmp	r2, #1
 800b8da:	d100      	bne.n	800b8de <pdf_alarm_row.constprop.0+0x162>
 800b8dc:	4b14      	ldr	r3, [pc, #80]	@ (800b930 <pdf_alarm_row.constprop.0+0x1b4>)
        sprintf(temp_buffer,
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	4914      	ldr	r1, [pc, #80]	@ (800b934 <pdf_alarm_row.constprop.0+0x1b8>)
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	9400      	str	r4, [sp, #0]
 800b8e6:	a80c      	add	r0, sp, #48	@ 0x30
 800b8e8:	f00e fa96 	bl	8019e18 <siprintf>
 800b8ec:	e791      	b.n	800b812 <pdf_alarm_row.constprop.0+0x96>
        sprintf(temp_buffer,
 800b8ee:	4912      	ldr	r1, [pc, #72]	@ (800b938 <pdf_alarm_row.constprop.0+0x1bc>)
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	e7a4      	b.n	800b83e <pdf_alarm_row.constprop.0+0xc2>
 800b8f4:	fffffd50 	.word	0xfffffd50
 800b8f8:	20000b50 	.word	0x20000b50
 800b8fc:	0801ef46 	.word	0x0801ef46
 800b900:	0801ef70 	.word	0x0801ef70
 800b904:	0801ef9a 	.word	0x0801ef9a
 800b908:	0801efc4 	.word	0x0801efc4
 800b90c:	0801efee 	.word	0x0801efee
 800b910:	0801f018 	.word	0x0801f018
 800b914:	200030b4 	.word	0x200030b4
 800b918:	0801f042 	.word	0x0801f042
 800b91c:	0801f0ac 	.word	0x0801f0ac
 800b920:	0801f0d9 	.word	0x0801f0d9
 800b924:	0801f105 	.word	0x0801f105
 800b928:	0801f132 	.word	0x0801f132
 800b92c:	0801e6cb 	.word	0x0801e6cb
 800b930:	0801e6c5 	.word	0x0801e6c5
 800b934:	0801f15f 	.word	0x0801f15f
 800b938:	0801f075 	.word	0x0801f075

0800b93c <draw_section_title.constprop.0>:
    int len = draw_title_background(file_ptr, y_pos - 12);
 800b93c:	0002      	movs	r2, r0
static int draw_section_title(FIL* file_ptr, int y_pos, const char* title) {
 800b93e:	b570      	push	{r4, r5, r6, lr}
 800b940:	b096      	sub	sp, #88	@ 0x58
 800b942:	0004      	movs	r4, r0
 800b944:	000d      	movs	r5, r1
    int len = draw_title_background(file_ptr, y_pos - 12);
 800b946:	3a0c      	subs	r2, #12
    sprintf(temp_buffer, "q\n0.9 0.9 0.9 rg\n50 %d 495 15 re\nf\nQ\n", y_pos);
 800b948:	490c      	ldr	r1, [pc, #48]	@ (800b97c <draw_section_title.constprop.0+0x40>)
 800b94a:	a806      	add	r0, sp, #24
 800b94c:	f00e fa64 	bl	8019e18 <siprintf>
        fatfs_write_string(file_ptr, temp_buffer);
 800b950:	4e0b      	ldr	r6, [pc, #44]	@ (800b980 <draw_section_title.constprop.0+0x44>)
 800b952:	a806      	add	r0, sp, #24
 800b954:	0031      	movs	r1, r6
 800b956:	f009 fe4d 	bl	80155f4 <f_puts>
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,y_pos-8,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,title);
 800b95a:	2100      	movs	r1, #0
 800b95c:	0022      	movs	r2, r4
 800b95e:	9103      	str	r1, [sp, #12]
 800b960:	9102      	str	r1, [sp, #8]
 800b962:	9101      	str	r1, [sp, #4]
 800b964:	210a      	movs	r1, #10
 800b966:	0030      	movs	r0, r6
 800b968:	9100      	str	r1, [sp, #0]
 800b96a:	4b06      	ldr	r3, [pc, #24]	@ (800b984 <draw_section_title.constprop.0+0x48>)
 800b96c:	3a08      	subs	r2, #8
 800b96e:	9504      	str	r5, [sp, #16]
 800b970:	312d      	adds	r1, #45	@ 0x2d
 800b972:	f00c ff0b 	bl	801878c <tpdf_draw_colored_text>
}
 800b976:	b016      	add	sp, #88	@ 0x58
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	46c0      	nop			@ (mov r8, r8)
 800b97c:	0801f18c 	.word	0x0801f18c
 800b980:	200030b4 	.word	0x200030b4
 800b984:	0801ef33 	.word	0x0801ef33

0800b988 <draw_key_value_pair.constprop.0>:
static int draw_key_value_pair(FIL* file_ptr, int x_pos, int y_pos, const char* key, const char* value) {
 800b988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b98a:	000d      	movs	r5, r1
 800b98c:	0004      	movs	r4, r0
 800b98e:	b0c3      	sub	sp, #268	@ 0x10c
 800b990:	001e      	movs	r6, r3
    sprintf(temp_buffer, "BT /F2 %d Tf 0 0 0 rg %d %d Td (%s) Tj ET\n",SECTION_CONTENT_FONT_SIZE, x_pos, y_pos, key);
 800b992:	9201      	str	r2, [sp, #4]
 800b994:	0003      	movs	r3, r0
 800b996:	2208      	movs	r2, #8
 800b998:	490c      	ldr	r1, [pc, #48]	@ (800b9cc <draw_key_value_pair.constprop.0+0x44>)
 800b99a:	9500      	str	r5, [sp, #0]
 800b99c:	a802      	add	r0, sp, #8
 800b99e:	f00e fa3b 	bl	8019e18 <siprintf>
    if(file_ptr) fatfs_write_string(file_ptr, temp_buffer);
 800b9a2:	4f0b      	ldr	r7, [pc, #44]	@ (800b9d0 <draw_key_value_pair.constprop.0+0x48>)
 800b9a4:	a802      	add	r0, sp, #8
 800b9a6:	0039      	movs	r1, r7
 800b9a8:	f009 fe24 	bl	80155f4 <f_puts>
    sprintf(temp_buffer, "BT /F1 %d Tf 0 0 0 rg %d %d Td (%s) Tj ET\n",SECTION_CONTENT_FONT_SIZE, x_pos + 125, y_pos, value);
 800b9ac:	0023      	movs	r3, r4
 800b9ae:	2208      	movs	r2, #8
 800b9b0:	337d      	adds	r3, #125	@ 0x7d
 800b9b2:	4908      	ldr	r1, [pc, #32]	@ (800b9d4 <draw_key_value_pair.constprop.0+0x4c>)
 800b9b4:	9601      	str	r6, [sp, #4]
 800b9b6:	9500      	str	r5, [sp, #0]
 800b9b8:	a802      	add	r0, sp, #8
 800b9ba:	f00e fa2d 	bl	8019e18 <siprintf>
    if(file_ptr) fatfs_write_string(file_ptr, temp_buffer);
 800b9be:	0039      	movs	r1, r7
 800b9c0:	a802      	add	r0, sp, #8
 800b9c2:	f009 fe17 	bl	80155f4 <f_puts>
}
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	b043      	add	sp, #268	@ 0x10c
 800b9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9cc:	0801f1b2 	.word	0x0801f1b2
 800b9d0:	200030b4 	.word	0x200030b4
 800b9d4:	0801f1dd 	.word	0x0801f1dd

0800b9d8 <pdf_chart_plot_data.constprop.0>:
static void pdf_chart_plot_data(FIL* file_p, int y_pos, float* data, int start_index, int num_points_in_chunk, int total_points, float r, float g, float b, float data_min, float data_max) {
 800b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9da:	b08f      	sub	sp, #60	@ 0x3c
 800b9dc:	000c      	movs	r4, r1
 800b9de:	9006      	str	r0, [sp, #24]
    if (num_points_in_chunk < 2) {
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d06e      	beq.n	800bac2 <pdf_chart_plot_data.constprop.0+0xea>
    const int chart_y_start = y_pos - FIELD_SPACING;
 800b9e4:	0001      	movs	r1, r0
 800b9e6:	18d3      	adds	r3, r2, r3
 800b9e8:	3914      	subs	r1, #20
 800b9ea:	9109      	str	r1, [sp, #36]	@ 0x24
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800b9ec:	1c57      	adds	r7, r2, #1
 800b9ee:	930a      	str	r3, [sp, #40]	@ 0x28
        float x1 = map_value((float)(start_index + i), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800b9f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9f2:	1e58      	subs	r0, r3, #1
 800b9f4:	f7f5 fe9a 	bl	800172c <__aeabi_i2f>
 800b9f8:	1c06      	adds	r6, r0, #0
        float y1 = map_value(data[i], data_min, data_max, chart_y_start - CHART_HEIGHT, chart_y_start);
 800b9fa:	9806      	ldr	r0, [sp, #24]
 800b9fc:	380f      	subs	r0, #15
 800b9fe:	38ff      	subs	r0, #255	@ 0xff
 800ba00:	f7f5 fe94 	bl	800172c <__aeabi_i2f>
 800ba04:	1c05      	adds	r5, r0, #0
 800ba06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba08:	f7f5 fe90 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba0c:	1c29      	adds	r1, r5, #0
 800ba0e:	f7f5 fbf3 	bl	80011f8 <__aeabi_fsub>
 800ba12:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ba14:	9007      	str	r0, [sp, #28]
 800ba16:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800ba18:	f7f5 fbee 	bl	80011f8 <__aeabi_fsub>
 800ba1c:	9008      	str	r0, [sp, #32]
        float x2 = map_value((float)(start_index + i + 1), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800ba1e:	0038      	movs	r0, r7
 800ba20:	f7f5 fe84 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba24:	4928      	ldr	r1, [pc, #160]	@ (800bac8 <pdf_chart_plot_data.constprop.0+0xf0>)
 800ba26:	f7f5 fa8d 	bl	8000f44 <__aeabi_fmul>
 800ba2a:	1c31      	adds	r1, r6, #0
 800ba2c:	f7f5 f8bc 	bl	8000ba8 <__aeabi_fdiv>
 800ba30:	4926      	ldr	r1, [pc, #152]	@ (800bacc <pdf_chart_plot_data.constprop.0+0xf4>)
 800ba32:	f7f4 fec7 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800ba36:	f7f5 fe59 	bl	80016ec <__aeabi_f2iz>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba3a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800ba3c:	900b      	str	r0, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba3e:	6820      	ldr	r0, [r4, #0]
 800ba40:	f7f5 fbda 	bl	80011f8 <__aeabi_fsub>
 800ba44:	9907      	ldr	r1, [sp, #28]
 800ba46:	f7f5 fa7d 	bl	8000f44 <__aeabi_fmul>
 800ba4a:	9908      	ldr	r1, [sp, #32]
 800ba4c:	f7f5 f8ac 	bl	8000ba8 <__aeabi_fdiv>
 800ba50:	1c29      	adds	r1, r5, #0
 800ba52:	f7f4 feb7 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800ba56:	f7f5 fe49 	bl	80016ec <__aeabi_f2iz>
 800ba5a:	900c      	str	r0, [sp, #48]	@ 0x30
        float x1 = map_value((float)(start_index + i), 0.0f, (float)(total_points - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800ba5c:	1e78      	subs	r0, r7, #1
 800ba5e:	f7f5 fe65 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba62:	4919      	ldr	r1, [pc, #100]	@ (800bac8 <pdf_chart_plot_data.constprop.0+0xf0>)
 800ba64:	f7f5 fa6e 	bl	8000f44 <__aeabi_fmul>
 800ba68:	1c31      	adds	r1, r6, #0
 800ba6a:	f7f5 f89d 	bl	8000ba8 <__aeabi_fdiv>
 800ba6e:	4917      	ldr	r1, [pc, #92]	@ (800bacc <pdf_chart_plot_data.constprop.0+0xf4>)
 800ba70:	f7f4 fea8 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800ba74:	f7f5 fe3a 	bl	80016ec <__aeabi_f2iz>
 800ba78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba7a:	4e15      	ldr	r6, [pc, #84]	@ (800bad0 <pdf_chart_plot_data.constprop.0+0xf8>)
 800ba7c:	900d      	str	r0, [sp, #52]	@ 0x34
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	2300      	movs	r3, #0
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba86:	9917      	ldr	r1, [sp, #92]	@ 0x5c
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800ba88:	9302      	str	r3, [sp, #8]
 800ba8a:	4b12      	ldr	r3, [pc, #72]	@ (800bad4 <pdf_chart_plot_data.constprop.0+0xfc>)
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800ba8c:	3701      	adds	r7, #1
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800ba8e:	9301      	str	r3, [sp, #4]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ba90:	6860      	ldr	r0, [r4, #4]
 800ba92:	f7f5 fbb1 	bl	80011f8 <__aeabi_fsub>
 800ba96:	9907      	ldr	r1, [sp, #28]
 800ba98:	f7f5 fa54 	bl	8000f44 <__aeabi_fmul>
 800ba9c:	9908      	ldr	r1, [sp, #32]
 800ba9e:	f7f5 f883 	bl	8000ba8 <__aeabi_fdiv>
 800baa2:	1c29      	adds	r1, r5, #0
 800baa4:	f7f4 fe8e 	bl	80007c4 <__aeabi_fadd>
        tpdf_draw_line(file_p, (int)x1, (int)y1, (int)x2, (int)y2, 1.25, r, g, b);
 800baa8:	f7f5 fe20 	bl	80016ec <__aeabi_f2iz>
 800baac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baae:	9000      	str	r0, [sp, #0]
 800bab0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bab2:	0030      	movs	r0, r6
 800bab4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bab6:	f00c fe9f 	bl	80187f8 <tpdf_draw_line>
    for (int i = 0; i < num_points_in_chunk - 1; i++) {
 800baba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800babc:	3404      	adds	r4, #4
 800babe:	42bb      	cmp	r3, r7
 800bac0:	d196      	bne.n	800b9f0 <pdf_chart_plot_data.constprop.0+0x18>
}
 800bac2:	b00f      	add	sp, #60	@ 0x3c
 800bac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac6:	46c0      	nop			@ (mov r8, r8)
 800bac8:	43e10000 	.word	0x43e10000
 800bacc:	42960000 	.word	0x42960000
 800bad0:	200030b4 	.word	0x200030b4
 800bad4:	3fa00000 	.word	0x3fa00000

0800bad8 <pdf_insert_datapoint_to_table.constprop.0>:
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800bad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bada:	4c7b      	ldr	r4, [pc, #492]	@ (800bcc8 <pdf_insert_datapoint_to_table.constprop.0+0x1f0>)
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800badc:	1c16      	adds	r6, r2, #0
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bade:	0022      	movs	r2, r4
static int pdf_insert_datapoint_to_table(const UINT record_num,
 800bae0:	b0bf      	sub	sp, #252	@ 0xfc
 800bae2:	910c      	str	r1, [sp, #48]	@ 0x30
 800bae4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bae6:	1c1f      	adds	r7, r3, #0
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bae8:	329c      	adds	r2, #156	@ 0x9c
 800baea:	4b78      	ldr	r3, [pc, #480]	@ (800bccc <pdf_insert_datapoint_to_table.constprop.0+0x1f4>)
 800baec:	7812      	ldrb	r2, [r2, #0]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	0212      	lsls	r2, r2, #8
 800baf2:	431a      	orrs	r2, r3
 800baf4:	0023      	movs	r3, r4
 800baf6:	339d      	adds	r3, #157	@ 0x9d
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	041b      	lsls	r3, r3, #16
 800bafc:	4313      	orrs	r3, r2
 800bafe:	0022      	movs	r2, r4
 800bb00:	329e      	adds	r2, #158	@ 0x9e
 800bb02:	7815      	ldrb	r5, [r2, #0]
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800bb04:	0022      	movs	r2, r4
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bb06:	062d      	lsls	r5, r5, #24
 800bb08:	431d      	orrs	r5, r3
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800bb0a:	0023      	movs	r3, r4
 800bb0c:	32a4      	adds	r2, #164	@ 0xa4
 800bb0e:	7812      	ldrb	r2, [r2, #0]
 800bb10:	33a3      	adds	r3, #163	@ 0xa3
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	0212      	lsls	r2, r2, #8
 800bb16:	431a      	orrs	r2, r3
 800bb18:	0023      	movs	r3, r4
 800bb1a:	33a5      	adds	r3, #165	@ 0xa5
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	041b      	lsls	r3, r3, #16
 800bb20:	4313      	orrs	r3, r2
 800bb22:	0022      	movs	r2, r4
 800bb24:	32a6      	adds	r2, #166	@ 0xa6
 800bb26:	7812      	ldrb	r2, [r2, #0]
 800bb28:	0612      	lsls	r2, r2, #24
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	920d      	str	r2, [sp, #52]	@ 0x34
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800bb2e:	0022      	movs	r2, r4
 800bb30:	0023      	movs	r3, r4
 800bb32:	32a2      	adds	r2, #162	@ 0xa2
 800bb34:	7810      	ldrb	r0, [r2, #0]
 800bb36:	33a1      	adds	r3, #161	@ 0xa1
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	0200      	lsls	r0, r0, #8
 800bb3c:	4318      	orrs	r0, r3
 800bb3e:	0400      	lsls	r0, r0, #16
 800bb40:	1400      	asrs	r0, r0, #16
 800bb42:	f7f5 fdf3 	bl	800172c <__aeabi_i2f>
 800bb46:	4962      	ldr	r1, [pc, #392]	@ (800bcd0 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800bb48:	f7f5 f82e 	bl	8000ba8 <__aeabi_fdiv>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800bb4c:	0023      	movs	r3, r4
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800bb4e:	9007      	str	r0, [sp, #28]
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800bb50:	33a9      	adds	r3, #169	@ 0xa9
 800bb52:	781a      	ldrb	r2, [r3, #0]
 800bb54:	0023      	movs	r3, r4
 800bb56:	33aa      	adds	r3, #170	@ 0xaa
 800bb58:	781b      	ldrb	r3, [r3, #0]
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800bb5a:	2100      	movs	r1, #0
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	041b      	lsls	r3, r3, #16
 800bb62:	141b      	asrs	r3, r3, #16
 800bb64:	9308      	str	r3, [sp, #32]
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800bb66:	0023      	movs	r3, r4
 800bb68:	339f      	adds	r3, #159	@ 0x9f
 800bb6a:	781a      	ldrb	r2, [r3, #0]
 800bb6c:	0023      	movs	r3, r4
 800bb6e:	33a0      	adds	r3, #160	@ 0xa0
 800bb70:	781b      	ldrb	r3, [r3, #0]
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800bb72:	1c38      	adds	r0, r7, #0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	4313      	orrs	r3, r2
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	141b      	asrs	r3, r3, #16
 800bb7c:	9309      	str	r3, [sp, #36]	@ 0x24
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800bb7e:	0023      	movs	r3, r4
 800bb80:	34a8      	adds	r4, #168	@ 0xa8
 800bb82:	33a7      	adds	r3, #167	@ 0xa7
 800bb84:	781a      	ldrb	r2, [r3, #0]
 800bb86:	7823      	ldrb	r3, [r4, #0]
 800bb88:	021b      	lsls	r3, r3, #8
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	041b      	lsls	r3, r3, #16
 800bb8e:	141b      	asrs	r3, r3, #16
 800bb90:	930a      	str	r3, [sp, #40]	@ 0x28
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800bb92:	f7f4 fccd 	bl	8000530 <__aeabi_fcmpge>
 800bb96:	1e04      	subs	r4, r0, #0
 800bb98:	d017      	beq.n	800bbca <pdf_insert_datapoint_to_table.constprop.0+0xf2>
    const float rh1 = dev_setting->alarm_rh1 / 100.0f;
 800bb9a:	0028      	movs	r0, r5
 800bb9c:	f7f5 fe16 	bl	80017cc <__aeabi_ui2f>
 800bba0:	494c      	ldr	r1, [pc, #304]	@ (800bcd4 <pdf_insert_datapoint_to_table.constprop.0+0x1fc>)
 800bba2:	f7f5 f801 	bl	8000ba8 <__aeabi_fdiv>
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800bba6:	1c39      	adds	r1, r7, #0
 800bba8:	f7f4 fca4 	bl	80004f4 <__aeabi_fcmplt>
 800bbac:	2401      	movs	r4, #1
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d10b      	bne.n	800bbca <pdf_insert_datapoint_to_table.constprop.0+0xf2>
    const float rh2 = dev_setting->alarm_rh2 / 100.0f;
 800bbb2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bbb4:	f7f5 fe0a 	bl	80017cc <__aeabi_ui2f>
 800bbb8:	4946      	ldr	r1, [pc, #280]	@ (800bcd4 <pdf_insert_datapoint_to_table.constprop.0+0x1fc>)
 800bbba:	f7f4 fff5 	bl	8000ba8 <__aeabi_fdiv>
    bool rad_alarm  = (radiation >= 0.0f) && (radiation > rh1 || radiation > rh2);
 800bbbe:	1c39      	adds	r1, r7, #0
 800bbc0:	f7f4 fc98 	bl	80004f4 <__aeabi_fcmplt>
 800bbc4:	1e43      	subs	r3, r0, #1
 800bbc6:	4198      	sbcs	r0, r3
 800bbc8:	0004      	movs	r4, r0
                       temperature >= th1 || temperature >= th2);
 800bbca:	9807      	ldr	r0, [sp, #28]
 800bbcc:	1c31      	adds	r1, r6, #0
 800bbce:	f7f4 fca5 	bl	800051c <__aeabi_fcmpgt>
 800bbd2:	2501      	movs	r5, #1
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d121      	bne.n	800bc1c <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800bbd8:	9808      	ldr	r0, [sp, #32]
 800bbda:	f7f5 fda7 	bl	800172c <__aeabi_i2f>
 800bbde:	493c      	ldr	r1, [pc, #240]	@ (800bcd0 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800bbe0:	f7f4 ffe2 	bl	8000ba8 <__aeabi_fdiv>
    bool temp_alarm = (temperature < tl1 || temperature < tl2 ||
 800bbe4:	1c31      	adds	r1, r6, #0
 800bbe6:	f7f4 fc99 	bl	800051c <__aeabi_fcmpgt>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d116      	bne.n	800bc1c <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800bbee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbf0:	f7f5 fd9c 	bl	800172c <__aeabi_i2f>
 800bbf4:	4936      	ldr	r1, [pc, #216]	@ (800bcd0 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800bbf6:	f7f4 ffd7 	bl	8000ba8 <__aeabi_fdiv>
    bool temp_alarm = (temperature < tl1 || temperature < tl2 ||
 800bbfa:	1c31      	adds	r1, r6, #0
 800bbfc:	f7f4 fc84 	bl	8000508 <__aeabi_fcmple>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d10b      	bne.n	800bc1c <pdf_insert_datapoint_to_table.constprop.0+0x144>
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800bc04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc06:	f7f5 fd91 	bl	800172c <__aeabi_i2f>
 800bc0a:	4931      	ldr	r1, [pc, #196]	@ (800bcd0 <pdf_insert_datapoint_to_table.constprop.0+0x1f8>)
 800bc0c:	f7f4 ffcc 	bl	8000ba8 <__aeabi_fdiv>
                       temperature >= th1 || temperature >= th2);
 800bc10:	1c31      	adds	r1, r6, #0
 800bc12:	f7f4 fc79 	bl	8000508 <__aeabi_fcmple>
 800bc16:	1e43      	subs	r3, r0, #1
 800bc18:	4198      	sbcs	r0, r3
 800bc1a:	0005      	movs	r5, r0
    time_to_dmyhms_string(time, time_buff, sizeof(time_buff));
 800bc1c:	2240      	movs	r2, #64	@ 0x40
 800bc1e:	432c      	orrs	r4, r5
 800bc20:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800bc22:	a90e      	add	r1, sp, #56	@ 0x38
 800bc24:	9407      	str	r4, [sp, #28]
 800bc26:	f7ff fc0b 	bl	800b440 <time_to_dmyhms_string>
    index = record_num % DATAPOINTS_PER_PAGE;
 800bc2a:	21f0      	movs	r1, #240	@ 0xf0
 800bc2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bc2e:	0049      	lsls	r1, r1, #1
 800bc30:	f7f4 fb20 	bl	8000274 <__aeabi_uidivmod>
 800bc34:	000d      	movs	r5, r1
    child_table_num = (UINT) (index / DATAPOINTS_PER_CHILD_TABLE);
 800bc36:	2160      	movs	r1, #96	@ 0x60
 800bc38:	0028      	movs	r0, r5
 800bc3a:	f7f4 fa95 	bl	8000168 <__udivsi3>
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800bc3e:	2463      	movs	r4, #99	@ 0x63
    index_in_child_table = (index % DATAPOINTS_PER_CHILD_TABLE);
 800bc40:	2160      	movs	r1, #96	@ 0x60
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800bc42:	4344      	muls	r4, r0
    index_in_child_table = (index % DATAPOINTS_PER_CHILD_TABLE);
 800bc44:	0028      	movs	r0, r5
 800bc46:	f7f4 fb15 	bl	8000274 <__aeabi_uidivmod>
    *y = TEXT_DATAPOINT_Y_POS_START - index_in_child_table * DATAPOINTS_Y_MARGIN;
 800bc4a:	2307      	movs	r3, #7
 800bc4c:	434b      	muls	r3, r1
 800bc4e:	4d22      	ldr	r5, [pc, #136]	@ (800bcd8 <pdf_insert_datapoint_to_table.constprop.0+0x200>)
    if (radiation < 0.0f)
 800bc50:	2100      	movs	r1, #0
 800bc52:	1c38      	adds	r0, r7, #0
    *x = TEXT_DATAPOINT_X_POS_START + child_table_num * CHILD_TABLE_SIZE;
 800bc54:	3434      	adds	r4, #52	@ 0x34
    *y = TEXT_DATAPOINT_Y_POS_START - index_in_child_table * DATAPOINTS_Y_MARGIN;
 800bc56:	1aed      	subs	r5, r5, r3
    if (radiation < 0.0f)
 800bc58:	f7f4 fc4c 	bl	80004f4 <__aeabi_fcmplt>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d021      	beq.n	800bca4 <pdf_insert_datapoint_to_table.constprop.0+0x1cc>
        snprintf(buff, sizeof(buff), "%s     %-5.1f      n/a",     time_buff, temperature);
 800bc60:	1c30      	adds	r0, r6, #0
 800bc62:	f7f7 fd99 	bl	8003798 <__aeabi_f2d>
 800bc66:	4f1d      	ldr	r7, [pc, #116]	@ (800bcdc <pdf_insert_datapoint_to_table.constprop.0+0x204>)
 800bc68:	9000      	str	r0, [sp, #0]
 800bc6a:	9101      	str	r1, [sp, #4]
 800bc6c:	003a      	movs	r2, r7
 800bc6e:	2180      	movs	r1, #128	@ 0x80
 800bc70:	ab0e      	add	r3, sp, #56	@ 0x38
 800bc72:	a81e      	add	r0, sp, #120	@ 0x78
 800bc74:	f00e f89a 	bl	8019dac <sniprintf>
    float r = is_alarm ? 1.0f : 0.0f, g = 0.0f, b = 0.0f;
 800bc78:	2200      	movs	r2, #0
 800bc7a:	9b07      	ldr	r3, [sp, #28]
 800bc7c:	1c11      	adds	r1, r2, #0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <pdf_insert_datapoint_to_table.constprop.0+0x1ae>
 800bc82:	21fe      	movs	r1, #254	@ 0xfe
 800bc84:	0589      	lsls	r1, r1, #22
    return tpdf_draw_colored_text(&pdf_file, x_pos, y_pos, "F1", TEXT_DATAPOINT_FONT_SIZE, r, g, b, buff);
 800bc86:	9203      	str	r2, [sp, #12]
 800bc88:	9202      	str	r2, [sp, #8]
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	ae1e      	add	r6, sp, #120	@ 0x78
 800bc8e:	9101      	str	r1, [sp, #4]
 800bc90:	9200      	str	r2, [sp, #0]
 800bc92:	0021      	movs	r1, r4
 800bc94:	002a      	movs	r2, r5
 800bc96:	4b12      	ldr	r3, [pc, #72]	@ (800bce0 <pdf_insert_datapoint_to_table.constprop.0+0x208>)
 800bc98:	9604      	str	r6, [sp, #16]
 800bc9a:	4812      	ldr	r0, [pc, #72]	@ (800bce4 <pdf_insert_datapoint_to_table.constprop.0+0x20c>)
 800bc9c:	f00c fd76 	bl	801878c <tpdf_draw_colored_text>
}
 800bca0:	b03f      	add	sp, #252	@ 0xfc
 800bca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        snprintf(buff, sizeof(buff), "%s     %-5.1f      %-6.2f", time_buff, temperature, radiation);
 800bca4:	1c38      	adds	r0, r7, #0
 800bca6:	f7f7 fd77 	bl	8003798 <__aeabi_f2d>
 800bcaa:	9002      	str	r0, [sp, #8]
 800bcac:	9103      	str	r1, [sp, #12]
 800bcae:	1c30      	adds	r0, r6, #0
 800bcb0:	f7f7 fd72 	bl	8003798 <__aeabi_f2d>
 800bcb4:	4a0c      	ldr	r2, [pc, #48]	@ (800bce8 <pdf_insert_datapoint_to_table.constprop.0+0x210>)
 800bcb6:	9000      	str	r0, [sp, #0]
 800bcb8:	9101      	str	r1, [sp, #4]
 800bcba:	ab0e      	add	r3, sp, #56	@ 0x38
 800bcbc:	2180      	movs	r1, #128	@ 0x80
 800bcbe:	a81e      	add	r0, sp, #120	@ 0x78
 800bcc0:	f00e f874 	bl	8019dac <sniprintf>
 800bcc4:	e7d8      	b.n	800bc78 <pdf_insert_datapoint_to_table.constprop.0+0x1a0>
 800bcc6:	46c0      	nop			@ (mov r8, r8)
 800bcc8:	20002bac 	.word	0x20002bac
 800bccc:	20002c47 	.word	0x20002c47
 800bcd0:	41200000 	.word	0x41200000
 800bcd4:	42c80000 	.word	0x42c80000
 800bcd8:	000002ee 	.word	0x000002ee
 800bcdc:	0801f208 	.word	0x0801f208
 800bce0:	0801eeb3 	.word	0x0801eeb3
 800bce4:	200030b4 	.word	0x200030b4
 800bce8:	0801f21f 	.word	0x0801f21f

0800bcec <pdf_gen_template_file>:
UINT pdf_gen_template_file(void) {
 800bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = f_stat (pdf_file_name,&fno);
 800bcee:	4e27      	ldr	r6, [pc, #156]	@ (800bd8c <pdf_gen_template_file+0xa0>)
UINT pdf_gen_template_file(void) {
 800bcf0:	b089      	sub	sp, #36	@ 0x24
    res = f_stat (pdf_file_name,&fno);
 800bcf2:	6830      	ldr	r0, [r6, #0]
 800bcf4:	a902      	add	r1, sp, #8
 800bcf6:	f009 f82c 	bl	8014d52 <f_stat>
 800bcfa:	4c25      	ldr	r4, [pc, #148]	@ (800bd90 <pdf_gen_template_file+0xa4>)
 800bcfc:	1e07      	subs	r7, r0, #0
    switch (res)
 800bcfe:	4d25      	ldr	r5, [pc, #148]	@ (800bd94 <pdf_gen_template_file+0xa8>)
 800bd00:	d005      	beq.n	800bd0e <pdf_gen_template_file+0x22>
 800bd02:	2804      	cmp	r0, #4
 800bd04:	d00b      	beq.n	800bd1e <pdf_gen_template_file+0x32>
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800bd06:	003b      	movs	r3, r7
 800bd08:	4923      	ldr	r1, [pc, #140]	@ (800bd98 <pdf_gen_template_file+0xac>)
 800bd0a:	6828      	ldr	r0, [r5, #0]
 800bd0c:	e002      	b.n	800bd14 <pdf_gen_template_file+0x28>
        LOG_APP("File '%s' exists \r\n", pdf_file_name);
 800bd0e:	4923      	ldr	r1, [pc, #140]	@ (800bd9c <pdf_gen_template_file+0xb0>)
 800bd10:	6828      	ldr	r0, [r5, #0]
        LOG_APP("SUCCESS: Created template %s file\r\n",pdf_file_name);
 800bd12:	6833      	ldr	r3, [r6, #0]
        LOG_APP("f_stat unknown error, ret:%02d\r\n",res);
 800bd14:	0022      	movs	r2, r4
 800bd16:	68c0      	ldr	r0, [r0, #12]
 800bd18:	f00d ffa2 	bl	8019c60 <fiprintf>
        break;
 800bd1c:	e01a      	b.n	800bd54 <pdf_gen_template_file+0x68>
        LOG_APP("File '%s' not found. Creating new file with header.\n", pdf_file_name);
 800bd1e:	6828      	ldr	r0, [r5, #0]
 800bd20:	0022      	movs	r2, r4
 800bd22:	491f      	ldr	r1, [pc, #124]	@ (800bda0 <pdf_gen_template_file+0xb4>)
 800bd24:	6833      	ldr	r3, [r6, #0]
 800bd26:	68c0      	ldr	r0, [r0, #12]
 800bd28:	f00d ff9a 	bl	8019c60 <fiprintf>
        res = f_open(&pdf_file, pdf_file_name, FA_CREATE_NEW | FA_WRITE);
 800bd2c:	4b1d      	ldr	r3, [pc, #116]	@ (800bda4 <pdf_gen_template_file+0xb8>)
 800bd2e:	2206      	movs	r2, #6
 800bd30:	0018      	movs	r0, r3
 800bd32:	6831      	ldr	r1, [r6, #0]
 800bd34:	9301      	str	r3, [sp, #4]
 800bd36:	f008 fd6d 	bl	8014814 <f_open>
 800bd3a:	1e07      	subs	r7, r0, #0
        if (res != FR_OK)
 800bd3c:	d00d      	beq.n	800bd5a <pdf_gen_template_file+0x6e>
            LOG_APP("Open PDF log file failed,Unmount...\r\n");
 800bd3e:	682b      	ldr	r3, [r5, #0]
 800bd40:	0022      	movs	r2, r4
 800bd42:	4919      	ldr	r1, [pc, #100]	@ (800bda8 <pdf_gen_template_file+0xbc>)
 800bd44:	68d8      	ldr	r0, [r3, #12]
 800bd46:	f00d ff8b 	bl	8019c60 <fiprintf>
            f_mount(NULL, "", 0);
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4917      	ldr	r1, [pc, #92]	@ (800bdac <pdf_gen_template_file+0xc0>)
 800bd4e:	0010      	movs	r0, r2
 800bd50:	f008 fd36 	bl	80147c0 <f_mount>
    return res;
 800bd54:	0038      	movs	r0, r7
}
 800bd56:	b009      	add	sp, #36	@ 0x24
 800bd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        generate_pdf_raw_report();
 800bd5a:	f7ff fb8f 	bl	800b47c <generate_pdf_raw_report>
        LOG_APP("Closing file, Flush...\r\n");
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	0022      	movs	r2, r4
 800bd62:	4913      	ldr	r1, [pc, #76]	@ (800bdb0 <pdf_gen_template_file+0xc4>)
 800bd64:	68d8      	ldr	r0, [r3, #12]
 800bd66:	f00d ff7b 	bl	8019c60 <fiprintf>
        res = f_close(&pdf_file);
 800bd6a:	9801      	ldr	r0, [sp, #4]
 800bd6c:	f008 ff58 	bl	8014c20 <f_close>
 800bd70:	1e07      	subs	r7, r0, #0
        if (res != FR_OK)
 800bd72:	d006      	beq.n	800bd82 <pdf_gen_template_file+0x96>
            LOG_APP("f_close pdf file failed, ret=%d\r\n",res);
 800bd74:	6828      	ldr	r0, [r5, #0]
 800bd76:	003b      	movs	r3, r7
 800bd78:	0022      	movs	r2, r4
 800bd7a:	490e      	ldr	r1, [pc, #56]	@ (800bdb4 <pdf_gen_template_file+0xc8>)
 800bd7c:	68c0      	ldr	r0, [r0, #12]
 800bd7e:	f00d ff6f 	bl	8019c60 <fiprintf>
        LOG_APP("SUCCESS: Created template %s file\r\n",pdf_file_name);
 800bd82:	4b04      	ldr	r3, [pc, #16]	@ (800bd94 <pdf_gen_template_file+0xa8>)
 800bd84:	490c      	ldr	r1, [pc, #48]	@ (800bdb8 <pdf_gen_template_file+0xcc>)
 800bd86:	6818      	ldr	r0, [r3, #0]
 800bd88:	e7c3      	b.n	800bd12 <pdf_gen_template_file+0x26>
 800bd8a:	46c0      	nop			@ (mov r8, r8)
 800bd8c:	200001fc 	.word	0x200001fc
 800bd90:	0801e1c1 	.word	0x0801e1c1
 800bd94:	200002cc 	.word	0x200002cc
 800bd98:	0801ec3b 	.word	0x0801ec3b
 800bd9c:	0801eb5d 	.word	0x0801eb5d
 800bda0:	0801eb76 	.word	0x0801eb76
 800bda4:	200030b4 	.word	0x200030b4
 800bda8:	0801f239 	.word	0x0801f239
 800bdac:	0801ed35 	.word	0x0801ed35
 800bdb0:	0801ec05 	.word	0x0801ec05
 800bdb4:	0801f264 	.word	0x0801f264
 800bdb8:	0801f28b 	.word	0x0801f28b

0800bdbc <pdf_append_all_flash_log_entries>:
{
 800bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 800bdbe:	4b3a      	ldr	r3, [pc, #232]	@ (800bea8 <pdf_append_all_flash_log_entries+0xec>)
 800bdc0:	4e3a      	ldr	r6, [pc, #232]	@ (800beac <pdf_append_all_flash_log_entries+0xf0>)
 800bdc2:	2232      	movs	r2, #50	@ 0x32
 800bdc4:	0030      	movs	r0, r6
 800bdc6:	6819      	ldr	r1, [r3, #0]
{
 800bdc8:	b089      	sub	sp, #36	@ 0x24
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 800bdca:	f008 fd23 	bl	8014814 <f_open>
 800bdce:	1e04      	subs	r4, r0, #0
 800bdd0:	d008      	beq.n	800bde4 <pdf_append_all_flash_log_entries+0x28>
        LOG_APP("FATAL: f_open pdf_file FAILED\r\n");
 800bdd2:	4b37      	ldr	r3, [pc, #220]	@ (800beb0 <pdf_append_all_flash_log_entries+0xf4>)
 800bdd4:	4a37      	ldr	r2, [pc, #220]	@ (800beb4 <pdf_append_all_flash_log_entries+0xf8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4937      	ldr	r1, [pc, #220]	@ (800beb8 <pdf_append_all_flash_log_entries+0xfc>)
 800bdda:	68d8      	ldr	r0, [r3, #12]
 800bddc:	f00d ff40 	bl	8019c60 <fiprintf>
}
 800bde0:	b009      	add	sp, #36	@ 0x24
 800bde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(&pdf_file, f_size(&pdf_file));
 800bde4:	0030      	movs	r0, r6
 800bde6:	68f1      	ldr	r1, [r6, #12]
 800bde8:	f008 ff28 	bl	8014c3c <f_lseek>
        meas_data_log_read_entry(i, &entry);
 800bdec:	ad02      	add	r5, sp, #8
 800bdee:	0029      	movs	r1, r5
 800bdf0:	0020      	movs	r0, r4
 800bdf2:	f7fc fb1b 	bl	800842c <meas_data_log_read_entry>
        if (entry.year == 0xFF || entry.index == 0xFFFF || entry.month == 0xFF)
 800bdf6:	78aa      	ldrb	r2, [r5, #2]
 800bdf8:	2aff      	cmp	r2, #255	@ 0xff
 800bdfa:	d02e      	beq.n	800be5a <pdf_append_all_flash_log_entries+0x9e>
 800bdfc:	8829      	ldrh	r1, [r5, #0]
 800bdfe:	4b2f      	ldr	r3, [pc, #188]	@ (800bebc <pdf_append_all_flash_log_entries+0x100>)
 800be00:	4299      	cmp	r1, r3
 800be02:	d02a      	beq.n	800be5a <pdf_append_all_flash_log_entries+0x9e>
 800be04:	78eb      	ldrb	r3, [r5, #3]
 800be06:	2bff      	cmp	r3, #255	@ 0xff
 800be08:	d027      	beq.n	800be5a <pdf_append_all_flash_log_entries+0x9e>
        file_log_time_t time = {
 800be0a:	4669      	mov	r1, sp
 800be0c:	704b      	strb	r3, [r1, #1]
 800be0e:	88ab      	ldrh	r3, [r5, #4]
 800be10:	700a      	strb	r2, [r1, #0]
 800be12:	804b      	strh	r3, [r1, #2]
 800be14:	88eb      	ldrh	r3, [r5, #6]
 800be16:	808b      	strh	r3, [r1, #4]
        float temp = entry.temperature / 10.0f;
 800be18:	230a      	movs	r3, #10
 800be1a:	5ee8      	ldrsh	r0, [r5, r3]
 800be1c:	f7f5 fc86 	bl	800172c <__aeabi_i2f>
 800be20:	4927      	ldr	r1, [pc, #156]	@ (800bec0 <pdf_append_all_flash_log_entries+0x104>)
 800be22:	f7f4 fec1 	bl	8000ba8 <__aeabi_fdiv>
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800be26:	7c6b      	ldrb	r3, [r5, #17]
        float temp = entry.temperature / 10.0f;
 800be28:	1c07      	adds	r7, r0, #0
        float dose = entry.dose / 100.0f;
 800be2a:	9805      	ldr	r0, [sp, #20]
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d018      	beq.n	800be62 <pdf_append_all_flash_log_entries+0xa6>
        float dose = entry.dose / 100.0f;
 800be30:	f7f5 fccc 	bl	80017cc <__aeabi_ui2f>
 800be34:	4923      	ldr	r1, [pc, #140]	@ (800bec4 <pdf_append_all_flash_log_entries+0x108>)
 800be36:	f7f4 feb7 	bl	8000ba8 <__aeabi_fdiv>
 800be3a:	1c03      	adds	r3, r0, #0
        if (pdf_insert_datapoint_to_table(i, &time, temp, rad_for_print, &current_settings) < 0) {
 800be3c:	4669      	mov	r1, sp
 800be3e:	0020      	movs	r0, r4
 800be40:	1c3a      	adds	r2, r7, #0
 800be42:	f7ff fe49 	bl	800bad8 <pdf_insert_datapoint_to_table.constprop.0>
 800be46:	2800      	cmp	r0, #0
 800be48:	da0d      	bge.n	800be66 <pdf_append_all_flash_log_entries+0xaa>
            LOG_APP("PDF: insert failed at %lu\r\n", (unsigned long)i);
 800be4a:	4b19      	ldr	r3, [pc, #100]	@ (800beb0 <pdf_append_all_flash_log_entries+0xf4>)
 800be4c:	4a19      	ldr	r2, [pc, #100]	@ (800beb4 <pdf_append_all_flash_log_entries+0xf8>)
 800be4e:	6818      	ldr	r0, [r3, #0]
 800be50:	491d      	ldr	r1, [pc, #116]	@ (800bec8 <pdf_append_all_flash_log_entries+0x10c>)
 800be52:	0023      	movs	r3, r4
 800be54:	68c0      	ldr	r0, [r0, #12]
 800be56:	f00d ff03 	bl	8019c60 <fiprintf>
    f_close(&pdf_file);
 800be5a:	0030      	movs	r0, r6
 800be5c:	f008 fee0 	bl	8014c20 <f_close>
 800be60:	e7be      	b.n	800bde0 <pdf_append_all_flash_log_entries+0x24>
        float rad_for_print = (entry.rad_measure_mark == 0) ? -1.0f : dose;
 800be62:	4b1a      	ldr	r3, [pc, #104]	@ (800becc <pdf_append_all_flash_log_entries+0x110>)
 800be64:	e7ea      	b.n	800be3c <pdf_append_all_flash_log_entries+0x80>
        if ((i % DATAPOINTS_PER_PAGE) == (DATAPOINTS_PER_PAGE - 1)) {
 800be66:	21f0      	movs	r1, #240	@ 0xf0
 800be68:	0020      	movs	r0, r4
 800be6a:	0049      	lsls	r1, r1, #1
 800be6c:	f7f4 fa02 	bl	8000274 <__aeabi_uidivmod>
 800be70:	23e0      	movs	r3, #224	@ 0xe0
 800be72:	33ff      	adds	r3, #255	@ 0xff
 800be74:	4299      	cmp	r1, r3
 800be76:	d106      	bne.n	800be86 <pdf_append_all_flash_log_entries+0xca>
            UINT current_page = (UINT)(i / DATAPOINTS_PER_PAGE);
 800be78:	21f0      	movs	r1, #240	@ 0xf0
 800be7a:	0020      	movs	r0, r4
 800be7c:	0049      	lsls	r1, r1, #1
 800be7e:	f7f4 f973 	bl	8000168 <__udivsi3>
            pdf_page_handle_for_new_datapoints(current_page);
 800be82:	f7ff fc4b 	bl	800b71c <pdf_page_handle_for_new_datapoints>
        if ((i & 0xFF) == 0) {
 800be86:	b2e3      	uxtb	r3, r4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d107      	bne.n	800be9c <pdf_append_all_flash_log_entries+0xe0>
            LOG_APP("PDF append progress: %lu\r\n", (unsigned long)i);
 800be8c:	4b08      	ldr	r3, [pc, #32]	@ (800beb0 <pdf_append_all_flash_log_entries+0xf4>)
 800be8e:	4a09      	ldr	r2, [pc, #36]	@ (800beb4 <pdf_append_all_flash_log_entries+0xf8>)
 800be90:	6818      	ldr	r0, [r3, #0]
 800be92:	490f      	ldr	r1, [pc, #60]	@ (800bed0 <pdf_append_all_flash_log_entries+0x114>)
 800be94:	0023      	movs	r3, r4
 800be96:	68c0      	ldr	r0, [r0, #12]
 800be98:	f00d fee2 	bl	8019c60 <fiprintf>
    for (uint32_t i = 0; i < max_idx; i++) {
 800be9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bed4 <pdf_append_all_flash_log_entries+0x118>)
 800be9e:	3401      	adds	r4, #1
 800bea0:	429c      	cmp	r4, r3
 800bea2:	d1a3      	bne.n	800bdec <pdf_append_all_flash_log_entries+0x30>
 800bea4:	e7d9      	b.n	800be5a <pdf_append_all_flash_log_entries+0x9e>
 800bea6:	46c0      	nop			@ (mov r8, r8)
 800bea8:	200001fc 	.word	0x200001fc
 800beac:	200030b4 	.word	0x200030b4
 800beb0:	200002cc 	.word	0x200002cc
 800beb4:	0801e1c1 	.word	0x0801e1c1
 800beb8:	0801f2b4 	.word	0x0801f2b4
 800bebc:	0000ffff 	.word	0x0000ffff
 800bec0:	41200000 	.word	0x41200000
 800bec4:	42c80000 	.word	0x42c80000
 800bec8:	0801f2d9 	.word	0x0801f2d9
 800becc:	bf800000 	.word	0xbf800000
 800bed0:	0801f2fa 	.word	0x0801f2fa
 800bed4:	0000c30c 	.word	0x0000c30c

0800bed8 <pdf_gen_completed_report>:
                            const DeviceSettings *dev_setting) {
 800bed8:	2300      	movs	r3, #0
 800beda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bedc:	4c16      	ldr	r4, [pc, #88]	@ (800bf38 <pdf_gen_completed_report+0x60>)
 800bede:	44a5      	add	sp, r4
 800bee0:	0004      	movs	r4, r0
 800bee2:	9311      	str	r3, [sp, #68]	@ 0x44
 800bee4:	9107      	str	r1, [sp, #28]
	const logging_summary_t *summary = csv_get_logging_summary();
 800bee6:	f7ff fac5 	bl	800b474 <csv_get_logging_summary>
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800beea:	21f0      	movs	r1, #240	@ 0xf0
	       (unsigned)log->data_points_temp_count, (unsigned)DATAPOINTS_PER_PAGE,
 800beec:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800beee:	0049      	lsls	r1, r1, #1
	const logging_summary_t *summary = csv_get_logging_summary();
 800bef0:	0006      	movs	r6, r0
	       (unsigned)(log->data_points_temp_count / DATAPOINTS_PER_PAGE + 1));
 800bef2:	0028      	movs	r0, r5
 800bef4:	f7f4 f938 	bl	8000168 <__udivsi3>
	printf("[DBG][PDF] temp_pts=%u, per_page=%u -> total_pages=%u(+1st)\r\n",
 800bef8:	22f0      	movs	r2, #240	@ 0xf0
 800befa:	4f10      	ldr	r7, [pc, #64]	@ (800bf3c <pdf_gen_completed_report+0x64>)
 800befc:	0029      	movs	r1, r5
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	0052      	lsls	r2, r2, #1
 800bf02:	0038      	movs	r0, r7
 800bf04:	f00d fed8 	bl	8019cb8 <iprintf>
	printf("Report PDF File\r\n");
 800bf08:	480d      	ldr	r0, [pc, #52]	@ (800bf40 <pdf_gen_completed_report+0x68>)
 800bf0a:	f00d ff45 	bl	8019d98 <puts>
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800bf0e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (f_open(&pdf_file, pdf_file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 800bf10:	4b0c      	ldr	r3, [pc, #48]	@ (800bf44 <pdf_gen_completed_report+0x6c>)
 800bf12:	4c0d      	ldr	r4, [pc, #52]	@ (800bf48 <pdf_gen_completed_report+0x70>)
 800bf14:	2232      	movs	r2, #50	@ 0x32
 800bf16:	0020      	movs	r0, r4
 800bf18:	6819      	ldr	r1, [r3, #0]
 800bf1a:	f008 fc7b 	bl	8014814 <f_open>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d01c      	beq.n	800bf5c <pdf_gen_completed_report+0x84>
        LOG_APP("FATAL: f_open pdf FAILED\r\n");
 800bf22:	4b0a      	ldr	r3, [pc, #40]	@ (800bf4c <pdf_gen_completed_report+0x74>)
 800bf24:	4a0a      	ldr	r2, [pc, #40]	@ (800bf50 <pdf_gen_completed_report+0x78>)
 800bf26:	490b      	ldr	r1, [pc, #44]	@ (800bf54 <pdf_gen_completed_report+0x7c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
    LOG_APP("Close PDF log file\r\n");
 800bf2a:	68d8      	ldr	r0, [r3, #12]
 800bf2c:	f00d fe98 	bl	8019c60 <fiprintf>
}
 800bf30:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <pdf_gen_completed_report+0x80>)
 800bf32:	449d      	add	sp, r3
 800bf34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf36:	46c0      	nop			@ (mov r8, r8)
 800bf38:	ffffef2c 	.word	0xffffef2c
 800bf3c:	0801f322 	.word	0x0801f322
 800bf40:	0801f360 	.word	0x0801f360
 800bf44:	200001fc 	.word	0x200001fc
 800bf48:	200030b4 	.word	0x200030b4
 800bf4c:	200002cc 	.word	0x200002cc
 800bf50:	0801e1c1 	.word	0x0801e1c1
 800bf54:	0801f371 	.word	0x0801f371
 800bf58:	000010d4 	.word	0x000010d4
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800bf5c:	21f0      	movs	r1, #240	@ 0xf0
 800bf5e:	0028      	movs	r0, r5
 800bf60:	0049      	lsls	r1, r1, #1
 800bf62:	f7f4 f901 	bl	8000168 <__udivsi3>
    UINT current_obj = TPDF_OBJ_NUM_PAGE_2ND + (current_page *10);
 800bf66:	210a      	movs	r1, #10
 800bf68:	4341      	muls	r1, r0
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, 1234 ,&pdf_monitor );
 800bf6a:	4dfb      	ldr	r5, [pc, #1004]	@ (800c358 <pdf_gen_completed_report+0x480>)
 800bf6c:	4afb      	ldr	r2, [pc, #1004]	@ (800c35c <pdf_gen_completed_report+0x484>)
 800bf6e:	002b      	movs	r3, r5
    UINT current_page = (log->data_points_temp_count) / DATAPOINTS_PER_PAGE;
 800bf70:	900e      	str	r0, [sp, #56]	@ 0x38
    tpdf_end_new_stream_obj(&pdf_file,current_obj + 4, 1234 ,&pdf_monitor );
 800bf72:	3118      	adds	r1, #24
 800bf74:	0020      	movs	r0, r4
 800bf76:	f00c fceb 	bl	8018950 <tpdf_end_new_stream_obj>
    time_to_dmyhms_string(&log->start_time, tmp_start_time, sizeof(tmp_start_time));
 800bf7a:	0030      	movs	r0, r6
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	3018      	adds	r0, #24
 800bf80:	a934      	add	r1, sp, #208	@ 0xd0
 800bf82:	f7ff fa5d 	bl	800b440 <time_to_dmyhms_string>
    time_to_dmyhms_string(&log->stop_time, tmp_stop_time, sizeof(tmp_stop_time));
 800bf86:	0030      	movs	r0, r6
 800bf88:	2220      	movs	r2, #32
 800bf8a:	301e      	adds	r0, #30
 800bf8c:	a974      	add	r1, sp, #464	@ 0x1d0
 800bf8e:	f7ff fa57 	bl	800b440 <time_to_dmyhms_string>
    tpdf_start_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, &pdf_monitor);
 800bf92:	002b      	movs	r3, r5
 800bf94:	2207      	movs	r2, #7
 800bf96:	2106      	movs	r1, #6
 800bf98:	0020      	movs	r0, r4
 800bf9a:	f00c fcbd 	bl	8018918 <tpdf_start_new_stream_obj>
    snprintf(buff, sizeof(buff), "Start time: %s", tmp_start_time);
 800bf9e:	48f0      	ldr	r0, [pc, #960]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800bfa0:	ae1a      	add	r6, sp, #104	@ 0x68
 800bfa2:	2140      	movs	r1, #64	@ 0x40
 800bfa4:	4aef      	ldr	r2, [pc, #956]	@ (800c364 <pdf_gen_completed_report+0x48c>)
 800bfa6:	ab34      	add	r3, sp, #208	@ 0xd0
 800bfa8:	1980      	adds	r0, r0, r6
 800bfaa:	f00d feff 	bl	8019dac <sniprintf>
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800bfae:	4aec      	ldr	r2, [pc, #944]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800bfb0:	2700      	movs	r7, #0
 800bfb2:	1992      	adds	r2, r2, r6
 800bfb4:	9204      	str	r2, [sp, #16]
 800bfb6:	2209      	movs	r2, #9
 800bfb8:	9200      	str	r2, [sp, #0]
 800bfba:	22c8      	movs	r2, #200	@ 0xc8
 800bfbc:	4bea      	ldr	r3, [pc, #936]	@ (800c368 <pdf_gen_completed_report+0x490>)
 800bfbe:	2132      	movs	r1, #50	@ 0x32
 800bfc0:	0092      	lsls	r2, r2, #2
 800bfc2:	0020      	movs	r0, r4
 800bfc4:	9703      	str	r7, [sp, #12]
 800bfc6:	9702      	str	r7, [sp, #8]
 800bfc8:	9701      	str	r7, [sp, #4]
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	f00c fbde 	bl	801878c <tpdf_draw_colored_text>
 800bfd0:	9006      	str	r0, [sp, #24]
    snprintf(buff, sizeof(buff), "Stop time: %s", tmp_stop_time);
 800bfd2:	48e3      	ldr	r0, [pc, #908]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800bfd4:	2140      	movs	r1, #64	@ 0x40
 800bfd6:	4ae5      	ldr	r2, [pc, #916]	@ (800c36c <pdf_gen_completed_report+0x494>)
 800bfd8:	ab74      	add	r3, sp, #464	@ 0x1d0
 800bfda:	1980      	adds	r0, r0, r6
 800bfdc:	f00d fee6 	bl	8019dac <sniprintf>
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_RIGHT - 120, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800bfe0:	2209      	movs	r2, #9
 800bfe2:	21aa      	movs	r1, #170	@ 0xaa
 800bfe4:	9200      	str	r2, [sp, #0]
 800bfe6:	22c8      	movs	r2, #200	@ 0xc8
 800bfe8:	4bdd      	ldr	r3, [pc, #884]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800bfea:	0092      	lsls	r2, r2, #2
 800bfec:	199b      	adds	r3, r3, r6
 800bfee:	9304      	str	r3, [sp, #16]
 800bff0:	31ff      	adds	r1, #255	@ 0xff
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	0020      	movs	r0, r4
 800bff6:	9703      	str	r7, [sp, #12]
 800bff8:	9702      	str	r7, [sp, #8]
 800bffa:	9701      	str	r7, [sp, #4]
 800bffc:	f00c fbc6 	bl	801878c <tpdf_draw_colored_text>
 800c000:	9b06      	ldr	r3, [sp, #24]
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c002:	2132      	movs	r1, #50	@ 0x32
    stream_length += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_RIGHT - 120, PDF_PAGE_TOP, "F1", 9, 0,0,0, buff);
 800c004:	181e      	adds	r6, r3, r0
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c006:	23ff      	movs	r3, #255	@ 0xff
 800c008:	059b      	lsls	r3, r3, #22
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	4bd8      	ldr	r3, [pc, #864]	@ (800c370 <pdf_gen_completed_report+0x498>)
 800c00e:	4ad8      	ldr	r2, [pc, #864]	@ (800c370 <pdf_gen_completed_report+0x498>)
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	0020      	movs	r0, r4
 800c014:	4bd7      	ldr	r3, [pc, #860]	@ (800c374 <pdf_gen_completed_report+0x49c>)
 800c016:	9704      	str	r7, [sp, #16]
 800c018:	9703      	str	r7, [sp, #12]
 800c01a:	9702      	str	r7, [sp, #8]
 800c01c:	f00c fbec 	bl	80187f8 <tpdf_draw_line>
    tpdf_end_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, stream_length, &pdf_monitor);
 800c020:	002b      	movs	r3, r5
    stream_length += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT, PDF_PAGE_TOP - 5, 1.5, 0,0,0);
 800c022:	1832      	adds	r2, r6, r0
    tpdf_end_new_stream_obj(&pdf_file, TPDF_OBJ_NUM_HEADER_TIME_START_STOP + 1, stream_length, &pdf_monitor);
 800c024:	2107      	movs	r1, #7
 800c026:	0020      	movs	r0, r4
 800c028:	f00c fc92 	bl	8018950 <tpdf_end_new_stream_obj>
        const logging_summary_t *summary = csv_get_logging_summary();
 800c02c:	f7ff fa22 	bl	800b474 <csv_get_logging_summary>
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800c030:	2311      	movs	r3, #17
 800c032:	2203      	movs	r2, #3
 800c034:	49d0      	ldr	r1, [pc, #832]	@ (800c378 <pdf_gen_completed_report+0x4a0>)
 800c036:	9300      	str	r3, [sp, #0]
        const logging_summary_t *summary = csv_get_logging_summary();
 800c038:	0006      	movs	r6, r0
    sprintf(content_buffer, "<<\n/Type /Page\n/Parent %d 0 R\n/Contents [ %d 0 R ]\n/Resources %d 0 R\n/Rotate 0\n>>", \
 800c03a:	3b06      	subs	r3, #6
 800c03c:	a834      	add	r0, sp, #208	@ 0xd0
 800c03e:	f00d feeb 	bl	8019e18 <siprintf>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_NUM_PAGE_1ST, content_buffer, &pdf_monitor);
 800c042:	a934      	add	r1, sp, #208	@ 0xd0
 800c044:	002b      	movs	r3, r5
 800c046:	000a      	movs	r2, r1
 800c048:	0020      	movs	r0, r4
 800c04a:	210a      	movs	r1, #10
 800c04c:	f00c fc3e 	bl	80188cc <tpdf_add_new_obj>
    tpdf_start_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,&pdf_monitor);
 800c050:	002b      	movs	r3, r5
 800c052:	220d      	movs	r2, #13
 800c054:	210b      	movs	r1, #11
 800c056:	0020      	movs	r0, r4
 800c058:	f00c fc5e 	bl	8018918 <tpdf_start_new_stream_obj>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT,PDF_PAGE_TOP,"F2",24,0,0,1,"DATA LOG");
 800c05c:	4bc7      	ldr	r3, [pc, #796]	@ (800c37c <pdf_gen_completed_report+0x4a4>)
 800c05e:	21fe      	movs	r1, #254	@ 0xfe
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	22c8      	movs	r2, #200	@ 0xc8
 800c064:	2318      	movs	r3, #24
 800c066:	4dc6      	ldr	r5, [pc, #792]	@ (800c380 <pdf_gen_completed_report+0x4a8>)
 800c068:	0589      	lsls	r1, r1, #22
 800c06a:	9103      	str	r1, [sp, #12]
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	2132      	movs	r1, #50	@ 0x32
 800c070:	002b      	movs	r3, r5
 800c072:	0092      	lsls	r2, r2, #2
 800c074:	0020      	movs	r0, r4
 800c076:	9702      	str	r7, [sp, #8]
 800c078:	9701      	str	r7, [sp, #4]
 800c07a:	f00c fb87 	bl	801878c <tpdf_draw_colored_text>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c07e:	4bc1      	ldr	r3, [pc, #772]	@ (800c384 <pdf_gen_completed_report+0x4ac>)
 800c080:	2200      	movs	r2, #0
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT,PDF_PAGE_TOP,"F2",24,0,0,1,"DATA LOG");
 800c082:	900a      	str	r0, [sp, #40]	@ 0x28
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c084:	a921      	add	r1, sp, #132	@ 0x84
 800c086:	0018      	movs	r0, r3
 800c088:	9309      	str	r3, [sp, #36]	@ 0x24
 800c08a:	f005 fd23 	bl	8011ad4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c08e:	2200      	movs	r2, #0
 800c090:	a920      	add	r1, sp, #128	@ 0x80
 800c092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c094:	f005 fd50 	bl	8011b38 <HAL_RTC_GetDate>
    snprintf(created_at, sizeof(created_at), "20%02u-%02u-%02u %02u:%02u:%02u",
 800c098:	a91a      	add	r1, sp, #104	@ 0x68
 800c09a:	7ecb      	ldrb	r3, [r1, #27]
 800c09c:	7f89      	ldrb	r1, [r1, #30]
 800c09e:	4aba      	ldr	r2, [pc, #744]	@ (800c388 <pdf_gen_completed_report+0x4b0>)
 800c0a0:	9104      	str	r1, [sp, #16]
 800c0a2:	a91a      	add	r1, sp, #104	@ 0x68
 800c0a4:	7f49      	ldrb	r1, [r1, #29]
 800c0a6:	a82c      	add	r0, sp, #176	@ 0xb0
 800c0a8:	9103      	str	r1, [sp, #12]
 800c0aa:	a91a      	add	r1, sp, #104	@ 0x68
 800c0ac:	7f09      	ldrb	r1, [r1, #28]
 800c0ae:	9102      	str	r1, [sp, #8]
 800c0b0:	a91a      	add	r1, sp, #104	@ 0x68
 800c0b2:	7e89      	ldrb	r1, [r1, #26]
 800c0b4:	9101      	str	r1, [sp, #4]
 800c0b6:	a91a      	add	r1, sp, #104	@ 0x68
 800c0b8:	7e49      	ldrb	r1, [r1, #25]
 800c0ba:	9100      	str	r1, [sp, #0]
 800c0bc:	2120      	movs	r1, #32
 800c0be:	f00d fe75 	bl	8019dac <sniprintf>
    stream_len += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT + 130, PDF_PAGE_TOP, "F2", 9, 0,0,0, "File Created At: ");
 800c0c2:	2209      	movs	r2, #9
 800c0c4:	9200      	str	r2, [sp, #0]
 800c0c6:	22c8      	movs	r2, #200	@ 0xc8
 800c0c8:	4bb0      	ldr	r3, [pc, #704]	@ (800c38c <pdf_gen_completed_report+0x4b4>)
 800c0ca:	21b4      	movs	r1, #180	@ 0xb4
 800c0cc:	9304      	str	r3, [sp, #16]
 800c0ce:	0092      	lsls	r2, r2, #2
 800c0d0:	002b      	movs	r3, r5
 800c0d2:	0020      	movs	r0, r4
 800c0d4:	9703      	str	r7, [sp, #12]
 800c0d6:	9702      	str	r7, [sp, #8]
 800c0d8:	9701      	str	r7, [sp, #4]
 800c0da:	f00c fb57 	bl	801878c <tpdf_draw_colored_text>
    stream_len += tpdf_draw_colored_text(&pdf_file, PDF_PAGE_LEFT + 260, PDF_PAGE_TOP, "F1", 9, 0,0,0, created_at);
 800c0de:	2209      	movs	r2, #9
 800c0e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0e2:	9200      	str	r2, [sp, #0]
 800c0e4:	180d      	adds	r5, r1, r0
 800c0e6:	a92c      	add	r1, sp, #176	@ 0xb0
 800c0e8:	9104      	str	r1, [sp, #16]
 800c0ea:	22c8      	movs	r2, #200	@ 0xc8
 800c0ec:	219b      	movs	r1, #155	@ 0x9b
 800c0ee:	9b08      	ldr	r3, [sp, #32]
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	0049      	lsls	r1, r1, #1
 800c0f4:	0020      	movs	r0, r4
 800c0f6:	9703      	str	r7, [sp, #12]
 800c0f8:	9702      	str	r7, [sp, #8]
 800c0fa:	9701      	str	r7, [sp, #4]
 800c0fc:	f00c fb46 	bl	801878c <tpdf_draw_colored_text>
    stream_len += tpdf_draw_line(&pdf_file, PDF_PAGE_LEFT, PDF_PAGE_TOP - 5, PDF_PAGE_RIGHT,PDF_PAGE_TOP - 5, 2.0, 0,0,0);
 800c100:	2380      	movs	r3, #128	@ 0x80
 800c102:	05db      	lsls	r3, r3, #23
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	4b9a      	ldr	r3, [pc, #616]	@ (800c370 <pdf_gen_completed_report+0x498>)
 800c108:	4a99      	ldr	r2, [pc, #612]	@ (800c370 <pdf_gen_completed_report+0x498>)
 800c10a:	1945      	adds	r5, r0, r5
 800c10c:	2132      	movs	r1, #50	@ 0x32
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	0020      	movs	r0, r4
 800c112:	4b98      	ldr	r3, [pc, #608]	@ (800c374 <pdf_gen_completed_report+0x49c>)
 800c114:	9704      	str	r7, [sp, #16]
 800c116:	9703      	str	r7, [sp, #12]
 800c118:	9702      	str	r7, [sp, #8]
 800c11a:	f00c fb6d 	bl	80187f8 <tpdf_draw_line>
 800c11e:	1943      	adds	r3, r0, r5
    int len = draw_section_title(file_ptr, *y_pos, "Device Information");
 800c120:	20be      	movs	r0, #190	@ 0xbe
 800c122:	499b      	ldr	r1, [pc, #620]	@ (800c390 <pdf_gen_completed_report+0x4b8>)
 800c124:	0080      	lsls	r0, r0, #2
 800c126:	9308      	str	r3, [sp, #32]
 800c128:	f7ff fc08 	bl	800b93c <draw_section_title.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c12c:	21b9      	movs	r1, #185	@ 0xb9
    int len = draw_section_title(file_ptr, *y_pos, "Device Information");
 800c12e:	0005      	movs	r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c130:	4a98      	ldr	r2, [pc, #608]	@ (800c394 <pdf_gen_completed_report+0x4bc>)
 800c132:	9b07      	ldr	r3, [sp, #28]
 800c134:	2037      	movs	r0, #55	@ 0x37
 800c136:	0089      	lsls	r1, r1, #2
 800c138:	f7ff fc26 	bl	800b988 <draw_key_value_pair.constprop.0>
	if (dev_setting->sensor_type == 1)
 800c13c:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Device Code :", dev_setting->device_code);
 800c13e:	182d      	adds	r5, r5, r0
	if (dev_setting->sensor_type == 1)
 800c140:	3330      	adds	r3, #48	@ 0x30
 800c142:	781a      	ldrb	r2, [r3, #0]
		probe_type_str = "Temperature and Radiation (interval)";
 800c144:	4b94      	ldr	r3, [pc, #592]	@ (800c398 <pdf_gen_completed_report+0x4c0>)
	if (dev_setting->sensor_type == 1)
 800c146:	2a01      	cmp	r2, #1
 800c148:	d003      	beq.n	800c152 <pdf_gen_completed_report+0x27a>
		probe_type_str = "Unknown Sensor Type";
 800c14a:	4b94      	ldr	r3, [pc, #592]	@ (800c39c <pdf_gen_completed_report+0x4c4>)
	else if (dev_setting->sensor_type == 2)
 800c14c:	2a02      	cmp	r2, #2
 800c14e:	d100      	bne.n	800c152 <pdf_gen_completed_report+0x27a>
		probe_type_str = "Temperature Only";
 800c150:	4b93      	ldr	r3, [pc, #588]	@ (800c3a0 <pdf_gen_completed_report+0x4c8>)
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Probe Type :", probe_type_str);
 800c152:	21b9      	movs	r1, #185	@ 0xb9
 800c154:	2096      	movs	r0, #150	@ 0x96
 800c156:	4a93      	ldr	r2, [pc, #588]	@ (800c3a4 <pdf_gen_completed_report+0x4cc>)
 800c158:	0089      	lsls	r1, r1, #2
 800c15a:	0040      	lsls	r0, r0, #1
 800c15c:	f7ff fc14 	bl	800b988 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c160:	21b6      	movs	r1, #182	@ 0xb6
 800c162:	9b07      	ldr	r3, [sp, #28]
 800c164:	4a90      	ldr	r2, [pc, #576]	@ (800c3a8 <pdf_gen_completed_report+0x4d0>)
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Probe Type :", probe_type_str);
 800c166:	182d      	adds	r5, r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c168:	3320      	adds	r3, #32
 800c16a:	0089      	lsls	r1, r1, #2
 800c16c:	2037      	movs	r0, #55	@ 0x37
 800c16e:	f7ff fc0b 	bl	800b988 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c172:	21b6      	movs	r1, #182	@ 0xb6
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Serial Number :", dev_setting->serial);
 800c174:	182d      	adds	r5, r5, r0
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c176:	2096      	movs	r0, #150	@ 0x96
 800c178:	9b07      	ldr	r3, [sp, #28]
 800c17a:	4a8c      	ldr	r2, [pc, #560]	@ (800c3ac <pdf_gen_completed_report+0x4d4>)
 800c17c:	3331      	adds	r3, #49	@ 0x31
 800c17e:	0089      	lsls	r1, r1, #2
 800c180:	0040      	lsls	r0, r0, #1
 800c182:	f7ff fc01 	bl	800b988 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c186:	21b3      	movs	r1, #179	@ 0xb3
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Firmware Version :", dev_setting->firmware_ver);
 800c188:	182b      	adds	r3, r5, r0
 800c18a:	9309      	str	r3, [sp, #36]	@ 0x24
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	4a88      	ldr	r2, [pc, #544]	@ (800c3b0 <pdf_gen_completed_report+0x4d8>)
 800c190:	3310      	adds	r3, #16
 800c192:	0089      	lsls	r1, r1, #2
 800c194:	2037      	movs	r0, #55	@ 0x37
 800c196:	f7ff fbf7 	bl	800b988 <draw_key_value_pair.constprop.0>
 800c19a:	0005      	movs	r5, r0
    int len = draw_section_title(file_ptr, *y_pos, "Trip Information");
 800c19c:	20ae      	movs	r0, #174	@ 0xae
 800c19e:	4985      	ldr	r1, [pc, #532]	@ (800c3b4 <pdf_gen_completed_report+0x4dc>)
 800c1a0:	0080      	lsls	r0, r0, #2
 800c1a2:	f7ff fbcb 	bl	800b93c <draw_section_title.constprop.0>
    snprintf(tmp_buff,sizeof(tmp_buff),"%7u",dev_setting->trip_code);
 800c1a6:	9b07      	ldr	r3, [sp, #28]
    int len = draw_section_title(file_ptr, *y_pos, "Trip Information");
 800c1a8:	9006      	str	r0, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%7u",dev_setting->trip_code);
 800c1aa:	3339      	adds	r3, #57	@ 0x39
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	9b07      	ldr	r3, [sp, #28]
 800c1b0:	486b      	ldr	r0, [pc, #428]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c1b2:	333a      	adds	r3, #58	@ 0x3a
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	ac1a      	add	r4, sp, #104	@ 0x68
 800c1b8:	021b      	lsls	r3, r3, #8
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	2110      	movs	r1, #16
 800c1be:	4a7e      	ldr	r2, [pc, #504]	@ (800c3b8 <pdf_gen_completed_report+0x4e0>)
 800c1c0:	1900      	adds	r0, r0, r4
 800c1c2:	f00d fdf3 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c1c6:	21a9      	movs	r1, #169	@ 0xa9
 800c1c8:	4b65      	ldr	r3, [pc, #404]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c1ca:	4a7c      	ldr	r2, [pc, #496]	@ (800c3bc <pdf_gen_completed_report+0x4e4>)
 800c1cc:	191b      	adds	r3, r3, r4
 800c1ce:	0089      	lsls	r1, r1, #2
 800c1d0:	2037      	movs	r0, #55	@ 0x37
 800c1d2:	f7ff fbd9 	bl	800b988 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c1d6:	21a6      	movs	r1, #166	@ 0xa6
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c1d8:	9b06      	ldr	r3, [sp, #24]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c1da:	4a79      	ldr	r2, [pc, #484]	@ (800c3c0 <pdf_gen_completed_report+0x4e8>)
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Trip Id :", tmp_buff);
 800c1dc:	181c      	adds	r4, r3, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c1de:	9b07      	ldr	r3, [sp, #28]
 800c1e0:	2037      	movs	r0, #55	@ 0x37
 800c1e2:	333b      	adds	r3, #59	@ 0x3b
 800c1e4:	0089      	lsls	r1, r1, #2
 800c1e6:	f7ff fbcf 	bl	800b988 <draw_key_value_pair.constprop.0>
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c1ea:	9b08      	ldr	r3, [sp, #32]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Description :", dev_setting->trip_desc);
 800c1ec:	1824      	adds	r4, r4, r0
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c1ee:	18e4      	adds	r4, r4, r3
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Mode Code :", dev_setting->model);
 800c1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f2:	195b      	adds	r3, r3, r5
    stream_len += pdf_trip_info(&pdf_file, &current_y,  dev_setting);
 800c1f4:	18e3      	adds	r3, r4, r3
 800c1f6:	9308      	str	r3, [sp, #32]
    switch (dev_setting->start_mode) {
 800c1f8:	9b07      	ldr	r3, [sp, #28]
 800c1fa:	4d72      	ldr	r5, [pc, #456]	@ (800c3c4 <pdf_gen_completed_report+0x4ec>)
 800c1fc:	336d      	adds	r3, #109	@ 0x6d
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b02      	cmp	r3, #2
 800c202:	d802      	bhi.n	800c20a <pdf_gen_completed_report+0x332>
 800c204:	4a70      	ldr	r2, [pc, #448]	@ (800c3c8 <pdf_gen_completed_report+0x4f0>)
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	589d      	ldr	r5, [r3, r2]
    int len = draw_section_title(file_ptr, *y_pos, "Configuration Information");
 800c20a:	20a1      	movs	r0, #161	@ 0xa1
 800c20c:	496f      	ldr	r1, [pc, #444]	@ (800c3cc <pdf_gen_completed_report+0x4f4>)
 800c20e:	0080      	lsls	r0, r0, #2
 800c210:	f7ff fb94 	bl	800b93c <draw_section_title.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c214:	219c      	movs	r1, #156	@ 0x9c
 800c216:	002b      	movs	r3, r5
    int len = draw_section_title(file_ptr, *y_pos, "Configuration Information");
 800c218:	0004      	movs	r4, r0
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c21a:	4a6d      	ldr	r2, [pc, #436]	@ (800c3d0 <pdf_gen_completed_report+0x4f8>)
 800c21c:	0089      	lsls	r1, r1, #2
 800c21e:	2037      	movs	r0, #55	@ 0x37
 800c220:	f7ff fbb2 	bl	800b988 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->temp_interval,tmp,sizeof(tmp));
 800c224:	9a07      	ldr	r2, [sp, #28]
 800c226:	9b07      	ldr	r3, [sp, #28]
 800c228:	3280      	adds	r2, #128	@ 0x80
 800c22a:	7812      	ldrb	r2, [r2, #0]
 800c22c:	337f      	adds	r3, #127	@ 0x7f
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	0212      	lsls	r2, r2, #8
 800c232:	431a      	orrs	r2, r3
 800c234:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Mode :",start_mode_str );
 800c236:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->temp_interval,tmp,sizeof(tmp));
 800c238:	3381      	adds	r3, #129	@ 0x81
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	a91a      	add	r1, sp, #104	@ 0x68
 800c23e:	041b      	lsls	r3, r3, #16
 800c240:	4313      	orrs	r3, r2
 800c242:	9a07      	ldr	r2, [sp, #28]
 800c244:	3282      	adds	r2, #130	@ 0x82
 800c246:	7810      	ldrb	r0, [r2, #0]
 800c248:	2210      	movs	r2, #16
 800c24a:	0600      	lsls	r0, r0, #24
 800c24c:	4318      	orrs	r0, r3
 800c24e:	4b44      	ldr	r3, [pc, #272]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c250:	185b      	adds	r3, r3, r1
 800c252:	0019      	movs	r1, r3
 800c254:	f7ff f8e4 	bl	800b420 <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Temperature Log Interval :", tmp);
 800c258:	4b41      	ldr	r3, [pc, #260]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c25a:	a91a      	add	r1, sp, #104	@ 0x68
 800c25c:	185b      	adds	r3, r3, r1
 800c25e:	2096      	movs	r0, #150	@ 0x96
 800c260:	219c      	movs	r1, #156	@ 0x9c
 800c262:	4a5c      	ldr	r2, [pc, #368]	@ (800c3d4 <pdf_gen_completed_report+0x4fc>)
 800c264:	0089      	lsls	r1, r1, #2
 800c266:	0040      	lsls	r0, r0, #1
 800c268:	f7ff fb8e 	bl	800b988 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->start_delay,tmp,sizeof(tmp));
 800c26c:	9a07      	ldr	r2, [sp, #28]
 800c26e:	9b07      	ldr	r3, [sp, #28]
 800c270:	326f      	adds	r2, #111	@ 0x6f
 800c272:	7812      	ldrb	r2, [r2, #0]
 800c274:	336e      	adds	r3, #110	@ 0x6e
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	0212      	lsls	r2, r2, #8
 800c27a:	431a      	orrs	r2, r3
 800c27c:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Temperature Log Interval :", tmp);
 800c27e:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->start_delay,tmp,sizeof(tmp));
 800c280:	3370      	adds	r3, #112	@ 0x70
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	a91a      	add	r1, sp, #104	@ 0x68
 800c286:	041b      	lsls	r3, r3, #16
 800c288:	4313      	orrs	r3, r2
 800c28a:	9a07      	ldr	r2, [sp, #28]
 800c28c:	3271      	adds	r2, #113	@ 0x71
 800c28e:	7810      	ldrb	r0, [r2, #0]
 800c290:	2210      	movs	r2, #16
 800c292:	0600      	lsls	r0, r0, #24
 800c294:	4318      	orrs	r0, r3
 800c296:	4b32      	ldr	r3, [pc, #200]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c298:	185b      	adds	r3, r3, r1
 800c29a:	0019      	movs	r1, r3
 800c29c:	f7ff f8c0 	bl	800b420 <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Delay :", tmp);
 800c2a0:	4b2f      	ldr	r3, [pc, #188]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c2a2:	a91a      	add	r1, sp, #104	@ 0x68
 800c2a4:	185b      	adds	r3, r3, r1
 800c2a6:	2199      	movs	r1, #153	@ 0x99
 800c2a8:	4a4b      	ldr	r2, [pc, #300]	@ (800c3d8 <pdf_gen_completed_report+0x500>)
 800c2aa:	0089      	lsls	r1, r1, #2
 800c2ac:	2037      	movs	r0, #55	@ 0x37
 800c2ae:	f7ff fb6b 	bl	800b988 <draw_key_value_pair.constprop.0>
    seconds_to_hms_string(dev_setting ->rad_interval,tmp,sizeof(tmp));
 800c2b2:	9a07      	ldr	r2, [sp, #28]
 800c2b4:	9b07      	ldr	r3, [sp, #28]
 800c2b6:	327c      	adds	r2, #124	@ 0x7c
 800c2b8:	7812      	ldrb	r2, [r2, #0]
 800c2ba:	337b      	adds	r3, #123	@ 0x7b
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	0212      	lsls	r2, r2, #8
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	9b07      	ldr	r3, [sp, #28]
    len += draw_key_value_pair(file_ptr, TEXT_START, *y_pos, "Start Delay :", tmp);
 800c2c4:	1824      	adds	r4, r4, r0
    seconds_to_hms_string(dev_setting ->rad_interval,tmp,sizeof(tmp));
 800c2c6:	337d      	adds	r3, #125	@ 0x7d
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	a91a      	add	r1, sp, #104	@ 0x68
 800c2cc:	041b      	lsls	r3, r3, #16
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	9a07      	ldr	r2, [sp, #28]
 800c2d2:	327e      	adds	r2, #126	@ 0x7e
 800c2d4:	7810      	ldrb	r0, [r2, #0]
 800c2d6:	2210      	movs	r2, #16
 800c2d8:	0600      	lsls	r0, r0, #24
 800c2da:	4318      	orrs	r0, r3
 800c2dc:	4b20      	ldr	r3, [pc, #128]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c2de:	185b      	adds	r3, r3, r1
 800c2e0:	0019      	movs	r1, r3
 800c2e2:	f7ff f89d 	bl	800b420 <seconds_to_hms_string>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Radiation Log Interval :", tmp);
 800c2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c360 <pdf_gen_completed_report+0x488>)
 800c2e8:	a91a      	add	r1, sp, #104	@ 0x68
 800c2ea:	185b      	adds	r3, r3, r1
 800c2ec:	2096      	movs	r0, #150	@ 0x96
 800c2ee:	2199      	movs	r1, #153	@ 0x99
 800c2f0:	4a3a      	ldr	r2, [pc, #232]	@ (800c3dc <pdf_gen_completed_report+0x504>)
 800c2f2:	0089      	lsls	r1, r1, #2
 800c2f4:	0040      	lsls	r0, r0, #1
 800c2f6:	f7ff fb47 	bl	800b988 <draw_key_value_pair.constprop.0>
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Stop Mode :", "Manual + Software");
 800c2fa:	2196      	movs	r1, #150	@ 0x96
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Radiation Log Interval :", tmp);
 800c2fc:	1824      	adds	r4, r4, r0
    len += draw_key_value_pair(file_ptr, TEXT_SECOND_COL_START, *y_pos, "Stop Mode :", "Manual + Software");
 800c2fe:	2096      	movs	r0, #150	@ 0x96
 800c300:	4a37      	ldr	r2, [pc, #220]	@ (800c3e0 <pdf_gen_completed_report+0x508>)
 800c302:	4b38      	ldr	r3, [pc, #224]	@ (800c3e4 <pdf_gen_completed_report+0x50c>)
 800c304:	0089      	lsls	r1, r1, #2
 800c306:	0040      	lsls	r0, r0, #1
 800c308:	f7ff fb3e 	bl	800b988 <draw_key_value_pair.constprop.0>
 800c30c:	1824      	adds	r4, r4, r0
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c30e:	2091      	movs	r0, #145	@ 0x91
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c310:	9b08      	ldr	r3, [sp, #32]
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c312:	4935      	ldr	r1, [pc, #212]	@ (800c3e8 <pdf_gen_completed_report+0x510>)
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c314:	18e3      	adds	r3, r4, r3
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c316:	0080      	lsls	r0, r0, #2
    stream_len += pdf_config_info(&pdf_file, &current_y, dev_setting);
 800c318:	931d      	str	r3, [sp, #116]	@ 0x74
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c31a:	f7ff fb0f 	bl	800b93c <draw_section_title.constprop.0>
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c31e:	4b33      	ldr	r3, [pc, #204]	@ (800c3ec <pdf_gen_completed_report+0x514>)
 800c320:	228f      	movs	r2, #143	@ 0x8f
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	230a      	movs	r3, #10
 800c326:	4c32      	ldr	r4, [pc, #200]	@ (800c3f0 <pdf_gen_completed_report+0x518>)
 800c328:	4d15      	ldr	r5, [pc, #84]	@ (800c380 <pdf_gen_completed_report+0x4a8>)
 800c32a:	2137      	movs	r1, #55	@ 0x37
    int len = draw_section_title(file_ptr, *y_pos, "");
 800c32c:	9009      	str	r0, [sp, #36]	@ 0x24
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	0020      	movs	r0, r4
 800c332:	002b      	movs	r3, r5
 800c334:	0092      	lsls	r2, r2, #2
 800c336:	9703      	str	r7, [sp, #12]
 800c338:	9702      	str	r7, [sp, #8]
 800c33a:	9701      	str	r7, [sp, #4]
 800c33c:	f00c fa26 	bl	801878c <tpdf_draw_colored_text>
    len += tpdf_draw_colored_text(file_ptr,155,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Delay Time");
 800c340:	4b2c      	ldr	r3, [pc, #176]	@ (800c3f4 <pdf_gen_completed_report+0x51c>)
 800c342:	228f      	movs	r2, #143	@ 0x8f
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	230a      	movs	r3, #10
 800c348:	219b      	movs	r1, #155	@ 0x9b
    len += tpdf_draw_colored_text(file_ptr,TEXT_START,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Zone");
 800c34a:	9008      	str	r0, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,155,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Delay Time");
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	0020      	movs	r0, r4
 800c350:	002b      	movs	r3, r5
 800c352:	0092      	lsls	r2, r2, #2
 800c354:	e050      	b.n	800c3f8 <pdf_gen_completed_report+0x520>
 800c356:	46c0      	nop			@ (mov r8, r8)
 800c358:	20002cac 	.word	0x20002cac
 800c35c:	000004d2 	.word	0x000004d2
 800c360:	000008e8 	.word	0x000008e8
 800c364:	0801f391 	.word	0x0801f391
 800c368:	0801eeb3 	.word	0x0801eeb3
 800c36c:	0801f3a0 	.word	0x0801f3a0
 800c370:	0000031b 	.word	0x0000031b
 800c374:	00000221 	.word	0x00000221
 800c378:	0801f3ae 	.word	0x0801f3ae
 800c37c:	0801f400 	.word	0x0801f400
 800c380:	0801ef33 	.word	0x0801ef33
 800c384:	200009f8 	.word	0x200009f8
 800c388:	0801f409 	.word	0x0801f409
 800c38c:	0801f429 	.word	0x0801f429
 800c390:	0801f43b 	.word	0x0801f43b
 800c394:	0801f44e 	.word	0x0801f44e
 800c398:	0801e4a0 	.word	0x0801e4a0
 800c39c:	0801e4d6 	.word	0x0801e4d6
 800c3a0:	0801e4c5 	.word	0x0801e4c5
 800c3a4:	0801f45c 	.word	0x0801f45c
 800c3a8:	0801f469 	.word	0x0801f469
 800c3ac:	0801f479 	.word	0x0801f479
 800c3b0:	0801f48c 	.word	0x0801f48c
 800c3b4:	0801f498 	.word	0x0801f498
 800c3b8:	0801f4a9 	.word	0x0801f4a9
 800c3bc:	0801f4ad 	.word	0x0801f4ad
 800c3c0:	0801f4b7 	.word	0x0801f4b7
 800c3c4:	0801f31a 	.word	0x0801f31a
 800c3c8:	0801fe18 	.word	0x0801fe18
 800c3cc:	0801f4c5 	.word	0x0801f4c5
 800c3d0:	0801f4df 	.word	0x0801f4df
 800c3d4:	0801f4ec 	.word	0x0801f4ec
 800c3d8:	0801f507 	.word	0x0801f507
 800c3dc:	0801f515 	.word	0x0801f515
 800c3e0:	0801f540 	.word	0x0801f540
 800c3e4:	0801f52e 	.word	0x0801f52e
 800c3e8:	0801ed35 	.word	0x0801ed35
 800c3ec:	0801f54c 	.word	0x0801f54c
 800c3f0:	200030b4 	.word	0x200030b4
 800c3f4:	0801f557 	.word	0x0801f557
 800c3f8:	9703      	str	r7, [sp, #12]
 800c3fa:	9702      	str	r7, [sp, #8]
 800c3fc:	9701      	str	r7, [sp, #4]
 800c3fe:	f00c f9c5 	bl	801878c <tpdf_draw_colored_text>
 800c402:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,245,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Alarm Type");
 800c404:	4bf5      	ldr	r3, [pc, #980]	@ (800c7dc <pdf_gen_completed_report+0x904>)
 800c406:	1812      	adds	r2, r2, r0
 800c408:	9208      	str	r2, [sp, #32]
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	228f      	movs	r2, #143	@ 0x8f
 800c40e:	230a      	movs	r3, #10
 800c410:	21f5      	movs	r1, #245	@ 0xf5
 800c412:	0020      	movs	r0, r4
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	0092      	lsls	r2, r2, #2
 800c418:	002b      	movs	r3, r5
 800c41a:	9703      	str	r7, [sp, #12]
 800c41c:	9702      	str	r7, [sp, #8]
 800c41e:	9701      	str	r7, [sp, #4]
 800c420:	f00c f9b4 	bl	801878c <tpdf_draw_colored_text>
 800c424:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,325,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Total Time");
 800c426:	4bee      	ldr	r3, [pc, #952]	@ (800c7e0 <pdf_gen_completed_report+0x908>)
 800c428:	1882      	adds	r2, r0, r2
 800c42a:	9208      	str	r2, [sp, #32]
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	228f      	movs	r2, #143	@ 0x8f
 800c430:	230a      	movs	r3, #10
 800c432:	2146      	movs	r1, #70	@ 0x46
 800c434:	0020      	movs	r0, r4
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	002b      	movs	r3, r5
 800c43c:	31ff      	adds	r1, #255	@ 0xff
 800c43e:	9703      	str	r7, [sp, #12]
 800c440:	9702      	str	r7, [sp, #8]
 800c442:	9701      	str	r7, [sp, #4]
 800c444:	f00c f9a2 	bl	801878c <tpdf_draw_colored_text>
 800c448:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,435,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Violations");
 800c44a:	4be6      	ldr	r3, [pc, #920]	@ (800c7e4 <pdf_gen_completed_report+0x90c>)
 800c44c:	1882      	adds	r2, r0, r2
 800c44e:	9208      	str	r2, [sp, #32]
 800c450:	9304      	str	r3, [sp, #16]
 800c452:	228f      	movs	r2, #143	@ 0x8f
 800c454:	230a      	movs	r3, #10
 800c456:	21b4      	movs	r1, #180	@ 0xb4
 800c458:	0020      	movs	r0, r4
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	0092      	lsls	r2, r2, #2
 800c45e:	002b      	movs	r3, r5
 800c460:	31ff      	adds	r1, #255	@ 0xff
 800c462:	9703      	str	r7, [sp, #12]
 800c464:	9702      	str	r7, [sp, #8]
 800c466:	9701      	str	r7, [sp, #4]
 800c468:	f00c f990 	bl	801878c <tpdf_draw_colored_text>
 800c46c:	9a08      	ldr	r2, [sp, #32]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800c46e:	4bde      	ldr	r3, [pc, #888]	@ (800c7e8 <pdf_gen_completed_report+0x910>)
 800c470:	1882      	adds	r2, r0, r2
 800c472:	9208      	str	r2, [sp, #32]
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	228f      	movs	r2, #143	@ 0x8f
 800c478:	230a      	movs	r3, #10
 800c47a:	21fa      	movs	r1, #250	@ 0xfa
 800c47c:	0020      	movs	r0, r4
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	0092      	lsls	r2, r2, #2
 800c482:	002b      	movs	r3, r5
 800c484:	0049      	lsls	r1, r1, #1
 800c486:	9703      	str	r7, [sp, #12]
 800c488:	9702      	str	r7, [sp, #8]
 800c48a:	9701      	str	r7, [sp, #4]
 800c48c:	f00c f97e 	bl	801878c <tpdf_draw_colored_text>
 800c490:	9b08      	ldr	r3, [sp, #32]
 800c492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c494:	9907      	ldr	r1, [sp, #28]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800c496:	181b      	adds	r3, r3, r0
 800c498:	189b      	adds	r3, r3, r2
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c49a:	9a07      	ldr	r2, [sp, #28]
    len += tpdf_draw_colored_text(file_ptr,500,*y_pos,"F2",SECTION_TITLE_FONT_SIZE,0,0,0,"Status");
 800c49c:	931f      	str	r3, [sp, #124]	@ 0x7c
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c49e:	3185      	adds	r1, #133	@ 0x85
 800c4a0:	780c      	ldrb	r4, [r1, #0]
 800c4a2:	3284      	adds	r2, #132	@ 0x84
 800c4a4:	7812      	ldrb	r2, [r2, #0]
 800c4a6:	0224      	lsls	r4, r4, #8
 800c4a8:	4314      	orrs	r4, r2
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh1) : 0UL;
 800c4aa:	2200      	movs	r2, #0
    unsigned long rh1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh1)
 800c4ac:	6a73      	ldr	r3, [r6, #36]	@ 0x24
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh1) : 0UL;
 800c4ae:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d901      	bls.n	800c4b8 <pdf_gen_completed_report+0x5e0>
 800c4b4:	1b1a      	subs	r2, r3, r4
 800c4b6:	9217      	str	r2, [sp, #92]	@ 0x5c
    unsigned long rh2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_rh2)
 800c4b8:	9a07      	ldr	r2, [sp, #28]
 800c4ba:	3286      	adds	r2, #134	@ 0x86
 800c4bc:	7811      	ldrb	r1, [r2, #0]
 800c4be:	9a07      	ldr	r2, [sp, #28]
 800c4c0:	3287      	adds	r2, #135	@ 0x87
 800c4c2:	7812      	ldrb	r2, [r2, #0]
 800c4c4:	0212      	lsls	r2, r2, #8
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	9208      	str	r2, [sp, #32]
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_rh2) : 0UL;
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	9218      	str	r2, [sp, #96]	@ 0x60
 800c4ce:	9a08      	ldr	r2, [sp, #32]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d901      	bls.n	800c4d8 <pdf_gen_completed_report+0x600>
 800c4d4:	1a9a      	subs	r2, r3, r2
 800c4d6:	9218      	str	r2, [sp, #96]	@ 0x60
    unsigned long th1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_th1)
 800c4d8:	9a07      	ldr	r2, [sp, #28]
 800c4da:	3288      	adds	r2, #136	@ 0x88
 800c4dc:	7811      	ldrb	r1, [r2, #0]
 800c4de:	9a07      	ldr	r2, [sp, #28]
 800c4e0:	3289      	adds	r2, #137	@ 0x89
 800c4e2:	7812      	ldrb	r2, [r2, #0]
 800c4e4:	0212      	lsls	r2, r2, #8
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	9209      	str	r2, [sp, #36]	@ 0x24
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_th1) : 0UL;
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d901      	bls.n	800c4f8 <pdf_gen_completed_report+0x620>
 800c4f4:	1a9a      	subs	r2, r3, r2
 800c4f6:	9219      	str	r2, [sp, #100]	@ 0x64
    unsigned long th2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_th2)
 800c4f8:	9a07      	ldr	r2, [sp, #28]
 800c4fa:	328a      	adds	r2, #138	@ 0x8a
 800c4fc:	7811      	ldrb	r1, [r2, #0]
 800c4fe:	9a07      	ldr	r2, [sp, #28]
 800c500:	328b      	adds	r2, #139	@ 0x8b
 800c502:	7812      	ldrb	r2, [r2, #0]
 800c504:	0212      	lsls	r2, r2, #8
 800c506:	430a      	orrs	r2, r1
 800c508:	920a      	str	r2, [sp, #40]	@ 0x28
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_th2) : 0UL;
 800c50a:	2200      	movs	r2, #0
 800c50c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c510:	4293      	cmp	r3, r2
 800c512:	d901      	bls.n	800c518 <pdf_gen_completed_report+0x640>
 800c514:	1a9a      	subs	r2, r3, r2
 800c516:	921a      	str	r2, [sp, #104]	@ 0x68
    unsigned long tl1_total = (log->elapsed_time_sec > dev_setting->alarm_delay_tl1)
 800c518:	9a07      	ldr	r2, [sp, #28]
 800c51a:	328c      	adds	r2, #140	@ 0x8c
 800c51c:	7811      	ldrb	r1, [r2, #0]
 800c51e:	9a07      	ldr	r2, [sp, #28]
 800c520:	328d      	adds	r2, #141	@ 0x8d
 800c522:	7812      	ldrb	r2, [r2, #0]
 800c524:	0212      	lsls	r2, r2, #8
 800c526:	430a      	orrs	r2, r1
 800c528:	920b      	str	r2, [sp, #44]	@ 0x2c
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_tl1) : 0UL;
 800c52a:	2200      	movs	r2, #0
 800c52c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800c52e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c530:	4293      	cmp	r3, r2
 800c532:	d901      	bls.n	800c538 <pdf_gen_completed_report+0x660>
 800c534:	1a9a      	subs	r2, r3, r2
 800c536:	921b      	str	r2, [sp, #108]	@ 0x6c
    unsigned long tl2_total = (log->elapsed_time_sec > dev_setting->alarm_delay_tl2)
 800c538:	9a07      	ldr	r2, [sp, #28]
 800c53a:	328e      	adds	r2, #142	@ 0x8e
 800c53c:	7811      	ldrb	r1, [r2, #0]
 800c53e:	9a07      	ldr	r2, [sp, #28]
 800c540:	328f      	adds	r2, #143	@ 0x8f
 800c542:	7812      	ldrb	r2, [r2, #0]
 800c544:	0212      	lsls	r2, r2, #8
 800c546:	430a      	orrs	r2, r1
 800c548:	920c      	str	r2, [sp, #48]	@ 0x30
                            ? (log->elapsed_time_sec - dev_setting->alarm_delay_tl2) : 0UL;
 800c54a:	2200      	movs	r2, #0
 800c54c:	921c      	str	r2, [sp, #112]	@ 0x70
 800c54e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c550:	4293      	cmp	r3, r2
 800c552:	d901      	bls.n	800c558 <pdf_gen_completed_report+0x680>
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	931c      	str	r3, [sp, #112]	@ 0x70
    const uint16_t c_rh1 = log->RH1_alarm_count;
 800c558:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
    alarm_zone_info_t tmp_alrm[6] = {
 800c55a:	a81a      	add	r0, sp, #104	@ 0x68
    const uint16_t c_rh1 = log->RH1_alarm_count;
 800c55c:	930f      	str	r3, [sp, #60]	@ 0x3c
    const uint16_t c_rh2 = log->RH2_alarm_count;
 800c55e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
    alarm_zone_info_t tmp_alrm[6] = {
 800c560:	220a      	movs	r2, #10
    const uint16_t c_rh2 = log->RH2_alarm_count;
 800c562:	9310      	str	r3, [sp, #64]	@ 0x40
    const uint16_t c_th1 = log->TH1_alarm_count;
 800c564:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 800c566:	9312      	str	r3, [sp, #72]	@ 0x48
    const uint16_t c_th2 = log->TH2_alarm_count;
 800c568:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 800c56a:	9314      	str	r3, [sp, #80]	@ 0x50
    const uint16_t c_tl1 = log->TL1_alarm_count;
 800c56c:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 800c56e:	9315      	str	r3, [sp, #84]	@ 0x54
    const uint16_t c_tl2 = log->TL2_alarm_count;
 800c570:	8f73      	ldrh	r3, [r6, #58]	@ 0x3a
 800c572:	9316      	str	r3, [sp, #88]	@ 0x58
    alarm_zone_info_t tmp_alrm[6] = {
 800c574:	4b9d      	ldr	r3, [pc, #628]	@ (800c7ec <pdf_gen_completed_report+0x914>)
 800c576:	001d      	movs	r5, r3
 800c578:	0019      	movs	r1, r3
 800c57a:	4b9d      	ldr	r3, [pc, #628]	@ (800c7f0 <pdf_gen_completed_report+0x918>)
 800c57c:	181b      	adds	r3, r3, r0
 800c57e:	0018      	movs	r0, r3
 800c580:	f00d fe30 	bl	801a1e4 <memcpy>
 800c584:	489b      	ldr	r0, [pc, #620]	@ (800c7f4 <pdf_gen_completed_report+0x91c>)
 800c586:	ab1a      	add	r3, sp, #104	@ 0x68
 800c588:	2206      	movs	r2, #6
 800c58a:	2100      	movs	r1, #0
 800c58c:	18c0      	adds	r0, r0, r3
 800c58e:	f00d fd5f 	bl	801a050 <memset>
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800c592:	9a07      	ldr	r2, [sp, #28]
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	329c      	adds	r2, #156	@ 0x9c
 800c598:	7812      	ldrb	r2, [r2, #0]
 800c59a:	339b      	adds	r3, #155	@ 0x9b
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	0212      	lsls	r2, r2, #8
 800c5a0:	431a      	orrs	r2, r3
 800c5a2:	9b07      	ldr	r3, [sp, #28]
 800c5a4:	2164      	movs	r1, #100	@ 0x64
 800c5a6:	339d      	adds	r3, #157	@ 0x9d
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	041b      	lsls	r3, r3, #16
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	9a07      	ldr	r2, [sp, #28]
 800c5b0:	329e      	adds	r2, #158	@ 0x9e
 800c5b2:	7810      	ldrb	r0, [r2, #0]
 800c5b4:	0600      	lsls	r0, r0, #24
 800c5b6:	4318      	orrs	r0, r3
 800c5b8:	f7f3 fdd6 	bl	8000168 <__udivsi3>
    alarm_zone_info_t tmp_alrm[6] = {
 800c5bc:	4a8e      	ldr	r2, [pc, #568]	@ (800c7f8 <pdf_gen_completed_report+0x920>)
 800c5be:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5c0:	189b      	adds	r3, r3, r2
 800c5c2:	8018      	strh	r0, [r3, #0]
 800c5c4:	4b8d      	ldr	r3, [pc, #564]	@ (800c7fc <pdf_gen_completed_report+0x924>)
 800c5c6:	aa1a      	add	r2, sp, #104	@ 0x68
 800c5c8:	189b      	adds	r3, r3, r2
 800c5ca:	601c      	str	r4, [r3, #0]
 800c5cc:	2390      	movs	r3, #144	@ 0x90
 800c5ce:	4c8c      	ldr	r4, [pc, #560]	@ (800c800 <pdf_gen_completed_report+0x928>)
 800c5d0:	011b      	lsls	r3, r3, #4
 800c5d2:	189b      	adds	r3, r3, r2
 800c5d4:	4a8b      	ldr	r2, [pc, #556]	@ (800c804 <pdf_gen_completed_report+0x92c>)
 800c5d6:	601c      	str	r4, [r3, #0]
 800c5d8:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5da:	18d2      	adds	r2, r2, r3
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	4a89      	ldr	r2, [pc, #548]	@ (800c808 <pdf_gen_completed_report+0x930>)
 800c5e2:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5e4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c5e6:	18d2      	adds	r2, r2, r3
 800c5e8:	6011      	str	r1, [r2, #0]
 800c5ea:	4a88      	ldr	r2, [pc, #544]	@ (800c80c <pdf_gen_completed_report+0x934>)
 800c5ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c5ee:	18d2      	adds	r2, r2, r3
 800c5f0:	6011      	str	r1, [r2, #0]
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800c5f2:	000a      	movs	r2, r1
    alarm_zone_info_t tmp_alrm[6] = {
 800c5f4:	2191      	movs	r1, #145	@ 0x91
        {"RH1: over",  dev_setting->alarm_rh1/100, dev_setting->alarm_delay_rh1, "Sin", rh1_total, c_rh1, (c_rh1 ? 1 : 0)},
 800c5f6:	1e53      	subs	r3, r2, #1
 800c5f8:	419a      	sbcs	r2, r3
    alarm_zone_info_t tmp_alrm[6] = {
 800c5fa:	0109      	lsls	r1, r1, #4
 800c5fc:	ab1a      	add	r3, sp, #104	@ 0x68
 800c5fe:	18c9      	adds	r1, r1, r3
 800c600:	700a      	strb	r2, [r1, #0]
 800c602:	0029      	movs	r1, r5
 800c604:	4882      	ldr	r0, [pc, #520]	@ (800c810 <pdf_gen_completed_report+0x938>)
 800c606:	ab1a      	add	r3, sp, #104	@ 0x68
 800c608:	220a      	movs	r2, #10
 800c60a:	3110      	adds	r1, #16
 800c60c:	18c0      	adds	r0, r0, r3
 800c60e:	f00d fde9 	bl	801a1e4 <memcpy>
 800c612:	4880      	ldr	r0, [pc, #512]	@ (800c814 <pdf_gen_completed_report+0x93c>)
 800c614:	ab1a      	add	r3, sp, #104	@ 0x68
 800c616:	2206      	movs	r2, #6
 800c618:	2100      	movs	r1, #0
 800c61a:	18c0      	adds	r0, r0, r3
 800c61c:	f00d fd18 	bl	801a050 <memset>
        {"RH2: over",  dev_setting->alarm_rh2/100, dev_setting->alarm_delay_rh2, "Sin", rh2_total, c_rh2, (c_rh2 ? 1 : 0)},
 800c620:	9a07      	ldr	r2, [sp, #28]
 800c622:	9907      	ldr	r1, [sp, #28]
 800c624:	32a3      	adds	r2, #163	@ 0xa3
 800c626:	7813      	ldrb	r3, [r2, #0]
 800c628:	9a07      	ldr	r2, [sp, #28]
 800c62a:	31a5      	adds	r1, #165	@ 0xa5
 800c62c:	32a4      	adds	r2, #164	@ 0xa4
 800c62e:	7812      	ldrb	r2, [r2, #0]
 800c630:	0212      	lsls	r2, r2, #8
 800c632:	431a      	orrs	r2, r3
 800c634:	780b      	ldrb	r3, [r1, #0]
 800c636:	2164      	movs	r1, #100	@ 0x64
 800c638:	041b      	lsls	r3, r3, #16
 800c63a:	4313      	orrs	r3, r2
 800c63c:	9a07      	ldr	r2, [sp, #28]
 800c63e:	32a6      	adds	r2, #166	@ 0xa6
 800c640:	7810      	ldrb	r0, [r2, #0]
 800c642:	0600      	lsls	r0, r0, #24
 800c644:	4318      	orrs	r0, r3
 800c646:	f7f3 fd8f 	bl	8000168 <__udivsi3>
    alarm_zone_info_t tmp_alrm[6] = {
 800c64a:	4973      	ldr	r1, [pc, #460]	@ (800c818 <pdf_gen_completed_report+0x940>)
 800c64c:	aa1a      	add	r2, sp, #104	@ 0x68
 800c64e:	1852      	adds	r2, r2, r1
 800c650:	8010      	strh	r0, [r2, #0]
 800c652:	4a72      	ldr	r2, [pc, #456]	@ (800c81c <pdf_gen_completed_report+0x944>)
 800c654:	ab1a      	add	r3, sp, #104	@ 0x68
 800c656:	9908      	ldr	r1, [sp, #32]
 800c658:	18d2      	adds	r2, r2, r3
 800c65a:	6011      	str	r1, [r2, #0]
 800c65c:	4a70      	ldr	r2, [pc, #448]	@ (800c820 <pdf_gen_completed_report+0x948>)
 800c65e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c660:	18d2      	adds	r2, r2, r3
 800c662:	6014      	str	r4, [r2, #0]
 800c664:	2293      	movs	r2, #147	@ 0x93
 800c666:	0112      	lsls	r2, r2, #4
 800c668:	18d2      	adds	r2, r2, r3
 800c66a:	2300      	movs	r3, #0
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	4a6d      	ldr	r2, [pc, #436]	@ (800c824 <pdf_gen_completed_report+0x94c>)
 800c670:	ab1a      	add	r3, sp, #104	@ 0x68
 800c672:	18d2      	adds	r2, r2, r3
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	4a6c      	ldr	r2, [pc, #432]	@ (800c828 <pdf_gen_completed_report+0x950>)
 800c678:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c67a:	18d2      	adds	r2, r2, r3
 800c67c:	6011      	str	r1, [r2, #0]
        {"RH2: over",  dev_setting->alarm_rh2/100, dev_setting->alarm_delay_rh2, "Sin", rh2_total, c_rh2, (c_rh2 ? 1 : 0)},
 800c67e:	000a      	movs	r2, r1
 800c680:	1e53      	subs	r3, r2, #1
 800c682:	419a      	sbcs	r2, r3
    alarm_zone_info_t tmp_alrm[6] = {
 800c684:	4969      	ldr	r1, [pc, #420]	@ (800c82c <pdf_gen_completed_report+0x954>)
 800c686:	ab1a      	add	r3, sp, #104	@ 0x68
 800c688:	18c9      	adds	r1, r1, r3
 800c68a:	2094      	movs	r0, #148	@ 0x94
 800c68c:	700a      	strb	r2, [r1, #0]
 800c68e:	0029      	movs	r1, r5
 800c690:	ab1a      	add	r3, sp, #104	@ 0x68
 800c692:	0100      	lsls	r0, r0, #4
 800c694:	220a      	movs	r2, #10
 800c696:	3120      	adds	r1, #32
 800c698:	18c0      	adds	r0, r0, r3
 800c69a:	f00d fda3 	bl	801a1e4 <memcpy>
 800c69e:	4864      	ldr	r0, [pc, #400]	@ (800c830 <pdf_gen_completed_report+0x958>)
 800c6a0:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6a2:	2206      	movs	r2, #6
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	18c0      	adds	r0, r0, r3
 800c6a8:	f00d fcd2 	bl	801a050 <memset>
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800c6ac:	9a07      	ldr	r2, [sp, #28]
    alarm_zone_info_t tmp_alrm[6] = {
 800c6ae:	210a      	movs	r1, #10
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800c6b0:	329f      	adds	r2, #159	@ 0x9f
 800c6b2:	7813      	ldrb	r3, [r2, #0]
 800c6b4:	9a07      	ldr	r2, [sp, #28]
 800c6b6:	32a0      	adds	r2, #160	@ 0xa0
 800c6b8:	7810      	ldrb	r0, [r2, #0]
 800c6ba:	0200      	lsls	r0, r0, #8
 800c6bc:	4318      	orrs	r0, r3
 800c6be:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800c6c0:	1400      	asrs	r0, r0, #16
 800c6c2:	f7f3 fddb 	bl	800027c <__divsi3>
 800c6c6:	2295      	movs	r2, #149	@ 0x95
 800c6c8:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6ca:	0112      	lsls	r2, r2, #4
 800c6cc:	18d2      	adds	r2, r2, r3
 800c6ce:	8010      	strh	r0, [r2, #0]
 800c6d0:	4a58      	ldr	r2, [pc, #352]	@ (800c834 <pdf_gen_completed_report+0x95c>)
 800c6d2:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6d6:	18d2      	adds	r2, r2, r3
 800c6d8:	6011      	str	r1, [r2, #0]
 800c6da:	4a57      	ldr	r2, [pc, #348]	@ (800c838 <pdf_gen_completed_report+0x960>)
 800c6dc:	4957      	ldr	r1, [pc, #348]	@ (800c83c <pdf_gen_completed_report+0x964>)
 800c6de:	18d2      	adds	r2, r2, r3
 800c6e0:	18c9      	adds	r1, r1, r3
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	6014      	str	r4, [r2, #0]
 800c6e6:	600b      	str	r3, [r1, #0]
 800c6e8:	2196      	movs	r1, #150	@ 0x96
 800c6ea:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c6ec:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6ee:	0109      	lsls	r1, r1, #4
 800c6f0:	18c9      	adds	r1, r1, r3
 800c6f2:	6008      	str	r0, [r1, #0]
 800c6f4:	4952      	ldr	r1, [pc, #328]	@ (800c840 <pdf_gen_completed_report+0x968>)
 800c6f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c6f8:	18c9      	adds	r1, r1, r3
 800c6fa:	6008      	str	r0, [r1, #0]
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800c6fc:	0001      	movs	r1, r0
 800c6fe:	1e4a      	subs	r2, r1, #1
 800c700:	4191      	sbcs	r1, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800c702:	4a50      	ldr	r2, [pc, #320]	@ (800c844 <pdf_gen_completed_report+0x96c>)
        {"TH1: over",  dev_setting->alarm_th1/10,  dev_setting->alarm_delay_th1, "Sin", th1_total, c_th1, (c_th1 ? 1 : 0)},
 800c704:	000b      	movs	r3, r1
    alarm_zone_info_t tmp_alrm[6] = {
 800c706:	a91a      	add	r1, sp, #104	@ 0x68
 800c708:	1852      	adds	r2, r2, r1
 800c70a:	0029      	movs	r1, r5
 800c70c:	484e      	ldr	r0, [pc, #312]	@ (800c848 <pdf_gen_completed_report+0x970>)
 800c70e:	7013      	strb	r3, [r2, #0]
 800c710:	ab1a      	add	r3, sp, #104	@ 0x68
 800c712:	220a      	movs	r2, #10
 800c714:	3130      	adds	r1, #48	@ 0x30
 800c716:	18c0      	adds	r0, r0, r3
 800c718:	f00d fd64 	bl	801a1e4 <memcpy>
 800c71c:	484b      	ldr	r0, [pc, #300]	@ (800c84c <pdf_gen_completed_report+0x974>)
 800c71e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c720:	2206      	movs	r2, #6
 800c722:	2100      	movs	r1, #0
 800c724:	18c0      	adds	r0, r0, r3
 800c726:	f00d fc93 	bl	801a050 <memset>
        {"TH2: over",  dev_setting->alarm_th2/10,  dev_setting->alarm_delay_th2, "Sin", th2_total, c_th2, (c_th2 ? 1 : 0)},
 800c72a:	9a07      	ldr	r2, [sp, #28]
 800c72c:	9907      	ldr	r1, [sp, #28]
 800c72e:	32a8      	adds	r2, #168	@ 0xa8
 800c730:	7810      	ldrb	r0, [r2, #0]
 800c732:	31a7      	adds	r1, #167	@ 0xa7
 800c734:	780b      	ldrb	r3, [r1, #0]
 800c736:	0200      	lsls	r0, r0, #8
 800c738:	4318      	orrs	r0, r3
 800c73a:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800c73c:	210a      	movs	r1, #10
 800c73e:	1400      	asrs	r0, r0, #16
 800c740:	f7f3 fd9c 	bl	800027c <__divsi3>
 800c744:	4942      	ldr	r1, [pc, #264]	@ (800c850 <pdf_gen_completed_report+0x978>)
 800c746:	ab1a      	add	r3, sp, #104	@ 0x68
 800c748:	18c9      	adds	r1, r1, r3
 800c74a:	8008      	strh	r0, [r1, #0]
 800c74c:	2198      	movs	r1, #152	@ 0x98
 800c74e:	2200      	movs	r2, #0
 800c750:	ab1a      	add	r3, sp, #104	@ 0x68
 800c752:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c754:	0109      	lsls	r1, r1, #4
 800c756:	18c9      	adds	r1, r1, r3
 800c758:	6008      	str	r0, [r1, #0]
 800c75a:	493e      	ldr	r1, [pc, #248]	@ (800c854 <pdf_gen_completed_report+0x97c>)
 800c75c:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800c75e:	18c9      	adds	r1, r1, r3
 800c760:	600c      	str	r4, [r1, #0]
 800c762:	493c      	ldr	r1, [pc, #240]	@ (800c854 <pdf_gen_completed_report+0x97c>)
 800c764:	18c9      	adds	r1, r1, r3
 800c766:	604a      	str	r2, [r1, #4]
 800c768:	493b      	ldr	r1, [pc, #236]	@ (800c858 <pdf_gen_completed_report+0x980>)
 800c76a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c76c:	18c9      	adds	r1, r1, r3
 800c76e:	6008      	str	r0, [r1, #0]
 800c770:	2199      	movs	r1, #153	@ 0x99
 800c772:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c774:	0109      	lsls	r1, r1, #4
 800c776:	18c9      	adds	r1, r1, r3
        {"TH2: over",  dev_setting->alarm_th2/10,  dev_setting->alarm_delay_th2, "Sin", th2_total, c_th2, (c_th2 ? 1 : 0)},
 800c778:	0003      	movs	r3, r0
 800c77a:	1e5a      	subs	r2, r3, #1
 800c77c:	4193      	sbcs	r3, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800c77e:	6008      	str	r0, [r1, #0]
 800c780:	4936      	ldr	r1, [pc, #216]	@ (800c85c <pdf_gen_completed_report+0x984>)
 800c782:	aa1a      	add	r2, sp, #104	@ 0x68
 800c784:	1889      	adds	r1, r1, r2
 800c786:	700b      	strb	r3, [r1, #0]
 800c788:	0029      	movs	r1, r5
 800c78a:	4835      	ldr	r0, [pc, #212]	@ (800c860 <pdf_gen_completed_report+0x988>)
 800c78c:	ab1a      	add	r3, sp, #104	@ 0x68
 800c78e:	220b      	movs	r2, #11
 800c790:	3140      	adds	r1, #64	@ 0x40
 800c792:	18c0      	adds	r0, r0, r3
 800c794:	f00d fd26 	bl	801a1e4 <memcpy>
 800c798:	4832      	ldr	r0, [pc, #200]	@ (800c864 <pdf_gen_completed_report+0x98c>)
 800c79a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c79c:	2205      	movs	r2, #5
 800c79e:	2100      	movs	r1, #0
 800c7a0:	18c0      	adds	r0, r0, r3
 800c7a2:	f00d fc55 	bl	801a050 <memset>
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800c7a6:	9907      	ldr	r1, [sp, #28]
 800c7a8:	9b07      	ldr	r3, [sp, #28]
 800c7aa:	31a2      	adds	r1, #162	@ 0xa2
 800c7ac:	7808      	ldrb	r0, [r1, #0]
 800c7ae:	33a1      	adds	r3, #161	@ 0xa1
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	0200      	lsls	r0, r0, #8
 800c7b4:	4318      	orrs	r0, r3
 800c7b6:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800c7b8:	210a      	movs	r1, #10
 800c7ba:	1400      	asrs	r0, r0, #16
 800c7bc:	f7f3 fd5e 	bl	800027c <__divsi3>
 800c7c0:	4b29      	ldr	r3, [pc, #164]	@ (800c868 <pdf_gen_completed_report+0x990>)
 800c7c2:	aa1a      	add	r2, sp, #104	@ 0x68
 800c7c4:	189b      	adds	r3, r3, r2
 800c7c6:	4929      	ldr	r1, [pc, #164]	@ (800c86c <pdf_gen_completed_report+0x994>)
 800c7c8:	8018      	strh	r0, [r3, #0]
 800c7ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c7cc:	1889      	adds	r1, r1, r2
 800c7ce:	6008      	str	r0, [r1, #0]
 800c7d0:	219b      	movs	r1, #155	@ 0x9b
 800c7d2:	0109      	lsls	r1, r1, #4
 800c7d4:	1889      	adds	r1, r1, r2
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	e04a      	b.n	800c870 <pdf_gen_completed_report+0x998>
 800c7da:	46c0      	nop			@ (mov r8, r8)
 800c7dc:	0801f562 	.word	0x0801f562
 800c7e0:	0801f56d 	.word	0x0801f56d
 800c7e4:	0801f578 	.word	0x0801f578
 800c7e8:	0801f583 	.word	0x0801f583
 800c7ec:	0801c594 	.word	0x0801c594
 800c7f0:	000008e8 	.word	0x000008e8
 800c7f4:	000008f2 	.word	0x000008f2
 800c7f8:	000008f8 	.word	0x000008f8
 800c7fc:	000008fc 	.word	0x000008fc
 800c800:	006e6953 	.word	0x006e6953
 800c804:	00000904 	.word	0x00000904
 800c808:	00000908 	.word	0x00000908
 800c80c:	0000090c 	.word	0x0000090c
 800c810:	00000914 	.word	0x00000914
 800c814:	0000091e 	.word	0x0000091e
 800c818:	00000924 	.word	0x00000924
 800c81c:	00000928 	.word	0x00000928
 800c820:	0000092c 	.word	0x0000092c
 800c824:	00000934 	.word	0x00000934
 800c828:	00000938 	.word	0x00000938
 800c82c:	0000093c 	.word	0x0000093c
 800c830:	0000094a 	.word	0x0000094a
 800c834:	00000954 	.word	0x00000954
 800c838:	00000958 	.word	0x00000958
 800c83c:	0000095c 	.word	0x0000095c
 800c840:	00000964 	.word	0x00000964
 800c844:	00000968 	.word	0x00000968
 800c848:	0000096c 	.word	0x0000096c
 800c84c:	00000976 	.word	0x00000976
 800c850:	0000097c 	.word	0x0000097c
 800c854:	00000984 	.word	0x00000984
 800c858:	0000098c 	.word	0x0000098c
 800c85c:	00000994 	.word	0x00000994
 800c860:	00000998 	.word	0x00000998
 800c864:	000009a3 	.word	0x000009a3
 800c868:	000009a8 	.word	0x000009a8
 800c86c:	000009ac 	.word	0x000009ac
 800c870:	600c      	str	r4, [r1, #0]
 800c872:	604a      	str	r2, [r1, #4]
 800c874:	49fe      	ldr	r1, [pc, #1016]	@ (800cc70 <pdf_gen_completed_report+0xd98>)
 800c876:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800c878:	ab1a      	add	r3, sp, #104	@ 0x68
 800c87a:	18c9      	adds	r1, r1, r3
 800c87c:	6008      	str	r0, [r1, #0]
 800c87e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800c880:	49fc      	ldr	r1, [pc, #1008]	@ (800cc74 <pdf_gen_completed_report+0xd9c>)
 800c882:	18c9      	adds	r1, r1, r3
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800c884:	0003      	movs	r3, r0
    alarm_zone_info_t tmp_alrm[6] = {
 800c886:	6008      	str	r0, [r1, #0]
 800c888:	219c      	movs	r1, #156	@ 0x9c
        {"TL1: below", dev_setting->alarm_tl1/10,  dev_setting->alarm_delay_tl1, "Sin", tl1_total, c_tl1, (c_tl1 ? 1 : 0)},
 800c88a:	1e5a      	subs	r2, r3, #1
 800c88c:	4193      	sbcs	r3, r2
    alarm_zone_info_t tmp_alrm[6] = {
 800c88e:	0109      	lsls	r1, r1, #4
 800c890:	aa1a      	add	r2, sp, #104	@ 0x68
 800c892:	1889      	adds	r1, r1, r2
 800c894:	700b      	strb	r3, [r1, #0]
 800c896:	0029      	movs	r1, r5
 800c898:	48f7      	ldr	r0, [pc, #988]	@ (800cc78 <pdf_gen_completed_report+0xda0>)
 800c89a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c89c:	220b      	movs	r2, #11
 800c89e:	3150      	adds	r1, #80	@ 0x50
 800c8a0:	18c0      	adds	r0, r0, r3
 800c8a2:	f00d fc9f 	bl	801a1e4 <memcpy>
 800c8a6:	48f5      	ldr	r0, [pc, #980]	@ (800cc7c <pdf_gen_completed_report+0xda4>)
 800c8a8:	ab1a      	add	r3, sp, #104	@ 0x68
 800c8aa:	2205      	movs	r2, #5
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	18c0      	adds	r0, r0, r3
 800c8b0:	f00d fbce 	bl	801a050 <memset>
        {"TL2: below", dev_setting->alarm_tl2/10,  dev_setting->alarm_delay_tl2, "Sin", tl2_total, c_tl2, (c_tl2 ? 1 : 0)},
 800c8b4:	9907      	ldr	r1, [sp, #28]
 800c8b6:	9b07      	ldr	r3, [sp, #28]
 800c8b8:	31aa      	adds	r1, #170	@ 0xaa
 800c8ba:	7808      	ldrb	r0, [r1, #0]
 800c8bc:	33a9      	adds	r3, #169	@ 0xa9
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	0200      	lsls	r0, r0, #8
 800c8c2:	4318      	orrs	r0, r3
 800c8c4:	0400      	lsls	r0, r0, #16
    alarm_zone_info_t tmp_alrm[6] = {
 800c8c6:	210a      	movs	r1, #10
 800c8c8:	1400      	asrs	r0, r0, #16
 800c8ca:	f7f3 fcd7 	bl	800027c <__divsi3>
 800c8ce:	4bec      	ldr	r3, [pc, #944]	@ (800cc80 <pdf_gen_completed_report+0xda8>)
 800c8d0:	aa1a      	add	r2, sp, #104	@ 0x68
 800c8d2:	189b      	adds	r3, r3, r2
 800c8d4:	49eb      	ldr	r1, [pc, #940]	@ (800cc84 <pdf_gen_completed_report+0xdac>)
 800c8d6:	8018      	strh	r0, [r3, #0]
 800c8d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800c8da:	1889      	adds	r1, r1, r2
 800c8dc:	6008      	str	r0, [r1, #0]
 800c8de:	49ea      	ldr	r1, [pc, #936]	@ (800cc88 <pdf_gen_completed_report+0xdb0>)
 800c8e0:	4bea      	ldr	r3, [pc, #936]	@ (800cc8c <pdf_gen_completed_report+0xdb4>)
 800c8e2:	1889      	adds	r1, r1, r2
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	600c      	str	r4, [r1, #0]
 800c8e8:	604a      	str	r2, [r1, #4]
 800c8ea:	aa1a      	add	r2, sp, #104	@ 0x68
 800c8ec:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c8ee:	189b      	adds	r3, r3, r2
 800c8f0:	6019      	str	r1, [r3, #0]
 800c8f2:	4be7      	ldr	r3, [pc, #924]	@ (800cc90 <pdf_gen_completed_report+0xdb8>)
 800c8f4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800c8f6:	189b      	adds	r3, r3, r2
 800c8f8:	6019      	str	r1, [r3, #0]
        {"TL2: below", dev_setting->alarm_tl2/10,  dev_setting->alarm_delay_tl2, "Sin", tl2_total, c_tl2, (c_tl2 ? 1 : 0)},
 800c8fa:	000b      	movs	r3, r1
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	4193      	sbcs	r3, r2
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800c900:	208c      	movs	r0, #140	@ 0x8c
    alarm_zone_info_t tmp_alrm[6] = {
 800c902:	49e4      	ldr	r1, [pc, #912]	@ (800cc94 <pdf_gen_completed_report+0xdbc>)
 800c904:	aa1a      	add	r2, sp, #104	@ 0x68
 800c906:	1889      	adds	r1, r1, r2
 800c908:	714b      	strb	r3, [r1, #5]
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800c90a:	4be3      	ldr	r3, [pc, #908]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800c90c:	a91a      	add	r1, sp, #104	@ 0x68
 800c90e:	185b      	adds	r3, r3, r1
 800c910:	0019      	movs	r1, r3
 800c912:	2208      	movs	r2, #8
 800c914:	0080      	lsls	r0, r0, #2
 800c916:	f7fe ff31 	bl	800b77c <pdf_alarm_row.constprop.0>
 800c91a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800c91c:	a91a      	add	r1, sp, #104	@ 0x68
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[0], ALARM_STATE_POS_RH1);  *y_pos -= LINE_SPACING;
 800c91e:	181c      	adds	r4, r3, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800c920:	2089      	movs	r0, #137	@ 0x89
 800c922:	4bde      	ldr	r3, [pc, #888]	@ (800cc9c <pdf_gen_completed_report+0xdc4>)
 800c924:	220a      	movs	r2, #10
 800c926:	185b      	adds	r3, r3, r1
 800c928:	0019      	movs	r1, r3
 800c92a:	0080      	lsls	r0, r0, #2
 800c92c:	f7fe ff26 	bl	800b77c <pdf_alarm_row.constprop.0>
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[2], ALARM_STATE_POS_TH1);  *y_pos -= LINE_SPACING;
 800c930:	2394      	movs	r3, #148	@ 0x94
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[1], ALARM_STATE_POS_RH2);  *y_pos -= LINE_SPACING;
 800c932:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[2], ALARM_STATE_POS_TH1);  *y_pos -= LINE_SPACING;
 800c934:	2086      	movs	r0, #134	@ 0x86
 800c936:	a91a      	add	r1, sp, #104	@ 0x68
 800c938:	011b      	lsls	r3, r3, #4
 800c93a:	185b      	adds	r3, r3, r1
 800c93c:	0019      	movs	r1, r3
 800c93e:	220c      	movs	r2, #12
 800c940:	0080      	lsls	r0, r0, #2
 800c942:	f7fe ff1b 	bl	800b77c <pdf_alarm_row.constprop.0>
 800c946:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[3], ALARM_STATE_POS_TH2);  *y_pos -= LINE_SPACING;
 800c948:	2083      	movs	r0, #131	@ 0x83
 800c94a:	4bd5      	ldr	r3, [pc, #852]	@ (800cca0 <pdf_gen_completed_report+0xdc8>)
 800c94c:	a91a      	add	r1, sp, #104	@ 0x68
 800c94e:	185b      	adds	r3, r3, r1
 800c950:	0019      	movs	r1, r3
 800c952:	220e      	movs	r2, #14
 800c954:	0080      	lsls	r0, r0, #2
 800c956:	f7fe ff11 	bl	800b77c <pdf_alarm_row.constprop.0>
 800c95a:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[4], ALARM_STATE_POS_TL1);  *y_pos -= LINE_SPACING;
 800c95c:	2080      	movs	r0, #128	@ 0x80
 800c95e:	4bd1      	ldr	r3, [pc, #836]	@ (800cca4 <pdf_gen_completed_report+0xdcc>)
 800c960:	a91a      	add	r1, sp, #104	@ 0x68
 800c962:	185b      	adds	r3, r3, r1
 800c964:	0019      	movs	r1, r3
 800c966:	2210      	movs	r2, #16
 800c968:	0080      	lsls	r0, r0, #2
 800c96a:	f7fe ff07 	bl	800b77c <pdf_alarm_row.constprop.0>
 800c96e:	1824      	adds	r4, r4, r0
    len += pdf_alarm_row(file_ptr, *y_pos, &tmp_alrm[5], ALARM_STATE_POS_TL2);  *y_pos -= LINE_SPACING;
 800c970:	20fa      	movs	r0, #250	@ 0xfa
 800c972:	4bc1      	ldr	r3, [pc, #772]	@ (800cc78 <pdf_gen_completed_report+0xda0>)
 800c974:	a91a      	add	r1, sp, #104	@ 0x68
 800c976:	185b      	adds	r3, r3, r1
 800c978:	2212      	movs	r2, #18
 800c97a:	0019      	movs	r1, r3
 800c97c:	0040      	lsls	r0, r0, #1
 800c97e:	f7fe fefd 	bl	800b77c <pdf_alarm_row.constprop.0>
 800c982:	1824      	adds	r4, r4, r0
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800c984:	20ea      	movs	r0, #234	@ 0xea
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800c986:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800c988:	49c7      	ldr	r1, [pc, #796]	@ (800cca8 <pdf_gen_completed_report+0xdd0>)
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800c98a:	18e3      	adds	r3, r4, r3
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800c98c:	0040      	lsls	r0, r0, #1
    stream_len += pdf_alarm_table(&pdf_file, &current_y,dev_setting, summary); // Draw the new table
 800c98e:	9308      	str	r3, [sp, #32]
    int len = draw_section_title(file_ptr, *y_pos, "Logging Summary");
 800c990:	f7fe ffd4 	bl	800b93c <draw_section_title.constprop.0>
 800c994:	0005      	movs	r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->highest_temp);
 800c996:	6830      	ldr	r0, [r6, #0]
 800c998:	f7f6 fefe 	bl	8003798 <__aeabi_f2d>
 800c99c:	4bbe      	ldr	r3, [pc, #760]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800c99e:	4cc3      	ldr	r4, [pc, #780]	@ (800ccac <pdf_gen_completed_report+0xdd4>)
 800c9a0:	9000      	str	r0, [sp, #0]
 800c9a2:	9101      	str	r1, [sp, #4]
 800c9a4:	a81a      	add	r0, sp, #104	@ 0x68
 800c9a6:	181b      	adds	r3, r3, r0
 800c9a8:	0022      	movs	r2, r4
 800c9aa:	2140      	movs	r1, #64	@ 0x40
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	f00d f9fd 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Highest Temperature :", tmp_buff);
 800c9b2:	4bb9      	ldr	r3, [pc, #740]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800c9b4:	a91a      	add	r1, sp, #104	@ 0x68
 800c9b6:	185b      	adds	r3, r3, r1
 800c9b8:	21e0      	movs	r1, #224	@ 0xe0
 800c9ba:	4abd      	ldr	r2, [pc, #756]	@ (800ccb0 <pdf_gen_completed_report+0xdd8>)
 800c9bc:	0049      	lsls	r1, r1, #1
 800c9be:	2037      	movs	r0, #55	@ 0x37
 800c9c0:	f7fe ffe2 	bl	800b988 <draw_key_value_pair.constprop.0>
 800c9c4:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->lowest_temp);
 800c9c6:	6870      	ldr	r0, [r6, #4]
 800c9c8:	f7f6 fee6 	bl	8003798 <__aeabi_f2d>
 800c9cc:	4bb2      	ldr	r3, [pc, #712]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800c9ce:	9000      	str	r0, [sp, #0]
 800c9d0:	9101      	str	r1, [sp, #4]
 800c9d2:	a81a      	add	r0, sp, #104	@ 0x68
 800c9d4:	181b      	adds	r3, r3, r0
 800c9d6:	0022      	movs	r2, r4
 800c9d8:	2140      	movs	r1, #64	@ 0x40
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f00d f9e6 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Lowest Temperature :", tmp_buff);
 800c9e0:	4bad      	ldr	r3, [pc, #692]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800c9e2:	a91a      	add	r1, sp, #104	@ 0x68
 800c9e4:	185b      	adds	r3, r3, r1
 800c9e6:	21da      	movs	r1, #218	@ 0xda
 800c9e8:	4ab2      	ldr	r2, [pc, #712]	@ (800ccb4 <pdf_gen_completed_report+0xddc>)
 800c9ea:	0049      	lsls	r1, r1, #1
 800c9ec:	2037      	movs	r0, #55	@ 0x37
 800c9ee:	f7fe ffcb 	bl	800b988 <draw_key_value_pair.constprop.0>
 800c9f2:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->average_temp);
 800c9f4:	68b0      	ldr	r0, [r6, #8]
 800c9f6:	f7f6 fecf 	bl	8003798 <__aeabi_f2d>
 800c9fa:	4ba7      	ldr	r3, [pc, #668]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800c9fc:	9000      	str	r0, [sp, #0]
 800c9fe:	9101      	str	r1, [sp, #4]
 800ca00:	a81a      	add	r0, sp, #104	@ 0x68
 800ca02:	181b      	adds	r3, r3, r0
 800ca04:	0022      	movs	r2, r4
 800ca06:	2140      	movs	r1, #64	@ 0x40
 800ca08:	0018      	movs	r0, r3
 800ca0a:	f00d f9cf 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Temperature :", tmp_buff);
 800ca0e:	4ba2      	ldr	r3, [pc, #648]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca10:	a91a      	add	r1, sp, #104	@ 0x68
 800ca12:	185b      	adds	r3, r3, r1
 800ca14:	21d4      	movs	r1, #212	@ 0xd4
 800ca16:	4aa8      	ldr	r2, [pc, #672]	@ (800ccb8 <pdf_gen_completed_report+0xde0>)
 800ca18:	0049      	lsls	r1, r1, #1
 800ca1a:	2037      	movs	r0, #55	@ 0x37
 800ca1c:	f7fe ffb4 	bl	800b988 <draw_key_value_pair.constprop.0>
 800ca20:	182d      	adds	r5, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.1f (C)",log->mean_kinetic_temp);
 800ca22:	6970      	ldr	r0, [r6, #20]
 800ca24:	f7f6 feb8 	bl	8003798 <__aeabi_f2d>
 800ca28:	4b9b      	ldr	r3, [pc, #620]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca2a:	9000      	str	r0, [sp, #0]
 800ca2c:	9101      	str	r1, [sp, #4]
 800ca2e:	a81a      	add	r0, sp, #104	@ 0x68
 800ca30:	181b      	adds	r3, r3, r0
 800ca32:	0022      	movs	r2, r4
 800ca34:	2140      	movs	r1, #64	@ 0x40
 800ca36:	0018      	movs	r0, r3
 800ca38:	f00d f9b8 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "MKT :", tmp_buff);
 800ca3c:	4b96      	ldr	r3, [pc, #600]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca3e:	a91a      	add	r1, sp, #104	@ 0x68
 800ca40:	185b      	adds	r3, r3, r1
 800ca42:	21ce      	movs	r1, #206	@ 0xce
 800ca44:	4a9d      	ldr	r2, [pc, #628]	@ (800ccbc <pdf_gen_completed_report+0xde4>)
 800ca46:	0049      	lsls	r1, r1, #1
 800ca48:	2037      	movs	r0, #55	@ 0x37
 800ca4a:	f7fe ff9d 	bl	800b988 <draw_key_value_pair.constprop.0>
 800ca4e:	182c      	adds	r4, r5, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.2f (uSv/h)",log->highest_radiation);
 800ca50:	68f0      	ldr	r0, [r6, #12]
 800ca52:	f7f6 fea1 	bl	8003798 <__aeabi_f2d>
 800ca56:	4b90      	ldr	r3, [pc, #576]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca58:	9000      	str	r0, [sp, #0]
 800ca5a:	9101      	str	r1, [sp, #4]
 800ca5c:	4d98      	ldr	r5, [pc, #608]	@ (800ccc0 <pdf_gen_completed_report+0xde8>)
 800ca5e:	a81a      	add	r0, sp, #104	@ 0x68
 800ca60:	181b      	adds	r3, r3, r0
 800ca62:	002a      	movs	r2, r5
 800ca64:	2140      	movs	r1, #64	@ 0x40
 800ca66:	0018      	movs	r0, r3
 800ca68:	f00d f9a0 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Highest Rad :", tmp_buff);
 800ca6c:	4b8a      	ldr	r3, [pc, #552]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca6e:	a91a      	add	r1, sp, #104	@ 0x68
 800ca70:	185b      	adds	r3, r3, r1
 800ca72:	21c8      	movs	r1, #200	@ 0xc8
 800ca74:	4a93      	ldr	r2, [pc, #588]	@ (800ccc4 <pdf_gen_completed_report+0xdec>)
 800ca76:	0049      	lsls	r1, r1, #1
 800ca78:	2037      	movs	r0, #55	@ 0x37
 800ca7a:	f7fe ff85 	bl	800b988 <draw_key_value_pair.constprop.0>
 800ca7e:	1824      	adds	r4, r4, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%.2f (uSv/h)",log->average_radiation);
 800ca80:	6930      	ldr	r0, [r6, #16]
 800ca82:	f7f6 fe89 	bl	8003798 <__aeabi_f2d>
 800ca86:	4b84      	ldr	r3, [pc, #528]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca88:	9000      	str	r0, [sp, #0]
 800ca8a:	9101      	str	r1, [sp, #4]
 800ca8c:	a81a      	add	r0, sp, #104	@ 0x68
 800ca8e:	181b      	adds	r3, r3, r0
 800ca90:	002a      	movs	r2, r5
 800ca92:	2140      	movs	r1, #64	@ 0x40
 800ca94:	0018      	movs	r0, r3
 800ca96:	f00d f989 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Rad :", tmp_buff);
 800ca9a:	4b7f      	ldr	r3, [pc, #508]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800ca9c:	a91a      	add	r1, sp, #104	@ 0x68
 800ca9e:	185b      	adds	r3, r3, r1
 800caa0:	21c2      	movs	r1, #194	@ 0xc2
 800caa2:	4a89      	ldr	r2, [pc, #548]	@ (800ccc8 <pdf_gen_completed_report+0xdf0>)
 800caa4:	0049      	lsls	r1, r1, #1
 800caa6:	2037      	movs	r0, #55	@ 0x37
 800caa8:	f7fe ff6e 	bl	800b988 <draw_key_value_pair.constprop.0>
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800caac:	2380      	movs	r3, #128	@ 0x80
 800caae:	2200      	movs	r2, #0
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	9374      	str	r3, [sp, #464]	@ 0x1d0
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800cab4:	4b78      	ldr	r3, [pc, #480]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cab6:	a91a      	add	r1, sp, #104	@ 0x68
 800cab8:	185b      	adds	r3, r3, r1
    len += draw_key_value_pair(file_ptr, 55, current_y, "Average Rad :", tmp_buff);
 800caba:	1824      	adds	r4, r4, r0
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800cabc:	a874      	add	r0, sp, #464	@ 0x1d0
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800cabe:	0019      	movs	r1, r3
    file_log_time_t tmp_alrm_trg ={.year =0, .month=1, .day =0, .hour=0, .minute =0, .second =0};
 800cac0:	8082      	strh	r2, [r0, #4]
    time_to_dmyhms_string(&tmp_alrm_trg,tmp_buff,sizeof(tmp_buff));
 800cac2:	3240      	adds	r2, #64	@ 0x40
 800cac4:	f7fe fcbc 	bl	800b440 <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Alarm At(Te) :", tmp_buff);
 800cac8:	4b73      	ldr	r3, [pc, #460]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800caca:	a91a      	add	r1, sp, #104	@ 0x68
 800cacc:	185b      	adds	r3, r3, r1
 800cace:	2096      	movs	r0, #150	@ 0x96
 800cad0:	21e0      	movs	r1, #224	@ 0xe0
 800cad2:	4a7e      	ldr	r2, [pc, #504]	@ (800cccc <pdf_gen_completed_report+0xdf4>)
 800cad4:	0049      	lsls	r1, r1, #1
 800cad6:	0040      	lsls	r0, r0, #1
 800cad8:	f7fe ff56 	bl	800b988 <draw_key_value_pair.constprop.0>
 800cadc:	1824      	adds	r4, r4, r0
    time_to_dmyhms_string(&log->start_time,tmp_buff,sizeof(tmp_buff));
 800cade:	0030      	movs	r0, r6
 800cae0:	4b6d      	ldr	r3, [pc, #436]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cae2:	a91a      	add	r1, sp, #104	@ 0x68
 800cae4:	185b      	adds	r3, r3, r1
 800cae6:	0019      	movs	r1, r3
 800cae8:	2240      	movs	r2, #64	@ 0x40
 800caea:	3018      	adds	r0, #24
 800caec:	f7fe fca8 	bl	800b440 <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Start Time :", tmp_buff);
 800caf0:	4b69      	ldr	r3, [pc, #420]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800caf2:	a91a      	add	r1, sp, #104	@ 0x68
 800caf4:	185b      	adds	r3, r3, r1
 800caf6:	2096      	movs	r0, #150	@ 0x96
 800caf8:	21da      	movs	r1, #218	@ 0xda
 800cafa:	4a75      	ldr	r2, [pc, #468]	@ (800ccd0 <pdf_gen_completed_report+0xdf8>)
 800cafc:	0049      	lsls	r1, r1, #1
 800cafe:	0040      	lsls	r0, r0, #1
 800cb00:	f7fe ff42 	bl	800b988 <draw_key_value_pair.constprop.0>
 800cb04:	1824      	adds	r4, r4, r0
    time_to_dmyhms_string(&log->stop_time,tmp_buff,sizeof(tmp_buff));
 800cb06:	0030      	movs	r0, r6
 800cb08:	4b63      	ldr	r3, [pc, #396]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cb0a:	a91a      	add	r1, sp, #104	@ 0x68
 800cb0c:	185b      	adds	r3, r3, r1
 800cb0e:	0019      	movs	r1, r3
 800cb10:	2240      	movs	r2, #64	@ 0x40
 800cb12:	301e      	adds	r0, #30
 800cb14:	f7fe fc94 	bl	800b440 <time_to_dmyhms_string>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Stop Time :", tmp_buff);
 800cb18:	4b5f      	ldr	r3, [pc, #380]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cb1a:	a91a      	add	r1, sp, #104	@ 0x68
 800cb1c:	185b      	adds	r3, r3, r1
 800cb1e:	2096      	movs	r0, #150	@ 0x96
 800cb20:	21d4      	movs	r1, #212	@ 0xd4
 800cb22:	4a6c      	ldr	r2, [pc, #432]	@ (800ccd4 <pdf_gen_completed_report+0xdfc>)
 800cb24:	0049      	lsls	r1, r1, #1
 800cb26:	0040      	lsls	r0, r0, #1
 800cb28:	f7fe ff2e 	bl	800b988 <draw_key_value_pair.constprop.0>
    uint32_t start_sec = log->start_time.hour * 3600 +
 800cb2c:	21e1      	movs	r1, #225	@ 0xe1
                         log->start_time.minute  * 60 +
 800cb2e:	223c      	movs	r2, #60	@ 0x3c
 800cb30:	7f33      	ldrb	r3, [r6, #28]
    len += draw_key_value_pair(file_ptr, 300, current_y, "Stop Time :", tmp_buff);
 800cb32:	1824      	adds	r4, r4, r0
    uint32_t start_sec = log->start_time.hour * 3600 +
 800cb34:	7ef0      	ldrb	r0, [r6, #27]
 800cb36:	0109      	lsls	r1, r1, #4
                         log->start_time.minute  * 60 +
 800cb38:	4353      	muls	r3, r2
    uint32_t start_sec = log->start_time.hour * 3600 +
 800cb3a:	4348      	muls	r0, r1
 800cb3c:	18c0      	adds	r0, r0, r3
                         log->start_time.second;
 800cb3e:	7f73      	ldrb	r3, [r6, #29]
                         log->start_time.minute  * 60 +
 800cb40:	18c0      	adds	r0, r0, r3
    uint32_t stop_sec  = log->stop_time.hour  * 3600 +
 800cb42:	1cb3      	adds	r3, r6, #2
 800cb44:	7fdb      	ldrb	r3, [r3, #31]
 800cb46:	434b      	muls	r3, r1
                         log->stop_time.minute   * 60 +
 800cb48:	1cf1      	adds	r1, r6, #3
 800cb4a:	7fc9      	ldrb	r1, [r1, #31]
 800cb4c:	434a      	muls	r2, r1
    uint32_t stop_sec  = log->stop_time.hour  * 3600 +
 800cb4e:	189b      	adds	r3, r3, r2
                         log->stop_time.second;
 800cb50:	1d32      	adds	r2, r6, #4
 800cb52:	7fd2      	ldrb	r2, [r2, #31]
                         log->stop_time.minute   * 60 +
 800cb54:	189b      	adds	r3, r3, r2
    if (stop_sec >= start_sec) {
 800cb56:	4298      	cmp	r0, r3
 800cb58:	d901      	bls.n	800cb5e <pdf_gen_completed_report+0xc86>
 800cb5a:	f000 ff7a 	bl	800da52 <pdf_gen_completed_report+0x1b7a>
        elapsed_sec = (86400 - start_sec) + stop_sec;
 800cb5e:	1a18      	subs	r0, r3, r0
    seconds_to_dhms_string_long(elapsed_sec, tmp_buff, sizeof(tmp_buff));
 800cb60:	4b4d      	ldr	r3, [pc, #308]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cb62:	a91a      	add	r1, sp, #104	@ 0x68
 800cb64:	185b      	adds	r3, r3, r1
 800cb66:	0019      	movs	r1, r3
 800cb68:	2240      	movs	r2, #64	@ 0x40
 800cb6a:	f7fe fc61 	bl	800b430 <seconds_to_dhms_string_long>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800cb6e:	4b4a      	ldr	r3, [pc, #296]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cb70:	a91a      	add	r1, sp, #104	@ 0x68
 800cb72:	185b      	adds	r3, r3, r1
 800cb74:	2096      	movs	r0, #150	@ 0x96
 800cb76:	21ce      	movs	r1, #206	@ 0xce
 800cb78:	4a57      	ldr	r2, [pc, #348]	@ (800ccd8 <pdf_gen_completed_report+0xe00>)
 800cb7a:	0049      	lsls	r1, r1, #1
 800cb7c:	0040      	lsls	r0, r0, #1
 800cb7e:	f7fe ff03 	bl	800b988 <draw_key_value_pair.constprop.0>
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800cb82:	4d56      	ldr	r5, [pc, #344]	@ (800ccdc <pdf_gen_completed_report+0xe04>)
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800cb84:	1823      	adds	r3, r4, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800cb86:	4844      	ldr	r0, [pc, #272]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cb88:	ac1a      	add	r4, sp, #104	@ 0x68
 800cb8a:	002a      	movs	r2, r5
 800cb8c:	2140      	movs	r1, #64	@ 0x40
    len += draw_key_value_pair(file_ptr, 300, current_y, "Elapsed Time :", tmp_buff);
 800cb8e:	9306      	str	r3, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_temp_count);
 800cb90:	1900      	adds	r0, r0, r4
 800cb92:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800cb94:	f00d f90a 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Temperature Data Points :", tmp_buff);
 800cb98:	21c8      	movs	r1, #200	@ 0xc8
 800cb9a:	2096      	movs	r0, #150	@ 0x96
 800cb9c:	4b3e      	ldr	r3, [pc, #248]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cb9e:	4a50      	ldr	r2, [pc, #320]	@ (800cce0 <pdf_gen_completed_report+0xe08>)
 800cba0:	191b      	adds	r3, r3, r4
 800cba2:	0049      	lsls	r1, r1, #1
 800cba4:	0040      	lsls	r0, r0, #1
 800cba6:	f7fe feef 	bl	800b988 <draw_key_value_pair.constprop.0>
 800cbaa:	9b06      	ldr	r3, [sp, #24]
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_radiation_count);
 800cbac:	002a      	movs	r2, r5
    len += draw_key_value_pair(file_ptr, 300, current_y, "Temperature Data Points :", tmp_buff);
 800cbae:	181c      	adds	r4, r3, r0
    snprintf(tmp_buff,sizeof(tmp_buff),"%d",log->data_points_radiation_count);
 800cbb0:	4839      	ldr	r0, [pc, #228]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cbb2:	ad1a      	add	r5, sp, #104	@ 0x68
 800cbb4:	2140      	movs	r1, #64	@ 0x40
 800cbb6:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800cbb8:	1940      	adds	r0, r0, r5
 800cbba:	f00d f8f7 	bl	8019dac <sniprintf>
    len += draw_key_value_pair(file_ptr, 300, current_y, "Radiation Data Points :", tmp_buff);
 800cbbe:	21c2      	movs	r1, #194	@ 0xc2
 800cbc0:	2096      	movs	r0, #150	@ 0x96
 800cbc2:	4b35      	ldr	r3, [pc, #212]	@ (800cc98 <pdf_gen_completed_report+0xdc0>)
 800cbc4:	4a47      	ldr	r2, [pc, #284]	@ (800cce4 <pdf_gen_completed_report+0xe0c>)
 800cbc6:	195b      	adds	r3, r3, r5
 800cbc8:	0049      	lsls	r1, r1, #1
 800cbca:	0040      	lsls	r0, r0, #1
 800cbcc:	f7fe fedc 	bl	800b988 <draw_key_value_pair.constprop.0>
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800cbd0:	2182      	movs	r1, #130	@ 0x82
    stream_len += pdf_logging_summary(&pdf_file, &current_y, summary);
 800cbd2:	9b08      	ldr	r3, [sp, #32]
    len += draw_key_value_pair(file_ptr, 300, current_y, "Radiation Data Points :", tmp_buff);
 800cbd4:	1824      	adds	r4, r4, r0
    stream_len += pdf_logging_summary(&pdf_file, &current_y, summary);
 800cbd6:	18e3      	adds	r3, r4, r3
 800cbd8:	9314      	str	r3, [sp, #80]	@ 0x50
     const uint16_t record_nums = log->data_points_temp_count;
 800cbda:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800cbdc:	6830      	ldr	r0, [r6, #0]
 800cbde:	05c9      	lsls	r1, r1, #23
     const uint16_t record_nums = log->data_points_temp_count;
 800cbe0:	9315      	str	r3, [sp, #84]	@ 0x54
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800cbe2:	f7f3 fdef 	bl	80007c4 <__aeabi_fadd>
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800cbe6:	4940      	ldr	r1, [pc, #256]	@ (800cce8 <pdf_gen_completed_report+0xe10>)
    float temp_highest_scale_up = (log->highest_temp + TEMP_SCALE_UP);
 800cbe8:	9008      	str	r0, [sp, #32]
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800cbea:	68f0      	ldr	r0, [r6, #12]
 800cbec:	f7f3 fdea 	bl	80007c4 <__aeabi_fadd>
 800cbf0:	f7f3 fce6 	bl	80005c0 <__aeabi_f2uiz>
    g_temp_axis_min = log->lowest_temp - 10.0f;
 800cbf4:	493d      	ldr	r1, [pc, #244]	@ (800ccec <pdf_gen_completed_report+0xe14>)
    unsigned int rad_highest_scale_up = (log->highest_radiation + RAD_SCALE_UP);
 800cbf6:	900a      	str	r0, [sp, #40]	@ 0x28
    g_temp_axis_min = log->lowest_temp - 10.0f;
 800cbf8:	6870      	ldr	r0, [r6, #4]
 800cbfa:	f7f4 fafd 	bl	80011f8 <__aeabi_fsub>
 800cbfe:	4b3c      	ldr	r3, [pc, #240]	@ (800ccf0 <pdf_gen_completed_report+0xe18>)
 800cc00:	1c01      	adds	r1, r0, #0
 800cc02:	6018      	str	r0, [r3, #0]
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800cc04:	9808      	ldr	r0, [sp, #32]
 800cc06:	f7f4 faf7 	bl	80011f8 <__aeabi_fsub>
 800cc0a:	21fa      	movs	r1, #250	@ 0xfa
 800cc0c:	0589      	lsls	r1, r1, #22
 800cc0e:	f7f4 f999 	bl	8000f44 <__aeabi_fmul>
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800cc12:	2106      	movs	r1, #6
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800cc14:	900c      	str	r0, [sp, #48]	@ 0x30
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800cc16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc18:	f7f3 faa6 	bl	8000168 <__udivsi3>
 800cc1c:	f7f4 fdd6 	bl	80017cc <__aeabi_ui2f>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start, 1.5, 0, 0, 0); // Bottom
 800cc20:	25ff      	movs	r5, #255	@ 0xff
 800cc22:	23a9      	movs	r3, #169	@ 0xa9
 800cc24:	22a9      	movs	r2, #169	@ 0xa9
 800cc26:	4c33      	ldr	r4, [pc, #204]	@ (800ccf4 <pdf_gen_completed_report+0xe1c>)
 800cc28:	05ad      	lsls	r5, r5, #22
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	214b      	movs	r1, #75	@ 0x4b
    float rad_label_interval = (float) ((rad_highest_scale_up - RAD_MIN) / (RAD_LABEL_NUMS-1));
 800cc2e:	900f      	str	r0, [sp, #60]	@ 0x3c
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start, 1.5, 0, 0, 0); // Bottom
 800cc30:	9501      	str	r5, [sp, #4]
 800cc32:	0020      	movs	r0, r4
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	0052      	lsls	r2, r2, #1
 800cc38:	4b2f      	ldr	r3, [pc, #188]	@ (800ccf8 <pdf_gen_completed_report+0xe20>)
 800cc3a:	9704      	str	r7, [sp, #16]
 800cc3c:	9703      	str	r7, [sp, #12]
 800cc3e:	9702      	str	r7, [sp, #8]
 800cc40:	f00b fdda 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start, CHART_X_START, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0); // Left
 800cc44:	234b      	movs	r3, #75	@ 0x4b
 800cc46:	9501      	str	r5, [sp, #4]
 800cc48:	22a9      	movs	r2, #169	@ 0xa9
 800cc4a:	2558      	movs	r5, #88	@ 0x58
 800cc4c:	0019      	movs	r1, r3
 800cc4e:	0020      	movs	r0, r4
 800cc50:	0052      	lsls	r2, r2, #1
 800cc52:	9704      	str	r7, [sp, #16]
 800cc54:	9703      	str	r7, [sp, #12]
 800cc56:	9702      	str	r7, [sp, #8]
 800cc58:	9500      	str	r5, [sp, #0]
 800cc5a:	f00b fdcd 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START + CHART_WIDTH, chart_y_start, CHART_X_START + CHART_WIDTH, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0);// Right
 800cc5e:	23ff      	movs	r3, #255	@ 0xff
 800cc60:	22a9      	movs	r2, #169	@ 0xa9
 800cc62:	059b      	lsls	r3, r3, #22
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	4b24      	ldr	r3, [pc, #144]	@ (800ccf8 <pdf_gen_completed_report+0xe20>)
 800cc68:	0020      	movs	r0, r4
 800cc6a:	0019      	movs	r1, r3
 800cc6c:	e046      	b.n	800ccfc <pdf_gen_completed_report+0xe24>
 800cc6e:	46c0      	nop			@ (mov r8, r8)
 800cc70:	000009b8 	.word	0x000009b8
 800cc74:	000009bc 	.word	0x000009bc
 800cc78:	000009c4 	.word	0x000009c4
 800cc7c:	000009cf 	.word	0x000009cf
 800cc80:	000009d4 	.word	0x000009d4
 800cc84:	000009d8 	.word	0x000009d8
 800cc88:	000009dc 	.word	0x000009dc
 800cc8c:	000009e4 	.word	0x000009e4
 800cc90:	000009e8 	.word	0x000009e8
 800cc94:	000009e7 	.word	0x000009e7
 800cc98:	000008e8 	.word	0x000008e8
 800cc9c:	00000914 	.word	0x00000914
 800cca0:	0000096c 	.word	0x0000096c
 800cca4:	00000998 	.word	0x00000998
 800cca8:	0801f58a 	.word	0x0801f58a
 800ccac:	0801f59a 	.word	0x0801f59a
 800ccb0:	0801f5a3 	.word	0x0801f5a3
 800ccb4:	0801f5b9 	.word	0x0801f5b9
 800ccb8:	0801f5ce 	.word	0x0801f5ce
 800ccbc:	0801f5e4 	.word	0x0801f5e4
 800ccc0:	0801f5ea 	.word	0x0801f5ea
 800ccc4:	0801f5f7 	.word	0x0801f5f7
 800ccc8:	0801f605 	.word	0x0801f605
 800cccc:	0801f613 	.word	0x0801f613
 800ccd0:	0801f622 	.word	0x0801f622
 800ccd4:	0801f62f 	.word	0x0801f62f
 800ccd8:	0801f63b 	.word	0x0801f63b
 800ccdc:	0801f64a 	.word	0x0801f64a
 800cce0:	0801f64d 	.word	0x0801f64d
 800cce4:	0801f667 	.word	0x0801f667
 800cce8:	42c80000 	.word	0x42c80000
 800ccec:	41200000 	.word	0x41200000
 800ccf0:	20000200 	.word	0x20000200
 800ccf4:	200030b4 	.word	0x200030b4
 800ccf8:	0000020d 	.word	0x0000020d
 800ccfc:	0052      	lsls	r2, r2, #1
 800ccfe:	9704      	str	r7, [sp, #16]
 800cd00:	9703      	str	r7, [sp, #12]
 800cd02:	9702      	str	r7, [sp, #8]
 800cd04:	9500      	str	r5, [sp, #0]
 800cd06:	f00b fd77 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_line(file_p, CHART_X_START, chart_y_start - CHART_HEIGHT, CHART_X_START + CHART_WIDTH, chart_y_start - CHART_HEIGHT, 1.5, 0, 0, 0); // Top
 800cd0a:	23ff      	movs	r3, #255	@ 0xff
 800cd0c:	059b      	lsls	r3, r3, #22
 800cd0e:	002a      	movs	r2, r5
 800cd10:	214b      	movs	r1, #75	@ 0x4b
 800cd12:	0020      	movs	r0, r4
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	9704      	str	r7, [sp, #16]
 800cd18:	4bfa      	ldr	r3, [pc, #1000]	@ (800d104 <pdf_gen_completed_report+0x122c>)
 800cd1a:	9703      	str	r7, [sp, #12]
 800cd1c:	9702      	str	r7, [sp, #8]
 800cd1e:	9500      	str	r5, [sp, #0]
 800cd20:	f00b fd6a 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, CHART_X_START - 20, chart_y_start + 15, "F1", 11, 0, 0, 0, "[C]");
 800cd24:	4af8      	ldr	r2, [pc, #992]	@ (800d108 <pdf_gen_completed_report+0x1230>)
 800cd26:	0020      	movs	r0, r4
 800cd28:	9204      	str	r2, [sp, #16]
 800cd2a:	220b      	movs	r2, #11
 800cd2c:	9200      	str	r2, [sp, #0]
 800cd2e:	2262      	movs	r2, #98	@ 0x62
 800cd30:	2137      	movs	r1, #55	@ 0x37
 800cd32:	4bf6      	ldr	r3, [pc, #984]	@ (800d10c <pdf_gen_completed_report+0x1234>)
 800cd34:	9703      	str	r7, [sp, #12]
 800cd36:	9702      	str	r7, [sp, #8]
 800cd38:	9701      	str	r7, [sp, #4]
 800cd3a:	32ff      	adds	r2, #255	@ 0xff
 800cd3c:	f00b fd26 	bl	801878c <tpdf_draw_colored_text>
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800cd40:	2400      	movs	r4, #0
        float temp = (float) (g_temp_axis_min  + i * temper_label_interval);
 800cd42:	4bf3      	ldr	r3, [pc, #972]	@ (800d110 <pdf_gen_completed_report+0x1238>)
 800cd44:	0020      	movs	r0, r4
 800cd46:	681b      	ldr	r3, [r3, #0]
        sprintf(label_buffer, "%0.1f", temp);
 800cd48:	ad1a      	add	r5, sp, #104	@ 0x68
        float temp = (float) (g_temp_axis_min  + i * temper_label_interval);
 800cd4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd4c:	f7f4 fcee 	bl	800172c <__aeabi_i2f>
 800cd50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd52:	f7f4 f8f7 	bl	8000f44 <__aeabi_fmul>
 800cd56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd58:	f7f3 fd34 	bl	80007c4 <__aeabi_fadd>
 800cd5c:	9006      	str	r0, [sp, #24]
        sprintf(label_buffer, "%0.1f", temp);
 800cd5e:	f7f6 fd1b 	bl	8003798 <__aeabi_f2d>
 800cd62:	0002      	movs	r2, r0
 800cd64:	48eb      	ldr	r0, [pc, #940]	@ (800d114 <pdf_gen_completed_report+0x123c>)
 800cd66:	000b      	movs	r3, r1
 800cd68:	1940      	adds	r0, r0, r5
 800cd6a:	49eb      	ldr	r1, [pc, #940]	@ (800d118 <pdf_gen_completed_report+0x1240>)
 800cd6c:	f00d f854 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800cd70:	4be6      	ldr	r3, [pc, #920]	@ (800d10c <pdf_gen_completed_report+0x1234>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800cd72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd74:	9806      	ldr	r0, [sp, #24]
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800cd76:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800cd78:	f7f4 fa3e 	bl	80011f8 <__aeabi_fsub>
 800cd7c:	49e7      	ldr	r1, [pc, #924]	@ (800d11c <pdf_gen_completed_report+0x1244>)
 800cd7e:	f7f4 f8e1 	bl	8000f44 <__aeabi_fmul>
 800cd82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd84:	1c05      	adds	r5, r0, #0
 800cd86:	9808      	ldr	r0, [sp, #32]
 800cd88:	f7f4 fa36 	bl	80011f8 <__aeabi_fsub>
 800cd8c:	1c01      	adds	r1, r0, #0
 800cd8e:	1c28      	adds	r0, r5, #0
 800cd90:	f7f3 ff0a 	bl	8000ba8 <__aeabi_fdiv>
 800cd94:	49e2      	ldr	r1, [pc, #904]	@ (800d120 <pdf_gen_completed_report+0x1248>)
 800cd96:	f7f3 fd15 	bl	80007c4 <__aeabi_fadd>
        int y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800cd9a:	f7f4 fca7 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800cd9e:	4bdd      	ldr	r3, [pc, #884]	@ (800d114 <pdf_gen_completed_report+0x123c>)
 800cda0:	a91a      	add	r1, sp, #104	@ 0x68
 800cda2:	185b      	adds	r3, r3, r1
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	2308      	movs	r3, #8
 800cda8:	4dde      	ldr	r5, [pc, #888]	@ (800d124 <pdf_gen_completed_report+0x124c>)
 800cdaa:	1ec2      	subs	r2, r0, #3
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	2137      	movs	r1, #55	@ 0x37
 800cdb0:	0028      	movs	r0, r5
 800cdb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdb4:	9703      	str	r7, [sp, #12]
 800cdb6:	9702      	str	r7, [sp, #8]
 800cdb8:	9701      	str	r7, [sp, #4]
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800cdba:	3401      	adds	r4, #1
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800cdbc:	f00b fce6 	bl	801878c <tpdf_draw_colored_text>
    for (int i = 0; i < TEMP_LABLE_NUMS; i++) {
 800cdc0:	2c05      	cmp	r4, #5
 800cdc2:	d1be      	bne.n	800cd42 <pdf_gen_completed_report+0xe6a>
    tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, chart_y_start + 15, "F1", 11, 0, 0, 0, "[uSv/h]");
 800cdc4:	4bd8      	ldr	r3, [pc, #864]	@ (800d128 <pdf_gen_completed_report+0x1250>)
 800cdc6:	2262      	movs	r2, #98	@ 0x62
 800cdc8:	9304      	str	r3, [sp, #16]
 800cdca:	230b      	movs	r3, #11
 800cdcc:	0028      	movs	r0, r5
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	49d6      	ldr	r1, [pc, #856]	@ (800d12c <pdf_gen_completed_report+0x1254>)
 800cdd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdd4:	9703      	str	r7, [sp, #12]
 800cdd6:	9702      	str	r7, [sp, #8]
 800cdd8:	9701      	str	r7, [sp, #4]
 800cdda:	32ff      	adds	r2, #255	@ 0xff
 800cddc:	f00b fcd6 	bl	801878c <tpdf_draw_colored_text>
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800cde0:	2400      	movs	r4, #0
        float rad = RAD_MIN + i * rad_label_interval;
 800cde2:	0020      	movs	r0, r4
 800cde4:	f7f4 fca2 	bl	800172c <__aeabi_i2f>
 800cde8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cdea:	f7f4 f8ab 	bl	8000f44 <__aeabi_fmul>
 800cdee:	2100      	movs	r1, #0
 800cdf0:	f7f3 fce8 	bl	80007c4 <__aeabi_fadd>
 800cdf4:	900c      	str	r0, [sp, #48]	@ 0x30
        unsigned int y = (unsigned int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT,chart_y_start );
 800cdf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdf8:	f7f4 fce8 	bl	80017cc <__aeabi_ui2f>
 800cdfc:	9009      	str	r0, [sp, #36]	@ 0x24
        sprintf(label_buffer, "%u", (unsigned int)rad);
 800cdfe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ce00:	f7f3 fbde 	bl	80005c0 <__aeabi_f2uiz>
 800ce04:	4dc3      	ldr	r5, [pc, #780]	@ (800d114 <pdf_gen_completed_report+0x123c>)
 800ce06:	ab1a      	add	r3, sp, #104	@ 0x68
 800ce08:	18ed      	adds	r5, r5, r3
 800ce0a:	0002      	movs	r2, r0
 800ce0c:	49c8      	ldr	r1, [pc, #800]	@ (800d130 <pdf_gen_completed_report+0x1258>)
 800ce0e:	0028      	movs	r0, r5
 800ce10:	f00d f802 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800ce14:	4bbd      	ldr	r3, [pc, #756]	@ (800d10c <pdf_gen_completed_report+0x1234>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ce16:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ce18:	49c0      	ldr	r1, [pc, #768]	@ (800d11c <pdf_gen_completed_report+0x1244>)
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800ce1a:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800ce1c:	f7f4 f892 	bl	8000f44 <__aeabi_fmul>
 800ce20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce22:	f7f3 fec1 	bl	8000ba8 <__aeabi_fdiv>
 800ce26:	49be      	ldr	r1, [pc, #760]	@ (800d120 <pdf_gen_completed_report+0x1248>)
 800ce28:	f7f3 fccc 	bl	80007c4 <__aeabi_fadd>
        unsigned int y = (unsigned int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT,chart_y_start );
 800ce2c:	f7f3 fbc8 	bl	80005c0 <__aeabi_f2uiz>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800ce30:	9504      	str	r5, [sp, #16]
 800ce32:	2508      	movs	r5, #8
 800ce34:	4bbb      	ldr	r3, [pc, #748]	@ (800d124 <pdf_gen_completed_report+0x124c>)
 800ce36:	1ec2      	subs	r2, r0, #3
 800ce38:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce3a:	49bc      	ldr	r1, [pc, #752]	@ (800d12c <pdf_gen_completed_report+0x1254>)
 800ce3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce3e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ce40:	9703      	str	r7, [sp, #12]
 800ce42:	9702      	str	r7, [sp, #8]
 800ce44:	9701      	str	r7, [sp, #4]
 800ce46:	9500      	str	r5, [sp, #0]
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800ce48:	3401      	adds	r4, #1
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3, "F1", 8, 0, 0, 0, label_buffer);
 800ce4a:	f00b fc9f 	bl	801878c <tpdf_draw_colored_text>
    for (int i = 0; i < RAD_LABEL_NUMS; i++) {
 800ce4e:	2c07      	cmp	r4, #7
 800ce50:	d1c7      	bne.n	800cde2 <pdf_gen_completed_report+0xf0a>
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800ce52:	7e70      	ldrb	r0, [r6, #25]
 800ce54:	7eb4      	ldrb	r4, [r6, #26]
 800ce56:	f7fe faff 	bl	800b458 <convert_month_to_string>
 800ce5a:	7e33      	ldrb	r3, [r6, #24]
 800ce5c:	4ab5      	ldr	r2, [pc, #724]	@ (800d134 <pdf_gen_completed_report+0x125c>)
 800ce5e:	9301      	str	r3, [sp, #4]
 800ce60:	0023      	movs	r3, r4
            stop_time->day,\
 800ce62:	0034      	movs	r4, r6
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800ce64:	2110      	movs	r1, #16
 800ce66:	9000      	str	r0, [sp, #0]
 800ce68:	a874      	add	r0, sp, #464	@ 0x1d0
 800ce6a:	9210      	str	r2, [sp, #64]	@ 0x40
 800ce6c:	f00c ff9e 	bl	8019dac <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 10, "F1", 8, 0, 0, 0, tmp_time);
 800ce70:	ab74      	add	r3, sp, #464	@ 0x1d0
 800ce72:	224e      	movs	r2, #78	@ 0x4e
 800ce74:	213c      	movs	r1, #60	@ 0x3c
 800ce76:	9304      	str	r3, [sp, #16]
 800ce78:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ce7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce7c:	9703      	str	r7, [sp, #12]
 800ce7e:	9702      	str	r7, [sp, #8]
 800ce80:	9701      	str	r7, [sp, #4]
 800ce82:	9500      	str	r5, [sp, #0]
 800ce84:	f00b fc82 	bl	801878c <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u:%02u:%02u", \
 800ce88:	7f72      	ldrb	r2, [r6, #29]
 800ce8a:	7ef3      	ldrb	r3, [r6, #27]
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	49aa      	ldr	r1, [pc, #680]	@ (800d138 <pdf_gen_completed_report+0x1260>)
 800ce90:	7f32      	ldrb	r2, [r6, #28]
 800ce92:	a874      	add	r0, sp, #464	@ 0x1d0
 800ce94:	9200      	str	r2, [sp, #0]
 800ce96:	9112      	str	r1, [sp, #72]	@ 0x48
 800ce98:	000a      	movs	r2, r1
 800ce9a:	2110      	movs	r1, #16
 800ce9c:	f00c ff86 	bl	8019dac <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800cea0:	ab74      	add	r3, sp, #464	@ 0x1d0
            stop_time->day,\
 800cea2:	341e      	adds	r4, #30
    tpdf_draw_colored_text(file_p, CHART_X_START-15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800cea4:	2246      	movs	r2, #70	@ 0x46
 800cea6:	213c      	movs	r1, #60	@ 0x3c
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ceac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceae:	9703      	str	r7, [sp, #12]
 800ceb0:	9702      	str	r7, [sp, #8]
 800ceb2:	9701      	str	r7, [sp, #4]
 800ceb4:	9500      	str	r5, [sp, #0]
 800ceb6:	f00b fc69 	bl	801878c <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u-%s-%02u", \
 800ceba:	78a3      	ldrb	r3, [r4, #2]
 800cebc:	9316      	str	r3, [sp, #88]	@ 0x58
 800cebe:	7860      	ldrb	r0, [r4, #1]
 800cec0:	f7fe faca 	bl	800b458 <convert_month_to_string>
 800cec4:	7fb3      	ldrb	r3, [r6, #30]
 800cec6:	2110      	movs	r1, #16
 800cec8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	9000      	str	r0, [sp, #0]
 800cece:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ced0:	a874      	add	r0, sp, #464	@ 0x1d0
 800ced2:	f00c ff6b 	bl	8019dac <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH -15, chart_y_start - CHART_HEIGHT - 10, "F1", 8, 0, 0, 0, tmp_time);
 800ced6:	21ff      	movs	r1, #255	@ 0xff
 800ced8:	ab74      	add	r3, sp, #464	@ 0x1d0
 800ceda:	224e      	movs	r2, #78	@ 0x4e
 800cedc:	9304      	str	r3, [sp, #16]
 800cede:	0049      	lsls	r1, r1, #1
 800cee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cee2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cee4:	9703      	str	r7, [sp, #12]
 800cee6:	9702      	str	r7, [sp, #8]
 800cee8:	9701      	str	r7, [sp, #4]
 800ceea:	9500      	str	r5, [sp, #0]
 800ceec:	f00b fc4e 	bl	801878c <tpdf_draw_colored_text>
    snprintf(tmp_time,sizeof(tmp_time),"%02u:%02u:%02u", \
 800cef0:	7962      	ldrb	r2, [r4, #5]
 800cef2:	78e3      	ldrb	r3, [r4, #3]
 800cef4:	9201      	str	r2, [sp, #4]
 800cef6:	7922      	ldrb	r2, [r4, #4]
 800cef8:	2110      	movs	r1, #16
 800cefa:	9200      	str	r2, [sp, #0]
 800cefc:	a874      	add	r0, sp, #464	@ 0x1d0
 800cefe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf00:	f00c ff54 	bl	8019dac <sniprintf>
    tpdf_draw_colored_text(file_p, CHART_X_START+ CHART_WIDTH -15, chart_y_start - CHART_HEIGHT - 18, "F1", 8, 0, 0, 0, tmp_time);
 800cf04:	21ff      	movs	r1, #255	@ 0xff
 800cf06:	ab74      	add	r3, sp, #464	@ 0x1d0
 800cf08:	2246      	movs	r2, #70	@ 0x46
 800cf0a:	9304      	str	r3, [sp, #16]
 800cf0c:	0049      	lsls	r1, r1, #1
 800cf0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf10:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cf12:	9703      	str	r7, [sp, #12]
 800cf14:	9702      	str	r7, [sp, #8]
 800cf16:	9701      	str	r7, [sp, #4]
 800cf18:	9500      	str	r5, [sp, #0]
 800cf1a:	f00b fc37 	bl	801878c <tpdf_draw_colored_text>
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800cf1e:	4b7c      	ldr	r3, [pc, #496]	@ (800d110 <pdf_gen_completed_report+0x1238>)
 800cf20:	9808      	ldr	r0, [sp, #32]
 800cf22:	6819      	ldr	r1, [r3, #0]
 800cf24:	f7f4 f968 	bl	80011f8 <__aeabi_fsub>
 800cf28:	21fa      	movs	r1, #250	@ 0xfa
 800cf2a:	0589      	lsls	r1, r1, #22
 800cf2c:	f7f4 f80a 	bl	8000f44 <__aeabi_fmul>
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800cf30:	2401      	movs	r4, #1
    float temper_label_interval = (float)((temp_highest_scale_up - g_temp_axis_min ) / (TEMP_LABLE_NUMS-1));
 800cf32:	900b      	str	r0, [sp, #44]	@ 0x2c
        float temp = (float)(g_temp_axis_min  + i * temper_label_interval);
 800cf34:	4b76      	ldr	r3, [pc, #472]	@ (800d110 <pdf_gen_completed_report+0x1238>)
 800cf36:	0020      	movs	r0, r4
 800cf38:	681e      	ldr	r6, [r3, #0]
 800cf3a:	f7f4 fbf7 	bl	800172c <__aeabi_i2f>
 800cf3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf40:	f7f4 f800 	bl	8000f44 <__aeabi_fmul>
 800cf44:	1c31      	adds	r1, r6, #0
 800cf46:	f7f3 fc3d 	bl	80007c4 <__aeabi_fadd>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800cf4a:	1c31      	adds	r1, r6, #0
 800cf4c:	f7f4 f954 	bl	80011f8 <__aeabi_fsub>
 800cf50:	4972      	ldr	r1, [pc, #456]	@ (800d11c <pdf_gen_completed_report+0x1244>)
 800cf52:	f7f3 fff7 	bl	8000f44 <__aeabi_fmul>
 800cf56:	1c31      	adds	r1, r6, #0
 800cf58:	1c05      	adds	r5, r0, #0
 800cf5a:	9808      	ldr	r0, [sp, #32]
 800cf5c:	f7f4 f94c 	bl	80011f8 <__aeabi_fsub>
 800cf60:	1c01      	adds	r1, r0, #0
 800cf62:	1c28      	adds	r0, r5, #0
 800cf64:	f7f3 fe20 	bl	8000ba8 <__aeabi_fdiv>
 800cf68:	496d      	ldr	r1, [pc, #436]	@ (800d120 <pdf_gen_completed_report+0x1248>)
 800cf6a:	f7f3 fc2b 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up,chart_y_start - CHART_HEIGHT, chart_y_start);
 800cf6e:	f7f4 fbbd 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800cf72:	2304      	movs	r3, #4
 800cf74:	9305      	str	r3, [sp, #20]
 800cf76:	23fc      	movs	r3, #252	@ 0xfc
 800cf78:	4e70      	ldr	r6, [pc, #448]	@ (800d13c <pdf_gen_completed_report+0x1264>)
 800cf7a:	4d6a      	ldr	r5, [pc, #424]	@ (800d124 <pdf_gen_completed_report+0x124c>)
 800cf7c:	059b      	lsls	r3, r3, #22
        y = (int)map_value(temp, g_temp_axis_min , temp_highest_scale_up,chart_y_start - CHART_HEIGHT, chart_y_start);
 800cf7e:	0002      	movs	r2, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	9000      	str	r0, [sp, #0]
 800cf84:	214b      	movs	r1, #75	@ 0x4b
 800cf86:	0028      	movs	r0, r5
 800cf88:	4b5e      	ldr	r3, [pc, #376]	@ (800d104 <pdf_gen_completed_report+0x122c>)
 800cf8a:	9604      	str	r6, [sp, #16]
 800cf8c:	9603      	str	r6, [sp, #12]
 800cf8e:	9602      	str	r6, [sp, #8]
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800cf90:	3401      	adds	r4, #1
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800cf92:	f00b fc65 	bl	8018860 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= (TEMP_LABLE_NUMS -2); i++) {
 800cf96:	2c04      	cmp	r4, #4
 800cf98:	d1cc      	bne.n	800cf34 <pdf_gen_completed_report+0x105c>
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800cf9a:	3c03      	subs	r4, #3
        float rad = RAD_MIN + i * rad_label_interval;
 800cf9c:	0020      	movs	r0, r4
 800cf9e:	f7f4 fbc5 	bl	800172c <__aeabi_i2f>
 800cfa2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cfa4:	f7f3 ffce 	bl	8000f44 <__aeabi_fmul>
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	f7f3 fc0b 	bl	80007c4 <__aeabi_fadd>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800cfae:	495b      	ldr	r1, [pc, #364]	@ (800d11c <pdf_gen_completed_report+0x1244>)
 800cfb0:	f7f3 ffc8 	bl	8000f44 <__aeabi_fmul>
 800cfb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfb6:	f7f3 fdf7 	bl	8000ba8 <__aeabi_fdiv>
 800cfba:	4959      	ldr	r1, [pc, #356]	@ (800d120 <pdf_gen_completed_report+0x1248>)
 800cfbc:	f7f3 fc02 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800cfc0:	f7f4 fb94 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800cfc4:	2304      	movs	r3, #4
 800cfc6:	9305      	str	r3, [sp, #20]
 800cfc8:	23fc      	movs	r3, #252	@ 0xfc
 800cfca:	4d56      	ldr	r5, [pc, #344]	@ (800d124 <pdf_gen_completed_report+0x124c>)
 800cfcc:	059b      	lsls	r3, r3, #22
        y = (int)map_value(rad, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800cfce:	0002      	movs	r2, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	9000      	str	r0, [sp, #0]
 800cfd4:	214b      	movs	r1, #75	@ 0x4b
 800cfd6:	0028      	movs	r0, r5
 800cfd8:	4b4a      	ldr	r3, [pc, #296]	@ (800d104 <pdf_gen_completed_report+0x122c>)
 800cfda:	9604      	str	r6, [sp, #16]
 800cfdc:	9603      	str	r6, [sp, #12]
 800cfde:	9602      	str	r6, [sp, #8]
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800cfe0:	3401      	adds	r4, #1
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y, CHART_X_START + CHART_WIDTH, y, line_size, light_gray, light_gray, light_gray,4);
 800cfe2:	f00b fc3d 	bl	8018860 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= (RAD_LABEL_NUMS-2); i++) {
 800cfe6:	2c06      	cmp	r4, #6
 800cfe8:	d1d8      	bne.n	800cf9c <pdf_gen_completed_report+0x10c4>
    const int grid_size = ( CHART_HEIGHT / ((int)(rad_highest_scale_up-RAD_MIN)/rad_label_interval) );
 800cfea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cfec:	f7f4 fb9e 	bl	800172c <__aeabi_i2f>
 800cff0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cff2:	f7f3 fdd9 	bl	8000ba8 <__aeabi_fdiv>
 800cff6:	1c01      	adds	r1, r0, #0
 800cff8:	4848      	ldr	r0, [pc, #288]	@ (800d11c <pdf_gen_completed_report+0x1244>)
 800cffa:	f7f3 fdd5 	bl	8000ba8 <__aeabi_fdiv>
 800cffe:	f7f4 fb75 	bl	80016ec <__aeabi_f2iz>
 800d002:	0004      	movs	r4, r0
    const int num_grid_col_lines = (int)(CHART_WIDTH / grid_size);
 800d004:	0001      	movs	r1, r0
 800d006:	20e1      	movs	r0, #225	@ 0xe1
 800d008:	0040      	lsls	r0, r0, #1
 800d00a:	f7f3 f937 	bl	800027c <__divsi3>
 800d00e:	0025      	movs	r5, r4
    for (int i = 1; i <= num_grid_col_lines; i++)
 800d010:	2301      	movs	r3, #1
    const int num_grid_col_lines = (int)(CHART_WIDTH / grid_size);
 800d012:	900c      	str	r0, [sp, #48]	@ 0x30
    for (int i = 1; i <= num_grid_col_lines; i++)
 800d014:	354b      	adds	r5, #75	@ 0x4b
 800d016:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d01a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d01c:	4293      	cmp	r3, r2
 800d01e:	db01      	blt.n	800d024 <pdf_gen_completed_report+0x114c>
 800d020:	f000 fd1b 	bl	800da5a <pdf_gen_completed_report+0x1b82>
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800d024:	9a07      	ldr	r2, [sp, #28]
 800d026:	9b07      	ldr	r3, [sp, #28]
 800d028:	32a8      	adds	r2, #168	@ 0xa8
 800d02a:	7810      	ldrb	r0, [r2, #0]
 800d02c:	33a7      	adds	r3, #167	@ 0xa7
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	0200      	lsls	r0, r0, #8
 800d032:	4318      	orrs	r0, r3
 800d034:	0400      	lsls	r0, r0, #16
 800d036:	1400      	asrs	r0, r0, #16
 800d038:	f7f4 fb78 	bl	800172c <__aeabi_i2f>
 800d03c:	4940      	ldr	r1, [pc, #256]	@ (800d140 <pdf_gen_completed_report+0x1268>)
 800d03e:	f7f3 fdb3 	bl	8000ba8 <__aeabi_fdiv>
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d042:	9a07      	ldr	r2, [sp, #28]
 800d044:	9b07      	ldr	r3, [sp, #28]
 800d046:	32a0      	adds	r2, #160	@ 0xa0
    const float th2 = dev_setting->alarm_th2 / 10.0f;
 800d048:	1c06      	adds	r6, r0, #0
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d04a:	339f      	adds	r3, #159	@ 0x9f
 800d04c:	7810      	ldrb	r0, [r2, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	0200      	lsls	r0, r0, #8
 800d052:	4318      	orrs	r0, r3
 800d054:	0400      	lsls	r0, r0, #16
 800d056:	1400      	asrs	r0, r0, #16
 800d058:	f7f4 fb68 	bl	800172c <__aeabi_i2f>
 800d05c:	4938      	ldr	r1, [pc, #224]	@ (800d140 <pdf_gen_completed_report+0x1268>)
 800d05e:	f7f3 fda3 	bl	8000ba8 <__aeabi_fdiv>
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d062:	9a07      	ldr	r2, [sp, #28]
 800d064:	9b07      	ldr	r3, [sp, #28]
 800d066:	32aa      	adds	r2, #170	@ 0xaa
    const float th1 = dev_setting->alarm_th1 / 10.0f;
 800d068:	900c      	str	r0, [sp, #48]	@ 0x30
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d06a:	7810      	ldrb	r0, [r2, #0]
 800d06c:	33a9      	adds	r3, #169	@ 0xa9
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	0200      	lsls	r0, r0, #8
 800d072:	4318      	orrs	r0, r3
 800d074:	0400      	lsls	r0, r0, #16
 800d076:	1400      	asrs	r0, r0, #16
 800d078:	f7f4 fb58 	bl	800172c <__aeabi_i2f>
 800d07c:	4930      	ldr	r1, [pc, #192]	@ (800d140 <pdf_gen_completed_report+0x1268>)
 800d07e:	f7f3 fd93 	bl	8000ba8 <__aeabi_fdiv>
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d082:	9a07      	ldr	r2, [sp, #28]
 800d084:	9b07      	ldr	r3, [sp, #28]
 800d086:	32a2      	adds	r2, #162	@ 0xa2
    const float tl2 = dev_setting->alarm_tl2 / 10.0f;
 800d088:	900f      	str	r0, [sp, #60]	@ 0x3c
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d08a:	7810      	ldrb	r0, [r2, #0]
 800d08c:	33a1      	adds	r3, #161	@ 0xa1
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	0200      	lsls	r0, r0, #8
 800d092:	4318      	orrs	r0, r3
 800d094:	0400      	lsls	r0, r0, #16
 800d096:	1400      	asrs	r0, r0, #16
 800d098:	f7f4 fb48 	bl	800172c <__aeabi_i2f>
 800d09c:	4928      	ldr	r1, [pc, #160]	@ (800d140 <pdf_gen_completed_report+0x1268>)
 800d09e:	f7f3 fd83 	bl	8000ba8 <__aeabi_fdiv>
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d0a2:	9a07      	ldr	r2, [sp, #28]
 800d0a4:	9b07      	ldr	r3, [sp, #28]
    const float tl1 = dev_setting->alarm_tl1 / 10.0f;
 800d0a6:	9010      	str	r0, [sp, #64]	@ 0x40
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d0a8:	32a4      	adds	r2, #164	@ 0xa4
 800d0aa:	7812      	ldrb	r2, [r2, #0]
 800d0ac:	33a3      	adds	r3, #163	@ 0xa3
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	0212      	lsls	r2, r2, #8
 800d0b2:	431a      	orrs	r2, r3
 800d0b4:	9b07      	ldr	r3, [sp, #28]
 800d0b6:	2164      	movs	r1, #100	@ 0x64
 800d0b8:	33a5      	adds	r3, #165	@ 0xa5
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	041b      	lsls	r3, r3, #16
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	9a07      	ldr	r2, [sp, #28]
 800d0c2:	32a6      	adds	r2, #166	@ 0xa6
 800d0c4:	7810      	ldrb	r0, [r2, #0]
 800d0c6:	0600      	lsls	r0, r0, #24
 800d0c8:	4318      	orrs	r0, r3
 800d0ca:	f7f3 f84d 	bl	8000168 <__udivsi3>
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d0ce:	9b07      	ldr	r3, [sp, #28]
    const unsigned int rh2 = (unsigned int)(dev_setting->alarm_rh2 / 100);
 800d0d0:	900b      	str	r0, [sp, #44]	@ 0x2c
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d0d2:	339b      	adds	r3, #155	@ 0x9b
 800d0d4:	781a      	ldrb	r2, [r3, #0]
 800d0d6:	9b07      	ldr	r3, [sp, #28]
 800d0d8:	2164      	movs	r1, #100	@ 0x64
 800d0da:	339c      	adds	r3, #156	@ 0x9c
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	9a07      	ldr	r2, [sp, #28]
 800d0e4:	329d      	adds	r2, #157	@ 0x9d
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	0412      	lsls	r2, r2, #16
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	9b07      	ldr	r3, [sp, #28]
 800d0ee:	339e      	adds	r3, #158	@ 0x9e
 800d0f0:	7818      	ldrb	r0, [r3, #0]
 800d0f2:	0600      	lsls	r0, r0, #24
 800d0f4:	4310      	orrs	r0, r2
 800d0f6:	f7f3 f837 	bl	8000168 <__udivsi3>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH2) && (temp_highest_scale_up > th2)) {
 800d0fa:	4b12      	ldr	r3, [pc, #72]	@ (800d144 <pdf_gen_completed_report+0x126c>)
 800d0fc:	2280      	movs	r2, #128	@ 0x80
 800d0fe:	699c      	ldr	r4, [r3, #24]
 800d100:	e022      	b.n	800d148 <pdf_gen_completed_report+0x1270>
 800d102:	46c0      	nop			@ (mov r8, r8)
 800d104:	0000020d 	.word	0x0000020d
 800d108:	0801f67f 	.word	0x0801f67f
 800d10c:	0801eeb3 	.word	0x0801eeb3
 800d110:	20000200 	.word	0x20000200
 800d114:	000008e8 	.word	0x000008e8
 800d118:	0801f683 	.word	0x0801f683
 800d11c:	437a0000 	.word	0x437a0000
 800d120:	42b00000 	.word	0x42b00000
 800d124:	200030b4 	.word	0x200030b4
 800d128:	0801f689 	.word	0x0801f689
 800d12c:	00000212 	.word	0x00000212
 800d130:	0801f691 	.word	0x0801f691
 800d134:	0801f694 	.word	0x0801f694
 800d138:	0801f41a 	.word	0x0801f41a
 800d13c:	3f333333 	.word	0x3f333333
 800d140:	41200000 	.word	0x41200000
 800d144:	20000b50 	.word	0x20000b50
 800d148:	23c0      	movs	r3, #192	@ 0xc0
 800d14a:	021b      	lsls	r3, r3, #8
    const unsigned int rh1 = (unsigned int)(dev_setting->alarm_rh1 / 100);
 800d14c:	9007      	str	r0, [sp, #28]
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH2) && (temp_highest_scale_up > th2)) {
 800d14e:	4023      	ands	r3, r4
 800d150:	0212      	lsls	r2, r2, #8
 800d152:	4293      	cmp	r3, r2
 800d154:	d101      	bne.n	800d15a <pdf_gen_completed_report+0x1282>
 800d156:	f000 fc97 	bl	800da88 <pdf_gen_completed_report+0x1bb0>
 800d15a:	9808      	ldr	r0, [sp, #32]
 800d15c:	1c31      	adds	r1, r6, #0
 800d15e:	f7f3 f9dd 	bl	800051c <__aeabi_fcmpgt>
 800d162:	2800      	cmp	r0, #0
 800d164:	d101      	bne.n	800d16a <pdf_gen_completed_report+0x1292>
 800d166:	f000 fc8f 	bl	800da88 <pdf_gen_completed_report+0x1bb0>
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d16a:	4bf6      	ldr	r3, [pc, #984]	@ (800d544 <pdf_gen_completed_report+0x166c>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d16c:	1c30      	adds	r0, r6, #0
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d16e:	681d      	ldr	r5, [r3, #0]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d170:	1c29      	adds	r1, r5, #0
 800d172:	f7f4 f841 	bl	80011f8 <__aeabi_fsub>
 800d176:	49f4      	ldr	r1, [pc, #976]	@ (800d548 <pdf_gen_completed_report+0x1670>)
 800d178:	f7f3 fee4 	bl	8000f44 <__aeabi_fmul>
 800d17c:	1c29      	adds	r1, r5, #0
 800d17e:	1c04      	adds	r4, r0, #0
 800d180:	9808      	ldr	r0, [sp, #32]
 800d182:	f7f4 f839 	bl	80011f8 <__aeabi_fsub>
 800d186:	1c01      	adds	r1, r0, #0
 800d188:	1c20      	adds	r0, r4, #0
 800d18a:	f7f3 fd0d 	bl	8000ba8 <__aeabi_fdiv>
 800d18e:	49ef      	ldr	r1, [pc, #956]	@ (800d54c <pdf_gen_completed_report+0x1674>)
 800d190:	f7f3 fb18 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d194:	f7f4 faaa 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d198:	2304      	movs	r3, #4
        y = (int)map_value(th2, g_temp_axis_min, temp_highest_scale_up,
 800d19a:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d19c:	20ff      	movs	r0, #255	@ 0xff
 800d19e:	4dec      	ldr	r5, [pc, #944]	@ (800d550 <pdf_gen_completed_report+0x1678>)
 800d1a0:	4aec      	ldr	r2, [pc, #944]	@ (800d554 <pdf_gen_completed_report+0x167c>)
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	4bec      	ldr	r3, [pc, #944]	@ (800d558 <pdf_gen_completed_report+0x1680>)
 800d1a6:	0580      	lsls	r0, r0, #22
 800d1a8:	214b      	movs	r1, #75	@ 0x4b
 800d1aa:	9303      	str	r3, [sp, #12]
 800d1ac:	9202      	str	r2, [sp, #8]
 800d1ae:	4beb      	ldr	r3, [pc, #940]	@ (800d55c <pdf_gen_completed_report+0x1684>)
 800d1b0:	0022      	movs	r2, r4
 800d1b2:	9001      	str	r0, [sp, #4]
 800d1b4:	9704      	str	r7, [sp, #16]
 800d1b6:	0028      	movs	r0, r5
 800d1b8:	9400      	str	r4, [sp, #0]
 800d1ba:	f00b fb51 	bl	8018860 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", th2);
 800d1be:	1c30      	adds	r0, r6, #0
 800d1c0:	f7f6 faea 	bl	8003798 <__aeabi_f2d>
 800d1c4:	4ee6      	ldr	r6, [pc, #920]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d1c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d1c8:	9012      	str	r0, [sp, #72]	@ 0x48
 800d1ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1cc:	18f6      	adds	r6, r6, r3
 800d1ce:	49e5      	ldr	r1, [pc, #916]	@ (800d564 <pdf_gen_completed_report+0x168c>)
 800d1d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d1d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1d4:	0030      	movs	r0, r6
 800d1d6:	f00c fe1f 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d1da:	49df      	ldr	r1, [pc, #892]	@ (800d558 <pdf_gen_completed_report+0x1680>)
 800d1dc:	4be2      	ldr	r3, [pc, #904]	@ (800d568 <pdf_gen_completed_report+0x1690>)
 800d1de:	9102      	str	r1, [sp, #8]
 800d1e0:	49dc      	ldr	r1, [pc, #880]	@ (800d554 <pdf_gen_completed_report+0x167c>)
 800d1e2:	1ee2      	subs	r2, r4, #3
 800d1e4:	9101      	str	r1, [sp, #4]
 800d1e6:	2108      	movs	r1, #8
 800d1e8:	0028      	movs	r0, r5
 800d1ea:	9100      	str	r1, [sp, #0]
 800d1ec:	9604      	str	r6, [sp, #16]
 800d1ee:	312f      	adds	r1, #47	@ 0x2f
 800d1f0:	9703      	str	r7, [sp, #12]
 800d1f2:	f00b facb 	bl	801878c <tpdf_draw_colored_text>
        printf("[PDF][Chart] TH2 draw y=%d (%.1f)\r\n", y, th2);
 800d1f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d1f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1fa:	0021      	movs	r1, r4
 800d1fc:	48db      	ldr	r0, [pc, #876]	@ (800d56c <pdf_gen_completed_report+0x1694>)
 800d1fe:	f00c fd5b 	bl	8019cb8 <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TH1) && (temp_highest_scale_up > th1)) {
 800d202:	4bdb      	ldr	r3, [pc, #876]	@ (800d570 <pdf_gen_completed_report+0x1698>)
 800d204:	2280      	movs	r2, #128	@ 0x80
 800d206:	699c      	ldr	r4, [r3, #24]
 800d208:	23c0      	movs	r3, #192	@ 0xc0
 800d20a:	019b      	lsls	r3, r3, #6
 800d20c:	4023      	ands	r3, r4
 800d20e:	0192      	lsls	r2, r2, #6
 800d210:	4293      	cmp	r3, r2
 800d212:	d101      	bne.n	800d218 <pdf_gen_completed_report+0x1340>
 800d214:	f000 fc3f 	bl	800da96 <pdf_gen_completed_report+0x1bbe>
 800d218:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d21a:	9808      	ldr	r0, [sp, #32]
 800d21c:	f7f3 f97e 	bl	800051c <__aeabi_fcmpgt>
 800d220:	2800      	cmp	r0, #0
 800d222:	d101      	bne.n	800d228 <pdf_gen_completed_report+0x1350>
 800d224:	f000 fc37 	bl	800da96 <pdf_gen_completed_report+0x1bbe>
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d228:	4bc6      	ldr	r3, [pc, #792]	@ (800d544 <pdf_gen_completed_report+0x166c>)
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d22a:	980c      	ldr	r0, [sp, #48]	@ 0x30
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d22c:	681d      	ldr	r5, [r3, #0]
        sprintf(label_buffer, "%0.1f", th1);
 800d22e:	ae1a      	add	r6, sp, #104	@ 0x68
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d230:	1c29      	adds	r1, r5, #0
 800d232:	f7f3 ffe1 	bl	80011f8 <__aeabi_fsub>
 800d236:	49c4      	ldr	r1, [pc, #784]	@ (800d548 <pdf_gen_completed_report+0x1670>)
 800d238:	f7f3 fe84 	bl	8000f44 <__aeabi_fmul>
 800d23c:	1c29      	adds	r1, r5, #0
 800d23e:	1c04      	adds	r4, r0, #0
 800d240:	9808      	ldr	r0, [sp, #32]
 800d242:	f7f3 ffd9 	bl	80011f8 <__aeabi_fsub>
 800d246:	1c01      	adds	r1, r0, #0
 800d248:	1c20      	adds	r0, r4, #0
 800d24a:	f7f3 fcad 	bl	8000ba8 <__aeabi_fdiv>
 800d24e:	49bf      	ldr	r1, [pc, #764]	@ (800d54c <pdf_gen_completed_report+0x1674>)
 800d250:	f7f3 fab8 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d254:	f7f4 fa4a 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d258:	2304      	movs	r3, #4
 800d25a:	9305      	str	r3, [sp, #20]
 800d25c:	23fc      	movs	r3, #252	@ 0xfc
 800d25e:	059b      	lsls	r3, r3, #22
        y = (int)map_value(th1, g_temp_axis_min, temp_highest_scale_up,
 800d260:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	22fe      	movs	r2, #254	@ 0xfe
 800d266:	23fd      	movs	r3, #253	@ 0xfd
 800d268:	20ff      	movs	r0, #255	@ 0xff
 800d26a:	4db9      	ldr	r5, [pc, #740]	@ (800d550 <pdf_gen_completed_report+0x1678>)
 800d26c:	059b      	lsls	r3, r3, #22
 800d26e:	0592      	lsls	r2, r2, #22
 800d270:	0580      	lsls	r0, r0, #22
 800d272:	214b      	movs	r1, #75	@ 0x4b
 800d274:	9303      	str	r3, [sp, #12]
 800d276:	9202      	str	r2, [sp, #8]
 800d278:	4bb8      	ldr	r3, [pc, #736]	@ (800d55c <pdf_gen_completed_report+0x1684>)
 800d27a:	0022      	movs	r2, r4
 800d27c:	9001      	str	r0, [sp, #4]
 800d27e:	9400      	str	r4, [sp, #0]
 800d280:	0028      	movs	r0, r5
 800d282:	f00b faed 	bl	8018860 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", th1);
 800d286:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d288:	f7f6 fa86 	bl	8003798 <__aeabi_f2d>
 800d28c:	900c      	str	r0, [sp, #48]	@ 0x30
 800d28e:	910d      	str	r1, [sp, #52]	@ 0x34
 800d290:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d294:	48b2      	ldr	r0, [pc, #712]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d296:	49b3      	ldr	r1, [pc, #716]	@ (800d564 <pdf_gen_completed_report+0x168c>)
 800d298:	1980      	adds	r0, r0, r6
 800d29a:	f00c fdbd 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d29e:	21fc      	movs	r1, #252	@ 0xfc
 800d2a0:	0589      	lsls	r1, r1, #22
 800d2a2:	9103      	str	r1, [sp, #12]
 800d2a4:	21fd      	movs	r1, #253	@ 0xfd
 800d2a6:	0589      	lsls	r1, r1, #22
 800d2a8:	9102      	str	r1, [sp, #8]
 800d2aa:	21fe      	movs	r1, #254	@ 0xfe
 800d2ac:	0589      	lsls	r1, r1, #22
 800d2ae:	9101      	str	r1, [sp, #4]
 800d2b0:	2108      	movs	r1, #8
 800d2b2:	48ab      	ldr	r0, [pc, #684]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d2b4:	4bac      	ldr	r3, [pc, #688]	@ (800d568 <pdf_gen_completed_report+0x1690>)
 800d2b6:	1980      	adds	r0, r0, r6
 800d2b8:	1ee2      	subs	r2, r4, #3
 800d2ba:	9004      	str	r0, [sp, #16]
 800d2bc:	9100      	str	r1, [sp, #0]
 800d2be:	0028      	movs	r0, r5
 800d2c0:	312f      	adds	r1, #47	@ 0x2f
 800d2c2:	f00b fa63 	bl	801878c <tpdf_draw_colored_text>
        printf("[PDF][Chart] TH1 draw y=%d (%.1f)\r\n", y, th1);
 800d2c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2ca:	0021      	movs	r1, r4
 800d2cc:	48a9      	ldr	r0, [pc, #676]	@ (800d574 <pdf_gen_completed_report+0x169c>)
 800d2ce:	f00c fcf3 	bl	8019cb8 <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TL2) && (g_temp_axis_min < tl2)) {
 800d2d2:	4ba7      	ldr	r3, [pc, #668]	@ (800d570 <pdf_gen_completed_report+0x1698>)
 800d2d4:	2280      	movs	r2, #128	@ 0x80
 800d2d6:	699c      	ldr	r4, [r3, #24]
 800d2d8:	23c0      	movs	r3, #192	@ 0xc0
 800d2da:	031b      	lsls	r3, r3, #12
 800d2dc:	4023      	ands	r3, r4
 800d2de:	0312      	lsls	r2, r2, #12
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d100      	bne.n	800d2e6 <pdf_gen_completed_report+0x140e>
 800d2e4:	e3dd      	b.n	800daa2 <pdf_gen_completed_report+0x1bca>
 800d2e6:	4b97      	ldr	r3, [pc, #604]	@ (800d544 <pdf_gen_completed_report+0x166c>)
 800d2e8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d2ea:	681d      	ldr	r5, [r3, #0]
 800d2ec:	1c29      	adds	r1, r5, #0
 800d2ee:	f7f3 f915 	bl	800051c <__aeabi_fcmpgt>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d100      	bne.n	800d2f8 <pdf_gen_completed_report+0x1420>
 800d2f6:	e3d4      	b.n	800daa2 <pdf_gen_completed_report+0x1bca>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d2f8:	1c29      	adds	r1, r5, #0
 800d2fa:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d2fc:	f7f3 ff7c 	bl	80011f8 <__aeabi_fsub>
 800d300:	4991      	ldr	r1, [pc, #580]	@ (800d548 <pdf_gen_completed_report+0x1670>)
 800d302:	f7f3 fe1f 	bl	8000f44 <__aeabi_fmul>
 800d306:	1c29      	adds	r1, r5, #0
 800d308:	1c04      	adds	r4, r0, #0
 800d30a:	9808      	ldr	r0, [sp, #32]
 800d30c:	f7f3 ff74 	bl	80011f8 <__aeabi_fsub>
 800d310:	1c01      	adds	r1, r0, #0
 800d312:	1c20      	adds	r0, r4, #0
 800d314:	f7f3 fc48 	bl	8000ba8 <__aeabi_fdiv>
 800d318:	498c      	ldr	r1, [pc, #560]	@ (800d54c <pdf_gen_completed_report+0x1674>)
 800d31a:	f7f3 fa53 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(tl2, g_temp_axis_min, temp_highest_scale_up,
 800d31e:	f7f4 f9e5 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d322:	2304      	movs	r3, #4
 800d324:	22ff      	movs	r2, #255	@ 0xff
 800d326:	4d8a      	ldr	r5, [pc, #552]	@ (800d550 <pdf_gen_completed_report+0x1678>)
 800d328:	4e93      	ldr	r6, [pc, #588]	@ (800d578 <pdf_gen_completed_report+0x16a0>)
 800d32a:	9305      	str	r3, [sp, #20]
 800d32c:	4b89      	ldr	r3, [pc, #548]	@ (800d554 <pdf_gen_completed_report+0x167c>)
 800d32e:	0592      	lsls	r2, r2, #22
        y = (int)map_value(tl2, g_temp_axis_min, temp_highest_scale_up,
 800d330:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d332:	214b      	movs	r1, #75	@ 0x4b
 800d334:	9303      	str	r3, [sp, #12]
 800d336:	9201      	str	r2, [sp, #4]
 800d338:	4b88      	ldr	r3, [pc, #544]	@ (800d55c <pdf_gen_completed_report+0x1684>)
 800d33a:	0002      	movs	r2, r0
 800d33c:	9000      	str	r0, [sp, #0]
 800d33e:	9604      	str	r6, [sp, #16]
 800d340:	0028      	movs	r0, r5
 800d342:	9602      	str	r6, [sp, #8]
 800d344:	9506      	str	r5, [sp, #24]
 800d346:	f00b fa8b 	bl	8018860 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", tl2);
 800d34a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d34c:	f7f6 fa24 	bl	8003798 <__aeabi_f2d>
 800d350:	900c      	str	r0, [sp, #48]	@ 0x30
 800d352:	910d      	str	r1, [sp, #52]	@ 0x34
 800d354:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d358:	4881      	ldr	r0, [pc, #516]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d35a:	ad1a      	add	r5, sp, #104	@ 0x68
 800d35c:	4981      	ldr	r1, [pc, #516]	@ (800d564 <pdf_gen_completed_report+0x168c>)
 800d35e:	1940      	adds	r0, r0, r5
 800d360:	f00c fd5a 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d364:	497b      	ldr	r1, [pc, #492]	@ (800d554 <pdf_gen_completed_report+0x167c>)
 800d366:	487e      	ldr	r0, [pc, #504]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d368:	9102      	str	r1, [sp, #8]
 800d36a:	2108      	movs	r1, #8
 800d36c:	1940      	adds	r0, r0, r5
 800d36e:	4b7e      	ldr	r3, [pc, #504]	@ (800d568 <pdf_gen_completed_report+0x1690>)
 800d370:	1ee2      	subs	r2, r4, #3
 800d372:	9004      	str	r0, [sp, #16]
 800d374:	9100      	str	r1, [sp, #0]
 800d376:	9806      	ldr	r0, [sp, #24]
 800d378:	312f      	adds	r1, #47	@ 0x2f
 800d37a:	9603      	str	r6, [sp, #12]
 800d37c:	9601      	str	r6, [sp, #4]
 800d37e:	f00b fa05 	bl	801878c <tpdf_draw_colored_text>
        printf("[PDF][Chart] TL2 draw y=%d (%.1f)\r\n", y, tl2);
 800d382:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d386:	0021      	movs	r1, r4
 800d388:	487c      	ldr	r0, [pc, #496]	@ (800d57c <pdf_gen_completed_report+0x16a4>)
 800d38a:	f00c fc95 	bl	8019cb8 <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_TL1) && (g_temp_axis_min < tl1)) {
 800d38e:	4b78      	ldr	r3, [pc, #480]	@ (800d570 <pdf_gen_completed_report+0x1698>)
 800d390:	2280      	movs	r2, #128	@ 0x80
 800d392:	699c      	ldr	r4, [r3, #24]
 800d394:	23c0      	movs	r3, #192	@ 0xc0
 800d396:	029b      	lsls	r3, r3, #10
 800d398:	4023      	ands	r3, r4
 800d39a:	0292      	lsls	r2, r2, #10
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d100      	bne.n	800d3a2 <pdf_gen_completed_report+0x14ca>
 800d3a0:	e385      	b.n	800daae <pdf_gen_completed_report+0x1bd6>
 800d3a2:	4b68      	ldr	r3, [pc, #416]	@ (800d544 <pdf_gen_completed_report+0x166c>)
 800d3a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d3a6:	681d      	ldr	r5, [r3, #0]
 800d3a8:	1c29      	adds	r1, r5, #0
 800d3aa:	f7f3 f8b7 	bl	800051c <__aeabi_fcmpgt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d100      	bne.n	800d3b4 <pdf_gen_completed_report+0x14dc>
 800d3b2:	e37c      	b.n	800daae <pdf_gen_completed_report+0x1bd6>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d3b4:	1c29      	adds	r1, r5, #0
 800d3b6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d3b8:	f7f3 ff1e 	bl	80011f8 <__aeabi_fsub>
 800d3bc:	4962      	ldr	r1, [pc, #392]	@ (800d548 <pdf_gen_completed_report+0x1670>)
 800d3be:	f7f3 fdc1 	bl	8000f44 <__aeabi_fmul>
 800d3c2:	1c29      	adds	r1, r5, #0
 800d3c4:	1c04      	adds	r4, r0, #0
 800d3c6:	9808      	ldr	r0, [sp, #32]
 800d3c8:	f7f3 ff16 	bl	80011f8 <__aeabi_fsub>
 800d3cc:	1c01      	adds	r1, r0, #0
 800d3ce:	1c20      	adds	r0, r4, #0
 800d3d0:	f7f3 fbea 	bl	8000ba8 <__aeabi_fdiv>
 800d3d4:	495d      	ldr	r1, [pc, #372]	@ (800d54c <pdf_gen_completed_report+0x1674>)
 800d3d6:	f7f3 f9f5 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value(tl1, g_temp_axis_min, temp_highest_scale_up,
 800d3da:	f7f4 f987 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d3de:	2304      	movs	r3, #4
 800d3e0:	22ff      	movs	r2, #255	@ 0xff
 800d3e2:	9305      	str	r3, [sp, #20]
 800d3e4:	23fc      	movs	r3, #252	@ 0xfc
 800d3e6:	4d5a      	ldr	r5, [pc, #360]	@ (800d550 <pdf_gen_completed_report+0x1678>)
 800d3e8:	4e65      	ldr	r6, [pc, #404]	@ (800d580 <pdf_gen_completed_report+0x16a8>)
 800d3ea:	059b      	lsls	r3, r3, #22
 800d3ec:	0592      	lsls	r2, r2, #22
        y = (int)map_value(tl1, g_temp_axis_min, temp_highest_scale_up,
 800d3ee:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d3f0:	214b      	movs	r1, #75	@ 0x4b
 800d3f2:	9303      	str	r3, [sp, #12]
 800d3f4:	9201      	str	r2, [sp, #4]
 800d3f6:	4b59      	ldr	r3, [pc, #356]	@ (800d55c <pdf_gen_completed_report+0x1684>)
 800d3f8:	0002      	movs	r2, r0
 800d3fa:	9000      	str	r0, [sp, #0]
 800d3fc:	9604      	str	r6, [sp, #16]
 800d3fe:	0028      	movs	r0, r5
 800d400:	9602      	str	r6, [sp, #8]
 800d402:	9506      	str	r5, [sp, #24]
 800d404:	f00b fa2c 	bl	8018860 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%0.1f", tl1);
 800d408:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d40a:	f7f6 f9c5 	bl	8003798 <__aeabi_f2d>
 800d40e:	900c      	str	r0, [sp, #48]	@ 0x30
 800d410:	910d      	str	r1, [sp, #52]	@ 0x34
 800d412:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d416:	4852      	ldr	r0, [pc, #328]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d418:	ad1a      	add	r5, sp, #104	@ 0x68
 800d41a:	4952      	ldr	r1, [pc, #328]	@ (800d564 <pdf_gen_completed_report+0x168c>)
 800d41c:	1940      	adds	r0, r0, r5
 800d41e:	f00c fcfb 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START - 20, y - 3,
 800d422:	21fc      	movs	r1, #252	@ 0xfc
 800d424:	0589      	lsls	r1, r1, #22
 800d426:	9102      	str	r1, [sp, #8]
 800d428:	2108      	movs	r1, #8
 800d42a:	484d      	ldr	r0, [pc, #308]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d42c:	4b4e      	ldr	r3, [pc, #312]	@ (800d568 <pdf_gen_completed_report+0x1690>)
 800d42e:	1940      	adds	r0, r0, r5
 800d430:	1ee2      	subs	r2, r4, #3
 800d432:	9004      	str	r0, [sp, #16]
 800d434:	9100      	str	r1, [sp, #0]
 800d436:	9806      	ldr	r0, [sp, #24]
 800d438:	312f      	adds	r1, #47	@ 0x2f
 800d43a:	9603      	str	r6, [sp, #12]
 800d43c:	9601      	str	r6, [sp, #4]
 800d43e:	f00b f9a5 	bl	801878c <tpdf_draw_colored_text>
        printf("[PDF][Chart] TL1 draw y=%d (%.1f)\r\n", y, tl1);
 800d442:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d444:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d446:	0021      	movs	r1, r4
 800d448:	484e      	ldr	r0, [pc, #312]	@ (800d584 <pdf_gen_completed_report+0x16ac>)
 800d44a:	f00c fc35 	bl	8019cb8 <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_RH2) && (rad_highest_scale_up > rh2)) {
 800d44e:	4b48      	ldr	r3, [pc, #288]	@ (800d570 <pdf_gen_completed_report+0x1698>)
 800d450:	2280      	movs	r2, #128	@ 0x80
 800d452:	6999      	ldr	r1, [r3, #24]
 800d454:	23c0      	movs	r3, #192	@ 0xc0
 800d456:	011b      	lsls	r3, r3, #4
 800d458:	400b      	ands	r3, r1
 800d45a:	0112      	lsls	r2, r2, #4
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d100      	bne.n	800d462 <pdf_gen_completed_report+0x158a>
 800d460:	e32b      	b.n	800daba <pdf_gen_completed_report+0x1be2>
 800d462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d464:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d466:	4293      	cmp	r3, r2
 800d468:	d800      	bhi.n	800d46c <pdf_gen_completed_report+0x1594>
 800d46a:	e326      	b.n	800daba <pdf_gen_completed_report+0x1be2>
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d46c:	0010      	movs	r0, r2
 800d46e:	f7f4 f9ad 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d472:	4935      	ldr	r1, [pc, #212]	@ (800d548 <pdf_gen_completed_report+0x1670>)
 800d474:	f7f3 fd66 	bl	8000f44 <__aeabi_fmul>
 800d478:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d47a:	f7f3 fb95 	bl	8000ba8 <__aeabi_fdiv>
 800d47e:	4933      	ldr	r1, [pc, #204]	@ (800d54c <pdf_gen_completed_report+0x1674>)
 800d480:	f7f3 f9a0 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d484:	f7f4 f932 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d488:	2304      	movs	r3, #4
 800d48a:	26fd      	movs	r6, #253	@ 0xfd
 800d48c:	9305      	str	r3, [sp, #20]
 800d48e:	22ff      	movs	r2, #255	@ 0xff
 800d490:	23fe      	movs	r3, #254	@ 0xfe
 800d492:	4d2f      	ldr	r5, [pc, #188]	@ (800d550 <pdf_gen_completed_report+0x1678>)
 800d494:	059b      	lsls	r3, r3, #22
 800d496:	05b6      	lsls	r6, r6, #22
 800d498:	0592      	lsls	r2, r2, #22
        y = (int)map_value((float)rh2, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d49a:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d49c:	214b      	movs	r1, #75	@ 0x4b
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	9201      	str	r2, [sp, #4]
 800d4a2:	4b2e      	ldr	r3, [pc, #184]	@ (800d55c <pdf_gen_completed_report+0x1684>)
 800d4a4:	0002      	movs	r2, r0
 800d4a6:	9000      	str	r0, [sp, #0]
 800d4a8:	9603      	str	r6, [sp, #12]
 800d4aa:	0028      	movs	r0, r5
 800d4ac:	9702      	str	r7, [sp, #8]
 800d4ae:	f00b f9d7 	bl	8018860 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%u", rh2);
 800d4b2:	482b      	ldr	r0, [pc, #172]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d4b4:	ab1a      	add	r3, sp, #104	@ 0x68
 800d4b6:	4934      	ldr	r1, [pc, #208]	@ (800d588 <pdf_gen_completed_report+0x16b0>)
 800d4b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4ba:	18c0      	adds	r0, r0, r3
 800d4bc:	f00c fcac 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3,
 800d4c0:	4827      	ldr	r0, [pc, #156]	@ (800d560 <pdf_gen_completed_report+0x1688>)
 800d4c2:	a91a      	add	r1, sp, #104	@ 0x68
 800d4c4:	1840      	adds	r0, r0, r1
 800d4c6:	21fe      	movs	r1, #254	@ 0xfe
 800d4c8:	0589      	lsls	r1, r1, #22
 800d4ca:	9103      	str	r1, [sp, #12]
 800d4cc:	2108      	movs	r1, #8
 800d4ce:	1ee2      	subs	r2, r4, #3
 800d4d0:	9004      	str	r0, [sp, #16]
 800d4d2:	9100      	str	r1, [sp, #0]
 800d4d4:	0028      	movs	r0, r5
 800d4d6:	492d      	ldr	r1, [pc, #180]	@ (800d58c <pdf_gen_completed_report+0x16b4>)
 800d4d8:	4b23      	ldr	r3, [pc, #140]	@ (800d568 <pdf_gen_completed_report+0x1690>)
 800d4da:	9602      	str	r6, [sp, #8]
 800d4dc:	9701      	str	r7, [sp, #4]
 800d4de:	f00b f955 	bl	801878c <tpdf_draw_colored_text>
        printf("[PDF][Chart] RH2 draw y=%d (%u)\r\n", y, rh2);
 800d4e2:	0021      	movs	r1, r4
 800d4e4:	482a      	ldr	r0, [pc, #168]	@ (800d590 <pdf_gen_completed_report+0x16b8>)
 800d4e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4e8:	f00c fbe6 	bl	8019cb8 <iprintf>
    if (ALARM_SHOULD_DRAW(ALARM_STATE_POS_RH1) && (rad_highest_scale_up > rh1)) {
 800d4ec:	4b20      	ldr	r3, [pc, #128]	@ (800d570 <pdf_gen_completed_report+0x1698>)
 800d4ee:	2280      	movs	r2, #128	@ 0x80
 800d4f0:	6999      	ldr	r1, [r3, #24]
 800d4f2:	23c0      	movs	r3, #192	@ 0xc0
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	400b      	ands	r3, r1
 800d4f8:	0092      	lsls	r2, r2, #2
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d100      	bne.n	800d500 <pdf_gen_completed_report+0x1628>
 800d4fe:	e2e2      	b.n	800dac6 <pdf_gen_completed_report+0x1bee>
 800d500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d502:	9a07      	ldr	r2, [sp, #28]
 800d504:	4293      	cmp	r3, r2
 800d506:	d800      	bhi.n	800d50a <pdf_gen_completed_report+0x1632>
 800d508:	e2dd      	b.n	800dac6 <pdf_gen_completed_report+0x1bee>
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d50a:	0010      	movs	r0, r2
 800d50c:	f7f4 f95e 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800d510:	490d      	ldr	r1, [pc, #52]	@ (800d548 <pdf_gen_completed_report+0x1670>)
 800d512:	f7f3 fd17 	bl	8000f44 <__aeabi_fmul>
 800d516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d518:	f7f3 fb46 	bl	8000ba8 <__aeabi_fdiv>
 800d51c:	490b      	ldr	r1, [pc, #44]	@ (800d54c <pdf_gen_completed_report+0x1674>)
 800d51e:	f7f3 f951 	bl	80007c4 <__aeabi_fadd>
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d522:	f7f4 f8e3 	bl	80016ec <__aeabi_f2iz>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d526:	2304      	movs	r3, #4
 800d528:	22fc      	movs	r2, #252	@ 0xfc
 800d52a:	9305      	str	r3, [sp, #20]
 800d52c:	23fe      	movs	r3, #254	@ 0xfe
 800d52e:	4d08      	ldr	r5, [pc, #32]	@ (800d550 <pdf_gen_completed_report+0x1678>)
 800d530:	4e18      	ldr	r6, [pc, #96]	@ (800d594 <pdf_gen_completed_report+0x16bc>)
 800d532:	059b      	lsls	r3, r3, #22
 800d534:	0592      	lsls	r2, r2, #22
        y = (int)map_value((float)rh1, (float)RAD_MIN, (float)rad_highest_scale_up,
 800d536:	0004      	movs	r4, r0
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START, y,
 800d538:	214b      	movs	r1, #75	@ 0x4b
 800d53a:	9304      	str	r3, [sp, #16]
 800d53c:	9202      	str	r2, [sp, #8]
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	0002      	movs	r2, r0
 800d542:	e029      	b.n	800d598 <pdf_gen_completed_report+0x16c0>
 800d544:	20000200 	.word	0x20000200
 800d548:	437a0000 	.word	0x437a0000
 800d54c:	42b00000 	.word	0x42b00000
 800d550:	200030b4 	.word	0x200030b4
 800d554:	3f666666 	.word	0x3f666666
 800d558:	3ecccccd 	.word	0x3ecccccd
 800d55c:	0000020d 	.word	0x0000020d
 800d560:	000008e8 	.word	0x000008e8
 800d564:	0801f683 	.word	0x0801f683
 800d568:	0801ef33 	.word	0x0801ef33
 800d56c:	0801f6a1 	.word	0x0801f6a1
 800d570:	20000b50 	.word	0x20000b50
 800d574:	0801f6e8 	.word	0x0801f6e8
 800d578:	3f19999a 	.word	0x3f19999a
 800d57c:	0801f72f 	.word	0x0801f72f
 800d580:	3dcccccd 	.word	0x3dcccccd
 800d584:	0801f776 	.word	0x0801f776
 800d588:	0801f691 	.word	0x0801f691
 800d58c:	00000212 	.word	0x00000212
 800d590:	0801f7bd 	.word	0x0801f7bd
 800d594:	3f4ccccd 	.word	0x3f4ccccd
 800d598:	4bfa      	ldr	r3, [pc, #1000]	@ (800d984 <pdf_gen_completed_report+0x1aac>)
 800d59a:	9000      	str	r0, [sp, #0]
 800d59c:	9603      	str	r6, [sp, #12]
 800d59e:	0028      	movs	r0, r5
 800d5a0:	f00b f95e 	bl	8018860 <tpdf_draw_simple_dashed_line>
        sprintf(label_buffer, "%u", rh1);
 800d5a4:	48f8      	ldr	r0, [pc, #992]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d5a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d5a8:	49f8      	ldr	r1, [pc, #992]	@ (800d98c <pdf_gen_completed_report+0x1ab4>)
 800d5aa:	9a07      	ldr	r2, [sp, #28]
 800d5ac:	18c0      	adds	r0, r0, r3
 800d5ae:	f00c fc33 	bl	8019e18 <siprintf>
        tpdf_draw_colored_text(file_p, CHART_X_START + CHART_WIDTH + 5, y - 3,
 800d5b2:	48f5      	ldr	r0, [pc, #980]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d5b4:	a91a      	add	r1, sp, #104	@ 0x68
 800d5b6:	1840      	adds	r0, r0, r1
 800d5b8:	21fe      	movs	r1, #254	@ 0xfe
 800d5ba:	0589      	lsls	r1, r1, #22
 800d5bc:	9103      	str	r1, [sp, #12]
 800d5be:	21fc      	movs	r1, #252	@ 0xfc
 800d5c0:	0589      	lsls	r1, r1, #22
 800d5c2:	9101      	str	r1, [sp, #4]
 800d5c4:	2108      	movs	r1, #8
 800d5c6:	1ee2      	subs	r2, r4, #3
 800d5c8:	9004      	str	r0, [sp, #16]
 800d5ca:	9100      	str	r1, [sp, #0]
 800d5cc:	0028      	movs	r0, r5
 800d5ce:	49f0      	ldr	r1, [pc, #960]	@ (800d990 <pdf_gen_completed_report+0x1ab8>)
 800d5d0:	4bf0      	ldr	r3, [pc, #960]	@ (800d994 <pdf_gen_completed_report+0x1abc>)
 800d5d2:	9602      	str	r6, [sp, #8]
 800d5d4:	f00b f8da 	bl	801878c <tpdf_draw_colored_text>
        printf("[PDF][Chart] RH1 draw y=%d (%u)\r\n", y, rh1);
 800d5d8:	0021      	movs	r1, r4
 800d5da:	48ef      	ldr	r0, [pc, #956]	@ (800d998 <pdf_gen_completed_report+0x1ac0>)
 800d5dc:	9a07      	ldr	r2, [sp, #28]
 800d5de:	f00c fb6b 	bl	8019cb8 <iprintf>
    for (int i = 0; i < record_nums; i++) {
 800d5e2:	2300      	movs	r3, #0
    uint16_t chunk_start_index = 0;
 800d5e4:	001e      	movs	r6, r3
    uint16_t buffer_count =0;
 800d5e6:	001c      	movs	r4, r3
    for (int i = 0; i < record_nums; i++) {
 800d5e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5ea:	2254      	movs	r2, #84	@ 0x54
 800d5ec:	466b      	mov	r3, sp
 800d5ee:	189b      	adds	r3, r3, r2
 800d5f0:	881b      	ldrh	r3, [r3, #0]
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	9a07      	ldr	r2, [sp, #28]
 800d5f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	da00      	bge.n	800d5fe <pdf_gen_completed_report+0x1726>
 800d5fc:	e269      	b.n	800dad2 <pdf_gen_completed_report+0x1bfa>
    if (buffer_count > 0) {
 800d5fe:	2c00      	cmp	r4, #0
 800d600:	d020      	beq.n	800d644 <pdf_gen_completed_report+0x176c>
        pdf_chart_plot_data(file_p, *y_pos, tmp_temper, chunk_start_index, buffer_count, record_nums, 1.0f, 0.0f, 0.0f, g_temp_axis_min , temp_highest_scale_up);
 800d602:	25fe      	movs	r5, #254	@ 0xfe
 800d604:	20b3      	movs	r0, #179	@ 0xb3
 800d606:	9b08      	ldr	r3, [sp, #32]
 800d608:	05ad      	lsls	r5, r5, #22
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	4be3      	ldr	r3, [pc, #908]	@ (800d99c <pdf_gen_completed_report+0x1ac4>)
 800d60e:	a974      	add	r1, sp, #464	@ 0x1d0
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	0040      	lsls	r0, r0, #1
 800d614:	9303      	str	r3, [sp, #12]
 800d616:	9200      	str	r2, [sp, #0]
 800d618:	0023      	movs	r3, r4
 800d61a:	0032      	movs	r2, r6
 800d61c:	9702      	str	r7, [sp, #8]
 800d61e:	9501      	str	r5, [sp, #4]
 800d620:	f7fe f9da 	bl	800b9d8 <pdf_chart_plot_data.constprop.0>
        pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800d624:	49d8      	ldr	r1, [pc, #864]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d626:	a81a      	add	r0, sp, #104	@ 0x68
 800d628:	1809      	adds	r1, r1, r0
 800d62a:	20b3      	movs	r0, #179	@ 0xb3
 800d62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62e:	0032      	movs	r2, r6
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	9b07      	ldr	r3, [sp, #28]
 800d634:	9703      	str	r7, [sp, #12]
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	9502      	str	r5, [sp, #8]
 800d63a:	0023      	movs	r3, r4
 800d63c:	9701      	str	r7, [sp, #4]
 800d63e:	0040      	lsls	r0, r0, #1
 800d640:	f7fe f9ca 	bl	800b9d8 <pdf_chart_plot_data.constprop.0>
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800d644:	2506      	movs	r5, #6
 800d646:	22b1      	movs	r2, #177	@ 0xb1
 800d648:	2196      	movs	r1, #150	@ 0x96
    const UINT total_pages = current_page +1;
 800d64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800d64c:	4cd1      	ldr	r4, [pc, #836]	@ (800d994 <pdf_gen_completed_report+0x1abc>)
    const UINT total_pages = current_page +1;
 800d64e:	3301      	adds	r3, #1
 800d650:	9308      	str	r3, [sp, #32]
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2 ), y + 16, "F2", 6, 0, 0, 0, "Temperature");
 800d652:	4bd3      	ldr	r3, [pc, #844]	@ (800d9a0 <pdf_gen_completed_report+0x1ac8>)
 800d654:	9500      	str	r5, [sp, #0]
 800d656:	9307      	str	r3, [sp, #28]
 800d658:	4bd2      	ldr	r3, [pc, #840]	@ (800d9a4 <pdf_gen_completed_report+0x1acc>)
 800d65a:	0052      	lsls	r2, r2, #1
 800d65c:	9304      	str	r3, [sp, #16]
 800d65e:	0049      	lsls	r1, r1, #1
 800d660:	0023      	movs	r3, r4
 800d662:	9807      	ldr	r0, [sp, #28]
 800d664:	9703      	str	r7, [sp, #12]
 800d666:	9702      	str	r7, [sp, #8]
 800d668:	9701      	str	r7, [sp, #4]
 800d66a:	f00b f88f 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, (CHART_X_START + CHART_WIDTH /2 + 40),  y + 18, (CHART_X_START + CHART_WIDTH /2 + 40 + 15), y + 18, 1.0, 1.0, 0, 0);
 800d66e:	23fe      	movs	r3, #254	@ 0xfe
 800d670:	26b2      	movs	r6, #178	@ 0xb2
 800d672:	059b      	lsls	r3, r3, #22
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	21aa      	movs	r1, #170	@ 0xaa
 800d67a:	2364      	movs	r3, #100	@ 0x64
 800d67c:	0076      	lsls	r6, r6, #1
 800d67e:	0032      	movs	r2, r6
 800d680:	9600      	str	r6, [sp, #0]
 800d682:	33ff      	adds	r3, #255	@ 0xff
 800d684:	0049      	lsls	r1, r1, #1
 800d686:	9807      	ldr	r0, [sp, #28]
 800d688:	9704      	str	r7, [sp, #16]
 800d68a:	9703      	str	r7, [sp, #12]
 800d68c:	f00b f8b4 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, (CHART_X_START + CHART_WIDTH /2), y + 8, "F2", 6, 0, 0, 0, "Rad");
 800d690:	22ad      	movs	r2, #173	@ 0xad
 800d692:	2196      	movs	r1, #150	@ 0x96
 800d694:	4bc4      	ldr	r3, [pc, #784]	@ (800d9a8 <pdf_gen_completed_report+0x1ad0>)
 800d696:	9500      	str	r5, [sp, #0]
 800d698:	9304      	str	r3, [sp, #16]
 800d69a:	0052      	lsls	r2, r2, #1
 800d69c:	0023      	movs	r3, r4
 800d69e:	0049      	lsls	r1, r1, #1
 800d6a0:	9807      	ldr	r0, [sp, #28]
 800d6a2:	9703      	str	r7, [sp, #12]
 800d6a4:	9702      	str	r7, [sp, #8]
 800d6a6:	9701      	str	r7, [sp, #4]
 800d6a8:	f00b f870 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, (CHART_X_START + CHART_WIDTH /2 + 40),  y + 10, (CHART_X_START + CHART_WIDTH /2 + 40 + 15), y + 10, 1.0, 0, 0, 1.0);
 800d6ac:	23fe      	movs	r3, #254	@ 0xfe
 800d6ae:	22ae      	movs	r2, #174	@ 0xae
 800d6b0:	059b      	lsls	r3, r3, #22
 800d6b2:	9304      	str	r3, [sp, #16]
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	21aa      	movs	r1, #170	@ 0xaa
 800d6b8:	2364      	movs	r3, #100	@ 0x64
 800d6ba:	0052      	lsls	r2, r2, #1
 800d6bc:	9200      	str	r2, [sp, #0]
 800d6be:	33ff      	adds	r3, #255	@ 0xff
 800d6c0:	0049      	lsls	r1, r1, #1
 800d6c2:	9807      	ldr	r0, [sp, #28]
 800d6c4:	9703      	str	r7, [sp, #12]
 800d6c6:	9702      	str	r7, [sp, #8]
 800d6c8:	f00b f896 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "TH2");
 800d6cc:	22b1      	movs	r2, #177	@ 0xb1
 800d6ce:	2178      	movs	r1, #120	@ 0x78
 800d6d0:	4bb6      	ldr	r3, [pc, #728]	@ (800d9ac <pdf_gen_completed_report+0x1ad4>)
 800d6d2:	9500      	str	r5, [sp, #0]
 800d6d4:	9304      	str	r3, [sp, #16]
 800d6d6:	0052      	lsls	r2, r2, #1
 800d6d8:	0023      	movs	r3, r4
 800d6da:	31ff      	adds	r1, #255	@ 0xff
 800d6dc:	9807      	ldr	r0, [sp, #28]
 800d6de:	9703      	str	r7, [sp, #12]
 800d6e0:	9702      	str	r7, [sp, #8]
 800d6e2:	9701      	str	r7, [sp, #4]
 800d6e4:	f00b f852 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.9, 0.4, 0.0);
 800d6e8:	4bb1      	ldr	r3, [pc, #708]	@ (800d9b0 <pdf_gen_completed_report+0x1ad8>)
 800d6ea:	49b2      	ldr	r1, [pc, #712]	@ (800d9b4 <pdf_gen_completed_report+0x1adc>)
 800d6ec:	9303      	str	r3, [sp, #12]
 800d6ee:	23fe      	movs	r3, #254	@ 0xfe
 800d6f0:	059b      	lsls	r3, r3, #22
 800d6f2:	9102      	str	r1, [sp, #8]
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	21c3      	movs	r1, #195	@ 0xc3
 800d6f8:	2396      	movs	r3, #150	@ 0x96
 800d6fa:	0032      	movs	r2, r6
 800d6fc:	9600      	str	r6, [sp, #0]
 800d6fe:	33ff      	adds	r3, #255	@ 0xff
 800d700:	0049      	lsls	r1, r1, #1
 800d702:	9807      	ldr	r0, [sp, #28]
 800d704:	9704      	str	r7, [sp, #16]
 800d706:	f00b f877 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "TH1");
 800d70a:	22ad      	movs	r2, #173	@ 0xad
 800d70c:	2178      	movs	r1, #120	@ 0x78
 800d70e:	4baa      	ldr	r3, [pc, #680]	@ (800d9b8 <pdf_gen_completed_report+0x1ae0>)
 800d710:	9500      	str	r5, [sp, #0]
 800d712:	9304      	str	r3, [sp, #16]
 800d714:	0052      	lsls	r2, r2, #1
 800d716:	0023      	movs	r3, r4
 800d718:	31ff      	adds	r1, #255	@ 0xff
 800d71a:	9807      	ldr	r0, [sp, #28]
 800d71c:	9703      	str	r7, [sp, #12]
 800d71e:	9702      	str	r7, [sp, #8]
 800d720:	9701      	str	r7, [sp, #4]
 800d722:	f00b f833 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 1.0, 0.75, 0.5);
 800d726:	21fc      	movs	r1, #252	@ 0xfc
 800d728:	23fe      	movs	r3, #254	@ 0xfe
 800d72a:	0589      	lsls	r1, r1, #22
 800d72c:	059b      	lsls	r3, r3, #22
 800d72e:	20fd      	movs	r0, #253	@ 0xfd
 800d730:	22ae      	movs	r2, #174	@ 0xae
 800d732:	9104      	str	r1, [sp, #16]
 800d734:	9302      	str	r3, [sp, #8]
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	21c3      	movs	r1, #195	@ 0xc3
 800d73a:	2396      	movs	r3, #150	@ 0x96
 800d73c:	0052      	lsls	r2, r2, #1
 800d73e:	0580      	lsls	r0, r0, #22
 800d740:	9003      	str	r0, [sp, #12]
 800d742:	9200      	str	r2, [sp, #0]
 800d744:	33ff      	adds	r3, #255	@ 0xff
 800d746:	0049      	lsls	r1, r1, #1
 800d748:	9807      	ldr	r0, [sp, #28]
 800d74a:	f00b f855 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "TL2");
 800d74e:	22b1      	movs	r2, #177	@ 0xb1
 800d750:	21aa      	movs	r1, #170	@ 0xaa
 800d752:	4b9a      	ldr	r3, [pc, #616]	@ (800d9bc <pdf_gen_completed_report+0x1ae4>)
 800d754:	9500      	str	r5, [sp, #0]
 800d756:	9304      	str	r3, [sp, #16]
 800d758:	0052      	lsls	r2, r2, #1
 800d75a:	0023      	movs	r3, r4
 800d75c:	31ff      	adds	r1, #255	@ 0xff
 800d75e:	9807      	ldr	r0, [sp, #28]
 800d760:	9703      	str	r7, [sp, #12]
 800d762:	9702      	str	r7, [sp, #8]
 800d764:	9701      	str	r7, [sp, #4]
 800d766:	f00b f811 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.6,0.9,0.6);
 800d76a:	4b95      	ldr	r3, [pc, #596]	@ (800d9c0 <pdf_gen_completed_report+0x1ae8>)
 800d76c:	21dc      	movs	r1, #220	@ 0xdc
 800d76e:	9304      	str	r3, [sp, #16]
 800d770:	9302      	str	r3, [sp, #8]
 800d772:	23fe      	movs	r3, #254	@ 0xfe
 800d774:	059b      	lsls	r3, r3, #22
 800d776:	9301      	str	r3, [sp, #4]
 800d778:	23c8      	movs	r3, #200	@ 0xc8
 800d77a:	488e      	ldr	r0, [pc, #568]	@ (800d9b4 <pdf_gen_completed_report+0x1adc>)
 800d77c:	0032      	movs	r2, r6
 800d77e:	9003      	str	r0, [sp, #12]
 800d780:	9600      	str	r6, [sp, #0]
 800d782:	33ff      	adds	r3, #255	@ 0xff
 800d784:	0049      	lsls	r1, r1, #1
 800d786:	9807      	ldr	r0, [sp, #28]
 800d788:	f00b f836 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "TL1");
 800d78c:	22ad      	movs	r2, #173	@ 0xad
 800d78e:	21aa      	movs	r1, #170	@ 0xaa
 800d790:	4b8c      	ldr	r3, [pc, #560]	@ (800d9c4 <pdf_gen_completed_report+0x1aec>)
 800d792:	9500      	str	r5, [sp, #0]
 800d794:	9304      	str	r3, [sp, #16]
 800d796:	0052      	lsls	r2, r2, #1
 800d798:	0023      	movs	r3, r4
 800d79a:	31ff      	adds	r1, #255	@ 0xff
 800d79c:	9807      	ldr	r0, [sp, #28]
 800d79e:	9703      	str	r7, [sp, #12]
 800d7a0:	9702      	str	r7, [sp, #8]
 800d7a2:	9701      	str	r7, [sp, #4]
 800d7a4:	f00a fff2 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 0.1,0.5,0.1);
 800d7a8:	4b87      	ldr	r3, [pc, #540]	@ (800d9c8 <pdf_gen_completed_report+0x1af0>)
 800d7aa:	21fc      	movs	r1, #252	@ 0xfc
 800d7ac:	9304      	str	r3, [sp, #16]
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	23fe      	movs	r3, #254	@ 0xfe
 800d7b2:	0589      	lsls	r1, r1, #22
 800d7b4:	059b      	lsls	r3, r3, #22
 800d7b6:	22ae      	movs	r2, #174	@ 0xae
 800d7b8:	9103      	str	r1, [sp, #12]
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	21dc      	movs	r1, #220	@ 0xdc
 800d7be:	23c8      	movs	r3, #200	@ 0xc8
 800d7c0:	0052      	lsls	r2, r2, #1
 800d7c2:	9200      	str	r2, [sp, #0]
 800d7c4:	33ff      	adds	r3, #255	@ 0xff
 800d7c6:	0049      	lsls	r1, r1, #1
 800d7c8:	9807      	ldr	r0, [sp, #28]
 800d7ca:	f00b f815 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x , y + 16, "F2", 6, 0, 0, 0, "RH2");
 800d7ce:	22b1      	movs	r2, #177	@ 0xb1
 800d7d0:	21dc      	movs	r1, #220	@ 0xdc
 800d7d2:	4b7e      	ldr	r3, [pc, #504]	@ (800d9cc <pdf_gen_completed_report+0x1af4>)
 800d7d4:	9500      	str	r5, [sp, #0]
 800d7d6:	9304      	str	r3, [sp, #16]
 800d7d8:	0052      	lsls	r2, r2, #1
 800d7da:	0023      	movs	r3, r4
 800d7dc:	31ff      	adds	r1, #255	@ 0xff
 800d7de:	9807      	ldr	r0, [sp, #28]
 800d7e0:	9703      	str	r7, [sp, #12]
 800d7e2:	9702      	str	r7, [sp, #8]
 800d7e4:	9701      	str	r7, [sp, #4]
 800d7e6:	f00a ffd1 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15,  y + 18, (alarm_x +15 + 15), y + 18, 1.0, 0.0,0.75,1.0);
 800d7ea:	23fe      	movs	r3, #254	@ 0xfe
 800d7ec:	20fd      	movs	r0, #253	@ 0xfd
 800d7ee:	059b      	lsls	r3, r3, #22
 800d7f0:	9304      	str	r3, [sp, #16]
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	21f5      	movs	r1, #245	@ 0xf5
 800d7f6:	23fa      	movs	r3, #250	@ 0xfa
 800d7f8:	0580      	lsls	r0, r0, #22
 800d7fa:	0032      	movs	r2, r6
 800d7fc:	9003      	str	r0, [sp, #12]
 800d7fe:	9600      	str	r6, [sp, #0]
 800d800:	33ff      	adds	r3, #255	@ 0xff
 800d802:	0049      	lsls	r1, r1, #1
 800d804:	9807      	ldr	r0, [sp, #28]
 800d806:	9702      	str	r7, [sp, #8]
 800d808:	f00a fff6 	bl	80187f8 <tpdf_draw_line>
    tpdf_draw_colored_text(file_p, alarm_x, y + 8, "F2", 6, 0, 0, 0, "RH1");
 800d80c:	22ad      	movs	r2, #173	@ 0xad
 800d80e:	21dc      	movs	r1, #220	@ 0xdc
 800d810:	4b6f      	ldr	r3, [pc, #444]	@ (800d9d0 <pdf_gen_completed_report+0x1af8>)
 800d812:	9500      	str	r5, [sp, #0]
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	0052      	lsls	r2, r2, #1
 800d818:	0023      	movs	r3, r4
 800d81a:	31ff      	adds	r1, #255	@ 0xff
 800d81c:	9807      	ldr	r0, [sp, #28]
 800d81e:	9703      	str	r7, [sp, #12]
 800d820:	9702      	str	r7, [sp, #8]
 800d822:	9701      	str	r7, [sp, #4]
 800d824:	f00a ffb2 	bl	801878c <tpdf_draw_colored_text>
    tpdf_draw_line(file_p, alarm_x +15 ,  y + 10, (alarm_x +15 + 15), y + 10, 1.0, 0.5,0.8,1.0);
 800d828:	21fc      	movs	r1, #252	@ 0xfc
 800d82a:	4b6a      	ldr	r3, [pc, #424]	@ (800d9d4 <pdf_gen_completed_report+0x1afc>)
 800d82c:	0589      	lsls	r1, r1, #22
 800d82e:	26fe      	movs	r6, #254	@ 0xfe
 800d830:	22ae      	movs	r2, #174	@ 0xae
 800d832:	9303      	str	r3, [sp, #12]
 800d834:	9102      	str	r1, [sp, #8]
 800d836:	23fa      	movs	r3, #250	@ 0xfa
 800d838:	21f5      	movs	r1, #245	@ 0xf5
 800d83a:	05b6      	lsls	r6, r6, #22
 800d83c:	0052      	lsls	r2, r2, #1
 800d83e:	9604      	str	r6, [sp, #16]
 800d840:	9601      	str	r6, [sp, #4]
 800d842:	9200      	str	r2, [sp, #0]
 800d844:	33ff      	adds	r3, #255	@ 0xff
 800d846:	0049      	lsls	r1, r1, #1
 800d848:	9807      	ldr	r0, [sp, #28]
 800d84a:	f00a ffd5 	bl	80187f8 <tpdf_draw_line>
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800d84e:	23ff      	movs	r3, #255	@ 0xff
 800d850:	352c      	adds	r5, #44	@ 0x2c
 800d852:	059b      	lsls	r3, r3, #22
 800d854:	002a      	movs	r2, r5
 800d856:	0029      	movs	r1, r5
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	9500      	str	r5, [sp, #0]
 800d85c:	4b5e      	ldr	r3, [pc, #376]	@ (800d9d8 <pdf_gen_completed_report+0x1b00>)
 800d85e:	9807      	ldr	r0, [sp, #28]
 800d860:	9704      	str	r7, [sp, #16]
 800d862:	9703      	str	r7, [sp, #12]
 800d864:	9702      	str	r7, [sp, #8]
 800d866:	f00a ffc7 	bl	80187f8 <tpdf_draw_line>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800d86a:	9603      	str	r6, [sp, #12]
 800d86c:	2609      	movs	r6, #9
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800d86e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800d870:	4c5a      	ldr	r4, [pc, #360]	@ (800d9dc <pdf_gen_completed_report+0x1b04>)
    stream_len += tpdf_draw_line(&pdf_file,PDF_PAGE_LEFT, PDF_PAGE_BOTTOM, PDF_PAGE_RIGHT, PDF_PAGE_BOTTOM, 1.5, 0,0,0);
 800d872:	181b      	adds	r3, r3, r0
 800d874:	9309      	str	r3, [sp, #36]	@ 0x24
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800d876:	4b5a      	ldr	r3, [pc, #360]	@ (800d9e0 <pdf_gen_completed_report+0x1b08>)
 800d878:	0029      	movs	r1, r5
 800d87a:	2228      	movs	r2, #40	@ 0x28
 800d87c:	9304      	str	r3, [sp, #16]
 800d87e:	9600      	str	r6, [sp, #0]
 800d880:	0023      	movs	r3, r4
 800d882:	9807      	ldr	r0, [sp, #28]
 800d884:	9702      	str	r7, [sp, #8]
 800d886:	9701      	str	r7, [sp, #4]
 800d888:	f00a ff80 	bl	801878c <tpdf_draw_colored_text>
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800d88c:	4b55      	ldr	r3, [pc, #340]	@ (800d9e4 <pdf_gen_completed_report+0x1b0c>)
 800d88e:	21fa      	movs	r1, #250	@ 0xfa
 800d890:	9304      	str	r3, [sp, #16]
 800d892:	23fe      	movs	r3, #254	@ 0xfe
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800d894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800d896:	059b      	lsls	r3, r3, #22
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_LEFT , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1, PDF_COMP_HTTPS_LINK);
 800d898:	1815      	adds	r5, r2, r0
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800d89a:	9303      	str	r3, [sp, #12]
 800d89c:	2228      	movs	r2, #40	@ 0x28
 800d89e:	0023      	movs	r3, r4
 800d8a0:	9600      	str	r6, [sp, #0]
 800d8a2:	31ff      	adds	r1, #255	@ 0xff
 800d8a4:	9807      	ldr	r0, [sp, #28]
 800d8a6:	9702      	str	r7, [sp, #8]
 800d8a8:	9701      	str	r7, [sp, #4]
 800d8aa:	f00a ff6f 	bl	801878c <tpdf_draw_colored_text>
    tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,stream_len,&pdf_monitor);
 800d8ae:	4c4e      	ldr	r4, [pc, #312]	@ (800d9e8 <pdf_gen_completed_report+0x1b10>)
    stream_len += tpdf_draw_colored_text(&pdf_file,PDF_PAGE_RIGHT-40 , PDF_PAGE_BOTTOM -10 ,"F1",9,0,0,1,"NUCARE");
 800d8b0:	182a      	adds	r2, r5, r0
    tpdf_end_new_stream_obj(&pdf_file,TPDF_OBJ_NUM_PAGE_1ST_CONTENTS_LENGTH,stream_len,&pdf_monitor);
 800d8b2:	0023      	movs	r3, r4
 800d8b4:	210d      	movs	r1, #13
 800d8b6:	9807      	ldr	r0, [sp, #28]
 800d8b8:	f00b f84a 	bl	8018950 <tpdf_end_new_stream_obj>
    sprintf(content_buffer, "<<\n/Type /Pages\n/Count %d\n/Kids [ %d 0 R", total_pages +1 ,TPDF_OBJ_NUM_PAGE_1ST);
 800d8bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8be:	4832      	ldr	r0, [pc, #200]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d8c0:	ad1a      	add	r5, sp, #104	@ 0x68
 800d8c2:	1c9a      	adds	r2, r3, #2
 800d8c4:	1940      	adds	r0, r0, r5
 800d8c6:	230a      	movs	r3, #10
 800d8c8:	4948      	ldr	r1, [pc, #288]	@ (800d9ec <pdf_gen_completed_report+0x1b14>)
 800d8ca:	f00c faa5 	bl	8019e18 <siprintf>
    for (int i = 0; i < total_pages; i++) {
 800d8ce:	2500      	movs	r5, #0
        sprintf(temp_ref, " %d 0 R", page_obj);
 800d8d0:	3601      	adds	r6, #1
 800d8d2:	0032      	movs	r2, r6
 800d8d4:	436a      	muls	r2, r5
 800d8d6:	4946      	ldr	r1, [pc, #280]	@ (800d9f0 <pdf_gen_completed_report+0x1b18>)
 800d8d8:	3214      	adds	r2, #20
 800d8da:	a834      	add	r0, sp, #208	@ 0xd0
 800d8dc:	f00c fa9c 	bl	8019e18 <siprintf>
        strcat(content_buffer, temp_ref);
 800d8e0:	4b29      	ldr	r3, [pc, #164]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d8e2:	aa1a      	add	r2, sp, #104	@ 0x68
 800d8e4:	189b      	adds	r3, r3, r2
 800d8e6:	0018      	movs	r0, r3
 800d8e8:	a934      	add	r1, sp, #208	@ 0xd0
 800d8ea:	f00c fbb9 	bl	801a060 <strcat>
    for (int i = 0; i < total_pages; i++) {
 800d8ee:	9b08      	ldr	r3, [sp, #32]
 800d8f0:	3501      	adds	r5, #1
 800d8f2:	42ab      	cmp	r3, r5
 800d8f4:	d8ed      	bhi.n	800d8d2 <pdf_gen_completed_report+0x19fa>
    sprintf(temp_ref,"]\n/MediaBox [0 0 %d %d]\n>>",PDF_PAGE_WIDTH_A4,PDF_PAGE_HEIGHT_A4);
 800d8f6:	493f      	ldr	r1, [pc, #252]	@ (800d9f4 <pdf_gen_completed_report+0x1b1c>)
 800d8f8:	4b3f      	ldr	r3, [pc, #252]	@ (800d9f8 <pdf_gen_completed_report+0x1b20>)
 800d8fa:	4a40      	ldr	r2, [pc, #256]	@ (800d9fc <pdf_gen_completed_report+0x1b24>)
 800d8fc:	a834      	add	r0, sp, #208	@ 0xd0
 800d8fe:	f00c fa8b 	bl	8019e18 <siprintf>
    strcat(content_buffer, temp_ref);
 800d902:	4b21      	ldr	r3, [pc, #132]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d904:	aa1a      	add	r2, sp, #104	@ 0x68
 800d906:	189b      	adds	r3, r3, r2
 800d908:	0018      	movs	r0, r3
 800d90a:	a934      	add	r1, sp, #208	@ 0xd0
 800d90c:	f00c fba8 	bl	801a060 <strcat>
    tpdf_add_new_obj(&pdf_file, TPDF_OBJ_PAGES_KID, content_buffer, &pdf_monitor);
 800d910:	4a1d      	ldr	r2, [pc, #116]	@ (800d988 <pdf_gen_completed_report+0x1ab0>)
 800d912:	a91a      	add	r1, sp, #104	@ 0x68
 800d914:	1852      	adds	r2, r2, r1
 800d916:	0023      	movs	r3, r4
 800d918:	2103      	movs	r1, #3
 800d91a:	9807      	ldr	r0, [sp, #28]
 800d91c:	f00a ffd6 	bl	80188cc <tpdf_add_new_obj>
    ULONG xref_offset = f_size(&pdf_file);
 800d920:	9b07      	ldr	r3, [sp, #28]
    sprintf(work_buffer, "0 %u\n", (unsigned)(pdf_monitor.num_objs + 1));
 800d922:	4d37      	ldr	r5, [pc, #220]	@ (800da00 <pdf_gen_completed_report+0x1b28>)
    fatfs_write_string(&pdf_file, "xref\n");
 800d924:	0019      	movs	r1, r3
 800d926:	4837      	ldr	r0, [pc, #220]	@ (800da04 <pdf_gen_completed_report+0x1b2c>)
    ULONG xref_offset = f_size(&pdf_file);
 800d928:	68df      	ldr	r7, [r3, #12]
    fatfs_write_string(&pdf_file, "xref\n");
 800d92a:	f007 fe63 	bl	80155f4 <f_puts>
    sprintf(work_buffer, "0 %u\n", (unsigned)(pdf_monitor.num_objs + 1));
 800d92e:	5962      	ldr	r2, [r4, r5]
 800d930:	4935      	ldr	r1, [pc, #212]	@ (800da08 <pdf_gen_completed_report+0x1b30>)
 800d932:	3201      	adds	r2, #1
 800d934:	a874      	add	r0, sp, #464	@ 0x1d0
 800d936:	f00c fa6f 	bl	8019e18 <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800d93a:	9907      	ldr	r1, [sp, #28]
 800d93c:	a874      	add	r0, sp, #464	@ 0x1d0
 800d93e:	f007 fe59 	bl	80155f4 <f_puts>
    fatfs_write_string(&pdf_file, "0000000000 65535 f \n");
 800d942:	4832      	ldr	r0, [pc, #200]	@ (800da0c <pdf_gen_completed_report+0x1b34>)
 800d944:	9907      	ldr	r1, [sp, #28]
 800d946:	f007 fe55 	bl	80155f4 <f_puts>
    for (unsigned i = 0; i < (unsigned)pdf_monitor.num_objs; i++) {
 800d94a:	2600      	movs	r6, #0
 800d94c:	5963      	ldr	r3, [r4, r5]
 800d94e:	429e      	cmp	r6, r3
 800d950:	d200      	bcs.n	800d954 <pdf_gen_completed_report+0x1a7c>
 800d952:	e1a6      	b.n	800dca2 <pdf_gen_completed_report+0x1dca>
    fatfs_write_string(&pdf_file, "trailer\n");
 800d954:	9907      	ldr	r1, [sp, #28]
 800d956:	482e      	ldr	r0, [pc, #184]	@ (800da10 <pdf_gen_completed_report+0x1b38>)
 800d958:	f007 fe4c 	bl	80155f4 <f_puts>
    sprintf(work_buffer, "<< /Size %u /Root %u 0 R >>\n",
 800d95c:	5962      	ldr	r2, [r4, r5]
 800d95e:	2302      	movs	r3, #2
 800d960:	3201      	adds	r2, #1
 800d962:	492c      	ldr	r1, [pc, #176]	@ (800da14 <pdf_gen_completed_report+0x1b3c>)
 800d964:	a874      	add	r0, sp, #464	@ 0x1d0
 800d966:	f00c fa57 	bl	8019e18 <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800d96a:	9907      	ldr	r1, [sp, #28]
 800d96c:	a874      	add	r0, sp, #464	@ 0x1d0
 800d96e:	f007 fe41 	bl	80155f4 <f_puts>
    sprintf(work_buffer, "startxref\n%lu\n%%EOF\n", (unsigned long)xref_offset);
 800d972:	003a      	movs	r2, r7
 800d974:	4928      	ldr	r1, [pc, #160]	@ (800da18 <pdf_gen_completed_report+0x1b40>)
 800d976:	a874      	add	r0, sp, #464	@ 0x1d0
 800d978:	f00c fa4e 	bl	8019e18 <siprintf>
    fatfs_write_string(&pdf_file, work_buffer);
 800d97c:	9907      	ldr	r1, [sp, #28]
 800d97e:	a874      	add	r0, sp, #464	@ 0x1d0
 800d980:	e04c      	b.n	800da1c <pdf_gen_completed_report+0x1b44>
 800d982:	46c0      	nop			@ (mov r8, r8)
 800d984:	0000020d 	.word	0x0000020d
 800d988:	000008e8 	.word	0x000008e8
 800d98c:	0801f691 	.word	0x0801f691
 800d990:	00000212 	.word	0x00000212
 800d994:	0801ef33 	.word	0x0801ef33
 800d998:	0801f802 	.word	0x0801f802
 800d99c:	20000200 	.word	0x20000200
 800d9a0:	200030b4 	.word	0x200030b4
 800d9a4:	0801f847 	.word	0x0801f847
 800d9a8:	0801f853 	.word	0x0801f853
 800d9ac:	0801f857 	.word	0x0801f857
 800d9b0:	3ecccccd 	.word	0x3ecccccd
 800d9b4:	3f666666 	.word	0x3f666666
 800d9b8:	0801f85b 	.word	0x0801f85b
 800d9bc:	0801f85f 	.word	0x0801f85f
 800d9c0:	3f19999a 	.word	0x3f19999a
 800d9c4:	0801f863 	.word	0x0801f863
 800d9c8:	3dcccccd 	.word	0x3dcccccd
 800d9cc:	0801f867 	.word	0x0801f867
 800d9d0:	0801f86b 	.word	0x0801f86b
 800d9d4:	3f4ccccd 	.word	0x3f4ccccd
 800d9d8:	00000221 	.word	0x00000221
 800d9dc:	0801eeb3 	.word	0x0801eeb3
 800d9e0:	0801eeb6 	.word	0x0801eeb6
 800d9e4:	0801eecc 	.word	0x0801eecc
 800d9e8:	20002cac 	.word	0x20002cac
 800d9ec:	0801f86f 	.word	0x0801f86f
 800d9f0:	0801f890 	.word	0x0801f890
 800d9f4:	0801f898 	.word	0x0801f898
 800d9f8:	0000034a 	.word	0x0000034a
 800d9fc:	00000253 	.word	0x00000253
 800da00:	00000404 	.word	0x00000404
 800da04:	0801f8b3 	.word	0x0801f8b3
 800da08:	0801f8b9 	.word	0x0801f8b9
 800da0c:	0801f8bf 	.word	0x0801f8bf
 800da10:	0801f8e9 	.word	0x0801f8e9
 800da14:	0801f8f2 	.word	0x0801f8f2
 800da18:	0801f90f 	.word	0x0801f90f
 800da1c:	f007 fdea 	bl	80155f4 <f_puts>
    if (f_chmod(pdf_file_name,AM_RDO,AM_RDO) != FR_OK)
 800da20:	2201      	movs	r2, #1
 800da22:	4ea3      	ldr	r6, [pc, #652]	@ (800dcb0 <pdf_gen_completed_report+0x1dd8>)
 800da24:	0011      	movs	r1, r2
 800da26:	6830      	ldr	r0, [r6, #0]
 800da28:	f007 f9bc 	bl	8014da4 <f_chmod>
 800da2c:	4ca1      	ldr	r4, [pc, #644]	@ (800dcb4 <pdf_gen_completed_report+0x1ddc>)
 800da2e:	4da2      	ldr	r5, [pc, #648]	@ (800dcb8 <pdf_gen_completed_report+0x1de0>)
 800da30:	2800      	cmp	r0, #0
 800da32:	d006      	beq.n	800da42 <pdf_gen_completed_report+0x1b6a>
        LOG_APP("f_chmod %s failed\r\n",pdf_file_name);
 800da34:	6828      	ldr	r0, [r5, #0]
 800da36:	0022      	movs	r2, r4
 800da38:	49a0      	ldr	r1, [pc, #640]	@ (800dcbc <pdf_gen_completed_report+0x1de4>)
 800da3a:	6833      	ldr	r3, [r6, #0]
 800da3c:	68c0      	ldr	r0, [r0, #12]
 800da3e:	f00c f90f 	bl	8019c60 <fiprintf>
    f_close(&pdf_file);
 800da42:	9807      	ldr	r0, [sp, #28]
 800da44:	f007 f8ec 	bl	8014c20 <f_close>
    LOG_APP("Close PDF log file\r\n");
 800da48:	0022      	movs	r2, r4
 800da4a:	499d      	ldr	r1, [pc, #628]	@ (800dcc0 <pdf_gen_completed_report+0x1de8>)
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	f7fe fa6c 	bl	800bf2a <pdf_gen_completed_report+0x52>
        elapsed_sec = (86400 - start_sec) + stop_sec;
 800da52:	4a9c      	ldr	r2, [pc, #624]	@ (800dcc4 <pdf_gen_completed_report+0x1dec>)
 800da54:	189b      	adds	r3, r3, r2
 800da56:	f7ff f882 	bl	800cb5e <pdf_gen_completed_report+0xc86>
        tpdf_draw_simple_dashed_line(file_p, CHART_X_START + (i*grid_size), chart_y_start , CHART_X_START + (i*grid_size), chart_y_start - CHART_HEIGHT, line_size, light_gray, light_gray, light_gray,4);
 800da5a:	2304      	movs	r3, #4
 800da5c:	9305      	str	r3, [sp, #20]
 800da5e:	23fc      	movs	r3, #252	@ 0xfc
 800da60:	059b      	lsls	r3, r3, #22
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	22a9      	movs	r2, #169	@ 0xa9
 800da66:	2358      	movs	r3, #88	@ 0x58
 800da68:	0029      	movs	r1, r5
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	4896      	ldr	r0, [pc, #600]	@ (800dcc8 <pdf_gen_completed_report+0x1df0>)
 800da6e:	002b      	movs	r3, r5
 800da70:	9604      	str	r6, [sp, #16]
 800da72:	9603      	str	r6, [sp, #12]
 800da74:	9602      	str	r6, [sp, #8]
 800da76:	0052      	lsls	r2, r2, #1
 800da78:	f00a fef2 	bl	8018860 <tpdf_draw_simple_dashed_line>
    for (int i = 1; i <= num_grid_col_lines; i++)
 800da7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da7e:	192d      	adds	r5, r5, r4
 800da80:	3301      	adds	r3, #1
 800da82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da84:	f7ff fac8 	bl	800d018 <pdf_gen_completed_report+0x1140>
        printf("[PDF][Chart] TH2 skip (state=%d)\r\n",
 800da88:	0421      	lsls	r1, r4, #16
 800da8a:	0f89      	lsrs	r1, r1, #30
 800da8c:	488f      	ldr	r0, [pc, #572]	@ (800dccc <pdf_gen_completed_report+0x1df4>)
 800da8e:	f00c f913 	bl	8019cb8 <iprintf>
 800da92:	f7ff fbb6 	bl	800d202 <pdf_gen_completed_report+0x132a>
        printf("[PDF][Chart] TH1 skip (state=%d)\r\n",
 800da96:	04a1      	lsls	r1, r4, #18
 800da98:	0f89      	lsrs	r1, r1, #30
 800da9a:	488d      	ldr	r0, [pc, #564]	@ (800dcd0 <pdf_gen_completed_report+0x1df8>)
 800da9c:	f00c f90c 	bl	8019cb8 <iprintf>
 800daa0:	e417      	b.n	800d2d2 <pdf_gen_completed_report+0x13fa>
        printf("[PDF][Chart] TL2 skip (state=%d)\r\n",
 800daa2:	0321      	lsls	r1, r4, #12
 800daa4:	0f89      	lsrs	r1, r1, #30
 800daa6:	488b      	ldr	r0, [pc, #556]	@ (800dcd4 <pdf_gen_completed_report+0x1dfc>)
 800daa8:	f00c f906 	bl	8019cb8 <iprintf>
 800daac:	e46f      	b.n	800d38e <pdf_gen_completed_report+0x14b6>
        printf("[PDF][Chart] TL1 skip (state=%d)\r\n",
 800daae:	03a1      	lsls	r1, r4, #14
 800dab0:	0f89      	lsrs	r1, r1, #30
 800dab2:	4889      	ldr	r0, [pc, #548]	@ (800dcd8 <pdf_gen_completed_report+0x1e00>)
 800dab4:	f00c f900 	bl	8019cb8 <iprintf>
 800dab8:	e4c9      	b.n	800d44e <pdf_gen_completed_report+0x1576>
        printf("[PDF][Chart] RH2 skip (state=%d)\r\n",
 800daba:	0509      	lsls	r1, r1, #20
 800dabc:	0f89      	lsrs	r1, r1, #30
 800dabe:	4887      	ldr	r0, [pc, #540]	@ (800dcdc <pdf_gen_completed_report+0x1e04>)
 800dac0:	f00c f8fa 	bl	8019cb8 <iprintf>
 800dac4:	e512      	b.n	800d4ec <pdf_gen_completed_report+0x1614>
        printf("[PDF][Chart] RH1 skip (state=%d)\r\n",
 800dac6:	0589      	lsls	r1, r1, #22
 800dac8:	0f89      	lsrs	r1, r1, #30
 800daca:	4885      	ldr	r0, [pc, #532]	@ (800dce0 <pdf_gen_completed_report+0x1e08>)
 800dacc:	f00c f8f4 	bl	8019cb8 <iprintf>
 800dad0:	e587      	b.n	800d5e2 <pdf_gen_completed_report+0x170a>
        meas_data_log_read_entry(i, &entry);
 800dad2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dad4:	a926      	add	r1, sp, #152	@ 0x98
 800dad6:	f7fa fca9 	bl	800842c <meas_data_log_read_entry>
        if (chunk_start_index > 0 && buffer_count == 0) {
 800dada:	2e00      	cmp	r6, #0
 800dadc:	d100      	bne.n	800dae0 <pdf_gen_completed_report+0x1c08>
 800dade:	e092      	b.n	800dc06 <pdf_gen_completed_report+0x1d2e>
 800dae0:	2c00      	cmp	r4, #0
 800dae2:	d000      	beq.n	800dae6 <pdf_gen_completed_report+0x1c0e>
 800dae4:	e08f      	b.n	800dc06 <pdf_gen_completed_report+0x1d2e>
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800dae6:	9b07      	ldr	r3, [sp, #28]
 800dae8:	1e58      	subs	r0, r3, #1
 800daea:	f7f3 fe1f 	bl	800172c <__aeabi_i2f>
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800daee:	4b7d      	ldr	r3, [pc, #500]	@ (800dce4 <pdf_gen_completed_report+0x1e0c>)
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800daf0:	1c05      	adds	r5, r0, #0
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800daf2:	681b      	ldr	r3, [r3, #0]
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800daf4:	9808      	ldr	r0, [sp, #32]
 800daf6:	1c19      	adds	r1, r3, #0
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800daf8:	930b      	str	r3, [sp, #44]	@ 0x2c
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dafa:	f7f3 fb7d 	bl	80011f8 <__aeabi_fsub>
 800dafe:	9010      	str	r0, [sp, #64]	@ 0x40
            float prev_dose_y = map_value(last_entry_of_chunk.dose, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800db00:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800db02:	f7f3 fe63 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800db06:	4978      	ldr	r1, [pc, #480]	@ (800dce8 <pdf_gen_completed_report+0x1e10>)
 800db08:	f7f3 fa1c 	bl	8000f44 <__aeabi_fmul>
 800db0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db0e:	f7f3 f84b 	bl	8000ba8 <__aeabi_fdiv>
 800db12:	4976      	ldr	r1, [pc, #472]	@ (800dcec <pdf_gen_completed_report+0x1e14>)
 800db14:	f7f2 fe56 	bl	80007c4 <__aeabi_fadd>
 800db18:	9012      	str	r0, [sp, #72]	@ 0x48
            float curr_dose_y = map_value(entry.dose, RAD_MIN, rad_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800db1a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800db1c:	f7f3 fe56 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800db20:	4971      	ldr	r1, [pc, #452]	@ (800dce8 <pdf_gen_completed_report+0x1e10>)
 800db22:	f7f3 fa0f 	bl	8000f44 <__aeabi_fmul>
 800db26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db28:	f7f3 f83e 	bl	8000ba8 <__aeabi_fdiv>
 800db2c:	496f      	ldr	r1, [pc, #444]	@ (800dcec <pdf_gen_completed_report+0x1e14>)
 800db2e:	f7f2 fe49 	bl	80007c4 <__aeabi_fadd>
 800db32:	9016      	str	r0, [sp, #88]	@ 0x58
            float prev_x = map_value((float)(chunk_start_index - 1), 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800db34:	1e70      	subs	r0, r6, #1
 800db36:	f7f3 fdf9 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800db3a:	496d      	ldr	r1, [pc, #436]	@ (800dcf0 <pdf_gen_completed_report+0x1e18>)
 800db3c:	f7f3 fa02 	bl	8000f44 <__aeabi_fmul>
 800db40:	1c29      	adds	r1, r5, #0
 800db42:	f7f3 f831 	bl	8000ba8 <__aeabi_fdiv>
 800db46:	496b      	ldr	r1, [pc, #428]	@ (800dcf4 <pdf_gen_completed_report+0x1e1c>)
 800db48:	f7f2 fe3c 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800db4c:	f7f3 fdce 	bl	80016ec <__aeabi_f2iz>
 800db50:	900c      	str	r0, [sp, #48]	@ 0x30
            float curr_x = map_value((float)chunk_start_index, 0.0f, (float)(record_nums - 1), CHART_X_START, CHART_X_START + CHART_WIDTH);
 800db52:	0030      	movs	r0, r6
 800db54:	f7f3 fe3a 	bl	80017cc <__aeabi_ui2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800db58:	4965      	ldr	r1, [pc, #404]	@ (800dcf0 <pdf_gen_completed_report+0x1e18>)
 800db5a:	f7f3 f9f3 	bl	8000f44 <__aeabi_fmul>
 800db5e:	1c29      	adds	r1, r5, #0
 800db60:	f7f3 f822 	bl	8000ba8 <__aeabi_fdiv>
 800db64:	4963      	ldr	r1, [pc, #396]	@ (800dcf4 <pdf_gen_completed_report+0x1e1c>)
 800db66:	f7f2 fe2d 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800db6a:	f7f3 fdbf 	bl	80016ec <__aeabi_f2iz>
 800db6e:	900f      	str	r0, [sp, #60]	@ 0x3c
            float prev_temp_y = map_value(last_entry_of_chunk.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800db70:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800db72:	f7f3 fddb 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800db76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db78:	f7f3 fb3e 	bl	80011f8 <__aeabi_fsub>
 800db7c:	495a      	ldr	r1, [pc, #360]	@ (800dce8 <pdf_gen_completed_report+0x1e10>)
 800db7e:	f7f3 f9e1 	bl	8000f44 <__aeabi_fmul>
 800db82:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800db84:	f7f3 f810 	bl	8000ba8 <__aeabi_fdiv>
 800db88:	4958      	ldr	r1, [pc, #352]	@ (800dcec <pdf_gen_completed_report+0x1e14>)
 800db8a:	f7f2 fe1b 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800db8e:	f7f3 fdad 	bl	80016ec <__aeabi_f2iz>
 800db92:	23fe      	movs	r3, #254	@ 0xfe
 800db94:	22fd      	movs	r2, #253	@ 0xfd
 800db96:	059b      	lsls	r3, r3, #22
 800db98:	0592      	lsls	r2, r2, #22
 800db9a:	9302      	str	r3, [sp, #8]
 800db9c:	9201      	str	r2, [sp, #4]
            float curr_temp_y = map_value(entry.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800db9e:	a91a      	add	r1, sp, #104	@ 0x68
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800dba0:	9017      	str	r0, [sp, #92]	@ 0x5c
 800dba2:	9704      	str	r7, [sp, #16]
 800dba4:	9703      	str	r7, [sp, #12]
            float curr_temp_y = map_value(entry.temperature, g_temp_axis_min , temp_highest_scale_up, chart_y_start - CHART_HEIGHT, chart_y_start);
 800dba6:	203a      	movs	r0, #58	@ 0x3a
 800dba8:	5e08      	ldrsh	r0, [r1, r0]
 800dbaa:	f7f3 fdbf 	bl	800172c <__aeabi_i2f>
    return to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min);
 800dbae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbb0:	f7f3 fb22 	bl	80011f8 <__aeabi_fsub>
 800dbb4:	494c      	ldr	r1, [pc, #304]	@ (800dce8 <pdf_gen_completed_report+0x1e10>)
 800dbb6:	f7f3 f9c5 	bl	8000f44 <__aeabi_fmul>
 800dbba:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800dbbc:	f7f2 fff4 	bl	8000ba8 <__aeabi_fdiv>
 800dbc0:	494a      	ldr	r1, [pc, #296]	@ (800dcec <pdf_gen_completed_report+0x1e14>)
 800dbc2:	f7f2 fdff 	bl	80007c4 <__aeabi_fadd>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_temp_y, (int)curr_x, (int)curr_temp_y, 0.75, 1.0f, 0.0f, 0.0f);
 800dbc6:	f7f3 fd91 	bl	80016ec <__aeabi_f2iz>
 800dbca:	4d3f      	ldr	r5, [pc, #252]	@ (800dcc8 <pdf_gen_completed_report+0x1df0>)
 800dbcc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dbce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbd0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dbd2:	9000      	str	r0, [sp, #0]
 800dbd4:	0028      	movs	r0, r5
 800dbd6:	f00a fe0f 	bl	80187f8 <tpdf_draw_line>
            tpdf_draw_line(file_p, (int)prev_x, (int)prev_dose_y, (int)curr_x, (int)curr_dose_y, 0.75, 0.0f, 0.0f, 1.0f);
 800dbda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dbdc:	f7f3 fd86 	bl	80016ec <__aeabi_f2iz>
 800dbe0:	23fe      	movs	r3, #254	@ 0xfe
 800dbe2:	22fd      	movs	r2, #253	@ 0xfd
 800dbe4:	059b      	lsls	r3, r3, #22
 800dbe6:	0592      	lsls	r2, r2, #22
 800dbe8:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dbea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800dbec:	9304      	str	r3, [sp, #16]
 800dbee:	9201      	str	r2, [sp, #4]
 800dbf0:	9703      	str	r7, [sp, #12]
 800dbf2:	9702      	str	r7, [sp, #8]
 800dbf4:	f7f3 fd7a 	bl	80016ec <__aeabi_f2iz>
 800dbf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbfa:	9000      	str	r0, [sp, #0]
 800dbfc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dbfe:	0028      	movs	r0, r5
 800dc00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dc02:	f00a fdf9 	bl	80187f8 <tpdf_draw_line>
        tmp_temper[buffer_count] = (float)entry.temperature/ 10.0f;
 800dc06:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc08:	203a      	movs	r0, #58	@ 0x3a
 800dc0a:	5e18      	ldrsh	r0, [r3, r0]
 800dc0c:	f7f3 fd8e 	bl	800172c <__aeabi_i2f>
 800dc10:	4939      	ldr	r1, [pc, #228]	@ (800dcf8 <pdf_gen_completed_report+0x1e20>)
 800dc12:	f7f2 ffc9 	bl	8000ba8 <__aeabi_fdiv>
 800dc16:	22b4      	movs	r2, #180	@ 0xb4
 800dc18:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc1a:	0052      	lsls	r2, r2, #1
 800dc1c:	189b      	adds	r3, r3, r2
 800dc1e:	00a5      	lsls	r5, r4, #2
 800dc20:	5158      	str	r0, [r3, r5]
        tmp_dose[buffer_count] = (float)entry.dose/ 100.0f;
 800dc22:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800dc24:	f7f3 fdd2 	bl	80017cc <__aeabi_ui2f>
 800dc28:	4934      	ldr	r1, [pc, #208]	@ (800dcfc <pdf_gen_completed_report+0x1e24>)
 800dc2a:	f7f2 ffbd 	bl	8000ba8 <__aeabi_fdiv>
 800dc2e:	4a34      	ldr	r2, [pc, #208]	@ (800dd00 <pdf_gen_completed_report+0x1e28>)
 800dc30:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc32:	189b      	adds	r3, r3, r2
 800dc34:	5158      	str	r0, [r3, r5]
        if (buffer_count == DATAPOINTS_PER_PAGE) {
 800dc36:	23f0      	movs	r3, #240	@ 0xf0
        buffer_count++;
 800dc38:	3401      	adds	r4, #1
 800dc3a:	b2a4      	uxth	r4, r4
        if (buffer_count == DATAPOINTS_PER_PAGE) {
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	429c      	cmp	r4, r3
 800dc40:	d12b      	bne.n	800dc9a <pdf_gen_completed_report+0x1dc2>
            pdf_chart_plot_data(file_p, *y_pos, tmp_temper, chunk_start_index, buffer_count, record_nums, 1.0f, 0.0f, 0.0f, g_temp_axis_min , temp_highest_scale_up);
 800dc42:	25fe      	movs	r5, #254	@ 0xfe
 800dc44:	20b3      	movs	r0, #179	@ 0xb3
 800dc46:	9b08      	ldr	r3, [sp, #32]
 800dc48:	05ad      	lsls	r5, r5, #22
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	4b25      	ldr	r3, [pc, #148]	@ (800dce4 <pdf_gen_completed_report+0x1e0c>)
 800dc4e:	0032      	movs	r2, r6
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	a974      	add	r1, sp, #464	@ 0x1d0
 800dc54:	9303      	str	r3, [sp, #12]
 800dc56:	9b07      	ldr	r3, [sp, #28]
 800dc58:	0040      	lsls	r0, r0, #1
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	9702      	str	r7, [sp, #8]
 800dc5e:	0023      	movs	r3, r4
 800dc60:	9501      	str	r5, [sp, #4]
 800dc62:	f7fd feb9 	bl	800b9d8 <pdf_chart_plot_data.constprop.0>
            pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800dc66:	4926      	ldr	r1, [pc, #152]	@ (800dd00 <pdf_gen_completed_report+0x1e28>)
 800dc68:	a81a      	add	r0, sp, #104	@ 0x68
 800dc6a:	1809      	adds	r1, r1, r0
 800dc6c:	20b3      	movs	r0, #179	@ 0xb3
 800dc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc70:	0032      	movs	r2, r6
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	9b07      	ldr	r3, [sp, #28]
 800dc76:	9703      	str	r7, [sp, #12]
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	0023      	movs	r3, r4
            buffer_count = 0;
 800dc7c:	2400      	movs	r4, #0
            pdf_chart_plot_data(file_p, *y_pos, tmp_dose, chunk_start_index, buffer_count, record_nums, 0.0f, 0.0f, 1.0f, RAD_MIN, rad_highest_scale_up);
 800dc7e:	9502      	str	r5, [sp, #8]
 800dc80:	9701      	str	r7, [sp, #4]
 800dc82:	0040      	lsls	r0, r0, #1
 800dc84:	f7fd fea8 	bl	800b9d8 <pdf_chart_plot_data.constprop.0>
            last_entry_of_chunk = entry; // Save the last point
 800dc88:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc8a:	223a      	movs	r2, #58	@ 0x3a
 800dc8c:	5e9b      	ldrsh	r3, [r3, r2]
            chunk_start_index += buffer_count;
 800dc8e:	36e1      	adds	r6, #225	@ 0xe1
            last_entry_of_chunk = entry; // Save the last point
 800dc90:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc92:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
            chunk_start_index += buffer_count;
 800dc94:	36ff      	adds	r6, #255	@ 0xff
            last_entry_of_chunk = entry; // Save the last point
 800dc96:	931e      	str	r3, [sp, #120]	@ 0x78
            chunk_start_index += buffer_count;
 800dc98:	b2b6      	uxth	r6, r6
    for (int i = 0; i < record_nums; i++) {
 800dc9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dca0:	e4a3      	b.n	800d5ea <pdf_gen_completed_report+0x1712>
        fatfs_write_string(&pdf_file, "0000000000 00000 n \n");
 800dca2:	4818      	ldr	r0, [pc, #96]	@ (800dd04 <pdf_gen_completed_report+0x1e2c>)
 800dca4:	9907      	ldr	r1, [sp, #28]
 800dca6:	f007 fca5 	bl	80155f4 <f_puts>
    for (unsigned i = 0; i < (unsigned)pdf_monitor.num_objs; i++) {
 800dcaa:	3601      	adds	r6, #1
 800dcac:	e64e      	b.n	800d94c <pdf_gen_completed_report+0x1a74>
 800dcae:	46c0      	nop			@ (mov r8, r8)
 800dcb0:	200001fc 	.word	0x200001fc
 800dcb4:	0801e1c1 	.word	0x0801e1c1
 800dcb8:	200002cc 	.word	0x200002cc
 800dcbc:	0801f924 	.word	0x0801f924
 800dcc0:	0801f93d 	.word	0x0801f93d
 800dcc4:	00015180 	.word	0x00015180
 800dcc8:	200030b4 	.word	0x200030b4
 800dccc:	0801f6c5 	.word	0x0801f6c5
 800dcd0:	0801f70c 	.word	0x0801f70c
 800dcd4:	0801f753 	.word	0x0801f753
 800dcd8:	0801f79a 	.word	0x0801f79a
 800dcdc:	0801f7df 	.word	0x0801f7df
 800dce0:	0801f824 	.word	0x0801f824
 800dce4:	20000200 	.word	0x20000200
 800dce8:	437a0000 	.word	0x437a0000
 800dcec:	42b00000 	.word	0x42b00000
 800dcf0:	43e10000 	.word	0x43e10000
 800dcf4:	42960000 	.word	0x42960000
 800dcf8:	41200000 	.word	0x41200000
 800dcfc:	42c80000 	.word	0x42c80000
 800dd00:	000008e8 	.word	0x000008e8
 800dd04:	0801f8d4 	.word	0x0801f8d4

0800dd08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800dd08:	480d      	ldr	r0, [pc, #52]	@ (800dd40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800dd0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800dd0c:	f7fc fba6 	bl	800a45c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dd10:	480c      	ldr	r0, [pc, #48]	@ (800dd44 <LoopForever+0x6>)
  ldr r1, =_edata
 800dd12:	490d      	ldr	r1, [pc, #52]	@ (800dd48 <LoopForever+0xa>)
  ldr r2, =_sidata
 800dd14:	4a0d      	ldr	r2, [pc, #52]	@ (800dd4c <LoopForever+0xe>)
  movs r3, #0
 800dd16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dd18:	e002      	b.n	800dd20 <LoopCopyDataInit>

0800dd1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dd1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dd1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dd1e:	3304      	adds	r3, #4

0800dd20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dd20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dd22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dd24:	d3f9      	bcc.n	800dd1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dd26:	4a0a      	ldr	r2, [pc, #40]	@ (800dd50 <LoopForever+0x12>)
  ldr r4, =_ebss
 800dd28:	4c0a      	ldr	r4, [pc, #40]	@ (800dd54 <LoopForever+0x16>)
  movs r3, #0
 800dd2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dd2c:	e001      	b.n	800dd32 <LoopFillZerobss>

0800dd2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dd2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dd30:	3204      	adds	r2, #4

0800dd32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dd32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dd34:	d3fb      	bcc.n	800dd2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800dd36:	f00c fa1b 	bl	801a170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dd3a:	f7f9 fb07 	bl	800734c <main>

0800dd3e <LoopForever>:

LoopForever:
  b LoopForever
 800dd3e:	e7fe      	b.n	800dd3e <LoopForever>
  ldr   r0, =_estack
 800dd40:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800dd44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dd48:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 800dd4c:	0802011c 	.word	0x0802011c
  ldr r2, =_sbss
 800dd50:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 800dd54:	20006820 	.word	0x20006820

0800dd58 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dd58:	e7fe      	b.n	800dd58 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>
	...

0800dd5c <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800dd5c:	4b10      	ldr	r3, [pc, #64]	@ (800dda0 <HAL_InitTick+0x44>)
{
 800dd5e:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 800dd60:	6819      	ldr	r1, [r3, #0]
{
 800dd62:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 800dd64:	2900      	cmp	r1, #0
 800dd66:	d101      	bne.n	800dd6c <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800dd68:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800dd6c:	20fa      	movs	r0, #250	@ 0xfa
 800dd6e:	0080      	lsls	r0, r0, #2
 800dd70:	f7f2 f9fa 	bl	8000168 <__udivsi3>
 800dd74:	4c0b      	ldr	r4, [pc, #44]	@ (800dda4 <HAL_InitTick+0x48>)
 800dd76:	0001      	movs	r1, r0
 800dd78:	6820      	ldr	r0, [r4, #0]
 800dd7a:	f7f2 f9f5 	bl	8000168 <__udivsi3>
 800dd7e:	f000 ff37 	bl	800ebf0 <HAL_SYSTICK_Config>
 800dd82:	1e04      	subs	r4, r0, #0
 800dd84:	d1f0      	bne.n	800dd68 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dd86:	2d03      	cmp	r5, #3
 800dd88:	d8ee      	bhi.n	800dd68 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dd8a:	0002      	movs	r2, r0
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	0029      	movs	r1, r5
 800dd90:	4240      	negs	r0, r0
 800dd92:	f000 fef7 	bl	800eb84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800dd96:	4b04      	ldr	r3, [pc, #16]	@ (800dda8 <HAL_InitTick+0x4c>)
 800dd98:	0020      	movs	r0, r4
 800dd9a:	601d      	str	r5, [r3, #0]
  return status;
 800dd9c:	e7e5      	b.n	800dd6a <HAL_InitTick+0xe>
 800dd9e:	46c0      	nop			@ (mov r8, r8)
 800dda0:	20000204 	.word	0x20000204
 800dda4:	20000050 	.word	0x20000050
 800dda8:	20000208 	.word	0x20000208

0800ddac <HAL_Init>:
{
 800ddac:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ddae:	2003      	movs	r0, #3
 800ddb0:	f7ff ffd4 	bl	800dd5c <HAL_InitTick>
 800ddb4:	1e04      	subs	r4, r0, #0
 800ddb6:	d103      	bne.n	800ddc0 <HAL_Init+0x14>
    HAL_MspInit();
 800ddb8:	f7fb ffbc 	bl	8009d34 <HAL_MspInit>
}
 800ddbc:	0020      	movs	r0, r4
 800ddbe:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800ddc0:	2401      	movs	r4, #1
 800ddc2:	e7fb      	b.n	800ddbc <HAL_Init+0x10>

0800ddc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800ddc4:	4a03      	ldr	r2, [pc, #12]	@ (800ddd4 <HAL_IncTick+0x10>)
 800ddc6:	4904      	ldr	r1, [pc, #16]	@ (800ddd8 <HAL_IncTick+0x14>)
 800ddc8:	6813      	ldr	r3, [r2, #0]
 800ddca:	6809      	ldr	r1, [r1, #0]
 800ddcc:	185b      	adds	r3, r3, r1
 800ddce:	6013      	str	r3, [r2, #0]
}
 800ddd0:	4770      	bx	lr
 800ddd2:	46c0      	nop			@ (mov r8, r8)
 800ddd4:	200030dc 	.word	0x200030dc
 800ddd8:	20000204 	.word	0x20000204

0800dddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800dddc:	4b01      	ldr	r3, [pc, #4]	@ (800dde4 <HAL_GetTick+0x8>)
 800ddde:	6818      	ldr	r0, [r3, #0]
}
 800dde0:	4770      	bx	lr
 800dde2:	46c0      	nop			@ (mov r8, r8)
 800dde4:	200030dc 	.word	0x200030dc

0800dde8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800dde8:	2102      	movs	r1, #2
 800ddea:	4a02      	ldr	r2, [pc, #8]	@ (800ddf4 <HAL_SuspendTick+0xc>)
 800ddec:	6813      	ldr	r3, [r2, #0]
 800ddee:	438b      	bics	r3, r1
 800ddf0:	6013      	str	r3, [r2, #0]
}
 800ddf2:	4770      	bx	lr
 800ddf4:	e000e010 	.word	0xe000e010

0800ddf8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	4a02      	ldr	r2, [pc, #8]	@ (800de04 <HAL_ResumeTick+0xc>)
 800ddfc:	6811      	ldr	r1, [r2, #0]
 800ddfe:	430b      	orrs	r3, r1
 800de00:	6013      	str	r3, [r2, #0]
}
 800de02:	4770      	bx	lr
 800de04:	e000e010 	.word	0xe000e010

0800de08 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800de08:	6880      	ldr	r0, [r0, #8]
 800de0a:	0740      	lsls	r0, r0, #29
 800de0c:	0fc0      	lsrs	r0, r0, #31
}
 800de0e:	4770      	bx	lr

0800de10 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800de10:	2300      	movs	r3, #0
{
 800de12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de14:	b085      	sub	sp, #20
 800de16:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800de18:	9303      	str	r3, [sp, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800de1a:	4298      	cmp	r0, r3
 800de1c:	d100      	bne.n	800de20 <HAL_ADC_Init+0x10>
 800de1e:	e0f0      	b.n	800e002 <HAL_ADC_Init+0x1f2>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800de20:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800de22:	429d      	cmp	r5, r3
 800de24:	d105      	bne.n	800de32 <HAL_ADC_Init+0x22>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800de26:	f7fb ffa3 	bl	8009d70 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800de2a:	0023      	movs	r3, r4
 800de2c:	3354      	adds	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800de2e:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800de30:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800de32:	2380      	movs	r3, #128	@ 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800de34:	6825      	ldr	r5, [r4, #0]
 800de36:	055b      	lsls	r3, r3, #21
 800de38:	68aa      	ldr	r2, [r5, #8]
 800de3a:	421a      	tst	r2, r3
 800de3c:	d100      	bne.n	800de40 <HAL_ADC_Init+0x30>
 800de3e:	e0a7      	b.n	800df90 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800de40:	2200      	movs	r2, #0
 800de42:	68ab      	ldr	r3, [r5, #8]
 800de44:	9201      	str	r2, [sp, #4]
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	d408      	bmi.n	800de5c <HAL_ADC_Init+0x4c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800de4a:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800de4c:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800de4e:	6da2      	ldr	r2, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800de50:	9601      	str	r6, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800de52:	4313      	orrs	r3, r2
 800de54:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800de56:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800de58:	4333      	orrs	r3, r6
 800de5a:	65e3      	str	r3, [r4, #92]	@ 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800de5c:	0028      	movs	r0, r5
 800de5e:	f7ff ffd3 	bl	800de08 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800de62:	2210      	movs	r2, #16
 800de64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de66:	4013      	ands	r3, r2
 800de68:	4303      	orrs	r3, r0
 800de6a:	d000      	beq.n	800de6e <HAL_ADC_Init+0x5e>
 800de6c:	e0cc      	b.n	800e008 <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800de6e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800de70:	4b67      	ldr	r3, [pc, #412]	@ (800e010 <HAL_ADC_Init+0x200>)
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800de72:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 800de74:	401a      	ands	r2, r3
 800de76:	3306      	adds	r3, #6
 800de78:	33ff      	adds	r3, #255	@ 0xff
 800de7a:	4313      	orrs	r3, r2
 800de7c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800de7e:	68ab      	ldr	r3, [r5, #8]
 800de80:	07db      	lsls	r3, r3, #31
 800de82:	d461      	bmi.n	800df48 <HAL_ADC_Init+0x138>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800de84:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800de86:	68e1      	ldr	r1, [r4, #12]
 800de88:	1e7b      	subs	r3, r7, #1
 800de8a:	419f      	sbcs	r7, r3
 800de8c:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800de8e:	7ea2      	ldrb	r2, [r4, #26]
 800de90:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800de92:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800de94:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800de96:	0389      	lsls	r1, r1, #14
 800de98:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800de9a:	7e61      	ldrb	r1, [r4, #25]
 800de9c:	03c9      	lsls	r1, r1, #15
 800de9e:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800dea0:	0351      	lsls	r1, r2, #13
 800dea2:	430b      	orrs	r3, r1
 800dea4:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800dea6:	2800      	cmp	r0, #0
 800dea8:	db00      	blt.n	800deac <HAL_ADC_Init+0x9c>
 800deaa:	e086      	b.n	800dfba <HAL_ADC_Init+0x1aa>
 800deac:	0041      	lsls	r1, r0, #1
 800deae:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800deb0:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800deb2:	4666      	mov	r6, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800deb4:	332c      	adds	r3, #44	@ 0x2c
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800deba:	4333      	orrs	r3, r6
 800debc:	433b      	orrs	r3, r7
 800debe:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800dec0:	1c61      	adds	r1, r4, #1
 800dec2:	7fc9      	ldrb	r1, [r1, #31]
 800dec4:	2901      	cmp	r1, #1
 800dec6:	d105      	bne.n	800ded4 <HAL_ADC_Init+0xc4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800dec8:	2a00      	cmp	r2, #0
 800deca:	d000      	beq.n	800dece <HAL_ADC_Init+0xbe>
 800decc:	e078      	b.n	800dfc0 <HAL_ADC_Init+0x1b0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800dece:	2280      	movs	r2, #128	@ 0x80
 800ded0:	0252      	lsls	r2, r2, #9
 800ded2:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ded4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ded6:	2a00      	cmp	r2, #0
 800ded8:	d005      	beq.n	800dee6 <HAL_ADC_Init+0xd6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800deda:	21e0      	movs	r1, #224	@ 0xe0
 800dedc:	0049      	lsls	r1, r1, #1
 800dede:	400a      	ands	r2, r1
 800dee0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800dee2:	430a      	orrs	r2, r1
 800dee4:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800dee6:	68ea      	ldr	r2, [r5, #12]
 800dee8:	494a      	ldr	r1, [pc, #296]	@ (800e014 <HAL_ADC_Init+0x204>)
 800deea:	400a      	ands	r2, r1
 800deec:	4313      	orrs	r3, r2
 800deee:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800def0:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800def2:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 800def4:	333c      	adds	r3, #60	@ 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800def6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800def8:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800defa:	0f97      	lsrs	r7, r2, #30
 800defc:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 800defe:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800df00:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 800df02:	2b01      	cmp	r3, #1
 800df04:	d108      	bne.n	800df18 <HAL_ADC_Init+0x108>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800df06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df08:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800df0a:	4333      	orrs	r3, r6
 800df0c:	430b      	orrs	r3, r1
 800df0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800df10:	430b      	orrs	r3, r1
 800df12:	4661      	mov	r1, ip
 800df14:	433b      	orrs	r3, r7
 800df16:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800df18:	692b      	ldr	r3, [r5, #16]
 800df1a:	4f3f      	ldr	r7, [pc, #252]	@ (800e018 <HAL_ADC_Init+0x208>)
 800df1c:	403b      	ands	r3, r7
 800df1e:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800df20:	2180      	movs	r1, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 800df22:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800df24:	0053      	lsls	r3, r2, #1
 800df26:	085b      	lsrs	r3, r3, #1
 800df28:	05c9      	lsls	r1, r1, #23
 800df2a:	428b      	cmp	r3, r1
 800df2c:	d00c      	beq.n	800df48 <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800df2e:	2380      	movs	r3, #128	@ 0x80
 800df30:	061b      	lsls	r3, r3, #24
 800df32:	429a      	cmp	r2, r3
 800df34:	d008      	beq.n	800df48 <HAL_ADC_Init+0x138>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800df36:	4939      	ldr	r1, [pc, #228]	@ (800e01c <HAL_ADC_Init+0x20c>)
 800df38:	4f39      	ldr	r7, [pc, #228]	@ (800e020 <HAL_ADC_Init+0x210>)
 800df3a:	680b      	ldr	r3, [r1, #0]
 800df3c:	403b      	ands	r3, r7
 800df3e:	27f0      	movs	r7, #240	@ 0xf0
 800df40:	03bf      	lsls	r7, r7, #14
 800df42:	403a      	ands	r2, r7
 800df44:	4313      	orrs	r3, r2
 800df46:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 800df48:	2107      	movs	r1, #7
 800df4a:	2770      	movs	r7, #112	@ 0x70
 800df4c:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800df4e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800df50:	438b      	bics	r3, r1
 800df52:	4313      	orrs	r3, r2
 800df54:	616b      	str	r3, [r5, #20]
 800df56:	6969      	ldr	r1, [r5, #20]
 800df58:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800df5a:	43b9      	bics	r1, r7
 800df5c:	011b      	lsls	r3, r3, #4
 800df5e:	430b      	orrs	r3, r1
 800df60:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800df62:	2800      	cmp	r0, #0
 800df64:	d134      	bne.n	800dfd0 <HAL_ADC_Init+0x1c0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800df66:	2310      	movs	r3, #16
 800df68:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800df6a:	425b      	negs	r3, r3
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800df6c:	430b      	orrs	r3, r1
 800df6e:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800df70:	2107      	movs	r1, #7
 800df72:	696b      	ldr	r3, [r5, #20]
 800df74:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800df76:	429a      	cmp	r2, r3
 800df78:	d139      	bne.n	800dfee <HAL_ADC_Init+0x1de>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800df7a:	2300      	movs	r3, #0
 800df7c:	65e3      	str	r3, [r4, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800df7e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800df80:	3303      	adds	r3, #3
 800df82:	439a      	bics	r2, r3
 800df84:	3b02      	subs	r3, #2
 800df86:	4313      	orrs	r3, r2
 800df88:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 800df8a:	9801      	ldr	r0, [sp, #4]
 800df8c:	b005      	add	sp, #20
 800df8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 800df90:	68aa      	ldr	r2, [r5, #8]
 800df92:	4924      	ldr	r1, [pc, #144]	@ (800e024 <HAL_ADC_Init+0x214>)
 800df94:	400a      	ands	r2, r1
 800df96:	4313      	orrs	r3, r2
 800df98:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800df9a:	4b23      	ldr	r3, [pc, #140]	@ (800e028 <HAL_ADC_Init+0x218>)
 800df9c:	4923      	ldr	r1, [pc, #140]	@ (800e02c <HAL_ADC_Init+0x21c>)
 800df9e:	6818      	ldr	r0, [r3, #0]
 800dfa0:	f7f2 f8e2 	bl	8000168 <__udivsi3>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	0040      	lsls	r0, r0, #1
 800dfa8:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 800dfaa:	9b03      	ldr	r3, [sp, #12]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d100      	bne.n	800dfb2 <HAL_ADC_Init+0x1a2>
 800dfb0:	e746      	b.n	800de40 <HAL_ADC_Init+0x30>
      wait_loop_index--;
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	9303      	str	r3, [sp, #12]
 800dfb8:	e7f7      	b.n	800dfaa <HAL_ADC_Init+0x19a>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800dfba:	2180      	movs	r1, #128	@ 0x80
 800dfbc:	0389      	lsls	r1, r1, #14
 800dfbe:	e777      	b.n	800deb0 <HAL_ADC_Init+0xa0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800dfc0:	2220      	movs	r2, #32
 800dfc2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800dfc4:	433a      	orrs	r2, r7
 800dfc6:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dfc8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800dfca:	4311      	orrs	r1, r2
 800dfcc:	65e1      	str	r1, [r4, #92]	@ 0x5c
 800dfce:	e781      	b.n	800ded4 <HAL_ADC_Init+0xc4>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800dfd0:	2380      	movs	r3, #128	@ 0x80
 800dfd2:	039b      	lsls	r3, r3, #14
 800dfd4:	4298      	cmp	r0, r3
 800dfd6:	d1cb      	bne.n	800df70 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 800dfd8:	211c      	movs	r1, #28
 800dfda:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800dfdc:	69e3      	ldr	r3, [r4, #28]
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	400b      	ands	r3, r1
 800dfe4:	392c      	subs	r1, #44	@ 0x2c
 800dfe6:	4099      	lsls	r1, r3
 800dfe8:	000b      	movs	r3, r1
 800dfea:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800dfec:	e7be      	b.n	800df6c <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 800dfee:	2312      	movs	r3, #18
 800dff0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800dff2:	439a      	bics	r2, r3
 800dff4:	3b02      	subs	r3, #2
 800dff6:	4313      	orrs	r3, r2
 800dff8:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dffa:	2301      	movs	r3, #1
 800dffc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800dffe:	4313      	orrs	r3, r2
 800e000:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	e7c0      	b.n	800df8a <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e008:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e00a:	431a      	orrs	r2, r3
 800e00c:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e00e:	e7f8      	b.n	800e002 <HAL_ADC_Init+0x1f2>
 800e010:	fffffefd 	.word	0xfffffefd
 800e014:	ffde0201 	.word	0xffde0201
 800e018:	1ffffc02 	.word	0x1ffffc02
 800e01c:	40012708 	.word	0x40012708
 800e020:	ffc3ffff 	.word	0xffc3ffff
 800e024:	6fffffe8 	.word	0x6fffffe8
 800e028:	20000050 	.word	0x20000050
 800e02c:	00030d40 	.word	0x00030d40

0800e030 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e032:	6946      	ldr	r6, [r0, #20]
{
 800e034:	0004      	movs	r4, r0
 800e036:	000f      	movs	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e038:	2e08      	cmp	r6, #8
 800e03a:	d00a      	beq.n	800e052 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e03c:	6803      	ldr	r3, [r0, #0]
 800e03e:	2001      	movs	r0, #1
 800e040:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800e042:	2604      	movs	r6, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e044:	4203      	tst	r3, r0
 800e046:	d004      	beq.n	800e052 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e048:	2320      	movs	r3, #32
 800e04a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e04c:	4313      	orrs	r3, r2
 800e04e:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 800e050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800e052:	f7ff fec3 	bl	800dddc <HAL_GetTick>
 800e056:	9001      	str	r0, [sp, #4]
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e058:	6825      	ldr	r5, [r4, #0]
 800e05a:	682b      	ldr	r3, [r5, #0]
 800e05c:	421e      	tst	r6, r3
 800e05e:	d024      	beq.n	800e0aa <HAL_ADC_PollForConversion+0x7a>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e060:	2380      	movs	r3, #128	@ 0x80
 800e062:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4313      	orrs	r3, r2
 800e068:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800e06a:	23c0      	movs	r3, #192	@ 0xc0
 800e06c:	68ea      	ldr	r2, [r5, #12]
 800e06e:	011b      	lsls	r3, r3, #4
 800e070:	421a      	tst	r2, r3
 800e072:	d115      	bne.n	800e0a0 <HAL_ADC_PollForConversion+0x70>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800e074:	7ea3      	ldrb	r3, [r4, #26]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d112      	bne.n	800e0a0 <HAL_ADC_PollForConversion+0x70>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e07a:	682b      	ldr	r3, [r5, #0]
 800e07c:	071b      	lsls	r3, r3, #28
 800e07e:	d50f      	bpl.n	800e0a0 <HAL_ADC_PollForConversion+0x70>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e080:	0028      	movs	r0, r5
 800e082:	f7ff fec1 	bl	800de08 <LL_ADC_REG_IsConversionOngoing>
 800e086:	2800      	cmp	r0, #0
 800e088:	d127      	bne.n	800e0da <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e08a:	220c      	movs	r2, #12
 800e08c:	686b      	ldr	r3, [r5, #4]
 800e08e:	4393      	bics	r3, r2
 800e090:	606b      	str	r3, [r5, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800e092:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e094:	4b17      	ldr	r3, [pc, #92]	@ (800e0f4 <HAL_ADC_PollForConversion+0xc4>)
 800e096:	401a      	ands	r2, r3
 800e098:	3304      	adds	r3, #4
 800e09a:	33ff      	adds	r3, #255	@ 0xff
 800e09c:	4313      	orrs	r3, r2
 800e09e:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e0a0:	7e23      	ldrb	r3, [r4, #24]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d022      	beq.n	800e0ec <HAL_ADC_PollForConversion+0xbc>
  return HAL_OK;
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e7d2      	b.n	800e050 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 800e0aa:	1c7b      	adds	r3, r7, #1
 800e0ac:	d0d5      	beq.n	800e05a <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800e0ae:	f7ff fe95 	bl	800dddc <HAL_GetTick>
 800e0b2:	9b01      	ldr	r3, [sp, #4]
 800e0b4:	1ac0      	subs	r0, r0, r3
 800e0b6:	42b8      	cmp	r0, r7
 800e0b8:	d801      	bhi.n	800e0be <HAL_ADC_PollForConversion+0x8e>
 800e0ba:	2f00      	cmp	r7, #0
 800e0bc:	d1cc      	bne.n	800e058 <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e0be:	0032      	movs	r2, r6
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	401a      	ands	r2, r3
 800e0c6:	421e      	tst	r6, r3
 800e0c8:	d1c6      	bne.n	800e058 <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e0ca:	2304      	movs	r3, #4
 800e0cc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800e0ce:	3454      	adds	r4, #84	@ 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e0d0:	430b      	orrs	r3, r1
 800e0d2:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 800e0d4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800e0d6:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800e0d8:	e7ba      	b.n	800e050 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e0da:	2320      	movs	r3, #32
 800e0dc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e0ea:	e7d9      	b.n	800e0a0 <HAL_ADC_PollForConversion+0x70>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e0ec:	230c      	movs	r3, #12
 800e0ee:	602b      	str	r3, [r5, #0]
 800e0f0:	e7d9      	b.n	800e0a6 <HAL_ADC_PollForConversion+0x76>
 800e0f2:	46c0      	nop			@ (mov r8, r8)
 800e0f4:	fffffefe 	.word	0xfffffefe

0800e0f8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e0f8:	6803      	ldr	r3, [r0, #0]
 800e0fa:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800e0fc:	4770      	bx	lr

0800e0fe <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 800e0fe:	4770      	bx	lr

0800e100 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 800e100:	4770      	bx	lr

0800e102 <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800e102:	4770      	bx	lr

0800e104 <HAL_ADC_CalibrationCpltCallback>:
/**
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
 800e104:	4770      	bx	lr

0800e106 <HAL_ADC_ADCReadyCallback>:
/**
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
 800e106:	4770      	bx	lr

0800e108 <HAL_ADC_IRQHandler>:
{
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800e10a:	6803      	ldr	r3, [r0, #0]
{
 800e10c:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800e10e:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800e110:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800e112:	2302      	movs	r3, #2
 800e114:	421e      	tst	r6, r3
 800e116:	d00f      	beq.n	800e138 <HAL_ADC_IRQHandler+0x30>
 800e118:	421d      	tst	r5, r3
 800e11a:	d00d      	beq.n	800e138 <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e11c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800e11e:	06db      	lsls	r3, r3, #27
 800e120:	d404      	bmi.n	800e12c <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800e122:	2380      	movs	r3, #128	@ 0x80
 800e124:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800e126:	011b      	lsls	r3, r3, #4
 800e128:	4313      	orrs	r3, r2
 800e12a:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800e12c:	0020      	movs	r0, r4
 800e12e:	f000 fbe7 	bl	800e900 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800e132:	2202      	movs	r2, #2
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800e138:	2304      	movs	r3, #4
 800e13a:	421e      	tst	r6, r3
 800e13c:	d001      	beq.n	800e142 <HAL_ADC_IRQHandler+0x3a>
 800e13e:	421d      	tst	r5, r3
 800e140:	d104      	bne.n	800e14c <HAL_ADC_IRQHandler+0x44>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800e142:	2308      	movs	r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800e144:	421e      	tst	r6, r3
 800e146:	d02c      	beq.n	800e1a2 <HAL_ADC_IRQHandler+0x9a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800e148:	421d      	tst	r5, r3
 800e14a:	d02a      	beq.n	800e1a2 <HAL_ADC_IRQHandler+0x9a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e14c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e14e:	06db      	lsls	r3, r3, #27
 800e150:	d404      	bmi.n	800e15c <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e152:	2380      	movs	r3, #128	@ 0x80
 800e154:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	4313      	orrs	r3, r2
 800e15a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e15c:	23c0      	movs	r3, #192	@ 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800e15e:	6827      	ldr	r7, [r4, #0]
 800e160:	011b      	lsls	r3, r3, #4
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	421a      	tst	r2, r3
 800e166:	d116      	bne.n	800e196 <HAL_ADC_IRQHandler+0x8e>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800e168:	7ea3      	ldrb	r3, [r4, #26]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d113      	bne.n	800e196 <HAL_ADC_IRQHandler+0x8e>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	071b      	lsls	r3, r3, #28
 800e172:	d510      	bpl.n	800e196 <HAL_ADC_IRQHandler+0x8e>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e174:	0038      	movs	r0, r7
 800e176:	f7ff fe47 	bl	800de08 <LL_ADC_REG_IsConversionOngoing>
 800e17a:	2800      	cmp	r0, #0
 800e17c:	d000      	beq.n	800e180 <HAL_ADC_IRQHandler+0x78>
 800e17e:	e084      	b.n	800e28a <HAL_ADC_IRQHandler+0x182>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e180:	220c      	movs	r2, #12
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4393      	bics	r3, r2
 800e186:	607b      	str	r3, [r7, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800e188:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e18a:	4b44      	ldr	r3, [pc, #272]	@ (800e29c <HAL_ADC_IRQHandler+0x194>)
 800e18c:	401a      	ands	r2, r3
 800e18e:	3304      	adds	r3, #4
 800e190:	33ff      	adds	r3, #255	@ 0xff
 800e192:	4313      	orrs	r3, r2
 800e194:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800e196:	0020      	movs	r0, r4
 800e198:	f7ff ffb1 	bl	800e0fe <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e19c:	220c      	movs	r2, #12
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800e1a2:	2780      	movs	r7, #128	@ 0x80
 800e1a4:	423e      	tst	r6, r7
 800e1a6:	d00b      	beq.n	800e1c0 <HAL_ADC_IRQHandler+0xb8>
 800e1a8:	423d      	tst	r5, r7
 800e1aa:	d009      	beq.n	800e1c0 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800e1ac:	2380      	movs	r3, #128	@ 0x80
 800e1ae:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e1b0:	025b      	lsls	r3, r3, #9
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800e1b6:	0020      	movs	r0, r4
 800e1b8:	f7ff ffa2 	bl	800e100 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800e1c0:	2780      	movs	r7, #128	@ 0x80
 800e1c2:	007f      	lsls	r7, r7, #1
 800e1c4:	423e      	tst	r6, r7
 800e1c6:	d00b      	beq.n	800e1e0 <HAL_ADC_IRQHandler+0xd8>
 800e1c8:	423d      	tst	r5, r7
 800e1ca:	d009      	beq.n	800e1e0 <HAL_ADC_IRQHandler+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800e1cc:	2380      	movs	r3, #128	@ 0x80
 800e1ce:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e1d0:	029b      	lsls	r3, r3, #10
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800e1d6:	0020      	movs	r0, r4
 800e1d8:	f000 fb90 	bl	800e8fc <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800e1e0:	2780      	movs	r7, #128	@ 0x80
 800e1e2:	00bf      	lsls	r7, r7, #2
 800e1e4:	423e      	tst	r6, r7
 800e1e6:	d00b      	beq.n	800e200 <HAL_ADC_IRQHandler+0xf8>
 800e1e8:	423d      	tst	r5, r7
 800e1ea:	d009      	beq.n	800e200 <HAL_ADC_IRQHandler+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800e1ec:	2380      	movs	r3, #128	@ 0x80
 800e1ee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e1f0:	02db      	lsls	r3, r3, #11
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800e1f6:	0020      	movs	r0, r4
 800e1f8:	f000 fb81 	bl	800e8fe <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800e200:	2310      	movs	r3, #16
 800e202:	421e      	tst	r6, r3
 800e204:	d017      	beq.n	800e236 <HAL_ADC_IRQHandler+0x12e>
 800e206:	421d      	tst	r5, r3
 800e208:	d015      	beq.n	800e236 <HAL_ADC_IRQHandler+0x12e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800e20a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d003      	beq.n	800e218 <HAL_ADC_IRQHandler+0x110>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800e210:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	079b      	lsls	r3, r3, #30
 800e216:	d00b      	beq.n	800e230 <HAL_ADC_IRQHandler+0x128>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800e218:	2380      	movs	r3, #128	@ 0x80
 800e21a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e21c:	00db      	lsls	r3, r3, #3
 800e21e:	4313      	orrs	r3, r2
 800e220:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e222:	2302      	movs	r3, #2
 800e224:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800e226:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e228:	4313      	orrs	r3, r2
 800e22a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800e22c:	f7ff ff69 	bl	800e102 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e230:	2210      	movs	r2, #16
 800e232:	6823      	ldr	r3, [r4, #0]
 800e234:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800e236:	2301      	movs	r3, #1
 800e238:	421e      	tst	r6, r3
 800e23a:	d00f      	beq.n	800e25c <HAL_ADC_IRQHandler+0x154>
 800e23c:	421d      	tst	r5, r3
 800e23e:	d00d      	beq.n	800e25c <HAL_ADC_IRQHandler+0x154>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e240:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e242:	06d2      	lsls	r2, r2, #27
 800e244:	d402      	bmi.n	800e24c <HAL_ADC_IRQHandler+0x144>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e246:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e248:	4313      	orrs	r3, r2
 800e24a:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ADCReadyCallback(hadc);
 800e24c:	0020      	movs	r0, r4
 800e24e:	f7ff ff5a 	bl	800e106 <HAL_ADC_ADCReadyCallback>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800e252:	2101      	movs	r1, #1
 800e254:	6822      	ldr	r2, [r4, #0]
 800e256:	6853      	ldr	r3, [r2, #4]
 800e258:	438b      	bics	r3, r1
 800e25a:	6053      	str	r3, [r2, #4]
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 800e25c:	2780      	movs	r7, #128	@ 0x80
 800e25e:	013f      	lsls	r7, r7, #4
 800e260:	423e      	tst	r6, r7
 800e262:	d006      	beq.n	800e272 <HAL_ADC_IRQHandler+0x16a>
 800e264:	423d      	tst	r5, r7
 800e266:	d004      	beq.n	800e272 <HAL_ADC_IRQHandler+0x16a>
    HAL_ADC_CalibrationCpltCallback(hadc);
 800e268:	0020      	movs	r0, r4
 800e26a:	f7ff ff4b 	bl	800e104 <HAL_ADC_CalibrationCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800e272:	2780      	movs	r7, #128	@ 0x80
 800e274:	01bf      	lsls	r7, r7, #6
 800e276:	423e      	tst	r6, r7
 800e278:	d006      	beq.n	800e288 <HAL_ADC_IRQHandler+0x180>
 800e27a:	423d      	tst	r5, r7
 800e27c:	d004      	beq.n	800e288 <HAL_ADC_IRQHandler+0x180>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800e27e:	0020      	movs	r0, r4
 800e280:	f000 fb3f 	bl	800e902 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	601f      	str	r7, [r3, #0]
}
 800e288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e28a:	2320      	movs	r3, #32
 800e28c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e28e:	4313      	orrs	r3, r2
 800e290:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e292:	2301      	movs	r3, #1
 800e294:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e296:	4313      	orrs	r3, r2
 800e298:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800e29a:	e77c      	b.n	800e196 <HAL_ADC_IRQHandler+0x8e>
 800e29c:	fffffefe 	.word	0xfffffefe

0800e2a0 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800e2a0:	2300      	movs	r3, #0
{
 800e2a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a4:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 800e2a6:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800e2a8:	0003      	movs	r3, r0
{
 800e2aa:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hadc);
 800e2ac:	3354      	adds	r3, #84	@ 0x54
 800e2ae:	781a      	ldrb	r2, [r3, #0]
{
 800e2b0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800e2b2:	2002      	movs	r0, #2
 800e2b4:	2a01      	cmp	r2, #1
 800e2b6:	d04b      	beq.n	800e350 <HAL_ADC_ConfigChannel+0xb0>
 800e2b8:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e2ba:	692f      	ldr	r7, [r5, #16]
  __HAL_LOCK(hadc);
 800e2bc:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e2be:	682e      	ldr	r6, [r5, #0]
 800e2c0:	0030      	movs	r0, r6
 800e2c2:	f7ff fda1 	bl	800de08 <LL_ADC_REG_IsConversionOngoing>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d000      	beq.n	800e2cc <HAL_ADC_ConfigChannel+0x2c>
 800e2ca:	e0b6      	b.n	800e43a <HAL_ADC_ConfigChannel+0x19a>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800e2cc:	9b01      	ldr	r3, [sp, #4]
 800e2ce:	2280      	movs	r2, #128	@ 0x80
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	0612      	lsls	r2, r2, #24
 800e2d4:	9300      	str	r3, [sp, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800e2d6:	9b01      	ldr	r3, [sp, #4]
 800e2d8:	681c      	ldr	r4, [r3, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e2da:	2304      	movs	r3, #4
 800e2dc:	439f      	bics	r7, r3
    if (pConfig->Rank != ADC_RANK_NONE)
 800e2de:	9b00      	ldr	r3, [sp, #0]
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d100      	bne.n	800e2e6 <HAL_ADC_ConfigChannel+0x46>
 800e2e4:	e081      	b.n	800e3ea <HAL_ADC_ConfigChannel+0x14a>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e2e6:	0263      	lsls	r3, r4, #9
 800e2e8:	0a5b      	lsrs	r3, r3, #9
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e2ea:	4297      	cmp	r7, r2
 800e2ec:	d132      	bne.n	800e354 <HAL_ADC_ConfigChannel+0xb4>
 800e2ee:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->CHSELR,
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	62b3      	str	r3, [r6, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800e2f4:	9b01      	ldr	r3, [sp, #4]
 800e2f6:	6971      	ldr	r1, [r6, #20]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	0222      	lsls	r2, r4, #8
 800e2fc:	4852      	ldr	r0, [pc, #328]	@ (800e448 <HAL_ADC_ConfigChannel+0x1a8>)
 800e2fe:	4013      	ands	r3, r2
 800e300:	4003      	ands	r3, r0
 800e302:	4391      	bics	r1, r2
 800e304:	430b      	orrs	r3, r1
 800e306:	6173      	str	r3, [r6, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e308:	2c00      	cmp	r4, #0
 800e30a:	da1d      	bge.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e30c:	21e0      	movs	r1, #224	@ 0xe0
 800e30e:	4b4f      	ldr	r3, [pc, #316]	@ (800e44c <HAL_ADC_ConfigChannel+0x1ac>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e310:	484f      	ldr	r0, [pc, #316]	@ (800e450 <HAL_ADC_ConfigChannel+0x1b0>)
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	0449      	lsls	r1, r1, #17
 800e316:	4011      	ands	r1, r2
 800e318:	4284      	cmp	r4, r0
 800e31a:	d152      	bne.n	800e3c2 <HAL_ADC_ConfigChannel+0x122>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e31c:	2080      	movs	r0, #128	@ 0x80
 800e31e:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e320:	4202      	tst	r2, r0
 800e322:	d111      	bne.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	4c4b      	ldr	r4, [pc, #300]	@ (800e454 <HAL_ADC_ConfigChannel+0x1b4>)
 800e328:	4022      	ands	r2, r4
 800e32a:	430a      	orrs	r2, r1
 800e32c:	4310      	orrs	r0, r2
 800e32e:	6018      	str	r0, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e330:	4b49      	ldr	r3, [pc, #292]	@ (800e458 <HAL_ADC_ConfigChannel+0x1b8>)
 800e332:	494a      	ldr	r1, [pc, #296]	@ (800e45c <HAL_ADC_ConfigChannel+0x1bc>)
 800e334:	6818      	ldr	r0, [r3, #0]
 800e336:	f7f1 ff17 	bl	8000168 <__udivsi3>
 800e33a:	1c43      	adds	r3, r0, #1
 800e33c:	200c      	movs	r0, #12
 800e33e:	4358      	muls	r0, r3
 800e340:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 800e342:	9b05      	ldr	r3, [sp, #20]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d138      	bne.n	800e3ba <HAL_ADC_ConfigChannel+0x11a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e348:	2000      	movs	r0, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800e34a:	2300      	movs	r3, #0
 800e34c:	3554      	adds	r5, #84	@ 0x54
 800e34e:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 800e350:	b007      	add	sp, #28
 800e352:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800e354:	221f      	movs	r2, #31
 800e356:	210f      	movs	r1, #15
 800e358:	9f00      	ldr	r7, [sp, #0]
 800e35a:	4017      	ands	r7, r2
 800e35c:	40b9      	lsls	r1, r7
 800e35e:	43c8      	mvns	r0, r1
 800e360:	9002      	str	r0, [sp, #8]
 800e362:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 800e364:	4388      	bics	r0, r1
 800e366:	9003      	str	r0, [sp, #12]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d112      	bne.n	800e392 <HAL_ADC_ConfigChannel+0xf2>
 800e36c:	0ea3      	lsrs	r3, r4, #26
 800e36e:	4013      	ands	r3, r2
 800e370:	40bb      	lsls	r3, r7
 800e372:	9a03      	ldr	r2, [sp, #12]
 800e374:	4313      	orrs	r3, r2
 800e376:	662b      	str	r3, [r5, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800e378:	9b00      	ldr	r3, [sp, #0]
 800e37a:	69ea      	ldr	r2, [r5, #28]
 800e37c:	089b      	lsrs	r3, r3, #2
 800e37e:	3301      	adds	r3, #1
 800e380:	4293      	cmp	r3, r2
 800e382:	d8b7      	bhi.n	800e2f4 <HAL_ADC_ConfigChannel+0x54>
  MODIFY_REG(ADCx->CHSELR,
 800e384:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800e386:	9902      	ldr	r1, [sp, #8]
 800e388:	00a3      	lsls	r3, r4, #2
 800e38a:	0f1b      	lsrs	r3, r3, #28
 800e38c:	40bb      	lsls	r3, r7
 800e38e:	400a      	ands	r2, r1
 800e390:	e7ae      	b.n	800e2f0 <HAL_ADC_ConfigChannel+0x50>
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800e392:	0020      	movs	r0, r4
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800e394:	0013      	movs	r3, r2
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e396:	0861      	lsrs	r1, r4, #1
 800e398:	2900      	cmp	r1, #0
 800e39a:	d107      	bne.n	800e3ac <HAL_ADC_ConfigChannel+0x10c>
  result <<= s;                        /* shift when v's highest bits are zero */
 800e39c:	4098      	lsls	r0, r3
    return 32U;
 800e39e:	2320      	movs	r3, #32
  if (value == 0U)
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d0e5      	beq.n	800e370 <HAL_ADC_ConfigChannel+0xd0>
  return __builtin_clz(value);
 800e3a4:	f7f2 f8ce 	bl	8000544 <__clzsi2>
 800e3a8:	b2c3      	uxtb	r3, r0
 800e3aa:	e7e1      	b.n	800e370 <HAL_ADC_ConfigChannel+0xd0>
    result |= value & 1U;
 800e3ac:	2201      	movs	r2, #1
    result <<= 1U;
 800e3ae:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 800e3b0:	400a      	ands	r2, r1
 800e3b2:	4310      	orrs	r0, r2
    s--;
 800e3b4:	3b01      	subs	r3, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e3b6:	0849      	lsrs	r1, r1, #1
 800e3b8:	e7ee      	b.n	800e398 <HAL_ADC_ConfigChannel+0xf8>
            wait_loop_index--;
 800e3ba:	9b05      	ldr	r3, [sp, #20]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	9305      	str	r3, [sp, #20]
 800e3c0:	e7bf      	b.n	800e342 <HAL_ADC_ConfigChannel+0xa2>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800e3c2:	4827      	ldr	r0, [pc, #156]	@ (800e460 <HAL_ADC_ConfigChannel+0x1c0>)
 800e3c4:	4284      	cmp	r4, r0
 800e3c6:	d10a      	bne.n	800e3de <HAL_ADC_ConfigChannel+0x13e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e3c8:	2080      	movs	r0, #128	@ 0x80
 800e3ca:	0440      	lsls	r0, r0, #17
 800e3cc:	4202      	tst	r2, r0
 800e3ce:	d1bb      	bne.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	4c20      	ldr	r4, [pc, #128]	@ (800e454 <HAL_ADC_ConfigChannel+0x1b4>)
 800e3d4:	4022      	ands	r2, r4
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	4310      	orrs	r0, r2
 800e3da:	6018      	str	r0, [r3, #0]
}
 800e3dc:	e7b4      	b.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800e3de:	4821      	ldr	r0, [pc, #132]	@ (800e464 <HAL_ADC_ConfigChannel+0x1c4>)
 800e3e0:	4284      	cmp	r4, r0
 800e3e2:	d1b1      	bne.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800e3e4:	2080      	movs	r0, #128	@ 0x80
 800e3e6:	03c0      	lsls	r0, r0, #15
 800e3e8:	e7f0      	b.n	800e3cc <HAL_ADC_ConfigChannel+0x12c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e3ea:	4297      	cmp	r7, r2
 800e3ec:	d104      	bne.n	800e3f8 <HAL_ADC_ConfigChannel+0x158>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e3ee:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800e3f0:	0262      	lsls	r2, r4, #9
 800e3f2:	0a52      	lsrs	r2, r2, #9
 800e3f4:	4393      	bics	r3, r2
 800e3f6:	62b3      	str	r3, [r6, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	daa5      	bge.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e3fc:	4b13      	ldr	r3, [pc, #76]	@ (800e44c <HAL_ADC_ConfigChannel+0x1ac>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e3fe:	4914      	ldr	r1, [pc, #80]	@ (800e450 <HAL_ADC_ConfigChannel+0x1b0>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	428c      	cmp	r4, r1
 800e404:	d108      	bne.n	800e418 <HAL_ADC_ConfigChannel+0x178>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e406:	21a0      	movs	r1, #160	@ 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e408:	6818      	ldr	r0, [r3, #0]
 800e40a:	0449      	lsls	r1, r1, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e40c:	400a      	ands	r2, r1
 800e40e:	4911      	ldr	r1, [pc, #68]	@ (800e454 <HAL_ADC_ConfigChannel+0x1b4>)
 800e410:	4001      	ands	r1, r0
 800e412:	430a      	orrs	r2, r1
 800e414:	601a      	str	r2, [r3, #0]
}
 800e416:	e797      	b.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800e418:	4911      	ldr	r1, [pc, #68]	@ (800e460 <HAL_ADC_ConfigChannel+0x1c0>)
 800e41a:	428c      	cmp	r4, r1
 800e41c:	d103      	bne.n	800e426 <HAL_ADC_ConfigChannel+0x186>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e41e:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e420:	6818      	ldr	r0, [r3, #0]
 800e422:	0409      	lsls	r1, r1, #16
 800e424:	e7f2      	b.n	800e40c <HAL_ADC_ConfigChannel+0x16c>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800e426:	490f      	ldr	r1, [pc, #60]	@ (800e464 <HAL_ADC_ConfigChannel+0x1c4>)
 800e428:	428c      	cmp	r4, r1
 800e42a:	d000      	beq.n	800e42e <HAL_ADC_ConfigChannel+0x18e>
 800e42c:	e78c      	b.n	800e348 <HAL_ADC_ConfigChannel+0xa8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e42e:	20c0      	movs	r0, #192	@ 0xc0
 800e430:	0440      	lsls	r0, r0, #17
 800e432:	4002      	ands	r2, r0
 800e434:	6819      	ldr	r1, [r3, #0]
 800e436:	4807      	ldr	r0, [pc, #28]	@ (800e454 <HAL_ADC_ConfigChannel+0x1b4>)
 800e438:	e7ea      	b.n	800e410 <HAL_ADC_ConfigChannel+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e43a:	2320      	movs	r3, #32
 800e43c:	6daa      	ldr	r2, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e43e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e440:	4313      	orrs	r3, r2
 800e442:	65ab      	str	r3, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800e444:	e781      	b.n	800e34a <HAL_ADC_ConfigChannel+0xaa>
 800e446:	46c0      	nop			@ (mov r8, r8)
 800e448:	7fffff00 	.word	0x7fffff00
 800e44c:	40012708 	.word	0x40012708
 800e450:	ac000800 	.word	0xac000800
 800e454:	fe3fffff 	.word	0xfe3fffff
 800e458:	20000050 	.word	0x20000050
 800e45c:	00030d40 	.word	0x00030d40
 800e460:	b4002000 	.word	0xb4002000
 800e464:	b0001000 	.word	0xb0001000

0800e468 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800e468:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e46a:	6805      	ldr	r5, [r0, #0]
{
 800e46c:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e46e:	0028      	movs	r0, r5
 800e470:	f7ff fcca 	bl	800de08 <LL_ADC_REG_IsConversionOngoing>
 800e474:	2800      	cmp	r0, #0
 800e476:	d101      	bne.n	800e47c <ADC_ConversionStop+0x14>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800e478:	2000      	movs	r0, #0
}
 800e47a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800e47c:	68ab      	ldr	r3, [r5, #8]
 800e47e:	079b      	lsls	r3, r3, #30
 800e480:	d405      	bmi.n	800e48e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800e482:	68aa      	ldr	r2, [r5, #8]
 800e484:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c4 <ADC_ConversionStop+0x5c>)
 800e486:	401a      	ands	r2, r3
 800e488:	2310      	movs	r3, #16
 800e48a:	4313      	orrs	r3, r2
 800e48c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800e48e:	f7ff fca5 	bl	800dddc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800e492:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800e494:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	4233      	tst	r3, r6
 800e49c:	d0ec      	beq.n	800e478 <ADC_ConversionStop+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800e49e:	f7ff fc9d 	bl	800dddc <HAL_GetTick>
 800e4a2:	1b40      	subs	r0, r0, r5
 800e4a4:	2802      	cmp	r0, #2
 800e4a6:	d9f6      	bls.n	800e496 <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800e4a8:	6823      	ldr	r3, [r4, #0]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	4233      	tst	r3, r6
 800e4ae:	d0f2      	beq.n	800e496 <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4b0:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4b2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4b4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4ba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e4bc:	4303      	orrs	r3, r0
 800e4be:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800e4c0:	e7db      	b.n	800e47a <ADC_ConversionStop+0x12>
 800e4c2:	46c0      	nop			@ (mov r8, r8)
 800e4c4:	7fffffe8 	.word	0x7fffffe8

0800e4c8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800e4c8:	2300      	movs	r3, #0
{
 800e4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e4cc:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800e4ce:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e4d0:	6891      	ldr	r1, [r2, #8]
 800e4d2:	3301      	adds	r3, #1
{
 800e4d4:	0004      	movs	r4, r0
 800e4d6:	4219      	tst	r1, r3
 800e4d8:	d001      	beq.n	800e4de <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e4da:	2000      	movs	r0, #0
}
 800e4dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800e4de:	6890      	ldr	r0, [r2, #8]
 800e4e0:	4922      	ldr	r1, [pc, #136]	@ (800e56c <ADC_Enable+0xa4>)
 800e4e2:	4208      	tst	r0, r1
 800e4e4:	d008      	beq.n	800e4f8 <ADC_Enable+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4e6:	2210      	movs	r2, #16
 800e4e8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	65a2      	str	r2, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4ee:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800e4f0:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800e4f2:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4f4:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800e4f6:	e7f1      	b.n	800e4dc <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 800e4f8:	6891      	ldr	r1, [r2, #8]
 800e4fa:	4f1d      	ldr	r7, [pc, #116]	@ (800e570 <ADC_Enable+0xa8>)
 800e4fc:	4039      	ands	r1, r7
 800e4fe:	430b      	orrs	r3, r1
 800e500:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e502:	4b1c      	ldr	r3, [pc, #112]	@ (800e574 <ADC_Enable+0xac>)
 800e504:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800e506:	021b      	lsls	r3, r3, #8
 800e508:	d421      	bmi.n	800e54e <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e50a:	7e63      	ldrb	r3, [r4, #25]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d0e4      	beq.n	800e4da <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800e510:	f7ff fc64 	bl	800dddc <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e514:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 800e516:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e518:	6822      	ldr	r2, [r4, #0]
 800e51a:	6813      	ldr	r3, [r2, #0]
 800e51c:	422b      	tst	r3, r5
 800e51e:	d1dc      	bne.n	800e4da <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e520:	6893      	ldr	r3, [r2, #8]
 800e522:	422b      	tst	r3, r5
 800e524:	d103      	bne.n	800e52e <ADC_Enable+0x66>
  MODIFY_REG(ADCx->CR,
 800e526:	6893      	ldr	r3, [r2, #8]
 800e528:	403b      	ands	r3, r7
 800e52a:	432b      	orrs	r3, r5
 800e52c:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e52e:	f7ff fc55 	bl	800dddc <HAL_GetTick>
 800e532:	1b80      	subs	r0, r0, r6
 800e534:	2802      	cmp	r0, #2
 800e536:	d9ef      	bls.n	800e518 <ADC_Enable+0x50>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	422b      	tst	r3, r5
 800e53e:	d1eb      	bne.n	800e518 <ADC_Enable+0x50>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e540:	2310      	movs	r3, #16
 800e542:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e544:	4313      	orrs	r3, r2
 800e546:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e548:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e54a:	432b      	orrs	r3, r5
 800e54c:	e7d1      	b.n	800e4f2 <ADC_Enable+0x2a>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e54e:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <ADC_Enable+0xb0>)
 800e550:	490a      	ldr	r1, [pc, #40]	@ (800e57c <ADC_Enable+0xb4>)
 800e552:	6818      	ldr	r0, [r3, #0]
 800e554:	f7f1 fe08 	bl	8000168 <__udivsi3>
 800e558:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800e55a:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800e55c:	9b01      	ldr	r3, [sp, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0d3      	beq.n	800e50a <ADC_Enable+0x42>
        wait_loop_index--;
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	3b01      	subs	r3, #1
 800e566:	9301      	str	r3, [sp, #4]
 800e568:	e7f8      	b.n	800e55c <ADC_Enable+0x94>
 800e56a:	46c0      	nop			@ (mov r8, r8)
 800e56c:	80000017 	.word	0x80000017
 800e570:	7fffffe8 	.word	0x7fffffe8
 800e574:	40012708 	.word	0x40012708
 800e578:	20000050 	.word	0x20000050
 800e57c:	00030d40 	.word	0x00030d40

0800e580 <HAL_ADC_Start>:
{
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e584:	6800      	ldr	r0, [r0, #0]
 800e586:	f7ff fc3f 	bl	800de08 <LL_ADC_REG_IsConversionOngoing>
 800e58a:	0006      	movs	r6, r0
    __HAL_LOCK(hadc);
 800e58c:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e58e:	2e00      	cmp	r6, #0
 800e590:	d11d      	bne.n	800e5ce <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 800e592:	0025      	movs	r5, r4
 800e594:	3554      	adds	r5, #84	@ 0x54
 800e596:	782b      	ldrb	r3, [r5, #0]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d018      	beq.n	800e5ce <HAL_ADC_Start+0x4e>
 800e59c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800e59e:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 800e5a0:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 800e5a2:	f7ff ff91 	bl	800e4c8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d112      	bne.n	800e5d0 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 800e5aa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e5ac:	4b09      	ldr	r3, [pc, #36]	@ (800e5d4 <HAL_ADC_Start+0x54>)
 800e5ae:	401a      	ands	r2, r3
 800e5b0:	2380      	movs	r3, #128	@ 0x80
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e5b6:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800e5b8:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e5ba:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800e5bc:	65e0      	str	r0, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e5be:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800e5c0:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(ADCx->CR,
 800e5c2:	6899      	ldr	r1, [r3, #8]
 800e5c4:	4a04      	ldr	r2, [pc, #16]	@ (800e5d8 <HAL_ADC_Start+0x58>)
 800e5c6:	4011      	ands	r1, r2
 800e5c8:	2204      	movs	r2, #4
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	609a      	str	r2, [r3, #8]
}
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800e5d0:	702e      	strb	r6, [r5, #0]
 800e5d2:	e7fc      	b.n	800e5ce <HAL_ADC_Start+0x4e>
 800e5d4:	fffff0fe 	.word	0xfffff0fe
 800e5d8:	7fffffe8 	.word	0x7fffffe8

0800e5dc <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e5dc:	2201      	movs	r2, #1
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800e5de:	6803      	ldr	r3, [r0, #0]
{
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800e5e4:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e5e6:	6899      	ldr	r1, [r3, #8]
 800e5e8:	4211      	tst	r1, r2
 800e5ea:	d101      	bne.n	800e5f0 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e5ec:	2000      	movs	r0, #0
}
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800e5f0:	2102      	movs	r1, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 800e5f2:	4208      	tst	r0, r1
 800e5f4:	d1fa      	bne.n	800e5ec <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800e5f6:	2005      	movs	r0, #5
 800e5f8:	689d      	ldr	r5, [r3, #8]
 800e5fa:	4005      	ands	r5, r0
 800e5fc:	2d01      	cmp	r5, #1
 800e5fe:	d11e      	bne.n	800e63e <ADC_Disable+0x62>
  MODIFY_REG(ADCx->CR,
 800e600:	689a      	ldr	r2, [r3, #8]
 800e602:	4813      	ldr	r0, [pc, #76]	@ (800e650 <ADC_Disable+0x74>)
 800e604:	4002      	ands	r2, r0
 800e606:	4311      	orrs	r1, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800e608:	2203      	movs	r2, #3
 800e60a:	6099      	str	r1, [r3, #8]
 800e60c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800e60e:	f7ff fbe5 	bl	800dddc <HAL_GetTick>
 800e612:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	422b      	tst	r3, r5
 800e61a:	d0e7      	beq.n	800e5ec <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800e61c:	f7ff fbde 	bl	800dddc <HAL_GetTick>
 800e620:	1b80      	subs	r0, r0, r6
 800e622:	2802      	cmp	r0, #2
 800e624:	d9f6      	bls.n	800e614 <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	422b      	tst	r3, r5
 800e62c:	d0f2      	beq.n	800e614 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e62e:	2310      	movs	r3, #16
 800e630:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e632:	4313      	orrs	r3, r2
 800e634:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e636:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e638:	432b      	orrs	r3, r5
 800e63a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800e63c:	e006      	b.n	800e64c <ADC_Disable+0x70>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e63e:	2310      	movs	r3, #16
 800e640:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800e642:	430b      	orrs	r3, r1
 800e644:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e646:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e648:	431a      	orrs	r2, r3
 800e64a:	65e2      	str	r2, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800e64c:	2001      	movs	r0, #1
 800e64e:	e7ce      	b.n	800e5ee <ADC_Disable+0x12>
 800e650:	7fffffe8 	.word	0x7fffffe8

0800e654 <HAL_ADC_DeInit>:
{
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	0004      	movs	r4, r0
    return HAL_ERROR;
 800e658:	2501      	movs	r5, #1
  if (hadc == NULL)
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d040      	beq.n	800e6e0 <HAL_ADC_DeInit+0x8c>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800e65e:	2302      	movs	r3, #2
 800e660:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800e662:	4313      	orrs	r3, r2
 800e664:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800e666:	f7ff feff 	bl	800e468 <ADC_ConversionStop>
 800e66a:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800e66c:	d10b      	bne.n	800e686 <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800e66e:	0020      	movs	r0, r4
 800e670:	f7ff ffb4 	bl	800e5dc <ADC_Disable>
 800e674:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 800e676:	d101      	bne.n	800e67c <HAL_ADC_DeInit+0x28>
      hadc->State = HAL_ADC_STATE_READY;
 800e678:	2301      	movs	r3, #1
 800e67a:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800e67c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800e67e:	4919      	ldr	r1, [pc, #100]	@ (800e6e4 <HAL_ADC_DeInit+0x90>)
 800e680:	6893      	ldr	r3, [r2, #8]
 800e682:	400b      	ands	r3, r1
 800e684:	6093      	str	r3, [r2, #8]
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	4917      	ldr	r1, [pc, #92]	@ (800e6e8 <HAL_ADC_DeInit+0x94>)
 800e68a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800e68c:	2600      	movs	r6, #0
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800e68e:	400a      	ands	r2, r1
 800e690:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800e692:	4a16      	ldr	r2, [pc, #88]	@ (800e6ec <HAL_ADC_DeInit+0x98>)
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800e694:	4916      	ldr	r1, [pc, #88]	@ (800e6f0 <HAL_ADC_DeInit+0x9c>)
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800e696:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800e698:	68da      	ldr	r2, [r3, #12]
  HAL_ADC_MspDeInit(hadc);
 800e69a:	0020      	movs	r0, r4
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800e69c:	400a      	ands	r2, r1
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800e69e:	2107      	movs	r1, #7
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800e6a0:	60da      	str	r2, [r3, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800e6a2:	695a      	ldr	r2, [r3, #20]
  __HAL_UNLOCK(hadc);
 800e6a4:	3454      	adds	r4, #84	@ 0x54
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800e6a6:	438a      	bics	r2, r1
 800e6a8:	615a      	str	r2, [r3, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800e6aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e6ac:	629e      	str	r6, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800e6ae:	6a1a      	ldr	r2, [r3, #32]
 800e6b0:	4910      	ldr	r1, [pc, #64]	@ (800e6f4 <HAL_ADC_DeInit+0xa0>)
 800e6b2:	400a      	ands	r2, r1
 800e6b4:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800e6b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6b8:	400a      	ands	r2, r1
 800e6ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800e6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6be:	400a      	ands	r2, r1
 800e6c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800e6c2:	691a      	ldr	r2, [r3, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800e6c4:	490c      	ldr	r1, [pc, #48]	@ (800e6f8 <HAL_ADC_DeInit+0xa4>)
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800e6c6:	0092      	lsls	r2, r2, #2
 800e6c8:	0892      	lsrs	r2, r2, #2
 800e6ca:	611a      	str	r2, [r3, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800e6cc:	4a0b      	ldr	r2, [pc, #44]	@ (800e6fc <HAL_ADC_DeInit+0xa8>)
 800e6ce:	6813      	ldr	r3, [r2, #0]
 800e6d0:	400b      	ands	r3, r1
 800e6d2:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 800e6d4:	f7fb fb94 	bl	8009e00 <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 800e6d8:	60a6      	str	r6, [r4, #8]
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800e6da:	60e6      	str	r6, [r4, #12]
  hadc->State = HAL_ADC_STATE_RESET;
 800e6dc:	6066      	str	r6, [r4, #4]
  __HAL_UNLOCK(hadc);
 800e6de:	7026      	strb	r6, [r4, #0]
}
 800e6e0:	0028      	movs	r0, r5
 800e6e2:	bd70      	pop	{r4, r5, r6, pc}
 800e6e4:	6fffffe8 	.word	0x6fffffe8
 800e6e8:	fffff460 	.word	0xfffff460
 800e6ec:	00000b9f 	.word	0x00000b9f
 800e6f0:	831e0200 	.word	0x831e0200
 800e6f4:	f000f000 	.word	0xf000f000
 800e6f8:	fe03ffff 	.word	0xfe03ffff
 800e6fc:	40012708 	.word	0x40012708

0800e700 <HAL_ADC_Stop>:
{
 800e700:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800e702:	0006      	movs	r6, r0
 800e704:	3654      	adds	r6, #84	@ 0x54
 800e706:	7833      	ldrb	r3, [r6, #0]
{
 800e708:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800e70a:	2002      	movs	r0, #2
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d012      	beq.n	800e736 <HAL_ADC_Stop+0x36>
 800e710:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800e712:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 800e714:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800e716:	f7ff fea7 	bl	800e468 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d109      	bne.n	800e732 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800e71e:	0020      	movs	r0, r4
 800e720:	f7ff ff5c 	bl	800e5dc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800e724:	2800      	cmp	r0, #0
 800e726:	d104      	bne.n	800e732 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800e728:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e72a:	4a03      	ldr	r2, [pc, #12]	@ (800e738 <HAL_ADC_Stop+0x38>)
 800e72c:	4013      	ands	r3, r2
 800e72e:	431d      	orrs	r5, r3
 800e730:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800e732:	2300      	movs	r3, #0
 800e734:	7033      	strb	r3, [r6, #0]
}
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	fffffefe 	.word	0xfffffefe

0800e73c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800e73e:	2300      	movs	r3, #0
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800e740:	0005      	movs	r5, r0
 800e742:	2202      	movs	r2, #2
{
 800e744:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800e746:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hadc);
 800e748:	3554      	adds	r5, #84	@ 0x54
 800e74a:	782b      	ldrb	r3, [r5, #0]
{
 800e74c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800e74e:	9200      	str	r2, [sp, #0]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d03e      	beq.n	800e7d2 <HAL_ADCEx_Calibration_Start+0x96>
 800e754:	2601      	movs	r6, #1
 800e756:	702e      	strb	r6, [r5, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800e758:	f7ff ff40 	bl	800e5dc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e75c:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 800e75e:	9000      	str	r0, [sp, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e760:	6899      	ldr	r1, [r3, #8]
 800e762:	000a      	movs	r2, r1
 800e764:	4032      	ands	r2, r6
 800e766:	4231      	tst	r1, r6
 800e768:	d006      	beq.n	800e778 <HAL_ADCEx_Calibration_Start+0x3c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e76a:	2310      	movs	r3, #16
 800e76c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e76e:	4313      	orrs	r3, r2
    ADC_STATE_CLR_SET(hadc->State,
 800e770:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800e772:	2300      	movs	r3, #0
 800e774:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
 800e776:	e02c      	b.n	800e7d2 <HAL_ADCEx_Calibration_Start+0x96>
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800e778:	26ae      	movs	r6, #174	@ 0xae
    ADC_STATE_CLR_SET(hadc->State,
 800e77a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e77c:	4942      	ldr	r1, [pc, #264]	@ (800e888 <HAL_ADCEx_Calibration_Start+0x14c>)
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800e77e:	02b6      	lsls	r6, r6, #10
    ADC_STATE_CLR_SET(hadc->State,
 800e780:	4008      	ands	r0, r1
 800e782:	3106      	adds	r1, #6
 800e784:	31ff      	adds	r1, #255	@ 0xff
 800e786:	4301      	orrs	r1, r0
 800e788:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800e78a:	68d8      	ldr	r0, [r3, #12]
 800e78c:	493f      	ldr	r1, [pc, #252]	@ (800e88c <HAL_ADCEx_Calibration_Start+0x150>)
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800e78e:	46b4      	mov	ip, r6
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800e790:	4008      	ands	r0, r1
 800e792:	9001      	str	r0, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800e794:	68d9      	ldr	r1, [r3, #12]
 800e796:	483e      	ldr	r0, [pc, #248]	@ (800e890 <HAL_ADCEx_Calibration_Start+0x154>)
 800e798:	4001      	ands	r1, r0
 800e79a:	2008      	movs	r0, #8
 800e79c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->CR,
 800e79e:	493d      	ldr	r1, [pc, #244]	@ (800e894 <HAL_ADCEx_Calibration_Start+0x158>)
 800e7a0:	2780      	movs	r7, #128	@ 0x80
 800e7a2:	689e      	ldr	r6, [r3, #8]
 800e7a4:	063f      	lsls	r7, r7, #24
 800e7a6:	400e      	ands	r6, r1
 800e7a8:	433e      	orrs	r6, r7
 800e7aa:	609e      	str	r6, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800e7ac:	689e      	ldr	r6, [r3, #8]
 800e7ae:	2e00      	cmp	r6, #0
 800e7b0:	da12      	bge.n	800e7d8 <HAL_ADCEx_Calibration_Start+0x9c>
        wait_loop_index++;
 800e7b2:	9e02      	ldr	r6, [sp, #8]
 800e7b4:	3601      	adds	r6, #1
 800e7b6:	9602      	str	r6, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800e7b8:	9e02      	ldr	r6, [sp, #8]
 800e7ba:	4566      	cmp	r6, ip
 800e7bc:	d3f6      	bcc.n	800e7ac <HAL_ADCEx_Calibration_Start+0x70>
          ADC_STATE_CLR_SET(hadc->State,
 800e7be:	2312      	movs	r3, #18
 800e7c0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e7c2:	439a      	bics	r2, r3
 800e7c4:	3b02      	subs	r3, #2
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	702b      	strb	r3, [r5, #0]
          return HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	9300      	str	r3, [sp, #0]
}
 800e7d2:	9800      	ldr	r0, [sp, #0]
 800e7d4:	b005      	add	sp, #20
 800e7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800e7d8:	001e      	movs	r6, r3
 800e7da:	277f      	movs	r7, #127	@ 0x7f
 800e7dc:	36b4      	adds	r6, #180	@ 0xb4
 800e7de:	6836      	ldr	r6, [r6, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800e7e0:	3801      	subs	r0, #1
 800e7e2:	403e      	ands	r6, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800e7e4:	1992      	adds	r2, r2, r6
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d1da      	bne.n	800e7a0 <HAL_ADCEx_Calibration_Start+0x64>
  MODIFY_REG(ADCx->CR,
 800e7ea:	2601      	movs	r6, #1
 800e7ec:	6898      	ldr	r0, [r3, #8]
    calibration_factor_accumulated /= calibration_index;
 800e7ee:	08d2      	lsrs	r2, r2, #3
 800e7f0:	4008      	ands	r0, r1
 800e7f2:	4330      	orrs	r0, r6
 800e7f4:	6098      	str	r0, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800e7f6:	2080      	movs	r0, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800e7f8:	691f      	ldr	r7, [r3, #16]
 800e7fa:	05c0      	lsls	r0, r0, #23
 800e7fc:	4287      	cmp	r7, r0
 800e7fe:	d31c      	bcc.n	800e83a <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 800e800:	001e      	movs	r6, r3
 800e802:	277f      	movs	r7, #127	@ 0x7f
 800e804:	36b4      	adds	r6, #180	@ 0xb4
 800e806:	6830      	ldr	r0, [r6, #0]
 800e808:	43b8      	bics	r0, r7
 800e80a:	4310      	orrs	r0, r2
 800e80c:	6030      	str	r0, [r6, #0]
  MODIFY_REG(ADCx->CR,
 800e80e:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e810:	2601      	movs	r6, #1
  MODIFY_REG(ADCx->CR,
 800e812:	4011      	ands	r1, r2
 800e814:	2202      	movs	r2, #2
 800e816:	430a      	orrs	r2, r1
 800e818:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800e81a:	f7ff fadf 	bl	800dddc <HAL_GetTick>
 800e81e:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e820:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e822:	689a      	ldr	r2, [r3, #8]
 800e824:	4232      	tst	r2, r6
 800e826:	d11e      	bne.n	800e866 <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800e828:	68da      	ldr	r2, [r3, #12]
 800e82a:	9901      	ldr	r1, [sp, #4]
 800e82c:	430a      	orrs	r2, r1
 800e82e:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800e830:	2203      	movs	r2, #3
 800e832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e834:	4393      	bics	r3, r2
 800e836:	4333      	orrs	r3, r6
 800e838:	e79a      	b.n	800e770 <HAL_ADCEx_Calibration_Start+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800e83a:	4817      	ldr	r0, [pc, #92]	@ (800e898 <HAL_ADCEx_Calibration_Start+0x15c>)
 800e83c:	6807      	ldr	r7, [r0, #0]
 800e83e:	20f0      	movs	r0, #240	@ 0xf0
 800e840:	0380      	lsls	r0, r0, #14
 800e842:	4038      	ands	r0, r7
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800e844:	27e0      	movs	r7, #224	@ 0xe0
 800e846:	037f      	lsls	r7, r7, #13
 800e848:	42b8      	cmp	r0, r7
 800e84a:	d3d9      	bcc.n	800e800 <HAL_ADCEx_Calibration_Start+0xc4>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800e84c:	0c80      	lsrs	r0, r0, #18
 800e84e:	3803      	subs	r0, #3
 800e850:	4086      	lsls	r6, r0
 800e852:	9603      	str	r6, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 800e854:	9803      	ldr	r0, [sp, #12]
 800e856:	0840      	lsrs	r0, r0, #1
          delay_cpu_cycles--;
 800e858:	9003      	str	r0, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 800e85a:	9803      	ldr	r0, [sp, #12]
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d0cf      	beq.n	800e800 <HAL_ADCEx_Calibration_Start+0xc4>
          delay_cpu_cycles--;
 800e860:	9803      	ldr	r0, [sp, #12]
 800e862:	3801      	subs	r0, #1
 800e864:	e7f8      	b.n	800e858 <HAL_ADCEx_Calibration_Start+0x11c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800e866:	f7ff fab9 	bl	800dddc <HAL_GetTick>
 800e86a:	1bc0      	subs	r0, r0, r7
 800e86c:	2802      	cmp	r0, #2
 800e86e:	d9d7      	bls.n	800e820 <HAL_ADCEx_Calibration_Start+0xe4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e870:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	4233      	tst	r3, r6
 800e876:	d0d3      	beq.n	800e820 <HAL_ADCEx_Calibration_Start+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e878:	2310      	movs	r3, #16
 800e87a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e87c:	4313      	orrs	r3, r2
 800e87e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e880:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e882:	4333      	orrs	r3, r6
 800e884:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800e886:	e7a2      	b.n	800e7ce <HAL_ADCEx_Calibration_Start+0x92>
 800e888:	fffffefd 	.word	0xfffffefd
 800e88c:	00008003 	.word	0x00008003
 800e890:	ffff7ffc 	.word	0xffff7ffc
 800e894:	7fffffe8 	.word	0x7fffffe8
 800e898:	40012708 	.word	0x40012708

0800e89c <HAL_ADCEx_Calibration_GetValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return the selected ADC calibration value */
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 800e89c:	6803      	ldr	r3, [r0, #0]
 800e89e:	33b4      	adds	r3, #180	@ 0xb4
 800e8a0:	6818      	ldr	r0, [r3, #0]
 800e8a2:	237f      	movs	r3, #127	@ 0x7f
 800e8a4:	4018      	ands	r0, r3
}
 800e8a6:	4770      	bx	lr

0800e8a8 <HAL_ADCEx_Calibration_SetValue>:
  * @param hadc ADC handle
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t CalibrationFactor)
{
 800e8a8:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  __HAL_LOCK(hadc);
 800e8aa:	0004      	movs	r4, r0
 800e8ac:	3454      	adds	r4, #84	@ 0x54
 800e8ae:	7822      	ldrb	r2, [r4, #0]
{
 800e8b0:	0003      	movs	r3, r0
 800e8b2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800e8b4:	2002      	movs	r0, #2
 800e8b6:	2a01      	cmp	r2, #1
 800e8b8:	d016      	beq.n	800e8e8 <HAL_ADCEx_Calibration_SetValue+0x40>
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	7021      	strb	r1, [r4, #0]

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e8be:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e8c0:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e8c2:	6890      	ldr	r0, [r2, #8]
 800e8c4:	4208      	tst	r0, r1
 800e8c6:	d010      	beq.n	800e8ea <HAL_ADCEx_Calibration_SetValue+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e8c8:	0030      	movs	r0, r6
 800e8ca:	3103      	adds	r1, #3
 800e8cc:	4008      	ands	r0, r1

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800e8ce:	420e      	tst	r6, r1
 800e8d0:	d10b      	bne.n	800e8ea <HAL_ADCEx_Calibration_SetValue+0x42>
     )
  {
    hadc->Instance->CALFACT &= ~ADC_CALFACT_CALFACT;
 800e8d2:	0013      	movs	r3, r2
 800e8d4:	33b4      	adds	r3, #180	@ 0xb4
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	317b      	adds	r1, #123	@ 0x7b
 800e8da:	438a      	bics	r2, r1
 800e8dc:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT |= CalibrationFactor;
 800e8de:	6819      	ldr	r1, [r3, #0]
 800e8e0:	4329      	orrs	r1, r5
 800e8e2:	6019      	str	r1, [r3, #0]

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	7023      	strb	r3, [r4, #0]

  return tmp_hal_status;
}
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8ea:	2220      	movs	r2, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e8ec:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8ee:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800e8f0:	430a      	orrs	r2, r1
 800e8f2:	659a      	str	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e8f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e8f6:	4302      	orrs	r2, r0
 800e8f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 800e8fa:	e7f3      	b.n	800e8e4 <HAL_ADCEx_Calibration_SetValue+0x3c>

0800e8fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800e8fc:	4770      	bx	lr

0800e8fe <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 800e8fe:	4770      	bx	lr

0800e900 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 800e900:	4770      	bx	lr

0800e902 <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 800e902:	4770      	bx	lr

0800e904 <HAL_COMP_Init>:
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800e904:	2300      	movs	r3, #0
{
 800e906:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e908:	b085      	sub	sp, #20
 800e90a:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800e90c:	9303      	str	r3, [sp, #12]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800e90e:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800e910:	429c      	cmp	r4, r3
 800e912:	d100      	bne.n	800e916 <HAL_COMP_Init+0x12>
 800e914:	e0a8      	b.n	800ea68 <HAL_COMP_Init+0x164>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	da00      	bge.n	800e920 <HAL_COMP_Init+0x1c>
 800e91e:	e0a3      	b.n	800ea68 <HAL_COMP_Init+0x164>
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800e920:	0025      	movs	r5, r4
 800e922:	3529      	adds	r5, #41	@ 0x29
 800e924:	782a      	ldrb	r2, [r5, #0]
 800e926:	b2d3      	uxtb	r3, r2
 800e928:	2a00      	cmp	r2, #0
 800e92a:	d106      	bne.n	800e93a <HAL_COMP_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800e92c:	0022      	movs	r2, r4
 800e92e:	3228      	adds	r2, #40	@ 0x28
 800e930:	7013      	strb	r3, [r2, #0]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800e932:	0020      	movs	r0, r4
      COMP_CLEAR_ERRORCODE(hcomp);
 800e934:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_COMP_MspInit(hcomp);
 800e936:	f7fb fa7b 	bl	8009e30 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800e93a:	6826      	ldr	r6, [r4, #0]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800e93c:	6920      	ldr	r0, [r4, #16]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800e93e:	6833      	ldr	r3, [r6, #0]
               | hcomp->Init.Mode
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800e940:	6831      	ldr	r1, [r6, #0]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800e942:	9301      	str	r3, [sp, #4]
               | hcomp->Init.InputPlus
 800e944:	6963      	ldr	r3, [r4, #20]
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */

#if defined(COMP2)
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800e946:	6867      	ldr	r7, [r4, #4]
               | hcomp->Init.InputPlus
 800e948:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 800e94a:	6a20      	ldr	r0, [r4, #32]
 800e94c:	4303      	orrs	r3, r0
               | hcomp->Init.Hysteresis
 800e94e:	69a0      	ldr	r0, [r4, #24]
 800e950:	4303      	orrs	r3, r0
               | hcomp->Init.OutputPol
 800e952:	69e0      	ldr	r0, [r4, #28]
 800e954:	4303      	orrs	r3, r0
    tmp_csr = (hcomp->Init.InputMinus
 800e956:	68e0      	ldr	r0, [r4, #12]
 800e958:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 800e95a:	484a      	ldr	r0, [pc, #296]	@ (800ea84 <HAL_COMP_Init+0x180>)
 800e95c:	4001      	ands	r1, r0
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800e95e:	2080      	movs	r0, #128	@ 0x80
    MODIFY_REG(hcomp->Instance->CSR,
 800e960:	430b      	orrs	r3, r1
 800e962:	6033      	str	r3, [r6, #0]
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800e964:	4948      	ldr	r1, [pc, #288]	@ (800ea88 <HAL_COMP_Init+0x184>)
 800e966:	4b49      	ldr	r3, [pc, #292]	@ (800ea8c <HAL_COMP_Init+0x188>)
 800e968:	0100      	lsls	r0, r0, #4
 800e96a:	4287      	cmp	r7, r0
 800e96c:	d116      	bne.n	800e99c <HAL_COMP_Init+0x98>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800e96e:	6818      	ldr	r0, [r3, #0]
 800e970:	4001      	ands	r1, r0
 800e972:	6019      	str	r1, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800e974:	6859      	ldr	r1, [r3, #4]
 800e976:	4339      	orrs	r1, r7
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800e978:	6059      	str	r1, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800e97a:	2180      	movs	r1, #128	@ 0x80
 800e97c:	68a0      	ldr	r0, [r4, #8]
 800e97e:	01c9      	lsls	r1, r1, #7
 800e980:	4288      	cmp	r0, r1
 800e982:	d018      	beq.n	800e9b6 <HAL_COMP_Init+0xb2>
 800e984:	27a0      	movs	r7, #160	@ 0xa0
 800e986:	01ff      	lsls	r7, r7, #7
 800e988:	42b8      	cmp	r0, r7
 800e98a:	d01b      	beq.n	800e9c4 <HAL_COMP_Init+0xc0>
 800e98c:	2801      	cmp	r0, #1
 800e98e:	d03a      	beq.n	800ea06 <HAL_COMP_Init+0x102>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
        break;

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800e990:	6819      	ldr	r1, [r3, #0]
 800e992:	483f      	ldr	r0, [pc, #252]	@ (800ea90 <HAL_COMP_Init+0x18c>)
 800e994:	4001      	ands	r1, r0
 800e996:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800e998:	6859      	ldr	r1, [r3, #4]
 800e99a:	e011      	b.n	800e9c0 <HAL_COMP_Init+0xbc>
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800e99c:	22c0      	movs	r2, #192	@ 0xc0
 800e99e:	0152      	lsls	r2, r2, #5
 800e9a0:	4297      	cmp	r7, r2
 800e9a2:	d105      	bne.n	800e9b0 <HAL_COMP_Init+0xac>
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800e9a4:	681f      	ldr	r7, [r3, #0]
 800e9a6:	4338      	orrs	r0, r7
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800e9a8:	6018      	str	r0, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800e9aa:	6858      	ldr	r0, [r3, #4]
 800e9ac:	4001      	ands	r1, r0
 800e9ae:	e7e3      	b.n	800e978 <HAL_COMP_Init+0x74>
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	4008      	ands	r0, r1
 800e9b4:	e7f8      	b.n	800e9a8 <HAL_COMP_Init+0xa4>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800e9b6:	6819      	ldr	r1, [r3, #0]
 800e9b8:	4308      	orrs	r0, r1
 800e9ba:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800e9bc:	6859      	ldr	r1, [r3, #4]
 800e9be:	4834      	ldr	r0, [pc, #208]	@ (800ea90 <HAL_COMP_Init+0x18c>)
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800e9c0:	4001      	ands	r1, r0
 800e9c2:	e005      	b.n	800e9d0 <HAL_COMP_Init+0xcc>
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800e9c4:	6818      	ldr	r0, [r3, #0]
 800e9c6:	4f32      	ldr	r7, [pc, #200]	@ (800ea90 <HAL_COMP_Init+0x18c>)
 800e9c8:	4038      	ands	r0, r7
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800e9ca:	6018      	str	r0, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800e9cc:	6858      	ldr	r0, [r3, #4]
 800e9ce:	4301      	orrs	r1, r0
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800e9d0:	6059      	str	r1, [r3, #4]
    }


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800e9d2:	2330      	movs	r3, #48	@ 0x30
 800e9d4:	6831      	ldr	r1, [r6, #0]
 800e9d6:	4219      	tst	r1, r3
 800e9d8:	d118      	bne.n	800ea0c <HAL_COMP_Init+0x108>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800e9da:	4b2e      	ldr	r3, [pc, #184]	@ (800ea94 <HAL_COMP_Init+0x190>)

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800e9dc:	6a64      	ldr	r4, [r4, #36]	@ 0x24
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800e9de:	18f3      	adds	r3, r6, r3
 800e9e0:	425a      	negs	r2, r3
 800e9e2:	4153      	adcs	r3, r2
 800e9e4:	2280      	movs	r2, #128	@ 0x80
 800e9e6:	425b      	negs	r3, r3
 800e9e8:	0c5b      	lsrs	r3, r3, #17
 800e9ea:	045b      	lsls	r3, r3, #17
 800e9ec:	02d2      	lsls	r2, r2, #11
 800e9ee:	482a      	ldr	r0, [pc, #168]	@ (800ea98 <HAL_COMP_Init+0x194>)
 800e9f0:	492a      	ldr	r1, [pc, #168]	@ (800ea9c <HAL_COMP_Init+0x198>)
 800e9f2:	189b      	adds	r3, r3, r2
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800e9f4:	07a2      	lsls	r2, r4, #30
 800e9f6:	d11c      	bne.n	800ea32 <HAL_COMP_Init+0x12e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800e9f8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800e9fa:	439a      	bics	r2, r3
 800e9fc:	67c2      	str	r2, [r0, #124]	@ 0x7c
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800e9fe:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 800ea00:	439a      	bics	r2, r3
 800ea02:	67ca      	str	r2, [r1, #124]	@ 0x7c
}
 800ea04:	e02c      	b.n	800ea60 <HAL_COMP_Init+0x15c>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800ea06:	6818      	ldr	r0, [r3, #0]
 800ea08:	4308      	orrs	r0, r1
 800ea0a:	e7de      	b.n	800e9ca <HAL_COMP_Init+0xc6>
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800ea0c:	9a01      	ldr	r2, [sp, #4]
 800ea0e:	421a      	tst	r2, r3
 800ea10:	d1e3      	bne.n	800e9da <HAL_COMP_Init+0xd6>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ea12:	4b23      	ldr	r3, [pc, #140]	@ (800eaa0 <HAL_COMP_Init+0x19c>)
 800ea14:	4923      	ldr	r1, [pc, #140]	@ (800eaa4 <HAL_COMP_Init+0x1a0>)
 800ea16:	6818      	ldr	r0, [r3, #0]
 800ea18:	f7f1 fba6 	bl	8000168 <__udivsi3>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	2014      	movs	r0, #20
 800ea20:	4358      	muls	r0, r3
 800ea22:	9003      	str	r0, [sp, #12]
      while (wait_loop_index != 0UL)
 800ea24:	9b03      	ldr	r3, [sp, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0d7      	beq.n	800e9da <HAL_COMP_Init+0xd6>
        wait_loop_index--;
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	9303      	str	r3, [sp, #12]
 800ea30:	e7f8      	b.n	800ea24 <HAL_COMP_Init+0x120>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800ea32:	4a1d      	ldr	r2, [pc, #116]	@ (800eaa8 <HAL_COMP_Init+0x1a4>)
 800ea34:	06e6      	lsls	r6, r4, #27
 800ea36:	d519      	bpl.n	800ea6c <HAL_COMP_Init+0x168>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ea38:	6816      	ldr	r6, [r2, #0]
 800ea3a:	431e      	orrs	r6, r3
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ea3c:	6016      	str	r6, [r2, #0]
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800ea3e:	06a6      	lsls	r6, r4, #26
 800ea40:	d517      	bpl.n	800ea72 <HAL_COMP_Init+0x16e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ea42:	6856      	ldr	r6, [r2, #4]
 800ea44:	431e      	orrs	r6, r3
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ea46:	6056      	str	r6, [r2, #4]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800ea48:	60d3      	str	r3, [r2, #12]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800ea4a:	6113      	str	r3, [r2, #16]
      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
      LL_EXTI_ClearFallingFlag_0_31(exti_line);

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800ea4c:	07a2      	lsls	r2, r4, #30
 800ea4e:	d513      	bpl.n	800ea78 <HAL_COMP_Init+0x174>
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ea50:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800ea52:	431a      	orrs	r2, r3
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ea54:	67c2      	str	r2, [r0, #124]	@ 0x7c
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ea56:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800ea58:	07e4      	lsls	r4, r4, #31
 800ea5a:	d5d1      	bpl.n	800ea00 <HAL_COMP_Init+0xfc>
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	67cb      	str	r3, [r1, #124]	@ 0x7c
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800ea60:	782b      	ldrb	r3, [r5, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00b      	beq.n	800ea7e <HAL_COMP_Init+0x17a>
  HAL_StatusTypeDef status = HAL_OK;
 800ea66:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800ea68:	b005      	add	sp, #20
 800ea6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ea6c:	6816      	ldr	r6, [r2, #0]
 800ea6e:	439e      	bics	r6, r3
 800ea70:	e7e4      	b.n	800ea3c <HAL_COMP_Init+0x138>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ea72:	6856      	ldr	r6, [r2, #4]
 800ea74:	439e      	bics	r6, r3
 800ea76:	e7e6      	b.n	800ea46 <HAL_COMP_Init+0x142>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ea78:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800ea7a:	439a      	bics	r2, r3
 800ea7c:	e7ea      	b.n	800ea54 <HAL_COMP_Init+0x150>
      hcomp->State = HAL_COMP_STATE_READY;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	702b      	strb	r3, [r5, #0]
 800ea82:	e7f0      	b.n	800ea66 <HAL_COMP_Init+0x162>
 800ea84:	fe00700f 	.word	0xfe00700f
 800ea88:	fffff7ff 	.word	0xfffff7ff
 800ea8c:	40010200 	.word	0x40010200
 800ea90:	ffffbfff 	.word	0xffffbfff
 800ea94:	bffefe00 	.word	0xbffefe00
 800ea98:	40021808 	.word	0x40021808
 800ea9c:	40021804 	.word	0x40021804
 800eaa0:	20000050 	.word	0x20000050
 800eaa4:	00030d40 	.word	0x00030d40
 800eaa8:	40021800 	.word	0x40021800

0800eaac <HAL_COMP_DeInit>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_DeInit(COMP_HandleTypeDef *hcomp)
{
 800eaac:	b570      	push	{r4, r5, r6, lr}
 800eaae:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800eab0:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800eab2:	2c00      	cmp	r4, #0
 800eab4:	d00e      	beq.n	800ead4 <HAL_COMP_DeInit+0x28>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	2a00      	cmp	r2, #0
 800eabc:	db0a      	blt.n	800ead4 <HAL_COMP_DeInit+0x28>
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Set COMP_CSR register to reset value */
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800eabe:	2500      	movs	r5, #0

    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    hcomp->MspDeInitCallback(hcomp);
#else
    /* DeInit the low level hardware: GPIO, RCC clock, NVIC */
    HAL_COMP_MspDeInit(hcomp);
 800eac0:	0020      	movs	r0, r4
    WRITE_REG(hcomp->Instance->CSR, 0x00000000UL);
 800eac2:	601d      	str	r5, [r3, #0]
    HAL_COMP_MspDeInit(hcomp);
 800eac4:	f7fb f9fc 	bl	8009ec0 <HAL_COMP_MspDeInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Set HAL COMP handle state */
    hcomp->State = HAL_COMP_STATE_RESET;
 800eac8:	0023      	movs	r3, r4
  HAL_StatusTypeDef status = HAL_OK;
 800eaca:	0028      	movs	r0, r5
    hcomp->State = HAL_COMP_STATE_RESET;
 800eacc:	3329      	adds	r3, #41	@ 0x29

    /* Release Lock */
    __HAL_UNLOCK(hcomp);
 800eace:	3428      	adds	r4, #40	@ 0x28
    hcomp->State = HAL_COMP_STATE_RESET;
 800ead0:	701d      	strb	r5, [r3, #0]
    __HAL_UNLOCK(hcomp);
 800ead2:	7025      	strb	r5, [r4, #0]
  }

  return status;
}
 800ead4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ead8 <HAL_COMP_Start>:
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
  __IO uint32_t wait_loop_index = 0UL;
 800ead8:	2200      	movs	r2, #0
{
 800eada:	b513      	push	{r0, r1, r4, lr}
 800eadc:	0003      	movs	r3, r0
  __IO uint32_t wait_loop_index = 0UL;
 800eade:	9201      	str	r2, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
  {
    status = HAL_ERROR;
 800eae0:	2001      	movs	r0, #1
  if (hcomp == NULL)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d018      	beq.n	800eb18 <HAL_COMP_Start+0x40>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	6811      	ldr	r1, [r2, #0]
 800eaea:	2900      	cmp	r1, #0
 800eaec:	db14      	blt.n	800eb18 <HAL_COMP_Start+0x40>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800eaee:	3329      	adds	r3, #41	@ 0x29
 800eaf0:	781c      	ldrb	r4, [r3, #0]
 800eaf2:	b2e1      	uxtb	r1, r4
 800eaf4:	4284      	cmp	r4, r0
 800eaf6:	d10f      	bne.n	800eb18 <HAL_COMP_Start+0x40>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800eaf8:	6810      	ldr	r0, [r2, #0]
 800eafa:	4301      	orrs	r1, r0
 800eafc:	6011      	str	r1, [r2, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800eafe:	2202      	movs	r2, #2
 800eb00:	701a      	strb	r2, [r3, #0]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800eb02:	4b08      	ldr	r3, [pc, #32]	@ (800eb24 <HAL_COMP_Start+0x4c>)
 800eb04:	4908      	ldr	r1, [pc, #32]	@ (800eb28 <HAL_COMP_Start+0x50>)
 800eb06:	6818      	ldr	r0, [r3, #0]
 800eb08:	f7f1 fb2e 	bl	8000168 <__udivsi3>
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	00c0      	lsls	r0, r0, #3
 800eb10:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800eb12:	9801      	ldr	r0, [sp, #4]
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d100      	bne.n	800eb1a <HAL_COMP_Start+0x42>
      status = HAL_ERROR;
    }
  }

  return status;
}
 800eb18:	bd16      	pop	{r1, r2, r4, pc}
        wait_loop_index--;
 800eb1a:	9b01      	ldr	r3, [sp, #4]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	e7f7      	b.n	800eb12 <HAL_COMP_Start+0x3a>
 800eb22:	46c0      	nop			@ (mov r8, r8)
 800eb24:	20000050 	.word	0x20000050
 800eb28:	00030d40 	.word	0x00030d40

0800eb2c <HAL_COMP_IRQHandler>:
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800eb2c:	4a13      	ldr	r2, [pc, #76]	@ (800eb7c <HAL_COMP_IRQHandler+0x50>)
 800eb2e:	6803      	ldr	r3, [r0, #0]
{
 800eb30:	b510      	push	{r4, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d112      	bne.n	800eb5c <HAL_COMP_IRQHandler+0x30>
 800eb36:	2380      	movs	r3, #128	@ 0x80
 800eb38:	029b      	lsls	r3, r3, #10
#if defined(COMP2)
  uint32_t comparator_window_mode;
  uint32_t comparator_window_exti_lines;

  comparator_window_mode = READ_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800eb3a:	6811      	ldr	r1, [r2, #0]
  comparator_window_mode |= READ_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800eb3c:	6852      	ldr	r2, [r2, #4]
 800eb3e:	4311      	orrs	r1, r2
 800eb40:	2280      	movs	r2, #128	@ 0x80
 800eb42:	0112      	lsls	r2, r2, #4
 800eb44:	4011      	ands	r1, r2
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800eb46:	4a0e      	ldr	r2, [pc, #56]	@ (800eb80 <HAL_COMP_IRQHandler+0x54>)
 800eb48:	68d4      	ldr	r4, [r2, #12]
 800eb4a:	401c      	ands	r4, r3
 800eb4c:	42a3      	cmp	r3, r4
 800eb4e:	d108      	bne.n	800eb62 <HAL_COMP_IRQHandler+0x36>
  /* Check COMP EXTI flag */
  if (LL_EXTI_IsActiveRisingFlag_0_31(exti_line) != 0UL)
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if (comparator_window_mode != 0UL)
 800eb50:	2900      	cmp	r1, #0
 800eb52:	d110      	bne.n	800eb76 <HAL_COMP_IRQHandler+0x4a>
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800eb54:	60d3      	str	r3, [r2, #12]

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800eb56:	f7f9 fb53 	bl	8008200 <HAL_COMP_TriggerCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 800eb5a:	bd10      	pop	{r4, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800eb5c:	2380      	movs	r3, #128	@ 0x80
 800eb5e:	02db      	lsls	r3, r3, #11
 800eb60:	e7eb      	b.n	800eb3a <HAL_COMP_IRQHandler+0xe>
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800eb62:	6914      	ldr	r4, [r2, #16]
 800eb64:	401c      	ands	r4, r3
 800eb66:	42a3      	cmp	r3, r4
 800eb68:	d1f7      	bne.n	800eb5a <HAL_COMP_IRQHandler+0x2e>
    if (comparator_window_mode != 0UL)
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	d001      	beq.n	800eb72 <HAL_COMP_IRQHandler+0x46>
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800eb6e:	23c0      	movs	r3, #192	@ 0xc0
 800eb70:	02db      	lsls	r3, r3, #11
 800eb72:	6113      	str	r3, [r2, #16]
}
 800eb74:	e7ef      	b.n	800eb56 <HAL_COMP_IRQHandler+0x2a>
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800eb76:	23c0      	movs	r3, #192	@ 0xc0
 800eb78:	02db      	lsls	r3, r3, #11
 800eb7a:	e7eb      	b.n	800eb54 <HAL_COMP_IRQHandler+0x28>
 800eb7c:	40010200 	.word	0x40010200
 800eb80:	40021800 	.word	0x40021800

0800eb84 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800eb84:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb86:	24ff      	movs	r4, #255	@ 0xff
 800eb88:	2203      	movs	r2, #3
 800eb8a:	000b      	movs	r3, r1
 800eb8c:	0021      	movs	r1, r4
 800eb8e:	4002      	ands	r2, r0
 800eb90:	00d2      	lsls	r2, r2, #3
 800eb92:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eb94:	019b      	lsls	r3, r3, #6
 800eb96:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb98:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eb9a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	db0a      	blt.n	800ebb6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eba0:	24c0      	movs	r4, #192	@ 0xc0
 800eba2:	4a0b      	ldr	r2, [pc, #44]	@ (800ebd0 <HAL_NVIC_SetPriority+0x4c>)
 800eba4:	0880      	lsrs	r0, r0, #2
 800eba6:	0080      	lsls	r0, r0, #2
 800eba8:	1880      	adds	r0, r0, r2
 800ebaa:	00a4      	lsls	r4, r4, #2
 800ebac:	5902      	ldr	r2, [r0, r4]
 800ebae:	400a      	ands	r2, r1
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	5103      	str	r3, [r0, r4]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800ebb4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebb6:	220f      	movs	r2, #15
 800ebb8:	4010      	ands	r0, r2
 800ebba:	3808      	subs	r0, #8
 800ebbc:	4a05      	ldr	r2, [pc, #20]	@ (800ebd4 <HAL_NVIC_SetPriority+0x50>)
 800ebbe:	0880      	lsrs	r0, r0, #2
 800ebc0:	0080      	lsls	r0, r0, #2
 800ebc2:	1880      	adds	r0, r0, r2
 800ebc4:	69c2      	ldr	r2, [r0, #28]
 800ebc6:	4011      	ands	r1, r2
 800ebc8:	4319      	orrs	r1, r3
 800ebca:	61c1      	str	r1, [r0, #28]
 800ebcc:	e7f2      	b.n	800ebb4 <HAL_NVIC_SetPriority+0x30>
 800ebce:	46c0      	nop			@ (mov r8, r8)
 800ebd0:	e000e100 	.word	0xe000e100
 800ebd4:	e000ed00 	.word	0xe000ed00

0800ebd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	db05      	blt.n	800ebe8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ebdc:	231f      	movs	r3, #31
 800ebde:	4018      	ands	r0, r3
 800ebe0:	3b1e      	subs	r3, #30
 800ebe2:	4083      	lsls	r3, r0
 800ebe4:	4a01      	ldr	r2, [pc, #4]	@ (800ebec <HAL_NVIC_EnableIRQ+0x14>)
 800ebe6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ebe8:	4770      	bx	lr
 800ebea:	46c0      	nop			@ (mov r8, r8)
 800ebec:	e000e100 	.word	0xe000e100

0800ebf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ebf0:	2280      	movs	r2, #128	@ 0x80
 800ebf2:	1e43      	subs	r3, r0, #1
 800ebf4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800ebf6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d20d      	bcs.n	800ec18 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebfc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ebfe:	4a07      	ldr	r2, [pc, #28]	@ (800ec1c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec00:	4807      	ldr	r0, [pc, #28]	@ (800ec20 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ec02:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec04:	6a03      	ldr	r3, [r0, #32]
 800ec06:	0609      	lsls	r1, r1, #24
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	0a1b      	lsrs	r3, r3, #8
 800ec0c:	430b      	orrs	r3, r1
 800ec0e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec10:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec12:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec14:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec16:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800ec18:	4770      	bx	lr
 800ec1a:	46c0      	nop			@ (mov r8, r8)
 800ec1c:	e000e010 	.word	0xe000e010
 800ec20:	e000ed00 	.word	0xe000ed00

0800ec24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ec24:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ec26:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800ec28:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800ec2a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ec2c:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800ec2e:	2c00      	cmp	r4, #0
 800ec30:	d002      	beq.n	800ec38 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ec32:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 800ec34:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 800ec36:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ec38:	241c      	movs	r4, #28
 800ec3a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800ec3c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800ec3e:	4025      	ands	r5, r4
 800ec40:	3c1b      	subs	r4, #27
 800ec42:	40ac      	lsls	r4, r5
 800ec44:	6074      	str	r4, [r6, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ec46:	6804      	ldr	r4, [r0, #0]
 800ec48:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec4a:	6883      	ldr	r3, [r0, #8]
 800ec4c:	2b10      	cmp	r3, #16
 800ec4e:	d102      	bne.n	800ec56 <DMA_SetConfig+0x32>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ec50:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ec52:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ec54:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = SrcAddress;
 800ec56:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800ec58:	60e2      	str	r2, [r4, #12]
}
 800ec5a:	e7fb      	b.n	800ec54 <DMA_SetConfig+0x30>

0800ec5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ec5c:	b570      	push	{r4, r5, r6, lr}
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ec5e:	6806      	ldr	r6, [r0, #0]
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ec60:	6c44      	ldr	r4, [r0, #68]	@ 0x44
{
 800ec62:	0005      	movs	r5, r0

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ec64:	b2f0      	uxtb	r0, r6
 800ec66:	2114      	movs	r1, #20
 800ec68:	3808      	subs	r0, #8
 800ec6a:	f7f1 fa7d 	bl	8000168 <__udivsi3>
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ec6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ec98 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ec70:	08a4      	lsrs	r4, r4, #2
 800ec72:	00a4      	lsls	r4, r4, #2
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ec74:	429e      	cmp	r6, r3
 800ec76:	d80a      	bhi.n	800ec8e <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ec78:	4b08      	ldr	r3, [pc, #32]	@ (800ec9c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 800ec7a:	18e4      	adds	r4, r4, r3
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ec7c:	4b08      	ldr	r3, [pc, #32]	@ (800eca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800ec7e:	64ac      	str	r4, [r5, #72]	@ 0x48
 800ec80:	64eb      	str	r3, [r5, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ec82:	231f      	movs	r3, #31
 800ec84:	4018      	ands	r0, r3
 800ec86:	3b1e      	subs	r3, #30
 800ec88:	4083      	lsls	r3, r0
 800ec8a:	652b      	str	r3, [r5, #80]	@ 0x50
}
 800ec8c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ec8e:	4b05      	ldr	r3, [pc, #20]	@ (800eca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800ec90:	3007      	adds	r0, #7
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ec92:	18e4      	adds	r4, r4, r3
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800ec94:	e7f2      	b.n	800ec7c <DMA_CalcDMAMUXChannelBaseAndMask+0x20>
 800ec96:	46c0      	nop			@ (mov r8, r8)
 800ec98:	40020407 	.word	0x40020407
 800ec9c:	40020800 	.word	0x40020800
 800eca0:	40020880 	.word	0x40020880
 800eca4:	4002081c 	.word	0x4002081c

0800eca8 <HAL_DMA_Init>:
{
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	0004      	movs	r4, r0
    return HAL_ERROR;
 800ecac:	2001      	movs	r0, #1
  if (hdma == NULL)
 800ecae:	2c00      	cmp	r4, #0
 800ecb0:	d04a      	beq.n	800ed48 <HAL_DMA_Init+0xa0>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ecb2:	6825      	ldr	r5, [r4, #0]
 800ecb4:	4b2b      	ldr	r3, [pc, #172]	@ (800ed64 <HAL_DMA_Init+0xbc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800ecb6:	2114      	movs	r1, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ecb8:	429d      	cmp	r5, r3
 800ecba:	d846      	bhi.n	800ed4a <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800ecbc:	4b2a      	ldr	r3, [pc, #168]	@ (800ed68 <HAL_DMA_Init+0xc0>)
 800ecbe:	18e8      	adds	r0, r5, r3
 800ecc0:	f7f1 fa52 	bl	8000168 <__udivsi3>
 800ecc4:	4b29      	ldr	r3, [pc, #164]	@ (800ed6c <HAL_DMA_Init+0xc4>)
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ecc6:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA1;
 800ecc8:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800ecca:	2302      	movs	r3, #2
 800eccc:	1da6      	adds	r6, r4, #6
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800ecce:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800ecd0:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ecd2:	682b      	ldr	r3, [r5, #0]
 800ecd4:	4a26      	ldr	r2, [pc, #152]	@ (800ed70 <HAL_DMA_Init+0xc8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800ecd6:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ecd8:	4013      	ands	r3, r2
 800ecda:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800ecdc:	68e3      	ldr	r3, [r4, #12]
 800ecde:	6921      	ldr	r1, [r4, #16]
 800ece0:	433b      	orrs	r3, r7
 800ece2:	430b      	orrs	r3, r1
 800ece4:	6961      	ldr	r1, [r4, #20]
 800ece6:	682a      	ldr	r2, [r5, #0]
 800ece8:	430b      	orrs	r3, r1
 800ecea:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ecec:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800ecee:	430b      	orrs	r3, r1
 800ecf0:	69e1      	ldr	r1, [r4, #28]
 800ecf2:	430b      	orrs	r3, r1
 800ecf4:	6a21      	ldr	r1, [r4, #32]
 800ecf6:	430b      	orrs	r3, r1
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ecfc:	f7ff ffae 	bl	800ec5c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ed00:	2380      	movs	r3, #128	@ 0x80
 800ed02:	01db      	lsls	r3, r3, #7
 800ed04:	429f      	cmp	r7, r3
 800ed06:	d101      	bne.n	800ed0c <HAL_DMA_Init+0x64>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ed0c:	6862      	ldr	r2, [r4, #4]
 800ed0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ed10:	b2d3      	uxtb	r3, r2
 800ed12:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ed14:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800ed16:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ed18:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ed1a:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ed1c:	2a03      	cmp	r2, #3
 800ed1e:	d81b      	bhi.n	800ed58 <HAL_DMA_Init+0xb0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800ed20:	4a14      	ldr	r2, [pc, #80]	@ (800ed74 <HAL_DMA_Init+0xcc>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ed22:	4815      	ldr	r0, [pc, #84]	@ (800ed78 <HAL_DMA_Init+0xd0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800ed24:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800ed26:	2201      	movs	r2, #1
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	409a      	lsls	r2, r3
 800ed2c:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800ed2e:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ed30:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800ed32:	0089      	lsls	r1, r1, #2
 800ed34:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ed36:	65a0      	str	r0, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ed38:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ed3a:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ed3c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800ed3e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ed40:	63e0      	str	r0, [r4, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 800ed42:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800ed44:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800ed46:	77e0      	strb	r0, [r4, #31]
}
 800ed48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800ed4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed7c <HAL_DMA_Init+0xd4>)
 800ed4c:	18e8      	adds	r0, r5, r3
 800ed4e:	f7f1 fa0b 	bl	8000168 <__udivsi3>
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ed52:	4b0b      	ldr	r3, [pc, #44]	@ (800ed80 <HAL_DMA_Init+0xd8>)
 800ed54:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA2;
 800ed56:	e7b7      	b.n	800ecc8 <HAL_DMA_Init+0x20>
    hdma->DMAmuxRequestGen = 0U;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ed5c:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ed5e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800ed60:	e7ec      	b.n	800ed3c <HAL_DMA_Init+0x94>
 800ed62:	46c0      	nop			@ (mov r8, r8)
 800ed64:	40020407 	.word	0x40020407
 800ed68:	bffdfff8 	.word	0xbffdfff8
 800ed6c:	40020000 	.word	0x40020000
 800ed70:	ffff800f 	.word	0xffff800f
 800ed74:	1000823f 	.word	0x1000823f
 800ed78:	40020940 	.word	0x40020940
 800ed7c:	bffdfbf8 	.word	0xbffdfbf8
 800ed80:	40020400 	.word	0x40020400

0800ed84 <HAL_DMA_Start_IT>:
{
 800ed84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800ed86:	1d45      	adds	r5, r0, #5
{
 800ed88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800ed8a:	7fee      	ldrb	r6, [r5, #31]
{
 800ed8c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800ed8e:	2002      	movs	r0, #2
 800ed90:	2e01      	cmp	r6, #1
 800ed92:	d033      	beq.n	800edfc <HAL_DMA_Start_IT+0x78>
 800ed94:	3801      	subs	r0, #1
 800ed96:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 800ed98:	1da7      	adds	r7, r4, #6
 800ed9a:	7ffe      	ldrb	r6, [r7, #31]
 800ed9c:	46b4      	mov	ip, r6
 800ed9e:	4663      	mov	r3, ip
 800eda0:	b2f6      	uxtb	r6, r6
 800eda2:	9600      	str	r6, [sp, #0]
 800eda4:	2600      	movs	r6, #0
 800eda6:	4283      	cmp	r3, r0
 800eda8:	d130      	bne.n	800ee0c <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 800edaa:	3001      	adds	r0, #1
 800edac:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 800edae:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800edb0:	63e6      	str	r6, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800edb2:	6828      	ldr	r0, [r5, #0]
 800edb4:	9b00      	ldr	r3, [sp, #0]
 800edb6:	4398      	bics	r0, r3
 800edb8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800edba:	9b01      	ldr	r3, [sp, #4]
 800edbc:	0020      	movs	r0, r4
 800edbe:	f7ff ff31 	bl	800ec24 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800edc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800edc4:	42b3      	cmp	r3, r6
 800edc6:	d01a      	beq.n	800edfe <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800edc8:	230e      	movs	r3, #14
 800edca:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800edcc:	4313      	orrs	r3, r2
 800edce:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800edd0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	03d2      	lsls	r2, r2, #15
 800edd6:	d504      	bpl.n	800ede2 <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800edd8:	2280      	movs	r2, #128	@ 0x80
 800edda:	6819      	ldr	r1, [r3, #0]
 800eddc:	0052      	lsls	r2, r2, #1
 800edde:	430a      	orrs	r2, r1
 800ede0:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800ede2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d004      	beq.n	800edf2 <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ede8:	2280      	movs	r2, #128	@ 0x80
 800edea:	6819      	ldr	r1, [r3, #0]
 800edec:	0052      	lsls	r2, r2, #1
 800edee:	430a      	orrs	r2, r1
 800edf0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800edf2:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800edf4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800edf6:	682a      	ldr	r2, [r5, #0]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	602b      	str	r3, [r5, #0]
}
 800edfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800edfe:	2204      	movs	r2, #4
 800ee00:	682b      	ldr	r3, [r5, #0]
 800ee02:	4393      	bics	r3, r2
 800ee04:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ee06:	682a      	ldr	r2, [r5, #0]
 800ee08:	230a      	movs	r3, #10
 800ee0a:	e7df      	b.n	800edcc <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800ee0c:	2380      	movs	r3, #128	@ 0x80
 800ee0e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800ee10:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 800ee12:	e7f3      	b.n	800edfc <HAL_DMA_Start_IT+0x78>

0800ee14 <HAL_DMA_IRQHandler>:
{
 800ee14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ee16:	261c      	movs	r6, #28
 800ee18:	2704      	movs	r7, #4
 800ee1a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ee1c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ee1e:	4032      	ands	r2, r6
 800ee20:	003e      	movs	r6, r7
 800ee22:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ee24:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800ee26:	6803      	ldr	r3, [r0, #0]
 800ee28:	681c      	ldr	r4, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ee2a:	4235      	tst	r5, r6
 800ee2c:	d00d      	beq.n	800ee4a <HAL_DMA_IRQHandler+0x36>
 800ee2e:	423c      	tst	r4, r7
 800ee30:	d00b      	beq.n	800ee4a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	0692      	lsls	r2, r2, #26
 800ee36:	d402      	bmi.n	800ee3e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	43ba      	bics	r2, r7
 800ee3c:	601a      	str	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800ee3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ee40:	604e      	str	r6, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d01d      	beq.n	800ee82 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800ee46:	4798      	blx	r3
  return;
 800ee48:	e01b      	b.n	800ee82 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800ee4a:	2702      	movs	r7, #2
 800ee4c:	003e      	movs	r6, r7
 800ee4e:	4096      	lsls	r6, r2
 800ee50:	4235      	tst	r5, r6
 800ee52:	d019      	beq.n	800ee88 <HAL_DMA_IRQHandler+0x74>
 800ee54:	423c      	tst	r4, r7
 800ee56:	d017      	beq.n	800ee88 <HAL_DMA_IRQHandler+0x74>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	0692      	lsls	r2, r2, #26
 800ee5c:	d406      	bmi.n	800ee6c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ee5e:	210a      	movs	r1, #10
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	438a      	bics	r2, r1
 800ee64:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800ee66:	3909      	subs	r1, #9
 800ee68:	1d82      	adds	r2, r0, #6
 800ee6a:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800ee6c:	4a12      	ldr	r2, [pc, #72]	@ (800eeb8 <HAL_DMA_IRQHandler+0xa4>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d908      	bls.n	800ee84 <HAL_DMA_IRQHandler+0x70>
 800ee72:	4b12      	ldr	r3, [pc, #72]	@ (800eebc <HAL_DMA_IRQHandler+0xa8>)
    __HAL_UNLOCK(hdma);
 800ee74:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800ee76:	605e      	str	r6, [r3, #4]
    __HAL_UNLOCK(hdma);
 800ee78:	1d43      	adds	r3, r0, #5
 800ee7a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800ee7c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d1e1      	bne.n	800ee46 <HAL_DMA_IRQHandler+0x32>
}
 800ee82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800ee84:	4b0e      	ldr	r3, [pc, #56]	@ (800eec0 <HAL_DMA_IRQHandler+0xac>)
 800ee86:	e7f5      	b.n	800ee74 <HAL_DMA_IRQHandler+0x60>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800ee88:	2608      	movs	r6, #8
 800ee8a:	0037      	movs	r7, r6
 800ee8c:	4097      	lsls	r7, r2
 800ee8e:	423d      	tst	r5, r7
 800ee90:	d0f7      	beq.n	800ee82 <HAL_DMA_IRQHandler+0x6e>
 800ee92:	4234      	tst	r4, r6
 800ee94:	d0f5      	beq.n	800ee82 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ee96:	250e      	movs	r5, #14
 800ee98:	681c      	ldr	r4, [r3, #0]
 800ee9a:	43ac      	bics	r4, r5
 800ee9c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ee9e:	2301      	movs	r3, #1
 800eea0:	001c      	movs	r4, r3
 800eea2:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800eea4:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800eea6:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800eea8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800eeaa:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800eeac:	2200      	movs	r2, #0
 800eeae:	1d43      	adds	r3, r0, #5
 800eeb0:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800eeb2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800eeb4:	e7e3      	b.n	800ee7e <HAL_DMA_IRQHandler+0x6a>
 800eeb6:	46c0      	nop			@ (mov r8, r8)
 800eeb8:	40020080 	.word	0x40020080
 800eebc:	40020400 	.word	0x40020400
 800eec0:	40020000 	.word	0x40020000

0800eec4 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;
 800eec4:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800eec6:	4b05      	ldr	r3, [pc, #20]	@ (800eedc <HAL_FLASH_Unlock+0x18>)
 800eec8:	695a      	ldr	r2, [r3, #20]
 800eeca:	4282      	cmp	r2, r0
 800eecc:	da05      	bge.n	800eeda <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800eece:	4a04      	ldr	r2, [pc, #16]	@ (800eee0 <HAL_FLASH_Unlock+0x1c>)
 800eed0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800eed2:	4a04      	ldr	r2, [pc, #16]	@ (800eee4 <HAL_FLASH_Unlock+0x20>)
 800eed4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800eed6:	6958      	ldr	r0, [r3, #20]
 800eed8:	0fc0      	lsrs	r0, r0, #31
      status = HAL_ERROR;
    }
  }

  return status;
}
 800eeda:	4770      	bx	lr
 800eedc:	40022000 	.word	0x40022000
 800eee0:	45670123 	.word	0x45670123
 800eee4:	cdef89ab 	.word	0xcdef89ab

0800eee8 <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800eee8:	2280      	movs	r2, #128	@ 0x80
 800eeea:	4b04      	ldr	r3, [pc, #16]	@ (800eefc <HAL_FLASH_Lock+0x14>)
 800eeec:	0612      	lsls	r2, r2, #24
 800eeee:	6959      	ldr	r1, [r3, #20]
 800eef0:	430a      	orrs	r2, r1
 800eef2:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800eef4:	6958      	ldr	r0, [r3, #20]
 800eef6:	43c0      	mvns	r0, r0
  {
    status = HAL_OK;
  }

  return status;
 800eef8:	0fc0      	lsrs	r0, r0, #31
}
 800eefa:	4770      	bx	lr
 800eefc:	40022000 	.word	0x40022000

0800ef00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
  error = FLASH_SR_BSY1;
  while ((FLASH->SR & error) != 0x00U)
 800ef04:	2780      	movs	r7, #128	@ 0x80
  uint32_t timeout = HAL_GetTick() + Timeout;
 800ef06:	f7fe ff69 	bl	800dddc <HAL_GetTick>
  while ((FLASH->SR & error) != 0x00U)
 800ef0a:	027f      	lsls	r7, r7, #9
  uint32_t timeout = HAL_GetTick() + Timeout;
 800ef0c:	1946      	adds	r6, r0, r5
  while ((FLASH->SR & error) != 0x00U)
 800ef0e:	4c12      	ldr	r4, [pc, #72]	@ (800ef58 <FLASH_WaitForLastOperation+0x58>)
 800ef10:	6923      	ldr	r3, [r4, #16]
 800ef12:	423b      	tst	r3, r7
 800ef14:	d10b      	bne.n	800ef2e <FLASH_WaitForLastOperation+0x2e>
      return HAL_TIMEOUT;
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800ef16:	6922      	ldr	r2, [r4, #16]
 800ef18:	4b10      	ldr	r3, [pc, #64]	@ (800ef5c <FLASH_WaitForLastOperation+0x5c>)
 800ef1a:	0011      	movs	r1, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800ef1c:	4810      	ldr	r0, [pc, #64]	@ (800ef60 <FLASH_WaitForLastOperation+0x60>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800ef1e:	4019      	ands	r1, r3
  FLASH->SR = FLASH_SR_CLEAR;
 800ef20:	6120      	str	r0, [r4, #16]

  if (error != 0x00U)
 800ef22:	421a      	tst	r2, r3
 800ef24:	d009      	beq.n	800ef3a <FLASH_WaitForLastOperation+0x3a>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800ef26:	4b0f      	ldr	r3, [pc, #60]	@ (800ef64 <FLASH_WaitForLastOperation+0x64>)
    return HAL_ERROR;
 800ef28:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800ef2a:	6059      	str	r1, [r3, #4]
    return HAL_ERROR;
 800ef2c:	e004      	b.n	800ef38 <FLASH_WaitForLastOperation+0x38>
    if (HAL_GetTick() >= timeout)
 800ef2e:	f7fe ff55 	bl	800dddc <HAL_GetTick>
 800ef32:	42b0      	cmp	r0, r6
 800ef34:	d3eb      	bcc.n	800ef0e <FLASH_WaitForLastOperation+0xe>
      return HAL_TIMEOUT;
 800ef36:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800ef38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  timeout = HAL_GetTick() + Timeout;
 800ef3a:	f7fe ff4f 	bl	800dddc <HAL_GetTick>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800ef3e:	2680      	movs	r6, #128	@ 0x80
  timeout = HAL_GetTick() + Timeout;
 800ef40:	1945      	adds	r5, r0, r5
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800ef42:	02f6      	lsls	r6, r6, #11
 800ef44:	6923      	ldr	r3, [r4, #16]
 800ef46:	0018      	movs	r0, r3
 800ef48:	4030      	ands	r0, r6
 800ef4a:	4233      	tst	r3, r6
 800ef4c:	d0f4      	beq.n	800ef38 <FLASH_WaitForLastOperation+0x38>
    if (HAL_GetTick() >= timeout)
 800ef4e:	f7fe ff45 	bl	800dddc <HAL_GetTick>
 800ef52:	42a8      	cmp	r0, r5
 800ef54:	d3f6      	bcc.n	800ef44 <FLASH_WaitForLastOperation+0x44>
 800ef56:	e7ee      	b.n	800ef36 <FLASH_WaitForLastOperation+0x36>
 800ef58:	40022000 	.word	0x40022000
 800ef5c:	000083fa 	.word	0x000083fa
 800ef60:	000083fb 	.word	0x000083fb
 800ef64:	200030e0 	.word	0x200030e0

0800ef68 <HAL_FLASH_Program>:
{
 800ef68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800ef6a:	4e17      	ldr	r6, [pc, #92]	@ (800efc8 <HAL_FLASH_Program+0x60>)
{
 800ef6c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 800ef6e:	7833      	ldrb	r3, [r6, #0]
{
 800ef70:	0004      	movs	r4, r0
 800ef72:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 800ef74:	2002      	movs	r0, #2
{
 800ef76:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(&pFlash);
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d01e      	beq.n	800efba <HAL_FLASH_Program+0x52>
 800ef7c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ef7e:	20fa      	movs	r0, #250	@ 0xfa
  __HAL_LOCK(&pFlash);
 800ef80:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ef82:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ef84:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ef86:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ef88:	f7ff ffba 	bl	800ef00 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d112      	bne.n	800efb6 <HAL_FLASH_Program+0x4e>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ef90:	4f0e      	ldr	r7, [pc, #56]	@ (800efcc <HAL_FLASH_Program+0x64>)
 800ef92:	2c01      	cmp	r4, #1
 800ef94:	d112      	bne.n	800efbc <HAL_FLASH_Program+0x54>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	4323      	orrs	r3, r4
 800ef9a:	617b      	str	r3, [r7, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800ef9c:	9b00      	ldr	r3, [sp, #0]
 800ef9e:	602b      	str	r3, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800efa0:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800efa4:	9b01      	ldr	r3, [sp, #4]
 800efa6:	606b      	str	r3, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800efa8:	20fa      	movs	r0, #250	@ 0xfa
 800efaa:	0080      	lsls	r0, r0, #2
 800efac:	f7ff ffa8 	bl	800ef00 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	43a3      	bics	r3, r4
 800efb4:	617b      	str	r3, [r7, #20]
  __HAL_UNLOCK(&pFlash);
 800efb6:	2300      	movs	r3, #0
 800efb8:	7033      	strb	r3, [r6, #0]
}
 800efba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800efbc:	0028      	movs	r0, r5
 800efbe:	9900      	ldr	r1, [sp, #0]
 800efc0:	f00d face 	bl	801c560 <__FLASH_Program_Fast_veneer>
 800efc4:	e7f0      	b.n	800efa8 <HAL_FLASH_Program+0x40>
 800efc6:	46c0      	nop			@ (mov r8, r8)
 800efc8:	200030e0 	.word	0x200030e0
 800efcc:	40022000 	.word	0x40022000

0800efd0 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800efd0:	4a04      	ldr	r2, [pc, #16]	@ (800efe4 <FLASH_PageErase+0x14>)
 800efd2:	4905      	ldr	r1, [pc, #20]	@ (800efe8 <FLASH_PageErase+0x18>)
 800efd4:	6953      	ldr	r3, [r2, #20]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800efd6:	00c0      	lsls	r0, r0, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800efd8:	400b      	ands	r3, r1
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800efda:	4318      	orrs	r0, r3
 800efdc:	4b03      	ldr	r3, [pc, #12]	@ (800efec <FLASH_PageErase+0x1c>)
 800efde:	4303      	orrs	r3, r0
 800efe0:	6153      	str	r3, [r2, #20]
}
 800efe2:	4770      	bx	lr
 800efe4:	40022000 	.word	0x40022000
 800efe8:	fffffc07 	.word	0xfffffc07
 800efec:	00010002 	.word	0x00010002

0800eff0 <HAL_FLASHEx_Erase>:
{
 800eff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800eff2:	4f20      	ldr	r7, [pc, #128]	@ (800f074 <HAL_FLASHEx_Erase+0x84>)
{
 800eff4:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 800eff6:	783b      	ldrb	r3, [r7, #0]
 800eff8:	2402      	movs	r4, #2
{
 800effa:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 800effc:	2b01      	cmp	r3, #1
 800effe:	d019      	beq.n	800f034 <HAL_FLASHEx_Erase+0x44>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f000:	20fa      	movs	r0, #250	@ 0xfa
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f002:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 800f004:	2601      	movs	r6, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f006:	0080      	lsls	r0, r0, #2
  __HAL_LOCK(&pFlash);
 800f008:	703e      	strb	r6, [r7, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f00a:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f00c:	f7ff ff78 	bl	800ef00 <FLASH_WaitForLastOperation>
 800f010:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 800f012:	d10d      	bne.n	800f030 <HAL_FLASHEx_Erase+0x40>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800f014:	682b      	ldr	r3, [r5, #0]
    pEraseInit->Banks = FLASH_BANK_1;
 800f016:	606e      	str	r6, [r5, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800f018:	2b04      	cmp	r3, #4
 800f01a:	d10d      	bne.n	800f038 <HAL_FLASHEx_Erase+0x48>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f01c:	20fa      	movs	r0, #250	@ 0xfa
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800f01e:	4a16      	ldr	r2, [pc, #88]	@ (800f078 <HAL_FLASHEx_Erase+0x88>)
 800f020:	4b16      	ldr	r3, [pc, #88]	@ (800f07c <HAL_FLASHEx_Erase+0x8c>)
 800f022:	6951      	ldr	r1, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f024:	0080      	lsls	r0, r0, #2
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800f026:	430b      	orrs	r3, r1
 800f028:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f02a:	f7ff ff69 	bl	800ef00 <FLASH_WaitForLastOperation>
 800f02e:	0004      	movs	r4, r0
  __HAL_UNLOCK(&pFlash);
 800f030:	2300      	movs	r3, #0
 800f032:	703b      	strb	r3, [r7, #0]
}
 800f034:	0020      	movs	r0, r4
 800f036:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *PageError = 0xFFFFFFFFU;
 800f038:	2301      	movs	r3, #1
 800f03a:	9a01      	ldr	r2, [sp, #4]
 800f03c:	425b      	negs	r3, r3
 800f03e:	6013      	str	r3, [r2, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f040:	68ae      	ldr	r6, [r5, #8]
 800f042:	68ab      	ldr	r3, [r5, #8]
 800f044:	68ea      	ldr	r2, [r5, #12]
 800f046:	189b      	adds	r3, r3, r2
 800f048:	42b3      	cmp	r3, r6
 800f04a:	d90b      	bls.n	800f064 <HAL_FLASHEx_Erase+0x74>
        FLASH_PageErase(index);
 800f04c:	0030      	movs	r0, r6
 800f04e:	f7ff ffbf 	bl	800efd0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f052:	20fa      	movs	r0, #250	@ 0xfa
 800f054:	0080      	lsls	r0, r0, #2
 800f056:	f7ff ff53 	bl	800ef00 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d008      	beq.n	800f070 <HAL_FLASHEx_Erase+0x80>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f05e:	0004      	movs	r4, r0
          *PageError = index;
 800f060:	9b01      	ldr	r3, [sp, #4]
 800f062:	601e      	str	r6, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f064:	2102      	movs	r1, #2
 800f066:	4a04      	ldr	r2, [pc, #16]	@ (800f078 <HAL_FLASHEx_Erase+0x88>)
 800f068:	6953      	ldr	r3, [r2, #20]
 800f06a:	438b      	bics	r3, r1
 800f06c:	6153      	str	r3, [r2, #20]
 800f06e:	e7df      	b.n	800f030 <HAL_FLASHEx_Erase+0x40>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f070:	3601      	adds	r6, #1
 800f072:	e7e6      	b.n	800f042 <HAL_FLASHEx_Erase+0x52>
 800f074:	200030e0 	.word	0x200030e0
 800f078:	40022000 	.word	0x40022000
 800f07c:	00010004 	.word	0x00010004

0800f080 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800f080:	2300      	movs	r3, #0
{
 800f082:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f084:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f086:	680a      	ldr	r2, [r1, #0]
 800f088:	0014      	movs	r4, r2
 800f08a:	40dc      	lsrs	r4, r3
 800f08c:	d101      	bne.n	800f092 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800f08e:	b005      	add	sp, #20
 800f090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f092:	2501      	movs	r5, #1
 800f094:	0014      	movs	r4, r2
 800f096:	409d      	lsls	r5, r3
 800f098:	402c      	ands	r4, r5
 800f09a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800f09c:	422a      	tst	r2, r5
 800f09e:	d100      	bne.n	800f0a2 <HAL_GPIO_Init+0x22>
 800f0a0:	e099      	b.n	800f1d6 <HAL_GPIO_Init+0x156>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f0a2:	684a      	ldr	r2, [r1, #4]
 800f0a4:	005f      	lsls	r7, r3, #1
 800f0a6:	4694      	mov	ip, r2
 800f0a8:	2203      	movs	r2, #3
 800f0aa:	4664      	mov	r4, ip
 800f0ac:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f0ae:	2403      	movs	r4, #3
 800f0b0:	40bc      	lsls	r4, r7
 800f0b2:	43e4      	mvns	r4, r4
 800f0b4:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f0b6:	1e54      	subs	r4, r2, #1
 800f0b8:	2c01      	cmp	r4, #1
 800f0ba:	d82e      	bhi.n	800f11a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 800f0bc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f0be:	9c01      	ldr	r4, [sp, #4]
 800f0c0:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f0c2:	68cc      	ldr	r4, [r1, #12]
 800f0c4:	40bc      	lsls	r4, r7
 800f0c6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800f0c8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800f0ca:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800f0cc:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f0ce:	43ac      	bics	r4, r5
 800f0d0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800f0d2:	4664      	mov	r4, ip
 800f0d4:	0924      	lsrs	r4, r4, #4
 800f0d6:	4034      	ands	r4, r6
 800f0d8:	409c      	lsls	r4, r3
 800f0da:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800f0dc:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800f0de:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800f0e0:	9c01      	ldr	r4, [sp, #4]
 800f0e2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800f0e4:	688c      	ldr	r4, [r1, #8]
 800f0e6:	40bc      	lsls	r4, r7
 800f0e8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800f0ea:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f0ec:	2a02      	cmp	r2, #2
 800f0ee:	d116      	bne.n	800f11e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f0f0:	2507      	movs	r5, #7
 800f0f2:	260f      	movs	r6, #15
 800f0f4:	401d      	ands	r5, r3
 800f0f6:	00ad      	lsls	r5, r5, #2
 800f0f8:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800f0fa:	08dc      	lsrs	r4, r3, #3
 800f0fc:	00a4      	lsls	r4, r4, #2
 800f0fe:	1904      	adds	r4, r0, r4
 800f100:	9402      	str	r4, [sp, #8]
 800f102:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f104:	9603      	str	r6, [sp, #12]
 800f106:	0026      	movs	r6, r4
 800f108:	9c03      	ldr	r4, [sp, #12]
 800f10a:	43a6      	bics	r6, r4
 800f10c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800f10e:	690e      	ldr	r6, [r1, #16]
 800f110:	40ae      	lsls	r6, r5
 800f112:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 800f114:	9c02      	ldr	r4, [sp, #8]
 800f116:	6226      	str	r6, [r4, #32]
 800f118:	e001      	b.n	800f11e <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f11a:	2a03      	cmp	r2, #3
 800f11c:	d1df      	bne.n	800f0de <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800f11e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800f120:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f122:	9d01      	ldr	r5, [sp, #4]
 800f124:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800f126:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f128:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800f12a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f12c:	4662      	mov	r2, ip
 800f12e:	02a4      	lsls	r4, r4, #10
 800f130:	4222      	tst	r2, r4
 800f132:	d050      	beq.n	800f1d6 <HAL_GPIO_Init+0x156>
        temp = EXTI->EXTICR[position >> 2u];
 800f134:	4a29      	ldr	r2, [pc, #164]	@ (800f1dc <HAL_GPIO_Init+0x15c>)
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f136:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 800f138:	089c      	lsrs	r4, r3, #2
 800f13a:	00a4      	lsls	r4, r4, #2
 800f13c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f13e:	220f      	movs	r2, #15
 800f140:	401d      	ands	r5, r3
 800f142:	00ed      	lsls	r5, r5, #3
 800f144:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f146:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800f148:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f14a:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f14c:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f14e:	2200      	movs	r2, #0
 800f150:	42b8      	cmp	r0, r7
 800f152:	d014      	beq.n	800f17e <HAL_GPIO_Init+0xfe>
 800f154:	4f22      	ldr	r7, [pc, #136]	@ (800f1e0 <HAL_GPIO_Init+0x160>)
 800f156:	3201      	adds	r2, #1
 800f158:	42b8      	cmp	r0, r7
 800f15a:	d010      	beq.n	800f17e <HAL_GPIO_Init+0xfe>
 800f15c:	4f21      	ldr	r7, [pc, #132]	@ (800f1e4 <HAL_GPIO_Init+0x164>)
 800f15e:	3201      	adds	r2, #1
 800f160:	42b8      	cmp	r0, r7
 800f162:	d00c      	beq.n	800f17e <HAL_GPIO_Init+0xfe>
 800f164:	4f20      	ldr	r7, [pc, #128]	@ (800f1e8 <HAL_GPIO_Init+0x168>)
 800f166:	3201      	adds	r2, #1
 800f168:	42b8      	cmp	r0, r7
 800f16a:	d008      	beq.n	800f17e <HAL_GPIO_Init+0xfe>
 800f16c:	4f1f      	ldr	r7, [pc, #124]	@ (800f1ec <HAL_GPIO_Init+0x16c>)
 800f16e:	3201      	adds	r2, #1
 800f170:	42b8      	cmp	r0, r7
 800f172:	d004      	beq.n	800f17e <HAL_GPIO_Init+0xfe>
 800f174:	4a1e      	ldr	r2, [pc, #120]	@ (800f1f0 <HAL_GPIO_Init+0x170>)
 800f176:	1882      	adds	r2, r0, r2
 800f178:	1e57      	subs	r7, r2, #1
 800f17a:	41ba      	sbcs	r2, r7
 800f17c:	3205      	adds	r2, #5
 800f17e:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f180:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f182:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800f184:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800f186:	4c15      	ldr	r4, [pc, #84]	@ (800f1dc <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 800f188:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800f18a:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 800f18c:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800f18e:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 800f190:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f192:	02ff      	lsls	r7, r7, #11
 800f194:	d401      	bmi.n	800f19a <HAL_GPIO_Init+0x11a>
        temp &= ~(iocurrent);
 800f196:	0035      	movs	r5, r6
 800f198:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f19a:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 800f19c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800f19e:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800f1a0:	9d00      	ldr	r5, [sp, #0]
 800f1a2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f1a4:	02bf      	lsls	r7, r7, #10
 800f1a6:	d401      	bmi.n	800f1ac <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 800f1a8:	0035      	movs	r5, r6
 800f1aa:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f1ac:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 800f1ae:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 800f1b0:	4c10      	ldr	r4, [pc, #64]	@ (800f1f4 <HAL_GPIO_Init+0x174>)
          temp |= iocurrent;
 800f1b2:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 800f1b4:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800f1b6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f1b8:	03bf      	lsls	r7, r7, #14
 800f1ba:	d401      	bmi.n	800f1c0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 800f1bc:	0035      	movs	r5, r6
 800f1be:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f1c0:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 800f1c2:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 800f1c4:	4c0c      	ldr	r4, [pc, #48]	@ (800f1f8 <HAL_GPIO_Init+0x178>)
          temp |= iocurrent;
 800f1c6:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 800f1c8:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 800f1ca:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f1cc:	03ff      	lsls	r7, r7, #15
 800f1ce:	d401      	bmi.n	800f1d4 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800f1d0:	4015      	ands	r5, r2
 800f1d2:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800f1d4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	e755      	b.n	800f086 <HAL_GPIO_Init+0x6>
 800f1da:	46c0      	nop			@ (mov r8, r8)
 800f1dc:	40021800 	.word	0x40021800
 800f1e0:	50000400 	.word	0x50000400
 800f1e4:	50000800 	.word	0x50000800
 800f1e8:	50000c00 	.word	0x50000c00
 800f1ec:	50001000 	.word	0x50001000
 800f1f0:	afffec00 	.word	0xafffec00
 800f1f4:	40021808 	.word	0x40021808
 800f1f8:	40021804 	.word	0x40021804

0800f1fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800f1fe:	2200      	movs	r2, #0
{
 800f200:	000f      	movs	r7, r1
 800f202:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800f204:	003b      	movs	r3, r7
 800f206:	40d3      	lsrs	r3, r2
 800f208:	d101      	bne.n	800f20e <HAL_GPIO_DeInit+0x12>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
  }
}
 800f20a:	b005      	add	sp, #20
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f20e:	2301      	movs	r3, #1
 800f210:	4093      	lsls	r3, r2
 800f212:	001c      	movs	r4, r3
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	403c      	ands	r4, r7
    if (iocurrent != 0x00u)
 800f218:	421f      	tst	r7, r3
 800f21a:	d05c      	beq.n	800f2d6 <HAL_GPIO_DeInit+0xda>
      tmp = EXTI->EXTICR[position >> 2u];
 800f21c:	4b2f      	ldr	r3, [pc, #188]	@ (800f2dc <HAL_GPIO_DeInit+0xe0>)
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f21e:	2503      	movs	r5, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800f220:	0891      	lsrs	r1, r2, #2
 800f222:	0089      	lsls	r1, r1, #2
 800f224:	18c9      	adds	r1, r1, r3
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f226:	230f      	movs	r3, #15
 800f228:	4015      	ands	r5, r2
 800f22a:	00ed      	lsls	r5, r5, #3
 800f22c:	40ab      	lsls	r3, r5
      tmp = EXTI->EXTICR[position >> 2u];
 800f22e:	6e0e      	ldr	r6, [r1, #96]	@ 0x60
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800f230:	9302      	str	r3, [sp, #8]
 800f232:	401e      	ands	r6, r3
 800f234:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 800f236:	26a0      	movs	r6, #160	@ 0xa0
 800f238:	2300      	movs	r3, #0
 800f23a:	05f6      	lsls	r6, r6, #23
 800f23c:	42b0      	cmp	r0, r6
 800f23e:	d018      	beq.n	800f272 <HAL_GPIO_DeInit+0x76>
 800f240:	4b27      	ldr	r3, [pc, #156]	@ (800f2e0 <HAL_GPIO_DeInit+0xe4>)
 800f242:	469c      	mov	ip, r3
 800f244:	2301      	movs	r3, #1
 800f246:	4560      	cmp	r0, ip
 800f248:	d013      	beq.n	800f272 <HAL_GPIO_DeInit+0x76>
 800f24a:	4b26      	ldr	r3, [pc, #152]	@ (800f2e4 <HAL_GPIO_DeInit+0xe8>)
 800f24c:	469c      	mov	ip, r3
 800f24e:	2302      	movs	r3, #2
 800f250:	4560      	cmp	r0, ip
 800f252:	d00e      	beq.n	800f272 <HAL_GPIO_DeInit+0x76>
 800f254:	4b24      	ldr	r3, [pc, #144]	@ (800f2e8 <HAL_GPIO_DeInit+0xec>)
 800f256:	469c      	mov	ip, r3
 800f258:	2303      	movs	r3, #3
 800f25a:	4560      	cmp	r0, ip
 800f25c:	d009      	beq.n	800f272 <HAL_GPIO_DeInit+0x76>
 800f25e:	4b23      	ldr	r3, [pc, #140]	@ (800f2ec <HAL_GPIO_DeInit+0xf0>)
 800f260:	469c      	mov	ip, r3
 800f262:	2304      	movs	r3, #4
 800f264:	4560      	cmp	r0, ip
 800f266:	d004      	beq.n	800f272 <HAL_GPIO_DeInit+0x76>
 800f268:	4b21      	ldr	r3, [pc, #132]	@ (800f2f0 <HAL_GPIO_DeInit+0xf4>)
 800f26a:	18c3      	adds	r3, r0, r3
 800f26c:	1e5e      	subs	r6, r3, #1
 800f26e:	41b3      	sbcs	r3, r6
 800f270:	3305      	adds	r3, #5
 800f272:	40ab      	lsls	r3, r5
 800f274:	9d03      	ldr	r5, [sp, #12]
 800f276:	42ab      	cmp	r3, r5
 800f278:	d112      	bne.n	800f2a0 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 800f27a:	4e1e      	ldr	r6, [pc, #120]	@ (800f2f4 <HAL_GPIO_DeInit+0xf8>)
 800f27c:	4b17      	ldr	r3, [pc, #92]	@ (800f2dc <HAL_GPIO_DeInit+0xe0>)
 800f27e:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800f280:	43a5      	bics	r5, r4
 800f282:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800f284:	4e1c      	ldr	r6, [pc, #112]	@ (800f2f8 <HAL_GPIO_DeInit+0xfc>)
 800f286:	6ff5      	ldr	r5, [r6, #124]	@ 0x7c
 800f288:	43a5      	bics	r5, r4
 800f28a:	67f5      	str	r5, [r6, #124]	@ 0x7c
        EXTI->FTSR1 &= ~(iocurrent);
 800f28c:	685d      	ldr	r5, [r3, #4]
 800f28e:	43a5      	bics	r5, r4
 800f290:	605d      	str	r5, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800f292:	681d      	ldr	r5, [r3, #0]
 800f294:	43a5      	bics	r5, r4
 800f296:	601d      	str	r5, [r3, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800f298:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
 800f29a:	9c02      	ldr	r4, [sp, #8]
 800f29c:	43a3      	bics	r3, r4
 800f29e:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f2a0:	2403      	movs	r4, #3
 800f2a2:	0051      	lsls	r1, r2, #1
 800f2a4:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800f2a6:	2107      	movs	r1, #7
 800f2a8:	260f      	movs	r6, #15
 800f2aa:	4011      	ands	r1, r2
 800f2ac:	0089      	lsls	r1, r1, #2
 800f2ae:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f2b0:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f2b2:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800f2b4:	4323      	orrs	r3, r4
 800f2b6:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 800f2b8:	08d3      	lsrs	r3, r2, #3
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	18c3      	adds	r3, r0, r3
 800f2be:	6a1d      	ldr	r5, [r3, #32]
 800f2c0:	43b5      	bics	r5, r6
 800f2c2:	621d      	str	r5, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800f2c4:	6883      	ldr	r3, [r0, #8]
 800f2c6:	43a3      	bics	r3, r4
 800f2c8:	6083      	str	r3, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f2ca:	6843      	ldr	r3, [r0, #4]
 800f2cc:	438b      	bics	r3, r1
 800f2ce:	6043      	str	r3, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800f2d0:	68c3      	ldr	r3, [r0, #12]
 800f2d2:	43a3      	bics	r3, r4
 800f2d4:	60c3      	str	r3, [r0, #12]
    position++;
 800f2d6:	3201      	adds	r2, #1
 800f2d8:	e794      	b.n	800f204 <HAL_GPIO_DeInit+0x8>
 800f2da:	46c0      	nop			@ (mov r8, r8)
 800f2dc:	40021800 	.word	0x40021800
 800f2e0:	50000400 	.word	0x50000400
 800f2e4:	50000800 	.word	0x50000800
 800f2e8:	50000c00 	.word	0x50000c00
 800f2ec:	50001000 	.word	0x50001000
 800f2f0:	afffec00 	.word	0xafffec00
 800f2f4:	40021804 	.word	0x40021804
 800f2f8:	40021808 	.word	0x40021808

0800f2fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f2fc:	6900      	ldr	r0, [r0, #16]
 800f2fe:	4008      	ands	r0, r1
 800f300:	1e43      	subs	r3, r0, #1
 800f302:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800f304:	b2c0      	uxtb	r0, r0
}
 800f306:	4770      	bx	lr

0800f308 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f308:	2a00      	cmp	r2, #0
 800f30a:	d001      	beq.n	800f310 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f30c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f30e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f310:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800f312:	e7fc      	b.n	800f30e <HAL_GPIO_WritePin+0x6>

0800f314 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800f314:	4770      	bx	lr
	...

0800f318 <HAL_GPIO_EXTI_IRQHandler>:
{
 800f318:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f31a:	4d08      	ldr	r5, [pc, #32]	@ (800f33c <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 800f31c:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f31e:	68eb      	ldr	r3, [r5, #12]
 800f320:	4218      	tst	r0, r3
 800f322:	d002      	beq.n	800f32a <HAL_GPIO_EXTI_IRQHandler+0x12>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800f324:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800f326:	f7ff fff5 	bl	800f314 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800f32a:	692b      	ldr	r3, [r5, #16]
 800f32c:	4223      	tst	r3, r4
 800f32e:	d003      	beq.n	800f338 <HAL_GPIO_EXTI_IRQHandler+0x20>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f330:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800f332:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f334:	f7f8 ff78 	bl	8008228 <HAL_GPIO_EXTI_Falling_Callback>
}
 800f338:	bd70      	pop	{r4, r5, r6, pc}
 800f33a:	46c0      	nop			@ (mov r8, r8)
 800f33c:	40021800 	.word	0x40021800

0800f340 <HAL_LCD_DeInit>:
  * @brief  DeInitialize the LCD peripheral.
  * @param hlcd LCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LCD_DeInit(LCD_HandleTypeDef *hlcd)
{
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	0004      	movs	r4, r0
  /* Check the LCD handle allocation */
  if (hlcd == NULL)
  {
    return HAL_ERROR;
 800f344:	2001      	movs	r0, #1
  if (hlcd == NULL)
 800f346:	2c00      	cmp	r4, #0
 800f348:	d00b      	beq.n	800f362 <HAL_LCD_DeInit+0x22>
  }

  /* Check the parameters */
  assert_param(IS_LCD_ALL_INSTANCE(hlcd->Instance));

  hlcd->State = HAL_LCD_STATE_BUSY;
 800f34a:	0025      	movs	r5, r4
 800f34c:	2302      	movs	r3, #2
 800f34e:	3535      	adds	r5, #53	@ 0x35

  /* DeInit the low level hardware */
  HAL_LCD_MspDeInit(hlcd);
 800f350:	0020      	movs	r0, r4
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f352:	702b      	strb	r3, [r5, #0]
  HAL_LCD_MspDeInit(hlcd);
 800f354:	f7fa fe42 	bl	8009fdc <HAL_LCD_MspDeInit>

  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f358:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hlcd);
 800f35a:	3434      	adds	r4, #52	@ 0x34
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f35c:	6060      	str	r0, [r4, #4]
  hlcd->State = HAL_LCD_STATE_RESET;
 800f35e:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hlcd);
 800f360:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800f362:	bd70      	pop	{r4, r5, r6, pc}

0800f364 <HAL_LCD_Write>:
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask,
                                uint32_t Data)
{
 800f364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f366:	b085      	sub	sp, #20
 800f368:	9303      	str	r3, [sp, #12]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f36a:	0003      	movs	r3, r0
{
 800f36c:	0004      	movs	r4, r0

    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 800f36e:	2001      	movs	r0, #1
{
 800f370:	9101      	str	r1, [sp, #4]
 800f372:	9202      	str	r2, [sp, #8]
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f374:	3335      	adds	r3, #53	@ 0x35
 800f376:	781a      	ldrb	r2, [r3, #0]
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800f378:	3a01      	subs	r2, #1
 800f37a:	4282      	cmp	r2, r0
 800f37c:	d80f      	bhi.n	800f39e <HAL_LCD_Write+0x3a>
    if (hlcd->State == HAL_LCD_STATE_READY)
 800f37e:	781a      	ldrb	r2, [r3, #0]
 800f380:	b2d1      	uxtb	r1, r2
 800f382:	4282      	cmp	r2, r0
 800f384:	d00d      	beq.n	800f3a2 <HAL_LCD_Write+0x3e>
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 800f386:	9b01      	ldr	r3, [sp, #4]
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	18d2      	adds	r2, r2, r3
 800f38e:	6953      	ldr	r3, [r2, #20]
 800f390:	9902      	ldr	r1, [sp, #8]
    return HAL_OK;
 800f392:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 800f394:	4019      	ands	r1, r3
 800f396:	000b      	movs	r3, r1
 800f398:	9903      	ldr	r1, [sp, #12]
 800f39a:	430b      	orrs	r3, r1
 800f39c:	6153      	str	r3, [r2, #20]
  }
}
 800f39e:	b005      	add	sp, #20
 800f3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_LOCK(hlcd);
 800f3a2:	0026      	movs	r6, r4
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	3634      	adds	r6, #52	@ 0x34
 800f3a8:	7835      	ldrb	r5, [r6, #0]
 800f3aa:	0010      	movs	r0, r2
 800f3ac:	2d01      	cmp	r5, #1
 800f3ae:	d0f6      	beq.n	800f39e <HAL_LCD_Write+0x3a>
 800f3b0:	7031      	strb	r1, [r6, #0]
      hlcd->State = HAL_LCD_STATE_BUSY;
 800f3b2:	701a      	strb	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800f3b4:	f7fe fd12 	bl	800dddc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f3b8:	27fa      	movs	r7, #250	@ 0xfa
      tickstart = HAL_GetTick();
 800f3ba:	0005      	movs	r5, r0
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f3bc:	00bf      	lsls	r7, r7, #2
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800f3be:	2204      	movs	r2, #4
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	4213      	tst	r3, r2
 800f3c6:	d0de      	beq.n	800f386 <HAL_LCD_Write+0x22>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f3c8:	f7fe fd08 	bl	800dddc <HAL_GetTick>
 800f3cc:	1b40      	subs	r0, r0, r5
 800f3ce:	42b8      	cmp	r0, r7
 800f3d0:	d9f5      	bls.n	800f3be <HAL_LCD_Write+0x5a>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hlcd);
 800f3d6:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800f3d8:	2003      	movs	r0, #3
          __HAL_UNLOCK(hlcd);
 800f3da:	7033      	strb	r3, [r6, #0]
          return HAL_TIMEOUT;
 800f3dc:	e7df      	b.n	800f39e <HAL_LCD_Write+0x3a>

0800f3de <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 800f3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800f3e0:	2608      	movs	r6, #8

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800f3e2:	2204      	movs	r2, #4
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800f3e4:	6803      	ldr	r3, [r0, #0]
{
 800f3e6:	0004      	movs	r4, r0
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800f3e8:	60de      	str	r6, [r3, #12]
  hlcd->Instance->SR |= LCD_SR_UDR;
 800f3ea:	6899      	ldr	r1, [r3, #8]
  tickstart = HAL_GetTick();

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f3ec:	27fa      	movs	r7, #250	@ 0xfa
  hlcd->Instance->SR |= LCD_SR_UDR;
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 800f3f2:	f7fe fcf3 	bl	800dddc <HAL_GetTick>
 800f3f6:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f3f8:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	4233      	tst	r3, r6
 800f400:	d005      	beq.n	800f40e <HAL_LCD_UpdateDisplayRequest+0x30>

      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800f402:	0023      	movs	r3, r4
 800f404:	2201      	movs	r2, #1
 800f406:	3335      	adds	r3, #53	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);

  return HAL_OK;
 800f408:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 800f40a:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 800f40c:	e007      	b.n	800f41e <HAL_LCD_UpdateDisplayRequest+0x40>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f40e:	f7fe fce5 	bl	800dddc <HAL_GetTick>
 800f412:	1b40      	subs	r0, r0, r5
 800f414:	42b8      	cmp	r0, r7
 800f416:	d9f0      	bls.n	800f3fa <HAL_LCD_UpdateDisplayRequest+0x1c>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800f418:	2304      	movs	r3, #4
      return HAL_TIMEOUT;
 800f41a:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800f41c:	63a3      	str	r3, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hlcd);
 800f41e:	2300      	movs	r3, #0
 800f420:	3434      	adds	r4, #52	@ 0x34
 800f422:	7023      	strb	r3, [r4, #0]
}
 800f424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f426 <HAL_LCD_Clear>:
{
 800f426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f428:	0002      	movs	r2, r0
{
 800f42a:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800f42c:	2001      	movs	r0, #1
  HAL_LCD_StateTypeDef state = hlcd->State;
 800f42e:	3235      	adds	r2, #53	@ 0x35
 800f430:	7813      	ldrb	r3, [r2, #0]
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800f432:	3b01      	subs	r3, #1
 800f434:	4283      	cmp	r3, r0
 800f436:	d82a      	bhi.n	800f48e <HAL_LCD_Clear+0x68>
    __HAL_LOCK(hlcd);
 800f438:	0025      	movs	r5, r4
 800f43a:	3534      	adds	r5, #52	@ 0x34
 800f43c:	7829      	ldrb	r1, [r5, #0]
 800f43e:	2302      	movs	r3, #2
 800f440:	4281      	cmp	r1, r0
 800f442:	d025      	beq.n	800f490 <HAL_LCD_Clear+0x6a>
 800f444:	7028      	strb	r0, [r5, #0]
    hlcd->State = HAL_LCD_STATE_BUSY;
 800f446:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f448:	f7fe fcc8 	bl	800dddc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f44c:	27fa      	movs	r7, #250	@ 0xfa
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800f44e:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800f450:	9001      	str	r0, [sp, #4]
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f452:	00bf      	lsls	r7, r7, #2
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800f454:	6821      	ldr	r1, [r4, #0]
 800f456:	688a      	ldr	r2, [r1, #8]
 800f458:	0013      	movs	r3, r2
 800f45a:	4033      	ands	r3, r6
 800f45c:	4232      	tst	r2, r6
 800f45e:	d10b      	bne.n	800f478 <HAL_LCD_Clear+0x52>
      hlcd->Instance->RAM[counter] = 0;
 800f460:	0018      	movs	r0, r3
 800f462:	1d1a      	adds	r2, r3, #4
 800f464:	0092      	lsls	r2, r2, #2
 800f466:	188a      	adds	r2, r1, r2
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800f468:	3301      	adds	r3, #1
      hlcd->Instance->RAM[counter] = 0;
 800f46a:	6050      	str	r0, [r2, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800f46c:	2b10      	cmp	r3, #16
 800f46e:	d1f8      	bne.n	800f462 <HAL_LCD_Clear+0x3c>
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 800f470:	0020      	movs	r0, r4
 800f472:	f7ff ffb4 	bl	800f3de <HAL_LCD_UpdateDisplayRequest>
 800f476:	e00a      	b.n	800f48e <HAL_LCD_Clear+0x68>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f478:	f7fe fcb0 	bl	800dddc <HAL_GetTick>
 800f47c:	9b01      	ldr	r3, [sp, #4]
 800f47e:	1ac0      	subs	r0, r0, r3
 800f480:	42b8      	cmp	r0, r7
 800f482:	d9e7      	bls.n	800f454 <HAL_LCD_Clear+0x2e>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800f484:	2302      	movs	r3, #2
 800f486:	63a3      	str	r3, [r4, #56]	@ 0x38
        __HAL_UNLOCK(hlcd);
 800f488:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800f48a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hlcd);
 800f48c:	702b      	strb	r3, [r5, #0]
}
 800f48e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hlcd);
 800f490:	0018      	movs	r0, r3
 800f492:	e7fc      	b.n	800f48e <HAL_LCD_Clear+0x68>

0800f494 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800f494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f496:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800f498:	f7fe fca0 	bl	800dddc <HAL_GetTick>

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f49c:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 800f49e:	0005      	movs	r5, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800f4a0:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f4a2:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	4233      	tst	r3, r6
 800f4aa:	d001      	beq.n	800f4b0 <LCD_WaitForSynchro+0x1c>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	e007      	b.n	800f4c0 <LCD_WaitForSynchro+0x2c>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f4b0:	f7fe fc94 	bl	800dddc <HAL_GetTick>
 800f4b4:	1b40      	subs	r0, r0, r5
 800f4b6:	42b8      	cmp	r0, r7
 800f4b8:	d9f4      	bls.n	800f4a4 <LCD_WaitForSynchro+0x10>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800f4ba:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800f4bc:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800f4be:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800f4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4c4 <HAL_LCD_Init>:
{
 800f4c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f4c8:	2501      	movs	r5, #1
  if (hlcd == NULL)
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d062      	beq.n	800f594 <HAL_LCD_Init+0xd0>
  if (hlcd->State == HAL_LCD_STATE_RESET)
 800f4ce:	0006      	movs	r6, r0
 800f4d0:	3635      	adds	r6, #53	@ 0x35
 800f4d2:	7833      	ldrb	r3, [r6, #0]
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d104      	bne.n	800f4e4 <HAL_LCD_Init+0x20>
    hlcd->Lock = HAL_UNLOCKED;
 800f4da:	0003      	movs	r3, r0
 800f4dc:	3334      	adds	r3, #52	@ 0x34
 800f4de:	701a      	strb	r2, [r3, #0]
    HAL_LCD_MspInit(hlcd);
 800f4e0:	f7fa fd0a 	bl	8009ef8 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f4e4:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 800f4e6:	2701      	movs	r7, #1
  hlcd->State = HAL_LCD_STATE_BUSY;
 800f4e8:	7033      	strb	r3, [r6, #0]
  __HAL_LCD_DISABLE(hlcd);
 800f4ea:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hlcd->Instance->FCR, \
 800f4ec:	68a0      	ldr	r0, [r4, #8]
  __HAL_LCD_DISABLE(hlcd);
 800f4ee:	6813      	ldr	r3, [r2, #0]
 800f4f0:	43bb      	bics	r3, r7
 800f4f2:	6013      	str	r3, [r2, #0]
    hlcd->Instance->RAM[counter] = 0;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	6153      	str	r3, [r2, #20]
 800f4f8:	6193      	str	r3, [r2, #24]
 800f4fa:	61d3      	str	r3, [r2, #28]
 800f4fc:	6213      	str	r3, [r2, #32]
 800f4fe:	6253      	str	r3, [r2, #36]	@ 0x24
 800f500:	6293      	str	r3, [r2, #40]	@ 0x28
 800f502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f504:	6313      	str	r3, [r2, #48]	@ 0x30
  MODIFY_REG(hlcd->Instance->FCR, \
 800f506:	6863      	ldr	r3, [r4, #4]
 800f508:	6851      	ldr	r1, [r2, #4]
 800f50a:	4303      	orrs	r3, r0
 800f50c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f50e:	4303      	orrs	r3, r0
 800f510:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f512:	4303      	orrs	r3, r0
 800f514:	69e0      	ldr	r0, [r4, #28]
 800f516:	4303      	orrs	r3, r0
 800f518:	6a20      	ldr	r0, [r4, #32]
 800f51a:	4303      	orrs	r3, r0
 800f51c:	69a0      	ldr	r0, [r4, #24]
 800f51e:	4303      	orrs	r3, r0
 800f520:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f522:	4303      	orrs	r3, r0
 800f524:	4821      	ldr	r0, [pc, #132]	@ (800f5ac <HAL_LCD_Init+0xe8>)
 800f526:	4001      	ands	r1, r0
 800f528:	430b      	orrs	r3, r1
  status = LCD_WaitForSynchro(hlcd);
 800f52a:	0020      	movs	r0, r4
  MODIFY_REG(hlcd->Instance->FCR, \
 800f52c:	6053      	str	r3, [r2, #4]
  status = LCD_WaitForSynchro(hlcd);
 800f52e:	f7ff ffb1 	bl	800f494 <LCD_WaitForSynchro>
 800f532:	1e05      	subs	r5, r0, #0
  if (status != HAL_OK)
 800f534:	d12e      	bne.n	800f594 <HAL_LCD_Init+0xd0>
  MODIFY_REG(hlcd->Instance->CR, \
 800f536:	6920      	ldr	r0, [r4, #16]
 800f538:	68e3      	ldr	r3, [r4, #12]
 800f53a:	6822      	ldr	r2, [r4, #0]
 800f53c:	4303      	orrs	r3, r0
 800f53e:	6960      	ldr	r0, [r4, #20]
 800f540:	6811      	ldr	r1, [r2, #0]
 800f542:	4303      	orrs	r3, r0
 800f544:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f546:	4303      	orrs	r3, r0
 800f548:	20fe      	movs	r0, #254	@ 0xfe
 800f54a:	4381      	bics	r1, r0
 800f54c:	430b      	orrs	r3, r1
 800f54e:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 800f550:	6813      	ldr	r3, [r2, #0]
 800f552:	433b      	orrs	r3, r7
 800f554:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800f556:	f7fe fc41 	bl	800dddc <HAL_GetTick>
 800f55a:	9001      	str	r0, [sp, #4]
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800f55c:	6823      	ldr	r3, [r4, #0]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	423b      	tst	r3, r7
 800f562:	d00c      	beq.n	800f57e <HAL_LCD_Init+0xba>
  tickstart = HAL_GetTick();
 800f564:	f7fe fc3a 	bl	800dddc <HAL_GetTick>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800f568:	2710      	movs	r7, #16
  tickstart = HAL_GetTick();
 800f56a:	9001      	str	r0, [sp, #4]
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	423b      	tst	r3, r7
 800f572:	d011      	beq.n	800f598 <HAL_LCD_Init+0xd4>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800f574:	2300      	movs	r3, #0
 800f576:	63a3      	str	r3, [r4, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800f578:	3301      	adds	r3, #1
 800f57a:	7033      	strb	r3, [r6, #0]
  return status;
 800f57c:	e00a      	b.n	800f594 <HAL_LCD_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f57e:	f7fe fc2d 	bl	800dddc <HAL_GetTick>
 800f582:	9b01      	ldr	r3, [sp, #4]
 800f584:	1ac0      	subs	r0, r0, r3
 800f586:	23fa      	movs	r3, #250	@ 0xfa
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4298      	cmp	r0, r3
 800f58c:	d9e6      	bls.n	800f55c <HAL_LCD_Init+0x98>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800f58e:	2308      	movs	r3, #8
 800f590:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800f592:	2503      	movs	r5, #3
}
 800f594:	0028      	movs	r0, r5
 800f596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800f598:	f7fe fc20 	bl	800dddc <HAL_GetTick>
 800f59c:	9b01      	ldr	r3, [sp, #4]
 800f59e:	1ac0      	subs	r0, r0, r3
 800f5a0:	23fa      	movs	r3, #250	@ 0xfa
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	4298      	cmp	r0, r3
 800f5a6:	d9e1      	bls.n	800f56c <HAL_LCD_Init+0xa8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800f5a8:	63a7      	str	r7, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 800f5aa:	e7f2      	b.n	800f592 <HAL_LCD_Init+0xce>
 800f5ac:	fc00000e 	.word	0xfc00000e

0800f5b0 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800f5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f5e4 <LPTIM_WaitForFlag+0x34>)
{
 800f5b2:	b570      	push	{r4, r5, r6, lr}
 800f5b4:	0005      	movs	r5, r0
 800f5b6:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800f5b8:	6818      	ldr	r0, [r3, #0]
 800f5ba:	490b      	ldr	r1, [pc, #44]	@ (800f5e8 <LPTIM_WaitForFlag+0x38>)
 800f5bc:	f7f0 fdd4 	bl	8000168 <__udivsi3>
 800f5c0:	23fa      	movs	r3, #250	@ 0xfa
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800f5c6:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800f5c8:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800f5ca:	2503      	movs	r5, #3
    count--;
 800f5cc:	3b01      	subs	r3, #1
    if (count == 0UL)
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d100      	bne.n	800f5d4 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 800f5d2:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800f5d4:	680a      	ldr	r2, [r1, #0]
 800f5d6:	4022      	ands	r2, r4
 800f5d8:	42a2      	cmp	r2, r4
 800f5da:	d001      	beq.n	800f5e0 <LPTIM_WaitForFlag+0x30>
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1f5      	bne.n	800f5cc <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800f5e0:	bd70      	pop	{r4, r5, r6, pc}
 800f5e2:	46c0      	nop			@ (mov r8, r8)
 800f5e4:	20000050 	.word	0x20000050
 800f5e8:	00004e20 	.word	0x00004e20

0800f5ec <HAL_LPTIM_Init>:
{
 800f5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5ee:	0004      	movs	r4, r0
    return HAL_ERROR;
 800f5f0:	2001      	movs	r0, #1
  if (hlptim == NULL)
 800f5f2:	2c00      	cmp	r4, #0
 800f5f4:	d01f      	beq.n	800f636 <HAL_LPTIM_Init+0x4a>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800f5f6:	0023      	movs	r3, r4
 800f5f8:	3352      	adds	r3, #82	@ 0x52
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d105      	bne.n	800f610 <HAL_LPTIM_Init+0x24>
    hlptim->Lock = HAL_UNLOCKED;
 800f604:	0023      	movs	r3, r4
 800f606:	3351      	adds	r3, #81	@ 0x51
    HAL_LPTIM_MspInit(hlptim);
 800f608:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 800f60a:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 800f60c:	f7fa fd0e 	bl	800a02c <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800f610:	2702      	movs	r7, #2
  __HAL_LPTIM_ENABLE(hlptim);
 800f612:	2601      	movs	r6, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800f614:	2180      	movs	r1, #128	@ 0x80
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800f616:	9b01      	ldr	r3, [sp, #4]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800f618:	0049      	lsls	r1, r1, #1
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800f61a:	701f      	strb	r7, [r3, #0]
  __HAL_LPTIM_ENABLE(hlptim);
 800f61c:	6825      	ldr	r5, [r4, #0]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800f61e:	0020      	movs	r0, r4
  __HAL_LPTIM_ENABLE(hlptim);
 800f620:	692b      	ldr	r3, [r5, #16]
 800f622:	4333      	orrs	r3, r6
 800f624:	612b      	str	r3, [r5, #16]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800f626:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800f628:	6069      	str	r1, [r5, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800f62a:	62ab      	str	r3, [r5, #40]	@ 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800f62c:	f7ff ffc0 	bl	800f5b0 <LPTIM_WaitForFlag>
 800f630:	2803      	cmp	r0, #3
 800f632:	d101      	bne.n	800f638 <HAL_LPTIM_Init+0x4c>
    return HAL_TIMEOUT;
 800f634:	2003      	movs	r0, #3
}
 800f636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800f638:	2110      	movs	r1, #16
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800f63a:	6a23      	ldr	r3, [r4, #32]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800f63c:	6069      	str	r1, [r5, #4]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800f63e:	0020      	movs	r0, r4
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800f640:	61ab      	str	r3, [r5, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800f642:	f7ff ffb5 	bl	800f5b0 <LPTIM_WaitForFlag>
 800f646:	2803      	cmp	r0, #3
 800f648:	d0f4      	beq.n	800f634 <HAL_LPTIM_Init+0x48>
  __HAL_LPTIM_DISABLE(hlptim);
 800f64a:	4b3a      	ldr	r3, [pc, #232]	@ (800f734 <HAL_LPTIM_Init+0x148>)
 800f64c:	429d      	cmp	r5, r3
 800f64e:	d002      	beq.n	800f656 <HAL_LPTIM_Init+0x6a>
 800f650:	4b39      	ldr	r3, [pc, #228]	@ (800f738 <HAL_LPTIM_Init+0x14c>)
 800f652:	429d      	cmp	r5, r3
 800f654:	d113      	bne.n	800f67e <HAL_LPTIM_Init+0x92>
 800f656:	2202      	movs	r2, #2
 800f658:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800f65a:	4213      	tst	r3, r2
 800f65c:	d11b      	bne.n	800f696 <HAL_LPTIM_Init+0xaa>
 800f65e:	2380      	movs	r3, #128	@ 0x80
 800f660:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800f662:	029b      	lsls	r3, r3, #10
 800f664:	4219      	tst	r1, r3
 800f666:	d116      	bne.n	800f696 <HAL_LPTIM_Init+0xaa>
 800f668:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 800f66a:	4211      	tst	r1, r2
 800f66c:	d113      	bne.n	800f696 <HAL_LPTIM_Init+0xaa>
 800f66e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800f670:	421a      	tst	r2, r3
 800f672:	d110      	bne.n	800f696 <HAL_LPTIM_Init+0xaa>
 800f674:	2201      	movs	r2, #1
 800f676:	692b      	ldr	r3, [r5, #16]
 800f678:	4393      	bics	r3, r2
 800f67a:	612b      	str	r3, [r5, #16]
 800f67c:	e00b      	b.n	800f696 <HAL_LPTIM_Init+0xaa>
 800f67e:	4b2f      	ldr	r3, [pc, #188]	@ (800f73c <HAL_LPTIM_Init+0x150>)
 800f680:	429d      	cmp	r5, r3
 800f682:	d002      	beq.n	800f68a <HAL_LPTIM_Init+0x9e>
 800f684:	692b      	ldr	r3, [r5, #16]
 800f686:	43b3      	bics	r3, r6
 800f688:	e7f7      	b.n	800f67a <HAL_LPTIM_Init+0x8e>
 800f68a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800f68c:	423b      	tst	r3, r7
 800f68e:	d102      	bne.n	800f696 <HAL_LPTIM_Init+0xaa>
 800f690:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800f692:	039b      	lsls	r3, r3, #14
 800f694:	d5f6      	bpl.n	800f684 <HAL_LPTIM_Init+0x98>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800f696:	6860      	ldr	r0, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800f698:	68e9      	ldr	r1, [r5, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800f69a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800f69c:	2801      	cmp	r0, #1
 800f69e:	d003      	beq.n	800f6a8 <HAL_LPTIM_Init+0xbc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800f6a0:	2380      	movs	r3, #128	@ 0x80
 800f6a2:	041b      	lsls	r3, r3, #16
 800f6a4:	429e      	cmp	r6, r3
 800f6a6:	d101      	bne.n	800f6ac <HAL_LPTIM_Init+0xc0>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800f6a8:	231e      	movs	r3, #30
 800f6aa:	4399      	bics	r1, r3
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800f6ac:	4b24      	ldr	r3, [pc, #144]	@ (800f740 <HAL_LPTIM_Init+0x154>)
 800f6ae:	6962      	ldr	r2, [r4, #20]
 800f6b0:	469c      	mov	ip, r3
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d001      	beq.n	800f6ba <HAL_LPTIM_Init+0xce>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800f6b6:	4b23      	ldr	r3, [pc, #140]	@ (800f744 <HAL_LPTIM_Init+0x158>)
 800f6b8:	4019      	ands	r1, r3
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800f6ba:	4b23      	ldr	r3, [pc, #140]	@ (800f748 <HAL_LPTIM_Init+0x15c>)
              hlptim->Init.UpdateMode      |
 800f6bc:	68a7      	ldr	r7, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800f6be:	4019      	ands	r1, r3
              hlptim->Init.UpdateMode      |
 800f6c0:	0003      	movs	r3, r0
 800f6c2:	4333      	orrs	r3, r6
 800f6c4:	433b      	orrs	r3, r7
 800f6c6:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800f6c8:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800f6ca:	430b      	orrs	r3, r1
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d125      	bne.n	800f71c <HAL_LPTIM_Init+0x130>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800f6d0:	69e1      	ldr	r1, [r4, #28]
 800f6d2:	6920      	ldr	r0, [r4, #16]
 800f6d4:	4301      	orrs	r1, r0
 800f6d6:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800f6d8:	2180      	movs	r1, #128	@ 0x80
 800f6da:	0409      	lsls	r1, r1, #16
 800f6dc:	428e      	cmp	r6, r1
 800f6de:	d01f      	beq.n	800f720 <HAL_LPTIM_Init+0x134>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800f6e0:	4562      	cmp	r2, ip
 800f6e2:	d004      	beq.n	800f6ee <HAL_LPTIM_Init+0x102>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800f6e4:	69a1      	ldr	r1, [r4, #24]
 800f6e6:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 800f6e8:	69e1      	ldr	r1, [r4, #28]
 800f6ea:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800f6ec:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800f6ee:	60eb      	str	r3, [r5, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 800f6f0:	4b10      	ldr	r3, [pc, #64]	@ (800f734 <HAL_LPTIM_Init+0x148>)
 800f6f2:	429d      	cmp	r5, r3
 800f6f4:	d002      	beq.n	800f6fc <HAL_LPTIM_Init+0x110>
 800f6f6:	4b10      	ldr	r3, [pc, #64]	@ (800f738 <HAL_LPTIM_Init+0x14c>)
 800f6f8:	429d      	cmp	r5, r3
 800f6fa:	d116      	bne.n	800f72a <HAL_LPTIM_Init+0x13e>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800f6fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f6fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f700:	4313      	orrs	r3, r2
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800f702:	626b      	str	r3, [r5, #36]	@ 0x24
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800f704:	0022      	movs	r2, r4
 800f706:	2301      	movs	r3, #1
 800f708:	3253      	adds	r2, #83	@ 0x53
 800f70a:	7013      	strb	r3, [r2, #0]
 800f70c:	7053      	strb	r3, [r2, #1]
 800f70e:	7093      	strb	r3, [r2, #2]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800f710:	9a01      	ldr	r2, [sp, #4]
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800f712:	3456      	adds	r4, #86	@ 0x56
 800f714:	7023      	strb	r3, [r4, #0]
  return HAL_OK;
 800f716:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800f718:	7013      	strb	r3, [r2, #0]
  return HAL_OK;
 800f71a:	e78c      	b.n	800f636 <HAL_LPTIM_Init+0x4a>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800f71c:	2801      	cmp	r0, #1
 800f71e:	d1db      	bne.n	800f6d8 <HAL_LPTIM_Init+0xec>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800f720:	68e1      	ldr	r1, [r4, #12]
 800f722:	6920      	ldr	r0, [r4, #16]
 800f724:	4301      	orrs	r1, r0
 800f726:	430b      	orrs	r3, r1
 800f728:	e7da      	b.n	800f6e0 <HAL_LPTIM_Init+0xf4>
    if (hlptim->Instance == LPTIM2)
 800f72a:	4b04      	ldr	r3, [pc, #16]	@ (800f73c <HAL_LPTIM_Init+0x150>)
 800f72c:	429d      	cmp	r5, r3
 800f72e:	d1e9      	bne.n	800f704 <HAL_LPTIM_Init+0x118>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800f730:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f732:	e7e6      	b.n	800f702 <HAL_LPTIM_Init+0x116>
 800f734:	40007c00 	.word	0x40007c00
 800f738:	40009000 	.word	0x40009000
 800f73c:	40009400 	.word	0x40009400
 800f740:	0000ffff 	.word	0x0000ffff
 800f744:	ffff1f3f 	.word	0xffff1f3f
 800f748:	ff39f1fe 	.word	0xff39f1fe

0800f74c <HAL_LPTIM_CompareMatchCallback>:
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
 800f74c:	4770      	bx	lr

0800f74e <HAL_LPTIM_AutoReloadMatchCallback>:
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
 800f74e:	4770      	bx	lr

0800f750 <HAL_LPTIM_TriggerCallback>:
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
 800f750:	4770      	bx	lr

0800f752 <HAL_LPTIM_CompareWriteCallback>:
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800f752:	4770      	bx	lr

0800f754 <HAL_LPTIM_AutoReloadWriteCallback>:
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800f754:	4770      	bx	lr

0800f756 <HAL_LPTIM_DirectionUpCallback>:
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
 800f756:	4770      	bx	lr

0800f758 <HAL_LPTIM_DirectionDownCallback>:
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
 800f758:	4770      	bx	lr

0800f75a <HAL_LPTIM_UpdateEventCallback>:
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
 800f75a:	4770      	bx	lr

0800f75c <HAL_LPTIM_RepCounterWriteCallback>:
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
 800f75c:	4770      	bx	lr

0800f75e <HAL_LPTIM_IC_CaptureCallback>:
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
 800f75e:	4770      	bx	lr

0800f760 <HAL_LPTIM_IC_OverCaptureCallback>:
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
 800f760:	4770      	bx	lr

0800f762 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800f762:	2301      	movs	r3, #1
 800f764:	6802      	ldr	r2, [r0, #0]
{
 800f766:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800f768:	6811      	ldr	r1, [r2, #0]
{
 800f76a:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800f76c:	4219      	tst	r1, r3
 800f76e:	d00e      	beq.n	800f78e <HAL_LPTIM_IRQHandler+0x2c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800f770:	6891      	ldr	r1, [r2, #8]
 800f772:	4219      	tst	r1, r3
 800f774:	d00b      	beq.n	800f78e <HAL_LPTIM_IRQHandler+0x2c>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800f776:	0005      	movs	r5, r0
 800f778:	3538      	adds	r5, #56	@ 0x38
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 800f77a:	6053      	str	r3, [r2, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800f77c:	702b      	strb	r3, [r5, #0]
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 800f77e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f780:	421a      	tst	r2, r3
 800f782:	d100      	bne.n	800f786 <HAL_LPTIM_IRQHandler+0x24>
 800f784:	e10c      	b.n	800f9a0 <HAL_LPTIM_IRQHandler+0x23e>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f786:	f7ff ffea 	bl	800f75e <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f78a:	2300      	movs	r3, #0
 800f78c:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800f78e:	2280      	movs	r2, #128	@ 0x80
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	0092      	lsls	r2, r2, #2
 800f794:	6819      	ldr	r1, [r3, #0]
 800f796:	4211      	tst	r1, r2
 800f798:	d011      	beq.n	800f7be <HAL_LPTIM_IRQHandler+0x5c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800f79a:	6899      	ldr	r1, [r3, #8]
 800f79c:	4211      	tst	r1, r2
 800f79e:	d00e      	beq.n	800f7be <HAL_LPTIM_IRQHandler+0x5c>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800f7a0:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800f7a2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800f7a4:	3aff      	subs	r2, #255	@ 0xff
 800f7a6:	3538      	adds	r5, #56	@ 0x38
 800f7a8:	3aff      	subs	r2, #255	@ 0xff
 800f7aa:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800f7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f7ae:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800f7b0:	03db      	lsls	r3, r3, #15
 800f7b2:	d400      	bmi.n	800f7b6 <HAL_LPTIM_IRQHandler+0x54>
 800f7b4:	e0f7      	b.n	800f9a6 <HAL_LPTIM_IRQHandler+0x244>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f7b6:	f7ff ffd2 	bl	800f75e <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 800f7be:	2280      	movs	r2, #128	@ 0x80
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	00d2      	lsls	r2, r2, #3
 800f7c4:	6819      	ldr	r1, [r3, #0]
 800f7c6:	4211      	tst	r1, r2
 800f7c8:	d010      	beq.n	800f7ec <HAL_LPTIM_IRQHandler+0x8a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 800f7ca:	6899      	ldr	r1, [r3, #8]
 800f7cc:	4211      	tst	r1, r2
 800f7ce:	d00d      	beq.n	800f7ec <HAL_LPTIM_IRQHandler+0x8a>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800f7d0:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 800f7d2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800f7d4:	2204      	movs	r2, #4
 800f7d6:	3538      	adds	r5, #56	@ 0x38
 800f7d8:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 800f7da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f7dc:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 800f7de:	07db      	lsls	r3, r3, #31
 800f7e0:	d400      	bmi.n	800f7e4 <HAL_LPTIM_IRQHandler+0x82>
 800f7e2:	e0e3      	b.n	800f9ac <HAL_LPTIM_IRQHandler+0x24a>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f7e4:	f7ff ffbb 	bl	800f75e <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 800f7ec:	2280      	movs	r2, #128	@ 0x80
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	0112      	lsls	r2, r2, #4
 800f7f2:	6819      	ldr	r1, [r3, #0]
 800f7f4:	4211      	tst	r1, r2
 800f7f6:	d010      	beq.n	800f81a <HAL_LPTIM_IRQHandler+0xb8>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 800f7f8:	6899      	ldr	r1, [r3, #8]
 800f7fa:	4211      	tst	r1, r2
 800f7fc:	d00d      	beq.n	800f81a <HAL_LPTIM_IRQHandler+0xb8>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800f7fe:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 800f800:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800f802:	2208      	movs	r2, #8
 800f804:	3538      	adds	r5, #56	@ 0x38
 800f806:	702a      	strb	r2, [r5, #0]
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 800f808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f80a:	0020      	movs	r0, r4
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 800f80c:	03db      	lsls	r3, r3, #15
 800f80e:	d400      	bmi.n	800f812 <HAL_LPTIM_IRQHandler+0xb0>
 800f810:	e0cf      	b.n	800f9b2 <HAL_LPTIM_IRQHandler+0x250>
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800f812:	f7ff ffa4 	bl	800f75e <HAL_LPTIM_IC_CaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f816:	2300      	movs	r3, #0
 800f818:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800f81a:	2280      	movs	r2, #128	@ 0x80
 800f81c:	6823      	ldr	r3, [r4, #0]
 800f81e:	0152      	lsls	r2, r2, #5
 800f820:	6819      	ldr	r1, [r3, #0]
 800f822:	4211      	tst	r1, r2
 800f824:	d00c      	beq.n	800f840 <HAL_LPTIM_IRQHandler+0xde>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800f826:	6899      	ldr	r1, [r3, #8]
 800f828:	4211      	tst	r1, r2
 800f82a:	d009      	beq.n	800f840 <HAL_LPTIM_IRQHandler+0xde>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800f82c:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800f82e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800f830:	2301      	movs	r3, #1
 800f832:	3538      	adds	r5, #56	@ 0x38
 800f834:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800f836:	0020      	movs	r0, r4
 800f838:	f7ff ff92 	bl	800f760 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f83c:	2300      	movs	r3, #0
 800f83e:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800f840:	2280      	movs	r2, #128	@ 0x80
 800f842:	6823      	ldr	r3, [r4, #0]
 800f844:	0192      	lsls	r2, r2, #6
 800f846:	6819      	ldr	r1, [r3, #0]
 800f848:	4211      	tst	r1, r2
 800f84a:	d00c      	beq.n	800f866 <HAL_LPTIM_IRQHandler+0x104>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800f84c:	6899      	ldr	r1, [r3, #8]
 800f84e:	4211      	tst	r1, r2
 800f850:	d009      	beq.n	800f866 <HAL_LPTIM_IRQHandler+0x104>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800f852:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800f854:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800f856:	2302      	movs	r3, #2
 800f858:	3538      	adds	r5, #56	@ 0x38
 800f85a:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800f85c:	0020      	movs	r0, r4
 800f85e:	f7ff ff7f 	bl	800f760 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f862:	2300      	movs	r3, #0
 800f864:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800f866:	2280      	movs	r2, #128	@ 0x80
 800f868:	6823      	ldr	r3, [r4, #0]
 800f86a:	01d2      	lsls	r2, r2, #7
 800f86c:	6819      	ldr	r1, [r3, #0]
 800f86e:	4211      	tst	r1, r2
 800f870:	d00c      	beq.n	800f88c <HAL_LPTIM_IRQHandler+0x12a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 800f872:	6899      	ldr	r1, [r3, #8]
 800f874:	4211      	tst	r1, r2
 800f876:	d009      	beq.n	800f88c <HAL_LPTIM_IRQHandler+0x12a>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800f878:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 800f87a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800f87c:	2304      	movs	r3, #4
 800f87e:	3538      	adds	r5, #56	@ 0x38
 800f880:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800f882:	0020      	movs	r0, r4
 800f884:	f7ff ff6c 	bl	800f760 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f888:	2300      	movs	r3, #0
 800f88a:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800f88c:	2280      	movs	r2, #128	@ 0x80
 800f88e:	6823      	ldr	r3, [r4, #0]
 800f890:	0212      	lsls	r2, r2, #8
 800f892:	6819      	ldr	r1, [r3, #0]
 800f894:	4211      	tst	r1, r2
 800f896:	d00c      	beq.n	800f8b2 <HAL_LPTIM_IRQHandler+0x150>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800f898:	6899      	ldr	r1, [r3, #8]
 800f89a:	4211      	tst	r1, r2
 800f89c:	d009      	beq.n	800f8b2 <HAL_LPTIM_IRQHandler+0x150>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800f89e:	0025      	movs	r5, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 800f8a0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800f8a2:	2308      	movs	r3, #8
 800f8a4:	3538      	adds	r5, #56	@ 0x38
 800f8a6:	702b      	strb	r3, [r5, #0]
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800f8a8:	0020      	movs	r0, r4
 800f8aa:	f7ff ff59 	bl	800f760 <HAL_LPTIM_IC_OverCaptureCallback>
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	702b      	strb	r3, [r5, #0]
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	6819      	ldr	r1, [r3, #0]
 800f8b8:	4211      	tst	r1, r2
 800f8ba:	d006      	beq.n	800f8ca <HAL_LPTIM_IRQHandler+0x168>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800f8bc:	6899      	ldr	r1, [r3, #8]
 800f8be:	4211      	tst	r1, r2
 800f8c0:	d003      	beq.n	800f8ca <HAL_LPTIM_IRQHandler+0x168>
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800f8c2:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800f8c4:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800f8c6:	f7ff ff42 	bl	800f74e <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800f8ca:	2204      	movs	r2, #4
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	6819      	ldr	r1, [r3, #0]
 800f8d0:	4211      	tst	r1, r2
 800f8d2:	d006      	beq.n	800f8e2 <HAL_LPTIM_IRQHandler+0x180>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800f8d4:	6899      	ldr	r1, [r3, #8]
 800f8d6:	4211      	tst	r1, r2
 800f8d8:	d003      	beq.n	800f8e2 <HAL_LPTIM_IRQHandler+0x180>
      HAL_LPTIM_TriggerCallback(hlptim);
 800f8da:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800f8dc:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800f8de:	f7ff ff37 	bl	800f750 <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800f8e2:	2208      	movs	r2, #8
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	6819      	ldr	r1, [r3, #0]
 800f8e8:	4211      	tst	r1, r2
 800f8ea:	d00a      	beq.n	800f902 <HAL_LPTIM_IRQHandler+0x1a0>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 800f8ec:	6899      	ldr	r1, [r3, #8]
 800f8ee:	4211      	tst	r1, r2
 800f8f0:	d007      	beq.n	800f902 <HAL_LPTIM_IRQHandler+0x1a0>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800f8f2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800f8f4:	0023      	movs	r3, r4
 800f8f6:	3a07      	subs	r2, #7
 800f8f8:	3338      	adds	r3, #56	@ 0x38
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800f8fa:	0020      	movs	r0, r4
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800f8fc:	701a      	strb	r2, [r3, #0]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800f8fe:	f7ff ff28 	bl	800f752 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800f902:	2280      	movs	r2, #128	@ 0x80
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	0312      	lsls	r2, r2, #12
 800f908:	6819      	ldr	r1, [r3, #0]
 800f90a:	4211      	tst	r1, r2
 800f90c:	d00a      	beq.n	800f924 <HAL_LPTIM_IRQHandler+0x1c2>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800f90e:	6899      	ldr	r1, [r3, #8]
 800f910:	4211      	tst	r1, r2
 800f912:	d007      	beq.n	800f924 <HAL_LPTIM_IRQHandler+0x1c2>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800f914:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800f916:	0023      	movs	r3, r4
 800f918:	2202      	movs	r2, #2
 800f91a:	3338      	adds	r3, #56	@ 0x38
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800f91c:	0020      	movs	r0, r4
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800f91e:	701a      	strb	r2, [r3, #0]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800f920:	f7ff ff17 	bl	800f752 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800f924:	2210      	movs	r2, #16
 800f926:	6823      	ldr	r3, [r4, #0]
 800f928:	6819      	ldr	r1, [r3, #0]
 800f92a:	4211      	tst	r1, r2
 800f92c:	d006      	beq.n	800f93c <HAL_LPTIM_IRQHandler+0x1da>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800f92e:	6899      	ldr	r1, [r3, #8]
 800f930:	4211      	tst	r1, r2
 800f932:	d003      	beq.n	800f93c <HAL_LPTIM_IRQHandler+0x1da>
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800f934:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800f936:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800f938:	f7ff ff0c 	bl	800f754 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800f93c:	2220      	movs	r2, #32
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	6819      	ldr	r1, [r3, #0]
 800f942:	4211      	tst	r1, r2
 800f944:	d006      	beq.n	800f954 <HAL_LPTIM_IRQHandler+0x1f2>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800f946:	6899      	ldr	r1, [r3, #8]
 800f948:	4211      	tst	r1, r2
 800f94a:	d003      	beq.n	800f954 <HAL_LPTIM_IRQHandler+0x1f2>
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800f94c:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800f94e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800f950:	f7ff ff01 	bl	800f756 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800f954:	2240      	movs	r2, #64	@ 0x40
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	6819      	ldr	r1, [r3, #0]
 800f95a:	4211      	tst	r1, r2
 800f95c:	d006      	beq.n	800f96c <HAL_LPTIM_IRQHandler+0x20a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800f95e:	6899      	ldr	r1, [r3, #8]
 800f960:	4211      	tst	r1, r2
 800f962:	d003      	beq.n	800f96c <HAL_LPTIM_IRQHandler+0x20a>
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800f964:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800f966:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800f968:	f7ff fef6 	bl	800f758 <HAL_LPTIM_DirectionDownCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800f96c:	2280      	movs	r2, #128	@ 0x80
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	6819      	ldr	r1, [r3, #0]
 800f972:	4211      	tst	r1, r2
 800f974:	d006      	beq.n	800f984 <HAL_LPTIM_IRQHandler+0x222>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800f976:	6899      	ldr	r1, [r3, #8]
 800f978:	4211      	tst	r1, r2
 800f97a:	d003      	beq.n	800f984 <HAL_LPTIM_IRQHandler+0x222>
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800f97c:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800f97e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800f980:	f7ff feeb 	bl	800f75a <HAL_LPTIM_UpdateEventCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800f984:	2280      	movs	r2, #128	@ 0x80
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	0052      	lsls	r2, r2, #1
 800f98a:	6819      	ldr	r1, [r3, #0]
 800f98c:	4211      	tst	r1, r2
 800f98e:	d006      	beq.n	800f99e <HAL_LPTIM_IRQHandler+0x23c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800f990:	6899      	ldr	r1, [r3, #8]
 800f992:	4211      	tst	r1, r2
 800f994:	d003      	beq.n	800f99e <HAL_LPTIM_IRQHandler+0x23c>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800f996:	0020      	movs	r0, r4
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800f998:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800f99a:	f7ff fedf 	bl	800f75c <HAL_LPTIM_RepCounterWriteCallback>
}
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800f9a0:	f7ff fed4 	bl	800f74c <HAL_LPTIM_CompareMatchCallback>
 800f9a4:	e6f1      	b.n	800f78a <HAL_LPTIM_IRQHandler+0x28>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800f9a6:	f7ff fed1 	bl	800f74c <HAL_LPTIM_CompareMatchCallback>
 800f9aa:	e706      	b.n	800f7ba <HAL_LPTIM_IRQHandler+0x58>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800f9ac:	f7ff fece 	bl	800f74c <HAL_LPTIM_CompareMatchCallback>
 800f9b0:	e71a      	b.n	800f7e8 <HAL_LPTIM_IRQHandler+0x86>
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800f9b2:	f7ff fecb 	bl	800f74c <HAL_LPTIM_CompareMatchCallback>
 800f9b6:	e72e      	b.n	800f816 <HAL_LPTIM_IRQHandler+0xb4>

0800f9b8 <PCD_GET_EP_DBUF0_CNT.isra.0>:
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800f9b8:	230a      	movs	r3, #10
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
 800f9ba:	b082      	sub	sp, #8

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
  {
    count--;
 800f9bc:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800f9be:	9b01      	ldr	r3, [sp, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d107      	bne.n	800f9d4 <PCD_GET_EP_DBUF0_CNT.isra.0+0x1c>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800f9c4:	4b05      	ldr	r3, [pc, #20]	@ (800f9dc <PCD_GET_EP_DBUF0_CNT.isra.0+0x24>)
 800f9c6:	00c0      	lsls	r0, r0, #3
 800f9c8:	18c0      	adds	r0, r0, r3
 800f9ca:	6800      	ldr	r0, [r0, #0]
 800f9cc:	0180      	lsls	r0, r0, #6
 800f9ce:	0d80      	lsrs	r0, r0, #22
}
 800f9d0:	b002      	add	sp, #8
 800f9d2:	4770      	bx	lr
    count--;
 800f9d4:	9b01      	ldr	r3, [sp, #4]
 800f9d6:	3b01      	subs	r3, #1
 800f9d8:	e7f0      	b.n	800f9bc <PCD_GET_EP_DBUF0_CNT.isra.0+0x4>
 800f9da:	46c0      	nop			@ (mov r8, r8)
 800f9dc:	40009800 	.word	0x40009800

0800f9e0 <PCD_GET_EP_RX_CNT.isra.0>:
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800f9e0:	230a      	movs	r3, #10
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
 800f9e2:	b082      	sub	sp, #8
    count--;
 800f9e4:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d107      	bne.n	800f9fc <PCD_GET_EP_RX_CNT.isra.0+0x1c>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800f9ec:	4b05      	ldr	r3, [pc, #20]	@ (800fa04 <PCD_GET_EP_RX_CNT.isra.0+0x24>)
 800f9ee:	00c0      	lsls	r0, r0, #3
 800f9f0:	18c0      	adds	r0, r0, r3
 800f9f2:	6840      	ldr	r0, [r0, #4]
 800f9f4:	0180      	lsls	r0, r0, #6
 800f9f6:	0d80      	lsrs	r0, r0, #22
}
 800f9f8:	b002      	add	sp, #8
 800f9fa:	4770      	bx	lr
    count--;
 800f9fc:	9b01      	ldr	r3, [sp, #4]
 800f9fe:	3b01      	subs	r3, #1
 800fa00:	e7f0      	b.n	800f9e4 <PCD_GET_EP_RX_CNT.isra.0+0x4>
 800fa02:	46c0      	nop			@ (mov r8, r8)
 800fa04:	40009800 	.word	0x40009800

0800fa08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800fa08:	b570      	push	{r4, r5, r6, lr}
 800fa0a:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800fa0c:	2001      	movs	r0, #1
  if (hpcd == NULL)
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	d02b      	beq.n	800fa6a <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800fa12:	4d22      	ldr	r5, [pc, #136]	@ (800fa9c <HAL_PCD_Init+0x94>)
 800fa14:	5d63      	ldrb	r3, [r4, r5]
 800fa16:	b2da      	uxtb	r2, r3
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d105      	bne.n	800fa28 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800fa1c:	23a4      	movs	r3, #164	@ 0xa4
 800fa1e:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800fa20:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 800fa22:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 800fa24:	f7fa fc30 	bl	800a288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800fa28:	2303      	movs	r3, #3
 800fa2a:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800fa2c:	6820      	ldr	r0, [r4, #0]
 800fa2e:	f003 fb97 	bl	8013160 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa32:	2300      	movs	r3, #0
 800fa34:	0022      	movs	r2, r4
 800fa36:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800fa38:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa3a:	7920      	ldrb	r0, [r4, #4]
 800fa3c:	3210      	adds	r2, #16
 800fa3e:	4298      	cmp	r0, r3
 800fa40:	d114      	bne.n	800fa6c <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa42:	2100      	movs	r1, #0
 800fa44:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800fa46:	0008      	movs	r0, r1
 800fa48:	3251      	adds	r2, #81	@ 0x51
 800fa4a:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa4c:	428b      	cmp	r3, r1
 800fa4e:	d117      	bne.n	800fa80 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800fa50:	6861      	ldr	r1, [r4, #4]
 800fa52:	68a2      	ldr	r2, [r4, #8]
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	f003 fb8b 	bl	8013170 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800fa5e:	3301      	adds	r3, #1
 800fa60:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800fa62:	7aa3      	ldrb	r3, [r4, #10]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d015      	beq.n	800fa94 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800fa68:	2000      	movs	r0, #0
}
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 800fa6c:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa6e:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 800fa70:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800fa72:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800fa74:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800fa76:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 800fa78:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	3228      	adds	r2, #40	@ 0x28
 800fa7e:	e7de      	b.n	800fa3e <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 800fa80:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa82:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800fa84:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800fa86:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fa88:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800fa8a:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fa8c:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa8e:	b2c9      	uxtb	r1, r1
 800fa90:	3228      	adds	r2, #40	@ 0x28
 800fa92:	e7db      	b.n	800fa4c <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800fa94:	0020      	movs	r0, r4
 800fa96:	f000 fdb6 	bl	8010606 <HAL_PCDEx_ActivateLPM>
 800fa9a:	e7e5      	b.n	800fa68 <HAL_PCD_Init+0x60>
 800fa9c:	00000291 	.word	0x00000291

0800faa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800faa0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800faa2:	25a4      	movs	r5, #164	@ 0xa4
 800faa4:	00ad      	lsls	r5, r5, #2
 800faa6:	5d43      	ldrb	r3, [r0, r5]
{
 800faa8:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800faaa:	2002      	movs	r0, #2
 800faac:	2b01      	cmp	r3, #1
 800faae:	d009      	beq.n	800fac4 <HAL_PCD_Start+0x24>
 800fab0:	2301      	movs	r3, #1
 800fab2:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 800fab4:	6820      	ldr	r0, [r4, #0]
 800fab6:	f003 fb4b 	bl	8013150 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800faba:	6820      	ldr	r0, [r4, #0]
 800fabc:	f003 fdb6 	bl	801362c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800fac0:	2000      	movs	r0, #0
 800fac2:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800fac4:	bd70      	pop	{r4, r5, r6, pc}

0800fac6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800fac6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800fac8:	25a4      	movs	r5, #164	@ 0xa4
 800faca:	00ad      	lsls	r5, r5, #2
 800facc:	5d43      	ldrb	r3, [r0, r5]
{
 800face:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800fad0:	2002      	movs	r0, #2
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d009      	beq.n	800faea <HAL_PCD_Stop+0x24>
 800fad6:	2301      	movs	r3, #1
 800fad8:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 800fada:	6820      	ldr	r0, [r4, #0]
 800fadc:	f003 fb40 	bl	8013160 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800fae0:	6820      	ldr	r0, [r4, #0]
 800fae2:	f003 fdab 	bl	801363c <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800fae6:	2000      	movs	r0, #0
 800fae8:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800faea:	bd70      	pop	{r4, r5, r6, pc}

0800faec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800faec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800faee:	25a4      	movs	r5, #164	@ 0xa4
 800faf0:	00ad      	lsls	r5, r5, #2
 800faf2:	5d43      	ldrb	r3, [r0, r5]
{
 800faf4:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800faf6:	2002      	movs	r0, #2
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d007      	beq.n	800fb0c <HAL_PCD_SetAddress+0x20>
 800fafc:	2301      	movs	r3, #1
 800fafe:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fb00:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 800fb02:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fb04:	f003 fd8c 	bl	8013620 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fb08:	2000      	movs	r0, #0
 800fb0a:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb10 <HAL_PCD_IRQHandler>:
{
 800fb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb12:	0004      	movs	r4, r0
 800fb14:	b087      	sub	sp, #28
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800fb16:	6800      	ldr	r0, [r0, #0]
 800fb18:	f003 fd98 	bl	801364c <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800fb1c:	2580      	movs	r5, #128	@ 0x80
 800fb1e:	2380      	movs	r3, #128	@ 0x80
 800fb20:	022d      	lsls	r5, r5, #8
 800fb22:	021b      	lsls	r3, r3, #8
 800fb24:	4005      	ands	r5, r0
 800fb26:	4218      	tst	r0, r3
 800fb28:	d100      	bne.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
 800fb2a:	e3a5      	b.n	8010278 <HAL_PCD_IRQHandler+0x768>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800fb2c:	2280      	movs	r2, #128	@ 0x80
 800fb2e:	6826      	ldr	r6, [r4, #0]
 800fb30:	0212      	lsls	r2, r2, #8
 800fb32:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800fb34:	4213      	tst	r3, r2
 800fb36:	d101      	bne.n	800fb3c <HAL_PCD_IRQHandler+0x2c>
}
 800fb38:	b007      	add	sp, #28
 800fb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800fb3c:	220f      	movs	r2, #15
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800fb3e:	6c73      	ldr	r3, [r6, #68]	@ 0x44
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800fb40:	401a      	ands	r2, r3
 800fb42:	9200      	str	r2, [sp, #0]

    if (epindex == 0U)
 800fb44:	220f      	movs	r2, #15
 800fb46:	4213      	tst	r3, r2
 800fb48:	d000      	beq.n	800fb4c <HAL_PCD_IRQHandler+0x3c>
 800fb4a:	e07e      	b.n	800fc4a <HAL_PCD_IRQHandler+0x13a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800fb4c:	0019      	movs	r1, r3
 800fb4e:	3201      	adds	r2, #1
 800fb50:	4011      	ands	r1, r2
 800fb52:	4213      	tst	r3, r2
 800fb54:	d121      	bne.n	800fb9a <HAL_PCD_IRQHandler+0x8a>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fb56:	6833      	ldr	r3, [r6, #0]
 800fb58:	4ad3      	ldr	r2, [pc, #844]	@ (800fea8 <HAL_PCD_IRQHandler+0x398>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800fb5a:	0020      	movs	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	2280      	movs	r2, #128	@ 0x80
 800fb60:	0212      	lsls	r2, r2, #8
 800fb62:	4313      	orrs	r3, r2
 800fb64:	6033      	str	r3, [r6, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800fb66:	7c23      	ldrb	r3, [r4, #16]
 800fb68:	4ad0      	ldr	r2, [pc, #832]	@ (800feac <HAL_PCD_IRQHandler+0x39c>)
 800fb6a:	00db      	lsls	r3, r3, #3
 800fb6c:	189b      	adds	r3, r3, r2
 800fb6e:	681b      	ldr	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800fb70:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800fb72:	019b      	lsls	r3, r3, #6
 800fb74:	0d9b      	lsrs	r3, r3, #22
 800fb76:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 800fb78:	18d3      	adds	r3, r2, r3
 800fb7a:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800fb7c:	f008 fb5e 	bl	801823c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800fb80:	7b23      	ldrb	r3, [r4, #12]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d0d2      	beq.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
 800fb86:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800fb88:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800fb8a:	2a00      	cmp	r2, #0
 800fb8c:	d1ce      	bne.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800fb8e:	2080      	movs	r0, #128	@ 0x80
 800fb90:	7b23      	ldrb	r3, [r4, #12]
 800fb92:	4303      	orrs	r3, r0
 800fb94:	64cb      	str	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800fb96:	7322      	strb	r2, [r4, #12]
 800fb98:	e7c8      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800fb9a:	6833      	ldr	r3, [r6, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800fb9c:	2280      	movs	r2, #128	@ 0x80
 800fb9e:	001f      	movs	r7, r3
 800fba0:	0112      	lsls	r2, r2, #4
 800fba2:	4017      	ands	r7, r2
 800fba4:	4213      	tst	r3, r2
 800fba6:	d01b      	beq.n	800fbe0 <HAL_PCD_IRQHandler+0xd0>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fba8:	23a8      	movs	r3, #168	@ 0xa8
 800fbaa:	005b      	lsls	r3, r3, #1
 800fbac:	5ce0      	ldrb	r0, [r4, r3]
 800fbae:	f7ff ff17 	bl	800f9e0 <PCD_GET_EP_RX_CNT.isra.0>
 800fbb2:	0022      	movs	r2, r4

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fbb4:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fbb6:	3251      	adds	r2, #81	@ 0x51
 800fbb8:	32ff      	adds	r2, #255	@ 0xff
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fbba:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fbbc:	0003      	movs	r3, r0
 800fbbe:	61d0      	str	r0, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fbc0:	1861      	adds	r1, r4, r1
 800fbc2:	0030      	movs	r0, r6
 800fbc4:	88d2      	ldrh	r2, [r2, #6]
 800fbc6:	f003 fee1 	bl	801398c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fbca:	6821      	ldr	r1, [r4, #0]
 800fbcc:	4bb8      	ldr	r3, [pc, #736]	@ (800feb0 <HAL_PCD_IRQHandler+0x3a0>)
 800fbce:	680a      	ldr	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800fbd0:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fbd2:	401a      	ands	r2, r3
 800fbd4:	2380      	movs	r3, #128	@ 0x80
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	600b      	str	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800fbda:	f008 fadd 	bl	8018198 <HAL_PCD_SetupStageCallback>
 800fbde:	e7a5      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800fbe0:	041b      	lsls	r3, r3, #16
 800fbe2:	d5a3      	bpl.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fbe4:	6832      	ldr	r2, [r6, #0]
 800fbe6:	4bb2      	ldr	r3, [pc, #712]	@ (800feb0 <HAL_PCD_IRQHandler+0x3a0>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fbe8:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fbea:	401a      	ands	r2, r3
 800fbec:	2380      	movs	r3, #128	@ 0x80
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	6033      	str	r3, [r6, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fbf2:	23a8      	movs	r3, #168	@ 0xa8
 800fbf4:	005b      	lsls	r3, r3, #1
 800fbf6:	5ce0      	ldrb	r0, [r4, r3]
 800fbf8:	f7ff fef2 	bl	800f9e0 <PCD_GET_EP_RX_CNT.isra.0>
 800fbfc:	3551      	adds	r5, #81	@ 0x51
 800fbfe:	35ff      	adds	r5, #255	@ 0xff
 800fc00:	1e03      	subs	r3, r0, #0
 800fc02:	61e8      	str	r0, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800fc04:	d00e      	beq.n	800fc24 <HAL_PCD_IRQHandler+0x114>
 800fc06:	6969      	ldr	r1, [r5, #20]
 800fc08:	2900      	cmp	r1, #0
 800fc0a:	d00b      	beq.n	800fc24 <HAL_PCD_IRQHandler+0x114>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800fc0c:	0030      	movs	r0, r6
 800fc0e:	88ea      	ldrh	r2, [r5, #6]
 800fc10:	f003 febc 	bl	801398c <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800fc14:	696b      	ldr	r3, [r5, #20]
 800fc16:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800fc18:	0039      	movs	r1, r7
            ep->xfer_buff += ep->xfer_count;
 800fc1a:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800fc1c:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800fc1e:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800fc20:	f008 fb76 	bl	8018310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800fc24:	6821      	ldr	r1, [r4, #0]
 800fc26:	680a      	ldr	r2, [r1, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800fc28:	0513      	lsls	r3, r2, #20
 800fc2a:	d500      	bpl.n	800fc2e <HAL_PCD_IRQHandler+0x11e>
 800fc2c:	e77e      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
 800fc2e:	23c0      	movs	r3, #192	@ 0xc0
 800fc30:	019b      	lsls	r3, r3, #6
 800fc32:	401a      	ands	r2, r3
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d100      	bne.n	800fc3a <HAL_PCD_IRQHandler+0x12a>
 800fc38:	e778      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800fc3a:	680a      	ldr	r2, [r1, #0]
 800fc3c:	489d      	ldr	r0, [pc, #628]	@ (800feb4 <HAL_PCD_IRQHandler+0x3a4>)
 800fc3e:	4002      	ands	r2, r0
 800fc40:	4053      	eors	r3, r2
 800fc42:	4a9d      	ldr	r2, [pc, #628]	@ (800feb8 <HAL_PCD_IRQHandler+0x3a8>)
 800fc44:	4313      	orrs	r3, r2
 800fc46:	600b      	str	r3, [r1, #0]
 800fc48:	e770      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800fc4a:	9b00      	ldr	r3, [sp, #0]
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	9304      	str	r3, [sp, #16]
 800fc50:	18f3      	adds	r3, r6, r3
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	9203      	str	r2, [sp, #12]
 800fc56:	466a      	mov	r2, sp
 800fc58:	8992      	ldrh	r2, [r2, #12]
 800fc5a:	9201      	str	r2, [sp, #4]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800fc5c:	9a03      	ldr	r2, [sp, #12]
 800fc5e:	0412      	lsls	r2, r2, #16
 800fc60:	d400      	bmi.n	800fc64 <HAL_PCD_IRQHandler+0x154>
 800fc62:	e082      	b.n	800fd6a <HAL_PCD_IRQHandler+0x25a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800fc64:	6819      	ldr	r1, [r3, #0]
 800fc66:	4a92      	ldr	r2, [pc, #584]	@ (800feb0 <HAL_PCD_IRQHandler+0x3a0>)
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800fc68:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800fc6a:	4011      	ands	r1, r2
 800fc6c:	2280      	movs	r2, #128	@ 0x80
 800fc6e:	430a      	orrs	r2, r1
 800fc70:	601a      	str	r2, [r3, #0]
        if (ep->doublebuffer == 0U)
 800fc72:	9b00      	ldr	r3, [sp, #0]
 800fc74:	435d      	muls	r5, r3
 800fc76:	1965      	adds	r5, r4, r5
 800fc78:	002b      	movs	r3, r5
 800fc7a:	002a      	movs	r2, r5
 800fc7c:	335d      	adds	r3, #93	@ 0x5d
 800fc7e:	33ff      	adds	r3, #255	@ 0xff
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	3251      	adds	r2, #81	@ 0x51
 800fc84:	32ff      	adds	r2, #255	@ 0xff
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d10c      	bne.n	800fca4 <HAL_PCD_IRQHandler+0x194>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fc8a:	7810      	ldrb	r0, [r2, #0]
 800fc8c:	f7ff fea8 	bl	800f9e0 <PCD_GET_EP_RX_CNT.isra.0>
 800fc90:	1e07      	subs	r7, r0, #0

          if (count != 0U)
 800fc92:	d04f      	beq.n	800fd34 <HAL_PCD_IRQHandler+0x224>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800fc94:	002b      	movs	r3, r5
 800fc96:	3357      	adds	r3, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fc98:	33ff      	adds	r3, #255	@ 0xff
 800fc9a:	35fc      	adds	r5, #252	@ 0xfc
 800fc9c:	881a      	ldrh	r2, [r3, #0]
 800fc9e:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800fca0:	003b      	movs	r3, r7
 800fca2:	e044      	b.n	800fd2e <HAL_PCD_IRQHandler+0x21e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fca4:	7813      	ldrb	r3, [r2, #0]
 800fca6:	9302      	str	r3, [sp, #8]
          if (ep->type == EP_TYPE_BULK)
 800fca8:	002b      	movs	r3, r5
 800fcaa:	3354      	adds	r3, #84	@ 0x54
 800fcac:	33ff      	adds	r3, #255	@ 0xff
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d000      	beq.n	800fcb6 <HAL_PCD_IRQHandler+0x1a6>
 800fcb4:	e0c7      	b.n	800fe46 <HAL_PCD_IRQHandler+0x336>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800fcb6:	2380      	movs	r3, #128	@ 0x80
 800fcb8:	9a01      	ldr	r2, [sp, #4]
 800fcba:	01db      	lsls	r3, r3, #7
 800fcbc:	401a      	ands	r2, r3
 800fcbe:	9205      	str	r2, [sp, #20]
 800fcc0:	9a01      	ldr	r2, [sp, #4]
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800fcc2:	9802      	ldr	r0, [sp, #8]
 800fcc4:	35fc      	adds	r5, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800fcc6:	421a      	tst	r2, r3
 800fcc8:	d100      	bne.n	800fccc <HAL_PCD_IRQHandler+0x1bc>
 800fcca:	e08d      	b.n	800fde8 <HAL_PCD_IRQHandler+0x2d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800fccc:	f7ff fe74 	bl	800f9b8 <PCD_GET_EP_DBUF0_CNT.isra.0>

    if (ep->xfer_len >= count)
 800fcd0:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800fcd2:	0003      	movs	r3, r0
 800fcd4:	0007      	movs	r7, r0
    if (ep->xfer_len >= count)
 800fcd6:	4282      	cmp	r2, r0
 800fcd8:	d20e      	bcs.n	800fcf8 <HAL_PCD_IRQHandler+0x1e8>
 800fcda:	2200      	movs	r2, #0
 800fcdc:	66ea      	str	r2, [r5, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800fcde:	9a02      	ldr	r2, [sp, #8]
 800fce0:	4874      	ldr	r0, [pc, #464]	@ (800feb4 <HAL_PCD_IRQHandler+0x3a4>)
 800fce2:	0092      	lsls	r2, r2, #2
 800fce4:	18b2      	adds	r2, r6, r2
 800fce6:	6811      	ldr	r1, [r2, #0]
 800fce8:	4001      	ands	r1, r0
 800fcea:	2080      	movs	r0, #128	@ 0x80
 800fcec:	0180      	lsls	r0, r0, #6
 800fcee:	4048      	eors	r0, r1
 800fcf0:	4971      	ldr	r1, [pc, #452]	@ (800feb8 <HAL_PCD_IRQHandler+0x3a8>)
 800fcf2:	4301      	orrs	r1, r0
 800fcf4:	6011      	str	r1, [r2, #0]
 800fcf6:	e002      	b.n	800fcfe <HAL_PCD_IRQHandler+0x1ee>
      ep->xfer_len -= count;
 800fcf8:	1a12      	subs	r2, r2, r0
 800fcfa:	66ea      	str	r2, [r5, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 800fcfc:	d0ef      	beq.n	800fcde <HAL_PCD_IRQHandler+0x1ce>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800fcfe:	9a01      	ldr	r2, [sp, #4]
 800fd00:	0652      	lsls	r2, r2, #25
 800fd02:	d508      	bpl.n	800fd16 <HAL_PCD_IRQHandler+0x206>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800fd04:	9a02      	ldr	r2, [sp, #8]
 800fd06:	496d      	ldr	r1, [pc, #436]	@ (800febc <HAL_PCD_IRQHandler+0x3ac>)
 800fd08:	0092      	lsls	r2, r2, #2
 800fd0a:	18b2      	adds	r2, r6, r2
 800fd0c:	6810      	ldr	r0, [r2, #0]
 800fd0e:	4008      	ands	r0, r1
 800fd10:	496b      	ldr	r1, [pc, #428]	@ (800fec0 <HAL_PCD_IRQHandler+0x3b0>)
 800fd12:	4301      	orrs	r1, r0
 800fd14:	6011      	str	r1, [r2, #0]
    }

    if (count != 0U)
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00c      	beq.n	800fd34 <HAL_PCD_IRQHandler+0x224>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800fd1a:	2128      	movs	r1, #40	@ 0x28
 800fd1c:	9a00      	ldr	r2, [sp, #0]
 800fd1e:	4351      	muls	r1, r2
 800fd20:	1861      	adds	r1, r4, r1
 800fd22:	000a      	movs	r2, r1
 800fd24:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fd26:	32ff      	adds	r2, #255	@ 0xff
 800fd28:	31fc      	adds	r1, #252	@ 0xfc
 800fd2a:	8812      	ldrh	r2, [r2, #0]
 800fd2c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fd2e:	0030      	movs	r0, r6
 800fd30:	f003 fe2c 	bl	801398c <USB_ReadPMA>
        ep->xfer_count += count;
 800fd34:	2328      	movs	r3, #40	@ 0x28
 800fd36:	9900      	ldr	r1, [sp, #0]
 800fd38:	4359      	muls	r1, r3
 800fd3a:	1862      	adds	r2, r4, r1
 800fd3c:	32fc      	adds	r2, #252	@ 0xfc
 800fd3e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800fd40:	19c0      	adds	r0, r0, r7
 800fd42:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 800fd44:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800fd46:	19c0      	adds	r0, r0, r7
 800fd48:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800fd4a:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d003      	beq.n	800fd58 <HAL_PCD_IRQHandler+0x248>
 800fd50:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800fd52:	4297      	cmp	r7, r2
 800fd54:	d300      	bcc.n	800fd58 <HAL_PCD_IRQHandler+0x248>
 800fd56:	e095      	b.n	800fe84 <HAL_PCD_IRQHandler+0x374>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800fd58:	9a00      	ldr	r2, [sp, #0]
 800fd5a:	0020      	movs	r0, r4
 800fd5c:	4353      	muls	r3, r2
 800fd5e:	18e3      	adds	r3, r4, r3
 800fd60:	3351      	adds	r3, #81	@ 0x51
 800fd62:	33ff      	adds	r3, #255	@ 0xff
 800fd64:	7819      	ldrb	r1, [r3, #0]
 800fd66:	f008 fad3 	bl	8018310 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800fd6a:	6823      	ldr	r3, [r4, #0]
 800fd6c:	9302      	str	r3, [sp, #8]
      if ((wEPVal & USB_EP_VTTX) != 0U)
 800fd6e:	9b03      	ldr	r3, [sp, #12]
 800fd70:	061b      	lsls	r3, r3, #24
 800fd72:	d400      	bmi.n	800fd76 <HAL_PCD_IRQHandler+0x266>
 800fd74:	e6da      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800fd76:	9a02      	ldr	r2, [sp, #8]
 800fd78:	9b04      	ldr	r3, [sp, #16]
 800fd7a:	4694      	mov	ip, r2
 800fd7c:	4463      	add	r3, ip
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	4949      	ldr	r1, [pc, #292]	@ (800fea8 <HAL_PCD_IRQHandler+0x398>)
 800fd82:	400a      	ands	r2, r1
 800fd84:	2180      	movs	r1, #128	@ 0x80
 800fd86:	0209      	lsls	r1, r1, #8
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	601a      	str	r2, [r3, #0]
        if (ep->type == EP_TYPE_ISOC)
 800fd8c:	2328      	movs	r3, #40	@ 0x28
 800fd8e:	9900      	ldr	r1, [sp, #0]
 800fd90:	4359      	muls	r1, r3
 800fd92:	1866      	adds	r6, r4, r1
 800fd94:	7cf2      	ldrb	r2, [r6, #19]
 800fd96:	9204      	str	r2, [sp, #16]
 800fd98:	2a01      	cmp	r2, #1
 800fd9a:	d000      	beq.n	800fd9e <HAL_PCD_IRQHandler+0x28e>
 800fd9c:	e0af      	b.n	800fefe <HAL_PCD_IRQHandler+0x3ee>
          ep->xfer_len = 0U;
 800fd9e:	9a00      	ldr	r2, [sp, #0]
 800fda0:	3201      	adds	r2, #1
 800fda2:	4353      	muls	r3, r2
 800fda4:	2200      	movs	r2, #0
 800fda6:	511a      	str	r2, [r3, r4]
          if (ep->doublebuffer != 0U)
 800fda8:	7f33      	ldrb	r3, [r6, #28]
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d013      	beq.n	800fdd6 <HAL_PCD_IRQHandler+0x2c6>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800fdae:	9b03      	ldr	r3, [sp, #12]
 800fdb0:	065b      	lsls	r3, r3, #25
 800fdb2:	d400      	bmi.n	800fdb6 <HAL_PCD_IRQHandler+0x2a6>
 800fdb4:	e086      	b.n	800fec4 <HAL_PCD_IRQHandler+0x3b4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800fdb6:	7c73      	ldrb	r3, [r6, #17]
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d16a      	bne.n	800fe92 <HAL_PCD_IRQHandler+0x382>
 800fdbc:	7c33      	ldrb	r3, [r6, #16]
 800fdbe:	4a3b      	ldr	r2, [pc, #236]	@ (800feac <HAL_PCD_IRQHandler+0x39c>)
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	189b      	adds	r3, r3, r2
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	0192      	lsls	r2, r2, #6
 800fdc8:	0992      	lsrs	r2, r2, #6
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	2280      	movs	r2, #128	@ 0x80
 800fdce:	6819      	ldr	r1, [r3, #0]
 800fdd0:	0612      	lsls	r2, r2, #24
 800fdd2:	430a      	orrs	r2, r1
 800fdd4:	601a      	str	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800fdd6:	2328      	movs	r3, #40	@ 0x28
 800fdd8:	9a00      	ldr	r2, [sp, #0]
 800fdda:	4353      	muls	r3, r2
 800fddc:	18e3      	adds	r3, r4, r3
 800fdde:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800fde0:	0020      	movs	r0, r4
 800fde2:	f008 fa2b 	bl	801823c <HAL_PCD_DataInStageCallback>
 800fde6:	e6a1      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800fde8:	f7ff fdfa 	bl	800f9e0 <PCD_GET_EP_RX_CNT.isra.0>
    if (ep->xfer_len >= count)
 800fdec:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800fdee:	0003      	movs	r3, r0
 800fdf0:	0007      	movs	r7, r0
    if (ep->xfer_len >= count)
 800fdf2:	4282      	cmp	r2, r0
 800fdf4:	d20e      	bcs.n	800fe14 <HAL_PCD_IRQHandler+0x304>
 800fdf6:	9a05      	ldr	r2, [sp, #20]
 800fdf8:	66ea      	str	r2, [r5, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800fdfa:	9a02      	ldr	r2, [sp, #8]
 800fdfc:	482d      	ldr	r0, [pc, #180]	@ (800feb4 <HAL_PCD_IRQHandler+0x3a4>)
 800fdfe:	0092      	lsls	r2, r2, #2
 800fe00:	18b2      	adds	r2, r6, r2
 800fe02:	6811      	ldr	r1, [r2, #0]
 800fe04:	4001      	ands	r1, r0
 800fe06:	2080      	movs	r0, #128	@ 0x80
 800fe08:	0180      	lsls	r0, r0, #6
 800fe0a:	4048      	eors	r0, r1
 800fe0c:	492a      	ldr	r1, [pc, #168]	@ (800feb8 <HAL_PCD_IRQHandler+0x3a8>)
 800fe0e:	4301      	orrs	r1, r0
 800fe10:	6011      	str	r1, [r2, #0]
 800fe12:	e002      	b.n	800fe1a <HAL_PCD_IRQHandler+0x30a>
      ep->xfer_len -= count;
 800fe14:	1a12      	subs	r2, r2, r0
 800fe16:	66ea      	str	r2, [r5, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 800fe18:	d0ef      	beq.n	800fdfa <HAL_PCD_IRQHandler+0x2ea>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800fe1a:	9a01      	ldr	r2, [sp, #4]
 800fe1c:	0652      	lsls	r2, r2, #25
 800fe1e:	d408      	bmi.n	800fe32 <HAL_PCD_IRQHandler+0x322>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800fe20:	9a02      	ldr	r2, [sp, #8]
 800fe22:	4926      	ldr	r1, [pc, #152]	@ (800febc <HAL_PCD_IRQHandler+0x3ac>)
 800fe24:	0092      	lsls	r2, r2, #2
 800fe26:	18b2      	adds	r2, r6, r2
 800fe28:	6810      	ldr	r0, [r2, #0]
 800fe2a:	4008      	ands	r0, r1
 800fe2c:	4924      	ldr	r1, [pc, #144]	@ (800fec0 <HAL_PCD_IRQHandler+0x3b0>)
 800fe2e:	4301      	orrs	r1, r0
 800fe30:	6011      	str	r1, [r2, #0]
    if (count != 0U)
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d100      	bne.n	800fe38 <HAL_PCD_IRQHandler+0x328>
 800fe36:	e77d      	b.n	800fd34 <HAL_PCD_IRQHandler+0x224>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fe38:	2128      	movs	r1, #40	@ 0x28
 800fe3a:	9a00      	ldr	r2, [sp, #0]
 800fe3c:	4351      	muls	r1, r2
 800fe3e:	1861      	adds	r1, r4, r1
 800fe40:	000a      	movs	r2, r1
 800fe42:	325b      	adds	r2, #91	@ 0x5b
 800fe44:	e76f      	b.n	800fd26 <HAL_PCD_IRQHandler+0x216>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800fe46:	9b02      	ldr	r3, [sp, #8]
 800fe48:	491c      	ldr	r1, [pc, #112]	@ (800febc <HAL_PCD_IRQHandler+0x3ac>)
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	18f3      	adds	r3, r6, r3
 800fe4e:	6818      	ldr	r0, [r3, #0]
 800fe50:	4008      	ands	r0, r1
 800fe52:	491b      	ldr	r1, [pc, #108]	@ (800fec0 <HAL_PCD_IRQHandler+0x3b0>)
 800fe54:	4301      	orrs	r1, r0
 800fe56:	6019      	str	r1, [r3, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800fe58:	7810      	ldrb	r0, [r2, #0]
 800fe5a:	0083      	lsls	r3, r0, #2
 800fe5c:	18f3      	adds	r3, r6, r3
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	045b      	lsls	r3, r3, #17
 800fe62:	d507      	bpl.n	800fe74 <HAL_PCD_IRQHandler+0x364>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800fe64:	f7ff fda8 	bl	800f9b8 <PCD_GET_EP_DBUF0_CNT.isra.0>
 800fe68:	1e07      	subs	r7, r0, #0
              if (count != 0U)
 800fe6a:	d100      	bne.n	800fe6e <HAL_PCD_IRQHandler+0x35e>
 800fe6c:	e762      	b.n	800fd34 <HAL_PCD_IRQHandler+0x224>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800fe6e:	002b      	movs	r3, r5
 800fe70:	3359      	adds	r3, #89	@ 0x59
 800fe72:	e711      	b.n	800fc98 <HAL_PCD_IRQHandler+0x188>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800fe74:	f7ff fdb4 	bl	800f9e0 <PCD_GET_EP_RX_CNT.isra.0>
 800fe78:	1e07      	subs	r7, r0, #0
              if (count != 0U)
 800fe7a:	d100      	bne.n	800fe7e <HAL_PCD_IRQHandler+0x36e>
 800fe7c:	e75a      	b.n	800fd34 <HAL_PCD_IRQHandler+0x224>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800fe7e:	002b      	movs	r3, r5
 800fe80:	335b      	adds	r3, #91	@ 0x5b
 800fe82:	e709      	b.n	800fc98 <HAL_PCD_IRQHandler+0x188>
        ep = &hpcd->OUT_ep[epindex];
 800fe84:	3151      	adds	r1, #81	@ 0x51
 800fe86:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fe88:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 800fe8a:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fe8c:	f003 fc0e 	bl	80136ac <USB_EPStartXfer>
 800fe90:	e76b      	b.n	800fd6a <HAL_PCD_IRQHandler+0x25a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d19f      	bne.n	800fdd6 <HAL_PCD_IRQHandler+0x2c6>
 800fe96:	7c33      	ldrb	r3, [r6, #16]
 800fe98:	4a04      	ldr	r2, [pc, #16]	@ (800feac <HAL_PCD_IRQHandler+0x39c>)
 800fe9a:	00db      	lsls	r3, r3, #3
 800fe9c:	189b      	adds	r3, r3, r2
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	b292      	uxth	r2, r2
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	e795      	b.n	800fdd4 <HAL_PCD_IRQHandler+0x2c4>
 800fea8:	07ff8f0f 	.word	0x07ff8f0f
 800feac:	40009800 	.word	0x40009800
 800feb0:	07ff0f8f 	.word	0x07ff0f8f
 800feb4:	07ffbf8f 	.word	0x07ffbf8f
 800feb8:	00008080 	.word	0x00008080
 800febc:	07ff8f8f 	.word	0x07ff8f8f
 800fec0:	000080c0 	.word	0x000080c0
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800fec4:	7c73      	ldrb	r3, [r6, #17]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d10d      	bne.n	800fee6 <HAL_PCD_IRQHandler+0x3d6>
 800feca:	7c33      	ldrb	r3, [r6, #16]
 800fecc:	4ad5      	ldr	r2, [pc, #852]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	189b      	adds	r3, r3, r2
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	0192      	lsls	r2, r2, #6
 800fed6:	0992      	lsrs	r2, r2, #6
 800fed8:	605a      	str	r2, [r3, #4]
 800feda:	2280      	movs	r2, #128	@ 0x80
 800fedc:	6859      	ldr	r1, [r3, #4]
 800fede:	0612      	lsls	r2, r2, #24
 800fee0:	430a      	orrs	r2, r1
 800fee2:	605a      	str	r2, [r3, #4]
 800fee4:	e777      	b.n	800fdd6 <HAL_PCD_IRQHandler+0x2c6>
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d000      	beq.n	800feec <HAL_PCD_IRQHandler+0x3dc>
 800feea:	e774      	b.n	800fdd6 <HAL_PCD_IRQHandler+0x2c6>
 800feec:	7c33      	ldrb	r3, [r6, #16]
 800feee:	4acd      	ldr	r2, [pc, #820]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 800fef0:	00db      	lsls	r3, r3, #3
 800fef2:	189b      	adds	r3, r3, r2
 800fef4:	685a      	ldr	r2, [r3, #4]
 800fef6:	b292      	uxth	r2, r2
 800fef8:	605a      	str	r2, [r3, #4]
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	e7f1      	b.n	800fee2 <HAL_PCD_IRQHandler+0x3d2>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800fefe:	2380      	movs	r3, #128	@ 0x80
 800ff00:	9803      	ldr	r0, [sp, #12]
 800ff02:	9a03      	ldr	r2, [sp, #12]
 800ff04:	005b      	lsls	r3, r3, #1
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ff06:	7c35      	ldrb	r5, [r6, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ff08:	4018      	ands	r0, r3
 800ff0a:	421a      	tst	r2, r3
 800ff0c:	d119      	bne.n	800ff42 <HAL_PCD_IRQHandler+0x432>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ff0e:	4ac5      	ldr	r2, [pc, #788]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 800ff10:	00eb      	lsls	r3, r5, #3
 800ff12:	189b      	adds	r3, r3, r2
 800ff14:	681b      	ldr	r3, [r3, #0]
            if (ep->xfer_len > TxPctSize)
 800ff16:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ff18:	019b      	lsls	r3, r3, #6
            if (ep->xfer_len > TxPctSize)
 800ff1a:	0d9b      	lsrs	r3, r3, #22
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d802      	bhi.n	800ff26 <HAL_PCD_IRQHandler+0x416>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ff20:	0029      	movs	r1, r5
 800ff22:	62b0      	str	r0, [r6, #40]	@ 0x28
 800ff24:	e75c      	b.n	800fde0 <HAL_PCD_IRQHandler+0x2d0>
              ep->xfer_len -= TxPctSize;
 800ff26:	1ad2      	subs	r2, r2, r3
 800ff28:	62b2      	str	r2, [r6, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 800ff2a:	6a72      	ldr	r2, [r6, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 800ff2c:	3110      	adds	r1, #16
              ep->xfer_buff += TxPctSize;
 800ff2e:	18d2      	adds	r2, r2, r3
 800ff30:	6272      	str	r2, [r6, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800ff32:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ff34:	9802      	ldr	r0, [sp, #8]
              ep->xfer_count += TxPctSize;
 800ff36:	18d3      	adds	r3, r2, r3
 800ff38:	62f3      	str	r3, [r6, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 800ff3a:	1861      	adds	r1, r4, r1
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ff3c:	f003 fbb6 	bl	80136ac <USB_EPStartXfer>
 800ff40:	e5f4      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ff42:	2340      	movs	r3, #64	@ 0x40
 800ff44:	9f01      	ldr	r7, [sp, #4]
 800ff46:	9a01      	ldr	r2, [sp, #4]
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ff48:	0028      	movs	r0, r5
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ff4a:	401f      	ands	r7, r3
 800ff4c:	421a      	tst	r2, r3
 800ff4e:	d100      	bne.n	800ff52 <HAL_PCD_IRQHandler+0x442>
 800ff50:	e0d2      	b.n	80100f8 <HAL_PCD_IRQHandler+0x5e8>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ff52:	f7ff fd31 	bl	800f9b8 <PCD_GET_EP_DBUF0_CNT.isra.0>

    if (ep->xfer_len > TxPctSize)
 800ff56:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 800ff58:	2300      	movs	r3, #0
    if (ep->xfer_len > TxPctSize)
 800ff5a:	4282      	cmp	r2, r0
 800ff5c:	d900      	bls.n	800ff60 <HAL_PCD_IRQHandler+0x450>
      ep->xfer_len -= TxPctSize;
 800ff5e:	1a13      	subs	r3, r2, r0
 800ff60:	2280      	movs	r2, #128	@ 0x80
 800ff62:	9f01      	ldr	r7, [sp, #4]
 800ff64:	01d2      	lsls	r2, r2, #7
 800ff66:	62b3      	str	r3, [r6, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ff68:	4017      	ands	r7, r2
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d14d      	bne.n	801000a <HAL_PCD_IRQHandler+0x4fa>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ff6e:	9a00      	ldr	r2, [sp, #0]
 800ff70:	3328      	adds	r3, #40	@ 0x28
 800ff72:	4353      	muls	r3, r2
 800ff74:	18e3      	adds	r3, r4, r3
 800ff76:	7c5b      	ldrb	r3, [r3, #17]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d136      	bne.n	800ffea <HAL_PCD_IRQHandler+0x4da>
 800ff7c:	2180      	movs	r1, #128	@ 0x80
 800ff7e:	4aa9      	ldr	r2, [pc, #676]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 800ff80:	00eb      	lsls	r3, r5, #3
 800ff82:	189b      	adds	r3, r3, r2
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	0609      	lsls	r1, r1, #24
 800ff88:	0192      	lsls	r2, r2, #6
 800ff8a:	0992      	lsrs	r2, r2, #6
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	430a      	orrs	r2, r1
 800ff92:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	0192      	lsls	r2, r2, #6
 800ff98:	0992      	lsrs	r2, r2, #6
 800ff9a:	605a      	str	r2, [r3, #4]
 800ff9c:	685a      	ldr	r2, [r3, #4]
 800ff9e:	4311      	orrs	r1, r2
 800ffa0:	6059      	str	r1, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 800ffa2:	9b04      	ldr	r3, [sp, #16]
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d10a      	bne.n	800ffbe <HAL_PCD_IRQHandler+0x4ae>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800ffa8:	9a02      	ldr	r2, [sp, #8]
 800ffaa:	00ab      	lsls	r3, r5, #2
 800ffac:	18d3      	adds	r3, r2, r3
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	499d      	ldr	r1, [pc, #628]	@ (8010228 <HAL_PCD_IRQHandler+0x718>)
 800ffb2:	400a      	ands	r2, r1
 800ffb4:	2120      	movs	r1, #32
 800ffb6:	4051      	eors	r1, r2
 800ffb8:	4a9c      	ldr	r2, [pc, #624]	@ (801022c <HAL_PCD_IRQHandler+0x71c>)
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ffbe:	0029      	movs	r1, r5
 800ffc0:	0020      	movs	r0, r4
 800ffc2:	f008 f93b 	bl	801823c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ffc6:	2f00      	cmp	r7, #0
 800ffc8:	d100      	bne.n	800ffcc <HAL_PCD_IRQHandler+0x4bc>
 800ffca:	e5af      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ffcc:	2328      	movs	r3, #40	@ 0x28
 800ffce:	9a00      	ldr	r2, [sp, #0]
 800ffd0:	4353      	muls	r3, r2
 800ffd2:	18e3      	adds	r3, r4, r3
 800ffd4:	7c1a      	ldrb	r2, [r3, #16]
 800ffd6:	6823      	ldr	r3, [r4, #0]
 800ffd8:	0092      	lsls	r2, r2, #2
 800ffda:	189b      	adds	r3, r3, r2
 800ffdc:	6819      	ldr	r1, [r3, #0]
 800ffde:	4a94      	ldr	r2, [pc, #592]	@ (8010230 <HAL_PCD_IRQHandler+0x720>)
 800ffe0:	4011      	ands	r1, r2
 800ffe2:	4a94      	ldr	r2, [pc, #592]	@ (8010234 <HAL_PCD_IRQHandler+0x724>)
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ffe4:	430a      	orrs	r2, r1
 800ffe6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ffe8:	e5a0      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d1d9      	bne.n	800ffa2 <HAL_PCD_IRQHandler+0x492>
 800ffee:	4a8d      	ldr	r2, [pc, #564]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 800fff0:	00eb      	lsls	r3, r5, #3
 800fff2:	189b      	adds	r3, r3, r2
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	b292      	uxth	r2, r2
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800fffe:	685a      	ldr	r2, [r3, #4]
 8010000:	b292      	uxth	r2, r2
 8010002:	605a      	str	r2, [r3, #4]
 8010004:	685a      	ldr	r2, [r3, #4]
 8010006:	605a      	str	r2, [r3, #4]
 8010008:	e7cb      	b.n	800ffa2 <HAL_PCD_IRQHandler+0x492>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801000a:	2f00      	cmp	r7, #0
 801000c:	d008      	beq.n	8010020 <HAL_PCD_IRQHandler+0x510>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801000e:	9a02      	ldr	r2, [sp, #8]
 8010010:	00ab      	lsls	r3, r5, #2
 8010012:	18d3      	adds	r3, r2, r3
 8010014:	6819      	ldr	r1, [r3, #0]
 8010016:	4a86      	ldr	r2, [pc, #536]	@ (8010230 <HAL_PCD_IRQHandler+0x720>)
 8010018:	4011      	ands	r1, r2
 801001a:	4a86      	ldr	r2, [pc, #536]	@ (8010234 <HAL_PCD_IRQHandler+0x724>)
 801001c:	430a      	orrs	r2, r1
 801001e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 8010020:	2228      	movs	r2, #40	@ 0x28
 8010022:	9b00      	ldr	r3, [sp, #0]
 8010024:	435a      	muls	r2, r3
 8010026:	18a2      	adds	r2, r4, r2
 8010028:	0017      	movs	r7, r2
 801002a:	3734      	adds	r7, #52	@ 0x34
 801002c:	783b      	ldrb	r3, [r7, #0]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d129      	bne.n	8010086 <HAL_PCD_IRQHandler+0x576>
        ep->xfer_buff += TxPctSize;
 8010032:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8010034:	1809      	adds	r1, r1, r0
 8010036:	6251      	str	r1, [r2, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8010038:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 801003a:	181b      	adds	r3, r3, r0
 801003c:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 801003e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8010040:	6a13      	ldr	r3, [r2, #32]
 8010042:	429e      	cmp	r6, r3
 8010044:	d32e      	bcc.n	80100a4 <HAL_PCD_IRQHandler+0x594>
          ep->xfer_len_db -= len;
 8010046:	1af6      	subs	r6, r6, r3
 8010048:	6316      	str	r6, [r2, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801004a:	2228      	movs	r2, #40	@ 0x28
 801004c:	9800      	ldr	r0, [sp, #0]
 801004e:	4342      	muls	r2, r0
 8010050:	18a2      	adds	r2, r4, r2
 8010052:	7c52      	ldrb	r2, [r2, #17]
 8010054:	2a00      	cmp	r2, #0
 8010056:	d144      	bne.n	80100e2 <HAL_PCD_IRQHandler+0x5d2>
 8010058:	4a72      	ldr	r2, [pc, #456]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 801005a:	00ed      	lsls	r5, r5, #3
 801005c:	18ad      	adds	r5, r5, r2
 801005e:	682a      	ldr	r2, [r5, #0]
 8010060:	0192      	lsls	r2, r2, #6
 8010062:	0992      	lsrs	r2, r2, #6
 8010064:	602a      	str	r2, [r5, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d126      	bne.n	80100b8 <HAL_PCD_IRQHandler+0x5a8>
 801006a:	2280      	movs	r2, #128	@ 0x80
 801006c:	6828      	ldr	r0, [r5, #0]
 801006e:	0612      	lsls	r2, r2, #24
 8010070:	4302      	orrs	r2, r0
 8010072:	602a      	str	r2, [r5, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8010074:	2228      	movs	r2, #40	@ 0x28
 8010076:	9800      	ldr	r0, [sp, #0]
 8010078:	b29b      	uxth	r3, r3
 801007a:	4342      	muls	r2, r0
 801007c:	18a2      	adds	r2, r4, r2
 801007e:	8b12      	ldrh	r2, [r2, #24]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010080:	9802      	ldr	r0, [sp, #8]
 8010082:	f003 fae5 	bl	8013650 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8010086:	2328      	movs	r3, #40	@ 0x28
 8010088:	9a00      	ldr	r2, [sp, #0]
 801008a:	4967      	ldr	r1, [pc, #412]	@ (8010228 <HAL_PCD_IRQHandler+0x718>)
 801008c:	4353      	muls	r3, r2
 801008e:	18e3      	adds	r3, r4, r3
 8010090:	7c1a      	ldrb	r2, [r3, #16]
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	0092      	lsls	r2, r2, #2
 8010096:	189b      	adds	r3, r3, r2
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	400a      	ands	r2, r1
 801009c:	2130      	movs	r1, #48	@ 0x30
 801009e:	4051      	eors	r1, r2
 80100a0:	4a62      	ldr	r2, [pc, #392]	@ (801022c <HAL_PCD_IRQHandler+0x71c>)
 80100a2:	e79f      	b.n	800ffe4 <HAL_PCD_IRQHandler+0x4d4>
        else if (ep->xfer_len_db == 0U)
 80100a4:	2e00      	cmp	r6, #0
 80100a6:	d102      	bne.n	80100ae <HAL_PCD_IRQHandler+0x59e>
          len = TxPctSize;
 80100a8:	0003      	movs	r3, r0
          ep->xfer_fill_db = 0U;
 80100aa:	703e      	strb	r6, [r7, #0]
 80100ac:	e7cd      	b.n	801004a <HAL_PCD_IRQHandler+0x53a>
          ep->xfer_fill_db = 0U;
 80100ae:	2300      	movs	r3, #0
 80100b0:	703b      	strb	r3, [r7, #0]
          ep->xfer_len_db = 0U;
 80100b2:	6313      	str	r3, [r2, #48]	@ 0x30
          len = ep->xfer_len_db;
 80100b4:	0033      	movs	r3, r6
 80100b6:	e7c8      	b.n	801004a <HAL_PCD_IRQHandler+0x53a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80100b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80100ba:	d806      	bhi.n	80100ca <HAL_PCD_IRQHandler+0x5ba>
 80100bc:	2001      	movs	r0, #1
 80100be:	085a      	lsrs	r2, r3, #1
 80100c0:	4018      	ands	r0, r3
 80100c2:	1812      	adds	r2, r2, r0
 80100c4:	0692      	lsls	r2, r2, #26
 80100c6:	6828      	ldr	r0, [r5, #0]
 80100c8:	e7d2      	b.n	8010070 <HAL_PCD_IRQHandler+0x560>
 80100ca:	201f      	movs	r0, #31
 80100cc:	4018      	ands	r0, r3
 80100ce:	4246      	negs	r6, r0
 80100d0:	4170      	adcs	r0, r6
 80100d2:	095a      	lsrs	r2, r3, #5
 80100d4:	1a12      	subs	r2, r2, r0
 80100d6:	6828      	ldr	r0, [r5, #0]
 80100d8:	0692      	lsls	r2, r2, #26
 80100da:	4302      	orrs	r2, r0
 80100dc:	2080      	movs	r0, #128	@ 0x80
 80100de:	0600      	lsls	r0, r0, #24
 80100e0:	e7c6      	b.n	8010070 <HAL_PCD_IRQHandler+0x560>
 80100e2:	2a01      	cmp	r2, #1
 80100e4:	d1c6      	bne.n	8010074 <HAL_PCD_IRQHandler+0x564>
 80100e6:	4a4f      	ldr	r2, [pc, #316]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 80100e8:	00ed      	lsls	r5, r5, #3
 80100ea:	18ad      	adds	r5, r5, r2
 80100ec:	682a      	ldr	r2, [r5, #0]
 80100ee:	b292      	uxth	r2, r2
 80100f0:	602a      	str	r2, [r5, #0]
 80100f2:	6828      	ldr	r0, [r5, #0]
 80100f4:	041a      	lsls	r2, r3, #16
 80100f6:	e7bb      	b.n	8010070 <HAL_PCD_IRQHandler+0x560>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80100f8:	f7ff fc72 	bl	800f9e0 <PCD_GET_EP_RX_CNT.isra.0>
    if (ep->xfer_len >= TxPctSize)
 80100fc:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
      ep->xfer_len = 0U;
 80100fe:	003b      	movs	r3, r7
    if (ep->xfer_len >= TxPctSize)
 8010100:	4282      	cmp	r2, r0
 8010102:	d300      	bcc.n	8010106 <HAL_PCD_IRQHandler+0x5f6>
      ep->xfer_len -= TxPctSize;
 8010104:	1a13      	subs	r3, r2, r0
 8010106:	2280      	movs	r2, #128	@ 0x80
 8010108:	9f01      	ldr	r7, [sp, #4]
 801010a:	01d2      	lsls	r2, r2, #7
 801010c:	62b3      	str	r3, [r6, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 801010e:	4017      	ands	r7, r2
 8010110:	2b00      	cmp	r3, #0
 8010112:	d13f      	bne.n	8010194 <HAL_PCD_IRQHandler+0x684>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010114:	9a00      	ldr	r2, [sp, #0]
 8010116:	3328      	adds	r3, #40	@ 0x28
 8010118:	4353      	muls	r3, r2
 801011a:	18e3      	adds	r3, r4, r3
 801011c:	7c5b      	ldrb	r3, [r3, #17]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d128      	bne.n	8010174 <HAL_PCD_IRQHandler+0x664>
 8010122:	2180      	movs	r1, #128	@ 0x80
 8010124:	4a3f      	ldr	r2, [pc, #252]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 8010126:	00eb      	lsls	r3, r5, #3
 8010128:	189b      	adds	r3, r3, r2
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	0609      	lsls	r1, r1, #24
 801012e:	0192      	lsls	r2, r2, #6
 8010130:	0992      	lsrs	r2, r2, #6
 8010132:	601a      	str	r2, [r3, #0]
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	430a      	orrs	r2, r1
 8010138:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	0192      	lsls	r2, r2, #6
 801013e:	0992      	lsrs	r2, r2, #6
 8010140:	605a      	str	r2, [r3, #4]
 8010142:	685a      	ldr	r2, [r3, #4]
 8010144:	4311      	orrs	r1, r2
 8010146:	6059      	str	r1, [r3, #4]
      if (ep->type == EP_TYPE_BULK)
 8010148:	9b04      	ldr	r3, [sp, #16]
 801014a:	2b02      	cmp	r3, #2
 801014c:	d10a      	bne.n	8010164 <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 801014e:	9a02      	ldr	r2, [sp, #8]
 8010150:	00ab      	lsls	r3, r5, #2
 8010152:	18d3      	adds	r3, r2, r3
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	4934      	ldr	r1, [pc, #208]	@ (8010228 <HAL_PCD_IRQHandler+0x718>)
 8010158:	400a      	ands	r2, r1
 801015a:	2120      	movs	r1, #32
 801015c:	4051      	eors	r1, r2
 801015e:	4a33      	ldr	r2, [pc, #204]	@ (801022c <HAL_PCD_IRQHandler+0x71c>)
 8010160:	430a      	orrs	r2, r1
 8010162:	601a      	str	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010164:	0029      	movs	r1, r5
 8010166:	0020      	movs	r0, r4
 8010168:	f008 f868 	bl	801823c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801016c:	2f00      	cmp	r7, #0
 801016e:	d000      	beq.n	8010172 <HAL_PCD_IRQHandler+0x662>
 8010170:	e4dc      	b.n	800fb2c <HAL_PCD_IRQHandler+0x1c>
 8010172:	e72b      	b.n	800ffcc <HAL_PCD_IRQHandler+0x4bc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010174:	2b01      	cmp	r3, #1
 8010176:	d1e7      	bne.n	8010148 <HAL_PCD_IRQHandler+0x638>
 8010178:	4a2a      	ldr	r2, [pc, #168]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 801017a:	00eb      	lsls	r3, r5, #3
 801017c:	189b      	adds	r3, r3, r2
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	b292      	uxth	r2, r2
 8010182:	601a      	str	r2, [r3, #0]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010188:	685a      	ldr	r2, [r3, #4]
 801018a:	b292      	uxth	r2, r2
 801018c:	605a      	str	r2, [r3, #4]
 801018e:	685a      	ldr	r2, [r3, #4]
 8010190:	605a      	str	r2, [r3, #4]
 8010192:	e7d9      	b.n	8010148 <HAL_PCD_IRQHandler+0x638>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010194:	2f00      	cmp	r7, #0
 8010196:	d108      	bne.n	80101aa <HAL_PCD_IRQHandler+0x69a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010198:	9a02      	ldr	r2, [sp, #8]
 801019a:	00ab      	lsls	r3, r5, #2
 801019c:	18d3      	adds	r3, r2, r3
 801019e:	6819      	ldr	r1, [r3, #0]
 80101a0:	4a23      	ldr	r2, [pc, #140]	@ (8010230 <HAL_PCD_IRQHandler+0x720>)
 80101a2:	4011      	ands	r1, r2
 80101a4:	4a23      	ldr	r2, [pc, #140]	@ (8010234 <HAL_PCD_IRQHandler+0x724>)
 80101a6:	430a      	orrs	r2, r1
 80101a8:	601a      	str	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 80101aa:	2228      	movs	r2, #40	@ 0x28
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	435a      	muls	r2, r3
 80101b0:	18a2      	adds	r2, r4, r2
 80101b2:	0017      	movs	r7, r2
 80101b4:	3734      	adds	r7, #52	@ 0x34
 80101b6:	783b      	ldrb	r3, [r7, #0]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d000      	beq.n	80101be <HAL_PCD_IRQHandler+0x6ae>
 80101bc:	e763      	b.n	8010086 <HAL_PCD_IRQHandler+0x576>
        ep->xfer_buff += TxPctSize;
 80101be:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80101c0:	1809      	adds	r1, r1, r0
 80101c2:	6251      	str	r1, [r2, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80101c4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80101c6:	181b      	adds	r3, r3, r0
 80101c8:	62f3      	str	r3, [r6, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80101ca:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80101cc:	6a13      	ldr	r3, [r2, #32]
 80101ce:	429e      	cmp	r6, r3
 80101d0:	d31d      	bcc.n	801020e <HAL_PCD_IRQHandler+0x6fe>
          ep->xfer_len_db -= len;
 80101d2:	1af6      	subs	r6, r6, r3
 80101d4:	6316      	str	r6, [r2, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80101d6:	2228      	movs	r2, #40	@ 0x28
 80101d8:	9800      	ldr	r0, [sp, #0]
 80101da:	4342      	muls	r2, r0
 80101dc:	18a2      	adds	r2, r4, r2
 80101de:	7c52      	ldrb	r2, [r2, #17]
 80101e0:	2a00      	cmp	r2, #0
 80101e2:	d13e      	bne.n	8010262 <HAL_PCD_IRQHandler+0x752>
 80101e4:	4a0f      	ldr	r2, [pc, #60]	@ (8010224 <HAL_PCD_IRQHandler+0x714>)
 80101e6:	00ed      	lsls	r5, r5, #3
 80101e8:	18ad      	adds	r5, r5, r2
 80101ea:	686a      	ldr	r2, [r5, #4]
 80101ec:	0192      	lsls	r2, r2, #6
 80101ee:	0992      	lsrs	r2, r2, #6
 80101f0:	606a      	str	r2, [r5, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d120      	bne.n	8010238 <HAL_PCD_IRQHandler+0x728>
 80101f6:	2280      	movs	r2, #128	@ 0x80
 80101f8:	6868      	ldr	r0, [r5, #4]
 80101fa:	0612      	lsls	r2, r2, #24
 80101fc:	4302      	orrs	r2, r0
 80101fe:	606a      	str	r2, [r5, #4]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010200:	2228      	movs	r2, #40	@ 0x28
 8010202:	9800      	ldr	r0, [sp, #0]
 8010204:	b29b      	uxth	r3, r3
 8010206:	4342      	muls	r2, r0
 8010208:	18a2      	adds	r2, r4, r2
 801020a:	8b52      	ldrh	r2, [r2, #26]
 801020c:	e738      	b.n	8010080 <HAL_PCD_IRQHandler+0x570>
        else if (ep->xfer_len_db == 0U)
 801020e:	2e00      	cmp	r6, #0
 8010210:	d102      	bne.n	8010218 <HAL_PCD_IRQHandler+0x708>
          len = TxPctSize;
 8010212:	0003      	movs	r3, r0
          ep->xfer_fill_db = 0U;
 8010214:	703e      	strb	r6, [r7, #0]
 8010216:	e7de      	b.n	80101d6 <HAL_PCD_IRQHandler+0x6c6>
          ep->xfer_len_db = 0U;
 8010218:	2300      	movs	r3, #0
 801021a:	6313      	str	r3, [r2, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 801021c:	703b      	strb	r3, [r7, #0]
          len = ep->xfer_len_db;
 801021e:	0033      	movs	r3, r6
 8010220:	e7d9      	b.n	80101d6 <HAL_PCD_IRQHandler+0x6c6>
 8010222:	46c0      	nop			@ (mov r8, r8)
 8010224:	40009800 	.word	0x40009800
 8010228:	07ff8fbf 	.word	0x07ff8fbf
 801022c:	00008080 	.word	0x00008080
 8010230:	07ff8f8f 	.word	0x07ff8f8f
 8010234:	0000c080 	.word	0x0000c080
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010238:	2b3e      	cmp	r3, #62	@ 0x3e
 801023a:	d806      	bhi.n	801024a <HAL_PCD_IRQHandler+0x73a>
 801023c:	2001      	movs	r0, #1
 801023e:	085a      	lsrs	r2, r3, #1
 8010240:	4018      	ands	r0, r3
 8010242:	1812      	adds	r2, r2, r0
 8010244:	0692      	lsls	r2, r2, #26
 8010246:	6868      	ldr	r0, [r5, #4]
 8010248:	e7d8      	b.n	80101fc <HAL_PCD_IRQHandler+0x6ec>
 801024a:	201f      	movs	r0, #31
 801024c:	4018      	ands	r0, r3
 801024e:	4246      	negs	r6, r0
 8010250:	4170      	adcs	r0, r6
 8010252:	095a      	lsrs	r2, r3, #5
 8010254:	1a12      	subs	r2, r2, r0
 8010256:	6868      	ldr	r0, [r5, #4]
 8010258:	0692      	lsls	r2, r2, #26
 801025a:	4302      	orrs	r2, r0
 801025c:	2080      	movs	r0, #128	@ 0x80
 801025e:	0600      	lsls	r0, r0, #24
 8010260:	e7cc      	b.n	80101fc <HAL_PCD_IRQHandler+0x6ec>
 8010262:	2a01      	cmp	r2, #1
 8010264:	d1cc      	bne.n	8010200 <HAL_PCD_IRQHandler+0x6f0>
 8010266:	4a47      	ldr	r2, [pc, #284]	@ (8010384 <HAL_PCD_IRQHandler+0x874>)
 8010268:	00ed      	lsls	r5, r5, #3
 801026a:	18ad      	adds	r5, r5, r2
 801026c:	686a      	ldr	r2, [r5, #4]
 801026e:	b292      	uxth	r2, r2
 8010270:	606a      	str	r2, [r5, #4]
 8010272:	6868      	ldr	r0, [r5, #4]
 8010274:	041a      	lsls	r2, r3, #16
 8010276:	e7c1      	b.n	80101fc <HAL_PCD_IRQHandler+0x6ec>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8010278:	0543      	lsls	r3, r0, #21
 801027a:	d50c      	bpl.n	8010296 <HAL_PCD_IRQHandler+0x786>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801027c:	6822      	ldr	r2, [r4, #0]
 801027e:	4942      	ldr	r1, [pc, #264]	@ (8010388 <HAL_PCD_IRQHandler+0x878>)
 8010280:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8010282:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8010284:	400b      	ands	r3, r1
 8010286:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8010288:	f008 f888 	bl	801839c <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801028c:	0029      	movs	r1, r5
 801028e:	0020      	movs	r0, r4
 8010290:	f7ff fc2c 	bl	800faec <HAL_PCD_SetAddress>
    return;
 8010294:	e450      	b.n	800fb38 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8010296:	0443      	lsls	r3, r0, #17
 8010298:	d505      	bpl.n	80102a6 <HAL_PCD_IRQHandler+0x796>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801029a:	6822      	ldr	r2, [r4, #0]
 801029c:	493b      	ldr	r1, [pc, #236]	@ (801038c <HAL_PCD_IRQHandler+0x87c>)
 801029e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80102a0:	400b      	ands	r3, r1
 80102a2:	6453      	str	r3, [r2, #68]	@ 0x44
    return;
 80102a4:	e448      	b.n	800fb38 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80102a6:	2380      	movs	r3, #128	@ 0x80
 80102a8:	0001      	movs	r1, r0
 80102aa:	019b      	lsls	r3, r3, #6
 80102ac:	4019      	ands	r1, r3
 80102ae:	4218      	tst	r0, r3
 80102b0:	d003      	beq.n	80102ba <HAL_PCD_IRQHandler+0x7aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80102b2:	6822      	ldr	r2, [r4, #0]
 80102b4:	4936      	ldr	r1, [pc, #216]	@ (8010390 <HAL_PCD_IRQHandler+0x880>)
 80102b6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80102b8:	e7f2      	b.n	80102a0 <HAL_PCD_IRQHandler+0x790>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80102ba:	04c3      	lsls	r3, r0, #19
 80102bc:	d518      	bpl.n	80102f0 <HAL_PCD_IRQHandler+0x7e0>
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80102be:	2004      	movs	r0, #4
 80102c0:	6823      	ldr	r3, [r4, #0]
 80102c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80102c4:	4382      	bics	r2, r0
 80102c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80102c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80102ca:	1800      	adds	r0, r0, r0
 80102cc:	4382      	bics	r2, r0
 80102ce:	641a      	str	r2, [r3, #64]	@ 0x40
    if (hpcd->LPM_State == LPM_L1)
 80102d0:	23b2      	movs	r3, #178	@ 0xb2
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	5ce2      	ldrb	r2, [r4, r3]
 80102d6:	2a01      	cmp	r2, #1
 80102d8:	d103      	bne.n	80102e2 <HAL_PCD_IRQHandler+0x7d2>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80102da:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80102dc:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80102de:	f000 f9a5 	bl	801062c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80102e2:	0020      	movs	r0, r4
 80102e4:	f008 f87a 	bl	80183dc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80102e8:	6822      	ldr	r2, [r4, #0]
 80102ea:	492a      	ldr	r1, [pc, #168]	@ (8010394 <HAL_PCD_IRQHandler+0x884>)
 80102ec:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80102ee:	e7d7      	b.n	80102a0 <HAL_PCD_IRQHandler+0x790>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80102f0:	0503      	lsls	r3, r0, #20
 80102f2:	d511      	bpl.n	8010318 <HAL_PCD_IRQHandler+0x808>
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80102f4:	2208      	movs	r2, #8
 80102f6:	6823      	ldr	r3, [r4, #0]
 80102f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80102fa:	430a      	orrs	r2, r1
 80102fc:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80102fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010300:	4925      	ldr	r1, [pc, #148]	@ (8010398 <HAL_PCD_IRQHandler+0x888>)
 8010302:	400a      	ands	r2, r1
 8010304:	645a      	str	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8010306:	2204      	movs	r2, #4
 8010308:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801030a:	430a      	orrs	r2, r1
 801030c:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_PCD_SuspendCallback(hpcd);
 801030e:	0020      	movs	r0, r4
 8010310:	f008 f858 	bl	80183c4 <HAL_PCD_SuspendCallback>
 8010314:	f7ff fc10 	bl	800fb38 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8010318:	0603      	lsls	r3, r0, #24
 801031a:	d51f      	bpl.n	801035c <HAL_PCD_IRQHandler+0x84c>
    if (hpcd->LPM_State == LPM_L0)
 801031c:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	491e      	ldr	r1, [pc, #120]	@ (801039c <HAL_PCD_IRQHandler+0x88c>)
 8010322:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8010324:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8010326:	400a      	ands	r2, r1
 8010328:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 801032a:	5c22      	ldrb	r2, [r4, r0]
 801032c:	2a00      	cmp	r2, #0
 801032e:	d1ee      	bne.n	801030e <HAL_PCD_IRQHandler+0x7fe>
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8010330:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8010332:	3204      	adds	r2, #4
 8010334:	430a      	orrs	r2, r1
 8010336:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8010338:	2208      	movs	r2, #8
 801033a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801033c:	430a      	orrs	r2, r1
      hpcd->LPM_State = LPM_L1;
 801033e:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8010340:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8010342:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 8010344:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8010346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8010348:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801034a:	089b      	lsrs	r3, r3, #2
 801034c:	4013      	ands	r3, r2
 801034e:	22b3      	movs	r2, #179	@ 0xb3
 8010350:	0092      	lsls	r2, r2, #2
 8010352:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8010354:	f000 f96a 	bl	801062c <HAL_PCDEx_LPM_Callback>
 8010358:	f7ff fbee 	bl	800fb38 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801035c:	0583      	lsls	r3, r0, #22
 801035e:	d509      	bpl.n	8010374 <HAL_PCD_IRQHandler+0x864>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8010360:	6822      	ldr	r2, [r4, #0]
 8010362:	490f      	ldr	r1, [pc, #60]	@ (80103a0 <HAL_PCD_IRQHandler+0x890>)
 8010364:	6c53      	ldr	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8010366:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8010368:	400b      	ands	r3, r1
 801036a:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 801036c:	f008 f842 	bl	80183f4 <HAL_PCD_SOFCallback>
    return;
 8010370:	f7ff fbe2 	bl	800fb38 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8010374:	05c0      	lsls	r0, r0, #23
 8010376:	d401      	bmi.n	801037c <HAL_PCD_IRQHandler+0x86c>
 8010378:	f7ff fbde 	bl	800fb38 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 801037c:	6822      	ldr	r2, [r4, #0]
 801037e:	4909      	ldr	r1, [pc, #36]	@ (80103a4 <HAL_PCD_IRQHandler+0x894>)
 8010380:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8010382:	e78d      	b.n	80102a0 <HAL_PCD_IRQHandler+0x790>
 8010384:	40009800 	.word	0x40009800
 8010388:	0000fbff 	.word	0x0000fbff
 801038c:	0000bfff 	.word	0x0000bfff
 8010390:	0000dfff 	.word	0x0000dfff
 8010394:	0000efff 	.word	0x0000efff
 8010398:	0000f7ff 	.word	0x0000f7ff
 801039c:	0000ff7f 	.word	0x0000ff7f
 80103a0:	0000fdff 	.word	0x0000fdff
 80103a4:	0000feff 	.word	0x0000feff

080103a8 <HAL_PCD_EP_Open>:
{
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	0004      	movs	r4, r0
 80103ac:	2007      	movs	r0, #7
 80103ae:	000d      	movs	r5, r1
 80103b0:	4008      	ands	r0, r1
 80103b2:	2128      	movs	r1, #40	@ 0x28
 80103b4:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80103b6:	b26d      	sxtb	r5, r5
 80103b8:	1866      	adds	r6, r4, r1
 80103ba:	2d00      	cmp	r5, #0
 80103bc:	da1a      	bge.n	80103f4 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 80103be:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80103c0:	3110      	adds	r1, #16
 80103c2:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80103c4:	7475      	strb	r5, [r6, #17]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80103c6:	0552      	lsls	r2, r2, #21
 80103c8:	0d52      	lsrs	r2, r2, #21
  ep->num = ep_addr & EP_ADDR_MSK;
 80103ca:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80103cc:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80103ce:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d101      	bne.n	80103d8 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 80103d4:	2300      	movs	r3, #0
 80103d6:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80103d8:	25a4      	movs	r5, #164	@ 0xa4
 80103da:	00ad      	lsls	r5, r5, #2
 80103dc:	5d63      	ldrb	r3, [r4, r5]
 80103de:	2002      	movs	r0, #2
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d006      	beq.n	80103f2 <HAL_PCD_EP_Open+0x4a>
 80103e4:	2301      	movs	r3, #1
 80103e6:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80103e8:	6820      	ldr	r0, [r4, #0]
 80103ea:	f002 fed7 	bl	801319c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80103ee:	2000      	movs	r0, #0
 80103f0:	5560      	strb	r0, [r4, r5]
}
 80103f2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80103f4:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80103f6:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80103f8:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80103fa:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80103fc:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80103fe:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8010400:	7035      	strb	r5, [r6, #0]
 8010402:	e7e0      	b.n	80103c6 <HAL_PCD_EP_Open+0x1e>

08010404 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8010404:	2207      	movs	r2, #7
{
 8010406:	000b      	movs	r3, r1
 8010408:	400a      	ands	r2, r1
 801040a:	2128      	movs	r1, #40	@ 0x28
 801040c:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 801040e:	b25b      	sxtb	r3, r3
{
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	0004      	movs	r4, r0
 8010414:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8010416:	2b00      	cmp	r3, #0
 8010418:	da12      	bge.n	8010440 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 801041a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801041c:	3110      	adds	r1, #16
 801041e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8010420:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 8010422:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8010424:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8010426:	00ad      	lsls	r5, r5, #2
 8010428:	5d63      	ldrb	r3, [r4, r5]
 801042a:	2002      	movs	r0, #2
 801042c:	2b01      	cmp	r3, #1
 801042e:	d006      	beq.n	801043e <HAL_PCD_EP_Close+0x3a>
 8010430:	2301      	movs	r3, #1
 8010432:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010434:	6820      	ldr	r0, [r4, #0]
 8010436:	f002 fff9 	bl	801342c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801043a:	2000      	movs	r0, #0
 801043c:	5560      	strb	r0, [r4, r5]
}
 801043e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8010440:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010442:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010444:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010446:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010448:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801044a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 801044c:	7003      	strb	r3, [r0, #0]
 801044e:	e7e8      	b.n	8010422 <HAL_PCD_EP_Close+0x1e>

08010450 <HAL_PCD_EP_Receive>:
{
 8010450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010452:	2407      	movs	r4, #7
}
 8010454:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8010456:	3421      	adds	r4, #33	@ 0x21
 8010458:	434c      	muls	r4, r1
 801045a:	1906      	adds	r6, r0, r4
 801045c:	0037      	movs	r7, r6
 801045e:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8010460:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8010462:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8010464:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8010466:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8010468:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801046a:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 801046c:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 801046e:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010470:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8010472:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8010474:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8010476:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010478:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801047a:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801047c:	6800      	ldr	r0, [r0, #0]
 801047e:	f003 f915 	bl	80136ac <USB_EPStartXfer>
}
 8010482:	0028      	movs	r0, r5
 8010484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010486 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8010486:	2307      	movs	r3, #7
 8010488:	400b      	ands	r3, r1
 801048a:	2128      	movs	r1, #40	@ 0x28
 801048c:	4359      	muls	r1, r3
 801048e:	1840      	adds	r0, r0, r1
 8010490:	30fc      	adds	r0, #252	@ 0xfc
 8010492:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8010494:	4770      	bx	lr

08010496 <HAL_PCD_EP_Transmit>:
{
 8010496:	b570      	push	{r4, r5, r6, lr}
 8010498:	2407      	movs	r4, #7
}
 801049a:	4021      	ands	r1, r4
 801049c:	3421      	adds	r4, #33	@ 0x21
 801049e:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 80104a0:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 80104a2:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 80104a4:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80104a6:	2201      	movs	r2, #1
 80104a8:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 80104aa:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 80104ac:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 80104ae:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80104b0:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 80104b2:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 80104b4:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 80104b6:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 80104b8:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80104ba:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80104bc:	6800      	ldr	r0, [r0, #0]
 80104be:	f003 f8f5 	bl	80136ac <USB_EPStartXfer>
}
 80104c2:	0028      	movs	r0, r5
 80104c4:	bd70      	pop	{r4, r5, r6, pc}

080104c6 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80104c6:	2207      	movs	r2, #7
{
 80104c8:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80104ca:	7903      	ldrb	r3, [r0, #4]
{
 80104cc:	0004      	movs	r4, r0
 80104ce:	400a      	ands	r2, r1
    return HAL_ERROR;
 80104d0:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d319      	bcc.n	801050a <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 80104d6:	b248      	sxtb	r0, r1
 80104d8:	2328      	movs	r3, #40	@ 0x28
 80104da:	2800      	cmp	r0, #0
 80104dc:	da16      	bge.n	801050c <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80104de:	4353      	muls	r3, r2
 80104e0:	0019      	movs	r1, r3
    ep->is_in = 1U;
 80104e2:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80104e4:	3110      	adds	r1, #16
    ep->is_in = 1U;
 80104e6:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80104e8:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80104ea:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 80104ec:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80104ee:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 80104f0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80104f2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80104f4:	00ad      	lsls	r5, r5, #2
 80104f6:	5d62      	ldrb	r2, [r4, r5]
 80104f8:	2002      	movs	r0, #2
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d005      	beq.n	801050a <HAL_PCD_EP_SetStall+0x44>
 80104fe:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010500:	6820      	ldr	r0, [r4, #0]
 8010502:	f003 f803 	bl	801350c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8010506:	2000      	movs	r0, #0
 8010508:	5560      	strb	r0, [r4, r5]
}
 801050a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 801050c:	434b      	muls	r3, r1
 801050e:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8010510:	2000      	movs	r0, #0
 8010512:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8010514:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010516:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8010518:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 801051a:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 801051c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 801051e:	7018      	strb	r0, [r3, #0]
 8010520:	e7e4      	b.n	80104ec <HAL_PCD_EP_SetStall+0x26>

08010522 <HAL_PCD_EP_ClrStall>:
{
 8010522:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010524:	220f      	movs	r2, #15
{
 8010526:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010528:	7901      	ldrb	r1, [r0, #4]
{
 801052a:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801052c:	401a      	ands	r2, r3
    return HAL_ERROR;
 801052e:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010530:	4291      	cmp	r1, r2
 8010532:	d31b      	bcc.n	801056c <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8010534:	2207      	movs	r2, #7
 8010536:	2128      	movs	r1, #40	@ 0x28
 8010538:	401a      	ands	r2, r3
 801053a:	4351      	muls	r1, r2
 801053c:	b25b      	sxtb	r3, r3
 801053e:	1860      	adds	r0, r4, r1
 8010540:	2b00      	cmp	r3, #0
 8010542:	da14      	bge.n	801056e <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8010544:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010546:	3110      	adds	r1, #16
 8010548:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 801054a:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 801054c:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 801054e:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8010550:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010552:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8010554:	00b6      	lsls	r6, r6, #2
 8010556:	5da3      	ldrb	r3, [r4, r6]
 8010558:	2002      	movs	r0, #2
 801055a:	2b01      	cmp	r3, #1
 801055c:	d006      	beq.n	801056c <HAL_PCD_EP_ClrStall+0x4a>
 801055e:	2301      	movs	r3, #1
 8010560:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010562:	6820      	ldr	r0, [r4, #0]
 8010564:	f002 fff2 	bl	801354c <USB_EPClearStall>
  return HAL_OK;
 8010568:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 801056a:	55a5      	strb	r5, [r4, r6]
}
 801056c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 801056e:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010570:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8010572:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010574:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8010576:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010578:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 801057a:	7003      	strb	r3, [r0, #0]
 801057c:	e7e6      	b.n	801054c <HAL_PCD_EP_ClrStall+0x2a>

0801057e <HAL_PCD_EP_Abort>:
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801057e:	2207      	movs	r2, #7
{
 8010580:	000b      	movs	r3, r1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010582:	400a      	ands	r2, r1
 8010584:	2128      	movs	r1, #40	@ 0x28
  if ((0x80U & ep_addr) == 0x80U)
 8010586:	b25b      	sxtb	r3, r3
{
 8010588:	b510      	push	{r4, lr}
 801058a:	4351      	muls	r1, r2
  if ((0x80U & ep_addr) == 0x80U)
 801058c:	2b00      	cmp	r3, #0
 801058e:	da05      	bge.n	801059c <HAL_PCD_EP_Abort+0x1e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010590:	3110      	adds	r1, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010592:	1841      	adds	r1, r0, r1
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8010594:	6800      	ldr	r0, [r0, #0]
 8010596:	f003 f80f 	bl	80135b8 <USB_EPStopXfer>
}
 801059a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801059c:	3151      	adds	r1, #81	@ 0x51
 801059e:	31ff      	adds	r1, #255	@ 0xff
 80105a0:	e7f7      	b.n	8010592 <HAL_PCD_EP_Abort+0x14>

080105a2 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 80105a2:	23a4      	movs	r3, #164	@ 0xa4
{
 80105a4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	5cc2      	ldrb	r2, [r0, r3]
{
 80105aa:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80105ac:	2002      	movs	r0, #2
 80105ae:	2a01      	cmp	r2, #1
 80105b0:	d00d      	beq.n	80105ce <HAL_PCD_EP_Flush+0x2c>
 80105b2:	2201      	movs	r2, #1
 80105b4:	54e2      	strb	r2, [r4, r3]
  if ((ep_addr & 0x80U) == 0x80U)
 80105b6:	b24b      	sxtb	r3, r1
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80105b8:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	da08      	bge.n	80105d0 <HAL_PCD_EP_Flush+0x2e>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80105be:	2307      	movs	r3, #7
 80105c0:	4019      	ands	r1, r3
 80105c2:	f002 fde6 	bl	8013192 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 80105c6:	23a4      	movs	r3, #164	@ 0xa4
 80105c8:	2000      	movs	r0, #0
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	54e0      	strb	r0, [r4, r3]
}
 80105ce:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 80105d0:	f002 fde1 	bl	8013196 <USB_FlushRxFifo>
 80105d4:	e7f7      	b.n	80105c6 <HAL_PCD_EP_Flush+0x24>

080105d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80105d6:	b530      	push	{r4, r5, lr}
 80105d8:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80105da:	060d      	lsls	r5, r1, #24
 80105dc:	d50b      	bpl.n	80105f6 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80105de:	2507      	movs	r5, #7
 80105e0:	4029      	ands	r1, r5
 80105e2:	434c      	muls	r4, r1
 80105e4:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80105e6:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80105e8:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80105ea:	2a00      	cmp	r2, #0
 80105ec:	d107      	bne.n	80105fe <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 80105ee:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80105f0:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80105f2:	2000      	movs	r0, #0
 80105f4:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80105f6:	434c      	muls	r4, r1
 80105f8:	3451      	adds	r4, #81	@ 0x51
 80105fa:	34ff      	adds	r4, #255	@ 0xff
 80105fc:	e7f3      	b.n	80105e6 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 80105fe:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8010600:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8010602:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8010604:	e7f5      	b.n	80105f2 <HAL_PCDEx_PMAConfig+0x1c>

08010606 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8010606:	6802      	ldr	r2, [r0, #0]
{
 8010608:	0003      	movs	r3, r0
  hpcd->lpm_active = 1U;
 801060a:	20b4      	movs	r0, #180	@ 0xb4
 801060c:	2101      	movs	r1, #1
{
 801060e:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8010610:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8010612:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8010614:	5019      	str	r1, [r3, r0]
  hpcd->LPM_State = LPM_L0;
 8010616:	2000      	movs	r0, #0
 8010618:	00a4      	lsls	r4, r4, #2
 801061a:	5518      	strb	r0, [r3, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801061c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 801061e:	4319      	orrs	r1, r3
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010620:	2302      	movs	r3, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010622:	6551      	str	r1, [r2, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010624:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8010626:	430b      	orrs	r3, r1
 8010628:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 801062a:	bd10      	pop	{r4, pc}

0801062c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801062c:	4770      	bx	lr
	...

08010630 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010630:	2380      	movs	r3, #128	@ 0x80
 8010632:	4a03      	ldr	r2, [pc, #12]	@ (8010640 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010634:	005b      	lsls	r3, r3, #1
 8010636:	6811      	ldr	r1, [r2, #0]
 8010638:	430b      	orrs	r3, r1
 801063a:	6013      	str	r3, [r2, #0]
}
 801063c:	4770      	bx	lr
 801063e:	46c0      	nop			@ (mov r8, r8)
 8010640:	40007000 	.word	0x40007000

08010644 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_EWUP_Msk & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8010644:	235f      	movs	r3, #95	@ 0x5f
 8010646:	4905      	ldr	r1, [pc, #20]	@ (801065c <HAL_PWR_EnableWakeUpPin+0x18>)
 8010648:	4003      	ands	r3, r0
 801064a:	68ca      	ldr	r2, [r1, #12]
 801064c:	09c0      	lsrs	r0, r0, #7
 801064e:	439a      	bics	r2, r3
 8010650:	4302      	orrs	r2, r0
 8010652:	60ca      	str	r2, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_EWUP_Msk & WakeUpPinPolarity));
 8010654:	688a      	ldr	r2, [r1, #8]
 8010656:	4313      	orrs	r3, r2
 8010658:	608b      	str	r3, [r1, #8]
}
 801065a:	4770      	bx	lr
 801065c:	40007000 	.word	0x40007000

08010660 <HAL_PWR_EnterSHUTDOWNMode>:
  */
void HAL_PWR_EnterSHUTDOWNMode(void)
{

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_2);
 8010660:	2207      	movs	r2, #7
 8010662:	4906      	ldr	r1, [pc, #24]	@ (801067c <HAL_PWR_EnterSHUTDOWNMode+0x1c>)
 8010664:	680b      	ldr	r3, [r1, #0]
 8010666:	4393      	bics	r3, r2
 8010668:	3a03      	subs	r2, #3
 801066a:	4313      	orrs	r3, r2
 801066c:	600b      	str	r3, [r1, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801066e:	4b04      	ldr	r3, [pc, #16]	@ (8010680 <HAL_PWR_EnterSHUTDOWNMode+0x20>)
 8010670:	6919      	ldr	r1, [r3, #16]
 8010672:	430a      	orrs	r2, r1
 8010674:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */
  /* Request Wait For Interrupt */
  __WFI();
 8010676:	bf30      	wfi
}
 8010678:	4770      	bx	lr
 801067a:	46c0      	nop			@ (mov r8, r8)
 801067c:	40007000 	.word	0x40007000
 8010680:	e000ed00 	.word	0xe000ed00

08010684 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010684:	2380      	movs	r3, #128	@ 0x80
 8010686:	21c0      	movs	r1, #192	@ 0xc0
{
 8010688:	b510      	push	{r4, lr}
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	4c18      	ldr	r4, [pc, #96]	@ (80106f0 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 801068e:	00c9      	lsls	r1, r1, #3
 8010690:	4298      	cmp	r0, r3
 8010692:	d11e      	bne.n	80106d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	400b      	ands	r3, r1
 8010698:	4283      	cmp	r3, r0
 801069a:	d020      	beq.n	80106de <HAL_PWREx_ControlVoltageScaling+0x5a>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	4a15      	ldr	r2, [pc, #84]	@ (80106f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80106a0:	4915      	ldr	r1, [pc, #84]	@ (80106f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80106a2:	4013      	ands	r3, r2
 80106a4:	4318      	orrs	r0, r3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80106a6:	4b15      	ldr	r3, [pc, #84]	@ (80106fc <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80106a8:	6020      	str	r0, [r4, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80106aa:	6818      	ldr	r0, [r3, #0]
 80106ac:	2332      	movs	r3, #50	@ 0x32
 80106ae:	4358      	muls	r0, r3
 80106b0:	f7ef fd5a 	bl	8000168 <__udivsi3>
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80106b4:	2380      	movs	r3, #128	@ 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80106b6:	3001      	adds	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	6962      	ldr	r2, [r4, #20]
 80106bc:	421a      	tst	r2, r3
 80106be:	d001      	beq.n	80106c4 <HAL_PWREx_ControlVoltageScaling+0x40>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d104      	bne.n	80106ce <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80106c4:	6962      	ldr	r2, [r4, #20]
      {
        return HAL_TIMEOUT;
 80106c6:	2003      	movs	r0, #3
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80106c8:	421a      	tst	r2, r3
 80106ca:	d008      	beq.n	80106de <HAL_PWREx_ControlVoltageScaling+0x5a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
}
 80106cc:	bd10      	pop	{r4, pc}
        wait_loop_index--;
 80106ce:	3801      	subs	r0, #1
 80106d0:	e7f3      	b.n	80106ba <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80106d2:	2380      	movs	r3, #128	@ 0x80
 80106d4:	6822      	ldr	r2, [r4, #0]
 80106d6:	00db      	lsls	r3, r3, #3
 80106d8:	400a      	ands	r2, r1
 80106da:	429a      	cmp	r2, r3
 80106dc:	d101      	bne.n	80106e2 <HAL_PWREx_ControlVoltageScaling+0x5e>
  return HAL_OK;
 80106de:	2000      	movs	r0, #0
 80106e0:	e7f4      	b.n	80106cc <HAL_PWREx_ControlVoltageScaling+0x48>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80106e2:	6822      	ldr	r2, [r4, #0]
 80106e4:	4903      	ldr	r1, [pc, #12]	@ (80106f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80106e6:	400a      	ands	r2, r1
 80106e8:	4313      	orrs	r3, r2
 80106ea:	6023      	str	r3, [r4, #0]
 80106ec:	e7f7      	b.n	80106de <HAL_PWREx_ControlVoltageScaling+0x5a>
 80106ee:	46c0      	nop			@ (mov r8, r8)
 80106f0:	40007000 	.word	0x40007000
 80106f4:	fffff9ff 	.word	0xfffff9ff
 80106f8:	000f4240 	.word	0x000f4240
 80106fc:	20000050 	.word	0x20000050

08010700 <HAL_PWREx_GetVoltageRange>:
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8010700:	4b02      	ldr	r3, [pc, #8]	@ (801070c <HAL_PWREx_GetVoltageRange+0xc>)
 8010702:	6818      	ldr	r0, [r3, #0]
 8010704:	23c0      	movs	r3, #192	@ 0xc0
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	4018      	ands	r0, r3
}
 801070a:	4770      	bx	lr
 801070c:	40007000 	.word	0x40007000

08010710 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010710:	2380      	movs	r3, #128	@ 0x80
 8010712:	4a03      	ldr	r2, [pc, #12]	@ (8010720 <HAL_PWREx_EnableVddUSB+0x10>)
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	6851      	ldr	r1, [r2, #4]
 8010718:	430b      	orrs	r3, r1
 801071a:	6053      	str	r3, [r2, #4]
}
 801071c:	4770      	bx	lr
 801071e:	46c0      	nop			@ (mov r8, r8)
 8010720:	40007000 	.word	0x40007000

08010724 <HAL_PWREx_EnableUltraLowPowerMode>:
  * @note  All the other modes are not affected by this bit.
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPowerMode(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_ENULP);
 8010724:	2380      	movs	r3, #128	@ 0x80
 8010726:	4a03      	ldr	r2, [pc, #12]	@ (8010734 <HAL_PWREx_EnableUltraLowPowerMode+0x10>)
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	6891      	ldr	r1, [r2, #8]
 801072c:	430b      	orrs	r3, r1
 801072e:	6093      	str	r3, [r2, #8]
}
 8010730:	4770      	bx	lr
 8010732:	46c0      	nop			@ (mov r8, r8)
 8010734:	40007000 	.word	0x40007000

08010738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010738:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 801073a:	2280      	movs	r2, #128	@ 0x80
 801073c:	4d1b      	ldr	r5, [pc, #108]	@ (80107ac <RCC_SetFlashLatencyFromMSIRange+0x74>)
 801073e:	0552      	lsls	r2, r2, #21
 8010740:	6dab      	ldr	r3, [r5, #88]	@ 0x58
{
 8010742:	0004      	movs	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010744:	4213      	tst	r3, r2
 8010746:	d01c      	beq.n	8010782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010748:	f7ff ffda 	bl	8010700 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801074c:	2380      	movs	r3, #128	@ 0x80
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	4298      	cmp	r0, r3
 8010752:	d124      	bne.n	801079e <RCC_SetFlashLatencyFromMSIRange+0x66>
      latency = FLASH_LATENCY_1; /* 1WS */
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8010754:	2300      	movs	r3, #0
    if (msirange > RCC_MSIRANGE_8)
 8010756:	2c80      	cmp	r4, #128	@ 0x80
 8010758:	d906      	bls.n	8010768 <RCC_SetFlashLatencyFromMSIRange+0x30>
        latency = FLASH_LATENCY_2; /* 2WS */
 801075a:	3302      	adds	r3, #2
      if (msirange > RCC_MSIRANGE_11)
 801075c:	2cb0      	cmp	r4, #176	@ 0xb0
 801075e:	d803      	bhi.n	8010768 <RCC_SetFlashLatencyFromMSIRange+0x30>
      else if (msirange > RCC_MSIRANGE_9)
 8010760:	338e      	adds	r3, #142	@ 0x8e
 8010762:	42a3      	cmp	r3, r4
 8010764:	419b      	sbcs	r3, r3
 8010766:	425b      	negs	r3, r3
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010768:	2407      	movs	r4, #7
 801076a:	4911      	ldr	r1, [pc, #68]	@ (80107b0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 801076c:	680a      	ldr	r2, [r1, #0]
 801076e:	43a2      	bics	r2, r4
 8010770:	431a      	orrs	r2, r3
 8010772:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8010774:	6808      	ldr	r0, [r1, #0]
 8010776:	4020      	ands	r0, r4
 8010778:	1ac0      	subs	r0, r0, r3
 801077a:	1e43      	subs	r3, r0, #1
 801077c:	4198      	sbcs	r0, r3
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 801077e:	b2c0      	uxtb	r0, r0
 8010780:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8010782:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010784:	4313      	orrs	r3, r2
 8010786:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010788:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801078a:	4013      	ands	r3, r2
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8010790:	f7ff ffb6 	bl	8010700 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8010794:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8010796:	4a07      	ldr	r2, [pc, #28]	@ (80107b4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8010798:	4013      	ands	r3, r2
 801079a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801079c:	e7d6      	b.n	801074c <RCC_SetFlashLatencyFromMSIRange+0x14>
        latency = FLASH_LATENCY_2; /* 2WS */
 801079e:	2302      	movs	r3, #2
    if (msirange >= RCC_MSIRANGE_8)
 80107a0:	2c7f      	cmp	r4, #127	@ 0x7f
 80107a2:	d8e1      	bhi.n	8010768 <RCC_SetFlashLatencyFromMSIRange+0x30>
    else if (msirange == RCC_MSIRANGE_7)
 80107a4:	3c70      	subs	r4, #112	@ 0x70
 80107a6:	4263      	negs	r3, r4
 80107a8:	4163      	adcs	r3, r4
 80107aa:	e7dd      	b.n	8010768 <RCC_SetFlashLatencyFromMSIRange+0x30>
 80107ac:	40021000 	.word	0x40021000
 80107b0:	40022000 	.word	0x40022000
 80107b4:	efffffff 	.word	0xefffffff

080107b8 <HAL_RCC_GetSysClockFreq>:
{
 80107b8:	b510      	push	{r4, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80107ba:	4c29      	ldr	r4, [pc, #164]	@ (8010860 <HAL_RCC_GetSysClockFreq+0xa8>)
 80107bc:	2138      	movs	r1, #56	@ 0x38
 80107be:	68a0      	ldr	r0, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80107c0:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80107c2:	0003      	movs	r3, r0
 80107c4:	400b      	ands	r3, r1
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80107c6:	4208      	tst	r0, r1
 80107c8:	d006      	beq.n	80107d8 <HAL_RCC_GetSysClockFreq+0x20>
 80107ca:	2b18      	cmp	r3, #24
 80107cc:	d12e      	bne.n	801082c <HAL_RCC_GetSysClockFreq+0x74>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80107ce:	3935      	subs	r1, #53	@ 0x35
 80107d0:	2000      	movs	r0, #0
 80107d2:	400a      	ands	r2, r1
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80107d4:	2a01      	cmp	r2, #1
 80107d6:	d10f      	bne.n	80107f8 <HAL_RCC_GetSysClockFreq+0x40>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80107d8:	6821      	ldr	r1, [r4, #0]
 80107da:	220f      	movs	r2, #15
 80107dc:	0709      	lsls	r1, r1, #28
 80107de:	d422      	bmi.n	8010826 <HAL_RCC_GetSysClockFreq+0x6e>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80107e0:	4920      	ldr	r1, [pc, #128]	@ (8010864 <HAL_RCC_GetSysClockFreq+0xac>)
 80107e2:	6809      	ldr	r1, [r1, #0]
 80107e4:	0a09      	lsrs	r1, r1, #8
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80107e6:	400a      	ands	r2, r1
    if (msirange > 11U)
 80107e8:	2a0b      	cmp	r2, #11
 80107ea:	d900      	bls.n	80107ee <HAL_RCC_GetSysClockFreq+0x36>
      msirange = 0U;
 80107ec:	2200      	movs	r2, #0
    msirange = MSIRangeTable[msirange];
 80107ee:	491e      	ldr	r1, [pc, #120]	@ (8010868 <HAL_RCC_GetSysClockFreq+0xb0>)
 80107f0:	0092      	lsls	r2, r2, #2
 80107f2:	5850      	ldr	r0, [r2, r1]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d024      	beq.n	8010842 <HAL_RCC_GetSysClockFreq+0x8a>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80107f8:	2203      	movs	r2, #3
 80107fa:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80107fc:	68e1      	ldr	r1, [r4, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80107fe:	4013      	ands	r3, r2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010800:	0649      	lsls	r1, r1, #25
 8010802:	0f49      	lsrs	r1, r1, #29
 8010804:	3101      	adds	r1, #1
    switch (pllsource)
 8010806:	2b02      	cmp	r3, #2
 8010808:	d021      	beq.n	801084e <HAL_RCC_GetSysClockFreq+0x96>
 801080a:	4293      	cmp	r3, r2
 801080c:	d021      	beq.n	8010852 <HAL_RCC_GetSysClockFreq+0x9a>
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 801080e:	68e3      	ldr	r3, [r4, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8010810:	68e4      	ldr	r4, [r4, #12]
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8010812:	045b      	lsls	r3, r3, #17
 8010814:	0e5b      	lsrs	r3, r3, #25
 8010816:	4358      	muls	r0, r3
 8010818:	f7ef fca6 	bl	8000168 <__udivsi3>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 801081c:	0f61      	lsrs	r1, r4, #29
 801081e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8010820:	f7ef fca2 	bl	8000168 <__udivsi3>
 8010824:	e00d      	b.n	8010842 <HAL_RCC_GetSysClockFreq+0x8a>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010826:	6821      	ldr	r1, [r4, #0]
 8010828:	0909      	lsrs	r1, r1, #4
 801082a:	e7dc      	b.n	80107e6 <HAL_RCC_GetSysClockFreq+0x2e>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801082c:	2b20      	cmp	r3, #32
 801082e:	d012      	beq.n	8010856 <HAL_RCC_GetSysClockFreq+0x9e>
 8010830:	d808      	bhi.n	8010844 <HAL_RCC_GetSysClockFreq+0x8c>
 8010832:	2b08      	cmp	r3, #8
 8010834:	d012      	beq.n	801085c <HAL_RCC_GetSysClockFreq+0xa4>
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010836:	3b10      	subs	r3, #16
 8010838:	425a      	negs	r2, r3
 801083a:	4153      	adcs	r3, r2
 801083c:	480b      	ldr	r0, [pc, #44]	@ (801086c <HAL_RCC_GetSysClockFreq+0xb4>)
 801083e:	425b      	negs	r3, r3
 8010840:	4018      	ands	r0, r3
}
 8010842:	bd10      	pop	{r4, pc}
 8010844:	3b28      	subs	r3, #40	@ 0x28
 8010846:	425a      	negs	r2, r3
 8010848:	4153      	adcs	r3, r2
 801084a:	03d8      	lsls	r0, r3, #15
 801084c:	e7f9      	b.n	8010842 <HAL_RCC_GetSysClockFreq+0x8a>
        pllsourcefreq = HSI_VALUE;
 801084e:	4808      	ldr	r0, [pc, #32]	@ (8010870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8010850:	e7dd      	b.n	801080e <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 8010852:	4806      	ldr	r0, [pc, #24]	@ (801086c <HAL_RCC_GetSysClockFreq+0xb4>)
 8010854:	e7db      	b.n	801080e <HAL_RCC_GetSysClockFreq+0x56>
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010856:	20fa      	movs	r0, #250	@ 0xfa
 8010858:	01c0      	lsls	r0, r0, #7
 801085a:	e7f2      	b.n	8010842 <HAL_RCC_GetSysClockFreq+0x8a>
 801085c:	4804      	ldr	r0, [pc, #16]	@ (8010870 <HAL_RCC_GetSysClockFreq+0xb8>)
 801085e:	e7f0      	b.n	8010842 <HAL_RCC_GetSysClockFreq+0x8a>
 8010860:	40021000 	.word	0x40021000
 8010864:	40021094 	.word	0x40021094
 8010868:	0801fd9c 	.word	0x0801fd9c
 801086c:	003d0900 	.word	0x003d0900
 8010870:	00f42400 	.word	0x00f42400

08010874 <HAL_RCC_OscConfig>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010874:	2338      	movs	r3, #56	@ 0x38
{
 8010876:	b5f0      	push	{r4, r5, r6, r7, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010878:	4cb1      	ldr	r4, [pc, #708]	@ (8010b40 <HAL_RCC_OscConfig+0x2cc>)
{
 801087a:	0005      	movs	r5, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801087c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801087e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010880:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010882:	3b35      	subs	r3, #53	@ 0x35
 8010884:	401f      	ands	r7, r3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010886:	6803      	ldr	r3, [r0, #0]
{
 8010888:	b085      	sub	sp, #20
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801088a:	06db      	lsls	r3, r3, #27
 801088c:	d400      	bmi.n	8010890 <HAL_RCC_OscConfig+0x1c>
 801088e:	e078      	b.n	8010982 <HAL_RCC_OscConfig+0x10e>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010890:	2e00      	cmp	r6, #0
 8010892:	d003      	beq.n	801089c <HAL_RCC_OscConfig+0x28>
 8010894:	2e18      	cmp	r6, #24
 8010896:	d155      	bne.n	8010944 <HAL_RCC_OscConfig+0xd0>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010898:	2f01      	cmp	r7, #1
 801089a:	d153      	bne.n	8010944 <HAL_RCC_OscConfig+0xd0>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801089c:	6823      	ldr	r3, [r4, #0]
 801089e:	079b      	lsls	r3, r3, #30
 80108a0:	d502      	bpl.n	80108a8 <HAL_RCC_OscConfig+0x34>
 80108a2:	69eb      	ldr	r3, [r5, #28]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d04b      	beq.n	8010940 <HAL_RCC_OscConfig+0xcc>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80108a8:	6822      	ldr	r2, [r4, #0]
 80108aa:	23f0      	movs	r3, #240	@ 0xf0
 80108ac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80108ae:	0712      	lsls	r2, r2, #28
 80108b0:	d52c      	bpl.n	801090c <HAL_RCC_OscConfig+0x98>
 80108b2:	6822      	ldr	r2, [r4, #0]
 80108b4:	4013      	ands	r3, r2
 80108b6:	4298      	cmp	r0, r3
 80108b8:	d92c      	bls.n	8010914 <HAL_RCC_OscConfig+0xa0>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80108ba:	f7ff ff3d 	bl	8010738 <RCC_SetFlashLatencyFromMSIRange>
 80108be:	2800      	cmp	r0, #0
 80108c0:	d13e      	bne.n	8010940 <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80108c2:	2308      	movs	r3, #8
 80108c4:	6822      	ldr	r2, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80108c6:	499f      	ldr	r1, [pc, #636]	@ (8010b44 <HAL_RCC_OscConfig+0x2d0>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80108c8:	4313      	orrs	r3, r2
 80108ca:	22f0      	movs	r2, #240	@ 0xf0
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	4393      	bics	r3, r2
 80108d2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80108d4:	4313      	orrs	r3, r2
 80108d6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80108d8:	6862      	ldr	r2, [r4, #4]
 80108da:	6a2b      	ldr	r3, [r5, #32]
 80108dc:	400a      	ands	r2, r1
 80108de:	021b      	lsls	r3, r3, #8
 80108e0:	4313      	orrs	r3, r2
 80108e2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80108e4:	f7ff ff68 	bl	80107b8 <HAL_RCC_GetSysClockFreq>
 80108e8:	68a3      	ldr	r3, [r4, #8]
 80108ea:	4a97      	ldr	r2, [pc, #604]	@ (8010b48 <HAL_RCC_OscConfig+0x2d4>)
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80108ec:	051b      	lsls	r3, r3, #20
 80108ee:	0f1b      	lsrs	r3, r3, #28
 80108f0:	5cd3      	ldrb	r3, [r2, r3]
 80108f2:	221f      	movs	r2, #31
 80108f4:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80108f6:	40d8      	lsrs	r0, r3
 80108f8:	4994      	ldr	r1, [pc, #592]	@ (8010b4c <HAL_RCC_OscConfig+0x2d8>)
        status = HAL_InitTick(uwTickPrio);
 80108fa:	4b95      	ldr	r3, [pc, #596]	@ (8010b50 <HAL_RCC_OscConfig+0x2dc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80108fc:	6008      	str	r0, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 80108fe:	6818      	ldr	r0, [r3, #0]
 8010900:	f7fd fa2c 	bl	800dd5c <HAL_InitTick>
        if (status != HAL_OK)
 8010904:	2800      	cmp	r0, #0
 8010906:	d03c      	beq.n	8010982 <HAL_RCC_OscConfig+0x10e>
}
 8010908:	b005      	add	sp, #20
 801090a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801090c:	4a91      	ldr	r2, [pc, #580]	@ (8010b54 <HAL_RCC_OscConfig+0x2e0>)
 801090e:	6812      	ldr	r2, [r2, #0]
 8010910:	0912      	lsrs	r2, r2, #4
 8010912:	e7cf      	b.n	80108b4 <HAL_RCC_OscConfig+0x40>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010914:	2308      	movs	r3, #8
 8010916:	6822      	ldr	r2, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010918:	498a      	ldr	r1, [pc, #552]	@ (8010b44 <HAL_RCC_OscConfig+0x2d0>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801091a:	4313      	orrs	r3, r2
 801091c:	22f0      	movs	r2, #240	@ 0xf0
 801091e:	6023      	str	r3, [r4, #0]
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	4393      	bics	r3, r2
 8010924:	4303      	orrs	r3, r0
 8010926:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010928:	6862      	ldr	r2, [r4, #4]
 801092a:	6a2b      	ldr	r3, [r5, #32]
 801092c:	400a      	ands	r2, r1
 801092e:	021b      	lsls	r3, r3, #8
 8010930:	4313      	orrs	r3, r2
 8010932:	6063      	str	r3, [r4, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8010934:	2e00      	cmp	r6, #0
 8010936:	d1d5      	bne.n	80108e4 <HAL_RCC_OscConfig+0x70>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010938:	f7ff fefe 	bl	8010738 <RCC_SetFlashLatencyFromMSIRange>
 801093c:	2800      	cmp	r0, #0
 801093e:	d0d1      	beq.n	80108e4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8010940:	2001      	movs	r0, #1
 8010942:	e7e1      	b.n	8010908 <HAL_RCC_OscConfig+0x94>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010944:	69ea      	ldr	r2, [r5, #28]
 8010946:	2301      	movs	r3, #1
 8010948:	2a00      	cmp	r2, #0
 801094a:	d03a      	beq.n	80109c2 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_MSI_ENABLE();
 801094c:	6822      	ldr	r2, [r4, #0]
 801094e:	4313      	orrs	r3, r2
 8010950:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010952:	f7fd fa43 	bl	800dddc <HAL_GetTick>
 8010956:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010958:	2202      	movs	r2, #2
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	4213      	tst	r3, r2
 801095e:	d028      	beq.n	80109b2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010960:	2308      	movs	r3, #8
 8010962:	6822      	ldr	r2, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010964:	4977      	ldr	r1, [pc, #476]	@ (8010b44 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010966:	4313      	orrs	r3, r2
 8010968:	22f0      	movs	r2, #240	@ 0xf0
 801096a:	6023      	str	r3, [r4, #0]
 801096c:	6823      	ldr	r3, [r4, #0]
 801096e:	4393      	bics	r3, r2
 8010970:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010972:	4313      	orrs	r3, r2
 8010974:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010976:	6862      	ldr	r2, [r4, #4]
 8010978:	6a2b      	ldr	r3, [r5, #32]
 801097a:	400a      	ands	r2, r1
 801097c:	021b      	lsls	r3, r3, #8
 801097e:	4313      	orrs	r3, r2
 8010980:	6063      	str	r3, [r4, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010982:	682b      	ldr	r3, [r5, #0]
 8010984:	07db      	lsls	r3, r3, #31
 8010986:	d42d      	bmi.n	80109e4 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010988:	682b      	ldr	r3, [r5, #0]
 801098a:	079b      	lsls	r3, r3, #30
 801098c:	d467      	bmi.n	8010a5e <HAL_RCC_OscConfig+0x1ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801098e:	682b      	ldr	r3, [r5, #0]
 8010990:	071b      	lsls	r3, r3, #28
 8010992:	d500      	bpl.n	8010996 <HAL_RCC_OscConfig+0x122>
 8010994:	e0a1      	b.n	8010ada <HAL_RCC_OscConfig+0x266>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010996:	682b      	ldr	r3, [r5, #0]
 8010998:	075b      	lsls	r3, r3, #29
 801099a:	d500      	bpl.n	801099e <HAL_RCC_OscConfig+0x12a>
 801099c:	e0e2      	b.n	8010b64 <HAL_RCC_OscConfig+0x2f0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801099e:	682b      	ldr	r3, [r5, #0]
 80109a0:	069b      	lsls	r3, r3, #26
 80109a2:	d500      	bpl.n	80109a6 <HAL_RCC_OscConfig+0x132>
 80109a4:	e175      	b.n	8010c92 <HAL_RCC_OscConfig+0x41e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80109a6:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80109a8:	2900      	cmp	r1, #0
 80109aa:	d000      	beq.n	80109ae <HAL_RCC_OscConfig+0x13a>
 80109ac:	e198      	b.n	8010ce0 <HAL_RCC_OscConfig+0x46c>
  return HAL_OK;
 80109ae:	2000      	movs	r0, #0
 80109b0:	e7aa      	b.n	8010908 <HAL_RCC_OscConfig+0x94>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80109b2:	f7fd fa13 	bl	800dddc <HAL_GetTick>
 80109b6:	9b00      	ldr	r3, [sp, #0]
 80109b8:	1ac0      	subs	r0, r0, r3
 80109ba:	2802      	cmp	r0, #2
 80109bc:	d9cc      	bls.n	8010958 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 80109be:	2003      	movs	r0, #3
 80109c0:	e7a2      	b.n	8010908 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 80109c2:	6822      	ldr	r2, [r4, #0]
 80109c4:	439a      	bics	r2, r3
 80109c6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80109c8:	f7fd fa08 	bl	800dddc <HAL_GetTick>
 80109cc:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80109ce:	2202      	movs	r2, #2
 80109d0:	6823      	ldr	r3, [r4, #0]
 80109d2:	4213      	tst	r3, r2
 80109d4:	d0d5      	beq.n	8010982 <HAL_RCC_OscConfig+0x10e>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80109d6:	f7fd fa01 	bl	800dddc <HAL_GetTick>
 80109da:	9b00      	ldr	r3, [sp, #0]
 80109dc:	1ac0      	subs	r0, r0, r3
 80109de:	2802      	cmp	r0, #2
 80109e0:	d9f5      	bls.n	80109ce <HAL_RCC_OscConfig+0x15a>
 80109e2:	e7ec      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80109e4:	2e10      	cmp	r6, #16
 80109e6:	d003      	beq.n	80109f0 <HAL_RCC_OscConfig+0x17c>
 80109e8:	2e18      	cmp	r6, #24
 80109ea:	d108      	bne.n	80109fe <HAL_RCC_OscConfig+0x18a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80109ec:	2f03      	cmp	r7, #3
 80109ee:	d106      	bne.n	80109fe <HAL_RCC_OscConfig+0x18a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	039b      	lsls	r3, r3, #14
 80109f4:	d5c8      	bpl.n	8010988 <HAL_RCC_OscConfig+0x114>
 80109f6:	686b      	ldr	r3, [r5, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1c5      	bne.n	8010988 <HAL_RCC_OscConfig+0x114>
 80109fc:	e7a0      	b.n	8010940 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80109fe:	2280      	movs	r2, #128	@ 0x80
 8010a00:	686b      	ldr	r3, [r5, #4]
 8010a02:	0252      	lsls	r2, r2, #9
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d111      	bne.n	8010a2c <HAL_RCC_OscConfig+0x1b8>
 8010a08:	6822      	ldr	r2, [r4, #0]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010a0e:	f7fd f9e5 	bl	800dddc <HAL_GetTick>
 8010a12:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010a14:	2280      	movs	r2, #128	@ 0x80
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	0292      	lsls	r2, r2, #10
 8010a1a:	4213      	tst	r3, r2
 8010a1c:	d1b4      	bne.n	8010988 <HAL_RCC_OscConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8010a1e:	f7fd f9dd 	bl	800dddc <HAL_GetTick>
 8010a22:	9b00      	ldr	r3, [sp, #0]
 8010a24:	1ac0      	subs	r0, r0, r3
 8010a26:	2864      	cmp	r0, #100	@ 0x64
 8010a28:	d9f4      	bls.n	8010a14 <HAL_RCC_OscConfig+0x1a0>
 8010a2a:	e7c8      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010a2c:	22a0      	movs	r2, #160	@ 0xa0
 8010a2e:	02d2      	lsls	r2, r2, #11
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d0e9      	beq.n	8010a08 <HAL_RCC_OscConfig+0x194>
 8010a34:	6822      	ldr	r2, [r4, #0]
 8010a36:	4948      	ldr	r1, [pc, #288]	@ (8010b58 <HAL_RCC_OscConfig+0x2e4>)
 8010a38:	400a      	ands	r2, r1
 8010a3a:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1e6      	bne.n	8010a0e <HAL_RCC_OscConfig+0x19a>
        tickstart = HAL_GetTick();
 8010a40:	f7fd f9cc 	bl	800dddc <HAL_GetTick>
 8010a44:	9000      	str	r0, [sp, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010a46:	2280      	movs	r2, #128	@ 0x80
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	0292      	lsls	r2, r2, #10
 8010a4c:	4213      	tst	r3, r2
 8010a4e:	d09b      	beq.n	8010988 <HAL_RCC_OscConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8010a50:	f7fd f9c4 	bl	800dddc <HAL_GetTick>
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	1ac0      	subs	r0, r0, r3
 8010a58:	2864      	cmp	r0, #100	@ 0x64
 8010a5a:	d9f4      	bls.n	8010a46 <HAL_RCC_OscConfig+0x1d2>
 8010a5c:	e7af      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8010a5e:	2e08      	cmp	r6, #8
 8010a60:	d003      	beq.n	8010a6a <HAL_RCC_OscConfig+0x1f6>
 8010a62:	2e18      	cmp	r6, #24
 8010a64:	d110      	bne.n	8010a88 <HAL_RCC_OscConfig+0x214>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010a66:	2f02      	cmp	r7, #2
 8010a68:	d10e      	bne.n	8010a88 <HAL_RCC_OscConfig+0x214>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	055b      	lsls	r3, r3, #21
 8010a6e:	d503      	bpl.n	8010a78 <HAL_RCC_OscConfig+0x204>
 8010a70:	68eb      	ldr	r3, [r5, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d100      	bne.n	8010a78 <HAL_RCC_OscConfig+0x204>
 8010a76:	e763      	b.n	8010940 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a78:	6862      	ldr	r2, [r4, #4]
 8010a7a:	692b      	ldr	r3, [r5, #16]
 8010a7c:	4937      	ldr	r1, [pc, #220]	@ (8010b5c <HAL_RCC_OscConfig+0x2e8>)
 8010a7e:	061b      	lsls	r3, r3, #24
 8010a80:	400a      	ands	r2, r1
 8010a82:	4313      	orrs	r3, r2
 8010a84:	6063      	str	r3, [r4, #4]
 8010a86:	e782      	b.n	801098e <HAL_RCC_OscConfig+0x11a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010a88:	68eb      	ldr	r3, [r5, #12]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d012      	beq.n	8010ab4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8010a8e:	2380      	movs	r3, #128	@ 0x80
 8010a90:	6822      	ldr	r2, [r4, #0]
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	4313      	orrs	r3, r2
 8010a96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010a98:	f7fd f9a0 	bl	800dddc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010a9c:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8010a9e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010aa0:	00ff      	lsls	r7, r7, #3
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	423b      	tst	r3, r7
 8010aa6:	d1e7      	bne.n	8010a78 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8010aa8:	f7fd f998 	bl	800dddc <HAL_GetTick>
 8010aac:	1b80      	subs	r0, r0, r6
 8010aae:	2802      	cmp	r0, #2
 8010ab0:	d9f7      	bls.n	8010aa2 <HAL_RCC_OscConfig+0x22e>
 8010ab2:	e784      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8010ab4:	6823      	ldr	r3, [r4, #0]
 8010ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8010b60 <HAL_RCC_OscConfig+0x2ec>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010ab8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8010aba:	4013      	ands	r3, r2
 8010abc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010abe:	f7fd f98d 	bl	800dddc <HAL_GetTick>
 8010ac2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010ac4:	00ff      	lsls	r7, r7, #3
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	423b      	tst	r3, r7
 8010aca:	d100      	bne.n	8010ace <HAL_RCC_OscConfig+0x25a>
 8010acc:	e75f      	b.n	801098e <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8010ace:	f7fd f985 	bl	800dddc <HAL_GetTick>
 8010ad2:	1b80      	subs	r0, r0, r6
 8010ad4:	2802      	cmp	r0, #2
 8010ad6:	d9f6      	bls.n	8010ac6 <HAL_RCC_OscConfig+0x252>
 8010ad8:	e771      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010ada:	696b      	ldr	r3, [r5, #20]
 8010adc:	4e1d      	ldr	r6, [pc, #116]	@ (8010b54 <HAL_RCC_OscConfig+0x2e0>)
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d01c      	beq.n	8010b1c <HAL_RCC_OscConfig+0x2a8>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8010ae2:	69aa      	ldr	r2, [r5, #24]
 8010ae4:	2304      	movs	r3, #4
 8010ae6:	2a00      	cmp	r2, #0
 8010ae8:	d114      	bne.n	8010b14 <HAL_RCC_OscConfig+0x2a0>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8010aea:	6832      	ldr	r2, [r6, #0]
 8010aec:	439a      	bics	r2, r3
 8010aee:	6032      	str	r2, [r6, #0]
      __HAL_RCC_LSI_ENABLE();
 8010af0:	2301      	movs	r3, #1
 8010af2:	6832      	ldr	r2, [r6, #0]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010af8:	f7fd f970 	bl	800dddc <HAL_GetTick>
 8010afc:	0007      	movs	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010afe:	2202      	movs	r2, #2
 8010b00:	6833      	ldr	r3, [r6, #0]
 8010b02:	4213      	tst	r3, r2
 8010b04:	d000      	beq.n	8010b08 <HAL_RCC_OscConfig+0x294>
 8010b06:	e746      	b.n	8010996 <HAL_RCC_OscConfig+0x122>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010b08:	f7fd f968 	bl	800dddc <HAL_GetTick>
 8010b0c:	1bc0      	subs	r0, r0, r7
 8010b0e:	2811      	cmp	r0, #17
 8010b10:	d9f5      	bls.n	8010afe <HAL_RCC_OscConfig+0x28a>
 8010b12:	e754      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8010b14:	6832      	ldr	r2, [r6, #0]
 8010b16:	4313      	orrs	r3, r2
 8010b18:	6033      	str	r3, [r6, #0]
 8010b1a:	e7e9      	b.n	8010af0 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_LSI_DISABLE();
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	6833      	ldr	r3, [r6, #0]
 8010b20:	4393      	bics	r3, r2
 8010b22:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010b24:	f7fd f95a 	bl	800dddc <HAL_GetTick>
 8010b28:	0007      	movs	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010b2a:	2202      	movs	r2, #2
 8010b2c:	6833      	ldr	r3, [r6, #0]
 8010b2e:	4213      	tst	r3, r2
 8010b30:	d100      	bne.n	8010b34 <HAL_RCC_OscConfig+0x2c0>
 8010b32:	e730      	b.n	8010996 <HAL_RCC_OscConfig+0x122>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010b34:	f7fd f952 	bl	800dddc <HAL_GetTick>
 8010b38:	1bc0      	subs	r0, r0, r7
 8010b3a:	2811      	cmp	r0, #17
 8010b3c:	d9f5      	bls.n	8010b2a <HAL_RCC_OscConfig+0x2b6>
 8010b3e:	e73e      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
 8010b40:	40021000 	.word	0x40021000
 8010b44:	ffff00ff 	.word	0xffff00ff
 8010b48:	0801fdd4 	.word	0x0801fdd4
 8010b4c:	20000050 	.word	0x20000050
 8010b50:	20000208 	.word	0x20000208
 8010b54:	40021094 	.word	0x40021094
 8010b58:	fffaffff 	.word	0xfffaffff
 8010b5c:	80ffffff 	.word	0x80ffffff
 8010b60:	fffffeff 	.word	0xfffffeff
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8010b64:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8010b66:	2100      	movs	r1, #0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8010b68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b6a:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8010b6c:	9100      	str	r1, [sp, #0]
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8010b6e:	4213      	tst	r3, r2
 8010b70:	d108      	bne.n	8010b84 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_PWR_CLK_ENABLE();
 8010b72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b74:	4313      	orrs	r3, r2
 8010b76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010b78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b7a:	4013      	ands	r3, r2
 8010b7c:	9303      	str	r3, [sp, #12]
 8010b7e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8010b80:	2301      	movs	r3, #1
 8010b82:	9300      	str	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010b84:	2780      	movs	r7, #128	@ 0x80
 8010b86:	4e80      	ldr	r6, [pc, #512]	@ (8010d88 <HAL_RCC_OscConfig+0x514>)
 8010b88:	007f      	lsls	r7, r7, #1
 8010b8a:	6833      	ldr	r3, [r6, #0]
 8010b8c:	423b      	tst	r3, r7
 8010b8e:	d027      	beq.n	8010be0 <HAL_RCC_OscConfig+0x36c>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8010b90:	2301      	movs	r3, #1
 8010b92:	68a9      	ldr	r1, [r5, #8]
 8010b94:	4e7d      	ldr	r6, [pc, #500]	@ (8010d8c <HAL_RCC_OscConfig+0x518>)
 8010b96:	4219      	tst	r1, r3
 8010b98:	d132      	bne.n	8010c00 <HAL_RCC_OscConfig+0x38c>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8010b9a:	6832      	ldr	r2, [r6, #0]
 8010b9c:	439a      	bics	r2, r3
 8010b9e:	6032      	str	r2, [r6, #0]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8010ba0:	2204      	movs	r2, #4
 8010ba2:	6833      	ldr	r3, [r6, #0]
 8010ba4:	4393      	bics	r3, r2
 8010ba6:	6033      	str	r3, [r6, #0]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010ba8:	2900      	cmp	r1, #0
 8010baa:	d132      	bne.n	8010c12 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8010bac:	f7fd f916 	bl	800dddc <HAL_GetTick>
 8010bb0:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010bb2:	2202      	movs	r2, #2
 8010bb4:	6833      	ldr	r3, [r6, #0]
 8010bb6:	4213      	tst	r3, r2
 8010bb8:	d164      	bne.n	8010c84 <HAL_RCC_OscConfig+0x410>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8010bba:	6833      	ldr	r3, [r6, #0]
 8010bbc:	327e      	adds	r2, #126	@ 0x7e
 8010bbe:	4213      	tst	r3, r2
 8010bc0:	d03a      	beq.n	8010c38 <HAL_RCC_OscConfig+0x3c4>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8010bc2:	6833      	ldr	r3, [r6, #0]
 8010bc4:	4393      	bics	r3, r2
 8010bc6:	6033      	str	r3, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8010bc8:	2280      	movs	r2, #128	@ 0x80
 8010bca:	6833      	ldr	r3, [r6, #0]
 8010bcc:	0112      	lsls	r2, r2, #4
 8010bce:	4213      	tst	r3, r2
 8010bd0:	d032      	beq.n	8010c38 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010bd2:	f7fd f903 	bl	800dddc <HAL_GetTick>
 8010bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8010d90 <HAL_RCC_OscConfig+0x51c>)
 8010bd8:	1bc0      	subs	r0, r0, r7
 8010bda:	4298      	cmp	r0, r3
 8010bdc:	d9f4      	bls.n	8010bc8 <HAL_RCC_OscConfig+0x354>
 8010bde:	e6ee      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010be0:	6833      	ldr	r3, [r6, #0]
 8010be2:	433b      	orrs	r3, r7
 8010be4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010be6:	f7fd f8f9 	bl	800dddc <HAL_GetTick>
 8010bea:	9001      	str	r0, [sp, #4]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010bec:	6833      	ldr	r3, [r6, #0]
 8010bee:	423b      	tst	r3, r7
 8010bf0:	d1ce      	bne.n	8010b90 <HAL_RCC_OscConfig+0x31c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010bf2:	f7fd f8f3 	bl	800dddc <HAL_GetTick>
 8010bf6:	9b01      	ldr	r3, [sp, #4]
 8010bf8:	1ac0      	subs	r0, r0, r3
 8010bfa:	2802      	cmp	r0, #2
 8010bfc:	d9f6      	bls.n	8010bec <HAL_RCC_OscConfig+0x378>
 8010bfe:	e6de      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8010c00:	2204      	movs	r2, #4
 8010c02:	4211      	tst	r1, r2
 8010c04:	d002      	beq.n	8010c0c <HAL_RCC_OscConfig+0x398>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8010c06:	6831      	ldr	r1, [r6, #0]
 8010c08:	430a      	orrs	r2, r1
 8010c0a:	6032      	str	r2, [r6, #0]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8010c0c:	6832      	ldr	r2, [r6, #0]
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010c12:	f7fd f8e3 	bl	800dddc <HAL_GetTick>
 8010c16:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010c18:	2202      	movs	r2, #2
 8010c1a:	6833      	ldr	r3, [r6, #0]
 8010c1c:	4213      	tst	r3, r2
 8010c1e:	d014      	beq.n	8010c4a <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8010c20:	2380      	movs	r3, #128	@ 0x80
 8010c22:	68aa      	ldr	r2, [r5, #8]
 8010c24:	421a      	tst	r2, r3
 8010c26:	d01e      	beq.n	8010c66 <HAL_RCC_OscConfig+0x3f2>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8010c28:	6832      	ldr	r2, [r6, #0]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	6033      	str	r3, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8010c2e:	2280      	movs	r2, #128	@ 0x80
 8010c30:	6833      	ldr	r3, [r6, #0]
 8010c32:	0112      	lsls	r2, r2, #4
 8010c34:	4213      	tst	r3, r2
 8010c36:	d00f      	beq.n	8010c58 <HAL_RCC_OscConfig+0x3e4>
    if (pwrclkchanged == SET)
 8010c38:	9b00      	ldr	r3, [sp, #0]
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d000      	beq.n	8010c40 <HAL_RCC_OscConfig+0x3cc>
 8010c3e:	e6ae      	b.n	801099e <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c42:	4a54      	ldr	r2, [pc, #336]	@ (8010d94 <HAL_RCC_OscConfig+0x520>)
 8010c44:	4013      	ands	r3, r2
 8010c46:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010c48:	e6a9      	b.n	801099e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c4a:	f7fd f8c7 	bl	800dddc <HAL_GetTick>
 8010c4e:	4b50      	ldr	r3, [pc, #320]	@ (8010d90 <HAL_RCC_OscConfig+0x51c>)
 8010c50:	1bc0      	subs	r0, r0, r7
 8010c52:	4298      	cmp	r0, r3
 8010c54:	d9e0      	bls.n	8010c18 <HAL_RCC_OscConfig+0x3a4>
 8010c56:	e6b2      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c58:	f7fd f8c0 	bl	800dddc <HAL_GetTick>
 8010c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8010d90 <HAL_RCC_OscConfig+0x51c>)
 8010c5e:	1bc0      	subs	r0, r0, r7
 8010c60:	4298      	cmp	r0, r3
 8010c62:	d9e4      	bls.n	8010c2e <HAL_RCC_OscConfig+0x3ba>
 8010c64:	e6ab      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8010c66:	6832      	ldr	r2, [r6, #0]
 8010c68:	439a      	bics	r2, r3
 8010c6a:	6032      	str	r2, [r6, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8010c6c:	2280      	movs	r2, #128	@ 0x80
 8010c6e:	6833      	ldr	r3, [r6, #0]
 8010c70:	0112      	lsls	r2, r2, #4
 8010c72:	4213      	tst	r3, r2
 8010c74:	d0e0      	beq.n	8010c38 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c76:	f7fd f8b1 	bl	800dddc <HAL_GetTick>
 8010c7a:	4b45      	ldr	r3, [pc, #276]	@ (8010d90 <HAL_RCC_OscConfig+0x51c>)
 8010c7c:	1bc0      	subs	r0, r0, r7
 8010c7e:	4298      	cmp	r0, r3
 8010c80:	d9f4      	bls.n	8010c6c <HAL_RCC_OscConfig+0x3f8>
 8010c82:	e69c      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c84:	f7fd f8aa 	bl	800dddc <HAL_GetTick>
 8010c88:	4b41      	ldr	r3, [pc, #260]	@ (8010d90 <HAL_RCC_OscConfig+0x51c>)
 8010c8a:	1bc0      	subs	r0, r0, r7
 8010c8c:	4298      	cmp	r0, r3
 8010c8e:	d990      	bls.n	8010bb2 <HAL_RCC_OscConfig+0x33e>
 8010c90:	e695      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010c92:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8010c94:	2301      	movs	r3, #1
 8010c96:	4e40      	ldr	r6, [pc, #256]	@ (8010d98 <HAL_RCC_OscConfig+0x524>)
 8010c98:	2a00      	cmp	r2, #0
 8010c9a:	d010      	beq.n	8010cbe <HAL_RCC_OscConfig+0x44a>
      __HAL_RCC_HSI48_ENABLE();
 8010c9c:	6832      	ldr	r2, [r6, #0]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010ca2:	f7fd f89b 	bl	800dddc <HAL_GetTick>
 8010ca6:	0007      	movs	r7, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8010ca8:	2202      	movs	r2, #2
 8010caa:	6833      	ldr	r3, [r6, #0]
 8010cac:	4213      	tst	r3, r2
 8010cae:	d000      	beq.n	8010cb2 <HAL_RCC_OscConfig+0x43e>
 8010cb0:	e679      	b.n	80109a6 <HAL_RCC_OscConfig+0x132>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010cb2:	f7fd f893 	bl	800dddc <HAL_GetTick>
 8010cb6:	1bc0      	subs	r0, r0, r7
 8010cb8:	2802      	cmp	r0, #2
 8010cba:	d9f5      	bls.n	8010ca8 <HAL_RCC_OscConfig+0x434>
 8010cbc:	e67f      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSI48_DISABLE();
 8010cbe:	6832      	ldr	r2, [r6, #0]
 8010cc0:	439a      	bics	r2, r3
 8010cc2:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 8010cc4:	f7fd f88a 	bl	800dddc <HAL_GetTick>
 8010cc8:	0007      	movs	r7, r0
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8010cca:	2202      	movs	r2, #2
 8010ccc:	6833      	ldr	r3, [r6, #0]
 8010cce:	4213      	tst	r3, r2
 8010cd0:	d100      	bne.n	8010cd4 <HAL_RCC_OscConfig+0x460>
 8010cd2:	e668      	b.n	80109a6 <HAL_RCC_OscConfig+0x132>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010cd4:	f7fd f882 	bl	800dddc <HAL_GetTick>
 8010cd8:	1bc0      	subs	r0, r0, r7
 8010cda:	2802      	cmp	r0, #2
 8010cdc:	d9f5      	bls.n	8010cca <HAL_RCC_OscConfig+0x456>
 8010cde:	e66e      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010ce0:	2238      	movs	r2, #56	@ 0x38
 8010ce2:	68a3      	ldr	r3, [r4, #8]
 8010ce4:	4013      	ands	r3, r2
 8010ce6:	2b18      	cmp	r3, #24
 8010ce8:	d100      	bne.n	8010cec <HAL_RCC_OscConfig+0x478>
 8010cea:	e629      	b.n	8010940 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_PLL_DISABLE();
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	4a2b      	ldr	r2, [pc, #172]	@ (8010d9c <HAL_RCC_OscConfig+0x528>)
 8010cf0:	4013      	ands	r3, r2
 8010cf2:	6023      	str	r3, [r4, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8010cf4:	2902      	cmp	r1, #2
 8010cf6:	d137      	bne.n	8010d68 <HAL_RCC_OscConfig+0x4f4>
        tickstart = HAL_GetTick();
 8010cf8:	f7fd f870 	bl	800dddc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010cfc:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8010cfe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010d00:	04bf      	lsls	r7, r7, #18
 8010d02:	6823      	ldr	r3, [r4, #0]
 8010d04:	423b      	tst	r3, r7
 8010d06:	d129      	bne.n	8010d5c <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010d08:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010d0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010d0c:	68e2      	ldr	r2, [r4, #12]
 8010d0e:	430b      	orrs	r3, r1
 8010d10:	4923      	ldr	r1, [pc, #140]	@ (8010da0 <HAL_RCC_OscConfig+0x52c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010d12:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010d14:	400a      	ands	r2, r1
 8010d16:	4313      	orrs	r3, r2
 8010d18:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010d1a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8010d20:	4313      	orrs	r3, r2
 8010d22:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8010d24:	4313      	orrs	r3, r2
 8010d26:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8010d28:	0212      	lsls	r2, r2, #8
 8010d2a:	4313      	orrs	r3, r2
 8010d2c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8010d2e:	2380      	movs	r3, #128	@ 0x80
 8010d30:	68e2      	ldr	r2, [r4, #12]
 8010d32:	055b      	lsls	r3, r3, #21
 8010d34:	4313      	orrs	r3, r2
 8010d36:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8010d38:	2380      	movs	r3, #128	@ 0x80
 8010d3a:	6822      	ldr	r2, [r4, #0]
 8010d3c:	045b      	lsls	r3, r3, #17
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8010d42:	f7fd f84b 	bl	800dddc <HAL_GetTick>
 8010d46:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	4233      	tst	r3, r6
 8010d4c:	d000      	beq.n	8010d50 <HAL_RCC_OscConfig+0x4dc>
 8010d4e:	e62e      	b.n	80109ae <HAL_RCC_OscConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d50:	f7fd f844 	bl	800dddc <HAL_GetTick>
 8010d54:	1b40      	subs	r0, r0, r5
 8010d56:	2802      	cmp	r0, #2
 8010d58:	d9f6      	bls.n	8010d48 <HAL_RCC_OscConfig+0x4d4>
 8010d5a:	e630      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d5c:	f7fd f83e 	bl	800dddc <HAL_GetTick>
 8010d60:	1b80      	subs	r0, r0, r6
 8010d62:	2802      	cmp	r0, #2
 8010d64:	d9cd      	bls.n	8010d02 <HAL_RCC_OscConfig+0x48e>
 8010d66:	e62a      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 8010d68:	f7fd f838 	bl	800dddc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010d6c:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8010d6e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010d70:	04b6      	lsls	r6, r6, #18
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	4233      	tst	r3, r6
 8010d76:	d100      	bne.n	8010d7a <HAL_RCC_OscConfig+0x506>
 8010d78:	e619      	b.n	80109ae <HAL_RCC_OscConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d7a:	f7fd f82f 	bl	800dddc <HAL_GetTick>
 8010d7e:	1b40      	subs	r0, r0, r5
 8010d80:	2802      	cmp	r0, #2
 8010d82:	d9f6      	bls.n	8010d72 <HAL_RCC_OscConfig+0x4fe>
 8010d84:	e61b      	b.n	80109be <HAL_RCC_OscConfig+0x14a>
 8010d86:	46c0      	nop			@ (mov r8, r8)
 8010d88:	40007000 	.word	0x40007000
 8010d8c:	40021090 	.word	0x40021090
 8010d90:	00001388 	.word	0x00001388
 8010d94:	efffffff 	.word	0xefffffff
 8010d98:	40021098 	.word	0x40021098
 8010d9c:	feffffff 	.word	0xfeffffff
 8010da0:	11c1808c 	.word	0x11c1808c

08010da4 <HAL_RCC_ClockConfig>:
{
 8010da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010da6:	2207      	movs	r2, #7
 8010da8:	4e3f      	ldr	r6, [pc, #252]	@ (8010ea8 <HAL_RCC_ClockConfig+0x104>)
{
 8010daa:	0004      	movs	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010dac:	6833      	ldr	r3, [r6, #0]
{
 8010dae:	000d      	movs	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010db0:	4013      	ands	r3, r2
 8010db2:	428b      	cmp	r3, r1
 8010db4:	d31d      	bcc.n	8010df2 <HAL_RCC_ClockConfig+0x4e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	07db      	lsls	r3, r3, #31
 8010dba:	d424      	bmi.n	8010e06 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010dbc:	6822      	ldr	r2, [r4, #0]
 8010dbe:	0793      	lsls	r3, r2, #30
 8010dc0:	d459      	bmi.n	8010e76 <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010dc2:	2107      	movs	r1, #7
 8010dc4:	6833      	ldr	r3, [r6, #0]
 8010dc6:	400b      	ands	r3, r1
 8010dc8:	42ab      	cmp	r3, r5
 8010dca:	d85c      	bhi.n	8010e86 <HAL_RCC_ClockConfig+0xe2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010dcc:	4d37      	ldr	r5, [pc, #220]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
 8010dce:	0752      	lsls	r2, r2, #29
 8010dd0:	d462      	bmi.n	8010e98 <HAL_RCC_ClockConfig+0xf4>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010dd2:	f7ff fcf1 	bl	80107b8 <HAL_RCC_GetSysClockFreq>
 8010dd6:	68ab      	ldr	r3, [r5, #8]
 8010dd8:	4a35      	ldr	r2, [pc, #212]	@ (8010eb0 <HAL_RCC_ClockConfig+0x10c>)
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010dda:	051b      	lsls	r3, r3, #20
 8010ddc:	0f1b      	lsrs	r3, r3, #28
 8010dde:	5cd3      	ldrb	r3, [r2, r3]
 8010de0:	221f      	movs	r2, #31
 8010de2:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8010de4:	40d8      	lsrs	r0, r3
 8010de6:	4933      	ldr	r1, [pc, #204]	@ (8010eb4 <HAL_RCC_ClockConfig+0x110>)
 8010de8:	6008      	str	r0, [r1, #0]
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8010dea:	2003      	movs	r0, #3
 8010dec:	f7fc ffb6 	bl	800dd5c <HAL_InitTick>
  return halstatus;
 8010df0:	e008      	b.n	8010e04 <HAL_RCC_ClockConfig+0x60>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010df2:	6833      	ldr	r3, [r6, #0]
 8010df4:	4393      	bics	r3, r2
 8010df6:	430b      	orrs	r3, r1
 8010df8:	6033      	str	r3, [r6, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010dfa:	6833      	ldr	r3, [r6, #0]
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	428b      	cmp	r3, r1
 8010e00:	d0d9      	beq.n	8010db6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8010e02:	2001      	movs	r0, #1
}
 8010e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010e06:	6860      	ldr	r0, [r4, #4]
 8010e08:	2804      	cmp	r0, #4
 8010e0a:	d832      	bhi.n	8010e72 <HAL_RCC_ClockConfig+0xce>
 8010e0c:	f7ef f98e 	bl	800012c <__gnu_thumb1_case_uqi>
 8010e10:	03202a25 	.word	0x03202a25
 8010e14:	2f          	.byte	0x2f
 8010e15:	00          	.byte	0x00
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010e16:	4b25      	ldr	r3, [pc, #148]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	019b      	lsls	r3, r3, #6
 8010e1c:	d5f1      	bpl.n	8010e02 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010e1e:	2207      	movs	r2, #7
 8010e20:	4f22      	ldr	r7, [pc, #136]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	4393      	bics	r3, r2
 8010e26:	4303      	orrs	r3, r0
 8010e28:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8010e2a:	f7fc ffd7 	bl	800dddc <HAL_GetTick>
 8010e2e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e30:	2338      	movs	r3, #56	@ 0x38
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	401a      	ands	r2, r3
 8010e36:	6863      	ldr	r3, [r4, #4]
 8010e38:	00db      	lsls	r3, r3, #3
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d0be      	beq.n	8010dbc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e3e:	f7fc ffcd 	bl	800dddc <HAL_GetTick>
 8010e42:	9b01      	ldr	r3, [sp, #4]
 8010e44:	1ac0      	subs	r0, r0, r3
 8010e46:	4b1c      	ldr	r3, [pc, #112]	@ (8010eb8 <HAL_RCC_ClockConfig+0x114>)
 8010e48:	4298      	cmp	r0, r3
 8010e4a:	d9f1      	bls.n	8010e30 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8010e4c:	2003      	movs	r0, #3
 8010e4e:	e7d9      	b.n	8010e04 <HAL_RCC_ClockConfig+0x60>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010e50:	4b16      	ldr	r3, [pc, #88]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	039b      	lsls	r3, r3, #14
 8010e56:	d4e2      	bmi.n	8010e1e <HAL_RCC_ClockConfig+0x7a>
 8010e58:	e7d3      	b.n	8010e02 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010e5a:	4b14      	ldr	r3, [pc, #80]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	079b      	lsls	r3, r3, #30
 8010e60:	d4dd      	bmi.n	8010e1e <HAL_RCC_ClockConfig+0x7a>
 8010e62:	e7ce      	b.n	8010e02 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010e64:	4b11      	ldr	r3, [pc, #68]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	055b      	lsls	r3, r3, #21
 8010e6a:	d4d8      	bmi.n	8010e1e <HAL_RCC_ClockConfig+0x7a>
 8010e6c:	e7c9      	b.n	8010e02 <HAL_RCC_ClockConfig+0x5e>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010e6e:	4b13      	ldr	r3, [pc, #76]	@ (8010ebc <HAL_RCC_ClockConfig+0x118>)
 8010e70:	e7f4      	b.n	8010e5c <HAL_RCC_ClockConfig+0xb8>
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010e72:	4b13      	ldr	r3, [pc, #76]	@ (8010ec0 <HAL_RCC_ClockConfig+0x11c>)
 8010e74:	e7f2      	b.n	8010e5c <HAL_RCC_ClockConfig+0xb8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e76:	490d      	ldr	r1, [pc, #52]	@ (8010eac <HAL_RCC_ClockConfig+0x108>)
 8010e78:	4812      	ldr	r0, [pc, #72]	@ (8010ec4 <HAL_RCC_ClockConfig+0x120>)
 8010e7a:	688b      	ldr	r3, [r1, #8]
 8010e7c:	4003      	ands	r3, r0
 8010e7e:	68a0      	ldr	r0, [r4, #8]
 8010e80:	4303      	orrs	r3, r0
 8010e82:	608b      	str	r3, [r1, #8]
 8010e84:	e79d      	b.n	8010dc2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010e86:	6833      	ldr	r3, [r6, #0]
 8010e88:	438b      	bics	r3, r1
 8010e8a:	432b      	orrs	r3, r5
 8010e8c:	6033      	str	r3, [r6, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010e8e:	6833      	ldr	r3, [r6, #0]
 8010e90:	400b      	ands	r3, r1
 8010e92:	42ab      	cmp	r3, r5
 8010e94:	d1b5      	bne.n	8010e02 <HAL_RCC_ClockConfig+0x5e>
 8010e96:	e799      	b.n	8010dcc <HAL_RCC_ClockConfig+0x28>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010e98:	68ab      	ldr	r3, [r5, #8]
 8010e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8010ec8 <HAL_RCC_ClockConfig+0x124>)
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	68e2      	ldr	r2, [r4, #12]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	60ab      	str	r3, [r5, #8]
 8010ea4:	e795      	b.n	8010dd2 <HAL_RCC_ClockConfig+0x2e>
 8010ea6:	46c0      	nop			@ (mov r8, r8)
 8010ea8:	40022000 	.word	0x40022000
 8010eac:	40021000 	.word	0x40021000
 8010eb0:	0801fdd4 	.word	0x0801fdd4
 8010eb4:	20000050 	.word	0x20000050
 8010eb8:	00001388 	.word	0x00001388
 8010ebc:	40021094 	.word	0x40021094
 8010ec0:	40021090 	.word	0x40021090
 8010ec4:	fffff0ff 	.word	0xfffff0ff
 8010ec8:	ffff8fff 	.word	0xffff8fff

08010ecc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8010ecc:	4b05      	ldr	r3, [pc, #20]	@ (8010ee4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8010ece:	4906      	ldr	r1, [pc, #24]	@ (8010ee8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010ed0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8010ed2:	4a06      	ldr	r2, [pc, #24]	@ (8010eec <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8010ed4:	045b      	lsls	r3, r3, #17
 8010ed6:	0f5b      	lsrs	r3, r3, #29
 8010ed8:	5ccb      	ldrb	r3, [r1, r3]
 8010eda:	211f      	movs	r1, #31
 8010edc:	6810      	ldr	r0, [r2, #0]
 8010ede:	400b      	ands	r3, r1
 8010ee0:	40d8      	lsrs	r0, r3
}
 8010ee2:	4770      	bx	lr
 8010ee4:	40021000 	.word	0x40021000
 8010ee8:	0801fdcc 	.word	0x0801fdcc
 8010eec:	20000050 	.word	0x20000050

08010ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010ef0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010ef2:	6803      	ldr	r3, [r0, #0]
{
 8010ef4:	0004      	movs	r4, r0
 8010ef6:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010ef8:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010efa:	041b      	lsls	r3, r3, #16
 8010efc:	d553      	bpl.n	8010fa6 <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010efe:	2280      	movs	r2, #128	@ 0x80
 8010f00:	4e8a      	ldr	r6, [pc, #552]	@ (801112c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8010f02:	0552      	lsls	r2, r2, #21
 8010f04:	6db3      	ldr	r3, [r6, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 8010f06:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010f08:	4213      	tst	r3, r2
 8010f0a:	d108      	bne.n	8010f1e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f0c:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	65b3      	str	r3, [r6, #88]	@ 0x58
 8010f12:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8010f14:	4013      	ands	r3, r2
 8010f16:	9303      	str	r3, [sp, #12]
 8010f18:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010f1e:	2780      	movs	r7, #128	@ 0x80
 8010f20:	4d83      	ldr	r5, [pc, #524]	@ (8011130 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8010f22:	007f      	lsls	r7, r7, #1
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	433b      	orrs	r3, r7
 8010f28:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010f2a:	f7fc ff57 	bl	800dddc <HAL_GetTick>
 8010f2e:	9001      	str	r0, [sp, #4]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010f30:	682b      	ldr	r3, [r5, #0]
 8010f32:	423b      	tst	r3, r7
 8010f34:	d029      	beq.n	8010f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010f36:	4d7f      	ldr	r5, [pc, #508]	@ (8011134 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8010f38:	23c0      	movs	r3, #192	@ 0xc0
 8010f3a:	682a      	ldr	r2, [r5, #0]
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	0010      	movs	r0, r2

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010f40:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8010f42:	4f7d      	ldr	r7, [pc, #500]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010f44:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010f46:	421a      	tst	r2, r3
 8010f48:	d018      	beq.n	8010f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8010f4a:	4281      	cmp	r1, r0
 8010f4c:	d016      	beq.n	8010f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010f4e:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010f50:	682b      	ldr	r3, [r5, #0]
        __HAL_RCC_BACKUPRESET_FORCE();
 8010f52:	6828      	ldr	r0, [r5, #0]
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010f54:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8010f56:	0252      	lsls	r2, r2, #9
 8010f58:	4302      	orrs	r2, r0
 8010f5a:	602a      	str	r2, [r5, #0]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010f5c:	682a      	ldr	r2, [r5, #0]
 8010f5e:	4877      	ldr	r0, [pc, #476]	@ (801113c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010f60:	4039      	ands	r1, r7
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010f62:	4002      	ands	r2, r0
 8010f64:	602a      	str	r2, [r5, #0]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010f66:	6029      	str	r1, [r5, #0]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010f68:	07db      	lsls	r3, r3, #31
 8010f6a:	d507      	bpl.n	8010f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f6c:	f7fc ff36 	bl	800dddc <HAL_GetTick>
 8010f70:	9001      	str	r0, [sp, #4]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010f72:	2202      	movs	r2, #2
 8010f74:	682b      	ldr	r3, [r5, #0]
 8010f76:	4213      	tst	r3, r2
 8010f78:	d100      	bne.n	8010f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8010f7a:	e0ce      	b.n	801111a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010f7c:	682b      	ldr	r3, [r5, #0]
 8010f7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010f80:	403b      	ands	r3, r7
 8010f82:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010f84:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010f86:	602b      	str	r3, [r5, #0]
 8010f88:	e006      	b.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f8a:	f7fc ff27 	bl	800dddc <HAL_GetTick>
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	1ac0      	subs	r0, r0, r3
 8010f92:	2802      	cmp	r0, #2
 8010f94:	d9cc      	bls.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010f96:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010f98:	9b00      	ldr	r3, [sp, #0]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d103      	bne.n	8010fa6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010f9e:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8010fa0:	4a67      	ldr	r2, [pc, #412]	@ (8011140 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	65b3      	str	r3, [r6, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010fa6:	6823      	ldr	r3, [r4, #0]
 8010fa8:	07da      	lsls	r2, r3, #31
 8010faa:	d506      	bpl.n	8010fba <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010fac:	2503      	movs	r5, #3
 8010fae:	4965      	ldr	r1, [pc, #404]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8010fb0:	680a      	ldr	r2, [r1, #0]
 8010fb2:	43aa      	bics	r2, r5
 8010fb4:	6865      	ldr	r5, [r4, #4]
 8010fb6:	432a      	orrs	r2, r5
 8010fb8:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010fba:	079a      	lsls	r2, r3, #30
 8010fbc:	d506      	bpl.n	8010fcc <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010fbe:	250c      	movs	r5, #12
 8010fc0:	4960      	ldr	r1, [pc, #384]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8010fc2:	680a      	ldr	r2, [r1, #0]
 8010fc4:	43aa      	bics	r2, r5
 8010fc6:	68a5      	ldr	r5, [r4, #8]
 8010fc8:	432a      	orrs	r2, r5
 8010fca:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010fcc:	06da      	lsls	r2, r3, #27
 8010fce:	d506      	bpl.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010fd0:	495c      	ldr	r1, [pc, #368]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8010fd2:	4d5d      	ldr	r5, [pc, #372]	@ (8011148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010fd4:	680a      	ldr	r2, [r1, #0]
 8010fd6:	402a      	ands	r2, r5
 8010fd8:	6965      	ldr	r5, [r4, #20]
 8010fda:	432a      	orrs	r2, r5
 8010fdc:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8010fde:	071a      	lsls	r2, r3, #28
 8010fe0:	d506      	bpl.n	8010ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8010fe2:	4958      	ldr	r1, [pc, #352]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8010fe4:	4d54      	ldr	r5, [pc, #336]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8010fe6:	680a      	ldr	r2, [r1, #0]
 8010fe8:	402a      	ands	r2, r5
 8010fea:	6925      	ldr	r5, [r4, #16]
 8010fec:	432a      	orrs	r2, r5
 8010fee:	600a      	str	r2, [r1, #0]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8010ff0:	075a      	lsls	r2, r3, #29
 8010ff2:	d506      	bpl.n	8011002 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8010ff4:	25c0      	movs	r5, #192	@ 0xc0
 8010ff6:	4953      	ldr	r1, [pc, #332]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8010ff8:	680a      	ldr	r2, [r1, #0]
 8010ffa:	43aa      	bics	r2, r5
 8010ffc:	68e5      	ldr	r5, [r4, #12]
 8010ffe:	432a      	orrs	r2, r5
 8011000:	600a      	str	r2, [r1, #0]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011002:	069a      	lsls	r2, r3, #26
 8011004:	d506      	bpl.n	8011014 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011006:	494f      	ldr	r1, [pc, #316]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011008:	4d50      	ldr	r5, [pc, #320]	@ (801114c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 801100a:	680a      	ldr	r2, [r1, #0]
 801100c:	402a      	ands	r2, r5
 801100e:	69a5      	ldr	r5, [r4, #24]
 8011010:	432a      	orrs	r2, r5
 8011012:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011014:	065a      	lsls	r2, r3, #25
 8011016:	d506      	bpl.n	8011026 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011018:	494a      	ldr	r1, [pc, #296]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801101a:	4d4d      	ldr	r5, [pc, #308]	@ (8011150 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801101c:	680a      	ldr	r2, [r1, #0]
 801101e:	402a      	ands	r2, r5
 8011020:	69e5      	ldr	r5, [r4, #28]
 8011022:	432a      	orrs	r2, r5
 8011024:	600a      	str	r2, [r1, #0]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011026:	061a      	lsls	r2, r3, #24
 8011028:	d506      	bpl.n	8011038 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801102a:	4946      	ldr	r1, [pc, #280]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801102c:	4d49      	ldr	r5, [pc, #292]	@ (8011154 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801102e:	680a      	ldr	r2, [r1, #0]
 8011030:	402a      	ands	r2, r5
 8011032:	6a25      	ldr	r5, [r4, #32]
 8011034:	432a      	orrs	r2, r5
 8011036:	600a      	str	r2, [r1, #0]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011038:	05da      	lsls	r2, r3, #23
 801103a:	d506      	bpl.n	801104a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801103c:	4941      	ldr	r1, [pc, #260]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801103e:	4d46      	ldr	r5, [pc, #280]	@ (8011158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011040:	680a      	ldr	r2, [r1, #0]
 8011042:	402a      	ands	r2, r5
 8011044:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011046:	432a      	orrs	r2, r5
 8011048:	600a      	str	r2, [r1, #0]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 801104a:	059a      	lsls	r2, r3, #22
 801104c:	d506      	bpl.n	801105c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 801104e:	493d      	ldr	r1, [pc, #244]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011050:	4d42      	ldr	r5, [pc, #264]	@ (801115c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011052:	680a      	ldr	r2, [r1, #0]
 8011054:	402a      	ands	r2, r5
 8011056:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8011058:	432a      	orrs	r2, r5
 801105a:	600a      	str	r2, [r1, #0]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801105c:	045a      	lsls	r2, r3, #17
 801105e:	d510      	bpl.n	8011082 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8011060:	2280      	movs	r2, #128	@ 0x80
 8011062:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011064:	0552      	lsls	r2, r2, #21
 8011066:	4295      	cmp	r5, r2
 8011068:	d105      	bne.n	8011076 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 801106a:	2280      	movs	r2, #128	@ 0x80
 801106c:	492f      	ldr	r1, [pc, #188]	@ (801112c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 801106e:	0252      	lsls	r2, r2, #9
 8011070:	68ce      	ldr	r6, [r1, #12]
 8011072:	4332      	orrs	r2, r6
 8011074:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011076:	4933      	ldr	r1, [pc, #204]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8011078:	4e39      	ldr	r6, [pc, #228]	@ (8011160 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 801107a:	680a      	ldr	r2, [r1, #0]
 801107c:	4032      	ands	r2, r6
 801107e:	432a      	orrs	r2, r5
 8011080:	600a      	str	r2, [r1, #0]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011082:	04da      	lsls	r2, r3, #19
 8011084:	d510      	bpl.n	80110a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8011086:	2280      	movs	r2, #128	@ 0x80
 8011088:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801108a:	0512      	lsls	r2, r2, #20
 801108c:	4295      	cmp	r5, r2
 801108e:	d105      	bne.n	801109c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8011090:	2280      	movs	r2, #128	@ 0x80
 8011092:	4926      	ldr	r1, [pc, #152]	@ (801112c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011094:	0452      	lsls	r2, r2, #17
 8011096:	68ce      	ldr	r6, [r1, #12]
 8011098:	4332      	orrs	r2, r6
 801109a:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801109c:	4929      	ldr	r1, [pc, #164]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801109e:	4e31      	ldr	r6, [pc, #196]	@ (8011164 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80110a0:	680a      	ldr	r2, [r1, #0]
 80110a2:	4032      	ands	r2, r6
 80110a4:	432a      	orrs	r2, r5
 80110a6:	600a      	str	r2, [r1, #0]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80110a8:	049a      	lsls	r2, r3, #18
 80110aa:	d510      	bpl.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80110ac:	2280      	movs	r2, #128	@ 0x80
 80110ae:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80110b0:	0512      	lsls	r2, r2, #20
 80110b2:	4295      	cmp	r5, r2
 80110b4:	d105      	bne.n	80110c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80110b6:	2280      	movs	r2, #128	@ 0x80
 80110b8:	491c      	ldr	r1, [pc, #112]	@ (801112c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80110ba:	0452      	lsls	r2, r2, #17
 80110bc:	68ce      	ldr	r6, [r1, #12]
 80110be:	4332      	orrs	r2, r6
 80110c0:	60ca      	str	r2, [r1, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80110c2:	4920      	ldr	r1, [pc, #128]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80110c4:	4e27      	ldr	r6, [pc, #156]	@ (8011164 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80110c6:	680a      	ldr	r2, [r1, #0]
 80110c8:	4032      	ands	r2, r6
 80110ca:	432a      	orrs	r2, r5
 80110cc:	600a      	str	r2, [r1, #0]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80110ce:	055a      	lsls	r2, r3, #21
 80110d0:	d50e      	bpl.n	80110f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 80110d2:	2280      	movs	r2, #128	@ 0x80
 80110d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80110d6:	0452      	lsls	r2, r2, #17
 80110d8:	4291      	cmp	r1, r2
 80110da:	d103      	bne.n	80110e4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80110dc:	4d13      	ldr	r5, [pc, #76]	@ (801112c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80110de:	68ea      	ldr	r2, [r5, #12]
 80110e0:	430a      	orrs	r2, r1
 80110e2:	60ea      	str	r2, [r5, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80110e4:	4d17      	ldr	r5, [pc, #92]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80110e6:	4e20      	ldr	r6, [pc, #128]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80110e8:	682a      	ldr	r2, [r5, #0]
 80110ea:	4032      	ands	r2, r6
 80110ec:	430a      	orrs	r2, r1
 80110ee:	602a      	str	r2, [r5, #0]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80110f0:	051b      	lsls	r3, r3, #20
 80110f2:	d510      	bpl.n	8011116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80110f4:	2380      	movs	r3, #128	@ 0x80
 80110f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80110f8:	049b      	lsls	r3, r3, #18
 80110fa:	4299      	cmp	r1, r3
 80110fc:	d105      	bne.n	801110a <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80110fe:	2380      	movs	r3, #128	@ 0x80
 8011100:	4a0a      	ldr	r2, [pc, #40]	@ (801112c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8011102:	045b      	lsls	r3, r3, #17
 8011104:	68d4      	ldr	r4, [r2, #12]
 8011106:	4323      	orrs	r3, r4
 8011108:	60d3      	str	r3, [r2, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 801110a:	4a0e      	ldr	r2, [pc, #56]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 801110c:	4c16      	ldr	r4, [pc, #88]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 801110e:	6813      	ldr	r3, [r2, #0]
 8011110:	4023      	ands	r3, r4
 8011112:	430b      	orrs	r3, r1
 8011114:	6013      	str	r3, [r2, #0]

  }

  return status;
}
 8011116:	b005      	add	sp, #20
 8011118:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801111a:	f7fc fe5f 	bl	800dddc <HAL_GetTick>
 801111e:	9b01      	ldr	r3, [sp, #4]
 8011120:	1ac0      	subs	r0, r0, r3
 8011122:	4b12      	ldr	r3, [pc, #72]	@ (801116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8011124:	4298      	cmp	r0, r3
 8011126:	d800      	bhi.n	801112a <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8011128:	e723      	b.n	8010f72 <HAL_RCCEx_PeriphCLKConfig+0x82>
 801112a:	e734      	b.n	8010f96 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 801112c:	40021000 	.word	0x40021000
 8011130:	40007000 	.word	0x40007000
 8011134:	40021090 	.word	0x40021090
 8011138:	fffffcff 	.word	0xfffffcff
 801113c:	fffeffff 	.word	0xfffeffff
 8011140:	efffffff 	.word	0xefffffff
 8011144:	40021088 	.word	0x40021088
 8011148:	fffff3ff 	.word	0xfffff3ff
 801114c:	ffffcfff 	.word	0xffffcfff
 8011150:	fffcffff 	.word	0xfffcffff
 8011154:	fff3ffff 	.word	0xfff3ffff
 8011158:	ffcfffff 	.word	0xffcfffff
 801115c:	ff3fffff 	.word	0xff3fffff
 8011160:	cfffffff 	.word	0xcfffffff
 8011164:	f3ffffff 	.word	0xf3ffffff
 8011168:	feffffff 	.word	0xfeffffff
 801116c:	00001388 	.word	0x00001388

08011170 <HAL_RCCEx_GetPLLClockFreq>:
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011170:	2303      	movs	r3, #3
{
 8011172:	b5e0      	push	{r5, r6, r7, lr}
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011174:	4d29      	ldr	r5, [pc, #164]	@ (801121c <HAL_RCCEx_GetPLLClockFreq+0xac>)
{
 8011176:	0006      	movs	r6, r0
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011178:	68ef      	ldr	r7, [r5, #12]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801117a:	68ea      	ldr	r2, [r5, #12]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 801117c:	68e9      	ldr	r1, [r5, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 801117e:	6828      	ldr	r0, [r5, #0]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011180:	0649      	lsls	r1, r1, #25
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011182:	047f      	lsls	r7, r7, #17
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8011184:	0f49      	lsrs	r1, r1, #29
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011186:	401a      	ands	r2, r3
  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011188:	0e7f      	lsrs	r7, r7, #25
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 801118a:	3101      	adds	r1, #1
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 801118c:	330c      	adds	r3, #12
 801118e:	0700      	lsls	r0, r0, #28
 8011190:	d508      	bpl.n	80111a4 <HAL_RCCEx_GetPLLClockFreq+0x34>
 8011192:	6828      	ldr	r0, [r5, #0]
 8011194:	0900      	lsrs	r0, r0, #4
 8011196:	4003      	ands	r3, r0
  if (msirange > 11U)
  {
    msirange = 11U;
  }
  switch (pllsource)
 8011198:	2a02      	cmp	r2, #2
 801119a:	d007      	beq.n	80111ac <HAL_RCCEx_GetPLLClockFreq+0x3c>
 801119c:	2a03      	cmp	r2, #3
 801119e:	d136      	bne.n	801120e <HAL_RCCEx_GetPLLClockFreq+0x9e>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80111a0:	481f      	ldr	r0, [pc, #124]	@ (8011220 <HAL_RCCEx_GetPLLClockFreq+0xb0>)
 80111a2:	e004      	b.n	80111ae <HAL_RCCEx_GetPLLClockFreq+0x3e>
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80111a4:	481f      	ldr	r0, [pc, #124]	@ (8011224 <HAL_RCCEx_GetPLLClockFreq+0xb4>)
 80111a6:	6800      	ldr	r0, [r0, #0]
 80111a8:	0a00      	lsrs	r0, r0, #8
 80111aa:	e7f4      	b.n	8011196 <HAL_RCCEx_GetPLLClockFreq+0x26>
      pllvco = (HSI_VALUE / pllm) * plln;
 80111ac:	481e      	ldr	r0, [pc, #120]	@ (8011228 <HAL_RCCEx_GetPLLClockFreq+0xb8>)
      break;

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80111ae:	f7ee ffdb 	bl	8000168 <__udivsi3>
      break;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80111b2:	68ea      	ldr	r2, [r5, #12]
 80111b4:	2380      	movs	r3, #128	@ 0x80
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80111b6:	4347      	muls	r7, r0
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80111b8:	0010      	movs	r0, r2
 80111ba:	025b      	lsls	r3, r3, #9
 80111bc:	4018      	ands	r0, r3
 80111be:	421a      	tst	r2, r3
 80111c0:	d006      	beq.n	80111d0 <HAL_RCCEx_GetPLLClockFreq+0x60>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80111c2:	68e9      	ldr	r1, [r5, #12]
 80111c4:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80111c6:	0289      	lsls	r1, r1, #10
 80111c8:	0ec9      	lsrs	r1, r1, #27
 80111ca:	3101      	adds	r1, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80111cc:	f7ee ffcc 	bl	8000168 <__udivsi3>
 80111d0:	6030      	str	r0, [r6, #0]
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80111d2:	68ea      	ldr	r2, [r5, #12]
 80111d4:	2380      	movs	r3, #128	@ 0x80
 80111d6:	0010      	movs	r0, r2
 80111d8:	045b      	lsls	r3, r3, #17
 80111da:	4018      	ands	r0, r3
 80111dc:	421a      	tst	r2, r3
 80111de:	d006      	beq.n	80111ee <HAL_RCCEx_GetPLLClockFreq+0x7e>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80111e0:	68e9      	ldr	r1, [r5, #12]
 80111e2:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80111e4:	0109      	lsls	r1, r1, #4
 80111e6:	0f49      	lsrs	r1, r1, #29
 80111e8:	3101      	adds	r1, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80111ea:	f7ee ffbd 	bl	8000168 <__udivsi3>
 80111ee:	6070      	str	r0, [r6, #4]
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80111f0:	68ea      	ldr	r2, [r5, #12]
 80111f2:	2380      	movs	r3, #128	@ 0x80
 80111f4:	0010      	movs	r0, r2
 80111f6:	055b      	lsls	r3, r3, #21
 80111f8:	4018      	ands	r0, r3
 80111fa:	421a      	tst	r2, r3
 80111fc:	d005      	beq.n	801120a <HAL_RCCEx_GetPLLClockFreq+0x9a>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80111fe:	68e9      	ldr	r1, [r5, #12]
 8011200:	0038      	movs	r0, r7
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8011202:	0f49      	lsrs	r1, r1, #29
 8011204:	3101      	adds	r1, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8011206:	f7ee ffaf 	bl	8000168 <__udivsi3>
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 801120a:	60b0      	str	r0, [r6, #8]
 801120c:	bde0      	pop	{r5, r6, r7, pc}
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801120e:	4a07      	ldr	r2, [pc, #28]	@ (801122c <HAL_RCCEx_GetPLLClockFreq+0xbc>)
  if (msirange > 11U)
 8011210:	2b0b      	cmp	r3, #11
 8011212:	d900      	bls.n	8011216 <HAL_RCCEx_GetPLLClockFreq+0xa6>
 8011214:	230b      	movs	r3, #11
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	5898      	ldr	r0, [r3, r2]
 801121a:	e7c8      	b.n	80111ae <HAL_RCCEx_GetPLLClockFreq+0x3e>
 801121c:	40021000 	.word	0x40021000
 8011220:	003d0900 	.word	0x003d0900
 8011224:	40021094 	.word	0x40021094
 8011228:	00f42400 	.word	0x00f42400
 801122c:	0801fd9c 	.word	0x0801fd9c

08011230 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8011230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8011232:	2380      	movs	r3, #128	@ 0x80
 8011234:	021b      	lsls	r3, r3, #8
 8011236:	4298      	cmp	r0, r3
 8011238:	d11d      	bne.n	8011276 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801123a:	21c0      	movs	r1, #192	@ 0xc0
    switch (srcclk)
 801123c:	2080      	movs	r0, #128	@ 0x80
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801123e:	4a9d      	ldr	r2, [pc, #628]	@ (80114b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8011240:	0089      	lsls	r1, r1, #2
 8011242:	6813      	ldr	r3, [r2, #0]
    switch (srcclk)
 8011244:	0080      	lsls	r0, r0, #2
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8011246:	400b      	ands	r3, r1
    switch (srcclk)
 8011248:	4283      	cmp	r3, r0
 801124a:	d100      	bne.n	801124e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 801124c:	e0fc      	b.n	8011448 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 801124e:	428b      	cmp	r3, r1
 8011250:	d00a      	beq.n	8011268 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8011252:	2180      	movs	r1, #128	@ 0x80
 8011254:	2000      	movs	r0, #0
 8011256:	0049      	lsls	r1, r1, #1
 8011258:	428b      	cmp	r3, r1
 801125a:	d000      	beq.n	801125e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 801125c:	e07d      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801125e:	6810      	ldr	r0, [r2, #0]
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011260:	0780      	lsls	r0, r0, #30
 8011262:	0fc0      	lsrs	r0, r0, #31
 8011264:	03c0      	lsls	r0, r0, #15
 8011266:	e078      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011268:	4b93      	ldr	r3, [pc, #588]	@ (80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801126a:	6818      	ldr	r0, [r3, #0]
 801126c:	4b93      	ldr	r3, [pc, #588]	@ (80114bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801126e:	0380      	lsls	r0, r0, #14
 8011270:	17c0      	asrs	r0, r0, #31
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011272:	4018      	ands	r0, r3
 8011274:	e071      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    switch (PeriphClk)
 8011276:	2380      	movs	r3, #128	@ 0x80
 8011278:	005b      	lsls	r3, r3, #1
 801127a:	4298      	cmp	r0, r3
 801127c:	d100      	bne.n	8011280 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 801127e:	e0f2      	b.n	8011466 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8011280:	d819      	bhi.n	80112b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8011282:	2810      	cmp	r0, #16
 8011284:	d100      	bne.n	8011288 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8011286:	e080      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8011288:	d80a      	bhi.n	80112a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 801128a:	1e43      	subs	r3, r0, #1
 801128c:	2000      	movs	r0, #0
 801128e:	2b07      	cmp	r3, #7
 8011290:	d863      	bhi.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011292:	0018      	movs	r0, r3
 8011294:	f7ee ff4a 	bl	800012c <__gnu_thumb1_case_uqi>
 8011298:	8e0d6955 	.word	0x8e0d6955
 801129c:	860d0d0d 	.word	0x860d0d0d
 80112a0:	2840      	cmp	r0, #64	@ 0x40
 80112a2:	d100      	bne.n	80112a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80112a4:	e0b6      	b.n	8011414 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 80112a6:	2880      	cmp	r0, #128	@ 0x80
 80112a8:	d100      	bne.n	80112ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80112aa:	e0c0      	b.n	801142e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 80112ac:	2820      	cmp	r0, #32
 80112ae:	d100      	bne.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80112b0:	e09f      	b.n	80113f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80112b2:	2000      	movs	r0, #0
 80112b4:	e051      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80112b6:	2380      	movs	r3, #128	@ 0x80
 80112b8:	015b      	lsls	r3, r3, #5
 80112ba:	4298      	cmp	r0, r3
 80112bc:	d100      	bne.n	80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80112be:	e10b      	b.n	80114d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 80112c0:	d81a      	bhi.n	80112f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80112c2:	2180      	movs	r1, #128	@ 0x80
 80112c4:	00c9      	lsls	r1, r1, #3
 80112c6:	4288      	cmp	r0, r1
 80112c8:	d100      	bne.n	80112cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80112ca:	e0db      	b.n	8011484 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80112cc:	2380      	movs	r3, #128	@ 0x80
 80112ce:	011b      	lsls	r3, r3, #4
 80112d0:	4298      	cmp	r0, r3
 80112d2:	d100      	bne.n	80112d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80112d4:	e0e5      	b.n	80114a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80112d6:	2380      	movs	r3, #128	@ 0x80
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4298      	cmp	r0, r3
 80112dc:	d1e9      	bne.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80112de:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 80112e0:	2080      	movs	r0, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80112e2:	4b77      	ldr	r3, [pc, #476]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80112e4:	0412      	lsls	r2, r2, #16
 80112e6:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 80112e8:	0400      	lsls	r0, r0, #16
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80112ea:	4013      	ands	r3, r2
        switch (srcclk)
 80112ec:	4283      	cmp	r3, r0
 80112ee:	d100      	bne.n	80112f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80112f0:	e0c1      	b.n	8011476 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80112f2:	d800      	bhi.n	80112f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80112f4:	e0a5      	b.n	8011442 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 80112f6:	e052      	b.n	801139e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    switch (PeriphClk)
 80112f8:	2380      	movs	r3, #128	@ 0x80
 80112fa:	01db      	lsls	r3, r3, #7
 80112fc:	4298      	cmp	r0, r3
 80112fe:	d063      	beq.n	80113c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8011300:	d817      	bhi.n	8011332 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 8011302:	2380      	movs	r3, #128	@ 0x80
 8011304:	019b      	lsls	r3, r3, #6
 8011306:	4298      	cmp	r0, r3
 8011308:	d1d3      	bne.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801130a:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 801130c:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801130e:	4b6c      	ldr	r3, [pc, #432]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011310:	0512      	lsls	r2, r2, #20
 8011312:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011314:	0509      	lsls	r1, r1, #20
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8011316:	4013      	ands	r3, r2
        switch (srcclk)
 8011318:	428b      	cmp	r3, r1
 801131a:	d100      	bne.n	801131e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 801131c:	e0c5      	b.n	80114aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801131e:	4293      	cmp	r3, r2
 8011320:	d100      	bne.n	8011324 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8011322:	e101      	b.n	8011528 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 8011324:	2280      	movs	r2, #128	@ 0x80
 8011326:	2000      	movs	r0, #0
 8011328:	04d2      	lsls	r2, r2, #19
 801132a:	4293      	cmp	r3, r2
 801132c:	d115      	bne.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801132e:	4a62      	ldr	r2, [pc, #392]	@ (80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011330:	e0e4      	b.n	80114fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
    switch (PeriphClk)
 8011332:	4b64      	ldr	r3, [pc, #400]	@ (80114c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011334:	18c0      	adds	r0, r0, r3
 8011336:	4b64      	ldr	r3, [pc, #400]	@ (80114c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011338:	4218      	tst	r0, r3
 801133a:	d1ba      	bne.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
              frequency = HAL_RCC_GetPCLK1Freq();
 801133c:	f7ff fdc6 	bl	8010ecc <HAL_RCC_GetPCLK1Freq>
 8011340:	e00b      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8011342:	2203      	movs	r2, #3
 8011344:	4b5e      	ldr	r3, [pc, #376]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4013      	ands	r3, r2
        switch (srcclk)
 801134a:	2b02      	cmp	r3, #2
 801134c:	d007      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 801134e:	4293      	cmp	r3, r2
 8011350:	d018      	beq.n	8011384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011352:	2b01      	cmp	r3, #1
 8011354:	d1f2      	bne.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
            frequency = HAL_RCC_GetSysClockFreq();
 8011356:	f7ff fa2f 	bl	80107b8 <HAL_RCC_GetSysClockFreq>
}
 801135a:	b005      	add	sp, #20
 801135c:	bd00      	pop	{pc}
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801135e:	4b56      	ldr	r3, [pc, #344]	@ (80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011360:	6818      	ldr	r0, [r3, #0]
 8011362:	0540      	lsls	r0, r0, #21
 8011364:	17c0      	asrs	r0, r0, #31
 8011366:	4b59      	ldr	r3, [pc, #356]	@ (80114cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011368:	e783      	b.n	8011272 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 801136a:	220c      	movs	r2, #12
 801136c:	4b54      	ldr	r3, [pc, #336]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	4013      	ands	r3, r2
        switch (srcclk)
 8011372:	2b08      	cmp	r3, #8
 8011374:	d0f3      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011376:	d802      	bhi.n	801137e <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        switch (srcclk)
 8011378:	2b00      	cmp	r3, #0
 801137a:	d1ec      	bne.n	8011356 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 801137c:	e7de      	b.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        switch (srcclk)
 801137e:	2b0c      	cmp	r3, #12
 8011380:	d000      	beq.n	8011384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8011382:	e796      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011384:	4b4b      	ldr	r3, [pc, #300]	@ (80114b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8011386:	6818      	ldr	r0, [r3, #0]
 8011388:	e76a      	b.n	8011260 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801138a:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 801138c:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801138e:	4b4c      	ldr	r3, [pc, #304]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011390:	0112      	lsls	r2, r2, #4
 8011392:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011394:	0109      	lsls	r1, r1, #4
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8011396:	4013      	ands	r3, r2
        switch (srcclk)
 8011398:	428b      	cmp	r3, r1
 801139a:	d0e0      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 801139c:	d9ec      	bls.n	8011378 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
        switch (srcclk)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d0f0      	beq.n	8011384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80113a2:	e786      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80113a4:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 80113a6:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80113a8:	4b45      	ldr	r3, [pc, #276]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80113aa:	0092      	lsls	r2, r2, #2
 80113ac:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 80113ae:	0089      	lsls	r1, r1, #2
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 80113b0:	4013      	ands	r3, r2
        switch (srcclk)
 80113b2:	e7f1      	b.n	8011398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80113b4:	22c0      	movs	r2, #192	@ 0xc0
 80113b6:	4b42      	ldr	r3, [pc, #264]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4013      	ands	r3, r2
        switch (srcclk)
 80113bc:	2b80      	cmp	r3, #128	@ 0x80
 80113be:	d0ce      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80113c0:	d9da      	bls.n	8011378 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80113c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80113c4:	d0de      	beq.n	8011384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80113c6:	e774      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80113c8:	22c0      	movs	r2, #192	@ 0xc0
 80113ca:	4b3d      	ldr	r3, [pc, #244]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80113cc:	0592      	lsls	r2, r2, #22
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4013      	ands	r3, r2
        switch (srcclk)
 80113d2:	2280      	movs	r2, #128	@ 0x80
 80113d4:	0552      	lsls	r2, r2, #21
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d006      	beq.n	80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80113da:	2280      	movs	r2, #128	@ 0x80
 80113dc:	0592      	lsls	r2, r2, #22
 80113de:	4293      	cmp	r3, r2
 80113e0:	d0bd      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d0b7      	beq.n	8011356 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80113e6:	e764      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80113e8:	a801      	add	r0, sp, #4
 80113ea:	f7ff fec1 	bl	8011170 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80113ee:	9801      	ldr	r0, [sp, #4]
            break;
 80113f0:	e7b3      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80113f2:	22c0      	movs	r2, #192	@ 0xc0
 80113f4:	4b32      	ldr	r3, [pc, #200]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80113f6:	0192      	lsls	r2, r2, #6
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	4013      	ands	r3, r2
        switch (srcclk)
 80113fc:	2280      	movs	r2, #128	@ 0x80
 80113fe:	0152      	lsls	r2, r2, #5
 8011400:	4293      	cmp	r3, r2
 8011402:	d0a8      	beq.n	8011356 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011404:	2280      	movs	r2, #128	@ 0x80
 8011406:	0192      	lsls	r2, r2, #6
        switch (srcclk)
 8011408:	4293      	cmp	r3, r2
 801140a:	d0a8      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 801140c:	2b00      	cmp	r3, #0
 801140e:	d100      	bne.n	8011412 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8011410:	e794      	b.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8011412:	e74e      	b.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8011414:	22c0      	movs	r2, #192	@ 0xc0
 8011416:	4b2a      	ldr	r3, [pc, #168]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011418:	0292      	lsls	r2, r2, #10
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	4013      	ands	r3, r2
        switch (srcclk)
 801141e:	2280      	movs	r2, #128	@ 0x80
 8011420:	0252      	lsls	r2, r2, #9
 8011422:	4293      	cmp	r3, r2
 8011424:	d100      	bne.n	8011428 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8011426:	e796      	b.n	8011356 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8011428:	2280      	movs	r2, #128	@ 0x80
 801142a:	0292      	lsls	r2, r2, #10
 801142c:	e7ec      	b.n	8011408 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801142e:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011430:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011432:	4b23      	ldr	r3, [pc, #140]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011434:	0312      	lsls	r2, r2, #12
 8011436:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011438:	0309      	lsls	r1, r1, #12
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801143a:	4013      	ands	r3, r2
        switch (srcclk)
 801143c:	428b      	cmp	r3, r1
 801143e:	d08e      	beq.n	801135e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8011440:	d8ad      	bhi.n	801139e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        switch (srcclk)
 8011442:	2b00      	cmp	r3, #0
 8011444:	d100      	bne.n	8011448 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8011446:	e779      	b.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011448:	4b21      	ldr	r3, [pc, #132]	@ (80114d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801144a:	2000      	movs	r0, #0
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	0792      	lsls	r2, r2, #30
 8011450:	d400      	bmi.n	8011454 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8011452:	e782      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8011454:	6818      	ldr	r0, [r3, #0]
            frequency = LSI_VALUE;
 8011456:	4b1f      	ldr	r3, [pc, #124]	@ (80114d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8011458:	0740      	lsls	r0, r0, #29
            frequency = LSI_VALUE;
 801145a:	17c0      	asrs	r0, r0, #31
 801145c:	4018      	ands	r0, r3
 801145e:	23fa      	movs	r3, #250	@ 0xfa
 8011460:	01db      	lsls	r3, r3, #7
 8011462:	18c0      	adds	r0, r0, r3
 8011464:	e779      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011466:	22c0      	movs	r2, #192	@ 0xc0
        switch (srcclk)
 8011468:	2180      	movs	r1, #128	@ 0x80
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801146a:	4b15      	ldr	r3, [pc, #84]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801146c:	0392      	lsls	r2, r2, #14
 801146e:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011470:	0389      	lsls	r1, r1, #14
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011472:	4013      	ands	r3, r2
        switch (srcclk)
 8011474:	e7e2      	b.n	801143c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011476:	4b10      	ldr	r3, [pc, #64]	@ (80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8011478:	6818      	ldr	r0, [r3, #0]
 801147a:	4008      	ands	r0, r1
 801147c:	1e43      	subs	r3, r0, #1
 801147e:	4198      	sbcs	r0, r3
 8011480:	4240      	negs	r0, r0
 8011482:	e770      	b.n	8011366 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8011484:	4b0e      	ldr	r3, [pc, #56]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8011486:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 8011488:	01db      	lsls	r3, r3, #7
 801148a:	d40e      	bmi.n	80114aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 801148c:	4b0a      	ldr	r3, [pc, #40]	@ (80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801148e:	689a      	ldr	r2, [r3, #8]
 8011490:	23e0      	movs	r3, #224	@ 0xe0
 8011492:	01db      	lsls	r3, r3, #7
 8011494:	421a      	tst	r2, r3
 8011496:	d100      	bne.n	801149a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8011498:	e750      	b.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 801149a:	f7ff fd17 	bl	8010ecc <HAL_RCC_GetPCLK1Freq>
 801149e:	0040      	lsls	r0, r0, #1
 80114a0:	e75b      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80114a2:	4b07      	ldr	r3, [pc, #28]	@ (80114c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80114a4:	681b      	ldr	r3, [r3, #0]
        switch (srcclk)
 80114a6:	019b      	lsls	r3, r3, #6
 80114a8:	d5f0      	bpl.n	801148c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80114aa:	a801      	add	r0, sp, #4
 80114ac:	f7ff fe60 	bl	8011170 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80114b0:	9802      	ldr	r0, [sp, #8]
            break;
 80114b2:	e752      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80114b4:	40021090 	.word	0x40021090
 80114b8:	40021000 	.word	0x40021000
 80114bc:	0001e848 	.word	0x0001e848
 80114c0:	40021088 	.word	0x40021088
 80114c4:	ffff0000 	.word	0xffff0000
 80114c8:	fffeffff 	.word	0xfffeffff
 80114cc:	00f42400 	.word	0x00f42400
 80114d0:	40021094 	.word	0x40021094
 80114d4:	ffff83fa 	.word	0xffff83fa
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80114d8:	21c0      	movs	r1, #192	@ 0xc0
        switch (srcclk)
 80114da:	2080      	movs	r0, #128	@ 0x80
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80114dc:	4b13      	ldr	r3, [pc, #76]	@ (801152c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80114de:	0509      	lsls	r1, r1, #20
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a13      	ldr	r2, [pc, #76]	@ (8011530 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80114e4:	400b      	ands	r3, r1
        switch (srcclk)
 80114e6:	0500      	lsls	r0, r0, #20
 80114e8:	4283      	cmp	r3, r0
 80114ea:	d0de      	beq.n	80114aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80114ec:	428b      	cmp	r3, r1
 80114ee:	d01b      	beq.n	8011528 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 80114f0:	2180      	movs	r1, #128	@ 0x80
 80114f2:	2000      	movs	r0, #0
 80114f4:	04c9      	lsls	r1, r1, #19
 80114f6:	428b      	cmp	r3, r1
 80114f8:	d000      	beq.n	80114fc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80114fa:	e72e      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80114fc:	6813      	ldr	r3, [r2, #0]
 80114fe:	079b      	lsls	r3, r3, #30
 8011500:	d400      	bmi.n	8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8011502:	e72a      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011504:	6811      	ldr	r1, [r2, #0]
 8011506:	230f      	movs	r3, #15
 8011508:	0709      	lsls	r1, r1, #28
 801150a:	d509      	bpl.n	8011520 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 801150c:	6812      	ldr	r2, [r2, #0]
 801150e:	0912      	lsrs	r2, r2, #4
 8011510:	4013      	ands	r3, r2
              frequency = MSIRangeTable[msirange];
 8011512:	4a08      	ldr	r2, [pc, #32]	@ (8011534 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
              if (msirange > 11U)
 8011514:	2b0b      	cmp	r3, #11
 8011516:	d900      	bls.n	801151a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8011518:	230b      	movs	r3, #11
              frequency = MSIRangeTable[msirange];
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	5898      	ldr	r0, [r3, r2]
 801151e:	e71c      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8011520:	4a05      	ldr	r2, [pc, #20]	@ (8011538 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8011522:	6812      	ldr	r2, [r2, #0]
 8011524:	0a12      	lsrs	r2, r2, #8
 8011526:	e7f3      	b.n	8011510 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
            frequency = HSI48_VALUE;
 8011528:	4804      	ldr	r0, [pc, #16]	@ (801153c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 801152a:	e716      	b.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 801152c:	40021088 	.word	0x40021088
 8011530:	40021000 	.word	0x40021000
 8011534:	0801fd9c 	.word	0x0801fd9c
 8011538:	40021094 	.word	0x40021094
 801153c:	02dc6c00 	.word	0x02dc6c00

08011540 <HAL_RCCEx_CRSConfig>:
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8011540:	2280      	movs	r2, #128	@ 0x80
 8011542:	4b10      	ldr	r3, [pc, #64]	@ (8011584 <HAL_RCCEx_CRSConfig+0x44>)
 8011544:	0252      	lsls	r2, r2, #9
 8011546:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011548:	430a      	orrs	r2, r1
 801154a:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 801154c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801154e:	490e      	ldr	r1, [pc, #56]	@ (8011588 <HAL_RCCEx_CRSConfig+0x48>)
 8011550:	400a      	ands	r2, r1
 8011552:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8011554:	6842      	ldr	r2, [r0, #4]
 8011556:	6803      	ldr	r3, [r0, #0]
 8011558:	4313      	orrs	r3, r2
 801155a:	6882      	ldr	r2, [r0, #8]
 801155c:	4313      	orrs	r3, r2
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 801155e:	68c2      	ldr	r2, [r0, #12]
 8011560:	4313      	orrs	r3, r2
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8011562:	6902      	ldr	r2, [r0, #16]
 8011564:	0412      	lsls	r2, r2, #16
 8011566:	431a      	orrs	r2, r3
  WRITE_REG(CRS->CFGR, value);
 8011568:	4b08      	ldr	r3, [pc, #32]	@ (801158c <HAL_RCCEx_CRSConfig+0x4c>)
 801156a:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 801156c:	6819      	ldr	r1, [r3, #0]
 801156e:	6942      	ldr	r2, [r0, #20]
 8011570:	4807      	ldr	r0, [pc, #28]	@ (8011590 <HAL_RCCEx_CRSConfig+0x50>)
 8011572:	0212      	lsls	r2, r2, #8
 8011574:	4001      	ands	r1, r0
 8011576:	430a      	orrs	r2, r1
 8011578:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 801157a:	2260      	movs	r2, #96	@ 0x60
 801157c:	6819      	ldr	r1, [r3, #0]
 801157e:	430a      	orrs	r2, r1
 8011580:	601a      	str	r2, [r3, #0]
}
 8011582:	4770      	bx	lr
 8011584:	40021000 	.word	0x40021000
 8011588:	fffeffff 	.word	0xfffeffff
 801158c:	40006c00 	.word	0x40006c00
 8011590:	ffffc0ff 	.word	0xffffc0ff

08011594 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8011594:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011596:	0004      	movs	r4, r0
 8011598:	2202      	movs	r2, #2
 801159a:	342c      	adds	r4, #44	@ 0x2c
 801159c:	7825      	ldrb	r5, [r4, #0]
{
 801159e:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80115a0:	0010      	movs	r0, r2
 80115a2:	2d01      	cmp	r5, #1
 80115a4:	d014      	beq.n	80115d0 <HAL_RTC_DeactivateAlarm+0x3c>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80115a6:	332d      	adds	r3, #45	@ 0x2d
  __HAL_LOCK(hrtc);
 80115a8:	3801      	subs	r0, #1
 80115aa:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80115ac:	701a      	strb	r2, [r3, #0]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 80115ae:	32fe      	adds	r2, #254	@ 0xfe
  hrtc->State = HAL_RTC_STATE_BUSY;
 80115b0:	0018      	movs	r0, r3
 80115b2:	4b0c      	ldr	r3, [pc, #48]	@ (80115e4 <HAL_RTC_DeactivateAlarm+0x50>)
  if (Alarm == RTC_ALARM_A)
 80115b4:	4291      	cmp	r1, r2
 80115b6:	d10c      	bne.n	80115d2 <HAL_RTC_DeactivateAlarm+0x3e>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80115b8:	699a      	ldr	r2, [r3, #24]
 80115ba:	490b      	ldr	r1, [pc, #44]	@ (80115e8 <HAL_RTC_DeactivateAlarm+0x54>)
 80115bc:	400a      	ands	r2, r1
 80115be:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80115c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115c2:	0052      	lsls	r2, r2, #1
 80115c4:	0852      	lsrs	r2, r2, #1
 80115c6:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
  }

  hrtc->State = HAL_RTC_STATE_READY;
 80115c8:	2301      	movs	r3, #1
 80115ca:	7003      	strb	r3, [r0, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80115cc:	2000      	movs	r0, #0
 80115ce:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80115d0:	bd30      	pop	{r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80115d2:	699a      	ldr	r2, [r3, #24]
 80115d4:	4905      	ldr	r1, [pc, #20]	@ (80115ec <HAL_RTC_DeactivateAlarm+0x58>)
 80115d6:	400a      	ands	r2, r1
 80115d8:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80115da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115dc:	0052      	lsls	r2, r2, #1
 80115de:	0852      	lsrs	r2, r2, #1
 80115e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80115e2:	e7f1      	b.n	80115c8 <HAL_RTC_DeactivateAlarm+0x34>
 80115e4:	40002800 	.word	0x40002800
 80115e8:	ffffeeff 	.word	0xffffeeff
 80115ec:	ffffddff 	.word	0xffffddff

080115f0 <HAL_RTC_AlarmIRQHandler>:
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80115f0:	2301      	movs	r3, #1
{
 80115f2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = READ_REG(RTC->MISR);
 80115f4:	4d09      	ldr	r5, [pc, #36]	@ (801161c <HAL_RTC_AlarmIRQHandler+0x2c>)
{
 80115f6:	0004      	movs	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR);
 80115f8:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80115fa:	421e      	tst	r6, r3
 80115fc:	d002      	beq.n	8011604 <HAL_RTC_AlarmIRQHandler+0x14>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80115fe:	65eb      	str	r3, [r5, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8011600:	f7f6 fe64 	bl	80082cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8011604:	2302      	movs	r3, #2
 8011606:	421e      	tst	r6, r3
 8011608:	d003      	beq.n	8011612 <HAL_RTC_AlarmIRQHandler+0x22>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 801160a:	0020      	movs	r0, r4
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 801160c:	65eb      	str	r3, [r5, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 801160e:	f000 fae1 	bl	8011bd4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011612:	2301      	movs	r3, #1
 8011614:	342d      	adds	r4, #45	@ 0x2d
 8011616:	7023      	strb	r3, [r4, #0]
}
 8011618:	bd70      	pop	{r4, r5, r6, pc}
 801161a:	46c0      	nop			@ (mov r8, r8)
 801161c:	40002800 	.word	0x40002800

08011620 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8011620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011622:	2620      	movs	r6, #32
 8011624:	4c0a      	ldr	r4, [pc, #40]	@ (8011650 <HAL_RTC_WaitForSynchro+0x30>)
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011626:	27fa      	movs	r7, #250	@ 0xfa
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011628:	68e3      	ldr	r3, [r4, #12]
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801162a:	00bf      	lsls	r7, r7, #2
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 801162c:	43b3      	bics	r3, r6
 801162e:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 8011630:	f7fc fbd4 	bl	800dddc <HAL_GetTick>
 8011634:	0005      	movs	r5, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011636:	68e3      	ldr	r3, [r4, #12]
 8011638:	4233      	tst	r3, r6
 801163a:	d001      	beq.n	8011640 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 801163c:	2000      	movs	r0, #0
}
 801163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011640:	f7fc fbcc 	bl	800dddc <HAL_GetTick>
 8011644:	1b40      	subs	r0, r0, r5
 8011646:	42b8      	cmp	r0, r7
 8011648:	d9f5      	bls.n	8011636 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 801164a:	2003      	movs	r0, #3
 801164c:	e7f7      	b.n	801163e <HAL_RTC_WaitForSynchro+0x1e>
 801164e:	46c0      	nop			@ (mov r8, r8)
 8011650:	40002800 	.word	0x40002800

08011654 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8011654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011656:	2640      	movs	r6, #64	@ 0x40
 8011658:	4c0c      	ldr	r4, [pc, #48]	@ (801168c <RTC_EnterInitMode+0x38>)
 801165a:	68e3      	ldr	r3, [r4, #12]
 801165c:	4233      	tst	r3, r6
 801165e:	d001      	beq.n	8011664 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8011660:	2000      	movs	r0, #0
}
 8011662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011664:	2380      	movs	r3, #128	@ 0x80
 8011666:	68e2      	ldr	r2, [r4, #12]
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011668:	27fa      	movs	r7, #250	@ 0xfa
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801166a:	4313      	orrs	r3, r2
 801166c:	60e3      	str	r3, [r4, #12]
    tickstart = HAL_GetTick();
 801166e:	f7fc fbb5 	bl	800dddc <HAL_GetTick>
 8011672:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011674:	00bf      	lsls	r7, r7, #2
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011676:	68e3      	ldr	r3, [r4, #12]
 8011678:	4233      	tst	r3, r6
 801167a:	d1f1      	bne.n	8011660 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801167c:	f7fc fbae 	bl	800dddc <HAL_GetTick>
 8011680:	1b40      	subs	r0, r0, r5
 8011682:	42b8      	cmp	r0, r7
 8011684:	d9f7      	bls.n	8011676 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011686:	2003      	movs	r0, #3
 8011688:	e7eb      	b.n	8011662 <RTC_EnterInitMode+0xe>
 801168a:	46c0      	nop			@ (mov r8, r8)
 801168c:	40002800 	.word	0x40002800

08011690 <HAL_RTC_Init>:
{
 8011690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011692:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 8011694:	d01a      	beq.n	80116cc <HAL_RTC_Init+0x3c>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011696:	0007      	movs	r7, r0
 8011698:	372d      	adds	r7, #45	@ 0x2d
 801169a:	783b      	ldrb	r3, [r7, #0]
 801169c:	b2da      	uxtb	r2, r3
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d104      	bne.n	80116ac <HAL_RTC_Init+0x1c>
      hrtc->Lock = HAL_UNLOCKED;
 80116a2:	0003      	movs	r3, r0
 80116a4:	332c      	adds	r3, #44	@ 0x2c
 80116a6:	701a      	strb	r2, [r3, #0]
      HAL_RTC_MspInit(hrtc);
 80116a8:	f7f8 fcf2 	bl	800a090 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80116ac:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116ae:	4d23      	ldr	r5, [pc, #140]	@ (801173c <HAL_RTC_Init+0xac>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 80116b0:	703b      	strb	r3, [r7, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116b2:	33c8      	adds	r3, #200	@ 0xc8
 80116b4:	626b      	str	r3, [r5, #36]	@ 0x24
 80116b6:	3b77      	subs	r3, #119	@ 0x77
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80116b8:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116ba:	626b      	str	r3, [r5, #36]	@ 0x24
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80116bc:	f7ff ffca 	bl	8011654 <RTC_EnterInitMode>
 80116c0:	1e06      	subs	r6, r0, #0
 80116c2:	d006      	beq.n	80116d2 <HAL_RTC_Init+0x42>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80116c4:	23ff      	movs	r3, #255	@ 0xff
 80116c6:	626b      	str	r3, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 80116c8:	3bfb      	subs	r3, #251	@ 0xfb
 80116ca:	703b      	strb	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80116cc:	2601      	movs	r6, #1
}
 80116ce:	0030      	movs	r0, r6
 80116d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80116d2:	69ab      	ldr	r3, [r5, #24]
 80116d4:	4a1a      	ldr	r2, [pc, #104]	@ (8011740 <HAL_RTC_Init+0xb0>)
 80116d6:	4013      	ands	r3, r2
 80116d8:	61ab      	str	r3, [r5, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80116da:	6921      	ldr	r1, [r4, #16]
 80116dc:	6863      	ldr	r3, [r4, #4]
 80116de:	69aa      	ldr	r2, [r5, #24]
 80116e0:	430b      	orrs	r3, r1
 80116e2:	4313      	orrs	r3, r2
 80116e4:	69a2      	ldr	r2, [r4, #24]
 80116e6:	4313      	orrs	r3, r2
 80116e8:	61ab      	str	r3, [r5, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80116ea:	68a3      	ldr	r3, [r4, #8]
 80116ec:	68e2      	ldr	r2, [r4, #12]
 80116ee:	041b      	lsls	r3, r3, #16
 80116f0:	4313      	orrs	r3, r2
 80116f2:	612b      	str	r3, [r5, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80116f4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80116f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80116f8:	68ea      	ldr	r2, [r5, #12]
 80116fa:	430b      	orrs	r3, r1
 80116fc:	4911      	ldr	r1, [pc, #68]	@ (8011744 <HAL_RTC_Init+0xb4>)
 80116fe:	400a      	ands	r2, r1
 8011700:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011702:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011704:	60eb      	str	r3, [r5, #12]
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011706:	68eb      	ldr	r3, [r5, #12]
 8011708:	4393      	bics	r3, r2
 801170a:	60eb      	str	r3, [r5, #12]
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801170c:	69ab      	ldr	r3, [r5, #24]
 801170e:	069b      	lsls	r3, r3, #26
 8011710:	d404      	bmi.n	801171c <HAL_RTC_Init+0x8c>
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011712:	0020      	movs	r0, r4
 8011714:	f7ff ff84 	bl	8011620 <HAL_RTC_WaitForSynchro>
 8011718:	2800      	cmp	r0, #0
 801171a:	d1d3      	bne.n	80116c4 <HAL_RTC_Init+0x34>
        MODIFY_REG(RTC->CR, \
 801171c:	69aa      	ldr	r2, [r5, #24]
 801171e:	6a23      	ldr	r3, [r4, #32]
 8011720:	69e1      	ldr	r1, [r4, #28]
 8011722:	00d2      	lsls	r2, r2, #3
 8011724:	08d2      	lsrs	r2, r2, #3
 8011726:	430b      	orrs	r3, r1
 8011728:	4313      	orrs	r3, r2
 801172a:	6962      	ldr	r2, [r4, #20]
 801172c:	4313      	orrs	r3, r2
 801172e:	61ab      	str	r3, [r5, #24]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011730:	23ff      	movs	r3, #255	@ 0xff
 8011732:	626b      	str	r3, [r5, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8011734:	3bfe      	subs	r3, #254	@ 0xfe
 8011736:	703b      	strb	r3, [r7, #0]
 8011738:	e7c9      	b.n	80116ce <HAL_RTC_Init+0x3e>
 801173a:	46c0      	nop			@ (mov r8, r8)
 801173c:	40002800 	.word	0x40002800
 8011740:	fb8fffbf 	.word	0xfb8fffbf
 8011744:	ffffe0ff 	.word	0xffffe0ff

08011748 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8011748:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 801174a:	2809      	cmp	r0, #9
 801174c:	d803      	bhi.n	8011756 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    tmp_Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 801174e:	011b      	lsls	r3, r3, #4
 8011750:	4318      	orrs	r0, r3
 8011752:	b2c0      	uxtb	r0, r0
}
 8011754:	4770      	bx	lr
    tmp_Value -= 10U;
 8011756:	380a      	subs	r0, #10
    bcdhigh++;
 8011758:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 801175a:	b2c0      	uxtb	r0, r0
 801175c:	e7f5      	b.n	801174a <RTC_ByteToBcd2+0x2>
	...

08011760 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8011760:	0003      	movs	r3, r0
{
 8011762:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011764:	332c      	adds	r3, #44	@ 0x2c
{
 8011766:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8011768:	9300      	str	r3, [sp, #0]
{
 801176a:	9001      	str	r0, [sp, #4]
 801176c:	0017      	movs	r7, r2
  __HAL_LOCK(hrtc);
 801176e:	781a      	ldrb	r2, [r3, #0]
 8011770:	2302      	movs	r3, #2
{
 8011772:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011774:	001e      	movs	r6, r3
 8011776:	2a01      	cmp	r2, #1
 8011778:	d019      	beq.n	80117ae <HAL_RTC_SetTime+0x4e>
 801177a:	2201      	movs	r2, #1
 801177c:	9900      	ldr	r1, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801177e:	4c3c      	ldr	r4, [pc, #240]	@ (8011870 <HAL_RTC_SetTime+0x110>)
  __HAL_LOCK(hrtc);
 8011780:	700a      	strb	r2, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011782:	0002      	movs	r2, r0
 8011784:	322d      	adds	r2, #45	@ 0x2d
 8011786:	7013      	strb	r3, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011788:	33c8      	adds	r3, #200	@ 0xc8
  hrtc->State = HAL_RTC_STATE_BUSY;
 801178a:	9202      	str	r2, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801178c:	6263      	str	r3, [r4, #36]	@ 0x24
 801178e:	3b77      	subs	r3, #119	@ 0x77
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011790:	9801      	ldr	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011792:	6263      	str	r3, [r4, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8011794:	f7ff ff5e 	bl	8011654 <RTC_EnterInitMode>
 8011798:	1e06      	subs	r6, r0, #0
 801179a:	d00b      	beq.n	80117b4 <HAL_RTC_SetTime+0x54>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801179c:	23ff      	movs	r3, #255	@ 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 801179e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80117a0:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80117a2:	3bfb      	subs	r3, #251	@ 0xfb
 80117a4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hrtc);
 80117a6:	2300      	movs	r3, #0
 80117a8:	9a00      	ldr	r2, [sp, #0]
 80117aa:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80117ac:	2601      	movs	r6, #1
}
 80117ae:	0030      	movs	r0, r6
 80117b0:	b005      	add	sp, #20
 80117b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80117b4:	22c0      	movs	r2, #192	@ 0xc0
 80117b6:	68e3      	ldr	r3, [r4, #12]
 80117b8:	0092      	lsls	r2, r2, #2
 80117ba:	4013      	ands	r3, r2
 80117bc:	2280      	movs	r2, #128	@ 0x80
 80117be:	0052      	lsls	r2, r2, #1
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d028      	beq.n	8011816 <HAL_RTC_SetTime+0xb6>
      if (Format == RTC_FORMAT_BIN)
 80117c4:	786a      	ldrb	r2, [r5, #1]
 80117c6:	2340      	movs	r3, #64	@ 0x40
 80117c8:	9203      	str	r2, [sp, #12]
 80117ca:	7828      	ldrb	r0, [r5, #0]
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80117cc:	69a2      	ldr	r2, [r4, #24]
      if (Format == RTC_FORMAT_BIN)
 80117ce:	2f00      	cmp	r7, #0
 80117d0:	d138      	bne.n	8011844 <HAL_RTC_SetTime+0xe4>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80117d2:	421a      	tst	r2, r3
 80117d4:	d100      	bne.n	80117d8 <HAL_RTC_SetTime+0x78>
          sTime->TimeFormat = 0x00U;
 80117d6:	70ee      	strb	r6, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80117d8:	f7ff ffb6 	bl	8011748 <RTC_ByteToBcd2>
 80117dc:	0007      	movs	r7, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80117de:	9803      	ldr	r0, [sp, #12]
 80117e0:	f7ff ffb2 	bl	8011748 <RTC_ByteToBcd2>
 80117e4:	9003      	str	r0, [sp, #12]
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80117e6:	78a8      	ldrb	r0, [r5, #2]
 80117e8:	f7ff ffae 	bl	8011748 <RTC_ByteToBcd2>
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80117ec:	78ea      	ldrb	r2, [r5, #3]
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80117ee:	9b03      	ldr	r3, [sp, #12]
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80117f0:	0592      	lsls	r2, r2, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80117f2:	4310      	orrs	r0, r2
 80117f4:	043f      	lsls	r7, r7, #16
 80117f6:	4338      	orrs	r0, r7
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80117f8:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80117fa:	4318      	orrs	r0, r3
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80117fc:	4b1d      	ldr	r3, [pc, #116]	@ (8011874 <HAL_RTC_SetTime+0x114>)
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80117fe:	4a1e      	ldr	r2, [pc, #120]	@ (8011878 <HAL_RTC_SetTime+0x118>)
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011800:	4018      	ands	r0, r3
 8011802:	6020      	str	r0, [r4, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011804:	69a3      	ldr	r3, [r4, #24]
 8011806:	4013      	ands	r3, r2
 8011808:	61a3      	str	r3, [r4, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 801180a:	68eb      	ldr	r3, [r5, #12]
 801180c:	6929      	ldr	r1, [r5, #16]
 801180e:	69a2      	ldr	r2, [r4, #24]
 8011810:	430b      	orrs	r3, r1
 8011812:	4313      	orrs	r3, r2
 8011814:	61a3      	str	r3, [r4, #24]
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011816:	2280      	movs	r2, #128	@ 0x80
 8011818:	68e3      	ldr	r3, [r4, #12]
 801181a:	4393      	bics	r3, r2
 801181c:	60e3      	str	r3, [r4, #12]
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801181e:	69a2      	ldr	r2, [r4, #24]
 8011820:	2320      	movs	r3, #32
 8011822:	0015      	movs	r5, r2
 8011824:	401d      	ands	r5, r3
 8011826:	421a      	tst	r2, r3
 8011828:	d118      	bne.n	801185c <HAL_RTC_SetTime+0xfc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801182a:	9801      	ldr	r0, [sp, #4]
 801182c:	f7ff fef8 	bl	8011620 <HAL_RTC_WaitForSynchro>
 8011830:	2800      	cmp	r0, #0
 8011832:	d013      	beq.n	801185c <HAL_RTC_SetTime+0xfc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011834:	23ff      	movs	r3, #255	@ 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011836:	9a02      	ldr	r2, [sp, #8]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011838:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801183a:	3bfb      	subs	r3, #251	@ 0xfb
 801183c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hrtc);
 801183e:	9b00      	ldr	r3, [sp, #0]
 8011840:	701d      	strb	r5, [r3, #0]
        return HAL_ERROR;
 8011842:	e7b3      	b.n	80117ac <HAL_RTC_SetTime+0x4c>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011844:	421a      	tst	r2, r3
 8011846:	d100      	bne.n	801184a <HAL_RTC_SetTime+0xea>
          sTime->TimeFormat = 0x00U;
 8011848:	70ee      	strb	r6, [r5, #3]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801184a:	9b03      	ldr	r3, [sp, #12]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801184c:	0400      	lsls	r0, r0, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801184e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011850:	4318      	orrs	r0, r3
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011852:	78ab      	ldrb	r3, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011854:	4318      	orrs	r0, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011856:	78eb      	ldrb	r3, [r5, #3]
 8011858:	059b      	lsls	r3, r3, #22
 801185a:	e7ce      	b.n	80117fa <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801185c:	23ff      	movs	r3, #255	@ 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 801185e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011860:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011862:	3bfe      	subs	r3, #254	@ 0xfe
 8011864:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hrtc);
 8011866:	2300      	movs	r3, #0
 8011868:	9a00      	ldr	r2, [sp, #0]
 801186a:	7013      	strb	r3, [r2, #0]
    return HAL_OK;
 801186c:	e79f      	b.n	80117ae <HAL_RTC_SetTime+0x4e>
 801186e:	46c0      	nop			@ (mov r8, r8)
 8011870:	40002800 	.word	0x40002800
 8011874:	007f7f7f 	.word	0x007f7f7f
 8011878:	fffbffff 	.word	0xfffbffff

0801187c <HAL_RTC_SetDate>:
{
 801187c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801187e:	0007      	movs	r7, r0
 8011880:	2302      	movs	r3, #2
{
 8011882:	b085      	sub	sp, #20
 8011884:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hrtc);
 8011886:	372c      	adds	r7, #44	@ 0x2c
{
 8011888:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 801188a:	7839      	ldrb	r1, [r7, #0]
 801188c:	001d      	movs	r5, r3
 801188e:	2901      	cmp	r1, #1
 8011890:	d023      	beq.n	80118da <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011892:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 8011894:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011896:	362d      	adds	r6, #45	@ 0x2d
  __HAL_LOCK(hrtc);
 8011898:	7039      	strb	r1, [r7, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801189a:	7033      	strb	r3, [r6, #0]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 801189c:	78a1      	ldrb	r1, [r4, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801189e:	7825      	ldrb	r5, [r4, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80118a0:	78e0      	ldrb	r0, [r4, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80118a2:	7863      	ldrb	r3, [r4, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80118a4:	036d      	lsls	r5, r5, #13
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80118a6:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80118a8:	2a00      	cmp	r2, #0
 80118aa:	d019      	beq.n	80118e0 <HAL_RTC_SetDate+0x64>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80118ac:	0400      	lsls	r0, r0, #16
 80118ae:	4328      	orrs	r0, r5
 80118b0:	4308      	orrs	r0, r1
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80118b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80118b4:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118b6:	23ca      	movs	r3, #202	@ 0xca
 80118b8:	4c25      	ldr	r4, [pc, #148]	@ (8011950 <HAL_RTC_SetDate+0xd4>)
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80118ba:	9002      	str	r0, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80118be:	3b77      	subs	r3, #119	@ 0x77
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80118c0:	9801      	ldr	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118c2:	6263      	str	r3, [r4, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80118c4:	f7ff fec6 	bl	8011654 <RTC_EnterInitMode>
 80118c8:	1e05      	subs	r5, r0, #0
 80118ca:	d020      	beq.n	801190e <HAL_RTC_SetDate+0x92>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80118cc:	23ff      	movs	r3, #255	@ 0xff
 80118ce:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80118d0:	3bfb      	subs	r3, #251	@ 0xfb
 80118d2:	7033      	strb	r3, [r6, #0]
    __HAL_UNLOCK(hrtc);
 80118d4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80118d6:	2501      	movs	r5, #1
        __HAL_UNLOCK(hrtc);
 80118d8:	703b      	strb	r3, [r7, #0]
}
 80118da:	0028      	movs	r0, r5
 80118dc:	b005      	add	sp, #20
 80118de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80118e0:	2210      	movs	r2, #16
 80118e2:	4213      	tst	r3, r2
 80118e4:	d002      	beq.n	80118ec <HAL_RTC_SetDate+0x70>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80118e6:	4393      	bics	r3, r2
 80118e8:	330a      	adds	r3, #10
 80118ea:	7063      	strb	r3, [r4, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80118ec:	f7ff ff2c 	bl	8011748 <RTC_ByteToBcd2>
 80118f0:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80118f2:	7860      	ldrb	r0, [r4, #1]
 80118f4:	f7ff ff28 	bl	8011748 <RTC_ByteToBcd2>
 80118f8:	0004      	movs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80118fa:	9802      	ldr	r0, [sp, #8]
 80118fc:	f7ff ff24 	bl	8011748 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011900:	9b03      	ldr	r3, [sp, #12]
 8011902:	4328      	orrs	r0, r5
 8011904:	041b      	lsls	r3, r3, #16
 8011906:	4318      	orrs	r0, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011908:	0224      	lsls	r4, r4, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801190a:	4320      	orrs	r0, r4
 801190c:	e7d3      	b.n	80118b6 <HAL_RTC_SetDate+0x3a>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 801190e:	9a02      	ldr	r2, [sp, #8]
 8011910:	4b10      	ldr	r3, [pc, #64]	@ (8011954 <HAL_RTC_SetDate+0xd8>)
 8011912:	401a      	ands	r2, r3
 8011914:	6062      	str	r2, [r4, #4]
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011916:	2280      	movs	r2, #128	@ 0x80
 8011918:	68e3      	ldr	r3, [r4, #12]
 801191a:	4393      	bics	r3, r2
 801191c:	60e3      	str	r3, [r4, #12]
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801191e:	69a2      	ldr	r2, [r4, #24]
 8011920:	2320      	movs	r3, #32
 8011922:	0011      	movs	r1, r2
 8011924:	4019      	ands	r1, r3
 8011926:	9102      	str	r1, [sp, #8]
 8011928:	421a      	tst	r2, r3
 801192a:	d10a      	bne.n	8011942 <HAL_RTC_SetDate+0xc6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801192c:	9801      	ldr	r0, [sp, #4]
 801192e:	f7ff fe77 	bl	8011620 <HAL_RTC_WaitForSynchro>
 8011932:	2800      	cmp	r0, #0
 8011934:	d005      	beq.n	8011942 <HAL_RTC_SetDate+0xc6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011936:	23ff      	movs	r3, #255	@ 0xff
 8011938:	6263      	str	r3, [r4, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801193a:	3bfb      	subs	r3, #251	@ 0xfb
 801193c:	7033      	strb	r3, [r6, #0]
        __HAL_UNLOCK(hrtc);
 801193e:	9b02      	ldr	r3, [sp, #8]
 8011940:	e7c9      	b.n	80118d6 <HAL_RTC_SetDate+0x5a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011942:	23ff      	movs	r3, #255	@ 0xff
 8011944:	6263      	str	r3, [r4, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011946:	3bfe      	subs	r3, #254	@ 0xfe
 8011948:	7033      	strb	r3, [r6, #0]
    __HAL_UNLOCK(hrtc);
 801194a:	2300      	movs	r3, #0
 801194c:	703b      	strb	r3, [r7, #0]
    return HAL_OK;
 801194e:	e7c4      	b.n	80118da <HAL_RTC_SetDate+0x5e>
 8011950:	40002800 	.word	0x40002800
 8011954:	00ffff3f 	.word	0x00ffff3f

08011958 <HAL_RTC_SetAlarm_IT>:
{
 8011958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801195a:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 801195c:	0001      	movs	r1, r0
 801195e:	2302      	movs	r3, #2
 8011960:	312c      	adds	r1, #44	@ 0x2c
 8011962:	780c      	ldrb	r4, [r1, #0]
{
 8011964:	0007      	movs	r7, r0
 8011966:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8011968:	0018      	movs	r0, r3
 801196a:	2c01      	cmp	r4, #1
 801196c:	d060      	beq.n	8011a30 <HAL_RTC_SetAlarm_IT+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 801196e:	704b      	strb	r3, [r1, #1]
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011970:	23c0      	movs	r3, #192	@ 0xc0
  __HAL_LOCK(hrtc);
 8011972:	3801      	subs	r0, #1
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011974:	4c4d      	ldr	r4, [pc, #308]	@ (8011aac <HAL_RTC_SetAlarm_IT+0x154>)
  __HAL_LOCK(hrtc);
 8011976:	7008      	strb	r0, [r1, #0]
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011978:	68e1      	ldr	r1, [r4, #12]
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	4019      	ands	r1, r3
  if (binaryMode != RTC_BINARY_ONLY)
 801197e:	2380      	movs	r3, #128	@ 0x80
  uint32_t tmpreg = 0;
 8011980:	2000      	movs	r0, #0
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8011982:	9100      	str	r1, [sp, #0]
  if (binaryMode != RTC_BINARY_ONLY)
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	4299      	cmp	r1, r3
 8011988:	d02a      	beq.n	80119e0 <HAL_RTC_SetAlarm_IT+0x88>
    if (Format == RTC_FORMAT_BIN)
 801198a:	78a9      	ldrb	r1, [r5, #2]
 801198c:	786e      	ldrb	r6, [r5, #1]
 801198e:	7828      	ldrb	r0, [r5, #0]
 8011990:	3bc0      	subs	r3, #192	@ 0xc0
 8011992:	9101      	str	r1, [sp, #4]
 8011994:	2a00      	cmp	r2, #0
 8011996:	d14d      	bne.n	8011a34 <HAL_RTC_SetAlarm_IT+0xdc>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011998:	69a2      	ldr	r2, [r4, #24]
 801199a:	0011      	movs	r1, r2
 801199c:	4019      	ands	r1, r3
 801199e:	421a      	tst	r2, r3
 80119a0:	d100      	bne.n	80119a4 <HAL_RTC_SetAlarm_IT+0x4c>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80119a2:	70e9      	strb	r1, [r5, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80119a4:	f7ff fed0 	bl	8011748 <RTC_ByteToBcd2>
 80119a8:	9002      	str	r0, [sp, #8]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80119aa:	0030      	movs	r0, r6
 80119ac:	f7ff fecc 	bl	8011748 <RTC_ByteToBcd2>
 80119b0:	9003      	str	r0, [sp, #12]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80119b2:	9801      	ldr	r0, [sp, #4]
 80119b4:	f7ff fec8 	bl	8011748 <RTC_ByteToBcd2>
 80119b8:	0006      	movs	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80119ba:	1d6b      	adds	r3, r5, #5
 80119bc:	7fd8      	ldrb	r0, [r3, #31]
 80119be:	f7ff fec3 	bl	8011748 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80119c2:	696a      	ldr	r2, [r5, #20]
 80119c4:	6a2b      	ldr	r3, [r5, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80119c6:	0600      	lsls	r0, r0, #24
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80119c8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80119ca:	78ea      	ldrb	r2, [r5, #3]
 80119cc:	0592      	lsls	r2, r2, #22
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80119ce:	4313      	orrs	r3, r2
 80119d0:	9a02      	ldr	r2, [sp, #8]
 80119d2:	4333      	orrs	r3, r6
 80119d4:	0412      	lsls	r2, r2, #16
 80119d6:	4313      	orrs	r3, r2
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80119d8:	9a03      	ldr	r2, [sp, #12]
 80119da:	0212      	lsls	r2, r2, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80119dc:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80119de:	4318      	orrs	r0, r3
  if (sAlarm->Alarm == RTC_ALARM_A)
 80119e0:	2180      	movs	r1, #128	@ 0x80
 80119e2:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80119e4:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80119e6:	69a2      	ldr	r2, [r4, #24]
  if (sAlarm->Alarm == RTC_ALARM_A)
 80119e8:	0049      	lsls	r1, r1, #1
 80119ea:	428e      	cmp	r6, r1
 80119ec:	d13e      	bne.n	8011a6c <HAL_RTC_SetAlarm_IT+0x114>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80119ee:	4930      	ldr	r1, [pc, #192]	@ (8011ab0 <HAL_RTC_SetAlarm_IT+0x158>)
 80119f0:	400a      	ands	r2, r1
 80119f2:	61a2      	str	r2, [r4, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80119f4:	2201      	movs	r2, #1
 80119f6:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80119f8:	9a00      	ldr	r2, [sp, #0]
 80119fa:	42b2      	cmp	r2, r6
 80119fc:	d130      	bne.n	8011a60 <HAL_RTC_SetAlarm_IT+0x108>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80119fe:	69ea      	ldr	r2, [r5, #28]
 8011a00:	4313      	orrs	r3, r2
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8011a02:	6463      	str	r3, [r4, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8011a04:	686b      	ldr	r3, [r5, #4]
 8011a06:	6723      	str	r3, [r4, #112]	@ 0x70
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8011a08:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d12a      	bne.n	8011a64 <HAL_RTC_SetAlarm_IT+0x10c>
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8011a0e:	2380      	movs	r3, #128	@ 0x80
 8011a10:	69a2      	ldr	r2, [r4, #24]
 8011a12:	051b      	lsls	r3, r3, #20
 8011a14:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8011a16:	61a3      	str	r3, [r4, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8011a18:	2388      	movs	r3, #136	@ 0x88
 8011a1a:	69a2      	ldr	r2, [r4, #24]
 8011a1c:	015b      	lsls	r3, r3, #5
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	61a3      	str	r3, [r4, #24]
  hrtc->State = HAL_RTC_STATE_READY;
 8011a22:	003b      	movs	r3, r7
 8011a24:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8011a26:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8011a28:	332d      	adds	r3, #45	@ 0x2d
 8011a2a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	7018      	strb	r0, [r3, #0]
}
 8011a30:	b005      	add	sp, #20
 8011a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011a34:	69a2      	ldr	r2, [r4, #24]
 8011a36:	0011      	movs	r1, r2
 8011a38:	4019      	ands	r1, r3
 8011a3a:	421a      	tst	r2, r3
 8011a3c:	d100      	bne.n	8011a40 <HAL_RTC_SetAlarm_IT+0xe8>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011a3e:	70e9      	strb	r1, [r5, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011a40:	696a      	ldr	r2, [r5, #20]
 8011a42:	6a2b      	ldr	r3, [r5, #32]
 8011a44:	0400      	lsls	r0, r0, #16
 8011a46:	4313      	orrs	r3, r2
 8011a48:	9a01      	ldr	r2, [sp, #4]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011a4a:	0236      	lsls	r6, r6, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011a50:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011a52:	4330      	orrs	r0, r6
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011a54:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011a56:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011a58:	1d6b      	adds	r3, r5, #5
 8011a5a:	7fdb      	ldrb	r3, [r3, #31]
 8011a5c:	061b      	lsls	r3, r3, #24
 8011a5e:	e7be      	b.n	80119de <HAL_RTC_SetAlarm_IT+0x86>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8011a60:	6420      	str	r0, [r4, #64]	@ 0x40
 8011a62:	e7ce      	b.n	8011a02 <HAL_RTC_SetAlarm_IT+0xaa>
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8011a64:	69a3      	ldr	r3, [r4, #24]
 8011a66:	4a13      	ldr	r2, [pc, #76]	@ (8011ab4 <HAL_RTC_SetAlarm_IT+0x15c>)
 8011a68:	4013      	ands	r3, r2
 8011a6a:	e7d4      	b.n	8011a16 <HAL_RTC_SetAlarm_IT+0xbe>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011a6c:	4e12      	ldr	r6, [pc, #72]	@ (8011ab8 <HAL_RTC_SetAlarm_IT+0x160>)
 8011a6e:	4032      	ands	r2, r6
 8011a70:	61a2      	str	r2, [r4, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8011a72:	2202      	movs	r2, #2
 8011a74:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8011a76:	9a00      	ldr	r2, [sp, #0]
 8011a78:	428a      	cmp	r2, r1
 8011a7a:	d110      	bne.n	8011a9e <HAL_RTC_SetAlarm_IT+0x146>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8011a7c:	69ea      	ldr	r2, [r5, #28]
 8011a7e:	4313      	orrs	r3, r2
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8011a80:	64e3      	str	r3, [r4, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8011a82:	686b      	ldr	r3, [r5, #4]
 8011a84:	6763      	str	r3, [r4, #116]	@ 0x74
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8011a86:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d10a      	bne.n	8011aa2 <HAL_RTC_SetAlarm_IT+0x14a>
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8011a8c:	2380      	movs	r3, #128	@ 0x80
 8011a8e:	69a2      	ldr	r2, [r4, #24]
 8011a90:	055b      	lsls	r3, r3, #21
 8011a92:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8011a94:	61a3      	str	r3, [r4, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011a96:	2388      	movs	r3, #136	@ 0x88
 8011a98:	69a2      	ldr	r2, [r4, #24]
 8011a9a:	019b      	lsls	r3, r3, #6
 8011a9c:	e7bf      	b.n	8011a1e <HAL_RTC_SetAlarm_IT+0xc6>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8011a9e:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011aa0:	e7ee      	b.n	8011a80 <HAL_RTC_SetAlarm_IT+0x128>
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 8011aa2:	69a3      	ldr	r3, [r4, #24]
 8011aa4:	4a05      	ldr	r2, [pc, #20]	@ (8011abc <HAL_RTC_SetAlarm_IT+0x164>)
 8011aa6:	4013      	ands	r3, r2
 8011aa8:	e7f4      	b.n	8011a94 <HAL_RTC_SetAlarm_IT+0x13c>
 8011aaa:	46c0      	nop			@ (mov r8, r8)
 8011aac:	40002800 	.word	0x40002800
 8011ab0:	ffffeeff 	.word	0xffffeeff
 8011ab4:	f7ffffff 	.word	0xf7ffffff
 8011ab8:	ffffddff 	.word	0xffffddff
 8011abc:	efffffff 	.word	0xefffffff

08011ac0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8011ac0:	0903      	lsrs	r3, r0, #4
{
 8011ac2:	0002      	movs	r2, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8011ac4:	200a      	movs	r0, #10
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8011ac6:	210f      	movs	r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8011ac8:	4358      	muls	r0, r3
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8011aca:	400a      	ands	r2, r1
 8011acc:	1880      	adds	r0, r0, r2
 8011ace:	b2c0      	uxtb	r0, r0
}
 8011ad0:	4770      	bx	lr
	...

08011ad4 <HAL_RTC_GetTime>:
{
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	000c      	movs	r4, r1
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011ad8:	20c0      	movs	r0, #192	@ 0xc0
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8011ada:	4915      	ldr	r1, [pc, #84]	@ (8011b30 <HAL_RTC_GetTime+0x5c>)
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011adc:	0080      	lsls	r0, r0, #2
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8011ade:	688b      	ldr	r3, [r1, #8]
 8011ae0:	6063      	str	r3, [r4, #4]
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011ae2:	68cb      	ldr	r3, [r1, #12]
 8011ae4:	4003      	ands	r3, r0
 8011ae6:	2080      	movs	r0, #128	@ 0x80
 8011ae8:	0040      	lsls	r0, r0, #1
 8011aea:	4283      	cmp	r3, r0
 8011aec:	d01d      	beq.n	8011b2a <HAL_RTC_GetTime+0x56>
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8011aee:	690b      	ldr	r3, [r1, #16]
 8011af0:	045b      	lsls	r3, r3, #17
 8011af2:	0c5b      	lsrs	r3, r3, #17
 8011af4:	60a3      	str	r3, [r4, #8]
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8011af6:	680b      	ldr	r3, [r1, #0]
 8011af8:	490e      	ldr	r1, [pc, #56]	@ (8011b34 <HAL_RTC_GetTime+0x60>)
 8011afa:	400b      	ands	r3, r1
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011afc:	0298      	lsls	r0, r3, #10
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011afe:	0a1d      	lsrs	r5, r3, #8
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011b00:	b2de      	uxtb	r6, r3
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011b02:	0e80      	lsrs	r0, r0, #26
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011b04:	b2ed      	uxtb	r5, r5
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011b06:	0d9b      	lsrs	r3, r3, #22
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011b08:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011b0a:	7065      	strb	r5, [r4, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011b0c:	70a6      	strb	r6, [r4, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011b0e:	70e3      	strb	r3, [r4, #3]
    if (Format == RTC_FORMAT_BIN)
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	d10a      	bne.n	8011b2a <HAL_RTC_GetTime+0x56>
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011b14:	f7ff ffd4 	bl	8011ac0 <RTC_Bcd2ToByte>
 8011b18:	7020      	strb	r0, [r4, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011b1a:	0028      	movs	r0, r5
 8011b1c:	f7ff ffd0 	bl	8011ac0 <RTC_Bcd2ToByte>
 8011b20:	7060      	strb	r0, [r4, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011b22:	0030      	movs	r0, r6
 8011b24:	f7ff ffcc 	bl	8011ac0 <RTC_Bcd2ToByte>
 8011b28:	70a0      	strb	r0, [r4, #2]
}
 8011b2a:	2000      	movs	r0, #0
 8011b2c:	bd70      	pop	{r4, r5, r6, pc}
 8011b2e:	46c0      	nop			@ (mov r8, r8)
 8011b30:	40002800 	.word	0x40002800
 8011b34:	007f7f7f 	.word	0x007f7f7f

08011b38 <HAL_RTC_GetDate>:
{
 8011b38:	b570      	push	{r4, r5, r6, lr}
 8011b3a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8011b78 <HAL_RTC_GetDate+0x40>)
 8011b3e:	490f      	ldr	r1, [pc, #60]	@ (8011b7c <HAL_RTC_GetDate+0x44>)
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011b44:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011b46:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011b48:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011b4a:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011b4c:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011b4e:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011b50:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011b52:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011b54:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011b56:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8011b58:	2a00      	cmp	r2, #0
 8011b5a:	d10a      	bne.n	8011b72 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011b5c:	f7ff ffb0 	bl	8011ac0 <RTC_Bcd2ToByte>
 8011b60:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011b62:	0028      	movs	r0, r5
 8011b64:	f7ff ffac 	bl	8011ac0 <RTC_Bcd2ToByte>
 8011b68:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011b6a:	0030      	movs	r0, r6
 8011b6c:	f7ff ffa8 	bl	8011ac0 <RTC_Bcd2ToByte>
 8011b70:	70a0      	strb	r0, [r4, #2]
}
 8011b72:	2000      	movs	r0, #0
 8011b74:	bd70      	pop	{r4, r5, r6, pc}
 8011b76:	46c0      	nop			@ (mov r8, r8)
 8011b78:	40002800 	.word	0x40002800
 8011b7c:	00ffff3f 	.word	0x00ffff3f

08011b80 <HAL_RTCEx_DeactivateWakeUpTimer>:
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b80:	0001      	movs	r1, r0
 8011b82:	2202      	movs	r2, #2
{
 8011b84:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8011b86:	312c      	adds	r1, #44	@ 0x2c
 8011b88:	780c      	ldrb	r4, [r1, #0]
{
 8011b8a:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8011b8c:	0010      	movs	r0, r2
 8011b8e:	2c01      	cmp	r4, #1
 8011b90:	d00a      	beq.n	8011ba8 <HAL_RTCEx_DeactivateWakeUpTimer+0x28>
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8011b92:	4806      	ldr	r0, [pc, #24]	@ (8011bac <HAL_RTCEx_DeactivateWakeUpTimer+0x2c>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b94:	332d      	adds	r3, #45	@ 0x2d
 8011b96:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8011b98:	6982      	ldr	r2, [r0, #24]
 8011b9a:	4c05      	ldr	r4, [pc, #20]	@ (8011bb0 <HAL_RTCEx_DeactivateWakeUpTimer+0x30>)
 8011b9c:	4022      	ands	r2, r4
 8011b9e:	6182      	str	r2, [r0, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011ba0:	2201      	movs	r2, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011ba2:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8011ba4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8011ba6:	7008      	strb	r0, [r1, #0]

  return HAL_OK;
}
 8011ba8:	bd10      	pop	{r4, pc}
 8011baa:	46c0      	nop			@ (mov r8, r8)
 8011bac:	40002800 	.word	0x40002800
 8011bb0:	ffffbbff 	.word	0xffffbbff

08011bb4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8011bb4:	2204      	movs	r2, #4
 8011bb6:	4b06      	ldr	r3, [pc, #24]	@ (8011bd0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>)
{
 8011bb8:	b510      	push	{r4, lr}
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8011bba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
{
 8011bbc:	0004      	movs	r4, r0
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8011bbe:	4211      	tst	r1, r2
 8011bc0:	d002      	beq.n	8011bc8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x14>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8011bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8011bc4:	f7f6 fb60 	bl	8008288 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011bc8:	2301      	movs	r3, #1
 8011bca:	342d      	adds	r4, #45	@ 0x2d
 8011bcc:	7023      	strb	r3, [r4, #0]
}
 8011bce:	bd10      	pop	{r4, pc}
 8011bd0:	40002800 	.word	0x40002800

08011bd4 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8011bd4:	4770      	bx	lr

08011bd6 <HAL_RTCEx_Tamper1EventCallback>:
/**
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
 8011bd6:	4770      	bx	lr

08011bd8 <HAL_RTCEx_Tamper2EventCallback>:
/**
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
 8011bd8:	4770      	bx	lr

08011bda <HAL_RTCEx_Tamper3EventCallback>:
/**
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
 8011bda:	4770      	bx	lr

08011bdc <HAL_RTCEx_Tamper4EventCallback>:
/**
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
 8011bdc:	4770      	bx	lr

08011bde <HAL_RTCEx_Tamper5EventCallback>:
/**
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
 8011bde:	4770      	bx	lr

08011be0 <HAL_RTCEx_InternalTamper3EventCallback>:
/**
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
 8011be0:	4770      	bx	lr

08011be2 <HAL_RTCEx_InternalTamper4EventCallback>:
/**
  * @brief  Internal Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper4EventCallback(RTC_HandleTypeDef *hrtc)
 8011be2:	4770      	bx	lr

08011be4 <HAL_RTCEx_InternalTamper5EventCallback>:
/**
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
 8011be4:	4770      	bx	lr

08011be6 <HAL_RTCEx_InternalTamper6EventCallback>:
/**
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
 8011be6:	4770      	bx	lr

08011be8 <HAL_RTCEx_TamperIRQHandler>:
  uint32_t tmp = READ_REG(TAMP->MISR);
 8011be8:	4b18      	ldr	r3, [pc, #96]	@ (8011c4c <HAL_RTCEx_TamperIRQHandler+0x64>)
{
 8011bea:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = READ_REG(TAMP->MISR);
 8011bec:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
{
 8011bee:	0004      	movs	r4, r0
  WRITE_REG(TAMP->SCR, tmp);
 8011bf0:	63dd      	str	r5, [r3, #60]	@ 0x3c
  if ((tmp & RTC_TAMPER_1) == RTC_TAMPER_1)
 8011bf2:	07eb      	lsls	r3, r5, #31
 8011bf4:	d501      	bpl.n	8011bfa <HAL_RTCEx_TamperIRQHandler+0x12>
    HAL_RTCEx_Tamper1EventCallback(hrtc);
 8011bf6:	f7ff ffee 	bl	8011bd6 <HAL_RTCEx_Tamper1EventCallback>
  if ((tmp & RTC_TAMPER_2) == RTC_TAMPER_2)
 8011bfa:	07ab      	lsls	r3, r5, #30
 8011bfc:	d502      	bpl.n	8011c04 <HAL_RTCEx_TamperIRQHandler+0x1c>
    HAL_RTCEx_Tamper2EventCallback(hrtc);
 8011bfe:	0020      	movs	r0, r4
 8011c00:	f7ff ffea 	bl	8011bd8 <HAL_RTCEx_Tamper2EventCallback>
  if ((tmp & RTC_TAMPER_3) == RTC_TAMPER_3)
 8011c04:	076b      	lsls	r3, r5, #29
 8011c06:	d502      	bpl.n	8011c0e <HAL_RTCEx_TamperIRQHandler+0x26>
    HAL_RTCEx_Tamper3EventCallback(hrtc);
 8011c08:	0020      	movs	r0, r4
 8011c0a:	f7ff ffe6 	bl	8011bda <HAL_RTCEx_Tamper3EventCallback>
  if ((tmp & RTC_TAMPER_4) == RTC_TAMPER_4)
 8011c0e:	072b      	lsls	r3, r5, #28
 8011c10:	d502      	bpl.n	8011c18 <HAL_RTCEx_TamperIRQHandler+0x30>
    HAL_RTCEx_Tamper4EventCallback(hrtc);
 8011c12:	0020      	movs	r0, r4
 8011c14:	f7ff ffe2 	bl	8011bdc <HAL_RTCEx_Tamper4EventCallback>
  if ((tmp & RTC_TAMPER_5) == RTC_TAMPER_5)
 8011c18:	06eb      	lsls	r3, r5, #27
 8011c1a:	d502      	bpl.n	8011c22 <HAL_RTCEx_TamperIRQHandler+0x3a>
    HAL_RTCEx_Tamper5EventCallback(hrtc);
 8011c1c:	0020      	movs	r0, r4
 8011c1e:	f7ff ffde 	bl	8011bde <HAL_RTCEx_Tamper5EventCallback>
  if ((tmp & RTC_INT_TAMPER_3) == RTC_INT_TAMPER_3)
 8011c22:	036b      	lsls	r3, r5, #13
 8011c24:	d502      	bpl.n	8011c2c <HAL_RTCEx_TamperIRQHandler+0x44>
    HAL_RTCEx_InternalTamper3EventCallback(hrtc);
 8011c26:	0020      	movs	r0, r4
 8011c28:	f7ff ffda 	bl	8011be0 <HAL_RTCEx_InternalTamper3EventCallback>
  if ((tmp & RTC_INT_TAMPER_4) == RTC_INT_TAMPER_4)
 8011c2c:	032b      	lsls	r3, r5, #12
 8011c2e:	d502      	bpl.n	8011c36 <HAL_RTCEx_TamperIRQHandler+0x4e>
    HAL_RTCEx_InternalTamper4EventCallback(hrtc);
 8011c30:	0020      	movs	r0, r4
 8011c32:	f7ff ffd6 	bl	8011be2 <HAL_RTCEx_InternalTamper4EventCallback>
  if ((tmp & RTC_INT_TAMPER_5) == RTC_INT_TAMPER_5)
 8011c36:	02eb      	lsls	r3, r5, #11
 8011c38:	d502      	bpl.n	8011c40 <HAL_RTCEx_TamperIRQHandler+0x58>
    HAL_RTCEx_InternalTamper5EventCallback(hrtc);
 8011c3a:	0020      	movs	r0, r4
 8011c3c:	f7ff ffd2 	bl	8011be4 <HAL_RTCEx_InternalTamper5EventCallback>
  if ((tmp & RTC_INT_TAMPER_6) == RTC_INT_TAMPER_6)
 8011c40:	02ad      	lsls	r5, r5, #10
 8011c42:	d502      	bpl.n	8011c4a <HAL_RTCEx_TamperIRQHandler+0x62>
    HAL_RTCEx_InternalTamper6EventCallback(hrtc);
 8011c44:	0020      	movs	r0, r4
 8011c46:	f7ff ffce 	bl	8011be6 <HAL_RTCEx_InternalTamper6EventCallback>
}
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
 8011c4c:	4000b000 	.word	0x4000b000

08011c50 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8011c50:	4b02      	ldr	r3, [pc, #8]	@ (8011c5c <HAL_RTCEx_BKUPWrite+0xc>)
 8011c52:	0089      	lsls	r1, r1, #2
 8011c54:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011c56:	600a      	str	r2, [r1, #0]
}
 8011c58:	4770      	bx	lr
 8011c5a:	46c0      	nop			@ (mov r8, r8)
 8011c5c:	4000b100 	.word	0x4000b100

08011c60 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8011c60:	4b02      	ldr	r3, [pc, #8]	@ (8011c6c <HAL_RTCEx_BKUPRead+0xc>)
 8011c62:	0089      	lsls	r1, r1, #2
 8011c64:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011c66:	6808      	ldr	r0, [r1, #0]
}
 8011c68:	4770      	bx	lr
 8011c6a:	46c0      	nop			@ (mov r8, r8)
 8011c6c:	4000b100 	.word	0x4000b100

08011c70 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8011c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c72:	000e      	movs	r6, r1
 8011c74:	b085      	sub	sp, #20
 8011c76:	0015      	movs	r5, r2
 8011c78:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011c7a:	f7fc f8af 	bl	800dddc <HAL_GetTick>
 8011c7e:	19ad      	adds	r5, r5, r6
 8011c80:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8011c82:	f7fc f8ab 	bl	800dddc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011c86:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011c88:	4b25      	ldr	r3, [pc, #148]	@ (8011d20 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8011c8a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	015b      	lsls	r3, r3, #5
 8011c90:	0d1b      	lsrs	r3, r3, #20
 8011c92:	436b      	muls	r3, r5
 8011c94:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011c96:	6822      	ldr	r2, [r4, #0]
 8011c98:	6893      	ldr	r3, [r2, #8]
 8011c9a:	0018      	movs	r0, r3
 8011c9c:	4038      	ands	r0, r7
 8011c9e:	423b      	tst	r3, r7
 8011ca0:	d032      	beq.n	8011d08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011ca2:	1c73      	adds	r3, r6, #1
 8011ca4:	d0f8      	beq.n	8011c98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011ca6:	f7fc f899 	bl	800dddc <HAL_GetTick>
 8011caa:	9b01      	ldr	r3, [sp, #4]
 8011cac:	1ac0      	subs	r0, r0, r3
 8011cae:	42a8      	cmp	r0, r5
 8011cb0:	d32c      	bcc.n	8011d0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011cb2:	21e0      	movs	r1, #224	@ 0xe0
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	685a      	ldr	r2, [r3, #4]
 8011cb8:	438a      	bics	r2, r1
 8011cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011cbc:	2282      	movs	r2, #130	@ 0x82
 8011cbe:	6861      	ldr	r1, [r4, #4]
 8011cc0:	0052      	lsls	r2, r2, #1
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d10c      	bne.n	8011ce0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8011cc6:	2180      	movs	r1, #128	@ 0x80
 8011cc8:	68a2      	ldr	r2, [r4, #8]
 8011cca:	0209      	lsls	r1, r1, #8
 8011ccc:	428a      	cmp	r2, r1
 8011cce:	d003      	beq.n	8011cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011cd0:	2180      	movs	r1, #128	@ 0x80
 8011cd2:	00c9      	lsls	r1, r1, #3
 8011cd4:	428a      	cmp	r2, r1
 8011cd6:	d103      	bne.n	8011ce0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011cd8:	2140      	movs	r1, #64	@ 0x40
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	438a      	bics	r2, r1
 8011cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011ce0:	2180      	movs	r1, #128	@ 0x80
 8011ce2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011ce4:	0189      	lsls	r1, r1, #6
 8011ce6:	428a      	cmp	r2, r1
 8011ce8:	d106      	bne.n	8011cf8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8011cea:	6819      	ldr	r1, [r3, #0]
 8011cec:	480d      	ldr	r0, [pc, #52]	@ (8011d24 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8011cee:	4001      	ands	r1, r0
 8011cf0:	6019      	str	r1, [r3, #0]
 8011cf2:	6819      	ldr	r1, [r3, #0]
 8011cf4:	430a      	orrs	r2, r1
 8011cf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011cf8:	0023      	movs	r3, r4
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	335d      	adds	r3, #93	@ 0x5d
 8011cfe:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011d00:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8011d02:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8011d04:	345c      	adds	r4, #92	@ 0x5c
 8011d06:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8011d08:	b005      	add	sp, #20
 8011d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8011d0c:	9b03      	ldr	r3, [sp, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d000      	beq.n	8011d14 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 8011d12:	002b      	movs	r3, r5
      count--;
 8011d14:	9a03      	ldr	r2, [sp, #12]
 8011d16:	001d      	movs	r5, r3
 8011d18:	3a01      	subs	r2, #1
 8011d1a:	9203      	str	r2, [sp, #12]
 8011d1c:	e7bb      	b.n	8011c96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8011d1e:	46c0      	nop			@ (mov r8, r8)
 8011d20:	20000050 	.word	0x20000050
 8011d24:	ffffdfff 	.word	0xffffdfff

08011d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8011d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d2a:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011d2c:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8011d2e:	b085      	sub	sp, #20
 8011d30:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8011d32:	ab02      	add	r3, sp, #8
 8011d34:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8011d36:	0004      	movs	r4, r0
 8011d38:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011d3a:	f7fc f84f 	bl	800dddc <HAL_GetTick>
 8011d3e:	19ed      	adds	r5, r5, r7
 8011d40:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8011d42:	f7fc f84b 	bl	800dddc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011d46:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011d48:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8011d4a:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011d4c:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8011df8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4353      	muls	r3, r2
 8011d54:	0d1b      	lsrs	r3, r3, #20
 8011d56:	436b      	muls	r3, r5
 8011d58:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011d5a:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8011d5c:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8011d5e:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8011d60:	688b      	ldr	r3, [r1, #8]
 8011d62:	0018      	movs	r0, r3
 8011d64:	4030      	ands	r0, r6
 8011d66:	4233      	tst	r3, r6
 8011d68:	d03b      	beq.n	8011de2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011d6a:	23c0      	movs	r3, #192	@ 0xc0
 8011d6c:	00db      	lsls	r3, r3, #3
 8011d6e:	429e      	cmp	r6, r3
 8011d70:	d104      	bne.n	8011d7c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8011d72:	9b01      	ldr	r3, [sp, #4]
 8011d74:	7b1b      	ldrb	r3, [r3, #12]
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011d7a:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011d7c:	1c7b      	adds	r3, r7, #1
 8011d7e:	d0ef      	beq.n	8011d60 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011d80:	f7fc f82c 	bl	800dddc <HAL_GetTick>
 8011d84:	9b00      	ldr	r3, [sp, #0]
 8011d86:	1ac0      	subs	r0, r0, r3
 8011d88:	42a8      	cmp	r0, r5
 8011d8a:	d32c      	bcc.n	8011de6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011d8c:	21e0      	movs	r1, #224	@ 0xe0
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	438a      	bics	r2, r1
 8011d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d96:	2282      	movs	r2, #130	@ 0x82
 8011d98:	6861      	ldr	r1, [r4, #4]
 8011d9a:	0052      	lsls	r2, r2, #1
 8011d9c:	4291      	cmp	r1, r2
 8011d9e:	d10c      	bne.n	8011dba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8011da0:	2180      	movs	r1, #128	@ 0x80
 8011da2:	68a2      	ldr	r2, [r4, #8]
 8011da4:	0209      	lsls	r1, r1, #8
 8011da6:	428a      	cmp	r2, r1
 8011da8:	d003      	beq.n	8011db2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011daa:	2180      	movs	r1, #128	@ 0x80
 8011dac:	00c9      	lsls	r1, r1, #3
 8011dae:	428a      	cmp	r2, r1
 8011db0:	d103      	bne.n	8011dba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011db2:	2140      	movs	r1, #64	@ 0x40
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	438a      	bics	r2, r1
 8011db8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011dba:	2180      	movs	r1, #128	@ 0x80
 8011dbc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011dbe:	0189      	lsls	r1, r1, #6
 8011dc0:	428a      	cmp	r2, r1
 8011dc2:	d106      	bne.n	8011dd2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8011dc4:	6819      	ldr	r1, [r3, #0]
 8011dc6:	480d      	ldr	r0, [pc, #52]	@ (8011dfc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8011dc8:	4001      	ands	r1, r0
 8011dca:	6019      	str	r1, [r3, #0]
 8011dcc:	6819      	ldr	r1, [r3, #0]
 8011dce:	430a      	orrs	r2, r1
 8011dd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011dd2:	0023      	movs	r3, r4
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	335d      	adds	r3, #93	@ 0x5d
 8011dd8:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011dda:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8011ddc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8011dde:	345c      	adds	r4, #92	@ 0x5c
 8011de0:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8011de2:	b005      	add	sp, #20
 8011de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d000      	beq.n	8011dee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8011dec:	002b      	movs	r3, r5
      count--;
 8011dee:	9a03      	ldr	r2, [sp, #12]
 8011df0:	001d      	movs	r5, r3
 8011df2:	3a01      	subs	r2, #1
 8011df4:	9203      	str	r2, [sp, #12]
 8011df6:	e7b0      	b.n	8011d5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8011df8:	20000050 	.word	0x20000050
 8011dfc:	ffffdfff 	.word	0xffffdfff

08011e00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e02:	2382      	movs	r3, #130	@ 0x82
{
 8011e04:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e06:	6842      	ldr	r2, [r0, #4]
{
 8011e08:	0004      	movs	r4, r0
 8011e0a:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d10d      	bne.n	8011e2e <SPI_EndRxTransaction+0x2e>
 8011e12:	2280      	movs	r2, #128	@ 0x80
 8011e14:	6883      	ldr	r3, [r0, #8]
 8011e16:	0212      	lsls	r2, r2, #8
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d003      	beq.n	8011e24 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011e1c:	2280      	movs	r2, #128	@ 0x80
 8011e1e:	00d2      	lsls	r2, r2, #3
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d104      	bne.n	8011e2e <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011e24:	2140      	movs	r1, #64	@ 0x40
 8011e26:	6822      	ldr	r2, [r4, #0]
 8011e28:	6813      	ldr	r3, [r2, #0]
 8011e2a:	438b      	bics	r3, r1
 8011e2c:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011e2e:	003a      	movs	r2, r7
 8011e30:	0031      	movs	r1, r6
 8011e32:	0020      	movs	r0, r4
 8011e34:	f7ff ff1c 	bl	8011c70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8011e38:	1e05      	subs	r5, r0, #0
 8011e3a:	d005      	beq.n	8011e48 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e3c:	2320      	movs	r3, #32
 8011e3e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011e40:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e42:	4313      	orrs	r3, r2
 8011e44:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8011e46:	e016      	b.n	8011e76 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e48:	2382      	movs	r3, #130	@ 0x82
 8011e4a:	6862      	ldr	r2, [r4, #4]
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d111      	bne.n	8011e76 <SPI_EndRxTransaction+0x76>
 8011e52:	2280      	movs	r2, #128	@ 0x80
 8011e54:	68a3      	ldr	r3, [r4, #8]
 8011e56:	0212      	lsls	r2, r2, #8
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	d003      	beq.n	8011e64 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011e5c:	2280      	movs	r2, #128	@ 0x80
 8011e5e:	00d2      	lsls	r2, r2, #3
 8011e60:	4293      	cmp	r3, r2
 8011e62:	d108      	bne.n	8011e76 <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011e64:	21c0      	movs	r1, #192	@ 0xc0
 8011e66:	003b      	movs	r3, r7
 8011e68:	0032      	movs	r2, r6
 8011e6a:	0020      	movs	r0, r4
 8011e6c:	00c9      	lsls	r1, r1, #3
 8011e6e:	f7ff ff5b 	bl	8011d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d1e2      	bne.n	8011e3c <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8011e76:	0028      	movs	r0, r5
 8011e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e7a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011e7a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011e7c:	0013      	movs	r3, r2
{
 8011e7e:	000d      	movs	r5, r1
 8011e80:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011e82:	000a      	movs	r2, r1
 8011e84:	21c0      	movs	r1, #192	@ 0xc0
 8011e86:	0149      	lsls	r1, r1, #5
{
 8011e88:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011e8a:	f7ff ff4d 	bl	8011d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d005      	beq.n	8011e9e <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e92:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8011e94:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e96:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8011e9c:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011e9e:	0032      	movs	r2, r6
 8011ea0:	0029      	movs	r1, r5
 8011ea2:	0020      	movs	r0, r4
 8011ea4:	f7ff fee4 	bl	8011c70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d1f2      	bne.n	8011e92 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011eac:	21c0      	movs	r1, #192	@ 0xc0
 8011eae:	0033      	movs	r3, r6
 8011eb0:	002a      	movs	r2, r5
 8011eb2:	0020      	movs	r0, r4
 8011eb4:	00c9      	lsls	r1, r1, #3
 8011eb6:	f7ff ff37 	bl	8011d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	d0ee      	beq.n	8011e9c <SPI_EndRxTxTransaction+0x22>
 8011ebe:	e7e8      	b.n	8011e92 <SPI_EndRxTxTransaction+0x18>

08011ec0 <HAL_SPI_Init>:
{
 8011ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011ec4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8011ec6:	2c00      	cmp	r4, #0
 8011ec8:	d063      	beq.n	8011f92 <HAL_SPI_Init+0xd2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011eca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d161      	bne.n	8011f94 <HAL_SPI_Init+0xd4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011ed0:	2282      	movs	r2, #130	@ 0x82
 8011ed2:	6861      	ldr	r1, [r4, #4]
 8011ed4:	0052      	lsls	r2, r2, #1
 8011ed6:	4291      	cmp	r1, r2
 8011ed8:	d000      	beq.n	8011edc <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011eda:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011edc:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8011ede:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011ee0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8011ee2:	355d      	adds	r5, #93	@ 0x5d
 8011ee4:	782b      	ldrb	r3, [r5, #0]
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d105      	bne.n	8011ef8 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8011eec:	0023      	movs	r3, r4
 8011eee:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8011ef0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8011ef2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8011ef4:	f7f8 f904 	bl	800a100 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8011ef8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8011efa:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8011efc:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8011efe:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011f00:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8011f02:	680b      	ldr	r3, [r1, #0]
 8011f04:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011f06:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8011f08:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011f0a:	00d2      	lsls	r2, r2, #3
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	4296      	cmp	r6, r2
 8011f10:	d944      	bls.n	8011f9c <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011f12:	22f0      	movs	r2, #240	@ 0xf0
 8011f14:	0018      	movs	r0, r3
 8011f16:	0112      	lsls	r2, r2, #4
 8011f18:	4296      	cmp	r6, r2
 8011f1a:	d000      	beq.n	8011f1e <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011f1c:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011f1e:	2282      	movs	r2, #130	@ 0x82
 8011f20:	2784      	movs	r7, #132	@ 0x84
 8011f22:	6863      	ldr	r3, [r4, #4]
 8011f24:	0052      	lsls	r2, r2, #1
 8011f26:	4013      	ands	r3, r2
 8011f28:	68a2      	ldr	r2, [r4, #8]
 8011f2a:	023f      	lsls	r7, r7, #8
 8011f2c:	403a      	ands	r2, r7
 8011f2e:	2702      	movs	r7, #2
 8011f30:	4313      	orrs	r3, r2
 8011f32:	6922      	ldr	r2, [r4, #16]
 8011f34:	69a5      	ldr	r5, [r4, #24]
 8011f36:	403a      	ands	r2, r7
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	6967      	ldr	r7, [r4, #20]
 8011f3e:	4017      	ands	r7, r2
 8011f40:	433b      	orrs	r3, r7
 8011f42:	2780      	movs	r7, #128	@ 0x80
 8011f44:	00bf      	lsls	r7, r7, #2
 8011f46:	402f      	ands	r7, r5
 8011f48:	433b      	orrs	r3, r7
 8011f4a:	69e7      	ldr	r7, [r4, #28]
 8011f4c:	3237      	adds	r2, #55	@ 0x37
 8011f4e:	4017      	ands	r7, r2
 8011f50:	433b      	orrs	r3, r7
 8011f52:	6a27      	ldr	r7, [r4, #32]
 8011f54:	3248      	adds	r2, #72	@ 0x48
 8011f56:	4017      	ands	r7, r2
 8011f58:	2280      	movs	r2, #128	@ 0x80
 8011f5a:	433b      	orrs	r3, r7
 8011f5c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8011f5e:	0192      	lsls	r2, r2, #6
 8011f60:	4017      	ands	r7, r2
 8011f62:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011f64:	2710      	movs	r7, #16
 8011f66:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011f68:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011f6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011f6c:	0c2d      	lsrs	r5, r5, #16
 8011f6e:	403b      	ands	r3, r7
 8011f70:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8011f72:	4017      	ands	r7, r2
 8011f74:	433b      	orrs	r3, r7
 8011f76:	27f0      	movs	r7, #240	@ 0xf0
 8011f78:	013f      	lsls	r7, r7, #4
 8011f7a:	403e      	ands	r6, r7
 8011f7c:	4333      	orrs	r3, r6
 8011f7e:	2604      	movs	r6, #4
 8011f80:	4035      	ands	r5, r6
 8011f82:	432b      	orrs	r3, r5
 8011f84:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011f86:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011f88:	604b      	str	r3, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8011f8a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011f8c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011f8e:	345d      	adds	r4, #93	@ 0x5d
 8011f90:	7023      	strb	r3, [r4, #0]
}
 8011f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011f94:	2300      	movs	r3, #0
 8011f96:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011f98:	6163      	str	r3, [r4, #20]
 8011f9a:	e79f      	b.n	8011edc <HAL_SPI_Init+0x1c>
 8011f9c:	2080      	movs	r0, #128	@ 0x80
 8011f9e:	0140      	lsls	r0, r0, #5
 8011fa0:	e7ba      	b.n	8011f18 <HAL_SPI_Init+0x58>

08011fa2 <HAL_SPI_Transmit>:
{
 8011fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fa4:	b085      	sub	sp, #20
 8011fa6:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8011fa8:	0003      	movs	r3, r0
 8011faa:	335c      	adds	r3, #92	@ 0x5c
{
 8011fac:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8011fae:	781a      	ldrb	r2, [r3, #0]
{
 8011fb0:	0004      	movs	r4, r0
 8011fb2:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8011fb4:	2702      	movs	r7, #2
 8011fb6:	2a01      	cmp	r2, #1
 8011fb8:	d100      	bne.n	8011fbc <HAL_SPI_Transmit+0x1a>
 8011fba:	e082      	b.n	80120c2 <HAL_SPI_Transmit+0x120>
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8011fc0:	f7fb ff0c 	bl	800dddc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8011fc4:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8011fc6:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8011fc8:	335d      	adds	r3, #93	@ 0x5d
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	b2d7      	uxtb	r7, r2
 8011fce:	2a01      	cmp	r2, #1
 8011fd0:	d000      	beq.n	8011fd4 <HAL_SPI_Transmit+0x32>
 8011fd2:	e0a6      	b.n	8012122 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8011fd4:	2d00      	cmp	r5, #0
 8011fd6:	d071      	beq.n	80120bc <HAL_SPI_Transmit+0x11a>
 8011fd8:	2e00      	cmp	r6, #0
 8011fda:	d06f      	beq.n	80120bc <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011fdc:	3202      	adds	r2, #2
 8011fde:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011fe0:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8011fe2:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011fe4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011fe6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011fe8:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8011fea:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011fec:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8011fee:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8011ff0:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8011ff2:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ff4:	2280      	movs	r2, #128	@ 0x80
 8011ff6:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8011ff8:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8011ffa:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ffc:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8011ffe:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012000:	4291      	cmp	r1, r2
 8012002:	d108      	bne.n	8012016 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8012004:	2140      	movs	r1, #64	@ 0x40
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	438a      	bics	r2, r1
 801200a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801200c:	2280      	movs	r2, #128	@ 0x80
 801200e:	6819      	ldr	r1, [r3, #0]
 8012010:	01d2      	lsls	r2, r2, #7
 8012012:	430a      	orrs	r2, r1
 8012014:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012016:	2240      	movs	r2, #64	@ 0x40
 8012018:	6819      	ldr	r1, [r3, #0]
 801201a:	4211      	tst	r1, r2
 801201c:	d102      	bne.n	8012024 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 801201e:	6819      	ldr	r1, [r3, #0]
 8012020:	430a      	orrs	r2, r1
 8012022:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012024:	21e0      	movs	r1, #224	@ 0xe0
 8012026:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012028:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801202a:	00c9      	lsls	r1, r1, #3
 801202c:	4288      	cmp	r0, r1
 801202e:	d94b      	bls.n	80120c8 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012030:	2a00      	cmp	r2, #0
 8012032:	d001      	beq.n	8012038 <HAL_SPI_Transmit+0x96>
 8012034:	2e01      	cmp	r6, #1
 8012036:	d107      	bne.n	8012048 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012038:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801203a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801203c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 801203e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012040:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8012042:	3b01      	subs	r3, #1
 8012044:	b29b      	uxth	r3, r3
 8012046:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012048:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 801204a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801204c:	2b00      	cmp	r3, #0
 801204e:	d119      	bne.n	8012084 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012050:	0020      	movs	r0, r4
 8012052:	9a01      	ldr	r2, [sp, #4]
 8012054:	9900      	ldr	r1, [sp, #0]
 8012056:	f7ff ff10 	bl	8011e7a <SPI_EndRxTxTransaction>
 801205a:	2800      	cmp	r0, #0
 801205c:	d15e      	bne.n	801211c <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801205e:	68a3      	ldr	r3, [r4, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d106      	bne.n	8012072 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012064:	9303      	str	r3, [sp, #12]
 8012066:	6823      	ldr	r3, [r4, #0]
 8012068:	68da      	ldr	r2, [r3, #12]
 801206a:	9203      	str	r2, [sp, #12]
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	9303      	str	r3, [sp, #12]
 8012070:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012072:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012074:	2a00      	cmp	r2, #0
 8012076:	d121      	bne.n	80120bc <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8012078:	0023      	movs	r3, r4
 801207a:	2101      	movs	r1, #1
 801207c:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 801207e:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8012080:	7019      	strb	r1, [r3, #0]
 8012082:	e01b      	b.n	80120bc <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012084:	6822      	ldr	r2, [r4, #0]
 8012086:	6893      	ldr	r3, [r2, #8]
 8012088:	422b      	tst	r3, r5
 801208a:	d009      	beq.n	80120a0 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801208c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801208e:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012090:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012092:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012094:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8012096:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012098:	3b01      	subs	r3, #1
 801209a:	b29b      	uxth	r3, r3
 801209c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 801209e:	e7d4      	b.n	801204a <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80120a0:	f7fb fe9c 	bl	800dddc <HAL_GetTick>
 80120a4:	9b01      	ldr	r3, [sp, #4]
 80120a6:	1ac0      	subs	r0, r0, r3
 80120a8:	9b00      	ldr	r3, [sp, #0]
 80120aa:	4298      	cmp	r0, r3
 80120ac:	d3cd      	bcc.n	801204a <HAL_SPI_Transmit+0xa8>
 80120ae:	3301      	adds	r3, #1
 80120b0:	d0cb      	beq.n	801204a <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 80120b2:	0023      	movs	r3, r4
 80120b4:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 80120b6:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 80120b8:	335d      	adds	r3, #93	@ 0x5d
 80120ba:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80120bc:	2300      	movs	r3, #0
 80120be:	345c      	adds	r4, #92	@ 0x5c
 80120c0:	7023      	strb	r3, [r4, #0]
}
 80120c2:	0038      	movs	r0, r7
 80120c4:	b005      	add	sp, #20
 80120c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80120c8:	2a00      	cmp	r2, #0
 80120ca:	d001      	beq.n	80120d0 <HAL_SPI_Transmit+0x12e>
 80120cc:	2e01      	cmp	r6, #1
 80120ce:	d108      	bne.n	80120e2 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80120d0:	782a      	ldrb	r2, [r5, #0]
 80120d2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80120d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80120d6:	3301      	adds	r3, #1
 80120d8:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80120da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80120dc:	3b01      	subs	r3, #1
 80120de:	b29b      	uxth	r3, r3
 80120e0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80120e2:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80120e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d0b2      	beq.n	8012050 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	689a      	ldr	r2, [r3, #8]
 80120ee:	422a      	tst	r2, r5
 80120f0:	d00a      	beq.n	8012108 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80120f2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80120f4:	7812      	ldrb	r2, [r2, #0]
 80120f6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80120f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80120fa:	3301      	adds	r3, #1
 80120fc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80120fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012100:	3b01      	subs	r3, #1
 8012102:	b29b      	uxth	r3, r3
 8012104:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8012106:	e7ed      	b.n	80120e4 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012108:	f7fb fe68 	bl	800dddc <HAL_GetTick>
 801210c:	9b01      	ldr	r3, [sp, #4]
 801210e:	1ac0      	subs	r0, r0, r3
 8012110:	9b00      	ldr	r3, [sp, #0]
 8012112:	4298      	cmp	r0, r3
 8012114:	d3e6      	bcc.n	80120e4 <HAL_SPI_Transmit+0x142>
 8012116:	3301      	adds	r3, #1
 8012118:	d0e4      	beq.n	80120e4 <HAL_SPI_Transmit+0x142>
 801211a:	e7ca      	b.n	80120b2 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801211c:	2320      	movs	r3, #32
 801211e:	6623      	str	r3, [r4, #96]	@ 0x60
 8012120:	e79d      	b.n	801205e <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 8012122:	2702      	movs	r7, #2
 8012124:	e7ca      	b.n	80120bc <HAL_SPI_Transmit+0x11a>
	...

08012128 <HAL_SPI_TransmitReceive>:
{
 8012128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801212a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 801212c:	0003      	movs	r3, r0
 801212e:	335c      	adds	r3, #92	@ 0x5c
{
 8012130:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8012132:	781a      	ldrb	r2, [r3, #0]
{
 8012134:	0004      	movs	r4, r0
 8012136:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8012138:	2002      	movs	r0, #2
 801213a:	2a01      	cmp	r2, #1
 801213c:	d01b      	beq.n	8012176 <HAL_SPI_TransmitReceive+0x4e>
 801213e:	2201      	movs	r2, #1
 8012140:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8012142:	f7fb fe4b 	bl	800dddc <HAL_GetTick>
  tmp_state           = hspi->State;
 8012146:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8012148:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 801214a:	335d      	adds	r3, #93	@ 0x5d
 801214c:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 801214e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8012150:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012152:	2b01      	cmp	r3, #1
 8012154:	d009      	beq.n	801216a <HAL_SPI_TransmitReceive+0x42>
 8012156:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8012158:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801215a:	005b      	lsls	r3, r3, #1
 801215c:	4299      	cmp	r1, r3
 801215e:	d107      	bne.n	8012170 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012160:	68a3      	ldr	r3, [r4, #8]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d104      	bne.n	8012170 <HAL_SPI_TransmitReceive+0x48>
 8012166:	2a04      	cmp	r2, #4
 8012168:	d102      	bne.n	8012170 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801216a:	2d00      	cmp	r5, #0
 801216c:	d104      	bne.n	8012178 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 801216e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8012170:	2300      	movs	r3, #0
 8012172:	345c      	adds	r4, #92	@ 0x5c
 8012174:	7023      	strb	r3, [r4, #0]
}
 8012176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012178:	2f00      	cmp	r7, #0
 801217a:	d0f8      	beq.n	801216e <HAL_SPI_TransmitReceive+0x46>
 801217c:	2e00      	cmp	r6, #0
 801217e:	d0f6      	beq.n	801216e <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012180:	0023      	movs	r3, r4
 8012182:	335d      	adds	r3, #93	@ 0x5d
 8012184:	781a      	ldrb	r2, [r3, #0]
 8012186:	2a04      	cmp	r2, #4
 8012188:	d001      	beq.n	801218e <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801218a:	2205      	movs	r2, #5
 801218c:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 801218e:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012190:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8012192:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012194:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012196:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8012198:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801219a:	1da2      	adds	r2, r4, #6
 801219c:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801219e:	22e0      	movs	r2, #224	@ 0xe0
 80121a0:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80121a2:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80121a4:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80121a6:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121a8:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 80121aa:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80121ac:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80121ae:	00d2      	lsls	r2, r2, #3
 80121b0:	4290      	cmp	r0, r2
 80121b2:	d935      	bls.n	8012220 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	4f60      	ldr	r7, [pc, #384]	@ (8012338 <HAL_SPI_TransmitReceive+0x210>)
 80121b8:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121ba:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80121bc:	2240      	movs	r2, #64	@ 0x40
 80121be:	681f      	ldr	r7, [r3, #0]
 80121c0:	4217      	tst	r7, r2
 80121c2:	d102      	bne.n	80121ca <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80121c4:	681f      	ldr	r7, [r3, #0]
 80121c6:	433a      	orrs	r2, r7
 80121c8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80121ca:	22e0      	movs	r2, #224	@ 0xe0
 80121cc:	00d2      	lsls	r2, r2, #3
 80121ce:	4290      	cmp	r0, r2
 80121d0:	d961      	bls.n	8012296 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80121d2:	2900      	cmp	r1, #0
 80121d4:	d001      	beq.n	80121da <HAL_SPI_TransmitReceive+0xb2>
 80121d6:	2e01      	cmp	r6, #1
 80121d8:	d107      	bne.n	80121ea <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80121da:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80121dc:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80121de:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80121e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80121e2:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80121e4:	3b01      	subs	r3, #1
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80121ea:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80121ec:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80121ee:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80121f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d119      	bne.n	801222a <HAL_SPI_TransmitReceive+0x102>
 80121f6:	0023      	movs	r3, r4
 80121f8:	3308      	adds	r3, #8
 80121fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d114      	bne.n	801222a <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012200:	0020      	movs	r0, r4
 8012202:	9a01      	ldr	r2, [sp, #4]
 8012204:	9908      	ldr	r1, [sp, #32]
 8012206:	f7ff fe38 	bl	8011e7a <SPI_EndRxTxTransaction>
 801220a:	2800      	cmp	r0, #0
 801220c:	d000      	beq.n	8012210 <HAL_SPI_TransmitReceive+0xe8>
 801220e:	e08e      	b.n	801232e <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012210:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012212:	2b00      	cmp	r3, #0
 8012214:	d1ab      	bne.n	801216e <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8012216:	0023      	movs	r3, r4
 8012218:	2201      	movs	r2, #1
 801221a:	335d      	adds	r3, #93	@ 0x5d
 801221c:	701a      	strb	r2, [r3, #0]
 801221e:	e7a7      	b.n	8012170 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012220:	2280      	movs	r2, #128	@ 0x80
 8012222:	685f      	ldr	r7, [r3, #4]
 8012224:	0152      	lsls	r2, r2, #5
 8012226:	433a      	orrs	r2, r7
 8012228:	e7c7      	b.n	80121ba <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801222a:	6820      	ldr	r0, [r4, #0]
 801222c:	6883      	ldr	r3, [r0, #8]
 801222e:	423b      	tst	r3, r7
 8012230:	d00e      	beq.n	8012250 <HAL_SPI_TransmitReceive+0x128>
 8012232:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012234:	2b00      	cmp	r3, #0
 8012236:	d00b      	beq.n	8012250 <HAL_SPI_TransmitReceive+0x128>
 8012238:	2d01      	cmp	r5, #1
 801223a:	d108      	bne.n	801224e <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801223c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801223e:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012240:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012242:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012244:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8012246:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012248:	3b01      	subs	r3, #1
 801224a:	b29b      	uxth	r3, r3
 801224c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 801224e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012250:	6883      	ldr	r3, [r0, #8]
 8012252:	0019      	movs	r1, r3
 8012254:	4031      	ands	r1, r6
 8012256:	4233      	tst	r3, r6
 8012258:	d00e      	beq.n	8012278 <HAL_SPI_TransmitReceive+0x150>
 801225a:	0022      	movs	r2, r4
 801225c:	3208      	adds	r2, #8
 801225e:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012260:	2b00      	cmp	r3, #0
 8012262:	d009      	beq.n	8012278 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8012264:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012266:	68c0      	ldr	r0, [r0, #12]
 8012268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801226a:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801226c:	3302      	adds	r3, #2
 801226e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012270:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012272:	3b01      	subs	r3, #1
 8012274:	b29b      	uxth	r3, r3
 8012276:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012278:	f7fb fdb0 	bl	800dddc <HAL_GetTick>
 801227c:	9b01      	ldr	r3, [sp, #4]
 801227e:	1ac0      	subs	r0, r0, r3
 8012280:	9b08      	ldr	r3, [sp, #32]
 8012282:	4298      	cmp	r0, r3
 8012284:	d3b4      	bcc.n	80121f0 <HAL_SPI_TransmitReceive+0xc8>
 8012286:	3301      	adds	r3, #1
 8012288:	d0b2      	beq.n	80121f0 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 801228a:	0023      	movs	r3, r4
 801228c:	2201      	movs	r2, #1
 801228e:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8012290:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8012292:	701a      	strb	r2, [r3, #0]
        goto error;
 8012294:	e76c      	b.n	8012170 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012296:	2900      	cmp	r1, #0
 8012298:	d001      	beq.n	801229e <HAL_SPI_TransmitReceive+0x176>
 801229a:	2e01      	cmp	r6, #1
 801229c:	d108      	bne.n	80122b0 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801229e:	782a      	ldrb	r2, [r5, #0]
 80122a0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80122a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80122a4:	3301      	adds	r3, #1
 80122a6:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80122a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80122aa:	3b01      	subs	r3, #1
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80122b0:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80122b2:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80122b4:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80122b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d104      	bne.n	80122c6 <HAL_SPI_TransmitReceive+0x19e>
 80122bc:	0023      	movs	r3, r4
 80122be:	3308      	adds	r3, #8
 80122c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d09c      	beq.n	8012200 <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	689a      	ldr	r2, [r3, #8]
 80122ca:	423a      	tst	r2, r7
 80122cc:	d00f      	beq.n	80122ee <HAL_SPI_TransmitReceive+0x1c6>
 80122ce:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80122d0:	2a00      	cmp	r2, #0
 80122d2:	d00c      	beq.n	80122ee <HAL_SPI_TransmitReceive+0x1c6>
 80122d4:	2d01      	cmp	r5, #1
 80122d6:	d109      	bne.n	80122ec <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80122d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80122da:	7812      	ldrb	r2, [r2, #0]
 80122dc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80122de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80122e0:	3301      	adds	r3, #1
 80122e2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80122e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80122e6:	3b01      	subs	r3, #1
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80122ec:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	689a      	ldr	r2, [r3, #8]
 80122f2:	0011      	movs	r1, r2
 80122f4:	4031      	ands	r1, r6
 80122f6:	4232      	tst	r2, r6
 80122f8:	d00f      	beq.n	801231a <HAL_SPI_TransmitReceive+0x1f2>
 80122fa:	0022      	movs	r2, r4
 80122fc:	3208      	adds	r2, #8
 80122fe:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 8012300:	2800      	cmp	r0, #0
 8012302:	d00a      	beq.n	801231a <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 8012304:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012306:	7b1b      	ldrb	r3, [r3, #12]
 8012308:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801230a:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 801230c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801230e:	3301      	adds	r3, #1
 8012310:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012312:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8012314:	3b01      	subs	r3, #1
 8012316:	b29b      	uxth	r3, r3
 8012318:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801231a:	f7fb fd5f 	bl	800dddc <HAL_GetTick>
 801231e:	9b01      	ldr	r3, [sp, #4]
 8012320:	1ac0      	subs	r0, r0, r3
 8012322:	9b08      	ldr	r3, [sp, #32]
 8012324:	4298      	cmp	r0, r3
 8012326:	d3c6      	bcc.n	80122b6 <HAL_SPI_TransmitReceive+0x18e>
 8012328:	3301      	adds	r3, #1
 801232a:	d0c4      	beq.n	80122b6 <HAL_SPI_TransmitReceive+0x18e>
 801232c:	e7ad      	b.n	801228a <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801232e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8012330:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012332:	6623      	str	r3, [r4, #96]	@ 0x60
 8012334:	e76c      	b.n	8012210 <HAL_SPI_TransmitReceive+0xe8>
 8012336:	46c0      	nop			@ (mov r8, r8)
 8012338:	ffffefff 	.word	0xffffefff

0801233c <HAL_SPI_Receive>:
{
 801233c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 801233e:	0006      	movs	r6, r0
{
 8012340:	b087      	sub	sp, #28
 8012342:	9104      	str	r1, [sp, #16]
 8012344:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8012346:	365d      	adds	r6, #93	@ 0x5d
 8012348:	7833      	ldrb	r3, [r6, #0]
{
 801234a:	0004      	movs	r4, r0
 801234c:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 801234e:	b2dd      	uxtb	r5, r3
 8012350:	2b01      	cmp	r3, #1
 8012352:	d000      	beq.n	8012356 <HAL_SPI_Receive+0x1a>
 8012354:	e0aa      	b.n	80124ac <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012356:	3304      	adds	r3, #4
 8012358:	6842      	ldr	r2, [r0, #4]
 801235a:	33ff      	adds	r3, #255	@ 0xff
 801235c:	429a      	cmp	r2, r3
 801235e:	d10e      	bne.n	801237e <HAL_SPI_Receive+0x42>
 8012360:	6883      	ldr	r3, [r0, #8]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10b      	bne.n	801237e <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012366:	3304      	adds	r3, #4
 8012368:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801236a:	9b03      	ldr	r3, [sp, #12]
 801236c:	000a      	movs	r2, r1
 801236e:	9300      	str	r3, [sp, #0]
 8012370:	003b      	movs	r3, r7
 8012372:	f7ff fed9 	bl	8012128 <HAL_SPI_TransmitReceive>
 8012376:	0005      	movs	r5, r0
}
 8012378:	0028      	movs	r0, r5
 801237a:	b007      	add	sp, #28
 801237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 801237e:	0023      	movs	r3, r4
 8012380:	335c      	adds	r3, #92	@ 0x5c
 8012382:	781a      	ldrb	r2, [r3, #0]
 8012384:	2a01      	cmp	r2, #1
 8012386:	d100      	bne.n	801238a <HAL_SPI_Receive+0x4e>
 8012388:	e092      	b.n	80124b0 <HAL_SPI_Receive+0x174>
 801238a:	2201      	movs	r2, #1
 801238c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 801238e:	f7fb fd25 	bl	800dddc <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8012392:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 8012394:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8012396:	2b00      	cmp	r3, #0
 8012398:	d077      	beq.n	801248a <HAL_SPI_Receive+0x14e>
 801239a:	2f00      	cmp	r7, #0
 801239c:	d075      	beq.n	801248a <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801239e:	2304      	movs	r3, #4
 80123a0:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80123a2:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80123a4:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80123a6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80123a8:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80123aa:	1da2      	adds	r2, r4, #6
 80123ac:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 80123ae:	3202      	adds	r2, #2
 80123b0:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123b2:	22e0      	movs	r2, #224	@ 0xe0
 80123b4:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80123b6:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80123b8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80123ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80123bc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80123be:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123c0:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80123c2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123c4:	4291      	cmp	r1, r2
 80123c6:	d92f      	bls.n	8012428 <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	483a      	ldr	r0, [pc, #232]	@ (80124b4 <HAL_SPI_Receive+0x178>)
 80123cc:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80123ce:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80123d0:	2280      	movs	r2, #128	@ 0x80
 80123d2:	68a0      	ldr	r0, [r4, #8]
 80123d4:	0212      	lsls	r2, r2, #8
 80123d6:	4290      	cmp	r0, r2
 80123d8:	d107      	bne.n	80123ea <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80123da:	2040      	movs	r0, #64	@ 0x40
 80123dc:	681a      	ldr	r2, [r3, #0]
 80123de:	4382      	bics	r2, r0
 80123e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	4834      	ldr	r0, [pc, #208]	@ (80124b8 <HAL_SPI_Receive+0x17c>)
 80123e6:	4002      	ands	r2, r0
 80123e8:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80123ea:	2240      	movs	r2, #64	@ 0x40
 80123ec:	6818      	ldr	r0, [r3, #0]
 80123ee:	4210      	tst	r0, r2
 80123f0:	d102      	bne.n	80123f8 <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 80123f2:	6818      	ldr	r0, [r3, #0]
 80123f4:	4302      	orrs	r2, r0
 80123f6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80123f8:	23e0      	movs	r3, #224	@ 0xe0
 80123fa:	0027      	movs	r7, r4
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	3708      	adds	r7, #8
 8012400:	4299      	cmp	r1, r3
 8012402:	d925      	bls.n	8012450 <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 8012404:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012406:	2b00      	cmp	r3, #0
 8012408:	d025      	beq.n	8012456 <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801240a:	2101      	movs	r1, #1
 801240c:	6823      	ldr	r3, [r4, #0]
 801240e:	689a      	ldr	r2, [r3, #8]
 8012410:	420a      	tst	r2, r1
 8012412:	d03e      	beq.n	8012492 <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012414:	68da      	ldr	r2, [r3, #12]
 8012416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801241a:	3302      	adds	r3, #2
 801241c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 801241e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012420:	3b01      	subs	r3, #1
 8012422:	b29b      	uxth	r3, r3
 8012424:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012426:	e7ed      	b.n	8012404 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012428:	2280      	movs	r2, #128	@ 0x80
 801242a:	6858      	ldr	r0, [r3, #4]
 801242c:	0152      	lsls	r2, r2, #5
 801242e:	4302      	orrs	r2, r0
 8012430:	e7cd      	b.n	80123ce <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012432:	2101      	movs	r1, #1
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	689a      	ldr	r2, [r3, #8]
 8012438:	420a      	tst	r2, r1
 801243a:	d01a      	beq.n	8012472 <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801243c:	7b1b      	ldrb	r3, [r3, #12]
 801243e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012440:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012444:	185b      	adds	r3, r3, r1
 8012446:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8012448:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801244a:	3b01      	subs	r3, #1
 801244c:	b29b      	uxth	r3, r3
 801244e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8012450:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012452:	2b00      	cmp	r3, #0
 8012454:	d1ed      	bne.n	8012432 <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012456:	0020      	movs	r0, r4
 8012458:	9a05      	ldr	r2, [sp, #20]
 801245a:	9903      	ldr	r1, [sp, #12]
 801245c:	f7ff fcd0 	bl	8011e00 <SPI_EndRxTransaction>
 8012460:	2800      	cmp	r0, #0
 8012462:	d120      	bne.n	80124a6 <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012464:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10f      	bne.n	801248a <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 801246a:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 801246c:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 801246e:	7032      	strb	r2, [r6, #0]
 8012470:	e00b      	b.n	801248a <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012472:	f7fb fcb3 	bl	800dddc <HAL_GetTick>
 8012476:	9b05      	ldr	r3, [sp, #20]
 8012478:	1ac0      	subs	r0, r0, r3
 801247a:	9b03      	ldr	r3, [sp, #12]
 801247c:	4298      	cmp	r0, r3
 801247e:	d3e7      	bcc.n	8012450 <HAL_SPI_Receive+0x114>
 8012480:	3301      	adds	r3, #1
 8012482:	d0e5      	beq.n	8012450 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8012484:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8012486:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8012488:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 801248a:	2300      	movs	r3, #0
 801248c:	345c      	adds	r4, #92	@ 0x5c
 801248e:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8012490:	e772      	b.n	8012378 <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012492:	f7fb fca3 	bl	800dddc <HAL_GetTick>
 8012496:	9b05      	ldr	r3, [sp, #20]
 8012498:	1ac0      	subs	r0, r0, r3
 801249a:	9b03      	ldr	r3, [sp, #12]
 801249c:	4298      	cmp	r0, r3
 801249e:	d3b1      	bcc.n	8012404 <HAL_SPI_Receive+0xc8>
 80124a0:	3301      	adds	r3, #1
 80124a2:	d0af      	beq.n	8012404 <HAL_SPI_Receive+0xc8>
 80124a4:	e7ee      	b.n	8012484 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80124a6:	2320      	movs	r3, #32
 80124a8:	6623      	str	r3, [r4, #96]	@ 0x60
 80124aa:	e7db      	b.n	8012464 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 80124ac:	2502      	movs	r5, #2
 80124ae:	e7ec      	b.n	801248a <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 80124b0:	2502      	movs	r5, #2
 80124b2:	e761      	b.n	8012378 <HAL_SPI_Receive+0x3c>
 80124b4:	ffffefff 	.word	0xffffefff
 80124b8:	ffffbfff 	.word	0xffffbfff

080124bc <HAL_SPI_Transmit_DMA>:
{
 80124bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80124be:	0006      	movs	r6, r0
 80124c0:	365c      	adds	r6, #92	@ 0x5c
 80124c2:	7833      	ldrb	r3, [r6, #0]
{
 80124c4:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80124c6:	2502      	movs	r5, #2
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d057      	beq.n	801257c <HAL_SPI_Transmit_DMA+0xc0>
 80124cc:	2301      	movs	r3, #1
 80124ce:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80124d0:	0003      	movs	r3, r0
 80124d2:	335d      	adds	r3, #93	@ 0x5d
 80124d4:	7818      	ldrb	r0, [r3, #0]
 80124d6:	b2c5      	uxtb	r5, r0
 80124d8:	2801      	cmp	r0, #1
 80124da:	d000      	beq.n	80124de <HAL_SPI_Transmit_DMA+0x22>
 80124dc:	e06b      	b.n	80125b6 <HAL_SPI_Transmit_DMA+0xfa>
  if ((pData == NULL) || (Size == 0U))
 80124de:	2900      	cmp	r1, #0
 80124e0:	d04a      	beq.n	8012578 <HAL_SPI_Transmit_DMA+0xbc>
 80124e2:	2a00      	cmp	r2, #0
 80124e4:	d048      	beq.n	8012578 <HAL_SPI_Transmit_DMA+0xbc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80124e6:	3002      	adds	r0, #2
 80124e8:	7018      	strb	r0, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80124ea:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80124ec:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80124ee:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80124f0:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 80124f2:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80124f4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80124f6:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80124f8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80124fa:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 80124fc:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80124fe:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8012500:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012502:	2380      	movs	r3, #128	@ 0x80
 8012504:	68a0      	ldr	r0, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8012506:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012508:	021b      	lsls	r3, r3, #8
 801250a:	4298      	cmp	r0, r3
 801250c:	d108      	bne.n	8012520 <HAL_SPI_Transmit_DMA+0x64>
    __HAL_SPI_DISABLE(hspi);
 801250e:	2040      	movs	r0, #64	@ 0x40
 8012510:	6813      	ldr	r3, [r2, #0]
 8012512:	4383      	bics	r3, r0
 8012514:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8012516:	2380      	movs	r3, #128	@ 0x80
 8012518:	6810      	ldr	r0, [r2, #0]
 801251a:	01db      	lsls	r3, r3, #7
 801251c:	4303      	orrs	r3, r0
 801251e:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012520:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8012522:	4b26      	ldr	r3, [pc, #152]	@ (80125bc <HAL_SPI_Transmit_DMA+0x100>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012524:	4f26      	ldr	r7, [pc, #152]	@ (80125c0 <HAL_SPI_Transmit_DMA+0x104>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012526:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8012528:	4b26      	ldr	r3, [pc, #152]	@ (80125c4 <HAL_SPI_Transmit_DMA+0x108>)
 801252a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801252c:	4b26      	ldr	r3, [pc, #152]	@ (80125c8 <HAL_SPI_Transmit_DMA+0x10c>)
 801252e:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8012530:	2300      	movs	r3, #0
 8012532:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012534:	6853      	ldr	r3, [r2, #4]
 8012536:	403b      	ands	r3, r7
 8012538:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 801253a:	23e0      	movs	r3, #224	@ 0xe0
 801253c:	68e7      	ldr	r7, [r4, #12]
 801253e:	00db      	lsls	r3, r3, #3
 8012540:	429f      	cmp	r7, r3
 8012542:	d80e      	bhi.n	8012562 <HAL_SPI_Transmit_DMA+0xa6>
 8012544:	2380      	movs	r3, #128	@ 0x80
 8012546:	6987      	ldr	r7, [r0, #24]
 8012548:	00db      	lsls	r3, r3, #3
 801254a:	429f      	cmp	r7, r3
 801254c:	d109      	bne.n	8012562 <HAL_SPI_Transmit_DMA+0xa6>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 801254e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8012550:	07db      	lsls	r3, r3, #31
 8012552:	d415      	bmi.n	8012580 <HAL_SPI_Transmit_DMA+0xc4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012554:	6853      	ldr	r3, [r2, #4]
 8012556:	4f1a      	ldr	r7, [pc, #104]	@ (80125c0 <HAL_SPI_Transmit_DMA+0x104>)
 8012558:	403b      	ands	r3, r7
 801255a:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 801255c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801255e:	085b      	lsrs	r3, r3, #1
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8012560:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 8012562:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012564:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8012566:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012568:	f7fc fc0c 	bl	800ed84 <HAL_DMA_Start_IT>
 801256c:	2800      	cmp	r0, #0
 801256e:	d010      	beq.n	8012592 <HAL_SPI_Transmit_DMA+0xd6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012570:	2310      	movs	r3, #16
 8012572:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012574:	4313      	orrs	r3, r2
 8012576:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8012578:	2300      	movs	r3, #0
 801257a:	7033      	strb	r3, [r6, #0]
}
 801257c:	0028      	movs	r0, r5
 801257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8012580:	2380      	movs	r3, #128	@ 0x80
 8012582:	6857      	ldr	r7, [r2, #4]
 8012584:	01db      	lsls	r3, r3, #7
 8012586:	433b      	orrs	r3, r7
 8012588:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 801258a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801258c:	085b      	lsrs	r3, r3, #1
 801258e:	3301      	adds	r3, #1
 8012590:	e7e6      	b.n	8012560 <HAL_SPI_Transmit_DMA+0xa4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012592:	2240      	movs	r2, #64	@ 0x40
 8012594:	6823      	ldr	r3, [r4, #0]
 8012596:	6819      	ldr	r1, [r3, #0]
 8012598:	4211      	tst	r1, r2
 801259a:	d102      	bne.n	80125a2 <HAL_SPI_Transmit_DMA+0xe6>
    __HAL_SPI_ENABLE(hspi);
 801259c:	6819      	ldr	r1, [r3, #0]
 801259e:	430a      	orrs	r2, r1
 80125a0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80125a2:	2220      	movs	r2, #32
 80125a4:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80125a6:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80125a8:	430a      	orrs	r2, r1
 80125aa:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80125ac:	2202      	movs	r2, #2
 80125ae:	6859      	ldr	r1, [r3, #4]
 80125b0:	430a      	orrs	r2, r1
 80125b2:	605a      	str	r2, [r3, #4]
 80125b4:	e7e0      	b.n	8012578 <HAL_SPI_Transmit_DMA+0xbc>
    errorcode = HAL_BUSY;
 80125b6:	2502      	movs	r5, #2
 80125b8:	e7de      	b.n	8012578 <HAL_SPI_Transmit_DMA+0xbc>
 80125ba:	46c0      	nop			@ (mov r8, r8)
 80125bc:	080128e5 	.word	0x080128e5
 80125c0:	ffffbfff 	.word	0xffffbfff
 80125c4:	0801292b 	.word	0x0801292b
 80125c8:	08012907 	.word	0x08012907

080125cc <HAL_SPI_TransmitReceive_DMA>:
{
 80125cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80125ce:	0005      	movs	r5, r0
{
 80125d0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 80125d2:	355c      	adds	r5, #92	@ 0x5c
 80125d4:	782e      	ldrb	r6, [r5, #0]
{
 80125d6:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80125d8:	2002      	movs	r0, #2
 80125da:	2e01      	cmp	r6, #1
 80125dc:	d057      	beq.n	801268e <HAL_SPI_TransmitReceive_DMA+0xc2>
  tmp_state           = hspi->State;
 80125de:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 80125e0:	3801      	subs	r0, #1
 80125e2:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 80125e4:	365d      	adds	r6, #93	@ 0x5d
 80125e6:	7830      	ldrb	r0, [r6, #0]
 80125e8:	b2c7      	uxtb	r7, r0
 80125ea:	003a      	movs	r2, r7
  tmp_mode            = hspi->Init.Mode;
 80125ec:	6867      	ldr	r7, [r4, #4]
 80125ee:	46bc      	mov	ip, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80125f0:	2801      	cmp	r0, #1
 80125f2:	d009      	beq.n	8012608 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80125f4:	2782      	movs	r7, #130	@ 0x82
    errorcode = HAL_BUSY;
 80125f6:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80125f8:	007f      	lsls	r7, r7, #1
 80125fa:	45bc      	cmp	ip, r7
 80125fc:	d145      	bne.n	801268a <HAL_SPI_TransmitReceive_DMA+0xbe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80125fe:	68a7      	ldr	r7, [r4, #8]
 8012600:	2f00      	cmp	r7, #0
 8012602:	d142      	bne.n	801268a <HAL_SPI_TransmitReceive_DMA+0xbe>
 8012604:	2a04      	cmp	r2, #4
 8012606:	d140      	bne.n	801268a <HAL_SPI_TransmitReceive_DMA+0xbe>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012608:	2900      	cmp	r1, #0
 801260a:	d03d      	beq.n	8012688 <HAL_SPI_TransmitReceive_DMA+0xbc>
 801260c:	9a01      	ldr	r2, [sp, #4]
 801260e:	2a00      	cmp	r2, #0
 8012610:	d03a      	beq.n	8012688 <HAL_SPI_TransmitReceive_DMA+0xbc>
 8012612:	2b00      	cmp	r3, #0
 8012614:	d038      	beq.n	8012688 <HAL_SPI_TransmitReceive_DMA+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012616:	7830      	ldrb	r0, [r6, #0]
 8012618:	2804      	cmp	r0, #4
 801261a:	d001      	beq.n	8012620 <HAL_SPI_TransmitReceive_DMA+0x54>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801261c:	2005      	movs	r0, #5
 801261e:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012620:	2000      	movs	r0, #0
  hspi->RxXferCount = Size;
 8012622:	0027      	movs	r7, r4
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012624:	9a01      	ldr	r2, [sp, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012626:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012628:	1da1      	adds	r1, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801262a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801262c:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 801262e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8012630:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012632:	3708      	adds	r7, #8
  hspi->RxXferSize  = Size;
 8012634:	87cb      	strh	r3, [r1, #62]	@ 0x3e
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012636:	6821      	ldr	r1, [r4, #0]
  hspi->RxXferCount = Size;
 8012638:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 801263a:	4a46      	ldr	r2, [pc, #280]	@ (8012754 <HAL_SPI_TransmitReceive_DMA+0x188>)
  hspi->RxISR       = NULL;
 801263c:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801263e:	6520      	str	r0, [r4, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8012640:	6848      	ldr	r0, [r1, #4]
 8012642:	4010      	ands	r0, r2
 8012644:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012646:	20e0      	movs	r0, #224	@ 0xe0
 8012648:	68e2      	ldr	r2, [r4, #12]
 801264a:	00c0      	lsls	r0, r0, #3
 801264c:	4282      	cmp	r2, r0
 801264e:	d91f      	bls.n	8012690 <HAL_SPI_TransmitReceive_DMA+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012650:	684b      	ldr	r3, [r1, #4]
 8012652:	4841      	ldr	r0, [pc, #260]	@ (8012758 <HAL_SPI_TransmitReceive_DMA+0x18c>)
 8012654:	4003      	ands	r3, r0
 8012656:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012658:	7833      	ldrb	r3, [r6, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801265a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801265c:	2b04      	cmp	r3, #4
 801265e:	d052      	beq.n	8012706 <HAL_SPI_TransmitReceive_DMA+0x13a>
 8012660:	4e3e      	ldr	r6, [pc, #248]	@ (801275c <HAL_SPI_TransmitReceive_DMA+0x190>)
 8012662:	4b3f      	ldr	r3, [pc, #252]	@ (8012760 <HAL_SPI_TransmitReceive_DMA+0x194>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8012664:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012666:	4b3f      	ldr	r3, [pc, #252]	@ (8012764 <HAL_SPI_TransmitReceive_DMA+0x198>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012668:	6306      	str	r6, [r0, #48]	@ 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801266a:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 801266c:	2300      	movs	r3, #0
 801266e:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8012670:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012672:	9a01      	ldr	r2, [sp, #4]
                                 hspi->RxXferCount))
 8012674:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012676:	310c      	adds	r1, #12
 8012678:	f7fc fb84 	bl	800ed84 <HAL_DMA_Start_IT>
 801267c:	1e03      	subs	r3, r0, #0
 801267e:	d045      	beq.n	801270c <HAL_SPI_TransmitReceive_DMA+0x140>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012680:	2310      	movs	r3, #16
 8012682:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012684:	4313      	orrs	r3, r2
 8012686:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8012688:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 801268a:	2300      	movs	r3, #0
 801268c:	702b      	strb	r3, [r5, #0]
}
 801268e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012690:	2080      	movs	r0, #128	@ 0x80
 8012692:	684a      	ldr	r2, [r1, #4]
 8012694:	0140      	lsls	r0, r0, #5
 8012696:	4310      	orrs	r0, r2
 8012698:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801269a:	2080      	movs	r0, #128	@ 0x80
 801269c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801269e:	00c0      	lsls	r0, r0, #3
 80126a0:	6992      	ldr	r2, [r2, #24]
 80126a2:	4282      	cmp	r2, r0
 80126a4:	d108      	bne.n	80126b8 <HAL_SPI_TransmitReceive_DMA+0xec>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80126a6:	07db      	lsls	r3, r3, #31
 80126a8:	d41b      	bmi.n	80126e2 <HAL_SPI_TransmitReceive_DMA+0x116>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80126aa:	684b      	ldr	r3, [r1, #4]
 80126ac:	482e      	ldr	r0, [pc, #184]	@ (8012768 <HAL_SPI_TransmitReceive_DMA+0x19c>)
 80126ae:	4003      	ands	r3, r0
 80126b0:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80126b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80126b4:	085b      	lsrs	r3, r3, #1
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80126b6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80126b8:	2380      	movs	r3, #128	@ 0x80
 80126ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126bc:	00db      	lsls	r3, r3, #3
 80126be:	6980      	ldr	r0, [r0, #24]
 80126c0:	4298      	cmp	r0, r3
 80126c2:	d1c9      	bne.n	8012658 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80126c4:	684b      	ldr	r3, [r1, #4]
 80126c6:	4824      	ldr	r0, [pc, #144]	@ (8012758 <HAL_SPI_TransmitReceive_DMA+0x18c>)
 80126c8:	4003      	ands	r3, r0
 80126ca:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80126cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80126ce:	07db      	lsls	r3, r3, #31
 80126d0:	d410      	bmi.n	80126f4 <HAL_SPI_TransmitReceive_DMA+0x128>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80126d2:	684b      	ldr	r3, [r1, #4]
 80126d4:	4825      	ldr	r0, [pc, #148]	@ (801276c <HAL_SPI_TransmitReceive_DMA+0x1a0>)
 80126d6:	4003      	ands	r3, r0
 80126d8:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80126da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80126dc:	085b      	lsrs	r3, r3, #1
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80126de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80126e0:	e7ba      	b.n	8012658 <HAL_SPI_TransmitReceive_DMA+0x8c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80126e2:	2380      	movs	r3, #128	@ 0x80
 80126e4:	6848      	ldr	r0, [r1, #4]
 80126e6:	01db      	lsls	r3, r3, #7
 80126e8:	4303      	orrs	r3, r0
 80126ea:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80126ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80126ee:	085b      	lsrs	r3, r3, #1
 80126f0:	3301      	adds	r3, #1
 80126f2:	e7e0      	b.n	80126b6 <HAL_SPI_TransmitReceive_DMA+0xea>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80126f4:	2380      	movs	r3, #128	@ 0x80
 80126f6:	6848      	ldr	r0, [r1, #4]
 80126f8:	019b      	lsls	r3, r3, #6
 80126fa:	4303      	orrs	r3, r0
 80126fc:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80126fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012700:	085b      	lsrs	r3, r3, #1
 8012702:	3301      	adds	r3, #1
 8012704:	e7eb      	b.n	80126de <HAL_SPI_TransmitReceive_DMA+0x112>
 8012706:	4e1a      	ldr	r6, [pc, #104]	@ (8012770 <HAL_SPI_TransmitReceive_DMA+0x1a4>)
 8012708:	4b1a      	ldr	r3, [pc, #104]	@ (8012774 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
 801270a:	e7ab      	b.n	8012664 <HAL_SPI_TransmitReceive_DMA+0x98>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801270c:	2101      	movs	r1, #1
 801270e:	6822      	ldr	r2, [r4, #0]
 8012710:	6850      	ldr	r0, [r2, #4]
 8012712:	4301      	orrs	r1, r0
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012714:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012716:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012718:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 801271a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 801271c:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 801271e:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->TxXferCount))
 8012720:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012722:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                 hspi->TxXferCount))
 8012724:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012726:	320c      	adds	r2, #12
 8012728:	f7fc fb2c 	bl	800ed84 <HAL_DMA_Start_IT>
 801272c:	2800      	cmp	r0, #0
 801272e:	d1a7      	bne.n	8012680 <HAL_SPI_TransmitReceive_DMA+0xb4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012730:	2240      	movs	r2, #64	@ 0x40
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	6819      	ldr	r1, [r3, #0]
 8012736:	4211      	tst	r1, r2
 8012738:	d102      	bne.n	8012740 <HAL_SPI_TransmitReceive_DMA+0x174>
    __HAL_SPI_ENABLE(hspi);
 801273a:	6819      	ldr	r1, [r3, #0]
 801273c:	430a      	orrs	r2, r1
 801273e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012740:	2220      	movs	r2, #32
 8012742:	6859      	ldr	r1, [r3, #4]
 8012744:	430a      	orrs	r2, r1
 8012746:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012748:	2202      	movs	r2, #2
 801274a:	6859      	ldr	r1, [r3, #4]
 801274c:	430a      	orrs	r2, r1
 801274e:	605a      	str	r2, [r3, #4]
 8012750:	e79b      	b.n	801268a <HAL_SPI_TransmitReceive_DMA+0xbe>
 8012752:	46c0      	nop			@ (mov r8, r8)
 8012754:	ffff9fff 	.word	0xffff9fff
 8012758:	ffffefff 	.word	0xffffefff
 801275c:	080128fd 	.word	0x080128fd
 8012760:	08012a09 	.word	0x08012a09
 8012764:	08012907 	.word	0x08012907
 8012768:	ffffbfff 	.word	0xffffbfff
 801276c:	ffffdfff 	.word	0xffffdfff
 8012770:	080128f1 	.word	0x080128f1
 8012774:	08012999 	.word	0x08012999

08012778 <HAL_SPI_Receive_DMA>:
{
 8012778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801277a:	0013      	movs	r3, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 801277c:	0002      	movs	r2, r0
 801277e:	325d      	adds	r2, #93	@ 0x5d
{
 8012780:	0004      	movs	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8012782:	7810      	ldrb	r0, [r2, #0]
 8012784:	b2c6      	uxtb	r6, r0
 8012786:	2801      	cmp	r0, #1
 8012788:	d000      	beq.n	801278c <HAL_SPI_Receive_DMA+0x14>
 801278a:	e099      	b.n	80128c0 <HAL_SPI_Receive_DMA+0x148>
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801278c:	68a0      	ldr	r0, [r4, #8]
 801278e:	2800      	cmp	r0, #0
 8012790:	d10d      	bne.n	80127ae <HAL_SPI_Receive_DMA+0x36>
 8012792:	2582      	movs	r5, #130	@ 0x82
 8012794:	6867      	ldr	r7, [r4, #4]
 8012796:	006d      	lsls	r5, r5, #1
 8012798:	42af      	cmp	r7, r5
 801279a:	d108      	bne.n	80127ae <HAL_SPI_Receive_DMA+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801279c:	3004      	adds	r0, #4
 801279e:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80127a0:	000a      	movs	r2, r1
 80127a2:	0020      	movs	r0, r4
 80127a4:	f7ff ff12 	bl	80125cc <HAL_SPI_TransmitReceive_DMA>
 80127a8:	0006      	movs	r6, r0
}
 80127aa:	0030      	movs	r0, r6
 80127ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80127ae:	0025      	movs	r5, r4
 80127b0:	355c      	adds	r5, #92	@ 0x5c
 80127b2:	782f      	ldrb	r7, [r5, #0]
 80127b4:	2f01      	cmp	r7, #1
 80127b6:	d100      	bne.n	80127ba <HAL_SPI_Receive_DMA+0x42>
 80127b8:	e084      	b.n	80128c4 <HAL_SPI_Receive_DMA+0x14c>
 80127ba:	2701      	movs	r7, #1
 80127bc:	702f      	strb	r7, [r5, #0]
  if ((pData == NULL) || (Size == 0U))
 80127be:	2900      	cmp	r1, #0
 80127c0:	d042      	beq.n	8012848 <HAL_SPI_Receive_DMA+0xd0>
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d040      	beq.n	8012848 <HAL_SPI_Receive_DMA+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80127c6:	2504      	movs	r5, #4
  hspi->RxXferCount = Size;
 80127c8:	0027      	movs	r7, r4
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80127ca:	7015      	strb	r5, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80127cc:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 80127ce:	1da5      	adds	r5, r4, #6
  hspi->RxXferCount = Size;
 80127d0:	3708      	adds	r7, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80127d2:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80127d4:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80127d6:	87eb      	strh	r3, [r5, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 80127d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127da:	2380      	movs	r3, #128	@ 0x80
    __HAL_SPI_DISABLE(hspi);
 80127dc:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferCount = Size;
 80127de:	9701      	str	r7, [sp, #4]
  hspi->RxISR       = NULL;
 80127e0:	64e2      	str	r2, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80127e2:	6522      	str	r2, [r4, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80127e4:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80127e6:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127e8:	021b      	lsls	r3, r3, #8
 80127ea:	4298      	cmp	r0, r3
 80127ec:	d107      	bne.n	80127fe <HAL_SPI_Receive_DMA+0x86>
    __HAL_SPI_DISABLE(hspi);
 80127ee:	682b      	ldr	r3, [r5, #0]
 80127f0:	3240      	adds	r2, #64	@ 0x40
 80127f2:	4393      	bics	r3, r2
 80127f4:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80127f6:	682b      	ldr	r3, [r5, #0]
 80127f8:	4a33      	ldr	r2, [pc, #204]	@ (80128c8 <HAL_SPI_Receive_DMA+0x150>)
 80127fa:	4013      	ands	r3, r2
 80127fc:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80127fe:	4a33      	ldr	r2, [pc, #204]	@ (80128cc <HAL_SPI_Receive_DMA+0x154>)
 8012800:	686b      	ldr	r3, [r5, #4]
 8012802:	4694      	mov	ip, r2
 8012804:	4013      	ands	r3, r2
 8012806:	606b      	str	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012808:	23e0      	movs	r3, #224	@ 0xe0
 801280a:	68e2      	ldr	r2, [r4, #12]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801280c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801280e:	00db      	lsls	r3, r3, #3
 8012810:	429a      	cmp	r2, r3
 8012812:	d91d      	bls.n	8012850 <HAL_SPI_Receive_DMA+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012814:	686b      	ldr	r3, [r5, #4]
 8012816:	4a2e      	ldr	r2, [pc, #184]	@ (80128d0 <HAL_SPI_Receive_DMA+0x158>)
 8012818:	4013      	ands	r3, r2
 801281a:	606b      	str	r3, [r5, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801281c:	4b2d      	ldr	r3, [pc, #180]	@ (80128d4 <HAL_SPI_Receive_DMA+0x15c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801281e:	350c      	adds	r5, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012820:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012822:	4b2d      	ldr	r3, [pc, #180]	@ (80128d8 <HAL_SPI_Receive_DMA+0x160>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012824:	000a      	movs	r2, r1
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012826:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012828:	4b2c      	ldr	r3, [pc, #176]	@ (80128dc <HAL_SPI_Receive_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801282a:	0029      	movs	r1, r5
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801282c:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 801282e:	2300      	movs	r3, #0
 8012830:	6383      	str	r3, [r0, #56]	@ 0x38
                                 hspi->RxXferCount))
 8012832:	9b01      	ldr	r3, [sp, #4]
 8012834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012836:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012838:	f7fc faa4 	bl	800ed84 <HAL_DMA_Start_IT>
 801283c:	2800      	cmp	r0, #0
 801283e:	d02d      	beq.n	801289c <HAL_SPI_Receive_DMA+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012840:	2310      	movs	r3, #16
 8012842:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8012844:	4313      	orrs	r3, r2
 8012846:	6623      	str	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8012848:	2300      	movs	r3, #0
 801284a:	345c      	adds	r4, #92	@ 0x5c
 801284c:	7023      	strb	r3, [r4, #0]
  return errorcode;
 801284e:	e7ac      	b.n	80127aa <HAL_SPI_Receive_DMA+0x32>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012850:	2380      	movs	r3, #128	@ 0x80
 8012852:	686a      	ldr	r2, [r5, #4]
 8012854:	015b      	lsls	r3, r3, #5
 8012856:	4313      	orrs	r3, r2
 8012858:	606b      	str	r3, [r5, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801285a:	2380      	movs	r3, #128	@ 0x80
 801285c:	6982      	ldr	r2, [r0, #24]
 801285e:	00db      	lsls	r3, r3, #3
 8012860:	429a      	cmp	r2, r3
 8012862:	d1db      	bne.n	801281c <HAL_SPI_Receive_DMA+0xa4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012864:	686b      	ldr	r3, [r5, #4]
 8012866:	4a1a      	ldr	r2, [pc, #104]	@ (80128d0 <HAL_SPI_Receive_DMA+0x158>)
 8012868:	4013      	ands	r3, r2
 801286a:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 801286c:	0023      	movs	r3, r4
 801286e:	3308      	adds	r3, #8
 8012870:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012872:	07d2      	lsls	r2, r2, #31
 8012874:	d407      	bmi.n	8012886 <HAL_SPI_Receive_DMA+0x10e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012876:	4667      	mov	r7, ip
 8012878:	686a      	ldr	r2, [r5, #4]
 801287a:	403a      	ands	r2, r7
 801287c:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 801287e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012880:	0852      	lsrs	r2, r2, #1
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012882:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012884:	e7ca      	b.n	801281c <HAL_SPI_Receive_DMA+0xa4>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012886:	686a      	ldr	r2, [r5, #4]
 8012888:	4694      	mov	ip, r2
 801288a:	2280      	movs	r2, #128	@ 0x80
 801288c:	4667      	mov	r7, ip
 801288e:	0192      	lsls	r2, r2, #6
 8012890:	433a      	orrs	r2, r7
 8012892:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012894:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8012896:	0852      	lsrs	r2, r2, #1
 8012898:	3201      	adds	r2, #1
 801289a:	e7f2      	b.n	8012882 <HAL_SPI_Receive_DMA+0x10a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801289c:	2240      	movs	r2, #64	@ 0x40
 801289e:	6823      	ldr	r3, [r4, #0]
 80128a0:	6819      	ldr	r1, [r3, #0]
 80128a2:	4211      	tst	r1, r2
 80128a4:	d102      	bne.n	80128ac <HAL_SPI_Receive_DMA+0x134>
    __HAL_SPI_ENABLE(hspi);
 80128a6:	6819      	ldr	r1, [r3, #0]
 80128a8:	430a      	orrs	r2, r1
 80128aa:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80128ac:	2220      	movs	r2, #32
 80128ae:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80128b0:	2600      	movs	r6, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80128b2:	430a      	orrs	r2, r1
 80128b4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80128b6:	2201      	movs	r2, #1
 80128b8:	6859      	ldr	r1, [r3, #4]
 80128ba:	430a      	orrs	r2, r1
 80128bc:	605a      	str	r2, [r3, #4]
 80128be:	e7c3      	b.n	8012848 <HAL_SPI_Receive_DMA+0xd0>
    errorcode = HAL_BUSY;
 80128c0:	2602      	movs	r6, #2
 80128c2:	e7c1      	b.n	8012848 <HAL_SPI_Receive_DMA+0xd0>
  __HAL_LOCK(hspi);
 80128c4:	2602      	movs	r6, #2
 80128c6:	e770      	b.n	80127aa <HAL_SPI_Receive_DMA+0x32>
 80128c8:	ffffbfff 	.word	0xffffbfff
 80128cc:	ffffdfff 	.word	0xffffdfff
 80128d0:	ffffefff 	.word	0xffffefff
 80128d4:	080128f1 	.word	0x080128f1
 80128d8:	08012999 	.word	0x08012999
 80128dc:	08012907 	.word	0x08012907

080128e0 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 80128e0:	4770      	bx	lr

080128e2 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80128e2:	4770      	bx	lr

080128e4 <SPI_DMAHalfTransmitCplt>:
{
 80128e4:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80128e6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80128e8:	f7ff fffb 	bl	80128e2 <HAL_SPI_TxHalfCpltCallback>
}
 80128ec:	bd10      	pop	{r4, pc}

080128ee <HAL_SPI_RxHalfCpltCallback>:
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80128ee:	4770      	bx	lr

080128f0 <SPI_DMAHalfReceiveCplt>:
{
 80128f0:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80128f2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80128f4:	f7ff fffb 	bl	80128ee <HAL_SPI_RxHalfCpltCallback>
}
 80128f8:	bd10      	pop	{r4, pc}

080128fa <HAL_SPI_TxRxHalfCpltCallback>:
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80128fa:	4770      	bx	lr

080128fc <SPI_DMAHalfTransmitReceiveCplt>:
{
 80128fc:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80128fe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012900:	f7ff fffb 	bl	80128fa <HAL_SPI_TxRxHalfCpltCallback>
}
 8012904:	bd10      	pop	{r4, pc}

08012906 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012906:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012908:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 801290a:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801290c:	6802      	ldr	r2, [r0, #0]
 801290e:	6853      	ldr	r3, [r2, #4]
 8012910:	438b      	bics	r3, r1
 8012912:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012914:	2310      	movs	r3, #16
 8012916:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8012918:	4313      	orrs	r3, r2
 801291a:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 801291c:	0003      	movs	r3, r0
 801291e:	2201      	movs	r2, #1
 8012920:	335d      	adds	r3, #93	@ 0x5d
 8012922:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8012924:	f7f7 fa02 	bl	8009d2c <HAL_SPI_ErrorCallback>
}
 8012928:	bd10      	pop	{r4, pc}

0801292a <SPI_DMATransmitCplt>:
{
 801292a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801292c:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801292e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8012930:	f7fb fa54 	bl	800dddc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012934:	682b      	ldr	r3, [r5, #0]
 8012936:	2520      	movs	r5, #32
 8012938:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 801293a:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801293c:	422b      	tst	r3, r5
 801293e:	d127      	bne.n	8012990 <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012940:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	6859      	ldr	r1, [r3, #4]
 8012946:	43a9      	bics	r1, r5
 8012948:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801294a:	6859      	ldr	r1, [r3, #4]
 801294c:	4381      	bics	r1, r0
 801294e:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012950:	0020      	movs	r0, r4
 8012952:	2164      	movs	r1, #100	@ 0x64
 8012954:	f7ff fa91 	bl	8011e7a <SPI_EndRxTxTransaction>
 8012958:	2800      	cmp	r0, #0
 801295a:	d002      	beq.n	8012962 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801295c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801295e:	431d      	orrs	r5, r3
 8012960:	6625      	str	r5, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012962:	68a3      	ldr	r3, [r4, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d106      	bne.n	8012976 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	6823      	ldr	r3, [r4, #0]
 801296c:	68da      	ldr	r2, [r3, #12]
 801296e:	9201      	str	r2, [sp, #4]
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	9301      	str	r3, [sp, #4]
 8012974:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8012976:	2300      	movs	r3, #0
 8012978:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801297a:	0023      	movs	r3, r4
 801297c:	2201      	movs	r2, #1
 801297e:	335d      	adds	r3, #93	@ 0x5d
 8012980:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012982:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012984:	2b00      	cmp	r3, #0
 8012986:	d003      	beq.n	8012990 <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8012988:	0020      	movs	r0, r4
 801298a:	f7f7 f9cf 	bl	8009d2c <HAL_SPI_ErrorCallback>
}
 801298e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8012990:	0020      	movs	r0, r4
 8012992:	f7f7 f9bb 	bl	8009d0c <HAL_SPI_TxCpltCallback>
 8012996:	e7fa      	b.n	801298e <SPI_DMATransmitCplt+0x64>

08012998 <SPI_DMAReceiveCplt>:
{
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801299c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 801299e:	f7fb fa1d 	bl	800dddc <HAL_GetTick>
 80129a2:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80129a4:	2020      	movs	r0, #32
 80129a6:	682b      	ldr	r3, [r5, #0]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4203      	tst	r3, r0
 80129ac:	d128      	bne.n	8012a00 <SPI_DMAReceiveCplt+0x68>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	6859      	ldr	r1, [r3, #4]
 80129b2:	4381      	bics	r1, r0
 80129b4:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80129b6:	68a1      	ldr	r1, [r4, #8]
 80129b8:	2900      	cmp	r1, #0
 80129ba:	d11e      	bne.n	80129fa <SPI_DMAReceiveCplt+0x62>
 80129bc:	3105      	adds	r1, #5
 80129be:	6860      	ldr	r0, [r4, #4]
 80129c0:	31ff      	adds	r1, #255	@ 0xff
 80129c2:	4288      	cmp	r0, r1
 80129c4:	d119      	bne.n	80129fa <SPI_DMAReceiveCplt+0x62>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80129c6:	2003      	movs	r0, #3
 80129c8:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80129ca:	4381      	bics	r1, r0
 80129cc:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80129ce:	0020      	movs	r0, r4
 80129d0:	2164      	movs	r1, #100	@ 0x64
 80129d2:	f7ff fa15 	bl	8011e00 <SPI_EndRxTransaction>
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d001      	beq.n	80129de <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80129da:	2320      	movs	r3, #32
 80129dc:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->RxXferCount = 0U;
 80129de:	0023      	movs	r3, r4
 80129e0:	2200      	movs	r2, #0
 80129e2:	3308      	adds	r3, #8
 80129e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80129e6:	3355      	adds	r3, #85	@ 0x55
 80129e8:	3201      	adds	r2, #1
 80129ea:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80129ec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d006      	beq.n	8012a00 <SPI_DMAReceiveCplt+0x68>
      HAL_SPI_ErrorCallback(hspi);
 80129f2:	0020      	movs	r0, r4
 80129f4:	f7f7 f99a 	bl	8009d2c <HAL_SPI_ErrorCallback>
}
 80129f8:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80129fa:	2001      	movs	r0, #1
 80129fc:	6859      	ldr	r1, [r3, #4]
 80129fe:	e7e4      	b.n	80129ca <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 8012a00:	0020      	movs	r0, r4
 8012a02:	f7f7 f98f 	bl	8009d24 <HAL_SPI_RxCpltCallback>
 8012a06:	e7f7      	b.n	80129f8 <SPI_DMAReceiveCplt+0x60>

08012a08 <SPI_DMATransmitReceiveCplt>:
{
 8012a08:	b570      	push	{r4, r5, r6, lr}
 8012a0a:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012a0c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8012a0e:	f7fb f9e5 	bl	800dddc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012a12:	682b      	ldr	r3, [r5, #0]
 8012a14:	2520      	movs	r5, #32
 8012a16:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8012a18:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8012a1a:	422b      	tst	r3, r5
 8012a1c:	d121      	bne.n	8012a62 <SPI_DMATransmitReceiveCplt+0x5a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012a1e:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012a20:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012a22:	684b      	ldr	r3, [r1, #4]
 8012a24:	43ab      	bics	r3, r5
 8012a26:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012a28:	2164      	movs	r1, #100	@ 0x64
 8012a2a:	f7ff fa26 	bl	8011e7a <SPI_EndRxTxTransaction>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	d002      	beq.n	8012a38 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012a32:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012a34:	431d      	orrs	r5, r3
 8012a36:	6625      	str	r5, [r4, #96]	@ 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012a38:	2103      	movs	r1, #3
 8012a3a:	6822      	ldr	r2, [r4, #0]
 8012a3c:	6853      	ldr	r3, [r2, #4]
 8012a3e:	438b      	bics	r3, r1
 8012a40:	6053      	str	r3, [r2, #4]
    hspi->RxXferCount = 0U;
 8012a42:	0022      	movs	r2, r4
    hspi->TxXferCount = 0U;
 8012a44:	2300      	movs	r3, #0
    hspi->RxXferCount = 0U;
 8012a46:	3208      	adds	r2, #8
    hspi->TxXferCount = 0U;
 8012a48:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8012a4a:	87d3      	strh	r3, [r2, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8012a4c:	0023      	movs	r3, r4
 8012a4e:	2201      	movs	r2, #1
 8012a50:	335d      	adds	r3, #93	@ 0x5d
 8012a52:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a54:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d003      	beq.n	8012a62 <SPI_DMATransmitReceiveCplt+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8012a5a:	0020      	movs	r0, r4
 8012a5c:	f7f7 f966 	bl	8009d2c <HAL_SPI_ErrorCallback>
}
 8012a60:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8012a62:	0020      	movs	r0, r4
 8012a64:	f7ff ff3c 	bl	80128e0 <HAL_SPI_TxRxCpltCallback>
 8012a68:	e7fa      	b.n	8012a60 <SPI_DMATransmitReceiveCplt+0x58>
	...

08012a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a6c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012a6e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a72:	2201      	movs	r2, #1
 8012a74:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a78:	6801      	ldr	r1, [r0, #0]
 8012a7a:	4d13      	ldr	r5, [pc, #76]	@ (8012ac8 <UART_EndRxTransfer+0x5c>)
 8012a7c:	680b      	ldr	r3, [r1, #0]
 8012a7e:	402b      	ands	r3, r5
 8012a80:	600b      	str	r3, [r1, #0]
 8012a82:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012a86:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a8a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a8e:	6802      	ldr	r2, [r0, #0]
 8012a90:	4c0e      	ldr	r4, [pc, #56]	@ (8012acc <UART_EndRxTransfer+0x60>)
 8012a92:	6893      	ldr	r3, [r2, #8]
 8012a94:	4023      	ands	r3, r4
 8012a96:	6093      	str	r3, [r2, #8]
 8012a98:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a9c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d10a      	bne.n	8012ab8 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012aa2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aa6:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012aaa:	2410      	movs	r4, #16
 8012aac:	6802      	ldr	r2, [r0, #0]
 8012aae:	6813      	ldr	r3, [r2, #0]
 8012ab0:	43a3      	bics	r3, r4
 8012ab2:	6013      	str	r3, [r2, #0]
 8012ab4:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012ab8:	0003      	movs	r3, r0
 8012aba:	2220      	movs	r2, #32
 8012abc:	338c      	adds	r3, #140	@ 0x8c
 8012abe:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012ac4:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8012ac6:	bd30      	pop	{r4, r5, pc}
 8012ac8:	fffffedf 	.word	0xfffffedf
 8012acc:	effffffe 	.word	0xeffffffe

08012ad0 <HAL_UART_DeInit>:
{
 8012ad0:	b570      	push	{r4, r5, r6, lr}
 8012ad2:	0005      	movs	r5, r0
    return HAL_ERROR;
 8012ad4:	2001      	movs	r0, #1
  if (huart == NULL)
 8012ad6:	2d00      	cmp	r5, #0
 8012ad8:	d019      	beq.n	8012b0e <HAL_UART_DeInit+0x3e>
  huart->gState = HAL_UART_STATE_BUSY;
 8012ada:	002e      	movs	r6, r5
 8012adc:	2324      	movs	r3, #36	@ 0x24
  huart->Instance->CR1 = 0x0U;
 8012ade:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8012ae0:	3688      	adds	r6, #136	@ 0x88
 8012ae2:	6033      	str	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 8012ae4:	682b      	ldr	r3, [r5, #0]
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	4382      	bics	r2, r0
 8012aea:	601a      	str	r2, [r3, #0]
  HAL_UART_MspDeInit(huart);
 8012aec:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8012aee:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8012af0:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8012af2:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012af4:	f7f7 fbb0 	bl	800a258 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012af8:	002b      	movs	r3, r5
  return HAL_OK;
 8012afa:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012afc:	3390      	adds	r3, #144	@ 0x90
 8012afe:	601c      	str	r4, [r3, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 8012b00:	3b04      	subs	r3, #4
  huart->gState = HAL_UART_STATE_RESET;
 8012b02:	6034      	str	r4, [r6, #0]
  huart->RxState = HAL_UART_STATE_RESET;
 8012b04:	601c      	str	r4, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b06:	66ec      	str	r4, [r5, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b08:	672c      	str	r4, [r5, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8012b0a:	3584      	adds	r5, #132	@ 0x84
 8012b0c:	702c      	strb	r4, [r5, #0]
}
 8012b0e:	bd70      	pop	{r4, r5, r6, pc}

08012b10 <UART_SetConfig>:
{
 8012b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b12:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012b14:	6925      	ldr	r5, [r4, #16]
 8012b16:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8012b18:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012b1a:	432a      	orrs	r2, r5
 8012b1c:	6965      	ldr	r5, [r4, #20]
 8012b1e:	69c1      	ldr	r1, [r0, #28]
 8012b20:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012b22:	6818      	ldr	r0, [r3, #0]
 8012b24:	4d5b      	ldr	r5, [pc, #364]	@ (8012c94 <UART_SetConfig+0x184>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012b26:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012b28:	4028      	ands	r0, r5
 8012b2a:	4302      	orrs	r2, r0
 8012b2c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b2e:	685a      	ldr	r2, [r3, #4]
 8012b30:	4859      	ldr	r0, [pc, #356]	@ (8012c98 <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012b32:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b34:	4002      	ands	r2, r0
 8012b36:	68e0      	ldr	r0, [r4, #12]
 8012b38:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012b3a:	4858      	ldr	r0, [pc, #352]	@ (8012c9c <UART_SetConfig+0x18c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b3c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012b3e:	4283      	cmp	r3, r0
 8012b40:	d007      	beq.n	8012b52 <UART_SetConfig+0x42>
 8012b42:	4a57      	ldr	r2, [pc, #348]	@ (8012ca0 <UART_SetConfig+0x190>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d004      	beq.n	8012b52 <UART_SetConfig+0x42>
 8012b48:	4a56      	ldr	r2, [pc, #344]	@ (8012ca4 <UART_SetConfig+0x194>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d001      	beq.n	8012b52 <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8012b4e:	6a22      	ldr	r2, [r4, #32]
 8012b50:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b52:	689a      	ldr	r2, [r3, #8]
 8012b54:	4e54      	ldr	r6, [pc, #336]	@ (8012ca8 <UART_SetConfig+0x198>)
 8012b56:	4032      	ands	r2, r6
 8012b58:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b5a:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b5c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b60:	43aa      	bics	r2, r5
 8012b62:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8012b64:	432a      	orrs	r2, r5
 8012b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b68:	4a50      	ldr	r2, [pc, #320]	@ (8012cac <UART_SetConfig+0x19c>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d100      	bne.n	8012b70 <UART_SetConfig+0x60>
 8012b6e:	e087      	b.n	8012c80 <UART_SetConfig+0x170>
 8012b70:	4a4f      	ldr	r2, [pc, #316]	@ (8012cb0 <UART_SetConfig+0x1a0>)
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d100      	bne.n	8012b78 <UART_SetConfig+0x68>
 8012b76:	e085      	b.n	8012c84 <UART_SetConfig+0x174>
 8012b78:	4a4e      	ldr	r2, [pc, #312]	@ (8012cb4 <UART_SetConfig+0x1a4>)
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d100      	bne.n	8012b80 <UART_SetConfig+0x70>
 8012b7e:	e083      	b.n	8012c88 <UART_SetConfig+0x178>
 8012b80:	4a4d      	ldr	r2, [pc, #308]	@ (8012cb8 <UART_SetConfig+0x1a8>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d100      	bne.n	8012b88 <UART_SetConfig+0x78>
 8012b86:	e082      	b.n	8012c8e <UART_SetConfig+0x17e>
 8012b88:	4283      	cmp	r3, r0
 8012b8a:	d02c      	beq.n	8012be6 <UART_SetConfig+0xd6>
 8012b8c:	4a44      	ldr	r2, [pc, #272]	@ (8012ca0 <UART_SetConfig+0x190>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d041      	beq.n	8012c16 <UART_SetConfig+0x106>
  if (UART_INSTANCE_LOWPOWER(huart))
 8012b92:	4a44      	ldr	r2, [pc, #272]	@ (8012ca4 <UART_SetConfig+0x194>)
 8012b94:	2004      	movs	r0, #4
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d026      	beq.n	8012be8 <UART_SetConfig+0xd8>
 8012b9a:	2000      	movs	r0, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012b9c:	2380      	movs	r3, #128	@ 0x80
 8012b9e:	021b      	lsls	r3, r3, #8
 8012ba0:	4299      	cmp	r1, r3
 8012ba2:	d159      	bne.n	8012c58 <UART_SetConfig+0x148>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012ba4:	f7fe fb44 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d01a      	beq.n	8012be2 <UART_SetConfig+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012bac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012bae:	4b43      	ldr	r3, [pc, #268]	@ (8012cbc <UART_SetConfig+0x1ac>)
 8012bb0:	0052      	lsls	r2, r2, #1
 8012bb2:	5ad1      	ldrh	r1, [r2, r3]
 8012bb4:	f7ed fad8 	bl	8000168 <__udivsi3>
 8012bb8:	6865      	ldr	r5, [r4, #4]
 8012bba:	0040      	lsls	r0, r0, #1
 8012bbc:	086b      	lsrs	r3, r5, #1
 8012bbe:	18c0      	adds	r0, r0, r3
 8012bc0:	0029      	movs	r1, r5
 8012bc2:	f7ed fad1 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012bc6:	0002      	movs	r2, r0
 8012bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8012cc0 <UART_SetConfig+0x1b0>)
 8012bca:	3a10      	subs	r2, #16
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d81b      	bhi.n	8012c08 <UART_SetConfig+0xf8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012bd0:	230f      	movs	r3, #15
 8012bd2:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012bd4:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012bd6:	439a      	bics	r2, r3
 8012bd8:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012bda:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8012bdc:	6822      	ldr	r2, [r4, #0]
 8012bde:	4303      	orrs	r3, r0
 8012be0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012be2:	2000      	movs	r0, #0
 8012be4:	e011      	b.n	8012c0a <UART_SetConfig+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012be6:	2010      	movs	r0, #16
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012be8:	f7fe fb22 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
 8012bec:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 8012bee:	d0f8      	beq.n	8012be2 <UART_SetConfig+0xd2>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012bf0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012bf2:	4b32      	ldr	r3, [pc, #200]	@ (8012cbc <UART_SetConfig+0x1ac>)
 8012bf4:	0052      	lsls	r2, r2, #1
 8012bf6:	5ad7      	ldrh	r7, [r2, r3]
 8012bf8:	0039      	movs	r1, r7
 8012bfa:	f7ed fab5 	bl	8000168 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012bfe:	2303      	movs	r3, #3
 8012c00:	6865      	ldr	r5, [r4, #4]
 8012c02:	436b      	muls	r3, r5
 8012c04:	4283      	cmp	r3, r0
 8012c06:	d908      	bls.n	8012c1a <UART_SetConfig+0x10a>
        ret = HAL_ERROR;
 8012c08:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8012c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8012cc4 <UART_SetConfig+0x1b4>)
 8012c0c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8012c12:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8012c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c16:	2008      	movs	r0, #8
 8012c18:	e7e6      	b.n	8012be8 <UART_SetConfig+0xd8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012c1a:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012c1c:	4283      	cmp	r3, r0
 8012c1e:	d3f3      	bcc.n	8012c08 <UART_SetConfig+0xf8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012c20:	2300      	movs	r3, #0
 8012c22:	003a      	movs	r2, r7
 8012c24:	0030      	movs	r0, r6
 8012c26:	0019      	movs	r1, r3
 8012c28:	f7ed fcaa 	bl	8000580 <__aeabi_uldivmod>
 8012c2c:	2700      	movs	r7, #0
 8012c2e:	0e06      	lsrs	r6, r0, #24
 8012c30:	020b      	lsls	r3, r1, #8
 8012c32:	4333      	orrs	r3, r6
 8012c34:	0202      	lsls	r2, r0, #8
 8012c36:	086e      	lsrs	r6, r5, #1
 8012c38:	1992      	adds	r2, r2, r6
 8012c3a:	417b      	adcs	r3, r7
 8012c3c:	0010      	movs	r0, r2
 8012c3e:	0019      	movs	r1, r3
 8012c40:	002a      	movs	r2, r5
 8012c42:	003b      	movs	r3, r7
 8012c44:	f7ed fc9c 	bl	8000580 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012c48:	4b1f      	ldr	r3, [pc, #124]	@ (8012cc8 <UART_SetConfig+0x1b8>)
 8012c4a:	18c2      	adds	r2, r0, r3
 8012c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8012ccc <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d8da      	bhi.n	8012c08 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012c52:	6823      	ldr	r3, [r4, #0]
 8012c54:	60d8      	str	r0, [r3, #12]
 8012c56:	e7c4      	b.n	8012be2 <UART_SetConfig+0xd2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012c58:	f7fe faea 	bl	8011230 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	d0c0      	beq.n	8012be2 <UART_SetConfig+0xd2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012c60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012c62:	4b16      	ldr	r3, [pc, #88]	@ (8012cbc <UART_SetConfig+0x1ac>)
 8012c64:	0052      	lsls	r2, r2, #1
 8012c66:	5ad1      	ldrh	r1, [r2, r3]
 8012c68:	f7ed fa7e 	bl	8000168 <__udivsi3>
 8012c6c:	6865      	ldr	r5, [r4, #4]
 8012c6e:	086b      	lsrs	r3, r5, #1
 8012c70:	18c0      	adds	r0, r0, r3
 8012c72:	0029      	movs	r1, r5
 8012c74:	f7ed fa78 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012c78:	0002      	movs	r2, r0
 8012c7a:	4b11      	ldr	r3, [pc, #68]	@ (8012cc0 <UART_SetConfig+0x1b0>)
 8012c7c:	3a10      	subs	r2, #16
 8012c7e:	e7e6      	b.n	8012c4e <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c80:	2001      	movs	r0, #1
 8012c82:	e78b      	b.n	8012b9c <UART_SetConfig+0x8c>
 8012c84:	2002      	movs	r0, #2
 8012c86:	e789      	b.n	8012b9c <UART_SetConfig+0x8c>
 8012c88:	2080      	movs	r0, #128	@ 0x80
 8012c8a:	0240      	lsls	r0, r0, #9
 8012c8c:	e786      	b.n	8012b9c <UART_SetConfig+0x8c>
 8012c8e:	2080      	movs	r0, #128	@ 0x80
 8012c90:	0280      	lsls	r0, r0, #10
 8012c92:	e783      	b.n	8012b9c <UART_SetConfig+0x8c>
 8012c94:	cfff69f3 	.word	0xcfff69f3
 8012c98:	ffffcfff 	.word	0xffffcfff
 8012c9c:	40008000 	.word	0x40008000
 8012ca0:	40008400 	.word	0x40008400
 8012ca4:	40008c00 	.word	0x40008c00
 8012ca8:	11fff4ff 	.word	0x11fff4ff
 8012cac:	40013800 	.word	0x40013800
 8012cb0:	40004400 	.word	0x40004400
 8012cb4:	40004800 	.word	0x40004800
 8012cb8:	40004c00 	.word	0x40004c00
 8012cbc:	0801fe24 	.word	0x0801fe24
 8012cc0:	0000ffef 	.word	0x0000ffef
 8012cc4:	00010001 	.word	0x00010001
 8012cc8:	fffffd00 	.word	0xfffffd00
 8012ccc:	000ffcff 	.word	0x000ffcff

08012cd0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012cd0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8012cd2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012cd4:	071a      	lsls	r2, r3, #28
 8012cd6:	d506      	bpl.n	8012ce6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012cd8:	6801      	ldr	r1, [r0, #0]
 8012cda:	4c28      	ldr	r4, [pc, #160]	@ (8012d7c <UART_AdvFeatureConfig+0xac>)
 8012cdc:	684a      	ldr	r2, [r1, #4]
 8012cde:	4022      	ands	r2, r4
 8012ce0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8012ce2:	4322      	orrs	r2, r4
 8012ce4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012ce6:	07da      	lsls	r2, r3, #31
 8012ce8:	d506      	bpl.n	8012cf8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012cea:	6801      	ldr	r1, [r0, #0]
 8012cec:	4c24      	ldr	r4, [pc, #144]	@ (8012d80 <UART_AdvFeatureConfig+0xb0>)
 8012cee:	684a      	ldr	r2, [r1, #4]
 8012cf0:	4022      	ands	r2, r4
 8012cf2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8012cf4:	4322      	orrs	r2, r4
 8012cf6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012cf8:	079a      	lsls	r2, r3, #30
 8012cfa:	d506      	bpl.n	8012d0a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012cfc:	6801      	ldr	r1, [r0, #0]
 8012cfe:	4c21      	ldr	r4, [pc, #132]	@ (8012d84 <UART_AdvFeatureConfig+0xb4>)
 8012d00:	684a      	ldr	r2, [r1, #4]
 8012d02:	4022      	ands	r2, r4
 8012d04:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012d06:	4322      	orrs	r2, r4
 8012d08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012d0a:	075a      	lsls	r2, r3, #29
 8012d0c:	d506      	bpl.n	8012d1c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012d0e:	6801      	ldr	r1, [r0, #0]
 8012d10:	4c1d      	ldr	r4, [pc, #116]	@ (8012d88 <UART_AdvFeatureConfig+0xb8>)
 8012d12:	684a      	ldr	r2, [r1, #4]
 8012d14:	4022      	ands	r2, r4
 8012d16:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8012d18:	4322      	orrs	r2, r4
 8012d1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012d1c:	06da      	lsls	r2, r3, #27
 8012d1e:	d506      	bpl.n	8012d2e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012d20:	6801      	ldr	r1, [r0, #0]
 8012d22:	4c1a      	ldr	r4, [pc, #104]	@ (8012d8c <UART_AdvFeatureConfig+0xbc>)
 8012d24:	688a      	ldr	r2, [r1, #8]
 8012d26:	4022      	ands	r2, r4
 8012d28:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8012d2a:	4322      	orrs	r2, r4
 8012d2c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012d2e:	069a      	lsls	r2, r3, #26
 8012d30:	d506      	bpl.n	8012d40 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d32:	6801      	ldr	r1, [r0, #0]
 8012d34:	4c16      	ldr	r4, [pc, #88]	@ (8012d90 <UART_AdvFeatureConfig+0xc0>)
 8012d36:	688a      	ldr	r2, [r1, #8]
 8012d38:	4022      	ands	r2, r4
 8012d3a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8012d3c:	4322      	orrs	r2, r4
 8012d3e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d40:	065a      	lsls	r2, r3, #25
 8012d42:	d510      	bpl.n	8012d66 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d44:	6801      	ldr	r1, [r0, #0]
 8012d46:	4d13      	ldr	r5, [pc, #76]	@ (8012d94 <UART_AdvFeatureConfig+0xc4>)
 8012d48:	684a      	ldr	r2, [r1, #4]
 8012d4a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8012d4c:	402a      	ands	r2, r5
 8012d4e:	4322      	orrs	r2, r4
 8012d50:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d52:	2280      	movs	r2, #128	@ 0x80
 8012d54:	0352      	lsls	r2, r2, #13
 8012d56:	4294      	cmp	r4, r2
 8012d58:	d105      	bne.n	8012d66 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d5a:	684a      	ldr	r2, [r1, #4]
 8012d5c:	4c0e      	ldr	r4, [pc, #56]	@ (8012d98 <UART_AdvFeatureConfig+0xc8>)
 8012d5e:	4022      	ands	r2, r4
 8012d60:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8012d62:	4322      	orrs	r2, r4
 8012d64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d66:	061b      	lsls	r3, r3, #24
 8012d68:	d506      	bpl.n	8012d78 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d6a:	6802      	ldr	r2, [r0, #0]
 8012d6c:	490b      	ldr	r1, [pc, #44]	@ (8012d9c <UART_AdvFeatureConfig+0xcc>)
 8012d6e:	6853      	ldr	r3, [r2, #4]
 8012d70:	400b      	ands	r3, r1
 8012d72:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8012d74:	430b      	orrs	r3, r1
 8012d76:	6053      	str	r3, [r2, #4]
}
 8012d78:	bd30      	pop	{r4, r5, pc}
 8012d7a:	46c0      	nop			@ (mov r8, r8)
 8012d7c:	ffff7fff 	.word	0xffff7fff
 8012d80:	fffdffff 	.word	0xfffdffff
 8012d84:	fffeffff 	.word	0xfffeffff
 8012d88:	fffbffff 	.word	0xfffbffff
 8012d8c:	ffffefff 	.word	0xffffefff
 8012d90:	ffffdfff 	.word	0xffffdfff
 8012d94:	ffefffff 	.word	0xffefffff
 8012d98:	ff9fffff 	.word	0xff9fffff
 8012d9c:	fff7ffff 	.word	0xfff7ffff

08012da0 <UART_WaitOnFlagUntilTimeout>:
{
 8012da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012da2:	0004      	movs	r4, r0
 8012da4:	000d      	movs	r5, r1
 8012da6:	0017      	movs	r7, r2
 8012da8:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012daa:	6822      	ldr	r2, [r4, #0]
 8012dac:	69d3      	ldr	r3, [r2, #28]
 8012dae:	402b      	ands	r3, r5
 8012db0:	1b5b      	subs	r3, r3, r5
 8012db2:	4259      	negs	r1, r3
 8012db4:	414b      	adcs	r3, r1
 8012db6:	42bb      	cmp	r3, r7
 8012db8:	d001      	beq.n	8012dbe <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8012dba:	2000      	movs	r0, #0
 8012dbc:	e026      	b.n	8012e0c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8012dbe:	9b08      	ldr	r3, [sp, #32]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	d0f3      	beq.n	8012dac <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012dc4:	f7fb f80a 	bl	800dddc <HAL_GetTick>
 8012dc8:	9b00      	ldr	r3, [sp, #0]
 8012dca:	1ac0      	subs	r0, r0, r3
 8012dcc:	9b08      	ldr	r3, [sp, #32]
 8012dce:	4298      	cmp	r0, r3
 8012dd0:	d82d      	bhi.n	8012e2e <UART_WaitOnFlagUntilTimeout+0x8e>
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d02b      	beq.n	8012e2e <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012dd6:	6823      	ldr	r3, [r4, #0]
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	0752      	lsls	r2, r2, #29
 8012ddc:	d5e5      	bpl.n	8012daa <UART_WaitOnFlagUntilTimeout+0xa>
 8012dde:	002a      	movs	r2, r5
 8012de0:	2140      	movs	r1, #64	@ 0x40
 8012de2:	3a40      	subs	r2, #64	@ 0x40
 8012de4:	438a      	bics	r2, r1
 8012de6:	d0e0      	beq.n	8012daa <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012de8:	69da      	ldr	r2, [r3, #28]
 8012dea:	2608      	movs	r6, #8
 8012dec:	0011      	movs	r1, r2
 8012dee:	4031      	ands	r1, r6
 8012df0:	9101      	str	r1, [sp, #4]
 8012df2:	4232      	tst	r2, r6
 8012df4:	d00b      	beq.n	8012e0e <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 8012df6:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012df8:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8012dfa:	f7ff fe37 	bl	8012a6c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012dfe:	0023      	movs	r3, r4
 8012e00:	3390      	adds	r3, #144	@ 0x90
 8012e02:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8012e04:	2300      	movs	r3, #0
          return HAL_ERROR;
 8012e06:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8012e08:	3484      	adds	r4, #132	@ 0x84
 8012e0a:	7023      	strb	r3, [r4, #0]
}
 8012e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012e0e:	2280      	movs	r2, #128	@ 0x80
 8012e10:	69d9      	ldr	r1, [r3, #28]
 8012e12:	0112      	lsls	r2, r2, #4
 8012e14:	4211      	tst	r1, r2
 8012e16:	d0c8      	beq.n	8012daa <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e18:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8012e1a:	0020      	movs	r0, r4
 8012e1c:	f7ff fe26 	bl	8012a6c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e20:	0023      	movs	r3, r4
 8012e22:	2220      	movs	r2, #32
 8012e24:	3390      	adds	r3, #144	@ 0x90
 8012e26:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8012e28:	9b01      	ldr	r3, [sp, #4]
 8012e2a:	3484      	adds	r4, #132	@ 0x84
 8012e2c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8012e2e:	2003      	movs	r0, #3
 8012e30:	e7ec      	b.n	8012e0c <UART_WaitOnFlagUntilTimeout+0x6c>

08012e32 <HAL_UART_Transmit>:
{
 8012e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e34:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8012e36:	0002      	movs	r2, r0
{
 8012e38:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 8012e3a:	3288      	adds	r2, #136	@ 0x88
{
 8012e3c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8012e3e:	6813      	ldr	r3, [r2, #0]
{
 8012e40:	0004      	movs	r4, r0
 8012e42:	000d      	movs	r5, r1
    return HAL_BUSY;
 8012e44:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8012e46:	2b20      	cmp	r3, #32
 8012e48:	d139      	bne.n	8012ebe <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 8012e4a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8012e4c:	2900      	cmp	r1, #0
 8012e4e:	d036      	beq.n	8012ebe <HAL_UART_Transmit+0x8c>
 8012e50:	2f00      	cmp	r7, #0
 8012e52:	d034      	beq.n	8012ebe <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e54:	2380      	movs	r3, #128	@ 0x80
 8012e56:	68a1      	ldr	r1, [r4, #8]
 8012e58:	015b      	lsls	r3, r3, #5
 8012e5a:	4299      	cmp	r1, r3
 8012e5c:	d104      	bne.n	8012e68 <HAL_UART_Transmit+0x36>
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d101      	bne.n	8012e68 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8012e64:	4205      	tst	r5, r0
 8012e66:	d12a      	bne.n	8012ebe <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e68:	0023      	movs	r3, r4
 8012e6a:	2600      	movs	r6, #0
 8012e6c:	3390      	adds	r3, #144	@ 0x90
 8012e6e:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012e70:	2321      	movs	r3, #33	@ 0x21
 8012e72:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012e74:	f7fa ffb2 	bl	800dddc <HAL_GetTick>
    huart->TxXferSize  = Size;
 8012e78:	0023      	movs	r3, r4
 8012e7a:	3354      	adds	r3, #84	@ 0x54
 8012e7c:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8012e7e:	3302      	adds	r3, #2
 8012e80:	9303      	str	r3, [sp, #12]
 8012e82:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e84:	2380      	movs	r3, #128	@ 0x80
 8012e86:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8012e88:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e8a:	015b      	lsls	r3, r3, #5
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d104      	bne.n	8012e9a <HAL_UART_Transmit+0x68>
 8012e90:	6923      	ldr	r3, [r4, #16]
 8012e92:	42b3      	cmp	r3, r6
 8012e94:	d101      	bne.n	8012e9a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8012e96:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8012e98:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8012e9a:	0023      	movs	r3, r4
 8012e9c:	3356      	adds	r3, #86	@ 0x56
 8012e9e:	881b      	ldrh	r3, [r3, #0]
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d10d      	bne.n	8012ec2 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012ea6:	9b05      	ldr	r3, [sp, #20]
 8012ea8:	0020      	movs	r0, r4
 8012eaa:	9300      	str	r3, [sp, #0]
 8012eac:	2140      	movs	r1, #64	@ 0x40
 8012eae:	9b04      	ldr	r3, [sp, #16]
 8012eb0:	f7ff ff76 	bl	8012da0 <UART_WaitOnFlagUntilTimeout>
 8012eb4:	2320      	movs	r3, #32
 8012eb6:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 8012eb8:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d10e      	bne.n	8012edc <HAL_UART_Transmit+0xaa>
}
 8012ebe:	b007      	add	sp, #28
 8012ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012ec2:	9b05      	ldr	r3, [sp, #20]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	2180      	movs	r1, #128	@ 0x80
 8012eca:	0020      	movs	r0, r4
 8012ecc:	9b04      	ldr	r3, [sp, #16]
 8012ece:	f7ff ff67 	bl	8012da0 <UART_WaitOnFlagUntilTimeout>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d004      	beq.n	8012ee0 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8012ed6:	2320      	movs	r3, #32
 8012ed8:	3488      	adds	r4, #136	@ 0x88
 8012eda:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 8012edc:	2003      	movs	r0, #3
 8012ede:	e7ee      	b.n	8012ebe <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012ee0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8012ee2:	2d00      	cmp	r5, #0
 8012ee4:	d10b      	bne.n	8012efe <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012ee6:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8012ee8:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012eea:	05db      	lsls	r3, r3, #23
 8012eec:	0ddb      	lsrs	r3, r3, #23
 8012eee:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8012ef0:	9b03      	ldr	r3, [sp, #12]
 8012ef2:	9a03      	ldr	r2, [sp, #12]
 8012ef4:	881b      	ldrh	r3, [r3, #0]
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	8013      	strh	r3, [r2, #0]
 8012efc:	e7cd      	b.n	8012e9a <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012efe:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8012f00:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012f02:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8012f04:	e7f4      	b.n	8012ef0 <HAL_UART_Transmit+0xbe>
	...

08012f08 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f08:	0003      	movs	r3, r0
{
 8012f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f0c:	2600      	movs	r6, #0
{
 8012f0e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f10:	3390      	adds	r3, #144	@ 0x90
 8012f12:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8012f14:	f7fa ff62 	bl	800dddc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f18:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8012f1a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	071b      	lsls	r3, r3, #28
 8012f20:	d51f      	bpl.n	8012f62 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012f22:	2180      	movs	r1, #128	@ 0x80
 8012f24:	4b28      	ldr	r3, [pc, #160]	@ (8012fc8 <UART_CheckIdleState+0xc0>)
 8012f26:	0032      	movs	r2, r6
 8012f28:	9300      	str	r3, [sp, #0]
 8012f2a:	0389      	lsls	r1, r1, #14
 8012f2c:	0003      	movs	r3, r0
 8012f2e:	0020      	movs	r0, r4
 8012f30:	f7ff ff36 	bl	8012da0 <UART_WaitOnFlagUntilTimeout>
 8012f34:	42b0      	cmp	r0, r6
 8012f36:	d014      	beq.n	8012f62 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012f42:	2080      	movs	r0, #128	@ 0x80
 8012f44:	6822      	ldr	r2, [r4, #0]
 8012f46:	6813      	ldr	r3, [r2, #0]
 8012f48:	4383      	bics	r3, r0
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8012f50:	0023      	movs	r3, r4
 8012f52:	2220      	movs	r2, #32
 8012f54:	3388      	adds	r3, #136	@ 0x88
 8012f56:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8012f58:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	3484      	adds	r4, #132	@ 0x84
 8012f5e:	7023      	strb	r3, [r4, #0]
}
 8012f60:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012f62:	0026      	movs	r6, r4
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	368c      	adds	r6, #140	@ 0x8c
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	075b      	lsls	r3, r3, #29
 8012f6c:	d523      	bpl.n	8012fb6 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012f6e:	2180      	movs	r1, #128	@ 0x80
 8012f70:	4b15      	ldr	r3, [pc, #84]	@ (8012fc8 <UART_CheckIdleState+0xc0>)
 8012f72:	2200      	movs	r2, #0
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	0020      	movs	r0, r4
 8012f78:	002b      	movs	r3, r5
 8012f7a:	03c9      	lsls	r1, r1, #15
 8012f7c:	f7ff ff10 	bl	8012da0 <UART_WaitOnFlagUntilTimeout>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d018      	beq.n	8012fb6 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f84:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f88:	2201      	movs	r2, #1
 8012f8a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f8e:	6821      	ldr	r1, [r4, #0]
 8012f90:	4d0e      	ldr	r5, [pc, #56]	@ (8012fcc <UART_CheckIdleState+0xc4>)
 8012f92:	680b      	ldr	r3, [r1, #0]
 8012f94:	402b      	ands	r3, r5
 8012f96:	600b      	str	r3, [r1, #0]
 8012f98:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f9c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fa0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fa4:	6821      	ldr	r1, [r4, #0]
 8012fa6:	688b      	ldr	r3, [r1, #8]
 8012fa8:	4393      	bics	r3, r2
 8012faa:	608b      	str	r3, [r1, #8]
 8012fac:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8012fb0:	2320      	movs	r3, #32
 8012fb2:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8012fb4:	e7d0      	b.n	8012f58 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8012fb6:	0023      	movs	r3, r4
 8012fb8:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fba:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8012fbc:	3388      	adds	r3, #136	@ 0x88
 8012fbe:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8012fc0:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fc2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012fc4:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8012fc6:	e7c8      	b.n	8012f5a <UART_CheckIdleState+0x52>
 8012fc8:	01ffffff 	.word	0x01ffffff
 8012fcc:	fffffedf 	.word	0xfffffedf

08012fd0 <HAL_HalfDuplex_Init>:
{
 8012fd0:	b570      	push	{r4, r5, r6, lr}
 8012fd2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8012fd4:	d101      	bne.n	8012fda <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 8012fd6:	2001      	movs	r0, #1
}
 8012fd8:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8012fda:	0005      	movs	r5, r0
 8012fdc:	3588      	adds	r5, #136	@ 0x88
 8012fde:	682b      	ldr	r3, [r5, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d104      	bne.n	8012fee <HAL_HalfDuplex_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8012fe4:	0002      	movs	r2, r0
 8012fe6:	3284      	adds	r2, #132	@ 0x84
 8012fe8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8012fea:	f7f7 f8f1 	bl	800a1d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8012fee:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8012ff0:	2101      	movs	r1, #1
 8012ff2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012ff4:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8012ff6:	6813      	ldr	r3, [r2, #0]
 8012ff8:	438b      	bics	r3, r1
 8012ffa:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012ffc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <HAL_HalfDuplex_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8013002:	0020      	movs	r0, r4
 8013004:	f7ff fe64 	bl	8012cd0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013008:	0020      	movs	r0, r4
 801300a:	f7ff fd81 	bl	8012b10 <UART_SetConfig>
 801300e:	2801      	cmp	r0, #1
 8013010:	d0e1      	beq.n	8012fd6 <HAL_HalfDuplex_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013012:	6823      	ldr	r3, [r4, #0]
 8013014:	4909      	ldr	r1, [pc, #36]	@ (801303c <HAL_HalfDuplex_Init+0x6c>)
 8013016:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8013018:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801301a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 801301c:	2122      	movs	r1, #34	@ 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801301e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8013020:	689a      	ldr	r2, [r3, #8]
 8013022:	438a      	bics	r2, r1
 8013024:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8013026:	2208      	movs	r2, #8
 8013028:	6899      	ldr	r1, [r3, #8]
 801302a:	430a      	orrs	r2, r1
 801302c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801302e:	2201      	movs	r2, #1
 8013030:	6819      	ldr	r1, [r3, #0]
 8013032:	430a      	orrs	r2, r1
 8013034:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013036:	f7ff ff67 	bl	8012f08 <UART_CheckIdleState>
 801303a:	e7cd      	b.n	8012fd8 <HAL_HalfDuplex_Init+0x8>
 801303c:	ffffb7ff 	.word	0xffffb7ff

08013040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013042:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013044:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8013046:	0004      	movs	r4, r0
 8013048:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801304a:	2b00      	cmp	r3, #0
 801304c:	d104      	bne.n	8013058 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 801304e:	2001      	movs	r0, #1
 8013050:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8013052:	3468      	adds	r4, #104	@ 0x68
 8013054:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013056:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013058:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801305a:	4e0b      	ldr	r6, [pc, #44]	@ (8013088 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801305c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801305e:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8013060:	4d0a      	ldr	r5, [pc, #40]	@ (801308c <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013062:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013064:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8013066:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013068:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801306a:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801306c:	f7ed f906 	bl	800027c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013070:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013072:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013074:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013076:	0f5b      	lsrs	r3, r3, #29
 8013078:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 801307a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801307c:	00c0      	lsls	r0, r0, #3
 801307e:	f7ed f8fd 	bl	800027c <__divsi3>
 8013082:	b280      	uxth	r0, r0
}
 8013084:	e7e5      	b.n	8013052 <UARTEx_SetNbDataToProcess+0x12>
 8013086:	46c0      	nop			@ (mov r8, r8)
 8013088:	0801fe44 	.word	0x0801fe44
 801308c:	0801fe3c 	.word	0x0801fe3c

08013090 <HAL_UARTEx_DisableFifoMode>:
{
 8013090:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8013092:	0004      	movs	r4, r0
 8013094:	3484      	adds	r4, #132	@ 0x84
 8013096:	7822      	ldrb	r2, [r4, #0]
{
 8013098:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 801309a:	2002      	movs	r0, #2
 801309c:	2a01      	cmp	r2, #1
 801309e:	d011      	beq.n	80130c4 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80130a0:	001d      	movs	r5, r3
 80130a2:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80130a4:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80130a6:	3588      	adds	r5, #136	@ 0x88
 80130a8:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80130ae:	6810      	ldr	r0, [r2, #0]
 80130b0:	43b0      	bics	r0, r6
 80130b2:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80130b4:	4804      	ldr	r0, [pc, #16]	@ (80130c8 <HAL_UARTEx_DisableFifoMode+0x38>)
 80130b6:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80130b8:	2000      	movs	r0, #0
 80130ba:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 80130bc:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130be:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80130c0:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 80130c2:	7020      	strb	r0, [r4, #0]
}
 80130c4:	bd70      	pop	{r4, r5, r6, pc}
 80130c6:	46c0      	nop			@ (mov r8, r8)
 80130c8:	dfffffff 	.word	0xdfffffff

080130cc <HAL_UARTEx_SetTxFifoThreshold>:
{
 80130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80130ce:	0005      	movs	r5, r0
 80130d0:	3584      	adds	r5, #132	@ 0x84
{
 80130d2:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80130d4:	7829      	ldrb	r1, [r5, #0]
 80130d6:	2202      	movs	r2, #2
 80130d8:	2901      	cmp	r1, #1
 80130da:	d015      	beq.n	8013108 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 80130dc:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 80130de:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130e0:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80130e2:	3688      	adds	r6, #136	@ 0x88
 80130e4:	3222      	adds	r2, #34	@ 0x22
 80130e6:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80130e8:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 80130ea:	6822      	ldr	r2, [r4, #0]
 80130ec:	438a      	bics	r2, r1
 80130ee:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80130f0:	68a1      	ldr	r1, [r4, #8]
 80130f2:	00c9      	lsls	r1, r1, #3
 80130f4:	08c9      	lsrs	r1, r1, #3
 80130f6:	4319      	orrs	r1, r3
 80130f8:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 80130fa:	f7ff ffa1 	bl	8013040 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80130fe:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8013100:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013102:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013104:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8013106:	702a      	strb	r2, [r5, #0]
}
 8013108:	0010      	movs	r0, r2
 801310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801310c <HAL_UARTEx_SetRxFifoThreshold>:
{
 801310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 801310e:	0005      	movs	r5, r0
 8013110:	3584      	adds	r5, #132	@ 0x84
{
 8013112:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8013114:	7829      	ldrb	r1, [r5, #0]
 8013116:	2302      	movs	r3, #2
 8013118:	2901      	cmp	r1, #1
 801311a:	d015      	beq.n	8013148 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 801311c:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 801311e:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013120:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013122:	3688      	adds	r6, #136	@ 0x88
 8013124:	3322      	adds	r3, #34	@ 0x22
 8013126:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013128:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 801312a:	6823      	ldr	r3, [r4, #0]
 801312c:	438b      	bics	r3, r1
 801312e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013130:	68a1      	ldr	r1, [r4, #8]
 8013132:	4b06      	ldr	r3, [pc, #24]	@ (801314c <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8013134:	4019      	ands	r1, r3
 8013136:	4311      	orrs	r1, r2
 8013138:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 801313a:	f7ff ff81 	bl	8013040 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 801313e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013140:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013142:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8013144:	2300      	movs	r3, #0
 8013146:	702b      	strb	r3, [r5, #0]
}
 8013148:	0018      	movs	r0, r3
 801314a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801314c:	f1ffffff 	.word	0xf1ffffff

08013150 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8013150:	0003      	movs	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013152:	2000      	movs	r0, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8013154:	4a01      	ldr	r2, [pc, #4]	@ (801315c <USB_EnableGlobalInt+0xc>)
  USBx->ISTR = 0U;
 8013156:	6458      	str	r0, [r3, #68]	@ 0x44
  USBx->CNTR = winterruptmask;
 8013158:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 801315a:	4770      	bx	lr
 801315c:	0000bf80 	.word	0x0000bf80

08013160 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8013160:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8013162:	4a02      	ldr	r2, [pc, #8]	@ (801316c <USB_DisableGlobalInt+0xc>)
 8013164:	4013      	ands	r3, r2
 8013166:	6403      	str	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8013168:	2000      	movs	r0, #0
 801316a:	4770      	bx	lr
 801316c:	ffff407f 	.word	0xffff407f

08013170 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8013170:	b082      	sub	sp, #8
 8013172:	9100      	str	r1, [sp, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8013174:	2101      	movs	r1, #1
 8013176:	6401      	str	r1, [r0, #64]	@ 0x40
{
 8013178:	9201      	str	r2, [sp, #4]

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 801317a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 801317c:	0003      	movs	r3, r0
  USBx->CNTR &= ~USB_CNTR_USBRST;
 801317e:	438a      	bics	r2, r1
 8013180:	6402      	str	r2, [r0, #64]	@ 0x40
    USBx->CNTR &= ~USB_CNTR_HOST;
 8013182:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8013184:	408a      	lsls	r2, r1
 8013186:	40ca      	lsrs	r2, r1
 8013188:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801318a:	2000      	movs	r0, #0
 801318c:	6458      	str	r0, [r3, #68]	@ 0x44

  return ret;
}
 801318e:	b002      	add	sp, #8
 8013190:	4770      	bx	lr

08013192 <USB_FlushTxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8013192:	2000      	movs	r0, #0
 8013194:	4770      	bx	lr

08013196 <USB_FlushRxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8013196:	2000      	movs	r0, #0
 8013198:	4770      	bx	lr
	...

0801319c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 801319c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 801319e:	2401      	movs	r4, #1
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80131a0:	780e      	ldrb	r6, [r1, #0]
 80131a2:	00b3      	lsls	r3, r6, #2
 80131a4:	18c3      	adds	r3, r0, r3
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	4896      	ldr	r0, [pc, #600]	@ (8013404 <USB_ActivateEndpoint+0x268>)
 80131aa:	4002      	ands	r2, r0
  switch (ep->type)
 80131ac:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 80131ae:	9400      	str	r4, [sp, #0]
  switch (ep->type)
 80131b0:	2803      	cmp	r0, #3
 80131b2:	d807      	bhi.n	80131c4 <USB_ActivateEndpoint+0x28>
 80131b4:	f7ec ffba 	bl	800012c <__gnu_thumb1_case_uqi>
 80131b8:	34373a02 	.word	0x34373a02
      wEpRegVal |= USB_EP_CONTROL;
 80131bc:	2480      	movs	r4, #128	@ 0x80
 80131be:	00a4      	lsls	r4, r4, #2
 80131c0:	4322      	orrs	r2, r4
  HAL_StatusTypeDef ret = HAL_OK;
 80131c2:	9000      	str	r0, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 80131c4:	4c90      	ldr	r4, [pc, #576]	@ (8013408 <USB_ActivateEndpoint+0x26c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80131c6:	4d91      	ldr	r5, [pc, #580]	@ (801340c <USB_ActivateEndpoint+0x270>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 80131c8:	4322      	orrs	r2, r4
 80131ca:	601a      	str	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80131cc:	681a      	ldr	r2, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80131ce:	4f90      	ldr	r7, [pc, #576]	@ (8013410 <USB_ActivateEndpoint+0x274>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80131d0:	402a      	ands	r2, r5
 80131d2:	4332      	orrs	r2, r6
 80131d4:	4322      	orrs	r2, r4
 80131d6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80131d8:	00f2      	lsls	r2, r6, #3
 80131da:	19d2      	adds	r2, r2, r7
  if (ep->doublebuffer == 0U)
 80131dc:	7b0f      	ldrb	r7, [r1, #12]
 80131de:	2f00      	cmp	r7, #0
 80131e0:	d166      	bne.n	80132b0 <USB_ActivateEndpoint+0x114>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80131e2:	88cf      	ldrh	r7, [r1, #6]
 80131e4:	08bf      	lsrs	r7, r7, #2
 80131e6:	00bf      	lsls	r7, r7, #2
 80131e8:	9701      	str	r7, [sp, #4]
    if (ep->is_in != 0U)
 80131ea:	784f      	ldrb	r7, [r1, #1]
 80131ec:	2f00      	cmp	r7, #0
 80131ee:	d025      	beq.n	801323c <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80131f0:	6811      	ldr	r1, [r2, #0]
 80131f2:	9e01      	ldr	r6, [sp, #4]
 80131f4:	0c09      	lsrs	r1, r1, #16
 80131f6:	0409      	lsls	r1, r1, #16
 80131f8:	6011      	str	r1, [r2, #0]
 80131fa:	6811      	ldr	r1, [r2, #0]
 80131fc:	4331      	orrs	r1, r6
 80131fe:	6011      	str	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	0652      	lsls	r2, r2, #25
 8013204:	d504      	bpl.n	8013210 <USB_ActivateEndpoint+0x74>
 8013206:	6819      	ldr	r1, [r3, #0]
 8013208:	4a82      	ldr	r2, [pc, #520]	@ (8013414 <USB_ActivateEndpoint+0x278>)
 801320a:	4029      	ands	r1, r5
 801320c:	430a      	orrs	r2, r1
 801320e:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013210:	4d81      	ldr	r5, [pc, #516]	@ (8013418 <USB_ActivateEndpoint+0x27c>)
 8013212:	2801      	cmp	r0, #1
 8013214:	d00c      	beq.n	8013230 <USB_ActivateEndpoint+0x94>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013216:	2220      	movs	r2, #32
 8013218:	6819      	ldr	r1, [r3, #0]
 801321a:	4029      	ands	r1, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801321c:	404a      	eors	r2, r1
 801321e:	e009      	b.n	8013234 <USB_ActivateEndpoint+0x98>
      wEpRegVal |= USB_EP_INTERRUPT;
 8013220:	24c0      	movs	r4, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013222:	00e4      	lsls	r4, r4, #3
 8013224:	4322      	orrs	r2, r4
  switch (ep->type)
 8013226:	2400      	movs	r4, #0
 8013228:	9400      	str	r4, [sp, #0]
 801322a:	e7cb      	b.n	80131c4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801322c:	2480      	movs	r4, #128	@ 0x80
 801322e:	e7f8      	b.n	8013222 <USB_ActivateEndpoint+0x86>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	402a      	ands	r2, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013234:	4322      	orrs	r2, r4
 8013236:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8013238:	9800      	ldr	r0, [sp, #0]
 801323a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801323c:	6850      	ldr	r0, [r2, #4]
 801323e:	9f01      	ldr	r7, [sp, #4]
 8013240:	0c00      	lsrs	r0, r0, #16
 8013242:	0400      	lsls	r0, r0, #16
 8013244:	6050      	str	r0, [r2, #4]
 8013246:	6850      	ldr	r0, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8013248:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801324a:	4338      	orrs	r0, r7
 801324c:	6050      	str	r0, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801324e:	6850      	ldr	r0, [r2, #4]
 8013250:	0180      	lsls	r0, r0, #6
 8013252:	0980      	lsrs	r0, r0, #6
 8013254:	6050      	str	r0, [r2, #4]
 8013256:	2900      	cmp	r1, #0
 8013258:	d105      	bne.n	8013266 <USB_ActivateEndpoint+0xca>
 801325a:	6850      	ldr	r0, [r2, #4]
 801325c:	2180      	movs	r1, #128	@ 0x80
 801325e:	0609      	lsls	r1, r1, #24
 8013260:	4301      	orrs	r1, r0
 8013262:	6051      	str	r1, [r2, #4]
 8013264:	e009      	b.n	801327a <USB_ActivateEndpoint+0xde>
 8013266:	293e      	cmp	r1, #62	@ 0x3e
 8013268:	d818      	bhi.n	801329c <USB_ActivateEndpoint+0x100>
 801326a:	2701      	movs	r7, #1
 801326c:	0848      	lsrs	r0, r1, #1
 801326e:	4039      	ands	r1, r7
 8013270:	1840      	adds	r0, r0, r1
 8013272:	6851      	ldr	r1, [r2, #4]
 8013274:	0680      	lsls	r0, r0, #26
 8013276:	4308      	orrs	r0, r1
 8013278:	6050      	str	r0, [r2, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801327a:	681a      	ldr	r2, [r3, #0]
 801327c:	0452      	lsls	r2, r2, #17
 801327e:	d504      	bpl.n	801328a <USB_ActivateEndpoint+0xee>
 8013280:	6819      	ldr	r1, [r3, #0]
 8013282:	4a66      	ldr	r2, [pc, #408]	@ (801341c <USB_ActivateEndpoint+0x280>)
 8013284:	4029      	ands	r1, r5
 8013286:	430a      	orrs	r2, r1
 8013288:	601a      	str	r2, [r3, #0]
      if (ep->num == 0U)
 801328a:	4a65      	ldr	r2, [pc, #404]	@ (8013420 <USB_ActivateEndpoint+0x284>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801328c:	6819      	ldr	r1, [r3, #0]
 801328e:	4011      	ands	r1, r2
 8013290:	22c0      	movs	r2, #192	@ 0xc0
      if (ep->num == 0U)
 8013292:	2e00      	cmp	r6, #0
 8013294:	d000      	beq.n	8013298 <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013296:	2280      	movs	r2, #128	@ 0x80
 8013298:	0192      	lsls	r2, r2, #6
 801329a:	e7bf      	b.n	801321c <USB_ActivateEndpoint+0x80>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801329c:	271f      	movs	r7, #31
 801329e:	0948      	lsrs	r0, r1, #5
 80132a0:	4039      	ands	r1, r7
 80132a2:	424f      	negs	r7, r1
 80132a4:	4179      	adcs	r1, r7
 80132a6:	1a40      	subs	r0, r0, r1
 80132a8:	6851      	ldr	r1, [r2, #4]
 80132aa:	0680      	lsls	r0, r0, #26
 80132ac:	4308      	orrs	r0, r1
 80132ae:	e7d5      	b.n	801325c <USB_ActivateEndpoint+0xc0>
    if (ep->type == EP_TYPE_BULK)
 80132b0:	2802      	cmp	r0, #2
 80132b2:	d14a      	bne.n	801334a <USB_ActivateEndpoint+0x1ae>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80132b4:	681f      	ldr	r7, [r3, #0]
 80132b6:	4e5b      	ldr	r6, [pc, #364]	@ (8013424 <USB_ActivateEndpoint+0x288>)
 80132b8:	402f      	ands	r7, r5
 80132ba:	433e      	orrs	r6, r7
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80132bc:	601e      	str	r6, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80132be:	6816      	ldr	r6, [r2, #0]
 80132c0:	0c36      	lsrs	r6, r6, #16
 80132c2:	0436      	lsls	r6, r6, #16
 80132c4:	6016      	str	r6, [r2, #0]
 80132c6:	890e      	ldrh	r6, [r1, #8]
 80132c8:	6817      	ldr	r7, [r2, #0]
 80132ca:	08b6      	lsrs	r6, r6, #2
 80132cc:	00b6      	lsls	r6, r6, #2
 80132ce:	433e      	orrs	r6, r7
 80132d0:	6016      	str	r6, [r2, #0]
 80132d2:	6856      	ldr	r6, [r2, #4]
 80132d4:	0c36      	lsrs	r6, r6, #16
 80132d6:	0436      	lsls	r6, r6, #16
 80132d8:	6056      	str	r6, [r2, #4]
 80132da:	894e      	ldrh	r6, [r1, #10]
 80132dc:	6857      	ldr	r7, [r2, #4]
 80132de:	08b6      	lsrs	r6, r6, #2
 80132e0:	00b6      	lsls	r6, r6, #2
 80132e2:	433e      	orrs	r6, r7
 80132e4:	6056      	str	r6, [r2, #4]
    if (ep->is_in == 0U)
 80132e6:	784e      	ldrb	r6, [r1, #1]
 80132e8:	4f4d      	ldr	r7, [pc, #308]	@ (8013420 <USB_ActivateEndpoint+0x284>)
 80132ea:	9601      	str	r6, [sp, #4]
 80132ec:	4e4a      	ldr	r6, [pc, #296]	@ (8013418 <USB_ActivateEndpoint+0x27c>)
 80132ee:	46b4      	mov	ip, r6
 80132f0:	9e01      	ldr	r6, [sp, #4]
 80132f2:	2e00      	cmp	r6, #0
 80132f4:	d162      	bne.n	80133bc <USB_ActivateEndpoint+0x220>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80132f6:	2680      	movs	r6, #128	@ 0x80
 80132f8:	6818      	ldr	r0, [r3, #0]
 80132fa:	01f6      	lsls	r6, r6, #7
 80132fc:	4230      	tst	r0, r6
 80132fe:	d004      	beq.n	801330a <USB_ActivateEndpoint+0x16e>
 8013300:	681e      	ldr	r6, [r3, #0]
 8013302:	4846      	ldr	r0, [pc, #280]	@ (801341c <USB_ActivateEndpoint+0x280>)
 8013304:	402e      	ands	r6, r5
 8013306:	4330      	orrs	r0, r6
 8013308:	6018      	str	r0, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801330a:	6818      	ldr	r0, [r3, #0]
 801330c:	0640      	lsls	r0, r0, #25
 801330e:	d504      	bpl.n	801331a <USB_ActivateEndpoint+0x17e>
 8013310:	6818      	ldr	r0, [r3, #0]
 8013312:	4005      	ands	r5, r0
 8013314:	483f      	ldr	r0, [pc, #252]	@ (8013414 <USB_ActivateEndpoint+0x278>)
 8013316:	4328      	orrs	r0, r5
 8013318:	6018      	str	r0, [r3, #0]
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801331a:	6810      	ldr	r0, [r2, #0]
 801331c:	6909      	ldr	r1, [r1, #16]
 801331e:	0180      	lsls	r0, r0, #6
 8013320:	0980      	lsrs	r0, r0, #6
 8013322:	6010      	str	r0, [r2, #0]
 8013324:	2900      	cmp	r1, #0
 8013326:	d115      	bne.n	8013354 <USB_ActivateEndpoint+0x1b8>
 8013328:	2080      	movs	r0, #128	@ 0x80
 801332a:	6815      	ldr	r5, [r2, #0]
 801332c:	0600      	lsls	r0, r0, #24
 801332e:	4328      	orrs	r0, r5
 8013330:	6010      	str	r0, [r2, #0]
 8013332:	6850      	ldr	r0, [r2, #4]
 8013334:	0180      	lsls	r0, r0, #6
 8013336:	0980      	lsrs	r0, r0, #6
 8013338:	6050      	str	r0, [r2, #4]
 801333a:	2900      	cmp	r1, #0
 801333c:	d11f      	bne.n	801337e <USB_ActivateEndpoint+0x1e2>
 801333e:	6850      	ldr	r0, [r2, #4]
 8013340:	2180      	movs	r1, #128	@ 0x80
 8013342:	0609      	lsls	r1, r1, #24
 8013344:	4301      	orrs	r1, r0
 8013346:	6051      	str	r1, [r2, #4]
 8013348:	e023      	b.n	8013392 <USB_ActivateEndpoint+0x1f6>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801334a:	681e      	ldr	r6, [r3, #0]
 801334c:	4f36      	ldr	r7, [pc, #216]	@ (8013428 <USB_ActivateEndpoint+0x28c>)
 801334e:	403e      	ands	r6, r7
 8013350:	4326      	orrs	r6, r4
 8013352:	e7b3      	b.n	80132bc <USB_ActivateEndpoint+0x120>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013354:	293e      	cmp	r1, #62	@ 0x3e
 8013356:	d806      	bhi.n	8013366 <USB_ActivateEndpoint+0x1ca>
 8013358:	2501      	movs	r5, #1
 801335a:	0848      	lsrs	r0, r1, #1
 801335c:	400d      	ands	r5, r1
 801335e:	1940      	adds	r0, r0, r5
 8013360:	0680      	lsls	r0, r0, #26
 8013362:	6815      	ldr	r5, [r2, #0]
 8013364:	e7e3      	b.n	801332e <USB_ActivateEndpoint+0x192>
 8013366:	251f      	movs	r5, #31
 8013368:	400d      	ands	r5, r1
 801336a:	426e      	negs	r6, r5
 801336c:	4175      	adcs	r5, r6
 801336e:	0948      	lsrs	r0, r1, #5
 8013370:	1b40      	subs	r0, r0, r5
 8013372:	6815      	ldr	r5, [r2, #0]
 8013374:	0680      	lsls	r0, r0, #26
 8013376:	4328      	orrs	r0, r5
 8013378:	2580      	movs	r5, #128	@ 0x80
 801337a:	062d      	lsls	r5, r5, #24
 801337c:	e7d7      	b.n	801332e <USB_ActivateEndpoint+0x192>
 801337e:	293e      	cmp	r1, #62	@ 0x3e
 8013380:	d812      	bhi.n	80133a8 <USB_ActivateEndpoint+0x20c>
 8013382:	2501      	movs	r5, #1
 8013384:	0848      	lsrs	r0, r1, #1
 8013386:	4029      	ands	r1, r5
 8013388:	1840      	adds	r0, r0, r1
 801338a:	6851      	ldr	r1, [r2, #4]
 801338c:	0680      	lsls	r0, r0, #26
 801338e:	4308      	orrs	r0, r1
 8013390:	6050      	str	r0, [r2, #4]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013392:	22c0      	movs	r2, #192	@ 0xc0
 8013394:	6819      	ldr	r1, [r3, #0]
 8013396:	0192      	lsls	r2, r2, #6
 8013398:	4039      	ands	r1, r7
 801339a:	404a      	eors	r2, r1
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801339c:	4661      	mov	r1, ip
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801339e:	4322      	orrs	r2, r4
 80133a0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	400a      	ands	r2, r1
 80133a6:	e745      	b.n	8013234 <USB_ActivateEndpoint+0x98>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80133a8:	251f      	movs	r5, #31
 80133aa:	0948      	lsrs	r0, r1, #5
 80133ac:	4029      	ands	r1, r5
 80133ae:	424d      	negs	r5, r1
 80133b0:	4169      	adcs	r1, r5
 80133b2:	1a40      	subs	r0, r0, r1
 80133b4:	6851      	ldr	r1, [r2, #4]
 80133b6:	0680      	lsls	r0, r0, #26
 80133b8:	4308      	orrs	r0, r1
 80133ba:	e7c1      	b.n	8013340 <USB_ActivateEndpoint+0x1a4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133bc:	2180      	movs	r1, #128	@ 0x80
 80133be:	681a      	ldr	r2, [r3, #0]
 80133c0:	01c9      	lsls	r1, r1, #7
 80133c2:	420a      	tst	r2, r1
 80133c4:	d004      	beq.n	80133d0 <USB_ActivateEndpoint+0x234>
 80133c6:	6819      	ldr	r1, [r3, #0]
 80133c8:	4a14      	ldr	r2, [pc, #80]	@ (801341c <USB_ActivateEndpoint+0x280>)
 80133ca:	4029      	ands	r1, r5
 80133cc:	430a      	orrs	r2, r1
 80133ce:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	0652      	lsls	r2, r2, #25
 80133d4:	d504      	bpl.n	80133e0 <USB_ActivateEndpoint+0x244>
 80133d6:	6819      	ldr	r1, [r3, #0]
 80133d8:	4a0e      	ldr	r2, [pc, #56]	@ (8013414 <USB_ActivateEndpoint+0x278>)
 80133da:	4029      	ands	r1, r5
 80133dc:	430a      	orrs	r2, r1
 80133de:	601a      	str	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 80133e0:	2801      	cmp	r0, #1
 80133e2:	d00b      	beq.n	80133fc <USB_ActivateEndpoint+0x260>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80133e4:	4662      	mov	r2, ip
 80133e6:	6819      	ldr	r1, [r3, #0]
 80133e8:	4011      	ands	r1, r2
 80133ea:	2220      	movs	r2, #32
 80133ec:	404a      	eors	r2, r1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80133ee:	4322      	orrs	r2, r4
 80133f0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	403a      	ands	r2, r7
 80133f6:	4314      	orrs	r4, r2
 80133f8:	601c      	str	r4, [r3, #0]
 80133fa:	e71d      	b.n	8013238 <USB_ActivateEndpoint+0x9c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80133fc:	4661      	mov	r1, ip
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	400a      	ands	r2, r1
 8013402:	e7f4      	b.n	80133ee <USB_ActivateEndpoint+0x252>
 8013404:	07ff898f 	.word	0x07ff898f
 8013408:	00008080 	.word	0x00008080
 801340c:	07ff8f8f 	.word	0x07ff8f8f
 8013410:	40009800 	.word	0x40009800
 8013414:	000080c0 	.word	0x000080c0
 8013418:	07ff8fbf 	.word	0x07ff8fbf
 801341c:	0000c080 	.word	0x0000c080
 8013420:	07ffbf8f 	.word	0x07ffbf8f
 8013424:	00008180 	.word	0x00008180
 8013428:	07ff8e8f 	.word	0x07ff8e8f

0801342c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 801342c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801342e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8013430:	7b0a      	ldrb	r2, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8013436:	784e      	ldrb	r6, [r1, #1]
 8013438:	4b2e      	ldr	r3, [pc, #184]	@ (80134f4 <USB_DeactivateEndpoint+0xc8>)
  if (ep->doublebuffer == 0U)
 801343a:	2a00      	cmp	r2, #0
 801343c:	d11c      	bne.n	8013478 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801343e:	6802      	ldr	r2, [r0, #0]
    if (ep->is_in != 0U)
 8013440:	2e00      	cmp	r6, #0
 8013442:	d00e      	beq.n	8013462 <USB_DeactivateEndpoint+0x36>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013444:	0652      	lsls	r2, r2, #25
 8013446:	d505      	bpl.n	8013454 <USB_DeactivateEndpoint+0x28>
 8013448:	6801      	ldr	r1, [r0, #0]
 801344a:	4a2b      	ldr	r2, [pc, #172]	@ (80134f8 <USB_DeactivateEndpoint+0xcc>)
 801344c:	4011      	ands	r1, r2
 801344e:	4a2b      	ldr	r2, [pc, #172]	@ (80134fc <USB_DeactivateEndpoint+0xd0>)
 8013450:	430a      	orrs	r2, r1
 8013452:	6002      	str	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013454:	6802      	ldr	r2, [r0, #0]
 8013456:	492a      	ldr	r1, [pc, #168]	@ (8013500 <USB_DeactivateEndpoint+0xd4>)
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013458:	400a      	ands	r2, r1
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801345a:	4313      	orrs	r3, r2
 801345c:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 801345e:	2000      	movs	r0, #0
 8013460:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013462:	0452      	lsls	r2, r2, #17
 8013464:	d505      	bpl.n	8013472 <USB_DeactivateEndpoint+0x46>
 8013466:	6801      	ldr	r1, [r0, #0]
 8013468:	4a23      	ldr	r2, [pc, #140]	@ (80134f8 <USB_DeactivateEndpoint+0xcc>)
 801346a:	4011      	ands	r1, r2
 801346c:	4a25      	ldr	r2, [pc, #148]	@ (8013504 <USB_DeactivateEndpoint+0xd8>)
 801346e:	430a      	orrs	r2, r1
 8013470:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013472:	6802      	ldr	r2, [r0, #0]
 8013474:	4924      	ldr	r1, [pc, #144]	@ (8013508 <USB_DeactivateEndpoint+0xdc>)
 8013476:	e7ef      	b.n	8013458 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8013478:	2180      	movs	r1, #128	@ 0x80
 801347a:	4a1f      	ldr	r2, [pc, #124]	@ (80134f8 <USB_DeactivateEndpoint+0xcc>)
 801347c:	4d20      	ldr	r5, [pc, #128]	@ (8013500 <USB_DeactivateEndpoint+0xd4>)
 801347e:	4c22      	ldr	r4, [pc, #136]	@ (8013508 <USB_DeactivateEndpoint+0xdc>)
 8013480:	01c9      	lsls	r1, r1, #7
 8013482:	2e00      	cmp	r6, #0
 8013484:	d11a      	bne.n	80134bc <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013486:	6806      	ldr	r6, [r0, #0]
 8013488:	420e      	tst	r6, r1
 801348a:	d004      	beq.n	8013496 <USB_DeactivateEndpoint+0x6a>
 801348c:	6806      	ldr	r6, [r0, #0]
 801348e:	491d      	ldr	r1, [pc, #116]	@ (8013504 <USB_DeactivateEndpoint+0xd8>)
 8013490:	4016      	ands	r6, r2
 8013492:	4331      	orrs	r1, r6
 8013494:	6001      	str	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013496:	6801      	ldr	r1, [r0, #0]
 8013498:	4e18      	ldr	r6, [pc, #96]	@ (80134fc <USB_DeactivateEndpoint+0xd0>)
 801349a:	0649      	lsls	r1, r1, #25
 801349c:	d503      	bpl.n	80134a6 <USB_DeactivateEndpoint+0x7a>
 801349e:	6801      	ldr	r1, [r0, #0]
 80134a0:	4011      	ands	r1, r2
 80134a2:	4331      	orrs	r1, r6
 80134a4:	6001      	str	r1, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80134a6:	6801      	ldr	r1, [r0, #0]
 80134a8:	400a      	ands	r2, r1
 80134aa:	4316      	orrs	r6, r2
 80134ac:	6006      	str	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80134ae:	6802      	ldr	r2, [r0, #0]
 80134b0:	4022      	ands	r2, r4
 80134b2:	431a      	orrs	r2, r3
 80134b4:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134b6:	6802      	ldr	r2, [r0, #0]
 80134b8:	402a      	ands	r2, r5
 80134ba:	e7ce      	b.n	801345a <USB_DeactivateEndpoint+0x2e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80134bc:	6807      	ldr	r7, [r0, #0]
 80134be:	4e11      	ldr	r6, [pc, #68]	@ (8013504 <USB_DeactivateEndpoint+0xd8>)
 80134c0:	420f      	tst	r7, r1
 80134c2:	d003      	beq.n	80134cc <USB_DeactivateEndpoint+0xa0>
 80134c4:	6801      	ldr	r1, [r0, #0]
 80134c6:	4011      	ands	r1, r2
 80134c8:	4331      	orrs	r1, r6
 80134ca:	6001      	str	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80134cc:	6801      	ldr	r1, [r0, #0]
 80134ce:	0649      	lsls	r1, r1, #25
 80134d0:	d504      	bpl.n	80134dc <USB_DeactivateEndpoint+0xb0>
 80134d2:	6807      	ldr	r7, [r0, #0]
 80134d4:	4909      	ldr	r1, [pc, #36]	@ (80134fc <USB_DeactivateEndpoint+0xd0>)
 80134d6:	4017      	ands	r7, r2
 80134d8:	4339      	orrs	r1, r7
 80134da:	6001      	str	r1, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80134dc:	6801      	ldr	r1, [r0, #0]
 80134de:	400a      	ands	r2, r1
 80134e0:	4316      	orrs	r6, r2
 80134e2:	6006      	str	r6, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134e4:	6802      	ldr	r2, [r0, #0]
 80134e6:	402a      	ands	r2, r5
 80134e8:	431a      	orrs	r2, r3
 80134ea:	6002      	str	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80134ec:	6802      	ldr	r2, [r0, #0]
 80134ee:	4022      	ands	r2, r4
 80134f0:	e7b3      	b.n	801345a <USB_DeactivateEndpoint+0x2e>
 80134f2:	46c0      	nop			@ (mov r8, r8)
 80134f4:	00008080 	.word	0x00008080
 80134f8:	07ff8f8f 	.word	0x07ff8f8f
 80134fc:	000080c0 	.word	0x000080c0
 8013500:	07ff8fbf 	.word	0x07ff8fbf
 8013504:	0000c080 	.word	0x0000c080
 8013508:	07ffbf8f 	.word	0x07ffbf8f

0801350c <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801350c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 801350e:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	4a0b      	ldr	r2, [pc, #44]	@ (8013540 <USB_EPSetStall+0x34>)
 8013514:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8013516:	2900      	cmp	r1, #0
 8013518:	d008      	beq.n	801352c <USB_EPSetStall+0x20>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801351a:	6801      	ldr	r1, [r0, #0]
 801351c:	4b09      	ldr	r3, [pc, #36]	@ (8013544 <USB_EPSetStall+0x38>)
 801351e:	4019      	ands	r1, r3
 8013520:	2310      	movs	r3, #16
 8013522:	404b      	eors	r3, r1
 8013524:	4313      	orrs	r3, r2
 8013526:	6003      	str	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8013528:	2000      	movs	r0, #0
 801352a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801352c:	6801      	ldr	r1, [r0, #0]
 801352e:	4b06      	ldr	r3, [pc, #24]	@ (8013548 <USB_EPSetStall+0x3c>)
 8013530:	4019      	ands	r1, r3
 8013532:	2380      	movs	r3, #128	@ 0x80
 8013534:	015b      	lsls	r3, r3, #5
 8013536:	404b      	eors	r3, r1
 8013538:	431a      	orrs	r2, r3
 801353a:	6002      	str	r2, [r0, #0]
 801353c:	e7f4      	b.n	8013528 <USB_EPSetStall+0x1c>
 801353e:	46c0      	nop			@ (mov r8, r8)
 8013540:	00008080 	.word	0x00008080
 8013544:	07ff8fbf 	.word	0x07ff8fbf
 8013548:	07ffbf8f 	.word	0x07ffbf8f

0801354c <USB_EPClearStall>:
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801354c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 801354e:	784a      	ldrb	r2, [r1, #1]
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	18c0      	adds	r0, r0, r3
 8013554:	6803      	ldr	r3, [r0, #0]
  if (ep->is_in != 0U)
 8013556:	2a00      	cmp	r2, #0
 8013558:	d014      	beq.n	8013584 <USB_EPClearStall+0x38>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801355a:	065b      	lsls	r3, r3, #25
 801355c:	d505      	bpl.n	801356a <USB_EPClearStall+0x1e>
 801355e:	6802      	ldr	r2, [r0, #0]
 8013560:	4b0f      	ldr	r3, [pc, #60]	@ (80135a0 <USB_EPClearStall+0x54>)
 8013562:	401a      	ands	r2, r3
 8013564:	4b0f      	ldr	r3, [pc, #60]	@ (80135a4 <USB_EPClearStall+0x58>)
 8013566:	4313      	orrs	r3, r2
 8013568:	6003      	str	r3, [r0, #0]

    if (ep->type != EP_TYPE_ISOC)
 801356a:	78cb      	ldrb	r3, [r1, #3]
 801356c:	2b01      	cmp	r3, #1
 801356e:	d007      	beq.n	8013580 <USB_EPClearStall+0x34>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013570:	4a0d      	ldr	r2, [pc, #52]	@ (80135a8 <USB_EPClearStall+0x5c>)
 8013572:	6803      	ldr	r3, [r0, #0]
 8013574:	4013      	ands	r3, r2
 8013576:	2220      	movs	r2, #32
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013578:	405a      	eors	r2, r3
 801357a:	4b0c      	ldr	r3, [pc, #48]	@ (80135ac <USB_EPClearStall+0x60>)
 801357c:	4313      	orrs	r3, r2
 801357e:	6003      	str	r3, [r0, #0]
  }

  return HAL_OK;
}
 8013580:	2000      	movs	r0, #0
 8013582:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013584:	045b      	lsls	r3, r3, #17
 8013586:	d505      	bpl.n	8013594 <USB_EPClearStall+0x48>
 8013588:	6802      	ldr	r2, [r0, #0]
 801358a:	4b05      	ldr	r3, [pc, #20]	@ (80135a0 <USB_EPClearStall+0x54>)
 801358c:	401a      	ands	r2, r3
 801358e:	4b08      	ldr	r3, [pc, #32]	@ (80135b0 <USB_EPClearStall+0x64>)
 8013590:	4313      	orrs	r3, r2
 8013592:	6003      	str	r3, [r0, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013594:	4a07      	ldr	r2, [pc, #28]	@ (80135b4 <USB_EPClearStall+0x68>)
 8013596:	6803      	ldr	r3, [r0, #0]
 8013598:	4013      	ands	r3, r2
 801359a:	22c0      	movs	r2, #192	@ 0xc0
 801359c:	0192      	lsls	r2, r2, #6
 801359e:	e7eb      	b.n	8013578 <USB_EPClearStall+0x2c>
 80135a0:	07ff8f8f 	.word	0x07ff8f8f
 80135a4:	000080c0 	.word	0x000080c0
 80135a8:	07ff8fbf 	.word	0x07ff8fbf
 80135ac:	00008080 	.word	0x00008080
 80135b0:	0000c080 	.word	0x0000c080
 80135b4:	07ffbf8f 	.word	0x07ffbf8f

080135b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80135b8:	b510      	push	{r4, lr}
  /* IN endpoint */
  if (ep->is_in == 1U)
 80135ba:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->doublebuffer == 0U)
 80135bc:	7b0b      	ldrb	r3, [r1, #12]
  if (ep->is_in == 1U)
 80135be:	2a01      	cmp	r2, #1
 80135c0:	d116      	bne.n	80135f0 <USB_EPStopXfer+0x38>
    if (ep->doublebuffer == 0U)
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d112      	bne.n	80135ec <USB_EPStopXfer+0x34>
    {
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80135c6:	780b      	ldrb	r3, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 80135c8:	78c9      	ldrb	r1, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	4c11      	ldr	r4, [pc, #68]	@ (8013614 <USB_EPStopXfer+0x5c>)
 80135ce:	4a12      	ldr	r2, [pc, #72]	@ (8013618 <USB_EPStopXfer+0x60>)
 80135d0:	18c0      	adds	r0, r0, r3
      if (ep->type != EP_TYPE_ISOC)
 80135d2:	2901      	cmp	r1, #1
 80135d4:	d006      	beq.n	80135e4 <USB_EPStopXfer+0x2c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80135d6:	2320      	movs	r3, #32
 80135d8:	6801      	ldr	r1, [r0, #0]
 80135da:	4021      	ands	r1, r4
    if (ep->doublebuffer == 0U)
    {
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80135dc:	404b      	eors	r3, r1
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80135de:	4313      	orrs	r3, r2
 80135e0:	6003      	str	r3, [r0, #0]
 80135e2:	e003      	b.n	80135ec <USB_EPStopXfer+0x34>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80135e4:	6803      	ldr	r3, [r0, #0]
 80135e6:	4023      	ands	r3, r4
 80135e8:	431a      	orrs	r2, r3
 80135ea:	6002      	str	r2, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 80135ec:	2000      	movs	r0, #0
 80135ee:	bd10      	pop	{r4, pc}
    if (ep->doublebuffer == 0U)
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d1fb      	bne.n	80135ec <USB_EPStopXfer+0x34>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80135f4:	780b      	ldrb	r3, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 80135f6:	78c9      	ldrb	r1, [r1, #3]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4a07      	ldr	r2, [pc, #28]	@ (8013618 <USB_EPStopXfer+0x60>)
 80135fc:	4c07      	ldr	r4, [pc, #28]	@ (801361c <USB_EPStopXfer+0x64>)
 80135fe:	18c0      	adds	r0, r0, r3
      if (ep->type != EP_TYPE_ISOC)
 8013600:	2901      	cmp	r1, #1
 8013602:	d004      	beq.n	801360e <USB_EPStopXfer+0x56>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013604:	2380      	movs	r3, #128	@ 0x80
 8013606:	6801      	ldr	r1, [r0, #0]
 8013608:	019b      	lsls	r3, r3, #6
 801360a:	4021      	ands	r1, r4
 801360c:	e7e6      	b.n	80135dc <USB_EPStopXfer+0x24>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801360e:	6803      	ldr	r3, [r0, #0]
 8013610:	4023      	ands	r3, r4
 8013612:	e7e4      	b.n	80135de <USB_EPStopXfer+0x26>
 8013614:	07ff8fbf 	.word	0x07ff8fbf
 8013618:	00008080 	.word	0x00008080
 801361c:	07ffbf8f 	.word	0x07ffbf8f

08013620 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8013620:	2900      	cmp	r1, #0
 8013622:	d101      	bne.n	8013628 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8013624:	2380      	movs	r3, #128	@ 0x80
 8013626:	64c3      	str	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8013628:	2000      	movs	r0, #0
 801362a:	4770      	bx	lr

0801362c <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 801362c:	2380      	movs	r3, #128	@ 0x80
 801362e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8013630:	021b      	lsls	r3, r3, #8
 8013632:	4313      	orrs	r3, r2
 8013634:	6583      	str	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8013636:	2000      	movs	r0, #0
 8013638:	4770      	bx	lr
	...

0801363c <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 801363c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801363e:	4a02      	ldr	r2, [pc, #8]	@ (8013648 <USB_DevDisconnect+0xc>)
 8013640:	4013      	ands	r3, r2
 8013642:	6583      	str	r3, [r0, #88]	@ 0x58

  return HAL_OK;
}
 8013644:	2000      	movs	r0, #0
 8013646:	4770      	bx	lr
 8013648:	ffff7fff 	.word	0xffff7fff

0801364c <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801364c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 801364e:	4770      	bx	lr

08013650 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013650:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8013652:	2403      	movs	r4, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013654:	1cd8      	adds	r0, r3, #3
  uint16_t remaining_bytes = wNBytes % 4U;
 8013656:	4023      	ands	r3, r4
  uint8_t *pBuf = pbUsrBuf;

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
  {
    NbWords--;
 8013658:	001c      	movs	r4, r3
 801365a:	1e65      	subs	r5, r4, #1
 801365c:	41ac      	sbcs	r4, r5
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801365e:	0880      	lsrs	r0, r0, #2
    NbWords--;
 8013660:	1b00      	subs	r0, r0, r4
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013662:	4c11      	ldr	r4, [pc, #68]	@ (80136a8 <USB_WritePMA+0x58>)
 8013664:	0080      	lsls	r0, r0, #2
 8013666:	1912      	adds	r2, r2, r4
 8013668:	0016      	movs	r6, r2
 801366a:	180d      	adds	r5, r1, r0

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 801366c:	42a9      	cmp	r1, r5
 801366e:	d10e      	bne.n	801368e <USB_WritePMA+0x3e>
    pBuf++;
    pBuf++;
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00b      	beq.n	801368c <USB_WritePMA+0x3c>
 8013674:	2100      	movs	r1, #0
  {
    WrVal = 0U;
 8013676:	000c      	movs	r4, r1

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8013678:	5c6e      	ldrb	r6, [r5, r1]
 801367a:	00cf      	lsls	r7, r1, #3
 801367c:	40be      	lsls	r6, r7
      count++;
 801367e:	3101      	adds	r1, #1
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8013680:	4334      	orrs	r4, r6
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 8013682:	b28e      	uxth	r6, r1
 8013684:	42b3      	cmp	r3, r6
 8013686:	d1f7      	bne.n	8013678 <USB_WritePMA+0x28>

    *pdwVal = WrVal;
 8013688:	1812      	adds	r2, r2, r0
 801368a:	6014      	str	r4, [r2, #0]
  }
}
 801368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 801368e:	784c      	ldrb	r4, [r1, #1]
 8013690:	780f      	ldrb	r7, [r1, #0]
 8013692:	0224      	lsls	r4, r4, #8
 8013694:	433c      	orrs	r4, r7
 8013696:	788f      	ldrb	r7, [r1, #2]
 8013698:	043f      	lsls	r7, r7, #16
 801369a:	4327      	orrs	r7, r4
 801369c:	78cc      	ldrb	r4, [r1, #3]
    pBuf++;
 801369e:	3104      	adds	r1, #4
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80136a0:	0624      	lsls	r4, r4, #24
 80136a2:	433c      	orrs	r4, r7
 80136a4:	c610      	stmia	r6!, {r4}
  for (count = NbWords; count != 0U; count--)
 80136a6:	e7e1      	b.n	801366c <USB_WritePMA+0x1c>
 80136a8:	40009800 	.word	0x40009800

080136ac <USB_EPStartXfer>:
{
 80136ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80136ae:	784a      	ldrb	r2, [r1, #1]
{
 80136b0:	0006      	movs	r6, r0
 80136b2:	000c      	movs	r4, r1
    if (ep->doublebuffer == 0U)
 80136b4:	7b0b      	ldrb	r3, [r1, #12]
{
 80136b6:	b085      	sub	sp, #20
  if (ep->is_in == 1U)
 80136b8:	2a01      	cmp	r2, #1
 80136ba:	d000      	beq.n	80136be <USB_EPStartXfer+0x12>
 80136bc:	e10d      	b.n	80138da <USB_EPStartXfer+0x22e>
    if (ep->xfer_len > ep->maxpacket)
 80136be:	690f      	ldr	r7, [r1, #16]
 80136c0:	698d      	ldr	r5, [r1, #24]
 80136c2:	42bd      	cmp	r5, r7
 80136c4:	d900      	bls.n	80136c8 <USB_EPStartXfer+0x1c>
 80136c6:	003d      	movs	r5, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80136c8:	6962      	ldr	r2, [r4, #20]
 80136ca:	9201      	str	r2, [sp, #4]
    if (ep->doublebuffer == 0U)
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d11e      	bne.n	801370e <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80136d0:	b2ab      	uxth	r3, r5
 80136d2:	88e2      	ldrh	r2, [r4, #6]
 80136d4:	0030      	movs	r0, r6
 80136d6:	9901      	ldr	r1, [sp, #4]
 80136d8:	f7ff ffba 	bl	8013650 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80136dc:	7823      	ldrb	r3, [r4, #0]
 80136de:	4aa2      	ldr	r2, [pc, #648]	@ (8013968 <USB_EPStartXfer+0x2bc>)
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	189b      	adds	r3, r3, r2
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	042d      	lsls	r5, r5, #16
 80136e8:	b292      	uxth	r2, r2
 80136ea:	601a      	str	r2, [r3, #0]
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	4315      	orrs	r5, r2
 80136f0:	601d      	str	r5, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80136f2:	7823      	ldrb	r3, [r4, #0]
 80136f4:	4a9d      	ldr	r2, [pc, #628]	@ (801396c <USB_EPStartXfer+0x2c0>)
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	18f3      	adds	r3, r6, r3
 80136fa:	6819      	ldr	r1, [r3, #0]
 80136fc:	4011      	ands	r1, r2
 80136fe:	2230      	movs	r2, #48	@ 0x30
 8013700:	404a      	eors	r2, r1
 8013702:	499b      	ldr	r1, [pc, #620]	@ (8013970 <USB_EPStartXfer+0x2c4>)
 8013704:	430a      	orrs	r2, r1
 8013706:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8013708:	2000      	movs	r0, #0
}
 801370a:	b005      	add	sp, #20
 801370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801370e:	7820      	ldrb	r0, [r4, #0]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013710:	4995      	ldr	r1, [pc, #596]	@ (8013968 <USB_EPStartXfer+0x2bc>)
 8013712:	00c2      	lsls	r2, r0, #3
 8013714:	1852      	adds	r2, r2, r1
      if (ep->type == EP_TYPE_BULK)
 8013716:	78e1      	ldrb	r1, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013718:	0080      	lsls	r0, r0, #2
        if (ep->xfer_len_db > ep->maxpacket)
 801371a:	6a23      	ldr	r3, [r4, #32]
 801371c:	1830      	adds	r0, r6, r0
      if (ep->type == EP_TYPE_BULK)
 801371e:	2902      	cmp	r1, #2
 8013720:	d000      	beq.n	8013724 <USB_EPStartXfer+0x78>
 8013722:	e0c3      	b.n	80138ac <USB_EPStartXfer+0x200>
        if (ep->xfer_len_db > ep->maxpacket)
 8013724:	429f      	cmp	r7, r3
 8013726:	d300      	bcc.n	801372a <USB_EPStartXfer+0x7e>
 8013728:	e0b0      	b.n	801388c <USB_EPStartXfer+0x1e0>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801372a:	6807      	ldr	r7, [r0, #0]
 801372c:	4b91      	ldr	r3, [pc, #580]	@ (8013974 <USB_EPStartXfer+0x2c8>)
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801372e:	0429      	lsls	r1, r5, #16
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013730:	401f      	ands	r7, r3
 8013732:	4b91      	ldr	r3, [pc, #580]	@ (8013978 <USB_EPStartXfer+0x2cc>)
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013734:	9103      	str	r1, [sp, #12]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013736:	433b      	orrs	r3, r7
 8013738:	6003      	str	r3, [r0, #0]
          ep->xfer_len_db -= len;
 801373a:	6a23      	ldr	r3, [r4, #32]
 801373c:	1b5b      	subs	r3, r3, r5
 801373e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013740:	6803      	ldr	r3, [r0, #0]
 8013742:	2040      	movs	r0, #64	@ 0x40
 8013744:	469c      	mov	ip, r3
 8013746:	4661      	mov	r1, ip
 8013748:	4003      	ands	r3, r0
 801374a:	9302      	str	r3, [sp, #8]
            ep->xfer_buff += len;
 801374c:	9b01      	ldr	r3, [sp, #4]
 801374e:	195f      	adds	r7, r3, r5
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013750:	b2ab      	uxth	r3, r5
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013752:	4201      	tst	r1, r0
 8013754:	d04e      	beq.n	80137f4 <USB_EPStartXfer+0x148>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013756:	6850      	ldr	r0, [r2, #4]
 8013758:	0429      	lsls	r1, r5, #16
 801375a:	b280      	uxth	r0, r0
 801375c:	6050      	str	r0, [r2, #4]
 801375e:	6850      	ldr	r0, [r2, #4]
 8013760:	4308      	orrs	r0, r1
 8013762:	6050      	str	r0, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013764:	8962      	ldrh	r2, [r4, #10]
 8013766:	9901      	ldr	r1, [sp, #4]
 8013768:	0030      	movs	r0, r6
 801376a:	f7ff ff71 	bl	8013650 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 801376e:	6a23      	ldr	r3, [r4, #32]
 8013770:	6921      	ldr	r1, [r4, #16]
              ep->xfer_len_db = 0U;
 8013772:	2200      	movs	r2, #0
            ep->xfer_buff += len;
 8013774:	6167      	str	r7, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8013776:	428b      	cmp	r3, r1
 8013778:	d901      	bls.n	801377e <USB_EPStartXfer+0xd2>
              ep->xfer_len_db -= len;
 801377a:	1b5a      	subs	r2, r3, r5
 801377c:	002b      	movs	r3, r5
 801377e:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013780:	7862      	ldrb	r2, [r4, #1]
 8013782:	2a00      	cmp	r2, #0
 8013784:	d12a      	bne.n	80137dc <USB_EPStartXfer+0x130>
 8013786:	7822      	ldrb	r2, [r4, #0]
 8013788:	4977      	ldr	r1, [pc, #476]	@ (8013968 <USB_EPStartXfer+0x2bc>)
 801378a:	00d2      	lsls	r2, r2, #3
 801378c:	1852      	adds	r2, r2, r1
 801378e:	6811      	ldr	r1, [r2, #0]
 8013790:	0189      	lsls	r1, r1, #6
 8013792:	0989      	lsrs	r1, r1, #6
 8013794:	6011      	str	r1, [r2, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10b      	bne.n	80137b2 <USB_EPStartXfer+0x106>
 801379a:	2180      	movs	r1, #128	@ 0x80
 801379c:	6810      	ldr	r0, [r2, #0]
 801379e:	0609      	lsls	r1, r1, #24
 80137a0:	4301      	orrs	r1, r0
 80137a2:	6011      	str	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80137a4:	8922      	ldrh	r2, [r4, #8]
 80137a6:	b29b      	uxth	r3, r3
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80137a8:	0039      	movs	r1, r7
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80137aa:	0030      	movs	r0, r6
 80137ac:	f7ff ff50 	bl	8013650 <USB_WritePMA>
 80137b0:	e79f      	b.n	80136f2 <USB_EPStartXfer+0x46>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80137b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80137b4:	d806      	bhi.n	80137c4 <USB_EPStartXfer+0x118>
 80137b6:	2001      	movs	r0, #1
 80137b8:	0859      	lsrs	r1, r3, #1
 80137ba:	4018      	ands	r0, r3
 80137bc:	1809      	adds	r1, r1, r0
 80137be:	0689      	lsls	r1, r1, #26
 80137c0:	6810      	ldr	r0, [r2, #0]
 80137c2:	e7ed      	b.n	80137a0 <USB_EPStartXfer+0xf4>
 80137c4:	201f      	movs	r0, #31
 80137c6:	4018      	ands	r0, r3
 80137c8:	4245      	negs	r5, r0
 80137ca:	4168      	adcs	r0, r5
 80137cc:	0959      	lsrs	r1, r3, #5
 80137ce:	1a09      	subs	r1, r1, r0
 80137d0:	6810      	ldr	r0, [r2, #0]
 80137d2:	0689      	lsls	r1, r1, #26
 80137d4:	4301      	orrs	r1, r0
 80137d6:	2080      	movs	r0, #128	@ 0x80
 80137d8:	0600      	lsls	r0, r0, #24
 80137da:	e7e1      	b.n	80137a0 <USB_EPStartXfer+0xf4>
 80137dc:	2a01      	cmp	r2, #1
 80137de:	d1e1      	bne.n	80137a4 <USB_EPStartXfer+0xf8>
 80137e0:	7822      	ldrb	r2, [r4, #0]
 80137e2:	4961      	ldr	r1, [pc, #388]	@ (8013968 <USB_EPStartXfer+0x2bc>)
 80137e4:	00d2      	lsls	r2, r2, #3
 80137e6:	1852      	adds	r2, r2, r1
 80137e8:	6811      	ldr	r1, [r2, #0]
 80137ea:	b289      	uxth	r1, r1
 80137ec:	6011      	str	r1, [r2, #0]
 80137ee:	6810      	ldr	r0, [r2, #0]
 80137f0:	0419      	lsls	r1, r3, #16
 80137f2:	e7d5      	b.n	80137a0 <USB_EPStartXfer+0xf4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80137f4:	6810      	ldr	r0, [r2, #0]
 80137f6:	0429      	lsls	r1, r5, #16
 80137f8:	b280      	uxth	r0, r0
 80137fa:	6010      	str	r0, [r2, #0]
 80137fc:	6810      	ldr	r0, [r2, #0]
 80137fe:	4308      	orrs	r0, r1
 8013800:	6010      	str	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013802:	8922      	ldrh	r2, [r4, #8]
 8013804:	0030      	movs	r0, r6
 8013806:	9901      	ldr	r1, [sp, #4]
 8013808:	f7ff ff22 	bl	8013650 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 801380c:	6a23      	ldr	r3, [r4, #32]
 801380e:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 8013810:	6167      	str	r7, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8013812:	4293      	cmp	r3, r2
 8013814:	d902      	bls.n	801381c <USB_EPStartXfer+0x170>
              ep->xfer_len_db -= len;
 8013816:	1b5b      	subs	r3, r3, r5
 8013818:	9302      	str	r3, [sp, #8]
 801381a:	002b      	movs	r3, r5
 801381c:	9a02      	ldr	r2, [sp, #8]
 801381e:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013820:	7862      	ldrb	r2, [r4, #1]
 8013822:	2a00      	cmp	r2, #0
 8013824:	d126      	bne.n	8013874 <USB_EPStartXfer+0x1c8>
 8013826:	7822      	ldrb	r2, [r4, #0]
 8013828:	494f      	ldr	r1, [pc, #316]	@ (8013968 <USB_EPStartXfer+0x2bc>)
 801382a:	00d2      	lsls	r2, r2, #3
 801382c:	1852      	adds	r2, r2, r1
 801382e:	6851      	ldr	r1, [r2, #4]
 8013830:	0189      	lsls	r1, r1, #6
 8013832:	0989      	lsrs	r1, r1, #6
 8013834:	6051      	str	r1, [r2, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d107      	bne.n	801384a <USB_EPStartXfer+0x19e>
 801383a:	2180      	movs	r1, #128	@ 0x80
 801383c:	6850      	ldr	r0, [r2, #4]
 801383e:	0609      	lsls	r1, r1, #24
 8013840:	4301      	orrs	r1, r0
 8013842:	6051      	str	r1, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013844:	8962      	ldrh	r2, [r4, #10]
 8013846:	b29b      	uxth	r3, r3
 8013848:	e7ae      	b.n	80137a8 <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801384a:	2b3e      	cmp	r3, #62	@ 0x3e
 801384c:	d806      	bhi.n	801385c <USB_EPStartXfer+0x1b0>
 801384e:	2001      	movs	r0, #1
 8013850:	0859      	lsrs	r1, r3, #1
 8013852:	4018      	ands	r0, r3
 8013854:	1809      	adds	r1, r1, r0
 8013856:	0689      	lsls	r1, r1, #26
 8013858:	6850      	ldr	r0, [r2, #4]
 801385a:	e7f1      	b.n	8013840 <USB_EPStartXfer+0x194>
 801385c:	201f      	movs	r0, #31
 801385e:	4018      	ands	r0, r3
 8013860:	4245      	negs	r5, r0
 8013862:	4168      	adcs	r0, r5
 8013864:	0959      	lsrs	r1, r3, #5
 8013866:	1a09      	subs	r1, r1, r0
 8013868:	6850      	ldr	r0, [r2, #4]
 801386a:	0689      	lsls	r1, r1, #26
 801386c:	4301      	orrs	r1, r0
 801386e:	2080      	movs	r0, #128	@ 0x80
 8013870:	0600      	lsls	r0, r0, #24
 8013872:	e7e5      	b.n	8013840 <USB_EPStartXfer+0x194>
 8013874:	2a01      	cmp	r2, #1
 8013876:	d1e5      	bne.n	8013844 <USB_EPStartXfer+0x198>
 8013878:	7822      	ldrb	r2, [r4, #0]
 801387a:	493b      	ldr	r1, [pc, #236]	@ (8013968 <USB_EPStartXfer+0x2bc>)
 801387c:	00d2      	lsls	r2, r2, #3
 801387e:	1852      	adds	r2, r2, r1
 8013880:	6851      	ldr	r1, [r2, #4]
 8013882:	b289      	uxth	r1, r1
 8013884:	6051      	str	r1, [r2, #4]
 8013886:	6850      	ldr	r0, [r2, #4]
 8013888:	0419      	lsls	r1, r3, #16
 801388a:	e7d9      	b.n	8013840 <USB_EPStartXfer+0x194>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801388c:	6805      	ldr	r5, [r0, #0]
 801388e:	4f3b      	ldr	r7, [pc, #236]	@ (801397c <USB_EPStartXfer+0x2d0>)
 8013890:	4937      	ldr	r1, [pc, #220]	@ (8013970 <USB_EPStartXfer+0x2c4>)
 8013892:	403d      	ands	r5, r7
 8013894:	430d      	orrs	r5, r1
 8013896:	6005      	str	r5, [r0, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013898:	6810      	ldr	r0, [r2, #0]
 801389a:	b280      	uxth	r0, r0
 801389c:	6010      	str	r0, [r2, #0]
 801389e:	6815      	ldr	r5, [r2, #0]
 80138a0:	0418      	lsls	r0, r3, #16
 80138a2:	4328      	orrs	r0, r5
 80138a4:	6010      	str	r0, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138a6:	b29b      	uxth	r3, r3
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138a8:	8922      	ldrh	r2, [r4, #8]
 80138aa:	e00d      	b.n	80138c8 <USB_EPStartXfer+0x21c>
        ep->xfer_len_db -= len;
 80138ac:	1b5b      	subs	r3, r3, r5
 80138ae:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80138b0:	6800      	ldr	r0, [r0, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80138b2:	b2ab      	uxth	r3, r5
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80138b4:	042f      	lsls	r7, r5, #16
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80138b6:	0640      	lsls	r0, r0, #25
 80138b8:	d508      	bpl.n	80138cc <USB_EPStartXfer+0x220>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80138ba:	6850      	ldr	r0, [r2, #4]
 80138bc:	b280      	uxth	r0, r0
 80138be:	6050      	str	r0, [r2, #4]
 80138c0:	6850      	ldr	r0, [r2, #4]
 80138c2:	4338      	orrs	r0, r7
 80138c4:	6050      	str	r0, [r2, #4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138c6:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138c8:	9901      	ldr	r1, [sp, #4]
 80138ca:	e76e      	b.n	80137aa <USB_EPStartXfer+0xfe>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80138cc:	6810      	ldr	r0, [r2, #0]
 80138ce:	b280      	uxth	r0, r0
 80138d0:	6010      	str	r0, [r2, #0]
 80138d2:	6815      	ldr	r5, [r2, #0]
 80138d4:	433d      	orrs	r5, r7
 80138d6:	6015      	str	r5, [r2, #0]
 80138d8:	e7e6      	b.n	80138a8 <USB_EPStartXfer+0x1fc>
    if (ep->doublebuffer == 0U)
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d126      	bne.n	801392c <USB_EPStartXfer+0x280>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80138de:	780b      	ldrb	r3, [r1, #0]
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80138e0:	698a      	ldr	r2, [r1, #24]
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	18c3      	adds	r3, r0, r3
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80138e6:	2a00      	cmp	r2, #0
 80138e8:	d11b      	bne.n	8013922 <USB_EPStartXfer+0x276>
 80138ea:	78ca      	ldrb	r2, [r1, #3]
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	d118      	bne.n	8013922 <USB_EPStartXfer+0x276>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80138f0:	4a20      	ldr	r2, [pc, #128]	@ (8013974 <USB_EPStartXfer+0x2c8>)
 80138f2:	6819      	ldr	r1, [r3, #0]
 80138f4:	4011      	ands	r1, r2
 80138f6:	4a20      	ldr	r2, [pc, #128]	@ (8013978 <USB_EPStartXfer+0x2cc>)
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80138f8:	430a      	orrs	r2, r1
 80138fa:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > ep->maxpacket)
 80138fc:	69a3      	ldr	r3, [r4, #24]
 80138fe:	6922      	ldr	r2, [r4, #16]
 8013900:	4293      	cmp	r3, r2
 8013902:	d92e      	bls.n	8013962 <USB_EPStartXfer+0x2b6>
        ep->xfer_len -= ep->maxpacket;
 8013904:	1a9b      	subs	r3, r3, r2
        ep->xfer_len = 0U;
 8013906:	61a3      	str	r3, [r4, #24]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013908:	7823      	ldrb	r3, [r4, #0]
 801390a:	4a1d      	ldr	r2, [pc, #116]	@ (8013980 <USB_EPStartXfer+0x2d4>)
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	18f6      	adds	r6, r6, r3
 8013910:	6833      	ldr	r3, [r6, #0]
 8013912:	4013      	ands	r3, r2
 8013914:	22c0      	movs	r2, #192	@ 0xc0
 8013916:	0192      	lsls	r2, r2, #6
 8013918:	405a      	eors	r2, r3
 801391a:	4b15      	ldr	r3, [pc, #84]	@ (8013970 <USB_EPStartXfer+0x2c4>)
 801391c:	4313      	orrs	r3, r2
 801391e:	6033      	str	r3, [r6, #0]
 8013920:	e6f2      	b.n	8013708 <USB_EPStartXfer+0x5c>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8013922:	4a16      	ldr	r2, [pc, #88]	@ (801397c <USB_EPStartXfer+0x2d0>)
 8013924:	6819      	ldr	r1, [r3, #0]
 8013926:	4011      	ands	r1, r2
 8013928:	4a11      	ldr	r2, [pc, #68]	@ (8013970 <USB_EPStartXfer+0x2c4>)
 801392a:	e7e5      	b.n	80138f8 <USB_EPStartXfer+0x24c>
      if (ep->type == EP_TYPE_BULK)
 801392c:	78cb      	ldrb	r3, [r1, #3]
 801392e:	2b02      	cmp	r3, #2
 8013930:	d113      	bne.n	801395a <USB_EPStartXfer+0x2ae>
        if (ep->xfer_count != 0U)
 8013932:	69cb      	ldr	r3, [r1, #28]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d0e7      	beq.n	8013908 <USB_EPStartXfer+0x25c>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8013938:	780b      	ldrb	r3, [r1, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801393a:	4a12      	ldr	r2, [pc, #72]	@ (8013984 <USB_EPStartXfer+0x2d8>)
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	18c1      	adds	r1, r0, r3
 8013940:	680b      	ldr	r3, [r1, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013942:	4013      	ands	r3, r2
 8013944:	4293      	cmp	r3, r2
 8013946:	d001      	beq.n	801394c <USB_EPStartXfer+0x2a0>
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1dd      	bne.n	8013908 <USB_EPStartXfer+0x25c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801394c:	680a      	ldr	r2, [r1, #0]
 801394e:	4b09      	ldr	r3, [pc, #36]	@ (8013974 <USB_EPStartXfer+0x2c8>)
 8013950:	401a      	ands	r2, r3
 8013952:	4b0d      	ldr	r3, [pc, #52]	@ (8013988 <USB_EPStartXfer+0x2dc>)
 8013954:	4313      	orrs	r3, r2
 8013956:	600b      	str	r3, [r1, #0]
 8013958:	e7d6      	b.n	8013908 <USB_EPStartXfer+0x25c>
        return HAL_ERROR;
 801395a:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 801395c:	2b01      	cmp	r3, #1
 801395e:	d000      	beq.n	8013962 <USB_EPStartXfer+0x2b6>
 8013960:	e6d3      	b.n	801370a <USB_EPStartXfer+0x5e>
        ep->xfer_len = 0U;
 8013962:	2300      	movs	r3, #0
 8013964:	e7cf      	b.n	8013906 <USB_EPStartXfer+0x25a>
 8013966:	46c0      	nop			@ (mov r8, r8)
 8013968:	40009800 	.word	0x40009800
 801396c:	07ff8fbf 	.word	0x07ff8fbf
 8013970:	00008080 	.word	0x00008080
 8013974:	07ff8f8f 	.word	0x07ff8f8f
 8013978:	00008180 	.word	0x00008180
 801397c:	07ff8e8f 	.word	0x07ff8e8f
 8013980:	07ffbf8f 	.word	0x07ffbf8f
 8013984:	00004040 	.word	0x00004040
 8013988:	000080c0 	.word	0x000080c0

0801398c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801398c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 801398e:	2403      	movs	r4, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013990:	1cd8      	adds	r0, r3, #3
  uint16_t remaining_bytes = wNBytes % 4U;
 8013992:	4023      	ands	r3, r4
  uint8_t *pBuf = pbUsrBuf;

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013994:	4c11      	ldr	r4, [pc, #68]	@ (80139dc <USB_ReadPMA+0x50>)
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013996:	0880      	lsrs	r0, r0, #2
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013998:	1912      	adds	r2, r2, r4

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
  {
    NbWords--;
 801399a:	001c      	movs	r4, r3
 801399c:	1e65      	subs	r5, r4, #1
 801399e:	41ac      	sbcs	r4, r5
{
 80139a0:	0016      	movs	r6, r2
    NbWords--;
 80139a2:	1b00      	subs	r0, r0, r4
 80139a4:	0084      	lsls	r4, r0, #2
 80139a6:	190d      	adds	r5, r1, r4
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80139a8:	42a9      	cmp	r1, r5
 80139aa:	d10d      	bne.n	80139c8 <USB_ReadPMA+0x3c>
    pBuf++;
    pBuf++;
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d00a      	beq.n	80139c6 <USB_ReadPMA+0x3a>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80139b0:	1912      	adds	r2, r2, r4
 80139b2:	6810      	ldr	r0, [r2, #0]
 80139b4:	2200      	movs	r2, #0

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80139b6:	0004      	movs	r4, r0
 80139b8:	00d1      	lsls	r1, r2, #3
 80139ba:	40cc      	lsrs	r4, r1
 80139bc:	54ac      	strb	r4, [r5, r2]
      count++;
 80139be:	3201      	adds	r2, #1
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 80139c0:	b291      	uxth	r1, r2
 80139c2:	428b      	cmp	r3, r1
 80139c4:	d1f7      	bne.n	80139b6 <USB_ReadPMA+0x2a>
  }
}
 80139c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80139c8:	ce01      	ldmia	r6!, {r0}
 80139ca:	0a07      	lsrs	r7, r0, #8
 80139cc:	7008      	strb	r0, [r1, #0]
 80139ce:	704f      	strb	r7, [r1, #1]
 80139d0:	0c07      	lsrs	r7, r0, #16
 80139d2:	0e00      	lsrs	r0, r0, #24
 80139d4:	708f      	strb	r7, [r1, #2]
 80139d6:	70c8      	strb	r0, [r1, #3]
    pBuf++;
 80139d8:	3104      	adds	r1, #4
  for (count = NbWords; count != 0U; count--)
 80139da:	e7e5      	b.n	80139a8 <USB_ReadPMA+0x1c>
 80139dc:	40009800 	.word	0x40009800

080139e0 <disk_status>:

	// 	return stat;
	// }
	// return STA_NOINIT;
	return 0;
}
 80139e0:	2000      	movs	r0, #0
 80139e2:	4770      	bx	lr

080139e4 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80139e4:	b510      	push	{r4, lr}
 80139e6:	1e04      	subs	r4, r0, #0
	// 	// translate the reslut code here

	// 	return stat;
	// }
	// return STA_NOINIT;
	if(pdrv)
 80139e8:	d103      	bne.n	80139f2 <disk_initialize+0xe>
		return STA_NOINIT;
	else {
		SPI_FLASH_Init();
 80139ea:	f7f6 f8a5 	bl	8009b38 <SPI_FLASH_Init>
		return  0;
	}
}
 80139ee:	0020      	movs	r0, r4
 80139f0:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
 80139f2:	2401      	movs	r4, #1
 80139f4:	e7fb      	b.n	80139ee <disk_initialize+0xa>

080139f6 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80139f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UNUSED(pdrv);
	int i;

	for(i=0;i<count;i++)
	{
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 80139f8:	2780      	movs	r7, #128	@ 0x80
{
 80139fa:	000d      	movs	r5, r1
 80139fc:	0014      	movs	r4, r2
 80139fe:	18d6      	adds	r6, r2, r3
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 8013a00:	017f      	lsls	r7, r7, #5
	for(i=0;i<count;i++)
 8013a02:	42b4      	cmp	r4, r6
 8013a04:	d101      	bne.n	8013a0a <disk_read+0x14>
			return RES_ERROR;
		}
		sector ++;
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
	}
	return RES_OK;
 8013a06:	2000      	movs	r0, #0
}
 8013a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SPI_FLASH_ReadData(sector * MEDIA_LOGICAL_SECTOR_SIZE, buff, MEDIA_LOGICAL_SECTOR_SIZE) != HAL_OK) {
 8013a0a:	003a      	movs	r2, r7
 8013a0c:	0029      	movs	r1, r5
 8013a0e:	0320      	lsls	r0, r4, #12
 8013a10:	f7f6 f940 	bl	8009c94 <SPI_FLASH_ReadData>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d104      	bne.n	8013a22 <disk_read+0x2c>
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8013a18:	2380      	movs	r3, #128	@ 0x80
 8013a1a:	015b      	lsls	r3, r3, #5
		sector ++;
 8013a1c:	3401      	adds	r4, #1
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8013a1e:	18ed      	adds	r5, r5, r3
	for(i=0;i<count;i++)
 8013a20:	e7ef      	b.n	8013a02 <disk_read+0xc>
			return RES_ERROR;
 8013a22:	2001      	movs	r0, #1
 8013a24:	e7f0      	b.n	8013a08 <disk_read+0x12>

08013a26 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8013a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a28:	000d      	movs	r5, r1
 8013a2a:	0014      	movs	r4, r2
 8013a2c:	18d3      	adds	r3, r2, r3
 8013a2e:	9301      	str	r3, [sp, #4]
    // Use a variable for the address to make it clearer
    uint32_t addr;
    // Use a temporary pointer for the buffer
    const BYTE* current_buff_pos;

	for(i = 0; i < count; i++)
 8013a30:	9b01      	ldr	r3, [sp, #4]
 8013a32:	429c      	cmp	r4, r3
 8013a34:	d101      	bne.n	8013a3a <disk_write+0x14>

		sector++;
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
	}

	return RES_OK;
 8013a36:	2000      	movs	r0, #0
}
 8013a38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        addr = sector * MEDIA_LOGICAL_SECTOR_SIZE;
 8013a3a:	0327      	lsls	r7, r4, #12
		SPI_FLASH_EraseSector(addr);
 8013a3c:	0038      	movs	r0, r7
 8013a3e:	f7f6 f89f 	bl	8009b80 <SPI_FLASH_EraseSector>
        current_buff_pos = buff;
 8013a42:	002e      	movs	r6, r5
			if(SPI_FLASH_PageProgram(addr, (uint8_t*)current_buff_pos, NOR_FLASH_PAGE_SIZE) != HAL_OK) {
 8013a44:	2280      	movs	r2, #128	@ 0x80
 8013a46:	0031      	movs	r1, r6
 8013a48:	0038      	movs	r0, r7
 8013a4a:	0052      	lsls	r2, r2, #1
 8013a4c:	f7f6 f8dc 	bl	8009c08 <SPI_FLASH_PageProgram>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d10b      	bne.n	8013a6c <disk_write+0x46>
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013a54:	2380      	movs	r3, #128	@ 0x80
            current_buff_pos += NOR_FLASH_PAGE_SIZE;
 8013a56:	3601      	adds	r6, #1
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013a58:	015b      	lsls	r3, r3, #5
            addr += NOR_FLASH_PAGE_SIZE;
 8013a5a:	3701      	adds	r7, #1
            current_buff_pos += NOR_FLASH_PAGE_SIZE;
 8013a5c:	36ff      	adds	r6, #255	@ 0xff
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013a5e:	18eb      	adds	r3, r5, r3
            addr += NOR_FLASH_PAGE_SIZE;
 8013a60:	37ff      	adds	r7, #255	@ 0xff
		for (j = 0; j < (MEDIA_LOGICAL_SECTOR_SIZE / NOR_FLASH_PAGE_SIZE); j++)
 8013a62:	429e      	cmp	r6, r3
 8013a64:	d1ee      	bne.n	8013a44 <disk_write+0x1e>
		buff += MEDIA_LOGICAL_SECTOR_SIZE;
 8013a66:	0035      	movs	r5, r6
		sector++;
 8013a68:	3401      	adds	r4, #1
	for(i = 0; i < count; i++)
 8013a6a:	e7e1      	b.n	8013a30 <disk_write+0xa>
				return RES_ERROR;
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	e7e3      	b.n	8013a38 <disk_write+0x12>

08013a70 <disk_ioctl>:
    *(DWORD*)buff = (NOR_FLASH_BLOCK_64K_SIZE/MEDIA_LOGICAL_SECTOR_SIZE);
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8013a70:	2004      	movs	r0, #4
{
 8013a72:	b500      	push	{lr}
  switch (cmd)
 8013a74:	2903      	cmp	r1, #3
 8013a76:	d808      	bhi.n	8013a8a <disk_ioctl+0x1a>
 8013a78:	0008      	movs	r0, r1
 8013a7a:	f7ec fb57 	bl	800012c <__gnu_thumb1_case_uqi>
 8013a7e:	0205      	.short	0x0205
 8013a80:	0b07      	.short	0x0b07
    *(DWORD*)buff = NOR_FLASH_TOTAL_SIZE / MEDIA_LOGICAL_SECTOR_SIZE;
 8013a82:	2380      	movs	r3, #128	@ 0x80
 8013a84:	005b      	lsls	r3, r3, #1
 8013a86:	6013      	str	r3, [r2, #0]
    res = RES_OK;
 8013a88:	2000      	movs	r0, #0
  }

  return res;
}
 8013a8a:	bd00      	pop	{pc}
    *(WORD*)buff = MEDIA_LOGICAL_SECTOR_SIZE;
 8013a8c:	2380      	movs	r3, #128	@ 0x80
 8013a8e:	015b      	lsls	r3, r3, #5
 8013a90:	8013      	strh	r3, [r2, #0]
    break;
 8013a92:	e7f9      	b.n	8013a88 <disk_ioctl+0x18>
    *(DWORD*)buff = (NOR_FLASH_BLOCK_64K_SIZE/MEDIA_LOGICAL_SECTOR_SIZE);
 8013a94:	2310      	movs	r3, #16
 8013a96:	e7f6      	b.n	8013a86 <disk_ioctl+0x16>

08013a98 <get_fattime>:
         | ((DWORD)7 << 21)             /* Month = July */
         | ((DWORD)23 << 16)            /* Day = 23 */
         | ((DWORD)17 << 11)            /* Hour = 17 */
         | ((DWORD)36 << 5)             /* Minute = 36 */
         | ((DWORD)0 >> 1);             /* Second = 0 */
}
 8013a98:	4800      	ldr	r0, [pc, #0]	@ (8013a9c <get_fattime+0x4>)
 8013a9a:	4770      	bx	lr
 8013a9c:	5af78c80 	.word	0x5af78c80

08013aa0 <ld_32>:
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
 8013aa0:	7842      	ldrb	r2, [r0, #1]
 8013aa2:	7803      	ldrb	r3, [r0, #0]
 8013aa4:	0212      	lsls	r2, r2, #8
 8013aa6:	431a      	orrs	r2, r3
 8013aa8:	7883      	ldrb	r3, [r0, #2]
 8013aaa:	78c0      	ldrb	r0, [r0, #3]
 8013aac:	041b      	lsls	r3, r3, #16
 8013aae:	4313      	orrs	r3, r2
 8013ab0:	0600      	lsls	r0, r0, #24
 8013ab2:	4318      	orrs	r0, r3
	return rv;
}
 8013ab4:	4770      	bx	lr

08013ab6 <st_32>:
	*ptr++ = (BYTE)val;
}

static void st_32 (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8013ab6:	0a0b      	lsrs	r3, r1, #8
 8013ab8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013aba:	7043      	strb	r3, [r0, #1]
 8013abc:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013abe:	0e09      	lsrs	r1, r1, #24
 8013ac0:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8013ac2:	70c1      	strb	r1, [r0, #3]
}
 8013ac4:	4770      	bx	lr

08013ac6 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8013ac6:	6942      	ldr	r2, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 8013ac8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8013aca:	3a02      	subs	r2, #2
{
 8013acc:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8013ace:	2000      	movs	r0, #0
 8013ad0:	428a      	cmp	r2, r1
 8013ad2:	d903      	bls.n	8013adc <clst2sect+0x16>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8013ad4:	895a      	ldrh	r2, [r3, #10]
 8013ad6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013ad8:	4351      	muls	r1, r2
 8013ada:	1808      	adds	r0, r1, r0
}
 8013adc:	4770      	bx	lr

08013ade <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 8013ade:	6803      	ldr	r3, [r0, #0]
	if (!tp) return -1;		/* Invalid path name? */
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00f      	beq.n	8013b04 <get_ldnumber+0x26>
 8013ae4:	001a      	movs	r2, r3
	do {					/* Find a colon in the path */
		chr = *tt++;
 8013ae6:	7811      	ldrb	r1, [r2, #0]
 8013ae8:	3201      	adds	r2, #1
	} while (!IsTerminator(chr) && chr != ':');
 8013aea:	2920      	cmp	r1, #32
 8013aec:	d908      	bls.n	8013b00 <get_ldnumber+0x22>
 8013aee:	293a      	cmp	r1, #58	@ 0x3a
 8013af0:	d1f9      	bne.n	8013ae6 <get_ldnumber+0x8>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 8013af2:	7819      	ldrb	r1, [r3, #0]
 8013af4:	2930      	cmp	r1, #48	@ 0x30
 8013af6:	d105      	bne.n	8013b04 <get_ldnumber+0x26>
 8013af8:	3302      	adds	r3, #2
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d102      	bne.n	8013b04 <get_ldnumber+0x26>
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
		*path = tt;		/* Snip the drive prefix off */
 8013afe:	6002      	str	r2, [r0, #0]
		return i;		/* Return the found drive number */
 8013b00:	2000      	movs	r0, #0
#if FF_FS_RPATH
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
#endif
}
 8013b02:	4770      	bx	lr
	if (!tp) return -1;		/* Invalid path name? */
 8013b04:	2001      	movs	r0, #1
 8013b06:	4240      	negs	r0, r0
 8013b08:	e7fb      	b.n	8013b02 <get_ldnumber+0x24>

08013b0a <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8013b0a:	b570      	push	{r4, r5, r6, lr}
 8013b0c:	0004      	movs	r4, r0
 8013b0e:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013b10:	2800      	cmp	r0, #0
 8013b12:	d104      	bne.n	8013b1e <validate+0x14>
	FRESULT res = FR_INVALID_OBJECT;
 8013b14:	2309      	movs	r3, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8013b16:	2200      	movs	r2, #0
	return res;
}
 8013b18:	0018      	movs	r0, r3
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8013b1a:	602a      	str	r2, [r5, #0]
}
 8013b1c:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013b1e:	6803      	ldr	r3, [r0, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d0f7      	beq.n	8013b14 <validate+0xa>
 8013b24:	781a      	ldrb	r2, [r3, #0]
 8013b26:	2a00      	cmp	r2, #0
 8013b28:	d0f4      	beq.n	8013b14 <validate+0xa>
 8013b2a:	8881      	ldrh	r1, [r0, #4]
 8013b2c:	88da      	ldrh	r2, [r3, #6]
 8013b2e:	4291      	cmp	r1, r2
 8013b30:	d1f0      	bne.n	8013b14 <validate+0xa>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8013b32:	7858      	ldrb	r0, [r3, #1]
 8013b34:	f7ff ff54 	bl	80139e0 <disk_status>
 8013b38:	2201      	movs	r2, #1
 8013b3a:	0003      	movs	r3, r0
 8013b3c:	4013      	ands	r3, r2
 8013b3e:	4210      	tst	r0, r2
 8013b40:	d1e8      	bne.n	8013b14 <validate+0xa>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8013b42:	6822      	ldr	r2, [r4, #0]
 8013b44:	e7e8      	b.n	8013b18 <validate+0xe>

08013b46 <sync_window>:
{
 8013b46:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8013b48:	7903      	ldrb	r3, [r0, #4]
{
 8013b4a:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d019      	beq.n	8013b84 <sync_window+0x3e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8013b50:	0005      	movs	r5, r0
 8013b52:	3530      	adds	r5, #48	@ 0x30
 8013b54:	2301      	movs	r3, #1
 8013b56:	0029      	movs	r1, r5
 8013b58:	7840      	ldrb	r0, [r0, #1]
 8013b5a:	69e2      	ldr	r2, [r4, #28]
 8013b5c:	f7ff ff63 	bl	8013a26 <disk_write>
			res = FR_DISK_ERR;
 8013b60:	2301      	movs	r3, #1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8013b62:	2800      	cmp	r0, #0
 8013b64:	d10f      	bne.n	8013b86 <sync_window+0x40>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8013b66:	69e2      	ldr	r2, [r4, #28]
 8013b68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			fs->wflag = 0;	/* Clear window dirty flag */
 8013b6a:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8013b6c:	69a0      	ldr	r0, [r4, #24]
 8013b6e:	1a51      	subs	r1, r2, r1
 8013b70:	4281      	cmp	r1, r0
 8013b72:	d207      	bcs.n	8013b84 <sync_window+0x3e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8013b74:	78e1      	ldrb	r1, [r4, #3]
 8013b76:	2902      	cmp	r1, #2
 8013b78:	d104      	bne.n	8013b84 <sync_window+0x3e>
 8013b7a:	1812      	adds	r2, r2, r0
 8013b7c:	0029      	movs	r1, r5
 8013b7e:	7860      	ldrb	r0, [r4, #1]
 8013b80:	f7ff ff51 	bl	8013a26 <disk_write>
	FRESULT res = FR_OK;
 8013b84:	2300      	movs	r3, #0
}
 8013b86:	0018      	movs	r0, r3
 8013b88:	bd70      	pop	{r4, r5, r6, pc}

08013b8a <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8013b8a:	b293      	uxth	r3, r2
 8013b8c:	0a1b      	lsrs	r3, r3, #8
 8013b8e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8013b90:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8013b92:	7803      	ldrb	r3, [r0, #0]
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d103      	bne.n	8013ba0 <st_clust+0x16>
		st_16(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013b98:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013b9a:	750a      	strb	r2, [r1, #20]
 8013b9c:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8013b9e:	754a      	strb	r2, [r1, #21]
}
 8013ba0:	4770      	bx	lr

08013ba2 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
 8013ba2:	69c3      	ldr	r3, [r0, #28]
{
 8013ba4:	b570      	push	{r4, r5, r6, lr}
 8013ba6:	0004      	movs	r4, r0
 8013ba8:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 8013baa:	2000      	movs	r0, #0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8013bac:	428b      	cmp	r3, r1
 8013bae:	d011      	beq.n	8013bd4 <move_window+0x32>
		res = sync_window(fs);		/* Flush the window */
 8013bb0:	0020      	movs	r0, r4
 8013bb2:	f7ff ffc8 	bl	8013b46 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	d10c      	bne.n	8013bd4 <move_window+0x32>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8013bba:	0021      	movs	r1, r4
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	002a      	movs	r2, r5
 8013bc0:	7860      	ldrb	r0, [r4, #1]
 8013bc2:	3130      	adds	r1, #48	@ 0x30
 8013bc4:	f7ff ff17 	bl	80139f6 <disk_read>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d002      	beq.n	8013bd2 <move_window+0x30>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8013bcc:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8013bce:	2001      	movs	r0, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8013bd0:	426d      	negs	r5, r5
			fs->winsect = sect;
 8013bd2:	61e5      	str	r5, [r4, #28]
}
 8013bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013bd8 <check_fs>:
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8013bd8:	2300      	movs	r3, #0
{
 8013bda:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8013bdc:	7103      	strb	r3, [r0, #4]
 8013bde:	3b01      	subs	r3, #1
 8013be0:	61c3      	str	r3, [r0, #28]
{
 8013be2:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8013be4:	f7ff ffdd 	bl	8013ba2 <move_window>
 8013be8:	2304      	movs	r3, #4
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d162      	bne.n	8013cb4 <check_fs+0xdc>
	sign = ld_16(fs->win + BS_55AA);
 8013bee:	4a32      	ldr	r2, [pc, #200]	@ (8013cb8 <check_fs+0xe0>)
 8013bf0:	4b31      	ldr	r3, [pc, #196]	@ (8013cb8 <check_fs+0xe0>)
 8013bf2:	18a2      	adds	r2, r4, r2
 8013bf4:	7855      	ldrb	r5, [r2, #1]
 8013bf6:	5ce3      	ldrb	r3, [r4, r3]
 8013bf8:	022d      	lsls	r5, r5, #8
 8013bfa:	431d      	orrs	r5, r3
	b = fs->win[BS_JmpBoot];
 8013bfc:	0023      	movs	r3, r4
 8013bfe:	3330      	adds	r3, #48	@ 0x30
 8013c00:	781b      	ldrb	r3, [r3, #0]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8013c02:	4a2e      	ldr	r2, [pc, #184]	@ (8013cbc <check_fs+0xe4>)
 8013c04:	2beb      	cmp	r3, #235	@ 0xeb
 8013c06:	d003      	beq.n	8013c10 <check_fs+0x38>
 8013c08:	3318      	adds	r3, #24
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d84c      	bhi.n	8013caa <check_fs+0xd2>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8013c10:	4295      	cmp	r5, r2
 8013c12:	d107      	bne.n	8013c24 <check_fs+0x4c>
 8013c14:	0020      	movs	r0, r4
 8013c16:	2208      	movs	r2, #8
 8013c18:	4929      	ldr	r1, [pc, #164]	@ (8013cc0 <check_fs+0xe8>)
 8013c1a:	3082      	adds	r0, #130	@ 0x82
 8013c1c:	f006 fa0a 	bl	801a034 <memcmp>
			return 0;	/* It is an FAT32 VBR */
 8013c20:	1e03      	subs	r3, r0, #0
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8013c22:	d047      	beq.n	8013cb4 <check_fs+0xdc>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8013c24:	0023      	movs	r3, r4
 8013c26:	2280      	movs	r2, #128	@ 0x80
 8013c28:	333b      	adds	r3, #59	@ 0x3b
 8013c2a:	7819      	ldrb	r1, [r3, #0]
 8013c2c:	785b      	ldrb	r3, [r3, #1]
 8013c2e:	0152      	lsls	r2, r2, #5
 8013c30:	021b      	lsls	r3, r3, #8
 8013c32:	430b      	orrs	r3, r1
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d138      	bne.n	8013caa <check_fs+0xd2>
		b = fs->win[BPB_SecPerClus];
 8013c38:	0023      	movs	r3, r4
 8013c3a:	333d      	adds	r3, #61	@ 0x3d
 8013c3c:	781b      	ldrb	r3, [r3, #0]
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d033      	beq.n	8013caa <check_fs+0xd2>
 8013c42:	1e5a      	subs	r2, r3, #1
 8013c44:	4213      	tst	r3, r2
 8013c46:	d130      	bne.n	8013caa <check_fs+0xd2>
			&& ld_16(fs->win + BPB_RsvdSecCnt) != 0		/* Properness of number of reserved sectors (MNBZ) */
 8013c48:	0023      	movs	r3, r4
 8013c4a:	333e      	adds	r3, #62	@ 0x3e
 8013c4c:	781a      	ldrb	r2, [r3, #0]
 8013c4e:	3301      	adds	r3, #1
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	021b      	lsls	r3, r3, #8
 8013c54:	4313      	orrs	r3, r2
 8013c56:	d028      	beq.n	8013caa <check_fs+0xd2>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 8013c58:	0023      	movs	r3, r4
 8013c5a:	3340      	adds	r3, #64	@ 0x40
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	2b01      	cmp	r3, #1
 8013c62:	d822      	bhi.n	8013caa <check_fs+0xd2>
			&& ld_16(fs->win + BPB_RootEntCnt) != 0		/* Properness of root dir size (MNBZ) */
 8013c64:	0023      	movs	r3, r4
 8013c66:	3341      	adds	r3, #65	@ 0x41
 8013c68:	781a      	ldrb	r2, [r3, #0]
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	021b      	lsls	r3, r3, #8
 8013c70:	4313      	orrs	r3, r2
 8013c72:	d01a      	beq.n	8013caa <check_fs+0xd2>
			&& (ld_16(fs->win + BPB_TotSec16) >= 128 || ld_32(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 8013c74:	0023      	movs	r3, r4
 8013c76:	3343      	adds	r3, #67	@ 0x43
 8013c78:	781a      	ldrb	r2, [r3, #0]
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	021b      	lsls	r3, r3, #8
 8013c80:	4313      	orrs	r3, r2
 8013c82:	2b7f      	cmp	r3, #127	@ 0x7f
 8013c84:	d807      	bhi.n	8013c96 <check_fs+0xbe>
 8013c86:	0020      	movs	r0, r4
 8013c88:	3050      	adds	r0, #80	@ 0x50
 8013c8a:	f7ff ff09 	bl	8013aa0 <ld_32>
 8013c8e:	2380      	movs	r3, #128	@ 0x80
 8013c90:	025b      	lsls	r3, r3, #9
 8013c92:	4298      	cmp	r0, r3
 8013c94:	d309      	bcc.n	8013caa <check_fs+0xd2>
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 8013c96:	0023      	movs	r3, r4
 8013c98:	3447      	adds	r4, #71	@ 0x47
 8013c9a:	7822      	ldrb	r2, [r4, #0]
 8013c9c:	3346      	adds	r3, #70	@ 0x46
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	0212      	lsls	r2, r2, #8
 8013ca2:	431a      	orrs	r2, r3
			return 0;	/* It is an FAT32 VBR */
 8013ca4:	2300      	movs	r3, #0
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d104      	bne.n	8013cb4 <check_fs+0xdc>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 8013caa:	4b06      	ldr	r3, [pc, #24]	@ (8013cc4 <check_fs+0xec>)
 8013cac:	18eb      	adds	r3, r5, r3
 8013cae:	1e5a      	subs	r2, r3, #1
 8013cb0:	4193      	sbcs	r3, r2
 8013cb2:	3302      	adds	r3, #2
}
 8013cb4:	0018      	movs	r0, r3
 8013cb6:	bd70      	pop	{r4, r5, r6, pc}
 8013cb8:	0000022e 	.word	0x0000022e
 8013cbc:	0000aa55 	.word	0x0000aa55
 8013cc0:	0801f98a 	.word	0x0801f98a
 8013cc4:	ffff55ab 	.word	0xffff55ab

08013cc8 <put_fat>:
{
 8013cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cca:	0007      	movs	r7, r0
 8013ccc:	000d      	movs	r5, r1
 8013cce:	0014      	movs	r4, r2
	FRESULT res = FR_INT_ERR;
 8013cd0:	2602      	movs	r6, #2
{
 8013cd2:	b085      	sub	sp, #20
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013cd4:	2901      	cmp	r1, #1
 8013cd6:	d945      	bls.n	8013d64 <put_fat+0x9c>
 8013cd8:	6943      	ldr	r3, [r0, #20]
 8013cda:	428b      	cmp	r3, r1
 8013cdc:	d942      	bls.n	8013d64 <put_fat+0x9c>
		switch (fs->fs_type) {
 8013cde:	7803      	ldrb	r3, [r0, #0]
 8013ce0:	9300      	str	r3, [sp, #0]
 8013ce2:	42b3      	cmp	r3, r6
 8013ce4:	d048      	beq.n	8013d78 <put_fat+0xb0>
 8013ce6:	2b03      	cmp	r3, #3
 8013ce8:	d058      	beq.n	8013d9c <put_fat+0xd4>
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d13a      	bne.n	8013d64 <put_fat+0x9c>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8013cee:	084b      	lsrs	r3, r1, #1
 8013cf0:	185b      	adds	r3, r3, r1
 8013cf2:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013cf4:	0b19      	lsrs	r1, r3, #12
 8013cf6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013cf8:	18c9      	adds	r1, r1, r3
 8013cfa:	f7ff ff52 	bl	8013ba2 <move_window>
 8013cfe:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8013d00:	d130      	bne.n	8013d64 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8013d02:	003b      	movs	r3, r7
 8013d04:	3330      	adds	r3, #48	@ 0x30
 8013d06:	9302      	str	r3, [sp, #8]
 8013d08:	9b01      	ldr	r3, [sp, #4]
 8013d0a:	9a02      	ldr	r2, [sp, #8]
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	9303      	str	r3, [sp, #12]
 8013d10:	9b01      	ldr	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8013d12:	9900      	ldr	r1, [sp, #0]
			p = fs->win + bc++ % SS(fs);
 8013d14:	051b      	lsls	r3, r3, #20
 8013d16:	0d1b      	lsrs	r3, r3, #20
 8013d18:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8013d1a:	9a00      	ldr	r2, [sp, #0]
 8013d1c:	402a      	ands	r2, r5
 8013d1e:	9201      	str	r2, [sp, #4]
 8013d20:	b2e2      	uxtb	r2, r4
 8013d22:	420d      	tst	r5, r1
 8013d24:	d005      	beq.n	8013d32 <put_fat+0x6a>
 8013d26:	200f      	movs	r0, #15
 8013d28:	7819      	ldrb	r1, [r3, #0]
 8013d2a:	0112      	lsls	r2, r2, #4
 8013d2c:	4001      	ands	r1, r0
 8013d2e:	430a      	orrs	r2, r1
 8013d30:	b2d2      	uxtb	r2, r2
 8013d32:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8013d34:	2301      	movs	r3, #1
 8013d36:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013d38:	9b03      	ldr	r3, [sp, #12]
 8013d3a:	0038      	movs	r0, r7
 8013d3c:	0b19      	lsrs	r1, r3, #12
 8013d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d40:	18c9      	adds	r1, r1, r3
 8013d42:	f7ff ff2e 	bl	8013ba2 <move_window>
 8013d46:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8013d48:	d10c      	bne.n	8013d64 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8013d4a:	9b03      	ldr	r3, [sp, #12]
 8013d4c:	9a02      	ldr	r2, [sp, #8]
 8013d4e:	051b      	lsls	r3, r3, #20
 8013d50:	0d1b      	lsrs	r3, r3, #20
 8013d52:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8013d54:	9a01      	ldr	r2, [sp, #4]
 8013d56:	2a00      	cmp	r2, #0
 8013d58:	d007      	beq.n	8013d6a <put_fat+0xa2>
 8013d5a:	0924      	lsrs	r4, r4, #4
 8013d5c:	b2e4      	uxtb	r4, r4
 8013d5e:	701c      	strb	r4, [r3, #0]
			fs->wflag = 1;
 8013d60:	2301      	movs	r3, #1
 8013d62:	713b      	strb	r3, [r7, #4]
}
 8013d64:	0030      	movs	r0, r6
 8013d66:	b005      	add	sp, #20
 8013d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8013d6a:	210f      	movs	r1, #15
 8013d6c:	781a      	ldrb	r2, [r3, #0]
 8013d6e:	0a24      	lsrs	r4, r4, #8
 8013d70:	438a      	bics	r2, r1
 8013d72:	400c      	ands	r4, r1
 8013d74:	4314      	orrs	r4, r2
 8013d76:	e7f2      	b.n	8013d5e <put_fat+0x96>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013d78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013d7a:	0ac9      	lsrs	r1, r1, #11
 8013d7c:	18c9      	adds	r1, r1, r3
 8013d7e:	f7ff ff10 	bl	8013ba2 <move_window>
 8013d82:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8013d84:	d1ee      	bne.n	8013d64 <put_fat+0x9c>
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8013d86:	003b      	movs	r3, r7
 8013d88:	4a11      	ldr	r2, [pc, #68]	@ (8013dd0 <put_fat+0x108>)
 8013d8a:	006d      	lsls	r5, r5, #1
 8013d8c:	3330      	adds	r3, #48	@ 0x30
 8013d8e:	4015      	ands	r5, r2
 8013d90:	195d      	adds	r5, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8013d92:	702c      	strb	r4, [r5, #0]
 8013d94:	b2a4      	uxth	r4, r4
 8013d96:	0a24      	lsrs	r4, r4, #8
	*ptr++ = (BYTE)val;
 8013d98:	706c      	strb	r4, [r5, #1]
			fs->wflag = 1;
 8013d9a:	e7e1      	b.n	8013d60 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013d9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013d9e:	0a89      	lsrs	r1, r1, #10
 8013da0:	18c9      	adds	r1, r1, r3
 8013da2:	f7ff fefe 	bl	8013ba2 <move_window>
 8013da6:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8013da8:	d1dc      	bne.n	8013d64 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013daa:	003b      	movs	r3, r7
 8013dac:	4a09      	ldr	r2, [pc, #36]	@ (8013dd4 <put_fat+0x10c>)
 8013dae:	00ad      	lsls	r5, r5, #2
 8013db0:	3330      	adds	r3, #48	@ 0x30
 8013db2:	4015      	ands	r5, r2
 8013db4:	195d      	adds	r5, r3, r5
 8013db6:	0028      	movs	r0, r5
 8013db8:	f7ff fe72 	bl	8013aa0 <ld_32>
 8013dbc:	0121      	lsls	r1, r4, #4
 8013dbe:	0f00      	lsrs	r0, r0, #28
 8013dc0:	0700      	lsls	r0, r0, #28
 8013dc2:	0909      	lsrs	r1, r1, #4
 8013dc4:	4301      	orrs	r1, r0
			st_32(fs->win + clst * 4 % SS(fs), val);
 8013dc6:	0028      	movs	r0, r5
 8013dc8:	f7ff fe75 	bl	8013ab6 <st_32>
 8013dcc:	e7c8      	b.n	8013d60 <put_fat+0x98>
 8013dce:	46c0      	nop			@ (mov r8, r8)
 8013dd0:	00000ffe 	.word	0x00000ffe
 8013dd4:	00000ffc 	.word	0x00000ffc

08013dd8 <dir_clear>:
{
 8013dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dda:	0005      	movs	r5, r0
 8013ddc:	000e      	movs	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013dde:	f7ff feb2 	bl	8013b46 <sync_window>
 8013de2:	0004      	movs	r4, r0
 8013de4:	2001      	movs	r0, #1
 8013de6:	2c00      	cmp	r4, #0
 8013de8:	d115      	bne.n	8013e16 <dir_clear+0x3e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8013dea:	0031      	movs	r1, r6
 8013dec:	0028      	movs	r0, r5
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8013dee:	002f      	movs	r7, r5
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8013df0:	f7ff fe69 	bl	8013ac6 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8013df4:	2280      	movs	r2, #128	@ 0x80
 8013df6:	3730      	adds	r7, #48	@ 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8013df8:	0006      	movs	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8013dfa:	61e8      	str	r0, [r5, #28]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8013dfc:	0021      	movs	r1, r4
 8013dfe:	0038      	movs	r0, r7
 8013e00:	0152      	lsls	r2, r2, #5
 8013e02:	f006 f925 	bl	801a050 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8013e06:	896b      	ldrh	r3, [r5, #10]
 8013e08:	429c      	cmp	r4, r3
 8013e0a:	d305      	bcc.n	8013e18 <dir_clear+0x40>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8013e0c:	8968      	ldrh	r0, [r5, #10]
 8013e0e:	1b00      	subs	r0, r0, r4
 8013e10:	1e43      	subs	r3, r0, #1
 8013e12:	4198      	sbcs	r0, r3
 8013e14:	b2c0      	uxtb	r0, r0
}
 8013e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8013e18:	2301      	movs	r3, #1
 8013e1a:	0039      	movs	r1, r7
 8013e1c:	7868      	ldrb	r0, [r5, #1]
 8013e1e:	1932      	adds	r2, r6, r4
 8013e20:	f7ff fe01 	bl	8013a26 <disk_write>
 8013e24:	2800      	cmp	r0, #0
 8013e26:	d1f1      	bne.n	8013e0c <dir_clear+0x34>
 8013e28:	3401      	adds	r4, #1
 8013e2a:	e7ec      	b.n	8013e06 <dir_clear+0x2e>

08013e2c <sync_fs>:
{
 8013e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e2e:	0004      	movs	r4, r0
	res = sync_window(fs);
 8013e30:	f7ff fe89 	bl	8013b46 <sync_window>
 8013e34:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8013e36:	d149      	bne.n	8013ecc <sync_fs+0xa0>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 8013e38:	7967      	ldrb	r7, [r4, #5]
 8013e3a:	2f01      	cmp	r7, #1
 8013e3c:	d13e      	bne.n	8013ebc <sync_fs+0x90>
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8013e3e:	7823      	ldrb	r3, [r4, #0]
			fs->fsi_flag = 0;
 8013e40:	7160      	strb	r0, [r4, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 8013e42:	2b03      	cmp	r3, #3
 8013e44:	d13a      	bne.n	8013ebc <sync_fs+0x90>
				memset(fs->win, 0, sizeof fs->win);
 8013e46:	0026      	movs	r6, r4
 8013e48:	2280      	movs	r2, #128	@ 0x80
 8013e4a:	3630      	adds	r6, #48	@ 0x30
 8013e4c:	0001      	movs	r1, r0
 8013e4e:	0152      	lsls	r2, r2, #5
 8013e50:	0030      	movs	r0, r6
 8013e52:	f006 f8fd 	bl	801a050 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8013e56:	0022      	movs	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8013e58:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 8013e5a:	3231      	adds	r2, #49	@ 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8013e5c:	7033      	strb	r3, [r6, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e5e:	7013      	strb	r3, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e60:	0023      	movs	r3, r4
 8013e62:	2261      	movs	r2, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8013e64:	2141      	movs	r1, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8013e66:	3332      	adds	r3, #50	@ 0x32
	*ptr++ = (BYTE)val; val >>= 8;
 8013e68:	2085      	movs	r0, #133	@ 0x85
	*ptr++ = (BYTE)val; val >>= 8;
 8013e6a:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8013e6c:	7059      	strb	r1, [r3, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e6e:	2372      	movs	r3, #114	@ 0x72
 8013e70:	0080      	lsls	r0, r0, #2
 8013e72:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e74:	4816      	ldr	r0, [pc, #88]	@ (8013ed0 <sync_fs+0xa4>)
 8013e76:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e78:	4b16      	ldr	r3, [pc, #88]	@ (8013ed4 <sync_fs+0xa8>)
 8013e7a:	54e1      	strb	r1, [r4, r3]
	*ptr++ = (BYTE)val;
 8013e7c:	4b16      	ldr	r3, [pc, #88]	@ (8013ed8 <sync_fs+0xac>)
 8013e7e:	54e2      	strb	r2, [r4, r3]
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8013e80:	3301      	adds	r3, #1
 8013e82:	18e0      	adds	r0, r4, r3
 8013e84:	6921      	ldr	r1, [r4, #16]
 8013e86:	f7ff fe16 	bl	8013ab6 <st_32>
				st_32(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8013e8a:	2387      	movs	r3, #135	@ 0x87
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	18e0      	adds	r0, r4, r3
 8013e90:	68e1      	ldr	r1, [r4, #12]
 8013e92:	f7ff fe10 	bl	8013ab6 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8013e96:	238b      	movs	r3, #139	@ 0x8b
	*ptr++ = (BYTE)val; val >>= 8;
 8013e98:	2255      	movs	r2, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	54e5      	strb	r5, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8013edc <sync_fs+0xb0>)
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8013ea0:	0031      	movs	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8013ea2:	54e5      	strb	r5, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8013ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee0 <sync_fs+0xb4>)
 8013ea6:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 8013ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee4 <sync_fs+0xb8>)
 8013eaa:	1892      	adds	r2, r2, r2
 8013eac:	54e2      	strb	r2, [r4, r3]
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8013eae:	6a22      	ldr	r2, [r4, #32]
 8013eb0:	003b      	movs	r3, r7
 8013eb2:	3201      	adds	r2, #1
 8013eb4:	7860      	ldrb	r0, [r4, #1]
 8013eb6:	61e2      	str	r2, [r4, #28]
 8013eb8:	f7ff fdb5 	bl	8013a26 <disk_write>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	7860      	ldrb	r0, [r4, #1]
 8013ec0:	0011      	movs	r1, r2
 8013ec2:	f7ff fdd5 	bl	8013a70 <disk_ioctl>
 8013ec6:	1e43      	subs	r3, r0, #1
 8013ec8:	4198      	sbcs	r0, r3
 8013eca:	b2c0      	uxtb	r0, r0
}
 8013ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ece:	46c0      	nop			@ (mov r8, r8)
 8013ed0:	00000215 	.word	0x00000215
 8013ed4:	00000216 	.word	0x00000216
 8013ed8:	00000217 	.word	0x00000217
 8013edc:	0000022d 	.word	0x0000022d
 8013ee0:	0000022e 	.word	0x0000022e
 8013ee4:	0000022f 	.word	0x0000022f

08013ee8 <mount_volume>:
	*rfs = 0;
 8013ee8:	2300      	movs	r3, #0
{
 8013eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eec:	b08b      	sub	sp, #44	@ 0x2c
	*rfs = 0;
 8013eee:	600b      	str	r3, [r1, #0]
{
 8013ef0:	000e      	movs	r6, r1
 8013ef2:	0015      	movs	r5, r2
	vol = get_ldnumber(path);
 8013ef4:	f7ff fdf3 	bl	8013ade <get_ldnumber>
 8013ef8:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8013efa:	200b      	movs	r0, #11
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	db15      	blt.n	8013f2c <mount_volume+0x44>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8013f00:	4a99      	ldr	r2, [pc, #612]	@ (8014168 <mount_volume+0x280>)
 8013f02:	009b      	lsls	r3, r3, #2
 8013f04:	589c      	ldr	r4, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8013f06:	3001      	adds	r0, #1
 8013f08:	2c00      	cmp	r4, #0
 8013f0a:	d00f      	beq.n	8013f2c <mount_volume+0x44>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8013f0c:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013f0e:	2601      	movs	r6, #1
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8013f10:	7823      	ldrb	r3, [r4, #0]
		stat = disk_status(fs->pdrv);
 8013f12:	7860      	ldrb	r0, [r4, #1]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013f14:	43b5      	bics	r5, r6
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00c      	beq.n	8013f34 <mount_volume+0x4c>
		stat = disk_status(fs->pdrv);
 8013f1a:	f7ff fd61 	bl	80139e0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013f1e:	4230      	tst	r0, r6
 8013f20:	d108      	bne.n	8013f34 <mount_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013f22:	2d00      	cmp	r5, #0
 8013f24:	d001      	beq.n	8013f2a <mount_volume+0x42>
 8013f26:	0740      	lsls	r0, r0, #29
 8013f28:	d402      	bmi.n	8013f30 <mount_volume+0x48>
			return FR_OK;				/* The filesystem object is already valid */
 8013f2a:	2000      	movs	r0, #0
}
 8013f2c:	b00b      	add	sp, #44	@ 0x2c
 8013f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return FR_WRITE_PROTECTED;
 8013f30:	200a      	movs	r0, #10
 8013f32:	e7fb      	b.n	8013f2c <mount_volume+0x44>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8013f34:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8013f36:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8013f38:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8013f3a:	f7ff fd53 	bl	80139e4 <disk_initialize>
 8013f3e:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013f40:	2003      	movs	r0, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013f42:	07da      	lsls	r2, r3, #31
 8013f44:	d4f2      	bmi.n	8013f2c <mount_volume+0x44>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013f46:	2d00      	cmp	r5, #0
 8013f48:	d001      	beq.n	8013f4e <mount_volume+0x66>
 8013f4a:	075b      	lsls	r3, r3, #29
 8013f4c:	d4f0      	bmi.n	8013f30 <mount_volume+0x48>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8013f4e:	2100      	movs	r1, #0
 8013f50:	0020      	movs	r0, r4
 8013f52:	f7ff fe41 	bl	8013bd8 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8013f56:	2802      	cmp	r0, #2
 8013f58:	d120      	bne.n	8013f9c <mount_volume+0xb4>
 8013f5a:	0025      	movs	r5, r4
 8013f5c:	4b83      	ldr	r3, [pc, #524]	@ (801416c <mount_volume+0x284>)
 8013f5e:	35f7      	adds	r5, #247	@ 0xf7
 8013f60:	35ff      	adds	r5, #255	@ 0xff
 8013f62:	ae06      	add	r6, sp, #24
 8013f64:	18e7      	adds	r7, r4, r3
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8013f66:	0028      	movs	r0, r5
 8013f68:	f7ff fd9a 	bl	8013aa0 <ld_32>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8013f6c:	3510      	adds	r5, #16
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8013f6e:	c601      	stmia	r6!, {r0}
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8013f70:	42bd      	cmp	r5, r7
 8013f72:	d1f8      	bne.n	8013f66 <mount_volume+0x7e>
 8013f74:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8013f76:	2603      	movs	r6, #3
 8013f78:	00ab      	lsls	r3, r5, #2
 8013f7a:	aa06      	add	r2, sp, #24
 8013f7c:	58d1      	ldr	r1, [r2, r3]
 8013f7e:	0030      	movs	r0, r6
 8013f80:	2900      	cmp	r1, #0
 8013f82:	d004      	beq.n	8013f8e <mount_volume+0xa6>
 8013f84:	0020      	movs	r0, r4
 8013f86:	f7ff fe27 	bl	8013bd8 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8013f8a:	2801      	cmp	r0, #1
 8013f8c:	d90c      	bls.n	8013fa8 <mount_volume+0xc0>
 8013f8e:	3501      	adds	r5, #1
 8013f90:	2d04      	cmp	r5, #4
 8013f92:	d1f1      	bne.n	8013f78 <mount_volume+0x90>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8013f94:	2804      	cmp	r0, #4
 8013f96:	d105      	bne.n	8013fa4 <mount_volume+0xbc>
 8013f98:	2001      	movs	r0, #1
 8013f9a:	e7c7      	b.n	8013f2c <mount_volume+0x44>
 8013f9c:	2804      	cmp	r0, #4
 8013f9e:	d0fb      	beq.n	8013f98 <mount_volume+0xb0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013fa0:	2801      	cmp	r0, #1
 8013fa2:	d901      	bls.n	8013fa8 <mount_volume+0xc0>
 8013fa4:	200d      	movs	r0, #13
 8013fa6:	e7c1      	b.n	8013f2c <mount_volume+0x44>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8013fa8:	69e3      	ldr	r3, [r4, #28]
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013faa:	2280      	movs	r2, #128	@ 0x80
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8013fac:	9302      	str	r3, [sp, #8]
		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013fae:	0023      	movs	r3, r4
 8013fb0:	333b      	adds	r3, #59	@ 0x3b
 8013fb2:	7819      	ldrb	r1, [r3, #0]
 8013fb4:	785b      	ldrb	r3, [r3, #1]
 8013fb6:	0152      	lsls	r2, r2, #5
 8013fb8:	021b      	lsls	r3, r3, #8
 8013fba:	430b      	orrs	r3, r1
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d1f1      	bne.n	8013fa4 <mount_volume+0xbc>
		fasize = ld_16(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013fc0:	0023      	movs	r3, r4
 8013fc2:	3346      	adds	r3, #70	@ 0x46
 8013fc4:	781a      	ldrb	r2, [r3, #0]
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	021b      	lsls	r3, r3, #8
 8013fcc:	4313      	orrs	r3, r2
 8013fce:	9301      	str	r3, [sp, #4]
		if (fasize == 0) fasize = ld_32(fs->win + BPB_FATSz32);
 8013fd0:	d104      	bne.n	8013fdc <mount_volume+0xf4>
 8013fd2:	0020      	movs	r0, r4
 8013fd4:	3054      	adds	r0, #84	@ 0x54
 8013fd6:	f7ff fd63 	bl	8013aa0 <ld_32>
 8013fda:	9001      	str	r0, [sp, #4]
		fs->fsize = fasize;
 8013fdc:	9b01      	ldr	r3, [sp, #4]
 8013fde:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013fe0:	0023      	movs	r3, r4
 8013fe2:	3340      	adds	r3, #64	@ 0x40
 8013fe4:	781d      	ldrb	r5, [r3, #0]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013fe6:	1e6b      	subs	r3, r5, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013fe8:	70e5      	strb	r5, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d8da      	bhi.n	8013fa4 <mount_volume+0xbc>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013fee:	0023      	movs	r3, r4
 8013ff0:	333d      	adds	r3, #61	@ 0x3d
 8013ff2:	781e      	ldrb	r6, [r3, #0]
 8013ff4:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013ff6:	2e00      	cmp	r6, #0
 8013ff8:	d0d4      	beq.n	8013fa4 <mount_volume+0xbc>
 8013ffa:	1e73      	subs	r3, r6, #1
 8013ffc:	421e      	tst	r6, r3
 8013ffe:	d1d1      	bne.n	8013fa4 <mount_volume+0xbc>
		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014000:	0022      	movs	r2, r4
 8014002:	0023      	movs	r3, r4
 8014004:	3242      	adds	r2, #66	@ 0x42
 8014006:	7817      	ldrb	r7, [r2, #0]
 8014008:	3341      	adds	r3, #65	@ 0x41
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	023f      	lsls	r7, r7, #8
 801400e:	431f      	orrs	r7, r3
 8014010:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014012:	067b      	lsls	r3, r7, #25
 8014014:	d1c6      	bne.n	8013fa4 <mount_volume+0xbc>
		tsect = ld_16(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8014016:	0023      	movs	r3, r4
 8014018:	7890      	ldrb	r0, [r2, #2]
 801401a:	3343      	adds	r3, #67	@ 0x43
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	0200      	lsls	r0, r0, #8
 8014020:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_32(fs->win + BPB_TotSec32);
 8014022:	d103      	bne.n	801402c <mount_volume+0x144>
 8014024:	0020      	movs	r0, r4
 8014026:	3050      	adds	r0, #80	@ 0x50
 8014028:	f7ff fd3a 	bl	8013aa0 <ld_32>
		nrsv = ld_16(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 801402c:	0023      	movs	r3, r4
 801402e:	333e      	adds	r3, #62	@ 0x3e
 8014030:	781a      	ldrb	r2, [r3, #0]
 8014032:	3301      	adds	r3, #1
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	021b      	lsls	r3, r3, #8
 8014038:	4313      	orrs	r3, r2
 801403a:	9303      	str	r3, [sp, #12]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801403c:	d0b2      	beq.n	8013fa4 <mount_volume+0xbc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801403e:	9b01      	ldr	r3, [sp, #4]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014040:	9a03      	ldr	r2, [sp, #12]
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014042:	436b      	muls	r3, r5
 8014044:	9305      	str	r3, [sp, #20]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014046:	09fb      	lsrs	r3, r7, #7
 8014048:	189b      	adds	r3, r3, r2
 801404a:	9a05      	ldr	r2, [sp, #20]
 801404c:	189b      	adds	r3, r3, r2
 801404e:	9304      	str	r3, [sp, #16]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014050:	4298      	cmp	r0, r3
 8014052:	d3a7      	bcc.n	8013fa4 <mount_volume+0xbc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014054:	1ac5      	subs	r5, r0, r3
 8014056:	0031      	movs	r1, r6
 8014058:	0028      	movs	r0, r5
 801405a:	f7ec f885 	bl	8000168 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801405e:	42b5      	cmp	r5, r6
 8014060:	d3a0      	bcc.n	8013fa4 <mount_volume+0xbc>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8014062:	4b43      	ldr	r3, [pc, #268]	@ (8014170 <mount_volume+0x288>)
 8014064:	4298      	cmp	r0, r3
 8014066:	d89d      	bhi.n	8013fa4 <mount_volume+0xbc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014068:	4b42      	ldr	r3, [pc, #264]	@ (8014174 <mount_volume+0x28c>)
 801406a:	2603      	movs	r6, #3
 801406c:	4298      	cmp	r0, r3
 801406e:	d804      	bhi.n	801407a <mount_volume+0x192>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014070:	4e41      	ldr	r6, [pc, #260]	@ (8014178 <mount_volume+0x290>)
 8014072:	4286      	cmp	r6, r0
 8014074:	41b6      	sbcs	r6, r6
 8014076:	4276      	negs	r6, r6
 8014078:	3601      	adds	r6, #1
		fs->volbase = bsect;							/* Volume start sector */
 801407a:	9b02      	ldr	r3, [sp, #8]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801407c:	1c85      	adds	r5, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801407e:	469c      	mov	ip, r3
 8014080:	9803      	ldr	r0, [sp, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8014082:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014084:	9b04      	ldr	r3, [sp, #16]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014086:	4460      	add	r0, ip
		fs->database = bsect + sysect;					/* Data start sector */
 8014088:	4463      	add	r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801408a:	6165      	str	r5, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801408c:	6260      	str	r0, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801408e:	62e3      	str	r3, [r4, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8014090:	2e03      	cmp	r6, #3
 8014092:	d158      	bne.n	8014146 <mount_volume+0x25e>
			if (ld_16(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014094:	0023      	movs	r3, r4
 8014096:	335a      	adds	r3, #90	@ 0x5a
 8014098:	781a      	ldrb	r2, [r3, #0]
 801409a:	785b      	ldrb	r3, [r3, #1]
 801409c:	021b      	lsls	r3, r3, #8
 801409e:	4313      	orrs	r3, r2
 80140a0:	433b      	orrs	r3, r7
 80140a2:	d000      	beq.n	80140a6 <mount_volume+0x1be>
 80140a4:	e77e      	b.n	8013fa4 <mount_volume+0xbc>
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80140a6:	0020      	movs	r0, r4
 80140a8:	305c      	adds	r0, #92	@ 0x5c
 80140aa:	f7ff fcf9 	bl	8013aa0 <ld_32>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80140ae:	00ad      	lsls	r5, r5, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80140b0:	4b32      	ldr	r3, [pc, #200]	@ (801417c <mount_volume+0x294>)
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80140b2:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80140b4:	18ed      	adds	r5, r5, r3
 80140b6:	9b01      	ldr	r3, [sp, #4]
 80140b8:	0b2d      	lsrs	r5, r5, #12
 80140ba:	429d      	cmp	r5, r3
 80140bc:	d900      	bls.n	80140c0 <mount_volume+0x1d8>
 80140be:	e771      	b.n	8013fa4 <mount_volume+0xbc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 80140c0:	2301      	movs	r3, #1
 80140c2:	425b      	negs	r3, r3
 80140c4:	6123      	str	r3, [r4, #16]
 80140c6:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 80140c8:	3381      	adds	r3, #129	@ 0x81
 80140ca:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32
 80140cc:	2e03      	cmp	r6, #3
 80140ce:	d132      	bne.n	8014136 <mount_volume+0x24e>
			&& ld_16(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 80140d0:	0023      	movs	r3, r4
 80140d2:	3360      	adds	r3, #96	@ 0x60
 80140d4:	781a      	ldrb	r2, [r3, #0]
 80140d6:	785b      	ldrb	r3, [r3, #1]
 80140d8:	021b      	lsls	r3, r3, #8
 80140da:	4313      	orrs	r3, r2
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d12a      	bne.n	8014136 <mount_volume+0x24e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80140e0:	9902      	ldr	r1, [sp, #8]
 80140e2:	0020      	movs	r0, r4
 80140e4:	3101      	adds	r1, #1
 80140e6:	f7ff fd5c 	bl	8013ba2 <move_window>
 80140ea:	2800      	cmp	r0, #0
 80140ec:	d123      	bne.n	8014136 <mount_volume+0x24e>
			fs->fsi_flag = 0;
 80140ee:	7160      	strb	r0, [r4, #5]
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 80140f0:	0020      	movs	r0, r4
 80140f2:	3030      	adds	r0, #48	@ 0x30
 80140f4:	f7ff fcd4 	bl	8013aa0 <ld_32>
 80140f8:	4b21      	ldr	r3, [pc, #132]	@ (8014180 <mount_volume+0x298>)
 80140fa:	4298      	cmp	r0, r3
 80140fc:	d11b      	bne.n	8014136 <mount_volume+0x24e>
				&& ld_32(fs->win + FSI_StrucSig) == 0x61417272
 80140fe:	2385      	movs	r3, #133	@ 0x85
 8014100:	009b      	lsls	r3, r3, #2
 8014102:	18e0      	adds	r0, r4, r3
 8014104:	f7ff fccc 	bl	8013aa0 <ld_32>
 8014108:	4b1e      	ldr	r3, [pc, #120]	@ (8014184 <mount_volume+0x29c>)
 801410a:	4298      	cmp	r0, r3
 801410c:	d113      	bne.n	8014136 <mount_volume+0x24e>
				&& ld_32(fs->win + FSI_TrailSig) == 0xAA550000)
 801410e:	238b      	movs	r3, #139	@ 0x8b
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	18e0      	adds	r0, r4, r3
 8014114:	f7ff fcc4 	bl	8013aa0 <ld_32>
 8014118:	4b1b      	ldr	r3, [pc, #108]	@ (8014188 <mount_volume+0x2a0>)
 801411a:	4298      	cmp	r0, r3
 801411c:	d10b      	bne.n	8014136 <mount_volume+0x24e>
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 801411e:	2386      	movs	r3, #134	@ 0x86
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	18e0      	adds	r0, r4, r3
 8014124:	f7ff fcbc 	bl	8013aa0 <ld_32>
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 8014128:	2387      	movs	r3, #135	@ 0x87
 801412a:	009b      	lsls	r3, r3, #2
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 801412c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 801412e:	18e0      	adds	r0, r4, r3
 8014130:	f7ff fcb6 	bl	8013aa0 <ld_32>
 8014134:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 8014136:	4a15      	ldr	r2, [pc, #84]	@ (801418c <mount_volume+0x2a4>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8014138:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 801413a:	8813      	ldrh	r3, [r2, #0]
 801413c:	3301      	adds	r3, #1
 801413e:	b29b      	uxth	r3, r3
 8014140:	8013      	strh	r3, [r2, #0]
 8014142:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8014144:	e6f1      	b.n	8013f2a <mount_volume+0x42>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8014146:	2f00      	cmp	r7, #0
 8014148:	d100      	bne.n	801414c <mount_volume+0x264>
 801414a:	e72b      	b.n	8013fa4 <mount_volume+0xbc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801414c:	9b05      	ldr	r3, [sp, #20]
 801414e:	18c0      	adds	r0, r0, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014150:	2e02      	cmp	r6, #2
 8014152:	d101      	bne.n	8014158 <mount_volume+0x270>
 8014154:	006d      	lsls	r5, r5, #1
 8014156:	e7ab      	b.n	80140b0 <mount_volume+0x1c8>
 8014158:	2303      	movs	r3, #3
 801415a:	2201      	movs	r2, #1
 801415c:	436b      	muls	r3, r5
 801415e:	4015      	ands	r5, r2
 8014160:	085b      	lsrs	r3, r3, #1
 8014162:	195d      	adds	r5, r3, r5
 8014164:	e7a4      	b.n	80140b0 <mount_volume+0x1c8>
 8014166:	46c0      	nop			@ (mov r8, r8)
 8014168:	20003100 	.word	0x20003100
 801416c:	00000236 	.word	0x00000236
 8014170:	0ffffff5 	.word	0x0ffffff5
 8014174:	0000fff5 	.word	0x0000fff5
 8014178:	00000ff5 	.word	0x00000ff5
 801417c:	00000fff 	.word	0x00000fff
 8014180:	41615252 	.word	0x41615252
 8014184:	61417272 	.word	0x61417272
 8014188:	aa550000 	.word	0xaa550000
 801418c:	200030fc 	.word	0x200030fc

08014190 <get_fileinfo.part.0.constprop.0.isra.0>:
static void get_fileinfo (
 8014190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8014192:	2300      	movs	r3, #0
static void get_fileinfo (
 8014194:	000c      	movs	r4, r1
	si = di = 0;
 8014196:	001a      	movs	r2, r3
static void get_fileinfo (
 8014198:	0005      	movs	r5, r0
		c = (TCHAR)dp->dir[si++];
 801419a:	3801      	subs	r0, #1
 801419c:	3201      	adds	r2, #1
 801419e:	5c81      	ldrb	r1, [r0, r2]
		if (c == ' ') continue;		/* Skip padding spaces */
 80141a0:	2920      	cmp	r1, #32
 80141a2:	d00b      	beq.n	80141bc <get_fileinfo.part.0.constprop.0.isra.0+0x2c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 80141a4:	2905      	cmp	r1, #5
 80141a6:	d100      	bne.n	80141aa <get_fileinfo.part.0.constprop.0.isra.0+0x1a>
 80141a8:	31e0      	adds	r1, #224	@ 0xe0
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 80141aa:	2a09      	cmp	r2, #9
 80141ac:	d103      	bne.n	80141b6 <get_fileinfo.part.0.constprop.0.isra.0+0x26>
 80141ae:	272e      	movs	r7, #46	@ 0x2e
 80141b0:	18e6      	adds	r6, r4, r3
 80141b2:	7277      	strb	r7, [r6, #9]
 80141b4:	3301      	adds	r3, #1
		fno->fname[di++] = c;
 80141b6:	18e6      	adds	r6, r4, r3
 80141b8:	7271      	strb	r1, [r6, #9]
 80141ba:	3301      	adds	r3, #1
	while (si < 11) {		/* Copy name body and extension */
 80141bc:	2a0b      	cmp	r2, #11
 80141be:	d1ed      	bne.n	801419c <get_fileinfo.part.0.constprop.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 80141c0:	2200      	movs	r2, #0
	fno->fsize = ld_32(dp->dir + DIR_FileSize);		/* Size */
 80141c2:	0028      	movs	r0, r5
	fno->fname[di] = 0;		/* Terminate the SFN */
 80141c4:	18e3      	adds	r3, r4, r3
 80141c6:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;		/* Attribute */
 80141c8:	7aeb      	ldrb	r3, [r5, #11]
 80141ca:	323f      	adds	r2, #63	@ 0x3f
 80141cc:	4013      	ands	r3, r2
 80141ce:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_32(dp->dir + DIR_FileSize);		/* Size */
 80141d0:	301c      	adds	r0, #28
 80141d2:	f7ff fc65 	bl	8013aa0 <ld_32>
 80141d6:	6020      	str	r0, [r4, #0]
	fno->ftime = ld_16(dp->dir + DIR_ModTime + 0);	/* Last modified time */
 80141d8:	7deb      	ldrb	r3, [r5, #23]
 80141da:	7daa      	ldrb	r2, [r5, #22]
 80141dc:	021b      	lsls	r3, r3, #8
 80141de:	4313      	orrs	r3, r2
 80141e0:	80e3      	strh	r3, [r4, #6]
	fno->fdate = ld_16(dp->dir + DIR_ModTime + 2);	/* Last Modified date */
 80141e2:	7e6b      	ldrb	r3, [r5, #25]
 80141e4:	7e2a      	ldrb	r2, [r5, #24]
 80141e6:	021b      	lsls	r3, r3, #8
 80141e8:	4313      	orrs	r3, r2
 80141ea:	80a3      	strh	r3, [r4, #4]
}
 80141ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080141ee <ld_clust.isra.0>:
	cl = ld_16(dir + DIR_FstClusLO);
 80141ee:	7ecb      	ldrb	r3, [r1, #27]
static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
 80141f0:	0002      	movs	r2, r0
	cl = ld_16(dir + DIR_FstClusLO);
 80141f2:	7e88      	ldrb	r0, [r1, #26]
 80141f4:	021b      	lsls	r3, r3, #8
 80141f6:	4318      	orrs	r0, r3
	if (fs->fs_type == FS_FAT32) {
 80141f8:	2a03      	cmp	r2, #3
 80141fa:	d105      	bne.n	8014208 <ld_clust.isra.0+0x1a>
		cl |= (DWORD)ld_16(dir + DIR_FstClusHI) << 16;
 80141fc:	7d4b      	ldrb	r3, [r1, #21]
 80141fe:	7d0a      	ldrb	r2, [r1, #20]
 8014200:	021b      	lsls	r3, r3, #8
 8014202:	4313      	orrs	r3, r2
 8014204:	041b      	lsls	r3, r3, #16
 8014206:	4318      	orrs	r0, r3
}
 8014208:	4770      	bx	lr
	...

0801420c <get_fat.isra.0>:
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 801420c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 801420e:	2601      	movs	r6, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014210:	0005      	movs	r5, r0
 8014212:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014214:	42b1      	cmp	r1, r6
 8014216:	d914      	bls.n	8014242 <get_fat.isra.0+0x36>
 8014218:	6943      	ldr	r3, [r0, #20]
 801421a:	4299      	cmp	r1, r3
 801421c:	d211      	bcs.n	8014242 <get_fat.isra.0+0x36>
		switch (fs->fs_type) {
 801421e:	7803      	ldrb	r3, [r0, #0]
 8014220:	2b02      	cmp	r3, #2
 8014222:	d02e      	beq.n	8014282 <get_fat.isra.0+0x76>
 8014224:	2b03      	cmp	r3, #3
 8014226:	d03f      	beq.n	80142a8 <get_fat.isra.0+0x9c>
 8014228:	42b3      	cmp	r3, r6
 801422a:	d10a      	bne.n	8014242 <get_fat.isra.0+0x36>
			bc = (UINT)clst; bc += bc / 2;
 801422c:	084f      	lsrs	r7, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801422e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 8014230:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014232:	0b39      	lsrs	r1, r7, #12
 8014234:	18c9      	adds	r1, r1, r3
 8014236:	f7ff fcb4 	bl	8013ba2 <move_window>
 801423a:	2800      	cmp	r0, #0
 801423c:	d003      	beq.n	8014246 <get_fat.isra.0+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801423e:	2601      	movs	r6, #1
 8014240:	4276      	negs	r6, r6
}
 8014242:	0030      	movs	r0, r6
 8014244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014246:	1c7b      	adds	r3, r7, #1
 8014248:	053f      	lsls	r7, r7, #20
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801424a:	0b19      	lsrs	r1, r3, #12
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 801424c:	9301      	str	r3, [sp, #4]
 801424e:	0d3f      	lsrs	r7, r7, #20
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014250:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014252:	19ef      	adds	r7, r5, r7
 8014254:	3730      	adds	r7, #48	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014256:	0028      	movs	r0, r5
 8014258:	18c9      	adds	r1, r1, r3
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 801425a:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801425c:	f7ff fca1 	bl	8013ba2 <move_window>
 8014260:	2800      	cmp	r0, #0
 8014262:	d1ec      	bne.n	801423e <get_fat.isra.0+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8014264:	9b01      	ldr	r3, [sp, #4]
 8014266:	051b      	lsls	r3, r3, #20
 8014268:	0d1b      	lsrs	r3, r3, #20
 801426a:	18eb      	adds	r3, r5, r3
 801426c:	3330      	adds	r3, #48	@ 0x30
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	021b      	lsls	r3, r3, #8
 8014272:	433b      	orrs	r3, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8014274:	4234      	tst	r4, r6
 8014276:	d001      	beq.n	801427c <get_fat.isra.0+0x70>
 8014278:	091e      	lsrs	r6, r3, #4
 801427a:	e7e2      	b.n	8014242 <get_fat.isra.0+0x36>
 801427c:	051b      	lsls	r3, r3, #20
 801427e:	0d1e      	lsrs	r6, r3, #20
 8014280:	e7df      	b.n	8014242 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014282:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014284:	0ac9      	lsrs	r1, r1, #11
 8014286:	18c9      	adds	r1, r1, r3
 8014288:	f7ff fc8b 	bl	8013ba2 <move_window>
 801428c:	2800      	cmp	r0, #0
 801428e:	d1d6      	bne.n	801423e <get_fat.isra.0+0x32>
			val = ld_16(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8014290:	4b0e      	ldr	r3, [pc, #56]	@ (80142cc <get_fat.isra.0+0xc0>)
 8014292:	0064      	lsls	r4, r4, #1
 8014294:	401c      	ands	r4, r3
 8014296:	192c      	adds	r4, r5, r4
 8014298:	0023      	movs	r3, r4
 801429a:	3431      	adds	r4, #49	@ 0x31
 801429c:	7826      	ldrb	r6, [r4, #0]
 801429e:	3330      	adds	r3, #48	@ 0x30
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	0236      	lsls	r6, r6, #8
 80142a4:	431e      	orrs	r6, r3
			break;
 80142a6:	e7cc      	b.n	8014242 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80142a8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80142aa:	0a89      	lsrs	r1, r1, #10
 80142ac:	18c9      	adds	r1, r1, r3
 80142ae:	f7ff fc78 	bl	8013ba2 <move_window>
 80142b2:	2800      	cmp	r0, #0
 80142b4:	d1c3      	bne.n	801423e <get_fat.isra.0+0x32>
			val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80142b6:	4b06      	ldr	r3, [pc, #24]	@ (80142d0 <get_fat.isra.0+0xc4>)
 80142b8:	00a4      	lsls	r4, r4, #2
 80142ba:	401c      	ands	r4, r3
 80142bc:	3530      	adds	r5, #48	@ 0x30
 80142be:	1928      	adds	r0, r5, r4
 80142c0:	f7ff fbee 	bl	8013aa0 <ld_32>
 80142c4:	0106      	lsls	r6, r0, #4
 80142c6:	0936      	lsrs	r6, r6, #4
			break;
 80142c8:	e7bb      	b.n	8014242 <get_fat.isra.0+0x36>
 80142ca:	46c0      	nop			@ (mov r8, r8)
 80142cc:	00000ffe 	.word	0x00000ffe
 80142d0:	00000ffc 	.word	0x00000ffc

080142d4 <dir_sdi.constprop.0>:
	dp->dptr = ofs;				/* Set current offset */
 80142d4:	2300      	movs	r3, #0
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80142d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80142d8:	6884      	ldr	r4, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80142da:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 80142dc:	6806      	ldr	r6, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80142de:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80142e0:	429c      	cmp	r4, r3
 80142e2:	d118      	bne.n	8014316 <dir_sdi.constprop.0+0x42>
 80142e4:	7833      	ldrb	r3, [r6, #0]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d902      	bls.n	80142f0 <dir_sdi.constprop.0+0x1c>
		clst = (DWORD)fs->dirbase;
 80142ea:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d111      	bne.n	8014314 <dir_sdi.constprop.0+0x40>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80142f0:	8933      	ldrh	r3, [r6, #8]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d101      	bne.n	80142fa <dir_sdi.constprop.0+0x26>
		return FR_INT_ERR;
 80142f6:	2002      	movs	r0, #2
}
 80142f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
 80142fa:	2700      	movs	r7, #0
 80142fc:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80142fe:	61a8      	str	r0, [r5, #24]
	dp->clust = clst;					/* Current cluster# */
 8014300:	616f      	str	r7, [r5, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8014302:	2800      	cmp	r0, #0
 8014304:	d0f7      	beq.n	80142f6 <dir_sdi.constprop.0+0x22>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014306:	0b24      	lsrs	r4, r4, #12
 8014308:	1820      	adds	r0, r4, r0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801430a:	3630      	adds	r6, #48	@ 0x30
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801430c:	61a8      	str	r0, [r5, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801430e:	61ee      	str	r6, [r5, #28]
	return FR_OK;
 8014310:	2000      	movs	r0, #0
 8014312:	e7f1      	b.n	80142f8 <dir_sdi.constprop.0+0x24>
 8014314:	001c      	movs	r4, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8014316:	0027      	movs	r7, r4
 8014318:	2400      	movs	r4, #0
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801431a:	8973      	ldrh	r3, [r6, #10]
 801431c:	031b      	lsls	r3, r3, #12
 801431e:	9301      	str	r3, [sp, #4]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014320:	9b01      	ldr	r3, [sp, #4]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014322:	0039      	movs	r1, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 8014324:	42a3      	cmp	r3, r4
 8014326:	d903      	bls.n	8014330 <dir_sdi.constprop.0+0x5c>
		dp->sect = clst2sect(fs, clst);
 8014328:	0030      	movs	r0, r6
 801432a:	f7ff fbcc 	bl	8013ac6 <clst2sect>
 801432e:	e7e6      	b.n	80142fe <dir_sdi.constprop.0+0x2a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014330:	6828      	ldr	r0, [r5, #0]
 8014332:	f7ff ff6b 	bl	801420c <get_fat.isra.0>
 8014336:	0007      	movs	r7, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014338:	1c43      	adds	r3, r0, #1
 801433a:	d007      	beq.n	801434c <dir_sdi.constprop.0+0x78>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801433c:	2801      	cmp	r0, #1
 801433e:	d9da      	bls.n	80142f6 <dir_sdi.constprop.0+0x22>
 8014340:	6973      	ldr	r3, [r6, #20]
 8014342:	4298      	cmp	r0, r3
 8014344:	d2d7      	bcs.n	80142f6 <dir_sdi.constprop.0+0x22>
			ofs -= csz;
 8014346:	9b01      	ldr	r3, [sp, #4]
 8014348:	1ae4      	subs	r4, r4, r3
 801434a:	e7e9      	b.n	8014320 <dir_sdi.constprop.0+0x4c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801434c:	2001      	movs	r0, #1
 801434e:	e7d3      	b.n	80142f8 <dir_sdi.constprop.0+0x24>

08014350 <remove_chain>:
{
 8014350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014352:	000c      	movs	r4, r1
 8014354:	0006      	movs	r6, r0
 8014356:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
 8014358:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801435a:	2c01      	cmp	r4, #1
 801435c:	d92d      	bls.n	80143ba <remove_chain+0x6a>
 801435e:	696b      	ldr	r3, [r5, #20]
 8014360:	42a3      	cmp	r3, r4
 8014362:	d92a      	bls.n	80143ba <remove_chain+0x6a>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014364:	2a00      	cmp	r2, #0
 8014366:	d006      	beq.n	8014376 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014368:	2201      	movs	r2, #1
 801436a:	0028      	movs	r0, r5
 801436c:	4252      	negs	r2, r2
 801436e:	f7ff fcab 	bl	8013cc8 <put_fat>
		if (res != FR_OK) return res;
 8014372:	2800      	cmp	r0, #0
 8014374:	d107      	bne.n	8014386 <remove_chain+0x36>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014376:	0021      	movs	r1, r4
 8014378:	6830      	ldr	r0, [r6, #0]
 801437a:	f7ff ff47 	bl	801420c <get_fat.isra.0>
 801437e:	0027      	movs	r7, r4
 8014380:	1e04      	subs	r4, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
 8014382:	d101      	bne.n	8014388 <remove_chain+0x38>
	return FR_OK;
 8014384:	2000      	movs	r0, #0
}
 8014386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014388:	2801      	cmp	r0, #1
 801438a:	d016      	beq.n	80143ba <remove_chain+0x6a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801438c:	1c43      	adds	r3, r0, #1
 801438e:	d016      	beq.n	80143be <remove_chain+0x6e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014390:	2200      	movs	r2, #0
 8014392:	0039      	movs	r1, r7
 8014394:	0028      	movs	r0, r5
 8014396:	f7ff fc97 	bl	8013cc8 <put_fat>
			if (res != FR_OK) return res;
 801439a:	2800      	cmp	r0, #0
 801439c:	d1f3      	bne.n	8014386 <remove_chain+0x36>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 801439e:	696a      	ldr	r2, [r5, #20]
 80143a0:	692b      	ldr	r3, [r5, #16]
 80143a2:	1e91      	subs	r1, r2, #2
 80143a4:	428b      	cmp	r3, r1
 80143a6:	d205      	bcs.n	80143b4 <remove_chain+0x64>
			fs->fsi_flag |= 1;
 80143a8:	2101      	movs	r1, #1
			fs->free_clst++;
 80143aa:	3301      	adds	r3, #1
 80143ac:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80143ae:	796b      	ldrb	r3, [r5, #5]
 80143b0:	430b      	orrs	r3, r1
 80143b2:	716b      	strb	r3, [r5, #5]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 80143b4:	42a2      	cmp	r2, r4
 80143b6:	d8de      	bhi.n	8014376 <remove_chain+0x26>
 80143b8:	e7e4      	b.n	8014384 <remove_chain+0x34>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80143ba:	2002      	movs	r0, #2
 80143bc:	e7e3      	b.n	8014386 <remove_chain+0x36>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80143be:	2001      	movs	r0, #1
 80143c0:	e7e1      	b.n	8014386 <remove_chain+0x36>

080143c2 <create_chain>:
{
 80143c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80143c4:	6805      	ldr	r5, [r0, #0]
{
 80143c6:	9001      	str	r0, [sp, #4]
 80143c8:	9100      	str	r1, [sp, #0]
	if (clst == 0) {	/* Create a new chain */
 80143ca:	2900      	cmp	r1, #0
 80143cc:	d10a      	bne.n	80143e4 <create_chain+0x22>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80143ce:	68ef      	ldr	r7, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80143d0:	2f00      	cmp	r7, #0
 80143d2:	d018      	beq.n	8014406 <create_chain+0x44>
 80143d4:	696b      	ldr	r3, [r5, #20]
 80143d6:	42bb      	cmp	r3, r7
 80143d8:	d915      	bls.n	8014406 <create_chain+0x44>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80143da:	692b      	ldr	r3, [r5, #16]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d114      	bne.n	801440a <create_chain+0x48>
 80143e0:	2400      	movs	r4, #0
 80143e2:	e007      	b.n	80143f4 <create_chain+0x32>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80143e4:	0028      	movs	r0, r5
 80143e6:	9900      	ldr	r1, [sp, #0]
 80143e8:	f7ff ff10 	bl	801420c <get_fat.isra.0>
 80143ec:	0004      	movs	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 80143ee:	2801      	cmp	r0, #1
 80143f0:	d802      	bhi.n	80143f8 <create_chain+0x36>
 80143f2:	2401      	movs	r4, #1
}
 80143f4:	0020      	movs	r0, r4
 80143f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d05b      	beq.n	80144b4 <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80143fc:	696b      	ldr	r3, [r5, #20]
		scl = clst;							/* Cluster to start to find */
 80143fe:	9f00      	ldr	r7, [sp, #0]
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014400:	4283      	cmp	r3, r0
 8014402:	d9ea      	bls.n	80143da <create_chain+0x18>
 8014404:	e7f6      	b.n	80143f4 <create_chain+0x32>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014406:	2701      	movs	r7, #1
 8014408:	e7e7      	b.n	80143da <create_chain+0x18>
		if (scl == clst) {						/* Stretching an existing chain? */
 801440a:	9a00      	ldr	r2, [sp, #0]
			if (ncl >= fs->n_fatent) ncl = 2;
 801440c:	696b      	ldr	r3, [r5, #20]
		if (scl == clst) {						/* Stretching an existing chain? */
 801440e:	4297      	cmp	r7, r2
 8014410:	d114      	bne.n	801443c <create_chain+0x7a>
			ncl = scl + 1;						/* Test if next cluster is free */
 8014412:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8014414:	42a3      	cmp	r3, r4
 8014416:	d800      	bhi.n	801441a <create_chain+0x58>
 8014418:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 801441a:	9b01      	ldr	r3, [sp, #4]
 801441c:	0021      	movs	r1, r4
 801441e:	6818      	ldr	r0, [r3, #0]
 8014420:	f7ff fef4 	bl	801420c <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8014424:	2801      	cmp	r0, #1
 8014426:	d0e4      	beq.n	80143f2 <create_chain+0x30>
 8014428:	1c43      	adds	r3, r0, #1
 801442a:	d043      	beq.n	80144b4 <create_chain+0xf2>
			if (cs != 0) {						/* Not free? */
 801442c:	2800      	cmp	r0, #0
 801442e:	d01c      	beq.n	801446a <create_chain+0xa8>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8014430:	68ee      	ldr	r6, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8014432:	2e01      	cmp	r6, #1
 8014434:	d902      	bls.n	801443c <create_chain+0x7a>
 8014436:	696b      	ldr	r3, [r5, #20]
 8014438:	429e      	cmp	r6, r3
 801443a:	d300      	bcc.n	801443e <create_chain+0x7c>
			if (ncl >= fs->n_fatent) ncl = 2;
 801443c:	003e      	movs	r6, r7
			ncl = scl;	/* Start cluster */
 801443e:	0034      	movs	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014440:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 8014442:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014444:	42a3      	cmp	r3, r4
 8014446:	d802      	bhi.n	801444e <create_chain+0x8c>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8014448:	2e01      	cmp	r6, #1
 801444a:	d0c9      	beq.n	80143e0 <create_chain+0x1e>
					ncl = 2;
 801444c:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 801444e:	9b01      	ldr	r3, [sp, #4]
 8014450:	0021      	movs	r1, r4
 8014452:	6818      	ldr	r0, [r3, #0]
 8014454:	f7ff feda 	bl	801420c <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 8014458:	2800      	cmp	r0, #0
 801445a:	d008      	beq.n	801446e <create_chain+0xac>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 801445c:	2801      	cmp	r0, #1
 801445e:	d0c8      	beq.n	80143f2 <create_chain+0x30>
 8014460:	3001      	adds	r0, #1
 8014462:	d027      	beq.n	80144b4 <create_chain+0xf2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8014464:	42b4      	cmp	r4, r6
 8014466:	d1eb      	bne.n	8014440 <create_chain+0x7e>
 8014468:	e7ba      	b.n	80143e0 <create_chain+0x1e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 801446a:	2c00      	cmp	r4, #0
 801446c:	d0e6      	beq.n	801443c <create_chain+0x7a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 801446e:	2201      	movs	r2, #1
 8014470:	0021      	movs	r1, r4
 8014472:	0028      	movs	r0, r5
 8014474:	4252      	negs	r2, r2
 8014476:	f7ff fc27 	bl	8013cc8 <put_fat>
		if (res == FR_OK && clst != 0) {
 801447a:	2800      	cmp	r0, #0
 801447c:	d118      	bne.n	80144b0 <create_chain+0xee>
 801447e:	9b00      	ldr	r3, [sp, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d10e      	bne.n	80144a2 <create_chain+0xe0>
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8014484:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8014486:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8014488:	2b00      	cmp	r3, #0
 801448a:	d0b3      	beq.n	80143f4 <create_chain+0x32>
 801448c:	696a      	ldr	r2, [r5, #20]
 801448e:	3a02      	subs	r2, #2
 8014490:	4293      	cmp	r3, r2
 8014492:	d8af      	bhi.n	80143f4 <create_chain+0x32>
			fs->free_clst--;
 8014494:	3b01      	subs	r3, #1
 8014496:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8014498:	2301      	movs	r3, #1
 801449a:	796a      	ldrb	r2, [r5, #5]
 801449c:	4313      	orrs	r3, r2
 801449e:	716b      	strb	r3, [r5, #5]
 80144a0:	e7a8      	b.n	80143f4 <create_chain+0x32>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80144a2:	0022      	movs	r2, r4
 80144a4:	0028      	movs	r0, r5
 80144a6:	9900      	ldr	r1, [sp, #0]
 80144a8:	f7ff fc0e 	bl	8013cc8 <put_fat>
	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d0e9      	beq.n	8014484 <create_chain+0xc2>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80144b0:	2801      	cmp	r0, #1
 80144b2:	d19e      	bne.n	80143f2 <create_chain+0x30>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80144b4:	2401      	movs	r4, #1
 80144b6:	4264      	negs	r4, r4
 80144b8:	e79c      	b.n	80143f4 <create_chain+0x32>

080144ba <dir_next>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80144ba:	2380      	movs	r3, #128	@ 0x80
{
 80144bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80144be:	6907      	ldr	r7, [r0, #16]
{
 80144c0:	0004      	movs	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80144c2:	3720      	adds	r7, #32
	FATFS *fs = dp->obj.fs;
 80144c4:	6806      	ldr	r6, [r0, #0]
{
 80144c6:	9101      	str	r1, [sp, #4]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80144c8:	039b      	lsls	r3, r3, #14
 80144ca:	429f      	cmp	r7, r3
 80144cc:	d301      	bcc.n	80144d2 <dir_next+0x18>
 80144ce:	2300      	movs	r3, #0
 80144d0:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80144d2:	69a3      	ldr	r3, [r4, #24]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00f      	beq.n	80144f8 <dir_next+0x3e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80144d8:	053a      	lsls	r2, r7, #20
 80144da:	0d11      	lsrs	r1, r2, #20
 80144dc:	9100      	str	r1, [sp, #0]
 80144de:	2a00      	cmp	r2, #0
 80144e0:	d13b      	bne.n	801455a <dir_next+0xa0>
		if (dp->clust == 0) {	/* Static table */
 80144e2:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
 80144e4:	3301      	adds	r3, #1
 80144e6:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
 80144e8:	2900      	cmp	r1, #0
 80144ea:	d107      	bne.n	80144fc <dir_next+0x42>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80144ec:	8932      	ldrh	r2, [r6, #8]
 80144ee:	097b      	lsrs	r3, r7, #5
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d332      	bcc.n	801455a <dir_next+0xa0>
				dp->sect = 0; return FR_NO_FILE;
 80144f4:	2300      	movs	r3, #0
 80144f6:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80144f8:	2004      	movs	r0, #4
}
 80144fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80144fc:	8973      	ldrh	r3, [r6, #10]
 80144fe:	0b3a      	lsrs	r2, r7, #12
 8014500:	3b01      	subs	r3, #1
 8014502:	421a      	tst	r2, r3
 8014504:	d129      	bne.n	801455a <dir_next+0xa0>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8014506:	0030      	movs	r0, r6
 8014508:	f7ff fe80 	bl	801420c <get_fat.isra.0>
 801450c:	0005      	movs	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 801450e:	2801      	cmp	r0, #1
 8014510:	d801      	bhi.n	8014516 <dir_next+0x5c>
 8014512:	2002      	movs	r0, #2
 8014514:	e7f1      	b.n	80144fa <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014516:	1c43      	adds	r3, r0, #1
 8014518:	d101      	bne.n	801451e <dir_next+0x64>
 801451a:	2001      	movs	r0, #1
 801451c:	e7ed      	b.n	80144fa <dir_next+0x40>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 801451e:	6973      	ldr	r3, [r6, #20]
 8014520:	4283      	cmp	r3, r0
 8014522:	d814      	bhi.n	801454e <dir_next+0x94>
					if (!stretch) {								/* If no stretch, report EOT */
 8014524:	9b01      	ldr	r3, [sp, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d0e4      	beq.n	80144f4 <dir_next+0x3a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801452a:	0020      	movs	r0, r4
 801452c:	6961      	ldr	r1, [r4, #20]
 801452e:	f7ff ff48 	bl	80143c2 <create_chain>
 8014532:	0005      	movs	r5, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014534:	2007      	movs	r0, #7
 8014536:	2d00      	cmp	r5, #0
 8014538:	d0df      	beq.n	80144fa <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801453a:	2d01      	cmp	r5, #1
 801453c:	d0e9      	beq.n	8014512 <dir_next+0x58>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801453e:	1c6b      	adds	r3, r5, #1
 8014540:	d0eb      	beq.n	801451a <dir_next+0x60>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8014542:	0029      	movs	r1, r5
 8014544:	0030      	movs	r0, r6
 8014546:	f7ff fc47 	bl	8013dd8 <dir_clear>
 801454a:	2800      	cmp	r0, #0
 801454c:	d1e5      	bne.n	801451a <dir_next+0x60>
				dp->sect = clst2sect(fs, clst);
 801454e:	0029      	movs	r1, r5
 8014550:	0030      	movs	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
 8014552:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8014554:	f7ff fab7 	bl	8013ac6 <clst2sect>
 8014558:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801455a:	9b00      	ldr	r3, [sp, #0]
 801455c:	3630      	adds	r6, #48	@ 0x30
 801455e:	18f6      	adds	r6, r6, r3
	return FR_OK;
 8014560:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8014562:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014564:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8014566:	e7c8      	b.n	80144fa <dir_next+0x40>

08014568 <follow_path>:
{
 8014568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456a:	0005      	movs	r5, r0
 801456c:	000f      	movs	r7, r1
	FATFS *fs = dp->obj.fs;
 801456e:	6803      	ldr	r3, [r0, #0]
{
 8014570:	b087      	sub	sp, #28
	FATFS *fs = dp->obj.fs;
 8014572:	9304      	str	r3, [sp, #16]
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 8014574:	783b      	ldrb	r3, [r7, #0]
 8014576:	2b2f      	cmp	r3, #47	@ 0x2f
 8014578:	d011      	beq.n	801459e <follow_path+0x36>
 801457a:	2b5c      	cmp	r3, #92	@ 0x5c
 801457c:	d00f      	beq.n	801459e <follow_path+0x36>
		dp->obj.sclust = 0;					/* Start at the root directory */
 801457e:	2300      	movs	r3, #0
 8014580:	60ab      	str	r3, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014582:	783b      	ldrb	r3, [r7, #0]
 8014584:	2b1f      	cmp	r3, #31
 8014586:	d840      	bhi.n	801460a <follow_path+0xa2>
		dp->fn[NSFLAG] = NS_NONAME;
 8014588:	002b      	movs	r3, r5
 801458a:	2280      	movs	r2, #128	@ 0x80
 801458c:	332b      	adds	r3, #43	@ 0x2b
		res = dir_sdi(dp, 0);
 801458e:	0028      	movs	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8014590:	701a      	strb	r2, [r3, #0]
		res = dir_sdi(dp, 0);
 8014592:	f7ff fe9f 	bl	80142d4 <dir_sdi.constprop.0>
 8014596:	0004      	movs	r4, r0
}
 8014598:	0020      	movs	r0, r4
 801459a:	b007      	add	sp, #28
 801459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 801459e:	3701      	adds	r7, #1
 80145a0:	e7e8      	b.n	8014574 <follow_path+0xc>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separators */
 80145a2:	3301      	adds	r3, #1
 80145a4:	e04a      	b.n	801463c <follow_path+0xd4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80145a6:	9b03      	ldr	r3, [sp, #12]
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80145a8:	2c2e      	cmp	r4, #46	@ 0x2e
 80145aa:	d100      	bne.n	80145ae <follow_path+0x46>
 80145ac:	e093      	b.n	80146d6 <follow_path+0x16e>
 80145ae:	42b3      	cmp	r3, r6
 80145b0:	d800      	bhi.n	80145b4 <follow_path+0x4c>
 80145b2:	e08e      	b.n	80146d2 <follow_path+0x16a>
		if (c >= 0x80) {				/* Is SBC extended character? */
 80145b4:	b263      	sxtb	r3, r4
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	da03      	bge.n	80145c2 <follow_path+0x5a>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 80145ba:	237f      	movs	r3, #127	@ 0x7f
 80145bc:	4a49      	ldr	r2, [pc, #292]	@ (80146e4 <follow_path+0x17c>)
 80145be:	4023      	ands	r3, r4
 80145c0:	5cd4      	ldrb	r4, [r2, r3]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80145c2:	0021      	movs	r1, r4
 80145c4:	4848      	ldr	r0, [pc, #288]	@ (80146e8 <follow_path+0x180>)
 80145c6:	f005 fd58 	bl	801a07a <strchr>
 80145ca:	2800      	cmp	r0, #0
 80145cc:	d000      	beq.n	80145d0 <follow_path+0x68>
 80145ce:	e080      	b.n	80146d2 <follow_path+0x16a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80145d0:	0023      	movs	r3, r4
 80145d2:	3b61      	subs	r3, #97	@ 0x61
 80145d4:	2b19      	cmp	r3, #25
 80145d6:	d801      	bhi.n	80145dc <follow_path+0x74>
 80145d8:	3c20      	subs	r4, #32
 80145da:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80145dc:	9b02      	ldr	r3, [sp, #8]
 80145de:	559c      	strb	r4, [r3, r6]
 80145e0:	3601      	adds	r6, #1
 80145e2:	9b01      	ldr	r3, [sp, #4]
 80145e4:	3301      	adds	r3, #1
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	e01e      	b.n	8014628 <follow_path+0xc0>
			if (ns & NS_LAST) break;		/* If last segment matched, the function completed */
 80145ea:	2e00      	cmp	r6, #0
 80145ec:	d1d4      	bne.n	8014598 <follow_path+0x30>
			if (!(dp->obj.attr & AM_DIR)) {
 80145ee:	9b01      	ldr	r3, [sp, #4]
 80145f0:	06db      	lsls	r3, r3, #27
 80145f2:	d56c      	bpl.n	80146ce <follow_path+0x166>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80145f4:	692b      	ldr	r3, [r5, #16]
 80145f6:	9904      	ldr	r1, [sp, #16]
 80145f8:	051b      	lsls	r3, r3, #20
 80145fa:	0d1b      	lsrs	r3, r3, #20
 80145fc:	3130      	adds	r1, #48	@ 0x30
 80145fe:	18c9      	adds	r1, r1, r3
 8014600:	9b04      	ldr	r3, [sp, #16]
 8014602:	7818      	ldrb	r0, [r3, #0]
 8014604:	f7ff fdf3 	bl	80141ee <ld_clust.isra.0>
 8014608:	60a8      	str	r0, [r5, #8]
	p = *path; sfn = dp->fn;
 801460a:	002b      	movs	r3, r5
 801460c:	3320      	adds	r3, #32
	memset(sfn, ' ', 11);
 801460e:	0018      	movs	r0, r3
 8014610:	220b      	movs	r2, #11
 8014612:	2120      	movs	r1, #32
	p = *path; sfn = dp->fn;
 8014614:	9302      	str	r3, [sp, #8]
	memset(sfn, ' ', 11);
 8014616:	f005 fd1b 	bl	801a050 <memset>
	si = i = 0; ni = 8;
 801461a:	2308      	movs	r3, #8
 801461c:	2600      	movs	r6, #0
 801461e:	9303      	str	r3, [sp, #12]
		c = (BYTE)p[si++];				/* Get a byte */
 8014620:	3b07      	subs	r3, #7
 8014622:	1bdb      	subs	r3, r3, r7
	memset(sfn, ' ', 11);
 8014624:	9701      	str	r7, [sp, #4]
		c = (BYTE)p[si++];				/* Get a byte */
 8014626:	9305      	str	r3, [sp, #20]
 8014628:	9a01      	ldr	r2, [sp, #4]
 801462a:	9b05      	ldr	r3, [sp, #20]
 801462c:	7814      	ldrb	r4, [r2, #0]
 801462e:	189b      	adds	r3, r3, r2
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014630:	2c20      	cmp	r4, #32
 8014632:	d908      	bls.n	8014646 <follow_path+0xde>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8014634:	2c2f      	cmp	r4, #47	@ 0x2f
 8014636:	d001      	beq.n	801463c <follow_path+0xd4>
 8014638:	2c5c      	cmp	r4, #92	@ 0x5c
 801463a:	d1b4      	bne.n	80145a6 <follow_path+0x3e>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separators */
 801463c:	5cfa      	ldrb	r2, [r7, r3]
 801463e:	2a2f      	cmp	r2, #47	@ 0x2f
 8014640:	d0af      	beq.n	80145a2 <follow_path+0x3a>
 8014642:	2a5c      	cmp	r2, #92	@ 0x5c
 8014644:	d0ad      	beq.n	80145a2 <follow_path+0x3a>
	*path = &p[si];						/* Return pointer to the next segment */
 8014646:	18ff      	adds	r7, r7, r3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014648:	2e00      	cmp	r6, #0
 801464a:	d042      	beq.n	80146d2 <follow_path+0x16a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801464c:	1c6b      	adds	r3, r5, #1
 801464e:	7fda      	ldrb	r2, [r3, #31]
 8014650:	2ae5      	cmp	r2, #229	@ 0xe5
 8014652:	d101      	bne.n	8014658 <follow_path+0xf0>
 8014654:	3ae0      	subs	r2, #224	@ 0xe0
 8014656:	77da      	strb	r2, [r3, #31]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8014658:	2604      	movs	r6, #4
 801465a:	2c20      	cmp	r4, #32
 801465c:	d905      	bls.n	801466a <follow_path+0x102>
 801465e:	2600      	movs	r6, #0
 8014660:	2220      	movs	r2, #32
 8014662:	783b      	ldrb	r3, [r7, #0]
 8014664:	429a      	cmp	r2, r3
 8014666:	4176      	adcs	r6, r6
 8014668:	00b6      	lsls	r6, r6, #2
 801466a:	002b      	movs	r3, r5
 801466c:	332b      	adds	r3, #43	@ 0x2b
 801466e:	701e      	strb	r6, [r3, #0]
	FATFS *fs = dp->obj.fs;
 8014670:	682b      	ldr	r3, [r5, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014672:	0028      	movs	r0, r5
	FATFS *fs = dp->obj.fs;
 8014674:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014676:	f7ff fe2d 	bl	80142d4 <dir_sdi.constprop.0>
 801467a:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 801467c:	d120      	bne.n	80146c0 <follow_path+0x158>
		res = move_window(fs, dp->sect);
 801467e:	69a9      	ldr	r1, [r5, #24]
 8014680:	9803      	ldr	r0, [sp, #12]
 8014682:	f7ff fa8e 	bl	8013ba2 <move_window>
 8014686:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
 8014688:	d11a      	bne.n	80146c0 <follow_path+0x158>
		et = dp->dir[DIR_Name];		/* Entry type */
 801468a:	69e8      	ldr	r0, [r5, #28]
		if (et == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 801468c:	7803      	ldrb	r3, [r0, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d019      	beq.n	80146c6 <follow_path+0x15e>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014692:	7ac3      	ldrb	r3, [r0, #11]
 8014694:	3408      	adds	r4, #8
 8014696:	9301      	str	r3, [sp, #4]
 8014698:	233f      	movs	r3, #63	@ 0x3f
 801469a:	9a01      	ldr	r2, [sp, #4]
 801469c:	4013      	ands	r3, r2
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801469e:	2208      	movs	r2, #8
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80146a0:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80146a2:	7ac3      	ldrb	r3, [r0, #11]
 80146a4:	401c      	ands	r4, r3
 80146a6:	4213      	tst	r3, r2
 80146a8:	d105      	bne.n	80146b6 <follow_path+0x14e>
 80146aa:	9902      	ldr	r1, [sp, #8]
 80146ac:	3203      	adds	r2, #3
 80146ae:	f005 fcc1 	bl	801a034 <memcmp>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d099      	beq.n	80145ea <follow_path+0x82>
		res = dir_next(dp, 0);	/* Next entry */
 80146b6:	2100      	movs	r1, #0
 80146b8:	0028      	movs	r0, r5
 80146ba:	f7ff fefe 	bl	80144ba <dir_next>
 80146be:	e7dc      	b.n	801467a <follow_path+0x112>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80146c0:	2c04      	cmp	r4, #4
 80146c2:	d000      	beq.n	80146c6 <follow_path+0x15e>
 80146c4:	e768      	b.n	8014598 <follow_path+0x30>
			res = dir_find(dp);				/* Find an object with the segment name */
 80146c6:	2404      	movs	r4, #4
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80146c8:	2e00      	cmp	r6, #0
 80146ca:	d000      	beq.n	80146ce <follow_path+0x166>
 80146cc:	e764      	b.n	8014598 <follow_path+0x30>
 80146ce:	2405      	movs	r4, #5
 80146d0:	e762      	b.n	8014598 <follow_path+0x30>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80146d2:	2406      	movs	r4, #6
	return res;
 80146d4:	e760      	b.n	8014598 <follow_path+0x30>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80146d6:	2b0b      	cmp	r3, #11
 80146d8:	d0fb      	beq.n	80146d2 <follow_path+0x16a>
			i = 8; ni = 11;				/* Enter file extension field */
 80146da:	230b      	movs	r3, #11
 80146dc:	2608      	movs	r6, #8
 80146de:	9303      	str	r3, [sp, #12]
 80146e0:	e77f      	b.n	80145e2 <follow_path+0x7a>
 80146e2:	46c0      	nop			@ (mov r8, r8)
 80146e4:	0801fe8a 	.word	0x0801fe8a
 80146e8:	0801f964 	.word	0x0801f964

080146ec <dir_read>:
{
 80146ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 80146ee:	6803      	ldr	r3, [r0, #0]
{
 80146f0:	0004      	movs	r4, r0
 80146f2:	000d      	movs	r5, r1
	FRESULT res = FR_NO_FILE;
 80146f4:	2004      	movs	r0, #4
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80146f6:	263f      	movs	r6, #63	@ 0x3f
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80146f8:	2720      	movs	r7, #32
	FATFS *fs = dp->obj.fs;
 80146fa:	9301      	str	r3, [sp, #4]
	while (dp->sect) {
 80146fc:	69a1      	ldr	r1, [r4, #24]
 80146fe:	2900      	cmp	r1, #0
 8014700:	d103      	bne.n	801470a <dir_read+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014702:	2800      	cmp	r0, #0
 8014704:	d122      	bne.n	801474c <dir_read+0x60>
 8014706:	2000      	movs	r0, #0
}
 8014708:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		res = move_window(fs, dp->sect);
 801470a:	9801      	ldr	r0, [sp, #4]
 801470c:	f7ff fa49 	bl	8013ba2 <move_window>
		if (res != FR_OK) break;
 8014710:	2800      	cmp	r0, #0
 8014712:	d118      	bne.n	8014746 <dir_read+0x5a>
		et = dp->dir[DIR_Name];	/* Test for the entry type */
 8014714:	69e3      	ldr	r3, [r4, #28]
 8014716:	781a      	ldrb	r2, [r3, #0]
		if (et == 0) {
 8014718:	2a00      	cmp	r2, #0
 801471a:	d017      	beq.n	801474c <dir_read+0x60>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801471c:	7adb      	ldrb	r3, [r3, #11]
 801471e:	4033      	ands	r3, r6
 8014720:	71a3      	strb	r3, [r4, #6]
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014722:	2ae5      	cmp	r2, #229	@ 0xe5
 8014724:	d009      	beq.n	801473a <dir_read+0x4e>
 8014726:	2a2e      	cmp	r2, #46	@ 0x2e
 8014728:	d007      	beq.n	801473a <dir_read+0x4e>
 801472a:	2b0f      	cmp	r3, #15
 801472c:	d005      	beq.n	801473a <dir_read+0x4e>
 801472e:	43bb      	bics	r3, r7
 8014730:	3b08      	subs	r3, #8
 8014732:	425a      	negs	r2, r3
 8014734:	4153      	adcs	r3, r2
 8014736:	42ab      	cmp	r3, r5
 8014738:	d0e5      	beq.n	8014706 <dir_read+0x1a>
		res = dir_next(dp, 0);		/* Next entry */
 801473a:	2100      	movs	r1, #0
 801473c:	0020      	movs	r0, r4
 801473e:	f7ff febc 	bl	80144ba <dir_next>
		if (res != FR_OK) break;
 8014742:	2800      	cmp	r0, #0
 8014744:	d0da      	beq.n	80146fc <dir_read+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014746:	2300      	movs	r3, #0
 8014748:	61a3      	str	r3, [r4, #24]
	return res;
 801474a:	e7dd      	b.n	8014708 <dir_read+0x1c>
 801474c:	2004      	movs	r0, #4
 801474e:	e7fa      	b.n	8014746 <dir_read+0x5a>

08014750 <dir_alloc.constprop.0>:
static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 8014754:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);
 8014756:	f7ff fdbd 	bl	80142d4 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 801475a:	2800      	cmp	r0, #0
 801475c:	d110      	bne.n	8014780 <dir_alloc.constprop.0+0x30>
			res = move_window(fs, dp->sect);
 801475e:	0028      	movs	r0, r5
 8014760:	69a1      	ldr	r1, [r4, #24]
 8014762:	f7ff fa1e 	bl	8013ba2 <move_window>
			if (res != FR_OK) break;
 8014766:	2800      	cmp	r0, #0
 8014768:	d10a      	bne.n	8014780 <dir_alloc.constprop.0+0x30>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 801476a:	69e3      	ldr	r3, [r4, #28]
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	2be5      	cmp	r3, #229	@ 0xe5
 8014770:	d009      	beq.n	8014786 <dir_alloc.constprop.0+0x36>
 8014772:	2b00      	cmp	r3, #0
 8014774:	d007      	beq.n	8014786 <dir_alloc.constprop.0+0x36>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8014776:	2101      	movs	r1, #1
 8014778:	0020      	movs	r0, r4
 801477a:	f7ff fe9e 	bl	80144ba <dir_next>
		} while (res == FR_OK);
 801477e:	e7ec      	b.n	801475a <dir_alloc.constprop.0+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014780:	2804      	cmp	r0, #4
 8014782:	d100      	bne.n	8014786 <dir_alloc.constprop.0+0x36>
 8014784:	3003      	adds	r0, #3
}
 8014786:	bd70      	pop	{r4, r5, r6, pc}

08014788 <dir_register>:
{
 8014788:	b570      	push	{r4, r5, r6, lr}
 801478a:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 801478c:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801478e:	f7ff ffdf 	bl	8014750 <dir_alloc.constprop.0>
 8014792:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8014794:	d112      	bne.n	80147bc <dir_register+0x34>
		res = move_window(fs, dp->sect);
 8014796:	0030      	movs	r0, r6
 8014798:	69a1      	ldr	r1, [r4, #24]
 801479a:	f7ff fa02 	bl	8013ba2 <move_window>
 801479e:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {
 80147a0:	d10c      	bne.n	80147bc <dir_register+0x34>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80147a2:	2220      	movs	r2, #32
 80147a4:	0029      	movs	r1, r5
 80147a6:	69e0      	ldr	r0, [r4, #28]
 80147a8:	f005 fc52 	bl	801a050 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80147ac:	0021      	movs	r1, r4
 80147ae:	220b      	movs	r2, #11
 80147b0:	69e0      	ldr	r0, [r4, #28]
 80147b2:	3120      	adds	r1, #32
 80147b4:	f005 fd16 	bl	801a1e4 <memcpy>
			fs->wflag = 1;
 80147b8:	2301      	movs	r3, #1
 80147ba:	7133      	strb	r3, [r6, #4]
}
 80147bc:	0028      	movs	r0, r5
 80147be:	bd70      	pop	{r4, r5, r6, pc}

080147c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 80147c0:	b530      	push	{r4, r5, lr}
 80147c2:	b085      	sub	sp, #20
 80147c4:	9001      	str	r0, [sp, #4]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 80147c6:	a803      	add	r0, sp, #12
{
 80147c8:	0014      	movs	r4, r2
 80147ca:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80147cc:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80147ce:	f7ff f986 	bl	8013ade <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80147d2:	2800      	cmp	r0, #0
 80147d4:	db19      	blt.n	801480a <f_mount+0x4a>

	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 80147d6:	490e      	ldr	r1, [pc, #56]	@ (8014810 <f_mount+0x50>)
 80147d8:	0082      	lsls	r2, r0, #2
 80147da:	5853      	ldr	r3, [r2, r1]
	if (cfs) {					/* Unregister current filesystem object */
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d002      	beq.n	80147e6 <f_mount+0x26>
		FatFs[vol] = 0;
 80147e0:	2500      	movs	r5, #0
 80147e2:	5055      	str	r5, [r2, r1]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 80147e4:	701d      	strb	r5, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80147e6:	9b01      	ldr	r3, [sp, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d003      	beq.n	80147f4 <f_mount+0x34>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80147ec:	7058      	strb	r0, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80147ee:	2000      	movs	r0, #0
		FatFs[vol] = fs;		/* Register it */
 80147f0:	508b      	str	r3, [r1, r2]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80147f2:	7018      	strb	r0, [r3, #0]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80147f4:	2c00      	cmp	r4, #0
 80147f6:	d005      	beq.n	8014804 <f_mount+0x44>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume in this function */
 80147f8:	2200      	movs	r2, #0
 80147fa:	4668      	mov	r0, sp
 80147fc:	a901      	add	r1, sp, #4
 80147fe:	f7ff fb73 	bl	8013ee8 <mount_volume>
 8014802:	0004      	movs	r4, r0
	LEAVE_FF(fs, res);
}
 8014804:	0020      	movs	r0, r4
 8014806:	b005      	add	sp, #20
 8014808:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 801480a:	240b      	movs	r4, #11
 801480c:	e7fa      	b.n	8014804 <f_mount+0x44>
 801480e:	46c0      	nop			@ (mov r8, r8)
 8014810:	20003100 	.word	0x20003100

08014814 <f_open>:
	DIR dj;
	FATFS *fs;
	DEF_NAMEBUFF


	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8014814:	2309      	movs	r3, #9
{
 8014816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014818:	b091      	sub	sp, #68	@ 0x44
 801481a:	0004      	movs	r4, r0
 801481c:	0015      	movs	r5, r2
 801481e:	9103      	str	r1, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 8014820:	9302      	str	r3, [sp, #8]
 8014822:	2800      	cmp	r0, #0
 8014824:	d100      	bne.n	8014828 <f_open+0x14>
 8014826:	e0c0      	b.n	80149aa <f_open+0x196>

	/* Get logical drive number and mount the volume if needed */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8014828:	3336      	adds	r3, #54	@ 0x36
 801482a:	4013      	ands	r3, r2
	res = mount_volume(&path, &fs, mode);
 801482c:	001a      	movs	r2, r3
 801482e:	a904      	add	r1, sp, #16
 8014830:	a803      	add	r0, sp, #12
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8014832:	9301      	str	r3, [sp, #4]
	res = mount_volume(&path, &fs, mode);
 8014834:	f7ff fb58 	bl	8013ee8 <mount_volume>
 8014838:	9002      	str	r0, [sp, #8]

	if (res == FR_OK) {
 801483a:	2800      	cmp	r0, #0
 801483c:	d000      	beq.n	8014840 <f_open+0x2c>
 801483e:	e0a4      	b.n	801498a <f_open+0x176>
		fp->obj.fs = fs;
 8014840:	9e04      	ldr	r6, [sp, #16]
		dj.obj.fs = fs;
		INIT_NAMEBUFF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014842:	9903      	ldr	r1, [sp, #12]
		fp->obj.fs = fs;
 8014844:	6026      	str	r6, [r4, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014846:	a805      	add	r0, sp, #20
		dj.obj.fs = fs;
 8014848:	9605      	str	r6, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801484a:	f7ff fe8d 	bl	8014568 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 801484e:	2800      	cmp	r0, #0
 8014850:	d106      	bne.n	8014860 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014852:	2337      	movs	r3, #55	@ 0x37
 8014854:	aa02      	add	r2, sp, #8
 8014856:	189b      	adds	r3, r3, r2
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	2b7f      	cmp	r3, #127	@ 0x7f
 801485c:	d900      	bls.n	8014860 <f_open+0x4c>
				res = FR_INVALID_NAME;
 801485e:	3006      	adds	r0, #6
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014860:	231c      	movs	r3, #28
 8014862:	421d      	tst	r5, r3
 8014864:	d052      	beq.n	801490c <f_open+0xf8>
			if (res != FR_OK) {					/* No file, create new */
 8014866:	2800      	cmp	r0, #0
 8014868:	d047      	beq.n	80148fa <f_open+0xe6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801486a:	2804      	cmp	r0, #4
 801486c:	d000      	beq.n	8014870 <f_open+0x5c>
 801486e:	e08c      	b.n	801498a <f_open+0x176>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8014870:	a805      	add	r0, sp, #20
 8014872:	f7ff ff89 	bl	8014788 <dir_register>
					res = FR_EXIST;				/* Cannot create as new file */
				} else {
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014876:	2800      	cmp	r0, #0
 8014878:	d000      	beq.n	801487c <f_open+0x68>
 801487a:	e086      	b.n	801498a <f_open+0x176>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801487c:	2308      	movs	r3, #8
 801487e:	9a01      	ldr	r2, [sp, #4]
 8014880:	431a      	orrs	r2, r3
 8014882:	9201      	str	r2, [sp, #4]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8014884:	9b01      	ldr	r3, [sp, #4]
 8014886:	071b      	lsls	r3, r3, #28
 8014888:	d54a      	bpl.n	8014920 <f_open+0x10c>
				DWORD tm = GET_FATTIME();
 801488a:	f7ff f905 	bl	8013a98 <get_fattime>
 801488e:	0005      	movs	r5, r0
				} else
#endif
				{
					DWORD cl;
					/* Set FAT directory entry initial state */
					st_32(dj.dir + DIR_CrtTime, tm);	/* Set created time */
 8014890:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8014892:	0029      	movs	r1, r5
 8014894:	300e      	adds	r0, #14
 8014896:	f7ff f90e 	bl	8013ab6 <st_32>
					st_32(dj.dir + DIR_ModTime, tm);	/* Set modified time (tmp setting) */
 801489a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801489c:	0029      	movs	r1, r5
 801489e:	3016      	adds	r0, #22
 80148a0:	f7ff f909 	bl	8013ab6 <st_32>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80148a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80148a6:	7830      	ldrb	r0, [r6, #0]
 80148a8:	0029      	movs	r1, r5
 80148aa:	f7ff fca0 	bl	80141ee <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80148ae:	2320      	movs	r3, #32
 80148b0:	72eb      	strb	r3, [r5, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80148b2:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80148b4:	0007      	movs	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80148b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80148b8:	0030      	movs	r0, r6
 80148ba:	f7ff f966 	bl	8013b8a <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 80148be:	2200      	movs	r2, #0
					st_32(dj.dir + DIR_FileSize, 0);
 80148c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80148c2:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80148c4:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80148c6:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80148c8:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80148ca:	2301      	movs	r3, #1
 80148cc:	7133      	strb	r3, [r6, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80148ce:	4297      	cmp	r7, r2
 80148d0:	d00e      	beq.n	80148f0 <f_open+0xdc>
						LBA_t sc = fs->winsect;

						res = remove_chain(&dj.obj, cl, 0);
 80148d2:	0039      	movs	r1, r7
 80148d4:	a805      	add	r0, sp, #20
						LBA_t sc = fs->winsect;
 80148d6:	69f5      	ldr	r5, [r6, #28]
						res = remove_chain(&dj.obj, cl, 0);
 80148d8:	f7ff fd3a 	bl	8014350 <remove_chain>
						if (res == FR_OK) {
 80148dc:	2800      	cmp	r0, #0
 80148de:	d154      	bne.n	801498a <f_open+0x176>
							res = move_window(fs, sc);
 80148e0:	0029      	movs	r1, r5
 80148e2:	0030      	movs	r0, r6
 80148e4:	f7ff f95d 	bl	8013ba2 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80148e8:	3f01      	subs	r7, #1
 80148ea:	60f7      	str	r7, [r6, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80148ec:	2800      	cmp	r0, #0
 80148ee:	d14c      	bne.n	801498a <f_open+0x176>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80148f0:	2340      	movs	r3, #64	@ 0x40
 80148f2:	9a01      	ldr	r2, [sp, #4]
 80148f4:	431a      	orrs	r2, r3
 80148f6:	9201      	str	r2, [sp, #4]
 80148f8:	e012      	b.n	8014920 <f_open+0x10c>
				if (mode & FA_CREATE_NEW) {
 80148fa:	076d      	lsls	r5, r5, #29
 80148fc:	d45c      	bmi.n	80149b8 <f_open+0x1a4>
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
 80148fe:	ab02      	add	r3, sp, #8
 8014900:	7c9a      	ldrb	r2, [r3, #18]
 8014902:	2311      	movs	r3, #17
 8014904:	421a      	tst	r2, r3
 8014906:	d0bd      	beq.n	8014884 <f_open+0x70>
						res = FR_DENIED;
 8014908:	2007      	movs	r0, #7
 801490a:	e03e      	b.n	801498a <f_open+0x176>
			if (res == FR_OK) {					/* Is the object exsiting? */
 801490c:	2800      	cmp	r0, #0
 801490e:	d13c      	bne.n	801498a <f_open+0x176>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8014910:	ab02      	add	r3, sp, #8
 8014912:	7c9b      	ldrb	r3, [r3, #18]
 8014914:	06da      	lsls	r2, r3, #27
 8014916:	d451      	bmi.n	80149bc <f_open+0x1a8>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8014918:	07ad      	lsls	r5, r5, #30
 801491a:	d501      	bpl.n	8014920 <f_open+0x10c>
 801491c:	07db      	lsls	r3, r3, #31
 801491e:	d4f3      	bmi.n	8014908 <f_open+0xf4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014920:	69f3      	ldr	r3, [r6, #28]
			fp->dir_ptr = dj.dir;
 8014922:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014924:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 8014926:	6265      	str	r5, [r4, #36]	@ 0x24
			if (fs->fs_type == FS_EXFAT) {
				init_alloc_info(&fp->obj, &dj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014928:	7830      	ldrb	r0, [r6, #0]
 801492a:	0029      	movs	r1, r5
 801492c:	f7ff fc5f 	bl	80141ee <ld_clust.isra.0>
 8014930:	60a0      	str	r0, [r4, #8]
 8014932:	0007      	movs	r7, r0
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8014934:	0028      	movs	r0, r5
 8014936:	301c      	adds	r0, #28
 8014938:	f7ff f8b2 	bl	8013aa0 <ld_32>
 801493c:	60e0      	str	r0, [r4, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 801493e:	88f3      	ldrh	r3, [r6, #6]
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 8014940:	0005      	movs	r5, r0
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 8014942:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;	/* Set file access mode */
 8014944:	9b01      	ldr	r3, [sp, #4]
 8014946:	7423      	strb	r3, [r4, #16]
			fp->err = 0;		/* Clear error flag */
 8014948:	2300      	movs	r3, #0
 801494a:	7463      	strb	r3, [r4, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 801494c:	61e3      	str	r3, [r4, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 801494e:	6163      	str	r3, [r4, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014950:	9b01      	ldr	r3, [sp, #4]
 8014952:	069b      	lsls	r3, r3, #26
 8014954:	d529      	bpl.n	80149aa <f_open+0x196>
 8014956:	2800      	cmp	r0, #0
 8014958:	d027      	beq.n	80149aa <f_open+0x196>
				DWORD bcs, clst;
				FSIZE_t ofs;

				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801495a:	6160      	str	r0, [r4, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801495c:	8973      	ldrh	r3, [r6, #10]
 801495e:	031b      	lsls	r3, r3, #12
 8014960:	9301      	str	r3, [sp, #4]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014962:	4298      	cmp	r0, r3
 8014964:	d915      	bls.n	8014992 <f_open+0x17e>
					clst = get_fat(&fp->obj, clst);
 8014966:	0039      	movs	r1, r7
 8014968:	6820      	ldr	r0, [r4, #0]
 801496a:	f7ff fc4f 	bl	801420c <get_fat.isra.0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801496e:	9b01      	ldr	r3, [sp, #4]
					clst = get_fat(&fp->obj, clst);
 8014970:	0007      	movs	r7, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014972:	1aed      	subs	r5, r5, r3
					if (clst <= 1) res = FR_INT_ERR;
 8014974:	2801      	cmp	r0, #1
 8014976:	d91b      	bls.n	80149b0 <f_open+0x19c>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014978:	1c43      	adds	r3, r0, #1
 801497a:	d01b      	beq.n	80149b4 <f_open+0x1a0>
 801497c:	9b01      	ldr	r3, [sp, #4]
 801497e:	42ab      	cmp	r3, r5
 8014980:	d3f1      	bcc.n	8014966 <f_open+0x152>
 8014982:	2000      	movs	r0, #0
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8014984:	61a7      	str	r7, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014986:	2800      	cmp	r0, #0
 8014988:	d004      	beq.n	8014994 <f_open+0x180>
		}

		FREE_NAMEBUFF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801498a:	2300      	movs	r3, #0
 801498c:	9002      	str	r0, [sp, #8]
 801498e:	6023      	str	r3, [r4, #0]
 8014990:	e00b      	b.n	80149aa <f_open+0x196>
				fp->clust = clst;
 8014992:	61a7      	str	r7, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014994:	052b      	lsls	r3, r5, #20
 8014996:	d008      	beq.n	80149aa <f_open+0x196>
					LBA_t sec = clst2sect(fs, clst);
 8014998:	0039      	movs	r1, r7
 801499a:	0030      	movs	r0, r6
 801499c:	f7ff f893 	bl	8013ac6 <clst2sect>
					if (sec == 0) {
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d00d      	beq.n	80149c0 <f_open+0x1ac>
						fp->sect = sec + (DWORD)(ofs / SS(fs));
 80149a4:	0b2d      	lsrs	r5, r5, #12
 80149a6:	1828      	adds	r0, r5, r0
 80149a8:	61e0      	str	r0, [r4, #28]

	LEAVE_FF(fs, res);
}
 80149aa:	9802      	ldr	r0, [sp, #8]
 80149ac:	b011      	add	sp, #68	@ 0x44
 80149ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80149b0:	2002      	movs	r0, #2
 80149b2:	e7e7      	b.n	8014984 <f_open+0x170>
 80149b4:	2001      	movs	r0, #1
 80149b6:	e7e5      	b.n	8014984 <f_open+0x170>
					res = FR_EXIST;				/* Cannot create as new file */
 80149b8:	2008      	movs	r0, #8
 80149ba:	e7e6      	b.n	801498a <f_open+0x176>
					res = FR_NO_FILE;
 80149bc:	2004      	movs	r0, #4
 80149be:	e7e4      	b.n	801498a <f_open+0x176>
						res = FR_INT_ERR;
 80149c0:	2002      	movs	r0, #2
 80149c2:	e7e2      	b.n	801498a <f_open+0x176>

080149c4 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 80149c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149c6:	b089      	sub	sp, #36	@ 0x24
 80149c8:	9305      	str	r3, [sp, #20]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80149ca:	2300      	movs	r3, #0
{
 80149cc:	0017      	movs	r7, r2
	*bw = 0;	/* Clear write byte counter */
 80149ce:	9a05      	ldr	r2, [sp, #20]
{
 80149d0:	9102      	str	r1, [sp, #8]
	*bw = 0;	/* Clear write byte counter */
 80149d2:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80149d4:	a907      	add	r1, sp, #28
{
 80149d6:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80149d8:	f7ff f897 	bl	8013b0a <validate>
 80149dc:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80149de:	2800      	cmp	r0, #0
 80149e0:	d129      	bne.n	8014a36 <f_write+0x72>
 80149e2:	7c63      	ldrb	r3, [r4, #17]
 80149e4:	9301      	str	r3, [sp, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d125      	bne.n	8014a36 <f_write+0x72>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80149ea:	7c23      	ldrb	r3, [r4, #16]
 80149ec:	079b      	lsls	r3, r3, #30
 80149ee:	d400      	bmi.n	80149f2 <f_write+0x2e>
 80149f0:	e0a8      	b.n	8014b44 <f_write+0x180>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80149f2:	6963      	ldr	r3, [r4, #20]
 80149f4:	19da      	adds	r2, r3, r7
 80149f6:	4293      	cmp	r3, r2
 80149f8:	d900      	bls.n	80149fc <f_write+0x38>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80149fa:	43df      	mvns	r7, r3
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80149fc:	2f00      	cmp	r7, #0
 80149fe:	d016      	beq.n	8014a2e <f_write+0x6a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014a00:	6962      	ldr	r2, [r4, #20]
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014a02:	9e07      	ldr	r6, [sp, #28]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014a04:	0513      	lsls	r3, r2, #20
 8014a06:	d000      	beq.n	8014a0a <f_write+0x46>
 8014a08:	e080      	b.n	8014b0c <f_write+0x148>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014a0a:	0b11      	lsrs	r1, r2, #12
 8014a0c:	0008      	movs	r0, r1
 8014a0e:	8973      	ldrh	r3, [r6, #10]
 8014a10:	3b01      	subs	r3, #1
 8014a12:	4018      	ands	r0, r3
 8014a14:	9004      	str	r0, [sp, #16]
			if (csect == 0) {				/* On the cluster boundary? */
 8014a16:	4219      	tst	r1, r3
 8014a18:	d121      	bne.n	8014a5e <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014a1a:	2a00      	cmp	r2, #0
 8014a1c:	d10e      	bne.n	8014a3c <f_write+0x78>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014a1e:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8014a20:	2900      	cmp	r1, #0
 8014a22:	d10d      	bne.n	8014a40 <f_write+0x7c>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014a24:	0020      	movs	r0, r4
 8014a26:	f7ff fccc 	bl	80143c2 <create_chain>
 8014a2a:	1e01      	subs	r1, r0, #0
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014a2c:	d108      	bne.n	8014a40 <f_write+0x7c>
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014a2e:	2340      	movs	r3, #64	@ 0x40
 8014a30:	7c22      	ldrb	r2, [r4, #16]
 8014a32:	4313      	orrs	r3, r2
 8014a34:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
}
 8014a36:	9801      	ldr	r0, [sp, #4]
 8014a38:	b009      	add	sp, #36	@ 0x24
 8014a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014a3c:	69a1      	ldr	r1, [r4, #24]
 8014a3e:	e7f1      	b.n	8014a24 <f_write+0x60>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014a40:	2901      	cmp	r1, #1
 8014a42:	d103      	bne.n	8014a4c <f_write+0x88>
 8014a44:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a46:	7463      	strb	r3, [r4, #17]
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014a48:	9301      	str	r3, [sp, #4]
 8014a4a:	e7f4      	b.n	8014a36 <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a4c:	1c4b      	adds	r3, r1, #1
 8014a4e:	d101      	bne.n	8014a54 <f_write+0x90>
 8014a50:	2301      	movs	r3, #1
 8014a52:	e7f8      	b.n	8014a46 <f_write+0x82>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014a54:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8014a56:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d100      	bne.n	8014a5e <f_write+0x9a>
 8014a5c:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8014a5e:	69f2      	ldr	r2, [r6, #28]
 8014a60:	69e3      	ldr	r3, [r4, #28]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d104      	bne.n	8014a70 <f_write+0xac>
 8014a66:	0030      	movs	r0, r6
 8014a68:	f7ff f86d 	bl	8013b46 <sync_window>
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	d1ef      	bne.n	8014a50 <f_write+0x8c>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8014a70:	0030      	movs	r0, r6
 8014a72:	69a1      	ldr	r1, [r4, #24]
 8014a74:	f7ff f827 	bl	8013ac6 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d0e3      	beq.n	8014a44 <f_write+0x80>
			sect += csect;
 8014a7c:	9b04      	ldr	r3, [sp, #16]
 8014a7e:	181b      	adds	r3, r3, r0
 8014a80:	9303      	str	r3, [sp, #12]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8014a82:	2380      	movs	r3, #128	@ 0x80
 8014a84:	015b      	lsls	r3, r3, #5
 8014a86:	429f      	cmp	r7, r3
 8014a88:	d333      	bcc.n	8014af2 <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014a8a:	9a04      	ldr	r2, [sp, #16]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014a8c:	0b3d      	lsrs	r5, r7, #12
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014a8e:	8973      	ldrh	r3, [r6, #10]
 8014a90:	1952      	adds	r2, r2, r5
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d901      	bls.n	8014a9a <f_write+0xd6>
					cc = fs->csize - csect;
 8014a96:	9a04      	ldr	r2, [sp, #16]
 8014a98:	1a9d      	subs	r5, r3, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a9a:	002b      	movs	r3, r5
 8014a9c:	7870      	ldrb	r0, [r6, #1]
 8014a9e:	9a03      	ldr	r2, [sp, #12]
 8014aa0:	9902      	ldr	r1, [sp, #8]
 8014aa2:	f7fe ffc0 	bl	8013a26 <disk_write>
 8014aa6:	9004      	str	r0, [sp, #16]
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d1d1      	bne.n	8014a50 <f_write+0x8c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8014aac:	69f1      	ldr	r1, [r6, #28]
 8014aae:	9b03      	ldr	r3, [sp, #12]
 8014ab0:	1ac9      	subs	r1, r1, r3
 8014ab2:	42a9      	cmp	r1, r5
 8014ab4:	d20a      	bcs.n	8014acc <f_write+0x108>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 8014ab6:	0030      	movs	r0, r6
 8014ab8:	2280      	movs	r2, #128	@ 0x80
 8014aba:	9b02      	ldr	r3, [sp, #8]
 8014abc:	0309      	lsls	r1, r1, #12
 8014abe:	1859      	adds	r1, r3, r1
 8014ac0:	3030      	adds	r0, #48	@ 0x30
 8014ac2:	0152      	lsls	r2, r2, #5
 8014ac4:	f005 fb8e 	bl	801a1e4 <memcpy>
					fs->wflag = 0;
 8014ac8:	9b04      	ldr	r3, [sp, #16]
 8014aca:	7133      	strb	r3, [r6, #4]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014acc:	032d      	lsls	r5, r5, #12
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8014ace:	9b05      	ldr	r3, [sp, #20]
 8014ad0:	9a05      	ldr	r2, [sp, #20]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	1b7f      	subs	r7, r7, r5
 8014ad6:	195b      	adds	r3, r3, r5
 8014ad8:	6013      	str	r3, [r2, #0]
 8014ada:	9b02      	ldr	r3, [sp, #8]
 8014adc:	195b      	adds	r3, r3, r5
 8014ade:	9302      	str	r3, [sp, #8]
 8014ae0:	6963      	ldr	r3, [r4, #20]
 8014ae2:	18ed      	adds	r5, r5, r3
 8014ae4:	68e3      	ldr	r3, [r4, #12]
 8014ae6:	6165      	str	r5, [r4, #20]
 8014ae8:	42ab      	cmp	r3, r5
 8014aea:	d200      	bcs.n	8014aee <f_write+0x12a>
 8014aec:	002b      	movs	r3, r5
 8014aee:	60e3      	str	r3, [r4, #12]
 8014af0:	e784      	b.n	80149fc <f_write+0x38>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 8014af2:	6962      	ldr	r2, [r4, #20]
 8014af4:	68e3      	ldr	r3, [r4, #12]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d306      	bcc.n	8014b08 <f_write+0x144>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 8014afa:	0030      	movs	r0, r6
 8014afc:	f7ff f823 	bl	8013b46 <sync_window>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d1a5      	bne.n	8014a50 <f_write+0x8c>
				fs->winsect = sect;
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	61f3      	str	r3, [r6, #28]
			fp->sect = sect;
 8014b08:	9b03      	ldr	r3, [sp, #12]
 8014b0a:	61e3      	str	r3, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8014b0c:	2380      	movs	r3, #128	@ 0x80
 8014b0e:	6965      	ldr	r5, [r4, #20]
 8014b10:	015b      	lsls	r3, r3, #5
 8014b12:	052d      	lsls	r5, r5, #20
 8014b14:	0d2d      	lsrs	r5, r5, #20
 8014b16:	1b5d      	subs	r5, r3, r5
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014b18:	42bd      	cmp	r5, r7
 8014b1a:	d900      	bls.n	8014b1e <f_write+0x15a>
 8014b1c:	003d      	movs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8014b1e:	0030      	movs	r0, r6
 8014b20:	69e1      	ldr	r1, [r4, #28]
 8014b22:	f7ff f83e 	bl	8013ba2 <move_window>
 8014b26:	2800      	cmp	r0, #0
 8014b28:	d192      	bne.n	8014a50 <f_write+0x8c>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014b2a:	0030      	movs	r0, r6
 8014b2c:	6963      	ldr	r3, [r4, #20]
 8014b2e:	3030      	adds	r0, #48	@ 0x30
 8014b30:	051b      	lsls	r3, r3, #20
 8014b32:	0d1b      	lsrs	r3, r3, #20
 8014b34:	18c0      	adds	r0, r0, r3
 8014b36:	002a      	movs	r2, r5
 8014b38:	9902      	ldr	r1, [sp, #8]
 8014b3a:	f005 fb53 	bl	801a1e4 <memcpy>
		fs->wflag = 1;
 8014b3e:	2301      	movs	r3, #1
 8014b40:	7133      	strb	r3, [r6, #4]
 8014b42:	e7c4      	b.n	8014ace <f_write+0x10a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014b44:	2307      	movs	r3, #7
 8014b46:	e77f      	b.n	8014a48 <f_write+0x84>

08014b48 <putc_bfd>:

	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;			/* Write index of pb->buf[] */
 8014b48:	6843      	ldr	r3, [r0, #4]
{
 8014b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b4c:	0004      	movs	r4, r0
	if (i < 0) return;		/* In write error? */
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	db14      	blt.n	8014b7c <putc_bfd+0x34>
	}
	pb->buf[i++] = (BYTE)wc;
#endif

#else							/* ANSI/OEM input (without re-encoding) */
	pb->buf[i++] = (BYTE)c;
 8014b52:	1c5d      	adds	r5, r3, #1
 8014b54:	18c3      	adds	r3, r0, r3
	nc = pb->nchr;			/* Write unit counter */
 8014b56:	6886      	ldr	r6, [r0, #8]
	pb->buf[i++] = (BYTE)c;
 8014b58:	7319      	strb	r1, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 8014b5a:	2d3b      	cmp	r5, #59	@ 0x3b
 8014b5c:	dd0b      	ble.n	8014b76 <putc_bfd+0x2e>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
 8014b5e:	0001      	movs	r1, r0
 8014b60:	002a      	movs	r2, r5
 8014b62:	ab01      	add	r3, sp, #4
 8014b64:	6800      	ldr	r0, [r0, #0]
 8014b66:	310c      	adds	r1, #12
 8014b68:	f7ff ff2c 	bl	80149c4 <f_write>
		i = (n == (UINT)i) ? 0 : -1;
 8014b6c:	9b01      	ldr	r3, [sp, #4]
 8014b6e:	1b5b      	subs	r3, r3, r5
 8014b70:	1e5a      	subs	r2, r3, #1
 8014b72:	4193      	sbcs	r3, r2
 8014b74:	425d      	negs	r5, r3
	}
	pb->idx = i;
	pb->nchr = nc + 1;
 8014b76:	3601      	adds	r6, #1
	pb->idx = i;
 8014b78:	6065      	str	r5, [r4, #4]
	pb->nchr = nc + 1;
 8014b7a:	60a6      	str	r6, [r4, #8]
}
 8014b7c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08014b7e <putc_flush>:

static int putc_flush (putbuff* pb)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8014b7e:	6842      	ldr	r2, [r0, #4]
{
 8014b80:	b513      	push	{r0, r1, r4, lr}
 8014b82:	0004      	movs	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8014b84:	2a00      	cmp	r2, #0
 8014b86:	da02      	bge.n	8014b8e <putc_flush+0x10>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) {
		return pb->nchr;
	}
	return -1;
 8014b88:	2001      	movs	r0, #1
 8014b8a:	4240      	negs	r0, r0
}
 8014b8c:	bd16      	pop	{r1, r2, r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8014b8e:	0001      	movs	r1, r0
 8014b90:	ab01      	add	r3, sp, #4
 8014b92:	6800      	ldr	r0, [r0, #0]
 8014b94:	310c      	adds	r1, #12
 8014b96:	f7ff ff15 	bl	80149c4 <f_write>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d1f4      	bne.n	8014b88 <putc_flush+0xa>
		&& (UINT)pb->idx == nw) {
 8014b9e:	6862      	ldr	r2, [r4, #4]
 8014ba0:	9b01      	ldr	r3, [sp, #4]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d1f0      	bne.n	8014b88 <putc_flush+0xa>
		return pb->nchr;
 8014ba6:	68a0      	ldr	r0, [r4, #8]
 8014ba8:	e7f0      	b.n	8014b8c <putc_flush+0xe>

08014baa <f_sync>:
{
 8014baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bac:	b085      	sub	sp, #20
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014bae:	a903      	add	r1, sp, #12
{
 8014bb0:	0005      	movs	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014bb2:	f7fe ffaa 	bl	8013b0a <validate>
 8014bb6:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8014bb8:	d12f      	bne.n	8014c1a <f_sync+0x70>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014bba:	7c2b      	ldrb	r3, [r5, #16]
 8014bbc:	2740      	movs	r7, #64	@ 0x40
 8014bbe:	001c      	movs	r4, r3
 8014bc0:	403c      	ands	r4, r7
 8014bc2:	423b      	tst	r3, r7
 8014bc4:	d029      	beq.n	8014c1a <f_sync+0x70>
				res = move_window(fs, fp->dir_sect);
 8014bc6:	9b03      	ldr	r3, [sp, #12]
 8014bc8:	6a29      	ldr	r1, [r5, #32]
 8014bca:	0018      	movs	r0, r3
 8014bcc:	9301      	str	r3, [sp, #4]
 8014bce:	f7fe ffe8 	bl	8013ba2 <move_window>
 8014bd2:	1e04      	subs	r4, r0, #0
				if (res == FR_OK) {
 8014bd4:	d121      	bne.n	8014c1a <f_sync+0x70>
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8014bd6:	2320      	movs	r3, #32
					BYTE *dir = fp->dir_ptr;
 8014bd8:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8014bda:	7af2      	ldrb	r2, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8014bdc:	0031      	movs	r1, r6
					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 8014bde:	4313      	orrs	r3, r2
 8014be0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 8014be2:	68aa      	ldr	r2, [r5, #8]
 8014be4:	6828      	ldr	r0, [r5, #0]
 8014be6:	f7fe ffd0 	bl	8013b8a <st_clust>
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014bea:	0030      	movs	r0, r6
 8014bec:	68e9      	ldr	r1, [r5, #12]
 8014bee:	301c      	adds	r0, #28
 8014bf0:	f7fe ff61 	bl	8013ab6 <st_32>
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
 8014bf4:	f7fe ff50 	bl	8013a98 <get_fattime>
 8014bf8:	0001      	movs	r1, r0
 8014bfa:	0030      	movs	r0, r6
 8014bfc:	3016      	adds	r0, #22
 8014bfe:	f7fe ff5a 	bl	8013ab6 <st_32>
					fs->wflag = 1;
 8014c02:	2301      	movs	r3, #1
 8014c04:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8014c06:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8014c08:	74f4      	strb	r4, [r6, #19]
					res = sync_fs(fs);							/* Restore it to the directory */
 8014c0a:	0010      	movs	r0, r2
					fs->wflag = 1;
 8014c0c:	7113      	strb	r3, [r2, #4]
					res = sync_fs(fs);							/* Restore it to the directory */
 8014c0e:	f7ff f90d 	bl	8013e2c <sync_fs>
 8014c12:	0004      	movs	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014c14:	7c2b      	ldrb	r3, [r5, #16]
 8014c16:	43bb      	bics	r3, r7
 8014c18:	742b      	strb	r3, [r5, #16]
}
 8014c1a:	0020      	movs	r0, r4
 8014c1c:	b005      	add	sp, #20
 8014c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c20 <f_close>:
{
 8014c20:	b513      	push	{r0, r1, r4, lr}
 8014c22:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8014c24:	f7ff ffc1 	bl	8014baa <f_sync>
	if (res == FR_OK)
 8014c28:	2800      	cmp	r0, #0
 8014c2a:	d106      	bne.n	8014c3a <f_close+0x1a>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014c2c:	0020      	movs	r0, r4
 8014c2e:	a901      	add	r1, sp, #4
 8014c30:	f7fe ff6b 	bl	8013b0a <validate>
		if (res == FR_OK) {
 8014c34:	2800      	cmp	r0, #0
 8014c36:	d100      	bne.n	8014c3a <f_close+0x1a>
			fp->obj.fs = 0;	/* Invalidate file object */
 8014c38:	6020      	str	r0, [r4, #0]
}
 8014c3a:	bd16      	pop	{r1, r2, r4, pc}

08014c3c <f_lseek>:
{
 8014c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3e:	b087      	sub	sp, #28
 8014c40:	000c      	movs	r4, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014c42:	a905      	add	r1, sp, #20
{
 8014c44:	0005      	movs	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014c46:	f7fe ff60 	bl	8013b0a <validate>
 8014c4a:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014c4c:	d158      	bne.n	8014d00 <f_lseek+0xc4>
 8014c4e:	7c6e      	ldrb	r6, [r5, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014c50:	2e00      	cmp	r6, #0
 8014c52:	d155      	bne.n	8014d00 <f_lseek+0xc4>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014c54:	68eb      	ldr	r3, [r5, #12]
 8014c56:	42a3      	cmp	r3, r4
 8014c58:	d203      	bcs.n	8014c62 <f_lseek+0x26>
 8014c5a:	7c2a      	ldrb	r2, [r5, #16]
 8014c5c:	0792      	lsls	r2, r2, #30
 8014c5e:	d400      	bmi.n	8014c62 <f_lseek+0x26>
			ofs = fp->obj.objsize;
 8014c60:	001c      	movs	r4, r3
		fp->fptr = nsect = 0;
 8014c62:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8014c64:	696b      	ldr	r3, [r5, #20]
		fp->fptr = nsect = 0;
 8014c66:	616a      	str	r2, [r5, #20]
		if (ofs > 0) {
 8014c68:	4294      	cmp	r4, r2
 8014c6a:	d110      	bne.n	8014c8e <f_lseek+0x52>
		fp->fptr = nsect = 0;
 8014c6c:	2000      	movs	r0, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8014c6e:	696b      	ldr	r3, [r5, #20]
 8014c70:	68ea      	ldr	r2, [r5, #12]
 8014c72:	4293      	cmp	r3, r2
 8014c74:	d904      	bls.n	8014c80 <f_lseek+0x44>
			fp->flag |= FA_MODIFIED;
 8014c76:	2240      	movs	r2, #64	@ 0x40
 8014c78:	7c29      	ldrb	r1, [r5, #16]
			fp->obj.objsize = fp->fptr;
 8014c7a:	60eb      	str	r3, [r5, #12]
			fp->flag |= FA_MODIFIED;
 8014c7c:	430a      	orrs	r2, r1
 8014c7e:	742a      	strb	r2, [r5, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014c80:	051b      	lsls	r3, r3, #20
 8014c82:	d03d      	beq.n	8014d00 <f_lseek+0xc4>
 8014c84:	69eb      	ldr	r3, [r5, #28]
 8014c86:	4283      	cmp	r3, r0
 8014c88:	d03a      	beq.n	8014d00 <f_lseek+0xc4>
			fp->sect = nsect;
 8014c8a:	61e8      	str	r0, [r5, #28]
 8014c8c:	e038      	b.n	8014d00 <f_lseek+0xc4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014c8e:	9a05      	ldr	r2, [sp, #20]
 8014c90:	9201      	str	r2, [sp, #4]
 8014c92:	8957      	ldrh	r7, [r2, #10]
 8014c94:	033f      	lsls	r7, r7, #12
			if (ifptr > 0 &&
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d016      	beq.n	8014cc8 <f_lseek+0x8c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014c9a:	3b01      	subs	r3, #1
 8014c9c:	0039      	movs	r1, r7
 8014c9e:	1e60      	subs	r0, r4, #1
 8014ca0:	9302      	str	r3, [sp, #8]
 8014ca2:	f7eb fa61 	bl	8000168 <__udivsi3>
 8014ca6:	0039      	movs	r1, r7
 8014ca8:	9003      	str	r0, [sp, #12]
 8014caa:	9802      	ldr	r0, [sp, #8]
 8014cac:	f7eb fa5c 	bl	8000168 <__udivsi3>
			if (ifptr > 0 &&
 8014cb0:	9b03      	ldr	r3, [sp, #12]
 8014cb2:	4283      	cmp	r3, r0
 8014cb4:	d308      	bcc.n	8014cc8 <f_lseek+0x8c>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014cb6:	9a02      	ldr	r2, [sp, #8]
 8014cb8:	427b      	negs	r3, r7
 8014cba:	401a      	ands	r2, r3
				clst = fp->clust;
 8014cbc:	69a9      	ldr	r1, [r5, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014cbe:	616a      	str	r2, [r5, #20]
				ofs -= fp->fptr;
 8014cc0:	1aa4      	subs	r4, r4, r2
			if (clst != 0) {
 8014cc2:	2900      	cmp	r1, #0
 8014cc4:	d0d2      	beq.n	8014c6c <f_lseek+0x30>
 8014cc6:	e003      	b.n	8014cd0 <f_lseek+0x94>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014cc8:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014cca:	2900      	cmp	r1, #0
 8014ccc:	d010      	beq.n	8014cf0 <f_lseek+0xb4>
				fp->clust = clst;
 8014cce:	61a9      	str	r1, [r5, #24]
					ofs -= bcs; fp->fptr += bcs;
 8014cd0:	696b      	ldr	r3, [r5, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 8014cd2:	42bc      	cmp	r4, r7
 8014cd4:	d81e      	bhi.n	8014d14 <f_lseek+0xd8>
				fp->fptr += ofs;
 8014cd6:	696b      	ldr	r3, [r5, #20]
 8014cd8:	191b      	adds	r3, r3, r4
 8014cda:	616b      	str	r3, [r5, #20]
				if (ofs % SS(fs)) {
 8014cdc:	0523      	lsls	r3, r4, #20
 8014cde:	d0c5      	beq.n	8014c6c <f_lseek+0x30>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8014ce0:	9801      	ldr	r0, [sp, #4]
 8014ce2:	f7fe fef0 	bl	8013ac6 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d008      	beq.n	8014cfc <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 8014cea:	0b24      	lsrs	r4, r4, #12
 8014cec:	1820      	adds	r0, r4, r0
 8014cee:	e7be      	b.n	8014c6e <f_lseek+0x32>
					clst = create_chain(&fp->obj, 0);
 8014cf0:	0028      	movs	r0, r5
 8014cf2:	f7ff fb66 	bl	80143c2 <create_chain>
 8014cf6:	0001      	movs	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014cf8:	2801      	cmp	r0, #1
 8014cfa:	d104      	bne.n	8014d06 <f_lseek+0xca>
 8014cfc:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014cfe:	746e      	strb	r6, [r5, #17]
}
 8014d00:	0030      	movs	r0, r6
 8014d02:	b007      	add	sp, #28
 8014d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014d06:	1c43      	adds	r3, r0, #1
 8014d08:	d101      	bne.n	8014d0e <f_lseek+0xd2>
 8014d0a:	2601      	movs	r6, #1
 8014d0c:	e7f7      	b.n	8014cfe <f_lseek+0xc2>
					fp->obj.sclust = clst;
 8014d0e:	60a8      	str	r0, [r5, #8]
				fp->clust = clst;
 8014d10:	61a8      	str	r0, [r5, #24]
 8014d12:	e7d6      	b.n	8014cc2 <f_lseek+0x86>
					ofs -= bcs; fp->fptr += bcs;
 8014d14:	1be2      	subs	r2, r4, r7
 8014d16:	9202      	str	r2, [sp, #8]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014d18:	2202      	movs	r2, #2
					ofs -= bcs; fp->fptr += bcs;
 8014d1a:	19db      	adds	r3, r3, r7
 8014d1c:	616b      	str	r3, [r5, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014d1e:	7c2b      	ldrb	r3, [r5, #16]
 8014d20:	4213      	tst	r3, r2
 8014d22:	d006      	beq.n	8014d32 <f_lseek+0xf6>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014d24:	0028      	movs	r0, r5
 8014d26:	f7ff fb4c 	bl	80143c2 <create_chain>
 8014d2a:	1e04      	subs	r4, r0, #0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014d2c:	d105      	bne.n	8014d3a <f_lseek+0xfe>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014d2e:	0001      	movs	r1, r0
 8014d30:	e7d1      	b.n	8014cd6 <f_lseek+0x9a>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014d32:	6828      	ldr	r0, [r5, #0]
 8014d34:	f7ff fa6a 	bl	801420c <get_fat.isra.0>
 8014d38:	0004      	movs	r4, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014d3a:	1c63      	adds	r3, r4, #1
 8014d3c:	d0e5      	beq.n	8014d0a <f_lseek+0xce>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014d3e:	2c01      	cmp	r4, #1
 8014d40:	d9dc      	bls.n	8014cfc <f_lseek+0xc0>
 8014d42:	9b01      	ldr	r3, [sp, #4]
 8014d44:	695b      	ldr	r3, [r3, #20]
 8014d46:	42a3      	cmp	r3, r4
 8014d48:	d9d8      	bls.n	8014cfc <f_lseek+0xc0>
					fp->clust = clst;
 8014d4a:	0021      	movs	r1, r4
 8014d4c:	61ac      	str	r4, [r5, #24]
					ofs -= bcs; fp->fptr += bcs;
 8014d4e:	9c02      	ldr	r4, [sp, #8]
 8014d50:	e7be      	b.n	8014cd0 <f_lseek+0x94>

08014d52 <f_stat>:
{
 8014d52:	b530      	push	{r4, r5, lr}
 8014d54:	b08f      	sub	sp, #60	@ 0x3c
 8014d56:	9001      	str	r0, [sp, #4]
 8014d58:	000d      	movs	r5, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	a903      	add	r1, sp, #12
 8014d5e:	a801      	add	r0, sp, #4
 8014d60:	f7ff f8c2 	bl	8013ee8 <mount_volume>
 8014d64:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8014d66:	d118      	bne.n	8014d9a <f_stat+0x48>
		res = follow_path(&dj, path);	/* Follow the file path */
 8014d68:	9901      	ldr	r1, [sp, #4]
 8014d6a:	a803      	add	r0, sp, #12
 8014d6c:	f7ff fbfc 	bl	8014568 <follow_path>
 8014d70:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
 8014d72:	d112      	bne.n	8014d9a <f_stat+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014d74:	2337      	movs	r3, #55	@ 0x37
 8014d76:	446b      	add	r3, sp
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d7c:	d80c      	bhi.n	8014d98 <f_stat+0x46>
				if (fno) get_fileinfo(&dj, fno);
 8014d7e:	2d00      	cmp	r5, #0
 8014d80:	d007      	beq.n	8014d92 <f_stat+0x40>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8014d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	fno->fname[0] = 0;
 8014d84:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d003      	beq.n	8014d92 <f_stat+0x40>
 8014d8a:	0029      	movs	r1, r5
 8014d8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014d8e:	f7ff f9ff 	bl	8014190 <get_fileinfo.part.0.constprop.0.isra.0>
}
 8014d92:	0020      	movs	r0, r4
 8014d94:	b00f      	add	sp, #60	@ 0x3c
 8014d96:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8014d98:	2406      	movs	r4, #6
	if (fno && res != FR_OK) fno->fname[0] = 0;	/* Invalidate the file information if an error occured */
 8014d9a:	2d00      	cmp	r5, #0
 8014d9c:	d0f9      	beq.n	8014d92 <f_stat+0x40>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	726b      	strb	r3, [r5, #9]
 8014da2:	e7f6      	b.n	8014d92 <f_stat+0x40>

08014da4 <f_chmod>:
{
 8014da4:	b570      	push	{r4, r5, r6, lr}
 8014da6:	b08e      	sub	sp, #56	@ 0x38
 8014da8:	000c      	movs	r4, r1
 8014daa:	0016      	movs	r6, r2
 8014dac:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 8014dae:	2202      	movs	r2, #2
 8014db0:	a902      	add	r1, sp, #8
 8014db2:	a801      	add	r0, sp, #4
 8014db4:	f7ff f898 	bl	8013ee8 <mount_volume>
	if (res == FR_OK) {
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d11b      	bne.n	8014df4 <f_chmod+0x50>
		dj.obj.fs = fs;
 8014dbc:	9d02      	ldr	r5, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014dbe:	9901      	ldr	r1, [sp, #4]
 8014dc0:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 8014dc2:	9503      	str	r5, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014dc4:	f7ff fbd0 	bl	8014568 <follow_path>
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	d113      	bne.n	8014df4 <f_chmod+0x50>
 8014dcc:	2337      	movs	r3, #55	@ 0x37
 8014dce:	225f      	movs	r2, #95	@ 0x5f
 8014dd0:	446b      	add	r3, sp
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	3006      	adds	r0, #6
 8014dd6:	4393      	bics	r3, r2
 8014dd8:	d10c      	bne.n	8014df4 <f_chmod+0x50>
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8014dda:	2127      	movs	r1, #39	@ 0x27
 8014ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
				res = sync_fs(fs);
 8014dde:	0028      	movs	r0, r5
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8014de0:	7ad3      	ldrb	r3, [r2, #11]
 8014de2:	405c      	eors	r4, r3
 8014de4:	4034      	ands	r4, r6
 8014de6:	400c      	ands	r4, r1
 8014de8:	4063      	eors	r3, r4
 8014dea:	72d3      	strb	r3, [r2, #11]
				fs->wflag = 1;
 8014dec:	2301      	movs	r3, #1
 8014dee:	712b      	strb	r3, [r5, #4]
				res = sync_fs(fs);
 8014df0:	f7ff f81c 	bl	8013e2c <sync_fs>
}
 8014df4:	b00e      	add	sp, #56	@ 0x38
 8014df6:	bd70      	pop	{r4, r5, r6, pc}

08014df8 <f_setlabel>:
{
 8014df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dfa:	b095      	sub	sp, #84	@ 0x54
 8014dfc:	9001      	str	r0, [sp, #4]
	res = mount_volume(&label, &fs, FA_WRITE);
 8014dfe:	2202      	movs	r2, #2
 8014e00:	a902      	add	r1, sp, #8
 8014e02:	a801      	add	r0, sp, #4
 8014e04:	f7ff f870 	bl	8013ee8 <mount_volume>
 8014e08:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014e0a:	d153      	bne.n	8014eb4 <f_setlabel+0xbc>
		while ((UINT)*label >= ' ') {	/* Create volume label */
 8014e0c:	0025      	movs	r5, r4
		memset(dirvn, ' ', 11);
 8014e0e:	220b      	movs	r2, #11
 8014e10:	2120      	movs	r1, #32
 8014e12:	a803      	add	r0, sp, #12
 8014e14:	f005 f91c 	bl	801a050 <memset>
			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
 8014e18:	4e34      	ldr	r6, [pc, #208]	@ (8014eec <f_setlabel+0xf4>)
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 8014e1a:	4f35      	ldr	r7, [pc, #212]	@ (8014ef0 <f_setlabel+0xf8>)
		while ((UINT)*label >= ' ') {	/* Create volume label */
 8014e1c:	9b01      	ldr	r3, [sp, #4]
 8014e1e:	781a      	ldrb	r2, [r3, #0]
 8014e20:	2a1f      	cmp	r2, #31
 8014e22:	d828      	bhi.n	8014e76 <f_setlabel+0x7e>
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 8014e24:	466b      	mov	r3, sp
 8014e26:	7b1b      	ldrb	r3, [r3, #12]
 8014e28:	2be5      	cmp	r3, #229	@ 0xe5
 8014e2a:	d042      	beq.n	8014eb2 <f_setlabel+0xba>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 8014e2c:	2d00      	cmp	r5, #0
 8014e2e:	d006      	beq.n	8014e3e <f_setlabel+0x46>
 8014e30:	466a      	mov	r2, sp
 8014e32:	210c      	movs	r1, #12
 8014e34:	1e6b      	subs	r3, r5, #1
 8014e36:	1852      	adds	r2, r2, r1
 8014e38:	5cd2      	ldrb	r2, [r2, r3]
 8014e3a:	2a20      	cmp	r2, #32
 8014e3c:	d03d      	beq.n	8014eba <f_setlabel+0xc2>
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8014e3e:	9b02      	ldr	r3, [sp, #8]
	res = dir_sdi(&dj, 0);
 8014e40:	a809      	add	r0, sp, #36	@ 0x24
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8014e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e44:	2300      	movs	r3, #0
 8014e46:	930b      	str	r3, [sp, #44]	@ 0x2c
	res = dir_sdi(&dj, 0);
 8014e48:	f7ff fa44 	bl	80142d4 <dir_sdi.constprop.0>
 8014e4c:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8014e4e:	d131      	bne.n	8014eb4 <f_setlabel+0xbc>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8014e50:	2101      	movs	r1, #1
 8014e52:	a809      	add	r0, sp, #36	@ 0x24
 8014e54:	f7ff fc4a 	bl	80146ec <dir_read>
		if (res == FR_OK) {
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d130      	bne.n	8014ebe <f_setlabel+0xc6>
					memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
 8014e5c:	220b      	movs	r2, #11
 8014e5e:	9810      	ldr	r0, [sp, #64]	@ 0x40
				if (di != 0) {
 8014e60:	2d00      	cmp	r5, #0
 8014e62:	d13f      	bne.n	8014ee4 <f_setlabel+0xec>
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 8014e64:	23e5      	movs	r3, #229	@ 0xe5
 8014e66:	7003      	strb	r3, [r0, #0]
						fs->wflag = 1;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	9802      	ldr	r0, [sp, #8]
 8014e6c:	7103      	strb	r3, [r0, #4]
						res = sync_fs(fs);
 8014e6e:	f7fe ffdd 	bl	8013e2c <sync_fs>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8014e72:	0004      	movs	r4, r0
 8014e74:	e01e      	b.n	8014eb4 <f_setlabel+0xbc>
			wc = (BYTE)*label++;
 8014e76:	1c5a      	adds	r2, r3, #1
 8014e78:	9201      	str	r2, [sp, #4]
 8014e7a:	781c      	ldrb	r4, [r3, #0]
			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 8014e7c:	0023      	movs	r3, r4
 8014e7e:	3b61      	subs	r3, #97	@ 0x61
 8014e80:	2b19      	cmp	r3, #25
 8014e82:	d80f      	bhi.n	8014ea4 <f_setlabel+0xac>
 8014e84:	3c20      	subs	r4, #32
 8014e86:	b2a4      	uxth	r4, r4
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 8014e88:	0021      	movs	r1, r4
 8014e8a:	0038      	movs	r0, r7
 8014e8c:	f005 f8f5 	bl	801a07a <strchr>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d10e      	bne.n	8014eb2 <f_setlabel+0xba>
 8014e94:	2d0b      	cmp	r5, #11
 8014e96:	d00c      	beq.n	8014eb2 <f_setlabel+0xba>
			dirvn[di++] = (BYTE)wc;
 8014e98:	466b      	mov	r3, sp
 8014e9a:	220c      	movs	r2, #12
 8014e9c:	189b      	adds	r3, r3, r2
 8014e9e:	555c      	strb	r4, [r3, r5]
 8014ea0:	3501      	adds	r5, #1
 8014ea2:	e7bb      	b.n	8014e1c <f_setlabel+0x24>
			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
 8014ea4:	2c7f      	cmp	r4, #127	@ 0x7f
 8014ea6:	d902      	bls.n	8014eae <f_setlabel+0xb6>
 8014ea8:	1934      	adds	r4, r6, r4
 8014eaa:	3c80      	subs	r4, #128	@ 0x80
 8014eac:	7824      	ldrb	r4, [r4, #0]
			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 8014eae:	2c00      	cmp	r4, #0
 8014eb0:	d1ea      	bne.n	8014e88 <f_setlabel+0x90>
				LEAVE_FF(fs, FR_INVALID_NAME);
 8014eb2:	2406      	movs	r4, #6
}
 8014eb4:	0020      	movs	r0, r4
 8014eb6:	b015      	add	sp, #84	@ 0x54
 8014eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 8014eba:	001d      	movs	r5, r3
 8014ebc:	e7b6      	b.n	8014e2c <f_setlabel+0x34>
			if (res == FR_NO_FILE) {
 8014ebe:	2804      	cmp	r0, #4
 8014ec0:	d1d7      	bne.n	8014e72 <f_setlabel+0x7a>
				if (di != 0) {	/* Create a volume label entry */
 8014ec2:	2d00      	cmp	r5, #0
 8014ec4:	d0f6      	beq.n	8014eb4 <f_setlabel+0xbc>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 8014ec6:	a809      	add	r0, sp, #36	@ 0x24
 8014ec8:	f7ff fc42 	bl	8014750 <dir_alloc.constprop.0>
 8014ecc:	1e04      	subs	r4, r0, #0
					if (res == FR_OK) {
 8014ece:	d1f1      	bne.n	8014eb4 <f_setlabel+0xbc>
						memset(dj.dir, 0, SZDIRE);	/* Clean the entry */
 8014ed0:	2220      	movs	r2, #32
 8014ed2:	0021      	movs	r1, r4
 8014ed4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8014ed6:	f005 f8bb 	bl	801a050 <memset>
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 8014eda:	2208      	movs	r2, #8
 8014edc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ede:	72da      	strb	r2, [r3, #11]
							memcpy(dj.dir, dirvn, 11);
 8014ee0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8014ee2:	3203      	adds	r2, #3
 8014ee4:	a903      	add	r1, sp, #12
 8014ee6:	f005 f97d 	bl	801a1e4 <memcpy>
 8014eea:	e7bd      	b.n	8014e68 <f_setlabel+0x70>
 8014eec:	0801fe8a 	.word	0x0801fe8a
 8014ef0:	0801fe78 	.word	0x0801fe78

08014ef4 <f_mkfs>:
{
 8014ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ef6:	b09b      	sub	sp, #108	@ 0x6c
 8014ef8:	9013      	str	r0, [sp, #76]	@ 0x4c
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 8014efa:	a813      	add	r0, sp, #76	@ 0x4c
{
 8014efc:	930e      	str	r3, [sp, #56]	@ 0x38
 8014efe:	000e      	movs	r6, r1
 8014f00:	0014      	movs	r4, r2
	vol = get_ldnumber(&path);					/* Get logical drive number to be formatted */
 8014f02:	f7fe fdec 	bl	8013ade <get_ldnumber>
 8014f06:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8014f08:	200b      	movs	r0, #11
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	db6b      	blt.n	8014fe6 <f_mkfs+0xf2>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8014f0e:	4ab7      	ldr	r2, [pc, #732]	@ (80151ec <f_mkfs+0x2f8>)
 8014f10:	0099      	lsls	r1, r3, #2
 8014f12:	588a      	ldr	r2, [r1, r2]
 8014f14:	2a00      	cmp	r2, #0
 8014f16:	d001      	beq.n	8014f1c <f_mkfs+0x28>
 8014f18:	2100      	movs	r1, #0
 8014f1a:	7011      	strb	r1, [r2, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8014f1c:	b2db      	uxtb	r3, r3
	ds = disk_initialize(pdrv);
 8014f1e:	0018      	movs	r0, r3
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8014f20:	9302      	str	r3, [sp, #8]
	ds = disk_initialize(pdrv);
 8014f22:	f7fe fd5f 	bl	80139e4 <disk_initialize>
 8014f26:	0003      	movs	r3, r0
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8014f28:	2003      	movs	r0, #3
 8014f2a:	07da      	lsls	r2, r3, #31
 8014f2c:	d45b      	bmi.n	8014fe6 <f_mkfs+0xf2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014f2e:	3007      	adds	r0, #7
 8014f30:	075b      	lsls	r3, r3, #29
 8014f32:	d458      	bmi.n	8014fe6 <f_mkfs+0xf2>
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8014f34:	2e00      	cmp	r6, #0
 8014f36:	d100      	bne.n	8014f3a <f_mkfs+0x46>
 8014f38:	4ead      	ldr	r6, [pc, #692]	@ (80151f0 <f_mkfs+0x2fc>)
	sz_blk = opt->align;
 8014f3a:	6873      	ldr	r3, [r6, #4]
 8014f3c:	9315      	str	r3, [sp, #84]	@ 0x54
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d104      	bne.n	8014f4c <f_mkfs+0x58>
 8014f42:	2103      	movs	r1, #3
 8014f44:	9802      	ldr	r0, [sp, #8]
 8014f46:	aa15      	add	r2, sp, #84	@ 0x54
 8014f48:	f7fe fd92 	bl	8013a70 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8014f4c:	2180      	movs	r1, #128	@ 0x80
 8014f4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014f50:	0209      	lsls	r1, r1, #8
 8014f52:	1e5a      	subs	r2, r3, #1
 8014f54:	428a      	cmp	r2, r1
 8014f56:	d201      	bcs.n	8014f5c <f_mkfs+0x68>
 8014f58:	421a      	tst	r2, r3
 8014f5a:	d001      	beq.n	8014f60 <f_mkfs+0x6c>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	9315      	str	r3, [sp, #84]	@ 0x54
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8014f60:	7873      	ldrb	r3, [r6, #1]
 8014f62:	9307      	str	r3, [sp, #28]
 8014f64:	3b01      	subs	r3, #1
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	d901      	bls.n	8014f6e <f_mkfs+0x7a>
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	9307      	str	r3, [sp, #28]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8014f6e:	68b3      	ldr	r3, [r6, #8]
 8014f70:	9308      	str	r3, [sp, #32]
 8014f72:	1e5a      	subs	r2, r3, #1
 8014f74:	2380      	movs	r3, #128	@ 0x80
 8014f76:	021b      	lsls	r3, r3, #8
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d202      	bcs.n	8014f82 <f_mkfs+0x8e>
 8014f7c:	9b08      	ldr	r3, [sp, #32]
 8014f7e:	065b      	lsls	r3, r3, #25
 8014f80:	d002      	beq.n	8014f88 <f_mkfs+0x94>
 8014f82:	2380      	movs	r3, #128	@ 0x80
 8014f84:	009b      	lsls	r3, r3, #2
 8014f86:	9308      	str	r3, [sp, #32]
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8014f88:	2380      	movs	r3, #128	@ 0x80
 8014f8a:	68f5      	ldr	r5, [r6, #12]
 8014f8c:	045b      	lsls	r3, r3, #17
 8014f8e:	429d      	cmp	r5, r3
 8014f90:	d82b      	bhi.n	8014fea <f_mkfs+0xf6>
 8014f92:	1e6b      	subs	r3, r5, #1
 8014f94:	402b      	ands	r3, r5
 8014f96:	425a      	negs	r2, r3
 8014f98:	4153      	adcs	r3, r2
 8014f9a:	425b      	negs	r3, r3
 8014f9c:	401d      	ands	r5, r3
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8014f9e:	2380      	movs	r3, #128	@ 0x80
 8014fa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014fa2:	2011      	movs	r0, #17
 8014fa4:	015b      	lsls	r3, r3, #5
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d31d      	bcc.n	8014fe6 <f_mkfs+0xf2>
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8014faa:	2c00      	cmp	r4, #0
 8014fac:	d01b      	beq.n	8014fe6 <f_mkfs+0xf2>
	b_vol = sz_vol = 0;
 8014fae:	2300      	movs	r3, #0
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8014fb0:	2101      	movs	r1, #1
 8014fb2:	9802      	ldr	r0, [sp, #8]
 8014fb4:	aa16      	add	r2, sp, #88	@ 0x58
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8014fb6:	7836      	ldrb	r6, [r6, #0]
	b_vol = sz_vol = 0;
 8014fb8:	9316      	str	r3, [sp, #88]	@ 0x58
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8014fba:	f7fe fd59 	bl	8013a70 <disk_ioctl>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d000      	beq.n	8014fc4 <f_mkfs+0xd0>
 8014fc2:	e309      	b.n	80155d8 <f_mkfs+0x6e4>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8014fc4:	2308      	movs	r3, #8
 8014fc6:	0032      	movs	r2, r6
 8014fc8:	401a      	ands	r2, r3
 8014fca:	920c      	str	r2, [sp, #48]	@ 0x30
 8014fcc:	421e      	tst	r6, r3
 8014fce:	d10e      	bne.n	8014fee <f_mkfs+0xfa>
				if (sz_vol > N_SEC_TRACK) {
 8014fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d906      	bls.n	8014fe4 <f_mkfs+0xf0>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8014fda:	2301      	movs	r3, #1
 8014fdc:	9309      	str	r3, [sp, #36]	@ 0x24
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
 8014fde:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014fe0:	2b7f      	cmp	r3, #127	@ 0x7f
 8014fe2:	d806      	bhi.n	8014ff2 <f_mkfs+0xfe>
 8014fe4:	200e      	movs	r0, #14
}
 8014fe6:	b01b      	add	sp, #108	@ 0x6c
 8014fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8014fea:	2500      	movs	r5, #0
 8014fec:	e7d7      	b.n	8014f9e <f_mkfs+0xaa>
	b_vol = sz_vol = 0;
 8014fee:	9009      	str	r0, [sp, #36]	@ 0x24
 8014ff0:	e7f5      	b.n	8014fde <f_mkfs+0xea>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8014ff2:	2381      	movs	r3, #129	@ 0x81
 8014ff4:	2780      	movs	r7, #128	@ 0x80
 8014ff6:	031b      	lsls	r3, r3, #12
 8014ff8:	429d      	cmp	r5, r3
 8014ffa:	d200      	bcs.n	8014ffe <f_mkfs+0x10a>
	sz_au /= ss;	/* Byte --> Sector */
 8014ffc:	0b2f      	lsrs	r7, r5, #12
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8014ffe:	2502      	movs	r5, #2
 8015000:	0033      	movs	r3, r6
 8015002:	402b      	ands	r3, r5
 8015004:	930d      	str	r3, [sp, #52]	@ 0x34
 8015006:	2301      	movs	r3, #1
 8015008:	4033      	ands	r3, r6
 801500a:	422e      	tst	r6, r5
 801500c:	d023      	beq.n	8015056 <f_mkfs+0x162>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 801500e:	3501      	adds	r5, #1
 8015010:	1aed      	subs	r5, r5, r3
 8015012:	b2ed      	uxtb	r5, r5
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015014:	f7fe fd40 	bl	8013a98 <get_fattime>
 8015018:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801501a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801501c:	9303      	str	r3, [sp, #12]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 801501e:	9b08      	ldr	r3, [sp, #32]
 8015020:	015b      	lsls	r3, r3, #5
 8015022:	0b1b      	lsrs	r3, r3, #12
 8015024:	9311      	str	r3, [sp, #68]	@ 0x44
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8015026:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015028:	1e5a      	subs	r2, r3, #1
 801502a:	425b      	negs	r3, r3
 801502c:	9212      	str	r2, [sp, #72]	@ 0x48
 801502e:	9310      	str	r3, [sp, #64]	@ 0x40
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8015030:	2d03      	cmp	r5, #3
 8015032:	d000      	beq.n	8015036 <f_mkfs+0x142>
 8015034:	e091      	b.n	801515a <f_mkfs+0x266>
				if (pau == 0) {	/* AU auto-selection */
 8015036:	970a      	str	r7, [sp, #40]	@ 0x28
 8015038:	2f00      	cmp	r7, #0
 801503a:	d112      	bne.n	8015062 <f_mkfs+0x16e>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801503c:	2701      	movs	r7, #1
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801503e:	9b03      	ldr	r3, [sp, #12]
 8015040:	4a6c      	ldr	r2, [pc, #432]	@ (80151f4 <f_mkfs+0x300>)
 8015042:	0c59      	lsrs	r1, r3, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015044:	8813      	ldrh	r3, [r2, #0]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d003      	beq.n	8015052 <f_mkfs+0x15e>
 801504a:	3202      	adds	r2, #2
 801504c:	428b      	cmp	r3, r1
 801504e:	d956      	bls.n	80150fe <f_mkfs+0x20a>
 8015050:	2300      	movs	r3, #0
 8015052:	930a      	str	r3, [sp, #40]	@ 0x28
 8015054:	e005      	b.n	8015062 <f_mkfs+0x16e>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8015056:	2013      	movs	r0, #19
 8015058:	2b00      	cmp	r3, #0
 801505a:	d1db      	bne.n	8015014 <f_mkfs+0x120>
 801505c:	e7c3      	b.n	8014fe6 <f_mkfs+0xf2>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801505e:	087f      	lsrs	r7, r7, #1
 8015060:	970a      	str	r7, [sp, #40]	@ 0x28
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8015062:	0039      	movs	r1, r7
 8015064:	9803      	ldr	r0, [sp, #12]
 8015066:	f7eb f87f 	bl	8000168 <__udivsi3>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801506a:	4a63      	ldr	r2, [pc, #396]	@ (80151f8 <f_mkfs+0x304>)
 801506c:	0083      	lsls	r3, r0, #2
 801506e:	189b      	adds	r3, r3, r2
 8015070:	0b1b      	lsrs	r3, r3, #12
 8015072:	9306      	str	r3, [sp, #24]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8015074:	4b61      	ldr	r3, [pc, #388]	@ (80151fc <f_mkfs+0x308>)
 8015076:	18c0      	adds	r0, r0, r3
 8015078:	4b61      	ldr	r3, [pc, #388]	@ (8015200 <f_mkfs+0x30c>)
 801507a:	4298      	cmp	r0, r3
 801507c:	d8b2      	bhi.n	8014fe4 <f_mkfs+0xf0>
				sz_dir = 0;		/* No static directory */
 801507e:	2300      	movs	r3, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 8015080:	2520      	movs	r5, #32
				sz_dir = 0;		/* No static directory */
 8015082:	9305      	str	r3, [sp, #20]
 8015084:	3303      	adds	r3, #3
 8015086:	9301      	str	r3, [sp, #4]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 801508a:	9a06      	ldr	r2, [sp, #24]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801508c:	18eb      	adds	r3, r5, r3
 801508e:	9304      	str	r3, [sp, #16]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8015090:	9b07      	ldr	r3, [sp, #28]
 8015092:	4353      	muls	r3, r2
 8015094:	9a04      	ldr	r2, [sp, #16]
 8015096:	189b      	adds	r3, r3, r2
 8015098:	9a05      	ldr	r2, [sp, #20]
 801509a:	189b      	adds	r3, r3, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 801509c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 801509e:	930b      	str	r3, [sp, #44]	@ 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 80150a0:	189e      	adds	r6, r3, r2
 80150a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80150a4:	401e      	ands	r6, r3
 80150a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80150a8:	1af6      	subs	r6, r6, r3
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 80150aa:	9b01      	ldr	r3, [sp, #4]
 80150ac:	2b03      	cmp	r3, #3
 80150ae:	d131      	bne.n	8015114 <f_mkfs+0x220>
				sz_rsv += n; b_fat += n;
 80150b0:	9b04      	ldr	r3, [sp, #16]
 80150b2:	19ad      	adds	r5, r5, r6
 80150b4:	199b      	adds	r3, r3, r6
 80150b6:	9304      	str	r3, [sp, #16]
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 80150b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150ba:	013b      	lsls	r3, r7, #4
 80150bc:	1a9b      	subs	r3, r3, r2
 80150be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80150c0:	189b      	adds	r3, r3, r2
 80150c2:	9a03      	ldr	r2, [sp, #12]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d200      	bcs.n	80150ca <f_mkfs+0x1d6>
 80150c8:	e78c      	b.n	8014fe4 <f_mkfs+0xf0>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80150ca:	0013      	movs	r3, r2
 80150cc:	9a05      	ldr	r2, [sp, #20]
 80150ce:	0039      	movs	r1, r7
 80150d0:	1a98      	subs	r0, r3, r2
 80150d2:	9a06      	ldr	r2, [sp, #24]
 80150d4:	9b07      	ldr	r3, [sp, #28]
 80150d6:	1b40      	subs	r0, r0, r5
 80150d8:	4353      	muls	r3, r2
 80150da:	1ac0      	subs	r0, r0, r3
 80150dc:	f7eb f844 	bl	8000168 <__udivsi3>
			if (fsty == FS_FAT32) {
 80150e0:	9b01      	ldr	r3, [sp, #4]
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 80150e2:	0006      	movs	r6, r0
			if (fsty == FS_FAT32) {
 80150e4:	2b03      	cmp	r3, #3
 80150e6:	d128      	bne.n	801513a <f_mkfs+0x246>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 80150e8:	4b46      	ldr	r3, [pc, #280]	@ (8015204 <f_mkfs+0x310>)
 80150ea:	4298      	cmp	r0, r3
 80150ec:	d900      	bls.n	80150f0 <f_mkfs+0x1fc>
 80150ee:	e208      	b.n	8015502 <f_mkfs+0x60e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80150f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d000      	beq.n	80150f8 <f_mkfs+0x204>
 80150f6:	e775      	b.n	8014fe4 <f_mkfs+0xf0>
 80150f8:	2f01      	cmp	r7, #1
 80150fa:	d8b0      	bhi.n	801505e <f_mkfs+0x16a>
 80150fc:	e772      	b.n	8014fe4 <f_mkfs+0xf0>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80150fe:	007f      	lsls	r7, r7, #1
 8015100:	e7a0      	b.n	8015044 <f_mkfs+0x150>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015102:	006d      	lsls	r5, r5, #1
 8015104:	e02f      	b.n	8015166 <f_mkfs+0x272>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015106:	2003      	movs	r0, #3
 8015108:	4358      	muls	r0, r3
 801510a:	3001      	adds	r0, #1
 801510c:	0840      	lsrs	r0, r0, #1
					fsty = FS_FAT12;
 801510e:	2301      	movs	r3, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015110:	3003      	adds	r0, #3
 8015112:	e039      	b.n	8015188 <f_mkfs+0x294>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8015114:	0030      	movs	r0, r6
 8015116:	9907      	ldr	r1, [sp, #28]
 8015118:	f7eb f8ac 	bl	8000274 <__aeabi_uidivmod>
 801511c:	2900      	cmp	r1, #0
 801511e:	d004      	beq.n	801512a <f_mkfs+0x236>
					n--; sz_rsv++; b_fat++;
 8015120:	9b04      	ldr	r3, [sp, #16]
 8015122:	3e01      	subs	r6, #1
 8015124:	3301      	adds	r3, #1
 8015126:	3501      	adds	r5, #1
 8015128:	9304      	str	r3, [sp, #16]
				sz_fat += n / n_fat;
 801512a:	0030      	movs	r0, r6
 801512c:	9907      	ldr	r1, [sp, #28]
 801512e:	f7eb f81b 	bl	8000168 <__udivsi3>
 8015132:	9b06      	ldr	r3, [sp, #24]
 8015134:	181b      	adds	r3, r3, r0
 8015136:	9306      	str	r3, [sp, #24]
 8015138:	e7be      	b.n	80150b8 <f_mkfs+0x1c4>
			if (fsty == FS_FAT16) {
 801513a:	9b01      	ldr	r3, [sp, #4]
 801513c:	2b02      	cmp	r3, #2
 801513e:	d000      	beq.n	8015142 <f_mkfs+0x24e>
 8015140:	e1d9      	b.n	80154f6 <f_mkfs+0x602>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015142:	4b30      	ldr	r3, [pc, #192]	@ (8015204 <f_mkfs+0x310>)
 8015144:	4298      	cmp	r0, r3
 8015146:	d92a      	bls.n	801519e <f_mkfs+0x2aa>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8015148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801514a:	2b00      	cmp	r3, #0
 801514c:	d000      	beq.n	8015150 <f_mkfs+0x25c>
 801514e:	e1c3      	b.n	80154d8 <f_mkfs+0x5e4>
 8015150:	007d      	lsls	r5, r7, #1
 8015152:	2d40      	cmp	r5, #64	@ 0x40
 8015154:	d900      	bls.n	8015158 <f_mkfs+0x264>
 8015156:	e1c5      	b.n	80154e4 <f_mkfs+0x5f0>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8015158:	002f      	movs	r7, r5
			pau = sz_au;
 801515a:	1e3d      	subs	r5, r7, #0
				if (pau == 0) {	/* au auto-selection */
 801515c:	d109      	bne.n	8015172 <f_mkfs+0x27e>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801515e:	2501      	movs	r5, #1
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015160:	9b03      	ldr	r3, [sp, #12]
 8015162:	0b19      	lsrs	r1, r3, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015164:	4b28      	ldr	r3, [pc, #160]	@ (8015208 <f_mkfs+0x314>)
 8015166:	881a      	ldrh	r2, [r3, #0]
 8015168:	2a00      	cmp	r2, #0
 801516a:	d002      	beq.n	8015172 <f_mkfs+0x27e>
 801516c:	3302      	adds	r3, #2
 801516e:	428a      	cmp	r2, r1
 8015170:	d9c7      	bls.n	8015102 <f_mkfs+0x20e>
				n_clst = (DWORD)sz_vol / pau;
 8015172:	0029      	movs	r1, r5
 8015174:	9803      	ldr	r0, [sp, #12]
 8015176:	f7ea fff7 	bl	8000168 <__udivsi3>
				if (n_clst > MAX_FAT12) {
 801517a:	4a24      	ldr	r2, [pc, #144]	@ (801520c <f_mkfs+0x318>)
				n_clst = (DWORD)sz_vol / pau;
 801517c:	0003      	movs	r3, r0
				if (n_clst > MAX_FAT12) {
 801517e:	4290      	cmp	r0, r2
 8015180:	d9c1      	bls.n	8015106 <f_mkfs+0x212>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015182:	3302      	adds	r3, #2
 8015184:	0058      	lsls	r0, r3, #1
 8015186:	2302      	movs	r3, #2
					fsty = FS_FAT12;
 8015188:	9301      	str	r3, [sp, #4]
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801518a:	4b21      	ldr	r3, [pc, #132]	@ (8015210 <f_mkfs+0x31c>)
 801518c:	970a      	str	r7, [sp, #40]	@ 0x28
 801518e:	18c0      	adds	r0, r0, r3
 8015190:	0b03      	lsrs	r3, r0, #12
 8015192:	9306      	str	r3, [sp, #24]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8015194:	9b11      	ldr	r3, [sp, #68]	@ 0x44
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8015196:	002f      	movs	r7, r5
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
 8015198:	9305      	str	r3, [sp, #20]
				sz_rsv = 1;						/* Number of reserved sectors */
 801519a:	2501      	movs	r5, #1
 801519c:	e774      	b.n	8015088 <f_mkfs+0x194>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801519e:	4b1b      	ldr	r3, [pc, #108]	@ (801520c <f_mkfs+0x318>)
 80151a0:	4298      	cmp	r0, r3
 80151a2:	d900      	bls.n	80151a6 <f_mkfs+0x2b2>
 80151a4:	e1ad      	b.n	8015502 <f_mkfs+0x60e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80151a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d000      	beq.n	80151ae <f_mkfs+0x2ba>
 80151ac:	e71a      	b.n	8014fe4 <f_mkfs+0xf0>
 80151ae:	007f      	lsls	r7, r7, #1
 80151b0:	2f80      	cmp	r7, #128	@ 0x80
 80151b2:	d9d2      	bls.n	801515a <f_mkfs+0x266>
 80151b4:	e716      	b.n	8014fe4 <f_mkfs+0xf0>
			st_32(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80151b6:	0020      	movs	r0, r4
 80151b8:	9903      	ldr	r1, [sp, #12]
 80151ba:	3020      	adds	r0, #32
 80151bc:	f7fe fc7b 	bl	8013ab6 <st_32>
 80151c0:	e1c9      	b.n	8015556 <f_mkfs+0x662>
			st_32(buf + BS_VolID, vsn);					/* VSN */
 80151c2:	3027      	adds	r0, #39	@ 0x27
 80151c4:	f7fe fc77 	bl	8013ab6 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 80151c8:	9b06      	ldr	r3, [sp, #24]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80151ca:	2280      	movs	r2, #128	@ 0x80
	*ptr++ = (BYTE)val; val >>= 8;
 80151cc:	75a3      	strb	r3, [r4, #22]
 80151ce:	466b      	mov	r3, sp
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80151d0:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80151d2:	8b1b      	ldrh	r3, [r3, #24]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80151d4:	490f      	ldr	r1, [pc, #60]	@ (8015214 <f_mkfs+0x320>)
	*ptr++ = (BYTE)val; val >>= 8;
 80151d6:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80151d8:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80151da:	1d63      	adds	r3, r4, #5
 80151dc:	77da      	strb	r2, [r3, #31]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80151de:	3a57      	subs	r2, #87	@ 0x57
 80151e0:	1de3      	adds	r3, r4, #7
 80151e2:	77da      	strb	r2, [r3, #31]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80151e4:	302b      	adds	r0, #43	@ 0x2b
 80151e6:	3a16      	subs	r2, #22
 80151e8:	e1e2      	b.n	80155b0 <f_mkfs+0x6bc>
 80151ea:	46c0      	nop			@ (mov r8, r8)
 80151ec:	20003100 	.word	0x20003100
 80151f0:	0801fe68 	.word	0x0801fe68
 80151f4:	0801fe5a 	.word	0x0801fe5a
 80151f8:	00001007 	.word	0x00001007
 80151fc:	ffff000a 	.word	0xffff000a
 8015200:	0ffeffff 	.word	0x0ffeffff
 8015204:	0000fff5 	.word	0x0000fff5
 8015208:	0801fe4c 	.word	0x0801fe4c
 801520c:	00000ff5 	.word	0x00000ff5
 8015210:	00000fff 	.word	0x00000fff
 8015214:	0801f993 	.word	0x0801f993
		if (fsty == FS_FAT32) {
 8015218:	9b01      	ldr	r3, [sp, #4]
 801521a:	2b03      	cmp	r3, #3
 801521c:	d13d      	bne.n	801529a <f_mkfs+0x3a6>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801521e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015220:	0021      	movs	r1, r4
 8015222:	1d9a      	adds	r2, r3, #6
 8015224:	9802      	ldr	r0, [sp, #8]
 8015226:	2301      	movs	r3, #1
 8015228:	f7fe fbfd 	bl	8013a26 <disk_write>
			memset(buf, 0, ss);
 801522c:	2280      	movs	r2, #128	@ 0x80
 801522e:	9903      	ldr	r1, [sp, #12]
 8015230:	0152      	lsls	r2, r2, #5
 8015232:	0020      	movs	r0, r4
 8015234:	f004 ff0c 	bl	801a050 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8015238:	2352      	movs	r3, #82	@ 0x52
 801523a:	20f2      	movs	r0, #242	@ 0xf2
	*ptr++ = (BYTE)val;
 801523c:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 801523e:	2172      	movs	r1, #114	@ 0x72
 8015240:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015242:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8015244:	0040      	lsls	r0, r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8015246:	330f      	adds	r3, #15
 8015248:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 801524a:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 801524c:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 801524e:	20e6      	movs	r0, #230	@ 0xe6
 8015250:	30ff      	adds	r0, #255	@ 0xff
 8015252:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015254:	3175      	adds	r1, #117	@ 0x75
 8015256:	31ff      	adds	r1, #255	@ 0xff
 8015258:	5462      	strb	r2, [r4, r1]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 801525a:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val;
 801525c:	22e8      	movs	r2, #232	@ 0xe8
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 801525e:	30e9      	adds	r0, #233	@ 0xe9
	*ptr++ = (BYTE)val;
 8015260:	32ff      	adds	r2, #255	@ 0xff
 8015262:	54a3      	strb	r3, [r4, r2]
			st_32(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015264:	1e71      	subs	r1, r6, #1
 8015266:	30ff      	adds	r0, #255	@ 0xff
 8015268:	f7fe fc25 	bl	8013ab6 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 801526c:	23f6      	movs	r3, #246	@ 0xf6
 801526e:	2202      	movs	r2, #2
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8015274:	3312      	adds	r3, #18
 8015276:	3253      	adds	r2, #83	@ 0x53
 8015278:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 801527a:	4bd8      	ldr	r3, [pc, #864]	@ (80155dc <f_mkfs+0x6e8>)
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 801527c:	0021      	movs	r1, r4
	*ptr++ = (BYTE)val;
 801527e:	54e5      	strb	r5, [r4, r3]
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015282:	9802      	ldr	r0, [sp, #8]
 8015284:	1dda      	adds	r2, r3, #7
 8015286:	2301      	movs	r3, #1
 8015288:	f7fe fbcd 	bl	8013a26 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 801528c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801528e:	0021      	movs	r1, r4
 8015290:	1c5a      	adds	r2, r3, #1
 8015292:	9802      	ldr	r0, [sp, #8]
 8015294:	2301      	movs	r3, #1
 8015296:	f7fe fbc6 	bl	8013a26 <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 801529a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		memset(buf, 0, sz_buf * ss);
 801529c:	2100      	movs	r1, #0
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 801529e:	0b1d      	lsrs	r5, r3, #12
		memset(buf, 0, sz_buf * ss);
 80152a0:	032a      	lsls	r2, r5, #12
 80152a2:	0020      	movs	r0, r4
 80152a4:	f004 fed4 	bl	801a050 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80152a8:	9b01      	ldr	r3, [sp, #4]
 80152aa:	3b01      	subs	r3, #1
 80152ac:	1e5a      	subs	r2, r3, #1
 80152ae:	4193      	sbcs	r3, r2
 80152b0:	4acb      	ldr	r2, [pc, #812]	@ (80155e0 <f_mkfs+0x6ec>)
 80152b2:	425b      	negs	r3, r3
 80152b4:	4694      	mov	ip, r2
 80152b6:	0e1b      	lsrs	r3, r3, #24
 80152b8:	061b      	lsls	r3, r3, #24
 80152ba:	4463      	add	r3, ip
 80152bc:	9308      	str	r3, [sp, #32]
 80152be:	2300      	movs	r3, #0
 80152c0:	9309      	str	r3, [sp, #36]	@ 0x24
			if (fsty == FS_FAT32) {
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	2b03      	cmp	r3, #3
 80152c6:	d000      	beq.n	80152ca <f_mkfs+0x3d6>
 80152c8:	e0b1      	b.n	801542e <f_mkfs+0x53a>
	*ptr++ = (BYTE)val; val >>= 8;
 80152ca:	33f5      	adds	r3, #245	@ 0xf5
 80152cc:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80152ce:	3307      	adds	r3, #7
 80152d0:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80152d2:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80152d4:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80152d6:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80152d8:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 80152da:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 80152dc:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 80152de:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80152e0:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 80152e2:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 80152e4:	3bf0      	subs	r3, #240	@ 0xf0
 80152e6:	72e3      	strb	r3, [r4, #11]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80152e8:	9e06      	ldr	r6, [sp, #24]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80152ea:	9603      	str	r6, [sp, #12]
 80152ec:	42ae      	cmp	r6, r5
 80152ee:	d900      	bls.n	80152f2 <f_mkfs+0x3fe>
 80152f0:	9503      	str	r5, [sp, #12]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80152f2:	0021      	movs	r1, r4
 80152f4:	9b03      	ldr	r3, [sp, #12]
 80152f6:	9a04      	ldr	r2, [sp, #16]
 80152f8:	9802      	ldr	r0, [sp, #8]
 80152fa:	f7fe fb94 	bl	8013a26 <disk_write>
 80152fe:	1e01      	subs	r1, r0, #0
 8015300:	d000      	beq.n	8015304 <f_mkfs+0x410>
 8015302:	e169      	b.n	80155d8 <f_mkfs+0x6e4>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
 8015304:	2280      	movs	r2, #128	@ 0x80
 8015306:	0020      	movs	r0, r4
 8015308:	0152      	lsls	r2, r2, #5
 801530a:	f004 fea1 	bl	801a050 <memset>
				sect += n; nsect -= n;
 801530e:	9a03      	ldr	r2, [sp, #12]
 8015310:	9b04      	ldr	r3, [sp, #16]
 8015312:	4694      	mov	ip, r2
 8015314:	4463      	add	r3, ip
 8015316:	9304      	str	r3, [sp, #16]
 8015318:	1ab6      	subs	r6, r6, r2
			} while (nsect);
 801531a:	d1e6      	bne.n	80152ea <f_mkfs+0x3f6>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 801531c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801531e:	425a      	negs	r2, r3
 8015320:	4153      	adcs	r3, r2
 8015322:	2201      	movs	r2, #1
 8015324:	b2db      	uxtb	r3, r3
 8015326:	9209      	str	r2, [sp, #36]	@ 0x24
 8015328:	425a      	negs	r2, r3
 801532a:	4153      	adcs	r3, r2
 801532c:	9a07      	ldr	r2, [sp, #28]
 801532e:	3301      	adds	r3, #1
 8015330:	429a      	cmp	r2, r3
 8015332:	d8c6      	bhi.n	80152c2 <f_mkfs+0x3ce>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015334:	9b01      	ldr	r3, [sp, #4]
 8015336:	2b03      	cmp	r3, #3
 8015338:	d100      	bne.n	801533c <f_mkfs+0x448>
 801533a:	9705      	str	r7, [sp, #20]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801533c:	9e05      	ldr	r6, [sp, #20]
 801533e:	42ae      	cmp	r6, r5
 8015340:	d900      	bls.n	8015344 <f_mkfs+0x450>
 8015342:	002e      	movs	r6, r5
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8015344:	0033      	movs	r3, r6
 8015346:	0021      	movs	r1, r4
 8015348:	9a04      	ldr	r2, [sp, #16]
 801534a:	9802      	ldr	r0, [sp, #8]
 801534c:	f7fe fb6b 	bl	8013a26 <disk_write>
 8015350:	2800      	cmp	r0, #0
 8015352:	d000      	beq.n	8015356 <f_mkfs+0x462>
 8015354:	e140      	b.n	80155d8 <f_mkfs+0x6e4>
			sect += n; nsect -= n;
 8015356:	9b04      	ldr	r3, [sp, #16]
 8015358:	199b      	adds	r3, r3, r6
 801535a:	9304      	str	r3, [sp, #16]
 801535c:	9b05      	ldr	r3, [sp, #20]
 801535e:	1b9b      	subs	r3, r3, r6
 8015360:	9305      	str	r3, [sp, #20]
		} while (nsect);
 8015362:	d1eb      	bne.n	801533c <f_mkfs+0x448>
		sys = 0x0C;		/* FAT32X */
 8015364:	330c      	adds	r3, #12
 8015366:	9304      	str	r3, [sp, #16]
	} else if (fsty == FS_FAT32) {
 8015368:	9b01      	ldr	r3, [sp, #4]
 801536a:	2b03      	cmp	r3, #3
 801536c:	d00d      	beq.n	801538a <f_mkfs+0x496>
	} else if (sz_vol >= 0x10000) {
 801536e:	2380      	movs	r3, #128	@ 0x80
		sys = 0x06;		/* FAT12/16 (large) */
 8015370:	2106      	movs	r1, #6
	} else if (sz_vol >= 0x10000) {
 8015372:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015374:	025b      	lsls	r3, r3, #9
		sys = 0x06;		/* FAT12/16 (large) */
 8015376:	9104      	str	r1, [sp, #16]
	} else if (sz_vol >= 0x10000) {
 8015378:	429a      	cmp	r2, r3
 801537a:	d206      	bcs.n	801538a <f_mkfs+0x496>
		sys = 0x01;		/* FAT12 */
 801537c:	2301      	movs	r3, #1
 801537e:	9304      	str	r3, [sp, #16]
	} else if (fsty == FS_FAT16) {
 8015380:	9b01      	ldr	r3, [sp, #4]
 8015382:	2b02      	cmp	r3, #2
 8015384:	d101      	bne.n	801538a <f_mkfs+0x496>
		sys = 0x04;		/* FAT16 */
 8015386:	3302      	adds	r3, #2
 8015388:	9304      	str	r3, [sp, #16]
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 801538a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801538c:	2b00      	cmp	r3, #0
 801538e:	d145      	bne.n	801541c <f_mkfs+0x528>
			lba[0] = sz_vol; lba[1] = 0;
 8015390:	9b16      	ldr	r3, [sp, #88]	@ 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015392:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
 8015394:	9318      	str	r3, [sp, #96]	@ 0x60
 8015396:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8015398:	9802      	ldr	r0, [sp, #8]
 801539a:	aa17      	add	r2, sp, #92	@ 0x5c
			lba[0] = sz_vol; lba[1] = 0;
 801539c:	9319      	str	r3, [sp, #100]	@ 0x64
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 801539e:	f7fe fb67 	bl	8013a70 <disk_ioctl>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d000      	beq.n	80153a8 <f_mkfs+0x4b4>
 80153a6:	e117      	b.n	80155d8 <f_mkfs+0x6e4>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80153a8:	2208      	movs	r2, #8
		sz_drv32 = (DWORD)sz_drv;
 80153aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80153ac:	9201      	str	r2, [sp, #4]
		sz_drv32 = (DWORD)sz_drv;
 80153ae:	9303      	str	r3, [sp, #12]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80153b0:	9a03      	ldr	r2, [sp, #12]
 80153b2:	4b8c      	ldr	r3, [pc, #560]	@ (80155e4 <f_mkfs+0x6f0>)
 80153b4:	429a      	cmp	r2, r3
 80153b6:	d914      	bls.n	80153e2 <f_mkfs+0x4ee>
 80153b8:	2680      	movs	r6, #128	@ 0x80
 80153ba:	2505      	movs	r5, #5
 80153bc:	00f6      	lsls	r6, r6, #3
 80153be:	9b01      	ldr	r3, [sp, #4]
 80153c0:	3d01      	subs	r5, #1
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	9301      	str	r3, [sp, #4]
 80153c8:	2d00      	cmp	r5, #0
 80153ca:	d005      	beq.n	80153d8 <f_mkfs+0x4e4>
 80153cc:	0019      	movs	r1, r3
 80153ce:	9803      	ldr	r0, [sp, #12]
 80153d0:	f7ea feca 	bl	8000168 <__udivsi3>
 80153d4:	42b0      	cmp	r0, r6
 80153d6:	d8f2      	bhi.n	80153be <f_mkfs+0x4ca>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 80153d8:	9b01      	ldr	r3, [sp, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d101      	bne.n	80153e2 <f_mkfs+0x4ee>
 80153de:	33ff      	adds	r3, #255	@ 0xff
 80153e0:	9301      	str	r3, [sp, #4]
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 80153e2:	2280      	movs	r2, #128	@ 0x80
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 80153e4:	0025      	movs	r5, r4
		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 80153e6:	2100      	movs	r1, #0
 80153e8:	0020      	movs	r0, r4
 80153ea:	0152      	lsls	r2, r2, #5
 80153ec:	f004 fe30 	bl	801a050 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80153f0:	9b03      	ldr	r3, [sp, #12]
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 80153f2:	35bf      	adds	r5, #191	@ 0xbf
 80153f4:	35ff      	adds	r5, #255	@ 0xff
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80153f6:	2b01      	cmp	r3, #1
 80153f8:	d81e      	bhi.n	8015438 <f_mkfs+0x544>
	*ptr++ = (BYTE)val; val >>= 8;
 80153fa:	23ff      	movs	r3, #255	@ 0xff
 80153fc:	2255      	movs	r2, #85	@ 0x55
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 8015402:	4a76      	ldr	r2, [pc, #472]	@ (80155dc <f_mkfs+0x6e8>)
 8015404:	3b55      	subs	r3, #85	@ 0x55
 8015406:	3bff      	subs	r3, #255	@ 0xff
 8015408:	54a3      	strb	r3, [r4, r2]
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801540a:	0021      	movs	r1, r4
 801540c:	2200      	movs	r2, #0
 801540e:	9802      	ldr	r0, [sp, #8]
 8015410:	3ba9      	subs	r3, #169	@ 0xa9
 8015412:	f7fe fb08 	bl	8013a26 <disk_write>
 8015416:	2800      	cmp	r0, #0
 8015418:	d000      	beq.n	801541c <f_mkfs+0x528>
 801541a:	e0dd      	b.n	80155d8 <f_mkfs+0x6e4>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 801541c:	2200      	movs	r2, #0
 801541e:	9802      	ldr	r0, [sp, #8]
 8015420:	0011      	movs	r1, r2
 8015422:	f7fe fb25 	bl	8013a70 <disk_ioctl>
 8015426:	1e43      	subs	r3, r0, #1
 8015428:	4198      	sbcs	r0, r3
 801542a:	b2c0      	uxtb	r0, r0
 801542c:	e5db      	b.n	8014fe6 <f_mkfs+0xf2>
				st_32(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 801542e:	0020      	movs	r0, r4
 8015430:	9908      	ldr	r1, [sp, #32]
 8015432:	f7fe fb40 	bl	8013ab6 <st_32>
 8015436:	e757      	b.n	80152e8 <f_mkfs+0x3f4>
 8015438:	ab18      	add	r3, sp, #96	@ 0x60
 801543a:	9305      	str	r3, [sp, #20]
 801543c:	0023      	movs	r3, r4
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 801543e:	2601      	movs	r6, #1
 8015440:	33ff      	adds	r3, #255	@ 0xff
 8015442:	33ff      	adds	r3, #255	@ 0xff
 8015444:	9306      	str	r3, [sp, #24]
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 8015446:	9b05      	ldr	r3, [sp, #20]
 8015448:	681f      	ldr	r7, [r3, #0]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 801544a:	2f64      	cmp	r7, #100	@ 0x64
 801544c:	d805      	bhi.n	801545a <f_mkfs+0x566>
 801544e:	d03e      	beq.n	80154ce <f_mkfs+0x5da>
 8015450:	2164      	movs	r1, #100	@ 0x64
 8015452:	9803      	ldr	r0, [sp, #12]
 8015454:	f7ea fe88 	bl	8000168 <__udivsi3>
 8015458:	4347      	muls	r7, r0
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 801545a:	9a03      	ldr	r2, [sp, #12]
 801545c:	19bb      	adds	r3, r7, r6
 801545e:	429a      	cmp	r2, r3
 8015460:	d301      	bcc.n	8015466 <f_mkfs+0x572>
 8015462:	42b3      	cmp	r3, r6
 8015464:	d235      	bcs.n	80154d2 <f_mkfs+0x5de>
 8015466:	9b03      	ldr	r3, [sp, #12]
 8015468:	1b9f      	subs	r7, r3, r6
			st_32(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
 801546a:	0028      	movs	r0, r5
 801546c:	0031      	movs	r1, r6
 801546e:	3008      	adds	r0, #8
 8015470:	f7fe fb21 	bl	8013ab6 <st_32>
			st_32(pte + PTE_SizLba, sz_part32);		/* Size of partition [sector] */
 8015474:	0028      	movs	r0, r5
 8015476:	0039      	movs	r1, r7
 8015478:	300c      	adds	r0, #12
 801547a:	f7fe fb1c 	bl	8013ab6 <st_32>
			pte[PTE_System] = sys;					/* System type */
 801547e:	9b04      	ldr	r3, [sp, #16]
 8015480:	0030      	movs	r0, r6
 8015482:	712b      	strb	r3, [r5, #4]
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
 8015484:	9901      	ldr	r1, [sp, #4]
 8015486:	f7ea fef5 	bl	8000274 <__aeabi_uidivmod>
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 801548a:	223f      	movs	r2, #63	@ 0x3f
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
 801548c:	7069      	strb	r1, [r5, #1]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 801548e:	2101      	movs	r1, #1
 8015490:	0883      	lsrs	r3, r0, #2
 8015492:	4393      	bics	r3, r2
 8015494:	430b      	orrs	r3, r1
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 8015496:	19f6      	adds	r6, r6, r7
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8015498:	70ab      	strb	r3, [r5, #2]
			pte[PTE_StCyl] = (BYTE)cy;
 801549a:	70e8      	strb	r0, [r5, #3]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
 801549c:	9901      	ldr	r1, [sp, #4]
 801549e:	1e70      	subs	r0, r6, #1
 80154a0:	f7ea fee8 	bl	8000274 <__aeabi_uidivmod>
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80154a4:	223f      	movs	r2, #63	@ 0x3f
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
 80154a6:	7169      	strb	r1, [r5, #5]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80154a8:	2101      	movs	r1, #1
 80154aa:	0883      	lsrs	r3, r0, #2
 80154ac:	4393      	bics	r3, r2
 80154ae:	430b      	orrs	r3, r1
 80154b0:	71ab      	strb	r3, [r5, #6]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80154b2:	9b06      	ldr	r3, [sp, #24]
			pte[PTE_EdCyl] = (BYTE)cy;
 80154b4:	71e8      	strb	r0, [r5, #7]
			pte += SZ_PTE;		/* Next entry */
 80154b6:	3510      	adds	r5, #16
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80154b8:	42ab      	cmp	r3, r5
 80154ba:	d09e      	beq.n	80153fa <f_mkfs+0x506>
 80154bc:	2e00      	cmp	r6, #0
 80154be:	d09c      	beq.n	80153fa <f_mkfs+0x506>
 80154c0:	9b05      	ldr	r3, [sp, #20]
 80154c2:	3304      	adds	r3, #4
 80154c4:	9305      	str	r3, [sp, #20]
 80154c6:	9b03      	ldr	r3, [sp, #12]
 80154c8:	42b3      	cmp	r3, r6
 80154ca:	d8bc      	bhi.n	8015446 <f_mkfs+0x552>
 80154cc:	e795      	b.n	80153fa <f_mkfs+0x506>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80154ce:	9f03      	ldr	r7, [sp, #12]
 80154d0:	e7c3      	b.n	801545a <f_mkfs+0x566>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80154d2:	2f00      	cmp	r7, #0
 80154d4:	d1c9      	bne.n	801546a <f_mkfs+0x576>
 80154d6:	e790      	b.n	80153fa <f_mkfs+0x506>
					if ((fsopt & FM_FAT32)) {
 80154d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
			pau = sz_au;
 80154da:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
					if ((fsopt & FM_FAT32)) {
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d000      	beq.n	80154e2 <f_mkfs+0x5ee>
 80154e0:	e5bf      	b.n	8015062 <f_mkfs+0x16e>
 80154e2:	e57f      	b.n	8014fe4 <f_mkfs+0xf0>
 80154e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d000      	beq.n	80154ec <f_mkfs+0x5f8>
 80154ea:	e5a7      	b.n	801503c <f_mkfs+0x148>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 80154ec:	002f      	movs	r7, r5
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80154ee:	2d80      	cmp	r5, #128	@ 0x80
 80154f0:	d800      	bhi.n	80154f4 <f_mkfs+0x600>
 80154f2:	e63e      	b.n	8015172 <f_mkfs+0x27e>
 80154f4:	e576      	b.n	8014fe4 <f_mkfs+0xf0>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 80154f6:	4b3c      	ldr	r3, [pc, #240]	@ (80155e8 <f_mkfs+0x6f4>)
 80154f8:	4298      	cmp	r0, r3
 80154fa:	d900      	bls.n	80154fe <f_mkfs+0x60a>
 80154fc:	e572      	b.n	8014fe4 <f_mkfs+0xf0>
 80154fe:	2301      	movs	r3, #1
 8015500:	9301      	str	r3, [sp, #4]
		memset(buf, 0, ss);
 8015502:	2280      	movs	r2, #128	@ 0x80
 8015504:	2100      	movs	r1, #0
 8015506:	0152      	lsls	r2, r2, #5
 8015508:	0020      	movs	r0, r4
 801550a:	f004 fda1 	bl	801a050 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 801550e:	220b      	movs	r2, #11
 8015510:	0020      	movs	r0, r4
 8015512:	4936      	ldr	r1, [pc, #216]	@ (80155ec <f_mkfs+0x6f8>)
 8015514:	f004 fe66 	bl	801a1e4 <memcpy>
	*ptr++ = (BYTE)val;
 8015518:	2310      	movs	r3, #16
 801551a:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 801551c:	9b07      	ldr	r3, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 801551e:	73a5      	strb	r5, [r4, #14]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8015520:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8015522:	b2ad      	uxth	r5, r5
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8015524:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015526:	0a2d      	lsrs	r5, r5, #8
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015528:	7367      	strb	r7, [r4, #13]
	*ptr++ = (BYTE)val;
 801552a:	73e5      	strb	r5, [r4, #15]
		st_16(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 801552c:	2b03      	cmp	r3, #3
 801552e:	d101      	bne.n	8015534 <f_mkfs+0x640>
 8015530:	2300      	movs	r3, #0
 8015532:	9308      	str	r3, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8015534:	9b08      	ldr	r3, [sp, #32]
		if (sz_vol < 0x10000) {
 8015536:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8015538:	7463      	strb	r3, [r4, #17]
 801553a:	466b      	mov	r3, sp
 801553c:	8c1b      	ldrh	r3, [r3, #32]
 801553e:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8015540:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 8015542:	2380      	movs	r3, #128	@ 0x80
 8015544:	025b      	lsls	r3, r3, #9
 8015546:	429a      	cmp	r2, r3
 8015548:	d300      	bcc.n	801554c <f_mkfs+0x658>
 801554a:	e634      	b.n	80151b6 <f_mkfs+0x2c2>
	*ptr++ = (BYTE)val; val >>= 8;
 801554c:	466b      	mov	r3, sp
 801554e:	899b      	ldrh	r3, [r3, #12]
 8015550:	74e2      	strb	r2, [r4, #19]
 8015552:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8015554:	7523      	strb	r3, [r4, #20]
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015556:	9b03      	ldr	r3, [sp, #12]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015558:	0020      	movs	r0, r4
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 801555a:	469c      	mov	ip, r3
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801555c:	23f8      	movs	r3, #248	@ 0xf8
 801555e:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8015560:	3bb9      	subs	r3, #185	@ 0xb9
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 8015562:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8015564:	7623      	strb	r3, [r4, #24]
 8015566:	33c0      	adds	r3, #192	@ 0xc0
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015568:	9909      	ldr	r1, [sp, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 801556a:	76a3      	strb	r3, [r4, #26]
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 801556c:	301c      	adds	r0, #28
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
 801556e:	4465      	add	r5, ip
		st_32(buf + BPB_HiddSec, (DWORD)b_vol);			/* Volume offset in the physical drive [sector] */
 8015570:	f7fe faa1 	bl	8013ab6 <st_32>
		if (fsty == FS_FAT32) {
 8015574:	9b01      	ldr	r3, [sp, #4]
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8015576:	0029      	movs	r1, r5
 8015578:	0020      	movs	r0, r4
		if (fsty == FS_FAT32) {
 801557a:	2b03      	cmp	r3, #3
 801557c:	d000      	beq.n	8015580 <f_mkfs+0x68c>
 801557e:	e620      	b.n	80151c2 <f_mkfs+0x2ce>
			st_32(buf + BS_VolID32, vsn);				/* VSN */
 8015580:	3043      	adds	r0, #67	@ 0x43
 8015582:	f7fe fa98 	bl	8013ab6 <st_32>
			st_32(buf + BPB_FATSz32, sz_fat);			/* FAT size [sector] */
 8015586:	0020      	movs	r0, r4
 8015588:	9906      	ldr	r1, [sp, #24]
 801558a:	3024      	adds	r0, #36	@ 0x24
 801558c:	f7fe fa93 	bl	8013ab6 <st_32>
	*ptr++ = (BYTE)val; val >>= 8;
 8015590:	0023      	movs	r3, r4
 8015592:	2202      	movs	r2, #2
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015594:	0020      	movs	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8015596:	332c      	adds	r3, #44	@ 0x2c
 8015598:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801559a:	3a01      	subs	r2, #1
 801559c:	711a      	strb	r2, [r3, #4]
 801559e:	3205      	adds	r2, #5
 80155a0:	719a      	strb	r2, [r3, #6]
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80155a2:	327a      	adds	r2, #122	@ 0x7a
 80155a4:	751a      	strb	r2, [r3, #20]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80155a6:	4912      	ldr	r1, [pc, #72]	@ (80155f0 <f_mkfs+0x6fc>)
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80155a8:	3a57      	subs	r2, #87	@ 0x57
 80155aa:	759a      	strb	r2, [r3, #22]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80155ac:	3047      	adds	r0, #71	@ 0x47
 80155ae:	3a16      	subs	r2, #22
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT12   ", 19);	/* Volume label, FAT signature */
 80155b0:	f004 fe18 	bl	801a1e4 <memcpy>
	*ptr++ = (BYTE)val; val >>= 8;
 80155b4:	23ff      	movs	r3, #255	@ 0xff
 80155b6:	2255      	movs	r2, #85	@ 0x55
	*ptr++ = (BYTE)val;
 80155b8:	25aa      	movs	r5, #170	@ 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 80155ba:	005b      	lsls	r3, r3, #1
 80155bc:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 80155be:	4b07      	ldr	r3, [pc, #28]	@ (80155dc <f_mkfs+0x6e8>)
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 80155c0:	0021      	movs	r1, r4
	*ptr++ = (BYTE)val;
 80155c2:	54e5      	strb	r5, [r4, r3]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 80155c4:	3bff      	subs	r3, #255	@ 0xff
 80155c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155c8:	9802      	ldr	r0, [sp, #8]
 80155ca:	3bff      	subs	r3, #255	@ 0xff
 80155cc:	f7fe fa2b 	bl	8013a26 <disk_write>
 80155d0:	9003      	str	r0, [sp, #12]
 80155d2:	2800      	cmp	r0, #0
 80155d4:	d100      	bne.n	80155d8 <f_mkfs+0x6e4>
 80155d6:	e61f      	b.n	8015218 <f_mkfs+0x324>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80155d8:	2001      	movs	r0, #1
 80155da:	e504      	b.n	8014fe6 <f_mkfs+0xf2>
 80155dc:	000001ff 	.word	0x000001ff
 80155e0:	00fffff8 	.word	0x00fffff8
 80155e4:	00002007 	.word	0x00002007
 80155e8:	00000ff5 	.word	0x00000ff5
 80155ec:	0801f973 	.word	0x0801f973
 80155f0:	0801f97f 	.word	0x0801f97f

080155f4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80155f4:	b530      	push	{r4, r5, lr}
 80155f6:	000d      	movs	r5, r1
 80155f8:	b095      	sub	sp, #84	@ 0x54
 80155fa:	0004      	movs	r4, r0
	memset(pb, 0, sizeof (putbuff));
 80155fc:	2248      	movs	r2, #72	@ 0x48
 80155fe:	2100      	movs	r1, #0
 8015600:	a802      	add	r0, sp, #8
 8015602:	f004 fd25 	bl	801a050 <memset>
	pb->fp = fp;
 8015606:	9501      	str	r5, [sp, #4]
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015608:	7821      	ldrb	r1, [r4, #0]
 801560a:	2900      	cmp	r1, #0
 801560c:	d104      	bne.n	8015618 <f_puts+0x24>
	return putc_flush(&pb);
 801560e:	a801      	add	r0, sp, #4
 8015610:	f7ff fab5 	bl	8014b7e <putc_flush>
}
 8015614:	b015      	add	sp, #84	@ 0x54
 8015616:	bd30      	pop	{r4, r5, pc}
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8015618:	a801      	add	r0, sp, #4
 801561a:	3401      	adds	r4, #1
 801561c:	f7ff fa94 	bl	8014b48 <putc_bfd>
 8015620:	e7f2      	b.n	8015608 <f_puts+0x14>
	...

08015624 <_ux_device_stack_alternate_setting_get>:
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015624:	4b11      	ldr	r3, [pc, #68]	@ (801566c <_ux_device_stack_alternate_setting_get+0x48>)
{
 8015626:	0001      	movs	r1, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015628:	681b      	ldr	r3, [r3, #0]
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 801562a:	20ff      	movs	r0, #255	@ 0xff
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801562c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
{
 801562e:	b510      	push	{r4, lr}
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015630:	2a03      	cmp	r2, #3
 8015632:	d117      	bne.n	8015664 <_ux_device_stack_alternate_setting_get+0x40>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015634:	001a      	movs	r2, r3
 8015636:	32b4      	adds	r2, #180	@ 0xb4
 8015638:	6812      	ldr	r2, [r2, #0]
        while (interface_ptr != UX_NULL)
 801563a:	2a00      	cmp	r2, #0
 801563c:	d101      	bne.n	8015642 <_ux_device_stack_alternate_setting_get+0x1e>
    return(UX_ERROR);
 801563e:	20ff      	movs	r0, #255	@ 0xff
 8015640:	e010      	b.n	8015664 <_ux_device_stack_alternate_setting_get+0x40>
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8015642:	7b90      	ldrb	r0, [r2, #14]
 8015644:	4288      	cmp	r0, r1
 8015646:	d10e      	bne.n	8015666 <_ux_device_stack_alternate_setting_get+0x42>
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8015648:	6e99      	ldr	r1, [r3, #104]	@ 0x68
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 801564a:	7bd2      	ldrb	r2, [r2, #15]
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801564c:	2003      	movs	r0, #3
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801564e:	700a      	strb	r2, [r1, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8015650:	2101      	movs	r1, #1
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015652:	001a      	movs	r2, r3
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8015654:	6719      	str	r1, [r3, #112]	@ 0x70
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015656:	3208      	adds	r2, #8
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015658:	335c      	adds	r3, #92	@ 0x5c
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801565a:	67d0      	str	r0, [r2, #124]	@ 0x7c
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801565c:	0018      	movs	r0, r3
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801565e:	000a      	movs	r2, r1
 8015660:	f000 fefe 	bl	8016460 <_ux_device_stack_transfer_request>
}
 8015664:	bd10      	pop	{r4, pc}
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015666:	6992      	ldr	r2, [r2, #24]
 8015668:	e7e7      	b.n	801563a <_ux_device_stack_alternate_setting_get+0x16>
 801566a:	46c0      	nop			@ (mov r8, r8)
 801566c:	20003104 	.word	0x20003104

08015670 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8015670:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015672:	4b7d      	ldr	r3, [pc, #500]	@ (8015868 <_ux_device_stack_alternate_setting_set+0x1f8>)
{
 8015674:	b097      	sub	sp, #92	@ 0x5c
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015676:	681f      	ldr	r7, [r3, #0]
{
 8015678:	9002      	str	r0, [sp, #8]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        return(UX_FUNCTION_NOT_SUPPORTED);
 801567c:	2054      	movs	r0, #84	@ 0x54
{
 801567e:	9103      	str	r1, [sp, #12]
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015680:	2b03      	cmp	r3, #3
 8015682:	d10a      	bne.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8015684:	003b      	movs	r3, r7
 8015686:	33b4      	adds	r3, #180	@ 0xb4
 8015688:	681c      	ldr	r4, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 801568a:	2c00      	cmp	r4, #0
 801568c:	d107      	bne.n	801569e <_ux_device_stack_alternate_setting_set+0x2e>
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 801568e:	2002      	movs	r0, #2
 8015690:	2252      	movs	r2, #82	@ 0x52
 8015692:	2107      	movs	r1, #7
 8015694:	f000 ff4c 	bl	8016530 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8015698:	2052      	movs	r0, #82	@ 0x52
    }

    /* Return error completion.  */
    return(UX_ERROR);
#endif
}
 801569a:	b017      	add	sp, #92	@ 0x5c
 801569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801569e:	7ba3      	ldrb	r3, [r4, #14]
 80156a0:	9a02      	ldr	r2, [sp, #8]
 80156a2:	4293      	cmp	r3, r2
 80156a4:	d001      	beq.n	80156aa <_ux_device_stack_alternate_setting_set+0x3a>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80156a6:	69a4      	ldr	r4, [r4, #24]
 80156a8:	e7ef      	b.n	801568a <_ux_device_stack_alternate_setting_set+0x1a>
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 80156aa:	7be3      	ldrb	r3, [r4, #15]
 80156ac:	9a03      	ldr	r2, [sp, #12]
        return(UX_SUCCESS);       
 80156ae:	2000      	movs	r0, #0
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 80156b0:	4293      	cmp	r3, r2
 80156b2:	d0f2      	beq.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80156b4:	003b      	movs	r3, r7
 80156b6:	33cc      	adds	r3, #204	@ 0xcc
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80156b8:	cb60      	ldmia	r3!, {r5, r6}
    while (device_framework_length != 0)
 80156ba:	2e00      	cmp	r6, #0
 80156bc:	d019      	beq.n	80156f2 <_ux_device_stack_alternate_setting_set+0x82>
        descriptor_length =  (ULONG) *device_framework;
 80156be:	782b      	ldrb	r3, [r5, #0]
 80156c0:	9301      	str	r3, [sp, #4]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80156c2:	786b      	ldrb	r3, [r5, #1]
 80156c4:	2b02      	cmp	r3, #2
 80156c6:	d000      	beq.n	80156ca <_ux_device_stack_alternate_setting_set+0x5a>
 80156c8:	e0ca      	b.n	8015860 <_ux_device_stack_alternate_setting_set+0x1f0>
            _ux_utility_descriptor_parse(device_framework,
 80156ca:	2208      	movs	r2, #8
 80156cc:	ab05      	add	r3, sp, #20
 80156ce:	0028      	movs	r0, r5
 80156d0:	4966      	ldr	r1, [pc, #408]	@ (801586c <_ux_device_stack_alternate_setting_set+0x1fc>)
 80156d2:	f000 ff94 	bl	80165fe <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 80156d6:	ab04      	add	r3, sp, #16
 80156d8:	7a5a      	ldrb	r2, [r3, #9]
 80156da:	003b      	movs	r3, r7
 80156dc:	33a4      	adds	r3, #164	@ 0xa4
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d000      	beq.n	80156e6 <_ux_device_stack_alternate_setting_set+0x76>
 80156e4:	e0bc      	b.n	8015860 <_ux_device_stack_alternate_setting_set+0x1f0>
                device_framework_length = configuration_descriptor.wTotalLength;
 80156e6:	ab04      	add	r3, sp, #16
 80156e8:	88db      	ldrh	r3, [r3, #6]
 80156ea:	9301      	str	r3, [sp, #4]
                while (device_framework_length != 0)
 80156ec:	9b01      	ldr	r3, [sp, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d101      	bne.n	80156f6 <_ux_device_stack_alternate_setting_set+0x86>
    return(UX_ERROR);
 80156f2:	20ff      	movs	r0, #255	@ 0xff
 80156f4:	e7d1      	b.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80156f6:	786b      	ldrb	r3, [r5, #1]
                    descriptor_length =  (ULONG) *device_framework;
 80156f8:	782e      	ldrb	r6, [r5, #0]
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80156fa:	2b04      	cmp	r3, #4
 80156fc:	d000      	beq.n	8015700 <_ux_device_stack_alternate_setting_set+0x90>
 80156fe:	e0aa      	b.n	8015856 <_ux_device_stack_alternate_setting_set+0x1e6>
                        _ux_utility_descriptor_parse(device_framework,
 8015700:	2209      	movs	r2, #9
 8015702:	ab08      	add	r3, sp, #32
 8015704:	0028      	movs	r0, r5
 8015706:	495a      	ldr	r1, [pc, #360]	@ (8015870 <_ux_device_stack_alternate_setting_set+0x200>)
 8015708:	f000 ff79 	bl	80165fe <_ux_utility_descriptor_parse>
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801570c:	ab04      	add	r3, sp, #16
 801570e:	7c9b      	ldrb	r3, [r3, #18]
 8015710:	9a02      	ldr	r2, [sp, #8]
 8015712:	4293      	cmp	r3, r2
 8015714:	d000      	beq.n	8015718 <_ux_device_stack_alternate_setting_set+0xa8>
 8015716:	e09e      	b.n	8015856 <_ux_device_stack_alternate_setting_set+0x1e6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8015718:	ab04      	add	r3, sp, #16
 801571a:	7cdb      	ldrb	r3, [r3, #19]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801571c:	9a03      	ldr	r2, [sp, #12]
 801571e:	4293      	cmp	r3, r2
 8015720:	d000      	beq.n	8015724 <_ux_device_stack_alternate_setting_set+0xb4>
 8015722:	e098      	b.n	8015856 <_ux_device_stack_alternate_setting_set+0x1e6>
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8015724:	69e6      	ldr	r6, [r4, #28]
                            while (endpoint != UX_NULL)
 8015726:	2e00      	cmp	r6, #0
 8015728:	d125      	bne.n	8015776 <_ux_device_stack_alternate_setting_set+0x106>
    device =  &_ux_system_slave -> ux_system_slave_device;
 801572a:	003b      	movs	r3, r7
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 801572c:	61e6      	str	r6, [r4, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
 801572e:	3324      	adds	r3, #36	@ 0x24
                            device_framework_length -=  (ULONG) *device_framework;
 8015730:	9a01      	ldr	r2, [sp, #4]
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015732:	9303      	str	r3, [sp, #12]
                            device_framework_length -=  (ULONG) *device_framework;
 8015734:	782b      	ldrb	r3, [r5, #0]
 8015736:	1ad6      	subs	r6, r2, r3
                            device_framework +=  (ULONG) *device_framework;
 8015738:	18eb      	adds	r3, r5, r3
                                device_framework +=  descriptor_length;
 801573a:	9301      	str	r3, [sp, #4]
                            while (device_framework_length != 0)
 801573c:	2e00      	cmp	r6, #0
 801573e:	d12c      	bne.n	801579a <_ux_device_stack_alternate_setting_set+0x12a>
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8015740:	220c      	movs	r2, #12
 8015742:	a908      	add	r1, sp, #32
 8015744:	18a0      	adds	r0, r4, r2
 8015746:	f001 f8a9 	bl	801689c <_ux_utility_memory_copy>
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 801574a:	4b47      	ldr	r3, [pc, #284]	@ (8015868 <_ux_device_stack_alternate_setting_set+0x1f8>)
                                return (UX_NO_CLASS_MATCH);
 801574c:	2057      	movs	r0, #87	@ 0x57
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	7ba3      	ldrb	r3, [r4, #14]
 8015752:	3340      	adds	r3, #64	@ 0x40
 8015754:	009b      	lsls	r3, r3, #2
 8015756:	18d3      	adds	r3, r2, r3
 8015758:	685b      	ldr	r3, [r3, #4]
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 801575a:	2b00      	cmp	r3, #0
 801575c:	d09d      	beq.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
 801575e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015760:	2a00      	cmp	r2, #0
 8015762:	d09a      	beq.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8015764:	2206      	movs	r2, #6
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8015766:	9313      	str	r3, [sp, #76]	@ 0x4c
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8015768:	661c      	str	r4, [r3, #96]	@ 0x60
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 801576a:	920b      	str	r2, [sp, #44]	@ 0x2c
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801576c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 801576e:	940d      	str	r4, [sp, #52]	@ 0x34
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8015770:	a80b      	add	r0, sp, #44	@ 0x2c
 8015772:	4798      	blx	r3
                            return(status); 
 8015774:	e791      	b.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8015776:	2126      	movs	r1, #38	@ 0x26
 8015778:	0030      	movs	r0, r6
 801577a:	f000 fe6b 	bl	8016454 <_ux_device_stack_transfer_all_request_abort>
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 801577e:	0032      	movs	r2, r6
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	210f      	movs	r1, #15
 8015784:	0038      	movs	r0, r7
 8015786:	4798      	blx	r3
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8015788:	2300      	movs	r3, #0
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801578a:	6972      	ldr	r2, [r6, #20]
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801578c:	6033      	str	r3, [r6, #0]
                                endpoint -> ux_slave_endpoint_state =  0;
 801578e:	6073      	str	r3, [r6, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8015790:	6173      	str	r3, [r6, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8015792:	61b3      	str	r3, [r6, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8015794:	61f3      	str	r3, [r6, #28]
                                endpoint =  next_endpoint;
 8015796:	0016      	movs	r6, r2
 8015798:	e7c5      	b.n	8015726 <_ux_device_stack_alternate_setting_set+0xb6>
                                descriptor_length =  (ULONG) *device_framework;
 801579a:	9b01      	ldr	r3, [sp, #4]
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	9302      	str	r3, [sp, #8]
                                descriptor_type =  *(device_framework + 1);
 80157a0:	9b01      	ldr	r3, [sp, #4]
 80157a2:	785b      	ldrb	r3, [r3, #1]
                                switch(descriptor_type)
 80157a4:	2b04      	cmp	r3, #4
 80157a6:	d003      	beq.n	80157b0 <_ux_device_stack_alternate_setting_set+0x140>
 80157a8:	2b05      	cmp	r3, #5
 80157aa:	d003      	beq.n	80157b4 <_ux_device_stack_alternate_setting_set+0x144>
 80157ac:	2b02      	cmp	r3, #2
 80157ae:	d145      	bne.n	801583c <_ux_device_stack_alternate_setting_set+0x1cc>
 80157b0:	9e02      	ldr	r6, [sp, #8]
 80157b2:	e043      	b.n	801583c <_ux_device_stack_alternate_setting_set+0x1cc>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 80157b4:	003b      	movs	r3, r7
 80157b6:	33c0      	adds	r3, #192	@ 0xc0
 80157b8:	681d      	ldr	r5, [r3, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 80157ba:	3304      	adds	r3, #4
 80157bc:	681b      	ldr	r3, [r3, #0]
                                    while (endpoints_pool_number != 0)
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d101      	bne.n	80157c6 <_ux_device_stack_alternate_setting_set+0x156>
                                        return(UX_MEMORY_INSUFFICIENT);
 80157c2:	2012      	movs	r0, #18
 80157c4:	e769      	b.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80157c6:	682a      	ldr	r2, [r5, #0]
 80157c8:	2a00      	cmp	r2, #0
 80157ca:	d130      	bne.n	801582e <_ux_device_stack_alternate_setting_set+0x1be>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 80157cc:	2301      	movs	r3, #1
 80157ce:	602b      	str	r3, [r5, #0]
                                    _ux_utility_descriptor_parse(device_framework,
 80157d0:	002b      	movs	r3, r5
 80157d2:	4928      	ldr	r1, [pc, #160]	@ (8015874 <_ux_device_stack_alternate_setting_set+0x204>)
 80157d4:	330c      	adds	r3, #12
 80157d6:	3206      	adds	r2, #6
 80157d8:	9801      	ldr	r0, [sp, #4]
 80157da:	f000 ff10 	bl	80165fe <_ux_utility_descriptor_parse>
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80157de:	4a22      	ldr	r2, [pc, #136]	@ (8015868 <_ux_device_stack_alternate_setting_set+0x1f8>)
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80157e0:	8a29      	ldrh	r1, [r5, #16]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80157e2:	6812      	ldr	r2, [r2, #0]
                                    max_transfer_length =
 80157e4:	054b      	lsls	r3, r1, #21
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80157e6:	32fc      	adds	r2, #252	@ 0xfc
 80157e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
                                    max_transfer_length =
 80157ea:	0d5b      	lsrs	r3, r3, #21
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80157ec:	2a02      	cmp	r2, #2
 80157ee:	d10c      	bne.n	801580a <_ux_device_stack_alternate_setting_set+0x19a>
 80157f0:	2001      	movs	r0, #1
 80157f2:	7bea      	ldrb	r2, [r5, #15]
 80157f4:	4202      	tst	r2, r0
 80157f6:	d008      	beq.n	801580a <_ux_device_stack_alternate_setting_set+0x19a>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80157f8:	20c0      	movs	r0, #192	@ 0xc0
 80157fa:	000a      	movs	r2, r1
 80157fc:	0140      	lsls	r0, r0, #5
 80157fe:	4002      	ands	r2, r0
                                        if (n_trans)
 8015800:	4201      	tst	r1, r0
 8015802:	d002      	beq.n	801580a <_ux_device_stack_alternate_setting_set+0x19a>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8015804:	0ad2      	lsrs	r2, r2, #11
                                            n_trans ++;
 8015806:	3201      	adds	r2, #1
                                            max_transfer_length *= n_trans;
 8015808:	4353      	muls	r3, r2
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801580a:	642b      	str	r3, [r5, #64]	@ 0x40
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801580c:	2301      	movs	r3, #1
 801580e:	425b      	negs	r3, r3
 8015810:	656b      	str	r3, [r5, #84]	@ 0x54
                                    endpoint -> ux_slave_endpoint_device =  device;
 8015812:	9b03      	ldr	r3, [sp, #12]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015814:	002a      	movs	r2, r5
                                    endpoint -> ux_slave_endpoint_device =  device;
 8015816:	61eb      	str	r3, [r5, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015818:	210e      	movs	r1, #14
 801581a:	0038      	movs	r0, r7
 801581c:	69bb      	ldr	r3, [r7, #24]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801581e:	62ad      	str	r5, [r5, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8015820:	61ac      	str	r4, [r5, #24]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8015822:	4798      	blx	r3
                                    if (status != UX_SUCCESS)
 8015824:	2800      	cmp	r0, #0
 8015826:	d005      	beq.n	8015834 <_ux_device_stack_alternate_setting_set+0x1c4>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8015828:	2300      	movs	r3, #0
 801582a:	602b      	str	r3, [r5, #0]
                                        return(status);
 801582c:	e735      	b.n	801569a <_ux_device_stack_alternate_setting_set+0x2a>
                                        endpoint++;
 801582e:	3568      	adds	r5, #104	@ 0x68
                                       endpoints_pool_number--; 
 8015830:	3b01      	subs	r3, #1
 8015832:	e7c4      	b.n	80157be <_ux_device_stack_alternate_setting_set+0x14e>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8015834:	69e3      	ldr	r3, [r4, #28]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d107      	bne.n	801584a <_ux_device_stack_alternate_setting_set+0x1da>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 801583a:	61e5      	str	r5, [r4, #28]
                                device_framework +=  descriptor_length;
 801583c:	9a02      	ldr	r2, [sp, #8]
                                device_framework_length -=  descriptor_length;
 801583e:	9b02      	ldr	r3, [sp, #8]
                                device_framework +=  descriptor_length;
 8015840:	4694      	mov	ip, r2
                                device_framework_length -=  descriptor_length;
 8015842:	1af6      	subs	r6, r6, r3
                                device_framework +=  descriptor_length;
 8015844:	9b01      	ldr	r3, [sp, #4]
 8015846:	4463      	add	r3, ip
 8015848:	e777      	b.n	801573a <_ux_device_stack_alternate_setting_set+0xca>
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801584a:	001a      	movs	r2, r3
 801584c:	695b      	ldr	r3, [r3, #20]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d1fb      	bne.n	801584a <_ux_device_stack_alternate_setting_set+0x1da>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8015852:	6155      	str	r5, [r2, #20]
 8015854:	e7f2      	b.n	801583c <_ux_device_stack_alternate_setting_set+0x1cc>
                    device_framework_length -=  descriptor_length;
 8015856:	9b01      	ldr	r3, [sp, #4]
                    device_framework +=  descriptor_length;
 8015858:	19ad      	adds	r5, r5, r6
                    device_framework_length -=  descriptor_length;
 801585a:	1b9b      	subs	r3, r3, r6
 801585c:	9301      	str	r3, [sp, #4]
                    device_framework +=  descriptor_length;
 801585e:	e745      	b.n	80156ec <_ux_device_stack_alternate_setting_set+0x7c>
        device_framework_length -=  descriptor_length;
 8015860:	9b01      	ldr	r3, [sp, #4]
 8015862:	1af6      	subs	r6, r6, r3
        device_framework +=  descriptor_length;
 8015864:	18ed      	adds	r5, r5, r3
 8015866:	e728      	b.n	80156ba <_ux_device_stack_alternate_setting_set+0x4a>
 8015868:	20003104 	.word	0x20003104
 801586c:	20000243 	.word	0x20000243
 8015870:	2000023a 	.word	0x2000023a
 8015874:	20000259 	.word	0x20000259

08015878 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8015878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801587a:	001f      	movs	r7, r3

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 801587c:	2300      	movs	r3, #0
{
 801587e:	b08f      	sub	sp, #60	@ 0x3c
 8015880:	000e      	movs	r6, r1
 8015882:	9201      	str	r2, [sp, #4]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8015884:	a902      	add	r1, sp, #8
 8015886:	223f      	movs	r2, #63	@ 0x3f
{
 8015888:	0005      	movs	r5, r0
UINT                        class_name_length =  0;
 801588a:	9302      	str	r3, [sp, #8]
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 801588c:	f001 f851 	bl	8016932 <_ux_utility_string_length_check>
    if (status)
 8015890:	2800      	cmp	r0, #0
 8015892:	d121      	bne.n	80158d8 <_ux_device_stack_class_register+0x60>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015894:	4b13      	ldr	r3, [pc, #76]	@ (80158e4 <_ux_device_stack_class_register+0x6c>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	33fc      	adds	r3, #252	@ 0xfc

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801589a:	cb18      	ldmia	r3, {r3, r4}
 801589c:	4283      	cmp	r3, r0
 801589e:	d101      	bne.n	80158a4 <_ux_device_stack_class_register+0x2c>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 80158a0:	2012      	movs	r0, #18
 80158a2:	e019      	b.n	80158d8 <_ux_device_stack_class_register+0x60>
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 80158a4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80158a6:	2a00      	cmp	r2, #0
 80158a8:	d118      	bne.n	80158dc <_ux_device_stack_class_register+0x64>
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 80158aa:	9a02      	ldr	r2, [sp, #8]
 80158ac:	0020      	movs	r0, r4
 80158ae:	0029      	movs	r1, r5
 80158b0:	3201      	adds	r2, #1
 80158b2:	f000 fff3 	bl	801689c <_ux_utility_memory_copy>
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 80158b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 80158b8:	6466      	str	r6, [r4, #68]	@ 0x44
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 80158ba:	6563      	str	r3, [r4, #84]	@ 0x54
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 80158bc:	9b01      	ldr	r3, [sp, #4]
            class_inst -> ux_slave_class_interface_number =  interface_number;
 80158be:	65a7      	str	r7, [r4, #88]	@ 0x58
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 80158c0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 80158c2:	2305      	movs	r3, #5
 80158c4:	9303      	str	r3, [sp, #12]
            command.ux_slave_class_command_parameter  =  parameter;
 80158c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            status = class_entry_function(&command);
 80158c8:	a803      	add	r0, sp, #12
            command.ux_slave_class_command_parameter  =  parameter;
 80158ca:	930c      	str	r3, [sp, #48]	@ 0x30
            command.ux_slave_class_command_class_ptr  =  class_inst;
 80158cc:	940b      	str	r4, [sp, #44]	@ 0x2c
            status = class_entry_function(&command);
 80158ce:	47b0      	blx	r6
            if (status != UX_SUCCESS)
 80158d0:	2800      	cmp	r0, #0
 80158d2:	d101      	bne.n	80158d8 <_ux_device_stack_class_register+0x60>
            class_inst -> ux_slave_class_status = UX_USED;
 80158d4:	2301      	movs	r3, #1
 80158d6:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80158d8:	b00f      	add	sp, #60	@ 0x3c
 80158da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        class_inst ++;
 80158dc:	3464      	adds	r4, #100	@ 0x64
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 80158de:	3001      	adds	r0, #1
 80158e0:	e7dc      	b.n	801589c <_ux_device_stack_class_register+0x24>
 80158e2:	46c0      	nop			@ (mov r8, r8)
 80158e4:	20003104 	.word	0x20003104

080158e8 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 80158e8:	b570      	push	{r4, r5, r6, lr}
 80158ea:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80158ec:	4b17      	ldr	r3, [pc, #92]	@ (801594c <_ux_device_stack_clear_feature+0x64>)

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80158ee:	002c      	movs	r4, r5
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80158f0:	6818      	ldr	r0, [r3, #0]
    switch (request_type & UX_REQUEST_TARGET)
 80158f2:	2303      	movs	r3, #3
 80158f4:	401c      	ands	r4, r3
 80158f6:	421d      	tst	r5, r3
 80158f8:	d007      	beq.n	801590a <_ux_device_stack_clear_feature+0x22>
 80158fa:	2c02      	cmp	r4, #2
 80158fc:	d010      	beq.n	8015920 <_ux_device_stack_clear_feature+0x38>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80158fe:	0002      	movs	r2, r0

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015900:	2114      	movs	r1, #20
 8015902:	6983      	ldr	r3, [r0, #24]
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015904:	323c      	adds	r2, #60	@ 0x3c
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015906:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8015908:	e008      	b.n	801591c <_ux_device_stack_clear_feature+0x34>
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801590a:	2901      	cmp	r1, #1
 801590c:	d106      	bne.n	801591c <_ux_device_stack_clear_feature+0x34>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801590e:	0003      	movs	r3, r0
 8015910:	33fc      	adds	r3, #252	@ 0xfc
 8015912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
                return (UX_FUNCTION_NOT_SUPPORTED);
 8015914:	2054      	movs	r0, #84	@ 0x54
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8015916:	2a00      	cmp	r2, #0
 8015918:	d001      	beq.n	801591e <_ux_device_stack_clear_feature+0x36>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 801591a:	655c      	str	r4, [r3, #84]	@ 0x54
                    return(UX_SUCCESS);
 801591c:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 801591e:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015920:	0003      	movs	r3, r0
 8015922:	33b4      	adds	r3, #180	@ 0xb4
 8015924:	681b      	ldr	r3, [r3, #0]
        while (interface_ptr != UX_NULL)
 8015926:	2b00      	cmp	r3, #0
 8015928:	d0e9      	beq.n	80158fe <_ux_device_stack_clear_feature+0x16>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 801592a:	69dc      	ldr	r4, [r3, #28]
            while (endpoint_target != UX_NULL)
 801592c:	2c00      	cmp	r4, #0
 801592e:	d101      	bne.n	8015934 <_ux_device_stack_clear_feature+0x4c>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8015930:	699b      	ldr	r3, [r3, #24]
 8015932:	e7f8      	b.n	8015926 <_ux_device_stack_clear_feature+0x3e>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8015934:	7ba1      	ldrb	r1, [r4, #14]
 8015936:	4291      	cmp	r1, r2
 8015938:	d106      	bne.n	8015948 <_ux_device_stack_clear_feature+0x60>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 801593a:	6983      	ldr	r3, [r0, #24]
 801593c:	0022      	movs	r2, r4
 801593e:	2110      	movs	r1, #16
 8015940:	4798      	blx	r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8015942:	2300      	movs	r3, #0
 8015944:	6063      	str	r3, [r4, #4]
                    return(UX_SUCCESS);
 8015946:	e7e9      	b.n	801591c <_ux_device_stack_clear_feature+0x34>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8015948:	6964      	ldr	r4, [r4, #20]
 801594a:	e7ef      	b.n	801592c <_ux_device_stack_clear_feature+0x44>
 801594c:	20003104 	.word	0x20003104

08015950 <_ux_device_stack_configuration_get>:
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015950:	4b08      	ldr	r3, [pc, #32]	@ (8015974 <_ux_device_stack_configuration_get+0x24>)
{
 8015952:	b510      	push	{r4, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015954:	6818      	ldr	r0, [r3, #0]
    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8015956:	0002      	movs	r2, r0
 8015958:	32a4      	adds	r2, #164	@ 0xa4
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801595a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801595c:	6812      	ldr	r2, [r2, #0]
 801595e:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015960:	0003      	movs	r3, r0
 8015962:	2203      	movs	r2, #3
 8015964:	3308      	adds	r3, #8
 8015966:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8015968:	3a02      	subs	r2, #2
 801596a:	0011      	movs	r1, r2
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801596c:	305c      	adds	r0, #92	@ 0x5c
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801596e:	f000 fd77 	bl	8016460 <_ux_device_stack_transfer_request>

    /* Return the function status.  */
    return(status);
}
 8015972:	bd10      	pop	{r4, pc}
 8015974:	20003104 	.word	0x20003104

08015978 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8015978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801597a:	b09b      	sub	sp, #108	@ 0x6c
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 801597c:	220c      	movs	r2, #12
{
 801597e:	9002      	str	r0, [sp, #8]
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8015980:	2100      	movs	r1, #0
 8015982:	a809      	add	r0, sp, #36	@ 0x24
 8015984:	f004 fb64 	bl	801a050 <memset>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015988:	4b75      	ldr	r3, [pc, #468]	@ (8015b60 <_ux_device_stack_configuration_set+0x1e8>)
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801598a:	9a02      	ldr	r2, [sp, #8]
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801598c:	681f      	ldr	r7, [r3, #0]
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801598e:	003b      	movs	r3, r7
 8015990:	33a4      	adds	r3, #164	@ 0xa4
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4293      	cmp	r3, r2
 8015996:	d059      	beq.n	8015a4c <_ux_device_stack_configuration_set+0xd4>
        return(UX_SUCCESS);

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8015998:	003b      	movs	r3, r7
 801599a:	33cc      	adds	r3, #204	@ 0xcc
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	9301      	str	r3, [sp, #4]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80159a0:	003b      	movs	r3, r7
 80159a2:	33d0      	adds	r3, #208	@ 0xd0
 80159a4:	681c      	ldr	r4, [r3, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 80159a6:	2c00      	cmp	r4, #0
 80159a8:	d105      	bne.n	80159b6 <_ux_device_stack_configuration_set+0x3e>
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 80159aa:	9b02      	ldr	r3, [sp, #8]
        return(UX_ERROR);
 80159ac:	20ff      	movs	r0, #255	@ 0xff
    if (device_framework_length == 0 && configuration_value != 0)
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d016      	beq.n	80159e0 <_ux_device_stack_configuration_set+0x68>
    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);

    /* Configuration mounted. */
    return(UX_SUCCESS);
}
 80159b2:	b01b      	add	sp, #108	@ 0x6c
 80159b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        descriptor_length =  (ULONG) *device_framework;
 80159b6:	9b01      	ldr	r3, [sp, #4]
 80159b8:	781e      	ldrb	r6, [r3, #0]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80159ba:	785b      	ldrb	r3, [r3, #1]
 80159bc:	2b02      	cmp	r3, #2
 80159be:	d004      	beq.n	80159ca <_ux_device_stack_configuration_set+0x52>
        device_framework += descriptor_length;
 80159c0:	9b01      	ldr	r3, [sp, #4]
        device_framework_length -= descriptor_length;
 80159c2:	1ba4      	subs	r4, r4, r6
        device_framework += descriptor_length;
 80159c4:	199b      	adds	r3, r3, r6
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	e7ed      	b.n	80159a6 <_ux_device_stack_configuration_set+0x2e>
            _ux_utility_descriptor_parse(device_framework,
 80159ca:	ad09      	add	r5, sp, #36	@ 0x24
 80159cc:	002b      	movs	r3, r5
 80159ce:	2208      	movs	r2, #8
 80159d0:	4964      	ldr	r1, [pc, #400]	@ (8015b64 <_ux_device_stack_configuration_set+0x1ec>)
 80159d2:	9801      	ldr	r0, [sp, #4]
 80159d4:	f000 fe13 	bl	80165fe <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 80159d8:	796b      	ldrb	r3, [r5, #5]
 80159da:	9a02      	ldr	r2, [sp, #8]
 80159dc:	4293      	cmp	r3, r2
 80159de:	d1ef      	bne.n	80159c0 <_ux_device_stack_configuration_set+0x48>
    if (device -> ux_slave_device_configuration_selected)
 80159e0:	003d      	movs	r5, r7
 80159e2:	35a4      	adds	r5, #164	@ 0xa4
 80159e4:	682b      	ldr	r3, [r5, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d132      	bne.n	8015a50 <_ux_device_stack_configuration_set+0xd8>
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80159ea:	2301      	movs	r3, #1
    device -> ux_slave_device_configuration_selected =  0;
 80159ec:	2400      	movs	r4, #0
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80159ee:	2201      	movs	r2, #1
    device -> ux_slave_device_configuration_selected =  0;
 80159f0:	602c      	str	r4, [r5, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80159f2:	2113      	movs	r1, #19
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80159f4:	627b      	str	r3, [r7, #36]	@ 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80159f6:	0038      	movs	r0, r7
 80159f8:	69bb      	ldr	r3, [r7, #24]
 80159fa:	4798      	blx	r3
    if (configuration_value == 0)
 80159fc:	9b02      	ldr	r3, [sp, #8]
 80159fe:	42a3      	cmp	r3, r4
 8015a00:	d024      	beq.n	8015a4c <_ux_device_stack_configuration_set+0xd4>
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8015a02:	9b02      	ldr	r3, [sp, #8]
    _ux_utility_descriptor_parse(device_framework,
 8015a04:	2208      	movs	r2, #8
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8015a06:	602b      	str	r3, [r5, #0]
    _ux_utility_descriptor_parse(device_framework,
 8015a08:	003b      	movs	r3, r7
 8015a0a:	4956      	ldr	r1, [pc, #344]	@ (8015b64 <_ux_device_stack_configuration_set+0x1ec>)
 8015a0c:	33a8      	adds	r3, #168	@ 0xa8
 8015a0e:	9801      	ldr	r0, [sp, #4]
 8015a10:	f000 fdf5 	bl	80165fe <_ux_utility_descriptor_parse>
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8015a14:	ab08      	add	r3, sp, #32
 8015a16:	7adb      	ldrb	r3, [r3, #11]
 8015a18:	4951      	ldr	r1, [pc, #324]	@ (8015b60 <_ux_device_stack_configuration_set+0x1e8>)
 8015a1a:	065a      	lsls	r2, r3, #25
 8015a1c:	6809      	ldr	r1, [r1, #0]
 8015a1e:	0fd2      	lsrs	r2, r2, #31
 8015a20:	3201      	adds	r2, #1
 8015a22:	31fc      	adds	r1, #252	@ 0xfc
 8015a24:	64ca      	str	r2, [r1, #76]	@ 0x4c
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8015a26:	2201      	movs	r2, #1
    iad_flag =  UX_FALSE;
 8015a28:	0025      	movs	r5, r4
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8015a2a:	115b      	asrs	r3, r3, #5
 8015a2c:	4013      	ands	r3, r2
 8015a2e:	650b      	str	r3, [r1, #80]	@ 0x50
    device_framework_length =  configuration_descriptor.wTotalLength;
 8015a30:	ab08      	add	r3, sp, #32
 8015a32:	88db      	ldrh	r3, [r3, #6]
ULONG                           iad_first_interface =  0;
 8015a34:	9406      	str	r4, [sp, #24]
    device_framework_length =  configuration_descriptor.wTotalLength;
 8015a36:	9303      	str	r3, [sp, #12]
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8015a38:	9404      	str	r4, [sp, #16]
    while (device_framework_length != 0)
 8015a3a:	9b03      	ldr	r3, [sp, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d11d      	bne.n	8015a7c <_ux_device_stack_configuration_set+0x104>
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8015a40:	2203      	movs	r2, #3
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8015a42:	2113      	movs	r1, #19
 8015a44:	0038      	movs	r0, r7
 8015a46:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8015a48:	627a      	str	r2, [r7, #36]	@ 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8015a4a:	4798      	blx	r3
        return(UX_SUCCESS);
 8015a4c:	2000      	movs	r0, #0
 8015a4e:	e7b0      	b.n	80159b2 <_ux_device_stack_configuration_set+0x3a>
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015a50:	003b      	movs	r3, r7
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8015a52:	2603      	movs	r6, #3
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015a54:	33b4      	adds	r3, #180	@ 0xb4
 8015a56:	681c      	ldr	r4, [r3, #0]
        while (interface_ptr != UX_NULL)
 8015a58:	2c00      	cmp	r4, #0
 8015a5a:	d0c6      	beq.n	80159ea <_ux_device_stack_configuration_set+0x72>
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8015a5c:	6863      	ldr	r3, [r4, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8015a5e:	960f      	str	r6, [sp, #60]	@ 0x3c
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8015a60:	9411      	str	r4, [sp, #68]	@ 0x44
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8015a62:	9317      	str	r3, [sp, #92]	@ 0x5c
            if (class_inst != UX_NULL)
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d002      	beq.n	8015a6e <_ux_device_stack_configuration_set+0xf6>
                class_inst -> ux_slave_class_entry_function(&class_command);
 8015a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a6a:	a80f      	add	r0, sp, #60	@ 0x3c
 8015a6c:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8015a6e:	69a3      	ldr	r3, [r4, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 8015a70:	0020      	movs	r0, r4
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8015a72:	9303      	str	r3, [sp, #12]
            _ux_device_stack_interface_delete(interface_ptr);
 8015a74:	f000 fb98 	bl	80161a8 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 8015a78:	9c03      	ldr	r4, [sp, #12]
 8015a7a:	e7ed      	b.n	8015a58 <_ux_device_stack_configuration_set+0xe0>
        descriptor_length =  (ULONG) *device_framework;
 8015a7c:	9b01      	ldr	r3, [sp, #4]
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	9307      	str	r3, [sp, #28]
        descriptor_type =  *(device_framework + 1);
 8015a82:	9b01      	ldr	r3, [sp, #4]
 8015a84:	785b      	ldrb	r3, [r3, #1]
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8015a86:	2b0b      	cmp	r3, #11
 8015a88:	d10e      	bne.n	8015aa8 <_ux_device_stack_configuration_set+0x130>
            iad_flag = UX_TRUE;
 8015a8a:	2501      	movs	r5, #1
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8015a8c:	9b01      	ldr	r3, [sp, #4]
 8015a8e:	789b      	ldrb	r3, [r3, #2]
 8015a90:	9306      	str	r3, [sp, #24]
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8015a92:	9b01      	ldr	r3, [sp, #4]
 8015a94:	78dc      	ldrb	r4, [r3, #3]
        device_framework_length -=  descriptor_length;
 8015a96:	9a07      	ldr	r2, [sp, #28]
 8015a98:	9b03      	ldr	r3, [sp, #12]
        device_framework +=  descriptor_length;
 8015a9a:	4694      	mov	ip, r2
        device_framework_length -=  descriptor_length;
 8015a9c:	1a9b      	subs	r3, r3, r2
 8015a9e:	9303      	str	r3, [sp, #12]
        device_framework +=  descriptor_length;
 8015aa0:	9b01      	ldr	r3, [sp, #4]
 8015aa2:	4463      	add	r3, ip
 8015aa4:	9301      	str	r3, [sp, #4]
 8015aa6:	e7c8      	b.n	8015a3a <_ux_device_stack_configuration_set+0xc2>
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8015aa8:	2b04      	cmp	r3, #4
 8015aaa:	d1f4      	bne.n	8015a96 <_ux_device_stack_configuration_set+0x11e>
            _ux_utility_descriptor_parse(device_framework,
 8015aac:	492e      	ldr	r1, [pc, #184]	@ (8015b68 <_ux_device_stack_configuration_set+0x1f0>)
 8015aae:	ab0c      	add	r3, sp, #48	@ 0x30
 8015ab0:	2209      	movs	r2, #9
 8015ab2:	9801      	ldr	r0, [sp, #4]
 8015ab4:	f000 fda3 	bl	80165fe <_ux_utility_descriptor_parse>
            if (interface_descriptor.bAlternateSetting == 0)
 8015ab8:	ab08      	add	r3, sp, #32
 8015aba:	7cd9      	ldrb	r1, [r3, #19]
 8015abc:	2900      	cmp	r1, #0
 8015abe:	d1ea      	bne.n	8015a96 <_ux_device_stack_configuration_set+0x11e>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015ac0:	4b27      	ldr	r3, [pc, #156]	@ (8015b60 <_ux_device_stack_configuration_set+0x1e8>)
 8015ac2:	6818      	ldr	r0, [r3, #0]
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8015ac4:	ab08      	add	r3, sp, #32
 8015ac6:	7c9b      	ldrb	r3, [r3, #18]
                if (iad_flag == UX_TRUE)
 8015ac8:	2d01      	cmp	r5, #1
 8015aca:	d12d      	bne.n	8015b28 <_ux_device_stack_configuration_set+0x1b0>
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8015acc:	9a06      	ldr	r2, [sp, #24]
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	d124      	bne.n	8015b1c <_ux_device_stack_configuration_set+0x1a4>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015ad2:	0005      	movs	r5, r0
 8015ad4:	35fc      	adds	r5, #252	@ 0xfc
 8015ad6:	686a      	ldr	r2, [r5, #4]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015ad8:	682d      	ldr	r5, [r5, #0]
 8015ada:	46ac      	mov	ip, r5
 8015adc:	458c      	cmp	ip, r1
 8015ade:	d101      	bne.n	8015ae4 <_ux_device_stack_configuration_set+0x16c>
 8015ae0:	9a04      	ldr	r2, [sp, #16]
 8015ae2:	e00d      	b.n	8015b00 <_ux_device_stack_configuration_set+0x188>
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8015ae4:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8015ae6:	2e01      	cmp	r6, #1
 8015ae8:	d115      	bne.n	8015b16 <_ux_device_stack_configuration_set+0x19e>
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8015aea:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8015aec:	42b3      	cmp	r3, r6
 8015aee:	d112      	bne.n	8015b16 <_ux_device_stack_configuration_set+0x19e>
 8015af0:	6dd6      	ldr	r6, [r2, #92]	@ 0x5c
 8015af2:	9d02      	ldr	r5, [sp, #8]
 8015af4:	42ae      	cmp	r6, r5
 8015af6:	d10e      	bne.n	8015b16 <_ux_device_stack_configuration_set+0x19e>
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8015af8:	3340      	adds	r3, #64	@ 0x40
 8015afa:	009b      	lsls	r3, r3, #2
 8015afc:	18c3      	adds	r3, r0, r3
 8015afe:	605a      	str	r2, [r3, #4]
                    iad_number_interfaces--;
 8015b00:	3c01      	subs	r4, #1
                    if (iad_number_interfaces == 0)
 8015b02:	0025      	movs	r5, r4
 8015b04:	1e6b      	subs	r3, r5, #1
 8015b06:	419d      	sbcs	r5, r3
 8015b08:	9204      	str	r2, [sp, #16]
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	9903      	ldr	r1, [sp, #12]
 8015b0e:	9801      	ldr	r0, [sp, #4]
 8015b10:	f000 fb6e 	bl	80161f0 <_ux_device_stack_interface_set>
 8015b14:	e7bf      	b.n	8015a96 <_ux_device_stack_configuration_set+0x11e>
                            class_inst ++;
 8015b16:	3264      	adds	r2, #100	@ 0x64
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015b18:	3101      	adds	r1, #1
 8015b1a:	e7df      	b.n	8015adc <_ux_device_stack_configuration_set+0x164>
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8015b1c:	3340      	adds	r3, #64	@ 0x40
 8015b1e:	9a04      	ldr	r2, [sp, #16]
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	18c3      	adds	r3, r0, r3
 8015b24:	605a      	str	r2, [r3, #4]
 8015b26:	e7db      	b.n	8015ae0 <_ux_device_stack_configuration_set+0x168>
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8015b28:	0001      	movs	r1, r0
 8015b2a:	31fc      	adds	r1, #252	@ 0xfc
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015b2c:	c906      	ldmia	r1, {r1, r2}
 8015b2e:	468c      	mov	ip, r1
 8015b30:	9505      	str	r5, [sp, #20]
 8015b32:	9905      	ldr	r1, [sp, #20]
 8015b34:	458c      	cmp	ip, r1
 8015b36:	d0e8      	beq.n	8015b0a <_ux_device_stack_configuration_set+0x192>
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8015b38:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8015b3a:	2e01      	cmp	r6, #1
 8015b3c:	d10b      	bne.n	8015b56 <_ux_device_stack_configuration_set+0x1de>
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8015b3e:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8015b40:	42b3      	cmp	r3, r6
 8015b42:	d108      	bne.n	8015b56 <_ux_device_stack_configuration_set+0x1de>
 8015b44:	6dd6      	ldr	r6, [r2, #92]	@ 0x5c
 8015b46:	9902      	ldr	r1, [sp, #8]
 8015b48:	428e      	cmp	r6, r1
 8015b4a:	d104      	bne.n	8015b56 <_ux_device_stack_configuration_set+0x1de>
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8015b4c:	3340      	adds	r3, #64	@ 0x40
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	18c3      	adds	r3, r0, r3
 8015b52:	605a      	str	r2, [r3, #4]
                                break;
 8015b54:	e7d9      	b.n	8015b0a <_ux_device_stack_configuration_set+0x192>
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015b56:	9905      	ldr	r1, [sp, #20]
                        class_inst ++;
 8015b58:	3264      	adds	r2, #100	@ 0x64
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8015b5a:	3101      	adds	r1, #1
 8015b5c:	9105      	str	r1, [sp, #20]
 8015b5e:	e7e8      	b.n	8015b32 <_ux_device_stack_configuration_set+0x1ba>
 8015b60:	20003104 	.word	0x20003104
 8015b64:	20000243 	.word	0x20000243
 8015b68:	2000023a 	.word	0x2000023a

08015b6c <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8015b6c:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8015b6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8015b70:	b095      	sub	sp, #84	@ 0x54
 8015b72:	0004      	movs	r4, r0
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8015b74:	9305      	str	r3, [sp, #20]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d000      	beq.n	8015b7c <_ux_device_stack_control_request_process+0x10>
 8015b7a:	e0cc      	b.n	8015d16 <_ux_device_stack_control_request_process+0x1aa>
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015b7c:	4b67      	ldr	r3, [pc, #412]	@ (8015d1c <_ux_device_stack_control_request_process+0x1b0>)
 8015b7e:	681e      	ldr	r6, [r3, #0]
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8015b80:	0003      	movs	r3, r0
 8015b82:	333c      	adds	r3, #60	@ 0x3c
 8015b84:	781d      	ldrb	r5, [r3, #0]
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8015b86:	3301      	adds	r3, #1
 8015b88:	781b      	ldrb	r3, [r3, #0]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8015b8a:	303e      	adds	r0, #62	@ 0x3e
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8015b8c:	9306      	str	r3, [sp, #24]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8015b8e:	f000 febe 	bl	801690e <_ux_utility_short_get>
 8015b92:	9003      	str	r0, [sp, #12]
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8015b94:	0020      	movs	r0, r4
 8015b96:	3040      	adds	r0, #64	@ 0x40
 8015b98:	f000 feb9 	bl	801690e <_ux_utility_short_get>
 8015b9c:	9004      	str	r0, [sp, #16]
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8015b9e:	0020      	movs	r0, r4
 8015ba0:	3042      	adds	r0, #66	@ 0x42
 8015ba2:	f000 feb4 	bl	801690e <_ux_utility_short_get>

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8015ba6:	9b06      	ldr	r3, [sp, #24]
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8015ba8:	9007      	str	r0, [sp, #28]
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8015baa:	1f9a      	subs	r2, r3, #6
 8015bac:	2360      	movs	r3, #96	@ 0x60
 8015bae:	2a01      	cmp	r2, #1
 8015bb0:	d83f      	bhi.n	8015c32 <_ux_device_stack_control_request_process+0xc6>
 8015bb2:	22c0      	movs	r2, #192	@ 0xc0
 8015bb4:	9903      	ldr	r1, [sp, #12]
 8015bb6:	01d2      	lsls	r2, r2, #7
 8015bb8:	4211      	tst	r1, r2
 8015bba:	d03a      	beq.n	8015c32 <_ux_device_stack_control_request_process+0xc6>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8015bbc:	439d      	bics	r5, r3
            request_type |= UX_REQUEST_TYPE_CLASS;
 8015bbe:	3b40      	subs	r3, #64	@ 0x40
 8015bc0:	431d      	orrs	r5, r3
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8015bc2:	2360      	movs	r3, #96	@ 0x60
 8015bc4:	2220      	movs	r2, #32
 8015bc6:	402b      	ands	r3, r5
 8015bc8:	3b20      	subs	r3, #32
 8015bca:	4393      	bics	r3, r2
 8015bcc:	1e1f      	subs	r7, r3, #0
 8015bce:	d15c      	bne.n	8015c8a <_ux_device_stack_control_request_process+0x11e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8015bd0:	2304      	movs	r3, #4
 8015bd2:	9309      	str	r3, [sp, #36]	@ 0x24
UINT                        status =  UX_ERROR;
 8015bd4:	33fb      	adds	r3, #251	@ 0xfb
 8015bd6:	9305      	str	r3, [sp, #20]
            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8015bd8:	003a      	movs	r2, r7
 8015bda:	4b50      	ldr	r3, [pc, #320]	@ (8015d1c <_ux_device_stack_control_request_process+0x1b0>)
 8015bdc:	3240      	adds	r2, #64	@ 0x40
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	0092      	lsls	r2, r2, #2
 8015be2:	189b      	adds	r3, r3, r2
 8015be4:	685b      	ldr	r3, [r3, #4]

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d018      	beq.n	8015c1c <_ux_device_stack_control_request_process+0xb0>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8015bea:	2203      	movs	r2, #3
 8015bec:	402a      	ands	r2, r5
 8015bee:	2a01      	cmp	r2, #1
 8015bf0:	d10d      	bne.n	8015c0e <_ux_device_stack_control_request_process+0xa2>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8015bf2:	2da1      	cmp	r5, #161	@ 0xa1
 8015bf4:	d145      	bne.n	8015c82 <_ux_device_stack_control_request_process+0x116>
 8015bf6:	9a06      	ldr	r2, [sp, #24]
 8015bf8:	2a00      	cmp	r2, #0
 8015bfa:	d142      	bne.n	8015c82 <_ux_device_stack_control_request_process+0x116>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 8015bfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8015bfe:	7c52      	ldrb	r2, [r2, #17]
 8015c00:	2a07      	cmp	r2, #7
 8015c02:	d13e      	bne.n	8015c82 <_ux_device_stack_control_request_process+0x116>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 8015c04:	0022      	movs	r2, r4
 8015c06:	3241      	adds	r2, #65	@ 0x41
 8015c08:	7812      	ldrb	r2, [r2, #0]
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 8015c0a:	42ba      	cmp	r2, r7
 8015c0c:	d106      	bne.n	8015c1c <_ux_device_stack_control_request_process+0xb0>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8015c0e:	9311      	str	r3, [sp, #68]	@ 0x44

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8015c10:	a809      	add	r0, sp, #36	@ 0x24
 8015c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c14:	4798      	blx	r3
 8015c16:	9005      	str	r0, [sp, #20]

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d02f      	beq.n	8015c7c <_ux_device_stack_control_request_process+0x110>
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8015c1c:	3701      	adds	r7, #1
 8015c1e:	2f10      	cmp	r7, #16
 8015c20:	d1da      	bne.n	8015bd8 <_ux_device_stack_control_request_process+0x6c>

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8015c22:	9b05      	ldr	r3, [sp, #20]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d029      	beq.n	8015c7c <_ux_device_stack_control_request_process+0x110>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8015c28:	0030      	movs	r0, r6
 8015c2a:	303c      	adds	r0, #60	@ 0x3c
 8015c2c:	f000 f99e 	bl	8015f6c <_ux_device_stack_endpoint_stall>
 8015c30:	e024      	b.n	8015c7c <_ux_device_stack_control_request_process+0x110>
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8015c32:	402b      	ands	r3, r5
 8015c34:	2b40      	cmp	r3, #64	@ 0x40
 8015c36:	d1c4      	bne.n	8015bc2 <_ux_device_stack_control_request_process+0x56>
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8015c38:	4b38      	ldr	r3, [pc, #224]	@ (8015d1c <_ux_device_stack_control_request_process+0x1b0>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	33fc      	adds	r3, #252	@ 0xfc
 8015c3e:	6f5f      	ldr	r7, [r3, #116]	@ 0x74
 8015c40:	2f00      	cmp	r7, #0
 8015c42:	d0be      	beq.n	8015bc2 <_ux_device_stack_control_request_process+0x56>
 8015c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c46:	9a06      	ldr	r2, [sp, #24]
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	d1ba      	bne.n	8015bc2 <_ux_device_stack_control_request_process+0x56>
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8015c4c:	2380      	movs	r3, #128	@ 0x80
 8015c4e:	005b      	lsls	r3, r3, #1
 8015c50:	9309      	str	r3, [sp, #36]	@ 0x24
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8015c52:	ab09      	add	r3, sp, #36	@ 0x24
 8015c54:	9301      	str	r3, [sp, #4]
 8015c56:	68e3      	ldr	r3, [r4, #12]
 8015c58:	9a04      	ldr	r2, [sp, #16]
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	9903      	ldr	r1, [sp, #12]
 8015c5e:	9b07      	ldr	r3, [sp, #28]
 8015c60:	9806      	ldr	r0, [sp, #24]
 8015c62:	47b8      	blx	r7
                if (status == UX_SUCCESS)
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d1df      	bne.n	8015c28 <_ux_device_stack_control_request_process+0xbc>
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015c68:	0033      	movs	r3, r6
 8015c6a:	2203      	movs	r2, #3
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015c6c:	0030      	movs	r0, r6
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015c6e:	3308      	adds	r3, #8
 8015c70:	67da      	str	r2, [r3, #124]	@ 0x7c
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8015c72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015c74:	9a07      	ldr	r2, [sp, #28]
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015c76:	305c      	adds	r0, #92	@ 0x5c
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8015c78:	f000 fbf2 	bl	8016460 <_ux_device_stack_transfer_request>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
    }

    /* Return the function status.  */
    return(status);
}
 8015c7c:	9805      	ldr	r0, [sp, #20]
 8015c7e:	b015      	add	sp, #84	@ 0x54
 8015c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if ((request_index & 0xFF) != class_index)
 8015c82:	21ff      	movs	r1, #255	@ 0xff
 8015c84:	9a04      	ldr	r2, [sp, #16]
 8015c86:	400a      	ands	r2, r1
 8015c88:	e7bf      	b.n	8015c0a <_ux_device_stack_control_request_process+0x9e>
        switch (request)
 8015c8a:	9b06      	ldr	r3, [sp, #24]
 8015c8c:	2b0c      	cmp	r3, #12
 8015c8e:	d840      	bhi.n	8015d12 <_ux_device_stack_control_request_process+0x1a6>
 8015c90:	0018      	movs	r0, r3
 8015c92:	f7ea fa41 	bl	8000118 <__gnu_thumb1_case_sqi>
 8015c96:	1407      	.short	0x1407
 8015c98:	203e1a3e 	.word	0x203e1a3e
 8015c9c:	312e3e28 	.word	0x312e3e28
 8015ca0:	3935      	.short	0x3935
 8015ca2:	f3          	.byte	0xf3
 8015ca3:	00          	.byte	0x00
            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8015ca4:	0028      	movs	r0, r5
 8015ca6:	9a07      	ldr	r2, [sp, #28]
 8015ca8:	9904      	ldr	r1, [sp, #16]
 8015caa:	f000 f981 	bl	8015fb0 <_ux_device_stack_get_status>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8015cae:	1e04      	subs	r4, r0, #0
        if (status != UX_SUCCESS)
 8015cb0:	d0e4      	beq.n	8015c7c <_ux_device_stack_control_request_process+0x110>
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8015cb2:	0030      	movs	r0, r6
 8015cb4:	303c      	adds	r0, #60	@ 0x3c
 8015cb6:	f000 f959 	bl	8015f6c <_ux_device_stack_endpoint_stall>
 8015cba:	9405      	str	r4, [sp, #20]
 8015cbc:	e7de      	b.n	8015c7c <_ux_device_stack_control_request_process+0x110>
            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8015cbe:	0028      	movs	r0, r5
 8015cc0:	9a04      	ldr	r2, [sp, #16]
 8015cc2:	9903      	ldr	r1, [sp, #12]
 8015cc4:	f7ff fe10 	bl	80158e8 <_ux_device_stack_clear_feature>
 8015cc8:	e7f1      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8015cca:	0028      	movs	r0, r5
 8015ccc:	9a04      	ldr	r2, [sp, #16]
 8015cce:	9903      	ldr	r1, [sp, #12]
 8015cd0:	f000 fb52 	bl	8016378 <_ux_device_stack_set_feature>
 8015cd4:	e7eb      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            dcd -> ux_slave_dcd_device_address =  request_value;
 8015cd6:	9b03      	ldr	r3, [sp, #12]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8015cd8:	2111      	movs	r1, #17
            dcd -> ux_slave_dcd_device_address =  request_value;
 8015cda:	6173      	str	r3, [r6, #20]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8015cdc:	0030      	movs	r0, r6
 8015cde:	69b3      	ldr	r3, [r6, #24]
 8015ce0:	9a03      	ldr	r2, [sp, #12]
 8015ce2:	4798      	blx	r3
 8015ce4:	e7e3      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8015ce6:	9a07      	ldr	r2, [sp, #28]
 8015ce8:	9904      	ldr	r1, [sp, #16]
 8015cea:	9803      	ldr	r0, [sp, #12]
 8015cec:	f000 f818 	bl	8015d20 <_ux_device_stack_descriptor_send>
 8015cf0:	e7dd      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_get();
 8015cf2:	f7ff fe2d 	bl	8015950 <_ux_device_stack_configuration_get>
 8015cf6:	e7da      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_configuration_set(request_value);
 8015cf8:	9803      	ldr	r0, [sp, #12]
 8015cfa:	f7ff fe3d 	bl	8015978 <_ux_device_stack_configuration_set>
 8015cfe:	e7d6      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_get(request_index);
 8015d00:	9804      	ldr	r0, [sp, #16]
 8015d02:	f7ff fc8f 	bl	8015624 <_ux_device_stack_alternate_setting_get>
 8015d06:	e7d2      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8015d08:	9903      	ldr	r1, [sp, #12]
 8015d0a:	9804      	ldr	r0, [sp, #16]
 8015d0c:	f7ff fcb0 	bl	8015670 <_ux_device_stack_alternate_setting_set>
 8015d10:	e7cd      	b.n	8015cae <_ux_device_stack_control_request_process+0x142>
        switch (request)
 8015d12:	2454      	movs	r4, #84	@ 0x54
 8015d14:	e7cd      	b.n	8015cb2 <_ux_device_stack_control_request_process+0x146>
UINT                        status =  UX_ERROR;
 8015d16:	23ff      	movs	r3, #255	@ 0xff
 8015d18:	9305      	str	r3, [sp, #20]
 8015d1a:	e7af      	b.n	8015c7c <_ux_device_stack_control_request_process+0x110>
 8015d1c:	20003104 	.word	0x20003104

08015d20 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8015d20:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d22:	4e72      	ldr	r6, [pc, #456]	@ (8015eec <_ux_device_stack_descriptor_send+0x1cc>)
{
 8015d24:	0015      	movs	r5, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d26:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015d28:	2203      	movs	r2, #3
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015d2a:	0023      	movs	r3, r4
{
 8015d2c:	b08d      	sub	sp, #52	@ 0x34
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015d2e:	333c      	adds	r3, #60	@ 0x3c
 8015d30:	9301      	str	r3, [sp, #4]
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015d32:	3320      	adds	r3, #32
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015d34:	629a      	str	r2, [r3, #40]	@ 0x28
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015d36:	9302      	str	r3, [sp, #8]

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8015d38:	0002      	movs	r2, r0
 8015d3a:	23ff      	movs	r3, #255	@ 0xff
 8015d3c:	401a      	ands	r2, r3
 8015d3e:	9203      	str	r2, [sp, #12]

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8015d40:	0a02      	lsrs	r2, r0, #8
 8015d42:	4013      	ands	r3, r2

    /* Default descriptor length is host length.  */
    length =  host_length;

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8015d44:	1e58      	subs	r0, r3, #1
{
 8015d46:	9105      	str	r1, [sp, #20]
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8015d48:	9204      	str	r2, [sp, #16]
    switch (descriptor_type)
 8015d4a:	280e      	cmp	r0, #14
 8015d4c:	d900      	bls.n	8015d50 <_ux_device_stack_descriptor_send+0x30>
 8015d4e:	e09f      	b.n	8015e90 <_ux_device_stack_descriptor_send+0x170>
 8015d50:	f7ea f9ec 	bl	800012c <__gnu_thumb1_case_uqi>
 8015d54:	9e6d3108 	.word	0x9e6d3108
 8015d58:	9e31169e 	.word	0x9e31169e
 8015d5c:	9e9e9e1b 	.word	0x9e9e9e1b
 8015d60:	9e9e      	.short	0x9e9e
 8015d62:	31          	.byte	0x31
 8015d63:	00          	.byte	0x00
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8015d64:	002e      	movs	r6, r5
 8015d66:	2d12      	cmp	r5, #18
 8015d68:	d900      	bls.n	8015d6c <_ux_device_stack_descriptor_send+0x4c>
 8015d6a:	2612      	movs	r6, #18
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015d6c:	0022      	movs	r2, r4
 8015d6e:	32cc      	adds	r2, #204	@ 0xcc
 8015d70:	6811      	ldr	r1, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015d72:	3204      	adds	r2, #4
        device_framework_end = device_framework + device_framework_length;
 8015d74:	6812      	ldr	r2, [r2, #0]
 8015d76:	188a      	adds	r2, r1, r2

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8015d78:	4291      	cmp	r1, r2
 8015d7a:	d30b      	bcc.n	8015d94 <_ux_device_stack_descriptor_send+0x74>
            if (string_framework_length == 0)
            {

                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
 8015d7c:	20ff      	movs	r0, #255	@ 0xff
 8015d7e:	e016      	b.n	8015dae <_ux_device_stack_descriptor_send+0x8e>
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8015d80:	002e      	movs	r6, r5
 8015d82:	2d0a      	cmp	r5, #10
 8015d84:	d9f2      	bls.n	8015d6c <_ux_device_stack_descriptor_send+0x4c>
 8015d86:	260a      	movs	r6, #10
 8015d88:	e7f0      	b.n	8015d6c <_ux_device_stack_descriptor_send+0x4c>
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8015d8a:	002e      	movs	r6, r5
 8015d8c:	2d05      	cmp	r5, #5
 8015d8e:	d9ed      	bls.n	8015d6c <_ux_device_stack_descriptor_send+0x4c>
 8015d90:	2605      	movs	r6, #5
 8015d92:	e7eb      	b.n	8015d6c <_ux_device_stack_descriptor_send+0x4c>
            if (*(device_framework + 1) == descriptor_type)
 8015d94:	784f      	ldrb	r7, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 8015d96:	7808      	ldrb	r0, [r1, #0]
            if (*(device_framework + 1) == descriptor_type)
 8015d98:	429f      	cmp	r7, r3
 8015d9a:	d10a      	bne.n	8015db2 <_ux_device_stack_descriptor_send+0x92>
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8015d9c:	0032      	movs	r2, r6
 8015d9e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8015da0:	f000 fd7c 	bl	801689c <_ux_utility_memory_copy>
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015da4:	002a      	movs	r2, r5
 8015da6:	0031      	movs	r1, r6
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015da8:	9802      	ldr	r0, [sp, #8]
 8015daa:	f000 fb59 	bl	8016460 <_ux_device_stack_transfer_request>
        return(UX_ERROR);
    }

    /* Return the status to the caller.  */
    return(status);
}
 8015dae:	b00d      	add	sp, #52	@ 0x34
 8015db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            device_framework +=  descriptor_length;
 8015db2:	1809      	adds	r1, r1, r0
 8015db4:	e7e0      	b.n	8015d78 <_ux_device_stack_descriptor_send+0x58>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8015db6:	0022      	movs	r2, r4
        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 8015db8:	2b07      	cmp	r3, #7
 8015dba:	d11e      	bne.n	8015dfa <_ux_device_stack_descriptor_send+0xda>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8015dbc:	32d4      	adds	r2, #212	@ 0xd4
{
 8015dbe:	2100      	movs	r1, #0
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015dc0:	6816      	ldr	r6, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8015dc2:	3204      	adds	r2, #4
            device_framework_end = device_framework + device_framework_length;
 8015dc4:	6812      	ldr	r2, [r2, #0]
 8015dc6:	18b2      	adds	r2, r6, r2
        while (device_framework < device_framework_end)
 8015dc8:	4296      	cmp	r6, r2
 8015dca:	d2d7      	bcs.n	8015d7c <_ux_device_stack_descriptor_send+0x5c>
            descriptor_length =  (ULONG) *device_framework;
 8015dcc:	7837      	ldrb	r7, [r6, #0]
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8015dce:	7870      	ldrb	r0, [r6, #1]
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8015dd0:	2b0f      	cmp	r3, #15
 8015dd2:	d114      	bne.n	8015dfe <_ux_device_stack_descriptor_send+0xde>
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8015dd4:	280f      	cmp	r0, #15
 8015dd6:	d11d      	bne.n	8015e14 <_ux_device_stack_descriptor_send+0xf4>
                    _ux_utility_descriptor_parse(device_framework,
 8015dd8:	af07      	add	r7, sp, #28
 8015dda:	003b      	movs	r3, r7
 8015ddc:	2204      	movs	r2, #4
 8015dde:	4944      	ldr	r1, [pc, #272]	@ (8015ef0 <_ux_device_stack_descriptor_send+0x1d0>)
                        _ux_utility_descriptor_parse(device_framework,
 8015de0:	0030      	movs	r0, r6
 8015de2:	f000 fc0c 	bl	80165fe <_ux_utility_descriptor_parse>
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 8015de6:	887f      	ldrh	r7, [r7, #2]
            if (target_descriptor_length < host_length)
 8015de8:	42af      	cmp	r7, r5
 8015dea:	d900      	bls.n	8015dee <_ux_device_stack_descriptor_send+0xce>
 8015dec:	002f      	movs	r7, r5
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015dee:	2380      	movs	r3, #128	@ 0x80
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	429f      	cmp	r7, r3
 8015df4:	d910      	bls.n	8015e18 <_ux_device_stack_descriptor_send+0xf8>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8015df6:	2212      	movs	r2, #18
 8015df8:	e025      	b.n	8015e46 <_ux_device_stack_descriptor_send+0x126>
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015dfa:	32cc      	adds	r2, #204	@ 0xcc
 8015dfc:	e7df      	b.n	8015dbe <_ux_device_stack_descriptor_send+0x9e>
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8015dfe:	2802      	cmp	r0, #2
 8015e00:	d108      	bne.n	8015e14 <_ux_device_stack_descriptor_send+0xf4>
                    if (parsed_descriptor_index == descriptor_index)
 8015e02:	9803      	ldr	r0, [sp, #12]
 8015e04:	4281      	cmp	r1, r0
 8015e06:	d104      	bne.n	8015e12 <_ux_device_stack_descriptor_send+0xf2>
                        _ux_utility_descriptor_parse(device_framework,
 8015e08:	af09      	add	r7, sp, #36	@ 0x24
 8015e0a:	003b      	movs	r3, r7
 8015e0c:	2208      	movs	r2, #8
 8015e0e:	4939      	ldr	r1, [pc, #228]	@ (8015ef4 <_ux_device_stack_descriptor_send+0x1d4>)
 8015e10:	e7e6      	b.n	8015de0 <_ux_device_stack_descriptor_send+0xc0>
                        parsed_descriptor_index++;
 8015e12:	3101      	adds	r1, #1
            device_framework +=  descriptor_length;
 8015e14:	19f6      	adds	r6, r6, r7
 8015e16:	e7d7      	b.n	8015dc8 <_ux_device_stack_descriptor_send+0xa8>
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8015e18:	003a      	movs	r2, r7
 8015e1a:	0031      	movs	r1, r6
 8015e1c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8015e1e:	f000 fd3d 	bl	801689c <_ux_utility_memory_copy>
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8015e22:	9a04      	ldr	r2, [sp, #16]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8015e24:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015e26:	0039      	movs	r1, r7
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8015e28:	705a      	strb	r2, [r3, #1]
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015e2a:	002a      	movs	r2, r5
 8015e2c:	e7bc      	b.n	8015da8 <_ux_device_stack_descriptor_send+0x88>
        if (descriptor_index == 0)
 8015e2e:	9b03      	ldr	r3, [sp, #12]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d128      	bne.n	8015e86 <_ux_device_stack_descriptor_send+0x166>
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015e34:	0023      	movs	r3, r4
 8015e36:	2280      	movs	r2, #128	@ 0x80
 8015e38:	33f0      	adds	r3, #240	@ 0xf0
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	0052      	lsls	r2, r2, #1
 8015e3e:	3302      	adds	r3, #2
 8015e40:	4293      	cmp	r3, r2
 8015e42:	d90a      	bls.n	8015e5a <_ux_device_stack_descriptor_send+0x13a>
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8015e44:	3aee      	subs	r2, #238	@ 0xee
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8015e46:	2109      	movs	r1, #9
 8015e48:	2002      	movs	r0, #2
 8015e4a:	f000 fb71 	bl	8016530 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015e4e:	2114      	movs	r1, #20
 8015e50:	0020      	movs	r0, r4
 8015e52:	69a3      	ldr	r3, [r4, #24]
 8015e54:	9a01      	ldr	r2, [sp, #4]
 8015e56:	4798      	blx	r3
            if (string_framework_length == 0)
 8015e58:	e7a9      	b.n	8015dae <_ux_device_stack_descriptor_send+0x8e>
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015e5a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8015e5c:	7003      	strb	r3, [r0, #0]
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8015e5e:	2303      	movs	r3, #3
 8015e60:	7043      	strb	r3, [r0, #1]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8015e62:	6833      	ldr	r3, [r6, #0]
 8015e64:	3002      	adds	r0, #2
 8015e66:	001a      	movs	r2, r3
 8015e68:	33ec      	adds	r3, #236	@ 0xec
 8015e6a:	32f0      	adds	r2, #240	@ 0xf0
 8015e6c:	6819      	ldr	r1, [r3, #0]
 8015e6e:	6812      	ldr	r2, [r2, #0]
 8015e70:	f000 fd14 	bl	801689c <_ux_utility_memory_copy>
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8015e74:	6833      	ldr	r3, [r6, #0]
 8015e76:	33f0      	adds	r3, #240	@ 0xf0
 8015e78:	6819      	ldr	r1, [r3, #0]
 8015e7a:	3102      	adds	r1, #2
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8015e7c:	42a9      	cmp	r1, r5
 8015e7e:	d900      	bls.n	8015e82 <_ux_device_stack_descriptor_send+0x162>
 8015e80:	0029      	movs	r1, r5
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8015e82:	002a      	movs	r2, r5
 8015e84:	e790      	b.n	8015da8 <_ux_device_stack_descriptor_send+0x88>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8015e86:	0023      	movs	r3, r4
 8015e88:	33e4      	adds	r3, #228	@ 0xe4
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8015e8a:	cbc0      	ldmia	r3!, {r6, r7}
            while (string_framework_length != 0)
 8015e8c:	2f00      	cmp	r7, #0
 8015e8e:	d105      	bne.n	8015e9c <_ux_device_stack_descriptor_send+0x17c>
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015e90:	2114      	movs	r1, #20
 8015e92:	0020      	movs	r0, r4
 8015e94:	69a3      	ldr	r3, [r4, #24]
 8015e96:	9a01      	ldr	r2, [sp, #4]
 8015e98:	4798      	blx	r3
        return(UX_ERROR);
 8015e9a:	e76f      	b.n	8015d7c <_ux_device_stack_descriptor_send+0x5c>
                if (_ux_utility_short_get(string_framework) == request_index)
 8015e9c:	0030      	movs	r0, r6
 8015e9e:	f000 fd36 	bl	801690e <_ux_utility_short_get>
 8015ea2:	9a05      	ldr	r2, [sp, #20]
 8015ea4:	78f3      	ldrb	r3, [r6, #3]
 8015ea6:	4290      	cmp	r0, r2
 8015ea8:	d11b      	bne.n	8015ee2 <_ux_device_stack_descriptor_send+0x1c2>
                    if (*(string_framework + 2) == descriptor_index)
 8015eaa:	78b2      	ldrb	r2, [r6, #2]
 8015eac:	9903      	ldr	r1, [sp, #12]
 8015eae:	428a      	cmp	r2, r1
 8015eb0:	d117      	bne.n	8015ee2 <_ux_device_stack_descriptor_send+0x1c2>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	005a      	lsls	r2, r3, #1
 8015eb6:	2b80      	cmp	r3, #128	@ 0x80
 8015eb8:	dc9d      	bgt.n	8015df6 <_ux_device_stack_descriptor_send+0xd6>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015eba:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8015ebc:	2400      	movs	r4, #0
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8015ebe:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8015ec0:	2203      	movs	r2, #3
 8015ec2:	705a      	strb	r2, [r3, #1]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8015ec4:	0032      	movs	r2, r6
 8015ec6:	3302      	adds	r3, #2
 8015ec8:	78f1      	ldrb	r1, [r6, #3]
 8015eca:	1b90      	subs	r0, r2, r6
 8015ecc:	4281      	cmp	r1, r0
 8015ece:	d802      	bhi.n	8015ed6 <_ux_device_stack_descriptor_send+0x1b6>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8015ed0:	3101      	adds	r1, #1
 8015ed2:	0049      	lsls	r1, r1, #1
 8015ed4:	e7d2      	b.n	8015e7c <_ux_device_stack_descriptor_send+0x15c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8015ed6:	7911      	ldrb	r1, [r2, #4]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8015ed8:	705c      	strb	r4, [r3, #1]
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8015eda:	7019      	strb	r1, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8015edc:	3201      	adds	r2, #1
 8015ede:	3302      	adds	r3, #2
 8015ee0:	e7f2      	b.n	8015ec8 <_ux_device_stack_descriptor_send+0x1a8>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8015ee2:	3f04      	subs	r7, #4
 8015ee4:	1aff      	subs	r7, r7, r3
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 8015ee6:	3304      	adds	r3, #4
 8015ee8:	18f6      	adds	r6, r6, r3
 8015eea:	e7cf      	b.n	8015e8c <_ux_device_stack_descriptor_send+0x16c>
 8015eec:	20003104 	.word	0x20003104
 8015ef0:	20000236 	.word	0x20000236
 8015ef4:	20000243 	.word	0x20000243

08015ef8 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8015ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015efa:	4f1b      	ldr	r7, [pc, #108]	@ (8015f68 <_ux_device_stack_disconnect+0x70>)
{
 8015efc:	b08f      	sub	sp, #60	@ 0x3c
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015efe:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015f00:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8015f02:	2e03      	cmp	r6, #3
 8015f04:	d11e      	bne.n	8015f44 <_ux_device_stack_disconnect+0x4c>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8015f06:	0023      	movs	r3, r4
 8015f08:	33b4      	adds	r3, #180	@ 0xb4
 8015f0a:	681d      	ldr	r5, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8015f0c:	2d00      	cmp	r5, #0
 8015f0e:	d109      	bne.n	8015f24 <_ux_device_stack_disconnect+0x2c>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8015f10:	2301      	movs	r3, #1
 8015f12:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8015f14:	0022      	movs	r2, r4
 8015f16:	210f      	movs	r1, #15
 8015f18:	0020      	movs	r0, r4
 8015f1a:	69a3      	ldr	r3, [r4, #24]
 8015f1c:	323c      	adds	r2, #60	@ 0x3c
 8015f1e:	4798      	blx	r3
 8015f20:	0005      	movs	r5, r0
 8015f22:	e012      	b.n	8015f4a <_ux_device_stack_disconnect+0x52>
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 8015f24:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8015f26:	9603      	str	r6, [sp, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8015f28:	9505      	str	r5, [sp, #20]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8015f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
            if (class_ptr != UX_NULL)
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d002      	beq.n	8015f36 <_ux_device_stack_disconnect+0x3e>
                class_ptr -> ux_slave_class_entry_function(&class_command);
 8015f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f32:	a803      	add	r0, sp, #12
 8015f34:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8015f36:	69ab      	ldr	r3, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 8015f38:	0028      	movs	r0, r5
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8015f3a:	9301      	str	r3, [sp, #4]
            _ux_device_stack_interface_delete(interface_ptr);
 8015f3c:	f000 f934 	bl	80161a8 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
 8015f40:	9d01      	ldr	r5, [sp, #4]
 8015f42:	e7e3      	b.n	8015f0c <_ux_device_stack_disconnect+0x14>
UINT                        status = UX_ERROR;
 8015f44:	25ff      	movs	r5, #255	@ 0xff
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8015f46:	2e01      	cmp	r6, #1
 8015f48:	d0e4      	beq.n	8015f14 <_ux_device_stack_disconnect+0x1c>
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8015f4a:	0022      	movs	r2, r4
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	32a4      	adds	r2, #164	@ 0xa4
 8015f50:	6013      	str	r3, [r2, #0]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8015f52:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	33fc      	adds	r3, #252	@ 0xfc
 8015f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d001      	beq.n	8015f62 <_ux_device_stack_disconnect+0x6a>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8015f5e:	200a      	movs	r0, #10
 8015f60:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 8015f62:	0028      	movs	r0, r5
 8015f64:	b00f      	add	sp, #60	@ 0x3c
 8015f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f68:	20003104 	.word	0x20003104

08015f6c <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8015f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015f6e:	4d0f      	ldr	r5, [pc, #60]	@ (8015fac <_ux_device_stack_endpoint_stall+0x40>)
{
 8015f70:	0004      	movs	r4, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015f72:	682f      	ldr	r7, [r5, #0]
       section where interrupts are disabled.  */
    status =  UX_ERROR;

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8015f74:	f002 fdca 	bl	8018b0c <_ux_utility_interrupt_disable>

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8015f78:	682b      	ldr	r3, [r5, #0]
    UX_DISABLE
 8015f7a:	0006      	movs	r6, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8015f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    status =  UX_ERROR;
 8015f7e:	25ff      	movs	r5, #255	@ 0xff
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d00d      	beq.n	8015fa0 <_ux_device_stack_endpoint_stall+0x34>
 8015f84:	6863      	ldr	r3, [r4, #4]
 8015f86:	2b02      	cmp	r3, #2
 8015f88:	d00a      	beq.n	8015fa0 <_ux_device_stack_endpoint_stall+0x34>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	0022      	movs	r2, r4
 8015f8e:	2114      	movs	r1, #20
 8015f90:	0038      	movs	r0, r7
 8015f92:	4798      	blx	r3

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8015f94:	7be3      	ldrb	r3, [r4, #15]
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015f96:	0005      	movs	r5, r0
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8015f98:	079b      	lsls	r3, r3, #30
 8015f9a:	d001      	beq.n	8015fa0 <_ux_device_stack_endpoint_stall+0x34>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 8015f9c:	2302      	movs	r3, #2
 8015f9e:	6063      	str	r3, [r4, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 8015fa0:	0030      	movs	r0, r6
 8015fa2:	f002 fdb7 	bl	8018b14 <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
}
 8015fa6:	0028      	movs	r0, r5
 8015fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015faa:	46c0      	nop			@ (mov r8, r8)
 8015fac:	20003104 	.word	0x20003104

08015fb0 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8015fb0:	000a      	movs	r2, r1

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8015fb2:	2100      	movs	r1, #0
{
 8015fb4:	b570      	push	{r4, r5, r6, lr}
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8015fb6:	0006      	movs	r6, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015fb8:	4b20      	ldr	r3, [pc, #128]	@ (801603c <_ux_device_stack_get_status+0x8c>)
 8015fba:	681c      	ldr	r4, [r3, #0]
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8015fbc:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8015fbe:	7029      	strb	r1, [r5, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8015fc0:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8015fc2:	7069      	strb	r1, [r5, #1]
    switch (request_type & UX_REQUEST_TARGET)
 8015fc4:	3103      	adds	r1, #3
 8015fc6:	400e      	ands	r6, r1
 8015fc8:	4208      	tst	r0, r1
 8015fca:	d00a      	beq.n	8015fe2 <_ux_device_stack_get_status+0x32>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015fcc:	0025      	movs	r5, r4
 8015fce:	69a3      	ldr	r3, [r4, #24]
 8015fd0:	353c      	adds	r5, #60	@ 0x3c
    switch (request_type & UX_REQUEST_TARGET)
 8015fd2:	2e02      	cmp	r6, #2
 8015fd4:	d026      	beq.n	8016024 <_ux_device_stack_get_status+0x74>
        break;

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8015fd6:	002a      	movs	r2, r5
 8015fd8:	2114      	movs	r1, #20
 8015fda:	0020      	movs	r0, r4
 8015fdc:	4798      	blx	r3
            return(UX_SUCCESS);            
 8015fde:	2000      	movs	r0, #0
    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);

    /* Return the function status.  */
    return(status);
}
 8015fe0:	bd70      	pop	{r4, r5, r6, pc}
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8015fe2:	20f0      	movs	r0, #240	@ 0xf0
            data_length = 1;
 8015fe4:	2101      	movs	r1, #1
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8015fe6:	0200      	lsls	r0, r0, #8
 8015fe8:	4282      	cmp	r2, r0
 8015fea:	d011      	beq.n	8016010 <_ux_device_stack_get_status+0x60>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8015fec:	681a      	ldr	r2, [r3, #0]
 8015fee:	32fc      	adds	r2, #252	@ 0xfc
 8015ff0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8015ff2:	2a02      	cmp	r2, #2
 8015ff4:	d101      	bne.n	8015ffa <_ux_device_stack_get_status+0x4a>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8015ff6:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8015ff8:	7011      	strb	r1, [r2, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	33fc      	adds	r3, #252	@ 0xfc
 8015ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016000:	2b00      	cmp	r3, #0
 8016002:	d004      	beq.n	801600e <_ux_device_stack_get_status+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8016004:	2302      	movs	r3, #2
 8016006:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8016008:	7811      	ldrb	r1, [r2, #0]
 801600a:	430b      	orrs	r3, r1
 801600c:	7013      	strb	r3, [r2, #0]
    data_length = 2;
 801600e:	2102      	movs	r1, #2
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016010:	0023      	movs	r3, r4
 8016012:	2203      	movs	r2, #3
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016014:	0020      	movs	r0, r4
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016016:	3308      	adds	r3, #8
 8016018:	67da      	str	r2, [r3, #124]	@ 0x7c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801601a:	305c      	adds	r0, #92	@ 0x5c
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 801601c:	000a      	movs	r2, r1
 801601e:	f000 fa1f 	bl	8016460 <_ux_device_stack_transfer_request>
    return(status);
 8016022:	e7dd      	b.n	8015fe0 <_ux_device_stack_get_status+0x30>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 8016024:	2115      	movs	r1, #21
 8016026:	0020      	movs	r0, r4
 8016028:	4798      	blx	r3
        if (status != UX_ERROR)
 801602a:	28ff      	cmp	r0, #255	@ 0xff
 801602c:	d004      	beq.n	8016038 <_ux_device_stack_get_status+0x88>
            if (status == UX_TRUE)
 801602e:	2801      	cmp	r0, #1
 8016030:	d1ed      	bne.n	801600e <_ux_device_stack_get_status+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8016032:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8016034:	7018      	strb	r0, [r3, #0]
 8016036:	e7ea      	b.n	801600e <_ux_device_stack_get_status+0x5e>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016038:	69a3      	ldr	r3, [r4, #24]
 801603a:	e7cc      	b.n	8015fd6 <_ux_device_stack_get_status+0x26>
 801603c:	20003104 	.word	0x20003104

08016040 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8016040:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016042:	4c58      	ldr	r4, [pc, #352]	@ (80161a4 <_ux_device_stack_initialize+0x164>)
{
 8016044:	b085      	sub	sp, #20
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016046:	6825      	ldr	r5, [r4, #0]

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 8016048:	002e      	movs	r6, r5
 801604a:	36dc      	adds	r6, #220	@ 0xdc
 801604c:	6030      	str	r0, [r6, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 801604e:	0028      	movs	r0, r5
 8016050:	30e0      	adds	r0, #224	@ 0xe0
 8016052:	6001      	str	r1, [r0, #0]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 8016054:	0029      	movs	r1, r5
 8016056:	31d4      	adds	r1, #212	@ 0xd4
 8016058:	600a      	str	r2, [r1, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 801605a:	002a      	movs	r2, r5
 801605c:	32d8      	adds	r2, #216	@ 0xd8
 801605e:	6013      	str	r3, [r2, #0]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8016060:	002b      	movs	r3, r5
 8016062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016064:	33e4      	adds	r3, #228	@ 0xe4
 8016066:	601a      	str	r2, [r3, #0]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8016068:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801606a:	2100      	movs	r1, #0
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801606c:	605a      	str	r2, [r3, #4]
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 801606e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016070:	3308      	adds	r3, #8
 8016072:	601a      	str	r2, [r3, #0]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8016074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 8016076:	0008      	movs	r0, r1
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 8016078:	605a      	str	r2, [r3, #4]
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 801607a:	2202      	movs	r2, #2
 801607c:	611a      	str	r2, [r3, #16]
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 801607e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    if (memory == UX_NULL)
        return(UX_MEMORY_INSUFFICIENT);
 8016080:	2612      	movs	r6, #18
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8016082:	67da      	str	r2, [r3, #124]	@ 0x7c
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 8016084:	22c8      	movs	r2, #200	@ 0xc8
 8016086:	f000 fb13 	bl	80166b0 <_ux_utility_memory_allocate>
    if (memory == UX_NULL)
 801608a:	2800      	cmp	r0, #0
 801608c:	d100      	bne.n	8016090 <_ux_device_stack_initialize+0x50>
 801608e:	e086      	b.n	801619e <_ux_device_stack_initialize+0x15e>
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8016090:	2280      	movs	r2, #128	@ 0x80
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8016092:	6823      	ldr	r3, [r4, #0]
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8016094:	2101      	movs	r1, #1
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8016096:	33fc      	adds	r3, #252	@ 0xfc
 8016098:	6058      	str	r0, [r3, #4]
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 801609a:	0052      	lsls	r2, r2, #1
 801609c:	2000      	movs	r0, #0
 801609e:	f000 fb07 	bl	80166b0 <_ux_utility_memory_allocate>
    transfer_request -> ux_slave_transfer_request_data_pointer =
 80160a2:	66a8      	str	r0, [r5, #104]	@ 0x68

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d05a      	beq.n	801615e <_ux_device_stack_initialize+0x11e>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	001a      	movs	r2, r3
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80160ac:	33d8      	adds	r3, #216	@ 0xd8
 80160ae:	681e      	ldr	r6, [r3, #0]

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
        local_endpoints_found              =  0;
        endpoints_in_interface_found       =  0;
 80160b0:	2300      	movs	r3, #0
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80160b2:	32d4      	adds	r2, #212	@ 0xd4
 80160b4:	6811      	ldr	r1, [r2, #0]
        local_endpoints_found              =  0;
 80160b6:	0018      	movs	r0, r3
        local_interfaces_found             =  0;
 80160b8:	001a      	movs	r2, r3
    endpoints_found                    =  0;
 80160ba:	469c      	mov	ip, r3
    interfaces_found                   =  0;
 80160bc:	001c      	movs	r4, r3
    max_interface_number               =  0;
 80160be:	9302      	str	r3, [sp, #8]

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 80160c0:	2e00      	cmp	r6, #0
 80160c2:	d11c      	bne.n	80160fe <_ux_device_stack_initialize+0xbe>
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 80160c4:	4294      	cmp	r4, r2
 80160c6:	d342      	bcc.n	801614e <_ux_device_stack_initialize+0x10e>
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 80160c8:	1e22      	subs	r2, r4, #0
 80160ca:	d140      	bne.n	801614e <_ux_device_stack_initialize+0x10e>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 80160cc:	2103      	movs	r1, #3
 80160ce:	2002      	movs	r0, #2
 80160d0:	3242      	adds	r2, #66	@ 0x42
 80160d2:	f000 fa2d 	bl	8016530 <_ux_system_error_handler>
 80160d6:	3642      	adds	r6, #66	@ 0x42

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 80160d8:	002b      	movs	r3, r5
 80160da:	33b8      	adds	r3, #184	@ 0xb8
 80160dc:	6818      	ldr	r0, [r3, #0]
 80160de:	2800      	cmp	r0, #0
 80160e0:	d001      	beq.n	80160e6 <_ux_device_stack_initialize+0xa6>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 80160e2:	f000 fbe5 	bl	80168b0 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80160e6:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d001      	beq.n	80160f0 <_ux_device_stack_initialize+0xb0>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80160ec:	f000 fbe0 	bl	80168b0 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 80160f0:	4b2c      	ldr	r3, [pc, #176]	@ (80161a4 <_ux_device_stack_initialize+0x164>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	33fc      	adds	r3, #252	@ 0xfc
 80160f6:	6858      	ldr	r0, [r3, #4]
 80160f8:	f000 fbda 	bl	80168b0 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 80160fc:	e04f      	b.n	801619e <_ux_device_stack_initialize+0x15e>
            descriptor_length =  (ULONG) *device_framework;
 80160fe:	780f      	ldrb	r7, [r1, #0]
 8016100:	9703      	str	r7, [sp, #12]
            descriptor_type =  *(device_framework + 1);
 8016102:	784f      	ldrb	r7, [r1, #1]
            switch(descriptor_type)
 8016104:	2f02      	cmp	r7, #2
 8016106:	d017      	beq.n	8016138 <_ux_device_stack_initialize+0xf8>
 8016108:	2f04      	cmp	r7, #4
 801610a:	d10c      	bne.n	8016126 <_ux_device_stack_initialize+0xe6>
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801610c:	790f      	ldrb	r7, [r1, #4]
 801610e:	9701      	str	r7, [sp, #4]
                if (*(device_framework + 3) == 0)
 8016110:	78cf      	ldrb	r7, [r1, #3]
 8016112:	2f00      	cmp	r7, #0
 8016114:	d10b      	bne.n	801612e <_ux_device_stack_initialize+0xee>
                    local_endpoints_found += endpoints_in_interface_found;
 8016116:	18c0      	adds	r0, r0, r3
                    local_interfaces_found++;
 8016118:	3201      	adds	r2, #1
                if (*(device_framework + 2) > max_interface_number)
 801611a:	788b      	ldrb	r3, [r1, #2]
 801611c:	9f02      	ldr	r7, [sp, #8]
 801611e:	429f      	cmp	r7, r3
 8016120:	d200      	bcs.n	8016124 <_ux_device_stack_initialize+0xe4>
 8016122:	9302      	str	r3, [sp, #8]
 8016124:	9b01      	ldr	r3, [sp, #4]
            device_framework_length -=  descriptor_length;
 8016126:	9f03      	ldr	r7, [sp, #12]
 8016128:	1bf6      	subs	r6, r6, r7
            device_framework +=  descriptor_length;
 801612a:	19c9      	adds	r1, r1, r7
 801612c:	e7c8      	b.n	80160c0 <_ux_device_stack_initialize+0x80>
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 801612e:	9f01      	ldr	r7, [sp, #4]
 8016130:	429f      	cmp	r7, r3
 8016132:	d2f2      	bcs.n	801611a <_ux_device_stack_initialize+0xda>
 8016134:	9301      	str	r3, [sp, #4]
 8016136:	e7f0      	b.n	801611a <_ux_device_stack_initialize+0xda>
                if (local_interfaces_found > interfaces_found)
 8016138:	4294      	cmp	r4, r2
 801613a:	d200      	bcs.n	801613e <_ux_device_stack_initialize+0xfe>
 801613c:	0014      	movs	r4, r2
                local_endpoints_found += endpoints_in_interface_found;
 801613e:	18c3      	adds	r3, r0, r3
                if (local_endpoints_found > endpoints_found)
 8016140:	459c      	cmp	ip, r3
 8016142:	d200      	bcs.n	8016146 <_ux_device_stack_initialize+0x106>
 8016144:	469c      	mov	ip, r3
                endpoints_in_interface_found  =  0;
 8016146:	2300      	movs	r3, #0
                local_endpoints_found         =  0;
 8016148:	0018      	movs	r0, r3
                local_interfaces_found =  0;
 801614a:	001a      	movs	r2, r3
 801614c:	e7eb      	b.n	8016126 <_ux_device_stack_initialize+0xe6>
        if (status == UX_SUCCESS &&
 801614e:	9902      	ldr	r1, [sp, #8]
 8016150:	290f      	cmp	r1, #15
 8016152:	d906      	bls.n	8016162 <_ux_device_stack_initialize+0x122>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 8016154:	2212      	movs	r2, #18
 8016156:	2103      	movs	r1, #3
 8016158:	2002      	movs	r0, #2
 801615a:	f000 f9e9 	bl	8016530 <_ux_system_error_handler>
    if (status == UX_SUCCESS)
 801615e:	2612      	movs	r6, #18
 8016160:	e7ba      	b.n	80160d8 <_ux_device_stack_initialize+0x98>
        local_endpoints_found += endpoints_in_interface_found;
 8016162:	18c4      	adds	r4, r0, r3
        if (local_endpoints_found > endpoints_found)
 8016164:	4564      	cmp	r4, ip
 8016166:	d200      	bcs.n	801616a <_ux_device_stack_initialize+0x12a>
 8016168:	4664      	mov	r4, ip
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801616a:	002b      	movs	r3, r5
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 801616c:	2100      	movs	r1, #0
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801616e:	33bc      	adds	r3, #188	@ 0xbc
 8016170:	601a      	str	r2, [r3, #0]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8016172:	609c      	str	r4, [r3, #8]
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8016174:	0008      	movs	r0, r1
 8016176:	2320      	movs	r3, #32
 8016178:	f000 fb00 	bl	801677c <_ux_utility_memory_allocate_mulc_safe>
        if (interfaces_pool == UX_NULL)
 801617c:	2800      	cmp	r0, #0
 801617e:	d0ee      	beq.n	801615e <_ux_device_stack_initialize+0x11e>
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8016180:	002b      	movs	r3, r5
 8016182:	33b8      	adds	r3, #184	@ 0xb8
 8016184:	6018      	str	r0, [r3, #0]
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8016186:	2c00      	cmp	r4, #0
 8016188:	d009      	beq.n	801619e <_ux_device_stack_initialize+0x15e>
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 801618a:	2100      	movs	r1, #0
 801618c:	2368      	movs	r3, #104	@ 0x68
 801618e:	0022      	movs	r2, r4
 8016190:	0008      	movs	r0, r1
 8016192:	f000 faf3 	bl	801677c <_ux_utility_memory_allocate_mulc_safe>
        if (endpoints_pool == UX_NULL)
 8016196:	2800      	cmp	r0, #0
 8016198:	d0e1      	beq.n	801615e <_ux_device_stack_initialize+0x11e>
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 801619a:	35c0      	adds	r5, #192	@ 0xc0
 801619c:	6028      	str	r0, [r5, #0]
}
 801619e:	0030      	movs	r0, r6
 80161a0:	b005      	add	sp, #20
 80161a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161a4:	20003104 	.word	0x20003104

080161a8 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 80161a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161aa:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80161ac:	4e0f      	ldr	r6, [pc, #60]	@ (80161ec <_ux_device_stack_interface_delete+0x44>)

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 80161ae:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
 80161b0:	6833      	ldr	r3, [r6, #0]
 80161b2:	9301      	str	r3, [sp, #4]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 80161b4:	2c00      	cmp	r4, #0
 80161b6:	d10a      	bne.n	80161ce <_ux_device_stack_interface_delete+0x26>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 80161b8:	9b01      	ldr	r3, [sp, #4]
 80161ba:	69aa      	ldr	r2, [r5, #24]
 80161bc:	33b4      	adds	r3, #180	@ 0xb4
 80161be:	601a      	str	r2, [r3, #0]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 80161c0:	0020      	movs	r0, r4
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 80161c2:	606c      	str	r4, [r5, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 80161c4:	60ac      	str	r4, [r5, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 80161c6:	61ac      	str	r4, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 80161c8:	61ec      	str	r4, [r5, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 80161ca:	602c      	str	r4, [r5, #0]
}
 80161cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 80161ce:	6830      	ldr	r0, [r6, #0]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 80161d0:	0022      	movs	r2, r4
 80161d2:	6983      	ldr	r3, [r0, #24]
 80161d4:	210f      	movs	r1, #15
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80161d6:	6967      	ldr	r7, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 80161d8:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80161da:	2300      	movs	r3, #0
 80161dc:	6023      	str	r3, [r4, #0]
        endpoint -> ux_slave_endpoint_state =  0;
 80161de:	6063      	str	r3, [r4, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80161e0:	6163      	str	r3, [r4, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80161e2:	61a3      	str	r3, [r4, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80161e4:	61e3      	str	r3, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80161e6:	003c      	movs	r4, r7
 80161e8:	e7e4      	b.n	80161b4 <_ux_device_stack_interface_delete+0xc>
 80161ea:	46c0      	nop			@ (mov r8, r8)
 80161ec:	20003104 	.word	0x20003104

080161f0 <_ux_device_stack_interface_set>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80161f0:	4b47      	ldr	r3, [pc, #284]	@ (8016310 <_ux_device_stack_interface_set+0x120>)
{
 80161f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80161f4:	681f      	ldr	r7, [r3, #0]
{
 80161f6:	0006      	movs	r6, r0
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80161f8:	003b      	movs	r3, r7
{
 80161fa:	000c      	movs	r4, r1
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80161fc:	33b8      	adds	r3, #184	@ 0xb8
 80161fe:	681d      	ldr	r5, [r3, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 8016200:	3304      	adds	r3, #4
 8016202:	681b      	ldr	r3, [r3, #0]
{
 8016204:	b085      	sub	sp, #20
    while (interfaces_pool_number != 0)
 8016206:	2b00      	cmp	r3, #0
 8016208:	d102      	bne.n	8016210 <_ux_device_stack_interface_set+0x20>
        interfaces_pool_number--;
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
        return(UX_MEMORY_INSUFFICIENT);
 801620a:	2012      	movs	r0, #18
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);

    /* Return the status to the caller.  */
    return(status);
}
 801620c:	b005      	add	sp, #20
 801620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 8016210:	682a      	ldr	r2, [r5, #0]
 8016212:	2a00      	cmp	r2, #0
 8016214:	d002      	beq.n	801621c <_ux_device_stack_interface_set+0x2c>
        interface_ptr++;
 8016216:	3520      	adds	r5, #32
        interfaces_pool_number--;
 8016218:	3b01      	subs	r3, #1
 801621a:	e7f4      	b.n	8016206 <_ux_device_stack_interface_set+0x16>
    interface_ptr -> ux_slave_interface_status = UX_USED;
 801621c:	2301      	movs	r3, #1
 801621e:	602b      	str	r3, [r5, #0]
    _ux_utility_descriptor_parse(device_framework,
 8016220:	002b      	movs	r3, r5
 8016222:	2209      	movs	r2, #9
 8016224:	330c      	adds	r3, #12
 8016226:	0030      	movs	r0, r6
 8016228:	493a      	ldr	r1, [pc, #232]	@ (8016314 <_ux_device_stack_interface_set+0x124>)
 801622a:	f000 f9e8 	bl	80165fe <_ux_utility_descriptor_parse>
    if (device -> ux_slave_device_first_interface == UX_NULL)
 801622e:	003a      	movs	r2, r7
 8016230:	32b4      	adds	r2, #180	@ 0xb4
 8016232:	6813      	ldr	r3, [r2, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d117      	bne.n	8016268 <_ux_device_stack_interface_set+0x78>
        device -> ux_slave_device_first_interface =  interface_ptr;
 8016238:	6015      	str	r5, [r2, #0]
    device =  &_ux_system_slave -> ux_system_slave_device;
 801623a:	003b      	movs	r3, r7
 801623c:	3324      	adds	r3, #36	@ 0x24
 801623e:	9303      	str	r3, [sp, #12]
    device_framework_length -=  (ULONG) *device_framework;
 8016240:	7833      	ldrb	r3, [r6, #0]
 8016242:	1ae2      	subs	r2, r4, r3
 8016244:	9201      	str	r2, [sp, #4]
        device_framework +=  descriptor_length;
 8016246:	18f6      	adds	r6, r6, r3
    while (device_framework_length != 0)
 8016248:	9b01      	ldr	r3, [sp, #4]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d008      	beq.n	8016260 <_ux_device_stack_interface_set+0x70>
        descriptor_length =  (ULONG) *device_framework;
 801624e:	7833      	ldrb	r3, [r6, #0]
 8016250:	9302      	str	r3, [sp, #8]
        descriptor_type =  *(device_framework + 1);
 8016252:	7873      	ldrb	r3, [r6, #1]
        switch(descriptor_type)
 8016254:	2b04      	cmp	r3, #4
 8016256:	d003      	beq.n	8016260 <_ux_device_stack_interface_set+0x70>
 8016258:	2b05      	cmp	r3, #5
 801625a:	d00b      	beq.n	8016274 <_ux_device_stack_interface_set+0x84>
 801625c:	2b02      	cmp	r3, #2
 801625e:	d14b      	bne.n	80162f8 <_ux_device_stack_interface_set+0x108>
    status =  _ux_device_stack_interface_start(interface_ptr);
 8016260:	0028      	movs	r0, r5
 8016262:	f000 f85b 	bl	801631c <_ux_device_stack_interface_start>
    return(status);
 8016266:	e7d1      	b.n	801620c <_ux_device_stack_interface_set+0x1c>
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8016268:	001a      	movs	r2, r3
 801626a:	699b      	ldr	r3, [r3, #24]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d1fb      	bne.n	8016268 <_ux_device_stack_interface_set+0x78>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8016270:	6195      	str	r5, [r2, #24]
 8016272:	e7e2      	b.n	801623a <_ux_device_stack_interface_set+0x4a>
            endpoint = device -> ux_slave_device_endpoints_pool;
 8016274:	003b      	movs	r3, r7
 8016276:	33c0      	adds	r3, #192	@ 0xc0
 8016278:	681c      	ldr	r4, [r3, #0]
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801627a:	3304      	adds	r3, #4
 801627c:	681b      	ldr	r3, [r3, #0]
            while (endpoints_pool_number != 0)
 801627e:	2b00      	cmp	r3, #0
 8016280:	d0c3      	beq.n	801620a <_ux_device_stack_interface_set+0x1a>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8016282:	6822      	ldr	r2, [r4, #0]
 8016284:	2a00      	cmp	r2, #0
 8016286:	d130      	bne.n	80162ea <_ux_device_stack_interface_set+0xfa>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 8016288:	2301      	movs	r3, #1
 801628a:	6023      	str	r3, [r4, #0]
            _ux_utility_descriptor_parse(device_framework,
 801628c:	0023      	movs	r3, r4
 801628e:	4922      	ldr	r1, [pc, #136]	@ (8016318 <_ux_device_stack_interface_set+0x128>)
 8016290:	330c      	adds	r3, #12
 8016292:	3206      	adds	r2, #6
 8016294:	0030      	movs	r0, r6
 8016296:	f000 f9b2 	bl	80165fe <_ux_utility_descriptor_parse>
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801629a:	4a1d      	ldr	r2, [pc, #116]	@ (8016310 <_ux_device_stack_interface_set+0x120>)
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801629c:	8a21      	ldrh	r1, [r4, #16]
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801629e:	6812      	ldr	r2, [r2, #0]
            max_transfer_length =
 80162a0:	054b      	lsls	r3, r1, #21
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80162a2:	32fc      	adds	r2, #252	@ 0xfc
 80162a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
            max_transfer_length =
 80162a6:	0d5b      	lsrs	r3, r3, #21
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80162a8:	2a02      	cmp	r2, #2
 80162aa:	d10c      	bne.n	80162c6 <_ux_device_stack_interface_set+0xd6>
 80162ac:	2001      	movs	r0, #1
 80162ae:	7be2      	ldrb	r2, [r4, #15]
 80162b0:	4202      	tst	r2, r0
 80162b2:	d008      	beq.n	80162c6 <_ux_device_stack_interface_set+0xd6>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80162b4:	20c0      	movs	r0, #192	@ 0xc0
 80162b6:	000a      	movs	r2, r1
 80162b8:	0140      	lsls	r0, r0, #5
 80162ba:	4002      	ands	r2, r0
                if (n_trans)
 80162bc:	4201      	tst	r1, r0
 80162be:	d002      	beq.n	80162c6 <_ux_device_stack_interface_set+0xd6>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 80162c0:	0ad2      	lsrs	r2, r2, #11
                    n_trans ++;
 80162c2:	3201      	adds	r2, #1
                    max_transfer_length *= n_trans;
 80162c4:	4353      	muls	r3, r2
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 80162c6:	6423      	str	r3, [r4, #64]	@ 0x40
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80162c8:	2301      	movs	r3, #1
 80162ca:	425b      	negs	r3, r3
 80162cc:	6563      	str	r3, [r4, #84]	@ 0x54
            endpoint -> ux_slave_endpoint_device =  device;
 80162ce:	9b03      	ldr	r3, [sp, #12]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80162d0:	0022      	movs	r2, r4
            endpoint -> ux_slave_endpoint_device =  device;
 80162d2:	61e3      	str	r3, [r4, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80162d4:	210e      	movs	r1, #14
 80162d6:	0038      	movs	r0, r7
 80162d8:	69bb      	ldr	r3, [r7, #24]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 80162da:	62a4      	str	r4, [r4, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 80162dc:	61a5      	str	r5, [r4, #24]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80162de:	4798      	blx	r3
            if (status != UX_SUCCESS)
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d005      	beq.n	80162f0 <_ux_device_stack_interface_set+0x100>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 80162e4:	2300      	movs	r3, #0
 80162e6:	6023      	str	r3, [r4, #0]
                return(status);
 80162e8:	e790      	b.n	801620c <_ux_device_stack_interface_set+0x1c>
                endpoint++;
 80162ea:	3468      	adds	r4, #104	@ 0x68
               endpoints_pool_number--; 
 80162ec:	3b01      	subs	r3, #1
 80162ee:	e7c6      	b.n	801627e <_ux_device_stack_interface_set+0x8e>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 80162f0:	69eb      	ldr	r3, [r5, #28]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d106      	bne.n	8016304 <_ux_device_stack_interface_set+0x114>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 80162f6:	61ec      	str	r4, [r5, #28]
        device_framework_length -=  descriptor_length;
 80162f8:	9b01      	ldr	r3, [sp, #4]
 80162fa:	9a02      	ldr	r2, [sp, #8]
 80162fc:	1a9b      	subs	r3, r3, r2
 80162fe:	9301      	str	r3, [sp, #4]
        device_framework +=  descriptor_length;
 8016300:	0013      	movs	r3, r2
 8016302:	e7a0      	b.n	8016246 <_ux_device_stack_interface_set+0x56>
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8016304:	001a      	movs	r2, r3
 8016306:	695b      	ldr	r3, [r3, #20]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d1fb      	bne.n	8016304 <_ux_device_stack_interface_set+0x114>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801630c:	6154      	str	r4, [r2, #20]
 801630e:	e7f3      	b.n	80162f8 <_ux_device_stack_interface_set+0x108>
 8016310:	20003104 	.word	0x20003104
 8016314:	2000023a 	.word	0x2000023a
 8016318:	20000259 	.word	0x20000259

0801631c <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 801631c:	b530      	push	{r4, r5, lr}
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 801631e:	4b15      	ldr	r3, [pc, #84]	@ (8016374 <_ux_device_stack_interface_start+0x58>)
{
 8016320:	0004      	movs	r4, r0
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	7b83      	ldrb	r3, [r0, #14]
{
 8016326:	b08d      	sub	sp, #52	@ 0x34
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8016328:	3340      	adds	r3, #64	@ 0x40
 801632a:	009b      	lsls	r3, r3, #2
 801632c:	18d3      	adds	r3, r2, r3
 801632e:	685d      	ldr	r5, [r3, #4]

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 8016330:	2d00      	cmp	r5, #0
 8016332:	d102      	bne.n	801633a <_ux_device_stack_interface_start+0x1e>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8016334:	2057      	movs	r0, #87	@ 0x57
        return(status); 
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
}
 8016336:	b00d      	add	sp, #52	@ 0x34
 8016338:	bd30      	pop	{r4, r5, pc}
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 801633a:	2301      	movs	r3, #1
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 801633c:	9003      	str	r0, [sp, #12]
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 801633e:	9301      	str	r3, [sp, #4]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 8016340:	7c43      	ldrb	r3, [r0, #17]
 8016342:	9306      	str	r3, [sp, #24]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8016344:	7c83      	ldrb	r3, [r0, #18]
 8016346:	9307      	str	r3, [sp, #28]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8016348:	7cc3      	ldrb	r3, [r0, #19]
 801634a:	9308      	str	r3, [sp, #32]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 801634c:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 801634e:	9305      	str	r3, [sp, #20]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8016350:	8e53      	ldrh	r3, [r2, #50]	@ 0x32
    class_ptr -> ux_slave_class_interface = interface_ptr;
 8016352:	6628      	str	r0, [r5, #96]	@ 0x60
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8016354:	9304      	str	r3, [sp, #16]
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8016356:	a801      	add	r0, sp, #4
 8016358:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801635a:	4798      	blx	r3
    if (status == UX_SUCCESS)
 801635c:	2800      	cmp	r0, #0
 801635e:	d1e9      	bne.n	8016334 <_ux_device_stack_interface_start+0x18>
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016360:	2302      	movs	r3, #2
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8016362:	9509      	str	r5, [sp, #36]	@ 0x24
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8016364:	9301      	str	r3, [sp, #4]
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8016366:	a801      	add	r0, sp, #4
 8016368:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801636a:	4798      	blx	r3
        if(status == UX_SUCCESS)
 801636c:	2800      	cmp	r0, #0
 801636e:	d1e2      	bne.n	8016336 <_ux_device_stack_interface_start+0x1a>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 8016370:	6065      	str	r5, [r4, #4]
 8016372:	e7e0      	b.n	8016336 <_ux_device_stack_interface_start+0x1a>
 8016374:	20003104 	.word	0x20003104

08016378 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8016378:	b570      	push	{r4, r5, r6, lr}
 801637a:	0005      	movs	r5, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801637c:	4b15      	ldr	r3, [pc, #84]	@ (80163d4 <_ux_device_stack_set_feature+0x5c>)
{
 801637e:	0014      	movs	r4, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016380:	6818      	ldr	r0, [r3, #0]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8016382:	002a      	movs	r2, r5
 8016384:	2303      	movs	r3, #3
 8016386:	401a      	ands	r2, r3
 8016388:	421d      	tst	r5, r3
 801638a:	d004      	beq.n	8016396 <_ux_device_stack_set_feature+0x1e>
 801638c:	2a02      	cmp	r2, #2
 801638e:	d00d      	beq.n	80163ac <_ux_device_stack_set_feature+0x34>
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016390:	0002      	movs	r2, r0
 8016392:	323c      	adds	r2, #60	@ 0x3c
 8016394:	e017      	b.n	80163c6 <_ux_device_stack_set_feature+0x4e>
                return (UX_SUCCESS);
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 8016396:	2354      	movs	r3, #84	@ 0x54
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8016398:	2901      	cmp	r1, #1
 801639a:	d105      	bne.n	80163a8 <_ux_device_stack_set_feature+0x30>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801639c:	30fc      	adds	r0, #252	@ 0xfc
 801639e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80163a0:	2a00      	cmp	r2, #0
 80163a2:	d001      	beq.n	80163a8 <_ux_device_stack_set_feature+0x30>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 80163a4:	6541      	str	r1, [r0, #84]	@ 0x54
                return (UX_SUCCESS);
 80163a6:	2300      	movs	r3, #0
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
    }
}
 80163a8:	0018      	movs	r0, r3
 80163aa:	bd70      	pop	{r4, r5, r6, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 80163ac:	0003      	movs	r3, r0
 80163ae:	33b4      	adds	r3, #180	@ 0xb4
 80163b0:	681b      	ldr	r3, [r3, #0]
        while (interface_ptr != UX_NULL)
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d0ec      	beq.n	8016390 <_ux_device_stack_set_feature+0x18>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 80163b6:	69da      	ldr	r2, [r3, #28]
            while (endpoint_target != UX_NULL)
 80163b8:	2a00      	cmp	r2, #0
 80163ba:	d101      	bne.n	80163c0 <_ux_device_stack_set_feature+0x48>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80163bc:	699b      	ldr	r3, [r3, #24]
 80163be:	e7f8      	b.n	80163b2 <_ux_device_stack_set_feature+0x3a>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 80163c0:	7b91      	ldrb	r1, [r2, #14]
 80163c2:	42a1      	cmp	r1, r4
 80163c4:	d103      	bne.n	80163ce <_ux_device_stack_set_feature+0x56>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 80163c6:	2114      	movs	r1, #20
 80163c8:	6983      	ldr	r3, [r0, #24]
 80163ca:	4798      	blx	r3
                    return(UX_SUCCESS);
 80163cc:	e7eb      	b.n	80163a6 <_ux_device_stack_set_feature+0x2e>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 80163ce:	6952      	ldr	r2, [r2, #20]
 80163d0:	e7f2      	b.n	80163b8 <_ux_device_stack_set_feature+0x40>
 80163d2:	46c0      	nop			@ (mov r8, r8)
 80163d4:	20003104 	.word	0x20003104

080163d8 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 80163d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UX_SLAVE_CLASS              *class_instance;
ULONG                       class_index;
UINT                        status;


    status = UX_STATE_RESET;
 80163da:	2500      	movs	r5, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80163dc:	002e      	movs	r6, r5
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 80163de:	4f0e      	ldr	r7, [pc, #56]	@ (8016418 <_ux_device_stack_tasks_run+0x40>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 80163e0:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 80163e2:	6838      	ldr	r0, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 80163e4:	2112      	movs	r1, #18
 80163e6:	6983      	ldr	r3, [r0, #24]
 80163e8:	4798      	blx	r3
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	33fc      	adds	r3, #252	@ 0xfc
 80163ee:	685c      	ldr	r4, [r3, #4]
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	33fc      	adds	r3, #252	@ 0xfc
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	42b3      	cmp	r3, r6
 80163f8:	d801      	bhi.n	80163fe <_ux_device_stack_tasks_run+0x26>
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
 80163fa:	0028      	movs	r0, r5
 80163fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 80163fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016400:	2b00      	cmp	r3, #0
 8016402:	d006      	beq.n	8016412 <_ux_device_stack_tasks_run+0x3a>
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 8016404:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016406:	2b00      	cmp	r3, #0
 8016408:	d003      	beq.n	8016412 <_ux_device_stack_tasks_run+0x3a>
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 801640a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 801640c:	4798      	blx	r3
        class_instance ++;
 801640e:	3464      	adds	r4, #100	@ 0x64
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 8016410:	4305      	orrs	r5, r0
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 8016412:	3601      	adds	r6, #1
 8016414:	e7ec      	b.n	80163f0 <_ux_device_stack_tasks_run+0x18>
 8016416:	46c0      	nop			@ (mov r8, r8)
 8016418:	20003104 	.word	0x20003104

0801641c <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 801641c:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801641e:	4b0c      	ldr	r3, [pc, #48]	@ (8016450 <_ux_device_stack_transfer_abort+0x34>)
{
 8016420:	0004      	movs	r4, r0

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8016422:	6241      	str	r1, [r0, #36]	@ 0x24
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016424:	681e      	ldr	r6, [r3, #0]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8016426:	f002 fb71 	bl	8018b0c <_ux_utility_interrupt_disable>

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 801642a:	6823      	ldr	r3, [r4, #0]
    UX_DISABLE
 801642c:	0005      	movs	r5, r0
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 801642e:	2b01      	cmp	r3, #1
 8016430:	d10b      	bne.n	801644a <_ux_device_stack_transfer_abort+0x2e>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8016432:	69b3      	ldr	r3, [r6, #24]
 8016434:	0022      	movs	r2, r4
 8016436:	210d      	movs	r1, #13
 8016438:	0030      	movs	r0, r6
 801643a:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 801643c:	0028      	movs	r0, r5
 801643e:	f002 fb69 	bl	8018b14 <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8016442:	2304      	movs	r3, #4
 8016444:	6023      	str	r3, [r4, #0]
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
}
 8016446:	2000      	movs	r0, #0
 8016448:	bd70      	pop	{r4, r5, r6, pc}
        UX_RESTORE
 801644a:	f002 fb63 	bl	8018b14 <_ux_utility_interrupt_restore>
 801644e:	e7fa      	b.n	8016446 <_ux_device_stack_transfer_abort+0x2a>
 8016450:	20003104 	.word	0x20003104

08016454 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8016454:	b510      	push	{r4, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016456:	3020      	adds	r0, #32
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8016458:	f7ff ffe0 	bl	801641c <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 801645c:	2000      	movs	r0, #0
 801645e:	bd10      	pop	{r4, pc}

08016460 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8016460:	b570      	push	{r4, r5, r6, lr}
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8016462:	2500      	movs	r5, #0
 8016464:	6305      	str	r5, [r0, #48]	@ 0x30
{
 8016466:	0004      	movs	r4, r0
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 8016468:	f000 f80a 	bl	8016480 <_ux_device_stack_transfer_run>
 801646c:	0003      	movs	r3, r0
    if (status == UX_STATE_LOCK)
        return(UX_BUSY);
 801646e:	20fe      	movs	r0, #254	@ 0xfe
    if (status == UX_STATE_LOCK)
 8016470:	2b06      	cmp	r3, #6
 8016472:	d003      	beq.n	801647c <_ux_device_stack_transfer_request+0x1c>
    if (status < UX_STATE_NEXT)
        return(transfer_request -> ux_slave_transfer_request_completion_code);

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 8016474:	0028      	movs	r0, r5
    if (status < UX_STATE_NEXT)
 8016476:	2b03      	cmp	r3, #3
 8016478:	d800      	bhi.n	801647c <_ux_device_stack_transfer_request+0x1c>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 801647a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

    /* And return the status.  */
    return(status);

#endif
}
 801647c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016480 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 8016480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8016482:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8016484:	0004      	movs	r4, r0
 8016486:	000d      	movs	r5, r1
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8016488:	2b01      	cmp	r3, #1
 801648a:	d104      	bne.n	8016496 <_ux_device_stack_transfer_run+0x16>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 801648c:	2300      	movs	r3, #0
 801648e:	6243      	str	r3, [r0, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 8016490:	2004      	movs	r0, #4
 8016492:	6320      	str	r0, [r4, #48]	@ 0x30
        return(UX_STATE_EXIT);
    }

    /* And return the status.  */
    return(status);
}
 8016494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8016496:	4b25      	ldr	r3, [pc, #148]	@ (801652c <_ux_device_stack_transfer_run+0xac>)
 8016498:	681e      	ldr	r6, [r3, #0]
        !(device_state == UX_DEVICE_ADDRESSED) &&
 801649a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 801649c:	3b01      	subs	r3, #1
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 801649e:	2b02      	cmp	r3, #2
 80164a0:	d905      	bls.n	80164ae <_ux_device_stack_transfer_run+0x2e>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 80164a2:	2325      	movs	r3, #37	@ 0x25
 80164a4:	6243      	str	r3, [r0, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 80164a6:	2300      	movs	r3, #0
        return(UX_STATE_EXIT);
 80164a8:	2001      	movs	r0, #1
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 80164aa:	6323      	str	r3, [r4, #48]	@ 0x30
        return(UX_STATE_EXIT);
 80164ac:	e7f2      	b.n	8016494 <_ux_device_stack_transfer_run+0x14>
    state = transfer_request -> ux_slave_transfer_request_state;
 80164ae:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80164b0:	6887      	ldr	r7, [r0, #8]
    switch(state)
 80164b2:	2920      	cmp	r1, #32
 80164b4:	d023      	beq.n	80164fe <_ux_device_stack_transfer_run+0x7e>
 80164b6:	2921      	cmp	r1, #33	@ 0x21
 80164b8:	d02a      	beq.n	8016510 <_ux_device_stack_transfer_run+0x90>
 80164ba:	2900      	cmp	r1, #0
 80164bc:	d1f3      	bne.n	80164a6 <_ux_device_stack_transfer_run+0x26>
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80164be:	2303      	movs	r3, #3
 80164c0:	7bf8      	ldrb	r0, [r7, #15]
 80164c2:	4218      	tst	r0, r3
 80164c4:	d02e      	beq.n	8016524 <_ux_device_stack_transfer_run+0xa4>
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 80164c6:	7bb8      	ldrb	r0, [r7, #14]
 80164c8:	287f      	cmp	r0, #127	@ 0x7f
 80164ca:	d90b      	bls.n	80164e4 <_ux_device_stack_transfer_run+0x64>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80164cc:	62a3      	str	r3, [r4, #40]	@ 0x28
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 80164ce:	2d00      	cmp	r5, #0
 80164d0:	d00a      	beq.n	80164e8 <_ux_device_stack_transfer_run+0x68>
            (slave_length != 0) && (host_length != slave_length) &&
 80164d2:	4295      	cmp	r5, r2
 80164d4:	d008      	beq.n	80164e8 <_ux_device_stack_transfer_run+0x68>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 80164d6:	0028      	movs	r0, r5
 80164d8:	8a39      	ldrh	r1, [r7, #16]
 80164da:	f7e9 fecb 	bl	8000274 <__aeabi_uidivmod>
            (slave_length != 0) && (host_length != slave_length) &&
 80164de:	424b      	negs	r3, r1
 80164e0:	4159      	adcs	r1, r3
 80164e2:	e001      	b.n	80164e8 <_ux_device_stack_transfer_run+0x68>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 80164e4:	2302      	movs	r3, #2
 80164e6:	62a3      	str	r3, [r4, #40]	@ 0x28
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80164e8:	2300      	movs	r3, #0
 80164ea:	61a3      	str	r3, [r4, #24]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80164ec:	68e3      	ldr	r3, [r4, #12]
 80164ee:	63a1      	str	r1, [r4, #56]	@ 0x38
 80164f0:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 80164f2:	2301      	movs	r3, #1
 80164f4:	6023      	str	r3, [r4, #0]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 80164f6:	331f      	adds	r3, #31
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 80164f8:	6165      	str	r5, [r4, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 80164fa:	61e5      	str	r5, [r4, #28]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 80164fc:	6323      	str	r3, [r4, #48]	@ 0x30
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80164fe:	7bfb      	ldrb	r3, [r7, #15]
 8016500:	079b      	lsls	r3, r3, #30
 8016502:	d003      	beq.n	801650c <_ux_device_stack_transfer_run+0x8c>
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8016504:	687b      	ldr	r3, [r7, #4]
                return(UX_STATE_WAIT);
 8016506:	2005      	movs	r0, #5
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8016508:	2b02      	cmp	r3, #2
 801650a:	d0c3      	beq.n	8016494 <_ux_device_stack_transfer_run+0x14>
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 801650c:	2321      	movs	r3, #33	@ 0x21
 801650e:	6323      	str	r3, [r4, #48]	@ 0x30
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 8016510:	0022      	movs	r2, r4
 8016512:	210c      	movs	r1, #12
 8016514:	0030      	movs	r0, r6
 8016516:	69b3      	ldr	r3, [r6, #24]
 8016518:	4798      	blx	r3
        if (status < UX_STATE_WAIT)
 801651a:	2804      	cmp	r0, #4
 801651c:	d8ba      	bhi.n	8016494 <_ux_device_stack_transfer_run+0x14>
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 801651e:	2300      	movs	r3, #0
 8016520:	6323      	str	r3, [r4, #48]	@ 0x30
 8016522:	e7b7      	b.n	8016494 <_ux_device_stack_transfer_run+0x14>
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8016524:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016526:	2b03      	cmp	r3, #3
 8016528:	d1de      	bne.n	80164e8 <_ux_device_stack_transfer_run+0x68>
 801652a:	e7d0      	b.n	80164ce <_ux_device_stack_transfer_run+0x4e>
 801652c:	20003104 	.word	0x20003104

08016530 <_ux_system_error_handler>:
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8016530:	4b05      	ldr	r3, [pc, #20]	@ (8016548 <_ux_system_error_handler+0x18>)
{
 8016532:	b510      	push	{r4, lr}
    _ux_system -> ux_system_last_error =  error_code;
 8016534:	681b      	ldr	r3, [r3, #0]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8016536:	691c      	ldr	r4, [r3, #16]
    _ux_system -> ux_system_last_error =  error_code;
 8016538:	60da      	str	r2, [r3, #12]
    _ux_system -> ux_system_error_count++;
 801653a:	3401      	adds	r4, #1
 801653c:	611c      	str	r4, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 801653e:	695b      	ldr	r3, [r3, #20]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d000      	beq.n	8016546 <_ux_system_error_handler+0x16>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8016544:	4798      	blx	r3
    }
}
 8016546:	bd10      	pop	{r4, pc}
 8016548:	20003108 	.word	0x20003108

0801654c <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 801654c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801654e:	0004      	movs	r4, r0
 8016550:	0015      	movs	r5, r2
 8016552:	001e      	movs	r6, r3
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
        return(UX_INVALID_PARAMETER);
 8016554:	20fa      	movs	r0, #250	@ 0xfa
{
 8016556:	9101      	str	r1, [sp, #4]
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8016558:	2c00      	cmp	r4, #0
 801655a:	d023      	beq.n	80165a4 <_ux_system_initialize+0x58>
 801655c:	2900      	cmp	r1, #0
 801655e:	d021      	beq.n	80165a4 <_ux_system_initialize+0x58>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8016560:	000a      	movs	r2, r1
 8016562:	0020      	movs	r0, r4
 8016564:	2100      	movs	r1, #0
 8016566:	f000 f9cb 	bl	8016900 <_ux_utility_memory_set>
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801656a:	0020      	movs	r0, r4
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801656c:	0022      	movs	r2, r4
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 801656e:	4f1c      	ldr	r7, [pc, #112]	@ (80165e0 <_ux_system_initialize+0x94>)
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016570:	4b1c      	ldr	r3, [pc, #112]	@ (80165e4 <_ux_system_initialize+0x98>)
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016572:	308d      	adds	r0, #141	@ 0x8d
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016574:	3218      	adds	r2, #24
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016576:	30ff      	adds	r0, #255	@ 0xff
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8016578:	603c      	str	r4, [r7, #0]
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801657a:	601a      	str	r2, [r3, #0]
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801657c:	6020      	str	r0, [r4, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 801657e:	2d00      	cmp	r5, #0
 8016580:	d011      	beq.n	80165a6 <_ux_system_initialize+0x5a>
 8016582:	2e00      	cmp	r6, #0
 8016584:	d00f      	beq.n	80165a6 <_ux_system_initialize+0x5a>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016586:	0023      	movs	r3, r4

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016588:	21da      	movs	r1, #218	@ 0xda
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801658a:	33a1      	adds	r3, #161	@ 0xa1
 801658c:	33ff      	adds	r3, #255	@ 0xff
 801658e:	6063      	str	r3, [r4, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
    int_memory_pool_start += UX_ALIGN_MIN;
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016590:	2307      	movs	r3, #7
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8016592:	0049      	lsls	r1, r1, #1
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8016594:	1861      	adds	r1, r4, r1
    int_memory_pool_start += UX_ALIGN_MIN;
 8016596:	3107      	adds	r1, #7
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8016598:	4399      	bics	r1, r3

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 801659a:	9b01      	ldr	r3, [sp, #4]
 801659c:	18e4      	adds	r4, r4, r3

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 801659e:	42a1      	cmp	r1, r4
 80165a0:	d304      	bcc.n	80165ac <_ux_system_initialize+0x60>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 80165a2:	2012      	movs	r0, #18
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
}
 80165a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 80165a6:	0003      	movs	r3, r0
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 80165a8:	21d0      	movs	r1, #208	@ 0xd0
 80165aa:	e7f0      	b.n	801658e <_ux_system_initialize+0x42>
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 80165ac:	1a62      	subs	r2, r4, r1
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 80165ae:	f000 f913 	bl	80167d8 <_ux_utility_memory_byte_pool_create>
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 80165b2:	2d00      	cmp	r5, #0
 80165b4:	d011      	beq.n	80165da <_ux_system_initialize+0x8e>
 80165b6:	2e00      	cmp	r6, #0
 80165b8:	d00f      	beq.n	80165da <_ux_system_initialize+0x8e>
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 80165ba:	2100      	movs	r1, #0
 80165bc:	0028      	movs	r0, r5
 80165be:	0032      	movs	r2, r6
 80165c0:	f000 f99e 	bl	8016900 <_ux_utility_memory_set>
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80165c4:	2307      	movs	r3, #7
        int_memory_pool_start +=  UX_ALIGN_MIN;
 80165c6:	1de9      	adds	r1, r5, #7
        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 80165c8:	19ad      	adds	r5, r5, r6
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80165ca:	4399      	bics	r1, r3
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 80165cc:	42a9      	cmp	r1, r5
 80165ce:	d2e8      	bcs.n	80165a2 <_ux_system_initialize+0x56>
        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 80165d0:	683b      	ldr	r3, [r7, #0]
        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 80165d2:	1a6a      	subs	r2, r5, r1
        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 80165d4:	6858      	ldr	r0, [r3, #4]
 80165d6:	f000 f8ff 	bl	80167d8 <_ux_utility_memory_byte_pool_create>
    return(UX_SUCCESS);
 80165da:	2000      	movs	r0, #0
 80165dc:	e7e2      	b.n	80165a4 <_ux_system_initialize+0x58>
 80165de:	46c0      	nop			@ (mov r8, r8)
 80165e0:	20003108 	.word	0x20003108
 80165e4:	20003104 	.word	0x20003104

080165e8 <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80165e8:	b510      	push	{r4, lr}
 80165ea:	0004      	movs	r4, r0
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
            return(UX_INVALID_PARAMETER);
 80165ec:	20fa      	movs	r0, #250	@ 0xfa
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 80165ee:	2c00      	cmp	r4, #0
 80165f0:	d004      	beq.n	80165fc <_uxe_system_initialize+0x14>
 80165f2:	2900      	cmp	r1, #0
 80165f4:	d002      	beq.n	80165fc <_uxe_system_initialize+0x14>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 80165f6:	0020      	movs	r0, r4
 80165f8:	f7ff ffa8 	bl	801654c <_ux_system_initialize>
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 80165fc:	bd10      	pop	{r4, pc}

080165fe <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 80165fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016600:	0005      	movs	r5, r0

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8016602:	000e      	movs	r6, r1
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 8016604:	2703      	movs	r7, #3
{
 8016606:	001c      	movs	r4, r3
 8016608:	188b      	adds	r3, r1, r2
 801660a:	9301      	str	r3, [sp, #4]
    while(descriptor_entries--)
 801660c:	9b01      	ldr	r3, [sp, #4]
 801660e:	429e      	cmp	r6, r3
 8016610:	d100      	bne.n	8016614 <_ux_utility_descriptor_parse+0x16>
        }
    }

    /* Return to caller.  */
    return;
}
 8016612:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        switch(*descriptor_structure++)
 8016614:	7833      	ldrb	r3, [r6, #0]
 8016616:	2b02      	cmp	r3, #2
 8016618:	d00b      	beq.n	8016632 <_ux_utility_descriptor_parse+0x34>
 801661a:	2b04      	cmp	r3, #4
 801661c:	d11a      	bne.n	8016654 <_ux_utility_descriptor_parse+0x56>
                *descriptor++ =  0;
 801661e:	2300      	movs	r3, #0
            while((ALIGN_TYPE) descriptor & 3u)
 8016620:	423c      	tst	r4, r7
 8016622:	d111      	bne.n	8016648 <_ux_utility_descriptor_parse+0x4a>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8016624:	0028      	movs	r0, r5
 8016626:	f000 f81a 	bl	801665e <_ux_utility_long_get>
            raw_descriptor +=  4;
 801662a:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 801662c:	c401      	stmia	r4!, {r0}
            break;
 801662e:	3601      	adds	r6, #1
 8016630:	e7ec      	b.n	801660c <_ux_utility_descriptor_parse+0xe>
                *descriptor++ =  0;
 8016632:	2300      	movs	r3, #0
            while((ALIGN_TYPE) descriptor & 1u)
 8016634:	2201      	movs	r2, #1
 8016636:	4214      	tst	r4, r2
 8016638:	d109      	bne.n	801664e <_ux_utility_descriptor_parse+0x50>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 801663a:	0028      	movs	r0, r5
 801663c:	f000 f967 	bl	801690e <_ux_utility_short_get>
            raw_descriptor += 2;
 8016640:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8016642:	8020      	strh	r0, [r4, #0]
            descriptor += 2;
 8016644:	3402      	adds	r4, #2
            break;
 8016646:	e7f2      	b.n	801662e <_ux_utility_descriptor_parse+0x30>
                *descriptor++ =  0;
 8016648:	7023      	strb	r3, [r4, #0]
 801664a:	3401      	adds	r4, #1
 801664c:	e7e8      	b.n	8016620 <_ux_utility_descriptor_parse+0x22>
                *descriptor++ =  0;
 801664e:	7023      	strb	r3, [r4, #0]
 8016650:	3401      	adds	r4, #1
 8016652:	e7ef      	b.n	8016634 <_ux_utility_descriptor_parse+0x36>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8016654:	782b      	ldrb	r3, [r5, #0]
            raw_descriptor++;
 8016656:	3501      	adds	r5, #1
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8016658:	7023      	strb	r3, [r4, #0]
            descriptor ++;
 801665a:	3401      	adds	r4, #1
 801665c:	e7e7      	b.n	801662e <_ux_utility_descriptor_parse+0x30>

0801665e <_ux_utility_long_get>:
    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
    value |=  (ULONG)*address++ << 8;
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;
 801665e:	7842      	ldrb	r2, [r0, #1]
 8016660:	7803      	ldrb	r3, [r0, #0]
 8016662:	0212      	lsls	r2, r2, #8
 8016664:	431a      	orrs	r2, r3
 8016666:	7883      	ldrb	r3, [r0, #2]
 8016668:	78c0      	ldrb	r0, [r0, #3]
 801666a:	041b      	lsls	r3, r3, #16
 801666c:	4313      	orrs	r3, r2
 801666e:	0600      	lsls	r0, r0, #24
 8016670:	4318      	orrs	r0, r3

    /* Return 32-bit value.  */
    return(value);
}
 8016672:	4770      	bx	lr

08016674 <_ux_utility_long_get_big_endian>:


    /* We read a byte at a time from the address.  */
    value =  (ULONG) ((*address++) << 24);
    value |=  (ULONG) ((*address++) << 16);
    value |=  (ULONG) ((*address++) << 8);
 8016674:	7842      	ldrb	r2, [r0, #1]
 8016676:	7803      	ldrb	r3, [r0, #0]
 8016678:	0212      	lsls	r2, r2, #8
 801667a:	431a      	orrs	r2, r3
 801667c:	7883      	ldrb	r3, [r0, #2]
 801667e:	78c0      	ldrb	r0, [r0, #3]
 8016680:	041b      	lsls	r3, r3, #16
 8016682:	4313      	orrs	r3, r2
 8016684:	0600      	lsls	r0, r0, #24
 8016686:	4318      	orrs	r0, r3
 8016688:	ba00      	rev	r0, r0
    value |=  (ULONG) *address;

    /* Return 32-bit value.  */
    return(value);
}
 801668a:	4770      	bx	lr

0801668c <_ux_utility_long_put>:
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 801668c:	0a0b      	lsrs	r3, r1, #8
    *address++ =  (UCHAR) (value & 0xff);
 801668e:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8016690:	7043      	strb	r3, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8016692:	0c0b      	lsrs	r3, r1, #16
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8016694:	0e09      	lsrs	r1, r1, #24
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8016696:	7083      	strb	r3, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8016698:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 801669a:	4770      	bx	lr

0801669c <_ux_utility_long_put_big_endian>:
ULONG   high_word_value;

    /* First we swap the value words.  */
    low_word_value =  value >> 16;
    high_word_value =  value << 16;
    value =  high_word_value | low_word_value;
 801669c:	2310      	movs	r3, #16
 801669e:	41d9      	rors	r1, r3

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 80166a0:	0a0b      	lsrs	r3, r1, #8
 80166a2:	7003      	strb	r3, [r0, #0]
    *address++ =  (UCHAR) (value & 0xff);
 80166a4:	7041      	strb	r1, [r0, #1]
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 80166a6:	0e0b      	lsrs	r3, r1, #24
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 80166a8:	0c09      	lsrs	r1, r1, #16
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 80166aa:	7083      	strb	r3, [r0, #2]
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 80166ac:	70c1      	strb	r1, [r0, #3]

    /* Return to caller.  */
    return;
}
 80166ae:	4770      	bx	lr

080166b0 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 80166b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166b2:	0015      	movs	r5, r2
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 80166b4:	2900      	cmp	r1, #0
 80166b6:	d121      	bne.n	80166fc <_ux_utility_memory_allocate+0x4c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 80166b8:	4b2e      	ldr	r3, [pc, #184]	@ (8016774 <_ux_utility_memory_allocate+0xc4>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	681c      	ldr	r4, [r3, #0]
    {
        return(UX_NULL);
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 80166be:	2c00      	cmp	r4, #0
 80166c0:	d019      	beq.n	80166f6 <_ux_utility_memory_allocate+0x46>
    {
        return(UX_NULL);
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 80166c2:	2d00      	cmp	r5, #0
 80166c4:	d017      	beq.n	80166f6 <_ux_utility_memory_allocate+0x46>

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
        memory_alignment =  UX_ALIGN_MIN;
 80166c6:	2607      	movs	r6, #7
    if (memory_alignment == UX_SAFE_ALIGN)
 80166c8:	1c43      	adds	r3, r0, #1
 80166ca:	d003      	beq.n	80166d4 <_ux_utility_memory_allocate+0x24>
    if (memory_alignment < UX_ALIGN_MIN)
 80166cc:	0006      	movs	r6, r0
 80166ce:	2807      	cmp	r0, #7
 80166d0:	d200      	bcs.n	80166d4 <_ux_utility_memory_allocate+0x24>
 80166d2:	2607      	movs	r6, #7
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 80166d4:	2307      	movs	r3, #7
 80166d6:	3507      	adds	r5, #7
 80166d8:	439d      	bics	r5, r3
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 80166da:	0029      	movs	r1, r5
    if (memory_alignment <= UX_ALIGN_MIN)
 80166dc:	429e      	cmp	r6, r3
 80166de:	d000      	beq.n	80166e2 <_ux_utility_memory_allocate+0x32>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 80166e0:	1971      	adds	r1, r6, r5
 80166e2:	0020      	movs	r0, r4
 80166e4:	f000 f896 	bl	8016814 <_ux_utility_memory_byte_pool_search>

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 80166e8:	2800      	cmp	r0, #0
 80166ea:	d10d      	bne.n	8016708 <_ux_utility_memory_allocate+0x58>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 80166ec:	2212      	movs	r2, #18
 80166ee:	2108      	movs	r1, #8
 80166f0:	3002      	adds	r0, #2
 80166f2:	f7ff ff1d 	bl	8016530 <_ux_system_error_handler>
        return(UX_NULL);
 80166f6:	2400      	movs	r4, #0

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
}
 80166f8:	0020      	movs	r0, r4
 80166fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 80166fc:	2901      	cmp	r1, #1
 80166fe:	d1fa      	bne.n	80166f6 <_ux_utility_memory_allocate+0x46>
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 8016700:	4b1c      	ldr	r3, [pc, #112]	@ (8016774 <_ux_utility_memory_allocate+0xc4>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	685c      	ldr	r4, [r3, #4]
 8016706:	e7da      	b.n	80166be <_ux_utility_memory_allocate+0xe>
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8016708:	0007      	movs	r7, r0
    next_ptr =             *this_block_link_ptr;
 801670a:	6801      	ldr	r1, [r0, #0]
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 801670c:	3708      	adds	r7, #8
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801670e:	1a0a      	subs	r2, r1, r0
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8016710:	3a08      	subs	r2, #8
    if ((int_memory_buffer & memory_alignment) != 0)
 8016712:	4237      	tst	r7, r6
 8016714:	d00e      	beq.n	8016734 <_ux_utility_memory_allocate+0x84>
        int_memory_buffer += memory_alignment;
 8016716:	0033      	movs	r3, r6
 8016718:	3308      	adds	r3, #8
 801671a:	19db      	adds	r3, r3, r7
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 801671c:	43b3      	bics	r3, r6
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 801671e:	3b08      	subs	r3, #8
        *next_block_link_ptr =  *this_block_link_ptr;
 8016720:	6019      	str	r1, [r3, #0]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8016722:	4915      	ldr	r1, [pc, #84]	@ (8016778 <_ux_utility_memory_allocate+0xc8>)
 8016724:	6059      	str	r1, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 8016726:	6861      	ldr	r1, [r4, #4]
 8016728:	3101      	adds	r1, #1
 801672a:	6061      	str	r1, [r4, #4]
        *this_block_link_ptr =  next_ptr;
 801672c:	6003      	str	r3, [r0, #0]
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801672e:	1a18      	subs	r0, r3, r0
 8016730:	1a12      	subs	r2, r2, r0
        current_ptr = next_ptr;
 8016732:	0018      	movs	r0, r3
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 8016734:	1b53      	subs	r3, r2, r5
 8016736:	2b13      	cmp	r3, #19
 8016738:	d90b      	bls.n	8016752 <_ux_utility_memory_allocate+0xa2>
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 801673a:	002b      	movs	r3, r5
        *next_block_link_ptr =  *this_block_link_ptr;
 801673c:	6802      	ldr	r2, [r0, #0]
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 801673e:	3308      	adds	r3, #8
 8016740:	18c3      	adds	r3, r0, r3
        *next_block_link_ptr =  *this_block_link_ptr;
 8016742:	601a      	str	r2, [r3, #0]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8016744:	4a0c      	ldr	r2, [pc, #48]	@ (8016778 <_ux_utility_memory_allocate+0xc8>)
 8016746:	605a      	str	r2, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 8016748:	6862      	ldr	r2, [r4, #4]
 801674a:	3201      	adds	r2, #1
 801674c:	6062      	str	r2, [r4, #4]
        available_bytes =  memory_size_requested;
 801674e:	002a      	movs	r2, r5
        *this_block_link_ptr =  next_ptr;
 8016750:	6003      	str	r3, [r0, #0]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8016752:	6823      	ldr	r3, [r4, #0]
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8016754:	6044      	str	r4, [r0, #4]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8016756:	3b08      	subs	r3, #8
 8016758:	1a9b      	subs	r3, r3, r2
 801675a:	6023      	str	r3, [r4, #0]
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 801675c:	68a3      	ldr	r3, [r4, #8]
 801675e:	4283      	cmp	r3, r0
 8016760:	d101      	bne.n	8016766 <_ux_utility_memory_allocate+0xb6>
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 8016762:	6803      	ldr	r3, [r0, #0]
 8016764:	60a3      	str	r3, [r4, #8]
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8016766:	3008      	adds	r0, #8
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8016768:	2100      	movs	r1, #0
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 801676a:	0004      	movs	r4, r0
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 801676c:	f000 f8c8 	bl	8016900 <_ux_utility_memory_set>
    return(work_ptr);
 8016770:	e7c2      	b.n	80166f8 <_ux_utility_memory_allocate+0x48>
 8016772:	46c0      	nop			@ (mov r8, r8)
 8016774:	20003108 	.word	0x20003108
 8016778:	ffffeeee 	.word	0xffffeeee

0801677c <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 801677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 801677e:	2b00      	cmp	r3, #0
 8016780:	d011      	beq.n	80167a6 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8016782:	0c1c      	lsrs	r4, r3, #16
 8016784:	0c17      	lsrs	r7, r2, #16
 8016786:	2c00      	cmp	r4, #0
 8016788:	d111      	bne.n	80167ae <_ux_utility_memory_allocate_mulc_safe+0x32>
 801678a:	2f00      	cmp	r7, #0
 801678c:	d00b      	beq.n	80167a6 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 801678e:	1c3c      	adds	r4, r7, #0
 8016790:	1c1e      	adds	r6, r3, #0
 8016792:	b29f      	uxth	r7, r3
 8016794:	b295      	uxth	r5, r2
 8016796:	437d      	muls	r5, r7
 8016798:	b2b6      	uxth	r6, r6
 801679a:	b2a4      	uxth	r4, r4
 801679c:	4374      	muls	r4, r6
 801679e:	0c2d      	lsrs	r5, r5, #16
 80167a0:	1964      	adds	r4, r4, r5
 80167a2:	0c24      	lsrs	r4, r4, #16
 80167a4:	d107      	bne.n	80167b6 <_ux_utility_memory_allocate_mulc_safe+0x3a>
 80167a6:	435a      	muls	r2, r3
 80167a8:	f7ff ff82 	bl	80166b0 <_ux_utility_memory_allocate>
}
 80167ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80167ae:	2f00      	cmp	r7, #0
 80167b0:	d101      	bne.n	80167b6 <_ux_utility_memory_allocate_mulc_safe+0x3a>
 80167b2:	1c16      	adds	r6, r2, #0
 80167b4:	e7ed      	b.n	8016792 <_ux_utility_memory_allocate_mulc_safe+0x16>
 80167b6:	2000      	movs	r0, #0
 80167b8:	e7f8      	b.n	80167ac <_ux_utility_memory_allocate_mulc_safe+0x30>

080167ba <_ux_utility_memory_allocate_mulv_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulv_safe(ULONG align,ULONG cache,ULONG size_mul_v0,ULONG size_mul_v1)
{
 80167ba:	b570      	push	{r4, r5, r6, lr}
 80167bc:	0014      	movs	r4, r2
    return UX_UTILITY_MEMORY_ALLOCATE_MULV_SAFE(align, cache, size_mul_v0, size_mul_v1);
 80167be:	001a      	movs	r2, r3
{
 80167c0:	0005      	movs	r5, r0
    return UX_UTILITY_MEMORY_ALLOCATE_MULV_SAFE(align, cache, size_mul_v0, size_mul_v1);
 80167c2:	4362      	muls	r2, r4
 80167c4:	429c      	cmp	r4, r3
 80167c6:	d900      	bls.n	80167ca <_ux_utility_memory_allocate_mulv_safe+0x10>
 80167c8:	001c      	movs	r4, r3
 80167ca:	2000      	movs	r0, #0
 80167cc:	42a2      	cmp	r2, r4
 80167ce:	d302      	bcc.n	80167d6 <_ux_utility_memory_allocate_mulv_safe+0x1c>
 80167d0:	0028      	movs	r0, r5
 80167d2:	f7ff ff6d 	bl	80166b0 <_ux_utility_memory_allocate>
}
 80167d6:	bd70      	pop	{r4, r5, r6, pc}

080167d8 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 80167d8:	b570      	push	{r4, r5, r6, lr}
 80167da:	000c      	movs	r4, r1
 80167dc:	0016      	movs	r6, r2
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 80167de:	2100      	movs	r1, #0
 80167e0:	2214      	movs	r2, #20
{
 80167e2:	0005      	movs	r5, r0
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 80167e4:	f000 f88c 	bl	8016900 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80167e8:	2303      	movs	r3, #3
 80167ea:	439e      	bics	r6, r3

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80167ec:	0033      	movs	r3, r6
 80167ee:	3b08      	subs	r3, #8
 80167f0:	602b      	str	r3, [r5, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 80167f2:	2302      	movs	r3, #2
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80167f4:	19a2      	adds	r2, r4, r6
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 80167f6:	606b      	str	r3, [r5, #4]
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
    *block_indirect_ptr =  temp_ptr;
 80167f8:	1f13      	subs	r3, r2, #4
    pool_ptr -> ux_byte_pool_size =    pool_size;
 80167fa:	612e      	str	r6, [r5, #16]
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80167fc:	60ec      	str	r4, [r5, #12]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80167fe:	60ac      	str	r4, [r5, #8]
    *block_indirect_ptr =  temp_ptr;
 8016800:	601d      	str	r5, [r3, #0]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
    *block_indirect_ptr =  block_ptr;
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8016802:	4b03      	ldr	r3, [pc, #12]	@ (8016810 <_ux_utility_memory_byte_pool_create+0x38>)
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8016804:	3a08      	subs	r2, #8
 8016806:	6014      	str	r4, [r2, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
}
 8016808:	2000      	movs	r0, #0
    *block_indirect_ptr =  block_ptr;
 801680a:	6022      	str	r2, [r4, #0]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 801680c:	6063      	str	r3, [r4, #4]
}
 801680e:	bd70      	pop	{r4, r5, r6, pc}
 8016810:	ffffeeee 	.word	0xffffeeee

08016814 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8016814:	0003      	movs	r3, r0
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8016816:	6842      	ldr	r2, [r0, #4]
{
 8016818:	b5f0      	push	{r4, r5, r6, r7, lr}
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 801681a:	1e90      	subs	r0, r2, #2
 801681c:	681c      	ldr	r4, [r3, #0]
 801681e:	00c0      	lsls	r0, r0, #3
 8016820:	1900      	adds	r0, r0, r4
    if (memory_size >= total_theoretical_available)
 8016822:	4288      	cmp	r0, r1
 8016824:	d801      	bhi.n	801682a <_ux_utility_memory_byte_pool_search+0x16>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 8016826:	2000      	movs	r0, #0
        return(UX_NULL);
    }

    /* Return the search pointer.  */
    return(current_ptr);
}
 8016828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 801682a:	6898      	ldr	r0, [r3, #8]
 801682c:	68dc      	ldr	r4, [r3, #12]
 801682e:	42a0      	cmp	r0, r4
 8016830:	d3f9      	bcc.n	8016826 <_ux_utility_memory_byte_pool_search+0x12>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 8016832:	691d      	ldr	r5, [r3, #16]
 8016834:	1964      	adds	r4, r4, r5
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8016836:	42a0      	cmp	r0, r4
 8016838:	d8f5      	bhi.n	8016826 <_ux_utility_memory_byte_pool_search+0x12>
UINT                first_free_block_found =  UX_FALSE;
 801683a:	2400      	movs	r4, #0
                        examine_blocks--;
 801683c:	2701      	movs	r7, #1
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 801683e:	3201      	adds	r2, #1
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016840:	6845      	ldr	r5, [r0, #4]
 8016842:	4e15      	ldr	r6, [pc, #84]	@ (8016898 <_ux_utility_memory_byte_pool_search+0x84>)
 8016844:	42b5      	cmp	r5, r6
 8016846:	d122      	bne.n	801688e <_ux_utility_memory_byte_pool_search+0x7a>
            if (first_free_block_found == UX_FALSE)
 8016848:	2c00      	cmp	r4, #0
 801684a:	d100      	bne.n	801684e <_ux_utility_memory_byte_pool_search+0x3a>
                pool_ptr->ux_byte_pool_search =  current_ptr;
 801684c:	6098      	str	r0, [r3, #8]
            next_ptr =             *this_block_link_ptr;
 801684e:	6805      	ldr	r5, [r0, #0]
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8016850:	1a2c      	subs	r4, r5, r0
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8016852:	3c08      	subs	r4, #8
            if (available_bytes >= memory_size)
 8016854:	42a1      	cmp	r1, r4
 8016856:	d91c      	bls.n	8016892 <_ux_utility_memory_byte_pool_search+0x7e>
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8016858:	686e      	ldr	r6, [r5, #4]
                    *this_block_link_ptr =  *next_block_link_ptr;
 801685a:	682c      	ldr	r4, [r5, #0]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 801685c:	46b4      	mov	ip, r6
 801685e:	4e0e      	ldr	r6, [pc, #56]	@ (8016898 <_ux_utility_memory_byte_pool_search+0x84>)
 8016860:	45b4      	cmp	ip, r6
 8016862:	d10f      	bne.n	8016884 <_ux_utility_memory_byte_pool_search+0x70>
                    *this_block_link_ptr =  *next_block_link_ptr;
 8016864:	6004      	str	r4, [r0, #0]
                    pool_ptr -> ux_byte_pool_fragments--;
 8016866:	685c      	ldr	r4, [r3, #4]
 8016868:	3c01      	subs	r4, #1
 801686a:	605c      	str	r4, [r3, #4]
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 801686c:	689c      	ldr	r4, [r3, #8]
 801686e:	42ac      	cmp	r4, r5
 8016870:	d006      	beq.n	8016880 <_ux_utility_memory_byte_pool_search+0x6c>
                        examine_blocks--;
 8016872:	003c      	movs	r4, r7
        if (examine_blocks != ((UINT) 0))
 8016874:	2a00      	cmp	r2, #0
 8016876:	d0d6      	beq.n	8016826 <_ux_utility_memory_byte_pool_search+0x12>
            examine_blocks--;
 8016878:	3a01      	subs	r2, #1
    } while(examine_blocks != ((UINT) 0));
 801687a:	2a00      	cmp	r2, #0
 801687c:	d1e0      	bne.n	8016840 <_ux_utility_memory_byte_pool_search+0x2c>
 801687e:	e7d2      	b.n	8016826 <_ux_utility_memory_byte_pool_search+0x12>
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 8016880:	6098      	str	r0, [r3, #8]
 8016882:	e7f6      	b.n	8016872 <_ux_utility_memory_byte_pool_search+0x5e>
                    if (examine_blocks != ((UINT) 0))
 8016884:	2a00      	cmp	r2, #0
 8016886:	d0ce      	beq.n	8016826 <_ux_utility_memory_byte_pool_search+0x12>
                    current_ptr =  *next_block_link_ptr;
 8016888:	0020      	movs	r0, r4
                        examine_blocks--;
 801688a:	3a01      	subs	r2, #1
 801688c:	e7f1      	b.n	8016872 <_ux_utility_memory_byte_pool_search+0x5e>
            current_ptr =  *this_block_link_ptr;
 801688e:	6800      	ldr	r0, [r0, #0]
 8016890:	e7f0      	b.n	8016874 <_ux_utility_memory_byte_pool_search+0x60>
    if (available_bytes == ((ULONG) 0))
 8016892:	2c00      	cmp	r4, #0
 8016894:	d1c8      	bne.n	8016828 <_ux_utility_memory_byte_pool_search+0x14>
 8016896:	e7c6      	b.n	8016826 <_ux_utility_memory_byte_pool_search+0x12>
 8016898:	ffffeeee 	.word	0xffffeeee

0801689c <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
 801689c:	2300      	movs	r3, #0
{
 801689e:	b510      	push	{r4, lr}
    while(length--)
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d100      	bne.n	80168a6 <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
 80168a4:	bd10      	pop	{r4, pc}
        *destination++ =  *source++;
 80168a6:	5ccc      	ldrb	r4, [r1, r3]
 80168a8:	54c4      	strb	r4, [r0, r3]
 80168aa:	3301      	adds	r3, #1
 80168ac:	e7f8      	b.n	80168a0 <_ux_utility_memory_copy+0x4>
	...

080168b0 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 80168b0:	b570      	push	{r4, r5, r6, lr}
    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
    if (work_ptr != UX_NULL)
 80168b2:	2800      	cmp	r0, #0
 80168b4:	d00e      	beq.n	80168d4 <_ux_utility_memory_free+0x24>
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 80168b6:	1f02      	subs	r2, r0, #4
 80168b8:	6813      	ldr	r3, [r2, #0]
 80168ba:	490f      	ldr	r1, [pc, #60]	@ (80168f8 <_ux_utility_memory_free+0x48>)
 80168bc:	428b      	cmp	r3, r1
 80168be:	d009      	beq.n	80168d4 <_ux_utility_memory_free+0x24>
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
            pool_ptr = *byte_pool_ptr;

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d007      	beq.n	80168d4 <_ux_utility_memory_free+0x24>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80168c4:	4c0d      	ldr	r4, [pc, #52]	@ (80168fc <_ux_utility_memory_free+0x4c>)
 80168c6:	6824      	ldr	r4, [r4, #0]
            if ((pool_ptr == UX_NULL) ||
 80168c8:	6825      	ldr	r5, [r4, #0]
 80168ca:	429d      	cmp	r5, r3
 80168cc:	d008      	beq.n	80168e0 <_ux_utility_memory_free+0x30>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80168ce:	6864      	ldr	r4, [r4, #4]
 80168d0:	429c      	cmp	r4, r3
 80168d2:	d005      	beq.n	80168e0 <_ux_utility_memory_free+0x30>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80168d4:	2219      	movs	r2, #25
 80168d6:	2108      	movs	r1, #8
 80168d8:	2002      	movs	r0, #2
 80168da:	f7ff fe29 	bl	8016530 <_ux_system_error_handler>
    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
}
 80168de:	bd70      	pop	{r4, r5, r6, pc}
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 80168e0:	3808      	subs	r0, #8
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 80168e2:	6011      	str	r1, [r2, #0]
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 80168e4:	6801      	ldr	r1, [r0, #0]
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	1a09      	subs	r1, r1, r0
 80168ea:	1852      	adds	r2, r2, r1
    pool_ptr -> ux_byte_pool_available =
 80168ec:	601a      	str	r2, [r3, #0]
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 80168ee:	689a      	ldr	r2, [r3, #8]
 80168f0:	4282      	cmp	r2, r0
 80168f2:	d9f4      	bls.n	80168de <_ux_utility_memory_free+0x2e>
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 80168f4:	6098      	str	r0, [r3, #8]
 80168f6:	e7f2      	b.n	80168de <_ux_utility_memory_free+0x2e>
 80168f8:	ffffeeee 	.word	0xffffeeee
 80168fc:	20003108 	.word	0x20003108

08016900 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 8016900:	1882      	adds	r2, r0, r2
 8016902:	4290      	cmp	r0, r2
 8016904:	d100      	bne.n	8016908 <_ux_utility_memory_set+0x8>
        *work_ptr++ =  value;
    }

    /* Return to caller.  */
    return; 
}
 8016906:	4770      	bx	lr
        *work_ptr++ =  value;
 8016908:	7001      	strb	r1, [r0, #0]
 801690a:	3001      	adds	r0, #1
 801690c:	e7f9      	b.n	8016902 <_ux_utility_memory_set+0x2>

0801690e <_ux_utility_short_get>:


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);
 801690e:	7803      	ldrb	r3, [r0, #0]
 8016910:	7840      	ldrb	r0, [r0, #1]
 8016912:	0200      	lsls	r0, r0, #8

    /* Return to caller.  */
    return((ULONG) value);
 8016914:	4318      	orrs	r0, r3
}
 8016916:	4770      	bx	lr

08016918 <_ux_utility_short_get_big_endian>:
    /* We read a byte at a time from the address.  */
    value =  (USHORT)((*address++) << 8);
    value =  (USHORT)(value | *address);

    /* Return 16-bit value.  */
    return((ULONG) value);
 8016918:	7803      	ldrb	r3, [r0, #0]
 801691a:	7840      	ldrb	r0, [r0, #1]
 801691c:	0200      	lsls	r0, r0, #8
 801691e:	4318      	orrs	r0, r3
 8016920:	ba40      	rev16	r0, r0
 8016922:	b280      	uxth	r0, r0
}
 8016924:	4770      	bx	lr

08016926 <_ux_utility_short_put_big_endian>:

    
    /* First we swap the value bytes. */
    low_byte_value =  value >> 8;
    high_byte_value =  (USHORT)(value<< 8);
    value =  high_byte_value | low_byte_value;
 8016926:	ba49      	rev16	r1, r1
 8016928:	b289      	uxth	r1, r1

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 801692a:	7001      	strb	r1, [r0, #0]
    *address=     (UCHAR) ((value >> 8) & 0xff);
 801692c:	0a09      	lsrs	r1, r1, #8
 801692e:	7041      	strb	r1, [r0, #1]

    /* Return to caller. */
    return;
}
 8016930:	4770      	bx	lr

08016932 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8016932:	b510      	push	{r4, lr}

UINT    string_length;


    if (string == UX_NULL)
 8016934:	2800      	cmp	r0, #0
 8016936:	d00b      	beq.n	8016950 <_ux_utility_string_length_check+0x1e>
        return(UX_ERROR);

    string_length = 0;
 8016938:	2300      	movs	r3, #0

    while (1)
    {

        if (string[string_length] == '\0')
 801693a:	5cc4      	ldrb	r4, [r0, r3]
 801693c:	2c00      	cmp	r4, #0
 801693e:	d009      	beq.n	8016954 <_ux_utility_string_length_check+0x22>
            break;

        string_length++;
 8016940:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 8016942:	4293      	cmp	r3, r2
 8016944:	d9f9      	bls.n	801693a <_ux_utility_string_length_check+0x8>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8016946:	22ff      	movs	r2, #255	@ 0xff
 8016948:	2108      	movs	r1, #8
 801694a:	2002      	movs	r0, #2
 801694c:	f7ff fdf0 	bl	8016530 <_ux_system_error_handler>
        return(UX_ERROR);
 8016950:	20ff      	movs	r0, #255	@ 0xff
 8016952:	e002      	b.n	801695a <_ux_utility_string_length_check+0x28>

            return(UX_ERROR);
        }
    }

    if (string_length_ptr)
 8016954:	2900      	cmp	r1, #0
 8016956:	d101      	bne.n	801695c <_ux_utility_string_length_check+0x2a>
        *string_length_ptr = string_length;

    return(UX_SUCCESS); 
 8016958:	2000      	movs	r0, #0
}
 801695a:	bd10      	pop	{r4, pc}
        *string_length_ptr = string_length;
 801695c:	600b      	str	r3, [r1, #0]
 801695e:	e7fb      	b.n	8016958 <_ux_utility_string_length_check+0x26>

08016960 <_ux_device_class_hid_activate>:
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
 8016960:	2200      	movs	r2, #0

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016962:	6a03      	ldr	r3, [r0, #32]
{
 8016964:	b570      	push	{r4, r5, r6, lr}
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016966:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8016968:	0015      	movs	r5, r2

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 801696a:	6883      	ldr	r3, [r0, #8]
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 801696c:	2003      	movs	r0, #3
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 801696e:	609c      	str	r4, [r3, #8]
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 8016970:	6023      	str	r3, [r4, #0]
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 8016972:	69db      	ldr	r3, [r3, #28]
    while (endpoint_interrupt != UX_NULL)
 8016974:	2b00      	cmp	r3, #0
 8016976:	d103      	bne.n	8016980 <_ux_device_class_hid_activate+0x20>
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
        return (UX_ERROR);
 8016978:	20ff      	movs	r0, #255	@ 0xff
    if (endpoint_in == UX_NULL)
 801697a:	2d00      	cmp	r5, #0
 801697c:	d113      	bne.n	80169a6 <_ux_device_class_hid_activate+0x46>
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 801697e:	bd70      	pop	{r4, r5, r6, pc}
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8016980:	7bd9      	ldrb	r1, [r3, #15]
 8016982:	4001      	ands	r1, r0
 8016984:	2903      	cmp	r1, #3
 8016986:	d108      	bne.n	801699a <_ux_device_class_hid_activate+0x3a>
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8016988:	7b9e      	ldrb	r6, [r3, #14]
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 801698a:	68a1      	ldr	r1, [r4, #8]
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 801698c:	2e7f      	cmp	r6, #127	@ 0x7f
 801698e:	d906      	bls.n	801699e <_ux_device_class_hid_activate+0x3e>
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 8016990:	3108      	adds	r1, #8
                endpoint_in = endpoint_interrupt;
 8016992:	001d      	movs	r5, r3
                        ux_slave_transfer_request_data_pointer =
 8016994:	62d9      	str	r1, [r3, #44]	@ 0x2c
                if (endpoint_out != UX_NULL)
 8016996:	2a00      	cmp	r2, #0
 8016998:	d105      	bne.n	80169a6 <_ux_device_class_hid_activate+0x46>
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 801699a:	695b      	ldr	r3, [r3, #20]
 801699c:	e7ea      	b.n	8016974 <_ux_device_class_hid_activate+0x14>
                endpoint_out = endpoint_interrupt;
 801699e:	001a      	movs	r2, r3
                        ux_slave_transfer_request_data_pointer =
 80169a0:	62d9      	str	r1, [r3, #44]	@ 0x2c
                if (endpoint_in != UX_NULL)
 80169a2:	2d00      	cmp	r5, #0
 80169a4:	d0f9      	beq.n	801699a <_ux_device_class_hid_activate+0x3a>
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80169a6:	2301      	movs	r3, #1
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 80169a8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80169aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 80169ac:	6065      	str	r5, [r4, #4]
    hid -> ux_device_class_hid_read_endpoint              = endpoint_out;
 80169ae:	6662      	str	r2, [r4, #100]	@ 0x64
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 80169b0:	2900      	cmp	r1, #0
 80169b2:	d00a      	beq.n	80169ca <_ux_device_class_hid_activate+0x6a>
 80169b4:	2a00      	cmp	r2, #0
 80169b6:	d008      	beq.n	80169ca <_ux_device_class_hid_activate+0x6a>
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 80169b8:	68cb      	ldr	r3, [r1, #12]
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 80169ba:	690a      	ldr	r2, [r1, #16]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_save_pos =
 80169bc:	618b      	str	r3, [r1, #24]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_read_pos =
 80169be:	614b      	str	r3, [r1, #20]
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 80169c0:	2100      	movs	r1, #0
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 80169c2:	429a      	cmp	r2, r3
 80169c4:	d810      	bhi.n	80169e8 <_ux_device_class_hid_activate+0x88>
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 80169c6:	2323      	movs	r3, #35	@ 0x23
 80169c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    _ux_utility_memory_set((VOID *)&hid -> ux_device_class_hid_event, 0,
 80169ca:	0020      	movs	r0, r4
 80169cc:	2210      	movs	r2, #16
 80169ce:	2100      	movs	r1, #0
 80169d0:	3034      	adds	r0, #52	@ 0x34
 80169d2:	f7ff ff95 	bl	8016900 <_ux_utility_memory_set>
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
 80169d6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80169d8:	63e3      	str	r3, [r4, #60]	@ 0x3c
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80169da:	2300      	movs	r3, #0
 80169dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 80169de:	69a3      	ldr	r3, [r4, #24]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d104      	bne.n	80169ee <_ux_device_class_hid_activate+0x8e>
    return(UX_SUCCESS);
 80169e4:	2000      	movs	r0, #0
 80169e6:	e7ca      	b.n	801697e <_ux_device_class_hid_activate+0x1e>
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 80169e8:	6019      	str	r1, [r3, #0]
             pos += UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(hid -> ux_device_class_hid_receiver))
 80169ea:	3308      	adds	r3, #8
 80169ec:	e7e9      	b.n	80169c2 <_ux_device_class_hid_activate+0x62>
        hid -> ux_slave_class_hid_instance_activate(hid);
 80169ee:	0020      	movs	r0, r4
 80169f0:	4798      	blx	r3
 80169f2:	e7f7      	b.n	80169e4 <_ux_device_class_hid_activate+0x84>

080169f4 <_ux_device_class_hid_control_request>:
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80169f4:	4b34      	ldr	r3, [pc, #208]	@ (8016ac8 <_ux_device_class_hid_control_request+0xd4>)
{
 80169f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 80169f8:	681e      	ldr	r6, [r3, #0]
{
 80169fa:	0004      	movs	r4, r0

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80169fc:	0033      	movs	r3, r6

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 80169fe:	0030      	movs	r0, r6
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8016a00:	335c      	adds	r3, #92	@ 0x5c
 8016a02:	9301      	str	r3, [sp, #4]
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016a04:	333d      	adds	r3, #61	@ 0x3d
 8016a06:	781b      	ldrb	r3, [r3, #0]
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016a08:	309a      	adds	r0, #154	@ 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8016a0a:	9300      	str	r3, [sp, #0]
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8016a0c:	f7ff ff7f 	bl	801690e <_ux_utility_short_get>
 8016a10:	0005      	movs	r5, r0
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8016a12:	0030      	movs	r0, r6
 8016a14:	309c      	adds	r0, #156	@ 0x9c
 8016a16:	f7ff ff7a 	bl	801690e <_ux_utility_short_get>
 8016a1a:	0007      	movs	r7, r0
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8016a1c:	0030      	movs	r0, r6
 8016a1e:	309e      	adds	r0, #158	@ 0x9e
 8016a20:	f7ff ff75 	bl	801690e <_ux_utility_short_get>

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016a24:	0032      	movs	r2, r6
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016a26:	6a21      	ldr	r1, [r4, #32]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8016a28:	0003      	movs	r3, r0
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016a2a:	6c8c      	ldr	r4, [r1, #72]	@ 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8016a2c:	9900      	ldr	r1, [sp, #0]
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016a2e:	329b      	adds	r2, #155	@ 0x9b
    switch (request)
 8016a30:	1e48      	subs	r0, r1, #1
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016a32:	7812      	ldrb	r2, [r2, #0]
    switch (request)
 8016a34:	280a      	cmp	r0, #10
 8016a36:	d844      	bhi.n	8016ac2 <_ux_device_class_hid_control_request+0xce>
 8016a38:	f7e9 fb78 	bl	800012c <__gnu_thumb1_case_uqi>
 8016a3c:	433e1a06 	.word	0x433e1a06
 8016a40:	43431443 	.word	0x43431443
 8016a44:	1a0d      	.short	0x1a0d
 8016a46:	41          	.byte	0x41
 8016a47:	00          	.byte	0x00
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 8016a48:	003a      	movs	r2, r7
 8016a4a:	0029      	movs	r1, r5
 8016a4c:	0020      	movs	r0, r4
 8016a4e:	f000 fa81 	bl	8016f54 <_ux_device_class_hid_report_get>
            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8016a52:	2000      	movs	r0, #0
}
 8016a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            descriptor_type =  (request_value & 0xff00) >> 8;
 8016a56:	0a29      	lsrs	r1, r5, #8
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8016a58:	003a      	movs	r2, r7
 8016a5a:	0020      	movs	r0, r4
            descriptor_type =  (request_value & 0xff00) >> 8;
 8016a5c:	b2c9      	uxtb	r1, r1
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8016a5e:	f000 fac7 	bl	8016ff0 <_ux_device_class_hid_report_set>
            break;
 8016a62:	e7f6      	b.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8016a64:	003a      	movs	r2, r7
 8016a66:	0029      	movs	r1, r5
 8016a68:	0020      	movs	r0, r4
 8016a6a:	f000 f83d 	bl	8016ae8 <_ux_device_class_hid_descriptor_send>
            break;            
 8016a6e:	e7f0      	b.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8016a70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8016a72:	9800      	ldr	r0, [sp, #0]
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8016a74:	b2c9      	uxtb	r1, r1
            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8016a76:	2802      	cmp	r0, #2
 8016a78:	d107      	bne.n	8016a8a <_ux_device_class_hid_control_request+0x96>
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8016a7a:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8016a7c:	7011      	strb	r1, [r2, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8016a7e:	9801      	ldr	r0, [sp, #4]
 8016a80:	001a      	movs	r2, r3
 8016a82:	2101      	movs	r1, #1
 8016a84:	f7ff fcec 	bl	8016460 <_ux_device_stack_transfer_request>
            break;
 8016a88:	e7e3      	b.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8016a8a:	428a      	cmp	r2, r1
 8016a8c:	d0e1      	beq.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8016a8e:	6462      	str	r2, [r4, #68]	@ 0x44
                    if (duration == 0)
 8016a90:	2a00      	cmp	r2, #0
 8016a92:	d103      	bne.n	8016a9c <_ux_device_class_hid_control_request+0xa8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8016a94:	2301      	movs	r3, #1
 8016a96:	425b      	negs	r3, r3
 8016a98:	64a3      	str	r3, [r4, #72]	@ 0x48
 8016a9a:	e7da      	b.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8016a9c:	20fa      	movs	r0, #250	@ 0xfa
 8016a9e:	21fa      	movs	r1, #250	@ 0xfa
 8016aa0:	0100      	lsls	r0, r0, #4
 8016aa2:	4350      	muls	r0, r2
 8016aa4:	0089      	lsls	r1, r1, #2
 8016aa6:	f7e9 fb5f 	bl	8000168 <__udivsi3>
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 8016aaa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8016aac:	64a0      	str	r0, [r4, #72]	@ 0x48
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 8016aae:	2b05      	cmp	r3, #5
 8016ab0:	d0cf      	beq.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
                            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ab6:	e7cc      	b.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8016ab8:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 8016aba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8016abc:	e7de      	b.n	8016a7c <_ux_device_class_hid_control_request+0x88>
            hid -> ux_device_class_hid_protocol = request_value;
 8016abe:	64e5      	str	r5, [r4, #76]	@ 0x4c
            break;
 8016ac0:	e7c7      	b.n	8016a52 <_ux_device_class_hid_control_request+0x5e>
    switch (request)
 8016ac2:	20ff      	movs	r0, #255	@ 0xff
 8016ac4:	e7c6      	b.n	8016a54 <_ux_device_class_hid_control_request+0x60>
 8016ac6:	46c0      	nop			@ (mov r8, r8)
 8016ac8:	20003104 	.word	0x20003104

08016acc <_ux_device_class_hid_deactivate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016acc:	6a03      	ldr	r3, [r0, #32]
{
 8016ace:	b510      	push	{r4, lr}
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8016ad0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 8016ad2:	2126      	movs	r1, #38	@ 0x26
 8016ad4:	6860      	ldr	r0, [r4, #4]
 8016ad6:	f7ff fcbd 	bl	8016454 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8016ada:	69e3      	ldr	r3, [r4, #28]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d001      	beq.n	8016ae4 <_ux_device_class_hid_deactivate+0x18>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 8016ae0:	0020      	movs	r0, r4
 8016ae2:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8016ae4:	2000      	movs	r0, #0
 8016ae6:	bd10      	pop	{r4, pc}

08016ae8 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8016ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016aea:	001e      	movs	r6, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016aec:	4b28      	ldr	r3, [pc, #160]	@ (8016b90 <_ux_device_class_hid_descriptor_send+0xa8>)

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016aee:	2403      	movs	r4, #3
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016af0:	681d      	ldr	r5, [r3, #0]
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8016af2:	0a09      	lsrs	r1, r1, #8
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016af4:	002b      	movs	r3, r5
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016af6:	002f      	movs	r7, r5
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016af8:	335c      	adds	r3, #92	@ 0x5c
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016afa:	629c      	str	r4, [r3, #40]	@ 0x28
 8016afc:	34fc      	adds	r4, #252	@ 0xfc
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8016afe:	373c      	adds	r7, #60	@ 0x3c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016b00:	9301      	str	r3, [sp, #4]
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8016b02:	4021      	ands	r1, r4

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8016b04:	2921      	cmp	r1, #33	@ 0x21
 8016b06:	d008      	beq.n	8016b1a <_ux_device_class_hid_descriptor_send+0x32>
 8016b08:	2922      	cmp	r1, #34	@ 0x22
 8016b0a:	d02f      	beq.n	8016b6c <_ux_device_class_hid_descriptor_send+0x84>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016b0c:	003a      	movs	r2, r7
 8016b0e:	2114      	movs	r1, #20
 8016b10:	0028      	movs	r0, r5
 8016b12:	69ab      	ldr	r3, [r5, #24]
 8016b14:	4798      	blx	r3
        return(UX_ERROR);
 8016b16:	0020      	movs	r0, r4
 8016b18:	e00e      	b.n	8016b38 <_ux_device_class_hid_descriptor_send+0x50>
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8016b1a:	002b      	movs	r3, r5
 8016b1c:	33cc      	adds	r3, #204	@ 0xcc
 8016b1e:	6819      	ldr	r1, [r3, #0]
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8016b20:	3304      	adds	r3, #4
 8016b22:	681b      	ldr	r3, [r3, #0]
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8016b24:	b2d2      	uxtb	r2, r2
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8016b26:	18cb      	adds	r3, r1, r3
 8016b28:	469c      	mov	ip, r3
        while (device_framework < device_framework_end)
 8016b2a:	4561      	cmp	r1, ip
 8016b2c:	d305      	bcc.n	8016b3a <_ux_device_class_hid_descriptor_send+0x52>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8016b2e:	003a      	movs	r2, r7
 8016b30:	2114      	movs	r1, #20
 8016b32:	0028      	movs	r0, r5
 8016b34:	69ab      	ldr	r3, [r5, #24]
 8016b36:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
 8016b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            descriptor_type =  *(device_framework + 1);
 8016b3a:	7848      	ldrb	r0, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 8016b3c:	780b      	ldrb	r3, [r1, #0]
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8016b3e:	2804      	cmp	r0, #4
 8016b40:	d102      	bne.n	8016b48 <_ux_device_class_hid_descriptor_send+0x60>
                interface_number = *(device_framework + 2);
 8016b42:	788c      	ldrb	r4, [r1, #2]
            device_framework +=  descriptor_length;
 8016b44:	18c9      	adds	r1, r1, r3
 8016b46:	e7f0      	b.n	8016b2a <_ux_device_class_hid_descriptor_send+0x42>
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8016b48:	2821      	cmp	r0, #33	@ 0x21
 8016b4a:	d1fb      	bne.n	8016b44 <_ux_device_class_hid_descriptor_send+0x5c>
 8016b4c:	42a2      	cmp	r2, r4
 8016b4e:	d1f9      	bne.n	8016b44 <_ux_device_class_hid_descriptor_send+0x5c>
                if (descriptor_length < host_length)
 8016b50:	0034      	movs	r4, r6
 8016b52:	429e      	cmp	r6, r3
 8016b54:	d900      	bls.n	8016b58 <_ux_device_class_hid_descriptor_send+0x70>
 8016b56:	001c      	movs	r4, r3
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8016b58:	0022      	movs	r2, r4
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8016b5a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8016b5c:	f7ff fe9e 	bl	801689c <_ux_utility_memory_copy>
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8016b60:	0032      	movs	r2, r6
 8016b62:	0021      	movs	r1, r4
 8016b64:	9801      	ldr	r0, [sp, #4]
 8016b66:	f7ff fc7b 	bl	8016460 <_ux_device_stack_transfer_request>
        break;
 8016b6a:	e7e5      	b.n	8016b38 <_ux_device_class_hid_descriptor_send+0x50>
        if (descriptor_length < host_length)
 8016b6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8016b6e:	42b4      	cmp	r4, r6
 8016b70:	d900      	bls.n	8016b74 <_ux_device_class_hid_descriptor_send+0x8c>
 8016b72:	0034      	movs	r4, r6
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8016b74:	2380      	movs	r3, #128	@ 0x80
 8016b76:	005b      	lsls	r3, r3, #1
 8016b78:	429c      	cmp	r4, r3
 8016b7a:	d905      	bls.n	8016b88 <_ux_device_class_hid_descriptor_send+0xa0>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8016b7c:	2212      	movs	r2, #18
 8016b7e:	2107      	movs	r1, #7
 8016b80:	2002      	movs	r0, #2
 8016b82:	f7ff fcd5 	bl	8016530 <_ux_system_error_handler>
 8016b86:	e7d2      	b.n	8016b2e <_ux_device_class_hid_descriptor_send+0x46>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8016b88:	0022      	movs	r2, r4
 8016b8a:	6a01      	ldr	r1, [r0, #32]
 8016b8c:	e7e5      	b.n	8016b5a <_ux_device_class_hid_descriptor_send+0x72>
 8016b8e:	46c0      	nop			@ (mov r8, r8)
 8016b90:	20003104 	.word	0x20003104

08016b94 <_ux_device_class_hid_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8016b94:	0003      	movs	r3, r0
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8016b96:	6800      	ldr	r0, [r0, #0]
{
 8016b98:	b510      	push	{r4, lr}
    switch (command -> ux_slave_class_command_request)
 8016b9a:	3801      	subs	r0, #1
 8016b9c:	2806      	cmp	r0, #6
 8016b9e:	d81f      	bhi.n	8016be0 <_ux_device_class_hid_entry+0x4c>
 8016ba0:	f7e9 fac4 	bl	800012c <__gnu_thumb1_case_uqi>
 8016ba4:	1a16120c 	.word	0x1a16120c
 8016ba8:	1e04      	.short	0x1e04
 8016baa:	08          	.byte	0x08
 8016bab:	00          	.byte	0x00

        /* Call the init function of the HID class.  */
#if defined(UX_DEVICE_CLASS_HID_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_hid_initialize(command);
#else
        status =  _ux_device_class_hid_initialize(command);
 8016bac:	0018      	movs	r0, r3
 8016bae:	f000 f88b 	bl	8016cc8 <_ux_device_class_hid_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 8016bb2:	bd10      	pop	{r4, pc}
        status =  _ux_device_class_hid_uninitialize(command);
 8016bb4:	0018      	movs	r0, r3
 8016bb6:	f000 fa93 	bl	80170e0 <_ux_device_class_hid_uninitialize>
        return(status);
 8016bba:	e7fa      	b.n	8016bb2 <_ux_device_class_hid_entry+0x1e>
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8016bbc:	695b      	ldr	r3, [r3, #20]
            return(UX_NO_CLASS_MATCH);
 8016bbe:	2057      	movs	r0, #87	@ 0x57
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8016bc0:	2b03      	cmp	r3, #3
 8016bc2:	d1f6      	bne.n	8016bb2 <_ux_device_class_hid_entry+0x1e>
            return(UX_SUCCESS);
 8016bc4:	2000      	movs	r0, #0
 8016bc6:	e7f4      	b.n	8016bb2 <_ux_device_class_hid_entry+0x1e>
        status =  _ux_device_class_hid_activate(command);
 8016bc8:	0018      	movs	r0, r3
 8016bca:	f7ff fec9 	bl	8016960 <_ux_device_class_hid_activate>
        return(status);
 8016bce:	e7f0      	b.n	8016bb2 <_ux_device_class_hid_entry+0x1e>
        status =  _ux_device_class_hid_deactivate(command);
 8016bd0:	0018      	movs	r0, r3
 8016bd2:	f7ff ff7b 	bl	8016acc <_ux_device_class_hid_deactivate>
        return(status);
 8016bd6:	e7ec      	b.n	8016bb2 <_ux_device_class_hid_entry+0x1e>
        status = _ux_device_class_hid_control_request(command);
 8016bd8:	0018      	movs	r0, r3
 8016bda:	f7ff ff0b 	bl	80169f4 <_ux_device_class_hid_control_request>
        return(status);
 8016bde:	e7e8      	b.n	8016bb2 <_ux_device_class_hid_entry+0x1e>
    switch (command -> ux_slave_class_command_request)
 8016be0:	2054      	movs	r0, #84	@ 0x54
 8016be2:	e7e6      	b.n	8016bb2 <_ux_device_class_hid_entry+0x1e>

08016be4 <_ux_device_class_hid_event_check>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016be4:	4a07      	ldr	r2, [pc, #28]	@ (8016c04 <_ux_device_class_hid_event_check+0x20>)
{
 8016be6:	0003      	movs	r3, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016be8:	6812      	ldr	r2, [r2, #0]
        return(UX_DEVICE_HANDLE_UNKNOWN);
 8016bea:	2050      	movs	r0, #80	@ 0x50
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016bec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8016bee:	2a03      	cmp	r2, #3
 8016bf0:	d106      	bne.n	8016c00 <_ux_device_class_hid_event_check+0x1c>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head ==
        hid -> ux_device_class_hid_event_array_tail)
 8016bf2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    if (hid -> ux_device_class_hid_event_array_head ==
 8016bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54

        /* No event to report.  */
        return(UX_ERROR);
 8016bf6:	30af      	adds	r0, #175	@ 0xaf
    if (hid -> ux_device_class_hid_event_array_head ==
 8016bf8:	4293      	cmp	r3, r2
 8016bfa:	d001      	beq.n	8016c00 <_ux_device_class_hid_event_check+0x1c>

    /* There is an event to report, get the current pointer to the event.  */
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
    return(UX_SUCCESS);
 8016bfc:	2000      	movs	r0, #0
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8016bfe:	600a      	str	r2, [r1, #0]
}
 8016c00:	4770      	bx	lr
 8016c02:	46c0      	nop			@ (mov r8, r8)
 8016c04:	20003104 	.word	0x20003104

08016c08 <_ux_device_class_hid_event_free>:
/**************************************************************************/
VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)
{
UCHAR                           *pos;

    pos = (UCHAR *) hid -> ux_device_class_hid_event_array_tail;
 8016c08:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 8016c0a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8016c0c:	3310      	adds	r3, #16
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d800      	bhi.n	8016c14 <_ux_device_class_hid_event_free+0xc>
        pos = (UCHAR *) hid -> ux_device_class_hid_event_array;
 8016c12:	6d03      	ldr	r3, [r0, #80]	@ 0x50
    hid -> ux_device_class_hid_event_array_tail = (UX_DEVICE_CLASS_HID_EVENT *) pos;
 8016c14:	6583      	str	r3, [r0, #88]	@ 0x58
}
 8016c16:	4770      	bx	lr

08016c18 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,
                                     UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8016c18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c1a:	000c      	movs	r4, r1

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Check and get event pointer.  */
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 8016c1c:	a901      	add	r1, sp, #4
{
 8016c1e:	0005      	movs	r5, r0
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 8016c20:	f7ff ffe0 	bl	8016be4 <_ux_device_class_hid_event_check>
 8016c24:	1e06      	subs	r6, r0, #0
    if (status != UX_SUCCESS)
 8016c26:	d10f      	bne.n	8016c48 <_ux_device_class_hid_event_get+0x30>
        return(status);

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 8016c28:	9b01      	ldr	r3, [sp, #4]
 8016c2a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8016c2c:	6899      	ldr	r1, [r3, #8]
 8016c2e:	4291      	cmp	r1, r2
 8016c30:	d900      	bls.n	8016c34 <_ux_device_class_hid_event_get+0x1c>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid);
 8016c32:	609a      	str	r2, [r3, #8]

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;

    /* Copy the event data into the user buffer.  */
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8016c34:	0020      	movs	r0, r4
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8016c36:	689a      	ldr	r2, [r3, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8016c38:	300c      	adds	r0, #12
 8016c3a:	68d9      	ldr	r1, [r3, #12]
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8016c3c:	60a2      	str	r2, [r4, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8016c3e:	f7ff fe2d 	bl	801689c <_ux_utility_memory_copy>
                            UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
                            current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Free the tail event.  */
    _ux_device_class_hid_event_free(hid);
 8016c42:	0028      	movs	r0, r5
 8016c44:	f7ff ffe0 	bl	8016c08 <_ux_device_class_hid_event_free>

    /* Return event status to the user.  */
    return(UX_SUCCESS);
}
 8016c48:	0030      	movs	r0, r6
 8016c4a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08016c4c <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8016c4c:	b570      	push	{r4, r5, r6, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8016c4e:	6d46      	ldr	r6, [r0, #84]	@ 0x54
{
 8016c50:	0004      	movs	r4, r0
 8016c52:	000d      	movs	r5, r1

    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
        return (UX_ERROR);
 8016c54:	20ff      	movs	r0, #255	@ 0xff
    if (current_hid_event == UX_NULL)
 8016c56:	2e00      	cmp	r6, #0
 8016c58:	d018      	beq.n	8016c8c <_ux_device_class_hid_event_set+0x40>
    
    /* Calculate the next position.  */
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8016c5a:	0033      	movs	r3, r6
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8016c5c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8016c5e:	3310      	adds	r3, #16
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d800      	bhi.n	8016c66 <_ux_device_class_hid_event_set+0x1a>
        next_position = (UCHAR *)hid -> ux_device_class_hid_event_array;
 8016c64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    next_hid_event = (UX_DEVICE_CLASS_HID_EVENT *)next_position;

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8016c66:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        return (UX_ERROR);
 8016c68:	20ff      	movs	r0, #255	@ 0xff
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d00e      	beq.n	8016c8c <_ux_device_class_hid_event_set+0x40>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8016c6e:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8016c70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 8016c72:	68aa      	ldr	r2, [r5, #8]
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d120      	bne.n	8016cba <_ux_device_class_hid_event_set+0x6e>
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 8016c78:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8016c7a:	3201      	adds	r2, #1
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d906      	bls.n	8016c8e <_ux_device_class_hid_event_set+0x42>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8016c80:	38fd      	subs	r0, #253	@ 0xfd
 8016c82:	2212      	movs	r2, #18
 8016c84:	2107      	movs	r1, #7
 8016c86:	f7ff fc53 	bl	8016530 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 8016c8a:	2012      	movs	r0, #18
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
}
 8016c8c:	bd70      	pop	{r4, r5, r6, pc}
                                hid_event -> ux_device_class_hid_event_buffer,
 8016c8e:	0029      	movs	r1, r5
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 8016c90:	68f3      	ldr	r3, [r6, #12]
 8016c92:	682a      	ldr	r2, [r5, #0]
                                hid_event -> ux_device_class_hid_event_buffer,
 8016c94:	310c      	adds	r1, #12
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 8016c96:	701a      	strb	r2, [r3, #0]
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 8016c98:	68f0      	ldr	r0, [r6, #12]
 8016c9a:	68aa      	ldr	r2, [r5, #8]
 8016c9c:	3001      	adds	r0, #1
 8016c9e:	f7ff fdfd 	bl	801689c <_ux_utility_memory_copy>
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8016ca2:	68ab      	ldr	r3, [r5, #8]
 8016ca4:	3301      	adds	r3, #1
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 8016ca6:	2204      	movs	r2, #4
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8016ca8:	60b3      	str	r3, [r6, #8]
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 8016caa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016cac:	4393      	bics	r3, r2
 8016cae:	2b01      	cmp	r3, #1
 8016cb0:	d001      	beq.n	8016cb6 <_ux_device_class_hid_event_set+0x6a>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return(UX_SUCCESS);
 8016cb6:	2000      	movs	r0, #0
 8016cb8:	e7e8      	b.n	8016c8c <_ux_device_class_hid_event_set+0x40>
                                hid_event -> ux_device_class_hid_event_buffer,
 8016cba:	0029      	movs	r1, r5
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 8016cbc:	68f0      	ldr	r0, [r6, #12]
                                hid_event -> ux_device_class_hid_event_buffer,
 8016cbe:	310c      	adds	r1, #12
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 8016cc0:	f7ff fdec 	bl	801689c <_ux_utility_memory_copy>
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 8016cc4:	68ab      	ldr	r3, [r5, #8]
 8016cc6:	e7ee      	b.n	8016ca6 <_ux_device_class_hid_event_set+0x5a>

08016cc8 <_ux_device_class_hid_initialize>:
/*                                            checked compile options,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8016cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8016cca:	2100      	movs	r1, #0
    hid_parameter =  command -> ux_slave_class_command_parameter;
 8016ccc:	6a45      	ldr	r5, [r0, #36]	@ 0x24
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8016cce:	6a07      	ldr	r7, [r0, #32]
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8016cd0:	2284      	movs	r2, #132	@ 0x84
 8016cd2:	0008      	movs	r0, r1
 8016cd4:	f7ff fcec 	bl	80166b0 <_ux_utility_memory_allocate>
 8016cd8:	1e04      	subs	r4, r0, #0

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 8016cda:	d00b      	beq.n	8016cf4 <_ux_device_class_hid_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 8016cdc:	64b8      	str	r0, [r7, #72]	@ 0x48

#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)

    /* Allocate buffer(s) for endpoint(s).  */
    UX_ASSERT(!UX_DEVICE_CLASS_HID_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);
    hid -> ux_device_class_hid_endpoint_buffer = _ux_utility_memory_allocate(
 8016cde:	2248      	movs	r2, #72	@ 0x48
 8016ce0:	2101      	movs	r1, #1
 8016ce2:	2000      	movs	r0, #0
 8016ce4:	f7ff fce4 	bl	80166b0 <_ux_utility_memory_allocate>
 8016ce8:	60a0      	str	r0, [r4, #8]
                            UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
                            UX_DEVICE_CLASS_HID_ENDPOINT_BUFFER_SIZE);
    if (hid -> ux_device_class_hid_endpoint_buffer == UX_NULL)
 8016cea:	2800      	cmp	r0, #0
 8016cec:	d105      	bne.n	8016cfa <_ux_device_class_hid_initialize+0x32>
    {
        _ux_utility_memory_free(hid);
 8016cee:	0020      	movs	r0, r4
 8016cf0:	f7ff fdde 	bl	80168b0 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8016cf4:	2512      	movs	r5, #18
    /* Free HID instance. */
    _ux_utility_memory_free(hid);

    /* Return completion status.  */
    return(status);
}
 8016cf6:	0028      	movs	r0, r5
 8016cf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 8016cfa:	4b35      	ldr	r3, [pc, #212]	@ (8016dd0 <_ux_device_class_hid_initialize+0x108>)
                                    UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
 8016cfc:	3008      	adds	r0, #8
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_buffer =
 8016cfe:	6420      	str	r0, [r4, #64]	@ 0x40
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 8016d00:	653b      	str	r3, [r7, #80]	@ 0x50
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 8016d02:	68ab      	ldr	r3, [r5, #8]
 8016d04:	6223      	str	r3, [r4, #32]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8016d06:	692b      	ldr	r3, [r5, #16]
 8016d08:	62a3      	str	r3, [r4, #40]	@ 0x28
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 8016d0a:	68eb      	ldr	r3, [r5, #12]
 8016d0c:	6263      	str	r3, [r4, #36]	@ 0x24
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8016d0e:	696b      	ldr	r3, [r5, #20]
 8016d10:	6123      	str	r3, [r4, #16]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 8016d12:	69ab      	ldr	r3, [r5, #24]
 8016d14:	6163      	str	r3, [r4, #20]
        if (UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter) == 0 ||
 8016d16:	6a2b      	ldr	r3, [r5, #32]
 8016d18:	3b01      	subs	r3, #1
 8016d1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8016d1c:	d901      	bls.n	8016d22 <_ux_device_class_hid_initialize+0x5a>
            UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter) = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8016d1e:	2340      	movs	r3, #64	@ 0x40
 8016d20:	622b      	str	r3, [r5, #32]
        if (UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter) < 2 ||
 8016d22:	69eb      	ldr	r3, [r5, #28]
 8016d24:	3b02      	subs	r3, #2
 8016d26:	2b06      	cmp	r3, #6
 8016d28:	d901      	bls.n	8016d2e <_ux_device_class_hid_initialize+0x66>
            UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter) = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8016d2a:	2308      	movs	r3, #8
 8016d2c:	61eb      	str	r3, [r5, #28]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8016d2e:	2100      	movs	r1, #0
        UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid) = UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8016d30:	6a2b      	ldr	r3, [r5, #32]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8016d32:	0008      	movs	r0, r1
        UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid) = UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8016d34:	6623      	str	r3, [r4, #96]	@ 0x60
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 8016d36:	69eb      	ldr	r3, [r5, #28]
 8016d38:	011b      	lsls	r3, r3, #4
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8016d3a:	001a      	movs	r2, r3
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 8016d3c:	9301      	str	r3, [sp, #4]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8016d3e:	f7ff fcb7 	bl	80166b0 <_ux_utility_memory_allocate>
            buffer = _ux_utility_memory_allocate_mulv_safe(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8016d42:	2101      	movs	r1, #1
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 8016d44:	6520      	str	r0, [r4, #80]	@ 0x50
            buffer = _ux_utility_memory_allocate_mulv_safe(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY,
 8016d46:	69eb      	ldr	r3, [r5, #28]
 8016d48:	2000      	movs	r0, #0
 8016d4a:	6a2a      	ldr	r2, [r5, #32]
 8016d4c:	f7ff fd35 	bl	80167ba <_ux_utility_memory_allocate_mulv_safe>
 8016d50:	1e06      	subs	r6, r0, #0
            if (buffer == UX_NULL)
 8016d52:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8016d54:	d00a      	beq.n	8016d6c <_ux_device_class_hid_initialize+0xa4>
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 8016d56:	2300      	movs	r3, #0
 8016d58:	69e9      	ldr	r1, [r5, #28]
 8016d5a:	4299      	cmp	r1, r3
 8016d5c:	d00b      	beq.n	8016d76 <_ux_device_class_hid_initialize+0xae>
                    hid -> ux_device_class_hid_event_array[i].ux_device_class_hid_event_buffer = buffer;
 8016d5e:	011a      	lsls	r2, r3, #4
 8016d60:	1882      	adds	r2, r0, r2
 8016d62:	60d6      	str	r6, [r2, #12]
                    buffer += UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8016d64:	6a2a      	ldr	r2, [r5, #32]
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 8016d66:	3301      	adds	r3, #1
                    buffer += UX_DEVICE_CLASS_HID_PARAM_EVENT_MAX_LENGTH(hid_parameter);
 8016d68:	18b6      	adds	r6, r6, r2
                for (i = 0; i < UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter); i ++)
 8016d6a:	e7f6      	b.n	8016d5a <_ux_device_class_hid_initialize+0x92>
                if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	d002      	beq.n	8016d76 <_ux_device_class_hid_initialize+0xae>
                    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8016d70:	f7ff fd9e 	bl	80168b0 <_ux_utility_memory_free>
                    hid -> ux_device_class_hid_event_array = UX_NULL;
 8016d74:	6526      	str	r6, [r4, #80]	@ 0x50
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8016d76:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d027      	beq.n	8016dcc <_ux_device_class_hid_initialize+0x104>
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8016d7c:	9a01      	ldr	r2, [sp, #4]
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8016d7e:	6563      	str	r3, [r4, #84]	@ 0x54
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8016d80:	65a3      	str	r3, [r4, #88]	@ 0x58
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8016d82:	189b      	adds	r3, r3, r2
 8016d84:	65e3      	str	r3, [r4, #92]	@ 0x5c
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 8016d86:	682b      	ldr	r3, [r5, #0]
 8016d88:	61a3      	str	r3, [r4, #24]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 8016d8a:	686b      	ldr	r3, [r5, #4]
 8016d8c:	61e3      	str	r3, [r4, #28]
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8016d8e:	2301      	movs	r3, #1
 8016d90:	425b      	negs	r3, r3
 8016d92:	64a3      	str	r3, [r4, #72]	@ 0x48
                    if (hid_parameter -> ux_device_class_hid_parameter_receiver_initialize)
 8016d94:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d101      	bne.n	8016d9e <_ux_device_class_hid_initialize+0xd6>
                        return(status);
 8016d9a:	2500      	movs	r5, #0
 8016d9c:	e7ab      	b.n	8016cf6 <_ux_device_class_hid_initialize+0x2e>
                                                &hid -> ux_device_class_hid_receiver);
 8016d9e:	0022      	movs	r2, r4
                        status = hid_parameter ->
 8016da0:	0029      	movs	r1, r5
 8016da2:	0020      	movs	r0, r4
                                                &hid -> ux_device_class_hid_receiver);
 8016da4:	3268      	adds	r2, #104	@ 0x68
                        status = hid_parameter ->
 8016da6:	4798      	blx	r3
 8016da8:	1e05      	subs	r5, r0, #0
                    if (status == UX_SUCCESS)
 8016daa:	d0f6      	beq.n	8016d9a <_ux_device_class_hid_initialize+0xd2>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
 8016dac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016dae:	68d8      	ldr	r0, [r3, #12]
 8016db0:	f7ff fd7e 	bl	80168b0 <_ux_utility_memory_free>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8016db4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8016db6:	f7ff fd7b 	bl	80168b0 <_ux_utility_memory_free>
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
 8016dba:	68a0      	ldr	r0, [r4, #8]
 8016dbc:	f7ff fd78 	bl	80168b0 <_ux_utility_memory_free>
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8016dc0:	2300      	movs	r3, #0
    _ux_utility_memory_free(hid);
 8016dc2:	0020      	movs	r0, r4
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8016dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
    _ux_utility_memory_free(hid);
 8016dc6:	f7ff fd73 	bl	80168b0 <_ux_utility_memory_free>
    return(status);
 8016dca:	e794      	b.n	8016cf6 <_ux_device_class_hid_initialize+0x2e>
            status =  UX_MEMORY_INSUFFICIENT;
 8016dcc:	2512      	movs	r5, #18
 8016dce:	e7f4      	b.n	8016dba <_ux_device_class_hid_initialize+0xf2>
 8016dd0:	08017039 	.word	0x08017039

08016dd4 <_ux_device_class_hid_receiver_event_free>:
UX_DEVICE_CLASS_HID_RECEIVER            *receiver;
UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *pos;
UCHAR                                   *next_pos;

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;
 8016dd4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_RECEIVER_EVENT_FREE, hid, pos, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* If event is not valid, return error.  */
    if (pos -> ux_device_class_hid_received_event_length == 0)
        return(UX_ERROR);
 8016dd6:	20ff      	movs	r0, #255	@ 0xff
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 8016dd8:	695a      	ldr	r2, [r3, #20]
    if (pos -> ux_device_class_hid_received_event_length == 0)
 8016dda:	6811      	ldr	r1, [r2, #0]
 8016ddc:	2900      	cmp	r1, #0
 8016dde:	d008      	beq.n	8016df2 <_ux_device_class_hid_receiver_event_free+0x1e>

    /* Invalidate the event and advance position.  */

    /* Calculate next item address.  */
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8016de0:	0011      	movs	r1, r2

    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8016de2:	6918      	ldr	r0, [r3, #16]
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8016de4:	3108      	adds	r1, #8
    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8016de6:	4288      	cmp	r0, r1
 8016de8:	d800      	bhi.n	8016dec <_ux_device_class_hid_receiver_event_free+0x18>
        next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 8016dea:	68d9      	ldr	r1, [r3, #12]
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;

    pos -> ux_device_class_hid_received_event_length = 0;
 8016dec:	2000      	movs	r0, #0
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 8016dee:	6159      	str	r1, [r3, #20]
    pos -> ux_device_class_hid_received_event_length = 0;
 8016df0:	6010      	str	r0, [r2, #0]
                                UX_DEVICE_CLASS_HID_RECEIVER_RESTART, UX_OR);

    /* Return event status to the user.  */
    return(UX_SUCCESS);
#endif
}
 8016df2:	4770      	bx	lr

08016df4 <_ux_device_class_hid_receiver_event_get>:

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;

    /* Get current reading position.  */
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 8016df4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);

        return(UX_SUCCESS);
    }

    return(UX_ERROR);
 8016df6:	20ff      	movs	r0, #255	@ 0xff
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 8016df8:	695b      	ldr	r3, [r3, #20]
    if (pos -> ux_device_class_hid_received_event_length != 0)
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	2a00      	cmp	r2, #0
 8016dfe:	d003      	beq.n	8016e08 <_ux_device_class_hid_receiver_event_get+0x14>
        return(UX_SUCCESS);
 8016e00:	2000      	movs	r0, #0
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 8016e02:	685b      	ldr	r3, [r3, #4]
        event -> ux_device_class_hid_received_event_length = pos -> ux_device_class_hid_received_event_length;
 8016e04:	600a      	str	r2, [r1, #0]
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 8016e06:	604b      	str	r3, [r1, #4]
#endif
}
 8016e08:	4770      	bx	lr
	...

08016e0c <_ux_device_class_hid_receiver_initialize>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_initialize(UX_SLAVE_CLASS_HID *hid,
                                    UX_SLAVE_CLASS_HID_PARAMETER *parameter,
                                    UX_DEVICE_CLASS_HID_RECEIVER **receiver)
{
 8016e0c:	b5f0      	push	{r4, r5, r6, r7, lr}

#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Events structs are in regular memory.  */
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT), parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT) * parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8016e0e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
{
 8016e10:	000d      	movs	r5, r1
#endif
    UX_ASSERT(!UX_OVERFLOW_CHECK_ADD_ULONG(memory_size, events_size));
    memory_size += events_size;

    /* Allocate memory.  */
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 8016e12:	2100      	movs	r1, #0
    events_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT) * parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8016e14:	00db      	lsls	r3, r3, #3
{
 8016e16:	b087      	sub	sp, #28
    memory_size += events_size;
 8016e18:	3320      	adds	r3, #32
{
 8016e1a:	9003      	str	r0, [sp, #12]
 8016e1c:	9204      	str	r2, [sp, #16]
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 8016e1e:	0008      	movs	r0, r1
 8016e20:	001a      	movs	r2, r3
    memory_size += events_size;
 8016e22:	9301      	str	r3, [sp, #4]
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 8016e24:	f7ff fc44 	bl	80166b0 <_ux_utility_memory_allocate>
 8016e28:	1e04      	subs	r4, r0, #0
    if (memory_receiver == UX_NULL)
 8016e2a:	d02b      	beq.n	8016e84 <_ux_device_class_hid_receiver_initialize+0x78>
        return(UX_MEMORY_INSUFFICIENT);
#if !defined(UX_DEVICE_STANDALONE)
    memory_stack = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
    memory_events = memory_stack + UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE;
#else
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 8016e2c:	0006      	movs	r6, r0
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Allocate cache safe memory.  */

    /* Total buffer size calculate.  */
    events_size  = parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 8016e2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(events_size, parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8016e30:	6aaa      	ldr	r2, [r5, #40]	@ 0x28

    /* Allocate buffer.  */
    buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, events_size);
 8016e32:	2101      	movs	r1, #1
 8016e34:	2000      	movs	r0, #0
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 8016e36:	435a      	muls	r2, r3
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 8016e38:	3620      	adds	r6, #32
    buffer = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, events_size);
 8016e3a:	f7ff fc39 	bl	80166b0 <_ux_utility_memory_allocate>
    if (buffer == UX_NULL)
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	d01d      	beq.n	8016e7e <_ux_device_class_hid_receiver_initialize+0x72>
        return(UX_MEMORY_INSUFFICIENT);
    }

    /* Assign events buffers.  */
    events_head = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *) memory_events;
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8016e42:	6aab      	ldr	r3, [r5, #40]	@ 0x28
    {

        /* Assign event buffer.  */
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8016e44:	0021      	movs	r1, r4
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8016e46:	9302      	str	r3, [sp, #8]
 8016e48:	2300      	movs	r3, #0
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8016e4a:	3124      	adds	r1, #36	@ 0x24

        /* Move to next event and next buffer.  */
        buffer += parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 8016e4c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8016e4e:	9105      	str	r1, [sp, #20]
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8016e50:	9902      	ldr	r1, [sp, #8]
 8016e52:	4299      	cmp	r1, r3
 8016e54:	d119      	bne.n	8016e8a <_ux_device_class_hid_receiver_initialize+0x7e>
        events_head ++;
    }
#endif

    /* Store receiver instance pointer.  */
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 8016e56:	9b04      	ldr	r3, [sp, #16]
    {

#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&((*receiver) -> ux_device_class_hid_receiver_thread), hid)
#else
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8016e58:	9903      	ldr	r1, [sp, #12]
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 8016e5a:	601c      	str	r4, [r3, #0]
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8016e5c:	2323      	movs	r3, #35	@ 0x23
 8016e5e:	67cb      	str	r3, [r1, #124]	@ 0x7c
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8016e60:	4b0e      	ldr	r3, [pc, #56]	@ (8016e9c <_ux_device_class_hid_receiver_initialize+0x90>)
        /* Initialize callback function.  */
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
                    parameter -> ux_device_class_hid_parameter_receiver_event_callback;

        /* Done success.  */
        return(UX_SUCCESS);
 8016e62:	2000      	movs	r0, #0
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8016e64:	61e3      	str	r3, [r4, #28]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 8016e66:	9b01      	ldr	r3, [sp, #4]
        (*receiver) -> ux_device_class_hid_receiver_event_buffer_size =
 8016e68:	60a2      	str	r2, [r4, #8]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 8016e6a:	18e3      	adds	r3, r4, r3
        (*receiver) -> ux_device_class_hid_receiver_events_end =
 8016e6c:	6123      	str	r3, [r4, #16]
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 8016e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8016ea0 <_ux_device_class_hid_receiver_initialize+0x94>)
        (*receiver) -> ux_device_class_hid_receiver_events =
 8016e70:	60e6      	str	r6, [r4, #12]
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 8016e72:	6023      	str	r3, [r4, #0]
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 8016e74:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
        (*receiver) -> ux_device_class_hid_receiver_event_read_pos =
 8016e76:	6166      	str	r6, [r4, #20]
        (*receiver) -> ux_device_class_hid_receiver_event_save_pos =
 8016e78:	61a6      	str	r6, [r4, #24]
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 8016e7a:	6063      	str	r3, [r4, #4]
        return(UX_SUCCESS);
 8016e7c:	e003      	b.n	8016e86 <_ux_device_class_hid_receiver_initialize+0x7a>
        _ux_utility_memory_free(memory_receiver);
 8016e7e:	0020      	movs	r0, r4
 8016e80:	f7ff fd16 	bl	80168b0 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 8016e84:	2012      	movs	r0, #18
    (*receiver) =  UX_NULL;

    /* Return completion status.  */
    return(status);
#endif
}
 8016e86:	b007      	add	sp, #28
 8016e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8016e8a:	00d9      	lsls	r1, r3, #3
 8016e8c:	468c      	mov	ip, r1
 8016e8e:	4667      	mov	r7, ip
 8016e90:	9905      	ldr	r1, [sp, #20]
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8016e92:	3301      	adds	r3, #1
        events_head -> ux_device_class_hid_received_event_data = buffer;
 8016e94:	51c8      	str	r0, [r1, r7]
        buffer += parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 8016e96:	1880      	adds	r0, r0, r2
    for (i = 0; i < parameter -> ux_device_class_hid_parameter_receiver_event_max_number; i++)
 8016e98:	e7da      	b.n	8016e50 <_ux_device_class_hid_receiver_initialize+0x44>
 8016e9a:	46c0      	nop			@ (mov r8, r8)
 8016e9c:	08016ea5 	.word	0x08016ea5
 8016ea0:	08016f41 	.word	0x08016f41

08016ea4 <_ux_device_class_hid_receiver_tasks_run>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016ea4:	4b25      	ldr	r3, [pc, #148]	@ (8016f3c <_ux_device_class_hid_receiver_tasks_run+0x98>)
{
 8016ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016ea8:	681b      	ldr	r3, [r3, #0]
{
 8016eaa:	0004      	movs	r4, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        return(UX_STATE_EXIT);
 8016eae:	2501      	movs	r5, #1
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8016eb0:	9301      	str	r3, [sp, #4]
 8016eb2:	2b03      	cmp	r3, #3
 8016eb4:	d11a      	bne.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>

    /* Get receiver instance.  */
    receiver = hid -> ux_device_class_hid_receiver;
 8016eb6:	6e86      	ldr	r6, [r0, #104]	@ 0x68
    if (receiver == UX_NULL)
 8016eb8:	2e00      	cmp	r6, #0
 8016eba:	d017      	beq.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>
        return(UX_STATE_EXIT);

    /* Get endpoint.  */
    endpoint = hid -> ux_device_class_hid_read_endpoint;
 8016ebc:	6e47      	ldr	r7, [r0, #100]	@ 0x64
    if (endpoint == UX_NULL)
 8016ebe:	2f00      	cmp	r7, #0
 8016ec0:	d014      	beq.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>

    /* Event buffer available, issue request to get data.  */
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;

    /* Run read/receiver states.  */
    switch(hid -> ux_device_class_hid_read_state)
 8016ec2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8016ec4:	2b23      	cmp	r3, #35	@ 0x23
 8016ec6:	d013      	beq.n	8016ef0 <_ux_device_class_hid_receiver_tasks_run+0x4c>
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
        if (pos -> ux_device_class_hid_received_event_length != 0)
        {

            /* Buffer is full, keep waiting.  */
            return(UX_STATE_IDLE);
 8016ec8:	196d      	adds	r5, r5, r5
    switch(hid -> ux_device_class_hid_read_state)
 8016eca:	2b24      	cmp	r3, #36	@ 0x24
 8016ecc:	d10e      	bne.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>

        /* Fall through.  */
    case UX_DEVICE_CLASS_HID_RECEIVER_WAIT:

        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_run(transfer,
 8016ece:	0038      	movs	r0, r7
 8016ed0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016ed2:	3020      	adds	r0, #32
 8016ed4:	000a      	movs	r2, r1
 8016ed6:	f7ff fad3 	bl	8016480 <_ux_device_stack_transfer_run>
 8016eda:	0005      	movs	r5, r0
                            hid -> ux_device_class_hid_read_requested_length,
                            hid -> ux_device_class_hid_read_requested_length);

        /* Error case.  */
        if (status < UX_STATE_NEXT)
 8016edc:	2803      	cmp	r0, #3
 8016ede:	d813      	bhi.n	8016f08 <_ux_device_class_hid_receiver_tasks_run+0x64>
        {

            hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_ERROR;
 8016ee0:	2325      	movs	r3, #37	@ 0x25
 8016ee2:	67e3      	str	r3, [r4, #124]	@ 0x7c
            hid -> ux_device_class_hid_read_status =
 8016ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ee6:	3404      	adds	r4, #4
                transfer -> ux_slave_transfer_request_completion_code;
            return(UX_STATE_ERROR);
 8016ee8:	9d01      	ldr	r5, [sp, #4]
            hid -> ux_device_class_hid_read_status =
 8016eea:	67e3      	str	r3, [r4, #124]	@ 0x7c
        break;
    }

    /* Task is idle.  */
    return(UX_STATE_IDLE);
}
 8016eec:	0028      	movs	r0, r5
 8016eee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 8016ef0:	69b3      	ldr	r3, [r6, #24]
            return(UX_STATE_IDLE);
 8016ef2:	2502      	movs	r5, #2
        if (pos -> ux_device_class_hid_received_event_length != 0)
 8016ef4:	681a      	ldr	r2, [r3, #0]
 8016ef6:	2a00      	cmp	r2, #0
 8016ef8:	d1f8      	bne.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>
        transfer -> ux_slave_transfer_request_data_pointer = buffer;
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        hid -> ux_device_class_hid_read_requested_length =
 8016efe:	68b3      	ldr	r3, [r6, #8]
 8016f00:	6703      	str	r3, [r0, #112]	@ 0x70
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_WAIT;
 8016f02:	2324      	movs	r3, #36	@ 0x24
 8016f04:	67c3      	str	r3, [r0, #124]	@ 0x7c
 8016f06:	e7e2      	b.n	8016ece <_ux_device_class_hid_receiver_tasks_run+0x2a>
        if (status == UX_STATE_NEXT)
 8016f08:	2804      	cmp	r0, #4
 8016f0a:	d114      	bne.n	8016f36 <_ux_device_class_hid_receiver_tasks_run+0x92>
            if (transfer -> ux_slave_transfer_request_actual_length == 0)
 8016f0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016f0e:	2900      	cmp	r1, #0
 8016f10:	d102      	bne.n	8016f18 <_ux_device_class_hid_receiver_tasks_run+0x74>
                hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8016f12:	2323      	movs	r3, #35	@ 0x23
 8016f14:	67e3      	str	r3, [r4, #124]	@ 0x7c
                return(UX_STATE_NEXT);
 8016f16:	e7e9      	b.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>
            pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 8016f18:	69b2      	ldr	r2, [r6, #24]
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8016f1a:	6930      	ldr	r0, [r6, #16]
            next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8016f1c:	0013      	movs	r3, r2
 8016f1e:	3308      	adds	r3, #8
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8016f20:	4298      	cmp	r0, r3
 8016f22:	d800      	bhi.n	8016f26 <_ux_device_class_hid_receiver_tasks_run+0x82>
                next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 8016f24:	68f3      	ldr	r3, [r6, #12]
            receiver -> ux_device_class_hid_receiver_event_save_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 8016f26:	61b3      	str	r3, [r6, #24]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 8016f28:	6873      	ldr	r3, [r6, #4]
            pos -> ux_device_class_hid_received_event_length = temp;
 8016f2a:	6011      	str	r1, [r2, #0]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d0f0      	beq.n	8016f12 <_ux_device_class_hid_receiver_tasks_run+0x6e>
                receiver -> ux_device_class_hid_receiver_event_callback(hid);
 8016f30:	0020      	movs	r0, r4
 8016f32:	4798      	blx	r3
 8016f34:	e7ed      	b.n	8016f12 <_ux_device_class_hid_receiver_tasks_run+0x6e>
        return(UX_STATE_WAIT);
 8016f36:	2505      	movs	r5, #5
 8016f38:	e7d8      	b.n	8016eec <_ux_device_class_hid_receiver_tasks_run+0x48>
 8016f3a:	46c0      	nop			@ (mov r8, r8)
 8016f3c:	20003104 	.word	0x20003104

08016f40 <_ux_device_class_hid_receiver_uninitialize>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID _ux_device_class_hid_receiver_uninitialize(UX_DEVICE_CLASS_HID_RECEIVER *receiver)
{
 8016f40:	b510      	push	{r4, lr}
 8016f42:	0004      	movs	r4, r0
#endif

#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)

    /* Free cache safe event memory.  */
    _ux_utility_memory_free(receiver -> ux_device_class_hid_receiver_events -> ux_device_class_hid_received_event_data);
 8016f44:	68c3      	ldr	r3, [r0, #12]
 8016f46:	6858      	ldr	r0, [r3, #4]
 8016f48:	f7ff fcb2 	bl	80168b0 <_ux_utility_memory_free>
#endif

    /* Free receiver and events memory.  */
    _ux_utility_memory_free(receiver);
 8016f4c:	0020      	movs	r0, r4
 8016f4e:	f7ff fcaf 	bl	80168b0 <_ux_utility_memory_free>
}
 8016f52:	bd10      	pop	{r4, pc}

08016f54 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8016f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f56:	001d      	movs	r5, r3

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016f58:	4b24      	ldr	r3, [pc, #144]	@ (8016fec <_ux_device_class_hid_report_get+0x98>)
    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016f5a:	2603      	movs	r6, #3
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016f5c:	681b      	ldr	r3, [r3, #0]
{
 8016f5e:	b095      	sub	sp, #84	@ 0x54
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8016f60:	001a      	movs	r2, r3
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016f62:	001c      	movs	r4, r3
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8016f64:	329a      	adds	r2, #154	@ 0x9a
 8016f66:	7811      	ldrb	r1, [r2, #0]
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016f68:	3408      	adds	r4, #8
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8016f6a:	3201      	adds	r2, #1
 8016f6c:	7812      	ldrb	r2, [r2, #0]
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016f6e:	001f      	movs	r7, r3
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8016f70:	67e6      	str	r6, [r4, #124]	@ 0x7c

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8016f72:	6e9e      	ldr	r6, [r3, #104]	@ 0x68

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
    hid_event.ux_device_class_hid_event_report_type = report_type;
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8016f74:	2340      	movs	r3, #64	@ 0x40
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8016f76:	375c      	adds	r7, #92	@ 0x5c
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 8016f78:	9101      	str	r1, [sp, #4]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 8016f7a:	9202      	str	r2, [sp, #8]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8016f7c:	9303      	str	r3, [sp, #12]

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8016f7e:	2a01      	cmp	r2, #1
 8016f80:	d121      	bne.n	8016fc6 <_ux_device_class_hid_report_get+0x72>
 8016f82:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016f84:	2b01      	cmp	r3, #1
 8016f86:	d01e      	beq.n	8016fc6 <_ux_device_class_hid_report_get+0x72>
        hid -> ux_device_class_hid_report_id != UX_TRUE)

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 8016f88:	a901      	add	r1, sp, #4
 8016f8a:	f7ff fe45 	bl	8016c18 <_ux_device_class_hid_event_get>
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
    }

    if (status == UX_SUCCESS)
 8016f8e:	2800      	cmp	r0, #0
 8016f90:	d11f      	bne.n	8016fd2 <_ux_device_class_hid_report_get+0x7e>
        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
            hid_event_length =  host_length;
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8016f92:	2380      	movs	r3, #128	@ 0x80
 8016f94:	9c03      	ldr	r4, [sp, #12]
 8016f96:	005b      	lsls	r3, r3, #1
 8016f98:	429c      	cmp	r4, r3
 8016f9a:	d900      	bls.n	8016f9e <_ux_device_class_hid_report_get+0x4a>
 8016f9c:	001c      	movs	r4, r3
 8016f9e:	42ac      	cmp	r4, r5
 8016fa0:	d900      	bls.n	8016fa4 <_ux_device_class_hid_report_get+0x50>
 8016fa2:	002c      	movs	r4, r5
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8016fa4:	0022      	movs	r2, r4
 8016fa6:	2100      	movs	r1, #0
 8016fa8:	0030      	movs	r0, r6
 8016faa:	f7ff fca9 	bl	8016900 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8016fae:	0022      	movs	r2, r4
 8016fb0:	0030      	movs	r0, r6
 8016fb2:	a904      	add	r1, sp, #16
 8016fb4:	f7ff fc72 	bl	801689c <_ux_utility_memory_copy>
        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 8016fb8:	002a      	movs	r2, r5
 8016fba:	0021      	movs	r1, r4
 8016fbc:	0038      	movs	r0, r7
 8016fbe:	f7ff fa4f 	bl	8016460 <_ux_device_stack_transfer_request>

    /* Return the status to the caller.  */
    return(status);
}
 8016fc2:	b015      	add	sp, #84	@ 0x54
 8016fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 8016fc6:	6943      	ldr	r3, [r0, #20]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d002      	beq.n	8016fd2 <_ux_device_class_hid_report_get+0x7e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8016fcc:	a901      	add	r1, sp, #4
 8016fce:	4798      	blx	r3
 8016fd0:	e7dd      	b.n	8016f8e <_ux_device_class_hid_report_get+0x3a>
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8016fd2:	2380      	movs	r3, #128	@ 0x80
 8016fd4:	002c      	movs	r4, r5
 8016fd6:	005b      	lsls	r3, r3, #1
 8016fd8:	429d      	cmp	r5, r3
 8016fda:	d900      	bls.n	8016fde <_ux_device_class_hid_report_get+0x8a>
 8016fdc:	001c      	movs	r4, r3
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8016fde:	0022      	movs	r2, r4
 8016fe0:	2100      	movs	r1, #0
 8016fe2:	0030      	movs	r0, r6
 8016fe4:	f7ff fc8c 	bl	8016900 <_ux_utility_memory_set>
 8016fe8:	e7e6      	b.n	8016fb8 <_ux_device_class_hid_report_get+0x64>
 8016fea:	46c0      	nop			@ (mov r8, r8)
 8016fec:	20003104 	.word	0x20003104

08016ff0 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8016ff0:	b510      	push	{r4, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016ff2:	4b10      	ldr	r3, [pc, #64]	@ (8017034 <_ux_device_class_hid_report_set+0x44>)
{
 8016ff4:	0004      	movs	r4, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016ff6:	681b      	ldr	r3, [r3, #0]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8016ff8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8016ffa:	b094      	sub	sp, #80	@ 0x50
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 8016ffc:	9102      	str	r1, [sp, #8]
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8016ffe:	2200      	movs	r2, #0
 8017000:	6e99      	ldr	r1, [r3, #104]	@ 0x68
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8017002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8017004:	2801      	cmp	r0, #1
 8017006:	d102      	bne.n	801700e <_ux_device_class_hid_report_set+0x1e>
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8017008:	780a      	ldrb	r2, [r1, #0]
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 801700a:	3b01      	subs	r3, #1
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 801700c:	3101      	adds	r1, #1
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 801700e:	9201      	str	r2, [sp, #4]
        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8017010:	2b40      	cmp	r3, #64	@ 0x40
 8017012:	d80d      	bhi.n	8017030 <_ux_device_class_hid_report_set+0x40>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 8017014:	9303      	str	r3, [sp, #12]
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 8017016:	9a03      	ldr	r2, [sp, #12]
 8017018:	a804      	add	r0, sp, #16
 801701a:	f7ff fc3f 	bl	801689c <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 801701e:	6923      	ldr	r3, [r4, #16]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d002      	beq.n	801702a <_ux_device_class_hid_report_set+0x3a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 8017024:	0020      	movs	r0, r4
 8017026:	a901      	add	r1, sp, #4
 8017028:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
}
 801702a:	2000      	movs	r0, #0
 801702c:	b014      	add	sp, #80	@ 0x50
 801702e:	bd10      	pop	{r4, pc}
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 8017030:	2340      	movs	r3, #64	@ 0x40
 8017032:	e7ef      	b.n	8017014 <_ux_device_class_hid_report_set+0x24>
 8017034:	20003104 	.word	0x20003104

08017038 <_ux_device_class_hid_tasks_run>:

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Check if the device is configured.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017038:	4b28      	ldr	r3, [pc, #160]	@ (80170dc <_ux_device_class_hid_tasks_run+0xa4>)
{
 801703a:	b513      	push	{r0, r1, r4, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801703c:	681b      	ldr	r3, [r3, #0]
{
 801703e:	0004      	movs	r4, r0
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8017040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017042:	2b03      	cmp	r3, #3
 8017044:	d004      	beq.n	8017050 <_ux_device_class_hid_tasks_run+0x18>
    {
        hid -> ux_device_class_hid_event_state = UX_STATE_EXIT;
 8017046:	2301      	movs	r3, #1
 8017048:	62c3      	str	r3, [r0, #44]	@ 0x2c
{
 801704a:	2301      	movs	r3, #1

        /* Just go back to normal state.  */
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
        return(UX_STATE_IDLE);
    }
}
 801704c:	0018      	movs	r0, r3
 801704e:	bd16      	pop	{r1, r2, r4, pc}
    if (hid -> ux_device_class_hid_receiver)
 8017050:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8017052:	2b00      	cmp	r3, #0
 8017054:	d001      	beq.n	801705a <_ux_device_class_hid_tasks_run+0x22>
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);
 8017056:	69db      	ldr	r3, [r3, #28]
 8017058:	4798      	blx	r3
    hid_event = &hid -> ux_device_class_hid_event;
 801705a:	0023      	movs	r3, r4
    switch(hid -> ux_device_class_hid_event_state)
 801705c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hid_event = &hid -> ux_device_class_hid_event;
 801705e:	3334      	adds	r3, #52	@ 0x34
 8017060:	9301      	str	r3, [sp, #4]
    switch(hid -> ux_device_class_hid_event_state)
 8017062:	2805      	cmp	r0, #5
 8017064:	d826      	bhi.n	80170b4 <_ux_device_class_hid_tasks_run+0x7c>
 8017066:	f7e9 f857 	bl	8000118 <__gnu_thumb1_case_sqi>
 801706a:	f003      	.short	0xf003
 801706c:	18252508 	.word	0x18252508
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 8017070:	f001 fd53 	bl	8018b1a <_ux_utility_time_get>
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 8017074:	2302      	movs	r3, #2
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 8017076:	6320      	str	r0, [r4, #48]	@ 0x30
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 8017078:	62e3      	str	r3, [r4, #44]	@ 0x2c
        status = _ux_device_class_hid_event_check(hid, &hid_event);
 801707a:	0020      	movs	r0, r4
 801707c:	a901      	add	r1, sp, #4
 801707e:	f7ff fdb1 	bl	8016be4 <_ux_device_class_hid_event_check>
        if (status != UX_SUCCESS)
 8017082:	2800      	cmp	r0, #0
 8017084:	d119      	bne.n	80170ba <_ux_device_class_hid_tasks_run+0x82>
                                hid_event -> ux_device_class_hid_event_buffer;
 8017086:	9a01      	ldr	r2, [sp, #4]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 8017088:	6863      	ldr	r3, [r4, #4]
        trans -> ux_slave_transfer_request_data_pointer =
 801708a:	68d1      	ldr	r1, [r2, #12]
        trans -> ux_slave_transfer_request_requested_length =
 801708c:	6892      	ldr	r2, [r2, #8]
        trans -> ux_slave_transfer_request_data_pointer =
 801708e:	62d9      	str	r1, [r3, #44]	@ 0x2c
        trans -> ux_slave_transfer_request_requested_length =
 8017090:	635a      	str	r2, [r3, #52]	@ 0x34
        UX_SLAVE_TRANSFER_STATE_RESET(trans);
 8017092:	2200      	movs	r2, #0
 8017094:	651a      	str	r2, [r3, #80]	@ 0x50
        hid -> ux_device_class_hid_event_state = UX_STATE_WAIT;
 8017096:	2305      	movs	r3, #5
 8017098:	62e3      	str	r3, [r4, #44]	@ 0x2c
        status = _ux_device_stack_transfer_run(trans,
 801709a:	9b01      	ldr	r3, [sp, #4]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 801709c:	6860      	ldr	r0, [r4, #4]
        status = _ux_device_stack_transfer_run(trans,
 801709e:	6899      	ldr	r1, [r3, #8]
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 80170a0:	3020      	adds	r0, #32
        status = _ux_device_stack_transfer_run(trans,
 80170a2:	000a      	movs	r2, r1
 80170a4:	f7ff f9ec 	bl	8016480 <_ux_device_stack_transfer_run>
        return(UX_STATE_WAIT);
 80170a8:	2305      	movs	r3, #5
        if (status <= UX_STATE_NEXT)
 80170aa:	2804      	cmp	r0, #4
 80170ac:	d8ce      	bhi.n	801704c <_ux_device_class_hid_tasks_run+0x14>
            _ux_device_class_hid_event_free(hid);
 80170ae:	0020      	movs	r0, r4
 80170b0:	f7ff fdaa 	bl	8016c08 <_ux_device_class_hid_event_free>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80170b4:	2300      	movs	r3, #0
 80170b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return(UX_STATE_IDLE);
 80170b8:	e002      	b.n	80170c0 <_ux_device_class_hid_tasks_run+0x88>
            if (hid -> ux_device_class_hid_event_wait_timeout == UX_WAIT_FOREVER)
 80170ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80170bc:	3301      	adds	r3, #1
 80170be:	d101      	bne.n	80170c4 <_ux_device_class_hid_tasks_run+0x8c>
                return(UX_STATE_IDLE);
 80170c0:	2302      	movs	r3, #2
 80170c2:	e7c3      	b.n	801704c <_ux_device_class_hid_tasks_run+0x14>
            tick = _ux_utility_time_get();
 80170c4:	f001 fd29 	bl	8018b1a <_ux_utility_time_get>
            elapsed = _ux_utility_time_elapsed(hid -> ux_device_class_hid_event_wait_start, tick);
 80170c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170ca:	1a1a      	subs	r2, r3, r0
 80170cc:	4283      	cmp	r3, r0
 80170ce:	d800      	bhi.n	80170d2 <_ux_device_class_hid_tasks_run+0x9a>
 80170d0:	1ac2      	subs	r2, r0, r3
            if (elapsed < hid -> ux_device_class_hid_event_wait_timeout)
 80170d2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d9d6      	bls.n	8017086 <_ux_device_class_hid_tasks_run+0x4e>
 80170d8:	e7f2      	b.n	80170c0 <_ux_device_class_hid_tasks_run+0x88>
 80170da:	46c0      	nop			@ (mov r8, r8)
 80170dc:	20003104 	.word	0x20003104

080170e0 <_ux_device_class_hid_uninitialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80170e0:	6a03      	ldr	r3, [r0, #32]
{
 80170e2:	b510      	push	{r4, lr}
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80170e4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif

    /* Free memory for the array. */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
 80170e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80170e8:	68d8      	ldr	r0, [r3, #12]
 80170ea:	f7ff fbe1 	bl	80168b0 <_ux_utility_memory_free>
#endif
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80170ee:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80170f0:	f7ff fbde 	bl	80168b0 <_ux_utility_memory_free>
    /* Free read mutex.  */
    _ux_device_mutex_delete(&hid -> ux_device_class_hid_read_mutex);
#endif

    /* Uninitialize receiver.  */
    if (hid -> ux_device_class_hid_receiver)
 80170f4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80170f6:	2800      	cmp	r0, #0
 80170f8:	d001      	beq.n	80170fe <_ux_device_class_hid_uninitialize+0x1e>
        hid -> ux_device_class_hid_receiver ->
 80170fa:	6803      	ldr	r3, [r0, #0]
 80170fc:	4798      	blx	r3
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
 80170fe:	68a0      	ldr	r0, [r4, #8]
 8017100:	f7ff fbd6 	bl	80168b0 <_ux_utility_memory_free>
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 8017104:	0020      	movs	r0, r4
 8017106:	f7ff fbd3 	bl	80168b0 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 801710a:	2000      	movs	r0, #0
 801710c:	bd10      	pop	{r4, pc}

0801710e <_ux_device_class_storage_activate>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 801710e:	0003      	movs	r3, r0

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017110:	6a02      	ldr	r2, [r0, #32]
{
 8017112:	b570      	push	{r4, r5, r6, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017114:	6c90      	ldr	r0, [r2, #72]	@ 0x48

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8017116:	689a      	ldr	r2, [r3, #8]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)storage;
         
    /* Now the opposite, store the interface in the class instance.  */
    storage -> ux_slave_class_storage_interface =  interface_ptr;
 8017118:	0003      	movs	r3, r0
 801711a:	0004      	movs	r4, r0
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)storage;
 801711c:	6090      	str	r0, [r2, #8]
    storage -> ux_slave_class_storage_interface =  interface_ptr;
 801711e:	c304      	stmia	r3!, {r2}

#else

    /* Locate the endpoints.  */
    /* Check the first endpoint direction, if IN we have the correct endpoint.  */
    endpoint = interface_ptr -> ux_slave_interface_first_endpoint;
 8017120:	69d2      	ldr	r2, [r2, #28]
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8017122:	3408      	adds	r4, #8
 8017124:	7b95      	ldrb	r5, [r2, #14]

        /* Wrong direction, we found the OUT endpoint first.  */
        storage -> ux_device_class_storage_ep_out = endpoint;

        /* So the next endpoint has to be the IN endpoint.  */
        storage -> ux_device_class_storage_ep_in = endpoint -> ux_slave_endpoint_next_endpoint;
 8017126:	6951      	ldr	r1, [r2, #20]
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8017128:	2d7f      	cmp	r5, #127	@ 0x7f
 801712a:	d81b      	bhi.n	8017164 <_ux_device_class_storage_activate+0x56>
        storage -> ux_device_class_storage_ep_out = endpoint;
 801712c:	67da      	str	r2, [r3, #124]	@ 0x7c
        storage -> ux_device_class_storage_ep_in = endpoint -> ux_slave_endpoint_next_endpoint;
 801712e:	67e1      	str	r1, [r4, #124]	@ 0x7c
    }

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1

    /* Assign endpoint buffers.  */
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
 8017130:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
        ux_slave_transfer_request_data_pointer = UX_DEVICE_CLASS_STORAGE_BULKIN_BUFFER(storage);
 8017132:	2480      	movs	r4, #128	@ 0x80
 8017134:	6841      	ldr	r1, [r0, #4]
 8017136:	0164      	lsls	r4, r4, #5
 8017138:	190c      	adds	r4, r1, r4
 801713a:	62d4      	str	r4, [r2, #44]	@ 0x2c
    storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request.
 801713c:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
        ux_slave_transfer_request_data_pointer = UX_DEVICE_CLASS_STORAGE_BULKOUT_BUFFER(storage);
 801713e:	62e1      	str	r1, [r4, #44]	@ 0x2c
#endif

    /* Reset states.  */
    storage -> ux_device_class_storage_buffer[0] = storage -> ux_device_class_storage_ep_out ->
                    ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer;
    storage -> ux_device_class_storage_buffer[1] = storage -> ux_device_class_storage_ep_in ->
 8017140:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
    storage -> ux_device_class_storage_buffer[0] = storage -> ux_device_class_storage_ep_out ->
 8017142:	6701      	str	r1, [r0, #112]	@ 0x70
                    ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer;
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017144:	0001      	movs	r1, r0
    storage -> ux_device_class_storage_buffer[1] = storage -> ux_device_class_storage_ep_in ->
 8017146:	6743      	str	r3, [r0, #116]	@ 0x74
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017148:	2300      	movs	r3, #0
 801714a:	3190      	adds	r1, #144	@ 0x90
 801714c:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_state = UX_STATE_RESET;
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 801714e:	3912      	subs	r1, #18
 8017150:	800b      	strh	r3, [r1, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_IDLE;
 8017152:	6783      	str	r3, [r0, #120]	@ 0x78
    storage -> ux_device_class_storage_buffer_state[1] = UX_DEVICE_CLASS_STORAGE_BUFFER_IDLE;
    storage -> ux_device_class_storage_buffer_usb = 0;
    storage -> ux_device_class_storage_buffer_disk = 0;
    UX_SLAVE_TRANSFER_STATE_RESET(&storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request);
 8017154:	6523      	str	r3, [r4, #80]	@ 0x50
    UX_SLAVE_TRANSFER_STATE_RESET(&storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request);
 8017156:	6513      	str	r3, [r2, #80]	@ 0x50

    status = UX_SUCCESS;
#endif

    /* If there is a activate function call it.  */
    if (storage -> ux_slave_class_storage_instance_activate != UX_NULL)
 8017158:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801715a:	2b00      	cmp	r3, #0
 801715c:	d000      	beq.n	8017160 <_ux_device_class_storage_activate+0x52>
    {        
        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_activate(storage);
 801715e:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, storage, 0, 0, 0)

    /* Return completion status.  */
    return(status);
}
 8017160:	2000      	movs	r0, #0
 8017162:	bd70      	pop	{r4, r5, r6, pc}
        storage -> ux_device_class_storage_ep_in = endpoint;
 8017164:	67e2      	str	r2, [r4, #124]	@ 0x7c
        storage -> ux_device_class_storage_ep_out = endpoint -> ux_slave_endpoint_next_endpoint;
 8017166:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8017168:	e7e2      	b.n	8017130 <_ux_device_class_storage_activate+0x22>
	...

0801716c <_ux_device_class_storage_control_request>:
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801716c:	4b1e      	ldr	r3, [pc, #120]	@ (80171e8 <_ux_device_class_storage_control_request+0x7c>)
{
 801716e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017170:	681d      	ldr	r5, [r3, #0]
{
 8017172:	0006      	movs	r6, r0

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
    
    /* Extract the request type from the SETUP packet..   */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017174:	002b      	movs	r3, r5
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017176:	0028      	movs	r0, r5
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017178:	335c      	adds	r3, #92	@ 0x5c
 801717a:	9301      	str	r3, [sp, #4]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801717c:	309a      	adds	r0, #154	@ 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801717e:	333d      	adds	r3, #61	@ 0x3d
 8017180:	781f      	ldrb	r7, [r3, #0]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017182:	f7ff fbc4 	bl	801690e <_ux_utility_short_get>
 8017186:	0004      	movs	r4, r0
    request_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8017188:	0028      	movs	r0, r5
 801718a:	309e      	adds	r0, #158	@ 0x9e
 801718c:	f7ff fbbf 	bl	801690e <_ux_utility_short_get>

    /* Check if wValue is valid.  */
    if (request_value != 0)
 8017190:	2c00      	cmp	r4, #0
 8017192:	d127      	bne.n	80171e4 <_ux_device_class_storage_control_request+0x78>

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
    
    /* Get the storage instance from this class container.  */
    storage =  (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 8017194:	6a33      	ldr	r3, [r6, #32]
 8017196:	6c9e      	ldr	r6, [r3, #72]	@ 0x48

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8017198:	2ffe      	cmp	r7, #254	@ 0xfe
 801719a:	d014      	beq.n	80171c6 <_ux_device_class_storage_control_request+0x5a>
 801719c:	2fff      	cmp	r7, #255	@ 0xff
 801719e:	d121      	bne.n	80171e4 <_ux_device_class_storage_control_request+0x78>
    {

    case UX_SLAVE_CLASS_STORAGE_RESET:

        /* Check if wLength is valid.  */
        if (request_length != 0)
 80171a0:	2800      	cmp	r0, #0
 80171a2:	d11f      	bne.n	80171e4 <_ux_device_class_storage_control_request+0x78>
            return(UX_ERROR);

#if defined(UX_DEVICE_STANDALONE)
        endpoint_in = storage -> ux_device_class_storage_ep_in;
 80171a4:	0033      	movs	r3, r6
 80171a6:	3308      	adds	r3, #8
 80171a8:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
        endpoint_out = storage -> ux_device_class_storage_ep_out;
 80171aa:	1d33      	adds	r3, r6, #4
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
        }
#endif

        /* First cancel any transfer on the endpoint OUT, from the host.  */
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80171ac:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80171ae:	2128      	movs	r1, #40	@ 0x28
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80171b0:	3020      	adds	r0, #32
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80171b2:	f7ff f933 	bl	801641c <_ux_device_stack_transfer_abort>

        /* Then cancel any transfer on the endpoint IN, from the host.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80171b6:	0028      	movs	r0, r5
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80171b8:	2128      	movs	r1, #40	@ 0x28
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80171ba:	3020      	adds	r0, #32
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 80171bc:	f7ff f92e 	bl	801641c <_ux_device_stack_transfer_abort>

        /* Reset phase error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80171c0:	6574      	str	r4, [r6, #84]	@ 0x54
        return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
}
 80171c2:	0020      	movs	r0, r4
 80171c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (request_length < 1)
 80171c6:	2800      	cmp	r0, #0
 80171c8:	d00c      	beq.n	80171e4 <_ux_device_class_storage_control_request+0x78>
        *transfer_request -> ux_slave_transfer_request_data_pointer =  (UCHAR)(storage -> ux_slave_class_storage_number_lun -1);
 80171ca:	68b3      	ldr	r3, [r6, #8]
 80171cc:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 80171ce:	3b01      	subs	r3, #1
 80171d0:	7013      	strb	r3, [r2, #0]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80171d2:	2303      	movs	r3, #3
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80171d4:	2201      	movs	r2, #1
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80171d6:	3508      	adds	r5, #8
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80171d8:	0011      	movs	r1, r2
 80171da:	9801      	ldr	r0, [sp, #4]
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80171dc:	67eb      	str	r3, [r5, #124]	@ 0x7c
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80171de:	f7ff f93f 	bl	8016460 <_ux_device_stack_transfer_request>
        break;
 80171e2:	e7ee      	b.n	80171c2 <_ux_device_class_storage_control_request+0x56>
        return(UX_ERROR);
 80171e4:	24ff      	movs	r4, #255	@ 0xff
 80171e6:	e7ec      	b.n	80171c2 <_ux_device_class_storage_control_request+0x56>
 80171e8:	20003104 	.word	0x20003104

080171ec <_ux_device_class_storage_csw_send>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                UX_SLAVE_ENDPOINT *endpoint_in, UCHAR csw_status)
{
 80171ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(UX_DEVICE_STANDALONE)

    /* Reset transfer request buffer pointers.  */
    storage -> ux_device_class_storage_ep_out -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 80171ee:	1d03      	adds	r3, r0, #4
 80171f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
{
 80171f2:	0015      	movs	r5, r2
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 80171f4:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 80171f6:	0004      	movs	r4, r0
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[0];
 80171f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[1];
 80171fa:	0003      	movs	r3, r0
 80171fc:	3308      	adds	r3, #8
 80171fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017200:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8017202:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

    /* If CSW skipped, just return.  */
    if (UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status))
 8017204:	0003      	movs	r3, r0
 8017206:	3357      	adds	r3, #87	@ 0x57
 8017208:	781e      	ldrb	r6, [r3, #0]
 801720a:	2e00      	cmp	r6, #0
 801720c:	d124      	bne.n	8017258 <_ux_device_class_storage_csw_send+0x6c>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get CSW buffer pointer.  */
    csw_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 801720e:	6aef      	ldr	r7, [r5, #44]	@ 0x2c

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(csw_buffer, 0, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH); /* Use case of memset is verified. */
 8017210:	220d      	movs	r2, #13
 8017212:	0031      	movs	r1, r6
 8017214:	0038      	movs	r0, r7
 8017216:	f7ff fb73 	bl	8016900 <_ux_utility_memory_set>

    /* Store the signature of the CSW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE], UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE_MASK);
 801721a:	0038      	movs	r0, r7
 801721c:	490f      	ldr	r1, [pc, #60]	@ (801725c <_ux_device_class_storage_csw_send+0x70>)
 801721e:	f7ff fa35 	bl	801668c <_ux_utility_long_put>

    /* Store the SCSI tag from the CBW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_TAG], storage -> ux_slave_class_storage_scsi_tag);
 8017222:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8017224:	1d38      	adds	r0, r7, #4
 8017226:	f7ff fa31 	bl	801668c <_ux_utility_long_put>

    /* Store the dCSWDataResidue.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_DATA_RESIDUE], storage -> ux_slave_class_storage_csw_residue);
 801722a:	0038      	movs	r0, r7
 801722c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801722e:	3008      	adds	r0, #8
 8017230:	f7ff fa2c 	bl	801668c <_ux_utility_long_put>

    /* Store the status of the previous operation.  */
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 8017234:	6d63      	ldr	r3, [r4, #84]	@ 0x54

#if defined(UX_DEVICE_STANDALONE)

    /* Next: Transfer (CSW).  */
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017236:	2203      	movs	r2, #3
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 8017238:	733b      	strb	r3, [r7, #12]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 801723a:	0023      	movs	r3, r4
 801723c:	337d      	adds	r3, #125	@ 0x7d
 801723e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017240:	3220      	adds	r2, #32
 8017242:	709a      	strb	r2, [r3, #2]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017244:	3520      	adds	r5, #32
    storage -> ux_device_class_storage_transfer = transfer_request;

    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 8017246:	0022      	movs	r2, r4
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017248:	330b      	adds	r3, #11
 801724a:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 801724c:	230d      	movs	r3, #13
 801724e:	328c      	adds	r2, #140	@ 0x8c
    storage -> ux_device_class_storage_data_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
    storage -> ux_device_class_storage_data_count = 0;
 8017250:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_device_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 8017252:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_length = UX_SLAVE_CLASS_STORAGE_CSW_LENGTH;
 8017254:	6093      	str	r3, [r2, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8017256:	6026      	str	r6, [r4, #0]
                                    UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);
#endif

    /* Return completion status.  */
    return(status);
}
 8017258:	2000      	movs	r0, #0
 801725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801725c:	53425355 	.word	0x53425355

08017260 <_ux_device_class_storage_deactivate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017260:	6a03      	ldr	r3, [r0, #32]
{
 8017262:	b570      	push	{r4, r5, r6, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *)class_ptr -> ux_slave_class_instance;
 8017264:	6c9c      	ldr	r4, [r3, #72]	@ 0x48

#if defined(UX_DEVICE_STANDALONE)

    endpoint_in = storage -> ux_device_class_storage_ep_in;
    endpoint_out = storage -> ux_device_class_storage_ep_out;
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8017266:	2126      	movs	r1, #38	@ 0x26
    endpoint_in = storage -> ux_device_class_storage_ep_in;
 8017268:	0023      	movs	r3, r4
 801726a:	3308      	adds	r3, #8
 801726c:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
    endpoint_out = storage -> ux_device_class_storage_ep_out;
 801726e:	1d23      	adds	r3, r4, #4
 8017270:	6fde      	ldr	r6, [r3, #124]	@ 0x7c
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8017272:	0028      	movs	r0, r5
 8017274:	f7ff f8ee 	bl	8016454 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8017278:	2126      	movs	r1, #38	@ 0x26
 801727a:	0030      	movs	r0, r6
 801727c:	f7ff f8ea 	bl	8016454 <_ux_device_stack_transfer_all_request_abort>
    endpoint_out -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
 8017280:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017282:	62f3      	str	r3, [r6, #44]	@ 0x2c
                                storage -> ux_device_class_storage_buffer[0];
    endpoint_in -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
 8017284:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8017286:	62eb      	str	r3, [r5, #44]	@ 0x2c
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
#endif

    /* If there is a deactivate function call it.  */
    if (storage -> ux_slave_class_storage_instance_deactivate != UX_NULL)
 8017288:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801728a:	2b00      	cmp	r3, #0
 801728c:	d001      	beq.n	8017292 <_ux_device_class_storage_deactivate+0x32>
    {

        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_deactivate(storage);
 801728e:	0020      	movs	r0, r4
 8017290:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(storage);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 8017292:	2000      	movs	r0, #0
 8017294:	bd70      	pop	{r4, r5, r6, pc}

08017296 <_ux_device_class_storage_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8017296:	0003      	movs	r3, r0
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8017298:	6800      	ldr	r0, [r0, #0]
{
 801729a:	b510      	push	{r4, lr}
    switch (command -> ux_slave_class_command_request)
 801729c:	3801      	subs	r0, #1
 801729e:	2806      	cmp	r0, #6
 80172a0:	d81f      	bhi.n	80172e2 <_ux_device_class_storage_entry+0x4c>
 80172a2:	f7e8 ff43 	bl	800012c <__gnu_thumb1_case_uqi>
 80172a6:	120c      	.short	0x120c
 80172a8:	1e041a16 	.word	0x1e041a16
 80172ac:	08          	.byte	0x08
 80172ad:	00          	.byte	0x00

        /* Call the init function of the Storage class.  */
#if defined(UX_DEVICE_CLASS_STORAGE_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_storage_initialize(command);
#else
        status =  _ux_device_class_storage_initialize(command);
 80172ae:	0018      	movs	r0, r3
 80172b0:	f000 f82a 	bl	8017308 <_ux_device_class_storage_initialize>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }   
}
 80172b4:	bd10      	pop	{r4, pc}
        status =  _ux_device_class_storage_uninitialize(command);
 80172b6:	0018      	movs	r0, r3
 80172b8:	f000 feb6 	bl	8018028 <_ux_device_class_storage_uninitialize>
        return(status);
 80172bc:	e7fa      	b.n	80172b4 <_ux_device_class_storage_entry+0x1e>
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80172be:	695b      	ldr	r3, [r3, #20]
            return(UX_NO_CLASS_MATCH);
 80172c0:	2057      	movs	r0, #87	@ 0x57
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80172c2:	2b08      	cmp	r3, #8
 80172c4:	d1f6      	bne.n	80172b4 <_ux_device_class_storage_entry+0x1e>
            return(UX_SUCCESS);
 80172c6:	2000      	movs	r0, #0
 80172c8:	e7f4      	b.n	80172b4 <_ux_device_class_storage_entry+0x1e>
        status =  _ux_device_class_storage_activate(command);
 80172ca:	0018      	movs	r0, r3
 80172cc:	f7ff ff1f 	bl	801710e <_ux_device_class_storage_activate>
        return(status);
 80172d0:	e7f0      	b.n	80172b4 <_ux_device_class_storage_entry+0x1e>
        status =  _ux_device_class_storage_deactivate(command);
 80172d2:	0018      	movs	r0, r3
 80172d4:	f7ff ffc4 	bl	8017260 <_ux_device_class_storage_deactivate>
        return(status);
 80172d8:	e7ec      	b.n	80172b4 <_ux_device_class_storage_entry+0x1e>
        status = _ux_device_class_storage_control_request(command);
 80172da:	0018      	movs	r0, r3
 80172dc:	f7ff ff46 	bl	801716c <_ux_device_class_storage_control_request>
        return(status);
 80172e0:	e7e8      	b.n	80172b4 <_ux_device_class_storage_entry+0x1e>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80172e2:	2002      	movs	r0, #2
 80172e4:	2254      	movs	r2, #84	@ 0x54
 80172e6:	2107      	movs	r1, #7
 80172e8:	f7ff f922 	bl	8016530 <_ux_system_error_handler>
        return(UX_FUNCTION_NOT_SUPPORTED);
 80172ec:	2054      	movs	r0, #84	@ 0x54
 80172ee:	e7e1      	b.n	80172b4 <_ux_device_class_storage_entry+0x1e>

080172f0 <_ux_device_class_storage_format>:

    UX_PARAMETER_NOT_USED(endpoint_out);
#endif

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80172f0:	2338      	movs	r3, #56	@ 0x38
 80172f2:	4359      	muls	r1, r3
 80172f4:	4b03      	ldr	r3, [pc, #12]	@ (8017304 <_ux_device_class_storage_format+0x14>)
 80172f6:	1841      	adds	r1, r0, r1
 80172f8:	624b      	str	r3, [r1, #36]	@ 0x24
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80172fa:	2301      	movs	r3, #1
 80172fc:	6543      	str	r3, [r0, #84]	@ 0x54
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}
 80172fe:	2054      	movs	r0, #84	@ 0x54
 8017300:	4770      	bx	lr
 8017302:	46c0      	nop			@ (mov r8, r8)
 8017304:	00012605 	.word	0x00012605

08017308 <_ux_device_class_storage_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8017308:	b570      	push	{r4, r5, r6, lr}
UX_SLAVE_CLASS                          *class_inst;
ULONG                                   lun_index;


    /* Get the pointer to the application parameters for the storage class.  */
    storage_parameter =  command -> ux_slave_class_command_parameter;
 801730a:	6a45      	ldr	r5, [r0, #36]	@ 0x24
{
 801730c:	0003      	movs	r3, r0

    /* Ensure the number of LUN declared by the caller does not exceed the
       max number allowed for LUN storage.  */
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 801730e:	68aa      	ldr	r2, [r5, #8]
        return UX_ERROR;
 8017310:	20ff      	movs	r0, #255	@ 0xff
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 8017312:	2a01      	cmp	r2, #1
 8017314:	d846      	bhi.n	80173a4 <_ux_device_class_storage_initialize+0x9c>

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device storage class.  */
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 8017316:	2100      	movs	r1, #0
 8017318:	22b4      	movs	r2, #180	@ 0xb4
 801731a:	0008      	movs	r0, r1
    class_inst =  command -> ux_slave_class_command_class_ptr;
 801731c:	6a1e      	ldr	r6, [r3, #32]
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 801731e:	f7ff f9c7 	bl	80166b0 <_ux_utility_memory_allocate>
 8017322:	1e04      	subs	r4, r0, #0

    /* Check for successful allocation.  */
    if (storage == UX_NULL)
 8017324:	d044      	beq.n	80173b0 <_ux_device_class_storage_initialize+0xa8>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1

    /* Allocate bulk endpoint buffer.  */
    UX_ASSERT(!UX_DEVICE_CLASS_STORAGE_ENDPOINT_BUFFER_SIZE_CALC_OVERFLOW);
    storage -> ux_device_class_storage_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017326:	2280      	movs	r2, #128	@ 0x80
 8017328:	2101      	movs	r1, #1
 801732a:	2000      	movs	r0, #0
 801732c:	0192      	lsls	r2, r2, #6
 801732e:	f7ff f9bf 	bl	80166b0 <_ux_utility_memory_allocate>
            status = UX_MEMORY_INSUFFICIENT;
    }
#else

    /* Save tasks run entry.  */
    class_inst -> ux_slave_class_task_function = _ux_device_class_storage_tasks_run;
 8017332:	4b22      	ldr	r3, [pc, #136]	@ (80173bc <_ux_device_class_storage_initialize+0xb4>)
    storage -> ux_device_class_storage_endpoint_buffer = _ux_utility_memory_allocate(UX_NO_ALIGN,
 8017334:	6060      	str	r0, [r4, #4]
    class_inst -> ux_slave_class_task_function = _ux_device_class_storage_tasks_run;
 8017336:	6533      	str	r3, [r6, #80]	@ 0x50
    {

        UX_THREAD_EXTENSION_PTR_SET(&(class_inst -> ux_slave_class_thread), class_inst)

        /* Store the number of LUN declared.  */
        storage -> ux_slave_class_storage_number_lun = storage_parameter -> ux_slave_class_storage_parameter_number_lun;
 8017338:	68ab      	ldr	r3, [r5, #8]
 801733a:	60a3      	str	r3, [r4, #8]

        /* Copy each individual LUN parameters.  */
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 801733c:	2b00      	cmp	r3, #0
 801733e:	d017      	beq.n	8017370 <_ux_device_class_storage_initialize+0x68>
        {

            /* Check block length size. */
            if (storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8017340:	2280      	movs	r2, #128	@ 0x80
 8017342:	692b      	ldr	r3, [r5, #16]
 8017344:	0152      	lsls	r2, r2, #5
 8017346:	4293      	cmp	r3, r2
 8017348:	d82d      	bhi.n	80173a6 <_ux_device_class_storage_initialize+0x9e>
                status = (UX_MEMORY_INSUFFICIENT);
                break;
            }

            /* Store all the application parameter information about the media.  */
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 801734a:	68ea      	ldr	r2, [r5, #12]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_block_length   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length;
 801734c:	6123      	str	r3, [r4, #16]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 801734e:	696b      	ldr	r3, [r5, #20]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 8017350:	60e2      	str	r2, [r4, #12]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 8017352:	6163      	str	r3, [r4, #20]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_removable_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_removable_flag;
 8017354:	69ab      	ldr	r3, [r5, #24]
 8017356:	61a3      	str	r3, [r4, #24]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read_only_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read_only_flag;
 8017358:	69eb      	ldr	r3, [r5, #28]
 801735a:	61e3      	str	r3, [r4, #28]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read;
 801735c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801735e:	6323      	str	r3, [r4, #48]	@ 0x30
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_flush          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_flush;
 8017360:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8017362:	63a3      	str	r3, [r4, #56]	@ 0x38
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_write          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_write;
 8017364:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8017366:	6363      	str	r3, [r4, #52]	@ 0x34
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_status         = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_status;
 8017368:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801736a:	63e3      	str	r3, [r4, #60]	@ 0x3c
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_notification;
 801736c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 801736e:	6423      	str	r3, [r4, #64]	@ 0x40
        /* If it's OK, complete it.  */
        if (status == UX_SUCCESS)
        {

            /* Store the start and stop signals if needed by the application.  */
            storage -> ux_slave_class_storage_instance_activate = storage_parameter -> ux_slave_class_storage_instance_activate;
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	65a3      	str	r3, [r4, #88]	@ 0x58
            storage -> ux_slave_class_storage_instance_deactivate = storage_parameter -> ux_slave_class_storage_instance_deactivate;
 8017374:	686b      	ldr	r3, [r5, #4]
 8017376:	65e3      	str	r3, [r4, #92]	@ 0x5c

            /* Store the vendor id, product id, product revision and product serial.  */
            if (storage_parameter -> ux_slave_class_storage_parameter_vendor_id)
 8017378:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801737a:	2b00      	cmp	r3, #0
 801737c:	d100      	bne.n	8017380 <_ux_device_class_storage_initialize+0x78>
                storage -> ux_slave_class_storage_vendor_id = storage_parameter -> ux_slave_class_storage_parameter_vendor_id;
            else
                storage -> ux_slave_class_storage_vendor_id = _ux_system_slave_class_storage_vendor_id;
 801737e:	4b10      	ldr	r3, [pc, #64]	@ (80173c0 <_ux_device_class_storage_initialize+0xb8>)
 8017380:	6623      	str	r3, [r4, #96]	@ 0x60

            if (storage_parameter -> ux_slave_class_storage_parameter_product_id)
 8017382:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8017384:	2b00      	cmp	r3, #0
 8017386:	d100      	bne.n	801738a <_ux_device_class_storage_initialize+0x82>
                storage -> ux_slave_class_storage_product_id = storage_parameter -> ux_slave_class_storage_parameter_product_id;
            else
                storage -> ux_slave_class_storage_product_id = _ux_system_slave_class_storage_product_id;
 8017388:	4b0e      	ldr	r3, [pc, #56]	@ (80173c4 <_ux_device_class_storage_initialize+0xbc>)
 801738a:	6663      	str	r3, [r4, #100]	@ 0x64

            if (storage_parameter -> ux_slave_class_storage_parameter_product_rev)
 801738c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801738e:	2b00      	cmp	r3, #0
 8017390:	d100      	bne.n	8017394 <_ux_device_class_storage_initialize+0x8c>
                storage -> ux_slave_class_storage_product_rev = storage_parameter -> ux_slave_class_storage_parameter_product_rev;
            else
                storage -> ux_slave_class_storage_product_rev = _ux_system_slave_class_storage_product_rev;
 8017392:	4b0d      	ldr	r3, [pc, #52]	@ (80173c8 <_ux_device_class_storage_initialize+0xc0>)
 8017394:	66a3      	str	r3, [r4, #104]	@ 0x68

            if (storage_parameter -> ux_slave_class_storage_parameter_product_serial)
 8017396:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8017398:	2b00      	cmp	r3, #0
 801739a:	d100      	bne.n	801739e <_ux_device_class_storage_initialize+0x96>
                storage -> ux_slave_class_storage_product_serial = storage_parameter -> ux_slave_class_storage_parameter_product_serial;
            else
                storage -> ux_slave_class_storage_product_serial = _ux_system_slave_class_storage_product_serial;
 801739c:	4b0b      	ldr	r3, [pc, #44]	@ (80173cc <_ux_device_class_storage_initialize+0xc4>)

            /* Save the address of the STORAGE instance inside the STORAGE container.  */
            class_inst -> ux_slave_class_instance = (VOID *) storage;

            return(UX_SUCCESS);
 801739e:	2000      	movs	r0, #0
 80173a0:	66e3      	str	r3, [r4, #108]	@ 0x6c
            class_inst -> ux_slave_class_instance = (VOID *) storage;
 80173a2:	64b4      	str	r4, [r6, #72]	@ 0x48
    /* Free instance.  */
    _ux_utility_memory_free(storage);

    /* Return completion status.  */
    return(status);
}
 80173a4:	bd70      	pop	{r4, r5, r6, pc}
    if (storage -> ux_device_class_storage_endpoint_buffer != UX_NULL)
 80173a6:	2800      	cmp	r0, #0
 80173a8:	d104      	bne.n	80173b4 <_ux_device_class_storage_initialize+0xac>
    _ux_utility_memory_free(storage);
 80173aa:	0020      	movs	r0, r4
 80173ac:	f7ff fa80 	bl	80168b0 <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 80173b0:	2012      	movs	r0, #18
 80173b2:	e7f7      	b.n	80173a4 <_ux_device_class_storage_initialize+0x9c>
        _ux_utility_memory_free(storage -> ux_device_class_storage_endpoint_buffer);
 80173b4:	f7ff fa7c 	bl	80168b0 <_ux_utility_memory_free>
 80173b8:	e7f7      	b.n	80173aa <_ux_device_class_storage_initialize+0xa2>
 80173ba:	46c0      	nop			@ (mov r8, r8)
 80173bc:	0801783d 	.word	0x0801783d
 80173c0:	2000028a 	.word	0x2000028a
 80173c4:	20000279 	.word	0x20000279
 80173c8:	20000274 	.word	0x20000274
 80173cc:	2000025f 	.word	0x2000025f

080173d0 <_ux_device_class_storage_inquiry>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80173d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173d2:	b085      	sub	sp, #20
        return(UX_ERROR);
    }
#endif

    /* From the SCSI Inquiry payload, get the page code.  */
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 80173d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Obtain inquiry buffer pointer.  */
    inquiry_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80173d6:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 80173d8:	789f      	ldrb	r7, [r3, #2]
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 80173da:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80173dc:	9103      	str	r1, [sp, #12]
 80173de:	0004      	movs	r4, r0
 80173e0:	0016      	movs	r6, r2

    /* Ensure the data buffer is cleaned.  */
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 80173e2:	2100      	movs	r1, #0
 80173e4:	2224      	movs	r2, #36	@ 0x24
 80173e6:	0028      	movs	r0, r5
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 80173e8:	9302      	str	r3, [sp, #8]
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 80173ea:	f7ff fa89 	bl	8016900 <_ux_utility_memory_set>

    /* Check for the maximum length to be returned. */
    if (inquiry_length > UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH)
 80173ee:	9b02      	ldr	r3, [sp, #8]
 80173f0:	9301      	str	r3, [sp, #4]
 80173f2:	2b24      	cmp	r3, #36	@ 0x24
 80173f4:	d901      	bls.n	80173fa <_ux_device_class_storage_inquiry+0x2a>
 80173f6:	2324      	movs	r3, #36	@ 0x24
 80173f8:	9301      	str	r3, [sp, #4]
        inquiry_length = UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;

    /* Default CSW to passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80173fa:	2300      	movs	r3, #0
 80173fc:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Ensure we know about the page code.  */
    switch (inquiry_page_code)
 80173fe:	429f      	cmp	r7, r3
 8017400:	d00c      	beq.n	801741c <_ux_device_class_storage_inquiry+0x4c>
 8017402:	2f80      	cmp	r7, #128	@ 0x80
 8017404:	d043      	beq.n	801748e <_ux_device_class_storage_inquiry+0xbe>
        /* The page code is not supported.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
#endif

        /* And update the REQUEST_SENSE codes.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017406:	2338      	movs	r3, #56	@ 0x38
 8017408:	9a03      	ldr	r2, [sp, #12]

        /* Now we set the CSW with failure.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;

        /* Return error.  */
        status =  UX_ERROR;
 801740a:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 801740c:	4353      	muls	r3, r2
 801740e:	4a2a      	ldr	r2, [pc, #168]	@ (80174b8 <_ux_device_class_storage_inquiry+0xe8>)
 8017410:	18e3      	adds	r3, r4, r3
 8017412:	625a      	str	r2, [r3, #36]	@ 0x24
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017414:	2301      	movs	r3, #1
 8017416:	6563      	str	r3, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8017418:	b005      	add	sp, #20
 801741a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PERIPHERAL_TYPE] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type;
 801741c:	2338      	movs	r3, #56	@ 0x38
 801741e:	9a03      	ldr	r2, [sp, #12]
 8017420:	435a      	muls	r2, r3
 8017422:	18a2      	adds	r2, r4, r2
 8017424:	6951      	ldr	r1, [r2, #20]
 8017426:	7029      	strb	r1, [r5, #0]
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_REMOVABLE_MEDIA] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_removable_flag;
 8017428:	6991      	ldr	r1, [r2, #24]
 801742a:	7069      	strb	r1, [r5, #1]
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type == UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 801742c:	6952      	ldr	r2, [r2, #20]
 801742e:	2a05      	cmp	r2, #5
 8017430:	d100      	bne.n	8017434 <_ux_device_class_storage_inquiry+0x64>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x32;
 8017432:	2732      	movs	r7, #50	@ 0x32
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8017434:	9a03      	ldr	r2, [sp, #12]
 8017436:	70ef      	strb	r7, [r5, #3]
 8017438:	4353      	muls	r3, r2
 801743a:	18e3      	adds	r3, r4, r3
 801743c:	695a      	ldr	r2, [r3, #20]
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH_CD_ROM;
 801743e:	235b      	movs	r3, #91	@ 0x5b
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8017440:	2a05      	cmp	r2, #5
 8017442:	d000      	beq.n	8017446 <_ux_device_class_storage_inquiry+0x76>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 8017444:	3b37      	subs	r3, #55	@ 0x37
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 8017446:	0028      	movs	r0, r5
 8017448:	712b      	strb	r3, [r5, #4]
 801744a:	2208      	movs	r2, #8
 801744c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801744e:	3008      	adds	r0, #8
 8017450:	f7ff fa24 	bl	801689c <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 8017454:	0028      	movs	r0, r5
 8017456:	2210      	movs	r2, #16
 8017458:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801745a:	3010      	adds	r0, #16
 801745c:	f7ff fa1e 	bl	801689c <_ux_utility_memory_copy>
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 8017460:	0028      	movs	r0, r5
 8017462:	2204      	movs	r2, #4
 8017464:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8017466:	3020      	adds	r0, #32
 8017468:	f7ff fa18 	bl	801689c <_ux_utility_memory_copy>
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 801746c:	0023      	movs	r3, r4
 801746e:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_data_count = 0;
 8017470:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017472:	337f      	adds	r3, #127	@ 0x7f
 8017474:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017476:	3b02      	subs	r3, #2
 8017478:	3a1e      	subs	r2, #30
 801747a:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length = inquiry_length;
 801747c:	9a01      	ldr	r2, [sp, #4]
    storage -> ux_device_class_storage_transfer = transfer_request;
 801747e:	330b      	adds	r3, #11
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017480:	3620      	adds	r6, #32
    storage -> ux_device_class_storage_data_count = 0;
 8017482:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017484:	601e      	str	r6, [r3, #0]
    storage -> ux_device_class_storage_device_length = inquiry_length;
 8017486:	605a      	str	r2, [r3, #4]
    storage -> ux_device_class_storage_data_length = inquiry_length;
 8017488:	60da      	str	r2, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 801748a:	6020      	str	r0, [r4, #0]
    return(status);
 801748c:	e7c4      	b.n	8017418 <_ux_device_class_storage_inquiry+0x48>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL);
 801748e:	0039      	movs	r1, r7
 8017490:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017492:	f7ff fa48 	bl	8016926 <_ux_utility_short_put_big_endian>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer + 2, 20);
 8017496:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017498:	2114      	movs	r1, #20
 801749a:	3002      	adds	r0, #2
 801749c:	f7ff fa43 	bl	8016926 <_ux_utility_short_put_big_endian>
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer + 4, storage -> ux_slave_class_storage_product_serial, 20); /* Use case of memcpy is verified. */
 80174a0:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80174a2:	2214      	movs	r2, #20
 80174a4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80174a6:	3004      	adds	r0, #4
 80174a8:	f7ff f9f8 	bl	801689c <_ux_utility_memory_copy>
        if (inquiry_length > 24)
 80174ac:	9b02      	ldr	r3, [sp, #8]
 80174ae:	2b18      	cmp	r3, #24
 80174b0:	d9dc      	bls.n	801746c <_ux_device_class_storage_inquiry+0x9c>
            inquiry_length = 24;
 80174b2:	2318      	movs	r3, #24
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	e7d9      	b.n	801746c <_ux_device_class_storage_inquiry+0x9c>
 80174b8:	00012605 	.word	0x00012605

080174bc <_ux_device_class_storage_mode_select>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SELECT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint.  */
    if (storage -> ux_slave_class_storage_host_length)
 80174bc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 80174be:	000b      	movs	r3, r1
 80174c0:	b510      	push	{r4, lr}
    if (storage -> ux_slave_class_storage_host_length)
 80174c2:	2a00      	cmp	r2, #0
 80174c4:	d000      	beq.n	80174c8 <_ux_device_class_storage_mode_select+0xc>
        _ux_device_stack_endpoint_stall(endpoint_out);
#else
        UX_PARAMETER_NOT_USED(endpoint_out);
#endif

        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 80174c6:	6502      	str	r2, [r0, #80]	@ 0x50
    }

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80174c8:	2138      	movs	r1, #56	@ 0x38
 80174ca:	4359      	muls	r1, r3
 80174cc:	4b05      	ldr	r3, [pc, #20]	@ (80174e4 <_ux_device_class_storage_mode_select+0x28>)
 80174ce:	1841      	adds	r1, r0, r1
 80174d0:	624b      	str	r3, [r1, #36]	@ 0x24
                                            UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80174d2:	2301      	movs	r3, #1

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80174d4:	2254      	movs	r2, #84	@ 0x54
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80174d6:	6543      	str	r3, [r0, #84]	@ 0x54
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80174d8:	2107      	movs	r1, #7
 80174da:	2002      	movs	r0, #2
 80174dc:	f7ff f828 	bl	8016530 <_ux_system_error_handler>
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error!  */
    return(UX_FUNCTION_NOT_SUPPORTED);
}    
 80174e0:	2054      	movs	r0, #84	@ 0x54
 80174e2:	bd10      	pop	{r4, pc}
 80174e4:	00012605 	.word	0x00012605

080174e8 <_ux_device_class_storage_mode_sense>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SENSE, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80174e8:	0013      	movs	r3, r2
{
 80174ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ec:	b087      	sub	sp, #28
 80174ee:	0005      	movs	r5, r0
 80174f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80174f2:	3320      	adds	r3, #32
 80174f4:	9305      	str	r3, [sp, #20]

    /* Get the command format : we have 1a and 5a.  */
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 80174f6:	7803      	ldrb	r3, [r0, #0]
{
 80174f8:	0016      	movs	r6, r2
    
    /* Extract the notification from the cbwcb.  */
    page_code =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PC_PAGE_CODE);
 80174fa:	7887      	ldrb	r7, [r0, #2]
{
 80174fc:	9104      	str	r1, [sp, #16]
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 80174fe:	9303      	str	r3, [sp, #12]

    /* Check the command.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8017500:	2b1a      	cmp	r3, #26
 8017502:	d147      	bne.n	8017594 <_ux_device_class_storage_mode_sense+0xac>
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8017504:	7903      	ldrb	r3, [r0, #4]
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_6;
 8017506:	2404      	movs	r4, #4
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8017508:	9301      	str	r3, [sp, #4]
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
 801750a:	2302      	movs	r3, #2
 801750c:	9302      	str	r3, [sp, #8]
    /* Ensure reply not exceed storage buffer.  */
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
        mode_sense_reply_length = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;

    /* Ensure memory buffer cleaned.  */
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length); /* Use case of memset is verified. */
 801750e:	2100      	movs	r1, #0
 8017510:	9a01      	ldr	r2, [sp, #4]
 8017512:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8017514:	f7ff f9f4 	bl	8016900 <_ux_utility_memory_set>

    /* Establish READ ONLY flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 8017518:	2238      	movs	r2, #56	@ 0x38
 801751a:	9b04      	ldr	r3, [sp, #16]
 801751c:	435a      	muls	r2, r3
 801751e:	18aa      	adds	r2, r5, r2
 8017520:	69d3      	ldr	r3, [r2, #28]
        page_pointer += page_length;
    }
#endif

    /* Caching mode page is returned if cache flush callback implemented.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8017522:	6b92      	ldr	r2, [r2, #56]	@ 0x38
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 8017524:	3b01      	subs	r3, #1
 8017526:	4259      	negs	r1, r3
 8017528:	414b      	adcs	r3, r1
 801752a:	01db      	lsls	r3, r3, #7
 801752c:	9304      	str	r3, [sp, #16]
    page_pointer = transfer_request -> ux_slave_transfer_request_data_pointer + response_header_length;
 801752e:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8017530:	191b      	adds	r3, r3, r4
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8017532:	2a00      	cmp	r2, #0
 8017534:	d03b      	beq.n	80175ae <_ux_device_class_storage_mode_sense+0xc6>
 8017536:	2f08      	cmp	r7, #8
 8017538:	d001      	beq.n	801753e <_ux_device_class_storage_mode_sense+0x56>
        (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE ||
 801753a:	2f3f      	cmp	r7, #63	@ 0x3f
 801753c:	d143      	bne.n	80175c6 <_ux_device_class_storage_mode_sense+0xde>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL))
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_CACHE_LENGTH;

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 801753e:	2208      	movs	r2, #8
        /* Store the length of the page data.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_PAGE_LENGTH;

        /* Set the Write Cache Enabled (WCE) bit.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 8017540:	7899      	ldrb	r1, [r3, #2]
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 8017542:	701a      	strb	r2, [r3, #0]
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
 8017544:	320a      	adds	r2, #10
 8017546:	705a      	strb	r2, [r3, #1]
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 8017548:	3a0e      	subs	r2, #14
 801754a:	430a      	orrs	r2, r1
 801754c:	709a      	strb	r2, [r3, #2]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAG_WCE;

        mode_data_length += page_length;
 801754e:	3414      	adds	r4, #20
        page_pointer += page_length;
 8017550:	3314      	adds	r3, #20
    }

    /* Informational Exceptions Control mode page.  */
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8017552:	2f3f      	cmp	r7, #63	@ 0x3f
 8017554:	d02d      	beq.n	80175b2 <_ux_device_class_storage_mode_sense+0xca>

        mode_data_length += page_length;
    }

    /* Put the payload length in the header.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8017556:	9b03      	ldr	r3, [sp, #12]
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 8017558:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 801755a:	2b1a      	cmp	r3, #26
 801755c:	d12f      	bne.n	80175be <_ux_device_class_storage_mode_sense+0xd6>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 801755e:	7004      	strb	r4, [r0, #0]
    else
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);

    /* Store the write protection flag.  */
    *(transfer_request -> ux_slave_transfer_request_data_pointer + flags_index) = read_only_flag;
 8017560:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8017562:	9a02      	ldr	r2, [sp, #8]
 8017564:	9904      	ldr	r1, [sp, #16]
 8017566:	5499      	strb	r1, [r3, r2]

#if defined(UX_DEVICE_STANDALONE)
    // FIXME: set sense mode is 0 if not hid alway reset.
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length);
 8017568:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801756a:	9a01      	ldr	r2, [sp, #4]
 801756c:	2100      	movs	r1, #0
 801756e:	f7ff f9c7 	bl	8016900 <_ux_utility_memory_set>
    /* Next: Transfer (DATA).  */
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017572:	002b      	movs	r3, r5
 8017574:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;

    storage -> ux_device_class_storage_transfer = transfer_request;
    storage -> ux_device_class_storage_device_length = mode_data_length;
    storage -> ux_device_class_storage_data_length = mode_data_length;
    storage -> ux_device_class_storage_data_count = 0;
 8017576:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017578:	337f      	adds	r3, #127	@ 0x7f
 801757a:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 801757c:	3b02      	subs	r3, #2
 801757e:	3a1e      	subs	r2, #30
 8017580:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017582:	9a05      	ldr	r2, [sp, #20]
 8017584:	330b      	adds	r3, #11
 8017586:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length = mode_data_length;
 8017588:	605c      	str	r4, [r3, #4]
    storage -> ux_device_class_storage_data_length = mode_data_length;
 801758a:	60dc      	str	r4, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 801758c:	6118      	str	r0, [r3, #16]
    /* Send a payload with the response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, mode_sense_reply_length, mode_sense_reply_length); 
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801758e:	6568      	str	r0, [r5, #84]	@ 0x54
    status = UX_SUCCESS;

    /* Return completion status.  */
    return(status);
}
 8017590:	b007      	add	sp, #28
 8017592:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 8017594:	3007      	adds	r0, #7
 8017596:	f7ff f9bf 	bl	8016918 <_ux_utility_short_get_big_endian>
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 801759a:	2380      	movs	r3, #128	@ 0x80
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 801759c:	9001      	str	r0, [sp, #4]
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 801759e:	015b      	lsls	r3, r3, #5
 80175a0:	4298      	cmp	r0, r3
 80175a2:	d900      	bls.n	80175a6 <_ux_device_class_storage_mode_sense+0xbe>
 80175a4:	9301      	str	r3, [sp, #4]
 80175a6:	2303      	movs	r3, #3
 80175a8:	2408      	movs	r4, #8
 80175aa:	9302      	str	r3, [sp, #8]
 80175ac:	e7af      	b.n	801750e <_ux_device_class_storage_mode_sense+0x26>
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 80175ae:	2f1c      	cmp	r7, #28
 80175b0:	d1cf      	bne.n	8017552 <_ux_device_class_storage_mode_sense+0x6a>
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC;
 80175b2:	221c      	movs	r2, #28
 80175b4:	701a      	strb	r2, [r3, #0]
        *(page_pointer + 1) = UX_SLAVE_CLASS_STORAGE_IEC_MODE_PAGE_PAGE_LENGTH;
 80175b6:	3a12      	subs	r2, #18
 80175b8:	705a      	strb	r2, [r3, #1]
        mode_data_length += page_length;
 80175ba:	340c      	adds	r4, #12
 80175bc:	e7cb      	b.n	8017556 <_ux_device_class_storage_mode_sense+0x6e>
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);
 80175be:	b2a1      	uxth	r1, r4
 80175c0:	f7ff f9b1 	bl	8016926 <_ux_utility_short_put_big_endian>
 80175c4:	e7cc      	b.n	8017560 <_ux_device_class_storage_mode_sense+0x78>
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 80175c6:	2f1c      	cmp	r7, #28
 80175c8:	d0f3      	beq.n	80175b2 <_ux_device_class_storage_mode_sense+0xca>
 80175ca:	e7c4      	b.n	8017556 <_ux_device_class_storage_mode_sense+0x6e>

080175cc <_ux_device_class_storage_prevent_allow_media_removal>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_prevent_allow_media_removal(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80175cc:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_PREVENT_ALLOW_MEDIA_REMOVAL, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80175ce:	2000      	movs	r0, #0
 80175d0:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 80175d2:	4770      	bx	lr

080175d4 <_ux_device_class_storage_read>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 80175d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175d6:	b087      	sub	sp, #28
 80175d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80175da:	cb20      	ldmia	r3!, {r5}
 80175dc:	0004      	movs	r4, r0


    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 80175de:	1ca8      	adds	r0, r5, #2
{
 80175e0:	781f      	ldrb	r7, [r3, #0]
 80175e2:	9100      	str	r1, [sp, #0]
 80175e4:	9203      	str	r2, [sp, #12]
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 80175e6:	f7ff f845 	bl	8016674 <_ux_utility_long_get_big_endian>
 80175ea:	9002      	str	r0, [sp, #8]

    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.  */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_READ16)
 80175ec:	2f28      	cmp	r7, #40	@ 0x28
 80175ee:	d127      	bne.n	8017640 <_ux_device_class_storage_read+0x6c>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);
 80175f0:	1de8      	adds	r0, r5, #7
 80175f2:	f7ff f991 	bl	8016918 <_ux_utility_short_get_big_endian>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80175f6:	2338      	movs	r3, #56	@ 0x38
 80175f8:	9d00      	ldr	r5, [sp, #0]
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 80175fa:	0007      	movs	r7, r0
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80175fc:	435d      	muls	r5, r3
 80175fe:	1962      	adds	r2, r4, r5
 8017600:	6916      	ldr	r6, [r2, #16]
 8017602:	9201      	str	r2, [sp, #4]

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017604:	2201      	movs	r2, #1
 8017606:	6562      	str	r2, [r4, #84]	@ 0x54

#if defined(UX_DEVICE_STANDALONE)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017608:	9a00      	ldr	r2, [sp, #0]
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 801760a:	4346      	muls	r6, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 801760c:	3201      	adds	r2, #1
 801760e:	4353      	muls	r3, r2
 8017610:	18e3      	adds	r3, r4, r3
 8017612:	685b      	ldr	r3, [r3, #4]
 8017614:	9a01      	ldr	r2, [sp, #4]
 8017616:	001d      	movs	r5, r3
 8017618:	6a12      	ldr	r2, [r2, #32]
 801761a:	ab05      	add	r3, sp, #20
 801761c:	0020      	movs	r0, r4
 801761e:	9900      	ldr	r1, [sp, #0]
 8017620:	47a8      	blx	r5
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017622:	9b05      	ldr	r3, [sp, #20]
 8017624:	9a01      	ldr	r2, [sp, #4]
 8017626:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Update the request to use.  */
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017628:	0022      	movs	r2, r4
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801762a:	9b03      	ldr	r3, [sp, #12]
    storage -> ux_device_class_storage_transfer = transfer_request;
 801762c:	3288      	adds	r2, #136	@ 0x88
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801762e:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017630:	6013      	str	r3, [r2, #0]

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8017632:	2800      	cmp	r0, #0
 8017634:	d008      	beq.n	8017648 <_ux_device_class_storage_read+0x74>

        /* Update residue.  */
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;

        /* Return an error.  */
        return(UX_ERROR);
 8017636:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 8017638:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801763a:	6523      	str	r3, [r4, #80]	@ 0x50
    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 801763c:	b007      	add	sp, #28
 801763e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 8017640:	1da8      	adds	r0, r5, #6
 8017642:	f7ff f817 	bl	8016674 <_ux_utility_long_get_big_endian>
 8017646:	e7d6      	b.n	80175f6 <_ux_device_class_storage_read+0x22>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 8017648:	0023      	movs	r3, r4
 801764a:	2205      	movs	r2, #5
 801764c:	337d      	adds	r3, #125	@ 0x7d
 801764e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017650:	4a0b      	ldr	r2, [pc, #44]	@ (8017680 <_ux_device_class_storage_read+0xac>)
 8017652:	3301      	adds	r3, #1
 8017654:	801a      	strh	r2, [r3, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 8017656:	4b0b      	ldr	r3, [pc, #44]	@ (8017684 <_ux_device_class_storage_read+0xb0>)
    storage -> ux_device_class_storage_data_length =
 8017658:	0022      	movs	r2, r4
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 801765a:	67a3      	str	r3, [r4, #120]	@ 0x78
    storage -> ux_device_class_storage_device_length = total_length;
 801765c:	0023      	movs	r3, r4
 801765e:	338c      	adds	r3, #140	@ 0x8c
 8017660:	601e      	str	r6, [r3, #0]
        UX_MIN(total_length , storage -> ux_slave_class_storage_host_length);
 8017662:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    storage -> ux_device_class_storage_data_length =
 8017664:	3294      	adds	r2, #148	@ 0x94
        UX_MIN(total_length , storage -> ux_slave_class_storage_host_length);
 8017666:	42b3      	cmp	r3, r6
 8017668:	d900      	bls.n	801766c <_ux_device_class_storage_read+0x98>
 801766a:	0033      	movs	r3, r6
    storage -> ux_device_class_storage_data_length =
 801766c:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_count = 0;
 801766e:	0022      	movs	r2, r4
 8017670:	2300      	movs	r3, #0
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017672:	9902      	ldr	r1, [sp, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8017674:	3298      	adds	r2, #152	@ 0x98
 8017676:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017678:	60d1      	str	r1, [r2, #12]
    storage -> ux_device_class_storage_cmd_n_lb = total_number_blocks;
 801767a:	6117      	str	r7, [r2, #16]
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801767c:	6563      	str	r3, [r4, #84]	@ 0x54
    return(UX_SUCCESS);
 801767e:	e7dd      	b.n	801763c <_ux_device_class_storage_read+0x68>
 8017680:	00002601 	.word	0x00002601
 8017684:	01010101 	.word	0x01010101

08017688 <_ux_device_class_storage_read_capacity>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017688:	2338      	movs	r3, #56	@ 0x38
{
 801768a:	b5f0      	push	{r4, r5, r6, r7, lr}
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 801768c:	001e      	movs	r6, r3
{
 801768e:	0017      	movs	r7, r2
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017690:	1c4a      	adds	r2, r1, #1
 8017692:	434e      	muls	r6, r1
 8017694:	4353      	muls	r3, r2
{
 8017696:	b085      	sub	sp, #20
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8017698:	1986      	adds	r6, r0, r6
 801769a:	18c3      	adds	r3, r0, r3
 801769c:	685d      	ldr	r5, [r3, #4]
 801769e:	6a32      	ldr	r2, [r6, #32]
 80176a0:	ab03      	add	r3, sp, #12
{
 80176a2:	0004      	movs	r4, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80176a4:	47a8      	blx	r5
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80176a6:	9b03      	ldr	r3, [sp, #12]
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80176a8:	1e05      	subs	r5, r0, #0
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80176aa:	6273      	str	r3, [r6, #36]	@ 0x24

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 80176ac:	d123      	bne.n	80176f6 <_ux_device_class_storage_read_capacity+0x6e>
    
        /* Obtain the pointer to the transfer request.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

        /* Obtain read capacity response buffer.  */
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80176ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    
        /* Ensure it is cleaned.  */
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 80176b0:	2208      	movs	r2, #8
 80176b2:	0001      	movs	r1, r0
 80176b4:	0018      	movs	r0, r3
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80176b6:	9301      	str	r3, [sp, #4]
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 80176b8:	f7ff f922 	bl	8016900 <_ux_utility_memory_set>
    
        /* Insert the last LBA address in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LAST_LBA],
 80176bc:	68f1      	ldr	r1, [r6, #12]
 80176be:	9801      	ldr	r0, [sp, #4]
 80176c0:	f7fe ffec 	bl	801669c <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);
    
        /* Insert the block length in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_BLOCK_SIZE],
 80176c4:	9b01      	ldr	r3, [sp, #4]
 80176c6:	6931      	ldr	r1, [r6, #16]
 80176c8:	1d18      	adds	r0, r3, #4
 80176ca:	f7fe ffe7 	bl	801669c <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);
    
#if defined(UX_DEVICE_STANDALONE)

        /* Next: Transfer (DATA).  */
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 80176ce:	0023      	movs	r3, r4
 80176d0:	2223      	movs	r2, #35	@ 0x23
 80176d2:	337f      	adds	r3, #127	@ 0x7f
 80176d4:	701a      	strb	r2, [r3, #0]
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 80176d6:	3a1e      	subs	r2, #30
 80176d8:	3b02      	subs	r3, #2
 80176da:	701a      	strb	r2, [r3, #0]
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80176dc:	003a      	movs	r2, r7

        storage -> ux_device_class_storage_transfer = transfer_request;
 80176de:	330b      	adds	r3, #11
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80176e0:	3220      	adds	r2, #32
        storage -> ux_device_class_storage_transfer = transfer_request;
 80176e2:	601a      	str	r2, [r3, #0]
        storage -> ux_device_class_storage_device_length =
 80176e4:	2208      	movs	r2, #8
                        UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH;
        storage -> ux_device_class_storage_data_length =
                        UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH;
        storage -> ux_device_class_storage_data_count = 0;
 80176e6:	611d      	str	r5, [r3, #16]
        storage -> ux_device_class_storage_device_length =
 80176e8:	605a      	str	r2, [r3, #4]
        storage -> ux_device_class_storage_data_length =
 80176ea:	60da      	str	r2, [r3, #12]
        UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 80176ec:	653d      	str	r5, [r7, #80]	@ 0x50
        status = UX_SUCCESS;
    }
        
    /* Return completion status.  */
    return(status);
}
 80176ee:	2000      	movs	r0, #0
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80176f0:	6565      	str	r5, [r4, #84]	@ 0x54
}
 80176f2:	b005      	add	sp, #20
 80176f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176f6:	2501      	movs	r5, #1
 80176f8:	e7f9      	b.n	80176ee <_ux_device_class_storage_read_capacity+0x66>

080176fa <_ux_device_class_storage_read_format_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80176fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get read format capacity response buffer.  */
    read_format_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80176fc:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
{
 80176fe:	0004      	movs	r4, r0
 8017700:	0016      	movs	r6, r2

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017702:	0038      	movs	r0, r7
 8017704:	220c      	movs	r2, #12
{
 8017706:	000d      	movs	r5, r1
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8017708:	2100      	movs	r1, #0
 801770a:	f7ff f8f9 	bl	8016900 <_ux_utility_memory_set>

    /* Insert the size of the response block.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_SIZE], 8);
 801770e:	0038      	movs	r0, r7
 8017710:	2108      	movs	r1, #8
 8017712:	f7fe ffc3 	bl	801669c <_ux_utility_long_put_big_endian>

    /* Insert the last LBA address in the response.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LAST_LBA],
 8017716:	2338      	movs	r3, #56	@ 0x38
 8017718:	435d      	muls	r5, r3
 801771a:	1965      	adds	r5, r4, r5
 801771c:	68e9      	ldr	r1, [r5, #12]
 801771e:	1d38      	adds	r0, r7, #4
 8017720:	f7fe ffbc 	bl	801669c <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);

    /* Insert the block length in the response.  This is in 3 bytes. */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_BLOCK_SIZE],
 8017724:	0038      	movs	r0, r7
 8017726:	6929      	ldr	r1, [r5, #16]
 8017728:	3008      	adds	r0, #8
 801772a:	f7fe ffb7 	bl	801669c <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);

    /* Insert the response code : always 2.  */
    read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_DESC_CODE] =  2;    
 801772e:	2302      	movs	r3, #2
 8017730:	723b      	strb	r3, [r7, #8]

#if defined(UX_DEVICE_STANDALONE)

    /* Next: Transfer (DATA).  */
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017732:	0023      	movs	r3, r4
 8017734:	2223      	movs	r2, #35	@ 0x23
 8017736:	337f      	adds	r3, #127	@ 0x7f
 8017738:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 801773a:	3b02      	subs	r3, #2
 801773c:	3a1e      	subs	r2, #30
 801773e:	701a      	strb	r2, [r3, #0]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017740:	0032      	movs	r2, r6

    storage -> ux_device_class_storage_transfer = transfer_request;
 8017742:	330b      	adds	r3, #11
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8017744:	3220      	adds	r2, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 8017746:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_device_length =
 8017748:	0022      	movs	r2, r4
 801774a:	230c      	movs	r3, #12
 801774c:	328c      	adds	r2, #140	@ 0x8c
 801774e:	6013      	str	r3, [r2, #0]
                    UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH;
    storage -> ux_device_class_storage_data_length =
 8017750:	6093      	str	r3, [r2, #8]
                    UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH;
    storage -> ux_device_class_storage_data_count = 0;
 8017752:	0023      	movs	r3, r4
 8017754:	2000      	movs	r0, #0
 8017756:	3398      	adds	r3, #152	@ 0x98
 8017758:	6018      	str	r0, [r3, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 801775a:	6530      	str	r0, [r6, #80]	@ 0x50
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH,
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801775c:	6560      	str	r0, [r4, #84]	@ 0x54
    status = UX_SUCCESS;

    /* Return completion status.  */
    return(status);
}
 801775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017760 <_ux_device_class_storage_request_sense>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8017760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;

    /* Get length.  */
    sense_length = storage -> ux_slave_class_storage_host_length;
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8017762:	6c47      	ldr	r7, [r0, #68]	@ 0x44
{
 8017764:	0004      	movs	r4, r0
 8017766:	0015      	movs	r5, r2
 8017768:	9101      	str	r1, [sp, #4]
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 801776a:	2f12      	cmp	r7, #18
 801776c:	d900      	bls.n	8017770 <_ux_device_class_storage_request_sense+0x10>
 801776e:	2712      	movs	r7, #18
        sense_length = UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH;

    /* Obtain sense buffer.  */
    sense_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8017770:	6aee      	ldr	r6, [r5, #44]	@ 0x2c

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(sense_buffer, 0, sense_length); /* Use case of memset is verified. */
 8017772:	003a      	movs	r2, r7
 8017774:	0030      	movs	r0, r6
 8017776:	2100      	movs	r1, #0
 8017778:	f7ff f8c2 	bl	8016900 <_ux_utility_memory_set>
    
    /* Initialize the response buffer with the error code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 801777c:	2370      	movs	r3, #112	@ 0x70
                    UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE_VALUE;

    /* Extract sense key, code, qualifier.  */
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 801777e:	9a01      	ldr	r2, [sp, #4]
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 8017780:	7033      	strb	r3, [r6, #0]
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8017782:	3b38      	subs	r3, #56	@ 0x38
 8017784:	4353      	muls	r3, r2
 8017786:	18e3      	adds	r3, r4, r3
 8017788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;

    storage -> ux_device_class_storage_transfer = transfer_request;
    storage -> ux_device_class_storage_device_length = sense_length;
    storage -> ux_device_class_storage_data_length = sense_length;
    storage -> ux_device_class_storage_data_count = 0;
 801778a:	2000      	movs	r0, #0
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 801778c:	70b3      	strb	r3, [r6, #2]
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 801778e:	0a1a      	lsrs	r2, r3, #8
    qualifier = UX_DEVICE_CLASS_STORAGE_SENSE_QUALIFIER(storage -> ux_slave_class_storage_lun[lun].
 8017790:	0c1b      	lsrs	r3, r3, #16
 8017792:	7373      	strb	r3, [r6, #13]
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ADD_LENGTH] =  10;
 8017794:	230a      	movs	r3, #10
 8017796:	71f3      	strb	r3, [r6, #7]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017798:	0023      	movs	r3, r4
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 801779a:	7332      	strb	r2, [r6, #12]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 801779c:	2223      	movs	r2, #35	@ 0x23
 801779e:	337f      	adds	r3, #127	@ 0x7f
 80177a0:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_READ;
 80177a2:	3b02      	subs	r3, #2
 80177a4:	3a1e      	subs	r2, #30
 80177a6:	701a      	strb	r2, [r3, #0]
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80177a8:	3520      	adds	r5, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 80177aa:	330b      	adds	r3, #11
    storage -> ux_device_class_storage_data_count = 0;
 80177ac:	3498      	adds	r4, #152	@ 0x98
    storage -> ux_device_class_storage_transfer = transfer_request;
 80177ae:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_device_length = sense_length;
 80177b0:	605f      	str	r7, [r3, #4]
    storage -> ux_device_class_storage_data_length = sense_length;
 80177b2:	60df      	str	r7, [r3, #12]
    storage -> ux_device_class_storage_data_count = 0;
 80177b4:	6020      	str	r0, [r4, #0]
    }
#endif

    /* Return completion status.  */    
    return(status);
}
 80177b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080177b8 <_ux_device_class_storage_start_stop>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_start_stop(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80177b8:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_START_STOP, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80177ba:	2000      	movs	r0, #0
 80177bc:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 80177be:	4770      	bx	lr

080177c0 <_ux_device_class_storage_synchronize_cache>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_synchronize_cache(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                                 UX_SLAVE_ENDPOINT *endpoint_in,
                                                 UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb, UCHAR scsi_command)
{
 80177c0:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* By default status is passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Is there not an implementation?  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 80177c2:	2738      	movs	r7, #56	@ 0x38
 80177c4:	003d      	movs	r5, r7
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80177c6:	2300      	movs	r3, #0
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 80177c8:	434d      	muls	r5, r1
 80177ca:	1945      	adds	r5, r0, r5
{
 80177cc:	b085      	sub	sp, #20
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80177ce:	6543      	str	r3, [r0, #84]	@ 0x54
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 80177d0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
{
 80177d2:	0004      	movs	r4, r0
 80177d4:	000e      	movs	r6, r1
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d02c      	beq.n	8017834 <_ux_device_class_storage_synchronize_cache+0x74>
        /* Return success.  */
        return(UX_SUCCESS);
    }

    /* Get the LBA and number of blocks from the CBWCB in 16 bits.  */
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 80177da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177dc:	1c98      	adds	r0, r3, #2
 80177de:	f7fe ff49 	bl	8016674 <_ux_utility_long_get_big_endian>
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 80177e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 80177e4:	9001      	str	r0, [sp, #4]
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 80177e6:	1dd8      	adds	r0, r3, #7
 80177e8:	f7ff f896 	bl	8016918 <_ux_utility_short_get_big_endian>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_SYNCHRONIZE_CACHE, storage, lun, lba, number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 80177ec:	1c73      	adds	r3, r6, #1
 80177ee:	437b      	muls	r3, r7
 80177f0:	18e3      	adds	r3, r4, r3
 80177f2:	685f      	ldr	r7, [r3, #4]
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 80177f4:	9000      	str	r0, [sp, #0]
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 80177f6:	ab03      	add	r3, sp, #12
 80177f8:	0031      	movs	r1, r6
 80177fa:	0020      	movs	r0, r4
 80177fc:	6a2a      	ldr	r2, [r5, #32]
 80177fe:	47b8      	blx	r7
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8017800:	9b03      	ldr	r3, [sp, #12]
 8017802:	626b      	str	r3, [r5, #36]	@ 0x24

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8017804:	0023      	movs	r3, r4
 8017806:	337d      	adds	r3, #125	@ 0x7d
 8017808:	2800      	cmp	r0, #0
 801780a:	d006      	beq.n	801781a <_ux_device_class_storage_synchronize_cache+0x5a>
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_in);
#else
        UX_PARAMETER_NOT_USED(endpoint_in);
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
 801780c:	2202      	movs	r2, #2
 801780e:	701a      	strb	r2, [r3, #0]
#endif

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017810:	2301      	movs	r3, #1

        /* We are done here.  */
        return(UX_ERROR);
 8017812:	20ff      	movs	r0, #255	@ 0xff
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017814:	6563      	str	r3, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8017816:	b005      	add	sp, #20
 8017818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_DISK_OP;
 801781a:	2206      	movs	r2, #6
 801781c:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 801781e:	0023      	movs	r3, r4
 8017820:	4a05      	ldr	r2, [pc, #20]	@ (8017838 <_ux_device_class_storage_synchronize_cache+0x78>)
 8017822:	337e      	adds	r3, #126	@ 0x7e
 8017824:	801a      	strh	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 8017826:	9a01      	ldr	r2, [sp, #4]
 8017828:	3326      	adds	r3, #38	@ 0x26
 801782a:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_cmd_n_lb = number_blocks;
 801782c:	466b      	mov	r3, sp
 801782e:	881b      	ldrh	r3, [r3, #0]
 8017830:	34a8      	adds	r4, #168	@ 0xa8
 8017832:	6023      	str	r3, [r4, #0]
        return(UX_SUCCESS);
 8017834:	2000      	movs	r0, #0
 8017836:	e7ee      	b.n	8017816 <_ux_device_class_storage_synchronize_cache+0x56>
 8017838:	00002601 	.word	0x00002601

0801783c <_ux_device_class_storage_tasks_run>:
/*                                            improved internal logic,    */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_storage_tasks_run(VOID *instance)
{
 801783c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801783e:	0004      	movs	r4, r0
UINT                        status;
INT                         immediate_state = UX_TRUE;


    /* Get pointer to the device.  */
    device = &_ux_system_slave -> ux_system_slave_device;
 8017840:	4bb9      	ldr	r3, [pc, #740]	@ (8017b28 <_ux_device_class_storage_tasks_run+0x2ec>)
{
 8017842:	b085      	sub	sp, #20
    device = &_ux_system_slave -> ux_system_slave_device;
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	9302      	str	r3, [sp, #8]
    /* Run states once.  */
    while(immediate_state)
    {

        /* General check for MSC ready.  */
        if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED ||
 8017848:	0026      	movs	r6, r4
 801784a:	9b02      	ldr	r3, [sp, #8]
 801784c:	367f      	adds	r6, #127	@ 0x7f
 801784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017850:	2b03      	cmp	r3, #3
 8017852:	d108      	bne.n	8017866 <_ux_device_class_storage_tasks_run+0x2a>
            storage -> ux_device_class_storage_ep_in == UX_NULL ||
 8017854:	0027      	movs	r7, r4
 8017856:	3708      	adds	r7, #8
 8017858:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
        if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED ||
 801785a:	2a00      	cmp	r2, #0
 801785c:	d003      	beq.n	8017866 <_ux_device_class_storage_tasks_run+0x2a>
            storage -> ux_device_class_storage_ep_out == UX_NULL)
 801785e:	1d25      	adds	r5, r4, #4
 8017860:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
            storage -> ux_device_class_storage_ep_in == UX_NULL ||
 8017862:	2b00      	cmp	r3, #0
 8017864:	d110      	bne.n	8017888 <_ux_device_class_storage_tasks_run+0x4c>
        {
            storage -> ux_device_class_storage_state = UX_STATE_RESET;
 8017866:	2300      	movs	r3, #0
 8017868:	7033      	strb	r3, [r6, #0]
{
 801786a:	2701      	movs	r7, #1
    /* Run states once.  */
    while(immediate_state)
    {

        /* Update state.  */
        state = storage -> ux_device_class_storage_disk_state;
 801786c:	0025      	movs	r5, r4
 801786e:	357e      	adds	r5, #126	@ 0x7e
        switch(state)
 8017870:	7828      	ldrb	r0, [r5, #0]
 8017872:	3801      	subs	r0, #1
 8017874:	2804      	cmp	r0, #4
 8017876:	d900      	bls.n	801787a <_ux_device_class_storage_tasks_run+0x3e>
 8017878:	e303      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
 801787a:	f7e8 fc6b 	bl	8000154 <__gnu_thumb1_case_uhi>
 801787e:	02a7      	.short	0x02a7
 8017880:	031802c1 	.word	0x031802c1
 8017884:	039a0302 	.word	0x039a0302
        state = storage -> ux_device_class_storage_state;
 8017888:	7830      	ldrb	r0, [r6, #0]
        switch(state)
 801788a:	2800      	cmp	r0, #0
 801788c:	d00e      	beq.n	80178ac <_ux_device_class_storage_tasks_run+0x70>
 801788e:	3821      	subs	r0, #33	@ 0x21
 8017890:	b2c1      	uxtb	r1, r0
 8017892:	2906      	cmp	r1, #6
 8017894:	d8e9      	bhi.n	801786a <_ux_device_class_storage_tasks_run+0x2e>
 8017896:	2806      	cmp	r0, #6
 8017898:	d8e7      	bhi.n	801786a <_ux_device_class_storage_tasks_run+0x2e>
 801789a:	f7e8 fc51 	bl	8000140 <__gnu_thumb1_case_shi>
 801789e:	0019      	.short	0x0019
 80178a0:	0028001f 	.word	0x0028001f
 80178a4:	00970053 	.word	0x00970053
 80178a8:	0275ffe6 	.word	0x0275ffe6
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 80178ac:	0022      	movs	r2, r4
 80178ae:	2101      	movs	r1, #1
 80178b0:	327d      	adds	r2, #125	@ 0x7d
 80178b2:	7011      	strb	r1, [r2, #0]
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 80178b4:	3213      	adds	r2, #19
 80178b6:	6010      	str	r0, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 80178b8:	2223      	movs	r2, #35	@ 0x23
    storage -> ux_device_class_storage_transfer = transfer;
 80178ba:	0021      	movs	r1, r4
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 80178bc:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80178be:	8a1a      	ldrh	r2, [r3, #16]
    storage -> ux_device_class_storage_transfer = transfer;
 80178c0:	3188      	adds	r1, #136	@ 0x88
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 80178c2:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 80178c4:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 80178c6:	0023      	movs	r3, r4
 80178c8:	3394      	adds	r3, #148	@ 0x94
 80178ca:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 80178cc:	6058      	str	r0, [r3, #4]
 80178ce:	e7bb      	b.n	8017848 <_ux_device_class_storage_tasks_run+0xc>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 80178d0:	0010      	movs	r0, r2
 80178d2:	f7fe fb4b 	bl	8015f6c <_ux_device_stack_endpoint_stall>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 80178d6:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80178d8:	f7fe fb48 	bl	8015f6c <_ux_device_stack_endpoint_stall>
    if ((UCHAR)storage -> ux_slave_class_storage_csw_status !=
 80178dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80178de:	b2db      	uxtb	r3, r3
 80178e0:	2b02      	cmp	r3, #2
 80178e2:	d100      	bne.n	80178e6 <_ux_device_class_storage_tasks_run+0xaa>
 80178e4:	e09c      	b.n	8017a20 <_ux_device_class_storage_tasks_run+0x1e4>
        storage -> ux_device_class_storage_state = UX_STATE_RESET;
 80178e6:	2300      	movs	r3, #0
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 80178e8:	7033      	strb	r3, [r6, #0]
            return _ux_device_class_storage_reset_wait(storage);
 80178ea:	2705      	movs	r7, #5
 80178ec:	e7be      	b.n	801786c <_ux_device_class_storage_tasks_run+0x30>
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 80178ee:	0023      	movs	r3, r4
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 80178f0:	2180      	movs	r1, #128	@ 0x80
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 80178f2:	3394      	adds	r3, #148	@ 0x94
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	3304      	adds	r3, #4
 80178f8:	681b      	ldr	r3, [r3, #0]
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 80178fa:	0149      	lsls	r1, r1, #5
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 80178fc:	1ad5      	subs	r5, r2, r3
    if (remaining > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 80178fe:	428d      	cmp	r5, r1
 8017900:	d900      	bls.n	8017904 <_ux_device_class_storage_tasks_run+0xc8>
 8017902:	000d      	movs	r5, r1
    if (storage -> ux_device_class_storage_data_buffer && device_length &&
 8017904:	0021      	movs	r1, r4
 8017906:	0020      	movs	r0, r4
 8017908:	3190      	adds	r1, #144	@ 0x90
 801790a:	6809      	ldr	r1, [r1, #0]
 801790c:	3088      	adds	r0, #136	@ 0x88
 801790e:	9002      	str	r0, [sp, #8]
 8017910:	2900      	cmp	r1, #0
 8017912:	d00c      	beq.n	801792e <_ux_device_class_storage_tasks_run+0xf2>
 8017914:	429a      	cmp	r2, r3
 8017916:	d00a      	beq.n	801792e <_ux_device_class_storage_tasks_run+0xf2>
        storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_READ)
 8017918:	0022      	movs	r2, r4
 801791a:	327d      	adds	r2, #125	@ 0x7d
    if (storage -> ux_device_class_storage_data_buffer && device_length &&
 801791c:	7812      	ldrb	r2, [r2, #0]
 801791e:	2a05      	cmp	r2, #5
 8017920:	d105      	bne.n	801792e <_ux_device_class_storage_tasks_run+0xf2>
                                storage -> ux_device_class_storage_data_buffer +
 8017922:	18c9      	adds	r1, r1, r3
        _ux_utility_memory_copy(storage -> ux_device_class_storage_transfer ->
 8017924:	6803      	ldr	r3, [r0, #0]
 8017926:	002a      	movs	r2, r5
 8017928:	68d8      	ldr	r0, [r3, #12]
 801792a:	f7fe ffb7 	bl	801689c <_ux_utility_memory_copy>
    storage -> ux_device_class_storage_trans_device_length = device_length;
 801792e:	0023      	movs	r3, r4
 8017930:	33a0      	adds	r3, #160	@ 0xa0
 8017932:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_trans_host_length = host_length;
 8017934:	3b04      	subs	r3, #4
 8017936:	601d      	str	r5, [r3, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_WAIT;
 8017938:	2324      	movs	r3, #36	@ 0x24
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 801793a:	2200      	movs	r2, #0
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_WAIT;
 801793c:	7033      	strb	r3, [r6, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);
 801793e:	9b02      	ldr	r3, [sp, #8]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	631a      	str	r2, [r3, #48]	@ 0x30
    return _ux_device_stack_transfer_run(storage -> ux_device_class_storage_transfer,
 8017944:	0025      	movs	r5, r4
 8017946:	0023      	movs	r3, r4
 8017948:	3588      	adds	r5, #136	@ 0x88
 801794a:	339c      	adds	r3, #156	@ 0x9c
 801794c:	681a      	ldr	r2, [r3, #0]
 801794e:	6859      	ldr	r1, [r3, #4]
 8017950:	6828      	ldr	r0, [r5, #0]
 8017952:	f7fe fd95 	bl	8016480 <_ux_device_stack_transfer_run>
            if (status < UX_STATE_ERROR)
 8017956:	0023      	movs	r3, r4
 8017958:	337e      	adds	r3, #126	@ 0x7e
 801795a:	9302      	str	r3, [sp, #8]
 801795c:	2802      	cmp	r0, #2
 801795e:	d809      	bhi.n	8017974 <_ux_device_class_storage_tasks_run+0x138>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_IDLE;
 8017960:	2320      	movs	r3, #32
 8017962:	7033      	strb	r3, [r6, #0]
                if (storage -> ux_device_class_storage_disk_state !=
 8017964:	9b02      	ldr	r3, [sp, #8]
 8017966:	781b      	ldrb	r3, [r3, #0]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d0be      	beq.n	80178ea <_ux_device_class_storage_tasks_run+0xae>
                    storage -> ux_device_class_storage_disk_state =
 801796c:	2305      	movs	r3, #5
 801796e:	9a02      	ldr	r2, [sp, #8]
 8017970:	7013      	strb	r3, [r2, #0]
 8017972:	e7ba      	b.n	80178ea <_ux_device_class_storage_tasks_run+0xae>
            if (status == UX_STATE_ERROR)
 8017974:	2803      	cmp	r0, #3
 8017976:	d11e      	bne.n	80179b6 <_ux_device_class_storage_tasks_run+0x17a>
UX_SLAVE_ENDPOINT *endp = trans -> ux_slave_transfer_request_endpoint;
 8017978:	682b      	ldr	r3, [r5, #0]
    _ux_device_stack_endpoint_stall(endp);
 801797a:	6898      	ldr	r0, [r3, #8]
 801797c:	f7fe faf6 	bl	8015f6c <_ux_device_stack_endpoint_stall>
                if (storage -> ux_device_class_storage_disk_state !=
 8017980:	9b02      	ldr	r3, [sp, #8]
 8017982:	781b      	ldrb	r3, [r3, #0]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d002      	beq.n	801798e <_ux_device_class_storage_tasks_run+0x152>
                    storage -> ux_device_class_storage_disk_state =
 8017988:	2305      	movs	r3, #5
 801798a:	9a02      	ldr	r2, [sp, #8]
 801798c:	7013      	strb	r3, [r2, #0]
                        storage -> ux_slave_class_storage_host_length -
 801798e:	0022      	movs	r2, r4
 8017990:	3298      	adds	r2, #152	@ 0x98
 8017992:	6812      	ldr	r2, [r2, #0]
 8017994:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017996:	1a9b      	subs	r3, r3, r2
                storage -> ux_slave_class_storage_csw_residue =
 8017998:	6523      	str	r3, [r4, #80]	@ 0x50
                    storage -> ux_slave_class_storage_cbw_lun].
 801799a:	0023      	movs	r3, r4
 801799c:	3349      	adds	r3, #73	@ 0x49
 801799e:	7819      	ldrb	r1, [r3, #0]
                        ux_slave_class_storage_request_sense_status =
 80179a0:	2338      	movs	r3, #56	@ 0x38
 80179a2:	434b      	muls	r3, r1
 80179a4:	4a61      	ldr	r2, [pc, #388]	@ (8017b2c <_ux_device_class_storage_tasks_run+0x2f0>)
 80179a6:	18e3      	adds	r3, r4, r3
 80179a8:	625a      	str	r2, [r3, #36]	@ 0x24
                _ux_device_class_storage_csw_send(storage,
 80179aa:	2300      	movs	r3, #0
 80179ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
        _ux_device_class_storage_csw_send(storage,
 80179ae:	0020      	movs	r0, r4
 80179b0:	f7ff fc1c 	bl	80171ec <_ux_device_class_storage_csw_send>
 80179b4:	e799      	b.n	80178ea <_ux_device_class_storage_tasks_run+0xae>
            if (status == UX_STATE_NEXT)
 80179b6:	2804      	cmp	r0, #4
 80179b8:	d197      	bne.n	80178ea <_ux_device_class_storage_tasks_run+0xae>
                storage -> ux_device_class_storage_data_count +=
 80179ba:	0022      	movs	r2, r4
                        storage -> ux_device_class_storage_transfer ->
 80179bc:	682b      	ldr	r3, [r5, #0]
                storage -> ux_device_class_storage_data_count +=
 80179be:	3298      	adds	r2, #152	@ 0x98
 80179c0:	699b      	ldr	r3, [r3, #24]
 80179c2:	6811      	ldr	r1, [r2, #0]
 80179c4:	185b      	adds	r3, r3, r1
 80179c6:	6013      	str	r3, [r2, #0]
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_NEXT;
 80179c8:	2325      	movs	r3, #37	@ 0x25
 80179ca:	e78d      	b.n	80178e8 <_ux_device_class_storage_tasks_run+0xac>
            if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 80179cc:	0021      	movs	r1, r4
 80179ce:	317d      	adds	r1, #125	@ 0x7d
 80179d0:	9103      	str	r1, [sp, #12]
 80179d2:	7809      	ldrb	r1, [r1, #0]
 80179d4:	2901      	cmp	r1, #1
 80179d6:	d000      	beq.n	80179da <_ux_device_class_storage_tasks_run+0x19e>
 80179d8:	e137      	b.n	8017c4a <_ux_device_class_storage_tasks_run+0x40e>
    cbw_trans = storage -> ux_device_class_storage_transfer;
 80179da:	0020      	movs	r0, r4
 80179dc:	3088      	adds	r0, #136	@ 0x88
 80179de:	6802      	ldr	r2, [r0, #0]
    if (cbw_trans -> ux_slave_transfer_request_completion_code == UX_TRANSFER_STALLED)
 80179e0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80179e2:	2921      	cmp	r1, #33	@ 0x21
 80179e4:	d10d      	bne.n	8017a02 <_ux_device_class_storage_tasks_run+0x1c6>
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 80179e6:	0022      	movs	r2, r4
 80179e8:	2100      	movs	r1, #0
 80179ea:	3290      	adds	r2, #144	@ 0x90
 80179ec:	6011      	str	r1, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 80179ee:	2223      	movs	r2, #35	@ 0x23
 80179f0:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80179f2:	8a1a      	ldrh	r2, [r3, #16]
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 80179f4:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 80179f6:	6003      	str	r3, [r0, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 80179f8:	0023      	movs	r3, r4
 80179fa:	3394      	adds	r3, #148	@ 0x94
 80179fc:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 80179fe:	6059      	str	r1, [r3, #4]
}
 8017a00:	e773      	b.n	80178ea <_ux_device_class_storage_tasks_run+0xae>
    cbw = cbw_trans -> ux_slave_transfer_request_data_pointer;
 8017a02:	68d3      	ldr	r3, [r2, #12]
 8017a04:	9302      	str	r3, [sp, #8]
    if (cbw_length != UX_SLAVE_CLASS_STORAGE_CBW_LENGTH)
 8017a06:	6993      	ldr	r3, [r2, #24]
 8017a08:	2b1f      	cmp	r3, #31
 8017a0a:	d00b      	beq.n	8017a24 <_ux_device_class_storage_tasks_run+0x1e8>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8017a0c:	2302      	movs	r3, #2
 8017a0e:	6563      	str	r3, [r4, #84]	@ 0x54
    if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 8017a10:	0025      	movs	r5, r4
 8017a12:	357d      	adds	r5, #125	@ 0x7d
 8017a14:	7829      	ldrb	r1, [r5, #0]
 8017a16:	2901      	cmp	r1, #1
 8017a18:	d000      	beq.n	8017a1c <_ux_device_class_storage_tasks_run+0x1e0>
 8017a1a:	e0d1      	b.n	8017bc0 <_ux_device_class_storage_tasks_run+0x384>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8017a1c:	2302      	movs	r3, #2
 8017a1e:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8017a20:	2321      	movs	r3, #33	@ 0x21
 8017a22:	e761      	b.n	80178e8 <_ux_device_class_storage_tasks_run+0xac>
    lun = *(cbw + UX_SLAVE_CLASS_STORAGE_CBW_LUN);
 8017a24:	9b02      	ldr	r3, [sp, #8]
 8017a26:	7b5d      	ldrb	r5, [r3, #13]
    storage -> ux_slave_class_storage_cbw_lun = lun;
 8017a28:	0023      	movs	r3, r4
 8017a2a:	3349      	adds	r3, #73	@ 0x49
 8017a2c:	701d      	strb	r5, [r3, #0]
    storage -> ux_slave_class_storage_cbw_flags = *(cbw + UX_SLAVE_CLASS_STORAGE_CBW_FLAGS);
 8017a2e:	9b02      	ldr	r3, [sp, #8]
 8017a30:	7b1a      	ldrb	r2, [r3, #12]
 8017a32:	0023      	movs	r3, r4
 8017a34:	3348      	adds	r3, #72	@ 0x48
 8017a36:	701a      	strb	r2, [r3, #0]
                    _ux_utility_long_get(cbw + UX_SLAVE_CLASS_STORAGE_CBW_TAG);
 8017a38:	9b02      	ldr	r3, [sp, #8]
 8017a3a:	1d18      	adds	r0, r3, #4
 8017a3c:	f7fe fe0f 	bl	801665e <_ux_utility_long_get>
    storage -> ux_slave_class_storage_scsi_tag =
 8017a40:	64e0      	str	r0, [r4, #76]	@ 0x4c
    storage -> ux_slave_class_storage_host_length = _ux_utility_long_get(cbw + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH);
 8017a42:	9802      	ldr	r0, [sp, #8]
 8017a44:	3008      	adds	r0, #8
 8017a46:	f7fe fe0a 	bl	801665e <_ux_utility_long_get>
 8017a4a:	6460      	str	r0, [r4, #68]	@ 0x44
    storage -> ux_slave_class_storage_csw_residue = 0;
 8017a4c:	2000      	movs	r0, #0
    if (lun >= storage -> ux_slave_class_storage_number_lun)
 8017a4e:	68a3      	ldr	r3, [r4, #8]
    storage -> ux_slave_class_storage_csw_residue = 0;
 8017a50:	6520      	str	r0, [r4, #80]	@ 0x50
    storage -> ux_slave_class_storage_csw_status = 0;
 8017a52:	6560      	str	r0, [r4, #84]	@ 0x54
    if (lun >= storage -> ux_slave_class_storage_number_lun)
 8017a54:	429d      	cmp	r5, r3
 8017a56:	d2d9      	bcs.n	8017a0c <_ux_device_class_storage_tasks_run+0x1d0>
    if (_ux_utility_long_get(cbw) != UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8017a58:	9802      	ldr	r0, [sp, #8]
 8017a5a:	f7fe fe00 	bl	801665e <_ux_utility_long_get>
 8017a5e:	4b34      	ldr	r3, [pc, #208]	@ (8017b30 <_ux_device_class_storage_tasks_run+0x2f4>)
 8017a60:	4298      	cmp	r0, r3
 8017a62:	d1d3      	bne.n	8017a0c <_ux_device_class_storage_tasks_run+0x1d0>
    if (cbwcb_length == 0)
 8017a64:	9b02      	ldr	r3, [sp, #8]
 8017a66:	7b9b      	ldrb	r3, [r3, #14]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d0cf      	beq.n	8017a0c <_ux_device_class_storage_tasks_run+0x1d0>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017a6c:	2103      	movs	r1, #3
    endpoint_in = storage -> ux_device_class_storage_ep_in;
 8017a6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017a70:	9f03      	ldr	r7, [sp, #12]
    endpoint_out = storage -> ux_device_class_storage_ep_out;
 8017a72:	1d23      	adds	r3, r4, #4
 8017a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CSW;
 8017a76:	7039      	strb	r1, [r7, #0]
    storage -> ux_device_class_storage_device_length = 0;
 8017a78:	0021      	movs	r1, r4
 8017a7a:	2000      	movs	r0, #0
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017a7c:	0027      	movs	r7, r4
    storage -> ux_device_class_storage_device_length = 0;
 8017a7e:	318c      	adds	r1, #140	@ 0x8c
 8017a80:	6008      	str	r0, [r1, #0]
    storage -> ux_device_class_storage_data_length = 0;
 8017a82:	6088      	str	r0, [r1, #8]
    storage -> ux_device_class_storage_data_count = 0;
 8017a84:	60c8      	str	r0, [r1, #12]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017a86:	390e      	subs	r1, #14
 8017a88:	7008      	strb	r0, [r1, #0]
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017a8a:	9802      	ldr	r0, [sp, #8]
    cbwcb = cbw + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 8017a8c:	9902      	ldr	r1, [sp, #8]
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017a8e:	7bc0      	ldrb	r0, [r0, #15]
 8017a90:	377c      	adds	r7, #124	@ 0x7c
    cbwcb = cbw + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 8017a92:	310f      	adds	r1, #15
    storage -> ux_device_class_storage_cmd = *cbwcb;
 8017a94:	7038      	strb	r0, [r7, #0]
    switch(storage -> ux_device_class_storage_cmd)
 8017a96:	282f      	cmp	r0, #47	@ 0x2f
 8017a98:	d828      	bhi.n	8017aec <_ux_device_class_storage_tasks_run+0x2b0>
 8017a9a:	2819      	cmp	r0, #25
 8017a9c:	d80e      	bhi.n	8017abc <_ux_device_class_storage_tasks_run+0x280>
 8017a9e:	2804      	cmp	r0, #4
 8017aa0:	d050      	beq.n	8017b44 <_ux_device_class_storage_tasks_run+0x308>
 8017aa2:	d81b      	bhi.n	8017adc <_ux_device_class_storage_tasks_run+0x2a0>
 8017aa4:	2800      	cmp	r0, #0
 8017aa6:	d039      	beq.n	8017b1c <_ux_device_class_storage_tasks_run+0x2e0>
 8017aa8:	2803      	cmp	r0, #3
 8017aaa:	d045      	beq.n	8017b38 <_ux_device_class_storage_tasks_run+0x2fc>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017aac:	2301      	movs	r3, #1
 8017aae:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8017ab0:	3337      	adds	r3, #55	@ 0x37
 8017ab2:	436b      	muls	r3, r5
 8017ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8017b34 <_ux_device_class_storage_tasks_run+0x2f8>)
 8017ab6:	18e3      	adds	r3, r4, r3
 8017ab8:	625a      	str	r2, [r3, #36]	@ 0x24
 8017aba:	e7a9      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 8017abc:	381a      	subs	r0, #26
 8017abe:	2815      	cmp	r0, #21
 8017ac0:	d8f4      	bhi.n	8017aac <_ux_device_class_storage_tasks_run+0x270>
 8017ac2:	f7e8 fb29 	bl	8000118 <__gnu_thumb1_case_sqi>
 8017ac6:	4563      	.short	0x4563
 8017ac8:	f34bf3f3 	.word	0xf34bf3f3
 8017acc:	51f3f3f3 	.word	0x51f3f3f3
 8017ad0:	f3f357f3 	.word	0xf3f357f3
 8017ad4:	f373f371 	.word	0xf373f371
 8017ad8:	5df3f3f3 	.word	0x5df3f3f3
 8017adc:	2812      	cmp	r0, #18
 8017ade:	d1e5      	bne.n	8017aac <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_inquiry(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017ae0:	9100      	str	r1, [sp, #0]
 8017ae2:	0020      	movs	r0, r4
 8017ae4:	0029      	movs	r1, r5
 8017ae6:	f7ff fc73 	bl	80173d0 <_ux_device_class_storage_inquiry>
        break;
 8017aea:	e791      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 8017aec:	285a      	cmp	r0, #90	@ 0x5a
 8017aee:	d04d      	beq.n	8017b8c <_ux_device_class_storage_tasks_run+0x350>
 8017af0:	d809      	bhi.n	8017b06 <_ux_device_class_storage_tasks_run+0x2ca>
 8017af2:	2835      	cmp	r0, #53	@ 0x35
 8017af4:	d05c      	beq.n	8017bb0 <_ux_device_class_storage_tasks_run+0x374>
 8017af6:	2855      	cmp	r0, #85	@ 0x55
 8017af8:	d1d8      	bne.n	8017aac <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_mode_select(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017afa:	9100      	str	r1, [sp, #0]
 8017afc:	0020      	movs	r0, r4
 8017afe:	0029      	movs	r1, r5
 8017b00:	f7ff fcdc 	bl	80174bc <_ux_device_class_storage_mode_select>
        break;
 8017b04:	e784      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
    switch(storage -> ux_device_class_storage_cmd)
 8017b06:	28a8      	cmp	r0, #168	@ 0xa8
 8017b08:	d046      	beq.n	8017b98 <_ux_device_class_storage_tasks_run+0x35c>
 8017b0a:	28aa      	cmp	r0, #170	@ 0xaa
 8017b0c:	d1ce      	bne.n	8017aac <_ux_device_class_storage_tasks_run+0x270>
        _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8017b0e:	9001      	str	r0, [sp, #4]
 8017b10:	9100      	str	r1, [sp, #0]
 8017b12:	0020      	movs	r0, r4
 8017b14:	0029      	movs	r1, r5
 8017b16:	f000 fa99 	bl	801804c <_ux_device_class_storage_write>
        break;
 8017b1a:	e779      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_test_ready(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b1c:	9100      	str	r1, [sp, #0]
 8017b1e:	0020      	movs	r0, r4
 8017b20:	0029      	movs	r1, r5
 8017b22:	f000 fa6d 	bl	8018000 <_ux_device_class_storage_test_ready>
        break;
 8017b26:	e773      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
 8017b28:	20003104 	.word	0x20003104
 8017b2c:	00005402 	.word	0x00005402
 8017b30:	43425355 	.word	0x43425355
 8017b34:	00002005 	.word	0x00002005
        _ux_device_class_storage_request_sense(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b38:	9100      	str	r1, [sp, #0]
 8017b3a:	0020      	movs	r0, r4
 8017b3c:	0029      	movs	r1, r5
 8017b3e:	f7ff fe0f 	bl	8017760 <_ux_device_class_storage_request_sense>
        break;
 8017b42:	e765      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_format(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b44:	9100      	str	r1, [sp, #0]
 8017b46:	0020      	movs	r0, r4
 8017b48:	0029      	movs	r1, r5
 8017b4a:	f7ff fbd1 	bl	80172f0 <_ux_device_class_storage_format>
        break;
 8017b4e:	e75f      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_start_stop(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b50:	9100      	str	r1, [sp, #0]
 8017b52:	0020      	movs	r0, r4
 8017b54:	0029      	movs	r1, r5
 8017b56:	f7ff fe2f 	bl	80177b8 <_ux_device_class_storage_start_stop>
        break;
 8017b5a:	e759      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_prevent_allow_media_removal(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b5c:	9100      	str	r1, [sp, #0]
 8017b5e:	0020      	movs	r0, r4
 8017b60:	0029      	movs	r1, r5
 8017b62:	f7ff fd33 	bl	80175cc <_ux_device_class_storage_prevent_allow_media_removal>
        break;
 8017b66:	e753      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read_format_capacity(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b68:	9100      	str	r1, [sp, #0]
 8017b6a:	0020      	movs	r0, r4
 8017b6c:	0029      	movs	r1, r5
 8017b6e:	f7ff fdc4 	bl	80176fa <_ux_device_class_storage_read_format_capacity>
        break;
 8017b72:	e74d      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read_capacity(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b74:	9100      	str	r1, [sp, #0]
 8017b76:	0020      	movs	r0, r4
 8017b78:	0029      	movs	r1, r5
 8017b7a:	f7ff fd85 	bl	8017688 <_ux_device_class_storage_read_capacity>
        break;
 8017b7e:	e747      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_verify(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b80:	9100      	str	r1, [sp, #0]
 8017b82:	0020      	movs	r0, r4
 8017b84:	0029      	movs	r1, r5
 8017b86:	f000 fa5c 	bl	8018042 <_ux_device_class_storage_verify>
        break;
 8017b8a:	e741      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_mode_sense(storage, lun, endpoint_in, endpoint_out, cbwcb);
 8017b8c:	9100      	str	r1, [sp, #0]
 8017b8e:	0020      	movs	r0, r4
 8017b90:	0029      	movs	r1, r5
 8017b92:	f7ff fca9 	bl	80174e8 <_ux_device_class_storage_mode_sense>
        break;
 8017b96:	e73b      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8017b98:	20a8      	movs	r0, #168	@ 0xa8
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8017b9a:	9001      	str	r0, [sp, #4]
 8017b9c:	9100      	str	r1, [sp, #0]
 8017b9e:	0020      	movs	r0, r4
 8017ba0:	0029      	movs	r1, r5
 8017ba2:	f7ff fd17 	bl	80175d4 <_ux_device_class_storage_read>
        break;
 8017ba6:	e733      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
        _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8017ba8:	2028      	movs	r0, #40	@ 0x28
 8017baa:	e7f6      	b.n	8017b9a <_ux_device_class_storage_tasks_run+0x35e>
        _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbwcb, 
 8017bac:	202a      	movs	r0, #42	@ 0x2a
 8017bae:	e7ae      	b.n	8017b0e <_ux_device_class_storage_tasks_run+0x2d2>
        _ux_device_class_storage_synchronize_cache(storage, lun, endpoint_in, endpoint_out, cbwcb, *(cbwcb));
 8017bb0:	2035      	movs	r0, #53	@ 0x35
 8017bb2:	9100      	str	r1, [sp, #0]
 8017bb4:	9001      	str	r0, [sp, #4]
 8017bb6:	0029      	movs	r1, r5
 8017bb8:	0020      	movs	r0, r4
 8017bba:	f7ff fe01 	bl	80177c0 <_ux_device_class_storage_synchronize_cache>
        break;
 8017bbe:	e727      	b.n	8017a10 <_ux_device_class_storage_tasks_run+0x1d4>
    if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PASSED)
 8017bc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
            storage -> ux_slave_class_storage_host_length == 0)
 8017bc2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PASSED)
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d10a      	bne.n	8017bde <_ux_device_class_storage_tasks_run+0x3a2>
    if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_DIR)
 8017bc8:	0023      	movs	r3, r4
 8017bca:	3348      	adds	r3, #72	@ 0x48
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8017bd0:	d918      	bls.n	8017c04 <_ux_device_class_storage_tasks_run+0x3c8>
        if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_WRITE ||
 8017bd2:	2904      	cmp	r1, #4
 8017bd4:	d001      	beq.n	8017bda <_ux_device_class_storage_tasks_run+0x39e>
 8017bd6:	2a00      	cmp	r2, #0
 8017bd8:	d10a      	bne.n	8017bf0 <_ux_device_class_storage_tasks_run+0x3b4>
            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8017bda:	2302      	movs	r3, #2
            storage -> ux_slave_class_storage_csw_status =
 8017bdc:	6563      	str	r3, [r4, #84]	@ 0x54
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017bde:	0023      	movs	r3, r4
 8017be0:	2100      	movs	r1, #0
 8017be2:	337e      	adds	r3, #126	@ 0x7e
 8017be4:	7019      	strb	r1, [r3, #0]
        if (storage -> ux_slave_class_storage_host_length &&
 8017be6:	428a      	cmp	r2, r1
 8017be8:	d119      	bne.n	8017c1e <_ux_device_class_storage_tasks_run+0x3e2>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017bea:	0023      	movs	r3, r4
 8017bec:	3308      	adds	r3, #8
 8017bee:	e01c      	b.n	8017c2a <_ux_device_class_storage_tasks_run+0x3ee>
            storage -> ux_device_class_storage_data_length)
 8017bf0:	0023      	movs	r3, r4
 8017bf2:	3394      	adds	r3, #148	@ 0x94
        if (storage -> ux_slave_class_storage_host_length <
 8017bf4:	6818      	ldr	r0, [r3, #0]
 8017bf6:	4290      	cmp	r0, r2
 8017bf8:	d900      	bls.n	8017bfc <_ux_device_class_storage_tasks_run+0x3c0>
            storage -> ux_device_class_storage_data_length =
 8017bfa:	601a      	str	r2, [r3, #0]
    if (storage -> ux_device_class_storage_cmd_state < UX_DEVICE_CLASS_STORAGE_CMD_WRITE)
 8017bfc:	2903      	cmp	r1, #3
 8017bfe:	d900      	bls.n	8017c02 <_ux_device_class_storage_tasks_run+0x3c6>
 8017c00:	e673      	b.n	80178ea <_ux_device_class_storage_tasks_run+0xae>
 8017c02:	e01a      	b.n	8017c3a <_ux_device_class_storage_tasks_run+0x3fe>
                storage -> ux_device_class_storage_device_length ||
 8017c04:	0023      	movs	r3, r4
 8017c06:	338c      	adds	r3, #140	@ 0x8c
 8017c08:	681b      	ldr	r3, [r3, #0]
        if (storage -> ux_slave_class_storage_host_length <
 8017c0a:	4293      	cmp	r3, r2
 8017c0c:	d8e5      	bhi.n	8017bda <_ux_device_class_storage_tasks_run+0x39e>
                storage -> ux_device_class_storage_device_length ||
 8017c0e:	2905      	cmp	r1, #5
 8017c10:	d0e3      	beq.n	8017bda <_ux_device_class_storage_tasks_run+0x39e>
        if (storage -> ux_slave_class_storage_host_length !=
 8017c12:	4293      	cmp	r3, r2
 8017c14:	d0f2      	beq.n	8017bfc <_ux_device_class_storage_tasks_run+0x3c0>
                    storage -> ux_slave_class_storage_host_length -
 8017c16:	1ad3      	subs	r3, r2, r3
            storage -> ux_slave_class_storage_csw_residue =
 8017c18:	6523      	str	r3, [r4, #80]	@ 0x50
            storage -> ux_slave_class_storage_csw_status =
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	e7de      	b.n	8017bdc <_ux_device_class_storage_tasks_run+0x3a0>
            (storage -> ux_slave_class_storage_cbw_flags &
 8017c1e:	0023      	movs	r3, r4
 8017c20:	3348      	adds	r3, #72	@ 0x48
        if (storage -> ux_slave_class_storage_host_length &&
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c26:	d8e0      	bhi.n	8017bea <_ux_device_class_storage_tasks_run+0x3ae>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 8017c28:	1d23      	adds	r3, r4, #4
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017c2a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8017c2c:	f7fe f99e 	bl	8015f6c <_ux_device_stack_endpoint_stall>
        if (storage -> ux_device_class_storage_cmd_state != UX_DEVICE_CLASS_STORAGE_CMD_CBW)
 8017c30:	782b      	ldrb	r3, [r5, #0]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d001      	beq.n	8017c3a <_ux_device_class_storage_tasks_run+0x3fe>
            storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
 8017c36:	2302      	movs	r3, #2
 8017c38:	702b      	strb	r3, [r5, #0]
                                storage -> ux_slave_class_storage_cbw_lun,
 8017c3a:	0023      	movs	r3, r4
        _ux_device_class_storage_csw_send(storage,
 8017c3c:	0022      	movs	r2, r4
                                storage -> ux_slave_class_storage_cbw_lun,
 8017c3e:	3349      	adds	r3, #73	@ 0x49
        _ux_device_class_storage_csw_send(storage,
 8017c40:	3208      	adds	r2, #8
 8017c42:	7819      	ldrb	r1, [r3, #0]
 8017c44:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8017c46:	2300      	movs	r3, #0
 8017c48:	e6b1      	b.n	80179ae <_ux_device_class_storage_tasks_run+0x172>
            if (storage -> ux_device_class_storage_cmd_state == UX_DEVICE_CLASS_STORAGE_CMD_CSW)
 8017c4a:	2903      	cmp	r1, #3
 8017c4c:	d118      	bne.n	8017c80 <_ux_device_class_storage_tasks_run+0x444>
                if (storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 8017c4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017c50:	2a02      	cmp	r2, #2
 8017c52:	d102      	bne.n	8017c5a <_ux_device_class_storage_tasks_run+0x41e>
                    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_RESET;
 8017c54:	2321      	movs	r3, #33	@ 0x21
 8017c56:	7033      	strb	r3, [r6, #0]
 8017c58:	e5f6      	b.n	8017848 <_ux_device_class_storage_tasks_run+0xc>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 8017c5a:	2201      	movs	r2, #1
 8017c5c:	9903      	ldr	r1, [sp, #12]
    storage -> ux_device_class_storage_transfer = transfer;
 8017c5e:	0020      	movs	r0, r4
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_CBW;
 8017c60:	700a      	strb	r2, [r1, #0]
    storage -> ux_device_class_storage_data_buffer = UX_NULL;
 8017c62:	0022      	movs	r2, r4
 8017c64:	2100      	movs	r1, #0
 8017c66:	3290      	adds	r2, #144	@ 0x90
 8017c68:	6011      	str	r1, [r2, #0]
    storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017c6a:	2223      	movs	r2, #35	@ 0x23
 8017c6c:	7032      	strb	r2, [r6, #0]
    max_packet_size = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8017c6e:	8a1a      	ldrh	r2, [r3, #16]
    storage -> ux_device_class_storage_transfer = transfer;
 8017c70:	3088      	adds	r0, #136	@ 0x88
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 8017c72:	3320      	adds	r3, #32
    storage -> ux_device_class_storage_transfer = transfer;
 8017c74:	6003      	str	r3, [r0, #0]
    storage -> ux_device_class_storage_data_length = max_packet_size;
 8017c76:	0023      	movs	r3, r4
 8017c78:	3394      	adds	r3, #148	@ 0x94
 8017c7a:	601a      	str	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;
 8017c7c:	6059      	str	r1, [r3, #4]
}
 8017c7e:	e5e3      	b.n	8017848 <_ux_device_class_storage_tasks_run+0xc>
    switch(storage -> ux_device_class_storage_cmd)
 8017c80:	0023      	movs	r3, r4
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017c82:	0025      	movs	r5, r4
 8017c84:	0021      	movs	r1, r4
    switch(storage -> ux_device_class_storage_cmd)
 8017c86:	337c      	adds	r3, #124	@ 0x7c
 8017c88:	781b      	ldrb	r3, [r3, #0]
    remaining = storage -> ux_device_class_storage_data_length - storage -> ux_device_class_storage_data_count;
 8017c8a:	3598      	adds	r5, #152	@ 0x98
 8017c8c:	6828      	ldr	r0, [r5, #0]
 8017c8e:	317e      	adds	r1, #126	@ 0x7e
    switch(storage -> ux_device_class_storage_cmd)
 8017c90:	2ba8      	cmp	r3, #168	@ 0xa8
 8017c92:	d037      	beq.n	8017d04 <_ux_device_class_storage_tasks_run+0x4c8>
 8017c94:	d810      	bhi.n	8017cb8 <_ux_device_class_storage_tasks_run+0x47c>
 8017c96:	2b28      	cmp	r3, #40	@ 0x28
 8017c98:	d034      	beq.n	8017d04 <_ux_device_class_storage_tasks_run+0x4c8>
 8017c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c9c:	d00e      	beq.n	8017cbc <_ux_device_class_storage_tasks_run+0x480>
        if (storage -> ux_slave_class_storage_host_length >
 8017c9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017ca0:	4283      	cmp	r3, r0
 8017ca2:	d940      	bls.n	8017d26 <_ux_device_class_storage_tasks_run+0x4ea>
UX_SLAVE_ENDPOINT *endp = trans -> ux_slave_transfer_request_endpoint;
 8017ca4:	0023      	movs	r3, r4
 8017ca6:	3388      	adds	r3, #136	@ 0x88
 8017ca8:	681b      	ldr	r3, [r3, #0]
    _ux_device_stack_endpoint_stall(endp);
 8017caa:	6898      	ldr	r0, [r3, #8]
 8017cac:	f7fe f95e 	bl	8015f6c <_ux_device_stack_endpoint_stall>
                storage -> ux_slave_class_storage_host_length -
 8017cb0:	0022      	movs	r2, r4
 8017cb2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017cb4:	3294      	adds	r2, #148	@ 0x94
 8017cb6:	e033      	b.n	8017d20 <_ux_device_class_storage_tasks_run+0x4e4>
    switch(storage -> ux_device_class_storage_cmd)
 8017cb8:	2baa      	cmp	r3, #170	@ 0xaa
 8017cba:	d1f0      	bne.n	8017c9e <_ux_device_class_storage_tasks_run+0x462>
                        storage -> ux_device_class_storage_buffer_usb] =
 8017cbc:	0025      	movs	r5, r4
 8017cbe:	2702      	movs	r7, #2
 8017cc0:	357a      	adds	r5, #122	@ 0x7a
 8017cc2:	782b      	ldrb	r3, [r5, #0]
 8017cc4:	18e2      	adds	r2, r4, r3
 8017cc6:	3278      	adds	r2, #120	@ 0x78
 8017cc8:	7017      	strb	r7, [r2, #0]
        if (storage -> ux_device_class_storage_disk_state ==
 8017cca:	780a      	ldrb	r2, [r1, #0]
 8017ccc:	2a04      	cmp	r2, #4
 8017cce:	d101      	bne.n	8017cd4 <_ux_device_class_storage_tasks_run+0x498>
            storage -> ux_device_class_storage_disk_state =
 8017cd0:	3a03      	subs	r2, #3
 8017cd2:	700a      	strb	r2, [r1, #0]
            storage -> ux_device_class_storage_data_length)
 8017cd4:	0022      	movs	r2, r4
 8017cd6:	3294      	adds	r2, #148	@ 0x94
        if (storage -> ux_device_class_storage_data_count >=
 8017cd8:	6812      	ldr	r2, [r2, #0]
 8017cda:	4282      	cmp	r2, r0
 8017cdc:	d910      	bls.n	8017d00 <_ux_device_class_storage_tasks_run+0x4c4>
                                !storage -> ux_device_class_storage_buffer_usb;
 8017cde:	425a      	negs	r2, r3
 8017ce0:	4153      	adcs	r3, r2
                ux_slave_transfer_request_data_pointer =
 8017ce2:	0022      	movs	r2, r4
                                !storage -> ux_device_class_storage_buffer_usb;
 8017ce4:	b2db      	uxtb	r3, r3
            storage -> ux_device_class_storage_buffer_usb =
 8017ce6:	702b      	strb	r3, [r5, #0]
                ux_slave_transfer_request_data_pointer =
 8017ce8:	3288      	adds	r2, #136	@ 0x88
 8017cea:	6811      	ldr	r1, [r2, #0]
                            storage -> ux_device_class_storage_buffer[
 8017cec:	001a      	movs	r2, r3
            if (storage -> ux_device_class_storage_buffer_state[
 8017cee:	18e3      	adds	r3, r4, r3
                            storage -> ux_device_class_storage_buffer[
 8017cf0:	321c      	adds	r2, #28
 8017cf2:	0092      	lsls	r2, r2, #2
            if (storage -> ux_device_class_storage_buffer_state[
 8017cf4:	3378      	adds	r3, #120	@ 0x78
                ux_slave_transfer_request_data_pointer =
 8017cf6:	5912      	ldr	r2, [r2, r4]
            if (storage -> ux_device_class_storage_buffer_state[
 8017cf8:	781b      	ldrb	r3, [r3, #0]
                ux_slave_transfer_request_data_pointer =
 8017cfa:	60ca      	str	r2, [r1, #12]
            if (storage -> ux_device_class_storage_buffer_state[
 8017cfc:	2b01      	cmp	r3, #1
 8017cfe:	d03f      	beq.n	8017d80 <_ux_device_class_storage_tasks_run+0x544>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT;
 8017d00:	2326      	movs	r3, #38	@ 0x26
 8017d02:	e03e      	b.n	8017d82 <_ux_device_class_storage_tasks_run+0x546>
            storage -> ux_device_class_storage_data_length)
 8017d04:	0023      	movs	r3, r4
 8017d06:	3394      	adds	r3, #148	@ 0x94
 8017d08:	9302      	str	r3, [sp, #8]
 8017d0a:	681b      	ldr	r3, [r3, #0]
        if (storage -> ux_device_class_storage_data_count >=
 8017d0c:	4283      	cmp	r3, r0
 8017d0e:	d81b      	bhi.n	8017d48 <_ux_device_class_storage_tasks_run+0x50c>
            if (storage -> ux_slave_class_storage_host_length >
 8017d10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017d12:	428b      	cmp	r3, r1
 8017d14:	d207      	bcs.n	8017d26 <_ux_device_class_storage_tasks_run+0x4ea>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017d16:	0010      	movs	r0, r2
 8017d18:	f7fe f928 	bl	8015f6c <_ux_device_stack_endpoint_stall>
                    storage -> ux_slave_class_storage_host_length -
 8017d1c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017d1e:	9a02      	ldr	r2, [sp, #8]
                storage -> ux_slave_class_storage_host_length -
 8017d20:	6812      	ldr	r2, [r2, #0]
 8017d22:	1a9b      	subs	r3, r3, r2
            storage -> ux_slave_class_storage_csw_residue =
 8017d24:	6523      	str	r3, [r4, #80]	@ 0x50
        if (storage -> ux_device_class_storage_device_length >
 8017d26:	0023      	movs	r3, r4
 8017d28:	338c      	adds	r3, #140	@ 0x8c
 8017d2a:	681a      	ldr	r2, [r3, #0]
 8017d2c:	682b      	ldr	r3, [r5, #0]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d901      	bls.n	8017d36 <_ux_device_class_storage_tasks_run+0x4fa>
            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8017d32:	2301      	movs	r3, #1
 8017d34:	6563      	str	r3, [r4, #84]	@ 0x54
                    storage -> ux_slave_class_storage_cbw_lun,
 8017d36:	0023      	movs	r3, r4
 8017d38:	3349      	adds	r3, #73	@ 0x49
        _ux_device_class_storage_csw_send(storage,
 8017d3a:	7819      	ldrb	r1, [r3, #0]
 8017d3c:	0020      	movs	r0, r4
 8017d3e:	2300      	movs	r3, #0
 8017d40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017d42:	f7ff fa53 	bl	80171ec <_ux_device_class_storage_csw_send>
 8017d46:	e01d      	b.n	8017d84 <_ux_device_class_storage_tasks_run+0x548>
            storage -> ux_device_class_storage_buffer_state[storage -> ux_device_class_storage_buffer_usb] =
 8017d48:	0025      	movs	r5, r4
 8017d4a:	2001      	movs	r0, #1
 8017d4c:	357a      	adds	r5, #122	@ 0x7a
 8017d4e:	782b      	ldrb	r3, [r5, #0]
 8017d50:	18e2      	adds	r2, r4, r3
 8017d52:	3278      	adds	r2, #120	@ 0x78
 8017d54:	7010      	strb	r0, [r2, #0]
            storage -> ux_device_class_storage_buffer_usb = !storage -> ux_device_class_storage_buffer_usb;
 8017d56:	425a      	negs	r2, r3
 8017d58:	4153      	adcs	r3, r2
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 8017d5a:	0022      	movs	r2, r4
            storage -> ux_device_class_storage_buffer_usb = !storage -> ux_device_class_storage_buffer_usb;
 8017d5c:	b2db      	uxtb	r3, r3
 8017d5e:	702b      	strb	r3, [r5, #0]
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 8017d60:	3288      	adds	r2, #136	@ 0x88
 8017d62:	6815      	ldr	r5, [r2, #0]
                    storage -> ux_device_class_storage_buffer[storage -> ux_device_class_storage_buffer_usb];
 8017d64:	001a      	movs	r2, r3
 8017d66:	321c      	adds	r2, #28
 8017d68:	0092      	lsls	r2, r2, #2
            storage -> ux_device_class_storage_transfer -> ux_slave_transfer_request_data_pointer =
 8017d6a:	5912      	ldr	r2, [r2, r4]
 8017d6c:	60ea      	str	r2, [r5, #12]
            if (storage -> ux_device_class_storage_disk_state == UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT)
 8017d6e:	780a      	ldrb	r2, [r1, #0]
 8017d70:	2a04      	cmp	r2, #4
 8017d72:	d100      	bne.n	8017d76 <_ux_device_class_storage_tasks_run+0x53a>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017d74:	7008      	strb	r0, [r1, #0]
            if (storage -> ux_device_class_storage_buffer_state[storage->ux_device_class_storage_buffer_usb] ==
 8017d76:	18e3      	adds	r3, r4, r3
 8017d78:	3378      	adds	r3, #120	@ 0x78
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	2b02      	cmp	r3, #2
 8017d7e:	d1bf      	bne.n	8017d00 <_ux_device_class_storage_tasks_run+0x4c4>
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_TRANS_START;
 8017d80:	2323      	movs	r3, #35	@ 0x23
                storage -> ux_device_class_storage_state = UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT;
 8017d82:	7033      	strb	r3, [r6, #0]
            return _ux_device_class_storage_data_next(storage);
 8017d84:	2704      	movs	r7, #4
 8017d86:	e571      	b.n	801786c <_ux_device_class_storage_tasks_run+0x30>
    if (storage -> ux_device_class_storage_data_count < storage -> ux_device_class_storage_data_length)
 8017d88:	0025      	movs	r5, r4
 8017d8a:	0021      	movs	r1, r4
 8017d8c:	3598      	adds	r5, #152	@ 0x98
 8017d8e:	3194      	adds	r1, #148	@ 0x94
 8017d90:	6828      	ldr	r0, [r5, #0]
 8017d92:	6809      	ldr	r1, [r1, #0]
 8017d94:	4288      	cmp	r0, r1
 8017d96:	d215      	bcs.n	8017dc4 <_ux_device_class_storage_tasks_run+0x588>
        if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_IN)
 8017d98:	0021      	movs	r1, r4
 8017d9a:	3148      	adds	r1, #72	@ 0x48
 8017d9c:	7809      	ldrb	r1, [r1, #0]
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017d9e:	0010      	movs	r0, r2
        if (storage -> ux_slave_class_storage_cbw_flags & UX_DEVICE_CLASS_STORAGE_CBW_FLAG_IN)
 8017da0:	297f      	cmp	r1, #127	@ 0x7f
 8017da2:	d800      	bhi.n	8017da6 <_ux_device_class_storage_tasks_run+0x56a>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_out);
 8017da4:	0018      	movs	r0, r3
 8017da6:	f7fe f8e1 	bl	8015f6c <_ux_device_stack_endpoint_stall>
            storage -> ux_slave_class_storage_host_length -
 8017daa:	682a      	ldr	r2, [r5, #0]
 8017dac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017dae:	1a9b      	subs	r3, r3, r2
        storage -> ux_slave_class_storage_csw_residue =
 8017db0:	6523      	str	r3, [r4, #80]	@ 0x50
            storage -> ux_slave_class_storage_cbw_lun,
 8017db2:	0023      	movs	r3, r4
 8017db4:	3349      	adds	r3, #73	@ 0x49
    _ux_device_class_storage_csw_send(storage,
 8017db6:	7819      	ldrb	r1, [r3, #0]
 8017db8:	0020      	movs	r0, r4
 8017dba:	2300      	movs	r3, #0
 8017dbc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017dbe:	f7ff fa15 	bl	80171ec <_ux_device_class_storage_csw_send>
            continue;
 8017dc2:	e541      	b.n	8017848 <_ux_device_class_storage_tasks_run+0xc>
    _ux_device_stack_endpoint_stall(storage -> ux_device_class_storage_ep_in);
 8017dc4:	0010      	movs	r0, r2
 8017dc6:	f7fe f8d1 	bl	8015f6c <_ux_device_stack_endpoint_stall>
}
 8017dca:	e7f2      	b.n	8017db2 <_ux_device_class_storage_tasks_run+0x576>

    if (storage -> ux_device_class_storage_cmd == UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE)
    {

        /* All things sync in one call.  */
        storage -> ux_device_class_storage_disk_n_lb = storage -> ux_device_class_storage_cmd_n_lb;
 8017dcc:	0023      	movs	r3, r4
 8017dce:	33a8      	adds	r3, #168	@ 0xa8
 8017dd0:	681e      	ldr	r6, [r3, #0]
    if (storage -> ux_device_class_storage_cmd == UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE)
 8017dd2:	3b2c      	subs	r3, #44	@ 0x2c
 8017dd4:	781b      	ldrb	r3, [r3, #0]
 8017dd6:	2b35      	cmp	r3, #53	@ 0x35
 8017dd8:	d00d      	beq.n	8017df6 <_ux_device_class_storage_tasks_run+0x5ba>
    }

    /* Read/write, split the operation by buffer sizes.  */

    /* Max blocks for one buffer.  */
    block_size = storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017dda:	0023      	movs	r3, r4
 8017ddc:	3349      	adds	r3, #73	@ 0x49
 8017dde:	781a      	ldrb	r2, [r3, #0]
 8017de0:	2338      	movs	r3, #56	@ 0x38
                                                        ux_slave_class_storage_media_block_length;
    if (block_size == 0)
        UX_ASSERT(UX_FALSE);
    max_n_blocks = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE / block_size;
 8017de2:	2080      	movs	r0, #128	@ 0x80
    block_size = storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017de4:	4353      	muls	r3, r2
 8017de6:	18e3      	adds	r3, r4, r3
    max_n_blocks = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE / block_size;
 8017de8:	6919      	ldr	r1, [r3, #16]
 8017dea:	0140      	lsls	r0, r0, #5
 8017dec:	f7e8 f9bc 	bl	8000168 <__udivsi3>

    /* Prepare next disk read.  */
    if (storage -> ux_device_class_storage_cmd_n_lb > max_n_blocks)
 8017df0:	4286      	cmp	r6, r0
 8017df2:	d900      	bls.n	8017df6 <_ux_device_class_storage_tasks_run+0x5ba>
 8017df4:	0006      	movs	r6, r0
        storage -> ux_device_class_storage_disk_n_lb = storage -> ux_device_class_storage_cmd_n_lb;
 8017df6:	0023      	movs	r3, r4
 8017df8:	33ac      	adds	r3, #172	@ 0xac
 8017dfa:	601e      	str	r6, [r3, #0]
            storage -> ux_device_class_storage_disk_state =
 8017dfc:	2302      	movs	r3, #2
 8017dfe:	702b      	strb	r3, [r5, #0]
// ux_slave_class_storage_media_read, write and others, so do a ugly hack
static inline UINT _ux_device_class_storage_disk_wait(UX_SLAVE_CLASS_STORAGE *storage)
{
    UINT status = UX_SUCCESS;

    switch (storage -> ux_device_class_storage_cmd)
 8017e00:	0023      	movs	r3, r4
 8017e02:	337c      	adds	r3, #124	@ 0x7c
 8017e04:	781b      	ldrb	r3, [r3, #0]
 8017e06:	2b35      	cmp	r3, #53	@ 0x35
 8017e08:	d03e      	beq.n	8017e88 <_ux_device_class_storage_tasks_run+0x64c>
 8017e0a:	d806      	bhi.n	8017e1a <_ux_device_class_storage_tasks_run+0x5de>
 8017e0c:	2b28      	cmp	r3, #40	@ 0x28
 8017e0e:	d01c      	beq.n	8017e4a <_ux_device_class_storage_tasks_run+0x60e>
 8017e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e12:	d006      	beq.n	8017e22 <_ux_device_class_storage_tasks_run+0x5e6>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_NEXT;
 8017e14:	2303      	movs	r3, #3
                    0 /* Not used.  */);
        }
        return;

    default:
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017e16:	702b      	strb	r3, [r5, #0]
        break;
 8017e18:	e033      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
    switch (storage -> ux_device_class_storage_cmd)
 8017e1a:	2ba8      	cmp	r3, #168	@ 0xa8
 8017e1c:	d015      	beq.n	8017e4a <_ux_device_class_storage_tasks_run+0x60e>
 8017e1e:	2baa      	cmp	r3, #170	@ 0xaa
 8017e20:	d1f8      	bne.n	8017e14 <_ux_device_class_storage_tasks_run+0x5d8>
        status= ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017e22:	0023      	movs	r3, r4
 8017e24:	3349      	adds	r3, #73	@ 0x49
 8017e26:	7819      	ldrb	r1, [r3, #0]
                                storage -> ux_device_class_storage_buffer_disk],
 8017e28:	3332      	adds	r3, #50	@ 0x32
 8017e2a:	781a      	ldrb	r2, [r3, #0]
        status= ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017e2c:	0026      	movs	r6, r4
 8017e2e:	2338      	movs	r3, #56	@ 0x38
 8017e30:	0020      	movs	r0, r4
 8017e32:	36b0      	adds	r6, #176	@ 0xb0
 8017e34:	434b      	muls	r3, r1
 8017e36:	9601      	str	r6, [sp, #4]
 8017e38:	3e0c      	subs	r6, #12
 8017e3a:	6836      	ldr	r6, [r6, #0]
 8017e3c:	321c      	adds	r2, #28
 8017e3e:	18e3      	adds	r3, r4, r3
 8017e40:	9600      	str	r6, [sp, #0]
 8017e42:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8017e44:	30ac      	adds	r0, #172	@ 0xac
 8017e46:	0092      	lsls	r2, r2, #2
 8017e48:	e012      	b.n	8017e70 <_ux_device_class_storage_tasks_run+0x634>
        status = (storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017e4a:	0023      	movs	r3, r4
 8017e4c:	3349      	adds	r3, #73	@ 0x49
 8017e4e:	7819      	ldrb	r1, [r3, #0]
                                storage -> ux_device_class_storage_buffer_disk],
 8017e50:	3332      	adds	r3, #50	@ 0x32
 8017e52:	781a      	ldrb	r2, [r3, #0]
        status = (storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017e54:	0026      	movs	r6, r4
 8017e56:	2338      	movs	r3, #56	@ 0x38
 8017e58:	0020      	movs	r0, r4
 8017e5a:	36b0      	adds	r6, #176	@ 0xb0
 8017e5c:	434b      	muls	r3, r1
 8017e5e:	9601      	str	r6, [sp, #4]
 8017e60:	3e0c      	subs	r6, #12
 8017e62:	6836      	ldr	r6, [r6, #0]
 8017e64:	18e3      	adds	r3, r4, r3
 8017e66:	9600      	str	r6, [sp, #0]
 8017e68:	321c      	adds	r2, #28
 8017e6a:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8017e6c:	30ac      	adds	r0, #172	@ 0xac
 8017e6e:	0092      	lsls	r2, r2, #2
 8017e70:	6803      	ldr	r3, [r0, #0]
 8017e72:	5912      	ldr	r2, [r2, r4]
 8017e74:	0020      	movs	r0, r4
 8017e76:	47b0      	blx	r6
        return (status == UX_SUCCESS) ? UX_STATE_NEXT : UX_STATE_ERROR;
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d0cb      	beq.n	8017e14 <_ux_device_class_storage_tasks_run+0x5d8>
                storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017e7c:	239c      	movs	r3, #156	@ 0x9c
 8017e7e:	019b      	lsls	r3, r3, #6
 8017e80:	802b      	strh	r3, [r5, #0]
}
 8017e82:	0038      	movs	r0, r7
 8017e84:	b005      	add	sp, #20
 8017e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = ( storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017e88:	0023      	movs	r3, r4
 8017e8a:	3349      	adds	r3, #73	@ 0x49
 8017e8c:	7819      	ldrb	r1, [r3, #0]
 8017e8e:	2338      	movs	r3, #56	@ 0x38
 8017e90:	0026      	movs	r6, r4
 8017e92:	0020      	movs	r0, r4
 8017e94:	0022      	movs	r2, r4
 8017e96:	434b      	muls	r3, r1
 8017e98:	36b0      	adds	r6, #176	@ 0xb0
 8017e9a:	9600      	str	r6, [sp, #0]
 8017e9c:	18e3      	adds	r3, r4, r3
 8017e9e:	30a4      	adds	r0, #164	@ 0xa4
 8017ea0:	32ac      	adds	r2, #172	@ 0xac
 8017ea2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8017ea4:	6812      	ldr	r2, [r2, #0]
 8017ea6:	6803      	ldr	r3, [r0, #0]
 8017ea8:	0020      	movs	r0, r4
 8017eaa:	47b0      	blx	r6
 8017eac:	e7e4      	b.n	8017e78 <_ux_device_class_storage_tasks_run+0x63c>
    storage -> ux_device_class_storage_cmd_lba += storage -> ux_device_class_storage_disk_n_lb;
 8017eae:	0023      	movs	r3, r4
 8017eb0:	0021      	movs	r1, r4
 8017eb2:	33ac      	adds	r3, #172	@ 0xac
 8017eb4:	31a4      	adds	r1, #164	@ 0xa4
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	680b      	ldr	r3, [r1, #0]
 8017eba:	189b      	adds	r3, r3, r2
 8017ebc:	600b      	str	r3, [r1, #0]
    storage -> ux_device_class_storage_cmd_n_lb -= storage -> ux_device_class_storage_disk_n_lb;
 8017ebe:	0023      	movs	r3, r4
 8017ec0:	33a8      	adds	r3, #168	@ 0xa8
 8017ec2:	6818      	ldr	r0, [r3, #0]
    switch (storage -> ux_device_class_storage_cmd)
 8017ec4:	3b2c      	subs	r3, #44	@ 0x2c
    storage -> ux_device_class_storage_cmd_n_lb -= storage -> ux_device_class_storage_disk_n_lb;
 8017ec6:	1a80      	subs	r0, r0, r2
 8017ec8:	62d8      	str	r0, [r3, #44]	@ 0x2c
    switch (storage -> ux_device_class_storage_cmd)
 8017eca:	781a      	ldrb	r2, [r3, #0]
 8017ecc:	2a35      	cmp	r2, #53	@ 0x35
 8017ece:	d064      	beq.n	8017f9a <_ux_device_class_storage_tasks_run+0x75e>
 8017ed0:	d805      	bhi.n	8017ede <_ux_device_class_storage_tasks_run+0x6a2>
 8017ed2:	2a28      	cmp	r2, #40	@ 0x28
 8017ed4:	d01f      	beq.n	8017f16 <_ux_device_class_storage_tasks_run+0x6da>
 8017ed6:	2a2a      	cmp	r2, #42	@ 0x2a
 8017ed8:	d005      	beq.n	8017ee6 <_ux_device_class_storage_tasks_run+0x6aa>
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017eda:	2300      	movs	r3, #0
 8017edc:	e79b      	b.n	8017e16 <_ux_device_class_storage_tasks_run+0x5da>
    switch (storage -> ux_device_class_storage_cmd)
 8017ede:	2aa8      	cmp	r2, #168	@ 0xa8
 8017ee0:	d019      	beq.n	8017f16 <_ux_device_class_storage_tasks_run+0x6da>
 8017ee2:	2aaa      	cmp	r2, #170	@ 0xaa
 8017ee4:	d1f9      	bne.n	8017eda <_ux_device_class_storage_tasks_run+0x69e>
static inline VOID _ux_device_class_storage_disk_write_next(UX_SLAVE_CLASS_STORAGE *storage)
{

    /* Update buffer state : empty.  */
    storage -> ux_device_class_storage_buffer_state[
            storage -> ux_device_class_storage_buffer_disk] =
 8017ee6:	0021      	movs	r1, r4
 8017ee8:	317b      	adds	r1, #123	@ 0x7b
 8017eea:	780b      	ldrb	r3, [r1, #0]
 8017eec:	18e2      	adds	r2, r4, r3
 8017eee:	3278      	adds	r2, #120	@ 0x78
 8017ef0:	4694      	mov	ip, r2
 8017ef2:	9302      	str	r3, [sp, #8]
 8017ef4:	2201      	movs	r2, #1
 8017ef6:	4663      	mov	r3, ip
 8017ef8:	701a      	strb	r2, [r3, #0]
                                    UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;

    /* Check if all disk operation is done.  */
    if (storage -> ux_device_class_storage_cmd_n_lb == 0)
 8017efa:	2800      	cmp	r0, #0
 8017efc:	d132      	bne.n	8017f64 <_ux_device_class_storage_tasks_run+0x728>
        /* Disk is idle now.  */
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;

        /* Issue CSW.  */
        _ux_device_class_storage_csw_send(storage,
                    storage -> ux_slave_class_storage_cbw_lun,
 8017efe:	0023      	movs	r3, r4
        _ux_device_class_storage_csw_send(storage,
 8017f00:	0022      	movs	r2, r4
                    storage -> ux_slave_class_storage_cbw_lun,
 8017f02:	3349      	adds	r3, #73	@ 0x49
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017f04:	7028      	strb	r0, [r5, #0]
        _ux_device_class_storage_csw_send(storage,
 8017f06:	7819      	ldrb	r1, [r3, #0]
 8017f08:	0003      	movs	r3, r0
 8017f0a:	3208      	adds	r2, #8
            _ux_device_class_storage_csw_send(storage,
 8017f0c:	0020      	movs	r0, r4
 8017f0e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8017f10:	f7ff f96c 	bl	80171ec <_ux_device_class_storage_csw_send>
 8017f14:	e7b5      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
        storage -> ux_device_class_storage_buffer_disk] =
 8017f16:	0021      	movs	r1, r4
 8017f18:	317b      	adds	r1, #123	@ 0x7b
 8017f1a:	780b      	ldrb	r3, [r1, #0]
 8017f1c:	18e2      	adds	r2, r4, r3
 8017f1e:	3278      	adds	r2, #120	@ 0x78
 8017f20:	9302      	str	r3, [sp, #8]
 8017f22:	0013      	movs	r3, r2
 8017f24:	2202      	movs	r2, #2
 8017f26:	701a      	strb	r2, [r3, #0]
    if (storage -> ux_device_class_storage_cmd_n_lb == 0)
 8017f28:	2200      	movs	r2, #0
 8017f2a:	4290      	cmp	r0, r2
 8017f2c:	d00a      	beq.n	8017f44 <_ux_device_class_storage_tasks_run+0x708>
                            !storage -> ux_device_class_storage_buffer_disk;
 8017f2e:	9b02      	ldr	r3, [sp, #8]
 8017f30:	425a      	negs	r2, r3
 8017f32:	4153      	adcs	r3, r2
 8017f34:	b2db      	uxtb	r3, r3
        storage -> ux_device_class_storage_buffer_disk =
 8017f36:	700b      	strb	r3, [r1, #0]
            storage -> ux_device_class_storage_buffer_state[
 8017f38:	18e3      	adds	r3, r4, r3
 8017f3a:	3378      	adds	r3, #120	@ 0x78
 8017f3c:	781a      	ldrb	r2, [r3, #0]
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY ==
 8017f3e:	2a01      	cmp	r2, #1
 8017f40:	d000      	beq.n	8017f44 <_ux_device_class_storage_tasks_run+0x708>
 8017f42:	2204      	movs	r2, #4
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017f44:	702a      	strb	r2, [r5, #0]
    if (storage -> ux_device_class_storage_state ==
 8017f46:	7833      	ldrb	r3, [r6, #0]
 8017f48:	2b26      	cmp	r3, #38	@ 0x26
 8017f4a:	d19a      	bne.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
            storage -> ux_device_class_storage_buffer_usb])
 8017f4c:	0023      	movs	r3, r4
 8017f4e:	337a      	adds	r3, #122	@ 0x7a
 8017f50:	781b      	ldrb	r3, [r3, #0]
        storage -> ux_device_class_storage_buffer_state[
 8017f52:	18e3      	adds	r3, r4, r3
 8017f54:	3378      	adds	r3, #120	@ 0x78
            UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
 8017f56:	781b      	ldrb	r3, [r3, #0]
 8017f58:	2b02      	cmp	r3, #2
 8017f5a:	d000      	beq.n	8017f5e <_ux_device_class_storage_tasks_run+0x722>
 8017f5c:	e791      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
        storage -> ux_device_class_storage_state =
 8017f5e:	2323      	movs	r3, #35	@ 0x23
 8017f60:	7033      	strb	r3, [r6, #0]
 8017f62:	e78e      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
    else
    {

        /* Update buffer index.  */
        storage -> ux_device_class_storage_buffer_disk =
                             !storage -> ux_device_class_storage_buffer_disk;
 8017f64:	9b02      	ldr	r3, [sp, #8]
 8017f66:	4258      	negs	r0, r3
 8017f68:	4143      	adcs	r3, r0
 8017f6a:	b2db      	uxtb	r3, r3
        storage -> ux_device_class_storage_buffer_disk =
 8017f6c:	700b      	strb	r3, [r1, #0]

        /* If buffer is full, start next write.  */
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
            storage -> ux_device_class_storage_buffer_state[
 8017f6e:	18e3      	adds	r3, r4, r3
 8017f70:	3378      	adds	r3, #120	@ 0x78
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
 8017f72:	7819      	ldrb	r1, [r3, #0]
        }
        else
        {

            /* Wait until buffer filled by USB.  */
            storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT;
 8017f74:	2304      	movs	r3, #4
        if (UX_DEVICE_CLASS_STORAGE_BUFFER_FULL ==
 8017f76:	2902      	cmp	r1, #2
 8017f78:	d100      	bne.n	8017f7c <_ux_device_class_storage_tasks_run+0x740>
            storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_OP_START;
 8017f7a:	0013      	movs	r3, r2
 8017f7c:	702b      	strb	r3, [r5, #0]
        }

        /* Start USB transfer.  */
        if (storage -> ux_device_class_storage_state ==
 8017f7e:	7833      	ldrb	r3, [r6, #0]
 8017f80:	2b26      	cmp	r3, #38	@ 0x26
 8017f82:	d000      	beq.n	8017f86 <_ux_device_class_storage_tasks_run+0x74a>
 8017f84:	e77d      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
                UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
            UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY ==
            storage -> ux_device_class_storage_buffer_state[
                storage -> ux_device_class_storage_buffer_usb])
 8017f86:	0023      	movs	r3, r4
 8017f88:	337a      	adds	r3, #122	@ 0x7a
 8017f8a:	781b      	ldrb	r3, [r3, #0]
            storage -> ux_device_class_storage_buffer_state[
 8017f8c:	18e3      	adds	r3, r4, r3
 8017f8e:	3378      	adds	r3, #120	@ 0x78
                UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT &&
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d000      	beq.n	8017f98 <_ux_device_class_storage_tasks_run+0x75c>
 8017f96:	e774      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
 8017f98:	e7e1      	b.n	8017f5e <_ux_device_class_storage_tasks_run+0x722>
        storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_IDLE;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	702b      	strb	r3, [r5, #0]
        if (storage -> ux_device_class_storage_state == UX_DEVICE_CLASS_STORAGE_STATE_DISK_WAIT)
 8017f9e:	7832      	ldrb	r2, [r6, #0]
 8017fa0:	2a26      	cmp	r2, #38	@ 0x26
 8017fa2:	d000      	beq.n	8017fa6 <_ux_device_class_storage_tasks_run+0x76a>
 8017fa4:	e76d      	b.n	8017e82 <_ux_device_class_storage_tasks_run+0x646>
                    storage -> ux_slave_class_storage_cbw_lun,
 8017fa6:	0021      	movs	r1, r4
            _ux_device_class_storage_csw_send(storage,
 8017fa8:	0022      	movs	r2, r4
                    storage -> ux_slave_class_storage_cbw_lun,
 8017faa:	3149      	adds	r1, #73	@ 0x49
            _ux_device_class_storage_csw_send(storage,
 8017fac:	7809      	ldrb	r1, [r1, #0]
 8017fae:	3208      	adds	r2, #8
 8017fb0:	e7ac      	b.n	8017f0c <_ux_device_class_storage_tasks_run+0x6d0>
    }
}
static inline VOID _ux_device_class_storage_disk_error(UX_SLAVE_CLASS_STORAGE *storage)
{
    /* Abort disk operation: read or write with NULL!  */
    switch (storage -> ux_device_class_storage_cmd)
 8017fb2:	0023      	movs	r3, r4
 8017fb4:	337c      	adds	r3, #124	@ 0x7c
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	2ba8      	cmp	r3, #168	@ 0xa8
 8017fba:	d012      	beq.n	8017fe2 <_ux_device_class_storage_tasks_run+0x7a6>
 8017fbc:	d80e      	bhi.n	8017fdc <_ux_device_class_storage_tasks_run+0x7a0>
 8017fbe:	2b28      	cmp	r3, #40	@ 0x28
 8017fc0:	d00f      	beq.n	8017fe2 <_ux_device_class_storage_tasks_run+0x7a6>
 8017fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fc4:	d189      	bne.n	8017eda <_ux_device_class_storage_tasks_run+0x69e>
                ux_slave_class_storage_media_read(storage,
                        storage -> ux_slave_class_storage_cbw_lun, UX_NULL, 0, 0, UX_NULL);
        break;
    case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16:
    case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32:
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017fc6:	0023      	movs	r3, r4
 8017fc8:	2038      	movs	r0, #56	@ 0x38
 8017fca:	2200      	movs	r2, #0
 8017fcc:	3349      	adds	r3, #73	@ 0x49
 8017fce:	7819      	ldrb	r1, [r3, #0]
 8017fd0:	9201      	str	r2, [sp, #4]
 8017fd2:	4348      	muls	r0, r1
 8017fd4:	9200      	str	r2, [sp, #0]
 8017fd6:	1820      	adds	r0, r4, r0
 8017fd8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8017fda:	e00c      	b.n	8017ff6 <_ux_device_class_storage_tasks_run+0x7ba>
    switch (storage -> ux_device_class_storage_cmd)
 8017fdc:	2baa      	cmp	r3, #170	@ 0xaa
 8017fde:	d0f2      	beq.n	8017fc6 <_ux_device_class_storage_tasks_run+0x78a>
 8017fe0:	e77b      	b.n	8017eda <_ux_device_class_storage_tasks_run+0x69e>
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017fe2:	0023      	movs	r3, r4
 8017fe4:	2038      	movs	r0, #56	@ 0x38
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	3349      	adds	r3, #73	@ 0x49
 8017fea:	7819      	ldrb	r1, [r3, #0]
 8017fec:	9201      	str	r2, [sp, #4]
 8017fee:	4348      	muls	r0, r1
 8017ff0:	9200      	str	r2, [sp, #0]
 8017ff2:	1820      	adds	r0, r4, r0
 8017ff4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
        storage -> ux_slave_class_storage_lun[storage -> ux_slave_class_storage_cbw_lun].
 8017ff6:	0013      	movs	r3, r2
 8017ff8:	0020      	movs	r0, r4
 8017ffa:	47b0      	blx	r6
                ux_slave_class_storage_media_write(storage,
                        storage -> ux_slave_class_storage_cbw_lun, UX_NULL, 0, 0, UX_NULL);
        break;
 8017ffc:	e76d      	b.n	8017eda <_ux_device_class_storage_tasks_run+0x69e>
 8017ffe:	46c0      	nop			@ (mov r8, r8)

08018000 <_ux_device_class_storage_test_ready>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_TEST_READY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8018000:	2338      	movs	r3, #56	@ 0x38
{
 8018002:	b573      	push	{r0, r1, r4, r5, r6, lr}
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8018004:	001d      	movs	r5, r3
 8018006:	1c4a      	adds	r2, r1, #1
 8018008:	434d      	muls	r5, r1
 801800a:	4353      	muls	r3, r2
 801800c:	1945      	adds	r5, r0, r5
 801800e:	18c3      	adds	r3, r0, r3
 8018010:	685e      	ldr	r6, [r3, #4]
 8018012:	6a2a      	ldr	r2, [r5, #32]
 8018014:	ab01      	add	r3, sp, #4
{
 8018016:	0004      	movs	r4, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8018018:	47b0      	blx	r6
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Set the sense/code/qualifier codes for the REQUEST_SENSE command.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801801a:	9b01      	ldr	r3, [sp, #4]
 801801c:	626b      	str	r3, [r5, #36]	@ 0x24

    /* Return CSW with success/error.  */
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
                            UX_SLAVE_CLASS_STORAGE_CSW_PASSED : UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801801e:	1e43      	subs	r3, r0, #1
 8018020:	4198      	sbcs	r0, r3
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
 8018022:	6560      	str	r0, [r4, #84]	@ 0x54
    }
#endif

    /* Return completion status.  */
    return(status);
}
 8018024:	2000      	movs	r0, #0
 8018026:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08018028 <_ux_device_class_storage_uninitialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 8018028:	6a03      	ldr	r3, [r0, #32]
{
 801802a:	b510      	push	{r4, lr}
    storage = (UX_SLAVE_CLASS_STORAGE *) class_ptr -> ux_slave_class_instance;
 801802c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    
    /* Sanity check.  */
    if (storage != UX_NULL)
 801802e:	2c00      	cmp	r4, #0
 8018030:	d005      	beq.n	801803e <_ux_device_class_storage_uninitialize+0x16>
        /* Remove the thread used by STORAGE.  */
        _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
#endif

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1
        _ux_utility_memory_free(storage -> ux_device_class_storage_endpoint_buffer);
 8018032:	6860      	ldr	r0, [r4, #4]
 8018034:	f7fe fc3c 	bl	80168b0 <_ux_utility_memory_free>
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(storage);
 8018038:	0020      	movs	r0, r4
 801803a:	f7fe fc39 	bl	80168b0 <_ux_utility_memory_free>
    }
    
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 801803e:	2000      	movs	r0, #0
 8018040:	bd10      	pop	{r4, pc}

08018042 <_ux_device_class_storage_verify>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_verify(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                      UX_SLAVE_ENDPOINT *endpoint_in,
                                      UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8018042:	0003      	movs	r3, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_VERIFY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8018044:	2000      	movs	r0, #0
 8018046:	6558      	str	r0, [r3, #84]	@ 0x54

    /* Return success!  */
    return(UX_SUCCESS);
}
 8018048:	4770      	bx	lr
	...

0801804c <_ux_device_class_storage_write>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_write(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                    UX_SLAVE_ENDPOINT *endpoint_in,
                                    UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 801804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801804e:	b085      	sub	sp, #20
 8018050:	9301      	str	r3, [sp, #4]
 8018052:	ab0a      	add	r3, sp, #40	@ 0x28
 8018054:	cb20      	ldmia	r3!, {r5}
 8018056:	0004      	movs	r4, r0


    UX_PARAMETER_NOT_USED(endpoint_in);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 8018058:	1ca8      	adds	r0, r5, #2
{
 801805a:	000e      	movs	r6, r1
 801805c:	781f      	ldrb	r7, [r3, #0]
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 801805e:	f7fe fb09 	bl	8016674 <_ux_utility_long_get_big_endian>
 8018062:	9000      	str	r0, [sp, #0]
    
    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.   */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16)
 8018064:	2f2a      	cmp	r7, #42	@ 0x2a
 8018066:	d120      	bne.n	80180aa <_ux_device_class_storage_write+0x5e>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);
 8018068:	1de8      	adds	r0, r5, #7
 801806a:	f7fe fc55 	bl	8016918 <_ux_utility_short_get_big_endian>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 801806e:	2338      	movs	r3, #56	@ 0x38
 8018070:	1c72      	adds	r2, r6, #1
 8018072:	001d      	movs	r5, r3
 8018074:	4353      	muls	r3, r2
 8018076:	18e3      	adds	r3, r4, r3
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	4375      	muls	r5, r6
 801807c:	469c      	mov	ip, r3
 801807e:	1965      	adds	r5, r4, r5
 8018080:	0031      	movs	r1, r6
 8018082:	ab03      	add	r3, sp, #12
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 8018084:	0007      	movs	r7, r0
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8018086:	4666      	mov	r6, ip
 8018088:	0020      	movs	r0, r4
 801808a:	6a2a      	ldr	r2, [r5, #32]
 801808c:	47b0      	blx	r6
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801808e:	9b03      	ldr	r3, [sp, #12]
 8018090:	626b      	str	r3, [r5, #36]	@ 0x24

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018092:	2301      	movs	r3, #1
 8018094:	6563      	str	r3, [r4, #84]	@ 0x54

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8018096:	2800      	cmp	r0, #0
 8018098:	d104      	bne.n	80180a4 <_ux_device_class_storage_write+0x58>
        /* We are done here.  */
        return(UX_ERROR);
    }

    /* Check Read Only flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 801809a:	69eb      	ldr	r3, [r5, #28]
 801809c:	2b01      	cmp	r3, #1
 801809e:	d108      	bne.n	80180b2 <_ux_device_class_storage_write+0x66>
    {

        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80180a0:	4b12      	ldr	r3, [pc, #72]	@ (80180ec <_ux_device_class_storage_write+0xa0>)
 80180a2:	626b      	str	r3, [r5, #36]	@ 0x24
        return(UX_ERROR);
 80180a4:	20ff      	movs	r0, #255	@ 0xff
    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;

    /* Return completion status.  */
    return(status);
}
 80180a6:	b005      	add	sp, #20
 80180a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 80180aa:	1da8      	adds	r0, r5, #6
 80180ac:	f7fe fae2 	bl	8016674 <_ux_utility_long_get_big_endian>
 80180b0:	e7dd      	b.n	801806e <_ux_device_class_storage_write+0x22>
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_WRITE;
 80180b2:	0022      	movs	r2, r4
 80180b4:	2104      	movs	r1, #4
 80180b6:	327d      	adds	r2, #125	@ 0x7d
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80180b8:	692b      	ldr	r3, [r5, #16]
    storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_WRITE;
 80180ba:	7011      	strb	r1, [r2, #0]
    storage -> ux_device_class_storage_disk_state = UX_DEVICE_CLASS_STORAGE_DISK_USB_WAIT;
 80180bc:	490c      	ldr	r1, [pc, #48]	@ (80180f0 <_ux_device_class_storage_write+0xa4>)
 80180be:	3201      	adds	r2, #1
 80180c0:	8011      	strh	r1, [r2, #0]
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 80180c2:	2202      	movs	r2, #2
    storage -> ux_device_class_storage_transfer = transfer_request;
 80180c4:	0021      	movs	r1, r4
    storage -> ux_device_class_storage_buffer_state[0] = UX_DEVICE_CLASS_STORAGE_BUFFER_EMPTY;
 80180c6:	32ff      	adds	r2, #255	@ 0xff
 80180c8:	67a2      	str	r2, [r4, #120]	@ 0x78
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80180ca:	9a01      	ldr	r2, [sp, #4]
    storage -> ux_device_class_storage_transfer = transfer_request;
 80180cc:	3188      	adds	r1, #136	@ 0x88
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 80180ce:	3220      	adds	r2, #32
    storage -> ux_device_class_storage_transfer = transfer_request;
 80180d0:	600a      	str	r2, [r1, #0]
    storage -> ux_device_class_storage_device_length = total_length;
 80180d2:	0022      	movs	r2, r4
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80180d4:	437b      	muls	r3, r7
    storage -> ux_device_class_storage_device_length = total_length;
 80180d6:	328c      	adds	r2, #140	@ 0x8c
 80180d8:	6013      	str	r3, [r2, #0]
    storage -> ux_device_class_storage_data_length = total_length;
 80180da:	6093      	str	r3, [r2, #8]
    storage -> ux_device_class_storage_data_count = 0;
 80180dc:	0023      	movs	r3, r4
    storage -> ux_device_class_storage_cmd_lba = lba;
 80180de:	9a00      	ldr	r2, [sp, #0]
    storage -> ux_device_class_storage_data_count = 0;
 80180e0:	3398      	adds	r3, #152	@ 0x98
 80180e2:	6018      	str	r0, [r3, #0]
    storage -> ux_device_class_storage_cmd_lba = lba;
 80180e4:	60da      	str	r2, [r3, #12]
    storage -> ux_device_class_storage_cmd_n_lb = total_number_blocks;
 80180e6:	611f      	str	r7, [r3, #16]
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80180e8:	6560      	str	r0, [r4, #84]	@ 0x54
    return(status);
 80180ea:	e7dc      	b.n	80180a6 <_ux_device_class_storage_write+0x5a>
 80180ec:	00002707 	.word	0x00002707
 80180f0:	00002304 	.word	0x00002304

080180f4 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 80180f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180f6:	0004      	movs	r4, r0

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80180f8:	6847      	ldr	r7, [r0, #4]

    UX_DISABLE
 80180fa:	f000 fd07 	bl	8018b0c <_ux_utility_interrupt_disable>

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 80180fe:	68a3      	ldr	r3, [r4, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 8018100:	2280      	movs	r2, #128	@ 0x80
 8018102:	0019      	movs	r1, r3
 8018104:	00d2      	lsls	r2, r2, #3
 8018106:	4011      	ands	r1, r2
 8018108:	9101      	str	r1, [sp, #4]
 801810a:	4213      	tst	r3, r2
 801810c:	d002      	beq.n	8018114 <_ux_dcd_stm32_setup_isr_pending+0x20>

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
    if (ed_status == 0)
    {
        UX_RESTORE
 801810e:	f000 fd01 	bl	8018b14 <_ux_utility_interrupt_restore>
        break;
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
}
 8018112:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 8018114:	26c0      	movs	r6, #192	@ 0xc0
 8018116:	0019      	movs	r1, r3
 8018118:	00b6      	lsls	r6, r6, #2
 801811a:	4031      	ands	r1, r6
 801811c:	9100      	str	r1, [sp, #0]
    if (ed_status == 0)
 801811e:	4233      	tst	r3, r6
 8018120:	d0f5      	beq.n	801810e <_ux_dcd_stm32_setup_isr_pending+0x1a>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 8018122:	491b      	ldr	r1, [pc, #108]	@ (8018190 <_ux_dcd_stm32_setup_isr_pending+0x9c>)
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8018124:	003d      	movs	r5, r7
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 8018126:	400b      	ands	r3, r1
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8018128:	431a      	orrs	r2, r3
 801812a:	60a2      	str	r2, [r4, #8]
    UX_RESTORE
 801812c:	f000 fcf2 	bl	8018b14 <_ux_utility_interrupt_restore>
    switch(ed_status)
 8018130:	2280      	movs	r2, #128	@ 0x80
 8018132:	9900      	ldr	r1, [sp, #0]
 8018134:	2380      	movs	r3, #128	@ 0x80
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8018136:	3520      	adds	r5, #32
    switch(ed_status)
 8018138:	0052      	lsls	r2, r2, #1
 801813a:	4291      	cmp	r1, r2
 801813c:	d00c      	beq.n	8018158 <_ux_dcd_stm32_setup_isr_pending+0x64>
 801813e:	0022      	movs	r2, r4
 8018140:	3294      	adds	r2, #148	@ 0x94
 8018142:	42b1      	cmp	r1, r6
 8018144:	d013      	beq.n	801816e <_ux_dcd_stm32_setup_isr_pending+0x7a>
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 8018146:	6816      	ldr	r6, [r2, #0]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018148:	0028      	movs	r0, r5
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801814a:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801814c:	f7fd fd0e 	bl	8015b6c <_ux_device_stack_control_request_process>
 8018150:	1e01      	subs	r1, r0, #0
 8018152:	d107      	bne.n	8018164 <_ux_dcd_stm32_setup_isr_pending+0x70>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8018154:	2304      	movs	r3, #4
 8018156:	e014      	b.n	8018182 <_ux_dcd_stm32_setup_isr_pending+0x8e>
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8018158:	73a3      	strb	r3, [r4, #14]
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 801815a:	2301      	movs	r3, #1
    _ux_device_stack_control_request_process(transfer_request);
 801815c:	0028      	movs	r0, r5
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 801815e:	7323      	strb	r3, [r4, #12]
    _ux_device_stack_control_request_process(transfer_request);
 8018160:	f7fd fd04 	bl	8015b6c <_ux_device_stack_control_request_process>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8018164:	68a3      	ldr	r3, [r4, #8]
 8018166:	4a0b      	ldr	r2, [pc, #44]	@ (8018194 <_ux_dcd_stm32_setup_isr_pending+0xa0>)
 8018168:	4013      	ands	r3, r2
 801816a:	60a3      	str	r3, [r4, #8]
 801816c:	e7d1      	b.n	8018112 <_ux_dcd_stm32_setup_isr_pending+0x1e>
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 801816e:	6816      	ldr	r6, [r2, #0]
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018170:	9a01      	ldr	r2, [sp, #4]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018172:	0028      	movs	r0, r5
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018174:	647a      	str	r2, [r7, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8018176:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8018178:	f7fd fcf8 	bl	8015b6c <_ux_device_stack_control_request_process>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 801817c:	2303      	movs	r3, #3
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801817e:	1e01      	subs	r1, r0, #0
 8018180:	d1f0      	bne.n	8018164 <_ux_dcd_stm32_setup_isr_pending+0x70>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8018182:	7323      	strb	r3, [r4, #12]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8018184:	000a      	movs	r2, r1
 8018186:	000b      	movs	r3, r1
 8018188:	0030      	movs	r0, r6
 801818a:	f7f8 f984 	bl	8010496 <HAL_PCD_EP_Transmit>
 801818e:	e7e9      	b.n	8018164 <_ux_dcd_stm32_setup_isr_pending+0x70>
 8018190:	fffffcff 	.word	0xfffffcff
 8018194:	fffffbff 	.word	0xfffffbff

08018198 <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018198:	4b27      	ldr	r3, [pc, #156]	@ (8018238 <HAL_PCD_SetupStageCallback+0xa0>)
{
 801819a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801819c:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 801819e:	2208      	movs	r2, #8
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80181a0:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80181a2:	23a6      	movs	r3, #166	@ 0xa6
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 80181a4:	686c      	ldr	r4, [r5, #4]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80181a6:	009b      	lsls	r3, r3, #2
 80181a8:	0027      	movs	r7, r4
 80181aa:	375c      	adds	r7, #92	@ 0x5c
 80181ac:	18c1      	adds	r1, r0, r3
{
 80181ae:	0006      	movs	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 80181b0:	0038      	movs	r0, r7
 80181b2:	f7fe fb73 	bl	801689c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80181b6:	2301      	movs	r3, #1

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80181b8:	210e      	movs	r1, #14
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80181ba:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80181bc:	6263      	str	r3, [r4, #36]	@ 0x24
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80181be:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80181c0:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80181c2:	438b      	bics	r3, r1
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80181c4:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80181c6:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 80181c8:	7839      	ldrb	r1, [r7, #0]
 80181ca:	297f      	cmp	r1, #127	@ 0x7f
 80181cc:	d904      	bls.n	80181d8 <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 80181ce:	3201      	adds	r2, #1
 80181d0:	32ff      	adds	r2, #255	@ 0xff

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80181d2:	4313      	orrs	r3, r2
 80181d4:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
 80181d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 80181d8:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80181da:	0022      	movs	r2, r4
 80181dc:	3262      	adds	r2, #98	@ 0x62
 80181de:	7812      	ldrb	r2, [r2, #0]
 80181e0:	2a00      	cmp	r2, #0
 80181e2:	d107      	bne.n	80181f4 <HAL_PCD_SetupStageCallback+0x5c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 80181e4:	0022      	movs	r2, r4
 80181e6:	3263      	adds	r2, #99	@ 0x63
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80181e8:	7812      	ldrb	r2, [r2, #0]
 80181ea:	2a00      	cmp	r2, #0
 80181ec:	d102      	bne.n	80181f4 <HAL_PCD_SetupStageCallback+0x5c>
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80181ee:	2280      	movs	r2, #128	@ 0x80
 80181f0:	0092      	lsls	r2, r2, #2
 80181f2:	e7ee      	b.n	80181d2 <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80181f4:	0020      	movs	r0, r4
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80181f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80181f8:	3062      	adds	r0, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80181fa:	9301      	str	r3, [sp, #4]
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80181fc:	f7fe fb87 	bl	801690e <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018200:	2280      	movs	r2, #128	@ 0x80
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8018202:	0003      	movs	r3, r0
 8018204:	2700      	movs	r7, #0
 8018206:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018208:	0052      	lsls	r2, r2, #1
 801820a:	4290      	cmp	r0, r2
 801820c:	d908      	bls.n	8018220 <HAL_PCD_SetupStageCallback+0x88>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 801820e:	0028      	movs	r0, r5
 8018210:	9901      	ldr	r1, [sp, #4]
 8018212:	f000 f95d 	bl	80184d0 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8018216:	2380      	movs	r3, #128	@ 0x80
 8018218:	68aa      	ldr	r2, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801821a:	732f      	strb	r7, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 801821c:	009b      	lsls	r3, r3, #2
 801821e:	e7d8      	b.n	80181d2 <HAL_PCD_SetupStageCallback+0x3a>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8018220:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                HAL_PCD_EP_Receive(hpcd,
 8018222:	9901      	ldr	r1, [sp, #4]
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8018224:	63a7      	str	r7, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8018226:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
 8018228:	0030      	movs	r0, r6
 801822a:	7b89      	ldrb	r1, [r1, #14]
 801822c:	f7f8 f910 	bl	8010450 <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8018230:	2302      	movs	r3, #2
 8018232:	732b      	strb	r3, [r5, #12]
 8018234:	e7cf      	b.n	80181d6 <HAL_PCD_SetupStageCallback+0x3e>
 8018236:	46c0      	nop			@ (mov r8, r8)
 8018238:	20003104 	.word	0x20003104

0801823c <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801823c:	4b33      	ldr	r3, [pc, #204]	@ (801830c <HAL_PCD_DataInStageCallback+0xd0>)
{
 801823e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	000a      	movs	r2, r1
 8018244:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8018246:	230f      	movs	r3, #15
{
 8018248:	0007      	movs	r7, r0
 801824a:	000d      	movs	r5, r1
 801824c:	401a      	ands	r2, r3
    if ((epnum & 0xF) != 0)
 801824e:	4219      	tst	r1, r3
 8018250:	d012      	beq.n	8018278 <HAL_PCD_DataInStageCallback+0x3c>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8018252:	3b03      	subs	r3, #3
 8018254:	4353      	muls	r3, r2
 8018256:	0019      	movs	r1, r3
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018258:	18f3      	adds	r3, r6, r3
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 801825a:	314c      	adds	r1, #76	@ 0x4c
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801825c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 801825e:	1871      	adds	r1, r6, r1
    }
    else
    {

        /* Check if a ZLP should be armed.  */
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8018260:	2200      	movs	r2, #0
 8018262:	6da0      	ldr	r0, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_requested_length)
 8018264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8018266:	4290      	cmp	r0, r2
 8018268:	d046      	beq.n	80182f8 <HAL_PCD_DataInStageCallback+0xbc>
 801826a:	4293      	cmp	r3, r2
 801826c:	d044      	beq.n	80182f8 <HAL_PCD_DataInStageCallback+0xbc>
            /* Reset the ZLP condition.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;

            /* Arm a ZLP packet on IN.  */
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 801826e:	0013      	movs	r3, r2
 8018270:	0029      	movs	r1, r5
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8018272:	65a2      	str	r2, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8018274:	63e2      	str	r2, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8018276:	e039      	b.n	80182ec <HAL_PCD_DataInStageCallback+0xb0>
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018278:	6874      	ldr	r4, [r6, #4]
    if (epnum == 0U)
 801827a:	2900      	cmp	r1, #0
 801827c:	d13a      	bne.n	80182f4 <HAL_PCD_DataInStageCallback+0xb8>
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 801827e:	7b33      	ldrb	r3, [r6, #12]
 8018280:	2b01      	cmp	r3, #1
 8018282:	d115      	bne.n	80182b0 <HAL_PCD_DataInStageCallback+0x74>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018284:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8018286:	000a      	movs	r2, r1
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8018288:	9301      	str	r3, [sp, #4]
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801828a:	000b      	movs	r3, r1
 801828c:	f7f8 f8e0 	bl	8010450 <HAL_PCD_EP_Receive>
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8018290:	9b01      	ldr	r3, [sp, #4]
 8018292:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8018294:	8a18      	ldrh	r0, [r3, #16]
 8018296:	4281      	cmp	r1, r0
 8018298:	d81d      	bhi.n	80182d6 <HAL_PCD_DataInStageCallback+0x9a>
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801829a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801829c:	2b01      	cmp	r3, #1
 801829e:	d108      	bne.n	80182b2 <HAL_PCD_DataInStageCallback+0x76>
                    HAL_PCD_EP_Transmit(hpcd,
 80182a0:	9b01      	ldr	r3, [sp, #4]
 80182a2:	002a      	movs	r2, r5
 80182a4:	7b99      	ldrb	r1, [r3, #14]
 80182a6:	0038      	movs	r0, r7
 80182a8:	002b      	movs	r3, r5
 80182aa:	f7f8 f8f4 	bl	8010496 <HAL_PCD_EP_Transmit>
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80182ae:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 80182b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80182b2:	2302      	movs	r3, #2
 80182b4:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 80182b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80182b8:	68b2      	ldr	r2, [r6, #8]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 80182ba:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80182bc:	2308      	movs	r3, #8
 80182be:	4313      	orrs	r3, r2
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80182c0:	6465      	str	r5, [r4, #68]	@ 0x44
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80182c2:	60b3      	str	r3, [r6, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 80182c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d002      	beq.n	80182d0 <HAL_PCD_DataInStageCallback+0x94>
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 80182ca:	0020      	movs	r0, r4
 80182cc:	3020      	adds	r0, #32
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 80182ce:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80182d0:	2304      	movs	r3, #4
 80182d2:	7333      	strb	r3, [r6, #12]
 80182d4:	e7ec      	b.n	80182b0 <HAL_PCD_DataInStageCallback+0x74>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80182d6:	1a0b      	subs	r3, r1, r0
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80182d8:	4283      	cmp	r3, r0
 80182da:	d900      	bls.n	80182de <HAL_PCD_DataInStageCallback+0xa2>
 80182dc:	0003      	movs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80182de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80182e0:	1ac9      	subs	r1, r1, r3
 80182e2:	63e1      	str	r1, [r4, #60]	@ 0x3c
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80182e4:	1812      	adds	r2, r2, r0
                HAL_PCD_EP_Transmit(hpcd,
 80182e6:	9901      	ldr	r1, [sp, #4]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80182e8:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Transmit(hpcd,
 80182ea:	7b89      	ldrb	r1, [r1, #14]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 80182ec:	0038      	movs	r0, r7
 80182ee:	f7f8 f8d2 	bl	8010496 <HAL_PCD_EP_Transmit>
 80182f2:	e7dd      	b.n	80182b0 <HAL_PCD_DataInStageCallback+0x74>
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 80182f4:	1d31      	adds	r1, r6, #4
 80182f6:	e7b3      	b.n	8018260 <HAL_PCD_DataInStageCallback+0x24>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80182f8:	6462      	str	r2, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80182fa:	2202      	movs	r2, #2
            transfer_request -> ux_slave_transfer_request_actual_length =
 80182fc:	63a3      	str	r3, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 80182fe:	2308      	movs	r3, #8
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8018300:	6222      	str	r2, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018302:	684a      	ldr	r2, [r1, #4]
 8018304:	4313      	orrs	r3, r2
 8018306:	604b      	str	r3, [r1, #4]
}
 8018308:	e7d2      	b.n	80182b0 <HAL_PCD_DataInStageCallback+0x74>
 801830a:	46c0      	nop			@ (mov r8, r8)
 801830c:	20003104 	.word	0x20003104

08018310 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8018310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8018312:	4b21      	ldr	r3, [pc, #132]	@ (8018398 <HAL_PCD_DataOutStageCallback+0x88>)
 8018314:	250c      	movs	r5, #12
 8018316:	681b      	ldr	r3, [r3, #0]
{
 8018318:	0007      	movs	r7, r0
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801831a:	69de      	ldr	r6, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801831c:	230f      	movs	r3, #15
 801831e:	400b      	ands	r3, r1
 8018320:	435d      	muls	r5, r3
 8018322:	1975      	adds	r5, r6, r5
 8018324:	686c      	ldr	r4, [r5, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8018326:	2900      	cmp	r1, #0
 8018328:	d12a      	bne.n	8018380 <HAL_PCD_DataOutStageCallback+0x70>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 801832a:	7b33      	ldrb	r3, [r6, #12]
 801832c:	2b02      	cmp	r3, #2
 801832e:	d111      	bne.n	8018354 <HAL_PCD_DataOutStageCallback+0x44>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8018330:	6aa5      	ldr	r5, [r4, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018332:	f7f8 f8a8 	bl	8010486 <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8018336:	6ba3      	ldr	r3, [r4, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
 8018338:	6b62      	ldr	r2, [r4, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 801833a:	18c3      	adds	r3, r0, r3
 801833c:	63a3      	str	r3, [r4, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801833e:	4293      	cmp	r3, r2
 8018340:	d811      	bhi.n	8018366 <HAL_PCD_DataOutStageCallback+0x56>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8018342:	d002      	beq.n	801834a <HAL_PCD_DataOutStageCallback+0x3a>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8018344:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8018346:	4283      	cmp	r3, r0
 8018348:	d005      	beq.n	8018356 <HAL_PCD_DataOutStageCallback+0x46>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 801834a:	23c0      	movs	r3, #192	@ 0xc0
 801834c:	68b2      	ldr	r2, [r6, #8]
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	4313      	orrs	r3, r2
 8018352:	60b3      	str	r3, [r6, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8018354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8018356:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
 8018358:	0038      	movs	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801835a:	18d2      	adds	r2, r2, r3
 801835c:	6322      	str	r2, [r4, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
 801835e:	7ba9      	ldrb	r1, [r5, #14]
 8018360:	f7f8 f876 	bl	8010450 <HAL_PCD_EP_Receive>
 8018364:	e7f6      	b.n	8018354 <HAL_PCD_DataOutStageCallback+0x44>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8018366:	2327      	movs	r3, #39	@ 0x27
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018368:	68b2      	ldr	r2, [r6, #8]
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801836a:	6463      	str	r3, [r4, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801836c:	3b1f      	subs	r3, #31
 801836e:	4313      	orrs	r3, r2
 8018370:	60b3      	str	r3, [r6, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8018372:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018374:	2b00      	cmp	r3, #0
 8018376:	d0ed      	beq.n	8018354 <HAL_PCD_DataOutStageCallback+0x44>
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8018378:	0020      	movs	r0, r4
 801837a:	3020      	adds	r0, #32
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801837c:	4798      	blx	r3
 801837e:	e7e9      	b.n	8018354 <HAL_PCD_DataOutStageCallback+0x44>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018380:	f7f8 f881 	bl	8010486 <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018384:	2300      	movs	r3, #0
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018386:	68aa      	ldr	r2, [r5, #8]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8018388:	6463      	str	r3, [r4, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801838a:	3302      	adds	r3, #2
 801838c:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801838e:	3306      	adds	r3, #6
 8018390:	4313      	orrs	r3, r2
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8018392:	63a0      	str	r0, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8018394:	60ab      	str	r3, [r5, #8]
}
 8018396:	e7dd      	b.n	8018354 <HAL_PCD_DataOutStageCallback+0x44>
 8018398:	20003104 	.word	0x20003104

0801839c <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801839c:	b570      	push	{r4, r5, r6, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 801839e:	4c08      	ldr	r4, [pc, #32]	@ (80183c0 <HAL_PCD_ResetCallback+0x24>)
 80183a0:	6823      	ldr	r3, [r4, #0]
 80183a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d001      	beq.n	80183ac <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 80183a8:	f7fd fda6 	bl	8015ef8 <_ux_device_stack_disconnect>
        break;

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80183ac:	2501      	movs	r5, #1
 80183ae:	6823      	ldr	r3, [r4, #0]
 80183b0:	33fc      	adds	r3, #252	@ 0xfc
 80183b2:	649d      	str	r5, [r3, #72]	@ 0x48
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 80183b4:	f000 f92c 	bl	8018610 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	625d      	str	r5, [r3, #36]	@ 0x24
}
 80183bc:	bd70      	pop	{r4, r5, r6, pc}
 80183be:	46c0      	nop			@ (mov r8, r8)
 80183c0:	20003104 	.word	0x20003104

080183c4 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80183c4:	4b04      	ldr	r3, [pc, #16]	@ (80183d8 <HAL_PCD_SuspendCallback+0x14>)
{
 80183c6:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	33fc      	adds	r3, #252	@ 0xfc
 80183cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d001      	beq.n	80183d6 <HAL_PCD_SuspendCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 80183d2:	20f4      	movs	r0, #244	@ 0xf4
 80183d4:	4798      	blx	r3
    }
}
 80183d6:	bd10      	pop	{r4, pc}
 80183d8:	20003104 	.word	0x20003104

080183dc <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80183dc:	4b04      	ldr	r3, [pc, #16]	@ (80183f0 <HAL_PCD_ResumeCallback+0x14>)
{
 80183de:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	33fc      	adds	r3, #252	@ 0xfc
 80183e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d001      	beq.n	80183ee <HAL_PCD_ResumeCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 80183ea:	20f3      	movs	r0, #243	@ 0xf3
 80183ec:	4798      	blx	r3
    }
}
 80183ee:	bd10      	pop	{r4, pc}
 80183f0:	20003104 	.word	0x20003104

080183f4 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80183f4:	4b04      	ldr	r3, [pc, #16]	@ (8018408 <HAL_PCD_SOFCallback+0x14>)
{
 80183f6:	b510      	push	{r4, lr}
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	33fc      	adds	r3, #252	@ 0xfc
 80183fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d001      	beq.n	8018406 <HAL_PCD_SOFCallback+0x12>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8018402:	20f0      	movs	r0, #240	@ 0xf0
 8018404:	4798      	blx	r3
    }
}
 8018406:	bd10      	pop	{r4, pc}
 8018408:	20003104 	.word	0x20003104

0801840c <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801840e:	267f      	movs	r6, #127	@ 0x7f
 8018410:	000a      	movs	r2, r1
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018412:	7b89      	ldrb	r1, [r1, #14]
{
 8018414:	0005      	movs	r5, r0

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);

    if (ed == UX_NULL)
        return(UX_NO_ED_AVAILABLE);
 8018416:	2414      	movs	r4, #20
 8018418:	400e      	ands	r6, r1
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801841a:	2e05      	cmp	r6, #5
 801841c:	d829      	bhi.n	8018472 <_ux_dcd_stm32_endpoint_create+0x66>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801841e:	0003      	movs	r3, r0
 8018420:	3394      	adds	r3, #148	@ 0x94
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	469c      	mov	ip, r3
 8018426:	791b      	ldrb	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8018428:	429e      	cmp	r6, r3
 801842a:	d222      	bcs.n	8018472 <_ux_dcd_stm32_endpoint_create+0x66>
        return(UX_NULL);

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 801842c:	230c      	movs	r3, #12
 801842e:	b24c      	sxtb	r4, r1
 8018430:	4373      	muls	r3, r6
 8018432:	2c00      	cmp	r4, #0
 8018434:	da1f      	bge.n	8018476 <_ux_dcd_stm32_endpoint_create+0x6a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8018436:	334c      	adds	r3, #76	@ 0x4c
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8018438:	18eb      	adds	r3, r5, r3

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801843a:	685e      	ldr	r6, [r3, #4]
 801843c:	2501      	movs	r5, #1
 801843e:	0034      	movs	r4, r6
 8018440:	402c      	ands	r4, r5
 8018442:	422e      	tst	r6, r5
 8018444:	d119      	bne.n	801847a <_ux_dcd_stm32_endpoint_create+0x6e>
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018446:	2780      	movs	r7, #128	@ 0x80
 8018448:	0008      	movs	r0, r1
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 801844a:	4335      	orrs	r5, r6
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 801844c:	43b8      	bics	r0, r7
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 801844e:	605d      	str	r5, [r3, #4]
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8018450:	0007      	movs	r7, r0

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8018452:	6093      	str	r3, [r2, #8]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018454:	257f      	movs	r5, #127	@ 0x7f
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 8018456:	7258      	strb	r0, [r3, #9]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8018458:	0008      	movs	r0, r1
 801845a:	43a8      	bics	r0, r5
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 801845c:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 801845e:	7298      	strb	r0, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8018460:	2f00      	cmp	r7, #0
 8018462:	d006      	beq.n	8018472 <_ux_dcd_stm32_endpoint_create+0x66>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8018464:	2503      	movs	r5, #3
 8018466:	7bd3      	ldrb	r3, [r2, #15]
 8018468:	4660      	mov	r0, ip
 801846a:	8a12      	ldrh	r2, [r2, #16]
 801846c:	402b      	ands	r3, r5
 801846e:	f7f7 ff9b 	bl	80103a8 <HAL_PCD_EP_Open>
        return(UX_SUCCESS);
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
}
 8018472:	0020      	movs	r0, r4
 8018474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018476:	3304      	adds	r3, #4
 8018478:	e7de      	b.n	8018438 <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 801847a:	2414      	movs	r4, #20
 801847c:	e7f9      	b.n	8018472 <_ux_dcd_stm32_endpoint_create+0x66>

0801847e <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801847e:	b510      	push	{r4, lr}

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8018480:	2400      	movs	r4, #0
 8018482:	688b      	ldr	r3, [r1, #8]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018484:	3094      	adds	r0, #148	@ 0x94
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8018486:	605c      	str	r4, [r3, #4]
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018488:	7b89      	ldrb	r1, [r1, #14]
 801848a:	6800      	ldr	r0, [r0, #0]
 801848c:	f7f7 ffba 	bl	8010404 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 8018490:	0020      	movs	r0, r4
 8018492:	bd10      	pop	{r4, pc}

08018494 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8018494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018496:	688e      	ldr	r6, [r1, #8]
{
 8018498:	000c      	movs	r4, r1
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801849a:	2700      	movs	r7, #0
{
 801849c:	0005      	movs	r5, r0
    UX_DISABLE
 801849e:	f000 fb35 	bl	8018b0c <_ux_utility_interrupt_disable>
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80184a2:	6873      	ldr	r3, [r6, #4]
 80184a4:	4a09      	ldr	r2, [pc, #36]	@ (80184cc <_ux_dcd_stm32_endpoint_reset+0x38>)
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80184a6:	7237      	strb	r7, [r6, #8]
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80184a8:	4013      	ands	r3, r2
 80184aa:	6073      	str	r3, [r6, #4]
    UX_DISABLE
 80184ac:	9001      	str	r0, [sp, #4]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 80184ae:	3594      	adds	r5, #148	@ 0x94
 80184b0:	7ba1      	ldrb	r1, [r4, #14]
 80184b2:	6828      	ldr	r0, [r5, #0]
 80184b4:	f7f8 f835 	bl	8010522 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80184b8:	7ba1      	ldrb	r1, [r4, #14]
 80184ba:	6828      	ldr	r0, [r5, #0]
 80184bc:	f7f8 f871 	bl	80105a2 <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 80184c0:	9801      	ldr	r0, [sp, #4]
 80184c2:	f000 fb27 	bl	8018b14 <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 80184c6:	0038      	movs	r0, r7
 80184c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80184ca:	46c0      	nop			@ (mov r8, r8)
 80184cc:	fffffcf3 	.word	0xfffffcf3

080184d0 <_ux_dcd_stm32_endpoint_stall>:

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80184d0:	2204      	movs	r2, #4
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80184d2:	688b      	ldr	r3, [r1, #8]
{
 80184d4:	b510      	push	{r4, lr}
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80184d6:	685c      	ldr	r4, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80184d8:	3094      	adds	r0, #148	@ 0x94
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80184da:	4322      	orrs	r2, r4
 80184dc:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80184de:	7b89      	ldrb	r1, [r1, #14]
 80184e0:	7a9b      	ldrb	r3, [r3, #10]
 80184e2:	6800      	ldr	r0, [r0, #0]
 80184e4:	4319      	orrs	r1, r3
 80184e6:	f7f7 ffee 	bl	80104c6 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 80184ea:	2000      	movs	r0, #0
 80184ec:	bd10      	pop	{r4, pc}

080184ee <_ux_dcd_stm32_endpoint_status>:
ULONG ep_num = ep_addr & 0x7Fu;
 80184ee:	227f      	movs	r2, #127	@ 0x7f
 80184f0:	400a      	ands	r2, r1
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80184f2:	2a05      	cmp	r2, #5
 80184f4:	d815      	bhi.n	8018522 <_ux_dcd_stm32_endpoint_status+0x34>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80184f6:	0003      	movs	r3, r0
 80184f8:	3394      	adds	r3, #148	@ 0x94
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	791b      	ldrb	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80184fe:	429a      	cmp	r2, r3
 8018500:	d20f      	bcs.n	8018522 <_ux_dcd_stm32_endpoint_status+0x34>
    if (ep_dir)
 8018502:	230c      	movs	r3, #12
 8018504:	4353      	muls	r3, r2
 8018506:	0609      	lsls	r1, r1, #24
 8018508:	d509      	bpl.n	801851e <_ux_dcd_stm32_endpoint_status+0x30>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 801850a:	334c      	adds	r3, #76	@ 0x4c
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801850c:	18c0      	adds	r0, r0, r3

    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801850e:	2301      	movs	r3, #1
 8018510:	6842      	ldr	r2, [r0, #4]
        return(UX_ERROR);
 8018512:	20ff      	movs	r0, #255	@ 0xff
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018514:	421a      	tst	r2, r3
 8018516:	d001      	beq.n	801851c <_ux_dcd_stm32_endpoint_status+0x2e>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8018518:	0890      	lsrs	r0, r2, #2
 801851a:	4018      	ands	r0, r3
        return(UX_FALSE);
    else
        return(UX_TRUE);
}
 801851c:	4770      	bx	lr
 801851e:	3304      	adds	r3, #4
 8018520:	e7f4      	b.n	801850c <_ux_dcd_stm32_endpoint_status+0x1e>
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8018522:	2300      	movs	r3, #0
 8018524:	685b      	ldr	r3, [r3, #4]
 8018526:	deff      	udf	#255	@ 0xff

08018528 <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 8018528:	2000      	movs	r0, #0
 801852a:	4770      	bx	lr

0801852c <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 801852c:	0003      	movs	r3, r0
 801852e:	0008      	movs	r0, r1
 8018530:	0011      	movs	r1, r2
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8018532:	681a      	ldr	r2, [r3, #0]
{
 8018534:	b510      	push	{r4, lr}
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8018536:	2a00      	cmp	r2, #0
 8018538:	d106      	bne.n	8018548 <_ux_dcd_stm32_function+0x1c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 801853a:	2102      	movs	r1, #2
 801853c:	3255      	adds	r2, #85	@ 0x55
 801853e:	0008      	movs	r0, r1
 8018540:	f7fd fff6 	bl	8016530 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 8018544:	2055      	movs	r0, #85	@ 0x55
        break;
    }

    /* Return completion status.  */
    return(status);
}
 8018546:	bd10      	pop	{r4, pc}
    switch(function)
 8018548:	380a      	subs	r0, #10
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801854a:	69db      	ldr	r3, [r3, #28]
    switch(function)
 801854c:	280b      	cmp	r0, #11
 801854e:	d83a      	bhi.n	80185c6 <_ux_dcd_stm32_function+0x9a>
 8018550:	f7e7 fdec 	bl	800012c <__gnu_thumb1_case_uqi>
 8018554:	0e0a3906 	.word	0x0e0a3906
 8018558:	221a1612 	.word	0x221a1612
 801855c:	311e2835 	.word	0x311e2835
        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 8018560:	0018      	movs	r0, r3
 8018562:	f7ff ffe1 	bl	8018528 <_ux_dcd_stm32_frame_number_get>
        break;
 8018566:	e7ee      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8018568:	0018      	movs	r0, r3
 801856a:	f000 f8cf 	bl	801870c <_ux_dcd_stm32_transfer_run>
        break;
 801856e:	e7ea      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8018570:	0018      	movs	r0, r3
 8018572:	f000 f8bd 	bl	80186f0 <_ux_dcd_stm32_transfer_abort>
        break;
 8018576:	e7e6      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8018578:	0018      	movs	r0, r3
 801857a:	f7ff ff47 	bl	801840c <_ux_dcd_stm32_endpoint_create>
        break;
 801857e:	e7e2      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8018580:	0018      	movs	r0, r3
 8018582:	f7ff ff7c 	bl	801847e <_ux_dcd_stm32_endpoint_destroy>
        break;
 8018586:	e7de      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8018588:	0018      	movs	r0, r3
 801858a:	f7ff ff83 	bl	8018494 <_ux_dcd_stm32_endpoint_reset>
        break;
 801858e:	e7da      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8018590:	0018      	movs	r0, r3
 8018592:	f7ff ff9d 	bl	80184d0 <_ux_dcd_stm32_endpoint_stall>
        break;
 8018596:	e7d6      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8018598:	3394      	adds	r3, #148	@ 0x94
 801859a:	6818      	ldr	r0, [r3, #0]
 801859c:	b2c9      	uxtb	r1, r1
 801859e:	f7f7 faa5 	bl	800faec <HAL_PCD_SetAddress>
        break;
 80185a2:	e7d0      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 80185a4:	290b      	cmp	r1, #11
 80185a6:	d001      	beq.n	80185ac <_ux_dcd_stm32_function+0x80>
        status = UX_SUCCESS;
 80185a8:	2000      	movs	r0, #0
 80185aa:	e7cc      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 80185ac:	3394      	adds	r3, #148	@ 0x94
 80185ae:	6818      	ldr	r0, [r3, #0]
 80185b0:	f7f7 fa89 	bl	800fac6 <HAL_PCD_Stop>
 80185b4:	e7c7      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 80185b6:	0018      	movs	r0, r3
 80185b8:	f7ff ff99 	bl	80184ee <_ux_dcd_stm32_endpoint_status>
        break;
 80185bc:	e7c3      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>
        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 80185be:	0018      	movs	r0, r3
 80185c0:	f7ff fd98 	bl	80180f4 <_ux_dcd_stm32_setup_isr_pending>
        break;
 80185c4:	e7f0      	b.n	80185a8 <_ux_dcd_stm32_function+0x7c>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 80185c6:	2102      	movs	r1, #2
 80185c8:	2254      	movs	r2, #84	@ 0x54
 80185ca:	0008      	movs	r0, r1
 80185cc:	f7fd ffb0 	bl	8016530 <_ux_system_error_handler>
        status =  UX_FUNCTION_NOT_SUPPORTED;
 80185d0:	2054      	movs	r0, #84	@ 0x54
        break;
 80185d2:	e7b8      	b.n	8018546 <_ux_dcd_stm32_function+0x1a>

080185d4 <_ux_dcd_stm32_initialize>:


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80185d4:	4b0c      	ldr	r3, [pc, #48]	@ (8018608 <_ux_dcd_stm32_initialize+0x34>)
{
 80185d6:	b570      	push	{r4, r5, r6, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80185d8:	681c      	ldr	r4, [r3, #0]
{
 80185da:	000d      	movs	r5, r1

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 80185dc:	2380      	movs	r3, #128	@ 0x80

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 80185de:	2100      	movs	r1, #0
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 80185e0:	6063      	str	r3, [r4, #4]
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 80185e2:	2298      	movs	r2, #152	@ 0x98
 80185e4:	0008      	movs	r0, r1
 80185e6:	f7fe f863 	bl	80166b0 <_ux_utility_memory_allocate>
 80185ea:	0003      	movs	r3, r0

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
        return(UX_MEMORY_INSUFFICIENT);
 80185ec:	2012      	movs	r0, #18
    if(dcd_stm32 == UX_NULL)
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d008      	beq.n	8018604 <_ux_dcd_stm32_initialize+0x30>

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 80185f2:	4a06      	ldr	r2, [pc, #24]	@ (801860c <_ux_dcd_stm32_initialize+0x38>)
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 80185f4:	61e3      	str	r3, [r4, #28]
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 80185f6:	601c      	str	r4, [r3, #0]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 80185f8:	3394      	adds	r3, #148	@ 0x94
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 80185fa:	61a2      	str	r2, [r4, #24]
    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 80185fc:	601d      	str	r5, [r3, #0]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 80185fe:	2301      	movs	r3, #1

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8018600:	2000      	movs	r0, #0
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8018602:	6023      	str	r3, [r4, #0]
}
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	46c0      	nop			@ (mov r8, r8)
 8018608:	20003104 	.word	0x20003104
 801860c:	0801852d 	.word	0x0801852d

08018610 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8018610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8018612:	4e34      	ldr	r6, [pc, #208]	@ (80186e4 <_ux_dcd_stm32_initialize_complete+0xd4>)
 8018614:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018616:	0023      	movs	r3, r4
 8018618:	0020      	movs	r0, r4
 801861a:	33fc      	adds	r3, #252	@ 0xfc
 801861c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801861e:	69e7      	ldr	r7, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8018620:	30cc      	adds	r0, #204	@ 0xcc
 8018622:	2a01      	cmp	r2, #1
 8018624:	d14a      	bne.n	80186bc <_ux_dcd_stm32_initialize_complete+0xac>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8018626:	3b08      	subs	r3, #8
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	6003      	str	r3, [r0, #0]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 801862c:	0023      	movs	r3, r4
 801862e:	33f8      	adds	r3, #248	@ 0xf8
 8018630:	0022      	movs	r2, r4
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8018632:	681b      	ldr	r3, [r3, #0]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8018634:	32d0      	adds	r2, #208	@ 0xd0
 8018636:	6013      	str	r3, [r2, #0]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8018638:	0023      	movs	r3, r4
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801863a:	3a84      	subs	r2, #132	@ 0x84
    _ux_utility_descriptor_parse(device_framework,
 801863c:	492a      	ldr	r1, [pc, #168]	@ (80186e8 <_ux_dcd_stm32_initialize_complete+0xd8>)
 801863e:	6800      	ldr	r0, [r0, #0]
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8018640:	3328      	adds	r3, #40	@ 0x28
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8018642:	9201      	str	r2, [sp, #4]
    _ux_utility_descriptor_parse(device_framework,
 8018644:	220e      	movs	r2, #14
 8018646:	f7fd ffda 	bl	80165fe <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 801864a:	0023      	movs	r3, r4
 801864c:	4a27      	ldr	r2, [pc, #156]	@ (80186ec <_ux_dcd_stm32_initialize_complete+0xdc>)
 801864e:	3390      	adds	r3, #144	@ 0x90
 8018650:	601a      	str	r2, [r3, #0]
    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018652:	0022      	movs	r2, r4

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8018654:	0025      	movs	r5, r4
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8018656:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8018658:	323c      	adds	r2, #60	@ 0x3c
 801865a:	6662      	str	r2, [r4, #100]	@ 0x64
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 801865c:	66e3      	str	r3, [r4, #108]	@ 0x6c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801865e:	352f      	adds	r5, #47	@ 0x2f
 8018660:	782b      	ldrb	r3, [r5, #0]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018662:	9901      	ldr	r1, [sp, #4]
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8018664:	3794      	adds	r7, #148	@ 0x94
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8018666:	800b      	strh	r3, [r1, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8018668:	0020      	movs	r0, r4
 801866a:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801866c:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801866e:	69a3      	ldr	r3, [r4, #24]
 8018670:	4798      	blx	r3
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8018672:	2100      	movs	r1, #0
 8018674:	6838      	ldr	r0, [r7, #0]
 8018676:	f7f7 ff94 	bl	80105a2 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801867a:	2300      	movs	r3, #0
 801867c:	782a      	ldrb	r2, [r5, #0]
 801867e:	0019      	movs	r1, r3
 8018680:	6838      	ldr	r0, [r7, #0]
 8018682:	f7f7 fe91 	bl	80103a8 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8018686:	2180      	movs	r1, #128	@ 0x80
 8018688:	6838      	ldr	r0, [r7, #0]
 801868a:	f7f7 ff8a 	bl	80105a2 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801868e:	2300      	movs	r3, #0
 8018690:	782a      	ldrb	r2, [r5, #0]
 8018692:	2180      	movs	r1, #128	@ 0x80
 8018694:	6838      	ldr	r0, [r7, #0]
 8018696:	f7f7 fe87 	bl	80103a8 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 801869a:	2300      	movs	r3, #0

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801869c:	2001      	movs	r0, #1

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 801869e:	2208      	movs	r2, #8
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 80186a0:	6423      	str	r3, [r4, #64]	@ 0x40
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80186a2:	6763      	str	r3, [r4, #116]	@ 0x74

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80186a4:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80186a6:	6620      	str	r0, [r4, #96]	@ 0x60
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80186a8:	33fc      	adds	r3, #252	@ 0xfc
 80186aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 80186ac:	65e0      	str	r0, [r4, #92]	@ 0x5c
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 80186ae:	6722      	str	r2, [r4, #112]	@ 0x70
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 80186b0:	67a2      	str	r2, [r4, #120]	@ 0x78
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d000      	beq.n	80186b8 <_ux_dcd_stm32_initialize_complete+0xa8>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 80186b6:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
 80186b8:	2000      	movs	r0, #0
 80186ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 80186bc:	2200      	movs	r2, #0
 80186be:	665a      	str	r2, [r3, #100]	@ 0x64
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 80186c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80186c2:	2b01      	cmp	r3, #1
 80186c4:	d106      	bne.n	80186d4 <_ux_dcd_stm32_initialize_complete+0xc4>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80186c6:	0023      	movs	r3, r4
 80186c8:	33d4      	adds	r3, #212	@ 0xd4
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	6003      	str	r3, [r0, #0]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80186ce:	0023      	movs	r3, r4
 80186d0:	33d8      	adds	r3, #216	@ 0xd8
 80186d2:	e7ad      	b.n	8018630 <_ux_dcd_stm32_initialize_complete+0x20>
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 80186d4:	0023      	movs	r3, r4
 80186d6:	33dc      	adds	r3, #220	@ 0xdc
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	6003      	str	r3, [r0, #0]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 80186dc:	0023      	movs	r3, r4
 80186de:	33e0      	adds	r3, #224	@ 0xe0
 80186e0:	e7a6      	b.n	8018630 <_ux_dcd_stm32_initialize_complete+0x20>
 80186e2:	46c0      	nop			@ (mov r8, r8)
 80186e4:	20003104 	.word	0x20003104
 80186e8:	2000024b 	.word	0x2000024b
 80186ec:	0000fde8 	.word	0x0000fde8

080186f0 <_ux_dcd_stm32_transfer_abort>:


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80186f0:	3094      	adds	r0, #148	@ 0x94
{
 80186f2:	b570      	push	{r4, r5, r6, lr}
    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80186f4:	0004      	movs	r4, r0
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80186f6:	688d      	ldr	r5, [r1, #8]
    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80186f8:	6800      	ldr	r0, [r0, #0]
 80186fa:	7ba9      	ldrb	r1, [r5, #14]
 80186fc:	f7f7 ff3f 	bl	801057e <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8018700:	7ba9      	ldrb	r1, [r5, #14]
 8018702:	6820      	ldr	r0, [r4, #0]
 8018704:	f7f7 ff4d 	bl	80105a2 <HAL_PCD_EP_Flush>
    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
}
 8018708:	2000      	movs	r0, #0
 801870a:	bd70      	pop	{r4, r5, r6, pc}

0801870c <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801870e:	688f      	ldr	r7, [r1, #8]
{
 8018710:	000c      	movs	r4, r1

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8018712:	68be      	ldr	r6, [r7, #8]
{
 8018714:	9001      	str	r0, [sp, #4]

    UX_DISABLE
 8018716:	f000 f9f9 	bl	8018b0c <_ux_utility_interrupt_disable>

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 801871a:	4a1a      	ldr	r2, [pc, #104]	@ (8018784 <_ux_dcd_stm32_transfer_run+0x78>)
    UX_DISABLE
 801871c:	0005      	movs	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 801871e:	6812      	ldr	r2, [r2, #0]
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8018720:	6873      	ldr	r3, [r6, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8018722:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8018724:	2a00      	cmp	r2, #0
 8018726:	d105      	bne.n	8018734 <_ux_dcd_stm32_transfer_run+0x28>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8018728:	2326      	movs	r3, #38	@ 0x26
 801872a:	6263      	str	r3, [r4, #36]	@ 0x24
        UX_RESTORE
 801872c:	f000 f9f2 	bl	8018b14 <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 8018730:	2001      	movs	r0, #1
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
    return(UX_STATE_WAIT);
}
 8018732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 8018734:	075a      	lsls	r2, r3, #29
 8018736:	d506      	bpl.n	8018746 <_ux_dcd_stm32_transfer_run+0x3a>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 8018738:	2321      	movs	r3, #33	@ 0x21
 801873a:	6263      	str	r3, [r4, #36]	@ 0x24
            UX_RESTORE
 801873c:	0028      	movs	r0, r5
 801873e:	f000 f9e9 	bl	8018b14 <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 8018742:	2004      	movs	r0, #4
 8018744:	e7f5      	b.n	8018732 <_ux_dcd_stm32_transfer_run+0x26>
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 8018746:	2202      	movs	r2, #2
 8018748:	4213      	tst	r3, r2
 801874a:	d005      	beq.n	8018758 <_ux_dcd_stm32_transfer_run+0x4c>
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 801874c:	071a      	lsls	r2, r3, #28
 801874e:	d510      	bpl.n	8018772 <_ux_dcd_stm32_transfer_run+0x66>
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 8018750:	4a0d      	ldr	r2, [pc, #52]	@ (8018788 <_ux_dcd_stm32_transfer_run+0x7c>)
 8018752:	4013      	ands	r3, r2
 8018754:	6073      	str	r3, [r6, #4]
 8018756:	e7f1      	b.n	801873c <_ux_dcd_stm32_transfer_run+0x30>
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8018758:	431a      	orrs	r2, r3
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801875a:	9b01      	ldr	r3, [sp, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 801875c:	6072      	str	r2, [r6, #4]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801875e:	3394      	adds	r3, #148	@ 0x94
 8018760:	6818      	ldr	r0, [r3, #0]
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8018762:	68e2      	ldr	r2, [r4, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018764:	6963      	ldr	r3, [r4, #20]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8018766:	6aa4      	ldr	r4, [r4, #40]	@ 0x28
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8018768:	7bb9      	ldrb	r1, [r7, #14]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 801876a:	2c03      	cmp	r4, #3
 801876c:	d106      	bne.n	801877c <_ux_dcd_stm32_transfer_run+0x70>
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801876e:	f7f7 fe92 	bl	8010496 <HAL_PCD_EP_Transmit>
    UX_RESTORE
 8018772:	0028      	movs	r0, r5
 8018774:	f000 f9ce 	bl	8018b14 <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 8018778:	2005      	movs	r0, #5
 801877a:	e7da      	b.n	8018732 <_ux_dcd_stm32_transfer_run+0x26>
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801877c:	f7f7 fe68 	bl	8010450 <HAL_PCD_EP_Receive>
 8018780:	e7f7      	b.n	8018772 <_ux_dcd_stm32_transfer_run+0x66>
 8018782:	46c0      	nop			@ (mov r8, r8)
 8018784:	20003104 	.word	0x20003104
 8018788:	00000405 	.word	0x00000405

0801878c <tpdf_draw_colored_text>:
 * @param g           The green color component (0.0 to 1.0).
 * @param b           The blue color component (0.0 to 1.0).
 * @param text        The text string to write.
 */
UINT tpdf_draw_colored_text(FIL* file_p, int x, int y, const char* font_name, int font_size, \
                            float r, float g, float b, const char* text) {
 801878c:	b530      	push	{r4, r5, lr}
 801878e:	4c18      	ldr	r4, [pc, #96]	@ (80187f0 <tpdf_draw_colored_text+0x64>)
 8018790:	0005      	movs	r5, r0
 8018792:	44a5      	add	sp, r4
    // Tj = Show Text (draw the string)
    // ET = End Text block
    char buffer[512];
    UINT len =0;

    snprintf(buffer, sizeof(buffer), "BT %.2f %.2f %.2f rg /%s %d Tf %d %d Td (%s) Tj ET\n", \
 8018794:	9894      	ldr	r0, [sp, #592]	@ 0x250
 8018796:	9209      	str	r2, [sp, #36]	@ 0x24
 8018798:	9a90      	ldr	r2, [sp, #576]	@ 0x240
 801879a:	900a      	str	r0, [sp, #40]	@ 0x28
 801879c:	9893      	ldr	r0, [sp, #588]	@ 0x24c
 801879e:	9306      	str	r3, [sp, #24]
 80187a0:	9207      	str	r2, [sp, #28]
 80187a2:	9108      	str	r1, [sp, #32]
 80187a4:	f7ea fff8 	bl	8003798 <__aeabi_f2d>
 80187a8:	9004      	str	r0, [sp, #16]
 80187aa:	9105      	str	r1, [sp, #20]
 80187ac:	9892      	ldr	r0, [sp, #584]	@ 0x248
 80187ae:	f7ea fff3 	bl	8003798 <__aeabi_f2d>
 80187b2:	9002      	str	r0, [sp, #8]
 80187b4:	9103      	str	r1, [sp, #12]
 80187b6:	9891      	ldr	r0, [sp, #580]	@ 0x244
 80187b8:	f7ea ffee 	bl	8003798 <__aeabi_f2d>
 80187bc:	9000      	str	r0, [sp, #0]
 80187be:	9101      	str	r1, [sp, #4]
 80187c0:	2180      	movs	r1, #128	@ 0x80
 80187c2:	4c0c      	ldr	r4, [pc, #48]	@ (80187f4 <tpdf_draw_colored_text+0x68>)
 80187c4:	0089      	lsls	r1, r1, #2
 80187c6:	0022      	movs	r2, r4
 80187c8:	a80c      	add	r0, sp, #48	@ 0x30
 80187ca:	f001 faef 	bl	8019dac <sniprintf>
             r, g, b, font_name, font_size, x, y, text);
    len = strlen(buffer);
 80187ce:	a80c      	add	r0, sp, #48	@ 0x30
 80187d0:	f7e7 fc9a 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 80187d4:	0029      	movs	r1, r5
    len = strlen(buffer);
 80187d6:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 80187d8:	a80c      	add	r0, sp, #48	@ 0x30
 80187da:	f7fc ff0b 	bl	80155f4 <f_puts>
 80187de:	2800      	cmp	r0, #0
 80187e0:	da01      	bge.n	80187e6 <tpdf_draw_colored_text+0x5a>
        return -1;
 80187e2:	2401      	movs	r4, #1
 80187e4:	4264      	negs	r4, r4
    }
    return len;
}
 80187e6:	0020      	movs	r0, r4
 80187e8:	238d      	movs	r3, #141	@ 0x8d
 80187ea:	009b      	lsls	r3, r3, #2
 80187ec:	449d      	add	sp, r3
 80187ee:	bd30      	pop	{r4, r5, pc}
 80187f0:	fffffdcc 	.word	0xfffffdcc
 80187f4:	0801f9a7 	.word	0x0801f9a7

080187f8 <tpdf_draw_line>:

UINT tpdf_draw_line(FIL* file_p, int x1, int y1, int x2, int y2, float line_width, float r, float g, float b){
 80187f8:	b530      	push	{r4, r5, lr}
 80187fa:	b0ad      	sub	sp, #180	@ 0xb4
 80187fc:	0005      	movs	r5, r0
    char buffer[128];
    UINT len = 0;

    snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f RG %.2f w %d %d m %d %d l S\n",r,g,b,line_width, x1, y1, x2, y2);
 80187fe:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8018800:	930a      	str	r3, [sp, #40]	@ 0x28
 8018802:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018804:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8018806:	9209      	str	r2, [sp, #36]	@ 0x24
 8018808:	9108      	str	r1, [sp, #32]
 801880a:	f7ea ffc5 	bl	8003798 <__aeabi_f2d>
 801880e:	9006      	str	r0, [sp, #24]
 8018810:	9107      	str	r1, [sp, #28]
 8018812:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8018814:	f7ea ffc0 	bl	8003798 <__aeabi_f2d>
 8018818:	9004      	str	r0, [sp, #16]
 801881a:	9105      	str	r1, [sp, #20]
 801881c:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 801881e:	f7ea ffbb 	bl	8003798 <__aeabi_f2d>
 8018822:	9002      	str	r0, [sp, #8]
 8018824:	9103      	str	r1, [sp, #12]
 8018826:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8018828:	f7ea ffb6 	bl	8003798 <__aeabi_f2d>
 801882c:	4c0b      	ldr	r4, [pc, #44]	@ (801885c <tpdf_draw_line+0x64>)
 801882e:	9000      	str	r0, [sp, #0]
 8018830:	9101      	str	r1, [sp, #4]
 8018832:	0022      	movs	r2, r4
 8018834:	2180      	movs	r1, #128	@ 0x80
 8018836:	a80c      	add	r0, sp, #48	@ 0x30
 8018838:	f001 fab8 	bl	8019dac <sniprintf>
    len = strlen(buffer);
 801883c:	a80c      	add	r0, sp, #48	@ 0x30
 801883e:	f7e7 fc63 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 8018842:	0029      	movs	r1, r5
    len = strlen(buffer);
 8018844:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 8018846:	a80c      	add	r0, sp, #48	@ 0x30
 8018848:	f7fc fed4 	bl	80155f4 <f_puts>
 801884c:	2800      	cmp	r0, #0
 801884e:	da01      	bge.n	8018854 <tpdf_draw_line+0x5c>
        return -1;
 8018850:	2401      	movs	r4, #1
 8018852:	4264      	negs	r4, r4
    }

    return len;
}
 8018854:	0020      	movs	r0, r4
 8018856:	b02d      	add	sp, #180	@ 0xb4
 8018858:	bd30      	pop	{r4, r5, pc}
 801885a:	46c0      	nop			@ (mov r8, r8)
 801885c:	0801f9db 	.word	0x0801f9db

08018860 <tpdf_draw_simple_dashed_line>:
 * @param r           The red color component (0.0 to 1.0).
 * @param g           The green color component (0.0 to 1.0).
 * @param b           The blue color component (0.0 to 1.0).
 * @param dash_length The length of both the dash and the gap.
 */
UINT tpdf_draw_simple_dashed_line(FIL* file_p, int x1, int y1, int x2, int y2, float line_width, float r, float g, float b, int dash_length) {
 8018860:	b570      	push	{r4, r5, r6, lr}
 8018862:	b0ae      	sub	sp, #184	@ 0xb8
 8018864:	0005      	movs	r5, r0
 8018866:	9837      	ldr	r0, [sp, #220]	@ 0xdc
    char buffer[128];
    UINT len = 0;

    snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f RG %.2f w [%d %d] 0 d %d %d m %d %d l S\n[] 0 d\n",
 8018868:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 801886a:	9009      	str	r0, [sp, #36]	@ 0x24
 801886c:	9008      	str	r0, [sp, #32]
 801886e:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8018870:	930c      	str	r3, [sp, #48]	@ 0x30
 8018872:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018874:	960d      	str	r6, [sp, #52]	@ 0x34
 8018876:	910a      	str	r1, [sp, #40]	@ 0x28
 8018878:	f7ea ff8e 	bl	8003798 <__aeabi_f2d>
 801887c:	9006      	str	r0, [sp, #24]
 801887e:	9107      	str	r1, [sp, #28]
 8018880:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8018882:	f7ea ff89 	bl	8003798 <__aeabi_f2d>
 8018886:	9004      	str	r0, [sp, #16]
 8018888:	9105      	str	r1, [sp, #20]
 801888a:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 801888c:	f7ea ff84 	bl	8003798 <__aeabi_f2d>
 8018890:	9002      	str	r0, [sp, #8]
 8018892:	9103      	str	r1, [sp, #12]
 8018894:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8018896:	f7ea ff7f 	bl	8003798 <__aeabi_f2d>
 801889a:	4c0b      	ldr	r4, [pc, #44]	@ (80188c8 <tpdf_draw_simple_dashed_line+0x68>)
 801889c:	9000      	str	r0, [sp, #0]
 801889e:	9101      	str	r1, [sp, #4]
 80188a0:	0022      	movs	r2, r4
 80188a2:	2180      	movs	r1, #128	@ 0x80
 80188a4:	a80e      	add	r0, sp, #56	@ 0x38
 80188a6:	f001 fa81 	bl	8019dac <sniprintf>
                         r, g, b, line_width, dash_length, dash_length, x1, y1, x2, y2);
    len = strlen(buffer);
 80188aa:	a80e      	add	r0, sp, #56	@ 0x38
 80188ac:	f7e7 fc2c 	bl	8000108 <strlen>
    if (f_puts(buffer,file_p) < 0) {
 80188b0:	0029      	movs	r1, r5
    len = strlen(buffer);
 80188b2:	0004      	movs	r4, r0
    if (f_puts(buffer,file_p) < 0) {
 80188b4:	a80e      	add	r0, sp, #56	@ 0x38
 80188b6:	f7fc fe9d 	bl	80155f4 <f_puts>
 80188ba:	2800      	cmp	r0, #0
 80188bc:	da01      	bge.n	80188c2 <tpdf_draw_simple_dashed_line+0x62>
        return -1;
 80188be:	2401      	movs	r4, #1
 80188c0:	4264      	negs	r4, r4
    }

    return len;
}
 80188c2:	0020      	movs	r0, r4
 80188c4:	b02e      	add	sp, #184	@ 0xb8
 80188c6:	bd70      	pop	{r4, r5, r6, pc}
 80188c8:	0801fa07 	.word	0x0801fa07

080188cc <tpdf_add_new_obj>:

uint32_t tpdf_add_new_obj(FIL* file_p, int obj_num, const char* content, pdf_doc_t* pdf_monitor) {
 80188cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188ce:	001d      	movs	r5, r3
 80188d0:	000e      	movs	r6, r1
 80188d2:	0004      	movs	r4, r0
 80188d4:	0017      	movs	r7, r2
    char buffer[64];
    UINT status;

    // 1. Store the current file position. This is the object's offset.
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 80188d6:	68c2      	ldr	r2, [r0, #12]
uint32_t tpdf_add_new_obj(FIL* file_p, int obj_num, const char* content, pdf_doc_t* pdf_monitor) {
 80188d8:	b091      	sub	sp, #68	@ 0x44
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 80188da:	008b      	lsls	r3, r1, #2
 80188dc:	515a      	str	r2, [r3, r5]

    // 2. Write the object header (e.g., "1 0 obj\n").
    sprintf(buffer, "%d 0 obj\n", obj_num);
 80188de:	4668      	mov	r0, sp
 80188e0:	0032      	movs	r2, r6
 80188e2:	490a      	ldr	r1, [pc, #40]	@ (801890c <tpdf_add_new_obj+0x40>)
 80188e4:	f001 fa98 	bl	8019e18 <siprintf>
    status = f_puts(buffer,file_p);
 80188e8:	0021      	movs	r1, r4
 80188ea:	4668      	mov	r0, sp
 80188ec:	f7fc fe82 	bl	80155f4 <f_puts>
    if (status < 0) return status;

    // 3. Write the main content of the object.
    status = f_puts(content,file_p);
 80188f0:	0021      	movs	r1, r4
 80188f2:	0038      	movs	r0, r7
 80188f4:	f7fc fe7e 	bl	80155f4 <f_puts>
    if (status < 0) return status;

    // 4. Write the object footer.
    status = f_puts("\nendobj\n",file_p);
 80188f8:	0021      	movs	r1, r4
 80188fa:	4805      	ldr	r0, [pc, #20]	@ (8018910 <tpdf_add_new_obj+0x44>)
 80188fc:	f7fc fe7a 	bl	80155f4 <f_puts>
	pdf_monitor->num_objs += 1;
 8018900:	4a04      	ldr	r2, [pc, #16]	@ (8018914 <tpdf_add_new_obj+0x48>)
 8018902:	58ab      	ldr	r3, [r5, r2]
 8018904:	3301      	adds	r3, #1
 8018906:	50ab      	str	r3, [r5, r2]

    return status;
}
 8018908:	b011      	add	sp, #68	@ 0x44
 801890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801890c:	0801fa46 	.word	0x0801fa46
 8018910:	0801fa7e 	.word	0x0801fa7e
 8018914:	00000404 	.word	0x00000404

08018918 <tpdf_start_new_stream_obj>:

uint32_t tpdf_start_new_stream_obj(FIL* file_p, int obj_num,int obj_length_num, pdf_doc_t* pdf_monitor) {
 8018918:	b530      	push	{r4, r5, lr}
 801891a:	0005      	movs	r5, r0
 801891c:	001c      	movs	r4, r3
 801891e:	0008      	movs	r0, r1
    char buffer[64];
    UINT status;

    // 1. Store the current file position. This is the object's offset.
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018920:	008b      	lsls	r3, r1, #2
 8018922:	68e9      	ldr	r1, [r5, #12]
uint32_t tpdf_start_new_stream_obj(FIL* file_p, int obj_num,int obj_length_num, pdf_doc_t* pdf_monitor) {
 8018924:	b091      	sub	sp, #68	@ 0x44
    pdf_monitor->obj_offsets[obj_num] = f_size(file_p);
 8018926:	5119      	str	r1, [r3, r4]

    sprintf(buffer, "%d 0 obj\n<</Length %d 0 R\n>>\nstream\n", obj_num, obj_length_num);
 8018928:	0013      	movs	r3, r2
 801892a:	4907      	ldr	r1, [pc, #28]	@ (8018948 <tpdf_start_new_stream_obj+0x30>)
 801892c:	0002      	movs	r2, r0
 801892e:	4668      	mov	r0, sp
 8018930:	f001 fa72 	bl	8019e18 <siprintf>
    status = f_puts(buffer,file_p);
 8018934:	0029      	movs	r1, r5
 8018936:	4668      	mov	r0, sp
 8018938:	f7fc fe5c 	bl	80155f4 <f_puts>
    if (status < 0) return status;
    pdf_monitor->num_objs++;
 801893c:	4a03      	ldr	r2, [pc, #12]	@ (801894c <tpdf_start_new_stream_obj+0x34>)
 801893e:	58a3      	ldr	r3, [r4, r2]
 8018940:	3301      	adds	r3, #1
 8018942:	50a3      	str	r3, [r4, r2]

    return status;
}
 8018944:	b011      	add	sp, #68	@ 0x44
 8018946:	bd30      	pop	{r4, r5, pc}
 8018948:	0801fa50 	.word	0x0801fa50
 801894c:	00000404 	.word	0x00000404

08018950 <tpdf_end_new_stream_obj>:

uint32_t tpdf_end_new_stream_obj(FIL* file_p, int obj_length_num, int stream_length, pdf_doc_t* pdf_monitor) {
 8018950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018952:	0004      	movs	r4, r0
 8018954:	b08b      	sub	sp, #44	@ 0x2c
 8018956:	000e      	movs	r6, r1
    char buffer[32];
    UINT status;
    char * end_stream = "endstream\nendobj\n";
    status = f_puts(end_stream,file_p);
 8018958:	480a      	ldr	r0, [pc, #40]	@ (8018984 <tpdf_end_new_stream_obj+0x34>)
 801895a:	0021      	movs	r1, r4
uint32_t tpdf_end_new_stream_obj(FIL* file_p, int obj_length_num, int stream_length, pdf_doc_t* pdf_monitor) {
 801895c:	9301      	str	r3, [sp, #4]
 801895e:	0017      	movs	r7, r2
    status = f_puts(end_stream,file_p);
 8018960:	f7fc fe48 	bl	80155f4 <f_puts>
 8018964:	0005      	movs	r5, r0
    if (status < 0) return status;
    sprintf(buffer, "%d", stream_length);
 8018966:	003a      	movs	r2, r7
 8018968:	4907      	ldr	r1, [pc, #28]	@ (8018988 <tpdf_end_new_stream_obj+0x38>)
 801896a:	a802      	add	r0, sp, #8
 801896c:	f001 fa54 	bl	8019e18 <siprintf>
    tpdf_add_new_obj(file_p,obj_length_num,buffer,pdf_monitor);
 8018970:	0031      	movs	r1, r6
 8018972:	0020      	movs	r0, r4
 8018974:	9b01      	ldr	r3, [sp, #4]
 8018976:	aa02      	add	r2, sp, #8
 8018978:	f7ff ffa8 	bl	80188cc <tpdf_add_new_obj>
    return status;
}
 801897c:	0028      	movs	r0, r5
 801897e:	b00b      	add	sp, #44	@ 0x2c
 8018980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018982:	46c0      	nop			@ (mov r8, r8)
 8018984:	0801fa75 	.word	0x0801fa75
 8018988:	0801f64a 	.word	0x0801f64a

0801898c <USBD_ChangeFunction>:
  /* USER CODE BEGIN USBD_ChangeFunction1 */

  /* USER CODE END USBD_ChangeFunction1 */

  return status;
}
 801898c:	2000      	movs	r0, #0
 801898e:	4770      	bx	lr

08018990 <MX_USBX_Device_Init>:
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8018990:	2300      	movs	r3, #0
 8018992:	21c0      	movs	r1, #192	@ 0xc0
{
 8018994:	b570      	push	{r4, r5, r6, lr}
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8018996:	001a      	movs	r2, r3
 8018998:	4845      	ldr	r0, [pc, #276]	@ (8018ab0 <MX_USBX_Device_Init+0x120>)
{
 801899a:	b08a      	sub	sp, #40	@ 0x28
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 801899c:	0189      	lsls	r1, r1, #6
 801899e:	f7fd fe23 	bl	80165e8 <_uxe_system_initialize>
 80189a2:	1e04      	subs	r4, r0, #0
 80189a4:	d002      	beq.n	80189ac <MX_USBX_Device_Init+0x1c>
    return UX_ERROR;
 80189a6:	20ff      	movs	r0, #255	@ 0xff
}
 80189a8:	b00a      	add	sp, #40	@ 0x28
 80189aa:	bd70      	pop	{r4, r5, r6, pc}
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80189ac:	a906      	add	r1, sp, #24
 80189ae:	2001      	movs	r0, #1
 80189b0:	f000 fb4c 	bl	801904c <USBD_Get_Device_Framework_Speed>
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80189b4:	a907      	add	r1, sp, #28
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80189b6:	0005      	movs	r5, r0
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80189b8:	0020      	movs	r0, r4
 80189ba:	f000 fb47 	bl	801904c <USBD_Get_Device_Framework_Speed>
 80189be:	0004      	movs	r4, r0
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80189c0:	a808      	add	r0, sp, #32
 80189c2:	f000 fb61 	bl	8019088 <USBD_Get_String_Framework>
 80189c6:	0006      	movs	r6, r0
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80189c8:	a809      	add	r0, sp, #36	@ 0x24
 80189ca:	f000 fbab 	bl	8019124 <USBD_Get_Language_Id_Framework>
  if (ux_device_stack_initialize(device_framework_high_speed,
 80189ce:	4b39      	ldr	r3, [pc, #228]	@ (8018ab4 <MX_USBX_Device_Init+0x124>)
 80189d0:	9002      	str	r0, [sp, #8]
 80189d2:	9304      	str	r3, [sp, #16]
 80189d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189d6:	0028      	movs	r0, r5
 80189d8:	9303      	str	r3, [sp, #12]
 80189da:	9b08      	ldr	r3, [sp, #32]
 80189dc:	0022      	movs	r2, r4
 80189de:	9301      	str	r3, [sp, #4]
 80189e0:	9906      	ldr	r1, [sp, #24]
 80189e2:	9b07      	ldr	r3, [sp, #28]
 80189e4:	9600      	str	r6, [sp, #0]
 80189e6:	f7fd fb2b 	bl	8016040 <_ux_device_stack_initialize>
 80189ea:	1e05      	subs	r5, r0, #0
 80189ec:	d1db      	bne.n	80189a6 <MX_USBX_Device_Init+0x16>
  custom_hid_parameter.ux_slave_class_hid_instance_activate         = USBD_Custom_HID_Activate;
 80189ee:	4c32      	ldr	r4, [pc, #200]	@ (8018ab8 <MX_USBX_Device_Init+0x128>)
 80189f0:	4b32      	ldr	r3, [pc, #200]	@ (8018abc <MX_USBX_Device_Init+0x12c>)
 80189f2:	6023      	str	r3, [r4, #0]
  custom_hid_parameter.ux_slave_class_hid_instance_deactivate       = USBD_Custom_HID_Deactivate;
 80189f4:	4b32      	ldr	r3, [pc, #200]	@ (8018ac0 <MX_USBX_Device_Init+0x130>)
 80189f6:	6063      	str	r3, [r4, #4]
  custom_hid_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_CUSTOM);
 80189f8:	f000 fbbc 	bl	8019174 <USBD_HID_ReportDesc>
 80189fc:	60a0      	str	r0, [r4, #8]
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 80189fe:	0028      	movs	r0, r5
 8018a00:	f000 fbc2 	bl	8019188 <USBD_HID_ReportDesc_length>
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 8018a04:	4b2f      	ldr	r3, [pc, #188]	@ (8018ac4 <MX_USBX_Device_Init+0x134>)
  custom_hid_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8018a06:	60e5      	str	r5, [r4, #12]
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 8018a08:	6163      	str	r3, [r4, #20]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 8018a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8018ac8 <MX_USBX_Device_Init+0x138>)
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8018a0c:	6120      	str	r0, [r4, #16]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 8018a0e:	61a3      	str	r3, [r4, #24]
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_initialize       = ux_device_class_hid_receiver_initialize;
 8018a10:	4b2e      	ldr	r3, [pc, #184]	@ (8018acc <MX_USBX_Device_Init+0x13c>)
 8018a12:	6263      	str	r3, [r4, #36]	@ 0x24
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_number = USBD_Custom_HID_EventMaxNumber();
 8018a14:	f000 f914 	bl	8018c40 <USBD_Custom_HID_EventMaxNumber>
 8018a18:	62a0      	str	r0, [r4, #40]	@ 0x28
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 8018a1a:	f000 f919 	bl	8018c50 <USBD_Custom_HID_EventMaxLength>
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 8018a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8018ad0 <MX_USBX_Device_Init+0x140>)
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a20:	0029      	movs	r1, r5
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 8018a22:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a24:	2001      	movs	r0, #1
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 8018a26:	6323      	str	r3, [r4, #48]	@ 0x30
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a28:	f000 fba2 	bl	8019170 <USBD_Get_Configuration_Number>
 8018a2c:	4e29      	ldr	r6, [pc, #164]	@ (8018ad4 <MX_USBX_Device_Init+0x144>)
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a2e:	0029      	movs	r1, r5
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a30:	6030      	str	r0, [r6, #0]
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a32:	2001      	movs	r0, #1
 8018a34:	f000 fb86 	bl	8019144 <USBD_Get_Interface_Number>
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8018a38:	4d27      	ldr	r5, [pc, #156]	@ (8018ad8 <MX_USBX_Device_Init+0x148>)
 8018a3a:	9400      	str	r4, [sp, #0]
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8018a3c:	0003      	movs	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8018a3e:	4927      	ldr	r1, [pc, #156]	@ (8018adc <MX_USBX_Device_Init+0x14c>)
 8018a40:	0028      	movs	r0, r5
 8018a42:	6832      	ldr	r2, [r6, #0]
 8018a44:	f7fc ff18 	bl	8015878 <_ux_device_stack_class_register>
 8018a48:	1e05      	subs	r5, r0, #0
 8018a4a:	d1ac      	bne.n	80189a6 <MX_USBX_Device_Init+0x16>
  storage_parameter.ux_slave_class_storage_instance_activate   = USBD_STORAGE_Activate;
 8018a4c:	4c24      	ldr	r4, [pc, #144]	@ (8018ae0 <MX_USBX_Device_Init+0x150>)
 8018a4e:	4b25      	ldr	r3, [pc, #148]	@ (8018ae4 <MX_USBX_Device_Init+0x154>)
 8018a50:	6023      	str	r3, [r4, #0]
  storage_parameter.ux_slave_class_storage_instance_deactivate = USBD_STORAGE_Deactivate;
 8018a52:	4b25      	ldr	r3, [pc, #148]	@ (8018ae8 <MX_USBX_Device_Init+0x158>)
 8018a54:	6063      	str	r3, [r4, #4]
  storage_parameter.ux_slave_class_storage_parameter_number_lun = STORAGE_NUMBER_LUN;
 8018a56:	2301      	movs	r3, #1
 8018a58:	60a3      	str	r3, [r4, #8]
    ux_slave_class_storage_media_last_lba = USBD_STORAGE_GetMediaLastLba();
 8018a5a:	f000 fbd3 	bl	8019204 <USBD_STORAGE_GetMediaLastLba>
 8018a5e:	60e0      	str	r0, [r4, #12]
    ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8018a60:	f000 fbe2 	bl	8019228 <USBD_STORAGE_GetMediaBlocklength>
    ux_slave_class_storage_media_removable_flag = STORAGE_REMOVABLE_FLAG;
 8018a64:	2380      	movs	r3, #128	@ 0x80
 8018a66:	61a3      	str	r3, [r4, #24]
    ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8018a68:	4b20      	ldr	r3, [pc, #128]	@ (8018aec <MX_USBX_Device_Init+0x15c>)
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018a6a:	0029      	movs	r1, r5
    ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8018a6c:	6323      	str	r3, [r4, #48]	@ 0x30
    ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8018a6e:	4b20      	ldr	r3, [pc, #128]	@ (8018af0 <MX_USBX_Device_Init+0x160>)
    ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8018a70:	6120      	str	r0, [r4, #16]
    ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8018a72:	6363      	str	r3, [r4, #52]	@ 0x34
    ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8018a74:	4b1f      	ldr	r3, [pc, #124]	@ (8018af4 <MX_USBX_Device_Init+0x164>)
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018a76:	2003      	movs	r0, #3
    ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8018a78:	63a3      	str	r3, [r4, #56]	@ 0x38
    ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8018a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8018af8 <MX_USBX_Device_Init+0x168>)
    ux_slave_class_storage_media_type = 0;
 8018a7c:	6165      	str	r5, [r4, #20]
    ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8018a7e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8018a80:	4b1e      	ldr	r3, [pc, #120]	@ (8018afc <MX_USBX_Device_Init+0x16c>)
    ux_slave_class_storage_media_read_only_flag = STORAGE_READ_ONLY;
 8018a82:	61e5      	str	r5, [r4, #28]
    ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8018a84:	6423      	str	r3, [r4, #64]	@ 0x40
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018a86:	f000 fb73 	bl	8019170 <USBD_Get_Configuration_Number>
 8018a8a:	4e1d      	ldr	r6, [pc, #116]	@ (8018b00 <MX_USBX_Device_Init+0x170>)
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8018a8c:	0029      	movs	r1, r5
  storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8018a8e:	6030      	str	r0, [r6, #0]
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8018a90:	2003      	movs	r0, #3
 8018a92:	f000 fb57 	bl	8019144 <USBD_Get_Interface_Number>
  if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8018a96:	4d1b      	ldr	r5, [pc, #108]	@ (8018b04 <MX_USBX_Device_Init+0x174>)
 8018a98:	9400      	str	r4, [sp, #0]
  storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8018a9a:	0003      	movs	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8018a9c:	491a      	ldr	r1, [pc, #104]	@ (8018b08 <MX_USBX_Device_Init+0x178>)
 8018a9e:	0028      	movs	r0, r5
 8018aa0:	6832      	ldr	r2, [r6, #0]
 8018aa2:	f7fc fee9 	bl	8015878 <_ux_device_stack_class_register>
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d100      	bne.n	8018aac <MX_USBX_Device_Init+0x11c>
 8018aaa:	e77d      	b.n	80189a8 <MX_USBX_Device_Init+0x18>
 8018aac:	e77b      	b.n	80189a6 <MX_USBX_Device_Init+0x16>
 8018aae:	46c0      	nop			@ (mov r8, r8)
 8018ab0:	2000319c 	.word	0x2000319c
 8018ab4:	0801898d 	.word	0x0801898d
 8018ab8:	20003160 	.word	0x20003160
 8018abc:	08018ba1 	.word	0x08018ba1
 8018ac0:	08018bc9 	.word	0x08018bc9
 8018ac4:	08018bd9 	.word	0x08018bd9
 8018ac8:	08018be9 	.word	0x08018be9
 8018acc:	08016e0d 	.word	0x08016e0d
 8018ad0:	08018bf9 	.word	0x08018bf9
 8018ad4:	20003198 	.word	0x20003198
 8018ad8:	2000020c 	.word	0x2000020c
 8018adc:	08016b95 	.word	0x08016b95
 8018ae0:	2000310c 	.word	0x2000310c
 8018ae4:	08019197 	.word	0x08019197
 8018ae8:	08019199 	.word	0x08019199
 8018aec:	0801919d 	.word	0x0801919d
 8018af0:	080191ed 	.word	0x080191ed
 8018af4:	080191f5 	.word	0x080191f5
 8018af8:	080191f9 	.word	0x080191f9
 8018afc:	080191ff 	.word	0x080191ff
 8018b00:	20003194 	.word	0x20003194
 8018b04:	2000021f 	.word	0x2000021f
 8018b08:	08017297 	.word	0x08017297

08018b0c <_ux_utility_interrupt_disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018b0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8018b10:	b672      	cpsid	i
}
 8018b12:	4770      	bx	lr

08018b14 <_ux_utility_interrupt_restore>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b14:	f380 8810 	msr	PRIMASK, r0
}
 8018b18:	4770      	bx	lr

08018b1a <_ux_utility_time_get>:
{
 8018b1a:	b510      	push	{r4, lr}
  time_tick = HAL_GetTick();
 8018b1c:	f7f5 f95e 	bl	800dddc <HAL_GetTick>
}
 8018b20:	bd10      	pop	{r4, pc}
	...

08018b24 <USB_Send_HidReport>:
UINT USB_Send_HidReport(uint8_t *report_buffer, ULONG report_len)
{
  UINT status;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018b24:	4a0f      	ldr	r2, [pc, #60]	@ (8018b64 <USB_Send_HidReport+0x40>)
{
 8018b26:	b530      	push	{r4, r5, lr}
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018b28:	6812      	ldr	r2, [r2, #0]
{
 8018b2a:	0003      	movs	r3, r0
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 8018b2e:	000c      	movs	r4, r1
  {
    return UX_ERROR;
 8018b30:	20ff      	movs	r0, #255	@ 0xff
{
 8018b32:	b095      	sub	sp, #84	@ 0x54
  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8018b34:	2a03      	cmp	r2, #3
 8018b36:	d113      	bne.n	8018b60 <USB_Send_HidReport+0x3c>
 8018b38:	4d0b      	ldr	r5, [pc, #44]	@ (8018b68 <USB_Send_HidReport+0x44>)
 8018b3a:	682a      	ldr	r2, [r5, #0]
 8018b3c:	2a00      	cmp	r2, #0
 8018b3e:	d00f      	beq.n	8018b60 <USB_Send_HidReport+0x3c>
  }

  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
  {
    return UX_INVALID_PARAMETER;
 8018b40:	3805      	subs	r0, #5
  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d00c      	beq.n	8018b60 <USB_Send_HidReport+0x3c>
 8018b46:	1e4a      	subs	r2, r1, #1
 8018b48:	2a3f      	cmp	r2, #63	@ 0x3f
 8018b4a:	d809      	bhi.n	8018b60 <USB_Send_HidReport+0x3c>

  /*
   * Prepare the HID event for sending.
   */
  // 1. Point the event's buffer pointer to YOUR data buffer.
  ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, \
 8018b4c:	000a      	movs	r2, r1
 8018b4e:	a804      	add	r0, sp, #16
 8018b50:	0019      	movs	r1, r3
 8018b52:	f7fd fea3 	bl	801689c <_ux_utility_memory_copy>

  /*
   * 3. Send the event. This will queue the report for transmission on the
   * Interrupt IN endpoint.
   */
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 8018b56:	6828      	ldr	r0, [r5, #0]
 8018b58:	a901      	add	r1, sp, #4
  hid_event.ux_device_class_hid_event_length = report_len;
 8018b5a:	9403      	str	r4, [sp, #12]
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 8018b5c:	f7fe f876 	bl	8016c4c <_ux_device_class_hid_event_set>

  return status;
}
 8018b60:	b015      	add	sp, #84	@ 0x54
 8018b62:	bd30      	pop	{r4, r5, pc}
 8018b64:	20003104 	.word	0x20003104
 8018b68:	200061e0 	.word	0x200061e0

08018b6c <USB_Get_HidReport>:
//	ux_utility_memory_copy(report_buffer,hid_get_report_buff,UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
//	*report_len = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
//	return UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
//}

UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8018b6c:	b570      	push	{r4, r5, r6, lr}
    if (hid_data_ready) {
 8018b6e:	4d09      	ldr	r5, [pc, #36]	@ (8018b94 <USB_Get_HidReport+0x28>)
UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8018b70:	000c      	movs	r4, r1
    if (hid_data_ready) {
 8018b72:	782b      	ldrb	r3, [r5, #0]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d009      	beq.n	8018b8c <USB_Get_HidReport+0x20>
        ux_utility_memory_copy(report_buffer, hid_get_report_buff, last_report_len);
 8018b78:	4e07      	ldr	r6, [pc, #28]	@ (8018b98 <USB_Get_HidReport+0x2c>)
 8018b7a:	4908      	ldr	r1, [pc, #32]	@ (8018b9c <USB_Get_HidReport+0x30>)
 8018b7c:	7832      	ldrb	r2, [r6, #0]
 8018b7e:	f7fd fe8d 	bl	801689c <_ux_utility_memory_copy>
        *report_len = last_report_len;
        hid_data_ready = 0;
 8018b82:	2000      	movs	r0, #0
        *report_len = last_report_len;
 8018b84:	7833      	ldrb	r3, [r6, #0]
        hid_data_ready = 0;
 8018b86:	7028      	strb	r0, [r5, #0]
        *report_len = last_report_len;
 8018b88:	6023      	str	r3, [r4, #0]
        return 0; // 0 = Success
    } else {
        *report_len = 0;
        return 1; // No new data
    }
}
 8018b8a:	bd70      	pop	{r4, r5, r6, pc}
        return 1; // No new data
 8018b8c:	2001      	movs	r0, #1
        *report_len = 0;
 8018b8e:	600b      	str	r3, [r1, #0]
        return 1; // No new data
 8018b90:	e7fb      	b.n	8018b8a <USB_Get_HidReport+0x1e>
 8018b92:	46c0      	nop			@ (mov r8, r8)
 8018b94:	2000619d 	.word	0x2000619d
 8018b98:	2000619c 	.word	0x2000619c
 8018b9c:	2000619e 	.word	0x2000619e

08018ba0 <USBD_Custom_HID_Activate>:
  *         This function is called when insertion of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Activate(VOID *hid_instance)
{
 8018ba0:	b510      	push	{r4, lr}
 8018ba2:	0004      	movs	r4, r0
  /* USER CODE BEGIN USBD_Custom_HID_Activate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device activated.\n");
 8018ba4:	4805      	ldr	r0, [pc, #20]	@ (8018bbc <USBD_Custom_HID_Activate+0x1c>)
 8018ba6:	f001 f8f7 	bl	8019d98 <puts>
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 8018baa:	4b05      	ldr	r3, [pc, #20]	@ (8018bc0 <USBD_Custom_HID_Activate+0x20>)
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8018bac:	4805      	ldr	r0, [pc, #20]	@ (8018bc4 <USBD_Custom_HID_Activate+0x24>)
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 8018bae:	601c      	str	r4, [r3, #0]
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8018bb0:	f7f8 ffe6 	bl	8011b80 <HAL_RTCEx_DeactivateWakeUpTimer>
  Switch_Backup_reg(MODE_Stop);
 8018bb4:	2002      	movs	r0, #2
 8018bb6:	f7ed f92f 	bl	8005e18 <Switch_Backup_reg>
  /* USER CODE END USBD_Custom_HID_Activate */

  return;
}
 8018bba:	bd10      	pop	{r4, pc}
 8018bbc:	0801fa87 	.word	0x0801fa87
 8018bc0:	200061e0 	.word	0x200061e0
 8018bc4:	200009f8 	.word	0x200009f8

08018bc8 <USBD_Custom_HID_Deactivate>:
  *         This function is called when extraction of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Deactivate(VOID *hid_instance)
{
 8018bc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USBD_Custom_HID_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device deactivated.\n");
 8018bca:	4802      	ldr	r0, [pc, #8]	@ (8018bd4 <USBD_Custom_HID_Deactivate+0xc>)
 8018bcc:	f001 f8e4 	bl	8019d98 <puts>
  /* USER CODE END USBD_Custom_HID_Deactivate */

  return;
}
 8018bd0:	bd10      	pop	{r4, pc}
 8018bd2:	46c0      	nop			@ (mov r8, r8)
 8018bd4:	0801faa4 	.word	0x0801faa4

08018bd8 <USBD_Custom_HID_SetFeature>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_SetFeature(UX_SLAVE_CLASS_HID *hid_instance,
                                UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8018bd8:	b510      	push	{r4, lr}
  UINT status = UX_SUCCESS;

  /* USER CODE BEGIN USBD_Custom_HID_SetFeature */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Set Feature request received.\n");
 8018bda:	4802      	ldr	r0, [pc, #8]	@ (8018be4 <USBD_Custom_HID_SetFeature+0xc>)
 8018bdc:	f001 f8dc 	bl	8019d98 <puts>
  /* USER CODE END USBD_Custom_HID_SetFeature */

  return status;
}
 8018be0:	2000      	movs	r0, #0
 8018be2:	bd10      	pop	{r4, pc}
 8018be4:	0801fac3 	.word	0x0801fac3

08018be8 <USBD_Custom_HID_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                               UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8018be8:	b510      	push	{r4, lr}
  UINT status = UX_SUCCESS;

  /* USER CODE BEGIN USBD_Custom_HID_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Get Report request received.\n");
 8018bea:	4802      	ldr	r0, [pc, #8]	@ (8018bf4 <USBD_Custom_HID_GetReport+0xc>)
 8018bec:	f001 f8d4 	bl	8019d98 <puts>
  /* USER CODE END USBD_Custom_HID_GetReport */

  return status;
}
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	bd10      	pop	{r4, pc}
 8018bf4:	0801faec 	.word	0x0801faec

08018bf8 <USBD_Custom_HID_SetReport>:
  *         to the application over Endpoint OUT (Set Report).
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_SetReport(struct UX_SLAVE_CLASS_HID_STRUCT *hid_instance)
{
 8018bf8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN USBD_Custom_HID_SetReport */

  UX_DEVICE_CLASS_HID_RECEIVED_EVENT hid_received_event;

  ux_utility_memory_set(&hid_received_event, 0, sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT));
 8018bfa:	2208      	movs	r2, #8
 8018bfc:	2100      	movs	r1, #0
 8018bfe:	4668      	mov	r0, sp
 8018c00:	f7fd fe7e 	bl	8016900 <_ux_utility_memory_set>

  // FIXME: Add flag to check write event?
  if(ux_device_class_hid_receiver_event_get(hid_instance_global, &hid_received_event) == UX_SUCCESS)
 8018c04:	4c0a      	ldr	r4, [pc, #40]	@ (8018c30 <USBD_Custom_HID_SetReport+0x38>)
 8018c06:	4669      	mov	r1, sp
 8018c08:	6820      	ldr	r0, [r4, #0]
 8018c0a:	f7fe f8f3 	bl	8016df4 <_ux_device_class_hid_receiver_event_get>
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d10d      	bne.n	8018c2e <USBD_Custom_HID_SetReport+0x36>
  {
	ux_utility_memory_copy(hid_get_report_buff, \
 8018c12:	2240      	movs	r2, #64	@ 0x40
 8018c14:	4807      	ldr	r0, [pc, #28]	@ (8018c34 <USBD_Custom_HID_SetReport+0x3c>)
 8018c16:	9901      	ldr	r1, [sp, #4]
 8018c18:	f7fd fe40 	bl	801689c <_ux_utility_memory_copy>
							hid_received_event.ux_device_class_hid_received_event_data, \
							UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
    /* Free hid received event */
    ux_device_class_hid_receiver_event_free(hid_instance_global);
 8018c1c:	6820      	ldr	r0, [r4, #0]
 8018c1e:	f7fe f8d9 	bl	8016dd4 <_ux_device_class_hid_receiver_event_free>

    last_report_len = hid_received_event.ux_device_class_hid_received_event_length;
 8018c22:	4b05      	ldr	r3, [pc, #20]	@ (8018c38 <USBD_Custom_HID_SetReport+0x40>)
 8018c24:	9a00      	ldr	r2, [sp, #0]
 8018c26:	701a      	strb	r2, [r3, #0]
    hid_data_ready = 1;
 8018c28:	2201      	movs	r2, #1
 8018c2a:	4b04      	ldr	r3, [pc, #16]	@ (8018c3c <USBD_Custom_HID_SetReport+0x44>)
 8018c2c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USBD_Custom_HID_SetReport */

  return;
}
 8018c2e:	bd13      	pop	{r0, r1, r4, pc}
 8018c30:	200061e0 	.word	0x200061e0
 8018c34:	2000619e 	.word	0x2000619e
 8018c38:	2000619c 	.word	0x2000619c
 8018c3c:	2000619d 	.word	0x2000619d

08018c40 <USBD_Custom_HID_EventMaxNumber>:
  *         This function to set receiver event max number parameter.
  * @param  none
  * @retval receiver event max number
  */
ULONG USBD_Custom_HID_EventMaxNumber(VOID)
{
 8018c40:	b510      	push	{r4, lr}
  ULONG max_number = 0U;

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxNumber */
  printf("Custom HID Event Max Number requested.\n");
 8018c42:	4802      	ldr	r0, [pc, #8]	@ (8018c4c <USBD_Custom_HID_EventMaxNumber+0xc>)
 8018c44:	f001 f8a8 	bl	8019d98 <puts>

  max_number = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
  /* USER CODE END USBD_Custom_HID_EventMaxNumber */

  return max_number;
}
 8018c48:	2008      	movs	r0, #8
 8018c4a:	bd10      	pop	{r4, pc}
 8018c4c:	0801fb14 	.word	0x0801fb14

08018c50 <USBD_Custom_HID_EventMaxLength>:
  *         This function to set receiver event max length parameter.
  * @param  none
  * @retval receiver event max length
  */
ULONG USBD_Custom_HID_EventMaxLength(VOID)
{
 8018c50:	b510      	push	{r4, lr}
  ULONG max_length = 0U;

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxLength */
  printf("Custom HID Event Max Length requested.\n");
 8018c52:	4802      	ldr	r0, [pc, #8]	@ (8018c5c <USBD_Custom_HID_EventMaxLength+0xc>)
 8018c54:	f001 f8a0 	bl	8019d98 <puts>
   max_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
  /* USER CODE END USBD_Custom_HID_EventMaxLength */

  return max_length;
}
 8018c58:	2040      	movs	r0, #64	@ 0x40
 8018c5a:	bd10      	pop	{r4, pc}
 8018c5c:	0801fb3b 	.word	0x0801fb3b

08018c60 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8018c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c62:	9101      	str	r1, [sp, #4]
  uint32_t idx = 0U;

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8018c64:	215c      	movs	r1, #92	@ 0x5c
 8018c66:	6845      	ldr	r5, [r0, #4]
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8018c68:	2706      	movs	r7, #6
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8018c6a:	4369      	muls	r1, r5
 8018c6c:	1844      	adds	r4, r0, r1
 8018c6e:	69e4      	ldr	r4, [r4, #28]
 8018c70:	3128      	adds	r1, #40	@ 0x28
 8018c72:	46a4      	mov	ip, r4
  uint32_t idx = 0U;
 8018c74:	2400      	movs	r4, #0
 8018c76:	1841      	adds	r1, r0, r1
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8018c78:	45a4      	cmp	ip, r4
 8018c7a:	d10f      	bne.n	8018c9c <USBD_FrameWork_AssignEp+0x3c>
    /* Increment the index */
    idx++;
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8018c7c:	2106      	movs	r1, #6
 8018c7e:	4361      	muls	r1, r4
 8018c80:	245c      	movs	r4, #92	@ 0x5c
 8018c82:	436c      	muls	r4, r5
 8018c84:	1909      	adds	r1, r1, r4
 8018c86:	1841      	adds	r1, r0, r1
 8018c88:	9c01      	ldr	r4, [sp, #4]
 8018c8a:	1d48      	adds	r0, r1, #5
 8018c8c:	77c4      	strb	r4, [r0, #31]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8018c8e:	1d88      	adds	r0, r1, #6
 8018c90:	77c2      	strb	r2, [r0, #31]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8018c92:	84cb      	strh	r3, [r1, #38]	@ 0x26
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8018c94:	2301      	movs	r3, #1
 8018c96:	3128      	adds	r1, #40	@ 0x28
 8018c98:	700b      	strb	r3, [r1, #0]
}
 8018c9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8018c9c:	003e      	movs	r6, r7
 8018c9e:	4366      	muls	r6, r4
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8018ca0:	5d8e      	ldrb	r6, [r1, r6]
 8018ca2:	2e00      	cmp	r6, #0
 8018ca4:	d0ea      	beq.n	8018c7c <USBD_FrameWork_AssignEp+0x1c>
    idx++;
 8018ca6:	3401      	adds	r4, #1
 8018ca8:	e7e6      	b.n	8018c78 <USBD_FrameWork_AssignEp+0x18>

08018caa <USBD_Desc_GetString.part.0>:
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 8018caa:	b570      	push	{r4, r5, r6, lr}
 8018cac:	0016      	movs	r6, r2
 8018cae:	0004      	movs	r4, r0
 8018cb0:	000d      	movs	r5, r1
  while (*pbuff != (uint8_t)'\0')
 8018cb2:	f7e7 fa29 	bl	8000108 <strlen>
 8018cb6:	2201      	movs	r2, #1
 8018cb8:	b2c0      	uxtb	r0, r0
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 8018cba:	8030      	strh	r0, [r6, #0]
  unicode[idx++] = *(uint8_t *)len;
 8018cbc:	1b12      	subs	r2, r2, r4
 8018cbe:	7028      	strb	r0, [r5, #0]
  while (*pdesc != (uint8_t)'\0')
 8018cc0:	7821      	ldrb	r1, [r4, #0]
 8018cc2:	18a3      	adds	r3, r4, r2
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	2900      	cmp	r1, #0
 8018cc8:	d100      	bne.n	8018ccc <USBD_Desc_GetString.part.0+0x22>
}
 8018cca:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx++] = *pdesc;
 8018ccc:	54e9      	strb	r1, [r5, r3]
    pdesc++;
 8018cce:	3401      	adds	r4, #1
 8018cd0:	e7f6      	b.n	8018cc0 <USBD_Desc_GetString.part.0+0x16>
	...

08018cd4 <USBD_Device_Framework_Builder.constprop.0.isra.0>:
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 8018cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cd6:	000e      	movs	r6, r1
 8018cd8:	b089      	sub	sp, #36	@ 0x24
 8018cda:	9205      	str	r2, [sp, #20]
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8018cdc:	4ad6      	ldr	r2, [pc, #856]	@ (8019038 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x364>)
  pdev->CurrConfDescSz = 0U;
 8018cde:	0001      	movs	r1, r0
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8018ce0:	6016      	str	r6, [r2, #0]
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8018ce2:	2212      	movs	r2, #18
  pdev->CurrConfDescSz = 0U;
 8018ce4:	2300      	movs	r3, #0
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8018ce6:	4694      	mov	ip, r2
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 8018ce8:	0004      	movs	r4, r0
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8018cea:	2001      	movs	r0, #1
  pDevDesc->idVendor = USBD_VID;
 8018cec:	277d      	movs	r7, #125	@ 0x7d
  pdev->CurrConfDescSz = 0U;
 8018cee:	31fc      	adds	r1, #252	@ 0xfc
 8018cf0:	628b      	str	r3, [r1, #40]	@ 0x28
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8018cf2:	2540      	movs	r5, #64	@ 0x40
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8018cf4:	7070      	strb	r0, [r6, #1]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8018cf6:	73b0      	strb	r0, [r6, #14]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8018cf8:	7470      	strb	r0, [r6, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8018cfa:	4660      	mov	r0, ip
  pDevDesc->idVendor = USBD_VID;
 8018cfc:	427f      	negs	r7, r7
 8018cfe:	7237      	strb	r7, [r6, #8]
 8018d00:	3781      	adds	r7, #129	@ 0x81
 8018d02:	7277      	strb	r7, [r6, #9]
  pDevDesc->idProduct = USBD_PID;
 8018d04:	3f84      	subs	r7, #132	@ 0x84
 8018d06:	72b7      	strb	r7, [r6, #10]
 8018d08:	37d1      	adds	r7, #209	@ 0xd1
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8018d0a:	7032      	strb	r2, [r6, #0]
  pDevDesc->idProduct = USBD_PID;
 8018d0c:	72f7      	strb	r7, [r6, #11]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8018d0e:	3a10      	subs	r2, #16
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8018d10:	3f4e      	subs	r7, #78	@ 0x4e
  pDevDesc->bcdUSB = USB_BCDUSB;
 8018d12:	70b3      	strb	r3, [r6, #2]
 8018d14:	70f2      	strb	r2, [r6, #3]
  pDevDesc->bDeviceClass = 0x00;
 8018d16:	7133      	strb	r3, [r6, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 8018d18:	7173      	strb	r3, [r6, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8018d1a:	71b3      	strb	r3, [r6, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8018d1c:	71f5      	strb	r5, [r6, #7]
  pDevDesc->bcdDevice = 0x0200;
 8018d1e:	7333      	strb	r3, [r6, #12]
 8018d20:	7372      	strb	r2, [r6, #13]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8018d22:	73f2      	strb	r2, [r6, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8018d24:	7437      	strb	r7, [r6, #16]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8018d26:	6248      	str	r0, [r1, #36]	@ 0x24
  if (Speed == USBD_HIGH_SPEED)
 8018d28:	9805      	ldr	r0, [sp, #20]
 8018d2a:	2801      	cmp	r0, #1
 8018d2c:	d110      	bne.n	8018d50 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x7c>
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8018d2e:	3009      	adds	r0, #9
 8018d30:	74b0      	strb	r0, [r6, #18]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8018d32:	0030      	movs	r0, r6
 8018d34:	4460      	add	r0, ip
    pDevQualDesc->bcdDevice = 0x0200;
 8018d36:	70c2      	strb	r2, [r0, #3]
    pDevQualDesc->bNumConfigurations = 0x01;
 8018d38:	9a05      	ldr	r2, [sp, #20]
    pDevQualDesc->bcdDevice = 0x0200;
 8018d3a:	7083      	strb	r3, [r0, #2]
    pDevQualDesc->Class = 0x00;
 8018d3c:	7103      	strb	r3, [r0, #4]
    pDevQualDesc->SubClass = 0x00;
 8018d3e:	7143      	strb	r3, [r0, #5]
    pDevQualDesc->Protocol = 0x00;
 8018d40:	7183      	strb	r3, [r0, #6]
    pDevQualDesc->bReserved = 0x00;
 8018d42:	7243      	strb	r3, [r0, #9]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8018d44:	3703      	adds	r7, #3
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8018d46:	331c      	adds	r3, #28
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8018d48:	7047      	strb	r7, [r0, #1]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8018d4a:	71c5      	strb	r5, [r0, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8018d4c:	7202      	strb	r2, [r0, #8]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8018d4e:	624b      	str	r3, [r1, #36]	@ 0x24
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8018d50:	4bba      	ldr	r3, [pc, #744]	@ (801903c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x368>)
 8018d52:	9304      	str	r3, [sp, #16]
 8018d54:	4bba      	ldr	r3, [pc, #744]	@ (8019040 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x36c>)
 8018d56:	9307      	str	r3, [sp, #28]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8018d58:	6863      	ldr	r3, [r4, #4]
 8018d5a:	9301      	str	r3, [sp, #4]
 8018d5c:	2b02      	cmp	r3, #2
 8018d5e:	d818      	bhi.n	8018d92 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8018d60:	68a3      	ldr	r3, [r4, #8]
 8018d62:	9302      	str	r3, [sp, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8018d64:	2b02      	cmp	r3, #2
 8018d66:	d814      	bhi.n	8018d92 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 8018d68:	9b04      	ldr	r3, [sp, #16]
 8018d6a:	7819      	ldrb	r1, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8018d6c:	2900      	cmp	r1, #0
 8018d6e:	d010      	beq.n	8018d92 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xbe>
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8018d70:	0023      	movs	r3, r4
 8018d72:	33fc      	adds	r3, #252	@ 0xfc
 8018d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8018d76:	9a01      	ldr	r2, [sp, #4]
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8018d78:	469c      	mov	ip, r3
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8018d7a:	235c      	movs	r3, #92	@ 0x5c
 8018d7c:	4353      	muls	r3, r2
 8018d7e:	18e3      	adds	r3, r4, r3
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8018d80:	699d      	ldr	r5, [r3, #24]
 8018d82:	2d00      	cmp	r5, #0
 8018d84:	d017      	beq.n	8018db6 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xe2>
      pdev->classId ++;
 8018d86:	9b01      	ldr	r3, [sp, #4]
 8018d88:	3301      	adds	r3, #1
 8018d8a:	6063      	str	r3, [r4, #4]
      pdev->NumClasses ++;
 8018d8c:	9b02      	ldr	r3, [sp, #8]
 8018d8e:	3301      	adds	r3, #1
 8018d90:	60a3      	str	r3, [r4, #8]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8018d92:	9b04      	ldr	r3, [sp, #16]
 8018d94:	9a07      	ldr	r2, [sp, #28]
 8018d96:	3301      	adds	r3, #1
 8018d98:	9304      	str	r3, [sp, #16]
 8018d9a:	4293      	cmp	r3, r2
 8018d9c:	d1dc      	bne.n	8018d58 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x84>
  if (pdev->NumClasses > 1)
 8018d9e:	68a3      	ldr	r3, [r4, #8]
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d800      	bhi.n	8018da6 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xd2>
 8018da4:	e13f      	b.n	8019026 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x352>
    pDevDesc->bDeviceClass = 0xEF;
 8018da6:	23ef      	movs	r3, #239	@ 0xef
 8018da8:	7133      	strb	r3, [r6, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8018daa:	3bed      	subs	r3, #237	@ 0xed
 8018dac:	7173      	strb	r3, [r6, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8018dae:	3b01      	subs	r3, #1
      pDevDesc->bDeviceProtocol = 0x00;
 8018db0:	71b3      	strb	r3, [r6, #6]
}
 8018db2:	b009      	add	sp, #36	@ 0x24
 8018db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8018db6:	9a01      	ldr	r2, [sp, #4]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8018db8:	7319      	strb	r1, [r3, #12]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8018dba:	611a      	str	r2, [r3, #16]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8018dbc:	2201      	movs	r2, #1
 8018dbe:	619a      	str	r2, [r3, #24]
    if (class == CLASS_TYPE_HID)
 8018dc0:	4291      	cmp	r1, r2
 8018dc2:	d10a      	bne.n	8018dda <USBD_Device_Framework_Builder.constprop.0.isra.0+0x106>
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 8018dc4:	489f      	ldr	r0, [pc, #636]	@ (8019044 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x370>)
 8018dc6:	4fa0      	ldr	r7, [pc, #640]	@ (8019048 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x374>)
 8018dc8:	7802      	ldrb	r2, [r0, #0]
 8018dca:	5cbf      	ldrb	r7, [r7, r2]
      interface_idx++;
 8018dcc:	3201      	adds	r2, #1
 8018dce:	b2d2      	uxtb	r2, r2
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 8018dd0:	751f      	strb	r7, [r3, #20]
      if (interface_idx == sizeof(UserHIDInterface))
 8018dd2:	2a01      	cmp	r2, #1
 8018dd4:	d100      	bne.n	8018dd8 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x104>
 8018dd6:	e097      	b.n	8018f08 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x234>
      interface_idx++;
 8018dd8:	7002      	strb	r2, [r0, #0]
      (void)USBD_FrameWork_AddClass(pdev,
 8018dda:	4663      	mov	r3, ip
 8018ddc:	18f7      	adds	r7, r6, r3
  pdev->Speed = Speed;
 8018dde:	9b05      	ldr	r3, [sp, #20]
 8018de0:	7023      	strb	r3, [r4, #0]
  if (pdev->classId == 0U)
 8018de2:	9b01      	ldr	r3, [sp, #4]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d114      	bne.n	8018e12 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x13e>
  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8018de8:	3309      	adds	r3, #9
 8018dea:	703b      	strb	r3, [r7, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8018dec:	3b07      	subs	r3, #7
 8018dee:	707b      	strb	r3, [r7, #1]
  ptr->wDescriptorLength = 0U;
 8018df0:	9b01      	ldr	r3, [sp, #4]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8018df2:	0022      	movs	r2, r4
  ptr->bNumInterfaces = 0U;
 8018df4:	713b      	strb	r3, [r7, #4]
  ptr->wDescriptorLength = 0U;
 8018df6:	70bb      	strb	r3, [r7, #2]
 8018df8:	70fb      	strb	r3, [r7, #3]
  ptr->bConfigurationValue = 1U;
 8018dfa:	2301      	movs	r3, #1
 8018dfc:	717b      	strb	r3, [r7, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8018dfe:	9b01      	ldr	r3, [sp, #4]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8018e00:	32fc      	adds	r2, #252	@ 0xfc
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8018e02:	71bb      	strb	r3, [r7, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 8018e04:	23c0      	movs	r3, #192	@ 0xc0
 8018e06:	71fb      	strb	r3, [r7, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8018e08:	3ba7      	subs	r3, #167	@ 0xa7
 8018e0a:	723b      	strb	r3, [r7, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8018e0c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8018e0e:	3309      	adds	r3, #9
 8018e10:	6293      	str	r3, [r2, #40]	@ 0x28
  switch (pdev->tclasslist[pdev->classId].ClassType)
 8018e12:	2901      	cmp	r1, #1
 8018e14:	d07a      	beq.n	8018f0c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x238>
 8018e16:	2903      	cmp	r1, #3
 8018e18:	d1b5      	bne.n	8018d86 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
  uint32_t idx = 0U;
 8018e1a:	9a02      	ldr	r2, [sp, #8]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8018e1c:	1e13      	subs	r3, r2, #0
 8018e1e:	d004      	beq.n	8018e2a <USBD_Device_Framework_Builder.constprop.0.isra.0+0x156>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8018e20:	6a22      	ldr	r2, [r4, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8018e22:	2b02      	cmp	r3, #2
 8018e24:	d101      	bne.n	8018e2a <USBD_Device_Framework_Builder.constprop.0.isra.0+0x156>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8018e26:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8018e28:	18d2      	adds	r2, r2, r3
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8018e2a:	235c      	movs	r3, #92	@ 0x5c
 8018e2c:	9901      	ldr	r1, [sp, #4]
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 8018e2e:	2502      	movs	r5, #2
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8018e30:	434b      	muls	r3, r1
 8018e32:	2101      	movs	r1, #1
 8018e34:	18e3      	adds	r3, r4, r3
 8018e36:	6219      	str	r1, [r3, #32]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8018e38:	0019      	movs	r1, r3
 8018e3a:	315a      	adds	r1, #90	@ 0x5a
 8018e3c:	700a      	strb	r2, [r1, #0]
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 8018e3e:	61dd      	str	r5, [r3, #28]
      if (pdev->Speed == USBD_HIGH_SPEED)
 8018e40:	9b05      	ldr	r3, [sp, #20]
 8018e42:	2b01      	cmp	r3, #1
 8018e44:	d000      	beq.n	8018e48 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x174>
 8018e46:	e0e6      	b.n	8019016 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x342>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 8018e48:	2380      	movs	r3, #128	@ 0x80
 8018e4a:	002a      	movs	r2, r5
 8018e4c:	009b      	lsls	r3, r3, #2
 8018e4e:	2182      	movs	r1, #130	@ 0x82
 8018e50:	0020      	movs	r0, r4
 8018e52:	f7ff ff05 	bl	8018c60 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8018e56:	2380      	movs	r3, #128	@ 0x80
 8018e58:	009b      	lsls	r3, r3, #2
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8018e5a:	002a      	movs	r2, r5
 8018e5c:	0029      	movs	r1, r5
{
  USBD_IfDescTypedef       *pIfDesc;
  USBD_EpDescTypedef       *pEpDesc;

  /* Append MSC Interface descriptor */
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8018e5e:	0025      	movs	r5, r4
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8018e60:	0020      	movs	r0, r4
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8018e62:	35fc      	adds	r5, #252	@ 0xfc
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8018e64:	f7ff fefc 	bl	8018c60 <USBD_FrameWork_AssignEp>
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8018e68:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8018e6a:	9901      	ldr	r1, [sp, #4]
 8018e6c:	18fa      	adds	r2, r7, r3
 8018e6e:	9303      	str	r3, [sp, #12]
 8018e70:	2309      	movs	r3, #9
 8018e72:	7013      	strb	r3, [r2, #0]
 8018e74:	3b05      	subs	r3, #5
 8018e76:	7053      	strb	r3, [r2, #1]
 8018e78:	3358      	adds	r3, #88	@ 0x58
 8018e7a:	434b      	muls	r3, r1
 8018e7c:	18e3      	adds	r3, r4, r3
 8018e7e:	0019      	movs	r1, r3
 8018e80:	315a      	adds	r1, #90	@ 0x5a
 8018e82:	7809      	ldrb	r1, [r1, #0]
                          (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                          (0x08U), (0x06U), (0x50U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8018e84:	2005      	movs	r0, #5
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8018e86:	7091      	strb	r1, [r2, #2]
 8018e88:	2100      	movs	r1, #0
 8018e8a:	70d1      	strb	r1, [r2, #3]
 8018e8c:	468c      	mov	ip, r1
 8018e8e:	69d9      	ldr	r1, [r3, #28]
 8018e90:	7111      	strb	r1, [r2, #4]
 8018e92:	2108      	movs	r1, #8
 8018e94:	7151      	strb	r1, [r2, #5]
 8018e96:	3902      	subs	r1, #2
 8018e98:	7191      	strb	r1, [r2, #6]
 8018e9a:	314a      	adds	r1, #74	@ 0x4a
 8018e9c:	71d1      	strb	r1, [r2, #7]
 8018e9e:	4661      	mov	r1, ip
 8018ea0:	7211      	strb	r1, [r2, #8]
 8018ea2:	9a03      	ldr	r2, [sp, #12]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8018ea4:	3107      	adds	r1, #7
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 8018ea6:	3209      	adds	r2, #9
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8018ea8:	19d2      	adds	r2, r2, r7
 8018eaa:	7011      	strb	r1, [r2, #0]
 8018eac:	7050      	strb	r0, [r2, #1]
 8018eae:	1819      	adds	r1, r3, r0
 8018eb0:	7fc9      	ldrb	r1, [r1, #31]
 8018eb2:	7091      	strb	r1, [r2, #2]
 8018eb4:	2102      	movs	r1, #2
 8018eb6:	70d1      	strb	r1, [r2, #3]
 8018eb8:	0019      	movs	r1, r3
 8018eba:	3126      	adds	r1, #38	@ 0x26
 8018ebc:	9106      	str	r1, [sp, #24]
 8018ebe:	7809      	ldrb	r1, [r1, #0]
 8018ec0:	7111      	strb	r1, [r2, #4]
 8018ec2:	9906      	ldr	r1, [sp, #24]
 8018ec4:	7849      	ldrb	r1, [r1, #1]
 8018ec6:	7151      	strb	r1, [r2, #5]
 8018ec8:	4661      	mov	r1, ip
 8018eca:	7191      	strb	r1, [r2, #6]
 8018ecc:	9a03      	ldr	r2, [sp, #12]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 8018ece:	3107      	adds	r1, #7
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 8018ed0:	3210      	adds	r2, #16
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 8018ed2:	19d2      	adds	r2, r2, r7
 8018ed4:	7050      	strb	r0, [r2, #1]
 8018ed6:	0018      	movs	r0, r3
 8018ed8:	7011      	strb	r1, [r2, #0]
 8018eda:	302a      	adds	r0, #42	@ 0x2a
 8018edc:	7800      	ldrb	r0, [r0, #0]
 8018ede:	3905      	subs	r1, #5
 8018ee0:	332c      	adds	r3, #44	@ 0x2c
 8018ee2:	7090      	strb	r0, [r2, #2]
 8018ee4:	70d1      	strb	r1, [r2, #3]
 8018ee6:	7819      	ldrb	r1, [r3, #0]
 8018ee8:	7111      	strb	r1, [r2, #4]
 8018eea:	785b      	ldrb	r3, [r3, #1]
 8018eec:	7153      	strb	r3, [r2, #5]
 8018eee:	4663      	mov	r3, ip
 8018ef0:	7193      	strb	r3, [r2, #6]
 8018ef2:	9b03      	ldr	r3, [sp, #12]
 8018ef4:	3317      	adds	r3, #23
 8018ef6:	62ab      	str	r3, [r5, #40]	@ 0x28
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8018ef8:	793a      	ldrb	r2, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8018efa:	70bb      	strb	r3, [r7, #2]
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8018efc:	3201      	adds	r2, #1
 8018efe:	713a      	strb	r2, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8018f00:	b29a      	uxth	r2, r3
 8018f02:	0a12      	lsrs	r2, r2, #8
 8018f04:	70fa      	strb	r2, [r7, #3]
}
 8018f06:	e73e      	b.n	8018d86 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
        interface_idx = 0U;
 8018f08:	7005      	strb	r5, [r0, #0]
 8018f0a:	e766      	b.n	8018dda <USBD_Device_Framework_Builder.constprop.0.isra.0+0x106>
      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8018f0c:	255c      	movs	r5, #92	@ 0x5c
 8018f0e:	9b01      	ldr	r3, [sp, #4]
 8018f10:	436b      	muls	r3, r5
 8018f12:	18e3      	adds	r3, r4, r3
 8018f14:	7d1b      	ldrb	r3, [r3, #20]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d000      	beq.n	8018f1c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x248>
 8018f1a:	e734      	b.n	8018d86 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
  uint32_t idx = 0U;
 8018f1c:	9b02      	ldr	r3, [sp, #8]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8018f1e:	1e1a      	subs	r2, r3, #0
 8018f20:	d004      	beq.n	8018f2c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x258>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8018f22:	6a23      	ldr	r3, [r4, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8018f24:	2a02      	cmp	r2, #2
 8018f26:	d101      	bne.n	8018f2c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x258>
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8018f28:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8018f2a:	189b      	adds	r3, r3, r2
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 8018f2c:	9a01      	ldr	r2, [sp, #4]
 8018f2e:	2001      	movs	r0, #1
 8018f30:	4355      	muls	r5, r2
 8018f32:	1965      	adds	r5, r4, r5
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8018f34:	002a      	movs	r2, r5
 8018f36:	325a      	adds	r2, #90	@ 0x5a
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 8018f38:	6228      	str	r0, [r5, #32]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8018f3a:	7013      	strb	r3, [r2, #0]
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 8018f3c:	2302      	movs	r3, #2
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 8018f3e:	2181      	movs	r1, #129	@ 0x81
 8018f40:	0020      	movs	r0, r4
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8018f42:	9206      	str	r2, [sp, #24]
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 8018f44:	61eb      	str	r3, [r5, #28]
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 8018f46:	2203      	movs	r2, #3
 8018f48:	333e      	adds	r3, #62	@ 0x3e
 8018f4a:	f7ff fe89 	bl	8018c60 <USBD_FrameWork_AssignEp>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPOUT_ADDR,
 8018f4e:	2203      	movs	r2, #3
 8018f50:	2340      	movs	r3, #64	@ 0x40
 8018f52:	2101      	movs	r1, #1
 8018f54:	0020      	movs	r0, r4
 8018f56:	f7ff fe83 	bl	8018c60 <USBD_FrameWork_AssignEp>
  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8018f5a:	7d2a      	ldrb	r2, [r5, #20]
 8018f5c:	2a00      	cmp	r2, #0
 8018f5e:	d14f      	bne.n	8019000 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x32c>
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8018f60:	23fc      	movs	r3, #252	@ 0xfc
 8018f62:	469c      	mov	ip, r3
 8018f64:	44a4      	add	ip, r4
 8018f66:	4663      	mov	r3, ip
 8018f68:	2004      	movs	r0, #4
 8018f6a:	2109      	movs	r1, #9
 8018f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f6e:	9303      	str	r3, [sp, #12]
 8018f70:	18fb      	adds	r3, r7, r3
 8018f72:	7058      	strb	r0, [r3, #1]
 8018f74:	9806      	ldr	r0, [sp, #24]
 8018f76:	7019      	strb	r1, [r3, #0]
 8018f78:	7800      	ldrb	r0, [r0, #0]
 8018f7a:	70da      	strb	r2, [r3, #3]
 8018f7c:	7098      	strb	r0, [r3, #2]
 8018f7e:	69e8      	ldr	r0, [r5, #28]
 8018f80:	719a      	strb	r2, [r3, #6]
 8018f82:	7118      	strb	r0, [r3, #4]
 8018f84:	2003      	movs	r0, #3
 8018f86:	71da      	strb	r2, [r3, #7]
 8018f88:	7158      	strb	r0, [r3, #5]
 8018f8a:	721a      	strb	r2, [r3, #8]
 8018f8c:	9b03      	ldr	r3, [sp, #12]
      pHidDesc->bcdHID = 0x0111U;
 8018f8e:	2011      	movs	r0, #17
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8018f90:	185b      	adds	r3, r3, r1
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 8018f92:	19db      	adds	r3, r3, r7
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 8018f94:	7019      	strb	r1, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 8018f96:	3118      	adds	r1, #24
 8018f98:	7059      	strb	r1, [r3, #1]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8018f9a:	2121      	movs	r1, #33	@ 0x21
      pHidDesc->bcdHID = 0x0111U;
 8018f9c:	7098      	strb	r0, [r3, #2]
 8018f9e:	3810      	subs	r0, #16
      pHidDesc->bNumDescriptors = 0x01U;
 8018fa0:	7158      	strb	r0, [r3, #5]
      pHidDesc->bcdHID = 0x0111U;
 8018fa2:	70d8      	strb	r0, [r3, #3]
      pHidDesc->bHIDDescriptorType = 0x22U;
 8018fa4:	3021      	adds	r0, #33	@ 0x21
      pHidDesc->bCountryCode = 0x00U;
 8018fa6:	711a      	strb	r2, [r3, #4]
      pHidDesc->bHIDDescriptorType = 0x22U;
 8018fa8:	7198      	strb	r0, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8018faa:	71d9      	strb	r1, [r3, #7]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018fac:	8da9      	ldrh	r1, [r5, #44]	@ 0x2c
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8018fae:	721a      	strb	r2, [r3, #8]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018fb0:	9106      	str	r1, [sp, #24]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fb2:	2107      	movs	r1, #7
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8018fb4:	9a03      	ldr	r2, [sp, #12]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fb6:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8018fb8:	3212      	adds	r2, #18
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fba:	19d2      	adds	r2, r2, r7
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fbc:	7011      	strb	r1, [r2, #0]
 8018fbe:	3902      	subs	r1, #2
 8018fc0:	7051      	strb	r1, [r2, #1]
 8018fc2:	1869      	adds	r1, r5, r1
 8018fc4:	7fc9      	ldrb	r1, [r1, #31]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fc6:	9b03      	ldr	r3, [sp, #12]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fc8:	7091      	strb	r1, [r2, #2]
 8018fca:	7110      	strb	r0, [r2, #4]
 8018fcc:	0a00      	lsrs	r0, r0, #8
 8018fce:	7150      	strb	r0, [r2, #5]
 8018fd0:	2103      	movs	r1, #3
 8018fd2:	2001      	movs	r0, #1
 8018fd4:	70d1      	strb	r1, [r2, #3]
 8018fd6:	7190      	strb	r0, [r2, #6]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018fd8:	2207      	movs	r2, #7
 8018fda:	2103      	movs	r1, #3
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8018fdc:	3319      	adds	r3, #25
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018fde:	19db      	adds	r3, r3, r7
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018fe0:	701a      	strb	r2, [r3, #0]
 8018fe2:	3a02      	subs	r2, #2
 8018fe4:	705a      	strb	r2, [r3, #1]
 8018fe6:	352a      	adds	r5, #42	@ 0x2a
 8018fe8:	782a      	ldrb	r2, [r5, #0]
 8018fea:	70d9      	strb	r1, [r3, #3]
 8018fec:	709a      	strb	r2, [r3, #2]
 8018fee:	9a06      	ldr	r2, [sp, #24]
 8018ff0:	7198      	strb	r0, [r3, #6]
 8018ff2:	711a      	strb	r2, [r3, #4]
 8018ff4:	0a11      	lsrs	r1, r2, #8
 8018ff6:	4662      	mov	r2, ip
 8018ff8:	7159      	strb	r1, [r3, #5]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018ffa:	9b03      	ldr	r3, [sp, #12]
 8018ffc:	3320      	adds	r3, #32
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8018ffe:	6293      	str	r3, [r2, #40]	@ 0x28
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8019000:	793b      	ldrb	r3, [r7, #4]
 8019002:	3301      	adds	r3, #1
 8019004:	713b      	strb	r3, [r7, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8019006:	0023      	movs	r3, r4
 8019008:	33fc      	adds	r3, #252	@ 0xfc
 801900a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801900c:	b293      	uxth	r3, r2
 801900e:	0a1b      	lsrs	r3, r3, #8
 8019010:	70ba      	strb	r2, [r7, #2]
 8019012:	70fb      	strb	r3, [r7, #3]
}
 8019014:	e6b7      	b.n	8018d86 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xb2>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 8019016:	2340      	movs	r3, #64	@ 0x40
 8019018:	002a      	movs	r2, r5
 801901a:	2182      	movs	r1, #130	@ 0x82
 801901c:	0020      	movs	r0, r4
 801901e:	f7ff fe1f 	bl	8018c60 <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 8019022:	2340      	movs	r3, #64	@ 0x40
 8019024:	e719      	b.n	8018e5a <USBD_Device_Framework_Builder.constprop.0.isra.0+0x186>
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 8019026:	4b05      	ldr	r3, [pc, #20]	@ (801903c <USBD_Device_Framework_Builder.constprop.0.isra.0+0x368>)
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	2b02      	cmp	r3, #2
 801902c:	d000      	beq.n	8019030 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x35c>
 801902e:	e6c0      	b.n	8018db2 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xde>
      pDevDesc->bDeviceClass = 0x02;
 8019030:	7133      	strb	r3, [r6, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8019032:	7173      	strb	r3, [r6, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8019034:	2300      	movs	r3, #0
 8019036:	e6bb      	b.n	8018db0 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xdc>
 8019038:	200061e8 	.word	0x200061e8
 801903c:	200002b5 	.word	0x200002b5
 8019040:	200002b8 	.word	0x200002b8
 8019044:	200061e4 	.word	0x200061e4
 8019048:	20006480 	.word	0x20006480

0801904c <USBD_Get_Device_Framework_Speed>:
{
 801904c:	b570      	push	{r4, r5, r6, lr}
 801904e:	0002      	movs	r2, r0
 8019050:	000d      	movs	r5, r1
  if (USBD_FULL_SPEED == Speed)
 8019052:	2800      	cmp	r0, #0
 8019054:	d10c      	bne.n	8019070 <USBD_Get_Device_Framework_Speed+0x24>
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8019056:	4c08      	ldr	r4, [pc, #32]	@ (8019078 <USBD_Get_Device_Framework_Speed+0x2c>)
 8019058:	4e08      	ldr	r6, [pc, #32]	@ (801907c <USBD_Get_Device_Framework_Speed+0x30>)
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801905a:	0030      	movs	r0, r6
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801905c:	36fc      	adds	r6, #252	@ 0xfc
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801905e:	0021      	movs	r1, r4
 8019060:	f7ff fe38 	bl	8018cd4 <USBD_Device_Framework_Builder.constprop.0.isra.0>
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8019064:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8019066:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
    pFrameWork = pDevFrameWorkDesc_HS;
 8019068:	0020      	movs	r0, r4
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801906a:	189b      	adds	r3, r3, r2
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 801906c:	602b      	str	r3, [r5, #0]
}
 801906e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8019070:	4c03      	ldr	r4, [pc, #12]	@ (8019080 <USBD_Get_Device_Framework_Speed+0x34>)
 8019072:	4e04      	ldr	r6, [pc, #16]	@ (8019084 <USBD_Get_Device_Framework_Speed+0x38>)
 8019074:	e7f1      	b.n	801905a <USBD_Get_Device_Framework_Speed+0xe>
 8019076:	46c0      	nop			@ (mov r8, r8)
 8019078:	200063b8 	.word	0x200063b8
 801907c:	200065ac 	.word	0x200065ac
 8019080:	200062f0 	.word	0x200062f0
 8019084:	20006484 	.word	0x20006484

08019088 <USBD_Get_String_Framework>:
{
 8019088:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801908a:	4b20      	ldr	r3, [pc, #128]	@ (801910c <USBD_Get_String_Framework+0x84>)
 801908c:	4d20      	ldr	r5, [pc, #128]	@ (8019110 <USBD_Get_String_Framework+0x88>)
{
 801908e:	b085      	sub	sp, #20
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019090:	802b      	strh	r3, [r5, #0]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8019092:	2301      	movs	r3, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019094:	2709      	movs	r7, #9
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8019096:	2604      	movs	r6, #4
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8019098:	70ab      	strb	r3, [r5, #2]
  if (desc == NULL)
 801909a:	ab02      	add	r3, sp, #8
{
 801909c:	9001      	str	r0, [sp, #4]
 801909e:	1d9a      	adds	r2, r3, #6
 80190a0:	491c      	ldr	r1, [pc, #112]	@ (8019114 <USBD_Get_String_Framework+0x8c>)
 80190a2:	481d      	ldr	r0, [pc, #116]	@ (8019118 <USBD_Get_String_Framework+0x90>)
 80190a4:	f7ff fe01 	bl	8018caa <USBD_Desc_GetString.part.0>
  count += len + 1;
 80190a8:	ab02      	add	r3, sp, #8
 80190aa:	799b      	ldrb	r3, [r3, #6]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80190ac:	481b      	ldr	r0, [pc, #108]	@ (801911c <USBD_Get_String_Framework+0x94>)
  count += len + 1;
 80190ae:	1d1a      	adds	r2, r3, #4
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80190b0:	b2d2      	uxtb	r2, r2
 80190b2:	54af      	strb	r7, [r5, r2]
 80190b4:	1d5a      	adds	r2, r3, #5
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80190b6:	b2d2      	uxtb	r2, r2
 80190b8:	54ae      	strb	r6, [r5, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80190ba:	2202      	movs	r2, #2
 80190bc:	1ddc      	adds	r4, r3, #7
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80190be:	3306      	adds	r3, #6
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	54ea      	strb	r2, [r5, r3]
 80190c4:	b2e4      	uxtb	r4, r4
  if (desc == NULL)
 80190c6:	ab02      	add	r3, sp, #8
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 80190c8:	1961      	adds	r1, r4, r5
 80190ca:	1d9a      	adds	r2, r3, #6
 80190cc:	f7ff fded 	bl	8018caa <USBD_Desc_GetString.part.0>
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80190d0:	2203      	movs	r2, #3
  count += len + 1;
 80190d2:	ab02      	add	r3, sp, #8
 80190d4:	88db      	ldrh	r3, [r3, #6]
 80190d6:	4812      	ldr	r0, [pc, #72]	@ (8019120 <USBD_Get_String_Framework+0x98>)
 80190d8:	18e4      	adds	r4, r4, r3
 80190da:	b2e4      	uxtb	r4, r4
 80190dc:	1c63      	adds	r3, r4, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80190de:	b2db      	uxtb	r3, r3
 80190e0:	54ef      	strb	r7, [r5, r3]
 80190e2:	1ca3      	adds	r3, r4, #2
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80190e4:	b2db      	uxtb	r3, r3
 80190e6:	54ee      	strb	r6, [r5, r3]
 80190e8:	1ce3      	adds	r3, r4, #3
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	19a4      	adds	r4, r4, r6
 80190ee:	54ea      	strb	r2, [r5, r3]
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80190f0:	b2e1      	uxtb	r1, r4
 80190f2:	ab02      	add	r3, sp, #8
 80190f4:	1d9a      	adds	r2, r3, #6
 80190f6:	1949      	adds	r1, r1, r5
 80190f8:	f7ff fdd7 	bl	8018caa <USBD_Desc_GetString.part.0>
  *Length = strlen((const char *)USBD_string_framework);
 80190fc:	0028      	movs	r0, r5
 80190fe:	f7e7 f803 	bl	8000108 <strlen>
 8019102:	9b01      	ldr	r3, [sp, #4]
 8019104:	6018      	str	r0, [r3, #0]
}
 8019106:	0028      	movs	r0, r5
 8019108:	b005      	add	sp, #20
 801910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801910c:	00000409 	.word	0x00000409
 8019110:	200061f0 	.word	0x200061f0
 8019114:	200061f3 	.word	0x200061f3
 8019118:	0801fb62 	.word	0x0801fb62
 801911c:	0801fb69 	.word	0x0801fb69
 8019120:	0801fb78 	.word	0x0801fb78

08019124 <USBD_Get_Language_Id_Framework>:
{
 8019124:	b570      	push	{r4, r5, r6, lr}
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8019126:	4c05      	ldr	r4, [pc, #20]	@ (801913c <USBD_Get_Language_Id_Framework+0x18>)
 8019128:	4b05      	ldr	r3, [pc, #20]	@ (8019140 <USBD_Get_Language_Id_Framework+0x1c>)
{
 801912a:	0005      	movs	r5, r0
  *Length = strlen((const char *)USBD_language_id_framework);
 801912c:	0020      	movs	r0, r4
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801912e:	8023      	strh	r3, [r4, #0]
  *Length = strlen((const char *)USBD_language_id_framework);
 8019130:	f7e6 ffea 	bl	8000108 <strlen>
 8019134:	6028      	str	r0, [r5, #0]
}
 8019136:	0020      	movs	r0, r4
 8019138:	bd70      	pop	{r4, r5, r6, pc}
 801913a:	46c0      	nop			@ (mov r8, r8)
 801913c:	200061ec 	.word	0x200061ec
 8019140:	00000409 	.word	0x00000409

08019144 <USBD_Get_Interface_Number>:
{
 8019144:	b530      	push	{r4, r5, lr}
 8019146:	2303      	movs	r3, #3
 8019148:	0004      	movs	r4, r0
  uint8_t itf_num = 0U;
 801914a:	2000      	movs	r0, #0
 801914c:	4a07      	ldr	r2, [pc, #28]	@ (801916c <USBD_Get_Interface_Number+0x28>)
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801914e:	7b15      	ldrb	r5, [r2, #12]
 8019150:	42a5      	cmp	r5, r4
 8019152:	d105      	bne.n	8019160 <USBD_Get_Interface_Number+0x1c>
 8019154:	7d15      	ldrb	r5, [r2, #20]
 8019156:	428d      	cmp	r5, r1
 8019158:	d102      	bne.n	8019160 <USBD_Get_Interface_Number+0x1c>
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 801915a:	0010      	movs	r0, r2
 801915c:	305a      	adds	r0, #90	@ 0x5a
 801915e:	7800      	ldrb	r0, [r0, #0]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8019160:	3b01      	subs	r3, #1
 8019162:	b2db      	uxtb	r3, r3
 8019164:	325c      	adds	r2, #92	@ 0x5c
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1f1      	bne.n	801914e <USBD_Get_Interface_Number+0xa>
}
 801916a:	bd30      	pop	{r4, r5, pc}
 801916c:	200065ac 	.word	0x200065ac

08019170 <USBD_Get_Configuration_Number>:
}
 8019170:	2001      	movs	r0, #1
 8019172:	4770      	bx	lr

08019174 <USBD_HID_ReportDesc>:
{
 8019174:	0003      	movs	r3, r0
  uint8_t *pHidReportDesc = NULL;
 8019176:	425a      	negs	r2, r3
 8019178:	4153      	adcs	r3, r2
      pHidReportDesc = USBD_CustomHID_ReportDesc;
 801917a:	4802      	ldr	r0, [pc, #8]	@ (8019184 <USBD_HID_ReportDesc+0x10>)
  uint8_t *pHidReportDesc = NULL;
 801917c:	425b      	negs	r3, r3
 801917e:	4018      	ands	r0, r3
}
 8019180:	4770      	bx	lr
 8019182:	46c0      	nop			@ (mov r8, r8)
 8019184:	20000294 	.word	0x20000294

08019188 <USBD_HID_ReportDesc_length>:
{
 8019188:	0003      	movs	r3, r0
  uint16_t ReportDesc_Size = 0;
 801918a:	425a      	negs	r2, r3
 801918c:	4153      	adcs	r3, r2
      ReportDesc_Size = sizeof(USBD_CustomHID_ReportDesc);
 801918e:	2021      	movs	r0, #33	@ 0x21
  uint16_t ReportDesc_Size = 0;
 8019190:	425b      	negs	r3, r3
 8019192:	4018      	ands	r0, r3
}
 8019194:	4770      	bx	lr

08019196 <USBD_STORAGE_Activate>:
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
}
 8019196:	4770      	bx	lr

08019198 <USBD_STORAGE_Deactivate>:
  * @brief  USBD_STORAGE_Deactivate
  *         This function is called when extraction of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Deactivate(VOID *storage_instance)
 8019198:	4770      	bx	lr
	...

0801919c <USBD_STORAGE_Read>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Read(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                       ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 801919c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN USBD_STORAGE_Read */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);

  while(number_blocks--) {
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 801919e:	2780      	movs	r7, #128	@ 0x80
{
 80191a0:	0015      	movs	r5, r2
 80191a2:	9c08      	ldr	r4, [sp, #32]
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 80191a4:	017f      	lsls	r7, r7, #5
 80191a6:	191e      	adds	r6, r3, r4
  while(number_blocks--) {
 80191a8:	42b4      	cmp	r4, r6
 80191aa:	d10e      	bne.n	80191ca <USBD_STORAGE_Read+0x2e>
	  lba ++;
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
  }
  LOG_USB_MSC("--> USBD_STORAGE_Read: lba=%lu, num_blocks=%lu, status:%u\r\n", lba, (number_blocks+1),status);
 80191ac:	2500      	movs	r5, #0
 80191ae:	4b0c      	ldr	r3, [pc, #48]	@ (80191e0 <USBD_STORAGE_Read+0x44>)
 80191b0:	4a0c      	ldr	r2, [pc, #48]	@ (80191e4 <USBD_STORAGE_Read+0x48>)
 80191b2:	6818      	ldr	r0, [r3, #0]
 80191b4:	9501      	str	r5, [sp, #4]
 80191b6:	9500      	str	r5, [sp, #0]
 80191b8:	0023      	movs	r3, r4
 80191ba:	490b      	ldr	r1, [pc, #44]	@ (80191e8 <USBD_STORAGE_Read+0x4c>)
 80191bc:	68c0      	ldr	r0, [r0, #12]
 80191be:	f000 fd4f 	bl	8019c60 <fiprintf>
    /* Set the media status with the result */
    *media_status = status;
 80191c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24

  /* USER CODE END USBD_STORAGE_Read */

  return status;
}
 80191c4:	0028      	movs	r0, r5
    *media_status = status;
 80191c6:	601d      	str	r5, [r3, #0]
}
 80191c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	  SPI_FLASH_ReadData(lba * MSC_MEDIA_BLOCK_SIZE, data_pointer, MSC_MEDIA_BLOCK_SIZE);
 80191ca:	0029      	movs	r1, r5
 80191cc:	0320      	lsls	r0, r4, #12
 80191ce:	003a      	movs	r2, r7
 80191d0:	f7f0 fd60 	bl	8009c94 <SPI_FLASH_ReadData>
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
 80191d4:	2380      	movs	r3, #128	@ 0x80
 80191d6:	015b      	lsls	r3, r3, #5
	  lba ++;
 80191d8:	3401      	adds	r4, #1
	  data_pointer += MSC_MEDIA_BLOCK_SIZE;
 80191da:	18ed      	adds	r5, r5, r3
 80191dc:	e7e4      	b.n	80191a8 <USBD_STORAGE_Read+0xc>
 80191de:	46c0      	nop			@ (mov r8, r8)
 80191e0:	200002cc 	.word	0x200002cc
 80191e4:	0801e1ec 	.word	0x0801e1ec
 80191e8:	0801fb85 	.word	0x0801fb85

080191ec <USBD_STORAGE_Write>:
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(data_pointer);
  UX_PARAMETER_NOT_USED(number_blocks);
  UX_PARAMETER_NOT_USED(lba);

  *media_status = status;
 80191ec:	2000      	movs	r0, #0
 80191ee:	9b01      	ldr	r3, [sp, #4]
 80191f0:	6018      	str	r0, [r3, #0]
  /* USER CODE END USBD_STORAGE_Write */

  return status;
}
 80191f2:	4770      	bx	lr

080191f4 <USBD_STORAGE_Flush>:
  UX_PARAMETER_NOT_USED(lba);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Flush */

  return status;
}
 80191f4:	2000      	movs	r0, #0
 80191f6:	4770      	bx	lr

080191f8 <USBD_STORAGE_Status>:
  /* USER CODE BEGIN USBD_STORAGE_Status */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_id);
//  LOG_USB_MSC("USBD_STORAGE_Status\r\n");
  *media_status = UX_SUCCESS ;
 80191f8:	2000      	movs	r0, #0
 80191fa:	6018      	str	r0, [r3, #0]
  /* USER CODE END USBD_STORAGE_Status */

  return status;
}
 80191fc:	4770      	bx	lr

080191fe <USBD_STORAGE_Notification>:
  UX_PARAMETER_NOT_USED(media_notification);
  UX_PARAMETER_NOT_USED(media_notification_length);
  /* USER CODE END USBD_STORAGE_Notification */

  return status;
}
 80191fe:	2000      	movs	r0, #0
 8019200:	4770      	bx	lr
	...

08019204 <USBD_STORAGE_GetMediaLastLba>:
{
  ULONG LastLba = 0U;

  /* USER CODE BEGIN USBD_STORAGE_GetMediaLastLba */
  LastLba = MSC_TOTAL_SECTORS -1;
  LOG_USB_MSC("USBD_STORAGE_GetMediaLastLba:%d\r\n",(int)LastLba);
 8019204:	4b05      	ldr	r3, [pc, #20]	@ (801921c <USBD_STORAGE_GetMediaLastLba+0x18>)
{
 8019206:	b510      	push	{r4, lr}
  LOG_USB_MSC("USBD_STORAGE_GetMediaLastLba:%d\r\n",(int)LastLba);
 8019208:	6818      	ldr	r0, [r3, #0]
 801920a:	4a05      	ldr	r2, [pc, #20]	@ (8019220 <USBD_STORAGE_GetMediaLastLba+0x1c>)
 801920c:	23ff      	movs	r3, #255	@ 0xff
 801920e:	4905      	ldr	r1, [pc, #20]	@ (8019224 <USBD_STORAGE_GetMediaLastLba+0x20>)
 8019210:	68c0      	ldr	r0, [r0, #12]
 8019212:	f000 fd25 	bl	8019c60 <fiprintf>
  /* USER CODE END USBD_STORAGE_GetMediaLastLba */

  return LastLba;
}
 8019216:	20ff      	movs	r0, #255	@ 0xff
 8019218:	bd10      	pop	{r4, pc}
 801921a:	46c0      	nop			@ (mov r8, r8)
 801921c:	200002cc 	.word	0x200002cc
 8019220:	0801e1ec 	.word	0x0801e1ec
 8019224:	0801fbc6 	.word	0x0801fbc6

08019228 <USBD_STORAGE_GetMediaBlocklength>:
  *         Get Media block length.
  * @param  none.
  * @retval block length.
  */
ULONG USBD_STORAGE_GetMediaBlocklength(VOID)
{
 8019228:	b510      	push	{r4, lr}
  ULONG MediaBlockLen = 0U;

  /* USER CODE BEGIN USBD_STORAGE_GetMediaBlocklength */
  MediaBlockLen = MSC_MEDIA_BLOCK_SIZE;
  LOG_USB_MSC("USBD_STORAGE_GetMediaBlocklength:%d\r\n",(int)MediaBlockLen);
 801922a:	2480      	movs	r4, #128	@ 0x80
 801922c:	4b05      	ldr	r3, [pc, #20]	@ (8019244 <USBD_STORAGE_GetMediaBlocklength+0x1c>)
 801922e:	0164      	lsls	r4, r4, #5
 8019230:	6818      	ldr	r0, [r3, #0]
 8019232:	4a05      	ldr	r2, [pc, #20]	@ (8019248 <USBD_STORAGE_GetMediaBlocklength+0x20>)
 8019234:	0023      	movs	r3, r4
 8019236:	4905      	ldr	r1, [pc, #20]	@ (801924c <USBD_STORAGE_GetMediaBlocklength+0x24>)
 8019238:	68c0      	ldr	r0, [r0, #12]
 801923a:	f000 fd11 	bl	8019c60 <fiprintf>
  /* USER CODE END USBD_STORAGE_GetMediaBlocklength */

  return MediaBlockLen;
}
 801923e:	0020      	movs	r0, r4
 8019240:	bd10      	pop	{r4, pc}
 8019242:	46c0      	nop			@ (mov r8, r8)
 8019244:	200002cc 	.word	0x200002cc
 8019248:	0801e1ec 	.word	0x0801e1ec
 801924c:	0801fbed 	.word	0x0801fbed

08019250 <__cvt>:
 8019250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019252:	001f      	movs	r7, r3
 8019254:	2300      	movs	r3, #0
 8019256:	0016      	movs	r6, r2
 8019258:	b08b      	sub	sp, #44	@ 0x2c
 801925a:	429f      	cmp	r7, r3
 801925c:	da04      	bge.n	8019268 <__cvt+0x18>
 801925e:	2180      	movs	r1, #128	@ 0x80
 8019260:	0609      	lsls	r1, r1, #24
 8019262:	187b      	adds	r3, r7, r1
 8019264:	001f      	movs	r7, r3
 8019266:	232d      	movs	r3, #45	@ 0x2d
 8019268:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801926a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801926c:	7013      	strb	r3, [r2, #0]
 801926e:	2320      	movs	r3, #32
 8019270:	2203      	movs	r2, #3
 8019272:	439d      	bics	r5, r3
 8019274:	2d46      	cmp	r5, #70	@ 0x46
 8019276:	d007      	beq.n	8019288 <__cvt+0x38>
 8019278:	002b      	movs	r3, r5
 801927a:	3b45      	subs	r3, #69	@ 0x45
 801927c:	4259      	negs	r1, r3
 801927e:	414b      	adcs	r3, r1
 8019280:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019282:	3a01      	subs	r2, #1
 8019284:	18cb      	adds	r3, r1, r3
 8019286:	9310      	str	r3, [sp, #64]	@ 0x40
 8019288:	ab09      	add	r3, sp, #36	@ 0x24
 801928a:	9304      	str	r3, [sp, #16]
 801928c:	ab08      	add	r3, sp, #32
 801928e:	9303      	str	r3, [sp, #12]
 8019290:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019292:	9200      	str	r2, [sp, #0]
 8019294:	9302      	str	r3, [sp, #8]
 8019296:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019298:	0032      	movs	r2, r6
 801929a:	9301      	str	r3, [sp, #4]
 801929c:	003b      	movs	r3, r7
 801929e:	f001 f82f 	bl	801a300 <_dtoa_r>
 80192a2:	0004      	movs	r4, r0
 80192a4:	2d47      	cmp	r5, #71	@ 0x47
 80192a6:	d11b      	bne.n	80192e0 <__cvt+0x90>
 80192a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80192aa:	07db      	lsls	r3, r3, #31
 80192ac:	d511      	bpl.n	80192d2 <__cvt+0x82>
 80192ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80192b0:	18c3      	adds	r3, r0, r3
 80192b2:	9307      	str	r3, [sp, #28]
 80192b4:	2200      	movs	r2, #0
 80192b6:	2300      	movs	r3, #0
 80192b8:	0030      	movs	r0, r6
 80192ba:	0039      	movs	r1, r7
 80192bc:	f7e7 f8da 	bl	8000474 <__aeabi_dcmpeq>
 80192c0:	2800      	cmp	r0, #0
 80192c2:	d001      	beq.n	80192c8 <__cvt+0x78>
 80192c4:	9b07      	ldr	r3, [sp, #28]
 80192c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80192c8:	2230      	movs	r2, #48	@ 0x30
 80192ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192cc:	9907      	ldr	r1, [sp, #28]
 80192ce:	428b      	cmp	r3, r1
 80192d0:	d320      	bcc.n	8019314 <__cvt+0xc4>
 80192d2:	0020      	movs	r0, r4
 80192d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80192d8:	1b1b      	subs	r3, r3, r4
 80192da:	6013      	str	r3, [r2, #0]
 80192dc:	b00b      	add	sp, #44	@ 0x2c
 80192de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80192e2:	18c3      	adds	r3, r0, r3
 80192e4:	9307      	str	r3, [sp, #28]
 80192e6:	2d46      	cmp	r5, #70	@ 0x46
 80192e8:	d1e4      	bne.n	80192b4 <__cvt+0x64>
 80192ea:	7803      	ldrb	r3, [r0, #0]
 80192ec:	2b30      	cmp	r3, #48	@ 0x30
 80192ee:	d10c      	bne.n	801930a <__cvt+0xba>
 80192f0:	2200      	movs	r2, #0
 80192f2:	2300      	movs	r3, #0
 80192f4:	0030      	movs	r0, r6
 80192f6:	0039      	movs	r1, r7
 80192f8:	f7e7 f8bc 	bl	8000474 <__aeabi_dcmpeq>
 80192fc:	2800      	cmp	r0, #0
 80192fe:	d104      	bne.n	801930a <__cvt+0xba>
 8019300:	2301      	movs	r3, #1
 8019302:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019304:	1a9b      	subs	r3, r3, r2
 8019306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019308:	6013      	str	r3, [r2, #0]
 801930a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801930c:	9a07      	ldr	r2, [sp, #28]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	18d3      	adds	r3, r2, r3
 8019312:	e7ce      	b.n	80192b2 <__cvt+0x62>
 8019314:	1c59      	adds	r1, r3, #1
 8019316:	9109      	str	r1, [sp, #36]	@ 0x24
 8019318:	701a      	strb	r2, [r3, #0]
 801931a:	e7d6      	b.n	80192ca <__cvt+0x7a>

0801931c <__exponent>:
 801931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801931e:	232b      	movs	r3, #43	@ 0x2b
 8019320:	b085      	sub	sp, #20
 8019322:	0005      	movs	r5, r0
 8019324:	1e0c      	subs	r4, r1, #0
 8019326:	7002      	strb	r2, [r0, #0]
 8019328:	da01      	bge.n	801932e <__exponent+0x12>
 801932a:	424c      	negs	r4, r1
 801932c:	3302      	adds	r3, #2
 801932e:	706b      	strb	r3, [r5, #1]
 8019330:	2c09      	cmp	r4, #9
 8019332:	dd2c      	ble.n	801938e <__exponent+0x72>
 8019334:	ab02      	add	r3, sp, #8
 8019336:	1dde      	adds	r6, r3, #7
 8019338:	0020      	movs	r0, r4
 801933a:	210a      	movs	r1, #10
 801933c:	f7e7 f884 	bl	8000448 <__aeabi_idivmod>
 8019340:	0037      	movs	r7, r6
 8019342:	3130      	adds	r1, #48	@ 0x30
 8019344:	3e01      	subs	r6, #1
 8019346:	0020      	movs	r0, r4
 8019348:	7031      	strb	r1, [r6, #0]
 801934a:	210a      	movs	r1, #10
 801934c:	9401      	str	r4, [sp, #4]
 801934e:	f7e6 ff95 	bl	800027c <__divsi3>
 8019352:	9b01      	ldr	r3, [sp, #4]
 8019354:	0004      	movs	r4, r0
 8019356:	2b63      	cmp	r3, #99	@ 0x63
 8019358:	dcee      	bgt.n	8019338 <__exponent+0x1c>
 801935a:	1eba      	subs	r2, r7, #2
 801935c:	1ca8      	adds	r0, r5, #2
 801935e:	0001      	movs	r1, r0
 8019360:	0013      	movs	r3, r2
 8019362:	3430      	adds	r4, #48	@ 0x30
 8019364:	7014      	strb	r4, [r2, #0]
 8019366:	ac02      	add	r4, sp, #8
 8019368:	3407      	adds	r4, #7
 801936a:	429c      	cmp	r4, r3
 801936c:	d80a      	bhi.n	8019384 <__exponent+0x68>
 801936e:	2300      	movs	r3, #0
 8019370:	4294      	cmp	r4, r2
 8019372:	d303      	bcc.n	801937c <__exponent+0x60>
 8019374:	3309      	adds	r3, #9
 8019376:	aa02      	add	r2, sp, #8
 8019378:	189b      	adds	r3, r3, r2
 801937a:	1bdb      	subs	r3, r3, r7
 801937c:	18c0      	adds	r0, r0, r3
 801937e:	1b40      	subs	r0, r0, r5
 8019380:	b005      	add	sp, #20
 8019382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019384:	781c      	ldrb	r4, [r3, #0]
 8019386:	3301      	adds	r3, #1
 8019388:	700c      	strb	r4, [r1, #0]
 801938a:	3101      	adds	r1, #1
 801938c:	e7eb      	b.n	8019366 <__exponent+0x4a>
 801938e:	2330      	movs	r3, #48	@ 0x30
 8019390:	18e4      	adds	r4, r4, r3
 8019392:	70ab      	strb	r3, [r5, #2]
 8019394:	1d28      	adds	r0, r5, #4
 8019396:	70ec      	strb	r4, [r5, #3]
 8019398:	e7f1      	b.n	801937e <__exponent+0x62>
	...

0801939c <_printf_float>:
 801939c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801939e:	b097      	sub	sp, #92	@ 0x5c
 80193a0:	000d      	movs	r5, r1
 80193a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80193a4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80193a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80193aa:	f000 fe89 	bl	801a0c0 <_localeconv_r>
 80193ae:	6803      	ldr	r3, [r0, #0]
 80193b0:	0018      	movs	r0, r3
 80193b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80193b4:	f7e6 fea8 	bl	8000108 <strlen>
 80193b8:	2300      	movs	r3, #0
 80193ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80193bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80193be:	7e2b      	ldrb	r3, [r5, #24]
 80193c0:	2207      	movs	r2, #7
 80193c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80193c4:	682b      	ldr	r3, [r5, #0]
 80193c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80193c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80193ca:	6823      	ldr	r3, [r4, #0]
 80193cc:	05c9      	lsls	r1, r1, #23
 80193ce:	d545      	bpl.n	801945c <_printf_float+0xc0>
 80193d0:	189b      	adds	r3, r3, r2
 80193d2:	4393      	bics	r3, r2
 80193d4:	001a      	movs	r2, r3
 80193d6:	3208      	adds	r2, #8
 80193d8:	6022      	str	r2, [r4, #0]
 80193da:	2201      	movs	r2, #1
 80193dc:	681e      	ldr	r6, [r3, #0]
 80193de:	685f      	ldr	r7, [r3, #4]
 80193e0:	007b      	lsls	r3, r7, #1
 80193e2:	085b      	lsrs	r3, r3, #1
 80193e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80193e6:	9610      	str	r6, [sp, #64]	@ 0x40
 80193e8:	64ae      	str	r6, [r5, #72]	@ 0x48
 80193ea:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80193ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80193ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80193f0:	4ba7      	ldr	r3, [pc, #668]	@ (8019690 <_printf_float+0x2f4>)
 80193f2:	4252      	negs	r2, r2
 80193f4:	f7ea f920 	bl	8003638 <__aeabi_dcmpun>
 80193f8:	2800      	cmp	r0, #0
 80193fa:	d131      	bne.n	8019460 <_printf_float+0xc4>
 80193fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80193fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019400:	2201      	movs	r2, #1
 8019402:	4ba3      	ldr	r3, [pc, #652]	@ (8019690 <_printf_float+0x2f4>)
 8019404:	4252      	negs	r2, r2
 8019406:	f7e7 f845 	bl	8000494 <__aeabi_dcmple>
 801940a:	2800      	cmp	r0, #0
 801940c:	d128      	bne.n	8019460 <_printf_float+0xc4>
 801940e:	2200      	movs	r2, #0
 8019410:	2300      	movs	r3, #0
 8019412:	0030      	movs	r0, r6
 8019414:	0039      	movs	r1, r7
 8019416:	f7e7 f833 	bl	8000480 <__aeabi_dcmplt>
 801941a:	2800      	cmp	r0, #0
 801941c:	d003      	beq.n	8019426 <_printf_float+0x8a>
 801941e:	002b      	movs	r3, r5
 8019420:	222d      	movs	r2, #45	@ 0x2d
 8019422:	3343      	adds	r3, #67	@ 0x43
 8019424:	701a      	strb	r2, [r3, #0]
 8019426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019428:	4f9a      	ldr	r7, [pc, #616]	@ (8019694 <_printf_float+0x2f8>)
 801942a:	2b47      	cmp	r3, #71	@ 0x47
 801942c:	d800      	bhi.n	8019430 <_printf_float+0x94>
 801942e:	4f9a      	ldr	r7, [pc, #616]	@ (8019698 <_printf_float+0x2fc>)
 8019430:	2303      	movs	r3, #3
 8019432:	2400      	movs	r4, #0
 8019434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019436:	612b      	str	r3, [r5, #16]
 8019438:	3301      	adds	r3, #1
 801943a:	439a      	bics	r2, r3
 801943c:	602a      	str	r2, [r5, #0]
 801943e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019440:	0029      	movs	r1, r5
 8019442:	9300      	str	r3, [sp, #0]
 8019444:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019448:	aa15      	add	r2, sp, #84	@ 0x54
 801944a:	f000 f9e5 	bl	8019818 <_printf_common>
 801944e:	3001      	adds	r0, #1
 8019450:	d000      	beq.n	8019454 <_printf_float+0xb8>
 8019452:	e09e      	b.n	8019592 <_printf_float+0x1f6>
 8019454:	2001      	movs	r0, #1
 8019456:	4240      	negs	r0, r0
 8019458:	b017      	add	sp, #92	@ 0x5c
 801945a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801945c:	3307      	adds	r3, #7
 801945e:	e7b8      	b.n	80193d2 <_printf_float+0x36>
 8019460:	0032      	movs	r2, r6
 8019462:	003b      	movs	r3, r7
 8019464:	0030      	movs	r0, r6
 8019466:	0039      	movs	r1, r7
 8019468:	f7ea f8e6 	bl	8003638 <__aeabi_dcmpun>
 801946c:	2800      	cmp	r0, #0
 801946e:	d00b      	beq.n	8019488 <_printf_float+0xec>
 8019470:	2f00      	cmp	r7, #0
 8019472:	da03      	bge.n	801947c <_printf_float+0xe0>
 8019474:	002b      	movs	r3, r5
 8019476:	222d      	movs	r2, #45	@ 0x2d
 8019478:	3343      	adds	r3, #67	@ 0x43
 801947a:	701a      	strb	r2, [r3, #0]
 801947c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801947e:	4f87      	ldr	r7, [pc, #540]	@ (801969c <_printf_float+0x300>)
 8019480:	2b47      	cmp	r3, #71	@ 0x47
 8019482:	d8d5      	bhi.n	8019430 <_printf_float+0x94>
 8019484:	4f86      	ldr	r7, [pc, #536]	@ (80196a0 <_printf_float+0x304>)
 8019486:	e7d3      	b.n	8019430 <_printf_float+0x94>
 8019488:	2220      	movs	r2, #32
 801948a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801948c:	686b      	ldr	r3, [r5, #4]
 801948e:	4394      	bics	r4, r2
 8019490:	1c5a      	adds	r2, r3, #1
 8019492:	d146      	bne.n	8019522 <_printf_float+0x186>
 8019494:	3307      	adds	r3, #7
 8019496:	606b      	str	r3, [r5, #4]
 8019498:	2380      	movs	r3, #128	@ 0x80
 801949a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	4313      	orrs	r3, r2
 80194a0:	2200      	movs	r2, #0
 80194a2:	602b      	str	r3, [r5, #0]
 80194a4:	9206      	str	r2, [sp, #24]
 80194a6:	aa14      	add	r2, sp, #80	@ 0x50
 80194a8:	9205      	str	r2, [sp, #20]
 80194aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80194ac:	a90a      	add	r1, sp, #40	@ 0x28
 80194ae:	9204      	str	r2, [sp, #16]
 80194b0:	aa13      	add	r2, sp, #76	@ 0x4c
 80194b2:	9203      	str	r2, [sp, #12]
 80194b4:	2223      	movs	r2, #35	@ 0x23
 80194b6:	1852      	adds	r2, r2, r1
 80194b8:	9202      	str	r2, [sp, #8]
 80194ba:	9301      	str	r3, [sp, #4]
 80194bc:	686b      	ldr	r3, [r5, #4]
 80194be:	0032      	movs	r2, r6
 80194c0:	9300      	str	r3, [sp, #0]
 80194c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80194c4:	003b      	movs	r3, r7
 80194c6:	f7ff fec3 	bl	8019250 <__cvt>
 80194ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80194cc:	0007      	movs	r7, r0
 80194ce:	2c47      	cmp	r4, #71	@ 0x47
 80194d0:	d12d      	bne.n	801952e <_printf_float+0x192>
 80194d2:	1cd3      	adds	r3, r2, #3
 80194d4:	db02      	blt.n	80194dc <_printf_float+0x140>
 80194d6:	686b      	ldr	r3, [r5, #4]
 80194d8:	429a      	cmp	r2, r3
 80194da:	dd47      	ble.n	801956c <_printf_float+0x1d0>
 80194dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80194de:	3b02      	subs	r3, #2
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80194e4:	0028      	movs	r0, r5
 80194e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80194e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80194ea:	3901      	subs	r1, #1
 80194ec:	3050      	adds	r0, #80	@ 0x50
 80194ee:	9113      	str	r1, [sp, #76]	@ 0x4c
 80194f0:	f7ff ff14 	bl	801931c <__exponent>
 80194f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80194f6:	0004      	movs	r4, r0
 80194f8:	1813      	adds	r3, r2, r0
 80194fa:	612b      	str	r3, [r5, #16]
 80194fc:	2a01      	cmp	r2, #1
 80194fe:	dc02      	bgt.n	8019506 <_printf_float+0x16a>
 8019500:	682a      	ldr	r2, [r5, #0]
 8019502:	07d2      	lsls	r2, r2, #31
 8019504:	d501      	bpl.n	801950a <_printf_float+0x16e>
 8019506:	3301      	adds	r3, #1
 8019508:	612b      	str	r3, [r5, #16]
 801950a:	2323      	movs	r3, #35	@ 0x23
 801950c:	aa0a      	add	r2, sp, #40	@ 0x28
 801950e:	189b      	adds	r3, r3, r2
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d100      	bne.n	8019518 <_printf_float+0x17c>
 8019516:	e792      	b.n	801943e <_printf_float+0xa2>
 8019518:	002b      	movs	r3, r5
 801951a:	222d      	movs	r2, #45	@ 0x2d
 801951c:	3343      	adds	r3, #67	@ 0x43
 801951e:	701a      	strb	r2, [r3, #0]
 8019520:	e78d      	b.n	801943e <_printf_float+0xa2>
 8019522:	2c47      	cmp	r4, #71	@ 0x47
 8019524:	d1b8      	bne.n	8019498 <_printf_float+0xfc>
 8019526:	2b00      	cmp	r3, #0
 8019528:	d1b6      	bne.n	8019498 <_printf_float+0xfc>
 801952a:	3301      	adds	r3, #1
 801952c:	e7b3      	b.n	8019496 <_printf_float+0xfa>
 801952e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019530:	2b65      	cmp	r3, #101	@ 0x65
 8019532:	d9d7      	bls.n	80194e4 <_printf_float+0x148>
 8019534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019536:	2b66      	cmp	r3, #102	@ 0x66
 8019538:	d11a      	bne.n	8019570 <_printf_float+0x1d4>
 801953a:	686b      	ldr	r3, [r5, #4]
 801953c:	2a00      	cmp	r2, #0
 801953e:	dd09      	ble.n	8019554 <_printf_float+0x1b8>
 8019540:	612a      	str	r2, [r5, #16]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d102      	bne.n	801954c <_printf_float+0x1b0>
 8019546:	6829      	ldr	r1, [r5, #0]
 8019548:	07c9      	lsls	r1, r1, #31
 801954a:	d50b      	bpl.n	8019564 <_printf_float+0x1c8>
 801954c:	3301      	adds	r3, #1
 801954e:	189b      	adds	r3, r3, r2
 8019550:	612b      	str	r3, [r5, #16]
 8019552:	e007      	b.n	8019564 <_printf_float+0x1c8>
 8019554:	2b00      	cmp	r3, #0
 8019556:	d103      	bne.n	8019560 <_printf_float+0x1c4>
 8019558:	2201      	movs	r2, #1
 801955a:	6829      	ldr	r1, [r5, #0]
 801955c:	4211      	tst	r1, r2
 801955e:	d000      	beq.n	8019562 <_printf_float+0x1c6>
 8019560:	1c9a      	adds	r2, r3, #2
 8019562:	612a      	str	r2, [r5, #16]
 8019564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019566:	2400      	movs	r4, #0
 8019568:	65ab      	str	r3, [r5, #88]	@ 0x58
 801956a:	e7ce      	b.n	801950a <_printf_float+0x16e>
 801956c:	2367      	movs	r3, #103	@ 0x67
 801956e:	930c      	str	r3, [sp, #48]	@ 0x30
 8019570:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019572:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019574:	4299      	cmp	r1, r3
 8019576:	db06      	blt.n	8019586 <_printf_float+0x1ea>
 8019578:	682b      	ldr	r3, [r5, #0]
 801957a:	6129      	str	r1, [r5, #16]
 801957c:	07db      	lsls	r3, r3, #31
 801957e:	d5f1      	bpl.n	8019564 <_printf_float+0x1c8>
 8019580:	3101      	adds	r1, #1
 8019582:	6129      	str	r1, [r5, #16]
 8019584:	e7ee      	b.n	8019564 <_printf_float+0x1c8>
 8019586:	2201      	movs	r2, #1
 8019588:	2900      	cmp	r1, #0
 801958a:	dce0      	bgt.n	801954e <_printf_float+0x1b2>
 801958c:	1892      	adds	r2, r2, r2
 801958e:	1a52      	subs	r2, r2, r1
 8019590:	e7dd      	b.n	801954e <_printf_float+0x1b2>
 8019592:	682a      	ldr	r2, [r5, #0]
 8019594:	0553      	lsls	r3, r2, #21
 8019596:	d408      	bmi.n	80195aa <_printf_float+0x20e>
 8019598:	692b      	ldr	r3, [r5, #16]
 801959a:	003a      	movs	r2, r7
 801959c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801959e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80195a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80195a2:	47a0      	blx	r4
 80195a4:	3001      	adds	r0, #1
 80195a6:	d129      	bne.n	80195fc <_printf_float+0x260>
 80195a8:	e754      	b.n	8019454 <_printf_float+0xb8>
 80195aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80195ac:	2b65      	cmp	r3, #101	@ 0x65
 80195ae:	d800      	bhi.n	80195b2 <_printf_float+0x216>
 80195b0:	e0db      	b.n	801976a <_printf_float+0x3ce>
 80195b2:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80195b4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80195b6:	2200      	movs	r2, #0
 80195b8:	2300      	movs	r3, #0
 80195ba:	f7e6 ff5b 	bl	8000474 <__aeabi_dcmpeq>
 80195be:	2800      	cmp	r0, #0
 80195c0:	d033      	beq.n	801962a <_printf_float+0x28e>
 80195c2:	2301      	movs	r3, #1
 80195c4:	4a37      	ldr	r2, [pc, #220]	@ (80196a4 <_printf_float+0x308>)
 80195c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80195c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80195ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80195cc:	47a0      	blx	r4
 80195ce:	3001      	adds	r0, #1
 80195d0:	d100      	bne.n	80195d4 <_printf_float+0x238>
 80195d2:	e73f      	b.n	8019454 <_printf_float+0xb8>
 80195d4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80195d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80195d8:	42b3      	cmp	r3, r6
 80195da:	db02      	blt.n	80195e2 <_printf_float+0x246>
 80195dc:	682b      	ldr	r3, [r5, #0]
 80195de:	07db      	lsls	r3, r3, #31
 80195e0:	d50c      	bpl.n	80195fc <_printf_float+0x260>
 80195e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80195e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80195e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80195e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80195ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80195ec:	47a0      	blx	r4
 80195ee:	2400      	movs	r4, #0
 80195f0:	3001      	adds	r0, #1
 80195f2:	d100      	bne.n	80195f6 <_printf_float+0x25a>
 80195f4:	e72e      	b.n	8019454 <_printf_float+0xb8>
 80195f6:	1e73      	subs	r3, r6, #1
 80195f8:	42a3      	cmp	r3, r4
 80195fa:	dc0a      	bgt.n	8019612 <_printf_float+0x276>
 80195fc:	682b      	ldr	r3, [r5, #0]
 80195fe:	079b      	lsls	r3, r3, #30
 8019600:	d500      	bpl.n	8019604 <_printf_float+0x268>
 8019602:	e106      	b.n	8019812 <_printf_float+0x476>
 8019604:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019606:	68e8      	ldr	r0, [r5, #12]
 8019608:	4298      	cmp	r0, r3
 801960a:	db00      	blt.n	801960e <_printf_float+0x272>
 801960c:	e724      	b.n	8019458 <_printf_float+0xbc>
 801960e:	0018      	movs	r0, r3
 8019610:	e722      	b.n	8019458 <_printf_float+0xbc>
 8019612:	002a      	movs	r2, r5
 8019614:	2301      	movs	r3, #1
 8019616:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019618:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801961a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801961c:	321a      	adds	r2, #26
 801961e:	47b8      	blx	r7
 8019620:	3001      	adds	r0, #1
 8019622:	d100      	bne.n	8019626 <_printf_float+0x28a>
 8019624:	e716      	b.n	8019454 <_printf_float+0xb8>
 8019626:	3401      	adds	r4, #1
 8019628:	e7e5      	b.n	80195f6 <_printf_float+0x25a>
 801962a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801962c:	2b00      	cmp	r3, #0
 801962e:	dc3b      	bgt.n	80196a8 <_printf_float+0x30c>
 8019630:	2301      	movs	r3, #1
 8019632:	4a1c      	ldr	r2, [pc, #112]	@ (80196a4 <_printf_float+0x308>)
 8019634:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019638:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801963a:	47a0      	blx	r4
 801963c:	3001      	adds	r0, #1
 801963e:	d100      	bne.n	8019642 <_printf_float+0x2a6>
 8019640:	e708      	b.n	8019454 <_printf_float+0xb8>
 8019642:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019646:	4333      	orrs	r3, r6
 8019648:	d102      	bne.n	8019650 <_printf_float+0x2b4>
 801964a:	682b      	ldr	r3, [r5, #0]
 801964c:	07db      	lsls	r3, r3, #31
 801964e:	d5d5      	bpl.n	80195fc <_printf_float+0x260>
 8019650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019652:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019658:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801965a:	47a0      	blx	r4
 801965c:	2300      	movs	r3, #0
 801965e:	3001      	adds	r0, #1
 8019660:	d100      	bne.n	8019664 <_printf_float+0x2c8>
 8019662:	e6f7      	b.n	8019454 <_printf_float+0xb8>
 8019664:	930c      	str	r3, [sp, #48]	@ 0x30
 8019666:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801966a:	425b      	negs	r3, r3
 801966c:	4293      	cmp	r3, r2
 801966e:	dc01      	bgt.n	8019674 <_printf_float+0x2d8>
 8019670:	0033      	movs	r3, r6
 8019672:	e792      	b.n	801959a <_printf_float+0x1fe>
 8019674:	002a      	movs	r2, r5
 8019676:	2301      	movs	r3, #1
 8019678:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801967a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801967c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801967e:	321a      	adds	r2, #26
 8019680:	47a0      	blx	r4
 8019682:	3001      	adds	r0, #1
 8019684:	d100      	bne.n	8019688 <_printf_float+0x2ec>
 8019686:	e6e5      	b.n	8019454 <_printf_float+0xb8>
 8019688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801968a:	3301      	adds	r3, #1
 801968c:	e7ea      	b.n	8019664 <_printf_float+0x2c8>
 801968e:	46c0      	nop			@ (mov r8, r8)
 8019690:	7fefffff 	.word	0x7fefffff
 8019694:	0801fc1c 	.word	0x0801fc1c
 8019698:	0801fc18 	.word	0x0801fc18
 801969c:	0801fc24 	.word	0x0801fc24
 80196a0:	0801fc20 	.word	0x0801fc20
 80196a4:	0801f97d 	.word	0x0801f97d
 80196a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80196aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80196ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80196ae:	429e      	cmp	r6, r3
 80196b0:	dd00      	ble.n	80196b4 <_printf_float+0x318>
 80196b2:	001e      	movs	r6, r3
 80196b4:	2e00      	cmp	r6, #0
 80196b6:	dc31      	bgt.n	801971c <_printf_float+0x380>
 80196b8:	43f3      	mvns	r3, r6
 80196ba:	2400      	movs	r4, #0
 80196bc:	17db      	asrs	r3, r3, #31
 80196be:	4033      	ands	r3, r6
 80196c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80196c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80196c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80196c6:	1af3      	subs	r3, r6, r3
 80196c8:	42a3      	cmp	r3, r4
 80196ca:	dc30      	bgt.n	801972e <_printf_float+0x392>
 80196cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80196ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80196d0:	429a      	cmp	r2, r3
 80196d2:	dc38      	bgt.n	8019746 <_printf_float+0x3aa>
 80196d4:	682b      	ldr	r3, [r5, #0]
 80196d6:	07db      	lsls	r3, r3, #31
 80196d8:	d435      	bmi.n	8019746 <_printf_float+0x3aa>
 80196da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80196dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80196de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80196e0:	1b9b      	subs	r3, r3, r6
 80196e2:	1b14      	subs	r4, r2, r4
 80196e4:	429c      	cmp	r4, r3
 80196e6:	dd00      	ble.n	80196ea <_printf_float+0x34e>
 80196e8:	001c      	movs	r4, r3
 80196ea:	2c00      	cmp	r4, #0
 80196ec:	dc34      	bgt.n	8019758 <_printf_float+0x3bc>
 80196ee:	43e3      	mvns	r3, r4
 80196f0:	2600      	movs	r6, #0
 80196f2:	17db      	asrs	r3, r3, #31
 80196f4:	401c      	ands	r4, r3
 80196f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80196f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80196fa:	1ad3      	subs	r3, r2, r3
 80196fc:	1b1b      	subs	r3, r3, r4
 80196fe:	42b3      	cmp	r3, r6
 8019700:	dc00      	bgt.n	8019704 <_printf_float+0x368>
 8019702:	e77b      	b.n	80195fc <_printf_float+0x260>
 8019704:	002a      	movs	r2, r5
 8019706:	2301      	movs	r3, #1
 8019708:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801970a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801970c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801970e:	321a      	adds	r2, #26
 8019710:	47b8      	blx	r7
 8019712:	3001      	adds	r0, #1
 8019714:	d100      	bne.n	8019718 <_printf_float+0x37c>
 8019716:	e69d      	b.n	8019454 <_printf_float+0xb8>
 8019718:	3601      	adds	r6, #1
 801971a:	e7ec      	b.n	80196f6 <_printf_float+0x35a>
 801971c:	0033      	movs	r3, r6
 801971e:	003a      	movs	r2, r7
 8019720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019724:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019726:	47a0      	blx	r4
 8019728:	3001      	adds	r0, #1
 801972a:	d1c5      	bne.n	80196b8 <_printf_float+0x31c>
 801972c:	e692      	b.n	8019454 <_printf_float+0xb8>
 801972e:	002a      	movs	r2, r5
 8019730:	2301      	movs	r3, #1
 8019732:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019734:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019736:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019738:	321a      	adds	r2, #26
 801973a:	47b0      	blx	r6
 801973c:	3001      	adds	r0, #1
 801973e:	d100      	bne.n	8019742 <_printf_float+0x3a6>
 8019740:	e688      	b.n	8019454 <_printf_float+0xb8>
 8019742:	3401      	adds	r4, #1
 8019744:	e7bd      	b.n	80196c2 <_printf_float+0x326>
 8019746:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019748:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801974a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801974c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801974e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019750:	47a0      	blx	r4
 8019752:	3001      	adds	r0, #1
 8019754:	d1c1      	bne.n	80196da <_printf_float+0x33e>
 8019756:	e67d      	b.n	8019454 <_printf_float+0xb8>
 8019758:	19ba      	adds	r2, r7, r6
 801975a:	0023      	movs	r3, r4
 801975c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801975e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019760:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019762:	47b0      	blx	r6
 8019764:	3001      	adds	r0, #1
 8019766:	d1c2      	bne.n	80196ee <_printf_float+0x352>
 8019768:	e674      	b.n	8019454 <_printf_float+0xb8>
 801976a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801976c:	930c      	str	r3, [sp, #48]	@ 0x30
 801976e:	2b01      	cmp	r3, #1
 8019770:	dc02      	bgt.n	8019778 <_printf_float+0x3dc>
 8019772:	2301      	movs	r3, #1
 8019774:	421a      	tst	r2, r3
 8019776:	d039      	beq.n	80197ec <_printf_float+0x450>
 8019778:	2301      	movs	r3, #1
 801977a:	003a      	movs	r2, r7
 801977c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801977e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019780:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019782:	47b0      	blx	r6
 8019784:	3001      	adds	r0, #1
 8019786:	d100      	bne.n	801978a <_printf_float+0x3ee>
 8019788:	e664      	b.n	8019454 <_printf_float+0xb8>
 801978a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801978c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801978e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019792:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019794:	47b0      	blx	r6
 8019796:	3001      	adds	r0, #1
 8019798:	d100      	bne.n	801979c <_printf_float+0x400>
 801979a:	e65b      	b.n	8019454 <_printf_float+0xb8>
 801979c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801979e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80197a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80197a2:	2200      	movs	r2, #0
 80197a4:	3b01      	subs	r3, #1
 80197a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80197a8:	2300      	movs	r3, #0
 80197aa:	f7e6 fe63 	bl	8000474 <__aeabi_dcmpeq>
 80197ae:	2800      	cmp	r0, #0
 80197b0:	d11a      	bne.n	80197e8 <_printf_float+0x44c>
 80197b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80197b4:	1c7a      	adds	r2, r7, #1
 80197b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80197b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80197ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80197bc:	47b0      	blx	r6
 80197be:	3001      	adds	r0, #1
 80197c0:	d10e      	bne.n	80197e0 <_printf_float+0x444>
 80197c2:	e647      	b.n	8019454 <_printf_float+0xb8>
 80197c4:	002a      	movs	r2, r5
 80197c6:	2301      	movs	r3, #1
 80197c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80197ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80197cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80197ce:	321a      	adds	r2, #26
 80197d0:	47b8      	blx	r7
 80197d2:	3001      	adds	r0, #1
 80197d4:	d100      	bne.n	80197d8 <_printf_float+0x43c>
 80197d6:	e63d      	b.n	8019454 <_printf_float+0xb8>
 80197d8:	3601      	adds	r6, #1
 80197da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80197dc:	429e      	cmp	r6, r3
 80197de:	dbf1      	blt.n	80197c4 <_printf_float+0x428>
 80197e0:	002a      	movs	r2, r5
 80197e2:	0023      	movs	r3, r4
 80197e4:	3250      	adds	r2, #80	@ 0x50
 80197e6:	e6d9      	b.n	801959c <_printf_float+0x200>
 80197e8:	2600      	movs	r6, #0
 80197ea:	e7f6      	b.n	80197da <_printf_float+0x43e>
 80197ec:	003a      	movs	r2, r7
 80197ee:	e7e2      	b.n	80197b6 <_printf_float+0x41a>
 80197f0:	002a      	movs	r2, r5
 80197f2:	2301      	movs	r3, #1
 80197f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80197f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80197f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80197fa:	3219      	adds	r2, #25
 80197fc:	47b0      	blx	r6
 80197fe:	3001      	adds	r0, #1
 8019800:	d100      	bne.n	8019804 <_printf_float+0x468>
 8019802:	e627      	b.n	8019454 <_printf_float+0xb8>
 8019804:	3401      	adds	r4, #1
 8019806:	68eb      	ldr	r3, [r5, #12]
 8019808:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801980a:	1a9b      	subs	r3, r3, r2
 801980c:	42a3      	cmp	r3, r4
 801980e:	dcef      	bgt.n	80197f0 <_printf_float+0x454>
 8019810:	e6f8      	b.n	8019604 <_printf_float+0x268>
 8019812:	2400      	movs	r4, #0
 8019814:	e7f7      	b.n	8019806 <_printf_float+0x46a>
 8019816:	46c0      	nop			@ (mov r8, r8)

08019818 <_printf_common>:
 8019818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801981a:	0016      	movs	r6, r2
 801981c:	9301      	str	r3, [sp, #4]
 801981e:	688a      	ldr	r2, [r1, #8]
 8019820:	690b      	ldr	r3, [r1, #16]
 8019822:	000c      	movs	r4, r1
 8019824:	9000      	str	r0, [sp, #0]
 8019826:	4293      	cmp	r3, r2
 8019828:	da00      	bge.n	801982c <_printf_common+0x14>
 801982a:	0013      	movs	r3, r2
 801982c:	0022      	movs	r2, r4
 801982e:	6033      	str	r3, [r6, #0]
 8019830:	3243      	adds	r2, #67	@ 0x43
 8019832:	7812      	ldrb	r2, [r2, #0]
 8019834:	2a00      	cmp	r2, #0
 8019836:	d001      	beq.n	801983c <_printf_common+0x24>
 8019838:	3301      	adds	r3, #1
 801983a:	6033      	str	r3, [r6, #0]
 801983c:	6823      	ldr	r3, [r4, #0]
 801983e:	069b      	lsls	r3, r3, #26
 8019840:	d502      	bpl.n	8019848 <_printf_common+0x30>
 8019842:	6833      	ldr	r3, [r6, #0]
 8019844:	3302      	adds	r3, #2
 8019846:	6033      	str	r3, [r6, #0]
 8019848:	6822      	ldr	r2, [r4, #0]
 801984a:	2306      	movs	r3, #6
 801984c:	0015      	movs	r5, r2
 801984e:	401d      	ands	r5, r3
 8019850:	421a      	tst	r2, r3
 8019852:	d027      	beq.n	80198a4 <_printf_common+0x8c>
 8019854:	0023      	movs	r3, r4
 8019856:	3343      	adds	r3, #67	@ 0x43
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	1e5a      	subs	r2, r3, #1
 801985c:	4193      	sbcs	r3, r2
 801985e:	6822      	ldr	r2, [r4, #0]
 8019860:	0692      	lsls	r2, r2, #26
 8019862:	d430      	bmi.n	80198c6 <_printf_common+0xae>
 8019864:	0022      	movs	r2, r4
 8019866:	9901      	ldr	r1, [sp, #4]
 8019868:	9800      	ldr	r0, [sp, #0]
 801986a:	9d08      	ldr	r5, [sp, #32]
 801986c:	3243      	adds	r2, #67	@ 0x43
 801986e:	47a8      	blx	r5
 8019870:	3001      	adds	r0, #1
 8019872:	d025      	beq.n	80198c0 <_printf_common+0xa8>
 8019874:	2206      	movs	r2, #6
 8019876:	6823      	ldr	r3, [r4, #0]
 8019878:	2500      	movs	r5, #0
 801987a:	4013      	ands	r3, r2
 801987c:	2b04      	cmp	r3, #4
 801987e:	d105      	bne.n	801988c <_printf_common+0x74>
 8019880:	6833      	ldr	r3, [r6, #0]
 8019882:	68e5      	ldr	r5, [r4, #12]
 8019884:	1aed      	subs	r5, r5, r3
 8019886:	43eb      	mvns	r3, r5
 8019888:	17db      	asrs	r3, r3, #31
 801988a:	401d      	ands	r5, r3
 801988c:	68a3      	ldr	r3, [r4, #8]
 801988e:	6922      	ldr	r2, [r4, #16]
 8019890:	4293      	cmp	r3, r2
 8019892:	dd01      	ble.n	8019898 <_printf_common+0x80>
 8019894:	1a9b      	subs	r3, r3, r2
 8019896:	18ed      	adds	r5, r5, r3
 8019898:	2600      	movs	r6, #0
 801989a:	42b5      	cmp	r5, r6
 801989c:	d120      	bne.n	80198e0 <_printf_common+0xc8>
 801989e:	2000      	movs	r0, #0
 80198a0:	e010      	b.n	80198c4 <_printf_common+0xac>
 80198a2:	3501      	adds	r5, #1
 80198a4:	68e3      	ldr	r3, [r4, #12]
 80198a6:	6832      	ldr	r2, [r6, #0]
 80198a8:	1a9b      	subs	r3, r3, r2
 80198aa:	42ab      	cmp	r3, r5
 80198ac:	ddd2      	ble.n	8019854 <_printf_common+0x3c>
 80198ae:	0022      	movs	r2, r4
 80198b0:	2301      	movs	r3, #1
 80198b2:	9901      	ldr	r1, [sp, #4]
 80198b4:	9800      	ldr	r0, [sp, #0]
 80198b6:	9f08      	ldr	r7, [sp, #32]
 80198b8:	3219      	adds	r2, #25
 80198ba:	47b8      	blx	r7
 80198bc:	3001      	adds	r0, #1
 80198be:	d1f0      	bne.n	80198a2 <_printf_common+0x8a>
 80198c0:	2001      	movs	r0, #1
 80198c2:	4240      	negs	r0, r0
 80198c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80198c6:	2030      	movs	r0, #48	@ 0x30
 80198c8:	18e1      	adds	r1, r4, r3
 80198ca:	3143      	adds	r1, #67	@ 0x43
 80198cc:	7008      	strb	r0, [r1, #0]
 80198ce:	0021      	movs	r1, r4
 80198d0:	1c5a      	adds	r2, r3, #1
 80198d2:	3145      	adds	r1, #69	@ 0x45
 80198d4:	7809      	ldrb	r1, [r1, #0]
 80198d6:	18a2      	adds	r2, r4, r2
 80198d8:	3243      	adds	r2, #67	@ 0x43
 80198da:	3302      	adds	r3, #2
 80198dc:	7011      	strb	r1, [r2, #0]
 80198de:	e7c1      	b.n	8019864 <_printf_common+0x4c>
 80198e0:	0022      	movs	r2, r4
 80198e2:	2301      	movs	r3, #1
 80198e4:	9901      	ldr	r1, [sp, #4]
 80198e6:	9800      	ldr	r0, [sp, #0]
 80198e8:	9f08      	ldr	r7, [sp, #32]
 80198ea:	321a      	adds	r2, #26
 80198ec:	47b8      	blx	r7
 80198ee:	3001      	adds	r0, #1
 80198f0:	d0e6      	beq.n	80198c0 <_printf_common+0xa8>
 80198f2:	3601      	adds	r6, #1
 80198f4:	e7d1      	b.n	801989a <_printf_common+0x82>
	...

080198f8 <_printf_i>:
 80198f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198fa:	b08b      	sub	sp, #44	@ 0x2c
 80198fc:	9206      	str	r2, [sp, #24]
 80198fe:	000a      	movs	r2, r1
 8019900:	3243      	adds	r2, #67	@ 0x43
 8019902:	9307      	str	r3, [sp, #28]
 8019904:	9005      	str	r0, [sp, #20]
 8019906:	9203      	str	r2, [sp, #12]
 8019908:	7e0a      	ldrb	r2, [r1, #24]
 801990a:	000c      	movs	r4, r1
 801990c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801990e:	2a78      	cmp	r2, #120	@ 0x78
 8019910:	d809      	bhi.n	8019926 <_printf_i+0x2e>
 8019912:	2a62      	cmp	r2, #98	@ 0x62
 8019914:	d80b      	bhi.n	801992e <_printf_i+0x36>
 8019916:	2a00      	cmp	r2, #0
 8019918:	d100      	bne.n	801991c <_printf_i+0x24>
 801991a:	e0ba      	b.n	8019a92 <_printf_i+0x19a>
 801991c:	497a      	ldr	r1, [pc, #488]	@ (8019b08 <_printf_i+0x210>)
 801991e:	9104      	str	r1, [sp, #16]
 8019920:	2a58      	cmp	r2, #88	@ 0x58
 8019922:	d100      	bne.n	8019926 <_printf_i+0x2e>
 8019924:	e08e      	b.n	8019a44 <_printf_i+0x14c>
 8019926:	0025      	movs	r5, r4
 8019928:	3542      	adds	r5, #66	@ 0x42
 801992a:	702a      	strb	r2, [r5, #0]
 801992c:	e022      	b.n	8019974 <_printf_i+0x7c>
 801992e:	0010      	movs	r0, r2
 8019930:	3863      	subs	r0, #99	@ 0x63
 8019932:	2815      	cmp	r0, #21
 8019934:	d8f7      	bhi.n	8019926 <_printf_i+0x2e>
 8019936:	f7e6 fc03 	bl	8000140 <__gnu_thumb1_case_shi>
 801993a:	0016      	.short	0x0016
 801993c:	fff6001f 	.word	0xfff6001f
 8019940:	fff6fff6 	.word	0xfff6fff6
 8019944:	001ffff6 	.word	0x001ffff6
 8019948:	fff6fff6 	.word	0xfff6fff6
 801994c:	fff6fff6 	.word	0xfff6fff6
 8019950:	0036009f 	.word	0x0036009f
 8019954:	fff6007e 	.word	0xfff6007e
 8019958:	00b0fff6 	.word	0x00b0fff6
 801995c:	0036fff6 	.word	0x0036fff6
 8019960:	fff6fff6 	.word	0xfff6fff6
 8019964:	0082      	.short	0x0082
 8019966:	0025      	movs	r5, r4
 8019968:	681a      	ldr	r2, [r3, #0]
 801996a:	3542      	adds	r5, #66	@ 0x42
 801996c:	1d11      	adds	r1, r2, #4
 801996e:	6019      	str	r1, [r3, #0]
 8019970:	6813      	ldr	r3, [r2, #0]
 8019972:	702b      	strb	r3, [r5, #0]
 8019974:	2301      	movs	r3, #1
 8019976:	e09e      	b.n	8019ab6 <_printf_i+0x1be>
 8019978:	6818      	ldr	r0, [r3, #0]
 801997a:	6809      	ldr	r1, [r1, #0]
 801997c:	1d02      	adds	r2, r0, #4
 801997e:	060d      	lsls	r5, r1, #24
 8019980:	d50b      	bpl.n	801999a <_printf_i+0xa2>
 8019982:	6806      	ldr	r6, [r0, #0]
 8019984:	601a      	str	r2, [r3, #0]
 8019986:	2e00      	cmp	r6, #0
 8019988:	da03      	bge.n	8019992 <_printf_i+0x9a>
 801998a:	232d      	movs	r3, #45	@ 0x2d
 801998c:	9a03      	ldr	r2, [sp, #12]
 801998e:	4276      	negs	r6, r6
 8019990:	7013      	strb	r3, [r2, #0]
 8019992:	4b5d      	ldr	r3, [pc, #372]	@ (8019b08 <_printf_i+0x210>)
 8019994:	270a      	movs	r7, #10
 8019996:	9304      	str	r3, [sp, #16]
 8019998:	e018      	b.n	80199cc <_printf_i+0xd4>
 801999a:	6806      	ldr	r6, [r0, #0]
 801999c:	601a      	str	r2, [r3, #0]
 801999e:	0649      	lsls	r1, r1, #25
 80199a0:	d5f1      	bpl.n	8019986 <_printf_i+0x8e>
 80199a2:	b236      	sxth	r6, r6
 80199a4:	e7ef      	b.n	8019986 <_printf_i+0x8e>
 80199a6:	6808      	ldr	r0, [r1, #0]
 80199a8:	6819      	ldr	r1, [r3, #0]
 80199aa:	c940      	ldmia	r1!, {r6}
 80199ac:	0605      	lsls	r5, r0, #24
 80199ae:	d402      	bmi.n	80199b6 <_printf_i+0xbe>
 80199b0:	0640      	lsls	r0, r0, #25
 80199b2:	d500      	bpl.n	80199b6 <_printf_i+0xbe>
 80199b4:	b2b6      	uxth	r6, r6
 80199b6:	6019      	str	r1, [r3, #0]
 80199b8:	4b53      	ldr	r3, [pc, #332]	@ (8019b08 <_printf_i+0x210>)
 80199ba:	270a      	movs	r7, #10
 80199bc:	9304      	str	r3, [sp, #16]
 80199be:	2a6f      	cmp	r2, #111	@ 0x6f
 80199c0:	d100      	bne.n	80199c4 <_printf_i+0xcc>
 80199c2:	3f02      	subs	r7, #2
 80199c4:	0023      	movs	r3, r4
 80199c6:	2200      	movs	r2, #0
 80199c8:	3343      	adds	r3, #67	@ 0x43
 80199ca:	701a      	strb	r2, [r3, #0]
 80199cc:	6863      	ldr	r3, [r4, #4]
 80199ce:	60a3      	str	r3, [r4, #8]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	db06      	blt.n	80199e2 <_printf_i+0xea>
 80199d4:	2104      	movs	r1, #4
 80199d6:	6822      	ldr	r2, [r4, #0]
 80199d8:	9d03      	ldr	r5, [sp, #12]
 80199da:	438a      	bics	r2, r1
 80199dc:	6022      	str	r2, [r4, #0]
 80199de:	4333      	orrs	r3, r6
 80199e0:	d00c      	beq.n	80199fc <_printf_i+0x104>
 80199e2:	9d03      	ldr	r5, [sp, #12]
 80199e4:	0030      	movs	r0, r6
 80199e6:	0039      	movs	r1, r7
 80199e8:	f7e6 fc44 	bl	8000274 <__aeabi_uidivmod>
 80199ec:	9b04      	ldr	r3, [sp, #16]
 80199ee:	3d01      	subs	r5, #1
 80199f0:	5c5b      	ldrb	r3, [r3, r1]
 80199f2:	702b      	strb	r3, [r5, #0]
 80199f4:	0033      	movs	r3, r6
 80199f6:	0006      	movs	r6, r0
 80199f8:	429f      	cmp	r7, r3
 80199fa:	d9f3      	bls.n	80199e4 <_printf_i+0xec>
 80199fc:	2f08      	cmp	r7, #8
 80199fe:	d109      	bne.n	8019a14 <_printf_i+0x11c>
 8019a00:	6823      	ldr	r3, [r4, #0]
 8019a02:	07db      	lsls	r3, r3, #31
 8019a04:	d506      	bpl.n	8019a14 <_printf_i+0x11c>
 8019a06:	6862      	ldr	r2, [r4, #4]
 8019a08:	6923      	ldr	r3, [r4, #16]
 8019a0a:	429a      	cmp	r2, r3
 8019a0c:	dc02      	bgt.n	8019a14 <_printf_i+0x11c>
 8019a0e:	2330      	movs	r3, #48	@ 0x30
 8019a10:	3d01      	subs	r5, #1
 8019a12:	702b      	strb	r3, [r5, #0]
 8019a14:	9b03      	ldr	r3, [sp, #12]
 8019a16:	1b5b      	subs	r3, r3, r5
 8019a18:	6123      	str	r3, [r4, #16]
 8019a1a:	9b07      	ldr	r3, [sp, #28]
 8019a1c:	0021      	movs	r1, r4
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	9805      	ldr	r0, [sp, #20]
 8019a22:	9b06      	ldr	r3, [sp, #24]
 8019a24:	aa09      	add	r2, sp, #36	@ 0x24
 8019a26:	f7ff fef7 	bl	8019818 <_printf_common>
 8019a2a:	3001      	adds	r0, #1
 8019a2c:	d148      	bne.n	8019ac0 <_printf_i+0x1c8>
 8019a2e:	2001      	movs	r0, #1
 8019a30:	4240      	negs	r0, r0
 8019a32:	b00b      	add	sp, #44	@ 0x2c
 8019a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a36:	2220      	movs	r2, #32
 8019a38:	6809      	ldr	r1, [r1, #0]
 8019a3a:	430a      	orrs	r2, r1
 8019a3c:	6022      	str	r2, [r4, #0]
 8019a3e:	2278      	movs	r2, #120	@ 0x78
 8019a40:	4932      	ldr	r1, [pc, #200]	@ (8019b0c <_printf_i+0x214>)
 8019a42:	9104      	str	r1, [sp, #16]
 8019a44:	0021      	movs	r1, r4
 8019a46:	3145      	adds	r1, #69	@ 0x45
 8019a48:	700a      	strb	r2, [r1, #0]
 8019a4a:	6819      	ldr	r1, [r3, #0]
 8019a4c:	6822      	ldr	r2, [r4, #0]
 8019a4e:	c940      	ldmia	r1!, {r6}
 8019a50:	0610      	lsls	r0, r2, #24
 8019a52:	d402      	bmi.n	8019a5a <_printf_i+0x162>
 8019a54:	0650      	lsls	r0, r2, #25
 8019a56:	d500      	bpl.n	8019a5a <_printf_i+0x162>
 8019a58:	b2b6      	uxth	r6, r6
 8019a5a:	6019      	str	r1, [r3, #0]
 8019a5c:	07d3      	lsls	r3, r2, #31
 8019a5e:	d502      	bpl.n	8019a66 <_printf_i+0x16e>
 8019a60:	2320      	movs	r3, #32
 8019a62:	4313      	orrs	r3, r2
 8019a64:	6023      	str	r3, [r4, #0]
 8019a66:	2e00      	cmp	r6, #0
 8019a68:	d001      	beq.n	8019a6e <_printf_i+0x176>
 8019a6a:	2710      	movs	r7, #16
 8019a6c:	e7aa      	b.n	80199c4 <_printf_i+0xcc>
 8019a6e:	2220      	movs	r2, #32
 8019a70:	6823      	ldr	r3, [r4, #0]
 8019a72:	4393      	bics	r3, r2
 8019a74:	6023      	str	r3, [r4, #0]
 8019a76:	e7f8      	b.n	8019a6a <_printf_i+0x172>
 8019a78:	681a      	ldr	r2, [r3, #0]
 8019a7a:	680d      	ldr	r5, [r1, #0]
 8019a7c:	1d10      	adds	r0, r2, #4
 8019a7e:	6949      	ldr	r1, [r1, #20]
 8019a80:	6018      	str	r0, [r3, #0]
 8019a82:	6813      	ldr	r3, [r2, #0]
 8019a84:	062e      	lsls	r6, r5, #24
 8019a86:	d501      	bpl.n	8019a8c <_printf_i+0x194>
 8019a88:	6019      	str	r1, [r3, #0]
 8019a8a:	e002      	b.n	8019a92 <_printf_i+0x19a>
 8019a8c:	066d      	lsls	r5, r5, #25
 8019a8e:	d5fb      	bpl.n	8019a88 <_printf_i+0x190>
 8019a90:	8019      	strh	r1, [r3, #0]
 8019a92:	2300      	movs	r3, #0
 8019a94:	9d03      	ldr	r5, [sp, #12]
 8019a96:	6123      	str	r3, [r4, #16]
 8019a98:	e7bf      	b.n	8019a1a <_printf_i+0x122>
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	1d11      	adds	r1, r2, #4
 8019a9e:	6019      	str	r1, [r3, #0]
 8019aa0:	6815      	ldr	r5, [r2, #0]
 8019aa2:	2100      	movs	r1, #0
 8019aa4:	0028      	movs	r0, r5
 8019aa6:	6862      	ldr	r2, [r4, #4]
 8019aa8:	f000 fb91 	bl	801a1ce <memchr>
 8019aac:	2800      	cmp	r0, #0
 8019aae:	d001      	beq.n	8019ab4 <_printf_i+0x1bc>
 8019ab0:	1b40      	subs	r0, r0, r5
 8019ab2:	6060      	str	r0, [r4, #4]
 8019ab4:	6863      	ldr	r3, [r4, #4]
 8019ab6:	6123      	str	r3, [r4, #16]
 8019ab8:	2300      	movs	r3, #0
 8019aba:	9a03      	ldr	r2, [sp, #12]
 8019abc:	7013      	strb	r3, [r2, #0]
 8019abe:	e7ac      	b.n	8019a1a <_printf_i+0x122>
 8019ac0:	002a      	movs	r2, r5
 8019ac2:	6923      	ldr	r3, [r4, #16]
 8019ac4:	9906      	ldr	r1, [sp, #24]
 8019ac6:	9805      	ldr	r0, [sp, #20]
 8019ac8:	9d07      	ldr	r5, [sp, #28]
 8019aca:	47a8      	blx	r5
 8019acc:	3001      	adds	r0, #1
 8019ace:	d0ae      	beq.n	8019a2e <_printf_i+0x136>
 8019ad0:	6823      	ldr	r3, [r4, #0]
 8019ad2:	079b      	lsls	r3, r3, #30
 8019ad4:	d415      	bmi.n	8019b02 <_printf_i+0x20a>
 8019ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ad8:	68e0      	ldr	r0, [r4, #12]
 8019ada:	4298      	cmp	r0, r3
 8019adc:	daa9      	bge.n	8019a32 <_printf_i+0x13a>
 8019ade:	0018      	movs	r0, r3
 8019ae0:	e7a7      	b.n	8019a32 <_printf_i+0x13a>
 8019ae2:	0022      	movs	r2, r4
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	9906      	ldr	r1, [sp, #24]
 8019ae8:	9805      	ldr	r0, [sp, #20]
 8019aea:	9e07      	ldr	r6, [sp, #28]
 8019aec:	3219      	adds	r2, #25
 8019aee:	47b0      	blx	r6
 8019af0:	3001      	adds	r0, #1
 8019af2:	d09c      	beq.n	8019a2e <_printf_i+0x136>
 8019af4:	3501      	adds	r5, #1
 8019af6:	68e3      	ldr	r3, [r4, #12]
 8019af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019afa:	1a9b      	subs	r3, r3, r2
 8019afc:	42ab      	cmp	r3, r5
 8019afe:	dcf0      	bgt.n	8019ae2 <_printf_i+0x1ea>
 8019b00:	e7e9      	b.n	8019ad6 <_printf_i+0x1de>
 8019b02:	2500      	movs	r5, #0
 8019b04:	e7f7      	b.n	8019af6 <_printf_i+0x1fe>
 8019b06:	46c0      	nop			@ (mov r8, r8)
 8019b08:	0801fc28 	.word	0x0801fc28
 8019b0c:	0801fc39 	.word	0x0801fc39

08019b10 <std>:
 8019b10:	2300      	movs	r3, #0
 8019b12:	b510      	push	{r4, lr}
 8019b14:	0004      	movs	r4, r0
 8019b16:	6003      	str	r3, [r0, #0]
 8019b18:	6043      	str	r3, [r0, #4]
 8019b1a:	6083      	str	r3, [r0, #8]
 8019b1c:	8181      	strh	r1, [r0, #12]
 8019b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019b20:	81c2      	strh	r2, [r0, #14]
 8019b22:	6103      	str	r3, [r0, #16]
 8019b24:	6143      	str	r3, [r0, #20]
 8019b26:	6183      	str	r3, [r0, #24]
 8019b28:	0019      	movs	r1, r3
 8019b2a:	2208      	movs	r2, #8
 8019b2c:	305c      	adds	r0, #92	@ 0x5c
 8019b2e:	f000 fa8f 	bl	801a050 <memset>
 8019b32:	4b0b      	ldr	r3, [pc, #44]	@ (8019b60 <std+0x50>)
 8019b34:	6224      	str	r4, [r4, #32]
 8019b36:	6263      	str	r3, [r4, #36]	@ 0x24
 8019b38:	4b0a      	ldr	r3, [pc, #40]	@ (8019b64 <std+0x54>)
 8019b3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8019b68 <std+0x58>)
 8019b3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019b40:	4b0a      	ldr	r3, [pc, #40]	@ (8019b6c <std+0x5c>)
 8019b42:	6323      	str	r3, [r4, #48]	@ 0x30
 8019b44:	4b0a      	ldr	r3, [pc, #40]	@ (8019b70 <std+0x60>)
 8019b46:	429c      	cmp	r4, r3
 8019b48:	d005      	beq.n	8019b56 <std+0x46>
 8019b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8019b74 <std+0x64>)
 8019b4c:	429c      	cmp	r4, r3
 8019b4e:	d002      	beq.n	8019b56 <std+0x46>
 8019b50:	4b09      	ldr	r3, [pc, #36]	@ (8019b78 <std+0x68>)
 8019b52:	429c      	cmp	r4, r3
 8019b54:	d103      	bne.n	8019b5e <std+0x4e>
 8019b56:	0020      	movs	r0, r4
 8019b58:	3058      	adds	r0, #88	@ 0x58
 8019b5a:	f000 fb2d 	bl	801a1b8 <__retarget_lock_init_recursive>
 8019b5e:	bd10      	pop	{r4, pc}
 8019b60:	08019e5d 	.word	0x08019e5d
 8019b64:	08019e85 	.word	0x08019e85
 8019b68:	08019ebd 	.word	0x08019ebd
 8019b6c:	08019ee9 	.word	0x08019ee9
 8019b70:	200066d4 	.word	0x200066d4
 8019b74:	2000673c 	.word	0x2000673c
 8019b78:	200067a4 	.word	0x200067a4

08019b7c <stdio_exit_handler>:
 8019b7c:	b510      	push	{r4, lr}
 8019b7e:	4a03      	ldr	r2, [pc, #12]	@ (8019b8c <stdio_exit_handler+0x10>)
 8019b80:	4903      	ldr	r1, [pc, #12]	@ (8019b90 <stdio_exit_handler+0x14>)
 8019b82:	4804      	ldr	r0, [pc, #16]	@ (8019b94 <stdio_exit_handler+0x18>)
 8019b84:	f000 f87c 	bl	8019c80 <_fwalk_sglue>
 8019b88:	bd10      	pop	{r4, pc}
 8019b8a:	46c0      	nop			@ (mov r8, r8)
 8019b8c:	200002c0 	.word	0x200002c0
 8019b90:	0801be75 	.word	0x0801be75
 8019b94:	200002d0 	.word	0x200002d0

08019b98 <cleanup_stdio>:
 8019b98:	6841      	ldr	r1, [r0, #4]
 8019b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8019bc8 <cleanup_stdio+0x30>)
 8019b9c:	b510      	push	{r4, lr}
 8019b9e:	0004      	movs	r4, r0
 8019ba0:	4299      	cmp	r1, r3
 8019ba2:	d001      	beq.n	8019ba8 <cleanup_stdio+0x10>
 8019ba4:	f002 f966 	bl	801be74 <_fflush_r>
 8019ba8:	68a1      	ldr	r1, [r4, #8]
 8019baa:	4b08      	ldr	r3, [pc, #32]	@ (8019bcc <cleanup_stdio+0x34>)
 8019bac:	4299      	cmp	r1, r3
 8019bae:	d002      	beq.n	8019bb6 <cleanup_stdio+0x1e>
 8019bb0:	0020      	movs	r0, r4
 8019bb2:	f002 f95f 	bl	801be74 <_fflush_r>
 8019bb6:	68e1      	ldr	r1, [r4, #12]
 8019bb8:	4b05      	ldr	r3, [pc, #20]	@ (8019bd0 <cleanup_stdio+0x38>)
 8019bba:	4299      	cmp	r1, r3
 8019bbc:	d002      	beq.n	8019bc4 <cleanup_stdio+0x2c>
 8019bbe:	0020      	movs	r0, r4
 8019bc0:	f002 f958 	bl	801be74 <_fflush_r>
 8019bc4:	bd10      	pop	{r4, pc}
 8019bc6:	46c0      	nop			@ (mov r8, r8)
 8019bc8:	200066d4 	.word	0x200066d4
 8019bcc:	2000673c 	.word	0x2000673c
 8019bd0:	200067a4 	.word	0x200067a4

08019bd4 <global_stdio_init.part.0>:
 8019bd4:	b510      	push	{r4, lr}
 8019bd6:	4b09      	ldr	r3, [pc, #36]	@ (8019bfc <global_stdio_init.part.0+0x28>)
 8019bd8:	4a09      	ldr	r2, [pc, #36]	@ (8019c00 <global_stdio_init.part.0+0x2c>)
 8019bda:	2104      	movs	r1, #4
 8019bdc:	601a      	str	r2, [r3, #0]
 8019bde:	4809      	ldr	r0, [pc, #36]	@ (8019c04 <global_stdio_init.part.0+0x30>)
 8019be0:	2200      	movs	r2, #0
 8019be2:	f7ff ff95 	bl	8019b10 <std>
 8019be6:	2201      	movs	r2, #1
 8019be8:	2109      	movs	r1, #9
 8019bea:	4807      	ldr	r0, [pc, #28]	@ (8019c08 <global_stdio_init.part.0+0x34>)
 8019bec:	f7ff ff90 	bl	8019b10 <std>
 8019bf0:	2202      	movs	r2, #2
 8019bf2:	2112      	movs	r1, #18
 8019bf4:	4805      	ldr	r0, [pc, #20]	@ (8019c0c <global_stdio_init.part.0+0x38>)
 8019bf6:	f7ff ff8b 	bl	8019b10 <std>
 8019bfa:	bd10      	pop	{r4, pc}
 8019bfc:	2000680c 	.word	0x2000680c
 8019c00:	08019b7d 	.word	0x08019b7d
 8019c04:	200066d4 	.word	0x200066d4
 8019c08:	2000673c 	.word	0x2000673c
 8019c0c:	200067a4 	.word	0x200067a4

08019c10 <__sfp_lock_acquire>:
 8019c10:	b510      	push	{r4, lr}
 8019c12:	4802      	ldr	r0, [pc, #8]	@ (8019c1c <__sfp_lock_acquire+0xc>)
 8019c14:	f000 fad1 	bl	801a1ba <__retarget_lock_acquire_recursive>
 8019c18:	bd10      	pop	{r4, pc}
 8019c1a:	46c0      	nop			@ (mov r8, r8)
 8019c1c:	20006815 	.word	0x20006815

08019c20 <__sfp_lock_release>:
 8019c20:	b510      	push	{r4, lr}
 8019c22:	4802      	ldr	r0, [pc, #8]	@ (8019c2c <__sfp_lock_release+0xc>)
 8019c24:	f000 faca 	bl	801a1bc <__retarget_lock_release_recursive>
 8019c28:	bd10      	pop	{r4, pc}
 8019c2a:	46c0      	nop			@ (mov r8, r8)
 8019c2c:	20006815 	.word	0x20006815

08019c30 <__sinit>:
 8019c30:	b510      	push	{r4, lr}
 8019c32:	0004      	movs	r4, r0
 8019c34:	f7ff ffec 	bl	8019c10 <__sfp_lock_acquire>
 8019c38:	6a23      	ldr	r3, [r4, #32]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d002      	beq.n	8019c44 <__sinit+0x14>
 8019c3e:	f7ff ffef 	bl	8019c20 <__sfp_lock_release>
 8019c42:	bd10      	pop	{r4, pc}
 8019c44:	4b04      	ldr	r3, [pc, #16]	@ (8019c58 <__sinit+0x28>)
 8019c46:	6223      	str	r3, [r4, #32]
 8019c48:	4b04      	ldr	r3, [pc, #16]	@ (8019c5c <__sinit+0x2c>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d1f6      	bne.n	8019c3e <__sinit+0xe>
 8019c50:	f7ff ffc0 	bl	8019bd4 <global_stdio_init.part.0>
 8019c54:	e7f3      	b.n	8019c3e <__sinit+0xe>
 8019c56:	46c0      	nop			@ (mov r8, r8)
 8019c58:	08019b99 	.word	0x08019b99
 8019c5c:	2000680c 	.word	0x2000680c

08019c60 <fiprintf>:
 8019c60:	b40e      	push	{r1, r2, r3}
 8019c62:	b517      	push	{r0, r1, r2, r4, lr}
 8019c64:	4c05      	ldr	r4, [pc, #20]	@ (8019c7c <fiprintf+0x1c>)
 8019c66:	ab05      	add	r3, sp, #20
 8019c68:	cb04      	ldmia	r3!, {r2}
 8019c6a:	0001      	movs	r1, r0
 8019c6c:	6820      	ldr	r0, [r4, #0]
 8019c6e:	9301      	str	r3, [sp, #4]
 8019c70:	f001 ff5e 	bl	801bb30 <_vfiprintf_r>
 8019c74:	bc1e      	pop	{r1, r2, r3, r4}
 8019c76:	bc08      	pop	{r3}
 8019c78:	b003      	add	sp, #12
 8019c7a:	4718      	bx	r3
 8019c7c:	200002cc 	.word	0x200002cc

08019c80 <_fwalk_sglue>:
 8019c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c82:	0014      	movs	r4, r2
 8019c84:	2600      	movs	r6, #0
 8019c86:	9000      	str	r0, [sp, #0]
 8019c88:	9101      	str	r1, [sp, #4]
 8019c8a:	68a5      	ldr	r5, [r4, #8]
 8019c8c:	6867      	ldr	r7, [r4, #4]
 8019c8e:	3f01      	subs	r7, #1
 8019c90:	d504      	bpl.n	8019c9c <_fwalk_sglue+0x1c>
 8019c92:	6824      	ldr	r4, [r4, #0]
 8019c94:	2c00      	cmp	r4, #0
 8019c96:	d1f8      	bne.n	8019c8a <_fwalk_sglue+0xa>
 8019c98:	0030      	movs	r0, r6
 8019c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c9c:	89ab      	ldrh	r3, [r5, #12]
 8019c9e:	2b01      	cmp	r3, #1
 8019ca0:	d908      	bls.n	8019cb4 <_fwalk_sglue+0x34>
 8019ca2:	220e      	movs	r2, #14
 8019ca4:	5eab      	ldrsh	r3, [r5, r2]
 8019ca6:	3301      	adds	r3, #1
 8019ca8:	d004      	beq.n	8019cb4 <_fwalk_sglue+0x34>
 8019caa:	0029      	movs	r1, r5
 8019cac:	9800      	ldr	r0, [sp, #0]
 8019cae:	9b01      	ldr	r3, [sp, #4]
 8019cb0:	4798      	blx	r3
 8019cb2:	4306      	orrs	r6, r0
 8019cb4:	3568      	adds	r5, #104	@ 0x68
 8019cb6:	e7ea      	b.n	8019c8e <_fwalk_sglue+0xe>

08019cb8 <iprintf>:
 8019cb8:	b40f      	push	{r0, r1, r2, r3}
 8019cba:	b507      	push	{r0, r1, r2, lr}
 8019cbc:	4905      	ldr	r1, [pc, #20]	@ (8019cd4 <iprintf+0x1c>)
 8019cbe:	ab04      	add	r3, sp, #16
 8019cc0:	6808      	ldr	r0, [r1, #0]
 8019cc2:	cb04      	ldmia	r3!, {r2}
 8019cc4:	6881      	ldr	r1, [r0, #8]
 8019cc6:	9301      	str	r3, [sp, #4]
 8019cc8:	f001 ff32 	bl	801bb30 <_vfiprintf_r>
 8019ccc:	b003      	add	sp, #12
 8019cce:	bc08      	pop	{r3}
 8019cd0:	b004      	add	sp, #16
 8019cd2:	4718      	bx	r3
 8019cd4:	200002cc 	.word	0x200002cc

08019cd8 <putchar>:
 8019cd8:	b510      	push	{r4, lr}
 8019cda:	4b03      	ldr	r3, [pc, #12]	@ (8019ce8 <putchar+0x10>)
 8019cdc:	0001      	movs	r1, r0
 8019cde:	6818      	ldr	r0, [r3, #0]
 8019ce0:	6882      	ldr	r2, [r0, #8]
 8019ce2:	f002 f95e 	bl	801bfa2 <_putc_r>
 8019ce6:	bd10      	pop	{r4, pc}
 8019ce8:	200002cc 	.word	0x200002cc

08019cec <_puts_r>:
 8019cec:	6a03      	ldr	r3, [r0, #32]
 8019cee:	b570      	push	{r4, r5, r6, lr}
 8019cf0:	0005      	movs	r5, r0
 8019cf2:	000e      	movs	r6, r1
 8019cf4:	6884      	ldr	r4, [r0, #8]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d101      	bne.n	8019cfe <_puts_r+0x12>
 8019cfa:	f7ff ff99 	bl	8019c30 <__sinit>
 8019cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019d00:	07db      	lsls	r3, r3, #31
 8019d02:	d405      	bmi.n	8019d10 <_puts_r+0x24>
 8019d04:	89a3      	ldrh	r3, [r4, #12]
 8019d06:	059b      	lsls	r3, r3, #22
 8019d08:	d402      	bmi.n	8019d10 <_puts_r+0x24>
 8019d0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d0c:	f000 fa55 	bl	801a1ba <__retarget_lock_acquire_recursive>
 8019d10:	89a3      	ldrh	r3, [r4, #12]
 8019d12:	071b      	lsls	r3, r3, #28
 8019d14:	d502      	bpl.n	8019d1c <_puts_r+0x30>
 8019d16:	6923      	ldr	r3, [r4, #16]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d11f      	bne.n	8019d5c <_puts_r+0x70>
 8019d1c:	0021      	movs	r1, r4
 8019d1e:	0028      	movs	r0, r5
 8019d20:	f000 f92a 	bl	8019f78 <__swsetup_r>
 8019d24:	2800      	cmp	r0, #0
 8019d26:	d019      	beq.n	8019d5c <_puts_r+0x70>
 8019d28:	2501      	movs	r5, #1
 8019d2a:	426d      	negs	r5, r5
 8019d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019d2e:	07db      	lsls	r3, r3, #31
 8019d30:	d405      	bmi.n	8019d3e <_puts_r+0x52>
 8019d32:	89a3      	ldrh	r3, [r4, #12]
 8019d34:	059b      	lsls	r3, r3, #22
 8019d36:	d402      	bmi.n	8019d3e <_puts_r+0x52>
 8019d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d3a:	f000 fa3f 	bl	801a1bc <__retarget_lock_release_recursive>
 8019d3e:	0028      	movs	r0, r5
 8019d40:	bd70      	pop	{r4, r5, r6, pc}
 8019d42:	3601      	adds	r6, #1
 8019d44:	60a3      	str	r3, [r4, #8]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	da04      	bge.n	8019d54 <_puts_r+0x68>
 8019d4a:	69a2      	ldr	r2, [r4, #24]
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	dc16      	bgt.n	8019d7e <_puts_r+0x92>
 8019d50:	290a      	cmp	r1, #10
 8019d52:	d014      	beq.n	8019d7e <_puts_r+0x92>
 8019d54:	6823      	ldr	r3, [r4, #0]
 8019d56:	1c5a      	adds	r2, r3, #1
 8019d58:	6022      	str	r2, [r4, #0]
 8019d5a:	7019      	strb	r1, [r3, #0]
 8019d5c:	68a3      	ldr	r3, [r4, #8]
 8019d5e:	7831      	ldrb	r1, [r6, #0]
 8019d60:	3b01      	subs	r3, #1
 8019d62:	2900      	cmp	r1, #0
 8019d64:	d1ed      	bne.n	8019d42 <_puts_r+0x56>
 8019d66:	60a3      	str	r3, [r4, #8]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	da0f      	bge.n	8019d8c <_puts_r+0xa0>
 8019d6c:	0022      	movs	r2, r4
 8019d6e:	0028      	movs	r0, r5
 8019d70:	310a      	adds	r1, #10
 8019d72:	f000 f8bf 	bl	8019ef4 <__swbuf_r>
 8019d76:	3001      	adds	r0, #1
 8019d78:	d0d6      	beq.n	8019d28 <_puts_r+0x3c>
 8019d7a:	250a      	movs	r5, #10
 8019d7c:	e7d6      	b.n	8019d2c <_puts_r+0x40>
 8019d7e:	0022      	movs	r2, r4
 8019d80:	0028      	movs	r0, r5
 8019d82:	f000 f8b7 	bl	8019ef4 <__swbuf_r>
 8019d86:	3001      	adds	r0, #1
 8019d88:	d1e8      	bne.n	8019d5c <_puts_r+0x70>
 8019d8a:	e7cd      	b.n	8019d28 <_puts_r+0x3c>
 8019d8c:	6823      	ldr	r3, [r4, #0]
 8019d8e:	1c5a      	adds	r2, r3, #1
 8019d90:	6022      	str	r2, [r4, #0]
 8019d92:	220a      	movs	r2, #10
 8019d94:	701a      	strb	r2, [r3, #0]
 8019d96:	e7f0      	b.n	8019d7a <_puts_r+0x8e>

08019d98 <puts>:
 8019d98:	b510      	push	{r4, lr}
 8019d9a:	4b03      	ldr	r3, [pc, #12]	@ (8019da8 <puts+0x10>)
 8019d9c:	0001      	movs	r1, r0
 8019d9e:	6818      	ldr	r0, [r3, #0]
 8019da0:	f7ff ffa4 	bl	8019cec <_puts_r>
 8019da4:	bd10      	pop	{r4, pc}
 8019da6:	46c0      	nop			@ (mov r8, r8)
 8019da8:	200002cc 	.word	0x200002cc

08019dac <sniprintf>:
 8019dac:	b40c      	push	{r2, r3}
 8019dae:	b530      	push	{r4, r5, lr}
 8019db0:	4b18      	ldr	r3, [pc, #96]	@ (8019e14 <sniprintf+0x68>)
 8019db2:	000c      	movs	r4, r1
 8019db4:	681d      	ldr	r5, [r3, #0]
 8019db6:	b09d      	sub	sp, #116	@ 0x74
 8019db8:	2900      	cmp	r1, #0
 8019dba:	da08      	bge.n	8019dce <sniprintf+0x22>
 8019dbc:	238b      	movs	r3, #139	@ 0x8b
 8019dbe:	2001      	movs	r0, #1
 8019dc0:	602b      	str	r3, [r5, #0]
 8019dc2:	4240      	negs	r0, r0
 8019dc4:	b01d      	add	sp, #116	@ 0x74
 8019dc6:	bc30      	pop	{r4, r5}
 8019dc8:	bc08      	pop	{r3}
 8019dca:	b002      	add	sp, #8
 8019dcc:	4718      	bx	r3
 8019dce:	2382      	movs	r3, #130	@ 0x82
 8019dd0:	466a      	mov	r2, sp
 8019dd2:	009b      	lsls	r3, r3, #2
 8019dd4:	8293      	strh	r3, [r2, #20]
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	9002      	str	r0, [sp, #8]
 8019dda:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019ddc:	9006      	str	r0, [sp, #24]
 8019dde:	4299      	cmp	r1, r3
 8019de0:	d000      	beq.n	8019de4 <sniprintf+0x38>
 8019de2:	1e4b      	subs	r3, r1, #1
 8019de4:	9304      	str	r3, [sp, #16]
 8019de6:	9307      	str	r3, [sp, #28]
 8019de8:	2301      	movs	r3, #1
 8019dea:	466a      	mov	r2, sp
 8019dec:	425b      	negs	r3, r3
 8019dee:	82d3      	strh	r3, [r2, #22]
 8019df0:	0028      	movs	r0, r5
 8019df2:	ab21      	add	r3, sp, #132	@ 0x84
 8019df4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019df6:	a902      	add	r1, sp, #8
 8019df8:	9301      	str	r3, [sp, #4]
 8019dfa:	f001 fd73 	bl	801b8e4 <_svfiprintf_r>
 8019dfe:	1c43      	adds	r3, r0, #1
 8019e00:	da01      	bge.n	8019e06 <sniprintf+0x5a>
 8019e02:	238b      	movs	r3, #139	@ 0x8b
 8019e04:	602b      	str	r3, [r5, #0]
 8019e06:	2c00      	cmp	r4, #0
 8019e08:	d0dc      	beq.n	8019dc4 <sniprintf+0x18>
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	9b02      	ldr	r3, [sp, #8]
 8019e0e:	701a      	strb	r2, [r3, #0]
 8019e10:	e7d8      	b.n	8019dc4 <sniprintf+0x18>
 8019e12:	46c0      	nop			@ (mov r8, r8)
 8019e14:	200002cc 	.word	0x200002cc

08019e18 <siprintf>:
 8019e18:	b40e      	push	{r1, r2, r3}
 8019e1a:	b510      	push	{r4, lr}
 8019e1c:	2400      	movs	r4, #0
 8019e1e:	490c      	ldr	r1, [pc, #48]	@ (8019e50 <siprintf+0x38>)
 8019e20:	b09d      	sub	sp, #116	@ 0x74
 8019e22:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019e24:	9002      	str	r0, [sp, #8]
 8019e26:	9006      	str	r0, [sp, #24]
 8019e28:	9107      	str	r1, [sp, #28]
 8019e2a:	9104      	str	r1, [sp, #16]
 8019e2c:	4809      	ldr	r0, [pc, #36]	@ (8019e54 <siprintf+0x3c>)
 8019e2e:	490a      	ldr	r1, [pc, #40]	@ (8019e58 <siprintf+0x40>)
 8019e30:	cb04      	ldmia	r3!, {r2}
 8019e32:	9105      	str	r1, [sp, #20]
 8019e34:	6800      	ldr	r0, [r0, #0]
 8019e36:	a902      	add	r1, sp, #8
 8019e38:	9301      	str	r3, [sp, #4]
 8019e3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019e3c:	f001 fd52 	bl	801b8e4 <_svfiprintf_r>
 8019e40:	9b02      	ldr	r3, [sp, #8]
 8019e42:	701c      	strb	r4, [r3, #0]
 8019e44:	b01d      	add	sp, #116	@ 0x74
 8019e46:	bc10      	pop	{r4}
 8019e48:	bc08      	pop	{r3}
 8019e4a:	b003      	add	sp, #12
 8019e4c:	4718      	bx	r3
 8019e4e:	46c0      	nop			@ (mov r8, r8)
 8019e50:	7fffffff 	.word	0x7fffffff
 8019e54:	200002cc 	.word	0x200002cc
 8019e58:	ffff0208 	.word	0xffff0208

08019e5c <__sread>:
 8019e5c:	b570      	push	{r4, r5, r6, lr}
 8019e5e:	000c      	movs	r4, r1
 8019e60:	250e      	movs	r5, #14
 8019e62:	5f49      	ldrsh	r1, [r1, r5]
 8019e64:	f000 f956 	bl	801a114 <_read_r>
 8019e68:	2800      	cmp	r0, #0
 8019e6a:	db03      	blt.n	8019e74 <__sread+0x18>
 8019e6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8019e6e:	181b      	adds	r3, r3, r0
 8019e70:	6563      	str	r3, [r4, #84]	@ 0x54
 8019e72:	bd70      	pop	{r4, r5, r6, pc}
 8019e74:	89a3      	ldrh	r3, [r4, #12]
 8019e76:	4a02      	ldr	r2, [pc, #8]	@ (8019e80 <__sread+0x24>)
 8019e78:	4013      	ands	r3, r2
 8019e7a:	81a3      	strh	r3, [r4, #12]
 8019e7c:	e7f9      	b.n	8019e72 <__sread+0x16>
 8019e7e:	46c0      	nop			@ (mov r8, r8)
 8019e80:	ffffefff 	.word	0xffffefff

08019e84 <__swrite>:
 8019e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e86:	001f      	movs	r7, r3
 8019e88:	898b      	ldrh	r3, [r1, #12]
 8019e8a:	0005      	movs	r5, r0
 8019e8c:	000c      	movs	r4, r1
 8019e8e:	0016      	movs	r6, r2
 8019e90:	05db      	lsls	r3, r3, #23
 8019e92:	d505      	bpl.n	8019ea0 <__swrite+0x1c>
 8019e94:	230e      	movs	r3, #14
 8019e96:	5ec9      	ldrsh	r1, [r1, r3]
 8019e98:	2200      	movs	r2, #0
 8019e9a:	2302      	movs	r3, #2
 8019e9c:	f000 f926 	bl	801a0ec <_lseek_r>
 8019ea0:	89a3      	ldrh	r3, [r4, #12]
 8019ea2:	4a05      	ldr	r2, [pc, #20]	@ (8019eb8 <__swrite+0x34>)
 8019ea4:	0028      	movs	r0, r5
 8019ea6:	4013      	ands	r3, r2
 8019ea8:	81a3      	strh	r3, [r4, #12]
 8019eaa:	0032      	movs	r2, r6
 8019eac:	230e      	movs	r3, #14
 8019eae:	5ee1      	ldrsh	r1, [r4, r3]
 8019eb0:	003b      	movs	r3, r7
 8019eb2:	f000 f943 	bl	801a13c <_write_r>
 8019eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019eb8:	ffffefff 	.word	0xffffefff

08019ebc <__sseek>:
 8019ebc:	b570      	push	{r4, r5, r6, lr}
 8019ebe:	000c      	movs	r4, r1
 8019ec0:	250e      	movs	r5, #14
 8019ec2:	5f49      	ldrsh	r1, [r1, r5]
 8019ec4:	f000 f912 	bl	801a0ec <_lseek_r>
 8019ec8:	89a3      	ldrh	r3, [r4, #12]
 8019eca:	1c42      	adds	r2, r0, #1
 8019ecc:	d103      	bne.n	8019ed6 <__sseek+0x1a>
 8019ece:	4a05      	ldr	r2, [pc, #20]	@ (8019ee4 <__sseek+0x28>)
 8019ed0:	4013      	ands	r3, r2
 8019ed2:	81a3      	strh	r3, [r4, #12]
 8019ed4:	bd70      	pop	{r4, r5, r6, pc}
 8019ed6:	2280      	movs	r2, #128	@ 0x80
 8019ed8:	0152      	lsls	r2, r2, #5
 8019eda:	4313      	orrs	r3, r2
 8019edc:	81a3      	strh	r3, [r4, #12]
 8019ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8019ee0:	e7f8      	b.n	8019ed4 <__sseek+0x18>
 8019ee2:	46c0      	nop			@ (mov r8, r8)
 8019ee4:	ffffefff 	.word	0xffffefff

08019ee8 <__sclose>:
 8019ee8:	b510      	push	{r4, lr}
 8019eea:	230e      	movs	r3, #14
 8019eec:	5ec9      	ldrsh	r1, [r1, r3]
 8019eee:	f000 f8eb 	bl	801a0c8 <_close_r>
 8019ef2:	bd10      	pop	{r4, pc}

08019ef4 <__swbuf_r>:
 8019ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ef6:	0006      	movs	r6, r0
 8019ef8:	000d      	movs	r5, r1
 8019efa:	0014      	movs	r4, r2
 8019efc:	2800      	cmp	r0, #0
 8019efe:	d004      	beq.n	8019f0a <__swbuf_r+0x16>
 8019f00:	6a03      	ldr	r3, [r0, #32]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d101      	bne.n	8019f0a <__swbuf_r+0x16>
 8019f06:	f7ff fe93 	bl	8019c30 <__sinit>
 8019f0a:	69a3      	ldr	r3, [r4, #24]
 8019f0c:	60a3      	str	r3, [r4, #8]
 8019f0e:	89a3      	ldrh	r3, [r4, #12]
 8019f10:	071b      	lsls	r3, r3, #28
 8019f12:	d502      	bpl.n	8019f1a <__swbuf_r+0x26>
 8019f14:	6923      	ldr	r3, [r4, #16]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d109      	bne.n	8019f2e <__swbuf_r+0x3a>
 8019f1a:	0021      	movs	r1, r4
 8019f1c:	0030      	movs	r0, r6
 8019f1e:	f000 f82b 	bl	8019f78 <__swsetup_r>
 8019f22:	2800      	cmp	r0, #0
 8019f24:	d003      	beq.n	8019f2e <__swbuf_r+0x3a>
 8019f26:	2501      	movs	r5, #1
 8019f28:	426d      	negs	r5, r5
 8019f2a:	0028      	movs	r0, r5
 8019f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f2e:	6923      	ldr	r3, [r4, #16]
 8019f30:	6820      	ldr	r0, [r4, #0]
 8019f32:	b2ef      	uxtb	r7, r5
 8019f34:	1ac0      	subs	r0, r0, r3
 8019f36:	6963      	ldr	r3, [r4, #20]
 8019f38:	b2ed      	uxtb	r5, r5
 8019f3a:	4283      	cmp	r3, r0
 8019f3c:	dc05      	bgt.n	8019f4a <__swbuf_r+0x56>
 8019f3e:	0021      	movs	r1, r4
 8019f40:	0030      	movs	r0, r6
 8019f42:	f001 ff97 	bl	801be74 <_fflush_r>
 8019f46:	2800      	cmp	r0, #0
 8019f48:	d1ed      	bne.n	8019f26 <__swbuf_r+0x32>
 8019f4a:	68a3      	ldr	r3, [r4, #8]
 8019f4c:	3001      	adds	r0, #1
 8019f4e:	3b01      	subs	r3, #1
 8019f50:	60a3      	str	r3, [r4, #8]
 8019f52:	6823      	ldr	r3, [r4, #0]
 8019f54:	1c5a      	adds	r2, r3, #1
 8019f56:	6022      	str	r2, [r4, #0]
 8019f58:	701f      	strb	r7, [r3, #0]
 8019f5a:	6963      	ldr	r3, [r4, #20]
 8019f5c:	4283      	cmp	r3, r0
 8019f5e:	d004      	beq.n	8019f6a <__swbuf_r+0x76>
 8019f60:	89a3      	ldrh	r3, [r4, #12]
 8019f62:	07db      	lsls	r3, r3, #31
 8019f64:	d5e1      	bpl.n	8019f2a <__swbuf_r+0x36>
 8019f66:	2d0a      	cmp	r5, #10
 8019f68:	d1df      	bne.n	8019f2a <__swbuf_r+0x36>
 8019f6a:	0021      	movs	r1, r4
 8019f6c:	0030      	movs	r0, r6
 8019f6e:	f001 ff81 	bl	801be74 <_fflush_r>
 8019f72:	2800      	cmp	r0, #0
 8019f74:	d0d9      	beq.n	8019f2a <__swbuf_r+0x36>
 8019f76:	e7d6      	b.n	8019f26 <__swbuf_r+0x32>

08019f78 <__swsetup_r>:
 8019f78:	4b2d      	ldr	r3, [pc, #180]	@ (801a030 <__swsetup_r+0xb8>)
 8019f7a:	b570      	push	{r4, r5, r6, lr}
 8019f7c:	0005      	movs	r5, r0
 8019f7e:	6818      	ldr	r0, [r3, #0]
 8019f80:	000c      	movs	r4, r1
 8019f82:	2800      	cmp	r0, #0
 8019f84:	d004      	beq.n	8019f90 <__swsetup_r+0x18>
 8019f86:	6a03      	ldr	r3, [r0, #32]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d101      	bne.n	8019f90 <__swsetup_r+0x18>
 8019f8c:	f7ff fe50 	bl	8019c30 <__sinit>
 8019f90:	220c      	movs	r2, #12
 8019f92:	5ea3      	ldrsh	r3, [r4, r2]
 8019f94:	071a      	lsls	r2, r3, #28
 8019f96:	d423      	bmi.n	8019fe0 <__swsetup_r+0x68>
 8019f98:	06da      	lsls	r2, r3, #27
 8019f9a:	d407      	bmi.n	8019fac <__swsetup_r+0x34>
 8019f9c:	2209      	movs	r2, #9
 8019f9e:	602a      	str	r2, [r5, #0]
 8019fa0:	2240      	movs	r2, #64	@ 0x40
 8019fa2:	2001      	movs	r0, #1
 8019fa4:	4313      	orrs	r3, r2
 8019fa6:	81a3      	strh	r3, [r4, #12]
 8019fa8:	4240      	negs	r0, r0
 8019faa:	e03a      	b.n	801a022 <__swsetup_r+0xaa>
 8019fac:	075b      	lsls	r3, r3, #29
 8019fae:	d513      	bpl.n	8019fd8 <__swsetup_r+0x60>
 8019fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019fb2:	2900      	cmp	r1, #0
 8019fb4:	d008      	beq.n	8019fc8 <__swsetup_r+0x50>
 8019fb6:	0023      	movs	r3, r4
 8019fb8:	3344      	adds	r3, #68	@ 0x44
 8019fba:	4299      	cmp	r1, r3
 8019fbc:	d002      	beq.n	8019fc4 <__swsetup_r+0x4c>
 8019fbe:	0028      	movs	r0, r5
 8019fc0:	f000 ff8e 	bl	801aee0 <_free_r>
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8019fc8:	2224      	movs	r2, #36	@ 0x24
 8019fca:	89a3      	ldrh	r3, [r4, #12]
 8019fcc:	4393      	bics	r3, r2
 8019fce:	81a3      	strh	r3, [r4, #12]
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	6063      	str	r3, [r4, #4]
 8019fd4:	6923      	ldr	r3, [r4, #16]
 8019fd6:	6023      	str	r3, [r4, #0]
 8019fd8:	2308      	movs	r3, #8
 8019fda:	89a2      	ldrh	r2, [r4, #12]
 8019fdc:	4313      	orrs	r3, r2
 8019fde:	81a3      	strh	r3, [r4, #12]
 8019fe0:	6923      	ldr	r3, [r4, #16]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d10b      	bne.n	8019ffe <__swsetup_r+0x86>
 8019fe6:	21a0      	movs	r1, #160	@ 0xa0
 8019fe8:	2280      	movs	r2, #128	@ 0x80
 8019fea:	89a3      	ldrh	r3, [r4, #12]
 8019fec:	0089      	lsls	r1, r1, #2
 8019fee:	0092      	lsls	r2, r2, #2
 8019ff0:	400b      	ands	r3, r1
 8019ff2:	4293      	cmp	r3, r2
 8019ff4:	d003      	beq.n	8019ffe <__swsetup_r+0x86>
 8019ff6:	0021      	movs	r1, r4
 8019ff8:	0028      	movs	r0, r5
 8019ffa:	f001 ff91 	bl	801bf20 <__smakebuf_r>
 8019ffe:	220c      	movs	r2, #12
 801a000:	5ea3      	ldrsh	r3, [r4, r2]
 801a002:	2101      	movs	r1, #1
 801a004:	001a      	movs	r2, r3
 801a006:	400a      	ands	r2, r1
 801a008:	420b      	tst	r3, r1
 801a00a:	d00b      	beq.n	801a024 <__swsetup_r+0xac>
 801a00c:	2200      	movs	r2, #0
 801a00e:	60a2      	str	r2, [r4, #8]
 801a010:	6962      	ldr	r2, [r4, #20]
 801a012:	4252      	negs	r2, r2
 801a014:	61a2      	str	r2, [r4, #24]
 801a016:	2000      	movs	r0, #0
 801a018:	6922      	ldr	r2, [r4, #16]
 801a01a:	4282      	cmp	r2, r0
 801a01c:	d101      	bne.n	801a022 <__swsetup_r+0xaa>
 801a01e:	061a      	lsls	r2, r3, #24
 801a020:	d4be      	bmi.n	8019fa0 <__swsetup_r+0x28>
 801a022:	bd70      	pop	{r4, r5, r6, pc}
 801a024:	0799      	lsls	r1, r3, #30
 801a026:	d400      	bmi.n	801a02a <__swsetup_r+0xb2>
 801a028:	6962      	ldr	r2, [r4, #20]
 801a02a:	60a2      	str	r2, [r4, #8]
 801a02c:	e7f3      	b.n	801a016 <__swsetup_r+0x9e>
 801a02e:	46c0      	nop			@ (mov r8, r8)
 801a030:	200002cc 	.word	0x200002cc

0801a034 <memcmp>:
 801a034:	b530      	push	{r4, r5, lr}
 801a036:	2400      	movs	r4, #0
 801a038:	3901      	subs	r1, #1
 801a03a:	42a2      	cmp	r2, r4
 801a03c:	d101      	bne.n	801a042 <memcmp+0xe>
 801a03e:	2000      	movs	r0, #0
 801a040:	e005      	b.n	801a04e <memcmp+0x1a>
 801a042:	5d03      	ldrb	r3, [r0, r4]
 801a044:	3401      	adds	r4, #1
 801a046:	5d0d      	ldrb	r5, [r1, r4]
 801a048:	42ab      	cmp	r3, r5
 801a04a:	d0f6      	beq.n	801a03a <memcmp+0x6>
 801a04c:	1b58      	subs	r0, r3, r5
 801a04e:	bd30      	pop	{r4, r5, pc}

0801a050 <memset>:
 801a050:	0003      	movs	r3, r0
 801a052:	1882      	adds	r2, r0, r2
 801a054:	4293      	cmp	r3, r2
 801a056:	d100      	bne.n	801a05a <memset+0xa>
 801a058:	4770      	bx	lr
 801a05a:	7019      	strb	r1, [r3, #0]
 801a05c:	3301      	adds	r3, #1
 801a05e:	e7f9      	b.n	801a054 <memset+0x4>

0801a060 <strcat>:
 801a060:	0002      	movs	r2, r0
 801a062:	b510      	push	{r4, lr}
 801a064:	7813      	ldrb	r3, [r2, #0]
 801a066:	0014      	movs	r4, r2
 801a068:	3201      	adds	r2, #1
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d1fa      	bne.n	801a064 <strcat+0x4>
 801a06e:	5cca      	ldrb	r2, [r1, r3]
 801a070:	54e2      	strb	r2, [r4, r3]
 801a072:	3301      	adds	r3, #1
 801a074:	2a00      	cmp	r2, #0
 801a076:	d1fa      	bne.n	801a06e <strcat+0xe>
 801a078:	bd10      	pop	{r4, pc}

0801a07a <strchr>:
 801a07a:	b2c9      	uxtb	r1, r1
 801a07c:	7803      	ldrb	r3, [r0, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d004      	beq.n	801a08c <strchr+0x12>
 801a082:	428b      	cmp	r3, r1
 801a084:	d100      	bne.n	801a088 <strchr+0xe>
 801a086:	4770      	bx	lr
 801a088:	3001      	adds	r0, #1
 801a08a:	e7f7      	b.n	801a07c <strchr+0x2>
 801a08c:	424b      	negs	r3, r1
 801a08e:	4159      	adcs	r1, r3
 801a090:	4249      	negs	r1, r1
 801a092:	4008      	ands	r0, r1
 801a094:	e7f7      	b.n	801a086 <strchr+0xc>

0801a096 <strncpy>:
 801a096:	0003      	movs	r3, r0
 801a098:	b530      	push	{r4, r5, lr}
 801a09a:	001d      	movs	r5, r3
 801a09c:	2a00      	cmp	r2, #0
 801a09e:	d006      	beq.n	801a0ae <strncpy+0x18>
 801a0a0:	780c      	ldrb	r4, [r1, #0]
 801a0a2:	3a01      	subs	r2, #1
 801a0a4:	3301      	adds	r3, #1
 801a0a6:	702c      	strb	r4, [r5, #0]
 801a0a8:	3101      	adds	r1, #1
 801a0aa:	2c00      	cmp	r4, #0
 801a0ac:	d1f5      	bne.n	801a09a <strncpy+0x4>
 801a0ae:	2100      	movs	r1, #0
 801a0b0:	189a      	adds	r2, r3, r2
 801a0b2:	4293      	cmp	r3, r2
 801a0b4:	d100      	bne.n	801a0b8 <strncpy+0x22>
 801a0b6:	bd30      	pop	{r4, r5, pc}
 801a0b8:	7019      	strb	r1, [r3, #0]
 801a0ba:	3301      	adds	r3, #1
 801a0bc:	e7f9      	b.n	801a0b2 <strncpy+0x1c>
	...

0801a0c0 <_localeconv_r>:
 801a0c0:	4800      	ldr	r0, [pc, #0]	@ (801a0c4 <_localeconv_r+0x4>)
 801a0c2:	4770      	bx	lr
 801a0c4:	2000040c 	.word	0x2000040c

0801a0c8 <_close_r>:
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	b570      	push	{r4, r5, r6, lr}
 801a0cc:	4d06      	ldr	r5, [pc, #24]	@ (801a0e8 <_close_r+0x20>)
 801a0ce:	0004      	movs	r4, r0
 801a0d0:	0008      	movs	r0, r1
 801a0d2:	602b      	str	r3, [r5, #0]
 801a0d4:	f7f0 f996 	bl	800a404 <_close>
 801a0d8:	1c43      	adds	r3, r0, #1
 801a0da:	d103      	bne.n	801a0e4 <_close_r+0x1c>
 801a0dc:	682b      	ldr	r3, [r5, #0]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d000      	beq.n	801a0e4 <_close_r+0x1c>
 801a0e2:	6023      	str	r3, [r4, #0]
 801a0e4:	bd70      	pop	{r4, r5, r6, pc}
 801a0e6:	46c0      	nop			@ (mov r8, r8)
 801a0e8:	20006810 	.word	0x20006810

0801a0ec <_lseek_r>:
 801a0ec:	b570      	push	{r4, r5, r6, lr}
 801a0ee:	0004      	movs	r4, r0
 801a0f0:	0008      	movs	r0, r1
 801a0f2:	0011      	movs	r1, r2
 801a0f4:	001a      	movs	r2, r3
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	4d05      	ldr	r5, [pc, #20]	@ (801a110 <_lseek_r+0x24>)
 801a0fa:	602b      	str	r3, [r5, #0]
 801a0fc:	f7f0 f98c 	bl	800a418 <_lseek>
 801a100:	1c43      	adds	r3, r0, #1
 801a102:	d103      	bne.n	801a10c <_lseek_r+0x20>
 801a104:	682b      	ldr	r3, [r5, #0]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d000      	beq.n	801a10c <_lseek_r+0x20>
 801a10a:	6023      	str	r3, [r4, #0]
 801a10c:	bd70      	pop	{r4, r5, r6, pc}
 801a10e:	46c0      	nop			@ (mov r8, r8)
 801a110:	20006810 	.word	0x20006810

0801a114 <_read_r>:
 801a114:	b570      	push	{r4, r5, r6, lr}
 801a116:	0004      	movs	r4, r0
 801a118:	0008      	movs	r0, r1
 801a11a:	0011      	movs	r1, r2
 801a11c:	001a      	movs	r2, r3
 801a11e:	2300      	movs	r3, #0
 801a120:	4d05      	ldr	r5, [pc, #20]	@ (801a138 <_read_r+0x24>)
 801a122:	602b      	str	r3, [r5, #0]
 801a124:	f7f0 f954 	bl	800a3d0 <_read>
 801a128:	1c43      	adds	r3, r0, #1
 801a12a:	d103      	bne.n	801a134 <_read_r+0x20>
 801a12c:	682b      	ldr	r3, [r5, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d000      	beq.n	801a134 <_read_r+0x20>
 801a132:	6023      	str	r3, [r4, #0]
 801a134:	bd70      	pop	{r4, r5, r6, pc}
 801a136:	46c0      	nop			@ (mov r8, r8)
 801a138:	20006810 	.word	0x20006810

0801a13c <_write_r>:
 801a13c:	b570      	push	{r4, r5, r6, lr}
 801a13e:	0004      	movs	r4, r0
 801a140:	0008      	movs	r0, r1
 801a142:	0011      	movs	r1, r2
 801a144:	001a      	movs	r2, r3
 801a146:	2300      	movs	r3, #0
 801a148:	4d05      	ldr	r5, [pc, #20]	@ (801a160 <_write_r+0x24>)
 801a14a:	602b      	str	r3, [r5, #0]
 801a14c:	f7f0 f94d 	bl	800a3ea <_write>
 801a150:	1c43      	adds	r3, r0, #1
 801a152:	d103      	bne.n	801a15c <_write_r+0x20>
 801a154:	682b      	ldr	r3, [r5, #0]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d000      	beq.n	801a15c <_write_r+0x20>
 801a15a:	6023      	str	r3, [r4, #0]
 801a15c:	bd70      	pop	{r4, r5, r6, pc}
 801a15e:	46c0      	nop			@ (mov r8, r8)
 801a160:	20006810 	.word	0x20006810

0801a164 <__errno>:
 801a164:	4b01      	ldr	r3, [pc, #4]	@ (801a16c <__errno+0x8>)
 801a166:	6818      	ldr	r0, [r3, #0]
 801a168:	4770      	bx	lr
 801a16a:	46c0      	nop			@ (mov r8, r8)
 801a16c:	200002cc 	.word	0x200002cc

0801a170 <__libc_init_array>:
 801a170:	b570      	push	{r4, r5, r6, lr}
 801a172:	2600      	movs	r6, #0
 801a174:	4c0c      	ldr	r4, [pc, #48]	@ (801a1a8 <__libc_init_array+0x38>)
 801a176:	4d0d      	ldr	r5, [pc, #52]	@ (801a1ac <__libc_init_array+0x3c>)
 801a178:	1b64      	subs	r4, r4, r5
 801a17a:	10a4      	asrs	r4, r4, #2
 801a17c:	42a6      	cmp	r6, r4
 801a17e:	d109      	bne.n	801a194 <__libc_init_array+0x24>
 801a180:	2600      	movs	r6, #0
 801a182:	f002 f9e1 	bl	801c548 <_init>
 801a186:	4c0a      	ldr	r4, [pc, #40]	@ (801a1b0 <__libc_init_array+0x40>)
 801a188:	4d0a      	ldr	r5, [pc, #40]	@ (801a1b4 <__libc_init_array+0x44>)
 801a18a:	1b64      	subs	r4, r4, r5
 801a18c:	10a4      	asrs	r4, r4, #2
 801a18e:	42a6      	cmp	r6, r4
 801a190:	d105      	bne.n	801a19e <__libc_init_array+0x2e>
 801a192:	bd70      	pop	{r4, r5, r6, pc}
 801a194:	00b3      	lsls	r3, r6, #2
 801a196:	58eb      	ldr	r3, [r5, r3]
 801a198:	4798      	blx	r3
 801a19a:	3601      	adds	r6, #1
 801a19c:	e7ee      	b.n	801a17c <__libc_init_array+0xc>
 801a19e:	00b3      	lsls	r3, r6, #2
 801a1a0:	58eb      	ldr	r3, [r5, r3]
 801a1a2:	4798      	blx	r3
 801a1a4:	3601      	adds	r6, #1
 801a1a6:	e7f2      	b.n	801a18e <__libc_init_array+0x1e>
 801a1a8:	08020114 	.word	0x08020114
 801a1ac:	08020114 	.word	0x08020114
 801a1b0:	08020118 	.word	0x08020118
 801a1b4:	08020114 	.word	0x08020114

0801a1b8 <__retarget_lock_init_recursive>:
 801a1b8:	4770      	bx	lr

0801a1ba <__retarget_lock_acquire_recursive>:
 801a1ba:	4770      	bx	lr

0801a1bc <__retarget_lock_release_recursive>:
 801a1bc:	4770      	bx	lr

0801a1be <strcpy>:
 801a1be:	0003      	movs	r3, r0
 801a1c0:	780a      	ldrb	r2, [r1, #0]
 801a1c2:	3101      	adds	r1, #1
 801a1c4:	701a      	strb	r2, [r3, #0]
 801a1c6:	3301      	adds	r3, #1
 801a1c8:	2a00      	cmp	r2, #0
 801a1ca:	d1f9      	bne.n	801a1c0 <strcpy+0x2>
 801a1cc:	4770      	bx	lr

0801a1ce <memchr>:
 801a1ce:	b2c9      	uxtb	r1, r1
 801a1d0:	1882      	adds	r2, r0, r2
 801a1d2:	4290      	cmp	r0, r2
 801a1d4:	d101      	bne.n	801a1da <memchr+0xc>
 801a1d6:	2000      	movs	r0, #0
 801a1d8:	4770      	bx	lr
 801a1da:	7803      	ldrb	r3, [r0, #0]
 801a1dc:	428b      	cmp	r3, r1
 801a1de:	d0fb      	beq.n	801a1d8 <memchr+0xa>
 801a1e0:	3001      	adds	r0, #1
 801a1e2:	e7f6      	b.n	801a1d2 <memchr+0x4>

0801a1e4 <memcpy>:
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	b510      	push	{r4, lr}
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d100      	bne.n	801a1ee <memcpy+0xa>
 801a1ec:	bd10      	pop	{r4, pc}
 801a1ee:	5ccc      	ldrb	r4, [r1, r3]
 801a1f0:	54c4      	strb	r4, [r0, r3]
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	e7f8      	b.n	801a1e8 <memcpy+0x4>

0801a1f6 <quorem>:
 801a1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1f8:	6903      	ldr	r3, [r0, #16]
 801a1fa:	690c      	ldr	r4, [r1, #16]
 801a1fc:	b089      	sub	sp, #36	@ 0x24
 801a1fe:	9003      	str	r0, [sp, #12]
 801a200:	9106      	str	r1, [sp, #24]
 801a202:	2000      	movs	r0, #0
 801a204:	42a3      	cmp	r3, r4
 801a206:	db63      	blt.n	801a2d0 <quorem+0xda>
 801a208:	000b      	movs	r3, r1
 801a20a:	3c01      	subs	r4, #1
 801a20c:	3314      	adds	r3, #20
 801a20e:	00a5      	lsls	r5, r4, #2
 801a210:	9304      	str	r3, [sp, #16]
 801a212:	195b      	adds	r3, r3, r5
 801a214:	9305      	str	r3, [sp, #20]
 801a216:	9b03      	ldr	r3, [sp, #12]
 801a218:	3314      	adds	r3, #20
 801a21a:	9301      	str	r3, [sp, #4]
 801a21c:	195d      	adds	r5, r3, r5
 801a21e:	9b05      	ldr	r3, [sp, #20]
 801a220:	682f      	ldr	r7, [r5, #0]
 801a222:	681e      	ldr	r6, [r3, #0]
 801a224:	0038      	movs	r0, r7
 801a226:	3601      	adds	r6, #1
 801a228:	0031      	movs	r1, r6
 801a22a:	f7e5 ff9d 	bl	8000168 <__udivsi3>
 801a22e:	9002      	str	r0, [sp, #8]
 801a230:	42b7      	cmp	r7, r6
 801a232:	d327      	bcc.n	801a284 <quorem+0x8e>
 801a234:	9b04      	ldr	r3, [sp, #16]
 801a236:	2700      	movs	r7, #0
 801a238:	469c      	mov	ip, r3
 801a23a:	9e01      	ldr	r6, [sp, #4]
 801a23c:	9707      	str	r7, [sp, #28]
 801a23e:	4662      	mov	r2, ip
 801a240:	ca08      	ldmia	r2!, {r3}
 801a242:	6830      	ldr	r0, [r6, #0]
 801a244:	4694      	mov	ip, r2
 801a246:	9a02      	ldr	r2, [sp, #8]
 801a248:	b299      	uxth	r1, r3
 801a24a:	4351      	muls	r1, r2
 801a24c:	0c1b      	lsrs	r3, r3, #16
 801a24e:	4353      	muls	r3, r2
 801a250:	19c9      	adds	r1, r1, r7
 801a252:	0c0a      	lsrs	r2, r1, #16
 801a254:	189b      	adds	r3, r3, r2
 801a256:	b289      	uxth	r1, r1
 801a258:	b282      	uxth	r2, r0
 801a25a:	1a52      	subs	r2, r2, r1
 801a25c:	9907      	ldr	r1, [sp, #28]
 801a25e:	0c1f      	lsrs	r7, r3, #16
 801a260:	1852      	adds	r2, r2, r1
 801a262:	0c00      	lsrs	r0, r0, #16
 801a264:	b29b      	uxth	r3, r3
 801a266:	1411      	asrs	r1, r2, #16
 801a268:	1ac3      	subs	r3, r0, r3
 801a26a:	185b      	adds	r3, r3, r1
 801a26c:	1419      	asrs	r1, r3, #16
 801a26e:	b292      	uxth	r2, r2
 801a270:	041b      	lsls	r3, r3, #16
 801a272:	431a      	orrs	r2, r3
 801a274:	9b05      	ldr	r3, [sp, #20]
 801a276:	9107      	str	r1, [sp, #28]
 801a278:	c604      	stmia	r6!, {r2}
 801a27a:	4563      	cmp	r3, ip
 801a27c:	d2df      	bcs.n	801a23e <quorem+0x48>
 801a27e:	682b      	ldr	r3, [r5, #0]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d02b      	beq.n	801a2dc <quorem+0xe6>
 801a284:	9906      	ldr	r1, [sp, #24]
 801a286:	9803      	ldr	r0, [sp, #12]
 801a288:	f001 f9b6 	bl	801b5f8 <__mcmp>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	db1e      	blt.n	801a2ce <quorem+0xd8>
 801a290:	2600      	movs	r6, #0
 801a292:	9d01      	ldr	r5, [sp, #4]
 801a294:	9904      	ldr	r1, [sp, #16]
 801a296:	c901      	ldmia	r1!, {r0}
 801a298:	682b      	ldr	r3, [r5, #0]
 801a29a:	b287      	uxth	r7, r0
 801a29c:	b29a      	uxth	r2, r3
 801a29e:	1bd2      	subs	r2, r2, r7
 801a2a0:	1992      	adds	r2, r2, r6
 801a2a2:	0c00      	lsrs	r0, r0, #16
 801a2a4:	0c1b      	lsrs	r3, r3, #16
 801a2a6:	1a1b      	subs	r3, r3, r0
 801a2a8:	1410      	asrs	r0, r2, #16
 801a2aa:	181b      	adds	r3, r3, r0
 801a2ac:	141e      	asrs	r6, r3, #16
 801a2ae:	b292      	uxth	r2, r2
 801a2b0:	041b      	lsls	r3, r3, #16
 801a2b2:	431a      	orrs	r2, r3
 801a2b4:	9b05      	ldr	r3, [sp, #20]
 801a2b6:	c504      	stmia	r5!, {r2}
 801a2b8:	428b      	cmp	r3, r1
 801a2ba:	d2ec      	bcs.n	801a296 <quorem+0xa0>
 801a2bc:	9a01      	ldr	r2, [sp, #4]
 801a2be:	00a3      	lsls	r3, r4, #2
 801a2c0:	18d3      	adds	r3, r2, r3
 801a2c2:	681a      	ldr	r2, [r3, #0]
 801a2c4:	2a00      	cmp	r2, #0
 801a2c6:	d014      	beq.n	801a2f2 <quorem+0xfc>
 801a2c8:	9b02      	ldr	r3, [sp, #8]
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	9302      	str	r3, [sp, #8]
 801a2ce:	9802      	ldr	r0, [sp, #8]
 801a2d0:	b009      	add	sp, #36	@ 0x24
 801a2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2d4:	682b      	ldr	r3, [r5, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d104      	bne.n	801a2e4 <quorem+0xee>
 801a2da:	3c01      	subs	r4, #1
 801a2dc:	9b01      	ldr	r3, [sp, #4]
 801a2de:	3d04      	subs	r5, #4
 801a2e0:	42ab      	cmp	r3, r5
 801a2e2:	d3f7      	bcc.n	801a2d4 <quorem+0xde>
 801a2e4:	9b03      	ldr	r3, [sp, #12]
 801a2e6:	611c      	str	r4, [r3, #16]
 801a2e8:	e7cc      	b.n	801a284 <quorem+0x8e>
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	2a00      	cmp	r2, #0
 801a2ee:	d104      	bne.n	801a2fa <quorem+0x104>
 801a2f0:	3c01      	subs	r4, #1
 801a2f2:	9a01      	ldr	r2, [sp, #4]
 801a2f4:	3b04      	subs	r3, #4
 801a2f6:	429a      	cmp	r2, r3
 801a2f8:	d3f7      	bcc.n	801a2ea <quorem+0xf4>
 801a2fa:	9b03      	ldr	r3, [sp, #12]
 801a2fc:	611c      	str	r4, [r3, #16]
 801a2fe:	e7e3      	b.n	801a2c8 <quorem+0xd2>

0801a300 <_dtoa_r>:
 801a300:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a302:	0014      	movs	r4, r2
 801a304:	001d      	movs	r5, r3
 801a306:	69c6      	ldr	r6, [r0, #28]
 801a308:	b09d      	sub	sp, #116	@ 0x74
 801a30a:	940a      	str	r4, [sp, #40]	@ 0x28
 801a30c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801a30e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801a310:	9003      	str	r0, [sp, #12]
 801a312:	2e00      	cmp	r6, #0
 801a314:	d10f      	bne.n	801a336 <_dtoa_r+0x36>
 801a316:	2010      	movs	r0, #16
 801a318:	f000 fe2c 	bl	801af74 <malloc>
 801a31c:	9b03      	ldr	r3, [sp, #12]
 801a31e:	1e02      	subs	r2, r0, #0
 801a320:	61d8      	str	r0, [r3, #28]
 801a322:	d104      	bne.n	801a32e <_dtoa_r+0x2e>
 801a324:	21ef      	movs	r1, #239	@ 0xef
 801a326:	4bc7      	ldr	r3, [pc, #796]	@ (801a644 <_dtoa_r+0x344>)
 801a328:	48c7      	ldr	r0, [pc, #796]	@ (801a648 <_dtoa_r+0x348>)
 801a32a:	f001 feb9 	bl	801c0a0 <__assert_func>
 801a32e:	6046      	str	r6, [r0, #4]
 801a330:	6086      	str	r6, [r0, #8]
 801a332:	6006      	str	r6, [r0, #0]
 801a334:	60c6      	str	r6, [r0, #12]
 801a336:	9b03      	ldr	r3, [sp, #12]
 801a338:	69db      	ldr	r3, [r3, #28]
 801a33a:	6819      	ldr	r1, [r3, #0]
 801a33c:	2900      	cmp	r1, #0
 801a33e:	d00b      	beq.n	801a358 <_dtoa_r+0x58>
 801a340:	685a      	ldr	r2, [r3, #4]
 801a342:	2301      	movs	r3, #1
 801a344:	4093      	lsls	r3, r2
 801a346:	604a      	str	r2, [r1, #4]
 801a348:	608b      	str	r3, [r1, #8]
 801a34a:	9803      	ldr	r0, [sp, #12]
 801a34c:	f000 ff12 	bl	801b174 <_Bfree>
 801a350:	2200      	movs	r2, #0
 801a352:	9b03      	ldr	r3, [sp, #12]
 801a354:	69db      	ldr	r3, [r3, #28]
 801a356:	601a      	str	r2, [r3, #0]
 801a358:	2d00      	cmp	r5, #0
 801a35a:	da1e      	bge.n	801a39a <_dtoa_r+0x9a>
 801a35c:	2301      	movs	r3, #1
 801a35e:	603b      	str	r3, [r7, #0]
 801a360:	006b      	lsls	r3, r5, #1
 801a362:	085b      	lsrs	r3, r3, #1
 801a364:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a366:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a368:	4bb8      	ldr	r3, [pc, #736]	@ (801a64c <_dtoa_r+0x34c>)
 801a36a:	4ab8      	ldr	r2, [pc, #736]	@ (801a64c <_dtoa_r+0x34c>)
 801a36c:	403b      	ands	r3, r7
 801a36e:	4293      	cmp	r3, r2
 801a370:	d116      	bne.n	801a3a0 <_dtoa_r+0xa0>
 801a372:	4bb7      	ldr	r3, [pc, #732]	@ (801a650 <_dtoa_r+0x350>)
 801a374:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a376:	6013      	str	r3, [r2, #0]
 801a378:	033b      	lsls	r3, r7, #12
 801a37a:	0b1b      	lsrs	r3, r3, #12
 801a37c:	4323      	orrs	r3, r4
 801a37e:	d101      	bne.n	801a384 <_dtoa_r+0x84>
 801a380:	f000 fd80 	bl	801ae84 <_dtoa_r+0xb84>
 801a384:	4bb3      	ldr	r3, [pc, #716]	@ (801a654 <_dtoa_r+0x354>)
 801a386:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a388:	9308      	str	r3, [sp, #32]
 801a38a:	2a00      	cmp	r2, #0
 801a38c:	d002      	beq.n	801a394 <_dtoa_r+0x94>
 801a38e:	4bb2      	ldr	r3, [pc, #712]	@ (801a658 <_dtoa_r+0x358>)
 801a390:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a392:	6013      	str	r3, [r2, #0]
 801a394:	9808      	ldr	r0, [sp, #32]
 801a396:	b01d      	add	sp, #116	@ 0x74
 801a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a39a:	2300      	movs	r3, #0
 801a39c:	603b      	str	r3, [r7, #0]
 801a39e:	e7e2      	b.n	801a366 <_dtoa_r+0x66>
 801a3a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a3a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3a4:	9212      	str	r2, [sp, #72]	@ 0x48
 801a3a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a3a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a3aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	f7e6 f860 	bl	8000474 <__aeabi_dcmpeq>
 801a3b4:	1e06      	subs	r6, r0, #0
 801a3b6:	d00b      	beq.n	801a3d0 <_dtoa_r+0xd0>
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a3bc:	6013      	str	r3, [r2, #0]
 801a3be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d002      	beq.n	801a3ca <_dtoa_r+0xca>
 801a3c4:	4ba5      	ldr	r3, [pc, #660]	@ (801a65c <_dtoa_r+0x35c>)
 801a3c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a3c8:	6013      	str	r3, [r2, #0]
 801a3ca:	4ba5      	ldr	r3, [pc, #660]	@ (801a660 <_dtoa_r+0x360>)
 801a3cc:	9308      	str	r3, [sp, #32]
 801a3ce:	e7e1      	b.n	801a394 <_dtoa_r+0x94>
 801a3d0:	ab1a      	add	r3, sp, #104	@ 0x68
 801a3d2:	9301      	str	r3, [sp, #4]
 801a3d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 801a3d6:	9300      	str	r3, [sp, #0]
 801a3d8:	9803      	ldr	r0, [sp, #12]
 801a3da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a3dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a3de:	f001 f9c1 	bl	801b764 <__d2b>
 801a3e2:	007a      	lsls	r2, r7, #1
 801a3e4:	9005      	str	r0, [sp, #20]
 801a3e6:	0d52      	lsrs	r2, r2, #21
 801a3e8:	d100      	bne.n	801a3ec <_dtoa_r+0xec>
 801a3ea:	e07b      	b.n	801a4e4 <_dtoa_r+0x1e4>
 801a3ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a3ee:	9618      	str	r6, [sp, #96]	@ 0x60
 801a3f0:	0319      	lsls	r1, r3, #12
 801a3f2:	4b9c      	ldr	r3, [pc, #624]	@ (801a664 <_dtoa_r+0x364>)
 801a3f4:	0b09      	lsrs	r1, r1, #12
 801a3f6:	430b      	orrs	r3, r1
 801a3f8:	499b      	ldr	r1, [pc, #620]	@ (801a668 <_dtoa_r+0x368>)
 801a3fa:	1857      	adds	r7, r2, r1
 801a3fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a3fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a400:	0019      	movs	r1, r3
 801a402:	2200      	movs	r2, #0
 801a404:	4b99      	ldr	r3, [pc, #612]	@ (801a66c <_dtoa_r+0x36c>)
 801a406:	f7e8 fd0d 	bl	8002e24 <__aeabi_dsub>
 801a40a:	4a99      	ldr	r2, [pc, #612]	@ (801a670 <_dtoa_r+0x370>)
 801a40c:	4b99      	ldr	r3, [pc, #612]	@ (801a674 <_dtoa_r+0x374>)
 801a40e:	f7e8 fa23 	bl	8002858 <__aeabi_dmul>
 801a412:	4a99      	ldr	r2, [pc, #612]	@ (801a678 <_dtoa_r+0x378>)
 801a414:	4b99      	ldr	r3, [pc, #612]	@ (801a67c <_dtoa_r+0x37c>)
 801a416:	f7e7 fa1f 	bl	8001858 <__aeabi_dadd>
 801a41a:	0004      	movs	r4, r0
 801a41c:	0038      	movs	r0, r7
 801a41e:	000d      	movs	r5, r1
 801a420:	f7e9 f968 	bl	80036f4 <__aeabi_i2d>
 801a424:	4a96      	ldr	r2, [pc, #600]	@ (801a680 <_dtoa_r+0x380>)
 801a426:	4b97      	ldr	r3, [pc, #604]	@ (801a684 <_dtoa_r+0x384>)
 801a428:	f7e8 fa16 	bl	8002858 <__aeabi_dmul>
 801a42c:	0002      	movs	r2, r0
 801a42e:	000b      	movs	r3, r1
 801a430:	0020      	movs	r0, r4
 801a432:	0029      	movs	r1, r5
 801a434:	f7e7 fa10 	bl	8001858 <__aeabi_dadd>
 801a438:	0004      	movs	r4, r0
 801a43a:	000d      	movs	r5, r1
 801a43c:	f7e9 f91e 	bl	800367c <__aeabi_d2iz>
 801a440:	2200      	movs	r2, #0
 801a442:	9004      	str	r0, [sp, #16]
 801a444:	2300      	movs	r3, #0
 801a446:	0020      	movs	r0, r4
 801a448:	0029      	movs	r1, r5
 801a44a:	f7e6 f819 	bl	8000480 <__aeabi_dcmplt>
 801a44e:	2800      	cmp	r0, #0
 801a450:	d00b      	beq.n	801a46a <_dtoa_r+0x16a>
 801a452:	9804      	ldr	r0, [sp, #16]
 801a454:	f7e9 f94e 	bl	80036f4 <__aeabi_i2d>
 801a458:	002b      	movs	r3, r5
 801a45a:	0022      	movs	r2, r4
 801a45c:	f7e6 f80a 	bl	8000474 <__aeabi_dcmpeq>
 801a460:	4243      	negs	r3, r0
 801a462:	4158      	adcs	r0, r3
 801a464:	9b04      	ldr	r3, [sp, #16]
 801a466:	1a1b      	subs	r3, r3, r0
 801a468:	9304      	str	r3, [sp, #16]
 801a46a:	2301      	movs	r3, #1
 801a46c:	9315      	str	r3, [sp, #84]	@ 0x54
 801a46e:	9b04      	ldr	r3, [sp, #16]
 801a470:	2b16      	cmp	r3, #22
 801a472:	d810      	bhi.n	801a496 <_dtoa_r+0x196>
 801a474:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a476:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a478:	9a04      	ldr	r2, [sp, #16]
 801a47a:	4b83      	ldr	r3, [pc, #524]	@ (801a688 <_dtoa_r+0x388>)
 801a47c:	00d2      	lsls	r2, r2, #3
 801a47e:	189b      	adds	r3, r3, r2
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	685b      	ldr	r3, [r3, #4]
 801a484:	f7e5 fffc 	bl	8000480 <__aeabi_dcmplt>
 801a488:	2800      	cmp	r0, #0
 801a48a:	d047      	beq.n	801a51c <_dtoa_r+0x21c>
 801a48c:	9b04      	ldr	r3, [sp, #16]
 801a48e:	3b01      	subs	r3, #1
 801a490:	9304      	str	r3, [sp, #16]
 801a492:	2300      	movs	r3, #0
 801a494:	9315      	str	r3, [sp, #84]	@ 0x54
 801a496:	2200      	movs	r2, #0
 801a498:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801a49a:	9206      	str	r2, [sp, #24]
 801a49c:	1bdb      	subs	r3, r3, r7
 801a49e:	1e5a      	subs	r2, r3, #1
 801a4a0:	d53e      	bpl.n	801a520 <_dtoa_r+0x220>
 801a4a2:	2201      	movs	r2, #1
 801a4a4:	1ad3      	subs	r3, r2, r3
 801a4a6:	9306      	str	r3, [sp, #24]
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	930d      	str	r3, [sp, #52]	@ 0x34
 801a4ac:	9b04      	ldr	r3, [sp, #16]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	db38      	blt.n	801a524 <_dtoa_r+0x224>
 801a4b2:	9a04      	ldr	r2, [sp, #16]
 801a4b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4b6:	4694      	mov	ip, r2
 801a4b8:	4463      	add	r3, ip
 801a4ba:	930d      	str	r3, [sp, #52]	@ 0x34
 801a4bc:	2300      	movs	r3, #0
 801a4be:	9214      	str	r2, [sp, #80]	@ 0x50
 801a4c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a4c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a4c4:	2401      	movs	r4, #1
 801a4c6:	2b09      	cmp	r3, #9
 801a4c8:	d862      	bhi.n	801a590 <_dtoa_r+0x290>
 801a4ca:	2b05      	cmp	r3, #5
 801a4cc:	dd02      	ble.n	801a4d4 <_dtoa_r+0x1d4>
 801a4ce:	2400      	movs	r4, #0
 801a4d0:	3b04      	subs	r3, #4
 801a4d2:	9322      	str	r3, [sp, #136]	@ 0x88
 801a4d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a4d6:	1e98      	subs	r0, r3, #2
 801a4d8:	2803      	cmp	r0, #3
 801a4da:	d863      	bhi.n	801a5a4 <_dtoa_r+0x2a4>
 801a4dc:	f7e5 fe26 	bl	800012c <__gnu_thumb1_case_uqi>
 801a4e0:	2b385654 	.word	0x2b385654
 801a4e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a4e6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a4e8:	18f6      	adds	r6, r6, r3
 801a4ea:	4b68      	ldr	r3, [pc, #416]	@ (801a68c <_dtoa_r+0x38c>)
 801a4ec:	18f2      	adds	r2, r6, r3
 801a4ee:	2a20      	cmp	r2, #32
 801a4f0:	dd0f      	ble.n	801a512 <_dtoa_r+0x212>
 801a4f2:	2340      	movs	r3, #64	@ 0x40
 801a4f4:	1a9b      	subs	r3, r3, r2
 801a4f6:	409f      	lsls	r7, r3
 801a4f8:	4b65      	ldr	r3, [pc, #404]	@ (801a690 <_dtoa_r+0x390>)
 801a4fa:	0038      	movs	r0, r7
 801a4fc:	18f3      	adds	r3, r6, r3
 801a4fe:	40dc      	lsrs	r4, r3
 801a500:	4320      	orrs	r0, r4
 801a502:	f7e9 f925 	bl	8003750 <__aeabi_ui2d>
 801a506:	2201      	movs	r2, #1
 801a508:	4b62      	ldr	r3, [pc, #392]	@ (801a694 <_dtoa_r+0x394>)
 801a50a:	1e77      	subs	r7, r6, #1
 801a50c:	18cb      	adds	r3, r1, r3
 801a50e:	9218      	str	r2, [sp, #96]	@ 0x60
 801a510:	e776      	b.n	801a400 <_dtoa_r+0x100>
 801a512:	2320      	movs	r3, #32
 801a514:	0020      	movs	r0, r4
 801a516:	1a9b      	subs	r3, r3, r2
 801a518:	4098      	lsls	r0, r3
 801a51a:	e7f2      	b.n	801a502 <_dtoa_r+0x202>
 801a51c:	9015      	str	r0, [sp, #84]	@ 0x54
 801a51e:	e7ba      	b.n	801a496 <_dtoa_r+0x196>
 801a520:	920d      	str	r2, [sp, #52]	@ 0x34
 801a522:	e7c3      	b.n	801a4ac <_dtoa_r+0x1ac>
 801a524:	9b06      	ldr	r3, [sp, #24]
 801a526:	9a04      	ldr	r2, [sp, #16]
 801a528:	1a9b      	subs	r3, r3, r2
 801a52a:	9306      	str	r3, [sp, #24]
 801a52c:	4253      	negs	r3, r2
 801a52e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a530:	2300      	movs	r3, #0
 801a532:	9314      	str	r3, [sp, #80]	@ 0x50
 801a534:	e7c5      	b.n	801a4c2 <_dtoa_r+0x1c2>
 801a536:	2301      	movs	r3, #1
 801a538:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a53a:	9310      	str	r3, [sp, #64]	@ 0x40
 801a53c:	4694      	mov	ip, r2
 801a53e:	9b04      	ldr	r3, [sp, #16]
 801a540:	4463      	add	r3, ip
 801a542:	930e      	str	r3, [sp, #56]	@ 0x38
 801a544:	3301      	adds	r3, #1
 801a546:	9309      	str	r3, [sp, #36]	@ 0x24
 801a548:	2b00      	cmp	r3, #0
 801a54a:	dc08      	bgt.n	801a55e <_dtoa_r+0x25e>
 801a54c:	2301      	movs	r3, #1
 801a54e:	e006      	b.n	801a55e <_dtoa_r+0x25e>
 801a550:	2301      	movs	r3, #1
 801a552:	9310      	str	r3, [sp, #64]	@ 0x40
 801a554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a556:	2b00      	cmp	r3, #0
 801a558:	dd28      	ble.n	801a5ac <_dtoa_r+0x2ac>
 801a55a:	930e      	str	r3, [sp, #56]	@ 0x38
 801a55c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a55e:	9a03      	ldr	r2, [sp, #12]
 801a560:	2100      	movs	r1, #0
 801a562:	69d0      	ldr	r0, [r2, #28]
 801a564:	2204      	movs	r2, #4
 801a566:	0015      	movs	r5, r2
 801a568:	3514      	adds	r5, #20
 801a56a:	429d      	cmp	r5, r3
 801a56c:	d923      	bls.n	801a5b6 <_dtoa_r+0x2b6>
 801a56e:	6041      	str	r1, [r0, #4]
 801a570:	9803      	ldr	r0, [sp, #12]
 801a572:	f000 fdbb 	bl	801b0ec <_Balloc>
 801a576:	9008      	str	r0, [sp, #32]
 801a578:	2800      	cmp	r0, #0
 801a57a:	d11f      	bne.n	801a5bc <_dtoa_r+0x2bc>
 801a57c:	21b0      	movs	r1, #176	@ 0xb0
 801a57e:	4b46      	ldr	r3, [pc, #280]	@ (801a698 <_dtoa_r+0x398>)
 801a580:	4831      	ldr	r0, [pc, #196]	@ (801a648 <_dtoa_r+0x348>)
 801a582:	9a08      	ldr	r2, [sp, #32]
 801a584:	31ff      	adds	r1, #255	@ 0xff
 801a586:	e6d0      	b.n	801a32a <_dtoa_r+0x2a>
 801a588:	2300      	movs	r3, #0
 801a58a:	e7e2      	b.n	801a552 <_dtoa_r+0x252>
 801a58c:	2300      	movs	r3, #0
 801a58e:	e7d3      	b.n	801a538 <_dtoa_r+0x238>
 801a590:	2300      	movs	r3, #0
 801a592:	9410      	str	r4, [sp, #64]	@ 0x40
 801a594:	9322      	str	r3, [sp, #136]	@ 0x88
 801a596:	3b01      	subs	r3, #1
 801a598:	2200      	movs	r2, #0
 801a59a:	930e      	str	r3, [sp, #56]	@ 0x38
 801a59c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a59e:	3313      	adds	r3, #19
 801a5a0:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a5a2:	e7dc      	b.n	801a55e <_dtoa_r+0x25e>
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a5a8:	3b02      	subs	r3, #2
 801a5aa:	e7f5      	b.n	801a598 <_dtoa_r+0x298>
 801a5ac:	2301      	movs	r3, #1
 801a5ae:	001a      	movs	r2, r3
 801a5b0:	930e      	str	r3, [sp, #56]	@ 0x38
 801a5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5b4:	e7f4      	b.n	801a5a0 <_dtoa_r+0x2a0>
 801a5b6:	3101      	adds	r1, #1
 801a5b8:	0052      	lsls	r2, r2, #1
 801a5ba:	e7d4      	b.n	801a566 <_dtoa_r+0x266>
 801a5bc:	9b03      	ldr	r3, [sp, #12]
 801a5be:	9a08      	ldr	r2, [sp, #32]
 801a5c0:	69db      	ldr	r3, [r3, #28]
 801a5c2:	601a      	str	r2, [r3, #0]
 801a5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5c6:	2b0e      	cmp	r3, #14
 801a5c8:	d900      	bls.n	801a5cc <_dtoa_r+0x2cc>
 801a5ca:	e0d6      	b.n	801a77a <_dtoa_r+0x47a>
 801a5cc:	2c00      	cmp	r4, #0
 801a5ce:	d100      	bne.n	801a5d2 <_dtoa_r+0x2d2>
 801a5d0:	e0d3      	b.n	801a77a <_dtoa_r+0x47a>
 801a5d2:	9b04      	ldr	r3, [sp, #16]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	dd63      	ble.n	801a6a0 <_dtoa_r+0x3a0>
 801a5d8:	210f      	movs	r1, #15
 801a5da:	9a04      	ldr	r2, [sp, #16]
 801a5dc:	4b2a      	ldr	r3, [pc, #168]	@ (801a688 <_dtoa_r+0x388>)
 801a5de:	400a      	ands	r2, r1
 801a5e0:	00d2      	lsls	r2, r2, #3
 801a5e2:	189b      	adds	r3, r3, r2
 801a5e4:	681e      	ldr	r6, [r3, #0]
 801a5e6:	685f      	ldr	r7, [r3, #4]
 801a5e8:	9b04      	ldr	r3, [sp, #16]
 801a5ea:	2402      	movs	r4, #2
 801a5ec:	111d      	asrs	r5, r3, #4
 801a5ee:	05db      	lsls	r3, r3, #23
 801a5f0:	d50a      	bpl.n	801a608 <_dtoa_r+0x308>
 801a5f2:	4b2a      	ldr	r3, [pc, #168]	@ (801a69c <_dtoa_r+0x39c>)
 801a5f4:	400d      	ands	r5, r1
 801a5f6:	6a1a      	ldr	r2, [r3, #32]
 801a5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a5fc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a5fe:	f7e7 fcf1 	bl	8001fe4 <__aeabi_ddiv>
 801a602:	900a      	str	r0, [sp, #40]	@ 0x28
 801a604:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a606:	3401      	adds	r4, #1
 801a608:	4b24      	ldr	r3, [pc, #144]	@ (801a69c <_dtoa_r+0x39c>)
 801a60a:	930c      	str	r3, [sp, #48]	@ 0x30
 801a60c:	2d00      	cmp	r5, #0
 801a60e:	d108      	bne.n	801a622 <_dtoa_r+0x322>
 801a610:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a612:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a614:	0032      	movs	r2, r6
 801a616:	003b      	movs	r3, r7
 801a618:	f7e7 fce4 	bl	8001fe4 <__aeabi_ddiv>
 801a61c:	900a      	str	r0, [sp, #40]	@ 0x28
 801a61e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a620:	e059      	b.n	801a6d6 <_dtoa_r+0x3d6>
 801a622:	2301      	movs	r3, #1
 801a624:	421d      	tst	r5, r3
 801a626:	d009      	beq.n	801a63c <_dtoa_r+0x33c>
 801a628:	18e4      	adds	r4, r4, r3
 801a62a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a62c:	0030      	movs	r0, r6
 801a62e:	681a      	ldr	r2, [r3, #0]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	0039      	movs	r1, r7
 801a634:	f7e8 f910 	bl	8002858 <__aeabi_dmul>
 801a638:	0006      	movs	r6, r0
 801a63a:	000f      	movs	r7, r1
 801a63c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a63e:	106d      	asrs	r5, r5, #1
 801a640:	3308      	adds	r3, #8
 801a642:	e7e2      	b.n	801a60a <_dtoa_r+0x30a>
 801a644:	0801fc57 	.word	0x0801fc57
 801a648:	0801fc6e 	.word	0x0801fc6e
 801a64c:	7ff00000 	.word	0x7ff00000
 801a650:	0000270f 	.word	0x0000270f
 801a654:	0801fc53 	.word	0x0801fc53
 801a658:	0801fc56 	.word	0x0801fc56
 801a65c:	0801f97e 	.word	0x0801f97e
 801a660:	0801f97d 	.word	0x0801f97d
 801a664:	3ff00000 	.word	0x3ff00000
 801a668:	fffffc01 	.word	0xfffffc01
 801a66c:	3ff80000 	.word	0x3ff80000
 801a670:	636f4361 	.word	0x636f4361
 801a674:	3fd287a7 	.word	0x3fd287a7
 801a678:	8b60c8b3 	.word	0x8b60c8b3
 801a67c:	3fc68a28 	.word	0x3fc68a28
 801a680:	509f79fb 	.word	0x509f79fb
 801a684:	3fd34413 	.word	0x3fd34413
 801a688:	0801ff40 	.word	0x0801ff40
 801a68c:	00000432 	.word	0x00000432
 801a690:	00000412 	.word	0x00000412
 801a694:	fe100000 	.word	0xfe100000
 801a698:	0801fcc6 	.word	0x0801fcc6
 801a69c:	0801ff18 	.word	0x0801ff18
 801a6a0:	9b04      	ldr	r3, [sp, #16]
 801a6a2:	2402      	movs	r4, #2
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d016      	beq.n	801a6d6 <_dtoa_r+0x3d6>
 801a6a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a6aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a6ac:	220f      	movs	r2, #15
 801a6ae:	425d      	negs	r5, r3
 801a6b0:	402a      	ands	r2, r5
 801a6b2:	4bd5      	ldr	r3, [pc, #852]	@ (801aa08 <_dtoa_r+0x708>)
 801a6b4:	00d2      	lsls	r2, r2, #3
 801a6b6:	189b      	adds	r3, r3, r2
 801a6b8:	681a      	ldr	r2, [r3, #0]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	f7e8 f8cc 	bl	8002858 <__aeabi_dmul>
 801a6c0:	2701      	movs	r7, #1
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801a6c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a6c8:	4ed0      	ldr	r6, [pc, #832]	@ (801aa0c <_dtoa_r+0x70c>)
 801a6ca:	112d      	asrs	r5, r5, #4
 801a6cc:	2d00      	cmp	r5, #0
 801a6ce:	d000      	beq.n	801a6d2 <_dtoa_r+0x3d2>
 801a6d0:	e095      	b.n	801a7fe <_dtoa_r+0x4fe>
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d1a2      	bne.n	801a61c <_dtoa_r+0x31c>
 801a6d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a6d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a6da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d100      	bne.n	801a6e2 <_dtoa_r+0x3e2>
 801a6e0:	e098      	b.n	801a814 <_dtoa_r+0x514>
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	0030      	movs	r0, r6
 801a6e6:	0039      	movs	r1, r7
 801a6e8:	4bc9      	ldr	r3, [pc, #804]	@ (801aa10 <_dtoa_r+0x710>)
 801a6ea:	f7e5 fec9 	bl	8000480 <__aeabi_dcmplt>
 801a6ee:	2800      	cmp	r0, #0
 801a6f0:	d100      	bne.n	801a6f4 <_dtoa_r+0x3f4>
 801a6f2:	e08f      	b.n	801a814 <_dtoa_r+0x514>
 801a6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d100      	bne.n	801a6fc <_dtoa_r+0x3fc>
 801a6fa:	e08b      	b.n	801a814 <_dtoa_r+0x514>
 801a6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	dd37      	ble.n	801a772 <_dtoa_r+0x472>
 801a702:	9b04      	ldr	r3, [sp, #16]
 801a704:	2200      	movs	r2, #0
 801a706:	3b01      	subs	r3, #1
 801a708:	930c      	str	r3, [sp, #48]	@ 0x30
 801a70a:	0030      	movs	r0, r6
 801a70c:	4bc1      	ldr	r3, [pc, #772]	@ (801aa14 <_dtoa_r+0x714>)
 801a70e:	0039      	movs	r1, r7
 801a710:	f7e8 f8a2 	bl	8002858 <__aeabi_dmul>
 801a714:	900a      	str	r0, [sp, #40]	@ 0x28
 801a716:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a71a:	3401      	adds	r4, #1
 801a71c:	0020      	movs	r0, r4
 801a71e:	9311      	str	r3, [sp, #68]	@ 0x44
 801a720:	f7e8 ffe8 	bl	80036f4 <__aeabi_i2d>
 801a724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a728:	f7e8 f896 	bl	8002858 <__aeabi_dmul>
 801a72c:	4bba      	ldr	r3, [pc, #744]	@ (801aa18 <_dtoa_r+0x718>)
 801a72e:	2200      	movs	r2, #0
 801a730:	f7e7 f892 	bl	8001858 <__aeabi_dadd>
 801a734:	4bb9      	ldr	r3, [pc, #740]	@ (801aa1c <_dtoa_r+0x71c>)
 801a736:	0006      	movs	r6, r0
 801a738:	18cf      	adds	r7, r1, r3
 801a73a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d16d      	bne.n	801a81c <_dtoa_r+0x51c>
 801a740:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a742:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a744:	2200      	movs	r2, #0
 801a746:	4bb6      	ldr	r3, [pc, #728]	@ (801aa20 <_dtoa_r+0x720>)
 801a748:	f7e8 fb6c 	bl	8002e24 <__aeabi_dsub>
 801a74c:	0032      	movs	r2, r6
 801a74e:	003b      	movs	r3, r7
 801a750:	0004      	movs	r4, r0
 801a752:	000d      	movs	r5, r1
 801a754:	f7e5 fea8 	bl	80004a8 <__aeabi_dcmpgt>
 801a758:	2800      	cmp	r0, #0
 801a75a:	d000      	beq.n	801a75e <_dtoa_r+0x45e>
 801a75c:	e2b6      	b.n	801accc <_dtoa_r+0x9cc>
 801a75e:	2180      	movs	r1, #128	@ 0x80
 801a760:	0609      	lsls	r1, r1, #24
 801a762:	187b      	adds	r3, r7, r1
 801a764:	0032      	movs	r2, r6
 801a766:	0020      	movs	r0, r4
 801a768:	0029      	movs	r1, r5
 801a76a:	f7e5 fe89 	bl	8000480 <__aeabi_dcmplt>
 801a76e:	2800      	cmp	r0, #0
 801a770:	d128      	bne.n	801a7c4 <_dtoa_r+0x4c4>
 801a772:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a774:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a776:	930a      	str	r3, [sp, #40]	@ 0x28
 801a778:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a77a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	da00      	bge.n	801a782 <_dtoa_r+0x482>
 801a780:	e174      	b.n	801aa6c <_dtoa_r+0x76c>
 801a782:	9a04      	ldr	r2, [sp, #16]
 801a784:	2a0e      	cmp	r2, #14
 801a786:	dd00      	ble.n	801a78a <_dtoa_r+0x48a>
 801a788:	e170      	b.n	801aa6c <_dtoa_r+0x76c>
 801a78a:	4b9f      	ldr	r3, [pc, #636]	@ (801aa08 <_dtoa_r+0x708>)
 801a78c:	00d2      	lsls	r2, r2, #3
 801a78e:	189b      	adds	r3, r3, r2
 801a790:	685c      	ldr	r4, [r3, #4]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	9306      	str	r3, [sp, #24]
 801a796:	9407      	str	r4, [sp, #28]
 801a798:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	db00      	blt.n	801a7a0 <_dtoa_r+0x4a0>
 801a79e:	e0e7      	b.n	801a970 <_dtoa_r+0x670>
 801a7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	dd00      	ble.n	801a7a8 <_dtoa_r+0x4a8>
 801a7a6:	e0e3      	b.n	801a970 <_dtoa_r+0x670>
 801a7a8:	d10c      	bne.n	801a7c4 <_dtoa_r+0x4c4>
 801a7aa:	9806      	ldr	r0, [sp, #24]
 801a7ac:	9907      	ldr	r1, [sp, #28]
 801a7ae:	2200      	movs	r2, #0
 801a7b0:	4b9b      	ldr	r3, [pc, #620]	@ (801aa20 <_dtoa_r+0x720>)
 801a7b2:	f7e8 f851 	bl	8002858 <__aeabi_dmul>
 801a7b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a7b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7ba:	f7e5 fe7f 	bl	80004bc <__aeabi_dcmpge>
 801a7be:	2800      	cmp	r0, #0
 801a7c0:	d100      	bne.n	801a7c4 <_dtoa_r+0x4c4>
 801a7c2:	e286      	b.n	801acd2 <_dtoa_r+0x9d2>
 801a7c4:	2600      	movs	r6, #0
 801a7c6:	0037      	movs	r7, r6
 801a7c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a7ca:	9c08      	ldr	r4, [sp, #32]
 801a7cc:	43db      	mvns	r3, r3
 801a7ce:	930c      	str	r3, [sp, #48]	@ 0x30
 801a7d0:	9704      	str	r7, [sp, #16]
 801a7d2:	2700      	movs	r7, #0
 801a7d4:	0031      	movs	r1, r6
 801a7d6:	9803      	ldr	r0, [sp, #12]
 801a7d8:	f000 fccc 	bl	801b174 <_Bfree>
 801a7dc:	9b04      	ldr	r3, [sp, #16]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d100      	bne.n	801a7e4 <_dtoa_r+0x4e4>
 801a7e2:	e0bb      	b.n	801a95c <_dtoa_r+0x65c>
 801a7e4:	2f00      	cmp	r7, #0
 801a7e6:	d005      	beq.n	801a7f4 <_dtoa_r+0x4f4>
 801a7e8:	429f      	cmp	r7, r3
 801a7ea:	d003      	beq.n	801a7f4 <_dtoa_r+0x4f4>
 801a7ec:	0039      	movs	r1, r7
 801a7ee:	9803      	ldr	r0, [sp, #12]
 801a7f0:	f000 fcc0 	bl	801b174 <_Bfree>
 801a7f4:	9904      	ldr	r1, [sp, #16]
 801a7f6:	9803      	ldr	r0, [sp, #12]
 801a7f8:	f000 fcbc 	bl	801b174 <_Bfree>
 801a7fc:	e0ae      	b.n	801a95c <_dtoa_r+0x65c>
 801a7fe:	423d      	tst	r5, r7
 801a800:	d005      	beq.n	801a80e <_dtoa_r+0x50e>
 801a802:	6832      	ldr	r2, [r6, #0]
 801a804:	6873      	ldr	r3, [r6, #4]
 801a806:	f7e8 f827 	bl	8002858 <__aeabi_dmul>
 801a80a:	003b      	movs	r3, r7
 801a80c:	3401      	adds	r4, #1
 801a80e:	106d      	asrs	r5, r5, #1
 801a810:	3608      	adds	r6, #8
 801a812:	e75b      	b.n	801a6cc <_dtoa_r+0x3cc>
 801a814:	9b04      	ldr	r3, [sp, #16]
 801a816:	930c      	str	r3, [sp, #48]	@ 0x30
 801a818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a81a:	e77f      	b.n	801a71c <_dtoa_r+0x41c>
 801a81c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a81e:	4b7a      	ldr	r3, [pc, #488]	@ (801aa08 <_dtoa_r+0x708>)
 801a820:	3a01      	subs	r2, #1
 801a822:	00d2      	lsls	r2, r2, #3
 801a824:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a826:	189b      	adds	r3, r3, r2
 801a828:	681a      	ldr	r2, [r3, #0]
 801a82a:	685b      	ldr	r3, [r3, #4]
 801a82c:	2900      	cmp	r1, #0
 801a82e:	d04c      	beq.n	801a8ca <_dtoa_r+0x5ca>
 801a830:	2000      	movs	r0, #0
 801a832:	497c      	ldr	r1, [pc, #496]	@ (801aa24 <_dtoa_r+0x724>)
 801a834:	f7e7 fbd6 	bl	8001fe4 <__aeabi_ddiv>
 801a838:	0032      	movs	r2, r6
 801a83a:	003b      	movs	r3, r7
 801a83c:	f7e8 faf2 	bl	8002e24 <__aeabi_dsub>
 801a840:	9a08      	ldr	r2, [sp, #32]
 801a842:	0006      	movs	r6, r0
 801a844:	4694      	mov	ip, r2
 801a846:	000f      	movs	r7, r1
 801a848:	9b08      	ldr	r3, [sp, #32]
 801a84a:	9316      	str	r3, [sp, #88]	@ 0x58
 801a84c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a84e:	4463      	add	r3, ip
 801a850:	9311      	str	r3, [sp, #68]	@ 0x44
 801a852:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a854:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a856:	f7e8 ff11 	bl	800367c <__aeabi_d2iz>
 801a85a:	0005      	movs	r5, r0
 801a85c:	f7e8 ff4a 	bl	80036f4 <__aeabi_i2d>
 801a860:	0002      	movs	r2, r0
 801a862:	000b      	movs	r3, r1
 801a864:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a866:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a868:	f7e8 fadc 	bl	8002e24 <__aeabi_dsub>
 801a86c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a86e:	3530      	adds	r5, #48	@ 0x30
 801a870:	1c5c      	adds	r4, r3, #1
 801a872:	701d      	strb	r5, [r3, #0]
 801a874:	0032      	movs	r2, r6
 801a876:	003b      	movs	r3, r7
 801a878:	900a      	str	r0, [sp, #40]	@ 0x28
 801a87a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a87c:	f7e5 fe00 	bl	8000480 <__aeabi_dcmplt>
 801a880:	2800      	cmp	r0, #0
 801a882:	d16b      	bne.n	801a95c <_dtoa_r+0x65c>
 801a884:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a888:	2000      	movs	r0, #0
 801a88a:	4961      	ldr	r1, [pc, #388]	@ (801aa10 <_dtoa_r+0x710>)
 801a88c:	f7e8 faca 	bl	8002e24 <__aeabi_dsub>
 801a890:	0032      	movs	r2, r6
 801a892:	003b      	movs	r3, r7
 801a894:	f7e5 fdf4 	bl	8000480 <__aeabi_dcmplt>
 801a898:	2800      	cmp	r0, #0
 801a89a:	d000      	beq.n	801a89e <_dtoa_r+0x59e>
 801a89c:	e0c6      	b.n	801aa2c <_dtoa_r+0x72c>
 801a89e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a8a0:	42a3      	cmp	r3, r4
 801a8a2:	d100      	bne.n	801a8a6 <_dtoa_r+0x5a6>
 801a8a4:	e765      	b.n	801a772 <_dtoa_r+0x472>
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	0030      	movs	r0, r6
 801a8aa:	0039      	movs	r1, r7
 801a8ac:	4b59      	ldr	r3, [pc, #356]	@ (801aa14 <_dtoa_r+0x714>)
 801a8ae:	f7e7 ffd3 	bl	8002858 <__aeabi_dmul>
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	0006      	movs	r6, r0
 801a8b6:	000f      	movs	r7, r1
 801a8b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a8ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a8bc:	4b55      	ldr	r3, [pc, #340]	@ (801aa14 <_dtoa_r+0x714>)
 801a8be:	f7e7 ffcb 	bl	8002858 <__aeabi_dmul>
 801a8c2:	9416      	str	r4, [sp, #88]	@ 0x58
 801a8c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801a8c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a8c8:	e7c3      	b.n	801a852 <_dtoa_r+0x552>
 801a8ca:	0030      	movs	r0, r6
 801a8cc:	0039      	movs	r1, r7
 801a8ce:	f7e7 ffc3 	bl	8002858 <__aeabi_dmul>
 801a8d2:	9d08      	ldr	r5, [sp, #32]
 801a8d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a8d6:	002b      	movs	r3, r5
 801a8d8:	4694      	mov	ip, r2
 801a8da:	9016      	str	r0, [sp, #88]	@ 0x58
 801a8dc:	9117      	str	r1, [sp, #92]	@ 0x5c
 801a8de:	4463      	add	r3, ip
 801a8e0:	9319      	str	r3, [sp, #100]	@ 0x64
 801a8e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a8e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a8e6:	f7e8 fec9 	bl	800367c <__aeabi_d2iz>
 801a8ea:	0004      	movs	r4, r0
 801a8ec:	f7e8 ff02 	bl	80036f4 <__aeabi_i2d>
 801a8f0:	000b      	movs	r3, r1
 801a8f2:	0002      	movs	r2, r0
 801a8f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a8f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a8f8:	f7e8 fa94 	bl	8002e24 <__aeabi_dsub>
 801a8fc:	3430      	adds	r4, #48	@ 0x30
 801a8fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a900:	702c      	strb	r4, [r5, #0]
 801a902:	3501      	adds	r5, #1
 801a904:	0006      	movs	r6, r0
 801a906:	000f      	movs	r7, r1
 801a908:	42ab      	cmp	r3, r5
 801a90a:	d12a      	bne.n	801a962 <_dtoa_r+0x662>
 801a90c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801a90e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a910:	9b08      	ldr	r3, [sp, #32]
 801a912:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801a914:	469c      	mov	ip, r3
 801a916:	2200      	movs	r2, #0
 801a918:	4b42      	ldr	r3, [pc, #264]	@ (801aa24 <_dtoa_r+0x724>)
 801a91a:	4464      	add	r4, ip
 801a91c:	f7e6 ff9c 	bl	8001858 <__aeabi_dadd>
 801a920:	0002      	movs	r2, r0
 801a922:	000b      	movs	r3, r1
 801a924:	0030      	movs	r0, r6
 801a926:	0039      	movs	r1, r7
 801a928:	f7e5 fdbe 	bl	80004a8 <__aeabi_dcmpgt>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	d000      	beq.n	801a932 <_dtoa_r+0x632>
 801a930:	e07c      	b.n	801aa2c <_dtoa_r+0x72c>
 801a932:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a934:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a936:	2000      	movs	r0, #0
 801a938:	493a      	ldr	r1, [pc, #232]	@ (801aa24 <_dtoa_r+0x724>)
 801a93a:	f7e8 fa73 	bl	8002e24 <__aeabi_dsub>
 801a93e:	0002      	movs	r2, r0
 801a940:	000b      	movs	r3, r1
 801a942:	0030      	movs	r0, r6
 801a944:	0039      	movs	r1, r7
 801a946:	f7e5 fd9b 	bl	8000480 <__aeabi_dcmplt>
 801a94a:	2800      	cmp	r0, #0
 801a94c:	d100      	bne.n	801a950 <_dtoa_r+0x650>
 801a94e:	e710      	b.n	801a772 <_dtoa_r+0x472>
 801a950:	0023      	movs	r3, r4
 801a952:	3c01      	subs	r4, #1
 801a954:	7822      	ldrb	r2, [r4, #0]
 801a956:	2a30      	cmp	r2, #48	@ 0x30
 801a958:	d0fa      	beq.n	801a950 <_dtoa_r+0x650>
 801a95a:	001c      	movs	r4, r3
 801a95c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a95e:	9304      	str	r3, [sp, #16]
 801a960:	e042      	b.n	801a9e8 <_dtoa_r+0x6e8>
 801a962:	2200      	movs	r2, #0
 801a964:	4b2b      	ldr	r3, [pc, #172]	@ (801aa14 <_dtoa_r+0x714>)
 801a966:	f7e7 ff77 	bl	8002858 <__aeabi_dmul>
 801a96a:	900a      	str	r0, [sp, #40]	@ 0x28
 801a96c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a96e:	e7b8      	b.n	801a8e2 <_dtoa_r+0x5e2>
 801a970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a972:	9d08      	ldr	r5, [sp, #32]
 801a974:	3b01      	subs	r3, #1
 801a976:	195b      	adds	r3, r3, r5
 801a978:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a97a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a97c:	930a      	str	r3, [sp, #40]	@ 0x28
 801a97e:	9a06      	ldr	r2, [sp, #24]
 801a980:	9b07      	ldr	r3, [sp, #28]
 801a982:	0030      	movs	r0, r6
 801a984:	0039      	movs	r1, r7
 801a986:	f7e7 fb2d 	bl	8001fe4 <__aeabi_ddiv>
 801a98a:	f7e8 fe77 	bl	800367c <__aeabi_d2iz>
 801a98e:	9009      	str	r0, [sp, #36]	@ 0x24
 801a990:	f7e8 feb0 	bl	80036f4 <__aeabi_i2d>
 801a994:	9a06      	ldr	r2, [sp, #24]
 801a996:	9b07      	ldr	r3, [sp, #28]
 801a998:	f7e7 ff5e 	bl	8002858 <__aeabi_dmul>
 801a99c:	0002      	movs	r2, r0
 801a99e:	000b      	movs	r3, r1
 801a9a0:	0030      	movs	r0, r6
 801a9a2:	0039      	movs	r1, r7
 801a9a4:	f7e8 fa3e 	bl	8002e24 <__aeabi_dsub>
 801a9a8:	002b      	movs	r3, r5
 801a9aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a9ac:	3501      	adds	r5, #1
 801a9ae:	3230      	adds	r2, #48	@ 0x30
 801a9b0:	701a      	strb	r2, [r3, #0]
 801a9b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a9b4:	002c      	movs	r4, r5
 801a9b6:	429a      	cmp	r2, r3
 801a9b8:	d14b      	bne.n	801aa52 <_dtoa_r+0x752>
 801a9ba:	0002      	movs	r2, r0
 801a9bc:	000b      	movs	r3, r1
 801a9be:	f7e6 ff4b 	bl	8001858 <__aeabi_dadd>
 801a9c2:	9a06      	ldr	r2, [sp, #24]
 801a9c4:	9b07      	ldr	r3, [sp, #28]
 801a9c6:	0006      	movs	r6, r0
 801a9c8:	000f      	movs	r7, r1
 801a9ca:	f7e5 fd6d 	bl	80004a8 <__aeabi_dcmpgt>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d12a      	bne.n	801aa28 <_dtoa_r+0x728>
 801a9d2:	9a06      	ldr	r2, [sp, #24]
 801a9d4:	9b07      	ldr	r3, [sp, #28]
 801a9d6:	0030      	movs	r0, r6
 801a9d8:	0039      	movs	r1, r7
 801a9da:	f7e5 fd4b 	bl	8000474 <__aeabi_dcmpeq>
 801a9de:	2800      	cmp	r0, #0
 801a9e0:	d002      	beq.n	801a9e8 <_dtoa_r+0x6e8>
 801a9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9e4:	07dd      	lsls	r5, r3, #31
 801a9e6:	d41f      	bmi.n	801aa28 <_dtoa_r+0x728>
 801a9e8:	9905      	ldr	r1, [sp, #20]
 801a9ea:	9803      	ldr	r0, [sp, #12]
 801a9ec:	f000 fbc2 	bl	801b174 <_Bfree>
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	7023      	strb	r3, [r4, #0]
 801a9f4:	9b04      	ldr	r3, [sp, #16]
 801a9f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a9f8:	3301      	adds	r3, #1
 801a9fa:	6013      	str	r3, [r2, #0]
 801a9fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d100      	bne.n	801aa04 <_dtoa_r+0x704>
 801aa02:	e4c7      	b.n	801a394 <_dtoa_r+0x94>
 801aa04:	601c      	str	r4, [r3, #0]
 801aa06:	e4c5      	b.n	801a394 <_dtoa_r+0x94>
 801aa08:	0801ff40 	.word	0x0801ff40
 801aa0c:	0801ff18 	.word	0x0801ff18
 801aa10:	3ff00000 	.word	0x3ff00000
 801aa14:	40240000 	.word	0x40240000
 801aa18:	401c0000 	.word	0x401c0000
 801aa1c:	fcc00000 	.word	0xfcc00000
 801aa20:	40140000 	.word	0x40140000
 801aa24:	3fe00000 	.word	0x3fe00000
 801aa28:	9b04      	ldr	r3, [sp, #16]
 801aa2a:	930c      	str	r3, [sp, #48]	@ 0x30
 801aa2c:	0023      	movs	r3, r4
 801aa2e:	001c      	movs	r4, r3
 801aa30:	3b01      	subs	r3, #1
 801aa32:	781a      	ldrb	r2, [r3, #0]
 801aa34:	2a39      	cmp	r2, #57	@ 0x39
 801aa36:	d108      	bne.n	801aa4a <_dtoa_r+0x74a>
 801aa38:	9a08      	ldr	r2, [sp, #32]
 801aa3a:	429a      	cmp	r2, r3
 801aa3c:	d1f7      	bne.n	801aa2e <_dtoa_r+0x72e>
 801aa3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa40:	9908      	ldr	r1, [sp, #32]
 801aa42:	3201      	adds	r2, #1
 801aa44:	920c      	str	r2, [sp, #48]	@ 0x30
 801aa46:	2230      	movs	r2, #48	@ 0x30
 801aa48:	700a      	strb	r2, [r1, #0]
 801aa4a:	781a      	ldrb	r2, [r3, #0]
 801aa4c:	3201      	adds	r2, #1
 801aa4e:	701a      	strb	r2, [r3, #0]
 801aa50:	e784      	b.n	801a95c <_dtoa_r+0x65c>
 801aa52:	2200      	movs	r2, #0
 801aa54:	4bc6      	ldr	r3, [pc, #792]	@ (801ad70 <_dtoa_r+0xa70>)
 801aa56:	f7e7 feff 	bl	8002858 <__aeabi_dmul>
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	0006      	movs	r6, r0
 801aa60:	000f      	movs	r7, r1
 801aa62:	f7e5 fd07 	bl	8000474 <__aeabi_dcmpeq>
 801aa66:	2800      	cmp	r0, #0
 801aa68:	d089      	beq.n	801a97e <_dtoa_r+0x67e>
 801aa6a:	e7bd      	b.n	801a9e8 <_dtoa_r+0x6e8>
 801aa6c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801aa6e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801aa70:	9c06      	ldr	r4, [sp, #24]
 801aa72:	2f00      	cmp	r7, #0
 801aa74:	d014      	beq.n	801aaa0 <_dtoa_r+0x7a0>
 801aa76:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801aa78:	2a01      	cmp	r2, #1
 801aa7a:	dd00      	ble.n	801aa7e <_dtoa_r+0x77e>
 801aa7c:	e0e4      	b.n	801ac48 <_dtoa_r+0x948>
 801aa7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801aa80:	2a00      	cmp	r2, #0
 801aa82:	d100      	bne.n	801aa86 <_dtoa_r+0x786>
 801aa84:	e0da      	b.n	801ac3c <_dtoa_r+0x93c>
 801aa86:	4abb      	ldr	r2, [pc, #748]	@ (801ad74 <_dtoa_r+0xa74>)
 801aa88:	189b      	adds	r3, r3, r2
 801aa8a:	9a06      	ldr	r2, [sp, #24]
 801aa8c:	2101      	movs	r1, #1
 801aa8e:	18d2      	adds	r2, r2, r3
 801aa90:	9206      	str	r2, [sp, #24]
 801aa92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aa94:	9803      	ldr	r0, [sp, #12]
 801aa96:	18d3      	adds	r3, r2, r3
 801aa98:	930d      	str	r3, [sp, #52]	@ 0x34
 801aa9a:	f000 fc23 	bl	801b2e4 <__i2b>
 801aa9e:	0007      	movs	r7, r0
 801aaa0:	2c00      	cmp	r4, #0
 801aaa2:	d00e      	beq.n	801aac2 <_dtoa_r+0x7c2>
 801aaa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	dd0b      	ble.n	801aac2 <_dtoa_r+0x7c2>
 801aaaa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aaac:	0023      	movs	r3, r4
 801aaae:	4294      	cmp	r4, r2
 801aab0:	dd00      	ble.n	801aab4 <_dtoa_r+0x7b4>
 801aab2:	0013      	movs	r3, r2
 801aab4:	9a06      	ldr	r2, [sp, #24]
 801aab6:	1ae4      	subs	r4, r4, r3
 801aab8:	1ad2      	subs	r2, r2, r3
 801aaba:	9206      	str	r2, [sp, #24]
 801aabc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	930d      	str	r3, [sp, #52]	@ 0x34
 801aac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d021      	beq.n	801ab0c <_dtoa_r+0x80c>
 801aac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d100      	bne.n	801aad0 <_dtoa_r+0x7d0>
 801aace:	e0d3      	b.n	801ac78 <_dtoa_r+0x978>
 801aad0:	9e05      	ldr	r6, [sp, #20]
 801aad2:	2d00      	cmp	r5, #0
 801aad4:	d014      	beq.n	801ab00 <_dtoa_r+0x800>
 801aad6:	0039      	movs	r1, r7
 801aad8:	002a      	movs	r2, r5
 801aada:	9803      	ldr	r0, [sp, #12]
 801aadc:	f000 fcc4 	bl	801b468 <__pow5mult>
 801aae0:	9a05      	ldr	r2, [sp, #20]
 801aae2:	0001      	movs	r1, r0
 801aae4:	0007      	movs	r7, r0
 801aae6:	9803      	ldr	r0, [sp, #12]
 801aae8:	f000 fc14 	bl	801b314 <__multiply>
 801aaec:	0006      	movs	r6, r0
 801aaee:	9905      	ldr	r1, [sp, #20]
 801aaf0:	9803      	ldr	r0, [sp, #12]
 801aaf2:	f000 fb3f 	bl	801b174 <_Bfree>
 801aaf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aaf8:	9605      	str	r6, [sp, #20]
 801aafa:	1b5b      	subs	r3, r3, r5
 801aafc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aafe:	d005      	beq.n	801ab0c <_dtoa_r+0x80c>
 801ab00:	0031      	movs	r1, r6
 801ab02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ab04:	9803      	ldr	r0, [sp, #12]
 801ab06:	f000 fcaf 	bl	801b468 <__pow5mult>
 801ab0a:	9005      	str	r0, [sp, #20]
 801ab0c:	2101      	movs	r1, #1
 801ab0e:	9803      	ldr	r0, [sp, #12]
 801ab10:	f000 fbe8 	bl	801b2e4 <__i2b>
 801ab14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ab16:	0006      	movs	r6, r0
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d100      	bne.n	801ab1e <_dtoa_r+0x81e>
 801ab1c:	e1bc      	b.n	801ae98 <_dtoa_r+0xb98>
 801ab1e:	001a      	movs	r2, r3
 801ab20:	0001      	movs	r1, r0
 801ab22:	9803      	ldr	r0, [sp, #12]
 801ab24:	f000 fca0 	bl	801b468 <__pow5mult>
 801ab28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ab2a:	0006      	movs	r6, r0
 801ab2c:	2500      	movs	r5, #0
 801ab2e:	2b01      	cmp	r3, #1
 801ab30:	dc16      	bgt.n	801ab60 <_dtoa_r+0x860>
 801ab32:	2500      	movs	r5, #0
 801ab34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ab36:	42ab      	cmp	r3, r5
 801ab38:	d10e      	bne.n	801ab58 <_dtoa_r+0x858>
 801ab3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab3c:	031b      	lsls	r3, r3, #12
 801ab3e:	42ab      	cmp	r3, r5
 801ab40:	d10a      	bne.n	801ab58 <_dtoa_r+0x858>
 801ab42:	4b8d      	ldr	r3, [pc, #564]	@ (801ad78 <_dtoa_r+0xa78>)
 801ab44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ab46:	4213      	tst	r3, r2
 801ab48:	d006      	beq.n	801ab58 <_dtoa_r+0x858>
 801ab4a:	9b06      	ldr	r3, [sp, #24]
 801ab4c:	3501      	adds	r5, #1
 801ab4e:	3301      	adds	r3, #1
 801ab50:	9306      	str	r3, [sp, #24]
 801ab52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ab54:	3301      	adds	r3, #1
 801ab56:	930d      	str	r3, [sp, #52]	@ 0x34
 801ab58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ab5a:	2001      	movs	r0, #1
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d008      	beq.n	801ab72 <_dtoa_r+0x872>
 801ab60:	6933      	ldr	r3, [r6, #16]
 801ab62:	3303      	adds	r3, #3
 801ab64:	009b      	lsls	r3, r3, #2
 801ab66:	18f3      	adds	r3, r6, r3
 801ab68:	6858      	ldr	r0, [r3, #4]
 801ab6a:	f000 fb6b 	bl	801b244 <__hi0bits>
 801ab6e:	2320      	movs	r3, #32
 801ab70:	1a18      	subs	r0, r3, r0
 801ab72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ab74:	1818      	adds	r0, r3, r0
 801ab76:	0002      	movs	r2, r0
 801ab78:	231f      	movs	r3, #31
 801ab7a:	401a      	ands	r2, r3
 801ab7c:	4218      	tst	r0, r3
 801ab7e:	d100      	bne.n	801ab82 <_dtoa_r+0x882>
 801ab80:	e081      	b.n	801ac86 <_dtoa_r+0x986>
 801ab82:	3301      	adds	r3, #1
 801ab84:	1a9b      	subs	r3, r3, r2
 801ab86:	2b04      	cmp	r3, #4
 801ab88:	dd79      	ble.n	801ac7e <_dtoa_r+0x97e>
 801ab8a:	231c      	movs	r3, #28
 801ab8c:	1a9b      	subs	r3, r3, r2
 801ab8e:	9a06      	ldr	r2, [sp, #24]
 801ab90:	18e4      	adds	r4, r4, r3
 801ab92:	18d2      	adds	r2, r2, r3
 801ab94:	9206      	str	r2, [sp, #24]
 801ab96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ab98:	18d3      	adds	r3, r2, r3
 801ab9a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ab9c:	9b06      	ldr	r3, [sp, #24]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	dd05      	ble.n	801abae <_dtoa_r+0x8ae>
 801aba2:	001a      	movs	r2, r3
 801aba4:	9905      	ldr	r1, [sp, #20]
 801aba6:	9803      	ldr	r0, [sp, #12]
 801aba8:	f000 fcba 	bl	801b520 <__lshift>
 801abac:	9005      	str	r0, [sp, #20]
 801abae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	dd05      	ble.n	801abc0 <_dtoa_r+0x8c0>
 801abb4:	0031      	movs	r1, r6
 801abb6:	001a      	movs	r2, r3
 801abb8:	9803      	ldr	r0, [sp, #12]
 801abba:	f000 fcb1 	bl	801b520 <__lshift>
 801abbe:	0006      	movs	r6, r0
 801abc0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d061      	beq.n	801ac8a <_dtoa_r+0x98a>
 801abc6:	0031      	movs	r1, r6
 801abc8:	9805      	ldr	r0, [sp, #20]
 801abca:	f000 fd15 	bl	801b5f8 <__mcmp>
 801abce:	2800      	cmp	r0, #0
 801abd0:	da5b      	bge.n	801ac8a <_dtoa_r+0x98a>
 801abd2:	9b04      	ldr	r3, [sp, #16]
 801abd4:	220a      	movs	r2, #10
 801abd6:	3b01      	subs	r3, #1
 801abd8:	930c      	str	r3, [sp, #48]	@ 0x30
 801abda:	9905      	ldr	r1, [sp, #20]
 801abdc:	2300      	movs	r3, #0
 801abde:	9803      	ldr	r0, [sp, #12]
 801abe0:	f000 faec 	bl	801b1bc <__multadd>
 801abe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801abe6:	9005      	str	r0, [sp, #20]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d100      	bne.n	801abee <_dtoa_r+0x8ee>
 801abec:	e15b      	b.n	801aea6 <_dtoa_r+0xba6>
 801abee:	2300      	movs	r3, #0
 801abf0:	0039      	movs	r1, r7
 801abf2:	220a      	movs	r2, #10
 801abf4:	9803      	ldr	r0, [sp, #12]
 801abf6:	f000 fae1 	bl	801b1bc <__multadd>
 801abfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abfc:	0007      	movs	r7, r0
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	dc4d      	bgt.n	801ac9e <_dtoa_r+0x99e>
 801ac02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ac04:	2b02      	cmp	r3, #2
 801ac06:	dd46      	ble.n	801ac96 <_dtoa_r+0x996>
 801ac08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d000      	beq.n	801ac10 <_dtoa_r+0x910>
 801ac0e:	e5db      	b.n	801a7c8 <_dtoa_r+0x4c8>
 801ac10:	0031      	movs	r1, r6
 801ac12:	2205      	movs	r2, #5
 801ac14:	9803      	ldr	r0, [sp, #12]
 801ac16:	f000 fad1 	bl	801b1bc <__multadd>
 801ac1a:	0006      	movs	r6, r0
 801ac1c:	0001      	movs	r1, r0
 801ac1e:	9805      	ldr	r0, [sp, #20]
 801ac20:	f000 fcea 	bl	801b5f8 <__mcmp>
 801ac24:	2800      	cmp	r0, #0
 801ac26:	dc00      	bgt.n	801ac2a <_dtoa_r+0x92a>
 801ac28:	e5ce      	b.n	801a7c8 <_dtoa_r+0x4c8>
 801ac2a:	9b08      	ldr	r3, [sp, #32]
 801ac2c:	9a08      	ldr	r2, [sp, #32]
 801ac2e:	1c5c      	adds	r4, r3, #1
 801ac30:	2331      	movs	r3, #49	@ 0x31
 801ac32:	7013      	strb	r3, [r2, #0]
 801ac34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac36:	3301      	adds	r3, #1
 801ac38:	930c      	str	r3, [sp, #48]	@ 0x30
 801ac3a:	e5c9      	b.n	801a7d0 <_dtoa_r+0x4d0>
 801ac3c:	2336      	movs	r3, #54	@ 0x36
 801ac3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ac40:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ac42:	1a9b      	subs	r3, r3, r2
 801ac44:	9c06      	ldr	r4, [sp, #24]
 801ac46:	e720      	b.n	801aa8a <_dtoa_r+0x78a>
 801ac48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac4a:	1e5d      	subs	r5, r3, #1
 801ac4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac4e:	42ab      	cmp	r3, r5
 801ac50:	db08      	blt.n	801ac64 <_dtoa_r+0x964>
 801ac52:	1b5d      	subs	r5, r3, r5
 801ac54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	daf4      	bge.n	801ac44 <_dtoa_r+0x944>
 801ac5a:	9b06      	ldr	r3, [sp, #24]
 801ac5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac5e:	1a9c      	subs	r4, r3, r2
 801ac60:	2300      	movs	r3, #0
 801ac62:	e712      	b.n	801aa8a <_dtoa_r+0x78a>
 801ac64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ac68:	1aeb      	subs	r3, r5, r3
 801ac6a:	18d3      	adds	r3, r2, r3
 801ac6c:	9314      	str	r3, [sp, #80]	@ 0x50
 801ac6e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801ac70:	9c06      	ldr	r4, [sp, #24]
 801ac72:	2500      	movs	r5, #0
 801ac74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac76:	e708      	b.n	801aa8a <_dtoa_r+0x78a>
 801ac78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ac7a:	9905      	ldr	r1, [sp, #20]
 801ac7c:	e742      	b.n	801ab04 <_dtoa_r+0x804>
 801ac7e:	2b04      	cmp	r3, #4
 801ac80:	d08c      	beq.n	801ab9c <_dtoa_r+0x89c>
 801ac82:	331c      	adds	r3, #28
 801ac84:	e783      	b.n	801ab8e <_dtoa_r+0x88e>
 801ac86:	0013      	movs	r3, r2
 801ac88:	e7fb      	b.n	801ac82 <_dtoa_r+0x982>
 801ac8a:	9b04      	ldr	r3, [sp, #16]
 801ac8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ac8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac90:	930e      	str	r3, [sp, #56]	@ 0x38
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	ddb5      	ble.n	801ac02 <_dtoa_r+0x902>
 801ac96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d100      	bne.n	801ac9e <_dtoa_r+0x99e>
 801ac9c:	e107      	b.n	801aeae <_dtoa_r+0xbae>
 801ac9e:	2c00      	cmp	r4, #0
 801aca0:	dd05      	ble.n	801acae <_dtoa_r+0x9ae>
 801aca2:	0039      	movs	r1, r7
 801aca4:	0022      	movs	r2, r4
 801aca6:	9803      	ldr	r0, [sp, #12]
 801aca8:	f000 fc3a 	bl	801b520 <__lshift>
 801acac:	0007      	movs	r7, r0
 801acae:	9704      	str	r7, [sp, #16]
 801acb0:	2d00      	cmp	r5, #0
 801acb2:	d020      	beq.n	801acf6 <_dtoa_r+0x9f6>
 801acb4:	6879      	ldr	r1, [r7, #4]
 801acb6:	9803      	ldr	r0, [sp, #12]
 801acb8:	f000 fa18 	bl	801b0ec <_Balloc>
 801acbc:	1e04      	subs	r4, r0, #0
 801acbe:	d10c      	bne.n	801acda <_dtoa_r+0x9da>
 801acc0:	0022      	movs	r2, r4
 801acc2:	4b2e      	ldr	r3, [pc, #184]	@ (801ad7c <_dtoa_r+0xa7c>)
 801acc4:	482e      	ldr	r0, [pc, #184]	@ (801ad80 <_dtoa_r+0xa80>)
 801acc6:	492f      	ldr	r1, [pc, #188]	@ (801ad84 <_dtoa_r+0xa84>)
 801acc8:	f7ff fb2f 	bl	801a32a <_dtoa_r+0x2a>
 801accc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801acce:	0037      	movs	r7, r6
 801acd0:	e7ab      	b.n	801ac2a <_dtoa_r+0x92a>
 801acd2:	9b04      	ldr	r3, [sp, #16]
 801acd4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801acd6:	930c      	str	r3, [sp, #48]	@ 0x30
 801acd8:	e7f9      	b.n	801acce <_dtoa_r+0x9ce>
 801acda:	0039      	movs	r1, r7
 801acdc:	693a      	ldr	r2, [r7, #16]
 801acde:	310c      	adds	r1, #12
 801ace0:	3202      	adds	r2, #2
 801ace2:	0092      	lsls	r2, r2, #2
 801ace4:	300c      	adds	r0, #12
 801ace6:	f7ff fa7d 	bl	801a1e4 <memcpy>
 801acea:	2201      	movs	r2, #1
 801acec:	0021      	movs	r1, r4
 801acee:	9803      	ldr	r0, [sp, #12]
 801acf0:	f000 fc16 	bl	801b520 <__lshift>
 801acf4:	9004      	str	r0, [sp, #16]
 801acf6:	9b08      	ldr	r3, [sp, #32]
 801acf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801acfa:	9306      	str	r3, [sp, #24]
 801acfc:	3b01      	subs	r3, #1
 801acfe:	189b      	adds	r3, r3, r2
 801ad00:	2201      	movs	r2, #1
 801ad02:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ad04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad06:	4013      	ands	r3, r2
 801ad08:	930e      	str	r3, [sp, #56]	@ 0x38
 801ad0a:	0031      	movs	r1, r6
 801ad0c:	9805      	ldr	r0, [sp, #20]
 801ad0e:	f7ff fa72 	bl	801a1f6 <quorem>
 801ad12:	0039      	movs	r1, r7
 801ad14:	0005      	movs	r5, r0
 801ad16:	900a      	str	r0, [sp, #40]	@ 0x28
 801ad18:	9805      	ldr	r0, [sp, #20]
 801ad1a:	f000 fc6d 	bl	801b5f8 <__mcmp>
 801ad1e:	9a04      	ldr	r2, [sp, #16]
 801ad20:	900d      	str	r0, [sp, #52]	@ 0x34
 801ad22:	0031      	movs	r1, r6
 801ad24:	9803      	ldr	r0, [sp, #12]
 801ad26:	f000 fc83 	bl	801b630 <__mdiff>
 801ad2a:	2201      	movs	r2, #1
 801ad2c:	68c3      	ldr	r3, [r0, #12]
 801ad2e:	0004      	movs	r4, r0
 801ad30:	3530      	adds	r5, #48	@ 0x30
 801ad32:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d104      	bne.n	801ad42 <_dtoa_r+0xa42>
 801ad38:	0001      	movs	r1, r0
 801ad3a:	9805      	ldr	r0, [sp, #20]
 801ad3c:	f000 fc5c 	bl	801b5f8 <__mcmp>
 801ad40:	9009      	str	r0, [sp, #36]	@ 0x24
 801ad42:	0021      	movs	r1, r4
 801ad44:	9803      	ldr	r0, [sp, #12]
 801ad46:	f000 fa15 	bl	801b174 <_Bfree>
 801ad4a:	9b06      	ldr	r3, [sp, #24]
 801ad4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ad4e:	1c5c      	adds	r4, r3, #1
 801ad50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad52:	4313      	orrs	r3, r2
 801ad54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ad56:	4313      	orrs	r3, r2
 801ad58:	d116      	bne.n	801ad88 <_dtoa_r+0xa88>
 801ad5a:	2d39      	cmp	r5, #57	@ 0x39
 801ad5c:	d02f      	beq.n	801adbe <_dtoa_r+0xabe>
 801ad5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	dd01      	ble.n	801ad68 <_dtoa_r+0xa68>
 801ad64:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ad66:	3531      	adds	r5, #49	@ 0x31
 801ad68:	9b06      	ldr	r3, [sp, #24]
 801ad6a:	701d      	strb	r5, [r3, #0]
 801ad6c:	e532      	b.n	801a7d4 <_dtoa_r+0x4d4>
 801ad6e:	46c0      	nop			@ (mov r8, r8)
 801ad70:	40240000 	.word	0x40240000
 801ad74:	00000433 	.word	0x00000433
 801ad78:	7ff00000 	.word	0x7ff00000
 801ad7c:	0801fcc6 	.word	0x0801fcc6
 801ad80:	0801fc6e 	.word	0x0801fc6e
 801ad84:	000002ef 	.word	0x000002ef
 801ad88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	db04      	blt.n	801ad98 <_dtoa_r+0xa98>
 801ad8e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ad90:	4313      	orrs	r3, r2
 801ad92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ad94:	4313      	orrs	r3, r2
 801ad96:	d11e      	bne.n	801add6 <_dtoa_r+0xad6>
 801ad98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	dde4      	ble.n	801ad68 <_dtoa_r+0xa68>
 801ad9e:	9905      	ldr	r1, [sp, #20]
 801ada0:	2201      	movs	r2, #1
 801ada2:	9803      	ldr	r0, [sp, #12]
 801ada4:	f000 fbbc 	bl	801b520 <__lshift>
 801ada8:	0031      	movs	r1, r6
 801adaa:	9005      	str	r0, [sp, #20]
 801adac:	f000 fc24 	bl	801b5f8 <__mcmp>
 801adb0:	2800      	cmp	r0, #0
 801adb2:	dc02      	bgt.n	801adba <_dtoa_r+0xaba>
 801adb4:	d1d8      	bne.n	801ad68 <_dtoa_r+0xa68>
 801adb6:	07eb      	lsls	r3, r5, #31
 801adb8:	d5d6      	bpl.n	801ad68 <_dtoa_r+0xa68>
 801adba:	2d39      	cmp	r5, #57	@ 0x39
 801adbc:	d1d2      	bne.n	801ad64 <_dtoa_r+0xa64>
 801adbe:	2339      	movs	r3, #57	@ 0x39
 801adc0:	9a06      	ldr	r2, [sp, #24]
 801adc2:	7013      	strb	r3, [r2, #0]
 801adc4:	0023      	movs	r3, r4
 801adc6:	001c      	movs	r4, r3
 801adc8:	3b01      	subs	r3, #1
 801adca:	781a      	ldrb	r2, [r3, #0]
 801adcc:	2a39      	cmp	r2, #57	@ 0x39
 801adce:	d050      	beq.n	801ae72 <_dtoa_r+0xb72>
 801add0:	3201      	adds	r2, #1
 801add2:	701a      	strb	r2, [r3, #0]
 801add4:	e4fe      	b.n	801a7d4 <_dtoa_r+0x4d4>
 801add6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801add8:	2b00      	cmp	r3, #0
 801adda:	dd03      	ble.n	801ade4 <_dtoa_r+0xae4>
 801addc:	2d39      	cmp	r5, #57	@ 0x39
 801adde:	d0ee      	beq.n	801adbe <_dtoa_r+0xabe>
 801ade0:	3501      	adds	r5, #1
 801ade2:	e7c1      	b.n	801ad68 <_dtoa_r+0xa68>
 801ade4:	9b06      	ldr	r3, [sp, #24]
 801ade6:	9a06      	ldr	r2, [sp, #24]
 801ade8:	701d      	strb	r5, [r3, #0]
 801adea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801adec:	4293      	cmp	r3, r2
 801adee:	d02b      	beq.n	801ae48 <_dtoa_r+0xb48>
 801adf0:	2300      	movs	r3, #0
 801adf2:	220a      	movs	r2, #10
 801adf4:	9905      	ldr	r1, [sp, #20]
 801adf6:	9803      	ldr	r0, [sp, #12]
 801adf8:	f000 f9e0 	bl	801b1bc <__multadd>
 801adfc:	9b04      	ldr	r3, [sp, #16]
 801adfe:	9005      	str	r0, [sp, #20]
 801ae00:	429f      	cmp	r7, r3
 801ae02:	d109      	bne.n	801ae18 <_dtoa_r+0xb18>
 801ae04:	0039      	movs	r1, r7
 801ae06:	2300      	movs	r3, #0
 801ae08:	220a      	movs	r2, #10
 801ae0a:	9803      	ldr	r0, [sp, #12]
 801ae0c:	f000 f9d6 	bl	801b1bc <__multadd>
 801ae10:	0007      	movs	r7, r0
 801ae12:	9004      	str	r0, [sp, #16]
 801ae14:	9406      	str	r4, [sp, #24]
 801ae16:	e778      	b.n	801ad0a <_dtoa_r+0xa0a>
 801ae18:	0039      	movs	r1, r7
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	220a      	movs	r2, #10
 801ae1e:	9803      	ldr	r0, [sp, #12]
 801ae20:	f000 f9cc 	bl	801b1bc <__multadd>
 801ae24:	2300      	movs	r3, #0
 801ae26:	0007      	movs	r7, r0
 801ae28:	220a      	movs	r2, #10
 801ae2a:	9904      	ldr	r1, [sp, #16]
 801ae2c:	9803      	ldr	r0, [sp, #12]
 801ae2e:	f000 f9c5 	bl	801b1bc <__multadd>
 801ae32:	9004      	str	r0, [sp, #16]
 801ae34:	e7ee      	b.n	801ae14 <_dtoa_r+0xb14>
 801ae36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae38:	2401      	movs	r4, #1
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	dd00      	ble.n	801ae40 <_dtoa_r+0xb40>
 801ae3e:	001c      	movs	r4, r3
 801ae40:	9704      	str	r7, [sp, #16]
 801ae42:	2700      	movs	r7, #0
 801ae44:	9b08      	ldr	r3, [sp, #32]
 801ae46:	191c      	adds	r4, r3, r4
 801ae48:	9905      	ldr	r1, [sp, #20]
 801ae4a:	2201      	movs	r2, #1
 801ae4c:	9803      	ldr	r0, [sp, #12]
 801ae4e:	f000 fb67 	bl	801b520 <__lshift>
 801ae52:	0031      	movs	r1, r6
 801ae54:	9005      	str	r0, [sp, #20]
 801ae56:	f000 fbcf 	bl	801b5f8 <__mcmp>
 801ae5a:	2800      	cmp	r0, #0
 801ae5c:	dcb2      	bgt.n	801adc4 <_dtoa_r+0xac4>
 801ae5e:	d101      	bne.n	801ae64 <_dtoa_r+0xb64>
 801ae60:	07ed      	lsls	r5, r5, #31
 801ae62:	d4af      	bmi.n	801adc4 <_dtoa_r+0xac4>
 801ae64:	0023      	movs	r3, r4
 801ae66:	001c      	movs	r4, r3
 801ae68:	3b01      	subs	r3, #1
 801ae6a:	781a      	ldrb	r2, [r3, #0]
 801ae6c:	2a30      	cmp	r2, #48	@ 0x30
 801ae6e:	d0fa      	beq.n	801ae66 <_dtoa_r+0xb66>
 801ae70:	e4b0      	b.n	801a7d4 <_dtoa_r+0x4d4>
 801ae72:	9a08      	ldr	r2, [sp, #32]
 801ae74:	429a      	cmp	r2, r3
 801ae76:	d1a6      	bne.n	801adc6 <_dtoa_r+0xac6>
 801ae78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ae7a:	3301      	adds	r3, #1
 801ae7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ae7e:	2331      	movs	r3, #49	@ 0x31
 801ae80:	7013      	strb	r3, [r2, #0]
 801ae82:	e4a7      	b.n	801a7d4 <_dtoa_r+0x4d4>
 801ae84:	4b14      	ldr	r3, [pc, #80]	@ (801aed8 <_dtoa_r+0xbd8>)
 801ae86:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ae88:	9308      	str	r3, [sp, #32]
 801ae8a:	4b14      	ldr	r3, [pc, #80]	@ (801aedc <_dtoa_r+0xbdc>)
 801ae8c:	2a00      	cmp	r2, #0
 801ae8e:	d001      	beq.n	801ae94 <_dtoa_r+0xb94>
 801ae90:	f7ff fa7e 	bl	801a390 <_dtoa_r+0x90>
 801ae94:	f7ff fa7e 	bl	801a394 <_dtoa_r+0x94>
 801ae98:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ae9a:	2b01      	cmp	r3, #1
 801ae9c:	dc00      	bgt.n	801aea0 <_dtoa_r+0xba0>
 801ae9e:	e648      	b.n	801ab32 <_dtoa_r+0x832>
 801aea0:	2001      	movs	r0, #1
 801aea2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801aea4:	e665      	b.n	801ab72 <_dtoa_r+0x872>
 801aea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	dc00      	bgt.n	801aeae <_dtoa_r+0xbae>
 801aeac:	e6a9      	b.n	801ac02 <_dtoa_r+0x902>
 801aeae:	2400      	movs	r4, #0
 801aeb0:	0031      	movs	r1, r6
 801aeb2:	9805      	ldr	r0, [sp, #20]
 801aeb4:	f7ff f99f 	bl	801a1f6 <quorem>
 801aeb8:	9b08      	ldr	r3, [sp, #32]
 801aeba:	3030      	adds	r0, #48	@ 0x30
 801aebc:	5518      	strb	r0, [r3, r4]
 801aebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aec0:	3401      	adds	r4, #1
 801aec2:	0005      	movs	r5, r0
 801aec4:	42a3      	cmp	r3, r4
 801aec6:	ddb6      	ble.n	801ae36 <_dtoa_r+0xb36>
 801aec8:	2300      	movs	r3, #0
 801aeca:	220a      	movs	r2, #10
 801aecc:	9905      	ldr	r1, [sp, #20]
 801aece:	9803      	ldr	r0, [sp, #12]
 801aed0:	f000 f974 	bl	801b1bc <__multadd>
 801aed4:	9005      	str	r0, [sp, #20]
 801aed6:	e7eb      	b.n	801aeb0 <_dtoa_r+0xbb0>
 801aed8:	0801fc4a 	.word	0x0801fc4a
 801aedc:	0801fc52 	.word	0x0801fc52

0801aee0 <_free_r>:
 801aee0:	b570      	push	{r4, r5, r6, lr}
 801aee2:	0005      	movs	r5, r0
 801aee4:	1e0c      	subs	r4, r1, #0
 801aee6:	d010      	beq.n	801af0a <_free_r+0x2a>
 801aee8:	3c04      	subs	r4, #4
 801aeea:	6823      	ldr	r3, [r4, #0]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	da00      	bge.n	801aef2 <_free_r+0x12>
 801aef0:	18e4      	adds	r4, r4, r3
 801aef2:	0028      	movs	r0, r5
 801aef4:	f000 f8ea 	bl	801b0cc <__malloc_lock>
 801aef8:	4a1d      	ldr	r2, [pc, #116]	@ (801af70 <_free_r+0x90>)
 801aefa:	6813      	ldr	r3, [r2, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d105      	bne.n	801af0c <_free_r+0x2c>
 801af00:	6063      	str	r3, [r4, #4]
 801af02:	6014      	str	r4, [r2, #0]
 801af04:	0028      	movs	r0, r5
 801af06:	f000 f8e9 	bl	801b0dc <__malloc_unlock>
 801af0a:	bd70      	pop	{r4, r5, r6, pc}
 801af0c:	42a3      	cmp	r3, r4
 801af0e:	d908      	bls.n	801af22 <_free_r+0x42>
 801af10:	6820      	ldr	r0, [r4, #0]
 801af12:	1821      	adds	r1, r4, r0
 801af14:	428b      	cmp	r3, r1
 801af16:	d1f3      	bne.n	801af00 <_free_r+0x20>
 801af18:	6819      	ldr	r1, [r3, #0]
 801af1a:	685b      	ldr	r3, [r3, #4]
 801af1c:	1809      	adds	r1, r1, r0
 801af1e:	6021      	str	r1, [r4, #0]
 801af20:	e7ee      	b.n	801af00 <_free_r+0x20>
 801af22:	001a      	movs	r2, r3
 801af24:	685b      	ldr	r3, [r3, #4]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d001      	beq.n	801af2e <_free_r+0x4e>
 801af2a:	42a3      	cmp	r3, r4
 801af2c:	d9f9      	bls.n	801af22 <_free_r+0x42>
 801af2e:	6811      	ldr	r1, [r2, #0]
 801af30:	1850      	adds	r0, r2, r1
 801af32:	42a0      	cmp	r0, r4
 801af34:	d10b      	bne.n	801af4e <_free_r+0x6e>
 801af36:	6820      	ldr	r0, [r4, #0]
 801af38:	1809      	adds	r1, r1, r0
 801af3a:	1850      	adds	r0, r2, r1
 801af3c:	6011      	str	r1, [r2, #0]
 801af3e:	4283      	cmp	r3, r0
 801af40:	d1e0      	bne.n	801af04 <_free_r+0x24>
 801af42:	6818      	ldr	r0, [r3, #0]
 801af44:	685b      	ldr	r3, [r3, #4]
 801af46:	1841      	adds	r1, r0, r1
 801af48:	6011      	str	r1, [r2, #0]
 801af4a:	6053      	str	r3, [r2, #4]
 801af4c:	e7da      	b.n	801af04 <_free_r+0x24>
 801af4e:	42a0      	cmp	r0, r4
 801af50:	d902      	bls.n	801af58 <_free_r+0x78>
 801af52:	230c      	movs	r3, #12
 801af54:	602b      	str	r3, [r5, #0]
 801af56:	e7d5      	b.n	801af04 <_free_r+0x24>
 801af58:	6820      	ldr	r0, [r4, #0]
 801af5a:	1821      	adds	r1, r4, r0
 801af5c:	428b      	cmp	r3, r1
 801af5e:	d103      	bne.n	801af68 <_free_r+0x88>
 801af60:	6819      	ldr	r1, [r3, #0]
 801af62:	685b      	ldr	r3, [r3, #4]
 801af64:	1809      	adds	r1, r1, r0
 801af66:	6021      	str	r1, [r4, #0]
 801af68:	6063      	str	r3, [r4, #4]
 801af6a:	6054      	str	r4, [r2, #4]
 801af6c:	e7ca      	b.n	801af04 <_free_r+0x24>
 801af6e:	46c0      	nop			@ (mov r8, r8)
 801af70:	2000681c 	.word	0x2000681c

0801af74 <malloc>:
 801af74:	b510      	push	{r4, lr}
 801af76:	4b03      	ldr	r3, [pc, #12]	@ (801af84 <malloc+0x10>)
 801af78:	0001      	movs	r1, r0
 801af7a:	6818      	ldr	r0, [r3, #0]
 801af7c:	f000 f826 	bl	801afcc <_malloc_r>
 801af80:	bd10      	pop	{r4, pc}
 801af82:	46c0      	nop			@ (mov r8, r8)
 801af84:	200002cc 	.word	0x200002cc

0801af88 <sbrk_aligned>:
 801af88:	b570      	push	{r4, r5, r6, lr}
 801af8a:	4e0f      	ldr	r6, [pc, #60]	@ (801afc8 <sbrk_aligned+0x40>)
 801af8c:	000d      	movs	r5, r1
 801af8e:	6831      	ldr	r1, [r6, #0]
 801af90:	0004      	movs	r4, r0
 801af92:	2900      	cmp	r1, #0
 801af94:	d102      	bne.n	801af9c <sbrk_aligned+0x14>
 801af96:	f001 f871 	bl	801c07c <_sbrk_r>
 801af9a:	6030      	str	r0, [r6, #0]
 801af9c:	0029      	movs	r1, r5
 801af9e:	0020      	movs	r0, r4
 801afa0:	f001 f86c 	bl	801c07c <_sbrk_r>
 801afa4:	1c43      	adds	r3, r0, #1
 801afa6:	d103      	bne.n	801afb0 <sbrk_aligned+0x28>
 801afa8:	2501      	movs	r5, #1
 801afaa:	426d      	negs	r5, r5
 801afac:	0028      	movs	r0, r5
 801afae:	bd70      	pop	{r4, r5, r6, pc}
 801afb0:	2303      	movs	r3, #3
 801afb2:	1cc5      	adds	r5, r0, #3
 801afb4:	439d      	bics	r5, r3
 801afb6:	42a8      	cmp	r0, r5
 801afb8:	d0f8      	beq.n	801afac <sbrk_aligned+0x24>
 801afba:	1a29      	subs	r1, r5, r0
 801afbc:	0020      	movs	r0, r4
 801afbe:	f001 f85d 	bl	801c07c <_sbrk_r>
 801afc2:	3001      	adds	r0, #1
 801afc4:	d1f2      	bne.n	801afac <sbrk_aligned+0x24>
 801afc6:	e7ef      	b.n	801afa8 <sbrk_aligned+0x20>
 801afc8:	20006818 	.word	0x20006818

0801afcc <_malloc_r>:
 801afcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801afce:	2203      	movs	r2, #3
 801afd0:	1ccb      	adds	r3, r1, #3
 801afd2:	4393      	bics	r3, r2
 801afd4:	3308      	adds	r3, #8
 801afd6:	0005      	movs	r5, r0
 801afd8:	001f      	movs	r7, r3
 801afda:	2b0c      	cmp	r3, #12
 801afdc:	d234      	bcs.n	801b048 <_malloc_r+0x7c>
 801afde:	270c      	movs	r7, #12
 801afe0:	42b9      	cmp	r1, r7
 801afe2:	d833      	bhi.n	801b04c <_malloc_r+0x80>
 801afe4:	0028      	movs	r0, r5
 801afe6:	f000 f871 	bl	801b0cc <__malloc_lock>
 801afea:	4e37      	ldr	r6, [pc, #220]	@ (801b0c8 <_malloc_r+0xfc>)
 801afec:	6833      	ldr	r3, [r6, #0]
 801afee:	001c      	movs	r4, r3
 801aff0:	2c00      	cmp	r4, #0
 801aff2:	d12f      	bne.n	801b054 <_malloc_r+0x88>
 801aff4:	0039      	movs	r1, r7
 801aff6:	0028      	movs	r0, r5
 801aff8:	f7ff ffc6 	bl	801af88 <sbrk_aligned>
 801affc:	0004      	movs	r4, r0
 801affe:	1c43      	adds	r3, r0, #1
 801b000:	d15f      	bne.n	801b0c2 <_malloc_r+0xf6>
 801b002:	6834      	ldr	r4, [r6, #0]
 801b004:	9400      	str	r4, [sp, #0]
 801b006:	9b00      	ldr	r3, [sp, #0]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d14a      	bne.n	801b0a2 <_malloc_r+0xd6>
 801b00c:	2c00      	cmp	r4, #0
 801b00e:	d052      	beq.n	801b0b6 <_malloc_r+0xea>
 801b010:	6823      	ldr	r3, [r4, #0]
 801b012:	0028      	movs	r0, r5
 801b014:	18e3      	adds	r3, r4, r3
 801b016:	9900      	ldr	r1, [sp, #0]
 801b018:	9301      	str	r3, [sp, #4]
 801b01a:	f001 f82f 	bl	801c07c <_sbrk_r>
 801b01e:	9b01      	ldr	r3, [sp, #4]
 801b020:	4283      	cmp	r3, r0
 801b022:	d148      	bne.n	801b0b6 <_malloc_r+0xea>
 801b024:	6823      	ldr	r3, [r4, #0]
 801b026:	0028      	movs	r0, r5
 801b028:	1aff      	subs	r7, r7, r3
 801b02a:	0039      	movs	r1, r7
 801b02c:	f7ff ffac 	bl	801af88 <sbrk_aligned>
 801b030:	3001      	adds	r0, #1
 801b032:	d040      	beq.n	801b0b6 <_malloc_r+0xea>
 801b034:	6823      	ldr	r3, [r4, #0]
 801b036:	19db      	adds	r3, r3, r7
 801b038:	6023      	str	r3, [r4, #0]
 801b03a:	6833      	ldr	r3, [r6, #0]
 801b03c:	685a      	ldr	r2, [r3, #4]
 801b03e:	2a00      	cmp	r2, #0
 801b040:	d133      	bne.n	801b0aa <_malloc_r+0xde>
 801b042:	9b00      	ldr	r3, [sp, #0]
 801b044:	6033      	str	r3, [r6, #0]
 801b046:	e019      	b.n	801b07c <_malloc_r+0xb0>
 801b048:	2b00      	cmp	r3, #0
 801b04a:	dac9      	bge.n	801afe0 <_malloc_r+0x14>
 801b04c:	230c      	movs	r3, #12
 801b04e:	602b      	str	r3, [r5, #0]
 801b050:	2000      	movs	r0, #0
 801b052:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b054:	6821      	ldr	r1, [r4, #0]
 801b056:	1bc9      	subs	r1, r1, r7
 801b058:	d420      	bmi.n	801b09c <_malloc_r+0xd0>
 801b05a:	290b      	cmp	r1, #11
 801b05c:	d90a      	bls.n	801b074 <_malloc_r+0xa8>
 801b05e:	19e2      	adds	r2, r4, r7
 801b060:	6027      	str	r7, [r4, #0]
 801b062:	42a3      	cmp	r3, r4
 801b064:	d104      	bne.n	801b070 <_malloc_r+0xa4>
 801b066:	6032      	str	r2, [r6, #0]
 801b068:	6863      	ldr	r3, [r4, #4]
 801b06a:	6011      	str	r1, [r2, #0]
 801b06c:	6053      	str	r3, [r2, #4]
 801b06e:	e005      	b.n	801b07c <_malloc_r+0xb0>
 801b070:	605a      	str	r2, [r3, #4]
 801b072:	e7f9      	b.n	801b068 <_malloc_r+0x9c>
 801b074:	6862      	ldr	r2, [r4, #4]
 801b076:	42a3      	cmp	r3, r4
 801b078:	d10e      	bne.n	801b098 <_malloc_r+0xcc>
 801b07a:	6032      	str	r2, [r6, #0]
 801b07c:	0028      	movs	r0, r5
 801b07e:	f000 f82d 	bl	801b0dc <__malloc_unlock>
 801b082:	0020      	movs	r0, r4
 801b084:	2207      	movs	r2, #7
 801b086:	300b      	adds	r0, #11
 801b088:	1d23      	adds	r3, r4, #4
 801b08a:	4390      	bics	r0, r2
 801b08c:	1ac2      	subs	r2, r0, r3
 801b08e:	4298      	cmp	r0, r3
 801b090:	d0df      	beq.n	801b052 <_malloc_r+0x86>
 801b092:	1a1b      	subs	r3, r3, r0
 801b094:	50a3      	str	r3, [r4, r2]
 801b096:	e7dc      	b.n	801b052 <_malloc_r+0x86>
 801b098:	605a      	str	r2, [r3, #4]
 801b09a:	e7ef      	b.n	801b07c <_malloc_r+0xb0>
 801b09c:	0023      	movs	r3, r4
 801b09e:	6864      	ldr	r4, [r4, #4]
 801b0a0:	e7a6      	b.n	801aff0 <_malloc_r+0x24>
 801b0a2:	9c00      	ldr	r4, [sp, #0]
 801b0a4:	6863      	ldr	r3, [r4, #4]
 801b0a6:	9300      	str	r3, [sp, #0]
 801b0a8:	e7ad      	b.n	801b006 <_malloc_r+0x3a>
 801b0aa:	001a      	movs	r2, r3
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	42a3      	cmp	r3, r4
 801b0b0:	d1fb      	bne.n	801b0aa <_malloc_r+0xde>
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	e7da      	b.n	801b06c <_malloc_r+0xa0>
 801b0b6:	230c      	movs	r3, #12
 801b0b8:	0028      	movs	r0, r5
 801b0ba:	602b      	str	r3, [r5, #0]
 801b0bc:	f000 f80e 	bl	801b0dc <__malloc_unlock>
 801b0c0:	e7c6      	b.n	801b050 <_malloc_r+0x84>
 801b0c2:	6007      	str	r7, [r0, #0]
 801b0c4:	e7da      	b.n	801b07c <_malloc_r+0xb0>
 801b0c6:	46c0      	nop			@ (mov r8, r8)
 801b0c8:	2000681c 	.word	0x2000681c

0801b0cc <__malloc_lock>:
 801b0cc:	b510      	push	{r4, lr}
 801b0ce:	4802      	ldr	r0, [pc, #8]	@ (801b0d8 <__malloc_lock+0xc>)
 801b0d0:	f7ff f873 	bl	801a1ba <__retarget_lock_acquire_recursive>
 801b0d4:	bd10      	pop	{r4, pc}
 801b0d6:	46c0      	nop			@ (mov r8, r8)
 801b0d8:	20006814 	.word	0x20006814

0801b0dc <__malloc_unlock>:
 801b0dc:	b510      	push	{r4, lr}
 801b0de:	4802      	ldr	r0, [pc, #8]	@ (801b0e8 <__malloc_unlock+0xc>)
 801b0e0:	f7ff f86c 	bl	801a1bc <__retarget_lock_release_recursive>
 801b0e4:	bd10      	pop	{r4, pc}
 801b0e6:	46c0      	nop			@ (mov r8, r8)
 801b0e8:	20006814 	.word	0x20006814

0801b0ec <_Balloc>:
 801b0ec:	b570      	push	{r4, r5, r6, lr}
 801b0ee:	69c5      	ldr	r5, [r0, #28]
 801b0f0:	0006      	movs	r6, r0
 801b0f2:	000c      	movs	r4, r1
 801b0f4:	2d00      	cmp	r5, #0
 801b0f6:	d10e      	bne.n	801b116 <_Balloc+0x2a>
 801b0f8:	2010      	movs	r0, #16
 801b0fa:	f7ff ff3b 	bl	801af74 <malloc>
 801b0fe:	1e02      	subs	r2, r0, #0
 801b100:	61f0      	str	r0, [r6, #28]
 801b102:	d104      	bne.n	801b10e <_Balloc+0x22>
 801b104:	216b      	movs	r1, #107	@ 0x6b
 801b106:	4b19      	ldr	r3, [pc, #100]	@ (801b16c <_Balloc+0x80>)
 801b108:	4819      	ldr	r0, [pc, #100]	@ (801b170 <_Balloc+0x84>)
 801b10a:	f000 ffc9 	bl	801c0a0 <__assert_func>
 801b10e:	6045      	str	r5, [r0, #4]
 801b110:	6085      	str	r5, [r0, #8]
 801b112:	6005      	str	r5, [r0, #0]
 801b114:	60c5      	str	r5, [r0, #12]
 801b116:	69f5      	ldr	r5, [r6, #28]
 801b118:	68eb      	ldr	r3, [r5, #12]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d013      	beq.n	801b146 <_Balloc+0x5a>
 801b11e:	69f3      	ldr	r3, [r6, #28]
 801b120:	00a2      	lsls	r2, r4, #2
 801b122:	68db      	ldr	r3, [r3, #12]
 801b124:	189b      	adds	r3, r3, r2
 801b126:	6818      	ldr	r0, [r3, #0]
 801b128:	2800      	cmp	r0, #0
 801b12a:	d118      	bne.n	801b15e <_Balloc+0x72>
 801b12c:	2101      	movs	r1, #1
 801b12e:	000d      	movs	r5, r1
 801b130:	40a5      	lsls	r5, r4
 801b132:	1d6a      	adds	r2, r5, #5
 801b134:	0030      	movs	r0, r6
 801b136:	0092      	lsls	r2, r2, #2
 801b138:	f000 ffd0 	bl	801c0dc <_calloc_r>
 801b13c:	2800      	cmp	r0, #0
 801b13e:	d00c      	beq.n	801b15a <_Balloc+0x6e>
 801b140:	6044      	str	r4, [r0, #4]
 801b142:	6085      	str	r5, [r0, #8]
 801b144:	e00d      	b.n	801b162 <_Balloc+0x76>
 801b146:	2221      	movs	r2, #33	@ 0x21
 801b148:	2104      	movs	r1, #4
 801b14a:	0030      	movs	r0, r6
 801b14c:	f000 ffc6 	bl	801c0dc <_calloc_r>
 801b150:	69f3      	ldr	r3, [r6, #28]
 801b152:	60e8      	str	r0, [r5, #12]
 801b154:	68db      	ldr	r3, [r3, #12]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d1e1      	bne.n	801b11e <_Balloc+0x32>
 801b15a:	2000      	movs	r0, #0
 801b15c:	bd70      	pop	{r4, r5, r6, pc}
 801b15e:	6802      	ldr	r2, [r0, #0]
 801b160:	601a      	str	r2, [r3, #0]
 801b162:	2300      	movs	r3, #0
 801b164:	6103      	str	r3, [r0, #16]
 801b166:	60c3      	str	r3, [r0, #12]
 801b168:	e7f8      	b.n	801b15c <_Balloc+0x70>
 801b16a:	46c0      	nop			@ (mov r8, r8)
 801b16c:	0801fc57 	.word	0x0801fc57
 801b170:	0801fcd7 	.word	0x0801fcd7

0801b174 <_Bfree>:
 801b174:	b570      	push	{r4, r5, r6, lr}
 801b176:	69c6      	ldr	r6, [r0, #28]
 801b178:	0005      	movs	r5, r0
 801b17a:	000c      	movs	r4, r1
 801b17c:	2e00      	cmp	r6, #0
 801b17e:	d10e      	bne.n	801b19e <_Bfree+0x2a>
 801b180:	2010      	movs	r0, #16
 801b182:	f7ff fef7 	bl	801af74 <malloc>
 801b186:	1e02      	subs	r2, r0, #0
 801b188:	61e8      	str	r0, [r5, #28]
 801b18a:	d104      	bne.n	801b196 <_Bfree+0x22>
 801b18c:	218f      	movs	r1, #143	@ 0x8f
 801b18e:	4b09      	ldr	r3, [pc, #36]	@ (801b1b4 <_Bfree+0x40>)
 801b190:	4809      	ldr	r0, [pc, #36]	@ (801b1b8 <_Bfree+0x44>)
 801b192:	f000 ff85 	bl	801c0a0 <__assert_func>
 801b196:	6046      	str	r6, [r0, #4]
 801b198:	6086      	str	r6, [r0, #8]
 801b19a:	6006      	str	r6, [r0, #0]
 801b19c:	60c6      	str	r6, [r0, #12]
 801b19e:	2c00      	cmp	r4, #0
 801b1a0:	d007      	beq.n	801b1b2 <_Bfree+0x3e>
 801b1a2:	69eb      	ldr	r3, [r5, #28]
 801b1a4:	6862      	ldr	r2, [r4, #4]
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	0092      	lsls	r2, r2, #2
 801b1aa:	189b      	adds	r3, r3, r2
 801b1ac:	681a      	ldr	r2, [r3, #0]
 801b1ae:	6022      	str	r2, [r4, #0]
 801b1b0:	601c      	str	r4, [r3, #0]
 801b1b2:	bd70      	pop	{r4, r5, r6, pc}
 801b1b4:	0801fc57 	.word	0x0801fc57
 801b1b8:	0801fcd7 	.word	0x0801fcd7

0801b1bc <__multadd>:
 801b1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1be:	000f      	movs	r7, r1
 801b1c0:	9001      	str	r0, [sp, #4]
 801b1c2:	000c      	movs	r4, r1
 801b1c4:	001e      	movs	r6, r3
 801b1c6:	2000      	movs	r0, #0
 801b1c8:	690d      	ldr	r5, [r1, #16]
 801b1ca:	3714      	adds	r7, #20
 801b1cc:	683b      	ldr	r3, [r7, #0]
 801b1ce:	3001      	adds	r0, #1
 801b1d0:	b299      	uxth	r1, r3
 801b1d2:	4351      	muls	r1, r2
 801b1d4:	0c1b      	lsrs	r3, r3, #16
 801b1d6:	4353      	muls	r3, r2
 801b1d8:	1989      	adds	r1, r1, r6
 801b1da:	0c0e      	lsrs	r6, r1, #16
 801b1dc:	199b      	adds	r3, r3, r6
 801b1de:	0c1e      	lsrs	r6, r3, #16
 801b1e0:	b289      	uxth	r1, r1
 801b1e2:	041b      	lsls	r3, r3, #16
 801b1e4:	185b      	adds	r3, r3, r1
 801b1e6:	c708      	stmia	r7!, {r3}
 801b1e8:	4285      	cmp	r5, r0
 801b1ea:	dcef      	bgt.n	801b1cc <__multadd+0x10>
 801b1ec:	2e00      	cmp	r6, #0
 801b1ee:	d022      	beq.n	801b236 <__multadd+0x7a>
 801b1f0:	68a3      	ldr	r3, [r4, #8]
 801b1f2:	42ab      	cmp	r3, r5
 801b1f4:	dc19      	bgt.n	801b22a <__multadd+0x6e>
 801b1f6:	6861      	ldr	r1, [r4, #4]
 801b1f8:	9801      	ldr	r0, [sp, #4]
 801b1fa:	3101      	adds	r1, #1
 801b1fc:	f7ff ff76 	bl	801b0ec <_Balloc>
 801b200:	1e07      	subs	r7, r0, #0
 801b202:	d105      	bne.n	801b210 <__multadd+0x54>
 801b204:	003a      	movs	r2, r7
 801b206:	21ba      	movs	r1, #186	@ 0xba
 801b208:	4b0c      	ldr	r3, [pc, #48]	@ (801b23c <__multadd+0x80>)
 801b20a:	480d      	ldr	r0, [pc, #52]	@ (801b240 <__multadd+0x84>)
 801b20c:	f000 ff48 	bl	801c0a0 <__assert_func>
 801b210:	0021      	movs	r1, r4
 801b212:	6922      	ldr	r2, [r4, #16]
 801b214:	310c      	adds	r1, #12
 801b216:	3202      	adds	r2, #2
 801b218:	0092      	lsls	r2, r2, #2
 801b21a:	300c      	adds	r0, #12
 801b21c:	f7fe ffe2 	bl	801a1e4 <memcpy>
 801b220:	0021      	movs	r1, r4
 801b222:	9801      	ldr	r0, [sp, #4]
 801b224:	f7ff ffa6 	bl	801b174 <_Bfree>
 801b228:	003c      	movs	r4, r7
 801b22a:	1d2b      	adds	r3, r5, #4
 801b22c:	009b      	lsls	r3, r3, #2
 801b22e:	18e3      	adds	r3, r4, r3
 801b230:	3501      	adds	r5, #1
 801b232:	605e      	str	r6, [r3, #4]
 801b234:	6125      	str	r5, [r4, #16]
 801b236:	0020      	movs	r0, r4
 801b238:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b23a:	46c0      	nop			@ (mov r8, r8)
 801b23c:	0801fcc6 	.word	0x0801fcc6
 801b240:	0801fcd7 	.word	0x0801fcd7

0801b244 <__hi0bits>:
 801b244:	2280      	movs	r2, #128	@ 0x80
 801b246:	0003      	movs	r3, r0
 801b248:	0252      	lsls	r2, r2, #9
 801b24a:	2000      	movs	r0, #0
 801b24c:	4293      	cmp	r3, r2
 801b24e:	d201      	bcs.n	801b254 <__hi0bits+0x10>
 801b250:	041b      	lsls	r3, r3, #16
 801b252:	3010      	adds	r0, #16
 801b254:	2280      	movs	r2, #128	@ 0x80
 801b256:	0452      	lsls	r2, r2, #17
 801b258:	4293      	cmp	r3, r2
 801b25a:	d201      	bcs.n	801b260 <__hi0bits+0x1c>
 801b25c:	3008      	adds	r0, #8
 801b25e:	021b      	lsls	r3, r3, #8
 801b260:	2280      	movs	r2, #128	@ 0x80
 801b262:	0552      	lsls	r2, r2, #21
 801b264:	4293      	cmp	r3, r2
 801b266:	d201      	bcs.n	801b26c <__hi0bits+0x28>
 801b268:	3004      	adds	r0, #4
 801b26a:	011b      	lsls	r3, r3, #4
 801b26c:	2280      	movs	r2, #128	@ 0x80
 801b26e:	05d2      	lsls	r2, r2, #23
 801b270:	4293      	cmp	r3, r2
 801b272:	d201      	bcs.n	801b278 <__hi0bits+0x34>
 801b274:	3002      	adds	r0, #2
 801b276:	009b      	lsls	r3, r3, #2
 801b278:	2b00      	cmp	r3, #0
 801b27a:	db03      	blt.n	801b284 <__hi0bits+0x40>
 801b27c:	3001      	adds	r0, #1
 801b27e:	4213      	tst	r3, r2
 801b280:	d100      	bne.n	801b284 <__hi0bits+0x40>
 801b282:	2020      	movs	r0, #32
 801b284:	4770      	bx	lr

0801b286 <__lo0bits>:
 801b286:	6803      	ldr	r3, [r0, #0]
 801b288:	0001      	movs	r1, r0
 801b28a:	2207      	movs	r2, #7
 801b28c:	0018      	movs	r0, r3
 801b28e:	4010      	ands	r0, r2
 801b290:	4213      	tst	r3, r2
 801b292:	d00d      	beq.n	801b2b0 <__lo0bits+0x2a>
 801b294:	3a06      	subs	r2, #6
 801b296:	2000      	movs	r0, #0
 801b298:	4213      	tst	r3, r2
 801b29a:	d105      	bne.n	801b2a8 <__lo0bits+0x22>
 801b29c:	3002      	adds	r0, #2
 801b29e:	4203      	tst	r3, r0
 801b2a0:	d003      	beq.n	801b2aa <__lo0bits+0x24>
 801b2a2:	40d3      	lsrs	r3, r2
 801b2a4:	0010      	movs	r0, r2
 801b2a6:	600b      	str	r3, [r1, #0]
 801b2a8:	4770      	bx	lr
 801b2aa:	089b      	lsrs	r3, r3, #2
 801b2ac:	600b      	str	r3, [r1, #0]
 801b2ae:	e7fb      	b.n	801b2a8 <__lo0bits+0x22>
 801b2b0:	b29a      	uxth	r2, r3
 801b2b2:	2a00      	cmp	r2, #0
 801b2b4:	d101      	bne.n	801b2ba <__lo0bits+0x34>
 801b2b6:	2010      	movs	r0, #16
 801b2b8:	0c1b      	lsrs	r3, r3, #16
 801b2ba:	b2da      	uxtb	r2, r3
 801b2bc:	2a00      	cmp	r2, #0
 801b2be:	d101      	bne.n	801b2c4 <__lo0bits+0x3e>
 801b2c0:	3008      	adds	r0, #8
 801b2c2:	0a1b      	lsrs	r3, r3, #8
 801b2c4:	071a      	lsls	r2, r3, #28
 801b2c6:	d101      	bne.n	801b2cc <__lo0bits+0x46>
 801b2c8:	3004      	adds	r0, #4
 801b2ca:	091b      	lsrs	r3, r3, #4
 801b2cc:	079a      	lsls	r2, r3, #30
 801b2ce:	d101      	bne.n	801b2d4 <__lo0bits+0x4e>
 801b2d0:	3002      	adds	r0, #2
 801b2d2:	089b      	lsrs	r3, r3, #2
 801b2d4:	07da      	lsls	r2, r3, #31
 801b2d6:	d4e9      	bmi.n	801b2ac <__lo0bits+0x26>
 801b2d8:	3001      	adds	r0, #1
 801b2da:	085b      	lsrs	r3, r3, #1
 801b2dc:	d1e6      	bne.n	801b2ac <__lo0bits+0x26>
 801b2de:	2020      	movs	r0, #32
 801b2e0:	e7e2      	b.n	801b2a8 <__lo0bits+0x22>
	...

0801b2e4 <__i2b>:
 801b2e4:	b510      	push	{r4, lr}
 801b2e6:	000c      	movs	r4, r1
 801b2e8:	2101      	movs	r1, #1
 801b2ea:	f7ff feff 	bl	801b0ec <_Balloc>
 801b2ee:	2800      	cmp	r0, #0
 801b2f0:	d107      	bne.n	801b302 <__i2b+0x1e>
 801b2f2:	2146      	movs	r1, #70	@ 0x46
 801b2f4:	4c05      	ldr	r4, [pc, #20]	@ (801b30c <__i2b+0x28>)
 801b2f6:	0002      	movs	r2, r0
 801b2f8:	4b05      	ldr	r3, [pc, #20]	@ (801b310 <__i2b+0x2c>)
 801b2fa:	0020      	movs	r0, r4
 801b2fc:	31ff      	adds	r1, #255	@ 0xff
 801b2fe:	f000 fecf 	bl	801c0a0 <__assert_func>
 801b302:	2301      	movs	r3, #1
 801b304:	6144      	str	r4, [r0, #20]
 801b306:	6103      	str	r3, [r0, #16]
 801b308:	bd10      	pop	{r4, pc}
 801b30a:	46c0      	nop			@ (mov r8, r8)
 801b30c:	0801fcd7 	.word	0x0801fcd7
 801b310:	0801fcc6 	.word	0x0801fcc6

0801b314 <__multiply>:
 801b314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b316:	0014      	movs	r4, r2
 801b318:	690a      	ldr	r2, [r1, #16]
 801b31a:	6923      	ldr	r3, [r4, #16]
 801b31c:	000d      	movs	r5, r1
 801b31e:	b089      	sub	sp, #36	@ 0x24
 801b320:	429a      	cmp	r2, r3
 801b322:	db02      	blt.n	801b32a <__multiply+0x16>
 801b324:	0023      	movs	r3, r4
 801b326:	000c      	movs	r4, r1
 801b328:	001d      	movs	r5, r3
 801b32a:	6927      	ldr	r7, [r4, #16]
 801b32c:	692e      	ldr	r6, [r5, #16]
 801b32e:	6861      	ldr	r1, [r4, #4]
 801b330:	19bb      	adds	r3, r7, r6
 801b332:	9300      	str	r3, [sp, #0]
 801b334:	68a3      	ldr	r3, [r4, #8]
 801b336:	19ba      	adds	r2, r7, r6
 801b338:	4293      	cmp	r3, r2
 801b33a:	da00      	bge.n	801b33e <__multiply+0x2a>
 801b33c:	3101      	adds	r1, #1
 801b33e:	f7ff fed5 	bl	801b0ec <_Balloc>
 801b342:	4684      	mov	ip, r0
 801b344:	2800      	cmp	r0, #0
 801b346:	d106      	bne.n	801b356 <__multiply+0x42>
 801b348:	21b1      	movs	r1, #177	@ 0xb1
 801b34a:	4662      	mov	r2, ip
 801b34c:	4b44      	ldr	r3, [pc, #272]	@ (801b460 <__multiply+0x14c>)
 801b34e:	4845      	ldr	r0, [pc, #276]	@ (801b464 <__multiply+0x150>)
 801b350:	0049      	lsls	r1, r1, #1
 801b352:	f000 fea5 	bl	801c0a0 <__assert_func>
 801b356:	0002      	movs	r2, r0
 801b358:	19bb      	adds	r3, r7, r6
 801b35a:	3214      	adds	r2, #20
 801b35c:	009b      	lsls	r3, r3, #2
 801b35e:	18d3      	adds	r3, r2, r3
 801b360:	9301      	str	r3, [sp, #4]
 801b362:	2100      	movs	r1, #0
 801b364:	0013      	movs	r3, r2
 801b366:	9801      	ldr	r0, [sp, #4]
 801b368:	4283      	cmp	r3, r0
 801b36a:	d328      	bcc.n	801b3be <__multiply+0xaa>
 801b36c:	0023      	movs	r3, r4
 801b36e:	00bf      	lsls	r7, r7, #2
 801b370:	3314      	adds	r3, #20
 801b372:	9304      	str	r3, [sp, #16]
 801b374:	3514      	adds	r5, #20
 801b376:	19db      	adds	r3, r3, r7
 801b378:	00b6      	lsls	r6, r6, #2
 801b37a:	9302      	str	r3, [sp, #8]
 801b37c:	19ab      	adds	r3, r5, r6
 801b37e:	9307      	str	r3, [sp, #28]
 801b380:	2304      	movs	r3, #4
 801b382:	9305      	str	r3, [sp, #20]
 801b384:	0023      	movs	r3, r4
 801b386:	9902      	ldr	r1, [sp, #8]
 801b388:	3315      	adds	r3, #21
 801b38a:	4299      	cmp	r1, r3
 801b38c:	d305      	bcc.n	801b39a <__multiply+0x86>
 801b38e:	1b0c      	subs	r4, r1, r4
 801b390:	3c15      	subs	r4, #21
 801b392:	08a4      	lsrs	r4, r4, #2
 801b394:	3401      	adds	r4, #1
 801b396:	00a3      	lsls	r3, r4, #2
 801b398:	9305      	str	r3, [sp, #20]
 801b39a:	9b07      	ldr	r3, [sp, #28]
 801b39c:	429d      	cmp	r5, r3
 801b39e:	d310      	bcc.n	801b3c2 <__multiply+0xae>
 801b3a0:	9b00      	ldr	r3, [sp, #0]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	dd05      	ble.n	801b3b2 <__multiply+0x9e>
 801b3a6:	9b01      	ldr	r3, [sp, #4]
 801b3a8:	3b04      	subs	r3, #4
 801b3aa:	9301      	str	r3, [sp, #4]
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d052      	beq.n	801b458 <__multiply+0x144>
 801b3b2:	4663      	mov	r3, ip
 801b3b4:	4660      	mov	r0, ip
 801b3b6:	9a00      	ldr	r2, [sp, #0]
 801b3b8:	611a      	str	r2, [r3, #16]
 801b3ba:	b009      	add	sp, #36	@ 0x24
 801b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3be:	c302      	stmia	r3!, {r1}
 801b3c0:	e7d1      	b.n	801b366 <__multiply+0x52>
 801b3c2:	682c      	ldr	r4, [r5, #0]
 801b3c4:	b2a4      	uxth	r4, r4
 801b3c6:	2c00      	cmp	r4, #0
 801b3c8:	d01f      	beq.n	801b40a <__multiply+0xf6>
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	0017      	movs	r7, r2
 801b3ce:	9e04      	ldr	r6, [sp, #16]
 801b3d0:	9303      	str	r3, [sp, #12]
 801b3d2:	ce08      	ldmia	r6!, {r3}
 801b3d4:	6839      	ldr	r1, [r7, #0]
 801b3d6:	9306      	str	r3, [sp, #24]
 801b3d8:	466b      	mov	r3, sp
 801b3da:	8b1b      	ldrh	r3, [r3, #24]
 801b3dc:	b288      	uxth	r0, r1
 801b3de:	4363      	muls	r3, r4
 801b3e0:	181b      	adds	r3, r3, r0
 801b3e2:	9803      	ldr	r0, [sp, #12]
 801b3e4:	0c09      	lsrs	r1, r1, #16
 801b3e6:	181b      	adds	r3, r3, r0
 801b3e8:	9806      	ldr	r0, [sp, #24]
 801b3ea:	0c00      	lsrs	r0, r0, #16
 801b3ec:	4360      	muls	r0, r4
 801b3ee:	1840      	adds	r0, r0, r1
 801b3f0:	0c19      	lsrs	r1, r3, #16
 801b3f2:	1841      	adds	r1, r0, r1
 801b3f4:	0c08      	lsrs	r0, r1, #16
 801b3f6:	b29b      	uxth	r3, r3
 801b3f8:	0409      	lsls	r1, r1, #16
 801b3fa:	4319      	orrs	r1, r3
 801b3fc:	9b02      	ldr	r3, [sp, #8]
 801b3fe:	9003      	str	r0, [sp, #12]
 801b400:	c702      	stmia	r7!, {r1}
 801b402:	42b3      	cmp	r3, r6
 801b404:	d8e5      	bhi.n	801b3d2 <__multiply+0xbe>
 801b406:	9b05      	ldr	r3, [sp, #20]
 801b408:	50d0      	str	r0, [r2, r3]
 801b40a:	682c      	ldr	r4, [r5, #0]
 801b40c:	0c24      	lsrs	r4, r4, #16
 801b40e:	d020      	beq.n	801b452 <__multiply+0x13e>
 801b410:	2100      	movs	r1, #0
 801b412:	0010      	movs	r0, r2
 801b414:	6813      	ldr	r3, [r2, #0]
 801b416:	9e04      	ldr	r6, [sp, #16]
 801b418:	9103      	str	r1, [sp, #12]
 801b41a:	6831      	ldr	r1, [r6, #0]
 801b41c:	6807      	ldr	r7, [r0, #0]
 801b41e:	b289      	uxth	r1, r1
 801b420:	4361      	muls	r1, r4
 801b422:	0c3f      	lsrs	r7, r7, #16
 801b424:	19c9      	adds	r1, r1, r7
 801b426:	9f03      	ldr	r7, [sp, #12]
 801b428:	b29b      	uxth	r3, r3
 801b42a:	19c9      	adds	r1, r1, r7
 801b42c:	040f      	lsls	r7, r1, #16
 801b42e:	431f      	orrs	r7, r3
 801b430:	6007      	str	r7, [r0, #0]
 801b432:	ce80      	ldmia	r6!, {r7}
 801b434:	6843      	ldr	r3, [r0, #4]
 801b436:	0c3f      	lsrs	r7, r7, #16
 801b438:	4367      	muls	r7, r4
 801b43a:	b29b      	uxth	r3, r3
 801b43c:	0c09      	lsrs	r1, r1, #16
 801b43e:	18fb      	adds	r3, r7, r3
 801b440:	185b      	adds	r3, r3, r1
 801b442:	0c19      	lsrs	r1, r3, #16
 801b444:	9103      	str	r1, [sp, #12]
 801b446:	9902      	ldr	r1, [sp, #8]
 801b448:	3004      	adds	r0, #4
 801b44a:	42b1      	cmp	r1, r6
 801b44c:	d8e5      	bhi.n	801b41a <__multiply+0x106>
 801b44e:	9905      	ldr	r1, [sp, #20]
 801b450:	5053      	str	r3, [r2, r1]
 801b452:	3504      	adds	r5, #4
 801b454:	3204      	adds	r2, #4
 801b456:	e7a0      	b.n	801b39a <__multiply+0x86>
 801b458:	9b00      	ldr	r3, [sp, #0]
 801b45a:	3b01      	subs	r3, #1
 801b45c:	9300      	str	r3, [sp, #0]
 801b45e:	e79f      	b.n	801b3a0 <__multiply+0x8c>
 801b460:	0801fcc6 	.word	0x0801fcc6
 801b464:	0801fcd7 	.word	0x0801fcd7

0801b468 <__pow5mult>:
 801b468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b46a:	2303      	movs	r3, #3
 801b46c:	0015      	movs	r5, r2
 801b46e:	0007      	movs	r7, r0
 801b470:	000e      	movs	r6, r1
 801b472:	401a      	ands	r2, r3
 801b474:	421d      	tst	r5, r3
 801b476:	d008      	beq.n	801b48a <__pow5mult+0x22>
 801b478:	4925      	ldr	r1, [pc, #148]	@ (801b510 <__pow5mult+0xa8>)
 801b47a:	3a01      	subs	r2, #1
 801b47c:	0092      	lsls	r2, r2, #2
 801b47e:	5852      	ldr	r2, [r2, r1]
 801b480:	2300      	movs	r3, #0
 801b482:	0031      	movs	r1, r6
 801b484:	f7ff fe9a 	bl	801b1bc <__multadd>
 801b488:	0006      	movs	r6, r0
 801b48a:	10ad      	asrs	r5, r5, #2
 801b48c:	d03d      	beq.n	801b50a <__pow5mult+0xa2>
 801b48e:	69fc      	ldr	r4, [r7, #28]
 801b490:	2c00      	cmp	r4, #0
 801b492:	d10f      	bne.n	801b4b4 <__pow5mult+0x4c>
 801b494:	2010      	movs	r0, #16
 801b496:	f7ff fd6d 	bl	801af74 <malloc>
 801b49a:	1e02      	subs	r2, r0, #0
 801b49c:	61f8      	str	r0, [r7, #28]
 801b49e:	d105      	bne.n	801b4ac <__pow5mult+0x44>
 801b4a0:	21b4      	movs	r1, #180	@ 0xb4
 801b4a2:	4b1c      	ldr	r3, [pc, #112]	@ (801b514 <__pow5mult+0xac>)
 801b4a4:	481c      	ldr	r0, [pc, #112]	@ (801b518 <__pow5mult+0xb0>)
 801b4a6:	31ff      	adds	r1, #255	@ 0xff
 801b4a8:	f000 fdfa 	bl	801c0a0 <__assert_func>
 801b4ac:	6044      	str	r4, [r0, #4]
 801b4ae:	6084      	str	r4, [r0, #8]
 801b4b0:	6004      	str	r4, [r0, #0]
 801b4b2:	60c4      	str	r4, [r0, #12]
 801b4b4:	69fb      	ldr	r3, [r7, #28]
 801b4b6:	689c      	ldr	r4, [r3, #8]
 801b4b8:	9301      	str	r3, [sp, #4]
 801b4ba:	2c00      	cmp	r4, #0
 801b4bc:	d108      	bne.n	801b4d0 <__pow5mult+0x68>
 801b4be:	0038      	movs	r0, r7
 801b4c0:	4916      	ldr	r1, [pc, #88]	@ (801b51c <__pow5mult+0xb4>)
 801b4c2:	f7ff ff0f 	bl	801b2e4 <__i2b>
 801b4c6:	9b01      	ldr	r3, [sp, #4]
 801b4c8:	0004      	movs	r4, r0
 801b4ca:	6098      	str	r0, [r3, #8]
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	6003      	str	r3, [r0, #0]
 801b4d0:	2301      	movs	r3, #1
 801b4d2:	421d      	tst	r5, r3
 801b4d4:	d00a      	beq.n	801b4ec <__pow5mult+0x84>
 801b4d6:	0031      	movs	r1, r6
 801b4d8:	0022      	movs	r2, r4
 801b4da:	0038      	movs	r0, r7
 801b4dc:	f7ff ff1a 	bl	801b314 <__multiply>
 801b4e0:	0031      	movs	r1, r6
 801b4e2:	9001      	str	r0, [sp, #4]
 801b4e4:	0038      	movs	r0, r7
 801b4e6:	f7ff fe45 	bl	801b174 <_Bfree>
 801b4ea:	9e01      	ldr	r6, [sp, #4]
 801b4ec:	106d      	asrs	r5, r5, #1
 801b4ee:	d00c      	beq.n	801b50a <__pow5mult+0xa2>
 801b4f0:	6820      	ldr	r0, [r4, #0]
 801b4f2:	2800      	cmp	r0, #0
 801b4f4:	d107      	bne.n	801b506 <__pow5mult+0x9e>
 801b4f6:	0022      	movs	r2, r4
 801b4f8:	0021      	movs	r1, r4
 801b4fa:	0038      	movs	r0, r7
 801b4fc:	f7ff ff0a 	bl	801b314 <__multiply>
 801b500:	2300      	movs	r3, #0
 801b502:	6020      	str	r0, [r4, #0]
 801b504:	6003      	str	r3, [r0, #0]
 801b506:	0004      	movs	r4, r0
 801b508:	e7e2      	b.n	801b4d0 <__pow5mult+0x68>
 801b50a:	0030      	movs	r0, r6
 801b50c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b50e:	46c0      	nop			@ (mov r8, r8)
 801b510:	0801ff0c 	.word	0x0801ff0c
 801b514:	0801fc57 	.word	0x0801fc57
 801b518:	0801fcd7 	.word	0x0801fcd7
 801b51c:	00000271 	.word	0x00000271

0801b520 <__lshift>:
 801b520:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b522:	000c      	movs	r4, r1
 801b524:	0016      	movs	r6, r2
 801b526:	6923      	ldr	r3, [r4, #16]
 801b528:	1157      	asrs	r7, r2, #5
 801b52a:	b085      	sub	sp, #20
 801b52c:	18fb      	adds	r3, r7, r3
 801b52e:	9301      	str	r3, [sp, #4]
 801b530:	3301      	adds	r3, #1
 801b532:	9300      	str	r3, [sp, #0]
 801b534:	6849      	ldr	r1, [r1, #4]
 801b536:	68a3      	ldr	r3, [r4, #8]
 801b538:	9002      	str	r0, [sp, #8]
 801b53a:	9a00      	ldr	r2, [sp, #0]
 801b53c:	4293      	cmp	r3, r2
 801b53e:	db10      	blt.n	801b562 <__lshift+0x42>
 801b540:	9802      	ldr	r0, [sp, #8]
 801b542:	f7ff fdd3 	bl	801b0ec <_Balloc>
 801b546:	2300      	movs	r3, #0
 801b548:	0001      	movs	r1, r0
 801b54a:	0005      	movs	r5, r0
 801b54c:	001a      	movs	r2, r3
 801b54e:	3114      	adds	r1, #20
 801b550:	4298      	cmp	r0, r3
 801b552:	d10c      	bne.n	801b56e <__lshift+0x4e>
 801b554:	21ef      	movs	r1, #239	@ 0xef
 801b556:	002a      	movs	r2, r5
 801b558:	4b25      	ldr	r3, [pc, #148]	@ (801b5f0 <__lshift+0xd0>)
 801b55a:	4826      	ldr	r0, [pc, #152]	@ (801b5f4 <__lshift+0xd4>)
 801b55c:	0049      	lsls	r1, r1, #1
 801b55e:	f000 fd9f 	bl	801c0a0 <__assert_func>
 801b562:	3101      	adds	r1, #1
 801b564:	005b      	lsls	r3, r3, #1
 801b566:	e7e8      	b.n	801b53a <__lshift+0x1a>
 801b568:	0098      	lsls	r0, r3, #2
 801b56a:	500a      	str	r2, [r1, r0]
 801b56c:	3301      	adds	r3, #1
 801b56e:	42bb      	cmp	r3, r7
 801b570:	dbfa      	blt.n	801b568 <__lshift+0x48>
 801b572:	43fb      	mvns	r3, r7
 801b574:	17db      	asrs	r3, r3, #31
 801b576:	401f      	ands	r7, r3
 801b578:	00bf      	lsls	r7, r7, #2
 801b57a:	0023      	movs	r3, r4
 801b57c:	201f      	movs	r0, #31
 801b57e:	19c9      	adds	r1, r1, r7
 801b580:	0037      	movs	r7, r6
 801b582:	6922      	ldr	r2, [r4, #16]
 801b584:	3314      	adds	r3, #20
 801b586:	0092      	lsls	r2, r2, #2
 801b588:	189a      	adds	r2, r3, r2
 801b58a:	4007      	ands	r7, r0
 801b58c:	4206      	tst	r6, r0
 801b58e:	d029      	beq.n	801b5e4 <__lshift+0xc4>
 801b590:	3001      	adds	r0, #1
 801b592:	1bc0      	subs	r0, r0, r7
 801b594:	9003      	str	r0, [sp, #12]
 801b596:	468c      	mov	ip, r1
 801b598:	2000      	movs	r0, #0
 801b59a:	681e      	ldr	r6, [r3, #0]
 801b59c:	40be      	lsls	r6, r7
 801b59e:	4306      	orrs	r6, r0
 801b5a0:	4660      	mov	r0, ip
 801b5a2:	c040      	stmia	r0!, {r6}
 801b5a4:	4684      	mov	ip, r0
 801b5a6:	9e03      	ldr	r6, [sp, #12]
 801b5a8:	cb01      	ldmia	r3!, {r0}
 801b5aa:	40f0      	lsrs	r0, r6
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d8f4      	bhi.n	801b59a <__lshift+0x7a>
 801b5b0:	0026      	movs	r6, r4
 801b5b2:	3615      	adds	r6, #21
 801b5b4:	2304      	movs	r3, #4
 801b5b6:	42b2      	cmp	r2, r6
 801b5b8:	d304      	bcc.n	801b5c4 <__lshift+0xa4>
 801b5ba:	1b13      	subs	r3, r2, r4
 801b5bc:	3b15      	subs	r3, #21
 801b5be:	089b      	lsrs	r3, r3, #2
 801b5c0:	3301      	adds	r3, #1
 801b5c2:	009b      	lsls	r3, r3, #2
 801b5c4:	50c8      	str	r0, [r1, r3]
 801b5c6:	2800      	cmp	r0, #0
 801b5c8:	d002      	beq.n	801b5d0 <__lshift+0xb0>
 801b5ca:	9b01      	ldr	r3, [sp, #4]
 801b5cc:	3302      	adds	r3, #2
 801b5ce:	9300      	str	r3, [sp, #0]
 801b5d0:	9b00      	ldr	r3, [sp, #0]
 801b5d2:	9802      	ldr	r0, [sp, #8]
 801b5d4:	3b01      	subs	r3, #1
 801b5d6:	0021      	movs	r1, r4
 801b5d8:	612b      	str	r3, [r5, #16]
 801b5da:	f7ff fdcb 	bl	801b174 <_Bfree>
 801b5de:	0028      	movs	r0, r5
 801b5e0:	b005      	add	sp, #20
 801b5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5e4:	cb01      	ldmia	r3!, {r0}
 801b5e6:	c101      	stmia	r1!, {r0}
 801b5e8:	429a      	cmp	r2, r3
 801b5ea:	d8fb      	bhi.n	801b5e4 <__lshift+0xc4>
 801b5ec:	e7f0      	b.n	801b5d0 <__lshift+0xb0>
 801b5ee:	46c0      	nop			@ (mov r8, r8)
 801b5f0:	0801fcc6 	.word	0x0801fcc6
 801b5f4:	0801fcd7 	.word	0x0801fcd7

0801b5f8 <__mcmp>:
 801b5f8:	b530      	push	{r4, r5, lr}
 801b5fa:	690b      	ldr	r3, [r1, #16]
 801b5fc:	6904      	ldr	r4, [r0, #16]
 801b5fe:	0002      	movs	r2, r0
 801b600:	1ae0      	subs	r0, r4, r3
 801b602:	429c      	cmp	r4, r3
 801b604:	d10f      	bne.n	801b626 <__mcmp+0x2e>
 801b606:	3214      	adds	r2, #20
 801b608:	009b      	lsls	r3, r3, #2
 801b60a:	3114      	adds	r1, #20
 801b60c:	0014      	movs	r4, r2
 801b60e:	18c9      	adds	r1, r1, r3
 801b610:	18d2      	adds	r2, r2, r3
 801b612:	3a04      	subs	r2, #4
 801b614:	3904      	subs	r1, #4
 801b616:	6815      	ldr	r5, [r2, #0]
 801b618:	680b      	ldr	r3, [r1, #0]
 801b61a:	429d      	cmp	r5, r3
 801b61c:	d004      	beq.n	801b628 <__mcmp+0x30>
 801b61e:	2001      	movs	r0, #1
 801b620:	429d      	cmp	r5, r3
 801b622:	d200      	bcs.n	801b626 <__mcmp+0x2e>
 801b624:	3802      	subs	r0, #2
 801b626:	bd30      	pop	{r4, r5, pc}
 801b628:	4294      	cmp	r4, r2
 801b62a:	d3f2      	bcc.n	801b612 <__mcmp+0x1a>
 801b62c:	e7fb      	b.n	801b626 <__mcmp+0x2e>
	...

0801b630 <__mdiff>:
 801b630:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b632:	000c      	movs	r4, r1
 801b634:	b087      	sub	sp, #28
 801b636:	9000      	str	r0, [sp, #0]
 801b638:	0011      	movs	r1, r2
 801b63a:	0020      	movs	r0, r4
 801b63c:	0017      	movs	r7, r2
 801b63e:	f7ff ffdb 	bl	801b5f8 <__mcmp>
 801b642:	1e05      	subs	r5, r0, #0
 801b644:	d110      	bne.n	801b668 <__mdiff+0x38>
 801b646:	0001      	movs	r1, r0
 801b648:	9800      	ldr	r0, [sp, #0]
 801b64a:	f7ff fd4f 	bl	801b0ec <_Balloc>
 801b64e:	1e02      	subs	r2, r0, #0
 801b650:	d104      	bne.n	801b65c <__mdiff+0x2c>
 801b652:	4b40      	ldr	r3, [pc, #256]	@ (801b754 <__mdiff+0x124>)
 801b654:	4840      	ldr	r0, [pc, #256]	@ (801b758 <__mdiff+0x128>)
 801b656:	4941      	ldr	r1, [pc, #260]	@ (801b75c <__mdiff+0x12c>)
 801b658:	f000 fd22 	bl	801c0a0 <__assert_func>
 801b65c:	2301      	movs	r3, #1
 801b65e:	6145      	str	r5, [r0, #20]
 801b660:	6103      	str	r3, [r0, #16]
 801b662:	0010      	movs	r0, r2
 801b664:	b007      	add	sp, #28
 801b666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b668:	2600      	movs	r6, #0
 801b66a:	42b0      	cmp	r0, r6
 801b66c:	da03      	bge.n	801b676 <__mdiff+0x46>
 801b66e:	0023      	movs	r3, r4
 801b670:	003c      	movs	r4, r7
 801b672:	001f      	movs	r7, r3
 801b674:	3601      	adds	r6, #1
 801b676:	6861      	ldr	r1, [r4, #4]
 801b678:	9800      	ldr	r0, [sp, #0]
 801b67a:	f7ff fd37 	bl	801b0ec <_Balloc>
 801b67e:	1e02      	subs	r2, r0, #0
 801b680:	d103      	bne.n	801b68a <__mdiff+0x5a>
 801b682:	4b34      	ldr	r3, [pc, #208]	@ (801b754 <__mdiff+0x124>)
 801b684:	4834      	ldr	r0, [pc, #208]	@ (801b758 <__mdiff+0x128>)
 801b686:	4936      	ldr	r1, [pc, #216]	@ (801b760 <__mdiff+0x130>)
 801b688:	e7e6      	b.n	801b658 <__mdiff+0x28>
 801b68a:	6923      	ldr	r3, [r4, #16]
 801b68c:	3414      	adds	r4, #20
 801b68e:	9300      	str	r3, [sp, #0]
 801b690:	009b      	lsls	r3, r3, #2
 801b692:	18e3      	adds	r3, r4, r3
 801b694:	0021      	movs	r1, r4
 801b696:	9401      	str	r4, [sp, #4]
 801b698:	003c      	movs	r4, r7
 801b69a:	9302      	str	r3, [sp, #8]
 801b69c:	693b      	ldr	r3, [r7, #16]
 801b69e:	3414      	adds	r4, #20
 801b6a0:	009b      	lsls	r3, r3, #2
 801b6a2:	18e3      	adds	r3, r4, r3
 801b6a4:	9303      	str	r3, [sp, #12]
 801b6a6:	0003      	movs	r3, r0
 801b6a8:	60c6      	str	r6, [r0, #12]
 801b6aa:	468c      	mov	ip, r1
 801b6ac:	2000      	movs	r0, #0
 801b6ae:	3314      	adds	r3, #20
 801b6b0:	9304      	str	r3, [sp, #16]
 801b6b2:	9305      	str	r3, [sp, #20]
 801b6b4:	4663      	mov	r3, ip
 801b6b6:	cb20      	ldmia	r3!, {r5}
 801b6b8:	b2a9      	uxth	r1, r5
 801b6ba:	000e      	movs	r6, r1
 801b6bc:	469c      	mov	ip, r3
 801b6be:	cc08      	ldmia	r4!, {r3}
 801b6c0:	0c2d      	lsrs	r5, r5, #16
 801b6c2:	b299      	uxth	r1, r3
 801b6c4:	1a71      	subs	r1, r6, r1
 801b6c6:	1809      	adds	r1, r1, r0
 801b6c8:	0c1b      	lsrs	r3, r3, #16
 801b6ca:	1408      	asrs	r0, r1, #16
 801b6cc:	1aeb      	subs	r3, r5, r3
 801b6ce:	181b      	adds	r3, r3, r0
 801b6d0:	1418      	asrs	r0, r3, #16
 801b6d2:	b289      	uxth	r1, r1
 801b6d4:	041b      	lsls	r3, r3, #16
 801b6d6:	4319      	orrs	r1, r3
 801b6d8:	9b05      	ldr	r3, [sp, #20]
 801b6da:	c302      	stmia	r3!, {r1}
 801b6dc:	9305      	str	r3, [sp, #20]
 801b6de:	9b03      	ldr	r3, [sp, #12]
 801b6e0:	42a3      	cmp	r3, r4
 801b6e2:	d8e7      	bhi.n	801b6b4 <__mdiff+0x84>
 801b6e4:	0039      	movs	r1, r7
 801b6e6:	9c03      	ldr	r4, [sp, #12]
 801b6e8:	3115      	adds	r1, #21
 801b6ea:	2304      	movs	r3, #4
 801b6ec:	428c      	cmp	r4, r1
 801b6ee:	d304      	bcc.n	801b6fa <__mdiff+0xca>
 801b6f0:	1be3      	subs	r3, r4, r7
 801b6f2:	3b15      	subs	r3, #21
 801b6f4:	089b      	lsrs	r3, r3, #2
 801b6f6:	3301      	adds	r3, #1
 801b6f8:	009b      	lsls	r3, r3, #2
 801b6fa:	9901      	ldr	r1, [sp, #4]
 801b6fc:	18cd      	adds	r5, r1, r3
 801b6fe:	9904      	ldr	r1, [sp, #16]
 801b700:	002e      	movs	r6, r5
 801b702:	18cb      	adds	r3, r1, r3
 801b704:	001f      	movs	r7, r3
 801b706:	9902      	ldr	r1, [sp, #8]
 801b708:	428e      	cmp	r6, r1
 801b70a:	d311      	bcc.n	801b730 <__mdiff+0x100>
 801b70c:	9c02      	ldr	r4, [sp, #8]
 801b70e:	1ee9      	subs	r1, r5, #3
 801b710:	2000      	movs	r0, #0
 801b712:	428c      	cmp	r4, r1
 801b714:	d304      	bcc.n	801b720 <__mdiff+0xf0>
 801b716:	0021      	movs	r1, r4
 801b718:	3103      	adds	r1, #3
 801b71a:	1b49      	subs	r1, r1, r5
 801b71c:	0889      	lsrs	r1, r1, #2
 801b71e:	0088      	lsls	r0, r1, #2
 801b720:	181b      	adds	r3, r3, r0
 801b722:	3b04      	subs	r3, #4
 801b724:	6819      	ldr	r1, [r3, #0]
 801b726:	2900      	cmp	r1, #0
 801b728:	d010      	beq.n	801b74c <__mdiff+0x11c>
 801b72a:	9b00      	ldr	r3, [sp, #0]
 801b72c:	6113      	str	r3, [r2, #16]
 801b72e:	e798      	b.n	801b662 <__mdiff+0x32>
 801b730:	4684      	mov	ip, r0
 801b732:	ce02      	ldmia	r6!, {r1}
 801b734:	b288      	uxth	r0, r1
 801b736:	4460      	add	r0, ip
 801b738:	1400      	asrs	r0, r0, #16
 801b73a:	0c0c      	lsrs	r4, r1, #16
 801b73c:	1904      	adds	r4, r0, r4
 801b73e:	4461      	add	r1, ip
 801b740:	1420      	asrs	r0, r4, #16
 801b742:	b289      	uxth	r1, r1
 801b744:	0424      	lsls	r4, r4, #16
 801b746:	4321      	orrs	r1, r4
 801b748:	c702      	stmia	r7!, {r1}
 801b74a:	e7dc      	b.n	801b706 <__mdiff+0xd6>
 801b74c:	9900      	ldr	r1, [sp, #0]
 801b74e:	3901      	subs	r1, #1
 801b750:	9100      	str	r1, [sp, #0]
 801b752:	e7e6      	b.n	801b722 <__mdiff+0xf2>
 801b754:	0801fcc6 	.word	0x0801fcc6
 801b758:	0801fcd7 	.word	0x0801fcd7
 801b75c:	00000237 	.word	0x00000237
 801b760:	00000245 	.word	0x00000245

0801b764 <__d2b>:
 801b764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b766:	2101      	movs	r1, #1
 801b768:	0016      	movs	r6, r2
 801b76a:	001f      	movs	r7, r3
 801b76c:	f7ff fcbe 	bl	801b0ec <_Balloc>
 801b770:	1e04      	subs	r4, r0, #0
 801b772:	d105      	bne.n	801b780 <__d2b+0x1c>
 801b774:	0022      	movs	r2, r4
 801b776:	4b25      	ldr	r3, [pc, #148]	@ (801b80c <__d2b+0xa8>)
 801b778:	4825      	ldr	r0, [pc, #148]	@ (801b810 <__d2b+0xac>)
 801b77a:	4926      	ldr	r1, [pc, #152]	@ (801b814 <__d2b+0xb0>)
 801b77c:	f000 fc90 	bl	801c0a0 <__assert_func>
 801b780:	033b      	lsls	r3, r7, #12
 801b782:	007d      	lsls	r5, r7, #1
 801b784:	0b1b      	lsrs	r3, r3, #12
 801b786:	0d6d      	lsrs	r5, r5, #21
 801b788:	d002      	beq.n	801b790 <__d2b+0x2c>
 801b78a:	2280      	movs	r2, #128	@ 0x80
 801b78c:	0352      	lsls	r2, r2, #13
 801b78e:	4313      	orrs	r3, r2
 801b790:	9301      	str	r3, [sp, #4]
 801b792:	2e00      	cmp	r6, #0
 801b794:	d025      	beq.n	801b7e2 <__d2b+0x7e>
 801b796:	4668      	mov	r0, sp
 801b798:	9600      	str	r6, [sp, #0]
 801b79a:	f7ff fd74 	bl	801b286 <__lo0bits>
 801b79e:	9b01      	ldr	r3, [sp, #4]
 801b7a0:	9900      	ldr	r1, [sp, #0]
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	d01b      	beq.n	801b7de <__d2b+0x7a>
 801b7a6:	2220      	movs	r2, #32
 801b7a8:	001e      	movs	r6, r3
 801b7aa:	1a12      	subs	r2, r2, r0
 801b7ac:	4096      	lsls	r6, r2
 801b7ae:	0032      	movs	r2, r6
 801b7b0:	40c3      	lsrs	r3, r0
 801b7b2:	430a      	orrs	r2, r1
 801b7b4:	6162      	str	r2, [r4, #20]
 801b7b6:	9301      	str	r3, [sp, #4]
 801b7b8:	9e01      	ldr	r6, [sp, #4]
 801b7ba:	61a6      	str	r6, [r4, #24]
 801b7bc:	1e73      	subs	r3, r6, #1
 801b7be:	419e      	sbcs	r6, r3
 801b7c0:	3601      	adds	r6, #1
 801b7c2:	6126      	str	r6, [r4, #16]
 801b7c4:	2d00      	cmp	r5, #0
 801b7c6:	d014      	beq.n	801b7f2 <__d2b+0x8e>
 801b7c8:	2635      	movs	r6, #53	@ 0x35
 801b7ca:	4b13      	ldr	r3, [pc, #76]	@ (801b818 <__d2b+0xb4>)
 801b7cc:	18ed      	adds	r5, r5, r3
 801b7ce:	9b08      	ldr	r3, [sp, #32]
 801b7d0:	182d      	adds	r5, r5, r0
 801b7d2:	601d      	str	r5, [r3, #0]
 801b7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7d6:	1a36      	subs	r6, r6, r0
 801b7d8:	601e      	str	r6, [r3, #0]
 801b7da:	0020      	movs	r0, r4
 801b7dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b7de:	6161      	str	r1, [r4, #20]
 801b7e0:	e7ea      	b.n	801b7b8 <__d2b+0x54>
 801b7e2:	a801      	add	r0, sp, #4
 801b7e4:	f7ff fd4f 	bl	801b286 <__lo0bits>
 801b7e8:	9b01      	ldr	r3, [sp, #4]
 801b7ea:	2601      	movs	r6, #1
 801b7ec:	6163      	str	r3, [r4, #20]
 801b7ee:	3020      	adds	r0, #32
 801b7f0:	e7e7      	b.n	801b7c2 <__d2b+0x5e>
 801b7f2:	4b0a      	ldr	r3, [pc, #40]	@ (801b81c <__d2b+0xb8>)
 801b7f4:	18c0      	adds	r0, r0, r3
 801b7f6:	9b08      	ldr	r3, [sp, #32]
 801b7f8:	6018      	str	r0, [r3, #0]
 801b7fa:	4b09      	ldr	r3, [pc, #36]	@ (801b820 <__d2b+0xbc>)
 801b7fc:	18f3      	adds	r3, r6, r3
 801b7fe:	009b      	lsls	r3, r3, #2
 801b800:	18e3      	adds	r3, r4, r3
 801b802:	6958      	ldr	r0, [r3, #20]
 801b804:	f7ff fd1e 	bl	801b244 <__hi0bits>
 801b808:	0176      	lsls	r6, r6, #5
 801b80a:	e7e3      	b.n	801b7d4 <__d2b+0x70>
 801b80c:	0801fcc6 	.word	0x0801fcc6
 801b810:	0801fcd7 	.word	0x0801fcd7
 801b814:	0000030f 	.word	0x0000030f
 801b818:	fffffbcd 	.word	0xfffffbcd
 801b81c:	fffffbce 	.word	0xfffffbce
 801b820:	3fffffff 	.word	0x3fffffff

0801b824 <__ssputs_r>:
 801b824:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b826:	688e      	ldr	r6, [r1, #8]
 801b828:	b085      	sub	sp, #20
 801b82a:	001f      	movs	r7, r3
 801b82c:	000c      	movs	r4, r1
 801b82e:	680b      	ldr	r3, [r1, #0]
 801b830:	9002      	str	r0, [sp, #8]
 801b832:	9203      	str	r2, [sp, #12]
 801b834:	42be      	cmp	r6, r7
 801b836:	d830      	bhi.n	801b89a <__ssputs_r+0x76>
 801b838:	210c      	movs	r1, #12
 801b83a:	5e62      	ldrsh	r2, [r4, r1]
 801b83c:	2190      	movs	r1, #144	@ 0x90
 801b83e:	00c9      	lsls	r1, r1, #3
 801b840:	420a      	tst	r2, r1
 801b842:	d028      	beq.n	801b896 <__ssputs_r+0x72>
 801b844:	2003      	movs	r0, #3
 801b846:	6921      	ldr	r1, [r4, #16]
 801b848:	1a5b      	subs	r3, r3, r1
 801b84a:	9301      	str	r3, [sp, #4]
 801b84c:	6963      	ldr	r3, [r4, #20]
 801b84e:	4343      	muls	r3, r0
 801b850:	9801      	ldr	r0, [sp, #4]
 801b852:	0fdd      	lsrs	r5, r3, #31
 801b854:	18ed      	adds	r5, r5, r3
 801b856:	1c7b      	adds	r3, r7, #1
 801b858:	181b      	adds	r3, r3, r0
 801b85a:	106d      	asrs	r5, r5, #1
 801b85c:	42ab      	cmp	r3, r5
 801b85e:	d900      	bls.n	801b862 <__ssputs_r+0x3e>
 801b860:	001d      	movs	r5, r3
 801b862:	0552      	lsls	r2, r2, #21
 801b864:	d528      	bpl.n	801b8b8 <__ssputs_r+0x94>
 801b866:	0029      	movs	r1, r5
 801b868:	9802      	ldr	r0, [sp, #8]
 801b86a:	f7ff fbaf 	bl	801afcc <_malloc_r>
 801b86e:	1e06      	subs	r6, r0, #0
 801b870:	d02c      	beq.n	801b8cc <__ssputs_r+0xa8>
 801b872:	9a01      	ldr	r2, [sp, #4]
 801b874:	6921      	ldr	r1, [r4, #16]
 801b876:	f7fe fcb5 	bl	801a1e4 <memcpy>
 801b87a:	89a2      	ldrh	r2, [r4, #12]
 801b87c:	4b18      	ldr	r3, [pc, #96]	@ (801b8e0 <__ssputs_r+0xbc>)
 801b87e:	401a      	ands	r2, r3
 801b880:	2380      	movs	r3, #128	@ 0x80
 801b882:	4313      	orrs	r3, r2
 801b884:	81a3      	strh	r3, [r4, #12]
 801b886:	9b01      	ldr	r3, [sp, #4]
 801b888:	6126      	str	r6, [r4, #16]
 801b88a:	18f6      	adds	r6, r6, r3
 801b88c:	6026      	str	r6, [r4, #0]
 801b88e:	003e      	movs	r6, r7
 801b890:	6165      	str	r5, [r4, #20]
 801b892:	1aed      	subs	r5, r5, r3
 801b894:	60a5      	str	r5, [r4, #8]
 801b896:	42be      	cmp	r6, r7
 801b898:	d900      	bls.n	801b89c <__ssputs_r+0x78>
 801b89a:	003e      	movs	r6, r7
 801b89c:	0032      	movs	r2, r6
 801b89e:	9903      	ldr	r1, [sp, #12]
 801b8a0:	6820      	ldr	r0, [r4, #0]
 801b8a2:	f000 fbb4 	bl	801c00e <memmove>
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	68a3      	ldr	r3, [r4, #8]
 801b8aa:	1b9b      	subs	r3, r3, r6
 801b8ac:	60a3      	str	r3, [r4, #8]
 801b8ae:	6823      	ldr	r3, [r4, #0]
 801b8b0:	199b      	adds	r3, r3, r6
 801b8b2:	6023      	str	r3, [r4, #0]
 801b8b4:	b005      	add	sp, #20
 801b8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8b8:	002a      	movs	r2, r5
 801b8ba:	9802      	ldr	r0, [sp, #8]
 801b8bc:	f000 fc4d 	bl	801c15a <_realloc_r>
 801b8c0:	1e06      	subs	r6, r0, #0
 801b8c2:	d1e0      	bne.n	801b886 <__ssputs_r+0x62>
 801b8c4:	6921      	ldr	r1, [r4, #16]
 801b8c6:	9802      	ldr	r0, [sp, #8]
 801b8c8:	f7ff fb0a 	bl	801aee0 <_free_r>
 801b8cc:	230c      	movs	r3, #12
 801b8ce:	2001      	movs	r0, #1
 801b8d0:	9a02      	ldr	r2, [sp, #8]
 801b8d2:	4240      	negs	r0, r0
 801b8d4:	6013      	str	r3, [r2, #0]
 801b8d6:	89a2      	ldrh	r2, [r4, #12]
 801b8d8:	3334      	adds	r3, #52	@ 0x34
 801b8da:	4313      	orrs	r3, r2
 801b8dc:	81a3      	strh	r3, [r4, #12]
 801b8de:	e7e9      	b.n	801b8b4 <__ssputs_r+0x90>
 801b8e0:	fffffb7f 	.word	0xfffffb7f

0801b8e4 <_svfiprintf_r>:
 801b8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8e6:	b0a1      	sub	sp, #132	@ 0x84
 801b8e8:	9003      	str	r0, [sp, #12]
 801b8ea:	001d      	movs	r5, r3
 801b8ec:	898b      	ldrh	r3, [r1, #12]
 801b8ee:	000f      	movs	r7, r1
 801b8f0:	0016      	movs	r6, r2
 801b8f2:	061b      	lsls	r3, r3, #24
 801b8f4:	d511      	bpl.n	801b91a <_svfiprintf_r+0x36>
 801b8f6:	690b      	ldr	r3, [r1, #16]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d10e      	bne.n	801b91a <_svfiprintf_r+0x36>
 801b8fc:	2140      	movs	r1, #64	@ 0x40
 801b8fe:	f7ff fb65 	bl	801afcc <_malloc_r>
 801b902:	6038      	str	r0, [r7, #0]
 801b904:	6138      	str	r0, [r7, #16]
 801b906:	2800      	cmp	r0, #0
 801b908:	d105      	bne.n	801b916 <_svfiprintf_r+0x32>
 801b90a:	230c      	movs	r3, #12
 801b90c:	9a03      	ldr	r2, [sp, #12]
 801b90e:	6013      	str	r3, [r2, #0]
 801b910:	2001      	movs	r0, #1
 801b912:	4240      	negs	r0, r0
 801b914:	e0cf      	b.n	801bab6 <_svfiprintf_r+0x1d2>
 801b916:	2340      	movs	r3, #64	@ 0x40
 801b918:	617b      	str	r3, [r7, #20]
 801b91a:	2300      	movs	r3, #0
 801b91c:	ac08      	add	r4, sp, #32
 801b91e:	6163      	str	r3, [r4, #20]
 801b920:	3320      	adds	r3, #32
 801b922:	7663      	strb	r3, [r4, #25]
 801b924:	3310      	adds	r3, #16
 801b926:	76a3      	strb	r3, [r4, #26]
 801b928:	9507      	str	r5, [sp, #28]
 801b92a:	0035      	movs	r5, r6
 801b92c:	782b      	ldrb	r3, [r5, #0]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d001      	beq.n	801b936 <_svfiprintf_r+0x52>
 801b932:	2b25      	cmp	r3, #37	@ 0x25
 801b934:	d148      	bne.n	801b9c8 <_svfiprintf_r+0xe4>
 801b936:	1bab      	subs	r3, r5, r6
 801b938:	9305      	str	r3, [sp, #20]
 801b93a:	42b5      	cmp	r5, r6
 801b93c:	d00b      	beq.n	801b956 <_svfiprintf_r+0x72>
 801b93e:	0032      	movs	r2, r6
 801b940:	0039      	movs	r1, r7
 801b942:	9803      	ldr	r0, [sp, #12]
 801b944:	f7ff ff6e 	bl	801b824 <__ssputs_r>
 801b948:	3001      	adds	r0, #1
 801b94a:	d100      	bne.n	801b94e <_svfiprintf_r+0x6a>
 801b94c:	e0ae      	b.n	801baac <_svfiprintf_r+0x1c8>
 801b94e:	6963      	ldr	r3, [r4, #20]
 801b950:	9a05      	ldr	r2, [sp, #20]
 801b952:	189b      	adds	r3, r3, r2
 801b954:	6163      	str	r3, [r4, #20]
 801b956:	782b      	ldrb	r3, [r5, #0]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d100      	bne.n	801b95e <_svfiprintf_r+0x7a>
 801b95c:	e0a6      	b.n	801baac <_svfiprintf_r+0x1c8>
 801b95e:	2201      	movs	r2, #1
 801b960:	2300      	movs	r3, #0
 801b962:	4252      	negs	r2, r2
 801b964:	6062      	str	r2, [r4, #4]
 801b966:	a904      	add	r1, sp, #16
 801b968:	3254      	adds	r2, #84	@ 0x54
 801b96a:	1852      	adds	r2, r2, r1
 801b96c:	1c6e      	adds	r6, r5, #1
 801b96e:	6023      	str	r3, [r4, #0]
 801b970:	60e3      	str	r3, [r4, #12]
 801b972:	60a3      	str	r3, [r4, #8]
 801b974:	7013      	strb	r3, [r2, #0]
 801b976:	65a3      	str	r3, [r4, #88]	@ 0x58
 801b978:	4b54      	ldr	r3, [pc, #336]	@ (801bacc <_svfiprintf_r+0x1e8>)
 801b97a:	2205      	movs	r2, #5
 801b97c:	0018      	movs	r0, r3
 801b97e:	7831      	ldrb	r1, [r6, #0]
 801b980:	9305      	str	r3, [sp, #20]
 801b982:	f7fe fc24 	bl	801a1ce <memchr>
 801b986:	1c75      	adds	r5, r6, #1
 801b988:	2800      	cmp	r0, #0
 801b98a:	d11f      	bne.n	801b9cc <_svfiprintf_r+0xe8>
 801b98c:	6822      	ldr	r2, [r4, #0]
 801b98e:	06d3      	lsls	r3, r2, #27
 801b990:	d504      	bpl.n	801b99c <_svfiprintf_r+0xb8>
 801b992:	2353      	movs	r3, #83	@ 0x53
 801b994:	a904      	add	r1, sp, #16
 801b996:	185b      	adds	r3, r3, r1
 801b998:	2120      	movs	r1, #32
 801b99a:	7019      	strb	r1, [r3, #0]
 801b99c:	0713      	lsls	r3, r2, #28
 801b99e:	d504      	bpl.n	801b9aa <_svfiprintf_r+0xc6>
 801b9a0:	2353      	movs	r3, #83	@ 0x53
 801b9a2:	a904      	add	r1, sp, #16
 801b9a4:	185b      	adds	r3, r3, r1
 801b9a6:	212b      	movs	r1, #43	@ 0x2b
 801b9a8:	7019      	strb	r1, [r3, #0]
 801b9aa:	7833      	ldrb	r3, [r6, #0]
 801b9ac:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9ae:	d016      	beq.n	801b9de <_svfiprintf_r+0xfa>
 801b9b0:	0035      	movs	r5, r6
 801b9b2:	2100      	movs	r1, #0
 801b9b4:	200a      	movs	r0, #10
 801b9b6:	68e3      	ldr	r3, [r4, #12]
 801b9b8:	782a      	ldrb	r2, [r5, #0]
 801b9ba:	1c6e      	adds	r6, r5, #1
 801b9bc:	3a30      	subs	r2, #48	@ 0x30
 801b9be:	2a09      	cmp	r2, #9
 801b9c0:	d950      	bls.n	801ba64 <_svfiprintf_r+0x180>
 801b9c2:	2900      	cmp	r1, #0
 801b9c4:	d111      	bne.n	801b9ea <_svfiprintf_r+0x106>
 801b9c6:	e017      	b.n	801b9f8 <_svfiprintf_r+0x114>
 801b9c8:	3501      	adds	r5, #1
 801b9ca:	e7af      	b.n	801b92c <_svfiprintf_r+0x48>
 801b9cc:	9b05      	ldr	r3, [sp, #20]
 801b9ce:	6822      	ldr	r2, [r4, #0]
 801b9d0:	1ac0      	subs	r0, r0, r3
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	4083      	lsls	r3, r0
 801b9d6:	4313      	orrs	r3, r2
 801b9d8:	002e      	movs	r6, r5
 801b9da:	6023      	str	r3, [r4, #0]
 801b9dc:	e7cc      	b.n	801b978 <_svfiprintf_r+0x94>
 801b9de:	9b07      	ldr	r3, [sp, #28]
 801b9e0:	1d19      	adds	r1, r3, #4
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	9107      	str	r1, [sp, #28]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	db01      	blt.n	801b9ee <_svfiprintf_r+0x10a>
 801b9ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b9ec:	e004      	b.n	801b9f8 <_svfiprintf_r+0x114>
 801b9ee:	425b      	negs	r3, r3
 801b9f0:	60e3      	str	r3, [r4, #12]
 801b9f2:	2302      	movs	r3, #2
 801b9f4:	4313      	orrs	r3, r2
 801b9f6:	6023      	str	r3, [r4, #0]
 801b9f8:	782b      	ldrb	r3, [r5, #0]
 801b9fa:	2b2e      	cmp	r3, #46	@ 0x2e
 801b9fc:	d10c      	bne.n	801ba18 <_svfiprintf_r+0x134>
 801b9fe:	786b      	ldrb	r3, [r5, #1]
 801ba00:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba02:	d134      	bne.n	801ba6e <_svfiprintf_r+0x18a>
 801ba04:	9b07      	ldr	r3, [sp, #28]
 801ba06:	3502      	adds	r5, #2
 801ba08:	1d1a      	adds	r2, r3, #4
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	9207      	str	r2, [sp, #28]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	da01      	bge.n	801ba16 <_svfiprintf_r+0x132>
 801ba12:	2301      	movs	r3, #1
 801ba14:	425b      	negs	r3, r3
 801ba16:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba18:	4e2d      	ldr	r6, [pc, #180]	@ (801bad0 <_svfiprintf_r+0x1ec>)
 801ba1a:	2203      	movs	r2, #3
 801ba1c:	0030      	movs	r0, r6
 801ba1e:	7829      	ldrb	r1, [r5, #0]
 801ba20:	f7fe fbd5 	bl	801a1ce <memchr>
 801ba24:	2800      	cmp	r0, #0
 801ba26:	d006      	beq.n	801ba36 <_svfiprintf_r+0x152>
 801ba28:	2340      	movs	r3, #64	@ 0x40
 801ba2a:	1b80      	subs	r0, r0, r6
 801ba2c:	4083      	lsls	r3, r0
 801ba2e:	6822      	ldr	r2, [r4, #0]
 801ba30:	3501      	adds	r5, #1
 801ba32:	4313      	orrs	r3, r2
 801ba34:	6023      	str	r3, [r4, #0]
 801ba36:	7829      	ldrb	r1, [r5, #0]
 801ba38:	2206      	movs	r2, #6
 801ba3a:	4826      	ldr	r0, [pc, #152]	@ (801bad4 <_svfiprintf_r+0x1f0>)
 801ba3c:	1c6e      	adds	r6, r5, #1
 801ba3e:	7621      	strb	r1, [r4, #24]
 801ba40:	f7fe fbc5 	bl	801a1ce <memchr>
 801ba44:	2800      	cmp	r0, #0
 801ba46:	d038      	beq.n	801baba <_svfiprintf_r+0x1d6>
 801ba48:	4b23      	ldr	r3, [pc, #140]	@ (801bad8 <_svfiprintf_r+0x1f4>)
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d122      	bne.n	801ba94 <_svfiprintf_r+0x1b0>
 801ba4e:	2207      	movs	r2, #7
 801ba50:	9b07      	ldr	r3, [sp, #28]
 801ba52:	3307      	adds	r3, #7
 801ba54:	4393      	bics	r3, r2
 801ba56:	3308      	adds	r3, #8
 801ba58:	9307      	str	r3, [sp, #28]
 801ba5a:	6963      	ldr	r3, [r4, #20]
 801ba5c:	9a04      	ldr	r2, [sp, #16]
 801ba5e:	189b      	adds	r3, r3, r2
 801ba60:	6163      	str	r3, [r4, #20]
 801ba62:	e762      	b.n	801b92a <_svfiprintf_r+0x46>
 801ba64:	4343      	muls	r3, r0
 801ba66:	0035      	movs	r5, r6
 801ba68:	2101      	movs	r1, #1
 801ba6a:	189b      	adds	r3, r3, r2
 801ba6c:	e7a4      	b.n	801b9b8 <_svfiprintf_r+0xd4>
 801ba6e:	2300      	movs	r3, #0
 801ba70:	200a      	movs	r0, #10
 801ba72:	0019      	movs	r1, r3
 801ba74:	3501      	adds	r5, #1
 801ba76:	6063      	str	r3, [r4, #4]
 801ba78:	782a      	ldrb	r2, [r5, #0]
 801ba7a:	1c6e      	adds	r6, r5, #1
 801ba7c:	3a30      	subs	r2, #48	@ 0x30
 801ba7e:	2a09      	cmp	r2, #9
 801ba80:	d903      	bls.n	801ba8a <_svfiprintf_r+0x1a6>
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d0c8      	beq.n	801ba18 <_svfiprintf_r+0x134>
 801ba86:	9109      	str	r1, [sp, #36]	@ 0x24
 801ba88:	e7c6      	b.n	801ba18 <_svfiprintf_r+0x134>
 801ba8a:	4341      	muls	r1, r0
 801ba8c:	0035      	movs	r5, r6
 801ba8e:	2301      	movs	r3, #1
 801ba90:	1889      	adds	r1, r1, r2
 801ba92:	e7f1      	b.n	801ba78 <_svfiprintf_r+0x194>
 801ba94:	aa07      	add	r2, sp, #28
 801ba96:	9200      	str	r2, [sp, #0]
 801ba98:	0021      	movs	r1, r4
 801ba9a:	003a      	movs	r2, r7
 801ba9c:	4b0f      	ldr	r3, [pc, #60]	@ (801badc <_svfiprintf_r+0x1f8>)
 801ba9e:	9803      	ldr	r0, [sp, #12]
 801baa0:	f7fd fc7c 	bl	801939c <_printf_float>
 801baa4:	9004      	str	r0, [sp, #16]
 801baa6:	9b04      	ldr	r3, [sp, #16]
 801baa8:	3301      	adds	r3, #1
 801baaa:	d1d6      	bne.n	801ba5a <_svfiprintf_r+0x176>
 801baac:	89bb      	ldrh	r3, [r7, #12]
 801baae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801bab0:	065b      	lsls	r3, r3, #25
 801bab2:	d500      	bpl.n	801bab6 <_svfiprintf_r+0x1d2>
 801bab4:	e72c      	b.n	801b910 <_svfiprintf_r+0x2c>
 801bab6:	b021      	add	sp, #132	@ 0x84
 801bab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baba:	aa07      	add	r2, sp, #28
 801babc:	9200      	str	r2, [sp, #0]
 801babe:	0021      	movs	r1, r4
 801bac0:	003a      	movs	r2, r7
 801bac2:	4b06      	ldr	r3, [pc, #24]	@ (801badc <_svfiprintf_r+0x1f8>)
 801bac4:	9803      	ldr	r0, [sp, #12]
 801bac6:	f7fd ff17 	bl	80198f8 <_printf_i>
 801baca:	e7eb      	b.n	801baa4 <_svfiprintf_r+0x1c0>
 801bacc:	0801fd30 	.word	0x0801fd30
 801bad0:	0801fd36 	.word	0x0801fd36
 801bad4:	0801fd3a 	.word	0x0801fd3a
 801bad8:	0801939d 	.word	0x0801939d
 801badc:	0801b825 	.word	0x0801b825

0801bae0 <__sfputc_r>:
 801bae0:	6893      	ldr	r3, [r2, #8]
 801bae2:	b510      	push	{r4, lr}
 801bae4:	3b01      	subs	r3, #1
 801bae6:	6093      	str	r3, [r2, #8]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	da04      	bge.n	801baf6 <__sfputc_r+0x16>
 801baec:	6994      	ldr	r4, [r2, #24]
 801baee:	42a3      	cmp	r3, r4
 801baf0:	db07      	blt.n	801bb02 <__sfputc_r+0x22>
 801baf2:	290a      	cmp	r1, #10
 801baf4:	d005      	beq.n	801bb02 <__sfputc_r+0x22>
 801baf6:	6813      	ldr	r3, [r2, #0]
 801baf8:	1c58      	adds	r0, r3, #1
 801bafa:	6010      	str	r0, [r2, #0]
 801bafc:	7019      	strb	r1, [r3, #0]
 801bafe:	0008      	movs	r0, r1
 801bb00:	bd10      	pop	{r4, pc}
 801bb02:	f7fe f9f7 	bl	8019ef4 <__swbuf_r>
 801bb06:	0001      	movs	r1, r0
 801bb08:	e7f9      	b.n	801bafe <__sfputc_r+0x1e>

0801bb0a <__sfputs_r>:
 801bb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb0c:	0006      	movs	r6, r0
 801bb0e:	000f      	movs	r7, r1
 801bb10:	0014      	movs	r4, r2
 801bb12:	18d5      	adds	r5, r2, r3
 801bb14:	42ac      	cmp	r4, r5
 801bb16:	d101      	bne.n	801bb1c <__sfputs_r+0x12>
 801bb18:	2000      	movs	r0, #0
 801bb1a:	e007      	b.n	801bb2c <__sfputs_r+0x22>
 801bb1c:	7821      	ldrb	r1, [r4, #0]
 801bb1e:	003a      	movs	r2, r7
 801bb20:	0030      	movs	r0, r6
 801bb22:	f7ff ffdd 	bl	801bae0 <__sfputc_r>
 801bb26:	3401      	adds	r4, #1
 801bb28:	1c43      	adds	r3, r0, #1
 801bb2a:	d1f3      	bne.n	801bb14 <__sfputs_r+0xa>
 801bb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bb30 <_vfiprintf_r>:
 801bb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb32:	b0a1      	sub	sp, #132	@ 0x84
 801bb34:	000f      	movs	r7, r1
 801bb36:	0015      	movs	r5, r2
 801bb38:	001e      	movs	r6, r3
 801bb3a:	9003      	str	r0, [sp, #12]
 801bb3c:	2800      	cmp	r0, #0
 801bb3e:	d004      	beq.n	801bb4a <_vfiprintf_r+0x1a>
 801bb40:	6a03      	ldr	r3, [r0, #32]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d101      	bne.n	801bb4a <_vfiprintf_r+0x1a>
 801bb46:	f7fe f873 	bl	8019c30 <__sinit>
 801bb4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb4c:	07db      	lsls	r3, r3, #31
 801bb4e:	d405      	bmi.n	801bb5c <_vfiprintf_r+0x2c>
 801bb50:	89bb      	ldrh	r3, [r7, #12]
 801bb52:	059b      	lsls	r3, r3, #22
 801bb54:	d402      	bmi.n	801bb5c <_vfiprintf_r+0x2c>
 801bb56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801bb58:	f7fe fb2f 	bl	801a1ba <__retarget_lock_acquire_recursive>
 801bb5c:	89bb      	ldrh	r3, [r7, #12]
 801bb5e:	071b      	lsls	r3, r3, #28
 801bb60:	d502      	bpl.n	801bb68 <_vfiprintf_r+0x38>
 801bb62:	693b      	ldr	r3, [r7, #16]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d113      	bne.n	801bb90 <_vfiprintf_r+0x60>
 801bb68:	0039      	movs	r1, r7
 801bb6a:	9803      	ldr	r0, [sp, #12]
 801bb6c:	f7fe fa04 	bl	8019f78 <__swsetup_r>
 801bb70:	2800      	cmp	r0, #0
 801bb72:	d00d      	beq.n	801bb90 <_vfiprintf_r+0x60>
 801bb74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb76:	07db      	lsls	r3, r3, #31
 801bb78:	d503      	bpl.n	801bb82 <_vfiprintf_r+0x52>
 801bb7a:	2001      	movs	r0, #1
 801bb7c:	4240      	negs	r0, r0
 801bb7e:	b021      	add	sp, #132	@ 0x84
 801bb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb82:	89bb      	ldrh	r3, [r7, #12]
 801bb84:	059b      	lsls	r3, r3, #22
 801bb86:	d4f8      	bmi.n	801bb7a <_vfiprintf_r+0x4a>
 801bb88:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801bb8a:	f7fe fb17 	bl	801a1bc <__retarget_lock_release_recursive>
 801bb8e:	e7f4      	b.n	801bb7a <_vfiprintf_r+0x4a>
 801bb90:	2300      	movs	r3, #0
 801bb92:	ac08      	add	r4, sp, #32
 801bb94:	6163      	str	r3, [r4, #20]
 801bb96:	3320      	adds	r3, #32
 801bb98:	7663      	strb	r3, [r4, #25]
 801bb9a:	3310      	adds	r3, #16
 801bb9c:	76a3      	strb	r3, [r4, #26]
 801bb9e:	9607      	str	r6, [sp, #28]
 801bba0:	002e      	movs	r6, r5
 801bba2:	7833      	ldrb	r3, [r6, #0]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d001      	beq.n	801bbac <_vfiprintf_r+0x7c>
 801bba8:	2b25      	cmp	r3, #37	@ 0x25
 801bbaa:	d148      	bne.n	801bc3e <_vfiprintf_r+0x10e>
 801bbac:	1b73      	subs	r3, r6, r5
 801bbae:	9305      	str	r3, [sp, #20]
 801bbb0:	42ae      	cmp	r6, r5
 801bbb2:	d00b      	beq.n	801bbcc <_vfiprintf_r+0x9c>
 801bbb4:	002a      	movs	r2, r5
 801bbb6:	0039      	movs	r1, r7
 801bbb8:	9803      	ldr	r0, [sp, #12]
 801bbba:	f7ff ffa6 	bl	801bb0a <__sfputs_r>
 801bbbe:	3001      	adds	r0, #1
 801bbc0:	d100      	bne.n	801bbc4 <_vfiprintf_r+0x94>
 801bbc2:	e0ae      	b.n	801bd22 <_vfiprintf_r+0x1f2>
 801bbc4:	6963      	ldr	r3, [r4, #20]
 801bbc6:	9a05      	ldr	r2, [sp, #20]
 801bbc8:	189b      	adds	r3, r3, r2
 801bbca:	6163      	str	r3, [r4, #20]
 801bbcc:	7833      	ldrb	r3, [r6, #0]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d100      	bne.n	801bbd4 <_vfiprintf_r+0xa4>
 801bbd2:	e0a6      	b.n	801bd22 <_vfiprintf_r+0x1f2>
 801bbd4:	2201      	movs	r2, #1
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	4252      	negs	r2, r2
 801bbda:	6062      	str	r2, [r4, #4]
 801bbdc:	a904      	add	r1, sp, #16
 801bbde:	3254      	adds	r2, #84	@ 0x54
 801bbe0:	1852      	adds	r2, r2, r1
 801bbe2:	1c75      	adds	r5, r6, #1
 801bbe4:	6023      	str	r3, [r4, #0]
 801bbe6:	60e3      	str	r3, [r4, #12]
 801bbe8:	60a3      	str	r3, [r4, #8]
 801bbea:	7013      	strb	r3, [r2, #0]
 801bbec:	65a3      	str	r3, [r4, #88]	@ 0x58
 801bbee:	4b59      	ldr	r3, [pc, #356]	@ (801bd54 <_vfiprintf_r+0x224>)
 801bbf0:	2205      	movs	r2, #5
 801bbf2:	0018      	movs	r0, r3
 801bbf4:	7829      	ldrb	r1, [r5, #0]
 801bbf6:	9305      	str	r3, [sp, #20]
 801bbf8:	f7fe fae9 	bl	801a1ce <memchr>
 801bbfc:	1c6e      	adds	r6, r5, #1
 801bbfe:	2800      	cmp	r0, #0
 801bc00:	d11f      	bne.n	801bc42 <_vfiprintf_r+0x112>
 801bc02:	6822      	ldr	r2, [r4, #0]
 801bc04:	06d3      	lsls	r3, r2, #27
 801bc06:	d504      	bpl.n	801bc12 <_vfiprintf_r+0xe2>
 801bc08:	2353      	movs	r3, #83	@ 0x53
 801bc0a:	a904      	add	r1, sp, #16
 801bc0c:	185b      	adds	r3, r3, r1
 801bc0e:	2120      	movs	r1, #32
 801bc10:	7019      	strb	r1, [r3, #0]
 801bc12:	0713      	lsls	r3, r2, #28
 801bc14:	d504      	bpl.n	801bc20 <_vfiprintf_r+0xf0>
 801bc16:	2353      	movs	r3, #83	@ 0x53
 801bc18:	a904      	add	r1, sp, #16
 801bc1a:	185b      	adds	r3, r3, r1
 801bc1c:	212b      	movs	r1, #43	@ 0x2b
 801bc1e:	7019      	strb	r1, [r3, #0]
 801bc20:	782b      	ldrb	r3, [r5, #0]
 801bc22:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc24:	d016      	beq.n	801bc54 <_vfiprintf_r+0x124>
 801bc26:	002e      	movs	r6, r5
 801bc28:	2100      	movs	r1, #0
 801bc2a:	200a      	movs	r0, #10
 801bc2c:	68e3      	ldr	r3, [r4, #12]
 801bc2e:	7832      	ldrb	r2, [r6, #0]
 801bc30:	1c75      	adds	r5, r6, #1
 801bc32:	3a30      	subs	r2, #48	@ 0x30
 801bc34:	2a09      	cmp	r2, #9
 801bc36:	d950      	bls.n	801bcda <_vfiprintf_r+0x1aa>
 801bc38:	2900      	cmp	r1, #0
 801bc3a:	d111      	bne.n	801bc60 <_vfiprintf_r+0x130>
 801bc3c:	e017      	b.n	801bc6e <_vfiprintf_r+0x13e>
 801bc3e:	3601      	adds	r6, #1
 801bc40:	e7af      	b.n	801bba2 <_vfiprintf_r+0x72>
 801bc42:	9b05      	ldr	r3, [sp, #20]
 801bc44:	6822      	ldr	r2, [r4, #0]
 801bc46:	1ac0      	subs	r0, r0, r3
 801bc48:	2301      	movs	r3, #1
 801bc4a:	4083      	lsls	r3, r0
 801bc4c:	4313      	orrs	r3, r2
 801bc4e:	0035      	movs	r5, r6
 801bc50:	6023      	str	r3, [r4, #0]
 801bc52:	e7cc      	b.n	801bbee <_vfiprintf_r+0xbe>
 801bc54:	9b07      	ldr	r3, [sp, #28]
 801bc56:	1d19      	adds	r1, r3, #4
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	9107      	str	r1, [sp, #28]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	db01      	blt.n	801bc64 <_vfiprintf_r+0x134>
 801bc60:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc62:	e004      	b.n	801bc6e <_vfiprintf_r+0x13e>
 801bc64:	425b      	negs	r3, r3
 801bc66:	60e3      	str	r3, [r4, #12]
 801bc68:	2302      	movs	r3, #2
 801bc6a:	4313      	orrs	r3, r2
 801bc6c:	6023      	str	r3, [r4, #0]
 801bc6e:	7833      	ldrb	r3, [r6, #0]
 801bc70:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc72:	d10c      	bne.n	801bc8e <_vfiprintf_r+0x15e>
 801bc74:	7873      	ldrb	r3, [r6, #1]
 801bc76:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc78:	d134      	bne.n	801bce4 <_vfiprintf_r+0x1b4>
 801bc7a:	9b07      	ldr	r3, [sp, #28]
 801bc7c:	3602      	adds	r6, #2
 801bc7e:	1d1a      	adds	r2, r3, #4
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	9207      	str	r2, [sp, #28]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	da01      	bge.n	801bc8c <_vfiprintf_r+0x15c>
 801bc88:	2301      	movs	r3, #1
 801bc8a:	425b      	negs	r3, r3
 801bc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc8e:	4d32      	ldr	r5, [pc, #200]	@ (801bd58 <_vfiprintf_r+0x228>)
 801bc90:	2203      	movs	r2, #3
 801bc92:	0028      	movs	r0, r5
 801bc94:	7831      	ldrb	r1, [r6, #0]
 801bc96:	f7fe fa9a 	bl	801a1ce <memchr>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	d006      	beq.n	801bcac <_vfiprintf_r+0x17c>
 801bc9e:	2340      	movs	r3, #64	@ 0x40
 801bca0:	1b40      	subs	r0, r0, r5
 801bca2:	4083      	lsls	r3, r0
 801bca4:	6822      	ldr	r2, [r4, #0]
 801bca6:	3601      	adds	r6, #1
 801bca8:	4313      	orrs	r3, r2
 801bcaa:	6023      	str	r3, [r4, #0]
 801bcac:	7831      	ldrb	r1, [r6, #0]
 801bcae:	2206      	movs	r2, #6
 801bcb0:	482a      	ldr	r0, [pc, #168]	@ (801bd5c <_vfiprintf_r+0x22c>)
 801bcb2:	1c75      	adds	r5, r6, #1
 801bcb4:	7621      	strb	r1, [r4, #24]
 801bcb6:	f7fe fa8a 	bl	801a1ce <memchr>
 801bcba:	2800      	cmp	r0, #0
 801bcbc:	d040      	beq.n	801bd40 <_vfiprintf_r+0x210>
 801bcbe:	4b28      	ldr	r3, [pc, #160]	@ (801bd60 <_vfiprintf_r+0x230>)
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d122      	bne.n	801bd0a <_vfiprintf_r+0x1da>
 801bcc4:	2207      	movs	r2, #7
 801bcc6:	9b07      	ldr	r3, [sp, #28]
 801bcc8:	3307      	adds	r3, #7
 801bcca:	4393      	bics	r3, r2
 801bccc:	3308      	adds	r3, #8
 801bcce:	9307      	str	r3, [sp, #28]
 801bcd0:	6963      	ldr	r3, [r4, #20]
 801bcd2:	9a04      	ldr	r2, [sp, #16]
 801bcd4:	189b      	adds	r3, r3, r2
 801bcd6:	6163      	str	r3, [r4, #20]
 801bcd8:	e762      	b.n	801bba0 <_vfiprintf_r+0x70>
 801bcda:	4343      	muls	r3, r0
 801bcdc:	002e      	movs	r6, r5
 801bcde:	2101      	movs	r1, #1
 801bce0:	189b      	adds	r3, r3, r2
 801bce2:	e7a4      	b.n	801bc2e <_vfiprintf_r+0xfe>
 801bce4:	2300      	movs	r3, #0
 801bce6:	200a      	movs	r0, #10
 801bce8:	0019      	movs	r1, r3
 801bcea:	3601      	adds	r6, #1
 801bcec:	6063      	str	r3, [r4, #4]
 801bcee:	7832      	ldrb	r2, [r6, #0]
 801bcf0:	1c75      	adds	r5, r6, #1
 801bcf2:	3a30      	subs	r2, #48	@ 0x30
 801bcf4:	2a09      	cmp	r2, #9
 801bcf6:	d903      	bls.n	801bd00 <_vfiprintf_r+0x1d0>
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d0c8      	beq.n	801bc8e <_vfiprintf_r+0x15e>
 801bcfc:	9109      	str	r1, [sp, #36]	@ 0x24
 801bcfe:	e7c6      	b.n	801bc8e <_vfiprintf_r+0x15e>
 801bd00:	4341      	muls	r1, r0
 801bd02:	002e      	movs	r6, r5
 801bd04:	2301      	movs	r3, #1
 801bd06:	1889      	adds	r1, r1, r2
 801bd08:	e7f1      	b.n	801bcee <_vfiprintf_r+0x1be>
 801bd0a:	aa07      	add	r2, sp, #28
 801bd0c:	9200      	str	r2, [sp, #0]
 801bd0e:	0021      	movs	r1, r4
 801bd10:	003a      	movs	r2, r7
 801bd12:	4b14      	ldr	r3, [pc, #80]	@ (801bd64 <_vfiprintf_r+0x234>)
 801bd14:	9803      	ldr	r0, [sp, #12]
 801bd16:	f7fd fb41 	bl	801939c <_printf_float>
 801bd1a:	9004      	str	r0, [sp, #16]
 801bd1c:	9b04      	ldr	r3, [sp, #16]
 801bd1e:	3301      	adds	r3, #1
 801bd20:	d1d6      	bne.n	801bcd0 <_vfiprintf_r+0x1a0>
 801bd22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bd24:	07db      	lsls	r3, r3, #31
 801bd26:	d405      	bmi.n	801bd34 <_vfiprintf_r+0x204>
 801bd28:	89bb      	ldrh	r3, [r7, #12]
 801bd2a:	059b      	lsls	r3, r3, #22
 801bd2c:	d402      	bmi.n	801bd34 <_vfiprintf_r+0x204>
 801bd2e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801bd30:	f7fe fa44 	bl	801a1bc <__retarget_lock_release_recursive>
 801bd34:	89bb      	ldrh	r3, [r7, #12]
 801bd36:	065b      	lsls	r3, r3, #25
 801bd38:	d500      	bpl.n	801bd3c <_vfiprintf_r+0x20c>
 801bd3a:	e71e      	b.n	801bb7a <_vfiprintf_r+0x4a>
 801bd3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801bd3e:	e71e      	b.n	801bb7e <_vfiprintf_r+0x4e>
 801bd40:	aa07      	add	r2, sp, #28
 801bd42:	9200      	str	r2, [sp, #0]
 801bd44:	0021      	movs	r1, r4
 801bd46:	003a      	movs	r2, r7
 801bd48:	4b06      	ldr	r3, [pc, #24]	@ (801bd64 <_vfiprintf_r+0x234>)
 801bd4a:	9803      	ldr	r0, [sp, #12]
 801bd4c:	f7fd fdd4 	bl	80198f8 <_printf_i>
 801bd50:	e7e3      	b.n	801bd1a <_vfiprintf_r+0x1ea>
 801bd52:	46c0      	nop			@ (mov r8, r8)
 801bd54:	0801fd30 	.word	0x0801fd30
 801bd58:	0801fd36 	.word	0x0801fd36
 801bd5c:	0801fd3a 	.word	0x0801fd3a
 801bd60:	0801939d 	.word	0x0801939d
 801bd64:	0801bb0b 	.word	0x0801bb0b

0801bd68 <__sflush_r>:
 801bd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bd6a:	220c      	movs	r2, #12
 801bd6c:	5e8b      	ldrsh	r3, [r1, r2]
 801bd6e:	0005      	movs	r5, r0
 801bd70:	000c      	movs	r4, r1
 801bd72:	071a      	lsls	r2, r3, #28
 801bd74:	d456      	bmi.n	801be24 <__sflush_r+0xbc>
 801bd76:	684a      	ldr	r2, [r1, #4]
 801bd78:	2a00      	cmp	r2, #0
 801bd7a:	dc02      	bgt.n	801bd82 <__sflush_r+0x1a>
 801bd7c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801bd7e:	2a00      	cmp	r2, #0
 801bd80:	dd4e      	ble.n	801be20 <__sflush_r+0xb8>
 801bd82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801bd84:	2f00      	cmp	r7, #0
 801bd86:	d04b      	beq.n	801be20 <__sflush_r+0xb8>
 801bd88:	2200      	movs	r2, #0
 801bd8a:	2080      	movs	r0, #128	@ 0x80
 801bd8c:	682e      	ldr	r6, [r5, #0]
 801bd8e:	602a      	str	r2, [r5, #0]
 801bd90:	001a      	movs	r2, r3
 801bd92:	0140      	lsls	r0, r0, #5
 801bd94:	6a21      	ldr	r1, [r4, #32]
 801bd96:	4002      	ands	r2, r0
 801bd98:	4203      	tst	r3, r0
 801bd9a:	d033      	beq.n	801be04 <__sflush_r+0x9c>
 801bd9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bd9e:	89a3      	ldrh	r3, [r4, #12]
 801bda0:	075b      	lsls	r3, r3, #29
 801bda2:	d506      	bpl.n	801bdb2 <__sflush_r+0x4a>
 801bda4:	6863      	ldr	r3, [r4, #4]
 801bda6:	1ad2      	subs	r2, r2, r3
 801bda8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d001      	beq.n	801bdb2 <__sflush_r+0x4a>
 801bdae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bdb0:	1ad2      	subs	r2, r2, r3
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	0028      	movs	r0, r5
 801bdb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801bdb8:	6a21      	ldr	r1, [r4, #32]
 801bdba:	47b8      	blx	r7
 801bdbc:	89a2      	ldrh	r2, [r4, #12]
 801bdbe:	1c43      	adds	r3, r0, #1
 801bdc0:	d106      	bne.n	801bdd0 <__sflush_r+0x68>
 801bdc2:	6829      	ldr	r1, [r5, #0]
 801bdc4:	291d      	cmp	r1, #29
 801bdc6:	d846      	bhi.n	801be56 <__sflush_r+0xee>
 801bdc8:	4b29      	ldr	r3, [pc, #164]	@ (801be70 <__sflush_r+0x108>)
 801bdca:	40cb      	lsrs	r3, r1
 801bdcc:	07db      	lsls	r3, r3, #31
 801bdce:	d542      	bpl.n	801be56 <__sflush_r+0xee>
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	6063      	str	r3, [r4, #4]
 801bdd4:	6923      	ldr	r3, [r4, #16]
 801bdd6:	6023      	str	r3, [r4, #0]
 801bdd8:	04d2      	lsls	r2, r2, #19
 801bdda:	d505      	bpl.n	801bde8 <__sflush_r+0x80>
 801bddc:	1c43      	adds	r3, r0, #1
 801bdde:	d102      	bne.n	801bde6 <__sflush_r+0x7e>
 801bde0:	682b      	ldr	r3, [r5, #0]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d100      	bne.n	801bde8 <__sflush_r+0x80>
 801bde6:	6560      	str	r0, [r4, #84]	@ 0x54
 801bde8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bdea:	602e      	str	r6, [r5, #0]
 801bdec:	2900      	cmp	r1, #0
 801bdee:	d017      	beq.n	801be20 <__sflush_r+0xb8>
 801bdf0:	0023      	movs	r3, r4
 801bdf2:	3344      	adds	r3, #68	@ 0x44
 801bdf4:	4299      	cmp	r1, r3
 801bdf6:	d002      	beq.n	801bdfe <__sflush_r+0x96>
 801bdf8:	0028      	movs	r0, r5
 801bdfa:	f7ff f871 	bl	801aee0 <_free_r>
 801bdfe:	2300      	movs	r3, #0
 801be00:	6363      	str	r3, [r4, #52]	@ 0x34
 801be02:	e00d      	b.n	801be20 <__sflush_r+0xb8>
 801be04:	2301      	movs	r3, #1
 801be06:	0028      	movs	r0, r5
 801be08:	47b8      	blx	r7
 801be0a:	0002      	movs	r2, r0
 801be0c:	1c43      	adds	r3, r0, #1
 801be0e:	d1c6      	bne.n	801bd9e <__sflush_r+0x36>
 801be10:	682b      	ldr	r3, [r5, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d0c3      	beq.n	801bd9e <__sflush_r+0x36>
 801be16:	2b1d      	cmp	r3, #29
 801be18:	d001      	beq.n	801be1e <__sflush_r+0xb6>
 801be1a:	2b16      	cmp	r3, #22
 801be1c:	d11a      	bne.n	801be54 <__sflush_r+0xec>
 801be1e:	602e      	str	r6, [r5, #0]
 801be20:	2000      	movs	r0, #0
 801be22:	e01e      	b.n	801be62 <__sflush_r+0xfa>
 801be24:	690e      	ldr	r6, [r1, #16]
 801be26:	2e00      	cmp	r6, #0
 801be28:	d0fa      	beq.n	801be20 <__sflush_r+0xb8>
 801be2a:	680f      	ldr	r7, [r1, #0]
 801be2c:	600e      	str	r6, [r1, #0]
 801be2e:	1bba      	subs	r2, r7, r6
 801be30:	9201      	str	r2, [sp, #4]
 801be32:	2200      	movs	r2, #0
 801be34:	079b      	lsls	r3, r3, #30
 801be36:	d100      	bne.n	801be3a <__sflush_r+0xd2>
 801be38:	694a      	ldr	r2, [r1, #20]
 801be3a:	60a2      	str	r2, [r4, #8]
 801be3c:	9b01      	ldr	r3, [sp, #4]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	ddee      	ble.n	801be20 <__sflush_r+0xb8>
 801be42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801be44:	0032      	movs	r2, r6
 801be46:	001f      	movs	r7, r3
 801be48:	0028      	movs	r0, r5
 801be4a:	9b01      	ldr	r3, [sp, #4]
 801be4c:	6a21      	ldr	r1, [r4, #32]
 801be4e:	47b8      	blx	r7
 801be50:	2800      	cmp	r0, #0
 801be52:	dc07      	bgt.n	801be64 <__sflush_r+0xfc>
 801be54:	89a2      	ldrh	r2, [r4, #12]
 801be56:	2340      	movs	r3, #64	@ 0x40
 801be58:	2001      	movs	r0, #1
 801be5a:	4313      	orrs	r3, r2
 801be5c:	b21b      	sxth	r3, r3
 801be5e:	81a3      	strh	r3, [r4, #12]
 801be60:	4240      	negs	r0, r0
 801be62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801be64:	9b01      	ldr	r3, [sp, #4]
 801be66:	1836      	adds	r6, r6, r0
 801be68:	1a1b      	subs	r3, r3, r0
 801be6a:	9301      	str	r3, [sp, #4]
 801be6c:	e7e6      	b.n	801be3c <__sflush_r+0xd4>
 801be6e:	46c0      	nop			@ (mov r8, r8)
 801be70:	20400001 	.word	0x20400001

0801be74 <_fflush_r>:
 801be74:	690b      	ldr	r3, [r1, #16]
 801be76:	b570      	push	{r4, r5, r6, lr}
 801be78:	0005      	movs	r5, r0
 801be7a:	000c      	movs	r4, r1
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d102      	bne.n	801be86 <_fflush_r+0x12>
 801be80:	2500      	movs	r5, #0
 801be82:	0028      	movs	r0, r5
 801be84:	bd70      	pop	{r4, r5, r6, pc}
 801be86:	2800      	cmp	r0, #0
 801be88:	d004      	beq.n	801be94 <_fflush_r+0x20>
 801be8a:	6a03      	ldr	r3, [r0, #32]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d101      	bne.n	801be94 <_fflush_r+0x20>
 801be90:	f7fd fece 	bl	8019c30 <__sinit>
 801be94:	220c      	movs	r2, #12
 801be96:	5ea3      	ldrsh	r3, [r4, r2]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d0f1      	beq.n	801be80 <_fflush_r+0xc>
 801be9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801be9e:	07d2      	lsls	r2, r2, #31
 801bea0:	d404      	bmi.n	801beac <_fflush_r+0x38>
 801bea2:	059b      	lsls	r3, r3, #22
 801bea4:	d402      	bmi.n	801beac <_fflush_r+0x38>
 801bea6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bea8:	f7fe f987 	bl	801a1ba <__retarget_lock_acquire_recursive>
 801beac:	0028      	movs	r0, r5
 801beae:	0021      	movs	r1, r4
 801beb0:	f7ff ff5a 	bl	801bd68 <__sflush_r>
 801beb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801beb6:	0005      	movs	r5, r0
 801beb8:	07db      	lsls	r3, r3, #31
 801beba:	d4e2      	bmi.n	801be82 <_fflush_r+0xe>
 801bebc:	89a3      	ldrh	r3, [r4, #12]
 801bebe:	059b      	lsls	r3, r3, #22
 801bec0:	d4df      	bmi.n	801be82 <_fflush_r+0xe>
 801bec2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bec4:	f7fe f97a 	bl	801a1bc <__retarget_lock_release_recursive>
 801bec8:	e7db      	b.n	801be82 <_fflush_r+0xe>
	...

0801becc <__swhatbuf_r>:
 801becc:	b570      	push	{r4, r5, r6, lr}
 801bece:	000e      	movs	r6, r1
 801bed0:	001d      	movs	r5, r3
 801bed2:	230e      	movs	r3, #14
 801bed4:	5ec9      	ldrsh	r1, [r1, r3]
 801bed6:	0014      	movs	r4, r2
 801bed8:	b096      	sub	sp, #88	@ 0x58
 801beda:	2900      	cmp	r1, #0
 801bedc:	da0c      	bge.n	801bef8 <__swhatbuf_r+0x2c>
 801bede:	89b2      	ldrh	r2, [r6, #12]
 801bee0:	2380      	movs	r3, #128	@ 0x80
 801bee2:	0011      	movs	r1, r2
 801bee4:	4019      	ands	r1, r3
 801bee6:	421a      	tst	r2, r3
 801bee8:	d114      	bne.n	801bf14 <__swhatbuf_r+0x48>
 801beea:	2380      	movs	r3, #128	@ 0x80
 801beec:	00db      	lsls	r3, r3, #3
 801beee:	2000      	movs	r0, #0
 801bef0:	6029      	str	r1, [r5, #0]
 801bef2:	6023      	str	r3, [r4, #0]
 801bef4:	b016      	add	sp, #88	@ 0x58
 801bef6:	bd70      	pop	{r4, r5, r6, pc}
 801bef8:	466a      	mov	r2, sp
 801befa:	f000 f89b 	bl	801c034 <_fstat_r>
 801befe:	2800      	cmp	r0, #0
 801bf00:	dbed      	blt.n	801bede <__swhatbuf_r+0x12>
 801bf02:	23f0      	movs	r3, #240	@ 0xf0
 801bf04:	9901      	ldr	r1, [sp, #4]
 801bf06:	021b      	lsls	r3, r3, #8
 801bf08:	4019      	ands	r1, r3
 801bf0a:	4b04      	ldr	r3, [pc, #16]	@ (801bf1c <__swhatbuf_r+0x50>)
 801bf0c:	18c9      	adds	r1, r1, r3
 801bf0e:	424b      	negs	r3, r1
 801bf10:	4159      	adcs	r1, r3
 801bf12:	e7ea      	b.n	801beea <__swhatbuf_r+0x1e>
 801bf14:	2100      	movs	r1, #0
 801bf16:	2340      	movs	r3, #64	@ 0x40
 801bf18:	e7e9      	b.n	801beee <__swhatbuf_r+0x22>
 801bf1a:	46c0      	nop			@ (mov r8, r8)
 801bf1c:	ffffe000 	.word	0xffffe000

0801bf20 <__smakebuf_r>:
 801bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf22:	2602      	movs	r6, #2
 801bf24:	898b      	ldrh	r3, [r1, #12]
 801bf26:	0005      	movs	r5, r0
 801bf28:	000c      	movs	r4, r1
 801bf2a:	b085      	sub	sp, #20
 801bf2c:	4233      	tst	r3, r6
 801bf2e:	d007      	beq.n	801bf40 <__smakebuf_r+0x20>
 801bf30:	0023      	movs	r3, r4
 801bf32:	3347      	adds	r3, #71	@ 0x47
 801bf34:	6023      	str	r3, [r4, #0]
 801bf36:	6123      	str	r3, [r4, #16]
 801bf38:	2301      	movs	r3, #1
 801bf3a:	6163      	str	r3, [r4, #20]
 801bf3c:	b005      	add	sp, #20
 801bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf40:	ab03      	add	r3, sp, #12
 801bf42:	aa02      	add	r2, sp, #8
 801bf44:	f7ff ffc2 	bl	801becc <__swhatbuf_r>
 801bf48:	9f02      	ldr	r7, [sp, #8]
 801bf4a:	9001      	str	r0, [sp, #4]
 801bf4c:	0039      	movs	r1, r7
 801bf4e:	0028      	movs	r0, r5
 801bf50:	f7ff f83c 	bl	801afcc <_malloc_r>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d108      	bne.n	801bf6a <__smakebuf_r+0x4a>
 801bf58:	220c      	movs	r2, #12
 801bf5a:	5ea3      	ldrsh	r3, [r4, r2]
 801bf5c:	059a      	lsls	r2, r3, #22
 801bf5e:	d4ed      	bmi.n	801bf3c <__smakebuf_r+0x1c>
 801bf60:	2203      	movs	r2, #3
 801bf62:	4393      	bics	r3, r2
 801bf64:	431e      	orrs	r6, r3
 801bf66:	81a6      	strh	r6, [r4, #12]
 801bf68:	e7e2      	b.n	801bf30 <__smakebuf_r+0x10>
 801bf6a:	2380      	movs	r3, #128	@ 0x80
 801bf6c:	89a2      	ldrh	r2, [r4, #12]
 801bf6e:	6020      	str	r0, [r4, #0]
 801bf70:	4313      	orrs	r3, r2
 801bf72:	81a3      	strh	r3, [r4, #12]
 801bf74:	9b03      	ldr	r3, [sp, #12]
 801bf76:	6120      	str	r0, [r4, #16]
 801bf78:	6167      	str	r7, [r4, #20]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d00c      	beq.n	801bf98 <__smakebuf_r+0x78>
 801bf7e:	0028      	movs	r0, r5
 801bf80:	230e      	movs	r3, #14
 801bf82:	5ee1      	ldrsh	r1, [r4, r3]
 801bf84:	f000 f868 	bl	801c058 <_isatty_r>
 801bf88:	2800      	cmp	r0, #0
 801bf8a:	d005      	beq.n	801bf98 <__smakebuf_r+0x78>
 801bf8c:	2303      	movs	r3, #3
 801bf8e:	89a2      	ldrh	r2, [r4, #12]
 801bf90:	439a      	bics	r2, r3
 801bf92:	3b02      	subs	r3, #2
 801bf94:	4313      	orrs	r3, r2
 801bf96:	81a3      	strh	r3, [r4, #12]
 801bf98:	89a3      	ldrh	r3, [r4, #12]
 801bf9a:	9a01      	ldr	r2, [sp, #4]
 801bf9c:	4313      	orrs	r3, r2
 801bf9e:	81a3      	strh	r3, [r4, #12]
 801bfa0:	e7cc      	b.n	801bf3c <__smakebuf_r+0x1c>

0801bfa2 <_putc_r>:
 801bfa2:	b570      	push	{r4, r5, r6, lr}
 801bfa4:	0006      	movs	r6, r0
 801bfa6:	000d      	movs	r5, r1
 801bfa8:	0014      	movs	r4, r2
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	d004      	beq.n	801bfb8 <_putc_r+0x16>
 801bfae:	6a03      	ldr	r3, [r0, #32]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d101      	bne.n	801bfb8 <_putc_r+0x16>
 801bfb4:	f7fd fe3c 	bl	8019c30 <__sinit>
 801bfb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bfba:	07db      	lsls	r3, r3, #31
 801bfbc:	d405      	bmi.n	801bfca <_putc_r+0x28>
 801bfbe:	89a3      	ldrh	r3, [r4, #12]
 801bfc0:	059b      	lsls	r3, r3, #22
 801bfc2:	d402      	bmi.n	801bfca <_putc_r+0x28>
 801bfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bfc6:	f7fe f8f8 	bl	801a1ba <__retarget_lock_acquire_recursive>
 801bfca:	68a3      	ldr	r3, [r4, #8]
 801bfcc:	3b01      	subs	r3, #1
 801bfce:	60a3      	str	r3, [r4, #8]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	da05      	bge.n	801bfe0 <_putc_r+0x3e>
 801bfd4:	69a2      	ldr	r2, [r4, #24]
 801bfd6:	4293      	cmp	r3, r2
 801bfd8:	db12      	blt.n	801c000 <_putc_r+0x5e>
 801bfda:	b2eb      	uxtb	r3, r5
 801bfdc:	2b0a      	cmp	r3, #10
 801bfde:	d00f      	beq.n	801c000 <_putc_r+0x5e>
 801bfe0:	6823      	ldr	r3, [r4, #0]
 801bfe2:	1c5a      	adds	r2, r3, #1
 801bfe4:	6022      	str	r2, [r4, #0]
 801bfe6:	701d      	strb	r5, [r3, #0]
 801bfe8:	b2ed      	uxtb	r5, r5
 801bfea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bfec:	07db      	lsls	r3, r3, #31
 801bfee:	d405      	bmi.n	801bffc <_putc_r+0x5a>
 801bff0:	89a3      	ldrh	r3, [r4, #12]
 801bff2:	059b      	lsls	r3, r3, #22
 801bff4:	d402      	bmi.n	801bffc <_putc_r+0x5a>
 801bff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bff8:	f7fe f8e0 	bl	801a1bc <__retarget_lock_release_recursive>
 801bffc:	0028      	movs	r0, r5
 801bffe:	bd70      	pop	{r4, r5, r6, pc}
 801c000:	0029      	movs	r1, r5
 801c002:	0022      	movs	r2, r4
 801c004:	0030      	movs	r0, r6
 801c006:	f7fd ff75 	bl	8019ef4 <__swbuf_r>
 801c00a:	0005      	movs	r5, r0
 801c00c:	e7ed      	b.n	801bfea <_putc_r+0x48>

0801c00e <memmove>:
 801c00e:	b510      	push	{r4, lr}
 801c010:	4288      	cmp	r0, r1
 801c012:	d902      	bls.n	801c01a <memmove+0xc>
 801c014:	188b      	adds	r3, r1, r2
 801c016:	4298      	cmp	r0, r3
 801c018:	d308      	bcc.n	801c02c <memmove+0x1e>
 801c01a:	2300      	movs	r3, #0
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d007      	beq.n	801c030 <memmove+0x22>
 801c020:	5ccc      	ldrb	r4, [r1, r3]
 801c022:	54c4      	strb	r4, [r0, r3]
 801c024:	3301      	adds	r3, #1
 801c026:	e7f9      	b.n	801c01c <memmove+0xe>
 801c028:	5c8b      	ldrb	r3, [r1, r2]
 801c02a:	5483      	strb	r3, [r0, r2]
 801c02c:	3a01      	subs	r2, #1
 801c02e:	d2fb      	bcs.n	801c028 <memmove+0x1a>
 801c030:	bd10      	pop	{r4, pc}
	...

0801c034 <_fstat_r>:
 801c034:	2300      	movs	r3, #0
 801c036:	b570      	push	{r4, r5, r6, lr}
 801c038:	4d06      	ldr	r5, [pc, #24]	@ (801c054 <_fstat_r+0x20>)
 801c03a:	0004      	movs	r4, r0
 801c03c:	0008      	movs	r0, r1
 801c03e:	0011      	movs	r1, r2
 801c040:	602b      	str	r3, [r5, #0]
 801c042:	f7ee f9e2 	bl	800a40a <_fstat>
 801c046:	1c43      	adds	r3, r0, #1
 801c048:	d103      	bne.n	801c052 <_fstat_r+0x1e>
 801c04a:	682b      	ldr	r3, [r5, #0]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d000      	beq.n	801c052 <_fstat_r+0x1e>
 801c050:	6023      	str	r3, [r4, #0]
 801c052:	bd70      	pop	{r4, r5, r6, pc}
 801c054:	20006810 	.word	0x20006810

0801c058 <_isatty_r>:
 801c058:	2300      	movs	r3, #0
 801c05a:	b570      	push	{r4, r5, r6, lr}
 801c05c:	4d06      	ldr	r5, [pc, #24]	@ (801c078 <_isatty_r+0x20>)
 801c05e:	0004      	movs	r4, r0
 801c060:	0008      	movs	r0, r1
 801c062:	602b      	str	r3, [r5, #0]
 801c064:	f7ee f9d6 	bl	800a414 <_isatty>
 801c068:	1c43      	adds	r3, r0, #1
 801c06a:	d103      	bne.n	801c074 <_isatty_r+0x1c>
 801c06c:	682b      	ldr	r3, [r5, #0]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d000      	beq.n	801c074 <_isatty_r+0x1c>
 801c072:	6023      	str	r3, [r4, #0]
 801c074:	bd70      	pop	{r4, r5, r6, pc}
 801c076:	46c0      	nop			@ (mov r8, r8)
 801c078:	20006810 	.word	0x20006810

0801c07c <_sbrk_r>:
 801c07c:	2300      	movs	r3, #0
 801c07e:	b570      	push	{r4, r5, r6, lr}
 801c080:	4d06      	ldr	r5, [pc, #24]	@ (801c09c <_sbrk_r+0x20>)
 801c082:	0004      	movs	r4, r0
 801c084:	0008      	movs	r0, r1
 801c086:	602b      	str	r3, [r5, #0]
 801c088:	f7ee f9c8 	bl	800a41c <_sbrk>
 801c08c:	1c43      	adds	r3, r0, #1
 801c08e:	d103      	bne.n	801c098 <_sbrk_r+0x1c>
 801c090:	682b      	ldr	r3, [r5, #0]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d000      	beq.n	801c098 <_sbrk_r+0x1c>
 801c096:	6023      	str	r3, [r4, #0]
 801c098:	bd70      	pop	{r4, r5, r6, pc}
 801c09a:	46c0      	nop			@ (mov r8, r8)
 801c09c:	20006810 	.word	0x20006810

0801c0a0 <__assert_func>:
 801c0a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c0a2:	0014      	movs	r4, r2
 801c0a4:	001a      	movs	r2, r3
 801c0a6:	4b09      	ldr	r3, [pc, #36]	@ (801c0cc <__assert_func+0x2c>)
 801c0a8:	0005      	movs	r5, r0
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	000e      	movs	r6, r1
 801c0ae:	68d8      	ldr	r0, [r3, #12]
 801c0b0:	4b07      	ldr	r3, [pc, #28]	@ (801c0d0 <__assert_func+0x30>)
 801c0b2:	2c00      	cmp	r4, #0
 801c0b4:	d101      	bne.n	801c0ba <__assert_func+0x1a>
 801c0b6:	4b07      	ldr	r3, [pc, #28]	@ (801c0d4 <__assert_func+0x34>)
 801c0b8:	001c      	movs	r4, r3
 801c0ba:	4907      	ldr	r1, [pc, #28]	@ (801c0d8 <__assert_func+0x38>)
 801c0bc:	9301      	str	r3, [sp, #4]
 801c0be:	9402      	str	r4, [sp, #8]
 801c0c0:	002b      	movs	r3, r5
 801c0c2:	9600      	str	r6, [sp, #0]
 801c0c4:	f7fd fdcc 	bl	8019c60 <fiprintf>
 801c0c8:	f000 f884 	bl	801c1d4 <abort>
 801c0cc:	200002cc 	.word	0x200002cc
 801c0d0:	0801fd47 	.word	0x0801fd47
 801c0d4:	0801ed35 	.word	0x0801ed35
 801c0d8:	0801fd54 	.word	0x0801fd54

0801c0dc <_calloc_r>:
 801c0dc:	b570      	push	{r4, r5, r6, lr}
 801c0de:	0c0b      	lsrs	r3, r1, #16
 801c0e0:	0c15      	lsrs	r5, r2, #16
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d11e      	bne.n	801c124 <_calloc_r+0x48>
 801c0e6:	2d00      	cmp	r5, #0
 801c0e8:	d10c      	bne.n	801c104 <_calloc_r+0x28>
 801c0ea:	b289      	uxth	r1, r1
 801c0ec:	b294      	uxth	r4, r2
 801c0ee:	434c      	muls	r4, r1
 801c0f0:	0021      	movs	r1, r4
 801c0f2:	f7fe ff6b 	bl	801afcc <_malloc_r>
 801c0f6:	1e05      	subs	r5, r0, #0
 801c0f8:	d01b      	beq.n	801c132 <_calloc_r+0x56>
 801c0fa:	0022      	movs	r2, r4
 801c0fc:	2100      	movs	r1, #0
 801c0fe:	f7fd ffa7 	bl	801a050 <memset>
 801c102:	e016      	b.n	801c132 <_calloc_r+0x56>
 801c104:	1c2b      	adds	r3, r5, #0
 801c106:	1c0c      	adds	r4, r1, #0
 801c108:	b289      	uxth	r1, r1
 801c10a:	b292      	uxth	r2, r2
 801c10c:	434a      	muls	r2, r1
 801c10e:	b29b      	uxth	r3, r3
 801c110:	b2a1      	uxth	r1, r4
 801c112:	4359      	muls	r1, r3
 801c114:	0c14      	lsrs	r4, r2, #16
 801c116:	190c      	adds	r4, r1, r4
 801c118:	0c23      	lsrs	r3, r4, #16
 801c11a:	d107      	bne.n	801c12c <_calloc_r+0x50>
 801c11c:	0424      	lsls	r4, r4, #16
 801c11e:	b292      	uxth	r2, r2
 801c120:	4314      	orrs	r4, r2
 801c122:	e7e5      	b.n	801c0f0 <_calloc_r+0x14>
 801c124:	2d00      	cmp	r5, #0
 801c126:	d101      	bne.n	801c12c <_calloc_r+0x50>
 801c128:	1c14      	adds	r4, r2, #0
 801c12a:	e7ed      	b.n	801c108 <_calloc_r+0x2c>
 801c12c:	230c      	movs	r3, #12
 801c12e:	2500      	movs	r5, #0
 801c130:	6003      	str	r3, [r0, #0]
 801c132:	0028      	movs	r0, r5
 801c134:	bd70      	pop	{r4, r5, r6, pc}

0801c136 <__ascii_mbtowc>:
 801c136:	b082      	sub	sp, #8
 801c138:	2900      	cmp	r1, #0
 801c13a:	d100      	bne.n	801c13e <__ascii_mbtowc+0x8>
 801c13c:	a901      	add	r1, sp, #4
 801c13e:	1e10      	subs	r0, r2, #0
 801c140:	d006      	beq.n	801c150 <__ascii_mbtowc+0x1a>
 801c142:	2b00      	cmp	r3, #0
 801c144:	d006      	beq.n	801c154 <__ascii_mbtowc+0x1e>
 801c146:	7813      	ldrb	r3, [r2, #0]
 801c148:	600b      	str	r3, [r1, #0]
 801c14a:	7810      	ldrb	r0, [r2, #0]
 801c14c:	1e43      	subs	r3, r0, #1
 801c14e:	4198      	sbcs	r0, r3
 801c150:	b002      	add	sp, #8
 801c152:	4770      	bx	lr
 801c154:	2002      	movs	r0, #2
 801c156:	4240      	negs	r0, r0
 801c158:	e7fa      	b.n	801c150 <__ascii_mbtowc+0x1a>

0801c15a <_realloc_r>:
 801c15a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c15c:	0006      	movs	r6, r0
 801c15e:	000c      	movs	r4, r1
 801c160:	0015      	movs	r5, r2
 801c162:	2900      	cmp	r1, #0
 801c164:	d105      	bne.n	801c172 <_realloc_r+0x18>
 801c166:	0011      	movs	r1, r2
 801c168:	f7fe ff30 	bl	801afcc <_malloc_r>
 801c16c:	0004      	movs	r4, r0
 801c16e:	0020      	movs	r0, r4
 801c170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c172:	2a00      	cmp	r2, #0
 801c174:	d103      	bne.n	801c17e <_realloc_r+0x24>
 801c176:	f7fe feb3 	bl	801aee0 <_free_r>
 801c17a:	002c      	movs	r4, r5
 801c17c:	e7f7      	b.n	801c16e <_realloc_r+0x14>
 801c17e:	f000 f830 	bl	801c1e2 <_malloc_usable_size_r>
 801c182:	0007      	movs	r7, r0
 801c184:	4285      	cmp	r5, r0
 801c186:	d802      	bhi.n	801c18e <_realloc_r+0x34>
 801c188:	0843      	lsrs	r3, r0, #1
 801c18a:	42ab      	cmp	r3, r5
 801c18c:	d3ef      	bcc.n	801c16e <_realloc_r+0x14>
 801c18e:	0029      	movs	r1, r5
 801c190:	0030      	movs	r0, r6
 801c192:	f7fe ff1b 	bl	801afcc <_malloc_r>
 801c196:	9001      	str	r0, [sp, #4]
 801c198:	2800      	cmp	r0, #0
 801c19a:	d101      	bne.n	801c1a0 <_realloc_r+0x46>
 801c19c:	9c01      	ldr	r4, [sp, #4]
 801c19e:	e7e6      	b.n	801c16e <_realloc_r+0x14>
 801c1a0:	002a      	movs	r2, r5
 801c1a2:	42bd      	cmp	r5, r7
 801c1a4:	d900      	bls.n	801c1a8 <_realloc_r+0x4e>
 801c1a6:	003a      	movs	r2, r7
 801c1a8:	0021      	movs	r1, r4
 801c1aa:	9801      	ldr	r0, [sp, #4]
 801c1ac:	f7fe f81a 	bl	801a1e4 <memcpy>
 801c1b0:	0021      	movs	r1, r4
 801c1b2:	0030      	movs	r0, r6
 801c1b4:	f7fe fe94 	bl	801aee0 <_free_r>
 801c1b8:	e7f0      	b.n	801c19c <_realloc_r+0x42>

0801c1ba <__ascii_wctomb>:
 801c1ba:	0003      	movs	r3, r0
 801c1bc:	1e08      	subs	r0, r1, #0
 801c1be:	d005      	beq.n	801c1cc <__ascii_wctomb+0x12>
 801c1c0:	2aff      	cmp	r2, #255	@ 0xff
 801c1c2:	d904      	bls.n	801c1ce <__ascii_wctomb+0x14>
 801c1c4:	228a      	movs	r2, #138	@ 0x8a
 801c1c6:	2001      	movs	r0, #1
 801c1c8:	601a      	str	r2, [r3, #0]
 801c1ca:	4240      	negs	r0, r0
 801c1cc:	4770      	bx	lr
 801c1ce:	2001      	movs	r0, #1
 801c1d0:	700a      	strb	r2, [r1, #0]
 801c1d2:	e7fb      	b.n	801c1cc <__ascii_wctomb+0x12>

0801c1d4 <abort>:
 801c1d4:	2006      	movs	r0, #6
 801c1d6:	b510      	push	{r4, lr}
 801c1d8:	f000 f834 	bl	801c244 <raise>
 801c1dc:	2001      	movs	r0, #1
 801c1de:	f7ee f8f1 	bl	800a3c4 <_exit>

0801c1e2 <_malloc_usable_size_r>:
 801c1e2:	1f0b      	subs	r3, r1, #4
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	1f18      	subs	r0, r3, #4
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	da01      	bge.n	801c1f0 <_malloc_usable_size_r+0xe>
 801c1ec:	580b      	ldr	r3, [r1, r0]
 801c1ee:	18c0      	adds	r0, r0, r3
 801c1f0:	4770      	bx	lr

0801c1f2 <_raise_r>:
 801c1f2:	b570      	push	{r4, r5, r6, lr}
 801c1f4:	0004      	movs	r4, r0
 801c1f6:	000d      	movs	r5, r1
 801c1f8:	291f      	cmp	r1, #31
 801c1fa:	d904      	bls.n	801c206 <_raise_r+0x14>
 801c1fc:	2316      	movs	r3, #22
 801c1fe:	6003      	str	r3, [r0, #0]
 801c200:	2001      	movs	r0, #1
 801c202:	4240      	negs	r0, r0
 801c204:	bd70      	pop	{r4, r5, r6, pc}
 801c206:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d004      	beq.n	801c216 <_raise_r+0x24>
 801c20c:	008a      	lsls	r2, r1, #2
 801c20e:	189b      	adds	r3, r3, r2
 801c210:	681a      	ldr	r2, [r3, #0]
 801c212:	2a00      	cmp	r2, #0
 801c214:	d108      	bne.n	801c228 <_raise_r+0x36>
 801c216:	0020      	movs	r0, r4
 801c218:	f000 f830 	bl	801c27c <_getpid_r>
 801c21c:	002a      	movs	r2, r5
 801c21e:	0001      	movs	r1, r0
 801c220:	0020      	movs	r0, r4
 801c222:	f000 f819 	bl	801c258 <_kill_r>
 801c226:	e7ed      	b.n	801c204 <_raise_r+0x12>
 801c228:	2a01      	cmp	r2, #1
 801c22a:	d009      	beq.n	801c240 <_raise_r+0x4e>
 801c22c:	1c51      	adds	r1, r2, #1
 801c22e:	d103      	bne.n	801c238 <_raise_r+0x46>
 801c230:	2316      	movs	r3, #22
 801c232:	6003      	str	r3, [r0, #0]
 801c234:	2001      	movs	r0, #1
 801c236:	e7e5      	b.n	801c204 <_raise_r+0x12>
 801c238:	2100      	movs	r1, #0
 801c23a:	0028      	movs	r0, r5
 801c23c:	6019      	str	r1, [r3, #0]
 801c23e:	4790      	blx	r2
 801c240:	2000      	movs	r0, #0
 801c242:	e7df      	b.n	801c204 <_raise_r+0x12>

0801c244 <raise>:
 801c244:	b510      	push	{r4, lr}
 801c246:	4b03      	ldr	r3, [pc, #12]	@ (801c254 <raise+0x10>)
 801c248:	0001      	movs	r1, r0
 801c24a:	6818      	ldr	r0, [r3, #0]
 801c24c:	f7ff ffd1 	bl	801c1f2 <_raise_r>
 801c250:	bd10      	pop	{r4, pc}
 801c252:	46c0      	nop			@ (mov r8, r8)
 801c254:	200002cc 	.word	0x200002cc

0801c258 <_kill_r>:
 801c258:	2300      	movs	r3, #0
 801c25a:	b570      	push	{r4, r5, r6, lr}
 801c25c:	4d06      	ldr	r5, [pc, #24]	@ (801c278 <_kill_r+0x20>)
 801c25e:	0004      	movs	r4, r0
 801c260:	0008      	movs	r0, r1
 801c262:	0011      	movs	r1, r2
 801c264:	602b      	str	r3, [r5, #0]
 801c266:	f7ee f8a5 	bl	800a3b4 <_kill>
 801c26a:	1c43      	adds	r3, r0, #1
 801c26c:	d103      	bne.n	801c276 <_kill_r+0x1e>
 801c26e:	682b      	ldr	r3, [r5, #0]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d000      	beq.n	801c276 <_kill_r+0x1e>
 801c274:	6023      	str	r3, [r4, #0]
 801c276:	bd70      	pop	{r4, r5, r6, pc}
 801c278:	20006810 	.word	0x20006810

0801c27c <_getpid_r>:
 801c27c:	b510      	push	{r4, lr}
 801c27e:	f7ee f897 	bl	800a3b0 <_getpid>
 801c282:	bd10      	pop	{r4, pc}

0801c284 <logf>:
 801c284:	b570      	push	{r4, r5, r6, lr}
 801c286:	1c05      	adds	r5, r0, #0
 801c288:	f000 f82c 	bl	801c2e4 <__ieee754_logf>
 801c28c:	1c29      	adds	r1, r5, #0
 801c28e:	1c04      	adds	r4, r0, #0
 801c290:	1c28      	adds	r0, r5, #0
 801c292:	f7e5 fa15 	bl	80016c0 <__aeabi_fcmpun>
 801c296:	2800      	cmp	r0, #0
 801c298:	d110      	bne.n	801c2bc <logf+0x38>
 801c29a:	2100      	movs	r1, #0
 801c29c:	1c28      	adds	r0, r5, #0
 801c29e:	f7e4 f93d 	bl	800051c <__aeabi_fcmpgt>
 801c2a2:	2800      	cmp	r0, #0
 801c2a4:	d10a      	bne.n	801c2bc <logf+0x38>
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	1c28      	adds	r0, r5, #0
 801c2aa:	f7e4 f91d 	bl	80004e8 <__aeabi_fcmpeq>
 801c2ae:	2800      	cmp	r0, #0
 801c2b0:	d006      	beq.n	801c2c0 <logf+0x3c>
 801c2b2:	f7fd ff57 	bl	801a164 <__errno>
 801c2b6:	2322      	movs	r3, #34	@ 0x22
 801c2b8:	4c06      	ldr	r4, [pc, #24]	@ (801c2d4 <logf+0x50>)
 801c2ba:	6003      	str	r3, [r0, #0]
 801c2bc:	1c20      	adds	r0, r4, #0
 801c2be:	bd70      	pop	{r4, r5, r6, pc}
 801c2c0:	f7fd ff50 	bl	801a164 <__errno>
 801c2c4:	2321      	movs	r3, #33	@ 0x21
 801c2c6:	6003      	str	r3, [r0, #0]
 801c2c8:	4803      	ldr	r0, [pc, #12]	@ (801c2d8 <logf+0x54>)
 801c2ca:	f000 f807 	bl	801c2dc <nanf>
 801c2ce:	1c04      	adds	r4, r0, #0
 801c2d0:	e7f4      	b.n	801c2bc <logf+0x38>
 801c2d2:	46c0      	nop			@ (mov r8, r8)
 801c2d4:	ff800000 	.word	0xff800000
 801c2d8:	0801ed35 	.word	0x0801ed35

0801c2dc <nanf>:
 801c2dc:	4800      	ldr	r0, [pc, #0]	@ (801c2e0 <nanf+0x4>)
 801c2de:	4770      	bx	lr
 801c2e0:	7fc00000 	.word	0x7fc00000

0801c2e4 <__ieee754_logf>:
 801c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2e6:	0043      	lsls	r3, r0, #1
 801c2e8:	b085      	sub	sp, #20
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d106      	bne.n	801c2fc <__ieee754_logf+0x18>
 801c2ee:	20cc      	movs	r0, #204	@ 0xcc
 801c2f0:	2100      	movs	r1, #0
 801c2f2:	0600      	lsls	r0, r0, #24
 801c2f4:	f7e4 fc58 	bl	8000ba8 <__aeabi_fdiv>
 801c2f8:	b005      	add	sp, #20
 801c2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2fc:	1e03      	subs	r3, r0, #0
 801c2fe:	da04      	bge.n	801c30a <__ieee754_logf+0x26>
 801c300:	1c01      	adds	r1, r0, #0
 801c302:	f7e4 ff79 	bl	80011f8 <__aeabi_fsub>
 801c306:	2100      	movs	r1, #0
 801c308:	e7f4      	b.n	801c2f4 <__ieee754_logf+0x10>
 801c30a:	21ff      	movs	r1, #255	@ 0xff
 801c30c:	05c9      	lsls	r1, r1, #23
 801c30e:	4288      	cmp	r0, r1
 801c310:	db03      	blt.n	801c31a <__ieee754_logf+0x36>
 801c312:	1c01      	adds	r1, r0, #0
 801c314:	f7e4 fa56 	bl	80007c4 <__aeabi_fadd>
 801c318:	e7ee      	b.n	801c2f8 <__ieee754_logf+0x14>
 801c31a:	2280      	movs	r2, #128	@ 0x80
 801c31c:	2100      	movs	r1, #0
 801c31e:	0412      	lsls	r2, r2, #16
 801c320:	4290      	cmp	r0, r2
 801c322:	da06      	bge.n	801c332 <__ieee754_logf+0x4e>
 801c324:	2198      	movs	r1, #152	@ 0x98
 801c326:	05c9      	lsls	r1, r1, #23
 801c328:	f7e4 fe0c 	bl	8000f44 <__aeabi_fmul>
 801c32c:	2119      	movs	r1, #25
 801c32e:	0003      	movs	r3, r0
 801c330:	4249      	negs	r1, r1
 801c332:	15da      	asrs	r2, r3, #23
 801c334:	3a7f      	subs	r2, #127	@ 0x7f
 801c336:	1852      	adds	r2, r2, r1
 801c338:	2180      	movs	r1, #128	@ 0x80
 801c33a:	025b      	lsls	r3, r3, #9
 801c33c:	0a5e      	lsrs	r6, r3, #9
 801c33e:	4b74      	ldr	r3, [pc, #464]	@ (801c510 <__ieee754_logf+0x22c>)
 801c340:	20fe      	movs	r0, #254	@ 0xfe
 801c342:	0409      	lsls	r1, r1, #16
 801c344:	18f3      	adds	r3, r6, r3
 801c346:	400b      	ands	r3, r1
 801c348:	21fe      	movs	r1, #254	@ 0xfe
 801c34a:	0580      	lsls	r0, r0, #22
 801c34c:	4058      	eors	r0, r3
 801c34e:	15dd      	asrs	r5, r3, #23
 801c350:	4330      	orrs	r0, r6
 801c352:	0589      	lsls	r1, r1, #22
 801c354:	18ad      	adds	r5, r5, r2
 801c356:	f7e4 ff4f 	bl	80011f8 <__aeabi_fsub>
 801c35a:	0032      	movs	r2, r6
 801c35c:	4b6d      	ldr	r3, [pc, #436]	@ (801c514 <__ieee754_logf+0x230>)
 801c35e:	320f      	adds	r2, #15
 801c360:	1c04      	adds	r4, r0, #0
 801c362:	421a      	tst	r2, r3
 801c364:	d145      	bne.n	801c3f2 <__ieee754_logf+0x10e>
 801c366:	2100      	movs	r1, #0
 801c368:	f7e4 f8be 	bl	80004e8 <__aeabi_fcmpeq>
 801c36c:	2800      	cmp	r0, #0
 801c36e:	d011      	beq.n	801c394 <__ieee754_logf+0xb0>
 801c370:	2000      	movs	r0, #0
 801c372:	2d00      	cmp	r5, #0
 801c374:	d0c0      	beq.n	801c2f8 <__ieee754_logf+0x14>
 801c376:	0028      	movs	r0, r5
 801c378:	f7e5 f9d8 	bl	800172c <__aeabi_i2f>
 801c37c:	4966      	ldr	r1, [pc, #408]	@ (801c518 <__ieee754_logf+0x234>)
 801c37e:	1c04      	adds	r4, r0, #0
 801c380:	f7e4 fde0 	bl	8000f44 <__aeabi_fmul>
 801c384:	4965      	ldr	r1, [pc, #404]	@ (801c51c <__ieee754_logf+0x238>)
 801c386:	1c05      	adds	r5, r0, #0
 801c388:	1c20      	adds	r0, r4, #0
 801c38a:	f7e4 fddb 	bl	8000f44 <__aeabi_fmul>
 801c38e:	1c01      	adds	r1, r0, #0
 801c390:	1c28      	adds	r0, r5, #0
 801c392:	e7bf      	b.n	801c314 <__ieee754_logf+0x30>
 801c394:	4962      	ldr	r1, [pc, #392]	@ (801c520 <__ieee754_logf+0x23c>)
 801c396:	1c20      	adds	r0, r4, #0
 801c398:	f7e4 fdd4 	bl	8000f44 <__aeabi_fmul>
 801c39c:	1c01      	adds	r1, r0, #0
 801c39e:	20fc      	movs	r0, #252	@ 0xfc
 801c3a0:	0580      	lsls	r0, r0, #22
 801c3a2:	f7e4 ff29 	bl	80011f8 <__aeabi_fsub>
 801c3a6:	1c21      	adds	r1, r4, #0
 801c3a8:	1c06      	adds	r6, r0, #0
 801c3aa:	1c20      	adds	r0, r4, #0
 801c3ac:	f7e4 fdca 	bl	8000f44 <__aeabi_fmul>
 801c3b0:	1c01      	adds	r1, r0, #0
 801c3b2:	1c30      	adds	r0, r6, #0
 801c3b4:	f7e4 fdc6 	bl	8000f44 <__aeabi_fmul>
 801c3b8:	1c06      	adds	r6, r0, #0
 801c3ba:	2d00      	cmp	r5, #0
 801c3bc:	d101      	bne.n	801c3c2 <__ieee754_logf+0xde>
 801c3be:	1c31      	adds	r1, r6, #0
 801c3c0:	e079      	b.n	801c4b6 <__ieee754_logf+0x1d2>
 801c3c2:	0028      	movs	r0, r5
 801c3c4:	f7e5 f9b2 	bl	800172c <__aeabi_i2f>
 801c3c8:	4953      	ldr	r1, [pc, #332]	@ (801c518 <__ieee754_logf+0x234>)
 801c3ca:	1c05      	adds	r5, r0, #0
 801c3cc:	f7e4 fdba 	bl	8000f44 <__aeabi_fmul>
 801c3d0:	4952      	ldr	r1, [pc, #328]	@ (801c51c <__ieee754_logf+0x238>)
 801c3d2:	1c07      	adds	r7, r0, #0
 801c3d4:	1c28      	adds	r0, r5, #0
 801c3d6:	f7e4 fdb5 	bl	8000f44 <__aeabi_fmul>
 801c3da:	1c01      	adds	r1, r0, #0
 801c3dc:	1c30      	adds	r0, r6, #0
 801c3de:	f7e4 ff0b 	bl	80011f8 <__aeabi_fsub>
 801c3e2:	1c21      	adds	r1, r4, #0
 801c3e4:	f7e4 ff08 	bl	80011f8 <__aeabi_fsub>
 801c3e8:	1c01      	adds	r1, r0, #0
 801c3ea:	1c38      	adds	r0, r7, #0
 801c3ec:	f7e4 ff04 	bl	80011f8 <__aeabi_fsub>
 801c3f0:	e782      	b.n	801c2f8 <__ieee754_logf+0x14>
 801c3f2:	2180      	movs	r1, #128	@ 0x80
 801c3f4:	05c9      	lsls	r1, r1, #23
 801c3f6:	f7e4 f9e5 	bl	80007c4 <__aeabi_fadd>
 801c3fa:	1c01      	adds	r1, r0, #0
 801c3fc:	1c20      	adds	r0, r4, #0
 801c3fe:	f7e4 fbd3 	bl	8000ba8 <__aeabi_fdiv>
 801c402:	9000      	str	r0, [sp, #0]
 801c404:	0028      	movs	r0, r5
 801c406:	f7e5 f991 	bl	800172c <__aeabi_i2f>
 801c40a:	9900      	ldr	r1, [sp, #0]
 801c40c:	9001      	str	r0, [sp, #4]
 801c40e:	1c08      	adds	r0, r1, #0
 801c410:	f7e4 fd98 	bl	8000f44 <__aeabi_fmul>
 801c414:	4b43      	ldr	r3, [pc, #268]	@ (801c524 <__ieee754_logf+0x240>)
 801c416:	1c01      	adds	r1, r0, #0
 801c418:	18f3      	adds	r3, r6, r3
 801c41a:	9303      	str	r3, [sp, #12]
 801c41c:	9002      	str	r0, [sp, #8]
 801c41e:	f7e4 fd91 	bl	8000f44 <__aeabi_fmul>
 801c422:	4941      	ldr	r1, [pc, #260]	@ (801c528 <__ieee754_logf+0x244>)
 801c424:	1c07      	adds	r7, r0, #0
 801c426:	f7e4 fd8d 	bl	8000f44 <__aeabi_fmul>
 801c42a:	4940      	ldr	r1, [pc, #256]	@ (801c52c <__ieee754_logf+0x248>)
 801c42c:	f7e4 f9ca 	bl	80007c4 <__aeabi_fadd>
 801c430:	1c39      	adds	r1, r7, #0
 801c432:	f7e4 fd87 	bl	8000f44 <__aeabi_fmul>
 801c436:	493e      	ldr	r1, [pc, #248]	@ (801c530 <__ieee754_logf+0x24c>)
 801c438:	f7e4 f9c4 	bl	80007c4 <__aeabi_fadd>
 801c43c:	1c39      	adds	r1, r7, #0
 801c43e:	f7e4 fd81 	bl	8000f44 <__aeabi_fmul>
 801c442:	493c      	ldr	r1, [pc, #240]	@ (801c534 <__ieee754_logf+0x250>)
 801c444:	f7e4 f9be 	bl	80007c4 <__aeabi_fadd>
 801c448:	9902      	ldr	r1, [sp, #8]
 801c44a:	f7e4 fd7b 	bl	8000f44 <__aeabi_fmul>
 801c44e:	493a      	ldr	r1, [pc, #232]	@ (801c538 <__ieee754_logf+0x254>)
 801c450:	9002      	str	r0, [sp, #8]
 801c452:	1c38      	adds	r0, r7, #0
 801c454:	f7e4 fd76 	bl	8000f44 <__aeabi_fmul>
 801c458:	4938      	ldr	r1, [pc, #224]	@ (801c53c <__ieee754_logf+0x258>)
 801c45a:	f7e4 f9b3 	bl	80007c4 <__aeabi_fadd>
 801c45e:	1c39      	adds	r1, r7, #0
 801c460:	f7e4 fd70 	bl	8000f44 <__aeabi_fmul>
 801c464:	4936      	ldr	r1, [pc, #216]	@ (801c540 <__ieee754_logf+0x25c>)
 801c466:	f7e4 f9ad 	bl	80007c4 <__aeabi_fadd>
 801c46a:	1c39      	adds	r1, r7, #0
 801c46c:	f7e4 fd6a 	bl	8000f44 <__aeabi_fmul>
 801c470:	1c01      	adds	r1, r0, #0
 801c472:	9802      	ldr	r0, [sp, #8]
 801c474:	f7e4 f9a6 	bl	80007c4 <__aeabi_fadd>
 801c478:	4b32      	ldr	r3, [pc, #200]	@ (801c544 <__ieee754_logf+0x260>)
 801c47a:	9a03      	ldr	r2, [sp, #12]
 801c47c:	1b9b      	subs	r3, r3, r6
 801c47e:	1c07      	adds	r7, r0, #0
 801c480:	4313      	orrs	r3, r2
 801c482:	2b00      	cmp	r3, #0
 801c484:	dd2f      	ble.n	801c4e6 <__ieee754_logf+0x202>
 801c486:	21fc      	movs	r1, #252	@ 0xfc
 801c488:	1c20      	adds	r0, r4, #0
 801c48a:	0589      	lsls	r1, r1, #22
 801c48c:	f7e4 fd5a 	bl	8000f44 <__aeabi_fmul>
 801c490:	1c21      	adds	r1, r4, #0
 801c492:	f7e4 fd57 	bl	8000f44 <__aeabi_fmul>
 801c496:	1c01      	adds	r1, r0, #0
 801c498:	1c06      	adds	r6, r0, #0
 801c49a:	1c38      	adds	r0, r7, #0
 801c49c:	f7e4 f992 	bl	80007c4 <__aeabi_fadd>
 801c4a0:	9900      	ldr	r1, [sp, #0]
 801c4a2:	f7e4 fd4f 	bl	8000f44 <__aeabi_fmul>
 801c4a6:	1c07      	adds	r7, r0, #0
 801c4a8:	2d00      	cmp	r5, #0
 801c4aa:	d106      	bne.n	801c4ba <__ieee754_logf+0x1d6>
 801c4ac:	1c01      	adds	r1, r0, #0
 801c4ae:	1c30      	adds	r0, r6, #0
 801c4b0:	f7e4 fea2 	bl	80011f8 <__aeabi_fsub>
 801c4b4:	1c01      	adds	r1, r0, #0
 801c4b6:	1c20      	adds	r0, r4, #0
 801c4b8:	e798      	b.n	801c3ec <__ieee754_logf+0x108>
 801c4ba:	4917      	ldr	r1, [pc, #92]	@ (801c518 <__ieee754_logf+0x234>)
 801c4bc:	9801      	ldr	r0, [sp, #4]
 801c4be:	f7e4 fd41 	bl	8000f44 <__aeabi_fmul>
 801c4c2:	4916      	ldr	r1, [pc, #88]	@ (801c51c <__ieee754_logf+0x238>)
 801c4c4:	1c05      	adds	r5, r0, #0
 801c4c6:	9801      	ldr	r0, [sp, #4]
 801c4c8:	f7e4 fd3c 	bl	8000f44 <__aeabi_fmul>
 801c4cc:	1c39      	adds	r1, r7, #0
 801c4ce:	f7e4 f979 	bl	80007c4 <__aeabi_fadd>
 801c4d2:	1c01      	adds	r1, r0, #0
 801c4d4:	1c30      	adds	r0, r6, #0
 801c4d6:	f7e4 fe8f 	bl	80011f8 <__aeabi_fsub>
 801c4da:	1c21      	adds	r1, r4, #0
 801c4dc:	f7e4 fe8c 	bl	80011f8 <__aeabi_fsub>
 801c4e0:	1c01      	adds	r1, r0, #0
 801c4e2:	1c28      	adds	r0, r5, #0
 801c4e4:	e782      	b.n	801c3ec <__ieee754_logf+0x108>
 801c4e6:	1c01      	adds	r1, r0, #0
 801c4e8:	1c20      	adds	r0, r4, #0
 801c4ea:	f7e4 fe85 	bl	80011f8 <__aeabi_fsub>
 801c4ee:	9900      	ldr	r1, [sp, #0]
 801c4f0:	f7e4 fd28 	bl	8000f44 <__aeabi_fmul>
 801c4f4:	1c06      	adds	r6, r0, #0
 801c4f6:	2d00      	cmp	r5, #0
 801c4f8:	d100      	bne.n	801c4fc <__ieee754_logf+0x218>
 801c4fa:	e760      	b.n	801c3be <__ieee754_logf+0xda>
 801c4fc:	4906      	ldr	r1, [pc, #24]	@ (801c518 <__ieee754_logf+0x234>)
 801c4fe:	9801      	ldr	r0, [sp, #4]
 801c500:	f7e4 fd20 	bl	8000f44 <__aeabi_fmul>
 801c504:	4905      	ldr	r1, [pc, #20]	@ (801c51c <__ieee754_logf+0x238>)
 801c506:	1c05      	adds	r5, r0, #0
 801c508:	9801      	ldr	r0, [sp, #4]
 801c50a:	f7e4 fd1b 	bl	8000f44 <__aeabi_fmul>
 801c50e:	e7e0      	b.n	801c4d2 <__ieee754_logf+0x1ee>
 801c510:	004afb20 	.word	0x004afb20
 801c514:	007ffff0 	.word	0x007ffff0
 801c518:	3f317180 	.word	0x3f317180
 801c51c:	3717f7d1 	.word	0x3717f7d1
 801c520:	3eaaaaab 	.word	0x3eaaaaab
 801c524:	ffcf5c30 	.word	0xffcf5c30
 801c528:	3e178897 	.word	0x3e178897
 801c52c:	3e3a3325 	.word	0x3e3a3325
 801c530:	3e924925 	.word	0x3e924925
 801c534:	3f2aaaab 	.word	0x3f2aaaab
 801c538:	3e1cd04f 	.word	0x3e1cd04f
 801c53c:	3e638e29 	.word	0x3e638e29
 801c540:	3ecccccd 	.word	0x3ecccccd
 801c544:	0035c288 	.word	0x0035c288

0801c548 <_init>:
 801c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c54a:	46c0      	nop			@ (mov r8, r8)
 801c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c54e:	bc08      	pop	{r3}
 801c550:	469e      	mov	lr, r3
 801c552:	4770      	bx	lr

0801c554 <_fini>:
 801c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c556:	46c0      	nop			@ (mov r8, r8)
 801c558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c55a:	bc08      	pop	{r3}
 801c55c:	469e      	mov	lr, r3
 801c55e:	4770      	bx	lr

0801c560 <__FLASH_Program_Fast_veneer>:
 801c560:	b401      	push	{r0}
 801c562:	4802      	ldr	r0, [pc, #8]	@ (801c56c <__FLASH_Program_Fast_veneer+0xc>)
 801c564:	4684      	mov	ip, r0
 801c566:	bc01      	pop	{r0}
 801c568:	4760      	bx	ip
 801c56a:	bf00      	nop
 801c56c:	20000489 	.word	0x20000489

Disassembly of section .data:

20000000 <P.2>:
20000000:	00000000 3ff00000                       .......?

20000008 <use_sensor1.6>:
20000008:	                                         ..

2000000a <rad_ratio>:
2000000a:	                                         ..

2000000c <USB_rev_buff>:
2000000c:	000000ff 00000000 00000000 00000000     ................
	...

2000004c <Index_num>:
2000004c:	00000001                                ....

20000050 <SystemCoreClock>:
20000050:	003d0900                                ..=.

20000054 <csv_file_name>:
20000054:	0801ed36                                6...

20000058 <log_csv>:
20000058:	0801ed43 0801e4a0 0801f9a5 0801f9a5     C...............
20000068:	0801f9a5 00000000 0801ed4b 00000000     ........K.......
20000078:	00000000 0801e602 0801e609 00000000     ................
20000088:	00000100 00000000 00314852 00000000     ........RH1.....
	...
200000b8:	00000001 00324852 00000000 00000000     ....RH2.........
	...
200000e4:	00000001 00314854 00000000 00000000     ....TH1.........
	...
20000110:	00000001 00324854 00000000 00000000     ....TH2.........
	...
2000013c:	00000001 00314c54 00000000 00000000     ....TL1.........
	...
2000016c:	00324c54 00000000 00000000 00000000     TL2.............
	...

200001fc <pdf_file_name>:
200001fc:	0801f957                                W...

20000200 <g_temp_axis_min>:
20000200:	c1200000                                .. .

20000204 <uwTickFreq>:
20000204:	00000001                                ....

20000208 <uwTickPrio>:
20000208:	00000004                                ....

2000020c <_ux_system_slave_class_hid_name>:
2000020c:	735f7875 6576616c 616c635f 685f7373     ux_slave_class_h
2000021c:	                                         id.

2000021f <_ux_system_slave_class_storage_name>:
2000021f:	735f7875 6576616c 616c635f 735f7373     ux_slave_class_s
2000022f:	61726f74                                 torage.

20000236 <_ux_system_bos_descriptor_structure>:
20000236:	01020101                                ....

2000023a <_ux_system_interface_descriptor_structure>:
2000023a:	01010101 01010101                        .........

20000243 <_ux_system_configuration_descriptor_structure>:
20000243:	01020101 01010101                       ........

2000024b <_ux_system_device_descriptor_structure>:
2000024b:	01020101 02010101 01010202               ..............

20000259 <_ux_system_endpoint_descriptor_structure>:
20000259:	01010101                                 ......

2000025f <_ux_system_slave_class_storage_product_serial>:
2000025f:	34333231 38373635 32313039 36353433     1234567890123456
2000026f:	30393837                                 7890.

20000274 <_ux_system_slave_class_storage_product_rev>:
20000274:	30303032                                 2000.

20000279 <_ux_system_slave_class_storage_product_id>:
20000279:	58425355 6f747320 65676172 76656420     USBX storage dev
	...

2000028a <_ux_system_slave_class_storage_vendor_id>:
2000028a:	72757a41 4f545265                        AzureRTO..

20000294 <USBD_CustomHID_ReportDesc>:
20000294:	09ff0006 1501a101 00ff2600 40950875     .........&..u..@
200002a4:	02810109 01094095 01950291 02b10109     .....@..........
200002b4:	                                         .

200002b5 <UserClassInstance>:
200002b5:	00000103 00000000                        ...........

200002c0 <__sglue>:
200002c0:	00000000 00000003 200066d4              .........f. 

200002cc <_impure_ptr>:
200002cc:	200002d0                                ... 

200002d0 <_impure_data>:
200002d0:	00000000 200066d4 2000673c 200067a4     .....f. <g. .g. 
	...

2000031c <__global_locale>:
2000031c:	00000043 00000000 00000000 00000000     C...............
	...
2000033c:	00000043 00000000 00000000 00000000     C...............
	...
2000035c:	00000043 00000000 00000000 00000000     C...............
	...
2000037c:	00000043 00000000 00000000 00000000     C...............
	...
2000039c:	00000043 00000000 00000000 00000000     C...............
	...
200003bc:	00000043 00000000 00000000 00000000     C...............
	...
200003dc:	00000043 00000000 00000000 00000000     C...............
	...
200003fc:	0801c1bb 0801c137 00000000 08020008     ....7...........
2000040c:	0801faa2 0801ed35 0801ed35 0801ed35     ....5...5...5...
2000041c:	0801ed35 0801ed35 0801ed35 0801ed35     5...5...5...5...
2000042c:	0801ed35 0801ed35 ffffffff ffffffff     5...5...........
2000043c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000464:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000488 <FLASH_Program_Fast>:
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000488:	2280      	movs	r2, #128	@ 0x80
2000048a:	4b0c      	ldr	r3, [pc, #48]	@ (200004bc <FLASH_Program_Fast+0x34>)
{
2000048c:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048e:	695c      	ldr	r4, [r3, #20]
20000490:	02d2      	lsls	r2, r2, #11
20000492:	4322      	orrs	r2, r4
20000494:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000496:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000049a:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000049c:	1c4c      	adds	r4, r1, #1
2000049e:	34ff      	adds	r4, #255	@ 0xff
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a0:	1a40      	subs	r0, r0, r1
200004a2:	680d      	ldr	r5, [r1, #0]
200004a4:	5045      	str	r5, [r0, r1]
    src += 4U;
200004a6:	3104      	adds	r1, #4
  while (index < 64U)
200004a8:	42a1      	cmp	r1, r4
200004aa:	d1fa      	bne.n	200004a2 <FLASH_Program_Fast+0x1a>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ac:	2180      	movs	r1, #128	@ 0x80
200004ae:	0249      	lsls	r1, r1, #9
200004b0:	6918      	ldr	r0, [r3, #16]
200004b2:	4208      	tst	r0, r1
200004b4:	d1fc      	bne.n	200004b0 <FLASH_Program_Fast+0x28>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004b6:	f382 8810 	msr	PRIMASK, r2
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ba:	bd30      	pop	{r4, r5, pc}
200004bc:	40022000 	.word	0x40022000
