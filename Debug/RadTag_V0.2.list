
RadTag_V0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015808  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  080158c8  080158c8  000168c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160a4  080160a4  00018250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080160a4  080160a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080160ac  080160ac  00018250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160ac  080160ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080160b0  080160b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  080160b4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c4c  20000250  08016304  00018250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e9c  08016304  00018e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00018250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004df0c  00000000  00000000  00018278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a22b  00000000  00000000  00066184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  000703b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ad2  00000000  00000000  00072808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030741  00000000  00000000  000742da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004281d  00000000  00000000  000a4a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4954  00000000  00000000  000e7238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cbb8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000834c  00000000  00000000  001cbbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001d3f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000250 	.word	0x20000250
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080158b0 	.word	0x080158b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000254 	.word	0x20000254
 8000104:	080158b0 	.word	0x080158b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8cf 	bl	80015e0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f813 	bl	8001478 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8c1 	bl	80015e0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8b7 	bl	80015e0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f83d 	bl	8001500 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f833 	bl	8001500 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f806 	bl	8000524 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__udivmoddi4>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	4657      	mov	r7, sl
 8000528:	464e      	mov	r6, r9
 800052a:	4645      	mov	r5, r8
 800052c:	46de      	mov	lr, fp
 800052e:	b5e0      	push	{r5, r6, r7, lr}
 8000530:	0004      	movs	r4, r0
 8000532:	000d      	movs	r5, r1
 8000534:	4692      	mov	sl, r2
 8000536:	4699      	mov	r9, r3
 8000538:	b083      	sub	sp, #12
 800053a:	428b      	cmp	r3, r1
 800053c:	d830      	bhi.n	80005a0 <__udivmoddi4+0x7c>
 800053e:	d02d      	beq.n	800059c <__udivmoddi4+0x78>
 8000540:	4649      	mov	r1, r9
 8000542:	4650      	mov	r0, sl
 8000544:	f002 f85a 	bl	80025fc <__clzdi2>
 8000548:	0029      	movs	r1, r5
 800054a:	0006      	movs	r6, r0
 800054c:	0020      	movs	r0, r4
 800054e:	f002 f855 	bl	80025fc <__clzdi2>
 8000552:	1a33      	subs	r3, r6, r0
 8000554:	4698      	mov	r8, r3
 8000556:	3b20      	subs	r3, #32
 8000558:	d434      	bmi.n	80005c4 <__udivmoddi4+0xa0>
 800055a:	469b      	mov	fp, r3
 800055c:	4653      	mov	r3, sl
 800055e:	465a      	mov	r2, fp
 8000560:	4093      	lsls	r3, r2
 8000562:	4642      	mov	r2, r8
 8000564:	001f      	movs	r7, r3
 8000566:	4653      	mov	r3, sl
 8000568:	4093      	lsls	r3, r2
 800056a:	001e      	movs	r6, r3
 800056c:	42af      	cmp	r7, r5
 800056e:	d83b      	bhi.n	80005e8 <__udivmoddi4+0xc4>
 8000570:	42af      	cmp	r7, r5
 8000572:	d100      	bne.n	8000576 <__udivmoddi4+0x52>
 8000574:	e079      	b.n	800066a <__udivmoddi4+0x146>
 8000576:	465b      	mov	r3, fp
 8000578:	1ba4      	subs	r4, r4, r6
 800057a:	41bd      	sbcs	r5, r7
 800057c:	2b00      	cmp	r3, #0
 800057e:	da00      	bge.n	8000582 <__udivmoddi4+0x5e>
 8000580:	e076      	b.n	8000670 <__udivmoddi4+0x14c>
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	465a      	mov	r2, fp
 800058e:	4093      	lsls	r3, r2
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	4642      	mov	r2, r8
 8000596:	4093      	lsls	r3, r2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	e029      	b.n	80005f0 <__udivmoddi4+0xcc>
 800059c:	4282      	cmp	r2, r0
 800059e:	d9cf      	bls.n	8000540 <__udivmoddi4+0x1c>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <__udivmoddi4+0x8e>
 80005ae:	601c      	str	r4, [r3, #0]
 80005b0:	605d      	str	r5, [r3, #4]
 80005b2:	9800      	ldr	r0, [sp, #0]
 80005b4:	9901      	ldr	r1, [sp, #4]
 80005b6:	b003      	add	sp, #12
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	46bb      	mov	fp, r7
 80005bc:	46b2      	mov	sl, r6
 80005be:	46a9      	mov	r9, r5
 80005c0:	46a0      	mov	r8, r4
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c4:	4642      	mov	r2, r8
 80005c6:	469b      	mov	fp, r3
 80005c8:	2320      	movs	r3, #32
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	4652      	mov	r2, sl
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	4641      	mov	r1, r8
 80005d2:	0013      	movs	r3, r2
 80005d4:	464a      	mov	r2, r9
 80005d6:	408a      	lsls	r2, r1
 80005d8:	0017      	movs	r7, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	431f      	orrs	r7, r3
 80005de:	4653      	mov	r3, sl
 80005e0:	4093      	lsls	r3, r2
 80005e2:	001e      	movs	r6, r3
 80005e4:	42af      	cmp	r7, r5
 80005e6:	d9c3      	bls.n	8000570 <__udivmoddi4+0x4c>
 80005e8:	2200      	movs	r2, #0
 80005ea:	2300      	movs	r3, #0
 80005ec:	9200      	str	r2, [sp, #0]
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	4643      	mov	r3, r8
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0d8      	beq.n	80005a8 <__udivmoddi4+0x84>
 80005f6:	07fb      	lsls	r3, r7, #31
 80005f8:	0872      	lsrs	r2, r6, #1
 80005fa:	431a      	orrs	r2, r3
 80005fc:	4646      	mov	r6, r8
 80005fe:	087b      	lsrs	r3, r7, #1
 8000600:	e00e      	b.n	8000620 <__udivmoddi4+0xfc>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d101      	bne.n	800060a <__udivmoddi4+0xe6>
 8000606:	42a2      	cmp	r2, r4
 8000608:	d80c      	bhi.n	8000624 <__udivmoddi4+0x100>
 800060a:	1aa4      	subs	r4, r4, r2
 800060c:	419d      	sbcs	r5, r3
 800060e:	2001      	movs	r0, #1
 8000610:	1924      	adds	r4, r4, r4
 8000612:	416d      	adcs	r5, r5
 8000614:	2100      	movs	r1, #0
 8000616:	3e01      	subs	r6, #1
 8000618:	1824      	adds	r4, r4, r0
 800061a:	414d      	adcs	r5, r1
 800061c:	2e00      	cmp	r6, #0
 800061e:	d006      	beq.n	800062e <__udivmoddi4+0x10a>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d9ee      	bls.n	8000602 <__udivmoddi4+0xde>
 8000624:	3e01      	subs	r6, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2e00      	cmp	r6, #0
 800062c:	d1f8      	bne.n	8000620 <__udivmoddi4+0xfc>
 800062e:	9800      	ldr	r0, [sp, #0]
 8000630:	9901      	ldr	r1, [sp, #4]
 8000632:	465b      	mov	r3, fp
 8000634:	1900      	adds	r0, r0, r4
 8000636:	4169      	adcs	r1, r5
 8000638:	2b00      	cmp	r3, #0
 800063a:	db24      	blt.n	8000686 <__udivmoddi4+0x162>
 800063c:	002b      	movs	r3, r5
 800063e:	465a      	mov	r2, fp
 8000640:	4644      	mov	r4, r8
 8000642:	40d3      	lsrs	r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	40e2      	lsrs	r2, r4
 8000648:	001c      	movs	r4, r3
 800064a:	465b      	mov	r3, fp
 800064c:	0015      	movs	r5, r2
 800064e:	2b00      	cmp	r3, #0
 8000650:	db2a      	blt.n	80006a8 <__udivmoddi4+0x184>
 8000652:	0026      	movs	r6, r4
 8000654:	409e      	lsls	r6, r3
 8000656:	0033      	movs	r3, r6
 8000658:	0026      	movs	r6, r4
 800065a:	4647      	mov	r7, r8
 800065c:	40be      	lsls	r6, r7
 800065e:	0032      	movs	r2, r6
 8000660:	1a80      	subs	r0, r0, r2
 8000662:	4199      	sbcs	r1, r3
 8000664:	9000      	str	r0, [sp, #0]
 8000666:	9101      	str	r1, [sp, #4]
 8000668:	e79e      	b.n	80005a8 <__udivmoddi4+0x84>
 800066a:	42a3      	cmp	r3, r4
 800066c:	d8bc      	bhi.n	80005e8 <__udivmoddi4+0xc4>
 800066e:	e782      	b.n	8000576 <__udivmoddi4+0x52>
 8000670:	4642      	mov	r2, r8
 8000672:	2320      	movs	r3, #32
 8000674:	2100      	movs	r1, #0
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	9100      	str	r1, [sp, #0]
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	2201      	movs	r2, #1
 8000680:	40da      	lsrs	r2, r3
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	e785      	b.n	8000592 <__udivmoddi4+0x6e>
 8000686:	4642      	mov	r2, r8
 8000688:	2320      	movs	r3, #32
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	4646      	mov	r6, r8
 8000690:	409a      	lsls	r2, r3
 8000692:	0023      	movs	r3, r4
 8000694:	40f3      	lsrs	r3, r6
 8000696:	4644      	mov	r4, r8
 8000698:	4313      	orrs	r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	40e2      	lsrs	r2, r4
 800069e:	001c      	movs	r4, r3
 80006a0:	465b      	mov	r3, fp
 80006a2:	0015      	movs	r5, r2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dad4      	bge.n	8000652 <__udivmoddi4+0x12e>
 80006a8:	4642      	mov	r2, r8
 80006aa:	002f      	movs	r7, r5
 80006ac:	2320      	movs	r3, #32
 80006ae:	0026      	movs	r6, r4
 80006b0:	4097      	lsls	r7, r2
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	40de      	lsrs	r6, r3
 80006b6:	003b      	movs	r3, r7
 80006b8:	4333      	orrs	r3, r6
 80006ba:	e7cd      	b.n	8000658 <__udivmoddi4+0x134>

080006bc <__aeabi_dadd>:
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	464f      	mov	r7, r9
 80006c0:	4646      	mov	r6, r8
 80006c2:	46d6      	mov	lr, sl
 80006c4:	b5c0      	push	{r6, r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	9000      	str	r0, [sp, #0]
 80006ca:	9101      	str	r1, [sp, #4]
 80006cc:	030e      	lsls	r6, r1, #12
 80006ce:	004c      	lsls	r4, r1, #1
 80006d0:	0fcd      	lsrs	r5, r1, #31
 80006d2:	0a71      	lsrs	r1, r6, #9
 80006d4:	9e00      	ldr	r6, [sp, #0]
 80006d6:	005f      	lsls	r7, r3, #1
 80006d8:	0f76      	lsrs	r6, r6, #29
 80006da:	430e      	orrs	r6, r1
 80006dc:	9900      	ldr	r1, [sp, #0]
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	00c9      	lsls	r1, r1, #3
 80006e4:	4689      	mov	r9, r1
 80006e6:	0319      	lsls	r1, r3, #12
 80006e8:	0d7b      	lsrs	r3, r7, #21
 80006ea:	4698      	mov	r8, r3
 80006ec:	9b01      	ldr	r3, [sp, #4]
 80006ee:	0a49      	lsrs	r1, r1, #9
 80006f0:	0fdb      	lsrs	r3, r3, #31
 80006f2:	469c      	mov	ip, r3
 80006f4:	9b00      	ldr	r3, [sp, #0]
 80006f6:	9a00      	ldr	r2, [sp, #0]
 80006f8:	0f5b      	lsrs	r3, r3, #29
 80006fa:	430b      	orrs	r3, r1
 80006fc:	4641      	mov	r1, r8
 80006fe:	0d64      	lsrs	r4, r4, #21
 8000700:	00d2      	lsls	r2, r2, #3
 8000702:	1a61      	subs	r1, r4, r1
 8000704:	4565      	cmp	r5, ip
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x4e>
 8000708:	e0a6      	b.n	8000858 <__aeabi_dadd+0x19c>
 800070a:	2900      	cmp	r1, #0
 800070c:	dd72      	ble.n	80007f4 <__aeabi_dadd+0x138>
 800070e:	4647      	mov	r7, r8
 8000710:	2f00      	cmp	r7, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_dadd+0x5a>
 8000714:	e0dd      	b.n	80008d2 <__aeabi_dadd+0x216>
 8000716:	4fcc      	ldr	r7, [pc, #816]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000718:	42bc      	cmp	r4, r7
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x62>
 800071c:	e19a      	b.n	8000a54 <__aeabi_dadd+0x398>
 800071e:	2701      	movs	r7, #1
 8000720:	2938      	cmp	r1, #56	@ 0x38
 8000722:	dc17      	bgt.n	8000754 <__aeabi_dadd+0x98>
 8000724:	2780      	movs	r7, #128	@ 0x80
 8000726:	043f      	lsls	r7, r7, #16
 8000728:	433b      	orrs	r3, r7
 800072a:	291f      	cmp	r1, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x74>
 800072e:	e1dd      	b.n	8000aec <__aeabi_dadd+0x430>
 8000730:	2720      	movs	r7, #32
 8000732:	1a78      	subs	r0, r7, r1
 8000734:	001f      	movs	r7, r3
 8000736:	4087      	lsls	r7, r0
 8000738:	46ba      	mov	sl, r7
 800073a:	0017      	movs	r7, r2
 800073c:	40cf      	lsrs	r7, r1
 800073e:	4684      	mov	ip, r0
 8000740:	0038      	movs	r0, r7
 8000742:	4657      	mov	r7, sl
 8000744:	4307      	orrs	r7, r0
 8000746:	4660      	mov	r0, ip
 8000748:	4082      	lsls	r2, r0
 800074a:	40cb      	lsrs	r3, r1
 800074c:	1e50      	subs	r0, r2, #1
 800074e:	4182      	sbcs	r2, r0
 8000750:	1af6      	subs	r6, r6, r3
 8000752:	4317      	orrs	r7, r2
 8000754:	464b      	mov	r3, r9
 8000756:	1bdf      	subs	r7, r3, r7
 8000758:	45b9      	cmp	r9, r7
 800075a:	4180      	sbcs	r0, r0
 800075c:	4240      	negs	r0, r0
 800075e:	1a36      	subs	r6, r6, r0
 8000760:	0233      	lsls	r3, r6, #8
 8000762:	d400      	bmi.n	8000766 <__aeabi_dadd+0xaa>
 8000764:	e0ff      	b.n	8000966 <__aeabi_dadd+0x2aa>
 8000766:	0276      	lsls	r6, r6, #9
 8000768:	0a76      	lsrs	r6, r6, #9
 800076a:	2e00      	cmp	r6, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0xb4>
 800076e:	e13c      	b.n	80009ea <__aeabi_dadd+0x32e>
 8000770:	0030      	movs	r0, r6
 8000772:	f7ff fe99 	bl	80004a8 <__clzsi2>
 8000776:	0003      	movs	r3, r0
 8000778:	3b08      	subs	r3, #8
 800077a:	2120      	movs	r1, #32
 800077c:	0038      	movs	r0, r7
 800077e:	1aca      	subs	r2, r1, r3
 8000780:	40d0      	lsrs	r0, r2
 8000782:	409e      	lsls	r6, r3
 8000784:	0002      	movs	r2, r0
 8000786:	409f      	lsls	r7, r3
 8000788:	4332      	orrs	r2, r6
 800078a:	429c      	cmp	r4, r3
 800078c:	dd00      	ble.n	8000790 <__aeabi_dadd+0xd4>
 800078e:	e1a6      	b.n	8000ade <__aeabi_dadd+0x422>
 8000790:	1b18      	subs	r0, r3, r4
 8000792:	3001      	adds	r0, #1
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	003e      	movs	r6, r7
 8000798:	408f      	lsls	r7, r1
 800079a:	40c6      	lsrs	r6, r0
 800079c:	1e7b      	subs	r3, r7, #1
 800079e:	419f      	sbcs	r7, r3
 80007a0:	0013      	movs	r3, r2
 80007a2:	408b      	lsls	r3, r1
 80007a4:	4337      	orrs	r7, r6
 80007a6:	431f      	orrs	r7, r3
 80007a8:	40c2      	lsrs	r2, r0
 80007aa:	003b      	movs	r3, r7
 80007ac:	0016      	movs	r6, r2
 80007ae:	2400      	movs	r4, #0
 80007b0:	4313      	orrs	r3, r2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0xfa>
 80007b4:	e1df      	b.n	8000b76 <__aeabi_dadd+0x4ba>
 80007b6:	077b      	lsls	r3, r7, #29
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x100>
 80007ba:	e332      	b.n	8000e22 <__aeabi_dadd+0x766>
 80007bc:	230f      	movs	r3, #15
 80007be:	003a      	movs	r2, r7
 80007c0:	403b      	ands	r3, r7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d004      	beq.n	80007d0 <__aeabi_dadd+0x114>
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	42ba      	cmp	r2, r7
 80007ca:	41bf      	sbcs	r7, r7
 80007cc:	427f      	negs	r7, r7
 80007ce:	19f6      	adds	r6, r6, r7
 80007d0:	0233      	lsls	r3, r6, #8
 80007d2:	d400      	bmi.n	80007d6 <__aeabi_dadd+0x11a>
 80007d4:	e323      	b.n	8000e1e <__aeabi_dadd+0x762>
 80007d6:	4b9c      	ldr	r3, [pc, #624]	@ (8000a48 <__aeabi_dadd+0x38c>)
 80007d8:	3401      	adds	r4, #1
 80007da:	429c      	cmp	r4, r3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x124>
 80007de:	e0b4      	b.n	800094a <__aeabi_dadd+0x28e>
 80007e0:	4b9a      	ldr	r3, [pc, #616]	@ (8000a4c <__aeabi_dadd+0x390>)
 80007e2:	0564      	lsls	r4, r4, #21
 80007e4:	401e      	ands	r6, r3
 80007e6:	0d64      	lsrs	r4, r4, #21
 80007e8:	0777      	lsls	r7, r6, #29
 80007ea:	08d2      	lsrs	r2, r2, #3
 80007ec:	0276      	lsls	r6, r6, #9
 80007ee:	4317      	orrs	r7, r2
 80007f0:	0b36      	lsrs	r6, r6, #12
 80007f2:	e0ac      	b.n	800094e <__aeabi_dadd+0x292>
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x13e>
 80007f8:	e07e      	b.n	80008f8 <__aeabi_dadd+0x23c>
 80007fa:	4641      	mov	r1, r8
 80007fc:	1b09      	subs	r1, r1, r4
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_dadd+0x148>
 8000802:	e160      	b.n	8000ac6 <__aeabi_dadd+0x40a>
 8000804:	0034      	movs	r4, r6
 8000806:	4648      	mov	r0, r9
 8000808:	4304      	orrs	r4, r0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x152>
 800080c:	e1c9      	b.n	8000ba2 <__aeabi_dadd+0x4e6>
 800080e:	1e4c      	subs	r4, r1, #1
 8000810:	2901      	cmp	r1, #1
 8000812:	d100      	bne.n	8000816 <__aeabi_dadd+0x15a>
 8000814:	e22e      	b.n	8000c74 <__aeabi_dadd+0x5b8>
 8000816:	4d8c      	ldr	r5, [pc, #560]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000818:	42a9      	cmp	r1, r5
 800081a:	d100      	bne.n	800081e <__aeabi_dadd+0x162>
 800081c:	e224      	b.n	8000c68 <__aeabi_dadd+0x5ac>
 800081e:	2701      	movs	r7, #1
 8000820:	2c38      	cmp	r4, #56	@ 0x38
 8000822:	dc11      	bgt.n	8000848 <__aeabi_dadd+0x18c>
 8000824:	0021      	movs	r1, r4
 8000826:	291f      	cmp	r1, #31
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0x170>
 800082a:	e20b      	b.n	8000c44 <__aeabi_dadd+0x588>
 800082c:	2420      	movs	r4, #32
 800082e:	0037      	movs	r7, r6
 8000830:	4648      	mov	r0, r9
 8000832:	1a64      	subs	r4, r4, r1
 8000834:	40a7      	lsls	r7, r4
 8000836:	40c8      	lsrs	r0, r1
 8000838:	4307      	orrs	r7, r0
 800083a:	4648      	mov	r0, r9
 800083c:	40a0      	lsls	r0, r4
 800083e:	40ce      	lsrs	r6, r1
 8000840:	1e44      	subs	r4, r0, #1
 8000842:	41a0      	sbcs	r0, r4
 8000844:	1b9b      	subs	r3, r3, r6
 8000846:	4307      	orrs	r7, r0
 8000848:	1bd7      	subs	r7, r2, r7
 800084a:	42ba      	cmp	r2, r7
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	4665      	mov	r5, ip
 8000852:	4644      	mov	r4, r8
 8000854:	1a9e      	subs	r6, r3, r2
 8000856:	e783      	b.n	8000760 <__aeabi_dadd+0xa4>
 8000858:	2900      	cmp	r1, #0
 800085a:	dc00      	bgt.n	800085e <__aeabi_dadd+0x1a2>
 800085c:	e09c      	b.n	8000998 <__aeabi_dadd+0x2dc>
 800085e:	4647      	mov	r7, r8
 8000860:	2f00      	cmp	r7, #0
 8000862:	d167      	bne.n	8000934 <__aeabi_dadd+0x278>
 8000864:	001f      	movs	r7, r3
 8000866:	4317      	orrs	r7, r2
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1b0>
 800086a:	e0e4      	b.n	8000a36 <__aeabi_dadd+0x37a>
 800086c:	1e48      	subs	r0, r1, #1
 800086e:	2901      	cmp	r1, #1
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x1b8>
 8000872:	e19b      	b.n	8000bac <__aeabi_dadd+0x4f0>
 8000874:	4f74      	ldr	r7, [pc, #464]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000876:	42b9      	cmp	r1, r7
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x1c0>
 800087a:	e0eb      	b.n	8000a54 <__aeabi_dadd+0x398>
 800087c:	2701      	movs	r7, #1
 800087e:	0001      	movs	r1, r0
 8000880:	2838      	cmp	r0, #56	@ 0x38
 8000882:	dc11      	bgt.n	80008a8 <__aeabi_dadd+0x1ec>
 8000884:	291f      	cmp	r1, #31
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x1ce>
 8000888:	e1c7      	b.n	8000c1a <__aeabi_dadd+0x55e>
 800088a:	2720      	movs	r7, #32
 800088c:	1a78      	subs	r0, r7, r1
 800088e:	001f      	movs	r7, r3
 8000890:	4684      	mov	ip, r0
 8000892:	4087      	lsls	r7, r0
 8000894:	0010      	movs	r0, r2
 8000896:	40c8      	lsrs	r0, r1
 8000898:	4307      	orrs	r7, r0
 800089a:	4660      	mov	r0, ip
 800089c:	4082      	lsls	r2, r0
 800089e:	40cb      	lsrs	r3, r1
 80008a0:	1e50      	subs	r0, r2, #1
 80008a2:	4182      	sbcs	r2, r0
 80008a4:	18f6      	adds	r6, r6, r3
 80008a6:	4317      	orrs	r7, r2
 80008a8:	444f      	add	r7, r9
 80008aa:	454f      	cmp	r7, r9
 80008ac:	4180      	sbcs	r0, r0
 80008ae:	4240      	negs	r0, r0
 80008b0:	1836      	adds	r6, r6, r0
 80008b2:	0233      	lsls	r3, r6, #8
 80008b4:	d557      	bpl.n	8000966 <__aeabi_dadd+0x2aa>
 80008b6:	4b64      	ldr	r3, [pc, #400]	@ (8000a48 <__aeabi_dadd+0x38c>)
 80008b8:	3401      	adds	r4, #1
 80008ba:	429c      	cmp	r4, r3
 80008bc:	d045      	beq.n	800094a <__aeabi_dadd+0x28e>
 80008be:	2101      	movs	r1, #1
 80008c0:	4b62      	ldr	r3, [pc, #392]	@ (8000a4c <__aeabi_dadd+0x390>)
 80008c2:	087a      	lsrs	r2, r7, #1
 80008c4:	401e      	ands	r6, r3
 80008c6:	4039      	ands	r1, r7
 80008c8:	430a      	orrs	r2, r1
 80008ca:	07f7      	lsls	r7, r6, #31
 80008cc:	4317      	orrs	r7, r2
 80008ce:	0876      	lsrs	r6, r6, #1
 80008d0:	e771      	b.n	80007b6 <__aeabi_dadd+0xfa>
 80008d2:	001f      	movs	r7, r3
 80008d4:	4317      	orrs	r7, r2
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x21e>
 80008d8:	e0ad      	b.n	8000a36 <__aeabi_dadd+0x37a>
 80008da:	1e4f      	subs	r7, r1, #1
 80008dc:	46bc      	mov	ip, r7
 80008de:	2901      	cmp	r1, #1
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x228>
 80008e2:	e182      	b.n	8000bea <__aeabi_dadd+0x52e>
 80008e4:	4f58      	ldr	r7, [pc, #352]	@ (8000a48 <__aeabi_dadd+0x38c>)
 80008e6:	42b9      	cmp	r1, r7
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x230>
 80008ea:	e190      	b.n	8000c0e <__aeabi_dadd+0x552>
 80008ec:	4661      	mov	r1, ip
 80008ee:	2701      	movs	r7, #1
 80008f0:	2938      	cmp	r1, #56	@ 0x38
 80008f2:	dd00      	ble.n	80008f6 <__aeabi_dadd+0x23a>
 80008f4:	e72e      	b.n	8000754 <__aeabi_dadd+0x98>
 80008f6:	e718      	b.n	800072a <__aeabi_dadd+0x6e>
 80008f8:	4f55      	ldr	r7, [pc, #340]	@ (8000a50 <__aeabi_dadd+0x394>)
 80008fa:	1c61      	adds	r1, r4, #1
 80008fc:	4239      	tst	r1, r7
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x246>
 8000900:	e0d0      	b.n	8000aa4 <__aeabi_dadd+0x3e8>
 8000902:	0031      	movs	r1, r6
 8000904:	4648      	mov	r0, r9
 8000906:	001f      	movs	r7, r3
 8000908:	4301      	orrs	r1, r0
 800090a:	4317      	orrs	r7, r2
 800090c:	2c00      	cmp	r4, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x256>
 8000910:	e13d      	b.n	8000b8e <__aeabi_dadd+0x4d2>
 8000912:	2900      	cmp	r1, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x25c>
 8000916:	e1bc      	b.n	8000c92 <__aeabi_dadd+0x5d6>
 8000918:	2f00      	cmp	r7, #0
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x262>
 800091c:	e1bf      	b.n	8000c9e <__aeabi_dadd+0x5e2>
 800091e:	464b      	mov	r3, r9
 8000920:	2100      	movs	r1, #0
 8000922:	08d8      	lsrs	r0, r3, #3
 8000924:	0777      	lsls	r7, r6, #29
 8000926:	4307      	orrs	r7, r0
 8000928:	08f0      	lsrs	r0, r6, #3
 800092a:	0306      	lsls	r6, r0, #12
 800092c:	054c      	lsls	r4, r1, #21
 800092e:	0b36      	lsrs	r6, r6, #12
 8000930:	0d64      	lsrs	r4, r4, #21
 8000932:	e00c      	b.n	800094e <__aeabi_dadd+0x292>
 8000934:	4f44      	ldr	r7, [pc, #272]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000936:	42bc      	cmp	r4, r7
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x280>
 800093a:	e08b      	b.n	8000a54 <__aeabi_dadd+0x398>
 800093c:	2701      	movs	r7, #1
 800093e:	2938      	cmp	r1, #56	@ 0x38
 8000940:	dcb2      	bgt.n	80008a8 <__aeabi_dadd+0x1ec>
 8000942:	2780      	movs	r7, #128	@ 0x80
 8000944:	043f      	lsls	r7, r7, #16
 8000946:	433b      	orrs	r3, r7
 8000948:	e79c      	b.n	8000884 <__aeabi_dadd+0x1c8>
 800094a:	2600      	movs	r6, #0
 800094c:	2700      	movs	r7, #0
 800094e:	0524      	lsls	r4, r4, #20
 8000950:	4334      	orrs	r4, r6
 8000952:	07ed      	lsls	r5, r5, #31
 8000954:	432c      	orrs	r4, r5
 8000956:	0038      	movs	r0, r7
 8000958:	0021      	movs	r1, r4
 800095a:	b002      	add	sp, #8
 800095c:	bce0      	pop	{r5, r6, r7}
 800095e:	46ba      	mov	sl, r7
 8000960:	46b1      	mov	r9, r6
 8000962:	46a8      	mov	r8, r5
 8000964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	d004      	beq.n	8000974 <__aeabi_dadd+0x2b8>
 800096a:	230f      	movs	r3, #15
 800096c:	403b      	ands	r3, r7
 800096e:	2b04      	cmp	r3, #4
 8000970:	d000      	beq.n	8000974 <__aeabi_dadd+0x2b8>
 8000972:	e728      	b.n	80007c6 <__aeabi_dadd+0x10a>
 8000974:	08f8      	lsrs	r0, r7, #3
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000978:	0777      	lsls	r7, r6, #29
 800097a:	4307      	orrs	r7, r0
 800097c:	08f0      	lsrs	r0, r6, #3
 800097e:	429c      	cmp	r4, r3
 8000980:	d000      	beq.n	8000984 <__aeabi_dadd+0x2c8>
 8000982:	e24a      	b.n	8000e1a <__aeabi_dadd+0x75e>
 8000984:	003b      	movs	r3, r7
 8000986:	4303      	orrs	r3, r0
 8000988:	d059      	beq.n	8000a3e <__aeabi_dadd+0x382>
 800098a:	2680      	movs	r6, #128	@ 0x80
 800098c:	0336      	lsls	r6, r6, #12
 800098e:	4306      	orrs	r6, r0
 8000990:	0336      	lsls	r6, r6, #12
 8000992:	4c2d      	ldr	r4, [pc, #180]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000994:	0b36      	lsrs	r6, r6, #12
 8000996:	e7da      	b.n	800094e <__aeabi_dadd+0x292>
 8000998:	2900      	cmp	r1, #0
 800099a:	d061      	beq.n	8000a60 <__aeabi_dadd+0x3a4>
 800099c:	4641      	mov	r1, r8
 800099e:	1b09      	subs	r1, r1, r4
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x2ea>
 80009a4:	e0b9      	b.n	8000b1a <__aeabi_dadd+0x45e>
 80009a6:	4c28      	ldr	r4, [pc, #160]	@ (8000a48 <__aeabi_dadd+0x38c>)
 80009a8:	45a0      	cmp	r8, r4
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x2f2>
 80009ac:	e1a5      	b.n	8000cfa <__aeabi_dadd+0x63e>
 80009ae:	2701      	movs	r7, #1
 80009b0:	2938      	cmp	r1, #56	@ 0x38
 80009b2:	dc13      	bgt.n	80009dc <__aeabi_dadd+0x320>
 80009b4:	2480      	movs	r4, #128	@ 0x80
 80009b6:	0424      	lsls	r4, r4, #16
 80009b8:	4326      	orrs	r6, r4
 80009ba:	291f      	cmp	r1, #31
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x304>
 80009be:	e1c8      	b.n	8000d52 <__aeabi_dadd+0x696>
 80009c0:	2420      	movs	r4, #32
 80009c2:	0037      	movs	r7, r6
 80009c4:	4648      	mov	r0, r9
 80009c6:	1a64      	subs	r4, r4, r1
 80009c8:	40a7      	lsls	r7, r4
 80009ca:	40c8      	lsrs	r0, r1
 80009cc:	4307      	orrs	r7, r0
 80009ce:	4648      	mov	r0, r9
 80009d0:	40a0      	lsls	r0, r4
 80009d2:	40ce      	lsrs	r6, r1
 80009d4:	1e44      	subs	r4, r0, #1
 80009d6:	41a0      	sbcs	r0, r4
 80009d8:	199b      	adds	r3, r3, r6
 80009da:	4307      	orrs	r7, r0
 80009dc:	18bf      	adds	r7, r7, r2
 80009de:	4297      	cmp	r7, r2
 80009e0:	4192      	sbcs	r2, r2
 80009e2:	4252      	negs	r2, r2
 80009e4:	4644      	mov	r4, r8
 80009e6:	18d6      	adds	r6, r2, r3
 80009e8:	e763      	b.n	80008b2 <__aeabi_dadd+0x1f6>
 80009ea:	0038      	movs	r0, r7
 80009ec:	f7ff fd5c 	bl	80004a8 <__clzsi2>
 80009f0:	0003      	movs	r3, r0
 80009f2:	3318      	adds	r3, #24
 80009f4:	2b1f      	cmp	r3, #31
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x33e>
 80009f8:	e6bf      	b.n	800077a <__aeabi_dadd+0xbe>
 80009fa:	003a      	movs	r2, r7
 80009fc:	3808      	subs	r0, #8
 80009fe:	4082      	lsls	r2, r0
 8000a00:	429c      	cmp	r4, r3
 8000a02:	dd00      	ble.n	8000a06 <__aeabi_dadd+0x34a>
 8000a04:	e083      	b.n	8000b0e <__aeabi_dadd+0x452>
 8000a06:	1b1b      	subs	r3, r3, r4
 8000a08:	1c58      	adds	r0, r3, #1
 8000a0a:	281f      	cmp	r0, #31
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_dadd+0x354>
 8000a0e:	e1b4      	b.n	8000d7a <__aeabi_dadd+0x6be>
 8000a10:	0017      	movs	r7, r2
 8000a12:	3b1f      	subs	r3, #31
 8000a14:	40df      	lsrs	r7, r3
 8000a16:	2820      	cmp	r0, #32
 8000a18:	d005      	beq.n	8000a26 <__aeabi_dadd+0x36a>
 8000a1a:	2340      	movs	r3, #64	@ 0x40
 8000a1c:	1a1b      	subs	r3, r3, r0
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	419a      	sbcs	r2, r3
 8000a24:	4317      	orrs	r7, r2
 8000a26:	2400      	movs	r4, #0
 8000a28:	2f00      	cmp	r7, #0
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_dadd+0x386>
 8000a2c:	077b      	lsls	r3, r7, #29
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_dadd+0x376>
 8000a30:	e6c4      	b.n	80007bc <__aeabi_dadd+0x100>
 8000a32:	0026      	movs	r6, r4
 8000a34:	e79e      	b.n	8000974 <__aeabi_dadd+0x2b8>
 8000a36:	464b      	mov	r3, r9
 8000a38:	000c      	movs	r4, r1
 8000a3a:	08d8      	lsrs	r0, r3, #3
 8000a3c:	e79b      	b.n	8000976 <__aeabi_dadd+0x2ba>
 8000a3e:	2700      	movs	r7, #0
 8000a40:	4c01      	ldr	r4, [pc, #4]	@ (8000a48 <__aeabi_dadd+0x38c>)
 8000a42:	2600      	movs	r6, #0
 8000a44:	e783      	b.n	800094e <__aeabi_dadd+0x292>
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	000007ff 	.word	0x000007ff
 8000a4c:	ff7fffff 	.word	0xff7fffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	464b      	mov	r3, r9
 8000a56:	0777      	lsls	r7, r6, #29
 8000a58:	08d8      	lsrs	r0, r3, #3
 8000a5a:	4307      	orrs	r7, r0
 8000a5c:	08f0      	lsrs	r0, r6, #3
 8000a5e:	e791      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000a60:	4fcd      	ldr	r7, [pc, #820]	@ (8000d98 <__aeabi_dadd+0x6dc>)
 8000a62:	1c61      	adds	r1, r4, #1
 8000a64:	4239      	tst	r1, r7
 8000a66:	d16b      	bne.n	8000b40 <__aeabi_dadd+0x484>
 8000a68:	0031      	movs	r1, r6
 8000a6a:	4648      	mov	r0, r9
 8000a6c:	4301      	orrs	r1, r0
 8000a6e:	2c00      	cmp	r4, #0
 8000a70:	d000      	beq.n	8000a74 <__aeabi_dadd+0x3b8>
 8000a72:	e14b      	b.n	8000d0c <__aeabi_dadd+0x650>
 8000a74:	001f      	movs	r7, r3
 8000a76:	4317      	orrs	r7, r2
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x3c2>
 8000a7c:	e181      	b.n	8000d82 <__aeabi_dadd+0x6c6>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x3c8>
 8000a82:	e74c      	b.n	800091e <__aeabi_dadd+0x262>
 8000a84:	444a      	add	r2, r9
 8000a86:	454a      	cmp	r2, r9
 8000a88:	4180      	sbcs	r0, r0
 8000a8a:	18f6      	adds	r6, r6, r3
 8000a8c:	4240      	negs	r0, r0
 8000a8e:	1836      	adds	r6, r6, r0
 8000a90:	0233      	lsls	r3, r6, #8
 8000a92:	d500      	bpl.n	8000a96 <__aeabi_dadd+0x3da>
 8000a94:	e1b0      	b.n	8000df8 <__aeabi_dadd+0x73c>
 8000a96:	0017      	movs	r7, r2
 8000a98:	4691      	mov	r9, r2
 8000a9a:	4337      	orrs	r7, r6
 8000a9c:	d000      	beq.n	8000aa0 <__aeabi_dadd+0x3e4>
 8000a9e:	e73e      	b.n	800091e <__aeabi_dadd+0x262>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e754      	b.n	800094e <__aeabi_dadd+0x292>
 8000aa4:	4649      	mov	r1, r9
 8000aa6:	1a89      	subs	r1, r1, r2
 8000aa8:	4688      	mov	r8, r1
 8000aaa:	45c1      	cmp	r9, r8
 8000aac:	41bf      	sbcs	r7, r7
 8000aae:	1af1      	subs	r1, r6, r3
 8000ab0:	427f      	negs	r7, r7
 8000ab2:	1bc9      	subs	r1, r1, r7
 8000ab4:	020f      	lsls	r7, r1, #8
 8000ab6:	d461      	bmi.n	8000b7c <__aeabi_dadd+0x4c0>
 8000ab8:	4647      	mov	r7, r8
 8000aba:	430f      	orrs	r7, r1
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x404>
 8000abe:	e0bd      	b.n	8000c3c <__aeabi_dadd+0x580>
 8000ac0:	000e      	movs	r6, r1
 8000ac2:	4647      	mov	r7, r8
 8000ac4:	e651      	b.n	800076a <__aeabi_dadd+0xae>
 8000ac6:	4cb5      	ldr	r4, [pc, #724]	@ (8000d9c <__aeabi_dadd+0x6e0>)
 8000ac8:	45a0      	cmp	r8, r4
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x412>
 8000acc:	e100      	b.n	8000cd0 <__aeabi_dadd+0x614>
 8000ace:	2701      	movs	r7, #1
 8000ad0:	2938      	cmp	r1, #56	@ 0x38
 8000ad2:	dd00      	ble.n	8000ad6 <__aeabi_dadd+0x41a>
 8000ad4:	e6b8      	b.n	8000848 <__aeabi_dadd+0x18c>
 8000ad6:	2480      	movs	r4, #128	@ 0x80
 8000ad8:	0424      	lsls	r4, r4, #16
 8000ada:	4326      	orrs	r6, r4
 8000adc:	e6a3      	b.n	8000826 <__aeabi_dadd+0x16a>
 8000ade:	4eb0      	ldr	r6, [pc, #704]	@ (8000da0 <__aeabi_dadd+0x6e4>)
 8000ae0:	1ae4      	subs	r4, r4, r3
 8000ae2:	4016      	ands	r6, r2
 8000ae4:	077b      	lsls	r3, r7, #29
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x42e>
 8000ae8:	e73f      	b.n	800096a <__aeabi_dadd+0x2ae>
 8000aea:	e743      	b.n	8000974 <__aeabi_dadd+0x2b8>
 8000aec:	000f      	movs	r7, r1
 8000aee:	0018      	movs	r0, r3
 8000af0:	3f20      	subs	r7, #32
 8000af2:	40f8      	lsrs	r0, r7
 8000af4:	4684      	mov	ip, r0
 8000af6:	2920      	cmp	r1, #32
 8000af8:	d003      	beq.n	8000b02 <__aeabi_dadd+0x446>
 8000afa:	2740      	movs	r7, #64	@ 0x40
 8000afc:	1a79      	subs	r1, r7, r1
 8000afe:	408b      	lsls	r3, r1
 8000b00:	431a      	orrs	r2, r3
 8000b02:	1e53      	subs	r3, r2, #1
 8000b04:	419a      	sbcs	r2, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	0017      	movs	r7, r2
 8000b0a:	431f      	orrs	r7, r3
 8000b0c:	e622      	b.n	8000754 <__aeabi_dadd+0x98>
 8000b0e:	48a4      	ldr	r0, [pc, #656]	@ (8000da0 <__aeabi_dadd+0x6e4>)
 8000b10:	1ae1      	subs	r1, r4, r3
 8000b12:	4010      	ands	r0, r2
 8000b14:	0747      	lsls	r7, r0, #29
 8000b16:	08c0      	lsrs	r0, r0, #3
 8000b18:	e707      	b.n	800092a <__aeabi_dadd+0x26e>
 8000b1a:	0034      	movs	r4, r6
 8000b1c:	4648      	mov	r0, r9
 8000b1e:	4304      	orrs	r4, r0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x468>
 8000b22:	e0fa      	b.n	8000d1a <__aeabi_dadd+0x65e>
 8000b24:	1e4c      	subs	r4, r1, #1
 8000b26:	2901      	cmp	r1, #1
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x470>
 8000b2a:	e0d7      	b.n	8000cdc <__aeabi_dadd+0x620>
 8000b2c:	4f9b      	ldr	r7, [pc, #620]	@ (8000d9c <__aeabi_dadd+0x6e0>)
 8000b2e:	42b9      	cmp	r1, r7
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x478>
 8000b32:	e0e2      	b.n	8000cfa <__aeabi_dadd+0x63e>
 8000b34:	2701      	movs	r7, #1
 8000b36:	2c38      	cmp	r4, #56	@ 0x38
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_dadd+0x480>
 8000b3a:	e74f      	b.n	80009dc <__aeabi_dadd+0x320>
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	e73c      	b.n	80009ba <__aeabi_dadd+0x2fe>
 8000b40:	4c96      	ldr	r4, [pc, #600]	@ (8000d9c <__aeabi_dadd+0x6e0>)
 8000b42:	42a1      	cmp	r1, r4
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x48c>
 8000b46:	e0dd      	b.n	8000d04 <__aeabi_dadd+0x648>
 8000b48:	444a      	add	r2, r9
 8000b4a:	454a      	cmp	r2, r9
 8000b4c:	4180      	sbcs	r0, r0
 8000b4e:	18f3      	adds	r3, r6, r3
 8000b50:	4240      	negs	r0, r0
 8000b52:	1818      	adds	r0, r3, r0
 8000b54:	07c7      	lsls	r7, r0, #31
 8000b56:	0852      	lsrs	r2, r2, #1
 8000b58:	4317      	orrs	r7, r2
 8000b5a:	0846      	lsrs	r6, r0, #1
 8000b5c:	0752      	lsls	r2, r2, #29
 8000b5e:	d005      	beq.n	8000b6c <__aeabi_dadd+0x4b0>
 8000b60:	220f      	movs	r2, #15
 8000b62:	000c      	movs	r4, r1
 8000b64:	403a      	ands	r2, r7
 8000b66:	2a04      	cmp	r2, #4
 8000b68:	d000      	beq.n	8000b6c <__aeabi_dadd+0x4b0>
 8000b6a:	e62c      	b.n	80007c6 <__aeabi_dadd+0x10a>
 8000b6c:	0776      	lsls	r6, r6, #29
 8000b6e:	08ff      	lsrs	r7, r7, #3
 8000b70:	4337      	orrs	r7, r6
 8000b72:	0900      	lsrs	r0, r0, #4
 8000b74:	e6d9      	b.n	800092a <__aeabi_dadd+0x26e>
 8000b76:	2700      	movs	r7, #0
 8000b78:	2600      	movs	r6, #0
 8000b7a:	e6e8      	b.n	800094e <__aeabi_dadd+0x292>
 8000b7c:	4649      	mov	r1, r9
 8000b7e:	1a57      	subs	r7, r2, r1
 8000b80:	42ba      	cmp	r2, r7
 8000b82:	4192      	sbcs	r2, r2
 8000b84:	1b9e      	subs	r6, r3, r6
 8000b86:	4252      	negs	r2, r2
 8000b88:	4665      	mov	r5, ip
 8000b8a:	1ab6      	subs	r6, r6, r2
 8000b8c:	e5ed      	b.n	800076a <__aeabi_dadd+0xae>
 8000b8e:	2900      	cmp	r1, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dadd+0x4d8>
 8000b92:	e0c6      	b.n	8000d22 <__aeabi_dadd+0x666>
 8000b94:	2f00      	cmp	r7, #0
 8000b96:	d167      	bne.n	8000c68 <__aeabi_dadd+0x5ac>
 8000b98:	2680      	movs	r6, #128	@ 0x80
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	4c7f      	ldr	r4, [pc, #508]	@ (8000d9c <__aeabi_dadd+0x6e0>)
 8000b9e:	0336      	lsls	r6, r6, #12
 8000ba0:	e6d5      	b.n	800094e <__aeabi_dadd+0x292>
 8000ba2:	4665      	mov	r5, ip
 8000ba4:	000c      	movs	r4, r1
 8000ba6:	001e      	movs	r6, r3
 8000ba8:	08d0      	lsrs	r0, r2, #3
 8000baa:	e6e4      	b.n	8000976 <__aeabi_dadd+0x2ba>
 8000bac:	444a      	add	r2, r9
 8000bae:	454a      	cmp	r2, r9
 8000bb0:	4180      	sbcs	r0, r0
 8000bb2:	18f3      	adds	r3, r6, r3
 8000bb4:	4240      	negs	r0, r0
 8000bb6:	1818      	adds	r0, r3, r0
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0203      	lsls	r3, r0, #8
 8000bbc:	d400      	bmi.n	8000bc0 <__aeabi_dadd+0x504>
 8000bbe:	e096      	b.n	8000cee <__aeabi_dadd+0x632>
 8000bc0:	4b77      	ldr	r3, [pc, #476]	@ (8000da0 <__aeabi_dadd+0x6e4>)
 8000bc2:	0849      	lsrs	r1, r1, #1
 8000bc4:	4018      	ands	r0, r3
 8000bc6:	07c3      	lsls	r3, r0, #31
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	0844      	lsrs	r4, r0, #1
 8000bcc:	0749      	lsls	r1, r1, #29
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x516>
 8000bd0:	e129      	b.n	8000e26 <__aeabi_dadd+0x76a>
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	2a04      	cmp	r2, #4
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dadd+0x520>
 8000bda:	e0ea      	b.n	8000db2 <__aeabi_dadd+0x6f6>
 8000bdc:	1d1f      	adds	r7, r3, #4
 8000bde:	429f      	cmp	r7, r3
 8000be0:	41b6      	sbcs	r6, r6
 8000be2:	4276      	negs	r6, r6
 8000be4:	1936      	adds	r6, r6, r4
 8000be6:	2402      	movs	r4, #2
 8000be8:	e6c4      	b.n	8000974 <__aeabi_dadd+0x2b8>
 8000bea:	4649      	mov	r1, r9
 8000bec:	1a8f      	subs	r7, r1, r2
 8000bee:	45b9      	cmp	r9, r7
 8000bf0:	4180      	sbcs	r0, r0
 8000bf2:	1af6      	subs	r6, r6, r3
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	1a36      	subs	r6, r6, r0
 8000bf8:	0233      	lsls	r3, r6, #8
 8000bfa:	d406      	bmi.n	8000c0a <__aeabi_dadd+0x54e>
 8000bfc:	0773      	lsls	r3, r6, #29
 8000bfe:	08ff      	lsrs	r7, r7, #3
 8000c00:	2101      	movs	r1, #1
 8000c02:	431f      	orrs	r7, r3
 8000c04:	08f0      	lsrs	r0, r6, #3
 8000c06:	e690      	b.n	800092a <__aeabi_dadd+0x26e>
 8000c08:	4665      	mov	r5, ip
 8000c0a:	2401      	movs	r4, #1
 8000c0c:	e5ab      	b.n	8000766 <__aeabi_dadd+0xaa>
 8000c0e:	464b      	mov	r3, r9
 8000c10:	0777      	lsls	r7, r6, #29
 8000c12:	08d8      	lsrs	r0, r3, #3
 8000c14:	4307      	orrs	r7, r0
 8000c16:	08f0      	lsrs	r0, r6, #3
 8000c18:	e6b4      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000c1a:	000f      	movs	r7, r1
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	3f20      	subs	r7, #32
 8000c20:	40f8      	lsrs	r0, r7
 8000c22:	4684      	mov	ip, r0
 8000c24:	2920      	cmp	r1, #32
 8000c26:	d003      	beq.n	8000c30 <__aeabi_dadd+0x574>
 8000c28:	2740      	movs	r7, #64	@ 0x40
 8000c2a:	1a79      	subs	r1, r7, r1
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	1e53      	subs	r3, r2, #1
 8000c32:	419a      	sbcs	r2, r3
 8000c34:	4663      	mov	r3, ip
 8000c36:	0017      	movs	r7, r2
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	e635      	b.n	80008a8 <__aeabi_dadd+0x1ec>
 8000c3c:	2500      	movs	r5, #0
 8000c3e:	2400      	movs	r4, #0
 8000c40:	2600      	movs	r6, #0
 8000c42:	e684      	b.n	800094e <__aeabi_dadd+0x292>
 8000c44:	000c      	movs	r4, r1
 8000c46:	0035      	movs	r5, r6
 8000c48:	3c20      	subs	r4, #32
 8000c4a:	40e5      	lsrs	r5, r4
 8000c4c:	2920      	cmp	r1, #32
 8000c4e:	d005      	beq.n	8000c5c <__aeabi_dadd+0x5a0>
 8000c50:	2440      	movs	r4, #64	@ 0x40
 8000c52:	1a61      	subs	r1, r4, r1
 8000c54:	408e      	lsls	r6, r1
 8000c56:	4649      	mov	r1, r9
 8000c58:	4331      	orrs	r1, r6
 8000c5a:	4689      	mov	r9, r1
 8000c5c:	4648      	mov	r0, r9
 8000c5e:	1e41      	subs	r1, r0, #1
 8000c60:	4188      	sbcs	r0, r1
 8000c62:	0007      	movs	r7, r0
 8000c64:	432f      	orrs	r7, r5
 8000c66:	e5ef      	b.n	8000848 <__aeabi_dadd+0x18c>
 8000c68:	08d2      	lsrs	r2, r2, #3
 8000c6a:	075f      	lsls	r7, r3, #29
 8000c6c:	4665      	mov	r5, ip
 8000c6e:	4317      	orrs	r7, r2
 8000c70:	08d8      	lsrs	r0, r3, #3
 8000c72:	e687      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000c74:	1a17      	subs	r7, r2, r0
 8000c76:	42ba      	cmp	r2, r7
 8000c78:	4192      	sbcs	r2, r2
 8000c7a:	1b9e      	subs	r6, r3, r6
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	1ab6      	subs	r6, r6, r2
 8000c80:	0233      	lsls	r3, r6, #8
 8000c82:	d4c1      	bmi.n	8000c08 <__aeabi_dadd+0x54c>
 8000c84:	0773      	lsls	r3, r6, #29
 8000c86:	08ff      	lsrs	r7, r7, #3
 8000c88:	4665      	mov	r5, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	431f      	orrs	r7, r3
 8000c8e:	08f0      	lsrs	r0, r6, #3
 8000c90:	e64b      	b.n	800092a <__aeabi_dadd+0x26e>
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d07b      	beq.n	8000d8e <__aeabi_dadd+0x6d2>
 8000c96:	4665      	mov	r5, ip
 8000c98:	001e      	movs	r6, r3
 8000c9a:	4691      	mov	r9, r2
 8000c9c:	e63f      	b.n	800091e <__aeabi_dadd+0x262>
 8000c9e:	1a81      	subs	r1, r0, r2
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	45c1      	cmp	r9, r8
 8000ca4:	41a4      	sbcs	r4, r4
 8000ca6:	1af1      	subs	r1, r6, r3
 8000ca8:	4264      	negs	r4, r4
 8000caa:	1b09      	subs	r1, r1, r4
 8000cac:	2480      	movs	r4, #128	@ 0x80
 8000cae:	0424      	lsls	r4, r4, #16
 8000cb0:	4221      	tst	r1, r4
 8000cb2:	d077      	beq.n	8000da4 <__aeabi_dadd+0x6e8>
 8000cb4:	1a10      	subs	r0, r2, r0
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	4192      	sbcs	r2, r2
 8000cba:	0007      	movs	r7, r0
 8000cbc:	1b9e      	subs	r6, r3, r6
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	1ab6      	subs	r6, r6, r2
 8000cc2:	4337      	orrs	r7, r6
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_dadd+0x60c>
 8000cc6:	e0a0      	b.n	8000e0a <__aeabi_dadd+0x74e>
 8000cc8:	4665      	mov	r5, ip
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e63e      	b.n	800094e <__aeabi_dadd+0x292>
 8000cd0:	075f      	lsls	r7, r3, #29
 8000cd2:	08d2      	lsrs	r2, r2, #3
 8000cd4:	4665      	mov	r5, ip
 8000cd6:	4317      	orrs	r7, r2
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	e653      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000cdc:	1881      	adds	r1, r0, r2
 8000cde:	4291      	cmp	r1, r2
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	18f0      	adds	r0, r6, r3
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1880      	adds	r0, r0, r2
 8000ce8:	0203      	lsls	r3, r0, #8
 8000cea:	d500      	bpl.n	8000cee <__aeabi_dadd+0x632>
 8000cec:	e768      	b.n	8000bc0 <__aeabi_dadd+0x504>
 8000cee:	0747      	lsls	r7, r0, #29
 8000cf0:	08c9      	lsrs	r1, r1, #3
 8000cf2:	430f      	orrs	r7, r1
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	e617      	b.n	800092a <__aeabi_dadd+0x26e>
 8000cfa:	08d2      	lsrs	r2, r2, #3
 8000cfc:	075f      	lsls	r7, r3, #29
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	08d8      	lsrs	r0, r3, #3
 8000d02:	e63f      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000d04:	000c      	movs	r4, r1
 8000d06:	2600      	movs	r6, #0
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e620      	b.n	800094e <__aeabi_dadd+0x292>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	d156      	bne.n	8000dbe <__aeabi_dadd+0x702>
 8000d10:	075f      	lsls	r7, r3, #29
 8000d12:	08d2      	lsrs	r2, r2, #3
 8000d14:	4317      	orrs	r7, r2
 8000d16:	08d8      	lsrs	r0, r3, #3
 8000d18:	e634      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000d1a:	000c      	movs	r4, r1
 8000d1c:	001e      	movs	r6, r3
 8000d1e:	08d0      	lsrs	r0, r2, #3
 8000d20:	e629      	b.n	8000976 <__aeabi_dadd+0x2ba>
 8000d22:	08c1      	lsrs	r1, r0, #3
 8000d24:	0770      	lsls	r0, r6, #29
 8000d26:	4301      	orrs	r1, r0
 8000d28:	08f0      	lsrs	r0, r6, #3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d062      	beq.n	8000df4 <__aeabi_dadd+0x738>
 8000d2e:	2480      	movs	r4, #128	@ 0x80
 8000d30:	0324      	lsls	r4, r4, #12
 8000d32:	4220      	tst	r0, r4
 8000d34:	d007      	beq.n	8000d46 <__aeabi_dadd+0x68a>
 8000d36:	08de      	lsrs	r6, r3, #3
 8000d38:	4226      	tst	r6, r4
 8000d3a:	d104      	bne.n	8000d46 <__aeabi_dadd+0x68a>
 8000d3c:	4665      	mov	r5, ip
 8000d3e:	0030      	movs	r0, r6
 8000d40:	08d1      	lsrs	r1, r2, #3
 8000d42:	075b      	lsls	r3, r3, #29
 8000d44:	4319      	orrs	r1, r3
 8000d46:	0f4f      	lsrs	r7, r1, #29
 8000d48:	00c9      	lsls	r1, r1, #3
 8000d4a:	08c9      	lsrs	r1, r1, #3
 8000d4c:	077f      	lsls	r7, r7, #29
 8000d4e:	430f      	orrs	r7, r1
 8000d50:	e618      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000d52:	000c      	movs	r4, r1
 8000d54:	0030      	movs	r0, r6
 8000d56:	3c20      	subs	r4, #32
 8000d58:	40e0      	lsrs	r0, r4
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	2920      	cmp	r1, #32
 8000d5e:	d005      	beq.n	8000d6c <__aeabi_dadd+0x6b0>
 8000d60:	2440      	movs	r4, #64	@ 0x40
 8000d62:	1a61      	subs	r1, r4, r1
 8000d64:	408e      	lsls	r6, r1
 8000d66:	4649      	mov	r1, r9
 8000d68:	4331      	orrs	r1, r6
 8000d6a:	4689      	mov	r9, r1
 8000d6c:	4648      	mov	r0, r9
 8000d6e:	1e41      	subs	r1, r0, #1
 8000d70:	4188      	sbcs	r0, r1
 8000d72:	4661      	mov	r1, ip
 8000d74:	0007      	movs	r7, r0
 8000d76:	430f      	orrs	r7, r1
 8000d78:	e630      	b.n	80009dc <__aeabi_dadd+0x320>
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	1a09      	subs	r1, r1, r0
 8000d80:	e50e      	b.n	80007a0 <__aeabi_dadd+0xe4>
 8000d82:	001e      	movs	r6, r3
 8000d84:	2f00      	cmp	r7, #0
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dadd+0x6ce>
 8000d88:	e522      	b.n	80007d0 <__aeabi_dadd+0x114>
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	e758      	b.n	8000c40 <__aeabi_dadd+0x584>
 8000d8e:	2500      	movs	r5, #0
 8000d90:	2400      	movs	r4, #0
 8000d92:	2600      	movs	r6, #0
 8000d94:	e5db      	b.n	800094e <__aeabi_dadd+0x292>
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	000007fe 	.word	0x000007fe
 8000d9c:	000007ff 	.word	0x000007ff
 8000da0:	ff7fffff 	.word	0xff7fffff
 8000da4:	4647      	mov	r7, r8
 8000da6:	430f      	orrs	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_dadd+0x6f0>
 8000daa:	e747      	b.n	8000c3c <__aeabi_dadd+0x580>
 8000dac:	000e      	movs	r6, r1
 8000dae:	46c1      	mov	r9, r8
 8000db0:	e5b5      	b.n	800091e <__aeabi_dadd+0x262>
 8000db2:	08df      	lsrs	r7, r3, #3
 8000db4:	0764      	lsls	r4, r4, #29
 8000db6:	2102      	movs	r1, #2
 8000db8:	4327      	orrs	r7, r4
 8000dba:	0900      	lsrs	r0, r0, #4
 8000dbc:	e5b5      	b.n	800092a <__aeabi_dadd+0x26e>
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	08c0      	lsrs	r0, r0, #3
 8000dc2:	0777      	lsls	r7, r6, #29
 8000dc4:	4307      	orrs	r7, r0
 8000dc6:	4311      	orrs	r1, r2
 8000dc8:	08f0      	lsrs	r0, r6, #3
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dadd+0x714>
 8000dce:	e5d9      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000dd0:	2180      	movs	r1, #128	@ 0x80
 8000dd2:	0309      	lsls	r1, r1, #12
 8000dd4:	4208      	tst	r0, r1
 8000dd6:	d007      	beq.n	8000de8 <__aeabi_dadd+0x72c>
 8000dd8:	08dc      	lsrs	r4, r3, #3
 8000dda:	420c      	tst	r4, r1
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_dadd+0x72c>
 8000dde:	08d2      	lsrs	r2, r2, #3
 8000de0:	075b      	lsls	r3, r3, #29
 8000de2:	431a      	orrs	r2, r3
 8000de4:	0017      	movs	r7, r2
 8000de6:	0020      	movs	r0, r4
 8000de8:	0f7b      	lsrs	r3, r7, #29
 8000dea:	00ff      	lsls	r7, r7, #3
 8000dec:	08ff      	lsrs	r7, r7, #3
 8000dee:	075b      	lsls	r3, r3, #29
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e5c7      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000df4:	000f      	movs	r7, r1
 8000df6:	e5c5      	b.n	8000984 <__aeabi_dadd+0x2c8>
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <__aeabi_dadd+0x788>)
 8000dfa:	08d2      	lsrs	r2, r2, #3
 8000dfc:	4033      	ands	r3, r6
 8000dfe:	075f      	lsls	r7, r3, #29
 8000e00:	025b      	lsls	r3, r3, #9
 8000e02:	2401      	movs	r4, #1
 8000e04:	4317      	orrs	r7, r2
 8000e06:	0b1e      	lsrs	r6, r3, #12
 8000e08:	e5a1      	b.n	800094e <__aeabi_dadd+0x292>
 8000e0a:	4226      	tst	r6, r4
 8000e0c:	d012      	beq.n	8000e34 <__aeabi_dadd+0x778>
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <__aeabi_dadd+0x788>)
 8000e10:	4665      	mov	r5, ip
 8000e12:	0002      	movs	r2, r0
 8000e14:	2401      	movs	r4, #1
 8000e16:	401e      	ands	r6, r3
 8000e18:	e4e6      	b.n	80007e8 <__aeabi_dadd+0x12c>
 8000e1a:	0021      	movs	r1, r4
 8000e1c:	e585      	b.n	800092a <__aeabi_dadd+0x26e>
 8000e1e:	0017      	movs	r7, r2
 8000e20:	e5a8      	b.n	8000974 <__aeabi_dadd+0x2b8>
 8000e22:	003a      	movs	r2, r7
 8000e24:	e4d4      	b.n	80007d0 <__aeabi_dadd+0x114>
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	0764      	lsls	r4, r4, #29
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	0027      	movs	r7, r4
 8000e2e:	2102      	movs	r1, #2
 8000e30:	0900      	lsrs	r0, r0, #4
 8000e32:	e57a      	b.n	800092a <__aeabi_dadd+0x26e>
 8000e34:	08c0      	lsrs	r0, r0, #3
 8000e36:	0777      	lsls	r7, r6, #29
 8000e38:	4307      	orrs	r7, r0
 8000e3a:	4665      	mov	r5, ip
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	08f0      	lsrs	r0, r6, #3
 8000e40:	e573      	b.n	800092a <__aeabi_dadd+0x26e>
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	ff7fffff 	.word	0xff7fffff

08000e48 <__aeabi_ddiv>:
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	46de      	mov	lr, fp
 8000e4c:	4645      	mov	r5, r8
 8000e4e:	4657      	mov	r7, sl
 8000e50:	464e      	mov	r6, r9
 8000e52:	b5e0      	push	{r5, r6, r7, lr}
 8000e54:	b087      	sub	sp, #28
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	030b      	lsls	r3, r1, #12
 8000e5c:	0b1b      	lsrs	r3, r3, #12
 8000e5e:	469b      	mov	fp, r3
 8000e60:	0fca      	lsrs	r2, r1, #31
 8000e62:	004b      	lsls	r3, r1, #1
 8000e64:	0004      	movs	r4, r0
 8000e66:	4680      	mov	r8, r0
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	9202      	str	r2, [sp, #8]
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_ddiv+0x28>
 8000e6e:	e098      	b.n	8000fa2 <__aeabi_ddiv+0x15a>
 8000e70:	4a7c      	ldr	r2, [pc, #496]	@ (8001064 <__aeabi_ddiv+0x21c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d037      	beq.n	8000ee6 <__aeabi_ddiv+0x9e>
 8000e76:	4659      	mov	r1, fp
 8000e78:	0f42      	lsrs	r2, r0, #29
 8000e7a:	00c9      	lsls	r1, r1, #3
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	2180      	movs	r1, #128	@ 0x80
 8000e80:	0409      	lsls	r1, r1, #16
 8000e82:	4311      	orrs	r1, r2
 8000e84:	00c2      	lsls	r2, r0, #3
 8000e86:	4690      	mov	r8, r2
 8000e88:	4a77      	ldr	r2, [pc, #476]	@ (8001068 <__aeabi_ddiv+0x220>)
 8000e8a:	4689      	mov	r9, r1
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	449a      	add	sl, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	2400      	movs	r4, #0
 8000e94:	9303      	str	r3, [sp, #12]
 8000e96:	9e00      	ldr	r6, [sp, #0]
 8000e98:	9f01      	ldr	r7, [sp, #4]
 8000e9a:	033b      	lsls	r3, r7, #12
 8000e9c:	0b1b      	lsrs	r3, r3, #12
 8000e9e:	469b      	mov	fp, r3
 8000ea0:	007b      	lsls	r3, r7, #1
 8000ea2:	0030      	movs	r0, r6
 8000ea4:	0d5b      	lsrs	r3, r3, #21
 8000ea6:	0ffd      	lsrs	r5, r7, #31
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d059      	beq.n	8000f60 <__aeabi_ddiv+0x118>
 8000eac:	4a6d      	ldr	r2, [pc, #436]	@ (8001064 <__aeabi_ddiv+0x21c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d048      	beq.n	8000f44 <__aeabi_ddiv+0xfc>
 8000eb2:	4659      	mov	r1, fp
 8000eb4:	0f72      	lsrs	r2, r6, #29
 8000eb6:	00c9      	lsls	r1, r1, #3
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	0409      	lsls	r1, r1, #16
 8000ebe:	4311      	orrs	r1, r2
 8000ec0:	468b      	mov	fp, r1
 8000ec2:	4969      	ldr	r1, [pc, #420]	@ (8001068 <__aeabi_ddiv+0x220>)
 8000ec4:	00f2      	lsls	r2, r6, #3
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	4651      	mov	r1, sl
 8000eca:	4463      	add	r3, ip
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	9e02      	ldr	r6, [sp, #8]
 8000ed4:	406e      	eors	r6, r5
 8000ed6:	b2f6      	uxtb	r6, r6
 8000ed8:	2c0f      	cmp	r4, #15
 8000eda:	d900      	bls.n	8000ede <__aeabi_ddiv+0x96>
 8000edc:	e0ce      	b.n	800107c <__aeabi_ddiv+0x234>
 8000ede:	4b63      	ldr	r3, [pc, #396]	@ (800106c <__aeabi_ddiv+0x224>)
 8000ee0:	00a4      	lsls	r4, r4, #2
 8000ee2:	591b      	ldr	r3, [r3, r4]
 8000ee4:	469f      	mov	pc, r3
 8000ee6:	465a      	mov	r2, fp
 8000ee8:	4302      	orrs	r2, r0
 8000eea:	4691      	mov	r9, r2
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_ddiv+0xa8>
 8000eee:	e090      	b.n	8001012 <__aeabi_ddiv+0x1ca>
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2408      	movs	r4, #8
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	e7cc      	b.n	8000e96 <__aeabi_ddiv+0x4e>
 8000efc:	46cb      	mov	fp, r9
 8000efe:	4642      	mov	r2, r8
 8000f00:	9d02      	ldr	r5, [sp, #8]
 8000f02:	9903      	ldr	r1, [sp, #12]
 8000f04:	2902      	cmp	r1, #2
 8000f06:	d100      	bne.n	8000f0a <__aeabi_ddiv+0xc2>
 8000f08:	e1de      	b.n	80012c8 <__aeabi_ddiv+0x480>
 8000f0a:	2903      	cmp	r1, #3
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_ddiv+0xc8>
 8000f0e:	e08d      	b.n	800102c <__aeabi_ddiv+0x1e4>
 8000f10:	2901      	cmp	r1, #1
 8000f12:	d000      	beq.n	8000f16 <__aeabi_ddiv+0xce>
 8000f14:	e179      	b.n	800120a <__aeabi_ddiv+0x3c2>
 8000f16:	002e      	movs	r6, r5
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	4690      	mov	r8, r2
 8000f20:	051b      	lsls	r3, r3, #20
 8000f22:	4323      	orrs	r3, r4
 8000f24:	07f6      	lsls	r6, r6, #31
 8000f26:	4333      	orrs	r3, r6
 8000f28:	4640      	mov	r0, r8
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	b007      	add	sp, #28
 8000f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f30:	46bb      	mov	fp, r7
 8000f32:	46b2      	mov	sl, r6
 8000f34:	46a9      	mov	r9, r5
 8000f36:	46a0      	mov	r8, r4
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	4690      	mov	r8, r2
 8000f40:	4b48      	ldr	r3, [pc, #288]	@ (8001064 <__aeabi_ddiv+0x21c>)
 8000f42:	e7ed      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 8000f44:	465a      	mov	r2, fp
 8000f46:	9b00      	ldr	r3, [sp, #0]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b49      	ldr	r3, [pc, #292]	@ (8001070 <__aeabi_ddiv+0x228>)
 8000f4c:	469c      	mov	ip, r3
 8000f4e:	44e2      	add	sl, ip
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d159      	bne.n	8001008 <__aeabi_ddiv+0x1c0>
 8000f54:	2302      	movs	r3, #2
 8000f56:	431c      	orrs	r4, r3
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	469b      	mov	fp, r3
 8000f5e:	e7b8      	b.n	8000ed2 <__aeabi_ddiv+0x8a>
 8000f60:	465a      	mov	r2, fp
 8000f62:	9b00      	ldr	r3, [sp, #0]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	d049      	beq.n	8000ffc <__aeabi_ddiv+0x1b4>
 8000f68:	465b      	mov	r3, fp
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x128>
 8000f6e:	e19c      	b.n	80012aa <__aeabi_ddiv+0x462>
 8000f70:	4658      	mov	r0, fp
 8000f72:	f7ff fa99 	bl	80004a8 <__clzsi2>
 8000f76:	0002      	movs	r2, r0
 8000f78:	0003      	movs	r3, r0
 8000f7a:	3a0b      	subs	r2, #11
 8000f7c:	271d      	movs	r7, #29
 8000f7e:	9e00      	ldr	r6, [sp, #0]
 8000f80:	1aba      	subs	r2, r7, r2
 8000f82:	0019      	movs	r1, r3
 8000f84:	4658      	mov	r0, fp
 8000f86:	40d6      	lsrs	r6, r2
 8000f88:	3908      	subs	r1, #8
 8000f8a:	4088      	lsls	r0, r1
 8000f8c:	0032      	movs	r2, r6
 8000f8e:	4302      	orrs	r2, r0
 8000f90:	4693      	mov	fp, r2
 8000f92:	9a00      	ldr	r2, [sp, #0]
 8000f94:	408a      	lsls	r2, r1
 8000f96:	4937      	ldr	r1, [pc, #220]	@ (8001074 <__aeabi_ddiv+0x22c>)
 8000f98:	4453      	add	r3, sl
 8000f9a:	468a      	mov	sl, r1
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	449a      	add	sl, r3
 8000fa0:	e797      	b.n	8000ed2 <__aeabi_ddiv+0x8a>
 8000fa2:	465b      	mov	r3, fp
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	d021      	beq.n	8000fee <__aeabi_ddiv+0x1a6>
 8000faa:	465b      	mov	r3, fp
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0x16a>
 8000fb0:	e169      	b.n	8001286 <__aeabi_ddiv+0x43e>
 8000fb2:	4658      	mov	r0, fp
 8000fb4:	f7ff fa78 	bl	80004a8 <__clzsi2>
 8000fb8:	230b      	movs	r3, #11
 8000fba:	425b      	negs	r3, r3
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	4484      	add	ip, r0
 8000fc2:	4666      	mov	r6, ip
 8000fc4:	231d      	movs	r3, #29
 8000fc6:	1b9b      	subs	r3, r3, r6
 8000fc8:	0026      	movs	r6, r4
 8000fca:	0011      	movs	r1, r2
 8000fcc:	4658      	mov	r0, fp
 8000fce:	40de      	lsrs	r6, r3
 8000fd0:	3908      	subs	r1, #8
 8000fd2:	4088      	lsls	r0, r1
 8000fd4:	0033      	movs	r3, r6
 8000fd6:	4303      	orrs	r3, r0
 8000fd8:	4699      	mov	r9, r3
 8000fda:	0023      	movs	r3, r4
 8000fdc:	408b      	lsls	r3, r1
 8000fde:	4698      	mov	r8, r3
 8000fe0:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <__aeabi_ddiv+0x230>)
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9303      	str	r3, [sp, #12]
 8000fec:	e753      	b.n	8000e96 <__aeabi_ddiv+0x4e>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	4698      	mov	r8, r3
 8000ff2:	469a      	mov	sl, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	2404      	movs	r4, #4
 8000ff8:	9303      	str	r3, [sp, #12]
 8000ffa:	e74c      	b.n	8000e96 <__aeabi_ddiv+0x4e>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	431c      	orrs	r4, r3
 8001000:	2300      	movs	r3, #0
 8001002:	2101      	movs	r1, #1
 8001004:	469b      	mov	fp, r3
 8001006:	e764      	b.n	8000ed2 <__aeabi_ddiv+0x8a>
 8001008:	2303      	movs	r3, #3
 800100a:	0032      	movs	r2, r6
 800100c:	2103      	movs	r1, #3
 800100e:	431c      	orrs	r4, r3
 8001010:	e75f      	b.n	8000ed2 <__aeabi_ddiv+0x8a>
 8001012:	469a      	mov	sl, r3
 8001014:	2303      	movs	r3, #3
 8001016:	46d9      	mov	r9, fp
 8001018:	240c      	movs	r4, #12
 800101a:	9303      	str	r3, [sp, #12]
 800101c:	e73b      	b.n	8000e96 <__aeabi_ddiv+0x4e>
 800101e:	2300      	movs	r3, #0
 8001020:	2480      	movs	r4, #128	@ 0x80
 8001022:	4698      	mov	r8, r3
 8001024:	2600      	movs	r6, #0
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <__aeabi_ddiv+0x21c>)
 8001028:	0324      	lsls	r4, r4, #12
 800102a:	e779      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 800102c:	2480      	movs	r4, #128	@ 0x80
 800102e:	465b      	mov	r3, fp
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	431c      	orrs	r4, r3
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	002e      	movs	r6, r5
 8001038:	4690      	mov	r8, r2
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <__aeabi_ddiv+0x21c>)
 800103c:	0b24      	lsrs	r4, r4, #12
 800103e:	e76f      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 8001040:	2480      	movs	r4, #128	@ 0x80
 8001042:	464b      	mov	r3, r9
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	4223      	tst	r3, r4
 8001048:	d002      	beq.n	8001050 <__aeabi_ddiv+0x208>
 800104a:	465b      	mov	r3, fp
 800104c:	4223      	tst	r3, r4
 800104e:	d0f0      	beq.n	8001032 <__aeabi_ddiv+0x1ea>
 8001050:	2480      	movs	r4, #128	@ 0x80
 8001052:	464b      	mov	r3, r9
 8001054:	0324      	lsls	r4, r4, #12
 8001056:	431c      	orrs	r4, r3
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	9e02      	ldr	r6, [sp, #8]
 800105c:	4b01      	ldr	r3, [pc, #4]	@ (8001064 <__aeabi_ddiv+0x21c>)
 800105e:	0b24      	lsrs	r4, r4, #12
 8001060:	e75e      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	000007ff 	.word	0x000007ff
 8001068:	fffffc01 	.word	0xfffffc01
 800106c:	08015af4 	.word	0x08015af4
 8001070:	fffff801 	.word	0xfffff801
 8001074:	000003f3 	.word	0x000003f3
 8001078:	fffffc0d 	.word	0xfffffc0d
 800107c:	45cb      	cmp	fp, r9
 800107e:	d200      	bcs.n	8001082 <__aeabi_ddiv+0x23a>
 8001080:	e0f8      	b.n	8001274 <__aeabi_ddiv+0x42c>
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0x23e>
 8001084:	e0f3      	b.n	800126e <__aeabi_ddiv+0x426>
 8001086:	2301      	movs	r3, #1
 8001088:	425b      	negs	r3, r3
 800108a:	469c      	mov	ip, r3
 800108c:	4644      	mov	r4, r8
 800108e:	4648      	mov	r0, r9
 8001090:	2500      	movs	r5, #0
 8001092:	44e2      	add	sl, ip
 8001094:	465b      	mov	r3, fp
 8001096:	0e17      	lsrs	r7, r2, #24
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	431f      	orrs	r7, r3
 800109c:	0c19      	lsrs	r1, r3, #16
 800109e:	043b      	lsls	r3, r7, #16
 80010a0:	0212      	lsls	r2, r2, #8
 80010a2:	9700      	str	r7, [sp, #0]
 80010a4:	0c1f      	lsrs	r7, r3, #16
 80010a6:	4691      	mov	r9, r2
 80010a8:	9102      	str	r1, [sp, #8]
 80010aa:	9703      	str	r7, [sp, #12]
 80010ac:	f7ff f8ce 	bl	800024c <__aeabi_uidivmod>
 80010b0:	0002      	movs	r2, r0
 80010b2:	437a      	muls	r2, r7
 80010b4:	040b      	lsls	r3, r1, #16
 80010b6:	0c21      	lsrs	r1, r4, #16
 80010b8:	4680      	mov	r8, r0
 80010ba:	4319      	orrs	r1, r3
 80010bc:	428a      	cmp	r2, r1
 80010be:	d909      	bls.n	80010d4 <__aeabi_ddiv+0x28c>
 80010c0:	9f00      	ldr	r7, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	46bc      	mov	ip, r7
 80010c6:	425b      	negs	r3, r3
 80010c8:	4461      	add	r1, ip
 80010ca:	469c      	mov	ip, r3
 80010cc:	44e0      	add	r8, ip
 80010ce:	428f      	cmp	r7, r1
 80010d0:	d800      	bhi.n	80010d4 <__aeabi_ddiv+0x28c>
 80010d2:	e15c      	b.n	800138e <__aeabi_ddiv+0x546>
 80010d4:	1a88      	subs	r0, r1, r2
 80010d6:	9902      	ldr	r1, [sp, #8]
 80010d8:	f7ff f8b8 	bl	800024c <__aeabi_uidivmod>
 80010dc:	9a03      	ldr	r2, [sp, #12]
 80010de:	0424      	lsls	r4, r4, #16
 80010e0:	4342      	muls	r2, r0
 80010e2:	0409      	lsls	r1, r1, #16
 80010e4:	0c24      	lsrs	r4, r4, #16
 80010e6:	0003      	movs	r3, r0
 80010e8:	430c      	orrs	r4, r1
 80010ea:	42a2      	cmp	r2, r4
 80010ec:	d906      	bls.n	80010fc <__aeabi_ddiv+0x2b4>
 80010ee:	9900      	ldr	r1, [sp, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	468c      	mov	ip, r1
 80010f4:	4464      	add	r4, ip
 80010f6:	42a1      	cmp	r1, r4
 80010f8:	d800      	bhi.n	80010fc <__aeabi_ddiv+0x2b4>
 80010fa:	e142      	b.n	8001382 <__aeabi_ddiv+0x53a>
 80010fc:	1aa0      	subs	r0, r4, r2
 80010fe:	4642      	mov	r2, r8
 8001100:	0412      	lsls	r2, r2, #16
 8001102:	431a      	orrs	r2, r3
 8001104:	4693      	mov	fp, r2
 8001106:	464b      	mov	r3, r9
 8001108:	4659      	mov	r1, fp
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	001f      	movs	r7, r3
 800110e:	9304      	str	r3, [sp, #16]
 8001110:	040b      	lsls	r3, r1, #16
 8001112:	4649      	mov	r1, r9
 8001114:	0409      	lsls	r1, r1, #16
 8001116:	0c09      	lsrs	r1, r1, #16
 8001118:	000c      	movs	r4, r1
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	435c      	muls	r4, r3
 800111e:	0c12      	lsrs	r2, r2, #16
 8001120:	437b      	muls	r3, r7
 8001122:	4688      	mov	r8, r1
 8001124:	4351      	muls	r1, r2
 8001126:	437a      	muls	r2, r7
 8001128:	0c27      	lsrs	r7, r4, #16
 800112a:	46bc      	mov	ip, r7
 800112c:	185b      	adds	r3, r3, r1
 800112e:	4463      	add	r3, ip
 8001130:	4299      	cmp	r1, r3
 8001132:	d903      	bls.n	800113c <__aeabi_ddiv+0x2f4>
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	0249      	lsls	r1, r1, #9
 8001138:	468c      	mov	ip, r1
 800113a:	4462      	add	r2, ip
 800113c:	0c19      	lsrs	r1, r3, #16
 800113e:	0424      	lsls	r4, r4, #16
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	0c24      	lsrs	r4, r4, #16
 8001144:	188a      	adds	r2, r1, r2
 8001146:	191c      	adds	r4, r3, r4
 8001148:	4290      	cmp	r0, r2
 800114a:	d302      	bcc.n	8001152 <__aeabi_ddiv+0x30a>
 800114c:	d116      	bne.n	800117c <__aeabi_ddiv+0x334>
 800114e:	42a5      	cmp	r5, r4
 8001150:	d214      	bcs.n	800117c <__aeabi_ddiv+0x334>
 8001152:	465b      	mov	r3, fp
 8001154:	9f00      	ldr	r7, [sp, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	444d      	add	r5, r9
 800115a:	9305      	str	r3, [sp, #20]
 800115c:	454d      	cmp	r5, r9
 800115e:	419b      	sbcs	r3, r3
 8001160:	46bc      	mov	ip, r7
 8001162:	425b      	negs	r3, r3
 8001164:	4463      	add	r3, ip
 8001166:	18c0      	adds	r0, r0, r3
 8001168:	4287      	cmp	r7, r0
 800116a:	d300      	bcc.n	800116e <__aeabi_ddiv+0x326>
 800116c:	e102      	b.n	8001374 <__aeabi_ddiv+0x52c>
 800116e:	4282      	cmp	r2, r0
 8001170:	d900      	bls.n	8001174 <__aeabi_ddiv+0x32c>
 8001172:	e129      	b.n	80013c8 <__aeabi_ddiv+0x580>
 8001174:	d100      	bne.n	8001178 <__aeabi_ddiv+0x330>
 8001176:	e124      	b.n	80013c2 <__aeabi_ddiv+0x57a>
 8001178:	9b05      	ldr	r3, [sp, #20]
 800117a:	469b      	mov	fp, r3
 800117c:	1b2c      	subs	r4, r5, r4
 800117e:	42a5      	cmp	r5, r4
 8001180:	41ad      	sbcs	r5, r5
 8001182:	9b00      	ldr	r3, [sp, #0]
 8001184:	1a80      	subs	r0, r0, r2
 8001186:	426d      	negs	r5, r5
 8001188:	1b40      	subs	r0, r0, r5
 800118a:	4283      	cmp	r3, r0
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x348>
 800118e:	e10f      	b.n	80013b0 <__aeabi_ddiv+0x568>
 8001190:	9902      	ldr	r1, [sp, #8]
 8001192:	f7ff f85b 	bl	800024c <__aeabi_uidivmod>
 8001196:	9a03      	ldr	r2, [sp, #12]
 8001198:	040b      	lsls	r3, r1, #16
 800119a:	4342      	muls	r2, r0
 800119c:	0c21      	lsrs	r1, r4, #16
 800119e:	0005      	movs	r5, r0
 80011a0:	4319      	orrs	r1, r3
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x360>
 80011a6:	e0cb      	b.n	8001340 <__aeabi_ddiv+0x4f8>
 80011a8:	1a88      	subs	r0, r1, r2
 80011aa:	9902      	ldr	r1, [sp, #8]
 80011ac:	f7ff f84e 	bl	800024c <__aeabi_uidivmod>
 80011b0:	9a03      	ldr	r2, [sp, #12]
 80011b2:	0424      	lsls	r4, r4, #16
 80011b4:	4342      	muls	r2, r0
 80011b6:	0409      	lsls	r1, r1, #16
 80011b8:	0c24      	lsrs	r4, r4, #16
 80011ba:	0003      	movs	r3, r0
 80011bc:	430c      	orrs	r4, r1
 80011be:	42a2      	cmp	r2, r4
 80011c0:	d900      	bls.n	80011c4 <__aeabi_ddiv+0x37c>
 80011c2:	e0ca      	b.n	800135a <__aeabi_ddiv+0x512>
 80011c4:	4641      	mov	r1, r8
 80011c6:	1aa4      	subs	r4, r4, r2
 80011c8:	042a      	lsls	r2, r5, #16
 80011ca:	431a      	orrs	r2, r3
 80011cc:	9f04      	ldr	r7, [sp, #16]
 80011ce:	0413      	lsls	r3, r2, #16
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	4359      	muls	r1, r3
 80011d4:	4640      	mov	r0, r8
 80011d6:	437b      	muls	r3, r7
 80011d8:	469c      	mov	ip, r3
 80011da:	0c15      	lsrs	r5, r2, #16
 80011dc:	4368      	muls	r0, r5
 80011de:	0c0b      	lsrs	r3, r1, #16
 80011e0:	4484      	add	ip, r0
 80011e2:	4463      	add	r3, ip
 80011e4:	437d      	muls	r5, r7
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d903      	bls.n	80011f2 <__aeabi_ddiv+0x3aa>
 80011ea:	2080      	movs	r0, #128	@ 0x80
 80011ec:	0240      	lsls	r0, r0, #9
 80011ee:	4684      	mov	ip, r0
 80011f0:	4465      	add	r5, ip
 80011f2:	0c18      	lsrs	r0, r3, #16
 80011f4:	0409      	lsls	r1, r1, #16
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	0c09      	lsrs	r1, r1, #16
 80011fa:	1940      	adds	r0, r0, r5
 80011fc:	185b      	adds	r3, r3, r1
 80011fe:	4284      	cmp	r4, r0
 8001200:	d327      	bcc.n	8001252 <__aeabi_ddiv+0x40a>
 8001202:	d023      	beq.n	800124c <__aeabi_ddiv+0x404>
 8001204:	2301      	movs	r3, #1
 8001206:	0035      	movs	r5, r6
 8001208:	431a      	orrs	r2, r3
 800120a:	4b94      	ldr	r3, [pc, #592]	@ (800145c <__aeabi_ddiv+0x614>)
 800120c:	4453      	add	r3, sl
 800120e:	2b00      	cmp	r3, #0
 8001210:	dd60      	ble.n	80012d4 <__aeabi_ddiv+0x48c>
 8001212:	0751      	lsls	r1, r2, #29
 8001214:	d000      	beq.n	8001218 <__aeabi_ddiv+0x3d0>
 8001216:	e086      	b.n	8001326 <__aeabi_ddiv+0x4de>
 8001218:	002e      	movs	r6, r5
 800121a:	08d1      	lsrs	r1, r2, #3
 800121c:	465a      	mov	r2, fp
 800121e:	01d2      	lsls	r2, r2, #7
 8001220:	d506      	bpl.n	8001230 <__aeabi_ddiv+0x3e8>
 8001222:	465a      	mov	r2, fp
 8001224:	4b8e      	ldr	r3, [pc, #568]	@ (8001460 <__aeabi_ddiv+0x618>)
 8001226:	401a      	ands	r2, r3
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	4693      	mov	fp, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4453      	add	r3, sl
 8001230:	4a8c      	ldr	r2, [pc, #560]	@ (8001464 <__aeabi_ddiv+0x61c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	dd00      	ble.n	8001238 <__aeabi_ddiv+0x3f0>
 8001236:	e680      	b.n	8000f3a <__aeabi_ddiv+0xf2>
 8001238:	465a      	mov	r2, fp
 800123a:	0752      	lsls	r2, r2, #29
 800123c:	430a      	orrs	r2, r1
 800123e:	4690      	mov	r8, r2
 8001240:	465a      	mov	r2, fp
 8001242:	055b      	lsls	r3, r3, #21
 8001244:	0254      	lsls	r4, r2, #9
 8001246:	0b24      	lsrs	r4, r4, #12
 8001248:	0d5b      	lsrs	r3, r3, #21
 800124a:	e669      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 800124c:	0035      	movs	r5, r6
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0db      	beq.n	800120a <__aeabi_ddiv+0x3c2>
 8001252:	9d00      	ldr	r5, [sp, #0]
 8001254:	1e51      	subs	r1, r2, #1
 8001256:	46ac      	mov	ip, r5
 8001258:	4464      	add	r4, ip
 800125a:	42ac      	cmp	r4, r5
 800125c:	d200      	bcs.n	8001260 <__aeabi_ddiv+0x418>
 800125e:	e09e      	b.n	800139e <__aeabi_ddiv+0x556>
 8001260:	4284      	cmp	r4, r0
 8001262:	d200      	bcs.n	8001266 <__aeabi_ddiv+0x41e>
 8001264:	e0e1      	b.n	800142a <__aeabi_ddiv+0x5e2>
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x422>
 8001268:	e0ee      	b.n	8001448 <__aeabi_ddiv+0x600>
 800126a:	000a      	movs	r2, r1
 800126c:	e7ca      	b.n	8001204 <__aeabi_ddiv+0x3bc>
 800126e:	4542      	cmp	r2, r8
 8001270:	d900      	bls.n	8001274 <__aeabi_ddiv+0x42c>
 8001272:	e708      	b.n	8001086 <__aeabi_ddiv+0x23e>
 8001274:	464b      	mov	r3, r9
 8001276:	07dc      	lsls	r4, r3, #31
 8001278:	0858      	lsrs	r0, r3, #1
 800127a:	4643      	mov	r3, r8
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	431c      	orrs	r4, r3
 8001280:	4643      	mov	r3, r8
 8001282:	07dd      	lsls	r5, r3, #31
 8001284:	e706      	b.n	8001094 <__aeabi_ddiv+0x24c>
 8001286:	f7ff f90f 	bl	80004a8 <__clzsi2>
 800128a:	2315      	movs	r3, #21
 800128c:	469c      	mov	ip, r3
 800128e:	4484      	add	ip, r0
 8001290:	0002      	movs	r2, r0
 8001292:	4663      	mov	r3, ip
 8001294:	3220      	adds	r2, #32
 8001296:	2b1c      	cmp	r3, #28
 8001298:	dc00      	bgt.n	800129c <__aeabi_ddiv+0x454>
 800129a:	e692      	b.n	8000fc2 <__aeabi_ddiv+0x17a>
 800129c:	0023      	movs	r3, r4
 800129e:	3808      	subs	r0, #8
 80012a0:	4083      	lsls	r3, r0
 80012a2:	4699      	mov	r9, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	4698      	mov	r8, r3
 80012a8:	e69a      	b.n	8000fe0 <__aeabi_ddiv+0x198>
 80012aa:	f7ff f8fd 	bl	80004a8 <__clzsi2>
 80012ae:	0002      	movs	r2, r0
 80012b0:	0003      	movs	r3, r0
 80012b2:	3215      	adds	r2, #21
 80012b4:	3320      	adds	r3, #32
 80012b6:	2a1c      	cmp	r2, #28
 80012b8:	dc00      	bgt.n	80012bc <__aeabi_ddiv+0x474>
 80012ba:	e65f      	b.n	8000f7c <__aeabi_ddiv+0x134>
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	3808      	subs	r0, #8
 80012c0:	4081      	lsls	r1, r0
 80012c2:	2200      	movs	r2, #0
 80012c4:	468b      	mov	fp, r1
 80012c6:	e666      	b.n	8000f96 <__aeabi_ddiv+0x14e>
 80012c8:	2200      	movs	r2, #0
 80012ca:	002e      	movs	r6, r5
 80012cc:	2400      	movs	r4, #0
 80012ce:	4690      	mov	r8, r2
 80012d0:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <__aeabi_ddiv+0x620>)
 80012d2:	e625      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 80012d4:	002e      	movs	r6, r5
 80012d6:	2101      	movs	r1, #1
 80012d8:	1ac9      	subs	r1, r1, r3
 80012da:	2938      	cmp	r1, #56	@ 0x38
 80012dc:	dd00      	ble.n	80012e0 <__aeabi_ddiv+0x498>
 80012de:	e61b      	b.n	8000f18 <__aeabi_ddiv+0xd0>
 80012e0:	291f      	cmp	r1, #31
 80012e2:	dc7e      	bgt.n	80013e2 <__aeabi_ddiv+0x59a>
 80012e4:	4861      	ldr	r0, [pc, #388]	@ (800146c <__aeabi_ddiv+0x624>)
 80012e6:	0014      	movs	r4, r2
 80012e8:	4450      	add	r0, sl
 80012ea:	465b      	mov	r3, fp
 80012ec:	4082      	lsls	r2, r0
 80012ee:	4083      	lsls	r3, r0
 80012f0:	40cc      	lsrs	r4, r1
 80012f2:	1e50      	subs	r0, r2, #1
 80012f4:	4182      	sbcs	r2, r0
 80012f6:	4323      	orrs	r3, r4
 80012f8:	431a      	orrs	r2, r3
 80012fa:	465b      	mov	r3, fp
 80012fc:	40cb      	lsrs	r3, r1
 80012fe:	0751      	lsls	r1, r2, #29
 8001300:	d009      	beq.n	8001316 <__aeabi_ddiv+0x4ce>
 8001302:	210f      	movs	r1, #15
 8001304:	4011      	ands	r1, r2
 8001306:	2904      	cmp	r1, #4
 8001308:	d005      	beq.n	8001316 <__aeabi_ddiv+0x4ce>
 800130a:	1d11      	adds	r1, r2, #4
 800130c:	4291      	cmp	r1, r2
 800130e:	4192      	sbcs	r2, r2
 8001310:	4252      	negs	r2, r2
 8001312:	189b      	adds	r3, r3, r2
 8001314:	000a      	movs	r2, r1
 8001316:	0219      	lsls	r1, r3, #8
 8001318:	d400      	bmi.n	800131c <__aeabi_ddiv+0x4d4>
 800131a:	e09b      	b.n	8001454 <__aeabi_ddiv+0x60c>
 800131c:	2200      	movs	r2, #0
 800131e:	2301      	movs	r3, #1
 8001320:	2400      	movs	r4, #0
 8001322:	4690      	mov	r8, r2
 8001324:	e5fc      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 8001326:	210f      	movs	r1, #15
 8001328:	4011      	ands	r1, r2
 800132a:	2904      	cmp	r1, #4
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x4e8>
 800132e:	e773      	b.n	8001218 <__aeabi_ddiv+0x3d0>
 8001330:	1d11      	adds	r1, r2, #4
 8001332:	4291      	cmp	r1, r2
 8001334:	4192      	sbcs	r2, r2
 8001336:	4252      	negs	r2, r2
 8001338:	002e      	movs	r6, r5
 800133a:	08c9      	lsrs	r1, r1, #3
 800133c:	4493      	add	fp, r2
 800133e:	e76d      	b.n	800121c <__aeabi_ddiv+0x3d4>
 8001340:	9b00      	ldr	r3, [sp, #0]
 8001342:	3d01      	subs	r5, #1
 8001344:	469c      	mov	ip, r3
 8001346:	4461      	add	r1, ip
 8001348:	428b      	cmp	r3, r1
 800134a:	d900      	bls.n	800134e <__aeabi_ddiv+0x506>
 800134c:	e72c      	b.n	80011a8 <__aeabi_ddiv+0x360>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x50c>
 8001352:	e729      	b.n	80011a8 <__aeabi_ddiv+0x360>
 8001354:	1e85      	subs	r5, r0, #2
 8001356:	4461      	add	r1, ip
 8001358:	e726      	b.n	80011a8 <__aeabi_ddiv+0x360>
 800135a:	9900      	ldr	r1, [sp, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	468c      	mov	ip, r1
 8001360:	4464      	add	r4, ip
 8001362:	42a1      	cmp	r1, r4
 8001364:	d900      	bls.n	8001368 <__aeabi_ddiv+0x520>
 8001366:	e72d      	b.n	80011c4 <__aeabi_ddiv+0x37c>
 8001368:	42a2      	cmp	r2, r4
 800136a:	d800      	bhi.n	800136e <__aeabi_ddiv+0x526>
 800136c:	e72a      	b.n	80011c4 <__aeabi_ddiv+0x37c>
 800136e:	1e83      	subs	r3, r0, #2
 8001370:	4464      	add	r4, ip
 8001372:	e727      	b.n	80011c4 <__aeabi_ddiv+0x37c>
 8001374:	4287      	cmp	r7, r0
 8001376:	d000      	beq.n	800137a <__aeabi_ddiv+0x532>
 8001378:	e6fe      	b.n	8001178 <__aeabi_ddiv+0x330>
 800137a:	45a9      	cmp	r9, r5
 800137c:	d900      	bls.n	8001380 <__aeabi_ddiv+0x538>
 800137e:	e6fb      	b.n	8001178 <__aeabi_ddiv+0x330>
 8001380:	e6f5      	b.n	800116e <__aeabi_ddiv+0x326>
 8001382:	42a2      	cmp	r2, r4
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x540>
 8001386:	e6b9      	b.n	80010fc <__aeabi_ddiv+0x2b4>
 8001388:	1e83      	subs	r3, r0, #2
 800138a:	4464      	add	r4, ip
 800138c:	e6b6      	b.n	80010fc <__aeabi_ddiv+0x2b4>
 800138e:	428a      	cmp	r2, r1
 8001390:	d800      	bhi.n	8001394 <__aeabi_ddiv+0x54c>
 8001392:	e69f      	b.n	80010d4 <__aeabi_ddiv+0x28c>
 8001394:	46bc      	mov	ip, r7
 8001396:	1e83      	subs	r3, r0, #2
 8001398:	4698      	mov	r8, r3
 800139a:	4461      	add	r1, ip
 800139c:	e69a      	b.n	80010d4 <__aeabi_ddiv+0x28c>
 800139e:	000a      	movs	r2, r1
 80013a0:	4284      	cmp	r4, r0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_ddiv+0x55e>
 80013a4:	e72e      	b.n	8001204 <__aeabi_ddiv+0x3bc>
 80013a6:	454b      	cmp	r3, r9
 80013a8:	d000      	beq.n	80013ac <__aeabi_ddiv+0x564>
 80013aa:	e72b      	b.n	8001204 <__aeabi_ddiv+0x3bc>
 80013ac:	0035      	movs	r5, r6
 80013ae:	e72c      	b.n	800120a <__aeabi_ddiv+0x3c2>
 80013b0:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <__aeabi_ddiv+0x614>)
 80013b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001470 <__aeabi_ddiv+0x628>)
 80013b4:	4453      	add	r3, sl
 80013b6:	4592      	cmp	sl, r2
 80013b8:	db43      	blt.n	8001442 <__aeabi_ddiv+0x5fa>
 80013ba:	2201      	movs	r2, #1
 80013bc:	2100      	movs	r1, #0
 80013be:	4493      	add	fp, r2
 80013c0:	e72c      	b.n	800121c <__aeabi_ddiv+0x3d4>
 80013c2:	42ac      	cmp	r4, r5
 80013c4:	d800      	bhi.n	80013c8 <__aeabi_ddiv+0x580>
 80013c6:	e6d7      	b.n	8001178 <__aeabi_ddiv+0x330>
 80013c8:	2302      	movs	r3, #2
 80013ca:	425b      	negs	r3, r3
 80013cc:	469c      	mov	ip, r3
 80013ce:	9900      	ldr	r1, [sp, #0]
 80013d0:	444d      	add	r5, r9
 80013d2:	454d      	cmp	r5, r9
 80013d4:	419b      	sbcs	r3, r3
 80013d6:	44e3      	add	fp, ip
 80013d8:	468c      	mov	ip, r1
 80013da:	425b      	negs	r3, r3
 80013dc:	4463      	add	r3, ip
 80013de:	18c0      	adds	r0, r0, r3
 80013e0:	e6cc      	b.n	800117c <__aeabi_ddiv+0x334>
 80013e2:	201f      	movs	r0, #31
 80013e4:	4240      	negs	r0, r0
 80013e6:	1ac3      	subs	r3, r0, r3
 80013e8:	4658      	mov	r0, fp
 80013ea:	40d8      	lsrs	r0, r3
 80013ec:	2920      	cmp	r1, #32
 80013ee:	d004      	beq.n	80013fa <__aeabi_ddiv+0x5b2>
 80013f0:	4659      	mov	r1, fp
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <__aeabi_ddiv+0x62c>)
 80013f4:	4453      	add	r3, sl
 80013f6:	4099      	lsls	r1, r3
 80013f8:	430a      	orrs	r2, r1
 80013fa:	1e53      	subs	r3, r2, #1
 80013fc:	419a      	sbcs	r2, r3
 80013fe:	2307      	movs	r3, #7
 8001400:	0019      	movs	r1, r3
 8001402:	4302      	orrs	r2, r0
 8001404:	2400      	movs	r4, #0
 8001406:	4011      	ands	r1, r2
 8001408:	4213      	tst	r3, r2
 800140a:	d009      	beq.n	8001420 <__aeabi_ddiv+0x5d8>
 800140c:	3308      	adds	r3, #8
 800140e:	4013      	ands	r3, r2
 8001410:	2b04      	cmp	r3, #4
 8001412:	d01d      	beq.n	8001450 <__aeabi_ddiv+0x608>
 8001414:	1d13      	adds	r3, r2, #4
 8001416:	4293      	cmp	r3, r2
 8001418:	4189      	sbcs	r1, r1
 800141a:	001a      	movs	r2, r3
 800141c:	4249      	negs	r1, r1
 800141e:	0749      	lsls	r1, r1, #29
 8001420:	08d2      	lsrs	r2, r2, #3
 8001422:	430a      	orrs	r2, r1
 8001424:	4690      	mov	r8, r2
 8001426:	2300      	movs	r3, #0
 8001428:	e57a      	b.n	8000f20 <__aeabi_ddiv+0xd8>
 800142a:	4649      	mov	r1, r9
 800142c:	9f00      	ldr	r7, [sp, #0]
 800142e:	004d      	lsls	r5, r1, #1
 8001430:	454d      	cmp	r5, r9
 8001432:	4189      	sbcs	r1, r1
 8001434:	46bc      	mov	ip, r7
 8001436:	4249      	negs	r1, r1
 8001438:	4461      	add	r1, ip
 800143a:	46a9      	mov	r9, r5
 800143c:	3a02      	subs	r2, #2
 800143e:	1864      	adds	r4, r4, r1
 8001440:	e7ae      	b.n	80013a0 <__aeabi_ddiv+0x558>
 8001442:	2201      	movs	r2, #1
 8001444:	4252      	negs	r2, r2
 8001446:	e746      	b.n	80012d6 <__aeabi_ddiv+0x48e>
 8001448:	4599      	cmp	r9, r3
 800144a:	d3ee      	bcc.n	800142a <__aeabi_ddiv+0x5e2>
 800144c:	000a      	movs	r2, r1
 800144e:	e7aa      	b.n	80013a6 <__aeabi_ddiv+0x55e>
 8001450:	2100      	movs	r1, #0
 8001452:	e7e5      	b.n	8001420 <__aeabi_ddiv+0x5d8>
 8001454:	0759      	lsls	r1, r3, #29
 8001456:	025b      	lsls	r3, r3, #9
 8001458:	0b1c      	lsrs	r4, r3, #12
 800145a:	e7e1      	b.n	8001420 <__aeabi_ddiv+0x5d8>
 800145c:	000003ff 	.word	0x000003ff
 8001460:	feffffff 	.word	0xfeffffff
 8001464:	000007fe 	.word	0x000007fe
 8001468:	000007ff 	.word	0x000007ff
 800146c:	0000041e 	.word	0x0000041e
 8001470:	fffffc02 	.word	0xfffffc02
 8001474:	0000043e 	.word	0x0000043e

08001478 <__eqdf2>:
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	4657      	mov	r7, sl
 800147c:	46de      	mov	lr, fp
 800147e:	464e      	mov	r6, r9
 8001480:	4645      	mov	r5, r8
 8001482:	b5e0      	push	{r5, r6, r7, lr}
 8001484:	000d      	movs	r5, r1
 8001486:	0004      	movs	r4, r0
 8001488:	0fe8      	lsrs	r0, r5, #31
 800148a:	4683      	mov	fp, r0
 800148c:	0309      	lsls	r1, r1, #12
 800148e:	0fd8      	lsrs	r0, r3, #31
 8001490:	0b09      	lsrs	r1, r1, #12
 8001492:	4682      	mov	sl, r0
 8001494:	4819      	ldr	r0, [pc, #100]	@ (80014fc <__eqdf2+0x84>)
 8001496:	468c      	mov	ip, r1
 8001498:	031f      	lsls	r7, r3, #12
 800149a:	0069      	lsls	r1, r5, #1
 800149c:	005e      	lsls	r6, r3, #1
 800149e:	0d49      	lsrs	r1, r1, #21
 80014a0:	0b3f      	lsrs	r7, r7, #12
 80014a2:	0d76      	lsrs	r6, r6, #21
 80014a4:	4281      	cmp	r1, r0
 80014a6:	d018      	beq.n	80014da <__eqdf2+0x62>
 80014a8:	4286      	cmp	r6, r0
 80014aa:	d00f      	beq.n	80014cc <__eqdf2+0x54>
 80014ac:	2001      	movs	r0, #1
 80014ae:	42b1      	cmp	r1, r6
 80014b0:	d10d      	bne.n	80014ce <__eqdf2+0x56>
 80014b2:	45bc      	cmp	ip, r7
 80014b4:	d10b      	bne.n	80014ce <__eqdf2+0x56>
 80014b6:	4294      	cmp	r4, r2
 80014b8:	d109      	bne.n	80014ce <__eqdf2+0x56>
 80014ba:	45d3      	cmp	fp, sl
 80014bc:	d01c      	beq.n	80014f8 <__eqdf2+0x80>
 80014be:	2900      	cmp	r1, #0
 80014c0:	d105      	bne.n	80014ce <__eqdf2+0x56>
 80014c2:	4660      	mov	r0, ip
 80014c4:	4320      	orrs	r0, r4
 80014c6:	1e43      	subs	r3, r0, #1
 80014c8:	4198      	sbcs	r0, r3
 80014ca:	e000      	b.n	80014ce <__eqdf2+0x56>
 80014cc:	2001      	movs	r0, #1
 80014ce:	bcf0      	pop	{r4, r5, r6, r7}
 80014d0:	46bb      	mov	fp, r7
 80014d2:	46b2      	mov	sl, r6
 80014d4:	46a9      	mov	r9, r5
 80014d6:	46a0      	mov	r8, r4
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014da:	2001      	movs	r0, #1
 80014dc:	428e      	cmp	r6, r1
 80014de:	d1f6      	bne.n	80014ce <__eqdf2+0x56>
 80014e0:	4661      	mov	r1, ip
 80014e2:	4339      	orrs	r1, r7
 80014e4:	000f      	movs	r7, r1
 80014e6:	4317      	orrs	r7, r2
 80014e8:	4327      	orrs	r7, r4
 80014ea:	d1f0      	bne.n	80014ce <__eqdf2+0x56>
 80014ec:	465b      	mov	r3, fp
 80014ee:	4652      	mov	r2, sl
 80014f0:	1a98      	subs	r0, r3, r2
 80014f2:	1e43      	subs	r3, r0, #1
 80014f4:	4198      	sbcs	r0, r3
 80014f6:	e7ea      	b.n	80014ce <__eqdf2+0x56>
 80014f8:	2000      	movs	r0, #0
 80014fa:	e7e8      	b.n	80014ce <__eqdf2+0x56>
 80014fc:	000007ff 	.word	0x000007ff

08001500 <__gedf2>:
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	4657      	mov	r7, sl
 8001504:	464e      	mov	r6, r9
 8001506:	4645      	mov	r5, r8
 8001508:	46de      	mov	lr, fp
 800150a:	b5e0      	push	{r5, r6, r7, lr}
 800150c:	000d      	movs	r5, r1
 800150e:	030e      	lsls	r6, r1, #12
 8001510:	0049      	lsls	r1, r1, #1
 8001512:	0d49      	lsrs	r1, r1, #21
 8001514:	468a      	mov	sl, r1
 8001516:	0fdf      	lsrs	r7, r3, #31
 8001518:	0fe9      	lsrs	r1, r5, #31
 800151a:	46bc      	mov	ip, r7
 800151c:	b083      	sub	sp, #12
 800151e:	4f2f      	ldr	r7, [pc, #188]	@ (80015dc <__gedf2+0xdc>)
 8001520:	0004      	movs	r4, r0
 8001522:	4680      	mov	r8, r0
 8001524:	9101      	str	r1, [sp, #4]
 8001526:	0058      	lsls	r0, r3, #1
 8001528:	0319      	lsls	r1, r3, #12
 800152a:	4691      	mov	r9, r2
 800152c:	0b36      	lsrs	r6, r6, #12
 800152e:	0b09      	lsrs	r1, r1, #12
 8001530:	0d40      	lsrs	r0, r0, #21
 8001532:	45ba      	cmp	sl, r7
 8001534:	d01d      	beq.n	8001572 <__gedf2+0x72>
 8001536:	42b8      	cmp	r0, r7
 8001538:	d00d      	beq.n	8001556 <__gedf2+0x56>
 800153a:	4657      	mov	r7, sl
 800153c:	2f00      	cmp	r7, #0
 800153e:	d12a      	bne.n	8001596 <__gedf2+0x96>
 8001540:	4334      	orrs	r4, r6
 8001542:	2800      	cmp	r0, #0
 8001544:	d124      	bne.n	8001590 <__gedf2+0x90>
 8001546:	430a      	orrs	r2, r1
 8001548:	d036      	beq.n	80015b8 <__gedf2+0xb8>
 800154a:	2c00      	cmp	r4, #0
 800154c:	d141      	bne.n	80015d2 <__gedf2+0xd2>
 800154e:	4663      	mov	r3, ip
 8001550:	0058      	lsls	r0, r3, #1
 8001552:	3801      	subs	r0, #1
 8001554:	e015      	b.n	8001582 <__gedf2+0x82>
 8001556:	4311      	orrs	r1, r2
 8001558:	d138      	bne.n	80015cc <__gedf2+0xcc>
 800155a:	4653      	mov	r3, sl
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <__gedf2+0x64>
 8001560:	4326      	orrs	r6, r4
 8001562:	d0f4      	beq.n	800154e <__gedf2+0x4e>
 8001564:	9b01      	ldr	r3, [sp, #4]
 8001566:	4563      	cmp	r3, ip
 8001568:	d107      	bne.n	800157a <__gedf2+0x7a>
 800156a:	9b01      	ldr	r3, [sp, #4]
 800156c:	0058      	lsls	r0, r3, #1
 800156e:	3801      	subs	r0, #1
 8001570:	e007      	b.n	8001582 <__gedf2+0x82>
 8001572:	4326      	orrs	r6, r4
 8001574:	d12a      	bne.n	80015cc <__gedf2+0xcc>
 8001576:	4550      	cmp	r0, sl
 8001578:	d021      	beq.n	80015be <__gedf2+0xbe>
 800157a:	2001      	movs	r0, #1
 800157c:	9b01      	ldr	r3, [sp, #4]
 800157e:	425f      	negs	r7, r3
 8001580:	4338      	orrs	r0, r7
 8001582:	b003      	add	sp, #12
 8001584:	bcf0      	pop	{r4, r5, r6, r7}
 8001586:	46bb      	mov	fp, r7
 8001588:	46b2      	mov	sl, r6
 800158a:	46a9      	mov	r9, r5
 800158c:	46a0      	mov	r8, r4
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001590:	2c00      	cmp	r4, #0
 8001592:	d0dc      	beq.n	800154e <__gedf2+0x4e>
 8001594:	e7e6      	b.n	8001564 <__gedf2+0x64>
 8001596:	2800      	cmp	r0, #0
 8001598:	d0ef      	beq.n	800157a <__gedf2+0x7a>
 800159a:	9b01      	ldr	r3, [sp, #4]
 800159c:	4563      	cmp	r3, ip
 800159e:	d1ec      	bne.n	800157a <__gedf2+0x7a>
 80015a0:	4582      	cmp	sl, r0
 80015a2:	dcea      	bgt.n	800157a <__gedf2+0x7a>
 80015a4:	dbe1      	blt.n	800156a <__gedf2+0x6a>
 80015a6:	428e      	cmp	r6, r1
 80015a8:	d8e7      	bhi.n	800157a <__gedf2+0x7a>
 80015aa:	d1de      	bne.n	800156a <__gedf2+0x6a>
 80015ac:	45c8      	cmp	r8, r9
 80015ae:	d8e4      	bhi.n	800157a <__gedf2+0x7a>
 80015b0:	2000      	movs	r0, #0
 80015b2:	45c8      	cmp	r8, r9
 80015b4:	d2e5      	bcs.n	8001582 <__gedf2+0x82>
 80015b6:	e7d8      	b.n	800156a <__gedf2+0x6a>
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d0e2      	beq.n	8001582 <__gedf2+0x82>
 80015bc:	e7dd      	b.n	800157a <__gedf2+0x7a>
 80015be:	4311      	orrs	r1, r2
 80015c0:	d104      	bne.n	80015cc <__gedf2+0xcc>
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	4563      	cmp	r3, ip
 80015c6:	d1d8      	bne.n	800157a <__gedf2+0x7a>
 80015c8:	2000      	movs	r0, #0
 80015ca:	e7da      	b.n	8001582 <__gedf2+0x82>
 80015cc:	2002      	movs	r0, #2
 80015ce:	4240      	negs	r0, r0
 80015d0:	e7d7      	b.n	8001582 <__gedf2+0x82>
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	4563      	cmp	r3, ip
 80015d6:	d0e6      	beq.n	80015a6 <__gedf2+0xa6>
 80015d8:	e7cf      	b.n	800157a <__gedf2+0x7a>
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	000007ff 	.word	0x000007ff

080015e0 <__ledf2>:
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	4657      	mov	r7, sl
 80015e4:	464e      	mov	r6, r9
 80015e6:	4645      	mov	r5, r8
 80015e8:	46de      	mov	lr, fp
 80015ea:	b5e0      	push	{r5, r6, r7, lr}
 80015ec:	000d      	movs	r5, r1
 80015ee:	030e      	lsls	r6, r1, #12
 80015f0:	0049      	lsls	r1, r1, #1
 80015f2:	0d49      	lsrs	r1, r1, #21
 80015f4:	468a      	mov	sl, r1
 80015f6:	0fdf      	lsrs	r7, r3, #31
 80015f8:	0fe9      	lsrs	r1, r5, #31
 80015fa:	46bc      	mov	ip, r7
 80015fc:	b083      	sub	sp, #12
 80015fe:	4f2e      	ldr	r7, [pc, #184]	@ (80016b8 <__ledf2+0xd8>)
 8001600:	0004      	movs	r4, r0
 8001602:	4680      	mov	r8, r0
 8001604:	9101      	str	r1, [sp, #4]
 8001606:	0058      	lsls	r0, r3, #1
 8001608:	0319      	lsls	r1, r3, #12
 800160a:	4691      	mov	r9, r2
 800160c:	0b36      	lsrs	r6, r6, #12
 800160e:	0b09      	lsrs	r1, r1, #12
 8001610:	0d40      	lsrs	r0, r0, #21
 8001612:	45ba      	cmp	sl, r7
 8001614:	d01e      	beq.n	8001654 <__ledf2+0x74>
 8001616:	42b8      	cmp	r0, r7
 8001618:	d00d      	beq.n	8001636 <__ledf2+0x56>
 800161a:	4657      	mov	r7, sl
 800161c:	2f00      	cmp	r7, #0
 800161e:	d127      	bne.n	8001670 <__ledf2+0x90>
 8001620:	4334      	orrs	r4, r6
 8001622:	2800      	cmp	r0, #0
 8001624:	d133      	bne.n	800168e <__ledf2+0xae>
 8001626:	430a      	orrs	r2, r1
 8001628:	d034      	beq.n	8001694 <__ledf2+0xb4>
 800162a:	2c00      	cmp	r4, #0
 800162c:	d140      	bne.n	80016b0 <__ledf2+0xd0>
 800162e:	4663      	mov	r3, ip
 8001630:	0058      	lsls	r0, r3, #1
 8001632:	3801      	subs	r0, #1
 8001634:	e015      	b.n	8001662 <__ledf2+0x82>
 8001636:	4311      	orrs	r1, r2
 8001638:	d112      	bne.n	8001660 <__ledf2+0x80>
 800163a:	4653      	mov	r3, sl
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <__ledf2+0x64>
 8001640:	4326      	orrs	r6, r4
 8001642:	d0f4      	beq.n	800162e <__ledf2+0x4e>
 8001644:	9b01      	ldr	r3, [sp, #4]
 8001646:	4563      	cmp	r3, ip
 8001648:	d01d      	beq.n	8001686 <__ledf2+0xa6>
 800164a:	2001      	movs	r0, #1
 800164c:	9b01      	ldr	r3, [sp, #4]
 800164e:	425f      	negs	r7, r3
 8001650:	4338      	orrs	r0, r7
 8001652:	e006      	b.n	8001662 <__ledf2+0x82>
 8001654:	4326      	orrs	r6, r4
 8001656:	d103      	bne.n	8001660 <__ledf2+0x80>
 8001658:	4550      	cmp	r0, sl
 800165a:	d1f6      	bne.n	800164a <__ledf2+0x6a>
 800165c:	4311      	orrs	r1, r2
 800165e:	d01c      	beq.n	800169a <__ledf2+0xba>
 8001660:	2002      	movs	r0, #2
 8001662:	b003      	add	sp, #12
 8001664:	bcf0      	pop	{r4, r5, r6, r7}
 8001666:	46bb      	mov	fp, r7
 8001668:	46b2      	mov	sl, r6
 800166a:	46a9      	mov	r9, r5
 800166c:	46a0      	mov	r8, r4
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001670:	2800      	cmp	r0, #0
 8001672:	d0ea      	beq.n	800164a <__ledf2+0x6a>
 8001674:	9b01      	ldr	r3, [sp, #4]
 8001676:	4563      	cmp	r3, ip
 8001678:	d1e7      	bne.n	800164a <__ledf2+0x6a>
 800167a:	4582      	cmp	sl, r0
 800167c:	dce5      	bgt.n	800164a <__ledf2+0x6a>
 800167e:	db02      	blt.n	8001686 <__ledf2+0xa6>
 8001680:	428e      	cmp	r6, r1
 8001682:	d8e2      	bhi.n	800164a <__ledf2+0x6a>
 8001684:	d00e      	beq.n	80016a4 <__ledf2+0xc4>
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	0058      	lsls	r0, r3, #1
 800168a:	3801      	subs	r0, #1
 800168c:	e7e9      	b.n	8001662 <__ledf2+0x82>
 800168e:	2c00      	cmp	r4, #0
 8001690:	d0cd      	beq.n	800162e <__ledf2+0x4e>
 8001692:	e7d7      	b.n	8001644 <__ledf2+0x64>
 8001694:	2c00      	cmp	r4, #0
 8001696:	d0e4      	beq.n	8001662 <__ledf2+0x82>
 8001698:	e7d7      	b.n	800164a <__ledf2+0x6a>
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	2000      	movs	r0, #0
 800169e:	4563      	cmp	r3, ip
 80016a0:	d0df      	beq.n	8001662 <__ledf2+0x82>
 80016a2:	e7d2      	b.n	800164a <__ledf2+0x6a>
 80016a4:	45c8      	cmp	r8, r9
 80016a6:	d8d0      	bhi.n	800164a <__ledf2+0x6a>
 80016a8:	2000      	movs	r0, #0
 80016aa:	45c8      	cmp	r8, r9
 80016ac:	d2d9      	bcs.n	8001662 <__ledf2+0x82>
 80016ae:	e7ea      	b.n	8001686 <__ledf2+0xa6>
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	4563      	cmp	r3, ip
 80016b4:	d0e4      	beq.n	8001680 <__ledf2+0xa0>
 80016b6:	e7c8      	b.n	800164a <__ledf2+0x6a>
 80016b8:	000007ff 	.word	0x000007ff

080016bc <__aeabi_dmul>:
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	4657      	mov	r7, sl
 80016c0:	464e      	mov	r6, r9
 80016c2:	46de      	mov	lr, fp
 80016c4:	4645      	mov	r5, r8
 80016c6:	b5e0      	push	{r5, r6, r7, lr}
 80016c8:	001f      	movs	r7, r3
 80016ca:	030b      	lsls	r3, r1, #12
 80016cc:	0b1b      	lsrs	r3, r3, #12
 80016ce:	0016      	movs	r6, r2
 80016d0:	469a      	mov	sl, r3
 80016d2:	0fca      	lsrs	r2, r1, #31
 80016d4:	004b      	lsls	r3, r1, #1
 80016d6:	0004      	movs	r4, r0
 80016d8:	4691      	mov	r9, r2
 80016da:	b085      	sub	sp, #20
 80016dc:	0d5b      	lsrs	r3, r3, #21
 80016de:	d100      	bne.n	80016e2 <__aeabi_dmul+0x26>
 80016e0:	e1cf      	b.n	8001a82 <__aeabi_dmul+0x3c6>
 80016e2:	4acd      	ldr	r2, [pc, #820]	@ (8001a18 <__aeabi_dmul+0x35c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d055      	beq.n	8001794 <__aeabi_dmul+0xd8>
 80016e8:	4651      	mov	r1, sl
 80016ea:	0f42      	lsrs	r2, r0, #29
 80016ec:	00c9      	lsls	r1, r1, #3
 80016ee:	430a      	orrs	r2, r1
 80016f0:	2180      	movs	r1, #128	@ 0x80
 80016f2:	0409      	lsls	r1, r1, #16
 80016f4:	4311      	orrs	r1, r2
 80016f6:	00c2      	lsls	r2, r0, #3
 80016f8:	4690      	mov	r8, r2
 80016fa:	4ac8      	ldr	r2, [pc, #800]	@ (8001a1c <__aeabi_dmul+0x360>)
 80016fc:	468a      	mov	sl, r1
 80016fe:	4693      	mov	fp, r2
 8001700:	449b      	add	fp, r3
 8001702:	2300      	movs	r3, #0
 8001704:	2500      	movs	r5, #0
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	033c      	lsls	r4, r7, #12
 800170a:	007b      	lsls	r3, r7, #1
 800170c:	0ffa      	lsrs	r2, r7, #31
 800170e:	9601      	str	r6, [sp, #4]
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	d100      	bne.n	800171a <__aeabi_dmul+0x5e>
 8001718:	e188      	b.n	8001a2c <__aeabi_dmul+0x370>
 800171a:	4abf      	ldr	r2, [pc, #764]	@ (8001a18 <__aeabi_dmul+0x35c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d100      	bne.n	8001722 <__aeabi_dmul+0x66>
 8001720:	e092      	b.n	8001848 <__aeabi_dmul+0x18c>
 8001722:	4abe      	ldr	r2, [pc, #760]	@ (8001a1c <__aeabi_dmul+0x360>)
 8001724:	4694      	mov	ip, r2
 8001726:	4463      	add	r3, ip
 8001728:	449b      	add	fp, r3
 800172a:	2d0a      	cmp	r5, #10
 800172c:	dc42      	bgt.n	80017b4 <__aeabi_dmul+0xf8>
 800172e:	00e4      	lsls	r4, r4, #3
 8001730:	0f73      	lsrs	r3, r6, #29
 8001732:	4323      	orrs	r3, r4
 8001734:	2480      	movs	r4, #128	@ 0x80
 8001736:	4649      	mov	r1, r9
 8001738:	0424      	lsls	r4, r4, #16
 800173a:	431c      	orrs	r4, r3
 800173c:	00f3      	lsls	r3, r6, #3
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9b00      	ldr	r3, [sp, #0]
 8001742:	2000      	movs	r0, #0
 8001744:	4059      	eors	r1, r3
 8001746:	b2cb      	uxtb	r3, r1
 8001748:	9303      	str	r3, [sp, #12]
 800174a:	2d02      	cmp	r5, #2
 800174c:	dc00      	bgt.n	8001750 <__aeabi_dmul+0x94>
 800174e:	e094      	b.n	800187a <__aeabi_dmul+0x1be>
 8001750:	2301      	movs	r3, #1
 8001752:	40ab      	lsls	r3, r5
 8001754:	001d      	movs	r5, r3
 8001756:	23a6      	movs	r3, #166	@ 0xa6
 8001758:	002a      	movs	r2, r5
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	401a      	ands	r2, r3
 800175e:	421d      	tst	r5, r3
 8001760:	d000      	beq.n	8001764 <__aeabi_dmul+0xa8>
 8001762:	e229      	b.n	8001bb8 <__aeabi_dmul+0x4fc>
 8001764:	2390      	movs	r3, #144	@ 0x90
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	421d      	tst	r5, r3
 800176a:	d100      	bne.n	800176e <__aeabi_dmul+0xb2>
 800176c:	e24d      	b.n	8001c0a <__aeabi_dmul+0x54e>
 800176e:	2300      	movs	r3, #0
 8001770:	2480      	movs	r4, #128	@ 0x80
 8001772:	4699      	mov	r9, r3
 8001774:	0324      	lsls	r4, r4, #12
 8001776:	4ba8      	ldr	r3, [pc, #672]	@ (8001a18 <__aeabi_dmul+0x35c>)
 8001778:	0010      	movs	r0, r2
 800177a:	464a      	mov	r2, r9
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	4323      	orrs	r3, r4
 8001780:	07d2      	lsls	r2, r2, #31
 8001782:	4313      	orrs	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	b005      	add	sp, #20
 8001788:	bcf0      	pop	{r4, r5, r6, r7}
 800178a:	46bb      	mov	fp, r7
 800178c:	46b2      	mov	sl, r6
 800178e:	46a9      	mov	r9, r5
 8001790:	46a0      	mov	r8, r4
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	4652      	mov	r2, sl
 8001796:	4302      	orrs	r2, r0
 8001798:	4690      	mov	r8, r2
 800179a:	d000      	beq.n	800179e <__aeabi_dmul+0xe2>
 800179c:	e1ac      	b.n	8001af8 <__aeabi_dmul+0x43c>
 800179e:	469b      	mov	fp, r3
 80017a0:	2302      	movs	r3, #2
 80017a2:	4692      	mov	sl, r2
 80017a4:	2508      	movs	r5, #8
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	e7ae      	b.n	8001708 <__aeabi_dmul+0x4c>
 80017aa:	9b00      	ldr	r3, [sp, #0]
 80017ac:	46a2      	mov	sl, r4
 80017ae:	4699      	mov	r9, r3
 80017b0:	9b01      	ldr	r3, [sp, #4]
 80017b2:	4698      	mov	r8, r3
 80017b4:	9b02      	ldr	r3, [sp, #8]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d100      	bne.n	80017bc <__aeabi_dmul+0x100>
 80017ba:	e1ca      	b.n	8001b52 <__aeabi_dmul+0x496>
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d100      	bne.n	80017c2 <__aeabi_dmul+0x106>
 80017c0:	e192      	b.n	8001ae8 <__aeabi_dmul+0x42c>
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d110      	bne.n	80017e8 <__aeabi_dmul+0x12c>
 80017c6:	2300      	movs	r3, #0
 80017c8:	2400      	movs	r4, #0
 80017ca:	2200      	movs	r2, #0
 80017cc:	e7d4      	b.n	8001778 <__aeabi_dmul+0xbc>
 80017ce:	2201      	movs	r2, #1
 80017d0:	087b      	lsrs	r3, r7, #1
 80017d2:	403a      	ands	r2, r7
 80017d4:	4313      	orrs	r3, r2
 80017d6:	4652      	mov	r2, sl
 80017d8:	07d2      	lsls	r2, r2, #31
 80017da:	4313      	orrs	r3, r2
 80017dc:	4698      	mov	r8, r3
 80017de:	4653      	mov	r3, sl
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	469a      	mov	sl, r3
 80017e4:	9b03      	ldr	r3, [sp, #12]
 80017e6:	4699      	mov	r9, r3
 80017e8:	465b      	mov	r3, fp
 80017ea:	1c58      	adds	r0, r3, #1
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	445b      	add	r3, fp
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dc00      	bgt.n	80017f8 <__aeabi_dmul+0x13c>
 80017f6:	e1b1      	b.n	8001b5c <__aeabi_dmul+0x4a0>
 80017f8:	4642      	mov	r2, r8
 80017fa:	0752      	lsls	r2, r2, #29
 80017fc:	d00b      	beq.n	8001816 <__aeabi_dmul+0x15a>
 80017fe:	220f      	movs	r2, #15
 8001800:	4641      	mov	r1, r8
 8001802:	400a      	ands	r2, r1
 8001804:	2a04      	cmp	r2, #4
 8001806:	d006      	beq.n	8001816 <__aeabi_dmul+0x15a>
 8001808:	4642      	mov	r2, r8
 800180a:	1d11      	adds	r1, r2, #4
 800180c:	4541      	cmp	r1, r8
 800180e:	4192      	sbcs	r2, r2
 8001810:	4688      	mov	r8, r1
 8001812:	4252      	negs	r2, r2
 8001814:	4492      	add	sl, r2
 8001816:	4652      	mov	r2, sl
 8001818:	01d2      	lsls	r2, r2, #7
 800181a:	d506      	bpl.n	800182a <__aeabi_dmul+0x16e>
 800181c:	4652      	mov	r2, sl
 800181e:	4b80      	ldr	r3, [pc, #512]	@ (8001a20 <__aeabi_dmul+0x364>)
 8001820:	401a      	ands	r2, r3
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	4692      	mov	sl, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	18c3      	adds	r3, r0, r3
 800182a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a24 <__aeabi_dmul+0x368>)
 800182c:	4293      	cmp	r3, r2
 800182e:	dd00      	ble.n	8001832 <__aeabi_dmul+0x176>
 8001830:	e18f      	b.n	8001b52 <__aeabi_dmul+0x496>
 8001832:	4642      	mov	r2, r8
 8001834:	08d1      	lsrs	r1, r2, #3
 8001836:	4652      	mov	r2, sl
 8001838:	0752      	lsls	r2, r2, #29
 800183a:	430a      	orrs	r2, r1
 800183c:	4651      	mov	r1, sl
 800183e:	055b      	lsls	r3, r3, #21
 8001840:	024c      	lsls	r4, r1, #9
 8001842:	0b24      	lsrs	r4, r4, #12
 8001844:	0d5b      	lsrs	r3, r3, #21
 8001846:	e797      	b.n	8001778 <__aeabi_dmul+0xbc>
 8001848:	4b73      	ldr	r3, [pc, #460]	@ (8001a18 <__aeabi_dmul+0x35c>)
 800184a:	4326      	orrs	r6, r4
 800184c:	469c      	mov	ip, r3
 800184e:	44e3      	add	fp, ip
 8001850:	2e00      	cmp	r6, #0
 8001852:	d100      	bne.n	8001856 <__aeabi_dmul+0x19a>
 8001854:	e16f      	b.n	8001b36 <__aeabi_dmul+0x47a>
 8001856:	2303      	movs	r3, #3
 8001858:	4649      	mov	r1, r9
 800185a:	431d      	orrs	r5, r3
 800185c:	9b00      	ldr	r3, [sp, #0]
 800185e:	4059      	eors	r1, r3
 8001860:	b2cb      	uxtb	r3, r1
 8001862:	9303      	str	r3, [sp, #12]
 8001864:	2d0a      	cmp	r5, #10
 8001866:	dd00      	ble.n	800186a <__aeabi_dmul+0x1ae>
 8001868:	e133      	b.n	8001ad2 <__aeabi_dmul+0x416>
 800186a:	2301      	movs	r3, #1
 800186c:	40ab      	lsls	r3, r5
 800186e:	001d      	movs	r5, r3
 8001870:	2303      	movs	r3, #3
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2288      	movs	r2, #136	@ 0x88
 8001876:	422a      	tst	r2, r5
 8001878:	d197      	bne.n	80017aa <__aeabi_dmul+0xee>
 800187a:	4642      	mov	r2, r8
 800187c:	4643      	mov	r3, r8
 800187e:	0412      	lsls	r2, r2, #16
 8001880:	0c12      	lsrs	r2, r2, #16
 8001882:	0016      	movs	r6, r2
 8001884:	9801      	ldr	r0, [sp, #4]
 8001886:	0c1d      	lsrs	r5, r3, #16
 8001888:	0c03      	lsrs	r3, r0, #16
 800188a:	0400      	lsls	r0, r0, #16
 800188c:	0c00      	lsrs	r0, r0, #16
 800188e:	4346      	muls	r6, r0
 8001890:	46b4      	mov	ip, r6
 8001892:	001e      	movs	r6, r3
 8001894:	436e      	muls	r6, r5
 8001896:	9600      	str	r6, [sp, #0]
 8001898:	0016      	movs	r6, r2
 800189a:	0007      	movs	r7, r0
 800189c:	435e      	muls	r6, r3
 800189e:	4661      	mov	r1, ip
 80018a0:	46b0      	mov	r8, r6
 80018a2:	436f      	muls	r7, r5
 80018a4:	0c0e      	lsrs	r6, r1, #16
 80018a6:	44b8      	add	r8, r7
 80018a8:	4446      	add	r6, r8
 80018aa:	42b7      	cmp	r7, r6
 80018ac:	d905      	bls.n	80018ba <__aeabi_dmul+0x1fe>
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	0249      	lsls	r1, r1, #9
 80018b2:	4688      	mov	r8, r1
 80018b4:	9f00      	ldr	r7, [sp, #0]
 80018b6:	4447      	add	r7, r8
 80018b8:	9700      	str	r7, [sp, #0]
 80018ba:	4661      	mov	r1, ip
 80018bc:	0409      	lsls	r1, r1, #16
 80018be:	0c09      	lsrs	r1, r1, #16
 80018c0:	0c37      	lsrs	r7, r6, #16
 80018c2:	0436      	lsls	r6, r6, #16
 80018c4:	468c      	mov	ip, r1
 80018c6:	0031      	movs	r1, r6
 80018c8:	4461      	add	r1, ip
 80018ca:	9101      	str	r1, [sp, #4]
 80018cc:	0011      	movs	r1, r2
 80018ce:	0c26      	lsrs	r6, r4, #16
 80018d0:	0424      	lsls	r4, r4, #16
 80018d2:	0c24      	lsrs	r4, r4, #16
 80018d4:	4361      	muls	r1, r4
 80018d6:	468c      	mov	ip, r1
 80018d8:	0021      	movs	r1, r4
 80018da:	4369      	muls	r1, r5
 80018dc:	4689      	mov	r9, r1
 80018de:	4661      	mov	r1, ip
 80018e0:	0c09      	lsrs	r1, r1, #16
 80018e2:	4688      	mov	r8, r1
 80018e4:	4372      	muls	r2, r6
 80018e6:	444a      	add	r2, r9
 80018e8:	4442      	add	r2, r8
 80018ea:	4375      	muls	r5, r6
 80018ec:	4591      	cmp	r9, r2
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x23c>
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	0249      	lsls	r1, r1, #9
 80018f4:	4688      	mov	r8, r1
 80018f6:	4445      	add	r5, r8
 80018f8:	0c11      	lsrs	r1, r2, #16
 80018fa:	4688      	mov	r8, r1
 80018fc:	4661      	mov	r1, ip
 80018fe:	0409      	lsls	r1, r1, #16
 8001900:	0c09      	lsrs	r1, r1, #16
 8001902:	468c      	mov	ip, r1
 8001904:	0412      	lsls	r2, r2, #16
 8001906:	4462      	add	r2, ip
 8001908:	18b9      	adds	r1, r7, r2
 800190a:	9102      	str	r1, [sp, #8]
 800190c:	4651      	mov	r1, sl
 800190e:	0c09      	lsrs	r1, r1, #16
 8001910:	468c      	mov	ip, r1
 8001912:	4651      	mov	r1, sl
 8001914:	040f      	lsls	r7, r1, #16
 8001916:	0c3f      	lsrs	r7, r7, #16
 8001918:	0039      	movs	r1, r7
 800191a:	4341      	muls	r1, r0
 800191c:	4445      	add	r5, r8
 800191e:	4688      	mov	r8, r1
 8001920:	4661      	mov	r1, ip
 8001922:	4341      	muls	r1, r0
 8001924:	468a      	mov	sl, r1
 8001926:	4641      	mov	r1, r8
 8001928:	4660      	mov	r0, ip
 800192a:	0c09      	lsrs	r1, r1, #16
 800192c:	4689      	mov	r9, r1
 800192e:	4358      	muls	r0, r3
 8001930:	437b      	muls	r3, r7
 8001932:	4453      	add	r3, sl
 8001934:	444b      	add	r3, r9
 8001936:	459a      	cmp	sl, r3
 8001938:	d903      	bls.n	8001942 <__aeabi_dmul+0x286>
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	0249      	lsls	r1, r1, #9
 800193e:	4689      	mov	r9, r1
 8001940:	4448      	add	r0, r9
 8001942:	0c19      	lsrs	r1, r3, #16
 8001944:	4689      	mov	r9, r1
 8001946:	4641      	mov	r1, r8
 8001948:	0409      	lsls	r1, r1, #16
 800194a:	0c09      	lsrs	r1, r1, #16
 800194c:	4688      	mov	r8, r1
 800194e:	0039      	movs	r1, r7
 8001950:	4361      	muls	r1, r4
 8001952:	041b      	lsls	r3, r3, #16
 8001954:	4443      	add	r3, r8
 8001956:	4688      	mov	r8, r1
 8001958:	4661      	mov	r1, ip
 800195a:	434c      	muls	r4, r1
 800195c:	4371      	muls	r1, r6
 800195e:	468c      	mov	ip, r1
 8001960:	4641      	mov	r1, r8
 8001962:	4377      	muls	r7, r6
 8001964:	0c0e      	lsrs	r6, r1, #16
 8001966:	193f      	adds	r7, r7, r4
 8001968:	19f6      	adds	r6, r6, r7
 800196a:	4448      	add	r0, r9
 800196c:	42b4      	cmp	r4, r6
 800196e:	d903      	bls.n	8001978 <__aeabi_dmul+0x2bc>
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	4689      	mov	r9, r1
 8001976:	44cc      	add	ip, r9
 8001978:	9902      	ldr	r1, [sp, #8]
 800197a:	9f00      	ldr	r7, [sp, #0]
 800197c:	4689      	mov	r9, r1
 800197e:	0431      	lsls	r1, r6, #16
 8001980:	444f      	add	r7, r9
 8001982:	4689      	mov	r9, r1
 8001984:	4641      	mov	r1, r8
 8001986:	4297      	cmp	r7, r2
 8001988:	4192      	sbcs	r2, r2
 800198a:	040c      	lsls	r4, r1, #16
 800198c:	0c24      	lsrs	r4, r4, #16
 800198e:	444c      	add	r4, r9
 8001990:	18ff      	adds	r7, r7, r3
 8001992:	4252      	negs	r2, r2
 8001994:	1964      	adds	r4, r4, r5
 8001996:	18a1      	adds	r1, r4, r2
 8001998:	429f      	cmp	r7, r3
 800199a:	419b      	sbcs	r3, r3
 800199c:	4688      	mov	r8, r1
 800199e:	4682      	mov	sl, r0
 80019a0:	425b      	negs	r3, r3
 80019a2:	4699      	mov	r9, r3
 80019a4:	4590      	cmp	r8, r2
 80019a6:	4192      	sbcs	r2, r2
 80019a8:	42ac      	cmp	r4, r5
 80019aa:	41a4      	sbcs	r4, r4
 80019ac:	44c2      	add	sl, r8
 80019ae:	44d1      	add	r9, sl
 80019b0:	4252      	negs	r2, r2
 80019b2:	4264      	negs	r4, r4
 80019b4:	4314      	orrs	r4, r2
 80019b6:	4599      	cmp	r9, r3
 80019b8:	419b      	sbcs	r3, r3
 80019ba:	4582      	cmp	sl, r0
 80019bc:	4192      	sbcs	r2, r2
 80019be:	425b      	negs	r3, r3
 80019c0:	4252      	negs	r2, r2
 80019c2:	4313      	orrs	r3, r2
 80019c4:	464a      	mov	r2, r9
 80019c6:	0c36      	lsrs	r6, r6, #16
 80019c8:	19a4      	adds	r4, r4, r6
 80019ca:	18e3      	adds	r3, r4, r3
 80019cc:	4463      	add	r3, ip
 80019ce:	025b      	lsls	r3, r3, #9
 80019d0:	0dd2      	lsrs	r2, r2, #23
 80019d2:	431a      	orrs	r2, r3
 80019d4:	9901      	ldr	r1, [sp, #4]
 80019d6:	4692      	mov	sl, r2
 80019d8:	027a      	lsls	r2, r7, #9
 80019da:	430a      	orrs	r2, r1
 80019dc:	1e50      	subs	r0, r2, #1
 80019de:	4182      	sbcs	r2, r0
 80019e0:	0dff      	lsrs	r7, r7, #23
 80019e2:	4317      	orrs	r7, r2
 80019e4:	464a      	mov	r2, r9
 80019e6:	0252      	lsls	r2, r2, #9
 80019e8:	4317      	orrs	r7, r2
 80019ea:	46b8      	mov	r8, r7
 80019ec:	01db      	lsls	r3, r3, #7
 80019ee:	d500      	bpl.n	80019f2 <__aeabi_dmul+0x336>
 80019f0:	e6ed      	b.n	80017ce <__aeabi_dmul+0x112>
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <__aeabi_dmul+0x36c>)
 80019f4:	9a03      	ldr	r2, [sp, #12]
 80019f6:	445b      	add	r3, fp
 80019f8:	4691      	mov	r9, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dc00      	bgt.n	8001a00 <__aeabi_dmul+0x344>
 80019fe:	e0ac      	b.n	8001b5a <__aeabi_dmul+0x49e>
 8001a00:	003a      	movs	r2, r7
 8001a02:	0752      	lsls	r2, r2, #29
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dmul+0x34c>
 8001a06:	e710      	b.n	800182a <__aeabi_dmul+0x16e>
 8001a08:	220f      	movs	r2, #15
 8001a0a:	4658      	mov	r0, fp
 8001a0c:	403a      	ands	r2, r7
 8001a0e:	2a04      	cmp	r2, #4
 8001a10:	d000      	beq.n	8001a14 <__aeabi_dmul+0x358>
 8001a12:	e6f9      	b.n	8001808 <__aeabi_dmul+0x14c>
 8001a14:	e709      	b.n	800182a <__aeabi_dmul+0x16e>
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	000007ff 	.word	0x000007ff
 8001a1c:	fffffc01 	.word	0xfffffc01
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	000007fe 	.word	0x000007fe
 8001a28:	000003ff 	.word	0x000003ff
 8001a2c:	0022      	movs	r2, r4
 8001a2e:	4332      	orrs	r2, r6
 8001a30:	d06f      	beq.n	8001b12 <__aeabi_dmul+0x456>
 8001a32:	2c00      	cmp	r4, #0
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dmul+0x37c>
 8001a36:	e0c2      	b.n	8001bbe <__aeabi_dmul+0x502>
 8001a38:	0020      	movs	r0, r4
 8001a3a:	f7fe fd35 	bl	80004a8 <__clzsi2>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	0003      	movs	r3, r0
 8001a42:	3a0b      	subs	r2, #11
 8001a44:	201d      	movs	r0, #29
 8001a46:	1a82      	subs	r2, r0, r2
 8001a48:	0030      	movs	r0, r6
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	40d0      	lsrs	r0, r2
 8001a4e:	3908      	subs	r1, #8
 8001a50:	408c      	lsls	r4, r1
 8001a52:	0002      	movs	r2, r0
 8001a54:	4322      	orrs	r2, r4
 8001a56:	0034      	movs	r4, r6
 8001a58:	408c      	lsls	r4, r1
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	1acb      	subs	r3, r1, r3
 8001a5e:	4986      	ldr	r1, [pc, #536]	@ (8001c78 <__aeabi_dmul+0x5bc>)
 8001a60:	468b      	mov	fp, r1
 8001a62:	449b      	add	fp, r3
 8001a64:	2d0a      	cmp	r5, #10
 8001a66:	dd00      	ble.n	8001a6a <__aeabi_dmul+0x3ae>
 8001a68:	e6a4      	b.n	80017b4 <__aeabi_dmul+0xf8>
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	9401      	str	r4, [sp, #4]
 8001a70:	4059      	eors	r1, r3
 8001a72:	b2cb      	uxtb	r3, r1
 8001a74:	0014      	movs	r4, r2
 8001a76:	2000      	movs	r0, #0
 8001a78:	9303      	str	r3, [sp, #12]
 8001a7a:	2d02      	cmp	r5, #2
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dmul+0x3c4>
 8001a7e:	e667      	b.n	8001750 <__aeabi_dmul+0x94>
 8001a80:	e6fb      	b.n	800187a <__aeabi_dmul+0x1be>
 8001a82:	4653      	mov	r3, sl
 8001a84:	4303      	orrs	r3, r0
 8001a86:	4698      	mov	r8, r3
 8001a88:	d03c      	beq.n	8001b04 <__aeabi_dmul+0x448>
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x3d6>
 8001a90:	e0a3      	b.n	8001bda <__aeabi_dmul+0x51e>
 8001a92:	4650      	mov	r0, sl
 8001a94:	f7fe fd08 	bl	80004a8 <__clzsi2>
 8001a98:	230b      	movs	r3, #11
 8001a9a:	425b      	negs	r3, r3
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	4484      	add	ip, r0
 8001aa2:	0011      	movs	r1, r2
 8001aa4:	4650      	mov	r0, sl
 8001aa6:	3908      	subs	r1, #8
 8001aa8:	4088      	lsls	r0, r1
 8001aaa:	231d      	movs	r3, #29
 8001aac:	4680      	mov	r8, r0
 8001aae:	4660      	mov	r0, ip
 8001ab0:	1a1b      	subs	r3, r3, r0
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	40d8      	lsrs	r0, r3
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	4640      	mov	r0, r8
 8001aba:	4303      	orrs	r3, r0
 8001abc:	469a      	mov	sl, r3
 8001abe:	0023      	movs	r3, r4
 8001ac0:	408b      	lsls	r3, r1
 8001ac2:	4698      	mov	r8, r3
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c78 <__aeabi_dmul+0x5bc>)
 8001ac6:	2500      	movs	r5, #0
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	469b      	mov	fp, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	e61a      	b.n	8001708 <__aeabi_dmul+0x4c>
 8001ad2:	2d0f      	cmp	r5, #15
 8001ad4:	d000      	beq.n	8001ad8 <__aeabi_dmul+0x41c>
 8001ad6:	e0c9      	b.n	8001c6c <__aeabi_dmul+0x5b0>
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	4652      	mov	r2, sl
 8001adc:	031b      	lsls	r3, r3, #12
 8001ade:	421a      	tst	r2, r3
 8001ae0:	d002      	beq.n	8001ae8 <__aeabi_dmul+0x42c>
 8001ae2:	421c      	tst	r4, r3
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dmul+0x42c>
 8001ae6:	e092      	b.n	8001c0e <__aeabi_dmul+0x552>
 8001ae8:	2480      	movs	r4, #128	@ 0x80
 8001aea:	4653      	mov	r3, sl
 8001aec:	0324      	lsls	r4, r4, #12
 8001aee:	431c      	orrs	r4, r3
 8001af0:	0324      	lsls	r4, r4, #12
 8001af2:	4642      	mov	r2, r8
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	e63e      	b.n	8001776 <__aeabi_dmul+0xba>
 8001af8:	469b      	mov	fp, r3
 8001afa:	2303      	movs	r3, #3
 8001afc:	4680      	mov	r8, r0
 8001afe:	250c      	movs	r5, #12
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	e601      	b.n	8001708 <__aeabi_dmul+0x4c>
 8001b04:	2300      	movs	r3, #0
 8001b06:	469a      	mov	sl, r3
 8001b08:	469b      	mov	fp, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	2504      	movs	r5, #4
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	e5fa      	b.n	8001708 <__aeabi_dmul+0x4c>
 8001b12:	2101      	movs	r1, #1
 8001b14:	430d      	orrs	r5, r1
 8001b16:	2d0a      	cmp	r5, #10
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_dmul+0x460>
 8001b1a:	e64b      	b.n	80017b4 <__aeabi_dmul+0xf8>
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	9800      	ldr	r0, [sp, #0]
 8001b20:	4041      	eors	r1, r0
 8001b22:	b2c9      	uxtb	r1, r1
 8001b24:	9103      	str	r1, [sp, #12]
 8001b26:	2d02      	cmp	r5, #2
 8001b28:	dc00      	bgt.n	8001b2c <__aeabi_dmul+0x470>
 8001b2a:	e096      	b.n	8001c5a <__aeabi_dmul+0x59e>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2400      	movs	r4, #0
 8001b30:	2001      	movs	r0, #1
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	e60c      	b.n	8001750 <__aeabi_dmul+0x94>
 8001b36:	4649      	mov	r1, r9
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9a00      	ldr	r2, [sp, #0]
 8001b3c:	432b      	orrs	r3, r5
 8001b3e:	4051      	eors	r1, r2
 8001b40:	b2ca      	uxtb	r2, r1
 8001b42:	9203      	str	r2, [sp, #12]
 8001b44:	2b0a      	cmp	r3, #10
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dmul+0x48e>
 8001b48:	e634      	b.n	80017b4 <__aeabi_dmul+0xf8>
 8001b4a:	2d00      	cmp	r5, #0
 8001b4c:	d157      	bne.n	8001bfe <__aeabi_dmul+0x542>
 8001b4e:	9b03      	ldr	r3, [sp, #12]
 8001b50:	4699      	mov	r9, r3
 8001b52:	2400      	movs	r4, #0
 8001b54:	2200      	movs	r2, #0
 8001b56:	4b49      	ldr	r3, [pc, #292]	@ (8001c7c <__aeabi_dmul+0x5c0>)
 8001b58:	e60e      	b.n	8001778 <__aeabi_dmul+0xbc>
 8001b5a:	4658      	mov	r0, fp
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	1ac9      	subs	r1, r1, r3
 8001b60:	2938      	cmp	r1, #56	@ 0x38
 8001b62:	dd00      	ble.n	8001b66 <__aeabi_dmul+0x4aa>
 8001b64:	e62f      	b.n	80017c6 <__aeabi_dmul+0x10a>
 8001b66:	291f      	cmp	r1, #31
 8001b68:	dd56      	ble.n	8001c18 <__aeabi_dmul+0x55c>
 8001b6a:	221f      	movs	r2, #31
 8001b6c:	4654      	mov	r4, sl
 8001b6e:	4252      	negs	r2, r2
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	40dc      	lsrs	r4, r3
 8001b74:	2920      	cmp	r1, #32
 8001b76:	d007      	beq.n	8001b88 <__aeabi_dmul+0x4cc>
 8001b78:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <__aeabi_dmul+0x5c4>)
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	469c      	mov	ip, r3
 8001b7e:	4653      	mov	r3, sl
 8001b80:	4460      	add	r0, ip
 8001b82:	4083      	lsls	r3, r0
 8001b84:	431a      	orrs	r2, r3
 8001b86:	4690      	mov	r8, r2
 8001b88:	4642      	mov	r2, r8
 8001b8a:	2107      	movs	r1, #7
 8001b8c:	1e53      	subs	r3, r2, #1
 8001b8e:	419a      	sbcs	r2, r3
 8001b90:	000b      	movs	r3, r1
 8001b92:	4322      	orrs	r2, r4
 8001b94:	4013      	ands	r3, r2
 8001b96:	2400      	movs	r4, #0
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d009      	beq.n	8001bb0 <__aeabi_dmul+0x4f4>
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d05d      	beq.n	8001c60 <__aeabi_dmul+0x5a4>
 8001ba4:	1d11      	adds	r1, r2, #4
 8001ba6:	4291      	cmp	r1, r2
 8001ba8:	419b      	sbcs	r3, r3
 8001baa:	000a      	movs	r2, r1
 8001bac:	425b      	negs	r3, r3
 8001bae:	075b      	lsls	r3, r3, #29
 8001bb0:	08d2      	lsrs	r2, r2, #3
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e5df      	b.n	8001778 <__aeabi_dmul+0xbc>
 8001bb8:	9b03      	ldr	r3, [sp, #12]
 8001bba:	4699      	mov	r9, r3
 8001bbc:	e5fa      	b.n	80017b4 <__aeabi_dmul+0xf8>
 8001bbe:	9801      	ldr	r0, [sp, #4]
 8001bc0:	f7fe fc72 	bl	80004a8 <__clzsi2>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	3215      	adds	r2, #21
 8001bca:	3320      	adds	r3, #32
 8001bcc:	2a1c      	cmp	r2, #28
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dmul+0x516>
 8001bd0:	e738      	b.n	8001a44 <__aeabi_dmul+0x388>
 8001bd2:	9a01      	ldr	r2, [sp, #4]
 8001bd4:	3808      	subs	r0, #8
 8001bd6:	4082      	lsls	r2, r0
 8001bd8:	e73f      	b.n	8001a5a <__aeabi_dmul+0x39e>
 8001bda:	f7fe fc65 	bl	80004a8 <__clzsi2>
 8001bde:	2315      	movs	r3, #21
 8001be0:	469c      	mov	ip, r3
 8001be2:	4484      	add	ip, r0
 8001be4:	0002      	movs	r2, r0
 8001be6:	4663      	mov	r3, ip
 8001be8:	3220      	adds	r2, #32
 8001bea:	2b1c      	cmp	r3, #28
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dmul+0x534>
 8001bee:	e758      	b.n	8001aa2 <__aeabi_dmul+0x3e6>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	0023      	movs	r3, r4
 8001bf6:	3808      	subs	r0, #8
 8001bf8:	4083      	lsls	r3, r0
 8001bfa:	469a      	mov	sl, r3
 8001bfc:	e762      	b.n	8001ac4 <__aeabi_dmul+0x408>
 8001bfe:	001d      	movs	r5, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	2400      	movs	r4, #0
 8001c04:	2002      	movs	r0, #2
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	e5a2      	b.n	8001750 <__aeabi_dmul+0x94>
 8001c0a:	9002      	str	r0, [sp, #8]
 8001c0c:	e632      	b.n	8001874 <__aeabi_dmul+0x1b8>
 8001c0e:	431c      	orrs	r4, r3
 8001c10:	9b00      	ldr	r3, [sp, #0]
 8001c12:	9a01      	ldr	r2, [sp, #4]
 8001c14:	4699      	mov	r9, r3
 8001c16:	e5ae      	b.n	8001776 <__aeabi_dmul+0xba>
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <__aeabi_dmul+0x5c8>)
 8001c1a:	4652      	mov	r2, sl
 8001c1c:	18c3      	adds	r3, r0, r3
 8001c1e:	4640      	mov	r0, r8
 8001c20:	409a      	lsls	r2, r3
 8001c22:	40c8      	lsrs	r0, r1
 8001c24:	4302      	orrs	r2, r0
 8001c26:	4640      	mov	r0, r8
 8001c28:	4098      	lsls	r0, r3
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	1e58      	subs	r0, r3, #1
 8001c2e:	4183      	sbcs	r3, r0
 8001c30:	4654      	mov	r4, sl
 8001c32:	431a      	orrs	r2, r3
 8001c34:	40cc      	lsrs	r4, r1
 8001c36:	0753      	lsls	r3, r2, #29
 8001c38:	d009      	beq.n	8001c4e <__aeabi_dmul+0x592>
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d005      	beq.n	8001c4e <__aeabi_dmul+0x592>
 8001c42:	1d13      	adds	r3, r2, #4
 8001c44:	4293      	cmp	r3, r2
 8001c46:	4192      	sbcs	r2, r2
 8001c48:	4252      	negs	r2, r2
 8001c4a:	18a4      	adds	r4, r4, r2
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	0223      	lsls	r3, r4, #8
 8001c50:	d508      	bpl.n	8001c64 <__aeabi_dmul+0x5a8>
 8001c52:	2301      	movs	r3, #1
 8001c54:	2400      	movs	r4, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	e58e      	b.n	8001778 <__aeabi_dmul+0xbc>
 8001c5a:	4689      	mov	r9, r1
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	e58b      	b.n	8001778 <__aeabi_dmul+0xbc>
 8001c60:	2300      	movs	r3, #0
 8001c62:	e7a5      	b.n	8001bb0 <__aeabi_dmul+0x4f4>
 8001c64:	0763      	lsls	r3, r4, #29
 8001c66:	0264      	lsls	r4, r4, #9
 8001c68:	0b24      	lsrs	r4, r4, #12
 8001c6a:	e7a1      	b.n	8001bb0 <__aeabi_dmul+0x4f4>
 8001c6c:	9b00      	ldr	r3, [sp, #0]
 8001c6e:	46a2      	mov	sl, r4
 8001c70:	4699      	mov	r9, r3
 8001c72:	9b01      	ldr	r3, [sp, #4]
 8001c74:	4698      	mov	r8, r3
 8001c76:	e737      	b.n	8001ae8 <__aeabi_dmul+0x42c>
 8001c78:	fffffc0d 	.word	0xfffffc0d
 8001c7c:	000007ff 	.word	0x000007ff
 8001c80:	0000043e 	.word	0x0000043e
 8001c84:	0000041e 	.word	0x0000041e

08001c88 <__aeabi_dsub>:
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	4657      	mov	r7, sl
 8001c8c:	464e      	mov	r6, r9
 8001c8e:	4645      	mov	r5, r8
 8001c90:	46de      	mov	lr, fp
 8001c92:	b5e0      	push	{r5, r6, r7, lr}
 8001c94:	b083      	sub	sp, #12
 8001c96:	9000      	str	r0, [sp, #0]
 8001c98:	9101      	str	r1, [sp, #4]
 8001c9a:	030c      	lsls	r4, r1, #12
 8001c9c:	004d      	lsls	r5, r1, #1
 8001c9e:	0fce      	lsrs	r6, r1, #31
 8001ca0:	0a61      	lsrs	r1, r4, #9
 8001ca2:	9c00      	ldr	r4, [sp, #0]
 8001ca4:	005f      	lsls	r7, r3, #1
 8001ca6:	0f64      	lsrs	r4, r4, #29
 8001ca8:	430c      	orrs	r4, r1
 8001caa:	9900      	ldr	r1, [sp, #0]
 8001cac:	9200      	str	r2, [sp, #0]
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	00c8      	lsls	r0, r1, #3
 8001cb2:	0319      	lsls	r1, r3, #12
 8001cb4:	0d7b      	lsrs	r3, r7, #21
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	4fcc      	ldr	r7, [pc, #816]	@ (8001fec <__aeabi_dsub+0x364>)
 8001cbc:	0fdb      	lsrs	r3, r3, #31
 8001cbe:	469c      	mov	ip, r3
 8001cc0:	0a4b      	lsrs	r3, r1, #9
 8001cc2:	9900      	ldr	r1, [sp, #0]
 8001cc4:	4680      	mov	r8, r0
 8001cc6:	0f49      	lsrs	r1, r1, #29
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	9b00      	ldr	r3, [sp, #0]
 8001ccc:	468b      	mov	fp, r1
 8001cce:	00da      	lsls	r2, r3, #3
 8001cd0:	4692      	mov	sl, r2
 8001cd2:	0d6d      	lsrs	r5, r5, #21
 8001cd4:	45b9      	cmp	r9, r7
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dsub+0x52>
 8001cd8:	e0bf      	b.n	8001e5a <__aeabi_dsub+0x1d2>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4661      	mov	r1, ip
 8001cde:	4059      	eors	r1, r3
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	468c      	mov	ip, r1
 8001ce4:	1aeb      	subs	r3, r5, r3
 8001ce6:	428e      	cmp	r6, r1
 8001ce8:	d075      	beq.n	8001dd6 <__aeabi_dsub+0x14e>
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	dc00      	bgt.n	8001cf0 <__aeabi_dsub+0x68>
 8001cee:	e2a3      	b.n	8002238 <__aeabi_dsub+0x5b0>
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	2900      	cmp	r1, #0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x70>
 8001cf6:	e0ce      	b.n	8001e96 <__aeabi_dsub+0x20e>
 8001cf8:	42bd      	cmp	r5, r7
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x76>
 8001cfc:	e200      	b.n	8002100 <__aeabi_dsub+0x478>
 8001cfe:	2701      	movs	r7, #1
 8001d00:	2b38      	cmp	r3, #56	@ 0x38
 8001d02:	dc19      	bgt.n	8001d38 <__aeabi_dsub+0xb0>
 8001d04:	2780      	movs	r7, #128	@ 0x80
 8001d06:	4659      	mov	r1, fp
 8001d08:	043f      	lsls	r7, r7, #16
 8001d0a:	4339      	orrs	r1, r7
 8001d0c:	468b      	mov	fp, r1
 8001d0e:	2b1f      	cmp	r3, #31
 8001d10:	dd00      	ble.n	8001d14 <__aeabi_dsub+0x8c>
 8001d12:	e1fa      	b.n	800210a <__aeabi_dsub+0x482>
 8001d14:	2720      	movs	r7, #32
 8001d16:	1af9      	subs	r1, r7, r3
 8001d18:	468c      	mov	ip, r1
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	4667      	mov	r7, ip
 8001d1e:	40b9      	lsls	r1, r7
 8001d20:	000f      	movs	r7, r1
 8001d22:	0011      	movs	r1, r2
 8001d24:	40d9      	lsrs	r1, r3
 8001d26:	430f      	orrs	r7, r1
 8001d28:	4661      	mov	r1, ip
 8001d2a:	408a      	lsls	r2, r1
 8001d2c:	1e51      	subs	r1, r2, #1
 8001d2e:	418a      	sbcs	r2, r1
 8001d30:	4659      	mov	r1, fp
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	4317      	orrs	r7, r2
 8001d36:	1a64      	subs	r4, r4, r1
 8001d38:	1bc7      	subs	r7, r0, r7
 8001d3a:	42b8      	cmp	r0, r7
 8001d3c:	4180      	sbcs	r0, r0
 8001d3e:	4240      	negs	r0, r0
 8001d40:	1a24      	subs	r4, r4, r0
 8001d42:	0223      	lsls	r3, r4, #8
 8001d44:	d400      	bmi.n	8001d48 <__aeabi_dsub+0xc0>
 8001d46:	e140      	b.n	8001fca <__aeabi_dsub+0x342>
 8001d48:	0264      	lsls	r4, r4, #9
 8001d4a:	0a64      	lsrs	r4, r4, #9
 8001d4c:	2c00      	cmp	r4, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0xca>
 8001d50:	e154      	b.n	8001ffc <__aeabi_dsub+0x374>
 8001d52:	0020      	movs	r0, r4
 8001d54:	f7fe fba8 	bl	80004a8 <__clzsi2>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	0038      	movs	r0, r7
 8001d60:	1aca      	subs	r2, r1, r3
 8001d62:	40d0      	lsrs	r0, r2
 8001d64:	409c      	lsls	r4, r3
 8001d66:	0002      	movs	r2, r0
 8001d68:	409f      	lsls	r7, r3
 8001d6a:	4322      	orrs	r2, r4
 8001d6c:	429d      	cmp	r5, r3
 8001d6e:	dd00      	ble.n	8001d72 <__aeabi_dsub+0xea>
 8001d70:	e1a6      	b.n	80020c0 <__aeabi_dsub+0x438>
 8001d72:	1b58      	subs	r0, r3, r5
 8001d74:	3001      	adds	r0, #1
 8001d76:	1a09      	subs	r1, r1, r0
 8001d78:	003c      	movs	r4, r7
 8001d7a:	408f      	lsls	r7, r1
 8001d7c:	40c4      	lsrs	r4, r0
 8001d7e:	1e7b      	subs	r3, r7, #1
 8001d80:	419f      	sbcs	r7, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	408b      	lsls	r3, r1
 8001d86:	4327      	orrs	r7, r4
 8001d88:	431f      	orrs	r7, r3
 8001d8a:	40c2      	lsrs	r2, r0
 8001d8c:	003b      	movs	r3, r7
 8001d8e:	0014      	movs	r4, r2
 8001d90:	2500      	movs	r5, #0
 8001d92:	4313      	orrs	r3, r2
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x110>
 8001d96:	e1f7      	b.n	8002188 <__aeabi_dsub+0x500>
 8001d98:	077b      	lsls	r3, r7, #29
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x116>
 8001d9c:	e377      	b.n	800248e <__aeabi_dsub+0x806>
 8001d9e:	230f      	movs	r3, #15
 8001da0:	0038      	movs	r0, r7
 8001da2:	403b      	ands	r3, r7
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d004      	beq.n	8001db2 <__aeabi_dsub+0x12a>
 8001da8:	1d38      	adds	r0, r7, #4
 8001daa:	42b8      	cmp	r0, r7
 8001dac:	41bf      	sbcs	r7, r7
 8001dae:	427f      	negs	r7, r7
 8001db0:	19e4      	adds	r4, r4, r7
 8001db2:	0223      	lsls	r3, r4, #8
 8001db4:	d400      	bmi.n	8001db8 <__aeabi_dsub+0x130>
 8001db6:	e368      	b.n	800248a <__aeabi_dsub+0x802>
 8001db8:	4b8c      	ldr	r3, [pc, #560]	@ (8001fec <__aeabi_dsub+0x364>)
 8001dba:	3501      	adds	r5, #1
 8001dbc:	429d      	cmp	r5, r3
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x13a>
 8001dc0:	e0f4      	b.n	8001fac <__aeabi_dsub+0x324>
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff0 <__aeabi_dsub+0x368>)
 8001dc4:	056d      	lsls	r5, r5, #21
 8001dc6:	401c      	ands	r4, r3
 8001dc8:	0d6d      	lsrs	r5, r5, #21
 8001dca:	0767      	lsls	r7, r4, #29
 8001dcc:	08c0      	lsrs	r0, r0, #3
 8001dce:	0264      	lsls	r4, r4, #9
 8001dd0:	4307      	orrs	r7, r0
 8001dd2:	0b24      	lsrs	r4, r4, #12
 8001dd4:	e0ec      	b.n	8001fb0 <__aeabi_dsub+0x328>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	dc00      	bgt.n	8001ddc <__aeabi_dsub+0x154>
 8001dda:	e329      	b.n	8002430 <__aeabi_dsub+0x7a8>
 8001ddc:	4649      	mov	r1, r9
 8001dde:	2900      	cmp	r1, #0
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x15c>
 8001de2:	e0d6      	b.n	8001f92 <__aeabi_dsub+0x30a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	4311      	orrs	r1, r2
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x164>
 8001dea:	e12e      	b.n	800204a <__aeabi_dsub+0x3c2>
 8001dec:	1e59      	subs	r1, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0x16c>
 8001df2:	e1e6      	b.n	80021c2 <__aeabi_dsub+0x53a>
 8001df4:	42bb      	cmp	r3, r7
 8001df6:	d100      	bne.n	8001dfa <__aeabi_dsub+0x172>
 8001df8:	e182      	b.n	8002100 <__aeabi_dsub+0x478>
 8001dfa:	2701      	movs	r7, #1
 8001dfc:	000b      	movs	r3, r1
 8001dfe:	2938      	cmp	r1, #56	@ 0x38
 8001e00:	dc14      	bgt.n	8001e2c <__aeabi_dsub+0x1a4>
 8001e02:	2b1f      	cmp	r3, #31
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_dsub+0x180>
 8001e06:	e23c      	b.n	8002282 <__aeabi_dsub+0x5fa>
 8001e08:	2720      	movs	r7, #32
 8001e0a:	1af9      	subs	r1, r7, r3
 8001e0c:	468c      	mov	ip, r1
 8001e0e:	4659      	mov	r1, fp
 8001e10:	4667      	mov	r7, ip
 8001e12:	40b9      	lsls	r1, r7
 8001e14:	000f      	movs	r7, r1
 8001e16:	0011      	movs	r1, r2
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	430f      	orrs	r7, r1
 8001e1c:	4661      	mov	r1, ip
 8001e1e:	408a      	lsls	r2, r1
 8001e20:	1e51      	subs	r1, r2, #1
 8001e22:	418a      	sbcs	r2, r1
 8001e24:	4659      	mov	r1, fp
 8001e26:	40d9      	lsrs	r1, r3
 8001e28:	4317      	orrs	r7, r2
 8001e2a:	1864      	adds	r4, r4, r1
 8001e2c:	183f      	adds	r7, r7, r0
 8001e2e:	4287      	cmp	r7, r0
 8001e30:	4180      	sbcs	r0, r0
 8001e32:	4240      	negs	r0, r0
 8001e34:	1824      	adds	r4, r4, r0
 8001e36:	0223      	lsls	r3, r4, #8
 8001e38:	d400      	bmi.n	8001e3c <__aeabi_dsub+0x1b4>
 8001e3a:	e0c6      	b.n	8001fca <__aeabi_dsub+0x342>
 8001e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001fec <__aeabi_dsub+0x364>)
 8001e3e:	3501      	adds	r5, #1
 8001e40:	429d      	cmp	r5, r3
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x1be>
 8001e44:	e0b2      	b.n	8001fac <__aeabi_dsub+0x324>
 8001e46:	2101      	movs	r1, #1
 8001e48:	4b69      	ldr	r3, [pc, #420]	@ (8001ff0 <__aeabi_dsub+0x368>)
 8001e4a:	087a      	lsrs	r2, r7, #1
 8001e4c:	401c      	ands	r4, r3
 8001e4e:	4039      	ands	r1, r7
 8001e50:	430a      	orrs	r2, r1
 8001e52:	07e7      	lsls	r7, r4, #31
 8001e54:	4317      	orrs	r7, r2
 8001e56:	0864      	lsrs	r4, r4, #1
 8001e58:	e79e      	b.n	8001d98 <__aeabi_dsub+0x110>
 8001e5a:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <__aeabi_dsub+0x36c>)
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	468a      	mov	sl, r1
 8001e60:	18eb      	adds	r3, r5, r3
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d028      	beq.n	8001eb8 <__aeabi_dsub+0x230>
 8001e66:	4566      	cmp	r6, ip
 8001e68:	d02c      	beq.n	8001ec4 <__aeabi_dsub+0x23c>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d05b      	beq.n	8001f26 <__aeabi_dsub+0x29e>
 8001e6e:	2d00      	cmp	r5, #0
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x1ec>
 8001e72:	e12c      	b.n	80020ce <__aeabi_dsub+0x446>
 8001e74:	465b      	mov	r3, fp
 8001e76:	4666      	mov	r6, ip
 8001e78:	075f      	lsls	r7, r3, #29
 8001e7a:	08d2      	lsrs	r2, r2, #3
 8001e7c:	4317      	orrs	r7, r2
 8001e7e:	08dd      	lsrs	r5, r3, #3
 8001e80:	003b      	movs	r3, r7
 8001e82:	432b      	orrs	r3, r5
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x200>
 8001e86:	e0e2      	b.n	800204e <__aeabi_dsub+0x3c6>
 8001e88:	2480      	movs	r4, #128	@ 0x80
 8001e8a:	0324      	lsls	r4, r4, #12
 8001e8c:	432c      	orrs	r4, r5
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4d56      	ldr	r5, [pc, #344]	@ (8001fec <__aeabi_dsub+0x364>)
 8001e92:	0b24      	lsrs	r4, r4, #12
 8001e94:	e08c      	b.n	8001fb0 <__aeabi_dsub+0x328>
 8001e96:	4659      	mov	r1, fp
 8001e98:	4311      	orrs	r1, r2
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dsub+0x216>
 8001e9c:	e0d5      	b.n	800204a <__aeabi_dsub+0x3c2>
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x21e>
 8001ea4:	e1b9      	b.n	800221a <__aeabi_dsub+0x592>
 8001ea6:	42bb      	cmp	r3, r7
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x224>
 8001eaa:	e1b1      	b.n	8002210 <__aeabi_dsub+0x588>
 8001eac:	2701      	movs	r7, #1
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2938      	cmp	r1, #56	@ 0x38
 8001eb2:	dd00      	ble.n	8001eb6 <__aeabi_dsub+0x22e>
 8001eb4:	e740      	b.n	8001d38 <__aeabi_dsub+0xb0>
 8001eb6:	e72a      	b.n	8001d0e <__aeabi_dsub+0x86>
 8001eb8:	4661      	mov	r1, ip
 8001eba:	2701      	movs	r7, #1
 8001ebc:	4079      	eors	r1, r7
 8001ebe:	468c      	mov	ip, r1
 8001ec0:	4566      	cmp	r6, ip
 8001ec2:	d1d2      	bne.n	8001e6a <__aeabi_dsub+0x1e2>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x242>
 8001ec8:	e0c5      	b.n	8002056 <__aeabi_dsub+0x3ce>
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	d000      	beq.n	8001ed0 <__aeabi_dsub+0x248>
 8001ece:	e155      	b.n	800217c <__aeabi_dsub+0x4f4>
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	0025      	movs	r5, r4
 8001ed4:	4305      	orrs	r5, r0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x252>
 8001ed8:	e212      	b.n	8002300 <__aeabi_dsub+0x678>
 8001eda:	1e59      	subs	r1, r3, #1
 8001edc:	468c      	mov	ip, r1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x25c>
 8001ee2:	e249      	b.n	8002378 <__aeabi_dsub+0x6f0>
 8001ee4:	4d41      	ldr	r5, [pc, #260]	@ (8001fec <__aeabi_dsub+0x364>)
 8001ee6:	42ab      	cmp	r3, r5
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x264>
 8001eea:	e28f      	b.n	800240c <__aeabi_dsub+0x784>
 8001eec:	2701      	movs	r7, #1
 8001eee:	2938      	cmp	r1, #56	@ 0x38
 8001ef0:	dc11      	bgt.n	8001f16 <__aeabi_dsub+0x28e>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	2b1f      	cmp	r3, #31
 8001ef6:	dd00      	ble.n	8001efa <__aeabi_dsub+0x272>
 8001ef8:	e25b      	b.n	80023b2 <__aeabi_dsub+0x72a>
 8001efa:	4661      	mov	r1, ip
 8001efc:	2320      	movs	r3, #32
 8001efe:	0027      	movs	r7, r4
 8001f00:	1a5b      	subs	r3, r3, r1
 8001f02:	0005      	movs	r5, r0
 8001f04:	4098      	lsls	r0, r3
 8001f06:	409f      	lsls	r7, r3
 8001f08:	40cd      	lsrs	r5, r1
 8001f0a:	1e43      	subs	r3, r0, #1
 8001f0c:	4198      	sbcs	r0, r3
 8001f0e:	40cc      	lsrs	r4, r1
 8001f10:	432f      	orrs	r7, r5
 8001f12:	4307      	orrs	r7, r0
 8001f14:	44a3      	add	fp, r4
 8001f16:	18bf      	adds	r7, r7, r2
 8001f18:	4297      	cmp	r7, r2
 8001f1a:	4192      	sbcs	r2, r2
 8001f1c:	4252      	negs	r2, r2
 8001f1e:	445a      	add	r2, fp
 8001f20:	0014      	movs	r4, r2
 8001f22:	464d      	mov	r5, r9
 8001f24:	e787      	b.n	8001e36 <__aeabi_dsub+0x1ae>
 8001f26:	4f34      	ldr	r7, [pc, #208]	@ (8001ff8 <__aeabi_dsub+0x370>)
 8001f28:	1c6b      	adds	r3, r5, #1
 8001f2a:	423b      	tst	r3, r7
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x2a8>
 8001f2e:	e0b6      	b.n	800209e <__aeabi_dsub+0x416>
 8001f30:	4659      	mov	r1, fp
 8001f32:	0023      	movs	r3, r4
 8001f34:	4311      	orrs	r1, r2
 8001f36:	000f      	movs	r7, r1
 8001f38:	4303      	orrs	r3, r0
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_dsub+0x2b8>
 8001f3e:	e126      	b.n	800218e <__aeabi_dsub+0x506>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dsub+0x2be>
 8001f44:	e1c0      	b.n	80022c8 <__aeabi_dsub+0x640>
 8001f46:	2900      	cmp	r1, #0
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x2c4>
 8001f4a:	e0a1      	b.n	8002090 <__aeabi_dsub+0x408>
 8001f4c:	1a83      	subs	r3, r0, r2
 8001f4e:	4698      	mov	r8, r3
 8001f50:	465b      	mov	r3, fp
 8001f52:	4540      	cmp	r0, r8
 8001f54:	41ad      	sbcs	r5, r5
 8001f56:	1ae3      	subs	r3, r4, r3
 8001f58:	426d      	negs	r5, r5
 8001f5a:	1b5b      	subs	r3, r3, r5
 8001f5c:	2580      	movs	r5, #128	@ 0x80
 8001f5e:	042d      	lsls	r5, r5, #16
 8001f60:	422b      	tst	r3, r5
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x2de>
 8001f64:	e14b      	b.n	80021fe <__aeabi_dsub+0x576>
 8001f66:	465b      	mov	r3, fp
 8001f68:	1a10      	subs	r0, r2, r0
 8001f6a:	4282      	cmp	r2, r0
 8001f6c:	4192      	sbcs	r2, r2
 8001f6e:	1b1c      	subs	r4, r3, r4
 8001f70:	0007      	movs	r7, r0
 8001f72:	2601      	movs	r6, #1
 8001f74:	4663      	mov	r3, ip
 8001f76:	4252      	negs	r2, r2
 8001f78:	1aa4      	subs	r4, r4, r2
 8001f7a:	4327      	orrs	r7, r4
 8001f7c:	401e      	ands	r6, r3
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x2fc>
 8001f82:	e142      	b.n	800220a <__aeabi_dsub+0x582>
 8001f84:	422c      	tst	r4, r5
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x302>
 8001f88:	e26d      	b.n	8002466 <__aeabi_dsub+0x7de>
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <__aeabi_dsub+0x368>)
 8001f8c:	2501      	movs	r5, #1
 8001f8e:	401c      	ands	r4, r3
 8001f90:	e71b      	b.n	8001dca <__aeabi_dsub+0x142>
 8001f92:	42bd      	cmp	r5, r7
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x310>
 8001f96:	e13b      	b.n	8002210 <__aeabi_dsub+0x588>
 8001f98:	2701      	movs	r7, #1
 8001f9a:	2b38      	cmp	r3, #56	@ 0x38
 8001f9c:	dd00      	ble.n	8001fa0 <__aeabi_dsub+0x318>
 8001f9e:	e745      	b.n	8001e2c <__aeabi_dsub+0x1a4>
 8001fa0:	2780      	movs	r7, #128	@ 0x80
 8001fa2:	4659      	mov	r1, fp
 8001fa4:	043f      	lsls	r7, r7, #16
 8001fa6:	4339      	orrs	r1, r7
 8001fa8:	468b      	mov	fp, r1
 8001faa:	e72a      	b.n	8001e02 <__aeabi_dsub+0x17a>
 8001fac:	2400      	movs	r4, #0
 8001fae:	2700      	movs	r7, #0
 8001fb0:	052d      	lsls	r5, r5, #20
 8001fb2:	4325      	orrs	r5, r4
 8001fb4:	07f6      	lsls	r6, r6, #31
 8001fb6:	4335      	orrs	r5, r6
 8001fb8:	0038      	movs	r0, r7
 8001fba:	0029      	movs	r1, r5
 8001fbc:	b003      	add	sp, #12
 8001fbe:	bcf0      	pop	{r4, r5, r6, r7}
 8001fc0:	46bb      	mov	fp, r7
 8001fc2:	46b2      	mov	sl, r6
 8001fc4:	46a9      	mov	r9, r5
 8001fc6:	46a0      	mov	r8, r4
 8001fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fca:	077b      	lsls	r3, r7, #29
 8001fcc:	d004      	beq.n	8001fd8 <__aeabi_dsub+0x350>
 8001fce:	230f      	movs	r3, #15
 8001fd0:	403b      	ands	r3, r7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x350>
 8001fd6:	e6e7      	b.n	8001da8 <__aeabi_dsub+0x120>
 8001fd8:	002b      	movs	r3, r5
 8001fda:	08f8      	lsrs	r0, r7, #3
 8001fdc:	4a03      	ldr	r2, [pc, #12]	@ (8001fec <__aeabi_dsub+0x364>)
 8001fde:	0767      	lsls	r7, r4, #29
 8001fe0:	4307      	orrs	r7, r0
 8001fe2:	08e5      	lsrs	r5, r4, #3
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x362>
 8001fe8:	e74a      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 8001fea:	e0a5      	b.n	8002138 <__aeabi_dsub+0x4b0>
 8001fec:	000007ff 	.word	0x000007ff
 8001ff0:	ff7fffff 	.word	0xff7fffff
 8001ff4:	fffff801 	.word	0xfffff801
 8001ff8:	000007fe 	.word	0x000007fe
 8001ffc:	0038      	movs	r0, r7
 8001ffe:	f7fe fa53 	bl	80004a8 <__clzsi2>
 8002002:	0003      	movs	r3, r0
 8002004:	3318      	adds	r3, #24
 8002006:	2b1f      	cmp	r3, #31
 8002008:	dc00      	bgt.n	800200c <__aeabi_dsub+0x384>
 800200a:	e6a7      	b.n	8001d5c <__aeabi_dsub+0xd4>
 800200c:	003a      	movs	r2, r7
 800200e:	3808      	subs	r0, #8
 8002010:	4082      	lsls	r2, r0
 8002012:	429d      	cmp	r5, r3
 8002014:	dd00      	ble.n	8002018 <__aeabi_dsub+0x390>
 8002016:	e08a      	b.n	800212e <__aeabi_dsub+0x4a6>
 8002018:	1b5b      	subs	r3, r3, r5
 800201a:	1c58      	adds	r0, r3, #1
 800201c:	281f      	cmp	r0, #31
 800201e:	dc00      	bgt.n	8002022 <__aeabi_dsub+0x39a>
 8002020:	e1d8      	b.n	80023d4 <__aeabi_dsub+0x74c>
 8002022:	0017      	movs	r7, r2
 8002024:	3b1f      	subs	r3, #31
 8002026:	40df      	lsrs	r7, r3
 8002028:	2820      	cmp	r0, #32
 800202a:	d005      	beq.n	8002038 <__aeabi_dsub+0x3b0>
 800202c:	2340      	movs	r3, #64	@ 0x40
 800202e:	1a1b      	subs	r3, r3, r0
 8002030:	409a      	lsls	r2, r3
 8002032:	1e53      	subs	r3, r2, #1
 8002034:	419a      	sbcs	r2, r3
 8002036:	4317      	orrs	r7, r2
 8002038:	2500      	movs	r5, #0
 800203a:	2f00      	cmp	r7, #0
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x3b8>
 800203e:	e0e5      	b.n	800220c <__aeabi_dsub+0x584>
 8002040:	077b      	lsls	r3, r7, #29
 8002042:	d000      	beq.n	8002046 <__aeabi_dsub+0x3be>
 8002044:	e6ab      	b.n	8001d9e <__aeabi_dsub+0x116>
 8002046:	002c      	movs	r4, r5
 8002048:	e7c6      	b.n	8001fd8 <__aeabi_dsub+0x350>
 800204a:	08c0      	lsrs	r0, r0, #3
 800204c:	e7c6      	b.n	8001fdc <__aeabi_dsub+0x354>
 800204e:	2700      	movs	r7, #0
 8002050:	2400      	movs	r4, #0
 8002052:	4dd1      	ldr	r5, [pc, #836]	@ (8002398 <__aeabi_dsub+0x710>)
 8002054:	e7ac      	b.n	8001fb0 <__aeabi_dsub+0x328>
 8002056:	4fd1      	ldr	r7, [pc, #836]	@ (800239c <__aeabi_dsub+0x714>)
 8002058:	1c6b      	adds	r3, r5, #1
 800205a:	423b      	tst	r3, r7
 800205c:	d171      	bne.n	8002142 <__aeabi_dsub+0x4ba>
 800205e:	0023      	movs	r3, r4
 8002060:	4303      	orrs	r3, r0
 8002062:	2d00      	cmp	r5, #0
 8002064:	d000      	beq.n	8002068 <__aeabi_dsub+0x3e0>
 8002066:	e14e      	b.n	8002306 <__aeabi_dsub+0x67e>
 8002068:	4657      	mov	r7, sl
 800206a:	2b00      	cmp	r3, #0
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x3e8>
 800206e:	e1b5      	b.n	80023dc <__aeabi_dsub+0x754>
 8002070:	2f00      	cmp	r7, #0
 8002072:	d00d      	beq.n	8002090 <__aeabi_dsub+0x408>
 8002074:	1883      	adds	r3, r0, r2
 8002076:	4283      	cmp	r3, r0
 8002078:	4180      	sbcs	r0, r0
 800207a:	445c      	add	r4, fp
 800207c:	4240      	negs	r0, r0
 800207e:	1824      	adds	r4, r4, r0
 8002080:	0222      	lsls	r2, r4, #8
 8002082:	d500      	bpl.n	8002086 <__aeabi_dsub+0x3fe>
 8002084:	e1c8      	b.n	8002418 <__aeabi_dsub+0x790>
 8002086:	001f      	movs	r7, r3
 8002088:	4698      	mov	r8, r3
 800208a:	4327      	orrs	r7, r4
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x408>
 800208e:	e0bc      	b.n	800220a <__aeabi_dsub+0x582>
 8002090:	4643      	mov	r3, r8
 8002092:	0767      	lsls	r7, r4, #29
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	431f      	orrs	r7, r3
 8002098:	08e5      	lsrs	r5, r4, #3
 800209a:	2300      	movs	r3, #0
 800209c:	e04c      	b.n	8002138 <__aeabi_dsub+0x4b0>
 800209e:	1a83      	subs	r3, r0, r2
 80020a0:	4698      	mov	r8, r3
 80020a2:	465b      	mov	r3, fp
 80020a4:	4540      	cmp	r0, r8
 80020a6:	41bf      	sbcs	r7, r7
 80020a8:	1ae3      	subs	r3, r4, r3
 80020aa:	427f      	negs	r7, r7
 80020ac:	1bdb      	subs	r3, r3, r7
 80020ae:	021f      	lsls	r7, r3, #8
 80020b0:	d47c      	bmi.n	80021ac <__aeabi_dsub+0x524>
 80020b2:	4647      	mov	r7, r8
 80020b4:	431f      	orrs	r7, r3
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x432>
 80020b8:	e0a6      	b.n	8002208 <__aeabi_dsub+0x580>
 80020ba:	001c      	movs	r4, r3
 80020bc:	4647      	mov	r7, r8
 80020be:	e645      	b.n	8001d4c <__aeabi_dsub+0xc4>
 80020c0:	4cb7      	ldr	r4, [pc, #732]	@ (80023a0 <__aeabi_dsub+0x718>)
 80020c2:	1aed      	subs	r5, r5, r3
 80020c4:	4014      	ands	r4, r2
 80020c6:	077b      	lsls	r3, r7, #29
 80020c8:	d000      	beq.n	80020cc <__aeabi_dsub+0x444>
 80020ca:	e780      	b.n	8001fce <__aeabi_dsub+0x346>
 80020cc:	e784      	b.n	8001fd8 <__aeabi_dsub+0x350>
 80020ce:	464b      	mov	r3, r9
 80020d0:	0025      	movs	r5, r4
 80020d2:	4305      	orrs	r5, r0
 80020d4:	d066      	beq.n	80021a4 <__aeabi_dsub+0x51c>
 80020d6:	1e5f      	subs	r7, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d100      	bne.n	80020de <__aeabi_dsub+0x456>
 80020dc:	e0fc      	b.n	80022d8 <__aeabi_dsub+0x650>
 80020de:	4dae      	ldr	r5, [pc, #696]	@ (8002398 <__aeabi_dsub+0x710>)
 80020e0:	42ab      	cmp	r3, r5
 80020e2:	d100      	bne.n	80020e6 <__aeabi_dsub+0x45e>
 80020e4:	e15e      	b.n	80023a4 <__aeabi_dsub+0x71c>
 80020e6:	4666      	mov	r6, ip
 80020e8:	2f38      	cmp	r7, #56	@ 0x38
 80020ea:	dc00      	bgt.n	80020ee <__aeabi_dsub+0x466>
 80020ec:	e0b4      	b.n	8002258 <__aeabi_dsub+0x5d0>
 80020ee:	2001      	movs	r0, #1
 80020f0:	1a17      	subs	r7, r2, r0
 80020f2:	42ba      	cmp	r2, r7
 80020f4:	4192      	sbcs	r2, r2
 80020f6:	465b      	mov	r3, fp
 80020f8:	4252      	negs	r2, r2
 80020fa:	464d      	mov	r5, r9
 80020fc:	1a9c      	subs	r4, r3, r2
 80020fe:	e620      	b.n	8001d42 <__aeabi_dsub+0xba>
 8002100:	0767      	lsls	r7, r4, #29
 8002102:	08c0      	lsrs	r0, r0, #3
 8002104:	4307      	orrs	r7, r0
 8002106:	08e5      	lsrs	r5, r4, #3
 8002108:	e6ba      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 800210a:	001f      	movs	r7, r3
 800210c:	4659      	mov	r1, fp
 800210e:	3f20      	subs	r7, #32
 8002110:	40f9      	lsrs	r1, r7
 8002112:	000f      	movs	r7, r1
 8002114:	2b20      	cmp	r3, #32
 8002116:	d005      	beq.n	8002124 <__aeabi_dsub+0x49c>
 8002118:	2140      	movs	r1, #64	@ 0x40
 800211a:	1acb      	subs	r3, r1, r3
 800211c:	4659      	mov	r1, fp
 800211e:	4099      	lsls	r1, r3
 8002120:	430a      	orrs	r2, r1
 8002122:	4692      	mov	sl, r2
 8002124:	4653      	mov	r3, sl
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	4193      	sbcs	r3, r2
 800212a:	431f      	orrs	r7, r3
 800212c:	e604      	b.n	8001d38 <__aeabi_dsub+0xb0>
 800212e:	1aeb      	subs	r3, r5, r3
 8002130:	4d9b      	ldr	r5, [pc, #620]	@ (80023a0 <__aeabi_dsub+0x718>)
 8002132:	4015      	ands	r5, r2
 8002134:	076f      	lsls	r7, r5, #29
 8002136:	08ed      	lsrs	r5, r5, #3
 8002138:	032c      	lsls	r4, r5, #12
 800213a:	055d      	lsls	r5, r3, #21
 800213c:	0b24      	lsrs	r4, r4, #12
 800213e:	0d6d      	lsrs	r5, r5, #21
 8002140:	e736      	b.n	8001fb0 <__aeabi_dsub+0x328>
 8002142:	4d95      	ldr	r5, [pc, #596]	@ (8002398 <__aeabi_dsub+0x710>)
 8002144:	42ab      	cmp	r3, r5
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x4c2>
 8002148:	e0d6      	b.n	80022f8 <__aeabi_dsub+0x670>
 800214a:	1882      	adds	r2, r0, r2
 800214c:	0021      	movs	r1, r4
 800214e:	4282      	cmp	r2, r0
 8002150:	4180      	sbcs	r0, r0
 8002152:	4459      	add	r1, fp
 8002154:	4240      	negs	r0, r0
 8002156:	1808      	adds	r0, r1, r0
 8002158:	07c7      	lsls	r7, r0, #31
 800215a:	0852      	lsrs	r2, r2, #1
 800215c:	4317      	orrs	r7, r2
 800215e:	0844      	lsrs	r4, r0, #1
 8002160:	0752      	lsls	r2, r2, #29
 8002162:	d400      	bmi.n	8002166 <__aeabi_dsub+0x4de>
 8002164:	e185      	b.n	8002472 <__aeabi_dsub+0x7ea>
 8002166:	220f      	movs	r2, #15
 8002168:	001d      	movs	r5, r3
 800216a:	403a      	ands	r2, r7
 800216c:	2a04      	cmp	r2, #4
 800216e:	d000      	beq.n	8002172 <__aeabi_dsub+0x4ea>
 8002170:	e61a      	b.n	8001da8 <__aeabi_dsub+0x120>
 8002172:	08ff      	lsrs	r7, r7, #3
 8002174:	0764      	lsls	r4, r4, #29
 8002176:	4327      	orrs	r7, r4
 8002178:	0905      	lsrs	r5, r0, #4
 800217a:	e7dd      	b.n	8002138 <__aeabi_dsub+0x4b0>
 800217c:	465b      	mov	r3, fp
 800217e:	08d2      	lsrs	r2, r2, #3
 8002180:	075f      	lsls	r7, r3, #29
 8002182:	4317      	orrs	r7, r2
 8002184:	08dd      	lsrs	r5, r3, #3
 8002186:	e67b      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 8002188:	2700      	movs	r7, #0
 800218a:	2400      	movs	r4, #0
 800218c:	e710      	b.n	8001fb0 <__aeabi_dsub+0x328>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d000      	beq.n	8002194 <__aeabi_dsub+0x50c>
 8002192:	e0d6      	b.n	8002342 <__aeabi_dsub+0x6ba>
 8002194:	2900      	cmp	r1, #0
 8002196:	d000      	beq.n	800219a <__aeabi_dsub+0x512>
 8002198:	e12f      	b.n	80023fa <__aeabi_dsub+0x772>
 800219a:	2480      	movs	r4, #128	@ 0x80
 800219c:	2600      	movs	r6, #0
 800219e:	4d7e      	ldr	r5, [pc, #504]	@ (8002398 <__aeabi_dsub+0x710>)
 80021a0:	0324      	lsls	r4, r4, #12
 80021a2:	e705      	b.n	8001fb0 <__aeabi_dsub+0x328>
 80021a4:	4666      	mov	r6, ip
 80021a6:	465c      	mov	r4, fp
 80021a8:	08d0      	lsrs	r0, r2, #3
 80021aa:	e717      	b.n	8001fdc <__aeabi_dsub+0x354>
 80021ac:	465b      	mov	r3, fp
 80021ae:	1a17      	subs	r7, r2, r0
 80021b0:	42ba      	cmp	r2, r7
 80021b2:	4192      	sbcs	r2, r2
 80021b4:	1b1c      	subs	r4, r3, r4
 80021b6:	2601      	movs	r6, #1
 80021b8:	4663      	mov	r3, ip
 80021ba:	4252      	negs	r2, r2
 80021bc:	1aa4      	subs	r4, r4, r2
 80021be:	401e      	ands	r6, r3
 80021c0:	e5c4      	b.n	8001d4c <__aeabi_dsub+0xc4>
 80021c2:	1883      	adds	r3, r0, r2
 80021c4:	4283      	cmp	r3, r0
 80021c6:	4180      	sbcs	r0, r0
 80021c8:	445c      	add	r4, fp
 80021ca:	4240      	negs	r0, r0
 80021cc:	1825      	adds	r5, r4, r0
 80021ce:	022a      	lsls	r2, r5, #8
 80021d0:	d400      	bmi.n	80021d4 <__aeabi_dsub+0x54c>
 80021d2:	e0da      	b.n	800238a <__aeabi_dsub+0x702>
 80021d4:	4a72      	ldr	r2, [pc, #456]	@ (80023a0 <__aeabi_dsub+0x718>)
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	4015      	ands	r5, r2
 80021da:	07ea      	lsls	r2, r5, #31
 80021dc:	431a      	orrs	r2, r3
 80021de:	0869      	lsrs	r1, r5, #1
 80021e0:	075b      	lsls	r3, r3, #29
 80021e2:	d400      	bmi.n	80021e6 <__aeabi_dsub+0x55e>
 80021e4:	e14a      	b.n	800247c <__aeabi_dsub+0x7f4>
 80021e6:	230f      	movs	r3, #15
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x568>
 80021ee:	e0fc      	b.n	80023ea <__aeabi_dsub+0x762>
 80021f0:	1d17      	adds	r7, r2, #4
 80021f2:	4297      	cmp	r7, r2
 80021f4:	41a4      	sbcs	r4, r4
 80021f6:	4264      	negs	r4, r4
 80021f8:	2502      	movs	r5, #2
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	e6ec      	b.n	8001fd8 <__aeabi_dsub+0x350>
 80021fe:	4647      	mov	r7, r8
 8002200:	001c      	movs	r4, r3
 8002202:	431f      	orrs	r7, r3
 8002204:	d000      	beq.n	8002208 <__aeabi_dsub+0x580>
 8002206:	e743      	b.n	8002090 <__aeabi_dsub+0x408>
 8002208:	2600      	movs	r6, #0
 800220a:	2500      	movs	r5, #0
 800220c:	2400      	movs	r4, #0
 800220e:	e6cf      	b.n	8001fb0 <__aeabi_dsub+0x328>
 8002210:	08c0      	lsrs	r0, r0, #3
 8002212:	0767      	lsls	r7, r4, #29
 8002214:	4307      	orrs	r7, r0
 8002216:	08e5      	lsrs	r5, r4, #3
 8002218:	e632      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 800221a:	1a87      	subs	r7, r0, r2
 800221c:	465b      	mov	r3, fp
 800221e:	42b8      	cmp	r0, r7
 8002220:	4180      	sbcs	r0, r0
 8002222:	1ae4      	subs	r4, r4, r3
 8002224:	4240      	negs	r0, r0
 8002226:	1a24      	subs	r4, r4, r0
 8002228:	0223      	lsls	r3, r4, #8
 800222a:	d428      	bmi.n	800227e <__aeabi_dsub+0x5f6>
 800222c:	0763      	lsls	r3, r4, #29
 800222e:	08ff      	lsrs	r7, r7, #3
 8002230:	431f      	orrs	r7, r3
 8002232:	08e5      	lsrs	r5, r4, #3
 8002234:	2301      	movs	r3, #1
 8002236:	e77f      	b.n	8002138 <__aeabi_dsub+0x4b0>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x5b6>
 800223c:	e673      	b.n	8001f26 <__aeabi_dsub+0x29e>
 800223e:	464b      	mov	r3, r9
 8002240:	1b5f      	subs	r7, r3, r5
 8002242:	003b      	movs	r3, r7
 8002244:	2d00      	cmp	r5, #0
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x5c2>
 8002248:	e742      	b.n	80020d0 <__aeabi_dsub+0x448>
 800224a:	2f38      	cmp	r7, #56	@ 0x38
 800224c:	dd00      	ble.n	8002250 <__aeabi_dsub+0x5c8>
 800224e:	e0ec      	b.n	800242a <__aeabi_dsub+0x7a2>
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	000e      	movs	r6, r1
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431c      	orrs	r4, r3
 8002258:	2f1f      	cmp	r7, #31
 800225a:	dc25      	bgt.n	80022a8 <__aeabi_dsub+0x620>
 800225c:	2520      	movs	r5, #32
 800225e:	0023      	movs	r3, r4
 8002260:	1bed      	subs	r5, r5, r7
 8002262:	0001      	movs	r1, r0
 8002264:	40a8      	lsls	r0, r5
 8002266:	40ab      	lsls	r3, r5
 8002268:	40f9      	lsrs	r1, r7
 800226a:	1e45      	subs	r5, r0, #1
 800226c:	41a8      	sbcs	r0, r5
 800226e:	430b      	orrs	r3, r1
 8002270:	40fc      	lsrs	r4, r7
 8002272:	4318      	orrs	r0, r3
 8002274:	465b      	mov	r3, fp
 8002276:	1b1b      	subs	r3, r3, r4
 8002278:	469b      	mov	fp, r3
 800227a:	e739      	b.n	80020f0 <__aeabi_dsub+0x468>
 800227c:	4666      	mov	r6, ip
 800227e:	2501      	movs	r5, #1
 8002280:	e562      	b.n	8001d48 <__aeabi_dsub+0xc0>
 8002282:	001f      	movs	r7, r3
 8002284:	4659      	mov	r1, fp
 8002286:	3f20      	subs	r7, #32
 8002288:	40f9      	lsrs	r1, r7
 800228a:	468c      	mov	ip, r1
 800228c:	2b20      	cmp	r3, #32
 800228e:	d005      	beq.n	800229c <__aeabi_dsub+0x614>
 8002290:	2740      	movs	r7, #64	@ 0x40
 8002292:	4659      	mov	r1, fp
 8002294:	1afb      	subs	r3, r7, r3
 8002296:	4099      	lsls	r1, r3
 8002298:	430a      	orrs	r2, r1
 800229a:	4692      	mov	sl, r2
 800229c:	4657      	mov	r7, sl
 800229e:	1e7b      	subs	r3, r7, #1
 80022a0:	419f      	sbcs	r7, r3
 80022a2:	4663      	mov	r3, ip
 80022a4:	431f      	orrs	r7, r3
 80022a6:	e5c1      	b.n	8001e2c <__aeabi_dsub+0x1a4>
 80022a8:	003b      	movs	r3, r7
 80022aa:	0025      	movs	r5, r4
 80022ac:	3b20      	subs	r3, #32
 80022ae:	40dd      	lsrs	r5, r3
 80022b0:	2f20      	cmp	r7, #32
 80022b2:	d004      	beq.n	80022be <__aeabi_dsub+0x636>
 80022b4:	2340      	movs	r3, #64	@ 0x40
 80022b6:	1bdb      	subs	r3, r3, r7
 80022b8:	409c      	lsls	r4, r3
 80022ba:	4320      	orrs	r0, r4
 80022bc:	4680      	mov	r8, r0
 80022be:	4640      	mov	r0, r8
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	4328      	orrs	r0, r5
 80022c6:	e713      	b.n	80020f0 <__aeabi_dsub+0x468>
 80022c8:	2900      	cmp	r1, #0
 80022ca:	d09d      	beq.n	8002208 <__aeabi_dsub+0x580>
 80022cc:	2601      	movs	r6, #1
 80022ce:	4663      	mov	r3, ip
 80022d0:	465c      	mov	r4, fp
 80022d2:	4690      	mov	r8, r2
 80022d4:	401e      	ands	r6, r3
 80022d6:	e6db      	b.n	8002090 <__aeabi_dsub+0x408>
 80022d8:	1a17      	subs	r7, r2, r0
 80022da:	465b      	mov	r3, fp
 80022dc:	42ba      	cmp	r2, r7
 80022de:	4192      	sbcs	r2, r2
 80022e0:	1b1c      	subs	r4, r3, r4
 80022e2:	4252      	negs	r2, r2
 80022e4:	1aa4      	subs	r4, r4, r2
 80022e6:	0223      	lsls	r3, r4, #8
 80022e8:	d4c8      	bmi.n	800227c <__aeabi_dsub+0x5f4>
 80022ea:	0763      	lsls	r3, r4, #29
 80022ec:	08ff      	lsrs	r7, r7, #3
 80022ee:	431f      	orrs	r7, r3
 80022f0:	4666      	mov	r6, ip
 80022f2:	2301      	movs	r3, #1
 80022f4:	08e5      	lsrs	r5, r4, #3
 80022f6:	e71f      	b.n	8002138 <__aeabi_dsub+0x4b0>
 80022f8:	001d      	movs	r5, r3
 80022fa:	2400      	movs	r4, #0
 80022fc:	2700      	movs	r7, #0
 80022fe:	e657      	b.n	8001fb0 <__aeabi_dsub+0x328>
 8002300:	465c      	mov	r4, fp
 8002302:	08d0      	lsrs	r0, r2, #3
 8002304:	e66a      	b.n	8001fdc <__aeabi_dsub+0x354>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x684>
 800230a:	e737      	b.n	800217c <__aeabi_dsub+0x4f4>
 800230c:	4653      	mov	r3, sl
 800230e:	08c0      	lsrs	r0, r0, #3
 8002310:	0767      	lsls	r7, r4, #29
 8002312:	4307      	orrs	r7, r0
 8002314:	08e5      	lsrs	r5, r4, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x694>
 800231a:	e5b1      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	031b      	lsls	r3, r3, #12
 8002320:	421d      	tst	r5, r3
 8002322:	d008      	beq.n	8002336 <__aeabi_dsub+0x6ae>
 8002324:	4659      	mov	r1, fp
 8002326:	08c8      	lsrs	r0, r1, #3
 8002328:	4218      	tst	r0, r3
 800232a:	d104      	bne.n	8002336 <__aeabi_dsub+0x6ae>
 800232c:	08d2      	lsrs	r2, r2, #3
 800232e:	0749      	lsls	r1, r1, #29
 8002330:	430a      	orrs	r2, r1
 8002332:	0017      	movs	r7, r2
 8002334:	0005      	movs	r5, r0
 8002336:	0f7b      	lsrs	r3, r7, #29
 8002338:	00ff      	lsls	r7, r7, #3
 800233a:	08ff      	lsrs	r7, r7, #3
 800233c:	075b      	lsls	r3, r3, #29
 800233e:	431f      	orrs	r7, r3
 8002340:	e59e      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 8002342:	08c0      	lsrs	r0, r0, #3
 8002344:	0763      	lsls	r3, r4, #29
 8002346:	4318      	orrs	r0, r3
 8002348:	08e5      	lsrs	r5, r4, #3
 800234a:	2900      	cmp	r1, #0
 800234c:	d053      	beq.n	80023f6 <__aeabi_dsub+0x76e>
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	421d      	tst	r5, r3
 8002354:	d00a      	beq.n	800236c <__aeabi_dsub+0x6e4>
 8002356:	4659      	mov	r1, fp
 8002358:	08cc      	lsrs	r4, r1, #3
 800235a:	421c      	tst	r4, r3
 800235c:	d106      	bne.n	800236c <__aeabi_dsub+0x6e4>
 800235e:	2601      	movs	r6, #1
 8002360:	4663      	mov	r3, ip
 8002362:	0025      	movs	r5, r4
 8002364:	08d0      	lsrs	r0, r2, #3
 8002366:	0749      	lsls	r1, r1, #29
 8002368:	4308      	orrs	r0, r1
 800236a:	401e      	ands	r6, r3
 800236c:	0f47      	lsrs	r7, r0, #29
 800236e:	00c0      	lsls	r0, r0, #3
 8002370:	08c0      	lsrs	r0, r0, #3
 8002372:	077f      	lsls	r7, r7, #29
 8002374:	4307      	orrs	r7, r0
 8002376:	e583      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 8002378:	1883      	adds	r3, r0, r2
 800237a:	4293      	cmp	r3, r2
 800237c:	4192      	sbcs	r2, r2
 800237e:	445c      	add	r4, fp
 8002380:	4252      	negs	r2, r2
 8002382:	18a5      	adds	r5, r4, r2
 8002384:	022a      	lsls	r2, r5, #8
 8002386:	d500      	bpl.n	800238a <__aeabi_dsub+0x702>
 8002388:	e724      	b.n	80021d4 <__aeabi_dsub+0x54c>
 800238a:	076f      	lsls	r7, r5, #29
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	431f      	orrs	r7, r3
 8002390:	08ed      	lsrs	r5, r5, #3
 8002392:	2301      	movs	r3, #1
 8002394:	e6d0      	b.n	8002138 <__aeabi_dsub+0x4b0>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	000007ff 	.word	0x000007ff
 800239c:	000007fe 	.word	0x000007fe
 80023a0:	ff7fffff 	.word	0xff7fffff
 80023a4:	465b      	mov	r3, fp
 80023a6:	08d2      	lsrs	r2, r2, #3
 80023a8:	075f      	lsls	r7, r3, #29
 80023aa:	4666      	mov	r6, ip
 80023ac:	4317      	orrs	r7, r2
 80023ae:	08dd      	lsrs	r5, r3, #3
 80023b0:	e566      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 80023b2:	0025      	movs	r5, r4
 80023b4:	3b20      	subs	r3, #32
 80023b6:	40dd      	lsrs	r5, r3
 80023b8:	4663      	mov	r3, ip
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d005      	beq.n	80023ca <__aeabi_dsub+0x742>
 80023be:	2340      	movs	r3, #64	@ 0x40
 80023c0:	4661      	mov	r1, ip
 80023c2:	1a5b      	subs	r3, r3, r1
 80023c4:	409c      	lsls	r4, r3
 80023c6:	4320      	orrs	r0, r4
 80023c8:	4680      	mov	r8, r0
 80023ca:	4647      	mov	r7, r8
 80023cc:	1e7b      	subs	r3, r7, #1
 80023ce:	419f      	sbcs	r7, r3
 80023d0:	432f      	orrs	r7, r5
 80023d2:	e5a0      	b.n	8001f16 <__aeabi_dsub+0x28e>
 80023d4:	2120      	movs	r1, #32
 80023d6:	2700      	movs	r7, #0
 80023d8:	1a09      	subs	r1, r1, r0
 80023da:	e4d2      	b.n	8001d82 <__aeabi_dsub+0xfa>
 80023dc:	2f00      	cmp	r7, #0
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x75a>
 80023e0:	e713      	b.n	800220a <__aeabi_dsub+0x582>
 80023e2:	465c      	mov	r4, fp
 80023e4:	0017      	movs	r7, r2
 80023e6:	2500      	movs	r5, #0
 80023e8:	e5f6      	b.n	8001fd8 <__aeabi_dsub+0x350>
 80023ea:	08d7      	lsrs	r7, r2, #3
 80023ec:	0749      	lsls	r1, r1, #29
 80023ee:	2302      	movs	r3, #2
 80023f0:	430f      	orrs	r7, r1
 80023f2:	092d      	lsrs	r5, r5, #4
 80023f4:	e6a0      	b.n	8002138 <__aeabi_dsub+0x4b0>
 80023f6:	0007      	movs	r7, r0
 80023f8:	e542      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 80023fa:	465b      	mov	r3, fp
 80023fc:	2601      	movs	r6, #1
 80023fe:	075f      	lsls	r7, r3, #29
 8002400:	08dd      	lsrs	r5, r3, #3
 8002402:	4663      	mov	r3, ip
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	4317      	orrs	r7, r2
 8002408:	401e      	ands	r6, r3
 800240a:	e539      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 800240c:	465b      	mov	r3, fp
 800240e:	08d2      	lsrs	r2, r2, #3
 8002410:	075f      	lsls	r7, r3, #29
 8002412:	4317      	orrs	r7, r2
 8002414:	08dd      	lsrs	r5, r3, #3
 8002416:	e533      	b.n	8001e80 <__aeabi_dsub+0x1f8>
 8002418:	4a1e      	ldr	r2, [pc, #120]	@ (8002494 <__aeabi_dsub+0x80c>)
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	4022      	ands	r2, r4
 800241e:	0757      	lsls	r7, r2, #29
 8002420:	0252      	lsls	r2, r2, #9
 8002422:	2501      	movs	r5, #1
 8002424:	431f      	orrs	r7, r3
 8002426:	0b14      	lsrs	r4, r2, #12
 8002428:	e5c2      	b.n	8001fb0 <__aeabi_dsub+0x328>
 800242a:	000e      	movs	r6, r1
 800242c:	2001      	movs	r0, #1
 800242e:	e65f      	b.n	80020f0 <__aeabi_dsub+0x468>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <__aeabi_dsub+0x7c8>
 8002434:	464b      	mov	r3, r9
 8002436:	1b5b      	subs	r3, r3, r5
 8002438:	469c      	mov	ip, r3
 800243a:	2d00      	cmp	r5, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x7b8>
 800243e:	e548      	b.n	8001ed2 <__aeabi_dsub+0x24a>
 8002440:	2701      	movs	r7, #1
 8002442:	2b38      	cmp	r3, #56	@ 0x38
 8002444:	dd00      	ble.n	8002448 <__aeabi_dsub+0x7c0>
 8002446:	e566      	b.n	8001f16 <__aeabi_dsub+0x28e>
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431c      	orrs	r4, r3
 800244e:	e550      	b.n	8001ef2 <__aeabi_dsub+0x26a>
 8002450:	1c6b      	adds	r3, r5, #1
 8002452:	4d11      	ldr	r5, [pc, #68]	@ (8002498 <__aeabi_dsub+0x810>)
 8002454:	422b      	tst	r3, r5
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x7d2>
 8002458:	e673      	b.n	8002142 <__aeabi_dsub+0x4ba>
 800245a:	4659      	mov	r1, fp
 800245c:	0023      	movs	r3, r4
 800245e:	4311      	orrs	r1, r2
 8002460:	468a      	mov	sl, r1
 8002462:	4303      	orrs	r3, r0
 8002464:	e600      	b.n	8002068 <__aeabi_dsub+0x3e0>
 8002466:	0767      	lsls	r7, r4, #29
 8002468:	08c0      	lsrs	r0, r0, #3
 800246a:	2300      	movs	r3, #0
 800246c:	4307      	orrs	r7, r0
 800246e:	08e5      	lsrs	r5, r4, #3
 8002470:	e662      	b.n	8002138 <__aeabi_dsub+0x4b0>
 8002472:	0764      	lsls	r4, r4, #29
 8002474:	08ff      	lsrs	r7, r7, #3
 8002476:	4327      	orrs	r7, r4
 8002478:	0905      	lsrs	r5, r0, #4
 800247a:	e65d      	b.n	8002138 <__aeabi_dsub+0x4b0>
 800247c:	08d2      	lsrs	r2, r2, #3
 800247e:	0749      	lsls	r1, r1, #29
 8002480:	4311      	orrs	r1, r2
 8002482:	000f      	movs	r7, r1
 8002484:	2302      	movs	r3, #2
 8002486:	092d      	lsrs	r5, r5, #4
 8002488:	e656      	b.n	8002138 <__aeabi_dsub+0x4b0>
 800248a:	0007      	movs	r7, r0
 800248c:	e5a4      	b.n	8001fd8 <__aeabi_dsub+0x350>
 800248e:	0038      	movs	r0, r7
 8002490:	e48f      	b.n	8001db2 <__aeabi_dsub+0x12a>
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	ff7fffff 	.word	0xff7fffff
 8002498:	000007fe 	.word	0x000007fe

0800249c <__aeabi_dcmpun>:
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	46c6      	mov	lr, r8
 80024a0:	031e      	lsls	r6, r3, #12
 80024a2:	0b36      	lsrs	r6, r6, #12
 80024a4:	46b0      	mov	r8, r6
 80024a6:	4e0d      	ldr	r6, [pc, #52]	@ (80024dc <__aeabi_dcmpun+0x40>)
 80024a8:	030c      	lsls	r4, r1, #12
 80024aa:	004d      	lsls	r5, r1, #1
 80024ac:	005f      	lsls	r7, r3, #1
 80024ae:	b500      	push	{lr}
 80024b0:	0b24      	lsrs	r4, r4, #12
 80024b2:	0d6d      	lsrs	r5, r5, #21
 80024b4:	0d7f      	lsrs	r7, r7, #21
 80024b6:	42b5      	cmp	r5, r6
 80024b8:	d00b      	beq.n	80024d2 <__aeabi_dcmpun+0x36>
 80024ba:	4908      	ldr	r1, [pc, #32]	@ (80024dc <__aeabi_dcmpun+0x40>)
 80024bc:	2000      	movs	r0, #0
 80024be:	428f      	cmp	r7, r1
 80024c0:	d104      	bne.n	80024cc <__aeabi_dcmpun+0x30>
 80024c2:	4646      	mov	r6, r8
 80024c4:	4316      	orrs	r6, r2
 80024c6:	0030      	movs	r0, r6
 80024c8:	1e43      	subs	r3, r0, #1
 80024ca:	4198      	sbcs	r0, r3
 80024cc:	bc80      	pop	{r7}
 80024ce:	46b8      	mov	r8, r7
 80024d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d2:	4304      	orrs	r4, r0
 80024d4:	2001      	movs	r0, #1
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d1f8      	bne.n	80024cc <__aeabi_dcmpun+0x30>
 80024da:	e7ee      	b.n	80024ba <__aeabi_dcmpun+0x1e>
 80024dc:	000007ff 	.word	0x000007ff

080024e0 <__aeabi_d2iz>:
 80024e0:	000b      	movs	r3, r1
 80024e2:	0002      	movs	r2, r0
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4d16      	ldr	r5, [pc, #88]	@ (8002540 <__aeabi_d2iz+0x60>)
 80024e8:	030c      	lsls	r4, r1, #12
 80024ea:	b082      	sub	sp, #8
 80024ec:	0049      	lsls	r1, r1, #1
 80024ee:	2000      	movs	r0, #0
 80024f0:	9200      	str	r2, [sp, #0]
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	0b24      	lsrs	r4, r4, #12
 80024f6:	0d49      	lsrs	r1, r1, #21
 80024f8:	0fde      	lsrs	r6, r3, #31
 80024fa:	42a9      	cmp	r1, r5
 80024fc:	dd04      	ble.n	8002508 <__aeabi_d2iz+0x28>
 80024fe:	4811      	ldr	r0, [pc, #68]	@ (8002544 <__aeabi_d2iz+0x64>)
 8002500:	4281      	cmp	r1, r0
 8002502:	dd03      	ble.n	800250c <__aeabi_d2iz+0x2c>
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <__aeabi_d2iz+0x68>)
 8002506:	18f0      	adds	r0, r6, r3
 8002508:	b002      	add	sp, #8
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	2080      	movs	r0, #128	@ 0x80
 800250e:	0340      	lsls	r0, r0, #13
 8002510:	4320      	orrs	r0, r4
 8002512:	4c0e      	ldr	r4, [pc, #56]	@ (800254c <__aeabi_d2iz+0x6c>)
 8002514:	1a64      	subs	r4, r4, r1
 8002516:	2c1f      	cmp	r4, #31
 8002518:	dd08      	ble.n	800252c <__aeabi_d2iz+0x4c>
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <__aeabi_d2iz+0x70>)
 800251c:	1a5b      	subs	r3, r3, r1
 800251e:	40d8      	lsrs	r0, r3
 8002520:	0003      	movs	r3, r0
 8002522:	4258      	negs	r0, r3
 8002524:	2e00      	cmp	r6, #0
 8002526:	d1ef      	bne.n	8002508 <__aeabi_d2iz+0x28>
 8002528:	0018      	movs	r0, r3
 800252a:	e7ed      	b.n	8002508 <__aeabi_d2iz+0x28>
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <__aeabi_d2iz+0x74>)
 800252e:	9a00      	ldr	r2, [sp, #0]
 8002530:	469c      	mov	ip, r3
 8002532:	0003      	movs	r3, r0
 8002534:	4461      	add	r1, ip
 8002536:	408b      	lsls	r3, r1
 8002538:	40e2      	lsrs	r2, r4
 800253a:	4313      	orrs	r3, r2
 800253c:	e7f1      	b.n	8002522 <__aeabi_d2iz+0x42>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	000003fe 	.word	0x000003fe
 8002544:	0000041d 	.word	0x0000041d
 8002548:	7fffffff 	.word	0x7fffffff
 800254c:	00000433 	.word	0x00000433
 8002550:	00000413 	.word	0x00000413
 8002554:	fffffbed 	.word	0xfffffbed

08002558 <__aeabi_i2d>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	2800      	cmp	r0, #0
 800255c:	d016      	beq.n	800258c <__aeabi_i2d+0x34>
 800255e:	17c3      	asrs	r3, r0, #31
 8002560:	18c5      	adds	r5, r0, r3
 8002562:	405d      	eors	r5, r3
 8002564:	0fc4      	lsrs	r4, r0, #31
 8002566:	0028      	movs	r0, r5
 8002568:	f7fd ff9e 	bl	80004a8 <__clzsi2>
 800256c:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <__aeabi_i2d+0x58>)
 800256e:	1a1b      	subs	r3, r3, r0
 8002570:	055b      	lsls	r3, r3, #21
 8002572:	0d5b      	lsrs	r3, r3, #21
 8002574:	280a      	cmp	r0, #10
 8002576:	dc14      	bgt.n	80025a2 <__aeabi_i2d+0x4a>
 8002578:	0002      	movs	r2, r0
 800257a:	002e      	movs	r6, r5
 800257c:	3215      	adds	r2, #21
 800257e:	4096      	lsls	r6, r2
 8002580:	220b      	movs	r2, #11
 8002582:	1a12      	subs	r2, r2, r0
 8002584:	40d5      	lsrs	r5, r2
 8002586:	032d      	lsls	r5, r5, #12
 8002588:	0b2d      	lsrs	r5, r5, #12
 800258a:	e003      	b.n	8002594 <__aeabi_i2d+0x3c>
 800258c:	2400      	movs	r4, #0
 800258e:	2300      	movs	r3, #0
 8002590:	2500      	movs	r5, #0
 8002592:	2600      	movs	r6, #0
 8002594:	051b      	lsls	r3, r3, #20
 8002596:	432b      	orrs	r3, r5
 8002598:	07e4      	lsls	r4, r4, #31
 800259a:	4323      	orrs	r3, r4
 800259c:	0030      	movs	r0, r6
 800259e:	0019      	movs	r1, r3
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
 80025a2:	380b      	subs	r0, #11
 80025a4:	4085      	lsls	r5, r0
 80025a6:	032d      	lsls	r5, r5, #12
 80025a8:	2600      	movs	r6, #0
 80025aa:	0b2d      	lsrs	r5, r5, #12
 80025ac:	e7f2      	b.n	8002594 <__aeabi_i2d+0x3c>
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	0000041e 	.word	0x0000041e

080025b4 <__aeabi_ui2d>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	1e04      	subs	r4, r0, #0
 80025b8:	d010      	beq.n	80025dc <__aeabi_ui2d+0x28>
 80025ba:	f7fd ff75 	bl	80004a8 <__clzsi2>
 80025be:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <__aeabi_ui2d+0x44>)
 80025c0:	1a1b      	subs	r3, r3, r0
 80025c2:	055b      	lsls	r3, r3, #21
 80025c4:	0d5b      	lsrs	r3, r3, #21
 80025c6:	280a      	cmp	r0, #10
 80025c8:	dc0f      	bgt.n	80025ea <__aeabi_ui2d+0x36>
 80025ca:	220b      	movs	r2, #11
 80025cc:	0021      	movs	r1, r4
 80025ce:	1a12      	subs	r2, r2, r0
 80025d0:	40d1      	lsrs	r1, r2
 80025d2:	3015      	adds	r0, #21
 80025d4:	030a      	lsls	r2, r1, #12
 80025d6:	4084      	lsls	r4, r0
 80025d8:	0b12      	lsrs	r2, r2, #12
 80025da:	e001      	b.n	80025e0 <__aeabi_ui2d+0x2c>
 80025dc:	2300      	movs	r3, #0
 80025de:	2200      	movs	r2, #0
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	4313      	orrs	r3, r2
 80025e4:	0020      	movs	r0, r4
 80025e6:	0019      	movs	r1, r3
 80025e8:	bd10      	pop	{r4, pc}
 80025ea:	0022      	movs	r2, r4
 80025ec:	380b      	subs	r0, #11
 80025ee:	4082      	lsls	r2, r0
 80025f0:	0312      	lsls	r2, r2, #12
 80025f2:	2400      	movs	r4, #0
 80025f4:	0b12      	lsrs	r2, r2, #12
 80025f6:	e7f3      	b.n	80025e0 <__aeabi_ui2d+0x2c>
 80025f8:	0000041e 	.word	0x0000041e

080025fc <__clzdi2>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	2900      	cmp	r1, #0
 8002600:	d103      	bne.n	800260a <__clzdi2+0xe>
 8002602:	f7fd ff51 	bl	80004a8 <__clzsi2>
 8002606:	3020      	adds	r0, #32
 8002608:	e002      	b.n	8002610 <__clzdi2+0x14>
 800260a:	0008      	movs	r0, r1
 800260c:	f7fd ff4c 	bl	80004a8 <__clzsi2>
 8002610:	bd10      	pop	{r4, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)

08002614 <Disable_RTC_OneShotTimer>:
	Index_num++;
}

////////////////////////////////////Sleep Function/////////////////////////////////////////////
void Disable_RTC_OneShotTimer(RTC_HandleTypeDef *hrtc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    // 1) RTC 레지스터 쓰기 보호 풀기
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <Disable_RTC_OneShotTimer+0x54>)
 800261e:	22ca      	movs	r2, #202	@ 0xca
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <Disable_RTC_OneShotTimer+0x54>)
 8002624:	2253      	movs	r2, #83	@ 0x53
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

    // 2) WUTE, WUTIE 비트 클리어 (Wake-Up 타이머 완전 비활성화)
    CLEAR_BIT(RTC->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <Disable_RTC_OneShotTimer+0x54>)
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <Disable_RTC_OneShotTimer+0x54>)
 800262e:	490f      	ldr	r1, [pc, #60]	@ (800266c <Disable_RTC_OneShotTimer+0x58>)
 8002630:	400a      	ands	r2, r1
 8002632:	619a      	str	r2, [r3, #24]

    // 3) 다시 쓰기 보호 설정
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <Disable_RTC_OneShotTimer+0x54>)
 8002636:	22ff      	movs	r2, #255	@ 0xff
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4) RTC 내부 Wake-Up 플래그 완전 클리어
    __HAL_RTC_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <Disable_RTC_OneShotTimer+0x54>)
 800263c:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <Disable_RTC_OneShotTimer+0x5c>)
 800263e:	65da      	str	r2, [r3, #92]	@ 0x5c
    // 또는: WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);

    // 5) EXTI 이벤트 라인 비활성화 및 pending 비트 클리어
    __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT();   // EXTI 이벤트 끄기
 8002640:	4a0c      	ldr	r2, [pc, #48]	@ (8002674 <Disable_RTC_OneShotTimer+0x60>)
 8002642:	2384      	movs	r3, #132	@ 0x84
 8002644:	58d3      	ldr	r3, [r2, r3]
 8002646:	490b      	ldr	r1, [pc, #44]	@ (8002674 <Disable_RTC_OneShotTimer+0x60>)
 8002648:	4a0b      	ldr	r2, [pc, #44]	@ (8002678 <Disable_RTC_OneShotTimer+0x64>)
 800264a:	4013      	ands	r3, r2
 800264c:	2284      	movs	r2, #132	@ 0x84
 800264e:	508b      	str	r3, [r1, r2]
    EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT; // pending 클리어
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <Disable_RTC_OneShotTimer+0x60>)
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	0552      	lsls	r2, r2, #21
 8002656:	60da      	str	r2, [r3, #12]

    // 6) PWR 모듈 Wake-Up 플래그도 클리어 (추가 안전 장치)
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <Disable_RTC_OneShotTimer+0x68>)
 800265a:	225f      	movs	r2, #95	@ 0x5f
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	40002800 	.word	0x40002800
 800266c:	ffffbbff 	.word	0xffffbbff
 8002670:	00000202 	.word	0x00000202
 8002674:	40021800 	.word	0x40021800
 8002678:	efffffff 	.word	0xefffffff
 800267c:	40007000 	.word	0x40007000

08002680 <read_flash_to_buffer>:
}

////////////////////////////////////FLASH Function/////////////////////////////////////////////

void read_flash_to_buffer(uint32_t offset, uint8_t *buf, size_t len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
    meas_data_log_read(offset, buf, len);
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fd6a 	bl	800316c <meas_data_log_read>
}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b004      	add	sp, #16
 800269e:	bd80      	pop	{r7, pc}

080026a0 <uart3_dump_hex>:
void uart3_dump_hex(const uint8_t *buf, size_t len)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b08d      	sub	sp, #52	@ 0x34
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 80026aa:	2318      	movs	r3, #24
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	4a27      	ldr	r2, [pc, #156]	@ (800274c <uart3_dump_hex+0xac>)
 80026b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026b2:	c313      	stmia	r3!, {r0, r1, r4}
 80026b4:	6811      	ldr	r1, [r2, #0]
 80026b6:	6019      	str	r1, [r3, #0]
 80026b8:	7912      	ldrb	r2, [r2, #4]
 80026ba:	711a      	strb	r2, [r3, #4]
    for (size_t i = 0; i < len; i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c0:	e02e      	b.n	8002720 <uart3_dump_hex+0x80>
    {
        uint8_t v = buf[i];
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c6:	18d2      	adds	r2, r2, r3
 80026c8:	212b      	movs	r1, #43	@ 0x2b
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	701a      	strb	r2, [r3, #0]
        char hex[2];
        hex[0] = hex_chars[v >> 4];
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	001a      	movs	r2, r3
 80026da:	2418      	movs	r4, #24
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	5c9a      	ldrb	r2, [r3, r2]
 80026e0:	2010      	movs	r0, #16
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	701a      	strb	r2, [r3, #0]
        hex[1] = hex_chars[v & 0x0F];
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	220f      	movs	r2, #15
 80026ec:	4013      	ands	r3, r2
 80026ee:	193a      	adds	r2, r7, r4
 80026f0:	5cd2      	ldrb	r2, [r2, r3]
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	705a      	strb	r2, [r3, #1]
        // 2글자 전송
        HAL_UART_Transmit(&huart3, (uint8_t*)hex, 2, HAL_MAX_DELAY);
 80026f6:	2301      	movs	r3, #1
 80026f8:	425b      	negs	r3, r3
 80026fa:	1839      	adds	r1, r7, r0
 80026fc:	4814      	ldr	r0, [pc, #80]	@ (8002750 <uart3_dump_hex+0xb0>)
 80026fe:	2202      	movs	r2, #2
 8002700:	f008 fd10 	bl	800b124 <HAL_UART_Transmit>
        // 공백 전송
        char sp = ' ';
 8002704:	210f      	movs	r1, #15
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2220      	movs	r2, #32
 800270a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)&sp, 1, HAL_MAX_DELAY);
 800270c:	2301      	movs	r3, #1
 800270e:	425b      	negs	r3, r3
 8002710:	1879      	adds	r1, r7, r1
 8002712:	480f      	ldr	r0, [pc, #60]	@ (8002750 <uart3_dump_hex+0xb0>)
 8002714:	2201      	movs	r2, #1
 8002716:	f008 fd05 	bl	800b124 <HAL_UART_Transmit>
    for (size_t i = 0; i < len; i++)
 800271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271c:	3301      	adds	r3, #1
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3cc      	bcc.n	80026c2 <uart3_dump_hex+0x22>
    }
    // 줄바꿈
    const char crlf[] = "\r\n";
 8002728:	2014      	movs	r0, #20
 800272a:	183b      	adds	r3, r7, r0
 800272c:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <uart3_dump_hex+0xb4>)
 800272e:	8811      	ldrh	r1, [r2, #0]
 8002730:	8019      	strh	r1, [r3, #0]
 8002732:	7892      	ldrb	r2, [r2, #2]
 8002734:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, (uint8_t*)crlf, 2, HAL_MAX_DELAY);
 8002736:	2301      	movs	r3, #1
 8002738:	425b      	negs	r3, r3
 800273a:	1839      	adds	r1, r7, r0
 800273c:	4804      	ldr	r0, [pc, #16]	@ (8002750 <uart3_dump_hex+0xb0>)
 800273e:	2202      	movs	r2, #2
 8002740:	f008 fcf0 	bl	800b124 <HAL_UART_Transmit>
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b00d      	add	sp, #52	@ 0x34
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	08015908 	.word	0x08015908
 8002750:	20000428 	.word	0x20000428
 8002754:	0801591c 	.word	0x0801591c

08002758 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Change io to uart3.
int __io_putchar(int ch)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <__io_putchar+0x20>)
 8002762:	1d39      	adds	r1, r7, #4
 8002764:	4805      	ldr	r0, [pc, #20]	@ (800277c <__io_putchar+0x24>)
 8002766:	2201      	movs	r2, #1
 8002768:	f008 fcdc 	bl	800b124 <HAL_UART_Transmit>
  return ch;
 800276c:	687b      	ldr	r3, [r7, #4]
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	0000ffff 	.word	0x0000ffff
 800277c:	20000428 	.word	0x20000428

08002780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b0a9      	sub	sp, #164	@ 0xa4
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SystemClock_Config();
 8002786:	f000 f8e9 	bl	800295c <SystemClock_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800278a:	f001 fa64 	bl	8003c56 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	2002      	movs	r0, #2
 8002794:	f002 fd1e 	bl	80051d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002798:	2002      	movs	r0, #2
 800279a:	f002 fd30 	bl	80051fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279e:	f000 f8dd 	bl	800295c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a2:	f000 fb9f 	bl	8002ee4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80027a6:	f000 f961 	bl	8002a6c <MX_ADC1_Init>
  MX_LCD_Init();
 80027aa:	f000 fa03 	bl	8002bb4 <MX_LCD_Init>
  MX_RTC_Init();
 80027ae:	f000 fa6b 	bl	8002c88 <MX_RTC_Init>
  MX_SPI3_Init();
 80027b2:	f000 fae1 	bl	8002d78 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80027b6:	f000 fb1d 	bl	8002df4 <MX_USART3_UART_Init>
  MX_COMP1_Init();
 80027ba:	f000 f9c1 	bl	8002b40 <MX_COMP1_Init>
  MX_LPTIM1_Init();
 80027be:	f000 fa2f 	bl	8002c20 <MX_LPTIM1_Init>
  MX_FileX_Init();
 80027c2:	f00b f8c9 	bl	800d958 <MX_FileX_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 80027c6:	f005 f9eb 	bl	8007ba0 <HAL_PWR_EnableBkUpAccess>
  if ( HAL_RTCEx_BKUPRead(&hrtc, RTC_MAGIC_BKP) != RTC_MAGIC_VALUE )
 80027ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002938 <main+0x1b8>)
 80027cc:	2100      	movs	r1, #0
 80027ce:	0018      	movs	r0, r3
 80027d0:	f007 fd20 	bl	800a214 <HAL_RTCEx_BKUPRead>
 80027d4:	0003      	movs	r3, r0
 80027d6:	4a59      	ldr	r2, [pc, #356]	@ (800293c <main+0x1bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <main+0x6c>
    {
      /* 매직이 없으면 진짜 “최초 부팅”이므로 RTC 초기화 실행 */
      MX_RTC_Init();
 80027dc:	f000 fa54 	bl	8002c88 <MX_RTC_Init>
//      meas_data_log_erase();
      /* 보통 MX_RTC_Init() 안에서 set-time/set-date 와 함께
         HAL_RTCEx_BKUPWrite()로 매직을 기록하지만,
         만약 없다면 여기서 직접 써도 됩니다: */
      HAL_RTCEx_BKUPWrite(&hrtc, RTC_MAGIC_BKP, RTC_MAGIC_VALUE);
 80027e0:	4a56      	ldr	r2, [pc, #344]	@ (800293c <main+0x1bc>)
 80027e2:	4b55      	ldr	r3, [pc, #340]	@ (8002938 <main+0x1b8>)
 80027e4:	2100      	movs	r1, #0
 80027e6:	0018      	movs	r0, r3
 80027e8:	f007 fcfe 	bl	800a1e8 <HAL_RTCEx_BKUPWrite>
    }

  SPI_FLASH_Init();
 80027ec:	f000 fd1f 	bl	800322e <SPI_FLASH_Init>
//  dump_log_entries();
  meas_data_log_init(); // /* 부팅 시 이전 로그 위치 복원 */
 80027f0:	f000 fc80 	bl	80030f4 <meas_data_log_init>
//  dump_flash_status();
//  dump_all_flash_data();


  HAL_GPIO_WritePin(Regulator_En_GPIO_Port, Regulator_En_Pin, GPIO_PIN_SET); // 핀 High 상태로 출력
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4851      	ldr	r0, [pc, #324]	@ (8002940 <main+0x1c0>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	0019      	movs	r1, r3
 80027fe:	f002 fe8f 	bl	8005520 <HAL_GPIO_WritePin>
//  Log_Erase();
//  HAL_Delay(50);
  HAL_ADC_Start(&hadc1);
 8002802:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <main+0x1c4>)
 8002804:	0018      	movs	r0, r3
 8002806:	f001 fd8b 	bl	8004320 <HAL_ADC_Start>
  HAL_COMP_Start(&hcomp1);
 800280a:	4b4f      	ldr	r3, [pc, #316]	@ (8002948 <main+0x1c8>)
 800280c:	0018      	movs	r0, r3
 800280e:	f002 fb8f 	bl	8004f30 <HAL_COMP_Start>
  uint32_t prevTick = HAL_GetTick();
 8002812:	f001 fa91 	bl	8003d38 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	229c      	movs	r2, #156	@ 0x9c
 800281a:	18ba      	adds	r2, r7, r2
 800281c:	6013      	str	r3, [r2, #0]
  uint32_t Tick_Save = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	2290      	movs	r2, #144	@ 0x90
 8002822:	18ba      	adds	r2, r7, r2
 8002824:	6013      	str	r3, [r2, #0]
  Disable_RTC_OneShotTimer(&hrtc);
 8002826:	4b44      	ldr	r3, [pc, #272]	@ (8002938 <main+0x1b8>)
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff fef3 	bl	8002614 <Disable_RTC_OneShotTimer>
  char *msg = "Boot OK\r\n";
 800282e:	4b47      	ldr	r3, [pc, #284]	@ (800294c <main+0x1cc>)
 8002830:	248c      	movs	r4, #140	@ 0x8c
 8002832:	193a      	adds	r2, r7, r4
 8002834:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002836:	193b      	adds	r3, r7, r4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	f7fd fc64 	bl	8000108 <strlen>
 8002840:	0003      	movs	r3, r0
 8002842:	b29a      	uxth	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	1939      	adds	r1, r7, r4
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	4840      	ldr	r0, [pc, #256]	@ (8002950 <main+0x1d0>)
 800284e:	f008 fc69 	bl	800b124 <HAL_UART_Transmit>

  uint8_t buf[8];
  read_flash_to_buffer(0, buf, sizeof(buf));
 8002852:	2484      	movs	r4, #132	@ 0x84
 8002854:	193b      	adds	r3, r7, r4
 8002856:	2208      	movs	r2, #8
 8002858:	0019      	movs	r1, r3
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff ff10 	bl	8002680 <read_flash_to_buffer>
  uart3_dump_hex(buf, sizeof(buf));
 8002860:	193b      	adds	r3, r7, r4
 8002862:	2108      	movs	r1, #8
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff ff1b 	bl	80026a0 <uart3_dump_hex>
  RAD_USBX_Device_Init();
 800286a:	f000 fc97 	bl	800319c <RAD_USBX_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	2298      	movs	r2, #152	@ 0x98
 8002872:	18ba      	adds	r2, r7, r2
 8002874:	6013      	str	r3, [r2, #0]
  uint8_t send_buff[64] = {0xFF};
 8002876:	2344      	movs	r3, #68	@ 0x44
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	3304      	adds	r3, #4
 8002880:	223c      	movs	r2, #60	@ 0x3c
 8002882:	2100      	movs	r1, #0
 8002884:	0018      	movs	r0, r3
 8002886:	f011 f8c9 	bl	8013a1c <memset>
  uint8_t rev_buff[64] = {0xFF};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	22ff      	movs	r2, #255	@ 0xff
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	3304      	adds	r3, #4
 8002892:	223c      	movs	r2, #60	@ 0x3c
 8002894:	2100      	movs	r1, #0
 8002896:	0018      	movs	r0, r3
 8002898:	f011 f8c0 	bl	8013a1c <memset>
  ULONG len;

  while (1)
  {
	  RAD_USBX_Device_Process();
 800289c:	f000 fcc0 	bl	8003220 <RAD_USBX_Device_Process>

	  if (HAL_GetTick() - prevTick >= 2000)
 80028a0:	f001 fa4a 	bl	8003d38 <HAL_GetTick>
 80028a4:	0002      	movs	r2, r0
 80028a6:	239c      	movs	r3, #156	@ 0x9c
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1ad2      	subs	r2, r2, r3
 80028ae:	23fa      	movs	r3, #250	@ 0xfa
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d3f2      	bcc.n	800289c <main+0x11c>
	  {
		  send_buff[0] = count++;
 80028b6:	2198      	movs	r1, #152	@ 0x98
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	1879      	adds	r1, r7, r1
 80028c0:	600a      	str	r2, [r1, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	2144      	movs	r1, #68	@ 0x44
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	701a      	strb	r2, [r3, #0]
		  if (USB_Send_HidReport(send_buff,64) != 0)
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2140      	movs	r1, #64	@ 0x40
 80028ce:	0018      	movs	r0, r3
 80028d0:	f00f fa38 	bl	8011d44 <USB_Send_HidReport>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d003      	beq.n	80028e0 <main+0x160>
		  {
			  printf("USB HID Send Error!\r\n");
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <main+0x1d4>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f010 ffa8 	bl	8013830 <puts>
		  }
		  USB_Get_HidReport(rev_buff,&len);
 80028e0:	003a      	movs	r2, r7
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f00f fa66 	bl	8011db8 <USB_Get_HidReport>
		  for(int i =0; i < len; i++) {
 80028ec:	2300      	movs	r3, #0
 80028ee:	2294      	movs	r2, #148	@ 0x94
 80028f0:	18ba      	adds	r2, r7, r2
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e010      	b.n	8002918 <main+0x198>
			  printf("%d ",rev_buff[i]);
 80028f6:	1d3a      	adds	r2, r7, #4
 80028f8:	2494      	movs	r4, #148	@ 0x94
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	001a      	movs	r2, r3
 8002904:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <main+0x1d8>)
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f010 ff21 	bl	8013750 <iprintf>
		  for(int i =0; i < len; i++) {
 800290e:	193b      	adds	r3, r7, r4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	193a      	adds	r2, r7, r4
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	2394      	movs	r3, #148	@ 0x94
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d3e8      	bcc.n	80028f6 <main+0x176>
		  }
		  printf("\n");
 8002924:	200a      	movs	r0, #10
 8002926:	f010 ff23 	bl	8013770 <putchar>
//	  	  	  int len = sprintf(uart_buf, "comp1_count = %lu\r\n", comp1_count);
//	  	  	  HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
//
//	  	  	 	comp1_count = 0;
//	  	  	 	Tick_Save++;
	  	  	 	prevTick = HAL_GetTick();
 800292a:	f001 fa05 	bl	8003d38 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	229c      	movs	r2, #156	@ 0x9c
 8002932:	18ba      	adds	r2, r7, r2
 8002934:	6013      	str	r3, [r2, #0]
	  RAD_USBX_Device_Process();
 8002936:	e7b1      	b.n	800289c <main+0x11c>
 8002938:	20000394 	.word	0x20000394
 800293c:	000032f2 	.word	0x000032f2
 8002940:	50000400 	.word	0x50000400
 8002944:	2000026c 	.word	0x2000026c
 8002948:	200002d0 	.word	0x200002d0
 800294c:	08015988 	.word	0x08015988
 8002950:	20000428 	.word	0x20000428
 8002954:	08015994 	.word	0x08015994
 8002958:	080159ac 	.word	0x080159ac

0800295c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b09f      	sub	sp, #124	@ 0x7c
 8002960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002962:	242c      	movs	r4, #44	@ 0x2c
 8002964:	193b      	adds	r3, r7, r4
 8002966:	0018      	movs	r0, r3
 8002968:	234c      	movs	r3, #76	@ 0x4c
 800296a:	001a      	movs	r2, r3
 800296c:	2100      	movs	r1, #0
 800296e:	f011 f855 	bl	8013a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002972:	231c      	movs	r3, #28
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	0018      	movs	r0, r3
 8002978:	2310      	movs	r3, #16
 800297a:	001a      	movs	r2, r3
 800297c:	2100      	movs	r1, #0
 800297e:	f011 f84d 	bl	8013a1c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	0018      	movs	r0, r3
 8002986:	2318      	movs	r3, #24
 8002988:	001a      	movs	r2, r3
 800298a:	2100      	movs	r1, #0
 800298c:	f011 f846 	bl	8013a1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	0018      	movs	r0, r3
 8002996:	f005 f911 	bl	8007bbc <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800299a:	f005 f901 	bl	8007ba0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800299e:	4a31      	ldr	r2, [pc, #196]	@ (8002a64 <SystemClock_Config+0x108>)
 80029a0:	2390      	movs	r3, #144	@ 0x90
 80029a2:	58d3      	ldr	r3, [r2, r3]
 80029a4:	492f      	ldr	r1, [pc, #188]	@ (8002a64 <SystemClock_Config+0x108>)
 80029a6:	2218      	movs	r2, #24
 80029a8:	4393      	bics	r3, r2
 80029aa:	2290      	movs	r2, #144	@ 0x90
 80029ac:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	2226      	movs	r2, #38	@ 0x26
 80029b2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	2281      	movs	r2, #129	@ 0x81
 80029b8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	0052      	lsls	r2, r2, #1
 80029c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	2201      	movs	r2, #1
 80029cc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	2200      	movs	r2, #0
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	0018      	movs	r0, r3
 80029d8:	f005 f96a 	bl	8007cb0 <HAL_RCC_OscConfig>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80029e0:	f000 fb82 	bl	80030e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e4:	211c      	movs	r1, #28
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2201      	movs	r2, #1
 80029f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2101      	movs	r1, #1
 8002a02:	0018      	movs	r0, r3
 8002a04:	f005 fd7e 	bl	8008504 <HAL_RCC_ClockConfig>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a0c:	f000 fb6c 	bl	80030e8 <Error_Handler>
  }

  /** Enable the CRS clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <SystemClock_Config+0x108>)
 8002a12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a14:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <SystemClock_Config+0x108>)
 8002a16:	2180      	movs	r1, #128	@ 0x80
 8002a18:	0249      	lsls	r1, r1, #9
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a1e:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <SystemClock_Config+0x108>)
 8002a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	025b      	lsls	r3, r3, #9
 8002a26:	4013      	ands	r3, r2
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	0552      	lsls	r2, r2, #21
 8002a38:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <SystemClock_Config+0x10c>)
 8002a44:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2222      	movs	r2, #34	@ 0x22
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	2220      	movs	r2, #32
 8002a50:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	0018      	movs	r0, r3
 8002a56:	f006 ff9b 	bl	8009990 <HAL_RCCEx_CRSConfig>
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b01f      	add	sp, #124	@ 0x7c
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	40021000 	.word	0x40021000
 8002a68:	000005b7 	.word	0x000005b7

08002a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	0018      	movs	r0, r3
 8002a76:	230c      	movs	r3, #12
 8002a78:	001a      	movs	r2, r3
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f010 ffce 	bl	8013a1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a80:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002a82:	4a2e      	ldr	r2, [pc, #184]	@ (8002b3c <MX_ADC1_Init+0xd0>)
 8002a84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a86:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002a88:	22c0      	movs	r2, #192	@ 0xc0
 8002a8a:	0612      	lsls	r2, r2, #24
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a94:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a9a:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aa0:	4b25      	ldr	r3, [pc, #148]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ab2:	4b21      	ldr	r3, [pc, #132]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ad4:	222c      	movs	r2, #44	@ 0x2c
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ada:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002aec:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002aee:	223c      	movs	r2, #60	@ 0x3c
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002af4:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002afa:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002afc:	0018      	movs	r0, r3
 8002afe:	f001 fa67 	bl	8003fd0 <HAL_ADC_Init>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002b06:	f000 faef 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b1c:	1d3a      	adds	r2, r7, #4
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <MX_ADC1_Init+0xcc>)
 8002b20:	0011      	movs	r1, r2
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 fdbc 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002b2c:	f000 fadc 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000026c 	.word	0x2000026c
 8002b3c:	40012400 	.word	0x40012400

08002b40 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b46:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb0 <MX_COMP1_Init+0x70>)
 8002b48:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b4c:	2280      	movs	r2, #128	@ 0x80
 8002b4e:	0052      	lsls	r2, r2, #1
 8002b50:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b66:	2280      	movs	r2, #128	@ 0x80
 8002b68:	0252      	lsls	r2, r2, #9
 8002b6a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_MEDIUMSPEED;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	02d2      	lsls	r2, r2, #11
 8002b78:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b82:	2211      	movs	r2, #17
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f002 f86f 	bl	8004c6c <HAL_COMP_Init>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d001      	beq.n	8002b96 <MX_COMP1_Init+0x56>
  {
    Error_Handler();
 8002b92:	f000 faa9 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */
	  hcomp1.Init.InputPlus    = COMP_INPUT_PLUS_IO2;    // 예: PB2가 IN+라면 IO1
 8002b96:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002b98:	2280      	movs	r2, #128	@ 0x80
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	611a      	str	r2, [r3, #16]
	  hcomp1.Init.InputMinus   = COMP_INPUT_MINUS_IO1;   // PC4을 IN–으로 사용
 8002b9e:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <MX_COMP1_Init+0x6c>)
 8002ba0:	2250      	movs	r2, #80	@ 0x50
 8002ba2:	615a      	str	r2, [r3, #20]



  /* USER CODE END COMP1_Init 2 */

}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	200002d0 	.word	0x200002d0
 8002bb0:	40010200 	.word	0x40010200

08002bb4 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bba:	4a18      	ldr	r2, [pc, #96]	@ (8002c1c <MX_LCD_Init+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8002bca:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bcc:	220c      	movs	r2, #12
 8002bce:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <MX_LCD_Init+0x64>)
 8002c02:	0018      	movs	r0, r3
 8002c04:	f002 fcde 	bl	80055c4 <HAL_LCD_Init>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_LCD_Init+0x5c>
  {
    Error_Handler();
 8002c0c:	f000 fa6c 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	20000300 	.word	0x20000300
 8002c1c:	40002400 	.word	0x40002400

08002c20 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <MX_LPTIM1_Init+0x5c>)
 8002c28:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c38:	4a11      	ldr	r2, [pc, #68]	@ (8002c80 <MX_LPTIM1_Init+0x60>)
 8002c3a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 32767;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c3e:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <MX_LPTIM1_Init+0x64>)
 8002c40:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <MX_LPTIM1_Init+0x58>)
 8002c62:	0018      	movs	r0, r3
 8002c64:	f002 fd98 	bl	8005798 <HAL_LPTIM_Init>
 8002c68:	1e03      	subs	r3, r0, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_LPTIM1_Init+0x50>
  {
    Error_Handler();
 8002c6c:	f000 fa3c 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	2000033c 	.word	0x2000033c
 8002c7c:	40007c00 	.word	0x40007c00
 8002c80:	0000ffff 	.word	0x0000ffff
 8002c84:	00007fff 	.word	0x00007fff

08002c88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	0018      	movs	r0, r3
 8002c92:	2314      	movs	r3, #20
 8002c94:	001a      	movs	r2, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	f010 fec0 	bl	8013a1c <memset>
  RTC_DateTypeDef sDate = {0};
 8002c9c:	003b      	movs	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ca2:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002ca4:	4a33      	ldr	r2, [pc, #204]	@ (8002d74 <MX_RTC_Init+0xec>)
 8002ca6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ca8:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cae:	4b30      	ldr	r3, [pc, #192]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cb0:	227f      	movs	r2, #127	@ 0x7f
 8002cb2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cb6:	22ff      	movs	r2, #255	@ 0xff
 8002cb8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cba:	4b2d      	ldr	r3, [pc, #180]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ccc:	4b28      	ldr	r3, [pc, #160]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	05d2      	lsls	r2, r2, #23
 8002cd2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002cda:	4b25      	ldr	r3, [pc, #148]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ce0:	4b23      	ldr	r3, [pc, #140]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f006 fe9a 	bl	8009a1c <HAL_RTC_Init>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8002cec:	f000 f9fc 	bl	80030e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	2200      	movs	r2, #0
 8002d00:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d0e:	1d39      	adds	r1, r7, #4
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	0018      	movs	r0, r3
 8002d16:	f006 ff27 	bl	8009b68 <HAL_RTC_SetTime>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002d1e:	f000 f9e3 	bl	80030e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002d22:	003b      	movs	r3, r7
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 8002d28:	003b      	movs	r3, r7
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x27;
 8002d2e:	003b      	movs	r3, r7
 8002d30:	2227      	movs	r2, #39	@ 0x27
 8002d32:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 8002d34:	003b      	movs	r3, r7
 8002d36:	2225      	movs	r2, #37	@ 0x25
 8002d38:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d3a:	0039      	movs	r1, r7
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	0018      	movs	r0, r3
 8002d42:	f006 ffd1 	bl	8009ce8 <HAL_RTC_SetDate>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d001      	beq.n	8002d4e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8002d4a:	f000 f9cd 	bl	80030e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 360, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 360) != HAL_OK)
 8002d4e:	23b4      	movs	r3, #180	@ 0xb4
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	22b4      	movs	r2, #180	@ 0xb4
 8002d54:	0051      	lsls	r1, r2, #1
 8002d56:	4806      	ldr	r0, [pc, #24]	@ (8002d70 <MX_RTC_Init+0xe8>)
 8002d58:	2204      	movs	r2, #4
 8002d5a:	f007 f8e5 	bl	8009f28 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d001      	beq.n	8002d66 <MX_RTC_Init+0xde>
  {
    Error_Handler();
 8002d62:	f000 f9c1 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b006      	add	sp, #24
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	20000394 	.word	0x20000394
 8002d74:	40002800 	.word	0x40002800

08002d78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <MX_SPI3_Init+0x78>)
 8002d80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002d84:	2282      	movs	r2, #130	@ 0x82
 8002d86:	0052      	lsls	r2, r2, #1
 8002d88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d90:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002d92:	22e0      	movs	r2, #224	@ 0xe0
 8002d94:	00d2      	lsls	r2, r2, #3
 8002d96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002da6:	2280      	movs	r2, #128	@ 0x80
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <MX_SPI3_Init+0x74>)
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f007 fa2f 	bl	800a23c <HAL_SPI_Init>
 8002dde:	1e03      	subs	r3, r0, #0
 8002de0:	d001      	beq.n	8002de6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002de2:	f000 f981 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200003c4 	.word	0x200003c4
 8002df0:	40003c00 	.word	0x40003c00

08002df4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002df8:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002dfa:	4a24      	ldr	r2, [pc, #144]	@ (8002e8c <MX_USART3_UART_Init+0x98>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dfe:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e00:	22e1      	movs	r2, #225	@ 0xe1
 8002e02:	0252      	lsls	r2, r2, #9
 8002e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b20      	ldr	r3, [pc, #128]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2a:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e30:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e36:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f008 f912 	bl	800b068 <HAL_HalfDuplex_Init>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e48:	f000 f94e 	bl	80030e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	0018      	movs	r0, r3
 8002e52:	f008 fe4b 	bl	800baec <HAL_UARTEx_SetTxFifoThreshold>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e5a:	f000 f945 	bl	80030e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e60:	2100      	movs	r1, #0
 8002e62:	0018      	movs	r0, r3
 8002e64:	f008 fe82 	bl	800bb6c <HAL_UARTEx_SetRxFifoThreshold>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e6c:	f000 f93c 	bl	80030e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <MX_USART3_UART_Init+0x94>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f008 fe00 	bl	800ba78 <HAL_UARTEx_DisableFifoMode>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e7c:	f000 f934 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	20000428 	.word	0x20000428
 8002e8c:	40004800 	.word	0x40004800

08002e90 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_PCD_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <MX_USB_PCD_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f003 f8e2 	bl	8006090 <HAL_PCD_Init>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ed0:	f000 f90a 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	200004bc 	.word	0x200004bc
 8002ee0:	40005c00 	.word	0x40005c00

08002ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b08b      	sub	sp, #44	@ 0x2c
 8002ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	2414      	movs	r4, #20
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	0018      	movs	r0, r3
 8002ef0:	2314      	movs	r3, #20
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f010 fd91 	bl	8013a1c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	4b5f      	ldr	r3, [pc, #380]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002efc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002efe:	4b5e      	ldr	r3, [pc, #376]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f00:	2104      	movs	r1, #4
 8002f02:	430a      	orrs	r2, r1
 8002f04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f06:	4b5c      	ldr	r3, [pc, #368]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f16:	4b58      	ldr	r3, [pc, #352]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f1e:	4b56      	ldr	r3, [pc, #344]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	4b53      	ldr	r3, [pc, #332]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f2e:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f30:	2102      	movs	r1, #2
 8002f32:	430a      	orrs	r2, r1
 8002f34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f36:	4b50      	ldr	r3, [pc, #320]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	4b4d      	ldr	r3, [pc, #308]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f46:	4b4c      	ldr	r3, [pc, #304]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f48:	2108      	movs	r1, #8
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <MX_GPIO_Init+0x194>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	2208      	movs	r2, #8
 8002f54:	4013      	ands	r3, r2
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Flash_CS_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8002f5a:	23a0      	movs	r3, #160	@ 0xa0
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2130      	movs	r1, #48	@ 0x30
 8002f62:	0018      	movs	r0, r3
 8002f64:	f002 fadc 	bl	8005520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Regulator_En_Pin|Middle_Temp_GND_Pin, GPIO_PIN_RESET);
 8002f68:	2388      	movs	r3, #136	@ 0x88
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4843      	ldr	r0, [pc, #268]	@ (800307c <MX_GPIO_Init+0x198>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	0019      	movs	r1, r3
 8002f72:	f002 fad5 	bl	8005520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Low_Temp_GND_GPIO_Port, Low_Temp_GND_Pin, GPIO_PIN_RESET);
 8002f76:	4b42      	ldr	r3, [pc, #264]	@ (8003080 <MX_GPIO_Init+0x19c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f002 facf 	bl	8005520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2284      	movs	r2, #132	@ 0x84
 8002f8c:	0392      	lsls	r2, r2, #14
 8002f8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2201      	movs	r2, #1
 8002f94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8002f96:	193a      	adds	r2, r7, r4
 8002f98:	23a0      	movs	r3, #160	@ 0xa0
 8002f9a:	05db      	lsls	r3, r3, #23
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f002 f94a 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	2201      	movs	r2, #1
 8002fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 8002fbc:	193a      	adds	r2, r7, r4
 8002fbe:	23a0      	movs	r3, #160	@ 0xa0
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f002 f937 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	2220      	movs	r2, #32
 8002fce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	193a      	adds	r2, r7, r4
 8002fe4:	23a0      	movs	r3, #160	@ 0xa0
 8002fe6:	05db      	lsls	r3, r3, #23
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f002 f924 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Regulator_En_Pin */
  GPIO_InitStruct.Pin = Regulator_En_Pin;
 8002ff0:	0021      	movs	r1, r4
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	00d2      	lsls	r2, r2, #3
 8002ff8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffa:	000c      	movs	r4, r1
 8002ffc:	193b      	adds	r3, r7, r4
 8002ffe:	2201      	movs	r2, #1
 8003000:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003002:	193b      	adds	r3, r7, r4
 8003004:	2202      	movs	r2, #2
 8003006:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	193b      	adds	r3, r7, r4
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Regulator_En_GPIO_Port, &GPIO_InitStruct);
 800300e:	193b      	adds	r3, r7, r4
 8003010:	4a1a      	ldr	r2, [pc, #104]	@ (800307c <MX_GPIO_Init+0x198>)
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f002 f90f 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Low_Temp_GND_Pin */
  GPIO_InitStruct.Pin = Low_Temp_GND_Pin;
 800301a:	193b      	adds	r3, r7, r4
 800301c:	2204      	movs	r2, #4
 800301e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003020:	193b      	adds	r3, r7, r4
 8003022:	2201      	movs	r2, #1
 8003024:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003026:	193b      	adds	r3, r7, r4
 8003028:	2201      	movs	r2, #1
 800302a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	193b      	adds	r3, r7, r4
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Low_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8003032:	193b      	adds	r3, r7, r4
 8003034:	4a12      	ldr	r2, [pc, #72]	@ (8003080 <MX_GPIO_Init+0x19c>)
 8003036:	0019      	movs	r1, r3
 8003038:	0010      	movs	r0, r2
 800303a:	f002 f8fd 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Middle_Temp_GND_Pin */
  GPIO_InitStruct.Pin = Middle_Temp_GND_Pin;
 800303e:	0021      	movs	r1, r4
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2240      	movs	r2, #64	@ 0x40
 8003044:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2201      	movs	r2, #1
 800304a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2201      	movs	r2, #1
 8003050:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Middle_Temp_GND_GPIO_Port, &GPIO_InitStruct);
 8003058:	187b      	adds	r3, r7, r1
 800305a:	4a08      	ldr	r2, [pc, #32]	@ (800307c <MX_GPIO_Init+0x198>)
 800305c:	0019      	movs	r1, r3
 800305e:	0010      	movs	r0, r2
 8003060:	f002 f8ea 	bl	8005238 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003064:	2005      	movs	r0, #5
 8003066:	f002 f8ca 	bl	80051fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800306a:	2007      	movs	r0, #7
 800306c:	f002 f8c7 	bl	80051fe <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b00b      	add	sp, #44	@ 0x2c
 8003076:	bd90      	pop	{r4, r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	50000400 	.word	0x50000400
 8003080:	50000c00 	.word	0x50000c00

08003084 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
  {
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
      if (hcomp->Instance == COMP1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <HAL_COMP_TriggerCallback+0x24>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d104      	bne.n	80030a0 <HAL_COMP_TriggerCallback+0x1c>
      {
          comp1_count++;
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_COMP_TriggerCallback+0x28>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <HAL_COMP_TriggerCallback+0x28>)
 800309e:	601a      	str	r2, [r3, #0]
      }
  }
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40010200 	.word	0x40010200
 80030ac:	20000798 	.word	0x20000798

080030b0 <EXTI0_1_IRQHandler>:
  void COMP1_2_3_IRQHandler(void)
  {
      HAL_COMP_IRQHandler(&hcomp1);
  }
void EXTI0_1_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    // User_Button_Pin 이 PA0 이면 이렇게 호출
    HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f002 fa51 	bl	800555c <HAL_GPIO_EXTI_IRQHandler>
}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	0002      	movs	r2, r0
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_0)
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d102      	bne.n	80030da <HAL_GPIO_EXTI_Falling_Callback+0x1a>
	{
		button_flag = true;
 80030d4:	4b03      	ldr	r3, [pc, #12]	@ (80030e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
	}
}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	2000079c 	.word	0x2000079c

080030e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ec:	b672      	cpsid	i
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	e7fd      	b.n	80030f0 <Error_Handler+0x8>

080030f4 <meas_data_log_init>:
/**
 * @brief 부팅 시 Flash를 페이지 단위로 스캔해
 *        첫 0xFF 바이트 위치를 log_write_offset에 저장
 */
void meas_data_log_init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
    uint8_t buf[ENTRY_SIZE];
    uint32_t offset = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]

    // 0, ENTRY_SIZE, 2*ENTRY_SIZE ... 간격으로 검사
    while (offset < LOG_MAX_SIZE)
 80030fe:	e025      	b.n	800314c <meas_data_log_init+0x58>
    {
        meas_data_log_read(offset, buf, ENTRY_SIZE);
 8003100:	1d39      	adds	r1, r7, #4
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2210      	movs	r2, #16
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f830 	bl	800316c <meas_data_log_read>
        bool all_ff = true;
 800310c:	231b      	movs	r3, #27
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < ENTRY_SIZE; i++)
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e00d      	b.n	8003136 <meas_data_log_init+0x42>
            if (buf[i] != 0xFF) { all_ff = false; break; }
 800311a:	1d3a      	adds	r2, r7, #4
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	18d3      	adds	r3, r2, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2bff      	cmp	r3, #255	@ 0xff
 8003124:	d004      	beq.n	8003130 <meas_data_log_init+0x3c>
 8003126:	231b      	movs	r3, #27
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e005      	b.n	800313c <meas_data_log_init+0x48>
        for (uint32_t i = 0; i < ENTRY_SIZE; i++)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3301      	adds	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d9ee      	bls.n	800311a <meas_data_log_init+0x26>
        if (all_ff)  {
 800313c:	231b      	movs	r3, #27
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d108      	bne.n	8003158 <meas_data_log_init+0x64>
        	break;
        }
        offset += ENTRY_SIZE;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3310      	adds	r3, #16
 800314a:	61fb      	str	r3, [r7, #28]
    while (offset < LOG_MAX_SIZE)
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	035b      	lsls	r3, r3, #13
 8003152:	429a      	cmp	r2, r3
 8003154:	d3d4      	bcc.n	8003100 <meas_data_log_init+0xc>
 8003156:	e000      	b.n	800315a <meas_data_log_init+0x66>
        	break;
 8003158:	46c0      	nop			@ (mov r8, r8)
        }
            // 스캔이 멈춘 지점이 바로 다음에 쓸 위치
            log_write_offset = offset;
 800315a:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <meas_data_log_init+0x74>)
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b008      	add	sp, #32
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200007a0 	.word	0x200007a0

0800316c <meas_data_log_read>:
        log_write_offset += chunk;
    }
}

void meas_data_log_read(uint32_t offset, uint8_t *buf, size_t len)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
    if (offset + len > LOG_MAX_SIZE) return;
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	18d2      	adds	r2, r2, r3
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	035b      	lsls	r3, r3, #13
 8003182:	429a      	cmp	r2, r3
 8003184:	d806      	bhi.n	8003194 <meas_data_log_read+0x28>
    SPI_FLASH_ReadData(LOG_BASE_ADDR + offset, buf, len);
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f85b 	bl	8003248 <SPI_FLASH_ReadData>
 8003192:	e000      	b.n	8003196 <meas_data_log_read+0x2a>
    if (offset + len > LOG_MAX_SIZE) return;
 8003194:	46c0      	nop			@ (mov r8, r8)
}
 8003196:	46bd      	mov	sp, r7
 8003198:	b004      	add	sp, #16
 800319a:	bd80      	pop	{r7, pc}

0800319c <RAD_USBX_Device_Init>:

#define DEBUG_LOG 1

extern PCD_HandleTypeDef hpcd_USB_DRD_FS;

UINT RAD_USBX_Device_Init(void){
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
	UINT status  = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]


	//Sometimes it fails to initiate device due to memory insufficient
	// add this flag to ensure initiate device successfully.
	status = MX_USBX_Device_Init();
 80031a6:	f00e fccb 	bl	8011b40 <MX_USBX_Device_Init>
 80031aa:	0003      	movs	r3, r0
 80031ac:	607b      	str	r3, [r7, #4]
	if (status != 0) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <RAD_USBX_Device_Init+0x28>
//FIXME: add debug level.
#if DEBUG_LOG ==1
		printf("Failed: MX_USBX_Device_Init status %x\n",status);
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <RAD_USBX_Device_Init+0x7c>)
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f010 fac8 	bl	8013750 <iprintf>
#endif /* DEBUG_LOG */

		return status;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	e024      	b.n	800320e <RAD_USBX_Device_Init+0x72>
	}
	MX_USB_PCD_Init();
 80031c4:	f7ff fe64 	bl	8002e90 <MX_USB_PCD_Init>

	//FIXME: config endpoint 9 in,out, check theirs size
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x40);
 80031c8:	4814      	ldr	r0, [pc, #80]	@ (800321c <RAD_USBX_Device_Init+0x80>)
 80031ca:	2340      	movs	r3, #64	@ 0x40
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	f004 fc6a 	bl	8007aa8 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x80);
 80031d4:	4811      	ldr	r0, [pc, #68]	@ (800321c <RAD_USBX_Device_Init+0x80>)
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	2200      	movs	r2, #0
 80031da:	2180      	movs	r1, #128	@ 0x80
 80031dc:	f004 fc64 	bl	8007aa8 <HAL_PCDEx_PMAConfig>

	//FIXME: config endpoint 1 in,out, check theirs size
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x01, PCD_SNG_BUF, 0xC0);
 80031e0:	480e      	ldr	r0, [pc, #56]	@ (800321c <RAD_USBX_Device_Init+0x80>)
 80031e2:	23c0      	movs	r3, #192	@ 0xc0
 80031e4:	2200      	movs	r2, #0
 80031e6:	2101      	movs	r1, #1
 80031e8:	f004 fc5e 	bl	8007aa8 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x100);
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	480a      	ldr	r0, [pc, #40]	@ (800321c <RAD_USBX_Device_Init+0x80>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	2181      	movs	r1, #129	@ 0x81
 80031f6:	f004 fc57 	bl	8007aa8 <HAL_PCDEx_PMAConfig>

	//FiXME: enpoind 2 for MSC class.
//	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x02, PCD_SNG_BUF, 0x140);
//	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x82, PCD_SNG_BUF, 0x180);

	ux_dcd_stm32_initialize((ULONG)0, (ULONG)&hpcd_USB_DRD_FS);
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <RAD_USBX_Device_Init+0x80>)
 80031fc:	0019      	movs	r1, r3
 80031fe:	2000      	movs	r0, #0
 8003200:	f00e fb06 	bl	8011810 <_ux_dcd_stm32_initialize>

	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <RAD_USBX_Device_Init+0x80>)
 8003206:	0018      	movs	r0, r3
 8003208:	f003 f836 	bl	8006278 <HAL_PCD_Start>

	return status;
 800320c:	687b      	ldr	r3, [r7, #4]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	080159b0 	.word	0x080159b0
 800321c:	200004bc 	.word	0x200004bc

08003220 <RAD_USBX_Device_Process>:

void RAD_USBX_Device_Process(void){
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0

	//Fixme: Should to move on rtos mode.
	 ux_device_stack_tasks_run();
 8003224:	f00c f98c 	bl	800f540 <_ux_device_stack_tasks_run>

}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <SPI_FLASH_Init>:
extern SPI_HandleTypeDef hspi3;
#define FLASH_CS_LOW()   HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET)
 #define FLASH_CS_HIGH()  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_SET)

 void SPI_FLASH_Init(void)
 {
 800322e:	b580      	push	{r7, lr}
 8003230:	af00      	add	r7, sp, #0
     FLASH_CS_HIGH();
 8003232:	23a0      	movs	r3, #160	@ 0xa0
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	2201      	movs	r2, #1
 8003238:	2110      	movs	r1, #16
 800323a:	0018      	movs	r0, r3
 800323c:	f002 f970 	bl	8005520 <HAL_GPIO_WritePin>
 }
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <SPI_FLASH_ReadData>:
     FLASH_CS_HIGH();
     while (SPI_FLASH_ReadStatus() & 0x01U) { }
 }

 void SPI_FLASH_ReadData(uint32_t addr, uint8_t *buf, uint32_t len)
 {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
     uint8_t cmd[4] = { 0x03,
 8003254:	2414      	movs	r4, #20
 8003256:	193b      	adds	r3, r7, r4
 8003258:	2203      	movs	r2, #3
 800325a:	701a      	strb	r2, [r3, #0]
                        (uint8_t)(addr >> 16),
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x03,
 8003262:	193b      	adds	r3, r7, r4
 8003264:	705a      	strb	r2, [r3, #1]
                        (uint8_t)(addr >>  8),
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x03,
 800326c:	193b      	adds	r3, r7, r4
 800326e:	709a      	strb	r2, [r3, #2]
                        (uint8_t)(addr >>  0) };
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	b2da      	uxtb	r2, r3
     uint8_t cmd[4] = { 0x03,
 8003274:	193b      	adds	r3, r7, r4
 8003276:	70da      	strb	r2, [r3, #3]
     FLASH_CS_LOW();
 8003278:	23a0      	movs	r3, #160	@ 0xa0
 800327a:	05db      	lsls	r3, r3, #23
 800327c:	2200      	movs	r2, #0
 800327e:	2110      	movs	r1, #16
 8003280:	0018      	movs	r0, r3
 8003282:	f002 f94d 	bl	8005520 <HAL_GPIO_WritePin>
     HAL_SPI_Transmit(&hspi3, cmd, 4, HAL_MAX_DELAY);
 8003286:	2301      	movs	r3, #1
 8003288:	425b      	negs	r3, r3
 800328a:	1939      	adds	r1, r7, r4
 800328c:	480b      	ldr	r0, [pc, #44]	@ (80032bc <SPI_FLASH_ReadData+0x74>)
 800328e:	2204      	movs	r2, #4
 8003290:	f007 f882 	bl	800a398 <HAL_SPI_Transmit>
     HAL_SPI_Receive (&hspi3, buf, len, HAL_MAX_DELAY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	b29a      	uxth	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	425b      	negs	r3, r3
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4807      	ldr	r0, [pc, #28]	@ (80032bc <SPI_FLASH_ReadData+0x74>)
 80032a0:	f007 f9da 	bl	800a658 <HAL_SPI_Receive>
     FLASH_CS_HIGH();
 80032a4:	23a0      	movs	r3, #160	@ 0xa0
 80032a6:	05db      	lsls	r3, r3, #23
 80032a8:	2201      	movs	r2, #1
 80032aa:	2110      	movs	r1, #16
 80032ac:	0018      	movs	r0, r3
 80032ae:	f002 f937 	bl	8005520 <HAL_GPIO_WritePin>



 }
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b007      	add	sp, #28
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	200003c4 	.word	0x200003c4

080032c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <HAL_MspInit+0x54>)
 80032c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032ca:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <HAL_MspInit+0x54>)
 80032cc:	2180      	movs	r1, #128	@ 0x80
 80032ce:	0549      	lsls	r1, r1, #21
 80032d0:	430a      	orrs	r2, r1
 80032d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80032d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <HAL_MspInit+0x54>)
 80032d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032d8:	2380      	movs	r3, #128	@ 0x80
 80032da:	055b      	lsls	r3, r3, #21
 80032dc:	4013      	ands	r3, r2
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <HAL_MspInit+0x54>)
 80032e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_MspInit+0x54>)
 80032e8:	2101      	movs	r1, #1
 80032ea:	430a      	orrs	r2, r1
 80032ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <HAL_MspInit+0x54>)
 80032f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f2:	2201      	movs	r2, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	2004      	movs	r0, #4
 8003300:	f001 ff68 	bl	80051d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8003304:	2004      	movs	r0, #4
 8003306:	f001 ff7a 	bl	80051fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b002      	add	sp, #8
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b09b      	sub	sp, #108	@ 0x6c
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	2354      	movs	r3, #84	@ 0x54
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	0018      	movs	r0, r3
 8003326:	2314      	movs	r3, #20
 8003328:	001a      	movs	r2, r3
 800332a:	2100      	movs	r1, #0
 800332c:	f010 fb76 	bl	8013a1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003330:	2410      	movs	r4, #16
 8003332:	193b      	adds	r3, r7, r4
 8003334:	0018      	movs	r0, r3
 8003336:	2344      	movs	r3, #68	@ 0x44
 8003338:	001a      	movs	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f010 fb6e 	bl	8013a1c <memset>
  if(hadc->Instance==ADC1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a23      	ldr	r2, [pc, #140]	@ (80033d4 <HAL_ADC_MspInit+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d140      	bne.n	80033cc <HAL_ADC_MspInit+0xb4>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800334a:	193b      	adds	r3, r7, r4
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	01d2      	lsls	r2, r2, #7
 8003350:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003352:	193b      	adds	r3, r7, r4
 8003354:	2200      	movs	r2, #0
 8003356:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003358:	193b      	adds	r3, r7, r4
 800335a:	0018      	movs	r0, r3
 800335c:	f005 fae8 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d001      	beq.n	8003368 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003364:	f7ff fec0 	bl	80030e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_ADC_MspInit+0xc0>)
 800336a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800336c:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <HAL_ADC_MspInit+0xc0>)
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	0349      	lsls	r1, r1, #13
 8003372:	430a      	orrs	r2, r1
 8003374:	661a      	str	r2, [r3, #96]	@ 0x60
 8003376:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <HAL_ADC_MspInit+0xc0>)
 8003378:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800337a:	2380      	movs	r3, #128	@ 0x80
 800337c:	035b      	lsls	r3, r3, #13
 800337e:	4013      	ands	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003384:	4b14      	ldr	r3, [pc, #80]	@ (80033d8 <HAL_ADC_MspInit+0xc0>)
 8003386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003388:	4b13      	ldr	r3, [pc, #76]	@ (80033d8 <HAL_ADC_MspInit+0xc0>)
 800338a:	2104      	movs	r1, #4
 800338c:	430a      	orrs	r2, r1
 800338e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003390:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <HAL_ADC_MspInit+0xc0>)
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN0
    PC2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800339c:	2154      	movs	r1, #84	@ 0x54
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	2205      	movs	r2, #5
 80033a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2203      	movs	r2, #3
 80033a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <HAL_ADC_MspInit+0xc4>)
 80033b4:	0019      	movs	r1, r3
 80033b6:	0010      	movs	r0, r2
 80033b8:	f001 ff3e 	bl	8005238 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2100      	movs	r1, #0
 80033c0:	200c      	movs	r0, #12
 80033c2:	f001 ff07 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 80033c6:	200c      	movs	r0, #12
 80033c8:	f001 ff19 	bl	80051fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b01b      	add	sp, #108	@ 0x6c
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	40012400 	.word	0x40012400
 80033d8:	40021000 	.word	0x40021000
 80033dc:	50000800 	.word	0x50000800

080033e0 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b08b      	sub	sp, #44	@ 0x2c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	2414      	movs	r4, #20
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	0018      	movs	r0, r3
 80033ee:	2314      	movs	r3, #20
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f010 fb12 	bl	8013a1c <memset>
  if(hcomp->Instance==COMP1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <HAL_COMP_MspInit+0xc0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d14a      	bne.n	8003498 <HAL_COMP_MspInit+0xb8>
  {
    /* USER CODE BEGIN COMP1_MspInit 0 */

    /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP_CLK_ENABLE();
 8003402:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003404:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003406:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003408:	2101      	movs	r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	661a      	str	r2, [r3, #96]	@ 0x60
 800340e:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800341a:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 800341c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800341e:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003420:	2104      	movs	r1, #4
 8003422:	430a      	orrs	r2, r1
 8003424:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003426:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	2204      	movs	r2, #4
 800342c:	4013      	ands	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003434:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003436:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003438:	2102      	movs	r1, #2
 800343a:	430a      	orrs	r2, r1
 800343c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800343e:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_COMP_MspInit+0xc4>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800344a:	193b      	adds	r3, r7, r4
 800344c:	2210      	movs	r2, #16
 800344e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2203      	movs	r2, #3
 8003454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	193b      	adds	r3, r7, r4
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345c:	193b      	adds	r3, r7, r4
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <HAL_COMP_MspInit+0xc8>)
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f001 fee8 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003468:	0021      	movs	r1, r4
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2204      	movs	r2, #4
 800346e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2203      	movs	r2, #3
 8003474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347c:	187b      	adds	r3, r7, r1
 800347e:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <HAL_COMP_MspInit+0xcc>)
 8003480:	0019      	movs	r1, r3
 8003482:	0010      	movs	r0, r2
 8003484:	f001 fed8 	bl	8005238 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_COMP1_2_IRQn, 0, 0);
 8003488:	2200      	movs	r2, #0
 800348a:	2100      	movs	r1, #0
 800348c:	200c      	movs	r0, #12
 800348e:	f001 fea1 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_COMP1_2_IRQn);
 8003492:	200c      	movs	r0, #12
 8003494:	f001 feb3 	bl	80051fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END COMP1_MspInit 1 */

  }

}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b00b      	add	sp, #44	@ 0x2c
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	40010200 	.word	0x40010200
 80034a4:	40021000 	.word	0x40021000
 80034a8:	50000800 	.word	0x50000800
 80034ac:	50000400 	.word	0x50000400

080034b0 <HAL_LCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlcd: LCD handle pointer
  * @retval None
  */
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b09d      	sub	sp, #116	@ 0x74
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	235c      	movs	r3, #92	@ 0x5c
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	0018      	movs	r0, r3
 80034be:	2314      	movs	r3, #20
 80034c0:	001a      	movs	r2, r3
 80034c2:	2100      	movs	r1, #0
 80034c4:	f010 faaa 	bl	8013a1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034c8:	2418      	movs	r4, #24
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	0018      	movs	r0, r3
 80034ce:	2344      	movs	r3, #68	@ 0x44
 80034d0:	001a      	movs	r2, r3
 80034d2:	2100      	movs	r1, #0
 80034d4:	f010 faa2 	bl	8013a1c <memset>
  if(hlcd->Instance==LCD)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a45      	ldr	r2, [pc, #276]	@ (80035f4 <HAL_LCD_MspInit+0x144>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d000      	beq.n	80034e4 <HAL_LCD_MspInit+0x34>
 80034e2:	e083      	b.n	80035ec <HAL_LCD_MspInit+0x13c>

    /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	2280      	movs	r2, #128	@ 0x80
 80034e8:	0212      	lsls	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	2280      	movs	r2, #128	@ 0x80
 80034f0:	0052      	lsls	r2, r2, #1
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	0018      	movs	r0, r3
 80034f8:	f005 fa1a 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8003500:	f7ff fdf2 	bl	80030e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8003504:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003506:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003508:	4b3b      	ldr	r3, [pc, #236]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 800350a:	2180      	movs	r1, #128	@ 0x80
 800350c:	0089      	lsls	r1, r1, #2
 800350e:	430a      	orrs	r2, r1
 8003510:	659a      	str	r2, [r3, #88]	@ 0x58
 8003512:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003514:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4013      	ands	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003520:	4b35      	ldr	r3, [pc, #212]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003522:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003524:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003526:	2104      	movs	r1, #4
 8003528:	430a      	orrs	r2, r1
 800352a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800352c:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003530:	2204      	movs	r2, #4
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003538:	4b2f      	ldr	r3, [pc, #188]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 800353a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800353c:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003544:	4b2c      	ldr	r3, [pc, #176]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003550:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003554:	4b28      	ldr	r3, [pc, #160]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 8003556:	2102      	movs	r1, #2
 8003558:	430a      	orrs	r2, r1
 800355a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800355c:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_LCD_MspInit+0x148>)
 800355e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003560:	2202      	movs	r2, #2
 8003562:	4013      	ands	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
    PB4     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB7     ------> LCD_SEG21
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8003568:	245c      	movs	r4, #92	@ 0x5c
 800356a:	193b      	adds	r3, r7, r4
 800356c:	4a23      	ldr	r2, [pc, #140]	@ (80035fc <HAL_LCD_MspInit+0x14c>)
 800356e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	193b      	adds	r3, r7, r4
 8003572:	2202      	movs	r2, #2
 8003574:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	193b      	adds	r3, r7, r4
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	193b      	adds	r3, r7, r4
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003582:	193b      	adds	r3, r7, r4
 8003584:	220b      	movs	r2, #11
 8003586:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003588:	193b      	adds	r3, r7, r4
 800358a:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_LCD_MspInit+0x150>)
 800358c:	0019      	movs	r1, r3
 800358e:	0010      	movs	r0, r2
 8003590:	f001 fe52 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003594:	193b      	adds	r3, r7, r4
 8003596:	4a1b      	ldr	r2, [pc, #108]	@ (8003604 <HAL_LCD_MspInit+0x154>)
 8003598:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	193b      	adds	r3, r7, r4
 800359c:	2202      	movs	r2, #2
 800359e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	2200      	movs	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	220b      	movs	r2, #11
 80035b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	193a      	adds	r2, r7, r4
 80035b4:	23a0      	movs	r3, #160	@ 0xa0
 80035b6:	05db      	lsls	r3, r3, #23
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f001 fe3c 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 80035c0:	0021      	movs	r1, r4
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	4a10      	ldr	r2, [pc, #64]	@ (8003608 <HAL_LCD_MspInit+0x158>)
 80035c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2202      	movs	r2, #2
 80035cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	220b      	movs	r2, #11
 80035de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <HAL_LCD_MspInit+0x15c>)
 80035e4:	0019      	movs	r1, r3
 80035e6:	0010      	movs	r0, r2
 80035e8:	f001 fe26 	bl	8005238 <HAL_GPIO_Init>

    /* USER CODE END LCD_MspInit 1 */

  }

}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b01d      	add	sp, #116	@ 0x74
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	40002400 	.word	0x40002400
 80035f8:	40021000 	.word	0x40021000
 80035fc:	000003ea 	.word	0x000003ea
 8003600:	50000800 	.word	0x50000800
 8003604:	000087ce 	.word	0x000087ce
 8003608:	0000fabb 	.word	0x0000fabb
 800360c:	50000400 	.word	0x50000400

08003610 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b095      	sub	sp, #84	@ 0x54
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003618:	240c      	movs	r4, #12
 800361a:	193b      	adds	r3, r7, r4
 800361c:	0018      	movs	r0, r3
 800361e:	2344      	movs	r3, #68	@ 0x44
 8003620:	001a      	movs	r2, r3
 8003622:	2100      	movs	r1, #0
 8003624:	f010 f9fa 	bl	8013a1c <memset>
  if(hlptim->Instance==LPTIM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a15      	ldr	r2, [pc, #84]	@ (8003684 <HAL_LPTIM_MspInit+0x74>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d123      	bne.n	800367a <HAL_LPTIM_MspInit+0x6a>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003632:	193b      	adds	r3, r7, r4
 8003634:	2280      	movs	r2, #128	@ 0x80
 8003636:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003638:	193b      	adds	r3, r7, r4
 800363a:	22c0      	movs	r2, #192	@ 0xc0
 800363c:	0312      	lsls	r2, r2, #12
 800363e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003640:	193b      	adds	r3, r7, r4
 8003642:	0018      	movs	r0, r3
 8003644:	f005 f974 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 800364c:	f7ff fd4c 	bl	80030e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003650:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_LPTIM_MspInit+0x78>)
 8003652:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <HAL_LPTIM_MspInit+0x78>)
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	0609      	lsls	r1, r1, #24
 800365a:	430a      	orrs	r2, r1
 800365c:	659a      	str	r2, [r3, #88]	@ 0x58
 800365e:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <HAL_LPTIM_MspInit+0x78>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	0fdb      	lsrs	r3, r3, #31
 8003664:	07db      	lsls	r3, r3, #31
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2011      	movs	r0, #17
 8003670:	f001 fdb0 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003674:	2011      	movs	r0, #17
 8003676:	f001 fdc2 	bl	80051fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b015      	add	sp, #84	@ 0x54
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	40007c00 	.word	0x40007c00
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b095      	sub	sp, #84	@ 0x54
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003694:	240c      	movs	r4, #12
 8003696:	193b      	adds	r3, r7, r4
 8003698:	0018      	movs	r0, r3
 800369a:	2344      	movs	r3, #68	@ 0x44
 800369c:	001a      	movs	r2, r3
 800369e:	2100      	movs	r1, #0
 80036a0:	f010 f9bc 	bl	8013a1c <memset>
  if(hrtc->Instance==RTC)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003714 <HAL_RTC_MspInit+0x88>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d12e      	bne.n	800370c <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	2280      	movs	r2, #128	@ 0x80
 80036b2:	0212      	lsls	r2, r2, #8
 80036b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	0052      	lsls	r2, r2, #1
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036be:	193b      	adds	r3, r7, r4
 80036c0:	0018      	movs	r0, r3
 80036c2:	f005 f935 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80036ca:	f7ff fd0d 	bl	80030e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036ce:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <HAL_RTC_MspInit+0x8c>)
 80036d0:	2390      	movs	r3, #144	@ 0x90
 80036d2:	58d3      	ldr	r3, [r2, r3]
 80036d4:	4910      	ldr	r1, [pc, #64]	@ (8003718 <HAL_RTC_MspInit+0x8c>)
 80036d6:	2280      	movs	r2, #128	@ 0x80
 80036d8:	0212      	lsls	r2, r2, #8
 80036da:	4313      	orrs	r3, r2
 80036dc:	2290      	movs	r2, #144	@ 0x90
 80036de:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80036e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_RTC_MspInit+0x8c>)
 80036e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RTC_MspInit+0x8c>)
 80036e6:	2180      	movs	r1, #128	@ 0x80
 80036e8:	00c9      	lsls	r1, r1, #3
 80036ea:	430a      	orrs	r2, r1
 80036ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_RTC_MspInit+0x8c>)
 80036f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4013      	ands	r3, r2
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	2002      	movs	r0, #2
 8003702:	f001 fd67 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003706:	2002      	movs	r0, #2
 8003708:	f001 fd79 	bl	80051fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800370c:	46c0      	nop			@ (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b015      	add	sp, #84	@ 0x54
 8003712:	bd90      	pop	{r4, r7, pc}
 8003714:	40002800 	.word	0x40002800
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b08b      	sub	sp, #44	@ 0x2c
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	2414      	movs	r4, #20
 8003726:	193b      	adds	r3, r7, r4
 8003728:	0018      	movs	r0, r3
 800372a:	2314      	movs	r3, #20
 800372c:	001a      	movs	r2, r3
 800372e:	2100      	movs	r1, #0
 8003730:	f010 f974 	bl	8013a1c <memset>
  if(hspi->Instance==SPI3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <HAL_SPI_MspInit+0x8c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d130      	bne.n	80037a0 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800373e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_SPI_MspInit+0x90>)
 8003740:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_SPI_MspInit+0x90>)
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	430a      	orrs	r2, r1
 800374a:	659a      	str	r2, [r3, #88]	@ 0x58
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <HAL_SPI_MspInit+0x90>)
 800374e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375a:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <HAL_SPI_MspInit+0x90>)
 800375c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800375e:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <HAL_SPI_MspInit+0x90>)
 8003760:	2104      	movs	r1, #4
 8003762:	430a      	orrs	r2, r1
 8003764:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003766:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_SPI_MspInit+0x90>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376a:	2204      	movs	r2, #4
 800376c:	4013      	ands	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003772:	193b      	adds	r3, r7, r4
 8003774:	22e0      	movs	r2, #224	@ 0xe0
 8003776:	0152      	lsls	r2, r2, #5
 8003778:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	0021      	movs	r1, r4
 800377c:	187b      	adds	r3, r7, r1
 800377e:	2202      	movs	r2, #2
 8003780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800378e:	187b      	adds	r3, r7, r1
 8003790:	2206      	movs	r2, #6
 8003792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003794:	187b      	adds	r3, r7, r1
 8003796:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <HAL_SPI_MspInit+0x94>)
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f001 fd4c 	bl	8005238 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b00b      	add	sp, #44	@ 0x2c
 80037a6:	bd90      	pop	{r4, r7, pc}
 80037a8:	40003c00 	.word	0x40003c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	50000800 	.word	0x50000800

080037b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b09b      	sub	sp, #108	@ 0x6c
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	2354      	movs	r3, #84	@ 0x54
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	0018      	movs	r0, r3
 80037c2:	2314      	movs	r3, #20
 80037c4:	001a      	movs	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	f010 f928 	bl	8013a1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037cc:	2410      	movs	r4, #16
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	0018      	movs	r0, r3
 80037d2:	2344      	movs	r3, #68	@ 0x44
 80037d4:	001a      	movs	r2, r3
 80037d6:	2100      	movs	r1, #0
 80037d8:	f010 f920 	bl	8013a1c <memset>
  if(huart->Instance==USART3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_UART_MspInit+0xb4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d13c      	bne.n	8003860 <HAL_UART_MspInit+0xac>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037e6:	193b      	adds	r3, r7, r4
 80037e8:	2280      	movs	r2, #128	@ 0x80
 80037ea:	0252      	lsls	r2, r2, #9
 80037ec:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	0018      	movs	r0, r3
 80037f2:	f005 f89d 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d001      	beq.n	80037fe <HAL_UART_MspInit+0x4a>
    {
      Error_Handler();
 80037fa:	f7ff fc75 	bl	80030e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037fe:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_UART_MspInit+0xb8>)
 8003800:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003802:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_UART_MspInit+0xb8>)
 8003804:	2180      	movs	r1, #128	@ 0x80
 8003806:	02c9      	lsls	r1, r1, #11
 8003808:	430a      	orrs	r2, r1
 800380a:	659a      	str	r2, [r3, #88]	@ 0x58
 800380c:	4b17      	ldr	r3, [pc, #92]	@ (800386c <HAL_UART_MspInit+0xb8>)
 800380e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	02db      	lsls	r3, r3, #11
 8003814:	4013      	ands	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381a:	4b14      	ldr	r3, [pc, #80]	@ (800386c <HAL_UART_MspInit+0xb8>)
 800381c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800381e:	4b13      	ldr	r3, [pc, #76]	@ (800386c <HAL_UART_MspInit+0xb8>)
 8003820:	2102      	movs	r1, #2
 8003822:	430a      	orrs	r2, r1
 8003824:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003826:	4b11      	ldr	r3, [pc, #68]	@ (800386c <HAL_UART_MspInit+0xb8>)
 8003828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382a:	2202      	movs	r2, #2
 800382c:	4013      	ands	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003832:	2154      	movs	r1, #84	@ 0x54
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	0052      	lsls	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800383c:	187b      	adds	r3, r7, r1
 800383e:	2212      	movs	r2, #18
 8003840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	187b      	adds	r3, r7, r1
 8003844:	2200      	movs	r2, #0
 8003846:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	187b      	adds	r3, r7, r1
 800384a:	2200      	movs	r2, #0
 800384c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800384e:	187b      	adds	r3, r7, r1
 8003850:	2207      	movs	r2, #7
 8003852:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003854:	187b      	adds	r3, r7, r1
 8003856:	4a06      	ldr	r2, [pc, #24]	@ (8003870 <HAL_UART_MspInit+0xbc>)
 8003858:	0019      	movs	r1, r3
 800385a:	0010      	movs	r0, r2
 800385c:	f001 fcec 	bl	8005238 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b01b      	add	sp, #108	@ 0x6c
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	40004800 	.word	0x40004800
 800386c:	40021000 	.word	0x40021000
 8003870:	50000400 	.word	0x50000400

08003874 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b09b      	sub	sp, #108	@ 0x6c
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800387c:	2424      	movs	r4, #36	@ 0x24
 800387e:	193b      	adds	r3, r7, r4
 8003880:	0018      	movs	r0, r3
 8003882:	2344      	movs	r3, #68	@ 0x44
 8003884:	001a      	movs	r2, r3
 8003886:	2100      	movs	r1, #0
 8003888:	f010 f8c8 	bl	8013a1c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a27      	ldr	r2, [pc, #156]	@ (8003930 <HAL_PCD_MspInit+0xbc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d147      	bne.n	8003926 <HAL_PCD_MspInit+0xb2>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003896:	193b      	adds	r3, r7, r4
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	0152      	lsls	r2, r2, #5
 800389c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	22c0      	movs	r2, #192	@ 0xc0
 80038a2:	0512      	lsls	r2, r2, #20
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	0018      	movs	r0, r3
 80038aa:	f005 f841 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 80038b2:	f7ff fc19 	bl	80030e8 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80038b6:	f004 f9ed 	bl	8007c94 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_PCD_MspInit+0xc0>)
 80038bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038be:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <HAL_PCD_MspInit+0xc0>)
 80038c0:	2180      	movs	r1, #128	@ 0x80
 80038c2:	0189      	lsls	r1, r1, #6
 80038c4:	430a      	orrs	r2, r1
 80038c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80038c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <HAL_PCD_MspInit+0xc0>)
 80038ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	019b      	lsls	r3, r3, #6
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	2008      	movs	r0, #8
 80038dc:	f001 fc7a 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80038e0:	2008      	movs	r0, #8
 80038e2:	f001 fc8c 	bl	80051fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e6:	2410      	movs	r4, #16
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	0018      	movs	r0, r3
 80038ec:	2314      	movs	r3, #20
 80038ee:	001a      	movs	r2, r3
 80038f0:	2100      	movs	r1, #0
 80038f2:	f010 f893 	bl	8013a1c <memset>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038f6:	0021      	movs	r1, r4
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	22c0      	movs	r2, #192	@ 0xc0
 80038fc:	0152      	lsls	r2, r2, #5
 80038fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	187b      	adds	r3, r7, r1
 8003902:	2202      	movs	r2, #2
 8003904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390c:	187b      	adds	r3, r7, r1
 800390e:	2203      	movs	r2, #3
 8003910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003912:	187b      	adds	r3, r7, r1
 8003914:	220a      	movs	r2, #10
 8003916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	187a      	adds	r2, r7, r1
 800391a:	23a0      	movs	r3, #160	@ 0xa0
 800391c:	05db      	lsls	r3, r3, #23
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f001 fc89 	bl	8005238 <HAL_GPIO_Init>
    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b01b      	add	sp, #108	@ 0x6c
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	40005c00 	.word	0x40005c00
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    // 깨어난 이후 처리할 동작
    HAL_UART_Transmit(&huart3, (uint8_t*)"Wake Up by RTC\r\n", 17, HAL_MAX_DELAY);
 8003940:	2301      	movs	r3, #1
 8003942:	425b      	negs	r3, r3
 8003944:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8003946:	4805      	ldr	r0, [pc, #20]	@ (800395c <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8003948:	2211      	movs	r2, #17
 800394a:	f007 fbeb 	bl	800b124 <HAL_UART_Transmit>
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b002      	add	sp, #8
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	080159d8 	.word	0x080159d8
 800395c:	20000428 	.word	0x20000428

08003960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	e7fd      	b.n	8003964 <NMI_Handler+0x4>

08003968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	e7fd      	b.n	800396c <HardFault_Handler+0x4>

08003970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003988:	f000 f9c6 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003998:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <RTC_TAMP_IRQHandler+0x34>)
 800399a:	0018      	movs	r0, r3
 800399c:	f006 fb66 	bl	800a06c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  // 1) Wake-Up 타이머 EXTI 라인(20) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <RTC_TAMP_IRQHandler+0x38>)
 80039a2:	2280      	movs	r2, #128	@ 0x80
 80039a4:	0552      	lsls	r2, r2, #21
 80039a6:	60da      	str	r2, [r3, #12]
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80039a8:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <RTC_TAMP_IRQHandler+0x34>)
 80039aa:	0018      	movs	r0, r3
 80039ac:	f006 fb5e 	bl	800a06c <HAL_RTCEx_WakeUpTimerIRQHandler>

  // 2) Tamper EXTI 라인(21) pending clear
  EXTI->RPR1 = RTC_EXTI_LINE_TAMPER_EVENT;
 80039b0:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <RTC_TAMP_IRQHandler+0x38>)
 80039b2:	2280      	movs	r2, #128	@ 0x80
 80039b4:	0592      	lsls	r2, r2, #22
 80039b6:	60da      	str	r2, [r3, #12]
  HAL_RTCEx_TamperIRQHandler(&hrtc);
 80039b8:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <RTC_TAMP_IRQHandler+0x34>)
 80039ba:	0018      	movs	r0, r3
 80039bc:	f006 fb70 	bl	800a0a0 <HAL_RTCEx_TamperIRQHandler>
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	20000394 	.word	0x20000394
 80039cc:	40021800 	.word	0x40021800

080039d0 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80039e0:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <USB_DRD_FS_IRQHandler+0x14>)
 80039e2:	0018      	movs	r0, r3
 80039e4:	f002 fc92 	bl	800630c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	200004bc 	.word	0x200004bc

080039f4 <ADC_COMP1_2_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC_COMP1_2_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 0 */

  /* USER CODE END ADC_COMP1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <ADC_COMP1_2_IRQHandler+0x1c>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 fcde 	bl	80043bc <HAL_ADC_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp1);
 8003a00:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <ADC_COMP1_2_IRQHandler+0x20>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f001 fae6 	bl	8004fd4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC_COMP1_2_IRQn 1 */

  /* USER CODE END ADC_COMP1_2_IRQn 1 */
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	2000026c 	.word	0x2000026c
 8003a14:	200002d0 	.word	0x200002d0

08003a18 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f002 f80c 	bl	8005a3c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	2000033c 	.word	0x2000033c

08003a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  return 1;
 8003a34:	2301      	movs	r3, #1
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_kill>:

int _kill(int pid, int sig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a46:	f010 f843 	bl	8013ad0 <__errno>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	2216      	movs	r2, #22
 8003a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	425b      	negs	r3, r3
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_exit>:

void _exit (int status)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a64:	2301      	movs	r3, #1
 8003a66:	425a      	negs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff ffe5 	bl	8003a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	e7fd      	b.n	8003a72 <_exit+0x16>

08003a76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e00a      	b.n	8003a9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a88:	e000      	b.n	8003a8c <_read+0x16>
 8003a8a:	bf00      	nop
 8003a8c:	0001      	movs	r1, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	60ba      	str	r2, [r7, #8]
 8003a94:	b2ca      	uxtb	r2, r1
 8003a96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dbf0      	blt.n	8003a88 <_read+0x12>
  }

  return len;
 8003aa6:	687b      	ldr	r3, [r7, #4]
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b006      	add	sp, #24
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e009      	b.n	8003ad6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	60ba      	str	r2, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7fe fe44 	bl	8002758 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	dbf1      	blt.n	8003ac2 <_write+0x12>
  }
  return len;
 8003ade:	687b      	ldr	r3, [r7, #4]
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_close>:

int _close(int file)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	425b      	negs	r3, r3
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2280      	movs	r2, #128	@ 0x80
 8003b0a:	0192      	lsls	r2, r2, #6
 8003b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_isatty>:

int _isatty(int file)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b004      	add	sp, #16
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b48:	4a14      	ldr	r2, [pc, #80]	@ (8003b9c <_sbrk+0x5c>)
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <_sbrk+0x60>)
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <_sbrk+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <_sbrk+0x64>)
 8003b5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ba8 <_sbrk+0x68>)
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <_sbrk+0x64>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	18d3      	adds	r3, r2, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d207      	bcs.n	8003b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b70:	f00f ffae 	bl	8013ad0 <__errno>
 8003b74:	0003      	movs	r3, r0
 8003b76:	220c      	movs	r2, #12
 8003b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	425b      	negs	r3, r3
 8003b7e:	e009      	b.n	8003b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b80:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <_sbrk+0x64>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <_sbrk+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	18d2      	adds	r2, r2, r3
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <_sbrk+0x64>)
 8003b90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	2000a000 	.word	0x2000a000
 8003ba0:	00000400 	.word	0x00000400
 8003ba4:	200007a4 	.word	0x200007a4
 8003ba8:	20005ea0 	.word	0x20005ea0

08003bac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bb2:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <SystemInit+0x50>)
 8003bb4:	2280      	movs	r2, #128	@ 0x80
 8003bb6:	0512      	lsls	r2, r2, #20
 8003bb8:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8003bba:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <SystemInit+0x54>)
 8003bbc:	2380      	movs	r3, #128	@ 0x80
 8003bbe:	58d3      	ldr	r3, [r2, r3]
 8003bc0:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <SystemInit+0x54>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d010      	beq.n	8003bf4 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	22ff      	movs	r2, #255	@ 0xff
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2bcc      	cmp	r3, #204	@ 0xcc
 8003bda:	d00b      	beq.n	8003bf4 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	22ff      	movs	r2, #255	@ 0xff
 8003be0:	4013      	ands	r3, r2
 8003be2:	2baa      	cmp	r3, #170	@ 0xaa
 8003be4:	d006      	beq.n	8003bf4 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <SystemInit+0x54>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <SystemInit+0x54>)
 8003bec:	2180      	movs	r1, #128	@ 0x80
 8003bee:	02c9      	lsls	r1, r1, #11
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8003bf4:	46c0      	nop			@ (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	e000ed00 	.word	0xe000ed00
 8003c00:	40022000 	.word	0x40022000

08003c04 <Reset_Handler>:
 8003c04:	480d      	ldr	r0, [pc, #52]	@ (8003c3c <LoopForever+0x2>)
 8003c06:	4685      	mov	sp, r0
 8003c08:	f7ff ffd0 	bl	8003bac <SystemInit>
 8003c0c:	480c      	ldr	r0, [pc, #48]	@ (8003c40 <LoopForever+0x6>)
 8003c0e:	490d      	ldr	r1, [pc, #52]	@ (8003c44 <LoopForever+0xa>)
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <LoopForever+0xe>)
 8003c12:	2300      	movs	r3, #0
 8003c14:	e002      	b.n	8003c1c <LoopCopyDataInit>

08003c16 <CopyDataInit>:
 8003c16:	58d4      	ldr	r4, [r2, r3]
 8003c18:	50c4      	str	r4, [r0, r3]
 8003c1a:	3304      	adds	r3, #4

08003c1c <LoopCopyDataInit>:
 8003c1c:	18c4      	adds	r4, r0, r3
 8003c1e:	428c      	cmp	r4, r1
 8003c20:	d3f9      	bcc.n	8003c16 <CopyDataInit>
 8003c22:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <LoopForever+0x12>)
 8003c24:	4c0a      	ldr	r4, [pc, #40]	@ (8003c50 <LoopForever+0x16>)
 8003c26:	2300      	movs	r3, #0
 8003c28:	e001      	b.n	8003c2e <LoopFillZerobss>

08003c2a <FillZerobss>:
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	3204      	adds	r2, #4

08003c2e <LoopFillZerobss>:
 8003c2e:	42a2      	cmp	r2, r4
 8003c30:	d3fb      	bcc.n	8003c2a <FillZerobss>
 8003c32:	f00f ff53 	bl	8013adc <__libc_init_array>
 8003c36:	f7fe fda3 	bl	8002780 <main>

08003c3a <LoopForever>:
 8003c3a:	e7fe      	b.n	8003c3a <LoopForever>
 8003c3c:	2000a000 	.word	0x2000a000
 8003c40:	20000000 	.word	0x20000000
 8003c44:	20000250 	.word	0x20000250
 8003c48:	080160b4 	.word	0x080160b4
 8003c4c:	20000250 	.word	0x20000250
 8003c50:	20005e9c 	.word	0x20005e9c

08003c54 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:
 8003c54:	e7fe      	b.n	8003c54 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>

08003c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c62:	2003      	movs	r0, #3
 8003c64:	f000 f80e 	bl	8003c84 <HAL_InitTick>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003c6c:	1dfb      	adds	r3, r7, #7
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e001      	b.n	8003c78 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c74:	f7ff fb24 	bl	80032c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c78:	1dfb      	adds	r3, r7, #7
 8003c7a:	781b      	ldrb	r3, [r3, #0]
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8003c94:	4b1d      	ldr	r3, [pc, #116]	@ (8003d0c <HAL_InitTick+0x88>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02b      	beq.n	8003cf4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d10 <HAL_InitTick+0x8c>)
 8003c9e:	681c      	ldr	r4, [r3, #0]
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <HAL_InitTick+0x88>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	23fa      	movs	r3, #250	@ 0xfa
 8003ca8:	0098      	lsls	r0, r3, #2
 8003caa:	f7fc fa49 	bl	8000140 <__udivsi3>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	0020      	movs	r0, r4
 8003cb4:	f7fc fa44 	bl	8000140 <__udivsi3>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f001 faaf 	bl	800521e <HAL_SYSTICK_Config>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d112      	bne.n	8003cea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d80a      	bhi.n	8003ce0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	425b      	negs	r3, r3
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f001 fa7e 	bl	80051d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <HAL_InitTick+0x90>)
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e00d      	b.n	8003cfc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e008      	b.n	8003cfc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cea:	230f      	movs	r3, #15
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e003      	b.n	8003cfc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b005      	add	sp, #20
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <HAL_IncTick+0x18>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <HAL_IncTick+0x1c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	18d2      	adds	r2, r2, r3
 8003d26:	4b02      	ldr	r3, [pc, #8]	@ (8003d30 <HAL_IncTick+0x18>)
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200007a8 	.word	0x200007a8
 8003d34:	20000008 	.word	0x20000008

08003d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d3c:	4b02      	ldr	r3, [pc, #8]	@ (8003d48 <HAL_GetTick+0x10>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	200007a8 	.word	0x200007a8

08003d4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	fe3fffff 	.word	0xfe3fffff

08003d74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	23e0      	movs	r3, #224	@ 0xe0
 8003d82:	045b      	lsls	r3, r3, #17
 8003d84:	4013      	ands	r3, r2
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	2104      	movs	r1, #4
 8003da2:	400a      	ands	r2, r1
 8003da4:	2107      	movs	r1, #7
 8003da6:	4091      	lsls	r1, r2
 8003da8:	000a      	movs	r2, r1
 8003daa:	43d2      	mvns	r2, r2
 8003dac:	401a      	ands	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2104      	movs	r1, #4
 8003db2:	400b      	ands	r3, r1
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4099      	lsls	r1, r3
 8003db8:	000b      	movs	r3, r1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	2104      	movs	r1, #4
 8003dda:	400a      	ands	r2, r1
 8003ddc:	2107      	movs	r1, #7
 8003dde:	4091      	lsls	r1, r2
 8003de0:	000a      	movs	r2, r1
 8003de2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2104      	movs	r1, #4
 8003de8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003dea:	40da      	lsrs	r2, r3
 8003dec:	0013      	movs	r3, r2
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b002      	add	sp, #8
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	23c0      	movs	r3, #192	@ 0xc0
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	4013      	ands	r3, r2
 8003e08:	d101      	bne.n	8003e0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	211f      	movs	r1, #31
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	210f      	movs	r1, #15
 8003e30:	4091      	lsls	r1, r2
 8003e32:	000a      	movs	r2, r1
 8003e34:	43d2      	mvns	r2, r2
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	0e9b      	lsrs	r3, r3, #26
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	4019      	ands	r1, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	201f      	movs	r0, #31
 8003e44:	4003      	ands	r3, r0
 8003e46:	4099      	lsls	r1, r3
 8003e48:	000b      	movs	r3, r1
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e50:	46c0      	nop			@ (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	025b      	lsls	r3, r3, #9
 8003e6a:	0a5b      	lsrs	r3, r3, #9
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b002      	add	sp, #8
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	0252      	lsls	r2, r2, #9
 8003e8c:	0a52      	lsrs	r2, r2, #9
 8003e8e:	43d2      	mvns	r2, r2
 8003e90:	401a      	ands	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	4013      	ands	r3, r2
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b002      	add	sp, #8
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	0212      	lsls	r2, r2, #8
 8003ecc:	43d2      	mvns	r2, r2
 8003ece:	401a      	ands	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	4904      	ldr	r1, [pc, #16]	@ (8003eec <LL_ADC_SetChannelSamplingTime+0x34>)
 8003eda:	400b      	ands	r3, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	7fffff00 	.word	0x7fffff00

08003ef0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a05      	ldr	r2, [pc, #20]	@ (8003f14 <LL_ADC_EnableInternalRegulator+0x24>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	2280      	movs	r2, #128	@ 0x80
 8003f02:	0552      	lsls	r2, r2, #21
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	6fffffe8 	.word	0x6fffffe8

08003f18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	055b      	lsls	r3, r3, #21
 8003f28:	401a      	ands	r2, r3
 8003f2a:	2380      	movs	r3, #128	@ 0x80
 8003f2c:	055b      	lsls	r3, r3, #21
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d101      	bne.n	8003f36 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <LL_ADC_Enable+0x20>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2201      	movs	r2, #1
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	7fffffe8 	.word	0x7fffffe8

08003f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <LL_ADC_IsEnabled+0x18>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_ADC_IsEnabled+0x1a>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b002      	add	sp, #8
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <LL_ADC_REG_StartConversion+0x20>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	2204      	movs	r2, #4
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fa0:	46c0      	nop			@ (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	7fffffe8 	.word	0x7fffffe8

08003fac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d101      	bne.n	8003fc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b002      	add	sp, #8
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd8:	231f      	movs	r3, #31
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e17f      	b.n	80042f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0018      	movs	r0, r3
 8004002:	f7ff f989 	bl	8003318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2254      	movs	r2, #84	@ 0x54
 8004010:	2100      	movs	r1, #0
 8004012:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff ff7d 	bl	8003f18 <LL_ADC_IsInternalRegulatorEnabled>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d115      	bne.n	800404e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff ff62 	bl	8003ef0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800402c:	4bb4      	ldr	r3, [pc, #720]	@ (8004300 <HAL_ADC_Init+0x330>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	49b4      	ldr	r1, [pc, #720]	@ (8004304 <HAL_ADC_Init+0x334>)
 8004032:	0018      	movs	r0, r3
 8004034:	f7fc f884 	bl	8000140 <__udivsi3>
 8004038:	0003      	movs	r3, r0
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004040:	e002      	b.n	8004048 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3b01      	subs	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f9      	bne.n	8004042 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	0018      	movs	r0, r3
 8004054:	f7ff ff60 	bl	8003f18 <LL_ADC_IsInternalRegulatorEnabled>
 8004058:	1e03      	subs	r3, r0, #0
 800405a:	d10f      	bne.n	800407c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	2210      	movs	r2, #16
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	2201      	movs	r2, #1
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004074:	231f      	movs	r3, #31
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff ff93 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 8004086:	0003      	movs	r3, r0
 8004088:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	2210      	movs	r2, #16
 8004090:	4013      	ands	r3, r2
 8004092:	d000      	beq.n	8004096 <HAL_ADC_Init+0xc6>
 8004094:	e122      	b.n	80042dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <HAL_ADC_Init+0xce>
 800409c:	e11e      	b.n	80042dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a2:	4a99      	ldr	r2, [pc, #612]	@ (8004308 <HAL_ADC_Init+0x338>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	2202      	movs	r2, #2
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f7ff ff56 	bl	8003f64 <LL_ADC_IsEnabled>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d000      	beq.n	80040be <HAL_ADC_Init+0xee>
 80040bc:	e0ad      	b.n	800421a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7e1b      	ldrb	r3, [r3, #24]
 80040c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80040c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7e5b      	ldrb	r3, [r3, #25]
 80040ce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80040d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e9b      	ldrb	r3, [r3, #26]
 80040d6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80040d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_ADC_Init+0x118>
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	015b      	lsls	r3, r3, #5
 80040e6:	e000      	b.n	80040ea <HAL_ADC_Init+0x11a>
 80040e8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80040ea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80040f0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da04      	bge.n	8004104 <HAL_ADC_Init+0x134>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	e001      	b.n	8004108 <HAL_ADC_Init+0x138>
 8004104:	2380      	movs	r3, #128	@ 0x80
 8004106:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004108:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	212c      	movs	r1, #44	@ 0x2c
 800410e:	5c5b      	ldrb	r3, [r3, r1]
 8004110:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004112:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	5c9b      	ldrb	r3, [r3, r2]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d115      	bne.n	8004150 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7e9b      	ldrb	r3, [r3, #26]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2280      	movs	r2, #128	@ 0x80
 8004130:	0252      	lsls	r2, r2, #9
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e00b      	b.n	8004150 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	2220      	movs	r2, #32
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004148:	2201      	movs	r2, #1
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800415c:	23e0      	movs	r3, #224	@ 0xe0
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004166:	4313      	orrs	r3, r2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a65      	ldr	r2, [pc, #404]	@ (800430c <HAL_ADC_Init+0x33c>)
 8004176:	4013      	ands	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	430a      	orrs	r2, r1
 8004182:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0f9b      	lsrs	r3, r3, #30
 800418a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004190:	4313      	orrs	r3, r2
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	223c      	movs	r2, #60	@ 0x3c
 800419c:	5c9b      	ldrb	r3, [r3, r2]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d111      	bne.n	80041c6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	0f9b      	lsrs	r3, r3, #30
 80041a8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041ae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80041b4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80041ba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	2201      	movs	r2, #1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4a50      	ldr	r2, [pc, #320]	@ (8004310 <HAL_ADC_Init+0x340>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	430a      	orrs	r2, r1
 80041da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	23c0      	movs	r3, #192	@ 0xc0
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d018      	beq.n	800421a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	05db      	lsls	r3, r3, #23
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d012      	beq.n	800421a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d00c      	beq.n	800421a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004200:	4b44      	ldr	r3, [pc, #272]	@ (8004314 <HAL_ADC_Init+0x344>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a44      	ldr	r2, [pc, #272]	@ (8004318 <HAL_ADC_Init+0x348>)
 8004206:	4013      	ands	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	23f0      	movs	r3, #240	@ 0xf0
 8004210:	039b      	lsls	r3, r3, #14
 8004212:	401a      	ands	r2, r3
 8004214:	4b3f      	ldr	r3, [pc, #252]	@ (8004314 <HAL_ADC_Init+0x344>)
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004222:	001a      	movs	r2, r3
 8004224:	2100      	movs	r1, #0
 8004226:	f7ff fdb2 	bl	8003d8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	493a      	ldr	r1, [pc, #232]	@ (800431c <HAL_ADC_Init+0x34c>)
 8004234:	001a      	movs	r2, r3
 8004236:	f7ff fdaa 	bl	8003d8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2110      	movs	r1, #16
 800424e:	4249      	negs	r1, r1
 8004250:	430a      	orrs	r2, r1
 8004252:	629a      	str	r2, [r3, #40]	@ 0x28
 8004254:	e018      	b.n	8004288 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	039b      	lsls	r3, r3, #14
 800425e:	429a      	cmp	r2, r3
 8004260:	d112      	bne.n	8004288 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	3b01      	subs	r3, #1
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	221c      	movs	r2, #28
 8004272:	4013      	ands	r3, r2
 8004274:	2210      	movs	r2, #16
 8004276:	4252      	negs	r2, r2
 8004278:	409a      	lsls	r2, r3
 800427a:	0011      	movs	r1, r2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2100      	movs	r1, #0
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff fd9a 	bl	8003dc8 <LL_ADC_GetSamplingTimeCommonChannels>
 8004294:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800429a:	429a      	cmp	r2, r3
 800429c:	d10b      	bne.n	80042b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	2203      	movs	r2, #3
 80042aa:	4393      	bics	r3, r2
 80042ac:	2201      	movs	r2, #1
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042b4:	e01c      	b.n	80042f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	2212      	movs	r2, #18
 80042bc:	4393      	bics	r3, r2
 80042be:	2210      	movs	r2, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ca:	2201      	movs	r2, #1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80042d2:	231f      	movs	r3, #31
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042da:	e009      	b.n	80042f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e0:	2210      	movs	r2, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80042e8:	231f      	movs	r3, #31
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80042f0:	231f      	movs	r3, #31
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	781b      	ldrb	r3, [r3, #0]
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b008      	add	sp, #32
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	20000000 	.word	0x20000000
 8004304:	00030d40 	.word	0x00030d40
 8004308:	fffffefd 	.word	0xfffffefd
 800430c:	ffde0201 	.word	0xffde0201
 8004310:	1ffffc02 	.word	0x1ffffc02
 8004314:	40012708 	.word	0x40012708
 8004318:	ffc3ffff 	.word	0xffc3ffff
 800431c:	7fffff04 	.word	0x7fffff04

08004320 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004320:	b5b0      	push	{r4, r5, r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff fe3d 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d135      	bne.n	80043a2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2254      	movs	r2, #84	@ 0x54
 800433a:	5c9b      	ldrb	r3, [r3, r2]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_ADC_Start+0x24>
 8004340:	2302      	movs	r3, #2
 8004342:	e035      	b.n	80043b0 <HAL_ADC_Start+0x90>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2254      	movs	r2, #84	@ 0x54
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800434c:	250f      	movs	r5, #15
 800434e:	197c      	adds	r4, r7, r5
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0018      	movs	r0, r3
 8004354:	f000 fb10 	bl	8004978 <ADC_Enable>
 8004358:	0003      	movs	r3, r0
 800435a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800435c:	197b      	adds	r3, r7, r5
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d119      	bne.n	8004398 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004368:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <HAL_ADC_Start+0x98>)
 800436a:	4013      	ands	r3, r2
 800436c:	2280      	movs	r2, #128	@ 0x80
 800436e:	0052      	lsls	r2, r2, #1
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	221c      	movs	r2, #28
 8004382:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2254      	movs	r2, #84	@ 0x54
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0018      	movs	r0, r3
 8004392:	f7ff fdf9 	bl	8003f88 <LL_ADC_REG_StartConversion>
 8004396:	e008      	b.n	80043aa <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2254      	movs	r2, #84	@ 0x54
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]
 80043a0:	e003      	b.n	80043aa <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043a2:	230f      	movs	r3, #15
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2202      	movs	r2, #2
 80043a8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80043aa:	230f      	movs	r3, #15
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b004      	add	sp, #16
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}
 80043b8:	fffff0fe 	.word	0xfffff0fe

080043bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2202      	movs	r2, #2
 80043dc:	4013      	ands	r3, r2
 80043de:	d017      	beq.n	8004410 <HAL_ADC_IRQHandler+0x54>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2202      	movs	r2, #2
 80043e4:	4013      	ands	r3, r2
 80043e6:	d013      	beq.n	8004410 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	2210      	movs	r2, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	d106      	bne.n	8004400 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	2280      	movs	r2, #128	@ 0x80
 80043f8:	0112      	lsls	r2, r2, #4
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0018      	movs	r0, r3
 8004404:	f000 fb4e 	bl	8004aa4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2202      	movs	r2, #2
 800440e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2204      	movs	r2, #4
 8004414:	4013      	ands	r3, r2
 8004416:	d003      	beq.n	8004420 <HAL_ADC_IRQHandler+0x64>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2204      	movs	r2, #4
 800441c:	4013      	ands	r3, r2
 800441e:	d107      	bne.n	8004430 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2208      	movs	r2, #8
 8004424:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004426:	d04d      	beq.n	80044c4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2208      	movs	r2, #8
 800442c:	4013      	ands	r3, r2
 800442e:	d049      	beq.n	80044c4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004434:	2210      	movs	r2, #16
 8004436:	4013      	ands	r3, r2
 8004438:	d106      	bne.n	8004448 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	2280      	movs	r2, #128	@ 0x80
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fcd2 	bl	8003df6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004452:	1e03      	subs	r3, r0, #0
 8004454:	d02e      	beq.n	80044b4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7e9b      	ldrb	r3, [r3, #26]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12a      	bne.n	80044b4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2208      	movs	r2, #8
 8004466:	4013      	ands	r3, r2
 8004468:	2b08      	cmp	r3, #8
 800446a:	d123      	bne.n	80044b4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0018      	movs	r0, r3
 8004472:	f7ff fd9b 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 8004476:	1e03      	subs	r3, r0, #0
 8004478:	d110      	bne.n	800449c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	210c      	movs	r1, #12
 8004486:	438a      	bics	r2, r1
 8004488:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	4a6f      	ldr	r2, [pc, #444]	@ (800464c <HAL_ADC_IRQHandler+0x290>)
 8004490:	4013      	ands	r3, r2
 8004492:	2201      	movs	r2, #1
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	659a      	str	r2, [r3, #88]	@ 0x58
 800449a:	e00b      	b.n	80044b4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	2220      	movs	r2, #32
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ac:	2201      	movs	r2, #1
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f8ca 	bl	8004650 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	220c      	movs	r2, #12
 80044c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2280      	movs	r2, #128	@ 0x80
 80044c8:	4013      	ands	r3, r2
 80044ca:	d012      	beq.n	80044f2 <HAL_ADC_IRQHandler+0x136>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2280      	movs	r2, #128	@ 0x80
 80044d0:	4013      	ands	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d8:	2280      	movs	r2, #128	@ 0x80
 80044da:	0252      	lsls	r2, r2, #9
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f8bb 	bl	8004660 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2280      	movs	r2, #128	@ 0x80
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d014      	beq.n	8004526 <HAL_ADC_IRQHandler+0x16a>
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	2380      	movs	r3, #128	@ 0x80
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4013      	ands	r3, r2
 8004504:	d00f      	beq.n	8004526 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450a:	2280      	movs	r2, #128	@ 0x80
 800450c:	0292      	lsls	r2, r2, #10
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fab4 	bl	8004a84 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	0052      	lsls	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	2380      	movs	r3, #128	@ 0x80
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4013      	ands	r3, r2
 800452e:	d014      	beq.n	800455a <HAL_ADC_IRQHandler+0x19e>
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	2380      	movs	r3, #128	@ 0x80
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d00f      	beq.n	800455a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453e:	2280      	movs	r2, #128	@ 0x80
 8004540:	02d2      	lsls	r2, r2, #11
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 faa2 	bl	8004a94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2280      	movs	r2, #128	@ 0x80
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2210      	movs	r2, #16
 800455e:	4013      	ands	r3, r2
 8004560:	d02b      	beq.n	80045ba <HAL_ADC_IRQHandler+0x1fe>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2210      	movs	r2, #16
 8004566:	4013      	ands	r3, r2
 8004568:	d027      	beq.n	80045ba <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8004572:	2301      	movs	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e008      	b.n	800458a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	0018      	movs	r0, r3
 800457e:	f7ff fc8e 	bl	8003e9e <LL_ADC_REG_GetDMATransfer>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d001      	beq.n	800458a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004586:	2301      	movs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d110      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	2280      	movs	r2, #128	@ 0x80
 8004596:	00d2      	lsls	r2, r2, #3
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a2:	2202      	movs	r2, #2
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f85f 	bl	8004670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2210      	movs	r2, #16
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2201      	movs	r2, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d01a      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x23c>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	d016      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x23c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	2210      	movs	r2, #16
 80045d0:	4013      	ands	r3, r2
 80045d2:	d105      	bne.n	80045e0 <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	2201      	movs	r2, #1
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 f854 	bl	8004690 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	438a      	bics	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* ========== Check End of Calibration flag ========== */
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	2380      	movs	r3, #128	@ 0x80
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4013      	ands	r3, r2
 8004600:	d00d      	beq.n	800461e <HAL_ADC_IRQHandler+0x262>
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	2380      	movs	r3, #128	@ 0x80
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	4013      	ands	r3, r2
 800460a:	d008      	beq.n	800461e <HAL_ADC_IRQHandler+0x262>
  {
    /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->CalibrationCpltCallback(hadc);
#else
    HAL_ADC_CalibrationCpltCallback(hadc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0018      	movs	r0, r3
 8004610:	f000 f836 	bl	8004680 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear end of calibration flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	2380      	movs	r3, #128	@ 0x80
 8004622:	019b      	lsls	r3, r3, #6
 8004624:	4013      	ands	r3, r2
 8004626:	d00d      	beq.n	8004644 <HAL_ADC_IRQHandler+0x288>
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	2380      	movs	r3, #128	@ 0x80
 800462c:	019b      	lsls	r3, r3, #6
 800462e:	4013      	ands	r3, r2
 8004630:	d008      	beq.n	8004644 <HAL_ADC_IRQHandler+0x288>
  {
    /* Channel configuration ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ChannelConfigReadyCallback(hadc);
#else
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f000 fa3d 	bl	8004ab4 <HAL_ADCEx_ChannelConfigReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2280      	movs	r2, #128	@ 0x80
 8004640:	0192      	lsls	r2, r2, #6
 8004642:	601a      	str	r2, [r3, #0]
  }
}
 8004644:	46c0      	nop			@ (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b006      	add	sp, #24
 800464a:	bd80      	pop	{r7, pc}
 800464c:	fffffefe 	.word	0xfffffefe

08004650 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004678:	46c0      	nop			@ (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004688:	46c0      	nop			@ (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b08b      	sub	sp, #44	@ 0x2c
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046aa:	2327      	movs	r3, #39	@ 0x27
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2254      	movs	r2, #84	@ 0x54
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x24>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e141      	b.n	8004948 <HAL_ADC_ConfigChannel+0x2a8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2254      	movs	r2, #84	@ 0x54
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fc6b 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 80046d6:	1e03      	subs	r3, r0, #0
 80046d8:	d000      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x3c>
 80046da:	e124      	b.n	8004926 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d100      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x46>
 80046e4:	e0d8      	b.n	8004898 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	2380      	movs	r3, #128	@ 0x80
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d004      	beq.n	80046fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046f6:	4a96      	ldr	r2, [pc, #600]	@ (8004950 <HAL_ADC_ConfigChannel+0x2b0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d108      	bne.n	800470e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	0019      	movs	r1, r3
 8004706:	0010      	movs	r0, r2
 8004708:	f7ff fba6 	bl	8003e58 <LL_ADC_REG_SetSequencerChAdd>
 800470c:	e060      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	211f      	movs	r1, #31
 8004718:	400b      	ands	r3, r1
 800471a:	210f      	movs	r1, #15
 800471c:	4099      	lsls	r1, r3
 800471e:	000b      	movs	r3, r1
 8004720:	43db      	mvns	r3, r3
 8004722:	4013      	ands	r3, r2
 8004724:	001c      	movs	r4, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	d105      	bne.n	800473c <HAL_ADC_ConfigChannel+0x9c>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0e9b      	lsrs	r3, r3, #26
 8004736:	221f      	movs	r2, #31
 8004738:	401a      	ands	r2, r3
 800473a:	e02e      	b.n	800479a <HAL_ADC_ConfigChannel+0xfa>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8004742:	231f      	movs	r3, #31
 8004744:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e00e      	b.n	8004770 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2201      	movs	r2, #1
 800475c:	4013      	ands	r3, r2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    s--;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3b01      	subs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ed      	bne.n	8004752 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	409a      	lsls	r2, r3
 800477c:	0013      	movs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
  return result;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 800478a:	2320      	movs	r3, #32
 800478c:	e004      	b.n	8004798 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 800478e:	69f8      	ldr	r0, [r7, #28]
 8004790:	f7fb fe8a 	bl	80004a8 <__clzsi2>
 8004794:	0003      	movs	r3, r0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	001a      	movs	r2, r3
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	211f      	movs	r1, #31
 80047a0:	400b      	ands	r3, r1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	0013      	movs	r3, r2
 80047a6:	0022      	movs	r2, r4
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d808      	bhi.n	80047d0 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	001a      	movs	r2, r3
 80047cc:	f7ff fb24 	bl	8003e18 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6819      	ldr	r1, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	001a      	movs	r2, r3
 80047de:	f7ff fb6b 	bl	8003eb8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db00      	blt.n	80047ec <HAL_ADC_ConfigChannel+0x14c>
 80047ea:	e0a6      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7ff fac0 	bl	8003d74 <LL_ADC_GetCommonPathInternalCh>
 80047f4:	0003      	movs	r3, r0
 80047f6:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a56      	ldr	r2, [pc, #344]	@ (8004958 <HAL_ADC_ConfigChannel+0x2b8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d122      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004802:	6a3a      	ldr	r2, [r7, #32]
 8004804:	2380      	movs	r3, #128	@ 0x80
 8004806:	041b      	lsls	r3, r3, #16
 8004808:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800480a:	d11d      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	2280      	movs	r2, #128	@ 0x80
 8004810:	0412      	lsls	r2, r2, #16
 8004812:	4313      	orrs	r3, r2
 8004814:	4a4f      	ldr	r2, [pc, #316]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 8004816:	0019      	movs	r1, r3
 8004818:	0010      	movs	r0, r2
 800481a:	f7ff fa97 	bl	8003d4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800481e:	4b4f      	ldr	r3, [pc, #316]	@ (800495c <HAL_ADC_ConfigChannel+0x2bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	494f      	ldr	r1, [pc, #316]	@ (8004960 <HAL_ADC_ConfigChannel+0x2c0>)
 8004824:	0018      	movs	r0, r3
 8004826:	f7fb fc8b 	bl	8000140 <__udivsi3>
 800482a:	0003      	movs	r3, r0
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	0013      	movs	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	189b      	adds	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004838:	e002      	b.n	8004840 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3b01      	subs	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f9      	bne.n	800483a <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004846:	e078      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a45      	ldr	r2, [pc, #276]	@ (8004964 <HAL_ADC_ConfigChannel+0x2c4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10e      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	2380      	movs	r3, #128	@ 0x80
 8004856:	045b      	lsls	r3, r3, #17
 8004858:	4013      	ands	r3, r2
 800485a:	d109      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	0452      	lsls	r2, r2, #17
 8004862:	4313      	orrs	r3, r2
 8004864:	4a3b      	ldr	r2, [pc, #236]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 8004866:	0019      	movs	r1, r3
 8004868:	0010      	movs	r0, r2
 800486a:	f7ff fa6f 	bl	8003d4c <LL_ADC_SetCommonPathInternalCh>
 800486e:	e064      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a3c      	ldr	r2, [pc, #240]	@ (8004968 <HAL_ADC_ConfigChannel+0x2c8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d15f      	bne.n	800493a <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	03db      	lsls	r3, r3, #15
 8004880:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004882:	d15a      	bne.n	800493a <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	03d2      	lsls	r2, r2, #15
 800488a:	4313      	orrs	r3, r2
 800488c:	4a31      	ldr	r2, [pc, #196]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f7ff fa5b 	bl	8003d4c <LL_ADC_SetCommonPathInternalCh>
 8004896:	e050      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d004      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048a8:	4a29      	ldr	r2, [pc, #164]	@ (8004950 <HAL_ADC_ConfigChannel+0x2b0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d107      	bne.n	80048be <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f7ff fade 	bl	8003e7a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	da39      	bge.n	800493a <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048c6:	4b23      	ldr	r3, [pc, #140]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7ff fa53 	bl	8003d74 <LL_ADC_GetCommonPathInternalCh>
 80048ce:	0003      	movs	r3, r0
 80048d0:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a20      	ldr	r2, [pc, #128]	@ (8004958 <HAL_ADC_ConfigChannel+0x2b8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	4a23      	ldr	r2, [pc, #140]	@ (800496c <HAL_ADC_ConfigChannel+0x2cc>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 80048e4:	0019      	movs	r1, r3
 80048e6:	0010      	movs	r0, r2
 80048e8:	f7ff fa30 	bl	8003d4c <LL_ADC_SetCommonPathInternalCh>
 80048ec:	e025      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <HAL_ADC_ConfigChannel+0x2c4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <HAL_ADC_ConfigChannel+0x2d0>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 8004900:	0019      	movs	r1, r3
 8004902:	0010      	movs	r0, r2
 8004904:	f7ff fa22 	bl	8003d4c <LL_ADC_SetCommonPathInternalCh>
 8004908:	e017      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a16      	ldr	r2, [pc, #88]	@ (8004968 <HAL_ADC_ConfigChannel+0x2c8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d112      	bne.n	800493a <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	4a17      	ldr	r2, [pc, #92]	@ (8004974 <HAL_ADC_ConfigChannel+0x2d4>)
 8004918:	4013      	ands	r3, r2
 800491a:	4a0e      	ldr	r2, [pc, #56]	@ (8004954 <HAL_ADC_ConfigChannel+0x2b4>)
 800491c:	0019      	movs	r1, r3
 800491e:	0010      	movs	r0, r2
 8004920:	f7ff fa14 	bl	8003d4c <LL_ADC_SetCommonPathInternalCh>
 8004924:	e009      	b.n	800493a <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	2220      	movs	r2, #32
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004932:	2327      	movs	r3, #39	@ 0x27
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2254      	movs	r2, #84	@ 0x54
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004942:	2327      	movs	r3, #39	@ 0x27
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	781b      	ldrb	r3, [r3, #0]
}
 8004948:	0018      	movs	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	b00b      	add	sp, #44	@ 0x2c
 800494e:	bd90      	pop	{r4, r7, pc}
 8004950:	80000004 	.word	0x80000004
 8004954:	40012708 	.word	0x40012708
 8004958:	ac000800 	.word	0xac000800
 800495c:	20000000 	.word	0x20000000
 8004960:	00030d40 	.word	0x00030d40
 8004964:	b4002000 	.word	0xb4002000
 8004968:	b0001000 	.word	0xb0001000
 800496c:	ff7fffff 	.word	0xff7fffff
 8004970:	feffffff 	.word	0xfeffffff
 8004974:	ffbfffff 	.word	0xffbfffff

08004978 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff faeb 	bl	8003f64 <LL_ADC_IsEnabled>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d000      	beq.n	8004994 <ADC_Enable+0x1c>
 8004992:	e069      	b.n	8004a68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4a36      	ldr	r2, [pc, #216]	@ (8004a74 <ADC_Enable+0xfc>)
 800499c:	4013      	ands	r3, r2
 800499e:	d00d      	beq.n	80049bc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	2210      	movs	r2, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b0:	2201      	movs	r2, #1
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e056      	b.n	8004a6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fabd 	bl	8003f40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80049c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a78 <ADC_Enable+0x100>)
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7ff f9d3 	bl	8003d74 <LL_ADC_GetCommonPathInternalCh>
 80049ce:	0002      	movs	r2, r0
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	4013      	ands	r3, r2
 80049d6:	d00f      	beq.n	80049f8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049d8:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <ADC_Enable+0x104>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4928      	ldr	r1, [pc, #160]	@ (8004a80 <ADC_Enable+0x108>)
 80049de:	0018      	movs	r0, r3
 80049e0:	f7fb fbae 	bl	8000140 <__udivsi3>
 80049e4:	0003      	movs	r3, r0
 80049e6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80049e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049ea:	e002      	b.n	80049f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f9      	bne.n	80049ec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d033      	beq.n	8004a68 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a00:	f7ff f99a 	bl	8003d38 <HAL_GetTick>
 8004a04:	0003      	movs	r3, r0
 8004a06:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a08:	e027      	b.n	8004a5a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7ff faa8 	bl	8003f64 <LL_ADC_IsEnabled>
 8004a14:	1e03      	subs	r3, r0, #0
 8004a16:	d104      	bne.n	8004a22 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7ff fa8f 	bl	8003f40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a22:	f7ff f989 	bl	8003d38 <HAL_GetTick>
 8004a26:	0002      	movs	r2, r0
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d914      	bls.n	8004a5a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d00d      	beq.n	8004a5a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a42:	2210      	movs	r2, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	2201      	movs	r2, #1
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e007      	b.n	8004a6a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d1d0      	bne.n	8004a0a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	80000017 	.word	0x80000017
 8004a78:	40012708 	.word	0x40012708
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	00030d40 	.word	0x00030d40

08004a84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a8c:	46c0      	nop			@ (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a9c:	46c0      	nop			@ (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004aac:	46c0      	nop			@ (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004abc:	46c0      	nop			@ (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <LL_EXTI_EnableIT_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004acc:	4a05      	ldr	r2, [pc, #20]	@ (8004ae4 <LL_EXTI_EnableIT_0_31+0x20>)
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	58d2      	ldr	r2, [r2, r3]
 8004ad2:	4904      	ldr	r1, [pc, #16]	@ (8004ae4 <LL_EXTI_EnableIT_0_31+0x20>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	2280      	movs	r2, #128	@ 0x80
 8004ada:	508b      	str	r3, [r1, r2]
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021800 	.word	0x40021800

08004ae8 <LL_EXTI_DisableIT_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004af0:	4a06      	ldr	r2, [pc, #24]	@ (8004b0c <LL_EXTI_DisableIT_0_31+0x24>)
 8004af2:	2380      	movs	r3, #128	@ 0x80
 8004af4:	58d3      	ldr	r3, [r2, r3]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	43d2      	mvns	r2, r2
 8004afa:	4904      	ldr	r1, [pc, #16]	@ (8004b0c <LL_EXTI_DisableIT_0_31+0x24>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	2280      	movs	r2, #128	@ 0x80
 8004b00:	508b      	str	r3, [r1, r2]
}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	40021800 	.word	0x40021800

08004b10 <LL_EXTI_EnableEvent_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004b18:	4a05      	ldr	r2, [pc, #20]	@ (8004b30 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004b1a:	2384      	movs	r3, #132	@ 0x84
 8004b1c:	58d2      	ldr	r2, [r2, r3]
 8004b1e:	4904      	ldr	r1, [pc, #16]	@ (8004b30 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	2284      	movs	r2, #132	@ 0x84
 8004b26:	508b      	str	r3, [r1, r2]

}
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b002      	add	sp, #8
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021800 	.word	0x40021800

08004b34 <LL_EXTI_DisableEvent_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004b3c:	4a06      	ldr	r2, [pc, #24]	@ (8004b58 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004b3e:	2384      	movs	r3, #132	@ 0x84
 8004b40:	58d3      	ldr	r3, [r2, r3]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	43d2      	mvns	r2, r2
 8004b46:	4904      	ldr	r1, [pc, #16]	@ (8004b58 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2284      	movs	r2, #132	@ 0x84
 8004b4c:	508b      	str	r3, [r1, r2]
}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	40021800 	.word	0x40021800

08004b5c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021800 	.word	0x40021800

08004b7c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	43d9      	mvns	r1, r3
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004b8e:	400a      	ands	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b002      	add	sp, #8
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	40021800 	.word	0x40021800

08004ba0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004ba8:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
}
 8004bb4:	46c0      	nop			@ (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021800 	.word	0x40021800

08004bc0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	43d9      	mvns	r1, r3
 8004bd0:	4b03      	ldr	r3, [pc, #12]	@ (8004be0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b002      	add	sp, #8
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	40021800 	.word	0x40021800

08004be4 <LL_EXTI_IsActiveFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFallingFlag_0_31(uint32_t ExtiLine)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d101      	bne.n	8004bfe <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021800 	.word	0x40021800

08004c0c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8004c14:	4b03      	ldr	r3, [pc, #12]	@ (8004c24 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	40021800 	.word	0x40021800

08004c28 <LL_EXTI_IsActiveRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveRisingFlag_0_31(uint32_t ExtiLine)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004c30:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <LL_EXTI_IsActiveRisingFlag_0_31+0x24>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4013      	ands	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d101      	bne.n	8004c42 <LL_EXTI_IsActiveRisingFlag_0_31+0x1a>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <LL_EXTI_IsActiveRisingFlag_0_31+0x1c>
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021800 	.word	0x40021800

08004c50 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8004c58:	4b03      	ldr	r3, [pc, #12]	@ (8004c68 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	60da      	str	r2, [r3, #12]
}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b002      	add	sp, #8
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	40021800 	.word	0x40021800

08004c6c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	211f      	movs	r1, #31
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e13d      	b.n	8004f0a <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	0fdb      	lsrs	r3, r3, #31
 8004c96:	07da      	lsls	r2, r3, #31
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	061b      	lsls	r3, r3, #24
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d104      	bne.n	8004caa <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e12f      	b.n	8004f0a <HAL_COMP_Init+0x29e>
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2229      	movs	r2, #41	@ 0x29
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2228      	movs	r2, #40	@ 0x28
 8004cba:	2100      	movs	r1, #0
 8004cbc:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7fe fb8a 	bl	80033e0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2230      	movs	r2, #48	@ 0x30
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a85      	ldr	r2, [pc, #532]	@ (8004f18 <HAL_COMP_Init+0x2ac>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */

#if defined(COMP2)
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d10d      	bne.n	8004d3a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b7e      	ldr	r3, [pc, #504]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d24:	497e      	ldr	r1, [pc, #504]	@ (8004f20 <HAL_COMP_Init+0x2b4>)
 8004d26:	400a      	ands	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d30:	2180      	movs	r1, #128	@ 0x80
 8004d32:	0109      	lsls	r1, r1, #4
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	e01f      	b.n	8004d7a <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	23c0      	movs	r3, #192	@ 0xc0
 8004d40:	015b      	lsls	r3, r3, #5
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d10d      	bne.n	8004d62 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004d46:	4b75      	ldr	r3, [pc, #468]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b74      	ldr	r3, [pc, #464]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d4c:	2180      	movs	r1, #128	@ 0x80
 8004d4e:	0109      	lsls	r1, r1, #4
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004d54:	4b71      	ldr	r3, [pc, #452]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4b70      	ldr	r3, [pc, #448]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d5a:	4971      	ldr	r1, [pc, #452]	@ (8004f20 <HAL_COMP_Init+0x2b4>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	e00b      	b.n	8004d7a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004d62:	4b6e      	ldr	r3, [pc, #440]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b6d      	ldr	r3, [pc, #436]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d68:	496d      	ldr	r1, [pc, #436]	@ (8004f20 <HAL_COMP_Init+0x2b4>)
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4b6a      	ldr	r3, [pc, #424]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d74:	496a      	ldr	r1, [pc, #424]	@ (8004f20 <HAL_COMP_Init+0x2b4>)
 8004d76:	400a      	ands	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	22a0      	movs	r2, #160	@ 0xa0
 8004d80:	01d2      	lsls	r2, r2, #7
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d017      	beq.n	8004db6 <HAL_COMP_Init+0x14a>
 8004d86:	22a0      	movs	r2, #160	@ 0xa0
 8004d88:	01d2      	lsls	r2, r2, #7
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d830      	bhi.n	8004df0 <HAL_COMP_Init+0x184>
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d01f      	beq.n	8004dd2 <HAL_COMP_Init+0x166>
 8004d92:	2280      	movs	r2, #128	@ 0x80
 8004d94:	01d2      	lsls	r2, r2, #7
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d12a      	bne.n	8004df0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004d9a:	4b60      	ldr	r3, [pc, #384]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004da0:	2180      	movs	r1, #128	@ 0x80
 8004da2:	01c9      	lsls	r1, r1, #7
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004da8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	4b5b      	ldr	r3, [pc, #364]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dae:	495d      	ldr	r1, [pc, #372]	@ (8004f24 <HAL_COMP_Init+0x2b8>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
        break;
 8004db4:	e029      	b.n	8004e0a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004db6:	4b59      	ldr	r3, [pc, #356]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b58      	ldr	r3, [pc, #352]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dbc:	4959      	ldr	r1, [pc, #356]	@ (8004f24 <HAL_COMP_Init+0x2b8>)
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004dc2:	4b56      	ldr	r3, [pc, #344]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4b55      	ldr	r3, [pc, #340]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	01c9      	lsls	r1, r1, #7
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
        break;
 8004dd0:	e01b      	b.n	8004e0a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004dd2:	4b52      	ldr	r3, [pc, #328]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b51      	ldr	r3, [pc, #324]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dd8:	2180      	movs	r1, #128	@ 0x80
 8004dda:	01c9      	lsls	r1, r1, #7
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004de0:	4b4e      	ldr	r3, [pc, #312]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4b4d      	ldr	r3, [pc, #308]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	01c9      	lsls	r1, r1, #7
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
        break;
 8004dee:	e00c      	b.n	8004e0a <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8004df0:	4b4a      	ldr	r3, [pc, #296]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b49      	ldr	r3, [pc, #292]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004df6:	494b      	ldr	r1, [pc, #300]	@ (8004f24 <HAL_COMP_Init+0x2b8>)
 8004df8:	400a      	ands	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8004dfc:	4b47      	ldr	r3, [pc, #284]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b46      	ldr	r3, [pc, #280]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004e02:	4948      	ldr	r1, [pc, #288]	@ (8004f24 <HAL_COMP_Init+0x2b8>)
 8004e04:	400a      	ands	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
        break;
 8004e08:	46c0      	nop			@ (mov r8, r8)
    }


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2230      	movs	r2, #48	@ 0x30
 8004e12:	4013      	ands	r3, r2
 8004e14:	d016      	beq.n	8004e44 <HAL_COMP_Init+0x1d8>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d113      	bne.n	8004e44 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e1c:	4b42      	ldr	r3, [pc, #264]	@ (8004f28 <HAL_COMP_Init+0x2bc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4942      	ldr	r1, [pc, #264]	@ (8004f2c <HAL_COMP_Init+0x2c0>)
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fb f98c 	bl	8000140 <__udivsi3>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	0013      	movs	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004e36:	e002      	b.n	8004e3e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f9      	bne.n	8004e38 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a34      	ldr	r2, [pc, #208]	@ (8004f1c <HAL_COMP_Init+0x2b0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d102      	bne.n	8004e54 <HAL_COMP_Init+0x1e8>
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	029b      	lsls	r3, r3, #10
 8004e52:	e001      	b.n	8004e58 <HAL_COMP_Init+0x1ec>
 8004e54:	2380      	movs	r3, #128	@ 0x80
 8004e56:	02db      	lsls	r3, r3, #11
 8004e58:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2203      	movs	r2, #3
 8004e60:	4013      	ands	r3, r2
 8004e62:	d040      	beq.n	8004ee6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	2210      	movs	r2, #16
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7ff fe73 	bl	8004b5c <LL_EXTI_EnableRisingTrig_0_31>
 8004e76:	e003      	b.n	8004e80 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7ff fe7e 	bl	8004b7c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	2220      	movs	r2, #32
 8004e86:	4013      	ands	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff fe87 	bl	8004ba0 <LL_EXTI_EnableFallingTrig_0_31>
 8004e92:	e003      	b.n	8004e9c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff fe92 	bl	8004bc0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f7ff fed6 	bl	8004c50 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff feb0 	bl	8004c0c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7ff fe29 	bl	8004b10 <LL_EXTI_EnableEvent_0_31>
 8004ebe:	e003      	b.n	8004ec8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff fe36 	bl	8004b34 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	2201      	movs	r2, #1
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff fdf5 	bl	8004ac4 <LL_EXTI_EnableIT_0_31>
 8004eda:	e00c      	b.n	8004ef6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7ff fe02 	bl	8004ae8 <LL_EXTI_DisableIT_0_31>
 8004ee4:	e007      	b.n	8004ef6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7ff fe23 	bl	8004b34 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7ff fdf9 	bl	8004ae8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2229      	movs	r2, #41	@ 0x29
 8004efa:	5c9b      	ldrb	r3, [r3, r2]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2229      	movs	r2, #41	@ 0x29
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004f0a:	231f      	movs	r3, #31
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	781b      	ldrb	r3, [r3, #0]
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b008      	add	sp, #32
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	fe00700f 	.word	0xfe00700f
 8004f1c:	40010200 	.word	0x40010200
 8004f20:	fffff7ff 	.word	0xfffff7ff
 8004f24:	ffffbfff 	.word	0xffffbfff
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	00030d40 	.word	0x00030d40

08004f30 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	210f      	movs	r1, #15
 8004f3e:	187b      	adds	r3, r7, r1
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e035      	b.n	8004fbe <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	0fdb      	lsrs	r3, r3, #31
 8004f5a:	07da      	lsls	r2, r3, #31
 8004f5c:	2380      	movs	r3, #128	@ 0x80
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d104      	bne.n	8004f6e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8004f64:	230f      	movs	r3, #15
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	2201      	movs	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e027      	b.n	8004fbe <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2229      	movs	r2, #41	@ 0x29
 8004f72:	5c9b      	ldrb	r3, [r3, r2]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d11d      	bne.n	8004fb6 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2101      	movs	r1, #1
 8004f86:	430a      	orrs	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2229      	movs	r2, #41	@ 0x29
 8004f8e:	2102      	movs	r1, #2
 8004f90:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f92:	4b0e      	ldr	r3, [pc, #56]	@ (8004fcc <HAL_COMP_Start+0x9c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	490e      	ldr	r1, [pc, #56]	@ (8004fd0 <HAL_COMP_Start+0xa0>)
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7fb f8d1 	bl	8000140 <__udivsi3>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fa6:	e002      	b.n	8004fae <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f9      	bne.n	8004fa8 <HAL_COMP_Start+0x78>
 8004fb4:	e003      	b.n	8004fbe <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fb6:	230f      	movs	r3, #15
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004fbe:	230f      	movs	r3, #15
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	781b      	ldrb	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b004      	add	sp, #16
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	00030d40 	.word	0x00030d40

08004fd4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a25      	ldr	r2, [pc, #148]	@ (8005078 <HAL_COMP_IRQHandler+0xa4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d102      	bne.n	8004fec <HAL_COMP_IRQHandler+0x18>
 8004fe6:	2380      	movs	r3, #128	@ 0x80
 8004fe8:	029b      	lsls	r3, r3, #10
 8004fea:	e001      	b.n	8004ff0 <HAL_COMP_IRQHandler+0x1c>
 8004fec:	2380      	movs	r3, #128	@ 0x80
 8004fee:	02db      	lsls	r3, r3, #11
 8004ff0:	617b      	str	r3, [r7, #20]
#if defined(COMP2)
  uint32_t comparator_window_mode;
  uint32_t comparator_window_exti_lines;

  comparator_window_mode = READ_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8004ff2:	4b21      	ldr	r3, [pc, #132]	@ (8005078 <HAL_COMP_IRQHandler+0xa4>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	@ 0x80
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
  comparator_window_mode |= READ_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8005078 <HAL_COMP_IRQHandler+0xa4>)
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	2380      	movs	r3, #128	@ 0x80
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	4013      	ands	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
  comparator_window_exti_lines = (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2);
 800500e:	23c0      	movs	r3, #192	@ 0xc0
 8005010:	02db      	lsls	r3, r3, #11
 8005012:	60fb      	str	r3, [r7, #12]
#endif /* COMP2 */


  /* Check COMP EXTI flag */
  if (LL_EXTI_IsActiveRisingFlag_0_31(exti_line) != 0UL)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	0018      	movs	r0, r3
 8005018:	f7ff fe06 	bl	8004c28 <LL_EXTI_IsActiveRisingFlag_0_31>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d010      	beq.n	8005042 <HAL_COMP_IRQHandler+0x6e>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if (comparator_window_mode != 0UL)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <HAL_COMP_IRQHandler+0x5c>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearRisingFlag_0_31(comparator_window_exti_lines);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	0018      	movs	r0, r3
 800502a:	f7ff fe11 	bl	8004c50 <LL_EXTI_ClearRisingFlag_0_31>
 800502e:	e003      	b.n	8005038 <HAL_COMP_IRQHandler+0x64>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	0018      	movs	r0, r3
 8005034:	f7ff fe0c 	bl	8004c50 <LL_EXTI_ClearRisingFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	0018      	movs	r0, r3
 800503c:	f7fe f822 	bl	8003084 <HAL_COMP_TriggerCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 8005040:	e015      	b.n	800506e <HAL_COMP_IRQHandler+0x9a>
  else if (LL_EXTI_IsActiveFallingFlag_0_31(exti_line) != 0UL)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	0018      	movs	r0, r3
 8005046:	f7ff fdcd 	bl	8004be4 <LL_EXTI_IsActiveFallingFlag_0_31>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d00f      	beq.n	800506e <HAL_COMP_IRQHandler+0x9a>
    if (comparator_window_mode != 0UL)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <HAL_COMP_IRQHandler+0x8a>
      LL_EXTI_ClearFallingFlag_0_31(comparator_window_exti_lines);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	0018      	movs	r0, r3
 8005058:	f7ff fdd8 	bl	8004c0c <LL_EXTI_ClearFallingFlag_0_31>
 800505c:	e003      	b.n	8005066 <HAL_COMP_IRQHandler+0x92>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff fdd3 	bl	8004c0c <LL_EXTI_ClearFallingFlag_0_31>
    HAL_COMP_TriggerCallback(hcomp);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f7fe f80b 	bl	8003084 <HAL_COMP_TriggerCallback>
}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	46bd      	mov	sp, r7
 8005072:	b006      	add	sp, #24
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	40010200 	.word	0x40010200

0800507c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	0002      	movs	r2, r0
 8005084:	1dfb      	adds	r3, r7, #7
 8005086:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b7f      	cmp	r3, #127	@ 0x7f
 800508e:	d809      	bhi.n	80050a4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005090:	1dfb      	adds	r3, r7, #7
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	001a      	movs	r2, r3
 8005096:	231f      	movs	r3, #31
 8005098:	401a      	ands	r2, r3
 800509a:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <__NVIC_EnableIRQ+0x30>)
 800509c:	2101      	movs	r1, #1
 800509e:	4091      	lsls	r1, r2
 80050a0:	000a      	movs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b002      	add	sp, #8
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	e000e100 	.word	0xe000e100

080050b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	0002      	movs	r2, r0
 80050b8:	6039      	str	r1, [r7, #0]
 80050ba:	1dfb      	adds	r3, r7, #7
 80050bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050c4:	d828      	bhi.n	8005118 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005184 <__NVIC_SetPriority+0xd4>)
 80050c8:	1dfb      	adds	r3, r7, #7
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b25b      	sxtb	r3, r3
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	33c0      	adds	r3, #192	@ 0xc0
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	589b      	ldr	r3, [r3, r2]
 80050d6:	1dfa      	adds	r2, r7, #7
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	0011      	movs	r1, r2
 80050dc:	2203      	movs	r2, #3
 80050de:	400a      	ands	r2, r1
 80050e0:	00d2      	lsls	r2, r2, #3
 80050e2:	21ff      	movs	r1, #255	@ 0xff
 80050e4:	4091      	lsls	r1, r2
 80050e6:	000a      	movs	r2, r1
 80050e8:	43d2      	mvns	r2, r2
 80050ea:	401a      	ands	r2, r3
 80050ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	22ff      	movs	r2, #255	@ 0xff
 80050f4:	401a      	ands	r2, r3
 80050f6:	1dfb      	adds	r3, r7, #7
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	2303      	movs	r3, #3
 80050fe:	4003      	ands	r3, r0
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005104:	481f      	ldr	r0, [pc, #124]	@ (8005184 <__NVIC_SetPriority+0xd4>)
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b25b      	sxtb	r3, r3
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	430a      	orrs	r2, r1
 8005110:	33c0      	adds	r3, #192	@ 0xc0
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005116:	e031      	b.n	800517c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005118:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <__NVIC_SetPriority+0xd8>)
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	0019      	movs	r1, r3
 8005120:	230f      	movs	r3, #15
 8005122:	400b      	ands	r3, r1
 8005124:	3b08      	subs	r3, #8
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	3306      	adds	r3, #6
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	3304      	adds	r3, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	1dfa      	adds	r2, r7, #7
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	0011      	movs	r1, r2
 8005138:	2203      	movs	r2, #3
 800513a:	400a      	ands	r2, r1
 800513c:	00d2      	lsls	r2, r2, #3
 800513e:	21ff      	movs	r1, #255	@ 0xff
 8005140:	4091      	lsls	r1, r2
 8005142:	000a      	movs	r2, r1
 8005144:	43d2      	mvns	r2, r2
 8005146:	401a      	ands	r2, r3
 8005148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	22ff      	movs	r2, #255	@ 0xff
 8005150:	401a      	ands	r2, r3
 8005152:	1dfb      	adds	r3, r7, #7
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	0018      	movs	r0, r3
 8005158:	2303      	movs	r3, #3
 800515a:	4003      	ands	r3, r0
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005160:	4809      	ldr	r0, [pc, #36]	@ (8005188 <__NVIC_SetPriority+0xd8>)
 8005162:	1dfb      	adds	r3, r7, #7
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	001c      	movs	r4, r3
 8005168:	230f      	movs	r3, #15
 800516a:	4023      	ands	r3, r4
 800516c:	3b08      	subs	r3, #8
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	430a      	orrs	r2, r1
 8005172:	3306      	adds	r3, #6
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	18c3      	adds	r3, r0, r3
 8005178:	3304      	adds	r3, #4
 800517a:	601a      	str	r2, [r3, #0]
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b003      	add	sp, #12
 8005182:	bd90      	pop	{r4, r7, pc}
 8005184:	e000e100 	.word	0xe000e100
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1e5a      	subs	r2, r3, #1
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	045b      	lsls	r3, r3, #17
 800519c:	429a      	cmp	r2, r3
 800519e:	d301      	bcc.n	80051a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051a0:	2301      	movs	r3, #1
 80051a2:	e010      	b.n	80051c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a4:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <SysTick_Config+0x44>)
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	3a01      	subs	r2, #1
 80051aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ac:	2301      	movs	r3, #1
 80051ae:	425b      	negs	r3, r3
 80051b0:	2103      	movs	r1, #3
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff ff7c 	bl	80050b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <SysTick_Config+0x44>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051be:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <SysTick_Config+0x44>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	0018      	movs	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b002      	add	sp, #8
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	e000e010 	.word	0xe000e010

080051d4 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	210f      	movs	r1, #15
 80051e0:	187b      	adds	r3, r7, r1
 80051e2:	1c02      	adds	r2, r0, #0
 80051e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	b25b      	sxtb	r3, r3
 80051ee:	0011      	movs	r1, r2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7ff ff5d 	bl	80050b0 <__NVIC_SetPriority>
}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b004      	add	sp, #16
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	0002      	movs	r2, r0
 8005206:	1dfb      	adds	r3, r7, #7
 8005208:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800520a:	1dfb      	adds	r3, r7, #7
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b25b      	sxtb	r3, r3
 8005210:	0018      	movs	r0, r3
 8005212:	f7ff ff33 	bl	800507c <__NVIC_EnableIRQ>
}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b002      	add	sp, #8
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f7ff ffaf 	bl	800518c <SysTick_Config>
 800522e:	0003      	movs	r3, r0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b002      	add	sp, #8
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005246:	e153      	b.n	80054f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2101      	movs	r1, #1
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4091      	lsls	r1, r2
 8005252:	000a      	movs	r2, r1
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d100      	bne.n	8005260 <HAL_GPIO_Init+0x28>
 800525e:	e144      	b.n	80054ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2203      	movs	r2, #3
 8005266:	4013      	ands	r3, r2
 8005268:	2b01      	cmp	r3, #1
 800526a:	d005      	beq.n	8005278 <HAL_GPIO_Init+0x40>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2203      	movs	r2, #3
 8005272:	4013      	ands	r3, r2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d130      	bne.n	80052da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	2203      	movs	r2, #3
 8005284:	409a      	lsls	r2, r3
 8005286:	0013      	movs	r3, r2
 8005288:	43da      	mvns	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4013      	ands	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	409a      	lsls	r2, r3
 800529a:	0013      	movs	r3, r2
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052ae:	2201      	movs	r2, #1
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	409a      	lsls	r2, r3
 80052b4:	0013      	movs	r3, r2
 80052b6:	43da      	mvns	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	2201      	movs	r2, #1
 80052c6:	401a      	ands	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	409a      	lsls	r2, r3
 80052cc:	0013      	movs	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2203      	movs	r2, #3
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d017      	beq.n	8005316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	2203      	movs	r2, #3
 80052f2:	409a      	lsls	r2, r3
 80052f4:	0013      	movs	r3, r2
 80052f6:	43da      	mvns	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4013      	ands	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	0013      	movs	r3, r2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2203      	movs	r2, #3
 800531c:	4013      	ands	r3, r2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d123      	bne.n	800536a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	08da      	lsrs	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3208      	adds	r2, #8
 800532a:	0092      	lsls	r2, r2, #2
 800532c:	58d3      	ldr	r3, [r2, r3]
 800532e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2207      	movs	r2, #7
 8005334:	4013      	ands	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	220f      	movs	r2, #15
 800533a:	409a      	lsls	r2, r3
 800533c:	0013      	movs	r3, r2
 800533e:	43da      	mvns	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2107      	movs	r1, #7
 800534e:	400b      	ands	r3, r1
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	409a      	lsls	r2, r3
 8005354:	0013      	movs	r3, r2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	08da      	lsrs	r2, r3, #3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3208      	adds	r2, #8
 8005364:	0092      	lsls	r2, r2, #2
 8005366:	6939      	ldr	r1, [r7, #16]
 8005368:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	2203      	movs	r2, #3
 8005376:	409a      	lsls	r2, r3
 8005378:	0013      	movs	r3, r2
 800537a:	43da      	mvns	r2, r3
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2203      	movs	r2, #3
 8005388:	401a      	ands	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	409a      	lsls	r2, r3
 8005390:	0013      	movs	r3, r2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	23c0      	movs	r3, #192	@ 0xc0
 80053a4:	029b      	lsls	r3, r3, #10
 80053a6:	4013      	ands	r3, r2
 80053a8:	d100      	bne.n	80053ac <HAL_GPIO_Init+0x174>
 80053aa:	e09e      	b.n	80054ea <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80053ac:	4a56      	ldr	r2, [pc, #344]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3318      	adds	r3, #24
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	589b      	ldr	r3, [r3, r2]
 80053b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2203      	movs	r2, #3
 80053be:	4013      	ands	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	220f      	movs	r2, #15
 80053c4:	409a      	lsls	r2, r3
 80053c6:	0013      	movs	r3, r2
 80053c8:	43da      	mvns	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	23a0      	movs	r3, #160	@ 0xa0
 80053d4:	05db      	lsls	r3, r3, #23
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d01f      	beq.n	800541a <HAL_GPIO_Init+0x1e2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a4b      	ldr	r2, [pc, #300]	@ (800550c <HAL_GPIO_Init+0x2d4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d019      	beq.n	8005416 <HAL_GPIO_Init+0x1de>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005510 <HAL_GPIO_Init+0x2d8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_GPIO_Init+0x1da>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a49      	ldr	r2, [pc, #292]	@ (8005514 <HAL_GPIO_Init+0x2dc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00d      	beq.n	800540e <HAL_GPIO_Init+0x1d6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a48      	ldr	r2, [pc, #288]	@ (8005518 <HAL_GPIO_Init+0x2e0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <HAL_GPIO_Init+0x1d2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a47      	ldr	r2, [pc, #284]	@ (800551c <HAL_GPIO_Init+0x2e4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_GPIO_Init+0x1ce>
 8005402:	2305      	movs	r3, #5
 8005404:	e00a      	b.n	800541c <HAL_GPIO_Init+0x1e4>
 8005406:	2306      	movs	r3, #6
 8005408:	e008      	b.n	800541c <HAL_GPIO_Init+0x1e4>
 800540a:	2304      	movs	r3, #4
 800540c:	e006      	b.n	800541c <HAL_GPIO_Init+0x1e4>
 800540e:	2303      	movs	r3, #3
 8005410:	e004      	b.n	800541c <HAL_GPIO_Init+0x1e4>
 8005412:	2302      	movs	r3, #2
 8005414:	e002      	b.n	800541c <HAL_GPIO_Init+0x1e4>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_GPIO_Init+0x1e4>
 800541a:	2300      	movs	r3, #0
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	2103      	movs	r1, #3
 8005420:	400a      	ands	r2, r1
 8005422:	00d2      	lsls	r2, r2, #3
 8005424:	4093      	lsls	r3, r2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800542c:	4936      	ldr	r1, [pc, #216]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	3318      	adds	r3, #24
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800543a:	4b33      	ldr	r3, [pc, #204]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	43da      	mvns	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4013      	ands	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	035b      	lsls	r3, r3, #13
 8005452:	4013      	ands	r3, r2
 8005454:	d003      	beq.n	800545e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800545e:	4b2a      	ldr	r3, [pc, #168]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005464:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	43da      	mvns	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4013      	ands	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	039b      	lsls	r3, r3, #14
 800547c:	4013      	ands	r3, r2
 800547e:	d003      	beq.n	8005488 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005488:	4b1f      	ldr	r3, [pc, #124]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800548e:	4a1e      	ldr	r2, [pc, #120]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 8005490:	2384      	movs	r3, #132	@ 0x84
 8005492:	58d3      	ldr	r3, [r2, r3]
 8005494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	43da      	mvns	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4013      	ands	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	2380      	movs	r3, #128	@ 0x80
 80054a6:	029b      	lsls	r3, r3, #10
 80054a8:	4013      	ands	r3, r2
 80054aa:	d003      	beq.n	80054b4 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80054b4:	4914      	ldr	r1, [pc, #80]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 80054b6:	2284      	movs	r2, #132	@ 0x84
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80054bc:	4a12      	ldr	r2, [pc, #72]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	58d3      	ldr	r3, [r2, r3]
 80054c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	43da      	mvns	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4013      	ands	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	2380      	movs	r3, #128	@ 0x80
 80054d4:	025b      	lsls	r3, r3, #9
 80054d6:	4013      	ands	r3, r2
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80054e2:	4909      	ldr	r1, [pc, #36]	@ (8005508 <HAL_GPIO_Init+0x2d0>)
 80054e4:	2280      	movs	r2, #128	@ 0x80
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	3301      	adds	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	40da      	lsrs	r2, r3
 80054f8:	1e13      	subs	r3, r2, #0
 80054fa:	d000      	beq.n	80054fe <HAL_GPIO_Init+0x2c6>
 80054fc:	e6a4      	b.n	8005248 <HAL_GPIO_Init+0x10>
  }
}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b006      	add	sp, #24
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021800 	.word	0x40021800
 800550c:	50000400 	.word	0x50000400
 8005510:	50000800 	.word	0x50000800
 8005514:	50000c00 	.word	0x50000c00
 8005518:	50001000 	.word	0x50001000
 800551c:	50001400 	.word	0x50001400

08005520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	0008      	movs	r0, r1
 800552a:	0011      	movs	r1, r2
 800552c:	1cbb      	adds	r3, r7, #2
 800552e:	1c02      	adds	r2, r0, #0
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	1c7b      	adds	r3, r7, #1
 8005534:	1c0a      	adds	r2, r1, #0
 8005536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005538:	1c7b      	adds	r3, r7, #1
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005540:	1cbb      	adds	r3, r7, #2
 8005542:	881a      	ldrh	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005548:	e003      	b.n	8005552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800554a:	1cbb      	adds	r3, r7, #2
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	b002      	add	sp, #8
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	0002      	movs	r2, r0
 8005564:	1dbb      	adds	r3, r7, #6
 8005566:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005568:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	1dba      	adds	r2, r7, #6
 800556e:	8812      	ldrh	r2, [r2, #0]
 8005570:	4013      	ands	r3, r2
 8005572:	d008      	beq.n	8005586 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005574:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005576:	1dba      	adds	r2, r7, #6
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800557c:	1dbb      	adds	r3, r7, #6
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f815 	bl	80055b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	1dba      	adds	r2, r7, #6
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	4013      	ands	r3, r2
 8005590:	d008      	beq.n	80055a4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005594:	1dba      	adds	r2, r7, #6
 8005596:	8812      	ldrh	r2, [r2, #0]
 8005598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800559a:	1dbb      	adds	r3, r7, #6
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	0018      	movs	r0, r3
 80055a0:	f7fd fd8e 	bl	80030c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021800 	.word	0x40021800

080055b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	0002      	movs	r2, r0
 80055b8:	1dbb      	adds	r3, r7, #6
 80055ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80055c4:	b5b0      	push	{r4, r5, r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e0b6      	b.n	8005744 <HAL_LCD_Init+0x180>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2235      	movs	r2, #53	@ 0x35
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_LCD_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2234      	movs	r2, #52	@ 0x34
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7fd ff5f 	bl	80034b0 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2235      	movs	r2, #53	@ 0x35
 80055f6:	2102      	movs	r1, #2
 80055f8:	5499      	strb	r1, [r3, r2]

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2101      	movs	r1, #1
 8005606:	438a      	bics	r2, r1
 8005608:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER7; counter++)
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e00b      	b.n	8005628 <HAL_LCD_Init+0x64>
  {
    hlcd->Instance->RAM[counter] = 0;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	3304      	adds	r3, #4
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	3304      	adds	r3, #4
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER7; counter++)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	3301      	adds	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b07      	cmp	r3, #7
 800562c:	d9f0      	bls.n	8005610 <HAL_LCD_Init+0x4c>
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a45      	ldr	r2, [pc, #276]	@ (800574c <HAL_LCD_Init+0x188>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	605a      	str	r2, [r3, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8005670:	2513      	movs	r5, #19
 8005672:	197c      	adds	r4, r7, r5
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	0018      	movs	r0, r3
 8005678:	f000 f86a 	bl	8005750 <LCD_WaitForSynchro>
 800567c:	0003      	movs	r3, r0
 800567e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8005680:	197b      	adds	r3, r7, r5
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_LCD_Init+0xca>
  {
    return status;
 8005688:	197b      	adds	r3, r7, r5
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	e05a      	b.n	8005744 <HAL_LCD_Init+0x180>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	22fe      	movs	r2, #254	@ 0xfe
 8005696:	4393      	bics	r3, r2
 8005698:	0019      	movs	r1, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2101      	movs	r1, #1
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80056c8:	f7fe fb36 	bl	8003d38 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80056d0:	e00d      	b.n	80056ee <HAL_LCD_Init+0x12a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80056d2:	f7fe fb31 	bl	8003d38 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1ad2      	subs	r2, r2, r3
 80056dc:	23fa      	movs	r3, #250	@ 0xfa
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d904      	bls.n	80056ee <HAL_LCD_Init+0x12a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2208      	movs	r2, #8
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e02a      	b.n	8005744 <HAL_LCD_Init+0x180>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d1ea      	bne.n	80056d2 <HAL_LCD_Init+0x10e>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80056fc:	f7fe fb1c 	bl	8003d38 <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	60fb      	str	r3, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8005704:	e00d      	b.n	8005722 <HAL_LCD_Init+0x15e>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005706:	f7fe fb17 	bl	8003d38 <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	23fa      	movs	r3, #250	@ 0xfa
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d904      	bls.n	8005722 <HAL_LCD_Init+0x15e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2210      	movs	r2, #16
 800571c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e010      	b.n	8005744 <HAL_LCD_Init+0x180>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2210      	movs	r2, #16
 800572a:	4013      	ands	r3, r2
 800572c:	2b10      	cmp	r3, #16
 800572e:	d1ea      	bne.n	8005706 <HAL_LCD_Init+0x142>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2235      	movs	r2, #53	@ 0x35
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]

  return status;
 800573e:	2313      	movs	r3, #19
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	781b      	ldrb	r3, [r3, #0]
}
 8005744:	0018      	movs	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	b006      	add	sp, #24
 800574a:	bdb0      	pop	{r4, r5, r7, pc}
 800574c:	fc00000e 	.word	0xfc00000e

08005750 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005758:	f7fe faee 	bl	8003d38 <HAL_GetTick>
 800575c:	0003      	movs	r3, r0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8005760:	e00d      	b.n	800577e <LCD_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005762:	f7fe fae9 	bl	8003d38 <HAL_GetTick>
 8005766:	0002      	movs	r2, r0
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1ad2      	subs	r2, r2, r3
 800576c:	23fa      	movs	r3, #250	@ 0xfa
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	429a      	cmp	r2, r3
 8005772:	d904      	bls.n	800577e <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e007      	b.n	800578e <LCD_WaitForSynchro+0x3e>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2220      	movs	r2, #32
 8005786:	4013      	ands	r3, r2
 8005788:	2b20      	cmp	r3, #32
 800578a:	d1ea      	bne.n	8005762 <LCD_WaitForSynchro+0x12>
    }
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	0018      	movs	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	b004      	add	sp, #16
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e137      	b.n	8005a1a <HAL_LPTIM_Init+0x282>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2252      	movs	r2, #82	@ 0x52
 80057ae:	5c9b      	ldrb	r3, [r3, r2]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2251      	movs	r2, #81	@ 0x51
 80057ba:	2100      	movs	r1, #0
 80057bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7fd ff25 	bl	8003610 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2252      	movs	r2, #82	@ 0x52
 80057ca:	2102      	movs	r1, #2
 80057cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2101      	movs	r1, #1
 80057da:	430a      	orrs	r2, r1
 80057dc:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2280      	movs	r2, #128	@ 0x80
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	005a      	lsls	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0011      	movs	r1, r2
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 fbaa 	bl	8005f54 <LPTIM_WaitForFlag>
 8005800:	0003      	movs	r3, r0
 8005802:	2b03      	cmp	r3, #3
 8005804:	d101      	bne.n	800580a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e107      	b.n	8005a1a <HAL_LPTIM_Init+0x282>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2210      	movs	r2, #16
 8005810:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6a12      	ldr	r2, [r2, #32]
 800581a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2110      	movs	r1, #16
 8005820:	0018      	movs	r0, r3
 8005822:	f000 fb97 	bl	8005f54 <LPTIM_WaitForFlag>
 8005826:	0003      	movs	r3, r0
 8005828:	2b03      	cmp	r3, #3
 800582a:	d101      	bne.n	8005830 <HAL_LPTIM_Init+0x98>
  {
    return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0f4      	b.n	8005a1a <HAL_LPTIM_Init+0x282>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a7b      	ldr	r2, [pc, #492]	@ (8005a24 <HAL_LPTIM_Init+0x28c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_LPTIM_Init+0xac>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a7a      	ldr	r2, [pc, #488]	@ (8005a28 <HAL_LPTIM_Init+0x290>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_LPTIM_Init+0xb0>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_LPTIM_Init+0xb2>
 8005848:	2300      	movs	r3, #0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d122      	bne.n	8005894 <HAL_LPTIM_Init+0xfc>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	2202      	movs	r2, #2
 8005856:	4013      	ands	r3, r2
 8005858:	d14e      	bne.n	80058f8 <HAL_LPTIM_Init+0x160>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005860:	2380      	movs	r3, #128	@ 0x80
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	4013      	ands	r3, r2
 8005866:	d147      	bne.n	80058f8 <HAL_LPTIM_Init+0x160>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	2202      	movs	r2, #2
 8005870:	4013      	ands	r3, r2
 8005872:	d141      	bne.n	80058f8 <HAL_LPTIM_Init+0x160>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	4013      	ands	r3, r2
 8005880:	d13a      	bne.n	80058f8 <HAL_LPTIM_Init+0x160>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2101      	movs	r1, #1
 800588e:	438a      	bics	r2, r1
 8005890:	611a      	str	r2, [r3, #16]
 8005892:	e031      	b.n	80058f8 <HAL_LPTIM_Init+0x160>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a62      	ldr	r2, [pc, #392]	@ (8005a24 <HAL_LPTIM_Init+0x28c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_LPTIM_Init+0x11a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a62      	ldr	r2, [pc, #392]	@ (8005a2c <HAL_LPTIM_Init+0x294>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d004      	beq.n	80058b2 <HAL_LPTIM_Init+0x11a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005a28 <HAL_LPTIM_Init+0x290>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d101      	bne.n	80058b6 <HAL_LPTIM_Init+0x11e>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_LPTIM_Init+0x120>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d115      	bne.n	80058e8 <HAL_LPTIM_Init+0x150>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	2202      	movs	r2, #2
 80058c4:	4013      	ands	r3, r2
 80058c6:	d117      	bne.n	80058f8 <HAL_LPTIM_Init+0x160>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	029b      	lsls	r3, r3, #10
 80058d2:	4013      	ands	r3, r2
 80058d4:	d110      	bne.n	80058f8 <HAL_LPTIM_Init+0x160>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2101      	movs	r1, #1
 80058e2:	438a      	bics	r2, r1
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	e007      	b.n	80058f8 <HAL_LPTIM_Init+0x160>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2101      	movs	r1, #1
 80058f4:	438a      	bics	r2, r1
 80058f6:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d005      	beq.n	8005914 <HAL_LPTIM_Init+0x17c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	429a      	cmp	r2, r3
 8005912:	d103      	bne.n	800591c <HAL_LPTIM_Init+0x184>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	221e      	movs	r2, #30
 8005918:	4393      	bics	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4a43      	ldr	r2, [pc, #268]	@ (8005a30 <HAL_LPTIM_Init+0x298>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <HAL_LPTIM_Init+0x196>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a42      	ldr	r2, [pc, #264]	@ (8005a34 <HAL_LPTIM_Init+0x29c>)
 800592a:	4013      	ands	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a41      	ldr	r2, [pc, #260]	@ (8005a38 <HAL_LPTIM_Init+0x2a0>)
 8005932:	4013      	ands	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800593e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8005944:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800594a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_LPTIM_Init+0x1d2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005962:	4313      	orrs	r3, r2
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d005      	beq.n	800597e <HAL_LPTIM_Init+0x1e6>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005976:	2380      	movs	r3, #128	@ 0x80
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	429a      	cmp	r2, r3
 800597c:	d107      	bne.n	800598e <HAL_LPTIM_Init+0x1f6>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005986:	4313      	orrs	r3, r2
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	4a27      	ldr	r2, [pc, #156]	@ (8005a30 <HAL_LPTIM_Init+0x298>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00a      	beq.n	80059ae <HAL_LPTIM_Init+0x216>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80059a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80059a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
#if defined(LPTIM3)
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_LPTIM_Init+0x28c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_LPTIM_Init+0x232>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <HAL_LPTIM_Init+0x290>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <HAL_LPTIM_Init+0x244>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80059da:	e009      	b.n	80059f0 <HAL_LPTIM_Init+0x258>
  }
  else
  {
    if (hlptim->Instance == LPTIM2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <HAL_LPTIM_Init+0x294>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d104      	bne.n	80059f0 <HAL_LPTIM_Init+0x258>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059ee:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2253      	movs	r2, #83	@ 0x53
 80059f4:	2101      	movs	r1, #1
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2254      	movs	r2, #84	@ 0x54
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2255      	movs	r2, #85	@ 0x55
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2256      	movs	r2, #86	@ 0x56
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	5499      	strb	r1, [r3, r2]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2252      	movs	r2, #82	@ 0x52
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	40007c00 	.word	0x40007c00
 8005a28:	40009000 	.word	0x40009000
 8005a2c:	40009400 	.word	0x40009400
 8005a30:	0000ffff 	.word	0x0000ffff
 8005a34:	ffff1f3f 	.word	0xffff1f3f
 8005a38:	ff39f1fe 	.word	0xff39f1fe

08005a3c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d121      	bne.n	8005a96 <HAL_LPTIM_IRQHandler+0x5a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d11a      	bne.n	8005a96 <HAL_LPTIM_IRQHandler+0x5a>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2201      	movs	r2, #1
 8005a66:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2238      	movs	r2, #56	@ 0x38
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	2201      	movs	r2, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f000 fa57 	bl	8005f32 <HAL_LPTIM_IC_CaptureCallback>
 8005a84:	e003      	b.n	8005a8e <HAL_LPTIM_IRQHandler+0x52>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 fa0a 	bl	8005ea2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2238      	movs	r2, #56	@ 0x38
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	2380      	movs	r3, #128	@ 0x80
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d126      	bne.n	8005af8 <HAL_LPTIM_IRQHandler+0xbc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	2380      	movs	r3, #128	@ 0x80
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11c      	bne.n	8005af8 <HAL_LPTIM_IRQHandler+0xbc>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2280      	movs	r2, #128	@ 0x80
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2238      	movs	r2, #56	@ 0x38
 8005acc:	2102      	movs	r1, #2
 8005ace:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	2380      	movs	r3, #128	@ 0x80
 8005ad8:	025b      	lsls	r3, r3, #9
 8005ada:	4013      	ands	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_LPTIM_IRQHandler+0xac>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 fa26 	bl	8005f32 <HAL_LPTIM_IC_CaptureCallback>
 8005ae6:	e003      	b.n	8005af0 <HAL_LPTIM_IRQHandler+0xb4>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 f9d9 	bl	8005ea2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2238      	movs	r2, #56	@ 0x38
 8005af4:	2100      	movs	r1, #0
 8005af6:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	2380      	movs	r3, #128	@ 0x80
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	401a      	ands	r2, r3
 8005b04:	2380      	movs	r3, #128	@ 0x80
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d125      	bne.n	8005b58 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	2380      	movs	r3, #128	@ 0x80
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	401a      	ands	r2, r3
 8005b18:	2380      	movs	r3, #128	@ 0x80
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d11b      	bne.n	8005b58 <HAL_LPTIM_IRQHandler+0x11c>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2280      	movs	r2, #128	@ 0x80
 8005b26:	00d2      	lsls	r2, r2, #3
 8005b28:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2238      	movs	r2, #56	@ 0x38
 8005b2e:	2104      	movs	r1, #4
 8005b30:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_LPTIM_IRQHandler+0x10c>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 f9f6 	bl	8005f32 <HAL_LPTIM_IC_CaptureCallback>
 8005b46:	e003      	b.n	8005b50 <HAL_LPTIM_IRQHandler+0x114>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f000 f9a9 	bl	8005ea2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2238      	movs	r2, #56	@ 0x38
 8005b54:	2100      	movs	r1, #0
 8005b56:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	2380      	movs	r3, #128	@ 0x80
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	401a      	ands	r2, r3
 8005b64:	2380      	movs	r3, #128	@ 0x80
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d126      	bne.n	8005bba <HAL_LPTIM_IRQHandler+0x17e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	2380      	movs	r3, #128	@ 0x80
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	401a      	ands	r2, r3
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d11c      	bne.n	8005bba <HAL_LPTIM_IRQHandler+0x17e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2280      	movs	r2, #128	@ 0x80
 8005b86:	0112      	lsls	r2, r2, #4
 8005b88:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2238      	movs	r2, #56	@ 0x38
 8005b8e:	2108      	movs	r1, #8
 8005b90:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b98:	2380      	movs	r3, #128	@ 0x80
 8005b9a:	025b      	lsls	r3, r3, #9
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_LPTIM_IRQHandler+0x16e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 f9c5 	bl	8005f32 <HAL_LPTIM_IC_CaptureCallback>
 8005ba8:	e003      	b.n	8005bb2 <HAL_LPTIM_IRQHandler+0x176>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f978 	bl	8005ea2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2238      	movs	r2, #56	@ 0x38
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	015b      	lsls	r3, r3, #5
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d11a      	bne.n	8005c04 <HAL_LPTIM_IRQHandler+0x1c8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	2380      	movs	r3, #128	@ 0x80
 8005bd6:	015b      	lsls	r3, r3, #5
 8005bd8:	401a      	ands	r2, r3
 8005bda:	2380      	movs	r3, #128	@ 0x80
 8005bdc:	015b      	lsls	r3, r3, #5
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d110      	bne.n	8005c04 <HAL_LPTIM_IRQHandler+0x1c8>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2280      	movs	r2, #128	@ 0x80
 8005be8:	0152      	lsls	r2, r2, #5
 8005bea:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2238      	movs	r2, #56	@ 0x38
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f9a3 	bl	8005f42 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2238      	movs	r2, #56	@ 0x38
 8005c00:	2100      	movs	r1, #0
 8005c02:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	2380      	movs	r3, #128	@ 0x80
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	401a      	ands	r2, r3
 8005c10:	2380      	movs	r3, #128	@ 0x80
 8005c12:	019b      	lsls	r3, r3, #6
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d11a      	bne.n	8005c4e <HAL_LPTIM_IRQHandler+0x212>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	2380      	movs	r3, #128	@ 0x80
 8005c20:	019b      	lsls	r3, r3, #6
 8005c22:	401a      	ands	r2, r3
 8005c24:	2380      	movs	r3, #128	@ 0x80
 8005c26:	019b      	lsls	r3, r3, #6
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d110      	bne.n	8005c4e <HAL_LPTIM_IRQHandler+0x212>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2280      	movs	r2, #128	@ 0x80
 8005c32:	0192      	lsls	r2, r2, #6
 8005c34:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2238      	movs	r2, #56	@ 0x38
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 f97e 	bl	8005f42 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2238      	movs	r2, #56	@ 0x38
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	2380      	movs	r3, #128	@ 0x80
 8005c56:	01db      	lsls	r3, r3, #7
 8005c58:	401a      	ands	r2, r3
 8005c5a:	2380      	movs	r3, #128	@ 0x80
 8005c5c:	01db      	lsls	r3, r3, #7
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d11a      	bne.n	8005c98 <HAL_LPTIM_IRQHandler+0x25c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	01db      	lsls	r3, r3, #7
 8005c6c:	401a      	ands	r2, r3
 8005c6e:	2380      	movs	r3, #128	@ 0x80
 8005c70:	01db      	lsls	r3, r3, #7
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d110      	bne.n	8005c98 <HAL_LPTIM_IRQHandler+0x25c>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2280      	movs	r2, #128	@ 0x80
 8005c7c:	01d2      	lsls	r2, r2, #7
 8005c7e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2238      	movs	r2, #56	@ 0x38
 8005c84:	2104      	movs	r1, #4
 8005c86:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 f959 	bl	8005f42 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2238      	movs	r2, #56	@ 0x38
 8005c94:	2100      	movs	r1, #0
 8005c96:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	2380      	movs	r3, #128	@ 0x80
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d11a      	bne.n	8005ce2 <HAL_LPTIM_IRQHandler+0x2a6>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	2380      	movs	r3, #128	@ 0x80
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d110      	bne.n	8005ce2 <HAL_LPTIM_IRQHandler+0x2a6>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2280      	movs	r2, #128	@ 0x80
 8005cc6:	0212      	lsls	r2, r2, #8
 8005cc8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2238      	movs	r2, #56	@ 0x38
 8005cce:	2108      	movs	r1, #8
 8005cd0:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 f934 	bl	8005f42 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2238      	movs	r2, #56	@ 0x38
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d10e      	bne.n	8005d0e <HAL_LPTIM_IRQHandler+0x2d2>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d107      	bne.n	8005d0e <HAL_LPTIM_IRQHandler+0x2d2>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2202      	movs	r2, #2
 8005d04:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f8d2 	bl	8005eb2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2204      	movs	r2, #4
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d10e      	bne.n	8005d3a <HAL_LPTIM_IRQHandler+0x2fe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2204      	movs	r2, #4
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d107      	bne.n	8005d3a <HAL_LPTIM_IRQHandler+0x2fe>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2204      	movs	r2, #4
 8005d30:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 f8c4 	bl	8005ec2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2208      	movs	r2, #8
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d112      	bne.n	8005d6e <HAL_LPTIM_IRQHandler+0x332>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d10b      	bne.n	8005d6e <HAL_LPTIM_IRQHandler+0x332>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2238      	movs	r2, #56	@ 0x38
 8005d62:	2101      	movs	r1, #1
 8005d64:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 f8b2 	bl	8005ed2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2380      	movs	r3, #128	@ 0x80
 8005d76:	031b      	lsls	r3, r3, #12
 8005d78:	401a      	ands	r2, r3
 8005d7a:	2380      	movs	r3, #128	@ 0x80
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d116      	bne.n	8005db0 <HAL_LPTIM_IRQHandler+0x374>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	2380      	movs	r3, #128	@ 0x80
 8005d8a:	031b      	lsls	r3, r3, #12
 8005d8c:	401a      	ands	r2, r3
 8005d8e:	2380      	movs	r3, #128	@ 0x80
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d10c      	bne.n	8005db0 <HAL_LPTIM_IRQHandler+0x374>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2280      	movs	r2, #128	@ 0x80
 8005d9c:	0312      	lsls	r2, r2, #12
 8005d9e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2238      	movs	r2, #56	@ 0x38
 8005da4:	2102      	movs	r1, #2
 8005da6:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f891 	bl	8005ed2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2210      	movs	r2, #16
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b10      	cmp	r3, #16
 8005dbc:	d10e      	bne.n	8005ddc <HAL_LPTIM_IRQHandler+0x3a0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d107      	bne.n	8005ddc <HAL_LPTIM_IRQHandler+0x3a0>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 f883 	bl	8005ee2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2220      	movs	r2, #32
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d10e      	bne.n	8005e08 <HAL_LPTIM_IRQHandler+0x3cc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2220      	movs	r2, #32
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d107      	bne.n	8005e08 <HAL_LPTIM_IRQHandler+0x3cc>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 f875 	bl	8005ef2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2240      	movs	r2, #64	@ 0x40
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b40      	cmp	r3, #64	@ 0x40
 8005e14:	d10e      	bne.n	8005e34 <HAL_LPTIM_IRQHandler+0x3f8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2240      	movs	r2, #64	@ 0x40
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b40      	cmp	r3, #64	@ 0x40
 8005e22:	d107      	bne.n	8005e34 <HAL_LPTIM_IRQHandler+0x3f8>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2240      	movs	r2, #64	@ 0x40
 8005e2a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 f867 	bl	8005f02 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2280      	movs	r2, #128	@ 0x80
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b80      	cmp	r3, #128	@ 0x80
 8005e40:	d10e      	bne.n	8005e60 <HAL_LPTIM_IRQHandler+0x424>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2280      	movs	r2, #128	@ 0x80
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b80      	cmp	r3, #128	@ 0x80
 8005e4e:	d107      	bne.n	8005e60 <HAL_LPTIM_IRQHandler+0x424>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2280      	movs	r2, #128	@ 0x80
 8005e56:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 f859 	bl	8005f12 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	2380      	movs	r3, #128	@ 0x80
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	401a      	ands	r2, r3
 8005e6c:	2380      	movs	r3, #128	@ 0x80
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d112      	bne.n	8005e9a <HAL_LPTIM_IRQHandler+0x45e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	401a      	ands	r2, r3
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d108      	bne.n	8005e9a <HAL_LPTIM_IRQHandler+0x45e>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2280      	movs	r2, #128	@ 0x80
 8005e8e:	0052      	lsls	r2, r2, #1
 8005e90:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 f844 	bl	8005f22 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b002      	add	sp, #8
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b002      	add	sp, #8
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b002      	add	sp, #8
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b002      	add	sp, #8
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005eea:	46c0      	nop			@ (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b002      	add	sp, #8
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b002      	add	sp, #8
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b002      	add	sp, #8
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b002      	add	sp, #8
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005f5e:	230f      	movs	r3, #15
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005f66:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <LPTIM_WaitForFlag+0x68>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4915      	ldr	r1, [pc, #84]	@ (8005fc0 <LPTIM_WaitForFlag+0x6c>)
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7fa f8e7 	bl	8000140 <__udivsi3>
 8005f72:	0003      	movs	r3, r0
 8005f74:	001a      	movs	r2, r3
 8005f76:	0013      	movs	r3, r2
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8005f90:	230f      	movs	r3, #15
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	2203      	movs	r2, #3
 8005f96:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d002      	beq.n	8005fae <LPTIM_WaitForFlag+0x5a>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1ea      	bne.n	8005f84 <LPTIM_WaitForFlag+0x30>

  return result;
 8005fae:	230f      	movs	r3, #15
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	781b      	ldrb	r3, [r3, #0]
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b004      	add	sp, #16
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000000 	.word	0x20000000
 8005fc0:	00004e20 	.word	0x00004e20

08005fc4 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	000a      	movs	r2, r1
 8005fce:	1cbb      	adds	r3, r7, #2
 8005fd0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8005fd6:	e002      	b.n	8005fde <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f9      	bne.n	8005fd8 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8005fe4:	1cbb      	adds	r3, r7, #2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4a06      	ldr	r2, [pc, #24]	@ (8006004 <PCD_GET_EP_RX_CNT+0x40>)
 8005fec:	4694      	mov	ip, r2
 8005fee:	4463      	add	r3, ip
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	059b      	lsls	r3, r3, #22
 8005ff8:	0d9b      	lsrs	r3, r3, #22
 8005ffa:	b29b      	uxth	r3, r3
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b004      	add	sp, #16
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40009800 	.word	0x40009800

08006008 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	000a      	movs	r2, r1
 8006012:	1cbb      	adds	r3, r7, #2
 8006014:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8006016:	230a      	movs	r3, #10
 8006018:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800601a:	e002      	b.n	8006022 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b01      	subs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f9      	bne.n	800601c <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8006028:	1cbb      	adds	r3, r7, #2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4a06      	ldr	r2, [pc, #24]	@ (8006048 <PCD_GET_EP_DBUF0_CNT+0x40>)
 8006030:	4694      	mov	ip, r2
 8006032:	4463      	add	r3, ip
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	b29b      	uxth	r3, r3
 800603a:	059b      	lsls	r3, r3, #22
 800603c:	0d9b      	lsrs	r3, r3, #22
 800603e:	b29b      	uxth	r3, r3
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b004      	add	sp, #16
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40009800 	.word	0x40009800

0800604c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	000a      	movs	r2, r1
 8006056:	1cbb      	adds	r3, r7, #2
 8006058:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800605a:	230a      	movs	r3, #10
 800605c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800605e:	e002      	b.n	8006066 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b01      	subs	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f9      	bne.n	8006060 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800606c:	1cbb      	adds	r3, r7, #2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4a06      	ldr	r2, [pc, #24]	@ (800608c <PCD_GET_EP_DBUF1_CNT+0x40>)
 8006074:	4694      	mov	ip, r2
 8006076:	4463      	add	r3, ip
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b29b      	uxth	r3, r3
 800607e:	059b      	lsls	r3, r3, #22
 8006080:	0d9b      	lsrs	r3, r3, #22
 8006082:	b29b      	uxth	r3, r3
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40009800 	.word	0x40009800

08006090 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e0e4      	b.n	800626c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a73      	ldr	r2, [pc, #460]	@ (8006274 <HAL_PCD_Init+0x1e4>)
 80060a6:	5c9b      	ldrb	r3, [r3, r2]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d108      	bne.n	80060c0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	23a4      	movs	r3, #164	@ 0xa4
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	2100      	movs	r1, #0
 80060b6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	0018      	movs	r0, r3
 80060bc:	f7fd fbda 	bl	8003874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006274 <HAL_PCD_Init+0x1e4>)
 80060c4:	2103      	movs	r1, #3
 80060c6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	0018      	movs	r0, r3
 80060ce:	f005 fe01 	bl	800bcd4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060d2:	230f      	movs	r3, #15
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2200      	movs	r2, #0
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e047      	b.n	800616c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060dc:	200f      	movs	r0, #15
 80060de:	183b      	adds	r3, r7, r0
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	0013      	movs	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	189b      	adds	r3, r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	18cb      	adds	r3, r1, r3
 80060ee:	3311      	adds	r3, #17
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060f4:	183b      	adds	r3, r7, r0
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	0013      	movs	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	18cb      	adds	r3, r1, r3
 8006104:	3310      	adds	r3, #16
 8006106:	183a      	adds	r2, r7, r0
 8006108:	7812      	ldrb	r2, [r2, #0]
 800610a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800610c:	183b      	adds	r3, r7, r0
 800610e:	781a      	ldrb	r2, [r3, #0]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	0013      	movs	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	189b      	adds	r3, r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	18cb      	adds	r3, r1, r3
 800611c:	3313      	adds	r3, #19
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006122:	183b      	adds	r3, r7, r0
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	0013      	movs	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	189b      	adds	r3, r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	18cb      	adds	r3, r1, r3
 8006132:	3320      	adds	r3, #32
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006138:	183b      	adds	r3, r7, r0
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	0013      	movs	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	189b      	adds	r3, r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	18cb      	adds	r3, r1, r3
 8006148:	3324      	adds	r3, #36	@ 0x24
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800614e:	183b      	adds	r3, r7, r0
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	0013      	movs	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	189b      	adds	r3, r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	2200      	movs	r2, #0
 8006160:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006162:	183b      	adds	r3, r7, r0
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	183b      	adds	r3, r7, r0
 8006168:	3201      	adds	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	791b      	ldrb	r3, [r3, #4]
 8006170:	210f      	movs	r1, #15
 8006172:	187a      	adds	r2, r7, r1
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3b0      	bcc.n	80060dc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800617a:	187b      	adds	r3, r7, r1
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e056      	b.n	8006230 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006182:	240f      	movs	r4, #15
 8006184:	193b      	adds	r3, r7, r4
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	2352      	movs	r3, #82	@ 0x52
 800618c:	33ff      	adds	r3, #255	@ 0xff
 800618e:	0019      	movs	r1, r3
 8006190:	0013      	movs	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	189b      	adds	r3, r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	18c3      	adds	r3, r0, r3
 800619a:	185b      	adds	r3, r3, r1
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061a0:	193b      	adds	r3, r7, r4
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	23a8      	movs	r3, #168	@ 0xa8
 80061a8:	0059      	lsls	r1, r3, #1
 80061aa:	0013      	movs	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	18c3      	adds	r3, r0, r3
 80061b4:	185b      	adds	r3, r3, r1
 80061b6:	193a      	adds	r2, r7, r4
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061bc:	193b      	adds	r3, r7, r4
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	2354      	movs	r3, #84	@ 0x54
 80061c4:	33ff      	adds	r3, #255	@ 0xff
 80061c6:	0019      	movs	r1, r3
 80061c8:	0013      	movs	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	189b      	adds	r3, r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	18c3      	adds	r3, r0, r3
 80061d2:	185b      	adds	r3, r3, r1
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061d8:	193b      	adds	r3, r7, r4
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	23b0      	movs	r3, #176	@ 0xb0
 80061e0:	0059      	lsls	r1, r3, #1
 80061e2:	0013      	movs	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	18c3      	adds	r3, r0, r3
 80061ec:	185b      	adds	r3, r3, r1
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061f2:	193b      	adds	r3, r7, r4
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	23b2      	movs	r3, #178	@ 0xb2
 80061fa:	0059      	lsls	r1, r3, #1
 80061fc:	0013      	movs	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	189b      	adds	r3, r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	18c3      	adds	r3, r0, r3
 8006206:	185b      	adds	r3, r3, r1
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800620c:	193b      	adds	r3, r7, r4
 800620e:	781a      	ldrb	r2, [r3, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	23b4      	movs	r3, #180	@ 0xb4
 8006214:	0059      	lsls	r1, r3, #1
 8006216:	0013      	movs	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	189b      	adds	r3, r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	18c3      	adds	r3, r0, r3
 8006220:	185b      	adds	r3, r3, r1
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006226:	193b      	adds	r3, r7, r4
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	193b      	adds	r3, r7, r4
 800622c:	3201      	adds	r2, #1
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	791b      	ldrb	r3, [r3, #4]
 8006234:	220f      	movs	r2, #15
 8006236:	18ba      	adds	r2, r7, r2
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d3a1      	bcc.n	8006182 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	f005 fd70 	bl	800bd2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a07      	ldr	r2, [pc, #28]	@ (8006274 <HAL_PCD_Init+0x1e4>)
 8006256:	2101      	movs	r1, #1
 8006258:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7a9b      	ldrb	r3, [r3, #10]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d103      	bne.n	800626a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0018      	movs	r0, r3
 8006266:	f001 fc6d 	bl	8007b44 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b005      	add	sp, #20
 8006272:	bd90      	pop	{r4, r7, pc}
 8006274:	00000291 	.word	0x00000291

08006278 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	23a4      	movs	r3, #164	@ 0xa4
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	5cd3      	ldrb	r3, [r2, r3]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_PCD_Start+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e014      	b.n	80062ba <HAL_PCD_Start+0x42>
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	23a4      	movs	r3, #164	@ 0xa4
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	2101      	movs	r1, #1
 8006298:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	0018      	movs	r0, r3
 80062a0:	f005 fd04 	bl	800bcac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f007 fa20 	bl	800d6ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	23a4      	movs	r3, #164	@ 0xa4
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	2100      	movs	r1, #0
 80062b6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b002      	add	sp, #8
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	23a4      	movs	r3, #164	@ 0xa4
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	5cd3      	ldrb	r3, [r2, r3]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_PCD_Stop+0x18>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e014      	b.n	8006304 <HAL_PCD_Stop+0x42>
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	23a4      	movs	r3, #164	@ 0xa4
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	2101      	movs	r1, #1
 80062e2:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f005 fcf3 	bl	800bcd4 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f007 fa0c 	bl	800d710 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	23a4      	movs	r3, #164	@ 0xa4
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	2100      	movs	r1, #0
 8006300:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	0018      	movs	r0, r3
 800631a:	f007 fa0b 	bl	800d734 <USB_ReadInterrupts>
 800631e:	0003      	movs	r3, r0
 8006320:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	4013      	ands	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0018      	movs	r0, r3
 8006330:	f000 fb94 	bl	8006a5c <PCD_EP_ISR_Handler>

    return;
 8006334:	e0e3      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4013      	ands	r3, r2
 800633e:	d011      	beq.n	8006364 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	496e      	ldr	r1, [pc, #440]	@ (8006504 <HAL_PCD_IRQHandler+0x1f8>)
 800634c:	400a      	ands	r2, r1
 800634e:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0018      	movs	r0, r3
 8006354:	f00b f80a 	bl	801136c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2100      	movs	r1, #0
 800635c:	0018      	movs	r0, r3
 800635e:	f000 f8e1 	bl	8006524 <HAL_PCD_SetAddress>

    return;
 8006362:	e0cc      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	2380      	movs	r3, #128	@ 0x80
 8006368:	01db      	lsls	r3, r3, #7
 800636a:	4013      	ands	r3, r2
 800636c:	d008      	beq.n	8006380 <HAL_PCD_IRQHandler+0x74>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4963      	ldr	r1, [pc, #396]	@ (8006508 <HAL_PCD_IRQHandler+0x1fc>)
 800637a:	400a      	ands	r2, r1
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800637e:	e0be      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	019b      	lsls	r3, r3, #6
 8006386:	4013      	ands	r3, r2
 8006388:	d008      	beq.n	800639c <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	495d      	ldr	r1, [pc, #372]	@ (800650c <HAL_PCD_IRQHandler+0x200>)
 8006396:	400a      	ands	r2, r1
 8006398:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800639a:	e0b0      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	015b      	lsls	r3, r3, #5
 80063a2:	4013      	ands	r3, r2
 80063a4:	d02c      	beq.n	8006400 <HAL_PCD_IRQHandler+0xf4>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2104      	movs	r1, #4
 80063b2:	438a      	bics	r2, r1
 80063b4:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2108      	movs	r1, #8
 80063c2:	438a      	bics	r2, r1
 80063c4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	23b2      	movs	r3, #178	@ 0xb2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	5cd3      	ldrb	r3, [r2, r3]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d109      	bne.n	80063e6 <HAL_PCD_IRQHandler+0xda>
    {
      hpcd->LPM_State = LPM_L0;
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	23b2      	movs	r3, #178	@ 0xb2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	2100      	movs	r1, #0
 80063da:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2100      	movs	r1, #0
 80063e0:	0018      	movs	r0, r3
 80063e2:	f001 fbd1 	bl	8007b88 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f00b f801 	bl	80113f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4945      	ldr	r1, [pc, #276]	@ (8006510 <HAL_PCD_IRQHandler+0x204>)
 80063fa:	400a      	ands	r2, r1
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80063fe:	e07e      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	2380      	movs	r3, #128	@ 0x80
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	4013      	ands	r3, r2
 8006408:	d01c      	beq.n	8006444 <HAL_PCD_IRQHandler+0x138>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2108      	movs	r1, #8
 8006416:	430a      	orrs	r2, r1
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	493b      	ldr	r1, [pc, #236]	@ (8006514 <HAL_PCD_IRQHandler+0x208>)
 8006426:	400a      	ands	r2, r1
 8006428:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2104      	movs	r1, #4
 8006436:	430a      	orrs	r2, r1
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	0018      	movs	r0, r3
 800643e:	f00a ffbf 	bl	80113c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006442:	e05c      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2280      	movs	r2, #128	@ 0x80
 8006448:	4013      	ands	r3, r2
 800644a:	d038      	beq.n	80064be <HAL_PCD_IRQHandler+0x1b2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4930      	ldr	r1, [pc, #192]	@ (8006518 <HAL_PCD_IRQHandler+0x20c>)
 8006458:	400a      	ands	r2, r1
 800645a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	23b2      	movs	r3, #178	@ 0xb2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	5cd3      	ldrb	r3, [r2, r3]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d125      	bne.n	80064b4 <HAL_PCD_IRQHandler+0x1a8>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2104      	movs	r1, #4
 8006474:	430a      	orrs	r2, r1
 8006476:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2108      	movs	r1, #8
 8006484:	430a      	orrs	r2, r1
 8006486:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	23b2      	movs	r3, #178	@ 0xb2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	2101      	movs	r1, #1
 8006490:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	223c      	movs	r2, #60	@ 0x3c
 800649c:	4013      	ands	r3, r2
 800649e:	0019      	movs	r1, r3
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	23b3      	movs	r3, #179	@ 0xb3
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2101      	movs	r1, #1
 80064ac:	0018      	movs	r0, r3
 80064ae:	f001 fb6b 	bl	8007b88 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80064b2:	e024      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
      HAL_PCD_SuspendCallback(hpcd);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f00a ff82 	bl	80113c0 <HAL_PCD_SuspendCallback>
    return;
 80064bc:	e01f      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	2380      	movs	r3, #128	@ 0x80
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4013      	ands	r3, r2
 80064c6:	d00c      	beq.n	80064e2 <HAL_PCD_IRQHandler+0x1d6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4912      	ldr	r1, [pc, #72]	@ (800651c <HAL_PCD_IRQHandler+0x210>)
 80064d4:	400a      	ands	r2, r1
 80064d6:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0018      	movs	r0, r3
 80064dc:	f00a ffa0 	bl	8011420 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80064e0:	e00d      	b.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	2380      	movs	r3, #128	@ 0x80
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4013      	ands	r3, r2
 80064ea:	d008      	beq.n	80064fe <HAL_PCD_IRQHandler+0x1f2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	490a      	ldr	r1, [pc, #40]	@ (8006520 <HAL_PCD_IRQHandler+0x214>)
 80064f8:	400a      	ands	r2, r1
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80064fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80064fe:	46bd      	mov	sp, r7
 8006500:	b004      	add	sp, #16
 8006502:	bd80      	pop	{r7, pc}
 8006504:	0000fbff 	.word	0x0000fbff
 8006508:	0000bfff 	.word	0x0000bfff
 800650c:	0000dfff 	.word	0x0000dfff
 8006510:	0000efff 	.word	0x0000efff
 8006514:	0000f7ff 	.word	0x0000f7ff
 8006518:	0000ff7f 	.word	0x0000ff7f
 800651c:	0000fdff 	.word	0x0000fdff
 8006520:	0000feff 	.word	0x0000feff

08006524 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	000a      	movs	r2, r1
 800652e:	1cfb      	adds	r3, r7, #3
 8006530:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	23a4      	movs	r3, #164	@ 0xa4
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	5cd3      	ldrb	r3, [r2, r3]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_PCD_SetAddress+0x1e>
 800653e:	2302      	movs	r3, #2
 8006540:	e016      	b.n	8006570 <HAL_PCD_SetAddress+0x4c>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	23a4      	movs	r3, #164	@ 0xa4
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	2101      	movs	r1, #1
 800654a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	1cfa      	adds	r2, r7, #3
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	1cfb      	adds	r3, r7, #3
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	0019      	movs	r1, r3
 800655e:	0010      	movs	r0, r2
 8006560:	f007 f8b2 	bl	800d6c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	23a4      	movs	r3, #164	@ 0xa4
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	2100      	movs	r1, #0
 800656c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b002      	add	sp, #8
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006578:	b590      	push	{r4, r7, lr}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	000c      	movs	r4, r1
 8006582:	0010      	movs	r0, r2
 8006584:	0019      	movs	r1, r3
 8006586:	1cfb      	adds	r3, r7, #3
 8006588:	1c22      	adds	r2, r4, #0
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	003b      	movs	r3, r7
 800658e:	1c02      	adds	r2, r0, #0
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	1cbb      	adds	r3, r7, #2
 8006594:	1c0a      	adds	r2, r1, #0
 8006596:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006598:	230b      	movs	r3, #11
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065a0:	1cfb      	adds	r3, r7, #3
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	b25b      	sxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da0f      	bge.n	80065ca <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065aa:	1cfb      	adds	r3, r7, #3
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2207      	movs	r2, #7
 80065b0:	401a      	ands	r2, r3
 80065b2:	0013      	movs	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	3310      	adds	r3, #16
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	18d3      	adds	r3, r2, r3
 80065c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	705a      	strb	r2, [r3, #1]
 80065c8:	e00f      	b.n	80065ea <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065ca:	1cfb      	adds	r3, r7, #3
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2207      	movs	r2, #7
 80065d0:	401a      	ands	r2, r3
 80065d2:	0013      	movs	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	3351      	adds	r3, #81	@ 0x51
 80065dc:	33ff      	adds	r3, #255	@ 0xff
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	18d3      	adds	r3, r2, r3
 80065e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065ea:	1cfb      	adds	r3, r7, #3
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2207      	movs	r2, #7
 80065f0:	4013      	ands	r3, r2
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80065f8:	003b      	movs	r3, r7
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	055b      	lsls	r3, r3, #21
 80065fe:	0d5a      	lsrs	r2, r3, #21
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1cba      	adds	r2, r7, #2
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800660c:	1cbb      	adds	r3, r7, #2
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d102      	bne.n	800661a <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	23a4      	movs	r3, #164	@ 0xa4
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	5cd3      	ldrb	r3, [r2, r3]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_PCD_EP_Open+0xb2>
 8006626:	2302      	movs	r3, #2
 8006628:	e013      	b.n	8006652 <HAL_PCD_EP_Open+0xda>
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	23a4      	movs	r3, #164	@ 0xa4
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	2101      	movs	r1, #1
 8006632:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f005 fbab 	bl	800bd98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	23a4      	movs	r3, #164	@ 0xa4
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	2100      	movs	r1, #0
 800664a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800664c:	230b      	movs	r3, #11
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	781b      	ldrb	r3, [r3, #0]
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b005      	add	sp, #20
 8006658:	bd90      	pop	{r4, r7, pc}

0800665a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	000a      	movs	r2, r1
 8006664:	1cfb      	adds	r3, r7, #3
 8006666:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006668:	1cfb      	adds	r3, r7, #3
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b25b      	sxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	da0f      	bge.n	8006692 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006672:	1cfb      	adds	r3, r7, #3
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2207      	movs	r2, #7
 8006678:	401a      	ands	r2, r3
 800667a:	0013      	movs	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	189b      	adds	r3, r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	3310      	adds	r3, #16
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	18d3      	adds	r3, r2, r3
 8006688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	705a      	strb	r2, [r3, #1]
 8006690:	e00f      	b.n	80066b2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006692:	1cfb      	adds	r3, r7, #3
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2207      	movs	r2, #7
 8006698:	401a      	ands	r2, r3
 800669a:	0013      	movs	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	3351      	adds	r3, #81	@ 0x51
 80066a4:	33ff      	adds	r3, #255	@ 0xff
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	18d3      	adds	r3, r2, r3
 80066aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80066b2:	1cfb      	adds	r3, r7, #3
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2207      	movs	r2, #7
 80066b8:	4013      	ands	r3, r2
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	23a4      	movs	r3, #164	@ 0xa4
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	5cd3      	ldrb	r3, [r2, r3]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_PCD_EP_Close+0x76>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e011      	b.n	80066f4 <HAL_PCD_EP_Close+0x9a>
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	23a4      	movs	r3, #164	@ 0xa4
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	2101      	movs	r1, #1
 80066d8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	0011      	movs	r1, r2
 80066e2:	0018      	movs	r0, r3
 80066e4:	f005 ffbe 	bl	800c664 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	23a4      	movs	r3, #164	@ 0xa4
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	2100      	movs	r1, #0
 80066f0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b004      	add	sp, #16
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	200b      	movs	r0, #11
 800670a:	183b      	adds	r3, r7, r0
 800670c:	1c0a      	adds	r2, r1, #0
 800670e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006710:	0001      	movs	r1, r0
 8006712:	187b      	adds	r3, r7, r1
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2207      	movs	r2, #7
 8006718:	401a      	ands	r2, r3
 800671a:	0013      	movs	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	189b      	adds	r3, r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	3351      	adds	r3, #81	@ 0x51
 8006724:	33ff      	adds	r3, #255	@ 0xff
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	18d3      	adds	r3, r2, r3
 800672a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2200      	movs	r2, #0
 800673c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2200      	movs	r2, #0
 8006742:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006744:	187b      	adds	r3, r7, r1
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2207      	movs	r2, #7
 800674a:	4013      	ands	r3, r2
 800674c:	b2da      	uxtb	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	0011      	movs	r1, r2
 800675a:	0018      	movs	r0, r3
 800675c:	f006 f8e8 	bl	800c930 <USB_EPStartXfer>

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	0018      	movs	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	b006      	add	sp, #24
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	000a      	movs	r2, r1
 8006774:	1cfb      	adds	r3, r7, #3
 8006776:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006778:	1cfb      	adds	r3, r7, #3
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2207      	movs	r2, #7
 800677e:	401a      	ands	r2, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	23b6      	movs	r3, #182	@ 0xb6
 8006784:	0059      	lsls	r1, r3, #1
 8006786:	0013      	movs	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	189b      	adds	r3, r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	18c3      	adds	r3, r0, r3
 8006790:	185b      	adds	r3, r3, r1
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b002      	add	sp, #8
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	200b      	movs	r0, #11
 80067aa:	183b      	adds	r3, r7, r0
 80067ac:	1c0a      	adds	r2, r1, #0
 80067ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067b0:	183b      	adds	r3, r7, r0
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2207      	movs	r2, #7
 80067b6:	401a      	ands	r2, r3
 80067b8:	0013      	movs	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	189b      	adds	r3, r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	3310      	adds	r3, #16
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	18d3      	adds	r3, r2, r3
 80067c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2224      	movs	r2, #36	@ 0x24
 80067d8:	2101      	movs	r1, #1
 80067da:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2200      	movs	r2, #0
 80067e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2201      	movs	r2, #1
 80067ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ee:	183b      	adds	r3, r7, r0
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2207      	movs	r2, #7
 80067f4:	4013      	ands	r3, r2
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f006 f893 	bl	800c930 <USB_EPStartXfer>

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b006      	add	sp, #24
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	000a      	movs	r2, r1
 800681e:	1cfb      	adds	r3, r7, #3
 8006820:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006822:	1cfb      	adds	r3, r7, #3
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2207      	movs	r2, #7
 8006828:	4013      	ands	r3, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	7912      	ldrb	r2, [r2, #4]
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e046      	b.n	80068c4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006836:	1cfb      	adds	r3, r7, #3
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	b25b      	sxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	da0f      	bge.n	8006860 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006840:	1cfb      	adds	r3, r7, #3
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2207      	movs	r2, #7
 8006846:	401a      	ands	r2, r3
 8006848:	0013      	movs	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	189b      	adds	r3, r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	3310      	adds	r3, #16
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	18d3      	adds	r3, r2, r3
 8006856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	705a      	strb	r2, [r3, #1]
 800685e:	e00d      	b.n	800687c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006860:	1cfb      	adds	r3, r7, #3
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	0013      	movs	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	189b      	adds	r3, r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	3351      	adds	r3, #81	@ 0x51
 800686e:	33ff      	adds	r3, #255	@ 0xff
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	18d3      	adds	r3, r2, r3
 8006874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006882:	1cfb      	adds	r3, r7, #3
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2207      	movs	r2, #7
 8006888:	4013      	ands	r3, r2
 800688a:	b2da      	uxtb	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	23a4      	movs	r3, #164	@ 0xa4
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	5cd3      	ldrb	r3, [r2, r3]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_PCD_EP_SetStall+0x8c>
 800689c:	2302      	movs	r3, #2
 800689e:	e011      	b.n	80068c4 <HAL_PCD_EP_SetStall+0xb0>
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	23a4      	movs	r3, #164	@ 0xa4
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	2101      	movs	r1, #1
 80068a8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	0011      	movs	r1, r2
 80068b2:	0018      	movs	r0, r3
 80068b4:	f006 fdc2 	bl	800d43c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	23a4      	movs	r3, #164	@ 0xa4
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	2100      	movs	r1, #0
 80068c0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	000a      	movs	r2, r1
 80068d6:	1cfb      	adds	r3, r7, #3
 80068d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068da:	1cfb      	adds	r3, r7, #3
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	220f      	movs	r2, #15
 80068e0:	4013      	ands	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	7912      	ldrb	r2, [r2, #4]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d901      	bls.n	80068ee <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e048      	b.n	8006980 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068ee:	1cfb      	adds	r3, r7, #3
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da0f      	bge.n	8006918 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068f8:	1cfb      	adds	r3, r7, #3
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2207      	movs	r2, #7
 80068fe:	401a      	ands	r2, r3
 8006900:	0013      	movs	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	189b      	adds	r3, r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	3310      	adds	r3, #16
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	18d3      	adds	r3, r2, r3
 800690e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	705a      	strb	r2, [r3, #1]
 8006916:	e00f      	b.n	8006938 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006918:	1cfb      	adds	r3, r7, #3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2207      	movs	r2, #7
 800691e:	401a      	ands	r2, r3
 8006920:	0013      	movs	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	189b      	adds	r3, r3, r2
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	3351      	adds	r3, #81	@ 0x51
 800692a:	33ff      	adds	r3, #255	@ 0xff
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	18d3      	adds	r3, r2, r3
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800693e:	1cfb      	adds	r3, r7, #3
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2207      	movs	r2, #7
 8006944:	4013      	ands	r3, r2
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	23a4      	movs	r3, #164	@ 0xa4
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	5cd3      	ldrb	r3, [r2, r3]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_PCD_EP_ClrStall+0x90>
 8006958:	2302      	movs	r3, #2
 800695a:	e011      	b.n	8006980 <HAL_PCD_EP_ClrStall+0xb4>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	23a4      	movs	r3, #164	@ 0xa4
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	2101      	movs	r1, #1
 8006964:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	0011      	movs	r1, r2
 800696e:	0018      	movs	r0, r3
 8006970:	f006 fda6 	bl	800d4c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	23a4      	movs	r3, #164	@ 0xa4
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	2100      	movs	r1, #0
 800697c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	0018      	movs	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	b004      	add	sp, #16
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006988:	b5b0      	push	{r4, r5, r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	000a      	movs	r2, r1
 8006992:	1cfb      	adds	r3, r7, #3
 8006994:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006996:	1cfb      	adds	r3, r7, #3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b25b      	sxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	da0c      	bge.n	80069ba <HAL_PCD_EP_Abort+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069a0:	1cfb      	adds	r3, r7, #3
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2207      	movs	r2, #7
 80069a6:	401a      	ands	r2, r3
 80069a8:	0013      	movs	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	189b      	adds	r3, r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	3310      	adds	r3, #16
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	18d3      	adds	r3, r2, r3
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e00c      	b.n	80069d4 <HAL_PCD_EP_Abort+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069ba:	1cfb      	adds	r3, r7, #3
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2207      	movs	r2, #7
 80069c0:	401a      	ands	r2, r3
 80069c2:	0013      	movs	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	189b      	adds	r3, r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	3351      	adds	r3, #81	@ 0x51
 80069cc:	33ff      	adds	r3, #255	@ 0xff
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	18d3      	adds	r3, r2, r3
 80069d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	250b      	movs	r5, #11
 80069da:	197c      	adds	r4, r7, r5
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	0011      	movs	r1, r2
 80069e0:	0018      	movs	r0, r3
 80069e2:	f006 fdf9 	bl	800d5d8 <USB_EPStopXfer>
 80069e6:	0003      	movs	r3, r0
 80069e8:	7023      	strb	r3, [r4, #0]

  return ret;
 80069ea:	197b      	adds	r3, r7, r5
 80069ec:	781b      	ldrb	r3, [r3, #0]
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b004      	add	sp, #16
 80069f4:	bdb0      	pop	{r4, r5, r7, pc}

080069f6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	000a      	movs	r2, r1
 8006a00:	1cfb      	adds	r3, r7, #3
 8006a02:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	23a4      	movs	r3, #164	@ 0xa4
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	5cd3      	ldrb	r3, [r2, r3]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_PCD_EP_Flush+0x1e>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e01f      	b.n	8006a54 <HAL_PCD_EP_Flush+0x5e>
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	23a4      	movs	r3, #164	@ 0xa4
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	54d1      	strb	r1, [r2, r3]

  if ((ep_addr & 0x80U) == 0x80U)
 8006a1e:	1cfb      	adds	r3, r7, #3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da0a      	bge.n	8006a3e <HAL_PCD_EP_Flush+0x48>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	1cfb      	adds	r3, r7, #3
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2107      	movs	r1, #7
 8006a32:	400b      	ands	r3, r1
 8006a34:	0019      	movs	r1, r3
 8006a36:	0010      	movs	r0, r2
 8006a38:	f005 f99b 	bl	800bd72 <USB_FlushTxFifo>
 8006a3c:	e004      	b.n	8006a48 <HAL_PCD_EP_Flush+0x52>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	0018      	movs	r0, r3
 8006a44:	f005 f99f 	bl	800bd86 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	23a4      	movs	r3, #164	@ 0xa4
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	2100      	movs	r1, #0
 8006a50:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006a5c:	b5b0      	push	{r4, r5, r7, lr}
 8006a5e:	b08e      	sub	sp, #56	@ 0x38
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a64:	e316      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a6c:	201a      	movs	r0, #26
 8006a6e:	183b      	adds	r3, r7, r0
 8006a70:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8006a72:	183b      	adds	r3, r7, r0
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	2419      	movs	r4, #25
 8006a7a:	193b      	adds	r3, r7, r4
 8006a7c:	210f      	movs	r1, #15
 8006a7e:	400a      	ands	r2, r1
 8006a80:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8006a82:	193b      	adds	r3, r7, r4
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d000      	beq.n	8006a8c <PCD_EP_ISR_Handler+0x30>
 8006a8a:	e0eb      	b.n	8006c64 <PCD_EP_ISR_Handler+0x208>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a8c:	183b      	adds	r3, r7, r0
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	2210      	movs	r2, #16
 8006a92:	4013      	ands	r3, r2
 8006a94:	d140      	bne.n	8006b18 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4ae1      	ldr	r2, [pc, #900]	@ (8006e24 <PCD_EP_ISR_Handler+0x3c8>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	2180      	movs	r1, #128	@ 0x80
 8006aaa:	0209      	lsls	r1, r1, #8
 8006aac:	430a      	orrs	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3310      	adds	r3, #16
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4ada      	ldr	r2, [pc, #872]	@ (8006e28 <PCD_EP_ISR_Handler+0x3cc>)
 8006abe:	4694      	mov	ip, r2
 8006ac0:	4463      	add	r3, ip
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	059b      	lsls	r3, r3, #22
 8006ac8:	0d9a      	lsrs	r2, r3, #22
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006acc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	18d2      	adds	r2, r2, r3
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ada:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f00a faeb 	bl	80110bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7b1b      	ldrb	r3, [r3, #12]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d100      	bne.n	8006af2 <PCD_EP_ISR_Handler+0x96>
 8006af0:	e2d0      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
 8006af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d000      	beq.n	8006afc <PCD_EP_ISR_Handler+0xa0>
 8006afa:	e2cb      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2280      	movs	r2, #128	@ 0x80
 8006b04:	4252      	negs	r2, r2
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	731a      	strb	r2, [r3, #12]
 8006b16:	e2bd      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3351      	adds	r3, #81	@ 0x51
 8006b1c:	33ff      	adds	r3, #255	@ 0xff
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	2132      	movs	r1, #50	@ 0x32
 8006b28:	187b      	adds	r3, r7, r1
 8006b2a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006b2c:	187b      	adds	r3, r7, r1
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	4013      	ands	r3, r2
 8006b36:	d029      	beq.n	8006b8c <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	0019      	movs	r1, r3
 8006b42:	0010      	movs	r0, r2
 8006b44:	f7ff fa3e 	bl	8005fc4 <PCD_GET_EP_RX_CNT>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	22a6      	movs	r2, #166	@ 0xa6
 8006b58:	0092      	lsls	r2, r2, #2
 8006b5a:	1899      	adds	r1, r3, r2
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f006 fe67 	bl	800d838 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4aae      	ldr	r2, [pc, #696]	@ (8006e2c <PCD_EP_ISR_Handler+0x3d0>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	2180      	movs	r1, #128	@ 0x80
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f00a fa0d 	bl	8010fa4 <HAL_PCD_SetupStageCallback>
 8006b8a:	e283      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8006b8c:	2332      	movs	r3, #50	@ 0x32
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	2200      	movs	r2, #0
 8006b92:	5e9b      	ldrsh	r3, [r3, r2]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db00      	blt.n	8006b9a <PCD_EP_ISR_Handler+0x13e>
 8006b98:	e27c      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4aa2      	ldr	r2, [pc, #648]	@ (8006e2c <PCD_EP_ISR_Handler+0x3d0>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bac:	2180      	movs	r1, #128	@ 0x80
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	0019      	movs	r1, r3
 8006bbc:	0010      	movs	r0, r2
 8006bbe:	f7ff fa01 	bl	8005fc4 <PCD_GET_EP_RX_CNT>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01a      	beq.n	8006c08 <PCD_EP_ISR_Handler+0x1ac>
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d016      	beq.n	8006c08 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be0:	6959      	ldr	r1, [r3, #20]
 8006be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f006 fe24 	bl	800d838 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	18d2      	adds	r2, r2, r3
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2100      	movs	r1, #0
 8006c02:	0018      	movs	r0, r3
 8006c04:	f00a fb20 	bl	8011248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	2132      	movs	r1, #50	@ 0x32
 8006c10:	187b      	adds	r3, r7, r1
 8006c12:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006c14:	187b      	adds	r3, r7, r1
 8006c16:	881a      	ldrh	r2, [r3, #0]
 8006c18:	2380      	movs	r3, #128	@ 0x80
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d000      	beq.n	8006c22 <PCD_EP_ISR_Handler+0x1c6>
 8006c20:	e238      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
 8006c22:	187b      	adds	r3, r7, r1
 8006c24:	881a      	ldrh	r2, [r3, #0]
 8006c26:	23c0      	movs	r3, #192	@ 0xc0
 8006c28:	019b      	lsls	r3, r3, #6
 8006c2a:	401a      	ands	r2, r3
 8006c2c:	23c0      	movs	r3, #192	@ 0xc0
 8006c2e:	019b      	lsls	r3, r3, #6
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d100      	bne.n	8006c36 <PCD_EP_ISR_Handler+0x1da>
 8006c34:	e22e      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a7c      	ldr	r2, [pc, #496]	@ (8006e30 <PCD_EP_ISR_Handler+0x3d4>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2280      	movs	r2, #128	@ 0x80
 8006c46:	0152      	lsls	r2, r2, #5
 8006c48:	4053      	eors	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2280      	movs	r2, #128	@ 0x80
 8006c50:	0192      	lsls	r2, r2, #6
 8006c52:	4053      	eors	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4975      	ldr	r1, [pc, #468]	@ (8006e34 <PCD_EP_ISR_Handler+0x3d8>)
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	e217      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	001a      	movs	r2, r3
 8006c6a:	2119      	movs	r1, #25
 8006c6c:	187b      	adds	r3, r7, r1
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	18d3      	adds	r3, r2, r3
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	2032      	movs	r0, #50	@ 0x32
 8006c78:	183b      	adds	r3, r7, r0
 8006c7a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8006c7c:	183b      	adds	r3, r7, r0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	5e9b      	ldrsh	r3, [r3, r2]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	db00      	blt.n	8006c88 <PCD_EP_ISR_Handler+0x22c>
 8006c86:	e0e2      	b.n	8006e4e <PCD_EP_ISR_Handler+0x3f2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	001a      	movs	r2, r3
 8006c8e:	187b      	adds	r3, r7, r1
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	18d3      	adds	r3, r2, r3
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a64      	ldr	r2, [pc, #400]	@ (8006e2c <PCD_EP_ISR_Handler+0x3d0>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	623b      	str	r3, [r7, #32]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	001a      	movs	r2, r3
 8006ca4:	0008      	movs	r0, r1
 8006ca6:	187b      	adds	r3, r7, r1
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	18d3      	adds	r3, r2, r3
 8006cae:	6a3a      	ldr	r2, [r7, #32]
 8006cb0:	2180      	movs	r1, #128	@ 0x80
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006cb6:	183b      	adds	r3, r7, r0
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	0013      	movs	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	3351      	adds	r3, #81	@ 0x51
 8006cc4:	33ff      	adds	r3, #255	@ 0xff
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	18d3      	adds	r3, r2, r3
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cce:	7b1b      	ldrb	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d11c      	bne.n	8006d0e <PCD_EP_ISR_Handler+0x2b2>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2528      	movs	r5, #40	@ 0x28
 8006cde:	197c      	adds	r4, r7, r5
 8006ce0:	0019      	movs	r1, r3
 8006ce2:	0010      	movs	r0, r2
 8006ce4:	f7ff f96e 	bl	8005fc4 <PCD_GET_EP_RX_CNT>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8006cec:	002c      	movs	r4, r5
 8006cee:	193b      	adds	r3, r7, r4
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d100      	bne.n	8006cf8 <PCD_EP_ISR_Handler+0x29c>
 8006cf6:	e074      	b.n	8006de2 <PCD_EP_ISR_Handler+0x386>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfe:	6959      	ldr	r1, [r3, #20]
 8006d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d02:	88da      	ldrh	r2, [r3, #6]
 8006d04:	193b      	adds	r3, r7, r4
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	f006 fd96 	bl	800d838 <USB_ReadPMA>
 8006d0c:	e069      	b.n	8006de2 <PCD_EP_ISR_Handler+0x386>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d10:	78db      	ldrb	r3, [r3, #3]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d10c      	bne.n	8006d30 <PCD_EP_ISR_Handler+0x2d4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006d16:	2328      	movs	r3, #40	@ 0x28
 8006d18:	18fc      	adds	r4, r7, r3
 8006d1a:	2332      	movs	r3, #50	@ 0x32
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f9c7 	bl	80070b8 <HAL_PCD_EP_DB_Receive>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	8023      	strh	r3, [r4, #0]
 8006d2e:	e058      	b.n	8006de2 <PCD_EP_ISR_Handler+0x386>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	001a      	movs	r2, r3
 8006d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	18d3      	adds	r3, r2, r3
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a3d      	ldr	r2, [pc, #244]	@ (8006e38 <PCD_EP_ISR_Handler+0x3dc>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	18d3      	adds	r3, r2, r3
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	4939      	ldr	r1, [pc, #228]	@ (8006e3c <PCD_EP_ISR_Handler+0x3e0>)
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	001a      	movs	r2, r3
 8006d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18d3      	adds	r3, r2, r3
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	2380      	movs	r3, #128	@ 0x80
 8006d6e:	01db      	lsls	r3, r3, #7
 8006d70:	4013      	ands	r3, r2
 8006d72:	d01b      	beq.n	8006dac <PCD_EP_ISR_Handler+0x350>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2528      	movs	r5, #40	@ 0x28
 8006d7e:	197c      	adds	r4, r7, r5
 8006d80:	0019      	movs	r1, r3
 8006d82:	0010      	movs	r0, r2
 8006d84:	f7ff f940 	bl	8006008 <PCD_GET_EP_DBUF0_CNT>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8006d8c:	002c      	movs	r4, r5
 8006d8e:	193b      	adds	r3, r7, r4
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d025      	beq.n	8006de2 <PCD_EP_ISR_Handler+0x386>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9c:	6959      	ldr	r1, [r3, #20]
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	891a      	ldrh	r2, [r3, #8]
 8006da2:	193b      	adds	r3, r7, r4
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	f006 fd47 	bl	800d838 <USB_ReadPMA>
 8006daa:	e01a      	b.n	8006de2 <PCD_EP_ISR_Handler+0x386>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2528      	movs	r5, #40	@ 0x28
 8006db6:	197c      	adds	r4, r7, r5
 8006db8:	0019      	movs	r1, r3
 8006dba:	0010      	movs	r0, r2
 8006dbc:	f7ff f946 	bl	800604c <PCD_GET_EP_DBUF1_CNT>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8006dc4:	002c      	movs	r4, r5
 8006dc6:	193b      	adds	r3, r7, r4
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <PCD_EP_ISR_Handler+0x386>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd4:	6959      	ldr	r1, [r3, #20]
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd8:	895a      	ldrh	r2, [r3, #10]
 8006dda:	193b      	adds	r3, r7, r4
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	f006 fd2b 	bl	800d838 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de4:	69da      	ldr	r2, [r3, #28]
 8006de6:	2128      	movs	r1, #40	@ 0x28
 8006de8:	187b      	adds	r3, r7, r1
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	18d2      	adds	r2, r2, r3
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df4:	695a      	ldr	r2, [r3, #20]
 8006df6:	187b      	adds	r3, r7, r1
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	18d2      	adds	r2, r2, r3
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <PCD_EP_ISR_Handler+0x3b8>
 8006e08:	187b      	adds	r3, r7, r1
 8006e0a:	881a      	ldrh	r2, [r3, #0]
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d215      	bcs.n	8006e40 <PCD_EP_ISR_Handler+0x3e4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	0011      	movs	r1, r2
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f00a fa13 	bl	8011248 <HAL_PCD_DataOutStageCallback>
 8006e22:	e014      	b.n	8006e4e <PCD_EP_ISR_Handler+0x3f2>
 8006e24:	07ff8f0f 	.word	0x07ff8f0f
 8006e28:	40009800 	.word	0x40009800
 8006e2c:	07ff0f8f 	.word	0x07ff0f8f
 8006e30:	07ffbf8f 	.word	0x07ffbf8f
 8006e34:	00008080 	.word	0x00008080
 8006e38:	07ff8f8f 	.word	0x07ff8f8f
 8006e3c:	000080c0 	.word	0x000080c0
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e46:	0011      	movs	r1, r2
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f005 fd71 	bl	800c930 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8006e4e:	2032      	movs	r0, #50	@ 0x32
 8006e50:	183b      	adds	r3, r7, r0
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	2280      	movs	r2, #128	@ 0x80
 8006e56:	4013      	ands	r3, r2
 8006e58:	d100      	bne.n	8006e5c <PCD_EP_ISR_Handler+0x400>
 8006e5a:	e11b      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
      {
        ep = &hpcd->IN_ep[epindex];
 8006e5c:	2119      	movs	r1, #25
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	0013      	movs	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	3310      	adds	r3, #16
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	18d3      	adds	r3, r2, r3
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	001a      	movs	r2, r3
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	18d3      	adds	r3, r2, r3
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a8b      	ldr	r2, [pc, #556]	@ (80070b0 <PCD_EP_ISR_Handler+0x654>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	001a      	movs	r2, r3
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	18d3      	adds	r3, r2, r3
 8006e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e98:	2180      	movs	r1, #128	@ 0x80
 8006e9a:	0209      	lsls	r1, r1, #8
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea2:	78db      	ldrb	r3, [r3, #3]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d000      	beq.n	8006eaa <PCD_EP_ISR_Handler+0x44e>
 8006ea8:	e0a3      	b.n	8006ff2 <PCD_EP_ISR_Handler+0x596>
        {
          ep->xfer_len = 0U;
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	2200      	movs	r2, #0
 8006eae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb2:	7b1b      	ldrb	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d100      	bne.n	8006eba <PCD_EP_ISR_Handler+0x45e>
 8006eb8:	e093      	b.n	8006fe2 <PCD_EP_ISR_Handler+0x586>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006eba:	183b      	adds	r3, r7, r0
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	2240      	movs	r2, #64	@ 0x40
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	d047      	beq.n	8006f54 <PCD_EP_ISR_Handler+0x4f8>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d121      	bne.n	8006f10 <PCD_EP_ISR_Handler+0x4b4>
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4a78      	ldr	r2, [pc, #480]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006ed4:	4694      	mov	ip, r2
 8006ed6:	4463      	add	r3, ip
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4974      	ldr	r1, [pc, #464]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006ee2:	468c      	mov	ip, r1
 8006ee4:	4463      	add	r3, ip
 8006ee6:	0192      	lsls	r2, r2, #6
 8006ee8:	0992      	lsrs	r2, r2, #6
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4a70      	ldr	r2, [pc, #448]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006ef4:	4694      	mov	ip, r2
 8006ef6:	4463      	add	r3, ip
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	496c      	ldr	r1, [pc, #432]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f02:	468c      	mov	ip, r1
 8006f04:	4463      	add	r3, ip
 8006f06:	2180      	movs	r1, #128	@ 0x80
 8006f08:	0609      	lsls	r1, r1, #24
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e068      	b.n	8006fe2 <PCD_EP_ISR_Handler+0x586>
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d164      	bne.n	8006fe2 <PCD_EP_ISR_Handler+0x586>
 8006f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	4a65      	ldr	r2, [pc, #404]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f20:	4694      	mov	ip, r2
 8006f22:	4463      	add	r3, ip
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4961      	ldr	r1, [pc, #388]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f2e:	468c      	mov	ip, r1
 8006f30:	4463      	add	r3, ip
 8006f32:	0412      	lsls	r2, r2, #16
 8006f34:	0c12      	lsrs	r2, r2, #16
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f40:	189a      	adds	r2, r3, r2
 8006f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	495a      	ldr	r1, [pc, #360]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f4a:	468c      	mov	ip, r1
 8006f4c:	4463      	add	r3, ip
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	e046      	b.n	8006fe2 <PCD_EP_ISR_Handler+0x586>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d121      	bne.n	8006fa0 <PCD_EP_ISR_Handler+0x544>
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4a54      	ldr	r2, [pc, #336]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f64:	4694      	mov	ip, r2
 8006f66:	4463      	add	r3, ip
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4950      	ldr	r1, [pc, #320]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f72:	468c      	mov	ip, r1
 8006f74:	4463      	add	r3, ip
 8006f76:	0192      	lsls	r2, r2, #6
 8006f78:	0992      	lsrs	r2, r2, #6
 8006f7a:	605a      	str	r2, [r3, #4]
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	4a4c      	ldr	r2, [pc, #304]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f84:	4694      	mov	ip, r2
 8006f86:	4463      	add	r3, ip
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4948      	ldr	r1, [pc, #288]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006f92:	468c      	mov	ip, r1
 8006f94:	4463      	add	r3, ip
 8006f96:	2180      	movs	r1, #128	@ 0x80
 8006f98:	0609      	lsls	r1, r1, #24
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	e020      	b.n	8006fe2 <PCD_EP_ISR_Handler+0x586>
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d11c      	bne.n	8006fe2 <PCD_EP_ISR_Handler+0x586>
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	4a41      	ldr	r2, [pc, #260]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006fb0:	4694      	mov	ip, r2
 8006fb2:	4463      	add	r3, ip
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	493d      	ldr	r1, [pc, #244]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006fbe:	468c      	mov	ip, r1
 8006fc0:	4463      	add	r3, ip
 8006fc2:	0412      	lsls	r2, r2, #16
 8006fc4:	0c12      	lsrs	r2, r2, #16
 8006fc6:	605a      	str	r2, [r3, #4]
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	4a39      	ldr	r2, [pc, #228]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006fd0:	189a      	adds	r2, r3, r2
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4936      	ldr	r1, [pc, #216]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8006fda:	468c      	mov	ip, r1
 8006fdc:	4463      	add	r3, ip
 8006fde:	6852      	ldr	r2, [r2, #4]
 8006fe0:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	0011      	movs	r1, r2
 8006fea:	0018      	movs	r0, r3
 8006fec:	f00a f866 	bl	80110bc <HAL_PCD_DataInStageCallback>
 8006ff0:	e050      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006ff2:	2332      	movs	r3, #50	@ 0x32
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	881a      	ldrh	r2, [r3, #0]
 8006ff8:	2380      	movs	r3, #128	@ 0x80
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	d141      	bne.n	8007084 <PCD_EP_ISR_Handler+0x628>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4a2b      	ldr	r2, [pc, #172]	@ (80070b4 <PCD_EP_ISR_Handler+0x658>)
 8007008:	4694      	mov	ip, r2
 800700a:	4463      	add	r3, ip
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	b29a      	uxth	r2, r3
 8007012:	212a      	movs	r1, #42	@ 0x2a
 8007014:	187b      	adds	r3, r7, r1
 8007016:	0592      	lsls	r2, r2, #22
 8007018:	0d92      	lsrs	r2, r2, #22
 800701a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800701c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701e:	699a      	ldr	r2, [r3, #24]
 8007020:	187b      	adds	r3, r7, r1
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d907      	bls.n	8007038 <PCD_EP_ISR_Handler+0x5dc>
            {
              ep->xfer_len -= TxPctSize;
 8007028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	187b      	adds	r3, r7, r1
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007034:	619a      	str	r2, [r3, #24]
 8007036:	e002      	b.n	800703e <PCD_EP_ISR_Handler+0x5e2>
            }
            else
            {
              ep->xfer_len = 0U;
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	2200      	movs	r2, #0
 800703c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800703e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <PCD_EP_ISR_Handler+0x5fa>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f00a f834 	bl	80110bc <HAL_PCD_DataInStageCallback>
 8007054:	e01e      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	212a      	movs	r1, #42	@ 0x2a
 800705c:	187b      	adds	r3, r7, r1
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	18d2      	adds	r2, r2, r3
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007064:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	187b      	adds	r3, r7, r1
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	18d2      	adds	r2, r2, r3
 8007070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007072:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800707a:	0011      	movs	r1, r2
 800707c:	0018      	movs	r0, r3
 800707e:	f005 fc57 	bl	800c930 <USB_EPStartXfer>
 8007082:	e007      	b.n	8007094 <PCD_EP_ISR_Handler+0x638>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007084:	2332      	movs	r3, #50	@ 0x32
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0018      	movs	r0, r3
 8007090:	f000 f8fc 	bl	800728c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800709a:	2380      	movs	r3, #128	@ 0x80
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	4013      	ands	r3, r2
 80070a0:	d000      	beq.n	80070a4 <PCD_EP_ISR_Handler+0x648>
 80070a2:	e4e0      	b.n	8006a66 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	0018      	movs	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b00e      	add	sp, #56	@ 0x38
 80070ac:	bdb0      	pop	{r4, r5, r7, pc}
 80070ae:	46c0      	nop			@ (mov r8, r8)
 80070b0:	07ff8f0f 	.word	0x07ff8f0f
 80070b4:	40009800 	.word	0x40009800

080070b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070b8:	b5b0      	push	{r4, r5, r7, lr}
 80070ba:	b08a      	sub	sp, #40	@ 0x28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	1dbb      	adds	r3, r7, #6
 80070c4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	2380      	movs	r3, #128	@ 0x80
 80070cc:	01db      	lsls	r3, r3, #7
 80070ce:	4013      	ands	r3, r2
 80070d0:	d067      	beq.n	80071a2 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	251e      	movs	r5, #30
 80070dc:	197c      	adds	r4, r7, r5
 80070de:	0019      	movs	r1, r3
 80070e0:	0010      	movs	r0, r2
 80070e2:	f7fe ff91 	bl	8006008 <PCD_GET_EP_DBUF0_CNT>
 80070e6:	0003      	movs	r3, r0
 80070e8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	197b      	adds	r3, r7, r5
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d307      	bcc.n	8007106 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	197b      	adds	r3, r7, r5
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	619a      	str	r2, [r3, #24]
 8007104:	e002      	b.n	800710c <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11a      	bne.n	800714a <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	001a      	movs	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	18d3      	adds	r3, r2, r3
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a55      	ldr	r2, [pc, #340]	@ (800727c <HAL_PCD_EP_DB_Receive+0x1c4>)
 8007126:	4013      	ands	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2280      	movs	r2, #128	@ 0x80
 800712e:	0192      	lsls	r2, r2, #6
 8007130:	4053      	eors	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	001a      	movs	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	18d3      	adds	r3, r2, r3
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	494e      	ldr	r1, [pc, #312]	@ (8007280 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8007146:	430a      	orrs	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800714a:	1dbb      	adds	r3, r7, #6
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	2240      	movs	r2, #64	@ 0x40
 8007150:	4013      	ands	r3, r2
 8007152:	d015      	beq.n	8007180 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	001a      	movs	r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	18d3      	adds	r3, r2, r3
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a47      	ldr	r2, [pc, #284]	@ (8007284 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007166:	4013      	ands	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	001a      	movs	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4943      	ldr	r1, [pc, #268]	@ (8007288 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800717c:	430a      	orrs	r2, r1
 800717e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007180:	241e      	movs	r4, #30
 8007182:	193b      	adds	r3, r7, r4
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d100      	bne.n	800718c <HAL_PCD_EP_DB_Receive+0xd4>
 800718a:	e070      	b.n	800726e <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6959      	ldr	r1, [r3, #20]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	891a      	ldrh	r2, [r3, #8]
 8007198:	193b      	adds	r3, r7, r4
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	f006 fb4c 	bl	800d838 <USB_ReadPMA>
 80071a0:	e065      	b.n	800726e <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	251e      	movs	r5, #30
 80071ac:	197c      	adds	r4, r7, r5
 80071ae:	0019      	movs	r1, r3
 80071b0:	0010      	movs	r0, r2
 80071b2:	f7fe ff4b 	bl	800604c <PCD_GET_EP_DBUF1_CNT>
 80071b6:	0003      	movs	r3, r0
 80071b8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	197b      	adds	r3, r7, r5
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d307      	bcc.n	80071d6 <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	197b      	adds	r3, r7, r5
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	619a      	str	r2, [r3, #24]
 80071d4:	e002      	b.n	80071dc <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11a      	bne.n	800721a <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	001a      	movs	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	18d3      	adds	r3, r2, r3
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a21      	ldr	r2, [pc, #132]	@ (800727c <HAL_PCD_EP_DB_Receive+0x1c4>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	2280      	movs	r2, #128	@ 0x80
 80071fe:	0192      	lsls	r2, r2, #6
 8007200:	4053      	eors	r3, r2
 8007202:	627b      	str	r3, [r7, #36]	@ 0x24
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	001a      	movs	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	18d3      	adds	r3, r2, r3
 8007212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007214:	491a      	ldr	r1, [pc, #104]	@ (8007280 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8007216:	430a      	orrs	r2, r1
 8007218:	601a      	str	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800721a:	1dbb      	adds	r3, r7, #6
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	2240      	movs	r2, #64	@ 0x40
 8007220:	4013      	ands	r3, r2
 8007222:	d115      	bne.n	8007250 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	001a      	movs	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	18d3      	adds	r3, r2, r3
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a13      	ldr	r2, [pc, #76]	@ (8007284 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007236:	4013      	ands	r3, r2
 8007238:	623b      	str	r3, [r7, #32]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	001a      	movs	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	18d3      	adds	r3, r2, r3
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	490f      	ldr	r1, [pc, #60]	@ (8007288 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800724c:	430a      	orrs	r2, r1
 800724e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007250:	241e      	movs	r4, #30
 8007252:	193b      	adds	r3, r7, r4
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6959      	ldr	r1, [r3, #20]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	895a      	ldrh	r2, [r3, #10]
 8007266:	193b      	adds	r3, r7, r4
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	f006 fae5 	bl	800d838 <USB_ReadPMA>
    }
  }

  return count;
 800726e:	231e      	movs	r3, #30
 8007270:	18fb      	adds	r3, r7, r3
 8007272:	881b      	ldrh	r3, [r3, #0]
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b00a      	add	sp, #40	@ 0x28
 800727a:	bdb0      	pop	{r4, r5, r7, pc}
 800727c:	07ffbf8f 	.word	0x07ffbf8f
 8007280:	00008080 	.word	0x00008080
 8007284:	07ff8f8f 	.word	0x07ff8f8f
 8007288:	000080c0 	.word	0x000080c0

0800728c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800728c:	b5b0      	push	{r4, r5, r7, lr}
 800728e:	b090      	sub	sp, #64	@ 0x40
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	1dbb      	adds	r3, r7, #6
 8007298:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800729a:	1dbb      	adds	r3, r7, #6
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	2240      	movs	r2, #64	@ 0x40
 80072a0:	4013      	ands	r3, r2
 80072a2:	d100      	bne.n	80072a6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80072a4:	e1ec      	b.n	8007680 <HAL_PCD_EP_DB_Transmit+0x3f4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	251e      	movs	r5, #30
 80072b0:	197c      	adds	r4, r7, r5
 80072b2:	0019      	movs	r1, r3
 80072b4:	0010      	movs	r0, r2
 80072b6:	f7fe fea7 	bl	8006008 <PCD_GET_EP_DBUF0_CNT>
 80072ba:	0003      	movs	r3, r0
 80072bc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	197b      	adds	r3, r7, r5
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d907      	bls.n	80072da <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	699a      	ldr	r2, [r3, #24]
 80072ce:	197b      	adds	r3, r7, r5
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	619a      	str	r2, [r3, #24]
 80072d8:	e002      	b.n	80072e0 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2200      	movs	r2, #0
 80072de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d000      	beq.n	80072ea <HAL_PCD_EP_DB_Transmit+0x5e>
 80072e8:	e0d0      	b.n	800748c <HAL_PCD_EP_DB_Transmit+0x200>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d121      	bne.n	8007336 <HAL_PCD_EP_DB_Transmit+0xaa>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4adc      	ldr	r2, [pc, #880]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80072fa:	4694      	mov	ip, r2
 80072fc:	4463      	add	r3, ip
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	49d9      	ldr	r1, [pc, #868]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007308:	468c      	mov	ip, r1
 800730a:	4463      	add	r3, ip
 800730c:	0192      	lsls	r2, r2, #6
 800730e:	0992      	lsrs	r2, r2, #6
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4ad4      	ldr	r2, [pc, #848]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800731a:	4694      	mov	ip, r2
 800731c:	4463      	add	r3, ip
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	49d1      	ldr	r1, [pc, #836]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007328:	468c      	mov	ip, r1
 800732a:	4463      	add	r3, ip
 800732c:	2180      	movs	r1, #128	@ 0x80
 800732e:	0609      	lsls	r1, r1, #24
 8007330:	430a      	orrs	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e020      	b.n	8007378 <HAL_PCD_EP_DB_Transmit+0xec>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d11c      	bne.n	8007378 <HAL_PCD_EP_DB_Transmit+0xec>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4ac9      	ldr	r2, [pc, #804]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007346:	4694      	mov	ip, r2
 8007348:	4463      	add	r3, ip
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	49c6      	ldr	r1, [pc, #792]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007354:	468c      	mov	ip, r1
 8007356:	4463      	add	r3, ip
 8007358:	0412      	lsls	r2, r2, #16
 800735a:	0c12      	lsrs	r2, r2, #16
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4ac1      	ldr	r2, [pc, #772]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007366:	189a      	adds	r2, r3, r2
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	49bf      	ldr	r1, [pc, #764]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007370:	468c      	mov	ip, r1
 8007372:	4463      	add	r3, ip
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d121      	bne.n	80073c4 <HAL_PCD_EP_DB_Transmit+0x138>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4ab9      	ldr	r2, [pc, #740]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007388:	4694      	mov	ip, r2
 800738a:	4463      	add	r3, ip
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	49b5      	ldr	r1, [pc, #724]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007396:	468c      	mov	ip, r1
 8007398:	4463      	add	r3, ip
 800739a:	0192      	lsls	r2, r2, #6
 800739c:	0992      	lsrs	r2, r2, #6
 800739e:	605a      	str	r2, [r3, #4]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	4ab1      	ldr	r2, [pc, #708]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80073a8:	4694      	mov	ip, r2
 80073aa:	4463      	add	r3, ip
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	49ad      	ldr	r1, [pc, #692]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80073b6:	468c      	mov	ip, r1
 80073b8:	4463      	add	r3, ip
 80073ba:	2180      	movs	r1, #128	@ 0x80
 80073bc:	0609      	lsls	r1, r1, #24
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e020      	b.n	8007406 <HAL_PCD_EP_DB_Transmit+0x17a>
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d11c      	bne.n	8007406 <HAL_PCD_EP_DB_Transmit+0x17a>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	4aa6      	ldr	r2, [pc, #664]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80073d4:	4694      	mov	ip, r2
 80073d6:	4463      	add	r3, ip
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	49a2      	ldr	r1, [pc, #648]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80073e2:	468c      	mov	ip, r1
 80073e4:	4463      	add	r3, ip
 80073e6:	0412      	lsls	r2, r2, #16
 80073e8:	0c12      	lsrs	r2, r2, #16
 80073ea:	605a      	str	r2, [r3, #4]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4a9e      	ldr	r2, [pc, #632]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80073f4:	189a      	adds	r2, r3, r2
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	499b      	ldr	r1, [pc, #620]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80073fe:	468c      	mov	ip, r1
 8007400:	4463      	add	r3, ip
 8007402:	6852      	ldr	r2, [r2, #4]
 8007404:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	78db      	ldrb	r3, [r3, #3]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d119      	bne.n	8007442 <HAL_PCD_EP_DB_Transmit+0x1b6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	001a      	movs	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	18d3      	adds	r3, r2, r3
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a94      	ldr	r2, [pc, #592]	@ (8007670 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8007420:	4013      	ands	r3, r2
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007426:	2220      	movs	r2, #32
 8007428:	4053      	eors	r3, r2
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	001a      	movs	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	18d3      	adds	r3, r2, r3
 800743a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800743c:	498d      	ldr	r1, [pc, #564]	@ (8007674 <HAL_PCD_EP_DB_Transmit+0x3e8>)
 800743e:	430a      	orrs	r2, r1
 8007440:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	0011      	movs	r1, r2
 800744a:	0018      	movs	r0, r3
 800744c:	f009 fe36 	bl	80110bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007450:	1dbb      	adds	r3, r7, #6
 8007452:	881a      	ldrh	r2, [r3, #0]
 8007454:	2380      	movs	r3, #128	@ 0x80
 8007456:	01db      	lsls	r3, r3, #7
 8007458:	4013      	ands	r3, r2
 800745a:	d015      	beq.n	8007488 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	001a      	movs	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a82      	ldr	r2, [pc, #520]	@ (8007678 <HAL_PCD_EP_DB_Transmit+0x3ec>)
 800746e:	4013      	ands	r3, r2
 8007470:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	001a      	movs	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	18d3      	adds	r3, r2, r3
 8007480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007482:	497e      	ldr	r1, [pc, #504]	@ (800767c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8007484:	430a      	orrs	r2, r1
 8007486:	601a      	str	r2, [r3, #0]
      }

      return HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	e303      	b.n	8007a94 <HAL_PCD_EP_DB_Transmit+0x808>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	2380      	movs	r3, #128	@ 0x80
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	4013      	ands	r3, r2
 8007496:	d015      	beq.n	80074c4 <HAL_PCD_EP_DB_Transmit+0x238>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	001a      	movs	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	18d3      	adds	r3, r2, r3
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a73      	ldr	r2, [pc, #460]	@ (8007678 <HAL_PCD_EP_DB_Transmit+0x3ec>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	001a      	movs	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074be:	496f      	ldr	r1, [pc, #444]	@ (800767c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80074c0:	430a      	orrs	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2224      	movs	r2, #36	@ 0x24
 80074c8:	5c9b      	ldrb	r3, [r3, r2]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d000      	beq.n	80074d0 <HAL_PCD_EP_DB_Transmit+0x244>
 80074ce:	e2c2      	b.n	8007a56 <HAL_PCD_EP_DB_Transmit+0x7ca>
      {
        ep->xfer_buff += TxPctSize;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	211e      	movs	r1, #30
 80074d6:	187b      	adds	r3, r7, r1
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	18d2      	adds	r2, r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	18d2      	adds	r2, r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d309      	bcc.n	800750e <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	1ad2      	subs	r2, r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	621a      	str	r2, [r3, #32]
 800750c:	e016      	b.n	800753c <HAL_PCD_EP_DB_Transmit+0x2b0>
        }
        else if (ep->xfer_len_db == 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d108      	bne.n	8007528 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxPctSize;
 8007516:	231e      	movs	r3, #30
 8007518:	18fb      	adds	r3, r7, r3
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2224      	movs	r2, #36	@ 0x24
 8007522:	2100      	movs	r1, #0
 8007524:	5499      	strb	r1, [r3, r2]
 8007526:	e009      	b.n	800753c <HAL_PCD_EP_DB_Transmit+0x2b0>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2224      	movs	r2, #36	@ 0x24
 800752c:	2100      	movs	r1, #0
 800752e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2200      	movs	r2, #0
 800753a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d162      	bne.n	800760a <HAL_PCD_EP_DB_Transmit+0x37e>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	4a48      	ldr	r2, [pc, #288]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800754c:	4694      	mov	ip, r2
 800754e:	4463      	add	r3, ip
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4944      	ldr	r1, [pc, #272]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800755a:	468c      	mov	ip, r1
 800755c:	4463      	add	r3, ip
 800755e:	0192      	lsls	r2, r2, #6
 8007560:	0992      	lsrs	r2, r2, #6
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d111      	bne.n	800758e <HAL_PCD_EP_DB_Transmit+0x302>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4a3e      	ldr	r2, [pc, #248]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007572:	4694      	mov	ip, r2
 8007574:	4463      	add	r3, ip
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	493b      	ldr	r1, [pc, #236]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007580:	468c      	mov	ip, r1
 8007582:	4463      	add	r3, ip
 8007584:	2180      	movs	r1, #128	@ 0x80
 8007586:	0609      	lsls	r1, r1, #24
 8007588:	430a      	orrs	r2, r1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e062      	b.n	8007654 <HAL_PCD_EP_DB_Transmit+0x3c8>
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	2b3e      	cmp	r3, #62	@ 0x3e
 8007592:	d81b      	bhi.n	80075cc <HAL_PCD_EP_DB_Transmit+0x340>
 8007594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	633b      	str	r3, [r7, #48]	@ 0x30
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	2201      	movs	r2, #1
 800759e:	4013      	ands	r3, r2
 80075a0:	d002      	beq.n	80075a8 <HAL_PCD_EP_DB_Transmit+0x31c>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	3301      	adds	r3, #1
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	4a2f      	ldr	r2, [pc, #188]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80075b0:	4694      	mov	ip, r2
 80075b2:	4463      	add	r3, ip
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	069a      	lsls	r2, r3, #26
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	482a      	ldr	r0, [pc, #168]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80075c2:	4684      	mov	ip, r0
 80075c4:	4463      	add	r3, ip
 80075c6:	430a      	orrs	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e043      	b.n	8007654 <HAL_PCD_EP_DB_Transmit+0x3c8>
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	221f      	movs	r2, #31
 80075d6:	4013      	ands	r3, r2
 80075d8:	d102      	bne.n	80075e0 <HAL_PCD_EP_DB_Transmit+0x354>
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	3b01      	subs	r3, #1
 80075de:	633b      	str	r3, [r7, #48]	@ 0x30
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4a21      	ldr	r2, [pc, #132]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80075e8:	4694      	mov	ip, r2
 80075ea:	4463      	add	r3, ip
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	069b      	lsls	r3, r3, #26
 80075f2:	431a      	orrs	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	491c      	ldr	r1, [pc, #112]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80075fc:	468c      	mov	ip, r1
 80075fe:	4463      	add	r3, ip
 8007600:	2180      	movs	r1, #128	@ 0x80
 8007602:	0609      	lsls	r1, r1, #24
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e024      	b.n	8007654 <HAL_PCD_EP_DB_Transmit+0x3c8>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d120      	bne.n	8007654 <HAL_PCD_EP_DB_Transmit+0x3c8>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4a14      	ldr	r2, [pc, #80]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800761a:	4694      	mov	ip, r2
 800761c:	4463      	add	r3, ip
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	4911      	ldr	r1, [pc, #68]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007628:	468c      	mov	ip, r1
 800762a:	4463      	add	r3, ip
 800762c:	0412      	lsls	r2, r2, #16
 800762e:	0c12      	lsrs	r2, r2, #16
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4a0c      	ldr	r2, [pc, #48]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800763a:	4694      	mov	ip, r2
 800763c:	4463      	add	r3, ip
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	041a      	lsls	r2, r3, #16
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4808      	ldr	r0, [pc, #32]	@ (800766c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800764c:	4684      	mov	ip, r0
 800764e:	4463      	add	r3, ip
 8007650:	430a      	orrs	r2, r1
 8007652:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6959      	ldr	r1, [r3, #20]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	891a      	ldrh	r2, [r3, #8]
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	b29b      	uxth	r3, r3
 8007664:	f006 f872 	bl	800d74c <USB_WritePMA>
 8007668:	e1f5      	b.n	8007a56 <HAL_PCD_EP_DB_Transmit+0x7ca>
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	40009800 	.word	0x40009800
 8007670:	07ff8fbf 	.word	0x07ff8fbf
 8007674:	00008080 	.word	0x00008080
 8007678:	07ff8f8f 	.word	0x07ff8f8f
 800767c:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	251e      	movs	r5, #30
 800768a:	197c      	adds	r4, r7, r5
 800768c:	0019      	movs	r1, r3
 800768e:	0010      	movs	r0, r2
 8007690:	f7fe fcdc 	bl	800604c <PCD_GET_EP_DBUF1_CNT>
 8007694:	0003      	movs	r3, r0
 8007696:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	197b      	adds	r3, r7, r5
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d307      	bcc.n	80076b4 <HAL_PCD_EP_DB_Transmit+0x428>
    {
      ep->xfer_len -= TxPctSize;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	197b      	adds	r3, r7, r5
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	1ad2      	subs	r2, r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	619a      	str	r2, [r3, #24]
 80076b2:	e002      	b.n	80076ba <HAL_PCD_EP_DB_Transmit+0x42e>
    }
    else
    {
      ep->xfer_len = 0U;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d000      	beq.n	80076c4 <HAL_PCD_EP_DB_Transmit+0x438>
 80076c2:	e0d0      	b.n	8007866 <HAL_PCD_EP_DB_Transmit+0x5da>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d121      	bne.n	8007710 <HAL_PCD_EP_DB_Transmit+0x484>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4ac4      	ldr	r2, [pc, #784]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80076d4:	4694      	mov	ip, r2
 80076d6:	4463      	add	r3, ip
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	49c0      	ldr	r1, [pc, #768]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80076e2:	468c      	mov	ip, r1
 80076e4:	4463      	add	r3, ip
 80076e6:	0192      	lsls	r2, r2, #6
 80076e8:	0992      	lsrs	r2, r2, #6
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4abc      	ldr	r2, [pc, #752]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80076f4:	4694      	mov	ip, r2
 80076f6:	4463      	add	r3, ip
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	49b8      	ldr	r1, [pc, #736]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007702:	468c      	mov	ip, r1
 8007704:	4463      	add	r3, ip
 8007706:	2180      	movs	r1, #128	@ 0x80
 8007708:	0609      	lsls	r1, r1, #24
 800770a:	430a      	orrs	r2, r1
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e020      	b.n	8007752 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d11c      	bne.n	8007752 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4ab1      	ldr	r2, [pc, #708]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007720:	4694      	mov	ip, r2
 8007722:	4463      	add	r3, ip
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	49ad      	ldr	r1, [pc, #692]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 800772e:	468c      	mov	ip, r1
 8007730:	4463      	add	r3, ip
 8007732:	0412      	lsls	r2, r2, #16
 8007734:	0c12      	lsrs	r2, r2, #16
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4aa9      	ldr	r2, [pc, #676]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007740:	189a      	adds	r2, r3, r2
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	49a6      	ldr	r1, [pc, #664]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 800774a:	468c      	mov	ip, r1
 800774c:	4463      	add	r3, ip
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d121      	bne.n	800779e <HAL_PCD_EP_DB_Transmit+0x512>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4aa0      	ldr	r2, [pc, #640]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007762:	4694      	mov	ip, r2
 8007764:	4463      	add	r3, ip
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	499d      	ldr	r1, [pc, #628]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007770:	468c      	mov	ip, r1
 8007772:	4463      	add	r3, ip
 8007774:	0192      	lsls	r2, r2, #6
 8007776:	0992      	lsrs	r2, r2, #6
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4a98      	ldr	r2, [pc, #608]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007782:	4694      	mov	ip, r2
 8007784:	4463      	add	r3, ip
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4995      	ldr	r1, [pc, #596]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007790:	468c      	mov	ip, r1
 8007792:	4463      	add	r3, ip
 8007794:	2180      	movs	r1, #128	@ 0x80
 8007796:	0609      	lsls	r1, r1, #24
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	e020      	b.n	80077e0 <HAL_PCD_EP_DB_Transmit+0x554>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d11c      	bne.n	80077e0 <HAL_PCD_EP_DB_Transmit+0x554>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4a8d      	ldr	r2, [pc, #564]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80077ae:	4694      	mov	ip, r2
 80077b0:	4463      	add	r3, ip
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	498a      	ldr	r1, [pc, #552]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80077bc:	468c      	mov	ip, r1
 80077be:	4463      	add	r3, ip
 80077c0:	0412      	lsls	r2, r2, #16
 80077c2:	0c12      	lsrs	r2, r2, #16
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4a85      	ldr	r2, [pc, #532]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80077ce:	189a      	adds	r2, r3, r2
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4983      	ldr	r1, [pc, #524]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80077d8:	468c      	mov	ip, r1
 80077da:	4463      	add	r3, ip
 80077dc:	6852      	ldr	r2, [r2, #4]
 80077de:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	78db      	ldrb	r3, [r3, #3]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d119      	bne.n	800781c <HAL_PCD_EP_DB_Transmit+0x590>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	001a      	movs	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	18d3      	adds	r3, r2, r3
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a7b      	ldr	r2, [pc, #492]	@ (80079e8 <HAL_PCD_EP_DB_Transmit+0x75c>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	2220      	movs	r2, #32
 8007802:	4053      	eors	r3, r2
 8007804:	627b      	str	r3, [r7, #36]	@ 0x24
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	001a      	movs	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	18d3      	adds	r3, r2, r3
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	4975      	ldr	r1, [pc, #468]	@ (80079ec <HAL_PCD_EP_DB_Transmit+0x760>)
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	0011      	movs	r1, r2
 8007824:	0018      	movs	r0, r3
 8007826:	f009 fc49 	bl	80110bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800782a:	1dbb      	adds	r3, r7, #6
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	2380      	movs	r3, #128	@ 0x80
 8007830:	01db      	lsls	r3, r3, #7
 8007832:	4013      	ands	r3, r2
 8007834:	d115      	bne.n	8007862 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	001a      	movs	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	18d3      	adds	r3, r2, r3
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a6a      	ldr	r2, [pc, #424]	@ (80079f0 <HAL_PCD_EP_DB_Transmit+0x764>)
 8007848:	4013      	ands	r3, r2
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	001a      	movs	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	18d3      	adds	r3, r2, r3
 800785a:	6a3a      	ldr	r2, [r7, #32]
 800785c:	4965      	ldr	r1, [pc, #404]	@ (80079f4 <HAL_PCD_EP_DB_Transmit+0x768>)
 800785e:	430a      	orrs	r2, r1
 8007860:	601a      	str	r2, [r3, #0]
      }

      return HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e116      	b.n	8007a94 <HAL_PCD_EP_DB_Transmit+0x808>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007866:	1dbb      	adds	r3, r7, #6
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	01db      	lsls	r3, r3, #7
 800786e:	4013      	ands	r3, r2
 8007870:	d115      	bne.n	800789e <HAL_PCD_EP_DB_Transmit+0x612>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	001a      	movs	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	18d3      	adds	r3, r2, r3
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a5b      	ldr	r2, [pc, #364]	@ (80079f0 <HAL_PCD_EP_DB_Transmit+0x764>)
 8007884:	4013      	ands	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	001a      	movs	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	18d3      	adds	r3, r2, r3
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4956      	ldr	r1, [pc, #344]	@ (80079f4 <HAL_PCD_EP_DB_Transmit+0x768>)
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2224      	movs	r2, #36	@ 0x24
 80078a2:	5c9b      	ldrb	r3, [r3, r2]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d000      	beq.n	80078aa <HAL_PCD_EP_DB_Transmit+0x61e>
 80078a8:	e0d5      	b.n	8007a56 <HAL_PCD_EP_DB_Transmit+0x7ca>
      {
        ep->xfer_buff += TxPctSize;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	695a      	ldr	r2, [r3, #20]
 80078ae:	211e      	movs	r1, #30
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	18d2      	adds	r2, r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	69da      	ldr	r2, [r3, #28]
 80078be:	187b      	adds	r3, r7, r1
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	18d2      	adds	r2, r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6a1a      	ldr	r2, [r3, #32]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d309      	bcc.n	80078e8 <HAL_PCD_EP_DB_Transmit+0x65c>
        {
          len = ep->maxpacket;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6a1a      	ldr	r2, [r3, #32]
 80078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e0:	1ad2      	subs	r2, r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	621a      	str	r2, [r3, #32]
 80078e6:	e016      	b.n	8007916 <HAL_PCD_EP_DB_Transmit+0x68a>
        }
        else if (ep->xfer_len_db == 0U)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <HAL_PCD_EP_DB_Transmit+0x676>
        {
          len = TxPctSize;
 80078f0:	231e      	movs	r3, #30
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2224      	movs	r2, #36	@ 0x24
 80078fc:	2100      	movs	r1, #0
 80078fe:	5499      	strb	r1, [r3, r2]
 8007900:	e009      	b.n	8007916 <HAL_PCD_EP_DB_Transmit+0x68a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2224      	movs	r2, #36	@ 0x24
 8007912:	2100      	movs	r1, #0
 8007914:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d16c      	bne.n	80079f8 <HAL_PCD_EP_DB_Transmit+0x76c>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4a2f      	ldr	r2, [pc, #188]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007926:	4694      	mov	ip, r2
 8007928:	4463      	add	r3, ip
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	492c      	ldr	r1, [pc, #176]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 8007934:	468c      	mov	ip, r1
 8007936:	4463      	add	r3, ip
 8007938:	0192      	lsls	r2, r2, #6
 800793a:	0992      	lsrs	r2, r2, #6
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d111      	bne.n	8007968 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	4a26      	ldr	r2, [pc, #152]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 800794c:	4694      	mov	ip, r2
 800794e:	4463      	add	r3, ip
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	4922      	ldr	r1, [pc, #136]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 800795a:	468c      	mov	ip, r1
 800795c:	4463      	add	r3, ip
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	0609      	lsls	r1, r1, #24
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
 8007966:	e06c      	b.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	2b3e      	cmp	r3, #62	@ 0x3e
 800796c:	d81b      	bhi.n	80079a6 <HAL_PCD_EP_DB_Transmit+0x71a>
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	2201      	movs	r2, #1
 8007978:	4013      	ands	r3, r2
 800797a:	d002      	beq.n	8007982 <HAL_PCD_EP_DB_Transmit+0x6f6>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	3301      	adds	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4a16      	ldr	r2, [pc, #88]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 800798a:	4694      	mov	ip, r2
 800798c:	4463      	add	r3, ip
 800798e:	6859      	ldr	r1, [r3, #4]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	069a      	lsls	r2, r3, #26
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4812      	ldr	r0, [pc, #72]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 800799c:	4684      	mov	ip, r0
 800799e:	4463      	add	r3, ip
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
 80079a4:	e04d      	b.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	61bb      	str	r3, [r7, #24]
 80079ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ae:	221f      	movs	r2, #31
 80079b0:	4013      	ands	r3, r2
 80079b2:	d102      	bne.n	80079ba <HAL_PCD_EP_DB_Transmit+0x72e>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	4a08      	ldr	r2, [pc, #32]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80079c2:	4694      	mov	ip, r2
 80079c4:	4463      	add	r3, ip
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	069b      	lsls	r3, r3, #26
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	4903      	ldr	r1, [pc, #12]	@ (80079e4 <HAL_PCD_EP_DB_Transmit+0x758>)
 80079d6:	468c      	mov	ip, r1
 80079d8:	4463      	add	r3, ip
 80079da:	2180      	movs	r1, #128	@ 0x80
 80079dc:	0609      	lsls	r1, r1, #24
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	e02e      	b.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80079e4:	40009800 	.word	0x40009800
 80079e8:	07ff8fbf 	.word	0x07ff8fbf
 80079ec:	00008080 	.word	0x00008080
 80079f0:	07ff8f8f 	.word	0x07ff8f8f
 80079f4:	0000c080 	.word	0x0000c080
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d120      	bne.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	4a25      	ldr	r2, [pc, #148]	@ (8007a9c <HAL_PCD_EP_DB_Transmit+0x810>)
 8007a08:	4694      	mov	ip, r2
 8007a0a:	4463      	add	r3, ip
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	4921      	ldr	r1, [pc, #132]	@ (8007a9c <HAL_PCD_EP_DB_Transmit+0x810>)
 8007a16:	468c      	mov	ip, r1
 8007a18:	4463      	add	r3, ip
 8007a1a:	0412      	lsls	r2, r2, #16
 8007a1c:	0c12      	lsrs	r2, r2, #16
 8007a1e:	605a      	str	r2, [r3, #4]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4a1d      	ldr	r2, [pc, #116]	@ (8007a9c <HAL_PCD_EP_DB_Transmit+0x810>)
 8007a28:	4694      	mov	ip, r2
 8007a2a:	4463      	add	r3, ip
 8007a2c:	6859      	ldr	r1, [r3, #4]
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	041a      	lsls	r2, r3, #16
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4818      	ldr	r0, [pc, #96]	@ (8007a9c <HAL_PCD_EP_DB_Transmit+0x810>)
 8007a3a:	4684      	mov	ip, r0
 8007a3c:	4463      	add	r3, ip
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6959      	ldr	r1, [r3, #20]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	895a      	ldrh	r2, [r3, #10]
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f005 fe7b 	bl	800d74c <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	18d3      	adds	r3, r2, r3
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a0e      	ldr	r2, [pc, #56]	@ (8007aa0 <HAL_PCD_EP_DB_Transmit+0x814>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6e:	2210      	movs	r2, #16
 8007a70:	4053      	eors	r3, r2
 8007a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a76:	2220      	movs	r2, #32
 8007a78:	4053      	eors	r3, r2
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	001a      	movs	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	18d3      	adds	r3, r2, r3
 8007a8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a8c:	4905      	ldr	r1, [pc, #20]	@ (8007aa4 <HAL_PCD_EP_DB_Transmit+0x818>)
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b010      	add	sp, #64	@ 0x40
 8007a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a9c:	40009800 	.word	0x40009800
 8007aa0:	07ff8fbf 	.word	0x07ff8fbf
 8007aa4:	00008080 	.word	0x00008080

08007aa8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	0008      	movs	r0, r1
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	240a      	movs	r4, #10
 8007ab8:	193b      	adds	r3, r7, r4
 8007aba:	1c02      	adds	r2, r0, #0
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	2308      	movs	r3, #8
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	1c0a      	adds	r2, r1, #0
 8007ac4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007ac6:	0021      	movs	r1, r4
 8007ac8:	187b      	adds	r3, r7, r1
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	2280      	movs	r2, #128	@ 0x80
 8007ace:	4013      	ands	r3, r2
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad6:	187b      	adds	r3, r7, r1
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	2207      	movs	r2, #7
 8007adc:	401a      	ands	r2, r3
 8007ade:	0013      	movs	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	3310      	adds	r3, #16
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	18d3      	adds	r3, r2, r3
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e00b      	b.n	8007b08 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007af0:	230a      	movs	r3, #10
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	881a      	ldrh	r2, [r3, #0]
 8007af6:	0013      	movs	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	189b      	adds	r3, r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	3351      	adds	r3, #81	@ 0x51
 8007b00:	33ff      	adds	r3, #255	@ 0xff
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	18d3      	adds	r3, r2, r3
 8007b06:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007b08:	2308      	movs	r3, #8
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2200      	movs	r2, #0
 8007b16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	80da      	strh	r2, [r3, #6]
 8007b20:	e00b      	b.n	8007b3a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2201      	movs	r2, #1
 8007b26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b007      	add	sp, #28
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	23b4      	movs	r3, #180	@ 0xb4
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	2101      	movs	r1, #1
 8007b5a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	23b2      	movs	r3, #178	@ 0xb2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	2100      	movs	r1, #0
 8007b64:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	2202      	movs	r2, #2
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	0018      	movs	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b004      	add	sp, #16
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	000a      	movs	r2, r1
 8007b92:	1cfb      	adds	r3, r7, #3
 8007b94:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b002      	add	sp, #8
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ba4:	4b04      	ldr	r3, [pc, #16]	@ (8007bb8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	4b03      	ldr	r3, [pc, #12]	@ (8007bb8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007baa:	2180      	movs	r1, #128	@ 0x80
 8007bac:	0049      	lsls	r1, r1, #1
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	601a      	str	r2, [r3, #0]
}
 8007bb2:	46c0      	nop			@ (mov r8, r8)
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40007000 	.word	0x40007000

08007bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	2380      	movs	r3, #128	@ 0x80
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d137      	bne.n	8007c3e <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bce:	4b27      	ldr	r3, [pc, #156]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	23c0      	movs	r3, #192	@ 0xc0
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d040      	beq.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007be0:	4b22      	ldr	r3, [pc, #136]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a22      	ldr	r2, [pc, #136]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8007be6:	401a      	ands	r2, r3
 8007be8:	4b20      	ldr	r3, [pc, #128]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007bea:	2180      	movs	r1, #128	@ 0x80
 8007bec:	0089      	lsls	r1, r1, #2
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bf2:	4b20      	ldr	r3, [pc, #128]	@ (8007c74 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2232      	movs	r2, #50	@ 0x32
 8007bf8:	4353      	muls	r3, r2
 8007bfa:	491f      	ldr	r1, [pc, #124]	@ (8007c78 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7f8 fa9f 	bl	8000140 <__udivsi3>
 8007c02:	0003      	movs	r3, r0
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c08:	e002      	b.n	8007c10 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c10:	4b16      	ldr	r3, [pc, #88]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007c12:	695a      	ldr	r2, [r3, #20]
 8007c14:	2380      	movs	r3, #128	@ 0x80
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	401a      	ands	r2, r3
 8007c1a:	2380      	movs	r3, #128	@ 0x80
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d102      	bne.n	8007c28 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f0      	bne.n	8007c0a <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c28:	4b10      	ldr	r3, [pc, #64]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007c2a:	695a      	ldr	r2, [r3, #20]
 8007c2c:	2380      	movs	r3, #128	@ 0x80
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	401a      	ands	r2, r3
 8007c32:	2380      	movs	r3, #128	@ 0x80
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d113      	bne.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e012      	b.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	23c0      	movs	r3, #192	@ 0xc0
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	401a      	ands	r2, r3
 8007c48:	2380      	movs	r3, #128	@ 0x80
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d008      	beq.n	8007c62 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a06      	ldr	r2, [pc, #24]	@ (8007c70 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8007c56:	401a      	ands	r2, r3
 8007c58:	4b04      	ldr	r3, [pc, #16]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007c5a:	2180      	movs	r1, #128	@ 0x80
 8007c5c:	00c9      	lsls	r1, r1, #3
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b004      	add	sp, #16
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40007000 	.word	0x40007000
 8007c70:	fffff9ff 	.word	0xfffff9ff
 8007c74:	20000000 	.word	0x20000000
 8007c78:	000f4240 	.word	0x000f4240

08007c7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007c80:	4b03      	ldr	r3, [pc, #12]	@ (8007c90 <HAL_PWREx_GetVoltageRange+0x14>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	23c0      	movs	r3, #192	@ 0xc0
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	4013      	ands	r3, r2
}
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40007000 	.word	0x40007000

08007c94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <HAL_PWREx_EnableVddUSB+0x18>)
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b03      	ldr	r3, [pc, #12]	@ (8007cac <HAL_PWREx_EnableVddUSB+0x18>)
 8007c9e:	2180      	movs	r1, #128	@ 0x80
 8007ca0:	00c9      	lsls	r1, r1, #3
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
}
 8007ca6:	46c0      	nop			@ (mov r8, r8)
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40007000 	.word	0x40007000

08007cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cb0:	b5b0      	push	{r4, r5, r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cb8:	4bc9      	ldr	r3, [pc, #804]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2238      	movs	r2, #56	@ 0x38
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cc2:	4bc7      	ldr	r3, [pc, #796]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	4013      	ands	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d100      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x28>
 8007cd6:	e0ef      	b.n	8007eb8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d007      	beq.n	8007cee <HAL_RCC_OscConfig+0x3e>
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b18      	cmp	r3, #24
 8007ce2:	d000      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x36>
 8007ce4:	e093      	b.n	8007e0e <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d000      	beq.n	8007cee <HAL_RCC_OscConfig+0x3e>
 8007cec:	e08f      	b.n	8007e0e <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cee:	4bbc      	ldr	r3, [pc, #752]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d006      	beq.n	8007d06 <HAL_RCC_OscConfig+0x56>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f000 fbf2 	bl	80084ea <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d0a:	4bb5      	ldr	r3, [pc, #724]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2108      	movs	r1, #8
 8007d10:	400b      	ands	r3, r1
 8007d12:	d004      	beq.n	8007d1e <HAL_RCC_OscConfig+0x6e>
 8007d14:	4bb2      	ldr	r3, [pc, #712]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	21f0      	movs	r1, #240	@ 0xf0
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	e005      	b.n	8007d2a <HAL_RCC_OscConfig+0x7a>
 8007d1e:	49b0      	ldr	r1, [pc, #704]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d20:	2394      	movs	r3, #148	@ 0x94
 8007d22:	58cb      	ldr	r3, [r1, r3]
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	21f0      	movs	r1, #240	@ 0xf0
 8007d28:	400b      	ands	r3, r1
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d225      	bcs.n	8007d7a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d32:	0018      	movs	r0, r3
 8007d34:	f000 fd90 	bl	8008858 <RCC_SetFlashLatencyFromMSIRange>
 8007d38:	1e03      	subs	r3, r0, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f000 fbd4 	bl	80084ea <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d42:	4ba7      	ldr	r3, [pc, #668]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4ba6      	ldr	r3, [pc, #664]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d48:	2108      	movs	r1, #8
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	4ba4      	ldr	r3, [pc, #656]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	22f0      	movs	r2, #240	@ 0xf0
 8007d54:	4393      	bics	r3, r2
 8007d56:	0019      	movs	r1, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d5c:	4ba0      	ldr	r3, [pc, #640]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d62:	4b9f      	ldr	r3, [pc, #636]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	4a9f      	ldr	r2, [pc, #636]	@ (8007fe4 <HAL_RCC_OscConfig+0x334>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	0019      	movs	r1, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	021a      	lsls	r2, r3, #8
 8007d72:	4b9b      	ldr	r3, [pc, #620]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	e027      	b.n	8007dca <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d7a:	4b99      	ldr	r3, [pc, #612]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b98      	ldr	r3, [pc, #608]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d80:	2108      	movs	r1, #8
 8007d82:	430a      	orrs	r2, r1
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	4b96      	ldr	r3, [pc, #600]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	22f0      	movs	r2, #240	@ 0xf0
 8007d8c:	4393      	bics	r3, r2
 8007d8e:	0019      	movs	r1, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d94:	4b92      	ldr	r3, [pc, #584]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d96:	430a      	orrs	r2, r1
 8007d98:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d9a:	4b91      	ldr	r3, [pc, #580]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4a91      	ldr	r2, [pc, #580]	@ (8007fe4 <HAL_RCC_OscConfig+0x334>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	0019      	movs	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	021a      	lsls	r2, r3, #8
 8007daa:	4b8d      	ldr	r3, [pc, #564]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 fd4c 	bl	8008858 <RCC_SetFlashLatencyFromMSIRange>
 8007dc0:	1e03      	subs	r3, r0, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f000 fb90 	bl	80084ea <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007dca:	f000 fc87 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8007dce:	0001      	movs	r1, r0
 8007dd0:	4b83      	ldr	r3, [pc, #524]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dd4:	0a1b      	lsrs	r3, r3, #8
 8007dd6:	220f      	movs	r2, #15
 8007dd8:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007dda:	4a83      	ldr	r2, [pc, #524]	@ (8007fe8 <HAL_RCC_OscConfig+0x338>)
 8007ddc:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dde:	001a      	movs	r2, r3
 8007de0:	231f      	movs	r3, #31
 8007de2:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8007de4:	000a      	movs	r2, r1
 8007de6:	40da      	lsrs	r2, r3
 8007de8:	4b80      	ldr	r3, [pc, #512]	@ (8007fec <HAL_RCC_OscConfig+0x33c>)
 8007dea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007dec:	4b80      	ldr	r3, [pc, #512]	@ (8007ff0 <HAL_RCC_OscConfig+0x340>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	250f      	movs	r5, #15
 8007df2:	197c      	adds	r4, r7, r5
 8007df4:	0018      	movs	r0, r3
 8007df6:	f7fb ff45 	bl	8003c84 <HAL_InitTick>
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8007dfe:	197b      	adds	r3, r7, r5
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d057      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8007e06:	197b      	adds	r3, r7, r5
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f000 fb6e 	bl	80084ea <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d035      	beq.n	8007e82 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e16:	4b72      	ldr	r3, [pc, #456]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b71      	ldr	r3, [pc, #452]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e22:	f7fb ff89 	bl	8003d38 <HAL_GetTick>
 8007e26:	0003      	movs	r3, r0
 8007e28:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e2a:	e009      	b.n	8007e40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007e2c:	f7fb ff84 	bl	8003d38 <HAL_GetTick>
 8007e30:	0002      	movs	r2, r0
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d902      	bls.n	8007e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	f000 fb55 	bl	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e40:	4b67      	ldr	r3, [pc, #412]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2202      	movs	r2, #2
 8007e46:	4013      	ands	r3, r2
 8007e48:	d0f0      	beq.n	8007e2c <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e4a:	4b65      	ldr	r3, [pc, #404]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b64      	ldr	r3, [pc, #400]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e50:	2108      	movs	r1, #8
 8007e52:	430a      	orrs	r2, r1
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	4b62      	ldr	r3, [pc, #392]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	22f0      	movs	r2, #240	@ 0xf0
 8007e5c:	4393      	bics	r3, r2
 8007e5e:	0019      	movs	r1, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e64:	4b5e      	ldr	r3, [pc, #376]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e66:	430a      	orrs	r2, r1
 8007e68:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8007fe4 <HAL_RCC_OscConfig+0x334>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	0019      	movs	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	021a      	lsls	r2, r3, #8
 8007e7a:	4b59      	ldr	r3, [pc, #356]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
 8007e80:	e01a      	b.n	8007eb8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007e82:	4b57      	ldr	r3, [pc, #348]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b56      	ldr	r3, [pc, #344]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007e88:	2101      	movs	r1, #1
 8007e8a:	438a      	bics	r2, r1
 8007e8c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e8e:	f7fb ff53 	bl	8003d38 <HAL_GetTick>
 8007e92:	0003      	movs	r3, r0
 8007e94:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8007e98:	f7fb ff4e 	bl	8003d38 <HAL_GetTick>
 8007e9c:	0002      	movs	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e31f      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	d1f1      	bne.n	8007e98 <HAL_RCC_OscConfig+0x1e8>
 8007eb4:	e000      	b.n	8007eb8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007eb6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	d100      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x214>
 8007ec2:	e065      	b.n	8007f90 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b10      	cmp	r3, #16
 8007ec8:	d005      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x226>
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	2b18      	cmp	r3, #24
 8007ece:	d10e      	bne.n	8007eee <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d10b      	bne.n	8007eee <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed6:	4b42      	ldr	r3, [pc, #264]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	2380      	movs	r3, #128	@ 0x80
 8007edc:	029b      	lsls	r3, r3, #10
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d055      	beq.n	8007f8e <HAL_RCC_OscConfig+0x2de>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d151      	bne.n	8007f8e <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e2fd      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	2380      	movs	r3, #128	@ 0x80
 8007ef4:	025b      	lsls	r3, r3, #9
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d107      	bne.n	8007f0a <HAL_RCC_OscConfig+0x25a>
 8007efa:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b38      	ldr	r3, [pc, #224]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f00:	2180      	movs	r1, #128	@ 0x80
 8007f02:	0249      	lsls	r1, r1, #9
 8007f04:	430a      	orrs	r2, r1
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	e013      	b.n	8007f32 <HAL_RCC_OscConfig+0x282>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	23a0      	movs	r3, #160	@ 0xa0
 8007f10:	02db      	lsls	r3, r3, #11
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d107      	bne.n	8007f26 <HAL_RCC_OscConfig+0x276>
 8007f16:	4b32      	ldr	r3, [pc, #200]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b31      	ldr	r3, [pc, #196]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f1c:	21a0      	movs	r1, #160	@ 0xa0
 8007f1e:	02c9      	lsls	r1, r1, #11
 8007f20:	430a      	orrs	r2, r1
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e005      	b.n	8007f32 <HAL_RCC_OscConfig+0x282>
 8007f26:	4b2e      	ldr	r3, [pc, #184]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f2c:	4931      	ldr	r1, [pc, #196]	@ (8007ff4 <HAL_RCC_OscConfig+0x344>)
 8007f2e:	400a      	ands	r2, r1
 8007f30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3a:	f7fb fefd 	bl	8003d38 <HAL_GetTick>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f42:	e008      	b.n	8007f56 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007f44:	f7fb fef8 	bl	8003d38 <HAL_GetTick>
 8007f48:	0002      	movs	r2, r0
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b64      	cmp	r3, #100	@ 0x64
 8007f50:	d901      	bls.n	8007f56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e2c9      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f56:	4b22      	ldr	r3, [pc, #136]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	2380      	movs	r3, #128	@ 0x80
 8007f5c:	029b      	lsls	r3, r3, #10
 8007f5e:	4013      	ands	r3, r2
 8007f60:	d0f0      	beq.n	8007f44 <HAL_RCC_OscConfig+0x294>
 8007f62:	e015      	b.n	8007f90 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f64:	f7fb fee8 	bl	8003d38 <HAL_GetTick>
 8007f68:	0003      	movs	r3, r0
 8007f6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007f6e:	f7fb fee3 	bl	8003d38 <HAL_GetTick>
 8007f72:	0002      	movs	r2, r0
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b64      	cmp	r3, #100	@ 0x64
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e2b4      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f80:	4b17      	ldr	r3, [pc, #92]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	2380      	movs	r3, #128	@ 0x80
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	4013      	ands	r3, r2
 8007f8a:	d1f0      	bne.n	8007f6e <HAL_RCC_OscConfig+0x2be>
 8007f8c:	e000      	b.n	8007f90 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2202      	movs	r2, #2
 8007f96:	4013      	ands	r3, r2
 8007f98:	d100      	bne.n	8007f9c <HAL_RCC_OscConfig+0x2ec>
 8007f9a:	e074      	b.n	8008086 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d005      	beq.n	8007fae <HAL_RCC_OscConfig+0x2fe>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b18      	cmp	r3, #24
 8007fa6:	d129      	bne.n	8007ffc <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d126      	bne.n	8007ffc <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fae:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	2380      	movs	r3, #128	@ 0x80
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d005      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x316>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e291      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc6:	4b06      	ldr	r3, [pc, #24]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4a0b      	ldr	r2, [pc, #44]	@ (8007ff8 <HAL_RCC_OscConfig+0x348>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	0019      	movs	r1, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	061a      	lsls	r2, r3, #24
 8007fd6:	4b02      	ldr	r3, [pc, #8]	@ (8007fe0 <HAL_RCC_OscConfig+0x330>)
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fdc:	e053      	b.n	8008086 <HAL_RCC_OscConfig+0x3d6>
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	ffff00ff 	.word	0xffff00ff
 8007fe8:	08015b34 	.word	0x08015b34
 8007fec:	20000000 	.word	0x20000000
 8007ff0:	20000004 	.word	0x20000004
 8007ff4:	fffaffff 	.word	0xfffaffff
 8007ff8:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d026      	beq.n	8008052 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008004:	4bc7      	ldr	r3, [pc, #796]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	4bc6      	ldr	r3, [pc, #792]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800800a:	2180      	movs	r1, #128	@ 0x80
 800800c:	0049      	lsls	r1, r1, #1
 800800e:	430a      	orrs	r2, r1
 8008010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008012:	f7fb fe91 	bl	8003d38 <HAL_GetTick>
 8008016:	0003      	movs	r3, r0
 8008018:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800801a:	e008      	b.n	800802e <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800801c:	f7fb fe8c 	bl	8003d38 <HAL_GetTick>
 8008020:	0002      	movs	r2, r0
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e25d      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800802e:	4bbd      	ldr	r3, [pc, #756]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	2380      	movs	r3, #128	@ 0x80
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	4013      	ands	r3, r2
 8008038:	d0f0      	beq.n	800801c <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803a:	4bba      	ldr	r3, [pc, #744]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	4aba      	ldr	r2, [pc, #744]	@ (8008328 <HAL_RCC_OscConfig+0x678>)
 8008040:	4013      	ands	r3, r2
 8008042:	0019      	movs	r1, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	061a      	lsls	r2, r3, #24
 800804a:	4bb6      	ldr	r3, [pc, #728]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800804c:	430a      	orrs	r2, r1
 800804e:	605a      	str	r2, [r3, #4]
 8008050:	e019      	b.n	8008086 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008052:	4bb4      	ldr	r3, [pc, #720]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4bb3      	ldr	r3, [pc, #716]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008058:	49b4      	ldr	r1, [pc, #720]	@ (800832c <HAL_RCC_OscConfig+0x67c>)
 800805a:	400a      	ands	r2, r1
 800805c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805e:	f7fb fe6b 	bl	8003d38 <HAL_GetTick>
 8008062:	0003      	movs	r3, r0
 8008064:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008068:	f7fb fe66 	bl	8003d38 <HAL_GetTick>
 800806c:	0002      	movs	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e237      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800807a:	4baa      	ldr	r3, [pc, #680]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	2380      	movs	r3, #128	@ 0x80
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4013      	ands	r3, r2
 8008084:	d1f0      	bne.n	8008068 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2208      	movs	r2, #8
 800808c:	4013      	ands	r3, r2
 800808e:	d051      	beq.n	8008134 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d031      	beq.n	80080fc <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d108      	bne.n	80080b2 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80080a0:	4aa0      	ldr	r2, [pc, #640]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080a2:	2394      	movs	r3, #148	@ 0x94
 80080a4:	58d3      	ldr	r3, [r2, r3]
 80080a6:	499f      	ldr	r1, [pc, #636]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080a8:	2204      	movs	r2, #4
 80080aa:	4393      	bics	r3, r2
 80080ac:	2294      	movs	r2, #148	@ 0x94
 80080ae:	508b      	str	r3, [r1, r2]
 80080b0:	e007      	b.n	80080c2 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80080b2:	4a9c      	ldr	r2, [pc, #624]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080b4:	2394      	movs	r3, #148	@ 0x94
 80080b6:	58d3      	ldr	r3, [r2, r3]
 80080b8:	499a      	ldr	r1, [pc, #616]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080ba:	2204      	movs	r2, #4
 80080bc:	4313      	orrs	r3, r2
 80080be:	2294      	movs	r2, #148	@ 0x94
 80080c0:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c2:	4a98      	ldr	r2, [pc, #608]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080c4:	2394      	movs	r3, #148	@ 0x94
 80080c6:	58d3      	ldr	r3, [r2, r3]
 80080c8:	4996      	ldr	r1, [pc, #600]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	4313      	orrs	r3, r2
 80080ce:	2294      	movs	r2, #148	@ 0x94
 80080d0:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d2:	f7fb fe31 	bl	8003d38 <HAL_GetTick>
 80080d6:	0003      	movs	r3, r0
 80080d8:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080dc:	f7fb fe2c 	bl	8003d38 <HAL_GetTick>
 80080e0:	0002      	movs	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b11      	cmp	r3, #17
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e1fd      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ee:	4a8d      	ldr	r2, [pc, #564]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080f0:	2394      	movs	r3, #148	@ 0x94
 80080f2:	58d3      	ldr	r3, [r2, r3]
 80080f4:	2202      	movs	r2, #2
 80080f6:	4013      	ands	r3, r2
 80080f8:	d0f0      	beq.n	80080dc <HAL_RCC_OscConfig+0x42c>
 80080fa:	e01b      	b.n	8008134 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080fc:	4a89      	ldr	r2, [pc, #548]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80080fe:	2394      	movs	r3, #148	@ 0x94
 8008100:	58d3      	ldr	r3, [r2, r3]
 8008102:	4988      	ldr	r1, [pc, #544]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008104:	2201      	movs	r2, #1
 8008106:	4393      	bics	r3, r2
 8008108:	2294      	movs	r2, #148	@ 0x94
 800810a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810c:	f7fb fe14 	bl	8003d38 <HAL_GetTick>
 8008110:	0003      	movs	r3, r0
 8008112:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008116:	f7fb fe0f 	bl	8003d38 <HAL_GetTick>
 800811a:	0002      	movs	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b11      	cmp	r3, #17
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e1e0      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008128:	4a7e      	ldr	r2, [pc, #504]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800812a:	2394      	movs	r3, #148	@ 0x94
 800812c:	58d3      	ldr	r3, [r2, r3]
 800812e:	2202      	movs	r2, #2
 8008130:	4013      	ands	r3, r2
 8008132:	d1f0      	bne.n	8008116 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2204      	movs	r2, #4
 800813a:	4013      	ands	r3, r2
 800813c:	d100      	bne.n	8008140 <HAL_RCC_OscConfig+0x490>
 800813e:	e10d      	b.n	800835c <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008140:	201f      	movs	r0, #31
 8008142:	183b      	adds	r3, r7, r0
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8008148:	4b76      	ldr	r3, [pc, #472]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800814a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800814c:	2380      	movs	r3, #128	@ 0x80
 800814e:	055b      	lsls	r3, r3, #21
 8008150:	4013      	ands	r3, r2
 8008152:	d110      	bne.n	8008176 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008154:	4b73      	ldr	r3, [pc, #460]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008156:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008158:	4b72      	ldr	r3, [pc, #456]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800815a:	2180      	movs	r1, #128	@ 0x80
 800815c:	0549      	lsls	r1, r1, #21
 800815e:	430a      	orrs	r2, r1
 8008160:	659a      	str	r2, [r3, #88]	@ 0x58
 8008162:	4b70      	ldr	r3, [pc, #448]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008164:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	055b      	lsls	r3, r3, #21
 800816a:	4013      	ands	r3, r2
 800816c:	60bb      	str	r3, [r7, #8]
 800816e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008170:	183b      	adds	r3, r7, r0
 8008172:	2201      	movs	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008176:	4b6e      	ldr	r3, [pc, #440]	@ (8008330 <HAL_RCC_OscConfig+0x680>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	2380      	movs	r3, #128	@ 0x80
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	4013      	ands	r3, r2
 8008180:	d11a      	bne.n	80081b8 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008182:	4b6b      	ldr	r3, [pc, #428]	@ (8008330 <HAL_RCC_OscConfig+0x680>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b6a      	ldr	r3, [pc, #424]	@ (8008330 <HAL_RCC_OscConfig+0x680>)
 8008188:	2180      	movs	r1, #128	@ 0x80
 800818a:	0049      	lsls	r1, r1, #1
 800818c:	430a      	orrs	r2, r1
 800818e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008190:	f7fb fdd2 	bl	8003d38 <HAL_GetTick>
 8008194:	0003      	movs	r3, r0
 8008196:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008198:	e008      	b.n	80081ac <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800819a:	f7fb fdcd 	bl	8003d38 <HAL_GetTick>
 800819e:	0002      	movs	r2, r0
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e19e      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081ac:	4b60      	ldr	r3, [pc, #384]	@ (8008330 <HAL_RCC_OscConfig+0x680>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	2380      	movs	r3, #128	@ 0x80
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	4013      	ands	r3, r2
 80081b6:	d0f0      	beq.n	800819a <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	2201      	movs	r2, #1
 80081be:	4013      	ands	r3, r2
 80081c0:	d01e      	beq.n	8008200 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2204      	movs	r2, #4
 80081c8:	4013      	ands	r3, r2
 80081ca:	d010      	beq.n	80081ee <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80081cc:	4a55      	ldr	r2, [pc, #340]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80081ce:	2390      	movs	r3, #144	@ 0x90
 80081d0:	58d3      	ldr	r3, [r2, r3]
 80081d2:	4954      	ldr	r1, [pc, #336]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80081d4:	2204      	movs	r2, #4
 80081d6:	4313      	orrs	r3, r2
 80081d8:	2290      	movs	r2, #144	@ 0x90
 80081da:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081dc:	4a51      	ldr	r2, [pc, #324]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80081de:	2390      	movs	r3, #144	@ 0x90
 80081e0:	58d3      	ldr	r3, [r2, r3]
 80081e2:	4950      	ldr	r1, [pc, #320]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	4313      	orrs	r3, r2
 80081e8:	2290      	movs	r2, #144	@ 0x90
 80081ea:	508b      	str	r3, [r1, r2]
 80081ec:	e018      	b.n	8008220 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081ee:	4a4d      	ldr	r2, [pc, #308]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80081f0:	2390      	movs	r3, #144	@ 0x90
 80081f2:	58d3      	ldr	r3, [r2, r3]
 80081f4:	494b      	ldr	r1, [pc, #300]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	4313      	orrs	r3, r2
 80081fa:	2290      	movs	r2, #144	@ 0x90
 80081fc:	508b      	str	r3, [r1, r2]
 80081fe:	e00f      	b.n	8008220 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008200:	4a48      	ldr	r2, [pc, #288]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008202:	2390      	movs	r3, #144	@ 0x90
 8008204:	58d3      	ldr	r3, [r2, r3]
 8008206:	4947      	ldr	r1, [pc, #284]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008208:	2201      	movs	r2, #1
 800820a:	4393      	bics	r3, r2
 800820c:	2290      	movs	r2, #144	@ 0x90
 800820e:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008210:	4a44      	ldr	r2, [pc, #272]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008212:	2390      	movs	r3, #144	@ 0x90
 8008214:	58d3      	ldr	r3, [r2, r3]
 8008216:	4943      	ldr	r1, [pc, #268]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008218:	2204      	movs	r2, #4
 800821a:	4393      	bics	r3, r2
 800821c:	2290      	movs	r2, #144	@ 0x90
 800821e:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d04f      	beq.n	80082c8 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008228:	f7fb fd86 	bl	8003d38 <HAL_GetTick>
 800822c:	0003      	movs	r3, r0
 800822e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008230:	e009      	b.n	8008246 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008232:	f7fb fd81 	bl	8003d38 <HAL_GetTick>
 8008236:	0002      	movs	r2, r0
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	4a3d      	ldr	r2, [pc, #244]	@ (8008334 <HAL_RCC_OscConfig+0x684>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e151      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008246:	4a37      	ldr	r2, [pc, #220]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008248:	2390      	movs	r3, #144	@ 0x90
 800824a:	58d3      	ldr	r3, [r2, r3]
 800824c:	2202      	movs	r2, #2
 800824e:	4013      	ands	r3, r2
 8008250:	d0ef      	beq.n	8008232 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2280      	movs	r2, #128	@ 0x80
 8008258:	4013      	ands	r3, r2
 800825a:	d01a      	beq.n	8008292 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800825c:	4a31      	ldr	r2, [pc, #196]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800825e:	2390      	movs	r3, #144	@ 0x90
 8008260:	58d3      	ldr	r3, [r2, r3]
 8008262:	4930      	ldr	r1, [pc, #192]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008264:	2280      	movs	r2, #128	@ 0x80
 8008266:	4313      	orrs	r3, r2
 8008268:	2290      	movs	r2, #144	@ 0x90
 800826a:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800826c:	e009      	b.n	8008282 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826e:	f7fb fd63 	bl	8003d38 <HAL_GetTick>
 8008272:	0002      	movs	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	4a2e      	ldr	r2, [pc, #184]	@ (8008334 <HAL_RCC_OscConfig+0x684>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e133      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008282:	4a28      	ldr	r2, [pc, #160]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008284:	2390      	movs	r3, #144	@ 0x90
 8008286:	58d2      	ldr	r2, [r2, r3]
 8008288:	2380      	movs	r3, #128	@ 0x80
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	4013      	ands	r3, r2
 800828e:	d0ee      	beq.n	800826e <HAL_RCC_OscConfig+0x5be>
 8008290:	e059      	b.n	8008346 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008292:	4a24      	ldr	r2, [pc, #144]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008294:	2390      	movs	r3, #144	@ 0x90
 8008296:	58d3      	ldr	r3, [r2, r3]
 8008298:	4922      	ldr	r1, [pc, #136]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 800829a:	2280      	movs	r2, #128	@ 0x80
 800829c:	4393      	bics	r3, r2
 800829e:	2290      	movs	r2, #144	@ 0x90
 80082a0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082a2:	e009      	b.n	80082b8 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a4:	f7fb fd48 	bl	8003d38 <HAL_GetTick>
 80082a8:	0002      	movs	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	4a21      	ldr	r2, [pc, #132]	@ (8008334 <HAL_RCC_OscConfig+0x684>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e118      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80082ba:	2390      	movs	r3, #144	@ 0x90
 80082bc:	58d2      	ldr	r2, [r2, r3]
 80082be:	2380      	movs	r3, #128	@ 0x80
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	4013      	ands	r3, r2
 80082c4:	d1ee      	bne.n	80082a4 <HAL_RCC_OscConfig+0x5f4>
 80082c6:	e03e      	b.n	8008346 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c8:	f7fb fd36 	bl	8003d38 <HAL_GetTick>
 80082cc:	0003      	movs	r3, r0
 80082ce:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082d0:	e009      	b.n	80082e6 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d2:	f7fb fd31 	bl	8003d38 <HAL_GetTick>
 80082d6:	0002      	movs	r2, r0
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	4a15      	ldr	r2, [pc, #84]	@ (8008334 <HAL_RCC_OscConfig+0x684>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e101      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80082e8:	2390      	movs	r3, #144	@ 0x90
 80082ea:	58d3      	ldr	r3, [r2, r3]
 80082ec:	2202      	movs	r2, #2
 80082ee:	4013      	ands	r3, r2
 80082f0:	d1ef      	bne.n	80082d2 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80082f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 80082f4:	2390      	movs	r3, #144	@ 0x90
 80082f6:	58d3      	ldr	r3, [r2, r3]
 80082f8:	2280      	movs	r2, #128	@ 0x80
 80082fa:	4013      	ands	r3, r2
 80082fc:	d023      	beq.n	8008346 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80082fe:	4a09      	ldr	r2, [pc, #36]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008300:	2390      	movs	r3, #144	@ 0x90
 8008302:	58d3      	ldr	r3, [r2, r3]
 8008304:	4907      	ldr	r1, [pc, #28]	@ (8008324 <HAL_RCC_OscConfig+0x674>)
 8008306:	2280      	movs	r2, #128	@ 0x80
 8008308:	4393      	bics	r3, r2
 800830a:	2290      	movs	r2, #144	@ 0x90
 800830c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800830e:	e013      	b.n	8008338 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008310:	f7fb fd12 	bl	8003d38 <HAL_GetTick>
 8008314:	0002      	movs	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	4a06      	ldr	r2, [pc, #24]	@ (8008334 <HAL_RCC_OscConfig+0x684>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d90b      	bls.n	8008338 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e0e2      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
 8008324:	40021000 	.word	0x40021000
 8008328:	80ffffff 	.word	0x80ffffff
 800832c:	fffffeff 	.word	0xfffffeff
 8008330:	40007000 	.word	0x40007000
 8008334:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008338:	4a6e      	ldr	r2, [pc, #440]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 800833a:	2390      	movs	r3, #144	@ 0x90
 800833c:	58d2      	ldr	r2, [r2, r3]
 800833e:	2380      	movs	r3, #128	@ 0x80
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	4013      	ands	r3, r2
 8008344:	d1e4      	bne.n	8008310 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008346:	231f      	movs	r3, #31
 8008348:	18fb      	adds	r3, r7, r3
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d105      	bne.n	800835c <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008350:	4b68      	ldr	r3, [pc, #416]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008352:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008354:	4b67      	ldr	r3, [pc, #412]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008356:	4968      	ldr	r1, [pc, #416]	@ (80084f8 <HAL_RCC_OscConfig+0x848>)
 8008358:	400a      	ands	r2, r1
 800835a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2220      	movs	r2, #32
 8008362:	4013      	ands	r3, r2
 8008364:	d03c      	beq.n	80083e0 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01c      	beq.n	80083a8 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800836e:	4a61      	ldr	r2, [pc, #388]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008370:	2398      	movs	r3, #152	@ 0x98
 8008372:	58d3      	ldr	r3, [r2, r3]
 8008374:	495f      	ldr	r1, [pc, #380]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008376:	2201      	movs	r2, #1
 8008378:	4313      	orrs	r3, r2
 800837a:	2298      	movs	r2, #152	@ 0x98
 800837c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800837e:	f7fb fcdb 	bl	8003d38 <HAL_GetTick>
 8008382:	0003      	movs	r3, r0
 8008384:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008388:	f7fb fcd6 	bl	8003d38 <HAL_GetTick>
 800838c:	0002      	movs	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e0a7      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800839a:	4a56      	ldr	r2, [pc, #344]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 800839c:	2398      	movs	r3, #152	@ 0x98
 800839e:	58d3      	ldr	r3, [r2, r3]
 80083a0:	2202      	movs	r2, #2
 80083a2:	4013      	ands	r3, r2
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0x6d8>
 80083a6:	e01b      	b.n	80083e0 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083a8:	4a52      	ldr	r2, [pc, #328]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80083aa:	2398      	movs	r3, #152	@ 0x98
 80083ac:	58d3      	ldr	r3, [r2, r3]
 80083ae:	4951      	ldr	r1, [pc, #324]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	4393      	bics	r3, r2
 80083b4:	2298      	movs	r2, #152	@ 0x98
 80083b6:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b8:	f7fb fcbe 	bl	8003d38 <HAL_GetTick>
 80083bc:	0003      	movs	r3, r0
 80083be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80083c0:	e008      	b.n	80083d4 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083c2:	f7fb fcb9 	bl	8003d38 <HAL_GetTick>
 80083c6:	0002      	movs	r2, r0
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e08a      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80083d4:	4a47      	ldr	r2, [pc, #284]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80083d6:	2398      	movs	r3, #152	@ 0x98
 80083d8:	58d3      	ldr	r3, [r2, r3]
 80083da:	2202      	movs	r2, #2
 80083dc:	4013      	ands	r3, r2
 80083de:	d1f0      	bne.n	80083c2 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d100      	bne.n	80083ea <HAL_RCC_OscConfig+0x73a>
 80083e8:	e07e      	b.n	80084e8 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083ea:	4b42      	ldr	r3, [pc, #264]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	2238      	movs	r2, #56	@ 0x38
 80083f0:	4013      	ands	r3, r2
 80083f2:	2b18      	cmp	r3, #24
 80083f4:	d100      	bne.n	80083f8 <HAL_RCC_OscConfig+0x748>
 80083f6:	e075      	b.n	80084e4 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d156      	bne.n	80084ae <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008400:	4b3c      	ldr	r3, [pc, #240]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	4b3b      	ldr	r3, [pc, #236]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008406:	493d      	ldr	r1, [pc, #244]	@ (80084fc <HAL_RCC_OscConfig+0x84c>)
 8008408:	400a      	ands	r2, r1
 800840a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7fb fc94 	bl	8003d38 <HAL_GetTick>
 8008410:	0003      	movs	r3, r0
 8008412:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008416:	f7fb fc8f 	bl	8003d38 <HAL_GetTick>
 800841a:	0002      	movs	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e060      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008428:	4b32      	ldr	r3, [pc, #200]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	2380      	movs	r3, #128	@ 0x80
 800842e:	049b      	lsls	r3, r3, #18
 8008430:	4013      	ands	r3, r2
 8008432:	d1f0      	bne.n	8008416 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008434:	4b2f      	ldr	r3, [pc, #188]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	4a31      	ldr	r2, [pc, #196]	@ (8008500 <HAL_RCC_OscConfig+0x850>)
 800843a:	4013      	ands	r3, r2
 800843c:	0019      	movs	r1, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008460:	431a      	orrs	r2, r3
 8008462:	4b24      	ldr	r3, [pc, #144]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008464:	430a      	orrs	r2, r1
 8008466:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8008468:	4b22      	ldr	r3, [pc, #136]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	4b21      	ldr	r3, [pc, #132]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 800846e:	2180      	movs	r1, #128	@ 0x80
 8008470:	0549      	lsls	r1, r1, #21
 8008472:	430a      	orrs	r2, r1
 8008474:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008476:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b1e      	ldr	r3, [pc, #120]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 800847c:	2180      	movs	r1, #128	@ 0x80
 800847e:	0449      	lsls	r1, r1, #17
 8008480:	430a      	orrs	r2, r1
 8008482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008484:	f7fb fc58 	bl	8003d38 <HAL_GetTick>
 8008488:	0003      	movs	r3, r0
 800848a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800848c:	e008      	b.n	80084a0 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800848e:	f7fb fc53 	bl	8003d38 <HAL_GetTick>
 8008492:	0002      	movs	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e024      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a0:	4b14      	ldr	r3, [pc, #80]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	2380      	movs	r3, #128	@ 0x80
 80084a6:	049b      	lsls	r3, r3, #18
 80084a8:	4013      	ands	r3, r2
 80084aa:	d0f0      	beq.n	800848e <HAL_RCC_OscConfig+0x7de>
 80084ac:	e01c      	b.n	80084e8 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ae:	4b11      	ldr	r3, [pc, #68]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b10      	ldr	r3, [pc, #64]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80084b4:	4911      	ldr	r1, [pc, #68]	@ (80084fc <HAL_RCC_OscConfig+0x84c>)
 80084b6:	400a      	ands	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ba:	f7fb fc3d 	bl	8003d38 <HAL_GetTick>
 80084be:	0003      	movs	r3, r0
 80084c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084c2:	e008      	b.n	80084d6 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c4:	f7fb fc38 	bl	8003d38 <HAL_GetTick>
 80084c8:	0002      	movs	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e009      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084d6:	4b07      	ldr	r3, [pc, #28]	@ (80084f4 <HAL_RCC_OscConfig+0x844>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	2380      	movs	r3, #128	@ 0x80
 80084dc:	049b      	lsls	r3, r3, #18
 80084de:	4013      	ands	r3, r2
 80084e0:	d1f0      	bne.n	80084c4 <HAL_RCC_OscConfig+0x814>
 80084e2:	e001      	b.n	80084e8 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	0018      	movs	r0, r3
 80084ec:	46bd      	mov	sp, r7
 80084ee:	b008      	add	sp, #32
 80084f0:	bdb0      	pop	{r4, r5, r7, pc}
 80084f2:	46c0      	nop			@ (mov r8, r8)
 80084f4:	40021000 	.word	0x40021000
 80084f8:	efffffff 	.word	0xefffffff
 80084fc:	feffffff 	.word	0xfeffffff
 8008500:	11c1808c 	.word	0x11c1808c

08008504 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8008504:	b5b0      	push	{r4, r5, r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800850e:	4b6c      	ldr	r3, [pc, #432]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2207      	movs	r2, #7
 8008514:	4013      	ands	r3, r2
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d911      	bls.n	8008540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800851c:	4b68      	ldr	r3, [pc, #416]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2207      	movs	r2, #7
 8008522:	4393      	bics	r3, r2
 8008524:	0019      	movs	r1, r3
 8008526:	4b66      	ldr	r3, [pc, #408]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800852e:	4b64      	ldr	r3, [pc, #400]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2207      	movs	r2, #7
 8008534:	4013      	ands	r3, r2
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d001      	beq.n	8008540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e0bb      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2201      	movs	r2, #1
 8008546:	4013      	ands	r3, r2
 8008548:	d100      	bne.n	800854c <HAL_RCC_ClockConfig+0x48>
 800854a:	e064      	b.n	8008616 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d107      	bne.n	8008564 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008554:	4b5b      	ldr	r3, [pc, #364]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	2380      	movs	r3, #128	@ 0x80
 800855a:	049b      	lsls	r3, r3, #18
 800855c:	4013      	ands	r3, r2
 800855e:	d138      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e0a9      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d107      	bne.n	800857c <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800856c:	4b55      	ldr	r3, [pc, #340]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	2380      	movs	r3, #128	@ 0x80
 8008572:	029b      	lsls	r3, r3, #10
 8008574:	4013      	ands	r3, r2
 8008576:	d12c      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e09d      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008584:	4b4f      	ldr	r3, [pc, #316]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2202      	movs	r2, #2
 800858a:	4013      	ands	r3, r2
 800858c:	d121      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e092      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d107      	bne.n	80085aa <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800859a:	4b4a      	ldr	r3, [pc, #296]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	2380      	movs	r3, #128	@ 0x80
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	4013      	ands	r3, r2
 80085a4:	d115      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e086      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d107      	bne.n	80085c2 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085b2:	4a44      	ldr	r2, [pc, #272]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 80085b4:	2394      	movs	r3, #148	@ 0x94
 80085b6:	58d3      	ldr	r3, [r2, r3]
 80085b8:	2202      	movs	r2, #2
 80085ba:	4013      	ands	r3, r2
 80085bc:	d109      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e07a      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085c2:	4a40      	ldr	r2, [pc, #256]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 80085c4:	2390      	movs	r3, #144	@ 0x90
 80085c6:	58d3      	ldr	r3, [r2, r3]
 80085c8:	2202      	movs	r2, #2
 80085ca:	4013      	ands	r3, r2
 80085cc:	d101      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e072      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085d2:	4b3c      	ldr	r3, [pc, #240]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2207      	movs	r2, #7
 80085d8:	4393      	bics	r3, r2
 80085da:	0019      	movs	r1, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	4b38      	ldr	r3, [pc, #224]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 80085e2:	430a      	orrs	r2, r1
 80085e4:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085e6:	f7fb fba7 	bl	8003d38 <HAL_GetTick>
 80085ea:	0003      	movs	r3, r0
 80085ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ee:	e009      	b.n	8008604 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085f0:	f7fb fba2 	bl	8003d38 <HAL_GetTick>
 80085f4:	0002      	movs	r2, r0
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	4a33      	ldr	r2, [pc, #204]	@ (80086c8 <HAL_RCC_ClockConfig+0x1c4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e059      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008604:	4b2f      	ldr	r3, [pc, #188]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2238      	movs	r2, #56	@ 0x38
 800860a:	401a      	ands	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	429a      	cmp	r2, r3
 8008614:	d1ec      	bne.n	80085f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2202      	movs	r2, #2
 800861c:	4013      	ands	r3, r2
 800861e:	d009      	beq.n	8008634 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008620:	4b28      	ldr	r3, [pc, #160]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	4a29      	ldr	r2, [pc, #164]	@ (80086cc <HAL_RCC_ClockConfig+0x1c8>)
 8008626:	4013      	ands	r3, r2
 8008628:	0019      	movs	r1, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	4b25      	ldr	r3, [pc, #148]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008630:	430a      	orrs	r2, r1
 8008632:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008634:	4b22      	ldr	r3, [pc, #136]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2207      	movs	r2, #7
 800863a:	4013      	ands	r3, r2
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d211      	bcs.n	8008666 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008642:	4b1f      	ldr	r3, [pc, #124]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2207      	movs	r2, #7
 8008648:	4393      	bics	r3, r2
 800864a:	0019      	movs	r1, r3
 800864c:	4b1c      	ldr	r3, [pc, #112]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008654:	4b1a      	ldr	r3, [pc, #104]	@ (80086c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2207      	movs	r2, #7
 800865a:	4013      	ands	r3, r2
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d001      	beq.n	8008666 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e028      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2204      	movs	r2, #4
 800866c:	4013      	ands	r3, r2
 800866e:	d009      	beq.n	8008684 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008670:	4b14      	ldr	r3, [pc, #80]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	4a16      	ldr	r2, [pc, #88]	@ (80086d0 <HAL_RCC_ClockConfig+0x1cc>)
 8008676:	4013      	ands	r3, r2
 8008678:	0019      	movs	r1, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	4b11      	ldr	r3, [pc, #68]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008680:	430a      	orrs	r2, r1
 8008682:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8008684:	f000 f82a 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8008688:	0001      	movs	r1, r0
 800868a:	4b0e      	ldr	r3, [pc, #56]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c0>)
 800868c:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	220f      	movs	r2, #15
 8008692:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8008694:	4a0f      	ldr	r2, [pc, #60]	@ (80086d4 <HAL_RCC_ClockConfig+0x1d0>)
 8008696:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008698:	001a      	movs	r2, r3
 800869a:	231f      	movs	r3, #31
 800869c:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800869e:	000a      	movs	r2, r1
 80086a0:	40da      	lsrs	r2, r3
 80086a2:	4b0d      	ldr	r3, [pc, #52]	@ (80086d8 <HAL_RCC_ClockConfig+0x1d4>)
 80086a4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80086a6:	250b      	movs	r5, #11
 80086a8:	197c      	adds	r4, r7, r5
 80086aa:	2003      	movs	r0, #3
 80086ac:	f7fb faea 	bl	8003c84 <HAL_InitTick>
 80086b0:	0003      	movs	r3, r0
 80086b2:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80086b4:	197b      	adds	r3, r7, r5
 80086b6:	781b      	ldrb	r3, [r3, #0]
}
 80086b8:	0018      	movs	r0, r3
 80086ba:	46bd      	mov	sp, r7
 80086bc:	b004      	add	sp, #16
 80086be:	bdb0      	pop	{r4, r5, r7, pc}
 80086c0:	40022000 	.word	0x40022000
 80086c4:	40021000 	.word	0x40021000
 80086c8:	00001388 	.word	0x00001388
 80086cc:	fffff0ff 	.word	0xfffff0ff
 80086d0:	ffff8fff 	.word	0xffff8fff
 80086d4:	08015b34 	.word	0x08015b34
 80086d8:	20000000 	.word	0x20000000

080086dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	@ 0x28
 80086e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ea:	4b46      	ldr	r3, [pc, #280]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2238      	movs	r2, #56	@ 0x38
 80086f0:	4013      	ands	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086f4:	4b43      	ldr	r3, [pc, #268]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2203      	movs	r2, #3
 80086fa:	4013      	ands	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RCC_GetSysClockFreq+0x34>
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b18      	cmp	r3, #24
 8008708:	d125      	bne.n	8008756 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d122      	bne.n	8008756 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008710:	4b3c      	ldr	r3, [pc, #240]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2208      	movs	r2, #8
 8008716:	4013      	ands	r3, r2
 8008718:	d107      	bne.n	800872a <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800871a:	4a3a      	ldr	r2, [pc, #232]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 800871c:	2394      	movs	r3, #148	@ 0x94
 800871e:	58d3      	ldr	r3, [r2, r3]
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	220f      	movs	r2, #15
 8008724:	4013      	ands	r3, r2
 8008726:	627b      	str	r3, [r7, #36]	@ 0x24
 8008728:	e005      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800872a:	4b36      	ldr	r3, [pc, #216]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	091b      	lsrs	r3, r3, #4
 8008730:	220f      	movs	r2, #15
 8008732:	4013      	ands	r3, r2
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008738:	2b0b      	cmp	r3, #11
 800873a:	d901      	bls.n	8008740 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8008740:	4b31      	ldr	r3, [pc, #196]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008744:	0092      	lsls	r2, r2, #2
 8008746:	58d3      	ldr	r3, [r2, r3]
 8008748:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11b      	bne.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008754:	e018      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b08      	cmp	r3, #8
 800875a:	d102      	bne.n	8008762 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800875c:	4b2b      	ldr	r3, [pc, #172]	@ (800880c <HAL_RCC_GetSysClockFreq+0x130>)
 800875e:	623b      	str	r3, [r7, #32]
 8008760:	e012      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b10      	cmp	r3, #16
 8008766:	d102      	bne.n	800876e <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008768:	4b29      	ldr	r3, [pc, #164]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x134>)
 800876a:	623b      	str	r3, [r7, #32]
 800876c:	e00c      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b20      	cmp	r3, #32
 8008772:	d103      	bne.n	800877c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008774:	23fa      	movs	r3, #250	@ 0xfa
 8008776:	01db      	lsls	r3, r3, #7
 8008778:	623b      	str	r3, [r7, #32]
 800877a:	e005      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b28      	cmp	r3, #40	@ 0x28
 8008780:	d102      	bne.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008782:	2380      	movs	r3, #128	@ 0x80
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	2b18      	cmp	r3, #24
 800878c:	d135      	bne.n	80087fa <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800878e:	4b1d      	ldr	r3, [pc, #116]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2203      	movs	r2, #3
 8008794:	4013      	ands	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008798:	4b1a      	ldr	r3, [pc, #104]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	091b      	lsrs	r3, r3, #4
 800879e:	2207      	movs	r2, #7
 80087a0:	4013      	ands	r3, r2
 80087a2:	3301      	adds	r3, #1
 80087a4:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d003      	beq.n	80087b4 <HAL_RCC_GetSysClockFreq+0xd8>
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d003      	beq.n	80087ba <HAL_RCC_GetSysClockFreq+0xde>
 80087b2:	e005      	b.n	80087c0 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80087b4:	4b15      	ldr	r3, [pc, #84]	@ (800880c <HAL_RCC_GetSysClockFreq+0x130>)
 80087b6:	61fb      	str	r3, [r7, #28]
        break;
 80087b8:	e005      	b.n	80087c6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80087ba:	4b15      	ldr	r3, [pc, #84]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x134>)
 80087bc:	61fb      	str	r3, [r7, #28]
        break;
 80087be:	e002      	b.n	80087c6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	61fb      	str	r3, [r7, #28]
        break;
 80087c4:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80087c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	227f      	movs	r2, #127	@ 0x7f
 80087ce:	4013      	ands	r3, r2
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	4353      	muls	r3, r2
 80087d4:	68f9      	ldr	r1, [r7, #12]
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7f7 fcb2 	bl	8000140 <__udivsi3>
 80087dc:	0003      	movs	r3, r0
 80087de:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80087e0:	4b08      	ldr	r3, [pc, #32]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x128>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	0f5b      	lsrs	r3, r3, #29
 80087e6:	2207      	movs	r2, #7
 80087e8:	4013      	ands	r3, r2
 80087ea:	3301      	adds	r3, #1
 80087ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68b8      	ldr	r0, [r7, #8]
 80087f2:	f7f7 fca5 	bl	8000140 <__udivsi3>
 80087f6:	0003      	movs	r3, r0
 80087f8:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80087fa:	6a3b      	ldr	r3, [r7, #32]
}
 80087fc:	0018      	movs	r0, r3
 80087fe:	46bd      	mov	sp, r7
 8008800:	b00a      	add	sp, #40	@ 0x28
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40021000 	.word	0x40021000
 8008808:	08015b4c 	.word	0x08015b4c
 800880c:	00f42400 	.word	0x00f42400
 8008810:	003d0900 	.word	0x003d0900

08008814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008818:	4b02      	ldr	r3, [pc, #8]	@ (8008824 <HAL_RCC_GetHCLKFreq+0x10>)
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	0018      	movs	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	46c0      	nop			@ (mov r8, r8)
 8008824:	20000000 	.word	0x20000000

08008828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 800882c:	f7ff fff2 	bl	8008814 <HAL_RCC_GetHCLKFreq>
 8008830:	0001      	movs	r1, r0
 8008832:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	0b1b      	lsrs	r3, r3, #12
 8008838:	2207      	movs	r2, #7
 800883a:	4013      	ands	r3, r2
 800883c:	4a05      	ldr	r2, [pc, #20]	@ (8008854 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800883e:	5cd3      	ldrb	r3, [r2, r3]
 8008840:	001a      	movs	r2, r3
 8008842:	231f      	movs	r3, #31
 8008844:	4013      	ands	r3, r2
 8008846:	40d9      	lsrs	r1, r3
 8008848:	000b      	movs	r3, r1
}
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40021000 	.word	0x40021000
 8008854:	08015b44 	.word	0x08015b44

08008858 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008860:	2300      	movs	r3, #0
 8008862:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008864:	4b2f      	ldr	r3, [pc, #188]	@ (8008924 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8008866:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008868:	2380      	movs	r3, #128	@ 0x80
 800886a:	055b      	lsls	r3, r3, #21
 800886c:	4013      	ands	r3, r2
 800886e:	d004      	beq.n	800887a <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008870:	f7ff fa04 	bl	8007c7c <HAL_PWREx_GetVoltageRange>
 8008874:	0003      	movs	r3, r0
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	e017      	b.n	80088aa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800887a:	4b2a      	ldr	r3, [pc, #168]	@ (8008924 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800887c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800887e:	4b29      	ldr	r3, [pc, #164]	@ (8008924 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8008880:	2180      	movs	r1, #128	@ 0x80
 8008882:	0549      	lsls	r1, r1, #21
 8008884:	430a      	orrs	r2, r1
 8008886:	659a      	str	r2, [r3, #88]	@ 0x58
 8008888:	4b26      	ldr	r3, [pc, #152]	@ (8008924 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800888a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800888c:	2380      	movs	r3, #128	@ 0x80
 800888e:	055b      	lsls	r3, r3, #21
 8008890:	4013      	ands	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008896:	f7ff f9f1 	bl	8007c7c <HAL_PWREx_GetVoltageRange>
 800889a:	0003      	movs	r3, r0
 800889c:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800889e:	4b21      	ldr	r3, [pc, #132]	@ (8008924 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80088a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80088a2:	4b20      	ldr	r3, [pc, #128]	@ (8008924 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80088a4:	4920      	ldr	r1, [pc, #128]	@ (8008928 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80088a6:	400a      	ands	r2, r1
 80088a8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	2380      	movs	r3, #128	@ 0x80
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d111      	bne.n	80088d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b80      	cmp	r3, #128	@ 0x80
 80088b8:	d91c      	bls.n	80088f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80088be:	d902      	bls.n	80088c6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088c0:	2302      	movs	r3, #2
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	e016      	b.n	80088f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b90      	cmp	r3, #144	@ 0x90
 80088ca:	d902      	bls.n	80088d2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088cc:	2301      	movs	r3, #1
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e010      	b.n	80088f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80088d2:	2300      	movs	r3, #0
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	e00d      	b.n	80088f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b7f      	cmp	r3, #127	@ 0x7f
 80088dc:	d902      	bls.n	80088e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80088de:	2302      	movs	r3, #2
 80088e0:	613b      	str	r3, [r7, #16]
 80088e2:	e007      	b.n	80088f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b70      	cmp	r3, #112	@ 0x70
 80088e8:	d102      	bne.n	80088f0 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80088ea:	2301      	movs	r3, #1
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	e001      	b.n	80088f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80088f0:	2300      	movs	r3, #0
 80088f2:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088f4:	4b0d      	ldr	r3, [pc, #52]	@ (800892c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2207      	movs	r2, #7
 80088fa:	4393      	bics	r3, r2
 80088fc:	0019      	movs	r1, r3
 80088fe:	4b0b      	ldr	r3, [pc, #44]	@ (800892c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	430a      	orrs	r2, r1
 8008904:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008906:	4b09      	ldr	r3, [pc, #36]	@ (800892c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2207      	movs	r2, #7
 800890c:	4013      	ands	r3, r2
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	429a      	cmp	r2, r3
 8008912:	d001      	beq.n	8008918 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	0018      	movs	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	b006      	add	sp, #24
 8008920:	bd80      	pop	{r7, pc}
 8008922:	46c0      	nop			@ (mov r8, r8)
 8008924:	40021000 	.word	0x40021000
 8008928:	efffffff 	.word	0xefffffff
 800892c:	40022000 	.word	0x40022000

08008930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008938:	2313      	movs	r3, #19
 800893a:	18fb      	adds	r3, r7, r3
 800893c:	2200      	movs	r2, #0
 800893e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008940:	2312      	movs	r3, #18
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	2380      	movs	r3, #128	@ 0x80
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	4013      	ands	r3, r2
 8008952:	d100      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008954:	e0b7      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008956:	2011      	movs	r0, #17
 8008958:	183b      	adds	r3, r7, r0
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800895e:	4b4c      	ldr	r3, [pc, #304]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008960:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008962:	2380      	movs	r3, #128	@ 0x80
 8008964:	055b      	lsls	r3, r3, #21
 8008966:	4013      	ands	r3, r2
 8008968:	d110      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800896a:	4b49      	ldr	r3, [pc, #292]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800896c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800896e:	4b48      	ldr	r3, [pc, #288]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008970:	2180      	movs	r1, #128	@ 0x80
 8008972:	0549      	lsls	r1, r1, #21
 8008974:	430a      	orrs	r2, r1
 8008976:	659a      	str	r2, [r3, #88]	@ 0x58
 8008978:	4b45      	ldr	r3, [pc, #276]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800897a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800897c:	2380      	movs	r3, #128	@ 0x80
 800897e:	055b      	lsls	r3, r3, #21
 8008980:	4013      	ands	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
 8008984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008986:	183b      	adds	r3, r7, r0
 8008988:	2201      	movs	r2, #1
 800898a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800898c:	4b41      	ldr	r3, [pc, #260]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b40      	ldr	r3, [pc, #256]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008992:	2180      	movs	r1, #128	@ 0x80
 8008994:	0049      	lsls	r1, r1, #1
 8008996:	430a      	orrs	r2, r1
 8008998:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800899a:	f7fb f9cd 	bl	8003d38 <HAL_GetTick>
 800899e:	0003      	movs	r3, r0
 80089a0:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089a2:	e00b      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089a4:	f7fb f9c8 	bl	8003d38 <HAL_GetTick>
 80089a8:	0002      	movs	r2, r0
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d904      	bls.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80089b2:	2313      	movs	r3, #19
 80089b4:	18fb      	adds	r3, r7, r3
 80089b6:	2203      	movs	r2, #3
 80089b8:	701a      	strb	r2, [r3, #0]
        break;
 80089ba:	e005      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089bc:	4b35      	ldr	r3, [pc, #212]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	2380      	movs	r3, #128	@ 0x80
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	4013      	ands	r3, r2
 80089c6:	d0ed      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80089c8:	2313      	movs	r3, #19
 80089ca:	18fb      	adds	r3, r7, r3
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d168      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089d4:	2390      	movs	r3, #144	@ 0x90
 80089d6:	58d2      	ldr	r2, [r2, r3]
 80089d8:	23c0      	movs	r3, #192	@ 0xc0
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4013      	ands	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01f      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d01a      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089f0:	4a27      	ldr	r2, [pc, #156]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089f2:	2390      	movs	r3, #144	@ 0x90
 80089f4:	58d3      	ldr	r3, [r2, r3]
 80089f6:	4a28      	ldr	r2, [pc, #160]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089fc:	4a24      	ldr	r2, [pc, #144]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089fe:	2390      	movs	r3, #144	@ 0x90
 8008a00:	58d3      	ldr	r3, [r2, r3]
 8008a02:	4923      	ldr	r1, [pc, #140]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a04:	2280      	movs	r2, #128	@ 0x80
 8008a06:	0252      	lsls	r2, r2, #9
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	2290      	movs	r2, #144	@ 0x90
 8008a0c:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a0e:	4a20      	ldr	r2, [pc, #128]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a10:	2390      	movs	r3, #144	@ 0x90
 8008a12:	58d3      	ldr	r3, [r2, r3]
 8008a14:	491e      	ldr	r1, [pc, #120]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a16:	4a21      	ldr	r2, [pc, #132]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	2290      	movs	r2, #144	@ 0x90
 8008a1c:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a1e:	491c      	ldr	r1, [pc, #112]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a20:	2290      	movs	r2, #144	@ 0x90
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d017      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2e:	f7fb f983 	bl	8003d38 <HAL_GetTick>
 8008a32:	0003      	movs	r3, r0
 8008a34:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a36:	e00c      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a38:	f7fb f97e 	bl	8003d38 <HAL_GetTick>
 8008a3c:	0002      	movs	r2, r0
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	4a17      	ldr	r2, [pc, #92]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d904      	bls.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8008a48:	2313      	movs	r3, #19
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	701a      	strb	r2, [r3, #0]
            break;
 8008a50:	e005      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a52:	4a0f      	ldr	r2, [pc, #60]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a54:	2390      	movs	r3, #144	@ 0x90
 8008a56:	58d3      	ldr	r3, [r2, r3]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	d0ec      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8008a5e:	2313      	movs	r3, #19
 8008a60:	18fb      	adds	r3, r7, r3
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a68:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a6a:	2390      	movs	r3, #144	@ 0x90
 8008a6c:	58d3      	ldr	r3, [r2, r3]
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a70:	401a      	ands	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a76:	4906      	ldr	r1, [pc, #24]	@ (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	2290      	movs	r2, #144	@ 0x90
 8008a7c:	508b      	str	r3, [r1, r2]
 8008a7e:	e017      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a80:	2312      	movs	r3, #18
 8008a82:	18fb      	adds	r3, r7, r3
 8008a84:	2213      	movs	r2, #19
 8008a86:	18ba      	adds	r2, r7, r2
 8008a88:	7812      	ldrb	r2, [r2, #0]
 8008a8a:	701a      	strb	r2, [r3, #0]
 8008a8c:	e010      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008a8e:	46c0      	nop			@ (mov r8, r8)
 8008a90:	40021000 	.word	0x40021000
 8008a94:	40007000 	.word	0x40007000
 8008a98:	fffffcff 	.word	0xfffffcff
 8008a9c:	fffeffff 	.word	0xfffeffff
 8008aa0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa4:	2312      	movs	r3, #18
 8008aa6:	18fb      	adds	r3, r7, r3
 8008aa8:	2213      	movs	r2, #19
 8008aaa:	18ba      	adds	r2, r7, r2
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ab0:	2311      	movs	r3, #17
 8008ab2:	18fb      	adds	r3, r7, r3
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d105      	bne.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aba:	4ba4      	ldr	r3, [pc, #656]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008abc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008abe:	4ba3      	ldr	r3, [pc, #652]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ac0:	49a3      	ldr	r1, [pc, #652]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8008ac2:	400a      	ands	r2, r1
 8008ac4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2201      	movs	r2, #1
 8008acc:	4013      	ands	r3, r2
 8008ace:	d00b      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ad0:	4a9e      	ldr	r2, [pc, #632]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ad2:	2388      	movs	r3, #136	@ 0x88
 8008ad4:	58d3      	ldr	r3, [r2, r3]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	4393      	bics	r3, r2
 8008ada:	001a      	movs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	499a      	ldr	r1, [pc, #616]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	2288      	movs	r2, #136	@ 0x88
 8008ae6:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2202      	movs	r2, #2
 8008aee:	4013      	ands	r3, r2
 8008af0:	d00b      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008af2:	4a96      	ldr	r2, [pc, #600]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008af4:	2388      	movs	r3, #136	@ 0x88
 8008af6:	58d3      	ldr	r3, [r2, r3]
 8008af8:	220c      	movs	r2, #12
 8008afa:	4393      	bics	r3, r2
 8008afc:	001a      	movs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4992      	ldr	r1, [pc, #584]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	2288      	movs	r2, #136	@ 0x88
 8008b08:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2210      	movs	r2, #16
 8008b10:	4013      	ands	r3, r2
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b14:	4a8d      	ldr	r2, [pc, #564]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b16:	2388      	movs	r3, #136	@ 0x88
 8008b18:	58d3      	ldr	r3, [r2, r3]
 8008b1a:	4a8e      	ldr	r2, [pc, #568]	@ (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008b1c:	401a      	ands	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	498a      	ldr	r1, [pc, #552]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	2288      	movs	r2, #136	@ 0x88
 8008b28:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2208      	movs	r2, #8
 8008b30:	4013      	ands	r3, r2
 8008b32:	d00a      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008b34:	4a85      	ldr	r2, [pc, #532]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b36:	2388      	movs	r3, #136	@ 0x88
 8008b38:	58d3      	ldr	r3, [r2, r3]
 8008b3a:	4a87      	ldr	r2, [pc, #540]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8008b3c:	401a      	ands	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	4982      	ldr	r1, [pc, #520]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	2288      	movs	r2, #136	@ 0x88
 8008b48:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2204      	movs	r2, #4
 8008b50:	4013      	ands	r3, r2
 8008b52:	d00b      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8008b54:	4a7d      	ldr	r2, [pc, #500]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b56:	2388      	movs	r3, #136	@ 0x88
 8008b58:	58d3      	ldr	r3, [r2, r3]
 8008b5a:	22c0      	movs	r2, #192	@ 0xc0
 8008b5c:	4393      	bics	r3, r2
 8008b5e:	001a      	movs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	4979      	ldr	r1, [pc, #484]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	2288      	movs	r2, #136	@ 0x88
 8008b6a:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2220      	movs	r2, #32
 8008b72:	4013      	ands	r3, r2
 8008b74:	d00a      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b76:	4a75      	ldr	r2, [pc, #468]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b78:	2388      	movs	r3, #136	@ 0x88
 8008b7a:	58d3      	ldr	r3, [r2, r3]
 8008b7c:	4a77      	ldr	r2, [pc, #476]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008b7e:	401a      	ands	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	4971      	ldr	r1, [pc, #452]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	2288      	movs	r2, #136	@ 0x88
 8008b8a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2240      	movs	r2, #64	@ 0x40
 8008b92:	4013      	ands	r3, r2
 8008b94:	d00a      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b96:	4a6d      	ldr	r2, [pc, #436]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008b98:	2388      	movs	r3, #136	@ 0x88
 8008b9a:	58d3      	ldr	r3, [r2, r3]
 8008b9c:	4a70      	ldr	r2, [pc, #448]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8008b9e:	401a      	ands	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	4969      	ldr	r1, [pc, #420]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	2288      	movs	r2, #136	@ 0x88
 8008baa:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2280      	movs	r2, #128	@ 0x80
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	d00a      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bb6:	4a65      	ldr	r2, [pc, #404]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008bb8:	2388      	movs	r3, #136	@ 0x88
 8008bba:	58d3      	ldr	r3, [r2, r3]
 8008bbc:	4a69      	ldr	r2, [pc, #420]	@ (8008d64 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8008bbe:	401a      	ands	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	4961      	ldr	r1, [pc, #388]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	2288      	movs	r2, #136	@ 0x88
 8008bca:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	2380      	movs	r3, #128	@ 0x80
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	d00a      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008bda:	2388      	movs	r3, #136	@ 0x88
 8008bdc:	58d3      	ldr	r3, [r2, r3]
 8008bde:	4a62      	ldr	r2, [pc, #392]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008be0:	401a      	ands	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be6:	4959      	ldr	r1, [pc, #356]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	2288      	movs	r2, #136	@ 0x88
 8008bec:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	2380      	movs	r3, #128	@ 0x80
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d00a      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008bfa:	4a54      	ldr	r2, [pc, #336]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008bfc:	2388      	movs	r3, #136	@ 0x88
 8008bfe:	58d3      	ldr	r3, [r2, r3]
 8008c00:	4a5a      	ldr	r2, [pc, #360]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8008c02:	401a      	ands	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	4950      	ldr	r1, [pc, #320]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	2288      	movs	r2, #136	@ 0x88
 8008c0e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	2380      	movs	r3, #128	@ 0x80
 8008c16:	01db      	lsls	r3, r3, #7
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d017      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c20:	2380      	movs	r3, #128	@ 0x80
 8008c22:	055b      	lsls	r3, r3, #21
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d106      	bne.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8008c28:	4b48      	ldr	r3, [pc, #288]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	4b47      	ldr	r3, [pc, #284]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c2e:	2180      	movs	r1, #128	@ 0x80
 8008c30:	0249      	lsls	r1, r1, #9
 8008c32:	430a      	orrs	r2, r1
 8008c34:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c36:	4a45      	ldr	r2, [pc, #276]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c38:	2388      	movs	r3, #136	@ 0x88
 8008c3a:	58d3      	ldr	r3, [r2, r3]
 8008c3c:	4a4c      	ldr	r2, [pc, #304]	@ (8008d70 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8008c3e:	401a      	ands	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c44:	4941      	ldr	r1, [pc, #260]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	2288      	movs	r2, #136	@ 0x88
 8008c4a:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	2380      	movs	r3, #128	@ 0x80
 8008c52:	015b      	lsls	r3, r3, #5
 8008c54:	4013      	ands	r3, r2
 8008c56:	d017      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c5c:	2380      	movs	r3, #128	@ 0x80
 8008c5e:	051b      	lsls	r3, r3, #20
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008c64:	4b39      	ldr	r3, [pc, #228]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	4b38      	ldr	r3, [pc, #224]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c6a:	2180      	movs	r1, #128	@ 0x80
 8008c6c:	0449      	lsls	r1, r1, #17
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c72:	4a36      	ldr	r2, [pc, #216]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c74:	2388      	movs	r3, #136	@ 0x88
 8008c76:	58d3      	ldr	r3, [r2, r3]
 8008c78:	4a3e      	ldr	r2, [pc, #248]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008c7a:	401a      	ands	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c80:	4932      	ldr	r1, [pc, #200]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	2288      	movs	r2, #136	@ 0x88
 8008c86:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	2380      	movs	r3, #128	@ 0x80
 8008c8e:	019b      	lsls	r3, r3, #6
 8008c90:	4013      	ands	r3, r2
 8008c92:	d017      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c98:	2380      	movs	r3, #128	@ 0x80
 8008c9a:	051b      	lsls	r3, r3, #20
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d106      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	4b29      	ldr	r3, [pc, #164]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ca6:	2180      	movs	r1, #128	@ 0x80
 8008ca8:	0449      	lsls	r1, r1, #17
 8008caa:	430a      	orrs	r2, r1
 8008cac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cae:	4a27      	ldr	r2, [pc, #156]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008cb0:	2388      	movs	r3, #136	@ 0x88
 8008cb2:	58d3      	ldr	r3, [r2, r3]
 8008cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008cb6:	401a      	ands	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbc:	4923      	ldr	r1, [pc, #140]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	2288      	movs	r2, #136	@ 0x88
 8008cc2:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	2380      	movs	r3, #128	@ 0x80
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4013      	ands	r3, r2
 8008cce:	d017      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	045b      	lsls	r3, r3, #17
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d106      	bne.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008ce2:	2180      	movs	r1, #128	@ 0x80
 8008ce4:	0449      	lsls	r1, r1, #17
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008cea:	4a18      	ldr	r2, [pc, #96]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008cec:	2388      	movs	r3, #136	@ 0x88
 8008cee:	58d3      	ldr	r3, [r2, r3]
 8008cf0:	4a21      	ldr	r2, [pc, #132]	@ (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8008cf2:	401a      	ands	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf8:	4914      	ldr	r1, [pc, #80]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	2288      	movs	r2, #136	@ 0x88
 8008cfe:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	2380      	movs	r3, #128	@ 0x80
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	4013      	ands	r3, r2
 8008d0a:	d017      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d10:	2380      	movs	r3, #128	@ 0x80
 8008d12:	049b      	lsls	r3, r3, #18
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d106      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8008d18:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008d1e:	2180      	movs	r1, #128	@ 0x80
 8008d20:	0449      	lsls	r1, r1, #17
 8008d22:	430a      	orrs	r2, r1
 8008d24:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008d26:	4a09      	ldr	r2, [pc, #36]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008d28:	2388      	movs	r3, #136	@ 0x88
 8008d2a:	58d3      	ldr	r3, [r2, r3]
 8008d2c:	4a12      	ldr	r2, [pc, #72]	@ (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8008d2e:	401a      	ands	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d34:	4905      	ldr	r1, [pc, #20]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	2288      	movs	r2, #136	@ 0x88
 8008d3a:	508b      	str	r3, [r1, r2]

  }

  return status;
 8008d3c:	2312      	movs	r3, #18
 8008d3e:	18fb      	adds	r3, r7, r3
 8008d40:	781b      	ldrb	r3, [r3, #0]
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b006      	add	sp, #24
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	efffffff 	.word	0xefffffff
 8008d54:	fffff3ff 	.word	0xfffff3ff
 8008d58:	fffffcff 	.word	0xfffffcff
 8008d5c:	ffffcfff 	.word	0xffffcfff
 8008d60:	fffcffff 	.word	0xfffcffff
 8008d64:	fff3ffff 	.word	0xfff3ffff
 8008d68:	ffcfffff 	.word	0xffcfffff
 8008d6c:	ff3fffff 	.word	0xff3fffff
 8008d70:	cfffffff 	.word	0xcfffffff
 8008d74:	f3ffffff 	.word	0xf3ffffff
 8008d78:	feffffff 	.word	0xfeffffff

08008d7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d7c:	b590      	push	{r4, r7, lr}
 8008d7e:	b089      	sub	sp, #36	@ 0x24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	2380      	movs	r3, #128	@ 0x80
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d154      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008d92:	4ad5      	ldr	r2, [pc, #852]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008d94:	2390      	movs	r3, #144	@ 0x90
 8008d96:	58d2      	ldr	r2, [r2, r3]
 8008d98:	23c0      	movs	r3, #192	@ 0xc0
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	23c0      	movs	r3, #192	@ 0xc0
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d039      	beq.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	23c0      	movs	r3, #192	@ 0xc0
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d901      	bls.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8008db4:	f000 fd1a 	bl	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d006      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d00f      	beq.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8008dcc:	f000 fd0e 	bl	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dd0:	4ac5      	ldr	r2, [pc, #788]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008dd2:	2390      	movs	r3, #144	@ 0x90
 8008dd4:	58d3      	ldr	r3, [r2, r3]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	4013      	ands	r3, r2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d001      	beq.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8008dde:	f000 fd07 	bl	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8008de2:	2380      	movs	r3, #128	@ 0x80
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	61fb      	str	r3, [r7, #28]
        break;
 8008de8:	f000 fd02 	bl	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008dec:	4abe      	ldr	r2, [pc, #760]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008dee:	2394      	movs	r3, #148	@ 0x94
 8008df0:	58d3      	ldr	r3, [r2, r3]
 8008df2:	2202      	movs	r2, #2
 8008df4:	4013      	ands	r3, r2
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d001      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8008dfa:	f000 fcfb 	bl	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008dfe:	4aba      	ldr	r2, [pc, #744]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008e00:	2394      	movs	r3, #148	@ 0x94
 8008e02:	58d3      	ldr	r3, [r2, r3]
 8008e04:	2204      	movs	r2, #4
 8008e06:	4013      	ands	r3, r2
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d103      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8008e0c:	23fa      	movs	r3, #250	@ 0xfa
 8008e0e:	61fb      	str	r3, [r7, #28]
        break;
 8008e10:	f000 fcf0 	bl	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8008e14:	23fa      	movs	r3, #250	@ 0xfa
 8008e16:	01db      	lsls	r3, r3, #7
 8008e18:	61fb      	str	r3, [r7, #28]
        break;
 8008e1a:	f000 fceb 	bl	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e1e:	4bb2      	ldr	r3, [pc, #712]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	2380      	movs	r3, #128	@ 0x80
 8008e24:	029b      	lsls	r3, r3, #10
 8008e26:	401a      	ands	r2, r3
 8008e28:	2380      	movs	r3, #128	@ 0x80
 8008e2a:	029b      	lsls	r3, r3, #10
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d001      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8008e30:	f000 fce2 	bl	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8008e34:	4bad      	ldr	r3, [pc, #692]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8008e36:	61fb      	str	r3, [r7, #28]
        break;
 8008e38:	f000 fcde 	bl	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	2380      	movs	r3, #128	@ 0x80
 8008e40:	029b      	lsls	r3, r3, #10
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d100      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8008e46:	e11a      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	2380      	movs	r3, #128	@ 0x80
 8008e4c:	029b      	lsls	r3, r3, #10
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d901      	bls.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008e52:	f000 fcd3 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	025b      	lsls	r3, r3, #9
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d100      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008e60:	e10d      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	2380      	movs	r3, #128	@ 0x80
 8008e66:	025b      	lsls	r3, r3, #9
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008e6c:	f000 fcc6 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	2380      	movs	r3, #128	@ 0x80
 8008e74:	01db      	lsls	r3, r3, #7
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d100      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008e7a:	e1eb      	b.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	2380      	movs	r3, #128	@ 0x80
 8008e80:	01db      	lsls	r3, r3, #7
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d901      	bls.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008e86:	f000 fcb9 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	2380      	movs	r3, #128	@ 0x80
 8008e8e:	019b      	lsls	r3, r3, #6
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d101      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8008e94:	f000 fc50 	bl	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	2380      	movs	r3, #128	@ 0x80
 8008e9c:	019b      	lsls	r3, r3, #6
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008ea2:	f000 fcab 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	2380      	movs	r3, #128	@ 0x80
 8008eaa:	015b      	lsls	r3, r3, #5
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d101      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008eb0:	f000 fbe2 	bl	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	2380      	movs	r3, #128	@ 0x80
 8008eb8:	015b      	lsls	r3, r3, #5
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008ebe:	f000 fc9d 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	2380      	movs	r3, #128	@ 0x80
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d101      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008ecc:	f000 fba9 	bl	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	2380      	movs	r3, #128	@ 0x80
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d901      	bls.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8008eda:	f000 fc8f 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	2380      	movs	r3, #128	@ 0x80
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d101      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008ee8:	f000 fb70 	bl	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	2380      	movs	r3, #128	@ 0x80
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d901      	bls.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008ef6:	f000 fc81 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d100      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8008f04:	e305      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	2380      	movs	r3, #128	@ 0x80
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8008f10:	f000 fc74 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	2380      	movs	r3, #128	@ 0x80
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d100      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008f1e:	e29b      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	2380      	movs	r3, #128	@ 0x80
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d901      	bls.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8008f2a:	f000 fc67 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b80      	cmp	r3, #128	@ 0x80
 8008f32:	d100      	bne.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8008f34:	e22f      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b80      	cmp	r3, #128	@ 0x80
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008f3c:	f000 fc5e 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d80f      	bhi.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8008f4c:	f000 fc56 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d901      	bls.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8008f56:	f000 fc51 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	009a      	lsls	r2, r3, #2
 8008f5e:	4b64      	ldr	r3, [pc, #400]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8008f60:	18d3      	adds	r3, r2, r3
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	469f      	mov	pc, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b40      	cmp	r3, #64	@ 0x40
 8008f6a:	d100      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008f6c:	e1df      	b.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8008f6e:	f000 fc45 	bl	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008f72:	4a5d      	ldr	r2, [pc, #372]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008f74:	2388      	movs	r3, #136	@ 0x88
 8008f76:	58d3      	ldr	r3, [r2, r3]
 8008f78:	2203      	movs	r2, #3
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d025      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d82d      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d827      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d005      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8008fa2:	e020      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008fa4:	f7ff fc40 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	61fb      	str	r3, [r7, #28]
            break;
 8008fac:	e022      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8008fae:	f7ff fb95 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	61fb      	str	r3, [r7, #28]
            break;
 8008fb6:	e01d      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	2380      	movs	r3, #128	@ 0x80
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	401a      	ands	r2, r3
 8008fc2:	2380      	movs	r3, #128	@ 0x80
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d110      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8008fca:	4b4a      	ldr	r3, [pc, #296]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8008fcc:	61fb      	str	r3, [r7, #28]
            break;
 8008fce:	e00d      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008fd0:	4a45      	ldr	r2, [pc, #276]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008fd2:	2390      	movs	r3, #144	@ 0x90
 8008fd4:	58d3      	ldr	r3, [r2, r3]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	4013      	ands	r3, r2
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d109      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8008fde:	2380      	movs	r3, #128	@ 0x80
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	61fb      	str	r3, [r7, #28]
            break;
 8008fe4:	e005      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8008fe6:	46c0      	nop			@ (mov r8, r8)
 8008fe8:	f000 fc09 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008fec:	46c0      	nop			@ (mov r8, r8)
 8008fee:	f000 fc06 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008ff2:	46c0      	nop			@ (mov r8, r8)
        break;
 8008ff4:	f000 fc03 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008ffa:	2388      	movs	r3, #136	@ 0x88
 8008ffc:	58d3      	ldr	r3, [r2, r3]
 8008ffe:	220c      	movs	r2, #12
 8009000:	4013      	ands	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2b0c      	cmp	r3, #12
 8009008:	d025      	beq.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b0c      	cmp	r3, #12
 800900e:	d82d      	bhi.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b08      	cmp	r3, #8
 8009014:	d013      	beq.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b08      	cmp	r3, #8
 800901a:	d827      	bhi.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b04      	cmp	r3, #4
 8009026:	d005      	beq.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8009028:	e020      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800902a:	f7ff fbfd 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800902e:	0003      	movs	r3, r0
 8009030:	61fb      	str	r3, [r7, #28]
            break;
 8009032:	e022      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8009034:	f7ff fb52 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009038:	0003      	movs	r3, r0
 800903a:	61fb      	str	r3, [r7, #28]
            break;
 800903c:	e01d      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800903e:	4b2a      	ldr	r3, [pc, #168]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	2380      	movs	r3, #128	@ 0x80
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	401a      	ands	r2, r3
 8009048:	2380      	movs	r3, #128	@ 0x80
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	429a      	cmp	r2, r3
 800904e:	d110      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8009050:	4b28      	ldr	r3, [pc, #160]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8009052:	61fb      	str	r3, [r7, #28]
            break;
 8009054:	e00d      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009056:	4a24      	ldr	r2, [pc, #144]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8009058:	2390      	movs	r3, #144	@ 0x90
 800905a:	58d3      	ldr	r3, [r2, r3]
 800905c:	2202      	movs	r2, #2
 800905e:	4013      	ands	r3, r2
 8009060:	2b02      	cmp	r3, #2
 8009062:	d109      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8009064:	2380      	movs	r3, #128	@ 0x80
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	61fb      	str	r3, [r7, #28]
            break;
 800906a:	e005      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 800906c:	46c0      	nop			@ (mov r8, r8)
 800906e:	f000 fbc6 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	f000 fbc3 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009078:	46c0      	nop			@ (mov r8, r8)
        break;
 800907a:	f000 fbc0 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 800907e:	f7ff fbd3 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8009082:	0003      	movs	r3, r0
 8009084:	61fb      	str	r3, [r7, #28]
        break;
 8009086:	f000 fbba 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800908a:	4a17      	ldr	r2, [pc, #92]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800908c:	2388      	movs	r3, #136	@ 0x88
 800908e:	58d2      	ldr	r2, [r2, r3]
 8009090:	23c0      	movs	r3, #192	@ 0xc0
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	4013      	ands	r3, r2
 8009096:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	23c0      	movs	r3, #192	@ 0xc0
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	429a      	cmp	r2, r3
 80090a0:	d036      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	23c0      	movs	r3, #192	@ 0xc0
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d83c      	bhi.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	2380      	movs	r3, #128	@ 0x80
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d020      	beq.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	2380      	movs	r3, #128	@ 0x80
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	429a      	cmp	r2, r3
 80090be:	d832      	bhi.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	2380      	movs	r3, #128	@ 0x80
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d005      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 80090d0:	e029      	b.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80090d2:	f7ff fba9 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80090d6:	0003      	movs	r3, r0
 80090d8:	61fb      	str	r3, [r7, #28]
            break;
 80090da:	e02b      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80090dc:	f7ff fafe 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 80090e0:	0003      	movs	r3, r0
 80090e2:	61fb      	str	r3, [r7, #28]
            break;
 80090e4:	e026      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80090e6:	46c0      	nop			@ (mov r8, r8)
 80090e8:	40021000 	.word	0x40021000
 80090ec:	0001e848 	.word	0x0001e848
 80090f0:	08015b7c 	.word	0x08015b7c
 80090f4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090f8:	4bbb      	ldr	r3, [pc, #748]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	2380      	movs	r3, #128	@ 0x80
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	401a      	ands	r2, r3
 8009102:	2380      	movs	r3, #128	@ 0x80
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	429a      	cmp	r2, r3
 8009108:	d110      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 800910a:	4bb8      	ldr	r3, [pc, #736]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800910c:	61fb      	str	r3, [r7, #28]
            break;
 800910e:	e00d      	b.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009110:	4ab5      	ldr	r2, [pc, #724]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009112:	2390      	movs	r3, #144	@ 0x90
 8009114:	58d3      	ldr	r3, [r2, r3]
 8009116:	2202      	movs	r2, #2
 8009118:	4013      	ands	r3, r2
 800911a:	2b02      	cmp	r3, #2
 800911c:	d109      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 800911e:	2380      	movs	r3, #128	@ 0x80
 8009120:	021b      	lsls	r3, r3, #8
 8009122:	61fb      	str	r3, [r7, #28]
            break;
 8009124:	e005      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8009126:	46c0      	nop			@ (mov r8, r8)
 8009128:	f000 fb69 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800912c:	46c0      	nop			@ (mov r8, r8)
 800912e:	f000 fb66 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009132:	46c0      	nop			@ (mov r8, r8)
        break;
 8009134:	f000 fb63 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8009138:	4aab      	ldr	r2, [pc, #684]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800913a:	2388      	movs	r3, #136	@ 0x88
 800913c:	58d2      	ldr	r2, [r2, r3]
 800913e:	23c0      	movs	r3, #192	@ 0xc0
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4013      	ands	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	23c0      	movs	r3, #192	@ 0xc0
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	429a      	cmp	r2, r3
 800914e:	d02d      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	23c0      	movs	r3, #192	@ 0xc0
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	429a      	cmp	r2, r3
 8009158:	d833      	bhi.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	2380      	movs	r3, #128	@ 0x80
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	429a      	cmp	r2, r3
 8009162:	d017      	beq.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	2380      	movs	r3, #128	@ 0x80
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	429a      	cmp	r2, r3
 800916c:	d829      	bhi.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	2380      	movs	r3, #128	@ 0x80
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	429a      	cmp	r2, r3
 800917c:	d005      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800917e:	e020      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8009180:	f7ff fb52 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8009184:	0003      	movs	r3, r0
 8009186:	61fb      	str	r3, [r7, #28]
            break;
 8009188:	e022      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 800918a:	f7ff faa7 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 800918e:	0003      	movs	r3, r0
 8009190:	61fb      	str	r3, [r7, #28]
            break;
 8009192:	e01d      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009194:	4b94      	ldr	r3, [pc, #592]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	2380      	movs	r3, #128	@ 0x80
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	401a      	ands	r2, r3
 800919e:	2380      	movs	r3, #128	@ 0x80
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d110      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 80091a6:	4b91      	ldr	r3, [pc, #580]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80091a8:	61fb      	str	r3, [r7, #28]
            break;
 80091aa:	e00d      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091ac:	4a8e      	ldr	r2, [pc, #568]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80091ae:	2390      	movs	r3, #144	@ 0x90
 80091b0:	58d3      	ldr	r3, [r2, r3]
 80091b2:	2202      	movs	r2, #2
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d109      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 80091ba:	2380      	movs	r3, #128	@ 0x80
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	61fb      	str	r3, [r7, #28]
            break;
 80091c0:	e005      	b.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	f000 fb1b 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80091c8:	46c0      	nop			@ (mov r8, r8)
 80091ca:	f000 fb18 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80091ce:	46c0      	nop			@ (mov r8, r8)
        break;
 80091d0:	f000 fb15 	bl	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80091d4:	4a84      	ldr	r2, [pc, #528]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80091d6:	2388      	movs	r3, #136	@ 0x88
 80091d8:	58d3      	ldr	r3, [r2, r3]
 80091da:	22c0      	movs	r2, #192	@ 0xc0
 80091dc:	4013      	ands	r3, r2
 80091de:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80091e4:	d025      	beq.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80091ea:	d82d      	bhi.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2b80      	cmp	r3, #128	@ 0x80
 80091f0:	d013      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b80      	cmp	r3, #128	@ 0x80
 80091f6:	d827      	bhi.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b40      	cmp	r3, #64	@ 0x40
 8009202:	d005      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8009204:	e020      	b.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8009206:	f7ff fb0f 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800920a:	0003      	movs	r3, r0
 800920c:	61fb      	str	r3, [r7, #28]
            break;
 800920e:	e020      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8009210:	f7ff fa64 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009214:	0003      	movs	r3, r0
 8009216:	61fb      	str	r3, [r7, #28]
            break;
 8009218:	e01b      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800921a:	4b73      	ldr	r3, [pc, #460]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	2380      	movs	r3, #128	@ 0x80
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	401a      	ands	r2, r3
 8009224:	2380      	movs	r3, #128	@ 0x80
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	429a      	cmp	r2, r3
 800922a:	d10f      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 800922c:	4b6f      	ldr	r3, [pc, #444]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800922e:	61fb      	str	r3, [r7, #28]
            break;
 8009230:	e00c      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009232:	4a6d      	ldr	r2, [pc, #436]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009234:	2390      	movs	r3, #144	@ 0x90
 8009236:	58d3      	ldr	r3, [r2, r3]
 8009238:	2202      	movs	r2, #2
 800923a:	4013      	ands	r3, r2
 800923c:	2b02      	cmp	r3, #2
 800923e:	d107      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	61fb      	str	r3, [r7, #28]
            break;
 8009246:	e003      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8009248:	46c0      	nop			@ (mov r8, r8)
 800924a:	e2d8      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800924c:	46c0      	nop			@ (mov r8, r8)
 800924e:	e2d6      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009250:	46c0      	nop			@ (mov r8, r8)
        break;
 8009252:	e2d4      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009254:	4a64      	ldr	r2, [pc, #400]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009256:	2388      	movs	r3, #136	@ 0x88
 8009258:	58d2      	ldr	r2, [r2, r3]
 800925a:	23c0      	movs	r3, #192	@ 0xc0
 800925c:	059b      	lsls	r3, r3, #22
 800925e:	4013      	ands	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	059b      	lsls	r3, r3, #22
 8009268:	429a      	cmp	r2, r3
 800926a:	d012      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	2380      	movs	r3, #128	@ 0x80
 8009270:	059b      	lsls	r3, r3, #22
 8009272:	429a      	cmp	r2, r3
 8009274:	d825      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	2380      	movs	r3, #128	@ 0x80
 8009280:	055b      	lsls	r3, r3, #21
 8009282:	429a      	cmp	r2, r3
 8009284:	d014      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8009286:	e01c      	b.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8009288:	f7ff fa28 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 800928c:	0003      	movs	r3, r0
 800928e:	61fb      	str	r3, [r7, #28]
            break;
 8009290:	e018      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009292:	4b55      	ldr	r3, [pc, #340]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	2380      	movs	r3, #128	@ 0x80
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	401a      	ands	r2, r3
 800929c:	2380      	movs	r3, #128	@ 0x80
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d102      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 80092a4:	4b51      	ldr	r3, [pc, #324]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80092a6:	61fb      	str	r3, [r7, #28]
            break;
 80092a8:	e00c      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
            break;
 80092ae:	e009      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80092b0:	2408      	movs	r4, #8
 80092b2:	193b      	adds	r3, r7, r4
 80092b4:	0018      	movs	r0, r3
 80092b6:	f000 faad 	bl	8009814 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80092ba:	193b      	adds	r3, r7, r4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	61fb      	str	r3, [r7, #28]
            break;
 80092c0:	e000      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 80092c2:	46c0      	nop			@ (mov r8, r8)
        break;
 80092c4:	e29b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80092c6:	4a48      	ldr	r2, [pc, #288]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80092c8:	2388      	movs	r3, #136	@ 0x88
 80092ca:	58d2      	ldr	r2, [r2, r3]
 80092cc:	23c0      	movs	r3, #192	@ 0xc0
 80092ce:	019b      	lsls	r3, r3, #6
 80092d0:	4013      	ands	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	2380      	movs	r3, #128	@ 0x80
 80092d8:	019b      	lsls	r3, r3, #6
 80092da:	429a      	cmp	r2, r3
 80092dc:	d017      	beq.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	2380      	movs	r3, #128	@ 0x80
 80092e2:	019b      	lsls	r3, r3, #6
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d81e      	bhi.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d005      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	2380      	movs	r3, #128	@ 0x80
 80092f2:	015b      	lsls	r3, r3, #5
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d005      	beq.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80092f8:	e015      	b.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80092fa:	f7ff fa95 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80092fe:	0003      	movs	r3, r0
 8009300:	61fb      	str	r3, [r7, #28]
            break;
 8009302:	e013      	b.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8009304:	f7ff f9ea 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009308:	0003      	movs	r3, r0
 800930a:	61fb      	str	r3, [r7, #28]
            break;
 800930c:	e00e      	b.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800930e:	4b36      	ldr	r3, [pc, #216]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	2380      	movs	r3, #128	@ 0x80
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	401a      	ands	r2, r3
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	429a      	cmp	r2, r3
 800931e:	d104      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8009320:	4b32      	ldr	r3, [pc, #200]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8009322:	61fb      	str	r3, [r7, #28]
            break;
 8009324:	e001      	b.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8009326:	46c0      	nop			@ (mov r8, r8)
 8009328:	e269      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800932a:	46c0      	nop			@ (mov r8, r8)
        break;
 800932c:	e267      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800932e:	4a2e      	ldr	r2, [pc, #184]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009330:	2388      	movs	r3, #136	@ 0x88
 8009332:	58d2      	ldr	r2, [r2, r3]
 8009334:	23c0      	movs	r3, #192	@ 0xc0
 8009336:	029b      	lsls	r3, r3, #10
 8009338:	4013      	ands	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	2380      	movs	r3, #128	@ 0x80
 8009340:	029b      	lsls	r3, r3, #10
 8009342:	429a      	cmp	r2, r3
 8009344:	d017      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	2380      	movs	r3, #128	@ 0x80
 800934a:	029b      	lsls	r3, r3, #10
 800934c:	429a      	cmp	r2, r3
 800934e:	d81e      	bhi.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	2380      	movs	r3, #128	@ 0x80
 800935a:	025b      	lsls	r3, r3, #9
 800935c:	429a      	cmp	r2, r3
 800935e:	d005      	beq.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8009360:	e015      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8009362:	f7ff fa61 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8009366:	0003      	movs	r3, r0
 8009368:	61fb      	str	r3, [r7, #28]
            break;
 800936a:	e013      	b.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 800936c:	f7ff f9b6 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009370:	0003      	movs	r3, r0
 8009372:	61fb      	str	r3, [r7, #28]
            break;
 8009374:	e00e      	b.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009376:	4b1c      	ldr	r3, [pc, #112]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	2380      	movs	r3, #128	@ 0x80
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	401a      	ands	r2, r3
 8009380:	2380      	movs	r3, #128	@ 0x80
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	429a      	cmp	r2, r3
 8009386:	d104      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8009388:	4b18      	ldr	r3, [pc, #96]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800938a:	61fb      	str	r3, [r7, #28]
            break;
 800938c:	e001      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 800938e:	46c0      	nop			@ (mov r8, r8)
 8009390:	e235      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009392:	46c0      	nop			@ (mov r8, r8)
        break;
 8009394:	e233      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009396:	4a14      	ldr	r2, [pc, #80]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8009398:	2388      	movs	r3, #136	@ 0x88
 800939a:	58d2      	ldr	r2, [r2, r3]
 800939c:	23c0      	movs	r3, #192	@ 0xc0
 800939e:	031b      	lsls	r3, r3, #12
 80093a0:	4013      	ands	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	23c0      	movs	r3, #192	@ 0xc0
 80093a8:	031b      	lsls	r3, r3, #12
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d041      	beq.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	23c0      	movs	r3, #192	@ 0xc0
 80093b2:	031b      	lsls	r3, r3, #12
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d847      	bhi.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	2380      	movs	r3, #128	@ 0x80
 80093bc:	031b      	lsls	r3, r3, #12
 80093be:	429a      	cmp	r2, r3
 80093c0:	d02b      	beq.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	031b      	lsls	r3, r3, #12
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d83d      	bhi.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	2380      	movs	r3, #128	@ 0x80
 80093d6:	02db      	lsls	r3, r3, #11
 80093d8:	429a      	cmp	r2, r3
 80093da:	d009      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80093dc:	e034      	b.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80093de:	f7ff fa23 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80093e2:	0003      	movs	r3, r0
 80093e4:	61fb      	str	r3, [r7, #28]
            break;
 80093e6:	e036      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80093e8:	40021000 	.word	0x40021000
 80093ec:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80093f0:	4abd      	ldr	r2, [pc, #756]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80093f2:	2394      	movs	r3, #148	@ 0x94
 80093f4:	58d3      	ldr	r3, [r2, r3]
 80093f6:	2202      	movs	r2, #2
 80093f8:	4013      	ands	r3, r2
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d126      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80093fe:	4aba      	ldr	r2, [pc, #744]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009400:	2394      	movs	r3, #148	@ 0x94
 8009402:	58d3      	ldr	r3, [r2, r3]
 8009404:	2204      	movs	r2, #4
 8009406:	4013      	ands	r3, r2
 8009408:	2b04      	cmp	r3, #4
 800940a:	d102      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 800940c:	23fa      	movs	r3, #250	@ 0xfa
 800940e:	61fb      	str	r3, [r7, #28]
            break;
 8009410:	e01c      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8009412:	23fa      	movs	r3, #250	@ 0xfa
 8009414:	01db      	lsls	r3, r3, #7
 8009416:	61fb      	str	r3, [r7, #28]
            break;
 8009418:	e018      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800941a:	4bb3      	ldr	r3, [pc, #716]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	2380      	movs	r3, #128	@ 0x80
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	401a      	ands	r2, r3
 8009424:	2380      	movs	r3, #128	@ 0x80
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	429a      	cmp	r2, r3
 800942a:	d111      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 800942c:	4baf      	ldr	r3, [pc, #700]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800942e:	61fb      	str	r3, [r7, #28]
            break;
 8009430:	e00e      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009432:	4aad      	ldr	r2, [pc, #692]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009434:	2390      	movs	r3, #144	@ 0x90
 8009436:	58d3      	ldr	r3, [r2, r3]
 8009438:	2202      	movs	r2, #2
 800943a:	4013      	ands	r3, r2
 800943c:	2b02      	cmp	r3, #2
 800943e:	d109      	bne.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8009440:	2380      	movs	r3, #128	@ 0x80
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	61fb      	str	r3, [r7, #28]
            break;
 8009446:	e005      	b.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8009448:	46c0      	nop			@ (mov r8, r8)
 800944a:	e1d8      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800944c:	46c0      	nop			@ (mov r8, r8)
 800944e:	e1d6      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009450:	46c0      	nop			@ (mov r8, r8)
 8009452:	e1d4      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009454:	46c0      	nop			@ (mov r8, r8)
        break;
 8009456:	e1d2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009458:	4aa3      	ldr	r2, [pc, #652]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800945a:	2388      	movs	r3, #136	@ 0x88
 800945c:	58d2      	ldr	r2, [r2, r3]
 800945e:	23c0      	movs	r3, #192	@ 0xc0
 8009460:	039b      	lsls	r3, r3, #14
 8009462:	4013      	ands	r3, r2
 8009464:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	23c0      	movs	r3, #192	@ 0xc0
 800946a:	039b      	lsls	r3, r3, #14
 800946c:	429a      	cmp	r2, r3
 800946e:	d03d      	beq.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	23c0      	movs	r3, #192	@ 0xc0
 8009474:	039b      	lsls	r3, r3, #14
 8009476:	429a      	cmp	r2, r3
 8009478:	d843      	bhi.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	2380      	movs	r3, #128	@ 0x80
 800947e:	039b      	lsls	r3, r3, #14
 8009480:	429a      	cmp	r2, r3
 8009482:	d027      	beq.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	2380      	movs	r3, #128	@ 0x80
 8009488:	039b      	lsls	r3, r3, #14
 800948a:	429a      	cmp	r2, r3
 800948c:	d839      	bhi.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	2380      	movs	r3, #128	@ 0x80
 8009498:	035b      	lsls	r3, r3, #13
 800949a:	429a      	cmp	r2, r3
 800949c:	d005      	beq.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 800949e:	e030      	b.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 80094a0:	f7ff f9c2 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80094a4:	0003      	movs	r3, r0
 80094a6:	61fb      	str	r3, [r7, #28]
            break;
 80094a8:	e032      	b.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80094aa:	4a8f      	ldr	r2, [pc, #572]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80094ac:	2394      	movs	r3, #148	@ 0x94
 80094ae:	58d3      	ldr	r3, [r2, r3]
 80094b0:	2202      	movs	r2, #2
 80094b2:	4013      	ands	r3, r2
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d126      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80094b8:	4a8b      	ldr	r2, [pc, #556]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80094ba:	2394      	movs	r3, #148	@ 0x94
 80094bc:	58d3      	ldr	r3, [r2, r3]
 80094be:	2204      	movs	r2, #4
 80094c0:	4013      	ands	r3, r2
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d102      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 80094c6:	23fa      	movs	r3, #250	@ 0xfa
 80094c8:	61fb      	str	r3, [r7, #28]
            break;
 80094ca:	e01c      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80094cc:	23fa      	movs	r3, #250	@ 0xfa
 80094ce:	01db      	lsls	r3, r3, #7
 80094d0:	61fb      	str	r3, [r7, #28]
            break;
 80094d2:	e018      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094d4:	4b84      	ldr	r3, [pc, #528]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	2380      	movs	r3, #128	@ 0x80
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	401a      	ands	r2, r3
 80094de:	2380      	movs	r3, #128	@ 0x80
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d111      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80094e6:	4b81      	ldr	r3, [pc, #516]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80094e8:	61fb      	str	r3, [r7, #28]
            break;
 80094ea:	e00e      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80094ec:	4a7e      	ldr	r2, [pc, #504]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80094ee:	2390      	movs	r3, #144	@ 0x90
 80094f0:	58d3      	ldr	r3, [r2, r3]
 80094f2:	2202      	movs	r2, #2
 80094f4:	4013      	ands	r3, r2
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d109      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80094fa:	2380      	movs	r3, #128	@ 0x80
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	61fb      	str	r3, [r7, #28]
            break;
 8009500:	e005      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8009502:	46c0      	nop			@ (mov r8, r8)
 8009504:	e17b      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009506:	46c0      	nop			@ (mov r8, r8)
 8009508:	e179      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800950a:	46c0      	nop			@ (mov r8, r8)
 800950c:	e177      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800950e:	46c0      	nop			@ (mov r8, r8)
        break;
 8009510:	e175      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009512:	4a75      	ldr	r2, [pc, #468]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009514:	2388      	movs	r3, #136	@ 0x88
 8009516:	58d2      	ldr	r2, [r2, r3]
 8009518:	23c0      	movs	r3, #192	@ 0xc0
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	4013      	ands	r3, r2
 800951e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	23c0      	movs	r3, #192	@ 0xc0
 8009524:	041b      	lsls	r3, r3, #16
 8009526:	429a      	cmp	r2, r3
 8009528:	d03d      	beq.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	23c0      	movs	r3, #192	@ 0xc0
 800952e:	041b      	lsls	r3, r3, #16
 8009530:	429a      	cmp	r2, r3
 8009532:	d843      	bhi.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	2380      	movs	r3, #128	@ 0x80
 8009538:	041b      	lsls	r3, r3, #16
 800953a:	429a      	cmp	r2, r3
 800953c:	d027      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	2380      	movs	r3, #128	@ 0x80
 8009542:	041b      	lsls	r3, r3, #16
 8009544:	429a      	cmp	r2, r3
 8009546:	d839      	bhi.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	2380      	movs	r3, #128	@ 0x80
 8009552:	03db      	lsls	r3, r3, #15
 8009554:	429a      	cmp	r2, r3
 8009556:	d005      	beq.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8009558:	e030      	b.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 800955a:	f7ff f965 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800955e:	0003      	movs	r3, r0
 8009560:	61fb      	str	r3, [r7, #28]
            break;
 8009562:	e032      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009564:	4a60      	ldr	r2, [pc, #384]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009566:	2394      	movs	r3, #148	@ 0x94
 8009568:	58d3      	ldr	r3, [r2, r3]
 800956a:	2202      	movs	r2, #2
 800956c:	4013      	ands	r3, r2
 800956e:	2b02      	cmp	r3, #2
 8009570:	d126      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8009572:	4a5d      	ldr	r2, [pc, #372]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009574:	2394      	movs	r3, #148	@ 0x94
 8009576:	58d3      	ldr	r3, [r2, r3]
 8009578:	2204      	movs	r2, #4
 800957a:	4013      	ands	r3, r2
 800957c:	2b04      	cmp	r3, #4
 800957e:	d102      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8009580:	23fa      	movs	r3, #250	@ 0xfa
 8009582:	61fb      	str	r3, [r7, #28]
            break;
 8009584:	e01c      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8009586:	23fa      	movs	r3, #250	@ 0xfa
 8009588:	01db      	lsls	r3, r3, #7
 800958a:	61fb      	str	r3, [r7, #28]
            break;
 800958c:	e018      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800958e:	4b56      	ldr	r3, [pc, #344]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	2380      	movs	r3, #128	@ 0x80
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	401a      	ands	r2, r3
 8009598:	2380      	movs	r3, #128	@ 0x80
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	429a      	cmp	r2, r3
 800959e:	d111      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 80095a0:	4b52      	ldr	r3, [pc, #328]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80095a2:	61fb      	str	r3, [r7, #28]
            break;
 80095a4:	e00e      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095a6:	4a50      	ldr	r2, [pc, #320]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80095a8:	2390      	movs	r3, #144	@ 0x90
 80095aa:	58d3      	ldr	r3, [r2, r3]
 80095ac:	2202      	movs	r2, #2
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d109      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 80095b4:	2380      	movs	r3, #128	@ 0x80
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	61fb      	str	r3, [r7, #28]
            break;
 80095ba:	e005      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 80095bc:	46c0      	nop			@ (mov r8, r8)
 80095be:	e11e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80095c0:	46c0      	nop			@ (mov r8, r8)
 80095c2:	e11c      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80095c4:	46c0      	nop			@ (mov r8, r8)
 80095c6:	e11a      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80095c8:	46c0      	nop			@ (mov r8, r8)
        break;
 80095ca:	e118      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80095cc:	4a46      	ldr	r2, [pc, #280]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80095ce:	2388      	movs	r3, #136	@ 0x88
 80095d0:	58d2      	ldr	r2, [r2, r3]
 80095d2:	2380      	movs	r3, #128	@ 0x80
 80095d4:	045b      	lsls	r3, r3, #17
 80095d6:	4013      	ands	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	2380      	movs	r3, #128	@ 0x80
 80095e4:	045b      	lsls	r3, r3, #17
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d011      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80095ea:	e019      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80095ec:	4b3e      	ldr	r3, [pc, #248]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	23e0      	movs	r3, #224	@ 0xe0
 80095f2:	01db      	lsls	r3, r3, #7
 80095f4:	4013      	ands	r3, r2
 80095f6:	d104      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80095f8:	f7ff f916 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 80095fc:	0003      	movs	r3, r0
 80095fe:	61fb      	str	r3, [r7, #28]
            break;
 8009600:	e00e      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8009602:	f7ff f911 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8009606:	0003      	movs	r3, r0
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	61fb      	str	r3, [r7, #28]
            break;
 800960c:	e008      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800960e:	2408      	movs	r4, #8
 8009610:	193b      	adds	r3, r7, r4
 8009612:	0018      	movs	r0, r3
 8009614:	f000 f8fe 	bl	8009814 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8009618:	193b      	adds	r3, r7, r4
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	61fb      	str	r3, [r7, #28]
            break;
 800961e:	46c0      	nop			@ (mov r8, r8)
        break;
 8009620:	e0ed      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8009622:	4a31      	ldr	r2, [pc, #196]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009624:	2388      	movs	r3, #136	@ 0x88
 8009626:	58d2      	ldr	r2, [r2, r3]
 8009628:	2380      	movs	r3, #128	@ 0x80
 800962a:	049b      	lsls	r3, r3, #18
 800962c:	4013      	ands	r3, r2
 800962e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	2380      	movs	r3, #128	@ 0x80
 800963a:	049b      	lsls	r3, r3, #18
 800963c:	429a      	cmp	r2, r3
 800963e:	d011      	beq.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8009640:	e019      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8009642:	4b29      	ldr	r3, [pc, #164]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	23e0      	movs	r3, #224	@ 0xe0
 8009648:	01db      	lsls	r3, r3, #7
 800964a:	4013      	ands	r3, r2
 800964c:	d104      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 800964e:	f7ff f8eb 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 8009652:	0003      	movs	r3, r0
 8009654:	61fb      	str	r3, [r7, #28]
            break;
 8009656:	e00e      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8009658:	f7ff f8e6 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800965c:	0003      	movs	r3, r0
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
            break;
 8009662:	e008      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8009664:	2408      	movs	r4, #8
 8009666:	193b      	adds	r3, r7, r4
 8009668:	0018      	movs	r0, r3
 800966a:	f000 f8d3 	bl	8009814 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800966e:	193b      	adds	r3, r7, r4
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	61fb      	str	r3, [r7, #28]
            break;
 8009674:	46c0      	nop			@ (mov r8, r8)
        break;
 8009676:	e0c2      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009678:	4a1b      	ldr	r2, [pc, #108]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800967a:	2388      	movs	r3, #136	@ 0x88
 800967c:	58d2      	ldr	r2, [r2, r3]
 800967e:	23c0      	movs	r3, #192	@ 0xc0
 8009680:	051b      	lsls	r3, r3, #20
 8009682:	4013      	ands	r3, r2
 8009684:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	23c0      	movs	r3, #192	@ 0xc0
 800968a:	051b      	lsls	r3, r3, #20
 800968c:	429a      	cmp	r2, r3
 800968e:	d017      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	23c0      	movs	r3, #192	@ 0xc0
 8009694:	051b      	lsls	r3, r3, #20
 8009696:	429a      	cmp	r2, r3
 8009698:	d84a      	bhi.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	051b      	lsls	r3, r3, #20
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d039      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	2380      	movs	r3, #128	@ 0x80
 80096a8:	051b      	lsls	r3, r3, #20
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d840      	bhi.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d03a      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	2380      	movs	r3, #128	@ 0x80
 80096b8:	04db      	lsls	r3, r3, #19
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d003      	beq.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 80096be:	e037      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 80096c2:	61fb      	str	r3, [r7, #28]
            break;
 80096c4:	e037      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80096c6:	4b08      	ldr	r3, [pc, #32]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2202      	movs	r2, #2
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d130      	bne.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80096d2:	4b05      	ldr	r3, [pc, #20]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2208      	movs	r2, #8
 80096d8:	4013      	ands	r3, r2
 80096da:	d00b      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80096dc:	4b02      	ldr	r3, [pc, #8]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	091b      	lsrs	r3, r3, #4
 80096e2:	220f      	movs	r2, #15
 80096e4:	4013      	ands	r3, r2
 80096e6:	e00b      	b.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80096e8:	40021000 	.word	0x40021000
 80096ec:	00f42400 	.word	0x00f42400
 80096f0:	02dc6c00 	.word	0x02dc6c00
 80096f4:	4a44      	ldr	r2, [pc, #272]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80096f6:	2394      	movs	r3, #148	@ 0x94
 80096f8:	58d3      	ldr	r3, [r2, r3]
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	220f      	movs	r2, #15
 80096fe:	4013      	ands	r3, r2
 8009700:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b0b      	cmp	r3, #11
 8009706:	d901      	bls.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8009708:	230b      	movs	r3, #11
 800970a:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 800970c:	4b3f      	ldr	r3, [pc, #252]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	0092      	lsls	r2, r2, #2
 8009712:	58d3      	ldr	r3, [r2, r3]
 8009714:	61fb      	str	r3, [r7, #28]
            break;
 8009716:	e00d      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8009718:	2408      	movs	r4, #8
 800971a:	193b      	adds	r3, r7, r4
 800971c:	0018      	movs	r0, r3
 800971e:	f000 f879 	bl	8009814 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8009722:	193b      	adds	r3, r7, r4
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	61fb      	str	r3, [r7, #28]
            break;
 8009728:	e005      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
            break;
 800972e:	e002      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8009730:	46c0      	nop			@ (mov r8, r8)
 8009732:	e064      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8009734:	46c0      	nop			@ (mov r8, r8)
        break;
 8009736:	e062      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009738:	4a33      	ldr	r2, [pc, #204]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800973a:	2388      	movs	r3, #136	@ 0x88
 800973c:	58d2      	ldr	r2, [r2, r3]
 800973e:	23c0      	movs	r3, #192	@ 0xc0
 8009740:	051b      	lsls	r3, r3, #20
 8009742:	4013      	ands	r3, r2
 8009744:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	23c0      	movs	r3, #192	@ 0xc0
 800974a:	051b      	lsls	r3, r3, #20
 800974c:	429a      	cmp	r2, r3
 800974e:	d017      	beq.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	23c0      	movs	r3, #192	@ 0xc0
 8009754:	051b      	lsls	r3, r3, #20
 8009756:	429a      	cmp	r2, r3
 8009758:	d844      	bhi.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	2380      	movs	r3, #128	@ 0x80
 800975e:	051b      	lsls	r3, r3, #20
 8009760:	429a      	cmp	r2, r3
 8009762:	d033      	beq.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	2380      	movs	r3, #128	@ 0x80
 8009768:	051b      	lsls	r3, r3, #20
 800976a:	429a      	cmp	r2, r3
 800976c:	d83a      	bhi.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d034      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	2380      	movs	r3, #128	@ 0x80
 8009778:	04db      	lsls	r3, r3, #19
 800977a:	429a      	cmp	r2, r3
 800977c:	d003      	beq.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 800977e:	e031      	b.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8009780:	4b23      	ldr	r3, [pc, #140]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8009782:	61fb      	str	r3, [r7, #28]
            break;
 8009784:	e031      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009786:	4b20      	ldr	r3, [pc, #128]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2202      	movs	r2, #2
 800978c:	4013      	ands	r3, r2
 800978e:	2b02      	cmp	r3, #2
 8009790:	d12a      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8009792:	4b1d      	ldr	r3, [pc, #116]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2208      	movs	r2, #8
 8009798:	4013      	ands	r3, r2
 800979a:	d005      	beq.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 800979c:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	091b      	lsrs	r3, r3, #4
 80097a2:	220f      	movs	r2, #15
 80097a4:	4013      	ands	r3, r2
 80097a6:	e005      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80097a8:	4a17      	ldr	r2, [pc, #92]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80097aa:	2394      	movs	r3, #148	@ 0x94
 80097ac:	58d3      	ldr	r3, [r2, r3]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	220f      	movs	r2, #15
 80097b2:	4013      	ands	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	2b0b      	cmp	r3, #11
 80097ba:	d901      	bls.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 80097bc:	230b      	movs	r3, #11
 80097be:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80097c0:	4b12      	ldr	r3, [pc, #72]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	0092      	lsls	r2, r2, #2
 80097c6:	58d3      	ldr	r3, [r2, r3]
 80097c8:	61fb      	str	r3, [r7, #28]
            break;
 80097ca:	e00d      	b.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80097cc:	2408      	movs	r4, #8
 80097ce:	193b      	adds	r3, r7, r4
 80097d0:	0018      	movs	r0, r3
 80097d2:	f000 f81f 	bl	8009814 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80097d6:	193b      	adds	r3, r7, r4
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	61fb      	str	r3, [r7, #28]
            break;
 80097dc:	e005      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	61fb      	str	r3, [r7, #28]
            break;
 80097e2:	e002      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 80097e4:	46c0      	nop			@ (mov r8, r8)
 80097e6:	e00a      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80097e8:	46c0      	nop			@ (mov r8, r8)
        break;
 80097ea:	e008      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80097ec:	46c0      	nop			@ (mov r8, r8)
 80097ee:	e006      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80097f0:	46c0      	nop			@ (mov r8, r8)
 80097f2:	e004      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80097f4:	46c0      	nop			@ (mov r8, r8)
 80097f6:	e002      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80097f8:	46c0      	nop			@ (mov r8, r8)
 80097fa:	e000      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80097fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80097fe:	69fb      	ldr	r3, [r7, #28]
}
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	b009      	add	sp, #36	@ 0x24
 8009806:	bd90      	pop	{r4, r7, pc}
 8009808:	40021000 	.word	0x40021000
 800980c:	08015b4c 	.word	0x08015b4c
 8009810:	02dc6c00 	.word	0x02dc6c00

08009814 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800981c:	4b58      	ldr	r3, [pc, #352]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	227f      	movs	r2, #127	@ 0x7f
 8009824:	4013      	ands	r3, r2
 8009826:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009828:	4b55      	ldr	r3, [pc, #340]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2203      	movs	r2, #3
 800982e:	4013      	ands	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8009832:	4b53      	ldr	r3, [pc, #332]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	091b      	lsrs	r3, r3, #4
 8009838:	2207      	movs	r2, #7
 800983a:	4013      	ands	r3, r2
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8009840:	4b4f      	ldr	r3, [pc, #316]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2208      	movs	r2, #8
 8009846:	4013      	ands	r3, r2
 8009848:	d005      	beq.n	8009856 <HAL_RCCEx_GetPLLClockFreq+0x42>
 800984a:	4b4d      	ldr	r3, [pc, #308]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	091b      	lsrs	r3, r3, #4
 8009850:	220f      	movs	r2, #15
 8009852:	4013      	ands	r3, r2
 8009854:	e005      	b.n	8009862 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8009856:	4a4a      	ldr	r2, [pc, #296]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009858:	2394      	movs	r3, #148	@ 0x94
 800985a:	58d3      	ldr	r3, [r2, r3]
 800985c:	0a1b      	lsrs	r3, r3, #8
 800985e:	220f      	movs	r2, #15
 8009860:	4013      	ands	r3, r2
 8009862:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b0b      	cmp	r3, #11
 8009868:	d901      	bls.n	800986e <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 800986a:	230b      	movs	r3, #11
 800986c:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b03      	cmp	r3, #3
 8009872:	d020      	beq.n	80098b6 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b03      	cmp	r3, #3
 8009878:	d827      	bhi.n	80098ca <HAL_RCCEx_GetPLLClockFreq+0xb6>
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d00c      	beq.n	800989a <HAL_RCCEx_GetPLLClockFreq+0x86>
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d121      	bne.n	80098ca <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	483e      	ldr	r0, [pc, #248]	@ (8009984 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 800988a:	f7f6 fc59 	bl	8000140 <__udivsi3>
 800988e:	0003      	movs	r3, r0
 8009890:	001a      	movs	r2, r3
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	4353      	muls	r3, r2
 8009896:	61fb      	str	r3, [r7, #28]
      break;
 8009898:	e025      	b.n	80098e6 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800989a:	4b3b      	ldr	r3, [pc, #236]	@ (8009988 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	0092      	lsls	r2, r2, #2
 80098a0:	58d3      	ldr	r3, [r2, r3]
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7f6 fc4b 	bl	8000140 <__udivsi3>
 80098aa:	0003      	movs	r3, r0
 80098ac:	001a      	movs	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	4353      	muls	r3, r2
 80098b2:	61fb      	str	r3, [r7, #28]
      break;
 80098b4:	e017      	b.n	80098e6 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80098b6:	68f9      	ldr	r1, [r7, #12]
 80098b8:	4834      	ldr	r0, [pc, #208]	@ (800998c <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80098ba:	f7f6 fc41 	bl	8000140 <__udivsi3>
 80098be:	0003      	movs	r3, r0
 80098c0:	001a      	movs	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	4353      	muls	r3, r2
 80098c6:	61fb      	str	r3, [r7, #28]
      break;
 80098c8:	e00d      	b.n	80098e6 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80098ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009988 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	0092      	lsls	r2, r2, #2
 80098d0:	58d3      	ldr	r3, [r2, r3]
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	0018      	movs	r0, r3
 80098d6:	f7f6 fc33 	bl	8000140 <__udivsi3>
 80098da:	0003      	movs	r3, r0
 80098dc:	001a      	movs	r2, r3
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4353      	muls	r3, r2
 80098e2:	61fb      	str	r3, [r7, #28]
      break;
 80098e4:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 80098e6:	4b26      	ldr	r3, [pc, #152]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	2380      	movs	r3, #128	@ 0x80
 80098ec:	025b      	lsls	r3, r3, #9
 80098ee:	4013      	ands	r3, r2
 80098f0:	d00e      	beq.n	8009910 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80098f2:	4b23      	ldr	r3, [pc, #140]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80098f4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80098f6:	0c5b      	lsrs	r3, r3, #17
 80098f8:	221f      	movs	r2, #31
 80098fa:	4013      	ands	r3, r2
 80098fc:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80098fe:	0019      	movs	r1, r3
 8009900:	69f8      	ldr	r0, [r7, #28]
 8009902:	f7f6 fc1d 	bl	8000140 <__udivsi3>
 8009906:	0003      	movs	r3, r0
 8009908:	001a      	movs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e002      	b.n	8009916 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8009916:	4b1a      	ldr	r3, [pc, #104]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	2380      	movs	r3, #128	@ 0x80
 800991c:	045b      	lsls	r3, r3, #17
 800991e:	4013      	ands	r3, r2
 8009920:	d00e      	beq.n	8009940 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8009922:	4b17      	ldr	r3, [pc, #92]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009924:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8009926:	0e5b      	lsrs	r3, r3, #25
 8009928:	2207      	movs	r2, #7
 800992a:	4013      	ands	r3, r2
 800992c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800992e:	0019      	movs	r1, r3
 8009930:	69f8      	ldr	r0, [r7, #28]
 8009932:	f7f6 fc05 	bl	8000140 <__udivsi3>
 8009936:	0003      	movs	r3, r0
 8009938:	001a      	movs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	e002      	b.n	8009946 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8009946:	4b0e      	ldr	r3, [pc, #56]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	2380      	movs	r3, #128	@ 0x80
 800994c:	055b      	lsls	r3, r3, #21
 800994e:	4013      	ands	r3, r2
 8009950:	d00e      	beq.n	8009970 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8009952:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8009954:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8009956:	0f5b      	lsrs	r3, r3, #29
 8009958:	2207      	movs	r2, #7
 800995a:	4013      	ands	r3, r2
 800995c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800995e:	0019      	movs	r1, r3
 8009960:	69f8      	ldr	r0, [r7, #28]
 8009962:	f7f6 fbed 	bl	8000140 <__udivsi3>
 8009966:	0003      	movs	r3, r0
 8009968:	001a      	movs	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 800996e:	e002      	b.n	8009976 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	609a      	str	r2, [r3, #8]
}
 8009976:	46c0      	nop			@ (mov r8, r8)
 8009978:	46bd      	mov	sp, r7
 800997a:	b008      	add	sp, #32
 800997c:	bd80      	pop	{r7, pc}
 800997e:	46c0      	nop			@ (mov r8, r8)
 8009980:	40021000 	.word	0x40021000
 8009984:	00f42400 	.word	0x00f42400
 8009988:	08015b4c 	.word	0x08015b4c
 800998c:	003d0900 	.word	0x003d0900

08009990 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009998:	4b1c      	ldr	r3, [pc, #112]	@ (8009a0c <HAL_RCCEx_CRSConfig+0x7c>)
 800999a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800999c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a0c <HAL_RCCEx_CRSConfig+0x7c>)
 800999e:	2180      	movs	r1, #128	@ 0x80
 80099a0:	0249      	lsls	r1, r1, #9
 80099a2:	430a      	orrs	r2, r1
 80099a4:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80099a6:	4b19      	ldr	r3, [pc, #100]	@ (8009a0c <HAL_RCCEx_CRSConfig+0x7c>)
 80099a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099aa:	4b18      	ldr	r3, [pc, #96]	@ (8009a0c <HAL_RCCEx_CRSConfig+0x7c>)
 80099ac:	4918      	ldr	r1, [pc, #96]	@ (8009a10 <HAL_RCCEx_CRSConfig+0x80>)
 80099ae:	400a      	ands	r2, r1
 80099b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	041b      	lsls	r3, r3, #16
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80099da:	4b0e      	ldr	r3, [pc, #56]	@ (8009a14 <HAL_RCCEx_CRSConfig+0x84>)
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80099e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <HAL_RCCEx_CRSConfig+0x84>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009a18 <HAL_RCCEx_CRSConfig+0x88>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	0019      	movs	r1, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	021a      	lsls	r2, r3, #8
 80099f0:	4b08      	ldr	r3, [pc, #32]	@ (8009a14 <HAL_RCCEx_CRSConfig+0x84>)
 80099f2:	430a      	orrs	r2, r1
 80099f4:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80099f6:	4b07      	ldr	r3, [pc, #28]	@ (8009a14 <HAL_RCCEx_CRSConfig+0x84>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b06      	ldr	r3, [pc, #24]	@ (8009a14 <HAL_RCCEx_CRSConfig+0x84>)
 80099fc:	2160      	movs	r1, #96	@ 0x60
 80099fe:	430a      	orrs	r2, r1
 8009a00:	601a      	str	r2, [r3, #0]
}
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b004      	add	sp, #16
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	46c0      	nop			@ (mov r8, r8)
 8009a0c:	40021000 	.word	0x40021000
 8009a10:	fffeffff 	.word	0xfffeffff
 8009a14:	40006c00 	.word	0x40006c00
 8009a18:	ffffc0ff 	.word	0xffffc0ff

08009a1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a24:	210f      	movs	r1, #15
 8009a26:	187b      	adds	r3, r7, r1
 8009a28:	2201      	movs	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d100      	bne.n	8009a34 <HAL_RTC_Init+0x18>
 8009a32:	e08b      	b.n	8009b4c <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8009a34:	187b      	adds	r3, r7, r1
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	222d      	movs	r2, #45	@ 0x2d
 8009a3e:	5c9b      	ldrb	r3, [r3, r2]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d107      	bne.n	8009a56 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	222c      	movs	r2, #44	@ 0x2c
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	0018      	movs	r0, r3
 8009a52:	f7f9 fe1b 	bl	800368c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	222d      	movs	r2, #45	@ 0x2d
 8009a5a:	2102      	movs	r1, #2
 8009a5c:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009a60:	22ca      	movs	r2, #202	@ 0xca
 8009a62:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a64:	4b3d      	ldr	r3, [pc, #244]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009a66:	2253      	movs	r2, #83	@ 0x53
 8009a68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f000 fa07 	bl	8009e80 <RTC_EnterInitMode>
 8009a72:	1e03      	subs	r3, r0, #0
 8009a74:	d00b      	beq.n	8009a8e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a76:	4b39      	ldr	r3, [pc, #228]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009a78:	22ff      	movs	r2, #255	@ 0xff
 8009a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	222d      	movs	r2, #45	@ 0x2d
 8009a80:	2104      	movs	r1, #4
 8009a82:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8009a84:	230f      	movs	r3, #15
 8009a86:	18fb      	adds	r3, r7, r3
 8009a88:	2201      	movs	r2, #1
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	e05e      	b.n	8009b4c <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009a8e:	4b33      	ldr	r3, [pc, #204]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	4b32      	ldr	r3, [pc, #200]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009a94:	4932      	ldr	r1, [pc, #200]	@ (8009b60 <HAL_RTC_Init+0x144>)
 8009a96:	400a      	ands	r2, r1
 8009a98:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009a9a:	4b30      	ldr	r3, [pc, #192]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009a9c:	6999      	ldr	r1, [r3, #24]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	431a      	orrs	r2, r3
 8009aae:	4b2b      	ldr	r3, [pc, #172]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68d9      	ldr	r1, [r3, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	041a      	lsls	r2, r3, #16
 8009abe:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009ac4:	4b25      	ldr	r3, [pc, #148]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	4a26      	ldr	r2, [pc, #152]	@ (8009b64 <HAL_RTC_Init+0x148>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	0019      	movs	r1, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	4b20      	ldr	r3, [pc, #128]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009ada:	430a      	orrs	r2, r1
 8009adc:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009ade:	4b1f      	ldr	r3, [pc, #124]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009ae4:	2180      	movs	r1, #128	@ 0x80
 8009ae6:	438a      	bics	r2, r1
 8009ae8:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009aea:	4b1c      	ldr	r3, [pc, #112]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	2220      	movs	r2, #32
 8009af0:	4013      	ands	r3, r2
 8009af2:	d110      	bne.n	8009b16 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	0018      	movs	r0, r3
 8009af8:	f000 f99c 	bl	8009e34 <HAL_RTC_WaitForSynchro>
 8009afc:	1e03      	subs	r3, r0, #0
 8009afe:	d00a      	beq.n	8009b16 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b00:	4b16      	ldr	r3, [pc, #88]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009b02:	22ff      	movs	r2, #255	@ 0xff
 8009b04:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	222d      	movs	r2, #45	@ 0x2d
 8009b0a:	2104      	movs	r1, #4
 8009b0c:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8009b0e:	230f      	movs	r3, #15
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	2201      	movs	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8009b16:	230f      	movs	r3, #15
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d115      	bne.n	8009b4c <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8009b20:	4b0e      	ldr	r3, [pc, #56]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	08d9      	lsrs	r1, r3, #3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1a      	ldr	r2, [r3, #32]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	4b08      	ldr	r3, [pc, #32]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b3e:	4b07      	ldr	r3, [pc, #28]	@ (8009b5c <HAL_RTC_Init+0x140>)
 8009b40:	22ff      	movs	r2, #255	@ 0xff
 8009b42:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	222d      	movs	r2, #45	@ 0x2d
 8009b48:	2101      	movs	r1, #1
 8009b4a:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8009b4c:	230f      	movs	r3, #15
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	781b      	ldrb	r3, [r3, #0]
}
 8009b52:	0018      	movs	r0, r3
 8009b54:	46bd      	mov	sp, r7
 8009b56:	b004      	add	sp, #16
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	40002800 	.word	0x40002800
 8009b60:	fb8fffbf 	.word	0xfb8fffbf
 8009b64:	ffffe0ff 	.word	0xffffe0ff

08009b68 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b68:	b590      	push	{r4, r7, lr}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	222c      	movs	r2, #44	@ 0x2c
 8009b78:	5c9b      	ldrb	r3, [r3, r2]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_RTC_SetTime+0x1a>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e0a7      	b.n	8009cd2 <HAL_RTC_SetTime+0x16a>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	222c      	movs	r2, #44	@ 0x2c
 8009b86:	2101      	movs	r1, #1
 8009b88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	222d      	movs	r2, #45	@ 0x2d
 8009b8e:	2102      	movs	r1, #2
 8009b90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b92:	4b52      	ldr	r3, [pc, #328]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009b94:	22ca      	movs	r2, #202	@ 0xca
 8009b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b98:	4b50      	ldr	r3, [pc, #320]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009b9a:	2253      	movs	r2, #83	@ 0x53
 8009b9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f000 f96d 	bl	8009e80 <RTC_EnterInitMode>
 8009ba6:	1e03      	subs	r3, r0, #0
 8009ba8:	d00c      	beq.n	8009bc4 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009baa:	4b4c      	ldr	r3, [pc, #304]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009bac:	22ff      	movs	r2, #255	@ 0xff
 8009bae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	222d      	movs	r2, #45	@ 0x2d
 8009bb4:	2104      	movs	r1, #4
 8009bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	222c      	movs	r2, #44	@ 0x2c
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e086      	b.n	8009cd2 <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8009bc4:	4b45      	ldr	r3, [pc, #276]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	23c0      	movs	r3, #192	@ 0xc0
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	401a      	ands	r2, r3
 8009bce:	2380      	movs	r3, #128	@ 0x80
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d053      	beq.n	8009c7e <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d124      	bne.n	8009c26 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	2240      	movs	r2, #64	@ 0x40
 8009be2:	4013      	ands	r3, r2
 8009be4:	d102      	bne.n	8009bec <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2200      	movs	r2, #0
 8009bea:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f000 f971 	bl	8009ed8 <RTC_ByteToBcd2>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	785b      	ldrb	r3, [r3, #1]
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f000 f96a 	bl	8009ed8 <RTC_ByteToBcd2>
 8009c04:	0003      	movs	r3, r0
 8009c06:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c08:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	789b      	ldrb	r3, [r3, #2]
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f000 f962 	bl	8009ed8 <RTC_ByteToBcd2>
 8009c14:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c16:	0022      	movs	r2, r4
 8009c18:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	78db      	ldrb	r3, [r3, #3]
 8009c1e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	e016      	b.n	8009c54 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009c26:	4b2d      	ldr	r3, [pc, #180]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	2240      	movs	r2, #64	@ 0x40
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	d102      	bne.n	8009c36 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	785b      	ldrb	r3, [r3, #1]
 8009c40:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c42:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c48:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	78db      	ldrb	r3, [r3, #3]
 8009c4e:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c50:	4313      	orrs	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8009c54:	4b21      	ldr	r3, [pc, #132]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4921      	ldr	r1, [pc, #132]	@ (8009ce0 <HAL_RTC_SetTime+0x178>)
 8009c5a:	400a      	ands	r2, r1
 8009c5c:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8009c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	4b1e      	ldr	r3, [pc, #120]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c64:	491f      	ldr	r1, [pc, #124]	@ (8009ce4 <HAL_RTC_SetTime+0x17c>)
 8009c66:	400a      	ands	r2, r1
 8009c68:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c6c:	6999      	ldr	r1, [r3, #24]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	431a      	orrs	r2, r3
 8009c78:	4b18      	ldr	r3, [pc, #96]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009c7e:	4b17      	ldr	r3, [pc, #92]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	4b16      	ldr	r3, [pc, #88]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c84:	2180      	movs	r1, #128	@ 0x80
 8009c86:	438a      	bics	r2, r1
 8009c88:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009c8a:	4b14      	ldr	r3, [pc, #80]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	4013      	ands	r3, r2
 8009c92:	d112      	bne.n	8009cba <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	0018      	movs	r0, r3
 8009c98:	f000 f8cc 	bl	8009e34 <HAL_RTC_WaitForSynchro>
 8009c9c:	1e03      	subs	r3, r0, #0
 8009c9e:	d00c      	beq.n	8009cba <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009ca2:	22ff      	movs	r2, #255	@ 0xff
 8009ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	222d      	movs	r2, #45	@ 0x2d
 8009caa:	2104      	movs	r1, #4
 8009cac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	222c      	movs	r2, #44	@ 0x2c
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e00b      	b.n	8009cd2 <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cba:	4b08      	ldr	r3, [pc, #32]	@ (8009cdc <HAL_RTC_SetTime+0x174>)
 8009cbc:	22ff      	movs	r2, #255	@ 0xff
 8009cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	222d      	movs	r2, #45	@ 0x2d
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	222c      	movs	r2, #44	@ 0x2c
 8009ccc:	2100      	movs	r1, #0
 8009cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
  }
}
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b007      	add	sp, #28
 8009cd8:	bd90      	pop	{r4, r7, pc}
 8009cda:	46c0      	nop			@ (mov r8, r8)
 8009cdc:	40002800 	.word	0x40002800
 8009ce0:	007f7f7f 	.word	0x007f7f7f
 8009ce4:	fffbffff 	.word	0xfffbffff

08009ce8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	222c      	movs	r2, #44	@ 0x2c
 8009cf8:	5c9b      	ldrb	r3, [r3, r2]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <HAL_RTC_SetDate+0x1a>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e090      	b.n	8009e24 <HAL_RTC_SetDate+0x13c>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	222c      	movs	r2, #44	@ 0x2c
 8009d06:	2101      	movs	r1, #1
 8009d08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	222d      	movs	r2, #45	@ 0x2d
 8009d0e:	2102      	movs	r1, #2
 8009d10:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10e      	bne.n	8009d36 <HAL_RTC_SetDate+0x4e>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	001a      	movs	r2, r3
 8009d1e:	2310      	movs	r3, #16
 8009d20:	4013      	ands	r3, r2
 8009d22:	d008      	beq.n	8009d36 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	2210      	movs	r2, #16
 8009d2a:	4393      	bics	r3, r2
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	330a      	adds	r3, #10
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11c      	bne.n	8009d76 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	78db      	ldrb	r3, [r3, #3]
 8009d40:	0018      	movs	r0, r3
 8009d42:	f000 f8c9 	bl	8009ed8 <RTC_ByteToBcd2>
 8009d46:	0003      	movs	r3, r0
 8009d48:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	785b      	ldrb	r3, [r3, #1]
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f000 f8c2 	bl	8009ed8 <RTC_ByteToBcd2>
 8009d54:	0003      	movs	r3, r0
 8009d56:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d58:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	789b      	ldrb	r3, [r3, #2]
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f000 f8ba 	bl	8009ed8 <RTC_ByteToBcd2>
 8009d64:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d66:	0022      	movs	r2, r4
 8009d68:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d70:	4313      	orrs	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	e00e      	b.n	8009d94 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	78db      	ldrb	r3, [r3, #3]
 8009d7a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009d82:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009d88:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009d90:	4313      	orrs	r3, r2
 8009d92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d94:	4b25      	ldr	r3, [pc, #148]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009d96:	22ca      	movs	r2, #202	@ 0xca
 8009d98:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d9a:	4b24      	ldr	r3, [pc, #144]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009d9c:	2253      	movs	r2, #83	@ 0x53
 8009d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	0018      	movs	r0, r3
 8009da4:	f000 f86c 	bl	8009e80 <RTC_EnterInitMode>
 8009da8:	1e03      	subs	r3, r0, #0
 8009daa:	d00c      	beq.n	8009dc6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dac:	4b1f      	ldr	r3, [pc, #124]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009dae:	22ff      	movs	r2, #255	@ 0xff
 8009db0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	222d      	movs	r2, #45	@ 0x2d
 8009db6:	2104      	movs	r1, #4
 8009db8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	222c      	movs	r2, #44	@ 0x2c
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e02e      	b.n	8009e24 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009dc6:	4b19      	ldr	r3, [pc, #100]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4919      	ldr	r1, [pc, #100]	@ (8009e30 <HAL_RTC_SetDate+0x148>)
 8009dcc:	400a      	ands	r2, r1
 8009dce:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009dd0:	4b16      	ldr	r3, [pc, #88]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	4b15      	ldr	r3, [pc, #84]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009dd6:	2180      	movs	r1, #128	@ 0x80
 8009dd8:	438a      	bics	r2, r1
 8009dda:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009ddc:	4b13      	ldr	r3, [pc, #76]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	2220      	movs	r2, #32
 8009de2:	4013      	ands	r3, r2
 8009de4:	d112      	bne.n	8009e0c <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	0018      	movs	r0, r3
 8009dea:	f000 f823 	bl	8009e34 <HAL_RTC_WaitForSynchro>
 8009dee:	1e03      	subs	r3, r0, #0
 8009df0:	d00c      	beq.n	8009e0c <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009df2:	4b0e      	ldr	r3, [pc, #56]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009df4:	22ff      	movs	r2, #255	@ 0xff
 8009df6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	222d      	movs	r2, #45	@ 0x2d
 8009dfc:	2104      	movs	r1, #4
 8009dfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	222c      	movs	r2, #44	@ 0x2c
 8009e04:	2100      	movs	r1, #0
 8009e06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e00b      	b.n	8009e24 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <HAL_RTC_SetDate+0x144>)
 8009e0e:	22ff      	movs	r2, #255	@ 0xff
 8009e10:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	222d      	movs	r2, #45	@ 0x2d
 8009e16:	2101      	movs	r1, #1
 8009e18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	222c      	movs	r2, #44	@ 0x2c
 8009e1e:	2100      	movs	r1, #0
 8009e20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009e22:	2300      	movs	r3, #0
  }
}
 8009e24:	0018      	movs	r0, r3
 8009e26:	46bd      	mov	sp, r7
 8009e28:	b007      	add	sp, #28
 8009e2a:	bd90      	pop	{r4, r7, pc}
 8009e2c:	40002800 	.word	0x40002800
 8009e30:	00ffff3f 	.word	0x00ffff3f

08009e34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e7c <HAL_RTC_WaitForSynchro+0x48>)
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	4b0e      	ldr	r3, [pc, #56]	@ (8009e7c <HAL_RTC_WaitForSynchro+0x48>)
 8009e42:	2120      	movs	r1, #32
 8009e44:	438a      	bics	r2, r1
 8009e46:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009e48:	f7f9 ff76 	bl	8003d38 <HAL_GetTick>
 8009e4c:	0003      	movs	r3, r0
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e50:	e00a      	b.n	8009e68 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e52:	f7f9 ff71 	bl	8003d38 <HAL_GetTick>
 8009e56:	0002      	movs	r2, r0
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	1ad2      	subs	r2, r2, r3
 8009e5c:	23fa      	movs	r3, #250	@ 0xfa
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d901      	bls.n	8009e68 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e005      	b.n	8009e74 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e68:	4b04      	ldr	r3, [pc, #16]	@ (8009e7c <HAL_RTC_WaitForSynchro+0x48>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	4013      	ands	r3, r2
 8009e70:	d0ef      	beq.n	8009e52 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	0018      	movs	r0, r3
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b004      	add	sp, #16
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	40002800 	.word	0x40002800

08009e80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009e88:	4b12      	ldr	r3, [pc, #72]	@ (8009ed4 <RTC_EnterInitMode+0x54>)
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2240      	movs	r2, #64	@ 0x40
 8009e8e:	4013      	ands	r3, r2
 8009e90:	d11a      	bne.n	8009ec8 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009e92:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <RTC_EnterInitMode+0x54>)
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <RTC_EnterInitMode+0x54>)
 8009e98:	2180      	movs	r1, #128	@ 0x80
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e9e:	f7f9 ff4b 	bl	8003d38 <HAL_GetTick>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009ea6:	e00a      	b.n	8009ebe <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ea8:	f7f9 ff46 	bl	8003d38 <HAL_GetTick>
 8009eac:	0002      	movs	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad2      	subs	r2, r2, r3
 8009eb2:	23fa      	movs	r3, #250	@ 0xfa
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d901      	bls.n	8009ebe <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e005      	b.n	8009eca <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009ebe:	4b05      	ldr	r3, [pc, #20]	@ (8009ed4 <RTC_EnterInitMode+0x54>)
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	2240      	movs	r2, #64	@ 0x40
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	d0ef      	beq.n	8009ea8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	0018      	movs	r0, r3
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	b004      	add	sp, #16
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	46c0      	nop			@ (mov r8, r8)
 8009ed4:	40002800 	.word	0x40002800

08009ed8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	0002      	movs	r2, r0
 8009ee0:	1dfb      	adds	r3, r7, #7
 8009ee2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009ee8:	230b      	movs	r3, #11
 8009eea:	18fb      	adds	r3, r7, r3
 8009eec:	1dfa      	adds	r2, r7, #7
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8009ef2:	e008      	b.n	8009f06 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009efa:	220b      	movs	r2, #11
 8009efc:	18bb      	adds	r3, r7, r2
 8009efe:	18ba      	adds	r2, r7, r2
 8009f00:	7812      	ldrb	r2, [r2, #0]
 8009f02:	3a0a      	subs	r2, #10
 8009f04:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8009f06:	210b      	movs	r1, #11
 8009f08:	187b      	adds	r3, r7, r1
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d8f1      	bhi.n	8009ef4 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	187b      	adds	r3, r7, r1
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	b2db      	uxtb	r3, r3
}
 8009f20:	0018      	movs	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b004      	add	sp, #16
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	222c      	movs	r2, #44	@ 0x2c
 8009f3a:	5c9b      	ldrb	r3, [r3, r2]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d101      	bne.n	8009f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e088      	b.n	800a056 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	222c      	movs	r2, #44	@ 0x2c
 8009f48:	2101      	movs	r1, #1
 8009f4a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	222d      	movs	r2, #45	@ 0x2d
 8009f50:	2102      	movs	r1, #2
 8009f52:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8009f54:	4b42      	ldr	r3, [pc, #264]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009f56:	699a      	ldr	r2, [r3, #24]
 8009f58:	2380      	movs	r3, #128	@ 0x80
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	d01c      	beq.n	8009f9a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8009f60:	f7f9 feea 	bl	8003d38 <HAL_GetTick>
 8009f64:	0003      	movs	r3, r0
 8009f66:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8009f68:	e012      	b.n	8009f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f6a:	f7f9 fee5 	bl	8003d38 <HAL_GetTick>
 8009f6e:	0002      	movs	r2, r0
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	1ad2      	subs	r2, r2, r3
 8009f74:	23fa      	movs	r3, #250	@ 0xfa
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d909      	bls.n	8009f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	222d      	movs	r2, #45	@ 0x2d
 8009f80:	2103      	movs	r1, #3
 8009f82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	222c      	movs	r2, #44	@ 0x2c
 8009f88:	2100      	movs	r1, #0
 8009f8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e062      	b.n	800a056 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8009f90:	4b33      	ldr	r3, [pc, #204]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	2204      	movs	r2, #4
 8009f96:	4013      	ands	r3, r2
 8009f98:	d1e7      	bne.n	8009f6a <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009f9a:	4b31      	ldr	r3, [pc, #196]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009f9c:	699a      	ldr	r2, [r3, #24]
 8009f9e:	4b30      	ldr	r3, [pc, #192]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009fa0:	4930      	ldr	r1, [pc, #192]	@ (800a064 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8009fa2:	400a      	ands	r2, r1
 8009fa4:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009fa6:	4b2e      	ldr	r3, [pc, #184]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009fa8:	2204      	movs	r2, #4
 8009faa:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8009fac:	f7f9 fec4 	bl	8003d38 <HAL_GetTick>
 8009fb0:	0003      	movs	r3, r0
 8009fb2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009fb4:	e015      	b.n	8009fe2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fb6:	f7f9 febf 	bl	8003d38 <HAL_GetTick>
 8009fba:	0002      	movs	r2, r0
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	1ad2      	subs	r2, r2, r3
 8009fc0:	23fa      	movs	r3, #250	@ 0xfa
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d90c      	bls.n	8009fe2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fc8:	4b25      	ldr	r3, [pc, #148]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009fca:	22ff      	movs	r2, #255	@ 0xff
 8009fcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	222d      	movs	r2, #45	@ 0x2d
 8009fd2:	2103      	movs	r1, #3
 8009fd4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	222c      	movs	r2, #44	@ 0x2c
 8009fda:	2100      	movs	r1, #0
 8009fdc:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e039      	b.n	800a056 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009fe2:	4b1f      	ldr	r3, [pc, #124]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	2204      	movs	r2, #4
 8009fe8:	4013      	ands	r3, r2
 8009fea:	d0e4      	beq.n	8009fb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	0419      	lsls	r1, r3, #16
 8009ff0:	4b1b      	ldr	r3, [pc, #108]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8009ff8:	4b19      	ldr	r3, [pc, #100]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	4393      	bics	r3, r2
 800a000:	0019      	movs	r1, r3
 800a002:	4b17      	ldr	r3, [pc, #92]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	430a      	orrs	r2, r1
 800a008:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d009      	beq.n	800a024 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 800a010:	4a15      	ldr	r2, [pc, #84]	@ (800a068 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800a012:	2384      	movs	r3, #132	@ 0x84
 800a014:	58d3      	ldr	r3, [r2, r3]
 800a016:	4914      	ldr	r1, [pc, #80]	@ (800a068 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800a018:	2280      	movs	r2, #128	@ 0x80
 800a01a:	0552      	lsls	r2, r2, #21
 800a01c:	4313      	orrs	r3, r2
 800a01e:	2284      	movs	r2, #132	@ 0x84
 800a020:	508b      	str	r3, [r1, r2]
 800a022:	e008      	b.n	800a036 <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a024:	4a10      	ldr	r2, [pc, #64]	@ (800a068 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800a026:	2380      	movs	r3, #128	@ 0x80
 800a028:	58d3      	ldr	r3, [r2, r3]
 800a02a:	490f      	ldr	r1, [pc, #60]	@ (800a068 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 800a02c:	2280      	movs	r2, #128	@ 0x80
 800a02e:	0552      	lsls	r2, r2, #21
 800a030:	4313      	orrs	r3, r2
 800a032:	2280      	movs	r2, #128	@ 0x80
 800a034:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800a036:	4b0a      	ldr	r3, [pc, #40]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	4b09      	ldr	r3, [pc, #36]	@ (800a060 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 800a03c:	2188      	movs	r1, #136	@ 0x88
 800a03e:	01c9      	lsls	r1, r1, #7
 800a040:	430a      	orrs	r2, r1
 800a042:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	222d      	movs	r2, #45	@ 0x2d
 800a048:	2101      	movs	r1, #1
 800a04a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	222c      	movs	r2, #44	@ 0x2c
 800a050:	2100      	movs	r1, #0
 800a052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	0018      	movs	r0, r3
 800a058:	46bd      	mov	sp, r7
 800a05a:	b006      	add	sp, #24
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	46c0      	nop			@ (mov r8, r8)
 800a060:	40002800 	.word	0x40002800
 800a064:	fffffbff 	.word	0xfffffbff
 800a068:	40021800 	.word	0x40021800

0800a06c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 800a074:	4b09      	ldr	r3, [pc, #36]	@ (800a09c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800a076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a078:	2204      	movs	r2, #4
 800a07a:	4013      	ands	r3, r2
 800a07c:	d006      	beq.n	800a08c <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800a07e:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800a080:	2204      	movs	r2, #4
 800a082:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	0018      	movs	r0, r3
 800a088:	f7f9 fc56 	bl	8003938 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	222d      	movs	r2, #45	@ 0x2d
 800a090:	2101      	movs	r1, #1
 800a092:	5499      	strb	r1, [r3, r2]
}
 800a094:	46c0      	nop			@ (mov r8, r8)
 800a096:	46bd      	mov	sp, r7
 800a098:	b002      	add	sp, #8
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	40002800 	.word	0x40002800

0800a0a0 <HAL_RTCEx_TamperIRQHandler>:
  * @brief  Handle Tamper interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TamperIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(TAMP->MISR);
 800a0a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a154 <HAL_RTCEx_TamperIRQHandler+0xb4>)
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ac:	60fb      	str	r3, [r7, #12]

  /* Immediately clear flags */
  WRITE_REG(TAMP->SCR, tmp);
 800a0ae:	4b29      	ldr	r3, [pc, #164]	@ (800a154 <HAL_RTCEx_TamperIRQHandler+0xb4>)
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Check Tamper1 status */
  if ((tmp & RTC_TAMPER_1) == RTC_TAMPER_1)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <HAL_RTCEx_TamperIRQHandler+0x24>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 1 Event registered Callback */
    hrtc->Tamper1EventCallback(hrtc);
#else
    /* Tamper1 callback */
    HAL_RTCEx_Tamper1EventCallback(hrtc);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f000 f84a 	bl	800a158 <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper2 status */
  if ((tmp & RTC_TAMPER_2) == RTC_TAMPER_2)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <HAL_RTCEx_TamperIRQHandler+0x34>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 2 Event registered Callback */
    hrtc->Tamper2EventCallback(hrtc);
#else
    /* Tamper2 callback */
    HAL_RTCEx_Tamper2EventCallback(hrtc);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f000 f84a 	bl	800a168 <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper3 status */
  if ((tmp & RTC_TAMPER_3) == RTC_TAMPER_3)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	4013      	ands	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <HAL_RTCEx_TamperIRQHandler+0x44>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 3 Event registered Callback */
    hrtc->Tamper3EventCallback(hrtc);
#else
    /* Tamper3 callback */
    HAL_RTCEx_Tamper3EventCallback(hrtc);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f000 f84a 	bl	800a178 <HAL_RTCEx_Tamper3EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper4 status */
  if ((tmp & RTC_TAMPER_4) == RTC_TAMPER_4)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2208      	movs	r2, #8
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <HAL_RTCEx_TamperIRQHandler+0x54>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 4 Event registered Callback */
    hrtc->Tamper4EventCallback(hrtc);
#else
    /* Tamper4 callback */
    HAL_RTCEx_Tamper4EventCallback(hrtc);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	f000 f84a 	bl	800a188 <HAL_RTCEx_Tamper4EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Tamper5 status */
  if ((tmp & RTC_TAMPER_5) == RTC_TAMPER_5)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	d003      	beq.n	800a104 <HAL_RTCEx_TamperIRQHandler+0x64>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Tamper 5 Event registered Callback */
    hrtc->Tamper5EventCallback(hrtc);
#else
    /* Tamper5 callback */
    HAL_RTCEx_Tamper5EventCallback(hrtc);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	0018      	movs	r0, r3
 800a100:	f000 f84a 	bl	800a198 <HAL_RTCEx_Tamper5EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Internal Tamper3 status */
  if ((tmp & RTC_INT_TAMPER_3) == RTC_INT_TAMPER_3)
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	2380      	movs	r3, #128	@ 0x80
 800a108:	02db      	lsls	r3, r3, #11
 800a10a:	4013      	ands	r3, r2
 800a10c:	d003      	beq.n	800a116 <HAL_RTCEx_TamperIRQHandler+0x76>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 3 Event registered Callback */
    hrtc->InternalTamper3EventCallback(hrtc);
#else
    /* Internal Tamper3 callback */
    HAL_RTCEx_InternalTamper3EventCallback(hrtc);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	0018      	movs	r0, r3
 800a112:	f000 f849 	bl	800a1a8 <HAL_RTCEx_InternalTamper3EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Internal Tamper4 status */
  if ((tmp & RTC_INT_TAMPER_4) == RTC_INT_TAMPER_4)
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	2380      	movs	r3, #128	@ 0x80
 800a11a:	031b      	lsls	r3, r3, #12
 800a11c:	4013      	ands	r3, r2
 800a11e:	d003      	beq.n	800a128 <HAL_RTCEx_TamperIRQHandler+0x88>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 4 Event registered Callback */
    hrtc->InternalTamper4EventCallback(hrtc);
#else
    /* Internal Tamper4 callback */
    HAL_RTCEx_InternalTamper4EventCallback(hrtc);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	0018      	movs	r0, r3
 800a124:	f000 f848 	bl	800a1b8 <HAL_RTCEx_InternalTamper4EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Check Internal Tamper5 status */
  if ((tmp & RTC_INT_TAMPER_5) == RTC_INT_TAMPER_5)
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	2380      	movs	r3, #128	@ 0x80
 800a12c:	035b      	lsls	r3, r3, #13
 800a12e:	4013      	ands	r3, r2
 800a130:	d003      	beq.n	800a13a <HAL_RTCEx_TamperIRQHandler+0x9a>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 5 Event registered Callback */
    hrtc->InternalTamper5EventCallback(hrtc);
#else
    /* Internal Tamper5 callback */
    HAL_RTCEx_InternalTamper5EventCallback(hrtc);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	0018      	movs	r0, r3
 800a136:	f000 f847 	bl	800a1c8 <HAL_RTCEx_InternalTamper5EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
  /* Check Internal Tamper6 status */
  if ((tmp & RTC_INT_TAMPER_6) == RTC_INT_TAMPER_6)
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	2380      	movs	r3, #128	@ 0x80
 800a13e:	039b      	lsls	r3, r3, #14
 800a140:	4013      	ands	r3, r2
 800a142:	d003      	beq.n	800a14c <HAL_RTCEx_TamperIRQHandler+0xac>
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Internal Tamper 6 Event registered Callback */
    hrtc->InternalTamper6EventCallback(hrtc);
#else
    /* Internal Tamper6 callback */
    HAL_RTCEx_InternalTamper6EventCallback(hrtc);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	0018      	movs	r0, r3
 800a148:	f000 f846 	bl	800a1d8 <HAL_RTCEx_InternalTamper6EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
}
 800a14c:	46c0      	nop			@ (mov r8, r8)
 800a14e:	46bd      	mov	sp, r7
 800a150:	b004      	add	sp, #16
 800a152:	bd80      	pop	{r7, pc}
 800a154:	4000b000 	.word	0x4000b000

0800a158 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 800a160:	46c0      	nop			@ (mov r8, r8)
 800a162:	46bd      	mov	sp, r7
 800a164:	b002      	add	sp, #8
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 800a170:	46c0      	nop			@ (mov r8, r8)
 800a172:	46bd      	mov	sp, r7
 800a174:	b002      	add	sp, #8
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 800a180:	46c0      	nop			@ (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b002      	add	sp, #8
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 800a190:	46c0      	nop			@ (mov r8, r8)
 800a192:	46bd      	mov	sp, r7
 800a194:	b002      	add	sp, #8
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 800a1a0:	46c0      	nop			@ (mov r8, r8)
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b002      	add	sp, #8
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 800a1b0:	46c0      	nop			@ (mov r8, r8)
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	b002      	add	sp, #8
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_RTCEx_InternalTamper4EventCallback>:
  * @brief  Internal Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamperEventCallback could be implemented in the user file
   */
}
 800a1c0:	46c0      	nop			@ (mov r8, r8)
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	b002      	add	sp, #8
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 800a1d0:	46c0      	nop			@ (mov r8, r8)
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	b002      	add	sp, #8
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <HAL_RTCEx_InternalTamper6EventCallback>:
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper6EventCallback could be implemented in the user file
   */
}
 800a1e0:	46c0      	nop			@ (mov r8, r8)
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b002      	add	sp, #8
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800a1f4:	4b06      	ldr	r3, [pc, #24]	@ (800a210 <HAL_RTCEx_BKUPWrite+0x28>)
 800a1f6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	18d3      	adds	r3, r2, r3
 800a200:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	601a      	str	r2, [r3, #0]
}
 800a208:	46c0      	nop			@ (mov r8, r8)
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b006      	add	sp, #24
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	4000b100 	.word	0x4000b100

0800a214 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800a21e:	4b06      	ldr	r3, [pc, #24]	@ (800a238 <HAL_RTCEx_BKUPRead+0x24>)
 800a220:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	18d3      	adds	r3, r2, r3
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
}
 800a230:	0018      	movs	r0, r3
 800a232:	46bd      	mov	sp, r7
 800a234:	b004      	add	sp, #16
 800a236:	bd80      	pop	{r7, pc}
 800a238:	4000b100 	.word	0x4000b100

0800a23c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e0a0      	b.n	800a390 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	2382      	movs	r3, #130	@ 0x82
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	429a      	cmp	r2, r3
 800a260:	d009      	beq.n	800a276 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	61da      	str	r2, [r3, #28]
 800a268:	e005      	b.n	800a276 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	225d      	movs	r2, #93	@ 0x5d
 800a280:	5c9b      	ldrb	r3, [r3, r2]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d107      	bne.n	800a298 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	225c      	movs	r2, #92	@ 0x5c
 800a28c:	2100      	movs	r1, #0
 800a28e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	0018      	movs	r0, r3
 800a294:	f7f9 fa42 	bl	800371c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	225d      	movs	r2, #93	@ 0x5d
 800a29c:	2102      	movs	r1, #2
 800a29e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2140      	movs	r1, #64	@ 0x40
 800a2ac:	438a      	bics	r2, r1
 800a2ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	23e0      	movs	r3, #224	@ 0xe0
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d902      	bls.n	800a2c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e002      	b.n	800a2c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2c2:	2380      	movs	r3, #128	@ 0x80
 800a2c4:	015b      	lsls	r3, r3, #5
 800a2c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68da      	ldr	r2, [r3, #12]
 800a2cc:	23f0      	movs	r3, #240	@ 0xf0
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d008      	beq.n	800a2e6 <HAL_SPI_Init+0xaa>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	23e0      	movs	r3, #224	@ 0xe0
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d002      	beq.n	800a2e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	2382      	movs	r3, #130	@ 0x82
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	401a      	ands	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6899      	ldr	r1, [r3, #8]
 800a2f4:	2384      	movs	r3, #132	@ 0x84
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	400b      	ands	r3, r1
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	2102      	movs	r1, #2
 800a302:	400b      	ands	r3, r1
 800a304:	431a      	orrs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	2101      	movs	r1, #1
 800a30c:	400b      	ands	r3, r1
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6999      	ldr	r1, [r3, #24]
 800a314:	2380      	movs	r3, #128	@ 0x80
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	400b      	ands	r3, r1
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	2138      	movs	r1, #56	@ 0x38
 800a322:	400b      	ands	r3, r1
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	2180      	movs	r1, #128	@ 0x80
 800a32c:	400b      	ands	r3, r1
 800a32e:	431a      	orrs	r2, r3
 800a330:	0011      	movs	r1, r2
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a336:	2380      	movs	r3, #128	@ 0x80
 800a338:	019b      	lsls	r3, r3, #6
 800a33a:	401a      	ands	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	0c1b      	lsrs	r3, r3, #16
 800a34a:	2204      	movs	r2, #4
 800a34c:	401a      	ands	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	2110      	movs	r1, #16
 800a354:	400b      	ands	r3, r1
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35c:	2108      	movs	r1, #8
 800a35e:	400b      	ands	r3, r1
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68d9      	ldr	r1, [r3, #12]
 800a366:	23f0      	movs	r3, #240	@ 0xf0
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	400b      	ands	r3, r1
 800a36c:	431a      	orrs	r2, r3
 800a36e:	0011      	movs	r1, r2
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	2380      	movs	r3, #128	@ 0x80
 800a374:	015b      	lsls	r3, r3, #5
 800a376:	401a      	ands	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	225d      	movs	r2, #93	@ 0x5d
 800a38a:	2101      	movs	r1, #1
 800a38c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	0018      	movs	r0, r3
 800a392:	46bd      	mov	sp, r7
 800a394:	b004      	add	sp, #16
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	603b      	str	r3, [r7, #0]
 800a3a4:	1dbb      	adds	r3, r7, #6
 800a3a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3a8:	231f      	movs	r3, #31
 800a3aa:	18fb      	adds	r3, r7, r3
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	225c      	movs	r2, #92	@ 0x5c
 800a3b4:	5c9b      	ldrb	r3, [r3, r2]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d101      	bne.n	800a3be <HAL_SPI_Transmit+0x26>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e147      	b.n	800a64e <HAL_SPI_Transmit+0x2b6>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	225c      	movs	r2, #92	@ 0x5c
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3c6:	f7f9 fcb7 	bl	8003d38 <HAL_GetTick>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a3ce:	2316      	movs	r3, #22
 800a3d0:	18fb      	adds	r3, r7, r3
 800a3d2:	1dba      	adds	r2, r7, #6
 800a3d4:	8812      	ldrh	r2, [r2, #0]
 800a3d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	225d      	movs	r2, #93	@ 0x5d
 800a3dc:	5c9b      	ldrb	r3, [r3, r2]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d004      	beq.n	800a3ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800a3e4:	231f      	movs	r3, #31
 800a3e6:	18fb      	adds	r3, r7, r3
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	701a      	strb	r2, [r3, #0]
    goto error;
 800a3ec:	e128      	b.n	800a640 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_SPI_Transmit+0x64>
 800a3f4:	1dbb      	adds	r3, r7, #6
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800a3fc:	231f      	movs	r3, #31
 800a3fe:	18fb      	adds	r3, r7, r3
 800a400:	2201      	movs	r2, #1
 800a402:	701a      	strb	r2, [r3, #0]
    goto error;
 800a404:	e11c      	b.n	800a640 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	225d      	movs	r2, #93	@ 0x5d
 800a40a:	2103      	movs	r1, #3
 800a40c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	1dba      	adds	r2, r7, #6
 800a41e:	8812      	ldrh	r2, [r2, #0]
 800a420:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	1dba      	adds	r2, r7, #6
 800a426:	8812      	ldrh	r2, [r2, #0]
 800a428:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2244      	movs	r2, #68	@ 0x44
 800a434:	2100      	movs	r1, #0
 800a436:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2246      	movs	r2, #70	@ 0x46
 800a43c:	2100      	movs	r1, #0
 800a43e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	2380      	movs	r3, #128	@ 0x80
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	429a      	cmp	r2, r3
 800a456:	d110      	bne.n	800a47a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2140      	movs	r1, #64	@ 0x40
 800a464:	438a      	bics	r2, r1
 800a466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2180      	movs	r1, #128	@ 0x80
 800a474:	01c9      	lsls	r1, r1, #7
 800a476:	430a      	orrs	r2, r1
 800a478:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2240      	movs	r2, #64	@ 0x40
 800a482:	4013      	ands	r3, r2
 800a484:	2b40      	cmp	r3, #64	@ 0x40
 800a486:	d007      	beq.n	800a498 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2140      	movs	r1, #64	@ 0x40
 800a494:	430a      	orrs	r2, r1
 800a496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	23e0      	movs	r3, #224	@ 0xe0
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d952      	bls.n	800a54a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d004      	beq.n	800a4b6 <HAL_SPI_Transmit+0x11e>
 800a4ac:	2316      	movs	r3, #22
 800a4ae:	18fb      	adds	r3, r7, r3
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d143      	bne.n	800a53e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ba:	881a      	ldrh	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	1c9a      	adds	r2, r3, #2
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4da:	e030      	b.n	800a53e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d112      	bne.n	800a510 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ee:	881a      	ldrh	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fa:	1c9a      	adds	r2, r3, #2
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a504:	b29b      	uxth	r3, r3
 800a506:	3b01      	subs	r3, #1
 800a508:	b29a      	uxth	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a50e:	e016      	b.n	800a53e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a510:	f7f9 fc12 	bl	8003d38 <HAL_GetTick>
 800a514:	0002      	movs	r2, r0
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d802      	bhi.n	800a526 <HAL_SPI_Transmit+0x18e>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	3301      	adds	r3, #1
 800a524:	d102      	bne.n	800a52c <HAL_SPI_Transmit+0x194>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d108      	bne.n	800a53e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800a52c:	231f      	movs	r3, #31
 800a52e:	18fb      	adds	r3, r7, r3
 800a530:	2203      	movs	r2, #3
 800a532:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	225d      	movs	r2, #93	@ 0x5d
 800a538:	2101      	movs	r1, #1
 800a53a:	5499      	strb	r1, [r3, r2]
          goto error;
 800a53c:	e080      	b.n	800a640 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a542:	b29b      	uxth	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1c9      	bne.n	800a4dc <HAL_SPI_Transmit+0x144>
 800a548:	e053      	b.n	800a5f2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d004      	beq.n	800a55c <HAL_SPI_Transmit+0x1c4>
 800a552:	2316      	movs	r3, #22
 800a554:	18fb      	adds	r3, r7, r3
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d145      	bne.n	800a5e8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	330c      	adds	r3, #12
 800a566:	7812      	ldrb	r2, [r2, #0]
 800a568:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a578:	b29b      	uxth	r3, r3
 800a57a:	3b01      	subs	r3, #1
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800a582:	e031      	b.n	800a5e8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2202      	movs	r2, #2
 800a58c:	4013      	ands	r3, r2
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d113      	bne.n	800a5ba <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	330c      	adds	r3, #12
 800a59c:	7812      	ldrb	r2, [r2, #0]
 800a59e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a5b8:	e016      	b.n	800a5e8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5ba:	f7f9 fbbd 	bl	8003d38 <HAL_GetTick>
 800a5be:	0002      	movs	r2, r0
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d802      	bhi.n	800a5d0 <HAL_SPI_Transmit+0x238>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	d102      	bne.n	800a5d6 <HAL_SPI_Transmit+0x23e>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d108      	bne.n	800a5e8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800a5d6:	231f      	movs	r3, #31
 800a5d8:	18fb      	adds	r3, r7, r3
 800a5da:	2203      	movs	r2, #3
 800a5dc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	225d      	movs	r2, #93	@ 0x5d
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	5499      	strb	r1, [r3, r2]
          goto error;
 800a5e6:	e02b      	b.n	800a640 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1c8      	bne.n	800a584 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 fcef 	bl	800afdc <SPI_EndRxTxTransaction>
 800a5fe:	1e03      	subs	r3, r0, #0
 800a600:	d002      	beq.n	800a608 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a610:	2300      	movs	r3, #0
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d004      	beq.n	800a638 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800a62e:	231f      	movs	r3, #31
 800a630:	18fb      	adds	r3, r7, r3
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	e003      	b.n	800a640 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	225d      	movs	r2, #93	@ 0x5d
 800a63c:	2101      	movs	r1, #1
 800a63e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	225c      	movs	r2, #92	@ 0x5c
 800a644:	2100      	movs	r1, #0
 800a646:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a648:	231f      	movs	r3, #31
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	781b      	ldrb	r3, [r3, #0]
}
 800a64e:	0018      	movs	r0, r3
 800a650:	46bd      	mov	sp, r7
 800a652:	b008      	add	sp, #32
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a658:	b590      	push	{r4, r7, lr}
 800a65a:	b089      	sub	sp, #36	@ 0x24
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	1dbb      	adds	r3, r7, #6
 800a666:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a668:	2117      	movs	r1, #23
 800a66a:	187b      	adds	r3, r7, r1
 800a66c:	2200      	movs	r2, #0
 800a66e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	225d      	movs	r2, #93	@ 0x5d
 800a674:	5c9b      	ldrb	r3, [r3, r2]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d003      	beq.n	800a684 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800a67c:	187b      	adds	r3, r7, r1
 800a67e:	2202      	movs	r2, #2
 800a680:	701a      	strb	r2, [r3, #0]
    goto error;
 800a682:	e12b      	b.n	800a8dc <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	2382      	movs	r3, #130	@ 0x82
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d113      	bne.n	800a6b8 <HAL_SPI_Receive+0x60>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10f      	bne.n	800a6b8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	225d      	movs	r2, #93	@ 0x5d
 800a69c:	2104      	movs	r1, #4
 800a69e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a6a0:	1dbb      	adds	r3, r7, #6
 800a6a2:	881c      	ldrh	r4, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	0023      	movs	r3, r4
 800a6b0:	f000 f924 	bl	800a8fc <HAL_SPI_TransmitReceive>
 800a6b4:	0003      	movs	r3, r0
 800a6b6:	e118      	b.n	800a8ea <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	225c      	movs	r2, #92	@ 0x5c
 800a6bc:	5c9b      	ldrb	r3, [r3, r2]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_SPI_Receive+0x6e>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e111      	b.n	800a8ea <HAL_SPI_Receive+0x292>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	225c      	movs	r2, #92	@ 0x5c
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6ce:	f7f9 fb33 	bl	8003d38 <HAL_GetTick>
 800a6d2:	0003      	movs	r3, r0
 800a6d4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <HAL_SPI_Receive+0x8c>
 800a6dc:	1dbb      	adds	r3, r7, #6
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800a6e4:	2317      	movs	r3, #23
 800a6e6:	18fb      	adds	r3, r7, r3
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	701a      	strb	r2, [r3, #0]
    goto error;
 800a6ec:	e0f6      	b.n	800a8dc <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	225d      	movs	r2, #93	@ 0x5d
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1dba      	adds	r2, r7, #6
 800a706:	2144      	movs	r1, #68	@ 0x44
 800a708:	8812      	ldrh	r2, [r2, #0]
 800a70a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	1dba      	adds	r2, r7, #6
 800a710:	2146      	movs	r1, #70	@ 0x46
 800a712:	8812      	ldrh	r2, [r2, #0]
 800a714:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	23e0      	movs	r3, #224	@ 0xe0
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d908      	bls.n	800a752 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	496a      	ldr	r1, [pc, #424]	@ (800a8f4 <HAL_SPI_Receive+0x29c>)
 800a74c:	400a      	ands	r2, r1
 800a74e:	605a      	str	r2, [r3, #4]
 800a750:	e008      	b.n	800a764 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2180      	movs	r1, #128	@ 0x80
 800a75e:	0149      	lsls	r1, r1, #5
 800a760:	430a      	orrs	r2, r1
 800a762:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689a      	ldr	r2, [r3, #8]
 800a768:	2380      	movs	r3, #128	@ 0x80
 800a76a:	021b      	lsls	r3, r3, #8
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d10f      	bne.n	800a790 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2140      	movs	r1, #64	@ 0x40
 800a77c:	438a      	bics	r2, r1
 800a77e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	495b      	ldr	r1, [pc, #364]	@ (800a8f8 <HAL_SPI_Receive+0x2a0>)
 800a78c:	400a      	ands	r2, r1
 800a78e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2240      	movs	r2, #64	@ 0x40
 800a798:	4013      	ands	r3, r2
 800a79a:	2b40      	cmp	r3, #64	@ 0x40
 800a79c:	d007      	beq.n	800a7ae <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2140      	movs	r1, #64	@ 0x40
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	23e0      	movs	r3, #224	@ 0xe0
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d900      	bls.n	800a7bc <HAL_SPI_Receive+0x164>
 800a7ba:	e071      	b.n	800a8a0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a7bc:	e035      	b.n	800a82a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d117      	bne.n	800a7fc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	330c      	adds	r3, #12
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d8:	7812      	ldrb	r2, [r2, #0]
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2246      	movs	r2, #70	@ 0x46
 800a7ec:	5a9b      	ldrh	r3, [r3, r2]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	b299      	uxth	r1, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2246      	movs	r2, #70	@ 0x46
 800a7f8:	5299      	strh	r1, [r3, r2]
 800a7fa:	e016      	b.n	800a82a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7fc:	f7f9 fa9c 	bl	8003d38 <HAL_GetTick>
 800a800:	0002      	movs	r2, r0
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d802      	bhi.n	800a812 <HAL_SPI_Receive+0x1ba>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	d102      	bne.n	800a818 <HAL_SPI_Receive+0x1c0>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d108      	bne.n	800a82a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800a818:	2317      	movs	r3, #23
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	2203      	movs	r2, #3
 800a81e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	225d      	movs	r2, #93	@ 0x5d
 800a824:	2101      	movs	r1, #1
 800a826:	5499      	strb	r1, [r3, r2]
          goto error;
 800a828:	e058      	b.n	800a8dc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2246      	movs	r2, #70	@ 0x46
 800a82e:	5a9b      	ldrh	r3, [r3, r2]
 800a830:	b29b      	uxth	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1c3      	bne.n	800a7be <HAL_SPI_Receive+0x166>
 800a836:	e039      	b.n	800a8ac <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2201      	movs	r2, #1
 800a840:	4013      	ands	r3, r2
 800a842:	2b01      	cmp	r3, #1
 800a844:	d115      	bne.n	800a872 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68da      	ldr	r2, [r3, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a850:	b292      	uxth	r2, r2
 800a852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a858:	1c9a      	adds	r2, r3, #2
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2246      	movs	r2, #70	@ 0x46
 800a862:	5a9b      	ldrh	r3, [r3, r2]
 800a864:	b29b      	uxth	r3, r3
 800a866:	3b01      	subs	r3, #1
 800a868:	b299      	uxth	r1, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2246      	movs	r2, #70	@ 0x46
 800a86e:	5299      	strh	r1, [r3, r2]
 800a870:	e016      	b.n	800a8a0 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a872:	f7f9 fa61 	bl	8003d38 <HAL_GetTick>
 800a876:	0002      	movs	r2, r0
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d802      	bhi.n	800a888 <HAL_SPI_Receive+0x230>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	d102      	bne.n	800a88e <HAL_SPI_Receive+0x236>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d108      	bne.n	800a8a0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800a88e:	2317      	movs	r3, #23
 800a890:	18fb      	adds	r3, r7, r3
 800a892:	2203      	movs	r2, #3
 800a894:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	225d      	movs	r2, #93	@ 0x5d
 800a89a:	2101      	movs	r1, #1
 800a89c:	5499      	strb	r1, [r3, r2]
          goto error;
 800a89e:	e01d      	b.n	800a8dc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2246      	movs	r2, #70	@ 0x46
 800a8a4:	5a9b      	ldrh	r3, [r3, r2]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1c5      	bne.n	800a838 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	0018      	movs	r0, r3
 800a8b4:	f000 fb34 	bl	800af20 <SPI_EndRxTransaction>
 800a8b8:	1e03      	subs	r3, r0, #0
 800a8ba:	d002      	beq.n	800a8c2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800a8ca:	2317      	movs	r3, #23
 800a8cc:	18fb      	adds	r3, r7, r3
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	e003      	b.n	800a8dc <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	225d      	movs	r2, #93	@ 0x5d
 800a8d8:	2101      	movs	r1, #1
 800a8da:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	225c      	movs	r2, #92	@ 0x5c
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a8e4:	2317      	movs	r3, #23
 800a8e6:	18fb      	adds	r3, r7, r3
 800a8e8:	781b      	ldrb	r3, [r3, #0]
}
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	b007      	add	sp, #28
 800a8f0:	bd90      	pop	{r4, r7, pc}
 800a8f2:	46c0      	nop			@ (mov r8, r8)
 800a8f4:	ffffefff 	.word	0xffffefff
 800a8f8:	ffffbfff 	.word	0xffffbfff

0800a8fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08a      	sub	sp, #40	@ 0x28
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	001a      	movs	r2, r3
 800a90a:	1cbb      	adds	r3, r7, #2
 800a90c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a90e:	2301      	movs	r3, #1
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a912:	2323      	movs	r3, #35	@ 0x23
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	225c      	movs	r2, #92	@ 0x5c
 800a91e:	5c9b      	ldrb	r3, [r3, r2]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_SPI_TransmitReceive+0x2c>
 800a924:	2302      	movs	r3, #2
 800a926:	e1c4      	b.n	800acb2 <HAL_SPI_TransmitReceive+0x3b6>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	225c      	movs	r2, #92	@ 0x5c
 800a92c:	2101      	movs	r1, #1
 800a92e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a930:	f7f9 fa02 	bl	8003d38 <HAL_GetTick>
 800a934:	0003      	movs	r3, r0
 800a936:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a938:	201b      	movs	r0, #27
 800a93a:	183b      	adds	r3, r7, r0
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	215d      	movs	r1, #93	@ 0x5d
 800a940:	5c52      	ldrb	r2, [r2, r1]
 800a942:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a94a:	2312      	movs	r3, #18
 800a94c:	18fb      	adds	r3, r7, r3
 800a94e:	1cba      	adds	r2, r7, #2
 800a950:	8812      	ldrh	r2, [r2, #0]
 800a952:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a954:	183b      	adds	r3, r7, r0
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d011      	beq.n	800a980 <HAL_SPI_TransmitReceive+0x84>
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	2382      	movs	r3, #130	@ 0x82
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	429a      	cmp	r2, r3
 800a964:	d107      	bne.n	800a976 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d103      	bne.n	800a976 <HAL_SPI_TransmitReceive+0x7a>
 800a96e:	183b      	adds	r3, r7, r0
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2b04      	cmp	r3, #4
 800a974:	d004      	beq.n	800a980 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a976:	2323      	movs	r3, #35	@ 0x23
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	2202      	movs	r2, #2
 800a97c:	701a      	strb	r2, [r3, #0]
    goto error;
 800a97e:	e191      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d006      	beq.n	800a994 <HAL_SPI_TransmitReceive+0x98>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <HAL_SPI_TransmitReceive+0x98>
 800a98c:	1cbb      	adds	r3, r7, #2
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d104      	bne.n	800a99e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a994:	2323      	movs	r3, #35	@ 0x23
 800a996:	18fb      	adds	r3, r7, r3
 800a998:	2201      	movs	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]
    goto error;
 800a99c:	e182      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	225d      	movs	r2, #93	@ 0x5d
 800a9a2:	5c9b      	ldrb	r3, [r3, r2]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d003      	beq.n	800a9b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	225d      	movs	r2, #93	@ 0x5d
 800a9ae:	2105      	movs	r1, #5
 800a9b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1cba      	adds	r2, r7, #2
 800a9c2:	2146      	movs	r1, #70	@ 0x46
 800a9c4:	8812      	ldrh	r2, [r2, #0]
 800a9c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	1cba      	adds	r2, r7, #2
 800a9cc:	2144      	movs	r1, #68	@ 0x44
 800a9ce:	8812      	ldrh	r2, [r2, #0]
 800a9d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	1cba      	adds	r2, r7, #2
 800a9dc:	8812      	ldrh	r2, [r2, #0]
 800a9de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	1cba      	adds	r2, r7, #2
 800a9e4:	8812      	ldrh	r2, [r2, #0]
 800a9e6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	68da      	ldr	r2, [r3, #12]
 800a9f8:	23e0      	movs	r3, #224	@ 0xe0
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d908      	bls.n	800aa12 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	49ac      	ldr	r1, [pc, #688]	@ (800acbc <HAL_SPI_TransmitReceive+0x3c0>)
 800aa0c:	400a      	ands	r2, r1
 800aa0e:	605a      	str	r2, [r3, #4]
 800aa10:	e008      	b.n	800aa24 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2180      	movs	r1, #128	@ 0x80
 800aa1e:	0149      	lsls	r1, r1, #5
 800aa20:	430a      	orrs	r2, r1
 800aa22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2240      	movs	r2, #64	@ 0x40
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	2b40      	cmp	r3, #64	@ 0x40
 800aa30:	d007      	beq.n	800aa42 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2140      	movs	r1, #64	@ 0x40
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	68da      	ldr	r2, [r3, #12]
 800aa46:	23e0      	movs	r3, #224	@ 0xe0
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d800      	bhi.n	800aa50 <HAL_SPI_TransmitReceive+0x154>
 800aa4e:	e083      	b.n	800ab58 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <HAL_SPI_TransmitReceive+0x168>
 800aa58:	2312      	movs	r3, #18
 800aa5a:	18fb      	adds	r3, r7, r3
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d000      	beq.n	800aa64 <HAL_SPI_TransmitReceive+0x168>
 800aa62:	e06d      	b.n	800ab40 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa68:	881a      	ldrh	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa74:	1c9a      	adds	r2, r3, #2
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	3b01      	subs	r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa88:	e05a      	b.n	800ab40 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2202      	movs	r2, #2
 800aa92:	4013      	ands	r3, r2
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d11b      	bne.n	800aad0 <HAL_SPI_TransmitReceive+0x1d4>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d016      	beq.n	800aad0 <HAL_SPI_TransmitReceive+0x1d4>
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d113      	bne.n	800aad0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaac:	881a      	ldrh	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab8:	1c9a      	adds	r2, r3, #2
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	2201      	movs	r2, #1
 800aad8:	4013      	ands	r3, r2
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d11c      	bne.n	800ab18 <HAL_SPI_TransmitReceive+0x21c>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2246      	movs	r2, #70	@ 0x46
 800aae2:	5a9b      	ldrh	r3, [r3, r2]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d016      	beq.n	800ab18 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafc:	1c9a      	adds	r2, r3, #2
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2246      	movs	r2, #70	@ 0x46
 800ab06:	5a9b      	ldrh	r3, [r3, r2]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	b299      	uxth	r1, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2246      	movs	r2, #70	@ 0x46
 800ab12:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab14:	2301      	movs	r3, #1
 800ab16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab18:	f7f9 f90e 	bl	8003d38 <HAL_GetTick>
 800ab1c:	0002      	movs	r2, r0
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d80b      	bhi.n	800ab40 <HAL_SPI_TransmitReceive+0x244>
 800ab28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	d008      	beq.n	800ab40 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800ab2e:	2323      	movs	r3, #35	@ 0x23
 800ab30:	18fb      	adds	r3, r7, r3
 800ab32:	2203      	movs	r2, #3
 800ab34:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	225d      	movs	r2, #93	@ 0x5d
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	5499      	strb	r1, [r3, r2]
        goto error;
 800ab3e:	e0b1      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d19f      	bne.n	800aa8a <HAL_SPI_TransmitReceive+0x18e>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2246      	movs	r2, #70	@ 0x46
 800ab4e:	5a9b      	ldrh	r3, [r3, r2]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d199      	bne.n	800aa8a <HAL_SPI_TransmitReceive+0x18e>
 800ab56:	e089      	b.n	800ac6c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <HAL_SPI_TransmitReceive+0x270>
 800ab60:	2312      	movs	r3, #18
 800ab62:	18fb      	adds	r3, r7, r3
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d000      	beq.n	800ab6c <HAL_SPI_TransmitReceive+0x270>
 800ab6a:	e074      	b.n	800ac56 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	330c      	adds	r3, #12
 800ab76:	7812      	ldrb	r2, [r2, #0]
 800ab78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab92:	e060      	b.n	800ac56 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d11c      	bne.n	800abdc <HAL_SPI_TransmitReceive+0x2e0>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d017      	beq.n	800abdc <HAL_SPI_TransmitReceive+0x2e0>
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d114      	bne.n	800abdc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	330c      	adds	r3, #12
 800abbc:	7812      	ldrb	r2, [r2, #0]
 800abbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3b01      	subs	r3, #1
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abd8:	2300      	movs	r3, #0
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	2201      	movs	r2, #1
 800abe4:	4013      	ands	r3, r2
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d11e      	bne.n	800ac28 <HAL_SPI_TransmitReceive+0x32c>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2246      	movs	r2, #70	@ 0x46
 800abee:	5a9b      	ldrh	r3, [r3, r2]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d018      	beq.n	800ac28 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	330c      	adds	r3, #12
 800abfc:	001a      	movs	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac02:	7812      	ldrb	r2, [r2, #0]
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2246      	movs	r2, #70	@ 0x46
 800ac16:	5a9b      	ldrh	r3, [r3, r2]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	b299      	uxth	r1, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2246      	movs	r2, #70	@ 0x46
 800ac22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac24:	2301      	movs	r3, #1
 800ac26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac28:	f7f9 f886 	bl	8003d38 <HAL_GetTick>
 800ac2c:	0002      	movs	r2, r0
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d802      	bhi.n	800ac3e <HAL_SPI_TransmitReceive+0x342>
 800ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	d102      	bne.n	800ac44 <HAL_SPI_TransmitReceive+0x348>
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d108      	bne.n	800ac56 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800ac44:	2323      	movs	r3, #35	@ 0x23
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	2203      	movs	r2, #3
 800ac4a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	225d      	movs	r2, #93	@ 0x5d
 800ac50:	2101      	movs	r1, #1
 800ac52:	5499      	strb	r1, [r3, r2]
        goto error;
 800ac54:	e026      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d199      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x298>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2246      	movs	r2, #70	@ 0x46
 800ac64:	5a9b      	ldrh	r3, [r3, r2]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d193      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	0018      	movs	r0, r3
 800ac74:	f000 f9b2 	bl	800afdc <SPI_EndRxTxTransaction>
 800ac78:	1e03      	subs	r3, r0, #0
 800ac7a:	d006      	beq.n	800ac8a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800ac7c:	2323      	movs	r3, #35	@ 0x23
 800ac7e:	18fb      	adds	r3, r7, r3
 800ac80:	2201      	movs	r2, #1
 800ac82:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2220      	movs	r2, #32
 800ac88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d004      	beq.n	800ac9c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800ac92:	2323      	movs	r3, #35	@ 0x23
 800ac94:	18fb      	adds	r3, r7, r3
 800ac96:	2201      	movs	r2, #1
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e003      	b.n	800aca4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	225d      	movs	r2, #93	@ 0x5d
 800aca0:	2101      	movs	r1, #1
 800aca2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	225c      	movs	r2, #92	@ 0x5c
 800aca8:	2100      	movs	r1, #0
 800acaa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800acac:	2323      	movs	r3, #35	@ 0x23
 800acae:	18fb      	adds	r3, r7, r3
 800acb0:	781b      	ldrb	r3, [r3, #0]
}
 800acb2:	0018      	movs	r0, r3
 800acb4:	46bd      	mov	sp, r7
 800acb6:	b00a      	add	sp, #40	@ 0x28
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	46c0      	nop			@ (mov r8, r8)
 800acbc:	ffffefff 	.word	0xffffefff

0800acc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	1dfb      	adds	r3, r7, #7
 800acce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800acd0:	f7f9 f832 	bl	8003d38 <HAL_GetTick>
 800acd4:	0002      	movs	r2, r0
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	18d3      	adds	r3, r2, r3
 800acde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ace0:	f7f9 f82a 	bl	8003d38 <HAL_GetTick>
 800ace4:	0003      	movs	r3, r0
 800ace6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ace8:	4b3a      	ldr	r3, [pc, #232]	@ (800add4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	015b      	lsls	r3, r3, #5
 800acee:	0d1b      	lsrs	r3, r3, #20
 800acf0:	69fa      	ldr	r2, [r7, #28]
 800acf2:	4353      	muls	r3, r2
 800acf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800acf6:	e058      	b.n	800adaa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	3301      	adds	r3, #1
 800acfc:	d055      	beq.n	800adaa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800acfe:	f7f9 f81b 	bl	8003d38 <HAL_GetTick>
 800ad02:	0002      	movs	r2, r0
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	69fa      	ldr	r2, [r7, #28]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d902      	bls.n	800ad14 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d142      	bne.n	800ad9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	21e0      	movs	r1, #224	@ 0xe0
 800ad20:	438a      	bics	r2, r1
 800ad22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	2382      	movs	r3, #130	@ 0x82
 800ad2a:	005b      	lsls	r3, r3, #1
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d113      	bne.n	800ad58 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	2380      	movs	r3, #128	@ 0x80
 800ad36:	021b      	lsls	r3, r3, #8
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d005      	beq.n	800ad48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	2380      	movs	r3, #128	@ 0x80
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d107      	bne.n	800ad58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2140      	movs	r1, #64	@ 0x40
 800ad54:	438a      	bics	r2, r1
 800ad56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad5c:	2380      	movs	r3, #128	@ 0x80
 800ad5e:	019b      	lsls	r3, r3, #6
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d110      	bne.n	800ad86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	491a      	ldr	r1, [pc, #104]	@ (800add8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ad70:	400a      	ands	r2, r1
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2180      	movs	r1, #128	@ 0x80
 800ad80:	0189      	lsls	r1, r1, #6
 800ad82:	430a      	orrs	r2, r1
 800ad84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	225d      	movs	r2, #93	@ 0x5d
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	225c      	movs	r2, #92	@ 0x5c
 800ad92:	2100      	movs	r1, #0
 800ad94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e017      	b.n	800adca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	4013      	ands	r3, r2
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	425a      	negs	r2, r3
 800adba:	4153      	adcs	r3, r2
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	001a      	movs	r2, r3
 800adc0:	1dfb      	adds	r3, r7, #7
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d197      	bne.n	800acf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	0018      	movs	r0, r3
 800adcc:	46bd      	mov	sp, r7
 800adce:	b008      	add	sp, #32
 800add0:	bd80      	pop	{r7, pc}
 800add2:	46c0      	nop			@ (mov r8, r8)
 800add4:	20000000 	.word	0x20000000
 800add8:	ffffdfff 	.word	0xffffdfff

0800addc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	@ 0x28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800adea:	2317      	movs	r3, #23
 800adec:	18fb      	adds	r3, r7, r3
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800adf2:	f7f8 ffa1 	bl	8003d38 <HAL_GetTick>
 800adf6:	0002      	movs	r2, r0
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	18d3      	adds	r3, r2, r3
 800ae00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ae02:	f7f8 ff99 	bl	8003d38 <HAL_GetTick>
 800ae06:	0003      	movs	r3, r0
 800ae08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	330c      	adds	r3, #12
 800ae10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae12:	4b41      	ldr	r3, [pc, #260]	@ (800af18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	0013      	movs	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	189b      	adds	r3, r3, r2
 800ae1c:	00da      	lsls	r2, r3, #3
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	0d1b      	lsrs	r3, r3, #20
 800ae22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae24:	4353      	muls	r3, r2
 800ae26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae28:	e068      	b.n	800aefc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	23c0      	movs	r3, #192	@ 0xc0
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d10a      	bne.n	800ae4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	2117      	movs	r1, #23
 800ae42:	187b      	adds	r3, r7, r1
 800ae44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ae46:	187b      	adds	r3, r7, r1
 800ae48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	d055      	beq.n	800aefc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae50:	f7f8 ff72 	bl	8003d38 <HAL_GetTick>
 800ae54:	0002      	movs	r2, r0
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d902      	bls.n	800ae66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d142      	bne.n	800aeec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	21e0      	movs	r1, #224	@ 0xe0
 800ae72:	438a      	bics	r2, r1
 800ae74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	2382      	movs	r3, #130	@ 0x82
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d113      	bne.n	800aeaa <SPI_WaitFifoStateUntilTimeout+0xce>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	689a      	ldr	r2, [r3, #8]
 800ae86:	2380      	movs	r3, #128	@ 0x80
 800ae88:	021b      	lsls	r3, r3, #8
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d005      	beq.n	800ae9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	2380      	movs	r3, #128	@ 0x80
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d107      	bne.n	800aeaa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2140      	movs	r1, #64	@ 0x40
 800aea6:	438a      	bics	r2, r1
 800aea8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aeae:	2380      	movs	r3, #128	@ 0x80
 800aeb0:	019b      	lsls	r3, r3, #6
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d110      	bne.n	800aed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4916      	ldr	r1, [pc, #88]	@ (800af1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800aec2:	400a      	ands	r2, r1
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2180      	movs	r1, #128	@ 0x80
 800aed2:	0189      	lsls	r1, r1, #6
 800aed4:	430a      	orrs	r2, r1
 800aed6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	225d      	movs	r2, #93	@ 0x5d
 800aedc:	2101      	movs	r1, #1
 800aede:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	225c      	movs	r2, #92	@ 0x5c
 800aee4:	2100      	movs	r1, #0
 800aee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e010      	b.n	800af0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	4013      	ands	r3, r2
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d18e      	bne.n	800ae2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	0018      	movs	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	b00a      	add	sp, #40	@ 0x28
 800af14:	bd80      	pop	{r7, pc}
 800af16:	46c0      	nop			@ (mov r8, r8)
 800af18:	20000000 	.word	0x20000000
 800af1c:	ffffdfff 	.word	0xffffdfff

0800af20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	2382      	movs	r3, #130	@ 0x82
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	429a      	cmp	r2, r3
 800af36:	d113      	bne.n	800af60 <SPI_EndRxTransaction+0x40>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	2380      	movs	r3, #128	@ 0x80
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	429a      	cmp	r2, r3
 800af42:	d005      	beq.n	800af50 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	689a      	ldr	r2, [r3, #8]
 800af48:	2380      	movs	r3, #128	@ 0x80
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d107      	bne.n	800af60 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2140      	movs	r1, #64	@ 0x40
 800af5c:	438a      	bics	r2, r1
 800af5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	0013      	movs	r3, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	2180      	movs	r1, #128	@ 0x80
 800af6e:	f7ff fea7 	bl	800acc0 <SPI_WaitFlagStateUntilTimeout>
 800af72:	1e03      	subs	r3, r0, #0
 800af74:	d007      	beq.n	800af86 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af7a:	2220      	movs	r2, #32
 800af7c:	431a      	orrs	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e026      	b.n	800afd4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	2382      	movs	r3, #130	@ 0x82
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	429a      	cmp	r2, r3
 800af90:	d11f      	bne.n	800afd2 <SPI_EndRxTransaction+0xb2>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	689a      	ldr	r2, [r3, #8]
 800af96:	2380      	movs	r3, #128	@ 0x80
 800af98:	021b      	lsls	r3, r3, #8
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d005      	beq.n	800afaa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	689a      	ldr	r2, [r3, #8]
 800afa2:	2380      	movs	r3, #128	@ 0x80
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d113      	bne.n	800afd2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	23c0      	movs	r3, #192	@ 0xc0
 800afae:	00d9      	lsls	r1, r3, #3
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	0013      	movs	r3, r2
 800afb8:	2200      	movs	r2, #0
 800afba:	f7ff ff0f 	bl	800addc <SPI_WaitFifoStateUntilTimeout>
 800afbe:	1e03      	subs	r3, r0, #0
 800afc0:	d007      	beq.n	800afd2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afc6:	2220      	movs	r2, #32
 800afc8:	431a      	orrs	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e000      	b.n	800afd4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	0018      	movs	r0, r3
 800afd6:	46bd      	mov	sp, r7
 800afd8:	b004      	add	sp, #16
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	23c0      	movs	r3, #192	@ 0xc0
 800afec:	0159      	lsls	r1, r3, #5
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	0013      	movs	r3, r2
 800aff6:	2200      	movs	r2, #0
 800aff8:	f7ff fef0 	bl	800addc <SPI_WaitFifoStateUntilTimeout>
 800affc:	1e03      	subs	r3, r0, #0
 800affe:	d007      	beq.n	800b010 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b004:	2220      	movs	r2, #32
 800b006:	431a      	orrs	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e027      	b.n	800b060 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	0013      	movs	r3, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	2180      	movs	r1, #128	@ 0x80
 800b01e:	f7ff fe4f 	bl	800acc0 <SPI_WaitFlagStateUntilTimeout>
 800b022:	1e03      	subs	r3, r0, #0
 800b024:	d007      	beq.n	800b036 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b02a:	2220      	movs	r2, #32
 800b02c:	431a      	orrs	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e014      	b.n	800b060 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	23c0      	movs	r3, #192	@ 0xc0
 800b03a:	00d9      	lsls	r1, r3, #3
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	0013      	movs	r3, r2
 800b044:	2200      	movs	r2, #0
 800b046:	f7ff fec9 	bl	800addc <SPI_WaitFifoStateUntilTimeout>
 800b04a:	1e03      	subs	r3, r0, #0
 800b04c:	d007      	beq.n	800b05e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b052:	2220      	movs	r2, #32
 800b054:	431a      	orrs	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e000      	b.n	800b060 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	0018      	movs	r0, r3
 800b062:	46bd      	mov	sp, r7
 800b064:	b004      	add	sp, #16
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e04e      	b.n	800b118 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2288      	movs	r2, #136	@ 0x88
 800b07e:	589b      	ldr	r3, [r3, r2]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d107      	bne.n	800b094 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2284      	movs	r2, #132	@ 0x84
 800b088:	2100      	movs	r1, #0
 800b08a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	0018      	movs	r0, r3
 800b090:	f7f8 fb90 	bl	80037b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2288      	movs	r2, #136	@ 0x88
 800b098:	2124      	movs	r1, #36	@ 0x24
 800b09a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	438a      	bics	r2, r1
 800b0aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f000 faaa 	bl	800b610 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	0018      	movs	r0, r3
 800b0c0:	f000 f8d4 	bl	800b26c <UART_SetConfig>
 800b0c4:	0003      	movs	r3, r0
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d101      	bne.n	800b0ce <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e024      	b.n	800b118 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4911      	ldr	r1, [pc, #68]	@ (800b120 <HAL_HalfDuplex_Init+0xb8>)
 800b0da:	400a      	ands	r2, r1
 800b0dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2122      	movs	r1, #34	@ 0x22
 800b0ea:	438a      	bics	r2, r1
 800b0ec:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	689a      	ldr	r2, [r3, #8]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2108      	movs	r1, #8
 800b0fa:	430a      	orrs	r2, r1
 800b0fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2101      	movs	r1, #1
 800b10a:	430a      	orrs	r2, r1
 800b10c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	0018      	movs	r0, r3
 800b112:	f000 fb31 	bl	800b778 <UART_CheckIdleState>
 800b116:	0003      	movs	r3, r0
}
 800b118:	0018      	movs	r0, r3
 800b11a:	46bd      	mov	sp, r7
 800b11c:	b002      	add	sp, #8
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	ffffb7ff 	.word	0xffffb7ff

0800b124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	@ 0x28
 800b128:	af02      	add	r7, sp, #8
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	1dbb      	adds	r3, r7, #6
 800b132:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2288      	movs	r2, #136	@ 0x88
 800b138:	589b      	ldr	r3, [r3, r2]
 800b13a:	2b20      	cmp	r3, #32
 800b13c:	d000      	beq.n	800b140 <HAL_UART_Transmit+0x1c>
 800b13e:	e090      	b.n	800b262 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_UART_Transmit+0x2a>
 800b146:	1dbb      	adds	r3, r7, #6
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e088      	b.n	800b264 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	2380      	movs	r3, #128	@ 0x80
 800b158:	015b      	lsls	r3, r3, #5
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d109      	bne.n	800b172 <HAL_UART_Transmit+0x4e>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d105      	bne.n	800b172 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2201      	movs	r2, #1
 800b16a:	4013      	ands	r3, r2
 800b16c:	d001      	beq.n	800b172 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e078      	b.n	800b264 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2290      	movs	r2, #144	@ 0x90
 800b176:	2100      	movs	r1, #0
 800b178:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2288      	movs	r2, #136	@ 0x88
 800b17e:	2121      	movs	r1, #33	@ 0x21
 800b180:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b182:	f7f8 fdd9 	bl	8003d38 <HAL_GetTick>
 800b186:	0003      	movs	r3, r0
 800b188:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	1dba      	adds	r2, r7, #6
 800b18e:	2154      	movs	r1, #84	@ 0x54
 800b190:	8812      	ldrh	r2, [r2, #0]
 800b192:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	1dba      	adds	r2, r7, #6
 800b198:	2156      	movs	r1, #86	@ 0x56
 800b19a:	8812      	ldrh	r2, [r2, #0]
 800b19c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	2380      	movs	r3, #128	@ 0x80
 800b1a4:	015b      	lsls	r3, r3, #5
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d108      	bne.n	800b1bc <HAL_UART_Transmit+0x98>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d104      	bne.n	800b1bc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	e003      	b.n	800b1c4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1c4:	e030      	b.n	800b228 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	0013      	movs	r3, r2
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2180      	movs	r1, #128	@ 0x80
 800b1d4:	f000 fb7a 	bl	800b8cc <UART_WaitOnFlagUntilTimeout>
 800b1d8:	1e03      	subs	r3, r0, #0
 800b1da:	d005      	beq.n	800b1e8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2288      	movs	r2, #136	@ 0x88
 800b1e0:	2120      	movs	r1, #32
 800b1e2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e03d      	b.n	800b264 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10b      	bne.n	800b206 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	001a      	movs	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	05d2      	lsls	r2, r2, #23
 800b1fa:	0dd2      	lsrs	r2, r2, #23
 800b1fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	3302      	adds	r3, #2
 800b202:	61bb      	str	r3, [r7, #24]
 800b204:	e007      	b.n	800b216 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	781a      	ldrb	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	3301      	adds	r3, #1
 800b214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2256      	movs	r2, #86	@ 0x56
 800b21a:	5a9b      	ldrh	r3, [r3, r2]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b299      	uxth	r1, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2256      	movs	r2, #86	@ 0x56
 800b226:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2256      	movs	r2, #86	@ 0x56
 800b22c:	5a9b      	ldrh	r3, [r3, r2]
 800b22e:	b29b      	uxth	r3, r3
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1c8      	bne.n	800b1c6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	0013      	movs	r3, r2
 800b23e:	2200      	movs	r2, #0
 800b240:	2140      	movs	r1, #64	@ 0x40
 800b242:	f000 fb43 	bl	800b8cc <UART_WaitOnFlagUntilTimeout>
 800b246:	1e03      	subs	r3, r0, #0
 800b248:	d005      	beq.n	800b256 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2288      	movs	r2, #136	@ 0x88
 800b24e:	2120      	movs	r1, #32
 800b250:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e006      	b.n	800b264 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2288      	movs	r2, #136	@ 0x88
 800b25a:	2120      	movs	r1, #32
 800b25c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	e000      	b.n	800b264 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800b262:	2302      	movs	r3, #2
  }
}
 800b264:	0018      	movs	r0, r3
 800b266:	46bd      	mov	sp, r7
 800b268:	b008      	add	sp, #32
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b26c:	b5b0      	push	{r4, r5, r7, lr}
 800b26e:	b092      	sub	sp, #72	@ 0x48
 800b270:	af00      	add	r7, sp, #0
 800b272:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b274:	231f      	movs	r3, #31
 800b276:	2220      	movs	r2, #32
 800b278:	189b      	adds	r3, r3, r2
 800b27a:	19db      	adds	r3, r3, r7
 800b27c:	2200      	movs	r2, #0
 800b27e:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4ac8      	ldr	r2, [pc, #800]	@ (800b5a8 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	689a      	ldr	r2, [r3, #8]
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	431a      	orrs	r2, r3
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	431a      	orrs	r2, r3
 800b296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4ac1      	ldr	r2, [pc, #772]	@ (800b5ac <UART_SetConfig+0x340>)
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	0019      	movs	r1, r3
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	4abd      	ldr	r2, [pc, #756]	@ (800b5b0 <UART_SetConfig+0x344>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	0018      	movs	r0, r3
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c2:	68d9      	ldr	r1, [r3, #12]
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	0003      	movs	r3, r0
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4ab3      	ldr	r2, [pc, #716]	@ (800b5a8 <UART_SetConfig+0x33c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d00e      	beq.n	800b2fc <UART_SetConfig+0x90>
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4ab4      	ldr	r2, [pc, #720]	@ (800b5b4 <UART_SetConfig+0x348>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d009      	beq.n	800b2fc <UART_SetConfig+0x90>
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4ab2      	ldr	r2, [pc, #712]	@ (800b5b8 <UART_SetConfig+0x34c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d004      	beq.n	800b2fc <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	4aae      	ldr	r2, [pc, #696]	@ (800b5bc <UART_SetConfig+0x350>)
 800b304:	4013      	ands	r3, r2
 800b306:	0019      	movs	r1, r3
 800b308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b30e:	430b      	orrs	r3, r1
 800b310:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b318:	220f      	movs	r2, #15
 800b31a:	4393      	bics	r3, r2
 800b31c:	0018      	movs	r0, r3
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	0003      	movs	r3, r0
 800b328:	430b      	orrs	r3, r1
 800b32a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4aa3      	ldr	r2, [pc, #652]	@ (800b5c0 <UART_SetConfig+0x354>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d102      	bne.n	800b33c <UART_SetConfig+0xd0>
 800b336:	2301      	movs	r3, #1
 800b338:	643b      	str	r3, [r7, #64]	@ 0x40
 800b33a:	e033      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4aa0      	ldr	r2, [pc, #640]	@ (800b5c4 <UART_SetConfig+0x358>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d102      	bne.n	800b34c <UART_SetConfig+0xe0>
 800b346:	2302      	movs	r3, #2
 800b348:	643b      	str	r3, [r7, #64]	@ 0x40
 800b34a:	e02b      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a9d      	ldr	r2, [pc, #628]	@ (800b5c8 <UART_SetConfig+0x35c>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d103      	bne.n	800b35e <UART_SetConfig+0xf2>
 800b356:	2380      	movs	r3, #128	@ 0x80
 800b358:	025b      	lsls	r3, r3, #9
 800b35a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b35c:	e022      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a9a      	ldr	r2, [pc, #616]	@ (800b5cc <UART_SetConfig+0x360>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d103      	bne.n	800b370 <UART_SetConfig+0x104>
 800b368:	2380      	movs	r3, #128	@ 0x80
 800b36a:	029b      	lsls	r3, r3, #10
 800b36c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b36e:	e019      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a8c      	ldr	r2, [pc, #560]	@ (800b5a8 <UART_SetConfig+0x33c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d102      	bne.n	800b380 <UART_SetConfig+0x114>
 800b37a:	2310      	movs	r3, #16
 800b37c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b37e:	e011      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a8b      	ldr	r2, [pc, #556]	@ (800b5b4 <UART_SetConfig+0x348>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d102      	bne.n	800b390 <UART_SetConfig+0x124>
 800b38a:	2308      	movs	r3, #8
 800b38c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b38e:	e009      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a88      	ldr	r2, [pc, #544]	@ (800b5b8 <UART_SetConfig+0x34c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d102      	bne.n	800b3a0 <UART_SetConfig+0x134>
 800b39a:	2304      	movs	r3, #4
 800b39c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b39e:	e001      	b.n	800b3a4 <UART_SetConfig+0x138>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a7f      	ldr	r2, [pc, #508]	@ (800b5a8 <UART_SetConfig+0x33c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00a      	beq.n	800b3c4 <UART_SetConfig+0x158>
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a80      	ldr	r2, [pc, #512]	@ (800b5b4 <UART_SetConfig+0x348>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d005      	beq.n	800b3c4 <UART_SetConfig+0x158>
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a7e      	ldr	r2, [pc, #504]	@ (800b5b8 <UART_SetConfig+0x34c>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d000      	beq.n	800b3c4 <UART_SetConfig+0x158>
 800b3c2:	e06f      	b.n	800b4a4 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f7fd fcd8 	bl	8008d7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b3cc:	0003      	movs	r3, r0
 800b3ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d100      	bne.n	800b3d8 <UART_SetConfig+0x16c>
 800b3d6:	e103      	b.n	800b5e0 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3dc:	4b7c      	ldr	r3, [pc, #496]	@ (800b5d0 <UART_SetConfig+0x364>)
 800b3de:	0052      	lsls	r2, r2, #1
 800b3e0:	5ad3      	ldrh	r3, [r2, r3]
 800b3e2:	0019      	movs	r1, r3
 800b3e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3e6:	f7f4 feab 	bl	8000140 <__udivsi3>
 800b3ea:	0003      	movs	r3, r0
 800b3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	0013      	movs	r3, r2
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	189b      	adds	r3, r3, r2
 800b3f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d305      	bcc.n	800b40a <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b406:	429a      	cmp	r2, r3
 800b408:	d906      	bls.n	800b418 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 800b40a:	231f      	movs	r3, #31
 800b40c:	2220      	movs	r2, #32
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	19db      	adds	r3, r3, r7
 800b412:	2201      	movs	r2, #1
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	e044      	b.n	800b4a2 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	2300      	movs	r3, #0
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b424:	4b6a      	ldr	r3, [pc, #424]	@ (800b5d0 <UART_SetConfig+0x364>)
 800b426:	0052      	lsls	r2, r2, #1
 800b428:	5ad3      	ldrh	r3, [r2, r3]
 800b42a:	613b      	str	r3, [r7, #16]
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	69b8      	ldr	r0, [r7, #24]
 800b436:	69f9      	ldr	r1, [r7, #28]
 800b438:	f7f5 f854 	bl	80004e4 <__aeabi_uldivmod>
 800b43c:	0002      	movs	r2, r0
 800b43e:	000b      	movs	r3, r1
 800b440:	0e11      	lsrs	r1, r2, #24
 800b442:	021d      	lsls	r5, r3, #8
 800b444:	430d      	orrs	r5, r1
 800b446:	0214      	lsls	r4, r2, #8
 800b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	085b      	lsrs	r3, r3, #1
 800b44e:	60bb      	str	r3, [r7, #8]
 800b450:	2300      	movs	r3, #0
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	1900      	adds	r0, r0, r4
 800b45a:	4169      	adcs	r1, r5
 800b45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	603b      	str	r3, [r7, #0]
 800b462:	2300      	movs	r3, #0
 800b464:	607b      	str	r3, [r7, #4]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f7f5 f83b 	bl	80004e4 <__aeabi_uldivmod>
 800b46e:	0002      	movs	r2, r0
 800b470:	000b      	movs	r3, r1
 800b472:	0013      	movs	r3, r2
 800b474:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b478:	23c0      	movs	r3, #192	@ 0xc0
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d309      	bcc.n	800b494 <UART_SetConfig+0x228>
 800b480:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b482:	2380      	movs	r3, #128	@ 0x80
 800b484:	035b      	lsls	r3, r3, #13
 800b486:	429a      	cmp	r2, r3
 800b488:	d204      	bcs.n	800b494 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b490:	60da      	str	r2, [r3, #12]
 800b492:	e006      	b.n	800b4a2 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 800b494:	231f      	movs	r3, #31
 800b496:	2220      	movs	r2, #32
 800b498:	189b      	adds	r3, r3, r2
 800b49a:	19db      	adds	r3, r3, r7
 800b49c:	2201      	movs	r2, #1
 800b49e:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800b4a0:	e09e      	b.n	800b5e0 <UART_SetConfig+0x374>
 800b4a2:	e09d      	b.n	800b5e0 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a6:	69da      	ldr	r2, [r3, #28]
 800b4a8:	2380      	movs	r3, #128	@ 0x80
 800b4aa:	021b      	lsls	r3, r3, #8
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d14c      	bne.n	800b54a <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b4b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f7fd fc62 	bl	8008d7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b4b8:	0003      	movs	r3, r0
 800b4ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d100      	bne.n	800b4c4 <UART_SetConfig+0x258>
 800b4c2:	e08d      	b.n	800b5e0 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4c8:	4b41      	ldr	r3, [pc, #260]	@ (800b5d0 <UART_SetConfig+0x364>)
 800b4ca:	0052      	lsls	r2, r2, #1
 800b4cc:	5ad3      	ldrh	r3, [r2, r3]
 800b4ce:	0019      	movs	r1, r3
 800b4d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4d2:	f7f4 fe35 	bl	8000140 <__udivsi3>
 800b4d6:	0003      	movs	r3, r0
 800b4d8:	005a      	lsls	r2, r3, #1
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	18d2      	adds	r2, r2, r3
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	0019      	movs	r1, r3
 800b4e8:	0010      	movs	r0, r2
 800b4ea:	f7f4 fe29 	bl	8000140 <__udivsi3>
 800b4ee:	0003      	movs	r3, r0
 800b4f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f4:	2b0f      	cmp	r3, #15
 800b4f6:	d921      	bls.n	800b53c <UART_SetConfig+0x2d0>
 800b4f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4fa:	2380      	movs	r3, #128	@ 0x80
 800b4fc:	025b      	lsls	r3, r3, #9
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d21c      	bcs.n	800b53c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b504:	b29a      	uxth	r2, r3
 800b506:	2012      	movs	r0, #18
 800b508:	2420      	movs	r4, #32
 800b50a:	1903      	adds	r3, r0, r4
 800b50c:	19db      	adds	r3, r3, r7
 800b50e:	210f      	movs	r1, #15
 800b510:	438a      	bics	r2, r1
 800b512:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b516:	085b      	lsrs	r3, r3, #1
 800b518:	b29b      	uxth	r3, r3
 800b51a:	2207      	movs	r2, #7
 800b51c:	4013      	ands	r3, r2
 800b51e:	b299      	uxth	r1, r3
 800b520:	1903      	adds	r3, r0, r4
 800b522:	19db      	adds	r3, r3, r7
 800b524:	1902      	adds	r2, r0, r4
 800b526:	19d2      	adds	r2, r2, r7
 800b528:	8812      	ldrh	r2, [r2, #0]
 800b52a:	430a      	orrs	r2, r1
 800b52c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	1902      	adds	r2, r0, r4
 800b534:	19d2      	adds	r2, r2, r7
 800b536:	8812      	ldrh	r2, [r2, #0]
 800b538:	60da      	str	r2, [r3, #12]
 800b53a:	e051      	b.n	800b5e0 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 800b53c:	231f      	movs	r3, #31
 800b53e:	2220      	movs	r2, #32
 800b540:	189b      	adds	r3, r3, r2
 800b542:	19db      	adds	r3, r3, r7
 800b544:	2201      	movs	r2, #1
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	e04a      	b.n	800b5e0 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b54a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b54c:	0018      	movs	r0, r3
 800b54e:	f7fd fc15 	bl	8008d7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b552:	0003      	movs	r3, r0
 800b554:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800b556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d041      	beq.n	800b5e0 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b560:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d0 <UART_SetConfig+0x364>)
 800b562:	0052      	lsls	r2, r2, #1
 800b564:	5ad3      	ldrh	r3, [r2, r3]
 800b566:	0019      	movs	r1, r3
 800b568:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b56a:	f7f4 fde9 	bl	8000140 <__udivsi3>
 800b56e:	0003      	movs	r3, r0
 800b570:	001a      	movs	r2, r3
 800b572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	18d2      	adds	r2, r2, r3
 800b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	0019      	movs	r1, r3
 800b580:	0010      	movs	r0, r2
 800b582:	f7f4 fddd 	bl	8000140 <__udivsi3>
 800b586:	0003      	movs	r3, r0
 800b588:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58c:	2b0f      	cmp	r3, #15
 800b58e:	d921      	bls.n	800b5d4 <UART_SetConfig+0x368>
 800b590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b592:	2380      	movs	r3, #128	@ 0x80
 800b594:	025b      	lsls	r3, r3, #9
 800b596:	429a      	cmp	r2, r3
 800b598:	d21c      	bcs.n	800b5d4 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	60da      	str	r2, [r3, #12]
 800b5a4:	e01c      	b.n	800b5e0 <UART_SetConfig+0x374>
 800b5a6:	46c0      	nop			@ (mov r8, r8)
 800b5a8:	40008000 	.word	0x40008000
 800b5ac:	cfff69f3 	.word	0xcfff69f3
 800b5b0:	ffffcfff 	.word	0xffffcfff
 800b5b4:	40008400 	.word	0x40008400
 800b5b8:	40008c00 	.word	0x40008c00
 800b5bc:	11fff4ff 	.word	0x11fff4ff
 800b5c0:	40013800 	.word	0x40013800
 800b5c4:	40004400 	.word	0x40004400
 800b5c8:	40004800 	.word	0x40004800
 800b5cc:	40004c00 	.word	0x40004c00
 800b5d0:	08015c00 	.word	0x08015c00
      }
      else
      {
        ret = HAL_ERROR;
 800b5d4:	231f      	movs	r3, #31
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	189b      	adds	r3, r3, r2
 800b5da:	19db      	adds	r3, r3, r7
 800b5dc:	2201      	movs	r2, #1
 800b5de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	226a      	movs	r2, #106	@ 0x6a
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	2268      	movs	r2, #104	@ 0x68
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5fc:	231f      	movs	r3, #31
 800b5fe:	2220      	movs	r2, #32
 800b600:	189b      	adds	r3, r3, r2
 800b602:	19db      	adds	r3, r3, r7
 800b604:	781b      	ldrb	r3, [r3, #0]
}
 800b606:	0018      	movs	r0, r3
 800b608:	46bd      	mov	sp, r7
 800b60a:	b012      	add	sp, #72	@ 0x48
 800b60c:	bdb0      	pop	{r4, r5, r7, pc}
 800b60e:	46c0      	nop			@ (mov r8, r8)

0800b610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b61c:	2208      	movs	r2, #8
 800b61e:	4013      	ands	r3, r2
 800b620:	d00b      	beq.n	800b63a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	4a4a      	ldr	r2, [pc, #296]	@ (800b754 <UART_AdvFeatureConfig+0x144>)
 800b62a:	4013      	ands	r3, r2
 800b62c:	0019      	movs	r1, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63e:	2201      	movs	r2, #1
 800b640:	4013      	ands	r3, r2
 800b642:	d00b      	beq.n	800b65c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	4a43      	ldr	r2, [pc, #268]	@ (800b758 <UART_AdvFeatureConfig+0x148>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	0019      	movs	r1, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	430a      	orrs	r2, r1
 800b65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	2202      	movs	r2, #2
 800b662:	4013      	ands	r3, r2
 800b664:	d00b      	beq.n	800b67e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	4a3b      	ldr	r2, [pc, #236]	@ (800b75c <UART_AdvFeatureConfig+0x14c>)
 800b66e:	4013      	ands	r3, r2
 800b670:	0019      	movs	r1, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b682:	2204      	movs	r2, #4
 800b684:	4013      	ands	r3, r2
 800b686:	d00b      	beq.n	800b6a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4a34      	ldr	r2, [pc, #208]	@ (800b760 <UART_AdvFeatureConfig+0x150>)
 800b690:	4013      	ands	r3, r2
 800b692:	0019      	movs	r1, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a4:	2210      	movs	r2, #16
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	d00b      	beq.n	800b6c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	4a2c      	ldr	r2, [pc, #176]	@ (800b764 <UART_AdvFeatureConfig+0x154>)
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	0019      	movs	r1, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	d00b      	beq.n	800b6e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	4a25      	ldr	r2, [pc, #148]	@ (800b768 <UART_AdvFeatureConfig+0x158>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	0019      	movs	r1, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e8:	2240      	movs	r2, #64	@ 0x40
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	d01d      	beq.n	800b72a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b76c <UART_AdvFeatureConfig+0x15c>)
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	0019      	movs	r1, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b70a:	2380      	movs	r3, #128	@ 0x80
 800b70c:	035b      	lsls	r3, r3, #13
 800b70e:	429a      	cmp	r2, r3
 800b710:	d10b      	bne.n	800b72a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	4a15      	ldr	r2, [pc, #84]	@ (800b770 <UART_AdvFeatureConfig+0x160>)
 800b71a:	4013      	ands	r3, r2
 800b71c:	0019      	movs	r1, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72e:	2280      	movs	r2, #128	@ 0x80
 800b730:	4013      	ands	r3, r2
 800b732:	d00b      	beq.n	800b74c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	4a0e      	ldr	r2, [pc, #56]	@ (800b774 <UART_AdvFeatureConfig+0x164>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	0019      	movs	r1, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	605a      	str	r2, [r3, #4]
  }
}
 800b74c:	46c0      	nop			@ (mov r8, r8)
 800b74e:	46bd      	mov	sp, r7
 800b750:	b002      	add	sp, #8
 800b752:	bd80      	pop	{r7, pc}
 800b754:	ffff7fff 	.word	0xffff7fff
 800b758:	fffdffff 	.word	0xfffdffff
 800b75c:	fffeffff 	.word	0xfffeffff
 800b760:	fffbffff 	.word	0xfffbffff
 800b764:	ffffefff 	.word	0xffffefff
 800b768:	ffffdfff 	.word	0xffffdfff
 800b76c:	ffefffff 	.word	0xffefffff
 800b770:	ff9fffff 	.word	0xff9fffff
 800b774:	fff7ffff 	.word	0xfff7ffff

0800b778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b092      	sub	sp, #72	@ 0x48
 800b77c:	af02      	add	r7, sp, #8
 800b77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2290      	movs	r2, #144	@ 0x90
 800b784:	2100      	movs	r1, #0
 800b786:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b788:	f7f8 fad6 	bl	8003d38 <HAL_GetTick>
 800b78c:	0003      	movs	r3, r0
 800b78e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2208      	movs	r2, #8
 800b798:	4013      	ands	r3, r2
 800b79a:	2b08      	cmp	r3, #8
 800b79c:	d12d      	bne.n	800b7fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a0:	2280      	movs	r2, #128	@ 0x80
 800b7a2:	0391      	lsls	r1, r2, #14
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4a47      	ldr	r2, [pc, #284]	@ (800b8c4 <UART_CheckIdleState+0x14c>)
 800b7a8:	9200      	str	r2, [sp, #0]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f000 f88e 	bl	800b8cc <UART_WaitOnFlagUntilTimeout>
 800b7b0:	1e03      	subs	r3, r0, #0
 800b7b2:	d022      	beq.n	800b7fa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b7b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7be:	2301      	movs	r3, #1
 800b7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c4:	f383 8810 	msr	PRIMASK, r3
}
 800b7c8:	46c0      	nop			@ (mov r8, r8)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2180      	movs	r1, #128	@ 0x80
 800b7d6:	438a      	bics	r2, r1
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e0:	f383 8810 	msr	PRIMASK, r3
}
 800b7e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2288      	movs	r2, #136	@ 0x88
 800b7ea:	2120      	movs	r1, #32
 800b7ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2284      	movs	r2, #132	@ 0x84
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e060      	b.n	800b8bc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2204      	movs	r2, #4
 800b802:	4013      	ands	r3, r2
 800b804:	2b04      	cmp	r3, #4
 800b806:	d146      	bne.n	800b896 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b80a:	2280      	movs	r2, #128	@ 0x80
 800b80c:	03d1      	lsls	r1, r2, #15
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4a2c      	ldr	r2, [pc, #176]	@ (800b8c4 <UART_CheckIdleState+0x14c>)
 800b812:	9200      	str	r2, [sp, #0]
 800b814:	2200      	movs	r2, #0
 800b816:	f000 f859 	bl	800b8cc <UART_WaitOnFlagUntilTimeout>
 800b81a:	1e03      	subs	r3, r0, #0
 800b81c:	d03b      	beq.n	800b896 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b81e:	f3ef 8310 	mrs	r3, PRIMASK
 800b822:	60fb      	str	r3, [r7, #12]
  return(result);
 800b824:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b826:	637b      	str	r3, [r7, #52]	@ 0x34
 800b828:	2301      	movs	r3, #1
 800b82a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f383 8810 	msr	PRIMASK, r3
}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4922      	ldr	r1, [pc, #136]	@ (800b8c8 <UART_CheckIdleState+0x150>)
 800b840:	400a      	ands	r2, r1
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	f383 8810 	msr	PRIMASK, r3
}
 800b84e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b850:	f3ef 8310 	mrs	r3, PRIMASK
 800b854:	61bb      	str	r3, [r7, #24]
  return(result);
 800b856:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b858:	633b      	str	r3, [r7, #48]	@ 0x30
 800b85a:	2301      	movs	r3, #1
 800b85c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	f383 8810 	msr	PRIMASK, r3
}
 800b864:	46c0      	nop			@ (mov r8, r8)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2101      	movs	r1, #1
 800b872:	438a      	bics	r2, r1
 800b874:	609a      	str	r2, [r3, #8]
 800b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b878:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	f383 8810 	msr	PRIMASK, r3
}
 800b880:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	228c      	movs	r2, #140	@ 0x8c
 800b886:	2120      	movs	r1, #32
 800b888:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2284      	movs	r2, #132	@ 0x84
 800b88e:	2100      	movs	r1, #0
 800b890:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b892:	2303      	movs	r3, #3
 800b894:	e012      	b.n	800b8bc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2288      	movs	r2, #136	@ 0x88
 800b89a:	2120      	movs	r1, #32
 800b89c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	228c      	movs	r2, #140	@ 0x8c
 800b8a2:	2120      	movs	r1, #32
 800b8a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2284      	movs	r2, #132	@ 0x84
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b010      	add	sp, #64	@ 0x40
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	01ffffff 	.word	0x01ffffff
 800b8c8:	fffffedf 	.word	0xfffffedf

0800b8cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	603b      	str	r3, [r7, #0]
 800b8d8:	1dfb      	adds	r3, r7, #7
 800b8da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8dc:	e051      	b.n	800b982 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	d04e      	beq.n	800b982 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8e4:	f7f8 fa28 	bl	8003d38 <HAL_GetTick>
 800b8e8:	0002      	movs	r2, r0
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d302      	bcc.n	800b8fa <UART_WaitOnFlagUntilTimeout+0x2e>
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e051      	b.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2204      	movs	r2, #4
 800b906:	4013      	ands	r3, r2
 800b908:	d03b      	beq.n	800b982 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b80      	cmp	r3, #128	@ 0x80
 800b90e:	d038      	beq.n	800b982 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b40      	cmp	r3, #64	@ 0x40
 800b914:	d035      	beq.n	800b982 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	2208      	movs	r2, #8
 800b91e:	4013      	ands	r3, r2
 800b920:	2b08      	cmp	r3, #8
 800b922:	d111      	bne.n	800b948 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2208      	movs	r2, #8
 800b92a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	0018      	movs	r0, r3
 800b930:	f000 f83c 	bl	800b9ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2290      	movs	r2, #144	@ 0x90
 800b938:	2108      	movs	r1, #8
 800b93a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2284      	movs	r2, #132	@ 0x84
 800b940:	2100      	movs	r1, #0
 800b942:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e02c      	b.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	69da      	ldr	r2, [r3, #28]
 800b94e:	2380      	movs	r3, #128	@ 0x80
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	401a      	ands	r2, r3
 800b954:	2380      	movs	r3, #128	@ 0x80
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	429a      	cmp	r2, r3
 800b95a:	d112      	bne.n	800b982 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2280      	movs	r2, #128	@ 0x80
 800b962:	0112      	lsls	r2, r2, #4
 800b964:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	0018      	movs	r0, r3
 800b96a:	f000 f81f 	bl	800b9ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2290      	movs	r2, #144	@ 0x90
 800b972:	2120      	movs	r1, #32
 800b974:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2284      	movs	r2, #132	@ 0x84
 800b97a:	2100      	movs	r1, #0
 800b97c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e00f      	b.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	4013      	ands	r3, r2
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	425a      	negs	r2, r3
 800b992:	4153      	adcs	r3, r2
 800b994:	b2db      	uxtb	r3, r3
 800b996:	001a      	movs	r2, r3
 800b998:	1dfb      	adds	r3, r7, #7
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d09e      	beq.n	800b8de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	b004      	add	sp, #16
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08e      	sub	sp, #56	@ 0x38
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b8:	617b      	str	r3, [r7, #20]
  return(result);
 800b9ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9be:	2301      	movs	r3, #1
 800b9c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	f383 8810 	msr	PRIMASK, r3
}
 800b9c8:	46c0      	nop			@ (mov r8, r8)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4926      	ldr	r1, [pc, #152]	@ (800ba70 <UART_EndRxTransfer+0xc4>)
 800b9d6:	400a      	ands	r2, r1
 800b9d8:	601a      	str	r2, [r3, #0]
 800b9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	f383 8810 	msr	PRIMASK, r3
}
 800b9e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ea:	623b      	str	r3, [r7, #32]
  return(result);
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	f383 8810 	msr	PRIMASK, r3
}
 800b9fa:	46c0      	nop			@ (mov r8, r8)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	491b      	ldr	r1, [pc, #108]	@ (800ba74 <UART_EndRxTransfer+0xc8>)
 800ba08:	400a      	ands	r2, r1
 800ba0a:	609a      	str	r2, [r3, #8]
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba12:	f383 8810 	msr	PRIMASK, r3
}
 800ba16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d118      	bne.n	800ba52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ba20:	f3ef 8310 	mrs	r3, PRIMASK
 800ba24:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f383 8810 	msr	PRIMASK, r3
}
 800ba34:	46c0      	nop			@ (mov r8, r8)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2110      	movs	r1, #16
 800ba42:	438a      	bics	r2, r1
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f383 8810 	msr	PRIMASK, r3
}
 800ba50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	228c      	movs	r2, #140	@ 0x8c
 800ba56:	2120      	movs	r1, #32
 800ba58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba66:	46c0      	nop			@ (mov r8, r8)
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	b00e      	add	sp, #56	@ 0x38
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	46c0      	nop			@ (mov r8, r8)
 800ba70:	fffffedf 	.word	0xfffffedf
 800ba74:	effffffe 	.word	0xeffffffe

0800ba78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2284      	movs	r2, #132	@ 0x84
 800ba84:	5c9b      	ldrb	r3, [r3, r2]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e027      	b.n	800bade <HAL_UARTEx_DisableFifoMode+0x66>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2284      	movs	r2, #132	@ 0x84
 800ba92:	2101      	movs	r1, #1
 800ba94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2288      	movs	r2, #136	@ 0x88
 800ba9a:	2124      	movs	r1, #36	@ 0x24
 800ba9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2101      	movs	r1, #1
 800bab2:	438a      	bics	r2, r1
 800bab4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	4a0b      	ldr	r2, [pc, #44]	@ (800bae8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800baba:	4013      	ands	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2288      	movs	r2, #136	@ 0x88
 800bad0:	2120      	movs	r1, #32
 800bad2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2284      	movs	r2, #132	@ 0x84
 800bad8:	2100      	movs	r1, #0
 800bada:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	0018      	movs	r0, r3
 800bae0:	46bd      	mov	sp, r7
 800bae2:	b004      	add	sp, #16
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	46c0      	nop			@ (mov r8, r8)
 800bae8:	dfffffff 	.word	0xdfffffff

0800baec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2284      	movs	r2, #132	@ 0x84
 800bafa:	5c9b      	ldrb	r3, [r3, r2]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d101      	bne.n	800bb04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb00:	2302      	movs	r3, #2
 800bb02:	e02e      	b.n	800bb62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2284      	movs	r2, #132	@ 0x84
 800bb08:	2101      	movs	r1, #1
 800bb0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2288      	movs	r2, #136	@ 0x88
 800bb10:	2124      	movs	r1, #36	@ 0x24
 800bb12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2101      	movs	r1, #1
 800bb28:	438a      	bics	r2, r1
 800bb2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	00db      	lsls	r3, r3, #3
 800bb34:	08d9      	lsrs	r1, r3, #3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	0018      	movs	r0, r3
 800bb44:	f000 f854 	bl	800bbf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2288      	movs	r2, #136	@ 0x88
 800bb54:	2120      	movs	r1, #32
 800bb56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2284      	movs	r2, #132	@ 0x84
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	0018      	movs	r0, r3
 800bb64:	46bd      	mov	sp, r7
 800bb66:	b004      	add	sp, #16
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2284      	movs	r2, #132	@ 0x84
 800bb7a:	5c9b      	ldrb	r3, [r3, r2]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e02f      	b.n	800bbe4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2284      	movs	r2, #132	@ 0x84
 800bb88:	2101      	movs	r1, #1
 800bb8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2288      	movs	r2, #136	@ 0x88
 800bb90:	2124      	movs	r1, #36	@ 0x24
 800bb92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2101      	movs	r1, #1
 800bba8:	438a      	bics	r2, r1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	4a0e      	ldr	r2, [pc, #56]	@ (800bbec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	0019      	movs	r1, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f000 f813 	bl	800bbf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2288      	movs	r2, #136	@ 0x88
 800bbd6:	2120      	movs	r1, #32
 800bbd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2284      	movs	r2, #132	@ 0x84
 800bbde:	2100      	movs	r1, #0
 800bbe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	b004      	add	sp, #16
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	f1ffffff 	.word	0xf1ffffff

0800bbf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d108      	bne.n	800bc12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	226a      	movs	r2, #106	@ 0x6a
 800bc04:	2101      	movs	r1, #1
 800bc06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2268      	movs	r2, #104	@ 0x68
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc10:	e043      	b.n	800bc9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc12:	260f      	movs	r6, #15
 800bc14:	19bb      	adds	r3, r7, r6
 800bc16:	2208      	movs	r2, #8
 800bc18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc1a:	200e      	movs	r0, #14
 800bc1c:	183b      	adds	r3, r7, r0
 800bc1e:	2208      	movs	r2, #8
 800bc20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	0e5b      	lsrs	r3, r3, #25
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	240d      	movs	r4, #13
 800bc2e:	193b      	adds	r3, r7, r4
 800bc30:	2107      	movs	r1, #7
 800bc32:	400a      	ands	r2, r1
 800bc34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	0f5b      	lsrs	r3, r3, #29
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	250c      	movs	r5, #12
 800bc42:	197b      	adds	r3, r7, r5
 800bc44:	2107      	movs	r1, #7
 800bc46:	400a      	ands	r2, r1
 800bc48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc4a:	183b      	adds	r3, r7, r0
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	197a      	adds	r2, r7, r5
 800bc50:	7812      	ldrb	r2, [r2, #0]
 800bc52:	4914      	ldr	r1, [pc, #80]	@ (800bca4 <UARTEx_SetNbDataToProcess+0xb4>)
 800bc54:	5c8a      	ldrb	r2, [r1, r2]
 800bc56:	435a      	muls	r2, r3
 800bc58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc5a:	197b      	adds	r3, r7, r5
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	4a12      	ldr	r2, [pc, #72]	@ (800bca8 <UARTEx_SetNbDataToProcess+0xb8>)
 800bc60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc62:	0019      	movs	r1, r3
 800bc64:	f7f4 faf6 	bl	8000254 <__divsi3>
 800bc68:	0003      	movs	r3, r0
 800bc6a:	b299      	uxth	r1, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	226a      	movs	r2, #106	@ 0x6a
 800bc70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc72:	19bb      	adds	r3, r7, r6
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	193a      	adds	r2, r7, r4
 800bc78:	7812      	ldrb	r2, [r2, #0]
 800bc7a:	490a      	ldr	r1, [pc, #40]	@ (800bca4 <UARTEx_SetNbDataToProcess+0xb4>)
 800bc7c:	5c8a      	ldrb	r2, [r1, r2]
 800bc7e:	435a      	muls	r2, r3
 800bc80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc82:	193b      	adds	r3, r7, r4
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	4a08      	ldr	r2, [pc, #32]	@ (800bca8 <UARTEx_SetNbDataToProcess+0xb8>)
 800bc88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc8a:	0019      	movs	r1, r3
 800bc8c:	f7f4 fae2 	bl	8000254 <__divsi3>
 800bc90:	0003      	movs	r3, r0
 800bc92:	b299      	uxth	r1, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2268      	movs	r2, #104	@ 0x68
 800bc98:	5299      	strh	r1, [r3, r2]
}
 800bc9a:	46c0      	nop			@ (mov r8, r8)
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	b005      	add	sp, #20
 800bca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bca2:	46c0      	nop			@ (mov r8, r8)
 800bca4:	08015c18 	.word	0x08015c18
 800bca8:	08015c20 	.word	0x08015c20

0800bcac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcba:	4b05      	ldr	r3, [pc, #20]	@ (800bcd0 <USB_EnableGlobalInt+0x24>)
 800bcbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	b004      	add	sp, #16
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	46c0      	nop			@ (mov r8, r8)
 800bcd0:	0000bf80 	.word	0x0000bf80

0800bcd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcdc:	4b06      	ldr	r3, [pc, #24]	@ (800bcf8 <USB_DisableGlobalInt+0x24>)
 800bcde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	43d2      	mvns	r2, r2
 800bce8:	401a      	ands	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	b004      	add	sp, #16
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	0000bf80 	.word	0x0000bf80

0800bcfc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	000a      	movs	r2, r1
 800bd06:	1cfb      	adds	r3, r7, #3
 800bd08:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800bd0a:	1cfb      	adds	r3, r7, #3
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d107      	bne.n	800bd22 <USB_SetCurrentMode+0x26>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	085a      	lsrs	r2, r3, #1
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	641a      	str	r2, [r3, #64]	@ 0x40
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e000      	b.n	800bd24 <USB_SetCurrentMode+0x28>
    return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
}
 800bd24:	0018      	movs	r0, r3
 800bd26:	46bd      	mov	sp, r7
 800bd28:	b002      	add	sp, #8
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bd2c:	b5b0      	push	{r4, r5, r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	1d3b      	adds	r3, r7, #4
 800bd36:	6019      	str	r1, [r3, #0]
 800bd38:	605a      	str	r2, [r3, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd44:	2201      	movs	r2, #1
 800bd46:	4393      	bics	r3, r2
 800bd48:	001a      	movs	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bd4e:	2517      	movs	r5, #23
 800bd50:	197c      	adds	r4, r7, r5
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2100      	movs	r1, #0
 800bd56:	0018      	movs	r0, r3
 800bd58:	f7ff ffd0 	bl	800bcfc <USB_SetCurrentMode>
 800bd5c:	0003      	movs	r3, r0
 800bd5e:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bd66:	197b      	adds	r3, r7, r5
 800bd68:	781b      	ldrb	r3, [r3, #0]
}
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	b006      	add	sp, #24
 800bd70:	bdb0      	pop	{r4, r5, r7, pc}

0800bd72 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_DRD_TypeDef const *USBx, uint32_t num)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	0018      	movs	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b002      	add	sp, #8
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_DRD_TypeDef const *USBx)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	0018      	movs	r0, r3
 800bd92:	46bd      	mov	sp, r7
 800bd94:	b002      	add	sp, #8
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b0a0      	sub	sp, #128	@ 0x80
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bda2:	237f      	movs	r3, #127	@ 0x7f
 800bda4:	18fb      	adds	r3, r7, r3
 800bda6:	2200      	movs	r2, #0
 800bda8:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	18d3      	adds	r3, r2, r3
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4adc      	ldr	r2, [pc, #880]	@ (800c128 <USB_ActivateEndpoint+0x390>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* initialize Endpoint */
  switch (ep->type)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	78db      	ldrb	r3, [r3, #3]
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d00e      	beq.n	800bde2 <USB_ActivateEndpoint+0x4a>
 800bdc4:	dc19      	bgt.n	800bdfa <USB_ActivateEndpoint+0x62>
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d01c      	beq.n	800be04 <USB_ActivateEndpoint+0x6c>
 800bdca:	dc16      	bgt.n	800bdfa <USB_ActivateEndpoint+0x62>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <USB_ActivateEndpoint+0x3e>
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d00c      	beq.n	800bdee <USB_ActivateEndpoint+0x56>
 800bdd4:	e011      	b.n	800bdfa <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bdd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdd8:	2280      	movs	r2, #128	@ 0x80
 800bdda:	0092      	lsls	r2, r2, #2
 800bddc:	4313      	orrs	r3, r2
 800bdde:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800bde0:	e011      	b.n	800be06 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bde2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bde4:	22c0      	movs	r2, #192	@ 0xc0
 800bde6:	00d2      	lsls	r2, r2, #3
 800bde8:	4313      	orrs	r3, r2
 800bdea:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800bdec:	e00b      	b.n	800be06 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bdee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdf0:	2280      	movs	r2, #128	@ 0x80
 800bdf2:	00d2      	lsls	r2, r2, #3
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800bdf8:	e005      	b.n	800be06 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800bdfa:	237f      	movs	r3, #127	@ 0x7f
 800bdfc:	18fb      	adds	r3, r7, r3
 800bdfe:	2201      	movs	r2, #1
 800be00:	701a      	strb	r2, [r3, #0]
      break;
 800be02:	e000      	b.n	800be06 <USB_ActivateEndpoint+0x6e>
      break;
 800be04:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	18d3      	adds	r3, r2, r3
 800be10:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800be12:	49c6      	ldr	r1, [pc, #792]	@ (800c12c <USB_ActivateEndpoint+0x394>)
 800be14:	430a      	orrs	r2, r1
 800be16:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	18d3      	adds	r3, r2, r3
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4ac2      	ldr	r2, [pc, #776]	@ (800c130 <USB_ActivateEndpoint+0x398>)
 800be26:	4013      	ands	r3, r2
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	7812      	ldrb	r2, [r2, #0]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	18d3      	adds	r3, r2, r3
 800be3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be3c:	49bb      	ldr	r1, [pc, #748]	@ (800c12c <USB_ActivateEndpoint+0x394>)
 800be3e:	430a      	orrs	r2, r1
 800be40:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	7b1b      	ldrb	r3, [r3, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d000      	beq.n	800be4c <USB_ActivateEndpoint+0xb4>
 800be4a:	e155      	b.n	800c0f8 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	785b      	ldrb	r3, [r3, #1]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d06e      	beq.n	800bf32 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	4ab6      	ldr	r2, [pc, #728]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800be5c:	4694      	mov	ip, r2
 800be5e:	4463      	add	r3, ip
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	49b2      	ldr	r1, [pc, #712]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800be6a:	468c      	mov	ip, r1
 800be6c:	4463      	add	r3, ip
 800be6e:	0c12      	lsrs	r2, r2, #16
 800be70:	0412      	lsls	r2, r2, #16
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	4aae      	ldr	r2, [pc, #696]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800be7c:	4694      	mov	ip, r2
 800be7e:	4463      	add	r3, ip
 800be80:	6819      	ldr	r1, [r3, #0]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	88db      	ldrh	r3, [r3, #6]
 800be86:	089b      	lsrs	r3, r3, #2
 800be88:	b29b      	uxth	r3, r3
 800be8a:	009a      	lsls	r2, r3, #2
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	48a8      	ldr	r0, [pc, #672]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800be94:	4684      	mov	ip, r0
 800be96:	4463      	add	r3, ip
 800be98:	430a      	orrs	r2, r1
 800be9a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	18d3      	adds	r3, r2, r3
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	61bb      	str	r3, [r7, #24]
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	2240      	movs	r2, #64	@ 0x40
 800beae:	4013      	ands	r3, r2
 800beb0:	d011      	beq.n	800bed6 <USB_ActivateEndpoint+0x13e>
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	18d3      	adds	r3, r2, r3
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a9c      	ldr	r2, [pc, #624]	@ (800c130 <USB_ActivateEndpoint+0x398>)
 800bec0:	4013      	ands	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	18d3      	adds	r3, r2, r3
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	4999      	ldr	r1, [pc, #612]	@ (800c138 <USB_ActivateEndpoint+0x3a0>)
 800bed2:	430a      	orrs	r2, r1
 800bed4:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	78db      	ldrb	r3, [r3, #3]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d016      	beq.n	800bf0c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	18d3      	adds	r3, r2, r3
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a94      	ldr	r2, [pc, #592]	@ (800c13c <USB_ActivateEndpoint+0x3a4>)
 800beec:	4013      	ands	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2220      	movs	r2, #32
 800bef4:	4053      	eors	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	18d3      	adds	r3, r2, r3
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	4989      	ldr	r1, [pc, #548]	@ (800c12c <USB_ActivateEndpoint+0x394>)
 800bf06:	430a      	orrs	r2, r1
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	e396      	b.n	800c63a <USB_ActivateEndpoint+0x8a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	18d3      	adds	r3, r2, r3
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a88      	ldr	r2, [pc, #544]	@ (800c13c <USB_ActivateEndpoint+0x3a4>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	613b      	str	r3, [r7, #16]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	18d3      	adds	r3, r2, r3
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4980      	ldr	r1, [pc, #512]	@ (800c12c <USB_ActivateEndpoint+0x394>)
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	e383      	b.n	800c63a <USB_ActivateEndpoint+0x8a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	4a7e      	ldr	r2, [pc, #504]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bf3a:	4694      	mov	ip, r2
 800bf3c:	4463      	add	r3, ip
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	497b      	ldr	r1, [pc, #492]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bf48:	468c      	mov	ip, r1
 800bf4a:	4463      	add	r3, ip
 800bf4c:	0c12      	lsrs	r2, r2, #16
 800bf4e:	0412      	lsls	r2, r2, #16
 800bf50:	605a      	str	r2, [r3, #4]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	4a76      	ldr	r2, [pc, #472]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bf5a:	4694      	mov	ip, r2
 800bf5c:	4463      	add	r3, ip
 800bf5e:	6859      	ldr	r1, [r3, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	88db      	ldrh	r3, [r3, #6]
 800bf64:	089b      	lsrs	r3, r3, #2
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	009a      	lsls	r2, r3, #2
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	4870      	ldr	r0, [pc, #448]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bf72:	4684      	mov	ip, r0
 800bf74:	4463      	add	r3, ip
 800bf76:	430a      	orrs	r2, r1
 800bf78:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	4a6c      	ldr	r2, [pc, #432]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bf82:	4694      	mov	ip, r2
 800bf84:	4463      	add	r3, ip
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	4969      	ldr	r1, [pc, #420]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bf90:	468c      	mov	ip, r1
 800bf92:	4463      	add	r3, ip
 800bf94:	0192      	lsls	r2, r2, #6
 800bf96:	0992      	lsrs	r2, r2, #6
 800bf98:	605a      	str	r2, [r3, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d111      	bne.n	800bfc6 <USB_ActivateEndpoint+0x22e>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	4a62      	ldr	r2, [pc, #392]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bfaa:	4694      	mov	ip, r2
 800bfac:	4463      	add	r3, ip
 800bfae:	685a      	ldr	r2, [r3, #4]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	495f      	ldr	r1, [pc, #380]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bfb8:	468c      	mov	ip, r1
 800bfba:	4463      	add	r3, ip
 800bfbc:	2180      	movs	r1, #128	@ 0x80
 800bfbe:	0609      	lsls	r1, r1, #24
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	605a      	str	r2, [r3, #4]
 800bfc4:	e041      	b.n	800c04a <USB_ActivateEndpoint+0x2b2>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfcc:	d81d      	bhi.n	800c00a <USB_ActivateEndpoint+0x272>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	085b      	lsrs	r3, r3, #1
 800bfd4:	677b      	str	r3, [r7, #116]	@ 0x74
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	4013      	ands	r3, r2
 800bfde:	d002      	beq.n	800bfe6 <USB_ActivateEndpoint+0x24e>
 800bfe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	677b      	str	r3, [r7, #116]	@ 0x74
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	4a51      	ldr	r2, [pc, #324]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800bfee:	4694      	mov	ip, r2
 800bff0:	4463      	add	r3, ip
 800bff2:	6859      	ldr	r1, [r3, #4]
 800bff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bff6:	069a      	lsls	r2, r3, #26
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	484d      	ldr	r0, [pc, #308]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800c000:	4684      	mov	ip, r0
 800c002:	4463      	add	r3, ip
 800c004:	430a      	orrs	r2, r1
 800c006:	605a      	str	r2, [r3, #4]
 800c008:	e01f      	b.n	800c04a <USB_ActivateEndpoint+0x2b2>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	095b      	lsrs	r3, r3, #5
 800c010:	677b      	str	r3, [r7, #116]	@ 0x74
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	221f      	movs	r2, #31
 800c018:	4013      	ands	r3, r2
 800c01a:	d102      	bne.n	800c022 <USB_ActivateEndpoint+0x28a>
 800c01c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c01e:	3b01      	subs	r3, #1
 800c020:	677b      	str	r3, [r7, #116]	@ 0x74
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4a42      	ldr	r2, [pc, #264]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800c02a:	4694      	mov	ip, r2
 800c02c:	4463      	add	r3, ip
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c032:	069b      	lsls	r3, r3, #26
 800c034:	431a      	orrs	r2, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	493d      	ldr	r1, [pc, #244]	@ (800c134 <USB_ActivateEndpoint+0x39c>)
 800c03e:	468c      	mov	ip, r1
 800c040:	4463      	add	r3, ip
 800c042:	2180      	movs	r1, #128	@ 0x80
 800c044:	0609      	lsls	r1, r1, #24
 800c046:	430a      	orrs	r2, r1
 800c048:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	18d3      	adds	r3, r2, r3
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c05a:	2380      	movs	r3, #128	@ 0x80
 800c05c:	01db      	lsls	r3, r3, #7
 800c05e:	4013      	ands	r3, r2
 800c060:	d011      	beq.n	800c086 <USB_ActivateEndpoint+0x2ee>
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	18d3      	adds	r3, r2, r3
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a30      	ldr	r2, [pc, #192]	@ (800c130 <USB_ActivateEndpoint+0x398>)
 800c070:	4013      	ands	r3, r2
 800c072:	627b      	str	r3, [r7, #36]	@ 0x24
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	18d3      	adds	r3, r2, r3
 800c07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c080:	492f      	ldr	r1, [pc, #188]	@ (800c140 <USB_ActivateEndpoint+0x3a8>)
 800c082:	430a      	orrs	r2, r1
 800c084:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d11c      	bne.n	800c0c8 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	18d3      	adds	r3, r2, r3
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a2a      	ldr	r2, [pc, #168]	@ (800c144 <USB_ActivateEndpoint+0x3ac>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	61fb      	str	r3, [r7, #28]
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	2280      	movs	r2, #128	@ 0x80
 800c0a4:	0152      	lsls	r2, r2, #5
 800c0a6:	4053      	eors	r3, r2
 800c0a8:	61fb      	str	r3, [r7, #28]
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	2280      	movs	r2, #128	@ 0x80
 800c0ae:	0192      	lsls	r2, r2, #6
 800c0b0:	4053      	eors	r3, r2
 800c0b2:	61fb      	str	r3, [r7, #28]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	18d3      	adds	r3, r2, r3
 800c0be:	69fa      	ldr	r2, [r7, #28]
 800c0c0:	491a      	ldr	r1, [pc, #104]	@ (800c12c <USB_ActivateEndpoint+0x394>)
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	e2b8      	b.n	800c63a <USB_ActivateEndpoint+0x8a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	18d3      	adds	r3, r2, r3
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c144 <USB_ActivateEndpoint+0x3ac>)
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	2280      	movs	r2, #128	@ 0x80
 800c0de:	0192      	lsls	r2, r2, #6
 800c0e0:	4053      	eors	r3, r2
 800c0e2:	623b      	str	r3, [r7, #32]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	18d3      	adds	r3, r2, r3
 800c0ee:	6a3a      	ldr	r2, [r7, #32]
 800c0f0:	490e      	ldr	r1, [pc, #56]	@ (800c12c <USB_ActivateEndpoint+0x394>)
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	e2a0      	b.n	800c63a <USB_ActivateEndpoint+0x8a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	78db      	ldrb	r3, [r3, #3]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d125      	bne.n	800c14c <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	18d3      	adds	r3, r2, r3
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a08      	ldr	r2, [pc, #32]	@ (800c130 <USB_ActivateEndpoint+0x398>)
 800c10e:	4013      	ands	r3, r2
 800c110:	663b      	str	r3, [r7, #96]	@ 0x60
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	18d3      	adds	r3, r2, r3
 800c11c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c11e:	490a      	ldr	r1, [pc, #40]	@ (800c148 <USB_ActivateEndpoint+0x3b0>)
 800c120:	430a      	orrs	r2, r1
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	e024      	b.n	800c170 <USB_ActivateEndpoint+0x3d8>
 800c126:	46c0      	nop			@ (mov r8, r8)
 800c128:	07ff898f 	.word	0x07ff898f
 800c12c:	00008080 	.word	0x00008080
 800c130:	07ff8f8f 	.word	0x07ff8f8f
 800c134:	40009800 	.word	0x40009800
 800c138:	000080c0 	.word	0x000080c0
 800c13c:	07ff8fbf 	.word	0x07ff8fbf
 800c140:	0000c080 	.word	0x0000c080
 800c144:	07ffbf8f 	.word	0x07ffbf8f
 800c148:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	18d3      	adds	r3, r2, r3
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4aca      	ldr	r2, [pc, #808]	@ (800c484 <USB_ActivateEndpoint+0x6ec>)
 800c15a:	4013      	ands	r3, r2
 800c15c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	18d3      	adds	r3, r2, r3
 800c168:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c16a:	49c7      	ldr	r1, [pc, #796]	@ (800c488 <USB_ActivateEndpoint+0x6f0>)
 800c16c:	430a      	orrs	r2, r1
 800c16e:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	4ac5      	ldr	r2, [pc, #788]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c178:	4694      	mov	ip, r2
 800c17a:	4463      	add	r3, ip
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	49c1      	ldr	r1, [pc, #772]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c186:	468c      	mov	ip, r1
 800c188:	4463      	add	r3, ip
 800c18a:	0c12      	lsrs	r2, r2, #16
 800c18c:	0412      	lsls	r2, r2, #16
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	4abd      	ldr	r2, [pc, #756]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c198:	4694      	mov	ip, r2
 800c19a:	4463      	add	r3, ip
 800c19c:	6819      	ldr	r1, [r3, #0]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	891b      	ldrh	r3, [r3, #8]
 800c1a2:	089b      	lsrs	r3, r3, #2
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	009a      	lsls	r2, r3, #2
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	48b7      	ldr	r0, [pc, #732]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c1b0:	4684      	mov	ip, r0
 800c1b2:	4463      	add	r3, ip
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	601a      	str	r2, [r3, #0]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	4ab3      	ldr	r2, [pc, #716]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c1c0:	4694      	mov	ip, r2
 800c1c2:	4463      	add	r3, ip
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	49af      	ldr	r1, [pc, #700]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c1ce:	468c      	mov	ip, r1
 800c1d0:	4463      	add	r3, ip
 800c1d2:	0c12      	lsrs	r2, r2, #16
 800c1d4:	0412      	lsls	r2, r2, #16
 800c1d6:	605a      	str	r2, [r3, #4]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	4aab      	ldr	r2, [pc, #684]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c1e0:	4694      	mov	ip, r2
 800c1e2:	4463      	add	r3, ip
 800c1e4:	6859      	ldr	r1, [r3, #4]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	895b      	ldrh	r3, [r3, #10]
 800c1ea:	089b      	lsrs	r3, r3, #2
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	009a      	lsls	r2, r3, #2
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	48a5      	ldr	r0, [pc, #660]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c1f8:	4684      	mov	ip, r0
 800c1fa:	4463      	add	r3, ip
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	785b      	ldrb	r3, [r3, #1]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d000      	beq.n	800c20a <USB_ActivateEndpoint+0x472>
 800c208:	e19d      	b.n	800c546 <USB_ActivateEndpoint+0x7ae>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	18d3      	adds	r3, r2, r3
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	643b      	str	r3, [r7, #64]	@ 0x40
 800c218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c21a:	2380      	movs	r3, #128	@ 0x80
 800c21c:	01db      	lsls	r3, r3, #7
 800c21e:	4013      	ands	r3, r2
 800c220:	d011      	beq.n	800c246 <USB_ActivateEndpoint+0x4ae>
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	18d3      	adds	r3, r2, r3
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a98      	ldr	r2, [pc, #608]	@ (800c490 <USB_ActivateEndpoint+0x6f8>)
 800c230:	4013      	ands	r3, r2
 800c232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	18d3      	adds	r3, r2, r3
 800c23e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c240:	4994      	ldr	r1, [pc, #592]	@ (800c494 <USB_ActivateEndpoint+0x6fc>)
 800c242:	430a      	orrs	r2, r1
 800c244:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	18d3      	adds	r3, r2, r3
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c256:	2240      	movs	r2, #64	@ 0x40
 800c258:	4013      	ands	r3, r2
 800c25a:	d011      	beq.n	800c280 <USB_ActivateEndpoint+0x4e8>
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	18d3      	adds	r3, r2, r3
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a89      	ldr	r2, [pc, #548]	@ (800c490 <USB_ActivateEndpoint+0x6f8>)
 800c26a:	4013      	ands	r3, r2
 800c26c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	18d3      	adds	r3, r2, r3
 800c278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c27a:	4987      	ldr	r1, [pc, #540]	@ (800c498 <USB_ActivateEndpoint+0x700>)
 800c27c:	430a      	orrs	r2, r1
 800c27e:	601a      	str	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	785b      	ldrb	r3, [r3, #1]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d168      	bne.n	800c35a <USB_ActivateEndpoint+0x5c2>
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	00db      	lsls	r3, r3, #3
 800c28e:	4a7f      	ldr	r2, [pc, #508]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c290:	4694      	mov	ip, r2
 800c292:	4463      	add	r3, ip
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	497b      	ldr	r1, [pc, #492]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c29e:	468c      	mov	ip, r1
 800c2a0:	4463      	add	r3, ip
 800c2a2:	0192      	lsls	r2, r2, #6
 800c2a4:	0992      	lsrs	r2, r2, #6
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d111      	bne.n	800c2d4 <USB_ActivateEndpoint+0x53c>
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	4a75      	ldr	r2, [pc, #468]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c2b8:	4694      	mov	ip, r2
 800c2ba:	4463      	add	r3, ip
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	4971      	ldr	r1, [pc, #452]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c2c6:	468c      	mov	ip, r1
 800c2c8:	4463      	add	r3, ip
 800c2ca:	2180      	movs	r1, #128	@ 0x80
 800c2cc:	0609      	lsls	r1, r1, #24
 800c2ce:	430a      	orrs	r2, r1
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	e068      	b.n	800c3a6 <USB_ActivateEndpoint+0x60e>
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2da:	d81d      	bhi.n	800c318 <USB_ActivateEndpoint+0x580>
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	085b      	lsrs	r3, r3, #1
 800c2e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	d002      	beq.n	800c2f4 <USB_ActivateEndpoint+0x55c>
 800c2ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	00db      	lsls	r3, r3, #3
 800c2fa:	4a64      	ldr	r2, [pc, #400]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c2fc:	4694      	mov	ip, r2
 800c2fe:	4463      	add	r3, ip
 800c300:	6819      	ldr	r1, [r3, #0]
 800c302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c304:	069a      	lsls	r2, r3, #26
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	485f      	ldr	r0, [pc, #380]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c30e:	4684      	mov	ip, r0
 800c310:	4463      	add	r3, ip
 800c312:	430a      	orrs	r2, r1
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	e046      	b.n	800c3a6 <USB_ActivateEndpoint+0x60e>
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	095b      	lsrs	r3, r3, #5
 800c31e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	691b      	ldr	r3, [r3, #16]
 800c324:	221f      	movs	r2, #31
 800c326:	4013      	ands	r3, r2
 800c328:	d102      	bne.n	800c330 <USB_ActivateEndpoint+0x598>
 800c32a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c32c:	3b01      	subs	r3, #1
 800c32e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	4a55      	ldr	r2, [pc, #340]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c338:	4694      	mov	ip, r2
 800c33a:	4463      	add	r3, ip
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c340:	069b      	lsls	r3, r3, #26
 800c342:	431a      	orrs	r2, r3
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	00db      	lsls	r3, r3, #3
 800c34a:	4950      	ldr	r1, [pc, #320]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c34c:	468c      	mov	ip, r1
 800c34e:	4463      	add	r3, ip
 800c350:	2180      	movs	r1, #128	@ 0x80
 800c352:	0609      	lsls	r1, r1, #24
 800c354:	430a      	orrs	r2, r1
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	e025      	b.n	800c3a6 <USB_ActivateEndpoint+0x60e>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d121      	bne.n	800c3a6 <USB_ActivateEndpoint+0x60e>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	4a48      	ldr	r2, [pc, #288]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c36a:	4694      	mov	ip, r2
 800c36c:	4463      	add	r3, ip
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	4945      	ldr	r1, [pc, #276]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c378:	468c      	mov	ip, r1
 800c37a:	4463      	add	r3, ip
 800c37c:	0412      	lsls	r2, r2, #16
 800c37e:	0c12      	lsrs	r2, r2, #16
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	4a40      	ldr	r2, [pc, #256]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c38a:	4694      	mov	ip, r2
 800c38c:	4463      	add	r3, ip
 800c38e:	6819      	ldr	r1, [r3, #0]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	041a      	lsls	r2, r3, #16
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	483b      	ldr	r0, [pc, #236]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c39e:	4684      	mov	ip, r0
 800c3a0:	4463      	add	r3, ip
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	785b      	ldrb	r3, [r3, #1]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d000      	beq.n	800c3b0 <USB_ActivateEndpoint+0x618>
 800c3ae:	e075      	b.n	800c49c <USB_ActivateEndpoint+0x704>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	4a35      	ldr	r2, [pc, #212]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c3b8:	4694      	mov	ip, r2
 800c3ba:	4463      	add	r3, ip
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	4931      	ldr	r1, [pc, #196]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c3c6:	468c      	mov	ip, r1
 800c3c8:	4463      	add	r3, ip
 800c3ca:	0192      	lsls	r2, r2, #6
 800c3cc:	0992      	lsrs	r2, r2, #6
 800c3ce:	605a      	str	r2, [r3, #4]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d111      	bne.n	800c3fc <USB_ActivateEndpoint+0x664>
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	4a2b      	ldr	r2, [pc, #172]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c3e0:	4694      	mov	ip, r2
 800c3e2:	4463      	add	r3, ip
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4927      	ldr	r1, [pc, #156]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c3ee:	468c      	mov	ip, r1
 800c3f0:	4463      	add	r3, ip
 800c3f2:	2180      	movs	r1, #128	@ 0x80
 800c3f4:	0609      	lsls	r1, r1, #24
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	605a      	str	r2, [r3, #4]
 800c3fa:	e075      	b.n	800c4e8 <USB_ActivateEndpoint+0x750>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	2b3e      	cmp	r3, #62	@ 0x3e
 800c402:	d81d      	bhi.n	800c440 <USB_ActivateEndpoint+0x6a8>
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	085b      	lsrs	r3, r3, #1
 800c40a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	2201      	movs	r2, #1
 800c412:	4013      	ands	r3, r2
 800c414:	d002      	beq.n	800c41c <USB_ActivateEndpoint+0x684>
 800c416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c418:	3301      	adds	r3, #1
 800c41a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	4a1a      	ldr	r2, [pc, #104]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c424:	4694      	mov	ip, r2
 800c426:	4463      	add	r3, ip
 800c428:	6859      	ldr	r1, [r3, #4]
 800c42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c42c:	069a      	lsls	r2, r3, #26
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	4815      	ldr	r0, [pc, #84]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c436:	4684      	mov	ip, r0
 800c438:	4463      	add	r3, ip
 800c43a:	430a      	orrs	r2, r1
 800c43c:	605a      	str	r2, [r3, #4]
 800c43e:	e053      	b.n	800c4e8 <USB_ActivateEndpoint+0x750>
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	095b      	lsrs	r3, r3, #5
 800c446:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	221f      	movs	r2, #31
 800c44e:	4013      	ands	r3, r2
 800c450:	d102      	bne.n	800c458 <USB_ActivateEndpoint+0x6c0>
 800c452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c454:	3b01      	subs	r3, #1
 800c456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	00db      	lsls	r3, r3, #3
 800c45e:	4a0b      	ldr	r2, [pc, #44]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c460:	4694      	mov	ip, r2
 800c462:	4463      	add	r3, ip
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c468:	069b      	lsls	r3, r3, #26
 800c46a:	431a      	orrs	r2, r3
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	4906      	ldr	r1, [pc, #24]	@ (800c48c <USB_ActivateEndpoint+0x6f4>)
 800c474:	468c      	mov	ip, r1
 800c476:	4463      	add	r3, ip
 800c478:	2180      	movs	r1, #128	@ 0x80
 800c47a:	0609      	lsls	r1, r1, #24
 800c47c:	430a      	orrs	r2, r1
 800c47e:	605a      	str	r2, [r3, #4]
 800c480:	e032      	b.n	800c4e8 <USB_ActivateEndpoint+0x750>
 800c482:	46c0      	nop			@ (mov r8, r8)
 800c484:	07ff8e8f 	.word	0x07ff8e8f
 800c488:	00008080 	.word	0x00008080
 800c48c:	40009800 	.word	0x40009800
 800c490:	07ff8f8f 	.word	0x07ff8f8f
 800c494:	0000c080 	.word	0x0000c080
 800c498:	000080c0 	.word	0x000080c0
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	785b      	ldrb	r3, [r3, #1]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d121      	bne.n	800c4e8 <USB_ActivateEndpoint+0x750>
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	4a67      	ldr	r2, [pc, #412]	@ (800c648 <USB_ActivateEndpoint+0x8b0>)
 800c4ac:	4694      	mov	ip, r2
 800c4ae:	4463      	add	r3, ip
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	00db      	lsls	r3, r3, #3
 800c4b8:	4963      	ldr	r1, [pc, #396]	@ (800c648 <USB_ActivateEndpoint+0x8b0>)
 800c4ba:	468c      	mov	ip, r1
 800c4bc:	4463      	add	r3, ip
 800c4be:	0412      	lsls	r2, r2, #16
 800c4c0:	0c12      	lsrs	r2, r2, #16
 800c4c2:	605a      	str	r2, [r3, #4]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	00db      	lsls	r3, r3, #3
 800c4ca:	4a5f      	ldr	r2, [pc, #380]	@ (800c648 <USB_ActivateEndpoint+0x8b0>)
 800c4cc:	4694      	mov	ip, r2
 800c4ce:	4463      	add	r3, ip
 800c4d0:	6859      	ldr	r1, [r3, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	041a      	lsls	r2, r3, #16
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	485a      	ldr	r0, [pc, #360]	@ (800c648 <USB_ActivateEndpoint+0x8b0>)
 800c4e0:	4684      	mov	ip, r0
 800c4e2:	4463      	add	r3, ip
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	605a      	str	r2, [r3, #4]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	18d3      	adds	r3, r2, r3
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a55      	ldr	r2, [pc, #340]	@ (800c64c <USB_ActivateEndpoint+0x8b4>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fc:	2280      	movs	r2, #128	@ 0x80
 800c4fe:	0152      	lsls	r2, r2, #5
 800c500:	4053      	eors	r3, r2
 800c502:	633b      	str	r3, [r7, #48]	@ 0x30
 800c504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c506:	2280      	movs	r2, #128	@ 0x80
 800c508:	0192      	lsls	r2, r2, #6
 800c50a:	4053      	eors	r3, r2
 800c50c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	18d3      	adds	r3, r2, r3
 800c518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c51a:	494d      	ldr	r1, [pc, #308]	@ (800c650 <USB_ActivateEndpoint+0x8b8>)
 800c51c:	430a      	orrs	r2, r1
 800c51e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	18d3      	adds	r3, r2, r3
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a49      	ldr	r2, [pc, #292]	@ (800c654 <USB_ActivateEndpoint+0x8bc>)
 800c52e:	4013      	ands	r3, r2
 800c530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	18d3      	adds	r3, r2, r3
 800c53c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c53e:	4944      	ldr	r1, [pc, #272]	@ (800c650 <USB_ActivateEndpoint+0x8b8>)
 800c540:	430a      	orrs	r2, r1
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	e079      	b.n	800c63a <USB_ActivateEndpoint+0x8a2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	18d3      	adds	r3, r2, r3
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c554:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c556:	2380      	movs	r3, #128	@ 0x80
 800c558:	01db      	lsls	r3, r3, #7
 800c55a:	4013      	ands	r3, r2
 800c55c:	d011      	beq.n	800c582 <USB_ActivateEndpoint+0x7ea>
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	18d3      	adds	r3, r2, r3
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a3b      	ldr	r2, [pc, #236]	@ (800c658 <USB_ActivateEndpoint+0x8c0>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	18d3      	adds	r3, r2, r3
 800c57a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c57c:	4937      	ldr	r1, [pc, #220]	@ (800c65c <USB_ActivateEndpoint+0x8c4>)
 800c57e:	430a      	orrs	r2, r1
 800c580:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	18d3      	adds	r3, r2, r3
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c592:	2240      	movs	r2, #64	@ 0x40
 800c594:	4013      	ands	r3, r2
 800c596:	d011      	beq.n	800c5bc <USB_ActivateEndpoint+0x824>
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	18d3      	adds	r3, r2, r3
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a2c      	ldr	r2, [pc, #176]	@ (800c658 <USB_ActivateEndpoint+0x8c0>)
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	18d3      	adds	r3, r2, r3
 800c5b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c5b6:	492a      	ldr	r1, [pc, #168]	@ (800c660 <USB_ActivateEndpoint+0x8c8>)
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	78db      	ldrb	r3, [r3, #3]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d016      	beq.n	800c5f2 <USB_ActivateEndpoint+0x85a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	18d3      	adds	r3, r2, r3
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a20      	ldr	r2, [pc, #128]	@ (800c654 <USB_ActivateEndpoint+0x8bc>)
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5d8:	2220      	movs	r2, #32
 800c5da:	4053      	eors	r3, r2
 800c5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	18d3      	adds	r3, r2, r3
 800c5e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5ea:	4919      	ldr	r1, [pc, #100]	@ (800c650 <USB_ActivateEndpoint+0x8b8>)
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e011      	b.n	800c616 <USB_ActivateEndpoint+0x87e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	18d3      	adds	r3, r2, r3
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a15      	ldr	r2, [pc, #84]	@ (800c654 <USB_ActivateEndpoint+0x8bc>)
 800c600:	4013      	ands	r3, r2
 800c602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	18d3      	adds	r3, r2, r3
 800c60e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c610:	490f      	ldr	r1, [pc, #60]	@ (800c650 <USB_ActivateEndpoint+0x8b8>)
 800c612:	430a      	orrs	r2, r1
 800c614:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	18d3      	adds	r3, r2, r3
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a0a      	ldr	r2, [pc, #40]	@ (800c64c <USB_ActivateEndpoint+0x8b4>)
 800c624:	4013      	ands	r3, r2
 800c626:	647b      	str	r3, [r7, #68]	@ 0x44
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	18d3      	adds	r3, r2, r3
 800c632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c634:	4906      	ldr	r1, [pc, #24]	@ (800c650 <USB_ActivateEndpoint+0x8b8>)
 800c636:	430a      	orrs	r2, r1
 800c638:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c63a:	237f      	movs	r3, #127	@ 0x7f
 800c63c:	18fb      	adds	r3, r7, r3
 800c63e:	781b      	ldrb	r3, [r3, #0]
}
 800c640:	0018      	movs	r0, r3
 800c642:	46bd      	mov	sp, r7
 800c644:	b020      	add	sp, #128	@ 0x80
 800c646:	bd80      	pop	{r7, pc}
 800c648:	40009800 	.word	0x40009800
 800c64c:	07ffbf8f 	.word	0x07ffbf8f
 800c650:	00008080 	.word	0x00008080
 800c654:	07ff8fbf 	.word	0x07ff8fbf
 800c658:	07ff8f8f 	.word	0x07ff8f8f
 800c65c:	0000c080 	.word	0x0000c080
 800c660:	000080c0 	.word	0x000080c0

0800c664 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b096      	sub	sp, #88	@ 0x58
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	7b1b      	ldrb	r3, [r3, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d164      	bne.n	800c740 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	785b      	ldrb	r3, [r3, #1]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d02f      	beq.n	800c6de <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	18d3      	adds	r3, r2, r3
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	613b      	str	r3, [r7, #16]
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	2240      	movs	r2, #64	@ 0x40
 800c690:	4013      	ands	r3, r2
 800c692:	d011      	beq.n	800c6b8 <USB_DeactivateEndpoint+0x54>
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	18d3      	adds	r3, r2, r3
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a9d      	ldr	r2, [pc, #628]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	60fb      	str	r3, [r7, #12]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	18d3      	adds	r3, r2, r3
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	499a      	ldr	r1, [pc, #616]	@ (800c91c <USB_DeactivateEndpoint+0x2b8>)
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	18d3      	adds	r3, r2, r3
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a96      	ldr	r2, [pc, #600]	@ (800c920 <USB_DeactivateEndpoint+0x2bc>)
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	60bb      	str	r3, [r7, #8]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	18d3      	adds	r3, r2, r3
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4993      	ldr	r1, [pc, #588]	@ (800c924 <USB_DeactivateEndpoint+0x2c0>)
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	e117      	b.n	800c90e <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	18d3      	adds	r3, r2, r3
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	61fb      	str	r3, [r7, #28]
 800c6ec:	69fa      	ldr	r2, [r7, #28]
 800c6ee:	2380      	movs	r3, #128	@ 0x80
 800c6f0:	01db      	lsls	r3, r3, #7
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	d011      	beq.n	800c71a <USB_DeactivateEndpoint+0xb6>
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	18d3      	adds	r3, r2, r3
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a85      	ldr	r2, [pc, #532]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c704:	4013      	ands	r3, r2
 800c706:	61bb      	str	r3, [r7, #24]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	18d3      	adds	r3, r2, r3
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	4984      	ldr	r1, [pc, #528]	@ (800c928 <USB_DeactivateEndpoint+0x2c4>)
 800c716:	430a      	orrs	r2, r1
 800c718:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	18d3      	adds	r3, r2, r3
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a81      	ldr	r2, [pc, #516]	@ (800c92c <USB_DeactivateEndpoint+0x2c8>)
 800c728:	4013      	ands	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	18d3      	adds	r3, r2, r3
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	497a      	ldr	r1, [pc, #488]	@ (800c924 <USB_DeactivateEndpoint+0x2c0>)
 800c73a:	430a      	orrs	r2, r1
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e0e6      	b.n	800c90e <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	785b      	ldrb	r3, [r3, #1]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d171      	bne.n	800c82c <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	18d3      	adds	r3, r2, r3
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c756:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c758:	2380      	movs	r3, #128	@ 0x80
 800c75a:	01db      	lsls	r3, r3, #7
 800c75c:	4013      	ands	r3, r2
 800c75e:	d011      	beq.n	800c784 <USB_DeactivateEndpoint+0x120>
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	18d3      	adds	r3, r2, r3
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a6a      	ldr	r2, [pc, #424]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c76e:	4013      	ands	r3, r2
 800c770:	637b      	str	r3, [r7, #52]	@ 0x34
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	18d3      	adds	r3, r2, r3
 800c77c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c77e:	496a      	ldr	r1, [pc, #424]	@ (800c928 <USB_DeactivateEndpoint+0x2c4>)
 800c780:	430a      	orrs	r2, r1
 800c782:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	18d3      	adds	r3, r2, r3
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	633b      	str	r3, [r7, #48]	@ 0x30
 800c792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c794:	2240      	movs	r2, #64	@ 0x40
 800c796:	4013      	ands	r3, r2
 800c798:	d011      	beq.n	800c7be <USB_DeactivateEndpoint+0x15a>
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	18d3      	adds	r3, r2, r3
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a5c      	ldr	r2, [pc, #368]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c7a8:	4013      	ands	r3, r2
 800c7aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	18d3      	adds	r3, r2, r3
 800c7b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7b8:	4958      	ldr	r1, [pc, #352]	@ (800c91c <USB_DeactivateEndpoint+0x2b8>)
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	18d3      	adds	r3, r2, r3
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a53      	ldr	r2, [pc, #332]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	18d3      	adds	r3, r2, r3
 800c7da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7dc:	494f      	ldr	r1, [pc, #316]	@ (800c91c <USB_DeactivateEndpoint+0x2b8>)
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	18d3      	adds	r3, r2, r3
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a4f      	ldr	r2, [pc, #316]	@ (800c92c <USB_DeactivateEndpoint+0x2c8>)
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	18d3      	adds	r3, r2, r3
 800c7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c800:	4948      	ldr	r1, [pc, #288]	@ (800c924 <USB_DeactivateEndpoint+0x2c0>)
 800c802:	430a      	orrs	r2, r1
 800c804:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	18d3      	adds	r3, r2, r3
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a43      	ldr	r2, [pc, #268]	@ (800c920 <USB_DeactivateEndpoint+0x2bc>)
 800c814:	4013      	ands	r3, r2
 800c816:	623b      	str	r3, [r7, #32]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	18d3      	adds	r3, r2, r3
 800c822:	6a3a      	ldr	r2, [r7, #32]
 800c824:	493f      	ldr	r1, [pc, #252]	@ (800c924 <USB_DeactivateEndpoint+0x2c0>)
 800c826:	430a      	orrs	r2, r1
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	e070      	b.n	800c90e <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	18d3      	adds	r3, r2, r3
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	657b      	str	r3, [r7, #84]	@ 0x54
 800c83a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c83c:	2380      	movs	r3, #128	@ 0x80
 800c83e:	01db      	lsls	r3, r3, #7
 800c840:	4013      	ands	r3, r2
 800c842:	d011      	beq.n	800c868 <USB_DeactivateEndpoint+0x204>
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	18d3      	adds	r3, r2, r3
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a31      	ldr	r2, [pc, #196]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c852:	4013      	ands	r3, r2
 800c854:	653b      	str	r3, [r7, #80]	@ 0x50
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	18d3      	adds	r3, r2, r3
 800c860:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c862:	4931      	ldr	r1, [pc, #196]	@ (800c928 <USB_DeactivateEndpoint+0x2c4>)
 800c864:	430a      	orrs	r2, r1
 800c866:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	18d3      	adds	r3, r2, r3
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c878:	2240      	movs	r2, #64	@ 0x40
 800c87a:	4013      	ands	r3, r2
 800c87c:	d011      	beq.n	800c8a2 <USB_DeactivateEndpoint+0x23e>
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	18d3      	adds	r3, r2, r3
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a23      	ldr	r2, [pc, #140]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	18d3      	adds	r3, r2, r3
 800c89a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c89c:	491f      	ldr	r1, [pc, #124]	@ (800c91c <USB_DeactivateEndpoint+0x2b8>)
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	18d3      	adds	r3, r2, r3
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a1a      	ldr	r2, [pc, #104]	@ (800c918 <USB_DeactivateEndpoint+0x2b4>)
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	18d3      	adds	r3, r2, r3
 800c8be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8c0:	4919      	ldr	r1, [pc, #100]	@ (800c928 <USB_DeactivateEndpoint+0x2c4>)
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	18d3      	adds	r3, r2, r3
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a13      	ldr	r2, [pc, #76]	@ (800c920 <USB_DeactivateEndpoint+0x2bc>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	18d3      	adds	r3, r2, r3
 800c8e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8e4:	490f      	ldr	r1, [pc, #60]	@ (800c924 <USB_DeactivateEndpoint+0x2c0>)
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	18d3      	adds	r3, r2, r3
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c92c <USB_DeactivateEndpoint+0x2c8>)
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	18d3      	adds	r3, r2, r3
 800c906:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c908:	4906      	ldr	r1, [pc, #24]	@ (800c924 <USB_DeactivateEndpoint+0x2c0>)
 800c90a:	430a      	orrs	r2, r1
 800c90c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	0018      	movs	r0, r3
 800c912:	46bd      	mov	sp, r7
 800c914:	b016      	add	sp, #88	@ 0x58
 800c916:	bd80      	pop	{r7, pc}
 800c918:	07ff8f8f 	.word	0x07ff8f8f
 800c91c:	000080c0 	.word	0x000080c0
 800c920:	07ff8fbf 	.word	0x07ff8fbf
 800c924:	00008080 	.word	0x00008080
 800c928:	0000c080 	.word	0x0000c080
 800c92c:	07ffbf8f 	.word	0x07ffbf8f

0800c930 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b093      	sub	sp, #76	@ 0x4c
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	785b      	ldrb	r3, [r3, #1]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d001      	beq.n	800c946 <USB_EPStartXfer+0x16>
 800c942:	f000 fcc1 	bl	800d2c8 <USB_EPStartXfer+0x998>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	699a      	ldr	r2, [r3, #24]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d903      	bls.n	800c95a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	647b      	str	r3, [r7, #68]	@ 0x44
 800c958:	e002      	b.n	800c960 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	7b1b      	ldrb	r3, [r3, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d12b      	bne.n	800c9c0 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	6959      	ldr	r1, [r3, #20]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	88da      	ldrh	r2, [r3, #6]
 800c970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c972:	b29b      	uxth	r3, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fee9 	bl	800d74c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	4ae3      	ldr	r2, [pc, #908]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800c982:	4694      	mov	ip, r2
 800c984:	4463      	add	r3, ip
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	00db      	lsls	r3, r3, #3
 800c98e:	49e0      	ldr	r1, [pc, #896]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800c990:	468c      	mov	ip, r1
 800c992:	4463      	add	r3, ip
 800c994:	0412      	lsls	r2, r2, #16
 800c996:	0c12      	lsrs	r2, r2, #16
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	4adb      	ldr	r2, [pc, #876]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800c9a2:	4694      	mov	ip, r2
 800c9a4:	4463      	add	r3, ip
 800c9a6:	6819      	ldr	r1, [r3, #0]
 800c9a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9aa:	041a      	lsls	r2, r3, #16
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	48d7      	ldr	r0, [pc, #860]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800c9b4:	4684      	mov	ip, r0
 800c9b6:	4463      	add	r3, ip
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	f000 fc69 	bl	800d292 <USB_EPStartXfer+0x962>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	78db      	ldrb	r3, [r3, #3]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d000      	beq.n	800c9ca <USB_EPStartXfer+0x9a>
 800c9c8:	e315      	b.n	800cff6 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	6a1a      	ldr	r2, [r3, #32]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d800      	bhi.n	800c9d8 <USB_EPStartXfer+0xa8>
 800c9d6:	e2c8      	b.n	800cf6a <USB_EPStartXfer+0x63a>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	18d3      	adds	r3, r2, r3
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4acb      	ldr	r2, [pc, #812]	@ (800cd14 <USB_EPStartXfer+0x3e4>)
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	18d3      	adds	r3, r2, r3
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	49c8      	ldr	r1, [pc, #800]	@ (800cd18 <USB_EPStartXfer+0x3e8>)
 800c9f8:	430a      	orrs	r2, r1
 800c9fa:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	6a1a      	ldr	r2, [r3, #32]
 800ca00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	18d3      	adds	r3, r2, r3
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2240      	movs	r2, #64	@ 0x40
 800ca16:	4013      	ands	r3, r2
 800ca18:	d100      	bne.n	800ca1c <USB_EPStartXfer+0xec>
 800ca1a:	e14f      	b.n	800ccbc <USB_EPStartXfer+0x38c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d162      	bne.n	800caea <USB_EPStartXfer+0x1ba>
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	4ab9      	ldr	r2, [pc, #740]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ca2c:	4694      	mov	ip, r2
 800ca2e:	4463      	add	r3, ip
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	49b5      	ldr	r1, [pc, #724]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ca3a:	468c      	mov	ip, r1
 800ca3c:	4463      	add	r3, ip
 800ca3e:	0192      	lsls	r2, r2, #6
 800ca40:	0992      	lsrs	r2, r2, #6
 800ca42:	605a      	str	r2, [r3, #4]
 800ca44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d111      	bne.n	800ca6e <USB_EPStartXfer+0x13e>
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	4aaf      	ldr	r2, [pc, #700]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ca52:	4694      	mov	ip, r2
 800ca54:	4463      	add	r3, ip
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	49ac      	ldr	r1, [pc, #688]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ca60:	468c      	mov	ip, r1
 800ca62:	4463      	add	r3, ip
 800ca64:	2180      	movs	r1, #128	@ 0x80
 800ca66:	0609      	lsls	r1, r1, #24
 800ca68:	430a      	orrs	r2, r1
 800ca6a:	605a      	str	r2, [r3, #4]
 800ca6c:	e062      	b.n	800cb34 <USB_EPStartXfer+0x204>
 800ca6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca70:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca72:	d81b      	bhi.n	800caac <USB_EPStartXfer+0x17c>
 800ca74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca76:	085b      	lsrs	r3, r3, #1
 800ca78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	4013      	ands	r3, r2
 800ca80:	d002      	beq.n	800ca88 <USB_EPStartXfer+0x158>
 800ca82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca84:	3301      	adds	r3, #1
 800ca86:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	4aa0      	ldr	r2, [pc, #640]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ca90:	4694      	mov	ip, r2
 800ca92:	4463      	add	r3, ip
 800ca94:	6859      	ldr	r1, [r3, #4]
 800ca96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca98:	069a      	lsls	r2, r3, #26
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	00db      	lsls	r3, r3, #3
 800caa0:	489b      	ldr	r0, [pc, #620]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800caa2:	4684      	mov	ip, r0
 800caa4:	4463      	add	r3, ip
 800caa6:	430a      	orrs	r2, r1
 800caa8:	605a      	str	r2, [r3, #4]
 800caaa:	e043      	b.n	800cb34 <USB_EPStartXfer+0x204>
 800caac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caae:	095b      	lsrs	r3, r3, #5
 800cab0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cab4:	221f      	movs	r2, #31
 800cab6:	4013      	ands	r3, r2
 800cab8:	d102      	bne.n	800cac0 <USB_EPStartXfer+0x190>
 800caba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cabc:	3b01      	subs	r3, #1
 800cabe:	643b      	str	r3, [r7, #64]	@ 0x40
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	4a92      	ldr	r2, [pc, #584]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cac8:	4694      	mov	ip, r2
 800caca:	4463      	add	r3, ip
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad0:	069b      	lsls	r3, r3, #26
 800cad2:	431a      	orrs	r2, r3
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	498d      	ldr	r1, [pc, #564]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cadc:	468c      	mov	ip, r1
 800cade:	4463      	add	r3, ip
 800cae0:	2180      	movs	r1, #128	@ 0x80
 800cae2:	0609      	lsls	r1, r1, #24
 800cae4:	430a      	orrs	r2, r1
 800cae6:	605a      	str	r2, [r3, #4]
 800cae8:	e024      	b.n	800cb34 <USB_EPStartXfer+0x204>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	785b      	ldrb	r3, [r3, #1]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d120      	bne.n	800cb34 <USB_EPStartXfer+0x204>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	00db      	lsls	r3, r3, #3
 800caf8:	4a85      	ldr	r2, [pc, #532]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cafa:	4694      	mov	ip, r2
 800cafc:	4463      	add	r3, ip
 800cafe:	685a      	ldr	r2, [r3, #4]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	4982      	ldr	r1, [pc, #520]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cb08:	468c      	mov	ip, r1
 800cb0a:	4463      	add	r3, ip
 800cb0c:	0412      	lsls	r2, r2, #16
 800cb0e:	0c12      	lsrs	r2, r2, #16
 800cb10:	605a      	str	r2, [r3, #4]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	4a7d      	ldr	r2, [pc, #500]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cb1a:	4694      	mov	ip, r2
 800cb1c:	4463      	add	r3, ip
 800cb1e:	6859      	ldr	r1, [r3, #4]
 800cb20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb22:	041a      	lsls	r2, r3, #16
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	4879      	ldr	r0, [pc, #484]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cb2c:	4684      	mov	ip, r0
 800cb2e:	4463      	add	r3, ip
 800cb30:	430a      	orrs	r2, r1
 800cb32:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cb34:	2016      	movs	r0, #22
 800cb36:	183b      	adds	r3, r7, r0
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	8952      	ldrh	r2, [r2, #10]
 800cb3c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	6959      	ldr	r1, [r3, #20]
 800cb42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb44:	b29c      	uxth	r4, r3
 800cb46:	183b      	adds	r3, r7, r0
 800cb48:	881a      	ldrh	r2, [r3, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	0023      	movs	r3, r4
 800cb4e:	f000 fdfd 	bl	800d74c <USB_WritePMA>
            ep->xfer_buff += len;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	695a      	ldr	r2, [r3, #20]
 800cb56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb58:	18d2      	adds	r2, r2, r3
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	6a1a      	ldr	r2, [r3, #32]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d906      	bls.n	800cb78 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	6a1a      	ldr	r2, [r3, #32]
 800cb6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb70:	1ad2      	subs	r2, r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	621a      	str	r2, [r3, #32]
 800cb76:	e005      	b.n	800cb84 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	2200      	movs	r2, #0
 800cb82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	785b      	ldrb	r3, [r3, #1]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d162      	bne.n	800cc52 <USB_EPStartXfer+0x322>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	4a5f      	ldr	r2, [pc, #380]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cb94:	4694      	mov	ip, r2
 800cb96:	4463      	add	r3, ip
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	495b      	ldr	r1, [pc, #364]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cba2:	468c      	mov	ip, r1
 800cba4:	4463      	add	r3, ip
 800cba6:	0192      	lsls	r2, r2, #6
 800cba8:	0992      	lsrs	r2, r2, #6
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d111      	bne.n	800cbd6 <USB_EPStartXfer+0x2a6>
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	00db      	lsls	r3, r3, #3
 800cbb8:	4a55      	ldr	r2, [pc, #340]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cbba:	4694      	mov	ip, r2
 800cbbc:	4463      	add	r3, ip
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	4952      	ldr	r1, [pc, #328]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cbc8:	468c      	mov	ip, r1
 800cbca:	4463      	add	r3, ip
 800cbcc:	2180      	movs	r1, #128	@ 0x80
 800cbce:	0609      	lsls	r1, r1, #24
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e062      	b.n	800cc9c <USB_EPStartXfer+0x36c>
 800cbd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbd8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbda:	d81b      	bhi.n	800cc14 <USB_EPStartXfer+0x2e4>
 800cbdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	d002      	beq.n	800cbf0 <USB_EPStartXfer+0x2c0>
 800cbea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbec:	3301      	adds	r3, #1
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	00db      	lsls	r3, r3, #3
 800cbf6:	4a46      	ldr	r2, [pc, #280]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cbf8:	4694      	mov	ip, r2
 800cbfa:	4463      	add	r3, ip
 800cbfc:	6819      	ldr	r1, [r3, #0]
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc00:	069a      	lsls	r2, r3, #26
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	4841      	ldr	r0, [pc, #260]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc0a:	4684      	mov	ip, r0
 800cc0c:	4463      	add	r3, ip
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	601a      	str	r2, [r3, #0]
 800cc12:	e043      	b.n	800cc9c <USB_EPStartXfer+0x36c>
 800cc14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc16:	095b      	lsrs	r3, r3, #5
 800cc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc1c:	221f      	movs	r2, #31
 800cc1e:	4013      	ands	r3, r2
 800cc20:	d102      	bne.n	800cc28 <USB_EPStartXfer+0x2f8>
 800cc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc24:	3b01      	subs	r3, #1
 800cc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	4a38      	ldr	r2, [pc, #224]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc30:	4694      	mov	ip, r2
 800cc32:	4463      	add	r3, ip
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc38:	069b      	lsls	r3, r3, #26
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	4933      	ldr	r1, [pc, #204]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc44:	468c      	mov	ip, r1
 800cc46:	4463      	add	r3, ip
 800cc48:	2180      	movs	r1, #128	@ 0x80
 800cc4a:	0609      	lsls	r1, r1, #24
 800cc4c:	430a      	orrs	r2, r1
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	e024      	b.n	800cc9c <USB_EPStartXfer+0x36c>
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	785b      	ldrb	r3, [r3, #1]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d120      	bne.n	800cc9c <USB_EPStartXfer+0x36c>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	4a2b      	ldr	r2, [pc, #172]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc62:	4694      	mov	ip, r2
 800cc64:	4463      	add	r3, ip
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	4928      	ldr	r1, [pc, #160]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc70:	468c      	mov	ip, r1
 800cc72:	4463      	add	r3, ip
 800cc74:	0412      	lsls	r2, r2, #16
 800cc76:	0c12      	lsrs	r2, r2, #16
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	4a23      	ldr	r2, [pc, #140]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc82:	4694      	mov	ip, r2
 800cc84:	4463      	add	r3, ip
 800cc86:	6819      	ldr	r1, [r3, #0]
 800cc88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc8a:	041a      	lsls	r2, r3, #16
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	481f      	ldr	r0, [pc, #124]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cc94:	4684      	mov	ip, r0
 800cc96:	4463      	add	r3, ip
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cc9c:	2016      	movs	r0, #22
 800cc9e:	183b      	adds	r3, r7, r0
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	8912      	ldrh	r2, [r2, #8]
 800cca4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	6959      	ldr	r1, [r3, #20]
 800ccaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccac:	b29c      	uxth	r4, r3
 800ccae:	183b      	adds	r3, r7, r0
 800ccb0:	881a      	ldrh	r2, [r3, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	0023      	movs	r3, r4
 800ccb6:	f000 fd49 	bl	800d74c <USB_WritePMA>
 800ccba:	e2ea      	b.n	800d292 <USB_EPStartXfer+0x962>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d169      	bne.n	800cd98 <USB_EPStartXfer+0x468>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	4a11      	ldr	r2, [pc, #68]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cccc:	4694      	mov	ip, r2
 800ccce:	4463      	add	r3, ip
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	490d      	ldr	r1, [pc, #52]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ccda:	468c      	mov	ip, r1
 800ccdc:	4463      	add	r3, ip
 800ccde:	0192      	lsls	r2, r2, #6
 800cce0:	0992      	lsrs	r2, r2, #6
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d118      	bne.n	800cd1c <USB_EPStartXfer+0x3ec>
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	4a07      	ldr	r2, [pc, #28]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800ccf2:	4694      	mov	ip, r2
 800ccf4:	4463      	add	r3, ip
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	00db      	lsls	r3, r3, #3
 800ccfe:	4904      	ldr	r1, [pc, #16]	@ (800cd10 <USB_EPStartXfer+0x3e0>)
 800cd00:	468c      	mov	ip, r1
 800cd02:	4463      	add	r3, ip
 800cd04:	2180      	movs	r1, #128	@ 0x80
 800cd06:	0609      	lsls	r1, r1, #24
 800cd08:	430a      	orrs	r2, r1
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	e069      	b.n	800cde2 <USB_EPStartXfer+0x4b2>
 800cd0e:	46c0      	nop			@ (mov r8, r8)
 800cd10:	40009800 	.word	0x40009800
 800cd14:	07ff8f8f 	.word	0x07ff8f8f
 800cd18:	00008180 	.word	0x00008180
 800cd1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd20:	d81b      	bhi.n	800cd5a <USB_EPStartXfer+0x42a>
 800cd22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd24:	085b      	lsrs	r3, r3, #1
 800cd26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	d002      	beq.n	800cd36 <USB_EPStartXfer+0x406>
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	3301      	adds	r3, #1
 800cd34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	4ada      	ldr	r2, [pc, #872]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cd3e:	4694      	mov	ip, r2
 800cd40:	4463      	add	r3, ip
 800cd42:	6819      	ldr	r1, [r3, #0]
 800cd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd46:	069a      	lsls	r2, r3, #26
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	48d6      	ldr	r0, [pc, #856]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cd50:	4684      	mov	ip, r0
 800cd52:	4463      	add	r3, ip
 800cd54:	430a      	orrs	r2, r1
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	e043      	b.n	800cde2 <USB_EPStartXfer+0x4b2>
 800cd5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd5c:	095b      	lsrs	r3, r3, #5
 800cd5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd62:	221f      	movs	r2, #31
 800cd64:	4013      	ands	r3, r2
 800cd66:	d102      	bne.n	800cd6e <USB_EPStartXfer+0x43e>
 800cd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	4acc      	ldr	r2, [pc, #816]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cd76:	4694      	mov	ip, r2
 800cd78:	4463      	add	r3, ip
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7e:	069b      	lsls	r3, r3, #26
 800cd80:	431a      	orrs	r2, r3
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	49c7      	ldr	r1, [pc, #796]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cd8a:	468c      	mov	ip, r1
 800cd8c:	4463      	add	r3, ip
 800cd8e:	2180      	movs	r1, #128	@ 0x80
 800cd90:	0609      	lsls	r1, r1, #24
 800cd92:	430a      	orrs	r2, r1
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	e024      	b.n	800cde2 <USB_EPStartXfer+0x4b2>
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	785b      	ldrb	r3, [r3, #1]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d120      	bne.n	800cde2 <USB_EPStartXfer+0x4b2>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	4ac0      	ldr	r2, [pc, #768]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cda8:	4694      	mov	ip, r2
 800cdaa:	4463      	add	r3, ip
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	49bc      	ldr	r1, [pc, #752]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cdb6:	468c      	mov	ip, r1
 800cdb8:	4463      	add	r3, ip
 800cdba:	0412      	lsls	r2, r2, #16
 800cdbc:	0c12      	lsrs	r2, r2, #16
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	4ab8      	ldr	r2, [pc, #736]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cdc8:	4694      	mov	ip, r2
 800cdca:	4463      	add	r3, ip
 800cdcc:	6819      	ldr	r1, [r3, #0]
 800cdce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdd0:	041a      	lsls	r2, r3, #16
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	48b3      	ldr	r0, [pc, #716]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cdda:	4684      	mov	ip, r0
 800cddc:	4463      	add	r3, ip
 800cdde:	430a      	orrs	r2, r1
 800cde0:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cde2:	2016      	movs	r0, #22
 800cde4:	183b      	adds	r3, r7, r0
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	8912      	ldrh	r2, [r2, #8]
 800cdea:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	6959      	ldr	r1, [r3, #20]
 800cdf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf2:	b29c      	uxth	r4, r3
 800cdf4:	183b      	adds	r3, r7, r0
 800cdf6:	881a      	ldrh	r2, [r3, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	0023      	movs	r3, r4
 800cdfc:	f000 fca6 	bl	800d74c <USB_WritePMA>
            ep->xfer_buff += len;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	695a      	ldr	r2, [r3, #20]
 800ce04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce06:	18d2      	adds	r2, r2, r3
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6a1a      	ldr	r2, [r3, #32]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d906      	bls.n	800ce26 <USB_EPStartXfer+0x4f6>
            {
              ep->xfer_len_db -= len;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	6a1a      	ldr	r2, [r3, #32]
 800ce1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce1e:	1ad2      	subs	r2, r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	621a      	str	r2, [r3, #32]
 800ce24:	e005      	b.n	800ce32 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	785b      	ldrb	r3, [r3, #1]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d162      	bne.n	800cf00 <USB_EPStartXfer+0x5d0>
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	4a99      	ldr	r2, [pc, #612]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800ce42:	4694      	mov	ip, r2
 800ce44:	4463      	add	r3, ip
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	4996      	ldr	r1, [pc, #600]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800ce50:	468c      	mov	ip, r1
 800ce52:	4463      	add	r3, ip
 800ce54:	0192      	lsls	r2, r2, #6
 800ce56:	0992      	lsrs	r2, r2, #6
 800ce58:	605a      	str	r2, [r3, #4]
 800ce5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d111      	bne.n	800ce84 <USB_EPStartXfer+0x554>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	4a90      	ldr	r2, [pc, #576]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800ce68:	4694      	mov	ip, r2
 800ce6a:	4463      	add	r3, ip
 800ce6c:	685a      	ldr	r2, [r3, #4]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	498c      	ldr	r1, [pc, #560]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800ce76:	468c      	mov	ip, r1
 800ce78:	4463      	add	r3, ip
 800ce7a:	2180      	movs	r1, #128	@ 0x80
 800ce7c:	0609      	lsls	r1, r1, #24
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	605a      	str	r2, [r3, #4]
 800ce82:	e062      	b.n	800cf4a <USB_EPStartXfer+0x61a>
 800ce84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce86:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce88:	d81b      	bhi.n	800cec2 <USB_EPStartXfer+0x592>
 800ce8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce8c:	085b      	lsrs	r3, r3, #1
 800ce8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce92:	2201      	movs	r2, #1
 800ce94:	4013      	ands	r3, r2
 800ce96:	d002      	beq.n	800ce9e <USB_EPStartXfer+0x56e>
 800ce98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	4a80      	ldr	r2, [pc, #512]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cea6:	4694      	mov	ip, r2
 800cea8:	4463      	add	r3, ip
 800ceaa:	6859      	ldr	r1, [r3, #4]
 800ceac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceae:	069a      	lsls	r2, r3, #26
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	487c      	ldr	r0, [pc, #496]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800ceb8:	4684      	mov	ip, r0
 800ceba:	4463      	add	r3, ip
 800cebc:	430a      	orrs	r2, r1
 800cebe:	605a      	str	r2, [r3, #4]
 800cec0:	e043      	b.n	800cf4a <USB_EPStartXfer+0x61a>
 800cec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cec4:	095b      	lsrs	r3, r3, #5
 800cec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceca:	221f      	movs	r2, #31
 800cecc:	4013      	ands	r3, r2
 800cece:	d102      	bne.n	800ced6 <USB_EPStartXfer+0x5a6>
 800ced0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced2:	3b01      	subs	r3, #1
 800ced4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	4a72      	ldr	r2, [pc, #456]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cede:	4694      	mov	ip, r2
 800cee0:	4463      	add	r3, ip
 800cee2:	685a      	ldr	r2, [r3, #4]
 800cee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee6:	069b      	lsls	r3, r3, #26
 800cee8:	431a      	orrs	r2, r3
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	496d      	ldr	r1, [pc, #436]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cef2:	468c      	mov	ip, r1
 800cef4:	4463      	add	r3, ip
 800cef6:	2180      	movs	r1, #128	@ 0x80
 800cef8:	0609      	lsls	r1, r1, #24
 800cefa:	430a      	orrs	r2, r1
 800cefc:	605a      	str	r2, [r3, #4]
 800cefe:	e024      	b.n	800cf4a <USB_EPStartXfer+0x61a>
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	785b      	ldrb	r3, [r3, #1]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d120      	bne.n	800cf4a <USB_EPStartXfer+0x61a>
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	4a66      	ldr	r2, [pc, #408]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cf10:	4694      	mov	ip, r2
 800cf12:	4463      	add	r3, ip
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	00db      	lsls	r3, r3, #3
 800cf1c:	4962      	ldr	r1, [pc, #392]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cf1e:	468c      	mov	ip, r1
 800cf20:	4463      	add	r3, ip
 800cf22:	0412      	lsls	r2, r2, #16
 800cf24:	0c12      	lsrs	r2, r2, #16
 800cf26:	605a      	str	r2, [r3, #4]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	4a5e      	ldr	r2, [pc, #376]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cf30:	4694      	mov	ip, r2
 800cf32:	4463      	add	r3, ip
 800cf34:	6859      	ldr	r1, [r3, #4]
 800cf36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf38:	041a      	lsls	r2, r3, #16
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4859      	ldr	r0, [pc, #356]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cf42:	4684      	mov	ip, r0
 800cf44:	4463      	add	r3, ip
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cf4a:	2016      	movs	r0, #22
 800cf4c:	183b      	adds	r3, r7, r0
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	8952      	ldrh	r2, [r2, #10]
 800cf52:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	6959      	ldr	r1, [r3, #20]
 800cf58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf5a:	b29c      	uxth	r4, r3
 800cf5c:	183b      	adds	r3, r7, r0
 800cf5e:	881a      	ldrh	r2, [r3, #0]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	0023      	movs	r3, r4
 800cf64:	f000 fbf2 	bl	800d74c <USB_WritePMA>
 800cf68:	e193      	b.n	800d292 <USB_EPStartXfer+0x962>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	647b      	str	r3, [r7, #68]	@ 0x44

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	18d3      	adds	r3, r2, r3
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a4b      	ldr	r2, [pc, #300]	@ (800d0ac <USB_EPStartXfer+0x77c>)
 800cf7e:	4013      	ands	r3, r2
 800cf80:	613b      	str	r3, [r7, #16]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	18d3      	adds	r3, r2, r3
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	4948      	ldr	r1, [pc, #288]	@ (800d0b0 <USB_EPStartXfer+0x780>)
 800cf90:	430a      	orrs	r2, r1
 800cf92:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	4a43      	ldr	r2, [pc, #268]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cf9c:	4694      	mov	ip, r2
 800cf9e:	4463      	add	r3, ip
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	493f      	ldr	r1, [pc, #252]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cfaa:	468c      	mov	ip, r1
 800cfac:	4463      	add	r3, ip
 800cfae:	0412      	lsls	r2, r2, #16
 800cfb0:	0c12      	lsrs	r2, r2, #16
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	00db      	lsls	r3, r3, #3
 800cfba:	4a3b      	ldr	r2, [pc, #236]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cfbc:	4694      	mov	ip, r2
 800cfbe:	4463      	add	r3, ip
 800cfc0:	6819      	ldr	r1, [r3, #0]
 800cfc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfc4:	041a      	lsls	r2, r3, #16
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	00db      	lsls	r3, r3, #3
 800cfcc:	4836      	ldr	r0, [pc, #216]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800cfce:	4684      	mov	ip, r0
 800cfd0:	4463      	add	r3, ip
 800cfd2:	430a      	orrs	r2, r1
 800cfd4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cfd6:	2016      	movs	r0, #22
 800cfd8:	183b      	adds	r3, r7, r0
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	8912      	ldrh	r2, [r2, #8]
 800cfde:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	6959      	ldr	r1, [r3, #20]
 800cfe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfe6:	b29c      	uxth	r4, r3
 800cfe8:	183b      	adds	r3, r7, r0
 800cfea:	881a      	ldrh	r2, [r3, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	0023      	movs	r3, r4
 800cff0:	f000 fbac 	bl	800d74c <USB_WritePMA>
 800cff4:	e14d      	b.n	800d292 <USB_EPStartXfer+0x962>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	6a1a      	ldr	r2, [r3, #32]
 800cffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cffc:	1ad2      	subs	r2, r2, r3
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	18d3      	adds	r3, r2, r3
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2240      	movs	r2, #64	@ 0x40
 800d010:	4013      	ands	r3, r2
 800d012:	d100      	bne.n	800d016 <USB_EPStartXfer+0x6e6>
 800d014:	e0a2      	b.n	800d15c <USB_EPStartXfer+0x82c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	785b      	ldrb	r3, [r3, #1]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d169      	bne.n	800d0f2 <USB_EPStartXfer+0x7c2>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	4a20      	ldr	r2, [pc, #128]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800d026:	4694      	mov	ip, r2
 800d028:	4463      	add	r3, ip
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	491d      	ldr	r1, [pc, #116]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800d034:	468c      	mov	ip, r1
 800d036:	4463      	add	r3, ip
 800d038:	0192      	lsls	r2, r2, #6
 800d03a:	0992      	lsrs	r2, r2, #6
 800d03c:	605a      	str	r2, [r3, #4]
 800d03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d040:	2b00      	cmp	r3, #0
 800d042:	d111      	bne.n	800d068 <USB_EPStartXfer+0x738>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	00db      	lsls	r3, r3, #3
 800d04a:	4a17      	ldr	r2, [pc, #92]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800d04c:	4694      	mov	ip, r2
 800d04e:	4463      	add	r3, ip
 800d050:	685a      	ldr	r2, [r3, #4]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	4913      	ldr	r1, [pc, #76]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800d05a:	468c      	mov	ip, r1
 800d05c:	4463      	add	r3, ip
 800d05e:	2180      	movs	r1, #128	@ 0x80
 800d060:	0609      	lsls	r1, r1, #24
 800d062:	430a      	orrs	r2, r1
 800d064:	605a      	str	r2, [r3, #4]
 800d066:	e069      	b.n	800d13c <USB_EPStartXfer+0x80c>
 800d068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d06a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d06c:	d822      	bhi.n	800d0b4 <USB_EPStartXfer+0x784>
 800d06e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d070:	085b      	lsrs	r3, r3, #1
 800d072:	633b      	str	r3, [r7, #48]	@ 0x30
 800d074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d076:	2201      	movs	r2, #1
 800d078:	4013      	ands	r3, r2
 800d07a:	d002      	beq.n	800d082 <USB_EPStartXfer+0x752>
 800d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07e:	3301      	adds	r3, #1
 800d080:	633b      	str	r3, [r7, #48]	@ 0x30
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	4a07      	ldr	r2, [pc, #28]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800d08a:	4694      	mov	ip, r2
 800d08c:	4463      	add	r3, ip
 800d08e:	6859      	ldr	r1, [r3, #4]
 800d090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d092:	069a      	lsls	r2, r3, #26
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	00db      	lsls	r3, r3, #3
 800d09a:	4803      	ldr	r0, [pc, #12]	@ (800d0a8 <USB_EPStartXfer+0x778>)
 800d09c:	4684      	mov	ip, r0
 800d09e:	4463      	add	r3, ip
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	605a      	str	r2, [r3, #4]
 800d0a4:	e04a      	b.n	800d13c <USB_EPStartXfer+0x80c>
 800d0a6:	46c0      	nop			@ (mov r8, r8)
 800d0a8:	40009800 	.word	0x40009800
 800d0ac:	07ff8e8f 	.word	0x07ff8e8f
 800d0b0:	00008080 	.word	0x00008080
 800d0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0b6:	095b      	lsrs	r3, r3, #5
 800d0b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0bc:	221f      	movs	r2, #31
 800d0be:	4013      	ands	r3, r2
 800d0c0:	d102      	bne.n	800d0c8 <USB_EPStartXfer+0x798>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	00db      	lsls	r3, r3, #3
 800d0ce:	4ad3      	ldr	r2, [pc, #844]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d0d0:	4694      	mov	ip, r2
 800d0d2:	4463      	add	r3, ip
 800d0d4:	685a      	ldr	r2, [r3, #4]
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d8:	069b      	lsls	r3, r3, #26
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	00db      	lsls	r3, r3, #3
 800d0e2:	49ce      	ldr	r1, [pc, #824]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d0e4:	468c      	mov	ip, r1
 800d0e6:	4463      	add	r3, ip
 800d0e8:	2180      	movs	r1, #128	@ 0x80
 800d0ea:	0609      	lsls	r1, r1, #24
 800d0ec:	430a      	orrs	r2, r1
 800d0ee:	605a      	str	r2, [r3, #4]
 800d0f0:	e024      	b.n	800d13c <USB_EPStartXfer+0x80c>
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	785b      	ldrb	r3, [r3, #1]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d120      	bne.n	800d13c <USB_EPStartXfer+0x80c>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4ac6      	ldr	r2, [pc, #792]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d102:	4694      	mov	ip, r2
 800d104:	4463      	add	r3, ip
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	49c3      	ldr	r1, [pc, #780]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d110:	468c      	mov	ip, r1
 800d112:	4463      	add	r3, ip
 800d114:	0412      	lsls	r2, r2, #16
 800d116:	0c12      	lsrs	r2, r2, #16
 800d118:	605a      	str	r2, [r3, #4]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	4abe      	ldr	r2, [pc, #760]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d122:	4694      	mov	ip, r2
 800d124:	4463      	add	r3, ip
 800d126:	6859      	ldr	r1, [r3, #4]
 800d128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d12a:	041a      	lsls	r2, r3, #16
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	48ba      	ldr	r0, [pc, #744]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d134:	4684      	mov	ip, r0
 800d136:	4463      	add	r3, ip
 800d138:	430a      	orrs	r2, r1
 800d13a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800d13c:	2016      	movs	r0, #22
 800d13e:	183b      	adds	r3, r7, r0
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	8952      	ldrh	r2, [r2, #10]
 800d144:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	6959      	ldr	r1, [r3, #20]
 800d14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d14c:	b29c      	uxth	r4, r3
 800d14e:	183b      	adds	r3, r7, r0
 800d150:	881a      	ldrh	r2, [r3, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	0023      	movs	r3, r4
 800d156:	f000 faf9 	bl	800d74c <USB_WritePMA>
 800d15a:	e09a      	b.n	800d292 <USB_EPStartXfer+0x962>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	785b      	ldrb	r3, [r3, #1]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d162      	bne.n	800d22a <USB_EPStartXfer+0x8fa>
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	4aac      	ldr	r2, [pc, #688]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d16c:	4694      	mov	ip, r2
 800d16e:	4463      	add	r3, ip
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	49a8      	ldr	r1, [pc, #672]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d17a:	468c      	mov	ip, r1
 800d17c:	4463      	add	r3, ip
 800d17e:	0192      	lsls	r2, r2, #6
 800d180:	0992      	lsrs	r2, r2, #6
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d186:	2b00      	cmp	r3, #0
 800d188:	d111      	bne.n	800d1ae <USB_EPStartXfer+0x87e>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	4aa2      	ldr	r2, [pc, #648]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d192:	4694      	mov	ip, r2
 800d194:	4463      	add	r3, ip
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	499f      	ldr	r1, [pc, #636]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d1a0:	468c      	mov	ip, r1
 800d1a2:	4463      	add	r3, ip
 800d1a4:	2180      	movs	r1, #128	@ 0x80
 800d1a6:	0609      	lsls	r1, r1, #24
 800d1a8:	430a      	orrs	r2, r1
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	e062      	b.n	800d274 <USB_EPStartXfer+0x944>
 800d1ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1b2:	d81b      	bhi.n	800d1ec <USB_EPStartXfer+0x8bc>
 800d1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1b6:	085b      	lsrs	r3, r3, #1
 800d1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1bc:	2201      	movs	r2, #1
 800d1be:	4013      	ands	r3, r2
 800d1c0:	d002      	beq.n	800d1c8 <USB_EPStartXfer+0x898>
 800d1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	4a93      	ldr	r2, [pc, #588]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d1d0:	4694      	mov	ip, r2
 800d1d2:	4463      	add	r3, ip
 800d1d4:	6819      	ldr	r1, [r3, #0]
 800d1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d8:	069a      	lsls	r2, r3, #26
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	00db      	lsls	r3, r3, #3
 800d1e0:	488e      	ldr	r0, [pc, #568]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d1e2:	4684      	mov	ip, r0
 800d1e4:	4463      	add	r3, ip
 800d1e6:	430a      	orrs	r2, r1
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	e043      	b.n	800d274 <USB_EPStartXfer+0x944>
 800d1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ee:	095b      	lsrs	r3, r3, #5
 800d1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f4:	221f      	movs	r2, #31
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	d102      	bne.n	800d200 <USB_EPStartXfer+0x8d0>
 800d1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	4a85      	ldr	r2, [pc, #532]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d208:	4694      	mov	ip, r2
 800d20a:	4463      	add	r3, ip
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d210:	069b      	lsls	r3, r3, #26
 800d212:	431a      	orrs	r2, r3
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	4980      	ldr	r1, [pc, #512]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d21c:	468c      	mov	ip, r1
 800d21e:	4463      	add	r3, ip
 800d220:	2180      	movs	r1, #128	@ 0x80
 800d222:	0609      	lsls	r1, r1, #24
 800d224:	430a      	orrs	r2, r1
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	e024      	b.n	800d274 <USB_EPStartXfer+0x944>
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	785b      	ldrb	r3, [r3, #1]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d120      	bne.n	800d274 <USB_EPStartXfer+0x944>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	4a78      	ldr	r2, [pc, #480]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d23a:	4694      	mov	ip, r2
 800d23c:	4463      	add	r3, ip
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	4975      	ldr	r1, [pc, #468]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d248:	468c      	mov	ip, r1
 800d24a:	4463      	add	r3, ip
 800d24c:	0412      	lsls	r2, r2, #16
 800d24e:	0c12      	lsrs	r2, r2, #16
 800d250:	601a      	str	r2, [r3, #0]
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	4a70      	ldr	r2, [pc, #448]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d25a:	4694      	mov	ip, r2
 800d25c:	4463      	add	r3, ip
 800d25e:	6819      	ldr	r1, [r3, #0]
 800d260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d262:	041a      	lsls	r2, r3, #16
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	00db      	lsls	r3, r3, #3
 800d26a:	486c      	ldr	r0, [pc, #432]	@ (800d41c <USB_EPStartXfer+0xaec>)
 800d26c:	4684      	mov	ip, r0
 800d26e:	4463      	add	r3, ip
 800d270:	430a      	orrs	r2, r1
 800d272:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d274:	2016      	movs	r0, #22
 800d276:	183b      	adds	r3, r7, r0
 800d278:	683a      	ldr	r2, [r7, #0]
 800d27a:	8912      	ldrh	r2, [r2, #8]
 800d27c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	6959      	ldr	r1, [r3, #20]
 800d282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d284:	b29c      	uxth	r4, r3
 800d286:	183b      	adds	r3, r7, r0
 800d288:	881a      	ldrh	r2, [r3, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	0023      	movs	r3, r4
 800d28e:	f000 fa5d 	bl	800d74c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	18d3      	adds	r3, r2, r3
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a60      	ldr	r2, [pc, #384]	@ (800d420 <USB_EPStartXfer+0xaf0>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	60bb      	str	r3, [r7, #8]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2210      	movs	r2, #16
 800d2a8:	4053      	eors	r3, r2
 800d2aa:	60bb      	str	r3, [r7, #8]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	4053      	eors	r3, r2
 800d2b2:	60bb      	str	r3, [r7, #8]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	18d3      	adds	r3, r2, r3
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	4958      	ldr	r1, [pc, #352]	@ (800d424 <USB_EPStartXfer+0xaf4>)
 800d2c2:	430a      	orrs	r2, r1
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	e0a3      	b.n	800d410 <USB_EPStartXfer+0xae0>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	7b1b      	ldrb	r3, [r3, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d13e      	bne.n	800d34e <USB_EPStartXfer+0xa1e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d116      	bne.n	800d306 <USB_EPStartXfer+0x9d6>
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	78db      	ldrb	r3, [r3, #3]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d112      	bne.n	800d306 <USB_EPStartXfer+0x9d6>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	18d3      	adds	r3, r2, r3
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a4e      	ldr	r2, [pc, #312]	@ (800d428 <USB_EPStartXfer+0xaf8>)
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	623b      	str	r3, [r7, #32]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	18d3      	adds	r3, r2, r3
 800d2fc:	6a3a      	ldr	r2, [r7, #32]
 800d2fe:	494b      	ldr	r1, [pc, #300]	@ (800d42c <USB_EPStartXfer+0xafc>)
 800d300:	430a      	orrs	r2, r1
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	e011      	b.n	800d32a <USB_EPStartXfer+0x9fa>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	18d3      	adds	r3, r2, r3
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a47      	ldr	r2, [pc, #284]	@ (800d430 <USB_EPStartXfer+0xb00>)
 800d314:	4013      	ands	r3, r2
 800d316:	61fb      	str	r3, [r7, #28]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	18d3      	adds	r3, r2, r3
 800d322:	69fa      	ldr	r2, [r7, #28]
 800d324:	493f      	ldr	r1, [pc, #252]	@ (800d424 <USB_EPStartXfer+0xaf4>)
 800d326:	430a      	orrs	r2, r1
 800d328:	601a      	str	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	429a      	cmp	r2, r3
 800d334:	d907      	bls.n	800d346 <USB_EPStartXfer+0xa16>
      {
        ep->xfer_len -= ep->maxpacket;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	699a      	ldr	r2, [r3, #24]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	1ad2      	subs	r2, r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	619a      	str	r2, [r3, #24]
 800d344:	e048      	b.n	800d3d8 <USB_EPStartXfer+0xaa8>
      }
      else
      {
        ep->xfer_len = 0U;
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2200      	movs	r2, #0
 800d34a:	619a      	str	r2, [r3, #24]
 800d34c:	e044      	b.n	800d3d8 <USB_EPStartXfer+0xaa8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	78db      	ldrb	r3, [r3, #3]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d136      	bne.n	800d3c4 <USB_EPStartXfer+0xa94>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d03c      	beq.n	800d3d8 <USB_EPStartXfer+0xaa8>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	18d3      	adds	r3, r2, r3
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	212a      	movs	r1, #42	@ 0x2a
 800d36c:	187b      	adds	r3, r7, r1
 800d36e:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d370:	187b      	adds	r3, r7, r1
 800d372:	881a      	ldrh	r2, [r3, #0]
 800d374:	2380      	movs	r3, #128	@ 0x80
 800d376:	01db      	lsls	r3, r3, #7
 800d378:	4013      	ands	r3, r2
 800d37a:	d004      	beq.n	800d386 <USB_EPStartXfer+0xa56>
 800d37c:	187b      	adds	r3, r7, r1
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	2240      	movs	r2, #64	@ 0x40
 800d382:	4013      	ands	r3, r2
 800d384:	d10b      	bne.n	800d39e <USB_EPStartXfer+0xa6e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d386:	212a      	movs	r1, #42	@ 0x2a
 800d388:	187b      	adds	r3, r7, r1
 800d38a:	881a      	ldrh	r2, [r3, #0]
 800d38c:	2380      	movs	r3, #128	@ 0x80
 800d38e:	01db      	lsls	r3, r3, #7
 800d390:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d392:	d121      	bne.n	800d3d8 <USB_EPStartXfer+0xaa8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d394:	187b      	adds	r3, r7, r1
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	2240      	movs	r2, #64	@ 0x40
 800d39a:	4013      	ands	r3, r2
 800d39c:	d11c      	bne.n	800d3d8 <USB_EPStartXfer+0xaa8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	18d3      	adds	r3, r2, r3
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a1f      	ldr	r2, [pc, #124]	@ (800d428 <USB_EPStartXfer+0xaf8>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	18d3      	adds	r3, r2, r3
 800d3ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3bc:	491d      	ldr	r1, [pc, #116]	@ (800d434 <USB_EPStartXfer+0xb04>)
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	e009      	b.n	800d3d8 <USB_EPStartXfer+0xaa8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	78db      	ldrb	r3, [r3, #3]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d103      	bne.n	800d3d4 <USB_EPStartXfer+0xaa4>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	619a      	str	r2, [r3, #24]
 800d3d2:	e001      	b.n	800d3d8 <USB_EPStartXfer+0xaa8>
      }
      else
      {
        return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e01c      	b.n	800d412 <USB_EPStartXfer+0xae2>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	18d3      	adds	r3, r2, r3
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a14      	ldr	r2, [pc, #80]	@ (800d438 <USB_EPStartXfer+0xb08>)
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	61bb      	str	r3, [r7, #24]
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2280      	movs	r2, #128	@ 0x80
 800d3ee:	0152      	lsls	r2, r2, #5
 800d3f0:	4053      	eors	r3, r2
 800d3f2:	61bb      	str	r3, [r7, #24]
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	2280      	movs	r2, #128	@ 0x80
 800d3f8:	0192      	lsls	r2, r2, #6
 800d3fa:	4053      	eors	r3, r2
 800d3fc:	61bb      	str	r3, [r7, #24]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	18d3      	adds	r3, r2, r3
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	4906      	ldr	r1, [pc, #24]	@ (800d424 <USB_EPStartXfer+0xaf4>)
 800d40c:	430a      	orrs	r2, r1
 800d40e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	0018      	movs	r0, r3
 800d414:	46bd      	mov	sp, r7
 800d416:	b013      	add	sp, #76	@ 0x4c
 800d418:	bd90      	pop	{r4, r7, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	40009800 	.word	0x40009800
 800d420:	07ff8fbf 	.word	0x07ff8fbf
 800d424:	00008080 	.word	0x00008080
 800d428:	07ff8f8f 	.word	0x07ff8f8f
 800d42c:	00008180 	.word	0x00008180
 800d430:	07ff8e8f 	.word	0x07ff8e8f
 800d434:	000080c0 	.word	0x000080c0
 800d438:	07ffbf8f 	.word	0x07ffbf8f

0800d43c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	785b      	ldrb	r3, [r3, #1]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d016      	beq.n	800d47c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	18d3      	adds	r3, r2, r3
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a16      	ldr	r2, [pc, #88]	@ (800d4b4 <USB_EPSetStall+0x78>)
 800d45c:	4013      	ands	r3, r2
 800d45e:	60bb      	str	r3, [r7, #8]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2210      	movs	r2, #16
 800d464:	4053      	eors	r3, r2
 800d466:	60bb      	str	r3, [r7, #8]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	18d3      	adds	r3, r2, r3
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	4910      	ldr	r1, [pc, #64]	@ (800d4b8 <USB_EPSetStall+0x7c>)
 800d476:	430a      	orrs	r2, r1
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	e016      	b.n	800d4aa <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	18d3      	adds	r3, r2, r3
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a0c      	ldr	r2, [pc, #48]	@ (800d4bc <USB_EPSetStall+0x80>)
 800d48a:	4013      	ands	r3, r2
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2280      	movs	r2, #128	@ 0x80
 800d492:	0152      	lsls	r2, r2, #5
 800d494:	4053      	eors	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	18d3      	adds	r3, r2, r3
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	4904      	ldr	r1, [pc, #16]	@ (800d4b8 <USB_EPSetStall+0x7c>)
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	b004      	add	sp, #16
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	07ff8fbf 	.word	0x07ff8fbf
 800d4b8:	00008080 	.word	0x00008080
 800d4bc:	07ffbf8f 	.word	0x07ffbf8f

0800d4c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	785b      	ldrb	r3, [r3, #1]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d037      	beq.n	800d542 <USB_EPClearStall+0x82>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	18d3      	adds	r3, r2, r3
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	613b      	str	r3, [r7, #16]
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2240      	movs	r2, #64	@ 0x40
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	d011      	beq.n	800d50c <USB_EPClearStall+0x4c>
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	18d3      	adds	r3, r2, r3
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a32      	ldr	r2, [pc, #200]	@ (800d5c0 <USB_EPClearStall+0x100>)
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	18d3      	adds	r3, r2, r3
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	492f      	ldr	r1, [pc, #188]	@ (800d5c4 <USB_EPClearStall+0x104>)
 800d508:	430a      	orrs	r2, r1
 800d50a:	601a      	str	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	78db      	ldrb	r3, [r3, #3]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d050      	beq.n	800d5b6 <USB_EPClearStall+0xf6>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	18d3      	adds	r3, r2, r3
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a29      	ldr	r2, [pc, #164]	@ (800d5c8 <USB_EPClearStall+0x108>)
 800d522:	4013      	ands	r3, r2
 800d524:	60bb      	str	r3, [r7, #8]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2220      	movs	r2, #32
 800d52a:	4053      	eors	r3, r2
 800d52c:	60bb      	str	r3, [r7, #8]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	18d3      	adds	r3, r2, r3
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	4924      	ldr	r1, [pc, #144]	@ (800d5cc <USB_EPClearStall+0x10c>)
 800d53c:	430a      	orrs	r2, r1
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	e039      	b.n	800d5b6 <USB_EPClearStall+0xf6>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	18d3      	adds	r3, r2, r3
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	61fb      	str	r3, [r7, #28]
 800d550:	69fa      	ldr	r2, [r7, #28]
 800d552:	2380      	movs	r3, #128	@ 0x80
 800d554:	01db      	lsls	r3, r3, #7
 800d556:	4013      	ands	r3, r2
 800d558:	d011      	beq.n	800d57e <USB_EPClearStall+0xbe>
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	18d3      	adds	r3, r2, r3
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a16      	ldr	r2, [pc, #88]	@ (800d5c0 <USB_EPClearStall+0x100>)
 800d568:	4013      	ands	r3, r2
 800d56a:	61bb      	str	r3, [r7, #24]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	18d3      	adds	r3, r2, r3
 800d576:	69ba      	ldr	r2, [r7, #24]
 800d578:	4915      	ldr	r1, [pc, #84]	@ (800d5d0 <USB_EPClearStall+0x110>)
 800d57a:	430a      	orrs	r2, r1
 800d57c:	601a      	str	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	18d3      	adds	r3, r2, r3
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a12      	ldr	r2, [pc, #72]	@ (800d5d4 <USB_EPClearStall+0x114>)
 800d58c:	4013      	ands	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2280      	movs	r2, #128	@ 0x80
 800d594:	0152      	lsls	r2, r2, #5
 800d596:	4053      	eors	r3, r2
 800d598:	617b      	str	r3, [r7, #20]
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2280      	movs	r2, #128	@ 0x80
 800d59e:	0192      	lsls	r2, r2, #6
 800d5a0:	4053      	eors	r3, r2
 800d5a2:	617b      	str	r3, [r7, #20]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	18d3      	adds	r3, r2, r3
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	4906      	ldr	r1, [pc, #24]	@ (800d5cc <USB_EPClearStall+0x10c>)
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	b008      	add	sp, #32
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	07ff8f8f 	.word	0x07ff8f8f
 800d5c4:	000080c0 	.word	0x000080c0
 800d5c8:	07ff8fbf 	.word	0x07ff8fbf
 800d5cc:	00008080 	.word	0x00008080
 800d5d0:	0000c080 	.word	0x0000c080
 800d5d4:	07ffbf8f 	.word	0x07ffbf8f

0800d5d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	785b      	ldrb	r3, [r3, #1]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d131      	bne.n	800d64e <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	7b1b      	ldrb	r3, [r3, #12]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d15f      	bne.n	800d6b2 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	78db      	ldrb	r3, [r3, #3]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d016      	beq.n	800d628 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	18d3      	adds	r3, r2, r3
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a2d      	ldr	r2, [pc, #180]	@ (800d6bc <USB_EPStopXfer+0xe4>)
 800d608:	4013      	ands	r3, r2
 800d60a:	60bb      	str	r3, [r7, #8]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	2220      	movs	r2, #32
 800d610:	4053      	eors	r3, r2
 800d612:	60bb      	str	r3, [r7, #8]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	18d3      	adds	r3, r2, r3
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	4927      	ldr	r1, [pc, #156]	@ (800d6c0 <USB_EPStopXfer+0xe8>)
 800d622:	430a      	orrs	r2, r1
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	e044      	b.n	800d6b2 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	18d3      	adds	r3, r2, r3
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a21      	ldr	r2, [pc, #132]	@ (800d6bc <USB_EPStopXfer+0xe4>)
 800d636:	4013      	ands	r3, r2
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	18d3      	adds	r3, r2, r3
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	491e      	ldr	r1, [pc, #120]	@ (800d6c0 <USB_EPStopXfer+0xe8>)
 800d648:	430a      	orrs	r2, r1
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	e031      	b.n	800d6b2 <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	7b1b      	ldrb	r3, [r3, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d12d      	bne.n	800d6b2 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	78db      	ldrb	r3, [r3, #3]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d017      	beq.n	800d68e <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	18d3      	adds	r3, r2, r3
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a16      	ldr	r2, [pc, #88]	@ (800d6c4 <USB_EPStopXfer+0xec>)
 800d66c:	4013      	ands	r3, r2
 800d66e:	613b      	str	r3, [r7, #16]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	2280      	movs	r2, #128	@ 0x80
 800d674:	0192      	lsls	r2, r2, #6
 800d676:	4053      	eors	r3, r2
 800d678:	613b      	str	r3, [r7, #16]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	18d3      	adds	r3, r2, r3
 800d684:	693a      	ldr	r2, [r7, #16]
 800d686:	490e      	ldr	r1, [pc, #56]	@ (800d6c0 <USB_EPStopXfer+0xe8>)
 800d688:	430a      	orrs	r2, r1
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	e011      	b.n	800d6b2 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	18d3      	adds	r3, r2, r3
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a0a      	ldr	r2, [pc, #40]	@ (800d6c4 <USB_EPStopXfer+0xec>)
 800d69c:	4013      	ands	r3, r2
 800d69e:	617b      	str	r3, [r7, #20]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	18d3      	adds	r3, r2, r3
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	4904      	ldr	r1, [pc, #16]	@ (800d6c0 <USB_EPStopXfer+0xe8>)
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	b006      	add	sp, #24
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	07ff8fbf 	.word	0x07ff8fbf
 800d6c0:	00008080 	.word	0x00008080
 800d6c4:	07ffbf8f 	.word	0x07ffbf8f

0800d6c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	000a      	movs	r2, r1
 800d6d2:	1cfb      	adds	r3, r7, #3
 800d6d4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800d6d6:	1cfb      	adds	r3, r7, #3
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2280      	movs	r2, #128	@ 0x80
 800d6e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	b002      	add	sp, #8
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6fa:	2280      	movs	r2, #128	@ 0x80
 800d6fc:	0212      	lsls	r2, r2, #8
 800d6fe:	431a      	orrs	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	0018      	movs	r0, r3
 800d708:	46bd      	mov	sp, r7
 800d70a:	b002      	add	sp, #8
 800d70c:	bd80      	pop	{r7, pc}
	...

0800d710 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d71c:	4a04      	ldr	r2, [pc, #16]	@ (800d730 <USB_DevDisconnect+0x20>)
 800d71e:	401a      	ands	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	0018      	movs	r0, r3
 800d728:	46bd      	mov	sp, r7
 800d72a:	b002      	add	sp, #8
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	46c0      	nop			@ (mov r8, r8)
 800d730:	ffff7fff 	.word	0xffff7fff

0800d734 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d740:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	0018      	movs	r0, r3
 800d746:	46bd      	mov	sp, r7
 800d748:	b004      	add	sp, #16
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08a      	sub	sp, #40	@ 0x28
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	0019      	movs	r1, r3
 800d758:	1dbb      	adds	r3, r7, #6
 800d75a:	801a      	strh	r2, [r3, #0]
 800d75c:	1d3b      	adds	r3, r7, #4
 800d75e:	1c0a      	adds	r2, r1, #0
 800d760:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d762:	1d3b      	adds	r3, r7, #4
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	3303      	adds	r3, #3
 800d768:	089b      	lsrs	r3, r3, #2
 800d76a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d76c:	2016      	movs	r0, #22
 800d76e:	183b      	adds	r3, r7, r0
 800d770:	1d3a      	adds	r2, r7, #4
 800d772:	8812      	ldrh	r2, [r2, #0]
 800d774:	2103      	movs	r1, #3
 800d776:	400a      	ands	r2, r1
 800d778:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d77e:	183b      	adds	r3, r7, r0
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d002      	beq.n	800d78c <USB_WritePMA+0x40>
  {
    NbWords--;
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	3b01      	subs	r3, #1
 800d78a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d78c:	1dbb      	adds	r3, r7, #6
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	4a28      	ldr	r2, [pc, #160]	@ (800d834 <USB_WritePMA+0xe8>)
 800d792:	4694      	mov	ip, r2
 800d794:	4463      	add	r3, ip
 800d796:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	623b      	str	r3, [r7, #32]
 800d79c:	e01f      	b.n	800d7de <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	781a      	ldrb	r2, [r3, #0]
 800d7a2:	7859      	ldrb	r1, [r3, #1]
 800d7a4:	0209      	lsls	r1, r1, #8
 800d7a6:	430a      	orrs	r2, r1
 800d7a8:	7899      	ldrb	r1, [r3, #2]
 800d7aa:	0409      	lsls	r1, r1, #16
 800d7ac:	430a      	orrs	r2, r1
 800d7ae:	78db      	ldrb	r3, [r3, #3]
 800d7b0:	061b      	lsls	r3, r3, #24
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	001a      	movs	r2, r3
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d7d8:	6a3b      	ldr	r3, [r7, #32]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	623b      	str	r3, [r7, #32]
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1dc      	bne.n	800d79e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d7e4:	2316      	movs	r3, #22
 800d7e6:	18fb      	adds	r3, r7, r3
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d01e      	beq.n	800d82c <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	001a      	movs	r2, r3
 800d7f8:	6a3b      	ldr	r3, [r7, #32]
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	409a      	lsls	r2, r3
 800d7fe:	0013      	movs	r3, r2
 800d800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d802:	4313      	orrs	r3, r2
 800d804:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	3301      	adds	r3, #1
 800d80a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	3301      	adds	r3, #1
 800d810:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d812:	2116      	movs	r1, #22
 800d814:	187b      	adds	r3, r7, r1
 800d816:	881a      	ldrh	r2, [r3, #0]
 800d818:	187b      	adds	r3, r7, r1
 800d81a:	3a01      	subs	r2, #1
 800d81c:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800d81e:	187b      	adds	r3, r7, r1
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1e5      	bne.n	800d7f2 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d82a:	601a      	str	r2, [r3, #0]
  }
}
 800d82c:	46c0      	nop			@ (mov r8, r8)
 800d82e:	46bd      	mov	sp, r7
 800d830:	b00a      	add	sp, #40	@ 0x28
 800d832:	bd80      	pop	{r7, pc}
 800d834:	40009800 	.word	0x40009800

0800d838 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b08b      	sub	sp, #44	@ 0x2c
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	0019      	movs	r1, r3
 800d844:	1dbb      	adds	r3, r7, #6
 800d846:	801a      	strh	r2, [r3, #0]
 800d848:	1d3b      	adds	r3, r7, #4
 800d84a:	1c0a      	adds	r2, r1, #0
 800d84c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d84e:	1d3b      	adds	r3, r7, #4
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	3303      	adds	r3, #3
 800d854:	089b      	lsrs	r3, r3, #2
 800d856:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d858:	201a      	movs	r0, #26
 800d85a:	183b      	adds	r3, r7, r0
 800d85c:	1d3a      	adds	r2, r7, #4
 800d85e:	8812      	ldrh	r2, [r2, #0]
 800d860:	2103      	movs	r1, #3
 800d862:	400a      	ands	r2, r1
 800d864:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d86a:	1dbb      	adds	r3, r7, #6
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	4a39      	ldr	r2, [pc, #228]	@ (800d954 <USB_ReadPMA+0x11c>)
 800d870:	4694      	mov	ip, r2
 800d872:	4463      	add	r3, ip
 800d874:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d876:	183b      	adds	r3, r7, r0
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	3b01      	subs	r3, #1
 800d882:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	627b      	str	r3, [r7, #36]	@ 0x24
 800d888:	e03c      	b.n	800d904 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	21ff      	movs	r1, #255	@ 0xff
 800d892:	4011      	ands	r1, r2
 800d894:	000c      	movs	r4, r1
 800d896:	7819      	ldrb	r1, [r3, #0]
 800d898:	2000      	movs	r0, #0
 800d89a:	4001      	ands	r1, r0
 800d89c:	1c08      	adds	r0, r1, #0
 800d89e:	1c21      	adds	r1, r4, #0
 800d8a0:	4301      	orrs	r1, r0
 800d8a2:	7019      	strb	r1, [r3, #0]
 800d8a4:	0a11      	lsrs	r1, r2, #8
 800d8a6:	20ff      	movs	r0, #255	@ 0xff
 800d8a8:	4001      	ands	r1, r0
 800d8aa:	000c      	movs	r4, r1
 800d8ac:	7859      	ldrb	r1, [r3, #1]
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	4001      	ands	r1, r0
 800d8b2:	1c08      	adds	r0, r1, #0
 800d8b4:	1c21      	adds	r1, r4, #0
 800d8b6:	4301      	orrs	r1, r0
 800d8b8:	7059      	strb	r1, [r3, #1]
 800d8ba:	0c11      	lsrs	r1, r2, #16
 800d8bc:	20ff      	movs	r0, #255	@ 0xff
 800d8be:	4001      	ands	r1, r0
 800d8c0:	000c      	movs	r4, r1
 800d8c2:	7899      	ldrb	r1, [r3, #2]
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	4001      	ands	r1, r0
 800d8c8:	1c08      	adds	r0, r1, #0
 800d8ca:	1c21      	adds	r1, r4, #0
 800d8cc:	4301      	orrs	r1, r0
 800d8ce:	7099      	strb	r1, [r3, #2]
 800d8d0:	0e10      	lsrs	r0, r2, #24
 800d8d2:	78da      	ldrb	r2, [r3, #3]
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	400a      	ands	r2, r1
 800d8d8:	1c11      	adds	r1, r2, #0
 800d8da:	1c02      	adds	r2, r0, #0
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d900:	3b01      	subs	r3, #1
 800d902:	627b      	str	r3, [r7, #36]	@ 0x24
 800d904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1bf      	bne.n	800d88a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d90a:	231a      	movs	r3, #26
 800d90c:	18fb      	adds	r3, r7, r3
 800d90e:	881b      	ldrh	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01b      	beq.n	800d94c <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	40da      	lsrs	r2, r3
 800d924:	0013      	movs	r3, r2
 800d926:	b2da      	uxtb	r2, r3
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	701a      	strb	r2, [r3, #0]
      count++;
 800d92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92e:	3301      	adds	r3, #1
 800d930:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	3301      	adds	r3, #1
 800d936:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d938:	211a      	movs	r1, #26
 800d93a:	187b      	adds	r3, r7, r1
 800d93c:	881a      	ldrh	r2, [r3, #0]
 800d93e:	187b      	adds	r3, r7, r1
 800d940:	3a01      	subs	r2, #1
 800d942:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800d944:	187b      	adds	r3, r7, r1
 800d946:	881b      	ldrh	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1e6      	bne.n	800d91a <USB_ReadPMA+0xe2>
  }
}
 800d94c:	46c0      	nop			@ (mov r8, r8)
 800d94e:	46bd      	mov	sp, r7
 800d950:	b00b      	add	sp, #44	@ 0x2c
 800d952:	bd90      	pop	{r4, r7, pc}
 800d954:	40009800 	.word	0x40009800

0800d958 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param  None
  * @retval int
  */
UINT MX_FileX_Init(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
  UINT ret = FX_SUCCESS;
 800d95e:	2300      	movs	r3, #0
 800d960:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN MX_FileX_Init */

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 800d962:	f000 f805 	bl	800d970 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 800d966:	687b      	ldr	r3, [r7, #4]
}
 800d968:	0018      	movs	r0, r3
 800d96a:	46bd      	mov	sp, r7
 800d96c:	b002      	add	sp, #8
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800d974:	4b2c      	ldr	r3, [pc, #176]	@ (800da28 <_fx_system_initialize+0xb8>)
 800d976:	2200      	movs	r2, #0
 800d978:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800d97a:	4b2c      	ldr	r3, [pc, #176]	@ (800da2c <_fx_system_initialize+0xbc>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800d980:	4b2b      	ldr	r3, [pc, #172]	@ (800da30 <_fx_system_initialize+0xc0>)
 800d982:	4a2c      	ldr	r2, [pc, #176]	@ (800da34 <_fx_system_initialize+0xc4>)
 800d984:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800d986:	4b2c      	ldr	r3, [pc, #176]	@ (800da38 <_fx_system_initialize+0xc8>)
 800d988:	2200      	movs	r2, #0
 800d98a:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800d98c:	4b2b      	ldr	r3, [pc, #172]	@ (800da3c <_fx_system_initialize+0xcc>)
 800d98e:	2280      	movs	r2, #128	@ 0x80
 800d990:	0052      	lsls	r2, r2, #1
 800d992:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800d994:	4b2a      	ldr	r3, [pc, #168]	@ (800da40 <_fx_system_initialize+0xd0>)
 800d996:	2210      	movs	r2, #16
 800d998:	601a      	str	r2, [r3, #0]
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800d99a:	4b2a      	ldr	r3, [pc, #168]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	22ff      	movs	r2, #255	@ 0xff
 800d9a0:	0612      	lsls	r2, r2, #24
 800d9a2:	431a      	orrs	r2, r3
 800d9a4:	4b27      	ldr	r3, [pc, #156]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9a6:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800d9a8:	4b26      	ldr	r3, [pc, #152]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	22ff      	movs	r2, #255	@ 0xff
 800d9ae:	0412      	lsls	r2, r2, #16
 800d9b0:	431a      	orrs	r2, r3
 800d9b2:	4b24      	ldr	r3, [pc, #144]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9b4:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LAST_NAME_LEN & 0xFF)) << 24);
    }

#ifdef FX_NO_TIMER
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 10);
 800d9b6:	4b23      	ldr	r3, [pc, #140]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2280      	movs	r2, #128	@ 0x80
 800d9bc:	00d2      	lsls	r2, r2, #3
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	4b20      	ldr	r3, [pc, #128]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9c2:	601a      	str	r2, [r3, #0]
#endif
#ifdef FX_SINGLE_THREAD
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 9);
 800d9c4:	4b1f      	ldr	r3, [pc, #124]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2280      	movs	r2, #128	@ 0x80
 800d9ca:	0092      	lsls	r2, r2, #2
 800d9cc:	431a      	orrs	r2, r3
 800d9ce:	4b1d      	ldr	r3, [pc, #116]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9d0:	601a      	str	r2, [r3, #0]
#endif
#ifdef FX_RENAME_PATH_INHERIT
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 3);
#endif
#ifdef FX_NO_LOCAL_PATH
    _fx_system_build_options_1 = _fx_system_build_options_1 | (((ULONG)1) << 2);
 800d9d2:	4b1c      	ldr	r3, [pc, #112]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2204      	movs	r2, #4
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	4b1a      	ldr	r3, [pc, #104]	@ (800da44 <_fx_system_initialize+0xd4>)
 800d9dc:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800d9de:	4b1a      	ldr	r3, [pc, #104]	@ (800da48 <_fx_system_initialize+0xd8>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2280      	movs	r2, #128	@ 0x80
 800d9e4:	0452      	lsls	r2, r2, #17
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	4b17      	ldr	r3, [pc, #92]	@ (800da48 <_fx_system_initialize+0xd8>)
 800d9ea:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800d9ec:	4b16      	ldr	r3, [pc, #88]	@ (800da48 <_fx_system_initialize+0xd8>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2280      	movs	r2, #128	@ 0x80
 800d9f2:	0212      	lsls	r2, r2, #8
 800d9f4:	431a      	orrs	r2, r3
 800d9f6:	4b14      	ldr	r3, [pc, #80]	@ (800da48 <_fx_system_initialize+0xd8>)
 800d9f8:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800d9fa:	4b13      	ldr	r3, [pc, #76]	@ (800da48 <_fx_system_initialize+0xd8>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2210      	movs	r2, #16
 800da00:	431a      	orrs	r2, r3
 800da02:	4b11      	ldr	r3, [pc, #68]	@ (800da48 <_fx_system_initialize+0xd8>)
 800da04:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800da06:	4b11      	ldr	r3, [pc, #68]	@ (800da4c <_fx_system_initialize+0xdc>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	22a0      	movs	r2, #160	@ 0xa0
 800da0c:	0312      	lsls	r2, r2, #12
 800da0e:	431a      	orrs	r2, r3
 800da10:	4b0e      	ldr	r3, [pc, #56]	@ (800da4c <_fx_system_initialize+0xdc>)
 800da12:	601a      	str	r2, [r3, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800da14:	4b0d      	ldr	r3, [pc, #52]	@ (800da4c <_fx_system_initialize+0xdc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	22fa      	movs	r2, #250	@ 0xfa
 800da1a:	0092      	lsls	r2, r2, #2
 800da1c:	431a      	orrs	r2, r3
 800da1e:	4b0b      	ldr	r3, [pc, #44]	@ (800da4c <_fx_system_initialize+0xdc>)
 800da20:	601a      	str	r2, [r3, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800da22:	46c0      	nop			@ (mov r8, r8)
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	200007ac 	.word	0x200007ac
 800da2c:	200007b0 	.word	0x200007b0
 800da30:	200007b4 	.word	0x200007b4
 800da34:	00004a21 	.word	0x00004a21
 800da38:	200007b8 	.word	0x200007b8
 800da3c:	200007bc 	.word	0x200007bc
 800da40:	200007c0 	.word	0x200007c0
 800da44:	200007c4 	.word	0x200007c4
 800da48:	200007c8 	.word	0x200007c8
 800da4c:	200007cc 	.word	0x200007cc

0800da50 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800da58:	4b1c      	ldr	r3, [pc, #112]	@ (800dacc <_ux_device_stack_alternate_setting_get+0x7c>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3324      	adds	r3, #36	@ 0x24
 800da5e:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b03      	cmp	r3, #3
 800da66:	d12b      	bne.n	800dac0 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	2290      	movs	r2, #144	@ 0x90
 800da6c:	589b      	ldr	r3, [r3, r2]
 800da6e:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800da70:	e023      	b.n	800daba <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	7b9b      	ldrb	r3, [r3, #14]
 800da76:	001a      	movs	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d11a      	bne.n	800dab4 <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	3318      	adds	r3, #24
 800da82:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	3320      	adds	r3, #32
 800da88:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800da8e:	69fa      	ldr	r2, [r7, #28]
 800da90:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800da92:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	2201      	movs	r2, #1
 800da98:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	2203      	movs	r2, #3
 800da9e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	2201      	movs	r2, #1
 800daa4:	2101      	movs	r1, #1
 800daa6:	0018      	movs	r0, r3
 800daa8:	f001 fdcb 	bl	800f642 <_ux_device_stack_transfer_request>
 800daac:	0003      	movs	r3, r0
 800daae:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	e006      	b.n	800dac2 <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1d8      	bne.n	800da72 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800dac0:	23ff      	movs	r3, #255	@ 0xff
}
 800dac2:	0018      	movs	r0, r3
 800dac4:	46bd      	mov	sp, r7
 800dac6:	b008      	add	sp, #32
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	46c0      	nop			@ (mov r8, r8)
 800dacc:	200007d0 	.word	0x200007d0

0800dad0 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800dad0:	b590      	push	{r4, r7, lr}
 800dad2:	b0a5      	sub	sp, #148	@ 0x94
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dada:	4bd8      	ldr	r3, [pc, #864]	@ (800de3c <_ux_device_stack_alternate_setting_set+0x36c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3324      	adds	r3, #36	@ 0x24
 800dae0:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800dae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d001      	beq.n	800daee <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800daea:	2354      	movs	r3, #84	@ 0x54
 800daec:	e224      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800daee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800daf0:	2290      	movs	r2, #144	@ 0x90
 800daf2:	589b      	ldr	r3, [r3, r2]
 800daf4:	228c      	movs	r2, #140	@ 0x8c
 800daf6:	18ba      	adds	r2, r7, r2
 800daf8:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800dafa:	e00c      	b.n	800db16 <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800dafc:	218c      	movs	r1, #140	@ 0x8c
 800dafe:	187b      	adds	r3, r7, r1
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	7b9b      	ldrb	r3, [r3, #14]
 800db04:	001a      	movs	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4293      	cmp	r3, r2
 800db0a:	d00a      	beq.n	800db22 <_ux_device_stack_alternate_setting_set+0x52>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800db0c:	187b      	adds	r3, r7, r1
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	187a      	adds	r2, r7, r1
 800db14:	6013      	str	r3, [r2, #0]
    while (interface_ptr != UX_NULL)
 800db16:	238c      	movs	r3, #140	@ 0x8c
 800db18:	18fb      	adds	r3, r7, r3
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1ed      	bne.n	800dafc <_ux_device_stack_alternate_setting_set+0x2c>
 800db20:	e000      	b.n	800db24 <_ux_device_stack_alternate_setting_set+0x54>
            break;
 800db22:	46c0      	nop			@ (mov r8, r8)
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800db24:	238c      	movs	r3, #140	@ 0x8c
 800db26:	18fb      	adds	r3, r7, r3
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <_ux_device_stack_alternate_setting_set+0x6c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800db2e:	2252      	movs	r2, #82	@ 0x52
 800db30:	2107      	movs	r1, #7
 800db32:	2002      	movs	r0, #2
 800db34:	f001 fe50 	bl	800f7d8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800db38:	2352      	movs	r3, #82	@ 0x52
 800db3a:	e1fd      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800db3c:	238c      	movs	r3, #140	@ 0x8c
 800db3e:	18fb      	adds	r3, r7, r3
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	7bdb      	ldrb	r3, [r3, #15]
 800db44:	001a      	movs	r2, r3
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	4293      	cmp	r3, r2
 800db4a:	d101      	bne.n	800db50 <_ux_device_stack_alternate_setting_set+0x80>
        return(UX_SUCCESS);       
 800db4c:	2300      	movs	r3, #0
 800db4e:	e1f3      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800db50:	4bba      	ldr	r3, [pc, #744]	@ (800de3c <_ux_device_stack_alternate_setting_set+0x36c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800db56:	4bb9      	ldr	r3, [pc, #740]	@ (800de3c <_ux_device_stack_alternate_setting_set+0x36c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	22cc      	movs	r2, #204	@ 0xcc
 800db5c:	589b      	ldr	r3, [r3, r2]
 800db5e:	2288      	movs	r2, #136	@ 0x88
 800db60:	18ba      	adds	r2, r7, r2
 800db62:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800db64:	4bb5      	ldr	r3, [pc, #724]	@ (800de3c <_ux_device_stack_alternate_setting_set+0x36c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	22d0      	movs	r2, #208	@ 0xd0
 800db6a:	589b      	ldr	r3, [r3, r2]
 800db6c:	2284      	movs	r2, #132	@ 0x84
 800db6e:	18ba      	adds	r2, r7, r2
 800db70:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800db72:	e1da      	b.n	800df2a <_ux_device_stack_alternate_setting_set+0x45a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800db74:	2088      	movs	r0, #136	@ 0x88
 800db76:	183b      	adds	r3, r7, r0
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800db7e:	2167      	movs	r1, #103	@ 0x67
 800db80:	187b      	adds	r3, r7, r1
 800db82:	183a      	adds	r2, r7, r0
 800db84:	6812      	ldr	r2, [r2, #0]
 800db86:	7852      	ldrb	r2, [r2, #1]
 800db88:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800db8a:	187b      	adds	r3, r7, r1
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d000      	beq.n	800db94 <_ux_device_stack_alternate_setting_set+0xc4>
 800db92:	e1bc      	b.n	800df0e <_ux_device_stack_alternate_setting_set+0x43e>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800db94:	2444      	movs	r4, #68	@ 0x44
 800db96:	193b      	adds	r3, r7, r4
 800db98:	49a9      	ldr	r1, [pc, #676]	@ (800de40 <_ux_device_stack_alternate_setting_set+0x370>)
 800db9a:	183a      	adds	r2, r7, r0
 800db9c:	6810      	ldr	r0, [r2, #0]
 800db9e:	2208      	movs	r2, #8
 800dba0:	f001 feee 	bl	800f980 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800dba4:	0020      	movs	r0, r4
 800dba6:	183b      	adds	r3, r7, r0
 800dba8:	795b      	ldrb	r3, [r3, #5]
 800dbaa:	0019      	movs	r1, r3
 800dbac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbae:	2280      	movs	r2, #128	@ 0x80
 800dbb0:	589b      	ldr	r3, [r3, r2]
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	d000      	beq.n	800dbb8 <_ux_device_stack_alternate_setting_set+0xe8>
 800dbb6:	e1aa      	b.n	800df0e <_ux_device_stack_alternate_setting_set+0x43e>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800dbb8:	183b      	adds	r3, r7, r0
 800dbba:	885b      	ldrh	r3, [r3, #2]
 800dbbc:	2284      	movs	r2, #132	@ 0x84
 800dbbe:	18ba      	adds	r2, r7, r2
 800dbc0:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800dbc2:	e19d      	b.n	800df00 <_ux_device_stack_alternate_setting_set+0x430>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800dbc4:	2088      	movs	r0, #136	@ 0x88
 800dbc6:	183b      	adds	r3, r7, r0
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800dbce:	2167      	movs	r1, #103	@ 0x67
 800dbd0:	187b      	adds	r3, r7, r1
 800dbd2:	183a      	adds	r2, r7, r0
 800dbd4:	6812      	ldr	r2, [r2, #0]
 800dbd6:	7852      	ldrb	r2, [r2, #1]
 800dbd8:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800dbda:	187b      	adds	r3, r7, r1
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	d000      	beq.n	800dbe4 <_ux_device_stack_alternate_setting_set+0x114>
 800dbe2:	e17f      	b.n	800dee4 <_ux_device_stack_alternate_setting_set+0x414>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800dbe4:	2438      	movs	r4, #56	@ 0x38
 800dbe6:	193b      	adds	r3, r7, r4
 800dbe8:	4996      	ldr	r1, [pc, #600]	@ (800de44 <_ux_device_stack_alternate_setting_set+0x374>)
 800dbea:	183a      	adds	r2, r7, r0
 800dbec:	6810      	ldr	r0, [r2, #0]
 800dbee:	2209      	movs	r2, #9
 800dbf0:	f001 fec6 	bl	800f980 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800dbf4:	193b      	adds	r3, r7, r4
 800dbf6:	789b      	ldrb	r3, [r3, #2]
 800dbf8:	001a      	movs	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d000      	beq.n	800dc02 <_ux_device_stack_alternate_setting_set+0x132>
 800dc00:	e170      	b.n	800dee4 <_ux_device_stack_alternate_setting_set+0x414>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800dc02:	193b      	adds	r3, r7, r4
 800dc04:	78db      	ldrb	r3, [r3, #3]
 800dc06:	001a      	movs	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d000      	beq.n	800dc10 <_ux_device_stack_alternate_setting_set+0x140>
 800dc0e:	e169      	b.n	800dee4 <_ux_device_stack_alternate_setting_set+0x414>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dc10:	238c      	movs	r3, #140	@ 0x8c
 800dc12:	18fb      	adds	r3, r7, r3
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	69db      	ldr	r3, [r3, #28]
 800dc18:	2280      	movs	r2, #128	@ 0x80
 800dc1a:	18ba      	adds	r2, r7, r2
 800dc1c:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 800dc1e:	e029      	b.n	800dc74 <_ux_device_stack_alternate_setting_set+0x1a4>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800dc20:	2480      	movs	r4, #128	@ 0x80
 800dc22:	193b      	adds	r3, r7, r4
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2126      	movs	r1, #38	@ 0x26
 800dc28:	0018      	movs	r0, r3
 800dc2a:	f001 fcf7 	bl	800f61c <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800dc2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	193a      	adds	r2, r7, r4
 800dc34:	6812      	ldr	r2, [r2, #0]
 800dc36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dc38:	210f      	movs	r1, #15
 800dc3a:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800dc3c:	193b      	adds	r3, r7, r4
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800dc44:	0021      	movs	r1, r4
 800dc46:	187b      	adds	r3, r7, r1
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800dc4e:	187b      	adds	r3, r7, r1
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2200      	movs	r2, #0
 800dc54:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800dc56:	187b      	adds	r3, r7, r1
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800dc5e:	187b      	adds	r3, r7, r1
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800dc66:	187b      	adds	r3, r7, r1
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800dc6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc70:	187a      	adds	r2, r7, r1
 800dc72:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 800dc74:	2380      	movs	r3, #128	@ 0x80
 800dc76:	18fb      	adds	r3, r7, r3
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d1d0      	bne.n	800dc20 <_ux_device_stack_alternate_setting_set+0x150>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800dc7e:	238c      	movs	r3, #140	@ 0x8c
 800dc80:	18fb      	adds	r3, r7, r3
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2200      	movs	r2, #0
 800dc86:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800dc88:	2188      	movs	r1, #136	@ 0x88
 800dc8a:	187b      	adds	r3, r7, r1
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	001a      	movs	r2, r3
 800dc92:	2084      	movs	r0, #132	@ 0x84
 800dc94:	183b      	adds	r3, r7, r0
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	1a9b      	subs	r3, r3, r2
 800dc9a:	183a      	adds	r2, r7, r0
 800dc9c:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 800dc9e:	187b      	adds	r3, r7, r1
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	001a      	movs	r2, r3
 800dca6:	187b      	adds	r3, r7, r1
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	189b      	adds	r3, r3, r2
 800dcac:	187a      	adds	r2, r7, r1
 800dcae:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800dcb0:	e0db      	b.n	800de6a <_ux_device_stack_alternate_setting_set+0x39a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800dcb2:	2288      	movs	r2, #136	@ 0x88
 800dcb4:	18bb      	adds	r3, r7, r2
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800dcbc:	2167      	movs	r1, #103	@ 0x67
 800dcbe:	187b      	adds	r3, r7, r1
 800dcc0:	18ba      	adds	r2, r7, r2
 800dcc2:	6812      	ldr	r2, [r2, #0]
 800dcc4:	7852      	ldrb	r2, [r2, #1]
 800dcc6:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800dcc8:	187b      	adds	r3, r7, r1
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b05      	cmp	r3, #5
 800dcce:	d008      	beq.n	800dce2 <_ux_device_stack_alternate_setting_set+0x212>
 800dcd0:	dd00      	ble.n	800dcd4 <_ux_device_stack_alternate_setting_set+0x204>
 800dcd2:	e0bb      	b.n	800de4c <_ux_device_stack_alternate_setting_set+0x37c>
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d100      	bne.n	800dcda <_ux_device_stack_alternate_setting_set+0x20a>
 800dcd8:	e0ab      	b.n	800de32 <_ux_device_stack_alternate_setting_set+0x362>
 800dcda:	2b04      	cmp	r3, #4
 800dcdc:	d100      	bne.n	800dce0 <_ux_device_stack_alternate_setting_set+0x210>
 800dcde:	e0a8      	b.n	800de32 <_ux_device_stack_alternate_setting_set+0x362>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800dce0:	e0b4      	b.n	800de4c <_ux_device_stack_alternate_setting_set+0x37c>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800dce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dce4:	229c      	movs	r2, #156	@ 0x9c
 800dce6:	589b      	ldr	r3, [r3, r2]
 800dce8:	2280      	movs	r2, #128	@ 0x80
 800dcea:	18ba      	adds	r2, r7, r2
 800dcec:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800dcee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcf0:	22a0      	movs	r2, #160	@ 0xa0
 800dcf2:	589b      	ldr	r3, [r3, r2]
 800dcf4:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800dcf6:	e013      	b.n	800dd20 <_ux_device_stack_alternate_setting_set+0x250>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800dcf8:	2280      	movs	r2, #128	@ 0x80
 800dcfa:	18bb      	adds	r3, r7, r2
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d104      	bne.n	800dd0e <_ux_device_stack_alternate_setting_set+0x23e>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800dd04:	18bb      	adds	r3, r7, r2
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	601a      	str	r2, [r3, #0]
                                            break;
 800dd0c:	e00b      	b.n	800dd26 <_ux_device_stack_alternate_setting_set+0x256>
                                        endpoint++;
 800dd0e:	2280      	movs	r2, #128	@ 0x80
 800dd10:	18bb      	adds	r3, r7, r2
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	3368      	adds	r3, #104	@ 0x68
 800dd16:	18ba      	adds	r2, r7, r2
 800dd18:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 800dd1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800dd20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e8      	bne.n	800dcf8 <_ux_device_stack_alternate_setting_set+0x228>
                                    if (endpoints_pool_number == 0)
 800dd26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d101      	bne.n	800dd30 <_ux_device_stack_alternate_setting_set+0x260>
                                        return(UX_MEMORY_INSUFFICIENT);
 800dd2c:	2312      	movs	r3, #18
 800dd2e:	e103      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800dd30:	2480      	movs	r4, #128	@ 0x80
 800dd32:	193b      	adds	r3, r7, r4
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800dd38:	4943      	ldr	r1, [pc, #268]	@ (800de48 <_ux_device_stack_alternate_setting_set+0x378>)
 800dd3a:	2288      	movs	r2, #136	@ 0x88
 800dd3c:	18ba      	adds	r2, r7, r2
 800dd3e:	6810      	ldr	r0, [r2, #0]
 800dd40:	2206      	movs	r2, #6
 800dd42:	f001 fe1d 	bl	800f980 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800dd46:	0021      	movs	r1, r4
 800dd48:	187b      	adds	r3, r7, r1
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3320      	adds	r3, #32
 800dd4e:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800dd50:	187b      	adds	r3, r7, r1
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 800dd56:	055b      	lsls	r3, r3, #21
 800dd58:	0d5b      	lsrs	r3, r3, #21
 800dd5a:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800dd5c:	4b37      	ldr	r3, [pc, #220]	@ (800de3c <_ux_device_stack_alternate_setting_set+0x36c>)
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	23a2      	movs	r3, #162	@ 0xa2
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	58d3      	ldr	r3, [r2, r3]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d11b      	bne.n	800dda2 <_ux_device_stack_alternate_setting_set+0x2d2>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800dd6a:	187b      	adds	r3, r7, r1
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	7bdb      	ldrb	r3, [r3, #15]
 800dd70:	001a      	movs	r2, r3
 800dd72:	2301      	movs	r3, #1
 800dd74:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800dd76:	d014      	beq.n	800dda2 <_ux_device_stack_alternate_setting_set+0x2d2>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800dd78:	187b      	adds	r3, r7, r1
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	8a1b      	ldrh	r3, [r3, #16]
 800dd7e:	001a      	movs	r2, r3
 800dd80:	23c0      	movs	r3, #192	@ 0xc0
 800dd82:	015b      	lsls	r3, r3, #5
 800dd84:	4013      	ands	r3, r2
 800dd86:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 800dd88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d009      	beq.n	800dda2 <_ux_device_stack_alternate_setting_set+0x2d2>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800dd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd90:	0adb      	lsrs	r3, r3, #11
 800dd92:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 800dd94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd96:	3301      	adds	r3, #1
 800dd98:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 800dd9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dd9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd9e:	4353      	muls	r3, r2
 800dda0:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800dda2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dda4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800dda6:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800dda8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddaa:	2480      	movs	r4, #128	@ 0x80
 800ddac:	193a      	adds	r2, r7, r4
 800ddae:	6812      	ldr	r2, [r2, #0]
 800ddb0:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800ddb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	4252      	negs	r2, r2
 800ddb8:	635a      	str	r2, [r3, #52]	@ 0x34
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800ddba:	193b      	adds	r3, r7, r4
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	228c      	movs	r2, #140	@ 0x8c
 800ddc0:	18ba      	adds	r2, r7, r2
 800ddc2:	6812      	ldr	r2, [r2, #0]
 800ddc4:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 800ddc6:	193b      	adds	r3, r7, r4
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ddcc:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800ddce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	193a      	adds	r2, r7, r4
 800ddd4:	6812      	ldr	r2, [r2, #0]
 800ddd6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ddd8:	210e      	movs	r1, #14
 800ddda:	4798      	blx	r3
 800dddc:	0003      	movs	r3, r0
 800ddde:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 800dde0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d005      	beq.n	800ddf2 <_ux_device_stack_alternate_setting_set+0x322>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800dde6:	193b      	adds	r3, r7, r4
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2200      	movs	r2, #0
 800ddec:	601a      	str	r2, [r3, #0]
                                        return(status);
 800ddee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddf0:	e0a2      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800ddf2:	228c      	movs	r2, #140	@ 0x8c
 800ddf4:	18bb      	adds	r3, r7, r2
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d106      	bne.n	800de0c <_ux_device_stack_alternate_setting_set+0x33c>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800ddfe:	18bb      	adds	r3, r7, r2
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2280      	movs	r2, #128	@ 0x80
 800de04:	18ba      	adds	r2, r7, r2
 800de06:	6812      	ldr	r2, [r2, #0]
 800de08:	61da      	str	r2, [r3, #28]
                                    break;
 800de0a:	e020      	b.n	800de4e <_ux_device_stack_alternate_setting_set+0x37e>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800de0c:	238c      	movs	r3, #140	@ 0x8c
 800de0e:	18fb      	adds	r3, r7, r3
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	69db      	ldr	r3, [r3, #28]
 800de14:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800de16:	e002      	b.n	800de1e <_ux_device_stack_alternate_setting_set+0x34e>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800de18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800de1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1f8      	bne.n	800de18 <_ux_device_stack_alternate_setting_set+0x348>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800de26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de28:	2280      	movs	r2, #128	@ 0x80
 800de2a:	18ba      	adds	r2, r7, r2
 800de2c:	6812      	ldr	r2, [r2, #0]
 800de2e:	615a      	str	r2, [r3, #20]
                                    break;
 800de30:	e00d      	b.n	800de4e <_ux_device_stack_alternate_setting_set+0x37e>
                                    device_framework_length =  descriptor_length;
 800de32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de34:	2284      	movs	r2, #132	@ 0x84
 800de36:	18ba      	adds	r2, r7, r2
 800de38:	6013      	str	r3, [r2, #0]
                                    break;
 800de3a:	e008      	b.n	800de4e <_ux_device_stack_alternate_setting_set+0x37e>
 800de3c:	200007d0 	.word	0x200007d0
 800de40:	20000038 	.word	0x20000038
 800de44:	20000040 	.word	0x20000040
 800de48:	20000020 	.word	0x20000020
                                    break;
 800de4c:	46c0      	nop			@ (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800de4e:	2184      	movs	r1, #132	@ 0x84
 800de50:	187b      	adds	r3, r7, r1
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	187a      	adds	r2, r7, r1
 800de5a:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800de5c:	2188      	movs	r1, #136	@ 0x88
 800de5e:	187b      	adds	r3, r7, r1
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de64:	18d3      	adds	r3, r2, r3
 800de66:	187a      	adds	r2, r7, r1
 800de68:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 800de6a:	2384      	movs	r3, #132	@ 0x84
 800de6c:	18fb      	adds	r3, r7, r3
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d000      	beq.n	800de76 <_ux_device_stack_alternate_setting_set+0x3a6>
 800de74:	e71d      	b.n	800dcb2 <_ux_device_stack_alternate_setting_set+0x1e2>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800de76:	248c      	movs	r4, #140	@ 0x8c
 800de78:	193b      	adds	r3, r7, r4
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	330c      	adds	r3, #12
 800de7e:	2238      	movs	r2, #56	@ 0x38
 800de80:	18b9      	adds	r1, r7, r2
 800de82:	220c      	movs	r2, #12
 800de84:	0018      	movs	r0, r3
 800de86:	f002 f803 	bl	800fe90 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800de8a:	4b2d      	ldr	r3, [pc, #180]	@ (800df40 <_ux_device_stack_alternate_setting_set+0x470>)
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	193b      	adds	r3, r7, r4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	7b9b      	ldrb	r3, [r3, #14]
 800de94:	3340      	adds	r3, #64	@ 0x40
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	18d3      	adds	r3, r2, r3
 800de9a:	3304      	adds	r3, #4
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800dea0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d003      	beq.n	800deae <_ux_device_stack_alternate_setting_set+0x3de>
 800dea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <_ux_device_stack_alternate_setting_set+0x3e2>
                            {

                                return (UX_NO_CLASS_MATCH);
 800deae:	2357      	movs	r3, #87	@ 0x57
 800deb0:	e042      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800deb2:	210c      	movs	r1, #12
 800deb4:	187b      	adds	r3, r7, r1
 800deb6:	2206      	movs	r2, #6
 800deb8:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800deba:	187b      	adds	r3, r7, r1
 800debc:	208c      	movs	r0, #140	@ 0x8c
 800debe:	183a      	adds	r2, r7, r0
 800dec0:	6812      	ldr	r2, [r2, #0]
 800dec2:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800dec4:	187b      	adds	r3, r7, r1
 800dec6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dec8:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800deca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800decc:	183a      	adds	r2, r7, r0
 800dece:	6812      	ldr	r2, [r2, #0]
 800ded0:	661a      	str	r2, [r3, #96]	@ 0x60
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ded2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ded4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ded6:	187a      	adds	r2, r7, r1
 800ded8:	0010      	movs	r0, r2
 800deda:	4798      	blx	r3
 800dedc:	0003      	movs	r3, r0
 800dede:	65fb      	str	r3, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800dee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dee2:	e029      	b.n	800df38 <_ux_device_stack_alternate_setting_set+0x468>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800dee4:	2184      	movs	r1, #132	@ 0x84
 800dee6:	187b      	adds	r3, r7, r1
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	187a      	adds	r2, r7, r1
 800def0:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800def2:	2188      	movs	r1, #136	@ 0x88
 800def4:	187b      	adds	r3, r7, r1
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800defa:	18d3      	adds	r3, r2, r3
 800defc:	187a      	adds	r2, r7, r1
 800defe:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 800df00:	2384      	movs	r3, #132	@ 0x84
 800df02:	18fb      	adds	r3, r7, r3
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d000      	beq.n	800df0c <_ux_device_stack_alternate_setting_set+0x43c>
 800df0a:	e65b      	b.n	800dbc4 <_ux_device_stack_alternate_setting_set+0xf4>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800df0c:	e013      	b.n	800df36 <_ux_device_stack_alternate_setting_set+0x466>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800df0e:	2184      	movs	r1, #132	@ 0x84
 800df10:	187b      	adds	r3, r7, r1
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	187a      	adds	r2, r7, r1
 800df1a:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800df1c:	2188      	movs	r1, #136	@ 0x88
 800df1e:	187b      	adds	r3, r7, r1
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df24:	18d3      	adds	r3, r2, r3
 800df26:	187a      	adds	r2, r7, r1
 800df28:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800df2a:	2384      	movs	r3, #132	@ 0x84
 800df2c:	18fb      	adds	r3, r7, r3
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d000      	beq.n	800df36 <_ux_device_stack_alternate_setting_set+0x466>
 800df34:	e61e      	b.n	800db74 <_ux_device_stack_alternate_setting_set+0xa4>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800df36:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 800df38:	0018      	movs	r0, r3
 800df3a:	46bd      	mov	sp, r7
 800df3c:	b025      	add	sp, #148	@ 0x94
 800df3e:	bd90      	pop	{r4, r7, pc}
 800df40:	200007d0 	.word	0x200007d0

0800df44 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b094      	sub	sp, #80	@ 0x50
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800df56:	2314      	movs	r3, #20
 800df58:	18f9      	adds	r1, r7, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	223f      	movs	r2, #63	@ 0x3f
 800df5e:	0018      	movs	r0, r3
 800df60:	f002 f84e 	bl	8010000 <_ux_utility_string_length_check>
 800df64:	0003      	movs	r3, r0
 800df66:	647b      	str	r3, [r7, #68]	@ 0x44
    if (status)
 800df68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <_ux_device_stack_class_register+0x2e>
        return(status);
 800df6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df70:	e047      	b.n	800e002 <_ux_device_stack_class_register+0xbe>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800df72:	4b26      	ldr	r3, [pc, #152]	@ (800e00c <_ux_device_stack_class_register+0xc8>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	2380      	movs	r3, #128	@ 0x80
 800df78:	005b      	lsls	r3, r3, #1
 800df7a:	58d3      	ldr	r3, [r2, r3]
 800df7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800df7e:	2300      	movs	r3, #0
 800df80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df82:	e036      	b.n	800dff2 <_ux_device_stack_class_register+0xae>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800df84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d12c      	bne.n	800dfe6 <_ux_device_stack_class_register+0xa2>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800df8c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	0019      	movs	r1, r3
 800df96:	f001 ff7b 	bl	800fe90 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800df9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800dfa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfa4:	655a      	str	r2, [r3, #84]	@ 0x54
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800dfa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	65da      	str	r2, [r3, #92]	@ 0x5c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800dfac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	659a      	str	r2, [r3, #88]	@ 0x58
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800dfb2:	2118      	movs	r1, #24
 800dfb4:	187b      	adds	r3, r7, r1
 800dfb6:	2205      	movs	r2, #5
 800dfb8:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 800dfba:	187b      	adds	r3, r7, r1
 800dfbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfbe:	625a      	str	r2, [r3, #36]	@ 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfc4:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800dfc6:	187a      	adds	r2, r7, r1
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	0010      	movs	r0, r2
 800dfcc:	4798      	blx	r3
 800dfce:	0003      	movs	r3, r0
 800dfd0:	647b      	str	r3, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800dfd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <_ux_device_stack_class_register+0x98>
                return(status);
 800dfd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfda:	e012      	b.n	800e002 <_ux_device_stack_class_register+0xbe>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800dfdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfde:	2201      	movs	r2, #1
 800dfe0:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e00d      	b.n	800e002 <_ux_device_stack_class_register+0xbe>
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 800dfe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfe8:	3364      	adds	r3, #100	@ 0x64
 800dfea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800dfec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfee:	3301      	adds	r3, #1
 800dff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dff2:	4b06      	ldr	r3, [pc, #24]	@ (800e00c <_ux_device_stack_class_register+0xc8>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	22fc      	movs	r2, #252	@ 0xfc
 800dff8:	589b      	ldr	r3, [r3, r2]
 800dffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d3c1      	bcc.n	800df84 <_ux_device_stack_class_register+0x40>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800e000:	2312      	movs	r3, #18
}
 800e002:	0018      	movs	r0, r3
 800e004:	46bd      	mov	sp, r7
 800e006:	b014      	add	sp, #80	@ 0x50
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	200007d0 	.word	0x200007d0

0800e010 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b08a      	sub	sp, #40	@ 0x28
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e01c:	4b2b      	ldr	r3, [pc, #172]	@ (800e0cc <_ux_device_stack_clear_feature+0xbc>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e022:	4b2a      	ldr	r3, [pc, #168]	@ (800e0cc <_ux_device_stack_clear_feature+0xbc>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	3324      	adds	r3, #36	@ 0x24
 800e028:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	3318      	adds	r3, #24
 800e02e:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2203      	movs	r2, #3
 800e034:	4013      	ands	r3, r2
 800e036:	d002      	beq.n	800e03e <_ux_device_stack_clear_feature+0x2e>
 800e038:	2b02      	cmp	r3, #2
 800e03a:	d013      	beq.n	800e064 <_ux_device_stack_clear_feature+0x54>
 800e03c:	e038      	b.n	800e0b0 <_ux_device_stack_clear_feature+0xa0>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d13d      	bne.n	800e0c0 <_ux_device_stack_clear_feature+0xb0>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800e044:	4b21      	ldr	r3, [pc, #132]	@ (800e0cc <_ux_device_stack_clear_feature+0xbc>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	23a6      	movs	r3, #166	@ 0xa6
 800e04a:	005b      	lsls	r3, r3, #1
 800e04c:	58d3      	ldr	r3, [r2, r3]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d006      	beq.n	800e060 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800e052:	4b1e      	ldr	r3, [pc, #120]	@ (800e0cc <_ux_device_stack_clear_feature+0xbc>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	23a8      	movs	r3, #168	@ 0xa8
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	2100      	movs	r1, #0
 800e05c:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800e05e:	e02f      	b.n	800e0c0 <_ux_device_stack_clear_feature+0xb0>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800e060:	2354      	movs	r3, #84	@ 0x54
 800e062:	e02f      	b.n	800e0c4 <_ux_device_stack_clear_feature+0xb4>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	2290      	movs	r2, #144	@ 0x90
 800e068:	589b      	ldr	r3, [r3, r2]
 800e06a:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800e06c:	e01d      	b.n	800e0aa <_ux_device_stack_clear_feature+0x9a>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800e06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800e074:	e013      	b.n	800e09e <_ux_device_stack_clear_feature+0x8e>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	7b9b      	ldrb	r3, [r3, #14]
 800e07a:	001a      	movs	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4293      	cmp	r3, r2
 800e080:	d10a      	bne.n	800e098 <_ux_device_stack_clear_feature+0x88>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	6a3a      	ldr	r2, [r7, #32]
 800e088:	69f8      	ldr	r0, [r7, #28]
 800e08a:	2110      	movs	r1, #16
 800e08c:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800e08e:	6a3b      	ldr	r3, [r7, #32]
 800e090:	2200      	movs	r2, #0
 800e092:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800e094:	2300      	movs	r3, #0
 800e096:	e015      	b.n	800e0c4 <_ux_device_stack_clear_feature+0xb4>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e8      	bne.n	800e076 <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1de      	bne.n	800e06e <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	69f8      	ldr	r0, [r7, #28]
 800e0b8:	2114      	movs	r1, #20
 800e0ba:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e001      	b.n	800e0c4 <_ux_device_stack_clear_feature+0xb4>
        break;
 800e0c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	0018      	movs	r0, r3
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	b00a      	add	sp, #40	@ 0x28
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	200007d0 	.word	0x200007d0

0800e0d0 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e0d6:	4b10      	ldr	r3, [pc, #64]	@ (800e118 <_ux_device_stack_configuration_get+0x48>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3324      	adds	r3, #36	@ 0x24
 800e0dc:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3318      	adds	r3, #24
 800e0e2:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	3320      	adds	r3, #32
 800e0e8:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2280      	movs	r2, #128	@ 0x80
 800e0ee:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800e0f4:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800e0f6:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	2101      	movs	r1, #1
 800e104:	0018      	movs	r0, r3
 800e106:	f001 fa9c 	bl	800f642 <_ux_device_stack_transfer_request>
 800e10a:	0003      	movs	r3, r0
 800e10c:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 800e10e:	683b      	ldr	r3, [r7, #0]
}
 800e110:	0018      	movs	r0, r3
 800e112:	46bd      	mov	sp, r7
 800e114:	b004      	add	sp, #16
 800e116:	bd80      	pop	{r7, pc}
 800e118:	200007d0 	.word	0x200007d0

0800e11c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800e11c:	b590      	push	{r4, r7, lr}
 800e11e:	b0a3      	sub	sp, #140	@ 0x8c
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800e124:	2344      	movs	r3, #68	@ 0x44
 800e126:	18fb      	adds	r3, r7, r3
 800e128:	0018      	movs	r0, r3
 800e12a:	230c      	movs	r3, #12
 800e12c:	001a      	movs	r2, r3
 800e12e:	2100      	movs	r1, #0
 800e130:	f005 fc74 	bl	8013a1c <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800e134:	2300      	movs	r3, #0
 800e136:	677b      	str	r3, [r7, #116]	@ 0x74
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800e138:	2300      	movs	r3, #0
 800e13a:	66fb      	str	r3, [r7, #108]	@ 0x6c
ULONG                           iad_number_interfaces =  0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	66bb      	str	r3, [r7, #104]	@ 0x68

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e140:	4bb6      	ldr	r3, [pc, #728]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e146:	4bb5      	ldr	r3, [pc, #724]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	3324      	adds	r3, #36	@ 0x24
 800e14c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800e14e:	2300      	movs	r3, #0
 800e150:	673b      	str	r3, [r7, #112]	@ 0x70

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800e152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e154:	2280      	movs	r2, #128	@ 0x80
 800e156:	589b      	ldr	r3, [r3, r2]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d101      	bne.n	800e162 <_ux_device_stack_configuration_set+0x46>
        return(UX_SUCCESS);
 800e15e:	2300      	movs	r3, #0
 800e160:	e197      	b.n	800e492 <_ux_device_stack_configuration_set+0x376>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800e162:	4bae      	ldr	r3, [pc, #696]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	22cc      	movs	r2, #204	@ 0xcc
 800e168:	589b      	ldr	r3, [r3, r2]
 800e16a:	2284      	movs	r2, #132	@ 0x84
 800e16c:	18ba      	adds	r2, r7, r2
 800e16e:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800e170:	4baa      	ldr	r3, [pc, #680]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	22d0      	movs	r2, #208	@ 0xd0
 800e176:	589b      	ldr	r3, [r3, r2]
 800e178:	2280      	movs	r2, #128	@ 0x80
 800e17a:	18ba      	adds	r2, r7, r2
 800e17c:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800e17e:	e02a      	b.n	800e1d6 <_ux_device_stack_configuration_set+0xba>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800e180:	2084      	movs	r0, #132	@ 0x84
 800e182:	183b      	adds	r3, r7, r0
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800e18a:	2157      	movs	r1, #87	@ 0x57
 800e18c:	187b      	adds	r3, r7, r1
 800e18e:	183a      	adds	r2, r7, r0
 800e190:	6812      	ldr	r2, [r2, #0]
 800e192:	7852      	ldrb	r2, [r2, #1]
 800e194:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800e196:	187b      	adds	r3, r7, r1
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	d10d      	bne.n	800e1ba <_ux_device_stack_configuration_set+0x9e>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800e19e:	2444      	movs	r4, #68	@ 0x44
 800e1a0:	193b      	adds	r3, r7, r4
 800e1a2:	499f      	ldr	r1, [pc, #636]	@ (800e420 <_ux_device_stack_configuration_set+0x304>)
 800e1a4:	183a      	adds	r2, r7, r0
 800e1a6:	6810      	ldr	r0, [r2, #0]
 800e1a8:	2208      	movs	r2, #8
 800e1aa:	f001 fbe9 	bl	800f980 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800e1ae:	193b      	adds	r3, r7, r4
 800e1b0:	795b      	ldrb	r3, [r3, #5]
 800e1b2:	001a      	movs	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d013      	beq.n	800e1e2 <_ux_device_stack_configuration_set+0xc6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800e1ba:	2180      	movs	r1, #128	@ 0x80
 800e1bc:	187b      	adds	r3, r7, r1
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	187a      	adds	r2, r7, r1
 800e1c6:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800e1c8:	2184      	movs	r1, #132	@ 0x84
 800e1ca:	187b      	adds	r3, r7, r1
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1d0:	18d3      	adds	r3, r2, r3
 800e1d2:	187a      	adds	r2, r7, r1
 800e1d4:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800e1d6:	2380      	movs	r3, #128	@ 0x80
 800e1d8:	18fb      	adds	r3, r7, r3
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1cf      	bne.n	800e180 <_ux_device_stack_configuration_set+0x64>
 800e1e0:	e000      	b.n	800e1e4 <_ux_device_stack_configuration_set+0xc8>
                break;
 800e1e2:	46c0      	nop			@ (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800e1e4:	2380      	movs	r3, #128	@ 0x80
 800e1e6:	18fb      	adds	r3, r7, r3
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d104      	bne.n	800e1f8 <_ux_device_stack_configuration_set+0xdc>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d001      	beq.n	800e1f8 <_ux_device_stack_configuration_set+0xdc>
        return(UX_ERROR);
 800e1f4:	23ff      	movs	r3, #255	@ 0xff
 800e1f6:	e14c      	b.n	800e492 <_ux_device_stack_configuration_set+0x376>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800e1f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1fa:	2280      	movs	r2, #128	@ 0x80
 800e1fc:	589b      	ldr	r3, [r3, r2]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d025      	beq.n	800e24e <_ux_device_stack_configuration_set+0x132>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800e202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e204:	2290      	movs	r2, #144	@ 0x90
 800e206:	589b      	ldr	r3, [r3, r2]
 800e208:	67fb      	str	r3, [r7, #124]	@ 0x7c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800e20a:	e01d      	b.n	800e248 <_ux_device_stack_configuration_set+0x12c>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800e20c:	210c      	movs	r1, #12
 800e20e:	187b      	adds	r3, r7, r1
 800e210:	2203      	movs	r2, #3
 800e212:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800e214:	187b      	adds	r3, r7, r1
 800e216:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e218:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800e21a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	67bb      	str	r3, [r7, #120]	@ 0x78

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800e220:	187b      	adds	r3, r7, r1
 800e222:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e224:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800e226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d004      	beq.n	800e236 <_ux_device_stack_configuration_set+0x11a>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800e22c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e230:	187a      	adds	r2, r7, r1
 800e232:	0010      	movs	r0, r2
 800e234:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800e236:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	653b      	str	r3, [r7, #80]	@ 0x50
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800e23c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e23e:	0018      	movs	r0, r3
 800e240:	f000 ff5c 	bl	800f0fc <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800e244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e246:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (interface_ptr != UX_NULL)
 800e248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1de      	bne.n	800e20c <_ux_device_stack_configuration_set+0xf0>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800e24e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e250:	2280      	movs	r2, #128	@ 0x80
 800e252:	2100      	movs	r1, #0
 800e254:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800e256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e258:	2201      	movs	r2, #1
 800e25a:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800e25c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e262:	2201      	movs	r2, #1
 800e264:	2113      	movs	r1, #19
 800e266:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d101      	bne.n	800e272 <_ux_device_stack_configuration_set+0x156>
        return(UX_SUCCESS);
 800e26e:	2300      	movs	r3, #0
 800e270:	e10f      	b.n	800e492 <_ux_device_stack_configuration_set+0x376>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800e272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e274:	2180      	movs	r1, #128	@ 0x80
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800e27a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e27c:	3384      	adds	r3, #132	@ 0x84
    _ux_utility_descriptor_parse(device_framework,
 800e27e:	4968      	ldr	r1, [pc, #416]	@ (800e420 <_ux_device_stack_configuration_set+0x304>)
 800e280:	2284      	movs	r2, #132	@ 0x84
 800e282:	18ba      	adds	r2, r7, r2
 800e284:	6810      	ldr	r0, [r2, #0]
 800e286:	2208      	movs	r2, #8
 800e288:	f001 fb7a 	bl	800f980 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800e28c:	2344      	movs	r3, #68	@ 0x44
 800e28e:	18fb      	adds	r3, r7, r3
 800e290:	79db      	ldrb	r3, [r3, #7]
 800e292:	001a      	movs	r2, r3
 800e294:	2340      	movs	r3, #64	@ 0x40
 800e296:	4013      	ands	r3, r2
 800e298:	d001      	beq.n	800e29e <_ux_device_stack_configuration_set+0x182>
 800e29a:	2202      	movs	r2, #2
 800e29c:	e000      	b.n	800e2a0 <_ux_device_stack_configuration_set+0x184>
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4b5e      	ldr	r3, [pc, #376]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e2a2:	6819      	ldr	r1, [r3, #0]
 800e2a4:	23a4      	movs	r3, #164	@ 0xa4
 800e2a6:	005b      	lsls	r3, r3, #1
 800e2a8:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800e2aa:	2044      	movs	r0, #68	@ 0x44
 800e2ac:	183b      	adds	r3, r7, r0
 800e2ae:	79db      	ldrb	r3, [r3, #7]
 800e2b0:	115b      	asrs	r3, r3, #5
 800e2b2:	0019      	movs	r1, r3
 800e2b4:	4b59      	ldr	r3, [pc, #356]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	4019      	ands	r1, r3
 800e2bc:	23a6      	movs	r3, #166	@ 0xa6
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800e2c2:	183b      	adds	r3, r7, r0
 800e2c4:	885b      	ldrh	r3, [r3, #2]
 800e2c6:	2280      	movs	r2, #128	@ 0x80
 800e2c8:	18ba      	adds	r2, r7, r2
 800e2ca:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800e2cc:	e0d1      	b.n	800e472 <_ux_device_stack_configuration_set+0x356>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800e2ce:	2184      	movs	r1, #132	@ 0x84
 800e2d0:	187b      	adds	r3, r7, r1
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800e2d8:	2057      	movs	r0, #87	@ 0x57
 800e2da:	183b      	adds	r3, r7, r0
 800e2dc:	187a      	adds	r2, r7, r1
 800e2de:	6812      	ldr	r2, [r2, #0]
 800e2e0:	7852      	ldrb	r2, [r2, #1]
 800e2e2:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800e2e4:	183b      	adds	r3, r7, r0
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b0b      	cmp	r3, #11
 800e2ea:	d10b      	bne.n	800e304 <_ux_device_stack_configuration_set+0x1e8>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	673b      	str	r3, [r7, #112]	@ 0x70

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800e2f0:	187b      	adds	r3, r7, r1
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	3302      	adds	r3, #2
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800e2fa:	187b      	adds	r3, r7, r1
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3303      	adds	r3, #3
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	66bb      	str	r3, [r7, #104]	@ 0x68
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800e304:	2357      	movs	r3, #87	@ 0x57
 800e306:	18fb      	adds	r3, r7, r3
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	2b04      	cmp	r3, #4
 800e30c:	d000      	beq.n	800e310 <_ux_device_stack_configuration_set+0x1f4>
 800e30e:	e0a2      	b.n	800e456 <_ux_device_stack_configuration_set+0x33a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800e310:	2438      	movs	r4, #56	@ 0x38
 800e312:	193b      	adds	r3, r7, r4
 800e314:	4943      	ldr	r1, [pc, #268]	@ (800e424 <_ux_device_stack_configuration_set+0x308>)
 800e316:	2284      	movs	r2, #132	@ 0x84
 800e318:	18ba      	adds	r2, r7, r2
 800e31a:	6810      	ldr	r0, [r2, #0]
 800e31c:	2209      	movs	r2, #9
 800e31e:	f001 fb2f 	bl	800f980 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800e322:	0022      	movs	r2, r4
 800e324:	18bb      	adds	r3, r7, r2
 800e326:	78db      	ldrb	r3, [r3, #3]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d000      	beq.n	800e32e <_ux_device_stack_configuration_set+0x212>
 800e32c:	e093      	b.n	800e456 <_ux_device_stack_configuration_set+0x33a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800e32e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e330:	2b01      	cmp	r3, #1
 800e332:	d14e      	bne.n	800e3d2 <_ux_device_stack_configuration_set+0x2b6>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800e334:	18bb      	adds	r3, r7, r2
 800e336:	789b      	ldrb	r3, [r3, #2]
 800e338:	001a      	movs	r2, r3
 800e33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d134      	bne.n	800e3aa <_ux_device_stack_configuration_set+0x28e>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800e340:	4b36      	ldr	r3, [pc, #216]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	2380      	movs	r3, #128	@ 0x80
 800e346:	005b      	lsls	r3, r3, #1
 800e348:	58d3      	ldr	r3, [r2, r3]
 800e34a:	67bb      	str	r3, [r7, #120]	@ 0x78

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800e34c:	2300      	movs	r3, #0
 800e34e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e350:	e023      	b.n	800e39a <_ux_device_stack_configuration_set+0x27e>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800e352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e356:	2b01      	cmp	r3, #1
 800e358:	d119      	bne.n	800e38e <_ux_device_stack_configuration_set+0x272>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800e35a:	2138      	movs	r1, #56	@ 0x38
 800e35c:	187b      	adds	r3, r7, r1
 800e35e:	789b      	ldrb	r3, [r3, #2]
 800e360:	001a      	movs	r2, r3
 800e362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e366:	429a      	cmp	r2, r3
 800e368:	d111      	bne.n	800e38e <_ux_device_stack_configuration_set+0x272>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800e36a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e36c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	429a      	cmp	r2, r3
 800e372:	d10c      	bne.n	800e38e <_ux_device_stack_configuration_set+0x272>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800e374:	4b29      	ldr	r3, [pc, #164]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	187b      	adds	r3, r7, r1
 800e37a:	789b      	ldrb	r3, [r3, #2]
 800e37c:	3340      	adds	r3, #64	@ 0x40
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	18d3      	adds	r3, r2, r3
 800e382:	3304      	adds	r3, #4
 800e384:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e386:	601a      	str	r2, [r3, #0]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800e388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e38a:	677b      	str	r3, [r7, #116]	@ 0x74

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 800e38c:	e018      	b.n	800e3c0 <_ux_device_stack_configuration_set+0x2a4>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 800e38e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e390:	3364      	adds	r3, #100	@ 0x64
 800e392:	67bb      	str	r3, [r7, #120]	@ 0x78
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800e394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e396:	3301      	adds	r3, #1
 800e398:	667b      	str	r3, [r7, #100]	@ 0x64
 800e39a:	4b20      	ldr	r3, [pc, #128]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	22fc      	movs	r2, #252	@ 0xfc
 800e3a0:	589b      	ldr	r3, [r3, r2]
 800e3a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d3d4      	bcc.n	800e352 <_ux_device_stack_configuration_set+0x236>
 800e3a8:	e00a      	b.n	800e3c0 <_ux_device_stack_configuration_set+0x2a4>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800e3aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	2338      	movs	r3, #56	@ 0x38
 800e3b0:	18fb      	adds	r3, r7, r3
 800e3b2:	789b      	ldrb	r3, [r3, #2]
 800e3b4:	3340      	adds	r3, #64	@ 0x40
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	18d3      	adds	r3, r2, r3
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e3be:	601a      	str	r2, [r3, #0]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800e3c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800e3c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d13a      	bne.n	800e442 <_ux_device_stack_configuration_set+0x326>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800e3d0:	e037      	b.n	800e442 <_ux_device_stack_configuration_set+0x326>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800e3d2:	4b12      	ldr	r3, [pc, #72]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	2380      	movs	r3, #128	@ 0x80
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	58d3      	ldr	r3, [r2, r3]
 800e3dc:	67bb      	str	r3, [r7, #120]	@ 0x78

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800e3de:	2300      	movs	r3, #0
 800e3e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3e2:	e027      	b.n	800e434 <_ux_device_stack_configuration_set+0x318>
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800e3e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d11d      	bne.n	800e428 <_ux_device_stack_configuration_set+0x30c>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800e3ec:	2138      	movs	r1, #56	@ 0x38
 800e3ee:	187b      	adds	r3, r7, r1
 800e3f0:	789b      	ldrb	r3, [r3, #2]
 800e3f2:	001a      	movs	r2, r3
 800e3f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d115      	bne.n	800e428 <_ux_device_stack_configuration_set+0x30c>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800e3fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	429a      	cmp	r2, r3
 800e404:	d110      	bne.n	800e428 <_ux_device_stack_configuration_set+0x30c>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800e406:	4b05      	ldr	r3, [pc, #20]	@ (800e41c <_ux_device_stack_configuration_set+0x300>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	187b      	adds	r3, r7, r1
 800e40c:	789b      	ldrb	r3, [r3, #2]
 800e40e:	3340      	adds	r3, #64	@ 0x40
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	18d3      	adds	r3, r2, r3
 800e414:	3304      	adds	r3, #4
 800e416:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e418:	601a      	str	r2, [r3, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 800e41a:	e012      	b.n	800e442 <_ux_device_stack_configuration_set+0x326>
 800e41c:	200007d0 	.word	0x200007d0
 800e420:	20000038 	.word	0x20000038
 800e424:	20000040 	.word	0x20000040
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 800e428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e42a:	3364      	adds	r3, #100	@ 0x64
 800e42c:	67bb      	str	r3, [r7, #120]	@ 0x78
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800e42e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e430:	3301      	adds	r3, #1
 800e432:	667b      	str	r3, [r7, #100]	@ 0x64
 800e434:	4b19      	ldr	r3, [pc, #100]	@ (800e49c <_ux_device_stack_configuration_set+0x380>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	22fc      	movs	r2, #252	@ 0xfc
 800e43a:	589b      	ldr	r3, [r3, r2]
 800e43c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e43e:	429a      	cmp	r2, r3
 800e440:	d3d0      	bcc.n	800e3e4 <_ux_device_stack_configuration_set+0x2c8>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800e442:	2380      	movs	r3, #128	@ 0x80
 800e444:	18fb      	adds	r3, r7, r3
 800e446:	6819      	ldr	r1, [r3, #0]
 800e448:	2384      	movs	r3, #132	@ 0x84
 800e44a:	18fb      	adds	r3, r7, r3
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2200      	movs	r2, #0
 800e450:	0018      	movs	r0, r3
 800e452:	f000 fe9b 	bl	800f18c <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800e456:	2180      	movs	r1, #128	@ 0x80
 800e458:	187b      	adds	r3, r7, r1
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	187a      	adds	r2, r7, r1
 800e462:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800e464:	2184      	movs	r1, #132	@ 0x84
 800e466:	187b      	adds	r3, r7, r1
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e46c:	18d3      	adds	r3, r2, r3
 800e46e:	187a      	adds	r2, r7, r1
 800e470:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800e472:	2380      	movs	r3, #128	@ 0x80
 800e474:	18fb      	adds	r3, r7, r3
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d000      	beq.n	800e47e <_ux_device_stack_configuration_set+0x362>
 800e47c:	e727      	b.n	800e2ce <_ux_device_stack_configuration_set+0x1b2>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800e47e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e480:	2203      	movs	r2, #3
 800e482:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800e484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e486:	699b      	ldr	r3, [r3, #24]
 800e488:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e48a:	2203      	movs	r2, #3
 800e48c:	2113      	movs	r1, #19
 800e48e:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800e490:	2300      	movs	r3, #0
}
 800e492:	0018      	movs	r0, r3
 800e494:	46bd      	mov	sp, r7
 800e496:	b023      	add	sp, #140	@ 0x8c
 800e498:	bd90      	pop	{r4, r7, pc}
 800e49a:	46c0      	nop			@ (mov r8, r8)
 800e49c:	200007d0 	.word	0x200007d0

0800e4a0 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800e4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4a2:	b09d      	sub	sp, #116	@ 0x74
 800e4a4:	af02      	add	r7, sp, #8
 800e4a6:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800e4a8:	23ff      	movs	r3, #255	@ 0xff
 800e4aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e4ac:	4ba7      	ldr	r3, [pc, #668]	@ (800e74c <_ux_device_stack_control_request_process+0x2ac>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e4b2:	4ba6      	ldr	r3, [pc, #664]	@ (800e74c <_ux_device_stack_control_request_process+0x2ac>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3324      	adds	r3, #36	@ 0x24
 800e4b8:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d000      	beq.n	800e4c4 <_ux_device_stack_control_request_process+0x24>
 800e4c2:	e13d      	b.n	800e740 <_ux_device_stack_control_request_process+0x2a0>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	223c      	movs	r2, #60	@ 0x3c
 800e4c8:	5c9b      	ldrb	r3, [r3, r2]
 800e4ca:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	223d      	movs	r2, #61	@ 0x3d
 800e4d0:	5c9b      	ldrb	r3, [r3, r2]
 800e4d2:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	333c      	adds	r3, #60	@ 0x3c
 800e4d8:	3302      	adds	r3, #2
 800e4da:	0018      	movs	r0, r3
 800e4dc:	f001 fd76 	bl	800ffcc <_ux_utility_short_get>
 800e4e0:	0003      	movs	r3, r0
 800e4e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	333c      	adds	r3, #60	@ 0x3c
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f001 fd6e 	bl	800ffcc <_ux_utility_short_get>
 800e4f0:	0003      	movs	r3, r0
 800e4f2:	64bb      	str	r3, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	333c      	adds	r3, #60	@ 0x3c
 800e4f8:	3306      	adds	r3, #6
 800e4fa:	0018      	movs	r0, r3
 800e4fc:	f001 fd66 	bl	800ffcc <_ux_utility_short_get>
 800e500:	0003      	movs	r3, r0
 800e502:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800e504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e506:	2b06      	cmp	r3, #6
 800e508:	d002      	beq.n	800e510 <_ux_device_stack_control_request_process+0x70>
 800e50a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e50c:	2b07      	cmp	r3, #7
 800e50e:	d10c      	bne.n	800e52a <_ux_device_stack_control_request_process+0x8a>
 800e510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e512:	0a1b      	lsrs	r3, r3, #8
 800e514:	2260      	movs	r2, #96	@ 0x60
 800e516:	4013      	ands	r3, r2
 800e518:	d007      	beq.n	800e52a <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800e51a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e51c:	2260      	movs	r2, #96	@ 0x60
 800e51e:	4393      	bics	r3, r2
 800e520:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800e522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e524:	2220      	movs	r2, #32
 800e526:	4313      	orrs	r3, r2
 800e528:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800e52a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e52c:	2260      	movs	r2, #96	@ 0x60
 800e52e:	4013      	ands	r3, r2
 800e530:	2b40      	cmp	r3, #64	@ 0x40
 800e532:	d140      	bne.n	800e5b6 <_ux_device_stack_control_request_process+0x116>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800e534:	4b85      	ldr	r3, [pc, #532]	@ (800e74c <_ux_device_stack_control_request_process+0x2ac>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	23b8      	movs	r3, #184	@ 0xb8
 800e53a:	005b      	lsls	r3, r3, #1
 800e53c:	58d3      	ldr	r3, [r2, r3]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d039      	beq.n	800e5b6 <_ux_device_stack_control_request_process+0x116>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800e542:	4b82      	ldr	r3, [pc, #520]	@ (800e74c <_ux_device_stack_control_request_process+0x2ac>)
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	23b6      	movs	r3, #182	@ 0xb6
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	58d3      	ldr	r3, [r2, r3]
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800e54c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e54e:	429a      	cmp	r2, r3
 800e550:	d131      	bne.n	800e5b6 <_ux_device_stack_control_request_process+0x116>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800e552:	2380      	movs	r3, #128	@ 0x80
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800e558:	4b7c      	ldr	r3, [pc, #496]	@ (800e74c <_ux_device_stack_control_request_process+0x2ac>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	23b8      	movs	r3, #184	@ 0xb8
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	58d4      	ldr	r4, [r2, r3]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
 800e568:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800e56a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e56c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e56e:	220c      	movs	r2, #12
 800e570:	18ba      	adds	r2, r7, r2
 800e572:	9201      	str	r2, [sp, #4]
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	0033      	movs	r3, r6
 800e578:	002a      	movs	r2, r5
 800e57a:	47a0      	blx	r4
 800e57c:	0003      	movs	r3, r0
 800e57e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800e580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e582:	2b00      	cmp	r3, #0
 800e584:	d110      	bne.n	800e5a8 <_ux_device_stack_control_request_process+0x108>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e588:	3318      	adds	r3, #24
 800e58a:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e58c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e58e:	3320      	adds	r3, #32
 800e590:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2203      	movs	r2, #3
 800e596:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800e598:	68f9      	ldr	r1, [r7, #12]
 800e59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	0018      	movs	r0, r3
 800e5a0:	f001 f84f 	bl	800f642 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	e0cc      	b.n	800e742 <_ux_device_stack_control_request_process+0x2a2>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800e5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5aa:	3318      	adds	r3, #24
 800e5ac:	0018      	movs	r0, r3
 800e5ae:	f000 fb47 	bl	800ec40 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e0c5      	b.n	800e742 <_ux_device_stack_control_request_process+0x2a2>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800e5b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5b8:	2260      	movs	r2, #96	@ 0x60
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	2b20      	cmp	r3, #32
 800e5be:	d004      	beq.n	800e5ca <_ux_device_stack_control_request_process+0x12a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800e5c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5c2:	2260      	movs	r2, #96	@ 0x60
 800e5c4:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800e5c6:	2b40      	cmp	r3, #64	@ 0x40
 800e5c8:	d154      	bne.n	800e674 <_ux_device_stack_control_request_process+0x1d4>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800e5ca:	2310      	movs	r3, #16
 800e5cc:	18fb      	adds	r3, r7, r3
 800e5ce:	2204      	movs	r2, #4
 800e5d0:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5d6:	e03e      	b.n	800e656 <_ux_device_stack_control_request_process+0x1b6>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800e5d8:	4b5c      	ldr	r3, [pc, #368]	@ (800e74c <_ux_device_stack_control_request_process+0x2ac>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5de:	3340      	adds	r3, #64	@ 0x40
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	18d3      	adds	r3, r2, r3
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800e5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d02c      	beq.n	800e64a <_ux_device_stack_control_request_process+0x1aa>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800e5f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5f2:	2203      	movs	r2, #3
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d118      	bne.n	800e62c <_ux_device_stack_control_request_process+0x18c>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800e5fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5fc:	2ba1      	cmp	r3, #161	@ 0xa1
 800e5fe:	d10f      	bne.n	800e620 <_ux_device_stack_control_request_process+0x180>
 800e600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10c      	bne.n	800e620 <_ux_device_stack_control_request_process+0x180>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 800e606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e60a:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	d107      	bne.n	800e620 <_ux_device_stack_control_request_process+0x180>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2241      	movs	r2, #65	@ 0x41
 800e614:	5c9b      	ldrb	r3, [r3, r2]
 800e616:	001a      	movs	r2, r3
 800e618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d006      	beq.n	800e62c <_ux_device_stack_control_request_process+0x18c>
                            continue;
 800e61e:	e017      	b.n	800e650 <_ux_device_stack_control_request_process+0x1b0>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 800e620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e622:	22ff      	movs	r2, #255	@ 0xff
 800e624:	4013      	ands	r3, r2
 800e626:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e628:	429a      	cmp	r2, r3
 800e62a:	d110      	bne.n	800e64e <_ux_device_stack_control_request_process+0x1ae>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800e62c:	2110      	movs	r1, #16
 800e62e:	187b      	adds	r3, r7, r1
 800e630:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e632:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800e634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e638:	187a      	adds	r2, r7, r1
 800e63a:	0010      	movs	r0, r2
 800e63c:	4798      	blx	r3
 800e63e:	0003      	movs	r3, r0
 800e640:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800e642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00a      	beq.n	800e65e <_ux_device_stack_control_request_process+0x1be>
 800e648:	e002      	b.n	800e650 <_ux_device_stack_control_request_process+0x1b0>
                    continue;
 800e64a:	46c0      	nop			@ (mov r8, r8)
 800e64c:	e000      	b.n	800e650 <_ux_device_stack_control_request_process+0x1b0>
                            continue;
 800e64e:	46c0      	nop			@ (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800e650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e652:	3301      	adds	r3, #1
 800e654:	663b      	str	r3, [r7, #96]	@ 0x60
 800e656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e658:	2b0f      	cmp	r3, #15
 800e65a:	d9bd      	bls.n	800e5d8 <_ux_device_stack_control_request_process+0x138>
 800e65c:	e000      	b.n	800e660 <_ux_device_stack_control_request_process+0x1c0>

                    /* We are done, break the loop!  */
                    break;
 800e65e:	46c0      	nop			@ (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800e660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <_ux_device_stack_control_request_process+0x1d0>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800e666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e668:	3318      	adds	r3, #24
 800e66a:	0018      	movs	r0, r3
 800e66c:	f000 fae8 	bl	800ec40 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800e670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e672:	e066      	b.n	800e742 <_ux_device_stack_control_request_process+0x2a2>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800e674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e676:	2b0c      	cmp	r3, #12
 800e678:	d857      	bhi.n	800e72a <_ux_device_stack_control_request_process+0x28a>
 800e67a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e67c:	009a      	lsls	r2, r3, #2
 800e67e:	4b34      	ldr	r3, [pc, #208]	@ (800e750 <_ux_device_stack_control_request_process+0x2b0>)
 800e680:	18d3      	adds	r3, r2, r3
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800e686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e688:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e68a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e68c:	0018      	movs	r0, r3
 800e68e:	f000 fb09 	bl	800eca4 <_ux_device_stack_get_status>
 800e692:	0003      	movs	r3, r0
 800e694:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e696:	e04b      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800e698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e69a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e69c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e69e:	0018      	movs	r0, r3
 800e6a0:	f7ff fcb6 	bl	800e010 <_ux_device_stack_clear_feature>
 800e6a4:	0003      	movs	r3, r0
 800e6a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e6a8:	e042      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800e6aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e6ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6b0:	0018      	movs	r0, r3
 800e6b2:	f000 fee7 	bl	800f484 <_ux_device_stack_set_feature>
 800e6b6:	0003      	movs	r3, r0
 800e6b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e6ba:	e039      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800e6bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6c0:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800e6c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e6ca:	2111      	movs	r1, #17
 800e6cc:	4798      	blx	r3
 800e6ce:	0003      	movs	r3, r0
 800e6d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e6d2:	e02d      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800e6d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6d6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6da:	0018      	movs	r0, r3
 800e6dc:	f000 f83a 	bl	800e754 <_ux_device_stack_descriptor_send>
 800e6e0:	0003      	movs	r3, r0
 800e6e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e6e4:	e024      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800e6e6:	2354      	movs	r3, #84	@ 0x54
 800e6e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e6ea:	e021      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800e6ec:	f7ff fcf0 	bl	800e0d0 <_ux_device_stack_configuration_get>
 800e6f0:	0003      	movs	r3, r0
 800e6f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e6f4:	e01c      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800e6f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6f8:	0018      	movs	r0, r3
 800e6fa:	f7ff fd0f 	bl	800e11c <_ux_device_stack_configuration_set>
 800e6fe:	0003      	movs	r3, r0
 800e700:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e702:	e015      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800e704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e706:	0018      	movs	r0, r3
 800e708:	f7ff f9a2 	bl	800da50 <_ux_device_stack_alternate_setting_get>
 800e70c:	0003      	movs	r3, r0
 800e70e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e710:	e00e      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800e712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e716:	0011      	movs	r1, r2
 800e718:	0018      	movs	r0, r3
 800e71a:	f7ff f9d9 	bl	800dad0 <_ux_device_stack_alternate_setting_set>
 800e71e:	0003      	movs	r3, r0
 800e720:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e722:	e005      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800e724:	2300      	movs	r3, #0
 800e726:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e728:	e002      	b.n	800e730 <_ux_device_stack_control_request_process+0x290>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800e72a:	2354      	movs	r3, #84	@ 0x54
 800e72c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e72e:	46c0      	nop			@ (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 800e730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e732:	2b00      	cmp	r3, #0
 800e734:	d004      	beq.n	800e740 <_ux_device_stack_control_request_process+0x2a0>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800e736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e738:	3318      	adds	r3, #24
 800e73a:	0018      	movs	r0, r3
 800e73c:	f000 fa80 	bl	800ec40 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800e740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800e742:	0018      	movs	r0, r3
 800e744:	46bd      	mov	sp, r7
 800e746:	b01b      	add	sp, #108	@ 0x6c
 800e748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e74a:	46c0      	nop			@ (mov r8, r8)
 800e74c:	200007d0 	.word	0x200007d0
 800e750:	08015c28 	.word	0x08015c28

0800e754 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800e754:	b590      	push	{r4, r7, lr}
 800e756:	b09b      	sub	sp, #108	@ 0x6c
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800e760:	2300      	movs	r3, #0
 800e762:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 800e764:	23ff      	movs	r3, #255	@ 0xff
 800e766:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e768:	4bcd      	ldr	r3, [pc, #820]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e76e:	4bcc      	ldr	r3, [pc, #816]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3324      	adds	r3, #36	@ 0x24
 800e774:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e778:	3318      	adds	r3, #24
 800e77a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e77e:	3320      	adds	r3, #32
 800e780:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e784:	2203      	movs	r2, #3
 800e786:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	22ff      	movs	r2, #255	@ 0xff
 800e78c:	4013      	ands	r3, r2
 800e78e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800e790:	2300      	movs	r3, #0
 800e792:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	0a1b      	lsrs	r3, r3, #8
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b0f      	cmp	r3, #15
 800e7a4:	d900      	bls.n	800e7a8 <_ux_device_stack_descriptor_send+0x54>
 800e7a6:	e1d8      	b.n	800eb5a <_ux_device_stack_descriptor_send+0x406>
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	009a      	lsls	r2, r3, #2
 800e7ac:	4bbd      	ldr	r3, [pc, #756]	@ (800eaa4 <_ux_device_stack_descriptor_send+0x350>)
 800e7ae:	18d3      	adds	r3, r2, r3
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b12      	cmp	r3, #18
 800e7b8:	d901      	bls.n	800e7be <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800e7ba:	2312      	movs	r3, #18
 800e7bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b06      	cmp	r3, #6
 800e7c2:	d104      	bne.n	800e7ce <_ux_device_stack_descriptor_send+0x7a>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b0a      	cmp	r3, #10
 800e7c8:	d901      	bls.n	800e7ce <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800e7ca:	230a      	movs	r3, #10
 800e7cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2b09      	cmp	r3, #9
 800e7d2:	d104      	bne.n	800e7de <_ux_device_stack_descriptor_send+0x8a>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b05      	cmp	r3, #5
 800e7d8:	d901      	bls.n	800e7de <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800e7da:	2305      	movs	r3, #5
 800e7dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800e7de:	4bb0      	ldr	r3, [pc, #704]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	22cc      	movs	r2, #204	@ 0xcc
 800e7e4:	589b      	ldr	r3, [r3, r2]
 800e7e6:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800e7e8:	4bad      	ldr	r3, [pc, #692]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	22d0      	movs	r2, #208	@ 0xd0
 800e7ee:	589b      	ldr	r3, [r3, r2]
 800e7f0:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800e7f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7f6:	18d3      	adds	r3, r2, r3
 800e7f8:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800e7fa:	e022      	b.n	800e842 <_ux_device_stack_descriptor_send+0xee>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800e7fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800e802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e804:	3301      	adds	r3, #1
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	001a      	movs	r2, r3
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d110      	bne.n	800e832 <_ux_device_stack_descriptor_send+0xde>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800e810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e816:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e818:	0018      	movs	r0, r3
 800e81a:	f001 fb39 	bl	800fe90 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e824:	0018      	movs	r0, r3
 800e826:	f000 ff0c 	bl	800f642 <_ux_device_stack_transfer_request>
 800e82a:	0003      	movs	r3, r0
 800e82c:	653b      	str	r3, [r7, #80]	@ 0x50
                break;
 800e82e:	46c0      	nop			@ (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800e830:	e19e      	b.n	800eb70 <_ux_device_stack_descriptor_send+0x41c>
            device_framework_length -=  descriptor_length;
 800e832:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800e83a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e83e:	18d3      	adds	r3, r2, r3
 800e840:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800e842:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e846:	429a      	cmp	r2, r3
 800e848:	d3d8      	bcc.n	800e7fc <_ux_device_stack_descriptor_send+0xa8>
        break;
 800e84a:	e191      	b.n	800eb70 <_ux_device_stack_descriptor_send+0x41c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b07      	cmp	r3, #7
 800e850:	d10e      	bne.n	800e870 <_ux_device_stack_descriptor_send+0x11c>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800e852:	4b93      	ldr	r3, [pc, #588]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	22d4      	movs	r2, #212	@ 0xd4
 800e858:	589b      	ldr	r3, [r3, r2]
 800e85a:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800e85c:	4b90      	ldr	r3, [pc, #576]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	22d8      	movs	r2, #216	@ 0xd8
 800e862:	589b      	ldr	r3, [r3, r2]
 800e864:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800e866:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e86a:	18d3      	adds	r3, r2, r3
 800e86c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e86e:	e047      	b.n	800e900 <_ux_device_stack_descriptor_send+0x1ac>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800e870:	4b8b      	ldr	r3, [pc, #556]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	22cc      	movs	r2, #204	@ 0xcc
 800e876:	589b      	ldr	r3, [r3, r2]
 800e878:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800e87a:	4b89      	ldr	r3, [pc, #548]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	22d0      	movs	r2, #208	@ 0xd0
 800e880:	589b      	ldr	r3, [r3, r2]
 800e882:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800e884:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e888:	18d3      	adds	r3, r2, r3
 800e88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800e88c:	e038      	b.n	800e900 <_ux_device_stack_descriptor_send+0x1ac>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800e88e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d111      	bne.n	800e8be <_ux_device_stack_descriptor_send+0x16a>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800e89a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e89c:	3301      	adds	r3, #1
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	2b0f      	cmp	r3, #15
 800e8a2:	d125      	bne.n	800e8f0 <_ux_device_stack_descriptor_send+0x19c>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800e8a4:	2410      	movs	r4, #16
 800e8a6:	193b      	adds	r3, r7, r4
 800e8a8:	497f      	ldr	r1, [pc, #508]	@ (800eaa8 <_ux_device_stack_descriptor_send+0x354>)
 800e8aa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e8ac:	2204      	movs	r2, #4
 800e8ae:	f001 f867 	bl	800f980 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800e8b2:	193b      	adds	r3, r7, r4
 800e8b4:	885b      	ldrh	r3, [r3, #2]
 800e8b6:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800e8bc:	e024      	b.n	800e908 <_ux_device_stack_descriptor_send+0x1b4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800e8be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d113      	bne.n	800e8f0 <_ux_device_stack_descriptor_send+0x19c>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800e8c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d10c      	bne.n	800e8ea <_ux_device_stack_descriptor_send+0x196>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800e8d0:	2418      	movs	r4, #24
 800e8d2:	193b      	adds	r3, r7, r4
 800e8d4:	4975      	ldr	r1, [pc, #468]	@ (800eaac <_ux_device_stack_descriptor_send+0x358>)
 800e8d6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e8d8:	2208      	movs	r2, #8
 800e8da:	f001 f851 	bl	800f980 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800e8de:	193b      	adds	r3, r7, r4
 800e8e0:	885b      	ldrh	r3, [r3, #2]
 800e8e2:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800e8e8:	e00e      	b.n	800e908 <_ux_device_stack_descriptor_send+0x1b4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800e8ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800e8f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800e8f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fc:	18d3      	adds	r3, r2, r3
 800e8fe:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800e900:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e904:	429a      	cmp	r2, r3
 800e906:	d3c2      	bcc.n	800e88e <_ux_device_stack_descriptor_send+0x13a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800e908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d000      	beq.n	800e910 <_ux_device_stack_descriptor_send+0x1bc>
 800e90e:	e12c      	b.n	800eb6a <_ux_device_stack_descriptor_send+0x416>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800e910:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	429a      	cmp	r2, r3
 800e916:	d202      	bcs.n	800e91e <_ux_device_stack_descriptor_send+0x1ca>
                length =  target_descriptor_length;
 800e918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e91c:	e001      	b.n	800e922 <_ux_device_stack_descriptor_send+0x1ce>
            else
                length =  host_length;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e924:	2380      	movs	r3, #128	@ 0x80
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	429a      	cmp	r2, r3
 800e92a:	d90d      	bls.n	800e948 <_ux_device_stack_descriptor_send+0x1f4>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800e92c:	2212      	movs	r2, #18
 800e92e:	2109      	movs	r1, #9
 800e930:	2002      	movs	r0, #2
 800e932:	f000 ff51 	bl	800f7d8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e93c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e93e:	2114      	movs	r1, #20
 800e940:	4798      	blx	r3
 800e942:	0003      	movs	r3, r0
 800e944:	653b      	str	r3, [r7, #80]	@ 0x50
                break;
 800e946:	e113      	b.n	800eb70 <_ux_device_stack_descriptor_send+0x41c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800e948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e94e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e950:	0018      	movs	r0, r3
 800e952:	f001 fa9d 	bl	800fe90 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800e956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	3301      	adds	r3, #1
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	b2d2      	uxtb	r2, r2
 800e960:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e968:	0018      	movs	r0, r3
 800e96a:	f000 fe6a 	bl	800f642 <_ux_device_stack_transfer_request>
 800e96e:	0003      	movs	r3, r0
 800e970:	653b      	str	r3, [r7, #80]	@ 0x50
        }
        break;
 800e972:	e0fa      	b.n	800eb6a <_ux_device_stack_descriptor_send+0x416>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800e974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d14d      	bne.n	800ea16 <_ux_device_stack_descriptor_send+0x2c2>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e97a:	4b49      	ldr	r3, [pc, #292]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	22f0      	movs	r2, #240	@ 0xf0
 800e980:	589b      	ldr	r3, [r3, r2]
 800e982:	1c9a      	adds	r2, r3, #2
 800e984:	2380      	movs	r3, #128	@ 0x80
 800e986:	005b      	lsls	r3, r3, #1
 800e988:	429a      	cmp	r2, r3
 800e98a:	d90d      	bls.n	800e9a8 <_ux_device_stack_descriptor_send+0x254>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800e98c:	2212      	movs	r2, #18
 800e98e:	2109      	movs	r1, #9
 800e990:	2002      	movs	r0, #2
 800e992:	f000 ff21 	bl	800f7d8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e998:	699b      	ldr	r3, [r3, #24]
 800e99a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e99c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e99e:	2114      	movs	r1, #20
 800e9a0:	4798      	blx	r3
 800e9a2:	0003      	movs	r3, r0
 800e9a4:	653b      	str	r3, [r7, #80]	@ 0x50
                break;
 800e9a6:	e0e3      	b.n	800eb70 <_ux_device_stack_descriptor_send+0x41c>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800e9ae:	4b3c      	ldr	r3, [pc, #240]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	22f0      	movs	r2, #240	@ 0xf0
 800e9b4:	589b      	ldr	r3, [r3, r2]
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	3302      	adds	r3, #2
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9be:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	2203      	movs	r2, #3
 800e9c6:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800e9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ca:	1c98      	adds	r0, r3, #2
 800e9cc:	4b34      	ldr	r3, [pc, #208]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	22ec      	movs	r2, #236	@ 0xec
 800e9d2:	5899      	ldr	r1, [r3, r2]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800e9d4:	4b32      	ldr	r3, [pc, #200]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800e9d8:	22f0      	movs	r2, #240	@ 0xf0
 800e9da:	589b      	ldr	r3, [r3, r2]
 800e9dc:	001a      	movs	r2, r3
 800e9de:	f001 fa57 	bl	800fe90 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800e9e2:	4b2f      	ldr	r3, [pc, #188]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	22f0      	movs	r2, #240	@ 0xf0
 800e9e8:	589b      	ldr	r3, [r3, r2]
 800e9ea:	3302      	adds	r3, #2
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d906      	bls.n	800ea00 <_ux_device_stack_descriptor_send+0x2ac>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800e9f2:	4b2b      	ldr	r3, [pc, #172]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	22f0      	movs	r2, #240	@ 0xf0
 800e9f8:	589b      	ldr	r3, [r3, r2]
 800e9fa:	3302      	adds	r3, #2
 800e9fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9fe:	e001      	b.n	800ea04 <_ux_device_stack_descriptor_send+0x2b0>
            else
                length =  host_length;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ea08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea0a:	0018      	movs	r0, r3
 800ea0c:	f000 fe19 	bl	800f642 <_ux_device_stack_transfer_request>
 800ea10:	0003      	movs	r3, r0
 800ea12:	653b      	str	r3, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800ea14:	e0ab      	b.n	800eb6e <_ux_device_stack_descriptor_send+0x41a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800ea16:	4b22      	ldr	r3, [pc, #136]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	22e4      	movs	r2, #228	@ 0xe4
 800ea1c:	589b      	ldr	r3, [r3, r2]
 800ea1e:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800ea20:	4b1f      	ldr	r3, [pc, #124]	@ (800eaa0 <_ux_device_stack_descriptor_send+0x34c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	22e8      	movs	r2, #232	@ 0xe8
 800ea26:	589b      	ldr	r3, [r3, r2]
 800ea28:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800ea2a:	e087      	b.n	800eb3c <_ux_device_stack_descriptor_send+0x3e8>
                if (_ux_utility_short_get(string_framework) == request_index)
 800ea2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea2e:	0018      	movs	r0, r3
 800ea30:	f001 facc 	bl	800ffcc <_ux_utility_short_get>
 800ea34:	0002      	movs	r2, r0
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d170      	bne.n	800eb1e <_ux_device_stack_descriptor_send+0x3ca>
                    if (*(string_framework + 2) == descriptor_index)
 800ea3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea3e:	3302      	adds	r3, #2
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	001a      	movs	r2, r3
 800ea44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d169      	bne.n	800eb1e <_ux_device_stack_descriptor_send+0x3ca>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800ea4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea4c:	3303      	adds	r3, #3
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	3301      	adds	r3, #1
 800ea52:	005a      	lsls	r2, r3, #1
 800ea54:	2380      	movs	r3, #128	@ 0x80
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	dd0d      	ble.n	800ea78 <_ux_device_stack_descriptor_send+0x324>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800ea5c:	2212      	movs	r2, #18
 800ea5e:	2109      	movs	r1, #9
 800ea60:	2002      	movs	r0, #2
 800ea62:	f000 feb9 	bl	800f7d8 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ea66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ea6e:	2114      	movs	r1, #20
 800ea70:	4798      	blx	r3
 800ea72:	0003      	movs	r3, r0
 800ea74:	653b      	str	r3, [r7, #80]	@ 0x50
                            break;
 800ea76:	e065      	b.n	800eb44 <_ux_device_stack_descriptor_send+0x3f0>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800ea78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800ea7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea80:	3303      	adds	r3, #3
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	3301      	adds	r3, #1
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	18db      	adds	r3, r3, r3
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8e:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800ea90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea92:	3301      	adds	r3, #1
 800ea94:	2203      	movs	r2, #3
 800ea96:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800ea98:	2300      	movs	r3, #0
 800ea9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea9c:	e01d      	b.n	800eada <_ux_device_stack_descriptor_send+0x386>
 800ea9e:	46c0      	nop			@ (mov r8, r8)
 800eaa0:	200007d0 	.word	0x200007d0
 800eaa4:	08015c5c 	.word	0x08015c5c
 800eaa8:	2000004c 	.word	0x2000004c
 800eaac:	20000038 	.word	0x20000038
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800eab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eab2:	3304      	adds	r3, #4
 800eab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eab6:	18d2      	adds	r2, r2, r3
 800eab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eaba:	3301      	adds	r3, #1
 800eabc:	005b      	lsls	r3, r3, #1
 800eabe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eac0:	18cb      	adds	r3, r1, r3
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800eac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	3303      	adds	r3, #3
 800eacc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eace:	18d3      	adds	r3, r2, r3
 800ead0:	2200      	movs	r2, #0
 800ead2:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800ead4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ead6:	3301      	adds	r3, #1
 800ead8:	643b      	str	r3, [r7, #64]	@ 0x40
 800eada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eadc:	3303      	adds	r3, #3
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	001a      	movs	r2, r3
 800eae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d3e3      	bcc.n	800eab0 <_ux_device_stack_descriptor_send+0x35c>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800eae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaea:	3303      	adds	r3, #3
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	001a      	movs	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d906      	bls.n	800eb08 <_ux_device_stack_descriptor_send+0x3b4>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800eafa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eafc:	3303      	adds	r3, #3
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	3301      	adds	r3, #1
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb06:	e001      	b.n	800eb0c <_ux_device_stack_descriptor_send+0x3b8>
                            length =  host_length;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800eb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb12:	0018      	movs	r0, r3
 800eb14:	f000 fd95 	bl	800f642 <_ux_device_stack_transfer_request>
 800eb18:	0003      	movs	r3, r0
 800eb1a:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800eb1c:	e012      	b.n	800eb44 <_ux_device_stack_descriptor_send+0x3f0>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800eb1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb20:	3303      	adds	r3, #3
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	001a      	movs	r2, r3
 800eb26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb28:	1a9b      	subs	r3, r3, r2
 800eb2a:	3b04      	subs	r3, #4
 800eb2c:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800eb2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb30:	3303      	adds	r3, #3
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	3304      	adds	r3, #4
 800eb36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb38:	18d3      	adds	r3, r2, r3
 800eb3a:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800eb3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d000      	beq.n	800eb44 <_ux_device_stack_descriptor_send+0x3f0>
 800eb42:	e773      	b.n	800ea2c <_ux_device_stack_descriptor_send+0x2d8>
            if (string_framework_length == 0)
 800eb44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d111      	bne.n	800eb6e <_ux_device_stack_descriptor_send+0x41a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800eb4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800eb52:	2114      	movs	r1, #20
 800eb54:	4798      	blx	r3
                return(UX_ERROR);
 800eb56:	23ff      	movs	r3, #255	@ 0xff
 800eb58:	e00b      	b.n	800eb72 <_ux_device_stack_descriptor_send+0x41e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800eb5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800eb62:	2114      	movs	r1, #20
 800eb64:	4798      	blx	r3
        return(UX_ERROR);
 800eb66:	23ff      	movs	r3, #255	@ 0xff
 800eb68:	e003      	b.n	800eb72 <_ux_device_stack_descriptor_send+0x41e>
        break;
 800eb6a:	46c0      	nop			@ (mov r8, r8)
 800eb6c:	e000      	b.n	800eb70 <_ux_device_stack_descriptor_send+0x41c>
        break;
 800eb6e:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 800eb70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800eb72:	0018      	movs	r0, r3
 800eb74:	46bd      	mov	sp, r7
 800eb76:	b01b      	add	sp, #108	@ 0x6c
 800eb78:	bd90      	pop	{r4, r7, pc}
 800eb7a:	46c0      	nop			@ (mov r8, r8)

0800eb7c <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b092      	sub	sp, #72	@ 0x48
 800eb80:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800eb82:	23ff      	movs	r3, #255	@ 0xff
 800eb84:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800eb86:	4b2d      	ldr	r3, [pc, #180]	@ (800ec3c <_ux_device_stack_disconnect+0xc0>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800eb8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ec3c <_ux_device_stack_disconnect+0xc0>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3324      	adds	r3, #36	@ 0x24
 800eb92:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800eb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b03      	cmp	r3, #3
 800eb9a:	d127      	bne.n	800ebec <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb9e:	2290      	movs	r2, #144	@ 0x90
 800eba0:	589b      	ldr	r3, [r3, r2]
 800eba2:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800eba4:	e01c      	b.n	800ebe0 <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800eba6:	1d3b      	adds	r3, r7, #4
 800eba8:	2203      	movs	r2, #3
 800ebaa:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800ebac:	1d3b      	adds	r3, r7, #4
 800ebae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebb0:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800ebb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800ebb8:	1d3b      	adds	r3, r7, #4
 800ebba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebbc:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800ebbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d004      	beq.n	800ebce <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800ebc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebc8:	1d3a      	adds	r2, r7, #4
 800ebca:	0010      	movs	r0, r2
 800ebcc:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800ebce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800ebd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f000 fa90 	bl	800f0fc <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebde:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800ebe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1df      	bne.n	800eba6 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800ebe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe8:	2201      	movs	r2, #1
 800ebea:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800ebec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d108      	bne.n	800ec06 <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800ebf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf6:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800ebf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebfa:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800ebfc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ebfe:	210f      	movs	r1, #15
 800ec00:	4798      	blx	r3
 800ec02:	0003      	movs	r3, r0
 800ec04:	643b      	str	r3, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800ec06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec08:	2280      	movs	r2, #128	@ 0x80
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800ec14:	4b09      	ldr	r3, [pc, #36]	@ (800ec3c <_ux_device_stack_disconnect+0xc0>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	23b4      	movs	r3, #180	@ 0xb4
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	58d3      	ldr	r3, [r2, r3]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d006      	beq.n	800ec30 <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800ec22:	4b06      	ldr	r3, [pc, #24]	@ (800ec3c <_ux_device_stack_disconnect+0xc0>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	23b4      	movs	r3, #180	@ 0xb4
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	58d3      	ldr	r3, [r2, r3]
 800ec2c:	200a      	movs	r0, #10
 800ec2e:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800ec30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800ec32:	0018      	movs	r0, r3
 800ec34:	46bd      	mov	sp, r7
 800ec36:	b012      	add	sp, #72	@ 0x48
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	46c0      	nop			@ (mov r8, r8)
 800ec3c:	200007d0 	.word	0x200007d0

0800ec40 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b086      	sub	sp, #24
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ec48:	4b15      	ldr	r3, [pc, #84]	@ (800eca0 <_ux_device_stack_endpoint_stall+0x60>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	613b      	str	r3, [r7, #16]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800ec4e:	23ff      	movs	r3, #255	@ 0xff
 800ec50:	617b      	str	r3, [r7, #20]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800ec52:	f003 f825 	bl	8011ca0 <_ux_utility_interrupt_disable>
 800ec56:	0003      	movs	r3, r0
 800ec58:	60fb      	str	r3, [r7, #12]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800ec5a:	4b11      	ldr	r3, [pc, #68]	@ (800eca0 <_ux_device_stack_endpoint_stall+0x60>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d014      	beq.n	800ec8e <_ux_device_stack_endpoint_stall+0x4e>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d010      	beq.n	800ec8e <_ux_device_stack_endpoint_stall+0x4e>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	699b      	ldr	r3, [r3, #24]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	6938      	ldr	r0, [r7, #16]
 800ec74:	2114      	movs	r1, #20
 800ec76:	4798      	blx	r3
 800ec78:	0003      	movs	r3, r0
 800ec7a:	617b      	str	r3, [r7, #20]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	7bdb      	ldrb	r3, [r3, #15]
 800ec80:	001a      	movs	r2, r3
 800ec82:	2303      	movs	r3, #3
 800ec84:	4013      	ands	r3, r2
 800ec86:	d002      	beq.n	800ec8e <_ux_device_stack_endpoint_stall+0x4e>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	605a      	str	r2, [r3, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	0018      	movs	r0, r3
 800ec92:	f003 f814 	bl	8011cbe <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
 800ec96:	697b      	ldr	r3, [r7, #20]
}
 800ec98:	0018      	movs	r0, r3
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	b006      	add	sp, #24
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	200007d0 	.word	0x200007d0

0800eca4 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b08a      	sub	sp, #40	@ 0x28
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ecb0:	4b3c      	ldr	r3, [pc, #240]	@ (800eda4 <_ux_device_stack_get_status+0x100>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ecb6:	4b3b      	ldr	r3, [pc, #236]	@ (800eda4 <_ux_device_stack_get_status+0x100>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3324      	adds	r3, #36	@ 0x24
 800ecbc:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	3318      	adds	r3, #24
 800ecc2:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	3320      	adds	r3, #32
 800ecc8:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	2200      	movs	r2, #0
 800ecda:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800ecdc:	2302      	movs	r3, #2
 800ecde:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2203      	movs	r2, #3
 800ece4:	4013      	ands	r3, r2
 800ece6:	d002      	beq.n	800ecee <_ux_device_stack_get_status+0x4a>
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	d024      	beq.n	800ed36 <_ux_device_stack_get_status+0x92>
 800ecec:	e03e      	b.n	800ed6c <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	23f0      	movs	r3, #240	@ 0xf0
 800ecf2:	021b      	lsls	r3, r3, #8
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d102      	bne.n	800ecfe <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800ecfc:	e03e      	b.n	800ed7c <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800ecfe:	4b29      	ldr	r3, [pc, #164]	@ (800eda4 <_ux_device_stack_get_status+0x100>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	23a4      	movs	r3, #164	@ 0xa4
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	58d3      	ldr	r3, [r2, r3]
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	d103      	bne.n	800ed14 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	2201      	movs	r2, #1
 800ed12:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800ed14:	4b23      	ldr	r3, [pc, #140]	@ (800eda4 <_ux_device_stack_get_status+0x100>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	23a8      	movs	r3, #168	@ 0xa8
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	58d3      	ldr	r3, [r2, r3]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d02c      	beq.n	800ed7c <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	781a      	ldrb	r2, [r3, #0]
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	2102      	movs	r1, #2
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	b2d2      	uxtb	r2, r2
 800ed32:	701a      	strb	r2, [r3, #0]
        break;
 800ed34:	e022      	b.n	800ed7c <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	699b      	ldr	r3, [r3, #24]
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	6a38      	ldr	r0, [r7, #32]
 800ed3e:	2115      	movs	r1, #21
 800ed40:	4798      	blx	r3
 800ed42:	0003      	movs	r3, r0
 800ed44:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	2bff      	cmp	r3, #255	@ 0xff
 800ed4a:	d007      	beq.n	800ed5c <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d116      	bne.n	800ed80 <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	2201      	movs	r2, #1
 800ed58:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800ed5a:	e011      	b.n	800ed80 <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ed5c:	6a3b      	ldr	r3, [r7, #32]
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	69ba      	ldr	r2, [r7, #24]
 800ed62:	6a38      	ldr	r0, [r7, #32]
 800ed64:	2114      	movs	r1, #20
 800ed66:	4798      	blx	r3
            return(UX_SUCCESS);            
 800ed68:	2300      	movs	r3, #0
 800ed6a:	e016      	b.n	800ed9a <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	69ba      	ldr	r2, [r7, #24]
 800ed72:	6a38      	ldr	r0, [r7, #32]
 800ed74:	2114      	movs	r1, #20
 800ed76:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e00e      	b.n	800ed9a <_ux_device_stack_get_status+0xf6>
        break;
 800ed7c:	46c0      	nop			@ (mov r8, r8)
 800ed7e:	e000      	b.n	800ed82 <_ux_device_stack_get_status+0xde>
        break;
 800ed80:	46c0      	nop			@ (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	2203      	movs	r2, #3
 800ed86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800ed88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	0018      	movs	r0, r3
 800ed90:	f000 fc57 	bl	800f642 <_ux_device_stack_transfer_request>
 800ed94:	0003      	movs	r3, r0
 800ed96:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 800ed98:	693b      	ldr	r3, [r7, #16]
}
 800ed9a:	0018      	movs	r0, r3
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	b00a      	add	sp, #40	@ 0x28
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	46c0      	nop			@ (mov r8, r8)
 800eda4:	200007d0 	.word	0x200007d0

0800eda8 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b094      	sub	sp, #80	@ 0x50
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800edb6:	4bb2      	ldr	r3, [pc, #712]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3324      	adds	r3, #36	@ 0x24
 800edbc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800edbe:	4bb0      	ldr	r3, [pc, #704]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	21dc      	movs	r1, #220	@ 0xdc
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800edc8:	4bad      	ldr	r3, [pc, #692]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	21e0      	movs	r1, #224	@ 0xe0
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	505a      	str	r2, [r3, r1]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800edd2:	4bab      	ldr	r3, [pc, #684]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	21d4      	movs	r1, #212	@ 0xd4
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800eddc:	4ba8      	ldr	r3, [pc, #672]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	21d8      	movs	r1, #216	@ 0xd8
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	505a      	str	r2, [r3, r1]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800ede6:	4ba6      	ldr	r3, [pc, #664]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	21e4      	movs	r1, #228	@ 0xe4
 800edec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800edee:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800edf0:	4ba3      	ldr	r3, [pc, #652]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	21e8      	movs	r1, #232	@ 0xe8
 800edf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800edf8:	505a      	str	r2, [r3, r1]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800edfa:	4ba1      	ldr	r3, [pc, #644]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	21ec      	movs	r1, #236	@ 0xec
 800ee00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee02:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800ee04:	4b9e      	ldr	r3, [pc, #632]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	21f0      	movs	r1, #240	@ 0xf0
 800ee0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ee0c:	505a      	str	r2, [r3, r1]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 800ee0e:	4b9c      	ldr	r3, [pc, #624]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	22fc      	movs	r2, #252	@ 0xfc
 800ee14:	2102      	movs	r1, #2
 800ee16:	5099      	str	r1, [r3, r2]
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800ee18:	4b99      	ldr	r3, [pc, #612]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	23b4      	movs	r3, #180	@ 0xb4
 800ee1e:	005b      	lsls	r3, r3, #1
 800ee20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ee22:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800ee24:	22c8      	movs	r2, #200	@ 0xc8
 800ee26:	2100      	movs	r1, #0
 800ee28:	2000      	movs	r0, #0
 800ee2a:	f000 fe21 	bl	800fa70 <_ux_utility_memory_allocate>
 800ee2e:	0003      	movs	r3, r0
 800ee30:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <_ux_device_stack_initialize+0x94>
        return(UX_MEMORY_INSUFFICIENT);
 800ee38:	2312      	movs	r3, #18
 800ee3a:	e158      	b.n	800f0ee <_ux_device_stack_initialize+0x346>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800ee3c:	4b90      	ldr	r3, [pc, #576]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	2380      	movs	r3, #128	@ 0x80
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	6a39      	ldr	r1, [r7, #32]
 800ee46:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800ee48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4a:	3338      	adds	r3, #56	@ 0x38
 800ee4c:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800ee4e:	2380      	movs	r3, #128	@ 0x80
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	001a      	movs	r2, r3
 800ee54:	2101      	movs	r1, #1
 800ee56:	2000      	movs	r0, #0
 800ee58:	f000 fe0a 	bl	800fa70 <_ux_utility_memory_allocate>
 800ee5c:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d102      	bne.n	800ee70 <_ux_device_stack_initialize+0xc8>
        status = UX_MEMORY_INSUFFICIENT;
 800ee6a:	2312      	movs	r3, #18
 800ee6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee6e:	e001      	b.n	800ee74 <_ux_device_stack_initialize+0xcc>
    else
        status = UX_SUCCESS;
 800ee70:	2300      	movs	r3, #0
 800ee72:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800ee80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d000      	beq.n	800ee88 <_ux_device_stack_initialize+0xe0>
 800ee86:	e092      	b.n	800efae <_ux_device_stack_initialize+0x206>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800ee88:	4b7d      	ldr	r3, [pc, #500]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	22d4      	movs	r2, #212	@ 0xd4
 800ee8e:	589b      	ldr	r3, [r3, r2]
 800ee90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800ee92:	4b7b      	ldr	r3, [pc, #492]	@ (800f080 <_ux_device_stack_initialize+0x2d8>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	22d8      	movs	r2, #216	@ 0xd8
 800ee98:	589b      	ldr	r3, [r3, r2]
 800ee9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800eea8:	e057      	b.n	800ef5a <_ux_device_stack_initialize+0x1b2>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800eeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800eeb0:	2117      	movs	r1, #23
 800eeb2:	187b      	adds	r3, r7, r1
 800eeb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeb6:	7852      	ldrb	r2, [r2, #1]
 800eeb8:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800eeba:	187b      	adds	r3, r7, r1
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d029      	beq.n	800ef16 <_ux_device_stack_initialize+0x16e>
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d13e      	bne.n	800ef44 <_ux_device_stack_initialize+0x19c>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800eec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec8:	3303      	adds	r3, #3
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10b      	bne.n	800eee8 <_ux_device_stack_initialize+0x140>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800eed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed4:	18d3      	adds	r3, r2, r3
 800eed6:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800eed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeda:	3304      	adds	r3, #4
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800eee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee2:	3301      	adds	r3, #1
 800eee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eee6:	e00a      	b.n	800eefe <_ux_device_stack_initialize+0x156>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800eee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeea:	3304      	adds	r3, #4
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	001a      	movs	r2, r3
 800eef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d203      	bcs.n	800eefe <_ux_device_stack_initialize+0x156>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800eef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef8:	3304      	adds	r3, #4
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800eefe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef00:	3302      	adds	r3, #2
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	001a      	movs	r2, r3
 800ef06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d21d      	bcs.n	800ef48 <_ux_device_stack_initialize+0x1a0>
                    max_interface_number = *(device_framework + 2);
 800ef0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0e:	3302      	adds	r3, #2
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 800ef14:	e018      	b.n	800ef48 <_ux_device_stack_initialize+0x1a0>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800ef16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d901      	bls.n	800ef22 <_ux_device_stack_initialize+0x17a>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef20:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800ef22:	2300      	movs	r3, #0
 800ef24:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800ef26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2a:	18d3      	adds	r3, r2, r3
 800ef2c:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800ef2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d901      	bls.n	800ef3a <_ux_device_stack_initialize+0x192>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800ef36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef38:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 800ef42:	e002      	b.n	800ef4a <_ux_device_stack_initialize+0x1a2>

            default:
                break;
 800ef44:	46c0      	nop			@ (mov r8, r8)
 800ef46:	e000      	b.n	800ef4a <_ux_device_stack_initialize+0x1a2>
                break;
 800ef48:	46c0      	nop			@ (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800ef4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800ef52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	18d3      	adds	r3, r2, r3
 800ef58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 800ef5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1a4      	bne.n	800eeaa <_ux_device_stack_initialize+0x102>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800ef60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef64:	18d3      	adds	r3, r2, r3
 800ef66:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800ef68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d901      	bls.n	800ef74 <_ux_device_stack_initialize+0x1cc>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800ef70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef72:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800ef74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d901      	bls.n	800ef80 <_ux_device_stack_initialize+0x1d8>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7e:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800ef80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d106      	bne.n	800ef94 <_ux_device_stack_initialize+0x1ec>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800ef86:	2242      	movs	r2, #66	@ 0x42
 800ef88:	2103      	movs	r1, #3
 800ef8a:	2002      	movs	r0, #2
 800ef8c:	f000 fc24 	bl	800f7d8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800ef90:	2342      	movs	r3, #66	@ 0x42
 800ef92:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800ef94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d109      	bne.n	800efae <_ux_device_stack_initialize+0x206>
 800ef9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef9c:	2b0f      	cmp	r3, #15
 800ef9e:	d906      	bls.n	800efae <_ux_device_stack_initialize+0x206>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800efa0:	2212      	movs	r2, #18
 800efa2:	2103      	movs	r1, #3
 800efa4:	2002      	movs	r0, #2
 800efa6:	f000 fc17 	bl	800f7d8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800efaa:	2312      	movs	r3, #18
 800efac:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800efae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d119      	bne.n	800efe8 <_ux_device_stack_initialize+0x240>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb6:	2198      	movs	r1, #152	@ 0x98
 800efb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efba:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800efbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efbe:	21a0      	movs	r1, #160	@ 0xa0
 800efc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800efc2:	505a      	str	r2, [r3, r1]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800efc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efc6:	2320      	movs	r3, #32
 800efc8:	2100      	movs	r1, #0
 800efca:	2000      	movs	r0, #0
 800efcc:	f000 fe36 	bl	800fc3c <_ux_utility_memory_allocate_mulc_safe>
 800efd0:	0003      	movs	r3, r0
 800efd2:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <_ux_device_stack_initialize+0x238>
            status = UX_MEMORY_INSUFFICIENT;
 800efda:	2312      	movs	r3, #18
 800efdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800efde:	e003      	b.n	800efe8 <_ux_device_stack_initialize+0x240>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe2:	2194      	movs	r1, #148	@ 0x94
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800efe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efea:	2b00      	cmp	r3, #0
 800efec:	d03d      	beq.n	800f06a <_ux_device_stack_initialize+0x2c2>
 800efee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d13a      	bne.n	800f06a <_ux_device_stack_initialize+0x2c2>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800eff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eff6:	2368      	movs	r3, #104	@ 0x68
 800eff8:	2100      	movs	r1, #0
 800effa:	2000      	movs	r0, #0
 800effc:	f000 fe1e 	bl	800fc3c <_ux_utility_memory_allocate_mulc_safe>
 800f000:	0003      	movs	r3, r0
 800f002:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 800f004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <_ux_device_stack_initialize+0x268>
            status = UX_MEMORY_INSUFFICIENT;
 800f00a:	2312      	movs	r3, #18
 800f00c:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 800f00e:	e02e      	b.n	800f06e <_ux_device_stack_initialize+0x2c6>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800f010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f012:	219c      	movs	r1, #156	@ 0x9c
 800f014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f016:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800f018:	e01b      	b.n	800f052 <_ux_device_stack_initialize+0x2aa>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800f01a:	2380      	movs	r3, #128	@ 0x80
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	001a      	movs	r2, r3
 800f020:	2101      	movs	r1, #1
 800f022:	2000      	movs	r0, #0
 800f024:	f000 fd24 	bl	800fa70 <_ux_utility_memory_allocate>
 800f028:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800f02a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f02c:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800f02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f032:	2b00      	cmp	r3, #0
 800f034:	d102      	bne.n	800f03c <_ux_device_stack_initialize+0x294>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800f036:	2312      	movs	r3, #18
 800f038:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800f03a:	e015      	b.n	800f068 <_ux_device_stack_initialize+0x2c0>
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800f03c:	2300      	movs	r3, #0
 800f03e:	64bb      	str	r3, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800f040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f042:	2b00      	cmp	r3, #0
 800f044:	d002      	beq.n	800f04c <_ux_device_stack_initialize+0x2a4>
                {
                    status = UX_SEMAPHORE_ERROR;
 800f046:	2315      	movs	r3, #21
 800f048:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800f04a:	e00d      	b.n	800f068 <_ux_device_stack_initialize+0x2c0>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800f04c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f04e:	3368      	adds	r3, #104	@ 0x68
 800f050:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800f052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f054:	229c      	movs	r2, #156	@ 0x9c
 800f056:	589a      	ldr	r2, [r3, r2]
 800f058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f05a:	2168      	movs	r1, #104	@ 0x68
 800f05c:	434b      	muls	r3, r1
 800f05e:	18d3      	adds	r3, r2, r3
 800f060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f062:	429a      	cmp	r2, r3
 800f064:	d3d9      	bcc.n	800f01a <_ux_device_stack_initialize+0x272>
        if (endpoints_pool == UX_NULL)
 800f066:	e002      	b.n	800f06e <_ux_device_stack_initialize+0x2c6>
 800f068:	e001      	b.n	800f06e <_ux_device_stack_initialize+0x2c6>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800f06a:	2300      	movs	r3, #0
 800f06c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800f06e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f070:	2b00      	cmp	r3, #0
 800f072:	d101      	bne.n	800f078 <_ux_device_stack_initialize+0x2d0>
        return(UX_SUCCESS);
 800f074:	2300      	movs	r3, #0
 800f076:	e03a      	b.n	800f0ee <_ux_device_stack_initialize+0x346>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800f078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d01a      	beq.n	800f0b4 <_ux_device_stack_initialize+0x30c>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800f07e:	e00d      	b.n	800f09c <_ux_device_stack_initialize+0x2f4>
 800f080:	200007d0 	.word	0x200007d0
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800f084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d004      	beq.n	800f096 <_ux_device_stack_initialize+0x2ee>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800f08c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f090:	0018      	movs	r0, r3
 800f092:	f000 ff19 	bl	800fec8 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800f096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f098:	3b68      	subs	r3, #104	@ 0x68
 800f09a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09e:	229c      	movs	r2, #156	@ 0x9c
 800f0a0:	589b      	ldr	r3, [r3, r2]
 800f0a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d2ed      	bcs.n	800f084 <_ux_device_stack_initialize+0x2dc>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0aa:	229c      	movs	r2, #156	@ 0x9c
 800f0ac:	589b      	ldr	r3, [r3, r2]
 800f0ae:	0018      	movs	r0, r3
 800f0b0:	f000 ff0a 	bl	800fec8 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b6:	2294      	movs	r2, #148	@ 0x94
 800f0b8:	589b      	ldr	r3, [r3, r2]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d005      	beq.n	800f0ca <_ux_device_stack_initialize+0x322>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800f0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c0:	2294      	movs	r2, #148	@ 0x94
 800f0c2:	589b      	ldr	r3, [r3, r2]
 800f0c4:	0018      	movs	r0, r3
 800f0c6:	f000 feff 	bl	800fec8 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d004      	beq.n	800f0dc <_ux_device_stack_initialize+0x334>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0d6:	0018      	movs	r0, r3
 800f0d8:	f000 fef6 	bl	800fec8 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800f0dc:	4b06      	ldr	r3, [pc, #24]	@ (800f0f8 <_ux_device_stack_initialize+0x350>)
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	2380      	movs	r3, #128	@ 0x80
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	58d3      	ldr	r3, [r2, r3]
 800f0e6:	0018      	movs	r0, r3
 800f0e8:	f000 feee 	bl	800fec8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800f0ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f0ee:	0018      	movs	r0, r3
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	b014      	add	sp, #80	@ 0x50
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	46c0      	nop			@ (mov r8, r8)
 800f0f8:	200007d0 	.word	0x200007d0

0800f0fc <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f104:	4b20      	ldr	r3, [pc, #128]	@ (800f188 <_ux_device_stack_interface_delete+0x8c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	3324      	adds	r3, #36	@ 0x24
 800f10a:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	69db      	ldr	r3, [r3, #28]
 800f110:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800f112:	e01c      	b.n	800f14e <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800f11e:	4b1a      	ldr	r3, [pc, #104]	@ (800f188 <_ux_device_stack_interface_delete+0x8c>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	699b      	ldr	r3, [r3, #24]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	68b8      	ldr	r0, [r7, #8]
 800f12c:	210f      	movs	r1, #15
 800f12e:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1df      	bne.n	800f114 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	699a      	ldr	r2, [r3, #24]
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	2190      	movs	r1, #144	@ 0x90
 800f15c:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	0018      	movs	r0, r3
 800f180:	46bd      	mov	sp, r7
 800f182:	b006      	add	sp, #24
 800f184:	bd80      	pop	{r7, pc}
 800f186:	46c0      	nop			@ (mov r8, r8)
 800f188:	200007d0 	.word	0x200007d0

0800f18c <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b092      	sub	sp, #72	@ 0x48
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f198:	4b87      	ldr	r3, [pc, #540]	@ (800f3b8 <_ux_device_stack_interface_set+0x22c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f19e:	4b86      	ldr	r3, [pc, #536]	@ (800f3b8 <_ux_device_stack_interface_set+0x22c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3324      	adds	r3, #36	@ 0x24
 800f1a4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a8:	2294      	movs	r2, #148	@ 0x94
 800f1aa:	589b      	ldr	r3, [r3, r2]
 800f1ac:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b0:	2298      	movs	r2, #152	@ 0x98
 800f1b2:	589b      	ldr	r3, [r3, r2]
 800f1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800f1b6:	e009      	b.n	800f1cc <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800f1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d009      	beq.n	800f1d4 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800f1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1c2:	3320      	adds	r3, #32
 800f1c4:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800f1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800f1cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1f2      	bne.n	800f1b8 <_ux_device_stack_interface_set+0x2c>
 800f1d2:	e000      	b.n	800f1d6 <_ux_device_stack_interface_set+0x4a>
            break;
 800f1d4:	46c0      	nop			@ (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800f1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800f1dc:	2312      	movs	r3, #18
 800f1de:	e0e6      	b.n	800f3ae <_ux_device_stack_interface_set+0x222>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800f1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800f1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1e8:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800f1ea:	4974      	ldr	r1, [pc, #464]	@ (800f3bc <_ux_device_stack_interface_set+0x230>)
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	2209      	movs	r2, #9
 800f1f0:	f000 fbc6 	bl	800f980 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	2290      	movs	r2, #144	@ 0x90
 800f1f8:	589b      	ldr	r3, [r3, r2]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d104      	bne.n	800f208 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	2190      	movs	r1, #144	@ 0x90
 800f202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f204:	505a      	str	r2, [r3, r1]
 800f206:	e00e      	b.n	800f226 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800f208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20a:	2290      	movs	r2, #144	@ 0x90
 800f20c:	589b      	ldr	r3, [r3, r2]
 800f20e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800f210:	e002      	b.n	800f218 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800f212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f214:	699b      	ldr	r3, [r3, #24]
 800f216:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800f218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1f8      	bne.n	800f212 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800f220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f224:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	001a      	movs	r2, r3
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	001a      	movs	r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	189b      	adds	r3, r3, r2
 800f23c:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800f23e:	e0ab      	b.n	800f398 <_ux_device_stack_interface_set+0x20c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800f246:	211b      	movs	r1, #27
 800f248:	187b      	adds	r3, r7, r1
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	7852      	ldrb	r2, [r2, #1]
 800f24e:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800f250:	187b      	adds	r3, r7, r1
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	2b05      	cmp	r3, #5
 800f256:	d008      	beq.n	800f26a <_ux_device_stack_interface_set+0xde>
 800f258:	dd00      	ble.n	800f25c <_ux_device_stack_interface_set+0xd0>
 800f25a:	e094      	b.n	800f386 <_ux_device_stack_interface_set+0x1fa>
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	d100      	bne.n	800f262 <_ux_device_stack_interface_set+0xd6>
 800f260:	e089      	b.n	800f376 <_ux_device_stack_interface_set+0x1ea>
 800f262:	2b04      	cmp	r3, #4
 800f264:	d100      	bne.n	800f268 <_ux_device_stack_interface_set+0xdc>
 800f266:	e086      	b.n	800f376 <_ux_device_stack_interface_set+0x1ea>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800f268:	e08d      	b.n	800f386 <_ux_device_stack_interface_set+0x1fa>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800f26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26c:	229c      	movs	r2, #156	@ 0x9c
 800f26e:	589b      	ldr	r3, [r3, r2]
 800f270:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800f272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f274:	22a0      	movs	r2, #160	@ 0xa0
 800f276:	589b      	ldr	r3, [r3, r2]
 800f278:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800f27a:	e00d      	b.n	800f298 <_ux_device_stack_interface_set+0x10c>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800f27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d103      	bne.n	800f28c <_ux_device_stack_interface_set+0x100>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800f284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f286:	2201      	movs	r2, #1
 800f288:	601a      	str	r2, [r3, #0]
                    break;
 800f28a:	e008      	b.n	800f29e <_ux_device_stack_interface_set+0x112>
                endpoint++;
 800f28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28e:	3368      	adds	r3, #104	@ 0x68
 800f290:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800f292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f294:	3b01      	subs	r3, #1
 800f296:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800f298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1ee      	bne.n	800f27c <_ux_device_stack_interface_set+0xf0>
            if (endpoints_pool_number == 0)
 800f29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <_ux_device_stack_interface_set+0x11c>
                return(UX_MEMORY_INSUFFICIENT);
 800f2a4:	2312      	movs	r3, #18
 800f2a6:	e082      	b.n	800f3ae <_ux_device_stack_interface_set+0x222>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2aa:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800f2ac:	4944      	ldr	r1, [pc, #272]	@ (800f3c0 <_ux_device_stack_interface_set+0x234>)
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	2206      	movs	r2, #6
 800f2b2:	f000 fb65 	bl	800f980 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b8:	3320      	adds	r3, #32
 800f2ba:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2be:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800f2c0:	055b      	lsls	r3, r3, #21
 800f2c2:	0d5b      	lsrs	r3, r3, #21
 800f2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f2c6:	4b3c      	ldr	r3, [pc, #240]	@ (800f3b8 <_ux_device_stack_interface_set+0x22c>)
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	23a2      	movs	r3, #162	@ 0xa2
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	58d3      	ldr	r3, [r2, r3]
 800f2d0:	2b02      	cmp	r3, #2
 800f2d2:	d119      	bne.n	800f308 <_ux_device_stack_interface_set+0x17c>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800f2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d6:	7bdb      	ldrb	r3, [r3, #15]
 800f2d8:	001a      	movs	r2, r3
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f2de:	d013      	beq.n	800f308 <_ux_device_stack_interface_set+0x17c>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2e2:	8a1b      	ldrh	r3, [r3, #16]
 800f2e4:	001a      	movs	r2, r3
 800f2e6:	23c0      	movs	r3, #192	@ 0xc0
 800f2e8:	015b      	lsls	r3, r3, #5
 800f2ea:	4013      	ands	r3, r2
 800f2ec:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d009      	beq.n	800f308 <_ux_device_stack_interface_set+0x17c>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	0adb      	lsrs	r3, r3, #11
 800f2f8:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800f300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	4353      	muls	r3, r2
 800f306:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f30c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f312:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	2201      	movs	r2, #1
 800f318:	4252      	negs	r2, r2
 800f31a:	635a      	str	r2, [r3, #52]	@ 0x34
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800f31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f320:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f326:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800f328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f32e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f330:	210e      	movs	r1, #14
 800f332:	4798      	blx	r3
 800f334:	0003      	movs	r3, r0
 800f336:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 800f338:	6a3b      	ldr	r3, [r7, #32]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d004      	beq.n	800f348 <_ux_device_stack_interface_set+0x1bc>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800f33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f340:	2200      	movs	r2, #0
 800f342:	601a      	str	r2, [r3, #0]
                return(status);
 800f344:	6a3b      	ldr	r3, [r7, #32]
 800f346:	e032      	b.n	800f3ae <_ux_device_stack_interface_set+0x222>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800f348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f34a:	69db      	ldr	r3, [r3, #28]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <_ux_device_stack_interface_set+0x1cc>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800f350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f354:	61da      	str	r2, [r3, #28]
            break;
 800f356:	e017      	b.n	800f388 <_ux_device_stack_interface_set+0x1fc>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f35a:	69db      	ldr	r3, [r3, #28]
 800f35c:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800f35e:	e002      	b.n	800f366 <_ux_device_stack_interface_set+0x1da>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800f360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800f366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f368:	695b      	ldr	r3, [r3, #20]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1f8      	bne.n	800f360 <_ux_device_stack_interface_set+0x1d4>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800f36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f372:	615a      	str	r2, [r3, #20]
            break;
 800f374:	e008      	b.n	800f388 <_ux_device_stack_interface_set+0x1fc>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800f376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f378:	0018      	movs	r0, r3
 800f37a:	f000 f823 	bl	800f3c4 <_ux_device_stack_interface_start>
 800f37e:	0003      	movs	r3, r0
 800f380:	623b      	str	r3, [r7, #32]
            return(status);
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	e013      	b.n	800f3ae <_ux_device_stack_interface_set+0x222>
            break;
 800f386:	46c0      	nop			@ (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800f388:	68ba      	ldr	r2, [r7, #8]
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	18d3      	adds	r3, r2, r3
 800f396:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d000      	beq.n	800f3a0 <_ux_device_stack_interface_set+0x214>
 800f39e:	e74f      	b.n	800f240 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800f3a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3a2:	0018      	movs	r0, r3
 800f3a4:	f000 f80e 	bl	800f3c4 <_ux_device_stack_interface_start>
 800f3a8:	0003      	movs	r3, r0
 800f3aa:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
}
 800f3ae:	0018      	movs	r0, r3
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	b012      	add	sp, #72	@ 0x48
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	46c0      	nop			@ (mov r8, r8)
 800f3b8:	200007d0 	.word	0x200007d0
 800f3bc:	20000040 	.word	0x20000040
 800f3c0:	20000020 	.word	0x20000020

0800f3c4 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800f3c4:	b590      	push	{r4, r7, lr}
 800f3c6:	b091      	sub	sp, #68	@ 0x44
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800f3cc:	4b2c      	ldr	r3, [pc, #176]	@ (800f480 <_ux_device_stack_interface_start+0xbc>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	7b9b      	ldrb	r3, [r3, #14]
 800f3d4:	3340      	adds	r3, #64	@ 0x40
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	18d3      	adds	r3, r2, r3
 800f3da:	3304      	adds	r3, #4
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800f3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d101      	bne.n	800f3ea <_ux_device_stack_interface_start+0x26>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800f3e6:	2357      	movs	r3, #87	@ 0x57
 800f3e8:	e046      	b.n	800f478 <_ux_device_stack_interface_start+0xb4>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f3ea:	4b25      	ldr	r3, [pc, #148]	@ (800f480 <_ux_device_stack_interface_start+0xbc>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3324      	adds	r3, #36	@ 0x24
 800f3f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800f3f2:	2408      	movs	r4, #8
 800f3f4:	193b      	adds	r3, r7, r4
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800f3fa:	193b      	adds	r3, r7, r4
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	7c5b      	ldrb	r3, [r3, #17]
 800f404:	001a      	movs	r2, r3
 800f406:	193b      	adds	r3, r7, r4
 800f408:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	7c9b      	ldrb	r3, [r3, #18]
 800f40e:	001a      	movs	r2, r3
 800f410:	193b      	adds	r3, r7, r4
 800f412:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	7cdb      	ldrb	r3, [r3, #19]
 800f418:	001a      	movs	r2, r3
 800f41a:	193b      	adds	r3, r7, r4
 800f41c:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800f41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	001a      	movs	r2, r3
 800f424:	193b      	adds	r3, r7, r4
 800f426:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800f428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42a:	89db      	ldrh	r3, [r3, #14]
 800f42c:	001a      	movs	r2, r3
 800f42e:	193b      	adds	r3, r7, r4
 800f430:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800f432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	661a      	str	r2, [r3, #96]	@ 0x60
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800f438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f43c:	193a      	adds	r2, r7, r4
 800f43e:	0010      	movs	r0, r2
 800f440:	4798      	blx	r3
 800f442:	0003      	movs	r3, r0
 800f444:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800f446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d114      	bne.n	800f476 <_ux_device_stack_interface_start+0xb2>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800f44c:	193b      	adds	r3, r7, r4
 800f44e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f450:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800f452:	193b      	adds	r3, r7, r4
 800f454:	2202      	movs	r2, #2
 800f456:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800f458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f45a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f45c:	193a      	adds	r2, r7, r4
 800f45e:	0010      	movs	r0, r2
 800f460:	4798      	blx	r3
 800f462:	0003      	movs	r3, r0
 800f464:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800f466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <_ux_device_stack_interface_start+0xae>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f470:	605a      	str	r2, [r3, #4]

        return(status); 
 800f472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f474:	e000      	b.n	800f478 <_ux_device_stack_interface_start+0xb4>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800f476:	2357      	movs	r3, #87	@ 0x57
}
 800f478:	0018      	movs	r0, r3
 800f47a:	46bd      	mov	sp, r7
 800f47c:	b011      	add	sp, #68	@ 0x44
 800f47e:	bd90      	pop	{r4, r7, pc}
 800f480:	200007d0 	.word	0x200007d0

0800f484 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b08a      	sub	sp, #40	@ 0x28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f490:	4b2a      	ldr	r3, [pc, #168]	@ (800f53c <_ux_device_stack_set_feature+0xb8>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f496:	4b29      	ldr	r3, [pc, #164]	@ (800f53c <_ux_device_stack_set_feature+0xb8>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	3324      	adds	r3, #36	@ 0x24
 800f49c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	3318      	adds	r3, #24
 800f4a2:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2203      	movs	r2, #3
 800f4a8:	4013      	ands	r3, r2
 800f4aa:	d002      	beq.n	800f4b2 <_ux_device_stack_set_feature+0x2e>
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d016      	beq.n	800f4de <_ux_device_stack_set_feature+0x5a>
 800f4b0:	e038      	b.n	800f524 <_ux_device_stack_set_feature+0xa0>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d110      	bne.n	800f4da <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800f4b8:	4b20      	ldr	r3, [pc, #128]	@ (800f53c <_ux_device_stack_set_feature+0xb8>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	23a6      	movs	r3, #166	@ 0xa6
 800f4be:	005b      	lsls	r3, r3, #1
 800f4c0:	58d3      	ldr	r3, [r2, r3]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d007      	beq.n	800f4d6 <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800f4c6:	4b1d      	ldr	r3, [pc, #116]	@ (800f53c <_ux_device_stack_set_feature+0xb8>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	23a8      	movs	r3, #168	@ 0xa8
 800f4cc:	005b      	lsls	r3, r3, #1
 800f4ce:	2101      	movs	r1, #1
 800f4d0:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e02d      	b.n	800f532 <_ux_device_stack_set_feature+0xae>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800f4d6:	2354      	movs	r3, #84	@ 0x54
 800f4d8:	e02b      	b.n	800f532 <_ux_device_stack_set_feature+0xae>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800f4da:	2354      	movs	r3, #84	@ 0x54
 800f4dc:	e029      	b.n	800f532 <_ux_device_stack_set_feature+0xae>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	2290      	movs	r2, #144	@ 0x90
 800f4e2:	589b      	ldr	r3, [r3, r2]
 800f4e4:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800f4e6:	e01a      	b.n	800f51e <_ux_device_stack_set_feature+0x9a>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800f4ee:	e010      	b.n	800f512 <_ux_device_stack_set_feature+0x8e>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800f4f0:	6a3b      	ldr	r3, [r7, #32]
 800f4f2:	7b9b      	ldrb	r3, [r3, #14]
 800f4f4:	001a      	movs	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d107      	bne.n	800f50c <_ux_device_stack_set_feature+0x88>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	6a3a      	ldr	r2, [r7, #32]
 800f502:	69f8      	ldr	r0, [r7, #28]
 800f504:	2114      	movs	r1, #20
 800f506:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800f508:	2300      	movs	r3, #0
 800f50a:	e012      	b.n	800f532 <_ux_device_stack_set_feature+0xae>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800f50c:	6a3b      	ldr	r3, [r7, #32]
 800f50e:	695b      	ldr	r3, [r3, #20]
 800f510:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800f512:	6a3b      	ldr	r3, [r7, #32]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1eb      	bne.n	800f4f0 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800f518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800f51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1e1      	bne.n	800f4e8 <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	69f8      	ldr	r0, [r7, #28]
 800f52c:	2114      	movs	r1, #20
 800f52e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800f530:	2300      	movs	r3, #0
    }
}
 800f532:	0018      	movs	r0, r3
 800f534:	46bd      	mov	sp, r7
 800f536:	b00a      	add	sp, #40	@ 0x28
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	46c0      	nop			@ (mov r8, r8)
 800f53c:	200007d0 	.word	0x200007d0

0800f540 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
UX_SLAVE_CLASS              *class_instance;
ULONG                       class_index;
UINT                        status;


    status = UX_STATE_RESET;
 800f546:	2300      	movs	r3, #0
 800f548:	607b      	str	r3, [r7, #4]

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800f54a:	4b1d      	ldr	r3, [pc, #116]	@ (800f5c0 <_ux_device_stack_tasks_run+0x80>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	603b      	str	r3, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	699b      	ldr	r3, [r3, #24]
 800f554:	6838      	ldr	r0, [r7, #0]
 800f556:	2200      	movs	r2, #0
 800f558:	2112      	movs	r1, #18
 800f55a:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 800f55c:	4b18      	ldr	r3, [pc, #96]	@ (800f5c0 <_ux_device_stack_tasks_run+0x80>)
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	2380      	movs	r3, #128	@ 0x80
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	58d3      	ldr	r3, [r2, r3]
 800f566:	60fb      	str	r3, [r7, #12]
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 800f568:	2300      	movs	r3, #0
 800f56a:	60bb      	str	r3, [r7, #8]
 800f56c:	e01b      	b.n	800f5a6 <_ux_device_stack_tasks_run+0x66>
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f572:	2b00      	cmp	r3, #0
 800f574:	d011      	beq.n	800f59a <_ux_device_stack_tasks_run+0x5a>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00f      	beq.n	800f59e <_ux_device_stack_tasks_run+0x5e>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f586:	0018      	movs	r0, r3
 800f588:	4790      	blx	r2
 800f58a:	0002      	movs	r2, r0
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4313      	orrs	r3, r2
 800f590:	607b      	str	r3, [r7, #4]

        /* Move to the next class.  */
        class_instance ++;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	3364      	adds	r3, #100	@ 0x64
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	e002      	b.n	800f5a0 <_ux_device_stack_tasks_run+0x60>
            continue;
 800f59a:	46c0      	nop			@ (mov r8, r8)
 800f59c:	e000      	b.n	800f5a0 <_ux_device_stack_tasks_run+0x60>
            continue;
 800f59e:	46c0      	nop			@ (mov r8, r8)
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	60bb      	str	r3, [r7, #8]
 800f5a6:	4b06      	ldr	r3, [pc, #24]	@ (800f5c0 <_ux_device_stack_tasks_run+0x80>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	22fc      	movs	r2, #252	@ 0xfc
 800f5ac:	589b      	ldr	r3, [r3, r2]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d3dc      	bcc.n	800f56e <_ux_device_stack_tasks_run+0x2e>
    }

    /* Return overall status.  */
    return(status);
 800f5b4:	687b      	ldr	r3, [r7, #4]
}
 800f5b6:	0018      	movs	r0, r3
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	b004      	add	sp, #16
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	46c0      	nop			@ (mov r8, r8)
 800f5c0:	200007d0 	.word	0x200007d0

0800f5c4 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f5ce:	4b12      	ldr	r3, [pc, #72]	@ (800f618 <_ux_device_stack_transfer_abort+0x54>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	60fb      	str	r3, [r7, #12]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800f5da:	f002 fb61 	bl	8011ca0 <_ux_utility_interrupt_disable>
 800f5de:	0003      	movs	r3, r0
 800f5e0:	60bb      	str	r3, [r7, #8]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d10d      	bne.n	800f606 <_ux_device_stack_transfer_abort+0x42>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	699b      	ldr	r3, [r3, #24]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	210d      	movs	r1, #13
 800f5f4:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	f002 fb60 	bl	8011cbe <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2204      	movs	r2, #4
 800f602:	601a      	str	r2, [r3, #0]
 800f604:	e003      	b.n	800f60e <_ux_device_stack_transfer_abort+0x4a>
    }
    else
    {

        /* Restore interrupts.  */
        UX_RESTORE
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	0018      	movs	r0, r3
 800f60a:	f002 fb58 	bl	8011cbe <_ux_utility_interrupt_restore>
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800f60e:	2300      	movs	r3, #0
}
 800f610:	0018      	movs	r0, r3
 800f612:	46bd      	mov	sp, r7
 800f614:	b004      	add	sp, #16
 800f616:	bd80      	pop	{r7, pc}
 800f618:	200007d0 	.word	0x200007d0

0800f61c <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	3320      	adds	r3, #32
 800f62a:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800f62c:	683a      	ldr	r2, [r7, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	0011      	movs	r1, r2
 800f632:	0018      	movs	r0, r3
 800f634:	f7ff ffc6 	bl	800f5c4 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800f638:	2300      	movs	r3, #0
}
 800f63a:	0018      	movs	r0, r3
 800f63c:	46bd      	mov	sp, r7
 800f63e:	b004      	add	sp, #16
 800f640:	bd80      	pop	{r7, pc}

0800f642 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b086      	sub	sp, #24
 800f646:	af00      	add	r7, sp, #0
 800f648:	60f8      	str	r0, [r7, #12]
 800f64a:	60b9      	str	r1, [r7, #8]
 800f64c:	607a      	str	r2, [r7, #4]
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2200      	movs	r2, #0
 800f652:	631a      	str	r2, [r3, #48]	@ 0x30
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	68b9      	ldr	r1, [r7, #8]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	0018      	movs	r0, r3
 800f65c:	f000 f812 	bl	800f684 <_ux_device_stack_transfer_run>
 800f660:	0003      	movs	r3, r0
 800f662:	617b      	str	r3, [r7, #20]
    if (status == UX_STATE_LOCK)
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2b06      	cmp	r3, #6
 800f668:	d101      	bne.n	800f66e <_ux_device_stack_transfer_request+0x2c>
        return(UX_BUSY);
 800f66a:	23fe      	movs	r3, #254	@ 0xfe
 800f66c:	e006      	b.n	800f67c <_ux_device_stack_transfer_request+0x3a>
    if (status < UX_STATE_NEXT)
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2b03      	cmp	r3, #3
 800f672:	d802      	bhi.n	800f67a <_ux_device_stack_transfer_request+0x38>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f678:	e000      	b.n	800f67c <_ux_device_stack_transfer_request+0x3a>

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 800f67a:	2300      	movs	r3, #0

    /* And return the status.  */
    return(status);

#endif
}
 800f67c:	0018      	movs	r0, r3
 800f67e:	46bd      	mov	sp, r7
 800f680:	b006      	add	sp, #24
 800f682:	bd80      	pop	{r7, pc}

0800f684 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b08a      	sub	sp, #40	@ 0x28
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f694:	2b01      	cmp	r3, #1
 800f696:	d107      	bne.n	800f6a8 <_ux_device_stack_transfer_run+0x24>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2200      	movs	r2, #0
 800f69c:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2204      	movs	r2, #4
 800f6a2:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_NEXT);
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	e091      	b.n	800f7cc <_ux_device_stack_transfer_run+0x148>
    }

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800f6a8:	4b4a      	ldr	r3, [pc, #296]	@ (800f7d4 <_ux_device_stack_transfer_run+0x150>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d00d      	beq.n	800f6d2 <_ux_device_stack_transfer_run+0x4e>
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b8:	2b02      	cmp	r3, #2
 800f6ba:	d00a      	beq.n	800f6d2 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_ADDRESSED) &&
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6be:	2b03      	cmp	r3, #3
 800f6c0:	d007      	beq.n	800f6d2 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_CONFIGURED))
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2225      	movs	r2, #37	@ 0x25
 800f6c6:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e07c      	b.n	800f7cc <_ux_device_stack_transfer_run+0x148>
    }

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f6d2:	4b40      	ldr	r3, [pc, #256]	@ (800f7d4 <_ux_device_stack_transfer_run+0x150>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	623b      	str	r3, [r7, #32]

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	61fb      	str	r3, [r7, #28]

    /* Process states.  */
    state = transfer_request -> ux_slave_transfer_request_state;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e2:	61bb      	str	r3, [r7, #24]
    switch(state)
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	2b21      	cmp	r3, #33	@ 0x21
 800f6e8:	d05a      	beq.n	800f7a0 <_ux_device_stack_transfer_run+0x11c>
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	2b21      	cmp	r3, #33	@ 0x21
 800f6ee:	d900      	bls.n	800f6f2 <_ux_device_stack_transfer_run+0x6e>
 800f6f0:	e065      	b.n	800f7be <_ux_device_stack_transfer_run+0x13a>
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <_ux_device_stack_transfer_run+0x7c>
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	2b20      	cmp	r3, #32
 800f6fc:	d041      	beq.n	800f782 <_ux_device_stack_transfer_run+0xfe>
 800f6fe:	e05e      	b.n	800f7be <_ux_device_stack_transfer_run+0x13a>
    case UX_STATE_RESET:

        /* Prepare transfer parameters.  */

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	7bdb      	ldrb	r3, [r3, #15]
 800f704:	001a      	movs	r2, r3
 800f706:	2303      	movs	r3, #3
 800f708:	4013      	ands	r3, r2
 800f70a:	d00b      	beq.n	800f724 <_ux_device_stack_transfer_run+0xa0>
        {

            /* Isolate the direction from the endpoint address.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	7b9b      	ldrb	r3, [r3, #14]
 800f710:	b25b      	sxtb	r3, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	da03      	bge.n	800f71e <_ux_device_stack_transfer_run+0x9a>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2203      	movs	r2, #3
 800f71a:	629a      	str	r2, [r3, #40]	@ 0x28
 800f71c:	e002      	b.n	800f724 <_ux_device_stack_transfer_run+0xa0>
            else
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2202      	movs	r2, #2
 800f722:	629a      	str	r2, [r3, #40]	@ 0x28

        /* See if we need to force a zero length packet at the end of the transfer.
           This happens on a DATA IN and when the host requested length is not met
           and the last packet is on a boundary. If slave_length is zero, then it is
           a explicit ZLP request, no need to force ZLP.  */
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f728:	2b03      	cmp	r3, #3
 800f72a:	d114      	bne.n	800f756 <_ux_device_stack_transfer_run+0xd2>
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d011      	beq.n	800f756 <_ux_device_stack_transfer_run+0xd2>
            (slave_length != 0) && (host_length != slave_length) &&
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	429a      	cmp	r2, r3
 800f738:	d00d      	beq.n	800f756 <_ux_device_stack_transfer_run+0xd2>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	8a1b      	ldrh	r3, [r3, #16]
 800f73e:	001a      	movs	r2, r3
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	0011      	movs	r1, r2
 800f744:	0018      	movs	r0, r3
 800f746:	f7f0 fd81 	bl	800024c <__aeabi_uidivmod>
 800f74a:	1e0b      	subs	r3, r1, #0
            (slave_length != 0) && (host_length != slave_length) &&
 800f74c:	d103      	bne.n	800f756 <_ux_device_stack_transfer_run+0xd2>
        {

            /* If so force Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2201      	movs	r2, #1
 800f752:	639a      	str	r2, [r3, #56]	@ 0x38
 800f754:	e002      	b.n	800f75c <_ux_device_stack_transfer_run+0xd8>
        }
        else
        {

            /* Condition is not met, do not force a Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2200      	movs	r2, #0
 800f75a:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        /* Reset the number of bytes sent/received.  */
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2200      	movs	r2, #0
 800f760:	619a      	str	r2, [r3, #24]

        /* Determine how many bytes to send in this transaction.  We keep track of the original
           length and have a working length.  */
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	61da      	str	r2, [r3, #28]

        /* Save the buffer pointer.  */
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
                                transfer_request -> ux_slave_transfer_request_data_pointer;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	68da      	ldr	r2, [r3, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	611a      	str	r2, [r3, #16]

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2201      	movs	r2, #1
 800f77a:	601a      	str	r2, [r3, #0]

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2220      	movs	r2, #32
 800f780:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT:

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	7bdb      	ldrb	r3, [r3, #15]
 800f786:	001a      	movs	r2, r3
 800f788:	2303      	movs	r3, #3
 800f78a:	4013      	ands	r3, r2
 800f78c:	d005      	beq.n	800f79a <_ux_device_stack_transfer_run+0x116>
        {

            /* Return WAIT until halt cleared.  */
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	2b02      	cmp	r3, #2
 800f794:	d101      	bne.n	800f79a <_ux_device_stack_transfer_run+0x116>
                return(UX_STATE_WAIT);
 800f796:	2305      	movs	r3, #5
 800f798:	e018      	b.n	800f7cc <_ux_device_stack_transfer_run+0x148>

        }

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2221      	movs	r2, #33	@ 0x21
 800f79e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT:

        /* Call the DCD driver transfer function.   */
        /* Transfer state is adjusted inside DCD driver.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 800f7a0:	6a3b      	ldr	r3, [r7, #32]
 800f7a2:	699b      	ldr	r3, [r3, #24]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	6a38      	ldr	r0, [r7, #32]
 800f7a8:	210c      	movs	r1, #12
 800f7aa:	4798      	blx	r3
 800f7ac:	0003      	movs	r3, r0
 800f7ae:	617b      	str	r3, [r7, #20]

        /* Any error case or normal end: reset state for next transfer.  */
        if (status < UX_STATE_WAIT)
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d808      	bhi.n	800f7c8 <_ux_device_stack_transfer_run+0x144>
        {
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	631a      	str	r2, [r3, #48]	@ 0x30
        }
        break;
 800f7bc:	e004      	b.n	800f7c8 <_ux_device_stack_transfer_run+0x144>

    default: /* Error case, return EXIT.  */
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e001      	b.n	800f7cc <_ux_device_stack_transfer_run+0x148>
        break;
 800f7c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* And return the status.  */
    return(status);
 800f7ca:	697b      	ldr	r3, [r7, #20]
}
 800f7cc:	0018      	movs	r0, r3
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	b00a      	add	sp, #40	@ 0x28
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	200007d0 	.word	0x200007d0

0800f7d8 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800f7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f818 <_ux_system_error_handler+0x40>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	60da      	str	r2, [r3, #12]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800f7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f818 <_ux_system_error_handler+0x40>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	691a      	ldr	r2, [r3, #16]
 800f7f2:	3201      	adds	r2, #1
 800f7f4:	611a      	str	r2, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800f7f6:	4b08      	ldr	r3, [pc, #32]	@ (800f818 <_ux_system_error_handler+0x40>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	695b      	ldr	r3, [r3, #20]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d006      	beq.n	800f80e <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800f800:	4b05      	ldr	r3, [pc, #20]	@ (800f818 <_ux_system_error_handler+0x40>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	68b9      	ldr	r1, [r7, #8]
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	4798      	blx	r3
    }
}
 800f80e:	46c0      	nop			@ (mov r8, r8)
 800f810:	46bd      	mov	sp, r7
 800f812:	b004      	add	sp, #16
 800f814:	bd80      	pop	{r7, pc}
 800f816:	46c0      	nop			@ (mov r8, r8)
 800f818:	200007d4 	.word	0x200007d4

0800f81c <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b08a      	sub	sp, #40	@ 0x28
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
 800f828:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <_ux_system_initialize+0x1a>
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 800f836:	23fa      	movs	r3, #250	@ 0xfa
 800f838:	e07f      	b.n	800f93a <_ux_system_initialize+0x11e>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2100      	movs	r1, #0
 800f840:	0018      	movs	r0, r3
 800f842:	f000 fba7 	bl	800ff94 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800f846:	4b3f      	ldr	r3, [pc, #252]	@ (800f944 <_ux_system_initialize+0x128>)
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800f84c:	2318      	movs	r3, #24
 800f84e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f854:	18d2      	adds	r2, r2, r3
 800f856:	4b3c      	ldr	r3, [pc, #240]	@ (800f948 <_ux_system_initialize+0x12c>)
 800f858:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800f85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85c:	3375      	adds	r3, #117	@ 0x75
 800f85e:	33ff      	adds	r3, #255	@ 0xff
 800f860:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f862:	4b38      	ldr	r3, [pc, #224]	@ (800f944 <_ux_system_initialize+0x128>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68f9      	ldr	r1, [r7, #12]
 800f868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f86a:	188a      	adds	r2, r1, r2
 800f86c:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800f86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f870:	3314      	adds	r3, #20
 800f872:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00c      	beq.n	800f894 <_ux_system_initialize+0x78>
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d009      	beq.n	800f894 <_ux_system_initialize+0x78>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f880:	4b30      	ldr	r3, [pc, #192]	@ (800f944 <_ux_system_initialize+0x128>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	68f9      	ldr	r1, [r7, #12]
 800f886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f888:	188a      	adds	r2, r1, r2
 800f88a:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800f88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88e:	3314      	adds	r3, #20
 800f890:	627b      	str	r3, [r7, #36]	@ 0x24
 800f892:	e005      	b.n	800f8a0 <_ux_system_initialize+0x84>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800f894:	4b2b      	ldr	r3, [pc, #172]	@ (800f944 <_ux_system_initialize+0x128>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	4b2a      	ldr	r3, [pc, #168]	@ (800f944 <_ux_system_initialize+0x128>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6812      	ldr	r2, [r2, #0]
 800f89e:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a4:	18d3      	adds	r3, r2, r3
 800f8a6:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	3307      	adds	r3, #7
 800f8ac:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800f8ae:	6a3b      	ldr	r3, [r7, #32]
 800f8b0:	2207      	movs	r2, #7
 800f8b2:	4393      	bics	r3, r2
 800f8b4:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	18d3      	adds	r3, r2, r3
 800f8bc:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	6a3a      	ldr	r2, [r7, #32]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d301      	bcc.n	800f8ca <_ux_system_initialize+0xae>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800f8c6:	2312      	movs	r3, #18
 800f8c8:	e037      	b.n	800f93a <_ux_system_initialize+0x11e>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800f8ca:	69fa      	ldr	r2, [r7, #28]
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 800f8d2:	4b1c      	ldr	r3, [pc, #112]	@ (800f944 <_ux_system_initialize+0x128>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6a39      	ldr	r1, [r7, #32]
 800f8da:	69ba      	ldr	r2, [r7, #24]
 800f8dc:	0018      	movs	r0, r3
 800f8de:	f000 f9eb 	bl	800fcb8 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d027      	beq.n	800f938 <_ux_system_initialize+0x11c>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d024      	beq.n	800f938 <_ux_system_initialize+0x11c>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 800f8ee:	683a      	ldr	r2, [r7, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	0018      	movs	r0, r3
 800f8f6:	f000 fb4d 	bl	800ff94 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800f8fe:	6a3b      	ldr	r3, [r7, #32]
 800f900:	3307      	adds	r3, #7
 800f902:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800f904:	6a3b      	ldr	r3, [r7, #32]
 800f906:	2207      	movs	r2, #7
 800f908:	4393      	bics	r3, r2
 800f90a:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	18d3      	adds	r3, r2, r3
 800f912:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	6a3a      	ldr	r2, [r7, #32]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d301      	bcc.n	800f920 <_ux_system_initialize+0x104>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800f91c:	2312      	movs	r3, #18
 800f91e:	e00c      	b.n	800f93a <_ux_system_initialize+0x11e>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800f920:	697a      	ldr	r2, [r7, #20]
 800f922:	6a3b      	ldr	r3, [r7, #32]
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 800f928:	4b06      	ldr	r3, [pc, #24]	@ (800f944 <_ux_system_initialize+0x128>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	6a39      	ldr	r1, [r7, #32]
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	0018      	movs	r0, r3
 800f934:	f000 f9c0 	bl	800fcb8 <_ux_utility_memory_byte_pool_create>
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
 800f938:	2300      	movs	r3, #0
}
 800f93a:	0018      	movs	r0, r3
 800f93c:	46bd      	mov	sp, r7
 800f93e:	b00a      	add	sp, #40	@ 0x28
 800f940:	bd80      	pop	{r7, pc}
 800f942:	46c0      	nop			@ (mov r8, r8)
 800f944:	200007d4 	.word	0x200007d4
 800f948:	200007d0 	.word	0x200007d0

0800f94c <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <_uxe_system_initialize+0x1a>
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 800f966:	23fa      	movs	r3, #250	@ 0xfa
 800f968:	e006      	b.n	800f978 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	687a      	ldr	r2, [r7, #4]
 800f96e:	68b9      	ldr	r1, [r7, #8]
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7ff ff53 	bl	800f81c <_ux_system_initialize>
 800f976:	0003      	movs	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 800f978:	0018      	movs	r0, r3
 800f97a:	46bd      	mov	sp, r7
 800f97c:	b004      	add	sp, #16
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
 800f98c:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800f98e:	e041      	b.n	800fa14 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	60ba      	str	r2, [r7, #8]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b02      	cmp	r3, #2
 800f99a:	d01e      	beq.n	800f9da <_ux_utility_descriptor_parse+0x5a>
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	d12f      	bne.n	800fa00 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800f9a0:	e004      	b.n	800f9ac <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	603a      	str	r2, [r7, #0]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	2203      	movs	r2, #3
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	d1f6      	bne.n	800f9a2 <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	0018      	movs	r0, r3
 800f9b8:	f000 f835 	bl	800fa26 <_ux_utility_long_get>
 800f9bc:	0002      	movs	r2, r0
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	603b      	str	r3, [r7, #0]
            break;
 800f9ce:	e021      	b.n	800fa14 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	603a      	str	r2, [r7, #0]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	4013      	ands	r3, r2
 800f9e0:	d1f6      	bne.n	800f9d0 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	0018      	movs	r0, r3
 800f9e6:	f000 faf1 	bl	800ffcc <_ux_utility_short_get>
 800f9ea:	0003      	movs	r3, r0
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	3302      	adds	r3, #2
 800f9f6:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	3302      	adds	r3, #2
 800f9fc:	603b      	str	r3, [r7, #0]
            break;
 800f9fe:	e009      	b.n	800fa14 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	781a      	ldrb	r2, [r3, #0]
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	3301      	adds	r3, #1
 800fa12:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	1e5a      	subs	r2, r3, #1
 800fa18:	607a      	str	r2, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1b8      	bne.n	800f990 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800fa1e:	46c0      	nop			@ (mov r8, r8)
}
 800fa20:	46bd      	mov	sp, r7
 800fa22:	b004      	add	sp, #16
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b084      	sub	sp, #16
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	1c5a      	adds	r2, r3, #1
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	607a      	str	r2, [r7, #4]
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	021b      	lsls	r3, r3, #8
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	4313      	orrs	r3, r2
 800fa46:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	607a      	str	r2, [r7, #4]
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	041b      	lsls	r3, r3, #16
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	4313      	orrs	r3, r2
 800fa56:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	061b      	lsls	r3, r3, #24
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800fa64:	68fb      	ldr	r3, [r7, #12]
}
 800fa66:	0018      	movs	r0, r3
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	b004      	add	sp, #16
 800fa6c:	bd80      	pop	{r7, pc}
	...

0800fa70 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08e      	sub	sp, #56	@ 0x38
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d104      	bne.n	800fa8c <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800fa82:	4b6c      	ldr	r3, [pc, #432]	@ (800fc34 <_ux_utility_memory_allocate+0x1c4>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa8a:	e009      	b.n	800faa0 <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d104      	bne.n	800fa9c <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800fa92:	4b68      	ldr	r3, [pc, #416]	@ (800fc34 <_ux_utility_memory_allocate+0x1c4>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa9a:	e001      	b.n	800faa0 <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	e0c4      	b.n	800fc2a <_ux_utility_memory_allocate+0x1ba>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800faa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 800faa6:	2300      	movs	r3, #0
 800faa8:	e0bf      	b.n	800fc2a <_ux_utility_memory_allocate+0x1ba>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800fab0:	2300      	movs	r3, #0
 800fab2:	e0ba      	b.n	800fc2a <_ux_utility_memory_allocate+0x1ba>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	3301      	adds	r3, #1
 800fab8:	d101      	bne.n	800fabe <_ux_utility_memory_allocate+0x4e>
        memory_alignment = UX_NO_ALIGN;
 800faba:	2300      	movs	r3, #0
 800fabc:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2b06      	cmp	r3, #6
 800fac2:	d801      	bhi.n	800fac8 <_ux_utility_memory_allocate+0x58>
        memory_alignment =  UX_ALIGN_MIN;
 800fac4:	2307      	movs	r3, #7
 800fac6:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	3307      	adds	r3, #7
 800facc:	2207      	movs	r2, #7
 800face:	4393      	bics	r3, r2
 800fad0:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2b07      	cmp	r3, #7
 800fad6:	d808      	bhi.n	800faea <_ux_utility_memory_allocate+0x7a>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fadc:	0011      	movs	r1, r2
 800fade:	0018      	movs	r0, r3
 800fae0:	f000 f93c 	bl	800fd5c <_ux_utility_memory_byte_pool_search>
 800fae4:	0003      	movs	r3, r0
 800fae6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fae8:	e009      	b.n	800fafe <_ux_utility_memory_allocate+0x8e>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	18d2      	adds	r2, r2, r3
 800faf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faf2:	0011      	movs	r1, r2
 800faf4:	0018      	movs	r0, r3
 800faf6:	f000 f931 	bl	800fd5c <_ux_utility_memory_byte_pool_search>
 800fafa:	0003      	movs	r3, r0
 800fafc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 800fafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d106      	bne.n	800fb12 <_ux_utility_memory_allocate+0xa2>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800fb04:	2212      	movs	r2, #18
 800fb06:	2108      	movs	r1, #8
 800fb08:	2002      	movs	r0, #2
 800fb0a:	f7ff fe65 	bl	800f7d8 <_ux_system_error_handler>

        return(UX_NULL);
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e08b      	b.n	800fc2a <_ux_utility_memory_allocate+0x1ba>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb14:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 800fb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800fb1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800fb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb26:	3b08      	subs	r3, #8
 800fb28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb2c:	3308      	adds	r3, #8
 800fb2e:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800fb30:	6a3b      	ldr	r3, [r7, #32]
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	4013      	ands	r3, r2
 800fb36:	d02f      	beq.n	800fb98 <_ux_utility_memory_allocate+0x128>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800fb38:	6a3b      	ldr	r3, [r7, #32]
 800fb3a:	3308      	adds	r3, #8
 800fb3c:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800fb3e:	6a3a      	ldr	r2, [r7, #32]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	18d3      	adds	r3, r2, r3
 800fb44:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	43da      	mvns	r2, r3
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	3b08      	subs	r3, #8
 800fb54:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb5c:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800fb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb68:	3304      	adds	r3, #4
 800fb6a:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	4a31      	ldr	r2, [pc, #196]	@ (800fc38 <_ux_utility_memory_allocate+0x1c8>)
 800fb74:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800fb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	1c5a      	adds	r2, r3, #1
 800fb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb7e:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800fb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb84:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800fb86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8a:	1ad3      	subs	r3, r2, r3
 800fb8c:	001a      	movs	r2, r3
 800fb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb90:	1a9b      	subs	r3, r3, r2
 800fb92:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb96:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800fb98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	2b13      	cmp	r3, #19
 800fba0:	d91e      	bls.n	800fbe0 <_ux_utility_memory_allocate+0x170>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	3308      	adds	r3, #8
 800fba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fba8:	18d3      	adds	r3, r2, r3
 800fbaa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbae:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb2:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800fbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbe:	3304      	adds	r3, #4
 800fbc0:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	4a1b      	ldr	r2, [pc, #108]	@ (800fc38 <_ux_utility_memory_allocate+0x1c8>)
 800fbca:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800fbcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	1c5a      	adds	r2, r3, #1
 800fbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbd4:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800fbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbda:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbee:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 800fbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	3b08      	subs	r3, #8
 800fbfa:	001a      	movs	r2, r3
 800fbfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbfe:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 800fc00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d105      	bne.n	800fc16 <_ux_utility_memory_allocate+0x1a6>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 800fc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc14:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800fc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc18:	3308      	adds	r3, #8
 800fc1a:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 800fc1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	2100      	movs	r1, #0
 800fc22:	0018      	movs	r0, r3
 800fc24:	f000 f9b6 	bl	800ff94 <_ux_utility_memory_set>
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
 800fc28:	69bb      	ldr	r3, [r7, #24]
}
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	b00e      	add	sp, #56	@ 0x38
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	46c0      	nop			@ (mov r8, r8)
 800fc34:	200007d4 	.word	0x200007d4
 800fc38:	ffffeeee 	.word	0xffffeeee

0800fc3c <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800fc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d024      	beq.n	800fc9a <_ux_utility_memory_allocate_mulc_safe+0x5e>
 800fc50:	2000      	movs	r0, #0
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	0c19      	lsrs	r1, r3, #16
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	1c1e      	adds	r6, r3, #0
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	0c1b      	lsrs	r3, r3, #16
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	1c15      	adds	r5, r2, #0
 800fc62:	b28a      	uxth	r2, r1
 800fc64:	2a00      	cmp	r2, #0
 800fc66:	d105      	bne.n	800fc74 <_ux_utility_memory_allocate_mulc_safe+0x38>
 800fc68:	b29a      	uxth	r2, r3
 800fc6a:	2a00      	cmp	r2, #0
 800fc6c:	d013      	beq.n	800fc96 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 800fc6e:	1c19      	adds	r1, r3, #0
 800fc70:	1c34      	adds	r4, r6, #0
 800fc72:	e003      	b.n	800fc7c <_ux_utility_memory_allocate_mulc_safe+0x40>
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d10c      	bne.n	800fc94 <_ux_utility_memory_allocate_mulc_safe+0x58>
 800fc7a:	1c2c      	adds	r4, r5, #0
 800fc7c:	b2b3      	uxth	r3, r6
 800fc7e:	b2aa      	uxth	r2, r5
 800fc80:	435a      	muls	r2, r3
 800fc82:	b2a3      	uxth	r3, r4
 800fc84:	b289      	uxth	r1, r1
 800fc86:	434b      	muls	r3, r1
 800fc88:	0c12      	lsrs	r2, r2, #16
 800fc8a:	189b      	adds	r3, r3, r2
 800fc8c:	141b      	asrs	r3, r3, #16
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d000      	beq.n	800fc96 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 800fc94:	2001      	movs	r0, #1
 800fc96:	1e03      	subs	r3, r0, #0
 800fc98:	d109      	bne.n	800fcae <_ux_utility_memory_allocate_mulc_safe+0x72>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	683a      	ldr	r2, [r7, #0]
 800fc9e:	435a      	muls	r2, r3
 800fca0:	68b9      	ldr	r1, [r7, #8]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	0018      	movs	r0, r3
 800fca6:	f7ff fee3 	bl	800fa70 <_ux_utility_memory_allocate>
 800fcaa:	0003      	movs	r3, r0
 800fcac:	e000      	b.n	800fcb0 <_ux_utility_memory_allocate_mulc_safe+0x74>
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b005      	add	sp, #20
 800fcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcb8 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b088      	sub	sp, #32
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2214      	movs	r2, #20
 800fcc8:	2100      	movs	r1, #0
 800fcca:	0018      	movs	r0, r3
 800fccc:	f000 f962 	bl	800ff94 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2203      	movs	r2, #3
 800fcd4:	4393      	bics	r3, r2
 800fcd6:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	68ba      	ldr	r2, [r7, #8]
 800fce8:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3b08      	subs	r3, #8
 800fcee:	001a      	movs	r2, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	18d3      	adds	r3, r2, r3
 800fd04:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800fd06:	69fb      	ldr	r3, [r7, #28]
 800fd08:	3b04      	subs	r3, #4
 800fd0a:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	69ba      	ldr	r2, [r7, #24]
 800fd18:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	3b04      	subs	r3, #4
 800fd1e:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	69fa      	ldr	r2, [r7, #28]
 800fd36:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	3304      	adds	r3, #4
 800fd40:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	4a03      	ldr	r2, [pc, #12]	@ (800fd58 <_ux_utility_memory_byte_pool_create+0xa0>)
 800fd4a:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	0018      	movs	r0, r3
 800fd50:	46bd      	mov	sp, r7
 800fd52:	b008      	add	sp, #32
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	46c0      	nop			@ (mov r8, r8)
 800fd58:	ffffeeee 	.word	0xffffeeee

0800fd5c <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08c      	sub	sp, #48	@ 0x30
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 800fd66:	2300      	movs	r3, #0
 800fd68:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	3b02      	subs	r3, #2
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	18d3      	adds	r3, r2, r3
 800fd78:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d301      	bcc.n	800fd86 <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 800fd82:	2300      	movs	r3, #0
 800fd84:	e07d      	b.n	800fe82 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	689a      	ldr	r2, [r3, #8]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d308      	bcc.n	800fda4 <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	689a      	ldr	r2, [r3, #8]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68d9      	ldr	r1, [r3, #12]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	18cb      	adds	r3, r1, r3
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d901      	bls.n	800fda8 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 800fda4:	2300      	movs	r3, #0
 800fda6:	e06c      	b.n	800fe82 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800fdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4a30      	ldr	r2, [pc, #192]	@ (800fe8c <_ux_utility_memory_byte_pool_search+0x130>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d143      	bne.n	800fe56 <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800fdce:	6a3b      	ldr	r3, [r7, #32]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d104      	bne.n	800fdde <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdd8:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800fdda:	2301      	movs	r3, #1
 800fddc:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde0:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800fdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf2:	3b08      	subs	r3, #8
 800fdf4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 800fdf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d23a      	bcs.n	800fe74 <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800fdfe:	2300      	movs	r3, #0
 800fe00:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	3304      	adds	r3, #4
 800fe06:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a1e      	ldr	r2, [pc, #120]	@ (800fe8c <_ux_utility_memory_byte_pool_search+0x130>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d113      	bne.n	800fe3e <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	1e5a      	subs	r2, r3, #1
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d114      	bne.n	800fe60 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe3a:	609a      	str	r2, [r3, #8]
 800fe3c:	e010      	b.n	800fe60 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 800fe48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d008      	beq.n	800fe60 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe50:	3b01      	subs	r3, #1
 800fe52:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe54:	e004      	b.n	800fe60 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fe56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe58:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 800fe60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d002      	beq.n	800fe6c <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 800fe66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1a3      	bne.n	800fdba <_ux_utility_memory_byte_pool_search+0x5e>
 800fe72:	e000      	b.n	800fe76 <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 800fe74:	46c0      	nop			@ (mov r8, r8)

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 800fe76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d101      	bne.n	800fe80 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	e000      	b.n	800fe82 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800fe80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fe82:	0018      	movs	r0, r3
 800fe84:	46bd      	mov	sp, r7
 800fe86:	b00c      	add	sp, #48	@ 0x30
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	46c0      	nop			@ (mov r8, r8)
 800fe8c:	ffffeeee 	.word	0xffffeeee

0800fe90 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800fea4:	e007      	b.n	800feb6 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800fea6:	697a      	ldr	r2, [r7, #20]
 800fea8:	1c53      	adds	r3, r2, #1
 800feaa:	617b      	str	r3, [r7, #20]
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	1c59      	adds	r1, r3, #1
 800feb0:	6139      	str	r1, [r7, #16]
 800feb2:	7812      	ldrb	r2, [r2, #0]
 800feb4:	701a      	strb	r2, [r3, #0]
    while(length--)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	1e5a      	subs	r2, r3, #1
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1f2      	bne.n	800fea6 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800fec0:	46c0      	nop			@ (mov r8, r8)
}
 800fec2:	46bd      	mov	sp, r7
 800fec4:	b006      	add	sp, #24
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b08a      	sub	sp, #40	@ 0x28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 800fed0:	2300      	movs	r3, #0
 800fed2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 800fed8:	6a3b      	ldr	r3, [r7, #32]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d02f      	beq.n	800ff3e <_ux_utility_memory_free+0x76>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	3b08      	subs	r3, #8
 800fee2:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800fee4:	6a3b      	ldr	r3, [r7, #32]
 800fee6:	3304      	adds	r3, #4
 800fee8:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4a26      	ldr	r2, [pc, #152]	@ (800ff8c <_ux_utility_memory_free+0xc4>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d01c      	beq.n	800ff32 <_ux_utility_memory_free+0x6a>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800fef8:	6a3b      	ldr	r3, [r7, #32]
 800fefa:	3304      	adds	r3, #4
 800fefc:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 800ff08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00b      	beq.n	800ff26 <_ux_utility_memory_free+0x5e>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800ff0e:	4b20      	ldr	r3, [pc, #128]	@ (800ff90 <_ux_utility_memory_free+0xc8>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 800ff14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d017      	beq.n	800ff4a <_ux_utility_memory_free+0x82>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 800ff1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ff90 <_ux_utility_memory_free+0xc8>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800ff20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d011      	beq.n	800ff4a <_ux_utility_memory_free+0x82>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800ff26:	2219      	movs	r2, #25
 800ff28:	2108      	movs	r1, #8
 800ff2a:	2002      	movs	r0, #2
 800ff2c:	f7ff fc54 	bl	800f7d8 <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 800ff30:	e029      	b.n	800ff86 <_ux_utility_memory_free+0xbe>
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800ff32:	2219      	movs	r2, #25
 800ff34:	2108      	movs	r1, #8
 800ff36:	2002      	movs	r0, #2
 800ff38:	f7ff fc4e 	bl	800f7d8 <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 800ff3c:	e023      	b.n	800ff86 <_ux_utility_memory_free+0xbe>

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800ff3e:	2219      	movs	r2, #25
 800ff40:	2108      	movs	r1, #8
 800ff42:	2002      	movs	r0, #2
 800ff44:	f7ff fc48 	bl	800f7d8 <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 800ff48:	e01d      	b.n	800ff86 <_ux_utility_memory_free+0xbe>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	4a0d      	ldr	r2, [pc, #52]	@ (800ff8c <_ux_utility_memory_free+0xc4>)
 800ff58:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ff5a:	6a3b      	ldr	r3, [r7, #32]
 800ff5c:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	68f9      	ldr	r1, [r7, #12]
 800ff6a:	6a3a      	ldr	r2, [r7, #32]
 800ff6c:	1a8a      	subs	r2, r1, r2
 800ff6e:	189a      	adds	r2, r3, r2
    pool_ptr -> ux_byte_pool_available =
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 800ff74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	6a3a      	ldr	r2, [r7, #32]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d202      	bcs.n	800ff84 <_ux_utility_memory_free+0xbc>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff80:	6a3a      	ldr	r2, [r7, #32]
 800ff82:	609a      	str	r2, [r3, #8]

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
 800ff84:	46c0      	nop			@ (mov r8, r8)
}
 800ff86:	46bd      	mov	sp, r7
 800ff88:	b00a      	add	sp, #40	@ 0x28
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	ffffeeee 	.word	0xffffeeee
 800ff90:	200007d4 	.word	0x200007d4

0800ff94 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	607a      	str	r2, [r7, #4]
 800ff9e:	230b      	movs	r3, #11
 800ffa0:	18fb      	adds	r3, r7, r3
 800ffa2:	1c0a      	adds	r2, r1, #0
 800ffa4:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800ffaa:	e006      	b.n	800ffba <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	1c5a      	adds	r2, r3, #1
 800ffb0:	617a      	str	r2, [r7, #20]
 800ffb2:	220b      	movs	r2, #11
 800ffb4:	18ba      	adds	r2, r7, r2
 800ffb6:	7812      	ldrb	r2, [r2, #0]
 800ffb8:	701a      	strb	r2, [r3, #0]
    while(length--)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	1e5a      	subs	r2, r3, #1
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1f3      	bne.n	800ffac <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 800ffc4:	46c0      	nop			@ (mov r8, r8)
}
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	b006      	add	sp, #24
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	1c5a      	adds	r2, r3, #1
 800ffd8:	607a      	str	r2, [r7, #4]
 800ffda:	781a      	ldrb	r2, [r3, #0]
 800ffdc:	200e      	movs	r0, #14
 800ffde:	183b      	adds	r3, r7, r0
 800ffe0:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	021b      	lsls	r3, r3, #8
 800ffe8:	b299      	uxth	r1, r3
 800ffea:	183b      	adds	r3, r7, r0
 800ffec:	183a      	adds	r2, r7, r0
 800ffee:	8812      	ldrh	r2, [r2, #0]
 800fff0:	430a      	orrs	r2, r1
 800fff2:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 800fff4:	183b      	adds	r3, r7, r0
 800fff6:	881b      	ldrh	r3, [r3, #0]
}
 800fff8:	0018      	movs	r0, r3
 800fffa:	46bd      	mov	sp, r7
 800fffc:	b004      	add	sp, #16
 800fffe:	bd80      	pop	{r7, pc}

08010000 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8010012:	23ff      	movs	r3, #255	@ 0xff
 8010014:	e01d      	b.n	8010052 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8010016:	2300      	movs	r3, #0
 8010018:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	18d3      	adds	r3, r2, r3
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00d      	beq.n	8010042 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	3301      	adds	r3, #1
 801002a:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 801002c:	697a      	ldr	r2, [r7, #20]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d9f2      	bls.n	801001a <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8010034:	22ff      	movs	r2, #255	@ 0xff
 8010036:	2108      	movs	r1, #8
 8010038:	2002      	movs	r0, #2
 801003a:	f7ff fbcd 	bl	800f7d8 <_ux_system_error_handler>

            return(UX_ERROR);
 801003e:	23ff      	movs	r3, #255	@ 0xff
 8010040:	e007      	b.n	8010052 <_ux_utility_string_length_check+0x52>
            break;
 8010042:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (string_length_ptr)
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d002      	beq.n	8010050 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	697a      	ldr	r2, [r7, #20]
 801004e:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8010050:	2300      	movs	r3, #0
}
 8010052:	0018      	movs	r0, r3
 8010054:	46bd      	mov	sp, r7
 8010056:	b006      	add	sp, #24
 8010058:	bd80      	pop	{r7, pc}

0801005a <_ux_device_class_hid_activate>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 801005a:	b580      	push	{r7, lr}
 801005c:	b08a      	sub	sp, #40	@ 0x28
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface_ptr;
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	623b      	str	r3, [r7, #32]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	61fb      	str	r3, [r7, #28]
UCHAR                                   *pos;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6a1b      	ldr	r3, [r3, #32]
 801006e:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010074:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	693a      	ldr	r2, [r7, #16]
 8010080:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	69db      	ldr	r3, [r3, #28]
 801008c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 801008e:	e019      	b.n	80100c4 <_ux_device_class_hid_activate+0x6a>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8010090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010092:	7bdb      	ldrb	r3, [r3, #15]
 8010094:	001a      	movs	r2, r3
 8010096:	2303      	movs	r3, #3
 8010098:	4013      	ands	r3, r2
 801009a:	2b03      	cmp	r3, #3
 801009c:	d10f      	bne.n	80100be <_ux_device_class_hid_activate+0x64>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 801009e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a0:	7b9b      	ldrb	r3, [r3, #14]
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 80100a2:	b25b      	sxtb	r3, r3
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	da05      	bge.n	80100b4 <_ux_device_class_hid_activate+0x5a>
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 80100a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100aa:	623b      	str	r3, [r7, #32]
                        ux_slave_transfer_request_data_pointer =
                                UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
#endif

#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d005      	beq.n	80100be <_ux_device_class_hid_activate+0x64>
#endif
                    break;
 80100b2:	e00c      	b.n	80100ce <_ux_device_class_hid_activate+0x74>
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
            else
            {

                /* It's optional interrupt OUT endpoint.  */
                endpoint_out = endpoint_interrupt;
 80100b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b6:	61fb      	str	r3, [r7, #28]
                endpoint_out -> ux_slave_endpoint_transfer_request.
                        ux_slave_transfer_request_data_pointer =
                                UX_DEVICE_CLASS_HID_INTERRUPTOUT_BUFFER(hid);
#endif

                if (endpoint_in != UX_NULL)
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d106      	bne.n	80100cc <_ux_device_class_hid_activate+0x72>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 80100be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (endpoint_interrupt != UX_NULL)
 80100c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1e2      	bne.n	8010090 <_ux_device_class_hid_activate+0x36>
 80100ca:	e000      	b.n	80100ce <_ux_device_class_hid_activate+0x74>
                    break;
 80100cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d101      	bne.n	80100d8 <_ux_device_class_hid_activate+0x7e>
        return (UX_ERROR);
 80100d4:	23ff      	movs	r3, #255	@ 0xff
 80100d6:	e04b      	b.n	8010170 <_ux_device_class_hid_activate+0x116>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	2201      	movs	r2, #1
 80100dc:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	6a3a      	ldr	r2, [r7, #32]
 80100e2:	605a      	str	r2, [r3, #4]

#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)

    /* Save endpoint OUT.  */
    hid -> ux_device_class_hid_read_endpoint              = endpoint_out;
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	69fa      	ldr	r2, [r7, #28]
 80100e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Resume receiver thread/task (if present).  */
    if (hid -> ux_device_class_hid_receiver && endpoint_out)
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d026      	beq.n	8010140 <_ux_device_class_hid_activate+0xe6>
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d023      	beq.n	8010140 <_ux_device_class_hid_activate+0xe6>
    {

        /* Reset events.  */
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_save_pos =
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_save_pos =
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 8010100:	68d2      	ldr	r2, [r2, #12]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_save_pos =
 8010102:	619a      	str	r2, [r3, #24]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_read_pos =
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_read_pos =
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
            hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 801010c:	68d2      	ldr	r2, [r2, #12]
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_event_read_pos =
 801010e:	615a      	str	r2, [r3, #20]
        for (pos = (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events;
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	61bb      	str	r3, [r7, #24]
 8010118:	e009      	b.n	801012e <_ux_device_class_hid_activate+0xd4>
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
             pos += UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(hid -> ux_device_class_hid_receiver))
        {
            ((UX_DEVICE_CLASS_HID_RECEIVED_EVENT*)pos) -> ux_device_class_hid_received_event_length = 0;
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
             pos += UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(hid -> ux_device_class_hid_receiver))
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	3304      	adds	r3, #4
 8010128:	69ba      	ldr	r2, [r7, #24]
 801012a:	18d3      	adds	r3, r2, r3
 801012c:	61bb      	str	r3, [r7, #24]
             pos < (UCHAR*)hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_events_end;
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	69ba      	ldr	r2, [r7, #24]
 8010136:	429a      	cmp	r2, r3
 8010138:	d3ef      	bcc.n	801011a <_ux_device_class_hid_activate+0xc0>
        /* Resume thread.  */
        _ux_utility_thread_resume(&hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_thread);
#else

        /* Setup read state for receiver.  */
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	2223      	movs	r2, #35	@ 0x23
 801013e:	675a      	str	r2, [r3, #116]	@ 0x74
    /* Resume thread.  */
    _ux_device_thread_resume(&class_ptr -> ux_slave_class_thread);
#else

    /* Reset event buffered for background transfer.  */
    _ux_utility_memory_set((VOID *)&hid -> ux_device_class_hid_event, 0,
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	3330      	adds	r3, #48	@ 0x30
 8010144:	2210      	movs	r2, #16
 8010146:	2100      	movs	r1, #0
 8010148:	0018      	movs	r0, r3
 801014a:	f7ff ff23 	bl	800ff94 <_ux_utility_memory_set>
                                            sizeof(UX_DEVICE_CLASS_HID_EVENT)); /* Use case of memset is verified. */
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
                    endpoint_in -> ux_slave_endpoint_transfer_request.
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	639a      	str	r2, [r3, #56]	@ 0x38
                                    ux_slave_transfer_request_transfer_length;

    /* Reset event sending state.  */
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2200      	movs	r2, #0
 801015a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	695b      	ldr	r3, [r3, #20]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d004      	beq.n	801016e <_ux_device_class_hid_activate+0x114>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	695b      	ldr	r3, [r3, #20]
 8010168:	693a      	ldr	r2, [r7, #16]
 801016a:	0010      	movs	r0, r2
 801016c:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 801016e:	2300      	movs	r3, #0
}
 8010170:	0018      	movs	r0, r3
 8010172:	46bd      	mov	sp, r7
 8010174:	b00a      	add	sp, #40	@ 0x28
 8010176:	bd80      	pop	{r7, pc}

08010178 <_ux_device_class_hid_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b08c      	sub	sp, #48	@ 0x30
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010180:	4b5a      	ldr	r3, [pc, #360]	@ (80102ec <_ux_device_class_hid_control_request+0x174>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	3324      	adds	r3, #36	@ 0x24
 8010186:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8010188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018a:	3338      	adds	r3, #56	@ 0x38
 801018c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801018e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010190:	223d      	movs	r2, #61	@ 0x3d
 8010192:	5c9b      	ldrb	r3, [r3, r2]
 8010194:	627b      	str	r3, [r7, #36]	@ 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8010196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010198:	333c      	adds	r3, #60	@ 0x3c
 801019a:	3302      	adds	r3, #2
 801019c:	0018      	movs	r0, r3
 801019e:	f7ff ff15 	bl	800ffcc <_ux_utility_short_get>
 80101a2:	0003      	movs	r3, r0
 80101a4:	623b      	str	r3, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 80101a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a8:	333c      	adds	r3, #60	@ 0x3c
 80101aa:	3304      	adds	r3, #4
 80101ac:	0018      	movs	r0, r3
 80101ae:	f7ff ff0d 	bl	800ffcc <_ux_utility_short_get>
 80101b2:	0003      	movs	r3, r0
 80101b4:	61fb      	str	r3, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80101b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b8:	333c      	adds	r3, #60	@ 0x3c
 80101ba:	3306      	adds	r3, #6
 80101bc:	0018      	movs	r0, r3
 80101be:	f7ff ff05 	bl	800ffcc <_ux_utility_short_get>
 80101c2:	0003      	movs	r3, r0
 80101c4:	61bb      	str	r3, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 80101c6:	2317      	movs	r3, #23
 80101c8:	18fb      	adds	r3, r7, r3
 80101ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101cc:	213f      	movs	r1, #63	@ 0x3f
 80101ce:	5c52      	ldrb	r2, [r2, r1]
 80101d0:	701a      	strb	r2, [r3, #0]
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6a1b      	ldr	r3, [r3, #32]
 80101d6:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101dc:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80101de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e0:	2b0b      	cmp	r3, #11
 80101e2:	d900      	bls.n	80101e6 <_ux_device_class_hid_control_request+0x6e>
 80101e4:	e079      	b.n	80102da <_ux_device_class_hid_control_request+0x162>
 80101e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e8:	009a      	lsls	r2, r3, #2
 80101ea:	4b41      	ldr	r3, [pc, #260]	@ (80102f0 <_ux_device_class_hid_control_request+0x178>)
 80101ec:	18d3      	adds	r3, r2, r3
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	469f      	mov	pc, r3
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	69fa      	ldr	r2, [r7, #28]
 80101f6:	6a39      	ldr	r1, [r7, #32]
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f000 fc69 	bl	8010ad0 <_ux_device_class_hid_report_get>
            break;
 80101fe:	e06f      	b.n	80102e0 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	0a1b      	lsrs	r3, r3, #8
 8010204:	22ff      	movs	r2, #255	@ 0xff
 8010206:	4013      	ands	r3, r2
 8010208:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	69fa      	ldr	r2, [r7, #28]
 801020e:	68b9      	ldr	r1, [r7, #8]
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 fcf3 	bl	8010bfc <_ux_device_class_hid_report_set>
            break;
 8010216:	e063      	b.n	80102e0 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	69fa      	ldr	r2, [r7, #28]
 801021c:	6a39      	ldr	r1, [r7, #32]
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f000 f886 	bl	8010330 <_ux_device_class_hid_descriptor_send>
            break;            
 8010224:	e05c      	b.n	80102e0 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8010226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010228:	2b02      	cmp	r3, #2
 801022a:	d10c      	bne.n	8010246 <_ux_device_class_hid_control_request+0xce>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	b2d2      	uxtb	r2, r2
 8010236:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8010238:	69ba      	ldr	r2, [r7, #24]
 801023a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801023c:	2101      	movs	r1, #1
 801023e:	0018      	movs	r0, r3
 8010240:	f7ff f9ff 	bl	800f642 <_ux_device_stack_transfer_request>
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 8010244:	e04b      	b.n	80102de <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801024a:	b2db      	uxtb	r3, r3
 801024c:	2117      	movs	r1, #23
 801024e:	187a      	adds	r2, r7, r1
 8010250:	7812      	ldrb	r2, [r2, #0]
 8010252:	429a      	cmp	r2, r3
 8010254:	d043      	beq.n	80102de <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8010256:	187b      	adds	r3, r7, r1
 8010258:	781a      	ldrb	r2, [r3, #0]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	641a      	str	r2, [r3, #64]	@ 0x40
                    if (duration == 0)
 801025e:	187b      	adds	r3, r7, r1
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d104      	bne.n	8010270 <_ux_device_class_hid_control_request+0xf8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2201      	movs	r2, #1
 801026a:	4252      	negs	r2, r2
 801026c:	645a      	str	r2, [r3, #68]	@ 0x44
            break;
 801026e:	e036      	b.n	80102de <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8010270:	2317      	movs	r3, #23
 8010272:	18fb      	adds	r3, r7, r3
 8010274:	781a      	ldrb	r2, [r3, #0]
 8010276:	0013      	movs	r3, r2
 8010278:	015b      	lsls	r3, r3, #5
 801027a:	1a9b      	subs	r3, r3, r2
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	189b      	adds	r3, r3, r2
 8010280:	015b      	lsls	r3, r3, #5
 8010282:	001a      	movs	r2, r3
 8010284:	23fa      	movs	r3, #250	@ 0xfa
 8010286:	0099      	lsls	r1, r3, #2
 8010288:	0010      	movs	r0, r2
 801028a:	f7ef ff59 	bl	8000140 <__udivsi3>
 801028e:	0003      	movs	r3, r0
 8010290:	001a      	movs	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	645a      	str	r2, [r3, #68]	@ 0x44
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801029a:	2b00      	cmp	r3, #0
 801029c:	d104      	bne.n	80102a8 <_ux_device_class_hid_control_request+0x130>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	645a      	str	r2, [r3, #68]	@ 0x44
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ac:	2b05      	cmp	r3, #5
 80102ae:	d016      	beq.n	80102de <_ux_device_class_hid_control_request+0x166>
                            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2200      	movs	r2, #0
 80102b4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80102b6:	e012      	b.n	80102de <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80102bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	b2d2      	uxtb	r2, r2
 80102c2:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 80102c4:	69ba      	ldr	r2, [r7, #24]
 80102c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c8:	2101      	movs	r1, #1
 80102ca:	0018      	movs	r0, r3
 80102cc:	f7ff f9b9 	bl	800f642 <_ux_device_stack_transfer_request>
            break;
 80102d0:	e006      	b.n	80102e0 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6a3a      	ldr	r2, [r7, #32]
 80102d6:	649a      	str	r2, [r3, #72]	@ 0x48
            break;
 80102d8:	e002      	b.n	80102e0 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80102da:	23ff      	movs	r3, #255	@ 0xff
 80102dc:	e001      	b.n	80102e2 <_ux_device_class_hid_control_request+0x16a>
            break;
 80102de:	46c0      	nop			@ (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	0018      	movs	r0, r3
 80102e4:	46bd      	mov	sp, r7
 80102e6:	b00c      	add	sp, #48	@ 0x30
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	46c0      	nop			@ (mov r8, r8)
 80102ec:	200007d0 	.word	0x200007d0
 80102f0:	08015c9c 	.word	0x08015c9c

080102f4 <_ux_device_class_hid_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a1b      	ldr	r3, [r3, #32]
 8010300:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010306:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	2126      	movs	r1, #38	@ 0x26
 801030e:	0018      	movs	r0, r3
 8010310:	f7ff f984 	bl	800f61c <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d004      	beq.n	8010326 <_ux_device_class_hid_deactivate+0x32>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	699b      	ldr	r3, [r3, #24]
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	0010      	movs	r0, r2
 8010324:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 8010326:	2300      	movs	r3, #0
}
 8010328:	0018      	movs	r0, r3
 801032a:	46bd      	mov	sp, r7
 801032c:	b004      	add	sp, #16
 801032e:	bd80      	pop	{r7, pc}

08010330 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b08e      	sub	sp, #56	@ 0x38
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
 801033c:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 801033e:	23ff      	movs	r3, #255	@ 0xff
 8010340:	633b      	str	r3, [r7, #48]	@ 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 8010342:	232b      	movs	r3, #43	@ 0x2b
 8010344:	18fb      	adds	r3, r7, r3
 8010346:	22ff      	movs	r2, #255	@ 0xff
 8010348:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801034a:	4b60      	ldr	r3, [pc, #384]	@ (80104cc <_ux_device_class_hid_descriptor_send+0x19c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010350:	4b5e      	ldr	r3, [pc, #376]	@ (80104cc <_ux_device_class_hid_descriptor_send+0x19c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3324      	adds	r3, #36	@ 0x24
 8010356:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8010358:	6a3b      	ldr	r3, [r7, #32]
 801035a:	3318      	adds	r3, #24
 801035c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	3320      	adds	r3, #32
 8010362:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	2203      	movs	r2, #3
 8010368:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	0a1b      	lsrs	r3, r3, #8
 801036e:	b2db      	uxtb	r3, r3
 8010370:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	2b21      	cmp	r3, #33	@ 0x21
 8010376:	d003      	beq.n	8010380 <_ux_device_class_hid_descriptor_send+0x50>
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2b22      	cmp	r3, #34	@ 0x22
 801037c:	d067      	beq.n	801044e <_ux_device_class_hid_descriptor_send+0x11e>
 801037e:	e096      	b.n	80104ae <_ux_device_class_hid_descriptor_send+0x17e>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8010380:	4b52      	ldr	r3, [pc, #328]	@ (80104cc <_ux_device_class_hid_descriptor_send+0x19c>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	22cc      	movs	r2, #204	@ 0xcc
 8010386:	589b      	ldr	r3, [r3, r2]
 8010388:	637b      	str	r3, [r7, #52]	@ 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 801038a:	4b50      	ldr	r3, [pc, #320]	@ (80104cc <_ux_device_class_hid_descriptor_send+0x19c>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	22d0      	movs	r2, #208	@ 0xd0
 8010390:	589b      	ldr	r3, [r3, r2]
 8010392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010394:	18d3      	adds	r3, r2, r3
 8010396:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8010398:	e048      	b.n	801042c <_ux_device_class_hid_descriptor_send+0xfc>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 801039a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801039c:	3301      	adds	r3, #1
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 80103a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	2b04      	cmp	r3, #4
 80103ac:	d104      	bne.n	80103b8 <_ux_device_class_hid_descriptor_send+0x88>
                interface_number = *(device_framework + 2);
 80103ae:	232b      	movs	r3, #43	@ 0x2b
 80103b0:	18fb      	adds	r3, r7, r3
 80103b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103b4:	7892      	ldrb	r2, [r2, #2]
 80103b6:	701a      	strb	r2, [r3, #0]

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	2b21      	cmp	r3, #33	@ 0x21
 80103bc:	d132      	bne.n	8010424 <_ux_device_class_hid_descriptor_send+0xf4>
                (interface_number == (UCHAR)request_index))
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 80103c2:	222b      	movs	r2, #43	@ 0x2b
 80103c4:	18ba      	adds	r2, r7, r2
 80103c6:	7812      	ldrb	r2, [r2, #0]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d12b      	bne.n	8010424 <_ux_device_class_hid_descriptor_send+0xf4>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 80103cc:	697a      	ldr	r2, [r7, #20]
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d202      	bcs.n	80103da <_ux_device_class_hid_descriptor_send+0xaa>
                    length =  descriptor_length;
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103d8:	e001      	b.n	80103de <_ux_device_class_hid_descriptor_send+0xae>
                else                            
                    length =  host_length;                
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80103de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103e0:	2380      	movs	r3, #128	@ 0x80
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d90d      	bls.n	8010404 <_ux_device_class_hid_descriptor_send+0xd4>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 80103e8:	2212      	movs	r2, #18
 80103ea:	2107      	movs	r1, #7
 80103ec:	2002      	movs	r0, #2
 80103ee:	f7ff f9f3 	bl	800f7d8 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80103f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f4:	699b      	ldr	r3, [r3, #24]
 80103f6:	69fa      	ldr	r2, [r7, #28]
 80103f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103fa:	2114      	movs	r1, #20
 80103fc:	4798      	blx	r3
 80103fe:	0003      	movs	r3, r0
 8010400:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8010402:	e017      	b.n	8010434 <_ux_device_class_hid_descriptor_send+0x104>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8010404:	69bb      	ldr	r3, [r7, #24]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801040a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801040c:	0018      	movs	r0, r3
 801040e:	f7ff fd3f 	bl	800fe90 <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	0018      	movs	r0, r3
 801041a:	f7ff f912 	bl	800f642 <_ux_device_stack_transfer_request>
 801041e:	0003      	movs	r3, r0
 8010420:	633b      	str	r3, [r7, #48]	@ 0x30
                break;
 8010422:	e007      	b.n	8010434 <_ux_device_class_hid_descriptor_send+0x104>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8010424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	18d3      	adds	r3, r2, r3
 801042a:	637b      	str	r3, [r7, #52]	@ 0x34
        while (device_framework < device_framework_end)
 801042c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	429a      	cmp	r2, r3
 8010432:	d3b2      	bcc.n	801039a <_ux_device_class_hid_descriptor_send+0x6a>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 8010434:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	429a      	cmp	r2, r3
 801043a:	d340      	bcc.n	80104be <_ux_device_class_hid_descriptor_send+0x18e>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801043c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801043e:	699b      	ldr	r3, [r3, #24]
 8010440:	69fa      	ldr	r2, [r7, #28]
 8010442:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010444:	2114      	movs	r1, #20
 8010446:	4798      	blx	r3
 8010448:	0003      	movs	r3, r0
 801044a:	633b      	str	r3, [r7, #48]	@ 0x30

        break;
 801044c:	e037      	b.n	80104be <_ux_device_class_hid_descriptor_send+0x18e>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010452:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	429a      	cmp	r2, r3
 801045a:	d202      	bcs.n	8010462 <_ux_device_class_hid_descriptor_send+0x132>
            length =  descriptor_length;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010460:	e001      	b.n	8010466 <_ux_device_class_hid_descriptor_send+0x136>
        else                            
            length =  host_length;                
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8010466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010468:	2380      	movs	r3, #128	@ 0x80
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	429a      	cmp	r2, r3
 801046e:	d90d      	bls.n	801048c <_ux_device_class_hid_descriptor_send+0x15c>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8010470:	2212      	movs	r2, #18
 8010472:	2107      	movs	r1, #7
 8010474:	2002      	movs	r0, #2
 8010476:	f7ff f9af 	bl	800f7d8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801047a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801047c:	699b      	ldr	r3, [r3, #24]
 801047e:	69fa      	ldr	r2, [r7, #28]
 8010480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010482:	2114      	movs	r1, #20
 8010484:	4798      	blx	r3
 8010486:	0003      	movs	r3, r0
 8010488:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 801048a:	e019      	b.n	80104c0 <_ux_device_class_hid_descriptor_send+0x190>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8010494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010496:	0019      	movs	r1, r3
 8010498:	f7ff fcfa 	bl	800fe90 <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801049c:	683a      	ldr	r2, [r7, #0]
 801049e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	0018      	movs	r0, r3
 80104a4:	f7ff f8cd 	bl	800f642 <_ux_device_stack_transfer_request>
 80104a8:	0003      	movs	r3, r0
 80104aa:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80104ac:	e008      	b.n	80104c0 <_ux_device_class_hid_descriptor_send+0x190>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80104ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	69fa      	ldr	r2, [r7, #28]
 80104b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104b6:	2114      	movs	r1, #20
 80104b8:	4798      	blx	r3
        return(UX_ERROR);
 80104ba:	23ff      	movs	r3, #255	@ 0xff
 80104bc:	e001      	b.n	80104c2 <_ux_device_class_hid_descriptor_send+0x192>
        break;
 80104be:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 80104c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80104c2:	0018      	movs	r0, r3
 80104c4:	46bd      	mov	sp, r7
 80104c6:	b00e      	add	sp, #56	@ 0x38
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	46c0      	nop			@ (mov r8, r8)
 80104cc:	200007d0 	.word	0x200007d0

080104d0 <_ux_device_class_hid_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2b07      	cmp	r3, #7
 80104de:	d834      	bhi.n	801054a <_ux_device_class_hid_entry+0x7a>
 80104e0:	009a      	lsls	r2, r3, #2
 80104e2:	4b1c      	ldr	r3, [pc, #112]	@ (8010554 <_ux_device_class_hid_entry+0x84>)
 80104e4:	18d3      	adds	r3, r2, r3
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	469f      	mov	pc, r3

        /* Call the init function of the HID class.  */
#if defined(UX_DEVICE_CLASS_HID_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_hid_initialize(command);
#else
        status =  _ux_device_class_hid_initialize(command);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	0018      	movs	r0, r3
 80104ee:	f000 f90d 	bl	801070c <_ux_device_class_hid_initialize>
 80104f2:	0003      	movs	r3, r0
 80104f4:	60fb      	str	r3, [r7, #12]
#endif

        /* Return the completion status.  */
        return(status);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	e028      	b.n	801054c <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	0018      	movs	r0, r3
 80104fe:	f000 fc73 	bl	8010de8 <_ux_device_class_hid_uninitialize>
 8010502:	0003      	movs	r3, r0
 8010504:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	e020      	b.n	801054c <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	2b03      	cmp	r3, #3
 8010510:	d101      	bne.n	8010516 <_ux_device_class_hid_entry+0x46>
            return(UX_SUCCESS);
 8010512:	2300      	movs	r3, #0
 8010514:	e01a      	b.n	801054c <_ux_device_class_hid_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 8010516:	2357      	movs	r3, #87	@ 0x57
 8010518:	e018      	b.n	801054c <_ux_device_class_hid_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	0018      	movs	r0, r3
 801051e:	f7ff fd9c 	bl	801005a <_ux_device_class_hid_activate>
 8010522:	0003      	movs	r3, r0
 8010524:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	e010      	b.n	801054c <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	0018      	movs	r0, r3
 801052e:	f7ff fee1 	bl	80102f4 <_ux_device_class_hid_deactivate>
 8010532:	0003      	movs	r3, r0
 8010534:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	e008      	b.n	801054c <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	0018      	movs	r0, r3
 801053e:	f7ff fe1b 	bl	8010178 <_ux_device_class_hid_control_request>
 8010542:	0003      	movs	r3, r0
 8010544:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	e000      	b.n	801054c <_ux_device_class_hid_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 801054a:	2354      	movs	r3, #84	@ 0x54
    }   
}
 801054c:	0018      	movs	r0, r3
 801054e:	46bd      	mov	sp, r7
 8010550:	b004      	add	sp, #16
 8010552:	bd80      	pop	{r7, pc}
 8010554:	08015ccc 	.word	0x08015ccc

08010558 <_ux_device_class_hid_event_check>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_check(UX_SLAVE_CLASS_HID *hid,
                                       UX_DEVICE_CLASS_HID_EVENT **hid_event)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
UX_SLAVE_DEVICE                 *device;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010562:	4b0d      	ldr	r3, [pc, #52]	@ (8010598 <_ux_device_class_hid_event_check+0x40>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3324      	adds	r3, #36	@ 0x24
 8010568:	60fb      	str	r3, [r7, #12]

    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b03      	cmp	r3, #3
 8010570:	d001      	beq.n	8010576 <_ux_device_class_hid_event_check+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 8010572:	2350      	movs	r3, #80	@ 0x50
 8010574:	e00c      	b.n	8010590 <_ux_device_class_hid_event_check+0x38>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head ==
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
        hid -> ux_device_class_hid_event_array_tail)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if (hid -> ux_device_class_hid_event_array_head ==
 801057e:	429a      	cmp	r2, r3
 8010580:	d101      	bne.n	8010586 <_ux_device_class_hid_event_check+0x2e>

        /* No event to report.  */
        return(UX_ERROR);
 8010582:	23ff      	movs	r3, #255	@ 0xff
 8010584:	e004      	b.n	8010590 <_ux_device_class_hid_event_check+0x38>

    /* There is an event to report, get the current pointer to the event.  */
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	601a      	str	r2, [r3, #0]
    return(UX_SUCCESS);
 801058e:	2300      	movs	r3, #0
}
 8010590:	0018      	movs	r0, r3
 8010592:	46bd      	mov	sp, r7
 8010594:	b004      	add	sp, #16
 8010596:	bd80      	pop	{r7, pc}
 8010598:	200007d0 	.word	0x200007d0

0801059c <_ux_device_class_hid_event_free>:
/*                                                                        */
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
UCHAR                           *pos;

    pos = (UCHAR *) hid -> ux_device_class_hid_event_array_tail;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105a8:	60fb      	str	r3, [r7, #12]
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	334c      	adds	r3, #76	@ 0x4c
 80105ae:	60fb      	str	r3, [r7, #12]
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d302      	bcc.n	80105c0 <_ux_device_class_hid_event_free+0x24>
        pos = (UCHAR *) hid -> ux_device_class_hid_event_array;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105be:	60fb      	str	r3, [r7, #12]
    hid -> ux_device_class_hid_event_array_tail = (UX_DEVICE_CLASS_HID_EVENT *) pos;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80105c6:	46c0      	nop			@ (mov r8, r8)
 80105c8:	46bd      	mov	sp, r7
 80105ca:	b004      	add	sp, #16
 80105cc:	bd80      	pop	{r7, pc}

080105ce <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,
                                     UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Check and get event pointer.  */
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 80105d8:	2308      	movs	r3, #8
 80105da:	18fa      	adds	r2, r7, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	0011      	movs	r1, r2
 80105e0:	0018      	movs	r0, r3
 80105e2:	f7ff ffb9 	bl	8010558 <_ux_device_class_hid_event_check>
 80105e6:	0003      	movs	r3, r0
 80105e8:	60fb      	str	r3, [r7, #12]
    if (status != UX_SUCCESS)
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <_ux_device_class_hid_event_get+0x26>
        return(status);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	e01a      	b.n	801062a <_ux_device_class_hid_event_get+0x5c>

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	689b      	ldr	r3, [r3, #8]
 80105f8:	2b40      	cmp	r3, #64	@ 0x40
 80105fa:	d902      	bls.n	8010602 <_ux_device_class_hid_event_get+0x34>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid);
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2240      	movs	r2, #64	@ 0x40
 8010600:	609a      	str	r2, [r3, #8]

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	689a      	ldr	r2, [r3, #8]
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	609a      	str	r2, [r3, #8]

    /* Copy the event data into the user buffer.  */
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	330c      	adds	r3, #12
 801060e:	0018      	movs	r0, r3
                            UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	330c      	adds	r3, #12
 8010614:	0019      	movs	r1, r3
                            current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 8010616:	68bb      	ldr	r3, [r7, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	001a      	movs	r2, r3
 801061c:	f7ff fc38 	bl	800fe90 <_ux_utility_memory_copy>

    /* Free the tail event.  */
    _ux_device_class_hid_event_free(hid);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	0018      	movs	r0, r3
 8010624:	f7ff ffba 	bl	801059c <_ux_device_class_hid_event_free>

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8010628:	2300      	movs	r3, #0
}
 801062a:	0018      	movs	r0, r3
 801062c:	46bd      	mov	sp, r7
 801062e:	b004      	add	sp, #16
 8010630:	bd80      	pop	{r7, pc}

08010632 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b086      	sub	sp, #24
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010640:	613b      	str	r3, [r7, #16]

    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d101      	bne.n	801064c <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 8010648:	23ff      	movs	r3, #255	@ 0xff
 801064a:	e05a      	b.n	8010702 <_ux_device_class_hid_event_set+0xd0>
    
    /* Calculate the next position.  */
    next_position = (UCHAR *)current_hid_event + UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	334c      	adds	r3, #76	@ 0x4c
 8010650:	617b      	str	r3, [r7, #20]
    if (next_position >= (UCHAR *)hid -> ux_device_class_hid_event_array_end)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010656:	697a      	ldr	r2, [r7, #20]
 8010658:	429a      	cmp	r2, r3
 801065a:	d302      	bcc.n	8010662 <_ux_device_class_hid_event_set+0x30>
        next_position = (UCHAR *)hid -> ux_device_class_hid_event_array;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010660:	617b      	str	r3, [r7, #20]
    next_hid_event = (UX_DEVICE_CLASS_HID_EVENT *)next_position;
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	60fb      	str	r3, [r7, #12]

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	429a      	cmp	r2, r3
 801066e:	d101      	bne.n	8010674 <_ux_device_class_hid_event_set+0x42>
        return (UX_ERROR);
 8010670:	23ff      	movs	r3, #255	@ 0xff
 8010672:	e046      	b.n	8010702 <_ux_device_class_hid_event_set+0xd0>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010678:	613b      	str	r3, [r7, #16]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6a1b      	ldr	r3, [r3, #32]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d121      	bne.n	80106cc <_ux_device_class_hid_event_set+0x9a>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	3301      	adds	r3, #1
 801068e:	2b40      	cmp	r3, #64	@ 0x40
 8010690:	d906      	bls.n	80106a0 <_ux_device_class_hid_event_set+0x6e>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8010692:	2212      	movs	r2, #18
 8010694:	2107      	movs	r1, #7
 8010696:	2002      	movs	r0, #2
 8010698:	f7ff f89e 	bl	800f7d8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 801069c:	2312      	movs	r3, #18
 801069e:	e030      	b.n	8010702 <_ux_device_class_hid_event_set+0xd0>
        }

        /* Store the report ID.  */
        *UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	731a      	strb	r2, [r3, #12]

        /* Store the data itself.  */
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	330c      	adds	r3, #12
 80106ae:	1c58      	adds	r0, r3, #1
                                hid_event -> ux_device_class_hid_event_buffer,
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	330c      	adds	r3, #12
 80106b4:	0019      	movs	r1, r3
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event) + 1,
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	001a      	movs	r2, r3
 80106bc:	f7ff fbe8 	bl	800fe90 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	1c5a      	adds	r2, r3, #1
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	609a      	str	r2, [r3, #8]
 80106ca:	e00e      	b.n	80106ea <_ux_device_class_hid_event_set+0xb8>
    {
    
        /* No report ID to consider.  */

        /* Store copy of data so application can free event there (easier use).  */
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	330c      	adds	r3, #12
 80106d0:	0018      	movs	r0, r3
                                hid_event -> ux_device_class_hid_event_buffer,
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	330c      	adds	r3, #12
 80106d6:	0019      	movs	r1, r3
        _ux_utility_memory_copy(UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	001a      	movs	r2, r3
 80106de:	f7ff fbd7 	bl	800fe90 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	689a      	ldr	r2, [r3, #8]
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	609a      	str	r2, [r3, #8]
    }

#if defined(UX_DEVICE_STANDALONE)

    /* Set state machine to start sending if no transfer on going.  */
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106ee:	2b05      	cmp	r3, #5
 80106f0:	d006      	beq.n	8010700 <_ux_device_class_hid_event_set+0xce>
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT &&
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d002      	beq.n	8010700 <_ux_device_class_hid_event_set+0xce>
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8010700:	2300      	movs	r3, #0
}
 8010702:	0018      	movs	r0, r3
 8010704:	46bd      	mov	sp, r7
 8010706:	b006      	add	sp, #24
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <_ux_device_class_hid_initialize>:
/*                                            checked compile options,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b088      	sub	sp, #32
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class_ptr;
UINT                                    status = UX_SUCCESS;
 8010714:	2300      	movs	r3, #0
 8010716:	61fb      	str	r3, [r7, #28]
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH <= UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
#endif


    /* Get the pointer to the application parameters for the hid class.  */
    hid_parameter =  command -> ux_slave_class_command_parameter;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801071c:	61bb      	str	r3, [r7, #24]

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a1b      	ldr	r3, [r3, #32]
 8010722:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8010724:	227c      	movs	r2, #124	@ 0x7c
 8010726:	2100      	movs	r1, #0
 8010728:	2000      	movs	r0, #0
 801072a:	f7ff f9a1 	bl	800fa70 <_ux_utility_memory_allocate>
 801072e:	0003      	movs	r3, r0
 8010730:	613b      	str	r3, [r7, #16]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <_ux_device_class_hid_initialize+0x30>
        return(UX_MEMORY_INSUFFICIENT);
 8010738:	2312      	movs	r3, #18
 801073a:	e06b      	b.n	8010814 <_ux_device_class_hid_initialize+0x108>

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	693a      	ldr	r2, [r7, #16]
 8010740:	649a      	str	r2, [r3, #72]	@ 0x48
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_buffer =
                                    UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
#endif

    /* Set task function.  */
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	4a35      	ldr	r2, [pc, #212]	@ (801081c <_ux_device_class_hid_initialize+0x110>)
 8010746:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d158      	bne.n	8010800 <_ux_device_class_hid_initialize+0xf4>
        UX_THREAD_EXTENSION_PTR_SET(&(class_ptr -> ux_slave_class_thread), class_ptr)
#endif


        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	689a      	ldr	r2, [r3, #8]
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	691a      	ldr	r2, [r3, #16]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	625a      	str	r2, [r3, #36]	@ 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	68da      	ldr	r2, [r3, #12]
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	695a      	ldr	r2, [r3, #20]
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	699a      	ldr	r2, [r3, #24]
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        UX_ASSERT(!UX_OVERFLOW_CHECK_MULC_ULONG(
                    UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid),
                    UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter)));
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 8010776:	2398      	movs	r3, #152	@ 0x98
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	60fb      	str	r3, [r7, #12]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	001a      	movs	r2, r3
 8010780:	2100      	movs	r1, #0
 8010782:	2000      	movs	r0, #0
 8010784:	f7ff f974 	bl	800fa70 <_ux_utility_memory_allocate>
 8010788:	0002      	movs	r2, r0
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	64da      	str	r2, [r3, #76]	@ 0x4c
            /* Regular event place data following id,type and length.  */
#endif
        }

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010792:	2b00      	cmp	r3, #0
 8010794:	d031      	beq.n	80107fa <_ux_device_class_hid_initialize+0xee>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	651a      	str	r2, [r3, #80]	@ 0x50
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	655a      	str	r2, [r3, #84]	@ 0x54
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	18d2      	adds	r2, r2, r3
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	681a      	ldr	r2, [r3, #0]
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	685a      	ldr	r2, [r3, #4]
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	2201      	movs	r2, #1
 80107c6:	4252      	negs	r2, r2
 80107c8:	645a      	str	r2, [r3, #68]	@ 0x44
                if (status == UX_SUCCESS)
                {
#endif

                    /* If receiver is enabled by parameter, initialize it.  */
                    if (hid_parameter -> ux_device_class_hid_parameter_receiver_initialize)
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	69db      	ldr	r3, [r3, #28]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d008      	beq.n	80107e4 <_ux_device_class_hid_initialize+0xd8>
                    {

                        /* Allocate buffer for receiver and receiver events.  */
                        status = hid_parameter ->
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	69db      	ldr	r3, [r3, #28]
                                ux_device_class_hid_parameter_receiver_initialize(hid,
                                                hid_parameter,
                                                &hid -> ux_device_class_hid_receiver);
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	3260      	adds	r2, #96	@ 0x60
                        status = hid_parameter ->
 80107da:	69b9      	ldr	r1, [r7, #24]
 80107dc:	6938      	ldr	r0, [r7, #16]
 80107de:	4798      	blx	r3
 80107e0:	0003      	movs	r3, r0
 80107e2:	61fb      	str	r3, [r7, #28]
                    }

                    /* Done success, return.  */
                    if (status == UX_SUCCESS)
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d101      	bne.n	80107ee <_ux_device_class_hid_initialize+0xe2>
                        return(status);
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	e012      	b.n	8010814 <_ux_device_class_hid_initialize+0x108>
             * and some error occurs in this stage.  */
            /* Free allocated event array memory.  */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
#endif
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107f2:	0018      	movs	r0, r3
 80107f4:	f7ff fb68 	bl	800fec8 <_ux_utility_memory_free>
 80107f8:	e004      	b.n	8010804 <_ux_device_class_hid_initialize+0xf8>
#endif

        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 80107fa:	2312      	movs	r3, #18
 80107fc:	61fb      	str	r3, [r7, #28]
 80107fe:	e001      	b.n	8010804 <_ux_device_class_hid_initialize+0xf8>
        /* Delete thread.  */
        _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 8010800:	2316      	movs	r3, #22
 8010802:	61fb      	str	r3, [r7, #28]
#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
#endif

    /* Unmount instance. */
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	2200      	movs	r2, #0
 8010808:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	0018      	movs	r0, r3
 801080e:	f7ff fb5b 	bl	800fec8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8010812:	69fb      	ldr	r3, [r7, #28]
}
 8010814:	0018      	movs	r0, r3
 8010816:	46bd      	mov	sp, r7
 8010818:	b008      	add	sp, #32
 801081a:	bd80      	pop	{r7, pc}
 801081c:	08010ca5 	.word	0x08010ca5

08010820 <_ux_device_class_hid_receiver_event_free>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_event_free(UX_SLAVE_CLASS_HID *hid)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
UX_DEVICE_CLASS_HID_RECEIVER            *receiver;
UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *pos;
UCHAR                                   *next_pos;

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801082c:	613b      	str	r3, [r7, #16]

    /* Get current event.  */
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	695b      	ldr	r3, [r3, #20]
 8010832:	60fb      	str	r3, [r7, #12]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_RECEIVER_EVENT_FREE, hid, pos, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* If event is not valid, return error.  */
    if (pos -> ux_device_class_hid_received_event_length == 0)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <_ux_device_class_hid_receiver_event_free+0x20>
        return(UX_ERROR);
 801083c:	23ff      	movs	r3, #255	@ 0xff
 801083e:	e014      	b.n	801086a <_ux_device_class_hid_receiver_event_free+0x4a>

    /* Invalidate the event and advance position.  */

    /* Calculate next item address.  */
    next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	689b      	ldr	r3, [r3, #8]
 8010844:	3304      	adds	r3, #4
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	18d3      	adds	r3, r2, r3
 801084a:	617b      	str	r3, [r7, #20]

    if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	697a      	ldr	r2, [r7, #20]
 8010852:	429a      	cmp	r2, r3
 8010854:	d302      	bcc.n	801085c <_ux_device_class_hid_receiver_event_free+0x3c>
        next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	68db      	ldr	r3, [r3, #12]
 801085a:	617b      	str	r3, [r7, #20]
    receiver -> ux_device_class_hid_receiver_event_read_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	697a      	ldr	r2, [r7, #20]
 8010860:	615a      	str	r2, [r3, #20]

    pos -> ux_device_class_hid_received_event_length = 0;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	601a      	str	r2, [r3, #0]
    /* Inform receiver thread to (re)start.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group,
                                UX_DEVICE_CLASS_HID_RECEIVER_RESTART, UX_OR);

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8010868:	2300      	movs	r3, #0
#endif
}
 801086a:	0018      	movs	r0, r3
 801086c:	46bd      	mov	sp, r7
 801086e:	b006      	add	sp, #24
 8010870:	bd80      	pop	{r7, pc}

08010872 <_ux_device_class_hid_receiver_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_event_get(UX_SLAVE_CLASS_HID *hid,
                                UX_DEVICE_CLASS_HID_RECEIVED_EVENT *event)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b084      	sub	sp, #16
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_RECEIVER_EVENT_GET, hid, event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get receiver.  */
    receiver = hid -> ux_device_class_hid_receiver;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010880:	60fb      	str	r3, [r7, #12]

    /* Get current reading position.  */
    pos = receiver -> ux_device_class_hid_receiver_event_read_pos;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	695b      	ldr	r3, [r3, #20]
 8010886:	60bb      	str	r3, [r7, #8]

    /* Check if it's available.  */
    if (pos -> ux_device_class_hid_received_event_length != 0)
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d009      	beq.n	80108a4 <_ux_device_class_hid_receiver_event_get+0x32>
    {

        /* Fill event structure to return.  */
        event -> ux_device_class_hid_received_event_length = pos -> ux_device_class_hid_received_event_length;
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	601a      	str	r2, [r3, #0]

        /* Fill data buffer address to return.  */
        event -> ux_device_class_hid_received_event_data = UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_BUFFER(pos);
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	1d1a      	adds	r2, r3, #4
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	605a      	str	r2, [r3, #4]

        return(UX_SUCCESS);
 80108a0:	2300      	movs	r3, #0
 80108a2:	e000      	b.n	80108a6 <_ux_device_class_hid_receiver_event_get+0x34>
    }

    return(UX_ERROR);
 80108a4:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 80108a6:	0018      	movs	r0, r3
 80108a8:	46bd      	mov	sp, r7
 80108aa:	b004      	add	sp, #16
 80108ac:	bd80      	pop	{r7, pc}
	...

080108b0 <_ux_device_class_hid_receiver_initialize>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_initialize(UX_SLAVE_CLASS_HID *hid,
                                    UX_SLAVE_CLASS_HID_PARAMETER *parameter,
                                    UX_DEVICE_CLASS_HID_RECEIVER **receiver)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b08a      	sub	sp, #40	@ 0x28
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
UX_DEVICE_CLASS_HID_RECEIVED_EVENT      *events_head;
UCHAR                                   *buffer;
UINT                                    i;
#endif
UINT                                    status = UX_SUCCESS;
 80108bc:	2300      	movs	r3, #0
 80108be:	627b      	str	r3, [r7, #36]	@ 0x24
#if !defined(UX_DEVICE_STANDALONE)
    UX_ASSERT(!UX_OVERFLOW_CHECK_ADD_ULONG(UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE, sizeof(UX_DEVICE_CLASS_HID_RECEIVER)));
    memory_size = UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE +
                  sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
#else
    memory_size = sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 80108c0:	2320      	movs	r3, #32
 80108c2:	623b      	str	r3, [r7, #32]

    /* Memory of events are allocated later as cache safe memory.  */
#else

    /* Memory of events.  */
    events_size  = parameter -> ux_device_class_hid_parameter_receiver_event_max_length + sizeof(ULONG);
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108c8:	3304      	adds	r3, #4
 80108ca:	61fb      	str	r3, [r7, #28]
    UX_ASSERT(!UX_OVERFLOW_CHECK_MULV_ULONG(events_size, parameter -> ux_device_class_hid_parameter_receiver_event_max_number));
    events_size *= parameter -> ux_device_class_hid_parameter_receiver_event_max_number;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	6a1a      	ldr	r2, [r3, #32]
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	4353      	muls	r3, r2
 80108d4:	61fb      	str	r3, [r7, #28]
#endif
    UX_ASSERT(!UX_OVERFLOW_CHECK_ADD_ULONG(memory_size, events_size));
    memory_size += events_size;
 80108d6:	6a3a      	ldr	r2, [r7, #32]
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	18d3      	adds	r3, r2, r3
 80108dc:	623b      	str	r3, [r7, #32]

    /* Allocate memory.  */
    memory_receiver = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, memory_size);
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	001a      	movs	r2, r3
 80108e2:	2100      	movs	r1, #0
 80108e4:	2000      	movs	r0, #0
 80108e6:	f7ff f8c3 	bl	800fa70 <_ux_utility_memory_allocate>
 80108ea:	0003      	movs	r3, r0
 80108ec:	61bb      	str	r3, [r7, #24]
    if (memory_receiver == UX_NULL)
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <_ux_device_class_hid_receiver_initialize+0x48>
        return(UX_MEMORY_INSUFFICIENT);
 80108f4:	2312      	movs	r3, #18
 80108f6:	e040      	b.n	801097a <_ux_device_class_hid_receiver_initialize+0xca>
#if !defined(UX_DEVICE_STANDALONE)
    memory_stack = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
    memory_events = memory_stack + UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE;
#else
    memory_events = memory_receiver + sizeof(UX_DEVICE_CLASS_HID_RECEIVER);
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	3320      	adds	r3, #32
 80108fc:	617b      	str	r3, [r7, #20]
        events_head ++;
    }
#endif

    /* Store receiver instance pointer.  */
    (*receiver) = (UX_DEVICE_CLASS_HID_RECEIVER *)memory_receiver;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	69ba      	ldr	r2, [r7, #24]
 8010902:	601a      	str	r2, [r3, #0]
                    UX_DEVICE_CLASS_HID_RECEIVER_THREAD_STACK_SIZE, UX_THREAD_PRIORITY_CLASS,
                    UX_THREAD_PRIORITY_CLASS, UX_NO_TIME_SLICE, UX_DONT_START);
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8010904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010906:	2b00      	cmp	r3, #0
 8010908:	d12c      	bne.n	8010964 <_ux_device_class_hid_receiver_initialize+0xb4>
    {

#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&((*receiver) -> ux_device_class_hid_receiver_thread), hid)
#else
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2223      	movs	r2, #35	@ 0x23
 801090e:	675a      	str	r2, [r3, #116]	@ 0x74
        (*receiver) -> ux_device_class_hid_receiver_tasks_run = _ux_device_class_hid_receiver_tasks_run;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4a1b      	ldr	r2, [pc, #108]	@ (8010984 <_ux_device_class_hid_receiver_initialize+0xd4>)
 8010916:	61da      	str	r2, [r3, #28]
#endif

        /* Initialize event buffer size.  */
        (*receiver) -> ux_device_class_hid_receiver_event_buffer_size =
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
                    parameter -> ux_device_class_hid_parameter_receiver_event_max_length;
 801091c:	68ba      	ldr	r2, [r7, #8]
 801091e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        (*receiver) -> ux_device_class_hid_receiver_event_buffer_size =
 8010920:	609a      	str	r2, [r3, #8]

        /* Initialize events.  */
        (*receiver) -> ux_device_class_hid_receiver_events =
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	60da      	str	r2, [r3, #12]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_events);
        (*receiver) -> ux_device_class_hid_receiver_events_end =
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
                        (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)(memory_receiver + memory_size);
 801092e:	69b9      	ldr	r1, [r7, #24]
 8010930:	6a3a      	ldr	r2, [r7, #32]
 8010932:	188a      	adds	r2, r1, r2
        (*receiver) -> ux_device_class_hid_receiver_events_end =
 8010934:	611a      	str	r2, [r3, #16]
        (*receiver) -> ux_device_class_hid_receiver_event_read_pos =
                    (*receiver) -> ux_device_class_hid_receiver_events;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681a      	ldr	r2, [r3, #0]
        (*receiver) -> ux_device_class_hid_receiver_event_read_pos =
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
                    (*receiver) -> ux_device_class_hid_receiver_events;
 801093e:	68d2      	ldr	r2, [r2, #12]
        (*receiver) -> ux_device_class_hid_receiver_event_read_pos =
 8010940:	615a      	str	r2, [r3, #20]
        (*receiver) -> ux_device_class_hid_receiver_event_save_pos =
                    (*receiver) -> ux_device_class_hid_receiver_events;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681a      	ldr	r2, [r3, #0]
        (*receiver) -> ux_device_class_hid_receiver_event_save_pos =
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
                    (*receiver) -> ux_device_class_hid_receiver_events;
 801094a:	68d2      	ldr	r2, [r2, #12]
        (*receiver) -> ux_device_class_hid_receiver_event_save_pos =
 801094c:	619a      	str	r2, [r3, #24]

        /* Initialize uninitialize function.  */
        (*receiver) -> ux_device_class_hid_receiver_uninitialize = _ux_device_class_hid_receiver_uninitialize;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a0d      	ldr	r2, [pc, #52]	@ (8010988 <_ux_device_class_hid_receiver_initialize+0xd8>)
 8010954:	601a      	str	r2, [r3, #0]

        /* Initialize callback function.  */
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
                    parameter -> ux_device_class_hid_parameter_receiver_event_callback;
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
        (*receiver) -> ux_device_class_hid_receiver_event_callback =
 801095e:	605a      	str	r2, [r3, #4]

        /* Done success.  */
        return(UX_SUCCESS);
 8010960:	2300      	movs	r3, #0
 8010962:	e00a      	b.n	801097a <_ux_device_class_hid_receiver_initialize+0xca>
    }
    else
        status = (UX_THREAD_ERROR);
 8010964:	2316      	movs	r3, #22
 8010966:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Free allocated memory. */
    _ux_utility_memory_free(*receiver);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	0018      	movs	r0, r3
 801096e:	f7ff faab 	bl	800fec8 <_ux_utility_memory_free>
    (*receiver) =  UX_NULL;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(status);
 8010978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
#endif
}
 801097a:	0018      	movs	r0, r3
 801097c:	46bd      	mov	sp, r7
 801097e:	b00a      	add	sp, #40	@ 0x28
 8010980:	bd80      	pop	{r7, pc}
 8010982:	46c0      	nop			@ (mov r8, r8)
 8010984:	0801098d 	.word	0x0801098d
 8010988:	08010ab9 	.word	0x08010ab9

0801098c <_ux_device_class_hid_receiver_tasks_run>:
/*                                            fixed save position issue,  */
/*                                            resulting in version 6.4.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_receiver_tasks_run(UX_SLAVE_CLASS_HID *hid)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b08c      	sub	sp, #48	@ 0x30
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
UCHAR                               *buffer;
ULONG                               temp;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010994:	4b47      	ldr	r3, [pc, #284]	@ (8010ab4 <_ux_device_class_hid_receiver_tasks_run+0x128>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3324      	adds	r3, #36	@ 0x24
 801099a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	d001      	beq.n	80109a8 <_ux_device_class_hid_receiver_tasks_run+0x1c>
        return(UX_STATE_EXIT);
 80109a4:	2301      	movs	r3, #1
 80109a6:	e080      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>

    /* Get receiver instance.  */
    receiver = hid -> ux_device_class_hid_receiver;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109ac:	627b      	str	r3, [r7, #36]	@ 0x24
    if (receiver == UX_NULL)
 80109ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d101      	bne.n	80109b8 <_ux_device_class_hid_receiver_tasks_run+0x2c>
        return(UX_STATE_EXIT);
 80109b4:	2301      	movs	r3, #1
 80109b6:	e078      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>

    /* Get endpoint.  */
    endpoint = hid -> ux_device_class_hid_read_endpoint;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109bc:	623b      	str	r3, [r7, #32]
    if (endpoint == UX_NULL)
 80109be:	6a3b      	ldr	r3, [r7, #32]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d101      	bne.n	80109c8 <_ux_device_class_hid_receiver_tasks_run+0x3c>
        return(UX_STATE_EXIT);
 80109c4:	2301      	movs	r3, #1
 80109c6:	e070      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>

    /* Event buffer available, issue request to get data.  */
    transfer = &endpoint -> ux_slave_endpoint_transfer_request;
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	3320      	adds	r3, #32
 80109cc:	61fb      	str	r3, [r7, #28]

    /* Run read/receiver states.  */
    switch(hid -> ux_device_class_hid_read_state)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109d2:	2b23      	cmp	r3, #35	@ 0x23
 80109d4:	d004      	beq.n	80109e0 <_ux_device_class_hid_receiver_tasks_run+0x54>
 80109d6:	2b24      	cmp	r3, #36	@ 0x24
 80109d8:	d012      	beq.n	8010a00 <_ux_device_class_hid_receiver_tasks_run+0x74>

        /* Keep waiting.  */
        return(UX_STATE_WAIT);

    default: /* Nothing to do by default.  */
        break;
 80109da:	46c0      	nop			@ (mov r8, r8)
    }

    /* Task is idle.  */
    return(UX_STATE_IDLE);
 80109dc:	2302      	movs	r3, #2
 80109de:	e064      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>
        pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e2:	699b      	ldr	r3, [r3, #24]
 80109e4:	61bb      	str	r3, [r7, #24]
        if (pos -> ux_device_class_hid_received_event_length != 0)
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <_ux_device_class_hid_receiver_tasks_run+0x66>
            return(UX_STATE_IDLE);
 80109ee:	2302      	movs	r3, #2
 80109f0:	e05b      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>
                    receiver -> ux_device_class_hid_receiver_event_buffer_size;
 80109f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f4:	689a      	ldr	r2, [r3, #8]
        hid -> ux_device_class_hid_read_requested_length =
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	669a      	str	r2, [r3, #104]	@ 0x68
        hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_WAIT;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2224      	movs	r2, #36	@ 0x24
 80109fe:	675a      	str	r2, [r3, #116]	@ 0x74
        status =  _ux_device_stack_transfer_run(transfer,
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	f7fe fe3a 	bl	800f684 <_ux_device_stack_transfer_run>
 8010a10:	0003      	movs	r3, r0
 8010a12:	617b      	str	r3, [r7, #20]
        if (status < UX_STATE_NEXT)
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	2b03      	cmp	r3, #3
 8010a18:	d808      	bhi.n	8010a2c <_ux_device_class_hid_receiver_tasks_run+0xa0>
            hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_ERROR;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2225      	movs	r2, #37	@ 0x25
 8010a1e:	675a      	str	r2, [r3, #116]	@ 0x74
                transfer -> ux_slave_transfer_request_completion_code;
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            hid -> ux_device_class_hid_read_status =
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	679a      	str	r2, [r3, #120]	@ 0x78
            return(UX_STATE_ERROR);
 8010a28:	2303      	movs	r3, #3
 8010a2a:	e03e      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>
        if (status == UX_STATE_NEXT)
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	2b04      	cmp	r3, #4
 8010a30:	d13a      	bne.n	8010aa8 <_ux_device_class_hid_receiver_tasks_run+0x11c>
            if (transfer -> ux_slave_transfer_request_actual_length == 0)
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d104      	bne.n	8010a44 <_ux_device_class_hid_receiver_tasks_run+0xb8>
                hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2223      	movs	r2, #35	@ 0x23
 8010a3e:	675a      	str	r2, [r3, #116]	@ 0x74
                return(UX_STATE_NEXT);
 8010a40:	2304      	movs	r3, #4
 8010a42:	e032      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>
            pos = receiver -> ux_device_class_hid_receiver_event_save_pos;
 8010a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a46:	699b      	ldr	r3, [r3, #24]
 8010a48:	61bb      	str	r3, [r7, #24]
            buffer = (UCHAR *)&pos -> ux_device_class_hid_received_event_data;
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	613b      	str	r3, [r7, #16]
            temp = transfer -> ux_slave_transfer_request_actual_length;
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	699b      	ldr	r3, [r3, #24]
 8010a54:	60fb      	str	r3, [r7, #12]
                            transfer -> ux_slave_transfer_request_data_pointer,
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	68d9      	ldr	r1, [r3, #12]
            _ux_utility_memory_copy(buffer,
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	0018      	movs	r0, r3
 8010a60:	f7ff fa16 	bl	800fe90 <_ux_utility_memory_copy>
            next_pos = (UCHAR *)pos + UX_DEVICE_CLASS_HID_RECEIVED_QUEUE_ITEM_SIZE(receiver);
 8010a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	3304      	adds	r3, #4
 8010a6a:	69ba      	ldr	r2, [r7, #24]
 8010a6c:	18d3      	adds	r3, r2, r3
 8010a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (next_pos >= (UCHAR *)receiver -> ux_device_class_hid_receiver_events_end)
 8010a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a72:	691b      	ldr	r3, [r3, #16]
 8010a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d302      	bcc.n	8010a80 <_ux_device_class_hid_receiver_tasks_run+0xf4>
                next_pos = (UCHAR *)receiver -> ux_device_class_hid_receiver_events;
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            receiver -> ux_device_class_hid_receiver_event_save_pos = (UX_DEVICE_CLASS_HID_RECEIVED_EVENT *)next_pos;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a84:	619a      	str	r2, [r3, #24]
            pos -> ux_device_class_hid_received_event_length = temp;
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	601a      	str	r2, [r3, #0]
            if (receiver -> ux_device_class_hid_receiver_event_callback)
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d004      	beq.n	8010a9e <_ux_device_class_hid_receiver_tasks_run+0x112>
                receiver -> ux_device_class_hid_receiver_event_callback(hid);
 8010a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	0010      	movs	r0, r2
 8010a9c:	4798      	blx	r3
            hid -> ux_device_class_hid_read_state = UX_DEVICE_CLASS_HID_RECEIVER_START;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2223      	movs	r2, #35	@ 0x23
 8010aa2:	675a      	str	r2, [r3, #116]	@ 0x74
            return(UX_STATE_NEXT);
 8010aa4:	2304      	movs	r3, #4
 8010aa6:	e000      	b.n	8010aaa <_ux_device_class_hid_receiver_tasks_run+0x11e>
        return(UX_STATE_WAIT);
 8010aa8:	2305      	movs	r3, #5
}
 8010aaa:	0018      	movs	r0, r3
 8010aac:	46bd      	mov	sp, r7
 8010aae:	b00c      	add	sp, #48	@ 0x30
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	46c0      	nop			@ (mov r8, r8)
 8010ab4:	200007d0 	.word	0x200007d0

08010ab8 <_ux_device_class_hid_receiver_uninitialize>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID _ux_device_class_hid_receiver_uninitialize(UX_DEVICE_CLASS_HID_RECEIVER *receiver)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
    /* Free cache safe event memory.  */
    _ux_utility_memory_free(receiver -> ux_device_class_hid_receiver_events -> ux_device_class_hid_received_event_data);
#endif

    /* Free receiver and events memory.  */
    _ux_utility_memory_free(receiver);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	0018      	movs	r0, r3
 8010ac4:	f7ff fa00 	bl	800fec8 <_ux_utility_memory_free>
}
 8010ac8:	46c0      	nop			@ (mov r8, r8)
 8010aca:	46bd      	mov	sp, r7
 8010acc:	b002      	add	sp, #8
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8010ad0:	b590      	push	{r4, r7, lr}
 8010ad2:	b09f      	sub	sp, #124	@ 0x7c
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 8010ade:	23ff      	movs	r3, #255	@ 0xff
 8010ae0:	673b      	str	r3, [r7, #112]	@ 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010ae2:	4b45      	ldr	r3, [pc, #276]	@ (8010bf8 <_ux_device_class_hid_report_get+0x128>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	3324      	adds	r3, #36	@ 0x24
 8010ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8010aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aec:	3318      	adds	r3, #24
 8010aee:	66bb      	str	r3, [r7, #104]	@ 0x68

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8010af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010af2:	3320      	adds	r3, #32
 8010af4:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8010af6:	2463      	movs	r4, #99	@ 0x63
 8010af8:	193b      	adds	r3, r7, r4
 8010afa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010afc:	213e      	movs	r1, #62	@ 0x3e
 8010afe:	5c52      	ldrb	r2, [r2, r1]
 8010b00:	701a      	strb	r2, [r3, #0]
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8010b02:	2062      	movs	r0, #98	@ 0x62
 8010b04:	183b      	adds	r3, r7, r0
 8010b06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010b08:	213f      	movs	r1, #63	@ 0x3f
 8010b0a:	5c52      	ldrb	r2, [r2, r1]
 8010b0c:	701a      	strb	r2, [r3, #0]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8010b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b10:	2203      	movs	r2, #3
 8010b12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8010b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 8010b1a:	193b      	adds	r3, r7, r4
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	2110      	movs	r1, #16
 8010b20:	187b      	adds	r3, r7, r1
 8010b22:	601a      	str	r2, [r3, #0]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 8010b24:	183b      	adds	r3, r7, r0
 8010b26:	781a      	ldrb	r2, [r3, #0]
 8010b28:	187b      	adds	r3, r7, r1
 8010b2a:	605a      	str	r2, [r3, #4]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8010b2c:	187b      	adds	r3, r7, r1
 8010b2e:	2240      	movs	r2, #64	@ 0x40
 8010b30:	609a      	str	r2, [r3, #8]

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8010b32:	183b      	adds	r3, r7, r0
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d10c      	bne.n	8010b54 <_ux_device_class_hid_report_get+0x84>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d008      	beq.n	8010b54 <_ux_device_class_hid_report_get+0x84>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 8010b42:	187a      	adds	r2, r7, r1
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	0011      	movs	r1, r2
 8010b48:	0018      	movs	r0, r3
 8010b4a:	f7ff fd40 	bl	80105ce <_ux_device_class_hid_event_get>
 8010b4e:	0003      	movs	r3, r0
 8010b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8010b52:	e00c      	b.n	8010b6e <_ux_device_class_hid_report_get+0x9e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	691b      	ldr	r3, [r3, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d008      	beq.n	8010b6e <_ux_device_class_hid_report_get+0x9e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	691b      	ldr	r3, [r3, #16]
 8010b60:	2210      	movs	r2, #16
 8010b62:	18b9      	adds	r1, r7, r2
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	0010      	movs	r0, r2
 8010b68:	4798      	blx	r3
 8010b6a:	0003      	movs	r3, r0
 8010b6c:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    if (status == UX_SUCCESS)
 8010b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d124      	bne.n	8010bbe <_ux_device_class_hid_report_get+0xee>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 8010b74:	2310      	movs	r3, #16
 8010b76:	18fb      	adds	r3, r7, r3
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d202      	bcs.n	8010b86 <_ux_device_class_hid_report_get+0xb6>
            hid_event_length =  host_length;
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	677b      	str	r3, [r7, #116]	@ 0x74
 8010b84:	e003      	b.n	8010b8e <_ux_device_class_hid_report_get+0xbe>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 8010b86:	2310      	movs	r3, #16
 8010b88:	18fb      	adds	r3, r7, r3
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	677b      	str	r3, [r7, #116]	@ 0x74
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8010b8e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010b90:	2380      	movs	r3, #128	@ 0x80
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d902      	bls.n	8010b9e <_ux_device_class_hid_report_get+0xce>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8010b98:	2380      	movs	r3, #128	@ 0x80
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	677b      	str	r3, [r7, #116]	@ 0x74

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8010b9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	0018      	movs	r0, r3
 8010ba6:	f7ff f9f5 	bl	800ff94 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8010baa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010bac:	2310      	movs	r3, #16
 8010bae:	18fb      	adds	r3, r7, r3
 8010bb0:	330c      	adds	r3, #12
 8010bb2:	0019      	movs	r1, r3
 8010bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010bb6:	0018      	movs	r0, r3
 8010bb8:	f7ff f96a 	bl	800fe90 <_ux_utility_memory_copy>
 8010bbc:	e00e      	b.n	8010bdc <_ux_device_class_hid_report_get+0x10c>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	2bff      	cmp	r3, #255	@ 0xff
 8010bc2:	d802      	bhi.n	8010bca <_ux_device_class_hid_report_get+0xfa>
            hid_event_length =  host_length;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8010bc8:	e002      	b.n	8010bd0 <_ux_device_class_hid_report_get+0x100>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8010bca:	2380      	movs	r3, #128	@ 0x80
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	677b      	str	r3, [r7, #116]	@ 0x74

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8010bd0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010bd4:	2100      	movs	r1, #0
 8010bd6:	0018      	movs	r0, r3
 8010bd8:	f7ff f9dc 	bl	800ff94 <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8010be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010be2:	0018      	movs	r0, r3
 8010be4:	f7fe fd2d 	bl	800f642 <_ux_device_stack_transfer_request>
 8010be8:	0003      	movs	r3, r0
 8010bea:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Return the status to the caller.  */
    return(status);
 8010bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
}
 8010bee:	0018      	movs	r0, r3
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	b01f      	add	sp, #124	@ 0x7c
 8010bf4:	bd90      	pop	{r4, r7, pc}
 8010bf6:	46c0      	nop			@ (mov r8, r8)
 8010bf8:	200007d0 	.word	0x200007d0

08010bfc <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8010bfc:	b590      	push	{r4, r7, lr}
 8010bfe:	b09d      	sub	sp, #116	@ 0x74
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
 8010c08:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010c0a:	4b25      	ldr	r3, [pc, #148]	@ (8010ca0 <_ux_device_class_hid_report_set+0xa4>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	3324      	adds	r3, #36	@ 0x24
 8010c10:	66bb      	str	r3, [r7, #104]	@ 0x68
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8010c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c14:	3318      	adds	r3, #24
 8010c16:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8010c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c1a:	3320      	adds	r3, #32
 8010c1c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 8010c1e:	2114      	movs	r1, #20
 8010c20:	187b      	adds	r3, r7, r1
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	605a      	str	r2, [r3, #4]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8010c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	6a1b      	ldr	r3, [r3, #32]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d10d      	bne.n	8010c50 <_ux_device_class_hid_report_set+0x54>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8010c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	001a      	movs	r2, r3
 8010c3a:	187b      	adds	r3, r7, r1
 8010c3c:	601a      	str	r2, [r3, #0]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8010c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c40:	699b      	ldr	r3, [r3, #24]
 8010c42:	1e5a      	subs	r2, r3, #1
 8010c44:	187b      	adds	r3, r7, r1
 8010c46:	609a      	str	r2, [r3, #8]
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 8010c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010c4e:	e007      	b.n	8010c60 <_ux_device_class_hid_report_set+0x64>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 8010c50:	2114      	movs	r1, #20
 8010c52:	187b      	adds	r3, r7, r1
 8010c54:	2200      	movs	r2, #0
 8010c56:	601a      	str	r2, [r3, #0]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 8010c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c5a:	699a      	ldr	r2, [r3, #24]
 8010c5c:	187b      	adds	r3, r7, r1
 8010c5e:	609a      	str	r2, [r3, #8]
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8010c60:	2214      	movs	r2, #20
 8010c62:	18bb      	adds	r3, r7, r2
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	2b40      	cmp	r3, #64	@ 0x40
 8010c68:	d902      	bls.n	8010c70 <_ux_device_class_hid_report_set+0x74>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 8010c6a:	18bb      	adds	r3, r7, r2
 8010c6c:	2240      	movs	r2, #64	@ 0x40
 8010c6e:	609a      	str	r2, [r3, #8]
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 8010c70:	2414      	movs	r4, #20
 8010c72:	193b      	adds	r3, r7, r4
 8010c74:	689a      	ldr	r2, [r3, #8]
 8010c76:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010c78:	193b      	adds	r3, r7, r4
 8010c7a:	330c      	adds	r3, #12
 8010c7c:	0018      	movs	r0, r3
 8010c7e:	f7ff f907 	bl	800fe90 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d005      	beq.n	8010c96 <_ux_device_class_hid_report_set+0x9a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	1939      	adds	r1, r7, r4
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	0010      	movs	r0, r2
 8010c94:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	0018      	movs	r0, r3
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	b01d      	add	sp, #116	@ 0x74
 8010c9e:	bd90      	pop	{r4, r7, pc}
 8010ca0:	200007d0 	.word	0x200007d0

08010ca4 <_ux_device_class_hid_tasks_run>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_hid_tasks_run(VOID *instance)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08a      	sub	sp, #40	@ 0x28
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
ULONG                       tick, elapsed;
UINT                        status;


    /* Get HID instance.  */
    hid = (UX_SLAVE_CLASS_HID *) instance;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8010cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8010de4 <_ux_device_class_hid_tasks_run+0x140>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	3324      	adds	r3, #36	@ 0x24
 8010cb6:	623b      	str	r3, [r7, #32]

    /* Check if the device is configured.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8010cb8:	6a3b      	ldr	r3, [r7, #32]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	2b03      	cmp	r3, #3
 8010cbe:	d004      	beq.n	8010cca <_ux_device_class_hid_tasks_run+0x26>
    {
        hid -> ux_device_class_hid_event_state = UX_STATE_EXIT;
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	629a      	str	r2, [r3, #40]	@ 0x28
        return(UX_STATE_EXIT);
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	e088      	b.n	8010ddc <_ux_device_class_hid_tasks_run+0x138>
    }

#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
    if (hid -> ux_device_class_hid_receiver)
 8010cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d005      	beq.n	8010cde <_ux_device_class_hid_tasks_run+0x3a>
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cd6:	69db      	ldr	r3, [r3, #28]
 8010cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cda:	0010      	movs	r0, r2
 8010cdc:	4798      	blx	r3
#endif

    /* Get access to current event instance.  */
    hid_event = &hid -> ux_device_class_hid_event;
 8010cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce0:	3330      	adds	r3, #48	@ 0x30
 8010ce2:	60fb      	str	r3, [r7, #12]

    /* Run HID state machine.  */
    switch(hid -> ux_device_class_hid_event_state)
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce8:	2b05      	cmp	r3, #5
 8010cea:	d057      	beq.n	8010d9c <_ux_device_class_hid_tasks_run+0xf8>
 8010cec:	d900      	bls.n	8010cf0 <_ux_device_class_hid_tasks_run+0x4c>
 8010cee:	e071      	b.n	8010dd4 <_ux_device_class_hid_tasks_run+0x130>
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d00f      	beq.n	8010d14 <_ux_device_class_hid_tasks_run+0x70>
 8010cf4:	d900      	bls.n	8010cf8 <_ux_device_class_hid_tasks_run+0x54>
 8010cf6:	e06d      	b.n	8010dd4 <_ux_device_class_hid_tasks_run+0x130>
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d003      	beq.n	8010d04 <_ux_device_class_hid_tasks_run+0x60>
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d169      	bne.n	8010dd4 <_ux_device_class_hid_tasks_run+0x130>
    {
    case UX_STATE_EXIT:

        /* There is nothing to do in this state.  */
        return (UX_STATE_EXIT);
 8010d00:	2301      	movs	r3, #1
 8010d02:	e06b      	b.n	8010ddc <_ux_device_class_hid_tasks_run+0x138>

    case UX_STATE_RESET:

        /* Start timeout waiting.  */
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 8010d04:	f000 ffe9 	bl	8011cda <_ux_utility_time_get>
 8010d08:	0002      	movs	r2, r0
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d10:	2202      	movs	r2, #2
 8010d12:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Fall through.  */
    case UX_STATE_IDLE:

        /* Check if there is event ready.  */
        status = _ux_device_class_hid_event_check(hid, &hid_event);
 8010d14:	230c      	movs	r3, #12
 8010d16:	18fa      	adds	r2, r7, r3
 8010d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1a:	0011      	movs	r1, r2
 8010d1c:	0018      	movs	r0, r3
 8010d1e:	f7ff fc1b 	bl	8010558 <_ux_device_class_hid_event_check>
 8010d22:	0003      	movs	r3, r0
 8010d24:	61fb      	str	r3, [r7, #28]

        /* If there is no event, check idle rate.  */
        if (status != UX_SUCCESS)
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d01f      	beq.n	8010d6c <_ux_device_class_hid_tasks_run+0xc8>
        {

            /* Check idle rate setting.  */
            if (hid -> ux_device_class_hid_event_wait_timeout == UX_WAIT_FOREVER)
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d30:	3301      	adds	r3, #1
 8010d32:	d101      	bne.n	8010d38 <_ux_device_class_hid_tasks_run+0x94>
            {

                /* There is no background idle report, keep waiting.  */
                return(UX_STATE_IDLE);
 8010d34:	2302      	movs	r3, #2
 8010d36:	e051      	b.n	8010ddc <_ux_device_class_hid_tasks_run+0x138>
            }

            /* Check wait timeout.  */
            tick = _ux_utility_time_get();
 8010d38:	f000 ffcf 	bl	8011cda <_ux_utility_time_get>
 8010d3c:	0003      	movs	r3, r0
 8010d3e:	61bb      	str	r3, [r7, #24]
            elapsed = _ux_utility_time_elapsed(hid -> ux_device_class_hid_event_wait_start, tick);
 8010d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d44:	69ba      	ldr	r2, [r7, #24]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d304      	bcc.n	8010d54 <_ux_device_class_hid_tasks_run+0xb0>
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d4e:	69ba      	ldr	r2, [r7, #24]
 8010d50:	1ad3      	subs	r3, r2, r3
 8010d52:	e003      	b.n	8010d5c <_ux_device_class_hid_tasks_run+0xb8>
 8010d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	617b      	str	r3, [r7, #20]
            if (elapsed < hid -> ux_device_class_hid_event_wait_timeout)
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d201      	bcs.n	8010d6c <_ux_device_class_hid_tasks_run+0xc8>
            {

                /* Keep waiting.  */
                return(UX_STATE_IDLE);
 8010d68:	2302      	movs	r3, #2
 8010d6a:	e037      	b.n	8010ddc <_ux_device_class_hid_tasks_run+0x138>

            /* Send the last event in buffer.  */
        }

        /* Prepare the request to send event.  */
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 8010d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	3320      	adds	r3, #32
 8010d72:	613b      	str	r3, [r7, #16]
        trans -> ux_slave_transfer_request_data_pointer =
                                hid_event -> ux_device_class_hid_event_buffer;
#else

        /* Copy event data to endpoint buffer.  */
        _ux_utility_memory_copy(trans -> ux_slave_transfer_request_data_pointer,
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	68d8      	ldr	r0, [r3, #12]
                                UX_DEVICE_CLASS_HID_EVENT_BUFFER(hid_event),
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	330c      	adds	r3, #12
 8010d7c:	0019      	movs	r1, r3
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 8010d7e:	68fb      	ldr	r3, [r7, #12]
        _ux_utility_memory_copy(trans -> ux_slave_transfer_request_data_pointer,
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	001a      	movs	r2, r3
 8010d84:	f7ff f884 	bl	800fe90 <_ux_utility_memory_copy>
#endif

        trans -> ux_slave_transfer_request_requested_length =
                                hid_event -> ux_device_class_hid_event_length;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	689a      	ldr	r2, [r3, #8]
        trans -> ux_slave_transfer_request_requested_length =
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	615a      	str	r2, [r3, #20]
        UX_SLAVE_TRANSFER_STATE_RESET(trans);
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	2200      	movs	r2, #0
 8010d94:	631a      	str	r2, [r3, #48]	@ 0x30
        hid -> ux_device_class_hid_event_state = UX_STATE_WAIT;
 8010d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d98:	2205      	movs	r2, #5
 8010d9a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Fall through.  */
    case UX_STATE_WAIT:

        /* Run transfer state machine.  */
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	3320      	adds	r3, #32
 8010da2:	613b      	str	r3, [r7, #16]
                                            ux_slave_endpoint_transfer_request;
        status = _ux_device_stack_transfer_run(trans,
                                hid_event -> ux_device_class_hid_event_length,
 8010da4:	68fb      	ldr	r3, [r7, #12]
        status = _ux_device_stack_transfer_run(trans,
 8010da6:	6899      	ldr	r1, [r3, #8]
                                hid_event -> ux_device_class_hid_event_length);
 8010da8:	68fb      	ldr	r3, [r7, #12]
        status = _ux_device_stack_transfer_run(trans,
 8010daa:	689a      	ldr	r2, [r3, #8]
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	0018      	movs	r0, r3
 8010db0:	f7fe fc68 	bl	800f684 <_ux_device_stack_transfer_run>
 8010db4:	0003      	movs	r3, r0
 8010db6:	61fb      	str	r3, [r7, #28]

        /* Any error or success case.  */
        if (status <= UX_STATE_NEXT)
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	2b04      	cmp	r3, #4
 8010dbc:	d808      	bhi.n	8010dd0 <_ux_device_class_hid_tasks_run+0x12c>
        {

            /* Event handled and the tail should be freed.  */
            _ux_device_class_hid_event_free(hid);
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc0:	0018      	movs	r0, r3
 8010dc2:	f7ff fbeb 	bl	801059c <_ux_device_class_hid_event_free>

            /* Next round.  */
            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc8:	2200      	movs	r2, #0
 8010dca:	629a      	str	r2, [r3, #40]	@ 0x28
            return(UX_STATE_IDLE);
 8010dcc:	2302      	movs	r3, #2
 8010dce:	e005      	b.n	8010ddc <_ux_device_class_hid_tasks_run+0x138>
        }

        /* Wait.  */
        return(UX_STATE_WAIT);
 8010dd0:	2305      	movs	r3, #5
 8010dd2:	e003      	b.n	8010ddc <_ux_device_class_hid_tasks_run+0x138>

    default:

        /* Just go back to normal state.  */
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	629a      	str	r2, [r3, #40]	@ 0x28
        return(UX_STATE_IDLE);
 8010dda:	2302      	movs	r3, #2
    }
}
 8010ddc:	0018      	movs	r0, r3
 8010dde:	46bd      	mov	sp, r7
 8010de0:	b00a      	add	sp, #40	@ 0x28
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	200007d0 	.word	0x200007d0

08010de8 <_ux_device_class_hid_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_ptr;


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a1b      	ldr	r3, [r3, #32]
 8010df4:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010dfa:	60bb      	str	r3, [r7, #8]

    /* Free memory for the array. */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
#endif
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e00:	0018      	movs	r0, r3
 8010e02:	f7ff f861 	bl	800fec8 <_ux_utility_memory_free>
    /* Free read mutex.  */
    _ux_device_mutex_delete(&hid -> ux_device_class_hid_read_mutex);
#endif

    /* Uninitialize receiver.  */
    if (hid -> ux_device_class_hid_receiver)
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d006      	beq.n	8010e1c <_ux_device_class_hid_uninitialize+0x34>
        hid -> ux_device_class_hid_receiver ->
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e18:	0018      	movs	r0, r3
 8010e1a:	4790      	blx	r2
#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	0018      	movs	r0, r3
 8010e20:	f7ff f852 	bl	800fec8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	0018      	movs	r0, r3
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	b004      	add	sp, #16
 8010e2c:	bd80      	pop	{r7, pc}

08010e2e <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8010e2e:	b580      	push	{r7, lr}
 8010e30:	b082      	sub	sp, #8
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
 8010e36:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2280      	movs	r2, #128	@ 0x80
 8010e3c:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2201      	movs	r2, #1
 8010e42:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	0018      	movs	r0, r3
 8010e48:	f7fd fb2a 	bl	800e4a0 <_ux_device_stack_control_request_process>
}
 8010e4c:	46c0      	nop			@ (mov r8, r8)
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	b002      	add	sp, #8
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	2200      	movs	r2, #0
 8010e64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	2280      	movs	r2, #128	@ 0x80
 8010e6a:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	0018      	movs	r0, r3
 8010e70:	f7fd fb16 	bl	800e4a0 <_ux_device_stack_control_request_process>
 8010e74:	1e03      	subs	r3, r0, #0
 8010e76:	d108      	bne.n	8010e8a <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2203      	movs	r2, #3
 8010e7c:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	2300      	movs	r3, #0
 8010e82:	2200      	movs	r2, #0
 8010e84:	2100      	movs	r1, #0
 8010e86:	f7f5 fc89 	bl	800679c <HAL_PCD_EP_Transmit>
    }
}
 8010e8a:	46c0      	nop			@ (mov r8, r8)
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	b004      	add	sp, #16
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b084      	sub	sp, #16
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	60f8      	str	r0, [r7, #12]
 8010e9a:	60b9      	str	r1, [r7, #8]
 8010e9c:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	2280      	movs	r2, #128	@ 0x80
 8010ea2:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	0018      	movs	r0, r3
 8010ea8:	f7fd fafa 	bl	800e4a0 <_ux_device_stack_control_request_process>
 8010eac:	1e03      	subs	r3, r0, #0
 8010eae:	d108      	bne.n	8010ec2 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2204      	movs	r2, #4
 8010eb4:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	2300      	movs	r3, #0
 8010eba:	2200      	movs	r2, #0
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	f7f5 fc6d 	bl	800679c <HAL_PCD_EP_Transmit>
    }
}
 8010ec2:	46c0      	nop			@ (mov r8, r8)
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	b004      	add	sp, #16
 8010ec8:	bd80      	pop	{r7, pc}
	...

08010ecc <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
UX_DCD_STM32_ED         *ed;
UX_SLAVE_TRANSFER       *transfer_request;
ULONG                   ed_status;

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3304      	adds	r3, #4
 8010ed8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	3320      	adds	r3, #32
 8010ee0:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 8010ee2:	f000 fedd 	bl	8011ca0 <_ux_utility_interrupt_disable>
 8010ee6:	0003      	movs	r3, r0
 8010ee8:	60fb      	str	r3, [r7, #12]

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	60bb      	str	r3, [r7, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	2380      	movs	r3, #128	@ 0x80
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	4013      	ands	r3, r2
 8010ef8:	d004      	beq.n	8010f04 <_ux_dcd_stm32_setup_isr_pending+0x38>
    {
        UX_RESTORE
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	0018      	movs	r0, r3
 8010efe:	f000 fede 	bl	8011cbe <_ux_utility_interrupt_restore>
        return;
 8010f02:	e047      	b.n	8010f94 <_ux_dcd_stm32_setup_isr_pending+0xc8>
    }

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	23c0      	movs	r3, #192	@ 0xc0
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	4013      	ands	r3, r2
 8010f0c:	60bb      	str	r3, [r7, #8]
    if (ed_status == 0)
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d104      	bne.n	8010f1e <_ux_dcd_stm32_setup_isr_pending+0x52>
    {
        UX_RESTORE
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	0018      	movs	r0, r3
 8010f18:	f000 fed1 	bl	8011cbe <_ux_utility_interrupt_restore>
        return;
 8010f1c:	e03a      	b.n	8010f94 <_ux_dcd_stm32_setup_isr_pending+0xc8>
    }
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	4a1e      	ldr	r2, [pc, #120]	@ (8010f9c <_ux_dcd_stm32_setup_isr_pending+0xd0>)
 8010f24:	401a      	ands	r2, r3
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	605a      	str	r2, [r3, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	2280      	movs	r2, #128	@ 0x80
 8010f30:	00d2      	lsls	r2, r2, #3
 8010f32:	431a      	orrs	r2, r3
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	605a      	str	r2, [r3, #4]
    UX_RESTORE
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	0018      	movs	r0, r3
 8010f3c:	f000 febf 	bl	8011cbe <_ux_utility_interrupt_restore>

    /* Handle different SETUP cases.  */
    switch(ed_status)
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	2380      	movs	r3, #128	@ 0x80
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d005      	beq.n	8010f56 <_ux_dcd_stm32_setup_isr_pending+0x8a>
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	23c0      	movs	r3, #192	@ 0xc0
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d007      	beq.n	8010f64 <_ux_dcd_stm32_setup_isr_pending+0x98>
 8010f54:	e00f      	b.n	8010f76 <_ux_dcd_stm32_setup_isr_pending+0xaa>
    {
    case UX_DCD_STM32_ED_STATUS_SETUP_IN:
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8010f56:	693a      	ldr	r2, [r7, #16]
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	0011      	movs	r1, r2
 8010f5c:	0018      	movs	r0, r3
 8010f5e:	f7ff ff66 	bl	8010e2e <_ux_dcd_stm32_setup_in>
        break;
 8010f62:	e011      	b.n	8010f88 <_ux_dcd_stm32_setup_isr_pending+0xbc>

    case UX_DCD_STM32_ED_STATUS_SETUP_OUT:
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2294      	movs	r2, #148	@ 0x94
 8010f68:	589a      	ldr	r2, [r3, r2]
 8010f6a:	6939      	ldr	r1, [r7, #16]
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	0018      	movs	r0, r3
 8010f70:	f7ff ff70 	bl	8010e54 <_ux_dcd_stm32_setup_out>
        break;
 8010f74:	e008      	b.n	8010f88 <_ux_dcd_stm32_setup_isr_pending+0xbc>

    default: /* UX_DCD_STM32_ED_STATUS_SETUP_STATUS  */
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2294      	movs	r2, #148	@ 0x94
 8010f7a:	589a      	ldr	r2, [r3, r2]
 8010f7c:	6939      	ldr	r1, [r7, #16]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	0018      	movs	r0, r3
 8010f82:	f7ff ff86 	bl	8010e92 <_ux_dcd_stm32_setup_status>
        break;
 8010f86:	46c0      	nop			@ (mov r8, r8)
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	4a04      	ldr	r2, [pc, #16]	@ (8010fa0 <_ux_dcd_stm32_setup_isr_pending+0xd4>)
 8010f8e:	401a      	ands	r2, r3
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	605a      	str	r2, [r3, #4]
}
 8010f94:	46bd      	mov	sp, r7
 8010f96:	b006      	add	sp, #24
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	46c0      	nop			@ (mov r8, r8)
 8010f9c:	fffffcff 	.word	0xfffffcff
 8010fa0:	fffffbff 	.word	0xfffffbff

08010fa4 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b088      	sub	sp, #32
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010fac:	4b42      	ldr	r3, [pc, #264]	@ (80110b8 <HAL_PCD_SetupStageCallback+0x114>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	69db      	ldr	r3, [r3, #28]
 8010fb6:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	3304      	adds	r3, #4
 8010fbc:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	3320      	adds	r3, #32
 8010fc4:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	333c      	adds	r3, #60	@ 0x3c
 8010fca:	0018      	movs	r0, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	22a6      	movs	r2, #166	@ 0xa6
 8010fd0:	0092      	lsls	r2, r2, #2
 8010fd2:	4694      	mov	ip, r2
 8010fd4:	4463      	add	r3, ip
 8010fd6:	2208      	movs	r2, #8
 8010fd8:	0019      	movs	r1, r3
 8010fda:	f7fe ff59 	bl	800fe90 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	2200      	movs	r2, #0
 8010fee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	220e      	movs	r2, #14
 8010ff6:	4393      	bics	r3, r2
 8010ff8:	001a      	movs	r2, r3
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	223c      	movs	r2, #60	@ 0x3c
 8011002:	5c9b      	ldrb	r3, [r3, r2]
 8011004:	b25b      	sxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	da07      	bge.n	801101a <HAL_PCD_SetupStageCallback+0x76>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	2280      	movs	r2, #128	@ 0x80
 8011010:	0052      	lsls	r2, r2, #1
 8011012:	431a      	orrs	r2, r3
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	605a      	str	r2, [r3, #4]
 8011018:	e04a      	b.n	80110b0 <HAL_PCD_SetupStageCallback+0x10c>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	2200      	movs	r2, #0
 801101e:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2242      	movs	r2, #66	@ 0x42
 8011024:	5c9b      	ldrb	r3, [r3, r2]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d10c      	bne.n	8011044 <HAL_PCD_SetupStageCallback+0xa0>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	2243      	movs	r2, #67	@ 0x43
 801102e:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8011030:	2b00      	cmp	r3, #0
 8011032:	d107      	bne.n	8011044 <HAL_PCD_SetupStageCallback+0xa0>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	2280      	movs	r2, #128	@ 0x80
 801103a:	0092      	lsls	r2, r2, #2
 801103c:	431a      	orrs	r2, r3
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	605a      	str	r2, [r3, #4]
 8011042:	e035      	b.n	80110b0 <HAL_PCD_SetupStageCallback+0x10c>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	333c      	adds	r3, #60	@ 0x3c
 801104e:	3306      	adds	r3, #6
 8011050:	0018      	movs	r0, r3
 8011052:	f7fe ffbb 	bl	800ffcc <_ux_utility_short_get>
 8011056:	0002      	movs	r2, r0
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	695a      	ldr	r2, [r3, #20]
 8011060:	2380      	movs	r3, #128	@ 0x80
 8011062:	005b      	lsls	r3, r3, #1
 8011064:	429a      	cmp	r2, r3
 8011066:	d910      	bls.n	801108a <HAL_PCD_SetupStageCallback+0xe6>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	0011      	movs	r1, r2
 801106e:	0018      	movs	r0, r3
 8011070:	f000 fabc 	bl	80115ec <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	2200      	movs	r2, #0
 8011078:	721a      	strb	r2, [r3, #8]

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	2280      	movs	r2, #128	@ 0x80
 8011080:	0092      	lsls	r2, r2, #2
 8011082:	431a      	orrs	r2, r3
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	605a      	str	r2, [r3, #4]
#endif

                /* We are done.  */
                return;
 8011088:	e012      	b.n	80110b0 <HAL_PCD_SetupStageCallback+0x10c>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	2200      	movs	r2, #0
 801108e:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	68da      	ldr	r2, [r3, #12]
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	695b      	ldr	r3, [r3, #20]
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7f5 fb29 	bl	80066fc <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	2202      	movs	r2, #2
 80110ae:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 80110b0:	46bd      	mov	sp, r7
 80110b2:	b008      	add	sp, #32
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	46c0      	nop			@ (mov r8, r8)
 80110b8:	200007d0 	.word	0x200007d0

080110bc <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b088      	sub	sp, #32
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	000a      	movs	r2, r1
 80110c6:	1cfb      	adds	r3, r7, #3
 80110c8:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80110ca:	4b5e      	ldr	r3, [pc, #376]	@ (8011244 <HAL_PCD_DataInStageCallback+0x188>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	69db      	ldr	r3, [r3, #28]
 80110d4:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 80110d6:	1cfb      	adds	r3, r7, #3
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	220f      	movs	r2, #15
 80110dc:	4013      	ands	r3, r2
 80110de:	d00d      	beq.n	80110fc <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 80110e0:	1cfb      	adds	r3, r7, #3
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	220f      	movs	r2, #15
 80110e6:	401a      	ands	r2, r3
 80110e8:	0013      	movs	r3, r2
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	189b      	adds	r3, r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	3348      	adds	r3, #72	@ 0x48
 80110f2:	693a      	ldr	r2, [r7, #16]
 80110f4:	18d3      	adds	r3, r2, r3
 80110f6:	3304      	adds	r3, #4
 80110f8:	61fb      	str	r3, [r7, #28]
 80110fa:	e00b      	b.n	8011114 <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 80110fc:	1cfb      	adds	r3, r7, #3
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	220f      	movs	r2, #15
 8011102:	401a      	ands	r2, r3
 8011104:	0013      	movs	r3, r2
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	189b      	adds	r3, r3, r2
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	693a      	ldr	r2, [r7, #16]
 801110e:	18d3      	adds	r3, r2, r3
 8011110:	3304      	adds	r3, #4
 8011112:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	3320      	adds	r3, #32
 801111a:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801111c:	1cfb      	adds	r3, r7, #3
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d164      	bne.n	80111ee <HAL_PCD_DataInStageCallback+0x132>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	7a1b      	ldrb	r3, [r3, #8]
 801112e:	2b01      	cmp	r3, #1
 8011130:	d000      	beq.n	8011134 <HAL_PCD_DataInStageCallback+0x78>
 8011132:	e082      	b.n	801123a <HAL_PCD_DataInStageCallback+0x17e>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	2300      	movs	r3, #0
 8011138:	2200      	movs	r2, #0
 801113a:	2100      	movs	r1, #0
 801113c:	f7f5 fade 	bl	80066fc <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8011148:	4293      	cmp	r3, r2
 801114a:	d82b      	bhi.n	80111a4 <HAL_PCD_DataInStageCallback+0xe8>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011150:	2b01      	cmp	r3, #1
 8011152:	d10a      	bne.n	801116a <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	7b99      	ldrb	r1, [r3, #14]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	2300      	movs	r3, #0
 801115c:	2200      	movs	r2, #0
 801115e:	f7f5 fb1d 	bl	800679c <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	639a      	str	r2, [r3, #56]	@ 0x38
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8011168:	e067      	b.n	801123a <HAL_PCD_DataInStageCallback+0x17e>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2200      	movs	r2, #0
 801116e:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2202      	movs	r2, #2
 8011174:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	619a      	str	r2, [r3, #24]
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	2208      	movs	r2, #8
 8011184:	431a      	orrs	r2, r3
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	605a      	str	r2, [r3, #4]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118e:	2b00      	cmp	r3, #0
 8011190:	d004      	beq.n	801119c <HAL_PCD_DataInStageCallback+0xe0>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011196:	68fa      	ldr	r2, [r7, #12]
 8011198:	0010      	movs	r0, r2
 801119a:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	2204      	movs	r2, #4
 80111a0:	721a      	strb	r2, [r3, #8]
}
 80111a2:	e04a      	b.n	801123a <HAL_PCD_DataInStageCallback+0x17e>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	69db      	ldr	r3, [r3, #28]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	8a12      	ldrh	r2, [r2, #16]
 80111ac:	1a9b      	subs	r3, r3, r2
 80111ae:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	8a1b      	ldrh	r3, [r3, #16]
 80111b4:	001a      	movs	r2, r3
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	4293      	cmp	r3, r2
 80111ba:	d902      	bls.n	80111c2 <HAL_PCD_DataInStageCallback+0x106>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	8a1b      	ldrh	r3, [r3, #16]
 80111c0:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	8a12      	ldrh	r2, [r2, #16]
 80111ca:	189a      	adds	r2, r3, r2
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	69da      	ldr	r2, [r3, #28]
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	1ad2      	subs	r2, r2, r3
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f7f5 fad8 	bl	800679c <HAL_PCD_EP_Transmit>
}
 80111ec:	e025      	b.n	801123a <HAL_PCD_DataInStageCallback+0x17e>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d011      	beq.n	801121a <HAL_PCD_DataInStageCallback+0x15e>
            transfer_request -> ux_slave_transfer_request_requested_length)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00d      	beq.n	801121a <HAL_PCD_DataInStageCallback+0x15e>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2200      	movs	r2, #0
 8011202:	639a      	str	r2, [r3, #56]	@ 0x38
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 801120a:	1cfb      	adds	r3, r7, #3
 801120c:	7819      	ldrb	r1, [r3, #0]
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	2300      	movs	r3, #0
 8011212:	2200      	movs	r2, #0
 8011214:	f7f5 fac2 	bl	800679c <HAL_PCD_EP_Transmit>
}
 8011218:	e00f      	b.n	801123a <HAL_PCD_DataInStageCallback+0x17e>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2200      	movs	r2, #0
 801121e:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2202      	movs	r2, #2
 8011224:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	619a      	str	r2, [r3, #24]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 801122e:	69fb      	ldr	r3, [r7, #28]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	2208      	movs	r2, #8
 8011234:	431a      	orrs	r2, r3
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	605a      	str	r2, [r3, #4]
}
 801123a:	46c0      	nop			@ (mov r8, r8)
 801123c:	46bd      	mov	sp, r7
 801123e:	b008      	add	sp, #32
 8011240:	bd80      	pop	{r7, pc}
 8011242:	46c0      	nop			@ (mov r8, r8)
 8011244:	200007d0 	.word	0x200007d0

08011248 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b088      	sub	sp, #32
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	000a      	movs	r2, r1
 8011252:	1cfb      	adds	r3, r7, #3
 8011254:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8011256:	4b44      	ldr	r3, [pc, #272]	@ (8011368 <HAL_PCD_DataOutStageCallback+0x120>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	69db      	ldr	r3, [r3, #28]
 8011260:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8011262:	1cfb      	adds	r3, r7, #3
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	220f      	movs	r2, #15
 8011268:	401a      	ands	r2, r3
 801126a:	0013      	movs	r3, r2
 801126c:	005b      	lsls	r3, r3, #1
 801126e:	189b      	adds	r3, r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	69ba      	ldr	r2, [r7, #24]
 8011274:	18d3      	adds	r3, r2, r3
 8011276:	3304      	adds	r3, #4
 8011278:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3320      	adds	r3, #32
 8011280:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8011282:	1cfb      	adds	r3, r7, #3
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d153      	bne.n	8011332 <HAL_PCD_DataOutStageCallback+0xea>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	7a1b      	ldrb	r3, [r3, #8]
 801128e:	2b02      	cmp	r3, #2
 8011290:	d165      	bne.n	801135e <HAL_PCD_DataOutStageCallback+0x116>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8011298:	1cfb      	adds	r3, r7, #3
 801129a:	781a      	ldrb	r2, [r3, #0]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	0011      	movs	r1, r2
 80112a0:	0018      	movs	r0, r3
 80112a2:	f7f5 fa62 	bl	800676a <HAL_PCD_EP_GetRxCount>
 80112a6:	0003      	movs	r3, r0
 80112a8:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	699a      	ldr	r2, [r3, #24]
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	18d2      	adds	r2, r2, r3
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80112be:	429a      	cmp	r2, r3
 80112c0:	d824      	bhi.n	801130c <HAL_PCD_DataOutStageCallback+0xc4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d005      	beq.n	80112da <HAL_PCD_DataOutStageCallback+0x92>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	8a1b      	ldrh	r3, [r3, #16]
 80112d2:	001a      	movs	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d007      	beq.n	80112ea <HAL_PCD_DataOutStageCallback+0xa2>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	22c0      	movs	r2, #192	@ 0xc0
 80112e0:	0092      	lsls	r2, r2, #2
 80112e2:	431a      	orrs	r2, r3
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	605a      	str	r2, [r3, #4]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 80112e8:	e039      	b.n	801135e <HAL_PCD_DataOutStageCallback+0x116>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	8a12      	ldrh	r2, [r2, #16]
 80112f2:	189a      	adds	r2, r3, r2
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7f5 f9f9 	bl	80066fc <HAL_PCD_EP_Receive>
}
 801130a:	e028      	b.n	801135e <HAL_PCD_DataOutStageCallback+0x116>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801130c:	693b      	ldr	r3, [r7, #16]
 801130e:	2227      	movs	r2, #39	@ 0x27
 8011310:	625a      	str	r2, [r3, #36]	@ 0x24
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	2208      	movs	r2, #8
 8011318:	431a      	orrs	r2, r3
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	605a      	str	r2, [r3, #4]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011322:	2b00      	cmp	r3, #0
 8011324:	d01b      	beq.n	801135e <HAL_PCD_DataOutStageCallback+0x116>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801132a:	693a      	ldr	r2, [r7, #16]
 801132c:	0010      	movs	r0, r2
 801132e:	4798      	blx	r3
}
 8011330:	e015      	b.n	801135e <HAL_PCD_DataOutStageCallback+0x116>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8011332:	1cfb      	adds	r3, r7, #3
 8011334:	781a      	ldrb	r2, [r3, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	0011      	movs	r1, r2
 801133a:	0018      	movs	r0, r3
 801133c:	f7f5 fa15 	bl	800676a <HAL_PCD_EP_GetRxCount>
 8011340:	0002      	movs	r2, r0
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	2200      	movs	r2, #0
 801134a:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	2202      	movs	r2, #2
 8011350:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	2208      	movs	r2, #8
 8011358:	431a      	orrs	r2, r3
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	605a      	str	r2, [r3, #4]
}
 801135e:	46c0      	nop			@ (mov r8, r8)
 8011360:	46bd      	mov	sp, r7
 8011362:	b008      	add	sp, #32
 8011364:	bd80      	pop	{r7, pc}
 8011366:	46c0      	nop			@ (mov r8, r8)
 8011368:	200007d0 	.word	0x200007d0

0801136c <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8011374:	4b11      	ldr	r3, [pc, #68]	@ (80113bc <HAL_PCD_ResetCallback+0x50>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801137e:	f7fd fbfd 	bl	800eb7c <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	795b      	ldrb	r3, [r3, #5]
 8011386:	2b02      	cmp	r3, #2
 8011388:	d106      	bne.n	8011398 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801138a:	4b0c      	ldr	r3, [pc, #48]	@ (80113bc <HAL_PCD_ResetCallback+0x50>)
 801138c:	681a      	ldr	r2, [r3, #0]
 801138e:	23a2      	movs	r3, #162	@ 0xa2
 8011390:	005b      	lsls	r3, r3, #1
 8011392:	2101      	movs	r1, #1
 8011394:	50d1      	str	r1, [r2, r3]
        break;
 8011396:	e006      	b.n	80113a6 <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8011398:	4b08      	ldr	r3, [pc, #32]	@ (80113bc <HAL_PCD_ResetCallback+0x50>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	23a2      	movs	r3, #162	@ 0xa2
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	2101      	movs	r1, #1
 80113a2:	50d1      	str	r1, [r2, r3]
        break;
 80113a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 80113a6:	f000 fa63 	bl	8011870 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80113aa:	4b04      	ldr	r3, [pc, #16]	@ (80113bc <HAL_PCD_ResetCallback+0x50>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2201      	movs	r2, #1
 80113b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80113b2:	46c0      	nop			@ (mov r8, r8)
 80113b4:	46bd      	mov	sp, r7
 80113b6:	b002      	add	sp, #8
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	46c0      	nop			@ (mov r8, r8)
 80113bc:	200007d0 	.word	0x200007d0

080113c0 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80113c8:	4b08      	ldr	r3, [pc, #32]	@ (80113ec <HAL_PCD_SuspendCallback+0x2c>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	23b4      	movs	r3, #180	@ 0xb4
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	58d3      	ldr	r3, [r2, r3]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d006      	beq.n	80113e4 <HAL_PCD_SuspendCallback+0x24>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 80113d6:	4b05      	ldr	r3, [pc, #20]	@ (80113ec <HAL_PCD_SuspendCallback+0x2c>)
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	23b4      	movs	r3, #180	@ 0xb4
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	58d3      	ldr	r3, [r2, r3]
 80113e0:	20f4      	movs	r0, #244	@ 0xf4
 80113e2:	4798      	blx	r3
    }
}
 80113e4:	46c0      	nop			@ (mov r8, r8)
 80113e6:	46bd      	mov	sp, r7
 80113e8:	b002      	add	sp, #8
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	200007d0 	.word	0x200007d0

080113f0 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80113f8:	4b08      	ldr	r3, [pc, #32]	@ (801141c <HAL_PCD_ResumeCallback+0x2c>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	23b4      	movs	r3, #180	@ 0xb4
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	58d3      	ldr	r3, [r2, r3]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d006      	beq.n	8011414 <HAL_PCD_ResumeCallback+0x24>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8011406:	4b05      	ldr	r3, [pc, #20]	@ (801141c <HAL_PCD_ResumeCallback+0x2c>)
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	23b4      	movs	r3, #180	@ 0xb4
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	58d3      	ldr	r3, [r2, r3]
 8011410:	20f3      	movs	r0, #243	@ 0xf3
 8011412:	4798      	blx	r3
    }
}
 8011414:	46c0      	nop			@ (mov r8, r8)
 8011416:	46bd      	mov	sp, r7
 8011418:	b002      	add	sp, #8
 801141a:	bd80      	pop	{r7, pc}
 801141c:	200007d0 	.word	0x200007d0

08011420 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8011428:	4b08      	ldr	r3, [pc, #32]	@ (801144c <HAL_PCD_SOFCallback+0x2c>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	23b4      	movs	r3, #180	@ 0xb4
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	58d3      	ldr	r3, [r2, r3]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d006      	beq.n	8011444 <HAL_PCD_SOFCallback+0x24>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8011436:	4b05      	ldr	r3, [pc, #20]	@ (801144c <HAL_PCD_SOFCallback+0x2c>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	23b4      	movs	r3, #180	@ 0xb4
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	58d3      	ldr	r3, [r2, r3]
 8011440:	20f0      	movs	r0, #240	@ 0xf0
 8011442:	4798      	blx	r3
    }
}
 8011444:	46c0      	nop			@ (mov r8, r8)
 8011446:	46bd      	mov	sp, r7
 8011448:	b002      	add	sp, #8
 801144a:	bd80      	pop	{r7, pc}
 801144c:	200007d0 	.word	0x200007d0

08011450 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	2280      	movs	r2, #128	@ 0x80
 801145e:	4013      	ands	r3, r2
 8011460:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	227f      	movs	r2, #127	@ 0x7f
 8011466:	4013      	ands	r3, r2
 8011468:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	2b05      	cmp	r3, #5
 801146e:	d807      	bhi.n	8011480 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2294      	movs	r2, #148	@ 0x94
 8011474:	589b      	ldr	r3, [r3, r2]
 8011476:	791b      	ldrb	r3, [r3, #4]
 8011478:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	4293      	cmp	r3, r2
 801147e:	d301      	bcc.n	8011484 <_stm32_ed_get+0x34>
        return(UX_NULL);
 8011480:	2300      	movs	r3, #0
 8011482:	e014      	b.n	80114ae <_stm32_ed_get+0x5e>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d009      	beq.n	801149e <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	0013      	movs	r3, r2
 801148e:	005b      	lsls	r3, r3, #1
 8011490:	189b      	adds	r3, r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	3348      	adds	r3, #72	@ 0x48
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	18d3      	adds	r3, r2, r3
 801149a:	3304      	adds	r3, #4
 801149c:	e007      	b.n	80114ae <_stm32_ed_get+0x5e>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	0013      	movs	r3, r2
 80114a2:	005b      	lsls	r3, r3, #1
 80114a4:	189b      	adds	r3, r3, r2
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	18d3      	adds	r3, r2, r3
 80114ac:	3304      	adds	r3, #4
}
 80114ae:	0018      	movs	r0, r3
 80114b0:	46bd      	mov	sp, r7
 80114b2:	b004      	add	sp, #16
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80114b6:	b590      	push	{r4, r7, lr}
 80114b8:	b085      	sub	sp, #20
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
 80114be:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	7b9b      	ldrb	r3, [r3, #14]
 80114c4:	001a      	movs	r2, r3
 80114c6:	2380      	movs	r3, #128	@ 0x80
 80114c8:	439a      	bics	r2, r3
 80114ca:	0013      	movs	r3, r2
 80114cc:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	7b9b      	ldrb	r3, [r3, #14]
 80114d2:	001a      	movs	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	0011      	movs	r1, r2
 80114d8:	0018      	movs	r0, r3
 80114da:	f7ff ffb9 	bl	8011450 <_stm32_ed_get>
 80114de:	0003      	movs	r3, r0
 80114e0:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d101      	bne.n	80114ec <_ux_dcd_stm32_endpoint_create+0x36>
        return(UX_NO_ED_AVAILABLE);
 80114e8:	2314      	movs	r3, #20
 80114ea:	e02f      	b.n	801154c <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	2201      	movs	r2, #1
 80114f2:	4013      	ands	r3, r2
 80114f4:	d129      	bne.n	801154a <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	2201      	movs	r2, #1
 80114fc:	431a      	orrs	r2, r3
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	683a      	ldr	r2, [r7, #0]
 801150c:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	b2da      	uxtb	r2, r3
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	7b9b      	ldrb	r3, [r3, #14]
 801151a:	227f      	movs	r2, #127	@ 0x7f
 801151c:	4393      	bics	r3, r2
 801151e:	b2da      	uxtb	r2, r3
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00d      	beq.n	8011546 <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2294      	movs	r2, #148	@ 0x94
 801152e:	5898      	ldr	r0, [r3, r2]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	7b99      	ldrb	r1, [r3, #14]
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	8a1a      	ldrh	r2, [r3, #16]
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	7bdb      	ldrb	r3, [r3, #15]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801153c:	2403      	movs	r4, #3
 801153e:	4023      	ands	r3, r4
 8011540:	b2db      	uxtb	r3, r3
 8011542:	f7f5 f819 	bl	8006578 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 8011546:	2300      	movs	r3, #0
 8011548:	e000      	b.n	801154c <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 801154a:	2314      	movs	r3, #20
}
 801154c:	0018      	movs	r0, r3
 801154e:	46bd      	mov	sp, r7
 8011550:	b005      	add	sp, #20
 8011552:	bd90      	pop	{r4, r7, pc}

08011554 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2200      	movs	r2, #0
 8011568:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2294      	movs	r2, #148	@ 0x94
 801156e:	589a      	ldr	r2, [r3, r2]
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	7b9b      	ldrb	r3, [r3, #14]
 8011574:	0019      	movs	r1, r3
 8011576:	0010      	movs	r0, r2
 8011578:	f7f5 f86f 	bl	800665a <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 801157c:	2300      	movs	r3, #0
}
 801157e:	0018      	movs	r0, r3
 8011580:	46bd      	mov	sp, r7
 8011582:	b004      	add	sp, #16
 8011584:	bd80      	pop	{r7, pc}
	...

08011588 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	689b      	ldr	r3, [r3, #8]
 8011596:	60fb      	str	r3, [r7, #12]

    UX_DISABLE
 8011598:	f000 fb82 	bl	8011ca0 <_ux_utility_interrupt_disable>
 801159c:	0003      	movs	r3, r0
 801159e:	60bb      	str	r3, [r7, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	4a10      	ldr	r2, [pc, #64]	@ (80115e8 <_ux_dcd_stm32_endpoint_reset+0x60>)
 80115a6:	401a      	ands	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2200      	movs	r2, #0
 80115b0:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2294      	movs	r2, #148	@ 0x94
 80115b6:	589a      	ldr	r2, [r3, r2]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	7b9b      	ldrb	r3, [r3, #14]
 80115bc:	0019      	movs	r1, r3
 80115be:	0010      	movs	r0, r2
 80115c0:	f7f5 f984 	bl	80068cc <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2294      	movs	r2, #148	@ 0x94
 80115c8:	589a      	ldr	r2, [r3, r2]
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	7b9b      	ldrb	r3, [r3, #14]
 80115ce:	0019      	movs	r1, r3
 80115d0:	0010      	movs	r0, r2
 80115d2:	f7f5 fa10 	bl	80069f6 <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	0018      	movs	r0, r3
 80115da:	f000 fb70 	bl	8011cbe <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80115de:	2300      	movs	r3, #0
}
 80115e0:	0018      	movs	r0, r3
 80115e2:	46bd      	mov	sp, r7
 80115e4:	b004      	add	sp, #16
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	fffffcf3 	.word	0xfffffcf3

080115ec <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	2204      	movs	r2, #4
 8011602:	431a      	orrs	r2, r3
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2294      	movs	r2, #148	@ 0x94
 801160c:	5898      	ldr	r0, [r3, r2]
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	7b9a      	ldrb	r2, [r3, #14]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	7a9b      	ldrb	r3, [r3, #10]
 8011616:	4313      	orrs	r3, r2
 8011618:	b2db      	uxtb	r3, r3
 801161a:	0019      	movs	r1, r3
 801161c:	f7f5 f8fa 	bl	8006814 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8011620:	2300      	movs	r3, #0
}
 8011622:	0018      	movs	r0, r3
 8011624:	46bd      	mov	sp, r7
 8011626:	b004      	add	sp, #16
 8011628:	bd80      	pop	{r7, pc}

0801162a <_stm32_ed_get>:
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b084      	sub	sp, #16
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	2280      	movs	r2, #128	@ 0x80
 8011638:	4013      	ands	r3, r2
 801163a:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	227f      	movs	r2, #127	@ 0x7f
 8011640:	4013      	ands	r3, r2
 8011642:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	2b05      	cmp	r3, #5
 8011648:	d807      	bhi.n	801165a <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2294      	movs	r2, #148	@ 0x94
 801164e:	589b      	ldr	r3, [r3, r2]
 8011650:	791b      	ldrb	r3, [r3, #4]
 8011652:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	4293      	cmp	r3, r2
 8011658:	d301      	bcc.n	801165e <_stm32_ed_get+0x34>
        return(UX_NULL);
 801165a:	2300      	movs	r3, #0
 801165c:	e014      	b.n	8011688 <_stm32_ed_get+0x5e>
    if (ep_dir)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d009      	beq.n	8011678 <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8011664:	68ba      	ldr	r2, [r7, #8]
 8011666:	0013      	movs	r3, r2
 8011668:	005b      	lsls	r3, r3, #1
 801166a:	189b      	adds	r3, r3, r2
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	3348      	adds	r3, #72	@ 0x48
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	18d3      	adds	r3, r2, r3
 8011674:	3304      	adds	r3, #4
 8011676:	e007      	b.n	8011688 <_stm32_ed_get+0x5e>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	0013      	movs	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	189b      	adds	r3, r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	18d3      	adds	r3, r2, r3
 8011686:	3304      	adds	r3, #4
}
 8011688:	0018      	movs	r0, r3
 801168a:	46bd      	mov	sp, r7
 801168c:	b004      	add	sp, #16
 801168e:	bd80      	pop	{r7, pc}

08011690 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 801169a:	683a      	ldr	r2, [r7, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	0011      	movs	r1, r2
 80116a0:	0018      	movs	r0, r3
 80116a2:	f7ff ffc2 	bl	801162a <_stm32_ed_get>
 80116a6:	0003      	movs	r3, r0
 80116a8:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	2201      	movs	r2, #1
 80116b0:	4013      	ands	r3, r2
 80116b2:	d101      	bne.n	80116b8 <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 80116b4:	23ff      	movs	r3, #255	@ 0xff
 80116b6:	e007      	b.n	80116c8 <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	2204      	movs	r2, #4
 80116be:	4013      	ands	r3, r2
 80116c0:	d101      	bne.n	80116c6 <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 80116c2:	2300      	movs	r3, #0
 80116c4:	e000      	b.n	80116c8 <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 80116c6:	2301      	movs	r3, #1
}
 80116c8:	0018      	movs	r0, r3
 80116ca:	46bd      	mov	sp, r7
 80116cc:	b004      	add	sp, #16
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 80116da:	2300      	movs	r3, #0
}
 80116dc:	0018      	movs	r0, r3
 80116de:	46bd      	mov	sp, r7
 80116e0:	b002      	add	sp, #8
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d106      	bne.n	8011706 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 80116f8:	2255      	movs	r2, #85	@ 0x55
 80116fa:	2102      	movs	r1, #2
 80116fc:	2002      	movs	r0, #2
 80116fe:	f7fe f86b 	bl	800f7d8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 8011702:	2355      	movs	r3, #85	@ 0x55
 8011704:	e07e      	b.n	8011804 <_ux_dcd_stm32_function+0x120>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	69db      	ldr	r3, [r3, #28]
 801170a:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	3b0a      	subs	r3, #10
 8011710:	2b0b      	cmp	r3, #11
 8011712:	d86e      	bhi.n	80117f2 <_ux_dcd_stm32_function+0x10e>
 8011714:	009a      	lsls	r2, r3, #2
 8011716:	4b3d      	ldr	r3, [pc, #244]	@ (801180c <_ux_dcd_stm32_function+0x128>)
 8011718:	18d3      	adds	r3, r2, r3
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	0011      	movs	r1, r2
 8011724:	0018      	movs	r0, r3
 8011726:	f7ff ffd3 	bl	80116d0 <_ux_dcd_stm32_frame_number_get>
 801172a:	0003      	movs	r3, r0
 801172c:	617b      	str	r3, [r7, #20]
        break;
 801172e:	e068      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	0011      	movs	r1, r2
 8011736:	0018      	movs	r0, r3
 8011738:	f000 f98c 	bl	8011a54 <_ux_dcd_stm32_transfer_run>
 801173c:	0003      	movs	r3, r0
 801173e:	617b      	str	r3, [r7, #20]
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 8011740:	e05f      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	0011      	movs	r1, r2
 8011748:	0018      	movs	r0, r3
 801174a:	f000 f963 	bl	8011a14 <_ux_dcd_stm32_transfer_abort>
 801174e:	0003      	movs	r3, r0
 8011750:	617b      	str	r3, [r7, #20]
        break;
 8011752:	e056      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	0011      	movs	r1, r2
 801175a:	0018      	movs	r0, r3
 801175c:	f7ff feab 	bl	80114b6 <_ux_dcd_stm32_endpoint_create>
 8011760:	0003      	movs	r3, r0
 8011762:	617b      	str	r3, [r7, #20]
        break;
 8011764:	e04d      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	0011      	movs	r1, r2
 801176c:	0018      	movs	r0, r3
 801176e:	f7ff fef1 	bl	8011554 <_ux_dcd_stm32_endpoint_destroy>
 8011772:	0003      	movs	r3, r0
 8011774:	617b      	str	r3, [r7, #20]
        break;
 8011776:	e044      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	0011      	movs	r1, r2
 801177e:	0018      	movs	r0, r3
 8011780:	f7ff ff02 	bl	8011588 <_ux_dcd_stm32_endpoint_reset>
 8011784:	0003      	movs	r3, r0
 8011786:	617b      	str	r3, [r7, #20]
        break;
 8011788:	e03b      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	0011      	movs	r1, r2
 8011790:	0018      	movs	r0, r3
 8011792:	f7ff ff2b 	bl	80115ec <_ux_dcd_stm32_endpoint_stall>
 8011796:	0003      	movs	r3, r0
 8011798:	617b      	str	r3, [r7, #20]
        break;
 801179a:	e032      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	2294      	movs	r2, #148	@ 0x94
 80117a0:	589b      	ldr	r3, [r3, r2]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	b2d2      	uxtb	r2, r2
 80117a6:	0011      	movs	r1, r2
 80117a8:	0018      	movs	r0, r3
 80117aa:	f7f4 febb 	bl	8006524 <HAL_PCD_SetAddress>
 80117ae:	0003      	movs	r3, r0
 80117b0:	617b      	str	r3, [r7, #20]
        break;
 80117b2:	e026      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b0b      	cmp	r3, #11
 80117b8:	d108      	bne.n	80117cc <_ux_dcd_stm32_function+0xe8>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2294      	movs	r2, #148	@ 0x94
 80117be:	589b      	ldr	r3, [r3, r2]
 80117c0:	0018      	movs	r0, r3
 80117c2:	f7f4 fd7e 	bl	80062c2 <HAL_PCD_Stop>
 80117c6:	0003      	movs	r3, r0
 80117c8:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 80117ca:	e01a      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>
          status = UX_SUCCESS;
 80117cc:	2300      	movs	r3, #0
 80117ce:	617b      	str	r3, [r7, #20]
        break;
 80117d0:	e017      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	0011      	movs	r1, r2
 80117d8:	0018      	movs	r0, r3
 80117da:	f7ff ff59 	bl	8011690 <_ux_dcd_stm32_endpoint_status>
 80117de:	0003      	movs	r3, r0
 80117e0:	617b      	str	r3, [r7, #20]
        break;
 80117e2:	e00e      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>

#if defined(UX_DEVICE_STANDALONE)
    case UX_DCD_ISR_PENDING:

        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	0018      	movs	r0, r3
 80117e8:	f7ff fb70 	bl	8010ecc <_ux_dcd_stm32_setup_isr_pending>
        status = UX_SUCCESS;
 80117ec:	2300      	movs	r3, #0
 80117ee:	617b      	str	r3, [r7, #20]
        break;
 80117f0:	e007      	b.n	8011802 <_ux_dcd_stm32_function+0x11e>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 80117f2:	2254      	movs	r2, #84	@ 0x54
 80117f4:	2102      	movs	r1, #2
 80117f6:	2002      	movs	r0, #2
 80117f8:	f7fd ffee 	bl	800f7d8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 80117fc:	2354      	movs	r3, #84	@ 0x54
 80117fe:	617b      	str	r3, [r7, #20]
        break;
 8011800:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 8011802:	697b      	ldr	r3, [r7, #20]
}
 8011804:	0018      	movs	r0, r3
 8011806:	46bd      	mov	sp, r7
 8011808:	b006      	add	sp, #24
 801180a:	bd80      	pop	{r7, pc}
 801180c:	08015cec 	.word	0x08015cec

08011810 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801181a:	4b13      	ldr	r3, [pc, #76]	@ (8011868 <_ux_dcd_stm32_initialize+0x58>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2280      	movs	r2, #128	@ 0x80
 8011824:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8011826:	2298      	movs	r2, #152	@ 0x98
 8011828:	2100      	movs	r1, #0
 801182a:	2000      	movs	r0, #0
 801182c:	f7fe f920 	bl	800fa70 <_ux_utility_memory_allocate>
 8011830:	0003      	movs	r3, r0
 8011832:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d101      	bne.n	801183e <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 801183a:	2312      	movs	r3, #18
 801183c:	e010      	b.n	8011860 <_ux_dcd_stm32_initialize+0x50>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	68ba      	ldr	r2, [r7, #8]
 8011842:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	4a07      	ldr	r2, [pc, #28]	@ (801186c <_ux_dcd_stm32_initialize+0x5c>)
 801184e:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8011850:	683a      	ldr	r2, [r7, #0]
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2194      	movs	r1, #148	@ 0x94
 8011856:	505a      	str	r2, [r3, r1]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2201      	movs	r2, #1
 801185c:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801185e:	2300      	movs	r3, #0
}
 8011860:	0018      	movs	r0, r3
 8011862:	46bd      	mov	sp, r7
 8011864:	b004      	add	sp, #16
 8011866:	bd80      	pop	{r7, pc}
 8011868:	200007d0 	.word	0x200007d0
 801186c:	080116e5 	.word	0x080116e5

08011870 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8011876:	4b64      	ldr	r3, [pc, #400]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	69db      	ldr	r3, [r3, #28]
 8011880:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8011882:	4b61      	ldr	r3, [pc, #388]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3324      	adds	r3, #36	@ 0x24
 8011888:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 801188a:	4b5f      	ldr	r3, [pc, #380]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	23b0      	movs	r3, #176	@ 0xb0
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	58d3      	ldr	r3, [r2, r3]
 8011894:	2b01      	cmp	r3, #1
 8011896:	d110      	bne.n	80118ba <_ux_dcd_stm32_initialize_complete+0x4a>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8011898:	4b5b      	ldr	r3, [pc, #364]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	4b5a      	ldr	r3, [pc, #360]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	21f4      	movs	r1, #244	@ 0xf4
 80118a2:	5852      	ldr	r2, [r2, r1]
 80118a4:	21cc      	movs	r1, #204	@ 0xcc
 80118a6:	505a      	str	r2, [r3, r1]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 80118a8:	4b57      	ldr	r3, [pc, #348]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	4b56      	ldr	r3, [pc, #344]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	21f8      	movs	r1, #248	@ 0xf8
 80118b2:	5852      	ldr	r2, [r2, r1]
 80118b4:	21d0      	movs	r1, #208	@ 0xd0
 80118b6:	505a      	str	r2, [r3, r1]
 80118b8:	e02d      	b.n	8011916 <_ux_dcd_stm32_initialize_complete+0xa6>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 80118ba:	4b53      	ldr	r3, [pc, #332]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	23b0      	movs	r3, #176	@ 0xb0
 80118c0:	005b      	lsls	r3, r3, #1
 80118c2:	2100      	movs	r1, #0
 80118c4:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 80118c6:	4b50      	ldr	r3, [pc, #320]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	23a2      	movs	r3, #162	@ 0xa2
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	58d3      	ldr	r3, [r2, r3]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d110      	bne.n	80118f6 <_ux_dcd_stm32_initialize_complete+0x86>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80118d4:	4b4c      	ldr	r3, [pc, #304]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	4b4b      	ldr	r3, [pc, #300]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	21d4      	movs	r1, #212	@ 0xd4
 80118de:	5852      	ldr	r2, [r2, r1]
 80118e0:	21cc      	movs	r1, #204	@ 0xcc
 80118e2:	505a      	str	r2, [r3, r1]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80118e4:	4b48      	ldr	r3, [pc, #288]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	4b47      	ldr	r3, [pc, #284]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	21d8      	movs	r1, #216	@ 0xd8
 80118ee:	5852      	ldr	r2, [r2, r1]
 80118f0:	21d0      	movs	r1, #208	@ 0xd0
 80118f2:	505a      	str	r2, [r3, r1]
 80118f4:	e00f      	b.n	8011916 <_ux_dcd_stm32_initialize_complete+0xa6>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 80118f6:	4b44      	ldr	r3, [pc, #272]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	4b43      	ldr	r3, [pc, #268]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	21dc      	movs	r1, #220	@ 0xdc
 8011900:	5852      	ldr	r2, [r2, r1]
 8011902:	21cc      	movs	r1, #204	@ 0xcc
 8011904:	505a      	str	r2, [r3, r1]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8011906:	4b40      	ldr	r3, [pc, #256]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	4b3f      	ldr	r3, [pc, #252]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	21e0      	movs	r1, #224	@ 0xe0
 8011910:	5852      	ldr	r2, [r2, r1]
 8011912:	21d0      	movs	r1, #208	@ 0xd0
 8011914:	505a      	str	r2, [r3, r1]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8011916:	4b3c      	ldr	r3, [pc, #240]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	22cc      	movs	r2, #204	@ 0xcc
 801191c:	589b      	ldr	r3, [r3, r2]
 801191e:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 8011924:	4939      	ldr	r1, [pc, #228]	@ (8011a0c <_ux_dcd_stm32_initialize_complete+0x19c>)
 8011926:	68b8      	ldr	r0, [r7, #8]
 8011928:	220e      	movs	r2, #14
 801192a:	f7fe f829 	bl	800f980 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	3338      	adds	r3, #56	@ 0x38
 8011932:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a36      	ldr	r2, [pc, #216]	@ (8011a10 <_ux_dcd_stm32_initialize_complete+0x1a0>)
 8011938:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	3318      	adds	r3, #24
 8011946:	001a      	movs	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	689b      	ldr	r3, [r3, #8]
 8011954:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	7adb      	ldrb	r3, [r3, #11]
 801195a:	001a      	movs	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	3318      	adds	r3, #24
 8011964:	001a      	movs	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8011972:	6978      	ldr	r0, [r7, #20]
 8011974:	210e      	movs	r1, #14
 8011976:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	2294      	movs	r2, #148	@ 0x94
 801197c:	589b      	ldr	r3, [r3, r2]
 801197e:	2100      	movs	r1, #0
 8011980:	0018      	movs	r0, r3
 8011982:	f7f5 f838 	bl	80069f6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	2294      	movs	r2, #148	@ 0x94
 801198a:	5898      	ldr	r0, [r3, r2]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	7adb      	ldrb	r3, [r3, #11]
 8011990:	001a      	movs	r2, r3
 8011992:	2300      	movs	r3, #0
 8011994:	2100      	movs	r1, #0
 8011996:	f7f4 fdef 	bl	8006578 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	2294      	movs	r2, #148	@ 0x94
 801199e:	589b      	ldr	r3, [r3, r2]
 80119a0:	2180      	movs	r1, #128	@ 0x80
 80119a2:	0018      	movs	r0, r3
 80119a4:	f7f5 f827 	bl	80069f6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2294      	movs	r2, #148	@ 0x94
 80119ac:	5898      	ldr	r0, [r3, r2]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	7adb      	ldrb	r3, [r3, #11]
 80119b2:	001a      	movs	r2, r3
 80119b4:	2300      	movs	r3, #0
 80119b6:	2180      	movs	r1, #128	@ 0x80
 80119b8:	f7f4 fdde 	bl	8006578 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2200      	movs	r2, #0
 80119c0:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2201      	movs	r2, #1
 80119c6:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2201      	movs	r2, #1
 80119cc:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2208      	movs	r2, #8
 80119d2:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2208      	movs	r2, #8
 80119d8:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2200      	movs	r2, #0
 80119de:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80119e0:	4b09      	ldr	r3, [pc, #36]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	23b4      	movs	r3, #180	@ 0xb4
 80119e6:	005b      	lsls	r3, r3, #1
 80119e8:	58d3      	ldr	r3, [r2, r3]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d006      	beq.n	80119fc <_ux_dcd_stm32_initialize_complete+0x18c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 80119ee:	4b06      	ldr	r3, [pc, #24]	@ (8011a08 <_ux_dcd_stm32_initialize_complete+0x198>)
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	23b4      	movs	r3, #180	@ 0xb4
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	58d3      	ldr	r3, [r2, r3]
 80119f8:	2001      	movs	r0, #1
 80119fa:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	0018      	movs	r0, r3
 8011a00:	46bd      	mov	sp, r7
 8011a02:	b006      	add	sp, #24
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	46c0      	nop			@ (mov r8, r8)
 8011a08:	200007d0 	.word	0x200007d0
 8011a0c:	20000028 	.word	0x20000028
 8011a10:	00002710 	.word	0x00002710

08011a14 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]

   UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	689b      	ldr	r3, [r3, #8]
 8011a22:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2294      	movs	r2, #148	@ 0x94
 8011a28:	589a      	ldr	r2, [r3, r2]
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	7b9b      	ldrb	r3, [r3, #14]
 8011a2e:	0019      	movs	r1, r3
 8011a30:	0010      	movs	r0, r2
 8011a32:	f7f4 ffa9 	bl	8006988 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2294      	movs	r2, #148	@ 0x94
 8011a3a:	589a      	ldr	r2, [r3, r2]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	7b9b      	ldrb	r3, [r3, #14]
 8011a40:	0019      	movs	r1, r3
 8011a42:	0010      	movs	r0, r2
 8011a44:	f7f4 ffd7 	bl	80069f6 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	0018      	movs	r0, r3
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	b004      	add	sp, #16
 8011a50:	bd80      	pop	{r7, pc}
	...

08011a54 <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	617b      	str	r3, [r7, #20]

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 8011a6a:	f000 f919 	bl	8011ca0 <_ux_utility_interrupt_disable>
 8011a6e:	0003      	movs	r3, r0
 8011a70:	60fb      	str	r3, [r7, #12]

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	60bb      	str	r3, [r7, #8]

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 8011a78:	4b2f      	ldr	r3, [pc, #188]	@ (8011b38 <_ux_dcd_stm32_transfer_run+0xe4>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d108      	bne.n	8011a94 <_ux_dcd_stm32_transfer_run+0x40>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	2226      	movs	r2, #38	@ 0x26
 8011a86:	625a      	str	r2, [r3, #36]	@ 0x24
        UX_RESTORE
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	0018      	movs	r0, r3
 8011a8c:	f000 f917 	bl	8011cbe <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 8011a90:	2301      	movs	r3, #1
 8011a92:	e04c      	b.n	8011b2e <_ux_dcd_stm32_transfer_run+0xda>
    }

    /* ED stalled.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	2204      	movs	r2, #4
 8011a98:	4013      	ands	r3, r2
 8011a9a:	d008      	beq.n	8011aae <_ux_dcd_stm32_transfer_run+0x5a>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2221      	movs	r2, #33	@ 0x21
 8011aa0:	625a      	str	r2, [r3, #36]	@ 0x24
        UX_RESTORE
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	0018      	movs	r0, r3
 8011aa6:	f000 f90a 	bl	8011cbe <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 8011aaa:	2304      	movs	r3, #4
 8011aac:	e03f      	b.n	8011b2e <_ux_dcd_stm32_transfer_run+0xda>
    }

    /* ED transfer in progress.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	2202      	movs	r2, #2
 8011ab2:	4013      	ands	r3, r2
 8011ab4:	d015      	beq.n	8011ae2 <_ux_dcd_stm32_transfer_run+0x8e>
    {
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	2208      	movs	r2, #8
 8011aba:	4013      	ands	r3, r2
 8011abc:	d00b      	beq.n	8011ad6 <_ux_dcd_stm32_transfer_run+0x82>
        {

            /* Keep used, stall and task pending bits.  */
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8011b3c <_ux_dcd_stm32_transfer_run+0xe8>)
 8011ac4:	401a      	ands	r2, r3
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	605a      	str	r2, [r3, #4]
                                        UX_DCD_STM32_ED_STATUS_STALLED |
                                        UX_DCD_STM32_ED_STATUS_TASK_PENDING);
            UX_RESTORE
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	0018      	movs	r0, r3
 8011ace:	f000 f8f6 	bl	8011cbe <_ux_utility_interrupt_restore>
            return(UX_STATE_NEXT);
 8011ad2:	2304      	movs	r3, #4
 8011ad4:	e02b      	b.n	8011b2e <_ux_dcd_stm32_transfer_run+0xda>
        }
        UX_RESTORE
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	0018      	movs	r0, r3
 8011ada:	f000 f8f0 	bl	8011cbe <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 8011ade:	2305      	movs	r3, #5
 8011ae0:	e025      	b.n	8011b2e <_ux_dcd_stm32_transfer_run+0xda>
    }


    /* Start transfer.  */
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	2202      	movs	r2, #2
 8011ae8:	431a      	orrs	r2, r3
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	605a      	str	r2, [r3, #4]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011af2:	2b03      	cmp	r3, #3
 8011af4:	d10b      	bne.n	8011b0e <_ux_dcd_stm32_transfer_run+0xba>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2294      	movs	r2, #148	@ 0x94
 8011afa:	5898      	ldr	r0, [r3, r2]
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	f7f4 fe48 	bl	800679c <HAL_PCD_EP_Transmit>
 8011b0c:	e00a      	b.n	8011b24 <_ux_dcd_stm32_transfer_run+0xd0>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2294      	movs	r2, #148	@ 0x94
 8011b12:	5898      	ldr	r0, [r3, r2]
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	695b      	ldr	r3, [r3, #20]
 8011b20:	f7f4 fdec 	bl	80066fc <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	0018      	movs	r0, r3
 8011b28:	f000 f8c9 	bl	8011cbe <_ux_utility_interrupt_restore>
    return(UX_STATE_WAIT);
 8011b2c:	2305      	movs	r3, #5
}
 8011b2e:	0018      	movs	r0, r3
 8011b30:	46bd      	mov	sp, r7
 8011b32:	b006      	add	sp, #24
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	46c0      	nop			@ (mov r8, r8)
 8011b38:	200007d0 	.word	0x200007d0
 8011b3c:	00000405 	.word	0x00000405

08011b40 <MX_USBX_Device_Init>:
  * @param  none
  * @retval status
  */

UINT MX_USBX_Device_Init(VOID)
{
 8011b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b42:	b091      	sub	sp, #68	@ 0x44
 8011b44:	af06      	add	r7, sp, #24
   UINT ret = UX_SUCCESS;
 8011b46:	2300      	movs	r3, #0
 8011b48:	627b      	str	r3, [r7, #36]	@ 0x24
  UCHAR *pointer;

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  pointer = ux_device_byte_pool_buffer;
 8011b4a:	4b48      	ldr	r3, [pc, #288]	@ (8011c6c <MX_USBX_Device_Init+0x12c>)
 8011b4c:	623b      	str	r3, [r7, #32]

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8011b4e:	23c0      	movs	r3, #192	@ 0xc0
 8011b50:	0159      	lsls	r1, r3, #5
 8011b52:	6a38      	ldr	r0, [r7, #32]
 8011b54:	2300      	movs	r3, #0
 8011b56:	2200      	movs	r2, #0
 8011b58:	f7fd fef8 	bl	800f94c <_uxe_system_initialize>
 8011b5c:	1e03      	subs	r3, r0, #0
 8011b5e:	d001      	beq.n	8011b64 <MX_USBX_Device_Init+0x24>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 8011b60:	23ff      	movs	r3, #255	@ 0xff
 8011b62:	e07e      	b.n	8011c62 <MX_USBX_Device_Init+0x122>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 8011b64:	230c      	movs	r3, #12
 8011b66:	18fb      	adds	r3, r7, r3
 8011b68:	0019      	movs	r1, r3
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	f000 f9ce 	bl	8011f0c <USBD_Get_Device_Framework_Speed>
 8011b70:	0003      	movs	r3, r0
 8011b72:	61fb      	str	r3, [r7, #28]
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8011b74:	2308      	movs	r3, #8
 8011b76:	18fb      	adds	r3, r7, r3
 8011b78:	0019      	movs	r1, r3
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	f000 f9c6 	bl	8011f0c <USBD_Get_Device_Framework_Speed>
 8011b80:	0003      	movs	r3, r0
 8011b82:	61bb      	str	r3, [r7, #24]
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8011b84:	1d3b      	adds	r3, r7, #4
 8011b86:	0018      	movs	r0, r3
 8011b88:	f000 fa0a 	bl	8011fa0 <USBD_Get_String_Framework>
 8011b8c:	0003      	movs	r3, r0
 8011b8e:	617b      	str	r3, [r7, #20]

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 8011b90:	003b      	movs	r3, r7
 8011b92:	0018      	movs	r0, r3
 8011b94:	f000 faa6 	bl	80120e4 <USBD_Get_Language_Id_Framework>
 8011b98:	0003      	movs	r3, r0
 8011b9a:	613b      	str	r3, [r7, #16]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 8011b9c:	68fc      	ldr	r4, [r7, #12]
 8011b9e:	68be      	ldr	r6, [r7, #8]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	683a      	ldr	r2, [r7, #0]
 8011ba4:	69bd      	ldr	r5, [r7, #24]
 8011ba6:	69f8      	ldr	r0, [r7, #28]
 8011ba8:	4931      	ldr	r1, [pc, #196]	@ (8011c70 <MX_USBX_Device_Init+0x130>)
 8011baa:	9104      	str	r1, [sp, #16]
 8011bac:	9203      	str	r2, [sp, #12]
 8011bae:	693a      	ldr	r2, [r7, #16]
 8011bb0:	9202      	str	r2, [sp, #8]
 8011bb2:	9301      	str	r3, [sp, #4]
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	0033      	movs	r3, r6
 8011bba:	002a      	movs	r2, r5
 8011bbc:	0021      	movs	r1, r4
 8011bbe:	f7fd f8f3 	bl	800eda8 <_ux_device_stack_initialize>
 8011bc2:	1e03      	subs	r3, r0, #0
 8011bc4:	d001      	beq.n	8011bca <MX_USBX_Device_Init+0x8a>
                                 language_id_framework,
                                 language_id_framework_length,
                                 USBD_ChangeFunction) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
    return UX_ERROR;
 8011bc6:	23ff      	movs	r3, #255	@ 0xff
 8011bc8:	e04b      	b.n	8011c62 <MX_USBX_Device_Init+0x122>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the hid custom class parameters for the device */
  custom_hid_parameter.ux_slave_class_hid_instance_activate         = USBD_Custom_HID_Activate;
 8011bca:	4b2a      	ldr	r3, [pc, #168]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8011c78 <MX_USBX_Device_Init+0x138>)
 8011bce:	601a      	str	r2, [r3, #0]
  custom_hid_parameter.ux_slave_class_hid_instance_deactivate       = USBD_Custom_HID_Deactivate;
 8011bd0:	4b28      	ldr	r3, [pc, #160]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8011c7c <MX_USBX_Device_Init+0x13c>)
 8011bd4:	605a      	str	r2, [r3, #4]
  custom_hid_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_CUSTOM);
 8011bd6:	2000      	movs	r0, #0
 8011bd8:	f000 fb10 	bl	80121fc <USBD_HID_ReportDesc>
 8011bdc:	0002      	movs	r2, r0
 8011bde:	4b25      	ldr	r3, [pc, #148]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011be0:	609a      	str	r2, [r3, #8]
  custom_hid_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 8011be2:	2000      	movs	r0, #0
 8011be4:	f000 fb22 	bl	801222c <USBD_HID_ReportDesc_length>
 8011be8:	0003      	movs	r3, r0
 8011bea:	001a      	movs	r2, r3
 8011bec:	4b21      	ldr	r3, [pc, #132]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011bee:	611a      	str	r2, [r3, #16]
  custom_hid_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8011bf0:	4b20      	ldr	r3, [pc, #128]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	60da      	str	r2, [r3, #12]
  custom_hid_parameter.ux_device_class_hid_parameter_callback       = USBD_Custom_HID_SetFeature;
 8011bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011bf8:	4a21      	ldr	r2, [pc, #132]	@ (8011c80 <MX_USBX_Device_Init+0x140>)
 8011bfa:	615a      	str	r2, [r3, #20]
  custom_hid_parameter.ux_device_class_hid_parameter_get_callback   = USBD_Custom_HID_GetReport;
 8011bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011bfe:	4a21      	ldr	r2, [pc, #132]	@ (8011c84 <MX_USBX_Device_Init+0x144>)
 8011c00:	619a      	str	r2, [r3, #24]
#ifdef UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_initialize       = ux_device_class_hid_receiver_initialize;
 8011c02:	4b1c      	ldr	r3, [pc, #112]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011c04:	4a20      	ldr	r2, [pc, #128]	@ (8011c88 <MX_USBX_Device_Init+0x148>)
 8011c06:	61da      	str	r2, [r3, #28]
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_number = USBD_Custom_HID_EventMaxNumber();
 8011c08:	f000 f95c 	bl	8011ec4 <USBD_Custom_HID_EventMaxNumber>
 8011c0c:	0002      	movs	r2, r0
 8011c0e:	4b19      	ldr	r3, [pc, #100]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011c10:	621a      	str	r2, [r3, #32]
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_max_length = USBD_Custom_HID_EventMaxLength();
 8011c12:	f000 f969 	bl	8011ee8 <USBD_Custom_HID_EventMaxLength>
 8011c16:	0002      	movs	r2, r0
 8011c18:	4b16      	ldr	r3, [pc, #88]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  custom_hid_parameter.ux_device_class_hid_parameter_receiver_event_callback   = USBD_Custom_HID_SetReport;
 8011c1c:	4b15      	ldr	r3, [pc, #84]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8011c8c <MX_USBX_Device_Init+0x14c>)
 8011c20:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN CUSTOM_HID_PARAMETER */

  /* USER CODE END CUSTOM_HID_PARAMETER */

  /* Get Custom hid configuration number */
  hid_custom_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8011c22:	2100      	movs	r1, #0
 8011c24:	2001      	movs	r0, #1
 8011c26:	f000 fad5 	bl	80121d4 <USBD_Get_Configuration_Number>
 8011c2a:	0003      	movs	r3, r0
 8011c2c:	001a      	movs	r2, r3
 8011c2e:	4b18      	ldr	r3, [pc, #96]	@ (8011c90 <MX_USBX_Device_Init+0x150>)
 8011c30:	601a      	str	r2, [r3, #0]

  /* Find Custom hid interface number */
  hid_custom_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_CUSTOM);
 8011c32:	2100      	movs	r1, #0
 8011c34:	2001      	movs	r0, #1
 8011c36:	f000 fa7d 	bl	8012134 <USBD_Get_Interface_Number>
 8011c3a:	0003      	movs	r3, r0
 8011c3c:	001a      	movs	r2, r3
 8011c3e:	4b15      	ldr	r3, [pc, #84]	@ (8011c94 <MX_USBX_Device_Init+0x154>)
 8011c40:	601a      	str	r2, [r3, #0]

  /* Initialize the device hid custom class */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8011c42:	4b13      	ldr	r3, [pc, #76]	@ (8011c90 <MX_USBX_Device_Init+0x150>)
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	4b13      	ldr	r3, [pc, #76]	@ (8011c94 <MX_USBX_Device_Init+0x154>)
 8011c48:	681c      	ldr	r4, [r3, #0]
 8011c4a:	4913      	ldr	r1, [pc, #76]	@ (8011c98 <MX_USBX_Device_Init+0x158>)
 8011c4c:	4813      	ldr	r0, [pc, #76]	@ (8011c9c <MX_USBX_Device_Init+0x15c>)
 8011c4e:	4b09      	ldr	r3, [pc, #36]	@ (8011c74 <MX_USBX_Device_Init+0x134>)
 8011c50:	9300      	str	r3, [sp, #0]
 8011c52:	0023      	movs	r3, r4
 8011c54:	f7fc f976 	bl	800df44 <_ux_device_stack_class_register>
 8011c58:	1e03      	subs	r3, r0, #0
 8011c5a:	d001      	beq.n	8011c60 <MX_USBX_Device_Init+0x120>
                                     hid_custom_configuration_number,
                                     hid_custom_interface_number,
                                     &custom_hid_parameter) != UX_SUCCESS)
  {
  /* USER CODE BEGIN USBX_DEVICE_HID_CUSTOM_REGISTER_ERROR */
  return UX_ERROR;
 8011c5c:	23ff      	movs	r3, #255	@ 0xff
 8011c5e:	e000      	b.n	8011c62 <MX_USBX_Device_Init+0x122>

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 8011c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c62:	0018      	movs	r0, r3
 8011c64:	46bd      	mov	sp, r7
 8011c66:	b00b      	add	sp, #44	@ 0x2c
 8011c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c6a:	46c0      	nop			@ (mov r8, r8)
 8011c6c:	200007d8 	.word	0x200007d8
 8011c70:	08011cf1 	.word	0x08011cf1
 8011c74:	200057e0 	.word	0x200057e0
 8011c78:	08011de5 	.word	0x08011de5
 8011c7c:	08011e0d 	.word	0x08011e0d
 8011c80:	08011e29 	.word	0x08011e29
 8011c84:	08011e4d 	.word	0x08011e4d
 8011c88:	080108b1 	.word	0x080108b1
 8011c8c:	08011e71 	.word	0x08011e71
 8011c90:	200057dc 	.word	0x200057dc
 8011c94:	200057d8 	.word	0x200057d8
 8011c98:	080104d1 	.word	0x080104d1
 8011c9c:	2000000c 	.word	0x2000000c

08011ca0 <_ux_utility_interrupt_disable>:
  *         USB utility interrupt disable.
  * @param  none
  * @retval none
  */
ALIGN_TYPE _ux_utility_interrupt_disable(VOID)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8011caa:	603b      	str	r3, [r7, #0]
  return(result);
 8011cac:	683b      	ldr	r3, [r7, #0]
  UINT interrupt_save;
  /* USER CODE BEGIN _ux_utility_interrupt_disable */
  interrupt_save = __get_PRIMASK();
 8011cae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8011cb0:	b672      	cpsid	i
}
 8011cb2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  /* USER CODE END _ux_utility_interrupt_disable */

  return interrupt_save;
 8011cb4:	687b      	ldr	r3, [r7, #4]
}
 8011cb6:	0018      	movs	r0, r3
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	b002      	add	sp, #8
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <_ux_utility_interrupt_restore>:
  *         USB utility interrupt restore.
  * @param  flags
  * @retval none
  */
VOID _ux_utility_interrupt_restore(ALIGN_TYPE flags)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f383 8810 	msr	PRIMASK, r3
}
 8011cd0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN _ux_utility_interrupt_restore */
  __set_PRIMASK(flags);
  /* USER CODE END _ux_utility_interrupt_restore */
}
 8011cd2:	46c0      	nop			@ (mov r8, r8)
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	b004      	add	sp, #16
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <_ux_utility_time_get>:
  *         Get Time Tick for host timing.
  * @param  none
  * @retval time tick
  */
ULONG _ux_utility_time_get(VOID)
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b082      	sub	sp, #8
 8011cde:	af00      	add	r7, sp, #0
  ULONG time_tick = 0U;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN _ux_utility_time_get */

  /* USER CODE END _ux_utility_time_get */

  return time_tick;
 8011ce4:	687b      	ldr	r3, [r7, #4]
}
 8011ce6:	0018      	movs	r0, r3
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	b002      	add	sp, #8
 8011cec:	bd80      	pop	{r7, pc}
	...

08011cf0 <USBD_ChangeFunction>:
  *         This function is called when the device state changes.
  * @param  Device_State: USB Device State
  * @retval status
  */
static UINT USBD_ChangeFunction(ULONG Device_State)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
   UINT status = UX_SUCCESS;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN USBD_ChangeFunction0 */

  /* USER CODE END USBD_ChangeFunction0 */

  switch (Device_State)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2bf4      	cmp	r3, #244	@ 0xf4
 8011d00:	d812      	bhi.n	8011d28 <USBD_ChangeFunction+0x38>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2bf0      	cmp	r3, #240	@ 0xf0
 8011d06:	d206      	bcs.n	8011d16 <USBD_ChangeFunction+0x26>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d00e      	beq.n	8011d2c <USBD_ChangeFunction+0x3c>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2b0a      	cmp	r3, #10
 8011d12:	d00d      	beq.n	8011d30 <USBD_ChangeFunction+0x40>

      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */

      break;
 8011d14:	e008      	b.n	8011d28 <USBD_ChangeFunction+0x38>
  switch (Device_State)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	3bf0      	subs	r3, #240	@ 0xf0
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d804      	bhi.n	8011d28 <USBD_ChangeFunction+0x38>
 8011d1e:	009a      	lsls	r2, r3, #2
 8011d20:	4b07      	ldr	r3, [pc, #28]	@ (8011d40 <USBD_ChangeFunction+0x50>)
 8011d22:	18d3      	adds	r3, r2, r3
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	469f      	mov	pc, r3
      break;
 8011d28:	46c0      	nop			@ (mov r8, r8)
 8011d2a:	e004      	b.n	8011d36 <USBD_ChangeFunction+0x46>
      break;
 8011d2c:	46c0      	nop			@ (mov r8, r8)
 8011d2e:	e002      	b.n	8011d36 <USBD_ChangeFunction+0x46>
      break;
 8011d30:	46c0      	nop			@ (mov r8, r8)
 8011d32:	e000      	b.n	8011d36 <USBD_ChangeFunction+0x46>
      break;
 8011d34:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN USBD_ChangeFunction1 */

  /* USER CODE END USBD_ChangeFunction1 */

  return status;
 8011d36:	68fb      	ldr	r3, [r7, #12]
}
 8011d38:	0018      	movs	r0, r3
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	b004      	add	sp, #16
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08015d1c 	.word	0x08015d1c

08011d44 <USB_Send_HidReport>:
  * @param  report_buffer: Pointer to the buffer containing the data to send.
  * @param  report_len: The number of bytes to send. Must be <= 64.
  * @retval UX_SUCCESS on success, or an error code on failure.
  */
UINT USB_Send_HidReport(uint8_t *report_buffer, ULONG report_len)
{
 8011d44:	b590      	push	{r4, r7, lr}
 8011d46:	b097      	sub	sp, #92	@ 0x5c
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
  UINT status;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  if (_ux_system_slave->ux_system_slave_device.ux_slave_device_state != UX_DEVICE_CONFIGURED || hid_instance_global == UX_NULL)
 8011d4e:	4b18      	ldr	r3, [pc, #96]	@ (8011db0 <USB_Send_HidReport+0x6c>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d103      	bne.n	8011d60 <USB_Send_HidReport+0x1c>
 8011d58:	4b16      	ldr	r3, [pc, #88]	@ (8011db4 <USB_Send_HidReport+0x70>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d101      	bne.n	8011d64 <USB_Send_HidReport+0x20>
  {
    return UX_ERROR;
 8011d60:	23ff      	movs	r3, #255	@ 0xff
 8011d62:	e020      	b.n	8011da6 <USB_Send_HidReport+0x62>
  }

  if (report_buffer == UX_NULL || report_len == 0 || report_len > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d005      	beq.n	8011d76 <USB_Send_HidReport+0x32>
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <USB_Send_HidReport+0x32>
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	2b40      	cmp	r3, #64	@ 0x40
 8011d74:	d901      	bls.n	8011d7a <USB_Send_HidReport+0x36>
  {
    return UX_INVALID_PARAMETER;
 8011d76:	23fa      	movs	r3, #250	@ 0xfa
 8011d78:	e015      	b.n	8011da6 <USB_Send_HidReport+0x62>

  /*
   * Prepare the HID event for sending.
   */
  // 1. Point the event's buffer pointer to YOUR data buffer.
  ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, \
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	2408      	movs	r4, #8
 8011d80:	193b      	adds	r3, r7, r4
 8011d82:	330c      	adds	r3, #12
 8011d84:	0018      	movs	r0, r3
 8011d86:	f7fe f883 	bl	800fe90 <_ux_utility_memory_copy>
		  	  	  	  	  report_buffer,	\
						  report_len);

  // 2. Set the length of the data to send.
  hid_event.ux_device_class_hid_event_length = report_len;
 8011d8a:	0021      	movs	r1, r4
 8011d8c:	187b      	adds	r3, r7, r1
 8011d8e:	683a      	ldr	r2, [r7, #0]
 8011d90:	609a      	str	r2, [r3, #8]

  /*
   * 3. Send the event. This will queue the report for transmission on the
   * Interrupt IN endpoint.
   */
  status = ux_device_class_hid_event_set(hid_instance_global, &hid_event);
 8011d92:	4b08      	ldr	r3, [pc, #32]	@ (8011db4 <USB_Send_HidReport+0x70>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	187a      	adds	r2, r7, r1
 8011d98:	0011      	movs	r1, r2
 8011d9a:	0018      	movs	r0, r3
 8011d9c:	f7fe fc49 	bl	8010632 <_ux_device_class_hid_event_set>
 8011da0:	0003      	movs	r3, r0
 8011da2:	657b      	str	r3, [r7, #84]	@ 0x54

  return status;
 8011da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8011da6:	0018      	movs	r0, r3
 8011da8:	46bd      	mov	sp, r7
 8011daa:	b017      	add	sp, #92	@ 0x5c
 8011dac:	bd90      	pop	{r4, r7, pc}
 8011dae:	46c0      	nop			@ (mov r8, r8)
 8011db0:	200007d0 	.word	0x200007d0
 8011db4:	2000580c 	.word	0x2000580c

08011db8 <USB_Get_HidReport>:

static uint8_t hid_get_report_buff[UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH];

UINT USB_Get_HidReport(uint8_t *report_buffer, ULONG *report_len) {
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]

	ux_utility_memory_copy(report_buffer,hid_get_report_buff,UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
 8011dc2:	4907      	ldr	r1, [pc, #28]	@ (8011de0 <USB_Get_HidReport+0x28>)
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2240      	movs	r2, #64	@ 0x40
 8011dc8:	0018      	movs	r0, r3
 8011dca:	f7fe f861 	bl	800fe90 <_ux_utility_memory_copy>
	*report_len = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2240      	movs	r2, #64	@ 0x40
 8011dd2:	601a      	str	r2, [r3, #0]
	return UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8011dd4:	2340      	movs	r3, #64	@ 0x40
}
 8011dd6:	0018      	movs	r0, r3
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	b002      	add	sp, #8
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	46c0      	nop			@ (mov r8, r8)
 8011de0:	20005810 	.word	0x20005810

08011de4 <USBD_Custom_HID_Activate>:
  *         This function is called when insertion of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Activate(VOID *hid_instance)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_Custom_HID_Activate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device activated.\n");
 8011dec:	4b05      	ldr	r3, [pc, #20]	@ (8011e04 <USBD_Custom_HID_Activate+0x20>)
 8011dee:	0018      	movs	r0, r3
 8011df0:	f001 fd1e 	bl	8013830 <puts>
  hid_instance_global = (UX_SLAVE_CLASS_HID *)hid_instance;
 8011df4:	4b04      	ldr	r3, [pc, #16]	@ (8011e08 <USBD_Custom_HID_Activate+0x24>)
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	601a      	str	r2, [r3, #0]
  /* USER CODE END USBD_Custom_HID_Activate */

  return;
 8011dfa:	46c0      	nop			@ (mov r8, r8)
}
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	b002      	add	sp, #8
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	46c0      	nop			@ (mov r8, r8)
 8011e04:	080159ec 	.word	0x080159ec
 8011e08:	2000580c 	.word	0x2000580c

08011e0c <USBD_Custom_HID_Deactivate>:
  *         This function is called when extraction of a Custom HID device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_Deactivate(VOID *hid_instance)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_Custom_HID_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);
  printf("Custom HID device deactivated.\n");
 8011e14:	4b03      	ldr	r3, [pc, #12]	@ (8011e24 <USBD_Custom_HID_Deactivate+0x18>)
 8011e16:	0018      	movs	r0, r3
 8011e18:	f001 fd0a 	bl	8013830 <puts>
  /* USER CODE END USBD_Custom_HID_Deactivate */

  return;
 8011e1c:	46c0      	nop			@ (mov r8, r8)
}
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	b002      	add	sp, #8
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	08015a0c 	.word	0x08015a0c

08011e28 <USBD_Custom_HID_SetFeature>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_SetFeature(UX_SLAVE_CLASS_HID *hid_instance,
                                UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8011e32:	2300      	movs	r3, #0
 8011e34:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN USBD_Custom_HID_SetFeature */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Set Feature request received.\n");
 8011e36:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <USBD_Custom_HID_SetFeature+0x20>)
 8011e38:	0018      	movs	r0, r3
 8011e3a:	f001 fcf9 	bl	8013830 <puts>
  /* USER CODE END USBD_Custom_HID_SetFeature */

  return status;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
}
 8011e40:	0018      	movs	r0, r3
 8011e42:	46bd      	mov	sp, r7
 8011e44:	b004      	add	sp, #16
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	08015a2c 	.word	0x08015a2c

08011e4c <USBD_Custom_HID_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_Custom_HID_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                               UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8011e56:	2300      	movs	r3, #0
 8011e58:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN USBD_Custom_HID_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  printf("Custom HID Get Report request received.\n");
 8011e5a:	4b04      	ldr	r3, [pc, #16]	@ (8011e6c <USBD_Custom_HID_GetReport+0x20>)
 8011e5c:	0018      	movs	r0, r3
 8011e5e:	f001 fce7 	bl	8013830 <puts>
  /* USER CODE END USBD_Custom_HID_GetReport */

  return status;
 8011e62:	68fb      	ldr	r3, [r7, #12]
}
 8011e64:	0018      	movs	r0, r3
 8011e66:	46bd      	mov	sp, r7
 8011e68:	b004      	add	sp, #16
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	08015a58 	.word	0x08015a58

08011e70 <USBD_Custom_HID_SetReport>:
  *         to the application over Endpoint OUT (Set Report).
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_Custom_HID_SetReport(struct UX_SLAVE_CLASS_HID_STRUCT *hid_instance)
{
 8011e70:	b590      	push	{r4, r7, lr}
 8011e72:	b085      	sub	sp, #20
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_Custom_HID_SetReport */

  UX_DEVICE_CLASS_HID_RECEIVED_EVENT hid_received_event;

  ux_utility_memory_set(&hid_received_event, 0, sizeof(UX_DEVICE_CLASS_HID_RECEIVED_EVENT));
 8011e78:	2408      	movs	r4, #8
 8011e7a:	193b      	adds	r3, r7, r4
 8011e7c:	2208      	movs	r2, #8
 8011e7e:	2100      	movs	r1, #0
 8011e80:	0018      	movs	r0, r3
 8011e82:	f7fe f887 	bl	800ff94 <_ux_utility_memory_set>

  // Fixme: Add flag to check write event?
  if(ux_device_class_hid_receiver_event_get(hid_instance_global, &hid_received_event) == UX_SUCCESS)
 8011e86:	4b0d      	ldr	r3, [pc, #52]	@ (8011ebc <USBD_Custom_HID_SetReport+0x4c>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	193a      	adds	r2, r7, r4
 8011e8c:	0011      	movs	r1, r2
 8011e8e:	0018      	movs	r0, r3
 8011e90:	f7fe fcef 	bl	8010872 <_ux_device_class_hid_receiver_event_get>
 8011e94:	1e03      	subs	r3, r0, #0
 8011e96:	d10c      	bne.n	8011eb2 <USBD_Custom_HID_SetReport+0x42>
  {
	ux_utility_memory_copy(hid_get_report_buff, \
							hid_received_event.ux_device_class_hid_received_event_data, \
 8011e98:	193b      	adds	r3, r7, r4
 8011e9a:	6859      	ldr	r1, [r3, #4]
	ux_utility_memory_copy(hid_get_report_buff, \
 8011e9c:	4b08      	ldr	r3, [pc, #32]	@ (8011ec0 <USBD_Custom_HID_SetReport+0x50>)
 8011e9e:	2240      	movs	r2, #64	@ 0x40
 8011ea0:	0018      	movs	r0, r3
 8011ea2:	f7fd fff5 	bl	800fe90 <_ux_utility_memory_copy>
							UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH);
    /* Free hid received event */
    ux_device_class_hid_receiver_event_free(hid_instance_global);
 8011ea6:	4b05      	ldr	r3, [pc, #20]	@ (8011ebc <USBD_Custom_HID_SetReport+0x4c>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	0018      	movs	r0, r3
 8011eac:	f7fe fcb8 	bl	8010820 <_ux_device_class_hid_receiver_event_free>
  }
  /* USER CODE END USBD_Custom_HID_SetReport */

  return;
 8011eb0:	46c0      	nop			@ (mov r8, r8)
 8011eb2:	46c0      	nop			@ (mov r8, r8)
}
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	b005      	add	sp, #20
 8011eb8:	bd90      	pop	{r4, r7, pc}
 8011eba:	46c0      	nop			@ (mov r8, r8)
 8011ebc:	2000580c 	.word	0x2000580c
 8011ec0:	20005810 	.word	0x20005810

08011ec4 <USBD_Custom_HID_EventMaxNumber>:
  *         This function to set receiver event max number parameter.
  * @param  none
  * @retval receiver event max number
  */
ULONG USBD_Custom_HID_EventMaxNumber(VOID)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
  ULONG max_number = 0U;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxNumber */
  printf("Custom HID Event Max Number requested.\n");
 8011ece:	4b05      	ldr	r3, [pc, #20]	@ (8011ee4 <USBD_Custom_HID_EventMaxNumber+0x20>)
 8011ed0:	0018      	movs	r0, r3
 8011ed2:	f001 fcad 	bl	8013830 <puts>

  max_number = UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8011ed6:	2304      	movs	r3, #4
 8011ed8:	607b      	str	r3, [r7, #4]
  /* USER CODE END USBD_Custom_HID_EventMaxNumber */

  return max_number;
 8011eda:	687b      	ldr	r3, [r7, #4]
}
 8011edc:	0018      	movs	r0, r3
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	b002      	add	sp, #8
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	08015a80 	.word	0x08015a80

08011ee8 <USBD_Custom_HID_EventMaxLength>:
  *         This function to set receiver event max length parameter.
  * @param  none
  * @retval receiver event max length
  */
ULONG USBD_Custom_HID_EventMaxLength(VOID)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
  ULONG max_length = 0U;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN USBD_Custom_HID_EventMaxLength */
  printf("Custom HID Event Max Length requested.\n");
 8011ef2:	4b05      	ldr	r3, [pc, #20]	@ (8011f08 <USBD_Custom_HID_EventMaxLength+0x20>)
 8011ef4:	0018      	movs	r0, r3
 8011ef6:	f001 fc9b 	bl	8013830 <puts>
  //Fixme: Define the maximum length of each event
   max_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8011efa:	2340      	movs	r3, #64	@ 0x40
 8011efc:	607b      	str	r3, [r7, #4]
  /* USER CODE END USBD_Custom_HID_EventMaxLength */

  return max_length;
 8011efe:	687b      	ldr	r3, [r7, #4]
}
 8011f00:	0018      	movs	r0, r3
 8011f02:	46bd      	mov	sp, r7
 8011f04:	b002      	add	sp, #8
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	08015aa8 	.word	0x08015aa8

08011f0c <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	0002      	movs	r2, r0
 8011f14:	6039      	str	r1, [r7, #0]
 8011f16:	1dfb      	adds	r3, r7, #7
 8011f18:	701a      	strb	r2, [r3, #0]
  uint8_t *pFrameWork = NULL;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8011f1e:	1dfb      	adds	r3, r7, #7
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d116      	bne.n	8011f54 <USBD_Get_Device_Framework_Speed+0x48>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8011f26:	4b19      	ldr	r3, [pc, #100]	@ (8011f8c <USBD_Get_Device_Framework_Speed+0x80>)
 8011f28:	6819      	ldr	r1, [r3, #0]
 8011f2a:	1dfb      	adds	r3, r7, #7
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	4a18      	ldr	r2, [pc, #96]	@ (8011f90 <USBD_Get_Device_Framework_Speed+0x84>)
 8011f30:	4818      	ldr	r0, [pc, #96]	@ (8011f94 <USBD_Get_Device_Framework_Speed+0x88>)
 8011f32:	f000 f9ef 	bl	8012314 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8011f36:	4a17      	ldr	r2, [pc, #92]	@ (8011f94 <USBD_Get_Device_Framework_Speed+0x88>)
 8011f38:	2390      	movs	r3, #144	@ 0x90
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	58d2      	ldr	r2, [r2, r3]
 8011f3e:	4915      	ldr	r1, [pc, #84]	@ (8011f94 <USBD_Get_Device_Framework_Speed+0x88>)
 8011f40:	2392      	movs	r3, #146	@ 0x92
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	58cb      	ldr	r3, [r1, r3]
 8011f46:	18d2      	adds	r2, r2, r3
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8011f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8011f8c <USBD_Get_Device_Framework_Speed+0x80>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	e015      	b.n	8011f80 <USBD_Get_Device_Framework_Speed+0x74>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8011f54:	4b10      	ldr	r3, [pc, #64]	@ (8011f98 <USBD_Get_Device_Framework_Speed+0x8c>)
 8011f56:	6819      	ldr	r1, [r3, #0]
 8011f58:	1dfb      	adds	r3, r7, #7
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8011f90 <USBD_Get_Device_Framework_Speed+0x84>)
 8011f5e:	480f      	ldr	r0, [pc, #60]	@ (8011f9c <USBD_Get_Device_Framework_Speed+0x90>)
 8011f60:	f000 f9d8 	bl	8012314 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8011f64:	4a0d      	ldr	r2, [pc, #52]	@ (8011f9c <USBD_Get_Device_Framework_Speed+0x90>)
 8011f66:	2390      	movs	r3, #144	@ 0x90
 8011f68:	005b      	lsls	r3, r3, #1
 8011f6a:	58d2      	ldr	r2, [r2, r3]
 8011f6c:	490b      	ldr	r1, [pc, #44]	@ (8011f9c <USBD_Get_Device_Framework_Speed+0x90>)
 8011f6e:	2392      	movs	r3, #146	@ 0x92
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	58cb      	ldr	r3, [r1, r3]
 8011f74:	18d2      	adds	r2, r2, r3
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8011f7a:	4b07      	ldr	r3, [pc, #28]	@ (8011f98 <USBD_Get_Device_Framework_Speed+0x8c>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 8011f80:	68fb      	ldr	r3, [r7, #12]
}
 8011f82:	0018      	movs	r0, r3
 8011f84:	46bd      	mov	sp, r7
 8011f86:	b004      	add	sp, #16
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	46c0      	nop			@ (mov r8, r8)
 8011f8c:	2000005c 	.word	0x2000005c
 8011f90:	20000050 	.word	0x20000050
 8011f94:	20005850 	.word	0x20005850
 8011f98:	20000060 	.word	0x20000060
 8011f9c:	20005978 	.word	0x20005978

08011fa0 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8011fa0:	b5b0      	push	{r4, r5, r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8011fa8:	250c      	movs	r5, #12
 8011faa:	197b      	adds	r3, r7, r5
 8011fac:	2200      	movs	r2, #0
 8011fae:	801a      	strh	r2, [r3, #0]
  uint8_t count = 0U;
 8011fb0:	240f      	movs	r4, #15
 8011fb2:	193b      	adds	r3, r7, r4
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8011fb8:	193b      	adds	r3, r7, r4
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	193a      	adds	r2, r7, r4
 8011fbe:	1c59      	adds	r1, r3, #1
 8011fc0:	7011      	strb	r1, [r2, #0]
 8011fc2:	001a      	movs	r2, r3
 8011fc4:	4b43      	ldr	r3, [pc, #268]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8011fc6:	2109      	movs	r1, #9
 8011fc8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8011fca:	193b      	adds	r3, r7, r4
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	193a      	adds	r2, r7, r4
 8011fd0:	1c59      	adds	r1, r3, #1
 8011fd2:	7011      	strb	r1, [r2, #0]
 8011fd4:	001a      	movs	r2, r3
 8011fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8011fd8:	2104      	movs	r1, #4
 8011fda:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8011fdc:	193b      	adds	r3, r7, r4
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	193a      	adds	r2, r7, r4
 8011fe2:	1c59      	adds	r1, r3, #1
 8011fe4:	7011      	strb	r1, [r2, #0]
 8011fe6:	001a      	movs	r2, r3
 8011fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8011fea:	2101      	movs	r1, #1
 8011fec:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8011fee:	193b      	adds	r3, r7, r4
 8011ff0:	781a      	ldrb	r2, [r3, #0]
 8011ff2:	4b38      	ldr	r3, [pc, #224]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8011ff4:	18d1      	adds	r1, r2, r3
 8011ff6:	197a      	adds	r2, r7, r5
 8011ff8:	4b37      	ldr	r3, [pc, #220]	@ (80120d8 <USBD_Get_String_Framework+0x138>)
 8011ffa:	0018      	movs	r0, r3
 8011ffc:	f000 f930 	bl	8012260 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8012000:	197b      	adds	r3, r7, r5
 8012002:	881b      	ldrh	r3, [r3, #0]
 8012004:	b2da      	uxtb	r2, r3
 8012006:	193b      	adds	r3, r7, r4
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	18d3      	adds	r3, r2, r3
 801200c:	b2da      	uxtb	r2, r3
 801200e:	193b      	adds	r3, r7, r4
 8012010:	3201      	adds	r2, #1
 8012012:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8012014:	193b      	adds	r3, r7, r4
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	193a      	adds	r2, r7, r4
 801201a:	1c59      	adds	r1, r3, #1
 801201c:	7011      	strb	r1, [r2, #0]
 801201e:	001a      	movs	r2, r3
 8012020:	4b2c      	ldr	r3, [pc, #176]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8012022:	2109      	movs	r1, #9
 8012024:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8012026:	193b      	adds	r3, r7, r4
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	193a      	adds	r2, r7, r4
 801202c:	1c59      	adds	r1, r3, #1
 801202e:	7011      	strb	r1, [r2, #0]
 8012030:	001a      	movs	r2, r3
 8012032:	4b28      	ldr	r3, [pc, #160]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8012034:	2104      	movs	r1, #4
 8012036:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8012038:	193b      	adds	r3, r7, r4
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	193a      	adds	r2, r7, r4
 801203e:	1c59      	adds	r1, r3, #1
 8012040:	7011      	strb	r1, [r2, #0]
 8012042:	001a      	movs	r2, r3
 8012044:	4b23      	ldr	r3, [pc, #140]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8012046:	2102      	movs	r1, #2
 8012048:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 801204a:	193b      	adds	r3, r7, r4
 801204c:	781a      	ldrb	r2, [r3, #0]
 801204e:	4b21      	ldr	r3, [pc, #132]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8012050:	18d1      	adds	r1, r2, r3
 8012052:	197a      	adds	r2, r7, r5
 8012054:	4b21      	ldr	r3, [pc, #132]	@ (80120dc <USBD_Get_String_Framework+0x13c>)
 8012056:	0018      	movs	r0, r3
 8012058:	f000 f902 	bl	8012260 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 801205c:	197b      	adds	r3, r7, r5
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	b2da      	uxtb	r2, r3
 8012062:	193b      	adds	r3, r7, r4
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	18d3      	adds	r3, r2, r3
 8012068:	b2da      	uxtb	r2, r3
 801206a:	193b      	adds	r3, r7, r4
 801206c:	3201      	adds	r2, #1
 801206e:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8012070:	193b      	adds	r3, r7, r4
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	0020      	movs	r0, r4
 8012076:	193a      	adds	r2, r7, r4
 8012078:	1c59      	adds	r1, r3, #1
 801207a:	7011      	strb	r1, [r2, #0]
 801207c:	001a      	movs	r2, r3
 801207e:	4b15      	ldr	r3, [pc, #84]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8012080:	2109      	movs	r1, #9
 8012082:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8012084:	183b      	adds	r3, r7, r0
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	183a      	adds	r2, r7, r0
 801208a:	1c59      	adds	r1, r3, #1
 801208c:	7011      	strb	r1, [r2, #0]
 801208e:	001a      	movs	r2, r3
 8012090:	4b10      	ldr	r3, [pc, #64]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 8012092:	2104      	movs	r1, #4
 8012094:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8012096:	183b      	adds	r3, r7, r0
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	183a      	adds	r2, r7, r0
 801209c:	1c59      	adds	r1, r3, #1
 801209e:	7011      	strb	r1, [r2, #0]
 80120a0:	001a      	movs	r2, r3
 80120a2:	4b0c      	ldr	r3, [pc, #48]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 80120a4:	2103      	movs	r1, #3
 80120a6:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80120a8:	183b      	adds	r3, r7, r0
 80120aa:	781a      	ldrb	r2, [r3, #0]
 80120ac:	4b09      	ldr	r3, [pc, #36]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 80120ae:	18d1      	adds	r1, r2, r3
 80120b0:	197a      	adds	r2, r7, r5
 80120b2:	4b0b      	ldr	r3, [pc, #44]	@ (80120e0 <USBD_Get_String_Framework+0x140>)
 80120b4:	0018      	movs	r0, r3
 80120b6:	f000 f8d3 	bl	8012260 <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 80120ba:	4b06      	ldr	r3, [pc, #24]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
 80120bc:	0018      	movs	r0, r3
 80120be:	f7ee f823 	bl	8000108 <strlen>
 80120c2:	0002      	movs	r2, r0
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 80120c8:	4b02      	ldr	r3, [pc, #8]	@ (80120d4 <USBD_Get_String_Framework+0x134>)
}
 80120ca:	0018      	movs	r0, r3
 80120cc:	46bd      	mov	sp, r7
 80120ce:	b004      	add	sp, #16
 80120d0:	bdb0      	pop	{r4, r5, r7, pc}
 80120d2:	46c0      	nop			@ (mov r8, r8)
 80120d4:	20005c34 	.word	0x20005c34
 80120d8:	08015ad0 	.word	0x08015ad0
 80120dc:	08015ad8 	.word	0x08015ad8
 80120e0:	08015ae4 	.word	0x08015ae4

080120e4 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 80120ec:	200f      	movs	r0, #15
 80120ee:	183b      	adds	r3, r7, r0
 80120f0:	2200      	movs	r2, #0
 80120f2:	701a      	strb	r2, [r3, #0]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80120f4:	183b      	adds	r3, r7, r0
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	183a      	adds	r2, r7, r0
 80120fa:	1c59      	adds	r1, r3, #1
 80120fc:	7011      	strb	r1, [r2, #0]
 80120fe:	001a      	movs	r2, r3
 8012100:	4b0b      	ldr	r3, [pc, #44]	@ (8012130 <USBD_Get_Language_Id_Framework+0x4c>)
 8012102:	2109      	movs	r1, #9
 8012104:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8012106:	183b      	adds	r3, r7, r0
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	183a      	adds	r2, r7, r0
 801210c:	1c59      	adds	r1, r3, #1
 801210e:	7011      	strb	r1, [r2, #0]
 8012110:	001a      	movs	r2, r3
 8012112:	4b07      	ldr	r3, [pc, #28]	@ (8012130 <USBD_Get_Language_Id_Framework+0x4c>)
 8012114:	2104      	movs	r1, #4
 8012116:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8012118:	4b05      	ldr	r3, [pc, #20]	@ (8012130 <USBD_Get_Language_Id_Framework+0x4c>)
 801211a:	0018      	movs	r0, r3
 801211c:	f7ed fff4 	bl	8000108 <strlen>
 8012120:	0002      	movs	r2, r0
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8012126:	4b02      	ldr	r3, [pc, #8]	@ (8012130 <USBD_Get_Language_Id_Framework+0x4c>)
}
 8012128:	0018      	movs	r0, r3
 801212a:	46bd      	mov	sp, r7
 801212c:	b004      	add	sp, #16
 801212e:	bd80      	pop	{r7, pc}
 8012130:	20005d34 	.word	0x20005d34

08012134 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 8012134:	b590      	push	{r4, r7, lr}
 8012136:	b085      	sub	sp, #20
 8012138:	af00      	add	r7, sp, #0
 801213a:	0002      	movs	r2, r0
 801213c:	1dfb      	adds	r3, r7, #7
 801213e:	701a      	strb	r2, [r3, #0]
 8012140:	1dbb      	adds	r3, r7, #6
 8012142:	1c0a      	adds	r2, r1, #0
 8012144:	701a      	strb	r2, [r3, #0]
  uint8_t itf_num = 0U;
 8012146:	230f      	movs	r3, #15
 8012148:	18fb      	adds	r3, r7, r3
 801214a:	2200      	movs	r2, #0
 801214c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0U;
 801214e:	210e      	movs	r1, #14
 8012150:	187b      	adds	r3, r7, r1
 8012152:	2200      	movs	r2, #0
 8012154:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8012156:	187b      	adds	r3, r7, r1
 8012158:	2200      	movs	r2, #0
 801215a:	701a      	strb	r2, [r3, #0]
 801215c:	e02a      	b.n	80121b4 <USBD_Get_Interface_Number+0x80>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801215e:	200e      	movs	r0, #14
 8012160:	183b      	adds	r3, r7, r0
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	4a1a      	ldr	r2, [pc, #104]	@ (80121d0 <USBD_Get_Interface_Number+0x9c>)
 8012166:	215c      	movs	r1, #92	@ 0x5c
 8012168:	434b      	muls	r3, r1
 801216a:	18d3      	adds	r3, r2, r3
 801216c:	330c      	adds	r3, #12
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	1dfa      	adds	r2, r7, #7
 8012172:	7812      	ldrb	r2, [r2, #0]
 8012174:	429a      	cmp	r2, r3
 8012176:	d117      	bne.n	80121a8 <USBD_Get_Interface_Number+0x74>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 8012178:	183b      	adds	r3, r7, r0
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	4a14      	ldr	r2, [pc, #80]	@ (80121d0 <USBD_Get_Interface_Number+0x9c>)
 801217e:	215c      	movs	r1, #92	@ 0x5c
 8012180:	434b      	muls	r3, r1
 8012182:	18d3      	adds	r3, r2, r3
 8012184:	3314      	adds	r3, #20
 8012186:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8012188:	1dba      	adds	r2, r7, #6
 801218a:	7812      	ldrb	r2, [r2, #0]
 801218c:	429a      	cmp	r2, r3
 801218e:	d10b      	bne.n	80121a8 <USBD_Get_Interface_Number+0x74>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 8012190:	183b      	adds	r3, r7, r0
 8012192:	781a      	ldrb	r2, [r3, #0]
 8012194:	230f      	movs	r3, #15
 8012196:	18fb      	adds	r3, r7, r3
 8012198:	490d      	ldr	r1, [pc, #52]	@ (80121d0 <USBD_Get_Interface_Number+0x9c>)
 801219a:	205a      	movs	r0, #90	@ 0x5a
 801219c:	245c      	movs	r4, #92	@ 0x5c
 801219e:	4362      	muls	r2, r4
 80121a0:	188a      	adds	r2, r1, r2
 80121a2:	1812      	adds	r2, r2, r0
 80121a4:	7812      	ldrb	r2, [r2, #0]
 80121a6:	701a      	strb	r2, [r3, #0]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 80121a8:	210e      	movs	r1, #14
 80121aa:	187b      	adds	r3, r7, r1
 80121ac:	781a      	ldrb	r2, [r3, #0]
 80121ae:	187b      	adds	r3, r7, r1
 80121b0:	3201      	adds	r2, #1
 80121b2:	701a      	strb	r2, [r3, #0]
 80121b4:	230e      	movs	r3, #14
 80121b6:	18fb      	adds	r3, r7, r3
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	2b02      	cmp	r3, #2
 80121bc:	d9cf      	bls.n	801215e <USBD_Get_Interface_Number+0x2a>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 80121be:	230f      	movs	r3, #15
 80121c0:	18fb      	adds	r3, r7, r3
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	b29b      	uxth	r3, r3
}
 80121c6:	0018      	movs	r0, r3
 80121c8:	46bd      	mov	sp, r7
 80121ca:	b005      	add	sp, #20
 80121cc:	bd90      	pop	{r4, r7, pc}
 80121ce:	46c0      	nop			@ (mov r8, r8)
 80121d0:	20005850 	.word	0x20005850

080121d4 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	0002      	movs	r2, r0
 80121dc:	1dfb      	adds	r3, r7, #7
 80121de:	701a      	strb	r2, [r3, #0]
 80121e0:	1dbb      	adds	r3, r7, #6
 80121e2:	1c0a      	adds	r2, r1, #0
 80121e4:	701a      	strb	r2, [r3, #0]
  uint8_t cfg_num = 1U;
 80121e6:	210f      	movs	r1, #15
 80121e8:	187b      	adds	r3, r7, r1
 80121ea:	2201      	movs	r2, #1
 80121ec:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 80121ee:	187b      	adds	r3, r7, r1
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	b29b      	uxth	r3, r3
}
 80121f4:	0018      	movs	r0, r3
 80121f6:	46bd      	mov	sp, r7
 80121f8:	b004      	add	sp, #16
 80121fa:	bd80      	pop	{r7, pc}

080121fc <USBD_HID_ReportDesc>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Pointer to HID Report Descriptor buffer
  */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	0002      	movs	r2, r0
 8012204:	1dfb      	adds	r3, r7, #7
 8012206:	701a      	strb	r2, [r3, #0]
  uint8_t *pHidReportDesc = NULL;
 8012208:	2300      	movs	r3, #0
 801220a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN HidReportDesc0 */

  /* USER CODE END HidReportDesc0 */

  switch(hid_type)
 801220c:	1dfb      	adds	r3, r7, #7
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d102      	bne.n	801221a <USBD_HID_ReportDesc+0x1e>
  {
    case INTERFACE_HID_CUSTOM:
      pHidReportDesc = USBD_CustomHID_ReportDesc;
 8012214:	4b04      	ldr	r3, [pc, #16]	@ (8012228 <USBD_HID_ReportDesc+0x2c>)
 8012216:	60fb      	str	r3, [r7, #12]
      break;
 8012218:	e000      	b.n	801221c <USBD_HID_ReportDesc+0x20>
    default:
      break;
 801221a:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN HidReportDesc1 */

  /* USER CODE END HidReportDesc1 */

  return pHidReportDesc;
 801221c:	68fb      	ldr	r3, [r7, #12]
}
 801221e:	0018      	movs	r0, r3
 8012220:	46bd      	mov	sp, r7
 8012222:	b004      	add	sp, #16
 8012224:	bd80      	pop	{r7, pc}
 8012226:	46c0      	nop			@ (mov r8, r8)
 8012228:	20000064 	.word	0x20000064

0801222c <USBD_HID_ReportDesc_length>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Size of HID Report Descriptor buffer
  */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	0002      	movs	r2, r0
 8012234:	1dfb      	adds	r3, r7, #7
 8012236:	701a      	strb	r2, [r3, #0]
  uint16_t ReportDesc_Size = 0;
 8012238:	210e      	movs	r1, #14
 801223a:	187b      	adds	r3, r7, r1
 801223c:	2200      	movs	r2, #0
 801223e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN ReportDesc_Size0 */

  /* USER CODE END ReportDesc_Size0 */

  switch(hid_type)
 8012240:	1dfb      	adds	r3, r7, #7
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d103      	bne.n	8012250 <USBD_HID_ReportDesc_length+0x24>
  {
    case INTERFACE_HID_CUSTOM:
      ReportDesc_Size = sizeof(USBD_CustomHID_ReportDesc);
 8012248:	187b      	adds	r3, r7, r1
 801224a:	2221      	movs	r2, #33	@ 0x21
 801224c:	801a      	strh	r2, [r3, #0]
      break;
 801224e:	e000      	b.n	8012252 <USBD_HID_ReportDesc_length+0x26>
    default:
      break;
 8012250:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN ReportDesc_Size1 */

  /* USER CODE END ReportDesc_Size1 */

  return ReportDesc_Size;
 8012252:	230e      	movs	r3, #14
 8012254:	18fb      	adds	r3, r7, r3
 8012256:	881b      	ldrh	r3, [r3, #0]
}
 8012258:	0018      	movs	r0, r3
 801225a:	46bd      	mov	sp, r7
 801225c:	b004      	add	sp, #16
 801225e:	bd80      	pop	{r7, pc}

08012260 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012260:	b590      	push	{r4, r7, lr}
 8012262:	b087      	sub	sp, #28
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801226c:	2417      	movs	r4, #23
 801226e:	193b      	adds	r3, r7, r4
 8012270:	2200      	movs	r2, #0
 8012272:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d029      	beq.n	80122ce <USBD_Desc_GetString+0x6e>
  {
    return;
  }

  pdesc = desc;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	0018      	movs	r0, r3
 8012282:	f000 f828 	bl	80122d6 <USBD_Desc_GetLen>
 8012286:	0003      	movs	r3, r0
 8012288:	001a      	movs	r2, r3
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 801228e:	193b      	adds	r3, r7, r4
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	193a      	adds	r2, r7, r4
 8012294:	1c59      	adds	r1, r3, #1
 8012296:	7011      	strb	r1, [r2, #0]
 8012298:	001a      	movs	r2, r3
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	189b      	adds	r3, r3, r2
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	7812      	ldrb	r2, [r2, #0]
 80122a2:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 80122a4:	e00e      	b.n	80122c4 <USBD_Desc_GetString+0x64>
  {
    unicode[idx++] = *pdesc;
 80122a6:	2217      	movs	r2, #23
 80122a8:	18bb      	adds	r3, r7, r2
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	18ba      	adds	r2, r7, r2
 80122ae:	1c59      	adds	r1, r3, #1
 80122b0:	7011      	strb	r1, [r2, #0]
 80122b2:	001a      	movs	r2, r3
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	189b      	adds	r3, r3, r2
 80122b8:	693a      	ldr	r2, [r7, #16]
 80122ba:	7812      	ldrb	r2, [r2, #0]
 80122bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	3301      	adds	r3, #1
 80122c2:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1ec      	bne.n	80122a6 <USBD_Desc_GetString+0x46>
 80122cc:	e000      	b.n	80122d0 <USBD_Desc_GetString+0x70>
    return;
 80122ce:	46c0      	nop			@ (mov r8, r8)
  }
}
 80122d0:	46bd      	mov	sp, r7
 80122d2:	b007      	add	sp, #28
 80122d4:	bd90      	pop	{r4, r7, pc}

080122d6 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 80122d6:	b580      	push	{r7, lr}
 80122d8:	b084      	sub	sp, #16
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80122de:	230f      	movs	r3, #15
 80122e0:	18fb      	adds	r3, r7, r3
 80122e2:	2200      	movs	r2, #0
 80122e4:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80122ea:	e008      	b.n	80122fe <USBD_Desc_GetLen+0x28>
  {
    len++;
 80122ec:	210f      	movs	r1, #15
 80122ee:	187b      	adds	r3, r7, r1
 80122f0:	781a      	ldrb	r2, [r3, #0]
 80122f2:	187b      	adds	r3, r7, r1
 80122f4:	3201      	adds	r2, #1
 80122f6:	701a      	strb	r2, [r3, #0]
    pbuff++;
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	3301      	adds	r3, #1
 80122fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d1f2      	bne.n	80122ec <USBD_Desc_GetLen+0x16>
  }

  return len;
 8012306:	230f      	movs	r3, #15
 8012308:	18fb      	adds	r3, r7, r3
 801230a:	781b      	ldrb	r3, [r3, #0]
}
 801230c:	0018      	movs	r0, r3
 801230e:	46bd      	mov	sp, r7
 8012310:	b004      	add	sp, #16
 8012312:	bd80      	pop	{r7, pc}

08012314 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b088      	sub	sp, #32
 8012318:	af02      	add	r7, sp, #8
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
 8012320:	001a      	movs	r2, r3
 8012322:	1cfb      	adds	r3, r7, #3
 8012324:	701a      	strb	r2, [r3, #0]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8012326:	2317      	movs	r3, #23
 8012328:	18fb      	adds	r3, r7, r3
 801232a:	2200      	movs	r2, #0
 801232c:	701a      	strb	r2, [r3, #0]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	2392      	movs	r3, #146	@ 0x92
 8012332:	005b      	lsls	r3, r3, #1
 8012334:	2100      	movs	r1, #0
 8012336:	50d1      	str	r1, [r2, r3]
  pdev->CurrDevDescSz = 0U;
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	2390      	movs	r3, #144	@ 0x90
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	2100      	movs	r1, #0
 8012340:	50d1      	str	r1, [r2, r3]

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8012342:	4b89      	ldr	r3, [pc, #548]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012344:	68ba      	ldr	r2, [r7, #8]
 8012346:	601a      	str	r2, [r3, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8012348:	4b87      	ldr	r3, [pc, #540]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	2212      	movs	r2, #18
 801234e:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8012350:	4b85      	ldr	r3, [pc, #532]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2201      	movs	r2, #1
 8012356:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8012358:	4b83      	ldr	r3, [pc, #524]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	789a      	ldrb	r2, [r3, #2]
 801235e:	2100      	movs	r1, #0
 8012360:	400a      	ands	r2, r1
 8012362:	709a      	strb	r2, [r3, #2]
 8012364:	78da      	ldrb	r2, [r3, #3]
 8012366:	2100      	movs	r1, #0
 8012368:	400a      	ands	r2, r1
 801236a:	1c11      	adds	r1, r2, #0
 801236c:	2202      	movs	r2, #2
 801236e:	430a      	orrs	r2, r1
 8012370:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 8012372:	4b7d      	ldr	r3, [pc, #500]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	2200      	movs	r2, #0
 8012378:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 801237a:	4b7b      	ldr	r3, [pc, #492]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2200      	movs	r2, #0
 8012380:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8012382:	4b79      	ldr	r3, [pc, #484]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2200      	movs	r2, #0
 8012388:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 801238a:	4b77      	ldr	r3, [pc, #476]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2240      	movs	r2, #64	@ 0x40
 8012390:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8012392:	4b75      	ldr	r3, [pc, #468]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	7a1a      	ldrb	r2, [r3, #8]
 8012398:	2100      	movs	r1, #0
 801239a:	400a      	ands	r2, r1
 801239c:	1c11      	adds	r1, r2, #0
 801239e:	227d      	movs	r2, #125	@ 0x7d
 80123a0:	4252      	negs	r2, r2
 80123a2:	430a      	orrs	r2, r1
 80123a4:	721a      	strb	r2, [r3, #8]
 80123a6:	7a5a      	ldrb	r2, [r3, #9]
 80123a8:	2100      	movs	r1, #0
 80123aa:	400a      	ands	r2, r1
 80123ac:	1c11      	adds	r1, r2, #0
 80123ae:	2204      	movs	r2, #4
 80123b0:	430a      	orrs	r2, r1
 80123b2:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 80123b4:	4b6c      	ldr	r3, [pc, #432]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	7a9a      	ldrb	r2, [r3, #10]
 80123ba:	2100      	movs	r1, #0
 80123bc:	400a      	ands	r2, r1
 80123be:	1c11      	adds	r1, r2, #0
 80123c0:	2210      	movs	r2, #16
 80123c2:	430a      	orrs	r2, r1
 80123c4:	729a      	strb	r2, [r3, #10]
 80123c6:	7ada      	ldrb	r2, [r3, #11]
 80123c8:	2100      	movs	r1, #0
 80123ca:	400a      	ands	r2, r1
 80123cc:	1c11      	adds	r1, r2, #0
 80123ce:	2257      	movs	r2, #87	@ 0x57
 80123d0:	430a      	orrs	r2, r1
 80123d2:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 80123d4:	4b64      	ldr	r3, [pc, #400]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	7b1a      	ldrb	r2, [r3, #12]
 80123da:	2100      	movs	r1, #0
 80123dc:	400a      	ands	r2, r1
 80123de:	731a      	strb	r2, [r3, #12]
 80123e0:	7b5a      	ldrb	r2, [r3, #13]
 80123e2:	2100      	movs	r1, #0
 80123e4:	400a      	ands	r2, r1
 80123e6:	1c11      	adds	r1, r2, #0
 80123e8:	2202      	movs	r2, #2
 80123ea:	430a      	orrs	r2, r1
 80123ec:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 80123ee:	4b5e      	ldr	r3, [pc, #376]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	2201      	movs	r2, #1
 80123f4:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 80123f6:	4b5c      	ldr	r3, [pc, #368]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2202      	movs	r2, #2
 80123fc:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 80123fe:	4b5a      	ldr	r3, [pc, #360]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2203      	movs	r2, #3
 8012404:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8012406:	4b58      	ldr	r3, [pc, #352]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2201      	movs	r2, #1
 801240c:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 801240e:	68fa      	ldr	r2, [r7, #12]
 8012410:	2390      	movs	r3, #144	@ 0x90
 8012412:	005b      	lsls	r3, r3, #1
 8012414:	58d3      	ldr	r3, [r2, r3]
 8012416:	3312      	adds	r3, #18
 8012418:	0019      	movs	r1, r3
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	2390      	movs	r3, #144	@ 0x90
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	50d1      	str	r1, [r2, r3]

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8012422:	1cfb      	adds	r3, r7, #3
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	2b01      	cmp	r3, #1
 8012428:	d172      	bne.n	8012510 <USBD_Device_Framework_Builder+0x1fc>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	2390      	movs	r3, #144	@ 0x90
 801242e:	005b      	lsls	r3, r3, #1
 8012430:	58d3      	ldr	r3, [r2, r3]
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	18d2      	adds	r2, r2, r3
 8012436:	4b4d      	ldr	r3, [pc, #308]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 8012438:	601a      	str	r2, [r3, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 801243a:	4b4c      	ldr	r3, [pc, #304]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	220a      	movs	r2, #10
 8012440:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8012442:	4b4a      	ldr	r3, [pc, #296]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2206      	movs	r2, #6
 8012448:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 801244a:	4b48      	ldr	r3, [pc, #288]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	789a      	ldrb	r2, [r3, #2]
 8012450:	2100      	movs	r1, #0
 8012452:	400a      	ands	r2, r1
 8012454:	709a      	strb	r2, [r3, #2]
 8012456:	78da      	ldrb	r2, [r3, #3]
 8012458:	2100      	movs	r1, #0
 801245a:	400a      	ands	r2, r1
 801245c:	1c11      	adds	r1, r2, #0
 801245e:	2202      	movs	r2, #2
 8012460:	430a      	orrs	r2, r1
 8012462:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 8012464:	4b41      	ldr	r3, [pc, #260]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2200      	movs	r2, #0
 801246a:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 801246c:	4b3f      	ldr	r3, [pc, #252]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2200      	movs	r2, #0
 8012472:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 8012474:	4b3d      	ldr	r3, [pc, #244]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2200      	movs	r2, #0
 801247a:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 801247c:	4b3b      	ldr	r3, [pc, #236]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2240      	movs	r2, #64	@ 0x40
 8012482:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8012484:	4b39      	ldr	r3, [pc, #228]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2201      	movs	r2, #1
 801248a:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 801248c:	4b37      	ldr	r3, [pc, #220]	@ (801256c <USBD_Device_Framework_Builder+0x258>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2200      	movs	r2, #0
 8012492:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8012494:	68fa      	ldr	r2, [r7, #12]
 8012496:	2390      	movs	r3, #144	@ 0x90
 8012498:	005b      	lsls	r3, r3, #1
 801249a:	58d3      	ldr	r3, [r2, r3]
 801249c:	330a      	adds	r3, #10
 801249e:	0019      	movs	r1, r3
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	2390      	movs	r3, #144	@ 0x90
 80124a4:	005b      	lsls	r3, r3, #1
 80124a6:	50d1      	str	r1, [r2, r3]
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80124a8:	e032      	b.n	8012510 <USBD_Device_Framework_Builder+0x1fc>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	2b02      	cmp	r3, #2
 80124b0:	d828      	bhi.n	8012504 <USBD_Device_Framework_Builder+0x1f0>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80124b6:	2b02      	cmp	r3, #2
 80124b8:	d824      	bhi.n	8012504 <USBD_Device_Framework_Builder+0x1f0>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 80124ba:	2117      	movs	r1, #23
 80124bc:	187b      	adds	r3, r7, r1
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	687a      	ldr	r2, [r7, #4]
 80124c2:	18d3      	adds	r3, r2, r3
 80124c4:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d01c      	beq.n	8012504 <USBD_Device_Framework_Builder+0x1f0>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 80124ca:	187b      	adds	r3, r7, r1
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	18d3      	adds	r3, r2, r3
      (void)USBD_FrameWork_AddClass(pdev,
 80124d2:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	2390      	movs	r3, #144	@ 0x90
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	58d3      	ldr	r3, [r2, r3]
      (void)USBD_FrameWork_AddClass(pdev,
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	18d3      	adds	r3, r2, r3
 80124e0:	1cfa      	adds	r2, r7, #3
 80124e2:	7812      	ldrb	r2, [r2, #0]
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	0013      	movs	r3, r2
 80124ea:	2200      	movs	r2, #0
 80124ec:	f000 f840 	bl	8012570 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	1c5a      	adds	r2, r3, #1
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	689b      	ldr	r3, [r3, #8]
 80124fe:	1c5a      	adds	r2, r3, #1
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 8012504:	2117      	movs	r1, #23
 8012506:	187b      	adds	r3, r7, r1
 8012508:	781a      	ldrb	r2, [r3, #0]
 801250a:	187b      	adds	r3, r7, r1
 801250c:	3201      	adds	r2, #1
 801250e:	701a      	strb	r2, [r3, #0]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8012510:	2317      	movs	r3, #23
 8012512:	18fb      	adds	r3, r7, r3
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	2b02      	cmp	r3, #2
 8012518:	d9c7      	bls.n	80124aa <USBD_Device_Framework_Builder+0x196>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	2b01      	cmp	r3, #1
 8012520:	d90c      	bls.n	801253c <USBD_Device_Framework_Builder+0x228>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8012522:	4b11      	ldr	r3, [pc, #68]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	22ef      	movs	r2, #239	@ 0xef
 8012528:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 801252a:	4b0f      	ldr	r3, [pc, #60]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2202      	movs	r2, #2
 8012530:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8012532:	4b0d      	ldr	r3, [pc, #52]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2201      	movs	r2, #1
 8012538:	719a      	strb	r2, [r3, #6]
 801253a:	e00f      	b.n	801255c <USBD_Device_Framework_Builder+0x248>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b02      	cmp	r3, #2
 8012542:	d10b      	bne.n	801255c <USBD_Device_Framework_Builder+0x248>
    {
      pDevDesc->bDeviceClass = 0x02;
 8012544:	4b08      	ldr	r3, [pc, #32]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2202      	movs	r2, #2
 801254a:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 801254c:	4b06      	ldr	r3, [pc, #24]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2202      	movs	r2, #2
 8012552:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8012554:	4b04      	ldr	r3, [pc, #16]	@ (8012568 <USBD_Device_Framework_Builder+0x254>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2200      	movs	r2, #0
 801255a:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 801255c:	68bb      	ldr	r3, [r7, #8]
}
 801255e:	0018      	movs	r0, r3
 8012560:	46bd      	mov	sp, r7
 8012562:	b006      	add	sp, #24
 8012564:	bd80      	pop	{r7, pc}
 8012566:	46c0      	nop			@ (mov r8, r8)
 8012568:	20005d38 	.word	0x20005d38
 801256c:	20005d3c 	.word	0x20005d3c

08012570 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8012570:	b590      	push	{r4, r7, lr}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	000c      	movs	r4, r1
 801257a:	0010      	movs	r0, r2
 801257c:	0019      	movs	r1, r3
 801257e:	1cfb      	adds	r3, r7, #3
 8012580:	1c22      	adds	r2, r4, #0
 8012582:	701a      	strb	r2, [r3, #0]
 8012584:	1cbb      	adds	r3, r7, #2
 8012586:	1c02      	adds	r2, r0, #0
 8012588:	701a      	strb	r2, [r3, #0]
 801258a:	1c7b      	adds	r3, r7, #1
 801258c:	1c0a      	adds	r2, r1, #0
 801258e:	701a      	strb	r2, [r3, #0]

  static uint8_t interface_idx = 0U;

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	2b02      	cmp	r3, #2
 8012596:	d850      	bhi.n	801263a <USBD_FrameWork_AddClass+0xca>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	215c      	movs	r1, #92	@ 0x5c
 80125a0:	434b      	muls	r3, r1
 80125a2:	18d3      	adds	r3, r2, r3
 80125a4:	3318      	adds	r3, #24
 80125a6:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d146      	bne.n	801263a <USBD_FrameWork_AddClass+0xca>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6858      	ldr	r0, [r3, #4]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685a      	ldr	r2, [r3, #4]
 80125b4:	6879      	ldr	r1, [r7, #4]
 80125b6:	235c      	movs	r3, #92	@ 0x5c
 80125b8:	4343      	muls	r3, r0
 80125ba:	18cb      	adds	r3, r1, r3
 80125bc:	3310      	adds	r3, #16
 80125be:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	215c      	movs	r1, #92	@ 0x5c
 80125c8:	434b      	muls	r3, r1
 80125ca:	18d3      	adds	r3, r2, r3
 80125cc:	3318      	adds	r3, #24
 80125ce:	2201      	movs	r2, #1
 80125d0:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	215c      	movs	r1, #92	@ 0x5c
 80125da:	434b      	muls	r3, r1
 80125dc:	18d3      	adds	r3, r2, r3
 80125de:	330c      	adds	r3, #12
 80125e0:	1cfa      	adds	r2, r7, #3
 80125e2:	7812      	ldrb	r2, [r2, #0]
 80125e4:	701a      	strb	r2, [r3, #0]

    if (class == CLASS_TYPE_HID)
 80125e6:	1cfb      	adds	r3, r7, #3
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d11a      	bne.n	8012624 <USBD_FrameWork_AddClass+0xb4>
    {
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 80125ee:	4b15      	ldr	r3, [pc, #84]	@ (8012644 <USBD_FrameWork_AddClass+0xd4>)
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	0019      	movs	r1, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	4a13      	ldr	r2, [pc, #76]	@ (8012648 <USBD_FrameWork_AddClass+0xd8>)
 80125fa:	5c50      	ldrb	r0, [r2, r1]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	215c      	movs	r1, #92	@ 0x5c
 8012600:	434b      	muls	r3, r1
 8012602:	18d3      	adds	r3, r2, r3
 8012604:	3314      	adds	r3, #20
 8012606:	1c02      	adds	r2, r0, #0
 8012608:	701a      	strb	r2, [r3, #0]

      interface_idx++;
 801260a:	4b0e      	ldr	r3, [pc, #56]	@ (8012644 <USBD_FrameWork_AddClass+0xd4>)
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	3301      	adds	r3, #1
 8012610:	b2da      	uxtb	r2, r3
 8012612:	4b0c      	ldr	r3, [pc, #48]	@ (8012644 <USBD_FrameWork_AddClass+0xd4>)
 8012614:	701a      	strb	r2, [r3, #0]

      if (interface_idx == sizeof(UserHIDInterface))
 8012616:	4b0b      	ldr	r3, [pc, #44]	@ (8012644 <USBD_FrameWork_AddClass+0xd4>)
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	2b01      	cmp	r3, #1
 801261c:	d102      	bne.n	8012624 <USBD_FrameWork_AddClass+0xb4>
      {
        interface_idx = 0U;
 801261e:	4b09      	ldr	r3, [pc, #36]	@ (8012644 <USBD_FrameWork_AddClass+0xd4>)
 8012620:	2200      	movs	r2, #0
 8012622:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8012624:	69ba      	ldr	r2, [r7, #24]
 8012626:	1c7b      	adds	r3, r7, #1
 8012628:	7819      	ldrb	r1, [r3, #0]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	0018      	movs	r0, r3
 801262e:	f000 f80d 	bl	801264c <USBD_FrameWork_AddToConfDesc>
 8012632:	1e03      	subs	r3, r0, #0
 8012634:	d001      	beq.n	801263a <USBD_FrameWork_AddClass+0xca>
    {
      return UX_ERROR;
 8012636:	23ff      	movs	r3, #255	@ 0xff
 8012638:	e000      	b.n	801263c <USBD_FrameWork_AddClass+0xcc>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 801263a:	2300      	movs	r3, #0
}
 801263c:	0018      	movs	r0, r3
 801263e:	46bd      	mov	sp, r7
 8012640:	b003      	add	sp, #12
 8012642:	bd90      	pop	{r4, r7, pc}
 8012644:	20005d40 	.word	0x20005d40
 8012648:	20005aa0 	.word	0x20005aa0

0801264c <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 801264c:	b5b0      	push	{r4, r5, r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	607a      	str	r2, [r7, #4]
 8012656:	200b      	movs	r0, #11
 8012658:	183b      	adds	r3, r7, r0
 801265a:	1c0a      	adds	r2, r1, #0
 801265c:	701a      	strb	r2, [r3, #0]
  uint8_t interface = 0U;
 801265e:	2317      	movs	r3, #23
 8012660:	18fb      	adds	r3, r7, r3
 8012662:	2200      	movs	r2, #0
 8012664:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	183a      	adds	r2, r7, r0
 801266a:	7812      	ldrb	r2, [r2, #0]
 801266c:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d107      	bne.n	8012686 <USBD_FrameWork_AddToConfDesc+0x3a>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	3325      	adds	r3, #37	@ 0x25
 801267c:	33ff      	adds	r3, #255	@ 0xff
 801267e:	0019      	movs	r1, r3
 8012680:	0010      	movs	r0, r2
 8012682:	f000 f892 	bl	80127aa <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	68fa      	ldr	r2, [r7, #12]
 801268c:	215c      	movs	r1, #92	@ 0x5c
 801268e:	434b      	muls	r3, r1
 8012690:	18d3      	adds	r3, r2, r3
 8012692:	330c      	adds	r3, #12
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d157      	bne.n	801274a <USBD_FrameWork_AddToConfDesc+0xfe>

#if USBD_HID_CLASS_ACTIVATED == 1U

    case CLASS_TYPE_HID:

      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	68fa      	ldr	r2, [r7, #12]
 80126a0:	215c      	movs	r1, #92	@ 0x5c
 80126a2:	434b      	muls	r3, r1
 80126a4:	18d3      	adds	r3, r2, r3
 80126a6:	3314      	adds	r3, #20
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d14b      	bne.n	8012746 <USBD_FrameWork_AddToConfDesc+0xfa>
#if USBD_HID_CUSTOM_ACTIVATED == 1U

        case INTERFACE_HID_CUSTOM:

          /* Find the first available interface slot and Assign number of interfaces */
          interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 80126ae:	2517      	movs	r5, #23
 80126b0:	197c      	adds	r4, r7, r5
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	0018      	movs	r0, r3
 80126b6:	f000 f84e 	bl	8012756 <USBD_FrameWork_FindFreeIFNbr>
 80126ba:	0003      	movs	r3, r0
 80126bc:	7023      	strb	r3, [r4, #0]
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	215c      	movs	r1, #92	@ 0x5c
 80126c6:	434b      	muls	r3, r1
 80126c8:	18d3      	adds	r3, r2, r3
 80126ca:	3320      	adds	r3, #32
 80126cc:	2201      	movs	r2, #1
 80126ce:	601a      	str	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	215a      	movs	r1, #90	@ 0x5a
 80126d8:	205c      	movs	r0, #92	@ 0x5c
 80126da:	4343      	muls	r3, r0
 80126dc:	18d3      	adds	r3, r2, r3
 80126de:	185b      	adds	r3, r3, r1
 80126e0:	197a      	adds	r2, r7, r5
 80126e2:	7812      	ldrb	r2, [r2, #0]
 80126e4:	701a      	strb	r2, [r3, #0]

          /* Assign endpoint numbers */
          pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP_IN, EP_OUT */
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	215c      	movs	r1, #92	@ 0x5c
 80126ee:	434b      	muls	r3, r1
 80126f0:	18d3      	adds	r3, r2, r3
 80126f2:	331c      	adds	r3, #28
 80126f4:	2202      	movs	r2, #2
 80126f6:	601a      	str	r2, [r3, #0]

          /* Check the current speed to assign endpoints */
          if (pdev->Speed == USBD_HIGH_SPEED)
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d10c      	bne.n	801271a <USBD_FrameWork_AddToConfDesc+0xce>
          {
            /* Assign IN Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	2304      	movs	r3, #4
 8012704:	2203      	movs	r2, #3
 8012706:	2181      	movs	r1, #129	@ 0x81
 8012708:	f000 f87e 	bl	8012808 <USBD_FrameWork_AssignEp>
                                    USBD_EP_TYPE_INTR, USBD_HID_CUSTOM_EPIN_HS_MPS);

            /* Assign OUT Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPOUT_ADDR,
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	2304      	movs	r3, #4
 8012710:	2203      	movs	r2, #3
 8012712:	2101      	movs	r1, #1
 8012714:	f000 f878 	bl	8012808 <USBD_FrameWork_AssignEp>
 8012718:	e00b      	b.n	8012732 <USBD_FrameWork_AddToConfDesc+0xe6>
                                    USBD_EP_TYPE_INTR, USBD_HID_CUSTOM_EPOUT_HS_MPS);
          }
          else
          {
            /* Assign IN Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPIN_ADDR,
 801271a:	68f8      	ldr	r0, [r7, #12]
 801271c:	2304      	movs	r3, #4
 801271e:	2203      	movs	r2, #3
 8012720:	2181      	movs	r1, #129	@ 0x81
 8012722:	f000 f871 	bl	8012808 <USBD_FrameWork_AssignEp>
                                    USBD_EP_TYPE_INTR, USBD_HID_CUSTOM_EPIN_FS_MPS);

            /* Assign OUT Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_CUSTOM_EPOUT_ADDR,
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	2304      	movs	r3, #4
 801272a:	2203      	movs	r2, #3
 801272c:	2101      	movs	r1, #1
 801272e:	f000 f86b 	bl	8012808 <USBD_FrameWork_AssignEp>
                                    USBD_EP_TYPE_INTR, USBD_HID_CUSTOM_EPOUT_FS_MPS);
          }

          /* Configure and Append the Descriptor */
          USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8012732:	6879      	ldr	r1, [r7, #4]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	3325      	adds	r3, #37	@ 0x25
 8012738:	33ff      	adds	r3, #255	@ 0xff
 801273a:	001a      	movs	r2, r3
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	0018      	movs	r0, r3
 8012740:	f000 f8dc 	bl	80128fc <USBD_FrameWork_HID_Desc>

          break;
 8012744:	e000      	b.n	8012748 <USBD_FrameWork_AddToConfDesc+0xfc>

#endif /* USBD_HID_CUSTOM_ACTIVATED == 1U */

        default:
          break;
 8012746:	46c0      	nop			@ (mov r8, r8)
      }

      break;
 8012748:	e000      	b.n	801274c <USBD_FrameWork_AddToConfDesc+0x100>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 801274a:	46c0      	nop			@ (mov r8, r8)
  }

  return UX_SUCCESS;
 801274c:	2300      	movs	r3, #0
}
 801274e:	0018      	movs	r0, r3
 8012750:	46bd      	mov	sp, r7
 8012752:	b006      	add	sp, #24
 8012754:	bdb0      	pop	{r4, r5, r7, pc}

08012756 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 8012756:	b580      	push	{r7, lr}
 8012758:	b086      	sub	sp, #24
 801275a:	af00      	add	r7, sp, #0
 801275c:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 801275e:	2300      	movs	r3, #0
 8012760:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8012762:	2300      	movs	r3, #0
 8012764:	613b      	str	r3, [r7, #16]
 8012766:	e015      	b.n	8012794 <USBD_FrameWork_FindFreeIFNbr+0x3e>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8012768:	2300      	movs	r3, #0
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	e005      	b.n	801277a <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	3301      	adds	r3, #1
 8012772:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3301      	adds	r3, #1
 8012778:	60fb      	str	r3, [r7, #12]
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	215c      	movs	r1, #92	@ 0x5c
 8012780:	434b      	muls	r3, r1
 8012782:	18d3      	adds	r3, r2, r3
 8012784:	3320      	adds	r3, #32
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	68fa      	ldr	r2, [r7, #12]
 801278a:	429a      	cmp	r2, r3
 801278c:	d3ef      	bcc.n	801276e <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	3301      	adds	r3, #1
 8012792:	613b      	str	r3, [r7, #16]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	693a      	ldr	r2, [r7, #16]
 801279a:	429a      	cmp	r2, r3
 801279c:	d3e4      	bcc.n	8012768 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	b2db      	uxtb	r3, r3
}
 80127a2:	0018      	movs	r0, r3
 80127a4:	46bd      	mov	sp, r7
 80127a6:	b006      	add	sp, #24
 80127a8:	bd80      	pop	{r7, pc}

080127aa <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b084      	sub	sp, #16
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
 80127b2:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2209      	movs	r2, #9
 80127bc:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2202      	movs	r2, #2
 80127c2:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	789a      	ldrb	r2, [r3, #2]
 80127c8:	2100      	movs	r1, #0
 80127ca:	400a      	ands	r2, r1
 80127cc:	709a      	strb	r2, [r3, #2]
 80127ce:	78da      	ldrb	r2, [r3, #3]
 80127d0:	2100      	movs	r1, #0
 80127d2:	400a      	ands	r2, r1
 80127d4:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2200      	movs	r2, #0
 80127da:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2201      	movs	r2, #1
 80127e0:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2200      	movs	r2, #0
 80127e6:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	22c0      	movs	r2, #192	@ 0xc0
 80127ec:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2219      	movs	r2, #25
 80127f2:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	3309      	adds	r3, #9
 80127fa:	001a      	movs	r2, r3
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	601a      	str	r2, [r3, #0]
}
 8012800:	46c0      	nop			@ (mov r8, r8)
 8012802:	46bd      	mov	sp, r7
 8012804:	b004      	add	sp, #16
 8012806:	bd80      	pop	{r7, pc}

08012808 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8012808:	b590      	push	{r4, r7, lr}
 801280a:	b087      	sub	sp, #28
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	0008      	movs	r0, r1
 8012812:	0011      	movs	r1, r2
 8012814:	607b      	str	r3, [r7, #4]
 8012816:	230b      	movs	r3, #11
 8012818:	18fb      	adds	r3, r7, r3
 801281a:	1c02      	adds	r2, r0, #0
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	230a      	movs	r3, #10
 8012820:	18fb      	adds	r3, r7, r3
 8012822:	1c0a      	adds	r2, r1, #0
 8012824:	701a      	strb	r2, [r3, #0]
  uint32_t idx = 0U;
 8012826:	2300      	movs	r3, #0
 8012828:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801282a:	e002      	b.n	8012832 <USBD_FrameWork_AssignEp+0x2a>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	3301      	adds	r3, #1
 8012830:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	215c      	movs	r1, #92	@ 0x5c
 801283a:	434b      	muls	r3, r1
 801283c:	18d3      	adds	r3, r2, r3
 801283e:	331c      	adds	r3, #28
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	697a      	ldr	r2, [r7, #20]
 8012844:	429a      	cmp	r2, r3
 8012846:	d210      	bcs.n	801286a <USBD_FrameWork_AssignEp+0x62>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	6858      	ldr	r0, [r3, #4]
 801284c:	68f9      	ldr	r1, [r7, #12]
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	2428      	movs	r4, #40	@ 0x28
 8012852:	0013      	movs	r3, r2
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	189b      	adds	r3, r3, r2
 8012858:	005b      	lsls	r3, r3, #1
 801285a:	225c      	movs	r2, #92	@ 0x5c
 801285c:	4342      	muls	r2, r0
 801285e:	189b      	adds	r3, r3, r2
 8012860:	18cb      	adds	r3, r1, r3
 8012862:	191b      	adds	r3, r3, r4
 8012864:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1e0      	bne.n	801282c <USBD_FrameWork_AssignEp+0x24>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	6858      	ldr	r0, [r3, #4]
 801286e:	68f9      	ldr	r1, [r7, #12]
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	2424      	movs	r4, #36	@ 0x24
 8012874:	0013      	movs	r3, r2
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	189b      	adds	r3, r3, r2
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	225c      	movs	r2, #92	@ 0x5c
 801287e:	4342      	muls	r2, r0
 8012880:	189b      	adds	r3, r3, r2
 8012882:	18cb      	adds	r3, r1, r3
 8012884:	191b      	adds	r3, r3, r4
 8012886:	220b      	movs	r2, #11
 8012888:	18ba      	adds	r2, r7, r2
 801288a:	7812      	ldrb	r2, [r2, #0]
 801288c:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6858      	ldr	r0, [r3, #4]
 8012892:	68f9      	ldr	r1, [r7, #12]
 8012894:	697a      	ldr	r2, [r7, #20]
 8012896:	2425      	movs	r4, #37	@ 0x25
 8012898:	0013      	movs	r3, r2
 801289a:	005b      	lsls	r3, r3, #1
 801289c:	189b      	adds	r3, r3, r2
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	225c      	movs	r2, #92	@ 0x5c
 80128a2:	4342      	muls	r2, r0
 80128a4:	189b      	adds	r3, r3, r2
 80128a6:	18cb      	adds	r3, r1, r3
 80128a8:	191b      	adds	r3, r3, r4
 80128aa:	220a      	movs	r2, #10
 80128ac:	18ba      	adds	r2, r7, r2
 80128ae:	7812      	ldrb	r2, [r2, #0]
 80128b0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6858      	ldr	r0, [r3, #4]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	b29c      	uxth	r4, r3
 80128ba:	68f9      	ldr	r1, [r7, #12]
 80128bc:	697a      	ldr	r2, [r7, #20]
 80128be:	0013      	movs	r3, r2
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	189b      	adds	r3, r3, r2
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	225c      	movs	r2, #92	@ 0x5c
 80128c8:	4342      	muls	r2, r0
 80128ca:	189b      	adds	r3, r3, r2
 80128cc:	18cb      	adds	r3, r1, r3
 80128ce:	3326      	adds	r3, #38	@ 0x26
 80128d0:	1c22      	adds	r2, r4, #0
 80128d2:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	6858      	ldr	r0, [r3, #4]
 80128d8:	68f9      	ldr	r1, [r7, #12]
 80128da:	697a      	ldr	r2, [r7, #20]
 80128dc:	2428      	movs	r4, #40	@ 0x28
 80128de:	0013      	movs	r3, r2
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	189b      	adds	r3, r3, r2
 80128e4:	005b      	lsls	r3, r3, #1
 80128e6:	225c      	movs	r2, #92	@ 0x5c
 80128e8:	4342      	muls	r2, r0
 80128ea:	189b      	adds	r3, r3, r2
 80128ec:	18cb      	adds	r3, r1, r3
 80128ee:	191b      	adds	r3, r3, r4
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
}
 80128f4:	46c0      	nop			@ (mov r8, r8)
 80128f6:	46bd      	mov	sp, r7
 80128f8:	b007      	add	sp, #28
 80128fa:	bd90      	pop	{r4, r7, pc}

080128fc <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 80128fc:	b590      	push	{r4, r7, lr}
 80128fe:	b085      	sub	sp, #20
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidDesc;

  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	215c      	movs	r1, #92	@ 0x5c
 8012910:	434b      	muls	r3, r1
 8012912:	18d3      	adds	r3, r2, r3
 8012914:	3314      	adds	r3, #20
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d000      	beq.n	801291e <USBD_FrameWork_HID_Desc+0x22>
 801291c:	e1d2      	b.n	8012cc4 <USBD_FrameWork_HID_Desc+0x3c8>

#if USBD_HID_CUSTOM_ACTIVATED == 1U
    case  INTERFACE_HID_CUSTOM:

      /* Append HID Interface descriptor to Configuration descriptor */
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	18d3      	adds	r3, r2, r3
 8012926:	001a      	movs	r2, r3
 8012928:	4be3      	ldr	r3, [pc, #908]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	4be2      	ldr	r3, [pc, #904]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2209      	movs	r2, #9
 8012932:	701a      	strb	r2, [r3, #0]
 8012934:	4be0      	ldr	r3, [pc, #896]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	2204      	movs	r2, #4
 801293a:	705a      	strb	r2, [r3, #1]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	685a      	ldr	r2, [r3, #4]
 8012940:	4bdd      	ldr	r3, [pc, #884]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	68f9      	ldr	r1, [r7, #12]
 8012946:	205a      	movs	r0, #90	@ 0x5a
 8012948:	245c      	movs	r4, #92	@ 0x5c
 801294a:	4362      	muls	r2, r4
 801294c:	188a      	adds	r2, r1, r2
 801294e:	1812      	adds	r2, r2, r0
 8012950:	7812      	ldrb	r2, [r2, #0]
 8012952:	709a      	strb	r2, [r3, #2]
 8012954:	4bd8      	ldr	r3, [pc, #864]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	2200      	movs	r2, #0
 801295a:	70da      	strb	r2, [r3, #3]
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	68fa      	ldr	r2, [r7, #12]
 8012962:	215c      	movs	r1, #92	@ 0x5c
 8012964:	434b      	muls	r3, r1
 8012966:	18d3      	adds	r3, r2, r3
 8012968:	331c      	adds	r3, #28
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	4bd2      	ldr	r3, [pc, #840]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	b2d2      	uxtb	r2, r2
 8012972:	711a      	strb	r2, [r3, #4]
 8012974:	4bd0      	ldr	r3, [pc, #832]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2203      	movs	r2, #3
 801297a:	715a      	strb	r2, [r3, #5]
 801297c:	4bce      	ldr	r3, [pc, #824]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2200      	movs	r2, #0
 8012982:	719a      	strb	r2, [r3, #6]
 8012984:	4bcc      	ldr	r3, [pc, #816]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2200      	movs	r2, #0
 801298a:	71da      	strb	r2, [r3, #7]
 801298c:	4bca      	ldr	r3, [pc, #808]	@ (8012cb8 <USBD_FrameWork_HID_Desc+0x3bc>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2200      	movs	r2, #0
 8012992:	721a      	strb	r2, [r3, #8]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3309      	adds	r3, #9
 801299a:	001a      	movs	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	601a      	str	r2, [r3, #0]
                              (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                              UX_DEVICE_CLASS_HID_CLASS,
                              0x00U, INTERFACE_HID_CUSTOM, 0U);

      /* Append HID Functional descriptor to Configuration descriptor */
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	18d3      	adds	r3, r2, r3
 80129a8:	001a      	movs	r2, r3
 80129aa:	4bc4      	ldr	r3, [pc, #784]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129ac:	601a      	str	r2, [r3, #0]
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 80129ae:	4bc3      	ldr	r3, [pc, #780]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2209      	movs	r2, #9
 80129b4:	701a      	strb	r2, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 80129b6:	4bc1      	ldr	r3, [pc, #772]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2221      	movs	r2, #33	@ 0x21
 80129bc:	705a      	strb	r2, [r3, #1]
      pHidDesc->bcdHID = 0x0111U;
 80129be:	4bbf      	ldr	r3, [pc, #764]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	789a      	ldrb	r2, [r3, #2]
 80129c4:	2100      	movs	r1, #0
 80129c6:	400a      	ands	r2, r1
 80129c8:	1c11      	adds	r1, r2, #0
 80129ca:	2211      	movs	r2, #17
 80129cc:	430a      	orrs	r2, r1
 80129ce:	709a      	strb	r2, [r3, #2]
 80129d0:	78da      	ldrb	r2, [r3, #3]
 80129d2:	2100      	movs	r1, #0
 80129d4:	400a      	ands	r2, r1
 80129d6:	1c11      	adds	r1, r2, #0
 80129d8:	2201      	movs	r2, #1
 80129da:	430a      	orrs	r2, r1
 80129dc:	70da      	strb	r2, [r3, #3]
      pHidDesc->bCountryCode = 0x00U;
 80129de:	4bb7      	ldr	r3, [pc, #732]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2200      	movs	r2, #0
 80129e4:	711a      	strb	r2, [r3, #4]
      pHidDesc->bNumDescriptors = 0x01U;
 80129e6:	4bb5      	ldr	r3, [pc, #724]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2201      	movs	r2, #1
 80129ec:	715a      	strb	r2, [r3, #5]
      pHidDesc->bHIDDescriptorType = 0x22U;
 80129ee:	4bb3      	ldr	r3, [pc, #716]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2222      	movs	r2, #34	@ 0x22
 80129f4:	719a      	strb	r2, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_CUSTOM);
 80129f6:	4bb1      	ldr	r3, [pc, #708]	@ (8012cbc <USBD_FrameWork_HID_Desc+0x3c0>)
 80129f8:	681c      	ldr	r4, [r3, #0]
 80129fa:	2000      	movs	r0, #0
 80129fc:	f7ff fc16 	bl	801222c <USBD_HID_ReportDesc_length>
 8012a00:	0003      	movs	r3, r0
 8012a02:	001a      	movs	r2, r3
 8012a04:	1de3      	adds	r3, r4, #7
 8012a06:	21ff      	movs	r1, #255	@ 0xff
 8012a08:	4011      	ands	r1, r2
 8012a0a:	000c      	movs	r4, r1
 8012a0c:	7819      	ldrb	r1, [r3, #0]
 8012a0e:	2000      	movs	r0, #0
 8012a10:	4001      	ands	r1, r0
 8012a12:	1c08      	adds	r0, r1, #0
 8012a14:	1c21      	adds	r1, r4, #0
 8012a16:	4301      	orrs	r1, r0
 8012a18:	7019      	strb	r1, [r3, #0]
 8012a1a:	0a12      	lsrs	r2, r2, #8
 8012a1c:	b290      	uxth	r0, r2
 8012a1e:	785a      	ldrb	r2, [r3, #1]
 8012a20:	2100      	movs	r1, #0
 8012a22:	400a      	ands	r2, r1
 8012a24:	1c11      	adds	r1, r2, #0
 8012a26:	1c02      	adds	r2, r0, #0
 8012a28:	430a      	orrs	r2, r1
 8012a2a:	705a      	strb	r2, [r3, #1]
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	3309      	adds	r3, #9
 8012a32:	001a      	movs	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	601a      	str	r2, [r3, #0]

      if (pdev->Speed == USBD_HIGH_SPEED)
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d000      	beq.n	8012a42 <USBD_FrameWork_HID_Desc+0x146>
 8012a40:	e09c      	b.n	8012b7c <USBD_FrameWork_HID_Desc+0x280>
      {
        /* Append Endpoint descriptor to Configuration descriptor */
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	18d3      	adds	r3, r2, r3
 8012a4a:	001a      	movs	r2, r3
 8012a4c:	4b9c      	ldr	r3, [pc, #624]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012a4e:	601a      	str	r2, [r3, #0]
 8012a50:	4b9b      	ldr	r3, [pc, #620]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2207      	movs	r2, #7
 8012a56:	701a      	strb	r2, [r3, #0]
 8012a58:	4b99      	ldr	r3, [pc, #612]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2205      	movs	r2, #5
 8012a5e:	705a      	strb	r2, [r3, #1]
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	685a      	ldr	r2, [r3, #4]
 8012a64:	4b96      	ldr	r3, [pc, #600]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	68f9      	ldr	r1, [r7, #12]
 8012a6a:	2024      	movs	r0, #36	@ 0x24
 8012a6c:	245c      	movs	r4, #92	@ 0x5c
 8012a6e:	4362      	muls	r2, r4
 8012a70:	188a      	adds	r2, r1, r2
 8012a72:	1812      	adds	r2, r2, r0
 8012a74:	7812      	ldrb	r2, [r2, #0]
 8012a76:	709a      	strb	r2, [r3, #2]
 8012a78:	4b91      	ldr	r3, [pc, #580]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	2203      	movs	r2, #3
 8012a7e:	70da      	strb	r2, [r3, #3]
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	685a      	ldr	r2, [r3, #4]
 8012a84:	4b8e      	ldr	r3, [pc, #568]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	68f9      	ldr	r1, [r7, #12]
 8012a8a:	205c      	movs	r0, #92	@ 0x5c
 8012a8c:	4342      	muls	r2, r0
 8012a8e:	188a      	adds	r2, r1, r2
 8012a90:	3226      	adds	r2, #38	@ 0x26
 8012a92:	8812      	ldrh	r2, [r2, #0]
 8012a94:	21ff      	movs	r1, #255	@ 0xff
 8012a96:	4011      	ands	r1, r2
 8012a98:	000c      	movs	r4, r1
 8012a9a:	7919      	ldrb	r1, [r3, #4]
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	4001      	ands	r1, r0
 8012aa0:	1c08      	adds	r0, r1, #0
 8012aa2:	1c21      	adds	r1, r4, #0
 8012aa4:	4301      	orrs	r1, r0
 8012aa6:	7119      	strb	r1, [r3, #4]
 8012aa8:	0a12      	lsrs	r2, r2, #8
 8012aaa:	b290      	uxth	r0, r2
 8012aac:	795a      	ldrb	r2, [r3, #5]
 8012aae:	2100      	movs	r1, #0
 8012ab0:	400a      	ands	r2, r1
 8012ab2:	1c11      	adds	r1, r2, #0
 8012ab4:	1c02      	adds	r2, r0, #0
 8012ab6:	430a      	orrs	r2, r1
 8012ab8:	715a      	strb	r2, [r3, #5]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d104      	bne.n	8012acc <USBD_FrameWork_HID_Desc+0x1d0>
 8012ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	719a      	strb	r2, [r3, #6]
 8012aca:	e003      	b.n	8012ad4 <USBD_FrameWork_HID_Desc+0x1d8>
 8012acc:	4b7c      	ldr	r3, [pc, #496]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	719a      	strb	r2, [r3, #6]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	1dda      	adds	r2, r3, #7
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	601a      	str	r2, [r3, #0]
                                USBD_EP_TYPE_INTR,
                                (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                                USBD_HID_CUSTOM_EPIN_FS_BINTERVAL,
                                USBD_HID_CUSTOM_EPIN_HS_BINTERVAL);

        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	18d3      	adds	r3, r2, r3
 8012ae6:	001a      	movs	r2, r3
 8012ae8:	4b75      	ldr	r3, [pc, #468]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	4b74      	ldr	r3, [pc, #464]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2207      	movs	r2, #7
 8012af2:	701a      	strb	r2, [r3, #0]
 8012af4:	4b72      	ldr	r3, [pc, #456]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2205      	movs	r2, #5
 8012afa:	705a      	strb	r2, [r3, #1]
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	685a      	ldr	r2, [r3, #4]
 8012b00:	4b6f      	ldr	r3, [pc, #444]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68f9      	ldr	r1, [r7, #12]
 8012b06:	202a      	movs	r0, #42	@ 0x2a
 8012b08:	245c      	movs	r4, #92	@ 0x5c
 8012b0a:	4362      	muls	r2, r4
 8012b0c:	188a      	adds	r2, r1, r2
 8012b0e:	1812      	adds	r2, r2, r0
 8012b10:	7812      	ldrb	r2, [r2, #0]
 8012b12:	709a      	strb	r2, [r3, #2]
 8012b14:	4b6a      	ldr	r3, [pc, #424]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2203      	movs	r2, #3
 8012b1a:	70da      	strb	r2, [r3, #3]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	685a      	ldr	r2, [r3, #4]
 8012b20:	4b67      	ldr	r3, [pc, #412]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68f9      	ldr	r1, [r7, #12]
 8012b26:	205c      	movs	r0, #92	@ 0x5c
 8012b28:	4342      	muls	r2, r0
 8012b2a:	188a      	adds	r2, r1, r2
 8012b2c:	322c      	adds	r2, #44	@ 0x2c
 8012b2e:	8812      	ldrh	r2, [r2, #0]
 8012b30:	21ff      	movs	r1, #255	@ 0xff
 8012b32:	4011      	ands	r1, r2
 8012b34:	000c      	movs	r4, r1
 8012b36:	7919      	ldrb	r1, [r3, #4]
 8012b38:	2000      	movs	r0, #0
 8012b3a:	4001      	ands	r1, r0
 8012b3c:	1c08      	adds	r0, r1, #0
 8012b3e:	1c21      	adds	r1, r4, #0
 8012b40:	4301      	orrs	r1, r0
 8012b42:	7119      	strb	r1, [r3, #4]
 8012b44:	0a12      	lsrs	r2, r2, #8
 8012b46:	b290      	uxth	r0, r2
 8012b48:	795a      	ldrb	r2, [r3, #5]
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	400a      	ands	r2, r1
 8012b4e:	1c11      	adds	r1, r2, #0
 8012b50:	1c02      	adds	r2, r0, #0
 8012b52:	430a      	orrs	r2, r1
 8012b54:	715a      	strb	r2, [r3, #5]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d104      	bne.n	8012b68 <USBD_FrameWork_HID_Desc+0x26c>
 8012b5e:	4b58      	ldr	r3, [pc, #352]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2201      	movs	r2, #1
 8012b64:	719a      	strb	r2, [r3, #6]
 8012b66:	e003      	b.n	8012b70 <USBD_FrameWork_HID_Desc+0x274>
 8012b68:	4b55      	ldr	r3, [pc, #340]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	719a      	strb	r2, [r3, #6]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	1dda      	adds	r2, r3, #7
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
                                (uint16_t)pdev->tclasslist[pdev->classId].Eps[1].size,
                                USBD_HID_CUSTOM_EPOUT_HS_BINTERVAL,
                                USBD_HID_CUSTOM_EPOUT_FS_BINTERVAL);
      }

      break;
 8012b7a:	e0a4      	b.n	8012cc6 <USBD_FrameWork_HID_Desc+0x3ca>
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	18d3      	adds	r3, r2, r3
 8012b84:	001a      	movs	r2, r3
 8012b86:	4b4e      	ldr	r3, [pc, #312]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b88:	601a      	str	r2, [r3, #0]
 8012b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2207      	movs	r2, #7
 8012b90:	701a      	strb	r2, [r3, #0]
 8012b92:	4b4b      	ldr	r3, [pc, #300]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2205      	movs	r2, #5
 8012b98:	705a      	strb	r2, [r3, #1]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	685a      	ldr	r2, [r3, #4]
 8012b9e:	4b48      	ldr	r3, [pc, #288]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	68f9      	ldr	r1, [r7, #12]
 8012ba4:	2024      	movs	r0, #36	@ 0x24
 8012ba6:	245c      	movs	r4, #92	@ 0x5c
 8012ba8:	4362      	muls	r2, r4
 8012baa:	188a      	adds	r2, r1, r2
 8012bac:	1812      	adds	r2, r2, r0
 8012bae:	7812      	ldrb	r2, [r2, #0]
 8012bb0:	709a      	strb	r2, [r3, #2]
 8012bb2:	4b43      	ldr	r3, [pc, #268]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2203      	movs	r2, #3
 8012bb8:	70da      	strb	r2, [r3, #3]
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	4b40      	ldr	r3, [pc, #256]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	68f9      	ldr	r1, [r7, #12]
 8012bc4:	205c      	movs	r0, #92	@ 0x5c
 8012bc6:	4342      	muls	r2, r0
 8012bc8:	188a      	adds	r2, r1, r2
 8012bca:	3226      	adds	r2, #38	@ 0x26
 8012bcc:	8812      	ldrh	r2, [r2, #0]
 8012bce:	21ff      	movs	r1, #255	@ 0xff
 8012bd0:	4011      	ands	r1, r2
 8012bd2:	000c      	movs	r4, r1
 8012bd4:	7919      	ldrb	r1, [r3, #4]
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	4001      	ands	r1, r0
 8012bda:	1c08      	adds	r0, r1, #0
 8012bdc:	1c21      	adds	r1, r4, #0
 8012bde:	4301      	orrs	r1, r0
 8012be0:	7119      	strb	r1, [r3, #4]
 8012be2:	0a12      	lsrs	r2, r2, #8
 8012be4:	b290      	uxth	r0, r2
 8012be6:	795a      	ldrb	r2, [r3, #5]
 8012be8:	2100      	movs	r1, #0
 8012bea:	400a      	ands	r2, r1
 8012bec:	1c11      	adds	r1, r2, #0
 8012bee:	1c02      	adds	r2, r0, #0
 8012bf0:	430a      	orrs	r2, r1
 8012bf2:	715a      	strb	r2, [r3, #5]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d104      	bne.n	8012c06 <USBD_FrameWork_HID_Desc+0x30a>
 8012bfc:	4b30      	ldr	r3, [pc, #192]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2201      	movs	r2, #1
 8012c02:	719a      	strb	r2, [r3, #6]
 8012c04:	e003      	b.n	8012c0e <USBD_FrameWork_HID_Desc+0x312>
 8012c06:	4b2e      	ldr	r3, [pc, #184]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	719a      	strb	r2, [r3, #6]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	1dda      	adds	r2, r3, #7
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	601a      	str	r2, [r3, #0]
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add,
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	18d3      	adds	r3, r2, r3
 8012c20:	001a      	movs	r2, r3
 8012c22:	4b27      	ldr	r3, [pc, #156]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	4b26      	ldr	r3, [pc, #152]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2207      	movs	r2, #7
 8012c2c:	701a      	strb	r2, [r3, #0]
 8012c2e:	4b24      	ldr	r3, [pc, #144]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2205      	movs	r2, #5
 8012c34:	705a      	strb	r2, [r3, #1]
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	685a      	ldr	r2, [r3, #4]
 8012c3a:	4b21      	ldr	r3, [pc, #132]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	68f9      	ldr	r1, [r7, #12]
 8012c40:	202a      	movs	r0, #42	@ 0x2a
 8012c42:	245c      	movs	r4, #92	@ 0x5c
 8012c44:	4362      	muls	r2, r4
 8012c46:	188a      	adds	r2, r1, r2
 8012c48:	1812      	adds	r2, r2, r0
 8012c4a:	7812      	ldrb	r2, [r2, #0]
 8012c4c:	709a      	strb	r2, [r3, #2]
 8012c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2203      	movs	r2, #3
 8012c54:	70da      	strb	r2, [r3, #3]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	685a      	ldr	r2, [r3, #4]
 8012c5a:	4b19      	ldr	r3, [pc, #100]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68f9      	ldr	r1, [r7, #12]
 8012c60:	205c      	movs	r0, #92	@ 0x5c
 8012c62:	4342      	muls	r2, r0
 8012c64:	188a      	adds	r2, r1, r2
 8012c66:	322c      	adds	r2, #44	@ 0x2c
 8012c68:	8812      	ldrh	r2, [r2, #0]
 8012c6a:	21ff      	movs	r1, #255	@ 0xff
 8012c6c:	4011      	ands	r1, r2
 8012c6e:	000c      	movs	r4, r1
 8012c70:	7919      	ldrb	r1, [r3, #4]
 8012c72:	2000      	movs	r0, #0
 8012c74:	4001      	ands	r1, r0
 8012c76:	1c08      	adds	r0, r1, #0
 8012c78:	1c21      	adds	r1, r4, #0
 8012c7a:	4301      	orrs	r1, r0
 8012c7c:	7119      	strb	r1, [r3, #4]
 8012c7e:	0a12      	lsrs	r2, r2, #8
 8012c80:	b290      	uxth	r0, r2
 8012c82:	795a      	ldrb	r2, [r3, #5]
 8012c84:	2100      	movs	r1, #0
 8012c86:	400a      	ands	r2, r1
 8012c88:	1c11      	adds	r1, r2, #0
 8012c8a:	1c02      	adds	r2, r0, #0
 8012c8c:	430a      	orrs	r2, r1
 8012c8e:	715a      	strb	r2, [r3, #5]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d104      	bne.n	8012ca2 <USBD_FrameWork_HID_Desc+0x3a6>
 8012c98:	4b09      	ldr	r3, [pc, #36]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	719a      	strb	r2, [r3, #6]
 8012ca0:	e003      	b.n	8012caa <USBD_FrameWork_HID_Desc+0x3ae>
 8012ca2:	4b07      	ldr	r3, [pc, #28]	@ (8012cc0 <USBD_FrameWork_HID_Desc+0x3c4>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	719a      	strb	r2, [r3, #6]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	1dda      	adds	r2, r3, #7
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	601a      	str	r2, [r3, #0]
      break;
 8012cb4:	e007      	b.n	8012cc6 <USBD_FrameWork_HID_Desc+0x3ca>
 8012cb6:	46c0      	nop			@ (mov r8, r8)
 8012cb8:	20005d44 	.word	0x20005d44
 8012cbc:	20005d48 	.word	0x20005d48
 8012cc0:	20005d4c 	.word	0x20005d4c

#endif /* USBD_HID_CUSTOM_ACTIVATED == 1U */

    default:
      break;
 8012cc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	791a      	ldrb	r2, [r3, #4]
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	3201      	adds	r2, #1
 8012cce:	b2d2      	uxtb	r2, r2
 8012cd0:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	b292      	uxth	r2, r2
 8012cda:	21ff      	movs	r1, #255	@ 0xff
 8012cdc:	4011      	ands	r1, r2
 8012cde:	000c      	movs	r4, r1
 8012ce0:	7899      	ldrb	r1, [r3, #2]
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	4001      	ands	r1, r0
 8012ce6:	1c08      	adds	r0, r1, #0
 8012ce8:	1c21      	adds	r1, r4, #0
 8012cea:	4301      	orrs	r1, r0
 8012cec:	7099      	strb	r1, [r3, #2]
 8012cee:	0a12      	lsrs	r2, r2, #8
 8012cf0:	b290      	uxth	r0, r2
 8012cf2:	78da      	ldrb	r2, [r3, #3]
 8012cf4:	2100      	movs	r1, #0
 8012cf6:	400a      	ands	r2, r1
 8012cf8:	1c11      	adds	r1, r2, #0
 8012cfa:	1c02      	adds	r2, r0, #0
 8012cfc:	430a      	orrs	r2, r1
 8012cfe:	70da      	strb	r2, [r3, #3]

}
 8012d00:	46c0      	nop			@ (mov r8, r8)
 8012d02:	46bd      	mov	sp, r7
 8012d04:	b005      	add	sp, #20
 8012d06:	bd90      	pop	{r4, r7, pc}

08012d08 <__cvt>:
 8012d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d0a:	001f      	movs	r7, r3
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	0016      	movs	r6, r2
 8012d10:	b08b      	sub	sp, #44	@ 0x2c
 8012d12:	429f      	cmp	r7, r3
 8012d14:	da04      	bge.n	8012d20 <__cvt+0x18>
 8012d16:	2180      	movs	r1, #128	@ 0x80
 8012d18:	0609      	lsls	r1, r1, #24
 8012d1a:	187b      	adds	r3, r7, r1
 8012d1c:	001f      	movs	r7, r3
 8012d1e:	232d      	movs	r3, #45	@ 0x2d
 8012d20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012d22:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8012d24:	7013      	strb	r3, [r2, #0]
 8012d26:	2320      	movs	r3, #32
 8012d28:	2203      	movs	r2, #3
 8012d2a:	439d      	bics	r5, r3
 8012d2c:	2d46      	cmp	r5, #70	@ 0x46
 8012d2e:	d007      	beq.n	8012d40 <__cvt+0x38>
 8012d30:	002b      	movs	r3, r5
 8012d32:	3b45      	subs	r3, #69	@ 0x45
 8012d34:	4259      	negs	r1, r3
 8012d36:	414b      	adcs	r3, r1
 8012d38:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012d3a:	3a01      	subs	r2, #1
 8012d3c:	18cb      	adds	r3, r1, r3
 8012d3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012d40:	ab09      	add	r3, sp, #36	@ 0x24
 8012d42:	9304      	str	r3, [sp, #16]
 8012d44:	ab08      	add	r3, sp, #32
 8012d46:	9303      	str	r3, [sp, #12]
 8012d48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012d4a:	9200      	str	r2, [sp, #0]
 8012d4c:	9302      	str	r3, [sp, #8]
 8012d4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d50:	0032      	movs	r2, r6
 8012d52:	9301      	str	r3, [sp, #4]
 8012d54:	003b      	movs	r3, r7
 8012d56:	f000 ff81 	bl	8013c5c <_dtoa_r>
 8012d5a:	0004      	movs	r4, r0
 8012d5c:	2d47      	cmp	r5, #71	@ 0x47
 8012d5e:	d11b      	bne.n	8012d98 <__cvt+0x90>
 8012d60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d62:	07db      	lsls	r3, r3, #31
 8012d64:	d511      	bpl.n	8012d8a <__cvt+0x82>
 8012d66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d68:	18c3      	adds	r3, r0, r3
 8012d6a:	9307      	str	r3, [sp, #28]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	2300      	movs	r3, #0
 8012d70:	0030      	movs	r0, r6
 8012d72:	0039      	movs	r1, r7
 8012d74:	f7ed fb6a 	bl	800044c <__aeabi_dcmpeq>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d001      	beq.n	8012d80 <__cvt+0x78>
 8012d7c:	9b07      	ldr	r3, [sp, #28]
 8012d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d80:	2230      	movs	r2, #48	@ 0x30
 8012d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d84:	9907      	ldr	r1, [sp, #28]
 8012d86:	428b      	cmp	r3, r1
 8012d88:	d320      	bcc.n	8012dcc <__cvt+0xc4>
 8012d8a:	0020      	movs	r0, r4
 8012d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012d90:	1b1b      	subs	r3, r3, r4
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	b00b      	add	sp, #44	@ 0x2c
 8012d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d9a:	18c3      	adds	r3, r0, r3
 8012d9c:	9307      	str	r3, [sp, #28]
 8012d9e:	2d46      	cmp	r5, #70	@ 0x46
 8012da0:	d1e4      	bne.n	8012d6c <__cvt+0x64>
 8012da2:	7803      	ldrb	r3, [r0, #0]
 8012da4:	2b30      	cmp	r3, #48	@ 0x30
 8012da6:	d10c      	bne.n	8012dc2 <__cvt+0xba>
 8012da8:	2200      	movs	r2, #0
 8012daa:	2300      	movs	r3, #0
 8012dac:	0030      	movs	r0, r6
 8012dae:	0039      	movs	r1, r7
 8012db0:	f7ed fb4c 	bl	800044c <__aeabi_dcmpeq>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d104      	bne.n	8012dc2 <__cvt+0xba>
 8012db8:	2301      	movs	r3, #1
 8012dba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012dbc:	1a9b      	subs	r3, r3, r2
 8012dbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012dc0:	6013      	str	r3, [r2, #0]
 8012dc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012dc4:	9a07      	ldr	r2, [sp, #28]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	18d3      	adds	r3, r2, r3
 8012dca:	e7ce      	b.n	8012d6a <__cvt+0x62>
 8012dcc:	1c59      	adds	r1, r3, #1
 8012dce:	9109      	str	r1, [sp, #36]	@ 0x24
 8012dd0:	701a      	strb	r2, [r3, #0]
 8012dd2:	e7d6      	b.n	8012d82 <__cvt+0x7a>

08012dd4 <__exponent>:
 8012dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dd6:	232b      	movs	r3, #43	@ 0x2b
 8012dd8:	b085      	sub	sp, #20
 8012dda:	0005      	movs	r5, r0
 8012ddc:	1e0c      	subs	r4, r1, #0
 8012dde:	7002      	strb	r2, [r0, #0]
 8012de0:	da01      	bge.n	8012de6 <__exponent+0x12>
 8012de2:	424c      	negs	r4, r1
 8012de4:	3302      	adds	r3, #2
 8012de6:	706b      	strb	r3, [r5, #1]
 8012de8:	2c09      	cmp	r4, #9
 8012dea:	dd2c      	ble.n	8012e46 <__exponent+0x72>
 8012dec:	ab02      	add	r3, sp, #8
 8012dee:	1dde      	adds	r6, r3, #7
 8012df0:	0020      	movs	r0, r4
 8012df2:	210a      	movs	r1, #10
 8012df4:	f7ed fb14 	bl	8000420 <__aeabi_idivmod>
 8012df8:	0037      	movs	r7, r6
 8012dfa:	3130      	adds	r1, #48	@ 0x30
 8012dfc:	3e01      	subs	r6, #1
 8012dfe:	0020      	movs	r0, r4
 8012e00:	7031      	strb	r1, [r6, #0]
 8012e02:	210a      	movs	r1, #10
 8012e04:	9401      	str	r4, [sp, #4]
 8012e06:	f7ed fa25 	bl	8000254 <__divsi3>
 8012e0a:	9b01      	ldr	r3, [sp, #4]
 8012e0c:	0004      	movs	r4, r0
 8012e0e:	2b63      	cmp	r3, #99	@ 0x63
 8012e10:	dcee      	bgt.n	8012df0 <__exponent+0x1c>
 8012e12:	1eba      	subs	r2, r7, #2
 8012e14:	1ca8      	adds	r0, r5, #2
 8012e16:	0001      	movs	r1, r0
 8012e18:	0013      	movs	r3, r2
 8012e1a:	3430      	adds	r4, #48	@ 0x30
 8012e1c:	7014      	strb	r4, [r2, #0]
 8012e1e:	ac02      	add	r4, sp, #8
 8012e20:	3407      	adds	r4, #7
 8012e22:	429c      	cmp	r4, r3
 8012e24:	d80a      	bhi.n	8012e3c <__exponent+0x68>
 8012e26:	2300      	movs	r3, #0
 8012e28:	4294      	cmp	r4, r2
 8012e2a:	d303      	bcc.n	8012e34 <__exponent+0x60>
 8012e2c:	3309      	adds	r3, #9
 8012e2e:	aa02      	add	r2, sp, #8
 8012e30:	189b      	adds	r3, r3, r2
 8012e32:	1bdb      	subs	r3, r3, r7
 8012e34:	18c0      	adds	r0, r0, r3
 8012e36:	1b40      	subs	r0, r0, r5
 8012e38:	b005      	add	sp, #20
 8012e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e3c:	781c      	ldrb	r4, [r3, #0]
 8012e3e:	3301      	adds	r3, #1
 8012e40:	700c      	strb	r4, [r1, #0]
 8012e42:	3101      	adds	r1, #1
 8012e44:	e7eb      	b.n	8012e1e <__exponent+0x4a>
 8012e46:	2330      	movs	r3, #48	@ 0x30
 8012e48:	18e4      	adds	r4, r4, r3
 8012e4a:	70ab      	strb	r3, [r5, #2]
 8012e4c:	1d28      	adds	r0, r5, #4
 8012e4e:	70ec      	strb	r4, [r5, #3]
 8012e50:	e7f1      	b.n	8012e36 <__exponent+0x62>
	...

08012e54 <_printf_float>:
 8012e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e56:	b097      	sub	sp, #92	@ 0x5c
 8012e58:	000d      	movs	r5, r1
 8012e5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8012e5c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8012e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e60:	9009      	str	r0, [sp, #36]	@ 0x24
 8012e62:	f000 fde3 	bl	8013a2c <_localeconv_r>
 8012e66:	6803      	ldr	r3, [r0, #0]
 8012e68:	0018      	movs	r0, r3
 8012e6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e6c:	f7ed f94c 	bl	8000108 <strlen>
 8012e70:	2300      	movs	r3, #0
 8012e72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012e74:	9314      	str	r3, [sp, #80]	@ 0x50
 8012e76:	7e2b      	ldrb	r3, [r5, #24]
 8012e78:	2207      	movs	r2, #7
 8012e7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8012e7c:	682b      	ldr	r3, [r5, #0]
 8012e7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012e80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	05c9      	lsls	r1, r1, #23
 8012e86:	d545      	bpl.n	8012f14 <_printf_float+0xc0>
 8012e88:	189b      	adds	r3, r3, r2
 8012e8a:	4393      	bics	r3, r2
 8012e8c:	001a      	movs	r2, r3
 8012e8e:	3208      	adds	r2, #8
 8012e90:	6022      	str	r2, [r4, #0]
 8012e92:	2201      	movs	r2, #1
 8012e94:	681e      	ldr	r6, [r3, #0]
 8012e96:	685f      	ldr	r7, [r3, #4]
 8012e98:	007b      	lsls	r3, r7, #1
 8012e9a:	085b      	lsrs	r3, r3, #1
 8012e9c:	9311      	str	r3, [sp, #68]	@ 0x44
 8012e9e:	9610      	str	r6, [sp, #64]	@ 0x40
 8012ea0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8012ea2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8012ea4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012ea6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012ea8:	4ba7      	ldr	r3, [pc, #668]	@ (8013148 <_printf_float+0x2f4>)
 8012eaa:	4252      	negs	r2, r2
 8012eac:	f7ef faf6 	bl	800249c <__aeabi_dcmpun>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	d131      	bne.n	8012f18 <_printf_float+0xc4>
 8012eb4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012eb6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012eb8:	2201      	movs	r2, #1
 8012eba:	4ba3      	ldr	r3, [pc, #652]	@ (8013148 <_printf_float+0x2f4>)
 8012ebc:	4252      	negs	r2, r2
 8012ebe:	f7ed fad5 	bl	800046c <__aeabi_dcmple>
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d128      	bne.n	8012f18 <_printf_float+0xc4>
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	2300      	movs	r3, #0
 8012eca:	0030      	movs	r0, r6
 8012ecc:	0039      	movs	r1, r7
 8012ece:	f7ed fac3 	bl	8000458 <__aeabi_dcmplt>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d003      	beq.n	8012ede <_printf_float+0x8a>
 8012ed6:	002b      	movs	r3, r5
 8012ed8:	222d      	movs	r2, #45	@ 0x2d
 8012eda:	3343      	adds	r3, #67	@ 0x43
 8012edc:	701a      	strb	r2, [r3, #0]
 8012ede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ee0:	4f9a      	ldr	r7, [pc, #616]	@ (801314c <_printf_float+0x2f8>)
 8012ee2:	2b47      	cmp	r3, #71	@ 0x47
 8012ee4:	d800      	bhi.n	8012ee8 <_printf_float+0x94>
 8012ee6:	4f9a      	ldr	r7, [pc, #616]	@ (8013150 <_printf_float+0x2fc>)
 8012ee8:	2303      	movs	r3, #3
 8012eea:	2400      	movs	r4, #0
 8012eec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012eee:	612b      	str	r3, [r5, #16]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	439a      	bics	r2, r3
 8012ef4:	602a      	str	r2, [r5, #0]
 8012ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ef8:	0029      	movs	r1, r5
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f00:	aa15      	add	r2, sp, #84	@ 0x54
 8012f02:	f000 f9e5 	bl	80132d0 <_printf_common>
 8012f06:	3001      	adds	r0, #1
 8012f08:	d000      	beq.n	8012f0c <_printf_float+0xb8>
 8012f0a:	e09e      	b.n	801304a <_printf_float+0x1f6>
 8012f0c:	2001      	movs	r0, #1
 8012f0e:	4240      	negs	r0, r0
 8012f10:	b017      	add	sp, #92	@ 0x5c
 8012f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f14:	3307      	adds	r3, #7
 8012f16:	e7b8      	b.n	8012e8a <_printf_float+0x36>
 8012f18:	0032      	movs	r2, r6
 8012f1a:	003b      	movs	r3, r7
 8012f1c:	0030      	movs	r0, r6
 8012f1e:	0039      	movs	r1, r7
 8012f20:	f7ef fabc 	bl	800249c <__aeabi_dcmpun>
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d00b      	beq.n	8012f40 <_printf_float+0xec>
 8012f28:	2f00      	cmp	r7, #0
 8012f2a:	da03      	bge.n	8012f34 <_printf_float+0xe0>
 8012f2c:	002b      	movs	r3, r5
 8012f2e:	222d      	movs	r2, #45	@ 0x2d
 8012f30:	3343      	adds	r3, #67	@ 0x43
 8012f32:	701a      	strb	r2, [r3, #0]
 8012f34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f36:	4f87      	ldr	r7, [pc, #540]	@ (8013154 <_printf_float+0x300>)
 8012f38:	2b47      	cmp	r3, #71	@ 0x47
 8012f3a:	d8d5      	bhi.n	8012ee8 <_printf_float+0x94>
 8012f3c:	4f86      	ldr	r7, [pc, #536]	@ (8013158 <_printf_float+0x304>)
 8012f3e:	e7d3      	b.n	8012ee8 <_printf_float+0x94>
 8012f40:	2220      	movs	r2, #32
 8012f42:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012f44:	686b      	ldr	r3, [r5, #4]
 8012f46:	4394      	bics	r4, r2
 8012f48:	1c5a      	adds	r2, r3, #1
 8012f4a:	d146      	bne.n	8012fda <_printf_float+0x186>
 8012f4c:	3307      	adds	r3, #7
 8012f4e:	606b      	str	r3, [r5, #4]
 8012f50:	2380      	movs	r3, #128	@ 0x80
 8012f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f54:	00db      	lsls	r3, r3, #3
 8012f56:	4313      	orrs	r3, r2
 8012f58:	2200      	movs	r2, #0
 8012f5a:	602b      	str	r3, [r5, #0]
 8012f5c:	9206      	str	r2, [sp, #24]
 8012f5e:	aa14      	add	r2, sp, #80	@ 0x50
 8012f60:	9205      	str	r2, [sp, #20]
 8012f62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012f64:	a90a      	add	r1, sp, #40	@ 0x28
 8012f66:	9204      	str	r2, [sp, #16]
 8012f68:	aa13      	add	r2, sp, #76	@ 0x4c
 8012f6a:	9203      	str	r2, [sp, #12]
 8012f6c:	2223      	movs	r2, #35	@ 0x23
 8012f6e:	1852      	adds	r2, r2, r1
 8012f70:	9202      	str	r2, [sp, #8]
 8012f72:	9301      	str	r3, [sp, #4]
 8012f74:	686b      	ldr	r3, [r5, #4]
 8012f76:	0032      	movs	r2, r6
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f7c:	003b      	movs	r3, r7
 8012f7e:	f7ff fec3 	bl	8012d08 <__cvt>
 8012f82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012f84:	0007      	movs	r7, r0
 8012f86:	2c47      	cmp	r4, #71	@ 0x47
 8012f88:	d12d      	bne.n	8012fe6 <_printf_float+0x192>
 8012f8a:	1cd3      	adds	r3, r2, #3
 8012f8c:	db02      	blt.n	8012f94 <_printf_float+0x140>
 8012f8e:	686b      	ldr	r3, [r5, #4]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	dd47      	ble.n	8013024 <_printf_float+0x1d0>
 8012f94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f96:	3b02      	subs	r3, #2
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f9c:	0028      	movs	r0, r5
 8012f9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012fa0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012fa2:	3901      	subs	r1, #1
 8012fa4:	3050      	adds	r0, #80	@ 0x50
 8012fa6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012fa8:	f7ff ff14 	bl	8012dd4 <__exponent>
 8012fac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012fae:	0004      	movs	r4, r0
 8012fb0:	1813      	adds	r3, r2, r0
 8012fb2:	612b      	str	r3, [r5, #16]
 8012fb4:	2a01      	cmp	r2, #1
 8012fb6:	dc02      	bgt.n	8012fbe <_printf_float+0x16a>
 8012fb8:	682a      	ldr	r2, [r5, #0]
 8012fba:	07d2      	lsls	r2, r2, #31
 8012fbc:	d501      	bpl.n	8012fc2 <_printf_float+0x16e>
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	612b      	str	r3, [r5, #16]
 8012fc2:	2323      	movs	r3, #35	@ 0x23
 8012fc4:	aa0a      	add	r2, sp, #40	@ 0x28
 8012fc6:	189b      	adds	r3, r3, r2
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d100      	bne.n	8012fd0 <_printf_float+0x17c>
 8012fce:	e792      	b.n	8012ef6 <_printf_float+0xa2>
 8012fd0:	002b      	movs	r3, r5
 8012fd2:	222d      	movs	r2, #45	@ 0x2d
 8012fd4:	3343      	adds	r3, #67	@ 0x43
 8012fd6:	701a      	strb	r2, [r3, #0]
 8012fd8:	e78d      	b.n	8012ef6 <_printf_float+0xa2>
 8012fda:	2c47      	cmp	r4, #71	@ 0x47
 8012fdc:	d1b8      	bne.n	8012f50 <_printf_float+0xfc>
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d1b6      	bne.n	8012f50 <_printf_float+0xfc>
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	e7b3      	b.n	8012f4e <_printf_float+0xfa>
 8012fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fe8:	2b65      	cmp	r3, #101	@ 0x65
 8012fea:	d9d7      	bls.n	8012f9c <_printf_float+0x148>
 8012fec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fee:	2b66      	cmp	r3, #102	@ 0x66
 8012ff0:	d11a      	bne.n	8013028 <_printf_float+0x1d4>
 8012ff2:	686b      	ldr	r3, [r5, #4]
 8012ff4:	2a00      	cmp	r2, #0
 8012ff6:	dd09      	ble.n	801300c <_printf_float+0x1b8>
 8012ff8:	612a      	str	r2, [r5, #16]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d102      	bne.n	8013004 <_printf_float+0x1b0>
 8012ffe:	6829      	ldr	r1, [r5, #0]
 8013000:	07c9      	lsls	r1, r1, #31
 8013002:	d50b      	bpl.n	801301c <_printf_float+0x1c8>
 8013004:	3301      	adds	r3, #1
 8013006:	189b      	adds	r3, r3, r2
 8013008:	612b      	str	r3, [r5, #16]
 801300a:	e007      	b.n	801301c <_printf_float+0x1c8>
 801300c:	2b00      	cmp	r3, #0
 801300e:	d103      	bne.n	8013018 <_printf_float+0x1c4>
 8013010:	2201      	movs	r2, #1
 8013012:	6829      	ldr	r1, [r5, #0]
 8013014:	4211      	tst	r1, r2
 8013016:	d000      	beq.n	801301a <_printf_float+0x1c6>
 8013018:	1c9a      	adds	r2, r3, #2
 801301a:	612a      	str	r2, [r5, #16]
 801301c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801301e:	2400      	movs	r4, #0
 8013020:	65ab      	str	r3, [r5, #88]	@ 0x58
 8013022:	e7ce      	b.n	8012fc2 <_printf_float+0x16e>
 8013024:	2367      	movs	r3, #103	@ 0x67
 8013026:	930c      	str	r3, [sp, #48]	@ 0x30
 8013028:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801302a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801302c:	4299      	cmp	r1, r3
 801302e:	db06      	blt.n	801303e <_printf_float+0x1ea>
 8013030:	682b      	ldr	r3, [r5, #0]
 8013032:	6129      	str	r1, [r5, #16]
 8013034:	07db      	lsls	r3, r3, #31
 8013036:	d5f1      	bpl.n	801301c <_printf_float+0x1c8>
 8013038:	3101      	adds	r1, #1
 801303a:	6129      	str	r1, [r5, #16]
 801303c:	e7ee      	b.n	801301c <_printf_float+0x1c8>
 801303e:	2201      	movs	r2, #1
 8013040:	2900      	cmp	r1, #0
 8013042:	dce0      	bgt.n	8013006 <_printf_float+0x1b2>
 8013044:	1892      	adds	r2, r2, r2
 8013046:	1a52      	subs	r2, r2, r1
 8013048:	e7dd      	b.n	8013006 <_printf_float+0x1b2>
 801304a:	682a      	ldr	r2, [r5, #0]
 801304c:	0553      	lsls	r3, r2, #21
 801304e:	d408      	bmi.n	8013062 <_printf_float+0x20e>
 8013050:	692b      	ldr	r3, [r5, #16]
 8013052:	003a      	movs	r2, r7
 8013054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013058:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801305a:	47a0      	blx	r4
 801305c:	3001      	adds	r0, #1
 801305e:	d129      	bne.n	80130b4 <_printf_float+0x260>
 8013060:	e754      	b.n	8012f0c <_printf_float+0xb8>
 8013062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013064:	2b65      	cmp	r3, #101	@ 0x65
 8013066:	d800      	bhi.n	801306a <_printf_float+0x216>
 8013068:	e0db      	b.n	8013222 <_printf_float+0x3ce>
 801306a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801306c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801306e:	2200      	movs	r2, #0
 8013070:	2300      	movs	r3, #0
 8013072:	f7ed f9eb 	bl	800044c <__aeabi_dcmpeq>
 8013076:	2800      	cmp	r0, #0
 8013078:	d033      	beq.n	80130e2 <_printf_float+0x28e>
 801307a:	2301      	movs	r3, #1
 801307c:	4a37      	ldr	r2, [pc, #220]	@ (801315c <_printf_float+0x308>)
 801307e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013080:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013082:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013084:	47a0      	blx	r4
 8013086:	3001      	adds	r0, #1
 8013088:	d100      	bne.n	801308c <_printf_float+0x238>
 801308a:	e73f      	b.n	8012f0c <_printf_float+0xb8>
 801308c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801308e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013090:	42b3      	cmp	r3, r6
 8013092:	db02      	blt.n	801309a <_printf_float+0x246>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	07db      	lsls	r3, r3, #31
 8013098:	d50c      	bpl.n	80130b4 <_printf_float+0x260>
 801309a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801309c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801309e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80130a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80130a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130a4:	47a0      	blx	r4
 80130a6:	2400      	movs	r4, #0
 80130a8:	3001      	adds	r0, #1
 80130aa:	d100      	bne.n	80130ae <_printf_float+0x25a>
 80130ac:	e72e      	b.n	8012f0c <_printf_float+0xb8>
 80130ae:	1e73      	subs	r3, r6, #1
 80130b0:	42a3      	cmp	r3, r4
 80130b2:	dc0a      	bgt.n	80130ca <_printf_float+0x276>
 80130b4:	682b      	ldr	r3, [r5, #0]
 80130b6:	079b      	lsls	r3, r3, #30
 80130b8:	d500      	bpl.n	80130bc <_printf_float+0x268>
 80130ba:	e106      	b.n	80132ca <_printf_float+0x476>
 80130bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80130be:	68e8      	ldr	r0, [r5, #12]
 80130c0:	4298      	cmp	r0, r3
 80130c2:	db00      	blt.n	80130c6 <_printf_float+0x272>
 80130c4:	e724      	b.n	8012f10 <_printf_float+0xbc>
 80130c6:	0018      	movs	r0, r3
 80130c8:	e722      	b.n	8012f10 <_printf_float+0xbc>
 80130ca:	002a      	movs	r2, r5
 80130cc:	2301      	movs	r3, #1
 80130ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80130d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130d2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80130d4:	321a      	adds	r2, #26
 80130d6:	47b8      	blx	r7
 80130d8:	3001      	adds	r0, #1
 80130da:	d100      	bne.n	80130de <_printf_float+0x28a>
 80130dc:	e716      	b.n	8012f0c <_printf_float+0xb8>
 80130de:	3401      	adds	r4, #1
 80130e0:	e7e5      	b.n	80130ae <_printf_float+0x25a>
 80130e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	dc3b      	bgt.n	8013160 <_printf_float+0x30c>
 80130e8:	2301      	movs	r3, #1
 80130ea:	4a1c      	ldr	r2, [pc, #112]	@ (801315c <_printf_float+0x308>)
 80130ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80130ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80130f2:	47a0      	blx	r4
 80130f4:	3001      	adds	r0, #1
 80130f6:	d100      	bne.n	80130fa <_printf_float+0x2a6>
 80130f8:	e708      	b.n	8012f0c <_printf_float+0xb8>
 80130fa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80130fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80130fe:	4333      	orrs	r3, r6
 8013100:	d102      	bne.n	8013108 <_printf_float+0x2b4>
 8013102:	682b      	ldr	r3, [r5, #0]
 8013104:	07db      	lsls	r3, r3, #31
 8013106:	d5d5      	bpl.n	80130b4 <_printf_float+0x260>
 8013108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801310a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801310c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801310e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013110:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013112:	47a0      	blx	r4
 8013114:	2300      	movs	r3, #0
 8013116:	3001      	adds	r0, #1
 8013118:	d100      	bne.n	801311c <_printf_float+0x2c8>
 801311a:	e6f7      	b.n	8012f0c <_printf_float+0xb8>
 801311c:	930c      	str	r3, [sp, #48]	@ 0x30
 801311e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013120:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013122:	425b      	negs	r3, r3
 8013124:	4293      	cmp	r3, r2
 8013126:	dc01      	bgt.n	801312c <_printf_float+0x2d8>
 8013128:	0033      	movs	r3, r6
 801312a:	e792      	b.n	8013052 <_printf_float+0x1fe>
 801312c:	002a      	movs	r2, r5
 801312e:	2301      	movs	r3, #1
 8013130:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013134:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013136:	321a      	adds	r2, #26
 8013138:	47a0      	blx	r4
 801313a:	3001      	adds	r0, #1
 801313c:	d100      	bne.n	8013140 <_printf_float+0x2ec>
 801313e:	e6e5      	b.n	8012f0c <_printf_float+0xb8>
 8013140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013142:	3301      	adds	r3, #1
 8013144:	e7ea      	b.n	801311c <_printf_float+0x2c8>
 8013146:	46c0      	nop			@ (mov r8, r8)
 8013148:	7fefffff 	.word	0x7fefffff
 801314c:	08015d34 	.word	0x08015d34
 8013150:	08015d30 	.word	0x08015d30
 8013154:	08015d3c 	.word	0x08015d3c
 8013158:	08015d38 	.word	0x08015d38
 801315c:	08015d40 	.word	0x08015d40
 8013160:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013162:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8013164:	930c      	str	r3, [sp, #48]	@ 0x30
 8013166:	429e      	cmp	r6, r3
 8013168:	dd00      	ble.n	801316c <_printf_float+0x318>
 801316a:	001e      	movs	r6, r3
 801316c:	2e00      	cmp	r6, #0
 801316e:	dc31      	bgt.n	80131d4 <_printf_float+0x380>
 8013170:	43f3      	mvns	r3, r6
 8013172:	2400      	movs	r4, #0
 8013174:	17db      	asrs	r3, r3, #31
 8013176:	4033      	ands	r3, r6
 8013178:	930e      	str	r3, [sp, #56]	@ 0x38
 801317a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801317c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801317e:	1af3      	subs	r3, r6, r3
 8013180:	42a3      	cmp	r3, r4
 8013182:	dc30      	bgt.n	80131e6 <_printf_float+0x392>
 8013184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013186:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013188:	429a      	cmp	r2, r3
 801318a:	dc38      	bgt.n	80131fe <_printf_float+0x3aa>
 801318c:	682b      	ldr	r3, [r5, #0]
 801318e:	07db      	lsls	r3, r3, #31
 8013190:	d435      	bmi.n	80131fe <_printf_float+0x3aa>
 8013192:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013196:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013198:	1b9b      	subs	r3, r3, r6
 801319a:	1b14      	subs	r4, r2, r4
 801319c:	429c      	cmp	r4, r3
 801319e:	dd00      	ble.n	80131a2 <_printf_float+0x34e>
 80131a0:	001c      	movs	r4, r3
 80131a2:	2c00      	cmp	r4, #0
 80131a4:	dc34      	bgt.n	8013210 <_printf_float+0x3bc>
 80131a6:	43e3      	mvns	r3, r4
 80131a8:	2600      	movs	r6, #0
 80131aa:	17db      	asrs	r3, r3, #31
 80131ac:	401c      	ands	r4, r3
 80131ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80131b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	1b1b      	subs	r3, r3, r4
 80131b6:	42b3      	cmp	r3, r6
 80131b8:	dc00      	bgt.n	80131bc <_printf_float+0x368>
 80131ba:	e77b      	b.n	80130b4 <_printf_float+0x260>
 80131bc:	002a      	movs	r2, r5
 80131be:	2301      	movs	r3, #1
 80131c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80131c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80131c6:	321a      	adds	r2, #26
 80131c8:	47b8      	blx	r7
 80131ca:	3001      	adds	r0, #1
 80131cc:	d100      	bne.n	80131d0 <_printf_float+0x37c>
 80131ce:	e69d      	b.n	8012f0c <_printf_float+0xb8>
 80131d0:	3601      	adds	r6, #1
 80131d2:	e7ec      	b.n	80131ae <_printf_float+0x35a>
 80131d4:	0033      	movs	r3, r6
 80131d6:	003a      	movs	r2, r7
 80131d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80131da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80131de:	47a0      	blx	r4
 80131e0:	3001      	adds	r0, #1
 80131e2:	d1c5      	bne.n	8013170 <_printf_float+0x31c>
 80131e4:	e692      	b.n	8012f0c <_printf_float+0xb8>
 80131e6:	002a      	movs	r2, r5
 80131e8:	2301      	movs	r3, #1
 80131ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80131ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131ee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80131f0:	321a      	adds	r2, #26
 80131f2:	47b0      	blx	r6
 80131f4:	3001      	adds	r0, #1
 80131f6:	d100      	bne.n	80131fa <_printf_float+0x3a6>
 80131f8:	e688      	b.n	8012f0c <_printf_float+0xb8>
 80131fa:	3401      	adds	r4, #1
 80131fc:	e7bd      	b.n	801317a <_printf_float+0x326>
 80131fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013206:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8013208:	47a0      	blx	r4
 801320a:	3001      	adds	r0, #1
 801320c:	d1c1      	bne.n	8013192 <_printf_float+0x33e>
 801320e:	e67d      	b.n	8012f0c <_printf_float+0xb8>
 8013210:	19ba      	adds	r2, r7, r6
 8013212:	0023      	movs	r3, r4
 8013214:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013218:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801321a:	47b0      	blx	r6
 801321c:	3001      	adds	r0, #1
 801321e:	d1c2      	bne.n	80131a6 <_printf_float+0x352>
 8013220:	e674      	b.n	8012f0c <_printf_float+0xb8>
 8013222:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013224:	930c      	str	r3, [sp, #48]	@ 0x30
 8013226:	2b01      	cmp	r3, #1
 8013228:	dc02      	bgt.n	8013230 <_printf_float+0x3dc>
 801322a:	2301      	movs	r3, #1
 801322c:	421a      	tst	r2, r3
 801322e:	d039      	beq.n	80132a4 <_printf_float+0x450>
 8013230:	2301      	movs	r3, #1
 8013232:	003a      	movs	r2, r7
 8013234:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013238:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801323a:	47b0      	blx	r6
 801323c:	3001      	adds	r0, #1
 801323e:	d100      	bne.n	8013242 <_printf_float+0x3ee>
 8013240:	e664      	b.n	8012f0c <_printf_float+0xb8>
 8013242:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013244:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013246:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013248:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801324a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801324c:	47b0      	blx	r6
 801324e:	3001      	adds	r0, #1
 8013250:	d100      	bne.n	8013254 <_printf_float+0x400>
 8013252:	e65b      	b.n	8012f0c <_printf_float+0xb8>
 8013254:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8013256:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801325a:	2200      	movs	r2, #0
 801325c:	3b01      	subs	r3, #1
 801325e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013260:	2300      	movs	r3, #0
 8013262:	f7ed f8f3 	bl	800044c <__aeabi_dcmpeq>
 8013266:	2800      	cmp	r0, #0
 8013268:	d11a      	bne.n	80132a0 <_printf_float+0x44c>
 801326a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801326c:	1c7a      	adds	r2, r7, #1
 801326e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013270:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013272:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013274:	47b0      	blx	r6
 8013276:	3001      	adds	r0, #1
 8013278:	d10e      	bne.n	8013298 <_printf_float+0x444>
 801327a:	e647      	b.n	8012f0c <_printf_float+0xb8>
 801327c:	002a      	movs	r2, r5
 801327e:	2301      	movs	r3, #1
 8013280:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013284:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013286:	321a      	adds	r2, #26
 8013288:	47b8      	blx	r7
 801328a:	3001      	adds	r0, #1
 801328c:	d100      	bne.n	8013290 <_printf_float+0x43c>
 801328e:	e63d      	b.n	8012f0c <_printf_float+0xb8>
 8013290:	3601      	adds	r6, #1
 8013292:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013294:	429e      	cmp	r6, r3
 8013296:	dbf1      	blt.n	801327c <_printf_float+0x428>
 8013298:	002a      	movs	r2, r5
 801329a:	0023      	movs	r3, r4
 801329c:	3250      	adds	r2, #80	@ 0x50
 801329e:	e6d9      	b.n	8013054 <_printf_float+0x200>
 80132a0:	2600      	movs	r6, #0
 80132a2:	e7f6      	b.n	8013292 <_printf_float+0x43e>
 80132a4:	003a      	movs	r2, r7
 80132a6:	e7e2      	b.n	801326e <_printf_float+0x41a>
 80132a8:	002a      	movs	r2, r5
 80132aa:	2301      	movs	r3, #1
 80132ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80132ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80132b2:	3219      	adds	r2, #25
 80132b4:	47b0      	blx	r6
 80132b6:	3001      	adds	r0, #1
 80132b8:	d100      	bne.n	80132bc <_printf_float+0x468>
 80132ba:	e627      	b.n	8012f0c <_printf_float+0xb8>
 80132bc:	3401      	adds	r4, #1
 80132be:	68eb      	ldr	r3, [r5, #12]
 80132c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80132c2:	1a9b      	subs	r3, r3, r2
 80132c4:	42a3      	cmp	r3, r4
 80132c6:	dcef      	bgt.n	80132a8 <_printf_float+0x454>
 80132c8:	e6f8      	b.n	80130bc <_printf_float+0x268>
 80132ca:	2400      	movs	r4, #0
 80132cc:	e7f7      	b.n	80132be <_printf_float+0x46a>
 80132ce:	46c0      	nop			@ (mov r8, r8)

080132d0 <_printf_common>:
 80132d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132d2:	0016      	movs	r6, r2
 80132d4:	9301      	str	r3, [sp, #4]
 80132d6:	688a      	ldr	r2, [r1, #8]
 80132d8:	690b      	ldr	r3, [r1, #16]
 80132da:	000c      	movs	r4, r1
 80132dc:	9000      	str	r0, [sp, #0]
 80132de:	4293      	cmp	r3, r2
 80132e0:	da00      	bge.n	80132e4 <_printf_common+0x14>
 80132e2:	0013      	movs	r3, r2
 80132e4:	0022      	movs	r2, r4
 80132e6:	6033      	str	r3, [r6, #0]
 80132e8:	3243      	adds	r2, #67	@ 0x43
 80132ea:	7812      	ldrb	r2, [r2, #0]
 80132ec:	2a00      	cmp	r2, #0
 80132ee:	d001      	beq.n	80132f4 <_printf_common+0x24>
 80132f0:	3301      	adds	r3, #1
 80132f2:	6033      	str	r3, [r6, #0]
 80132f4:	6823      	ldr	r3, [r4, #0]
 80132f6:	069b      	lsls	r3, r3, #26
 80132f8:	d502      	bpl.n	8013300 <_printf_common+0x30>
 80132fa:	6833      	ldr	r3, [r6, #0]
 80132fc:	3302      	adds	r3, #2
 80132fe:	6033      	str	r3, [r6, #0]
 8013300:	6822      	ldr	r2, [r4, #0]
 8013302:	2306      	movs	r3, #6
 8013304:	0015      	movs	r5, r2
 8013306:	401d      	ands	r5, r3
 8013308:	421a      	tst	r2, r3
 801330a:	d027      	beq.n	801335c <_printf_common+0x8c>
 801330c:	0023      	movs	r3, r4
 801330e:	3343      	adds	r3, #67	@ 0x43
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	1e5a      	subs	r2, r3, #1
 8013314:	4193      	sbcs	r3, r2
 8013316:	6822      	ldr	r2, [r4, #0]
 8013318:	0692      	lsls	r2, r2, #26
 801331a:	d430      	bmi.n	801337e <_printf_common+0xae>
 801331c:	0022      	movs	r2, r4
 801331e:	9901      	ldr	r1, [sp, #4]
 8013320:	9800      	ldr	r0, [sp, #0]
 8013322:	9d08      	ldr	r5, [sp, #32]
 8013324:	3243      	adds	r2, #67	@ 0x43
 8013326:	47a8      	blx	r5
 8013328:	3001      	adds	r0, #1
 801332a:	d025      	beq.n	8013378 <_printf_common+0xa8>
 801332c:	2206      	movs	r2, #6
 801332e:	6823      	ldr	r3, [r4, #0]
 8013330:	2500      	movs	r5, #0
 8013332:	4013      	ands	r3, r2
 8013334:	2b04      	cmp	r3, #4
 8013336:	d105      	bne.n	8013344 <_printf_common+0x74>
 8013338:	6833      	ldr	r3, [r6, #0]
 801333a:	68e5      	ldr	r5, [r4, #12]
 801333c:	1aed      	subs	r5, r5, r3
 801333e:	43eb      	mvns	r3, r5
 8013340:	17db      	asrs	r3, r3, #31
 8013342:	401d      	ands	r5, r3
 8013344:	68a3      	ldr	r3, [r4, #8]
 8013346:	6922      	ldr	r2, [r4, #16]
 8013348:	4293      	cmp	r3, r2
 801334a:	dd01      	ble.n	8013350 <_printf_common+0x80>
 801334c:	1a9b      	subs	r3, r3, r2
 801334e:	18ed      	adds	r5, r5, r3
 8013350:	2600      	movs	r6, #0
 8013352:	42b5      	cmp	r5, r6
 8013354:	d120      	bne.n	8013398 <_printf_common+0xc8>
 8013356:	2000      	movs	r0, #0
 8013358:	e010      	b.n	801337c <_printf_common+0xac>
 801335a:	3501      	adds	r5, #1
 801335c:	68e3      	ldr	r3, [r4, #12]
 801335e:	6832      	ldr	r2, [r6, #0]
 8013360:	1a9b      	subs	r3, r3, r2
 8013362:	42ab      	cmp	r3, r5
 8013364:	ddd2      	ble.n	801330c <_printf_common+0x3c>
 8013366:	0022      	movs	r2, r4
 8013368:	2301      	movs	r3, #1
 801336a:	9901      	ldr	r1, [sp, #4]
 801336c:	9800      	ldr	r0, [sp, #0]
 801336e:	9f08      	ldr	r7, [sp, #32]
 8013370:	3219      	adds	r2, #25
 8013372:	47b8      	blx	r7
 8013374:	3001      	adds	r0, #1
 8013376:	d1f0      	bne.n	801335a <_printf_common+0x8a>
 8013378:	2001      	movs	r0, #1
 801337a:	4240      	negs	r0, r0
 801337c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801337e:	2030      	movs	r0, #48	@ 0x30
 8013380:	18e1      	adds	r1, r4, r3
 8013382:	3143      	adds	r1, #67	@ 0x43
 8013384:	7008      	strb	r0, [r1, #0]
 8013386:	0021      	movs	r1, r4
 8013388:	1c5a      	adds	r2, r3, #1
 801338a:	3145      	adds	r1, #69	@ 0x45
 801338c:	7809      	ldrb	r1, [r1, #0]
 801338e:	18a2      	adds	r2, r4, r2
 8013390:	3243      	adds	r2, #67	@ 0x43
 8013392:	3302      	adds	r3, #2
 8013394:	7011      	strb	r1, [r2, #0]
 8013396:	e7c1      	b.n	801331c <_printf_common+0x4c>
 8013398:	0022      	movs	r2, r4
 801339a:	2301      	movs	r3, #1
 801339c:	9901      	ldr	r1, [sp, #4]
 801339e:	9800      	ldr	r0, [sp, #0]
 80133a0:	9f08      	ldr	r7, [sp, #32]
 80133a2:	321a      	adds	r2, #26
 80133a4:	47b8      	blx	r7
 80133a6:	3001      	adds	r0, #1
 80133a8:	d0e6      	beq.n	8013378 <_printf_common+0xa8>
 80133aa:	3601      	adds	r6, #1
 80133ac:	e7d1      	b.n	8013352 <_printf_common+0x82>
	...

080133b0 <_printf_i>:
 80133b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133b2:	b08b      	sub	sp, #44	@ 0x2c
 80133b4:	9206      	str	r2, [sp, #24]
 80133b6:	000a      	movs	r2, r1
 80133b8:	3243      	adds	r2, #67	@ 0x43
 80133ba:	9307      	str	r3, [sp, #28]
 80133bc:	9005      	str	r0, [sp, #20]
 80133be:	9203      	str	r2, [sp, #12]
 80133c0:	7e0a      	ldrb	r2, [r1, #24]
 80133c2:	000c      	movs	r4, r1
 80133c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80133c6:	2a78      	cmp	r2, #120	@ 0x78
 80133c8:	d809      	bhi.n	80133de <_printf_i+0x2e>
 80133ca:	2a62      	cmp	r2, #98	@ 0x62
 80133cc:	d80b      	bhi.n	80133e6 <_printf_i+0x36>
 80133ce:	2a00      	cmp	r2, #0
 80133d0:	d100      	bne.n	80133d4 <_printf_i+0x24>
 80133d2:	e0ba      	b.n	801354a <_printf_i+0x19a>
 80133d4:	497a      	ldr	r1, [pc, #488]	@ (80135c0 <_printf_i+0x210>)
 80133d6:	9104      	str	r1, [sp, #16]
 80133d8:	2a58      	cmp	r2, #88	@ 0x58
 80133da:	d100      	bne.n	80133de <_printf_i+0x2e>
 80133dc:	e08e      	b.n	80134fc <_printf_i+0x14c>
 80133de:	0025      	movs	r5, r4
 80133e0:	3542      	adds	r5, #66	@ 0x42
 80133e2:	702a      	strb	r2, [r5, #0]
 80133e4:	e022      	b.n	801342c <_printf_i+0x7c>
 80133e6:	0010      	movs	r0, r2
 80133e8:	3863      	subs	r0, #99	@ 0x63
 80133ea:	2815      	cmp	r0, #21
 80133ec:	d8f7      	bhi.n	80133de <_printf_i+0x2e>
 80133ee:	f7ec fe9d 	bl	800012c <__gnu_thumb1_case_shi>
 80133f2:	0016      	.short	0x0016
 80133f4:	fff6001f 	.word	0xfff6001f
 80133f8:	fff6fff6 	.word	0xfff6fff6
 80133fc:	001ffff6 	.word	0x001ffff6
 8013400:	fff6fff6 	.word	0xfff6fff6
 8013404:	fff6fff6 	.word	0xfff6fff6
 8013408:	0036009f 	.word	0x0036009f
 801340c:	fff6007e 	.word	0xfff6007e
 8013410:	00b0fff6 	.word	0x00b0fff6
 8013414:	0036fff6 	.word	0x0036fff6
 8013418:	fff6fff6 	.word	0xfff6fff6
 801341c:	0082      	.short	0x0082
 801341e:	0025      	movs	r5, r4
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	3542      	adds	r5, #66	@ 0x42
 8013424:	1d11      	adds	r1, r2, #4
 8013426:	6019      	str	r1, [r3, #0]
 8013428:	6813      	ldr	r3, [r2, #0]
 801342a:	702b      	strb	r3, [r5, #0]
 801342c:	2301      	movs	r3, #1
 801342e:	e09e      	b.n	801356e <_printf_i+0x1be>
 8013430:	6818      	ldr	r0, [r3, #0]
 8013432:	6809      	ldr	r1, [r1, #0]
 8013434:	1d02      	adds	r2, r0, #4
 8013436:	060d      	lsls	r5, r1, #24
 8013438:	d50b      	bpl.n	8013452 <_printf_i+0xa2>
 801343a:	6806      	ldr	r6, [r0, #0]
 801343c:	601a      	str	r2, [r3, #0]
 801343e:	2e00      	cmp	r6, #0
 8013440:	da03      	bge.n	801344a <_printf_i+0x9a>
 8013442:	232d      	movs	r3, #45	@ 0x2d
 8013444:	9a03      	ldr	r2, [sp, #12]
 8013446:	4276      	negs	r6, r6
 8013448:	7013      	strb	r3, [r2, #0]
 801344a:	4b5d      	ldr	r3, [pc, #372]	@ (80135c0 <_printf_i+0x210>)
 801344c:	270a      	movs	r7, #10
 801344e:	9304      	str	r3, [sp, #16]
 8013450:	e018      	b.n	8013484 <_printf_i+0xd4>
 8013452:	6806      	ldr	r6, [r0, #0]
 8013454:	601a      	str	r2, [r3, #0]
 8013456:	0649      	lsls	r1, r1, #25
 8013458:	d5f1      	bpl.n	801343e <_printf_i+0x8e>
 801345a:	b236      	sxth	r6, r6
 801345c:	e7ef      	b.n	801343e <_printf_i+0x8e>
 801345e:	6808      	ldr	r0, [r1, #0]
 8013460:	6819      	ldr	r1, [r3, #0]
 8013462:	c940      	ldmia	r1!, {r6}
 8013464:	0605      	lsls	r5, r0, #24
 8013466:	d402      	bmi.n	801346e <_printf_i+0xbe>
 8013468:	0640      	lsls	r0, r0, #25
 801346a:	d500      	bpl.n	801346e <_printf_i+0xbe>
 801346c:	b2b6      	uxth	r6, r6
 801346e:	6019      	str	r1, [r3, #0]
 8013470:	4b53      	ldr	r3, [pc, #332]	@ (80135c0 <_printf_i+0x210>)
 8013472:	270a      	movs	r7, #10
 8013474:	9304      	str	r3, [sp, #16]
 8013476:	2a6f      	cmp	r2, #111	@ 0x6f
 8013478:	d100      	bne.n	801347c <_printf_i+0xcc>
 801347a:	3f02      	subs	r7, #2
 801347c:	0023      	movs	r3, r4
 801347e:	2200      	movs	r2, #0
 8013480:	3343      	adds	r3, #67	@ 0x43
 8013482:	701a      	strb	r2, [r3, #0]
 8013484:	6863      	ldr	r3, [r4, #4]
 8013486:	60a3      	str	r3, [r4, #8]
 8013488:	2b00      	cmp	r3, #0
 801348a:	db06      	blt.n	801349a <_printf_i+0xea>
 801348c:	2104      	movs	r1, #4
 801348e:	6822      	ldr	r2, [r4, #0]
 8013490:	9d03      	ldr	r5, [sp, #12]
 8013492:	438a      	bics	r2, r1
 8013494:	6022      	str	r2, [r4, #0]
 8013496:	4333      	orrs	r3, r6
 8013498:	d00c      	beq.n	80134b4 <_printf_i+0x104>
 801349a:	9d03      	ldr	r5, [sp, #12]
 801349c:	0030      	movs	r0, r6
 801349e:	0039      	movs	r1, r7
 80134a0:	f7ec fed4 	bl	800024c <__aeabi_uidivmod>
 80134a4:	9b04      	ldr	r3, [sp, #16]
 80134a6:	3d01      	subs	r5, #1
 80134a8:	5c5b      	ldrb	r3, [r3, r1]
 80134aa:	702b      	strb	r3, [r5, #0]
 80134ac:	0033      	movs	r3, r6
 80134ae:	0006      	movs	r6, r0
 80134b0:	429f      	cmp	r7, r3
 80134b2:	d9f3      	bls.n	801349c <_printf_i+0xec>
 80134b4:	2f08      	cmp	r7, #8
 80134b6:	d109      	bne.n	80134cc <_printf_i+0x11c>
 80134b8:	6823      	ldr	r3, [r4, #0]
 80134ba:	07db      	lsls	r3, r3, #31
 80134bc:	d506      	bpl.n	80134cc <_printf_i+0x11c>
 80134be:	6862      	ldr	r2, [r4, #4]
 80134c0:	6923      	ldr	r3, [r4, #16]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	dc02      	bgt.n	80134cc <_printf_i+0x11c>
 80134c6:	2330      	movs	r3, #48	@ 0x30
 80134c8:	3d01      	subs	r5, #1
 80134ca:	702b      	strb	r3, [r5, #0]
 80134cc:	9b03      	ldr	r3, [sp, #12]
 80134ce:	1b5b      	subs	r3, r3, r5
 80134d0:	6123      	str	r3, [r4, #16]
 80134d2:	9b07      	ldr	r3, [sp, #28]
 80134d4:	0021      	movs	r1, r4
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	9805      	ldr	r0, [sp, #20]
 80134da:	9b06      	ldr	r3, [sp, #24]
 80134dc:	aa09      	add	r2, sp, #36	@ 0x24
 80134de:	f7ff fef7 	bl	80132d0 <_printf_common>
 80134e2:	3001      	adds	r0, #1
 80134e4:	d148      	bne.n	8013578 <_printf_i+0x1c8>
 80134e6:	2001      	movs	r0, #1
 80134e8:	4240      	negs	r0, r0
 80134ea:	b00b      	add	sp, #44	@ 0x2c
 80134ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ee:	2220      	movs	r2, #32
 80134f0:	6809      	ldr	r1, [r1, #0]
 80134f2:	430a      	orrs	r2, r1
 80134f4:	6022      	str	r2, [r4, #0]
 80134f6:	2278      	movs	r2, #120	@ 0x78
 80134f8:	4932      	ldr	r1, [pc, #200]	@ (80135c4 <_printf_i+0x214>)
 80134fa:	9104      	str	r1, [sp, #16]
 80134fc:	0021      	movs	r1, r4
 80134fe:	3145      	adds	r1, #69	@ 0x45
 8013500:	700a      	strb	r2, [r1, #0]
 8013502:	6819      	ldr	r1, [r3, #0]
 8013504:	6822      	ldr	r2, [r4, #0]
 8013506:	c940      	ldmia	r1!, {r6}
 8013508:	0610      	lsls	r0, r2, #24
 801350a:	d402      	bmi.n	8013512 <_printf_i+0x162>
 801350c:	0650      	lsls	r0, r2, #25
 801350e:	d500      	bpl.n	8013512 <_printf_i+0x162>
 8013510:	b2b6      	uxth	r6, r6
 8013512:	6019      	str	r1, [r3, #0]
 8013514:	07d3      	lsls	r3, r2, #31
 8013516:	d502      	bpl.n	801351e <_printf_i+0x16e>
 8013518:	2320      	movs	r3, #32
 801351a:	4313      	orrs	r3, r2
 801351c:	6023      	str	r3, [r4, #0]
 801351e:	2e00      	cmp	r6, #0
 8013520:	d001      	beq.n	8013526 <_printf_i+0x176>
 8013522:	2710      	movs	r7, #16
 8013524:	e7aa      	b.n	801347c <_printf_i+0xcc>
 8013526:	2220      	movs	r2, #32
 8013528:	6823      	ldr	r3, [r4, #0]
 801352a:	4393      	bics	r3, r2
 801352c:	6023      	str	r3, [r4, #0]
 801352e:	e7f8      	b.n	8013522 <_printf_i+0x172>
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	680d      	ldr	r5, [r1, #0]
 8013534:	1d10      	adds	r0, r2, #4
 8013536:	6949      	ldr	r1, [r1, #20]
 8013538:	6018      	str	r0, [r3, #0]
 801353a:	6813      	ldr	r3, [r2, #0]
 801353c:	062e      	lsls	r6, r5, #24
 801353e:	d501      	bpl.n	8013544 <_printf_i+0x194>
 8013540:	6019      	str	r1, [r3, #0]
 8013542:	e002      	b.n	801354a <_printf_i+0x19a>
 8013544:	066d      	lsls	r5, r5, #25
 8013546:	d5fb      	bpl.n	8013540 <_printf_i+0x190>
 8013548:	8019      	strh	r1, [r3, #0]
 801354a:	2300      	movs	r3, #0
 801354c:	9d03      	ldr	r5, [sp, #12]
 801354e:	6123      	str	r3, [r4, #16]
 8013550:	e7bf      	b.n	80134d2 <_printf_i+0x122>
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	1d11      	adds	r1, r2, #4
 8013556:	6019      	str	r1, [r3, #0]
 8013558:	6815      	ldr	r5, [r2, #0]
 801355a:	2100      	movs	r1, #0
 801355c:	0028      	movs	r0, r5
 801355e:	6862      	ldr	r2, [r4, #4]
 8013560:	f000 fae3 	bl	8013b2a <memchr>
 8013564:	2800      	cmp	r0, #0
 8013566:	d001      	beq.n	801356c <_printf_i+0x1bc>
 8013568:	1b40      	subs	r0, r0, r5
 801356a:	6060      	str	r0, [r4, #4]
 801356c:	6863      	ldr	r3, [r4, #4]
 801356e:	6123      	str	r3, [r4, #16]
 8013570:	2300      	movs	r3, #0
 8013572:	9a03      	ldr	r2, [sp, #12]
 8013574:	7013      	strb	r3, [r2, #0]
 8013576:	e7ac      	b.n	80134d2 <_printf_i+0x122>
 8013578:	002a      	movs	r2, r5
 801357a:	6923      	ldr	r3, [r4, #16]
 801357c:	9906      	ldr	r1, [sp, #24]
 801357e:	9805      	ldr	r0, [sp, #20]
 8013580:	9d07      	ldr	r5, [sp, #28]
 8013582:	47a8      	blx	r5
 8013584:	3001      	adds	r0, #1
 8013586:	d0ae      	beq.n	80134e6 <_printf_i+0x136>
 8013588:	6823      	ldr	r3, [r4, #0]
 801358a:	079b      	lsls	r3, r3, #30
 801358c:	d415      	bmi.n	80135ba <_printf_i+0x20a>
 801358e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013590:	68e0      	ldr	r0, [r4, #12]
 8013592:	4298      	cmp	r0, r3
 8013594:	daa9      	bge.n	80134ea <_printf_i+0x13a>
 8013596:	0018      	movs	r0, r3
 8013598:	e7a7      	b.n	80134ea <_printf_i+0x13a>
 801359a:	0022      	movs	r2, r4
 801359c:	2301      	movs	r3, #1
 801359e:	9906      	ldr	r1, [sp, #24]
 80135a0:	9805      	ldr	r0, [sp, #20]
 80135a2:	9e07      	ldr	r6, [sp, #28]
 80135a4:	3219      	adds	r2, #25
 80135a6:	47b0      	blx	r6
 80135a8:	3001      	adds	r0, #1
 80135aa:	d09c      	beq.n	80134e6 <_printf_i+0x136>
 80135ac:	3501      	adds	r5, #1
 80135ae:	68e3      	ldr	r3, [r4, #12]
 80135b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135b2:	1a9b      	subs	r3, r3, r2
 80135b4:	42ab      	cmp	r3, r5
 80135b6:	dcf0      	bgt.n	801359a <_printf_i+0x1ea>
 80135b8:	e7e9      	b.n	801358e <_printf_i+0x1de>
 80135ba:	2500      	movs	r5, #0
 80135bc:	e7f7      	b.n	80135ae <_printf_i+0x1fe>
 80135be:	46c0      	nop			@ (mov r8, r8)
 80135c0:	08015d42 	.word	0x08015d42
 80135c4:	08015d53 	.word	0x08015d53

080135c8 <std>:
 80135c8:	2300      	movs	r3, #0
 80135ca:	b510      	push	{r4, lr}
 80135cc:	0004      	movs	r4, r0
 80135ce:	6003      	str	r3, [r0, #0]
 80135d0:	6043      	str	r3, [r0, #4]
 80135d2:	6083      	str	r3, [r0, #8]
 80135d4:	8181      	strh	r1, [r0, #12]
 80135d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80135d8:	81c2      	strh	r2, [r0, #14]
 80135da:	6103      	str	r3, [r0, #16]
 80135dc:	6143      	str	r3, [r0, #20]
 80135de:	6183      	str	r3, [r0, #24]
 80135e0:	0019      	movs	r1, r3
 80135e2:	2208      	movs	r2, #8
 80135e4:	305c      	adds	r0, #92	@ 0x5c
 80135e6:	f000 fa19 	bl	8013a1c <memset>
 80135ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013618 <std+0x50>)
 80135ec:	6224      	str	r4, [r4, #32]
 80135ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80135f0:	4b0a      	ldr	r3, [pc, #40]	@ (801361c <std+0x54>)
 80135f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80135f4:	4b0a      	ldr	r3, [pc, #40]	@ (8013620 <std+0x58>)
 80135f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80135f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013624 <std+0x5c>)
 80135fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80135fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013628 <std+0x60>)
 80135fe:	429c      	cmp	r4, r3
 8013600:	d005      	beq.n	801360e <std+0x46>
 8013602:	4b0a      	ldr	r3, [pc, #40]	@ (801362c <std+0x64>)
 8013604:	429c      	cmp	r4, r3
 8013606:	d002      	beq.n	801360e <std+0x46>
 8013608:	4b09      	ldr	r3, [pc, #36]	@ (8013630 <std+0x68>)
 801360a:	429c      	cmp	r4, r3
 801360c:	d103      	bne.n	8013616 <std+0x4e>
 801360e:	0020      	movs	r0, r4
 8013610:	3058      	adds	r0, #88	@ 0x58
 8013612:	f000 fa87 	bl	8013b24 <__retarget_lock_init_recursive>
 8013616:	bd10      	pop	{r4, pc}
 8013618:	08013845 	.word	0x08013845
 801361c:	0801386d 	.word	0x0801386d
 8013620:	080138a5 	.word	0x080138a5
 8013624:	080138d1 	.word	0x080138d1
 8013628:	20005d50 	.word	0x20005d50
 801362c:	20005db8 	.word	0x20005db8
 8013630:	20005e20 	.word	0x20005e20

08013634 <stdio_exit_handler>:
 8013634:	b510      	push	{r4, lr}
 8013636:	4a03      	ldr	r2, [pc, #12]	@ (8013644 <stdio_exit_handler+0x10>)
 8013638:	4903      	ldr	r1, [pc, #12]	@ (8013648 <stdio_exit_handler+0x14>)
 801363a:	4804      	ldr	r0, [pc, #16]	@ (801364c <stdio_exit_handler+0x18>)
 801363c:	f000 f86c 	bl	8013718 <_fwalk_sglue>
 8013640:	bd10      	pop	{r4, pc}
 8013642:	46c0      	nop			@ (mov r8, r8)
 8013644:	20000088 	.word	0x20000088
 8013648:	08015515 	.word	0x08015515
 801364c:	20000098 	.word	0x20000098

08013650 <cleanup_stdio>:
 8013650:	6841      	ldr	r1, [r0, #4]
 8013652:	4b0b      	ldr	r3, [pc, #44]	@ (8013680 <cleanup_stdio+0x30>)
 8013654:	b510      	push	{r4, lr}
 8013656:	0004      	movs	r4, r0
 8013658:	4299      	cmp	r1, r3
 801365a:	d001      	beq.n	8013660 <cleanup_stdio+0x10>
 801365c:	f001 ff5a 	bl	8015514 <_fflush_r>
 8013660:	68a1      	ldr	r1, [r4, #8]
 8013662:	4b08      	ldr	r3, [pc, #32]	@ (8013684 <cleanup_stdio+0x34>)
 8013664:	4299      	cmp	r1, r3
 8013666:	d002      	beq.n	801366e <cleanup_stdio+0x1e>
 8013668:	0020      	movs	r0, r4
 801366a:	f001 ff53 	bl	8015514 <_fflush_r>
 801366e:	68e1      	ldr	r1, [r4, #12]
 8013670:	4b05      	ldr	r3, [pc, #20]	@ (8013688 <cleanup_stdio+0x38>)
 8013672:	4299      	cmp	r1, r3
 8013674:	d002      	beq.n	801367c <cleanup_stdio+0x2c>
 8013676:	0020      	movs	r0, r4
 8013678:	f001 ff4c 	bl	8015514 <_fflush_r>
 801367c:	bd10      	pop	{r4, pc}
 801367e:	46c0      	nop			@ (mov r8, r8)
 8013680:	20005d50 	.word	0x20005d50
 8013684:	20005db8 	.word	0x20005db8
 8013688:	20005e20 	.word	0x20005e20

0801368c <global_stdio_init.part.0>:
 801368c:	b510      	push	{r4, lr}
 801368e:	4b09      	ldr	r3, [pc, #36]	@ (80136b4 <global_stdio_init.part.0+0x28>)
 8013690:	4a09      	ldr	r2, [pc, #36]	@ (80136b8 <global_stdio_init.part.0+0x2c>)
 8013692:	2104      	movs	r1, #4
 8013694:	601a      	str	r2, [r3, #0]
 8013696:	4809      	ldr	r0, [pc, #36]	@ (80136bc <global_stdio_init.part.0+0x30>)
 8013698:	2200      	movs	r2, #0
 801369a:	f7ff ff95 	bl	80135c8 <std>
 801369e:	2201      	movs	r2, #1
 80136a0:	2109      	movs	r1, #9
 80136a2:	4807      	ldr	r0, [pc, #28]	@ (80136c0 <global_stdio_init.part.0+0x34>)
 80136a4:	f7ff ff90 	bl	80135c8 <std>
 80136a8:	2202      	movs	r2, #2
 80136aa:	2112      	movs	r1, #18
 80136ac:	4805      	ldr	r0, [pc, #20]	@ (80136c4 <global_stdio_init.part.0+0x38>)
 80136ae:	f7ff ff8b 	bl	80135c8 <std>
 80136b2:	bd10      	pop	{r4, pc}
 80136b4:	20005e88 	.word	0x20005e88
 80136b8:	08013635 	.word	0x08013635
 80136bc:	20005d50 	.word	0x20005d50
 80136c0:	20005db8 	.word	0x20005db8
 80136c4:	20005e20 	.word	0x20005e20

080136c8 <__sfp_lock_acquire>:
 80136c8:	b510      	push	{r4, lr}
 80136ca:	4802      	ldr	r0, [pc, #8]	@ (80136d4 <__sfp_lock_acquire+0xc>)
 80136cc:	f000 fa2b 	bl	8013b26 <__retarget_lock_acquire_recursive>
 80136d0:	bd10      	pop	{r4, pc}
 80136d2:	46c0      	nop			@ (mov r8, r8)
 80136d4:	20005e91 	.word	0x20005e91

080136d8 <__sfp_lock_release>:
 80136d8:	b510      	push	{r4, lr}
 80136da:	4802      	ldr	r0, [pc, #8]	@ (80136e4 <__sfp_lock_release+0xc>)
 80136dc:	f000 fa24 	bl	8013b28 <__retarget_lock_release_recursive>
 80136e0:	bd10      	pop	{r4, pc}
 80136e2:	46c0      	nop			@ (mov r8, r8)
 80136e4:	20005e91 	.word	0x20005e91

080136e8 <__sinit>:
 80136e8:	b510      	push	{r4, lr}
 80136ea:	0004      	movs	r4, r0
 80136ec:	f7ff ffec 	bl	80136c8 <__sfp_lock_acquire>
 80136f0:	6a23      	ldr	r3, [r4, #32]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <__sinit+0x14>
 80136f6:	f7ff ffef 	bl	80136d8 <__sfp_lock_release>
 80136fa:	bd10      	pop	{r4, pc}
 80136fc:	4b04      	ldr	r3, [pc, #16]	@ (8013710 <__sinit+0x28>)
 80136fe:	6223      	str	r3, [r4, #32]
 8013700:	4b04      	ldr	r3, [pc, #16]	@ (8013714 <__sinit+0x2c>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1f6      	bne.n	80136f6 <__sinit+0xe>
 8013708:	f7ff ffc0 	bl	801368c <global_stdio_init.part.0>
 801370c:	e7f3      	b.n	80136f6 <__sinit+0xe>
 801370e:	46c0      	nop			@ (mov r8, r8)
 8013710:	08013651 	.word	0x08013651
 8013714:	20005e88 	.word	0x20005e88

08013718 <_fwalk_sglue>:
 8013718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801371a:	0014      	movs	r4, r2
 801371c:	2600      	movs	r6, #0
 801371e:	9000      	str	r0, [sp, #0]
 8013720:	9101      	str	r1, [sp, #4]
 8013722:	68a5      	ldr	r5, [r4, #8]
 8013724:	6867      	ldr	r7, [r4, #4]
 8013726:	3f01      	subs	r7, #1
 8013728:	d504      	bpl.n	8013734 <_fwalk_sglue+0x1c>
 801372a:	6824      	ldr	r4, [r4, #0]
 801372c:	2c00      	cmp	r4, #0
 801372e:	d1f8      	bne.n	8013722 <_fwalk_sglue+0xa>
 8013730:	0030      	movs	r0, r6
 8013732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013734:	89ab      	ldrh	r3, [r5, #12]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d908      	bls.n	801374c <_fwalk_sglue+0x34>
 801373a:	220e      	movs	r2, #14
 801373c:	5eab      	ldrsh	r3, [r5, r2]
 801373e:	3301      	adds	r3, #1
 8013740:	d004      	beq.n	801374c <_fwalk_sglue+0x34>
 8013742:	0029      	movs	r1, r5
 8013744:	9800      	ldr	r0, [sp, #0]
 8013746:	9b01      	ldr	r3, [sp, #4]
 8013748:	4798      	blx	r3
 801374a:	4306      	orrs	r6, r0
 801374c:	3568      	adds	r5, #104	@ 0x68
 801374e:	e7ea      	b.n	8013726 <_fwalk_sglue+0xe>

08013750 <iprintf>:
 8013750:	b40f      	push	{r0, r1, r2, r3}
 8013752:	b507      	push	{r0, r1, r2, lr}
 8013754:	4905      	ldr	r1, [pc, #20]	@ (801376c <iprintf+0x1c>)
 8013756:	ab04      	add	r3, sp, #16
 8013758:	6808      	ldr	r0, [r1, #0]
 801375a:	cb04      	ldmia	r3!, {r2}
 801375c:	6881      	ldr	r1, [r0, #8]
 801375e:	9301      	str	r3, [sp, #4]
 8013760:	f001 fd36 	bl	80151d0 <_vfiprintf_r>
 8013764:	b003      	add	sp, #12
 8013766:	bc08      	pop	{r3}
 8013768:	b004      	add	sp, #16
 801376a:	4718      	bx	r3
 801376c:	20000094 	.word	0x20000094

08013770 <putchar>:
 8013770:	b510      	push	{r4, lr}
 8013772:	4b03      	ldr	r3, [pc, #12]	@ (8013780 <putchar+0x10>)
 8013774:	0001      	movs	r1, r0
 8013776:	6818      	ldr	r0, [r3, #0]
 8013778:	6882      	ldr	r2, [r0, #8]
 801377a:	f001 ff62 	bl	8015642 <_putc_r>
 801377e:	bd10      	pop	{r4, pc}
 8013780:	20000094 	.word	0x20000094

08013784 <_puts_r>:
 8013784:	6a03      	ldr	r3, [r0, #32]
 8013786:	b570      	push	{r4, r5, r6, lr}
 8013788:	0005      	movs	r5, r0
 801378a:	000e      	movs	r6, r1
 801378c:	6884      	ldr	r4, [r0, #8]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d101      	bne.n	8013796 <_puts_r+0x12>
 8013792:	f7ff ffa9 	bl	80136e8 <__sinit>
 8013796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013798:	07db      	lsls	r3, r3, #31
 801379a:	d405      	bmi.n	80137a8 <_puts_r+0x24>
 801379c:	89a3      	ldrh	r3, [r4, #12]
 801379e:	059b      	lsls	r3, r3, #22
 80137a0:	d402      	bmi.n	80137a8 <_puts_r+0x24>
 80137a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137a4:	f000 f9bf 	bl	8013b26 <__retarget_lock_acquire_recursive>
 80137a8:	89a3      	ldrh	r3, [r4, #12]
 80137aa:	071b      	lsls	r3, r3, #28
 80137ac:	d502      	bpl.n	80137b4 <_puts_r+0x30>
 80137ae:	6923      	ldr	r3, [r4, #16]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d11f      	bne.n	80137f4 <_puts_r+0x70>
 80137b4:	0021      	movs	r1, r4
 80137b6:	0028      	movs	r0, r5
 80137b8:	f000 f8d2 	bl	8013960 <__swsetup_r>
 80137bc:	2800      	cmp	r0, #0
 80137be:	d019      	beq.n	80137f4 <_puts_r+0x70>
 80137c0:	2501      	movs	r5, #1
 80137c2:	426d      	negs	r5, r5
 80137c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137c6:	07db      	lsls	r3, r3, #31
 80137c8:	d405      	bmi.n	80137d6 <_puts_r+0x52>
 80137ca:	89a3      	ldrh	r3, [r4, #12]
 80137cc:	059b      	lsls	r3, r3, #22
 80137ce:	d402      	bmi.n	80137d6 <_puts_r+0x52>
 80137d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137d2:	f000 f9a9 	bl	8013b28 <__retarget_lock_release_recursive>
 80137d6:	0028      	movs	r0, r5
 80137d8:	bd70      	pop	{r4, r5, r6, pc}
 80137da:	3601      	adds	r6, #1
 80137dc:	60a3      	str	r3, [r4, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	da04      	bge.n	80137ec <_puts_r+0x68>
 80137e2:	69a2      	ldr	r2, [r4, #24]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	dc16      	bgt.n	8013816 <_puts_r+0x92>
 80137e8:	290a      	cmp	r1, #10
 80137ea:	d014      	beq.n	8013816 <_puts_r+0x92>
 80137ec:	6823      	ldr	r3, [r4, #0]
 80137ee:	1c5a      	adds	r2, r3, #1
 80137f0:	6022      	str	r2, [r4, #0]
 80137f2:	7019      	strb	r1, [r3, #0]
 80137f4:	68a3      	ldr	r3, [r4, #8]
 80137f6:	7831      	ldrb	r1, [r6, #0]
 80137f8:	3b01      	subs	r3, #1
 80137fa:	2900      	cmp	r1, #0
 80137fc:	d1ed      	bne.n	80137da <_puts_r+0x56>
 80137fe:	60a3      	str	r3, [r4, #8]
 8013800:	2b00      	cmp	r3, #0
 8013802:	da0f      	bge.n	8013824 <_puts_r+0xa0>
 8013804:	0022      	movs	r2, r4
 8013806:	0028      	movs	r0, r5
 8013808:	310a      	adds	r1, #10
 801380a:	f000 f867 	bl	80138dc <__swbuf_r>
 801380e:	3001      	adds	r0, #1
 8013810:	d0d6      	beq.n	80137c0 <_puts_r+0x3c>
 8013812:	250a      	movs	r5, #10
 8013814:	e7d6      	b.n	80137c4 <_puts_r+0x40>
 8013816:	0022      	movs	r2, r4
 8013818:	0028      	movs	r0, r5
 801381a:	f000 f85f 	bl	80138dc <__swbuf_r>
 801381e:	3001      	adds	r0, #1
 8013820:	d1e8      	bne.n	80137f4 <_puts_r+0x70>
 8013822:	e7cd      	b.n	80137c0 <_puts_r+0x3c>
 8013824:	6823      	ldr	r3, [r4, #0]
 8013826:	1c5a      	adds	r2, r3, #1
 8013828:	6022      	str	r2, [r4, #0]
 801382a:	220a      	movs	r2, #10
 801382c:	701a      	strb	r2, [r3, #0]
 801382e:	e7f0      	b.n	8013812 <_puts_r+0x8e>

08013830 <puts>:
 8013830:	b510      	push	{r4, lr}
 8013832:	4b03      	ldr	r3, [pc, #12]	@ (8013840 <puts+0x10>)
 8013834:	0001      	movs	r1, r0
 8013836:	6818      	ldr	r0, [r3, #0]
 8013838:	f7ff ffa4 	bl	8013784 <_puts_r>
 801383c:	bd10      	pop	{r4, pc}
 801383e:	46c0      	nop			@ (mov r8, r8)
 8013840:	20000094 	.word	0x20000094

08013844 <__sread>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	000c      	movs	r4, r1
 8013848:	250e      	movs	r5, #14
 801384a:	5f49      	ldrsh	r1, [r1, r5]
 801384c:	f000 f918 	bl	8013a80 <_read_r>
 8013850:	2800      	cmp	r0, #0
 8013852:	db03      	blt.n	801385c <__sread+0x18>
 8013854:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8013856:	181b      	adds	r3, r3, r0
 8013858:	6563      	str	r3, [r4, #84]	@ 0x54
 801385a:	bd70      	pop	{r4, r5, r6, pc}
 801385c:	89a3      	ldrh	r3, [r4, #12]
 801385e:	4a02      	ldr	r2, [pc, #8]	@ (8013868 <__sread+0x24>)
 8013860:	4013      	ands	r3, r2
 8013862:	81a3      	strh	r3, [r4, #12]
 8013864:	e7f9      	b.n	801385a <__sread+0x16>
 8013866:	46c0      	nop			@ (mov r8, r8)
 8013868:	ffffefff 	.word	0xffffefff

0801386c <__swrite>:
 801386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801386e:	001f      	movs	r7, r3
 8013870:	898b      	ldrh	r3, [r1, #12]
 8013872:	0005      	movs	r5, r0
 8013874:	000c      	movs	r4, r1
 8013876:	0016      	movs	r6, r2
 8013878:	05db      	lsls	r3, r3, #23
 801387a:	d505      	bpl.n	8013888 <__swrite+0x1c>
 801387c:	230e      	movs	r3, #14
 801387e:	5ec9      	ldrsh	r1, [r1, r3]
 8013880:	2200      	movs	r2, #0
 8013882:	2302      	movs	r3, #2
 8013884:	f000 f8e8 	bl	8013a58 <_lseek_r>
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	4a05      	ldr	r2, [pc, #20]	@ (80138a0 <__swrite+0x34>)
 801388c:	0028      	movs	r0, r5
 801388e:	4013      	ands	r3, r2
 8013890:	81a3      	strh	r3, [r4, #12]
 8013892:	0032      	movs	r2, r6
 8013894:	230e      	movs	r3, #14
 8013896:	5ee1      	ldrsh	r1, [r4, r3]
 8013898:	003b      	movs	r3, r7
 801389a:	f000 f905 	bl	8013aa8 <_write_r>
 801389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138a0:	ffffefff 	.word	0xffffefff

080138a4 <__sseek>:
 80138a4:	b570      	push	{r4, r5, r6, lr}
 80138a6:	000c      	movs	r4, r1
 80138a8:	250e      	movs	r5, #14
 80138aa:	5f49      	ldrsh	r1, [r1, r5]
 80138ac:	f000 f8d4 	bl	8013a58 <_lseek_r>
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	1c42      	adds	r2, r0, #1
 80138b4:	d103      	bne.n	80138be <__sseek+0x1a>
 80138b6:	4a05      	ldr	r2, [pc, #20]	@ (80138cc <__sseek+0x28>)
 80138b8:	4013      	ands	r3, r2
 80138ba:	81a3      	strh	r3, [r4, #12]
 80138bc:	bd70      	pop	{r4, r5, r6, pc}
 80138be:	2280      	movs	r2, #128	@ 0x80
 80138c0:	0152      	lsls	r2, r2, #5
 80138c2:	4313      	orrs	r3, r2
 80138c4:	81a3      	strh	r3, [r4, #12]
 80138c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80138c8:	e7f8      	b.n	80138bc <__sseek+0x18>
 80138ca:	46c0      	nop			@ (mov r8, r8)
 80138cc:	ffffefff 	.word	0xffffefff

080138d0 <__sclose>:
 80138d0:	b510      	push	{r4, lr}
 80138d2:	230e      	movs	r3, #14
 80138d4:	5ec9      	ldrsh	r1, [r1, r3]
 80138d6:	f000 f8ad 	bl	8013a34 <_close_r>
 80138da:	bd10      	pop	{r4, pc}

080138dc <__swbuf_r>:
 80138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138de:	0006      	movs	r6, r0
 80138e0:	000d      	movs	r5, r1
 80138e2:	0014      	movs	r4, r2
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d004      	beq.n	80138f2 <__swbuf_r+0x16>
 80138e8:	6a03      	ldr	r3, [r0, #32]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d101      	bne.n	80138f2 <__swbuf_r+0x16>
 80138ee:	f7ff fefb 	bl	80136e8 <__sinit>
 80138f2:	69a3      	ldr	r3, [r4, #24]
 80138f4:	60a3      	str	r3, [r4, #8]
 80138f6:	89a3      	ldrh	r3, [r4, #12]
 80138f8:	071b      	lsls	r3, r3, #28
 80138fa:	d502      	bpl.n	8013902 <__swbuf_r+0x26>
 80138fc:	6923      	ldr	r3, [r4, #16]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d109      	bne.n	8013916 <__swbuf_r+0x3a>
 8013902:	0021      	movs	r1, r4
 8013904:	0030      	movs	r0, r6
 8013906:	f000 f82b 	bl	8013960 <__swsetup_r>
 801390a:	2800      	cmp	r0, #0
 801390c:	d003      	beq.n	8013916 <__swbuf_r+0x3a>
 801390e:	2501      	movs	r5, #1
 8013910:	426d      	negs	r5, r5
 8013912:	0028      	movs	r0, r5
 8013914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013916:	6923      	ldr	r3, [r4, #16]
 8013918:	6820      	ldr	r0, [r4, #0]
 801391a:	b2ef      	uxtb	r7, r5
 801391c:	1ac0      	subs	r0, r0, r3
 801391e:	6963      	ldr	r3, [r4, #20]
 8013920:	b2ed      	uxtb	r5, r5
 8013922:	4283      	cmp	r3, r0
 8013924:	dc05      	bgt.n	8013932 <__swbuf_r+0x56>
 8013926:	0021      	movs	r1, r4
 8013928:	0030      	movs	r0, r6
 801392a:	f001 fdf3 	bl	8015514 <_fflush_r>
 801392e:	2800      	cmp	r0, #0
 8013930:	d1ed      	bne.n	801390e <__swbuf_r+0x32>
 8013932:	68a3      	ldr	r3, [r4, #8]
 8013934:	3001      	adds	r0, #1
 8013936:	3b01      	subs	r3, #1
 8013938:	60a3      	str	r3, [r4, #8]
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	1c5a      	adds	r2, r3, #1
 801393e:	6022      	str	r2, [r4, #0]
 8013940:	701f      	strb	r7, [r3, #0]
 8013942:	6963      	ldr	r3, [r4, #20]
 8013944:	4283      	cmp	r3, r0
 8013946:	d004      	beq.n	8013952 <__swbuf_r+0x76>
 8013948:	89a3      	ldrh	r3, [r4, #12]
 801394a:	07db      	lsls	r3, r3, #31
 801394c:	d5e1      	bpl.n	8013912 <__swbuf_r+0x36>
 801394e:	2d0a      	cmp	r5, #10
 8013950:	d1df      	bne.n	8013912 <__swbuf_r+0x36>
 8013952:	0021      	movs	r1, r4
 8013954:	0030      	movs	r0, r6
 8013956:	f001 fddd 	bl	8015514 <_fflush_r>
 801395a:	2800      	cmp	r0, #0
 801395c:	d0d9      	beq.n	8013912 <__swbuf_r+0x36>
 801395e:	e7d6      	b.n	801390e <__swbuf_r+0x32>

08013960 <__swsetup_r>:
 8013960:	4b2d      	ldr	r3, [pc, #180]	@ (8013a18 <__swsetup_r+0xb8>)
 8013962:	b570      	push	{r4, r5, r6, lr}
 8013964:	0005      	movs	r5, r0
 8013966:	6818      	ldr	r0, [r3, #0]
 8013968:	000c      	movs	r4, r1
 801396a:	2800      	cmp	r0, #0
 801396c:	d004      	beq.n	8013978 <__swsetup_r+0x18>
 801396e:	6a03      	ldr	r3, [r0, #32]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d101      	bne.n	8013978 <__swsetup_r+0x18>
 8013974:	f7ff feb8 	bl	80136e8 <__sinit>
 8013978:	220c      	movs	r2, #12
 801397a:	5ea3      	ldrsh	r3, [r4, r2]
 801397c:	071a      	lsls	r2, r3, #28
 801397e:	d423      	bmi.n	80139c8 <__swsetup_r+0x68>
 8013980:	06da      	lsls	r2, r3, #27
 8013982:	d407      	bmi.n	8013994 <__swsetup_r+0x34>
 8013984:	2209      	movs	r2, #9
 8013986:	602a      	str	r2, [r5, #0]
 8013988:	2240      	movs	r2, #64	@ 0x40
 801398a:	2001      	movs	r0, #1
 801398c:	4313      	orrs	r3, r2
 801398e:	81a3      	strh	r3, [r4, #12]
 8013990:	4240      	negs	r0, r0
 8013992:	e03a      	b.n	8013a0a <__swsetup_r+0xaa>
 8013994:	075b      	lsls	r3, r3, #29
 8013996:	d513      	bpl.n	80139c0 <__swsetup_r+0x60>
 8013998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801399a:	2900      	cmp	r1, #0
 801399c:	d008      	beq.n	80139b0 <__swsetup_r+0x50>
 801399e:	0023      	movs	r3, r4
 80139a0:	3344      	adds	r3, #68	@ 0x44
 80139a2:	4299      	cmp	r1, r3
 80139a4:	d002      	beq.n	80139ac <__swsetup_r+0x4c>
 80139a6:	0028      	movs	r0, r5
 80139a8:	f000 ff48 	bl	801483c <_free_r>
 80139ac:	2300      	movs	r3, #0
 80139ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80139b0:	2224      	movs	r2, #36	@ 0x24
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	4393      	bics	r3, r2
 80139b6:	81a3      	strh	r3, [r4, #12]
 80139b8:	2300      	movs	r3, #0
 80139ba:	6063      	str	r3, [r4, #4]
 80139bc:	6923      	ldr	r3, [r4, #16]
 80139be:	6023      	str	r3, [r4, #0]
 80139c0:	2308      	movs	r3, #8
 80139c2:	89a2      	ldrh	r2, [r4, #12]
 80139c4:	4313      	orrs	r3, r2
 80139c6:	81a3      	strh	r3, [r4, #12]
 80139c8:	6923      	ldr	r3, [r4, #16]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10b      	bne.n	80139e6 <__swsetup_r+0x86>
 80139ce:	21a0      	movs	r1, #160	@ 0xa0
 80139d0:	2280      	movs	r2, #128	@ 0x80
 80139d2:	89a3      	ldrh	r3, [r4, #12]
 80139d4:	0089      	lsls	r1, r1, #2
 80139d6:	0092      	lsls	r2, r2, #2
 80139d8:	400b      	ands	r3, r1
 80139da:	4293      	cmp	r3, r2
 80139dc:	d003      	beq.n	80139e6 <__swsetup_r+0x86>
 80139de:	0021      	movs	r1, r4
 80139e0:	0028      	movs	r0, r5
 80139e2:	f001 fded 	bl	80155c0 <__smakebuf_r>
 80139e6:	220c      	movs	r2, #12
 80139e8:	5ea3      	ldrsh	r3, [r4, r2]
 80139ea:	2101      	movs	r1, #1
 80139ec:	001a      	movs	r2, r3
 80139ee:	400a      	ands	r2, r1
 80139f0:	420b      	tst	r3, r1
 80139f2:	d00b      	beq.n	8013a0c <__swsetup_r+0xac>
 80139f4:	2200      	movs	r2, #0
 80139f6:	60a2      	str	r2, [r4, #8]
 80139f8:	6962      	ldr	r2, [r4, #20]
 80139fa:	4252      	negs	r2, r2
 80139fc:	61a2      	str	r2, [r4, #24]
 80139fe:	2000      	movs	r0, #0
 8013a00:	6922      	ldr	r2, [r4, #16]
 8013a02:	4282      	cmp	r2, r0
 8013a04:	d101      	bne.n	8013a0a <__swsetup_r+0xaa>
 8013a06:	061a      	lsls	r2, r3, #24
 8013a08:	d4be      	bmi.n	8013988 <__swsetup_r+0x28>
 8013a0a:	bd70      	pop	{r4, r5, r6, pc}
 8013a0c:	0799      	lsls	r1, r3, #30
 8013a0e:	d400      	bmi.n	8013a12 <__swsetup_r+0xb2>
 8013a10:	6962      	ldr	r2, [r4, #20]
 8013a12:	60a2      	str	r2, [r4, #8]
 8013a14:	e7f3      	b.n	80139fe <__swsetup_r+0x9e>
 8013a16:	46c0      	nop			@ (mov r8, r8)
 8013a18:	20000094 	.word	0x20000094

08013a1c <memset>:
 8013a1c:	0003      	movs	r3, r0
 8013a1e:	1882      	adds	r2, r0, r2
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d100      	bne.n	8013a26 <memset+0xa>
 8013a24:	4770      	bx	lr
 8013a26:	7019      	strb	r1, [r3, #0]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	e7f9      	b.n	8013a20 <memset+0x4>

08013a2c <_localeconv_r>:
 8013a2c:	4800      	ldr	r0, [pc, #0]	@ (8013a30 <_localeconv_r+0x4>)
 8013a2e:	4770      	bx	lr
 8013a30:	200001d4 	.word	0x200001d4

08013a34 <_close_r>:
 8013a34:	2300      	movs	r3, #0
 8013a36:	b570      	push	{r4, r5, r6, lr}
 8013a38:	4d06      	ldr	r5, [pc, #24]	@ (8013a54 <_close_r+0x20>)
 8013a3a:	0004      	movs	r4, r0
 8013a3c:	0008      	movs	r0, r1
 8013a3e:	602b      	str	r3, [r5, #0]
 8013a40:	f7f0 f852 	bl	8003ae8 <_close>
 8013a44:	1c43      	adds	r3, r0, #1
 8013a46:	d103      	bne.n	8013a50 <_close_r+0x1c>
 8013a48:	682b      	ldr	r3, [r5, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d000      	beq.n	8013a50 <_close_r+0x1c>
 8013a4e:	6023      	str	r3, [r4, #0]
 8013a50:	bd70      	pop	{r4, r5, r6, pc}
 8013a52:	46c0      	nop			@ (mov r8, r8)
 8013a54:	20005e8c 	.word	0x20005e8c

08013a58 <_lseek_r>:
 8013a58:	b570      	push	{r4, r5, r6, lr}
 8013a5a:	0004      	movs	r4, r0
 8013a5c:	0008      	movs	r0, r1
 8013a5e:	0011      	movs	r1, r2
 8013a60:	001a      	movs	r2, r3
 8013a62:	2300      	movs	r3, #0
 8013a64:	4d05      	ldr	r5, [pc, #20]	@ (8013a7c <_lseek_r+0x24>)
 8013a66:	602b      	str	r3, [r5, #0]
 8013a68:	f7f0 f85f 	bl	8003b2a <_lseek>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d103      	bne.n	8013a78 <_lseek_r+0x20>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d000      	beq.n	8013a78 <_lseek_r+0x20>
 8013a76:	6023      	str	r3, [r4, #0]
 8013a78:	bd70      	pop	{r4, r5, r6, pc}
 8013a7a:	46c0      	nop			@ (mov r8, r8)
 8013a7c:	20005e8c 	.word	0x20005e8c

08013a80 <_read_r>:
 8013a80:	b570      	push	{r4, r5, r6, lr}
 8013a82:	0004      	movs	r4, r0
 8013a84:	0008      	movs	r0, r1
 8013a86:	0011      	movs	r1, r2
 8013a88:	001a      	movs	r2, r3
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	4d05      	ldr	r5, [pc, #20]	@ (8013aa4 <_read_r+0x24>)
 8013a8e:	602b      	str	r3, [r5, #0]
 8013a90:	f7ef fff1 	bl	8003a76 <_read>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d103      	bne.n	8013aa0 <_read_r+0x20>
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d000      	beq.n	8013aa0 <_read_r+0x20>
 8013a9e:	6023      	str	r3, [r4, #0]
 8013aa0:	bd70      	pop	{r4, r5, r6, pc}
 8013aa2:	46c0      	nop			@ (mov r8, r8)
 8013aa4:	20005e8c 	.word	0x20005e8c

08013aa8 <_write_r>:
 8013aa8:	b570      	push	{r4, r5, r6, lr}
 8013aaa:	0004      	movs	r4, r0
 8013aac:	0008      	movs	r0, r1
 8013aae:	0011      	movs	r1, r2
 8013ab0:	001a      	movs	r2, r3
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	4d05      	ldr	r5, [pc, #20]	@ (8013acc <_write_r+0x24>)
 8013ab6:	602b      	str	r3, [r5, #0]
 8013ab8:	f7ef fffa 	bl	8003ab0 <_write>
 8013abc:	1c43      	adds	r3, r0, #1
 8013abe:	d103      	bne.n	8013ac8 <_write_r+0x20>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d000      	beq.n	8013ac8 <_write_r+0x20>
 8013ac6:	6023      	str	r3, [r4, #0]
 8013ac8:	bd70      	pop	{r4, r5, r6, pc}
 8013aca:	46c0      	nop			@ (mov r8, r8)
 8013acc:	20005e8c 	.word	0x20005e8c

08013ad0 <__errno>:
 8013ad0:	4b01      	ldr	r3, [pc, #4]	@ (8013ad8 <__errno+0x8>)
 8013ad2:	6818      	ldr	r0, [r3, #0]
 8013ad4:	4770      	bx	lr
 8013ad6:	46c0      	nop			@ (mov r8, r8)
 8013ad8:	20000094 	.word	0x20000094

08013adc <__libc_init_array>:
 8013adc:	b570      	push	{r4, r5, r6, lr}
 8013ade:	2600      	movs	r6, #0
 8013ae0:	4c0c      	ldr	r4, [pc, #48]	@ (8013b14 <__libc_init_array+0x38>)
 8013ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8013b18 <__libc_init_array+0x3c>)
 8013ae4:	1b64      	subs	r4, r4, r5
 8013ae6:	10a4      	asrs	r4, r4, #2
 8013ae8:	42a6      	cmp	r6, r4
 8013aea:	d109      	bne.n	8013b00 <__libc_init_array+0x24>
 8013aec:	2600      	movs	r6, #0
 8013aee:	f001 fedf 	bl	80158b0 <_init>
 8013af2:	4c0a      	ldr	r4, [pc, #40]	@ (8013b1c <__libc_init_array+0x40>)
 8013af4:	4d0a      	ldr	r5, [pc, #40]	@ (8013b20 <__libc_init_array+0x44>)
 8013af6:	1b64      	subs	r4, r4, r5
 8013af8:	10a4      	asrs	r4, r4, #2
 8013afa:	42a6      	cmp	r6, r4
 8013afc:	d105      	bne.n	8013b0a <__libc_init_array+0x2e>
 8013afe:	bd70      	pop	{r4, r5, r6, pc}
 8013b00:	00b3      	lsls	r3, r6, #2
 8013b02:	58eb      	ldr	r3, [r5, r3]
 8013b04:	4798      	blx	r3
 8013b06:	3601      	adds	r6, #1
 8013b08:	e7ee      	b.n	8013ae8 <__libc_init_array+0xc>
 8013b0a:	00b3      	lsls	r3, r6, #2
 8013b0c:	58eb      	ldr	r3, [r5, r3]
 8013b0e:	4798      	blx	r3
 8013b10:	3601      	adds	r6, #1
 8013b12:	e7f2      	b.n	8013afa <__libc_init_array+0x1e>
 8013b14:	080160ac 	.word	0x080160ac
 8013b18:	080160ac 	.word	0x080160ac
 8013b1c:	080160b0 	.word	0x080160b0
 8013b20:	080160ac 	.word	0x080160ac

08013b24 <__retarget_lock_init_recursive>:
 8013b24:	4770      	bx	lr

08013b26 <__retarget_lock_acquire_recursive>:
 8013b26:	4770      	bx	lr

08013b28 <__retarget_lock_release_recursive>:
 8013b28:	4770      	bx	lr

08013b2a <memchr>:
 8013b2a:	b2c9      	uxtb	r1, r1
 8013b2c:	1882      	adds	r2, r0, r2
 8013b2e:	4290      	cmp	r0, r2
 8013b30:	d101      	bne.n	8013b36 <memchr+0xc>
 8013b32:	2000      	movs	r0, #0
 8013b34:	4770      	bx	lr
 8013b36:	7803      	ldrb	r3, [r0, #0]
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	d0fb      	beq.n	8013b34 <memchr+0xa>
 8013b3c:	3001      	adds	r0, #1
 8013b3e:	e7f6      	b.n	8013b2e <memchr+0x4>

08013b40 <memcpy>:
 8013b40:	2300      	movs	r3, #0
 8013b42:	b510      	push	{r4, lr}
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d100      	bne.n	8013b4a <memcpy+0xa>
 8013b48:	bd10      	pop	{r4, pc}
 8013b4a:	5ccc      	ldrb	r4, [r1, r3]
 8013b4c:	54c4      	strb	r4, [r0, r3]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	e7f8      	b.n	8013b44 <memcpy+0x4>

08013b52 <quorem>:
 8013b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b54:	6903      	ldr	r3, [r0, #16]
 8013b56:	690c      	ldr	r4, [r1, #16]
 8013b58:	b089      	sub	sp, #36	@ 0x24
 8013b5a:	9003      	str	r0, [sp, #12]
 8013b5c:	9106      	str	r1, [sp, #24]
 8013b5e:	2000      	movs	r0, #0
 8013b60:	42a3      	cmp	r3, r4
 8013b62:	db63      	blt.n	8013c2c <quorem+0xda>
 8013b64:	000b      	movs	r3, r1
 8013b66:	3c01      	subs	r4, #1
 8013b68:	3314      	adds	r3, #20
 8013b6a:	00a5      	lsls	r5, r4, #2
 8013b6c:	9304      	str	r3, [sp, #16]
 8013b6e:	195b      	adds	r3, r3, r5
 8013b70:	9305      	str	r3, [sp, #20]
 8013b72:	9b03      	ldr	r3, [sp, #12]
 8013b74:	3314      	adds	r3, #20
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	195d      	adds	r5, r3, r5
 8013b7a:	9b05      	ldr	r3, [sp, #20]
 8013b7c:	682f      	ldr	r7, [r5, #0]
 8013b7e:	681e      	ldr	r6, [r3, #0]
 8013b80:	0038      	movs	r0, r7
 8013b82:	3601      	adds	r6, #1
 8013b84:	0031      	movs	r1, r6
 8013b86:	f7ec fadb 	bl	8000140 <__udivsi3>
 8013b8a:	9002      	str	r0, [sp, #8]
 8013b8c:	42b7      	cmp	r7, r6
 8013b8e:	d327      	bcc.n	8013be0 <quorem+0x8e>
 8013b90:	9b04      	ldr	r3, [sp, #16]
 8013b92:	2700      	movs	r7, #0
 8013b94:	469c      	mov	ip, r3
 8013b96:	9e01      	ldr	r6, [sp, #4]
 8013b98:	9707      	str	r7, [sp, #28]
 8013b9a:	4662      	mov	r2, ip
 8013b9c:	ca08      	ldmia	r2!, {r3}
 8013b9e:	6830      	ldr	r0, [r6, #0]
 8013ba0:	4694      	mov	ip, r2
 8013ba2:	9a02      	ldr	r2, [sp, #8]
 8013ba4:	b299      	uxth	r1, r3
 8013ba6:	4351      	muls	r1, r2
 8013ba8:	0c1b      	lsrs	r3, r3, #16
 8013baa:	4353      	muls	r3, r2
 8013bac:	19c9      	adds	r1, r1, r7
 8013bae:	0c0a      	lsrs	r2, r1, #16
 8013bb0:	189b      	adds	r3, r3, r2
 8013bb2:	b289      	uxth	r1, r1
 8013bb4:	b282      	uxth	r2, r0
 8013bb6:	1a52      	subs	r2, r2, r1
 8013bb8:	9907      	ldr	r1, [sp, #28]
 8013bba:	0c1f      	lsrs	r7, r3, #16
 8013bbc:	1852      	adds	r2, r2, r1
 8013bbe:	0c00      	lsrs	r0, r0, #16
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	1411      	asrs	r1, r2, #16
 8013bc4:	1ac3      	subs	r3, r0, r3
 8013bc6:	185b      	adds	r3, r3, r1
 8013bc8:	1419      	asrs	r1, r3, #16
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	041b      	lsls	r3, r3, #16
 8013bce:	431a      	orrs	r2, r3
 8013bd0:	9b05      	ldr	r3, [sp, #20]
 8013bd2:	9107      	str	r1, [sp, #28]
 8013bd4:	c604      	stmia	r6!, {r2}
 8013bd6:	4563      	cmp	r3, ip
 8013bd8:	d2df      	bcs.n	8013b9a <quorem+0x48>
 8013bda:	682b      	ldr	r3, [r5, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d02b      	beq.n	8013c38 <quorem+0xe6>
 8013be0:	9906      	ldr	r1, [sp, #24]
 8013be2:	9803      	ldr	r0, [sp, #12]
 8013be4:	f001 f9b6 	bl	8014f54 <__mcmp>
 8013be8:	2800      	cmp	r0, #0
 8013bea:	db1e      	blt.n	8013c2a <quorem+0xd8>
 8013bec:	2600      	movs	r6, #0
 8013bee:	9d01      	ldr	r5, [sp, #4]
 8013bf0:	9904      	ldr	r1, [sp, #16]
 8013bf2:	c901      	ldmia	r1!, {r0}
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b287      	uxth	r7, r0
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	1bd2      	subs	r2, r2, r7
 8013bfc:	1992      	adds	r2, r2, r6
 8013bfe:	0c00      	lsrs	r0, r0, #16
 8013c00:	0c1b      	lsrs	r3, r3, #16
 8013c02:	1a1b      	subs	r3, r3, r0
 8013c04:	1410      	asrs	r0, r2, #16
 8013c06:	181b      	adds	r3, r3, r0
 8013c08:	141e      	asrs	r6, r3, #16
 8013c0a:	b292      	uxth	r2, r2
 8013c0c:	041b      	lsls	r3, r3, #16
 8013c0e:	431a      	orrs	r2, r3
 8013c10:	9b05      	ldr	r3, [sp, #20]
 8013c12:	c504      	stmia	r5!, {r2}
 8013c14:	428b      	cmp	r3, r1
 8013c16:	d2ec      	bcs.n	8013bf2 <quorem+0xa0>
 8013c18:	9a01      	ldr	r2, [sp, #4]
 8013c1a:	00a3      	lsls	r3, r4, #2
 8013c1c:	18d3      	adds	r3, r2, r3
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	2a00      	cmp	r2, #0
 8013c22:	d014      	beq.n	8013c4e <quorem+0xfc>
 8013c24:	9b02      	ldr	r3, [sp, #8]
 8013c26:	3301      	adds	r3, #1
 8013c28:	9302      	str	r3, [sp, #8]
 8013c2a:	9802      	ldr	r0, [sp, #8]
 8013c2c:	b009      	add	sp, #36	@ 0x24
 8013c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c30:	682b      	ldr	r3, [r5, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d104      	bne.n	8013c40 <quorem+0xee>
 8013c36:	3c01      	subs	r4, #1
 8013c38:	9b01      	ldr	r3, [sp, #4]
 8013c3a:	3d04      	subs	r5, #4
 8013c3c:	42ab      	cmp	r3, r5
 8013c3e:	d3f7      	bcc.n	8013c30 <quorem+0xde>
 8013c40:	9b03      	ldr	r3, [sp, #12]
 8013c42:	611c      	str	r4, [r3, #16]
 8013c44:	e7cc      	b.n	8013be0 <quorem+0x8e>
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	2a00      	cmp	r2, #0
 8013c4a:	d104      	bne.n	8013c56 <quorem+0x104>
 8013c4c:	3c01      	subs	r4, #1
 8013c4e:	9a01      	ldr	r2, [sp, #4]
 8013c50:	3b04      	subs	r3, #4
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d3f7      	bcc.n	8013c46 <quorem+0xf4>
 8013c56:	9b03      	ldr	r3, [sp, #12]
 8013c58:	611c      	str	r4, [r3, #16]
 8013c5a:	e7e3      	b.n	8013c24 <quorem+0xd2>

08013c5c <_dtoa_r>:
 8013c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c5e:	0014      	movs	r4, r2
 8013c60:	001d      	movs	r5, r3
 8013c62:	69c6      	ldr	r6, [r0, #28]
 8013c64:	b09d      	sub	sp, #116	@ 0x74
 8013c66:	940a      	str	r4, [sp, #40]	@ 0x28
 8013c68:	950b      	str	r5, [sp, #44]	@ 0x2c
 8013c6a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8013c6c:	9003      	str	r0, [sp, #12]
 8013c6e:	2e00      	cmp	r6, #0
 8013c70:	d10f      	bne.n	8013c92 <_dtoa_r+0x36>
 8013c72:	2010      	movs	r0, #16
 8013c74:	f000 fe2c 	bl	80148d0 <malloc>
 8013c78:	9b03      	ldr	r3, [sp, #12]
 8013c7a:	1e02      	subs	r2, r0, #0
 8013c7c:	61d8      	str	r0, [r3, #28]
 8013c7e:	d104      	bne.n	8013c8a <_dtoa_r+0x2e>
 8013c80:	21ef      	movs	r1, #239	@ 0xef
 8013c82:	4bc7      	ldr	r3, [pc, #796]	@ (8013fa0 <_dtoa_r+0x344>)
 8013c84:	48c7      	ldr	r0, [pc, #796]	@ (8013fa4 <_dtoa_r+0x348>)
 8013c86:	f001 fd49 	bl	801571c <__assert_func>
 8013c8a:	6046      	str	r6, [r0, #4]
 8013c8c:	6086      	str	r6, [r0, #8]
 8013c8e:	6006      	str	r6, [r0, #0]
 8013c90:	60c6      	str	r6, [r0, #12]
 8013c92:	9b03      	ldr	r3, [sp, #12]
 8013c94:	69db      	ldr	r3, [r3, #28]
 8013c96:	6819      	ldr	r1, [r3, #0]
 8013c98:	2900      	cmp	r1, #0
 8013c9a:	d00b      	beq.n	8013cb4 <_dtoa_r+0x58>
 8013c9c:	685a      	ldr	r2, [r3, #4]
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	4093      	lsls	r3, r2
 8013ca2:	604a      	str	r2, [r1, #4]
 8013ca4:	608b      	str	r3, [r1, #8]
 8013ca6:	9803      	ldr	r0, [sp, #12]
 8013ca8:	f000 ff12 	bl	8014ad0 <_Bfree>
 8013cac:	2200      	movs	r2, #0
 8013cae:	9b03      	ldr	r3, [sp, #12]
 8013cb0:	69db      	ldr	r3, [r3, #28]
 8013cb2:	601a      	str	r2, [r3, #0]
 8013cb4:	2d00      	cmp	r5, #0
 8013cb6:	da1e      	bge.n	8013cf6 <_dtoa_r+0x9a>
 8013cb8:	2301      	movs	r3, #1
 8013cba:	603b      	str	r3, [r7, #0]
 8013cbc:	006b      	lsls	r3, r5, #1
 8013cbe:	085b      	lsrs	r3, r3, #1
 8013cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cc2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013cc4:	4bb8      	ldr	r3, [pc, #736]	@ (8013fa8 <_dtoa_r+0x34c>)
 8013cc6:	4ab8      	ldr	r2, [pc, #736]	@ (8013fa8 <_dtoa_r+0x34c>)
 8013cc8:	403b      	ands	r3, r7
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d116      	bne.n	8013cfc <_dtoa_r+0xa0>
 8013cce:	4bb7      	ldr	r3, [pc, #732]	@ (8013fac <_dtoa_r+0x350>)
 8013cd0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	033b      	lsls	r3, r7, #12
 8013cd6:	0b1b      	lsrs	r3, r3, #12
 8013cd8:	4323      	orrs	r3, r4
 8013cda:	d101      	bne.n	8013ce0 <_dtoa_r+0x84>
 8013cdc:	f000 fd80 	bl	80147e0 <_dtoa_r+0xb84>
 8013ce0:	4bb3      	ldr	r3, [pc, #716]	@ (8013fb0 <_dtoa_r+0x354>)
 8013ce2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013ce4:	9308      	str	r3, [sp, #32]
 8013ce6:	2a00      	cmp	r2, #0
 8013ce8:	d002      	beq.n	8013cf0 <_dtoa_r+0x94>
 8013cea:	4bb2      	ldr	r3, [pc, #712]	@ (8013fb4 <_dtoa_r+0x358>)
 8013cec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013cee:	6013      	str	r3, [r2, #0]
 8013cf0:	9808      	ldr	r0, [sp, #32]
 8013cf2:	b01d      	add	sp, #116	@ 0x74
 8013cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	603b      	str	r3, [r7, #0]
 8013cfa:	e7e2      	b.n	8013cc2 <_dtoa_r+0x66>
 8013cfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d00:	9212      	str	r2, [sp, #72]	@ 0x48
 8013d02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013d04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013d06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013d08:	2200      	movs	r2, #0
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f7ec fb9e 	bl	800044c <__aeabi_dcmpeq>
 8013d10:	1e06      	subs	r6, r0, #0
 8013d12:	d00b      	beq.n	8013d2c <_dtoa_r+0xd0>
 8013d14:	2301      	movs	r3, #1
 8013d16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013d18:	6013      	str	r3, [r2, #0]
 8013d1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d002      	beq.n	8013d26 <_dtoa_r+0xca>
 8013d20:	4ba5      	ldr	r3, [pc, #660]	@ (8013fb8 <_dtoa_r+0x35c>)
 8013d22:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013d24:	6013      	str	r3, [r2, #0]
 8013d26:	4ba5      	ldr	r3, [pc, #660]	@ (8013fbc <_dtoa_r+0x360>)
 8013d28:	9308      	str	r3, [sp, #32]
 8013d2a:	e7e1      	b.n	8013cf0 <_dtoa_r+0x94>
 8013d2c:	ab1a      	add	r3, sp, #104	@ 0x68
 8013d2e:	9301      	str	r3, [sp, #4]
 8013d30:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	9803      	ldr	r0, [sp, #12]
 8013d36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013d38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013d3a:	f001 f9c1 	bl	80150c0 <__d2b>
 8013d3e:	007a      	lsls	r2, r7, #1
 8013d40:	9005      	str	r0, [sp, #20]
 8013d42:	0d52      	lsrs	r2, r2, #21
 8013d44:	d100      	bne.n	8013d48 <_dtoa_r+0xec>
 8013d46:	e07b      	b.n	8013e40 <_dtoa_r+0x1e4>
 8013d48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013d4a:	9618      	str	r6, [sp, #96]	@ 0x60
 8013d4c:	0319      	lsls	r1, r3, #12
 8013d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8013fc0 <_dtoa_r+0x364>)
 8013d50:	0b09      	lsrs	r1, r1, #12
 8013d52:	430b      	orrs	r3, r1
 8013d54:	499b      	ldr	r1, [pc, #620]	@ (8013fc4 <_dtoa_r+0x368>)
 8013d56:	1857      	adds	r7, r2, r1
 8013d58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013d5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013d5c:	0019      	movs	r1, r3
 8013d5e:	2200      	movs	r2, #0
 8013d60:	4b99      	ldr	r3, [pc, #612]	@ (8013fc8 <_dtoa_r+0x36c>)
 8013d62:	f7ed ff91 	bl	8001c88 <__aeabi_dsub>
 8013d66:	4a99      	ldr	r2, [pc, #612]	@ (8013fcc <_dtoa_r+0x370>)
 8013d68:	4b99      	ldr	r3, [pc, #612]	@ (8013fd0 <_dtoa_r+0x374>)
 8013d6a:	f7ed fca7 	bl	80016bc <__aeabi_dmul>
 8013d6e:	4a99      	ldr	r2, [pc, #612]	@ (8013fd4 <_dtoa_r+0x378>)
 8013d70:	4b99      	ldr	r3, [pc, #612]	@ (8013fd8 <_dtoa_r+0x37c>)
 8013d72:	f7ec fca3 	bl	80006bc <__aeabi_dadd>
 8013d76:	0004      	movs	r4, r0
 8013d78:	0038      	movs	r0, r7
 8013d7a:	000d      	movs	r5, r1
 8013d7c:	f7ee fbec 	bl	8002558 <__aeabi_i2d>
 8013d80:	4a96      	ldr	r2, [pc, #600]	@ (8013fdc <_dtoa_r+0x380>)
 8013d82:	4b97      	ldr	r3, [pc, #604]	@ (8013fe0 <_dtoa_r+0x384>)
 8013d84:	f7ed fc9a 	bl	80016bc <__aeabi_dmul>
 8013d88:	0002      	movs	r2, r0
 8013d8a:	000b      	movs	r3, r1
 8013d8c:	0020      	movs	r0, r4
 8013d8e:	0029      	movs	r1, r5
 8013d90:	f7ec fc94 	bl	80006bc <__aeabi_dadd>
 8013d94:	0004      	movs	r4, r0
 8013d96:	000d      	movs	r5, r1
 8013d98:	f7ee fba2 	bl	80024e0 <__aeabi_d2iz>
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	9004      	str	r0, [sp, #16]
 8013da0:	2300      	movs	r3, #0
 8013da2:	0020      	movs	r0, r4
 8013da4:	0029      	movs	r1, r5
 8013da6:	f7ec fb57 	bl	8000458 <__aeabi_dcmplt>
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d00b      	beq.n	8013dc6 <_dtoa_r+0x16a>
 8013dae:	9804      	ldr	r0, [sp, #16]
 8013db0:	f7ee fbd2 	bl	8002558 <__aeabi_i2d>
 8013db4:	002b      	movs	r3, r5
 8013db6:	0022      	movs	r2, r4
 8013db8:	f7ec fb48 	bl	800044c <__aeabi_dcmpeq>
 8013dbc:	4243      	negs	r3, r0
 8013dbe:	4158      	adcs	r0, r3
 8013dc0:	9b04      	ldr	r3, [sp, #16]
 8013dc2:	1a1b      	subs	r3, r3, r0
 8013dc4:	9304      	str	r3, [sp, #16]
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	9315      	str	r3, [sp, #84]	@ 0x54
 8013dca:	9b04      	ldr	r3, [sp, #16]
 8013dcc:	2b16      	cmp	r3, #22
 8013dce:	d810      	bhi.n	8013df2 <_dtoa_r+0x196>
 8013dd0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013dd2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013dd4:	9a04      	ldr	r2, [sp, #16]
 8013dd6:	4b83      	ldr	r3, [pc, #524]	@ (8013fe4 <_dtoa_r+0x388>)
 8013dd8:	00d2      	lsls	r2, r2, #3
 8013dda:	189b      	adds	r3, r3, r2
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	f7ec fb3a 	bl	8000458 <__aeabi_dcmplt>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d047      	beq.n	8013e78 <_dtoa_r+0x21c>
 8013de8:	9b04      	ldr	r3, [sp, #16]
 8013dea:	3b01      	subs	r3, #1
 8013dec:	9304      	str	r3, [sp, #16]
 8013dee:	2300      	movs	r3, #0
 8013df0:	9315      	str	r3, [sp, #84]	@ 0x54
 8013df2:	2200      	movs	r2, #0
 8013df4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013df6:	9206      	str	r2, [sp, #24]
 8013df8:	1bdb      	subs	r3, r3, r7
 8013dfa:	1e5a      	subs	r2, r3, #1
 8013dfc:	d53e      	bpl.n	8013e7c <_dtoa_r+0x220>
 8013dfe:	2201      	movs	r2, #1
 8013e00:	1ad3      	subs	r3, r2, r3
 8013e02:	9306      	str	r3, [sp, #24]
 8013e04:	2300      	movs	r3, #0
 8013e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8013e08:	9b04      	ldr	r3, [sp, #16]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	db38      	blt.n	8013e80 <_dtoa_r+0x224>
 8013e0e:	9a04      	ldr	r2, [sp, #16]
 8013e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e12:	4694      	mov	ip, r2
 8013e14:	4463      	add	r3, ip
 8013e16:	930d      	str	r3, [sp, #52]	@ 0x34
 8013e18:	2300      	movs	r3, #0
 8013e1a:	9214      	str	r2, [sp, #80]	@ 0x50
 8013e1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e1e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013e20:	2401      	movs	r4, #1
 8013e22:	2b09      	cmp	r3, #9
 8013e24:	d862      	bhi.n	8013eec <_dtoa_r+0x290>
 8013e26:	2b05      	cmp	r3, #5
 8013e28:	dd02      	ble.n	8013e30 <_dtoa_r+0x1d4>
 8013e2a:	2400      	movs	r4, #0
 8013e2c:	3b04      	subs	r3, #4
 8013e2e:	9322      	str	r3, [sp, #136]	@ 0x88
 8013e30:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013e32:	1e98      	subs	r0, r3, #2
 8013e34:	2803      	cmp	r0, #3
 8013e36:	d863      	bhi.n	8013f00 <_dtoa_r+0x2a4>
 8013e38:	f7ec f96e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013e3c:	2b385654 	.word	0x2b385654
 8013e40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013e42:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8013e44:	18f6      	adds	r6, r6, r3
 8013e46:	4b68      	ldr	r3, [pc, #416]	@ (8013fe8 <_dtoa_r+0x38c>)
 8013e48:	18f2      	adds	r2, r6, r3
 8013e4a:	2a20      	cmp	r2, #32
 8013e4c:	dd0f      	ble.n	8013e6e <_dtoa_r+0x212>
 8013e4e:	2340      	movs	r3, #64	@ 0x40
 8013e50:	1a9b      	subs	r3, r3, r2
 8013e52:	409f      	lsls	r7, r3
 8013e54:	4b65      	ldr	r3, [pc, #404]	@ (8013fec <_dtoa_r+0x390>)
 8013e56:	0038      	movs	r0, r7
 8013e58:	18f3      	adds	r3, r6, r3
 8013e5a:	40dc      	lsrs	r4, r3
 8013e5c:	4320      	orrs	r0, r4
 8013e5e:	f7ee fba9 	bl	80025b4 <__aeabi_ui2d>
 8013e62:	2201      	movs	r2, #1
 8013e64:	4b62      	ldr	r3, [pc, #392]	@ (8013ff0 <_dtoa_r+0x394>)
 8013e66:	1e77      	subs	r7, r6, #1
 8013e68:	18cb      	adds	r3, r1, r3
 8013e6a:	9218      	str	r2, [sp, #96]	@ 0x60
 8013e6c:	e776      	b.n	8013d5c <_dtoa_r+0x100>
 8013e6e:	2320      	movs	r3, #32
 8013e70:	0020      	movs	r0, r4
 8013e72:	1a9b      	subs	r3, r3, r2
 8013e74:	4098      	lsls	r0, r3
 8013e76:	e7f2      	b.n	8013e5e <_dtoa_r+0x202>
 8013e78:	9015      	str	r0, [sp, #84]	@ 0x54
 8013e7a:	e7ba      	b.n	8013df2 <_dtoa_r+0x196>
 8013e7c:	920d      	str	r2, [sp, #52]	@ 0x34
 8013e7e:	e7c3      	b.n	8013e08 <_dtoa_r+0x1ac>
 8013e80:	9b06      	ldr	r3, [sp, #24]
 8013e82:	9a04      	ldr	r2, [sp, #16]
 8013e84:	1a9b      	subs	r3, r3, r2
 8013e86:	9306      	str	r3, [sp, #24]
 8013e88:	4253      	negs	r3, r2
 8013e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	9314      	str	r3, [sp, #80]	@ 0x50
 8013e90:	e7c5      	b.n	8013e1e <_dtoa_r+0x1c2>
 8013e92:	2301      	movs	r3, #1
 8013e94:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013e96:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e98:	4694      	mov	ip, r2
 8013e9a:	9b04      	ldr	r3, [sp, #16]
 8013e9c:	4463      	add	r3, ip
 8013e9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	dc08      	bgt.n	8013eba <_dtoa_r+0x25e>
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	e006      	b.n	8013eba <_dtoa_r+0x25e>
 8013eac:	2301      	movs	r3, #1
 8013eae:	9310      	str	r3, [sp, #64]	@ 0x40
 8013eb0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	dd28      	ble.n	8013f08 <_dtoa_r+0x2ac>
 8013eb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8013eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013eba:	9a03      	ldr	r2, [sp, #12]
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	69d0      	ldr	r0, [r2, #28]
 8013ec0:	2204      	movs	r2, #4
 8013ec2:	0015      	movs	r5, r2
 8013ec4:	3514      	adds	r5, #20
 8013ec6:	429d      	cmp	r5, r3
 8013ec8:	d923      	bls.n	8013f12 <_dtoa_r+0x2b6>
 8013eca:	6041      	str	r1, [r0, #4]
 8013ecc:	9803      	ldr	r0, [sp, #12]
 8013ece:	f000 fdbb 	bl	8014a48 <_Balloc>
 8013ed2:	9008      	str	r0, [sp, #32]
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	d11f      	bne.n	8013f18 <_dtoa_r+0x2bc>
 8013ed8:	21b0      	movs	r1, #176	@ 0xb0
 8013eda:	4b46      	ldr	r3, [pc, #280]	@ (8013ff4 <_dtoa_r+0x398>)
 8013edc:	4831      	ldr	r0, [pc, #196]	@ (8013fa4 <_dtoa_r+0x348>)
 8013ede:	9a08      	ldr	r2, [sp, #32]
 8013ee0:	31ff      	adds	r1, #255	@ 0xff
 8013ee2:	e6d0      	b.n	8013c86 <_dtoa_r+0x2a>
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	e7e2      	b.n	8013eae <_dtoa_r+0x252>
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e7d3      	b.n	8013e94 <_dtoa_r+0x238>
 8013eec:	2300      	movs	r3, #0
 8013eee:	9410      	str	r4, [sp, #64]	@ 0x40
 8013ef0:	9322      	str	r3, [sp, #136]	@ 0x88
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	930e      	str	r3, [sp, #56]	@ 0x38
 8013ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013efa:	3313      	adds	r3, #19
 8013efc:	9223      	str	r2, [sp, #140]	@ 0x8c
 8013efe:	e7dc      	b.n	8013eba <_dtoa_r+0x25e>
 8013f00:	2301      	movs	r3, #1
 8013f02:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f04:	3b02      	subs	r3, #2
 8013f06:	e7f5      	b.n	8013ef4 <_dtoa_r+0x298>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	001a      	movs	r2, r3
 8013f0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8013f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f10:	e7f4      	b.n	8013efc <_dtoa_r+0x2a0>
 8013f12:	3101      	adds	r1, #1
 8013f14:	0052      	lsls	r2, r2, #1
 8013f16:	e7d4      	b.n	8013ec2 <_dtoa_r+0x266>
 8013f18:	9b03      	ldr	r3, [sp, #12]
 8013f1a:	9a08      	ldr	r2, [sp, #32]
 8013f1c:	69db      	ldr	r3, [r3, #28]
 8013f1e:	601a      	str	r2, [r3, #0]
 8013f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f22:	2b0e      	cmp	r3, #14
 8013f24:	d900      	bls.n	8013f28 <_dtoa_r+0x2cc>
 8013f26:	e0d6      	b.n	80140d6 <_dtoa_r+0x47a>
 8013f28:	2c00      	cmp	r4, #0
 8013f2a:	d100      	bne.n	8013f2e <_dtoa_r+0x2d2>
 8013f2c:	e0d3      	b.n	80140d6 <_dtoa_r+0x47a>
 8013f2e:	9b04      	ldr	r3, [sp, #16]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	dd63      	ble.n	8013ffc <_dtoa_r+0x3a0>
 8013f34:	210f      	movs	r1, #15
 8013f36:	9a04      	ldr	r2, [sp, #16]
 8013f38:	4b2a      	ldr	r3, [pc, #168]	@ (8013fe4 <_dtoa_r+0x388>)
 8013f3a:	400a      	ands	r2, r1
 8013f3c:	00d2      	lsls	r2, r2, #3
 8013f3e:	189b      	adds	r3, r3, r2
 8013f40:	681e      	ldr	r6, [r3, #0]
 8013f42:	685f      	ldr	r7, [r3, #4]
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	2402      	movs	r4, #2
 8013f48:	111d      	asrs	r5, r3, #4
 8013f4a:	05db      	lsls	r3, r3, #23
 8013f4c:	d50a      	bpl.n	8013f64 <_dtoa_r+0x308>
 8013f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8013ff8 <_dtoa_r+0x39c>)
 8013f50:	400d      	ands	r5, r1
 8013f52:	6a1a      	ldr	r2, [r3, #32]
 8013f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f56:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013f58:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013f5a:	f7ec ff75 	bl	8000e48 <__aeabi_ddiv>
 8013f5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013f60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013f62:	3401      	adds	r4, #1
 8013f64:	4b24      	ldr	r3, [pc, #144]	@ (8013ff8 <_dtoa_r+0x39c>)
 8013f66:	930c      	str	r3, [sp, #48]	@ 0x30
 8013f68:	2d00      	cmp	r5, #0
 8013f6a:	d108      	bne.n	8013f7e <_dtoa_r+0x322>
 8013f6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013f6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f70:	0032      	movs	r2, r6
 8013f72:	003b      	movs	r3, r7
 8013f74:	f7ec ff68 	bl	8000e48 <__aeabi_ddiv>
 8013f78:	900a      	str	r0, [sp, #40]	@ 0x28
 8013f7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013f7c:	e059      	b.n	8014032 <_dtoa_r+0x3d6>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	421d      	tst	r5, r3
 8013f82:	d009      	beq.n	8013f98 <_dtoa_r+0x33c>
 8013f84:	18e4      	adds	r4, r4, r3
 8013f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f88:	0030      	movs	r0, r6
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	0039      	movs	r1, r7
 8013f90:	f7ed fb94 	bl	80016bc <__aeabi_dmul>
 8013f94:	0006      	movs	r6, r0
 8013f96:	000f      	movs	r7, r1
 8013f98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f9a:	106d      	asrs	r5, r5, #1
 8013f9c:	3308      	adds	r3, #8
 8013f9e:	e7e2      	b.n	8013f66 <_dtoa_r+0x30a>
 8013fa0:	08015d71 	.word	0x08015d71
 8013fa4:	08015d88 	.word	0x08015d88
 8013fa8:	7ff00000 	.word	0x7ff00000
 8013fac:	0000270f 	.word	0x0000270f
 8013fb0:	08015d6d 	.word	0x08015d6d
 8013fb4:	08015d70 	.word	0x08015d70
 8013fb8:	08015d41 	.word	0x08015d41
 8013fbc:	08015d40 	.word	0x08015d40
 8013fc0:	3ff00000 	.word	0x3ff00000
 8013fc4:	fffffc01 	.word	0xfffffc01
 8013fc8:	3ff80000 	.word	0x3ff80000
 8013fcc:	636f4361 	.word	0x636f4361
 8013fd0:	3fd287a7 	.word	0x3fd287a7
 8013fd4:	8b60c8b3 	.word	0x8b60c8b3
 8013fd8:	3fc68a28 	.word	0x3fc68a28
 8013fdc:	509f79fb 	.word	0x509f79fb
 8013fe0:	3fd34413 	.word	0x3fd34413
 8013fe4:	08015ed8 	.word	0x08015ed8
 8013fe8:	00000432 	.word	0x00000432
 8013fec:	00000412 	.word	0x00000412
 8013ff0:	fe100000 	.word	0xfe100000
 8013ff4:	08015de0 	.word	0x08015de0
 8013ff8:	08015eb0 	.word	0x08015eb0
 8013ffc:	9b04      	ldr	r3, [sp, #16]
 8013ffe:	2402      	movs	r4, #2
 8014000:	2b00      	cmp	r3, #0
 8014002:	d016      	beq.n	8014032 <_dtoa_r+0x3d6>
 8014004:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014006:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014008:	220f      	movs	r2, #15
 801400a:	425d      	negs	r5, r3
 801400c:	402a      	ands	r2, r5
 801400e:	4bd5      	ldr	r3, [pc, #852]	@ (8014364 <_dtoa_r+0x708>)
 8014010:	00d2      	lsls	r2, r2, #3
 8014012:	189b      	adds	r3, r3, r2
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	685b      	ldr	r3, [r3, #4]
 8014018:	f7ed fb50 	bl	80016bc <__aeabi_dmul>
 801401c:	2701      	movs	r7, #1
 801401e:	2300      	movs	r3, #0
 8014020:	900a      	str	r0, [sp, #40]	@ 0x28
 8014022:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014024:	4ed0      	ldr	r6, [pc, #832]	@ (8014368 <_dtoa_r+0x70c>)
 8014026:	112d      	asrs	r5, r5, #4
 8014028:	2d00      	cmp	r5, #0
 801402a:	d000      	beq.n	801402e <_dtoa_r+0x3d2>
 801402c:	e095      	b.n	801415a <_dtoa_r+0x4fe>
 801402e:	2b00      	cmp	r3, #0
 8014030:	d1a2      	bne.n	8013f78 <_dtoa_r+0x31c>
 8014032:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8014034:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014036:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014038:	2b00      	cmp	r3, #0
 801403a:	d100      	bne.n	801403e <_dtoa_r+0x3e2>
 801403c:	e098      	b.n	8014170 <_dtoa_r+0x514>
 801403e:	2200      	movs	r2, #0
 8014040:	0030      	movs	r0, r6
 8014042:	0039      	movs	r1, r7
 8014044:	4bc9      	ldr	r3, [pc, #804]	@ (801436c <_dtoa_r+0x710>)
 8014046:	f7ec fa07 	bl	8000458 <__aeabi_dcmplt>
 801404a:	2800      	cmp	r0, #0
 801404c:	d100      	bne.n	8014050 <_dtoa_r+0x3f4>
 801404e:	e08f      	b.n	8014170 <_dtoa_r+0x514>
 8014050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014052:	2b00      	cmp	r3, #0
 8014054:	d100      	bne.n	8014058 <_dtoa_r+0x3fc>
 8014056:	e08b      	b.n	8014170 <_dtoa_r+0x514>
 8014058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801405a:	2b00      	cmp	r3, #0
 801405c:	dd37      	ble.n	80140ce <_dtoa_r+0x472>
 801405e:	9b04      	ldr	r3, [sp, #16]
 8014060:	2200      	movs	r2, #0
 8014062:	3b01      	subs	r3, #1
 8014064:	930c      	str	r3, [sp, #48]	@ 0x30
 8014066:	0030      	movs	r0, r6
 8014068:	4bc1      	ldr	r3, [pc, #772]	@ (8014370 <_dtoa_r+0x714>)
 801406a:	0039      	movs	r1, r7
 801406c:	f7ed fb26 	bl	80016bc <__aeabi_dmul>
 8014070:	900a      	str	r0, [sp, #40]	@ 0x28
 8014072:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014076:	3401      	adds	r4, #1
 8014078:	0020      	movs	r0, r4
 801407a:	9311      	str	r3, [sp, #68]	@ 0x44
 801407c:	f7ee fa6c 	bl	8002558 <__aeabi_i2d>
 8014080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014084:	f7ed fb1a 	bl	80016bc <__aeabi_dmul>
 8014088:	4bba      	ldr	r3, [pc, #744]	@ (8014374 <_dtoa_r+0x718>)
 801408a:	2200      	movs	r2, #0
 801408c:	f7ec fb16 	bl	80006bc <__aeabi_dadd>
 8014090:	4bb9      	ldr	r3, [pc, #740]	@ (8014378 <_dtoa_r+0x71c>)
 8014092:	0006      	movs	r6, r0
 8014094:	18cf      	adds	r7, r1, r3
 8014096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014098:	2b00      	cmp	r3, #0
 801409a:	d16d      	bne.n	8014178 <_dtoa_r+0x51c>
 801409c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801409e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140a0:	2200      	movs	r2, #0
 80140a2:	4bb6      	ldr	r3, [pc, #728]	@ (801437c <_dtoa_r+0x720>)
 80140a4:	f7ed fdf0 	bl	8001c88 <__aeabi_dsub>
 80140a8:	0032      	movs	r2, r6
 80140aa:	003b      	movs	r3, r7
 80140ac:	0004      	movs	r4, r0
 80140ae:	000d      	movs	r5, r1
 80140b0:	f7ec f9e6 	bl	8000480 <__aeabi_dcmpgt>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d000      	beq.n	80140ba <_dtoa_r+0x45e>
 80140b8:	e2b6      	b.n	8014628 <_dtoa_r+0x9cc>
 80140ba:	2180      	movs	r1, #128	@ 0x80
 80140bc:	0609      	lsls	r1, r1, #24
 80140be:	187b      	adds	r3, r7, r1
 80140c0:	0032      	movs	r2, r6
 80140c2:	0020      	movs	r0, r4
 80140c4:	0029      	movs	r1, r5
 80140c6:	f7ec f9c7 	bl	8000458 <__aeabi_dcmplt>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d128      	bne.n	8014120 <_dtoa_r+0x4c4>
 80140ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80140d0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80140d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80140d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80140d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80140d8:	2b00      	cmp	r3, #0
 80140da:	da00      	bge.n	80140de <_dtoa_r+0x482>
 80140dc:	e174      	b.n	80143c8 <_dtoa_r+0x76c>
 80140de:	9a04      	ldr	r2, [sp, #16]
 80140e0:	2a0e      	cmp	r2, #14
 80140e2:	dd00      	ble.n	80140e6 <_dtoa_r+0x48a>
 80140e4:	e170      	b.n	80143c8 <_dtoa_r+0x76c>
 80140e6:	4b9f      	ldr	r3, [pc, #636]	@ (8014364 <_dtoa_r+0x708>)
 80140e8:	00d2      	lsls	r2, r2, #3
 80140ea:	189b      	adds	r3, r3, r2
 80140ec:	685c      	ldr	r4, [r3, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	9306      	str	r3, [sp, #24]
 80140f2:	9407      	str	r4, [sp, #28]
 80140f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	db00      	blt.n	80140fc <_dtoa_r+0x4a0>
 80140fa:	e0e7      	b.n	80142cc <_dtoa_r+0x670>
 80140fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140fe:	2b00      	cmp	r3, #0
 8014100:	dd00      	ble.n	8014104 <_dtoa_r+0x4a8>
 8014102:	e0e3      	b.n	80142cc <_dtoa_r+0x670>
 8014104:	d10c      	bne.n	8014120 <_dtoa_r+0x4c4>
 8014106:	9806      	ldr	r0, [sp, #24]
 8014108:	9907      	ldr	r1, [sp, #28]
 801410a:	2200      	movs	r2, #0
 801410c:	4b9b      	ldr	r3, [pc, #620]	@ (801437c <_dtoa_r+0x720>)
 801410e:	f7ed fad5 	bl	80016bc <__aeabi_dmul>
 8014112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014116:	f7ec f9bd 	bl	8000494 <__aeabi_dcmpge>
 801411a:	2800      	cmp	r0, #0
 801411c:	d100      	bne.n	8014120 <_dtoa_r+0x4c4>
 801411e:	e286      	b.n	801462e <_dtoa_r+0x9d2>
 8014120:	2600      	movs	r6, #0
 8014122:	0037      	movs	r7, r6
 8014124:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014126:	9c08      	ldr	r4, [sp, #32]
 8014128:	43db      	mvns	r3, r3
 801412a:	930c      	str	r3, [sp, #48]	@ 0x30
 801412c:	9704      	str	r7, [sp, #16]
 801412e:	2700      	movs	r7, #0
 8014130:	0031      	movs	r1, r6
 8014132:	9803      	ldr	r0, [sp, #12]
 8014134:	f000 fccc 	bl	8014ad0 <_Bfree>
 8014138:	9b04      	ldr	r3, [sp, #16]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d100      	bne.n	8014140 <_dtoa_r+0x4e4>
 801413e:	e0bb      	b.n	80142b8 <_dtoa_r+0x65c>
 8014140:	2f00      	cmp	r7, #0
 8014142:	d005      	beq.n	8014150 <_dtoa_r+0x4f4>
 8014144:	429f      	cmp	r7, r3
 8014146:	d003      	beq.n	8014150 <_dtoa_r+0x4f4>
 8014148:	0039      	movs	r1, r7
 801414a:	9803      	ldr	r0, [sp, #12]
 801414c:	f000 fcc0 	bl	8014ad0 <_Bfree>
 8014150:	9904      	ldr	r1, [sp, #16]
 8014152:	9803      	ldr	r0, [sp, #12]
 8014154:	f000 fcbc 	bl	8014ad0 <_Bfree>
 8014158:	e0ae      	b.n	80142b8 <_dtoa_r+0x65c>
 801415a:	423d      	tst	r5, r7
 801415c:	d005      	beq.n	801416a <_dtoa_r+0x50e>
 801415e:	6832      	ldr	r2, [r6, #0]
 8014160:	6873      	ldr	r3, [r6, #4]
 8014162:	f7ed faab 	bl	80016bc <__aeabi_dmul>
 8014166:	003b      	movs	r3, r7
 8014168:	3401      	adds	r4, #1
 801416a:	106d      	asrs	r5, r5, #1
 801416c:	3608      	adds	r6, #8
 801416e:	e75b      	b.n	8014028 <_dtoa_r+0x3cc>
 8014170:	9b04      	ldr	r3, [sp, #16]
 8014172:	930c      	str	r3, [sp, #48]	@ 0x30
 8014174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014176:	e77f      	b.n	8014078 <_dtoa_r+0x41c>
 8014178:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801417a:	4b7a      	ldr	r3, [pc, #488]	@ (8014364 <_dtoa_r+0x708>)
 801417c:	3a01      	subs	r2, #1
 801417e:	00d2      	lsls	r2, r2, #3
 8014180:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014182:	189b      	adds	r3, r3, r2
 8014184:	681a      	ldr	r2, [r3, #0]
 8014186:	685b      	ldr	r3, [r3, #4]
 8014188:	2900      	cmp	r1, #0
 801418a:	d04c      	beq.n	8014226 <_dtoa_r+0x5ca>
 801418c:	2000      	movs	r0, #0
 801418e:	497c      	ldr	r1, [pc, #496]	@ (8014380 <_dtoa_r+0x724>)
 8014190:	f7ec fe5a 	bl	8000e48 <__aeabi_ddiv>
 8014194:	0032      	movs	r2, r6
 8014196:	003b      	movs	r3, r7
 8014198:	f7ed fd76 	bl	8001c88 <__aeabi_dsub>
 801419c:	9a08      	ldr	r2, [sp, #32]
 801419e:	0006      	movs	r6, r0
 80141a0:	4694      	mov	ip, r2
 80141a2:	000f      	movs	r7, r1
 80141a4:	9b08      	ldr	r3, [sp, #32]
 80141a6:	9316      	str	r3, [sp, #88]	@ 0x58
 80141a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80141aa:	4463      	add	r3, ip
 80141ac:	9311      	str	r3, [sp, #68]	@ 0x44
 80141ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80141b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80141b2:	f7ee f995 	bl	80024e0 <__aeabi_d2iz>
 80141b6:	0005      	movs	r5, r0
 80141b8:	f7ee f9ce 	bl	8002558 <__aeabi_i2d>
 80141bc:	0002      	movs	r2, r0
 80141be:	000b      	movs	r3, r1
 80141c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80141c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80141c4:	f7ed fd60 	bl	8001c88 <__aeabi_dsub>
 80141c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80141ca:	3530      	adds	r5, #48	@ 0x30
 80141cc:	1c5c      	adds	r4, r3, #1
 80141ce:	701d      	strb	r5, [r3, #0]
 80141d0:	0032      	movs	r2, r6
 80141d2:	003b      	movs	r3, r7
 80141d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80141d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80141d8:	f7ec f93e 	bl	8000458 <__aeabi_dcmplt>
 80141dc:	2800      	cmp	r0, #0
 80141de:	d16b      	bne.n	80142b8 <_dtoa_r+0x65c>
 80141e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141e4:	2000      	movs	r0, #0
 80141e6:	4961      	ldr	r1, [pc, #388]	@ (801436c <_dtoa_r+0x710>)
 80141e8:	f7ed fd4e 	bl	8001c88 <__aeabi_dsub>
 80141ec:	0032      	movs	r2, r6
 80141ee:	003b      	movs	r3, r7
 80141f0:	f7ec f932 	bl	8000458 <__aeabi_dcmplt>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d000      	beq.n	80141fa <_dtoa_r+0x59e>
 80141f8:	e0c6      	b.n	8014388 <_dtoa_r+0x72c>
 80141fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80141fc:	42a3      	cmp	r3, r4
 80141fe:	d100      	bne.n	8014202 <_dtoa_r+0x5a6>
 8014200:	e765      	b.n	80140ce <_dtoa_r+0x472>
 8014202:	2200      	movs	r2, #0
 8014204:	0030      	movs	r0, r6
 8014206:	0039      	movs	r1, r7
 8014208:	4b59      	ldr	r3, [pc, #356]	@ (8014370 <_dtoa_r+0x714>)
 801420a:	f7ed fa57 	bl	80016bc <__aeabi_dmul>
 801420e:	2200      	movs	r2, #0
 8014210:	0006      	movs	r6, r0
 8014212:	000f      	movs	r7, r1
 8014214:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014216:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014218:	4b55      	ldr	r3, [pc, #340]	@ (8014370 <_dtoa_r+0x714>)
 801421a:	f7ed fa4f 	bl	80016bc <__aeabi_dmul>
 801421e:	9416      	str	r4, [sp, #88]	@ 0x58
 8014220:	900a      	str	r0, [sp, #40]	@ 0x28
 8014222:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014224:	e7c3      	b.n	80141ae <_dtoa_r+0x552>
 8014226:	0030      	movs	r0, r6
 8014228:	0039      	movs	r1, r7
 801422a:	f7ed fa47 	bl	80016bc <__aeabi_dmul>
 801422e:	9d08      	ldr	r5, [sp, #32]
 8014230:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014232:	002b      	movs	r3, r5
 8014234:	4694      	mov	ip, r2
 8014236:	9016      	str	r0, [sp, #88]	@ 0x58
 8014238:	9117      	str	r1, [sp, #92]	@ 0x5c
 801423a:	4463      	add	r3, ip
 801423c:	9319      	str	r3, [sp, #100]	@ 0x64
 801423e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014240:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014242:	f7ee f94d 	bl	80024e0 <__aeabi_d2iz>
 8014246:	0004      	movs	r4, r0
 8014248:	f7ee f986 	bl	8002558 <__aeabi_i2d>
 801424c:	000b      	movs	r3, r1
 801424e:	0002      	movs	r2, r0
 8014250:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014252:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014254:	f7ed fd18 	bl	8001c88 <__aeabi_dsub>
 8014258:	3430      	adds	r4, #48	@ 0x30
 801425a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801425c:	702c      	strb	r4, [r5, #0]
 801425e:	3501      	adds	r5, #1
 8014260:	0006      	movs	r6, r0
 8014262:	000f      	movs	r7, r1
 8014264:	42ab      	cmp	r3, r5
 8014266:	d12a      	bne.n	80142be <_dtoa_r+0x662>
 8014268:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801426a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801426c:	9b08      	ldr	r3, [sp, #32]
 801426e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8014270:	469c      	mov	ip, r3
 8014272:	2200      	movs	r2, #0
 8014274:	4b42      	ldr	r3, [pc, #264]	@ (8014380 <_dtoa_r+0x724>)
 8014276:	4464      	add	r4, ip
 8014278:	f7ec fa20 	bl	80006bc <__aeabi_dadd>
 801427c:	0002      	movs	r2, r0
 801427e:	000b      	movs	r3, r1
 8014280:	0030      	movs	r0, r6
 8014282:	0039      	movs	r1, r7
 8014284:	f7ec f8fc 	bl	8000480 <__aeabi_dcmpgt>
 8014288:	2800      	cmp	r0, #0
 801428a:	d000      	beq.n	801428e <_dtoa_r+0x632>
 801428c:	e07c      	b.n	8014388 <_dtoa_r+0x72c>
 801428e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8014290:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014292:	2000      	movs	r0, #0
 8014294:	493a      	ldr	r1, [pc, #232]	@ (8014380 <_dtoa_r+0x724>)
 8014296:	f7ed fcf7 	bl	8001c88 <__aeabi_dsub>
 801429a:	0002      	movs	r2, r0
 801429c:	000b      	movs	r3, r1
 801429e:	0030      	movs	r0, r6
 80142a0:	0039      	movs	r1, r7
 80142a2:	f7ec f8d9 	bl	8000458 <__aeabi_dcmplt>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d100      	bne.n	80142ac <_dtoa_r+0x650>
 80142aa:	e710      	b.n	80140ce <_dtoa_r+0x472>
 80142ac:	0023      	movs	r3, r4
 80142ae:	3c01      	subs	r4, #1
 80142b0:	7822      	ldrb	r2, [r4, #0]
 80142b2:	2a30      	cmp	r2, #48	@ 0x30
 80142b4:	d0fa      	beq.n	80142ac <_dtoa_r+0x650>
 80142b6:	001c      	movs	r4, r3
 80142b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142ba:	9304      	str	r3, [sp, #16]
 80142bc:	e042      	b.n	8014344 <_dtoa_r+0x6e8>
 80142be:	2200      	movs	r2, #0
 80142c0:	4b2b      	ldr	r3, [pc, #172]	@ (8014370 <_dtoa_r+0x714>)
 80142c2:	f7ed f9fb 	bl	80016bc <__aeabi_dmul>
 80142c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80142c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80142ca:	e7b8      	b.n	801423e <_dtoa_r+0x5e2>
 80142cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142ce:	9d08      	ldr	r5, [sp, #32]
 80142d0:	3b01      	subs	r3, #1
 80142d2:	195b      	adds	r3, r3, r5
 80142d4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80142d6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80142d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80142da:	9a06      	ldr	r2, [sp, #24]
 80142dc:	9b07      	ldr	r3, [sp, #28]
 80142de:	0030      	movs	r0, r6
 80142e0:	0039      	movs	r1, r7
 80142e2:	f7ec fdb1 	bl	8000e48 <__aeabi_ddiv>
 80142e6:	f7ee f8fb 	bl	80024e0 <__aeabi_d2iz>
 80142ea:	9009      	str	r0, [sp, #36]	@ 0x24
 80142ec:	f7ee f934 	bl	8002558 <__aeabi_i2d>
 80142f0:	9a06      	ldr	r2, [sp, #24]
 80142f2:	9b07      	ldr	r3, [sp, #28]
 80142f4:	f7ed f9e2 	bl	80016bc <__aeabi_dmul>
 80142f8:	0002      	movs	r2, r0
 80142fa:	000b      	movs	r3, r1
 80142fc:	0030      	movs	r0, r6
 80142fe:	0039      	movs	r1, r7
 8014300:	f7ed fcc2 	bl	8001c88 <__aeabi_dsub>
 8014304:	002b      	movs	r3, r5
 8014306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014308:	3501      	adds	r5, #1
 801430a:	3230      	adds	r2, #48	@ 0x30
 801430c:	701a      	strb	r2, [r3, #0]
 801430e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014310:	002c      	movs	r4, r5
 8014312:	429a      	cmp	r2, r3
 8014314:	d14b      	bne.n	80143ae <_dtoa_r+0x752>
 8014316:	0002      	movs	r2, r0
 8014318:	000b      	movs	r3, r1
 801431a:	f7ec f9cf 	bl	80006bc <__aeabi_dadd>
 801431e:	9a06      	ldr	r2, [sp, #24]
 8014320:	9b07      	ldr	r3, [sp, #28]
 8014322:	0006      	movs	r6, r0
 8014324:	000f      	movs	r7, r1
 8014326:	f7ec f8ab 	bl	8000480 <__aeabi_dcmpgt>
 801432a:	2800      	cmp	r0, #0
 801432c:	d12a      	bne.n	8014384 <_dtoa_r+0x728>
 801432e:	9a06      	ldr	r2, [sp, #24]
 8014330:	9b07      	ldr	r3, [sp, #28]
 8014332:	0030      	movs	r0, r6
 8014334:	0039      	movs	r1, r7
 8014336:	f7ec f889 	bl	800044c <__aeabi_dcmpeq>
 801433a:	2800      	cmp	r0, #0
 801433c:	d002      	beq.n	8014344 <_dtoa_r+0x6e8>
 801433e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014340:	07dd      	lsls	r5, r3, #31
 8014342:	d41f      	bmi.n	8014384 <_dtoa_r+0x728>
 8014344:	9905      	ldr	r1, [sp, #20]
 8014346:	9803      	ldr	r0, [sp, #12]
 8014348:	f000 fbc2 	bl	8014ad0 <_Bfree>
 801434c:	2300      	movs	r3, #0
 801434e:	7023      	strb	r3, [r4, #0]
 8014350:	9b04      	ldr	r3, [sp, #16]
 8014352:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8014354:	3301      	adds	r3, #1
 8014356:	6013      	str	r3, [r2, #0]
 8014358:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801435a:	2b00      	cmp	r3, #0
 801435c:	d100      	bne.n	8014360 <_dtoa_r+0x704>
 801435e:	e4c7      	b.n	8013cf0 <_dtoa_r+0x94>
 8014360:	601c      	str	r4, [r3, #0]
 8014362:	e4c5      	b.n	8013cf0 <_dtoa_r+0x94>
 8014364:	08015ed8 	.word	0x08015ed8
 8014368:	08015eb0 	.word	0x08015eb0
 801436c:	3ff00000 	.word	0x3ff00000
 8014370:	40240000 	.word	0x40240000
 8014374:	401c0000 	.word	0x401c0000
 8014378:	fcc00000 	.word	0xfcc00000
 801437c:	40140000 	.word	0x40140000
 8014380:	3fe00000 	.word	0x3fe00000
 8014384:	9b04      	ldr	r3, [sp, #16]
 8014386:	930c      	str	r3, [sp, #48]	@ 0x30
 8014388:	0023      	movs	r3, r4
 801438a:	001c      	movs	r4, r3
 801438c:	3b01      	subs	r3, #1
 801438e:	781a      	ldrb	r2, [r3, #0]
 8014390:	2a39      	cmp	r2, #57	@ 0x39
 8014392:	d108      	bne.n	80143a6 <_dtoa_r+0x74a>
 8014394:	9a08      	ldr	r2, [sp, #32]
 8014396:	429a      	cmp	r2, r3
 8014398:	d1f7      	bne.n	801438a <_dtoa_r+0x72e>
 801439a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801439c:	9908      	ldr	r1, [sp, #32]
 801439e:	3201      	adds	r2, #1
 80143a0:	920c      	str	r2, [sp, #48]	@ 0x30
 80143a2:	2230      	movs	r2, #48	@ 0x30
 80143a4:	700a      	strb	r2, [r1, #0]
 80143a6:	781a      	ldrb	r2, [r3, #0]
 80143a8:	3201      	adds	r2, #1
 80143aa:	701a      	strb	r2, [r3, #0]
 80143ac:	e784      	b.n	80142b8 <_dtoa_r+0x65c>
 80143ae:	2200      	movs	r2, #0
 80143b0:	4bc6      	ldr	r3, [pc, #792]	@ (80146cc <_dtoa_r+0xa70>)
 80143b2:	f7ed f983 	bl	80016bc <__aeabi_dmul>
 80143b6:	2200      	movs	r2, #0
 80143b8:	2300      	movs	r3, #0
 80143ba:	0006      	movs	r6, r0
 80143bc:	000f      	movs	r7, r1
 80143be:	f7ec f845 	bl	800044c <__aeabi_dcmpeq>
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d089      	beq.n	80142da <_dtoa_r+0x67e>
 80143c6:	e7bd      	b.n	8014344 <_dtoa_r+0x6e8>
 80143c8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80143ca:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80143cc:	9c06      	ldr	r4, [sp, #24]
 80143ce:	2f00      	cmp	r7, #0
 80143d0:	d014      	beq.n	80143fc <_dtoa_r+0x7a0>
 80143d2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80143d4:	2a01      	cmp	r2, #1
 80143d6:	dd00      	ble.n	80143da <_dtoa_r+0x77e>
 80143d8:	e0e4      	b.n	80145a4 <_dtoa_r+0x948>
 80143da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80143dc:	2a00      	cmp	r2, #0
 80143de:	d100      	bne.n	80143e2 <_dtoa_r+0x786>
 80143e0:	e0da      	b.n	8014598 <_dtoa_r+0x93c>
 80143e2:	4abb      	ldr	r2, [pc, #748]	@ (80146d0 <_dtoa_r+0xa74>)
 80143e4:	189b      	adds	r3, r3, r2
 80143e6:	9a06      	ldr	r2, [sp, #24]
 80143e8:	2101      	movs	r1, #1
 80143ea:	18d2      	adds	r2, r2, r3
 80143ec:	9206      	str	r2, [sp, #24]
 80143ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80143f0:	9803      	ldr	r0, [sp, #12]
 80143f2:	18d3      	adds	r3, r2, r3
 80143f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80143f6:	f000 fc23 	bl	8014c40 <__i2b>
 80143fa:	0007      	movs	r7, r0
 80143fc:	2c00      	cmp	r4, #0
 80143fe:	d00e      	beq.n	801441e <_dtoa_r+0x7c2>
 8014400:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014402:	2b00      	cmp	r3, #0
 8014404:	dd0b      	ble.n	801441e <_dtoa_r+0x7c2>
 8014406:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014408:	0023      	movs	r3, r4
 801440a:	4294      	cmp	r4, r2
 801440c:	dd00      	ble.n	8014410 <_dtoa_r+0x7b4>
 801440e:	0013      	movs	r3, r2
 8014410:	9a06      	ldr	r2, [sp, #24]
 8014412:	1ae4      	subs	r4, r4, r3
 8014414:	1ad2      	subs	r2, r2, r3
 8014416:	9206      	str	r2, [sp, #24]
 8014418:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801441a:	1ad3      	subs	r3, r2, r3
 801441c:	930d      	str	r3, [sp, #52]	@ 0x34
 801441e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014420:	2b00      	cmp	r3, #0
 8014422:	d021      	beq.n	8014468 <_dtoa_r+0x80c>
 8014424:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014426:	2b00      	cmp	r3, #0
 8014428:	d100      	bne.n	801442c <_dtoa_r+0x7d0>
 801442a:	e0d3      	b.n	80145d4 <_dtoa_r+0x978>
 801442c:	9e05      	ldr	r6, [sp, #20]
 801442e:	2d00      	cmp	r5, #0
 8014430:	d014      	beq.n	801445c <_dtoa_r+0x800>
 8014432:	0039      	movs	r1, r7
 8014434:	002a      	movs	r2, r5
 8014436:	9803      	ldr	r0, [sp, #12]
 8014438:	f000 fcc4 	bl	8014dc4 <__pow5mult>
 801443c:	9a05      	ldr	r2, [sp, #20]
 801443e:	0001      	movs	r1, r0
 8014440:	0007      	movs	r7, r0
 8014442:	9803      	ldr	r0, [sp, #12]
 8014444:	f000 fc14 	bl	8014c70 <__multiply>
 8014448:	0006      	movs	r6, r0
 801444a:	9905      	ldr	r1, [sp, #20]
 801444c:	9803      	ldr	r0, [sp, #12]
 801444e:	f000 fb3f 	bl	8014ad0 <_Bfree>
 8014452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014454:	9605      	str	r6, [sp, #20]
 8014456:	1b5b      	subs	r3, r3, r5
 8014458:	930f      	str	r3, [sp, #60]	@ 0x3c
 801445a:	d005      	beq.n	8014468 <_dtoa_r+0x80c>
 801445c:	0031      	movs	r1, r6
 801445e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014460:	9803      	ldr	r0, [sp, #12]
 8014462:	f000 fcaf 	bl	8014dc4 <__pow5mult>
 8014466:	9005      	str	r0, [sp, #20]
 8014468:	2101      	movs	r1, #1
 801446a:	9803      	ldr	r0, [sp, #12]
 801446c:	f000 fbe8 	bl	8014c40 <__i2b>
 8014470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014472:	0006      	movs	r6, r0
 8014474:	2b00      	cmp	r3, #0
 8014476:	d100      	bne.n	801447a <_dtoa_r+0x81e>
 8014478:	e1bc      	b.n	80147f4 <_dtoa_r+0xb98>
 801447a:	001a      	movs	r2, r3
 801447c:	0001      	movs	r1, r0
 801447e:	9803      	ldr	r0, [sp, #12]
 8014480:	f000 fca0 	bl	8014dc4 <__pow5mult>
 8014484:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014486:	0006      	movs	r6, r0
 8014488:	2500      	movs	r5, #0
 801448a:	2b01      	cmp	r3, #1
 801448c:	dc16      	bgt.n	80144bc <_dtoa_r+0x860>
 801448e:	2500      	movs	r5, #0
 8014490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014492:	42ab      	cmp	r3, r5
 8014494:	d10e      	bne.n	80144b4 <_dtoa_r+0x858>
 8014496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014498:	031b      	lsls	r3, r3, #12
 801449a:	42ab      	cmp	r3, r5
 801449c:	d10a      	bne.n	80144b4 <_dtoa_r+0x858>
 801449e:	4b8d      	ldr	r3, [pc, #564]	@ (80146d4 <_dtoa_r+0xa78>)
 80144a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80144a2:	4213      	tst	r3, r2
 80144a4:	d006      	beq.n	80144b4 <_dtoa_r+0x858>
 80144a6:	9b06      	ldr	r3, [sp, #24]
 80144a8:	3501      	adds	r5, #1
 80144aa:	3301      	adds	r3, #1
 80144ac:	9306      	str	r3, [sp, #24]
 80144ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144b0:	3301      	adds	r3, #1
 80144b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80144b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80144b6:	2001      	movs	r0, #1
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d008      	beq.n	80144ce <_dtoa_r+0x872>
 80144bc:	6933      	ldr	r3, [r6, #16]
 80144be:	3303      	adds	r3, #3
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	18f3      	adds	r3, r6, r3
 80144c4:	6858      	ldr	r0, [r3, #4]
 80144c6:	f000 fb6b 	bl	8014ba0 <__hi0bits>
 80144ca:	2320      	movs	r3, #32
 80144cc:	1a18      	subs	r0, r3, r0
 80144ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144d0:	1818      	adds	r0, r3, r0
 80144d2:	0002      	movs	r2, r0
 80144d4:	231f      	movs	r3, #31
 80144d6:	401a      	ands	r2, r3
 80144d8:	4218      	tst	r0, r3
 80144da:	d100      	bne.n	80144de <_dtoa_r+0x882>
 80144dc:	e081      	b.n	80145e2 <_dtoa_r+0x986>
 80144de:	3301      	adds	r3, #1
 80144e0:	1a9b      	subs	r3, r3, r2
 80144e2:	2b04      	cmp	r3, #4
 80144e4:	dd79      	ble.n	80145da <_dtoa_r+0x97e>
 80144e6:	231c      	movs	r3, #28
 80144e8:	1a9b      	subs	r3, r3, r2
 80144ea:	9a06      	ldr	r2, [sp, #24]
 80144ec:	18e4      	adds	r4, r4, r3
 80144ee:	18d2      	adds	r2, r2, r3
 80144f0:	9206      	str	r2, [sp, #24]
 80144f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80144f4:	18d3      	adds	r3, r2, r3
 80144f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80144f8:	9b06      	ldr	r3, [sp, #24]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	dd05      	ble.n	801450a <_dtoa_r+0x8ae>
 80144fe:	001a      	movs	r2, r3
 8014500:	9905      	ldr	r1, [sp, #20]
 8014502:	9803      	ldr	r0, [sp, #12]
 8014504:	f000 fcba 	bl	8014e7c <__lshift>
 8014508:	9005      	str	r0, [sp, #20]
 801450a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801450c:	2b00      	cmp	r3, #0
 801450e:	dd05      	ble.n	801451c <_dtoa_r+0x8c0>
 8014510:	0031      	movs	r1, r6
 8014512:	001a      	movs	r2, r3
 8014514:	9803      	ldr	r0, [sp, #12]
 8014516:	f000 fcb1 	bl	8014e7c <__lshift>
 801451a:	0006      	movs	r6, r0
 801451c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801451e:	2b00      	cmp	r3, #0
 8014520:	d061      	beq.n	80145e6 <_dtoa_r+0x98a>
 8014522:	0031      	movs	r1, r6
 8014524:	9805      	ldr	r0, [sp, #20]
 8014526:	f000 fd15 	bl	8014f54 <__mcmp>
 801452a:	2800      	cmp	r0, #0
 801452c:	da5b      	bge.n	80145e6 <_dtoa_r+0x98a>
 801452e:	9b04      	ldr	r3, [sp, #16]
 8014530:	220a      	movs	r2, #10
 8014532:	3b01      	subs	r3, #1
 8014534:	930c      	str	r3, [sp, #48]	@ 0x30
 8014536:	9905      	ldr	r1, [sp, #20]
 8014538:	2300      	movs	r3, #0
 801453a:	9803      	ldr	r0, [sp, #12]
 801453c:	f000 faec 	bl	8014b18 <__multadd>
 8014540:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014542:	9005      	str	r0, [sp, #20]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d100      	bne.n	801454a <_dtoa_r+0x8ee>
 8014548:	e15b      	b.n	8014802 <_dtoa_r+0xba6>
 801454a:	2300      	movs	r3, #0
 801454c:	0039      	movs	r1, r7
 801454e:	220a      	movs	r2, #10
 8014550:	9803      	ldr	r0, [sp, #12]
 8014552:	f000 fae1 	bl	8014b18 <__multadd>
 8014556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014558:	0007      	movs	r7, r0
 801455a:	2b00      	cmp	r3, #0
 801455c:	dc4d      	bgt.n	80145fa <_dtoa_r+0x99e>
 801455e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014560:	2b02      	cmp	r3, #2
 8014562:	dd46      	ble.n	80145f2 <_dtoa_r+0x996>
 8014564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014566:	2b00      	cmp	r3, #0
 8014568:	d000      	beq.n	801456c <_dtoa_r+0x910>
 801456a:	e5db      	b.n	8014124 <_dtoa_r+0x4c8>
 801456c:	0031      	movs	r1, r6
 801456e:	2205      	movs	r2, #5
 8014570:	9803      	ldr	r0, [sp, #12]
 8014572:	f000 fad1 	bl	8014b18 <__multadd>
 8014576:	0006      	movs	r6, r0
 8014578:	0001      	movs	r1, r0
 801457a:	9805      	ldr	r0, [sp, #20]
 801457c:	f000 fcea 	bl	8014f54 <__mcmp>
 8014580:	2800      	cmp	r0, #0
 8014582:	dc00      	bgt.n	8014586 <_dtoa_r+0x92a>
 8014584:	e5ce      	b.n	8014124 <_dtoa_r+0x4c8>
 8014586:	9b08      	ldr	r3, [sp, #32]
 8014588:	9a08      	ldr	r2, [sp, #32]
 801458a:	1c5c      	adds	r4, r3, #1
 801458c:	2331      	movs	r3, #49	@ 0x31
 801458e:	7013      	strb	r3, [r2, #0]
 8014590:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014592:	3301      	adds	r3, #1
 8014594:	930c      	str	r3, [sp, #48]	@ 0x30
 8014596:	e5c9      	b.n	801412c <_dtoa_r+0x4d0>
 8014598:	2336      	movs	r3, #54	@ 0x36
 801459a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801459c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801459e:	1a9b      	subs	r3, r3, r2
 80145a0:	9c06      	ldr	r4, [sp, #24]
 80145a2:	e720      	b.n	80143e6 <_dtoa_r+0x78a>
 80145a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145a6:	1e5d      	subs	r5, r3, #1
 80145a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145aa:	42ab      	cmp	r3, r5
 80145ac:	db08      	blt.n	80145c0 <_dtoa_r+0x964>
 80145ae:	1b5d      	subs	r5, r3, r5
 80145b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	daf4      	bge.n	80145a0 <_dtoa_r+0x944>
 80145b6:	9b06      	ldr	r3, [sp, #24]
 80145b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145ba:	1a9c      	subs	r4, r3, r2
 80145bc:	2300      	movs	r3, #0
 80145be:	e712      	b.n	80143e6 <_dtoa_r+0x78a>
 80145c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80145c4:	1aeb      	subs	r3, r5, r3
 80145c6:	18d3      	adds	r3, r2, r3
 80145c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80145ca:	950f      	str	r5, [sp, #60]	@ 0x3c
 80145cc:	9c06      	ldr	r4, [sp, #24]
 80145ce:	2500      	movs	r5, #0
 80145d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145d2:	e708      	b.n	80143e6 <_dtoa_r+0x78a>
 80145d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80145d6:	9905      	ldr	r1, [sp, #20]
 80145d8:	e742      	b.n	8014460 <_dtoa_r+0x804>
 80145da:	2b04      	cmp	r3, #4
 80145dc:	d08c      	beq.n	80144f8 <_dtoa_r+0x89c>
 80145de:	331c      	adds	r3, #28
 80145e0:	e783      	b.n	80144ea <_dtoa_r+0x88e>
 80145e2:	0013      	movs	r3, r2
 80145e4:	e7fb      	b.n	80145de <_dtoa_r+0x982>
 80145e6:	9b04      	ldr	r3, [sp, #16]
 80145e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80145ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	ddb5      	ble.n	801455e <_dtoa_r+0x902>
 80145f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d100      	bne.n	80145fa <_dtoa_r+0x99e>
 80145f8:	e107      	b.n	801480a <_dtoa_r+0xbae>
 80145fa:	2c00      	cmp	r4, #0
 80145fc:	dd05      	ble.n	801460a <_dtoa_r+0x9ae>
 80145fe:	0039      	movs	r1, r7
 8014600:	0022      	movs	r2, r4
 8014602:	9803      	ldr	r0, [sp, #12]
 8014604:	f000 fc3a 	bl	8014e7c <__lshift>
 8014608:	0007      	movs	r7, r0
 801460a:	9704      	str	r7, [sp, #16]
 801460c:	2d00      	cmp	r5, #0
 801460e:	d020      	beq.n	8014652 <_dtoa_r+0x9f6>
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	9803      	ldr	r0, [sp, #12]
 8014614:	f000 fa18 	bl	8014a48 <_Balloc>
 8014618:	1e04      	subs	r4, r0, #0
 801461a:	d10c      	bne.n	8014636 <_dtoa_r+0x9da>
 801461c:	0022      	movs	r2, r4
 801461e:	4b2e      	ldr	r3, [pc, #184]	@ (80146d8 <_dtoa_r+0xa7c>)
 8014620:	482e      	ldr	r0, [pc, #184]	@ (80146dc <_dtoa_r+0xa80>)
 8014622:	492f      	ldr	r1, [pc, #188]	@ (80146e0 <_dtoa_r+0xa84>)
 8014624:	f7ff fb2f 	bl	8013c86 <_dtoa_r+0x2a>
 8014628:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801462a:	0037      	movs	r7, r6
 801462c:	e7ab      	b.n	8014586 <_dtoa_r+0x92a>
 801462e:	9b04      	ldr	r3, [sp, #16]
 8014630:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8014632:	930c      	str	r3, [sp, #48]	@ 0x30
 8014634:	e7f9      	b.n	801462a <_dtoa_r+0x9ce>
 8014636:	0039      	movs	r1, r7
 8014638:	693a      	ldr	r2, [r7, #16]
 801463a:	310c      	adds	r1, #12
 801463c:	3202      	adds	r2, #2
 801463e:	0092      	lsls	r2, r2, #2
 8014640:	300c      	adds	r0, #12
 8014642:	f7ff fa7d 	bl	8013b40 <memcpy>
 8014646:	2201      	movs	r2, #1
 8014648:	0021      	movs	r1, r4
 801464a:	9803      	ldr	r0, [sp, #12]
 801464c:	f000 fc16 	bl	8014e7c <__lshift>
 8014650:	9004      	str	r0, [sp, #16]
 8014652:	9b08      	ldr	r3, [sp, #32]
 8014654:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014656:	9306      	str	r3, [sp, #24]
 8014658:	3b01      	subs	r3, #1
 801465a:	189b      	adds	r3, r3, r2
 801465c:	2201      	movs	r2, #1
 801465e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014662:	4013      	ands	r3, r2
 8014664:	930e      	str	r3, [sp, #56]	@ 0x38
 8014666:	0031      	movs	r1, r6
 8014668:	9805      	ldr	r0, [sp, #20]
 801466a:	f7ff fa72 	bl	8013b52 <quorem>
 801466e:	0039      	movs	r1, r7
 8014670:	0005      	movs	r5, r0
 8014672:	900a      	str	r0, [sp, #40]	@ 0x28
 8014674:	9805      	ldr	r0, [sp, #20]
 8014676:	f000 fc6d 	bl	8014f54 <__mcmp>
 801467a:	9a04      	ldr	r2, [sp, #16]
 801467c:	900d      	str	r0, [sp, #52]	@ 0x34
 801467e:	0031      	movs	r1, r6
 8014680:	9803      	ldr	r0, [sp, #12]
 8014682:	f000 fc83 	bl	8014f8c <__mdiff>
 8014686:	2201      	movs	r2, #1
 8014688:	68c3      	ldr	r3, [r0, #12]
 801468a:	0004      	movs	r4, r0
 801468c:	3530      	adds	r5, #48	@ 0x30
 801468e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014690:	2b00      	cmp	r3, #0
 8014692:	d104      	bne.n	801469e <_dtoa_r+0xa42>
 8014694:	0001      	movs	r1, r0
 8014696:	9805      	ldr	r0, [sp, #20]
 8014698:	f000 fc5c 	bl	8014f54 <__mcmp>
 801469c:	9009      	str	r0, [sp, #36]	@ 0x24
 801469e:	0021      	movs	r1, r4
 80146a0:	9803      	ldr	r0, [sp, #12]
 80146a2:	f000 fa15 	bl	8014ad0 <_Bfree>
 80146a6:	9b06      	ldr	r3, [sp, #24]
 80146a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80146aa:	1c5c      	adds	r4, r3, #1
 80146ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ae:	4313      	orrs	r3, r2
 80146b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80146b2:	4313      	orrs	r3, r2
 80146b4:	d116      	bne.n	80146e4 <_dtoa_r+0xa88>
 80146b6:	2d39      	cmp	r5, #57	@ 0x39
 80146b8:	d02f      	beq.n	801471a <_dtoa_r+0xabe>
 80146ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146bc:	2b00      	cmp	r3, #0
 80146be:	dd01      	ble.n	80146c4 <_dtoa_r+0xa68>
 80146c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80146c2:	3531      	adds	r5, #49	@ 0x31
 80146c4:	9b06      	ldr	r3, [sp, #24]
 80146c6:	701d      	strb	r5, [r3, #0]
 80146c8:	e532      	b.n	8014130 <_dtoa_r+0x4d4>
 80146ca:	46c0      	nop			@ (mov r8, r8)
 80146cc:	40240000 	.word	0x40240000
 80146d0:	00000433 	.word	0x00000433
 80146d4:	7ff00000 	.word	0x7ff00000
 80146d8:	08015de0 	.word	0x08015de0
 80146dc:	08015d88 	.word	0x08015d88
 80146e0:	000002ef 	.word	0x000002ef
 80146e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	db04      	blt.n	80146f4 <_dtoa_r+0xa98>
 80146ea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80146ec:	4313      	orrs	r3, r2
 80146ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80146f0:	4313      	orrs	r3, r2
 80146f2:	d11e      	bne.n	8014732 <_dtoa_r+0xad6>
 80146f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	dde4      	ble.n	80146c4 <_dtoa_r+0xa68>
 80146fa:	9905      	ldr	r1, [sp, #20]
 80146fc:	2201      	movs	r2, #1
 80146fe:	9803      	ldr	r0, [sp, #12]
 8014700:	f000 fbbc 	bl	8014e7c <__lshift>
 8014704:	0031      	movs	r1, r6
 8014706:	9005      	str	r0, [sp, #20]
 8014708:	f000 fc24 	bl	8014f54 <__mcmp>
 801470c:	2800      	cmp	r0, #0
 801470e:	dc02      	bgt.n	8014716 <_dtoa_r+0xaba>
 8014710:	d1d8      	bne.n	80146c4 <_dtoa_r+0xa68>
 8014712:	07eb      	lsls	r3, r5, #31
 8014714:	d5d6      	bpl.n	80146c4 <_dtoa_r+0xa68>
 8014716:	2d39      	cmp	r5, #57	@ 0x39
 8014718:	d1d2      	bne.n	80146c0 <_dtoa_r+0xa64>
 801471a:	2339      	movs	r3, #57	@ 0x39
 801471c:	9a06      	ldr	r2, [sp, #24]
 801471e:	7013      	strb	r3, [r2, #0]
 8014720:	0023      	movs	r3, r4
 8014722:	001c      	movs	r4, r3
 8014724:	3b01      	subs	r3, #1
 8014726:	781a      	ldrb	r2, [r3, #0]
 8014728:	2a39      	cmp	r2, #57	@ 0x39
 801472a:	d050      	beq.n	80147ce <_dtoa_r+0xb72>
 801472c:	3201      	adds	r2, #1
 801472e:	701a      	strb	r2, [r3, #0]
 8014730:	e4fe      	b.n	8014130 <_dtoa_r+0x4d4>
 8014732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014734:	2b00      	cmp	r3, #0
 8014736:	dd03      	ble.n	8014740 <_dtoa_r+0xae4>
 8014738:	2d39      	cmp	r5, #57	@ 0x39
 801473a:	d0ee      	beq.n	801471a <_dtoa_r+0xabe>
 801473c:	3501      	adds	r5, #1
 801473e:	e7c1      	b.n	80146c4 <_dtoa_r+0xa68>
 8014740:	9b06      	ldr	r3, [sp, #24]
 8014742:	9a06      	ldr	r2, [sp, #24]
 8014744:	701d      	strb	r5, [r3, #0]
 8014746:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014748:	4293      	cmp	r3, r2
 801474a:	d02b      	beq.n	80147a4 <_dtoa_r+0xb48>
 801474c:	2300      	movs	r3, #0
 801474e:	220a      	movs	r2, #10
 8014750:	9905      	ldr	r1, [sp, #20]
 8014752:	9803      	ldr	r0, [sp, #12]
 8014754:	f000 f9e0 	bl	8014b18 <__multadd>
 8014758:	9b04      	ldr	r3, [sp, #16]
 801475a:	9005      	str	r0, [sp, #20]
 801475c:	429f      	cmp	r7, r3
 801475e:	d109      	bne.n	8014774 <_dtoa_r+0xb18>
 8014760:	0039      	movs	r1, r7
 8014762:	2300      	movs	r3, #0
 8014764:	220a      	movs	r2, #10
 8014766:	9803      	ldr	r0, [sp, #12]
 8014768:	f000 f9d6 	bl	8014b18 <__multadd>
 801476c:	0007      	movs	r7, r0
 801476e:	9004      	str	r0, [sp, #16]
 8014770:	9406      	str	r4, [sp, #24]
 8014772:	e778      	b.n	8014666 <_dtoa_r+0xa0a>
 8014774:	0039      	movs	r1, r7
 8014776:	2300      	movs	r3, #0
 8014778:	220a      	movs	r2, #10
 801477a:	9803      	ldr	r0, [sp, #12]
 801477c:	f000 f9cc 	bl	8014b18 <__multadd>
 8014780:	2300      	movs	r3, #0
 8014782:	0007      	movs	r7, r0
 8014784:	220a      	movs	r2, #10
 8014786:	9904      	ldr	r1, [sp, #16]
 8014788:	9803      	ldr	r0, [sp, #12]
 801478a:	f000 f9c5 	bl	8014b18 <__multadd>
 801478e:	9004      	str	r0, [sp, #16]
 8014790:	e7ee      	b.n	8014770 <_dtoa_r+0xb14>
 8014792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014794:	2401      	movs	r4, #1
 8014796:	2b00      	cmp	r3, #0
 8014798:	dd00      	ble.n	801479c <_dtoa_r+0xb40>
 801479a:	001c      	movs	r4, r3
 801479c:	9704      	str	r7, [sp, #16]
 801479e:	2700      	movs	r7, #0
 80147a0:	9b08      	ldr	r3, [sp, #32]
 80147a2:	191c      	adds	r4, r3, r4
 80147a4:	9905      	ldr	r1, [sp, #20]
 80147a6:	2201      	movs	r2, #1
 80147a8:	9803      	ldr	r0, [sp, #12]
 80147aa:	f000 fb67 	bl	8014e7c <__lshift>
 80147ae:	0031      	movs	r1, r6
 80147b0:	9005      	str	r0, [sp, #20]
 80147b2:	f000 fbcf 	bl	8014f54 <__mcmp>
 80147b6:	2800      	cmp	r0, #0
 80147b8:	dcb2      	bgt.n	8014720 <_dtoa_r+0xac4>
 80147ba:	d101      	bne.n	80147c0 <_dtoa_r+0xb64>
 80147bc:	07ed      	lsls	r5, r5, #31
 80147be:	d4af      	bmi.n	8014720 <_dtoa_r+0xac4>
 80147c0:	0023      	movs	r3, r4
 80147c2:	001c      	movs	r4, r3
 80147c4:	3b01      	subs	r3, #1
 80147c6:	781a      	ldrb	r2, [r3, #0]
 80147c8:	2a30      	cmp	r2, #48	@ 0x30
 80147ca:	d0fa      	beq.n	80147c2 <_dtoa_r+0xb66>
 80147cc:	e4b0      	b.n	8014130 <_dtoa_r+0x4d4>
 80147ce:	9a08      	ldr	r2, [sp, #32]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d1a6      	bne.n	8014722 <_dtoa_r+0xac6>
 80147d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80147d6:	3301      	adds	r3, #1
 80147d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80147da:	2331      	movs	r3, #49	@ 0x31
 80147dc:	7013      	strb	r3, [r2, #0]
 80147de:	e4a7      	b.n	8014130 <_dtoa_r+0x4d4>
 80147e0:	4b14      	ldr	r3, [pc, #80]	@ (8014834 <_dtoa_r+0xbd8>)
 80147e2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80147e4:	9308      	str	r3, [sp, #32]
 80147e6:	4b14      	ldr	r3, [pc, #80]	@ (8014838 <_dtoa_r+0xbdc>)
 80147e8:	2a00      	cmp	r2, #0
 80147ea:	d001      	beq.n	80147f0 <_dtoa_r+0xb94>
 80147ec:	f7ff fa7e 	bl	8013cec <_dtoa_r+0x90>
 80147f0:	f7ff fa7e 	bl	8013cf0 <_dtoa_r+0x94>
 80147f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	dc00      	bgt.n	80147fc <_dtoa_r+0xba0>
 80147fa:	e648      	b.n	801448e <_dtoa_r+0x832>
 80147fc:	2001      	movs	r0, #1
 80147fe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8014800:	e665      	b.n	80144ce <_dtoa_r+0x872>
 8014802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014804:	2b00      	cmp	r3, #0
 8014806:	dc00      	bgt.n	801480a <_dtoa_r+0xbae>
 8014808:	e6a9      	b.n	801455e <_dtoa_r+0x902>
 801480a:	2400      	movs	r4, #0
 801480c:	0031      	movs	r1, r6
 801480e:	9805      	ldr	r0, [sp, #20]
 8014810:	f7ff f99f 	bl	8013b52 <quorem>
 8014814:	9b08      	ldr	r3, [sp, #32]
 8014816:	3030      	adds	r0, #48	@ 0x30
 8014818:	5518      	strb	r0, [r3, r4]
 801481a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801481c:	3401      	adds	r4, #1
 801481e:	0005      	movs	r5, r0
 8014820:	42a3      	cmp	r3, r4
 8014822:	ddb6      	ble.n	8014792 <_dtoa_r+0xb36>
 8014824:	2300      	movs	r3, #0
 8014826:	220a      	movs	r2, #10
 8014828:	9905      	ldr	r1, [sp, #20]
 801482a:	9803      	ldr	r0, [sp, #12]
 801482c:	f000 f974 	bl	8014b18 <__multadd>
 8014830:	9005      	str	r0, [sp, #20]
 8014832:	e7eb      	b.n	801480c <_dtoa_r+0xbb0>
 8014834:	08015d64 	.word	0x08015d64
 8014838:	08015d6c 	.word	0x08015d6c

0801483c <_free_r>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	0005      	movs	r5, r0
 8014840:	1e0c      	subs	r4, r1, #0
 8014842:	d010      	beq.n	8014866 <_free_r+0x2a>
 8014844:	3c04      	subs	r4, #4
 8014846:	6823      	ldr	r3, [r4, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	da00      	bge.n	801484e <_free_r+0x12>
 801484c:	18e4      	adds	r4, r4, r3
 801484e:	0028      	movs	r0, r5
 8014850:	f000 f8ea 	bl	8014a28 <__malloc_lock>
 8014854:	4a1d      	ldr	r2, [pc, #116]	@ (80148cc <_free_r+0x90>)
 8014856:	6813      	ldr	r3, [r2, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d105      	bne.n	8014868 <_free_r+0x2c>
 801485c:	6063      	str	r3, [r4, #4]
 801485e:	6014      	str	r4, [r2, #0]
 8014860:	0028      	movs	r0, r5
 8014862:	f000 f8e9 	bl	8014a38 <__malloc_unlock>
 8014866:	bd70      	pop	{r4, r5, r6, pc}
 8014868:	42a3      	cmp	r3, r4
 801486a:	d908      	bls.n	801487e <_free_r+0x42>
 801486c:	6820      	ldr	r0, [r4, #0]
 801486e:	1821      	adds	r1, r4, r0
 8014870:	428b      	cmp	r3, r1
 8014872:	d1f3      	bne.n	801485c <_free_r+0x20>
 8014874:	6819      	ldr	r1, [r3, #0]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	1809      	adds	r1, r1, r0
 801487a:	6021      	str	r1, [r4, #0]
 801487c:	e7ee      	b.n	801485c <_free_r+0x20>
 801487e:	001a      	movs	r2, r3
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d001      	beq.n	801488a <_free_r+0x4e>
 8014886:	42a3      	cmp	r3, r4
 8014888:	d9f9      	bls.n	801487e <_free_r+0x42>
 801488a:	6811      	ldr	r1, [r2, #0]
 801488c:	1850      	adds	r0, r2, r1
 801488e:	42a0      	cmp	r0, r4
 8014890:	d10b      	bne.n	80148aa <_free_r+0x6e>
 8014892:	6820      	ldr	r0, [r4, #0]
 8014894:	1809      	adds	r1, r1, r0
 8014896:	1850      	adds	r0, r2, r1
 8014898:	6011      	str	r1, [r2, #0]
 801489a:	4283      	cmp	r3, r0
 801489c:	d1e0      	bne.n	8014860 <_free_r+0x24>
 801489e:	6818      	ldr	r0, [r3, #0]
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	1841      	adds	r1, r0, r1
 80148a4:	6011      	str	r1, [r2, #0]
 80148a6:	6053      	str	r3, [r2, #4]
 80148a8:	e7da      	b.n	8014860 <_free_r+0x24>
 80148aa:	42a0      	cmp	r0, r4
 80148ac:	d902      	bls.n	80148b4 <_free_r+0x78>
 80148ae:	230c      	movs	r3, #12
 80148b0:	602b      	str	r3, [r5, #0]
 80148b2:	e7d5      	b.n	8014860 <_free_r+0x24>
 80148b4:	6820      	ldr	r0, [r4, #0]
 80148b6:	1821      	adds	r1, r4, r0
 80148b8:	428b      	cmp	r3, r1
 80148ba:	d103      	bne.n	80148c4 <_free_r+0x88>
 80148bc:	6819      	ldr	r1, [r3, #0]
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	1809      	adds	r1, r1, r0
 80148c2:	6021      	str	r1, [r4, #0]
 80148c4:	6063      	str	r3, [r4, #4]
 80148c6:	6054      	str	r4, [r2, #4]
 80148c8:	e7ca      	b.n	8014860 <_free_r+0x24>
 80148ca:	46c0      	nop			@ (mov r8, r8)
 80148cc:	20005e98 	.word	0x20005e98

080148d0 <malloc>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	4b03      	ldr	r3, [pc, #12]	@ (80148e0 <malloc+0x10>)
 80148d4:	0001      	movs	r1, r0
 80148d6:	6818      	ldr	r0, [r3, #0]
 80148d8:	f000 f826 	bl	8014928 <_malloc_r>
 80148dc:	bd10      	pop	{r4, pc}
 80148de:	46c0      	nop			@ (mov r8, r8)
 80148e0:	20000094 	.word	0x20000094

080148e4 <sbrk_aligned>:
 80148e4:	b570      	push	{r4, r5, r6, lr}
 80148e6:	4e0f      	ldr	r6, [pc, #60]	@ (8014924 <sbrk_aligned+0x40>)
 80148e8:	000d      	movs	r5, r1
 80148ea:	6831      	ldr	r1, [r6, #0]
 80148ec:	0004      	movs	r4, r0
 80148ee:	2900      	cmp	r1, #0
 80148f0:	d102      	bne.n	80148f8 <sbrk_aligned+0x14>
 80148f2:	f000 ff01 	bl	80156f8 <_sbrk_r>
 80148f6:	6030      	str	r0, [r6, #0]
 80148f8:	0029      	movs	r1, r5
 80148fa:	0020      	movs	r0, r4
 80148fc:	f000 fefc 	bl	80156f8 <_sbrk_r>
 8014900:	1c43      	adds	r3, r0, #1
 8014902:	d103      	bne.n	801490c <sbrk_aligned+0x28>
 8014904:	2501      	movs	r5, #1
 8014906:	426d      	negs	r5, r5
 8014908:	0028      	movs	r0, r5
 801490a:	bd70      	pop	{r4, r5, r6, pc}
 801490c:	2303      	movs	r3, #3
 801490e:	1cc5      	adds	r5, r0, #3
 8014910:	439d      	bics	r5, r3
 8014912:	42a8      	cmp	r0, r5
 8014914:	d0f8      	beq.n	8014908 <sbrk_aligned+0x24>
 8014916:	1a29      	subs	r1, r5, r0
 8014918:	0020      	movs	r0, r4
 801491a:	f000 feed 	bl	80156f8 <_sbrk_r>
 801491e:	3001      	adds	r0, #1
 8014920:	d1f2      	bne.n	8014908 <sbrk_aligned+0x24>
 8014922:	e7ef      	b.n	8014904 <sbrk_aligned+0x20>
 8014924:	20005e94 	.word	0x20005e94

08014928 <_malloc_r>:
 8014928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801492a:	2203      	movs	r2, #3
 801492c:	1ccb      	adds	r3, r1, #3
 801492e:	4393      	bics	r3, r2
 8014930:	3308      	adds	r3, #8
 8014932:	0005      	movs	r5, r0
 8014934:	001f      	movs	r7, r3
 8014936:	2b0c      	cmp	r3, #12
 8014938:	d234      	bcs.n	80149a4 <_malloc_r+0x7c>
 801493a:	270c      	movs	r7, #12
 801493c:	42b9      	cmp	r1, r7
 801493e:	d833      	bhi.n	80149a8 <_malloc_r+0x80>
 8014940:	0028      	movs	r0, r5
 8014942:	f000 f871 	bl	8014a28 <__malloc_lock>
 8014946:	4e37      	ldr	r6, [pc, #220]	@ (8014a24 <_malloc_r+0xfc>)
 8014948:	6833      	ldr	r3, [r6, #0]
 801494a:	001c      	movs	r4, r3
 801494c:	2c00      	cmp	r4, #0
 801494e:	d12f      	bne.n	80149b0 <_malloc_r+0x88>
 8014950:	0039      	movs	r1, r7
 8014952:	0028      	movs	r0, r5
 8014954:	f7ff ffc6 	bl	80148e4 <sbrk_aligned>
 8014958:	0004      	movs	r4, r0
 801495a:	1c43      	adds	r3, r0, #1
 801495c:	d15f      	bne.n	8014a1e <_malloc_r+0xf6>
 801495e:	6834      	ldr	r4, [r6, #0]
 8014960:	9400      	str	r4, [sp, #0]
 8014962:	9b00      	ldr	r3, [sp, #0]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d14a      	bne.n	80149fe <_malloc_r+0xd6>
 8014968:	2c00      	cmp	r4, #0
 801496a:	d052      	beq.n	8014a12 <_malloc_r+0xea>
 801496c:	6823      	ldr	r3, [r4, #0]
 801496e:	0028      	movs	r0, r5
 8014970:	18e3      	adds	r3, r4, r3
 8014972:	9900      	ldr	r1, [sp, #0]
 8014974:	9301      	str	r3, [sp, #4]
 8014976:	f000 febf 	bl	80156f8 <_sbrk_r>
 801497a:	9b01      	ldr	r3, [sp, #4]
 801497c:	4283      	cmp	r3, r0
 801497e:	d148      	bne.n	8014a12 <_malloc_r+0xea>
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	0028      	movs	r0, r5
 8014984:	1aff      	subs	r7, r7, r3
 8014986:	0039      	movs	r1, r7
 8014988:	f7ff ffac 	bl	80148e4 <sbrk_aligned>
 801498c:	3001      	adds	r0, #1
 801498e:	d040      	beq.n	8014a12 <_malloc_r+0xea>
 8014990:	6823      	ldr	r3, [r4, #0]
 8014992:	19db      	adds	r3, r3, r7
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	6833      	ldr	r3, [r6, #0]
 8014998:	685a      	ldr	r2, [r3, #4]
 801499a:	2a00      	cmp	r2, #0
 801499c:	d133      	bne.n	8014a06 <_malloc_r+0xde>
 801499e:	9b00      	ldr	r3, [sp, #0]
 80149a0:	6033      	str	r3, [r6, #0]
 80149a2:	e019      	b.n	80149d8 <_malloc_r+0xb0>
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	dac9      	bge.n	801493c <_malloc_r+0x14>
 80149a8:	230c      	movs	r3, #12
 80149aa:	602b      	str	r3, [r5, #0]
 80149ac:	2000      	movs	r0, #0
 80149ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80149b0:	6821      	ldr	r1, [r4, #0]
 80149b2:	1bc9      	subs	r1, r1, r7
 80149b4:	d420      	bmi.n	80149f8 <_malloc_r+0xd0>
 80149b6:	290b      	cmp	r1, #11
 80149b8:	d90a      	bls.n	80149d0 <_malloc_r+0xa8>
 80149ba:	19e2      	adds	r2, r4, r7
 80149bc:	6027      	str	r7, [r4, #0]
 80149be:	42a3      	cmp	r3, r4
 80149c0:	d104      	bne.n	80149cc <_malloc_r+0xa4>
 80149c2:	6032      	str	r2, [r6, #0]
 80149c4:	6863      	ldr	r3, [r4, #4]
 80149c6:	6011      	str	r1, [r2, #0]
 80149c8:	6053      	str	r3, [r2, #4]
 80149ca:	e005      	b.n	80149d8 <_malloc_r+0xb0>
 80149cc:	605a      	str	r2, [r3, #4]
 80149ce:	e7f9      	b.n	80149c4 <_malloc_r+0x9c>
 80149d0:	6862      	ldr	r2, [r4, #4]
 80149d2:	42a3      	cmp	r3, r4
 80149d4:	d10e      	bne.n	80149f4 <_malloc_r+0xcc>
 80149d6:	6032      	str	r2, [r6, #0]
 80149d8:	0028      	movs	r0, r5
 80149da:	f000 f82d 	bl	8014a38 <__malloc_unlock>
 80149de:	0020      	movs	r0, r4
 80149e0:	2207      	movs	r2, #7
 80149e2:	300b      	adds	r0, #11
 80149e4:	1d23      	adds	r3, r4, #4
 80149e6:	4390      	bics	r0, r2
 80149e8:	1ac2      	subs	r2, r0, r3
 80149ea:	4298      	cmp	r0, r3
 80149ec:	d0df      	beq.n	80149ae <_malloc_r+0x86>
 80149ee:	1a1b      	subs	r3, r3, r0
 80149f0:	50a3      	str	r3, [r4, r2]
 80149f2:	e7dc      	b.n	80149ae <_malloc_r+0x86>
 80149f4:	605a      	str	r2, [r3, #4]
 80149f6:	e7ef      	b.n	80149d8 <_malloc_r+0xb0>
 80149f8:	0023      	movs	r3, r4
 80149fa:	6864      	ldr	r4, [r4, #4]
 80149fc:	e7a6      	b.n	801494c <_malloc_r+0x24>
 80149fe:	9c00      	ldr	r4, [sp, #0]
 8014a00:	6863      	ldr	r3, [r4, #4]
 8014a02:	9300      	str	r3, [sp, #0]
 8014a04:	e7ad      	b.n	8014962 <_malloc_r+0x3a>
 8014a06:	001a      	movs	r2, r3
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	42a3      	cmp	r3, r4
 8014a0c:	d1fb      	bne.n	8014a06 <_malloc_r+0xde>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	e7da      	b.n	80149c8 <_malloc_r+0xa0>
 8014a12:	230c      	movs	r3, #12
 8014a14:	0028      	movs	r0, r5
 8014a16:	602b      	str	r3, [r5, #0]
 8014a18:	f000 f80e 	bl	8014a38 <__malloc_unlock>
 8014a1c:	e7c6      	b.n	80149ac <_malloc_r+0x84>
 8014a1e:	6007      	str	r7, [r0, #0]
 8014a20:	e7da      	b.n	80149d8 <_malloc_r+0xb0>
 8014a22:	46c0      	nop			@ (mov r8, r8)
 8014a24:	20005e98 	.word	0x20005e98

08014a28 <__malloc_lock>:
 8014a28:	b510      	push	{r4, lr}
 8014a2a:	4802      	ldr	r0, [pc, #8]	@ (8014a34 <__malloc_lock+0xc>)
 8014a2c:	f7ff f87b 	bl	8013b26 <__retarget_lock_acquire_recursive>
 8014a30:	bd10      	pop	{r4, pc}
 8014a32:	46c0      	nop			@ (mov r8, r8)
 8014a34:	20005e90 	.word	0x20005e90

08014a38 <__malloc_unlock>:
 8014a38:	b510      	push	{r4, lr}
 8014a3a:	4802      	ldr	r0, [pc, #8]	@ (8014a44 <__malloc_unlock+0xc>)
 8014a3c:	f7ff f874 	bl	8013b28 <__retarget_lock_release_recursive>
 8014a40:	bd10      	pop	{r4, pc}
 8014a42:	46c0      	nop			@ (mov r8, r8)
 8014a44:	20005e90 	.word	0x20005e90

08014a48 <_Balloc>:
 8014a48:	b570      	push	{r4, r5, r6, lr}
 8014a4a:	69c5      	ldr	r5, [r0, #28]
 8014a4c:	0006      	movs	r6, r0
 8014a4e:	000c      	movs	r4, r1
 8014a50:	2d00      	cmp	r5, #0
 8014a52:	d10e      	bne.n	8014a72 <_Balloc+0x2a>
 8014a54:	2010      	movs	r0, #16
 8014a56:	f7ff ff3b 	bl	80148d0 <malloc>
 8014a5a:	1e02      	subs	r2, r0, #0
 8014a5c:	61f0      	str	r0, [r6, #28]
 8014a5e:	d104      	bne.n	8014a6a <_Balloc+0x22>
 8014a60:	216b      	movs	r1, #107	@ 0x6b
 8014a62:	4b19      	ldr	r3, [pc, #100]	@ (8014ac8 <_Balloc+0x80>)
 8014a64:	4819      	ldr	r0, [pc, #100]	@ (8014acc <_Balloc+0x84>)
 8014a66:	f000 fe59 	bl	801571c <__assert_func>
 8014a6a:	6045      	str	r5, [r0, #4]
 8014a6c:	6085      	str	r5, [r0, #8]
 8014a6e:	6005      	str	r5, [r0, #0]
 8014a70:	60c5      	str	r5, [r0, #12]
 8014a72:	69f5      	ldr	r5, [r6, #28]
 8014a74:	68eb      	ldr	r3, [r5, #12]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d013      	beq.n	8014aa2 <_Balloc+0x5a>
 8014a7a:	69f3      	ldr	r3, [r6, #28]
 8014a7c:	00a2      	lsls	r2, r4, #2
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	189b      	adds	r3, r3, r2
 8014a82:	6818      	ldr	r0, [r3, #0]
 8014a84:	2800      	cmp	r0, #0
 8014a86:	d118      	bne.n	8014aba <_Balloc+0x72>
 8014a88:	2101      	movs	r1, #1
 8014a8a:	000d      	movs	r5, r1
 8014a8c:	40a5      	lsls	r5, r4
 8014a8e:	1d6a      	adds	r2, r5, #5
 8014a90:	0030      	movs	r0, r6
 8014a92:	0092      	lsls	r2, r2, #2
 8014a94:	f000 fe60 	bl	8015758 <_calloc_r>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d00c      	beq.n	8014ab6 <_Balloc+0x6e>
 8014a9c:	6044      	str	r4, [r0, #4]
 8014a9e:	6085      	str	r5, [r0, #8]
 8014aa0:	e00d      	b.n	8014abe <_Balloc+0x76>
 8014aa2:	2221      	movs	r2, #33	@ 0x21
 8014aa4:	2104      	movs	r1, #4
 8014aa6:	0030      	movs	r0, r6
 8014aa8:	f000 fe56 	bl	8015758 <_calloc_r>
 8014aac:	69f3      	ldr	r3, [r6, #28]
 8014aae:	60e8      	str	r0, [r5, #12]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d1e1      	bne.n	8014a7a <_Balloc+0x32>
 8014ab6:	2000      	movs	r0, #0
 8014ab8:	bd70      	pop	{r4, r5, r6, pc}
 8014aba:	6802      	ldr	r2, [r0, #0]
 8014abc:	601a      	str	r2, [r3, #0]
 8014abe:	2300      	movs	r3, #0
 8014ac0:	6103      	str	r3, [r0, #16]
 8014ac2:	60c3      	str	r3, [r0, #12]
 8014ac4:	e7f8      	b.n	8014ab8 <_Balloc+0x70>
 8014ac6:	46c0      	nop			@ (mov r8, r8)
 8014ac8:	08015d71 	.word	0x08015d71
 8014acc:	08015df1 	.word	0x08015df1

08014ad0 <_Bfree>:
 8014ad0:	b570      	push	{r4, r5, r6, lr}
 8014ad2:	69c6      	ldr	r6, [r0, #28]
 8014ad4:	0005      	movs	r5, r0
 8014ad6:	000c      	movs	r4, r1
 8014ad8:	2e00      	cmp	r6, #0
 8014ada:	d10e      	bne.n	8014afa <_Bfree+0x2a>
 8014adc:	2010      	movs	r0, #16
 8014ade:	f7ff fef7 	bl	80148d0 <malloc>
 8014ae2:	1e02      	subs	r2, r0, #0
 8014ae4:	61e8      	str	r0, [r5, #28]
 8014ae6:	d104      	bne.n	8014af2 <_Bfree+0x22>
 8014ae8:	218f      	movs	r1, #143	@ 0x8f
 8014aea:	4b09      	ldr	r3, [pc, #36]	@ (8014b10 <_Bfree+0x40>)
 8014aec:	4809      	ldr	r0, [pc, #36]	@ (8014b14 <_Bfree+0x44>)
 8014aee:	f000 fe15 	bl	801571c <__assert_func>
 8014af2:	6046      	str	r6, [r0, #4]
 8014af4:	6086      	str	r6, [r0, #8]
 8014af6:	6006      	str	r6, [r0, #0]
 8014af8:	60c6      	str	r6, [r0, #12]
 8014afa:	2c00      	cmp	r4, #0
 8014afc:	d007      	beq.n	8014b0e <_Bfree+0x3e>
 8014afe:	69eb      	ldr	r3, [r5, #28]
 8014b00:	6862      	ldr	r2, [r4, #4]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	0092      	lsls	r2, r2, #2
 8014b06:	189b      	adds	r3, r3, r2
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	6022      	str	r2, [r4, #0]
 8014b0c:	601c      	str	r4, [r3, #0]
 8014b0e:	bd70      	pop	{r4, r5, r6, pc}
 8014b10:	08015d71 	.word	0x08015d71
 8014b14:	08015df1 	.word	0x08015df1

08014b18 <__multadd>:
 8014b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b1a:	000f      	movs	r7, r1
 8014b1c:	9001      	str	r0, [sp, #4]
 8014b1e:	000c      	movs	r4, r1
 8014b20:	001e      	movs	r6, r3
 8014b22:	2000      	movs	r0, #0
 8014b24:	690d      	ldr	r5, [r1, #16]
 8014b26:	3714      	adds	r7, #20
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	3001      	adds	r0, #1
 8014b2c:	b299      	uxth	r1, r3
 8014b2e:	4351      	muls	r1, r2
 8014b30:	0c1b      	lsrs	r3, r3, #16
 8014b32:	4353      	muls	r3, r2
 8014b34:	1989      	adds	r1, r1, r6
 8014b36:	0c0e      	lsrs	r6, r1, #16
 8014b38:	199b      	adds	r3, r3, r6
 8014b3a:	0c1e      	lsrs	r6, r3, #16
 8014b3c:	b289      	uxth	r1, r1
 8014b3e:	041b      	lsls	r3, r3, #16
 8014b40:	185b      	adds	r3, r3, r1
 8014b42:	c708      	stmia	r7!, {r3}
 8014b44:	4285      	cmp	r5, r0
 8014b46:	dcef      	bgt.n	8014b28 <__multadd+0x10>
 8014b48:	2e00      	cmp	r6, #0
 8014b4a:	d022      	beq.n	8014b92 <__multadd+0x7a>
 8014b4c:	68a3      	ldr	r3, [r4, #8]
 8014b4e:	42ab      	cmp	r3, r5
 8014b50:	dc19      	bgt.n	8014b86 <__multadd+0x6e>
 8014b52:	6861      	ldr	r1, [r4, #4]
 8014b54:	9801      	ldr	r0, [sp, #4]
 8014b56:	3101      	adds	r1, #1
 8014b58:	f7ff ff76 	bl	8014a48 <_Balloc>
 8014b5c:	1e07      	subs	r7, r0, #0
 8014b5e:	d105      	bne.n	8014b6c <__multadd+0x54>
 8014b60:	003a      	movs	r2, r7
 8014b62:	21ba      	movs	r1, #186	@ 0xba
 8014b64:	4b0c      	ldr	r3, [pc, #48]	@ (8014b98 <__multadd+0x80>)
 8014b66:	480d      	ldr	r0, [pc, #52]	@ (8014b9c <__multadd+0x84>)
 8014b68:	f000 fdd8 	bl	801571c <__assert_func>
 8014b6c:	0021      	movs	r1, r4
 8014b6e:	6922      	ldr	r2, [r4, #16]
 8014b70:	310c      	adds	r1, #12
 8014b72:	3202      	adds	r2, #2
 8014b74:	0092      	lsls	r2, r2, #2
 8014b76:	300c      	adds	r0, #12
 8014b78:	f7fe ffe2 	bl	8013b40 <memcpy>
 8014b7c:	0021      	movs	r1, r4
 8014b7e:	9801      	ldr	r0, [sp, #4]
 8014b80:	f7ff ffa6 	bl	8014ad0 <_Bfree>
 8014b84:	003c      	movs	r4, r7
 8014b86:	1d2b      	adds	r3, r5, #4
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	18e3      	adds	r3, r4, r3
 8014b8c:	3501      	adds	r5, #1
 8014b8e:	605e      	str	r6, [r3, #4]
 8014b90:	6125      	str	r5, [r4, #16]
 8014b92:	0020      	movs	r0, r4
 8014b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014b96:	46c0      	nop			@ (mov r8, r8)
 8014b98:	08015de0 	.word	0x08015de0
 8014b9c:	08015df1 	.word	0x08015df1

08014ba0 <__hi0bits>:
 8014ba0:	2280      	movs	r2, #128	@ 0x80
 8014ba2:	0003      	movs	r3, r0
 8014ba4:	0252      	lsls	r2, r2, #9
 8014ba6:	2000      	movs	r0, #0
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	d201      	bcs.n	8014bb0 <__hi0bits+0x10>
 8014bac:	041b      	lsls	r3, r3, #16
 8014bae:	3010      	adds	r0, #16
 8014bb0:	2280      	movs	r2, #128	@ 0x80
 8014bb2:	0452      	lsls	r2, r2, #17
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d201      	bcs.n	8014bbc <__hi0bits+0x1c>
 8014bb8:	3008      	adds	r0, #8
 8014bba:	021b      	lsls	r3, r3, #8
 8014bbc:	2280      	movs	r2, #128	@ 0x80
 8014bbe:	0552      	lsls	r2, r2, #21
 8014bc0:	4293      	cmp	r3, r2
 8014bc2:	d201      	bcs.n	8014bc8 <__hi0bits+0x28>
 8014bc4:	3004      	adds	r0, #4
 8014bc6:	011b      	lsls	r3, r3, #4
 8014bc8:	2280      	movs	r2, #128	@ 0x80
 8014bca:	05d2      	lsls	r2, r2, #23
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d201      	bcs.n	8014bd4 <__hi0bits+0x34>
 8014bd0:	3002      	adds	r0, #2
 8014bd2:	009b      	lsls	r3, r3, #2
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	db03      	blt.n	8014be0 <__hi0bits+0x40>
 8014bd8:	3001      	adds	r0, #1
 8014bda:	4213      	tst	r3, r2
 8014bdc:	d100      	bne.n	8014be0 <__hi0bits+0x40>
 8014bde:	2020      	movs	r0, #32
 8014be0:	4770      	bx	lr

08014be2 <__lo0bits>:
 8014be2:	6803      	ldr	r3, [r0, #0]
 8014be4:	0001      	movs	r1, r0
 8014be6:	2207      	movs	r2, #7
 8014be8:	0018      	movs	r0, r3
 8014bea:	4010      	ands	r0, r2
 8014bec:	4213      	tst	r3, r2
 8014bee:	d00d      	beq.n	8014c0c <__lo0bits+0x2a>
 8014bf0:	3a06      	subs	r2, #6
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	4213      	tst	r3, r2
 8014bf6:	d105      	bne.n	8014c04 <__lo0bits+0x22>
 8014bf8:	3002      	adds	r0, #2
 8014bfa:	4203      	tst	r3, r0
 8014bfc:	d003      	beq.n	8014c06 <__lo0bits+0x24>
 8014bfe:	40d3      	lsrs	r3, r2
 8014c00:	0010      	movs	r0, r2
 8014c02:	600b      	str	r3, [r1, #0]
 8014c04:	4770      	bx	lr
 8014c06:	089b      	lsrs	r3, r3, #2
 8014c08:	600b      	str	r3, [r1, #0]
 8014c0a:	e7fb      	b.n	8014c04 <__lo0bits+0x22>
 8014c0c:	b29a      	uxth	r2, r3
 8014c0e:	2a00      	cmp	r2, #0
 8014c10:	d101      	bne.n	8014c16 <__lo0bits+0x34>
 8014c12:	2010      	movs	r0, #16
 8014c14:	0c1b      	lsrs	r3, r3, #16
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	2a00      	cmp	r2, #0
 8014c1a:	d101      	bne.n	8014c20 <__lo0bits+0x3e>
 8014c1c:	3008      	adds	r0, #8
 8014c1e:	0a1b      	lsrs	r3, r3, #8
 8014c20:	071a      	lsls	r2, r3, #28
 8014c22:	d101      	bne.n	8014c28 <__lo0bits+0x46>
 8014c24:	3004      	adds	r0, #4
 8014c26:	091b      	lsrs	r3, r3, #4
 8014c28:	079a      	lsls	r2, r3, #30
 8014c2a:	d101      	bne.n	8014c30 <__lo0bits+0x4e>
 8014c2c:	3002      	adds	r0, #2
 8014c2e:	089b      	lsrs	r3, r3, #2
 8014c30:	07da      	lsls	r2, r3, #31
 8014c32:	d4e9      	bmi.n	8014c08 <__lo0bits+0x26>
 8014c34:	3001      	adds	r0, #1
 8014c36:	085b      	lsrs	r3, r3, #1
 8014c38:	d1e6      	bne.n	8014c08 <__lo0bits+0x26>
 8014c3a:	2020      	movs	r0, #32
 8014c3c:	e7e2      	b.n	8014c04 <__lo0bits+0x22>
	...

08014c40 <__i2b>:
 8014c40:	b510      	push	{r4, lr}
 8014c42:	000c      	movs	r4, r1
 8014c44:	2101      	movs	r1, #1
 8014c46:	f7ff feff 	bl	8014a48 <_Balloc>
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	d107      	bne.n	8014c5e <__i2b+0x1e>
 8014c4e:	2146      	movs	r1, #70	@ 0x46
 8014c50:	4c05      	ldr	r4, [pc, #20]	@ (8014c68 <__i2b+0x28>)
 8014c52:	0002      	movs	r2, r0
 8014c54:	4b05      	ldr	r3, [pc, #20]	@ (8014c6c <__i2b+0x2c>)
 8014c56:	0020      	movs	r0, r4
 8014c58:	31ff      	adds	r1, #255	@ 0xff
 8014c5a:	f000 fd5f 	bl	801571c <__assert_func>
 8014c5e:	2301      	movs	r3, #1
 8014c60:	6144      	str	r4, [r0, #20]
 8014c62:	6103      	str	r3, [r0, #16]
 8014c64:	bd10      	pop	{r4, pc}
 8014c66:	46c0      	nop			@ (mov r8, r8)
 8014c68:	08015df1 	.word	0x08015df1
 8014c6c:	08015de0 	.word	0x08015de0

08014c70 <__multiply>:
 8014c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c72:	0014      	movs	r4, r2
 8014c74:	690a      	ldr	r2, [r1, #16]
 8014c76:	6923      	ldr	r3, [r4, #16]
 8014c78:	000d      	movs	r5, r1
 8014c7a:	b089      	sub	sp, #36	@ 0x24
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	db02      	blt.n	8014c86 <__multiply+0x16>
 8014c80:	0023      	movs	r3, r4
 8014c82:	000c      	movs	r4, r1
 8014c84:	001d      	movs	r5, r3
 8014c86:	6927      	ldr	r7, [r4, #16]
 8014c88:	692e      	ldr	r6, [r5, #16]
 8014c8a:	6861      	ldr	r1, [r4, #4]
 8014c8c:	19bb      	adds	r3, r7, r6
 8014c8e:	9300      	str	r3, [sp, #0]
 8014c90:	68a3      	ldr	r3, [r4, #8]
 8014c92:	19ba      	adds	r2, r7, r6
 8014c94:	4293      	cmp	r3, r2
 8014c96:	da00      	bge.n	8014c9a <__multiply+0x2a>
 8014c98:	3101      	adds	r1, #1
 8014c9a:	f7ff fed5 	bl	8014a48 <_Balloc>
 8014c9e:	4684      	mov	ip, r0
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	d106      	bne.n	8014cb2 <__multiply+0x42>
 8014ca4:	21b1      	movs	r1, #177	@ 0xb1
 8014ca6:	4662      	mov	r2, ip
 8014ca8:	4b44      	ldr	r3, [pc, #272]	@ (8014dbc <__multiply+0x14c>)
 8014caa:	4845      	ldr	r0, [pc, #276]	@ (8014dc0 <__multiply+0x150>)
 8014cac:	0049      	lsls	r1, r1, #1
 8014cae:	f000 fd35 	bl	801571c <__assert_func>
 8014cb2:	0002      	movs	r2, r0
 8014cb4:	19bb      	adds	r3, r7, r6
 8014cb6:	3214      	adds	r2, #20
 8014cb8:	009b      	lsls	r3, r3, #2
 8014cba:	18d3      	adds	r3, r2, r3
 8014cbc:	9301      	str	r3, [sp, #4]
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	0013      	movs	r3, r2
 8014cc2:	9801      	ldr	r0, [sp, #4]
 8014cc4:	4283      	cmp	r3, r0
 8014cc6:	d328      	bcc.n	8014d1a <__multiply+0xaa>
 8014cc8:	0023      	movs	r3, r4
 8014cca:	00bf      	lsls	r7, r7, #2
 8014ccc:	3314      	adds	r3, #20
 8014cce:	9304      	str	r3, [sp, #16]
 8014cd0:	3514      	adds	r5, #20
 8014cd2:	19db      	adds	r3, r3, r7
 8014cd4:	00b6      	lsls	r6, r6, #2
 8014cd6:	9302      	str	r3, [sp, #8]
 8014cd8:	19ab      	adds	r3, r5, r6
 8014cda:	9307      	str	r3, [sp, #28]
 8014cdc:	2304      	movs	r3, #4
 8014cde:	9305      	str	r3, [sp, #20]
 8014ce0:	0023      	movs	r3, r4
 8014ce2:	9902      	ldr	r1, [sp, #8]
 8014ce4:	3315      	adds	r3, #21
 8014ce6:	4299      	cmp	r1, r3
 8014ce8:	d305      	bcc.n	8014cf6 <__multiply+0x86>
 8014cea:	1b0c      	subs	r4, r1, r4
 8014cec:	3c15      	subs	r4, #21
 8014cee:	08a4      	lsrs	r4, r4, #2
 8014cf0:	3401      	adds	r4, #1
 8014cf2:	00a3      	lsls	r3, r4, #2
 8014cf4:	9305      	str	r3, [sp, #20]
 8014cf6:	9b07      	ldr	r3, [sp, #28]
 8014cf8:	429d      	cmp	r5, r3
 8014cfa:	d310      	bcc.n	8014d1e <__multiply+0xae>
 8014cfc:	9b00      	ldr	r3, [sp, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	dd05      	ble.n	8014d0e <__multiply+0x9e>
 8014d02:	9b01      	ldr	r3, [sp, #4]
 8014d04:	3b04      	subs	r3, #4
 8014d06:	9301      	str	r3, [sp, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d052      	beq.n	8014db4 <__multiply+0x144>
 8014d0e:	4663      	mov	r3, ip
 8014d10:	4660      	mov	r0, ip
 8014d12:	9a00      	ldr	r2, [sp, #0]
 8014d14:	611a      	str	r2, [r3, #16]
 8014d16:	b009      	add	sp, #36	@ 0x24
 8014d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d1a:	c302      	stmia	r3!, {r1}
 8014d1c:	e7d1      	b.n	8014cc2 <__multiply+0x52>
 8014d1e:	682c      	ldr	r4, [r5, #0]
 8014d20:	b2a4      	uxth	r4, r4
 8014d22:	2c00      	cmp	r4, #0
 8014d24:	d01f      	beq.n	8014d66 <__multiply+0xf6>
 8014d26:	2300      	movs	r3, #0
 8014d28:	0017      	movs	r7, r2
 8014d2a:	9e04      	ldr	r6, [sp, #16]
 8014d2c:	9303      	str	r3, [sp, #12]
 8014d2e:	ce08      	ldmia	r6!, {r3}
 8014d30:	6839      	ldr	r1, [r7, #0]
 8014d32:	9306      	str	r3, [sp, #24]
 8014d34:	466b      	mov	r3, sp
 8014d36:	8b1b      	ldrh	r3, [r3, #24]
 8014d38:	b288      	uxth	r0, r1
 8014d3a:	4363      	muls	r3, r4
 8014d3c:	181b      	adds	r3, r3, r0
 8014d3e:	9803      	ldr	r0, [sp, #12]
 8014d40:	0c09      	lsrs	r1, r1, #16
 8014d42:	181b      	adds	r3, r3, r0
 8014d44:	9806      	ldr	r0, [sp, #24]
 8014d46:	0c00      	lsrs	r0, r0, #16
 8014d48:	4360      	muls	r0, r4
 8014d4a:	1840      	adds	r0, r0, r1
 8014d4c:	0c19      	lsrs	r1, r3, #16
 8014d4e:	1841      	adds	r1, r0, r1
 8014d50:	0c08      	lsrs	r0, r1, #16
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	0409      	lsls	r1, r1, #16
 8014d56:	4319      	orrs	r1, r3
 8014d58:	9b02      	ldr	r3, [sp, #8]
 8014d5a:	9003      	str	r0, [sp, #12]
 8014d5c:	c702      	stmia	r7!, {r1}
 8014d5e:	42b3      	cmp	r3, r6
 8014d60:	d8e5      	bhi.n	8014d2e <__multiply+0xbe>
 8014d62:	9b05      	ldr	r3, [sp, #20]
 8014d64:	50d0      	str	r0, [r2, r3]
 8014d66:	682c      	ldr	r4, [r5, #0]
 8014d68:	0c24      	lsrs	r4, r4, #16
 8014d6a:	d020      	beq.n	8014dae <__multiply+0x13e>
 8014d6c:	2100      	movs	r1, #0
 8014d6e:	0010      	movs	r0, r2
 8014d70:	6813      	ldr	r3, [r2, #0]
 8014d72:	9e04      	ldr	r6, [sp, #16]
 8014d74:	9103      	str	r1, [sp, #12]
 8014d76:	6831      	ldr	r1, [r6, #0]
 8014d78:	6807      	ldr	r7, [r0, #0]
 8014d7a:	b289      	uxth	r1, r1
 8014d7c:	4361      	muls	r1, r4
 8014d7e:	0c3f      	lsrs	r7, r7, #16
 8014d80:	19c9      	adds	r1, r1, r7
 8014d82:	9f03      	ldr	r7, [sp, #12]
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	19c9      	adds	r1, r1, r7
 8014d88:	040f      	lsls	r7, r1, #16
 8014d8a:	431f      	orrs	r7, r3
 8014d8c:	6007      	str	r7, [r0, #0]
 8014d8e:	ce80      	ldmia	r6!, {r7}
 8014d90:	6843      	ldr	r3, [r0, #4]
 8014d92:	0c3f      	lsrs	r7, r7, #16
 8014d94:	4367      	muls	r7, r4
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	0c09      	lsrs	r1, r1, #16
 8014d9a:	18fb      	adds	r3, r7, r3
 8014d9c:	185b      	adds	r3, r3, r1
 8014d9e:	0c19      	lsrs	r1, r3, #16
 8014da0:	9103      	str	r1, [sp, #12]
 8014da2:	9902      	ldr	r1, [sp, #8]
 8014da4:	3004      	adds	r0, #4
 8014da6:	42b1      	cmp	r1, r6
 8014da8:	d8e5      	bhi.n	8014d76 <__multiply+0x106>
 8014daa:	9905      	ldr	r1, [sp, #20]
 8014dac:	5053      	str	r3, [r2, r1]
 8014dae:	3504      	adds	r5, #4
 8014db0:	3204      	adds	r2, #4
 8014db2:	e7a0      	b.n	8014cf6 <__multiply+0x86>
 8014db4:	9b00      	ldr	r3, [sp, #0]
 8014db6:	3b01      	subs	r3, #1
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	e79f      	b.n	8014cfc <__multiply+0x8c>
 8014dbc:	08015de0 	.word	0x08015de0
 8014dc0:	08015df1 	.word	0x08015df1

08014dc4 <__pow5mult>:
 8014dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dc6:	2303      	movs	r3, #3
 8014dc8:	0015      	movs	r5, r2
 8014dca:	0007      	movs	r7, r0
 8014dcc:	000e      	movs	r6, r1
 8014dce:	401a      	ands	r2, r3
 8014dd0:	421d      	tst	r5, r3
 8014dd2:	d008      	beq.n	8014de6 <__pow5mult+0x22>
 8014dd4:	4925      	ldr	r1, [pc, #148]	@ (8014e6c <__pow5mult+0xa8>)
 8014dd6:	3a01      	subs	r2, #1
 8014dd8:	0092      	lsls	r2, r2, #2
 8014dda:	5852      	ldr	r2, [r2, r1]
 8014ddc:	2300      	movs	r3, #0
 8014dde:	0031      	movs	r1, r6
 8014de0:	f7ff fe9a 	bl	8014b18 <__multadd>
 8014de4:	0006      	movs	r6, r0
 8014de6:	10ad      	asrs	r5, r5, #2
 8014de8:	d03d      	beq.n	8014e66 <__pow5mult+0xa2>
 8014dea:	69fc      	ldr	r4, [r7, #28]
 8014dec:	2c00      	cmp	r4, #0
 8014dee:	d10f      	bne.n	8014e10 <__pow5mult+0x4c>
 8014df0:	2010      	movs	r0, #16
 8014df2:	f7ff fd6d 	bl	80148d0 <malloc>
 8014df6:	1e02      	subs	r2, r0, #0
 8014df8:	61f8      	str	r0, [r7, #28]
 8014dfa:	d105      	bne.n	8014e08 <__pow5mult+0x44>
 8014dfc:	21b4      	movs	r1, #180	@ 0xb4
 8014dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8014e70 <__pow5mult+0xac>)
 8014e00:	481c      	ldr	r0, [pc, #112]	@ (8014e74 <__pow5mult+0xb0>)
 8014e02:	31ff      	adds	r1, #255	@ 0xff
 8014e04:	f000 fc8a 	bl	801571c <__assert_func>
 8014e08:	6044      	str	r4, [r0, #4]
 8014e0a:	6084      	str	r4, [r0, #8]
 8014e0c:	6004      	str	r4, [r0, #0]
 8014e0e:	60c4      	str	r4, [r0, #12]
 8014e10:	69fb      	ldr	r3, [r7, #28]
 8014e12:	689c      	ldr	r4, [r3, #8]
 8014e14:	9301      	str	r3, [sp, #4]
 8014e16:	2c00      	cmp	r4, #0
 8014e18:	d108      	bne.n	8014e2c <__pow5mult+0x68>
 8014e1a:	0038      	movs	r0, r7
 8014e1c:	4916      	ldr	r1, [pc, #88]	@ (8014e78 <__pow5mult+0xb4>)
 8014e1e:	f7ff ff0f 	bl	8014c40 <__i2b>
 8014e22:	9b01      	ldr	r3, [sp, #4]
 8014e24:	0004      	movs	r4, r0
 8014e26:	6098      	str	r0, [r3, #8]
 8014e28:	2300      	movs	r3, #0
 8014e2a:	6003      	str	r3, [r0, #0]
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	421d      	tst	r5, r3
 8014e30:	d00a      	beq.n	8014e48 <__pow5mult+0x84>
 8014e32:	0031      	movs	r1, r6
 8014e34:	0022      	movs	r2, r4
 8014e36:	0038      	movs	r0, r7
 8014e38:	f7ff ff1a 	bl	8014c70 <__multiply>
 8014e3c:	0031      	movs	r1, r6
 8014e3e:	9001      	str	r0, [sp, #4]
 8014e40:	0038      	movs	r0, r7
 8014e42:	f7ff fe45 	bl	8014ad0 <_Bfree>
 8014e46:	9e01      	ldr	r6, [sp, #4]
 8014e48:	106d      	asrs	r5, r5, #1
 8014e4a:	d00c      	beq.n	8014e66 <__pow5mult+0xa2>
 8014e4c:	6820      	ldr	r0, [r4, #0]
 8014e4e:	2800      	cmp	r0, #0
 8014e50:	d107      	bne.n	8014e62 <__pow5mult+0x9e>
 8014e52:	0022      	movs	r2, r4
 8014e54:	0021      	movs	r1, r4
 8014e56:	0038      	movs	r0, r7
 8014e58:	f7ff ff0a 	bl	8014c70 <__multiply>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	6020      	str	r0, [r4, #0]
 8014e60:	6003      	str	r3, [r0, #0]
 8014e62:	0004      	movs	r4, r0
 8014e64:	e7e2      	b.n	8014e2c <__pow5mult+0x68>
 8014e66:	0030      	movs	r0, r6
 8014e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014e6a:	46c0      	nop			@ (mov r8, r8)
 8014e6c:	08015ea4 	.word	0x08015ea4
 8014e70:	08015d71 	.word	0x08015d71
 8014e74:	08015df1 	.word	0x08015df1
 8014e78:	00000271 	.word	0x00000271

08014e7c <__lshift>:
 8014e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e7e:	000c      	movs	r4, r1
 8014e80:	0016      	movs	r6, r2
 8014e82:	6923      	ldr	r3, [r4, #16]
 8014e84:	1157      	asrs	r7, r2, #5
 8014e86:	b085      	sub	sp, #20
 8014e88:	18fb      	adds	r3, r7, r3
 8014e8a:	9301      	str	r3, [sp, #4]
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	6849      	ldr	r1, [r1, #4]
 8014e92:	68a3      	ldr	r3, [r4, #8]
 8014e94:	9002      	str	r0, [sp, #8]
 8014e96:	9a00      	ldr	r2, [sp, #0]
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	db10      	blt.n	8014ebe <__lshift+0x42>
 8014e9c:	9802      	ldr	r0, [sp, #8]
 8014e9e:	f7ff fdd3 	bl	8014a48 <_Balloc>
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	0001      	movs	r1, r0
 8014ea6:	0005      	movs	r5, r0
 8014ea8:	001a      	movs	r2, r3
 8014eaa:	3114      	adds	r1, #20
 8014eac:	4298      	cmp	r0, r3
 8014eae:	d10c      	bne.n	8014eca <__lshift+0x4e>
 8014eb0:	21ef      	movs	r1, #239	@ 0xef
 8014eb2:	002a      	movs	r2, r5
 8014eb4:	4b25      	ldr	r3, [pc, #148]	@ (8014f4c <__lshift+0xd0>)
 8014eb6:	4826      	ldr	r0, [pc, #152]	@ (8014f50 <__lshift+0xd4>)
 8014eb8:	0049      	lsls	r1, r1, #1
 8014eba:	f000 fc2f 	bl	801571c <__assert_func>
 8014ebe:	3101      	adds	r1, #1
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	e7e8      	b.n	8014e96 <__lshift+0x1a>
 8014ec4:	0098      	lsls	r0, r3, #2
 8014ec6:	500a      	str	r2, [r1, r0]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	42bb      	cmp	r3, r7
 8014ecc:	dbfa      	blt.n	8014ec4 <__lshift+0x48>
 8014ece:	43fb      	mvns	r3, r7
 8014ed0:	17db      	asrs	r3, r3, #31
 8014ed2:	401f      	ands	r7, r3
 8014ed4:	00bf      	lsls	r7, r7, #2
 8014ed6:	0023      	movs	r3, r4
 8014ed8:	201f      	movs	r0, #31
 8014eda:	19c9      	adds	r1, r1, r7
 8014edc:	0037      	movs	r7, r6
 8014ede:	6922      	ldr	r2, [r4, #16]
 8014ee0:	3314      	adds	r3, #20
 8014ee2:	0092      	lsls	r2, r2, #2
 8014ee4:	189a      	adds	r2, r3, r2
 8014ee6:	4007      	ands	r7, r0
 8014ee8:	4206      	tst	r6, r0
 8014eea:	d029      	beq.n	8014f40 <__lshift+0xc4>
 8014eec:	3001      	adds	r0, #1
 8014eee:	1bc0      	subs	r0, r0, r7
 8014ef0:	9003      	str	r0, [sp, #12]
 8014ef2:	468c      	mov	ip, r1
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	681e      	ldr	r6, [r3, #0]
 8014ef8:	40be      	lsls	r6, r7
 8014efa:	4306      	orrs	r6, r0
 8014efc:	4660      	mov	r0, ip
 8014efe:	c040      	stmia	r0!, {r6}
 8014f00:	4684      	mov	ip, r0
 8014f02:	9e03      	ldr	r6, [sp, #12]
 8014f04:	cb01      	ldmia	r3!, {r0}
 8014f06:	40f0      	lsrs	r0, r6
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d8f4      	bhi.n	8014ef6 <__lshift+0x7a>
 8014f0c:	0026      	movs	r6, r4
 8014f0e:	3615      	adds	r6, #21
 8014f10:	2304      	movs	r3, #4
 8014f12:	42b2      	cmp	r2, r6
 8014f14:	d304      	bcc.n	8014f20 <__lshift+0xa4>
 8014f16:	1b13      	subs	r3, r2, r4
 8014f18:	3b15      	subs	r3, #21
 8014f1a:	089b      	lsrs	r3, r3, #2
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	50c8      	str	r0, [r1, r3]
 8014f22:	2800      	cmp	r0, #0
 8014f24:	d002      	beq.n	8014f2c <__lshift+0xb0>
 8014f26:	9b01      	ldr	r3, [sp, #4]
 8014f28:	3302      	adds	r3, #2
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	9b00      	ldr	r3, [sp, #0]
 8014f2e:	9802      	ldr	r0, [sp, #8]
 8014f30:	3b01      	subs	r3, #1
 8014f32:	0021      	movs	r1, r4
 8014f34:	612b      	str	r3, [r5, #16]
 8014f36:	f7ff fdcb 	bl	8014ad0 <_Bfree>
 8014f3a:	0028      	movs	r0, r5
 8014f3c:	b005      	add	sp, #20
 8014f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f40:	cb01      	ldmia	r3!, {r0}
 8014f42:	c101      	stmia	r1!, {r0}
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d8fb      	bhi.n	8014f40 <__lshift+0xc4>
 8014f48:	e7f0      	b.n	8014f2c <__lshift+0xb0>
 8014f4a:	46c0      	nop			@ (mov r8, r8)
 8014f4c:	08015de0 	.word	0x08015de0
 8014f50:	08015df1 	.word	0x08015df1

08014f54 <__mcmp>:
 8014f54:	b530      	push	{r4, r5, lr}
 8014f56:	690b      	ldr	r3, [r1, #16]
 8014f58:	6904      	ldr	r4, [r0, #16]
 8014f5a:	0002      	movs	r2, r0
 8014f5c:	1ae0      	subs	r0, r4, r3
 8014f5e:	429c      	cmp	r4, r3
 8014f60:	d10f      	bne.n	8014f82 <__mcmp+0x2e>
 8014f62:	3214      	adds	r2, #20
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	3114      	adds	r1, #20
 8014f68:	0014      	movs	r4, r2
 8014f6a:	18c9      	adds	r1, r1, r3
 8014f6c:	18d2      	adds	r2, r2, r3
 8014f6e:	3a04      	subs	r2, #4
 8014f70:	3904      	subs	r1, #4
 8014f72:	6815      	ldr	r5, [r2, #0]
 8014f74:	680b      	ldr	r3, [r1, #0]
 8014f76:	429d      	cmp	r5, r3
 8014f78:	d004      	beq.n	8014f84 <__mcmp+0x30>
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	429d      	cmp	r5, r3
 8014f7e:	d200      	bcs.n	8014f82 <__mcmp+0x2e>
 8014f80:	3802      	subs	r0, #2
 8014f82:	bd30      	pop	{r4, r5, pc}
 8014f84:	4294      	cmp	r4, r2
 8014f86:	d3f2      	bcc.n	8014f6e <__mcmp+0x1a>
 8014f88:	e7fb      	b.n	8014f82 <__mcmp+0x2e>
	...

08014f8c <__mdiff>:
 8014f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f8e:	000c      	movs	r4, r1
 8014f90:	b087      	sub	sp, #28
 8014f92:	9000      	str	r0, [sp, #0]
 8014f94:	0011      	movs	r1, r2
 8014f96:	0020      	movs	r0, r4
 8014f98:	0017      	movs	r7, r2
 8014f9a:	f7ff ffdb 	bl	8014f54 <__mcmp>
 8014f9e:	1e05      	subs	r5, r0, #0
 8014fa0:	d110      	bne.n	8014fc4 <__mdiff+0x38>
 8014fa2:	0001      	movs	r1, r0
 8014fa4:	9800      	ldr	r0, [sp, #0]
 8014fa6:	f7ff fd4f 	bl	8014a48 <_Balloc>
 8014faa:	1e02      	subs	r2, r0, #0
 8014fac:	d104      	bne.n	8014fb8 <__mdiff+0x2c>
 8014fae:	4b40      	ldr	r3, [pc, #256]	@ (80150b0 <__mdiff+0x124>)
 8014fb0:	4840      	ldr	r0, [pc, #256]	@ (80150b4 <__mdiff+0x128>)
 8014fb2:	4941      	ldr	r1, [pc, #260]	@ (80150b8 <__mdiff+0x12c>)
 8014fb4:	f000 fbb2 	bl	801571c <__assert_func>
 8014fb8:	2301      	movs	r3, #1
 8014fba:	6145      	str	r5, [r0, #20]
 8014fbc:	6103      	str	r3, [r0, #16]
 8014fbe:	0010      	movs	r0, r2
 8014fc0:	b007      	add	sp, #28
 8014fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fc4:	2600      	movs	r6, #0
 8014fc6:	42b0      	cmp	r0, r6
 8014fc8:	da03      	bge.n	8014fd2 <__mdiff+0x46>
 8014fca:	0023      	movs	r3, r4
 8014fcc:	003c      	movs	r4, r7
 8014fce:	001f      	movs	r7, r3
 8014fd0:	3601      	adds	r6, #1
 8014fd2:	6861      	ldr	r1, [r4, #4]
 8014fd4:	9800      	ldr	r0, [sp, #0]
 8014fd6:	f7ff fd37 	bl	8014a48 <_Balloc>
 8014fda:	1e02      	subs	r2, r0, #0
 8014fdc:	d103      	bne.n	8014fe6 <__mdiff+0x5a>
 8014fde:	4b34      	ldr	r3, [pc, #208]	@ (80150b0 <__mdiff+0x124>)
 8014fe0:	4834      	ldr	r0, [pc, #208]	@ (80150b4 <__mdiff+0x128>)
 8014fe2:	4936      	ldr	r1, [pc, #216]	@ (80150bc <__mdiff+0x130>)
 8014fe4:	e7e6      	b.n	8014fb4 <__mdiff+0x28>
 8014fe6:	6923      	ldr	r3, [r4, #16]
 8014fe8:	3414      	adds	r4, #20
 8014fea:	9300      	str	r3, [sp, #0]
 8014fec:	009b      	lsls	r3, r3, #2
 8014fee:	18e3      	adds	r3, r4, r3
 8014ff0:	0021      	movs	r1, r4
 8014ff2:	9401      	str	r4, [sp, #4]
 8014ff4:	003c      	movs	r4, r7
 8014ff6:	9302      	str	r3, [sp, #8]
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	3414      	adds	r4, #20
 8014ffc:	009b      	lsls	r3, r3, #2
 8014ffe:	18e3      	adds	r3, r4, r3
 8015000:	9303      	str	r3, [sp, #12]
 8015002:	0003      	movs	r3, r0
 8015004:	60c6      	str	r6, [r0, #12]
 8015006:	468c      	mov	ip, r1
 8015008:	2000      	movs	r0, #0
 801500a:	3314      	adds	r3, #20
 801500c:	9304      	str	r3, [sp, #16]
 801500e:	9305      	str	r3, [sp, #20]
 8015010:	4663      	mov	r3, ip
 8015012:	cb20      	ldmia	r3!, {r5}
 8015014:	b2a9      	uxth	r1, r5
 8015016:	000e      	movs	r6, r1
 8015018:	469c      	mov	ip, r3
 801501a:	cc08      	ldmia	r4!, {r3}
 801501c:	0c2d      	lsrs	r5, r5, #16
 801501e:	b299      	uxth	r1, r3
 8015020:	1a71      	subs	r1, r6, r1
 8015022:	1809      	adds	r1, r1, r0
 8015024:	0c1b      	lsrs	r3, r3, #16
 8015026:	1408      	asrs	r0, r1, #16
 8015028:	1aeb      	subs	r3, r5, r3
 801502a:	181b      	adds	r3, r3, r0
 801502c:	1418      	asrs	r0, r3, #16
 801502e:	b289      	uxth	r1, r1
 8015030:	041b      	lsls	r3, r3, #16
 8015032:	4319      	orrs	r1, r3
 8015034:	9b05      	ldr	r3, [sp, #20]
 8015036:	c302      	stmia	r3!, {r1}
 8015038:	9305      	str	r3, [sp, #20]
 801503a:	9b03      	ldr	r3, [sp, #12]
 801503c:	42a3      	cmp	r3, r4
 801503e:	d8e7      	bhi.n	8015010 <__mdiff+0x84>
 8015040:	0039      	movs	r1, r7
 8015042:	9c03      	ldr	r4, [sp, #12]
 8015044:	3115      	adds	r1, #21
 8015046:	2304      	movs	r3, #4
 8015048:	428c      	cmp	r4, r1
 801504a:	d304      	bcc.n	8015056 <__mdiff+0xca>
 801504c:	1be3      	subs	r3, r4, r7
 801504e:	3b15      	subs	r3, #21
 8015050:	089b      	lsrs	r3, r3, #2
 8015052:	3301      	adds	r3, #1
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	9901      	ldr	r1, [sp, #4]
 8015058:	18cd      	adds	r5, r1, r3
 801505a:	9904      	ldr	r1, [sp, #16]
 801505c:	002e      	movs	r6, r5
 801505e:	18cb      	adds	r3, r1, r3
 8015060:	001f      	movs	r7, r3
 8015062:	9902      	ldr	r1, [sp, #8]
 8015064:	428e      	cmp	r6, r1
 8015066:	d311      	bcc.n	801508c <__mdiff+0x100>
 8015068:	9c02      	ldr	r4, [sp, #8]
 801506a:	1ee9      	subs	r1, r5, #3
 801506c:	2000      	movs	r0, #0
 801506e:	428c      	cmp	r4, r1
 8015070:	d304      	bcc.n	801507c <__mdiff+0xf0>
 8015072:	0021      	movs	r1, r4
 8015074:	3103      	adds	r1, #3
 8015076:	1b49      	subs	r1, r1, r5
 8015078:	0889      	lsrs	r1, r1, #2
 801507a:	0088      	lsls	r0, r1, #2
 801507c:	181b      	adds	r3, r3, r0
 801507e:	3b04      	subs	r3, #4
 8015080:	6819      	ldr	r1, [r3, #0]
 8015082:	2900      	cmp	r1, #0
 8015084:	d010      	beq.n	80150a8 <__mdiff+0x11c>
 8015086:	9b00      	ldr	r3, [sp, #0]
 8015088:	6113      	str	r3, [r2, #16]
 801508a:	e798      	b.n	8014fbe <__mdiff+0x32>
 801508c:	4684      	mov	ip, r0
 801508e:	ce02      	ldmia	r6!, {r1}
 8015090:	b288      	uxth	r0, r1
 8015092:	4460      	add	r0, ip
 8015094:	1400      	asrs	r0, r0, #16
 8015096:	0c0c      	lsrs	r4, r1, #16
 8015098:	1904      	adds	r4, r0, r4
 801509a:	4461      	add	r1, ip
 801509c:	1420      	asrs	r0, r4, #16
 801509e:	b289      	uxth	r1, r1
 80150a0:	0424      	lsls	r4, r4, #16
 80150a2:	4321      	orrs	r1, r4
 80150a4:	c702      	stmia	r7!, {r1}
 80150a6:	e7dc      	b.n	8015062 <__mdiff+0xd6>
 80150a8:	9900      	ldr	r1, [sp, #0]
 80150aa:	3901      	subs	r1, #1
 80150ac:	9100      	str	r1, [sp, #0]
 80150ae:	e7e6      	b.n	801507e <__mdiff+0xf2>
 80150b0:	08015de0 	.word	0x08015de0
 80150b4:	08015df1 	.word	0x08015df1
 80150b8:	00000237 	.word	0x00000237
 80150bc:	00000245 	.word	0x00000245

080150c0 <__d2b>:
 80150c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150c2:	2101      	movs	r1, #1
 80150c4:	0016      	movs	r6, r2
 80150c6:	001f      	movs	r7, r3
 80150c8:	f7ff fcbe 	bl	8014a48 <_Balloc>
 80150cc:	1e04      	subs	r4, r0, #0
 80150ce:	d105      	bne.n	80150dc <__d2b+0x1c>
 80150d0:	0022      	movs	r2, r4
 80150d2:	4b25      	ldr	r3, [pc, #148]	@ (8015168 <__d2b+0xa8>)
 80150d4:	4825      	ldr	r0, [pc, #148]	@ (801516c <__d2b+0xac>)
 80150d6:	4926      	ldr	r1, [pc, #152]	@ (8015170 <__d2b+0xb0>)
 80150d8:	f000 fb20 	bl	801571c <__assert_func>
 80150dc:	033b      	lsls	r3, r7, #12
 80150de:	007d      	lsls	r5, r7, #1
 80150e0:	0b1b      	lsrs	r3, r3, #12
 80150e2:	0d6d      	lsrs	r5, r5, #21
 80150e4:	d002      	beq.n	80150ec <__d2b+0x2c>
 80150e6:	2280      	movs	r2, #128	@ 0x80
 80150e8:	0352      	lsls	r2, r2, #13
 80150ea:	4313      	orrs	r3, r2
 80150ec:	9301      	str	r3, [sp, #4]
 80150ee:	2e00      	cmp	r6, #0
 80150f0:	d025      	beq.n	801513e <__d2b+0x7e>
 80150f2:	4668      	mov	r0, sp
 80150f4:	9600      	str	r6, [sp, #0]
 80150f6:	f7ff fd74 	bl	8014be2 <__lo0bits>
 80150fa:	9b01      	ldr	r3, [sp, #4]
 80150fc:	9900      	ldr	r1, [sp, #0]
 80150fe:	2800      	cmp	r0, #0
 8015100:	d01b      	beq.n	801513a <__d2b+0x7a>
 8015102:	2220      	movs	r2, #32
 8015104:	001e      	movs	r6, r3
 8015106:	1a12      	subs	r2, r2, r0
 8015108:	4096      	lsls	r6, r2
 801510a:	0032      	movs	r2, r6
 801510c:	40c3      	lsrs	r3, r0
 801510e:	430a      	orrs	r2, r1
 8015110:	6162      	str	r2, [r4, #20]
 8015112:	9301      	str	r3, [sp, #4]
 8015114:	9e01      	ldr	r6, [sp, #4]
 8015116:	61a6      	str	r6, [r4, #24]
 8015118:	1e73      	subs	r3, r6, #1
 801511a:	419e      	sbcs	r6, r3
 801511c:	3601      	adds	r6, #1
 801511e:	6126      	str	r6, [r4, #16]
 8015120:	2d00      	cmp	r5, #0
 8015122:	d014      	beq.n	801514e <__d2b+0x8e>
 8015124:	2635      	movs	r6, #53	@ 0x35
 8015126:	4b13      	ldr	r3, [pc, #76]	@ (8015174 <__d2b+0xb4>)
 8015128:	18ed      	adds	r5, r5, r3
 801512a:	9b08      	ldr	r3, [sp, #32]
 801512c:	182d      	adds	r5, r5, r0
 801512e:	601d      	str	r5, [r3, #0]
 8015130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015132:	1a36      	subs	r6, r6, r0
 8015134:	601e      	str	r6, [r3, #0]
 8015136:	0020      	movs	r0, r4
 8015138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801513a:	6161      	str	r1, [r4, #20]
 801513c:	e7ea      	b.n	8015114 <__d2b+0x54>
 801513e:	a801      	add	r0, sp, #4
 8015140:	f7ff fd4f 	bl	8014be2 <__lo0bits>
 8015144:	9b01      	ldr	r3, [sp, #4]
 8015146:	2601      	movs	r6, #1
 8015148:	6163      	str	r3, [r4, #20]
 801514a:	3020      	adds	r0, #32
 801514c:	e7e7      	b.n	801511e <__d2b+0x5e>
 801514e:	4b0a      	ldr	r3, [pc, #40]	@ (8015178 <__d2b+0xb8>)
 8015150:	18c0      	adds	r0, r0, r3
 8015152:	9b08      	ldr	r3, [sp, #32]
 8015154:	6018      	str	r0, [r3, #0]
 8015156:	4b09      	ldr	r3, [pc, #36]	@ (801517c <__d2b+0xbc>)
 8015158:	18f3      	adds	r3, r6, r3
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	18e3      	adds	r3, r4, r3
 801515e:	6958      	ldr	r0, [r3, #20]
 8015160:	f7ff fd1e 	bl	8014ba0 <__hi0bits>
 8015164:	0176      	lsls	r6, r6, #5
 8015166:	e7e3      	b.n	8015130 <__d2b+0x70>
 8015168:	08015de0 	.word	0x08015de0
 801516c:	08015df1 	.word	0x08015df1
 8015170:	0000030f 	.word	0x0000030f
 8015174:	fffffbcd 	.word	0xfffffbcd
 8015178:	fffffbce 	.word	0xfffffbce
 801517c:	3fffffff 	.word	0x3fffffff

08015180 <__sfputc_r>:
 8015180:	6893      	ldr	r3, [r2, #8]
 8015182:	b510      	push	{r4, lr}
 8015184:	3b01      	subs	r3, #1
 8015186:	6093      	str	r3, [r2, #8]
 8015188:	2b00      	cmp	r3, #0
 801518a:	da04      	bge.n	8015196 <__sfputc_r+0x16>
 801518c:	6994      	ldr	r4, [r2, #24]
 801518e:	42a3      	cmp	r3, r4
 8015190:	db07      	blt.n	80151a2 <__sfputc_r+0x22>
 8015192:	290a      	cmp	r1, #10
 8015194:	d005      	beq.n	80151a2 <__sfputc_r+0x22>
 8015196:	6813      	ldr	r3, [r2, #0]
 8015198:	1c58      	adds	r0, r3, #1
 801519a:	6010      	str	r0, [r2, #0]
 801519c:	7019      	strb	r1, [r3, #0]
 801519e:	0008      	movs	r0, r1
 80151a0:	bd10      	pop	{r4, pc}
 80151a2:	f7fe fb9b 	bl	80138dc <__swbuf_r>
 80151a6:	0001      	movs	r1, r0
 80151a8:	e7f9      	b.n	801519e <__sfputc_r+0x1e>

080151aa <__sfputs_r>:
 80151aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ac:	0006      	movs	r6, r0
 80151ae:	000f      	movs	r7, r1
 80151b0:	0014      	movs	r4, r2
 80151b2:	18d5      	adds	r5, r2, r3
 80151b4:	42ac      	cmp	r4, r5
 80151b6:	d101      	bne.n	80151bc <__sfputs_r+0x12>
 80151b8:	2000      	movs	r0, #0
 80151ba:	e007      	b.n	80151cc <__sfputs_r+0x22>
 80151bc:	7821      	ldrb	r1, [r4, #0]
 80151be:	003a      	movs	r2, r7
 80151c0:	0030      	movs	r0, r6
 80151c2:	f7ff ffdd 	bl	8015180 <__sfputc_r>
 80151c6:	3401      	adds	r4, #1
 80151c8:	1c43      	adds	r3, r0, #1
 80151ca:	d1f3      	bne.n	80151b4 <__sfputs_r+0xa>
 80151cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080151d0 <_vfiprintf_r>:
 80151d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151d2:	b0a1      	sub	sp, #132	@ 0x84
 80151d4:	000f      	movs	r7, r1
 80151d6:	0015      	movs	r5, r2
 80151d8:	001e      	movs	r6, r3
 80151da:	9003      	str	r0, [sp, #12]
 80151dc:	2800      	cmp	r0, #0
 80151de:	d004      	beq.n	80151ea <_vfiprintf_r+0x1a>
 80151e0:	6a03      	ldr	r3, [r0, #32]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d101      	bne.n	80151ea <_vfiprintf_r+0x1a>
 80151e6:	f7fe fa7f 	bl	80136e8 <__sinit>
 80151ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80151ec:	07db      	lsls	r3, r3, #31
 80151ee:	d405      	bmi.n	80151fc <_vfiprintf_r+0x2c>
 80151f0:	89bb      	ldrh	r3, [r7, #12]
 80151f2:	059b      	lsls	r3, r3, #22
 80151f4:	d402      	bmi.n	80151fc <_vfiprintf_r+0x2c>
 80151f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80151f8:	f7fe fc95 	bl	8013b26 <__retarget_lock_acquire_recursive>
 80151fc:	89bb      	ldrh	r3, [r7, #12]
 80151fe:	071b      	lsls	r3, r3, #28
 8015200:	d502      	bpl.n	8015208 <_vfiprintf_r+0x38>
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d113      	bne.n	8015230 <_vfiprintf_r+0x60>
 8015208:	0039      	movs	r1, r7
 801520a:	9803      	ldr	r0, [sp, #12]
 801520c:	f7fe fba8 	bl	8013960 <__swsetup_r>
 8015210:	2800      	cmp	r0, #0
 8015212:	d00d      	beq.n	8015230 <_vfiprintf_r+0x60>
 8015214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015216:	07db      	lsls	r3, r3, #31
 8015218:	d503      	bpl.n	8015222 <_vfiprintf_r+0x52>
 801521a:	2001      	movs	r0, #1
 801521c:	4240      	negs	r0, r0
 801521e:	b021      	add	sp, #132	@ 0x84
 8015220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015222:	89bb      	ldrh	r3, [r7, #12]
 8015224:	059b      	lsls	r3, r3, #22
 8015226:	d4f8      	bmi.n	801521a <_vfiprintf_r+0x4a>
 8015228:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801522a:	f7fe fc7d 	bl	8013b28 <__retarget_lock_release_recursive>
 801522e:	e7f4      	b.n	801521a <_vfiprintf_r+0x4a>
 8015230:	2300      	movs	r3, #0
 8015232:	ac08      	add	r4, sp, #32
 8015234:	6163      	str	r3, [r4, #20]
 8015236:	3320      	adds	r3, #32
 8015238:	7663      	strb	r3, [r4, #25]
 801523a:	3310      	adds	r3, #16
 801523c:	76a3      	strb	r3, [r4, #26]
 801523e:	9607      	str	r6, [sp, #28]
 8015240:	002e      	movs	r6, r5
 8015242:	7833      	ldrb	r3, [r6, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <_vfiprintf_r+0x7c>
 8015248:	2b25      	cmp	r3, #37	@ 0x25
 801524a:	d148      	bne.n	80152de <_vfiprintf_r+0x10e>
 801524c:	1b73      	subs	r3, r6, r5
 801524e:	9305      	str	r3, [sp, #20]
 8015250:	42ae      	cmp	r6, r5
 8015252:	d00b      	beq.n	801526c <_vfiprintf_r+0x9c>
 8015254:	002a      	movs	r2, r5
 8015256:	0039      	movs	r1, r7
 8015258:	9803      	ldr	r0, [sp, #12]
 801525a:	f7ff ffa6 	bl	80151aa <__sfputs_r>
 801525e:	3001      	adds	r0, #1
 8015260:	d100      	bne.n	8015264 <_vfiprintf_r+0x94>
 8015262:	e0ae      	b.n	80153c2 <_vfiprintf_r+0x1f2>
 8015264:	6963      	ldr	r3, [r4, #20]
 8015266:	9a05      	ldr	r2, [sp, #20]
 8015268:	189b      	adds	r3, r3, r2
 801526a:	6163      	str	r3, [r4, #20]
 801526c:	7833      	ldrb	r3, [r6, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d100      	bne.n	8015274 <_vfiprintf_r+0xa4>
 8015272:	e0a6      	b.n	80153c2 <_vfiprintf_r+0x1f2>
 8015274:	2201      	movs	r2, #1
 8015276:	2300      	movs	r3, #0
 8015278:	4252      	negs	r2, r2
 801527a:	6062      	str	r2, [r4, #4]
 801527c:	a904      	add	r1, sp, #16
 801527e:	3254      	adds	r2, #84	@ 0x54
 8015280:	1852      	adds	r2, r2, r1
 8015282:	1c75      	adds	r5, r6, #1
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	60e3      	str	r3, [r4, #12]
 8015288:	60a3      	str	r3, [r4, #8]
 801528a:	7013      	strb	r3, [r2, #0]
 801528c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801528e:	4b59      	ldr	r3, [pc, #356]	@ (80153f4 <_vfiprintf_r+0x224>)
 8015290:	2205      	movs	r2, #5
 8015292:	0018      	movs	r0, r3
 8015294:	7829      	ldrb	r1, [r5, #0]
 8015296:	9305      	str	r3, [sp, #20]
 8015298:	f7fe fc47 	bl	8013b2a <memchr>
 801529c:	1c6e      	adds	r6, r5, #1
 801529e:	2800      	cmp	r0, #0
 80152a0:	d11f      	bne.n	80152e2 <_vfiprintf_r+0x112>
 80152a2:	6822      	ldr	r2, [r4, #0]
 80152a4:	06d3      	lsls	r3, r2, #27
 80152a6:	d504      	bpl.n	80152b2 <_vfiprintf_r+0xe2>
 80152a8:	2353      	movs	r3, #83	@ 0x53
 80152aa:	a904      	add	r1, sp, #16
 80152ac:	185b      	adds	r3, r3, r1
 80152ae:	2120      	movs	r1, #32
 80152b0:	7019      	strb	r1, [r3, #0]
 80152b2:	0713      	lsls	r3, r2, #28
 80152b4:	d504      	bpl.n	80152c0 <_vfiprintf_r+0xf0>
 80152b6:	2353      	movs	r3, #83	@ 0x53
 80152b8:	a904      	add	r1, sp, #16
 80152ba:	185b      	adds	r3, r3, r1
 80152bc:	212b      	movs	r1, #43	@ 0x2b
 80152be:	7019      	strb	r1, [r3, #0]
 80152c0:	782b      	ldrb	r3, [r5, #0]
 80152c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80152c4:	d016      	beq.n	80152f4 <_vfiprintf_r+0x124>
 80152c6:	002e      	movs	r6, r5
 80152c8:	2100      	movs	r1, #0
 80152ca:	200a      	movs	r0, #10
 80152cc:	68e3      	ldr	r3, [r4, #12]
 80152ce:	7832      	ldrb	r2, [r6, #0]
 80152d0:	1c75      	adds	r5, r6, #1
 80152d2:	3a30      	subs	r2, #48	@ 0x30
 80152d4:	2a09      	cmp	r2, #9
 80152d6:	d950      	bls.n	801537a <_vfiprintf_r+0x1aa>
 80152d8:	2900      	cmp	r1, #0
 80152da:	d111      	bne.n	8015300 <_vfiprintf_r+0x130>
 80152dc:	e017      	b.n	801530e <_vfiprintf_r+0x13e>
 80152de:	3601      	adds	r6, #1
 80152e0:	e7af      	b.n	8015242 <_vfiprintf_r+0x72>
 80152e2:	9b05      	ldr	r3, [sp, #20]
 80152e4:	6822      	ldr	r2, [r4, #0]
 80152e6:	1ac0      	subs	r0, r0, r3
 80152e8:	2301      	movs	r3, #1
 80152ea:	4083      	lsls	r3, r0
 80152ec:	4313      	orrs	r3, r2
 80152ee:	0035      	movs	r5, r6
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	e7cc      	b.n	801528e <_vfiprintf_r+0xbe>
 80152f4:	9b07      	ldr	r3, [sp, #28]
 80152f6:	1d19      	adds	r1, r3, #4
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	9107      	str	r1, [sp, #28]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	db01      	blt.n	8015304 <_vfiprintf_r+0x134>
 8015300:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015302:	e004      	b.n	801530e <_vfiprintf_r+0x13e>
 8015304:	425b      	negs	r3, r3
 8015306:	60e3      	str	r3, [r4, #12]
 8015308:	2302      	movs	r3, #2
 801530a:	4313      	orrs	r3, r2
 801530c:	6023      	str	r3, [r4, #0]
 801530e:	7833      	ldrb	r3, [r6, #0]
 8015310:	2b2e      	cmp	r3, #46	@ 0x2e
 8015312:	d10c      	bne.n	801532e <_vfiprintf_r+0x15e>
 8015314:	7873      	ldrb	r3, [r6, #1]
 8015316:	2b2a      	cmp	r3, #42	@ 0x2a
 8015318:	d134      	bne.n	8015384 <_vfiprintf_r+0x1b4>
 801531a:	9b07      	ldr	r3, [sp, #28]
 801531c:	3602      	adds	r6, #2
 801531e:	1d1a      	adds	r2, r3, #4
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	9207      	str	r2, [sp, #28]
 8015324:	2b00      	cmp	r3, #0
 8015326:	da01      	bge.n	801532c <_vfiprintf_r+0x15c>
 8015328:	2301      	movs	r3, #1
 801532a:	425b      	negs	r3, r3
 801532c:	9309      	str	r3, [sp, #36]	@ 0x24
 801532e:	4d32      	ldr	r5, [pc, #200]	@ (80153f8 <_vfiprintf_r+0x228>)
 8015330:	2203      	movs	r2, #3
 8015332:	0028      	movs	r0, r5
 8015334:	7831      	ldrb	r1, [r6, #0]
 8015336:	f7fe fbf8 	bl	8013b2a <memchr>
 801533a:	2800      	cmp	r0, #0
 801533c:	d006      	beq.n	801534c <_vfiprintf_r+0x17c>
 801533e:	2340      	movs	r3, #64	@ 0x40
 8015340:	1b40      	subs	r0, r0, r5
 8015342:	4083      	lsls	r3, r0
 8015344:	6822      	ldr	r2, [r4, #0]
 8015346:	3601      	adds	r6, #1
 8015348:	4313      	orrs	r3, r2
 801534a:	6023      	str	r3, [r4, #0]
 801534c:	7831      	ldrb	r1, [r6, #0]
 801534e:	2206      	movs	r2, #6
 8015350:	482a      	ldr	r0, [pc, #168]	@ (80153fc <_vfiprintf_r+0x22c>)
 8015352:	1c75      	adds	r5, r6, #1
 8015354:	7621      	strb	r1, [r4, #24]
 8015356:	f7fe fbe8 	bl	8013b2a <memchr>
 801535a:	2800      	cmp	r0, #0
 801535c:	d040      	beq.n	80153e0 <_vfiprintf_r+0x210>
 801535e:	4b28      	ldr	r3, [pc, #160]	@ (8015400 <_vfiprintf_r+0x230>)
 8015360:	2b00      	cmp	r3, #0
 8015362:	d122      	bne.n	80153aa <_vfiprintf_r+0x1da>
 8015364:	2207      	movs	r2, #7
 8015366:	9b07      	ldr	r3, [sp, #28]
 8015368:	3307      	adds	r3, #7
 801536a:	4393      	bics	r3, r2
 801536c:	3308      	adds	r3, #8
 801536e:	9307      	str	r3, [sp, #28]
 8015370:	6963      	ldr	r3, [r4, #20]
 8015372:	9a04      	ldr	r2, [sp, #16]
 8015374:	189b      	adds	r3, r3, r2
 8015376:	6163      	str	r3, [r4, #20]
 8015378:	e762      	b.n	8015240 <_vfiprintf_r+0x70>
 801537a:	4343      	muls	r3, r0
 801537c:	002e      	movs	r6, r5
 801537e:	2101      	movs	r1, #1
 8015380:	189b      	adds	r3, r3, r2
 8015382:	e7a4      	b.n	80152ce <_vfiprintf_r+0xfe>
 8015384:	2300      	movs	r3, #0
 8015386:	200a      	movs	r0, #10
 8015388:	0019      	movs	r1, r3
 801538a:	3601      	adds	r6, #1
 801538c:	6063      	str	r3, [r4, #4]
 801538e:	7832      	ldrb	r2, [r6, #0]
 8015390:	1c75      	adds	r5, r6, #1
 8015392:	3a30      	subs	r2, #48	@ 0x30
 8015394:	2a09      	cmp	r2, #9
 8015396:	d903      	bls.n	80153a0 <_vfiprintf_r+0x1d0>
 8015398:	2b00      	cmp	r3, #0
 801539a:	d0c8      	beq.n	801532e <_vfiprintf_r+0x15e>
 801539c:	9109      	str	r1, [sp, #36]	@ 0x24
 801539e:	e7c6      	b.n	801532e <_vfiprintf_r+0x15e>
 80153a0:	4341      	muls	r1, r0
 80153a2:	002e      	movs	r6, r5
 80153a4:	2301      	movs	r3, #1
 80153a6:	1889      	adds	r1, r1, r2
 80153a8:	e7f1      	b.n	801538e <_vfiprintf_r+0x1be>
 80153aa:	aa07      	add	r2, sp, #28
 80153ac:	9200      	str	r2, [sp, #0]
 80153ae:	0021      	movs	r1, r4
 80153b0:	003a      	movs	r2, r7
 80153b2:	4b14      	ldr	r3, [pc, #80]	@ (8015404 <_vfiprintf_r+0x234>)
 80153b4:	9803      	ldr	r0, [sp, #12]
 80153b6:	f7fd fd4d 	bl	8012e54 <_printf_float>
 80153ba:	9004      	str	r0, [sp, #16]
 80153bc:	9b04      	ldr	r3, [sp, #16]
 80153be:	3301      	adds	r3, #1
 80153c0:	d1d6      	bne.n	8015370 <_vfiprintf_r+0x1a0>
 80153c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80153c4:	07db      	lsls	r3, r3, #31
 80153c6:	d405      	bmi.n	80153d4 <_vfiprintf_r+0x204>
 80153c8:	89bb      	ldrh	r3, [r7, #12]
 80153ca:	059b      	lsls	r3, r3, #22
 80153cc:	d402      	bmi.n	80153d4 <_vfiprintf_r+0x204>
 80153ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80153d0:	f7fe fbaa 	bl	8013b28 <__retarget_lock_release_recursive>
 80153d4:	89bb      	ldrh	r3, [r7, #12]
 80153d6:	065b      	lsls	r3, r3, #25
 80153d8:	d500      	bpl.n	80153dc <_vfiprintf_r+0x20c>
 80153da:	e71e      	b.n	801521a <_vfiprintf_r+0x4a>
 80153dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80153de:	e71e      	b.n	801521e <_vfiprintf_r+0x4e>
 80153e0:	aa07      	add	r2, sp, #28
 80153e2:	9200      	str	r2, [sp, #0]
 80153e4:	0021      	movs	r1, r4
 80153e6:	003a      	movs	r2, r7
 80153e8:	4b06      	ldr	r3, [pc, #24]	@ (8015404 <_vfiprintf_r+0x234>)
 80153ea:	9803      	ldr	r0, [sp, #12]
 80153ec:	f7fd ffe0 	bl	80133b0 <_printf_i>
 80153f0:	e7e3      	b.n	80153ba <_vfiprintf_r+0x1ea>
 80153f2:	46c0      	nop			@ (mov r8, r8)
 80153f4:	08015e4a 	.word	0x08015e4a
 80153f8:	08015e50 	.word	0x08015e50
 80153fc:	08015e54 	.word	0x08015e54
 8015400:	08012e55 	.word	0x08012e55
 8015404:	080151ab 	.word	0x080151ab

08015408 <__sflush_r>:
 8015408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801540a:	220c      	movs	r2, #12
 801540c:	5e8b      	ldrsh	r3, [r1, r2]
 801540e:	0005      	movs	r5, r0
 8015410:	000c      	movs	r4, r1
 8015412:	071a      	lsls	r2, r3, #28
 8015414:	d456      	bmi.n	80154c4 <__sflush_r+0xbc>
 8015416:	684a      	ldr	r2, [r1, #4]
 8015418:	2a00      	cmp	r2, #0
 801541a:	dc02      	bgt.n	8015422 <__sflush_r+0x1a>
 801541c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801541e:	2a00      	cmp	r2, #0
 8015420:	dd4e      	ble.n	80154c0 <__sflush_r+0xb8>
 8015422:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015424:	2f00      	cmp	r7, #0
 8015426:	d04b      	beq.n	80154c0 <__sflush_r+0xb8>
 8015428:	2200      	movs	r2, #0
 801542a:	2080      	movs	r0, #128	@ 0x80
 801542c:	682e      	ldr	r6, [r5, #0]
 801542e:	602a      	str	r2, [r5, #0]
 8015430:	001a      	movs	r2, r3
 8015432:	0140      	lsls	r0, r0, #5
 8015434:	6a21      	ldr	r1, [r4, #32]
 8015436:	4002      	ands	r2, r0
 8015438:	4203      	tst	r3, r0
 801543a:	d033      	beq.n	80154a4 <__sflush_r+0x9c>
 801543c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801543e:	89a3      	ldrh	r3, [r4, #12]
 8015440:	075b      	lsls	r3, r3, #29
 8015442:	d506      	bpl.n	8015452 <__sflush_r+0x4a>
 8015444:	6863      	ldr	r3, [r4, #4]
 8015446:	1ad2      	subs	r2, r2, r3
 8015448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801544a:	2b00      	cmp	r3, #0
 801544c:	d001      	beq.n	8015452 <__sflush_r+0x4a>
 801544e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015450:	1ad2      	subs	r2, r2, r3
 8015452:	2300      	movs	r3, #0
 8015454:	0028      	movs	r0, r5
 8015456:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015458:	6a21      	ldr	r1, [r4, #32]
 801545a:	47b8      	blx	r7
 801545c:	89a2      	ldrh	r2, [r4, #12]
 801545e:	1c43      	adds	r3, r0, #1
 8015460:	d106      	bne.n	8015470 <__sflush_r+0x68>
 8015462:	6829      	ldr	r1, [r5, #0]
 8015464:	291d      	cmp	r1, #29
 8015466:	d846      	bhi.n	80154f6 <__sflush_r+0xee>
 8015468:	4b29      	ldr	r3, [pc, #164]	@ (8015510 <__sflush_r+0x108>)
 801546a:	40cb      	lsrs	r3, r1
 801546c:	07db      	lsls	r3, r3, #31
 801546e:	d542      	bpl.n	80154f6 <__sflush_r+0xee>
 8015470:	2300      	movs	r3, #0
 8015472:	6063      	str	r3, [r4, #4]
 8015474:	6923      	ldr	r3, [r4, #16]
 8015476:	6023      	str	r3, [r4, #0]
 8015478:	04d2      	lsls	r2, r2, #19
 801547a:	d505      	bpl.n	8015488 <__sflush_r+0x80>
 801547c:	1c43      	adds	r3, r0, #1
 801547e:	d102      	bne.n	8015486 <__sflush_r+0x7e>
 8015480:	682b      	ldr	r3, [r5, #0]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d100      	bne.n	8015488 <__sflush_r+0x80>
 8015486:	6560      	str	r0, [r4, #84]	@ 0x54
 8015488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801548a:	602e      	str	r6, [r5, #0]
 801548c:	2900      	cmp	r1, #0
 801548e:	d017      	beq.n	80154c0 <__sflush_r+0xb8>
 8015490:	0023      	movs	r3, r4
 8015492:	3344      	adds	r3, #68	@ 0x44
 8015494:	4299      	cmp	r1, r3
 8015496:	d002      	beq.n	801549e <__sflush_r+0x96>
 8015498:	0028      	movs	r0, r5
 801549a:	f7ff f9cf 	bl	801483c <_free_r>
 801549e:	2300      	movs	r3, #0
 80154a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80154a2:	e00d      	b.n	80154c0 <__sflush_r+0xb8>
 80154a4:	2301      	movs	r3, #1
 80154a6:	0028      	movs	r0, r5
 80154a8:	47b8      	blx	r7
 80154aa:	0002      	movs	r2, r0
 80154ac:	1c43      	adds	r3, r0, #1
 80154ae:	d1c6      	bne.n	801543e <__sflush_r+0x36>
 80154b0:	682b      	ldr	r3, [r5, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0c3      	beq.n	801543e <__sflush_r+0x36>
 80154b6:	2b1d      	cmp	r3, #29
 80154b8:	d001      	beq.n	80154be <__sflush_r+0xb6>
 80154ba:	2b16      	cmp	r3, #22
 80154bc:	d11a      	bne.n	80154f4 <__sflush_r+0xec>
 80154be:	602e      	str	r6, [r5, #0]
 80154c0:	2000      	movs	r0, #0
 80154c2:	e01e      	b.n	8015502 <__sflush_r+0xfa>
 80154c4:	690e      	ldr	r6, [r1, #16]
 80154c6:	2e00      	cmp	r6, #0
 80154c8:	d0fa      	beq.n	80154c0 <__sflush_r+0xb8>
 80154ca:	680f      	ldr	r7, [r1, #0]
 80154cc:	600e      	str	r6, [r1, #0]
 80154ce:	1bba      	subs	r2, r7, r6
 80154d0:	9201      	str	r2, [sp, #4]
 80154d2:	2200      	movs	r2, #0
 80154d4:	079b      	lsls	r3, r3, #30
 80154d6:	d100      	bne.n	80154da <__sflush_r+0xd2>
 80154d8:	694a      	ldr	r2, [r1, #20]
 80154da:	60a2      	str	r2, [r4, #8]
 80154dc:	9b01      	ldr	r3, [sp, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	ddee      	ble.n	80154c0 <__sflush_r+0xb8>
 80154e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80154e4:	0032      	movs	r2, r6
 80154e6:	001f      	movs	r7, r3
 80154e8:	0028      	movs	r0, r5
 80154ea:	9b01      	ldr	r3, [sp, #4]
 80154ec:	6a21      	ldr	r1, [r4, #32]
 80154ee:	47b8      	blx	r7
 80154f0:	2800      	cmp	r0, #0
 80154f2:	dc07      	bgt.n	8015504 <__sflush_r+0xfc>
 80154f4:	89a2      	ldrh	r2, [r4, #12]
 80154f6:	2340      	movs	r3, #64	@ 0x40
 80154f8:	2001      	movs	r0, #1
 80154fa:	4313      	orrs	r3, r2
 80154fc:	b21b      	sxth	r3, r3
 80154fe:	81a3      	strh	r3, [r4, #12]
 8015500:	4240      	negs	r0, r0
 8015502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015504:	9b01      	ldr	r3, [sp, #4]
 8015506:	1836      	adds	r6, r6, r0
 8015508:	1a1b      	subs	r3, r3, r0
 801550a:	9301      	str	r3, [sp, #4]
 801550c:	e7e6      	b.n	80154dc <__sflush_r+0xd4>
 801550e:	46c0      	nop			@ (mov r8, r8)
 8015510:	20400001 	.word	0x20400001

08015514 <_fflush_r>:
 8015514:	690b      	ldr	r3, [r1, #16]
 8015516:	b570      	push	{r4, r5, r6, lr}
 8015518:	0005      	movs	r5, r0
 801551a:	000c      	movs	r4, r1
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <_fflush_r+0x12>
 8015520:	2500      	movs	r5, #0
 8015522:	0028      	movs	r0, r5
 8015524:	bd70      	pop	{r4, r5, r6, pc}
 8015526:	2800      	cmp	r0, #0
 8015528:	d004      	beq.n	8015534 <_fflush_r+0x20>
 801552a:	6a03      	ldr	r3, [r0, #32]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d101      	bne.n	8015534 <_fflush_r+0x20>
 8015530:	f7fe f8da 	bl	80136e8 <__sinit>
 8015534:	220c      	movs	r2, #12
 8015536:	5ea3      	ldrsh	r3, [r4, r2]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d0f1      	beq.n	8015520 <_fflush_r+0xc>
 801553c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801553e:	07d2      	lsls	r2, r2, #31
 8015540:	d404      	bmi.n	801554c <_fflush_r+0x38>
 8015542:	059b      	lsls	r3, r3, #22
 8015544:	d402      	bmi.n	801554c <_fflush_r+0x38>
 8015546:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015548:	f7fe faed 	bl	8013b26 <__retarget_lock_acquire_recursive>
 801554c:	0028      	movs	r0, r5
 801554e:	0021      	movs	r1, r4
 8015550:	f7ff ff5a 	bl	8015408 <__sflush_r>
 8015554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015556:	0005      	movs	r5, r0
 8015558:	07db      	lsls	r3, r3, #31
 801555a:	d4e2      	bmi.n	8015522 <_fflush_r+0xe>
 801555c:	89a3      	ldrh	r3, [r4, #12]
 801555e:	059b      	lsls	r3, r3, #22
 8015560:	d4df      	bmi.n	8015522 <_fflush_r+0xe>
 8015562:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015564:	f7fe fae0 	bl	8013b28 <__retarget_lock_release_recursive>
 8015568:	e7db      	b.n	8015522 <_fflush_r+0xe>
	...

0801556c <__swhatbuf_r>:
 801556c:	b570      	push	{r4, r5, r6, lr}
 801556e:	000e      	movs	r6, r1
 8015570:	001d      	movs	r5, r3
 8015572:	230e      	movs	r3, #14
 8015574:	5ec9      	ldrsh	r1, [r1, r3]
 8015576:	0014      	movs	r4, r2
 8015578:	b096      	sub	sp, #88	@ 0x58
 801557a:	2900      	cmp	r1, #0
 801557c:	da0c      	bge.n	8015598 <__swhatbuf_r+0x2c>
 801557e:	89b2      	ldrh	r2, [r6, #12]
 8015580:	2380      	movs	r3, #128	@ 0x80
 8015582:	0011      	movs	r1, r2
 8015584:	4019      	ands	r1, r3
 8015586:	421a      	tst	r2, r3
 8015588:	d114      	bne.n	80155b4 <__swhatbuf_r+0x48>
 801558a:	2380      	movs	r3, #128	@ 0x80
 801558c:	00db      	lsls	r3, r3, #3
 801558e:	2000      	movs	r0, #0
 8015590:	6029      	str	r1, [r5, #0]
 8015592:	6023      	str	r3, [r4, #0]
 8015594:	b016      	add	sp, #88	@ 0x58
 8015596:	bd70      	pop	{r4, r5, r6, pc}
 8015598:	466a      	mov	r2, sp
 801559a:	f000 f889 	bl	80156b0 <_fstat_r>
 801559e:	2800      	cmp	r0, #0
 80155a0:	dbed      	blt.n	801557e <__swhatbuf_r+0x12>
 80155a2:	23f0      	movs	r3, #240	@ 0xf0
 80155a4:	9901      	ldr	r1, [sp, #4]
 80155a6:	021b      	lsls	r3, r3, #8
 80155a8:	4019      	ands	r1, r3
 80155aa:	4b04      	ldr	r3, [pc, #16]	@ (80155bc <__swhatbuf_r+0x50>)
 80155ac:	18c9      	adds	r1, r1, r3
 80155ae:	424b      	negs	r3, r1
 80155b0:	4159      	adcs	r1, r3
 80155b2:	e7ea      	b.n	801558a <__swhatbuf_r+0x1e>
 80155b4:	2100      	movs	r1, #0
 80155b6:	2340      	movs	r3, #64	@ 0x40
 80155b8:	e7e9      	b.n	801558e <__swhatbuf_r+0x22>
 80155ba:	46c0      	nop			@ (mov r8, r8)
 80155bc:	ffffe000 	.word	0xffffe000

080155c0 <__smakebuf_r>:
 80155c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c2:	2602      	movs	r6, #2
 80155c4:	898b      	ldrh	r3, [r1, #12]
 80155c6:	0005      	movs	r5, r0
 80155c8:	000c      	movs	r4, r1
 80155ca:	b085      	sub	sp, #20
 80155cc:	4233      	tst	r3, r6
 80155ce:	d007      	beq.n	80155e0 <__smakebuf_r+0x20>
 80155d0:	0023      	movs	r3, r4
 80155d2:	3347      	adds	r3, #71	@ 0x47
 80155d4:	6023      	str	r3, [r4, #0]
 80155d6:	6123      	str	r3, [r4, #16]
 80155d8:	2301      	movs	r3, #1
 80155da:	6163      	str	r3, [r4, #20]
 80155dc:	b005      	add	sp, #20
 80155de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155e0:	ab03      	add	r3, sp, #12
 80155e2:	aa02      	add	r2, sp, #8
 80155e4:	f7ff ffc2 	bl	801556c <__swhatbuf_r>
 80155e8:	9f02      	ldr	r7, [sp, #8]
 80155ea:	9001      	str	r0, [sp, #4]
 80155ec:	0039      	movs	r1, r7
 80155ee:	0028      	movs	r0, r5
 80155f0:	f7ff f99a 	bl	8014928 <_malloc_r>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d108      	bne.n	801560a <__smakebuf_r+0x4a>
 80155f8:	220c      	movs	r2, #12
 80155fa:	5ea3      	ldrsh	r3, [r4, r2]
 80155fc:	059a      	lsls	r2, r3, #22
 80155fe:	d4ed      	bmi.n	80155dc <__smakebuf_r+0x1c>
 8015600:	2203      	movs	r2, #3
 8015602:	4393      	bics	r3, r2
 8015604:	431e      	orrs	r6, r3
 8015606:	81a6      	strh	r6, [r4, #12]
 8015608:	e7e2      	b.n	80155d0 <__smakebuf_r+0x10>
 801560a:	2380      	movs	r3, #128	@ 0x80
 801560c:	89a2      	ldrh	r2, [r4, #12]
 801560e:	6020      	str	r0, [r4, #0]
 8015610:	4313      	orrs	r3, r2
 8015612:	81a3      	strh	r3, [r4, #12]
 8015614:	9b03      	ldr	r3, [sp, #12]
 8015616:	6120      	str	r0, [r4, #16]
 8015618:	6167      	str	r7, [r4, #20]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d00c      	beq.n	8015638 <__smakebuf_r+0x78>
 801561e:	0028      	movs	r0, r5
 8015620:	230e      	movs	r3, #14
 8015622:	5ee1      	ldrsh	r1, [r4, r3]
 8015624:	f000 f856 	bl	80156d4 <_isatty_r>
 8015628:	2800      	cmp	r0, #0
 801562a:	d005      	beq.n	8015638 <__smakebuf_r+0x78>
 801562c:	2303      	movs	r3, #3
 801562e:	89a2      	ldrh	r2, [r4, #12]
 8015630:	439a      	bics	r2, r3
 8015632:	3b02      	subs	r3, #2
 8015634:	4313      	orrs	r3, r2
 8015636:	81a3      	strh	r3, [r4, #12]
 8015638:	89a3      	ldrh	r3, [r4, #12]
 801563a:	9a01      	ldr	r2, [sp, #4]
 801563c:	4313      	orrs	r3, r2
 801563e:	81a3      	strh	r3, [r4, #12]
 8015640:	e7cc      	b.n	80155dc <__smakebuf_r+0x1c>

08015642 <_putc_r>:
 8015642:	b570      	push	{r4, r5, r6, lr}
 8015644:	0006      	movs	r6, r0
 8015646:	000d      	movs	r5, r1
 8015648:	0014      	movs	r4, r2
 801564a:	2800      	cmp	r0, #0
 801564c:	d004      	beq.n	8015658 <_putc_r+0x16>
 801564e:	6a03      	ldr	r3, [r0, #32]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d101      	bne.n	8015658 <_putc_r+0x16>
 8015654:	f7fe f848 	bl	80136e8 <__sinit>
 8015658:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801565a:	07db      	lsls	r3, r3, #31
 801565c:	d405      	bmi.n	801566a <_putc_r+0x28>
 801565e:	89a3      	ldrh	r3, [r4, #12]
 8015660:	059b      	lsls	r3, r3, #22
 8015662:	d402      	bmi.n	801566a <_putc_r+0x28>
 8015664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015666:	f7fe fa5e 	bl	8013b26 <__retarget_lock_acquire_recursive>
 801566a:	68a3      	ldr	r3, [r4, #8]
 801566c:	3b01      	subs	r3, #1
 801566e:	60a3      	str	r3, [r4, #8]
 8015670:	2b00      	cmp	r3, #0
 8015672:	da05      	bge.n	8015680 <_putc_r+0x3e>
 8015674:	69a2      	ldr	r2, [r4, #24]
 8015676:	4293      	cmp	r3, r2
 8015678:	db12      	blt.n	80156a0 <_putc_r+0x5e>
 801567a:	b2eb      	uxtb	r3, r5
 801567c:	2b0a      	cmp	r3, #10
 801567e:	d00f      	beq.n	80156a0 <_putc_r+0x5e>
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	1c5a      	adds	r2, r3, #1
 8015684:	6022      	str	r2, [r4, #0]
 8015686:	701d      	strb	r5, [r3, #0]
 8015688:	b2ed      	uxtb	r5, r5
 801568a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801568c:	07db      	lsls	r3, r3, #31
 801568e:	d405      	bmi.n	801569c <_putc_r+0x5a>
 8015690:	89a3      	ldrh	r3, [r4, #12]
 8015692:	059b      	lsls	r3, r3, #22
 8015694:	d402      	bmi.n	801569c <_putc_r+0x5a>
 8015696:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015698:	f7fe fa46 	bl	8013b28 <__retarget_lock_release_recursive>
 801569c:	0028      	movs	r0, r5
 801569e:	bd70      	pop	{r4, r5, r6, pc}
 80156a0:	0029      	movs	r1, r5
 80156a2:	0022      	movs	r2, r4
 80156a4:	0030      	movs	r0, r6
 80156a6:	f7fe f919 	bl	80138dc <__swbuf_r>
 80156aa:	0005      	movs	r5, r0
 80156ac:	e7ed      	b.n	801568a <_putc_r+0x48>
	...

080156b0 <_fstat_r>:
 80156b0:	2300      	movs	r3, #0
 80156b2:	b570      	push	{r4, r5, r6, lr}
 80156b4:	4d06      	ldr	r5, [pc, #24]	@ (80156d0 <_fstat_r+0x20>)
 80156b6:	0004      	movs	r4, r0
 80156b8:	0008      	movs	r0, r1
 80156ba:	0011      	movs	r1, r2
 80156bc:	602b      	str	r3, [r5, #0]
 80156be:	f7ee fa1d 	bl	8003afc <_fstat>
 80156c2:	1c43      	adds	r3, r0, #1
 80156c4:	d103      	bne.n	80156ce <_fstat_r+0x1e>
 80156c6:	682b      	ldr	r3, [r5, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d000      	beq.n	80156ce <_fstat_r+0x1e>
 80156cc:	6023      	str	r3, [r4, #0]
 80156ce:	bd70      	pop	{r4, r5, r6, pc}
 80156d0:	20005e8c 	.word	0x20005e8c

080156d4 <_isatty_r>:
 80156d4:	2300      	movs	r3, #0
 80156d6:	b570      	push	{r4, r5, r6, lr}
 80156d8:	4d06      	ldr	r5, [pc, #24]	@ (80156f4 <_isatty_r+0x20>)
 80156da:	0004      	movs	r4, r0
 80156dc:	0008      	movs	r0, r1
 80156de:	602b      	str	r3, [r5, #0]
 80156e0:	f7ee fa1a 	bl	8003b18 <_isatty>
 80156e4:	1c43      	adds	r3, r0, #1
 80156e6:	d103      	bne.n	80156f0 <_isatty_r+0x1c>
 80156e8:	682b      	ldr	r3, [r5, #0]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d000      	beq.n	80156f0 <_isatty_r+0x1c>
 80156ee:	6023      	str	r3, [r4, #0]
 80156f0:	bd70      	pop	{r4, r5, r6, pc}
 80156f2:	46c0      	nop			@ (mov r8, r8)
 80156f4:	20005e8c 	.word	0x20005e8c

080156f8 <_sbrk_r>:
 80156f8:	2300      	movs	r3, #0
 80156fa:	b570      	push	{r4, r5, r6, lr}
 80156fc:	4d06      	ldr	r5, [pc, #24]	@ (8015718 <_sbrk_r+0x20>)
 80156fe:	0004      	movs	r4, r0
 8015700:	0008      	movs	r0, r1
 8015702:	602b      	str	r3, [r5, #0]
 8015704:	f7ee fa1c 	bl	8003b40 <_sbrk>
 8015708:	1c43      	adds	r3, r0, #1
 801570a:	d103      	bne.n	8015714 <_sbrk_r+0x1c>
 801570c:	682b      	ldr	r3, [r5, #0]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d000      	beq.n	8015714 <_sbrk_r+0x1c>
 8015712:	6023      	str	r3, [r4, #0]
 8015714:	bd70      	pop	{r4, r5, r6, pc}
 8015716:	46c0      	nop			@ (mov r8, r8)
 8015718:	20005e8c 	.word	0x20005e8c

0801571c <__assert_func>:
 801571c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801571e:	0014      	movs	r4, r2
 8015720:	001a      	movs	r2, r3
 8015722:	4b09      	ldr	r3, [pc, #36]	@ (8015748 <__assert_func+0x2c>)
 8015724:	0005      	movs	r5, r0
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	000e      	movs	r6, r1
 801572a:	68d8      	ldr	r0, [r3, #12]
 801572c:	4b07      	ldr	r3, [pc, #28]	@ (801574c <__assert_func+0x30>)
 801572e:	2c00      	cmp	r4, #0
 8015730:	d101      	bne.n	8015736 <__assert_func+0x1a>
 8015732:	4b07      	ldr	r3, [pc, #28]	@ (8015750 <__assert_func+0x34>)
 8015734:	001c      	movs	r4, r3
 8015736:	4907      	ldr	r1, [pc, #28]	@ (8015754 <__assert_func+0x38>)
 8015738:	9301      	str	r3, [sp, #4]
 801573a:	9402      	str	r4, [sp, #8]
 801573c:	002b      	movs	r3, r5
 801573e:	9600      	str	r6, [sp, #0]
 8015740:	f000 f856 	bl	80157f0 <fiprintf>
 8015744:	f000 f864 	bl	8015810 <abort>
 8015748:	20000094 	.word	0x20000094
 801574c:	08015e65 	.word	0x08015e65
 8015750:	08015ea0 	.word	0x08015ea0
 8015754:	08015e72 	.word	0x08015e72

08015758 <_calloc_r>:
 8015758:	b570      	push	{r4, r5, r6, lr}
 801575a:	0c0b      	lsrs	r3, r1, #16
 801575c:	0c15      	lsrs	r5, r2, #16
 801575e:	2b00      	cmp	r3, #0
 8015760:	d11e      	bne.n	80157a0 <_calloc_r+0x48>
 8015762:	2d00      	cmp	r5, #0
 8015764:	d10c      	bne.n	8015780 <_calloc_r+0x28>
 8015766:	b289      	uxth	r1, r1
 8015768:	b294      	uxth	r4, r2
 801576a:	434c      	muls	r4, r1
 801576c:	0021      	movs	r1, r4
 801576e:	f7ff f8db 	bl	8014928 <_malloc_r>
 8015772:	1e05      	subs	r5, r0, #0
 8015774:	d01b      	beq.n	80157ae <_calloc_r+0x56>
 8015776:	0022      	movs	r2, r4
 8015778:	2100      	movs	r1, #0
 801577a:	f7fe f94f 	bl	8013a1c <memset>
 801577e:	e016      	b.n	80157ae <_calloc_r+0x56>
 8015780:	1c2b      	adds	r3, r5, #0
 8015782:	1c0c      	adds	r4, r1, #0
 8015784:	b289      	uxth	r1, r1
 8015786:	b292      	uxth	r2, r2
 8015788:	434a      	muls	r2, r1
 801578a:	b29b      	uxth	r3, r3
 801578c:	b2a1      	uxth	r1, r4
 801578e:	4359      	muls	r1, r3
 8015790:	0c14      	lsrs	r4, r2, #16
 8015792:	190c      	adds	r4, r1, r4
 8015794:	0c23      	lsrs	r3, r4, #16
 8015796:	d107      	bne.n	80157a8 <_calloc_r+0x50>
 8015798:	0424      	lsls	r4, r4, #16
 801579a:	b292      	uxth	r2, r2
 801579c:	4314      	orrs	r4, r2
 801579e:	e7e5      	b.n	801576c <_calloc_r+0x14>
 80157a0:	2d00      	cmp	r5, #0
 80157a2:	d101      	bne.n	80157a8 <_calloc_r+0x50>
 80157a4:	1c14      	adds	r4, r2, #0
 80157a6:	e7ed      	b.n	8015784 <_calloc_r+0x2c>
 80157a8:	230c      	movs	r3, #12
 80157aa:	2500      	movs	r5, #0
 80157ac:	6003      	str	r3, [r0, #0]
 80157ae:	0028      	movs	r0, r5
 80157b0:	bd70      	pop	{r4, r5, r6, pc}

080157b2 <__ascii_mbtowc>:
 80157b2:	b082      	sub	sp, #8
 80157b4:	2900      	cmp	r1, #0
 80157b6:	d100      	bne.n	80157ba <__ascii_mbtowc+0x8>
 80157b8:	a901      	add	r1, sp, #4
 80157ba:	1e10      	subs	r0, r2, #0
 80157bc:	d006      	beq.n	80157cc <__ascii_mbtowc+0x1a>
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d006      	beq.n	80157d0 <__ascii_mbtowc+0x1e>
 80157c2:	7813      	ldrb	r3, [r2, #0]
 80157c4:	600b      	str	r3, [r1, #0]
 80157c6:	7810      	ldrb	r0, [r2, #0]
 80157c8:	1e43      	subs	r3, r0, #1
 80157ca:	4198      	sbcs	r0, r3
 80157cc:	b002      	add	sp, #8
 80157ce:	4770      	bx	lr
 80157d0:	2002      	movs	r0, #2
 80157d2:	4240      	negs	r0, r0
 80157d4:	e7fa      	b.n	80157cc <__ascii_mbtowc+0x1a>

080157d6 <__ascii_wctomb>:
 80157d6:	0003      	movs	r3, r0
 80157d8:	1e08      	subs	r0, r1, #0
 80157da:	d005      	beq.n	80157e8 <__ascii_wctomb+0x12>
 80157dc:	2aff      	cmp	r2, #255	@ 0xff
 80157de:	d904      	bls.n	80157ea <__ascii_wctomb+0x14>
 80157e0:	228a      	movs	r2, #138	@ 0x8a
 80157e2:	2001      	movs	r0, #1
 80157e4:	601a      	str	r2, [r3, #0]
 80157e6:	4240      	negs	r0, r0
 80157e8:	4770      	bx	lr
 80157ea:	2001      	movs	r0, #1
 80157ec:	700a      	strb	r2, [r1, #0]
 80157ee:	e7fb      	b.n	80157e8 <__ascii_wctomb+0x12>

080157f0 <fiprintf>:
 80157f0:	b40e      	push	{r1, r2, r3}
 80157f2:	b517      	push	{r0, r1, r2, r4, lr}
 80157f4:	4c05      	ldr	r4, [pc, #20]	@ (801580c <fiprintf+0x1c>)
 80157f6:	ab05      	add	r3, sp, #20
 80157f8:	cb04      	ldmia	r3!, {r2}
 80157fa:	0001      	movs	r1, r0
 80157fc:	6820      	ldr	r0, [r4, #0]
 80157fe:	9301      	str	r3, [sp, #4]
 8015800:	f7ff fce6 	bl	80151d0 <_vfiprintf_r>
 8015804:	bc1e      	pop	{r1, r2, r3, r4}
 8015806:	bc08      	pop	{r3}
 8015808:	b003      	add	sp, #12
 801580a:	4718      	bx	r3
 801580c:	20000094 	.word	0x20000094

08015810 <abort>:
 8015810:	2006      	movs	r0, #6
 8015812:	b510      	push	{r4, lr}
 8015814:	f000 f82c 	bl	8015870 <raise>
 8015818:	2001      	movs	r0, #1
 801581a:	f7ee f91f 	bl	8003a5c <_exit>

0801581e <_raise_r>:
 801581e:	b570      	push	{r4, r5, r6, lr}
 8015820:	0004      	movs	r4, r0
 8015822:	000d      	movs	r5, r1
 8015824:	291f      	cmp	r1, #31
 8015826:	d904      	bls.n	8015832 <_raise_r+0x14>
 8015828:	2316      	movs	r3, #22
 801582a:	6003      	str	r3, [r0, #0]
 801582c:	2001      	movs	r0, #1
 801582e:	4240      	negs	r0, r0
 8015830:	bd70      	pop	{r4, r5, r6, pc}
 8015832:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8015834:	2b00      	cmp	r3, #0
 8015836:	d004      	beq.n	8015842 <_raise_r+0x24>
 8015838:	008a      	lsls	r2, r1, #2
 801583a:	189b      	adds	r3, r3, r2
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	2a00      	cmp	r2, #0
 8015840:	d108      	bne.n	8015854 <_raise_r+0x36>
 8015842:	0020      	movs	r0, r4
 8015844:	f000 f830 	bl	80158a8 <_getpid_r>
 8015848:	002a      	movs	r2, r5
 801584a:	0001      	movs	r1, r0
 801584c:	0020      	movs	r0, r4
 801584e:	f000 f819 	bl	8015884 <_kill_r>
 8015852:	e7ed      	b.n	8015830 <_raise_r+0x12>
 8015854:	2a01      	cmp	r2, #1
 8015856:	d009      	beq.n	801586c <_raise_r+0x4e>
 8015858:	1c51      	adds	r1, r2, #1
 801585a:	d103      	bne.n	8015864 <_raise_r+0x46>
 801585c:	2316      	movs	r3, #22
 801585e:	6003      	str	r3, [r0, #0]
 8015860:	2001      	movs	r0, #1
 8015862:	e7e5      	b.n	8015830 <_raise_r+0x12>
 8015864:	2100      	movs	r1, #0
 8015866:	0028      	movs	r0, r5
 8015868:	6019      	str	r1, [r3, #0]
 801586a:	4790      	blx	r2
 801586c:	2000      	movs	r0, #0
 801586e:	e7df      	b.n	8015830 <_raise_r+0x12>

08015870 <raise>:
 8015870:	b510      	push	{r4, lr}
 8015872:	4b03      	ldr	r3, [pc, #12]	@ (8015880 <raise+0x10>)
 8015874:	0001      	movs	r1, r0
 8015876:	6818      	ldr	r0, [r3, #0]
 8015878:	f7ff ffd1 	bl	801581e <_raise_r>
 801587c:	bd10      	pop	{r4, pc}
 801587e:	46c0      	nop			@ (mov r8, r8)
 8015880:	20000094 	.word	0x20000094

08015884 <_kill_r>:
 8015884:	2300      	movs	r3, #0
 8015886:	b570      	push	{r4, r5, r6, lr}
 8015888:	4d06      	ldr	r5, [pc, #24]	@ (80158a4 <_kill_r+0x20>)
 801588a:	0004      	movs	r4, r0
 801588c:	0008      	movs	r0, r1
 801588e:	0011      	movs	r1, r2
 8015890:	602b      	str	r3, [r5, #0]
 8015892:	f7ee f8d3 	bl	8003a3c <_kill>
 8015896:	1c43      	adds	r3, r0, #1
 8015898:	d103      	bne.n	80158a2 <_kill_r+0x1e>
 801589a:	682b      	ldr	r3, [r5, #0]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d000      	beq.n	80158a2 <_kill_r+0x1e>
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	bd70      	pop	{r4, r5, r6, pc}
 80158a4:	20005e8c 	.word	0x20005e8c

080158a8 <_getpid_r>:
 80158a8:	b510      	push	{r4, lr}
 80158aa:	f7ee f8c1 	bl	8003a30 <_getpid>
 80158ae:	bd10      	pop	{r4, pc}

080158b0 <_init>:
 80158b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158b2:	46c0      	nop			@ (mov r8, r8)
 80158b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158b6:	bc08      	pop	{r3}
 80158b8:	469e      	mov	lr, r3
 80158ba:	4770      	bx	lr

080158bc <_fini>:
 80158bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158be:	46c0      	nop			@ (mov r8, r8)
 80158c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158c2:	bc08      	pop	{r3}
 80158c4:	469e      	mov	lr, r3
 80158c6:	4770      	bx	lr
